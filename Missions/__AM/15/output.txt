// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 65 0 0
// InitMacro ;
  15: CALL 38350 0 0
// InitNature ;
  19: CALL 38218 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// PrepareAlliance ;
  36: CALL 12360 0 0
// PrepareRussian ;
  40: CALL 7323 0 0
// PrepareLegion ;
  44: CALL 4478 0 0
// PreparePowell ;
  48: CALL 3056 0 0
// PrepareAmerican ;
  52: CALL 1816 0 0
// Action ;
  56: CALL 17080 0 0
// MC_Start ( ) ;
  60: CALL 40530 0 0
// end ;
  64: END
// export debug ; export KappaStatus , KurtStatus , JMMVeh , JMMGirlVeh , JMMGirlStatus , JMMGirl , KhatamStatus , BurlakStatus , StevensStatus , FastEnd , FakeInfo ; export missionStart , missionTime , missionStage , activeAttacks , powellAnger , powellSquadAttack , powellAllowRetreat , powellCenterCameraMode , russianDestroyed , legionDestroyed , allianceDestroyed , vsevolodFirstAttack , allowBehemothConstruct , behemothUnderConstruct , behemothDestroyedBeforeFinish , behemothDone , seeBehemoth , platonovHasBomb , allianceActive , lostCounter , rothCaptured , capturedUnit , trueAmericans , powellAngerQuery , bombExploded , legionEscapeUnits , amConstructCounter ; export function InitVariables ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// missionStart := false ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// missionTime := 0 0$00 ;
  84: LD_ADDR_EXP 14
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// missionStage := 1 ;
  92: LD_ADDR_EXP 15
  96: PUSH
  97: LD_INT 1
  99: ST_TO_ADDR
// activeAttacks := false ;
 100: LD_ADDR_EXP 16
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// powellAnger := 0 ;
 108: LD_ADDR_EXP 17
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// powellAngerQuery := false ;
 116: LD_ADDR_EXP 36
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// powellAllowRetreat := true ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 1
 131: ST_TO_ADDR
// powellCenterCameraMode := false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// powellSquadAttack := [ [ ] , [ ] ] ;
 140: LD_ADDR_EXP 18
 144: PUSH
 145: EMPTY
 146: PUSH
 147: EMPTY
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: ST_TO_ADDR
// russianDestroyed := false ;
 153: LD_ADDR_EXP 21
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// legionDestroyed := false ;
 161: LD_ADDR_EXP 22
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// allianceDestroyed := false ;
 169: LD_ADDR_EXP 23
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// KappaStatus := LoadVariable ( 14_KappaStatus_1 , 0 ) ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 14_KappaStatus_1
 184: PPUSH
 185: LD_INT 0
 187: PPUSH
 188: CALL_OW 30
 192: ST_TO_ADDR
// KurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 193: LD_ADDR_EXP 3
 197: PUSH
 198: LD_STRING 06_KurtStatus_1
 200: PPUSH
 201: LD_INT 0
 203: PPUSH
 204: CALL_OW 30
 208: ST_TO_ADDR
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , 0 ) ;
 209: LD_ADDR_EXP 4
 213: PUSH
 214: LD_STRING 14_JMMVeh_1
 216: PPUSH
 217: LD_INT 0
 219: PPUSH
 220: CALL_OW 30
 224: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , 0 ) ;
 225: LD_ADDR_EXP 5
 229: PUSH
 230: LD_STRING 14_JMMGirlVeh_1
 232: PPUSH
 233: LD_INT 0
 235: PPUSH
 236: CALL_OW 30
 240: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
 241: LD_ADDR_EXP 7
 245: PUSH
 246: LD_STRING 14_JMMGirl_1
 248: PPUSH
 249: LD_INT 0
 251: PPUSH
 252: CALL_OW 30
 256: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
 257: LD_ADDR_EXP 6
 261: PUSH
 262: LD_STRING 14_JMMGirlStatus_1
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: CALL_OW 30
 272: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
 273: LD_ADDR_EXP 8
 277: PUSH
 278: LD_STRING 10_KhatamStatus_1
 280: PPUSH
 281: LD_INT 0
 283: PPUSH
 284: CALL_OW 30
 288: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 289: LD_ADDR_EXP 9
 293: PUSH
 294: LD_STRING 13_BurlakStatus_1
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 305: LD_ADDR_EXP 10
 309: PUSH
 310: LD_STRING 13_StevensStatus_1
 312: PPUSH
 313: LD_INT 0
 315: PPUSH
 316: CALL_OW 30
 320: ST_TO_ADDR
// FastEnd := LoadVariable ( 14_FastEnd_1 , 0 ) ;
 321: LD_ADDR_EXP 11
 325: PUSH
 326: LD_STRING 14_FastEnd_1
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL_OW 30
 336: ST_TO_ADDR
// FakeInfo := LoadVariable ( 12_MainDepositFake_1 , 0 ) ;
 337: LD_ADDR_EXP 12
 341: PUSH
 342: LD_STRING 12_MainDepositFake_1
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 30
 352: ST_TO_ADDR
// vsevolodFirstAttack := true ;
 353: LD_ADDR_EXP 24
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// behemothUnderConstruct := false ;
 361: LD_ADDR_EXP 26
 365: PUSH
 366: LD_INT 0
 368: ST_TO_ADDR
// behemothDestroyedBeforeFinish := false ;
 369: LD_ADDR_EXP 27
 373: PUSH
 374: LD_INT 0
 376: ST_TO_ADDR
// behemothDone := false ;
 377: LD_ADDR_EXP 28
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// allowBehemothConstruct := false ;
 385: LD_ADDR_EXP 25
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// seeBehemoth := false ;
 393: LD_ADDR_EXP 29
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// platonovHasBomb := false ;
 401: LD_ADDR_EXP 30
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// allianceActive := false ;
 409: LD_ADDR_EXP 31
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// rothCaptured := false ;
 417: LD_ADDR_EXP 33
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// lostCounter := 0 ;
 425: LD_ADDR_EXP 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// capturedUnit := [ ] ;
 433: LD_ADDR_EXP 34
 437: PUSH
 438: EMPTY
 439: ST_TO_ADDR
// trueAmericans := [ ] ;
 440: LD_ADDR_EXP 35
 444: PUSH
 445: EMPTY
 446: ST_TO_ADDR
// bombExploded := false ;
 447: LD_ADDR_EXP 37
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// legionEscapeUnits := [ ] ;
 455: LD_ADDR_EXP 38
 459: PUSH
 460: EMPTY
 461: ST_TO_ADDR
// amConstructCounter := 0 ;
 462: LD_ADDR_EXP 39
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export function CustomInitMacro ( ) ; begin
 475: LD_INT 0
 477: PPUSH
// mc_parking := [ allianceParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 478: LD_ADDR_EXP 125
 482: PUSH
 483: LD_INT 2
 485: PUSH
 486: LD_INT 3
 488: PUSH
 489: LD_INT 6
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: ST_TO_ADDR
// mc_scan_area := [ allianceBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 501: LD_ADDR_EXP 126
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: LD_INT 4
 511: PUSH
 512: LD_INT 5
 514: PUSH
 515: LD_INT 9
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: ST_TO_ADDR
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto ] ) ;
 524: LD_INT 1
 526: PPUSH
 527: LD_INT 10
 529: PUSH
 530: LD_INT 11
 532: PUSH
 533: LD_INT 12
 535: PUSH
 536: LD_INT 15
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: PPUSH
 545: CALL 63326 0 2
// MC_SetCratesArea ( 1 , [ allianceCratesArea ] ) ;
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 17
 554: PUSH
 555: EMPTY
 556: LIST
 557: PPUSH
 558: CALL 63419 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
 562: LD_INT 1
 564: PPUSH
 565: LD_INT 5
 567: PPUSH
 568: CALL 62769 0 2
// MC_SetProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 572: LD_INT 1
 574: PPUSH
 575: LD_INT 24
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 3
 583: PUSH
 584: LD_INT 47
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 24
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 3
 601: PUSH
 602: LD_INT 47
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 24
 613: PUSH
 614: LD_INT 3
 616: PUSH
 617: LD_INT 3
 619: PUSH
 620: LD_INT 47
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 24
 631: PUSH
 632: LD_INT 3
 634: PUSH
 635: LD_INT 3
 637: PUSH
 638: LD_INT 47
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: PUSH
 647: LD_INT 24
 649: PUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 47
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: PPUSH
 672: CALL 62584 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 676: LD_INT 2
 678: PPUSH
 679: LD_INT 10
 681: PUSH
 682: LD_INT 11
 684: PUSH
 685: LD_INT 12
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL 63326 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 701: LD_INT 2
 703: PPUSH
 704: LD_INT 16
 706: PUSH
 707: EMPTY
 708: LIST
 709: PPUSH
 710: CALL 63419 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 714: LD_INT 2
 716: PPUSH
 717: LD_INT 21
 719: PUSH
 720: LD_INT 3
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 51
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 52
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: LD_INT 3
 761: PUSH
 762: LD_INT 52
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 24
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: LD_INT 3
 779: PUSH
 780: LD_INT 47
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 3
 794: PUSH
 795: LD_INT 3
 797: PUSH
 798: LD_INT 47
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 24
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: LD_INT 47
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 24
 827: PUSH
 828: LD_INT 3
 830: PUSH
 831: LD_INT 3
 833: PUSH
 834: LD_INT 47
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 24
 845: PUSH
 846: LD_INT 3
 848: PUSH
 849: LD_INT 3
 851: PUSH
 852: LD_INT 47
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PPUSH
 871: CALL 62584 0 2
// MC_SetDefenderLimit ( 2 , 5 ) ;
 875: LD_INT 2
 877: PPUSH
 878: LD_INT 5
 880: PPUSH
 881: CALL 62769 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 885: LD_INT 2
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL 63199 0 2
// MC_SetMinesField ( 3 , [ 10 , 12 , 14 , 15 ] [ Difficulty ] , legionMinefield ) ;
 895: LD_INT 3
 897: PPUSH
 898: LD_INT 10
 900: PUSH
 901: LD_INT 12
 903: PUSH
 904: LD_INT 14
 906: PUSH
 907: LD_INT 15
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_OWVAR 67
 920: ARRAY
 921: PPUSH
 922: LD_INT 27
 924: PPUSH
 925: CALL 62247 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 929: LD_INT 3
 931: PPUSH
 932: LD_INT 10
 934: PUSH
 935: LD_INT 11
 937: PUSH
 938: LD_INT 13
 940: PUSH
 941: LD_INT 15
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL 63326 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 954: LD_INT 3
 956: PPUSH
 957: LD_INT 15
 959: PUSH
 960: EMPTY
 961: LIST
 962: PPUSH
 963: CALL 63419 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 967: LD_ADDR_EXP 130
 971: PUSH
 972: LD_EXP 130
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: LD_INT 22
 982: PUSH
 983: LD_INT 8
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: LD_INT 25
 992: PUSH
 993: LD_INT 15
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PPUSH
1004: CALL_OW 69
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] , [ ar_half_tracked , engine_combustion , control_remote , ar_crane ] ] ) ;
1014: LD_INT 3
1016: PPUSH
1017: LD_INT 13
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: LD_INT 31
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 13
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: LD_INT 31
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 13
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: LD_INT 2
1061: PUSH
1062: LD_INT 32
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 14
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: LD_INT 88
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL 62584 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer ] ) ;
1099: LD_INT 4
1101: PPUSH
1102: LD_INT 10
1104: PUSH
1105: LD_INT 12
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PPUSH
1112: CALL 63326 0 2
// MC_SetCratesArea ( 4 , [ powellBase ] ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 9
1121: PUSH
1122: EMPTY
1123: LIST
1124: PPUSH
1125: CALL 63419 0 2
// MC_SetBuildingList ( 4 , [ [ b_oil_power , 74 , 107 , 0 ] , [ b_bunker , 77 , 101 , 4 ] , [ b_bunker , 69 , 86 , 4 ] , [ b_solar_power , 77 , 110 , 3 ] , [ b_solar_power , 42 , 79 , 5 ] , [ b_oil_mine , 86 , 105 , 2 ] , [ b_siberite_mine , 40 , 75 , 1 ] , [ b_bunker , 80 , 106 , 4 ] , [ b_bunker , 75 , 114 , 5 ] , [ b_armoury , 39 , 61 , 3 ] ] ) ;
1129: LD_INT 4
1131: PPUSH
1132: LD_INT 26
1134: PUSH
1135: LD_INT 74
1137: PUSH
1138: LD_INT 107
1140: PUSH
1141: LD_INT 0
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_INT 32
1152: PUSH
1153: LD_INT 77
1155: PUSH
1156: LD_INT 101
1158: PUSH
1159: LD_INT 4
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 32
1170: PUSH
1171: LD_INT 69
1173: PUSH
1174: LD_INT 86
1176: PUSH
1177: LD_INT 4
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 27
1188: PUSH
1189: LD_INT 77
1191: PUSH
1192: LD_INT 110
1194: PUSH
1195: LD_INT 3
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 27
1206: PUSH
1207: LD_INT 42
1209: PUSH
1210: LD_INT 79
1212: PUSH
1213: LD_INT 5
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_INT 29
1224: PUSH
1225: LD_INT 86
1227: PUSH
1228: LD_INT 105
1230: PUSH
1231: LD_INT 2
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 30
1242: PUSH
1243: LD_INT 40
1245: PUSH
1246: LD_INT 75
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 32
1260: PUSH
1261: LD_INT 80
1263: PUSH
1264: LD_INT 106
1266: PUSH
1267: LD_INT 4
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 32
1278: PUSH
1279: LD_INT 75
1281: PUSH
1282: LD_INT 114
1284: PUSH
1285: LD_INT 5
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 4
1296: PUSH
1297: LD_INT 39
1299: PUSH
1300: LD_INT 61
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL 62476 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher ] ) ;
1328: LD_INT 4
1330: PPUSH
1331: LD_INT 5
1333: PUSH
1334: LD_INT 6
1336: PUSH
1337: LD_INT 7
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL 63737 0 2
// MC_SetDepositsXY ( 4 , [ [ 40 , 75 , 1 ] , [ 86 , 105 , 0 ] ] ) ;
1349: LD_INT 4
1351: PPUSH
1352: LD_INT 40
1354: PUSH
1355: LD_INT 75
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 86
1368: PUSH
1369: LD_INT 105
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: LIST
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PPUSH
1384: CALL 62908 0 2
// MC_SetUpgradeBuilding ( 4 , b_workshop ) ;
1388: LD_INT 4
1390: PPUSH
1391: LD_INT 2
1393: PPUSH
1394: CALL 63199 0 2
// MC_SetUpgradeBuilding ( 4 , b_depot ) ;
1398: LD_INT 4
1400: PPUSH
1401: LD_INT 0
1403: PPUSH
1404: CALL 63199 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket ] ) ;
1408: LD_INT 4
1410: PPUSH
1411: LD_INT 54
1413: PPUSH
1414: LD_INT 85
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: LD_INT 19
1422: PUSH
1423: LD_INT 16
1425: PUSH
1426: LD_INT 17
1428: PUSH
1429: LD_INT 18
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: PPUSH
1438: CALL 63531 0 5
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ) ;
1442: LD_INT 4
1444: PPUSH
1445: LD_INT 3
1447: PUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 5
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 4
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: LD_INT 7
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 4
1501: PUSH
1502: LD_INT 1
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: LD_INT 6
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PPUSH
1523: CALL 62584 0 2
// MC_SetTame ( 4 , powellApe ) ;
1527: LD_INT 4
1529: PPUSH
1530: LD_INT 13
1532: PPUSH
1533: CALL 63150 0 2
// end ;
1537: LD_VAR 0 1
1541: RET
// every 0 0$3 trigger powellAngerQuery and powellAnger >= 2 do
1542: LD_EXP 36
1546: PUSH
1547: LD_EXP 17
1551: PUSH
1552: LD_INT 2
1554: GREATEREQUAL
1555: AND
1556: IFFALSE 1568
1558: GO 1560
1560: DISABLE
// SetAchievement ( ACH_POWELL ) ;
1561: LD_STRING ACH_POWELL
1563: PPUSH
1564: CALL_OW 543
1568: END
// every 0 0$3 trigger amConstructCounter >= 30 do
1569: LD_EXP 39
1573: PUSH
1574: LD_INT 30
1576: GREATEREQUAL
1577: IFFALSE 1589
1579: GO 1581
1581: DISABLE
// SetAchievement ( ACH_PROD ) ;
1582: LD_STRING ACH_PROD
1584: PPUSH
1585: CALL_OW 543
1589: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_minskill , 1 , 10 ] , [ f_minskill , 2 , 10 ] , [ f_minskill , 3 , 10 ] , [ f_minskill , 4 , 10 ] ] ] ) >= 10 do
1590: LD_INT 22
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 21
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 2
1612: PUSH
1613: LD_INT 28
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 10
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 28
1629: PUSH
1630: LD_INT 2
1632: PUSH
1633: LD_INT 10
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 28
1643: PUSH
1644: LD_INT 3
1646: PUSH
1647: LD_INT 10
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 28
1657: PUSH
1658: LD_INT 4
1660: PUSH
1661: LD_INT 10
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL_OW 69
1685: PUSH
1686: LD_INT 10
1688: GREATEREQUAL
1689: IFFALSE 1701
1691: GO 1693
1693: DISABLE
// SetAchievement ( ACH_EXP ) ;
1694: LD_STRING ACH_EXP
1696: PPUSH
1697: CALL_OW 543
1701: END
// every 0 0$1 trigger debug do var i , tmp ;
1702: LD_EXP 1
1706: IFFALSE 1813
1708: GO 1710
1710: DISABLE
1711: LD_INT 0
1713: PPUSH
1714: PPUSH
// begin enable ;
1715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_lives , 999 ] ] ] ) ;
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: LD_INT 22
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 3
1733: PUSH
1734: LD_INT 21
1736: PUSH
1737: LD_INT 3
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 3
1750: PUSH
1751: LD_INT 24
1753: PUSH
1754: LD_INT 999
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: ST_TO_ADDR
// if not tmp then
1775: LD_VAR 0 2
1779: NOT
1780: IFFALSE 1784
// exit ;
1782: GO 1813
// for i in tmp do
1784: LD_ADDR_VAR 0 1
1788: PUSH
1789: LD_VAR 0 2
1793: PUSH
1794: FOR_IN
1795: IFFALSE 1811
// SetLives ( i , 1000 ) ;
1797: LD_VAR 0 1
1801: PPUSH
1802: LD_INT 1000
1804: PPUSH
1805: CALL_OW 234
1809: GO 1794
1811: POP
1812: POP
// end ; end_of_file
1813: PPOPN 2
1815: END
// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker , Mike ; export JMMNewVeh , GirlNewVeh ; export function PrepareAmerican ; begin
1816: LD_INT 0
1818: PPUSH
// uc_side := 1 ;
1819: LD_ADDR_OWVAR 20
1823: PUSH
1824: LD_INT 1
1826: ST_TO_ADDR
// uc_nation := 1 ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14_ ) ;
1835: LD_ADDR_EXP 40
1839: PUSH
1840: LD_STRING JMM
1842: PPUSH
1843: LD_EXP 1
1847: NOT
1848: PPUSH
1849: LD_STRING 14_
1851: PPUSH
1852: CALL 69058 0 3
1856: ST_TO_ADDR
// if not JMMVeh or not JMMVeh [ 1 ] [ 1 ] then
1857: LD_EXP 4
1861: NOT
1862: PUSH
1863: LD_EXP 4
1867: PUSH
1868: LD_INT 1
1870: ARRAY
1871: PUSH
1872: LD_INT 1
1874: ARRAY
1875: NOT
1876: OR
1877: IFFALSE 1900
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) else
1879: LD_INT 5
1881: PPUSH
1882: LD_INT 3
1884: PPUSH
1885: LD_INT 1
1887: PPUSH
1888: LD_INT 9
1890: PPUSH
1891: LD_INT 100
1893: PPUSH
1894: CALL 73898 0 5
1898: GO 1959
// PrepareVehicle ( JMMVeh [ 1 ] [ 1 ] , JMMVeh [ 2 ] [ 1 ] , JMMVeh [ 3 ] [ 1 ] , JMMVeh [ 4 ] [ 1 ] , 30 ) ;
1900: LD_EXP 4
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PUSH
1909: LD_INT 1
1911: ARRAY
1912: PPUSH
1913: LD_EXP 4
1917: PUSH
1918: LD_INT 2
1920: ARRAY
1921: PUSH
1922: LD_INT 1
1924: ARRAY
1925: PPUSH
1926: LD_EXP 4
1930: PUSH
1931: LD_INT 3
1933: ARRAY
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_EXP 4
1943: PUSH
1944: LD_INT 4
1946: ARRAY
1947: PUSH
1948: LD_INT 1
1950: ARRAY
1951: PPUSH
1952: LD_INT 30
1954: PPUSH
1955: CALL 73898 0 5
// JMMNewVeh := CreateVehicle ;
1959: LD_ADDR_EXP 58
1963: PUSH
1964: CALL_OW 45
1968: ST_TO_ADDR
// if not JMMNewVeh then
1969: LD_EXP 58
1973: NOT
1974: IFFALSE 2005
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) ;
1976: LD_INT 5
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 9
1987: PPUSH
1988: LD_INT 100
1990: PPUSH
1991: CALL 73898 0 5
// JMMNewVeh := CreateVehicle ;
1995: LD_ADDR_EXP 58
1999: PUSH
2000: CALL_OW 45
2004: ST_TO_ADDR
// end ; SetDir ( JMMNewVeh , 4 ) ;
2005: LD_EXP 58
2009: PPUSH
2010: LD_INT 4
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( JMMNewVeh , 79 , 91 , false ) ;
2017: LD_EXP 58
2021: PPUSH
2022: LD_INT 79
2024: PPUSH
2025: LD_INT 91
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMNewVeh ) ;
2035: LD_EXP 40
2039: PPUSH
2040: LD_EXP 58
2044: PPUSH
2045: CALL_OW 52
// if JMMGirlStatus and not KappaStatus then
2049: LD_EXP 6
2053: PUSH
2054: LD_EXP 2
2058: NOT
2059: AND
2060: IFFALSE 2318
// begin if not JMMGirlVeh then
2062: LD_EXP 5
2066: NOT
2067: IFFALSE 2090
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_laser , 100 ) else
2069: LD_INT 3
2071: PPUSH
2072: LD_INT 3
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_INT 9
2080: PPUSH
2081: LD_INT 100
2083: PPUSH
2084: CALL 73898 0 5
2088: GO 2149
// PrepareVehicle ( JMMGirlVeh [ 1 ] [ 1 ] , JMMGirlVeh [ 2 ] [ 1 ] , JMMGirlVeh [ 3 ] [ 1 ] , JMMGirlVeh [ 4 ] [ 1 ] , 30 ) ;
2090: LD_EXP 5
2094: PUSH
2095: LD_INT 1
2097: ARRAY
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_EXP 5
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PUSH
2112: LD_INT 1
2114: ARRAY
2115: PPUSH
2116: LD_EXP 5
2120: PUSH
2121: LD_INT 3
2123: ARRAY
2124: PUSH
2125: LD_INT 1
2127: ARRAY
2128: PPUSH
2129: LD_EXP 5
2133: PUSH
2134: LD_INT 4
2136: ARRAY
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_INT 30
2144: PPUSH
2145: CALL 73898 0 5
// GirlNewVeh := CreateVehicle ;
2149: LD_ADDR_EXP 59
2153: PUSH
2154: CALL_OW 45
2158: ST_TO_ADDR
// SetDir ( GirlNewVeh , 4 ) ;
2159: LD_EXP 59
2163: PPUSH
2164: LD_INT 4
2166: PPUSH
2167: CALL_OW 233
// PlaceUnitXY ( GirlNewVeh , 82 , 96 , false ) ;
2171: LD_EXP 59
2175: PPUSH
2176: LD_INT 82
2178: PPUSH
2179: LD_INT 96
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// if JMMGirl = 1 then
2189: LD_EXP 7
2193: PUSH
2194: LD_INT 1
2196: EQUAL
2197: IFFALSE 2232
// begin Joan := PrepareUnit ( Joan , true , 14_ ) ;
2199: LD_ADDR_EXP 41
2203: PUSH
2204: LD_STRING Joan
2206: PPUSH
2207: LD_INT 1
2209: PPUSH
2210: LD_STRING 14_
2212: PPUSH
2213: CALL 69058 0 3
2217: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , GirlNewVeh ) ;
2218: LD_EXP 41
2222: PPUSH
2223: LD_EXP 59
2227: PPUSH
2228: CALL_OW 52
// end ; if JMMGirl = 2 then
2232: LD_EXP 7
2236: PUSH
2237: LD_INT 2
2239: EQUAL
2240: IFFALSE 2275
// begin Lisa := PrepareUnit ( Lisa , true , 14_ ) ;
2242: LD_ADDR_EXP 43
2246: PUSH
2247: LD_STRING Lisa
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_STRING 14_
2255: PPUSH
2256: CALL 69058 0 3
2260: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , GirlNewVeh ) ;
2261: LD_EXP 43
2265: PPUSH
2266: LD_EXP 59
2270: PPUSH
2271: CALL_OW 52
// end ; if JMMGirl = 3 then
2275: LD_EXP 7
2279: PUSH
2280: LD_INT 3
2282: EQUAL
2283: IFFALSE 2318
// begin Connie := PrepareUnit ( Connie , true , 14_ ) ;
2285: LD_ADDR_EXP 55
2289: PUSH
2290: LD_STRING Connie
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_STRING 14_
2298: PPUSH
2299: CALL 69058 0 3
2303: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , GirlNewVeh ) ;
2304: LD_EXP 55
2308: PPUSH
2309: LD_EXP 59
2313: PPUSH
2314: CALL_OW 52
// end ; end ; end ;
2318: LD_VAR 0 1
2322: RET
// export function PrepareStevensSquad ; var tmp ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
// uc_side := 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// uc_nation := 1 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// tmp := [ ] ;
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: EMPTY
2349: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debug ) , 13f_ ) ;
2350: LD_ADDR_EXP 42
2354: PUSH
2355: LD_STRING Stevens
2357: PPUSH
2358: LD_EXP 1
2362: NOT
2363: PPUSH
2364: LD_STRING 13f_
2366: PPUSH
2367: CALL 69058 0 3
2371: ST_TO_ADDR
// if not Stevens then
2372: LD_EXP 42
2376: NOT
2377: IFFALSE 2445
// begin hc_name = Baker Smith ;
2379: LD_ADDR_OWVAR 26
2383: PUSH
2384: LD_STRING Baker Smith
2386: ST_TO_ADDR
// hc_gallery = us ;
2387: LD_ADDR_OWVAR 33
2391: PUSH
2392: LD_STRING us
2394: ST_TO_ADDR
// hc_face_number := 29 ;
2395: LD_ADDR_OWVAR 34
2399: PUSH
2400: LD_INT 29
2402: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 10
2408: PPUSH
2409: CALL_OW 384
// Baker = CreateHuman ;
2413: LD_ADDR_EXP 56
2417: PUSH
2418: CALL_OW 44
2422: ST_TO_ADDR
// tmp := tmp ^ Baker ;
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_EXP 56
2437: ADD
2438: ST_TO_ADDR
// InitHc ;
2439: CALL_OW 19
// end else
2443: GO 2461
// tmp := tmp ^ Stevens ;
2445: LD_ADDR_VAR 0 2
2449: PUSH
2450: LD_VAR 0 2
2454: PUSH
2455: LD_EXP 42
2459: ADD
2460: ST_TO_ADDR
// if not Lisa then
2461: LD_EXP 43
2465: NOT
2466: IFFALSE 2512
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13f_ ) ;
2468: LD_ADDR_EXP 43
2472: PUSH
2473: LD_STRING Lisa
2475: PPUSH
2476: LD_EXP 1
2480: NOT
2481: PPUSH
2482: LD_STRING 13f_
2484: PPUSH
2485: CALL 69058 0 3
2489: ST_TO_ADDR
// if Lisa then
2490: LD_EXP 43
2494: IFFALSE 2512
// tmp := tmp ^ Lisa ;
2496: LD_ADDR_VAR 0 2
2500: PUSH
2501: LD_VAR 0 2
2505: PUSH
2506: LD_EXP 43
2510: ADD
2511: ST_TO_ADDR
// end ; if not Donaldson then
2512: LD_EXP 44
2516: NOT
2517: IFFALSE 2563
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13f_ ) ;
2519: LD_ADDR_EXP 44
2523: PUSH
2524: LD_STRING Donaldson
2526: PPUSH
2527: LD_EXP 1
2531: NOT
2532: PPUSH
2533: LD_STRING 13f_
2535: PPUSH
2536: CALL 69058 0 3
2540: ST_TO_ADDR
// if Donaldson then
2541: LD_EXP 44
2545: IFFALSE 2563
// tmp := tmp ^ Donaldson ;
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_VAR 0 2
2556: PUSH
2557: LD_EXP 44
2561: ADD
2562: ST_TO_ADDR
// end ; if not Bobby then
2563: LD_EXP 45
2567: NOT
2568: IFFALSE 2614
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13f_ ) ;
2570: LD_ADDR_EXP 45
2574: PUSH
2575: LD_STRING Bobby
2577: PPUSH
2578: LD_EXP 1
2582: NOT
2583: PPUSH
2584: LD_STRING 13f_
2586: PPUSH
2587: CALL 69058 0 3
2591: ST_TO_ADDR
// if Bobby then
2592: LD_EXP 45
2596: IFFALSE 2614
// tmp := tmp ^ Bobby ;
2598: LD_ADDR_VAR 0 2
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: LD_EXP 45
2612: ADD
2613: ST_TO_ADDR
// end ; if not Cyrus then
2614: LD_EXP 46
2618: NOT
2619: IFFALSE 2665
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13f_ ) ;
2621: LD_ADDR_EXP 46
2625: PUSH
2626: LD_STRING Cyrus
2628: PPUSH
2629: LD_EXP 1
2633: NOT
2634: PPUSH
2635: LD_STRING 13f_
2637: PPUSH
2638: CALL 69058 0 3
2642: ST_TO_ADDR
// if Cyrus then
2643: LD_EXP 46
2647: IFFALSE 2665
// tmp := tmp ^ Cyrus ;
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_VAR 0 2
2658: PUSH
2659: LD_EXP 46
2663: ADD
2664: ST_TO_ADDR
// end ; if not Brown then
2665: LD_EXP 48
2669: NOT
2670: IFFALSE 2716
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13f_ ) ;
2672: LD_ADDR_EXP 48
2676: PUSH
2677: LD_STRING Brown
2679: PPUSH
2680: LD_EXP 1
2684: NOT
2685: PPUSH
2686: LD_STRING 13f_
2688: PPUSH
2689: CALL 69058 0 3
2693: ST_TO_ADDR
// if Brown then
2694: LD_EXP 48
2698: IFFALSE 2716
// tmp := tmp ^ Brown ;
2700: LD_ADDR_VAR 0 2
2704: PUSH
2705: LD_VAR 0 2
2709: PUSH
2710: LD_EXP 48
2714: ADD
2715: ST_TO_ADDR
// end ; if not Gladstone then
2716: LD_EXP 49
2720: NOT
2721: IFFALSE 2767
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13f_ ) ;
2723: LD_ADDR_EXP 49
2727: PUSH
2728: LD_STRING Gladstone
2730: PPUSH
2731: LD_EXP 1
2735: NOT
2736: PPUSH
2737: LD_STRING 13f_
2739: PPUSH
2740: CALL 69058 0 3
2744: ST_TO_ADDR
// if Gladstone then
2745: LD_EXP 49
2749: IFFALSE 2767
// tmp := tmp ^ Gladstone ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 2
2760: PUSH
2761: LD_EXP 49
2765: ADD
2766: ST_TO_ADDR
// end ; if not Houten then
2767: LD_EXP 50
2771: NOT
2772: IFFALSE 2818
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13f_ ) ;
2774: LD_ADDR_EXP 50
2778: PUSH
2779: LD_STRING Houten
2781: PPUSH
2782: LD_EXP 1
2786: NOT
2787: PPUSH
2788: LD_STRING 13f_
2790: PPUSH
2791: CALL 69058 0 3
2795: ST_TO_ADDR
// if Houten then
2796: LD_EXP 50
2800: IFFALSE 2818
// tmp := tmp ^ Houten ;
2802: LD_ADDR_VAR 0 2
2806: PUSH
2807: LD_VAR 0 2
2811: PUSH
2812: LD_EXP 50
2816: ADD
2817: ST_TO_ADDR
// end ; if not Cornel then
2818: LD_EXP 51
2822: NOT
2823: IFFALSE 2869
// begin Cornel := PrepareUnit ( Cornell , ( not debug ) , 13f_ ) ;
2825: LD_ADDR_EXP 51
2829: PUSH
2830: LD_STRING Cornell
2832: PPUSH
2833: LD_EXP 1
2837: NOT
2838: PPUSH
2839: LD_STRING 13f_
2841: PPUSH
2842: CALL 69058 0 3
2846: ST_TO_ADDR
// if Cornel then
2847: LD_EXP 51
2851: IFFALSE 2869
// tmp := tmp ^ Cornel ;
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: LD_VAR 0 2
2862: PUSH
2863: LD_EXP 51
2867: ADD
2868: ST_TO_ADDR
// end ; if not Gary then
2869: LD_EXP 52
2873: NOT
2874: IFFALSE 2920
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13f_ ) ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_STRING Gary
2883: PPUSH
2884: LD_EXP 1
2888: NOT
2889: PPUSH
2890: LD_STRING 13f_
2892: PPUSH
2893: CALL 69058 0 3
2897: ST_TO_ADDR
// if Gary then
2898: LD_EXP 52
2902: IFFALSE 2920
// tmp := tmp ^ Gary ;
2904: LD_ADDR_VAR 0 2
2908: PUSH
2909: LD_VAR 0 2
2913: PUSH
2914: LD_EXP 52
2918: ADD
2919: ST_TO_ADDR
// end ; if not Frank then
2920: LD_EXP 53
2924: NOT
2925: IFFALSE 2971
// begin Frank := PrepareUnit ( Frank , ( not debug ) , 13f_ ) ;
2927: LD_ADDR_EXP 53
2931: PUSH
2932: LD_STRING Frank
2934: PPUSH
2935: LD_EXP 1
2939: NOT
2940: PPUSH
2941: LD_STRING 13f_
2943: PPUSH
2944: CALL 69058 0 3
2948: ST_TO_ADDR
// if Frank then
2949: LD_EXP 53
2953: IFFALSE 2971
// tmp := tmp ^ Frank ;
2955: LD_ADDR_VAR 0 2
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_EXP 53
2969: ADD
2970: ST_TO_ADDR
// end ; if not Kikuchi then
2971: LD_EXP 54
2975: NOT
2976: IFFALSE 3022
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13f_ ) ;
2978: LD_ADDR_EXP 54
2982: PUSH
2983: LD_STRING Kikuchi
2985: PPUSH
2986: LD_EXP 1
2990: NOT
2991: PPUSH
2992: LD_STRING 13f_
2994: PPUSH
2995: CALL 69058 0 3
2999: ST_TO_ADDR
// if Kikuchi then
3000: LD_EXP 54
3004: IFFALSE 3022
// tmp := tmp ^ Kikuchi ;
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: LD_VAR 0 2
3015: PUSH
3016: LD_EXP 54
3020: ADD
3021: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13_other_survivors ) ;
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: LD_VAR 0 2
3031: PUSH
3032: LD_STRING 13_other_survivors
3034: PPUSH
3035: CALL_OW 31
3039: UNION
3040: ST_TO_ADDR
// result := tmp ;
3041: LD_ADDR_VAR 0 1
3045: PUSH
3046: LD_VAR 0 2
3050: ST_TO_ADDR
// end ; end_of_file
3051: LD_VAR 0 1
3055: RET
// export Powell ; export vip , extraSquad ; export function PreparePowell ; var i , b , veh , tmp , depot , lab , armoury , workshop , un ; begin
3056: LD_INT 0
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
// uc_side := 4 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 4
3075: ST_TO_ADDR
// uc_nation := 1 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// SetResourceType ( GetBase ( am_depot ) , mat_cans , [ 3500 , 3000 , 2500 , 2000 ] [ Difficulty ] ) ;
3084: LD_INT 387
3086: PPUSH
3087: CALL_OW 274
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3500
3097: PUSH
3098: LD_INT 3000
3100: PUSH
3101: LD_INT 2500
3103: PUSH
3104: LD_INT 2000
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PPUSH
3119: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 400 ) ;
3123: LD_INT 387
3125: PPUSH
3126: CALL_OW 274
3130: PPUSH
3131: LD_INT 2
3133: PPUSH
3134: LD_INT 400
3136: PPUSH
3137: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 10 ) ;
3141: LD_INT 387
3143: PPUSH
3144: CALL_OW 274
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: LD_INT 10
3154: PPUSH
3155: CALL_OW 277
// SetBName ( am_depot , sigma ) ;
3159: LD_INT 387
3161: PPUSH
3162: LD_STRING sigma
3164: PPUSH
3165: CALL_OW 500
// Powell := NewCharacter ( Powell ) ;
3169: LD_ADDR_EXP 60
3173: PUSH
3174: LD_STRING Powell
3176: PPUSH
3177: CALL_OW 25
3181: ST_TO_ADDR
// PlaceUnitXY ( Powell , 57 , 94 , false ) ;
3182: LD_EXP 60
3186: PPUSH
3187: LD_INT 57
3189: PPUSH
3190: LD_INT 94
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 48
// ComTurnXY ( Powell , 58 , 94 ) ;
3200: LD_EXP 60
3204: PPUSH
3205: LD_INT 58
3207: PPUSH
3208: LD_INT 94
3210: PPUSH
3211: CALL_OW 118
// vip := [ ] ;
3215: LD_ADDR_EXP 61
3219: PUSH
3220: EMPTY
3221: ST_TO_ADDR
// extraSquad := [ ] ;
3222: LD_ADDR_EXP 62
3226: PUSH
3227: EMPTY
3228: ST_TO_ADDR
// tmp := [ ] ;
3229: LD_ADDR_VAR 0 5
3233: PUSH
3234: EMPTY
3235: ST_TO_ADDR
// if JMMGirl <> 2 then
3236: LD_EXP 7
3240: PUSH
3241: LD_INT 2
3243: NONEQUAL
3244: IFFALSE 3268
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
3246: LD_ADDR_EXP 43
3250: PUSH
3251: LD_STRING Lisa
3253: PPUSH
3254: LD_EXP 1
3258: NOT
3259: PPUSH
3260: LD_STRING 13s_
3262: PPUSH
3263: CALL 69058 0 3
3267: ST_TO_ADDR
// if Lisa then
3268: LD_EXP 43
3272: IFFALSE 3290
// tmp := tmp ^ Lisa ;
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_VAR 0 5
3283: PUSH
3284: LD_EXP 43
3288: ADD
3289: ST_TO_ADDR
// if JMMGirl < 3 then
3290: LD_EXP 7
3294: PUSH
3295: LD_INT 3
3297: LESS
3298: IFFALSE 3329
// begin Connie := NewCharacter ( Coonie ) ;
3300: LD_ADDR_EXP 55
3304: PUSH
3305: LD_STRING Coonie
3307: PPUSH
3308: CALL_OW 25
3312: ST_TO_ADDR
// tmp := tmp ^ Connie ;
3313: LD_ADDR_VAR 0 5
3317: PUSH
3318: LD_VAR 0 5
3322: PUSH
3323: LD_EXP 55
3327: ADD
3328: ST_TO_ADDR
// end ; Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13s_ ) ;
3329: LD_ADDR_EXP 44
3333: PUSH
3334: LD_STRING Donaldson
3336: PPUSH
3337: LD_EXP 1
3341: NOT
3342: PPUSH
3343: LD_STRING 13s_
3345: PPUSH
3346: CALL 69058 0 3
3350: ST_TO_ADDR
// if Donaldson then
3351: LD_EXP 44
3355: IFFALSE 3373
// tmp := tmp ^ Donaldson ;
3357: LD_ADDR_VAR 0 5
3361: PUSH
3362: LD_VAR 0 5
3366: PUSH
3367: LD_EXP 44
3371: ADD
3372: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 13s_ ) ;
3373: LD_ADDR_EXP 45
3377: PUSH
3378: LD_STRING Bobby
3380: PPUSH
3381: LD_EXP 1
3385: NOT
3386: PPUSH
3387: LD_STRING 13s_
3389: PPUSH
3390: CALL 69058 0 3
3394: ST_TO_ADDR
// if Bobby then
3395: LD_EXP 45
3399: IFFALSE 3417
// tmp := tmp ^ Bobby ;
3401: LD_ADDR_VAR 0 5
3405: PUSH
3406: LD_VAR 0 5
3410: PUSH
3411: LD_EXP 45
3415: ADD
3416: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13s_ ) ;
3417: LD_ADDR_EXP 46
3421: PUSH
3422: LD_STRING Cyrus
3424: PPUSH
3425: LD_EXP 1
3429: NOT
3430: PPUSH
3431: LD_STRING 13s_
3433: PPUSH
3434: CALL 69058 0 3
3438: ST_TO_ADDR
// if Cyrus then
3439: LD_EXP 46
3443: IFFALSE 3461
// tmp := tmp ^ Cyrus ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_VAR 0 5
3454: PUSH
3455: LD_EXP 46
3459: ADD
3460: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13s_ ) ;
3461: LD_ADDR_EXP 47
3465: PUSH
3466: LD_STRING Denis
3468: PPUSH
3469: LD_EXP 1
3473: NOT
3474: PPUSH
3475: LD_STRING 13s_
3477: PPUSH
3478: CALL 69058 0 3
3482: ST_TO_ADDR
// if not Denis then
3483: LD_EXP 47
3487: NOT
3488: IFFALSE 3512
// Denis := PrepareUnit ( Denis , ( not debug ) , 13f_ ) ;
3490: LD_ADDR_EXP 47
3494: PUSH
3495: LD_STRING Denis
3497: PPUSH
3498: LD_EXP 1
3502: NOT
3503: PPUSH
3504: LD_STRING 13f_
3506: PPUSH
3507: CALL 69058 0 3
3511: ST_TO_ADDR
// if Denis then
3512: LD_EXP 47
3516: IFFALSE 3534
// tmp := tmp ^ Denis ;
3518: LD_ADDR_VAR 0 5
3522: PUSH
3523: LD_VAR 0 5
3527: PUSH
3528: LD_EXP 47
3532: ADD
3533: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 13s_ ) ;
3534: LD_ADDR_EXP 48
3538: PUSH
3539: LD_STRING Brown
3541: PPUSH
3542: LD_EXP 1
3546: NOT
3547: PPUSH
3548: LD_STRING 13s_
3550: PPUSH
3551: CALL 69058 0 3
3555: ST_TO_ADDR
// if Brown then
3556: LD_EXP 48
3560: IFFALSE 3578
// tmp := tmp ^ Brown ;
3562: LD_ADDR_VAR 0 5
3566: PUSH
3567: LD_VAR 0 5
3571: PUSH
3572: LD_EXP 48
3576: ADD
3577: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13s_ ) ;
3578: LD_ADDR_EXP 49
3582: PUSH
3583: LD_STRING Gladstone
3585: PPUSH
3586: LD_EXP 1
3590: NOT
3591: PPUSH
3592: LD_STRING 13s_
3594: PPUSH
3595: CALL 69058 0 3
3599: ST_TO_ADDR
// if Gladstone then
3600: LD_EXP 49
3604: IFFALSE 3622
// tmp := tmp ^ Gladstone ;
3606: LD_ADDR_VAR 0 5
3610: PUSH
3611: LD_VAR 0 5
3615: PUSH
3616: LD_EXP 49
3620: ADD
3621: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 13s_ ) ;
3622: LD_ADDR_EXP 50
3626: PUSH
3627: LD_STRING Houten
3629: PPUSH
3630: LD_EXP 1
3634: NOT
3635: PPUSH
3636: LD_STRING 13s_
3638: PPUSH
3639: CALL 69058 0 3
3643: ST_TO_ADDR
// if Houten then
3644: LD_EXP 50
3648: IFFALSE 3666
// tmp := tmp ^ Houten ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: LD_EXP 50
3664: ADD
3665: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 13s_ ) ;
3666: LD_ADDR_EXP 51
3670: PUSH
3671: LD_STRING Cornel
3673: PPUSH
3674: LD_EXP 1
3678: NOT
3679: PPUSH
3680: LD_STRING 13s_
3682: PPUSH
3683: CALL 69058 0 3
3687: ST_TO_ADDR
// if Cornel then
3688: LD_EXP 51
3692: IFFALSE 3710
// tmp := tmp ^ Cornel ;
3694: LD_ADDR_VAR 0 5
3698: PUSH
3699: LD_VAR 0 5
3703: PUSH
3704: LD_EXP 51
3708: ADD
3709: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 13s_ ) ;
3710: LD_ADDR_EXP 52
3714: PUSH
3715: LD_STRING Gary
3717: PPUSH
3718: LD_EXP 1
3722: NOT
3723: PPUSH
3724: LD_STRING 13s_
3726: PPUSH
3727: CALL 69058 0 3
3731: ST_TO_ADDR
// if Gary then
3732: LD_EXP 52
3736: IFFALSE 3754
// tmp := tmp ^ Gary ;
3738: LD_ADDR_VAR 0 5
3742: PUSH
3743: LD_VAR 0 5
3747: PUSH
3748: LD_EXP 52
3752: ADD
3753: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13s_ ) ;
3754: LD_ADDR_EXP 53
3758: PUSH
3759: LD_STRING Frank
3761: PPUSH
3762: LD_EXP 1
3766: NOT
3767: PPUSH
3768: LD_STRING 13s_
3770: PPUSH
3771: CALL 69058 0 3
3775: ST_TO_ADDR
// if Frank then
3776: LD_EXP 53
3780: IFFALSE 3798
// tmp := tmp ^ Frank ;
3782: LD_ADDR_VAR 0 5
3786: PUSH
3787: LD_VAR 0 5
3791: PUSH
3792: LD_EXP 53
3796: ADD
3797: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13s_ ) ;
3798: LD_ADDR_EXP 54
3802: PUSH
3803: LD_STRING Kikuchi
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_STRING 13s_
3814: PPUSH
3815: CALL 69058 0 3
3819: ST_TO_ADDR
// if Kikuchi then
3820: LD_EXP 54
3824: IFFALSE 3842
// tmp := tmp ^ Kikuchi ;
3826: LD_ADDR_VAR 0 5
3830: PUSH
3831: LD_VAR 0 5
3835: PUSH
3836: LD_EXP 54
3840: ADD
3841: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
3842: LD_ADDR_EXP 57
3846: PUSH
3847: LD_STRING Mike
3849: PPUSH
3850: LD_EXP 1
3854: NOT
3855: PPUSH
3856: LD_STRING 10c_
3858: PPUSH
3859: CALL 69058 0 3
3863: ST_TO_ADDR
// if Mike then
3864: LD_EXP 57
3868: IFFALSE 3891
// PlaceUnitXYR ( Mike , 61 , 89 , 8 , false ) ;
3870: LD_EXP 57
3874: PPUSH
3875: LD_INT 61
3877: PPUSH
3878: LD_INT 89
3880: PPUSH
3881: LD_INT 8
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// vip := tmp ;
3891: LD_ADDR_EXP 61
3895: PUSH
3896: LD_VAR 0 5
3900: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 13s_others ) ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_VAR 0 5
3910: PUSH
3911: LD_STRING 13s_others
3913: PPUSH
3914: CALL_OW 31
3918: UNION
3919: ST_TO_ADDR
// if tmp < 18 then
3920: LD_VAR 0 5
3924: PUSH
3925: LD_INT 18
3927: LESS
3928: IFFALSE 4033
// begin InitHC_All ( ) ;
3930: CALL_OW 584
// for i = 1 to 18 - tmp do
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_INT 18
3946: PUSH
3947: LD_VAR 0 5
3951: MINUS
3952: PUSH
3953: FOR_TO
3954: IFFALSE 4031
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 4 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_VAR 0 2
3963: PUSH
3964: LD_INT 4
3966: MOD
3967: PUSH
3968: LD_INT 1
3970: PLUS
3971: PPUSH
3972: LD_INT 4
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 10
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3989: LD_ADDR_VAR 0 5
3993: PUSH
3994: LD_VAR 0 5
3998: PPUSH
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL 106359 0 2
4008: ST_TO_ADDR
// extraSquad := Join ( extraSquad , un ) ;
4009: LD_ADDR_EXP 62
4013: PUSH
4014: LD_EXP 62
4018: PPUSH
4019: LD_VAR 0 10
4023: PPUSH
4024: CALL 106359 0 2
4028: ST_TO_ADDR
// end ;
4029: GO 3953
4031: POP
4032: POP
// end ; depot := HexInfo ( 53 , 94 ) ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_INT 53
4040: PPUSH
4041: LD_INT 94
4043: PPUSH
4044: CALL_OW 428
4048: ST_TO_ADDR
// lab := HexInfo ( 56 , 101 ) ;
4049: LD_ADDR_VAR 0 7
4053: PUSH
4054: LD_INT 56
4056: PPUSH
4057: LD_INT 101
4059: PPUSH
4060: CALL_OW 428
4064: ST_TO_ADDR
// armoury := HexInfo ( 67 , 101 ) ;
4065: LD_ADDR_VAR 0 8
4069: PUSH
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 101
4075: PPUSH
4076: CALL_OW 428
4080: ST_TO_ADDR
// workshop := HexInfo ( 54 , 85 ) ;
4081: LD_ADDR_VAR 0 9
4085: PUSH
4086: LD_INT 54
4088: PPUSH
4089: LD_INT 85
4091: PPUSH
4092: CALL_OW 428
4096: ST_TO_ADDR
// b := [ armoury , depot , workshop , lab ] ;
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: LD_VAR 0 8
4106: PUSH
4107: LD_VAR 0 6
4111: PUSH
4112: LD_VAR 0 9
4116: PUSH
4117: LD_VAR 0 7
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: ST_TO_ADDR
// for i in tmp do
4128: LD_ADDR_VAR 0 2
4132: PUSH
4133: LD_VAR 0 5
4137: PUSH
4138: FOR_IN
4139: IFFALSE 4334
// begin case GetBType ( b [ 1 ] ) of b_armoury :
4141: LD_VAR 0 3
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PPUSH
4150: CALL_OW 266
4154: PUSH
4155: LD_INT 4
4157: DOUBLE
4158: EQUAL
4159: IFTRUE 4163
4161: GO 4178
4163: POP
// SetClass ( i , class_soldier ) ; b_depot :
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 336
4176: GO 4248
4178: LD_INT 0
4180: DOUBLE
4181: EQUAL
4182: IFTRUE 4186
4184: GO 4201
4186: POP
// SetClass ( i , class_engineer ) ; b_workshop :
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_INT 2
4194: PPUSH
4195: CALL_OW 336
4199: GO 4248
4201: LD_INT 2
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4224
4209: POP
// SetClass ( i , class_mechanic ) ; b_lab :
4210: LD_VAR 0 2
4214: PPUSH
4215: LD_INT 3
4217: PPUSH
4218: CALL_OW 336
4222: GO 4248
4224: LD_INT 6
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4247
4232: POP
// SetClass ( i , class_scientistic ) ; end ;
4233: LD_VAR 0 2
4237: PPUSH
4238: LD_INT 4
4240: PPUSH
4241: CALL_OW 336
4245: GO 4248
4247: POP
// if UnitsInside ( b [ 1 ] ) = 6 then
4248: LD_VAR 0 3
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: CALL_OW 313
4261: PUSH
4262: LD_INT 6
4264: EQUAL
4265: IFFALSE 4285
// b := Delete ( b , 1 ) ;
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_VAR 0 3
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: CALL_OW 3
4284: ST_TO_ADDR
// if b then
4285: LD_VAR 0 3
4289: IFFALSE 4311
// PlaceHumanInUnit ( i , b [ 1 ] ) else
4291: LD_VAR 0 2
4295: PPUSH
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: PPUSH
4305: CALL_OW 52
4309: GO 4332
// PlaceUnitXYR ( i , 61 , 89 , 8 , false ) ;
4311: LD_VAR 0 2
4315: PPUSH
4316: LD_INT 61
4318: PPUSH
4319: LD_INT 89
4321: PPUSH
4322: LD_INT 8
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 50
// end ;
4332: GO 4138
4334: POP
4335: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 100 ) ;
4336: LD_INT 2
4338: PPUSH
4339: LD_INT 1
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_INT 12
4347: PPUSH
4348: LD_INT 100
4350: PPUSH
4351: CALL 73898 0 5
// veh := CreateVehicle ;
4355: LD_ADDR_VAR 0 4
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4365: LD_VAR 0 4
4369: PPUSH
4370: LD_INT 4
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( veh , 49 , 88 , false ) ;
4377: LD_VAR 0 4
4381: PPUSH
4382: LD_INT 49
4384: PPUSH
4385: LD_INT 88
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
4395: LD_VAR 0 4
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: LD_INT 100
4405: PPUSH
4406: CALL_OW 290
// uc_side := 0 ;
4410: LD_ADDR_OWVAR 20
4414: PUSH
4415: LD_INT 0
4417: ST_TO_ADDR
// uc_nation := 0 ;
4418: LD_ADDR_OWVAR 21
4422: PUSH
4423: LD_INT 0
4425: ST_TO_ADDR
// for i := 1 to 3 do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_INT 3
4438: PUSH
4439: FOR_TO
4440: IFFALSE 4471
// begin InitHc ;
4442: CALL_OW 19
// hc_class := class_apeman ;
4446: LD_ADDR_OWVAR 28
4450: PUSH
4451: LD_INT 12
4453: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
4454: CALL_OW 44
4458: PPUSH
4459: LD_INT 13
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ;
4469: GO 4439
4471: POP
4472: POP
// end ; end_of_file
4473: LD_VAR 0 1
4477: RET
// export Kurt , Kozlov , Friend ; export powellBomb ; export function PrepareLegion ; var i , side , un , tmp ; begin
4478: LD_INT 0
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// side := 8 ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_INT 8
4492: ST_TO_ADDR
// uc_side := side ;
4493: LD_ADDR_OWVAR 20
4497: PUSH
4498: LD_VAR 0 3
4502: ST_TO_ADDR
// uc_nation := 2 ;
4503: LD_ADDR_OWVAR 21
4507: PUSH
4508: LD_INT 2
4510: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4511: LD_ADDR_VAR 0 2
4515: PUSH
4516: LD_INT 22
4518: PUSH
4519: LD_VAR 0 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 69
4546: PUSH
4547: FOR_IN
4548: IFFALSE 4564
// SetBLevel ( i , 10 ) ;
4550: LD_VAR 0 2
4554: PPUSH
4555: LD_INT 10
4557: PPUSH
4558: CALL_OW 241
4562: GO 4547
4564: POP
4565: POP
// if KurtStatus then
4566: LD_EXP 3
4570: IFFALSE 4593
// Kurt := PrepareUnit ( Kurt , false ,  ) else
4572: LD_ADDR_EXP 63
4576: PUSH
4577: LD_STRING Kurt
4579: PPUSH
4580: LD_INT 0
4582: PPUSH
4583: LD_STRING 
4585: PPUSH
4586: CALL 69058 0 3
4590: ST_TO_ADDR
4591: GO 4615
// Kurt := PrepareUnit ( AltKurt , ( not debug ) ,  ) ;
4593: LD_ADDR_EXP 63
4597: PUSH
4598: LD_STRING AltKurt
4600: PPUSH
4601: LD_EXP 1
4605: NOT
4606: PPUSH
4607: LD_STRING 
4609: PPUSH
4610: CALL 69058 0 3
4614: ST_TO_ADDR
// if not Kurt then
4615: LD_EXP 63
4619: NOT
4620: IFFALSE 4646
// begin InitHc ;
4622: CALL_OW 19
// PrepareSoldier ( sex_male , 10 ) ;
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 10
4631: PPUSH
4632: CALL_OW 381
// Kurt := CreateHuman ;
4636: LD_ADDR_EXP 63
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Kurt , ar_depot1 ) ;
4646: LD_EXP 63
4650: PPUSH
4651: LD_INT 324
4653: PPUSH
4654: CALL_OW 52
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
4658: LD_ADDR_EXP 64
4662: PUSH
4663: LD_STRING Kozlov
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: LD_STRING 
4671: PPUSH
4672: CALL 69058 0 3
4676: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
4677: LD_EXP 64
4681: PPUSH
4682: LD_INT 22
4684: PUSH
4685: LD_INT 8
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 23
4694: PUSH
4695: LD_INT 3
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 30
4704: PUSH
4705: LD_INT 8
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: PPUSH
4717: CALL_OW 69
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PPUSH
4726: CALL_OW 52
// SetSkill ( Kozlov , class_mechanic , 10 ) ;
4730: LD_EXP 64
4734: PPUSH
4735: LD_INT 3
4737: PPUSH
4738: LD_INT 10
4740: PPUSH
4741: CALL_OW 237
// SetSkill ( Kozlov , class_scientistic , 10 ) ;
4745: LD_EXP 64
4749: PPUSH
4750: LD_INT 4
4752: PPUSH
4753: LD_INT 10
4755: PPUSH
4756: CALL_OW 237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 22
4767: PUSH
4768: LD_VAR 0 3
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: LD_INT 30
4779: PUSH
4780: LD_INT 32
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 58
4789: PUSH
4790: EMPTY
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 69
4802: ST_TO_ADDR
// for i = 1 to 10 do
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: DOUBLE
4809: LD_INT 1
4811: DEC
4812: ST_TO_ADDR
4813: LD_INT 10
4815: PUSH
4816: FOR_TO
4817: IFFALSE 4889
// begin uc_nation := nation_nature ;
4819: LD_ADDR_OWVAR 21
4823: PUSH
4824: LD_INT 0
4826: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
4827: LD_ADDR_OWVAR 28
4831: PUSH
4832: LD_INT 15
4834: ST_TO_ADDR
// hc_gallery :=  ;
4835: LD_ADDR_OWVAR 33
4839: PUSH
4840: LD_STRING 
4842: ST_TO_ADDR
// hc_name :=  ;
4843: LD_ADDR_OWVAR 26
4847: PUSH
4848: LD_STRING 
4850: ST_TO_ADDR
// un := CreateHuman ;
4851: LD_ADDR_VAR 0 4
4855: PUSH
4856: CALL_OW 44
4860: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
4861: LD_VAR 0 4
4865: PPUSH
4866: LD_VAR 0 5
4870: PUSH
4871: LD_VAR 0 5
4875: PUSH
4876: LD_VAR 0 2
4880: MINUS
4881: ARRAY
4882: PPUSH
4883: CALL_OW 52
// end ;
4887: GO 4816
4889: POP
4890: POP
// tmp := CreateCharacterSet ( 12_kurt_squad ) ;
4891: LD_ADDR_VAR 0 5
4895: PUSH
4896: LD_STRING 12_kurt_squad
4898: PPUSH
4899: CALL_OW 31
4903: ST_TO_ADDR
// if tmp then
4904: LD_VAR 0 5
4908: IFFALSE 4942
// for i in tmp do
4910: LD_ADDR_VAR 0 2
4914: PUSH
4915: LD_VAR 0 5
4919: PUSH
4920: FOR_IN
4921: IFFALSE 4940
// PlaceUnitArea ( i , legionBaseArea , false ) ;
4923: LD_VAR 0 2
4927: PPUSH
4928: LD_INT 5
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
4938: GO 4920
4940: POP
4941: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 8 ] ) ;
4942: LD_INT 324
4944: PPUSH
4945: LD_INT 5
4947: PPUSH
4948: LD_STRING 
4950: PPUSH
4951: LD_INT 8
4953: PUSH
4954: LD_INT 9
4956: PUSH
4957: LD_INT 10
4959: PUSH
4960: LD_INT 10
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PPUSH
4975: LD_INT 3000
4977: PUSH
4978: LD_INT 500
4980: PUSH
4981: LD_INT 150
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PPUSH
4989: LD_INT 16
4991: PUSH
4992: LD_INT 6
4994: PUSH
4995: LD_INT 6
4997: PUSH
4998: LD_INT 8
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL 77351 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Kurt ) ;
5011: LD_ADDR_EXP 101
5015: PUSH
5016: LD_EXP 101
5020: PPUSH
5021: LD_INT 3
5023: PPUSH
5024: LD_INT 22
5026: PUSH
5027: LD_VAR 0 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 23
5038: PUSH
5039: LD_INT 2
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 21
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: PPUSH
5068: CALL_OW 69
5072: PUSH
5073: LD_EXP 63
5077: DIFF
5078: PPUSH
5079: CALL_OW 1
5083: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
5084: LD_INT 1
5086: PPUSH
5087: LD_INT 7
5089: PPUSH
5090: CALL_OW 383
// hc_name := Ali Hadrach ;
5094: LD_ADDR_OWVAR 26
5098: PUSH
5099: LD_STRING Ali Hadrach
5101: ST_TO_ADDR
// hc_face_number := 31 ;
5102: LD_ADDR_OWVAR 34
5106: PUSH
5107: LD_INT 31
5109: ST_TO_ADDR
// Friend := CreateHuman ;
5110: LD_ADDR_EXP 65
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_selfpropelled_bomb , 100 ) ;
5120: LD_INT 14
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: LD_INT 29
5131: PPUSH
5132: LD_INT 100
5134: PPUSH
5135: CALL 73898 0 5
// powellBomb := CreateVehicle ;
5139: LD_ADDR_EXP 66
5143: PUSH
5144: CALL_OW 45
5148: ST_TO_ADDR
// PlaceUnitXY ( powellBomb , 90 , 51 , false ) ;
5149: LD_EXP 66
5153: PPUSH
5154: LD_INT 90
5156: PPUSH
5157: LD_INT 51
5159: PPUSH
5160: LD_INT 0
5162: PPUSH
5163: CALL_OW 48
// end ;
5167: LD_VAR 0 1
5171: RET
// export function RebuildKozlovFactory ; var fac , lab ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
// if IsLive ( kozlov_fac ) then
5177: LD_INT 332
5179: PPUSH
5180: CALL_OW 300
5184: IFFALSE 5188
// exit ;
5186: GO 5755
// ComExitBuilding ( Kozlov ) ;
5188: LD_EXP 64
5192: PPUSH
5193: CALL_OW 122
// if GetClass ( Kozlov ) <> 2 then
5197: LD_EXP 64
5201: PPUSH
5202: CALL_OW 257
5206: PUSH
5207: LD_INT 2
5209: NONEQUAL
5210: IFFALSE 5245
// begin AddComEnterUnit ( Kozlov , ar_depot1 ) ;
5212: LD_EXP 64
5216: PPUSH
5217: LD_INT 324
5219: PPUSH
5220: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_engineer ) ;
5224: LD_EXP 64
5228: PPUSH
5229: LD_INT 2
5231: PPUSH
5232: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
5236: LD_EXP 64
5240: PPUSH
5241: CALL_OW 182
// end ; AddComBuild ( Kozlov , b_workshop , 93 , 32 , 3 ) ;
5245: LD_EXP 64
5249: PPUSH
5250: LD_INT 2
5252: PPUSH
5253: LD_INT 93
5255: PPUSH
5256: LD_INT 32
5258: PPUSH
5259: LD_INT 3
5261: PPUSH
5262: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
5266: LD_INT 35
5268: PPUSH
5269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) ;
5273: LD_INT 22
5275: PUSH
5276: LD_INT 8
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 3
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 23
5295: PUSH
5296: LD_INT 3
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 57
5305: PUSH
5306: EMPTY
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 69
5319: IFFALSE 5266
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) [ 1 ] ;
5321: LD_ADDR_VAR 0 2
5325: PUSH
5326: LD_INT 22
5328: PUSH
5329: LD_INT 8
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 30
5338: PUSH
5339: LD_INT 3
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 23
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 57
5358: PUSH
5359: EMPTY
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PPUSH
5368: CALL_OW 69
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] ] ) then
5377: LD_INT 22
5379: PUSH
5380: LD_INT 8
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 23
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 69
5416: NOT
5417: IFFALSE 5495
// begin AddComBuild ( Kozlov , b_ext_siberium , 97 , 36 , 5 ) ;
5419: LD_EXP 64
5423: PPUSH
5424: LD_INT 21
5426: PPUSH
5427: LD_INT 97
5429: PPUSH
5430: LD_INT 36
5432: PPUSH
5433: LD_INT 5
5435: PPUSH
5436: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
5440: LD_INT 35
5442: PPUSH
5443: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] , [ f_constructed ] ] ) ;
5447: LD_INT 22
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 3
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 30
5469: PUSH
5470: LD_INT 21
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 57
5479: PUSH
5480: EMPTY
5481: LIST
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: IFFALSE 5440
// end ; if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] ] ) then
5495: LD_INT 22
5497: PUSH
5498: LD_INT 8
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 23
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 30
5517: PUSH
5518: LD_INT 18
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL_OW 69
5534: NOT
5535: IFFALSE 5613
// begin AddComBuild ( Kozlov , b_ext_rocket , 89 , 32 , 1 ) ;
5537: LD_EXP 64
5541: PPUSH
5542: LD_INT 18
5544: PPUSH
5545: LD_INT 89
5547: PPUSH
5548: LD_INT 32
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
5558: LD_INT 35
5560: PPUSH
5561: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] , [ f_constructed ] ] ) ;
5565: LD_INT 22
5567: PUSH
5568: LD_INT 8
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 23
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 18
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 57
5597: PUSH
5598: EMPTY
5599: LIST
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: IFFALSE 5558
// end ; lab := kozlov_lab ;
5613: LD_ADDR_VAR 0 3
5617: PUSH
5618: LD_INT 336
5620: ST_TO_ADDR
// if not lab then
5621: LD_VAR 0 3
5625: NOT
5626: IFFALSE 5630
// exit ;
5628: GO 5755
// AddComEnterUnit ( Kozlov , lab [ 1 ] ) ;
5630: LD_EXP 64
5634: PPUSH
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: CALL_OW 180
// AddComChangeProfession ( Kozlov , 4 ) ;
5648: LD_EXP 64
5652: PPUSH
5653: LD_INT 4
5655: PPUSH
5656: CALL_OW 183
// ComResearch ( lab [ 1 ] , tech_sibFiss ) ;
5660: LD_VAR 0 3
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: LD_INT 25
5671: PPUSH
5672: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
5683: LD_INT 25
5685: PPUSH
5686: LD_INT 8
5688: PPUSH
5689: CALL_OW 321
5693: PUSH
5694: LD_INT 2
5696: EQUAL
5697: IFFALSE 5676
// ComExitBuilding ( Kozlov ) ;
5699: LD_EXP 64
5703: PPUSH
5704: CALL_OW 122
// AddComEnterUnit ( Kozlov , fac ) ;
5708: LD_EXP 64
5712: PPUSH
5713: LD_VAR 0 2
5717: PPUSH
5718: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
5722: LD_EXP 64
5726: PPUSH
5727: LD_INT 3
5729: PPUSH
5730: CALL_OW 183
// ComConstruct ( fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
5734: LD_VAR 0 2
5738: PPUSH
5739: LD_INT 23
5741: PPUSH
5742: LD_INT 3
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_INT 48
5750: PPUSH
5751: CALL_OW 125
// end ;
5755: LD_VAR 0 1
5759: RET
// every 0 0$10 trigger not legionDestroyed and missionStage >= 6 do
5760: LD_EXP 22
5764: NOT
5765: PUSH
5766: LD_EXP 15
5770: PUSH
5771: LD_INT 6
5773: GREATEREQUAL
5774: AND
5775: IFFALSE 5856
5777: GO 5779
5779: DISABLE
// begin MC_SetDefenderLimit ( 3 , 3 ) ;
5780: LD_INT 3
5782: PPUSH
5783: LD_INT 3
5785: PPUSH
5786: CALL 62769 0 2
// MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
5790: LD_INT 3
5792: PPUSH
5793: LD_INT 14
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: LD_INT 28
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 14
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: LD_INT 1
5819: PUSH
5820: LD_INT 28
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 14
5831: PUSH
5832: LD_INT 1
5834: PUSH
5835: LD_INT 1
5837: PUSH
5838: LD_INT 28
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL 62632 0 2
// end ;
5856: END
// every 7 7$30 trigger not legionDestroyed and missionStage >= 6 and not MC_GetVehicles ( 3 , true ) do var i , tmp , target ;
5857: LD_EXP 22
5861: NOT
5862: PUSH
5863: LD_EXP 15
5867: PUSH
5868: LD_INT 6
5870: GREATEREQUAL
5871: AND
5872: PUSH
5873: LD_INT 3
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL 64050 0 2
5883: NOT
5884: AND
5885: IFFALSE 6759
5887: GO 5889
5889: DISABLE
5890: LD_INT 0
5892: PPUSH
5893: PPUSH
5894: PPUSH
// begin enable ;
5895: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
5896: LD_INT 22
5898: PUSH
5899: LD_INT 8
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 23
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 30
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: PPUSH
5931: CALL_OW 69
5935: NOT
5936: IFFALSE 5940
// exit ;
5938: GO 6759
// if Prob ( 40 ) then
5940: LD_INT 40
5942: PPUSH
5943: CALL_OW 13
5947: IFFALSE 6074
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 14
5954: PUSH
5955: LD_INT 1
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 28
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 14
5972: PUSH
5973: LD_INT 1
5975: PUSH
5976: LD_INT 2
5978: PUSH
5979: LD_INT 28
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 14
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: LD_INT 28
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 14
6008: PUSH
6009: LD_INT 1
6011: PUSH
6012: LD_INT 2
6014: PUSH
6015: LD_INT 28
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 14
6026: PUSH
6027: LD_INT 1
6029: PUSH
6030: LD_INT 2
6032: PUSH
6033: LD_INT 28
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: PUSH
6042: LD_INT 14
6044: PUSH
6045: LD_INT 1
6047: PUSH
6048: LD_INT 2
6050: PUSH
6051: LD_INT 26
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PPUSH
6068: CALL 62632 0 2
// end else
6072: GO 6281
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower , ar_rocket_launcher ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
6074: LD_INT 3
6076: PPUSH
6077: LD_INT 14
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: LD_INT 2
6085: PUSH
6086: LD_INT 27
6088: PUSH
6089: LD_INT 26
6091: PUSH
6092: LD_INT 26
6094: PUSH
6095: LD_INT 28
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_OWVAR 67
6108: ARRAY
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 1
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: LD_INT 27
6127: PUSH
6128: LD_INT 26
6130: PUSH
6131: LD_INT 26
6133: PUSH
6134: LD_INT 26
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PUSH
6143: LD_OWVAR 67
6147: ARRAY
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 14
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 26
6166: PUSH
6167: LD_INT 26
6169: PUSH
6170: LD_INT 29
6172: PUSH
6173: LD_INT 29
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_OWVAR 67
6186: ARRAY
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 13
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: LD_INT 2
6202: PUSH
6203: LD_INT 26
6205: PUSH
6206: LD_INT 29
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 29
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_OWVAR 67
6225: ARRAY
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 13
6235: PUSH
6236: LD_INT 1
6238: PUSH
6239: LD_INT 2
6241: PUSH
6242: LD_INT 29
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 14
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: PPUSH
6277: CALL 62632 0 2
// end ; repeat wait ( 0 0$1 ) ;
6281: LD_INT 35
6283: PPUSH
6284: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
6288: LD_INT 3
6290: PPUSH
6291: LD_INT 1
6293: PPUSH
6294: CALL 64050 0 2
6298: PUSH
6299: LD_INT 6
6301: GREATEREQUAL
6302: IFFALSE 6281
// wait ( 0 0$30 ) ;
6304: LD_INT 1050
6306: PPUSH
6307: CALL_OW 67
// tmp := MC_GetVehicles ( 3 , true ) ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: LD_INT 3
6318: PPUSH
6319: LD_INT 1
6321: PPUSH
6322: CALL 64050 0 2
6326: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
6327: LD_ADDR_EXP 120
6331: PUSH
6332: LD_EXP 120
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_EXP 120
6344: PUSH
6345: LD_INT 3
6347: ARRAY
6348: PUSH
6349: LD_VAR 0 2
6353: DIFF
6354: PPUSH
6355: CALL_OW 1
6359: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 0
6367: PPUSH
6368: LD_INT 2
6370: PPUSH
6371: CALL_OW 12
6375: ST_TO_ADDR
// if target then
6376: LD_VAR 0 3
6380: IFFALSE 6517
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 24
6394: PUSH
6395: LD_INT 250
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 72
6406: ST_TO_ADDR
// if not tmp then
6407: LD_VAR 0 2
6411: NOT
6412: IFFALSE 6416
// break ;
6414: GO 6515
// for i in tmp do
6416: LD_ADDR_VAR 0 1
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: FOR_IN
6427: IFFALSE 6467
// if GetDistUnitXY ( i , 89 , 71 ) > 9 then
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_INT 89
6436: PPUSH
6437: LD_INT 71
6439: PPUSH
6440: CALL_OW 297
6444: PUSH
6445: LD_INT 9
6447: GREATER
6448: IFFALSE 6465
// ComMoveXY ( i , 89 , 71 ) ;
6450: LD_VAR 0 1
6454: PPUSH
6455: LD_INT 89
6457: PPUSH
6458: LD_INT 71
6460: PPUSH
6461: CALL_OW 111
6465: GO 6426
6467: POP
6468: POP
// wait ( 0 0$1 ) ;
6469: LD_INT 35
6471: PPUSH
6472: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 89 , 71 , 9 ] ) >= ( tmp - 1 ) ;
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_INT 92
6483: PUSH
6484: LD_INT 89
6486: PUSH
6487: LD_INT 71
6489: PUSH
6490: LD_INT 9
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: PUSH
6504: LD_VAR 0 2
6508: PUSH
6509: LD_INT 1
6511: MINUS
6512: GREATEREQUAL
6513: IFFALSE 6382
// end else
6515: GO 6650
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6517: LD_ADDR_VAR 0 2
6521: PUSH
6522: LD_VAR 0 2
6526: PPUSH
6527: LD_INT 24
6529: PUSH
6530: LD_INT 250
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 72
6541: ST_TO_ADDR
// if not tmp then
6542: LD_VAR 0 2
6546: NOT
6547: IFFALSE 6551
// break ;
6549: GO 6650
// for i in tmp do
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_VAR 0 2
6560: PUSH
6561: FOR_IN
6562: IFFALSE 6602
// if GetDistUnitXY ( i , 125 , 129 ) > 9 then
6564: LD_VAR 0 1
6568: PPUSH
6569: LD_INT 125
6571: PPUSH
6572: LD_INT 129
6574: PPUSH
6575: CALL_OW 297
6579: PUSH
6580: LD_INT 9
6582: GREATER
6583: IFFALSE 6600
// ComMoveXY ( i , 125 , 129 ) ;
6585: LD_VAR 0 1
6589: PPUSH
6590: LD_INT 125
6592: PPUSH
6593: LD_INT 129
6595: PPUSH
6596: CALL_OW 111
6600: GO 6561
6602: POP
6603: POP
// wait ( 0 0$1 ) ;
6604: LD_INT 35
6606: PPUSH
6607: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 125 , 129 , 9 ] ) >= ( tmp - 1 ) ;
6611: LD_VAR 0 2
6615: PPUSH
6616: LD_INT 92
6618: PUSH
6619: LD_INT 125
6621: PUSH
6622: LD_INT 129
6624: PUSH
6625: LD_INT 9
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 72
6638: PUSH
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: MINUS
6647: GREATEREQUAL
6648: IFFALSE 6517
// end ; repeat wait ( 0 0$1 ) ;
6650: LD_INT 35
6652: PPUSH
6653: CALL_OW 67
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6750
// begin if GetLives ( i ) > 251 then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 256
6679: PUSH
6680: LD_INT 251
6682: GREATER
6683: IFFALSE 6721
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
6685: LD_VAR 0 1
6689: PPUSH
6690: LD_INT 81
6692: PUSH
6693: LD_INT 8
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PPUSH
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 74
6714: PPUSH
6715: CALL_OW 115
6719: GO 6748
// if IsDead ( i ) then
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 301
6730: IFFALSE 6748
// tmp := tmp diff i ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 2
6741: PUSH
6742: LD_VAR 0 1
6746: DIFF
6747: ST_TO_ADDR
// end ;
6748: GO 6667
6750: POP
6751: POP
// until not tmp ;
6752: LD_VAR 0 2
6756: NOT
6757: IFFALSE 6650
// end ;
6759: PPOPN 3
6761: END
// every 20 20$00 trigger not legionDestroyed and missionStage >= 6 and Difficulty > 1 do var i , un , tmp ;
6762: LD_EXP 22
6766: NOT
6767: PUSH
6768: LD_EXP 15
6772: PUSH
6773: LD_INT 6
6775: GREATEREQUAL
6776: AND
6777: PUSH
6778: LD_OWVAR 67
6782: PUSH
6783: LD_INT 1
6785: GREATER
6786: AND
6787: IFFALSE 7320
6789: GO 6791
6791: DISABLE
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
6796: PPUSH
// begin enable ;
6797: ENABLE
// tmp := [ ] ;
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: EMPTY
6804: ST_TO_ADDR
// for i = 1 to [ 4 , 6 , 7 , 8 ] [ Difficulty ] do
6805: LD_ADDR_VAR 0 1
6809: PUSH
6810: DOUBLE
6811: LD_INT 1
6813: DEC
6814: ST_TO_ADDR
6815: LD_INT 4
6817: PUSH
6818: LD_INT 6
6820: PUSH
6821: LD_INT 7
6823: PUSH
6824: LD_INT 8
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: LD_OWVAR 67
6837: ARRAY
6838: PUSH
6839: FOR_TO
6840: IFFALSE 7000
// begin uc_side := 8 ;
6842: LD_ADDR_OWVAR 20
6846: PUSH
6847: LD_INT 8
6849: ST_TO_ADDR
// uc_nation := 2 ;
6850: LD_ADDR_OWVAR 21
6854: PUSH
6855: LD_INT 2
6857: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_apeman , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_gatling_gun ] [ rand ( 1 , 4 ) ] , 88 ) ;
6858: LD_INT 13
6860: PUSH
6861: LD_INT 14
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 1
6870: PPUSH
6871: LD_INT 2
6873: PPUSH
6874: CALL_OW 12
6878: ARRAY
6879: PPUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 5
6885: PPUSH
6886: LD_INT 27
6888: PUSH
6889: LD_INT 28
6891: PUSH
6892: LD_INT 26
6894: PUSH
6895: LD_INT 25
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 4
6909: PPUSH
6910: CALL_OW 12
6914: ARRAY
6915: PPUSH
6916: LD_INT 88
6918: PPUSH
6919: CALL 73898 0 5
// un := CreateVehicle ;
6923: LD_ADDR_VAR 0 2
6927: PUSH
6928: CALL_OW 45
6932: ST_TO_ADDR
// tmp := tmp ^ un ;
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_VAR 0 3
6942: PUSH
6943: LD_VAR 0 2
6947: ADD
6948: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: CALL_OW 233
// PlaceUnitArea ( un , northSpawn , false ) ;
6961: LD_VAR 0 2
6965: PPUSH
6966: LD_INT 30
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ComMoveXY ( un , 16 , 11 ) ;
6976: LD_VAR 0 2
6980: PPUSH
6981: LD_INT 16
6983: PPUSH
6984: LD_INT 11
6986: PPUSH
6987: CALL_OW 111
// wait ( 0 0$2 ) ;
6991: LD_INT 70
6993: PPUSH
6994: CALL_OW 67
// end ;
6998: GO 6839
7000: POP
7001: POP
// for i = 1 to Difficulty do
7002: LD_ADDR_VAR 0 1
7006: PUSH
7007: DOUBLE
7008: LD_INT 1
7010: DEC
7011: ST_TO_ADDR
7012: LD_OWVAR 67
7016: PUSH
7017: FOR_TO
7018: IFFALSE 7147
// begin uc_side := 8 ;
7020: LD_ADDR_OWVAR 20
7024: PUSH
7025: LD_INT 8
7027: ST_TO_ADDR
// uc_nation := 2 ;
7028: LD_ADDR_OWVAR 21
7032: PUSH
7033: LD_INT 2
7035: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
7036: LD_INT 0
7038: PPUSH
7039: LD_INT 8
7041: PPUSH
7042: LD_INT 8
7044: PUSH
7045: LD_INT 8
7047: PUSH
7048: LD_INT 9
7050: PUSH
7051: LD_INT 10
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: LD_OWVAR 67
7064: ARRAY
7065: PPUSH
7066: CALL_OW 380
// un := CreateHuman ;
7070: LD_ADDR_VAR 0 2
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// tmp := tmp ^ un ;
7080: LD_ADDR_VAR 0 3
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: LD_VAR 0 2
7094: ADD
7095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7096: LD_VAR 0 2
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: CALL_OW 233
// PlaceUnitArea ( un , northSpawn , false ) ;
7108: LD_VAR 0 2
7112: PPUSH
7113: LD_INT 30
7115: PPUSH
7116: LD_INT 0
7118: PPUSH
7119: CALL_OW 49
// ComMoveXY ( un , 16 , 11 ) ;
7123: LD_VAR 0 2
7127: PPUSH
7128: LD_INT 16
7130: PPUSH
7131: LD_INT 11
7133: PPUSH
7134: CALL_OW 111
// wait ( 0 0$2 ) ;
7138: LD_INT 70
7140: PPUSH
7141: CALL_OW 67
// end ;
7145: GO 7017
7147: POP
7148: POP
// repeat wait ( 0 0$1 ) ;
7149: LD_INT 35
7151: PPUSH
7152: CALL_OW 67
// if legionDestroyed then
7156: LD_EXP 22
7160: IFFALSE 7164
// exit ;
7162: GO 7320
// for i in tmp do
7164: LD_ADDR_VAR 0 1
7168: PUSH
7169: LD_VAR 0 3
7173: PUSH
7174: FOR_IN
7175: IFFALSE 7311
// begin if GetLives ( i ) > 250 then
7177: LD_VAR 0 1
7181: PPUSH
7182: CALL_OW 256
7186: PUSH
7187: LD_INT 250
7189: GREATER
7190: IFFALSE 7282
// begin if not FilterAllUnits ( [ [ f_enemy , 8 ] , [ f_dist , i , 10 ] ] ) then
7192: LD_INT 81
7194: PUSH
7195: LD_INT 8
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 91
7204: PUSH
7205: LD_VAR 0 1
7209: PUSH
7210: LD_INT 10
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: NOT
7227: IFFALSE 7246
// ComAgressiveMove ( i , 67 , 110 ) else
7229: LD_VAR 0 1
7233: PPUSH
7234: LD_INT 67
7236: PPUSH
7237: LD_INT 110
7239: PPUSH
7240: CALL_OW 114
7244: GO 7280
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7246: LD_VAR 0 1
7250: PPUSH
7251: LD_INT 81
7253: PUSH
7254: LD_INT 8
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: PPUSH
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 74
7275: PPUSH
7276: CALL_OW 115
// end else
7280: GO 7309
// if IsDead ( i ) then
7282: LD_VAR 0 1
7286: PPUSH
7287: CALL_OW 301
7291: IFFALSE 7309
// tmp := tmp diff i ;
7293: LD_ADDR_VAR 0 3
7297: PUSH
7298: LD_VAR 0 3
7302: PUSH
7303: LD_VAR 0 1
7307: DIFF
7308: ST_TO_ADDR
// end ;
7309: GO 7174
7311: POP
7312: POP
// until not tmp ;
7313: LD_VAR 0 3
7317: NOT
7318: IFFALSE 7149
// end ; end_of_file
7320: PPOPN 3
7322: END
// export Platonov , Kovalyuk , Bystrov , Yakotich , Gleb , Bierezov ; export Vsevolod , sewiVeh ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , un , b , teleport ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// side := 3 ;
7335: LD_ADDR_VAR 0 6
7339: PUSH
7340: LD_INT 3
7342: ST_TO_ADDR
// uc_side := side ;
7343: LD_ADDR_OWVAR 20
7347: PUSH
7348: LD_VAR 0 6
7352: ST_TO_ADDR
// uc_nation := 3 ;
7353: LD_ADDR_OWVAR 21
7357: PUSH
7358: LD_INT 3
7360: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
7361: LD_ADDR_VAR 0 2
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_VAR 0 6
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 21
7380: PUSH
7381: LD_INT 3
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 69
7396: PUSH
7397: FOR_IN
7398: IFFALSE 7414
// SetBLevel ( i , 10 ) ;
7400: LD_VAR 0 2
7404: PPUSH
7405: LD_INT 10
7407: PPUSH
7408: CALL_OW 241
7412: GO 7397
7414: POP
7415: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
7416: LD_ADDR_VAR 0 10
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_VAR 0 6
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 30
7435: PUSH
7436: LD_INT 34
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: ST_TO_ADDR
// if teleport then
7452: LD_VAR 0 10
7456: IFFALSE 7477
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
7458: LD_VAR 0 10
7462: PUSH
7463: LD_INT 1
7465: ARRAY
7466: PPUSH
7467: LD_INT 123
7469: PPUSH
7470: LD_INT 122
7472: PPUSH
7473: CALL_OW 243
// Platonov := NewCharacter ( Platonov ) ;
7477: LD_ADDR_EXP 67
7481: PUSH
7482: LD_STRING Platonov
7484: PPUSH
7485: CALL_OW 25
7489: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
7490: LD_ADDR_EXP 68
7494: PUSH
7495: LD_STRING Kovalyuk
7497: PPUSH
7498: CALL_OW 25
7502: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , ( not debug ) , 09_ ) ;
7503: LD_ADDR_EXP 70
7507: PUSH
7508: LD_STRING Yakotich
7510: PPUSH
7511: LD_EXP 1
7515: NOT
7516: PPUSH
7517: LD_STRING 09_
7519: PPUSH
7520: CALL 69058 0 3
7524: ST_TO_ADDR
// Bystrov := NewCharacter ( Bystrov ) ;
7525: LD_ADDR_EXP 69
7529: PUSH
7530: LD_STRING Bystrov
7532: PPUSH
7533: CALL_OW 25
7537: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
7538: LD_ADDR_EXP 71
7542: PUSH
7543: LD_STRING Gleb
7545: PPUSH
7546: CALL_OW 25
7550: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
7551: LD_STRING 03_Cornel
7553: PPUSH
7554: CALL_OW 28
7558: IFFALSE 7606
// begin Bierezov := NewCharacter ( Mikhail ) ;
7560: LD_ADDR_EXP 72
7564: PUSH
7565: LD_STRING Mikhail
7567: PPUSH
7568: CALL_OW 25
7572: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
7573: LD_EXP 72
7577: PPUSH
7578: LD_INT 197
7580: PPUSH
7581: LD_INT 111
7583: PPUSH
7584: LD_INT 9
7586: PPUSH
7587: LD_INT 0
7589: PPUSH
7590: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
7594: LD_EXP 72
7598: PPUSH
7599: LD_INT 3
7601: PPUSH
7602: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
7606: LD_EXP 67
7610: PPUSH
7611: LD_INT 126
7613: PPUSH
7614: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , ru_fac1 ) ;
7618: LD_EXP 68
7622: PPUSH
7623: LD_INT 134
7625: PPUSH
7626: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
7630: LD_EXP 70
7634: PPUSH
7635: LD_INT 197
7637: PPUSH
7638: LD_INT 111
7640: PPUSH
7641: LD_INT 9
7643: PPUSH
7644: LD_INT 0
7646: PPUSH
7647: CALL_OW 50
// PlaceUnitXYR ( Bystrov , 197 , 111 , 9 , false ) ;
7651: LD_EXP 69
7655: PPUSH
7656: LD_INT 197
7658: PPUSH
7659: LD_INT 111
7661: PPUSH
7662: LD_INT 9
7664: PPUSH
7665: LD_INT 0
7667: PPUSH
7668: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
7672: LD_EXP 71
7676: PPUSH
7677: LD_INT 197
7679: PPUSH
7680: LD_INT 111
7682: PPUSH
7683: LD_INT 9
7685: PPUSH
7686: LD_INT 0
7688: PPUSH
7689: CALL_OW 50
// tmp := PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 , 10 ] [ Difficulty ] , [ 90000 , 1000 , 300 ] , [ 18 , 8 , 13 , 8 ] ) ;
7693: LD_ADDR_VAR 0 5
7697: PUSH
7698: LD_INT 126
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: LD_STRING zhukov
7706: PPUSH
7707: LD_INT 9
7709: PUSH
7710: LD_INT 10
7712: PUSH
7713: LD_INT 10
7715: PUSH
7716: LD_INT 10
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_OWVAR 67
7729: ARRAY
7730: PPUSH
7731: LD_INT 90000
7733: PUSH
7734: LD_INT 1000
7736: PUSH
7737: LD_INT 300
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: PPUSH
7745: LD_INT 18
7747: PUSH
7748: LD_INT 8
7750: PUSH
7751: LD_INT 13
7753: PUSH
7754: LD_INT 8
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PPUSH
7763: CALL 77351 0 6
7767: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp union [ Yakotich , Bystrov , Gleb , Bierezov ] ) ;
7768: LD_ADDR_EXP 101
7772: PUSH
7773: LD_EXP 101
7777: PPUSH
7778: LD_INT 2
7780: PPUSH
7781: LD_VAR 0 5
7785: PUSH
7786: LD_EXP 70
7790: PUSH
7791: LD_EXP 69
7795: PUSH
7796: LD_EXP 71
7800: PUSH
7801: LD_EXP 72
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: UNION
7812: PPUSH
7813: CALL_OW 1
7817: ST_TO_ADDR
// base := GetBase ( ru_depot2 ) ;
7818: LD_ADDR_VAR 0 4
7822: PUSH
7823: LD_INT 267
7825: PPUSH
7826: CALL_OW 274
7830: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 5000 ) ;
7831: LD_VAR 0 4
7835: PPUSH
7836: LD_INT 1
7838: PPUSH
7839: LD_INT 5000
7841: PPUSH
7842: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: LD_INT 200
7856: PPUSH
7857: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
7861: LD_VAR 0 4
7865: PPUSH
7866: LD_INT 3
7868: PPUSH
7869: LD_INT 200
7871: PPUSH
7872: CALL_OW 277
// for i := 1 to 6 do
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: DOUBLE
7882: LD_INT 1
7884: DEC
7885: ST_TO_ADDR
7886: LD_INT 6
7888: PUSH
7889: FOR_TO
7890: IFFALSE 7973
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
7892: LD_INT 0
7894: PPUSH
7895: LD_INT 8
7897: PUSH
7898: LD_INT 9
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: LD_INT 10
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: PUSH
7913: LD_OWVAR 67
7917: ARRAY
7918: PPUSH
7919: CALL_OW 381
// un := CreateHuman ;
7923: LD_ADDR_VAR 0 8
7927: PUSH
7928: CALL_OW 44
7932: ST_TO_ADDR
// if i mod 2 = 0 then
7933: LD_VAR 0 2
7937: PUSH
7938: LD_INT 2
7940: MOD
7941: PUSH
7942: LD_INT 0
7944: EQUAL
7945: IFFALSE 7959
// SetClass ( un , class_bazooker ) ;
7947: LD_VAR 0 8
7951: PPUSH
7952: LD_INT 9
7954: PPUSH
7955: CALL_OW 336
// PlaceHumanInUnit ( un , ru_specBar ) ;
7959: LD_VAR 0 8
7963: PPUSH
7964: LD_INT 460
7966: PPUSH
7967: CALL_OW 52
// end ;
7971: GO 7889
7973: POP
7974: POP
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_crane , 100 ) ;
7975: LD_INT 21
7977: PPUSH
7978: LD_INT 3
7980: PPUSH
7981: LD_INT 3
7983: PPUSH
7984: LD_INT 52
7986: PPUSH
7987: LD_INT 100
7989: PPUSH
7990: CALL 73898 0 5
// PlaceUnitXYD ( CreateVehicle , 259 , 145 , 3 , false ) ;
7994: CALL_OW 45
7998: PPUSH
7999: LD_INT 259
8001: PPUSH
8002: LD_INT 145
8004: PPUSH
8005: LD_INT 3
8007: PPUSH
8008: LD_INT 0
8010: PPUSH
8011: CALL 108499 0 5
// PlaceUnitXYD ( CreateVehicle , 245 , 139 , 3 , false ) ;
8015: CALL_OW 45
8019: PPUSH
8020: LD_INT 245
8022: PPUSH
8023: LD_INT 139
8025: PPUSH
8026: LD_INT 3
8028: PPUSH
8029: LD_INT 0
8031: PPUSH
8032: CALL 108499 0 5
// behemoths := [ ] ;
8036: LD_ADDR_EXP 75
8040: PUSH
8041: EMPTY
8042: ST_TO_ADDR
// behemothBuilders := [ ] ;
8043: LD_ADDR_EXP 76
8047: PUSH
8048: EMPTY
8049: ST_TO_ADDR
// if Kovalyuk then
8050: LD_EXP 68
8054: IFFALSE 8076
// behemothBuilders := Join ( behemothBuilders , Kovalyuk ) ;
8056: LD_ADDR_EXP 76
8060: PUSH
8061: LD_EXP 76
8065: PPUSH
8066: LD_EXP 68
8070: PPUSH
8071: CALL 106359 0 2
8075: ST_TO_ADDR
// j := 3 ;
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: LD_INT 3
8083: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) diff Kovalyuk do
8084: LD_ADDR_VAR 0 2
8088: PUSH
8089: LD_INT 22
8091: PUSH
8092: LD_INT 3
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 25
8101: PUSH
8102: LD_INT 3
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PPUSH
8113: CALL_OW 69
8117: PUSH
8118: LD_EXP 68
8122: DIFF
8123: PUSH
8124: FOR_IN
8125: IFFALSE 8175
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
8127: LD_ADDR_EXP 76
8131: PUSH
8132: LD_EXP 76
8136: PPUSH
8137: LD_VAR 0 2
8141: PPUSH
8142: CALL 106359 0 2
8146: ST_TO_ADDR
// j := j - 1 ;
8147: LD_ADDR_VAR 0 3
8151: PUSH
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 1
8159: MINUS
8160: ST_TO_ADDR
// if j = 0 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 0
8168: EQUAL
8169: IFFALSE 8173
// break ;
8171: GO 8175
// end ;
8173: GO 8124
8175: POP
8176: POP
// end ;
8177: LD_VAR 0 1
8181: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
8189: LD_ADDR_VAR 0 4
8193: PUSH
8194: LD_INT 209
8196: PUSH
8197: LD_INT 149
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 219
8206: PUSH
8207: LD_INT 154
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 223
8216: PUSH
8217: LD_INT 149
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 232
8226: PUSH
8227: LD_INT 155
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: ST_TO_ADDR
// if not behemothBuilders then
8240: LD_EXP 76
8244: NOT
8245: IFFALSE 8249
// exit ;
8247: GO 8380
// j := 1 ;
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// for i in behemothBuilders do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_EXP 76
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8378
// begin if GetClass ( i ) <> class_mechanic then
8270: LD_VAR 0 2
8274: PPUSH
8275: CALL_OW 257
8279: PUSH
8280: LD_INT 3
8282: NONEQUAL
8283: IFFALSE 8297
// SetClass ( i , class_mechanic ) ;
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 3
8292: PPUSH
8293: CALL_OW 336
// if IsInUnit ( i ) then
8297: LD_VAR 0 2
8301: PPUSH
8302: CALL_OW 310
8306: IFFALSE 8317
// ComExitBuilding ( i ) ;
8308: LD_VAR 0 2
8312: PPUSH
8313: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_INT 37
8324: PPUSH
8325: LD_VAR 0 4
8329: PUSH
8330: LD_VAR 0 3
8334: ARRAY
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_VAR 0 4
8344: PUSH
8345: LD_VAR 0 3
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: ARRAY
8354: PPUSH
8355: LD_INT 0
8357: PPUSH
8358: CALL_OW 230
// j := j + 1 ;
8362: LD_ADDR_VAR 0 3
8366: PUSH
8367: LD_VAR 0 3
8371: PUSH
8372: LD_INT 1
8374: PLUS
8375: ST_TO_ADDR
// end ;
8376: GO 8267
8378: POP
8379: POP
// end ;
8380: LD_VAR 0 1
8384: RET
// every 0 0$1 trigger FilterUnitsInArea ( behemothParking , [ f_btype , b_behemoth ] ) do
8385: LD_INT 24
8387: PPUSH
8388: LD_INT 30
8390: PUSH
8391: LD_INT 37
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 70
8402: IFFALSE 8415
8404: GO 8406
8406: DISABLE
// behemothUnderConstruct := true ;
8407: LD_ADDR_EXP 26
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
8415: END
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
8416: LD_INT 3
8418: PPUSH
8419: CALL 106420 0 1
8423: PUSH
8424: LD_INT 22
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 30
8436: PUSH
8437: LD_INT 37
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 69
8452: NOT
8453: AND
8454: IFFALSE 8640
8456: GO 8458
8458: DISABLE
8459: LD_INT 0
8461: PPUSH
8462: PPUSH
// begin enable ;
8463: ENABLE
// tmp := GetBehemoths ( 3 ) ;
8464: LD_ADDR_VAR 0 2
8468: PUSH
8469: LD_INT 3
8471: PPUSH
8472: CALL 106420 0 1
8476: ST_TO_ADDR
// for i in tmp do
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_VAR 0 2
8486: PUSH
8487: FOR_IN
8488: IFFALSE 8638
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_INT 9
8497: PPUSH
8498: CALL_OW 308
8502: PUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 110
8512: PUSH
8513: LD_INT 2
8515: EQUAL
8516: NOT
8517: AND
8518: IFFALSE 8532
// SetTag ( i , 2 ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_INT 2
8527: PPUSH
8528: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
8532: LD_INT 81
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 91
8544: PUSH
8545: LD_VAR 0 1
8549: PUSH
8550: LD_INT 12
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 69
8566: NOT
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 110
8577: PUSH
8578: LD_INT 2
8580: EQUAL
8581: NOT
8582: AND
8583: IFFALSE 8602
// ComAgressiveMove ( i , 64 , 93 ) else
8585: LD_VAR 0 1
8589: PPUSH
8590: LD_INT 64
8592: PPUSH
8593: LD_INT 93
8595: PPUSH
8596: CALL_OW 114
8600: GO 8636
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8602: LD_VAR 0 1
8606: PPUSH
8607: LD_INT 81
8609: PUSH
8610: LD_INT 3
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 69
8621: PPUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 74
8631: PPUSH
8632: CALL_OW 115
// end ;
8636: GO 8487
8638: POP
8639: POP
// end ;
8640: PPOPN 2
8642: END
// export function PrepareRussianAttack ( strength ) ; var i , j ; begin
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
8647: PPUSH
// result := [ ] ;
8648: LD_ADDR_VAR 0 2
8652: PUSH
8653: EMPTY
8654: ST_TO_ADDR
// uc_side := 6 ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_INT 6
8662: ST_TO_ADDR
// uc_nation := 3 ;
8663: LD_ADDR_OWVAR 21
8667: PUSH
8668: LD_INT 3
8670: ST_TO_ADDR
// case strength of 1 :
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8826
8684: POP
// begin for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
8685: LD_ADDR_VAR 0 3
8689: PUSH
8690: DOUBLE
8691: LD_INT 1
8693: DEC
8694: ST_TO_ADDR
8695: LD_INT 4
8697: PUSH
8698: LD_INT 5
8700: PUSH
8701: LD_INT 6
8703: PUSH
8704: LD_INT 7
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: PUSH
8719: FOR_TO
8720: IFFALSE 8822
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked ] [ i mod 2 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] , 80 ) ;
8722: LD_INT 22
8724: PUSH
8725: LD_INT 24
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 2
8739: MOD
8740: PUSH
8741: LD_INT 1
8743: PLUS
8744: ARRAY
8745: PPUSH
8746: LD_INT 1
8748: PUSH
8749: LD_INT 3
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_INT 2
8761: PPUSH
8762: CALL_OW 12
8766: ARRAY
8767: PPUSH
8768: LD_INT 3
8770: PPUSH
8771: LD_INT 43
8773: PUSH
8774: LD_INT 44
8776: PUSH
8777: LD_INT 45
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 3
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: PPUSH
8797: LD_INT 80
8799: PPUSH
8800: CALL 73898 0 5
// result := result union CreateVehicle ;
8804: LD_ADDR_VAR 0 2
8808: PUSH
8809: LD_VAR 0 2
8813: PUSH
8814: CALL_OW 45
8818: UNION
8819: ST_TO_ADDR
// end ;
8820: GO 8719
8822: POP
8823: POP
// end ; 2 :
8824: GO 9821
8826: LD_INT 2
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 9002
8834: POP
// begin for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
8835: LD_ADDR_VAR 0 3
8839: PUSH
8840: DOUBLE
8841: LD_INT 1
8843: DEC
8844: ST_TO_ADDR
8845: LD_INT 5
8847: PUSH
8848: LD_INT 6
8850: PUSH
8851: LD_INT 7
8853: PUSH
8854: LD_INT 8
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PUSH
8863: LD_OWVAR 67
8867: ARRAY
8868: PUSH
8869: FOR_TO
8870: IFFALSE 8998
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_gun , ru_heavy_gun , ru_heavy_gun , ru_time_lapser , ru_time_lapser ] [ i mod 8 + 1 ] , 80 ) ;
8872: LD_INT 22
8874: PUSH
8875: LD_INT 24
8877: PUSH
8878: LD_INT 24
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: LD_VAR 0 3
8890: PUSH
8891: LD_INT 3
8893: MOD
8894: PUSH
8895: LD_INT 1
8897: PLUS
8898: ARRAY
8899: PPUSH
8900: LD_INT 1
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_INT 2
8915: PPUSH
8916: CALL_OW 12
8920: ARRAY
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: LD_INT 43
8927: PUSH
8928: LD_INT 44
8930: PUSH
8931: LD_INT 45
8933: PUSH
8934: LD_INT 44
8936: PUSH
8937: LD_INT 46
8939: PUSH
8940: LD_INT 46
8942: PUSH
8943: LD_INT 49
8945: PUSH
8946: LD_INT 49
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 8
8966: MOD
8967: PUSH
8968: LD_INT 1
8970: PLUS
8971: ARRAY
8972: PPUSH
8973: LD_INT 80
8975: PPUSH
8976: CALL 73898 0 5
// result := result union CreateVehicle ;
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: LD_VAR 0 2
8989: PUSH
8990: CALL_OW 45
8994: UNION
8995: ST_TO_ADDR
// end ;
8996: GO 8869
8998: POP
8999: POP
// end ; 3 :
9000: GO 9821
9002: LD_INT 3
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9182
9010: POP
// begin for i = 1 to [ 6 , 7 , 8 , 9 ] [ Difficulty ] do
9011: LD_ADDR_VAR 0 3
9015: PUSH
9016: DOUBLE
9017: LD_INT 1
9019: DEC
9020: ST_TO_ADDR
9021: LD_INT 6
9023: PUSH
9024: LD_INT 7
9026: PUSH
9027: LD_INT 8
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_OWVAR 67
9043: ARRAY
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9178
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun , ru_time_lapser , ru_time_lapser , ru_time_lapser ] [ i mod 9 + 1 ] , 80 ) ;
9048: LD_INT 22
9050: PUSH
9051: LD_INT 24
9053: PUSH
9054: LD_INT 24
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: PUSH
9062: LD_VAR 0 3
9066: PUSH
9067: LD_INT 3
9069: MOD
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: ARRAY
9075: PPUSH
9076: LD_INT 1
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 1
9088: PPUSH
9089: LD_INT 2
9091: PPUSH
9092: CALL_OW 12
9096: ARRAY
9097: PPUSH
9098: LD_INT 3
9100: PPUSH
9101: LD_INT 43
9103: PUSH
9104: LD_INT 47
9106: PUSH
9107: LD_INT 45
9109: PUSH
9110: LD_INT 45
9112: PUSH
9113: LD_INT 46
9115: PUSH
9116: LD_INT 46
9118: PUSH
9119: LD_INT 49
9121: PUSH
9122: LD_INT 49
9124: PUSH
9125: LD_INT 49
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 9
9146: MOD
9147: PUSH
9148: LD_INT 1
9150: PLUS
9151: ARRAY
9152: PPUSH
9153: LD_INT 80
9155: PPUSH
9156: CALL 73898 0 5
// result := result union CreateVehicle ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_VAR 0 2
9169: PUSH
9170: CALL_OW 45
9174: UNION
9175: ST_TO_ADDR
// end ;
9176: GO 9045
9178: POP
9179: POP
// end ; 4 :
9180: GO 9821
9182: LD_INT 4
9184: DOUBLE
9185: EQUAL
9186: IFTRUE 9190
9188: GO 9820
9190: POP
// begin uc_nation := 3 ;
9191: LD_ADDR_OWVAR 21
9195: PUSH
9196: LD_INT 3
9198: ST_TO_ADDR
// for i = 1 to [ 6 , 8 , 9 , 10 ] [ Difficulty ] do
9199: LD_ADDR_VAR 0 3
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_INT 6
9211: PUSH
9212: LD_INT 8
9214: PUSH
9215: LD_INT 9
9217: PUSH
9218: LD_INT 10
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: LD_OWVAR 67
9231: ARRAY
9232: PUSH
9233: FOR_TO
9234: IFFALSE 9366
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_rocket_launcher , ru_rocket , ru_rocket , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun , ru_time_lapser , ru_time_lapser , ru_time_lapser ] [ i mod 9 + 1 ] , 80 ) ;
9236: LD_INT 22
9238: PUSH
9239: LD_INT 24
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: PUSH
9250: LD_VAR 0 3
9254: PUSH
9255: LD_INT 3
9257: MOD
9258: PUSH
9259: LD_INT 1
9261: PLUS
9262: ARRAY
9263: PPUSH
9264: LD_INT 1
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 2
9279: PPUSH
9280: CALL_OW 12
9284: ARRAY
9285: PPUSH
9286: LD_INT 3
9288: PPUSH
9289: LD_INT 45
9291: PUSH
9292: LD_INT 47
9294: PUSH
9295: LD_INT 47
9297: PUSH
9298: LD_INT 45
9300: PUSH
9301: LD_INT 46
9303: PUSH
9304: LD_INT 46
9306: PUSH
9307: LD_INT 49
9309: PUSH
9310: LD_INT 49
9312: PUSH
9313: LD_INT 49
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: PUSH
9327: LD_VAR 0 3
9331: PUSH
9332: LD_INT 9
9334: MOD
9335: PUSH
9336: LD_INT 1
9338: PLUS
9339: ARRAY
9340: PPUSH
9341: LD_INT 80
9343: PPUSH
9344: CALL 73898 0 5
// result := result union CreateVehicle ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_VAR 0 2
9357: PUSH
9358: CALL_OW 45
9362: UNION
9363: ST_TO_ADDR
// end ;
9364: GO 9233
9366: POP
9367: POP
// if not KappaStatus then
9368: LD_EXP 2
9372: NOT
9373: IFFALSE 9608
// begin uc_nation := 1 ;
9375: LD_ADDR_OWVAR 21
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// for i = 1 to 3 do
9383: LD_ADDR_VAR 0 3
9387: PUSH
9388: DOUBLE
9389: LD_INT 1
9391: DEC
9392: ST_TO_ADDR
9393: LD_INT 3
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9533
// begin j := rand ( 0 , 1 ) ;
9399: LD_ADDR_VAR 0 4
9403: PUSH
9404: LD_INT 0
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 12
9414: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling , us_morphling , us_heavy_tracked ] [ j + rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher , us_heavy_gun ] [ j + rand ( 1 , 2 ) ] , 85 ) ;
9415: LD_INT 3
9417: PUSH
9418: LD_INT 5
9420: PUSH
9421: LD_INT 5
9423: PUSH
9424: LD_INT 4
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: LD_VAR 0 4
9437: PUSH
9438: LD_INT 1
9440: PPUSH
9441: LD_INT 3
9443: PPUSH
9444: CALL_OW 12
9448: PLUS
9449: ARRAY
9450: PPUSH
9451: LD_INT 1
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_INT 2
9466: PPUSH
9467: CALL_OW 12
9471: ARRAY
9472: PPUSH
9473: LD_INT 3
9475: PPUSH
9476: LD_INT 9
9478: PUSH
9479: LD_INT 7
9481: PUSH
9482: LD_INT 6
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: PUSH
9490: LD_VAR 0 4
9494: PUSH
9495: LD_INT 1
9497: PPUSH
9498: LD_INT 2
9500: PPUSH
9501: CALL_OW 12
9505: PLUS
9506: ARRAY
9507: PPUSH
9508: LD_INT 85
9510: PPUSH
9511: CALL 73898 0 5
// result := result union CreateVehicle ;
9515: LD_ADDR_VAR 0 2
9519: PUSH
9520: LD_VAR 0 2
9524: PUSH
9525: CALL_OW 45
9529: UNION
9530: ST_TO_ADDR
// end ;
9531: GO 9396
9533: POP
9534: POP
// if vsevolodFirstAttack then
9535: LD_EXP 24
9539: IFFALSE 9606
// begin vsevolodFirstAttack := false ;
9541: LD_ADDR_EXP 24
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
9549: LD_INT 5
9551: PPUSH
9552: LD_INT 3
9554: PPUSH
9555: LD_INT 1
9557: PPUSH
9558: LD_INT 6
9560: PPUSH
9561: LD_INT 100
9563: PPUSH
9564: CALL 73898 0 5
// sewiVeh := CreateVehicle ;
9568: LD_ADDR_EXP 74
9572: PUSH
9573: CALL_OW 45
9577: ST_TO_ADDR
// SetMark ( sewiVeh , 1 ) ;
9578: LD_EXP 74
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 242
// result := result union sewiVeh ;
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_EXP 74
9604: UNION
9605: ST_TO_ADDR
// end ; end else
9606: GO 9818
// if vsevolodFirstAttack then
9608: LD_EXP 24
9612: IFFALSE 9818
// begin vsevolodFirstAttack := false ;
9614: LD_ADDR_EXP 24
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// uc_nation := 3 ;
9622: LD_ADDR_OWVAR 21
9626: PUSH
9627: LD_INT 3
9629: ST_TO_ADDR
// for i = 1 to 2 + Difficulty do
9630: LD_ADDR_VAR 0 3
9634: PUSH
9635: DOUBLE
9636: LD_INT 1
9638: DEC
9639: ST_TO_ADDR
9640: LD_INT 2
9642: PUSH
9643: LD_OWVAR 67
9647: PLUS
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9758
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , [ ru_rocket_launcher , ru_rocket , ru_rocket ] [ i mod 3 + 1 ] , 80 ) ;
9652: LD_INT 22
9654: PUSH
9655: LD_INT 24
9657: PUSH
9658: LD_INT 24
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 3
9673: MOD
9674: PUSH
9675: LD_INT 1
9677: PLUS
9678: ARRAY
9679: PPUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 1
9692: PPUSH
9693: LD_INT 2
9695: PPUSH
9696: CALL_OW 12
9700: ARRAY
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: LD_INT 45
9707: PUSH
9708: LD_INT 47
9710: PUSH
9711: LD_INT 47
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 3
9726: MOD
9727: PUSH
9728: LD_INT 1
9730: PLUS
9731: ARRAY
9732: PPUSH
9733: LD_INT 80
9735: PPUSH
9736: CALL 73898 0 5
// result := result union CreateVehicle ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_VAR 0 2
9749: PUSH
9750: CALL_OW 45
9754: UNION
9755: ST_TO_ADDR
// end ;
9756: GO 9649
9758: POP
9759: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_rocket , 100 ) ;
9760: LD_INT 24
9762: PPUSH
9763: LD_INT 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 47
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: CALL 73898 0 5
// sewiVeh := CreateVehicle ;
9779: LD_ADDR_EXP 74
9783: PUSH
9784: CALL_OW 45
9788: ST_TO_ADDR
// SetMark ( sewiVeh , - 6 ) ;
9789: LD_EXP 74
9793: PPUSH
9794: LD_INT 6
9796: NEG
9797: PPUSH
9798: CALL_OW 242
// result := result union sewiVeh ;
9802: LD_ADDR_VAR 0 2
9806: PUSH
9807: LD_VAR 0 2
9811: PUSH
9812: LD_EXP 74
9816: UNION
9817: ST_TO_ADDR
// end ; end ; end ;
9818: GO 9821
9820: POP
// end ;
9821: LD_VAR 0 2
9825: RET
// every 0 0$30 trigger activeAttacks do var i , tmp , time , areas , strength , xy ;
9826: LD_EXP 16
9830: IFFALSE 10571
9832: GO 9834
9834: DISABLE
9835: LD_INT 0
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
// begin areas := [ southSpawn , southWestSpawn ] ;
9843: LD_ADDR_VAR 0 4
9847: PUSH
9848: LD_INT 11
9850: PUSH
9851: LD_INT 12
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: ST_TO_ADDR
// time := [ 5 5$30 , 4 4$50 , 4 4$40 , 4 4$30 ] [ Difficulty ] ;
9858: LD_ADDR_VAR 0 3
9862: PUSH
9863: LD_INT 11550
9865: PUSH
9866: LD_INT 10150
9868: PUSH
9869: LD_INT 9800
9871: PUSH
9872: LD_INT 9450
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_OWVAR 67
9885: ARRAY
9886: ST_TO_ADDR
// xy := [ [ 70 , 118 ] , [ 78 , 31 ] ] ;
9887: LD_ADDR_VAR 0 6
9891: PUSH
9892: LD_INT 70
9894: PUSH
9895: LD_INT 118
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 78
9904: PUSH
9905: LD_INT 31
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: ST_TO_ADDR
// repeat if missionStage = 2 then
9916: LD_EXP 15
9920: PUSH
9921: LD_INT 2
9923: EQUAL
9924: IFFALSE 9935
// wait ( 1 1$30 ) else
9926: LD_INT 3150
9928: PPUSH
9929: CALL_OW 67
9933: GO 9944
// wait ( time ) ;
9935: LD_VAR 0 3
9939: PPUSH
9940: CALL_OW 67
// if missionStage = 6 or Difficulty > 2 then
9944: LD_EXP 15
9948: PUSH
9949: LD_INT 6
9951: EQUAL
9952: PUSH
9953: LD_OWVAR 67
9957: PUSH
9958: LD_INT 2
9960: GREATER
9961: OR
9962: IFFALSE 9990
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
9964: LD_INT 51
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: LD_INT 2
9972: PPUSH
9973: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
9977: LD_INT 57
9979: PPUSH
9980: LD_INT 6
9982: PPUSH
9983: LD_INT 2
9985: PPUSH
9986: CALL_OW 322
// end ; if missionStage = 8 then
9990: LD_EXP 15
9994: PUSH
9995: LD_INT 8
9997: EQUAL
9998: IFFALSE 10026
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
10000: LD_INT 52
10002: PPUSH
10003: LD_INT 6
10005: PPUSH
10006: LD_INT 2
10008: PPUSH
10009: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
10013: LD_INT 58
10015: PPUSH
10016: LD_INT 6
10018: PPUSH
10019: LD_INT 2
10021: PPUSH
10022: CALL_OW 322
// end ; if Difficulty = 4 or missionStage = 10 then
10026: LD_OWVAR 67
10030: PUSH
10031: LD_INT 4
10033: EQUAL
10034: PUSH
10035: LD_EXP 15
10039: PUSH
10040: LD_INT 10
10042: EQUAL
10043: OR
10044: IFFALSE 10072
// begin SetTech ( tech_weap3 , 6 , state_researched ) ;
10046: LD_INT 53
10048: PPUSH
10049: LD_INT 6
10051: PPUSH
10052: LD_INT 2
10054: PPUSH
10055: CALL_OW 322
// SetTech ( tech_comp3 , 6 , state_researched ) ;
10059: LD_INT 59
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: LD_INT 2
10067: PPUSH
10068: CALL_OW 322
// end ; if activeAttacks then
10072: LD_EXP 16
10076: IFFALSE 10565
// begin if missionStage = 2 then
10078: LD_EXP 15
10082: PUSH
10083: LD_INT 2
10085: EQUAL
10086: IFFALSE 10096
// strength := 1 ;
10088: LD_ADDR_VAR 0 5
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// if missionStage > 2 then
10096: LD_EXP 15
10100: PUSH
10101: LD_INT 2
10103: GREATER
10104: IFFALSE 10114
// strength := 2 ;
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: LD_INT 2
10113: ST_TO_ADDR
// if missionStage > 6 then
10114: LD_EXP 15
10118: PUSH
10119: LD_INT 6
10121: GREATER
10122: IFFALSE 10132
// strength := 3 ;
10124: LD_ADDR_VAR 0 5
10128: PUSH
10129: LD_INT 3
10131: ST_TO_ADDR
// if missionStage > 10 then
10132: LD_EXP 15
10136: PUSH
10137: LD_INT 10
10139: GREATER
10140: IFFALSE 10150
// strength := 4 ;
10142: LD_ADDR_VAR 0 5
10146: PUSH
10147: LD_INT 4
10149: ST_TO_ADDR
// tmp := PrepareRussianAttack ( strength ) ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_VAR 0 5
10159: PPUSH
10160: CALL 8643 0 1
10164: ST_TO_ADDR
// for i in tmp do
10165: LD_ADDR_VAR 0 1
10169: PUSH
10170: LD_VAR 0 2
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10434
// begin PlaceUnitArea ( i , areas [ rand ( 1 , 2 ) ] , false ) ;
10178: LD_VAR 0 1
10182: PPUSH
10183: LD_VAR 0 4
10187: PUSH
10188: LD_INT 1
10190: PPUSH
10191: LD_INT 2
10193: PPUSH
10194: CALL_OW 12
10198: ARRAY
10199: PPUSH
10200: LD_INT 0
10202: PPUSH
10203: CALL_OW 49
// if i = sewiVeh then
10207: LD_VAR 0 1
10211: PUSH
10212: LD_EXP 74
10216: EQUAL
10217: IFFALSE 10254
// begin Vsevolod = PrepareUnit ( Vsevolod , false ,  ) ;
10219: LD_ADDR_EXP 73
10223: PUSH
10224: LD_STRING Vsevolod
10226: PPUSH
10227: LD_INT 0
10229: PPUSH
10230: LD_STRING 
10232: PPUSH
10233: CALL 69058 0 3
10237: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , i ) ;
10238: LD_EXP 73
10242: PPUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 52
// end else
10252: GO 10335
// if GetControl ( i ) = control_manual then
10254: LD_VAR 0 1
10258: PPUSH
10259: CALL_OW 263
10263: PUSH
10264: LD_INT 1
10266: EQUAL
10267: IFFALSE 10335
// begin uc_side := 6 ;
10269: LD_ADDR_OWVAR 20
10273: PUSH
10274: LD_INT 6
10276: ST_TO_ADDR
// uc_nation := 3 ;
10277: LD_ADDR_OWVAR 21
10281: PUSH
10282: LD_INT 3
10284: ST_TO_ADDR
// hc_gallery :=  ;
10285: LD_ADDR_OWVAR 33
10289: PUSH
10290: LD_STRING 
10292: ST_TO_ADDR
// hc_name :=  ;
10293: LD_ADDR_OWVAR 26
10297: PUSH
10298: LD_STRING 
10300: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
10301: LD_INT 0
10303: PPUSH
10304: LD_INT 3
10306: PPUSH
10307: LD_INT 10
10309: PPUSH
10310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
10314: CALL_OW 44
10318: PPUSH
10319: LD_VAR 0 1
10323: PPUSH
10324: CALL_OW 52
// wait ( 0 0$0.3 ) ;
10328: LD_INT 10
10330: PPUSH
10331: CALL_OW 67
// end ; case rand ( 1 , 3 ) of 1 :
10335: LD_INT 1
10337: PPUSH
10338: LD_INT 3
10340: PPUSH
10341: CALL_OW 12
10345: PUSH
10346: LD_INT 1
10348: DOUBLE
10349: EQUAL
10350: IFTRUE 10354
10352: GO 10372
10354: POP
// ComMoveXY ( i , 111 , 197 ) ; 2 :
10355: LD_VAR 0 1
10359: PPUSH
10360: LD_INT 111
10362: PPUSH
10363: LD_INT 197
10365: PPUSH
10366: CALL_OW 111
10370: GO 10425
10372: LD_INT 2
10374: DOUBLE
10375: EQUAL
10376: IFTRUE 10380
10378: GO 10398
10380: POP
// ComMoveXY ( i , 91 , 165 ) ; 3 :
10381: LD_VAR 0 1
10385: PPUSH
10386: LD_INT 91
10388: PPUSH
10389: LD_INT 165
10391: PPUSH
10392: CALL_OW 111
10396: GO 10425
10398: LD_INT 3
10400: DOUBLE
10401: EQUAL
10402: IFTRUE 10406
10404: GO 10424
10406: POP
// ComMoveXY ( i , 137 , 157 ) ; end ;
10407: LD_VAR 0 1
10411: PPUSH
10412: LD_INT 137
10414: PPUSH
10415: LD_INT 157
10417: PPUSH
10418: CALL_OW 111
10422: GO 10425
10424: POP
// wait ( 0 0$2 ) ;
10425: LD_INT 70
10427: PPUSH
10428: CALL_OW 67
// end ;
10432: GO 10175
10434: POP
10435: POP
// repeat wait ( 0 0$1 ) ;
10436: LD_INT 35
10438: PPUSH
10439: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_ok ] ) do
10443: LD_ADDR_VAR 0 1
10447: PUSH
10448: LD_VAR 0 2
10452: PPUSH
10453: LD_INT 50
10455: PUSH
10456: EMPTY
10457: LIST
10458: PPUSH
10459: CALL_OW 72
10463: PUSH
10464: FOR_IN
10465: IFFALSE 10524
// AgressiveMove ( i , [ [ 108 , 153 ] , [ 105 , 149 ] , [ 85 , 131 ] , [ 64 , 105 ] ] ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 108
10474: PUSH
10475: LD_INT 153
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 105
10484: PUSH
10485: LD_INT 149
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 85
10494: PUSH
10495: LD_INT 131
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 64
10504: PUSH
10505: LD_INT 105
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PPUSH
10518: CALL 108963 0 2
10522: GO 10464
10524: POP
10525: POP
// until not UnitFilter ( tmp , [ [ f_not , [ f_weapon , ru_time_lapser ] ] , [ f_ok ] ] ) ;
10526: LD_VAR 0 2
10530: PPUSH
10531: LD_INT 3
10533: PUSH
10534: LD_INT 34
10536: PUSH
10537: LD_INT 49
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 50
10550: PUSH
10551: EMPTY
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 72
10562: NOT
10563: IFFALSE 10436
// end ; until russianDestroyed ;
10565: LD_EXP 21
10569: IFFALSE 9916
// end ;
10571: PPOPN 6
10573: END
// every 7 7$30 trigger not russianDestroyed and missionStage >= 6 do var i , tmp , target , teleport ;
10574: LD_EXP 21
10578: NOT
10579: PUSH
10580: LD_EXP 15
10584: PUSH
10585: LD_INT 6
10587: GREATEREQUAL
10588: AND
10589: IFFALSE 11528
10591: GO 10593
10593: DISABLE
10594: LD_INT 0
10596: PPUSH
10597: PPUSH
10598: PPUSH
10599: PPUSH
// begin enable ;
10600: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 3
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: NOT
10630: IFFALSE 10634
// exit ;
10632: GO 11528
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
10634: LD_ADDR_VAR 0 4
10638: PUSH
10639: LD_INT 22
10641: PUSH
10642: LD_INT 3
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 30
10651: PUSH
10652: LD_INT 34
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PPUSH
10663: CALL_OW 69
10667: ST_TO_ADDR
// if Prob ( 40 ) then
10668: LD_INT 40
10670: PPUSH
10671: CALL_OW 13
10675: IFFALSE 10821
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
10677: LD_INT 2
10679: PPUSH
10680: LD_INT 22
10682: PUSH
10683: LD_INT 3
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 49
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 22
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: LD_INT 49
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 3
10721: PUSH
10722: LD_INT 3
10724: PUSH
10725: LD_INT 49
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 24
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 3
10742: PUSH
10743: LD_INT 46
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 24
10754: PUSH
10755: LD_INT 3
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 46
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 24
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: LD_INT 3
10778: PUSH
10779: LD_INT 46
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 24
10790: PUSH
10791: LD_INT 3
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: LD_INT 46
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PPUSH
10815: CALL 62632 0 2
// end else
10819: GO 10963
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
10821: LD_INT 2
10823: PPUSH
10824: LD_INT 24
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: LD_INT 47
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 24
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: LD_INT 47
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 24
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: LD_INT 3
10868: PUSH
10869: LD_INT 47
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 24
10880: PUSH
10881: LD_INT 3
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 46
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 24
10898: PUSH
10899: LD_INT 3
10901: PUSH
10902: LD_INT 3
10904: PUSH
10905: LD_INT 46
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 24
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: LD_INT 3
10922: PUSH
10923: LD_INT 46
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 24
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: LD_INT 3
10940: PUSH
10941: LD_INT 46
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: PPUSH
10959: CALL 62632 0 2
// end ; repeat wait ( 0 0$1 ) ;
10963: LD_INT 35
10965: PPUSH
10966: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= 7 ;
10970: LD_INT 2
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL 64050 0 2
10980: PUSH
10981: LD_INT 7
10983: GREATEREQUAL
10984: IFFALSE 10963
// wait ( 0 0$10 ) ;
10986: LD_INT 350
10988: PPUSH
10989: CALL_OW 67
// tmp := MC_GetVehicles ( 2 , true ) ;
10993: LD_ADDR_VAR 0 2
10997: PUSH
10998: LD_INT 2
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL 64050 0 2
11008: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
11009: LD_ADDR_EXP 120
11013: PUSH
11014: LD_EXP 120
11018: PPUSH
11019: LD_INT 2
11021: PPUSH
11022: LD_EXP 120
11026: PUSH
11027: LD_INT 2
11029: ARRAY
11030: PUSH
11031: LD_VAR 0 2
11035: DIFF
11036: PPUSH
11037: CALL_OW 1
11041: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_INT 0
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 12
11057: ST_TO_ADDR
// if target then
11058: LD_VAR 0 3
11062: IFFALSE 11190
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
11064: LD_ADDR_VAR 0 2
11068: PUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_INT 24
11076: PUSH
11077: LD_INT 250
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 72
11088: ST_TO_ADDR
// for i in tmp do
11089: LD_ADDR_VAR 0 1
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11140
// if GetDistUnitXY ( i , 139 , 89 ) > 9 then
11102: LD_VAR 0 1
11106: PPUSH
11107: LD_INT 139
11109: PPUSH
11110: LD_INT 89
11112: PPUSH
11113: CALL_OW 297
11117: PUSH
11118: LD_INT 9
11120: GREATER
11121: IFFALSE 11138
// ComMoveXY ( i , 139 , 89 ) ;
11123: LD_VAR 0 1
11127: PPUSH
11128: LD_INT 139
11130: PPUSH
11131: LD_INT 89
11133: PPUSH
11134: CALL_OW 111
11138: GO 11099
11140: POP
11141: POP
// wait ( 0 0$1 ) ;
11142: LD_INT 35
11144: PPUSH
11145: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 9 ] ) >= ( tmp - 1 ) ;
11149: LD_VAR 0 2
11153: PPUSH
11154: LD_INT 92
11156: PUSH
11157: LD_INT 139
11159: PUSH
11160: LD_INT 89
11162: PUSH
11163: LD_INT 9
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 72
11176: PUSH
11177: LD_VAR 0 2
11181: PUSH
11182: LD_INT 1
11184: MINUS
11185: GREATEREQUAL
11186: IFFALSE 11064
// end else
11188: GO 11332
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
11190: LD_VAR 0 2
11194: PPUSH
11195: LD_VAR 0 4
11199: PUSH
11200: LD_INT 1
11202: ARRAY
11203: PPUSH
11204: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
11208: LD_ADDR_VAR 0 2
11212: PUSH
11213: LD_VAR 0 2
11217: PPUSH
11218: LD_INT 24
11220: PUSH
11221: LD_INT 250
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 72
11232: ST_TO_ADDR
// for i in tmp do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_VAR 0 2
11242: PUSH
11243: FOR_IN
11244: IFFALSE 11284
// if GetDistUnitXY ( i , 124 , 139 ) > 9 then
11246: LD_VAR 0 1
11250: PPUSH
11251: LD_INT 124
11253: PPUSH
11254: LD_INT 139
11256: PPUSH
11257: CALL_OW 297
11261: PUSH
11262: LD_INT 9
11264: GREATER
11265: IFFALSE 11282
// ComMoveXY ( i , 124 , 139 ) ;
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_INT 124
11274: PPUSH
11275: LD_INT 139
11277: PPUSH
11278: CALL_OW 111
11282: GO 11243
11284: POP
11285: POP
// wait ( 0 0$1 ) ;
11286: LD_INT 35
11288: PPUSH
11289: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 9 ] ) >= ( tmp - 1 ) ;
11293: LD_VAR 0 2
11297: PPUSH
11298: LD_INT 92
11300: PUSH
11301: LD_INT 124
11303: PUSH
11304: LD_INT 139
11306: PUSH
11307: LD_INT 9
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: PPUSH
11316: CALL_OW 72
11320: PUSH
11321: LD_VAR 0 2
11325: PUSH
11326: LD_INT 1
11328: MINUS
11329: GREATEREQUAL
11330: IFFALSE 11208
// end ; repeat wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// for i in tmp do
11339: LD_ADDR_VAR 0 1
11343: PUSH
11344: LD_VAR 0 2
11348: PUSH
11349: FOR_IN
11350: IFFALSE 11519
// begin if GetLives ( i ) > 251 then
11352: LD_VAR 0 1
11356: PPUSH
11357: CALL_OW 256
11361: PUSH
11362: LD_INT 251
11364: GREATER
11365: IFFALSE 11490
// begin if GetWeapon ( i ) = ru_time_lapser then
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 264
11376: PUSH
11377: LD_INT 49
11379: EQUAL
11380: IFFALSE 11436
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) else
11382: LD_VAR 0 1
11386: PPUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 22
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_INT 8
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PPUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 74
11429: PPUSH
11430: CALL_OW 112
11434: GO 11488
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) ;
11436: LD_VAR 0 1
11440: PPUSH
11441: LD_INT 2
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 22
11456: PUSH
11457: LD_INT 8
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: PPUSH
11469: CALL_OW 69
11473: PPUSH
11474: LD_VAR 0 1
11478: PPUSH
11479: CALL_OW 74
11483: PPUSH
11484: CALL_OW 115
// end else
11488: GO 11517
// if IsDead ( i ) then
11490: LD_VAR 0 1
11494: PPUSH
11495: CALL_OW 301
11499: IFFALSE 11517
// tmp := tmp diff i ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 2
11510: PUSH
11511: LD_VAR 0 1
11515: DIFF
11516: ST_TO_ADDR
// end ;
11517: GO 11349
11519: POP
11520: POP
// until not tmp ;
11521: LD_VAR 0 2
11525: NOT
11526: IFFALSE 11332
// end ;
11528: PPOPN 4
11530: END
// export ruMobile ; every 0 0$01 trigger missionStage >= 7 and Difficulty > 1 do var i , veh , un ;
11531: LD_EXP 15
11535: PUSH
11536: LD_INT 7
11538: GREATEREQUAL
11539: PUSH
11540: LD_OWVAR 67
11544: PUSH
11545: LD_INT 1
11547: GREATER
11548: AND
11549: IFFALSE 11841
11551: GO 11553
11553: DISABLE
11554: LD_INT 0
11556: PPUSH
11557: PPUSH
11558: PPUSH
// begin ruMobile := [ ] ;
11559: LD_ADDR_EXP 77
11563: PUSH
11564: EMPTY
11565: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty - 1 ] do
11566: LD_ADDR_VAR 0 1
11570: PUSH
11571: DOUBLE
11572: LD_INT 1
11574: DEC
11575: ST_TO_ADDR
11576: LD_INT 4
11578: PUSH
11579: LD_INT 5
11581: PUSH
11582: LD_INT 6
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: LD_OWVAR 67
11594: PUSH
11595: LD_INT 1
11597: MINUS
11598: ARRAY
11599: PUSH
11600: FOR_TO
11601: IFFALSE 11839
// begin uc_side := 3 ;
11603: LD_ADDR_OWVAR 20
11607: PUSH
11608: LD_INT 3
11610: ST_TO_ADDR
// uc_nation := 1 ;
11611: LD_ADDR_OWVAR 21
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , [ us_laser , us_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
11619: LD_INT 5
11621: PPUSH
11622: LD_INT 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: LD_INT 9
11630: PUSH
11631: LD_INT 7
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_VAR 0 1
11642: PUSH
11643: LD_INT 2
11645: MOD
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ARRAY
11651: PPUSH
11652: LD_INT 100
11654: PPUSH
11655: CALL 73898 0 5
// veh := CreateVehicle ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: CALL_OW 45
11668: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
11669: LD_VAR 0 2
11673: PPUSH
11674: LD_INT 3
11676: PPUSH
11677: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea2 , false ) ;
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 29
11688: PPUSH
11689: LD_INT 0
11691: PPUSH
11692: CALL_OW 49
// uc_nation := 3 ;
11696: LD_ADDR_OWVAR 21
11700: PUSH
11701: LD_INT 3
11703: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
11704: LD_INT 0
11706: PPUSH
11707: LD_INT 10
11709: PPUSH
11710: CALL_OW 383
// un := CreateHuman ;
11714: LD_ADDR_VAR 0 3
11718: PUSH
11719: CALL_OW 44
11723: ST_TO_ADDR
// SetTag ( un , 105 ) ;
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_INT 105
11731: PPUSH
11732: CALL_OW 109
// if GetSkill ( un , skill_mechanical ) < [ 8 , 9 , 10 ] [ Difficulty ] then
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 3
11743: PPUSH
11744: CALL_OW 259
11748: PUSH
11749: LD_INT 8
11751: PUSH
11752: LD_INT 9
11754: PUSH
11755: LD_INT 10
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_OWVAR 67
11767: ARRAY
11768: LESS
11769: IFFALSE 11803
// SetSkill ( un , skill_mechanical , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 3
11778: PPUSH
11779: LD_INT 8
11781: PUSH
11782: LD_INT 9
11784: PUSH
11785: LD_INT 10
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_OWVAR 67
11797: ARRAY
11798: PPUSH
11799: CALL_OW 237
// PlaceHumanInUnit ( un , veh ) ;
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: CALL_OW 52
// ruMobile := Join ( ruMobile , veh ) ;
11817: LD_ADDR_EXP 77
11821: PUSH
11822: LD_EXP 77
11826: PPUSH
11827: LD_VAR 0 2
11831: PPUSH
11832: CALL 106359 0 2
11836: ST_TO_ADDR
// end ;
11837: GO 11600
11839: POP
11840: POP
// end ;
11841: PPOPN 3
11843: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
11844: LD_EXP 77
11848: IFFALSE 12357
11850: GO 11852
11852: DISABLE
11853: LD_INT 0
11855: PPUSH
11856: PPUSH
11857: PPUSH
// begin enable ;
11858: ENABLE
// if not ruMobile then
11859: LD_EXP 77
11863: NOT
11864: IFFALSE 11869
// begin disable ;
11866: DISABLE
// exit ;
11867: GO 12357
// end ; for i in ruMobile do
11869: LD_ADDR_VAR 0 1
11873: PUSH
11874: LD_EXP 77
11878: PUSH
11879: FOR_IN
11880: IFFALSE 12355
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 302
11891: NOT
11892: PUSH
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL_OW 255
11902: PUSH
11903: LD_INT 3
11905: NONEQUAL
11906: OR
11907: IFFALSE 11927
// begin ruMobile := ruMobile diff i ;
11909: LD_ADDR_EXP 77
11913: PUSH
11914: LD_EXP 77
11918: PUSH
11919: LD_VAR 0 1
11923: DIFF
11924: ST_TO_ADDR
// continue ;
11925: GO 11879
// end ; if GetTag ( i ) = 300 then
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 110
11936: PUSH
11937: LD_INT 300
11939: EQUAL
11940: IFFALSE 11990
// begin ComMoveXY ( i , 160 , 81 ) ;
11942: LD_VAR 0 1
11946: PPUSH
11947: LD_INT 160
11949: PPUSH
11950: LD_INT 81
11952: PPUSH
11953: CALL_OW 111
// if GetDistUnitXY ( i , 160 , 81 ) < 8 then
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 160
11964: PPUSH
11965: LD_INT 81
11967: PPUSH
11968: CALL_OW 297
11972: PUSH
11973: LD_INT 8
11975: LESS
11976: IFFALSE 11990
// SetTag ( i , 301 ) ;
11978: LD_VAR 0 1
11982: PPUSH
11983: LD_INT 301
11985: PPUSH
11986: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11990: LD_VAR 0 1
11994: PPUSH
11995: CALL_OW 110
11999: PUSH
12000: LD_INT 301
12002: EQUAL
12003: IFFALSE 12046
// begin if not IsInArea ( i , ruMobileParkingArea ) then
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_INT 33
12012: PPUSH
12013: CALL_OW 308
12017: NOT
12018: IFFALSE 12034
// ComMoveToArea ( i , ruMobileParkingArea ) else
12020: LD_VAR 0 1
12024: PPUSH
12025: LD_INT 33
12027: PPUSH
12028: CALL_OW 113
12032: GO 12046
// SetTag ( i , 302 ) ;
12034: LD_VAR 0 1
12038: PPUSH
12039: LD_INT 302
12041: PPUSH
12042: CALL_OW 109
// end ; if GetTag ( i ) = 302 then
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 110
12055: PUSH
12056: LD_INT 302
12058: EQUAL
12059: IFFALSE 12189
// begin if GetLives ( i ) < 1000 then
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 256
12070: PUSH
12071: LD_INT 1000
12073: LESS
12074: IFFALSE 12166
// begin if not IsDrivenBy ( i ) then
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 311
12085: NOT
12086: IFFALSE 12090
// continue ;
12088: GO 11879
// mech := IsDrivenBy ( i ) ;
12090: LD_ADDR_VAR 0 2
12094: PUSH
12095: LD_VAR 0 1
12099: PPUSH
12100: CALL_OW 311
12104: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
12128: LD_INT 35
12130: PPUSH
12131: CALL_OW 67
// until GetLives ( i ) = 1000 ;
12135: LD_VAR 0 1
12139: PPUSH
12140: CALL_OW 256
12144: PUSH
12145: LD_INT 1000
12147: EQUAL
12148: IFFALSE 12128
// ComEnterUnit ( mech , i ) ;
12150: LD_VAR 0 2
12154: PPUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: CALL_OW 120
// end else
12164: GO 12189
// if IsDrivenBy ( i ) then
12166: LD_VAR 0 1
12170: PPUSH
12171: CALL_OW 311
12175: IFFALSE 12189
// SetTag ( i , 0 ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_INT 0
12184: PPUSH
12185: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
12189: LD_VAR 0 1
12193: PPUSH
12194: CALL_OW 110
12198: PUSH
12199: LD_INT 300
12201: LESS
12202: IFFALSE 12353
// begin enemy := FilterUnitsInArea ( russianBaseArea , [ f_enemy , 3 ] ) ;
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: LD_INT 4
12211: PPUSH
12212: LD_INT 81
12214: PUSH
12215: LD_INT 3
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 70
12226: ST_TO_ADDR
// if GetLives ( i ) < 650 then
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 256
12236: PUSH
12237: LD_INT 650
12239: LESS
12240: IFFALSE 12265
// begin ComStop ( i ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 141
// SetTag ( i , 300 ) ;
12251: LD_VAR 0 1
12255: PPUSH
12256: LD_INT 300
12258: PPUSH
12259: CALL_OW 109
// continue ;
12263: GO 11879
// end ; if enemy then
12265: LD_VAR 0 3
12269: IFFALSE 12309
// begin if not HasTask ( i ) then
12271: LD_VAR 0 1
12275: PPUSH
12276: CALL_OW 314
12280: NOT
12281: IFFALSE 12307
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12283: LD_VAR 0 1
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 74
12302: PPUSH
12303: CALL_OW 115
// end else
12307: GO 12353
// AgressiveMove ( i , [ [ 158 , 61 ] , [ 98 , 100 ] , [ 78 , 93 ] ] ) ;
12309: LD_VAR 0 1
12313: PPUSH
12314: LD_INT 158
12316: PUSH
12317: LD_INT 61
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 98
12326: PUSH
12327: LD_INT 100
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 78
12336: PUSH
12337: LD_INT 93
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL 108963 0 2
// end ; end ;
12353: GO 11879
12355: POP
12356: POP
// end ; end_of_file
12357: PPOPN 3
12359: END
// export Roth , Simms , Kirilenkova , Dolgov , Petrosyan , Petrovova , Kuzmov , Lipshchin , Gnyevko , Titov , Xavier , Belkov , Burlak , Karamazov , Kapitsova , Scholtze , Oblukov ; export allianceSpecialForce ; export function PrepareAlliance ; var i , tmp , base , side , teleport , b ; begin
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
12366: PPUSH
12367: PPUSH
12368: PPUSH
// side := 7 ;
12369: LD_ADDR_VAR 0 5
12373: PUSH
12374: LD_INT 7
12376: ST_TO_ADDR
// uc_side := side ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_VAR 0 5
12386: ST_TO_ADDR
// uc_nation := 1 ;
12387: LD_ADDR_OWVAR 21
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
12395: LD_ADDR_VAR 0 2
12399: PUSH
12400: LD_INT 22
12402: PUSH
12403: LD_VAR 0 5
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 3
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: PUSH
12431: FOR_IN
12432: IFFALSE 12448
// SetBLevel ( i , 10 ) ;
12434: LD_VAR 0 2
12438: PPUSH
12439: LD_INT 10
12441: PPUSH
12442: CALL_OW 241
12446: GO 12431
12448: POP
12449: POP
// base := GetBase ( al_depot ) ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_INT 2
12457: PPUSH
12458: CALL_OW 274
12462: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
12463: LD_ADDR_VAR 0 6
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_VAR 0 5
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 34
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if teleport then
12499: LD_VAR 0 6
12503: IFFALSE 12524
// TeleportExit ( teleport [ 1 ] , 262 , 119 ) ;
12505: LD_VAR 0 6
12509: PUSH
12510: LD_INT 1
12512: ARRAY
12513: PPUSH
12514: LD_INT 262
12516: PPUSH
12517: LD_INT 119
12519: PPUSH
12520: CALL_OW 243
// SetResourceType ( base , mat_cans , 19500 ) ;
12524: LD_VAR 0 4
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: LD_INT 19500
12534: PPUSH
12535: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
12539: LD_VAR 0 4
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: LD_INT 200
12549: PPUSH
12550: CALL_OW 277
// SetResourceType ( base , mat_siberit , 650 ) ;
12554: LD_VAR 0 4
12558: PPUSH
12559: LD_INT 3
12561: PPUSH
12562: LD_INT 650
12564: PPUSH
12565: CALL_OW 277
// Roth := NewCharacter ( Roth ) ;
12569: LD_ADDR_EXP 78
12573: PUSH
12574: LD_STRING Roth
12576: PPUSH
12577: CALL_OW 25
12581: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
12582: LD_ADDR_EXP 79
12586: PUSH
12587: LD_STRING Simms
12589: PPUSH
12590: LD_EXP 1
12594: NOT
12595: PPUSH
12596: LD_STRING 10c_
12598: PPUSH
12599: CALL 69058 0 3
12603: ST_TO_ADDR
// SetClass ( Simms , class_scientistic ) ;
12604: LD_EXP 79
12608: PPUSH
12609: LD_INT 4
12611: PPUSH
12612: CALL_OW 336
// if not Simms then
12616: LD_EXP 79
12620: NOT
12621: IFFALSE 12651
// begin uc_nation := 1 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
12631: LD_INT 2
12633: PPUSH
12634: LD_INT 10
12636: PPUSH
12637: CALL_OW 384
// Simms := CreateHuman ;
12641: LD_ADDR_EXP 79
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// end ; uc_nation := 3 ;
12651: LD_ADDR_OWVAR 21
12655: PUSH
12656: LD_INT 3
12658: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
12659: LD_ADDR_EXP 80
12663: PUSH
12664: LD_STRING Kirilenkova
12666: PPUSH
12667: CALL_OW 25
12671: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
12672: LD_ADDR_EXP 94
12676: PUSH
12677: LD_STRING Oblukov
12679: PPUSH
12680: CALL_OW 25
12684: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
12685: LD_ADDR_EXP 81
12689: PUSH
12690: LD_STRING Dolgov
12692: PPUSH
12693: CALL_OW 25
12697: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
12698: LD_ADDR_EXP 82
12702: PUSH
12703: LD_STRING Petrosyan
12705: PPUSH
12706: CALL_OW 25
12710: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
12711: LD_ADDR_EXP 93
12715: PUSH
12716: LD_STRING Scholtze
12718: PPUSH
12719: CALL_OW 25
12723: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
12724: LD_ADDR_EXP 92
12728: PUSH
12729: LD_STRING Kapitsova
12731: PPUSH
12732: CALL_OW 25
12736: ST_TO_ADDR
// Petrovova := NewCharacter ( Petrovova ) ;
12737: LD_ADDR_EXP 83
12741: PUSH
12742: LD_STRING Petrovova
12744: PPUSH
12745: CALL_OW 25
12749: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
12750: LD_ADDR_EXP 84
12754: PUSH
12755: LD_STRING Kuzmov
12757: PPUSH
12758: CALL_OW 25
12762: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
12763: LD_ADDR_EXP 91
12767: PUSH
12768: LD_STRING Karamazov
12770: PPUSH
12771: CALL_OW 25
12775: ST_TO_ADDR
// if LoadVariable ( 13_Lipshchin_1 , 0 ) then
12776: LD_STRING 13_Lipshchin_1
12778: PPUSH
12779: LD_INT 0
12781: PPUSH
12782: CALL_OW 30
12786: IFFALSE 12801
// Lipshchin := NewCharacter ( Lipshchin ) ;
12788: LD_ADDR_EXP 85
12792: PUSH
12793: LD_STRING Lipshchin
12795: PPUSH
12796: CALL_OW 25
12800: ST_TO_ADDR
// if LoadVariable ( 13_Titov_1 , 0 ) then
12801: LD_STRING 13_Titov_1
12803: PPUSH
12804: LD_INT 0
12806: PPUSH
12807: CALL_OW 30
12811: IFFALSE 12826
// Titov := NewCharacter ( Titov ) ;
12813: LD_ADDR_EXP 87
12817: PUSH
12818: LD_STRING Titov
12820: PPUSH
12821: CALL_OW 25
12825: ST_TO_ADDR
// if LoadVariable ( 13_Gnyevko_1 , 0 ) then
12826: LD_STRING 13_Gnyevko_1
12828: PPUSH
12829: LD_INT 0
12831: PPUSH
12832: CALL_OW 30
12836: IFFALSE 12851
// Gnyevko := NewCharacter ( Gnyevko ) ;
12838: LD_ADDR_EXP 86
12842: PUSH
12843: LD_STRING Gnyevko
12845: PPUSH
12846: CALL_OW 25
12850: ST_TO_ADDR
// if LoadVariable ( 13_Xavier_1 , 0 ) then
12851: LD_STRING 13_Xavier_1
12853: PPUSH
12854: LD_INT 0
12856: PPUSH
12857: CALL_OW 30
12861: IFFALSE 12876
// Xavier := NewCharacter ( Xavier2 ) ;
12863: LD_ADDR_EXP 88
12867: PUSH
12868: LD_STRING Xavier2
12870: PPUSH
12871: CALL_OW 25
12875: ST_TO_ADDR
// if LoadVariable ( 13_Belkov_1 , 0 ) then
12876: LD_STRING 13_Belkov_1
12878: PPUSH
12879: LD_INT 0
12881: PPUSH
12882: CALL_OW 30
12886: IFFALSE 12901
// Belkov := NewCharacter ( Belkov ) ;
12888: LD_ADDR_EXP 89
12892: PUSH
12893: LD_STRING Belkov
12895: PPUSH
12896: CALL_OW 25
12900: ST_TO_ADDR
// if not BurlakStatus then
12901: LD_EXP 9
12905: NOT
12906: IFFALSE 12921
// Burlak = NewCharacter ( Burlak ) ;
12908: LD_ADDR_EXP 90
12912: PUSH
12913: LD_STRING Burlak
12915: PPUSH
12916: CALL_OW 25
12920: ST_TO_ADDR
// tmp := [ Roth , Kirilenkova , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova , Petrovova , Kuzmov , Karamazov ] ;
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_EXP 78
12930: PUSH
12931: LD_EXP 80
12935: PUSH
12936: LD_EXP 94
12940: PUSH
12941: LD_EXP 81
12945: PUSH
12946: LD_EXP 82
12950: PUSH
12951: LD_EXP 93
12955: PUSH
12956: LD_EXP 92
12960: PUSH
12961: LD_EXP 83
12965: PUSH
12966: LD_EXP 84
12970: PUSH
12971: LD_EXP 91
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: ST_TO_ADDR
// if Simms then
12988: LD_EXP 79
12992: IFFALSE 13010
// tmp := tmp ^ Simms ;
12994: LD_ADDR_VAR 0 3
12998: PUSH
12999: LD_VAR 0 3
13003: PUSH
13004: LD_EXP 79
13008: ADD
13009: ST_TO_ADDR
// if Titov then
13010: LD_EXP 87
13014: IFFALSE 13032
// tmp := tmp ^ Titov ;
13016: LD_ADDR_VAR 0 3
13020: PUSH
13021: LD_VAR 0 3
13025: PUSH
13026: LD_EXP 87
13030: ADD
13031: ST_TO_ADDR
// if Lipshchin then
13032: LD_EXP 85
13036: IFFALSE 13054
// tmp := tmp ^ Lipshchin ;
13038: LD_ADDR_VAR 0 3
13042: PUSH
13043: LD_VAR 0 3
13047: PUSH
13048: LD_EXP 85
13052: ADD
13053: ST_TO_ADDR
// if Gnyevko then
13054: LD_EXP 86
13058: IFFALSE 13076
// tmp := tmp ^ Gnyevko ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_EXP 86
13074: ADD
13075: ST_TO_ADDR
// if Xavier then
13076: LD_EXP 88
13080: IFFALSE 13098
// tmp := tmp ^ Xavier ;
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: LD_VAR 0 3
13091: PUSH
13092: LD_EXP 88
13096: ADD
13097: ST_TO_ADDR
// if Belkov then
13098: LD_EXP 89
13102: IFFALSE 13120
// tmp := tmp ^ Belkov ;
13104: LD_ADDR_VAR 0 3
13108: PUSH
13109: LD_VAR 0 3
13113: PUSH
13114: LD_EXP 89
13118: ADD
13119: ST_TO_ADDR
// if Burlak then
13120: LD_EXP 90
13124: IFFALSE 13142
// tmp := tmp ^ Burlak ;
13126: LD_ADDR_VAR 0 3
13130: PUSH
13131: LD_VAR 0 3
13135: PUSH
13136: LD_EXP 90
13140: ADD
13141: ST_TO_ADDR
// for i = 1 to 11 do
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: DOUBLE
13148: LD_INT 1
13150: DEC
13151: ST_TO_ADDR
13152: LD_INT 11
13154: PUSH
13155: FOR_TO
13156: IFFALSE 13224
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
13158: LD_ADDR_OWVAR 21
13162: PUSH
13163: LD_INT 1
13165: PUSH
13166: LD_INT 3
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 12
13183: ARRAY
13184: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 10 ) ;
13185: LD_INT 0
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_INT 4
13193: PPUSH
13194: CALL_OW 12
13198: PPUSH
13199: LD_INT 10
13201: PPUSH
13202: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_VAR 0 3
13215: PUSH
13216: CALL_OW 44
13220: ADD
13221: ST_TO_ADDR
// end ;
13222: GO 13155
13224: POP
13225: POP
// for i in tmp do
13226: LD_ADDR_VAR 0 2
13230: PUSH
13231: LD_VAR 0 3
13235: PUSH
13236: FOR_IN
13237: IFFALSE 13262
// PlaceUnitXYR ( i , 260 , 235 , 8 , false ) ;
13239: LD_VAR 0 2
13243: PPUSH
13244: LD_INT 260
13246: PPUSH
13247: LD_INT 235
13249: PPUSH
13250: LD_INT 8
13252: PPUSH
13253: LD_INT 0
13255: PPUSH
13256: CALL_OW 50
13260: GO 13236
13262: POP
13263: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff [ Roth , Simms ] ) ;
13264: LD_ADDR_EXP 101
13268: PUSH
13269: LD_EXP 101
13273: PPUSH
13274: LD_INT 1
13276: PPUSH
13277: LD_INT 22
13279: PUSH
13280: LD_VAR 0 5
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 3
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: PUSH
13315: LD_EXP 78
13319: PUSH
13320: LD_EXP 79
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: DIFF
13329: PPUSH
13330: CALL_OW 1
13334: ST_TO_ADDR
// uc_side := 0 ;
13335: LD_ADDR_OWVAR 20
13339: PUSH
13340: LD_INT 0
13342: ST_TO_ADDR
// uc_nation := 0 ;
13343: LD_ADDR_OWVAR 21
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// for i = 1 to 5 do
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: DOUBLE
13357: LD_INT 1
13359: DEC
13360: ST_TO_ADDR
13361: LD_INT 5
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13402
// begin InitHc ;
13367: CALL_OW 19
// hc_class := class_apeman ;
13371: LD_ADDR_OWVAR 28
13375: PUSH
13376: LD_INT 12
13378: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 299 , 229 , 10 , false ) ;
13379: CALL_OW 44
13383: PPUSH
13384: LD_INT 299
13386: PPUSH
13387: LD_INT 229
13389: PPUSH
13390: LD_INT 10
13392: PPUSH
13393: LD_INT 0
13395: PPUSH
13396: CALL_OW 50
// end ;
13400: GO 13364
13402: POP
13403: POP
// ComMoveXY ( Roth , 259 , 235 ) ;
13404: LD_EXP 78
13408: PPUSH
13409: LD_INT 259
13411: PPUSH
13412: LD_INT 235
13414: PPUSH
13415: CALL_OW 111
// AddComTurnXY ( Roth , 262 , 235 ) ;
13419: LD_EXP 78
13423: PPUSH
13424: LD_INT 262
13426: PPUSH
13427: LD_INT 235
13429: PPUSH
13430: CALL_OW 178
// if Simms then
13434: LD_EXP 79
13438: IFFALSE 13469
// begin ComMoveXY ( Simms , 262 , 235 ) ;
13440: LD_EXP 79
13444: PPUSH
13445: LD_INT 262
13447: PPUSH
13448: LD_INT 235
13450: PPUSH
13451: CALL_OW 111
// AddComTurnUnit ( Simms , Roth ) ;
13455: LD_EXP 79
13459: PPUSH
13460: LD_EXP 78
13464: PPUSH
13465: CALL_OW 179
// end ; uc_side := 7 ;
13469: LD_ADDR_OWVAR 20
13473: PUSH
13474: LD_INT 7
13476: ST_TO_ADDR
// uc_nation := 1 ;
13477: LD_ADDR_OWVAR 21
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// bc_type := b_control_tower ;
13485: LD_ADDR_OWVAR 42
13489: PUSH
13490: LD_INT 36
13492: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 268 , 251 , 4 ) ;
13493: LD_ADDR_VAR 0 7
13497: PUSH
13498: LD_INT 268
13500: PPUSH
13501: LD_INT 251
13503: PPUSH
13504: LD_INT 4
13506: PPUSH
13507: CALL_OW 47
13511: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
13512: LD_INT 0
13514: PPUSH
13515: LD_INT 10
13517: PPUSH
13518: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , b ) ;
13522: CALL_OW 44
13526: PPUSH
13527: LD_VAR 0 7
13531: PPUSH
13532: CALL_OW 52
// end ;
13536: LD_VAR 0 1
13540: RET
// every 9 9$00 trigger allianceActive and not allianceDestroyed do var i , tmp , target ;
13541: LD_EXP 31
13545: PUSH
13546: LD_EXP 23
13550: NOT
13551: AND
13552: IFFALSE 13780
13554: GO 13556
13556: DISABLE
13557: LD_INT 0
13559: PPUSH
13560: PPUSH
13561: PPUSH
// begin enable ;
13562: ENABLE
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_weapon , us_siberium_rocket ] ] ] ) ;
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 81
13570: PUSH
13571: LD_INT 7
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 32
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: LD_INT 30
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_INT 28
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 34
13613: PUSH
13614: LD_INT 49
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 34
13623: PUSH
13624: LD_INT 10
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 34
13633: PUSH
13634: LD_INT 8
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: ST_TO_ADDR
// if not tmp then
13659: LD_VAR 0 2
13663: NOT
13664: IFFALSE 13668
// exit ;
13666: GO 13780
// if UnitFilter ( tmp , [ f_weapon , us_siberium_rocket ] ) then
13668: LD_VAR 0 2
13672: PPUSH
13673: LD_INT 34
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 72
13687: IFFALSE 13720
// target := UnitFilter ( tmp , [ f_weapon , us_siberium_rocket ] ) [ 1 ] else
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: LD_VAR 0 2
13698: PPUSH
13699: LD_INT 34
13701: PUSH
13702: LD_INT 8
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
13718: GO 13744
// target := tmp [ rand ( 1 , tmp ) ] ;
13720: LD_ADDR_VAR 0 3
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_INT 1
13732: PPUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: CALL_OW 12
13742: ARRAY
13743: ST_TO_ADDR
// if GetSide ( target ) = 1 then
13744: LD_VAR 0 3
13748: PPUSH
13749: CALL_OW 255
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: IFFALSE 13768
// CenterNowOnUnits ( target ) ;
13759: LD_VAR 0 3
13763: PPUSH
13764: CALL_OW 87
// SetLives ( target , 0 ) ;
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
// end ;
13780: PPOPN 3
13782: END
// every 0 0$2 trigger not allianceDestroyed and allianceActive do var i , un , tmp ;
13783: LD_EXP 23
13787: NOT
13788: PUSH
13789: LD_EXP 31
13793: AND
13794: IFFALSE 14310
13796: GO 13798
13798: DISABLE
13799: LD_INT 0
13801: PPUSH
13802: PPUSH
13803: PPUSH
// begin uc_side := 7 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 7
13811: ST_TO_ADDR
// uc_nation := 1 ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 1
13819: ST_TO_ADDR
// tmp := Shuffle ( [ [ 125 , 163 ] , [ 185 , 168 ] , [ 111 , 97 ] , [ 94 , 114 ] ] ) ;
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_INT 125
13827: PUSH
13828: LD_INT 163
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 185
13837: PUSH
13838: LD_INT 168
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 111
13847: PUSH
13848: LD_INT 97
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 94
13857: PUSH
13858: LD_INT 114
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL 106464 0 1
13875: ST_TO_ADDR
// allianceSpecialForce := [ ] ;
13876: LD_ADDR_EXP 95
13880: PUSH
13881: EMPTY
13882: ST_TO_ADDR
// for i = 1 to Difficulty do
13883: LD_ADDR_VAR 0 1
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_OWVAR 67
13897: PUSH
13898: FOR_TO
13899: IFFALSE 14057
// begin InitHc ;
13901: CALL_OW 19
// PrepareSoldier ( false , 8 ) ;
13905: LD_INT 0
13907: PPUSH
13908: LD_INT 8
13910: PPUSH
13911: CALL_OW 381
// un := CreateHuman ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: CALL_OW 44
13924: ST_TO_ADDR
// PlaceUnitXYR ( un , 258 , 267 , 4 , false ) ;
13925: LD_VAR 0 2
13929: PPUSH
13930: LD_INT 258
13932: PPUSH
13933: LD_INT 267
13935: PPUSH
13936: LD_INT 4
13938: PPUSH
13939: LD_INT 0
13941: PPUSH
13942: CALL_OW 50
// allianceSpecialForce := allianceSpecialForce union un ;
13946: LD_ADDR_EXP 95
13950: PUSH
13951: LD_EXP 95
13955: PUSH
13956: LD_VAR 0 2
13960: UNION
13961: ST_TO_ADDR
// TeleportUnit ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 4 , true ) ;
13962: LD_VAR 0 2
13966: PPUSH
13967: LD_VAR 0 3
13971: PUSH
13972: LD_VAR 0 1
13976: ARRAY
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: LD_VAR 0 3
13986: PUSH
13987: LD_VAR 0 1
13991: ARRAY
13992: PUSH
13993: LD_INT 2
13995: ARRAY
13996: PPUSH
13997: LD_INT 4
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 483
// AddComMoveXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
14007: LD_VAR 0 2
14011: PPUSH
14012: LD_VAR 0 3
14016: PUSH
14017: LD_VAR 0 1
14021: ARRAY
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: LD_VAR 0 3
14031: PUSH
14032: LD_VAR 0 1
14036: ARRAY
14037: PUSH
14038: LD_INT 2
14040: ARRAY
14041: PPUSH
14042: CALL_OW 171
// AddComInvisible ( un ) ;
14046: LD_VAR 0 2
14050: PPUSH
14051: CALL_OW 212
// end ;
14055: GO 13898
14057: POP
14058: POP
// repeat wait ( 0 0$45 ) ;
14059: LD_INT 1575
14061: PPUSH
14062: CALL_OW 67
// for i in allianceSpecialForce do
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: LD_EXP 95
14075: PUSH
14076: FOR_IN
14077: IFFALSE 14295
// begin if IsInvisible ( i ) then
14079: LD_VAR 0 1
14083: PPUSH
14084: CALL_OW 571
14088: IFFALSE 14264
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_outside ] , [ f_dist , i , 25 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 1
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 50
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: LD_INT 56
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: LD_INT 91
14119: PUSH
14120: LD_VAR 0 1
14124: PUSH
14125: LD_INT 25
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 1
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 2
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 25
14158: PUSH
14159: LD_INT 3
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 4
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 25
14178: PUSH
14179: LD_INT 5
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 25
14188: PUSH
14189: LD_INT 8
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: ST_TO_ADDR
// if not tmp then
14217: LD_VAR 0 3
14221: NOT
14222: IFFALSE 14226
// continue ;
14224: GO 14076
// if Prob ( 30 * Difficulty ) then
14226: LD_INT 30
14228: PUSH
14229: LD_OWVAR 67
14233: MUL
14234: PPUSH
14235: CALL_OW 13
14239: IFFALSE 14264
// AllianceCaptureUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
14241: LD_VAR 0 3
14245: PUSH
14246: LD_INT 1
14248: PPUSH
14249: LD_VAR 0 3
14253: PPUSH
14254: CALL_OW 12
14258: ARRAY
14259: PPUSH
14260: CALL 34227 0 1
// end ; if IsDead ( i ) then
14264: LD_VAR 0 1
14268: PPUSH
14269: CALL_OW 301
14273: IFFALSE 14293
// begin allianceSpecialForce := allianceSpecialForce diff i ;
14275: LD_ADDR_EXP 95
14279: PUSH
14280: LD_EXP 95
14284: PUSH
14285: LD_VAR 0 1
14289: DIFF
14290: ST_TO_ADDR
// continue ;
14291: GO 14076
// end ; end ;
14293: GO 14076
14295: POP
14296: POP
// until allianceDestroyed or not allianceSpecialForce ;
14297: LD_EXP 23
14301: PUSH
14302: LD_EXP 95
14306: NOT
14307: OR
14308: IFFALSE 14059
// end ;
14310: PPOPN 3
14312: END
// every 0 0$30 trigger allianceActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_bweapon , us_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ] ) do var i , un , tmp , e ;
14313: LD_EXP 31
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_INT 1
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: LD_INT 35
14333: PUSH
14334: LD_INT 8
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 34
14343: PUSH
14344: LD_INT 8
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: AND
14365: IFFALSE 14765
14367: GO 14369
14369: DISABLE
14370: LD_INT 0
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
// begin for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: DOUBLE
14382: LD_INT 1
14384: DEC
14385: ST_TO_ADDR
14386: LD_INT 6
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: LD_INT 10
14394: PUSH
14395: LD_INT 12
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: PUSH
14404: LD_OWVAR 67
14408: ARRAY
14409: PUSH
14410: FOR_TO
14411: IFFALSE 14603
// begin uc_side := 7 ;
14413: LD_ADDR_OWVAR 20
14417: PUSH
14418: LD_INT 7
14420: ST_TO_ADDR
// uc_nation := 1 ;
14421: LD_ADDR_OWVAR 21
14425: PUSH
14426: LD_INT 1
14428: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , [ control_remote , control_computer ] [ rand ( 1 , 2 ) ] , [ us_heavy_gun , us_laser ] [ rand ( 1 , 2 ) ] , 100 ) ;
14429: LD_INT 5
14431: PPUSH
14432: LD_INT 3
14434: PPUSH
14435: LD_INT 2
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 1
14447: PPUSH
14448: LD_INT 2
14450: PPUSH
14451: CALL_OW 12
14455: ARRAY
14456: PPUSH
14457: LD_INT 6
14459: PUSH
14460: LD_INT 9
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 1
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 12
14477: ARRAY
14478: PPUSH
14479: LD_INT 100
14481: PPUSH
14482: CALL 73898 0 5
// un := CreateVehicle ;
14486: LD_ADDR_VAR 0 2
14490: PUSH
14491: CALL_OW 45
14495: ST_TO_ADDR
// SetDir ( un , 4 ) ;
14496: LD_VAR 0 2
14500: PPUSH
14501: LD_INT 4
14503: PPUSH
14504: CALL_OW 233
// PlaceUnitXYR ( un , 307 , 219 , 6 , false ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: LD_INT 307
14515: PPUSH
14516: LD_INT 219
14518: PPUSH
14519: LD_INT 6
14521: PPUSH
14522: LD_INT 0
14524: PPUSH
14525: CALL_OW 50
// if GetControl ( un ) = control_remote then
14529: LD_VAR 0 2
14533: PPUSH
14534: CALL_OW 263
14538: PUSH
14539: LD_INT 2
14541: EQUAL
14542: IFFALSE 14553
// Connect ( un ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: CALL 76998 0 1
// TeleportUnit ( un , 124 , 92 , 12 , true ) ;
14553: LD_VAR 0 2
14557: PPUSH
14558: LD_INT 124
14560: PPUSH
14561: LD_INT 92
14563: PPUSH
14564: LD_INT 12
14566: PPUSH
14567: LD_INT 1
14569: PPUSH
14570: CALL_OW 483
// tmp := Join ( tmp , un ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_VAR 0 2
14588: PPUSH
14589: CALL 106359 0 2
14593: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
14594: LD_INT 10
14596: PPUSH
14597: CALL_OW 67
// end ;
14601: GO 14410
14603: POP
14604: POP
// repeat wait ( 0 0$2 ) ;
14605: LD_INT 70
14607: PPUSH
14608: CALL_OW 67
// e := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) ;
14612: LD_ADDR_VAR 0 4
14616: PUSH
14617: LD_INT 22
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 34
14629: PUSH
14630: LD_INT 8
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PPUSH
14641: CALL_OW 69
14645: ST_TO_ADDR
// if not e then
14646: LD_VAR 0 4
14650: NOT
14651: IFFALSE 14687
// e := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_INT 22
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: ST_TO_ADDR
// for i in tmp do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_VAR 0 3
14696: PUSH
14697: FOR_IN
14698: IFFALSE 14756
// if not IsOK ( i ) then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 302
14709: NOT
14710: IFFALSE 14730
// tmp := tmp diff i else
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_VAR 0 3
14721: PUSH
14722: LD_VAR 0 1
14726: DIFF
14727: ST_TO_ADDR
14728: GO 14754
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
14730: LD_VAR 0 1
14734: PPUSH
14735: LD_VAR 0 4
14739: PPUSH
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 74
14749: PPUSH
14750: CALL_OW 115
14754: GO 14697
14756: POP
14757: POP
// until not tmp ;
14758: LD_VAR 0 3
14762: NOT
14763: IFFALSE 14605
// end ;
14765: PPOPN 4
14767: END
// every 8 8$20 trigger not allianceDestroyed and allianceActive do var i , tmp , target , teleport ;
14768: LD_EXP 23
14772: NOT
14773: PUSH
14774: LD_EXP 31
14778: AND
14779: IFFALSE 15729
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
// begin enable ;
14790: ENABLE
// if not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) then
14791: LD_INT 22
14793: PUSH
14794: LD_INT 7
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 30
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: NOT
14820: IFFALSE 14824
// exit ;
14822: GO 15729
// teleport := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_teleport ] ] ) ;
14824: LD_ADDR_VAR 0 4
14828: PUSH
14829: LD_INT 22
14831: PUSH
14832: LD_INT 7
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 30
14841: PUSH
14842: LD_INT 34
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: ST_TO_ADDR
// if Prob ( 40 ) then
14858: LD_INT 40
14860: PPUSH
14861: CALL_OW 13
14865: IFFALSE 15011
// begin MC_InsertProduceList ( 1 , [ [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ) ;
14867: LD_INT 1
14869: PPUSH
14870: LD_INT 5
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 6
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 5
14890: PUSH
14891: LD_INT 3
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: LD_INT 6
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 5
14908: PUSH
14909: LD_INT 3
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 6
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 5
14926: PUSH
14927: LD_INT 3
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: LD_INT 9
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: LD_INT 45
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 24
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: LD_INT 47
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 24
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: LD_INT 3
14986: PUSH
14987: LD_INT 45
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL 62632 0 2
// end else
15009: GO 15153
// begin MC_InsertProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , ] ) ;
15011: LD_INT 1
15013: PPUSH
15014: LD_INT 24
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: LD_INT 3
15022: PUSH
15023: LD_INT 47
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 24
15034: PUSH
15035: LD_INT 3
15037: PUSH
15038: LD_INT 3
15040: PUSH
15041: LD_INT 47
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 5
15052: PUSH
15053: LD_INT 3
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 5
15070: PUSH
15071: LD_INT 3
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 9
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 5
15088: PUSH
15089: LD_INT 3
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: LD_INT 9
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: LD_INT 3
15112: PUSH
15113: LD_INT 45
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 24
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: LD_INT 45
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: PPUSH
15149: CALL 62632 0 2
// end ; repeat wait ( 0 0$1 ) ;
15153: LD_INT 35
15155: PPUSH
15156: CALL_OW 67
// until MC_GetVehicles ( 1 , true ) >= 7 ;
15160: LD_INT 1
15162: PPUSH
15163: LD_INT 1
15165: PPUSH
15166: CALL 64050 0 2
15170: PUSH
15171: LD_INT 7
15173: GREATEREQUAL
15174: IFFALSE 15153
// wait ( 0 0$10 ) ;
15176: LD_INT 350
15178: PPUSH
15179: CALL_OW 67
// tmp := MC_GetVehicles ( 1 , true ) ;
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL 64050 0 2
15198: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 1 , mc_vehicles [ 1 ] diff tmp ) ;
15199: LD_ADDR_EXP 120
15203: PUSH
15204: LD_EXP 120
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: LD_EXP 120
15216: PUSH
15217: LD_INT 1
15219: ARRAY
15220: PUSH
15221: LD_VAR 0 2
15225: DIFF
15226: PPUSH
15227: CALL_OW 1
15231: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
15232: LD_ADDR_VAR 0 3
15236: PUSH
15237: LD_INT 0
15239: PPUSH
15240: LD_INT 1
15242: PPUSH
15243: CALL_OW 12
15247: ST_TO_ADDR
// if target then
15248: LD_VAR 0 3
15252: IFFALSE 15418
// begin for i in tmp do
15254: LD_ADDR_VAR 0 1
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: FOR_IN
15265: IFFALSE 15290
// TeleportUnit ( i , 179 , 209 , 8 , true ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_INT 179
15274: PPUSH
15275: LD_INT 209
15277: PPUSH
15278: LD_INT 8
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 483
15288: GO 15264
15290: POP
15291: POP
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
15292: LD_ADDR_VAR 0 2
15296: PUSH
15297: LD_VAR 0 2
15301: PPUSH
15302: LD_INT 24
15304: PUSH
15305: LD_INT 250
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 72
15316: ST_TO_ADDR
// for i in tmp do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: LD_VAR 0 2
15326: PUSH
15327: FOR_IN
15328: IFFALSE 15368
// if GetDistUnitXY ( i , 179 , 209 ) > 9 then
15330: LD_VAR 0 1
15334: PPUSH
15335: LD_INT 179
15337: PPUSH
15338: LD_INT 209
15340: PPUSH
15341: CALL_OW 297
15345: PUSH
15346: LD_INT 9
15348: GREATER
15349: IFFALSE 15366
// ComMoveXY ( i , 179 , 209 ) ;
15351: LD_VAR 0 1
15355: PPUSH
15356: LD_INT 179
15358: PPUSH
15359: LD_INT 209
15361: PPUSH
15362: CALL_OW 111
15366: GO 15327
15368: POP
15369: POP
// wait ( 0 0$1 ) ;
15370: LD_INT 35
15372: PPUSH
15373: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 179 , 209 , 9 ] ) >= ( tmp - 1 ) ;
15377: LD_VAR 0 2
15381: PPUSH
15382: LD_INT 92
15384: PUSH
15385: LD_INT 179
15387: PUSH
15388: LD_INT 209
15390: PUSH
15391: LD_INT 9
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 72
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: LD_INT 1
15412: MINUS
15413: GREATEREQUAL
15414: IFFALSE 15292
// end else
15416: GO 15580
// begin for i in tmp do
15418: LD_ADDR_VAR 0 1
15422: PUSH
15423: LD_VAR 0 2
15427: PUSH
15428: FOR_IN
15429: IFFALSE 15454
// TeleportUnit ( i , 285 , 163 , 8 , true ) ;
15431: LD_VAR 0 1
15435: PPUSH
15436: LD_INT 285
15438: PPUSH
15439: LD_INT 163
15441: PPUSH
15442: LD_INT 8
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 483
15452: GO 15428
15454: POP
15455: POP
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
15456: LD_ADDR_VAR 0 2
15460: PUSH
15461: LD_VAR 0 2
15465: PPUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 250
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 72
15480: ST_TO_ADDR
// for i in tmp do
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: LD_VAR 0 2
15490: PUSH
15491: FOR_IN
15492: IFFALSE 15532
// if GetDistUnitXY ( i , 285 , 163 ) > 9 then
15494: LD_VAR 0 1
15498: PPUSH
15499: LD_INT 285
15501: PPUSH
15502: LD_INT 163
15504: PPUSH
15505: CALL_OW 297
15509: PUSH
15510: LD_INT 9
15512: GREATER
15513: IFFALSE 15530
// ComMoveXY ( i , 285 , 163 ) ;
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_INT 285
15522: PPUSH
15523: LD_INT 163
15525: PPUSH
15526: CALL_OW 111
15530: GO 15491
15532: POP
15533: POP
// wait ( 0 0$1 ) ;
15534: LD_INT 35
15536: PPUSH
15537: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 285 , 163 , 9 ] ) >= ( tmp - 1 ) ;
15541: LD_VAR 0 2
15545: PPUSH
15546: LD_INT 92
15548: PUSH
15549: LD_INT 285
15551: PUSH
15552: LD_INT 163
15554: PUSH
15555: LD_INT 9
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 72
15568: PUSH
15569: LD_VAR 0 2
15573: PUSH
15574: LD_INT 1
15576: MINUS
15577: GREATEREQUAL
15578: IFFALSE 15456
// end ; repeat wait ( 0 0$1 ) ;
15580: LD_INT 35
15582: PPUSH
15583: CALL_OW 67
// for i in tmp do
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_VAR 0 2
15596: PUSH
15597: FOR_IN
15598: IFFALSE 15720
// if GetLives ( i ) > 251 then
15600: LD_VAR 0 1
15604: PPUSH
15605: CALL_OW 256
15609: PUSH
15610: LD_INT 251
15612: GREATER
15613: IFFALSE 15702
// begin if GetWeapon ( i ) = ru_time_lapser then
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 264
15624: PUSH
15625: LD_INT 49
15627: EQUAL
15628: IFFALSE 15666
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) else
15630: LD_VAR 0 1
15634: PPUSH
15635: LD_INT 81
15637: PUSH
15638: LD_INT 7
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: PPUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 74
15659: PPUSH
15660: CALL_OW 112
15664: GO 15700
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) ;
15666: LD_VAR 0 1
15670: PPUSH
15671: LD_INT 81
15673: PUSH
15674: LD_INT 7
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: PPUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 74
15695: PPUSH
15696: CALL_OW 115
// end else
15700: GO 15718
// tmp := tmp diff i ;
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_VAR 0 2
15711: PUSH
15712: LD_VAR 0 1
15716: DIFF
15717: ST_TO_ADDR
15718: GO 15597
15720: POP
15721: POP
// until not tmp ;
15722: LD_VAR 0 2
15726: NOT
15727: IFFALSE 15580
// end ;
15729: PPOPN 4
15731: END
// every 1 1$30 trigger allianceActive and IsOk ( Roth ) and Difficulty > 2 do
15732: LD_EXP 31
15736: PUSH
15737: LD_EXP 78
15741: PPUSH
15742: CALL_OW 302
15746: AND
15747: PUSH
15748: LD_OWVAR 67
15752: PUSH
15753: LD_INT 2
15755: GREATER
15756: AND
15757: IFFALSE 15857
15759: GO 15761
15761: DISABLE
// begin enable ;
15762: ENABLE
// if GetDistUnitXY ( Roth , 245 , 234 ) > 6 then
15763: LD_EXP 78
15767: PPUSH
15768: LD_INT 245
15770: PPUSH
15771: LD_INT 234
15773: PPUSH
15774: CALL_OW 297
15778: PUSH
15779: LD_INT 6
15781: GREATER
15782: IFFALSE 15801
// ComMoveXY ( Roth , 245 , 234 ) else
15784: LD_EXP 78
15788: PPUSH
15789: LD_INT 245
15791: PPUSH
15792: LD_INT 234
15794: PPUSH
15795: CALL_OW 111
15799: GO 15857
// ComMoveHex ( Roth , [ [ 259 , 235 ] , [ 252 , 209 ] , [ 275 , 235 ] ] [ rand ( 1 , 3 ) ] ) ;
15801: LD_EXP 78
15805: PPUSH
15806: LD_INT 259
15808: PUSH
15809: LD_INT 235
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 252
15818: PUSH
15819: LD_INT 209
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 275
15828: PUSH
15829: LD_INT 235
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 1
15843: PPUSH
15844: LD_INT 3
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: PPUSH
15853: CALL 110361 0 2
// end ; end_of_file
15857: END
// export Omar , Heike , Khatam ; export function PrepareOmarInvasion ; var i , veh , un ; begin
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
15862: PPUSH
15863: PPUSH
// missionStage := 13 ;
15864: LD_ADDR_EXP 15
15868: PUSH
15869: LD_INT 13
15871: ST_TO_ADDR
// uc_side := 2 ;
15872: LD_ADDR_OWVAR 20
15876: PUSH
15877: LD_INT 2
15879: ST_TO_ADDR
// uc_nation := 2 ;
15880: LD_ADDR_OWVAR 21
15884: PUSH
15885: LD_INT 2
15887: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
15888: LD_ADDR_EXP 96
15892: PUSH
15893: LD_STRING Omar
15895: PPUSH
15896: CALL_OW 25
15900: ST_TO_ADDR
// SetDir ( Omar , 4 ) ;
15901: LD_EXP 96
15905: PPUSH
15906: LD_INT 4
15908: PPUSH
15909: CALL_OW 233
// PlaceUnitXY ( Omar , 242 , 75 , false ) ;
15913: LD_EXP 96
15917: PPUSH
15918: LD_INT 242
15920: PPUSH
15921: LD_INT 75
15923: PPUSH
15924: LD_INT 0
15926: PPUSH
15927: CALL_OW 48
// Heike := NewCharacter ( Heike ) ;
15931: LD_ADDR_EXP 97
15935: PUSH
15936: LD_STRING Heike
15938: PPUSH
15939: CALL_OW 25
15943: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
15944: LD_INT 14
15946: PPUSH
15947: LD_INT 3
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: LD_INT 27
15955: PPUSH
15956: LD_INT 100
15958: PPUSH
15959: CALL 73898 0 5
// veh := CreateVehicle ;
15963: LD_ADDR_VAR 0 3
15967: PUSH
15968: CALL_OW 45
15972: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 2
15980: NEG
15981: PPUSH
15982: CALL_OW 242
// SetDir ( veh , 4 ) ;
15986: LD_VAR 0 3
15990: PPUSH
15991: LD_INT 4
15993: PPUSH
15994: CALL_OW 233
// PlaceUnitXY ( veh , 241 , 72 , false ) ;
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 241
16005: PPUSH
16006: LD_INT 72
16008: PPUSH
16009: LD_INT 0
16011: PPUSH
16012: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
16016: LD_EXP 97
16020: PPUSH
16021: LD_VAR 0 3
16025: PPUSH
16026: CALL_OW 52
// if KhatamStatus then
16030: LD_EXP 8
16034: IFFALSE 16097
// begin Khatam := NewCharacter ( Khatam ) ;
16036: LD_ADDR_EXP 98
16040: PUSH
16041: LD_STRING Khatam
16043: PPUSH
16044: CALL_OW 25
16048: ST_TO_ADDR
// PlaceUnitXYR ( Khatam , 245 , 78 , 3 , false ) ;
16049: LD_EXP 98
16053: PPUSH
16054: LD_INT 245
16056: PPUSH
16057: LD_INT 78
16059: PPUSH
16060: LD_INT 3
16062: PPUSH
16063: LD_INT 0
16065: PPUSH
16066: CALL_OW 50
// SetSkill ( Khatam , 4 , 10 ) ;
16070: LD_EXP 98
16074: PPUSH
16075: LD_INT 4
16077: PPUSH
16078: LD_INT 10
16080: PPUSH
16081: CALL_OW 237
// SetClass ( Khatam , class_scientistic ) ;
16085: LD_EXP 98
16089: PPUSH
16090: LD_INT 4
16092: PPUSH
16093: CALL_OW 336
// end ; for i = 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
16097: LD_ADDR_VAR 0 2
16101: PUSH
16102: DOUBLE
16103: LD_INT 1
16105: DEC
16106: ST_TO_ADDR
16107: LD_INT 2
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 3
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: LD_OWVAR 67
16129: ARRAY
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16198
// begin PrepareScientist ( false , 6 + Difficulty ) ;
16134: LD_INT 0
16136: PPUSH
16137: LD_INT 6
16139: PUSH
16140: LD_OWVAR 67
16144: PLUS
16145: PPUSH
16146: CALL_OW 384
// un := CreateHuman ;
16150: LD_ADDR_VAR 0 4
16154: PUSH
16155: CALL_OW 44
16159: ST_TO_ADDR
// PlaceUnitArea ( un , [ arabianAttackArea , arabianAttackArea2 ] [ i mod 2 + 1 ] , false ) ;
16160: LD_VAR 0 4
16164: PPUSH
16165: LD_INT 28
16167: PUSH
16168: LD_INT 29
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_VAR 0 2
16179: PUSH
16180: LD_INT 2
16182: MOD
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: ARRAY
16188: PPUSH
16189: LD_INT 0
16191: PPUSH
16192: CALL_OW 49
// end ;
16196: GO 16131
16198: POP
16199: POP
// for i = 1 to 6 do
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: DOUBLE
16206: LD_INT 1
16208: DEC
16209: ST_TO_ADDR
16210: LD_INT 6
16212: PUSH
16213: FOR_TO
16214: IFFALSE 16259
// begin PrepareSoldier ( false , 6 + Difficulty ) ;
16216: LD_INT 0
16218: PPUSH
16219: LD_INT 6
16221: PUSH
16222: LD_OWVAR 67
16226: PLUS
16227: PPUSH
16228: CALL_OW 381
// un := CreateHuman ;
16232: LD_ADDR_VAR 0 4
16236: PUSH
16237: CALL_OW 44
16241: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea3 , false ) ;
16242: LD_VAR 0 4
16246: PPUSH
16247: LD_INT 32
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 49
// end ;
16257: GO 16213
16259: POP
16260: POP
// for i = 1 to 3 do
16261: LD_ADDR_VAR 0 2
16265: PUSH
16266: DOUBLE
16267: LD_INT 1
16269: DEC
16270: ST_TO_ADDR
16271: LD_INT 3
16273: PUSH
16274: FOR_TO
16275: IFFALSE 16323
// begin PrepareHuman ( false , class_mortar , 6 + Difficulty ) ;
16277: LD_INT 0
16279: PPUSH
16280: LD_INT 8
16282: PPUSH
16283: LD_INT 6
16285: PUSH
16286: LD_OWVAR 67
16290: PLUS
16291: PPUSH
16292: CALL_OW 380
// un := CreateHuman ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: CALL_OW 44
16305: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea3 , false ) ;
16306: LD_VAR 0 4
16310: PPUSH
16311: LD_INT 32
16313: PPUSH
16314: LD_INT 0
16316: PPUSH
16317: CALL_OW 49
// end ;
16321: GO 16274
16323: POP
16324: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: DOUBLE
16331: LD_INT 1
16333: DEC
16334: ST_TO_ADDR
16335: LD_INT 2
16337: PUSH
16338: LD_INT 3
16340: PUSH
16341: LD_INT 4
16343: PUSH
16344: LD_INT 4
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: PUSH
16353: LD_OWVAR 67
16357: ARRAY
16358: PUSH
16359: FOR_TO
16360: IFFALSE 16450
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_rocket_launcher , 80 ) ;
16362: LD_INT 14
16364: PPUSH
16365: LD_INT 2
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: LD_INT 28
16373: PPUSH
16374: LD_INT 80
16376: PPUSH
16377: CALL 73898 0 5
// veh := CreateVehicle ;
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: CALL_OW 45
16390: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 3
16398: PPUSH
16399: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea2 , false ) ;
16403: LD_VAR 0 3
16407: PPUSH
16408: LD_INT 29
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 49
// PrepareMechanic ( false , 6 + Difficulty ) ;
16418: LD_INT 0
16420: PPUSH
16421: LD_INT 6
16423: PUSH
16424: LD_OWVAR 67
16428: PLUS
16429: PPUSH
16430: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16434: CALL_OW 44
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: CALL_OW 52
// end ;
16448: GO 16359
16450: POP
16451: POP
// for i = 1 to 5 + Difficulty do
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: DOUBLE
16458: LD_INT 1
16460: DEC
16461: ST_TO_ADDR
16462: LD_INT 5
16464: PUSH
16465: LD_OWVAR 67
16469: PLUS
16470: PUSH
16471: FOR_TO
16472: IFFALSE 16599
// begin PrepareVehicle ( ar_half_tracked , rand ( 1 , 3 ) , control_manual , [ ar_rocket_launcher , ar_flame_thrower , ar_gun , ar_gatling_gun ] [ i mod 4 + 1 ] , 80 ) ;
16474: LD_INT 14
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: LD_INT 3
16482: PPUSH
16483: CALL_OW 12
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: LD_INT 28
16493: PUSH
16494: LD_INT 26
16496: PUSH
16497: LD_INT 27
16499: PUSH
16500: LD_INT 25
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: PUSH
16509: LD_VAR 0 2
16513: PUSH
16514: LD_INT 4
16516: MOD
16517: PUSH
16518: LD_INT 1
16520: PLUS
16521: ARRAY
16522: PPUSH
16523: LD_INT 80
16525: PPUSH
16526: CALL 73898 0 5
// veh := CreateVehicle ;
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: CALL_OW 45
16539: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16540: LD_VAR 0 3
16544: PPUSH
16545: LD_INT 4
16547: PPUSH
16548: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 28
16559: PPUSH
16560: LD_INT 0
16562: PPUSH
16563: CALL_OW 49
// PrepareMechanic ( false , 6 + Difficulty ) ;
16567: LD_INT 0
16569: PPUSH
16570: LD_INT 6
16572: PUSH
16573: LD_OWVAR 67
16577: PLUS
16578: PPUSH
16579: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16583: CALL_OW 44
16587: PPUSH
16588: LD_VAR 0 3
16592: PPUSH
16593: CALL_OW 52
// end ;
16597: GO 16471
16599: POP
16600: POP
// for i = 1 to Difficulty do
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_OWVAR 67
16615: PUSH
16616: FOR_TO
16617: IFFALSE 16677
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_selfpropelled_bomb , 80 ) ;
16619: LD_INT 14
16621: PPUSH
16622: LD_INT 3
16624: PPUSH
16625: LD_INT 5
16627: PPUSH
16628: LD_INT 29
16630: PPUSH
16631: LD_INT 80
16633: PPUSH
16634: CALL 73898 0 5
// veh := CreateVehicle ;
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: CALL_OW 45
16647: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_INT 4
16655: PPUSH
16656: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
16660: LD_VAR 0 3
16664: PPUSH
16665: LD_INT 28
16667: PPUSH
16668: LD_INT 0
16670: PPUSH
16671: CALL_OW 49
// end ;
16675: GO 16616
16677: POP
16678: POP
// end ;
16679: LD_VAR 0 1
16683: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , tmp , sci , enemy ;
16684: LD_INT 22
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: IFFALSE 17077
16700: GO 16702
16702: DISABLE
16703: LD_INT 0
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
// begin sci := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff Khatam ;
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 22
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 4
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: PUSH
16743: LD_EXP 98
16747: DIFF
16748: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 2 ] ) diff ( Khatam union sci ) ;
16749: LD_ADDR_VAR 0 2
16753: PUSH
16754: LD_INT 22
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PPUSH
16764: CALL_OW 69
16768: PUSH
16769: LD_EXP 98
16773: PUSH
16774: LD_VAR 0 3
16778: UNION
16779: DIFF
16780: ST_TO_ADDR
// if Khatam then
16781: LD_EXP 98
16785: IFFALSE 16802
// ComMoveXY ( Khatam , 211 , 92 ) ;
16787: LD_EXP 98
16791: PPUSH
16792: LD_INT 211
16794: PPUSH
16795: LD_INT 92
16797: PPUSH
16798: CALL_OW 111
// SetResourceVisibility ( 197 , 80 , 2 ) ;
16802: LD_INT 197
16804: PPUSH
16805: LD_INT 80
16807: PPUSH
16808: LD_INT 2
16810: PPUSH
16811: CALL_OW 441
// SetResourceVisibility ( 213 , 90 , 2 ) ;
16815: LD_INT 213
16817: PPUSH
16818: LD_INT 90
16820: PPUSH
16821: LD_INT 2
16823: PPUSH
16824: CALL_OW 441
// SetResourceVisibility ( 215 , 129 , 2 ) ;
16828: LD_INT 215
16830: PPUSH
16831: LD_INT 129
16833: PPUSH
16834: LD_INT 2
16836: PPUSH
16837: CALL_OW 441
// if sci then
16841: LD_VAR 0 3
16845: IFFALSE 16866
// ComContaminate ( sci [ 1 ] , 197 , 80 ) ;
16847: LD_VAR 0 3
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PPUSH
16856: LD_INT 197
16858: PPUSH
16859: LD_INT 80
16861: PPUSH
16862: CALL_OW 158
// if sci > 1 then
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 1
16873: GREATER
16874: IFFALSE 16895
// ComContaminate ( sci [ 2 ] , 213 , 90 ) ;
16876: LD_VAR 0 3
16880: PUSH
16881: LD_INT 2
16883: ARRAY
16884: PPUSH
16885: LD_INT 213
16887: PPUSH
16888: LD_INT 90
16890: PPUSH
16891: CALL_OW 158
// if sci > 2 then
16895: LD_VAR 0 3
16899: PUSH
16900: LD_INT 2
16902: GREATER
16903: IFFALSE 16924
// ComContaminate ( sci [ 3 ] , 215 , 129 ) ;
16905: LD_VAR 0 3
16909: PUSH
16910: LD_INT 3
16912: ARRAY
16913: PPUSH
16914: LD_INT 215
16916: PPUSH
16917: LD_INT 129
16919: PPUSH
16920: CALL_OW 158
// ComAgressiveMove ( tmp , 195 , 102 ) ;
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_INT 195
16931: PPUSH
16932: LD_INT 102
16934: PPUSH
16935: CALL_OW 114
// wait ( 0 0$5 ) ;
16939: LD_INT 175
16941: PPUSH
16942: CALL_OW 67
// repeat wait ( 0 0$2 ) ;
16946: LD_INT 70
16948: PPUSH
16949: CALL_OW 67
// enemy := FilterAllUnits ( [ [ f_distxy , 195 , 102 , 36 ] , [ f_side , 1 ] ] ) ;
16953: LD_ADDR_VAR 0 4
16957: PUSH
16958: LD_INT 92
16960: PUSH
16961: LD_INT 195
16963: PUSH
16964: LD_INT 102
16966: PUSH
16967: LD_INT 36
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: ST_TO_ADDR
// for i in tmp do
16995: LD_ADDR_VAR 0 1
16999: PUSH
17000: LD_VAR 0 2
17004: PUSH
17005: FOR_IN
17006: IFFALSE 17057
// if enemy then
17008: LD_VAR 0 4
17012: IFFALSE 17040
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_VAR 0 4
17023: PPUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 74
17033: PPUSH
17034: CALL_OW 115
17038: GO 17055
// ComAgressiveMove ( i , 195 , 102 ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_INT 195
17047: PPUSH
17048: LD_INT 102
17050: PPUSH
17051: CALL_OW 114
17055: GO 17005
17057: POP
17058: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
17059: LD_VAR 0 2
17063: PPUSH
17064: LD_INT 50
17066: PUSH
17067: EMPTY
17068: LIST
17069: PPUSH
17070: CALL_OW 72
17074: NOT
17075: IFFALSE 16946
// end ; end_of_file
17077: PPOPN 4
17079: END
// export function Action ; var i , t , cargo , tmp , options , dec , amount , macmilan_squad ; begin
17080: LD_INT 0
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
// Video ( true ) ;
17091: LD_INT 1
17093: PPUSH
17094: CALL 106331 0 1
// tmp := AreaToList ( macmilanCameraArea , 0 ) ;
17098: LD_ADDR_VAR 0 5
17102: PUSH
17103: LD_INT 7
17105: PPUSH
17106: LD_INT 0
17108: PPUSH
17109: CALL_OW 517
17113: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
17114: LD_ADDR_VAR 0 2
17118: PUSH
17119: DOUBLE
17120: LD_INT 1
17122: DEC
17123: ST_TO_ADDR
17124: LD_VAR 0 5
17128: PUSH
17129: LD_INT 1
17131: ARRAY
17132: PUSH
17133: FOR_TO
17134: IFFALSE 17179
// RevealMapOnXY ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 1 , - 15 ) ;
17136: LD_VAR 0 5
17140: PUSH
17141: LD_INT 1
17143: ARRAY
17144: PUSH
17145: LD_VAR 0 2
17149: ARRAY
17150: PPUSH
17151: LD_VAR 0 5
17155: PUSH
17156: LD_INT 2
17158: ARRAY
17159: PUSH
17160: LD_VAR 0 2
17164: ARRAY
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: LD_INT 15
17171: NEG
17172: PPUSH
17173: CALL 106245 0 4
17177: GO 17133
17179: POP
17180: POP
// CenterNowOnUnits ( Powell ) ;
17181: LD_EXP 60
17185: PPUSH
17186: CALL_OW 87
// tmp := [ JMMNewVeh ] ;
17190: LD_ADDR_VAR 0 5
17194: PUSH
17195: LD_EXP 58
17199: PUSH
17200: EMPTY
17201: LIST
17202: ST_TO_ADDR
// if GirlNewVeh then
17203: LD_EXP 59
17207: IFFALSE 17225
// tmp := tmp ^ GirlNewVeh ;
17209: LD_ADDR_VAR 0 5
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: LD_EXP 59
17223: ADD
17224: ST_TO_ADDR
// ComMoveXY ( tmp , 60 , 109 ) ;
17225: LD_VAR 0 5
17229: PPUSH
17230: LD_INT 60
17232: PPUSH
17233: LD_INT 109
17235: PPUSH
17236: CALL_OW 111
// if KappaStatus then
17240: LD_EXP 2
17244: IFFALSE 17296
// begin Say ( JMM , D1nT-JMM-1 ) ;
17246: LD_EXP 40
17250: PPUSH
17251: LD_STRING D1nT-JMM-1
17253: PPUSH
17254: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
17258: LD_EXP 60
17262: PPUSH
17263: LD_STRING D1T-Pow-1
17265: PPUSH
17266: CALL_OW 88
// Say ( JMM , D1T-JMM-2 ) ;
17270: LD_EXP 40
17274: PPUSH
17275: LD_STRING D1T-JMM-2
17277: PPUSH
17278: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
17282: LD_EXP 60
17286: PPUSH
17287: LD_STRING D1T-Pow-2
17289: PPUSH
17290: CALL_OW 88
// end else
17294: GO 17502
// if JMMGirlStatus then
17296: LD_EXP 6
17300: IFFALSE 17445
// begin Say ( JMM , D1T-JMM-1 ) ;
17302: LD_EXP 40
17306: PPUSH
17307: LD_STRING D1T-JMM-1
17309: PPUSH
17310: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
17314: LD_EXP 60
17318: PPUSH
17319: LD_STRING D1T-Pow-1
17321: PPUSH
17322: CALL_OW 88
// Say ( JMM , D1T-JMM-3 ) ;
17326: LD_EXP 40
17330: PPUSH
17331: LD_STRING D1T-JMM-3
17333: PPUSH
17334: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
17338: LD_EXP 60
17342: PPUSH
17343: LD_STRING D1T-Pow-3
17345: PPUSH
17346: CALL_OW 88
// if JMMGirl then
17350: LD_EXP 7
17354: IFFALSE 17443
// begin case JMMGirl of 1 :
17356: LD_EXP 7
17360: PUSH
17361: LD_INT 1
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17384
17369: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
17370: LD_EXP 41
17374: PPUSH
17375: LD_STRING D1T-Joan-3
17377: PPUSH
17378: CALL_OW 88
17382: GO 17431
17384: LD_INT 2
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17407
17392: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
17393: LD_EXP 43
17397: PPUSH
17398: LD_STRING D1T-Lisa-3
17400: PPUSH
17401: CALL_OW 88
17405: GO 17431
17407: LD_INT 3
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17430
17415: POP
// Say ( Connie , D1T-Con-3 ) ; end ;
17416: LD_EXP 55
17420: PPUSH
17421: LD_STRING D1T-Con-3
17423: PPUSH
17424: CALL_OW 88
17428: GO 17431
17430: POP
// Say ( Powell , D1T-Pow-4 ) ;
17431: LD_EXP 60
17435: PPUSH
17436: LD_STRING D1T-Pow-4
17438: PPUSH
17439: CALL_OW 88
// end ; end else
17443: GO 17502
// if not FastEnd then
17445: LD_EXP 11
17449: NOT
17450: IFFALSE 17478
// begin Say ( JMM , D1T-JMM-4 ) ;
17452: LD_EXP 40
17456: PPUSH
17457: LD_STRING D1T-JMM-4
17459: PPUSH
17460: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
17464: LD_EXP 60
17468: PPUSH
17469: LD_STRING D1T-Pow-5
17471: PPUSH
17472: CALL_OW 88
// end else
17476: GO 17502
// begin Say ( JMM , D1nT-JMM-1 ) ;
17478: LD_EXP 40
17482: PPUSH
17483: LD_STRING D1nT-JMM-1
17485: PPUSH
17486: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
17490: LD_EXP 60
17494: PPUSH
17495: LD_STRING D1nT-Pow-1
17497: PPUSH
17498: CALL_OW 88
// end ; repeat wait ( 3 ) ;
17502: LD_INT 3
17504: PPUSH
17505: CALL_OW 67
// until not HasTask ( JMMNewVeh ) ;
17509: LD_EXP 58
17513: PPUSH
17514: CALL_OW 314
17518: NOT
17519: IFFALSE 17502
// ComExitVehicle ( JMM ) ;
17521: LD_EXP 40
17525: PPUSH
17526: CALL_OW 121
// repeat wait ( 3 ) ;
17530: LD_INT 3
17532: PPUSH
17533: CALL_OW 67
// until not IsInUnit ( JMM ) ;
17537: LD_EXP 40
17541: PPUSH
17542: CALL_OW 310
17546: NOT
17547: IFFALSE 17530
// ComMoveXY ( JMM , 60 , 94 ) ;
17549: LD_EXP 40
17553: PPUSH
17554: LD_INT 60
17556: PPUSH
17557: LD_INT 94
17559: PPUSH
17560: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
17564: LD_EXP 40
17568: PPUSH
17569: LD_EXP 60
17573: PPUSH
17574: CALL_OW 179
// if Joan then
17578: LD_EXP 41
17582: IFFALSE 17636
// begin ComExitVehicle ( Joan ) ;
17584: LD_EXP 41
17588: PPUSH
17589: CALL_OW 121
// AddComWait ( Joan , 0 0$1 ) ;
17593: LD_EXP 41
17597: PPUSH
17598: LD_INT 35
17600: PPUSH
17601: CALL_OW 202
// AddComMoveXY ( Joan , 65 , 104 ) ;
17605: LD_EXP 41
17609: PPUSH
17610: LD_INT 65
17612: PPUSH
17613: LD_INT 104
17615: PPUSH
17616: CALL_OW 171
// AddComTurnUnit ( Joan , JMM ) ;
17620: LD_EXP 41
17624: PPUSH
17625: LD_EXP 40
17629: PPUSH
17630: CALL_OW 179
// end else
17634: GO 17770
// if Lisa and JMMGirl = 2 then
17636: LD_EXP 43
17640: PUSH
17641: LD_EXP 7
17645: PUSH
17646: LD_INT 2
17648: EQUAL
17649: AND
17650: IFFALSE 17704
// begin ComExitVehicle ( Lisa ) ;
17652: LD_EXP 43
17656: PPUSH
17657: CALL_OW 121
// AddComWait ( Lisa , 0 0$1 ) ;
17661: LD_EXP 43
17665: PPUSH
17666: LD_INT 35
17668: PPUSH
17669: CALL_OW 202
// AddComMoveXY ( Lisa , 65 , 104 ) ;
17673: LD_EXP 43
17677: PPUSH
17678: LD_INT 65
17680: PPUSH
17681: LD_INT 104
17683: PPUSH
17684: CALL_OW 171
// AddComTurnUnit ( Lisa , JMM ) ;
17688: LD_EXP 43
17692: PPUSH
17693: LD_EXP 40
17697: PPUSH
17698: CALL_OW 179
// end else
17702: GO 17770
// if Connie and JMMGirl = 3 then
17704: LD_EXP 55
17708: PUSH
17709: LD_EXP 7
17713: PUSH
17714: LD_INT 3
17716: EQUAL
17717: AND
17718: IFFALSE 17770
// begin ComExitVehicle ( Connie ) ;
17720: LD_EXP 55
17724: PPUSH
17725: CALL_OW 121
// AddComWait ( Connie , 0 0$1 ) ;
17729: LD_EXP 55
17733: PPUSH
17734: LD_INT 35
17736: PPUSH
17737: CALL_OW 202
// AddComMoveXY ( Connie , 65 , 104 ) ;
17741: LD_EXP 55
17745: PPUSH
17746: LD_INT 65
17748: PPUSH
17749: LD_INT 104
17751: PPUSH
17752: CALL_OW 171
// AddComTurnUnit ( Connie , JMM ) ;
17756: LD_EXP 55
17760: PPUSH
17761: LD_EXP 40
17765: PPUSH
17766: CALL_OW 179
// end ; repeat wait ( 0 0$1 ) ;
17770: LD_INT 35
17772: PPUSH
17773: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) < 8 ;
17777: LD_EXP 40
17781: PPUSH
17782: LD_EXP 60
17786: PPUSH
17787: CALL_OW 296
17791: PUSH
17792: LD_INT 8
17794: LESS
17795: IFFALSE 17770
// wait ( 0 0$0.5 ) ;
17797: LD_INT 18
17799: PPUSH
17800: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
17804: LD_EXP 40
17808: PPUSH
17809: LD_STRING D1-JMM-1
17811: PPUSH
17812: CALL_OW 88
// async ;
17816: ASYNC
// Say ( Powell , D1-Pow-1 ) ;
17817: LD_EXP 60
17821: PPUSH
17822: LD_STRING D1-Pow-1
17824: PPUSH
17825: CALL_OW 88
// if not dialogue_skipped then
17829: LD_OWVAR 59
17833: NOT
17834: IFFALSE 17843
// wait ( 0 0$2 ) ;
17836: LD_INT 70
17838: PPUSH
17839: CALL_OW 67
// RevealMapOnXY ( 170 , 99 , 1 , - 6 ) ;
17843: LD_INT 170
17845: PPUSH
17846: LD_INT 99
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_INT 6
17854: NEG
17855: PPUSH
17856: CALL 106245 0 4
// RevealMapOnXY ( 174 , 115 , 1 , - 6 ) ;
17860: LD_INT 174
17862: PPUSH
17863: LD_INT 115
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_INT 6
17871: NEG
17872: PPUSH
17873: CALL 106245 0 4
// RevealMapOnXY ( 169 , 71 , 1 , - 6 ) ;
17877: LD_INT 169
17879: PPUSH
17880: LD_INT 71
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: LD_INT 6
17888: NEG
17889: PPUSH
17890: CALL 106245 0 4
// if not dialogue_skipped then
17894: LD_OWVAR 59
17898: NOT
17899: IFFALSE 17918
// begin CenterOnXY ( 170 , 99 ) ;
17901: LD_INT 170
17903: PPUSH
17904: LD_INT 99
17906: PPUSH
17907: CALL_OW 84
// wait ( 0 0$2.3 ) ;
17911: LD_INT 80
17913: PPUSH
17914: CALL_OW 67
// end ; RevealMapOnXY ( 75 , 53 , 1 , - 9 ) ;
17918: LD_INT 75
17920: PPUSH
17921: LD_INT 53
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 9
17929: NEG
17930: PPUSH
17931: CALL 106245 0 4
// RevealMapOnXY ( 54 , 42 , 1 , - 9 ) ;
17935: LD_INT 54
17937: PPUSH
17938: LD_INT 42
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: LD_INT 9
17946: NEG
17947: PPUSH
17948: CALL 106245 0 4
// RevealMapOnXY ( 62 , 51 , 1 , - 9 ) ;
17952: LD_INT 62
17954: PPUSH
17955: LD_INT 51
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: LD_INT 9
17963: NEG
17964: PPUSH
17965: CALL 106245 0 4
// if not dialogue_skipped then
17969: LD_OWVAR 59
17973: NOT
17974: IFFALSE 17993
// begin CenterOnXY ( 75 , 53 ) ;
17976: LD_INT 75
17978: PPUSH
17979: LD_INT 53
17981: PPUSH
17982: CALL_OW 84
// wait ( 0 0$4 ) ;
17986: LD_INT 140
17988: PPUSH
17989: CALL_OW 67
// end ; CenterNowOnUnits ( Powell ) ;
17993: LD_EXP 60
17997: PPUSH
17998: CALL_OW 87
// if not dialogue_skipped then
18002: LD_OWVAR 59
18006: NOT
18007: IFFALSE 18016
// wait ( 0 0$2 ) ;
18009: LD_INT 70
18011: PPUSH
18012: CALL_OW 67
// sync ;
18016: SYNC
// Say ( JMM , D1-JMM-2 ) ;
18017: LD_EXP 40
18021: PPUSH
18022: LD_STRING D1-JMM-2
18024: PPUSH
18025: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
18029: LD_EXP 60
18033: PPUSH
18034: LD_STRING D1-Pow-2
18036: PPUSH
18037: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
18041: LD_EXP 40
18045: PPUSH
18046: LD_STRING D1-JMM-3
18048: PPUSH
18049: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
18053: LD_EXP 60
18057: PPUSH
18058: LD_STRING D1-Pow-3
18060: PPUSH
18061: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
18065: LD_EXP 40
18069: PPUSH
18070: LD_STRING D1-JMM-4
18072: PPUSH
18073: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
18077: LD_EXP 60
18081: PPUSH
18082: LD_STRING D1-Pow-4
18084: PPUSH
18085: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
18089: LD_EXP 40
18093: PPUSH
18094: LD_STRING D1-JMM-5
18096: PPUSH
18097: CALL_OW 88
// async ;
18101: ASYNC
// Say ( Powell , D1-Pow-5 ) ;
18102: LD_EXP 60
18106: PPUSH
18107: LD_STRING D1-Pow-5
18109: PPUSH
18110: CALL_OW 88
// if not dialogue_skipped then
18114: LD_OWVAR 59
18118: NOT
18119: IFFALSE 18128
// wait ( 0 0$3.6 ) ;
18121: LD_INT 126
18123: PPUSH
18124: CALL_OW 67
// RevealMapOnXY ( 134 , 210 , 1 , - 11 ) ;
18128: LD_INT 134
18130: PPUSH
18131: LD_INT 210
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: LD_INT 11
18139: NEG
18140: PPUSH
18141: CALL 106245 0 4
// if not dialogue_skipped then
18145: LD_OWVAR 59
18149: NOT
18150: IFFALSE 18169
// begin CenterOnXY ( 134 , 210 ) ;
18152: LD_INT 134
18154: PPUSH
18155: LD_INT 210
18157: PPUSH
18158: CALL_OW 84
// wait ( 0 0$2 ) ;
18162: LD_INT 70
18164: PPUSH
18165: CALL_OW 67
// end ; RevealMapOnXY ( 101 , 159 , 1 , - 10 ) ;
18169: LD_INT 101
18171: PPUSH
18172: LD_INT 159
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 10
18180: NEG
18181: PPUSH
18182: CALL 106245 0 4
// if not dialogue_skipped then
18186: LD_OWVAR 59
18190: NOT
18191: IFFALSE 18210
// begin CenterOnXY ( 101 , 159 ) ;
18193: LD_INT 101
18195: PPUSH
18196: LD_INT 159
18198: PPUSH
18199: CALL_OW 84
// wait ( 0 0$2 ) ;
18203: LD_INT 70
18205: PPUSH
18206: CALL_OW 67
// end ; sync ;
18210: SYNC
// CenterNowOnUnits ( Powell ) ;
18211: LD_EXP 60
18215: PPUSH
18216: CALL_OW 87
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
18220: LD_ADDR_VAR 0 6
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: LD_INT 2
18230: PUSH
18231: LD_INT 3
18233: PUSH
18234: LD_INT 4
18236: PUSH
18237: LD_INT 5
18239: PUSH
18240: LD_INT 6
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: ST_TO_ADDR
// if not dialogue_skipped then
18251: LD_OWVAR 59
18255: NOT
18256: IFFALSE 18425
// begin game_speed := 4 ;
18258: LD_ADDR_OWVAR 65
18262: PUSH
18263: LD_INT 4
18265: ST_TO_ADDR
// wait ( 0 0$6 ) ;
18266: LD_INT 210
18268: PPUSH
18269: CALL_OW 67
// dec := SelectiveQuery ( Q1 , options ) ;
18273: LD_ADDR_VAR 0 7
18277: PUSH
18278: LD_STRING Q1
18280: PPUSH
18281: LD_VAR 0 6
18285: PPUSH
18286: CALL_OW 98
18290: ST_TO_ADDR
// repeat dec := SelectiveQuery ( Q1 , options ) ;
18291: LD_ADDR_VAR 0 7
18295: PUSH
18296: LD_STRING Q1
18298: PPUSH
18299: LD_VAR 0 6
18303: PPUSH
18304: CALL_OW 98
18308: ST_TO_ADDR
// options := options diff dec ;
18309: LD_ADDR_VAR 0 6
18313: PUSH
18314: LD_VAR 0 6
18318: PUSH
18319: LD_VAR 0 7
18323: DIFF
18324: ST_TO_ADDR
// ResolveQuery ( dec , options ) ;
18325: LD_VAR 0 7
18329: PPUSH
18330: LD_VAR 0 6
18334: PPUSH
18335: CALL 19989 0 2
// until ( dec in [ 5 , 6 ] ) or options = 2 ;
18339: LD_VAR 0 7
18343: PUSH
18344: LD_INT 5
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: IN
18354: PUSH
18355: LD_VAR 0 6
18359: PUSH
18360: LD_INT 2
18362: EQUAL
18363: OR
18364: IFFALSE 18291
// if not ( dec in [ 5 , 6 ] ) then
18366: LD_VAR 0 7
18370: PUSH
18371: LD_INT 5
18373: PUSH
18374: LD_INT 6
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: IN
18381: NOT
18382: IFFALSE 18425
// begin dec := SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
18384: LD_ADDR_VAR 0 7
18388: PUSH
18389: LD_STRING Q1a
18391: PPUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 98
18406: ST_TO_ADDR
// ResolveQuery ( dec + 4 , options ) ;
18407: LD_VAR 0 7
18411: PUSH
18412: LD_INT 4
18414: PLUS
18415: PPUSH
18416: LD_VAR 0 6
18420: PPUSH
18421: CALL 19989 0 2
// end ; end ; CenterOnXY ( 81 , 127 ) ;
18425: LD_INT 81
18427: PPUSH
18428: LD_INT 127
18430: PPUSH
18431: CALL_OW 84
// amount := 8 ;
18435: LD_ADDR_VAR 0 8
18439: PUSH
18440: LD_INT 8
18442: ST_TO_ADDR
// macmilan_squad := [ ] ;
18443: LD_ADDR_VAR 0 9
18447: PUSH
18448: EMPTY
18449: ST_TO_ADDR
// if vip < amount then
18450: LD_EXP 61
18454: PUSH
18455: LD_VAR 0 8
18459: LESS
18460: IFFALSE 18504
// tmp := vip union FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) else
18462: LD_ADDR_VAR 0 5
18466: PUSH
18467: LD_EXP 61
18471: PUSH
18472: LD_INT 22
18474: PUSH
18475: LD_INT 4
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 21
18484: PUSH
18485: LD_INT 1
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PPUSH
18496: CALL_OW 69
18500: UNION
18501: ST_TO_ADDR
18502: GO 18514
// tmp := vip ;
18504: LD_ADDR_VAR 0 5
18508: PUSH
18509: LD_EXP 61
18513: ST_TO_ADDR
// tmp := tmp diff Powell ;
18514: LD_ADDR_VAR 0 5
18518: PUSH
18519: LD_VAR 0 5
18523: PUSH
18524: LD_EXP 60
18528: DIFF
18529: ST_TO_ADDR
// if tmp < amount then
18530: LD_VAR 0 5
18534: PUSH
18535: LD_VAR 0 8
18539: LESS
18540: IFFALSE 18552
// amount := tmp ;
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: LD_VAR 0 5
18551: ST_TO_ADDR
// if GetClass ( tmp [ 1 ] ) <> 2 then
18552: LD_VAR 0 5
18556: PUSH
18557: LD_INT 1
18559: ARRAY
18560: PPUSH
18561: CALL_OW 257
18565: PUSH
18566: LD_INT 2
18568: NONEQUAL
18569: IFFALSE 18667
// begin if IsInUnit ( tmp [ 1 ] ) then
18571: LD_VAR 0 5
18575: PUSH
18576: LD_INT 1
18578: ARRAY
18579: PPUSH
18580: CALL_OW 310
18584: IFFALSE 18599
// ComExitBuilding ( tmp [ 1 ] ) ;
18586: LD_VAR 0 5
18590: PUSH
18591: LD_INT 1
18593: ARRAY
18594: PPUSH
18595: CALL_OW 122
// if UnitsInside ( am_depot ) = 6 then
18599: LD_INT 387
18601: PPUSH
18602: CALL_OW 313
18606: PUSH
18607: LD_INT 6
18609: EQUAL
18610: IFFALSE 18635
// begin ComExitBuilding ( UnitsInside ( am_depot ) [ 1 ] ) ;
18612: LD_INT 387
18614: PPUSH
18615: CALL_OW 313
18619: PUSH
18620: LD_INT 1
18622: ARRAY
18623: PPUSH
18624: CALL_OW 122
// wait ( 3 ) ;
18628: LD_INT 3
18630: PPUSH
18631: CALL_OW 67
// end ; AddComEnterUnit ( tmp [ 1 ] , am_depot ) ;
18635: LD_VAR 0 5
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PPUSH
18644: LD_INT 387
18646: PPUSH
18647: CALL_OW 180
// AddComChangeProfession ( tmp [ 1 ] , 2 ) ;
18651: LD_VAR 0 5
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: LD_INT 2
18662: PPUSH
18663: CALL_OW 183
// end ; ComMoveXY ( JMM , 82 , 129 ) ;
18667: LD_EXP 40
18671: PPUSH
18672: LD_INT 82
18674: PPUSH
18675: LD_INT 129
18677: PPUSH
18678: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
18682: LD_EXP 40
18686: PPUSH
18687: LD_EXP 60
18691: PPUSH
18692: CALL_OW 179
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , 84 , 128 ) ;
18696: LD_INT 22
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 69
18710: PUSH
18711: LD_EXP 40
18715: DIFF
18716: PPUSH
18717: LD_INT 84
18719: PPUSH
18720: LD_INT 128
18722: PPUSH
18723: CALL_OW 111
// AddComTurnUnit ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , JMM ) ;
18727: LD_INT 22
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_EXP 40
18746: DIFF
18747: PPUSH
18748: LD_EXP 40
18752: PPUSH
18753: CALL_OW 179
// for i = 1 to amount do
18757: LD_ADDR_VAR 0 2
18761: PUSH
18762: DOUBLE
18763: LD_INT 1
18765: DEC
18766: ST_TO_ADDR
18767: LD_VAR 0 8
18771: PUSH
18772: FOR_TO
18773: IFFALSE 18941
// begin macmilan_squad := macmilan_squad ^ tmp [ i ] ;
18775: LD_ADDR_VAR 0 9
18779: PUSH
18780: LD_VAR 0 9
18784: PUSH
18785: LD_VAR 0 5
18789: PUSH
18790: LD_VAR 0 2
18794: ARRAY
18795: ADD
18796: ST_TO_ADDR
// if IsInUnit ( tmp [ i ] ) then
18797: LD_VAR 0 5
18801: PUSH
18802: LD_VAR 0 2
18806: ARRAY
18807: PPUSH
18808: CALL_OW 310
18812: IFFALSE 18829
// AddComExitBuilding ( tmp [ i ] ) ;
18814: LD_VAR 0 5
18818: PUSH
18819: LD_VAR 0 2
18823: ARRAY
18824: PPUSH
18825: CALL_OW 182
// if i = 2 and JMMNewVeh then
18829: LD_VAR 0 2
18833: PUSH
18834: LD_INT 2
18836: EQUAL
18837: PUSH
18838: LD_EXP 58
18842: AND
18843: IFFALSE 18901
// begin AddComEnterUnit ( tmp [ i ] , JMMNewVeh ) ;
18845: LD_VAR 0 5
18849: PUSH
18850: LD_VAR 0 2
18854: ARRAY
18855: PPUSH
18856: LD_EXP 58
18860: PPUSH
18861: CALL_OW 180
// AddComMoveXY ( tmp [ i ] , 86 , 133 ) ;
18865: LD_VAR 0 5
18869: PUSH
18870: LD_VAR 0 2
18874: ARRAY
18875: PPUSH
18876: LD_INT 86
18878: PPUSH
18879: LD_INT 133
18881: PPUSH
18882: CALL_OW 171
// AddComExitVehicle ( tmp [ i ] ) ;
18886: LD_VAR 0 5
18890: PUSH
18891: LD_VAR 0 2
18895: ARRAY
18896: PPUSH
18897: CALL_OW 181
// end ; AddComMoveToArea ( tmp [ i ] , macmilanSquadStand ) ;
18901: LD_VAR 0 5
18905: PUSH
18906: LD_VAR 0 2
18910: ARRAY
18911: PPUSH
18912: LD_INT 8
18914: PPUSH
18915: CALL_OW 173
// AddComTurnUnit ( tmp [ i ] , JMM ) ;
18919: LD_VAR 0 5
18923: PUSH
18924: LD_VAR 0 2
18928: ARRAY
18929: PPUSH
18930: LD_EXP 40
18934: PPUSH
18935: CALL_OW 179
// end ;
18939: GO 18772
18941: POP
18942: POP
// if GirlNewVeh then
18943: LD_EXP 59
18947: IFFALSE 18961
// SetSide ( GirlNewVeh , 4 ) ;
18949: LD_EXP 59
18953: PPUSH
18954: LD_INT 4
18956: PPUSH
18957: CALL_OW 235
// if Mike then
18961: LD_EXP 57
18965: IFFALSE 19002
// begin macmilan_squad := Join ( macmilan_squad , Mike ) ;
18967: LD_ADDR_VAR 0 9
18971: PUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: LD_EXP 57
18981: PPUSH
18982: CALL 106359 0 2
18986: ST_TO_ADDR
// ComMoveXY ( Mike , 86 , 133 ) ;
18987: LD_EXP 57
18991: PPUSH
18992: LD_INT 86
18994: PPUSH
18995: LD_INT 133
18997: PPUSH
18998: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
19002: LD_INT 35
19004: PPUSH
19005: CALL_OW 67
// until UnitFilter ( macmilan_squad , [ f_inarea , powellBase ] ) = 0 and not IsInArea ( JMM , powellBase ) ;
19009: LD_VAR 0 9
19013: PPUSH
19014: LD_INT 95
19016: PUSH
19017: LD_INT 9
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PPUSH
19024: CALL_OW 72
19028: PUSH
19029: LD_INT 0
19031: EQUAL
19032: PUSH
19033: LD_EXP 40
19037: PPUSH
19038: LD_INT 9
19040: PPUSH
19041: CALL_OW 308
19045: NOT
19046: AND
19047: IFFALSE 19002
// wait ( 0 0$2 ) ;
19049: LD_INT 70
19051: PPUSH
19052: CALL_OW 67
// SetSide ( macmilan_squad , 1 ) ;
19056: LD_VAR 0 9
19060: PPUSH
19061: LD_INT 1
19063: PPUSH
19064: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_distxy , 83 , 130 , 10 ] ] ) , 1 ) ;
19068: LD_INT 21
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 92
19080: PUSH
19081: LD_INT 83
19083: PUSH
19084: LD_INT 130
19086: PUSH
19087: LD_INT 10
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: CALL_OW 235
// tick := 0 ;
19112: LD_ADDR_OWVAR 1
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// Video ( false ) ;
19120: LD_INT 0
19122: PPUSH
19123: CALL 106331 0 1
// ChangeMissionObjectives ( M1 ) ;
19127: LD_STRING M1
19129: PPUSH
19130: CALL_OW 337
// SaveForQuickRestart ;
19134: CALL_OW 22
// missionStart := true ;
19138: LD_ADDR_EXP 13
19142: PUSH
19143: LD_INT 1
19145: ST_TO_ADDR
// missionStage := 2 ;
19146: LD_ADDR_EXP 15
19150: PUSH
19151: LD_INT 2
19153: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19154: LD_INT 35
19156: PPUSH
19157: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Powell ;
19161: LD_ADDR_VAR 0 5
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_INT 4
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 21
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PPUSH
19190: CALL_OW 69
19194: PUSH
19195: LD_EXP 60
19199: DIFF
19200: ST_TO_ADDR
// if not tmp then
19201: LD_VAR 0 5
19205: NOT
19206: IFFALSE 19221
// tmp := [ Powell ] ;
19208: LD_ADDR_VAR 0 5
19212: PUSH
19213: LD_EXP 60
19217: PUSH
19218: EMPTY
19219: LIST
19220: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) [ 1 ] ;
19221: LD_ADDR_VAR 0 4
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_INT 4
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 34
19238: PUSH
19239: LD_INT 12
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: ST_TO_ADDR
// if IsInUnit ( tmp [ 1 ] ) then
19259: LD_VAR 0 5
19263: PUSH
19264: LD_INT 1
19266: ARRAY
19267: PPUSH
19268: CALL_OW 310
19272: IFFALSE 19287
// ComExitBuilding ( tmp [ 1 ] ) ;
19274: LD_VAR 0 5
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: CALL_OW 122
// AddComEnterUnit ( tmp [ 1 ] , cargo ) ;
19287: LD_VAR 0 5
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: LD_VAR 0 4
19300: PPUSH
19301: CALL_OW 180
// AddComMoveXY ( tmp [ 1 ] , 80 , 136 ) ;
19305: LD_VAR 0 5
19309: PUSH
19310: LD_INT 1
19312: ARRAY
19313: PPUSH
19314: LD_INT 80
19316: PPUSH
19317: LD_INT 136
19319: PPUSH
19320: CALL_OW 171
// AddComUnload ( tmp [ 1 ] ) ;
19324: LD_VAR 0 5
19328: PUSH
19329: LD_INT 1
19331: ARRAY
19332: PPUSH
19333: CALL_OW 219
// AddComMoveXY ( tmp [ 1 ] , 59 , 112 ) ;
19337: LD_VAR 0 5
19341: PUSH
19342: LD_INT 1
19344: ARRAY
19345: PPUSH
19346: LD_INT 59
19348: PPUSH
19349: LD_INT 112
19351: PPUSH
19352: CALL_OW 171
// AddComExitVehicle ( tmp [ 1 ] ) ;
19356: LD_VAR 0 5
19360: PUSH
19361: LD_INT 1
19363: ARRAY
19364: PPUSH
19365: CALL_OW 181
// if Joan and GetSide ( Joan ) = 1 then
19369: LD_EXP 41
19373: PUSH
19374: LD_EXP 41
19378: PPUSH
19379: CALL_OW 255
19383: PUSH
19384: LD_INT 1
19386: EQUAL
19387: AND
19388: IFFALSE 19414
// begin Say ( Joan , D3W-Joan-1 ) ;
19390: LD_EXP 41
19394: PPUSH
19395: LD_STRING D3W-Joan-1
19397: PPUSH
19398: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
19402: LD_EXP 40
19406: PPUSH
19407: LD_STRING D3W-JMM-1
19409: PPUSH
19410: CALL_OW 88
// end ; if Lisa and GetSide ( Lisa ) = 1 and not Lisa in vip then
19414: LD_EXP 43
19418: PUSH
19419: LD_EXP 43
19423: PPUSH
19424: CALL_OW 255
19428: PUSH
19429: LD_INT 1
19431: EQUAL
19432: AND
19433: PUSH
19434: LD_EXP 43
19438: PUSH
19439: LD_EXP 61
19443: IN
19444: NOT
19445: AND
19446: IFFALSE 19472
// begin Say ( Lisa , D3W-Lisa-1 ) ;
19448: LD_EXP 43
19452: PPUSH
19453: LD_STRING D3W-Lisa-1
19455: PPUSH
19456: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
19460: LD_EXP 40
19464: PPUSH
19465: LD_STRING D3W-JMM-1
19467: PPUSH
19468: CALL_OW 88
// end ; if Connie and GetSide ( Connie ) = 1 then
19472: LD_EXP 55
19476: PUSH
19477: LD_EXP 55
19481: PPUSH
19482: CALL_OW 255
19486: PUSH
19487: LD_INT 1
19489: EQUAL
19490: AND
19491: IFFALSE 19517
// begin Say ( Connie , D3W-Con-1 ) ;
19493: LD_EXP 55
19497: PPUSH
19498: LD_STRING D3W-Con-1
19500: PPUSH
19501: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
19505: LD_EXP 40
19509: PPUSH
19510: LD_STRING D3W-JMM-1
19512: PPUSH
19513: CALL_OW 88
// end ; wait ( 0 0$0.5 ) ;
19517: LD_INT 18
19519: PPUSH
19520: CALL_OW 67
// if Lisa in vip and GetSide ( Lisa ) = 1 then
19524: LD_EXP 43
19528: PUSH
19529: LD_EXP 61
19533: IN
19534: PUSH
19535: LD_EXP 43
19539: PPUSH
19540: CALL_OW 255
19544: PUSH
19545: LD_INT 1
19547: EQUAL
19548: AND
19549: IFFALSE 19565
// Say ( Lisa , D3nW-Lisa-1 ) else
19551: LD_EXP 43
19555: PPUSH
19556: LD_STRING D3nW-Lisa-1
19558: PPUSH
19559: CALL_OW 88
19563: GO 19809
// if Cyrus in vip and GetSide ( Cyrus ) = 1 then
19565: LD_EXP 46
19569: PUSH
19570: LD_EXP 61
19574: IN
19575: PUSH
19576: LD_EXP 46
19580: PPUSH
19581: CALL_OW 255
19585: PUSH
19586: LD_INT 1
19588: EQUAL
19589: AND
19590: IFFALSE 19606
// Say ( Cyrus , D3nW-Cyrus-1 ) else
19592: LD_EXP 46
19596: PPUSH
19597: LD_STRING D3nW-Cyrus-1
19599: PPUSH
19600: CALL_OW 88
19604: GO 19809
// if Bobby in vip and GetSide ( Bobby ) = 1 then
19606: LD_EXP 45
19610: PUSH
19611: LD_EXP 61
19615: IN
19616: PUSH
19617: LD_EXP 45
19621: PPUSH
19622: CALL_OW 255
19626: PUSH
19627: LD_INT 1
19629: EQUAL
19630: AND
19631: IFFALSE 19647
// Say ( Bobby , D3nW-Bobby-1 ) else
19633: LD_EXP 45
19637: PPUSH
19638: LD_STRING D3nW-Bobby-1
19640: PPUSH
19641: CALL_OW 88
19645: GO 19809
// if Gary in vip and GetSide ( Gary ) = 1 then
19647: LD_EXP 52
19651: PUSH
19652: LD_EXP 61
19656: IN
19657: PUSH
19658: LD_EXP 52
19662: PPUSH
19663: CALL_OW 255
19667: PUSH
19668: LD_INT 1
19670: EQUAL
19671: AND
19672: IFFALSE 19688
// Say ( Gary , D3nW-Gary-1 ) else
19674: LD_EXP 52
19678: PPUSH
19679: LD_STRING D3nW-Gary-1
19681: PPUSH
19682: CALL_OW 88
19686: GO 19809
// if Donaldson in vip and GetSide ( Donaldson ) = 1 then
19688: LD_EXP 44
19692: PUSH
19693: LD_EXP 61
19697: IN
19698: PUSH
19699: LD_EXP 44
19703: PPUSH
19704: CALL_OW 255
19708: PUSH
19709: LD_INT 1
19711: EQUAL
19712: AND
19713: IFFALSE 19729
// Say ( Donaldson , D3nW-Don-1 ) else
19715: LD_EXP 44
19719: PPUSH
19720: LD_STRING D3nW-Don-1
19722: PPUSH
19723: CALL_OW 88
19727: GO 19809
// if Cornel in vip and GetSide ( Cornel ) = 1 then
19729: LD_EXP 51
19733: PUSH
19734: LD_EXP 61
19738: IN
19739: PUSH
19740: LD_EXP 51
19744: PPUSH
19745: CALL_OW 255
19749: PUSH
19750: LD_INT 1
19752: EQUAL
19753: AND
19754: IFFALSE 19770
// Say ( Cornel , D3nW-Corn-1 ) else
19756: LD_EXP 51
19760: PPUSH
19761: LD_STRING D3nW-Corn-1
19763: PPUSH
19764: CALL_OW 88
19768: GO 19809
// if Frank in vip and GetSide ( Frank ) = 1 then
19770: LD_EXP 53
19774: PUSH
19775: LD_EXP 61
19779: IN
19780: PUSH
19781: LD_EXP 53
19785: PPUSH
19786: CALL_OW 255
19790: PUSH
19791: LD_INT 1
19793: EQUAL
19794: AND
19795: IFFALSE 19809
// Say ( Frank , D3nW-Frank-1 ) ;
19797: LD_EXP 53
19801: PPUSH
19802: LD_STRING D3nW-Frank-1
19804: PPUSH
19805: CALL_OW 88
// if UnitFilter ( vip , [ f_side , 1 ] ) then
19809: LD_EXP 61
19813: PPUSH
19814: LD_INT 22
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PPUSH
19824: CALL_OW 72
19828: IFFALSE 19854
// begin Say ( JMM , D3nW-JMM-1 ) ;
19830: LD_EXP 40
19834: PPUSH
19835: LD_STRING D3nW-JMM-1
19837: PPUSH
19838: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
19842: LD_EXP 40
19846: PPUSH
19847: LD_STRING D3nW-JMM-1a
19849: PPUSH
19850: CALL_OW 88
// end ; t := 0 0$00 ;
19854: LD_ADDR_VAR 0 3
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19862: LD_INT 35
19864: PPUSH
19865: CALL_OW 67
// t := t + 0 0$1 ;
19869: LD_ADDR_VAR 0 3
19873: PUSH
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 35
19881: PLUS
19882: ST_TO_ADDR
// until HexInfo ( 59 , 112 ) or t > 1 1$00 ;
19883: LD_INT 59
19885: PPUSH
19886: LD_INT 112
19888: PPUSH
19889: CALL_OW 428
19893: PUSH
19894: LD_VAR 0 3
19898: PUSH
19899: LD_INT 2100
19901: GREATER
19902: OR
19903: IFFALSE 19862
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Powell ) ;
19905: LD_ADDR_EXP 101
19909: PUSH
19910: LD_EXP 101
19914: PPUSH
19915: LD_INT 4
19917: PPUSH
19918: LD_INT 22
19920: PUSH
19921: LD_INT 4
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 23
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_EXP 60
19969: DIFF
19970: PPUSH
19971: CALL_OW 1
19975: ST_TO_ADDR
// activeAttacks := true ;
19976: LD_ADDR_EXP 16
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// end ;
19984: LD_VAR 0 1
19988: RET
// export function ResolveQuery ( question , list_of_q ) ; begin
19989: LD_INT 0
19991: PPUSH
// case question of 1 :
19992: LD_VAR 0 1
19996: PUSH
19997: LD_INT 1
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20056
20005: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
20006: LD_EXP 40
20010: PPUSH
20011: LD_STRING D2Mot-JMM-1
20013: PPUSH
20014: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
20018: LD_EXP 60
20022: PPUSH
20023: LD_STRING D2Mot-Pow-1
20025: PPUSH
20026: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
20030: LD_EXP 40
20034: PPUSH
20035: LD_STRING D2Mot-JMM-2
20037: PPUSH
20038: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
20042: LD_EXP 60
20046: PPUSH
20047: LD_STRING D2Mot-Pow-2
20049: PPUSH
20050: CALL_OW 88
// end ; 2 :
20054: GO 20407
20056: LD_INT 2
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20140
20064: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
20065: LD_EXP 40
20069: PPUSH
20070: LD_STRING D2Rus-JMM-1
20072: PPUSH
20073: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
20077: LD_EXP 60
20081: PPUSH
20082: LD_STRING D2Rus-Pow-1
20084: PPUSH
20085: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
20089: LD_EXP 40
20093: PPUSH
20094: LD_STRING D2Rus-JMM-2
20096: PPUSH
20097: CALL_OW 88
// if not ( 3 in list_of_q ) then
20101: LD_INT 3
20103: PUSH
20104: LD_VAR 0 2
20108: IN
20109: NOT
20110: IFFALSE 20126
// Say ( Powell , D2Rus-Pow-2 ) else
20112: LD_EXP 60
20116: PPUSH
20117: LD_STRING D2Rus-Pow-2
20119: PPUSH
20120: CALL_OW 88
20124: GO 20138
// Say ( Powell , D2Rus-Pow-2a ) ;
20126: LD_EXP 60
20130: PPUSH
20131: LD_STRING D2Rus-Pow-2a
20133: PPUSH
20134: CALL_OW 88
// end ; 3 :
20138: GO 20407
20140: LD_INT 3
20142: DOUBLE
20143: EQUAL
20144: IFTRUE 20148
20146: GO 20233
20148: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
20149: LD_EXP 40
20153: PPUSH
20154: LD_STRING D2Leg-JMM-1
20156: PPUSH
20157: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
20161: LD_EXP 60
20165: PPUSH
20166: LD_STRING D2Leg-Pow-1
20168: PPUSH
20169: CALL_OW 88
// if 2 in list_of_q then
20173: LD_INT 2
20175: PUSH
20176: LD_VAR 0 2
20180: IN
20181: IFFALSE 20207
// begin Say ( JMM , D2Leg-JMM-2 ) ;
20183: LD_EXP 40
20187: PPUSH
20188: LD_STRING D2Leg-JMM-2
20190: PPUSH
20191: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
20195: LD_EXP 60
20199: PPUSH
20200: LD_STRING D2Leg-Pow-2
20202: PPUSH
20203: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
20207: LD_EXP 40
20211: PPUSH
20212: LD_STRING D2Leg-JMM-3
20214: PPUSH
20215: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
20219: LD_EXP 60
20223: PPUSH
20224: LD_STRING D2Leg-Pow-3
20226: PPUSH
20227: CALL_OW 88
// end ; 4 :
20231: GO 20407
20233: LD_INT 4
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20316
20241: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
20242: LD_EXP 40
20246: PPUSH
20247: LD_STRING D2Ar-JMM-1
20249: PPUSH
20250: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
20254: LD_EXP 60
20258: PPUSH
20259: LD_STRING D2Ar-Pow-1
20261: PPUSH
20262: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
20266: LD_EXP 40
20270: PPUSH
20271: LD_STRING D2Ar-JMM-2
20273: PPUSH
20274: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
20278: LD_EXP 60
20282: PPUSH
20283: LD_STRING D2Ar-Pow-2
20285: PPUSH
20286: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
20290: LD_EXP 40
20294: PPUSH
20295: LD_STRING D2Ar-JMM-3
20297: PPUSH
20298: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
20302: LD_EXP 60
20306: PPUSH
20307: LD_STRING D2Ar-Pow-3
20309: PPUSH
20310: CALL_OW 88
// end ; 5 :
20314: GO 20407
20316: LD_INT 5
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20339
20324: POP
// Say ( JMM , D2Conf-JMM-1 ) ; 6 :
20325: LD_EXP 40
20329: PPUSH
20330: LD_STRING D2Conf-JMM-1
20332: PPUSH
20333: CALL_OW 88
20337: GO 20407
20339: LD_INT 6
20341: DOUBLE
20342: EQUAL
20343: IFTRUE 20347
20345: GO 20406
20347: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
20348: LD_EXP 40
20352: PPUSH
20353: LD_STRING D2Com-JMM-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
20360: LD_EXP 60
20364: PPUSH
20365: LD_STRING D2Com-Pow-1
20367: PPUSH
20368: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
20372: LD_EXP 40
20376: PPUSH
20377: LD_STRING D2Com-JMM-2
20379: PPUSH
20380: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
20384: LD_EXP 60
20388: PPUSH
20389: LD_STRING D2Com-Pow-2
20391: PPUSH
20392: CALL_OW 88
// powellAngerQuery := true ;
20396: LD_ADDR_EXP 36
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// end ; end ;
20404: GO 20407
20406: POP
// end ;
20407: LD_VAR 0 3
20411: RET
// every 0 0$5 trigger missionStart do var tmp ;
20412: LD_EXP 13
20416: IFFALSE 20741
20418: GO 20420
20420: DISABLE
20421: LD_INT 0
20423: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20424: LD_INT 35
20426: PPUSH
20427: CALL_OW 67
// if FilterUnitsInArea ( powellBorder , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] ] ) and missionStage in [ 2 , 3 , 4 , 5 ] then
20431: LD_INT 14
20433: PPUSH
20434: LD_INT 22
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 3
20446: PUSH
20447: LD_INT 21
20449: PUSH
20450: LD_INT 3
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 70
20469: PUSH
20470: LD_EXP 15
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 3
20480: PUSH
20481: LD_INT 4
20483: PUSH
20484: LD_INT 5
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: IN
20493: AND
20494: IFFALSE 20731
// begin powellAnger := powellAnger + 1 ;
20496: LD_ADDR_EXP 17
20500: PUSH
20501: LD_EXP 17
20505: PUSH
20506: LD_INT 1
20508: PLUS
20509: ST_TO_ADDR
// Video ( true ) ;
20510: LD_INT 1
20512: PPUSH
20513: CALL 106331 0 1
// CenterNowOnUnits ( tmp ) ;
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 87
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
20526: LD_INT 14
20528: PPUSH
20529: LD_INT 22
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 70
20543: PPUSH
20544: LD_INT 86
20546: PPUSH
20547: LD_INT 133
20549: PPUSH
20550: CALL_OW 111
// async ;
20554: ASYNC
// case powellAnger of 1 :
20555: LD_EXP 17
20559: PUSH
20560: LD_INT 1
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20583
20568: POP
// Say ( Powell , DBack1-Pow-1 ) ; 2 :
20569: LD_EXP 60
20573: PPUSH
20574: LD_STRING DBack1-Pow-1
20576: PPUSH
20577: CALL_OW 88
20581: GO 20630
20583: LD_INT 2
20585: DOUBLE
20586: EQUAL
20587: IFTRUE 20591
20589: GO 20606
20591: POP
// Say ( Powell , DBack2-Pow-1 ) ; 3 :
20592: LD_EXP 60
20596: PPUSH
20597: LD_STRING DBack2-Pow-1
20599: PPUSH
20600: CALL_OW 88
20604: GO 20630
20606: LD_INT 3
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20629
20614: POP
// Say ( Powell , DBack3-Pow-1 ) ; end ;
20615: LD_EXP 60
20619: PPUSH
20620: LD_STRING DBack3-Pow-1
20622: PPUSH
20623: CALL_OW 88
20627: GO 20630
20629: POP
// sync ;
20630: SYNC
// repeat wait ( 0 0$1 ) ;
20631: LD_INT 35
20633: PPUSH
20634: CALL_OW 67
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
20638: LD_INT 14
20640: PPUSH
20641: LD_INT 22
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: PPUSH
20656: LD_INT 86
20658: PPUSH
20659: LD_INT 133
20661: PPUSH
20662: CALL_OW 111
// until not FilterUnitsInArea ( powellBorder , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20666: LD_INT 14
20668: PPUSH
20669: LD_INT 22
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 3
20681: PUSH
20682: LD_INT 21
20684: PUSH
20685: LD_INT 3
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 70
20704: NOT
20705: IFFALSE 20631
// if powellAnger >= 3 then
20707: LD_EXP 17
20711: PUSH
20712: LD_INT 3
20714: GREATEREQUAL
20715: IFFALSE 20724
// YouLost ( Dismissed ) ;
20717: LD_STRING Dismissed
20719: PPUSH
20720: CALL_OW 104
// Video ( false ) ;
20724: LD_INT 0
20726: PPUSH
20727: CALL 106331 0 1
// end ; until missionStage > 5 ;
20731: LD_EXP 15
20735: PUSH
20736: LD_INT 5
20738: GREATER
20739: IFFALSE 20424
// end ;
20741: PPOPN 1
20743: END
// every 0 0$30 trigger missionStart and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 4 and missionStage = 2 do var i , tmp , tmp2 , retreat , arm , bar , ru , un , emptyTowers , t , p ;
20744: LD_EXP 13
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_INT 4
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 21
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PPUSH
20773: CALL_OW 69
20777: PUSH
20778: LD_INT 4
20780: GREATEREQUAL
20781: AND
20782: PUSH
20783: LD_EXP 15
20787: PUSH
20788: LD_INT 2
20790: EQUAL
20791: AND
20792: IFFALSE 23042
20794: GO 20796
20796: DISABLE
20797: LD_INT 0
20799: PPUSH
20800: PPUSH
20801: PPUSH
20802: PPUSH
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
// begin missionStage := 3 ;
20810: LD_ADDR_EXP 15
20814: PUSH
20815: LD_INT 3
20817: ST_TO_ADDR
// retreat := false ;
20818: LD_ADDR_VAR 0 4
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) ;
20826: LD_ADDR_VAR 0 5
20830: PUSH
20831: LD_INT 22
20833: PUSH
20834: LD_INT 4
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 4
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_barracks ] ] ) ;
20860: LD_ADDR_VAR 0 6
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 4
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 30
20877: PUSH
20878: LD_INT 5
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: ST_TO_ADDR
// if not bar then
20894: LD_VAR 0 6
20898: NOT
20899: IFFALSE 20952
// begin repeat wait ( 0 0$1 ) ;
20901: LD_INT 35
20903: PPUSH
20904: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) ;
20908: LD_INT 22
20910: PUSH
20911: LD_INT 4
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 3
20920: PUSH
20921: LD_INT 57
20923: PUSH
20924: EMPTY
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 30
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: IFFALSE 20901
// end ; bar := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_barracks ] ] ) ;
20952: LD_ADDR_VAR 0 6
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_INT 4
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20986: LD_INT 35
20988: PPUSH
20989: CALL_OW 67
// until mc_vehicles [ 4 ] >= 4 ;
20993: LD_EXP 120
20997: PUSH
20998: LD_INT 4
21000: ARRAY
21001: PUSH
21002: LD_INT 4
21004: GREATEREQUAL
21005: IFFALSE 20986
// tmp := [ ] ;
21007: LD_ADDR_VAR 0 2
21011: PUSH
21012: EMPTY
21013: ST_TO_ADDR
// tmp2 := [ ] ;
21014: LD_ADDR_VAR 0 3
21018: PUSH
21019: EMPTY
21020: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff ( Powell union vip ) do
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_INT 4
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 25
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 25
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 25
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 25
21071: PUSH
21072: LD_INT 4
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 25
21081: PUSH
21082: LD_INT 5
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: CALL_OW 69
21105: PUSH
21106: LD_EXP 60
21110: PUSH
21111: LD_EXP 61
21115: UNION
21116: DIFF
21117: PUSH
21118: FOR_IN
21119: IFFALSE 21181
// if not i in extraSquad then
21121: LD_VAR 0 1
21125: PUSH
21126: LD_EXP 62
21130: IN
21131: NOT
21132: IFFALSE 21156
// tmp := Join ( tmp , i ) else
21134: LD_ADDR_VAR 0 2
21138: PUSH
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_VAR 0 1
21148: PPUSH
21149: CALL 106359 0 2
21153: ST_TO_ADDR
21154: GO 21179
// tmp := Insert ( tmp , 1 , i ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: LD_INT 1
21168: PPUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 2
21178: ST_TO_ADDR
21179: GO 21118
21181: POP
21182: POP
// for i in UnitFilter ( tmp , [ f_sex , sex_male ] ) do
21183: LD_ADDR_VAR 0 1
21187: PUSH
21188: LD_VAR 0 2
21192: PPUSH
21193: LD_INT 26
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 72
21207: PUSH
21208: FOR_IN
21209: IFFALSE 21260
// begin p := Inc ( p ) ;
21211: LD_ADDR_VAR 0 11
21215: PUSH
21216: LD_VAR 0 11
21220: PPUSH
21221: CALL 107720 0 1
21225: ST_TO_ADDR
// tmp2 := Join ( tmp2 , i ) ;
21226: LD_ADDR_VAR 0 3
21230: PUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: LD_VAR 0 1
21240: PPUSH
21241: CALL 106359 0 2
21245: ST_TO_ADDR
// if p = 4 then
21246: LD_VAR 0 11
21250: PUSH
21251: LD_INT 4
21253: EQUAL
21254: IFFALSE 21258
// break ;
21256: GO 21260
// end ;
21258: GO 21208
21260: POP
21261: POP
// tmp := tmp diff tmp2 ;
21262: LD_ADDR_VAR 0 2
21266: PUSH
21267: LD_VAR 0 2
21271: PUSH
21272: LD_VAR 0 3
21276: DIFF
21277: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_INT 3
21290: PPUSH
21291: CALL 104876 0 2
21295: ST_TO_ADDR
// tmp2 := SortBySkill ( tmp2 , 3 ) ;
21296: LD_ADDR_VAR 0 3
21300: PUSH
21301: LD_VAR 0 3
21305: PPUSH
21306: LD_INT 3
21308: PPUSH
21309: CALL 104876 0 2
21313: ST_TO_ADDR
// for i := 1 to 4 do
21314: LD_ADDR_VAR 0 1
21318: PUSH
21319: DOUBLE
21320: LD_INT 1
21322: DEC
21323: ST_TO_ADDR
21324: LD_INT 4
21326: PUSH
21327: FOR_TO
21328: IFFALSE 21481
// begin if tmp2 then
21330: LD_VAR 0 3
21334: IFFALSE 21402
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp2 [ tmp2 ] ) ;
21336: LD_ADDR_EXP 18
21340: PUSH
21341: LD_EXP 18
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: LD_EXP 18
21353: PUSH
21354: LD_INT 1
21356: ARRAY
21357: PUSH
21358: LD_VAR 0 3
21362: PUSH
21363: LD_VAR 0 3
21367: ARRAY
21368: ADD
21369: PPUSH
21370: CALL_OW 1
21374: ST_TO_ADDR
// SetTag ( tmp2 [ tmp2 ] , 1 ) ;
21375: LD_VAR 0 3
21379: PUSH
21380: LD_VAR 0 3
21384: ARRAY
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL_OW 109
// tmp2 := [ ] ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: EMPTY
21399: ST_TO_ADDR
// end else
21400: GO 21479
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp [ tmp ] ) ;
21402: LD_ADDR_EXP 18
21406: PUSH
21407: LD_EXP 18
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: LD_EXP 18
21419: PUSH
21420: LD_INT 1
21422: ARRAY
21423: PUSH
21424: LD_VAR 0 2
21428: PUSH
21429: LD_VAR 0 2
21433: ARRAY
21434: ADD
21435: PPUSH
21436: CALL_OW 1
21440: ST_TO_ADDR
// SetTag ( tmp [ tmp ] , 1 ) ;
21441: LD_VAR 0 2
21445: PUSH
21446: LD_VAR 0 2
21450: ARRAY
21451: PPUSH
21452: LD_INT 1
21454: PPUSH
21455: CALL_OW 109
// tmp := Delete ( tmp , tmp ) ;
21459: LD_ADDR_VAR 0 2
21463: PUSH
21464: LD_VAR 0 2
21468: PPUSH
21469: LD_VAR 0 2
21473: PPUSH
21474: CALL_OW 3
21478: ST_TO_ADDR
// end ; end ;
21479: GO 21327
21481: POP
21482: POP
// if tmp2 then
21483: LD_VAR 0 3
21487: IFFALSE 21505
// tmp := tmp union tmp2 ;
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_VAR 0 2
21498: PUSH
21499: LD_VAR 0 3
21503: UNION
21504: ST_TO_ADDR
// for i := 1 to 4 do
21505: LD_ADDR_VAR 0 1
21509: PUSH
21510: DOUBLE
21511: LD_INT 1
21513: DEC
21514: ST_TO_ADDR
21515: LD_INT 4
21517: PUSH
21518: FOR_TO
21519: IFFALSE 21568
// powellSquadAttack := Replace ( powellSquadAttack , 2 , powellSquadAttack [ 2 ] ^ tmp [ tmp - i ] ) ;
21521: LD_ADDR_EXP 18
21525: PUSH
21526: LD_EXP 18
21530: PPUSH
21531: LD_INT 2
21533: PPUSH
21534: LD_EXP 18
21538: PUSH
21539: LD_INT 2
21541: ARRAY
21542: PUSH
21543: LD_VAR 0 2
21547: PUSH
21548: LD_VAR 0 2
21552: PUSH
21553: LD_VAR 0 1
21557: MINUS
21558: ARRAY
21559: ADD
21560: PPUSH
21561: CALL_OW 1
21565: ST_TO_ADDR
21566: GO 21518
21568: POP
21569: POP
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] diff powellSquadAttack [ 1 ] ) ;
21570: LD_ADDR_EXP 101
21574: PUSH
21575: LD_EXP 101
21579: PPUSH
21580: LD_INT 4
21582: PPUSH
21583: LD_EXP 101
21587: PUSH
21588: LD_INT 4
21590: ARRAY
21591: PUSH
21592: LD_EXP 18
21596: PUSH
21597: LD_INT 1
21599: ARRAY
21600: DIFF
21601: PPUSH
21602: CALL_OW 1
21606: ST_TO_ADDR
// if UnitsInside ( arm [ 1 ] ) then
21607: LD_VAR 0 5
21611: PUSH
21612: LD_INT 1
21614: ARRAY
21615: PPUSH
21616: CALL_OW 313
21620: IFFALSE 21675
// begin for i in UnitsInside ( arm [ 1 ] ) do
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_VAR 0 5
21631: PUSH
21632: LD_INT 1
21634: ARRAY
21635: PPUSH
21636: CALL_OW 313
21640: PUSH
21641: FOR_IN
21642: IFFALSE 21673
// begin ComExitBuilding ( i ) ;
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 122
// AddComEnterUnit ( i , bar [ 1 ] ) ;
21653: LD_VAR 0 1
21657: PPUSH
21658: LD_VAR 0 6
21662: PUSH
21663: LD_INT 1
21665: ARRAY
21666: PPUSH
21667: CALL_OW 180
// end ;
21671: GO 21641
21673: POP
21674: POP
// end ; wait ( 0 0$3 ) ;
21675: LD_INT 105
21677: PPUSH
21678: CALL_OW 67
// for i in powellSquadAttack [ 1 ] do
21682: LD_ADDR_VAR 0 1
21686: PUSH
21687: LD_EXP 18
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PUSH
21696: FOR_IN
21697: IFFALSE 21804
// begin if IsInUnit ( i ) then
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 310
21708: IFFALSE 21719
// ComExitBuilding ( i ) ;
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 122
// if GetClass ( i ) <> 1 then
21719: LD_VAR 0 1
21723: PPUSH
21724: CALL_OW 257
21728: PUSH
21729: LD_INT 1
21731: NONEQUAL
21732: IFFALSE 21773
// begin AddComEnterUnit ( i , arm [ 1 ] ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_VAR 0 5
21743: PUSH
21744: LD_INT 1
21746: ARRAY
21747: PPUSH
21748: CALL_OW 180
// AddComChangeProfession ( i , class_soldier ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 183
// AddComExitBuilding ( i ) ;
21764: LD_VAR 0 1
21768: PPUSH
21769: CALL_OW 182
// end ; AddComMoveXY ( i , 60 , 94 ) ;
21773: LD_VAR 0 1
21777: PPUSH
21778: LD_INT 60
21780: PPUSH
21781: LD_INT 94
21783: PPUSH
21784: CALL_OW 171
// AddComTurnUnit ( i , Powell ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_EXP 60
21797: PPUSH
21798: CALL_OW 179
// end ;
21802: GO 21696
21804: POP
21805: POP
// wait ( 0 0$45 ) ;
21806: LD_INT 1575
21808: PPUSH
21809: CALL_OW 67
// Say ( Powell , D4-Pow-1 ) ;
21813: LD_EXP 60
21817: PPUSH
21818: LD_STRING D4-Pow-1
21820: PPUSH
21821: CALL_OW 88
// tmp := UnitFilter ( powellSquadAttack [ 1 ] , [ f_sex , sex_male ] ) ;
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: LD_EXP 18
21834: PUSH
21835: LD_INT 1
21837: ARRAY
21838: PPUSH
21839: LD_INT 26
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PPUSH
21849: CALL_OW 72
21853: ST_TO_ADDR
// if tmp then
21854: LD_VAR 0 2
21858: IFFALSE 21876
// Say ( tmp [ 1 ] , D4-Sol1-1 ) ;
21860: LD_VAR 0 2
21864: PUSH
21865: LD_INT 1
21867: ARRAY
21868: PPUSH
21869: LD_STRING D4-Sol1-1
21871: PPUSH
21872: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
21876: LD_EXP 60
21880: PPUSH
21881: LD_STRING D4-Pow-2
21883: PPUSH
21884: CALL_OW 88
// for i = 1 to powellSquadAttack [ 1 ] do
21888: LD_ADDR_VAR 0 1
21892: PUSH
21893: DOUBLE
21894: LD_INT 1
21896: DEC
21897: ST_TO_ADDR
21898: LD_EXP 18
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: PUSH
21907: FOR_TO
21908: IFFALSE 22001
// begin ComEnterUnit ( powellSquadAttack [ 1 ] [ i ] , mc_vehicles [ 4 ] [ 1 ] ) ;
21910: LD_EXP 18
21914: PUSH
21915: LD_INT 1
21917: ARRAY
21918: PUSH
21919: LD_VAR 0 1
21923: ARRAY
21924: PPUSH
21925: LD_EXP 120
21929: PUSH
21930: LD_INT 4
21932: ARRAY
21933: PUSH
21934: LD_INT 1
21936: ARRAY
21937: PPUSH
21938: CALL_OW 120
// mc_vehicles := Replace ( mc_vehicles , 4 , Delete ( mc_vehicles [ 4 ] , 1 ) ) ;
21942: LD_ADDR_EXP 120
21946: PUSH
21947: LD_EXP 120
21951: PPUSH
21952: LD_INT 4
21954: PPUSH
21955: LD_EXP 120
21959: PUSH
21960: LD_INT 4
21962: ARRAY
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 3
21971: PPUSH
21972: CALL_OW 1
21976: ST_TO_ADDR
// DoNotAttack ( 8 , powellSquadAttack [ 1 ] [ i ] ) ;
21977: LD_INT 8
21979: PPUSH
21980: LD_EXP 18
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PUSH
21989: LD_VAR 0 1
21993: ARRAY
21994: PPUSH
21995: CALL_OW 471
// end ;
21999: GO 21907
22001: POP
22002: POP
// repeat wait ( 0 0$1 ) ;
22003: LD_INT 35
22005: PPUSH
22006: CALL_OW 67
// until UnitFilter ( powellSquadAttack [ 1 ] , [ f_driving ] ) >= 4 ;
22010: LD_EXP 18
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: PPUSH
22019: LD_INT 55
22021: PUSH
22022: EMPTY
22023: LIST
22024: PPUSH
22025: CALL_OW 72
22029: PUSH
22030: LD_INT 4
22032: GREATEREQUAL
22033: IFFALSE 22003
// ComMoveXY ( powellSquadAttack [ 1 ] , 69 , 94 ) ;
22035: LD_EXP 18
22039: PUSH
22040: LD_INT 1
22042: ARRAY
22043: PPUSH
22044: LD_INT 69
22046: PPUSH
22047: LD_INT 94
22049: PPUSH
22050: CALL_OW 111
// AddComMoveXY ( powellSquadAttack [ 1 ] , 82 , 83 ) ;
22054: LD_EXP 18
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: LD_INT 82
22065: PPUSH
22066: LD_INT 83
22068: PPUSH
22069: CALL_OW 171
// AddComAgressiveMove ( powellSquadAttack [ 1 ] , 77 , 69 ) ;
22073: LD_EXP 18
22077: PUSH
22078: LD_INT 1
22080: ARRAY
22081: PPUSH
22082: LD_INT 77
22084: PPUSH
22085: LD_INT 69
22087: PPUSH
22088: CALL_OW 174
// repeat wait ( 3 ) ;
22092: LD_INT 3
22094: PPUSH
22095: CALL_OW 67
// for i in powellSquadAttack [ 1 ] do
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_EXP 18
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22250
// begin if GetLives ( i ) < 990 then
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 256
22125: PUSH
22126: LD_INT 990
22128: LESS
22129: IFFALSE 22143
// SetLives ( i , 1000 ) ;
22131: LD_VAR 0 1
22135: PPUSH
22136: LD_INT 1000
22138: PPUSH
22139: CALL_OW 234
// if not IsInUnit ( i ) then
22143: LD_VAR 0 1
22147: PPUSH
22148: CALL_OW 310
22152: NOT
22153: IFFALSE 22248
// begin if not HasTask ( i ) then
22155: LD_VAR 0 1
22159: PPUSH
22160: CALL_OW 314
22164: NOT
22165: IFFALSE 22182
// ComMoveXY ( i , 64 , 93 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_INT 64
22174: PPUSH
22175: LD_INT 93
22177: PPUSH
22178: CALL_OW 111
// if not retreat and GetSex ( i ) = sex_male then
22182: LD_VAR 0 4
22186: NOT
22187: PUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 258
22197: PUSH
22198: LD_INT 1
22200: EQUAL
22201: AND
22202: IFFALSE 22248
// begin retreat := true ;
22204: LD_ADDR_VAR 0 4
22208: PUSH
22209: LD_INT 1
22211: ST_TO_ADDR
// SetTag ( i , 2 ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 2
22219: PPUSH
22220: CALL_OW 109
// Say ( i , D4a-Sol1-1 ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_STRING D4a-Sol1-1
22231: PPUSH
22232: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
22236: LD_EXP 60
22240: PPUSH
22241: LD_STRING D4a-Pow-1
22243: PPUSH
22244: CALL_OW 88
// end ; end ; end ;
22248: GO 22113
22250: POP
22251: POP
// until UnitFilter ( powellSquadAttack [ 1 ] , [ [ f_inarea , powellBase ] , [ f_not , [ f_driving ] ] ] ) >= 4 ;
22252: LD_EXP 18
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: PPUSH
22261: LD_INT 95
22263: PUSH
22264: LD_INT 9
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 55
22276: PUSH
22277: EMPTY
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 72
22292: PUSH
22293: LD_INT 4
22295: GREATEREQUAL
22296: IFFALSE 22092
// for i in powellSquadAttack [ 1 ] do
22298: LD_ADDR_VAR 0 1
22302: PUSH
22303: LD_EXP 18
22307: PUSH
22308: LD_INT 1
22310: ARRAY
22311: PUSH
22312: FOR_IN
22313: IFFALSE 22449
// begin if GetTag ( i ) = 2 then
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL_OW 110
22324: PUSH
22325: LD_INT 2
22327: EQUAL
22328: IFFALSE 22390
// begin ComMoveXY ( i , 60 , 94 ) ;
22330: LD_VAR 0 1
22334: PPUSH
22335: LD_INT 60
22337: PPUSH
22338: LD_INT 94
22340: PPUSH
22341: CALL_OW 111
// AddComTurnUnit ( i , Powell ) ;
22345: LD_VAR 0 1
22349: PPUSH
22350: LD_EXP 60
22354: PPUSH
22355: CALL_OW 179
// wait ( 0 0$3 ) ;
22359: LD_INT 105
22361: PPUSH
22362: CALL_OW 67
// Say ( i , D4a-Sol1-2 ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_STRING D4a-Sol1-2
22373: PPUSH
22374: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
22378: LD_EXP 60
22382: PPUSH
22383: LD_STRING D4a-Pow-2
22385: PPUSH
22386: CALL_OW 88
// end ; SetTag ( i , 0 ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 0
22397: PPUSH
22398: CALL_OW 109
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] union i ) ;
22402: LD_ADDR_EXP 101
22406: PUSH
22407: LD_EXP 101
22411: PPUSH
22412: LD_INT 4
22414: PPUSH
22415: LD_EXP 101
22419: PUSH
22420: LD_INT 4
22422: ARRAY
22423: PUSH
22424: LD_VAR 0 1
22428: UNION
22429: PPUSH
22430: CALL_OW 1
22434: ST_TO_ADDR
// NormalAttack ( 8 , i ) ;
22435: LD_INT 8
22437: PPUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 472
// end ;
22447: GO 22312
22449: POP
22450: POP
// wait ( 2 2$00 ) ;
22451: LD_INT 4200
22453: PPUSH
22454: CALL_OW 67
// emptyTowers := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
22458: LD_ADDR_VAR 0 9
22462: PUSH
22463: LD_INT 22
22465: PUSH
22466: LD_INT 4
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 30
22475: PUSH
22476: LD_INT 32
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 58
22485: PUSH
22486: EMPTY
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 69
22498: ST_TO_ADDR
// if tmp then
22499: LD_VAR 0 2
22503: IFFALSE 22743
// begin for i := 1 to tmp do
22505: LD_ADDR_VAR 0 1
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_VAR 0 2
22519: PUSH
22520: FOR_TO
22521: IFFALSE 22734
// begin mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] diff tmp [ i ] ) ;
22523: LD_ADDR_EXP 101
22527: PUSH
22528: LD_EXP 101
22532: PPUSH
22533: LD_INT 4
22535: PPUSH
22536: LD_EXP 101
22540: PUSH
22541: LD_INT 4
22543: ARRAY
22544: PUSH
22545: LD_VAR 0 2
22549: PUSH
22550: LD_VAR 0 1
22554: ARRAY
22555: DIFF
22556: PPUSH
22557: CALL_OW 1
22561: ST_TO_ADDR
// t := IsInUnit ( tmp [ i ] ) ;
22562: LD_ADDR_VAR 0 10
22566: PUSH
22567: LD_VAR 0 2
22571: PUSH
22572: LD_VAR 0 1
22576: ARRAY
22577: PPUSH
22578: CALL_OW 310
22582: ST_TO_ADDR
// if t and GetBType ( t ) = b_bunker then
22583: LD_VAR 0 10
22587: PUSH
22588: LD_VAR 0 10
22592: PPUSH
22593: CALL_OW 266
22597: PUSH
22598: LD_INT 32
22600: EQUAL
22601: AND
22602: IFFALSE 22606
// continue ;
22604: GO 22520
// if t then
22606: LD_VAR 0 10
22610: IFFALSE 22627
// ComExitBuilding ( tmp [ i ] ) ;
22612: LD_VAR 0 2
22616: PUSH
22617: LD_VAR 0 1
22621: ARRAY
22622: PPUSH
22623: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , arm [ 1 ] ) ;
22627: LD_VAR 0 2
22631: PUSH
22632: LD_VAR 0 1
22636: ARRAY
22637: PPUSH
22638: LD_VAR 0 5
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PPUSH
22647: CALL_OW 180
// AddComChangeProfession ( tmp [ i ] , class_soldier ) ;
22651: LD_VAR 0 2
22655: PUSH
22656: LD_VAR 0 1
22660: ARRAY
22661: PPUSH
22662: LD_INT 1
22664: PPUSH
22665: CALL_OW 183
// if emptyTowers then
22669: LD_VAR 0 9
22673: IFFALSE 22732
// begin AddComExitBuilding ( tmp [ i ] ) ;
22675: LD_VAR 0 2
22679: PUSH
22680: LD_VAR 0 1
22684: ARRAY
22685: PPUSH
22686: CALL_OW 182
// AddComEnterUnit ( tmp [ i ] , emptyTowers [ 1 ] ) ;
22690: LD_VAR 0 2
22694: PUSH
22695: LD_VAR 0 1
22699: ARRAY
22700: PPUSH
22701: LD_VAR 0 9
22705: PUSH
22706: LD_INT 1
22708: ARRAY
22709: PPUSH
22710: CALL_OW 180
// emptyTowers := Delete ( emptyTowers , 1 ) ;
22714: LD_ADDR_VAR 0 9
22718: PUSH
22719: LD_VAR 0 9
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 3
22731: ST_TO_ADDR
// end ; end ;
22732: GO 22520
22734: POP
22735: POP
// wait ( 0 0$30 ) ;
22736: LD_INT 1050
22738: PPUSH
22739: CALL_OW 67
// end ; uc_side := 6 ;
22743: LD_ADDR_OWVAR 20
22747: PUSH
22748: LD_INT 6
22750: ST_TO_ADDR
// uc_nation := 3 ;
22751: LD_ADDR_OWVAR 21
22755: PUSH
22756: LD_INT 3
22758: ST_TO_ADDR
// ru := [ ] ;
22759: LD_ADDR_VAR 0 7
22763: PUSH
22764: EMPTY
22765: ST_TO_ADDR
// for i = 1 to 5 do
22766: LD_ADDR_VAR 0 1
22770: PUSH
22771: DOUBLE
22772: LD_INT 1
22774: DEC
22775: ST_TO_ADDR
22776: LD_INT 5
22778: PUSH
22779: FOR_TO
22780: IFFALSE 22900
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , 89 ) ;
22782: LD_INT 22
22784: PUSH
22785: LD_INT 23
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PPUSH
22795: LD_INT 2
22797: PPUSH
22798: CALL_OW 12
22802: ARRAY
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: LD_INT 3
22809: PPUSH
22810: LD_INT 43
22812: PUSH
22813: LD_INT 44
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: PPUSH
22823: LD_INT 2
22825: PPUSH
22826: CALL_OW 12
22830: ARRAY
22831: PPUSH
22832: LD_INT 89
22834: PPUSH
22835: CALL 73898 0 5
// un := CreateVehicle ;
22839: LD_ADDR_VAR 0 8
22843: PUSH
22844: CALL_OW 45
22848: ST_TO_ADDR
// SetDir ( un , 4 ) ;
22849: LD_VAR 0 8
22853: PPUSH
22854: LD_INT 4
22856: PPUSH
22857: CALL_OW 233
// PlaceUnitXYR ( un , 136 , 90 , 8 , false ) ;
22861: LD_VAR 0 8
22865: PPUSH
22866: LD_INT 136
22868: PPUSH
22869: LD_INT 90
22871: PPUSH
22872: LD_INT 8
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 50
// ru := ru ^ un ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 7
22891: PUSH
22892: LD_VAR 0 8
22896: ADD
22897: ST_TO_ADDR
// end ;
22898: GO 22779
22900: POP
22901: POP
// if ru then
22902: LD_VAR 0 7
22906: IFFALSE 22923
// ComAgressiveMove ( ru , 57 , 94 ) ;
22908: LD_VAR 0 7
22912: PPUSH
22913: LD_INT 57
22915: PPUSH
22916: LD_INT 94
22918: PPUSH
22919: CALL_OW 114
// wait ( 3 3$00 ) ;
22923: LD_INT 6300
22925: PPUSH
22926: CALL_OW 67
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ) ;
22930: LD_INT 4
22932: PPUSH
22933: LD_INT 3
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 5
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 4
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 6
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 4
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: LD_INT 7
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: LD_INT 7
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 5
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PPUSH
23030: CALL 62584 0 2
// missionStage := 4 ;
23034: LD_ADDR_EXP 15
23038: PUSH
23039: LD_INT 4
23041: ST_TO_ADDR
// end ;
23042: PPOPN 11
23044: END
// every 0 0$02 trigger missionStage = 4 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 5 do var i , j , tmp , tmp2 , xy , forces , _xy , dist , fac , arm , speaker , emp_towers , veh ;
23045: LD_EXP 15
23049: PUSH
23050: LD_INT 4
23052: EQUAL
23053: PUSH
23054: LD_INT 22
23056: PUSH
23057: LD_INT 4
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PPUSH
23078: CALL_OW 69
23082: PUSH
23083: LD_INT 5
23085: GREATEREQUAL
23086: AND
23087: IFFALSE 27354
23089: GO 23091
23091: DISABLE
23092: LD_INT 0
23094: PPUSH
23095: PPUSH
23096: PPUSH
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
23103: PPUSH
23104: PPUSH
23105: PPUSH
23106: PPUSH
// begin wait ( 0 0$10 ) ;
23107: LD_INT 350
23109: PPUSH
23110: CALL_OW 67
// missionStage := 5 ;
23114: LD_ADDR_EXP 15
23118: PUSH
23119: LD_INT 5
23121: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
23122: LD_ADDR_VAR 0 10
23126: PUSH
23127: LD_INT 22
23129: PUSH
23130: LD_INT 4
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 4
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 30
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: ST_TO_ADDR
// forces := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 16 ] ] , [ f_not , [ f_class , 12 ] ] ] ) diff Powell ;
23174: LD_ADDR_VAR 0 6
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_INT 4
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 21
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: LD_INT 25
23204: PUSH
23205: LD_INT 16
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 12
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: PUSH
23244: LD_EXP 60
23248: DIFF
23249: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
23250: LD_ADDR_VAR 0 9
23254: PUSH
23255: LD_INT 22
23257: PUSH
23258: LD_INT 4
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 30
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: PUSH
23284: LD_INT 1
23286: ARRAY
23287: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
23288: LD_INT 350
23290: PPUSH
23291: CALL_OW 67
// if mc_vehicles [ 4 ] < 5 and BuildingStatus ( fac ) = bs_idle then
23295: LD_EXP 120
23299: PUSH
23300: LD_INT 4
23302: ARRAY
23303: PUSH
23304: LD_INT 5
23306: LESS
23307: PUSH
23308: LD_VAR 0 9
23312: PPUSH
23313: CALL_OW 461
23317: PUSH
23318: LD_INT 2
23320: EQUAL
23321: AND
23322: IFFALSE 23352
// MC_InsertProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ) ;
23324: LD_INT 4
23326: PPUSH
23327: LD_INT 3
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 5
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: PPUSH
23348: CALL 62632 0 2
// until mc_vehicles [ 4 ] >= 5 and UnitFilter ( mc_vehicles [ 4 ] , [ f_empty ] ) >= 5 ;
23352: LD_EXP 120
23356: PUSH
23357: LD_INT 4
23359: ARRAY
23360: PUSH
23361: LD_INT 5
23363: GREATEREQUAL
23364: PUSH
23365: LD_EXP 120
23369: PUSH
23370: LD_INT 4
23372: ARRAY
23373: PPUSH
23374: LD_INT 58
23376: PUSH
23377: EMPTY
23378: LIST
23379: PPUSH
23380: CALL_OW 72
23384: PUSH
23385: LD_INT 5
23387: GREATEREQUAL
23388: AND
23389: IFFALSE 23288
// powellAllowRetreat := false ;
23391: LD_ADDR_EXP 19
23395: PUSH
23396: LD_INT 0
23398: ST_TO_ADDR
// activeAttacks := false ;
23399: LD_ADDR_EXP 16
23403: PUSH
23404: LD_INT 0
23406: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23407: LD_INT 35
23409: PPUSH
23410: CALL_OW 67
// until FilterAllUnits ( [ f_side , 6 ] ) = 0 ;
23414: LD_INT 22
23416: PUSH
23417: LD_INT 6
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PPUSH
23424: CALL_OW 69
23428: PUSH
23429: LD_INT 0
23431: EQUAL
23432: IFFALSE 23407
// tmp := mc_vehicles [ 4 ] ;
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: LD_EXP 120
23443: PUSH
23444: LD_INT 4
23446: ARRAY
23447: ST_TO_ADDR
// for i := 1 to powellSquadAttack do
23448: LD_ADDR_VAR 0 1
23452: PUSH
23453: DOUBLE
23454: LD_INT 1
23456: DEC
23457: ST_TO_ADDR
23458: LD_EXP 18
23462: PUSH
23463: FOR_TO
23464: IFFALSE 23725
// begin for j in powellSquadAttack [ i ] do
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_EXP 18
23475: PUSH
23476: LD_VAR 0 1
23480: ARRAY
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23721
// begin forces := forces diff j ;
23485: LD_ADDR_VAR 0 6
23489: PUSH
23490: LD_VAR 0 6
23494: PUSH
23495: LD_VAR 0 2
23499: DIFF
23500: ST_TO_ADDR
// SetTag ( j , 1 ) ;
23501: LD_VAR 0 2
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: CALL_OW 109
// wait ( 0 0$2 ) ;
23513: LD_INT 70
23515: PPUSH
23516: CALL_OW 67
// if IsInUnit ( j ) then
23520: LD_VAR 0 2
23524: PPUSH
23525: CALL_OW 310
23529: IFFALSE 23540
// ComExitBuilding ( j ) ;
23531: LD_VAR 0 2
23535: PPUSH
23536: CALL_OW 122
// if GetClass ( j ) <> 1 then
23540: LD_VAR 0 2
23544: PPUSH
23545: CALL_OW 257
23549: PUSH
23550: LD_INT 1
23552: NONEQUAL
23553: IFFALSE 23633
// begin if UnitsInside ( arm [ 1 ] ) >= 5 then
23555: LD_VAR 0 10
23559: PUSH
23560: LD_INT 1
23562: ARRAY
23563: PPUSH
23564: CALL_OW 313
23568: PUSH
23569: LD_INT 5
23571: GREATEREQUAL
23572: IFFALSE 23594
// AddComEnterUnit ( j , arm [ 2 ] ) else
23574: LD_VAR 0 2
23578: PPUSH
23579: LD_VAR 0 10
23583: PUSH
23584: LD_INT 2
23586: ARRAY
23587: PPUSH
23588: CALL_OW 180
23592: GO 23612
// AddComEnterUnit ( j , arm [ 1 ] ) ;
23594: LD_VAR 0 2
23598: PPUSH
23599: LD_VAR 0 10
23603: PUSH
23604: LD_INT 1
23606: ARRAY
23607: PPUSH
23608: CALL_OW 180
// AddComChangeProfession ( j , 1 ) ;
23612: LD_VAR 0 2
23616: PPUSH
23617: LD_INT 1
23619: PPUSH
23620: CALL_OW 183
// AddComExitBuilding ( j ) ;
23624: LD_VAR 0 2
23628: PPUSH
23629: CALL_OW 182
// end ; if i = 2 then
23633: LD_VAR 0 1
23637: PUSH
23638: LD_INT 2
23640: EQUAL
23641: IFFALSE 23658
// AddComMoveXY ( j , 61 , 93 ) ;
23643: LD_VAR 0 2
23647: PPUSH
23648: LD_INT 61
23650: PPUSH
23651: LD_INT 93
23653: PPUSH
23654: CALL_OW 171
// if i = 1 then
23658: LD_VAR 0 1
23662: PUSH
23663: LD_INT 1
23665: EQUAL
23666: IFFALSE 23719
// begin AddComEnterUnit ( j , tmp [ 1 ] ) ;
23668: LD_VAR 0 2
23672: PPUSH
23673: LD_VAR 0 3
23677: PUSH
23678: LD_INT 1
23680: ARRAY
23681: PPUSH
23682: CALL_OW 180
// tmp := Delete ( tmp , 1 ) ;
23686: LD_ADDR_VAR 0 3
23690: PUSH
23691: LD_VAR 0 3
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 3
23703: ST_TO_ADDR
// AddComMoveXY ( j , 69 , 94 ) ;
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_INT 69
23711: PPUSH
23712: LD_INT 94
23714: PPUSH
23715: CALL_OW 171
// end ; end ;
23719: GO 23482
23721: POP
23722: POP
// end ;
23723: GO 23463
23725: POP
23726: POP
// wait ( 0 0$30 ) ;
23727: LD_INT 1050
23729: PPUSH
23730: CALL_OW 67
// MC_Kill ( 4 ) ;
23734: LD_INT 4
23736: PPUSH
23737: CALL 38607 0 1
// tmp := UnitsInside ( fac ) ;
23741: LD_ADDR_VAR 0 3
23745: PUSH
23746: LD_VAR 0 9
23750: PPUSH
23751: CALL_OW 313
23755: ST_TO_ADDR
// if tmp then
23756: LD_VAR 0 3
23760: IFFALSE 23881
// for i in tmp do
23762: LD_ADDR_VAR 0 1
23766: PUSH
23767: LD_VAR 0 3
23771: PUSH
23772: FOR_IN
23773: IFFALSE 23879
// begin ComExitBuilding ( i ) ;
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 122
// if UnitsInside ( arm [ 2 ] ) < 6 then
23784: LD_VAR 0 10
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: PPUSH
23793: CALL_OW 313
23797: PUSH
23798: LD_INT 6
23800: LESS
23801: IFFALSE 23823
// AddComEnterUnit ( i , arm [ 2 ] ) else
23803: LD_VAR 0 1
23807: PPUSH
23808: LD_VAR 0 10
23812: PUSH
23813: LD_INT 2
23815: ARRAY
23816: PPUSH
23817: CALL_OW 180
23821: GO 23877
// if UnitsInside ( arm [ 1 ] ) < 6 then
23823: LD_VAR 0 10
23827: PUSH
23828: LD_INT 1
23830: ARRAY
23831: PPUSH
23832: CALL_OW 313
23836: PUSH
23837: LD_INT 6
23839: LESS
23840: IFFALSE 23862
// AddComEnterUnit ( i , arm [ 1 ] ) else
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_VAR 0 10
23851: PUSH
23852: LD_INT 1
23854: ARRAY
23855: PPUSH
23856: CALL_OW 180
23860: GO 23877
// AddComMoveXY ( i , 37 , 68 ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: LD_INT 37
23869: PPUSH
23870: LD_INT 68
23872: PPUSH
23873: CALL_OW 171
// end ;
23877: GO 23772
23879: POP
23880: POP
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) diff vip ;
23881: LD_ADDR_VAR 0 11
23885: PUSH
23886: LD_VAR 0 6
23890: PPUSH
23891: LD_INT 26
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 72
23905: PUSH
23906: LD_EXP 61
23910: DIFF
23911: ST_TO_ADDR
// if not speaker then
23912: LD_VAR 0 11
23916: NOT
23917: IFFALSE 23944
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) ;
23919: LD_ADDR_VAR 0 11
23923: PUSH
23924: LD_VAR 0 6
23928: PPUSH
23929: LD_INT 26
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 72
23943: ST_TO_ADDR
// if speaker then
23944: LD_VAR 0 11
23948: IFFALSE 23964
// speaker := speaker [ 1 ] ;
23950: LD_ADDR_VAR 0 11
23954: PUSH
23955: LD_VAR 0 11
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: ST_TO_ADDR
// Video ( true ) ;
23964: LD_INT 1
23966: PPUSH
23967: CALL 106331 0 1
// CenterNowOnUnits ( Powell ) ;
23971: LD_EXP 60
23975: PPUSH
23976: CALL_OW 87
// tmp := UnitFilter ( forces , [ f_not , [ f_class , 1 ] ] ) ;
23980: LD_ADDR_VAR 0 3
23984: PUSH
23985: LD_VAR 0 6
23989: PPUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 25
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 72
24011: ST_TO_ADDR
// emp_towers := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
24012: LD_ADDR_VAR 0 12
24016: PUSH
24017: LD_INT 22
24019: PUSH
24020: LD_INT 4
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 30
24029: PUSH
24030: LD_INT 32
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 58
24039: PUSH
24040: EMPTY
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: ST_TO_ADDR
// for i := 1 to 4 do
24053: LD_ADDR_VAR 0 1
24057: PUSH
24058: DOUBLE
24059: LD_INT 1
24061: DEC
24062: ST_TO_ADDR
24063: LD_INT 4
24065: PUSH
24066: FOR_TO
24067: IFFALSE 24213
// begin if IsInUnit ( tmp [ i ] ) then
24069: LD_VAR 0 3
24073: PUSH
24074: LD_VAR 0 1
24078: ARRAY
24079: PPUSH
24080: CALL_OW 310
24084: IFFALSE 24101
// ComExitBuilding ( tmp [ i ] ) ;
24086: LD_VAR 0 3
24090: PUSH
24091: LD_VAR 0 1
24095: ARRAY
24096: PPUSH
24097: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , arm [ 1 ] ) ;
24101: LD_VAR 0 3
24105: PUSH
24106: LD_VAR 0 1
24110: ARRAY
24111: PPUSH
24112: LD_VAR 0 10
24116: PUSH
24117: LD_INT 1
24119: ARRAY
24120: PPUSH
24121: CALL_OW 180
// AddComChangeProfession ( tmp [ i ] , class_soldier ) ;
24125: LD_VAR 0 3
24129: PUSH
24130: LD_VAR 0 1
24134: ARRAY
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 183
// if Count ( emp_towers ) then
24143: LD_VAR 0 12
24147: PPUSH
24148: CALL 71160 0 1
24152: IFFALSE 24211
// begin AddComExitBuilding ( tmp [ i ] ) ;
24154: LD_VAR 0 3
24158: PUSH
24159: LD_VAR 0 1
24163: ARRAY
24164: PPUSH
24165: CALL_OW 182
// AddComEnterUnit ( tmp [ i ] , emp_towers [ 1 ] ) ;
24169: LD_VAR 0 3
24173: PUSH
24174: LD_VAR 0 1
24178: ARRAY
24179: PPUSH
24180: LD_VAR 0 12
24184: PUSH
24185: LD_INT 1
24187: ARRAY
24188: PPUSH
24189: CALL_OW 180
// emp_towers := Delete ( emp_towers , 1 ) ;
24193: LD_ADDR_VAR 0 12
24197: PUSH
24198: LD_VAR 0 12
24202: PPUSH
24203: LD_INT 1
24205: PPUSH
24206: CALL_OW 3
24210: ST_TO_ADDR
// end ; end ;
24211: GO 24066
24213: POP
24214: POP
// wait ( 0 0$5 ) ;
24215: LD_INT 175
24217: PPUSH
24218: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
24222: LD_VAR 0 3
24226: PPUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 54
24232: PUSH
24233: EMPTY
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 72
24244: IFFALSE 24264
// ComEnterUnit ( tmp , arm [ 1 ] ) ;
24246: LD_VAR 0 3
24250: PPUSH
24251: LD_VAR 0 10
24255: PUSH
24256: LD_INT 1
24258: ARRAY
24259: PPUSH
24260: CALL_OW 120
// tmp := UnitFilter ( powellSquadAttack [ 1 ] ^ powellSquadAttack [ 2 ] , [ f_sex , sex_male ] ) ;
24264: LD_ADDR_VAR 0 3
24268: PUSH
24269: LD_EXP 18
24273: PUSH
24274: LD_INT 1
24276: ARRAY
24277: PUSH
24278: LD_EXP 18
24282: PUSH
24283: LD_INT 2
24285: ARRAY
24286: ADD
24287: PPUSH
24288: LD_INT 26
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 72
24302: ST_TO_ADDR
// for i in powellSquadAttack [ 2 ] do
24303: LD_ADDR_VAR 0 1
24307: PUSH
24308: LD_EXP 18
24312: PUSH
24313: LD_INT 2
24315: ARRAY
24316: PUSH
24317: FOR_IN
24318: IFFALSE 24336
// ComTurnUnit ( i , Powell ) ;
24320: LD_VAR 0 1
24324: PPUSH
24325: LD_EXP 60
24329: PPUSH
24330: CALL_OW 119
24334: GO 24317
24336: POP
24337: POP
// Say ( Powell , D5-Pow-1 ) ;
24338: LD_EXP 60
24342: PPUSH
24343: LD_STRING D5-Pow-1
24345: PPUSH
24346: CALL_OW 88
// if tmp then
24350: LD_VAR 0 3
24354: IFFALSE 24372
// Say ( tmp [ 1 ] , D5-Sol2-1 ) ;
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: LD_STRING D5-Sol2-1
24367: PPUSH
24368: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
24372: LD_EXP 60
24376: PPUSH
24377: LD_STRING D5-Pow-2
24379: PPUSH
24380: CALL_OW 88
// if tmp > 1 then
24384: LD_VAR 0 3
24388: PUSH
24389: LD_INT 1
24391: GREATER
24392: IFFALSE 24410
// Say ( tmp [ 2 ] , D5-Sol2-2 ) ;
24394: LD_VAR 0 3
24398: PUSH
24399: LD_INT 2
24401: ARRAY
24402: PPUSH
24403: LD_STRING D5-Sol2-2
24405: PPUSH
24406: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
24410: LD_EXP 60
24414: PPUSH
24415: LD_STRING D5-Pow-3
24417: PPUSH
24418: CALL_OW 88
// wait ( 0 0$1 ) ;
24422: LD_INT 35
24424: PPUSH
24425: CALL_OW 67
// tmp := powellSquadAttack [ 1 ] union powellSquadAttack [ 2 ] ;
24429: LD_ADDR_VAR 0 3
24433: PUSH
24434: LD_EXP 18
24438: PUSH
24439: LD_INT 1
24441: ARRAY
24442: PUSH
24443: LD_EXP 18
24447: PUSH
24448: LD_INT 2
24450: ARRAY
24451: UNION
24452: ST_TO_ADDR
// ComAgressiveMove ( tmp , 80 , 67 ) ;
24453: LD_VAR 0 3
24457: PPUSH
24458: LD_INT 80
24460: PPUSH
24461: LD_INT 67
24463: PPUSH
24464: CALL_OW 114
// wait ( 0 0$2 ) ;
24468: LD_INT 70
24470: PPUSH
24471: CALL_OW 67
// CenterOnXY ( 79 , 72 ) ;
24475: LD_INT 79
24477: PPUSH
24478: LD_INT 72
24480: PPUSH
24481: CALL_OW 84
// repeat wait ( 0 0$2 ) ;
24485: LD_INT 70
24487: PPUSH
24488: CALL_OW 67
// until UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) ;
24492: LD_VAR 0 3
24496: PPUSH
24497: LD_INT 3
24499: PUSH
24500: LD_INT 24
24502: PUSH
24503: LD_INT 1000
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PPUSH
24514: CALL_OW 72
24518: IFFALSE 24485
// Say ( Powell , D5a-Pow-1 ) ;
24520: LD_EXP 60
24524: PPUSH
24525: LD_STRING D5a-Pow-1
24527: PPUSH
24528: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
24532: LD_EXP 60
24536: PPUSH
24537: LD_STRING D5a-Pow-1a
24539: PPUSH
24540: CALL_OW 88
// wait ( 0 0$0.7 ) ;
24544: LD_INT 24
24546: PPUSH
24547: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
24551: LD_EXP 60
24555: PPUSH
24556: LD_STRING D5a-Pow-1b
24558: PPUSH
24559: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24563: LD_INT 10
24565: PPUSH
24566: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
24570: LD_EXP 60
24574: PPUSH
24575: LD_STRING D5a-Pow-1c
24577: PPUSH
24578: CALL_OW 88
// ComMoveXY ( tmp , 68 , 63 ) ;
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_INT 68
24589: PPUSH
24590: LD_INT 63
24592: PPUSH
24593: CALL_OW 111
// wait ( 0 0$0.5 ) ;
24597: LD_INT 18
24599: PPUSH
24600: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
24604: LD_EXP 60
24608: PPUSH
24609: LD_STRING D5a-Pow-1d
24611: PPUSH
24612: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
24616: LD_INT 35
24618: PPUSH
24619: CALL_OW 67
// if not HasTask ( tmp ) then
24623: LD_VAR 0 3
24627: PPUSH
24628: CALL_OW 314
24632: NOT
24633: IFFALSE 24650
// ComAgressiveMove ( tmp , 68 , 63 ) ;
24635: LD_VAR 0 3
24639: PPUSH
24640: LD_INT 68
24642: PPUSH
24643: LD_INT 63
24645: PPUSH
24646: CALL_OW 114
// until not UnitFilter ( tmp , [ f_lives , 1 ] ) ;
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_INT 24
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 72
24669: NOT
24670: IFFALSE 24616
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 60 , 93 , 10 ] , [ f_not , [ f_inside ] ] ] ) diff Powell ;
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 22
24679: PUSH
24680: LD_INT 4
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 92
24689: PUSH
24690: LD_INT 60
24692: PUSH
24693: LD_INT 93
24695: PUSH
24696: LD_INT 10
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: LD_INT 54
24710: PUSH
24711: EMPTY
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 69
24727: PUSH
24728: LD_EXP 60
24732: DIFF
24733: ST_TO_ADDR
// if tmp then
24734: LD_VAR 0 3
24738: IFFALSE 24772
// for i in tmp do
24740: LD_ADDR_VAR 0 1
24744: PUSH
24745: LD_VAR 0 3
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24770
// ComMoveXY ( i , 36 , 67 ) ;
24753: LD_VAR 0 1
24757: PPUSH
24758: LD_INT 36
24760: PPUSH
24761: LD_INT 67
24763: PPUSH
24764: CALL_OW 111
24768: GO 24750
24770: POP
24771: POP
// wait ( 0 0$3 ) ;
24772: LD_INT 105
24774: PPUSH
24775: CALL_OW 67
// Say ( speaker , D6-Sol3-1 ) ;
24779: LD_VAR 0 11
24783: PPUSH
24784: LD_STRING D6-Sol3-1
24786: PPUSH
24787: CALL_OW 88
// CenterNowOnUnits ( Powell ) ;
24791: LD_EXP 60
24795: PPUSH
24796: CALL_OW 87
// Say ( Powell , D6-Pow-1 ) ;
24800: LD_EXP 60
24804: PPUSH
24805: LD_STRING D6-Pow-1
24807: PPUSH
24808: CALL_OW 88
// tmp := [ ] ;
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: EMPTY
24818: ST_TO_ADDR
// for i = 1 to 2 do
24819: LD_ADDR_VAR 0 1
24823: PUSH
24824: DOUBLE
24825: LD_INT 1
24827: DEC
24828: ST_TO_ADDR
24829: LD_INT 2
24831: PUSH
24832: FOR_TO
24833: IFFALSE 24947
// begin uc_side := 8 ;
24835: LD_ADDR_OWVAR 20
24839: PUSH
24840: LD_INT 8
24842: ST_TO_ADDR
// uc_nation := 2 ;
24843: LD_ADDR_OWVAR 21
24847: PUSH
24848: LD_INT 2
24850: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb , 100 ) ;
24851: LD_INT 14
24853: PPUSH
24854: LD_INT 3
24856: PPUSH
24857: LD_INT 2
24859: PPUSH
24860: LD_INT 29
24862: PPUSH
24863: LD_INT 100
24865: PPUSH
24866: CALL 73898 0 5
// veh := CreateVehicle ;
24870: LD_ADDR_VAR 0 13
24874: PUSH
24875: CALL_OW 45
24879: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
24880: LD_VAR 0 13
24884: PPUSH
24885: LD_INT 4
24887: PPUSH
24888: CALL_OW 233
// PlaceUnitXYR ( veh , 99 , 83 , 3 , false ) ;
24892: LD_VAR 0 13
24896: PPUSH
24897: LD_INT 99
24899: PPUSH
24900: LD_INT 83
24902: PPUSH
24903: LD_INT 3
24905: PPUSH
24906: LD_INT 0
24908: PPUSH
24909: CALL_OW 50
// wait ( 3 ) ;
24913: LD_INT 3
24915: PPUSH
24916: CALL_OW 67
// Connect ( veh ) ;
24920: LD_VAR 0 13
24924: PPUSH
24925: CALL 76998 0 1
// tmp := tmp ^ veh ;
24929: LD_ADDR_VAR 0 3
24933: PUSH
24934: LD_VAR 0 3
24938: PUSH
24939: LD_VAR 0 13
24943: ADD
24944: ST_TO_ADDR
// end ;
24945: GO 24832
24947: POP
24948: POP
// wait ( 0 0$1 ) ;
24949: LD_INT 35
24951: PPUSH
24952: CALL_OW 67
// PlaceSeeing ( 99 , 83 , 1 , 10 ) ;
24956: LD_INT 99
24958: PPUSH
24959: LD_INT 83
24961: PPUSH
24962: LD_INT 1
24964: PPUSH
24965: LD_INT 10
24967: PPUSH
24968: CALL_OW 330
// CenterNowOnXY ( 99 , 83 ) ;
24972: LD_INT 99
24974: PPUSH
24975: LD_INT 83
24977: PPUSH
24978: CALL_OW 86
// Say ( speaker , D6-Sol3-2 ) ;
24982: LD_VAR 0 11
24986: PPUSH
24987: LD_STRING D6-Sol3-2
24989: PPUSH
24990: CALL_OW 88
// async ;
24994: ASYNC
// Say ( Powell , D6-Pow-2 ) ;
24995: LD_EXP 60
24999: PPUSH
25000: LD_STRING D6-Pow-2
25002: PPUSH
25003: CALL_OW 88
// ComAttackUnit ( tmp [ 1 ] , fac ) ;
25007: LD_VAR 0 3
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: PPUSH
25016: LD_VAR 0 9
25020: PPUSH
25021: CALL_OW 115
// ComAttackUnit ( tmp [ 2 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , tmp [ 2 ] ) ) ;
25025: LD_VAR 0 3
25029: PUSH
25030: LD_INT 2
25032: ARRAY
25033: PPUSH
25034: LD_INT 22
25036: PUSH
25037: LD_INT 4
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 21
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PPUSH
25058: CALL_OW 69
25062: PPUSH
25063: LD_VAR 0 3
25067: PUSH
25068: LD_INT 2
25070: ARRAY
25071: PPUSH
25072: CALL_OW 74
25076: PPUSH
25077: CALL_OW 115
// CenterNowOnUnits ( Powell ) ;
25081: LD_EXP 60
25085: PPUSH
25086: CALL_OW 87
// RemoveSeeing ( 99 , 83 , 1 ) ;
25090: LD_INT 99
25092: PPUSH
25093: LD_INT 83
25095: PPUSH
25096: LD_INT 1
25098: PPUSH
25099: CALL_OW 331
// repeat wait ( 4 ) ;
25103: LD_INT 4
25105: PPUSH
25106: CALL_OW 67
// if GetLives ( tmp [ 1 ] ) < 1000 then
25110: LD_VAR 0 3
25114: PUSH
25115: LD_INT 1
25117: ARRAY
25118: PPUSH
25119: CALL_OW 256
25123: PUSH
25124: LD_INT 1000
25126: LESS
25127: IFFALSE 25145
// SetLives ( tmp [ 1 ] , 1000 ) ;
25129: LD_VAR 0 3
25133: PUSH
25134: LD_INT 1
25136: ARRAY
25137: PPUSH
25138: LD_INT 1000
25140: PPUSH
25141: CALL_OW 234
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) = 0 ;
25145: LD_INT 22
25147: PUSH
25148: LD_INT 4
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 30
25157: PUSH
25158: LD_INT 3
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PPUSH
25169: CALL_OW 69
25173: PUSH
25174: LD_INT 0
25176: EQUAL
25177: IFFALSE 25103
// skirmish := false ;
25179: LD_ADDR_EXP 99
25183: PUSH
25184: LD_INT 0
25186: ST_TO_ADDR
// sync ;
25187: SYNC
// Say ( Powell , D6a-Pow-1 ) ;
25188: LD_EXP 60
25192: PPUSH
25193: LD_STRING D6a-Pow-1
25195: PPUSH
25196: CALL_OW 88
// Say ( speaker , D6a-Sol3-1 ) ;
25200: LD_VAR 0 11
25204: PPUSH
25205: LD_STRING D6a-Sol3-1
25207: PPUSH
25208: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
25212: LD_EXP 60
25216: PPUSH
25217: LD_STRING D6a-Pow-2
25219: PPUSH
25220: CALL_OW 88
// Say ( speaker , D6a-Sol3-2 ) ;
25224: LD_VAR 0 11
25228: PPUSH
25229: LD_STRING D6a-Sol3-2
25231: PPUSH
25232: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
25236: LD_EXP 60
25240: PPUSH
25241: LD_STRING D6a-Pow-3
25243: PPUSH
25244: CALL_OW 88
// powellCenterCameraMode := true ;
25248: LD_ADDR_EXP 20
25252: PUSH
25253: LD_INT 1
25255: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
25256: LD_ADDR_VAR 0 1
25260: PUSH
25261: LD_INT 22
25263: PUSH
25264: LD_INT 8
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 25
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: FOR_IN
25291: IFFALSE 25346
// begin SetTag ( i , 1 ) ;
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 109
// ComExitBuilding ( i ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 122
// AddComMoveXY ( i , 35 , 6 ) ;
25314: LD_VAR 0 1
25318: PPUSH
25319: LD_INT 35
25321: PPUSH
25322: LD_INT 6
25324: PPUSH
25325: CALL_OW 171
// AddComMoveXY ( i , 53 , 4 ) ;
25329: LD_VAR 0 1
25333: PPUSH
25334: LD_INT 53
25336: PPUSH
25337: LD_INT 4
25339: PPUSH
25340: CALL_OW 171
// end ;
25344: GO 25290
25346: POP
25347: POP
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ) ;
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 22
25355: PUSH
25356: LD_INT 4
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 21
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 3
25375: PUSH
25376: LD_INT 34
25378: PUSH
25379: LD_INT 12
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 69
25399: ST_TO_ADDR
// ComEnterUnit ( Powell , NearestUnitToUnit ( tmp , Powell ) ) ;
25400: LD_EXP 60
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: LD_EXP 60
25414: PPUSH
25415: CALL_OW 74
25419: PPUSH
25420: CALL_OW 120
// AddComMoveXY ( Powell , 100 , 88 ) ;
25424: LD_EXP 60
25428: PPUSH
25429: LD_INT 100
25431: PPUSH
25432: LD_INT 88
25434: PPUSH
25435: CALL_OW 171
// AddComMoveXY ( Powell , 100 , 75 ) ;
25439: LD_EXP 60
25443: PPUSH
25444: LD_INT 100
25446: PPUSH
25447: LD_INT 75
25449: PPUSH
25450: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 53 ) ;
25454: LD_EXP 60
25458: PPUSH
25459: LD_INT 88
25461: PPUSH
25462: LD_INT 53
25464: PPUSH
25465: CALL_OW 171
// DoNotAttack ( 8 , Powell ) ;
25469: LD_INT 8
25471: PPUSH
25472: LD_EXP 60
25476: PPUSH
25477: CALL_OW 471
// repeat wait ( 3 ) ;
25481: LD_INT 3
25483: PPUSH
25484: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 100 , 75 , 6 ] ] ) ;
25488: LD_INT 22
25490: PUSH
25491: LD_INT 4
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 92
25500: PUSH
25501: LD_INT 100
25503: PUSH
25504: LD_INT 75
25506: PUSH
25507: LD_INT 6
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: IFFALSE 25481
// async ;
25526: ASYNC
// Say ( Powell , D6b-Pow-1 ) ;
25527: LD_EXP 60
25531: PPUSH
25532: LD_STRING D6b-Pow-1
25534: PPUSH
25535: CALL_OW 88
// repeat wait ( 3 ) ;
25539: LD_INT 3
25541: PPUSH
25542: CALL_OW 67
// if GetLives ( IsInUnit ( Powell ) ) < 1000 then
25546: LD_EXP 60
25550: PPUSH
25551: CALL_OW 310
25555: PPUSH
25556: CALL_OW 256
25560: PUSH
25561: LD_INT 1000
25563: LESS
25564: IFFALSE 25583
// SetLives ( IsInUnit ( Powell ) , 1000 ) ;
25566: LD_EXP 60
25570: PPUSH
25571: CALL_OW 310
25575: PPUSH
25576: LD_INT 1000
25578: PPUSH
25579: CALL_OW 234
// if GetLives ( Powell ) < 1000 then
25583: LD_EXP 60
25587: PPUSH
25588: CALL_OW 256
25592: PUSH
25593: LD_INT 1000
25595: LESS
25596: IFFALSE 25610
// SetLives ( Powell , 1000 ) ;
25598: LD_EXP 60
25602: PPUSH
25603: LD_INT 1000
25605: PPUSH
25606: CALL_OW 234
// if GetDistUnits ( Powell , powellBomb ) < 5 or GetDistUnits ( IsInUnit ( Powell ) , powellBomb ) < 5 then
25610: LD_EXP 60
25614: PPUSH
25615: LD_EXP 66
25619: PPUSH
25620: CALL_OW 296
25624: PUSH
25625: LD_INT 5
25627: LESS
25628: PUSH
25629: LD_EXP 60
25633: PPUSH
25634: CALL_OW 310
25638: PPUSH
25639: LD_EXP 66
25643: PPUSH
25644: CALL_OW 296
25648: PUSH
25649: LD_INT 5
25651: LESS
25652: OR
25653: IFFALSE 25672
// SetLives ( IsInUnit ( Powell ) , 100 ) ;
25655: LD_EXP 60
25659: PPUSH
25660: CALL_OW 310
25664: PPUSH
25665: LD_INT 100
25667: PPUSH
25668: CALL_OW 234
// until not IsInUnit ( Powell ) ;
25672: LD_EXP 60
25676: PPUSH
25677: CALL_OW 310
25681: NOT
25682: IFFALSE 25539
// DoNotAttack ( 8 , powellBomb ) ;
25684: LD_INT 8
25686: PPUSH
25687: LD_EXP 66
25691: PPUSH
25692: CALL_OW 471
// game_speed := 4 ;
25696: LD_ADDR_OWVAR 65
25700: PUSH
25701: LD_INT 4
25703: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1a ) ;
25704: LD_EXP 60
25708: PPUSH
25709: LD_STRING D6b-Pow-1a
25711: PPUSH
25712: CALL_OW 88
// AddComEnterUnit ( Powell , powellBomb ) ;
25716: LD_EXP 60
25720: PPUSH
25721: LD_EXP 66
25725: PPUSH
25726: CALL_OW 180
// sync ;
25730: SYNC
// repeat wait ( 0 0$1 ) ;
25731: LD_INT 35
25733: PPUSH
25734: CALL_OW 67
// until IsInUnit ( Powell ) ;
25738: LD_EXP 60
25742: PPUSH
25743: CALL_OW 310
25747: IFFALSE 25731
// DoNotAttack ( 8 , IsInUnit ( Powell ) ) ;
25749: LD_INT 8
25751: PPUSH
25752: LD_EXP 60
25756: PPUSH
25757: CALL_OW 310
25761: PPUSH
25762: CALL_OW 471
// AddComMoveXY ( Powell , 91 , 44 ) ;
25766: LD_EXP 60
25770: PPUSH
25771: LD_INT 91
25773: PPUSH
25774: LD_INT 44
25776: PPUSH
25777: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
25781: LD_EXP 60
25785: PPUSH
25786: LD_INT 96
25788: PPUSH
25789: LD_INT 44
25791: PPUSH
25792: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
25796: LD_EXP 60
25800: PPUSH
25801: LD_INT 96
25803: PPUSH
25804: LD_INT 41
25806: PPUSH
25807: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
25811: LD_EXP 60
25815: PPUSH
25816: LD_INT 92
25818: PPUSH
25819: LD_INT 39
25821: PPUSH
25822: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
25826: LD_EXP 60
25830: PPUSH
25831: LD_INT 88
25833: PPUSH
25834: LD_INT 41
25836: PPUSH
25837: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
25841: LD_EXP 60
25845: PPUSH
25846: LD_INT 91
25848: PPUSH
25849: LD_INT 44
25851: PPUSH
25852: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
25856: LD_EXP 60
25860: PPUSH
25861: LD_INT 96
25863: PPUSH
25864: LD_INT 44
25866: PPUSH
25867: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
25871: LD_EXP 60
25875: PPUSH
25876: LD_INT 96
25878: PPUSH
25879: LD_INT 41
25881: PPUSH
25882: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
25886: LD_EXP 60
25890: PPUSH
25891: LD_INT 92
25893: PPUSH
25894: LD_INT 39
25896: PPUSH
25897: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
25901: LD_EXP 60
25905: PPUSH
25906: LD_INT 88
25908: PPUSH
25909: LD_INT 41
25911: PPUSH
25912: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
25916: LD_EXP 60
25920: PPUSH
25921: LD_INT 91
25923: PPUSH
25924: LD_INT 44
25926: PPUSH
25927: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 39 ) ;
25931: LD_EXP 60
25935: PPUSH
25936: LD_INT 93
25938: PPUSH
25939: LD_INT 39
25941: PPUSH
25942: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 36 ) ;
25946: LD_EXP 60
25950: PPUSH
25951: LD_INT 93
25953: PPUSH
25954: LD_INT 36
25956: PPUSH
25957: CALL_OW 171
// wait ( 0 0$3.5 ) ;
25961: LD_INT 122
25963: PPUSH
25964: CALL_OW 67
// game_speed := 4 ;
25968: LD_ADDR_OWVAR 65
25972: PUSH
25973: LD_INT 4
25975: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1b ) ;
25976: LD_EXP 60
25980: PPUSH
25981: LD_STRING D6b-Pow-1b
25983: PPUSH
25984: CALL_OW 88
// tmp := [ ] ;
25988: LD_ADDR_VAR 0 3
25992: PUSH
25993: EMPTY
25994: ST_TO_ADDR
// xy := [ [ 78 , 47 ] , [ 106 , 53 ] ] ;
25995: LD_ADDR_VAR 0 5
25999: PUSH
26000: LD_INT 78
26002: PUSH
26003: LD_INT 47
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 106
26012: PUSH
26013: LD_INT 53
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_distxy , 90 , 52 , 12 ] ] ) do
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_INT 8
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 21
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 92
26051: PUSH
26052: LD_INT 90
26054: PUSH
26055: LD_INT 52
26057: PUSH
26058: LD_INT 12
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: PUSH
26077: FOR_IN
26078: IFFALSE 26103
// tmp := tmp ^ UnitsInside ( i ) ;
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_VAR 0 3
26089: PUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 313
26099: ADD
26100: ST_TO_ADDR
26101: GO 26077
26103: POP
26104: POP
// for i in tmp do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 3
26114: PUSH
26115: FOR_IN
26116: IFFALSE 26278
// begin dist := 9999 ;
26118: LD_ADDR_VAR 0 8
26122: PUSH
26123: LD_INT 9999
26125: ST_TO_ADDR
// _xy := [ ] ;
26126: LD_ADDR_VAR 0 7
26130: PUSH
26131: EMPTY
26132: ST_TO_ADDR
// SetTag ( i , 1 ) ;
26133: LD_VAR 0 1
26137: PPUSH
26138: LD_INT 1
26140: PPUSH
26141: CALL_OW 109
// ComExitBuilding ( i ) ;
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 122
// for j in xy do
26154: LD_ADDR_VAR 0 2
26158: PUSH
26159: LD_VAR 0 5
26163: PUSH
26164: FOR_IN
26165: IFFALSE 26247
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < dist then
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_VAR 0 2
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 2
26185: PUSH
26186: LD_INT 2
26188: ARRAY
26189: PPUSH
26190: CALL_OW 297
26194: PUSH
26195: LD_VAR 0 8
26199: LESS
26200: IFFALSE 26245
// begin dist := GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) ;
26202: LD_ADDR_VAR 0 8
26206: PUSH
26207: LD_VAR 0 1
26211: PPUSH
26212: LD_VAR 0 2
26216: PUSH
26217: LD_INT 1
26219: ARRAY
26220: PPUSH
26221: LD_VAR 0 2
26225: PUSH
26226: LD_INT 2
26228: ARRAY
26229: PPUSH
26230: CALL_OW 297
26234: ST_TO_ADDR
// _xy := j ;
26235: LD_ADDR_VAR 0 7
26239: PUSH
26240: LD_VAR 0 2
26244: ST_TO_ADDR
// end ;
26245: GO 26164
26247: POP
26248: POP
// AddComMoveXY ( i , _xy [ 1 ] , _xy [ 2 ] ) ;
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_VAR 0 7
26258: PUSH
26259: LD_INT 1
26261: ARRAY
26262: PPUSH
26263: LD_VAR 0 7
26267: PUSH
26268: LD_INT 2
26270: ARRAY
26271: PPUSH
26272: CALL_OW 171
// end ;
26276: GO 26115
26278: POP
26279: POP
// tmp2 := UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_class , 1 ] ] ) ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_VAR 0 3
26289: PPUSH
26290: LD_INT 26
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 25
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PPUSH
26314: CALL_OW 72
26318: ST_TO_ADDR
// if tmp2 < 2 then
26319: LD_VAR 0 4
26323: PUSH
26324: LD_INT 2
26326: LESS
26327: IFFALSE 26396
// tmp2 := FilterAllUnits ( [ [ f_side , 8 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman_soldier ] ] ] ) diff [ Kurt , Kozlov ] ;
26329: LD_ADDR_VAR 0 4
26333: PUSH
26334: LD_INT 22
26336: PUSH
26337: LD_INT 8
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 26
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 3
26356: PUSH
26357: LD_INT 25
26359: PUSH
26360: LD_INT 15
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 69
26380: PUSH
26381: LD_EXP 63
26385: PUSH
26386: LD_EXP 64
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: DIFF
26395: ST_TO_ADDR
// if tmp2 then
26396: LD_VAR 0 4
26400: IFFALSE 26418
// Say ( tmp2 [ 1 ] , D6b-ArSol1-1 ) ;
26402: LD_VAR 0 4
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: LD_STRING D6b-ArSol1-1
26413: PPUSH
26414: CALL_OW 88
// async ;
26418: ASYNC
// Say ( Powell , D6b-Pow-2 ) ;
26419: LD_EXP 60
26423: PPUSH
26424: LD_STRING D6b-Pow-2
26426: PPUSH
26427: CALL_OW 88
// wait ( 0 0$0.5 ) ;
26431: LD_INT 18
26433: PPUSH
26434: CALL_OW 67
// if tmp2 > 1 then
26438: LD_VAR 0 4
26442: PUSH
26443: LD_INT 1
26445: GREATER
26446: IFFALSE 26464
// Say ( tmp2 [ 2 ] , D6b-ArSol2-1 ) ;
26448: LD_VAR 0 4
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PPUSH
26457: LD_STRING D6b-ArSol2-1
26459: PPUSH
26460: CALL_OW 88
// sync ;
26464: SYNC
// repeat wait ( 5 ) ;
26465: LD_INT 5
26467: PPUSH
26468: CALL_OW 67
// until GetSide ( HexInfo ( 93 , 36 ) ) = 4 ;
26472: LD_INT 93
26474: PPUSH
26475: LD_INT 36
26477: PPUSH
26478: CALL_OW 428
26482: PPUSH
26483: CALL_OW 255
26487: PUSH
26488: LD_INT 4
26490: EQUAL
26491: IFFALSE 26465
// DialogueOn ;
26493: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26497: LD_INT 10
26499: PPUSH
26500: CALL_OW 68
// Say ( Powell , D6b-Pow-2a ) ;
26504: LD_EXP 60
26508: PPUSH
26509: LD_STRING D6b-Pow-2a
26511: PPUSH
26512: CALL_OW 88
// DialogueOff ;
26516: CALL_OW 7
// ComAttackUnit ( IsInUnit ( Powell ) , kozlov_fac ) ;
26520: LD_EXP 60
26524: PPUSH
26525: CALL_OW 310
26529: PPUSH
26530: LD_INT 332
26532: PPUSH
26533: CALL_OW 115
// PlaceSeeing ( 93 , 35 , 1 , - 6 ) ;
26537: LD_INT 93
26539: PPUSH
26540: LD_INT 35
26542: PPUSH
26543: LD_INT 1
26545: PPUSH
26546: LD_INT 6
26548: NEG
26549: PPUSH
26550: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26554: LD_INT 35
26556: PPUSH
26557: CALL_OW 67
// if GetLives ( kozlov_fac ) < 1000 and IsLive ( kozlov_fac ) then
26561: LD_INT 332
26563: PPUSH
26564: CALL_OW 256
26568: PUSH
26569: LD_INT 1000
26571: LESS
26572: PUSH
26573: LD_INT 332
26575: PPUSH
26576: CALL_OW 300
26580: AND
26581: IFFALSE 26593
// SetLives ( kozlov_fac , 0 ) ;
26583: LD_INT 332
26585: PPUSH
26586: LD_INT 0
26588: PPUSH
26589: CALL_OW 234
// until IsDead ( kozlov_fac ) or IsDead ( Powell ) ;
26593: LD_INT 332
26595: PPUSH
26596: CALL_OW 301
26600: PUSH
26601: LD_EXP 60
26605: PPUSH
26606: CALL_OW 301
26610: OR
26611: IFFALSE 26554
// game_speed := 4 ;
26613: LD_ADDR_OWVAR 65
26617: PUSH
26618: LD_INT 4
26620: ST_TO_ADDR
// powellCenterCameraMode := false ;
26621: LD_ADDR_EXP 20
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// for i in tmp union FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
26629: LD_ADDR_VAR 0 1
26633: PUSH
26634: LD_VAR 0 3
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_INT 8
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 25
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PPUSH
26663: CALL_OW 69
26667: UNION
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26686
// SetTag ( i , 0 ) ;
26672: LD_VAR 0 1
26676: PPUSH
26677: LD_INT 0
26679: PPUSH
26680: CALL_OW 109
26684: GO 26669
26686: POP
26687: POP
// wait ( 0 0$3 ) ;
26688: LD_INT 105
26690: PPUSH
26691: CALL_OW 67
// RemoveSeeing ( 93 , 35 , 1 ) ;
26695: LD_INT 93
26697: PPUSH
26698: LD_INT 35
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 331
// DialogueOn ;
26708: CALL_OW 6
// Say ( speaker , D6c-Sol3-1 ) ;
26712: LD_VAR 0 11
26716: PPUSH
26717: LD_STRING D6c-Sol3-1
26719: PPUSH
26720: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
26724: LD_INT 10
26726: PPUSH
26727: CALL_OW 68
// Say ( JMM , D6c-JMM-1 ) ;
26731: LD_EXP 40
26735: PPUSH
26736: LD_STRING D6c-JMM-1
26738: PPUSH
26739: CALL_OW 88
// if Cyrus then
26743: LD_EXP 46
26747: IFFALSE 26761
// Say ( Cyrus , D6c-Cyrus-1 ) ;
26749: LD_EXP 46
26753: PPUSH
26754: LD_STRING D6c-Cyrus-1
26756: PPUSH
26757: CALL_OW 88
// if Bobby then
26761: LD_EXP 45
26765: IFFALSE 26779
// Say ( Bobby , D6c-Bobby-1 ) ;
26767: LD_EXP 45
26771: PPUSH
26772: LD_STRING D6c-Bobby-1
26774: PPUSH
26775: CALL_OW 88
// if Cornel then
26779: LD_EXP 51
26783: IFFALSE 26797
// Say ( Cornel , D6c-Corn-1 ) ;
26785: LD_EXP 51
26789: PPUSH
26790: LD_STRING D6c-Corn-1
26792: PPUSH
26793: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff ( speaker union JMM union vip ) ;
26797: LD_ADDR_VAR 0 4
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 22
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_INT 4
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 26
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 23
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 69
26859: PUSH
26860: LD_VAR 0 11
26864: PUSH
26865: LD_EXP 40
26869: UNION
26870: PUSH
26871: LD_EXP 61
26875: UNION
26876: DIFF
26877: ST_TO_ADDR
// if tmp2 then
26878: LD_VAR 0 4
26882: IFFALSE 26900
// Say ( tmp2 [ 1 ] , D6c-Sol1-1 ) ;
26884: LD_VAR 0 4
26888: PUSH
26889: LD_INT 1
26891: ARRAY
26892: PPUSH
26893: LD_STRING D6c-Sol1-1
26895: PPUSH
26896: CALL_OW 88
// if Lisa then
26900: LD_EXP 43
26904: IFFALSE 26918
// Say ( Lisa , D6c-Lisa-1 ) ;
26906: LD_EXP 43
26910: PPUSH
26911: LD_STRING D6c-Lisa-1
26913: PPUSH
26914: CALL_OW 88
// if Gary then
26918: LD_EXP 52
26922: IFFALSE 26936
// Say ( Gary , D6c-Gary-1 ) ;
26924: LD_EXP 52
26928: PPUSH
26929: LD_STRING D6c-Gary-1
26931: PPUSH
26932: CALL_OW 88
// if Donaldson then
26936: LD_EXP 44
26940: IFFALSE 26954
// Say ( Donaldson , D6c-Don-1 ) ;
26942: LD_EXP 44
26946: PPUSH
26947: LD_STRING D6c-Don-1
26949: PPUSH
26950: CALL_OW 88
// if tmp2 > 1 then
26954: LD_VAR 0 4
26958: PUSH
26959: LD_INT 1
26961: GREATER
26962: IFFALSE 26980
// Say ( tmp2 [ 2 ] , D6c-Sol2-1 ) ;
26964: LD_VAR 0 4
26968: PUSH
26969: LD_INT 2
26971: ARRAY
26972: PPUSH
26973: LD_STRING D6c-Sol2-1
26975: PPUSH
26976: CALL_OW 88
// Say ( speaker , D6c-Sol3-2 ) ;
26980: LD_VAR 0 11
26984: PPUSH
26985: LD_STRING D6c-Sol3-2
26987: PPUSH
26988: CALL_OW 88
// if IsInUnit ( JMM ) then
26992: LD_EXP 40
26996: PPUSH
26997: CALL_OW 310
27001: IFFALSE 27019
// CenterNowOnUnits ( IsInUnit ( JMM ) ) else
27003: LD_EXP 40
27007: PPUSH
27008: CALL_OW 310
27012: PPUSH
27013: CALL_OW 87
27017: GO 27028
// CenterNowOnUnits ( JMM ) ;
27019: LD_EXP 40
27023: PPUSH
27024: CALL_OW 87
// dwait ( 0 0$2 ) ;
27028: LD_INT 70
27030: PPUSH
27031: CALL_OW 68
// Say ( JMM , D6c-JMM-2 ) ;
27035: LD_EXP 40
27039: PPUSH
27040: LD_STRING D6c-JMM-2
27042: PPUSH
27043: CALL_OW 88
// DialogueOff ;
27047: CALL_OW 7
// Video ( false ) ;
27051: LD_INT 0
27053: PPUSH
27054: CALL 106331 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
27058: LD_INT 22
27060: PUSH
27061: LD_INT 4
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 69
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL_OW 235
// ChangeSideFog ( 4 , 4 ) ;
27080: LD_INT 4
27082: PPUSH
27083: LD_INT 4
27085: PPUSH
27086: CALL_OW 343
// for i in GetTechNation ( 4 , 1 , 2 ) do
27090: LD_ADDR_VAR 0 1
27094: PUSH
27095: LD_INT 4
27097: PPUSH
27098: LD_INT 1
27100: PPUSH
27101: LD_INT 2
27103: PPUSH
27104: CALL 69121 0 3
27108: PUSH
27109: FOR_IN
27110: IFFALSE 27147
// if GetTech ( i , 1 ) <> state_researched then
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_INT 1
27119: PPUSH
27120: CALL_OW 321
27124: PUSH
27125: LD_INT 2
27127: NONEQUAL
27128: IFFALSE 27145
// SetTech ( i , 1 , state_researched ) ;
27130: LD_VAR 0 1
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: LD_INT 2
27140: PPUSH
27141: CALL_OW 322
27145: GO 27109
27147: POP
27148: POP
// missionStage := 6 ;
27149: LD_ADDR_EXP 15
27153: PUSH
27154: LD_INT 6
27156: ST_TO_ADDR
// activeAttacks := true ;
27157: LD_ADDR_EXP 16
27161: PUSH
27162: LD_INT 1
27164: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
27165: LD_STRING M2
27167: PPUSH
27168: CALL_OW 337
// SaveForQuickRestart ;
27172: CALL_OW 22
// wait ( 0 0$40 ) ;
27176: LD_INT 1400
27178: PPUSH
27179: CALL_OW 67
// DialogueOn ;
27183: CALL_OW 6
// SayRadioNoFaceNoName ( Friend , D7-Friend-1 ) ;
27187: LD_EXP 65
27191: PPUSH
27192: LD_STRING D7-Friend-1
27194: PPUSH
27195: CALL 110278 0 2
// Say ( JMM , D7-JMM-1 ) ;
27199: LD_EXP 40
27203: PPUSH
27204: LD_STRING D7-JMM-1
27206: PPUSH
27207: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-2 ) ;
27211: LD_EXP 65
27215: PPUSH
27216: LD_STRING D7-Friend-2
27218: PPUSH
27219: CALL 110278 0 2
// Say ( JMM , D7-JMM-2 ) ;
27223: LD_EXP 40
27227: PPUSH
27228: LD_STRING D7-JMM-2
27230: PPUSH
27231: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-3 ) ;
27235: LD_EXP 65
27239: PPUSH
27240: LD_STRING D7-Friend-3
27242: PPUSH
27243: CALL 110278 0 2
// Say ( JMM , D7-JMM-3 ) ;
27247: LD_EXP 40
27251: PPUSH
27252: LD_STRING D7-JMM-3
27254: PPUSH
27255: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-4 ) ;
27259: LD_EXP 65
27263: PPUSH
27264: LD_STRING D7-Friend-4
27266: PPUSH
27267: CALL 110278 0 2
// Say ( JMM , D7-JMM-4 ) ;
27271: LD_EXP 40
27275: PPUSH
27276: LD_STRING D7-JMM-4
27278: PPUSH
27279: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-5 ) ;
27283: LD_EXP 65
27287: PPUSH
27288: LD_STRING D7-Friend-5
27290: PPUSH
27291: CALL 110278 0 2
// Say ( JMM , D7-JMM-5 ) ;
27295: LD_EXP 40
27299: PPUSH
27300: LD_STRING D7-JMM-5
27302: PPUSH
27303: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-6 ) ;
27307: LD_EXP 65
27311: PPUSH
27312: LD_STRING D7-Friend-6
27314: PPUSH
27315: CALL 110278 0 2
// Say ( JMM , D7-JMM-6 ) ;
27319: LD_EXP 40
27323: PPUSH
27324: LD_STRING D7-JMM-6
27326: PPUSH
27327: CALL_OW 88
// DialogueOff ;
27331: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
27335: LD_STRING Mlegion
27337: PPUSH
27338: CALL_OW 337
// skirmish := true ;
27342: LD_ADDR_EXP 99
27346: PUSH
27347: LD_INT 1
27349: ST_TO_ADDR
// RebuildKozlovFactory ;
27350: CALL 5172 0 0
// end ;
27354: PPOPN 13
27356: END
// every 0 0$2 trigger powellCenterCameraMode and IsLive ( Powell ) do
27357: LD_EXP 20
27361: PUSH
27362: LD_EXP 60
27366: PPUSH
27367: CALL_OW 300
27371: AND
27372: IFFALSE 27414
27374: GO 27376
27376: DISABLE
// begin enable ;
27377: ENABLE
// if IsInUnit ( Powell ) then
27378: LD_EXP 60
27382: PPUSH
27383: CALL_OW 310
27387: IFFALSE 27405
// CenterOnUnits ( IsInUnit ( Powell ) ) else
27389: LD_EXP 60
27393: PPUSH
27394: CALL_OW 310
27398: PPUSH
27399: CALL_OW 85
27403: GO 27414
// CenterOnUnits ( Powell ) ;
27405: LD_EXP 60
27409: PPUSH
27410: CALL_OW 85
// end ;
27414: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do var bomb , target ;
27415: LD_INT 22
27417: PUSH
27418: LD_INT 8
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 34
27427: PUSH
27428: LD_INT 48
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PPUSH
27439: CALL_OW 69
27443: IFFALSE 27717
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
27451: PPUSH
// begin if missionStage < 9 then
27452: LD_EXP 15
27456: PUSH
27457: LD_INT 9
27459: LESS
27460: IFFALSE 27470
// missionStage := 9 ;
27462: LD_ADDR_EXP 15
27466: PUSH
27467: LD_INT 9
27469: ST_TO_ADDR
// bomb := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
27470: LD_ADDR_VAR 0 1
27474: PUSH
27475: LD_INT 22
27477: PUSH
27478: LD_INT 8
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 34
27487: PUSH
27488: LD_INT 48
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: PUSH
27504: LD_INT 1
27506: ARRAY
27507: ST_TO_ADDR
// wait ( 0 0$05 ) ;
27508: LD_INT 175
27510: PPUSH
27511: CALL_OW 67
// if FakeInfo or KurtStatus in [ 0 , 2 ] then
27515: LD_EXP 12
27519: PUSH
27520: LD_EXP 3
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: IN
27535: OR
27536: IFFALSE 27559
// target := [ 68 , 108 , 1 ] else
27538: LD_ADDR_VAR 0 2
27542: PUSH
27543: LD_INT 68
27545: PUSH
27546: LD_INT 108
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
27557: GO 27578
// target := [ 181 , 88 , 2 ] ;
27559: LD_ADDR_VAR 0 2
27563: PUSH
27564: LD_INT 181
27566: PUSH
27567: LD_INT 88
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// AddComAttackPlace ( bomb , target [ 1 ] , target [ 2 ] ) ;
27578: LD_VAR 0 1
27582: PPUSH
27583: LD_VAR 0 2
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PPUSH
27592: LD_VAR 0 2
27596: PUSH
27597: LD_INT 2
27599: ARRAY
27600: PPUSH
27601: CALL_OW 176
// if target [ 3 ] = 1 then
27605: LD_VAR 0 2
27609: PUSH
27610: LD_INT 3
27612: ARRAY
27613: PUSH
27614: LD_INT 1
27616: EQUAL
27617: IFFALSE 27633
// SayRadio ( Kurt , D12-Kurt-1 ) else
27619: LD_EXP 63
27623: PPUSH
27624: LD_STRING D12-Kurt-1
27626: PPUSH
27627: CALL_OW 94
27631: GO 27657
// begin SayRadio ( Kurt , D12a-Kurt-1 ) ;
27633: LD_EXP 63
27637: PPUSH
27638: LD_STRING D12a-Kurt-1
27640: PPUSH
27641: CALL_OW 94
// SayRadio ( Roth , D12a-Roth-1 ) ;
27645: LD_EXP 78
27649: PPUSH
27650: LD_STRING D12a-Roth-1
27652: PPUSH
27653: CALL_OW 94
// end ; wait ( 0 0$10 ) ;
27657: LD_INT 350
27659: PPUSH
27660: CALL_OW 67
// AddComRecycle ( bomb , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
27664: LD_VAR 0 1
27668: PPUSH
27669: LD_INT 22
27671: PUSH
27672: LD_INT 8
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 23
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 30
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: PPUSH
27704: CALL_OW 69
27708: PUSH
27709: LD_INT 1
27711: ARRAY
27712: PPUSH
27713: CALL_OW 228
// end ;
27717: PPOPN 2
27719: END
// every 0 0$3 trigger ( GetLives ( Kurt ) < 999 or FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) and not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) and IsOk ( Kurt ) and FilterUnitsInArea ( legionBaseArea , [ f_side , 1 ] ) do var i , tmp , x ;
27720: LD_EXP 63
27724: PPUSH
27725: CALL_OW 256
27729: PUSH
27730: LD_INT 999
27732: LESS
27733: PUSH
27734: LD_INT 22
27736: PUSH
27737: LD_INT 8
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 21
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 23
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: PUSH
27774: LD_INT 9
27776: PUSH
27777: LD_INT 8
27779: PUSH
27780: LD_INT 7
27782: PUSH
27783: LD_INT 6
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: PUSH
27792: LD_OWVAR 67
27796: ARRAY
27797: LESSEQUAL
27798: OR
27799: PUSH
27800: LD_INT 22
27802: PUSH
27803: LD_INT 8
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 34
27812: PUSH
27813: LD_INT 48
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PPUSH
27824: CALL_OW 69
27828: NOT
27829: AND
27830: PUSH
27831: LD_EXP 63
27835: PPUSH
27836: CALL_OW 302
27840: AND
27841: PUSH
27842: LD_INT 5
27844: PPUSH
27845: LD_INT 22
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PPUSH
27855: CALL_OW 70
27859: AND
27860: IFFALSE 28622
27862: GO 27864
27864: DISABLE
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
27869: PPUSH
// begin legionDestroyed := true ;
27870: LD_ADDR_EXP 22
27874: PUSH
27875: LD_INT 1
27877: ST_TO_ADDR
// DialogueOn ;
27878: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
27882: LD_EXP 40
27886: PPUSH
27887: LD_STRING D13-JMM-1
27889: PPUSH
27890: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
27894: LD_EXP 63
27898: PPUSH
27899: LD_STRING D13-Kurt-1
27901: PPUSH
27902: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
27906: LD_EXP 40
27910: PPUSH
27911: LD_STRING D13-JMM-2
27913: PPUSH
27914: CALL_OW 88
// if FakeInfo then
27918: LD_EXP 12
27922: IFFALSE 27942
// begin Say ( Kurt , D13-Kurt-2 ) ;
27924: LD_EXP 63
27928: PPUSH
27929: LD_STRING D13-Kurt-2
27931: PPUSH
27932: CALL_OW 88
// DialogueOff ;
27936: CALL_OW 7
// exit ;
27940: GO 28622
// end ; if not KurtStatus then
27942: LD_EXP 3
27946: NOT
27947: IFFALSE 27963
// Say ( Kurt , D13-Kurt-2b ) else
27949: LD_EXP 63
27953: PPUSH
27954: LD_STRING D13-Kurt-2b
27956: PPUSH
27957: CALL_OW 88
27961: GO 27975
// Say ( Kurt , D13-Kurt-2a ) ;
27963: LD_EXP 63
27967: PPUSH
27968: LD_STRING D13-Kurt-2a
27970: PPUSH
27971: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
27975: LD_EXP 40
27979: PPUSH
27980: LD_STRING D13-JMM-3
27982: PPUSH
27983: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
27987: LD_EXP 63
27991: PPUSH
27992: LD_STRING D13-Kurt-3
27994: PPUSH
27995: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
27999: LD_EXP 40
28003: PPUSH
28004: LD_STRING D13-JMM-4
28006: PPUSH
28007: CALL_OW 88
// DialogueOff ;
28011: CALL_OW 7
// ChangeMissionObjectives ( MlegionOut ) ;
28015: LD_STRING MlegionOut
28017: PPUSH
28018: CALL_OW 337
// MC_Kill ( 3 ) ;
28022: LD_INT 3
28024: PPUSH
28025: CALL 38607 0 1
// KillUnit ( Kozlov ) ;
28029: LD_EXP 64
28033: PPUSH
28034: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_not , [ f_type , b_turret ] ] ] ) do
28038: LD_ADDR_VAR 0 1
28042: PUSH
28043: LD_INT 22
28045: PUSH
28046: LD_INT 8
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 23
28055: PUSH
28056: LD_INT 3
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 21
28068: PUSH
28069: LD_INT 33
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: PPUSH
28085: CALL_OW 69
28089: PUSH
28090: FOR_IN
28091: IFFALSE 28104
// KillUnit ( i ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: CALL_OW 66
28102: GO 28090
28104: POP
28105: POP
// ChangeSideFog ( 8 , 1 ) ;
28106: LD_INT 8
28108: PPUSH
28109: LD_INT 1
28111: PPUSH
28112: CALL_OW 343
// tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) diff [ Kozlov , Kurt ] ;
28116: LD_ADDR_VAR 0 2
28120: PUSH
28121: LD_INT 22
28123: PUSH
28124: LD_INT 8
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 21
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: PUSH
28150: LD_EXP 64
28154: PUSH
28155: LD_EXP 63
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: DIFF
28164: ST_TO_ADDR
// if tmp >= [ 6 , 5 , 4 , 3 ] [ Difficulty ] then
28165: LD_VAR 0 2
28169: PUSH
28170: LD_INT 6
28172: PUSH
28173: LD_INT 5
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: PUSH
28188: LD_OWVAR 67
28192: ARRAY
28193: GREATEREQUAL
28194: IFFALSE 28346
// begin x := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_INT 6
28203: PUSH
28204: LD_INT 5
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 3
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: PUSH
28219: LD_OWVAR 67
28223: ARRAY
28224: ST_TO_ADDR
// for i := tmp - ( x + 1 ) downto 1 do
28225: LD_ADDR_VAR 0 1
28229: PUSH
28230: DOUBLE
28231: LD_VAR 0 2
28235: PUSH
28236: LD_VAR 0 3
28240: PUSH
28241: LD_INT 1
28243: PLUS
28244: MINUS
28245: INC
28246: ST_TO_ADDR
28247: LD_INT 1
28249: PUSH
28250: FOR_DOWNTO
28251: IFFALSE 28342
// begin legionEscapeUnits := legionEscapeUnits ^ tmp [ i ] ;
28253: LD_ADDR_EXP 38
28257: PUSH
28258: LD_EXP 38
28262: PUSH
28263: LD_VAR 0 2
28267: PUSH
28268: LD_VAR 0 1
28272: ARRAY
28273: ADD
28274: ST_TO_ADDR
// if IsInUnit ( tmp [ i ] ) then
28275: LD_VAR 0 2
28279: PUSH
28280: LD_VAR 0 1
28284: ARRAY
28285: PPUSH
28286: CALL_OW 310
28290: IFFALSE 28307
// ComExit ( tmp [ i ] ) ;
28292: LD_VAR 0 2
28296: PUSH
28297: LD_VAR 0 1
28301: ARRAY
28302: PPUSH
28303: CALL 106757 0 1
// AddComMoveXY ( tmp [ i ] , 34 + rand ( 0 , 6 ) , 1 ) ;
28307: LD_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: ARRAY
28317: PPUSH
28318: LD_INT 34
28320: PUSH
28321: LD_INT 0
28323: PPUSH
28324: LD_INT 6
28326: PPUSH
28327: CALL_OW 12
28331: PLUS
28332: PPUSH
28333: LD_INT 1
28335: PPUSH
28336: CALL_OW 171
// end ;
28340: GO 28250
28342: POP
28343: POP
// end else
28344: GO 28356
// x := tmp ;
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_VAR 0 2
28355: ST_TO_ADDR
// for i := tmp downto tmp - x do
28356: LD_ADDR_VAR 0 1
28360: PUSH
28361: DOUBLE
28362: LD_VAR 0 2
28366: INC
28367: ST_TO_ADDR
28368: LD_VAR 0 2
28372: PUSH
28373: LD_VAR 0 3
28377: MINUS
28378: PUSH
28379: FOR_DOWNTO
28380: IFFALSE 28452
// begin if IsInUnit ( tmp [ i ] ) then
28382: LD_VAR 0 2
28386: PUSH
28387: LD_VAR 0 1
28391: ARRAY
28392: PPUSH
28393: CALL_OW 310
28397: IFFALSE 28414
// ComExit ( tmp [ i ] ) ;
28399: LD_VAR 0 2
28403: PUSH
28404: LD_VAR 0 1
28408: ARRAY
28409: PPUSH
28410: CALL 106757 0 1
// SetSide ( tmp [ i ] , 1 ) ;
28414: LD_VAR 0 2
28418: PUSH
28419: LD_VAR 0 1
28423: ARRAY
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: CALL_OW 235
// SetLives ( tmp [ i ] , 1000 ) ;
28432: LD_VAR 0 2
28436: PUSH
28437: LD_VAR 0 1
28441: ARRAY
28442: PPUSH
28443: LD_INT 1000
28445: PPUSH
28446: CALL_OW 234
// end ;
28450: GO 28379
28452: POP
28453: POP
// wait ( 0 0$0.3 ) ;
28454: LD_INT 10
28456: PPUSH
28457: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) do
28461: LD_ADDR_VAR 0 1
28465: PUSH
28466: LD_INT 22
28468: PUSH
28469: LD_INT 8
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 21
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: PUSH
28495: FOR_IN
28496: IFFALSE 28509
// KillUnit ( i ) ;
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 66
28507: GO 28495
28509: POP
28510: POP
// SetSide ( Kurt , 1 ) ;
28511: LD_EXP 63
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) , 1 ) ;
28523: LD_INT 22
28525: PUSH
28526: LD_INT 8
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 21
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PPUSH
28547: CALL_OW 69
28551: PPUSH
28552: LD_INT 1
28554: PPUSH
28555: CALL_OW 235
// SetAttitude ( 8 , 1 , att_friend , true ) ;
28559: LD_INT 8
28561: PPUSH
28562: LD_INT 1
28564: PPUSH
28565: LD_INT 1
28567: PPUSH
28568: LD_INT 1
28570: PPUSH
28571: CALL_OW 80
// wait ( 1 1$20 ) ;
28575: LD_INT 2800
28577: PPUSH
28578: CALL_OW 67
// PlaceUnitXY ( Friend , 37 , 1 , false ) ;
28582: LD_EXP 65
28586: PPUSH
28587: LD_INT 37
28589: PPUSH
28590: LD_INT 1
28592: PPUSH
28593: LD_INT 0
28595: PPUSH
28596: CALL_OW 48
// wait ( 0 0$1 ) ;
28600: LD_INT 35
28602: PPUSH
28603: CALL_OW 67
// ComMoveXY ( Friend , 60 , 95 ) ;
28607: LD_EXP 65
28611: PPUSH
28612: LD_INT 60
28614: PPUSH
28615: LD_INT 95
28617: PPUSH
28618: CALL_OW 111
// end ;
28622: PPOPN 3
28624: END
// every 0 0$1 trigger not legionDestroyed and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 do
28625: LD_EXP 22
28629: NOT
28630: PUSH
28631: LD_INT 22
28633: PUSH
28634: LD_INT 8
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 21
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PPUSH
28655: CALL_OW 69
28659: PUSH
28660: LD_INT 0
28662: EQUAL
28663: AND
28664: IFFALSE 28684
28666: GO 28668
28668: DISABLE
// begin legionDestroyed := true ;
28669: LD_ADDR_EXP 22
28673: PUSH
28674: LD_INT 1
28676: ST_TO_ADDR
// ChangeMissionObjectives ( MlegionOut ) ;
28677: LD_STRING MlegionOut
28679: PPUSH
28680: CALL_OW 337
// end ;
28684: END
// every 0 0$1 trigger legionEscapeUnits do var i ;
28685: LD_EXP 38
28689: IFFALSE 28764
28691: GO 28693
28693: DISABLE
28694: LD_INT 0
28696: PPUSH
// begin enable ;
28697: ENABLE
// for i in legionEscapeUnits do
28698: LD_ADDR_VAR 0 1
28702: PUSH
28703: LD_EXP 38
28707: PUSH
28708: FOR_IN
28709: IFFALSE 28762
// begin if IsInArea ( i , legionEscapeArea ) then
28711: LD_VAR 0 1
28715: PPUSH
28716: LD_INT 31
28718: PPUSH
28719: CALL_OW 308
28723: IFFALSE 28736
// RemoveUnit ( i ) else
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 64
28734: GO 28760
// if not HasTask ( i ) then
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 314
28745: NOT
28746: IFFALSE 28760
// ComMoveToArea ( i , legionEscapeArea ) ;
28748: LD_VAR 0 1
28752: PPUSH
28753: LD_INT 31
28755: PPUSH
28756: CALL_OW 113
// end ;
28760: GO 28708
28762: POP
28763: POP
// end ;
28764: PPOPN 1
28766: END
// every 0 0$3 trigger See ( 1 , Friend ) do var dec ;
28767: LD_INT 1
28769: PPUSH
28770: LD_EXP 65
28774: PPUSH
28775: CALL_OW 292
28779: IFFALSE 29077
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
// begin wait ( 0 0$2 ) ;
28787: LD_INT 70
28789: PPUSH
28790: CALL_OW 67
// CenterNowOnUnits ( Friend ) ;
28794: LD_EXP 65
28798: PPUSH
28799: CALL_OW 87
// DialogueOn ;
28803: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
28807: LD_EXP 40
28811: PPUSH
28812: LD_STRING D14-JMM-1
28814: PPUSH
28815: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
28819: LD_EXP 65
28823: PPUSH
28824: LD_STRING D14-Friend-1
28826: PPUSH
28827: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
28831: LD_EXP 40
28835: PPUSH
28836: LD_STRING D14-JMM-2
28838: PPUSH
28839: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
28843: LD_EXP 65
28847: PPUSH
28848: LD_STRING D14-Friend-2
28850: PPUSH
28851: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
28855: LD_EXP 40
28859: PPUSH
28860: LD_STRING D14-JMM-3
28862: PPUSH
28863: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
28867: LD_EXP 65
28871: PPUSH
28872: LD_STRING D14-Friend-3
28874: PPUSH
28875: CALL_OW 88
// DialogueOff ;
28879: CALL_OW 7
// dec := Query ( Q14 ) ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_STRING Q14
28890: PPUSH
28891: CALL_OW 97
28895: ST_TO_ADDR
// if dec = 1 then
28896: LD_VAR 0 1
28900: PUSH
28901: LD_INT 1
28903: EQUAL
28904: IFFALSE 28938
// begin DialogueOn ;
28906: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
28910: LD_EXP 40
28914: PPUSH
28915: LD_STRING D14a-JMM-1
28917: PPUSH
28918: CALL_OW 88
// DialogueOff ;
28922: CALL_OW 7
// SetSide ( Friend , 1 ) ;
28926: LD_EXP 65
28930: PPUSH
28931: LD_INT 1
28933: PPUSH
28934: CALL_OW 235
// end ; if dec = 2 then
28938: LD_VAR 0 1
28942: PUSH
28943: LD_INT 2
28945: EQUAL
28946: IFFALSE 28999
// begin DialogueOn ;
28948: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
28952: LD_EXP 40
28956: PPUSH
28957: LD_STRING D14b-JMM-1
28959: PPUSH
28960: CALL_OW 88
// DialogueOff ;
28964: CALL_OW 7
// wait ( 0 0$1 ) ;
28968: LD_INT 35
28970: PPUSH
28971: CALL_OW 67
// ComMoveXY ( Friend , 9 , 2 ) ;
28975: LD_EXP 65
28979: PPUSH
28980: LD_INT 9
28982: PPUSH
28983: LD_INT 2
28985: PPUSH
28986: CALL_OW 111
// AddComHold ( Friend ) ;
28990: LD_EXP 65
28994: PPUSH
28995: CALL_OW 200
// end ; if dec = 3 then
28999: LD_VAR 0 1
29003: PUSH
29004: LD_INT 3
29006: EQUAL
29007: IFFALSE 29077
// begin DialogueOn ;
29009: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
29013: LD_EXP 40
29017: PPUSH
29018: LD_STRING D14c-JMM-1
29020: PPUSH
29021: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
29025: LD_EXP 65
29029: PPUSH
29030: LD_STRING D14c-Friend-1
29032: PPUSH
29033: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
29037: LD_EXP 40
29041: PPUSH
29042: LD_STRING D14c-JMM-2
29044: PPUSH
29045: CALL_OW 88
// DialogueOff ;
29049: CALL_OW 7
// ComMoveXY ( Friend , 9 , 2 ) ;
29053: LD_EXP 65
29057: PPUSH
29058: LD_INT 9
29060: PPUSH
29061: LD_INT 2
29063: PPUSH
29064: CALL_OW 111
// AddComHold ( Friend ) ;
29068: LD_EXP 65
29072: PPUSH
29073: CALL_OW 200
// end ; end ;
29077: PPOPN 1
29079: END
// every 0 0$1 trigger HexInfo ( 9 , 2 ) = Friend and GetSide ( Friend ) = 8 do
29080: LD_INT 9
29082: PPUSH
29083: LD_INT 2
29085: PPUSH
29086: CALL_OW 428
29090: PUSH
29091: LD_EXP 65
29095: EQUAL
29096: PUSH
29097: LD_EXP 65
29101: PPUSH
29102: CALL_OW 255
29106: PUSH
29107: LD_INT 8
29109: EQUAL
29110: AND
29111: IFFALSE 29125
29113: GO 29115
29115: DISABLE
// RemoveUnit ( Friend ) ;
29116: LD_EXP 65
29120: PPUSH
29121: CALL_OW 64
29125: END
// every 0 0$1 trigger missionTime >= 15 15$00 and JMMGirl and KappaStatus do var i , veh , vehG ;
29126: LD_EXP 14
29130: PUSH
29131: LD_INT 31500
29133: GREATEREQUAL
29134: PUSH
29135: LD_EXP 7
29139: AND
29140: PUSH
29141: LD_EXP 2
29145: AND
29146: IFFALSE 29576
29148: GO 29150
29150: DISABLE
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
29155: PPUSH
// begin missionStage := 7 ;
29156: LD_ADDR_EXP 15
29160: PUSH
29161: LD_INT 7
29163: ST_TO_ADDR
// uc_side = 1 ;
29164: LD_ADDR_OWVAR 20
29168: PUSH
29169: LD_INT 1
29171: ST_TO_ADDR
// uc_nation = 1 ;
29172: LD_ADDR_OWVAR 21
29176: PUSH
29177: LD_INT 1
29179: ST_TO_ADDR
// for i = 1 to 5 do
29180: LD_ADDR_VAR 0 1
29184: PUSH
29185: DOUBLE
29186: LD_INT 1
29188: DEC
29189: ST_TO_ADDR
29190: LD_INT 5
29192: PUSH
29193: FOR_TO
29194: IFFALSE 29290
// begin vc_engine = 3 ;
29196: LD_ADDR_OWVAR 39
29200: PUSH
29201: LD_INT 3
29203: ST_TO_ADDR
// vc_control = 3 ;
29204: LD_ADDR_OWVAR 38
29208: PUSH
29209: LD_INT 3
29211: ST_TO_ADDR
// vc_chassis = 3 ;
29212: LD_ADDR_OWVAR 37
29216: PUSH
29217: LD_INT 3
29219: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
29220: LD_ADDR_OWVAR 40
29224: PUSH
29225: LD_INT 5
29227: PUSH
29228: LD_INT 9
29230: PUSH
29231: LD_INT 7
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PPUSH
29242: LD_INT 3
29244: PPUSH
29245: CALL_OW 12
29249: ARRAY
29250: ST_TO_ADDR
// veh = CreateVehicle ;
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: CALL_OW 45
29260: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
29261: LD_VAR 0 2
29265: PPUSH
29266: LD_INT 1
29268: PPUSH
29269: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
29273: LD_VAR 0 2
29277: PPUSH
29278: LD_INT 19
29280: PPUSH
29281: LD_INT 0
29283: PPUSH
29284: CALL_OW 49
// end ;
29288: GO 29193
29290: POP
29291: POP
// vc_engine = 3 ;
29292: LD_ADDR_OWVAR 39
29296: PUSH
29297: LD_INT 3
29299: ST_TO_ADDR
// vc_control = 1 ;
29300: LD_ADDR_OWVAR 38
29304: PUSH
29305: LD_INT 1
29307: ST_TO_ADDR
// vc_chassis = 3 ;
29308: LD_ADDR_OWVAR 37
29312: PUSH
29313: LD_INT 3
29315: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
29316: LD_ADDR_OWVAR 40
29320: PUSH
29321: LD_INT 5
29323: PUSH
29324: LD_INT 9
29326: PUSH
29327: LD_INT 7
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: PPUSH
29338: LD_INT 3
29340: PPUSH
29341: CALL_OW 12
29345: ARRAY
29346: ST_TO_ADDR
// vehG = CreateVehicle ;
29347: LD_ADDR_VAR 0 3
29351: PUSH
29352: CALL_OW 45
29356: ST_TO_ADDR
// SetDir ( vehG , 1 ) ;
29357: LD_VAR 0 3
29361: PPUSH
29362: LD_INT 1
29364: PPUSH
29365: CALL_OW 233
// PlaceUnitArea ( vehG , reinforcementsArea , false ) ;
29369: LD_VAR 0 3
29373: PPUSH
29374: LD_INT 19
29376: PPUSH
29377: LD_INT 0
29379: PPUSH
29380: CALL_OW 49
// if JMMGirl = 1 then
29384: LD_EXP 7
29388: PUSH
29389: LD_INT 1
29391: EQUAL
29392: IFFALSE 29448
// begin Joan = PrepareUnit ( Joan , true , 14_ ) ;
29394: LD_ADDR_EXP 41
29398: PUSH
29399: LD_STRING Joan
29401: PPUSH
29402: LD_INT 1
29404: PPUSH
29405: LD_STRING 14_
29407: PPUSH
29408: CALL 69058 0 3
29412: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehG ) ;
29413: LD_EXP 41
29417: PPUSH
29418: LD_VAR 0 3
29422: PPUSH
29423: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
29436: LD_EXP 41
29440: PPUSH
29441: LD_STRING D10BW-Joan-1
29443: PPUSH
29444: CALL_OW 94
// end ; if JMMGirl = 2 then
29448: LD_EXP 7
29452: PUSH
29453: LD_INT 2
29455: EQUAL
29456: IFFALSE 29512
// begin Lisa = PrepareUnit ( Lisa , true , 14_ ) ;
29458: LD_ADDR_EXP 43
29462: PUSH
29463: LD_STRING Lisa
29465: PPUSH
29466: LD_INT 1
29468: PPUSH
29469: LD_STRING 14_
29471: PPUSH
29472: CALL 69058 0 3
29476: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , vehG ) ;
29477: LD_EXP 43
29481: PPUSH
29482: LD_VAR 0 3
29486: PPUSH
29487: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
29491: LD_VAR 0 3
29495: PPUSH
29496: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
29500: LD_EXP 43
29504: PPUSH
29505: LD_STRING D10BW-Lisa-1
29507: PPUSH
29508: CALL_OW 94
// end ; if JMMGirl = 3 then
29512: LD_EXP 7
29516: PUSH
29517: LD_INT 3
29519: EQUAL
29520: IFFALSE 29576
// begin Connie = PrepareUnit ( Connie , true , 14_ ) ;
29522: LD_ADDR_EXP 55
29526: PUSH
29527: LD_STRING Connie
29529: PPUSH
29530: LD_INT 1
29532: PPUSH
29533: LD_STRING 14_
29535: PPUSH
29536: CALL 69058 0 3
29540: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , vehG ) ;
29541: LD_EXP 55
29545: PPUSH
29546: LD_VAR 0 3
29550: PPUSH
29551: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
29555: LD_VAR 0 3
29559: PPUSH
29560: CALL_OW 87
// SayRadio ( Connie , D10BW-Con-1 ) ;
29564: LD_EXP 55
29568: PPUSH
29569: LD_STRING D10BW-Con-1
29571: PPUSH
29572: CALL_OW 94
// end ; end ;
29576: PPOPN 3
29578: END
// every 0 0$1 trigger missionTime >= 45 45$00 do var i , veh , tmp ;
29579: LD_EXP 14
29583: PUSH
29584: LD_INT 94500
29586: GREATEREQUAL
29587: IFFALSE 29999
29589: GO 29591
29591: DISABLE
29592: LD_INT 0
29594: PPUSH
29595: PPUSH
29596: PPUSH
// begin tmp := PrepareStevensSquad ;
29597: LD_ADDR_VAR 0 3
29601: PUSH
29602: CALL 2323 0 0
29606: ST_TO_ADDR
// if not tmp then
29607: LD_VAR 0 3
29611: NOT
29612: IFFALSE 29616
// exit ;
29614: GO 29999
// uc_side := 1 ;
29616: LD_ADDR_OWVAR 20
29620: PUSH
29621: LD_INT 1
29623: ST_TO_ADDR
// uc_nation := 1 ;
29624: LD_ADDR_OWVAR 21
29628: PUSH
29629: LD_INT 1
29631: ST_TO_ADDR
// for i in tmp do
29632: LD_ADDR_VAR 0 1
29636: PUSH
29637: LD_VAR 0 3
29641: PUSH
29642: FOR_IN
29643: IFFALSE 29740
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , [ us_double_gun , us_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 40 ) ;
29645: LD_INT 3
29647: PPUSH
29648: LD_INT 3
29650: PPUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 5
29656: PUSH
29657: LD_INT 9
29659: PUSH
29660: LD_INT 7
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PPUSH
29671: LD_INT 3
29673: PPUSH
29674: CALL_OW 12
29678: ARRAY
29679: PPUSH
29680: LD_INT 40
29682: PPUSH
29683: CALL 73898 0 5
// veh := CreateVehicle ;
29687: LD_ADDR_VAR 0 2
29691: PUSH
29692: CALL_OW 45
29696: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
29697: LD_VAR 0 2
29701: PPUSH
29702: LD_INT 1
29704: PPUSH
29705: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
29709: LD_VAR 0 2
29713: PPUSH
29714: LD_INT 19
29716: PPUSH
29717: LD_INT 0
29719: PPUSH
29720: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_VAR 0 2
29733: PPUSH
29734: CALL_OW 52
// end ;
29738: GO 29642
29740: POP
29741: POP
// missionStage := 8 ;
29742: LD_ADDR_EXP 15
29746: PUSH
29747: LD_INT 8
29749: ST_TO_ADDR
// DialogueOn ;
29750: CALL_OW 6
// if Stevens then
29754: LD_EXP 42
29758: IFFALSE 29872
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
29760: LD_EXP 42
29764: PPUSH
29765: CALL_OW 310
29769: PPUSH
29770: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
29774: LD_EXP 42
29778: PPUSH
29779: LD_STRING D8-Huck-1
29781: PPUSH
29782: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
29786: LD_EXP 40
29790: PPUSH
29791: LD_STRING D8-JMM-1
29793: PPUSH
29794: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
29798: LD_EXP 42
29802: PPUSH
29803: LD_STRING D8-Huck-2
29805: PPUSH
29806: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
29810: LD_EXP 40
29814: PPUSH
29815: LD_STRING D8-JMM-2
29817: PPUSH
29818: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
29822: LD_EXP 42
29826: PPUSH
29827: LD_STRING D8-Huck-3
29829: PPUSH
29830: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
29834: LD_EXP 40
29838: PPUSH
29839: LD_STRING D8-JMM-3
29841: PPUSH
29842: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
29846: LD_EXP 42
29850: PPUSH
29851: LD_STRING D8-Huck-4
29853: PPUSH
29854: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
29858: LD_EXP 40
29862: PPUSH
29863: LD_STRING D8-JMM-4
29865: PPUSH
29866: CALL_OW 88
// end else
29870: GO 29982
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
29872: LD_EXP 56
29876: PPUSH
29877: CALL_OW 310
29881: PPUSH
29882: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
29886: LD_EXP 56
29890: PPUSH
29891: LD_STRING D8-Huck-1
29893: PPUSH
29894: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
29898: LD_EXP 40
29902: PPUSH
29903: LD_STRING D8-JMM-1a
29905: PPUSH
29906: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
29910: LD_EXP 56
29914: PPUSH
29915: LD_STRING D8-Huck-2
29917: PPUSH
29918: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
29922: LD_EXP 40
29926: PPUSH
29927: LD_STRING D8-JMM-2
29929: PPUSH
29930: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
29934: LD_EXP 56
29938: PPUSH
29939: LD_STRING D8-Huck-3
29941: PPUSH
29942: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
29946: LD_EXP 40
29950: PPUSH
29951: LD_STRING D8-JMM-3
29953: PPUSH
29954: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
29958: LD_EXP 56
29962: PPUSH
29963: LD_STRING D8-Huck-4
29965: PPUSH
29966: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
29970: LD_EXP 40
29974: PPUSH
29975: LD_STRING D8-JMM-4
29977: PPUSH
29978: CALL_OW 88
// end ; DialogueOff ;
29982: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
29986: LD_INT 25
29988: PPUSH
29989: LD_INT 1
29991: PPUSH
29992: LD_INT 1
29994: PPUSH
29995: CALL_OW 322
// end ;
29999: PPOPN 3
30001: END
// every 0 0$1 trigger IsOk ( sewiVeh ) and See ( 1 , sewiVeh ) do
30002: LD_EXP 74
30006: PPUSH
30007: CALL_OW 302
30011: PUSH
30012: LD_INT 1
30014: PPUSH
30015: LD_EXP 74
30019: PPUSH
30020: CALL_OW 292
30024: AND
30025: IFFALSE 30276
30027: GO 30029
30029: DISABLE
// begin CenterNowOnUnits ( sewiVeh ) ;
30030: LD_EXP 74
30034: PPUSH
30035: CALL_OW 87
// DialogueOn ;
30039: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30043: LD_EXP 40
30047: PPUSH
30048: LD_STRING D10nB-JMM-1
30050: PPUSH
30051: CALL_OW 88
// if BurlakStatus = 1 then
30055: LD_EXP 9
30059: PUSH
30060: LD_INT 1
30062: EQUAL
30063: IFFALSE 30077
// begin SayRadio ( Vsevolod , D10nB-Vse-1a ) ;
30065: LD_EXP 73
30069: PPUSH
30070: LD_STRING D10nB-Vse-1a
30072: PPUSH
30073: CALL_OW 94
// end ; if BurlakStatus = 0 then
30077: LD_EXP 9
30081: PUSH
30082: LD_INT 0
30084: EQUAL
30085: IFFALSE 30099
// SayRadio ( Vsevolod , D10nB-Vse-1 ) ;
30087: LD_EXP 73
30091: PPUSH
30092: LD_STRING D10nB-Vse-1
30094: PPUSH
30095: CALL_OW 94
// Say ( JMM , D10nB-JMM-2 ) ;
30099: LD_EXP 40
30103: PPUSH
30104: LD_STRING D10nB-JMM-2
30106: PPUSH
30107: CALL_OW 88
// if KappaStatus then
30111: LD_EXP 2
30115: IFFALSE 30129
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
30117: LD_EXP 73
30121: PPUSH
30122: LD_STRING D10nB-Vse-5a
30124: PPUSH
30125: CALL_OW 94
// if not KappaStatus and JMMGirlStatus = 0 then
30129: LD_EXP 2
30133: NOT
30134: PUSH
30135: LD_EXP 6
30139: PUSH
30140: LD_INT 0
30142: EQUAL
30143: AND
30144: IFFALSE 30272
// begin if JMMGirl = 1 then
30146: LD_EXP 7
30150: PUSH
30151: LD_INT 1
30153: EQUAL
30154: IFFALSE 30204
// begin SayRadio ( Vsevolod , D10nB-Vse-2 ) ;
30156: LD_EXP 73
30160: PPUSH
30161: LD_STRING D10nB-Vse-2
30163: PPUSH
30164: CALL_OW 94
// Say ( JMM , D10nB-JMM-3 ) ;
30168: LD_EXP 40
30172: PPUSH
30173: LD_STRING D10nB-JMM-3
30175: PPUSH
30176: CALL_OW 88
// SayRadio ( Vsevolod , D10nB-Vse-3 ) ;
30180: LD_EXP 73
30184: PPUSH
30185: LD_STRING D10nB-Vse-3
30187: PPUSH
30188: CALL_OW 94
// Say ( JMM , D10nB-JMM-4 ) ;
30192: LD_EXP 40
30196: PPUSH
30197: LD_STRING D10nB-JMM-4
30199: PPUSH
30200: CALL_OW 88
// end ; if JMMGirl = 2 then
30204: LD_EXP 7
30208: PUSH
30209: LD_INT 2
30211: EQUAL
30212: IFFALSE 30238
// begin SayRadio ( Vsevolod , D10nB-Vse-4 ) ;
30214: LD_EXP 73
30218: PPUSH
30219: LD_STRING D10nB-Vse-4
30221: PPUSH
30222: CALL_OW 94
// Say ( JMM , D10nB-JMM-5 ) ;
30226: LD_EXP 40
30230: PPUSH
30231: LD_STRING D10nB-JMM-5
30233: PPUSH
30234: CALL_OW 88
// end ; if JMMGirl = 3 then
30238: LD_EXP 7
30242: PUSH
30243: LD_INT 3
30245: EQUAL
30246: IFFALSE 30272
// begin SayRadio ( Vsevolod , D10nB-Vse-5 ) ;
30248: LD_EXP 73
30252: PPUSH
30253: LD_STRING D10nB-Vse-5
30255: PPUSH
30256: CALL_OW 94
// Say ( JMM , D10nB-JMM-6 ) ;
30260: LD_EXP 40
30264: PPUSH
30265: LD_STRING D10nB-JMM-6
30267: PPUSH
30268: CALL_OW 88
// end ; end ; DialogueOff ;
30272: CALL_OW 7
// end ;
30276: END
// every 0 0$1 trigger missionTime >= 55 55$00 and IsOk ( Kovalyuk ) and IsOk ( ru_depot2 ) do var tmp ;
30277: LD_EXP 14
30281: PUSH
30282: LD_INT 115500
30284: GREATEREQUAL
30285: PUSH
30286: LD_EXP 68
30290: PPUSH
30291: CALL_OW 302
30295: AND
30296: PUSH
30297: LD_INT 267
30299: PPUSH
30300: CALL_OW 302
30304: AND
30305: IFFALSE 30681
30307: GO 30309
30309: DISABLE
30310: LD_INT 0
30312: PPUSH
// begin missionStage := 10 ;
30313: LD_ADDR_EXP 15
30317: PUSH
30318: LD_INT 10
30320: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Kurt , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
30321: LD_ADDR_VAR 0 1
30325: PUSH
30326: LD_INT 22
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 23
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 26
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 12
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: LD_INT 25
30378: PUSH
30379: LD_INT 16
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 69
30401: PUSH
30402: LD_EXP 40
30406: PUSH
30407: LD_EXP 63
30411: PUSH
30412: LD_EXP 42
30416: PUSH
30417: LD_EXP 56
30421: PUSH
30422: LD_EXP 43
30426: PUSH
30427: LD_EXP 44
30431: PUSH
30432: LD_EXP 45
30436: PUSH
30437: LD_EXP 46
30441: PUSH
30442: LD_EXP 47
30446: PUSH
30447: LD_EXP 48
30451: PUSH
30452: LD_EXP 49
30456: PUSH
30457: LD_EXP 50
30461: PUSH
30462: LD_EXP 51
30466: PUSH
30467: LD_EXP 52
30471: PUSH
30472: LD_EXP 53
30476: PUSH
30477: LD_EXP 54
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: DIFF
30500: ST_TO_ADDR
// if not tmp and Brown then
30501: LD_VAR 0 1
30505: NOT
30506: PUSH
30507: LD_EXP 48
30511: AND
30512: IFFALSE 30527
// tmp := [ Brown ] ;
30514: LD_ADDR_VAR 0 1
30518: PUSH
30519: LD_EXP 48
30523: PUSH
30524: EMPTY
30525: LIST
30526: ST_TO_ADDR
// DialogueOn ;
30527: CALL_OW 6
// Say ( tmp [ 1 ] , D11-Sol1-1 ) ;
30531: LD_VAR 0 1
30535: PUSH
30536: LD_INT 1
30538: ARRAY
30539: PPUSH
30540: LD_STRING D11-Sol1-1
30542: PPUSH
30543: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
30547: LD_EXP 67
30551: PPUSH
30552: LD_STRING D11-Pla-1
30554: PPUSH
30555: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
30559: LD_EXP 68
30563: PPUSH
30564: LD_STRING D11-Kov-1
30566: PPUSH
30567: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
30571: LD_EXP 67
30575: PPUSH
30576: LD_STRING D11-Pla-2
30578: PPUSH
30579: CALL_OW 94
// Say ( tmp [ 1 ] , D11-Sol1-2 ) ;
30583: LD_VAR 0 1
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_STRING D11-Sol1-2
30594: PPUSH
30595: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
30599: LD_EXP 40
30603: PPUSH
30604: LD_STRING D11-JMM-2
30606: PPUSH
30607: CALL_OW 88
// DialogueOff ;
30611: CALL_OW 7
// allowBehemothConstruct := true ;
30615: LD_ADDR_EXP 25
30619: PUSH
30620: LD_INT 1
30622: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
30623: LD_STRING M4
30625: PPUSH
30626: CALL_OW 337
// BuildBehemoths ;
30630: CALL 8182 0 0
// repeat wait ( 15 15$00 ) ;
30634: LD_INT 31500
30636: PPUSH
30637: CALL_OW 67
// if behemothDestroyedBeforeFinish then
30641: LD_EXP 27
30645: IFFALSE 30649
// break ;
30647: GO 30681
// if GetResourceType ( GetBase ( ru_depot2 ) , mat_cans ) >= 1000 then
30649: LD_INT 267
30651: PPUSH
30652: CALL_OW 274
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL_OW 275
30664: PUSH
30665: LD_INT 1000
30667: GREATEREQUAL
30668: IFFALSE 30674
// BuildBehemoths ;
30670: CALL 8182 0 0
// until not behemothBuilders ;
30674: LD_EXP 76
30678: NOT
30679: IFFALSE 30634
// end ;
30681: PPOPN 1
30683: END
// every 0 0$1 trigger not behemothBuilders and not behemothDone and allowBehemothConstruct do
30684: LD_EXP 76
30688: NOT
30689: PUSH
30690: LD_EXP 28
30694: NOT
30695: AND
30696: PUSH
30697: LD_EXP 25
30701: AND
30702: IFFALSE 30722
30704: GO 30706
30706: DISABLE
// begin ChangeMissionObjectives ( M4a ) ;
30707: LD_STRING M4a
30709: PPUSH
30710: CALL_OW 337
// behemothDestroyedBeforeFinish := true ;
30714: LD_ADDR_EXP 27
30718: PUSH
30719: LD_INT 1
30721: ST_TO_ADDR
// end ;
30722: END
// every 0 0$1 trigger behemothDone do
30723: LD_EXP 28
30727: IFFALSE 30739
30729: GO 30731
30731: DISABLE
// ChangeMissionObjectives ( M4b ) ;
30732: LD_STRING M4b
30734: PPUSH
30735: CALL_OW 337
30739: END
// every 0 0$1 trigger not seeBehemoth do var tmp , i ;
30740: LD_EXP 29
30744: NOT
30745: IFFALSE 30941
30747: GO 30749
30749: DISABLE
30750: LD_INT 0
30752: PPUSH
30753: PPUSH
// begin enable ;
30754: ENABLE
// tmp := GetBehemoths ( 3 ) ;
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_INT 3
30762: PPUSH
30763: CALL 106420 0 1
30767: ST_TO_ADDR
// if not tmp and not behemothDone then
30768: LD_VAR 0 1
30772: NOT
30773: PUSH
30774: LD_EXP 28
30778: NOT
30779: AND
30780: IFFALSE 30816
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_INT 22
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: LD_INT 37
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PPUSH
30811: CALL_OW 69
30815: ST_TO_ADDR
// if not tmp then
30816: LD_VAR 0 1
30820: NOT
30821: IFFALSE 30825
// exit ;
30823: GO 30941
// for i in tmp do
30825: LD_ADDR_VAR 0 2
30829: PUSH
30830: LD_VAR 0 1
30834: PUSH
30835: FOR_IN
30836: IFFALSE 30939
// if See ( 1 , i ) then
30838: LD_INT 1
30840: PPUSH
30841: LD_VAR 0 2
30845: PPUSH
30846: CALL_OW 292
30850: IFFALSE 30937
// begin if GetType ( i ) = unit_building then
30852: LD_VAR 0 2
30856: PPUSH
30857: CALL_OW 247
30861: PUSH
30862: LD_INT 3
30864: EQUAL
30865: IFFALSE 30903
// begin disable ;
30867: DISABLE
// CenterNowOnUnits ( i ) ;
30868: LD_VAR 0 2
30872: PPUSH
30873: CALL_OW 87
// Say ( JMM , D17a-JMM-1 ) ;
30877: LD_EXP 40
30881: PPUSH
30882: LD_STRING D17a-JMM-1
30884: PPUSH
30885: CALL_OW 88
// seeBehemoth := true ;
30889: LD_ADDR_EXP 29
30893: PUSH
30894: LD_INT 1
30896: ST_TO_ADDR
// exit ;
30897: POP
30898: POP
30899: GO 30941
// end else
30901: GO 30937
// begin disable ;
30903: DISABLE
// CenterNowOnUnits ( i ) ;
30904: LD_VAR 0 2
30908: PPUSH
30909: CALL_OW 87
// Say ( JMM , D17b-JMM-1 ) ;
30913: LD_EXP 40
30917: PPUSH
30918: LD_STRING D17b-JMM-1
30920: PPUSH
30921: CALL_OW 88
// seeBehemoth := true ;
30925: LD_ADDR_EXP 29
30929: PUSH
30930: LD_INT 1
30932: ST_TO_ADDR
// exit ;
30933: POP
30934: POP
30935: GO 30941
// end ; end ;
30937: GO 30835
30939: POP
30940: POP
// end ;
30941: PPOPN 2
30943: END
// every 0 0$1 trigger missionTime >= 58 58$40 do var bomb , dec , tmp ;
30944: LD_EXP 14
30948: PUSH
30949: LD_INT 123200
30951: GREATEREQUAL
30952: IFFALSE 32152
30954: GO 30956
30956: DISABLE
30957: LD_INT 0
30959: PPUSH
30960: PPUSH
30961: PPUSH
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
30962: LD_INT 2
30964: PPUSH
30965: LD_INT 23
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: LD_INT 48
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: PPUSH
30986: CALL 62632 0 2
// repeat wait ( 0 0$1 ) ;
30990: LD_INT 35
30992: PPUSH
30993: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
30997: LD_INT 22
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 34
31009: PUSH
31010: LD_INT 48
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 69
31025: IFFALSE 30990
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
31027: LD_ADDR_VAR 0 1
31031: PUSH
31032: LD_INT 22
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 34
31044: PUSH
31045: LD_INT 48
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 69
31060: PUSH
31061: LD_INT 1
31063: ARRAY
31064: ST_TO_ADDR
// missionStage := 12 ;
31065: LD_ADDR_EXP 15
31069: PUSH
31070: LD_INT 12
31072: ST_TO_ADDR
// platonovHasBomb := true ;
31073: LD_ADDR_EXP 30
31077: PUSH
31078: LD_INT 1
31080: ST_TO_ADDR
// AddComMoveXY ( bomb , 181 , 86 ) ;
31081: LD_VAR 0 1
31085: PPUSH
31086: LD_INT 181
31088: PPUSH
31089: LD_INT 86
31091: PPUSH
31092: CALL_OW 171
// AddComHold ( bomb ) ;
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 200
// wait ( 0 0$10 ) ;
31105: LD_INT 350
31107: PPUSH
31108: CALL_OW 67
// DialogueOn ;
31112: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
31116: LD_EXP 67
31120: PPUSH
31121: LD_STRING D15-Pla-1
31123: PPUSH
31124: CALL_OW 94
// dec := Query ( Q15a ) ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_STRING Q15a
31135: PPUSH
31136: CALL_OW 97
31140: ST_TO_ADDR
// if dec = 1 then
31141: LD_VAR 0 2
31145: PUSH
31146: LD_INT 1
31148: EQUAL
31149: IFFALSE 31172
// begin Say ( JMM , D15a-JMM-1 ) ;
31151: LD_EXP 40
31155: PPUSH
31156: LD_STRING D15a-JMM-1
31158: PPUSH
31159: CALL_OW 88
// YouLost ( Surrender ) ;
31163: LD_STRING Surrender
31165: PPUSH
31166: CALL_OW 104
// exit ;
31170: GO 32152
// end ; if dec = 2 then
31172: LD_VAR 0 2
31176: PUSH
31177: LD_INT 2
31179: EQUAL
31180: IFFALSE 31249
// begin Say ( JMM , D15b-JMM-1 ) ;
31182: LD_EXP 40
31186: PPUSH
31187: LD_STRING D15b-JMM-1
31189: PPUSH
31190: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
31194: LD_EXP 67
31198: PPUSH
31199: LD_STRING D15b-Pla-1
31201: PPUSH
31202: CALL_OW 94
// DialogueOff ;
31206: CALL_OW 7
// wait ( 3 3$00 ) ;
31210: LD_INT 6300
31212: PPUSH
31213: CALL_OW 67
// DialogueOn ;
31217: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
31221: LD_EXP 40
31225: PPUSH
31226: LD_STRING D15d-JMM-1a
31228: PPUSH
31229: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
31233: LD_EXP 67
31237: PPUSH
31238: LD_STRING D15d-Pla-1
31240: PPUSH
31241: CALL_OW 94
// DialogueOff ;
31245: CALL_OW 7
// end ; if dec = 3 then
31249: LD_VAR 0 2
31253: PUSH
31254: LD_INT 3
31256: EQUAL
31257: IFFALSE 31311
// begin Say ( JMM , D15c-JMM-1 ) ;
31259: LD_EXP 40
31263: PPUSH
31264: LD_STRING D15c-JMM-1
31266: PPUSH
31267: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
31271: LD_EXP 67
31275: PPUSH
31276: LD_STRING D15c-Pla-1
31278: PPUSH
31279: CALL_OW 94
// DialogueOff ;
31283: CALL_OW 7
// wait ( 0 0$15 ) ;
31287: LD_INT 525
31289: PPUSH
31290: CALL_OW 67
// ComAttackPlace ( bomb , 60 , 95 ) ;
31294: LD_VAR 0 1
31298: PPUSH
31299: LD_INT 60
31301: PPUSH
31302: LD_INT 95
31304: PPUSH
31305: CALL_OW 116
// exit ;
31309: GO 32152
// end ; if dec = 4 then
31311: LD_VAR 0 2
31315: PUSH
31316: LD_INT 4
31318: EQUAL
31319: IFFALSE 31349
// begin Say ( JMM , D15d-JMM-1 ) ;
31321: LD_EXP 40
31325: PPUSH
31326: LD_STRING D15d-JMM-1
31328: PPUSH
31329: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
31333: LD_EXP 67
31337: PPUSH
31338: LD_STRING D15d-Pla-1
31340: PPUSH
31341: CALL_OW 94
// DialogueOff ;
31345: CALL_OW 7
// end ; if IsOk ( Friend ) and GetSide ( Friend ) = 1 and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
31349: LD_EXP 65
31353: PPUSH
31354: CALL_OW 302
31358: PUSH
31359: LD_EXP 65
31363: PPUSH
31364: CALL_OW 255
31368: PUSH
31369: LD_INT 1
31371: EQUAL
31372: AND
31373: PUSH
31374: LD_INT 22
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 34
31386: PUSH
31387: LD_INT 8
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PPUSH
31398: CALL_OW 69
31402: NOT
31403: AND
31404: IFFALSE 32053
// begin SetSide ( Friend , 8 ) ;
31406: LD_EXP 65
31410: PPUSH
31411: LD_INT 8
31413: PPUSH
31414: CALL_OW 235
// if IsInUnit ( Friend ) then
31418: LD_EXP 65
31422: PPUSH
31423: CALL_OW 310
31427: IFFALSE 31438
// ComExitBuilding ( Friend ) ;
31429: LD_EXP 65
31433: PPUSH
31434: CALL_OW 122
// if IsDriver ( Friend ) then
31438: LD_EXP 65
31442: PPUSH
31443: CALL 103976 0 1
31447: IFFALSE 31458
// ComExitVehicle ( Friend ) ;
31449: LD_EXP 65
31453: PPUSH
31454: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
31458: LD_EXP 65
31462: PPUSH
31463: LD_INT 9
31465: PPUSH
31466: LD_INT 2
31468: PPUSH
31469: CALL_OW 171
// wait ( 0 0$05 ) ;
31473: LD_INT 175
31475: PPUSH
31476: CALL_OW 67
// CenterNowOnUnits ( Friend ) ;
31480: LD_EXP 65
31484: PPUSH
31485: CALL_OW 87
// DialogueOn ;
31489: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
31493: LD_EXP 40
31497: PPUSH
31498: LD_STRING D16-JMM-1
31500: PPUSH
31501: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
31505: LD_EXP 65
31509: PPUSH
31510: LD_STRING D16-Friend-1
31512: PPUSH
31513: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
31517: LD_EXP 40
31521: PPUSH
31522: LD_STRING D16-JMM-2
31524: PPUSH
31525: CALL_OW 88
// DialogueOff ;
31529: CALL_OW 7
// SetSide ( Friend , 1 ) ;
31533: LD_EXP 65
31537: PPUSH
31538: LD_INT 1
31540: PPUSH
31541: CALL_OW 235
// ComHold ( Friend ) ;
31545: LD_EXP 65
31549: PPUSH
31550: CALL_OW 140
// wait ( 0 0$20 ) ;
31554: LD_INT 700
31556: PPUSH
31557: CALL_OW 67
// if GetDistUnitXY ( Friend , 9 , 2 ) < 30 then
31561: LD_EXP 65
31565: PPUSH
31566: LD_INT 9
31568: PPUSH
31569: LD_INT 2
31571: PPUSH
31572: CALL_OW 297
31576: PUSH
31577: LD_INT 30
31579: LESS
31580: IFFALSE 31649
// begin SetSide ( Friend , 8 ) ;
31582: LD_EXP 65
31586: PPUSH
31587: LD_INT 8
31589: PPUSH
31590: CALL_OW 235
// if IsInUnit ( Friend ) then
31594: LD_EXP 65
31598: PPUSH
31599: CALL_OW 310
31603: IFFALSE 31614
// ComExitBuilding ( Friend ) ;
31605: LD_EXP 65
31609: PPUSH
31610: CALL_OW 122
// if IsDriver ( Friend ) then
31614: LD_EXP 65
31618: PPUSH
31619: CALL 103976 0 1
31623: IFFALSE 31634
// ComExitVehicle ( Friend ) ;
31625: LD_EXP 65
31629: PPUSH
31630: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
31634: LD_EXP 65
31638: PPUSH
31639: LD_INT 9
31641: PPUSH
31642: LD_INT 2
31644: PPUSH
31645: CALL_OW 171
// end ; wait ( 0 0$30 ) ;
31649: LD_INT 1050
31651: PPUSH
31652: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
31656: LD_INT 22
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 34
31668: PUSH
31669: LD_INT 8
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PPUSH
31680: CALL_OW 69
31684: NOT
31685: IFFALSE 32031
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
31687: LD_ADDR_VAR 0 3
31691: PUSH
31692: LD_INT 22
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 26
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: LD_INT 25
31717: PUSH
31718: LD_INT 12
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 25
31727: PUSH
31728: LD_INT 16
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 69
31749: PUSH
31750: LD_EXP 40
31754: PUSH
31755: LD_EXP 42
31759: PUSH
31760: LD_EXP 56
31764: PUSH
31765: LD_EXP 43
31769: PUSH
31770: LD_EXP 44
31774: PUSH
31775: LD_EXP 45
31779: PUSH
31780: LD_EXP 46
31784: PUSH
31785: LD_EXP 47
31789: PUSH
31790: LD_EXP 48
31794: PUSH
31795: LD_EXP 49
31799: PUSH
31800: LD_EXP 50
31804: PUSH
31805: LD_EXP 51
31809: PUSH
31810: LD_EXP 52
31814: PUSH
31815: LD_EXP 53
31819: PUSH
31820: LD_EXP 54
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: DIFF
31842: ST_TO_ADDR
// DialogueOn ;
31843: CALL_OW 6
// SayRadio ( Platonov , D16a-Pla-1 ) ;
31847: LD_EXP 67
31851: PPUSH
31852: LD_STRING D16a-Pla-1
31854: PPUSH
31855: CALL_OW 94
// if Stevens then
31859: LD_EXP 42
31863: IFFALSE 31879
// Say ( Stevens , D16a-Huck-1 ) else
31865: LD_EXP 42
31869: PPUSH
31870: LD_STRING D16a-Huck-1
31872: PPUSH
31873: CALL_OW 88
31877: GO 31921
// if Baker then
31879: LD_EXP 56
31883: IFFALSE 31899
// Say ( Baker , D16a-Huck-1 ) else
31885: LD_EXP 56
31889: PPUSH
31890: LD_STRING D16a-Huck-1
31892: PPUSH
31893: CALL_OW 88
31897: GO 31921
// if tmp then
31899: LD_VAR 0 3
31903: IFFALSE 31921
// Say ( tmp [ 1 ] , D16a-Sol1-1 ) ;
31905: LD_VAR 0 3
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PPUSH
31914: LD_STRING D16a-Sol1-1
31916: PPUSH
31917: CALL_OW 88
// if GetSide ( Friend ) = 8 then
31921: LD_EXP 65
31925: PPUSH
31926: CALL_OW 255
31930: PUSH
31931: LD_INT 8
31933: EQUAL
31934: IFFALSE 31950
// Say ( JMM , D16a-JMM-1 ) else
31936: LD_EXP 40
31940: PPUSH
31941: LD_STRING D16a-JMM-1
31943: PPUSH
31944: CALL_OW 88
31948: GO 32010
// begin Say ( JMM , D16a-JMM-1a ) ;
31950: LD_EXP 40
31954: PPUSH
31955: LD_STRING D16a-JMM-1a
31957: PPUSH
31958: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
31962: LD_EXP 65
31966: PPUSH
31967: LD_STRING D16a-Friend-1
31969: PPUSH
31970: CALL_OW 88
// ComExitBuilding ( Friend ) ;
31974: LD_EXP 65
31978: PPUSH
31979: CALL_OW 122
// AddComMoveXY ( Friend , 191 , 103 ) ;
31983: LD_EXP 65
31987: PPUSH
31988: LD_INT 191
31990: PPUSH
31991: LD_INT 103
31993: PPUSH
31994: CALL_OW 171
// SetSide ( Friend , 3 ) ;
31998: LD_EXP 65
32002: PPUSH
32003: LD_INT 3
32005: PPUSH
32006: CALL_OW 235
// end ; DialogueOff ;
32010: CALL_OW 7
// ComAttackPlace ( bomb , 60 , 95 ) ;
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_INT 60
32021: PPUSH
32022: LD_INT 95
32024: PPUSH
32025: CALL_OW 116
// end else
32029: GO 32051
// begin DialogueOn ;
32031: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla-1 ) ;
32035: LD_EXP 67
32039: PPUSH
32040: LD_STRING D16c-Pla-1
32042: PPUSH
32043: CALL_OW 94
// DialogueOff ;
32047: CALL_OW 7
// end ; end else
32051: GO 32152
// begin wait ( 3 3$00 ) ;
32053: LD_INT 6300
32055: PPUSH
32056: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
32060: LD_INT 22
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 34
32072: PUSH
32073: LD_INT 8
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 69
32088: NOT
32089: IFFALSE 32132
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
32091: LD_EXP 67
32095: PPUSH
32096: LD_STRING D16b-Pla-1
32098: PPUSH
32099: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
32103: LD_EXP 40
32107: PPUSH
32108: LD_STRING D16b-JMM-1
32110: PPUSH
32111: CALL_OW 88
// ComAttackPlace ( bomb , 60 , 95 ) ;
32115: LD_VAR 0 1
32119: PPUSH
32120: LD_INT 60
32122: PPUSH
32123: LD_INT 95
32125: PPUSH
32126: CALL_OW 116
// end else
32130: GO 32152
// begin DialogueOn ;
32132: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla-1 ) ;
32136: LD_EXP 67
32140: PPUSH
32141: LD_STRING D16c-Pla-1
32143: PPUSH
32144: CALL_OW 94
// DialogueOff ;
32148: CALL_OW 7
// end ; end ; end ;
32152: PPOPN 3
32154: END
// every 0 0$10 trigger ( GetTech ( tech_SibFiss , 1 ) = state_researched or missionTime >= 60 60$00 ) and not allianceDestroyed and IsOk ( Roth ) do var dec ;
32155: LD_INT 25
32157: PPUSH
32158: LD_INT 1
32160: PPUSH
32161: CALL_OW 321
32165: PUSH
32166: LD_INT 2
32168: EQUAL
32169: PUSH
32170: LD_EXP 14
32174: PUSH
32175: LD_INT 126000
32177: GREATEREQUAL
32178: OR
32179: PUSH
32180: LD_EXP 23
32184: NOT
32185: AND
32186: PUSH
32187: LD_EXP 78
32191: PPUSH
32192: CALL_OW 302
32196: AND
32197: IFFALSE 32555
32199: GO 32201
32201: DISABLE
32202: LD_INT 0
32204: PPUSH
// begin missionStage := 11 ;
32205: LD_ADDR_EXP 15
32209: PUSH
32210: LD_INT 11
32212: ST_TO_ADDR
// DialogueOn ;
32213: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
32217: LD_EXP 78
32221: PPUSH
32222: LD_STRING D9-Roth-1
32224: PPUSH
32225: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
32229: LD_EXP 40
32233: PPUSH
32234: LD_STRING D9-JMM-1
32236: PPUSH
32237: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
32241: LD_EXP 78
32245: PPUSH
32246: LD_STRING D9-Roth-2
32248: PPUSH
32249: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
32253: LD_EXP 78
32257: PPUSH
32258: LD_STRING D9-Roth-2a
32260: PPUSH
32261: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
32265: LD_EXP 67
32269: PPUSH
32270: LD_STRING D9-Pla-2
32272: PPUSH
32273: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
32277: LD_EXP 78
32281: PPUSH
32282: LD_STRING D9-Roth-3
32284: PPUSH
32285: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
32289: LD_EXP 67
32293: PPUSH
32294: LD_STRING D9-Pla-3
32296: PPUSH
32297: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
32301: LD_EXP 78
32305: PPUSH
32306: LD_STRING D9-Roth-4
32308: PPUSH
32309: CALL_OW 94
// dec := Query ( Q9 ) ;
32313: LD_ADDR_VAR 0 1
32317: PUSH
32318: LD_STRING Q9
32320: PPUSH
32321: CALL_OW 97
32325: ST_TO_ADDR
// if dec = 1 then
32326: LD_VAR 0 1
32330: PUSH
32331: LD_INT 1
32333: EQUAL
32334: IFFALSE 32348
// SayRadio ( Roth , D9a-Roth-1 ) ;
32336: LD_EXP 78
32340: PPUSH
32341: LD_STRING D9a-Roth-1
32343: PPUSH
32344: CALL_OW 94
// if dec = 2 then
32348: LD_VAR 0 1
32352: PUSH
32353: LD_INT 2
32355: EQUAL
32356: IFFALSE 32382
// begin Say ( JMM , D9b-JMM-1 ) ;
32358: LD_EXP 40
32362: PPUSH
32363: LD_STRING D9b-JMM-1
32365: PPUSH
32366: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
32370: LD_EXP 78
32374: PPUSH
32375: LD_STRING D9b-Roth-1
32377: PPUSH
32378: CALL_OW 94
// end ; if dec = 3 then
32382: LD_VAR 0 1
32386: PUSH
32387: LD_INT 3
32389: EQUAL
32390: IFFALSE 32452
// begin Say ( JMM , D9c-JMM-1 ) ;
32392: LD_EXP 40
32396: PPUSH
32397: LD_STRING D9c-JMM-1
32399: PPUSH
32400: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
32404: LD_EXP 78
32408: PPUSH
32409: LD_STRING D9c-Roth-1
32411: PPUSH
32412: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
32416: LD_EXP 40
32420: PPUSH
32421: LD_STRING D9c-JMM-2
32423: PPUSH
32424: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
32428: LD_EXP 78
32432: PPUSH
32433: LD_STRING D9c-Roth-2
32435: PPUSH
32436: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
32440: LD_EXP 40
32444: PPUSH
32445: LD_STRING D9c-JMM-3
32447: PPUSH
32448: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
32452: LD_EXP 78
32456: PPUSH
32457: LD_STRING D9c-Roth-3
32459: PPUSH
32460: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
32464: LD_EXP 78
32468: PPUSH
32469: LD_STRING D9cont-Roth-1
32471: PPUSH
32472: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
32476: LD_EXP 40
32480: PPUSH
32481: LD_STRING D9cont-JMM-1
32483: PPUSH
32484: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
32488: LD_EXP 78
32492: PPUSH
32493: LD_STRING D9cont-Roth-2
32495: PPUSH
32496: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
32500: LD_EXP 40
32504: PPUSH
32505: LD_STRING D9cont-JMM-2
32507: PPUSH
32508: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
32512: LD_EXP 78
32516: PPUSH
32517: LD_STRING D9cont-Roth-3
32519: PPUSH
32520: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
32524: LD_EXP 40
32528: PPUSH
32529: LD_STRING D9cont-JMM-3
32531: PPUSH
32532: CALL_OW 88
// DialogueOff ;
32536: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
32540: LD_STRING M3
32542: PPUSH
32543: CALL_OW 337
// allianceActive := true ;
32547: LD_ADDR_EXP 31
32551: PUSH
32552: LD_INT 1
32554: ST_TO_ADDR
// end ;
32555: PPOPN 1
32557: END
// every 0 0$2 trigger See ( 1 , ru_depot ) and IsInUnit ( Platonov ) do var enemy ;
32558: LD_INT 1
32560: PPUSH
32561: LD_INT 126
32563: PPUSH
32564: CALL_OW 292
32568: PUSH
32569: LD_EXP 67
32573: PPUSH
32574: CALL_OW 310
32578: AND
32579: IFFALSE 32732
32581: GO 32583
32583: DISABLE
32584: LD_INT 0
32586: PPUSH
// begin ComExitBuilding ( Platonov ) ;
32587: LD_EXP 67
32591: PPUSH
32592: CALL_OW 122
// enemy := NearestUnitToUnit ( FilterUnitsInArea ( russianBaseArea , [ f_side , 1 ] ) , Platonov ) ;
32596: LD_ADDR_VAR 0 1
32600: PUSH
32601: LD_INT 4
32603: PPUSH
32604: LD_INT 22
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PPUSH
32614: CALL_OW 70
32618: PPUSH
32619: LD_EXP 67
32623: PPUSH
32624: CALL_OW 74
32628: ST_TO_ADDR
// AddComAttackUnit ( Platonov , enemy [ 1 ] ) ;
32629: LD_EXP 67
32633: PPUSH
32634: LD_VAR 0 1
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: PPUSH
32643: CALL_OW 175
// SayRadio ( Platonov , D18-Pla-1 ) ;
32647: LD_EXP 67
32651: PPUSH
32652: LD_STRING D18-Pla-1
32654: PPUSH
32655: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
32659: LD_INT 22
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 34
32671: PUSH
32672: LD_INT 48
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PPUSH
32683: CALL_OW 69
32687: IFFALSE 32732
// ComAttackPlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 111 , 97 ) ;
32689: LD_INT 22
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 34
32701: PUSH
32702: LD_INT 48
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PPUSH
32713: CALL_OW 69
32717: PUSH
32718: LD_INT 1
32720: ARRAY
32721: PPUSH
32722: LD_INT 111
32724: PPUSH
32725: LD_INT 97
32727: PPUSH
32728: CALL_OW 116
// end ;
32732: PPOPN 1
32734: END
// every 0 0$2 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 , 10 ] [ Difficulty ] do var i , tmp , tmp2 , omarOnMotherLode ;
32735: LD_EXP 67
32739: PPUSH
32740: CALL_OW 301
32744: PUSH
32745: LD_EXP 70
32749: PPUSH
32750: CALL_OW 301
32754: AND
32755: PUSH
32756: LD_INT 22
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 21
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 50
32778: PUSH
32779: EMPTY
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PPUSH
32787: CALL_OW 69
32791: PUSH
32792: LD_INT 7
32794: PUSH
32795: LD_INT 8
32797: PUSH
32798: LD_INT 9
32800: PUSH
32801: LD_INT 10
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: PUSH
32810: LD_OWVAR 67
32814: ARRAY
32815: LESS
32816: AND
32817: IFFALSE 33616
32819: GO 32821
32821: DISABLE
32822: LD_INT 0
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
// begin MC_Kill ( 2 ) ;
32828: LD_INT 2
32830: PPUSH
32831: CALL 38607 0 1
// SetAttitude ( 1 , 3 , att_friend , true ) ;
32835: LD_INT 1
32837: PPUSH
32838: LD_INT 3
32840: PPUSH
32841: LD_INT 1
32843: PPUSH
32844: LD_INT 1
32846: PPUSH
32847: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) ;
32851: LD_ADDR_VAR 0 2
32855: PUSH
32856: LD_INT 22
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 21
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 50
32878: PUSH
32879: EMPTY
32880: LIST
32881: PUSH
32882: LD_INT 26
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: PPUSH
32898: CALL_OW 69
32902: ST_TO_ADDR
// if not tmp then
32903: LD_VAR 0 2
32907: NOT
32908: IFFALSE 32964
// begin uc_side = 3 ;
32910: LD_ADDR_OWVAR 20
32914: PUSH
32915: LD_INT 3
32917: ST_TO_ADDR
// uc_nation = 3 ;
32918: LD_ADDR_OWVAR 21
32922: PUSH
32923: LD_INT 3
32925: ST_TO_ADDR
// hc_name =  ;
32926: LD_ADDR_OWVAR 26
32930: PUSH
32931: LD_STRING 
32933: ST_TO_ADDR
// hc_gallery =  ;
32934: LD_ADDR_OWVAR 33
32938: PUSH
32939: LD_STRING 
32941: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
32942: LD_INT 1
32944: PPUSH
32945: LD_INT 10
32947: PPUSH
32948: CALL_OW 381
// tmp = CreateHuman ;
32952: LD_ADDR_VAR 0 2
32956: PUSH
32957: CALL_OW 44
32961: ST_TO_ADDR
// end else
32962: GO 32978
// tmp := tmp [ 1 ] ;
32964: LD_ADDR_VAR 0 2
32968: PUSH
32969: LD_VAR 0 2
32973: PUSH
32974: LD_INT 1
32976: ARRAY
32977: ST_TO_ADDR
// DialogueOn ;
32978: CALL_OW 6
// SayRadio ( tmp , DSurrenderRussians-RSol1-1a ) ;
32982: LD_VAR 0 2
32986: PPUSH
32987: LD_STRING DSurrenderRussians-RSol1-1a
32989: PPUSH
32990: CALL_OW 94
// DialogueOff ;
32994: CALL_OW 7
// russianDestroyed := true ;
32998: LD_ADDR_EXP 21
33002: PUSH
33003: LD_INT 1
33005: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
33006: LD_ADDR_VAR 0 1
33010: PUSH
33011: LD_INT 22
33013: PUSH
33014: LD_INT 6
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 69
33025: PUSH
33026: FOR_IN
33027: IFFALSE 33040
// KillUnit ( i ) ;
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 66
33038: GO 33026
33040: POP
33041: POP
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
33042: LD_INT 22
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 21
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PPUSH
33066: CALL_OW 69
33070: PPUSH
33071: CALL_OW 122
// wait ( 0 0$1 ) ;
33075: LD_INT 35
33077: PPUSH
33078: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , russianEscapeArea ) ;
33082: LD_INT 22
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 21
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PPUSH
33106: CALL_OW 69
33110: PPUSH
33111: LD_INT 25
33113: PPUSH
33114: CALL_OW 173
// wait ( 0 0$35 ) ;
33118: LD_INT 1225
33120: PPUSH
33121: CALL_OW 67
// PrepareOmarInvasion ;
33125: CALL 15858 0 0
// tmp := [ GetX ( Omar ) , GetY ( Omar ) ] ;
33129: LD_ADDR_VAR 0 2
33133: PUSH
33134: LD_EXP 96
33138: PPUSH
33139: CALL_OW 250
33143: PUSH
33144: LD_EXP 96
33148: PPUSH
33149: CALL_OW 251
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// PlaceSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 , - 8 ) ;
33158: LD_VAR 0 2
33162: PUSH
33163: LD_INT 1
33165: ARRAY
33166: PPUSH
33167: LD_VAR 0 2
33171: PUSH
33172: LD_INT 2
33174: ARRAY
33175: PPUSH
33176: LD_INT 1
33178: PPUSH
33179: LD_INT 8
33181: NEG
33182: PPUSH
33183: CALL_OW 330
// CenterNowOnUnits ( Omar ) ;
33187: LD_EXP 96
33191: PPUSH
33192: CALL_OW 87
// DialogueOn ;
33196: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
33200: LD_EXP 40
33204: PPUSH
33205: LD_STRING D19-JMM-1
33207: PPUSH
33208: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Joan , Kurt , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker ] ;
33212: LD_ADDR_VAR 0 3
33216: PUSH
33217: LD_INT 22
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 26
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: LD_INT 25
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 25
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 25
33262: PUSH
33263: LD_INT 3
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 25
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 25
33282: PUSH
33283: LD_INT 5
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 25
33292: PUSH
33293: LD_INT 8
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: PUSH
33319: LD_EXP 40
33323: PUSH
33324: LD_EXP 41
33328: PUSH
33329: LD_EXP 63
33333: PUSH
33334: LD_EXP 42
33338: PUSH
33339: LD_EXP 43
33343: PUSH
33344: LD_EXP 44
33348: PUSH
33349: LD_EXP 45
33353: PUSH
33354: LD_EXP 46
33358: PUSH
33359: LD_EXP 47
33363: PUSH
33364: LD_EXP 48
33368: PUSH
33369: LD_EXP 49
33373: PUSH
33374: LD_EXP 50
33378: PUSH
33379: LD_EXP 51
33383: PUSH
33384: LD_EXP 52
33388: PUSH
33389: LD_EXP 53
33393: PUSH
33394: LD_EXP 54
33398: PUSH
33399: LD_EXP 55
33403: PUSH
33404: LD_EXP 56
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: DIFF
33429: ST_TO_ADDR
// if tmp2 then
33430: LD_VAR 0 3
33434: IFFALSE 33452
// Say ( tmp2 [ 1 ] , D19-Sol1-1 ) ;
33436: LD_VAR 0 3
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: PPUSH
33445: LD_STRING D19-Sol1-1
33447: PPUSH
33448: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
33452: LD_EXP 40
33456: PPUSH
33457: LD_STRING D19-JMM-2
33459: PPUSH
33460: CALL_OW 88
// DialogueOff ;
33464: CALL_OW 7
// RemoveSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 ) ;
33468: LD_VAR 0 2
33472: PUSH
33473: LD_INT 1
33475: ARRAY
33476: PPUSH
33477: LD_VAR 0 2
33481: PUSH
33482: LD_INT 2
33484: ARRAY
33485: PPUSH
33486: LD_INT 1
33488: PPUSH
33489: CALL_OW 331
// ChangeMissionObjectives ( M5 ) ;
33493: LD_STRING M5
33495: PPUSH
33496: CALL_OW 337
// omarOnMotherLode := false ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_INT 0
33507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33508: LD_INT 35
33510: PPUSH
33511: CALL_OW 67
// if GetDistUnitXY ( Omar , 215 , 100 ) < 10 and not omarOnMotherLode then
33515: LD_EXP 96
33519: PPUSH
33520: LD_INT 215
33522: PPUSH
33523: LD_INT 100
33525: PPUSH
33526: CALL_OW 297
33530: PUSH
33531: LD_INT 10
33533: LESS
33534: PUSH
33535: LD_VAR 0 4
33539: NOT
33540: AND
33541: IFFALSE 33575
// begin omarOnMotherLode := true ;
33543: LD_ADDR_VAR 0 4
33547: PUSH
33548: LD_INT 1
33550: ST_TO_ADDR
// Say ( JMM , D19b-JMM-1 ) ;
33551: LD_EXP 40
33555: PPUSH
33556: LD_STRING D19b-JMM-1
33558: PPUSH
33559: CALL_OW 88
// Say ( Omar , DOmarContam-Omar-1 ) ;
33563: LD_EXP 96
33567: PPUSH
33568: LD_STRING DOmarContam-Omar-1
33570: PPUSH
33571: CALL_OW 88
// end ; until IsDead ( Omar ) ;
33575: LD_EXP 96
33579: PPUSH
33580: CALL_OW 301
33584: IFFALSE 33508
// Say ( JMM , D19a-JMM-1 ) ;
33586: LD_EXP 40
33590: PPUSH
33591: LD_STRING D19a-JMM-1
33593: PPUSH
33594: CALL_OW 88
// if Heike then
33598: LD_EXP 97
33602: IFFALSE 33616
// Say ( Heike , D19a-Hke-1 ) ;
33604: LD_EXP 97
33608: PPUSH
33609: LD_STRING D19a-Hke-1
33611: PPUSH
33612: CALL_OW 88
// end ;
33616: PPOPN 4
33618: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and russianDestroyed do var i , tmp ;
33619: LD_INT 22
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 21
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: PUSH
33648: LD_EXP 21
33652: AND
33653: IFFALSE 33721
33655: GO 33657
33657: DISABLE
33658: LD_INT 0
33660: PPUSH
33661: PPUSH
// begin enable ;
33662: ENABLE
// tmp := FilterUnitsInArea ( russianEscapeArea , [ f_side , 3 ] ) ;
33663: LD_ADDR_VAR 0 2
33667: PUSH
33668: LD_INT 25
33670: PPUSH
33671: LD_INT 22
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PPUSH
33681: CALL_OW 70
33685: ST_TO_ADDR
// if not tmp then
33686: LD_VAR 0 2
33690: NOT
33691: IFFALSE 33695
// exit ;
33693: GO 33721
// for i in tmp do
33695: LD_ADDR_VAR 0 1
33699: PUSH
33700: LD_VAR 0 2
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33719
// RemoveUnit ( i ) ;
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 64
33717: GO 33705
33719: POP
33720: POP
// end ;
33721: PPOPN 2
33723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) < 6 do var tmp , i ;
33724: LD_INT 22
33726: PUSH
33727: LD_INT 7
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 21
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 69
33752: PUSH
33753: LD_INT 6
33755: LESS
33756: IFFALSE 34224
33758: GO 33760
33760: DISABLE
33761: LD_INT 0
33763: PPUSH
33764: PPUSH
// begin MC_Kill ( 1 ) ;
33765: LD_INT 1
33767: PPUSH
33768: CALL 38607 0 1
// SetAttitude ( 7 , 1 , att_friend , true ) ;
33772: LD_INT 7
33774: PPUSH
33775: LD_INT 1
33777: PPUSH
33778: LD_INT 1
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_sex , sex_male ] ] ) diff Roth ;
33788: LD_ADDR_VAR 0 1
33792: PUSH
33793: LD_INT 22
33795: PUSH
33796: LD_INT 7
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 26
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PPUSH
33817: CALL_OW 69
33821: PUSH
33822: LD_EXP 78
33826: DIFF
33827: ST_TO_ADDR
// if tmp then
33828: LD_VAR 0 1
33832: IFFALSE 33850
// tmp := tmp [ 1 ] else
33834: LD_ADDR_VAR 0 1
33838: PUSH
33839: LD_VAR 0 1
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: ST_TO_ADDR
33848: GO 33886
// begin uc_side := 7 ;
33850: LD_ADDR_OWVAR 20
33854: PUSH
33855: LD_INT 7
33857: ST_TO_ADDR
// uc_nation := 1 ;
33858: LD_ADDR_OWVAR 21
33862: PUSH
33863: LD_INT 1
33865: ST_TO_ADDR
// PrepareScientist ( sex_male , 8 ) ;
33866: LD_INT 1
33868: PPUSH
33869: LD_INT 8
33871: PPUSH
33872: CALL_OW 384
// tmp := CreateHuman ;
33876: LD_ADDR_VAR 0 1
33880: PUSH
33881: CALL_OW 44
33885: ST_TO_ADDR
// end ; DialogueOn ;
33886: CALL_OW 6
// if IsOK ( Roth ) then
33890: LD_EXP 78
33894: PPUSH
33895: CALL_OW 302
33899: IFFALSE 33913
// Say ( JMM , DAb-JMM-1 ) ;
33901: LD_EXP 40
33905: PPUSH
33906: LD_STRING DAb-JMM-1
33908: PPUSH
33909: CALL_OW 88
// if IsOK ( Roth ) then
33913: LD_EXP 78
33917: PPUSH
33918: CALL_OW 302
33922: IFFALSE 33946
// begin Say ( Roth , DSurrenderAlliance-Roth-1 ) ;
33924: LD_EXP 78
33928: PPUSH
33929: LD_STRING DSurrenderAlliance-Roth-1
33931: PPUSH
33932: CALL_OW 88
// RothCaptured := true ;
33936: LD_ADDR_EXP 33
33940: PUSH
33941: LD_INT 1
33943: ST_TO_ADDR
// end else
33944: GO 33958
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_STRING DSurrenderAlliance-Sci1-1
33953: PPUSH
33954: CALL_OW 88
// DialogueOff ;
33958: CALL_OW 7
// allianceDestroyed := true ;
33962: LD_ADDR_EXP 23
33966: PUSH
33967: LD_INT 1
33969: ST_TO_ADDR
// if capturedUnit = 0 then
33970: LD_EXP 34
33974: PUSH
33975: LD_INT 0
33977: EQUAL
33978: IFFALSE 33987
// SetAchievement ( ACH_ALLIANCE ) ;
33980: LD_STRING ACH_ALLIANCE
33982: PPUSH
33983: CALL_OW 543
// if trueAmericans then
33987: LD_EXP 35
33991: IFFALSE 34067
// begin if trueAmericans = 1 then
33993: LD_EXP 35
33997: PUSH
33998: LD_INT 1
34000: EQUAL
34001: IFFALSE 34017
// Say ( JMM , DAb-JMM-1a ) else
34003: LD_EXP 40
34007: PPUSH
34008: LD_STRING DAb-JMM-1a
34010: PPUSH
34011: CALL_OW 88
34015: GO 34029
// Say ( JMM , DAb-JMM-1b ) ;
34017: LD_EXP 40
34021: PPUSH
34022: LD_STRING DAb-JMM-1b
34024: PPUSH
34025: CALL_OW 88
// CenterNowOnUnits ( trueAmericans ) ;
34029: LD_EXP 35
34033: PPUSH
34034: CALL_OW 87
// for i in trueAmericans do
34038: LD_ADDR_VAR 0 2
34042: PUSH
34043: LD_EXP 35
34047: PUSH
34048: FOR_IN
34049: IFFALSE 34065
// SetSide ( i , 1 ) ;
34051: LD_VAR 0 2
34055: PPUSH
34056: LD_INT 1
34058: PPUSH
34059: CALL_OW 235
34063: GO 34048
34065: POP
34066: POP
// end ; repeat wait ( 0 0$1 ) ;
34067: LD_INT 35
34069: PPUSH
34070: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
34074: LD_ADDR_VAR 0 2
34078: PUSH
34079: LD_INT 22
34081: PUSH
34082: LD_INT 7
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL_OW 69
34107: PUSH
34108: FOR_IN
34109: IFFALSE 34191
// begin if IsInUnit ( i ) then
34111: LD_VAR 0 2
34115: PPUSH
34116: CALL_OW 310
34120: IFFALSE 34131
// ComExitBuilding ( i ) ;
34122: LD_VAR 0 2
34126: PPUSH
34127: CALL_OW 122
// if IsDriver ( i ) then
34131: LD_VAR 0 2
34135: PPUSH
34136: CALL 103976 0 1
34140: IFFALSE 34151
// ComExitVehicle ( i ) ;
34142: LD_VAR 0 2
34146: PPUSH
34147: CALL_OW 121
// if not IsInArea ( i , allianceEscapeArea ) then
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_INT 26
34158: PPUSH
34159: CALL_OW 308
34163: NOT
34164: IFFALSE 34180
// AddComMoveToArea ( i , allianceEscapeArea ) else
34166: LD_VAR 0 2
34170: PPUSH
34171: LD_INT 26
34173: PPUSH
34174: CALL_OW 173
34178: GO 34189
// RemoveUnit ( i ) ;
34180: LD_VAR 0 2
34184: PPUSH
34185: CALL_OW 64
// end ;
34189: GO 34108
34191: POP
34192: POP
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
34193: LD_INT 22
34195: PUSH
34196: LD_INT 7
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 21
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PPUSH
34217: CALL_OW 69
34221: NOT
34222: IFFALSE 34067
// end ;
34224: PPOPN 2
34226: END
// export function AllianceCaptureUnit ( unit ) ; var join ; begin
34227: LD_INT 0
34229: PPUSH
34230: PPUSH
// if not unit then
34231: LD_VAR 0 1
34235: NOT
34236: IFFALSE 34240
// exit ;
34238: GO 35748
// DoNotAttack ( 7 , unit ) ;
34240: LD_INT 7
34242: PPUSH
34243: LD_VAR 0 1
34247: PPUSH
34248: CALL_OW 471
// TeleportUnit ( unit , 260 , 235 , 3 , true ) ;
34252: LD_VAR 0 1
34256: PPUSH
34257: LD_INT 260
34259: PPUSH
34260: LD_INT 235
34262: PPUSH
34263: LD_INT 3
34265: PPUSH
34266: LD_INT 1
34268: PPUSH
34269: CALL_OW 483
// SetSide ( unit , 4 ) ;
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_INT 4
34280: PPUSH
34281: CALL_OW 235
// capturedUnit := capturedUnit + 1 ;
34285: LD_ADDR_EXP 34
34289: PUSH
34290: LD_EXP 34
34294: PUSH
34295: LD_INT 1
34297: PLUS
34298: ST_TO_ADDR
// wait ( 0 0$2 ) ;
34299: LD_INT 70
34301: PPUSH
34302: CALL_OW 67
// PlaceSeeing ( 260 , 235 , 1 , - 8 ) ;
34306: LD_INT 260
34308: PPUSH
34309: LD_INT 235
34311: PPUSH
34312: LD_INT 1
34314: PPUSH
34315: LD_INT 8
34317: NEG
34318: PPUSH
34319: CALL_OW 330
// CenterNowOnUnits ( unit ) ;
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 87
// ComTurnUnit ( unit , Roth ) ;
34332: LD_VAR 0 1
34336: PPUSH
34337: LD_EXP 78
34341: PPUSH
34342: CALL_OW 119
// DialogueOn ;
34346: CALL_OW 6
// case unit of JMM :
34350: LD_VAR 0 1
34354: PUSH
34355: LD_EXP 40
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34380
34365: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
34366: LD_EXP 40
34370: PPUSH
34371: LD_STRING DA1-JMM-1
34373: PPUSH
34374: CALL_OW 91
34378: GO 34822
34380: LD_EXP 41
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34390
34388: GO 34405
34390: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
34391: LD_EXP 41
34395: PPUSH
34396: LD_STRING DA1-Joan-1
34398: PPUSH
34399: CALL_OW 91
34403: GO 34822
34405: LD_EXP 43
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34430
34415: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
34416: LD_EXP 43
34420: PPUSH
34421: LD_STRING DA1-Lisa-1
34423: PPUSH
34424: CALL_OW 91
34428: GO 34822
34430: LD_EXP 44
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34455
34440: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornel :
34441: LD_EXP 44
34445: PPUSH
34446: LD_STRING DA1-Don-1
34448: PPUSH
34449: CALL_OW 91
34453: GO 34822
34455: LD_EXP 51
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34465
34463: GO 34480
34465: POP
// ForceSay ( Cornel , DA1-Corn-1 ) ; Denis :
34466: LD_EXP 51
34470: PPUSH
34471: LD_STRING DA1-Corn-1
34473: PPUSH
34474: CALL_OW 91
34478: GO 34822
34480: LD_EXP 47
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 34505
34490: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
34491: LD_EXP 47
34495: PPUSH
34496: LD_STRING DA1-Den-1
34498: PPUSH
34499: CALL_OW 91
34503: GO 34822
34505: LD_EXP 45
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34515
34513: GO 34530
34515: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
34516: LD_EXP 45
34520: PPUSH
34521: LD_STRING DA1-Bobby-1
34523: PPUSH
34524: CALL_OW 91
34528: GO 34822
34530: LD_EXP 49
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34555
34540: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
34541: LD_EXP 49
34545: PPUSH
34546: LD_STRING DA1-Glad-1
34548: PPUSH
34549: CALL_OW 91
34553: GO 34822
34555: LD_EXP 46
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34580
34565: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
34566: LD_EXP 46
34570: PPUSH
34571: LD_STRING DA1-Cyrus-1
34573: PPUSH
34574: CALL_OW 91
34578: GO 34822
34580: LD_EXP 42
34584: DOUBLE
34585: EQUAL
34586: IFTRUE 34590
34588: GO 34605
34590: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Baker :
34591: LD_EXP 42
34595: PPUSH
34596: LD_STRING DA1-Huck-1
34598: PPUSH
34599: CALL_OW 91
34603: GO 34822
34605: LD_EXP 56
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34630
34615: POP
// ForceSay ( Baker , DA1-Huck-1 ) ; Brown :
34616: LD_EXP 56
34620: PPUSH
34621: LD_STRING DA1-Huck-1
34623: PPUSH
34624: CALL_OW 91
34628: GO 34822
34630: LD_EXP 48
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34655
34640: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
34641: LD_EXP 48
34645: PPUSH
34646: LD_STRING DA1-Brown-1
34648: PPUSH
34649: CALL_OW 91
34653: GO 34822
34655: LD_EXP 52
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34680
34665: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Connie :
34666: LD_EXP 52
34670: PPUSH
34671: LD_STRING DA1-Gary-1
34673: PPUSH
34674: CALL_OW 91
34678: GO 34822
34680: LD_EXP 55
34684: DOUBLE
34685: EQUAL
34686: IFTRUE 34690
34688: GO 34705
34690: POP
// ForceSay ( Connie , DA1-Con-1 ) ; Kurt :
34691: LD_EXP 55
34695: PPUSH
34696: LD_STRING DA1-Con-1
34698: PPUSH
34699: CALL_OW 91
34703: GO 34822
34705: LD_EXP 63
34709: DOUBLE
34710: EQUAL
34711: IFTRUE 34715
34713: GO 34730
34715: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Kikuchi :
34716: LD_EXP 63
34720: PPUSH
34721: LD_STRING DA1-Kurt-1
34723: PPUSH
34724: CALL_OW 91
34728: GO 34822
34730: LD_EXP 54
34734: DOUBLE
34735: EQUAL
34736: IFTRUE 34740
34738: GO 34755
34740: POP
// ForceSay ( Kikuchi , DA1-Yam-1 ) ; Frank :
34741: LD_EXP 54
34745: PPUSH
34746: LD_STRING DA1-Yam-1
34748: PPUSH
34749: CALL_OW 91
34753: GO 34822
34755: LD_EXP 53
34759: DOUBLE
34760: EQUAL
34761: IFTRUE 34765
34763: GO 34780
34765: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
34766: LD_EXP 53
34770: PPUSH
34771: LD_STRING DA1-Frank-1
34773: PPUSH
34774: CALL_OW 91
34778: GO 34822
34780: POP
// begin if GetSex ( unit ) = sex_male then
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 258
34790: PUSH
34791: LD_INT 1
34793: EQUAL
34794: IFFALSE 34810
// ForceSay ( unit , DA1-Sol1-1 ) else
34796: LD_VAR 0 1
34800: PPUSH
34801: LD_STRING DA1-Sol1-1
34803: PPUSH
34804: CALL_OW 91
34808: GO 34822
// ForceSay ( unit , DA1-FSol1-1 ) ;
34810: LD_VAR 0 1
34814: PPUSH
34815: LD_STRING DA1-FSol1-1
34817: PPUSH
34818: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
34822: LD_EXP 78
34826: PPUSH
34827: LD_STRING DA-Roth-1
34829: PPUSH
34830: CALL_OW 88
// if capturedUnit = 1 then
34834: LD_EXP 34
34838: PUSH
34839: LD_INT 1
34841: EQUAL
34842: IFFALSE 34870
// begin Say ( Simms , DA-Sim-1 ) ;
34844: LD_EXP 79
34848: PPUSH
34849: LD_STRING DA-Sim-1
34851: PPUSH
34852: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
34856: LD_EXP 78
34860: PPUSH
34861: LD_STRING DA-Roth-2
34863: PPUSH
34864: CALL_OW 88
// end else
34868: GO 34882
// Say ( Simms , DA-Sim-2 ) ;
34870: LD_EXP 79
34874: PPUSH
34875: LD_STRING DA-Sim-2
34877: PPUSH
34878: CALL_OW 88
// case unit of JMM :
34882: LD_VAR 0 1
34886: PUSH
34887: LD_EXP 40
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34912
34897: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
34898: LD_EXP 40
34902: PPUSH
34903: LD_STRING DA1-JMM-1a
34905: PPUSH
34906: CALL_OW 91
34910: GO 35429
34912: LD_EXP 41
34916: DOUBLE
34917: EQUAL
34918: IFTRUE 34922
34920: GO 34937
34922: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
34923: LD_EXP 41
34927: PPUSH
34928: LD_STRING DA1-Joan-1a
34930: PPUSH
34931: CALL_OW 91
34935: GO 35429
34937: LD_EXP 43
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34947
34945: GO 34962
34947: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
34948: LD_EXP 43
34952: PPUSH
34953: LD_STRING DA1-Lisa-1a
34955: PPUSH
34956: CALL_OW 91
34960: GO 35429
34962: LD_EXP 44
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34972
34970: GO 34987
34972: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornel :
34973: LD_EXP 44
34977: PPUSH
34978: LD_STRING DA1-Don-1a
34980: PPUSH
34981: CALL_OW 91
34985: GO 35429
34987: LD_EXP 51
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35012
34997: POP
// ForceSay ( Cornel , DA1-Corn-1a ) ; Denis :
34998: LD_EXP 51
35002: PPUSH
35003: LD_STRING DA1-Corn-1a
35005: PPUSH
35006: CALL_OW 91
35010: GO 35429
35012: LD_EXP 47
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35037
35022: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
35023: LD_EXP 47
35027: PPUSH
35028: LD_STRING DA1-Den-1a
35030: PPUSH
35031: CALL_OW 91
35035: GO 35429
35037: LD_EXP 45
35041: DOUBLE
35042: EQUAL
35043: IFTRUE 35047
35045: GO 35062
35047: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
35048: LD_EXP 45
35052: PPUSH
35053: LD_STRING DA1-Bobby-1a
35055: PPUSH
35056: CALL_OW 91
35060: GO 35429
35062: LD_EXP 49
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35087
35072: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
35073: LD_EXP 49
35077: PPUSH
35078: LD_STRING DA1-Glad-1a
35080: PPUSH
35081: CALL_OW 91
35085: GO 35429
35087: LD_EXP 46
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35097
35095: GO 35112
35097: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
35098: LD_EXP 46
35102: PPUSH
35103: LD_STRING DA1-Cyrus-1a
35105: PPUSH
35106: CALL_OW 91
35110: GO 35429
35112: LD_EXP 42
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35137
35122: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Baker :
35123: LD_EXP 42
35127: PPUSH
35128: LD_STRING DA1-Huck-1a
35130: PPUSH
35131: CALL_OW 91
35135: GO 35429
35137: LD_EXP 56
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35162
35147: POP
// ForceSay ( Baker , DA1-Huck-1a ) ; Brown :
35148: LD_EXP 56
35152: PPUSH
35153: LD_STRING DA1-Huck-1a
35155: PPUSH
35156: CALL_OW 91
35160: GO 35429
35162: LD_EXP 48
35166: DOUBLE
35167: EQUAL
35168: IFTRUE 35172
35170: GO 35187
35172: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
35173: LD_EXP 48
35177: PPUSH
35178: LD_STRING DA1-Brown-1a
35180: PPUSH
35181: CALL_OW 91
35185: GO 35429
35187: LD_EXP 52
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35212
35197: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Connie :
35198: LD_EXP 52
35202: PPUSH
35203: LD_STRING DA1-Gary-1a
35205: PPUSH
35206: CALL_OW 91
35210: GO 35429
35212: LD_EXP 55
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35247
35222: POP
// if JMMGirl = 3 then
35223: LD_EXP 7
35227: PUSH
35228: LD_INT 3
35230: EQUAL
35231: IFFALSE 35245
// ForceSay ( Connie , DA1-Con-1a ) ; Kurt :
35233: LD_EXP 55
35237: PPUSH
35238: LD_STRING DA1-Con-1a
35240: PPUSH
35241: CALL_OW 91
35245: GO 35429
35247: LD_EXP 63
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35272
35257: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Kikuchi :
35258: LD_EXP 63
35262: PPUSH
35263: LD_STRING DA1-Kurt-1a
35265: PPUSH
35266: CALL_OW 91
35270: GO 35429
35272: LD_EXP 54
35276: DOUBLE
35277: EQUAL
35278: IFTRUE 35282
35280: GO 35297
35282: POP
// ForceSay ( Kikuchi , DA1-Yam-1a ) ; Frank :
35283: LD_EXP 54
35287: PPUSH
35288: LD_STRING DA1-Yam-1a
35290: PPUSH
35291: CALL_OW 91
35295: GO 35429
35297: LD_EXP 53
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35307
35305: GO 35322
35307: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
35308: LD_EXP 53
35312: PPUSH
35313: LD_STRING DA1-Frank-1a
35315: PPUSH
35316: CALL_OW 91
35320: GO 35429
35322: POP
// begin join := rand ( 0 , 1 ) ;
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 0
35330: PPUSH
35331: LD_INT 1
35333: PPUSH
35334: CALL_OW 12
35338: ST_TO_ADDR
// if join then
35339: LD_VAR 0 3
35343: IFFALSE 35388
// begin if GetSex ( unit ) = sex_male then
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 258
35354: PUSH
35355: LD_INT 1
35357: EQUAL
35358: IFFALSE 35374
// ForceSay ( unit , DA1-Sol1-1b ) else
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_STRING DA1-Sol1-1b
35367: PPUSH
35368: CALL_OW 91
35372: GO 35386
// ForceSay ( unit , DA1-FSol1-1b ) ;
35374: LD_VAR 0 1
35378: PPUSH
35379: LD_STRING DA1-FSol1-1b
35381: PPUSH
35382: CALL_OW 91
// end else
35386: GO 35429
// begin if GetSex ( unit ) = sex_male then
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 258
35397: PUSH
35398: LD_INT 1
35400: EQUAL
35401: IFFALSE 35417
// ForceSay ( unit , DA1-Sol1-1a ) else
35403: LD_VAR 0 1
35407: PPUSH
35408: LD_STRING DA1-Sol1-1a
35410: PPUSH
35411: CALL_OW 91
35415: GO 35429
// ForceSay ( unit , DA1-FSol1-1a ) ;
35417: LD_VAR 0 1
35421: PPUSH
35422: LD_STRING DA1-FSol1-1a
35424: PPUSH
35425: CALL_OW 91
// end ; end ; end ; if unit = JMM then
35429: LD_VAR 0 1
35433: PUSH
35434: LD_EXP 40
35438: EQUAL
35439: IFFALSE 35450
// begin YouLost ( JMMCaptured ) ;
35441: LD_STRING JMMCaptured
35443: PPUSH
35444: CALL_OW 104
// exit ;
35448: GO 35748
// end ; if unit in [ Donaldson , Denis , Bobby , Stevens , Baker , Brown , Kikuchi ] or join then
35450: LD_VAR 0 1
35454: PUSH
35455: LD_EXP 44
35459: PUSH
35460: LD_EXP 47
35464: PUSH
35465: LD_EXP 45
35469: PUSH
35470: LD_EXP 42
35474: PUSH
35475: LD_EXP 56
35479: PUSH
35480: LD_EXP 48
35484: PUSH
35485: LD_EXP 54
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: IN
35499: PUSH
35500: LD_VAR 0 3
35504: OR
35505: IFFALSE 35604
// begin Say ( Roth , DA-Roth-3 ) ;
35507: LD_EXP 78
35511: PPUSH
35512: LD_STRING DA-Roth-3
35514: PPUSH
35515: CALL_OW 88
// SetSide ( unit , 7 ) ;
35519: LD_VAR 0 1
35523: PPUSH
35524: LD_INT 7
35526: PPUSH
35527: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] ^ unit ) ;
35531: LD_ADDR_EXP 101
35535: PUSH
35536: LD_EXP 101
35540: PPUSH
35541: LD_INT 1
35543: PPUSH
35544: LD_EXP 101
35548: PUSH
35549: LD_INT 1
35551: ARRAY
35552: PUSH
35553: LD_VAR 0 1
35557: ADD
35558: PPUSH
35559: CALL_OW 1
35563: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
35564: LD_INT 260
35566: PPUSH
35567: LD_INT 235
35569: PPUSH
35570: LD_INT 1
35572: PPUSH
35573: CALL_OW 331
// SetLives ( unit , 1000 ) ;
35577: LD_VAR 0 1
35581: PPUSH
35582: LD_INT 1000
35584: PPUSH
35585: CALL_OW 234
// DialogueOff ;
35589: CALL_OW 7
// ComFree ( unit ) ;
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL_OW 139
// end else
35602: GO 35685
// begin Say ( Roth , DA-Roth-3a ) ;
35604: LD_EXP 78
35608: PPUSH
35609: LD_STRING DA-Roth-3a
35611: PPUSH
35612: CALL_OW 88
// trueAmericans := trueAmericans ^ unit ;
35616: LD_ADDR_EXP 35
35620: PUSH
35621: LD_EXP 35
35625: PUSH
35626: LD_VAR 0 1
35630: ADD
35631: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
35632: LD_INT 260
35634: PPUSH
35635: LD_INT 235
35637: PPUSH
35638: LD_INT 1
35640: PPUSH
35641: CALL_OW 331
// SetLives ( unit , 1000 ) ;
35645: LD_VAR 0 1
35649: PPUSH
35650: LD_INT 1000
35652: PPUSH
35653: CALL_OW 234
// DialogueOff ;
35657: CALL_OW 7
// ComMoveXY ( unit , 272 , 254 ) ;
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_INT 272
35668: PPUSH
35669: LD_INT 254
35671: PPUSH
35672: CALL_OW 111
// AddComHold ( unit ) ;
35676: LD_VAR 0 1
35680: PPUSH
35681: CALL_OW 200
// end ; if capturedUnit = 1 then
35685: LD_EXP 34
35689: PUSH
35690: LD_INT 1
35692: EQUAL
35693: IFFALSE 35748
// begin DialogueOn ;
35695: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
35699: LD_EXP 40
35703: PPUSH
35704: CALL_OW 87
// Say ( JMM , DAa-JMM-1 ) ;
35708: LD_EXP 40
35712: PPUSH
35713: LD_STRING DAa-JMM-1
35715: PPUSH
35716: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
35720: LD_EXP 40
35724: PPUSH
35725: LD_STRING DAa-JMM-1a
35727: PPUSH
35728: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
35732: LD_EXP 40
35736: PPUSH
35737: LD_STRING DAa-JMM-1b
35739: PPUSH
35740: CALL_OW 88
// DialogueOff ;
35744: CALL_OW 7
// end ; end ;
35748: LD_VAR 0 2
35752: RET
// every 0 0$1 trigger missionStage >= 13 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and russianDestroyed and legionDestroyed and allianceDestroyed do var m1 , m2 , m3 ;
35753: LD_EXP 15
35757: PUSH
35758: LD_INT 13
35760: GREATEREQUAL
35761: PUSH
35762: LD_INT 22
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 21
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: PUSH
35791: LD_INT 0
35793: EQUAL
35794: AND
35795: PUSH
35796: LD_INT 22
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 33
35808: PUSH
35809: LD_INT 5
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 21
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 50
35828: PUSH
35829: EMPTY
35830: LIST
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: PPUSH
35838: CALL_OW 69
35842: PUSH
35843: LD_INT 0
35845: EQUAL
35846: AND
35847: PUSH
35848: LD_EXP 21
35852: AND
35853: PUSH
35854: LD_EXP 22
35858: AND
35859: PUSH
35860: LD_EXP 23
35864: AND
35865: IFFALSE 36561
35867: GO 35869
35869: DISABLE
35870: LD_INT 0
35872: PPUSH
35873: PPUSH
35874: PPUSH
// begin m1 := false ;
35875: LD_ADDR_VAR 0 1
35879: PUSH
35880: LD_INT 0
35882: ST_TO_ADDR
// m2 := false ;
35883: LD_ADDR_VAR 0 2
35887: PUSH
35888: LD_INT 0
35890: ST_TO_ADDR
// m3 := false ;
35891: LD_ADDR_VAR 0 3
35895: PUSH
35896: LD_INT 0
35898: ST_TO_ADDR
// if not bombExploded then
35899: LD_EXP 37
35903: NOT
35904: IFFALSE 35913
// SetAchievement ( ACH_SIBROCKET ) ;
35906: LD_STRING ACH_SIBROCKET
35908: PPUSH
35909: CALL_OW 543
// if GetSide ( Friend ) = 1 and IsOk ( Friend ) then
35913: LD_EXP 65
35917: PPUSH
35918: CALL_OW 255
35922: PUSH
35923: LD_INT 1
35925: EQUAL
35926: PUSH
35927: LD_EXP 65
35931: PPUSH
35932: CALL_OW 302
35936: AND
35937: IFFALSE 35953
// begin wait ( 3 ) ;
35939: LD_INT 3
35941: PPUSH
35942: CALL_OW 67
// SetAchievement ( ACH_OPO ) ;
35946: LD_STRING ACH_OPO
35948: PPUSH
35949: CALL_OW 543
// end ; if tick <= 120 120$00 then
35953: LD_OWVAR 1
35957: PUSH
35958: LD_INT 252000
35960: LESSEQUAL
35961: IFFALSE 35977
// begin wait ( 3 ) ;
35963: LD_INT 3
35965: PPUSH
35966: CALL_OW 67
// SetAchievement ( ACH_ASPEED_15 ) ;
35970: LD_STRING ACH_ASPEED_15
35972: PPUSH
35973: CALL_OW 543
// end ; CenterNowOnUnits ( JMM ) ;
35977: LD_EXP 40
35981: PPUSH
35982: CALL_OW 87
// music_class := 5 ;
35986: LD_ADDR_OWVAR 72
35990: PUSH
35991: LD_INT 5
35993: ST_TO_ADDR
// music_nat := 5 ;
35994: LD_ADDR_OWVAR 71
35998: PUSH
35999: LD_INT 5
36001: ST_TO_ADDR
// DialogueOn ;
36002: CALL_OW 6
// Say ( JMM , D20-JMM-1 ) ;
36006: LD_EXP 40
36010: PPUSH
36011: LD_STRING D20-JMM-1
36013: PPUSH
36014: CALL_OW 88
// if IsOK ( Joan ) then
36018: LD_EXP 41
36022: PPUSH
36023: CALL_OW 302
36027: IFFALSE 36041
// Say ( Joan , D20-Joan-1 ) ;
36029: LD_EXP 41
36033: PPUSH
36034: LD_STRING D20-Joan-1
36036: PPUSH
36037: CALL_OW 88
// if IsOk ( Lisa ) then
36041: LD_EXP 43
36045: PPUSH
36046: CALL_OW 302
36050: IFFALSE 36064
// Say ( Lisa , D20-Lisa-1 ) ;
36052: LD_EXP 43
36056: PPUSH
36057: LD_STRING D20-Lisa-1
36059: PPUSH
36060: CALL_OW 88
// if IsOk ( Donaldson ) then
36064: LD_EXP 44
36068: PPUSH
36069: CALL_OW 302
36073: IFFALSE 36087
// Say ( Donaldson , D20-Don-1 ) ;
36075: LD_EXP 44
36079: PPUSH
36080: LD_STRING D20-Don-1
36082: PPUSH
36083: CALL_OW 88
// if IsOK ( Cornel ) then
36087: LD_EXP 51
36091: PPUSH
36092: CALL_OW 302
36096: IFFALSE 36110
// Say ( Cornel , D20-Corn-1 ) ;
36098: LD_EXP 51
36102: PPUSH
36103: LD_STRING D20-Corn-1
36105: PPUSH
36106: CALL_OW 88
// if IsOk ( Denis ) then
36110: LD_EXP 47
36114: PPUSH
36115: CALL_OW 302
36119: IFFALSE 36133
// Say ( Denis , D20-Den-1 ) ;
36121: LD_EXP 47
36125: PPUSH
36126: LD_STRING D20-Den-1
36128: PPUSH
36129: CALL_OW 88
// if IsOk ( Bobby ) then
36133: LD_EXP 45
36137: PPUSH
36138: CALL_OW 302
36142: IFFALSE 36156
// Say ( Bobby , D20-Bobby-1 ) ;
36144: LD_EXP 45
36148: PPUSH
36149: LD_STRING D20-Bobby-1
36151: PPUSH
36152: CALL_OW 88
// if IsOk ( Gladstone ) then
36156: LD_EXP 49
36160: PPUSH
36161: CALL_OW 302
36165: IFFALSE 36179
// Say ( Gladstone , D20-Glad-1 ) ;
36167: LD_EXP 49
36171: PPUSH
36172: LD_STRING D20-Glad-1
36174: PPUSH
36175: CALL_OW 88
// if IsOk ( Cyrus ) then
36179: LD_EXP 46
36183: PPUSH
36184: CALL_OW 302
36188: IFFALSE 36202
// Say ( Cyrus , D20-Cyrus-1 ) ;
36190: LD_EXP 46
36194: PPUSH
36195: LD_STRING D20-Cyrus-1
36197: PPUSH
36198: CALL_OW 88
// if IsOk ( Stevens ) then
36202: LD_EXP 42
36206: PPUSH
36207: CALL_OW 302
36211: IFFALSE 36225
// Say ( Stevens , D20-Huck-1 ) ;
36213: LD_EXP 42
36217: PPUSH
36218: LD_STRING D20-Huck-1
36220: PPUSH
36221: CALL_OW 88
// if IsOk ( Brown ) then
36225: LD_EXP 48
36229: PPUSH
36230: CALL_OW 302
36234: IFFALSE 36248
// Say ( Brown , D20-Brown-1 ) ;
36236: LD_EXP 48
36240: PPUSH
36241: LD_STRING D20-Brown-1
36243: PPUSH
36244: CALL_OW 88
// if IsOk ( Gary ) then
36248: LD_EXP 52
36252: PPUSH
36253: CALL_OW 302
36257: IFFALSE 36271
// Say ( Gary , D20-Gary-1 ) ;
36259: LD_EXP 52
36263: PPUSH
36264: LD_STRING D20-Gary-1
36266: PPUSH
36267: CALL_OW 88
// if IsOk ( Connie ) then
36271: LD_EXP 55
36275: PPUSH
36276: CALL_OW 302
36280: IFFALSE 36294
// Say ( Connie , D20-Con-1 ) ;
36282: LD_EXP 55
36286: PPUSH
36287: LD_STRING D20-Con-1
36289: PPUSH
36290: CALL_OW 88
// if IsOk ( Kurt ) then
36294: LD_EXP 63
36298: PPUSH
36299: CALL_OW 302
36303: IFFALSE 36317
// Say ( Kurt , D20-Kurt-1 ) ;
36305: LD_EXP 63
36309: PPUSH
36310: LD_STRING D20-Kurt-1
36312: PPUSH
36313: CALL_OW 88
// if IsOk ( Kikuchi ) then
36317: LD_EXP 54
36321: PPUSH
36322: CALL_OW 302
36326: IFFALSE 36340
// Say ( Kikuchi , D20-Yam-1 ) ;
36328: LD_EXP 54
36332: PPUSH
36333: LD_STRING D20-Yam-1
36335: PPUSH
36336: CALL_OW 88
// if IsOk ( Frank ) then
36340: LD_EXP 53
36344: PPUSH
36345: CALL_OW 302
36349: IFFALSE 36363
// Say ( Frank , D20-Frank-1 ) ;
36351: LD_EXP 53
36355: PPUSH
36356: LD_STRING D20-Frank-1
36358: PPUSH
36359: CALL_OW 88
// DialogueOff ;
36363: CALL_OW 7
// if RothCaptured then
36367: LD_EXP 33
36371: IFFALSE 36393
// begin m1 := true ;
36373: LD_ADDR_VAR 0 1
36377: PUSH
36378: LD_INT 1
36380: ST_TO_ADDR
// AddMedal ( Roth , 1 ) ;
36381: LD_STRING Roth
36383: PPUSH
36384: LD_INT 1
36386: PPUSH
36387: CALL_OW 101
// end else
36391: GO 36404
// AddMedal ( Roth , - 1 ) ;
36393: LD_STRING Roth
36395: PPUSH
36396: LD_INT 1
36398: NEG
36399: PPUSH
36400: CALL_OW 101
// if not allowBehemothConstruct or behemothDestroyedBeforeFinish or not behemothDone then
36404: LD_EXP 25
36408: NOT
36409: PUSH
36410: LD_EXP 27
36414: OR
36415: PUSH
36416: LD_EXP 28
36420: NOT
36421: OR
36422: IFFALSE 36444
// begin m2 := true ;
36424: LD_ADDR_VAR 0 2
36428: PUSH
36429: LD_INT 1
36431: ST_TO_ADDR
// AddMedal ( Project , 1 ) ;
36432: LD_STRING Project
36434: PPUSH
36435: LD_INT 1
36437: PPUSH
36438: CALL_OW 101
// end else
36442: GO 36455
// AddMedal ( Project , - 1 ) ;
36444: LD_STRING Project
36446: PPUSH
36447: LD_INT 1
36449: NEG
36450: PPUSH
36451: CALL_OW 101
// if lostCounter = 0 then
36455: LD_EXP 32
36459: PUSH
36460: LD_INT 0
36462: EQUAL
36463: IFFALSE 36485
// begin m3 := true ;
36465: LD_ADDR_VAR 0 3
36469: PUSH
36470: LD_INT 1
36472: ST_TO_ADDR
// AddMedal ( NoLosses , 1 ) ;
36473: LD_STRING NoLosses
36475: PPUSH
36476: LD_INT 1
36478: PPUSH
36479: CALL_OW 101
// end else
36483: GO 36496
// AddMedal ( NoLosses , - 1 ) ;
36485: LD_STRING NoLosses
36487: PPUSH
36488: LD_INT 1
36490: NEG
36491: PPUSH
36492: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
36496: LD_VAR 0 1
36500: PUSH
36501: LD_VAR 0 2
36505: AND
36506: PUSH
36507: LD_VAR 0 3
36511: AND
36512: PUSH
36513: LD_OWVAR 67
36517: PUSH
36518: LD_INT 3
36520: GREATEREQUAL
36521: AND
36522: IFFALSE 36534
// SetAchievementEX ( ACH_AMER , 15 ) ;
36524: LD_STRING ACH_AMER
36526: PPUSH
36527: LD_INT 15
36529: PPUSH
36530: CALL_OW 564
// GiveMedals ( MAIN ) ;
36534: LD_STRING MAIN
36536: PPUSH
36537: CALL_OW 102
// music_class := 4 ;
36541: LD_ADDR_OWVAR 72
36545: PUSH
36546: LD_INT 4
36548: ST_TO_ADDR
// music_nat := 1 ;
36549: LD_ADDR_OWVAR 71
36553: PUSH
36554: LD_INT 1
36556: ST_TO_ADDR
// YouWin ;
36557: CALL_OW 103
// end ; end_of_file
36561: PPOPN 3
36563: END
// export function CustomEvent ( event ) ; begin
36564: LD_INT 0
36566: PPUSH
// end ;
36567: LD_VAR 0 2
36571: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 and IsLive ( Powell ) then
36572: LD_VAR 0 1
36576: PUSH
36577: LD_INT 1
36579: EQUAL
36580: PUSH
36581: LD_VAR 0 2
36585: PUSH
36586: LD_INT 4
36588: EQUAL
36589: AND
36590: PUSH
36591: LD_EXP 60
36595: PPUSH
36596: CALL_OW 300
36600: AND
36601: IFFALSE 36617
// begin wait ( 0 0$2 ) ;
36603: LD_INT 70
36605: PPUSH
36606: CALL_OW 67
// YouLost ( Dismissed ) ;
36610: LD_STRING Dismissed
36612: PPUSH
36613: CALL_OW 104
// end ; end ;
36617: PPOPN 2
36619: END
// on SibDepositContaminated ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: LD_INT 18
36632: PPUSH
36633: CALL_OW 309
36637: IFFALSE 36646
// YouLost ( Motherlode3 ) ;
36639: LD_STRING Motherlode3
36641: PPUSH
36642: CALL_OW 104
// end ;
36646: PPOPN 3
36648: END
// on BehemothConstructed ( behemoth ) do begin if not behemothDestroyedBeforeFinish then
36649: LD_EXP 27
36653: NOT
36654: IFFALSE 36664
// behemothDone := true ;
36656: LD_ADDR_EXP 28
36660: PUSH
36661: LD_INT 1
36663: ST_TO_ADDR
// end ;
36664: PPOPN 1
36666: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if GetSide ( unit ) = 1 then
36667: LD_VAR 0 1
36671: PPUSH
36672: CALL_OW 255
36676: PUSH
36677: LD_INT 1
36679: EQUAL
36680: IFFALSE 36690
// bombExploded := true ;
36682: LD_ADDR_EXP 37
36686: PUSH
36687: LD_INT 1
36689: ST_TO_ADDR
// if GetSide ( unit ) = 3 then
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL_OW 255
36699: PUSH
36700: LD_INT 3
36702: EQUAL
36703: IFFALSE 36733
// MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
36705: LD_INT 2
36707: PPUSH
36708: LD_INT 23
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: LD_INT 48
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: PPUSH
36729: CALL 62632 0 2
// if GetSide ( unit ) = 1 and GetSide ( Friend ) = 1 and IsOk ( Friend ) and platonovHasBomb and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
36733: LD_VAR 0 1
36737: PPUSH
36738: CALL_OW 255
36742: PUSH
36743: LD_INT 1
36745: EQUAL
36746: PUSH
36747: LD_EXP 65
36751: PPUSH
36752: CALL_OW 255
36756: PUSH
36757: LD_INT 1
36759: EQUAL
36760: AND
36761: PUSH
36762: LD_EXP 65
36766: PPUSH
36767: CALL_OW 302
36771: AND
36772: PUSH
36773: LD_EXP 30
36777: AND
36778: PUSH
36779: LD_INT 22
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 34
36791: PUSH
36792: LD_INT 48
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PPUSH
36803: CALL_OW 69
36807: AND
36808: PUSH
36809: LD_INT 22
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 34
36821: PUSH
36822: LD_INT 8
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PPUSH
36833: CALL_OW 69
36837: NOT
36838: AND
36839: IFFALSE 36891
// begin wait ( 0 0$5 ) ;
36841: LD_INT 175
36843: PPUSH
36844: CALL_OW 67
// ComAttackPlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 60 , 95 ) ;
36848: LD_INT 22
36850: PUSH
36851: LD_INT 3
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 34
36860: PUSH
36861: LD_INT 48
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PPUSH
36872: CALL_OW 69
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PPUSH
36881: LD_INT 60
36883: PPUSH
36884: LD_INT 95
36886: PPUSH
36887: CALL_OW 116
// end ; if InArea ( x , y , motherLodeArea ) or IsInSibRocketRange ( x , y , motherLodeArea ) then
36891: LD_VAR 0 2
36895: PPUSH
36896: LD_VAR 0 3
36900: PPUSH
36901: LD_INT 18
36903: PPUSH
36904: CALL_OW 309
36908: PUSH
36909: LD_VAR 0 2
36913: PPUSH
36914: LD_VAR 0 3
36918: PPUSH
36919: LD_INT 18
36921: PPUSH
36922: CALL 110168 0 3
36926: OR
36927: IFFALSE 36974
// begin if GetSide ( unit ) = 1 then
36929: LD_VAR 0 1
36933: PPUSH
36934: CALL_OW 255
36938: PUSH
36939: LD_INT 1
36941: EQUAL
36942: IFFALSE 36960
// begin wait ( 0 0$6 ) ;
36944: LD_INT 210
36946: PPUSH
36947: CALL_OW 67
// YouLost ( Motherlode2 ) ;
36951: LD_STRING Motherlode2
36953: PPUSH
36954: CALL_OW 104
// end else
36958: GO 36974
// begin wait ( 0 0$6 ) ;
36960: LD_INT 210
36962: PPUSH
36963: CALL_OW 67
// YouLost ( Motherlode1 ) ;
36967: LD_STRING Motherlode1
36969: PPUSH
36970: CALL_OW 104
// end ; end ; if GetSide ( unit ) = 3 then
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 255
36983: PUSH
36984: LD_INT 3
36986: EQUAL
36987: IFFALSE 37008
// begin wait ( 0 0$5 ) ;
36989: LD_INT 175
36991: PPUSH
36992: CALL_OW 67
// SayRadio ( Platonov , D18-Pla-1 ) ;
36996: LD_EXP 67
37000: PPUSH
37001: LD_STRING D18-Pla-1
37003: PPUSH
37004: CALL_OW 94
// end ; end ;
37008: PPOPN 3
37010: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL 126233 0 1
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
37020: LD_VAR 0 1
37024: PUSH
37025: LD_INT 22
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 21
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 23
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: PPUSH
37060: CALL_OW 69
37064: IN
37065: IFFALSE 37081
// lostCounter := lostCounter + 1 ;
37067: LD_ADDR_EXP 32
37071: PUSH
37072: LD_EXP 32
37076: PUSH
37077: LD_INT 1
37079: PLUS
37080: ST_TO_ADDR
// if un in behemothBuilders then
37081: LD_VAR 0 1
37085: PUSH
37086: LD_EXP 76
37090: IN
37091: IFFALSE 37111
// begin behemothBuilders := behemothBuilders diff un ;
37093: LD_ADDR_EXP 76
37097: PUSH
37098: LD_EXP 76
37102: PUSH
37103: LD_VAR 0 1
37107: DIFF
37108: ST_TO_ADDR
// exit ;
37109: GO 37141
// end ; if un = JMM then
37111: LD_VAR 0 1
37115: PUSH
37116: LD_EXP 40
37120: EQUAL
37121: IFFALSE 37132
// begin YouLost ( JMM ) ;
37123: LD_STRING JMM
37125: PPUSH
37126: CALL_OW 104
// exit ;
37130: GO 37141
// end ; MCE_UnitDestroyed ( un ) ;
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL 66074 0 1
// end ;
37141: PPOPN 1
37143: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
37144: LD_VAR 0 1
37148: PPUSH
37149: LD_VAR 0 2
37153: PPUSH
37154: CALL 68406 0 2
// end ;
37158: PPOPN 2
37160: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL 67474 0 1
// end ;
37170: PPOPN 1
37172: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
37173: LD_VAR 0 1
37177: PUSH
37178: LD_INT 22
37180: PUSH
37181: LD_INT 8
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 30
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 23
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: PPUSH
37213: CALL_OW 69
37217: IN
37218: IFFALSE 37245
// begin ComUpgrade ( building ) ;
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
37229: LD_EXP 64
37233: PPUSH
37234: LD_VAR 0 1
37238: PPUSH
37239: CALL 76890 0 2
// exit ;
37243: GO 37254
// end ; MCE_BuildingComplete ( building ) ;
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL 67715 0 1
// end ;
37254: PPOPN 1
37256: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
37257: LD_VAR 0 1
37261: PPUSH
37262: LD_VAR 0 2
37266: PPUSH
37267: CALL 65770 0 2
// end ;
37271: PPOPN 2
37273: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: LD_VAR 0 5
37298: PPUSH
37299: CALL 65390 0 5
// end ;
37303: PPOPN 5
37305: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 1 then
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 255
37315: PUSH
37316: LD_INT 1
37318: EQUAL
37319: IFFALSE 37336
// amConstructCounter := Inc ( amConstructCounter ) ;
37321: LD_ADDR_EXP 39
37325: PUSH
37326: LD_EXP 39
37330: PPUSH
37331: CALL 107720 0 1
37335: ST_TO_ADDR
// SOS_VehicleConstructed ( vehicle , factory ) ;
37336: LD_VAR 0 1
37340: PPUSH
37341: LD_VAR 0 2
37345: PPUSH
37346: CALL 126353 0 2
// MCE_VehicleConstructed ( vehicle , factory ) ;
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_VAR 0 2
37359: PPUSH
37360: CALL 64943 0 2
// end ;
37364: PPOPN 2
37366: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
37367: LD_VAR 0 1
37371: PPUSH
37372: LD_VAR 0 2
37376: PPUSH
37377: LD_VAR 0 3
37381: PPUSH
37382: LD_VAR 0 4
37386: PPUSH
37387: CALL 64781 0 4
// end ;
37391: PPOPN 4
37393: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
37394: LD_VAR 0 1
37398: PPUSH
37399: LD_VAR 0 2
37403: PPUSH
37404: LD_VAR 0 3
37408: PPUSH
37409: CALL 64556 0 3
// end ;
37413: PPOPN 3
37415: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_VAR 0 2
37425: PPUSH
37426: CALL 64441 0 2
// end ;
37430: PPOPN 2
37432: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
37433: LD_VAR 0 1
37437: PPUSH
37438: LD_VAR 0 2
37442: PPUSH
37443: CALL 68701 0 2
// end ;
37447: PPOPN 2
37449: END
// on EvacuateBuilding ( building , unit ) do begin if building = ru_specBar then
37450: LD_VAR 0 1
37454: PUSH
37455: LD_INT 460
37457: EQUAL
37458: IFFALSE 37480
// ComEnterUnit ( unit , HexInfo ( 227 , 136 ) ) ;
37460: LD_VAR 0 2
37464: PPUSH
37465: LD_INT 227
37467: PPUSH
37468: LD_INT 136
37470: PPUSH
37471: CALL_OW 428
37475: PPUSH
37476: CALL_OW 120
// end ;
37480: PPOPN 2
37482: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 4 and driver in powellSquadAttack [ 1 ] and powellAllowRetreat then
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 255
37492: PUSH
37493: LD_INT 4
37495: EQUAL
37496: PUSH
37497: LD_VAR 0 1
37501: PUSH
37502: LD_EXP 18
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: IN
37511: AND
37512: PUSH
37513: LD_EXP 19
37517: AND
37518: IFFALSE 37537
// begin ComMoveXY ( driver , 61 , 93 ) ;
37520: LD_VAR 0 1
37524: PPUSH
37525: LD_INT 61
37527: PPUSH
37528: LD_INT 93
37530: PPUSH
37531: CALL_OW 111
// exit ;
37535: GO 37606
// end ; if GetSide ( driver ) = 3 and GetTag ( driver ) = 105 then
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 255
37546: PUSH
37547: LD_INT 3
37549: EQUAL
37550: PUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 110
37560: PUSH
37561: LD_INT 105
37563: EQUAL
37564: AND
37565: IFFALSE 37582
// begin ComMoveXY ( driver , 187 , 92 ) ;
37567: LD_VAR 0 1
37571: PPUSH
37572: LD_INT 187
37574: PPUSH
37575: LD_INT 92
37577: PPUSH
37578: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
37582: LD_VAR 0 1
37586: PPUSH
37587: LD_VAR 0 2
37591: PPUSH
37592: LD_VAR 0 3
37596: PPUSH
37597: LD_VAR 0 4
37601: PPUSH
37602: CALL 68917 0 4
// end ;
37606: PPOPN 4
37608: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
37609: LD_VAR 0 1
37613: PPUSH
37614: LD_VAR 0 2
37618: PPUSH
37619: CALL 64250 0 2
// end ;
37623: PPOPN 2
37625: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
37626: LD_VAR 0 1
37630: PPUSH
37631: CALL 126337 0 1
// end ; end_of_file
37635: PPOPN 1
37637: END
// every 0 0$30 trigger missionStage = 2 do var i , time ;
37638: LD_EXP 15
37642: PUSH
37643: LD_INT 2
37645: EQUAL
37646: IFFALSE 38163
37648: GO 37650
37650: DISABLE
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
// begin time := 0 0$35 ;
37655: LD_ADDR_VAR 0 2
37659: PUSH
37660: LD_INT 1225
37662: ST_TO_ADDR
// repeat wait ( time ) ;
37663: LD_VAR 0 2
37667: PPUSH
37668: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 150 , 19 , true ) ;
37672: LD_INT 1
37674: PPUSH
37675: LD_INT 5
37677: PPUSH
37678: CALL_OW 12
37682: PPUSH
37683: LD_INT 106
37685: PPUSH
37686: LD_INT 150
37688: PPUSH
37689: LD_INT 19
37691: PPUSH
37692: LD_INT 1
37694: PPUSH
37695: CALL_OW 56
// wait ( rand ( 0 0$13 , 0 0$22 ) ) ;
37699: LD_INT 455
37701: PPUSH
37702: LD_INT 770
37704: PPUSH
37705: CALL_OW 12
37709: PPUSH
37710: CALL_OW 67
// if Prob ( 50 ) then
37714: LD_INT 50
37716: PPUSH
37717: CALL_OW 13
37721: IFFALSE 37750
// CreateCratesXYR ( rand ( 1 , 5 ) , 62 , 108 , 10 , true ) ;
37723: LD_INT 1
37725: PPUSH
37726: LD_INT 5
37728: PPUSH
37729: CALL_OW 12
37733: PPUSH
37734: LD_INT 62
37736: PPUSH
37737: LD_INT 108
37739: PPUSH
37740: LD_INT 10
37742: PPUSH
37743: LD_INT 1
37745: PPUSH
37746: CALL_OW 56
// until missionStage > 4 ;
37750: LD_EXP 15
37754: PUSH
37755: LD_INT 4
37757: GREATER
37758: IFFALSE 37663
// repeat wait ( 0 0$1 ) ;
37760: LD_INT 35
37762: PPUSH
37763: CALL_OW 67
// until missionStage = 6 ;
37767: LD_EXP 15
37771: PUSH
37772: LD_INT 6
37774: EQUAL
37775: IFFALSE 37760
// time := 0 0$20 ;
37777: LD_ADDR_VAR 0 2
37781: PUSH
37782: LD_INT 700
37784: ST_TO_ADDR
// repeat wait ( time ) ;
37785: LD_VAR 0 2
37789: PPUSH
37790: CALL_OW 67
// if Prob ( 90 ) then
37794: LD_INT 90
37796: PPUSH
37797: CALL_OW 13
37801: IFFALSE 37844
// begin time := time + 0 0$2 ;
37803: LD_ADDR_VAR 0 2
37807: PUSH
37808: LD_VAR 0 2
37812: PUSH
37813: LD_INT 70
37815: PLUS
37816: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 45 , true ) ;
37817: LD_INT 1
37819: PPUSH
37820: LD_INT 5
37822: PPUSH
37823: CALL_OW 12
37827: PPUSH
37828: LD_INT 106
37830: PPUSH
37831: LD_INT 89
37833: PPUSH
37834: LD_INT 45
37836: PPUSH
37837: LD_INT 1
37839: PPUSH
37840: CALL_OW 56
// end ; if Prob ( 45 ) then
37844: LD_INT 45
37846: PPUSH
37847: CALL_OW 13
37851: IFFALSE 37907
// begin for i := 1 to 4 do
37853: LD_ADDR_VAR 0 1
37857: PUSH
37858: DOUBLE
37859: LD_INT 1
37861: DEC
37862: ST_TO_ADDR
37863: LD_INT 4
37865: PUSH
37866: FOR_TO
37867: IFFALSE 37905
// begin wait ( 0 0$5 ) ;
37869: LD_INT 175
37871: PPUSH
37872: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 113 , 117 , 25 , true ) ;
37876: LD_INT 1
37878: PPUSH
37879: LD_INT 5
37881: PPUSH
37882: CALL_OW 12
37886: PPUSH
37887: LD_INT 113
37889: PPUSH
37890: LD_INT 117
37892: PPUSH
37893: LD_INT 25
37895: PPUSH
37896: LD_INT 1
37898: PPUSH
37899: CALL_OW 56
// end ;
37903: GO 37866
37905: POP
37906: POP
// end ; if Prob ( 40 ) then
37907: LD_INT 40
37909: PPUSH
37910: CALL_OW 13
37914: IFFALSE 37960
// begin wait ( rand ( 0 0$11 , 0 0$27 ) ) ;
37916: LD_INT 385
37918: PPUSH
37919: LD_INT 945
37921: PPUSH
37922: CALL_OW 12
37926: PPUSH
37927: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
37931: LD_INT 1
37933: PPUSH
37934: LD_INT 5
37936: PPUSH
37937: CALL_OW 12
37941: PPUSH
37942: LD_INT 21
37944: PPUSH
37945: LD_INT 26
37947: PPUSH
37948: LD_INT 12
37950: PPUSH
37951: LD_INT 1
37953: PPUSH
37954: CALL_OW 56
// end else
37958: GO 37996
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
37960: LD_INT 700
37962: PPUSH
37963: LD_INT 1225
37965: PPUSH
37966: CALL_OW 12
37970: PPUSH
37971: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
37975: LD_INT 1
37977: PPUSH
37978: LD_INT 5
37980: PPUSH
37981: CALL_OW 12
37985: PPUSH
37986: LD_INT 16
37988: PPUSH
37989: LD_INT 1
37991: PPUSH
37992: CALL_OW 55
// end ; if Prob ( 50 ) then
37996: LD_INT 50
37998: PPUSH
37999: CALL_OW 13
38003: IFFALSE 38049
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
38005: LD_INT 700
38007: PPUSH
38008: LD_INT 1050
38010: PPUSH
38011: CALL_OW 12
38015: PPUSH
38016: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 168 , 168 , 16 , true ) ;
38020: LD_INT 1
38022: PPUSH
38023: LD_INT 5
38025: PPUSH
38026: CALL_OW 12
38030: PPUSH
38031: LD_INT 168
38033: PPUSH
38034: LD_INT 168
38036: PPUSH
38037: LD_INT 16
38039: PPUSH
38040: LD_INT 1
38042: PPUSH
38043: CALL_OW 56
// end else
38047: GO 38085
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
38049: LD_INT 350
38051: PPUSH
38052: LD_INT 525
38054: PPUSH
38055: CALL_OW 12
38059: PPUSH
38060: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
38064: LD_INT 1
38066: PPUSH
38067: LD_INT 5
38069: PPUSH
38070: CALL_OW 12
38074: PPUSH
38075: LD_INT 15
38077: PPUSH
38078: LD_INT 1
38080: PPUSH
38081: CALL_OW 55
// end ; wait ( rand ( 0 0$5 , 0 0$9 ) ) ;
38085: LD_INT 175
38087: PPUSH
38088: LD_INT 315
38090: PPUSH
38091: CALL_OW 12
38095: PPUSH
38096: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 103 , 140 , 20 , true ) ;
38100: LD_INT 1
38102: PPUSH
38103: LD_INT 5
38105: PPUSH
38106: CALL_OW 12
38110: PPUSH
38111: LD_INT 103
38113: PPUSH
38114: LD_INT 140
38116: PPUSH
38117: LD_INT 20
38119: PPUSH
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 56
// time := time + 0 0$2 ;
38127: LD_ADDR_VAR 0 2
38131: PUSH
38132: LD_VAR 0 2
38136: PUSH
38137: LD_INT 70
38139: PLUS
38140: ST_TO_ADDR
// if time > 1 1$20 then
38141: LD_VAR 0 2
38145: PUSH
38146: LD_INT 2800
38148: GREATER
38149: IFFALSE 38159
// time := 0 0$30 ;
38151: LD_ADDR_VAR 0 2
38155: PUSH
38156: LD_INT 1050
38158: ST_TO_ADDR
// until false ;
38159: LD_INT 0
38161: IFFALSE 37785
// end ; end_of_file
38163: PPOPN 2
38165: END
// every 0 0$1 trigger missionStart and missionStage >= 6 do
38166: LD_EXP 13
38170: PUSH
38171: LD_EXP 15
38175: PUSH
38176: LD_INT 6
38178: GREATEREQUAL
38179: AND
38180: IFFALSE 38217
38182: GO 38184
38184: DISABLE
// begin enable ;
38185: ENABLE
// missionTime := missionTime + 0 0$1 ;
38186: LD_ADDR_EXP 14
38190: PUSH
38191: LD_EXP 14
38195: PUSH
38196: LD_INT 35
38198: PLUS
38199: ST_TO_ADDR
// display_strings = [ #Am15-1 , missionTime ] ;
38200: LD_ADDR_OWVAR 47
38204: PUSH
38205: LD_STRING #Am15-1
38207: PUSH
38208: LD_EXP 14
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// end ; end_of_file
38217: END
// export function InitNature ; begin
38218: LD_INT 0
38220: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
38221: LD_INT 3
38223: PPUSH
38224: LD_INT 3
38226: PPUSH
38227: LD_INT 2
38229: PPUSH
38230: LD_INT 1
38232: PPUSH
38233: LD_INT 1
38235: PPUSH
38236: LD_INT 0
38238: PPUSH
38239: LD_INT 0
38241: PPUSH
38242: LD_INT 20
38244: PPUSH
38245: LD_INT 0
38247: PPUSH
38248: CALL 103049 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
38252: LD_INT 2
38254: PPUSH
38255: LD_INT 1
38257: PPUSH
38258: LD_INT 1
38260: PPUSH
38261: LD_INT 1
38263: PPUSH
38264: LD_INT 1
38266: PPUSH
38267: LD_INT 0
38269: PPUSH
38270: LD_INT 0
38272: PPUSH
38273: LD_INT 21
38275: PPUSH
38276: LD_INT 0
38278: PPUSH
38279: CALL 103049 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
38283: LD_INT 4
38285: PPUSH
38286: LD_INT 1
38288: PPUSH
38289: LD_INT 2
38291: PPUSH
38292: LD_INT 4
38294: PPUSH
38295: LD_INT 2
38297: PPUSH
38298: LD_INT 1
38300: PPUSH
38301: LD_INT 0
38303: PPUSH
38304: LD_INT 22
38306: PPUSH
38307: LD_INT 0
38309: PPUSH
38310: CALL 103049 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
38314: LD_INT 0
38316: PPUSH
38317: LD_INT 0
38319: PPUSH
38320: LD_INT 0
38322: PPUSH
38323: LD_INT 0
38325: PPUSH
38326: LD_INT 0
38328: PPUSH
38329: LD_INT 0
38331: PPUSH
38332: LD_INT 9
38334: PPUSH
38335: LD_INT 0
38337: PPUSH
38338: LD_INT 23
38340: PPUSH
38341: CALL 103049 0 9
// end ; end_of_file
38345: LD_VAR 0 1
38349: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export mc_block_vehicle_constructed_thread ; export function InitMacro ; var i ; begin
38350: LD_INT 0
38352: PPUSH
38353: PPUSH
// skirmish := false ;
38354: LD_ADDR_EXP 99
38358: PUSH
38359: LD_INT 0
38361: ST_TO_ADDR
// debug_mc := false ;
38362: LD_ADDR_EXP 100
38366: PUSH
38367: LD_INT 0
38369: ST_TO_ADDR
// mc_bases := [ ] ;
38370: LD_ADDR_EXP 101
38374: PUSH
38375: EMPTY
38376: ST_TO_ADDR
// mc_sides := [ ] ;
38377: LD_ADDR_EXP 127
38381: PUSH
38382: EMPTY
38383: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
38384: LD_ADDR_EXP 102
38388: PUSH
38389: EMPTY
38390: ST_TO_ADDR
// mc_building_repairs := [ ] ;
38391: LD_ADDR_EXP 103
38395: PUSH
38396: EMPTY
38397: ST_TO_ADDR
// mc_need_heal := [ ] ;
38398: LD_ADDR_EXP 104
38402: PUSH
38403: EMPTY
38404: ST_TO_ADDR
// mc_healers := [ ] ;
38405: LD_ADDR_EXP 105
38409: PUSH
38410: EMPTY
38411: ST_TO_ADDR
// mc_build_list := [ ] ;
38412: LD_ADDR_EXP 106
38416: PUSH
38417: EMPTY
38418: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
38419: LD_ADDR_EXP 133
38423: PUSH
38424: EMPTY
38425: ST_TO_ADDR
// mc_builders := [ ] ;
38426: LD_ADDR_EXP 107
38430: PUSH
38431: EMPTY
38432: ST_TO_ADDR
// mc_construct_list := [ ] ;
38433: LD_ADDR_EXP 108
38437: PUSH
38438: EMPTY
38439: ST_TO_ADDR
// mc_turret_list := [ ] ;
38440: LD_ADDR_EXP 109
38444: PUSH
38445: EMPTY
38446: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
38447: LD_ADDR_EXP 110
38451: PUSH
38452: EMPTY
38453: ST_TO_ADDR
// mc_miners := [ ] ;
38454: LD_ADDR_EXP 115
38458: PUSH
38459: EMPTY
38460: ST_TO_ADDR
// mc_mines := [ ] ;
38461: LD_ADDR_EXP 114
38465: PUSH
38466: EMPTY
38467: ST_TO_ADDR
// mc_minefields := [ ] ;
38468: LD_ADDR_EXP 116
38472: PUSH
38473: EMPTY
38474: ST_TO_ADDR
// mc_crates := [ ] ;
38475: LD_ADDR_EXP 117
38479: PUSH
38480: EMPTY
38481: ST_TO_ADDR
// mc_crates_collector := [ ] ;
38482: LD_ADDR_EXP 118
38486: PUSH
38487: EMPTY
38488: ST_TO_ADDR
// mc_crates_area := [ ] ;
38489: LD_ADDR_EXP 119
38493: PUSH
38494: EMPTY
38495: ST_TO_ADDR
// mc_vehicles := [ ] ;
38496: LD_ADDR_EXP 120
38500: PUSH
38501: EMPTY
38502: ST_TO_ADDR
// mc_attack := [ ] ;
38503: LD_ADDR_EXP 121
38507: PUSH
38508: EMPTY
38509: ST_TO_ADDR
// mc_produce := [ ] ;
38510: LD_ADDR_EXP 122
38514: PUSH
38515: EMPTY
38516: ST_TO_ADDR
// mc_defender := [ ] ;
38517: LD_ADDR_EXP 123
38521: PUSH
38522: EMPTY
38523: ST_TO_ADDR
// mc_parking := [ ] ;
38524: LD_ADDR_EXP 125
38528: PUSH
38529: EMPTY
38530: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
38531: LD_ADDR_EXP 111
38535: PUSH
38536: EMPTY
38537: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
38538: LD_ADDR_EXP 113
38542: PUSH
38543: EMPTY
38544: ST_TO_ADDR
// mc_scan := [ ] ;
38545: LD_ADDR_EXP 124
38549: PUSH
38550: EMPTY
38551: ST_TO_ADDR
// mc_scan_area := [ ] ;
38552: LD_ADDR_EXP 126
38556: PUSH
38557: EMPTY
38558: ST_TO_ADDR
// mc_tech := [ ] ;
38559: LD_ADDR_EXP 128
38563: PUSH
38564: EMPTY
38565: ST_TO_ADDR
// mc_class := [ ] ;
38566: LD_ADDR_EXP 142
38570: PUSH
38571: EMPTY
38572: ST_TO_ADDR
// mc_class_case_use := [ ] ;
38573: LD_ADDR_EXP 143
38577: PUSH
38578: EMPTY
38579: ST_TO_ADDR
// mc_is_defending := [ ] ;
38580: LD_ADDR_EXP 144
38584: PUSH
38585: EMPTY
38586: ST_TO_ADDR
// mc_lab_upgrade := [ ] ;
38587: LD_ADDR_EXP 135
38591: PUSH
38592: EMPTY
38593: ST_TO_ADDR
// mc_block_vehicle_constructed_thread := false ;
38594: LD_ADDR_EXP 145
38598: PUSH
38599: LD_INT 0
38601: ST_TO_ADDR
// end ;
38602: LD_VAR 0 1
38606: RET
// export function MC_Kill ( base ) ; begin
38607: LD_INT 0
38609: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
38610: LD_ADDR_EXP 101
38614: PUSH
38615: LD_EXP 101
38619: PPUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: EMPTY
38626: PPUSH
38627: CALL_OW 1
38631: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
38632: LD_ADDR_EXP 102
38636: PUSH
38637: LD_EXP 102
38641: PPUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: EMPTY
38648: PPUSH
38649: CALL_OW 1
38653: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
38654: LD_ADDR_EXP 103
38658: PUSH
38659: LD_EXP 103
38663: PPUSH
38664: LD_VAR 0 1
38668: PPUSH
38669: EMPTY
38670: PPUSH
38671: CALL_OW 1
38675: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
38676: LD_ADDR_EXP 104
38680: PUSH
38681: LD_EXP 104
38685: PPUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: EMPTY
38692: PPUSH
38693: CALL_OW 1
38697: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
38698: LD_ADDR_EXP 105
38702: PUSH
38703: LD_EXP 105
38707: PPUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: EMPTY
38714: PPUSH
38715: CALL_OW 1
38719: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
38720: LD_ADDR_EXP 106
38724: PUSH
38725: LD_EXP 106
38729: PPUSH
38730: LD_VAR 0 1
38734: PPUSH
38735: EMPTY
38736: PPUSH
38737: CALL_OW 1
38741: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
38742: LD_ADDR_EXP 107
38746: PUSH
38747: LD_EXP 107
38751: PPUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: EMPTY
38758: PPUSH
38759: CALL_OW 1
38763: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
38764: LD_ADDR_EXP 108
38768: PUSH
38769: LD_EXP 108
38773: PPUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: EMPTY
38780: PPUSH
38781: CALL_OW 1
38785: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
38786: LD_ADDR_EXP 109
38790: PUSH
38791: LD_EXP 109
38795: PPUSH
38796: LD_VAR 0 1
38800: PPUSH
38801: EMPTY
38802: PPUSH
38803: CALL_OW 1
38807: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
38808: LD_ADDR_EXP 110
38812: PUSH
38813: LD_EXP 110
38817: PPUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: EMPTY
38824: PPUSH
38825: CALL_OW 1
38829: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
38830: LD_ADDR_EXP 111
38834: PUSH
38835: LD_EXP 111
38839: PPUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: EMPTY
38846: PPUSH
38847: CALL_OW 1
38851: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
38852: LD_ADDR_EXP 112
38856: PUSH
38857: LD_EXP 112
38861: PPUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_INT 0
38869: PPUSH
38870: CALL_OW 1
38874: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
38875: LD_ADDR_EXP 113
38879: PUSH
38880: LD_EXP 113
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: EMPTY
38891: PPUSH
38892: CALL_OW 1
38896: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
38897: LD_ADDR_EXP 114
38901: PUSH
38902: LD_EXP 114
38906: PPUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: EMPTY
38913: PPUSH
38914: CALL_OW 1
38918: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
38919: LD_ADDR_EXP 115
38923: PUSH
38924: LD_EXP 115
38928: PPUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: EMPTY
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
38941: LD_ADDR_EXP 116
38945: PUSH
38946: LD_EXP 116
38950: PPUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: EMPTY
38957: PPUSH
38958: CALL_OW 1
38962: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
38963: LD_ADDR_EXP 117
38967: PUSH
38968: LD_EXP 117
38972: PPUSH
38973: LD_VAR 0 1
38977: PPUSH
38978: EMPTY
38979: PPUSH
38980: CALL_OW 1
38984: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
38985: LD_ADDR_EXP 118
38989: PUSH
38990: LD_EXP 118
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: EMPTY
39001: PPUSH
39002: CALL_OW 1
39006: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
39007: LD_ADDR_EXP 119
39011: PUSH
39012: LD_EXP 119
39016: PPUSH
39017: LD_VAR 0 1
39021: PPUSH
39022: EMPTY
39023: PPUSH
39024: CALL_OW 1
39028: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
39029: LD_ADDR_EXP 120
39033: PUSH
39034: LD_EXP 120
39038: PPUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: EMPTY
39045: PPUSH
39046: CALL_OW 1
39050: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
39051: LD_ADDR_EXP 121
39055: PUSH
39056: LD_EXP 121
39060: PPUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: EMPTY
39067: PPUSH
39068: CALL_OW 1
39072: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
39073: LD_ADDR_EXP 122
39077: PUSH
39078: LD_EXP 122
39082: PPUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: EMPTY
39089: PPUSH
39090: CALL_OW 1
39094: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
39095: LD_ADDR_EXP 123
39099: PUSH
39100: LD_EXP 123
39104: PPUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: EMPTY
39111: PPUSH
39112: CALL_OW 1
39116: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
39117: LD_ADDR_EXP 124
39121: PUSH
39122: LD_EXP 124
39126: PPUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: EMPTY
39133: PPUSH
39134: CALL_OW 1
39138: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
39139: LD_ADDR_EXP 125
39143: PUSH
39144: LD_EXP 125
39148: PPUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: EMPTY
39155: PPUSH
39156: CALL_OW 1
39160: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
39161: LD_ADDR_EXP 126
39165: PUSH
39166: LD_EXP 126
39170: PPUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: EMPTY
39177: PPUSH
39178: CALL_OW 1
39182: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
39183: LD_ADDR_EXP 128
39187: PUSH
39188: LD_EXP 128
39192: PPUSH
39193: LD_VAR 0 1
39197: PPUSH
39198: EMPTY
39199: PPUSH
39200: CALL_OW 1
39204: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
39205: LD_ADDR_EXP 130
39209: PUSH
39210: LD_EXP 130
39214: PPUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: EMPTY
39221: PPUSH
39222: CALL_OW 1
39226: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
39227: LD_ADDR_EXP 131
39231: PUSH
39232: LD_EXP 131
39236: PPUSH
39237: LD_VAR 0 1
39241: PPUSH
39242: EMPTY
39243: PPUSH
39244: CALL_OW 1
39248: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
39249: LD_ADDR_EXP 132
39253: PUSH
39254: LD_EXP 132
39258: PPUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: EMPTY
39265: PPUSH
39266: CALL_OW 1
39270: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
39271: LD_ADDR_EXP 133
39275: PUSH
39276: LD_EXP 133
39280: PPUSH
39281: LD_VAR 0 1
39285: PPUSH
39286: EMPTY
39287: PPUSH
39288: CALL_OW 1
39292: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
39293: LD_ADDR_EXP 134
39297: PUSH
39298: LD_EXP 134
39302: PPUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: EMPTY
39309: PPUSH
39310: CALL_OW 1
39314: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
39315: LD_ADDR_EXP 135
39319: PUSH
39320: LD_EXP 135
39324: PPUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: EMPTY
39331: PPUSH
39332: CALL_OW 1
39336: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
39337: LD_ADDR_EXP 136
39341: PUSH
39342: LD_EXP 136
39346: PPUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: EMPTY
39353: PPUSH
39354: CALL_OW 1
39358: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
39359: LD_ADDR_EXP 137
39363: PUSH
39364: LD_EXP 137
39368: PPUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: EMPTY
39375: PPUSH
39376: CALL_OW 1
39380: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
39381: LD_ADDR_EXP 138
39385: PUSH
39386: LD_EXP 138
39390: PPUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: EMPTY
39397: PPUSH
39398: CALL_OW 1
39402: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
39403: LD_ADDR_EXP 139
39407: PUSH
39408: LD_EXP 139
39412: PPUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: EMPTY
39419: PPUSH
39420: CALL_OW 1
39424: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
39425: LD_ADDR_EXP 140
39429: PUSH
39430: LD_EXP 140
39434: PPUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: EMPTY
39441: PPUSH
39442: CALL_OW 1
39446: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
39447: LD_ADDR_EXP 141
39451: PUSH
39452: LD_EXP 141
39456: PPUSH
39457: LD_VAR 0 1
39461: PPUSH
39462: EMPTY
39463: PPUSH
39464: CALL_OW 1
39468: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
39469: LD_ADDR_EXP 142
39473: PUSH
39474: LD_EXP 142
39478: PPUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: EMPTY
39485: PPUSH
39486: CALL_OW 1
39490: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
39491: LD_ADDR_EXP 143
39495: PUSH
39496: LD_EXP 143
39500: PPUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: LD_INT 0
39508: PPUSH
39509: CALL_OW 1
39513: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
39514: LD_ADDR_EXP 144
39518: PUSH
39519: LD_EXP 144
39523: PPUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_INT 0
39531: PPUSH
39532: CALL_OW 1
39536: ST_TO_ADDR
// end ;
39537: LD_VAR 0 2
39541: RET
// export function MC_Add ( side , units ) ; var base ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
// base := mc_bases + 1 ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_EXP 101
39555: PUSH
39556: LD_INT 1
39558: PLUS
39559: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
39560: LD_ADDR_EXP 127
39564: PUSH
39565: LD_EXP 127
39569: PPUSH
39570: LD_VAR 0 4
39574: PPUSH
39575: LD_VAR 0 1
39579: PPUSH
39580: CALL_OW 1
39584: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
39585: LD_ADDR_EXP 101
39589: PUSH
39590: LD_EXP 101
39594: PPUSH
39595: LD_VAR 0 4
39599: PPUSH
39600: LD_VAR 0 2
39604: PPUSH
39605: CALL_OW 1
39609: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
39610: LD_ADDR_EXP 102
39614: PUSH
39615: LD_EXP 102
39619: PPUSH
39620: LD_VAR 0 4
39624: PPUSH
39625: EMPTY
39626: PPUSH
39627: CALL_OW 1
39631: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
39632: LD_ADDR_EXP 103
39636: PUSH
39637: LD_EXP 103
39641: PPUSH
39642: LD_VAR 0 4
39646: PPUSH
39647: EMPTY
39648: PPUSH
39649: CALL_OW 1
39653: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
39654: LD_ADDR_EXP 104
39658: PUSH
39659: LD_EXP 104
39663: PPUSH
39664: LD_VAR 0 4
39668: PPUSH
39669: EMPTY
39670: PPUSH
39671: CALL_OW 1
39675: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
39676: LD_ADDR_EXP 105
39680: PUSH
39681: LD_EXP 105
39685: PPUSH
39686: LD_VAR 0 4
39690: PPUSH
39691: EMPTY
39692: PPUSH
39693: CALL_OW 1
39697: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
39698: LD_ADDR_EXP 106
39702: PUSH
39703: LD_EXP 106
39707: PPUSH
39708: LD_VAR 0 4
39712: PPUSH
39713: EMPTY
39714: PPUSH
39715: CALL_OW 1
39719: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
39720: LD_ADDR_EXP 107
39724: PUSH
39725: LD_EXP 107
39729: PPUSH
39730: LD_VAR 0 4
39734: PPUSH
39735: EMPTY
39736: PPUSH
39737: CALL_OW 1
39741: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
39742: LD_ADDR_EXP 108
39746: PUSH
39747: LD_EXP 108
39751: PPUSH
39752: LD_VAR 0 4
39756: PPUSH
39757: EMPTY
39758: PPUSH
39759: CALL_OW 1
39763: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
39764: LD_ADDR_EXP 109
39768: PUSH
39769: LD_EXP 109
39773: PPUSH
39774: LD_VAR 0 4
39778: PPUSH
39779: EMPTY
39780: PPUSH
39781: CALL_OW 1
39785: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
39786: LD_ADDR_EXP 110
39790: PUSH
39791: LD_EXP 110
39795: PPUSH
39796: LD_VAR 0 4
39800: PPUSH
39801: EMPTY
39802: PPUSH
39803: CALL_OW 1
39807: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
39808: LD_ADDR_EXP 111
39812: PUSH
39813: LD_EXP 111
39817: PPUSH
39818: LD_VAR 0 4
39822: PPUSH
39823: EMPTY
39824: PPUSH
39825: CALL_OW 1
39829: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
39830: LD_ADDR_EXP 112
39834: PUSH
39835: LD_EXP 112
39839: PPUSH
39840: LD_VAR 0 4
39844: PPUSH
39845: LD_INT 0
39847: PPUSH
39848: CALL_OW 1
39852: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
39853: LD_ADDR_EXP 113
39857: PUSH
39858: LD_EXP 113
39862: PPUSH
39863: LD_VAR 0 4
39867: PPUSH
39868: EMPTY
39869: PPUSH
39870: CALL_OW 1
39874: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
39875: LD_ADDR_EXP 114
39879: PUSH
39880: LD_EXP 114
39884: PPUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: EMPTY
39891: PPUSH
39892: CALL_OW 1
39896: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
39897: LD_ADDR_EXP 115
39901: PUSH
39902: LD_EXP 115
39906: PPUSH
39907: LD_VAR 0 4
39911: PPUSH
39912: EMPTY
39913: PPUSH
39914: CALL_OW 1
39918: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
39919: LD_ADDR_EXP 116
39923: PUSH
39924: LD_EXP 116
39928: PPUSH
39929: LD_VAR 0 4
39933: PPUSH
39934: EMPTY
39935: PPUSH
39936: CALL_OW 1
39940: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
39941: LD_ADDR_EXP 117
39945: PUSH
39946: LD_EXP 117
39950: PPUSH
39951: LD_VAR 0 4
39955: PPUSH
39956: EMPTY
39957: PPUSH
39958: CALL_OW 1
39962: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
39963: LD_ADDR_EXP 118
39967: PUSH
39968: LD_EXP 118
39972: PPUSH
39973: LD_VAR 0 4
39977: PPUSH
39978: EMPTY
39979: PPUSH
39980: CALL_OW 1
39984: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
39985: LD_ADDR_EXP 119
39989: PUSH
39990: LD_EXP 119
39994: PPUSH
39995: LD_VAR 0 4
39999: PPUSH
40000: EMPTY
40001: PPUSH
40002: CALL_OW 1
40006: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
40007: LD_ADDR_EXP 120
40011: PUSH
40012: LD_EXP 120
40016: PPUSH
40017: LD_VAR 0 4
40021: PPUSH
40022: EMPTY
40023: PPUSH
40024: CALL_OW 1
40028: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
40029: LD_ADDR_EXP 121
40033: PUSH
40034: LD_EXP 121
40038: PPUSH
40039: LD_VAR 0 4
40043: PPUSH
40044: EMPTY
40045: PPUSH
40046: CALL_OW 1
40050: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
40051: LD_ADDR_EXP 122
40055: PUSH
40056: LD_EXP 122
40060: PPUSH
40061: LD_VAR 0 4
40065: PPUSH
40066: EMPTY
40067: PPUSH
40068: CALL_OW 1
40072: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
40073: LD_ADDR_EXP 123
40077: PUSH
40078: LD_EXP 123
40082: PPUSH
40083: LD_VAR 0 4
40087: PPUSH
40088: EMPTY
40089: PPUSH
40090: CALL_OW 1
40094: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
40095: LD_ADDR_EXP 124
40099: PUSH
40100: LD_EXP 124
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: EMPTY
40111: PPUSH
40112: CALL_OW 1
40116: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
40117: LD_ADDR_EXP 125
40121: PUSH
40122: LD_EXP 125
40126: PPUSH
40127: LD_VAR 0 4
40131: PPUSH
40132: EMPTY
40133: PPUSH
40134: CALL_OW 1
40138: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
40139: LD_ADDR_EXP 126
40143: PUSH
40144: LD_EXP 126
40148: PPUSH
40149: LD_VAR 0 4
40153: PPUSH
40154: EMPTY
40155: PPUSH
40156: CALL_OW 1
40160: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
40161: LD_ADDR_EXP 128
40165: PUSH
40166: LD_EXP 128
40170: PPUSH
40171: LD_VAR 0 4
40175: PPUSH
40176: EMPTY
40177: PPUSH
40178: CALL_OW 1
40182: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
40183: LD_ADDR_EXP 130
40187: PUSH
40188: LD_EXP 130
40192: PPUSH
40193: LD_VAR 0 4
40197: PPUSH
40198: EMPTY
40199: PPUSH
40200: CALL_OW 1
40204: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
40205: LD_ADDR_EXP 131
40209: PUSH
40210: LD_EXP 131
40214: PPUSH
40215: LD_VAR 0 4
40219: PPUSH
40220: EMPTY
40221: PPUSH
40222: CALL_OW 1
40226: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
40227: LD_ADDR_EXP 132
40231: PUSH
40232: LD_EXP 132
40236: PPUSH
40237: LD_VAR 0 4
40241: PPUSH
40242: EMPTY
40243: PPUSH
40244: CALL_OW 1
40248: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
40249: LD_ADDR_EXP 133
40253: PUSH
40254: LD_EXP 133
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: EMPTY
40265: PPUSH
40266: CALL_OW 1
40270: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
40271: LD_ADDR_EXP 134
40275: PUSH
40276: LD_EXP 134
40280: PPUSH
40281: LD_VAR 0 4
40285: PPUSH
40286: EMPTY
40287: PPUSH
40288: CALL_OW 1
40292: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
40293: LD_ADDR_EXP 135
40297: PUSH
40298: LD_EXP 135
40302: PPUSH
40303: LD_VAR 0 4
40307: PPUSH
40308: EMPTY
40309: PPUSH
40310: CALL_OW 1
40314: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
40315: LD_ADDR_EXP 136
40319: PUSH
40320: LD_EXP 136
40324: PPUSH
40325: LD_VAR 0 4
40329: PPUSH
40330: EMPTY
40331: PPUSH
40332: CALL_OW 1
40336: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
40337: LD_ADDR_EXP 137
40341: PUSH
40342: LD_EXP 137
40346: PPUSH
40347: LD_VAR 0 4
40351: PPUSH
40352: EMPTY
40353: PPUSH
40354: CALL_OW 1
40358: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
40359: LD_ADDR_EXP 138
40363: PUSH
40364: LD_EXP 138
40368: PPUSH
40369: LD_VAR 0 4
40373: PPUSH
40374: EMPTY
40375: PPUSH
40376: CALL_OW 1
40380: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
40381: LD_ADDR_EXP 139
40385: PUSH
40386: LD_EXP 139
40390: PPUSH
40391: LD_VAR 0 4
40395: PPUSH
40396: EMPTY
40397: PPUSH
40398: CALL_OW 1
40402: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
40403: LD_ADDR_EXP 140
40407: PUSH
40408: LD_EXP 140
40412: PPUSH
40413: LD_VAR 0 4
40417: PPUSH
40418: EMPTY
40419: PPUSH
40420: CALL_OW 1
40424: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
40425: LD_ADDR_EXP 141
40429: PUSH
40430: LD_EXP 141
40434: PPUSH
40435: LD_VAR 0 4
40439: PPUSH
40440: EMPTY
40441: PPUSH
40442: CALL_OW 1
40446: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
40447: LD_ADDR_EXP 142
40451: PUSH
40452: LD_EXP 142
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: EMPTY
40463: PPUSH
40464: CALL_OW 1
40468: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
40469: LD_ADDR_EXP 143
40473: PUSH
40474: LD_EXP 143
40478: PPUSH
40479: LD_VAR 0 4
40483: PPUSH
40484: LD_INT 0
40486: PPUSH
40487: CALL_OW 1
40491: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
40492: LD_ADDR_EXP 144
40496: PUSH
40497: LD_EXP 144
40501: PPUSH
40502: LD_VAR 0 4
40506: PPUSH
40507: LD_INT 0
40509: PPUSH
40510: CALL_OW 1
40514: ST_TO_ADDR
// result := base ;
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_VAR 0 4
40524: ST_TO_ADDR
// end ;
40525: LD_VAR 0 3
40529: RET
// export function MC_Start ( ) ; var i ; begin
40530: LD_INT 0
40532: PPUSH
40533: PPUSH
// for i = 1 to mc_bases do
40534: LD_ADDR_VAR 0 2
40538: PUSH
40539: DOUBLE
40540: LD_INT 1
40542: DEC
40543: ST_TO_ADDR
40544: LD_EXP 101
40548: PUSH
40549: FOR_TO
40550: IFFALSE 41650
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
40552: LD_ADDR_EXP 101
40556: PUSH
40557: LD_EXP 101
40561: PPUSH
40562: LD_VAR 0 2
40566: PPUSH
40567: LD_EXP 101
40571: PUSH
40572: LD_VAR 0 2
40576: ARRAY
40577: PUSH
40578: LD_INT 0
40580: DIFF
40581: PPUSH
40582: CALL_OW 1
40586: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
40587: LD_ADDR_EXP 102
40591: PUSH
40592: LD_EXP 102
40596: PPUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: EMPTY
40603: PPUSH
40604: CALL_OW 1
40608: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
40609: LD_ADDR_EXP 103
40613: PUSH
40614: LD_EXP 103
40618: PPUSH
40619: LD_VAR 0 2
40623: PPUSH
40624: EMPTY
40625: PPUSH
40626: CALL_OW 1
40630: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
40631: LD_ADDR_EXP 104
40635: PUSH
40636: LD_EXP 104
40640: PPUSH
40641: LD_VAR 0 2
40645: PPUSH
40646: EMPTY
40647: PPUSH
40648: CALL_OW 1
40652: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
40653: LD_ADDR_EXP 105
40657: PUSH
40658: LD_EXP 105
40662: PPUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: EMPTY
40669: PUSH
40670: EMPTY
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PPUSH
40676: CALL_OW 1
40680: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
40681: LD_ADDR_EXP 106
40685: PUSH
40686: LD_EXP 106
40690: PPUSH
40691: LD_VAR 0 2
40695: PPUSH
40696: EMPTY
40697: PPUSH
40698: CALL_OW 1
40702: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
40703: LD_ADDR_EXP 133
40707: PUSH
40708: LD_EXP 133
40712: PPUSH
40713: LD_VAR 0 2
40717: PPUSH
40718: EMPTY
40719: PPUSH
40720: CALL_OW 1
40724: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
40725: LD_ADDR_EXP 107
40729: PUSH
40730: LD_EXP 107
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: EMPTY
40741: PPUSH
40742: CALL_OW 1
40746: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
40747: LD_ADDR_EXP 108
40751: PUSH
40752: LD_EXP 108
40756: PPUSH
40757: LD_VAR 0 2
40761: PPUSH
40762: EMPTY
40763: PPUSH
40764: CALL_OW 1
40768: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
40769: LD_ADDR_EXP 109
40773: PUSH
40774: LD_EXP 109
40778: PPUSH
40779: LD_VAR 0 2
40783: PPUSH
40784: LD_EXP 101
40788: PUSH
40789: LD_VAR 0 2
40793: ARRAY
40794: PPUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 30
40800: PUSH
40801: LD_INT 32
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 30
40810: PUSH
40811: LD_INT 33
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: PPUSH
40823: CALL_OW 72
40827: PPUSH
40828: CALL_OW 1
40832: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
40833: LD_ADDR_EXP 110
40837: PUSH
40838: LD_EXP 110
40842: PPUSH
40843: LD_VAR 0 2
40847: PPUSH
40848: LD_EXP 101
40852: PUSH
40853: LD_VAR 0 2
40857: ARRAY
40858: PPUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: LD_INT 32
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 30
40874: PUSH
40875: LD_INT 31
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 58
40889: PUSH
40890: EMPTY
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PPUSH
40897: CALL_OW 72
40901: PPUSH
40902: CALL_OW 1
40906: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
40907: LD_ADDR_EXP 111
40911: PUSH
40912: LD_EXP 111
40916: PPUSH
40917: LD_VAR 0 2
40921: PPUSH
40922: EMPTY
40923: PPUSH
40924: CALL_OW 1
40928: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
40929: LD_ADDR_EXP 115
40933: PUSH
40934: LD_EXP 115
40938: PPUSH
40939: LD_VAR 0 2
40943: PPUSH
40944: EMPTY
40945: PPUSH
40946: CALL_OW 1
40950: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
40951: LD_ADDR_EXP 114
40955: PUSH
40956: LD_EXP 114
40960: PPUSH
40961: LD_VAR 0 2
40965: PPUSH
40966: EMPTY
40967: PPUSH
40968: CALL_OW 1
40972: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
40973: LD_ADDR_EXP 116
40977: PUSH
40978: LD_EXP 116
40982: PPUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: EMPTY
40989: PPUSH
40990: CALL_OW 1
40994: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
40995: LD_ADDR_EXP 117
40999: PUSH
41000: LD_EXP 117
41004: PPUSH
41005: LD_VAR 0 2
41009: PPUSH
41010: EMPTY
41011: PPUSH
41012: CALL_OW 1
41016: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
41017: LD_ADDR_EXP 118
41021: PUSH
41022: LD_EXP 118
41026: PPUSH
41027: LD_VAR 0 2
41031: PPUSH
41032: EMPTY
41033: PPUSH
41034: CALL_OW 1
41038: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
41039: LD_ADDR_EXP 119
41043: PUSH
41044: LD_EXP 119
41048: PPUSH
41049: LD_VAR 0 2
41053: PPUSH
41054: EMPTY
41055: PPUSH
41056: CALL_OW 1
41060: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
41061: LD_ADDR_EXP 120
41065: PUSH
41066: LD_EXP 120
41070: PPUSH
41071: LD_VAR 0 2
41075: PPUSH
41076: EMPTY
41077: PPUSH
41078: CALL_OW 1
41082: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
41083: LD_ADDR_EXP 121
41087: PUSH
41088: LD_EXP 121
41092: PPUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: EMPTY
41099: PPUSH
41100: CALL_OW 1
41104: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
41105: LD_ADDR_EXP 122
41109: PUSH
41110: LD_EXP 122
41114: PPUSH
41115: LD_VAR 0 2
41119: PPUSH
41120: EMPTY
41121: PPUSH
41122: CALL_OW 1
41126: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
41127: LD_ADDR_EXP 123
41131: PUSH
41132: LD_EXP 123
41136: PPUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: EMPTY
41143: PPUSH
41144: CALL_OW 1
41148: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
41149: LD_ADDR_EXP 112
41153: PUSH
41154: LD_EXP 112
41158: PPUSH
41159: LD_VAR 0 2
41163: PPUSH
41164: LD_INT 0
41166: PPUSH
41167: CALL_OW 1
41171: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
41172: LD_ADDR_EXP 125
41176: PUSH
41177: LD_EXP 125
41181: PPUSH
41182: LD_VAR 0 2
41186: PPUSH
41187: LD_INT 0
41189: PPUSH
41190: CALL_OW 1
41194: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
41195: LD_ADDR_EXP 113
41199: PUSH
41200: LD_EXP 113
41204: PPUSH
41205: LD_VAR 0 2
41209: PPUSH
41210: EMPTY
41211: PPUSH
41212: CALL_OW 1
41216: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
41217: LD_ADDR_EXP 124
41221: PUSH
41222: LD_EXP 124
41226: PPUSH
41227: LD_VAR 0 2
41231: PPUSH
41232: LD_INT 0
41234: PPUSH
41235: CALL_OW 1
41239: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
41240: LD_ADDR_EXP 126
41244: PUSH
41245: LD_EXP 126
41249: PPUSH
41250: LD_VAR 0 2
41254: PPUSH
41255: EMPTY
41256: PPUSH
41257: CALL_OW 1
41261: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
41262: LD_ADDR_EXP 129
41266: PUSH
41267: LD_EXP 129
41271: PPUSH
41272: LD_VAR 0 2
41276: PPUSH
41277: LD_INT 0
41279: PPUSH
41280: CALL_OW 1
41284: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
41285: LD_ADDR_EXP 130
41289: PUSH
41290: LD_EXP 130
41294: PPUSH
41295: LD_VAR 0 2
41299: PPUSH
41300: EMPTY
41301: PPUSH
41302: CALL_OW 1
41306: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41307: LD_ADDR_EXP 131
41311: PUSH
41312: LD_EXP 131
41316: PPUSH
41317: LD_VAR 0 2
41321: PPUSH
41322: EMPTY
41323: PPUSH
41324: CALL_OW 1
41328: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
41329: LD_ADDR_EXP 132
41333: PUSH
41334: LD_EXP 132
41338: PPUSH
41339: LD_VAR 0 2
41343: PPUSH
41344: EMPTY
41345: PPUSH
41346: CALL_OW 1
41350: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
41351: LD_ADDR_EXP 134
41355: PUSH
41356: LD_EXP 134
41360: PPUSH
41361: LD_VAR 0 2
41365: PPUSH
41366: LD_EXP 101
41370: PUSH
41371: LD_VAR 0 2
41375: ARRAY
41376: PPUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 30
41382: PUSH
41383: LD_INT 6
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 30
41392: PUSH
41393: LD_INT 7
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 30
41402: PUSH
41403: LD_INT 8
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL_OW 72
41420: PPUSH
41421: CALL_OW 1
41425: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
41426: LD_ADDR_EXP 135
41430: PUSH
41431: LD_EXP 135
41435: PPUSH
41436: LD_VAR 0 2
41440: PPUSH
41441: EMPTY
41442: PPUSH
41443: CALL_OW 1
41447: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
41448: LD_ADDR_EXP 136
41452: PUSH
41453: LD_EXP 136
41457: PPUSH
41458: LD_VAR 0 2
41462: PPUSH
41463: EMPTY
41464: PPUSH
41465: CALL_OW 1
41469: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
41470: LD_ADDR_EXP 137
41474: PUSH
41475: LD_EXP 137
41479: PPUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: EMPTY
41486: PPUSH
41487: CALL_OW 1
41491: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
41492: LD_ADDR_EXP 138
41496: PUSH
41497: LD_EXP 138
41501: PPUSH
41502: LD_VAR 0 2
41506: PPUSH
41507: EMPTY
41508: PPUSH
41509: CALL_OW 1
41513: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41514: LD_ADDR_EXP 139
41518: PUSH
41519: LD_EXP 139
41523: PPUSH
41524: LD_VAR 0 2
41528: PPUSH
41529: EMPTY
41530: PPUSH
41531: CALL_OW 1
41535: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
41536: LD_ADDR_EXP 140
41540: PUSH
41541: LD_EXP 140
41545: PPUSH
41546: LD_VAR 0 2
41550: PPUSH
41551: EMPTY
41552: PPUSH
41553: CALL_OW 1
41557: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
41558: LD_ADDR_EXP 141
41562: PUSH
41563: LD_EXP 141
41567: PPUSH
41568: LD_VAR 0 2
41572: PPUSH
41573: EMPTY
41574: PPUSH
41575: CALL_OW 1
41579: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
41580: LD_ADDR_EXP 142
41584: PUSH
41585: LD_EXP 142
41589: PPUSH
41590: LD_VAR 0 2
41594: PPUSH
41595: EMPTY
41596: PPUSH
41597: CALL_OW 1
41601: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
41602: LD_ADDR_EXP 143
41606: PUSH
41607: LD_EXP 143
41611: PPUSH
41612: LD_VAR 0 2
41616: PPUSH
41617: LD_INT 0
41619: PPUSH
41620: CALL_OW 1
41624: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
41625: LD_ADDR_EXP 144
41629: PUSH
41630: LD_EXP 144
41634: PPUSH
41635: LD_VAR 0 2
41639: PPUSH
41640: LD_INT 0
41642: PPUSH
41643: CALL_OW 1
41647: ST_TO_ADDR
// end ;
41648: GO 40549
41650: POP
41651: POP
// MC_InitSides ( ) ;
41652: CALL 41938 0 0
// MC_InitResearch ( ) ;
41656: CALL 41677 0 0
// CustomInitMacro ( ) ;
41660: CALL 475 0 0
// skirmish := true ;
41664: LD_ADDR_EXP 99
41668: PUSH
41669: LD_INT 1
41671: ST_TO_ADDR
// end ;
41672: LD_VAR 0 1
41676: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
41677: LD_INT 0
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
// if not mc_bases then
41685: LD_EXP 101
41689: NOT
41690: IFFALSE 41694
// exit ;
41692: GO 41933
// for i = 1 to 8 do
41694: LD_ADDR_VAR 0 2
41698: PUSH
41699: DOUBLE
41700: LD_INT 1
41702: DEC
41703: ST_TO_ADDR
41704: LD_INT 8
41706: PUSH
41707: FOR_TO
41708: IFFALSE 41734
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
41710: LD_ADDR_EXP 128
41714: PUSH
41715: LD_EXP 128
41719: PPUSH
41720: LD_VAR 0 2
41724: PPUSH
41725: EMPTY
41726: PPUSH
41727: CALL_OW 1
41731: ST_TO_ADDR
41732: GO 41707
41734: POP
41735: POP
// tmp := [ ] ;
41736: LD_ADDR_VAR 0 5
41740: PUSH
41741: EMPTY
41742: ST_TO_ADDR
// for i = 1 to mc_sides do
41743: LD_ADDR_VAR 0 2
41747: PUSH
41748: DOUBLE
41749: LD_INT 1
41751: DEC
41752: ST_TO_ADDR
41753: LD_EXP 127
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41817
// if not mc_sides [ i ] in tmp then
41761: LD_EXP 127
41765: PUSH
41766: LD_VAR 0 2
41770: ARRAY
41771: PUSH
41772: LD_VAR 0 5
41776: IN
41777: NOT
41778: IFFALSE 41815
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
41780: LD_ADDR_VAR 0 5
41784: PUSH
41785: LD_VAR 0 5
41789: PPUSH
41790: LD_VAR 0 5
41794: PUSH
41795: LD_INT 1
41797: PLUS
41798: PPUSH
41799: LD_EXP 127
41803: PUSH
41804: LD_VAR 0 2
41808: ARRAY
41809: PPUSH
41810: CALL_OW 2
41814: ST_TO_ADDR
41815: GO 41758
41817: POP
41818: POP
// if not tmp then
41819: LD_VAR 0 5
41823: NOT
41824: IFFALSE 41828
// exit ;
41826: GO 41933
// for j in tmp do
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_VAR 0 5
41837: PUSH
41838: FOR_IN
41839: IFFALSE 41931
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_INT 22
41848: PUSH
41849: LD_VAR 0 3
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PPUSH
41858: CALL_OW 69
41862: ST_TO_ADDR
// if not un then
41863: LD_VAR 0 6
41867: NOT
41868: IFFALSE 41872
// continue ;
41870: GO 41838
// nation := GetNation ( un [ 1 ] ) ;
41872: LD_ADDR_VAR 0 4
41876: PUSH
41877: LD_VAR 0 6
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: PPUSH
41886: CALL_OW 248
41890: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
41891: LD_ADDR_EXP 128
41895: PUSH
41896: LD_EXP 128
41900: PPUSH
41901: LD_VAR 0 3
41905: PPUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_VAR 0 4
41915: PPUSH
41916: LD_INT 1
41918: PPUSH
41919: CALL 69121 0 3
41923: PPUSH
41924: CALL_OW 1
41928: ST_TO_ADDR
// end ;
41929: GO 41838
41931: POP
41932: POP
// end ;
41933: LD_VAR 0 1
41937: RET
// export function MC_InitSides ( ) ; var i ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
// if not mc_bases then
41942: LD_EXP 101
41946: NOT
41947: IFFALSE 41951
// exit ;
41949: GO 42025
// for i = 1 to mc_bases do
41951: LD_ADDR_VAR 0 2
41955: PUSH
41956: DOUBLE
41957: LD_INT 1
41959: DEC
41960: ST_TO_ADDR
41961: LD_EXP 101
41965: PUSH
41966: FOR_TO
41967: IFFALSE 42023
// if mc_bases [ i ] then
41969: LD_EXP 101
41973: PUSH
41974: LD_VAR 0 2
41978: ARRAY
41979: IFFALSE 42021
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
41981: LD_ADDR_EXP 127
41985: PUSH
41986: LD_EXP 127
41990: PPUSH
41991: LD_VAR 0 2
41995: PPUSH
41996: LD_EXP 101
42000: PUSH
42001: LD_VAR 0 2
42005: ARRAY
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: CALL_OW 255
42015: PPUSH
42016: CALL_OW 1
42020: ST_TO_ADDR
42021: GO 41966
42023: POP
42024: POP
// end ;
42025: LD_VAR 0 1
42029: RET
// every 0 0$03 trigger skirmish do
42030: LD_EXP 99
42034: IFFALSE 42188
42036: GO 42038
42038: DISABLE
// begin enable ;
42039: ENABLE
// MC_CheckBuildings ( ) ;
42040: CALL 46700 0 0
// MC_CheckPeopleLife ( ) ;
42044: CALL 46861 0 0
// RaiseSailEvent ( 100 ) ;
42048: LD_INT 100
42050: PPUSH
42051: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
42055: LD_INT 103
42057: PPUSH
42058: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
42062: LD_INT 104
42064: PPUSH
42065: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
42069: LD_INT 105
42071: PPUSH
42072: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
42076: LD_INT 106
42078: PPUSH
42079: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
42083: LD_INT 107
42085: PPUSH
42086: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
42090: LD_INT 108
42092: PPUSH
42093: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
42097: LD_INT 109
42099: PPUSH
42100: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
42104: LD_INT 110
42106: PPUSH
42107: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
42111: LD_INT 111
42113: PPUSH
42114: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
42118: LD_INT 112
42120: PPUSH
42121: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
42125: LD_INT 113
42127: PPUSH
42128: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
42132: LD_INT 120
42134: PPUSH
42135: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
42139: LD_INT 121
42141: PPUSH
42142: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
42146: LD_INT 122
42148: PPUSH
42149: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
42153: LD_INT 123
42155: PPUSH
42156: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
42160: LD_INT 124
42162: PPUSH
42163: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
42167: LD_INT 125
42169: PPUSH
42170: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
42174: LD_INT 126
42176: PPUSH
42177: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
42181: LD_INT 200
42183: PPUSH
42184: CALL_OW 427
// end ;
42188: END
// on SailEvent ( event ) do begin if event < 100 then
42189: LD_VAR 0 1
42193: PUSH
42194: LD_INT 100
42196: LESS
42197: IFFALSE 42208
// CustomEvent ( event ) ;
42199: LD_VAR 0 1
42203: PPUSH
42204: CALL 36564 0 1
// if event = 100 then
42208: LD_VAR 0 1
42212: PUSH
42213: LD_INT 100
42215: EQUAL
42216: IFFALSE 42222
// MC_ClassManager ( ) ;
42218: CALL 42614 0 0
// if event = 101 then
42222: LD_VAR 0 1
42226: PUSH
42227: LD_INT 101
42229: EQUAL
42230: IFFALSE 42236
// MC_RepairBuildings ( ) ;
42232: CALL 47446 0 0
// if event = 102 then
42236: LD_VAR 0 1
42240: PUSH
42241: LD_INT 102
42243: EQUAL
42244: IFFALSE 42250
// MC_Heal ( ) ;
42246: CALL 48381 0 0
// if event = 103 then
42250: LD_VAR 0 1
42254: PUSH
42255: LD_INT 103
42257: EQUAL
42258: IFFALSE 42264
// MC_Build ( ) ;
42260: CALL 48803 0 0
// if event = 104 then
42264: LD_VAR 0 1
42268: PUSH
42269: LD_INT 104
42271: EQUAL
42272: IFFALSE 42278
// MC_TurretWeapon ( ) ;
42274: CALL 50437 0 0
// if event = 105 then
42278: LD_VAR 0 1
42282: PUSH
42283: LD_INT 105
42285: EQUAL
42286: IFFALSE 42292
// MC_BuildUpgrade ( ) ;
42288: CALL 49988 0 0
// if event = 106 then
42292: LD_VAR 0 1
42296: PUSH
42297: LD_INT 106
42299: EQUAL
42300: IFFALSE 42306
// MC_PlantMines ( ) ;
42302: CALL 50867 0 0
// if event = 107 then
42306: LD_VAR 0 1
42310: PUSH
42311: LD_INT 107
42313: EQUAL
42314: IFFALSE 42320
// MC_CollectCrates ( ) ;
42316: CALL 51665 0 0
// if event = 108 then
42320: LD_VAR 0 1
42324: PUSH
42325: LD_INT 108
42327: EQUAL
42328: IFFALSE 42334
// MC_LinkRemoteControl ( ) ;
42330: CALL 53515 0 0
// if event = 109 then
42334: LD_VAR 0 1
42338: PUSH
42339: LD_INT 109
42341: EQUAL
42342: IFFALSE 42348
// MC_ProduceVehicle ( ) ;
42344: CALL 53696 0 0
// if event = 110 then
42348: LD_VAR 0 1
42352: PUSH
42353: LD_INT 110
42355: EQUAL
42356: IFFALSE 42362
// MC_SendAttack ( ) ;
42358: CALL 54162 0 0
// if event = 111 then
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 111
42369: EQUAL
42370: IFFALSE 42376
// MC_Defend ( ) ;
42372: CALL 54270 0 0
// if event = 112 then
42376: LD_VAR 0 1
42380: PUSH
42381: LD_INT 112
42383: EQUAL
42384: IFFALSE 42390
// MC_Research ( ) ;
42386: CALL 55150 0 0
// if event = 113 then
42390: LD_VAR 0 1
42394: PUSH
42395: LD_INT 113
42397: EQUAL
42398: IFFALSE 42404
// MC_MinesTrigger ( ) ;
42400: CALL 56264 0 0
// if event = 120 then
42404: LD_VAR 0 1
42408: PUSH
42409: LD_INT 120
42411: EQUAL
42412: IFFALSE 42418
// MC_RepairVehicle ( ) ;
42414: CALL 56363 0 0
// if event = 121 then
42418: LD_VAR 0 1
42422: PUSH
42423: LD_INT 121
42425: EQUAL
42426: IFFALSE 42432
// MC_TameApe ( ) ;
42428: CALL 57132 0 0
// if event = 122 then
42432: LD_VAR 0 1
42436: PUSH
42437: LD_INT 122
42439: EQUAL
42440: IFFALSE 42446
// MC_ChangeApeClass ( ) ;
42442: CALL 57961 0 0
// if event = 123 then
42446: LD_VAR 0 1
42450: PUSH
42451: LD_INT 123
42453: EQUAL
42454: IFFALSE 42460
// MC_Bazooka ( ) ;
42456: CALL 58611 0 0
// if event = 124 then
42460: LD_VAR 0 1
42464: PUSH
42465: LD_INT 124
42467: EQUAL
42468: IFFALSE 42474
// MC_TeleportExit ( ) ;
42470: CALL 58809 0 0
// if event = 125 then
42474: LD_VAR 0 1
42478: PUSH
42479: LD_INT 125
42481: EQUAL
42482: IFFALSE 42488
// MC_Deposits ( ) ;
42484: CALL 59456 0 0
// if event = 126 then
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 126
42495: EQUAL
42496: IFFALSE 42502
// MC_RemoteDriver ( ) ;
42498: CALL 60081 0 0
// if event = 200 then
42502: LD_VAR 0 1
42506: PUSH
42507: LD_INT 200
42509: EQUAL
42510: IFFALSE 42516
// MC_Idle ( ) ;
42512: CALL 61988 0 0
// end ;
42516: PPOPN 1
42518: END
// export function MC_Reset ( base , tag ) ; var i ; begin
42519: LD_INT 0
42521: PPUSH
42522: PPUSH
// if not mc_bases [ base ] or not tag then
42523: LD_EXP 101
42527: PUSH
42528: LD_VAR 0 1
42532: ARRAY
42533: NOT
42534: PUSH
42535: LD_VAR 0 2
42539: NOT
42540: OR
42541: IFFALSE 42545
// exit ;
42543: GO 42609
// for i in mc_bases [ base ] union mc_ape [ base ] do
42545: LD_ADDR_VAR 0 4
42549: PUSH
42550: LD_EXP 101
42554: PUSH
42555: LD_VAR 0 1
42559: ARRAY
42560: PUSH
42561: LD_EXP 130
42565: PUSH
42566: LD_VAR 0 1
42570: ARRAY
42571: UNION
42572: PUSH
42573: FOR_IN
42574: IFFALSE 42607
// if GetTag ( i ) = tag then
42576: LD_VAR 0 4
42580: PPUSH
42581: CALL_OW 110
42585: PUSH
42586: LD_VAR 0 2
42590: EQUAL
42591: IFFALSE 42605
// SetTag ( i , 0 ) ;
42593: LD_VAR 0 4
42597: PPUSH
42598: LD_INT 0
42600: PPUSH
42601: CALL_OW 109
42605: GO 42573
42607: POP
42608: POP
// end ;
42609: LD_VAR 0 3
42613: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
42614: LD_INT 0
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
// if not mc_bases then
42624: LD_EXP 101
42628: NOT
42629: IFFALSE 42633
// exit ;
42631: GO 43082
// for i = 1 to mc_bases do
42633: LD_ADDR_VAR 0 2
42637: PUSH
42638: DOUBLE
42639: LD_INT 1
42641: DEC
42642: ST_TO_ADDR
42643: LD_EXP 101
42647: PUSH
42648: FOR_TO
42649: IFFALSE 43080
// begin tmp := MC_ClassCheckReq ( i ) ;
42651: LD_ADDR_VAR 0 4
42655: PUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: CALL 43087 0 1
42665: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
42666: LD_ADDR_EXP 142
42670: PUSH
42671: LD_EXP 142
42675: PPUSH
42676: LD_VAR 0 2
42680: PPUSH
42681: LD_VAR 0 4
42685: PPUSH
42686: CALL_OW 1
42690: ST_TO_ADDR
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
42691: LD_ADDR_VAR 0 6
42695: PUSH
42696: LD_EXP 101
42700: PUSH
42701: LD_VAR 0 2
42705: ARRAY
42706: PPUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 30
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 30
42722: PUSH
42723: LD_INT 5
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PPUSH
42735: CALL_OW 72
42739: PUSH
42740: LD_EXP 101
42744: PUSH
42745: LD_VAR 0 2
42749: ARRAY
42750: PPUSH
42751: LD_INT 2
42753: PUSH
42754: LD_INT 30
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 30
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PPUSH
42779: CALL_OW 72
42783: PUSH
42784: LD_EXP 101
42788: PUSH
42789: LD_VAR 0 2
42793: ARRAY
42794: PPUSH
42795: LD_INT 30
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PPUSH
42805: CALL_OW 72
42809: PUSH
42810: LD_EXP 101
42814: PUSH
42815: LD_VAR 0 2
42819: ARRAY
42820: PPUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 30
42826: PUSH
42827: LD_INT 6
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 30
42836: PUSH
42837: LD_INT 7
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 30
42846: PUSH
42847: LD_INT 8
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: PPUSH
42860: CALL_OW 72
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: ST_TO_ADDR
// for j := 1 to 4 do
42871: LD_ADDR_VAR 0 3
42875: PUSH
42876: DOUBLE
42877: LD_INT 1
42879: DEC
42880: ST_TO_ADDR
42881: LD_INT 4
42883: PUSH
42884: FOR_TO
42885: IFFALSE 43076
// begin if not tmp [ j ] then
42887: LD_VAR 0 4
42891: PUSH
42892: LD_VAR 0 3
42896: ARRAY
42897: NOT
42898: IFFALSE 42902
// continue ;
42900: GO 42884
// for p in tmp [ j ] do
42902: LD_ADDR_VAR 0 5
42906: PUSH
42907: LD_VAR 0 4
42911: PUSH
42912: LD_VAR 0 3
42916: ARRAY
42917: PUSH
42918: FOR_IN
42919: IFFALSE 43072
// begin if not b [ j ] then
42921: LD_VAR 0 6
42925: PUSH
42926: LD_VAR 0 3
42930: ARRAY
42931: NOT
42932: IFFALSE 42936
// break ;
42934: GO 43072
// e := 0 ;
42936: LD_ADDR_VAR 0 7
42940: PUSH
42941: LD_INT 0
42943: ST_TO_ADDR
// for k in b [ j ] do
42944: LD_ADDR_VAR 0 8
42948: PUSH
42949: LD_VAR 0 6
42953: PUSH
42954: LD_VAR 0 3
42958: ARRAY
42959: PUSH
42960: FOR_IN
42961: IFFALSE 42988
// if IsNotFull ( k ) then
42963: LD_VAR 0 8
42967: PPUSH
42968: CALL 71242 0 1
42972: IFFALSE 42986
// begin e := k ;
42974: LD_ADDR_VAR 0 7
42978: PUSH
42979: LD_VAR 0 8
42983: ST_TO_ADDR
// break ;
42984: GO 42988
// end ;
42986: GO 42960
42988: POP
42989: POP
// if e and not UnitGoingToBuilding ( p , e ) then
42990: LD_VAR 0 7
42994: PUSH
42995: LD_VAR 0 5
42999: PPUSH
43000: LD_VAR 0 7
43004: PPUSH
43005: CALL 105004 0 2
43009: NOT
43010: AND
43011: IFFALSE 43070
// begin if IsInUnit ( p ) then
43013: LD_VAR 0 5
43017: PPUSH
43018: CALL_OW 310
43022: IFFALSE 43033
// ComExitBuilding ( p ) ;
43024: LD_VAR 0 5
43028: PPUSH
43029: CALL_OW 122
// ComEnterUnit ( p , e ) ;
43033: LD_VAR 0 5
43037: PPUSH
43038: LD_VAR 0 7
43042: PPUSH
43043: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
43047: LD_VAR 0 5
43051: PPUSH
43052: LD_VAR 0 3
43056: PPUSH
43057: CALL_OW 183
// AddComExitBuilding ( p ) ;
43061: LD_VAR 0 5
43065: PPUSH
43066: CALL_OW 182
// end ; end ;
43070: GO 42918
43072: POP
43073: POP
// end ;
43074: GO 42884
43076: POP
43077: POP
// end ;
43078: GO 42648
43080: POP
43081: POP
// end ;
43082: LD_VAR 0 1
43086: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
43087: LD_INT 0
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43101: LD_ADDR_VAR 0 2
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
43124: LD_VAR 0 1
43128: NOT
43129: PUSH
43130: LD_EXP 101
43134: PUSH
43135: LD_VAR 0 1
43139: ARRAY
43140: NOT
43141: OR
43142: PUSH
43143: LD_EXP 101
43147: PUSH
43148: LD_VAR 0 1
43152: ARRAY
43153: PPUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 30
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 30
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: PPUSH
43182: CALL_OW 72
43186: NOT
43187: OR
43188: IFFALSE 43192
// exit ;
43190: GO 46695
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43192: LD_ADDR_VAR 0 4
43196: PUSH
43197: LD_EXP 101
43201: PUSH
43202: LD_VAR 0 1
43206: ARRAY
43207: PPUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 25
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 25
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 25
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 25
43243: PUSH
43244: LD_INT 4
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 25
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 25
43263: PUSH
43264: LD_INT 8
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 25
43273: PUSH
43274: LD_INT 9
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: PPUSH
43291: CALL_OW 72
43295: ST_TO_ADDR
// if not tmp then
43296: LD_VAR 0 4
43300: NOT
43301: IFFALSE 43305
// exit ;
43303: GO 46695
// for i in tmp do
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: FOR_IN
43316: IFFALSE 43347
// if GetTag ( i ) then
43318: LD_VAR 0 3
43322: PPUSH
43323: CALL_OW 110
43327: IFFALSE 43345
// tmp := tmp diff i ;
43329: LD_ADDR_VAR 0 4
43333: PUSH
43334: LD_VAR 0 4
43338: PUSH
43339: LD_VAR 0 3
43343: DIFF
43344: ST_TO_ADDR
43345: GO 43315
43347: POP
43348: POP
// if not tmp then
43349: LD_VAR 0 4
43353: NOT
43354: IFFALSE 43358
// exit ;
43356: GO 46695
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43358: LD_ADDR_VAR 0 5
43362: PUSH
43363: LD_EXP 101
43367: PUSH
43368: LD_VAR 0 1
43372: ARRAY
43373: PPUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 25
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 25
43389: PUSH
43390: LD_INT 5
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 25
43399: PUSH
43400: LD_INT 8
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 25
43409: PUSH
43410: LD_INT 9
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: PPUSH
43424: CALL_OW 72
43428: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_EXP 101
43438: PUSH
43439: LD_VAR 0 1
43443: ARRAY
43444: PPUSH
43445: LD_INT 25
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PPUSH
43455: CALL_OW 72
43459: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
43460: LD_ADDR_VAR 0 7
43464: PUSH
43465: LD_EXP 101
43469: PUSH
43470: LD_VAR 0 1
43474: ARRAY
43475: PPUSH
43476: LD_INT 25
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PPUSH
43486: CALL_OW 72
43490: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
43491: LD_ADDR_VAR 0 8
43495: PUSH
43496: LD_EXP 101
43500: PUSH
43501: LD_VAR 0 1
43505: ARRAY
43506: PPUSH
43507: LD_INT 25
43509: PUSH
43510: LD_INT 4
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 24
43519: PUSH
43520: LD_INT 251
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PPUSH
43531: CALL_OW 72
43535: ST_TO_ADDR
// if mc_is_defending [ base ] then
43536: LD_EXP 144
43540: PUSH
43541: LD_VAR 0 1
43545: ARRAY
43546: IFFALSE 44007
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
43548: LD_ADDR_EXP 143
43552: PUSH
43553: LD_EXP 143
43557: PPUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: LD_INT 4
43565: PPUSH
43566: CALL_OW 1
43570: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
43571: LD_ADDR_VAR 0 12
43575: PUSH
43576: LD_EXP 101
43580: PUSH
43581: LD_VAR 0 1
43585: ARRAY
43586: PPUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 30
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 30
43602: PUSH
43603: LD_INT 5
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: PPUSH
43615: CALL_OW 72
43619: ST_TO_ADDR
// if not b then
43620: LD_VAR 0 12
43624: NOT
43625: IFFALSE 43629
// exit ;
43627: GO 46695
// p := [ ] ;
43629: LD_ADDR_VAR 0 11
43633: PUSH
43634: EMPTY
43635: ST_TO_ADDR
// if sci >= 2 then
43636: LD_VAR 0 8
43640: PUSH
43641: LD_INT 2
43643: GREATEREQUAL
43644: IFFALSE 43675
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
43646: LD_ADDR_VAR 0 8
43650: PUSH
43651: LD_VAR 0 8
43655: PUSH
43656: LD_INT 1
43658: ARRAY
43659: PUSH
43660: LD_VAR 0 8
43664: PUSH
43665: LD_INT 2
43667: ARRAY
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: ST_TO_ADDR
43673: GO 43736
// if sci = 1 then
43675: LD_VAR 0 8
43679: PUSH
43680: LD_INT 1
43682: EQUAL
43683: IFFALSE 43704
// sci := [ sci [ 1 ] ] else
43685: LD_ADDR_VAR 0 8
43689: PUSH
43690: LD_VAR 0 8
43694: PUSH
43695: LD_INT 1
43697: ARRAY
43698: PUSH
43699: EMPTY
43700: LIST
43701: ST_TO_ADDR
43702: GO 43736
// if sci = 0 then
43704: LD_VAR 0 8
43708: PUSH
43709: LD_INT 0
43711: EQUAL
43712: IFFALSE 43736
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
43714: LD_ADDR_VAR 0 11
43718: PUSH
43719: LD_VAR 0 4
43723: PPUSH
43724: LD_INT 4
43726: PPUSH
43727: CALL 104876 0 2
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: ST_TO_ADDR
// if eng > 4 then
43736: LD_VAR 0 6
43740: PUSH
43741: LD_INT 4
43743: GREATER
43744: IFFALSE 43790
// for i = eng downto 4 do
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: DOUBLE
43752: LD_VAR 0 6
43756: INC
43757: ST_TO_ADDR
43758: LD_INT 4
43760: PUSH
43761: FOR_DOWNTO
43762: IFFALSE 43788
// eng := eng diff eng [ i ] ;
43764: LD_ADDR_VAR 0 6
43768: PUSH
43769: LD_VAR 0 6
43773: PUSH
43774: LD_VAR 0 6
43778: PUSH
43779: LD_VAR 0 3
43783: ARRAY
43784: DIFF
43785: ST_TO_ADDR
43786: GO 43761
43788: POP
43789: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
43790: LD_ADDR_VAR 0 4
43794: PUSH
43795: LD_VAR 0 4
43799: PUSH
43800: LD_VAR 0 5
43804: PUSH
43805: LD_VAR 0 6
43809: UNION
43810: PUSH
43811: LD_VAR 0 7
43815: UNION
43816: PUSH
43817: LD_VAR 0 8
43821: UNION
43822: DIFF
43823: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
43824: LD_ADDR_VAR 0 13
43828: PUSH
43829: LD_EXP 101
43833: PUSH
43834: LD_VAR 0 1
43838: ARRAY
43839: PPUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 30
43845: PUSH
43846: LD_INT 32
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 30
43855: PUSH
43856: LD_INT 31
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: PPUSH
43868: CALL_OW 72
43872: PUSH
43873: LD_EXP 101
43877: PUSH
43878: LD_VAR 0 1
43882: ARRAY
43883: PPUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 30
43889: PUSH
43890: LD_INT 4
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 30
43899: PUSH
43900: LD_INT 5
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: PPUSH
43912: CALL_OW 72
43916: PUSH
43917: LD_INT 6
43919: MUL
43920: PLUS
43921: ST_TO_ADDR
// if bcount < tmp then
43922: LD_VAR 0 13
43926: PUSH
43927: LD_VAR 0 4
43931: LESS
43932: IFFALSE 43978
// for i = tmp downto bcount do
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: DOUBLE
43940: LD_VAR 0 4
43944: INC
43945: ST_TO_ADDR
43946: LD_VAR 0 13
43950: PUSH
43951: FOR_DOWNTO
43952: IFFALSE 43976
// tmp := Delete ( tmp , tmp ) ;
43954: LD_ADDR_VAR 0 4
43958: PUSH
43959: LD_VAR 0 4
43963: PPUSH
43964: LD_VAR 0 4
43968: PPUSH
43969: CALL_OW 3
43973: ST_TO_ADDR
43974: GO 43951
43976: POP
43977: POP
// result := [ tmp , 0 , 0 , p ] ;
43978: LD_ADDR_VAR 0 2
43982: PUSH
43983: LD_VAR 0 4
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_VAR 0 11
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// exit ;
44005: GO 46695
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44007: LD_EXP 101
44011: PUSH
44012: LD_VAR 0 1
44016: ARRAY
44017: PPUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 30
44023: PUSH
44024: LD_INT 6
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 30
44033: PUSH
44034: LD_INT 7
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 30
44043: PUSH
44044: LD_INT 8
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: PPUSH
44057: CALL_OW 72
44061: NOT
44062: PUSH
44063: LD_EXP 101
44067: PUSH
44068: LD_VAR 0 1
44072: ARRAY
44073: PPUSH
44074: LD_INT 30
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PPUSH
44084: CALL_OW 72
44088: NOT
44089: AND
44090: IFFALSE 44162
// begin if eng = tmp then
44092: LD_VAR 0 6
44096: PUSH
44097: LD_VAR 0 4
44101: EQUAL
44102: IFFALSE 44106
// exit ;
44104: GO 46695
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
44106: LD_ADDR_EXP 143
44110: PUSH
44111: LD_EXP 143
44115: PPUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: LD_INT 1
44123: PPUSH
44124: CALL_OW 1
44128: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
44129: LD_ADDR_VAR 0 2
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_VAR 0 4
44141: PUSH
44142: LD_VAR 0 6
44146: DIFF
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// exit ;
44160: GO 46695
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44162: LD_EXP 128
44166: PUSH
44167: LD_EXP 127
44171: PUSH
44172: LD_VAR 0 1
44176: ARRAY
44177: ARRAY
44178: PUSH
44179: LD_EXP 101
44183: PUSH
44184: LD_VAR 0 1
44188: ARRAY
44189: PPUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 30
44195: PUSH
44196: LD_INT 6
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 30
44205: PUSH
44206: LD_INT 7
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 30
44215: PUSH
44216: LD_INT 8
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: PPUSH
44229: CALL_OW 72
44233: AND
44234: PUSH
44235: LD_EXP 101
44239: PUSH
44240: LD_VAR 0 1
44244: ARRAY
44245: PPUSH
44246: LD_INT 30
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PPUSH
44256: CALL_OW 72
44260: NOT
44261: AND
44262: IFFALSE 44476
// begin if sci >= 6 then
44264: LD_VAR 0 8
44268: PUSH
44269: LD_INT 6
44271: GREATEREQUAL
44272: IFFALSE 44276
// exit ;
44274: GO 46695
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
44276: LD_ADDR_EXP 143
44280: PUSH
44281: LD_EXP 143
44285: PPUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: LD_INT 2
44293: PPUSH
44294: CALL_OW 1
44298: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
44299: LD_ADDR_VAR 0 9
44303: PUSH
44304: LD_VAR 0 4
44308: PUSH
44309: LD_VAR 0 8
44313: DIFF
44314: PPUSH
44315: LD_INT 4
44317: PPUSH
44318: CALL 104876 0 2
44322: ST_TO_ADDR
// p := [ ] ;
44323: LD_ADDR_VAR 0 11
44327: PUSH
44328: EMPTY
44329: ST_TO_ADDR
// if sci < 6 and sort > 6 then
44330: LD_VAR 0 8
44334: PUSH
44335: LD_INT 6
44337: LESS
44338: PUSH
44339: LD_VAR 0 9
44343: PUSH
44344: LD_INT 6
44346: GREATER
44347: AND
44348: IFFALSE 44429
// begin for i = 1 to 6 - sci do
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: DOUBLE
44356: LD_INT 1
44358: DEC
44359: ST_TO_ADDR
44360: LD_INT 6
44362: PUSH
44363: LD_VAR 0 8
44367: MINUS
44368: PUSH
44369: FOR_TO
44370: IFFALSE 44425
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
44372: LD_ADDR_VAR 0 11
44376: PUSH
44377: LD_VAR 0 11
44381: PPUSH
44382: LD_VAR 0 11
44386: PUSH
44387: LD_INT 1
44389: PLUS
44390: PPUSH
44391: LD_VAR 0 9
44395: PUSH
44396: LD_INT 1
44398: ARRAY
44399: PPUSH
44400: CALL_OW 2
44404: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
44405: LD_ADDR_VAR 0 9
44409: PUSH
44410: LD_VAR 0 9
44414: PPUSH
44415: LD_INT 1
44417: PPUSH
44418: CALL_OW 3
44422: ST_TO_ADDR
// end ;
44423: GO 44369
44425: POP
44426: POP
// end else
44427: GO 44449
// if sort then
44429: LD_VAR 0 9
44433: IFFALSE 44449
// p := sort [ 1 ] ;
44435: LD_ADDR_VAR 0 11
44439: PUSH
44440: LD_VAR 0 9
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
44449: LD_ADDR_VAR 0 2
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_VAR 0 11
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
// exit ;
44474: GO 46695
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44476: LD_EXP 128
44480: PUSH
44481: LD_EXP 127
44485: PUSH
44486: LD_VAR 0 1
44490: ARRAY
44491: ARRAY
44492: PUSH
44493: LD_EXP 101
44497: PUSH
44498: LD_VAR 0 1
44502: ARRAY
44503: PPUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 30
44509: PUSH
44510: LD_INT 6
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 30
44519: PUSH
44520: LD_INT 7
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 30
44529: PUSH
44530: LD_INT 8
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: PPUSH
44543: CALL_OW 72
44547: AND
44548: PUSH
44549: LD_EXP 101
44553: PUSH
44554: LD_VAR 0 1
44558: ARRAY
44559: PPUSH
44560: LD_INT 30
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PPUSH
44570: CALL_OW 72
44574: AND
44575: IFFALSE 45309
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
44577: LD_ADDR_EXP 143
44581: PUSH
44582: LD_EXP 143
44586: PPUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: LD_INT 3
44594: PPUSH
44595: CALL_OW 1
44599: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// if not eng then
44623: LD_VAR 0 6
44627: NOT
44628: IFFALSE 44691
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
44630: LD_ADDR_VAR 0 11
44634: PUSH
44635: LD_VAR 0 4
44639: PPUSH
44640: LD_INT 2
44642: PPUSH
44643: CALL 104876 0 2
44647: PUSH
44648: LD_INT 1
44650: ARRAY
44651: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
44652: LD_ADDR_VAR 0 2
44656: PUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: LD_INT 2
44664: PPUSH
44665: LD_VAR 0 11
44669: PPUSH
44670: CALL_OW 1
44674: ST_TO_ADDR
// tmp := tmp diff p ;
44675: LD_ADDR_VAR 0 4
44679: PUSH
44680: LD_VAR 0 4
44684: PUSH
44685: LD_VAR 0 11
44689: DIFF
44690: ST_TO_ADDR
// end ; if tmp and sci < 6 then
44691: LD_VAR 0 4
44695: PUSH
44696: LD_VAR 0 8
44700: PUSH
44701: LD_INT 6
44703: LESS
44704: AND
44705: IFFALSE 44893
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
44707: LD_ADDR_VAR 0 9
44711: PUSH
44712: LD_VAR 0 4
44716: PUSH
44717: LD_VAR 0 8
44721: PUSH
44722: LD_VAR 0 7
44726: UNION
44727: DIFF
44728: PPUSH
44729: LD_INT 4
44731: PPUSH
44732: CALL 104876 0 2
44736: ST_TO_ADDR
// p := [ ] ;
44737: LD_ADDR_VAR 0 11
44741: PUSH
44742: EMPTY
44743: ST_TO_ADDR
// if sort then
44744: LD_VAR 0 9
44748: IFFALSE 44864
// for i = 1 to 6 - sci do
44750: LD_ADDR_VAR 0 3
44754: PUSH
44755: DOUBLE
44756: LD_INT 1
44758: DEC
44759: ST_TO_ADDR
44760: LD_INT 6
44762: PUSH
44763: LD_VAR 0 8
44767: MINUS
44768: PUSH
44769: FOR_TO
44770: IFFALSE 44862
// begin if i = sort then
44772: LD_VAR 0 3
44776: PUSH
44777: LD_VAR 0 9
44781: EQUAL
44782: IFFALSE 44786
// break ;
44784: GO 44862
// if GetClass ( i ) = 4 then
44786: LD_VAR 0 3
44790: PPUSH
44791: CALL_OW 257
44795: PUSH
44796: LD_INT 4
44798: EQUAL
44799: IFFALSE 44803
// continue ;
44801: GO 44769
// p := Insert ( p , p + 1 , sort [ i ] ) ;
44803: LD_ADDR_VAR 0 11
44807: PUSH
44808: LD_VAR 0 11
44812: PPUSH
44813: LD_VAR 0 11
44817: PUSH
44818: LD_INT 1
44820: PLUS
44821: PPUSH
44822: LD_VAR 0 9
44826: PUSH
44827: LD_VAR 0 3
44831: ARRAY
44832: PPUSH
44833: CALL_OW 2
44837: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
44838: LD_ADDR_VAR 0 4
44842: PUSH
44843: LD_VAR 0 4
44847: PUSH
44848: LD_VAR 0 9
44852: PUSH
44853: LD_VAR 0 3
44857: ARRAY
44858: DIFF
44859: ST_TO_ADDR
// end ;
44860: GO 44769
44862: POP
44863: POP
// if p then
44864: LD_VAR 0 11
44868: IFFALSE 44893
// result := Replace ( result , 4 , p ) ;
44870: LD_ADDR_VAR 0 2
44874: PUSH
44875: LD_VAR 0 2
44879: PPUSH
44880: LD_INT 4
44882: PPUSH
44883: LD_VAR 0 11
44887: PPUSH
44888: CALL_OW 1
44892: ST_TO_ADDR
// end ; if tmp and mech < 6 then
44893: LD_VAR 0 4
44897: PUSH
44898: LD_VAR 0 7
44902: PUSH
44903: LD_INT 6
44905: LESS
44906: AND
44907: IFFALSE 45095
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
44909: LD_ADDR_VAR 0 9
44913: PUSH
44914: LD_VAR 0 4
44918: PUSH
44919: LD_VAR 0 8
44923: PUSH
44924: LD_VAR 0 7
44928: UNION
44929: DIFF
44930: PPUSH
44931: LD_INT 3
44933: PPUSH
44934: CALL 104876 0 2
44938: ST_TO_ADDR
// p := [ ] ;
44939: LD_ADDR_VAR 0 11
44943: PUSH
44944: EMPTY
44945: ST_TO_ADDR
// if sort then
44946: LD_VAR 0 9
44950: IFFALSE 45066
// for i = 1 to 6 - mech do
44952: LD_ADDR_VAR 0 3
44956: PUSH
44957: DOUBLE
44958: LD_INT 1
44960: DEC
44961: ST_TO_ADDR
44962: LD_INT 6
44964: PUSH
44965: LD_VAR 0 7
44969: MINUS
44970: PUSH
44971: FOR_TO
44972: IFFALSE 45064
// begin if i = sort then
44974: LD_VAR 0 3
44978: PUSH
44979: LD_VAR 0 9
44983: EQUAL
44984: IFFALSE 44988
// break ;
44986: GO 45064
// if GetClass ( i ) = 3 then
44988: LD_VAR 0 3
44992: PPUSH
44993: CALL_OW 257
44997: PUSH
44998: LD_INT 3
45000: EQUAL
45001: IFFALSE 45005
// continue ;
45003: GO 44971
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45005: LD_ADDR_VAR 0 11
45009: PUSH
45010: LD_VAR 0 11
45014: PPUSH
45015: LD_VAR 0 11
45019: PUSH
45020: LD_INT 1
45022: PLUS
45023: PPUSH
45024: LD_VAR 0 9
45028: PUSH
45029: LD_VAR 0 3
45033: ARRAY
45034: PPUSH
45035: CALL_OW 2
45039: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45040: LD_ADDR_VAR 0 4
45044: PUSH
45045: LD_VAR 0 4
45049: PUSH
45050: LD_VAR 0 9
45054: PUSH
45055: LD_VAR 0 3
45059: ARRAY
45060: DIFF
45061: ST_TO_ADDR
// end ;
45062: GO 44971
45064: POP
45065: POP
// if p then
45066: LD_VAR 0 11
45070: IFFALSE 45095
// result := Replace ( result , 3 , p ) ;
45072: LD_ADDR_VAR 0 2
45076: PUSH
45077: LD_VAR 0 2
45081: PPUSH
45082: LD_INT 3
45084: PPUSH
45085: LD_VAR 0 11
45089: PPUSH
45090: CALL_OW 1
45094: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
45095: LD_VAR 0 4
45099: PUSH
45100: LD_INT 6
45102: GREATER
45103: PUSH
45104: LD_VAR 0 6
45108: PUSH
45109: LD_INT 6
45111: LESS
45112: AND
45113: IFFALSE 45307
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
45115: LD_ADDR_VAR 0 9
45119: PUSH
45120: LD_VAR 0 4
45124: PUSH
45125: LD_VAR 0 8
45129: PUSH
45130: LD_VAR 0 7
45134: UNION
45135: PUSH
45136: LD_VAR 0 6
45140: UNION
45141: DIFF
45142: PPUSH
45143: LD_INT 2
45145: PPUSH
45146: CALL 104876 0 2
45150: ST_TO_ADDR
// p := [ ] ;
45151: LD_ADDR_VAR 0 11
45155: PUSH
45156: EMPTY
45157: ST_TO_ADDR
// if sort then
45158: LD_VAR 0 9
45162: IFFALSE 45278
// for i = 1 to 6 - eng do
45164: LD_ADDR_VAR 0 3
45168: PUSH
45169: DOUBLE
45170: LD_INT 1
45172: DEC
45173: ST_TO_ADDR
45174: LD_INT 6
45176: PUSH
45177: LD_VAR 0 6
45181: MINUS
45182: PUSH
45183: FOR_TO
45184: IFFALSE 45276
// begin if i = sort then
45186: LD_VAR 0 3
45190: PUSH
45191: LD_VAR 0 9
45195: EQUAL
45196: IFFALSE 45200
// break ;
45198: GO 45276
// if GetClass ( i ) = 2 then
45200: LD_VAR 0 3
45204: PPUSH
45205: CALL_OW 257
45209: PUSH
45210: LD_INT 2
45212: EQUAL
45213: IFFALSE 45217
// continue ;
45215: GO 45183
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45217: LD_ADDR_VAR 0 11
45221: PUSH
45222: LD_VAR 0 11
45226: PPUSH
45227: LD_VAR 0 11
45231: PUSH
45232: LD_INT 1
45234: PLUS
45235: PPUSH
45236: LD_VAR 0 9
45240: PUSH
45241: LD_VAR 0 3
45245: ARRAY
45246: PPUSH
45247: CALL_OW 2
45251: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45252: LD_ADDR_VAR 0 4
45256: PUSH
45257: LD_VAR 0 4
45261: PUSH
45262: LD_VAR 0 9
45266: PUSH
45267: LD_VAR 0 3
45271: ARRAY
45272: DIFF
45273: ST_TO_ADDR
// end ;
45274: GO 45183
45276: POP
45277: POP
// if p then
45278: LD_VAR 0 11
45282: IFFALSE 45307
// result := Replace ( result , 2 , p ) ;
45284: LD_ADDR_VAR 0 2
45288: PUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_INT 2
45296: PPUSH
45297: LD_VAR 0 11
45301: PPUSH
45302: CALL_OW 1
45306: ST_TO_ADDR
// end ; exit ;
45307: GO 46695
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
45309: LD_EXP 128
45313: PUSH
45314: LD_EXP 127
45318: PUSH
45319: LD_VAR 0 1
45323: ARRAY
45324: ARRAY
45325: NOT
45326: PUSH
45327: LD_EXP 101
45331: PUSH
45332: LD_VAR 0 1
45336: ARRAY
45337: PPUSH
45338: LD_INT 30
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PPUSH
45348: CALL_OW 72
45352: AND
45353: PUSH
45354: LD_EXP 106
45358: PUSH
45359: LD_VAR 0 1
45363: ARRAY
45364: AND
45365: IFFALSE 45973
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
45367: LD_ADDR_EXP 143
45371: PUSH
45372: LD_EXP 143
45376: PPUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: LD_INT 5
45384: PPUSH
45385: CALL_OW 1
45389: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
45390: LD_ADDR_VAR 0 2
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if sci > 1 then
45413: LD_VAR 0 8
45417: PUSH
45418: LD_INT 1
45420: GREATER
45421: IFFALSE 45449
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
45423: LD_ADDR_VAR 0 4
45427: PUSH
45428: LD_VAR 0 4
45432: PUSH
45433: LD_VAR 0 8
45437: PUSH
45438: LD_VAR 0 8
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: DIFF
45447: DIFF
45448: ST_TO_ADDR
// if tmp and not sci then
45449: LD_VAR 0 4
45453: PUSH
45454: LD_VAR 0 8
45458: NOT
45459: AND
45460: IFFALSE 45529
// begin sort := SortBySkill ( tmp , 4 ) ;
45462: LD_ADDR_VAR 0 9
45466: PUSH
45467: LD_VAR 0 4
45471: PPUSH
45472: LD_INT 4
45474: PPUSH
45475: CALL 104876 0 2
45479: ST_TO_ADDR
// if sort then
45480: LD_VAR 0 9
45484: IFFALSE 45500
// p := sort [ 1 ] ;
45486: LD_ADDR_VAR 0 11
45490: PUSH
45491: LD_VAR 0 9
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: ST_TO_ADDR
// if p then
45500: LD_VAR 0 11
45504: IFFALSE 45529
// result := Replace ( result , 4 , p ) ;
45506: LD_ADDR_VAR 0 2
45510: PUSH
45511: LD_VAR 0 2
45515: PPUSH
45516: LD_INT 4
45518: PPUSH
45519: LD_VAR 0 11
45523: PPUSH
45524: CALL_OW 1
45528: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
45529: LD_ADDR_VAR 0 4
45533: PUSH
45534: LD_VAR 0 4
45538: PUSH
45539: LD_VAR 0 7
45543: DIFF
45544: ST_TO_ADDR
// if tmp and mech < 6 then
45545: LD_VAR 0 4
45549: PUSH
45550: LD_VAR 0 7
45554: PUSH
45555: LD_INT 6
45557: LESS
45558: AND
45559: IFFALSE 45747
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_VAR 0 4
45570: PUSH
45571: LD_VAR 0 8
45575: PUSH
45576: LD_VAR 0 7
45580: UNION
45581: DIFF
45582: PPUSH
45583: LD_INT 3
45585: PPUSH
45586: CALL 104876 0 2
45590: ST_TO_ADDR
// p := [ ] ;
45591: LD_ADDR_VAR 0 11
45595: PUSH
45596: EMPTY
45597: ST_TO_ADDR
// if sort then
45598: LD_VAR 0 9
45602: IFFALSE 45718
// for i = 1 to 6 - mech do
45604: LD_ADDR_VAR 0 3
45608: PUSH
45609: DOUBLE
45610: LD_INT 1
45612: DEC
45613: ST_TO_ADDR
45614: LD_INT 6
45616: PUSH
45617: LD_VAR 0 7
45621: MINUS
45622: PUSH
45623: FOR_TO
45624: IFFALSE 45716
// begin if i = sort then
45626: LD_VAR 0 3
45630: PUSH
45631: LD_VAR 0 9
45635: EQUAL
45636: IFFALSE 45640
// break ;
45638: GO 45716
// if GetClass ( i ) = 3 then
45640: LD_VAR 0 3
45644: PPUSH
45645: CALL_OW 257
45649: PUSH
45650: LD_INT 3
45652: EQUAL
45653: IFFALSE 45657
// continue ;
45655: GO 45623
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45657: LD_ADDR_VAR 0 11
45661: PUSH
45662: LD_VAR 0 11
45666: PPUSH
45667: LD_VAR 0 11
45671: PUSH
45672: LD_INT 1
45674: PLUS
45675: PPUSH
45676: LD_VAR 0 9
45680: PUSH
45681: LD_VAR 0 3
45685: ARRAY
45686: PPUSH
45687: CALL_OW 2
45691: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45692: LD_ADDR_VAR 0 4
45696: PUSH
45697: LD_VAR 0 4
45701: PUSH
45702: LD_VAR 0 9
45706: PUSH
45707: LD_VAR 0 3
45711: ARRAY
45712: DIFF
45713: ST_TO_ADDR
// end ;
45714: GO 45623
45716: POP
45717: POP
// if p then
45718: LD_VAR 0 11
45722: IFFALSE 45747
// result := Replace ( result , 3 , p ) ;
45724: LD_ADDR_VAR 0 2
45728: PUSH
45729: LD_VAR 0 2
45733: PPUSH
45734: LD_INT 3
45736: PPUSH
45737: LD_VAR 0 11
45741: PPUSH
45742: CALL_OW 1
45746: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
45747: LD_ADDR_VAR 0 4
45751: PUSH
45752: LD_VAR 0 4
45756: PUSH
45757: LD_VAR 0 6
45761: DIFF
45762: ST_TO_ADDR
// if tmp and eng < 6 then
45763: LD_VAR 0 4
45767: PUSH
45768: LD_VAR 0 6
45772: PUSH
45773: LD_INT 6
45775: LESS
45776: AND
45777: IFFALSE 45971
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
45779: LD_ADDR_VAR 0 9
45783: PUSH
45784: LD_VAR 0 4
45788: PUSH
45789: LD_VAR 0 8
45793: PUSH
45794: LD_VAR 0 7
45798: UNION
45799: PUSH
45800: LD_VAR 0 6
45804: UNION
45805: DIFF
45806: PPUSH
45807: LD_INT 2
45809: PPUSH
45810: CALL 104876 0 2
45814: ST_TO_ADDR
// p := [ ] ;
45815: LD_ADDR_VAR 0 11
45819: PUSH
45820: EMPTY
45821: ST_TO_ADDR
// if sort then
45822: LD_VAR 0 9
45826: IFFALSE 45942
// for i = 1 to 6 - eng do
45828: LD_ADDR_VAR 0 3
45832: PUSH
45833: DOUBLE
45834: LD_INT 1
45836: DEC
45837: ST_TO_ADDR
45838: LD_INT 6
45840: PUSH
45841: LD_VAR 0 6
45845: MINUS
45846: PUSH
45847: FOR_TO
45848: IFFALSE 45940
// begin if i = sort then
45850: LD_VAR 0 3
45854: PUSH
45855: LD_VAR 0 9
45859: EQUAL
45860: IFFALSE 45864
// break ;
45862: GO 45940
// if GetClass ( i ) = 2 then
45864: LD_VAR 0 3
45868: PPUSH
45869: CALL_OW 257
45873: PUSH
45874: LD_INT 2
45876: EQUAL
45877: IFFALSE 45881
// continue ;
45879: GO 45847
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45881: LD_ADDR_VAR 0 11
45885: PUSH
45886: LD_VAR 0 11
45890: PPUSH
45891: LD_VAR 0 11
45895: PUSH
45896: LD_INT 1
45898: PLUS
45899: PPUSH
45900: LD_VAR 0 9
45904: PUSH
45905: LD_VAR 0 3
45909: ARRAY
45910: PPUSH
45911: CALL_OW 2
45915: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45916: LD_ADDR_VAR 0 4
45920: PUSH
45921: LD_VAR 0 4
45925: PUSH
45926: LD_VAR 0 9
45930: PUSH
45931: LD_VAR 0 3
45935: ARRAY
45936: DIFF
45937: ST_TO_ADDR
// end ;
45938: GO 45847
45940: POP
45941: POP
// if p then
45942: LD_VAR 0 11
45946: IFFALSE 45971
// result := Replace ( result , 2 , p ) ;
45948: LD_ADDR_VAR 0 2
45952: PUSH
45953: LD_VAR 0 2
45957: PPUSH
45958: LD_INT 2
45960: PPUSH
45961: LD_VAR 0 11
45965: PPUSH
45966: CALL_OW 1
45970: ST_TO_ADDR
// end ; exit ;
45971: GO 46695
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
45973: LD_EXP 128
45977: PUSH
45978: LD_EXP 127
45982: PUSH
45983: LD_VAR 0 1
45987: ARRAY
45988: ARRAY
45989: NOT
45990: PUSH
45991: LD_EXP 101
45995: PUSH
45996: LD_VAR 0 1
46000: ARRAY
46001: PPUSH
46002: LD_INT 30
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PPUSH
46012: CALL_OW 72
46016: AND
46017: PUSH
46018: LD_EXP 106
46022: PUSH
46023: LD_VAR 0 1
46027: ARRAY
46028: NOT
46029: AND
46030: IFFALSE 46695
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
46032: LD_ADDR_EXP 143
46036: PUSH
46037: LD_EXP 143
46041: PPUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: LD_INT 6
46049: PPUSH
46050: CALL_OW 1
46054: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46055: LD_ADDR_VAR 0 2
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// if sci >= 1 then
46078: LD_VAR 0 8
46082: PUSH
46083: LD_INT 1
46085: GREATEREQUAL
46086: IFFALSE 46108
// tmp := tmp diff sci [ 1 ] ;
46088: LD_ADDR_VAR 0 4
46092: PUSH
46093: LD_VAR 0 4
46097: PUSH
46098: LD_VAR 0 8
46102: PUSH
46103: LD_INT 1
46105: ARRAY
46106: DIFF
46107: ST_TO_ADDR
// if tmp and not sci then
46108: LD_VAR 0 4
46112: PUSH
46113: LD_VAR 0 8
46117: NOT
46118: AND
46119: IFFALSE 46188
// begin sort := SortBySkill ( tmp , 4 ) ;
46121: LD_ADDR_VAR 0 9
46125: PUSH
46126: LD_VAR 0 4
46130: PPUSH
46131: LD_INT 4
46133: PPUSH
46134: CALL 104876 0 2
46138: ST_TO_ADDR
// if sort then
46139: LD_VAR 0 9
46143: IFFALSE 46159
// p := sort [ 1 ] ;
46145: LD_ADDR_VAR 0 11
46149: PUSH
46150: LD_VAR 0 9
46154: PUSH
46155: LD_INT 1
46157: ARRAY
46158: ST_TO_ADDR
// if p then
46159: LD_VAR 0 11
46163: IFFALSE 46188
// result := Replace ( result , 4 , p ) ;
46165: LD_ADDR_VAR 0 2
46169: PUSH
46170: LD_VAR 0 2
46174: PPUSH
46175: LD_INT 4
46177: PPUSH
46178: LD_VAR 0 11
46182: PPUSH
46183: CALL_OW 1
46187: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
46188: LD_ADDR_VAR 0 4
46192: PUSH
46193: LD_VAR 0 4
46197: PUSH
46198: LD_VAR 0 7
46202: DIFF
46203: ST_TO_ADDR
// if tmp and mech < 6 then
46204: LD_VAR 0 4
46208: PUSH
46209: LD_VAR 0 7
46213: PUSH
46214: LD_INT 6
46216: LESS
46217: AND
46218: IFFALSE 46400
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
46220: LD_ADDR_VAR 0 9
46224: PUSH
46225: LD_VAR 0 4
46229: PUSH
46230: LD_VAR 0 7
46234: DIFF
46235: PPUSH
46236: LD_INT 3
46238: PPUSH
46239: CALL 104876 0 2
46243: ST_TO_ADDR
// p := [ ] ;
46244: LD_ADDR_VAR 0 11
46248: PUSH
46249: EMPTY
46250: ST_TO_ADDR
// if sort then
46251: LD_VAR 0 9
46255: IFFALSE 46371
// for i = 1 to 6 - mech do
46257: LD_ADDR_VAR 0 3
46261: PUSH
46262: DOUBLE
46263: LD_INT 1
46265: DEC
46266: ST_TO_ADDR
46267: LD_INT 6
46269: PUSH
46270: LD_VAR 0 7
46274: MINUS
46275: PUSH
46276: FOR_TO
46277: IFFALSE 46369
// begin if i = sort then
46279: LD_VAR 0 3
46283: PUSH
46284: LD_VAR 0 9
46288: EQUAL
46289: IFFALSE 46293
// break ;
46291: GO 46369
// if GetClass ( i ) = 3 then
46293: LD_VAR 0 3
46297: PPUSH
46298: CALL_OW 257
46302: PUSH
46303: LD_INT 3
46305: EQUAL
46306: IFFALSE 46310
// continue ;
46308: GO 46276
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46310: LD_ADDR_VAR 0 11
46314: PUSH
46315: LD_VAR 0 11
46319: PPUSH
46320: LD_VAR 0 11
46324: PUSH
46325: LD_INT 1
46327: PLUS
46328: PPUSH
46329: LD_VAR 0 9
46333: PUSH
46334: LD_VAR 0 3
46338: ARRAY
46339: PPUSH
46340: CALL_OW 2
46344: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46345: LD_ADDR_VAR 0 4
46349: PUSH
46350: LD_VAR 0 4
46354: PUSH
46355: LD_VAR 0 9
46359: PUSH
46360: LD_VAR 0 3
46364: ARRAY
46365: DIFF
46366: ST_TO_ADDR
// end ;
46367: GO 46276
46369: POP
46370: POP
// if p then
46371: LD_VAR 0 11
46375: IFFALSE 46400
// result := Replace ( result , 3 , p ) ;
46377: LD_ADDR_VAR 0 2
46381: PUSH
46382: LD_VAR 0 2
46386: PPUSH
46387: LD_INT 3
46389: PPUSH
46390: LD_VAR 0 11
46394: PPUSH
46395: CALL_OW 1
46399: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
46400: LD_ADDR_VAR 0 4
46404: PUSH
46405: LD_VAR 0 4
46409: PUSH
46410: LD_VAR 0 6
46414: DIFF
46415: ST_TO_ADDR
// if tmp and eng < 4 then
46416: LD_VAR 0 4
46420: PUSH
46421: LD_VAR 0 6
46425: PUSH
46426: LD_INT 4
46428: LESS
46429: AND
46430: IFFALSE 46620
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
46432: LD_ADDR_VAR 0 9
46436: PUSH
46437: LD_VAR 0 4
46441: PUSH
46442: LD_VAR 0 7
46446: PUSH
46447: LD_VAR 0 6
46451: UNION
46452: DIFF
46453: PPUSH
46454: LD_INT 2
46456: PPUSH
46457: CALL 104876 0 2
46461: ST_TO_ADDR
// p := [ ] ;
46462: LD_ADDR_VAR 0 11
46466: PUSH
46467: EMPTY
46468: ST_TO_ADDR
// if sort then
46469: LD_VAR 0 9
46473: IFFALSE 46589
// for i = 1 to 4 - eng do
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: DOUBLE
46481: LD_INT 1
46483: DEC
46484: ST_TO_ADDR
46485: LD_INT 4
46487: PUSH
46488: LD_VAR 0 6
46492: MINUS
46493: PUSH
46494: FOR_TO
46495: IFFALSE 46587
// begin if i = sort then
46497: LD_VAR 0 3
46501: PUSH
46502: LD_VAR 0 9
46506: EQUAL
46507: IFFALSE 46511
// break ;
46509: GO 46587
// if GetClass ( i ) = 2 then
46511: LD_VAR 0 3
46515: PPUSH
46516: CALL_OW 257
46520: PUSH
46521: LD_INT 2
46523: EQUAL
46524: IFFALSE 46528
// continue ;
46526: GO 46494
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46528: LD_ADDR_VAR 0 11
46532: PUSH
46533: LD_VAR 0 11
46537: PPUSH
46538: LD_VAR 0 11
46542: PUSH
46543: LD_INT 1
46545: PLUS
46546: PPUSH
46547: LD_VAR 0 9
46551: PUSH
46552: LD_VAR 0 3
46556: ARRAY
46557: PPUSH
46558: CALL_OW 2
46562: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46563: LD_ADDR_VAR 0 4
46567: PUSH
46568: LD_VAR 0 4
46572: PUSH
46573: LD_VAR 0 9
46577: PUSH
46578: LD_VAR 0 3
46582: ARRAY
46583: DIFF
46584: ST_TO_ADDR
// end ;
46585: GO 46494
46587: POP
46588: POP
// if p then
46589: LD_VAR 0 11
46593: IFFALSE 46618
// result := Replace ( result , 2 , p ) ;
46595: LD_ADDR_VAR 0 2
46599: PUSH
46600: LD_VAR 0 2
46604: PPUSH
46605: LD_INT 2
46607: PPUSH
46608: LD_VAR 0 11
46612: PPUSH
46613: CALL_OW 1
46617: ST_TO_ADDR
// end else
46618: GO 46664
// for i = eng downto 5 do
46620: LD_ADDR_VAR 0 3
46624: PUSH
46625: DOUBLE
46626: LD_VAR 0 6
46630: INC
46631: ST_TO_ADDR
46632: LD_INT 5
46634: PUSH
46635: FOR_DOWNTO
46636: IFFALSE 46662
// tmp := tmp union eng [ i ] ;
46638: LD_ADDR_VAR 0 4
46642: PUSH
46643: LD_VAR 0 4
46647: PUSH
46648: LD_VAR 0 6
46652: PUSH
46653: LD_VAR 0 3
46657: ARRAY
46658: UNION
46659: ST_TO_ADDR
46660: GO 46635
46662: POP
46663: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
46664: LD_ADDR_VAR 0 2
46668: PUSH
46669: LD_VAR 0 2
46673: PPUSH
46674: LD_INT 1
46676: PPUSH
46677: LD_VAR 0 4
46681: PUSH
46682: LD_VAR 0 5
46686: DIFF
46687: PPUSH
46688: CALL_OW 1
46692: ST_TO_ADDR
// exit ;
46693: GO 46695
// end ; end ;
46695: LD_VAR 0 2
46699: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
46700: LD_INT 0
46702: PPUSH
46703: PPUSH
46704: PPUSH
// if not mc_bases then
46705: LD_EXP 101
46709: NOT
46710: IFFALSE 46714
// exit ;
46712: GO 46856
// for i = 1 to mc_bases do
46714: LD_ADDR_VAR 0 2
46718: PUSH
46719: DOUBLE
46720: LD_INT 1
46722: DEC
46723: ST_TO_ADDR
46724: LD_EXP 101
46728: PUSH
46729: FOR_TO
46730: IFFALSE 46847
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
46732: LD_ADDR_VAR 0 3
46736: PUSH
46737: LD_EXP 101
46741: PUSH
46742: LD_VAR 0 2
46746: ARRAY
46747: PPUSH
46748: LD_INT 21
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 30
46766: PUSH
46767: LD_INT 29
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 30
46776: PUSH
46777: LD_INT 30
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 24
46798: PUSH
46799: LD_INT 1000
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: PPUSH
46815: CALL_OW 72
46819: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
46820: LD_ADDR_EXP 102
46824: PUSH
46825: LD_EXP 102
46829: PPUSH
46830: LD_VAR 0 2
46834: PPUSH
46835: LD_VAR 0 3
46839: PPUSH
46840: CALL_OW 1
46844: ST_TO_ADDR
// end ;
46845: GO 46729
46847: POP
46848: POP
// RaiseSailEvent ( 101 ) ;
46849: LD_INT 101
46851: PPUSH
46852: CALL_OW 427
// end ;
46856: LD_VAR 0 1
46860: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
46861: LD_INT 0
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
// if not mc_bases then
46870: LD_EXP 101
46874: NOT
46875: IFFALSE 46879
// exit ;
46877: GO 47441
// for i = 1 to mc_bases do
46879: LD_ADDR_VAR 0 2
46883: PUSH
46884: DOUBLE
46885: LD_INT 1
46887: DEC
46888: ST_TO_ADDR
46889: LD_EXP 101
46893: PUSH
46894: FOR_TO
46895: IFFALSE 47432
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
46897: LD_ADDR_VAR 0 5
46901: PUSH
46902: LD_EXP 101
46906: PUSH
46907: LD_VAR 0 2
46911: ARRAY
46912: PUSH
46913: LD_EXP 130
46917: PUSH
46918: LD_VAR 0 2
46922: ARRAY
46923: UNION
46924: PPUSH
46925: LD_INT 21
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 54
46943: PUSH
46944: EMPTY
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 24
46956: PUSH
46957: LD_INT 1000
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PPUSH
46977: CALL_OW 72
46981: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
46982: LD_ADDR_VAR 0 6
46986: PUSH
46987: LD_EXP 101
46991: PUSH
46992: LD_VAR 0 2
46996: ARRAY
46997: PPUSH
46998: LD_INT 21
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 54
47016: PUSH
47017: EMPTY
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 24
47029: PUSH
47030: LD_INT 250
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PPUSH
47050: CALL_OW 72
47054: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47055: LD_ADDR_VAR 0 7
47059: PUSH
47060: LD_VAR 0 5
47064: PUSH
47065: LD_VAR 0 6
47069: DIFF
47070: ST_TO_ADDR
// if not need_heal_1 then
47071: LD_VAR 0 6
47075: NOT
47076: IFFALSE 47109
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
47078: LD_ADDR_EXP 104
47082: PUSH
47083: LD_EXP 104
47087: PPUSH
47088: LD_VAR 0 2
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PPUSH
47100: EMPTY
47101: PPUSH
47102: CALL 74020 0 3
47106: ST_TO_ADDR
47107: GO 47179
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
47109: LD_ADDR_EXP 104
47113: PUSH
47114: LD_EXP 104
47118: PPUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PPUSH
47131: LD_EXP 104
47135: PUSH
47136: LD_VAR 0 2
47140: ARRAY
47141: PUSH
47142: LD_INT 1
47144: ARRAY
47145: PPUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 24
47151: PUSH
47152: LD_INT 1000
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PPUSH
47163: CALL_OW 72
47167: PUSH
47168: LD_VAR 0 6
47172: UNION
47173: PPUSH
47174: CALL 74020 0 3
47178: ST_TO_ADDR
// if not need_heal_2 then
47179: LD_VAR 0 7
47183: NOT
47184: IFFALSE 47217
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
47186: LD_ADDR_EXP 104
47190: PUSH
47191: LD_EXP 104
47195: PPUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PPUSH
47208: EMPTY
47209: PPUSH
47210: CALL 74020 0 3
47214: ST_TO_ADDR
47215: GO 47249
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
47217: LD_ADDR_EXP 104
47221: PUSH
47222: LD_EXP 104
47226: PPUSH
47227: LD_VAR 0 2
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PPUSH
47239: LD_VAR 0 7
47243: PPUSH
47244: CALL 74020 0 3
47248: ST_TO_ADDR
// if need_heal_2 then
47249: LD_VAR 0 7
47253: IFFALSE 47414
// for j in need_heal_2 do
47255: LD_ADDR_VAR 0 3
47259: PUSH
47260: LD_VAR 0 7
47264: PUSH
47265: FOR_IN
47266: IFFALSE 47412
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47268: LD_ADDR_VAR 0 5
47272: PUSH
47273: LD_EXP 101
47277: PUSH
47278: LD_VAR 0 2
47282: ARRAY
47283: PPUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 30
47289: PUSH
47290: LD_INT 6
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 30
47299: PUSH
47300: LD_INT 7
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 30
47309: PUSH
47310: LD_INT 8
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 30
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 30
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: PPUSH
47345: CALL_OW 72
47349: ST_TO_ADDR
// if tmp then
47350: LD_VAR 0 5
47354: IFFALSE 47410
// begin k := NearestUnitToUnit ( tmp , j ) ;
47356: LD_ADDR_VAR 0 4
47360: PUSH
47361: LD_VAR 0 5
47365: PPUSH
47366: LD_VAR 0 3
47370: PPUSH
47371: CALL_OW 74
47375: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
47376: LD_VAR 0 3
47380: PPUSH
47381: LD_VAR 0 4
47385: PPUSH
47386: CALL_OW 296
47390: PUSH
47391: LD_INT 5
47393: GREATER
47394: IFFALSE 47410
// ComMoveToNearbyEntrance ( j , k ) ;
47396: LD_VAR 0 3
47400: PPUSH
47401: LD_VAR 0 4
47405: PPUSH
47406: CALL 107236 0 2
// end ; end ;
47410: GO 47265
47412: POP
47413: POP
// if not need_heal_1 and not need_heal_2 then
47414: LD_VAR 0 6
47418: NOT
47419: PUSH
47420: LD_VAR 0 7
47424: NOT
47425: AND
47426: IFFALSE 47430
// continue ;
47428: GO 46894
// end ;
47430: GO 46894
47432: POP
47433: POP
// RaiseSailEvent ( 102 ) ;
47434: LD_INT 102
47436: PPUSH
47437: CALL_OW 427
// end ;
47441: LD_VAR 0 1
47445: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
47446: LD_INT 0
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
// if not mc_bases then
47456: LD_EXP 101
47460: NOT
47461: IFFALSE 47465
// exit ;
47463: GO 48376
// for i = 1 to mc_bases do
47465: LD_ADDR_VAR 0 2
47469: PUSH
47470: DOUBLE
47471: LD_INT 1
47473: DEC
47474: ST_TO_ADDR
47475: LD_EXP 101
47479: PUSH
47480: FOR_TO
47481: IFFALSE 48374
// begin if not mc_building_need_repair [ i ] then
47483: LD_EXP 102
47487: PUSH
47488: LD_VAR 0 2
47492: ARRAY
47493: NOT
47494: IFFALSE 47679
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
47496: LD_ADDR_VAR 0 6
47500: PUSH
47501: LD_EXP 120
47505: PUSH
47506: LD_VAR 0 2
47510: ARRAY
47511: PPUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 24
47517: PUSH
47518: LD_INT 1000
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 34
47534: PUSH
47535: LD_INT 13
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 34
47544: PUSH
47545: LD_INT 52
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 34
47554: PUSH
47555: LD_INT 88
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PPUSH
47572: CALL_OW 72
47576: ST_TO_ADDR
// if cranes then
47577: LD_VAR 0 6
47581: IFFALSE 47643
// for j in cranes do
47583: LD_ADDR_VAR 0 3
47587: PUSH
47588: LD_VAR 0 6
47592: PUSH
47593: FOR_IN
47594: IFFALSE 47641
// if not IsInArea ( j , mc_parking [ i ] ) then
47596: LD_VAR 0 3
47600: PPUSH
47601: LD_EXP 125
47605: PUSH
47606: LD_VAR 0 2
47610: ARRAY
47611: PPUSH
47612: CALL_OW 308
47616: NOT
47617: IFFALSE 47639
// ComMoveToArea ( j , mc_parking [ i ] ) ;
47619: LD_VAR 0 3
47623: PPUSH
47624: LD_EXP 125
47628: PUSH
47629: LD_VAR 0 2
47633: ARRAY
47634: PPUSH
47635: CALL_OW 113
47639: GO 47593
47641: POP
47642: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
47643: LD_ADDR_EXP 103
47647: PUSH
47648: LD_EXP 103
47652: PPUSH
47653: LD_VAR 0 2
47657: PPUSH
47658: EMPTY
47659: PPUSH
47660: CALL_OW 1
47664: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
47665: LD_VAR 0 2
47669: PPUSH
47670: LD_INT 101
47672: PPUSH
47673: CALL 42519 0 2
// continue ;
47677: GO 47480
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
47679: LD_ADDR_EXP 107
47683: PUSH
47684: LD_EXP 107
47688: PPUSH
47689: LD_VAR 0 2
47693: PPUSH
47694: EMPTY
47695: PPUSH
47696: CALL_OW 1
47700: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47701: LD_VAR 0 2
47705: PPUSH
47706: LD_INT 103
47708: PPUSH
47709: CALL 42519 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
47713: LD_ADDR_VAR 0 5
47717: PUSH
47718: LD_EXP 101
47722: PUSH
47723: LD_VAR 0 2
47727: ARRAY
47728: PUSH
47729: LD_EXP 130
47733: PUSH
47734: LD_VAR 0 2
47738: ARRAY
47739: UNION
47740: PPUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 25
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 25
47756: PUSH
47757: LD_INT 16
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: PPUSH
47772: CALL_OW 72
47776: ST_TO_ADDR
// if mc_need_heal [ i ] then
47777: LD_EXP 104
47781: PUSH
47782: LD_VAR 0 2
47786: ARRAY
47787: IFFALSE 47831
// tmp := tmp diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
47789: LD_ADDR_VAR 0 5
47793: PUSH
47794: LD_VAR 0 5
47798: PUSH
47799: LD_EXP 104
47803: PUSH
47804: LD_VAR 0 2
47808: ARRAY
47809: PUSH
47810: LD_INT 1
47812: ARRAY
47813: PUSH
47814: LD_EXP 104
47818: PUSH
47819: LD_VAR 0 2
47823: ARRAY
47824: PUSH
47825: LD_INT 2
47827: ARRAY
47828: UNION
47829: DIFF
47830: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
47831: LD_ADDR_VAR 0 6
47835: PUSH
47836: LD_EXP 120
47840: PUSH
47841: LD_VAR 0 2
47845: ARRAY
47846: PPUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 34
47852: PUSH
47853: LD_INT 13
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 34
47862: PUSH
47863: LD_INT 52
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 34
47872: PUSH
47873: LD_INT 88
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: PPUSH
47886: CALL_OW 72
47890: ST_TO_ADDR
// if cranes then
47891: LD_VAR 0 6
47895: IFFALSE 48063
// begin for j in cranes do
47897: LD_ADDR_VAR 0 3
47901: PUSH
47902: LD_VAR 0 6
47906: PUSH
47907: FOR_IN
47908: IFFALSE 48061
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
47910: LD_VAR 0 3
47914: PPUSH
47915: CALL_OW 256
47919: PUSH
47920: LD_INT 1000
47922: EQUAL
47923: PUSH
47924: LD_VAR 0 3
47928: PPUSH
47929: CALL_OW 314
47933: NOT
47934: AND
47935: IFFALSE 48001
// begin to_repair := NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ;
47937: LD_ADDR_VAR 0 8
47941: PUSH
47942: LD_EXP 102
47946: PUSH
47947: LD_VAR 0 2
47951: ARRAY
47952: PPUSH
47953: LD_VAR 0 3
47957: PPUSH
47958: CALL_OW 74
47962: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
47963: LD_VAR 0 8
47967: PPUSH
47968: LD_INT 16
47970: PPUSH
47971: CALL 76617 0 2
47975: PUSH
47976: LD_INT 4
47978: ARRAY
47979: PUSH
47980: LD_INT 10
47982: LESS
47983: IFFALSE 47999
// ComRepairBuilding ( j , to_repair ) ;
47985: LD_VAR 0 3
47989: PPUSH
47990: LD_VAR 0 8
47994: PPUSH
47995: CALL_OW 130
// end else
47999: GO 48059
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
48001: LD_VAR 0 3
48005: PPUSH
48006: CALL_OW 256
48010: PUSH
48011: LD_INT 500
48013: LESS
48014: PUSH
48015: LD_VAR 0 3
48019: PPUSH
48020: LD_EXP 125
48024: PUSH
48025: LD_VAR 0 2
48029: ARRAY
48030: PPUSH
48031: CALL_OW 308
48035: NOT
48036: AND
48037: IFFALSE 48059
// ComMoveToArea ( j , mc_parking [ i ] ) ;
48039: LD_VAR 0 3
48043: PPUSH
48044: LD_EXP 125
48048: PUSH
48049: LD_VAR 0 2
48053: ARRAY
48054: PPUSH
48055: CALL_OW 113
// end ;
48059: GO 47907
48061: POP
48062: POP
// end ; if tmp > 3 then
48063: LD_VAR 0 5
48067: PUSH
48068: LD_INT 3
48070: GREATER
48071: IFFALSE 48091
// tmp := ShrinkArray ( tmp , 4 ) ;
48073: LD_ADDR_VAR 0 5
48077: PUSH
48078: LD_VAR 0 5
48082: PPUSH
48083: LD_INT 4
48085: PPUSH
48086: CALL 106674 0 2
48090: ST_TO_ADDR
// if not tmp then
48091: LD_VAR 0 5
48095: NOT
48096: IFFALSE 48100
// continue ;
48098: GO 47480
// for j in tmp do
48100: LD_ADDR_VAR 0 3
48104: PUSH
48105: LD_VAR 0 5
48109: PUSH
48110: FOR_IN
48111: IFFALSE 48370
// begin if IsInUnit ( j ) then
48113: LD_VAR 0 3
48117: PPUSH
48118: CALL_OW 310
48122: IFFALSE 48133
// ComExitBuilding ( j ) ;
48124: LD_VAR 0 3
48128: PPUSH
48129: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48133: LD_VAR 0 3
48137: PUSH
48138: LD_EXP 103
48142: PUSH
48143: LD_VAR 0 2
48147: ARRAY
48148: IN
48149: NOT
48150: IFFALSE 48208
// begin SetTag ( j , 101 ) ;
48152: LD_VAR 0 3
48156: PPUSH
48157: LD_INT 101
48159: PPUSH
48160: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48164: LD_ADDR_EXP 103
48168: PUSH
48169: LD_EXP 103
48173: PPUSH
48174: LD_VAR 0 2
48178: PUSH
48179: LD_EXP 103
48183: PUSH
48184: LD_VAR 0 2
48188: ARRAY
48189: PUSH
48190: LD_INT 1
48192: PLUS
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PPUSH
48198: LD_VAR 0 3
48202: PPUSH
48203: CALL 74020 0 3
48207: ST_TO_ADDR
// end ; wait ( 1 ) ;
48208: LD_INT 1
48210: PPUSH
48211: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
48215: LD_ADDR_VAR 0 7
48219: PUSH
48220: LD_EXP 102
48224: PUSH
48225: LD_VAR 0 2
48229: ARRAY
48230: ST_TO_ADDR
// if mc_scan [ i ] then
48231: LD_EXP 124
48235: PUSH
48236: LD_VAR 0 2
48240: ARRAY
48241: IFFALSE 48303
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
48243: LD_ADDR_VAR 0 7
48247: PUSH
48248: LD_EXP 102
48252: PUSH
48253: LD_VAR 0 2
48257: ARRAY
48258: PPUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 30
48264: PUSH
48265: LD_INT 32
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 30
48274: PUSH
48275: LD_INT 33
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 30
48284: PUSH
48285: LD_INT 31
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: PPUSH
48298: CALL_OW 72
48302: ST_TO_ADDR
// if not to_repair_tmp then
48303: LD_VAR 0 7
48307: NOT
48308: IFFALSE 48312
// continue ;
48310: GO 48110
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
48312: LD_ADDR_VAR 0 8
48316: PUSH
48317: LD_VAR 0 7
48321: PPUSH
48322: LD_VAR 0 3
48326: PPUSH
48327: CALL_OW 74
48331: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 14 then
48332: LD_VAR 0 8
48336: PPUSH
48337: LD_INT 16
48339: PPUSH
48340: CALL 76617 0 2
48344: PUSH
48345: LD_INT 4
48347: ARRAY
48348: PUSH
48349: LD_INT 14
48351: LESS
48352: IFFALSE 48368
// ComRepairBuilding ( j , to_repair ) ;
48354: LD_VAR 0 3
48358: PPUSH
48359: LD_VAR 0 8
48363: PPUSH
48364: CALL_OW 130
// end ;
48368: GO 48110
48370: POP
48371: POP
// end ;
48372: GO 47480
48374: POP
48375: POP
// end ;
48376: LD_VAR 0 1
48380: RET
// export function MC_Heal ; var i , j , tmp ; begin
48381: LD_INT 0
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
// if not mc_bases then
48387: LD_EXP 101
48391: NOT
48392: IFFALSE 48396
// exit ;
48394: GO 48798
// for i = 1 to mc_bases do
48396: LD_ADDR_VAR 0 2
48400: PUSH
48401: DOUBLE
48402: LD_INT 1
48404: DEC
48405: ST_TO_ADDR
48406: LD_EXP 101
48410: PUSH
48411: FOR_TO
48412: IFFALSE 48796
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48414: LD_EXP 104
48418: PUSH
48419: LD_VAR 0 2
48423: ARRAY
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: NOT
48429: PUSH
48430: LD_EXP 104
48434: PUSH
48435: LD_VAR 0 2
48439: ARRAY
48440: PUSH
48441: LD_INT 2
48443: ARRAY
48444: NOT
48445: AND
48446: IFFALSE 48484
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48448: LD_ADDR_EXP 105
48452: PUSH
48453: LD_EXP 105
48457: PPUSH
48458: LD_VAR 0 2
48462: PPUSH
48463: EMPTY
48464: PPUSH
48465: CALL_OW 1
48469: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
48470: LD_VAR 0 2
48474: PPUSH
48475: LD_INT 102
48477: PPUSH
48478: CALL 42519 0 2
// continue ;
48482: GO 48411
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
48484: LD_ADDR_VAR 0 4
48488: PUSH
48489: LD_EXP 101
48493: PUSH
48494: LD_VAR 0 2
48498: ARRAY
48499: PPUSH
48500: LD_INT 25
48502: PUSH
48503: LD_INT 4
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PPUSH
48510: CALL_OW 72
48514: ST_TO_ADDR
// if not tmp then
48515: LD_VAR 0 4
48519: NOT
48520: IFFALSE 48524
// continue ;
48522: GO 48411
// if mc_taming [ i ] then
48524: LD_EXP 132
48528: PUSH
48529: LD_VAR 0 2
48533: ARRAY
48534: IFFALSE 48558
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
48536: LD_ADDR_EXP 132
48540: PUSH
48541: LD_EXP 132
48545: PPUSH
48546: LD_VAR 0 2
48550: PPUSH
48551: EMPTY
48552: PPUSH
48553: CALL_OW 1
48557: ST_TO_ADDR
// for j in tmp do
48558: LD_ADDR_VAR 0 3
48562: PUSH
48563: LD_VAR 0 4
48567: PUSH
48568: FOR_IN
48569: IFFALSE 48792
// begin if IsInUnit ( j ) then
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 310
48580: IFFALSE 48591
// ComExitBuilding ( j ) ;
48582: LD_VAR 0 3
48586: PPUSH
48587: CALL_OW 122
// if not j in mc_healers [ i ] then
48591: LD_VAR 0 3
48595: PUSH
48596: LD_EXP 105
48600: PUSH
48601: LD_VAR 0 2
48605: ARRAY
48606: IN
48607: NOT
48608: IFFALSE 48654
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
48610: LD_ADDR_EXP 105
48614: PUSH
48615: LD_EXP 105
48619: PPUSH
48620: LD_VAR 0 2
48624: PUSH
48625: LD_EXP 105
48629: PUSH
48630: LD_VAR 0 2
48634: ARRAY
48635: PUSH
48636: LD_INT 1
48638: PLUS
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PPUSH
48644: LD_VAR 0 3
48648: PPUSH
48649: CALL 74020 0 3
48653: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
48654: LD_VAR 0 3
48658: PPUSH
48659: CALL_OW 110
48663: PUSH
48664: LD_INT 102
48666: NONEQUAL
48667: IFFALSE 48681
// SetTag ( j , 102 ) ;
48669: LD_VAR 0 3
48673: PPUSH
48674: LD_INT 102
48676: PPUSH
48677: CALL_OW 109
// Wait ( 3 ) ;
48681: LD_INT 3
48683: PPUSH
48684: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48688: LD_EXP 104
48692: PUSH
48693: LD_VAR 0 2
48697: ARRAY
48698: PUSH
48699: LD_INT 1
48701: ARRAY
48702: IFFALSE 48734
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48704: LD_VAR 0 3
48708: PPUSH
48709: LD_EXP 104
48713: PUSH
48714: LD_VAR 0 2
48718: ARRAY
48719: PUSH
48720: LD_INT 1
48722: ARRAY
48723: PUSH
48724: LD_INT 1
48726: ARRAY
48727: PPUSH
48728: CALL_OW 128
48732: GO 48790
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
48734: LD_VAR 0 3
48738: PPUSH
48739: CALL_OW 314
48743: NOT
48744: PUSH
48745: LD_EXP 104
48749: PUSH
48750: LD_VAR 0 2
48754: ARRAY
48755: PUSH
48756: LD_INT 2
48758: ARRAY
48759: AND
48760: IFFALSE 48790
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
48762: LD_VAR 0 3
48766: PPUSH
48767: LD_EXP 104
48771: PUSH
48772: LD_VAR 0 2
48776: ARRAY
48777: PUSH
48778: LD_INT 2
48780: ARRAY
48781: PUSH
48782: LD_INT 1
48784: ARRAY
48785: PPUSH
48786: CALL_OW 128
// end ;
48790: GO 48568
48792: POP
48793: POP
// end ;
48794: GO 48411
48796: POP
48797: POP
// end ;
48798: LD_VAR 0 1
48802: RET
// export function MC_Build ( ) ; var i , j , k , tmp , depot ; begin
48803: LD_INT 0
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
48810: PPUSH
// if not mc_bases then
48811: LD_EXP 101
48815: NOT
48816: IFFALSE 48820
// exit ;
48818: GO 49983
// for i = 1 to mc_bases do
48820: LD_ADDR_VAR 0 2
48824: PUSH
48825: DOUBLE
48826: LD_INT 1
48828: DEC
48829: ST_TO_ADDR
48830: LD_EXP 101
48834: PUSH
48835: FOR_TO
48836: IFFALSE 49981
// begin if mc_scan [ i ] then
48838: LD_EXP 124
48842: PUSH
48843: LD_VAR 0 2
48847: ARRAY
48848: IFFALSE 48852
// continue ;
48850: GO 48835
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
48852: LD_EXP 106
48856: PUSH
48857: LD_VAR 0 2
48861: ARRAY
48862: NOT
48863: PUSH
48864: LD_EXP 108
48868: PUSH
48869: LD_VAR 0 2
48873: ARRAY
48874: NOT
48875: AND
48876: PUSH
48877: LD_EXP 107
48881: PUSH
48882: LD_VAR 0 2
48886: ARRAY
48887: AND
48888: IFFALSE 48926
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
48890: LD_ADDR_EXP 107
48894: PUSH
48895: LD_EXP 107
48899: PPUSH
48900: LD_VAR 0 2
48904: PPUSH
48905: EMPTY
48906: PPUSH
48907: CALL_OW 1
48911: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48912: LD_VAR 0 2
48916: PPUSH
48917: LD_INT 103
48919: PPUSH
48920: CALL 42519 0 2
// continue ;
48924: GO 48835
// end ; if mc_construct_list [ i ] then
48926: LD_EXP 108
48930: PUSH
48931: LD_VAR 0 2
48935: ARRAY
48936: IFFALSE 49156
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
48938: LD_ADDR_VAR 0 5
48942: PUSH
48943: LD_EXP 101
48947: PUSH
48948: LD_VAR 0 2
48952: ARRAY
48953: PPUSH
48954: LD_INT 25
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PPUSH
48964: CALL_OW 72
48968: PUSH
48969: LD_EXP 103
48973: PUSH
48974: LD_VAR 0 2
48978: ARRAY
48979: DIFF
48980: ST_TO_ADDR
// if not tmp then
48981: LD_VAR 0 5
48985: NOT
48986: IFFALSE 48990
// continue ;
48988: GO 48835
// for j in tmp do
48990: LD_ADDR_VAR 0 3
48994: PUSH
48995: LD_VAR 0 5
48999: PUSH
49000: FOR_IN
49001: IFFALSE 49152
// begin if not mc_builders [ i ] then
49003: LD_EXP 107
49007: PUSH
49008: LD_VAR 0 2
49012: ARRAY
49013: NOT
49014: IFFALSE 49072
// begin SetTag ( j , 103 ) ;
49016: LD_VAR 0 3
49020: PPUSH
49021: LD_INT 103
49023: PPUSH
49024: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49028: LD_ADDR_EXP 107
49032: PUSH
49033: LD_EXP 107
49037: PPUSH
49038: LD_VAR 0 2
49042: PUSH
49043: LD_EXP 107
49047: PUSH
49048: LD_VAR 0 2
49052: ARRAY
49053: PUSH
49054: LD_INT 1
49056: PLUS
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PPUSH
49062: LD_VAR 0 3
49066: PPUSH
49067: CALL 74020 0 3
49071: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49072: LD_VAR 0 3
49076: PPUSH
49077: CALL_OW 310
49081: IFFALSE 49092
// ComExitBuilding ( j ) ;
49083: LD_VAR 0 3
49087: PPUSH
49088: CALL_OW 122
// wait ( 3 ) ;
49092: LD_INT 3
49094: PPUSH
49095: CALL_OW 67
// if not mc_construct_list [ i ] then
49099: LD_EXP 108
49103: PUSH
49104: LD_VAR 0 2
49108: ARRAY
49109: NOT
49110: IFFALSE 49114
// break ;
49112: GO 49152
// if not HasTask ( j ) then
49114: LD_VAR 0 3
49118: PPUSH
49119: CALL_OW 314
49123: NOT
49124: IFFALSE 49150
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49126: LD_VAR 0 3
49130: PPUSH
49131: LD_EXP 108
49135: PUSH
49136: LD_VAR 0 2
49140: ARRAY
49141: PUSH
49142: LD_INT 1
49144: ARRAY
49145: PPUSH
49146: CALL 76890 0 2
// end ;
49150: GO 49000
49152: POP
49153: POP
// end else
49154: GO 49979
// if mc_build_list [ i ] then
49156: LD_EXP 106
49160: PUSH
49161: LD_VAR 0 2
49165: ARRAY
49166: IFFALSE 49979
// begin if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
49168: LD_EXP 106
49172: PUSH
49173: LD_VAR 0 2
49177: ARRAY
49178: PUSH
49179: LD_INT 1
49181: ARRAY
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: PPUSH
49187: CALL 76714 0 1
49191: PUSH
49192: LD_EXP 101
49196: PUSH
49197: LD_VAR 0 2
49201: ARRAY
49202: PPUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 30
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 30
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: PPUSH
49231: CALL_OW 72
49235: NOT
49236: AND
49237: IFFALSE 49342
// begin for j = 1 to mc_build_list [ i ] do
49239: LD_ADDR_VAR 0 3
49243: PUSH
49244: DOUBLE
49245: LD_INT 1
49247: DEC
49248: ST_TO_ADDR
49249: LD_EXP 106
49253: PUSH
49254: LD_VAR 0 2
49258: ARRAY
49259: PUSH
49260: FOR_TO
49261: IFFALSE 49340
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
49263: LD_EXP 106
49267: PUSH
49268: LD_VAR 0 2
49272: ARRAY
49273: PUSH
49274: LD_VAR 0 3
49278: ARRAY
49279: PUSH
49280: LD_INT 1
49282: ARRAY
49283: PUSH
49284: LD_INT 2
49286: EQUAL
49287: IFFALSE 49338
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
49289: LD_ADDR_EXP 106
49293: PUSH
49294: LD_EXP 106
49298: PPUSH
49299: LD_VAR 0 2
49303: PPUSH
49304: LD_EXP 106
49308: PUSH
49309: LD_VAR 0 2
49313: ARRAY
49314: PPUSH
49315: LD_VAR 0 3
49319: PPUSH
49320: LD_INT 1
49322: PPUSH
49323: LD_INT 0
49325: PPUSH
49326: CALL 73438 0 4
49330: PPUSH
49331: CALL_OW 1
49335: ST_TO_ADDR
// break ;
49336: GO 49340
// end ;
49338: GO 49260
49340: POP
49341: POP
// end ; depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49342: LD_ADDR_VAR 0 6
49346: PUSH
49347: LD_EXP 101
49351: PUSH
49352: LD_VAR 0 2
49356: ARRAY
49357: PPUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 30
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 30
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: PPUSH
49386: CALL_OW 72
49390: ST_TO_ADDR
// for k := 1 to depot do
49391: LD_ADDR_VAR 0 4
49395: PUSH
49396: DOUBLE
49397: LD_INT 1
49399: DEC
49400: ST_TO_ADDR
49401: LD_VAR 0 6
49405: PUSH
49406: FOR_TO
49407: IFFALSE 49977
// begin if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or CanBeBuilt ( depot [ k ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49409: LD_EXP 106
49413: PUSH
49414: LD_VAR 0 2
49418: ARRAY
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PUSH
49428: LD_INT 0
49430: EQUAL
49431: PUSH
49432: LD_VAR 0 6
49436: PUSH
49437: LD_VAR 0 4
49441: ARRAY
49442: PPUSH
49443: LD_EXP 106
49447: PUSH
49448: LD_VAR 0 2
49452: ARRAY
49453: PUSH
49454: LD_INT 1
49456: ARRAY
49457: PUSH
49458: LD_INT 1
49460: ARRAY
49461: PPUSH
49462: LD_EXP 106
49466: PUSH
49467: LD_VAR 0 2
49471: ARRAY
49472: PUSH
49473: LD_INT 1
49475: ARRAY
49476: PUSH
49477: LD_INT 2
49479: ARRAY
49480: PPUSH
49481: LD_EXP 106
49485: PUSH
49486: LD_VAR 0 2
49490: ARRAY
49491: PUSH
49492: LD_INT 1
49494: ARRAY
49495: PUSH
49496: LD_INT 3
49498: ARRAY
49499: PPUSH
49500: LD_EXP 106
49504: PUSH
49505: LD_VAR 0 2
49509: ARRAY
49510: PUSH
49511: LD_INT 1
49513: ARRAY
49514: PUSH
49515: LD_INT 4
49517: ARRAY
49518: PPUSH
49519: CALL 82126 0 5
49523: OR
49524: IFFALSE 49805
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49526: LD_ADDR_VAR 0 5
49530: PUSH
49531: LD_EXP 101
49535: PUSH
49536: LD_VAR 0 2
49540: ARRAY
49541: PPUSH
49542: LD_INT 25
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 72
49556: PUSH
49557: LD_EXP 103
49561: PUSH
49562: LD_VAR 0 2
49566: ARRAY
49567: DIFF
49568: ST_TO_ADDR
// if not tmp then
49569: LD_VAR 0 5
49573: NOT
49574: IFFALSE 49578
// continue ;
49576: GO 49406
// for j in tmp do
49578: LD_ADDR_VAR 0 3
49582: PUSH
49583: LD_VAR 0 5
49587: PUSH
49588: FOR_IN
49589: IFFALSE 49801
// begin if not mc_builders [ i ] then
49591: LD_EXP 107
49595: PUSH
49596: LD_VAR 0 2
49600: ARRAY
49601: NOT
49602: IFFALSE 49660
// begin SetTag ( j , 103 ) ;
49604: LD_VAR 0 3
49608: PPUSH
49609: LD_INT 103
49611: PPUSH
49612: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49616: LD_ADDR_EXP 107
49620: PUSH
49621: LD_EXP 107
49625: PPUSH
49626: LD_VAR 0 2
49630: PUSH
49631: LD_EXP 107
49635: PUSH
49636: LD_VAR 0 2
49640: ARRAY
49641: PUSH
49642: LD_INT 1
49644: PLUS
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PPUSH
49650: LD_VAR 0 3
49654: PPUSH
49655: CALL 74020 0 3
49659: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49660: LD_VAR 0 3
49664: PPUSH
49665: CALL_OW 310
49669: IFFALSE 49680
// ComExitBuilding ( j ) ;
49671: LD_VAR 0 3
49675: PPUSH
49676: CALL_OW 122
// wait ( 3 ) ;
49680: LD_INT 3
49682: PPUSH
49683: CALL_OW 67
// if not mc_build_list [ i ] then
49687: LD_EXP 106
49691: PUSH
49692: LD_VAR 0 2
49696: ARRAY
49697: NOT
49698: IFFALSE 49702
// break ;
49700: GO 49801
// if not HasTask ( j ) then
49702: LD_VAR 0 3
49706: PPUSH
49707: CALL_OW 314
49711: NOT
49712: IFFALSE 49799
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49714: LD_VAR 0 3
49718: PPUSH
49719: LD_EXP 106
49723: PUSH
49724: LD_VAR 0 2
49728: ARRAY
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: PPUSH
49738: LD_EXP 106
49742: PUSH
49743: LD_VAR 0 2
49747: ARRAY
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: PPUSH
49757: LD_EXP 106
49761: PUSH
49762: LD_VAR 0 2
49766: ARRAY
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PUSH
49772: LD_INT 3
49774: ARRAY
49775: PPUSH
49776: LD_EXP 106
49780: PUSH
49781: LD_VAR 0 2
49785: ARRAY
49786: PUSH
49787: LD_INT 1
49789: ARRAY
49790: PUSH
49791: LD_INT 4
49793: ARRAY
49794: PPUSH
49795: CALL_OW 145
// end ;
49799: GO 49588
49801: POP
49802: POP
// end else
49803: GO 49975
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
49805: LD_EXP 101
49809: PUSH
49810: LD_VAR 0 2
49814: ARRAY
49815: PPUSH
49816: LD_EXP 106
49820: PUSH
49821: LD_VAR 0 2
49825: ARRAY
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PUSH
49831: LD_INT 1
49833: ARRAY
49834: PPUSH
49835: LD_EXP 106
49839: PUSH
49840: LD_VAR 0 2
49844: ARRAY
49845: PUSH
49846: LD_INT 1
49848: ARRAY
49849: PUSH
49850: LD_INT 2
49852: ARRAY
49853: PPUSH
49854: LD_EXP 106
49858: PUSH
49859: LD_VAR 0 2
49863: ARRAY
49864: PUSH
49865: LD_INT 1
49867: ARRAY
49868: PUSH
49869: LD_INT 3
49871: ARRAY
49872: PPUSH
49873: LD_EXP 106
49877: PUSH
49878: LD_VAR 0 2
49882: ARRAY
49883: PUSH
49884: LD_INT 1
49886: ARRAY
49887: PUSH
49888: LD_INT 4
49890: ARRAY
49891: PPUSH
49892: LD_EXP 101
49896: PUSH
49897: LD_VAR 0 2
49901: ARRAY
49902: PPUSH
49903: LD_INT 21
49905: PUSH
49906: LD_INT 3
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PPUSH
49913: CALL_OW 72
49917: PPUSH
49918: EMPTY
49919: PPUSH
49920: CALL 80880 0 7
49924: NOT
49925: IFFALSE 49975
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
49927: LD_ADDR_EXP 106
49931: PUSH
49932: LD_EXP 106
49936: PPUSH
49937: LD_VAR 0 2
49941: PPUSH
49942: LD_EXP 106
49946: PUSH
49947: LD_VAR 0 2
49951: ARRAY
49952: PPUSH
49953: LD_INT 1
49955: PPUSH
49956: LD_INT 1
49958: NEG
49959: PPUSH
49960: LD_INT 0
49962: PPUSH
49963: CALL 73438 0 4
49967: PPUSH
49968: CALL_OW 1
49972: ST_TO_ADDR
// continue ;
49973: GO 49406
// end ; end ;
49975: GO 49406
49977: POP
49978: POP
// end ; end ;
49979: GO 48835
49981: POP
49982: POP
// end ;
49983: LD_VAR 0 1
49987: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
49988: LD_INT 0
49990: PPUSH
49991: PPUSH
49992: PPUSH
49993: PPUSH
49994: PPUSH
49995: PPUSH
// if not mc_bases then
49996: LD_EXP 101
50000: NOT
50001: IFFALSE 50005
// exit ;
50003: GO 50432
// for i = 1 to mc_bases do
50005: LD_ADDR_VAR 0 2
50009: PUSH
50010: DOUBLE
50011: LD_INT 1
50013: DEC
50014: ST_TO_ADDR
50015: LD_EXP 101
50019: PUSH
50020: FOR_TO
50021: IFFALSE 50430
// begin tmp := mc_build_upgrade [ i ] ;
50023: LD_ADDR_VAR 0 4
50027: PUSH
50028: LD_EXP 133
50032: PUSH
50033: LD_VAR 0 2
50037: ARRAY
50038: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
50039: LD_ADDR_VAR 0 6
50043: PUSH
50044: LD_EXP 134
50048: PUSH
50049: LD_VAR 0 2
50053: ARRAY
50054: PPUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 6
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 30
50070: PUSH
50071: LD_INT 7
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: PPUSH
50083: CALL_OW 72
50087: ST_TO_ADDR
// if not tmp and not lab then
50088: LD_VAR 0 4
50092: NOT
50093: PUSH
50094: LD_VAR 0 6
50098: NOT
50099: AND
50100: IFFALSE 50104
// continue ;
50102: GO 50020
// if tmp then
50104: LD_VAR 0 4
50108: IFFALSE 50228
// for j in tmp do
50110: LD_ADDR_VAR 0 3
50114: PUSH
50115: LD_VAR 0 4
50119: PUSH
50120: FOR_IN
50121: IFFALSE 50226
// begin if UpgradeCost ( j ) then
50123: LD_VAR 0 3
50127: PPUSH
50128: CALL 80540 0 1
50132: IFFALSE 50224
// begin ComUpgrade ( j ) ;
50134: LD_VAR 0 3
50138: PPUSH
50139: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
50143: LD_ADDR_EXP 133
50147: PUSH
50148: LD_EXP 133
50152: PPUSH
50153: LD_VAR 0 2
50157: PPUSH
50158: LD_EXP 133
50162: PUSH
50163: LD_VAR 0 2
50167: ARRAY
50168: PUSH
50169: LD_VAR 0 3
50173: DIFF
50174: PPUSH
50175: CALL_OW 1
50179: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
50180: LD_ADDR_EXP 108
50184: PUSH
50185: LD_EXP 108
50189: PPUSH
50190: LD_VAR 0 2
50194: PUSH
50195: LD_EXP 108
50199: PUSH
50200: LD_VAR 0 2
50204: ARRAY
50205: PUSH
50206: LD_INT 1
50208: PLUS
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PPUSH
50214: LD_VAR 0 3
50218: PPUSH
50219: CALL 74020 0 3
50223: ST_TO_ADDR
// end ; end ;
50224: GO 50120
50226: POP
50227: POP
// if not lab or not mc_lab_upgrade [ i ] then
50228: LD_VAR 0 6
50232: NOT
50233: PUSH
50234: LD_EXP 135
50238: PUSH
50239: LD_VAR 0 2
50243: ARRAY
50244: NOT
50245: OR
50246: IFFALSE 50250
// continue ;
50248: GO 50020
// for j in lab do
50250: LD_ADDR_VAR 0 3
50254: PUSH
50255: LD_VAR 0 6
50259: PUSH
50260: FOR_IN
50261: IFFALSE 50426
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
50263: LD_VAR 0 3
50267: PPUSH
50268: CALL_OW 266
50272: PUSH
50273: LD_INT 6
50275: PUSH
50276: LD_INT 7
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: IN
50283: PUSH
50284: LD_VAR 0 3
50288: PPUSH
50289: CALL_OW 461
50293: PUSH
50294: LD_INT 1
50296: NONEQUAL
50297: AND
50298: IFFALSE 50424
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
50300: LD_VAR 0 3
50304: PPUSH
50305: LD_EXP 135
50309: PUSH
50310: LD_VAR 0 2
50314: ARRAY
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: PPUSH
50320: CALL 80745 0 2
50324: IFFALSE 50424
// begin ComCancel ( j ) ;
50326: LD_VAR 0 3
50330: PPUSH
50331: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
50335: LD_VAR 0 3
50339: PPUSH
50340: LD_EXP 135
50344: PUSH
50345: LD_VAR 0 2
50349: ARRAY
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PPUSH
50355: CALL_OW 207
// if not j in mc_construct_list [ i ] then
50359: LD_VAR 0 3
50363: PUSH
50364: LD_EXP 108
50368: PUSH
50369: LD_VAR 0 2
50373: ARRAY
50374: IN
50375: NOT
50376: IFFALSE 50422
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
50378: LD_ADDR_EXP 108
50382: PUSH
50383: LD_EXP 108
50387: PPUSH
50388: LD_VAR 0 2
50392: PUSH
50393: LD_EXP 108
50397: PUSH
50398: LD_VAR 0 2
50402: ARRAY
50403: PUSH
50404: LD_INT 1
50406: PLUS
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PPUSH
50412: LD_VAR 0 3
50416: PPUSH
50417: CALL 74020 0 3
50421: ST_TO_ADDR
// break ;
50422: GO 50426
// end ; end ; end ;
50424: GO 50260
50426: POP
50427: POP
// end ;
50428: GO 50020
50430: POP
50431: POP
// end ;
50432: LD_VAR 0 1
50436: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
50437: LD_INT 0
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
// if not mc_bases then
50448: LD_EXP 101
50452: NOT
50453: IFFALSE 50457
// exit ;
50455: GO 50862
// for i = 1 to mc_bases do
50457: LD_ADDR_VAR 0 2
50461: PUSH
50462: DOUBLE
50463: LD_INT 1
50465: DEC
50466: ST_TO_ADDR
50467: LD_EXP 101
50471: PUSH
50472: FOR_TO
50473: IFFALSE 50860
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
50475: LD_EXP 109
50479: PUSH
50480: LD_VAR 0 2
50484: ARRAY
50485: NOT
50486: PUSH
50487: LD_EXP 101
50491: PUSH
50492: LD_VAR 0 2
50496: ARRAY
50497: PPUSH
50498: LD_INT 30
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PPUSH
50508: CALL_OW 72
50512: NOT
50513: OR
50514: IFFALSE 50518
// continue ;
50516: GO 50472
// busy := false ;
50518: LD_ADDR_VAR 0 8
50522: PUSH
50523: LD_INT 0
50525: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50526: LD_ADDR_VAR 0 4
50530: PUSH
50531: LD_EXP 101
50535: PUSH
50536: LD_VAR 0 2
50540: ARRAY
50541: PPUSH
50542: LD_INT 30
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PPUSH
50552: CALL_OW 72
50556: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
50557: LD_ADDR_VAR 0 6
50561: PUSH
50562: LD_EXP 109
50566: PUSH
50567: LD_VAR 0 2
50571: ARRAY
50572: PPUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 30
50578: PUSH
50579: LD_INT 32
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 30
50588: PUSH
50589: LD_INT 33
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: PPUSH
50601: CALL_OW 72
50605: ST_TO_ADDR
// if not t then
50606: LD_VAR 0 6
50610: NOT
50611: IFFALSE 50615
// continue ;
50613: GO 50472
// for j in tmp do
50615: LD_ADDR_VAR 0 3
50619: PUSH
50620: LD_VAR 0 4
50624: PUSH
50625: FOR_IN
50626: IFFALSE 50656
// if not BuildingStatus ( j ) = bs_idle then
50628: LD_VAR 0 3
50632: PPUSH
50633: CALL_OW 461
50637: PUSH
50638: LD_INT 2
50640: EQUAL
50641: NOT
50642: IFFALSE 50654
// begin busy := true ;
50644: LD_ADDR_VAR 0 8
50648: PUSH
50649: LD_INT 1
50651: ST_TO_ADDR
// break ;
50652: GO 50656
// end ;
50654: GO 50625
50656: POP
50657: POP
// if busy then
50658: LD_VAR 0 8
50662: IFFALSE 50666
// continue ;
50664: GO 50472
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
50666: LD_ADDR_VAR 0 7
50670: PUSH
50671: LD_VAR 0 6
50675: PPUSH
50676: LD_INT 35
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PPUSH
50686: CALL_OW 72
50690: ST_TO_ADDR
// if tw then
50691: LD_VAR 0 7
50695: IFFALSE 50772
// begin tw := tw [ 1 ] ;
50697: LD_ADDR_VAR 0 7
50701: PUSH
50702: LD_VAR 0 7
50706: PUSH
50707: LD_INT 1
50709: ARRAY
50710: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
50711: LD_ADDR_VAR 0 9
50715: PUSH
50716: LD_VAR 0 7
50720: PPUSH
50721: LD_EXP 126
50725: PUSH
50726: LD_VAR 0 2
50730: ARRAY
50731: PPUSH
50732: CALL 79037 0 2
50736: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
50737: LD_EXP 140
50741: PUSH
50742: LD_VAR 0 2
50746: ARRAY
50747: IFFALSE 50770
// if not weapon in mc_allowed_tower_weapons [ i ] then
50749: LD_VAR 0 9
50753: PUSH
50754: LD_EXP 140
50758: PUSH
50759: LD_VAR 0 2
50763: ARRAY
50764: IN
50765: NOT
50766: IFFALSE 50770
// continue ;
50768: GO 50472
// end else
50770: GO 50835
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_EXP 109
50781: PUSH
50782: LD_VAR 0 2
50786: ARRAY
50787: PPUSH
50788: LD_VAR 0 4
50792: PPUSH
50793: CALL 105907 0 2
50797: ST_TO_ADDR
// if not tmp2 then
50798: LD_VAR 0 5
50802: NOT
50803: IFFALSE 50807
// continue ;
50805: GO 50472
// tw := tmp2 [ 1 ] ;
50807: LD_ADDR_VAR 0 7
50811: PUSH
50812: LD_VAR 0 5
50816: PUSH
50817: LD_INT 1
50819: ARRAY
50820: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
50821: LD_ADDR_VAR 0 9
50825: PUSH
50826: LD_VAR 0 5
50830: PUSH
50831: LD_INT 2
50833: ARRAY
50834: ST_TO_ADDR
// end ; if not weapon then
50835: LD_VAR 0 9
50839: NOT
50840: IFFALSE 50844
// continue ;
50842: GO 50472
// ComPlaceWeapon ( tw , weapon ) ;
50844: LD_VAR 0 7
50848: PPUSH
50849: LD_VAR 0 9
50853: PPUSH
50854: CALL_OW 148
// end ;
50858: GO 50472
50860: POP
50861: POP
// end ;
50862: LD_VAR 0 1
50866: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
50867: LD_INT 0
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
// if not mc_bases then
50876: LD_EXP 101
50880: NOT
50881: IFFALSE 50885
// exit ;
50883: GO 51660
// for i = 1 to mc_bases do
50885: LD_ADDR_VAR 0 2
50889: PUSH
50890: DOUBLE
50891: LD_INT 1
50893: DEC
50894: ST_TO_ADDR
50895: LD_EXP 101
50899: PUSH
50900: FOR_TO
50901: IFFALSE 51658
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
50903: LD_EXP 114
50907: PUSH
50908: LD_VAR 0 2
50912: ARRAY
50913: NOT
50914: PUSH
50915: LD_EXP 114
50919: PUSH
50920: LD_VAR 0 2
50924: ARRAY
50925: PUSH
50926: LD_EXP 115
50930: PUSH
50931: LD_VAR 0 2
50935: ARRAY
50936: EQUAL
50937: OR
50938: PUSH
50939: LD_EXP 124
50943: PUSH
50944: LD_VAR 0 2
50948: ARRAY
50949: OR
50950: IFFALSE 50954
// continue ;
50952: GO 50900
// if mc_miners [ i ] then
50954: LD_EXP 115
50958: PUSH
50959: LD_VAR 0 2
50963: ARRAY
50964: IFFALSE 51345
// begin for j = mc_miners [ i ] downto 1 do
50966: LD_ADDR_VAR 0 3
50970: PUSH
50971: DOUBLE
50972: LD_EXP 115
50976: PUSH
50977: LD_VAR 0 2
50981: ARRAY
50982: INC
50983: ST_TO_ADDR
50984: LD_INT 1
50986: PUSH
50987: FOR_DOWNTO
50988: IFFALSE 51343
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
50990: LD_EXP 115
50994: PUSH
50995: LD_VAR 0 2
50999: ARRAY
51000: PUSH
51001: LD_VAR 0 3
51005: ARRAY
51006: PPUSH
51007: CALL_OW 301
51011: PUSH
51012: LD_EXP 115
51016: PUSH
51017: LD_VAR 0 2
51021: ARRAY
51022: PUSH
51023: LD_VAR 0 3
51027: ARRAY
51028: PPUSH
51029: CALL_OW 257
51033: PUSH
51034: LD_INT 1
51036: NONEQUAL
51037: OR
51038: IFFALSE 51101
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51040: LD_ADDR_VAR 0 5
51044: PUSH
51045: LD_EXP 115
51049: PUSH
51050: LD_VAR 0 2
51054: ARRAY
51055: PUSH
51056: LD_EXP 115
51060: PUSH
51061: LD_VAR 0 2
51065: ARRAY
51066: PUSH
51067: LD_VAR 0 3
51071: ARRAY
51072: DIFF
51073: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51074: LD_ADDR_EXP 115
51078: PUSH
51079: LD_EXP 115
51083: PPUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: LD_VAR 0 5
51093: PPUSH
51094: CALL_OW 1
51098: ST_TO_ADDR
// continue ;
51099: GO 50987
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
51101: LD_EXP 115
51105: PUSH
51106: LD_VAR 0 2
51110: ARRAY
51111: PUSH
51112: LD_VAR 0 3
51116: ARRAY
51117: PPUSH
51118: CALL_OW 257
51122: PUSH
51123: LD_INT 1
51125: EQUAL
51126: PUSH
51127: LD_EXP 115
51131: PUSH
51132: LD_VAR 0 2
51136: ARRAY
51137: PUSH
51138: LD_VAR 0 3
51142: ARRAY
51143: PPUSH
51144: CALL_OW 459
51148: NOT
51149: AND
51150: PUSH
51151: LD_EXP 115
51155: PUSH
51156: LD_VAR 0 2
51160: ARRAY
51161: PUSH
51162: LD_VAR 0 3
51166: ARRAY
51167: PPUSH
51168: CALL_OW 314
51172: NOT
51173: AND
51174: IFFALSE 51341
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51176: LD_EXP 115
51180: PUSH
51181: LD_VAR 0 2
51185: ARRAY
51186: PUSH
51187: LD_VAR 0 3
51191: ARRAY
51192: PPUSH
51193: CALL_OW 310
51197: IFFALSE 51220
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51199: LD_EXP 115
51203: PUSH
51204: LD_VAR 0 2
51208: ARRAY
51209: PUSH
51210: LD_VAR 0 3
51214: ARRAY
51215: PPUSH
51216: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51220: LD_EXP 115
51224: PUSH
51225: LD_VAR 0 2
51229: ARRAY
51230: PUSH
51231: LD_VAR 0 3
51235: ARRAY
51236: PPUSH
51237: CALL_OW 314
51241: NOT
51242: IFFALSE 51341
// begin r := ( j mod Count ( mc_mines [ i ] ) ) + 1 ;
51244: LD_ADDR_VAR 0 7
51248: PUSH
51249: LD_VAR 0 3
51253: PUSH
51254: LD_EXP 114
51258: PUSH
51259: LD_VAR 0 2
51263: ARRAY
51264: PPUSH
51265: CALL 71160 0 1
51269: MOD
51270: PUSH
51271: LD_INT 1
51273: PLUS
51274: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
51275: LD_EXP 115
51279: PUSH
51280: LD_VAR 0 2
51284: ARRAY
51285: PUSH
51286: LD_VAR 0 3
51290: ARRAY
51291: PPUSH
51292: LD_EXP 114
51296: PUSH
51297: LD_VAR 0 2
51301: ARRAY
51302: PUSH
51303: LD_VAR 0 7
51307: ARRAY
51308: PUSH
51309: LD_INT 1
51311: ARRAY
51312: PPUSH
51313: LD_EXP 114
51317: PUSH
51318: LD_VAR 0 2
51322: ARRAY
51323: PUSH
51324: LD_VAR 0 7
51328: ARRAY
51329: PUSH
51330: LD_INT 2
51332: ARRAY
51333: PPUSH
51334: LD_INT 0
51336: PPUSH
51337: CALL_OW 193
// end ; end ; end ;
51341: GO 50987
51343: POP
51344: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51345: LD_ADDR_VAR 0 5
51349: PUSH
51350: LD_EXP 101
51354: PUSH
51355: LD_VAR 0 2
51359: ARRAY
51360: PPUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 30
51366: PUSH
51367: LD_INT 4
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 30
51376: PUSH
51377: LD_INT 5
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 30
51386: PUSH
51387: LD_INT 32
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: PPUSH
51400: CALL_OW 72
51404: ST_TO_ADDR
// if not tmp then
51405: LD_VAR 0 5
51409: NOT
51410: IFFALSE 51414
// continue ;
51412: GO 50900
// list := [ ] ;
51414: LD_ADDR_VAR 0 6
51418: PUSH
51419: EMPTY
51420: ST_TO_ADDR
// for j in tmp do
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_VAR 0 5
51430: PUSH
51431: FOR_IN
51432: IFFALSE 51501
// begin for k in UnitsInside ( j ) do
51434: LD_ADDR_VAR 0 4
51438: PUSH
51439: LD_VAR 0 3
51443: PPUSH
51444: CALL_OW 313
51448: PUSH
51449: FOR_IN
51450: IFFALSE 51497
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51452: LD_VAR 0 4
51456: PPUSH
51457: CALL_OW 257
51461: PUSH
51462: LD_INT 1
51464: EQUAL
51465: PUSH
51466: LD_VAR 0 4
51470: PPUSH
51471: CALL_OW 459
51475: NOT
51476: AND
51477: IFFALSE 51495
// list := list ^ k ;
51479: LD_ADDR_VAR 0 6
51483: PUSH
51484: LD_VAR 0 6
51488: PUSH
51489: LD_VAR 0 4
51493: ADD
51494: ST_TO_ADDR
51495: GO 51449
51497: POP
51498: POP
// end ;
51499: GO 51431
51501: POP
51502: POP
// list := list diff mc_miners [ i ] ;
51503: LD_ADDR_VAR 0 6
51507: PUSH
51508: LD_VAR 0 6
51512: PUSH
51513: LD_EXP 115
51517: PUSH
51518: LD_VAR 0 2
51522: ARRAY
51523: DIFF
51524: ST_TO_ADDR
// if not list then
51525: LD_VAR 0 6
51529: NOT
51530: IFFALSE 51534
// continue ;
51532: GO 50900
// k := mc_mines [ i ] - mc_miners [ i ] ;
51534: LD_ADDR_VAR 0 4
51538: PUSH
51539: LD_EXP 114
51543: PUSH
51544: LD_VAR 0 2
51548: ARRAY
51549: PUSH
51550: LD_EXP 115
51554: PUSH
51555: LD_VAR 0 2
51559: ARRAY
51560: MINUS
51561: ST_TO_ADDR
// if k > list then
51562: LD_VAR 0 4
51566: PUSH
51567: LD_VAR 0 6
51571: GREATER
51572: IFFALSE 51584
// k := list ;
51574: LD_ADDR_VAR 0 4
51578: PUSH
51579: LD_VAR 0 6
51583: ST_TO_ADDR
// for j = 1 to k do
51584: LD_ADDR_VAR 0 3
51588: PUSH
51589: DOUBLE
51590: LD_INT 1
51592: DEC
51593: ST_TO_ADDR
51594: LD_VAR 0 4
51598: PUSH
51599: FOR_TO
51600: IFFALSE 51654
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
51602: LD_ADDR_EXP 115
51606: PUSH
51607: LD_EXP 115
51611: PPUSH
51612: LD_VAR 0 2
51616: PUSH
51617: LD_EXP 115
51621: PUSH
51622: LD_VAR 0 2
51626: ARRAY
51627: PUSH
51628: LD_INT 1
51630: PLUS
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PPUSH
51636: LD_VAR 0 6
51640: PUSH
51641: LD_VAR 0 3
51645: ARRAY
51646: PPUSH
51647: CALL 74020 0 3
51651: ST_TO_ADDR
51652: GO 51599
51654: POP
51655: POP
// end ;
51656: GO 50900
51658: POP
51659: POP
// end ;
51660: LD_VAR 0 1
51664: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , side , target , cargo , depot , fac , components ; begin
51665: LD_INT 0
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
// if not mc_bases then
51678: LD_EXP 101
51682: NOT
51683: IFFALSE 51687
// exit ;
51685: GO 53510
// for i = 1 to mc_bases do
51687: LD_ADDR_VAR 0 2
51691: PUSH
51692: DOUBLE
51693: LD_INT 1
51695: DEC
51696: ST_TO_ADDR
51697: LD_EXP 101
51701: PUSH
51702: FOR_TO
51703: IFFALSE 53508
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
51705: LD_EXP 101
51709: PUSH
51710: LD_VAR 0 2
51714: ARRAY
51715: NOT
51716: PUSH
51717: LD_EXP 108
51721: PUSH
51722: LD_VAR 0 2
51726: ARRAY
51727: OR
51728: IFFALSE 51732
// continue ;
51730: GO 51702
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
51732: LD_EXP 117
51736: PUSH
51737: LD_VAR 0 2
51741: ARRAY
51742: NOT
51743: PUSH
51744: LD_EXP 118
51748: PUSH
51749: LD_VAR 0 2
51753: ARRAY
51754: AND
51755: IFFALSE 51793
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51757: LD_ADDR_EXP 118
51761: PUSH
51762: LD_EXP 118
51766: PPUSH
51767: LD_VAR 0 2
51771: PPUSH
51772: EMPTY
51773: PPUSH
51774: CALL_OW 1
51778: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
51779: LD_VAR 0 2
51783: PPUSH
51784: LD_INT 107
51786: PPUSH
51787: CALL 42519 0 2
// continue ;
51791: GO 51702
// end ; target := [ ] ;
51793: LD_ADDR_VAR 0 7
51797: PUSH
51798: EMPTY
51799: ST_TO_ADDR
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
51800: LD_ADDR_VAR 0 6
51804: PUSH
51805: LD_EXP 101
51809: PUSH
51810: LD_VAR 0 2
51814: ARRAY
51815: PUSH
51816: LD_INT 1
51818: ARRAY
51819: PPUSH
51820: CALL_OW 255
51824: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51825: LD_ADDR_VAR 0 9
51829: PUSH
51830: LD_EXP 101
51834: PUSH
51835: LD_VAR 0 2
51839: ARRAY
51840: PPUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 30
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 30
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: LIST
51868: PPUSH
51869: CALL_OW 72
51873: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51874: LD_ADDR_VAR 0 3
51878: PUSH
51879: DOUBLE
51880: LD_EXP 117
51884: PUSH
51885: LD_VAR 0 2
51889: ARRAY
51890: INC
51891: ST_TO_ADDR
51892: LD_INT 1
51894: PUSH
51895: FOR_DOWNTO
51896: IFFALSE 52141
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51898: LD_EXP 117
51902: PUSH
51903: LD_VAR 0 2
51907: ARRAY
51908: PUSH
51909: LD_VAR 0 3
51913: ARRAY
51914: PUSH
51915: LD_INT 2
51917: ARRAY
51918: PPUSH
51919: LD_EXP 117
51923: PUSH
51924: LD_VAR 0 2
51928: ARRAY
51929: PUSH
51930: LD_VAR 0 3
51934: ARRAY
51935: PUSH
51936: LD_INT 3
51938: ARRAY
51939: PPUSH
51940: CALL_OW 488
51944: PUSH
51945: LD_EXP 117
51949: PUSH
51950: LD_VAR 0 2
51954: ARRAY
51955: PUSH
51956: LD_VAR 0 3
51960: ARRAY
51961: PUSH
51962: LD_INT 2
51964: ARRAY
51965: PPUSH
51966: LD_EXP 117
51970: PUSH
51971: LD_VAR 0 2
51975: ARRAY
51976: PUSH
51977: LD_VAR 0 3
51981: ARRAY
51982: PUSH
51983: LD_INT 3
51985: ARRAY
51986: PPUSH
51987: CALL_OW 284
51991: PUSH
51992: LD_INT 0
51994: EQUAL
51995: AND
51996: IFFALSE 52051
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
51998: LD_ADDR_VAR 0 5
52002: PUSH
52003: LD_EXP 117
52007: PUSH
52008: LD_VAR 0 2
52012: ARRAY
52013: PPUSH
52014: LD_VAR 0 3
52018: PPUSH
52019: CALL_OW 3
52023: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52024: LD_ADDR_EXP 117
52028: PUSH
52029: LD_EXP 117
52033: PPUSH
52034: LD_VAR 0 2
52038: PPUSH
52039: LD_VAR 0 5
52043: PPUSH
52044: CALL_OW 1
52048: ST_TO_ADDR
// continue ;
52049: GO 51895
// end ; if DangerAtRangeXY ( side , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
52051: LD_VAR 0 6
52055: PPUSH
52056: LD_EXP 117
52060: PUSH
52061: LD_VAR 0 2
52065: ARRAY
52066: PUSH
52067: LD_VAR 0 3
52071: ARRAY
52072: PUSH
52073: LD_INT 2
52075: ARRAY
52076: PPUSH
52077: LD_EXP 117
52081: PUSH
52082: LD_VAR 0 2
52086: ARRAY
52087: PUSH
52088: LD_VAR 0 3
52092: ARRAY
52093: PUSH
52094: LD_INT 3
52096: ARRAY
52097: PPUSH
52098: LD_INT 30
52100: PPUSH
52101: CALL 74916 0 4
52105: PUSH
52106: LD_INT 4
52108: ARRAY
52109: PUSH
52110: LD_INT 0
52112: EQUAL
52113: IFFALSE 52139
// begin target := mc_crates [ i ] [ j ] ;
52115: LD_ADDR_VAR 0 7
52119: PUSH
52120: LD_EXP 117
52124: PUSH
52125: LD_VAR 0 2
52129: ARRAY
52130: PUSH
52131: LD_VAR 0 3
52135: ARRAY
52136: ST_TO_ADDR
// break ;
52137: GO 52141
// end ; end ;
52139: GO 51895
52141: POP
52142: POP
// if not target then
52143: LD_VAR 0 7
52147: NOT
52148: IFFALSE 52152
// continue ;
52150: GO 51702
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
52152: LD_ADDR_VAR 0 8
52156: PUSH
52157: LD_EXP 120
52161: PUSH
52162: LD_VAR 0 2
52166: ARRAY
52167: PPUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: LD_INT 58
52176: PUSH
52177: EMPTY
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 61
52186: PUSH
52187: EMPTY
52188: LIST
52189: PUSH
52190: LD_INT 33
52192: PUSH
52193: LD_INT 5
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 33
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 34
52222: PUSH
52223: LD_INT 32
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 34
52232: PUSH
52233: LD_INT 51
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 34
52242: PUSH
52243: LD_INT 12
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PPUSH
52260: CALL_OW 72
52264: ST_TO_ADDR
// if not cargo then
52265: LD_VAR 0 8
52269: NOT
52270: IFFALSE 52976
// begin if mc_crates_collector [ i ] < 5 then
52272: LD_EXP 118
52276: PUSH
52277: LD_VAR 0 2
52281: ARRAY
52282: PUSH
52283: LD_INT 5
52285: LESS
52286: IFFALSE 52652
// begin if mc_ape [ i ] then
52288: LD_EXP 130
52292: PUSH
52293: LD_VAR 0 2
52297: ARRAY
52298: IFFALSE 52345
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
52300: LD_ADDR_VAR 0 5
52304: PUSH
52305: LD_EXP 130
52309: PUSH
52310: LD_VAR 0 2
52314: ARRAY
52315: PPUSH
52316: LD_INT 25
52318: PUSH
52319: LD_INT 16
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 24
52328: PUSH
52329: LD_INT 750
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PPUSH
52340: CALL_OW 72
52344: ST_TO_ADDR
// if not tmp then
52345: LD_VAR 0 5
52349: NOT
52350: IFFALSE 52397
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
52352: LD_ADDR_VAR 0 5
52356: PUSH
52357: LD_EXP 101
52361: PUSH
52362: LD_VAR 0 2
52366: ARRAY
52367: PPUSH
52368: LD_INT 25
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 24
52380: PUSH
52381: LD_INT 750
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PPUSH
52392: CALL_OW 72
52396: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
52397: LD_EXP 130
52401: PUSH
52402: LD_VAR 0 2
52406: ARRAY
52407: PUSH
52408: LD_EXP 101
52412: PUSH
52413: LD_VAR 0 2
52417: ARRAY
52418: PPUSH
52419: LD_INT 25
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 24
52431: PUSH
52432: LD_INT 750
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PPUSH
52443: CALL_OW 72
52447: AND
52448: PUSH
52449: LD_VAR 0 5
52453: PUSH
52454: LD_INT 5
52456: LESS
52457: AND
52458: IFFALSE 52540
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
52460: LD_ADDR_VAR 0 3
52464: PUSH
52465: LD_EXP 101
52469: PUSH
52470: LD_VAR 0 2
52474: ARRAY
52475: PPUSH
52476: LD_INT 25
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 24
52488: PUSH
52489: LD_INT 750
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PPUSH
52500: CALL_OW 72
52504: PUSH
52505: FOR_IN
52506: IFFALSE 52538
// begin tmp := tmp union j ;
52508: LD_ADDR_VAR 0 5
52512: PUSH
52513: LD_VAR 0 5
52517: PUSH
52518: LD_VAR 0 3
52522: UNION
52523: ST_TO_ADDR
// if tmp >= 5 then
52524: LD_VAR 0 5
52528: PUSH
52529: LD_INT 5
52531: GREATEREQUAL
52532: IFFALSE 52536
// break ;
52534: GO 52538
// end ;
52536: GO 52505
52538: POP
52539: POP
// end ; if not tmp then
52540: LD_VAR 0 5
52544: NOT
52545: IFFALSE 52549
// continue ;
52547: GO 51702
// for j in tmp do
52549: LD_ADDR_VAR 0 3
52553: PUSH
52554: LD_VAR 0 5
52558: PUSH
52559: FOR_IN
52560: IFFALSE 52650
// if not GetTag ( j ) then
52562: LD_VAR 0 3
52566: PPUSH
52567: CALL_OW 110
52571: NOT
52572: IFFALSE 52648
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52574: LD_ADDR_EXP 118
52578: PUSH
52579: LD_EXP 118
52583: PPUSH
52584: LD_VAR 0 2
52588: PUSH
52589: LD_EXP 118
52593: PUSH
52594: LD_VAR 0 2
52598: ARRAY
52599: PUSH
52600: LD_INT 1
52602: PLUS
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PPUSH
52608: LD_VAR 0 3
52612: PPUSH
52613: CALL 74020 0 3
52617: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52618: LD_VAR 0 3
52622: PPUSH
52623: LD_INT 107
52625: PPUSH
52626: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
52630: LD_EXP 118
52634: PUSH
52635: LD_VAR 0 2
52639: ARRAY
52640: PUSH
52641: LD_INT 5
52643: GREATEREQUAL
52644: IFFALSE 52648
// break ;
52646: GO 52650
// end ;
52648: GO 52559
52650: POP
52651: POP
// end ; if mc_crates_collector [ i ] and target then
52652: LD_EXP 118
52656: PUSH
52657: LD_VAR 0 2
52661: ARRAY
52662: PUSH
52663: LD_VAR 0 7
52667: AND
52668: IFFALSE 52974
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52670: LD_EXP 118
52674: PUSH
52675: LD_VAR 0 2
52679: ARRAY
52680: PUSH
52681: LD_VAR 0 7
52685: PUSH
52686: LD_INT 1
52688: ARRAY
52689: LESS
52690: IFFALSE 52710
// tmp := mc_crates_collector [ i ] else
52692: LD_ADDR_VAR 0 5
52696: PUSH
52697: LD_EXP 118
52701: PUSH
52702: LD_VAR 0 2
52706: ARRAY
52707: ST_TO_ADDR
52708: GO 52724
// tmp := target [ 1 ] ;
52710: LD_ADDR_VAR 0 5
52714: PUSH
52715: LD_VAR 0 7
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: ST_TO_ADDR
// k := 0 ;
52724: LD_ADDR_VAR 0 4
52728: PUSH
52729: LD_INT 0
52731: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
52732: LD_ADDR_VAR 0 3
52736: PUSH
52737: LD_EXP 118
52741: PUSH
52742: LD_VAR 0 2
52746: ARRAY
52747: PUSH
52748: FOR_IN
52749: IFFALSE 52972
// begin k := k + 1 ;
52751: LD_ADDR_VAR 0 4
52755: PUSH
52756: LD_VAR 0 4
52760: PUSH
52761: LD_INT 1
52763: PLUS
52764: ST_TO_ADDR
// if k > tmp then
52765: LD_VAR 0 4
52769: PUSH
52770: LD_VAR 0 5
52774: GREATER
52775: IFFALSE 52779
// break ;
52777: GO 52972
// if not GetClass ( j ) in [ 2 , 16 ] then
52779: LD_VAR 0 3
52783: PPUSH
52784: CALL_OW 257
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 16
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: IN
52799: NOT
52800: IFFALSE 52853
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
52802: LD_ADDR_EXP 118
52806: PUSH
52807: LD_EXP 118
52811: PPUSH
52812: LD_VAR 0 2
52816: PPUSH
52817: LD_EXP 118
52821: PUSH
52822: LD_VAR 0 2
52826: ARRAY
52827: PUSH
52828: LD_VAR 0 3
52832: DIFF
52833: PPUSH
52834: CALL_OW 1
52838: ST_TO_ADDR
// SetTag ( j , 0 ) ;
52839: LD_VAR 0 3
52843: PPUSH
52844: LD_INT 0
52846: PPUSH
52847: CALL_OW 109
// continue ;
52851: GO 52748
// end ; if IsInUnit ( j ) then
52853: LD_VAR 0 3
52857: PPUSH
52858: CALL_OW 310
52862: IFFALSE 52873
// ComExitBuilding ( j ) ;
52864: LD_VAR 0 3
52868: PPUSH
52869: CALL_OW 122
// wait ( 3 ) ;
52873: LD_INT 3
52875: PPUSH
52876: CALL_OW 67
// if HasTask ( j ) and DangerAtRangeXY ( side , target [ 2 ] , target [ 3 ] , 30 ) [ 4 ] then
52880: LD_VAR 0 3
52884: PPUSH
52885: CALL_OW 314
52889: PUSH
52890: LD_VAR 0 6
52894: PPUSH
52895: LD_VAR 0 7
52899: PUSH
52900: LD_INT 2
52902: ARRAY
52903: PPUSH
52904: LD_VAR 0 7
52908: PUSH
52909: LD_INT 3
52911: ARRAY
52912: PPUSH
52913: LD_INT 30
52915: PPUSH
52916: CALL 74916 0 4
52920: PUSH
52921: LD_INT 4
52923: ARRAY
52924: AND
52925: IFFALSE 52943
// ComStandNearbyBuilding ( j , depot ) else
52927: LD_VAR 0 3
52931: PPUSH
52932: LD_VAR 0 9
52936: PPUSH
52937: CALL 70622 0 2
52941: GO 52970
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
52943: LD_VAR 0 3
52947: PPUSH
52948: LD_VAR 0 7
52952: PUSH
52953: LD_INT 2
52955: ARRAY
52956: PPUSH
52957: LD_VAR 0 7
52961: PUSH
52962: LD_INT 3
52964: ARRAY
52965: PPUSH
52966: CALL_OW 117
// end ;
52970: GO 52748
52972: POP
52973: POP
// end ; end else
52974: GO 53506
// begin for j in cargo do
52976: LD_ADDR_VAR 0 3
52980: PUSH
52981: LD_VAR 0 8
52985: PUSH
52986: FOR_IN
52987: IFFALSE 53504
// begin if GetTag ( j ) <> 0 then
52989: LD_VAR 0 3
52993: PPUSH
52994: CALL_OW 110
52998: PUSH
52999: LD_INT 0
53001: NONEQUAL
53002: IFFALSE 53006
// continue ;
53004: GO 52986
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
53006: LD_VAR 0 3
53010: PPUSH
53011: CALL_OW 256
53015: PUSH
53016: LD_INT 1000
53018: LESS
53019: PUSH
53020: LD_VAR 0 3
53024: PPUSH
53025: LD_EXP 125
53029: PUSH
53030: LD_VAR 0 2
53034: ARRAY
53035: PPUSH
53036: CALL_OW 308
53040: NOT
53041: AND
53042: IFFALSE 53064
// ComMoveToArea ( j , mc_parking [ i ] ) ;
53044: LD_VAR 0 3
53048: PPUSH
53049: LD_EXP 125
53053: PUSH
53054: LD_VAR 0 2
53058: ARRAY
53059: PPUSH
53060: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
53064: LD_VAR 0 3
53068: PPUSH
53069: CALL_OW 256
53073: PUSH
53074: LD_INT 1000
53076: LESS
53077: PUSH
53078: LD_VAR 0 3
53082: PPUSH
53083: LD_EXP 125
53087: PUSH
53088: LD_VAR 0 2
53092: ARRAY
53093: PPUSH
53094: CALL_OW 308
53098: AND
53099: IFFALSE 53103
// continue ;
53101: GO 52986
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
53103: LD_VAR 0 3
53107: PPUSH
53108: CALL_OW 262
53112: PUSH
53113: LD_INT 2
53115: EQUAL
53116: PUSH
53117: LD_VAR 0 3
53121: PPUSH
53122: CALL_OW 261
53126: PUSH
53127: LD_INT 15
53129: LESS
53130: AND
53131: IFFALSE 53135
// continue ;
53133: GO 52986
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
53135: LD_VAR 0 3
53139: PPUSH
53140: CALL_OW 262
53144: PUSH
53145: LD_INT 1
53147: EQUAL
53148: PUSH
53149: LD_VAR 0 3
53153: PPUSH
53154: CALL_OW 261
53158: PUSH
53159: LD_INT 10
53161: LESS
53162: AND
53163: IFFALSE 53443
// begin if not depot then
53165: LD_VAR 0 9
53169: NOT
53170: IFFALSE 53174
// continue ;
53172: GO 52986
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
53174: LD_VAR 0 3
53178: PPUSH
53179: LD_VAR 0 9
53183: PPUSH
53184: LD_VAR 0 3
53188: PPUSH
53189: CALL_OW 74
53193: PPUSH
53194: CALL_OW 296
53198: PUSH
53199: LD_INT 6
53201: LESS
53202: IFFALSE 53218
// SetFuel ( j , 100 ) else
53204: LD_VAR 0 3
53208: PPUSH
53209: LD_INT 100
53211: PPUSH
53212: CALL_OW 240
53216: GO 53443
// if GetFuel ( j ) = 0 then
53218: LD_VAR 0 3
53222: PPUSH
53223: CALL_OW 261
53227: PUSH
53228: LD_INT 0
53230: EQUAL
53231: IFFALSE 53443
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
53233: LD_ADDR_EXP 120
53237: PUSH
53238: LD_EXP 120
53242: PPUSH
53243: LD_VAR 0 2
53247: PPUSH
53248: LD_EXP 120
53252: PUSH
53253: LD_VAR 0 2
53257: ARRAY
53258: PUSH
53259: LD_VAR 0 3
53263: DIFF
53264: PPUSH
53265: CALL_OW 1
53269: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
53270: LD_VAR 0 3
53274: PPUSH
53275: CALL_OW 263
53279: PUSH
53280: LD_INT 1
53282: EQUAL
53283: IFFALSE 53299
// ComExitVehicle ( IsInUnit ( j ) ) ;
53285: LD_VAR 0 3
53289: PPUSH
53290: CALL_OW 310
53294: PPUSH
53295: CALL_OW 121
// if GetControl ( j ) = control_remote then
53299: LD_VAR 0 3
53303: PPUSH
53304: CALL_OW 263
53308: PUSH
53309: LD_INT 2
53311: EQUAL
53312: IFFALSE 53323
// ComUnlink ( j ) ;
53314: LD_VAR 0 3
53318: PPUSH
53319: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
53323: LD_ADDR_VAR 0 10
53327: PUSH
53328: LD_VAR 0 2
53332: PPUSH
53333: LD_INT 3
53335: PPUSH
53336: CALL 63087 0 2
53340: ST_TO_ADDR
// if fac then
53341: LD_VAR 0 10
53345: IFFALSE 53441
// begin for k in fac do
53347: LD_ADDR_VAR 0 4
53351: PUSH
53352: LD_VAR 0 10
53356: PUSH
53357: FOR_IN
53358: IFFALSE 53439
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
53360: LD_ADDR_VAR 0 11
53364: PUSH
53365: LD_VAR 0 10
53369: PPUSH
53370: LD_VAR 0 3
53374: PPUSH
53375: CALL_OW 265
53379: PPUSH
53380: LD_VAR 0 3
53384: PPUSH
53385: CALL_OW 262
53389: PPUSH
53390: LD_VAR 0 3
53394: PPUSH
53395: CALL_OW 263
53399: PPUSH
53400: LD_VAR 0 3
53404: PPUSH
53405: CALL_OW 264
53409: PPUSH
53410: CALL 71518 0 5
53414: ST_TO_ADDR
// if components then
53415: LD_VAR 0 11
53419: IFFALSE 53437
// begin MC_InsertProduceList ( i , components ) ;
53421: LD_VAR 0 2
53425: PPUSH
53426: LD_VAR 0 11
53430: PPUSH
53431: CALL 62632 0 2
// break ;
53435: GO 53439
// end ; end ;
53437: GO 53357
53439: POP
53440: POP
// end ; continue ;
53441: GO 52986
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
53443: LD_VAR 0 3
53447: PPUSH
53448: LD_INT 1
53450: PPUSH
53451: CALL_OW 289
53455: PUSH
53456: LD_INT 100
53458: LESS
53459: PUSH
53460: LD_VAR 0 3
53464: PPUSH
53465: CALL_OW 314
53469: NOT
53470: AND
53471: IFFALSE 53500
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
53473: LD_VAR 0 3
53477: PPUSH
53478: LD_VAR 0 7
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: PPUSH
53487: LD_VAR 0 7
53491: PUSH
53492: LD_INT 3
53494: ARRAY
53495: PPUSH
53496: CALL_OW 117
// break ;
53500: GO 53504
// end ;
53502: GO 52986
53504: POP
53505: POP
// end ; end ;
53506: GO 51702
53508: POP
53509: POP
// end ;
53510: LD_VAR 0 1
53514: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
53515: LD_INT 0
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
// if not mc_bases then
53521: LD_EXP 101
53525: NOT
53526: IFFALSE 53530
// exit ;
53528: GO 53691
// for i = 1 to mc_bases do
53530: LD_ADDR_VAR 0 2
53534: PUSH
53535: DOUBLE
53536: LD_INT 1
53538: DEC
53539: ST_TO_ADDR
53540: LD_EXP 101
53544: PUSH
53545: FOR_TO
53546: IFFALSE 53689
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
53548: LD_ADDR_VAR 0 4
53552: PUSH
53553: LD_EXP 120
53557: PUSH
53558: LD_VAR 0 2
53562: ARRAY
53563: PUSH
53564: LD_EXP 123
53568: PUSH
53569: LD_VAR 0 2
53573: ARRAY
53574: UNION
53575: PPUSH
53576: LD_INT 33
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PPUSH
53586: CALL_OW 72
53590: ST_TO_ADDR
// if tmp then
53591: LD_VAR 0 4
53595: IFFALSE 53687
// for j in tmp do
53597: LD_ADDR_VAR 0 3
53601: PUSH
53602: LD_VAR 0 4
53606: PUSH
53607: FOR_IN
53608: IFFALSE 53685
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
53610: LD_VAR 0 3
53614: PPUSH
53615: CALL_OW 312
53619: NOT
53620: PUSH
53621: LD_VAR 0 3
53625: PPUSH
53626: CALL_OW 256
53630: PUSH
53631: LD_INT 250
53633: GREATEREQUAL
53634: AND
53635: IFFALSE 53648
// Connect ( j ) else
53637: LD_VAR 0 3
53641: PPUSH
53642: CALL 76998 0 1
53646: GO 53683
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
53648: LD_VAR 0 3
53652: PPUSH
53653: CALL_OW 256
53657: PUSH
53658: LD_INT 250
53660: LESS
53661: PUSH
53662: LD_VAR 0 3
53666: PPUSH
53667: CALL_OW 312
53671: AND
53672: IFFALSE 53683
// ComUnlink ( j ) ;
53674: LD_VAR 0 3
53678: PPUSH
53679: CALL_OW 136
53683: GO 53607
53685: POP
53686: POP
// end ;
53687: GO 53545
53689: POP
53690: POP
// end ;
53691: LD_VAR 0 1
53695: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
53696: LD_INT 0
53698: PPUSH
53699: PPUSH
53700: PPUSH
53701: PPUSH
53702: PPUSH
// if not mc_bases then
53703: LD_EXP 101
53707: NOT
53708: IFFALSE 53712
// exit ;
53710: GO 54157
// for i = 1 to mc_bases do
53712: LD_ADDR_VAR 0 2
53716: PUSH
53717: DOUBLE
53718: LD_INT 1
53720: DEC
53721: ST_TO_ADDR
53722: LD_EXP 101
53726: PUSH
53727: FOR_TO
53728: IFFALSE 54155
// begin if not mc_produce [ i ] then
53730: LD_EXP 122
53734: PUSH
53735: LD_VAR 0 2
53739: ARRAY
53740: NOT
53741: IFFALSE 53745
// continue ;
53743: GO 53727
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53745: LD_ADDR_VAR 0 5
53749: PUSH
53750: LD_EXP 101
53754: PUSH
53755: LD_VAR 0 2
53759: ARRAY
53760: PPUSH
53761: LD_INT 30
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PPUSH
53771: CALL_OW 72
53775: ST_TO_ADDR
// if not fac then
53776: LD_VAR 0 5
53780: NOT
53781: IFFALSE 53785
// continue ;
53783: GO 53727
// for j in fac do
53785: LD_ADDR_VAR 0 3
53789: PUSH
53790: LD_VAR 0 5
53794: PUSH
53795: FOR_IN
53796: IFFALSE 54151
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
53798: LD_VAR 0 3
53802: PPUSH
53803: CALL_OW 461
53807: PUSH
53808: LD_INT 2
53810: NONEQUAL
53811: PUSH
53812: LD_VAR 0 3
53816: PPUSH
53817: LD_INT 15
53819: PPUSH
53820: CALL 76617 0 2
53824: PUSH
53825: LD_INT 4
53827: ARRAY
53828: OR
53829: IFFALSE 53833
// continue ;
53831: GO 53795
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
53833: LD_VAR 0 3
53837: PPUSH
53838: LD_EXP 122
53842: PUSH
53843: LD_VAR 0 2
53847: ARRAY
53848: PUSH
53849: LD_INT 1
53851: ARRAY
53852: PUSH
53853: LD_INT 1
53855: ARRAY
53856: PPUSH
53857: LD_EXP 122
53861: PUSH
53862: LD_VAR 0 2
53866: ARRAY
53867: PUSH
53868: LD_INT 1
53870: ARRAY
53871: PUSH
53872: LD_INT 2
53874: ARRAY
53875: PPUSH
53876: LD_EXP 122
53880: PUSH
53881: LD_VAR 0 2
53885: ARRAY
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PUSH
53891: LD_INT 3
53893: ARRAY
53894: PPUSH
53895: LD_EXP 122
53899: PUSH
53900: LD_VAR 0 2
53904: ARRAY
53905: PUSH
53906: LD_INT 1
53908: ARRAY
53909: PUSH
53910: LD_INT 4
53912: ARRAY
53913: PPUSH
53914: CALL_OW 448
53918: PUSH
53919: LD_VAR 0 3
53923: PPUSH
53924: LD_EXP 122
53928: PUSH
53929: LD_VAR 0 2
53933: ARRAY
53934: PUSH
53935: LD_INT 1
53937: ARRAY
53938: PUSH
53939: LD_INT 1
53941: ARRAY
53942: PUSH
53943: LD_EXP 122
53947: PUSH
53948: LD_VAR 0 2
53952: ARRAY
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: PUSH
53958: LD_INT 2
53960: ARRAY
53961: PUSH
53962: LD_EXP 122
53966: PUSH
53967: LD_VAR 0 2
53971: ARRAY
53972: PUSH
53973: LD_INT 1
53975: ARRAY
53976: PUSH
53977: LD_INT 3
53979: ARRAY
53980: PUSH
53981: LD_EXP 122
53985: PUSH
53986: LD_VAR 0 2
53990: ARRAY
53991: PUSH
53992: LD_INT 1
53994: ARRAY
53995: PUSH
53996: LD_INT 4
53998: ARRAY
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: PPUSH
54006: CALL 80393 0 2
54010: AND
54011: IFFALSE 54149
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
54013: LD_VAR 0 3
54017: PPUSH
54018: LD_EXP 122
54022: PUSH
54023: LD_VAR 0 2
54027: ARRAY
54028: PUSH
54029: LD_INT 1
54031: ARRAY
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PPUSH
54037: LD_EXP 122
54041: PUSH
54042: LD_VAR 0 2
54046: ARRAY
54047: PUSH
54048: LD_INT 1
54050: ARRAY
54051: PUSH
54052: LD_INT 2
54054: ARRAY
54055: PPUSH
54056: LD_EXP 122
54060: PUSH
54061: LD_VAR 0 2
54065: ARRAY
54066: PUSH
54067: LD_INT 1
54069: ARRAY
54070: PUSH
54071: LD_INT 3
54073: ARRAY
54074: PPUSH
54075: LD_EXP 122
54079: PUSH
54080: LD_VAR 0 2
54084: ARRAY
54085: PUSH
54086: LD_INT 1
54088: ARRAY
54089: PUSH
54090: LD_INT 4
54092: ARRAY
54093: PPUSH
54094: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
54098: LD_ADDR_VAR 0 4
54102: PUSH
54103: LD_EXP 122
54107: PUSH
54108: LD_VAR 0 2
54112: ARRAY
54113: PPUSH
54114: LD_INT 1
54116: PPUSH
54117: CALL_OW 3
54121: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
54122: LD_ADDR_EXP 122
54126: PUSH
54127: LD_EXP 122
54131: PPUSH
54132: LD_VAR 0 2
54136: PPUSH
54137: LD_VAR 0 4
54141: PPUSH
54142: CALL_OW 1
54146: ST_TO_ADDR
// break ;
54147: GO 54151
// end ; end ;
54149: GO 53795
54151: POP
54152: POP
// end ;
54153: GO 53727
54155: POP
54156: POP
// end ;
54157: LD_VAR 0 1
54161: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
54162: LD_INT 0
54164: PPUSH
54165: PPUSH
54166: PPUSH
// if not mc_bases then
54167: LD_EXP 101
54171: NOT
54172: IFFALSE 54176
// exit ;
54174: GO 54265
// for i = 1 to mc_bases do
54176: LD_ADDR_VAR 0 2
54180: PUSH
54181: DOUBLE
54182: LD_INT 1
54184: DEC
54185: ST_TO_ADDR
54186: LD_EXP 101
54190: PUSH
54191: FOR_TO
54192: IFFALSE 54263
// begin if mc_attack [ i ] then
54194: LD_EXP 121
54198: PUSH
54199: LD_VAR 0 2
54203: ARRAY
54204: IFFALSE 54261
// begin tmp := mc_attack [ i ] [ 1 ] ;
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: LD_EXP 121
54215: PUSH
54216: LD_VAR 0 2
54220: ARRAY
54221: PUSH
54222: LD_INT 1
54224: ARRAY
54225: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
54226: LD_ADDR_EXP 121
54230: PUSH
54231: LD_EXP 121
54235: PPUSH
54236: LD_VAR 0 2
54240: PPUSH
54241: EMPTY
54242: PPUSH
54243: CALL_OW 1
54247: ST_TO_ADDR
// Attack ( tmp ) ;
54248: LD_VAR 0 3
54252: PPUSH
54253: CALL 130522 0 1
// exit ;
54257: POP
54258: POP
54259: GO 54265
// end ; end ;
54261: GO 54191
54263: POP
54264: POP
// end ;
54265: LD_VAR 0 1
54269: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
54270: LD_INT 0
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
// if not mc_bases then
54279: LD_EXP 101
54283: NOT
54284: IFFALSE 54288
// exit ;
54286: GO 55145
// for i = 1 to mc_bases do
54288: LD_ADDR_VAR 0 2
54292: PUSH
54293: DOUBLE
54294: LD_INT 1
54296: DEC
54297: ST_TO_ADDR
54298: LD_EXP 101
54302: PUSH
54303: FOR_TO
54304: IFFALSE 55143
// begin if not mc_bases [ i ] then
54306: LD_EXP 101
54310: PUSH
54311: LD_VAR 0 2
54315: ARRAY
54316: NOT
54317: IFFALSE 54321
// continue ;
54319: GO 54303
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
54321: LD_ADDR_VAR 0 7
54325: PUSH
54326: LD_EXP 101
54330: PUSH
54331: LD_VAR 0 2
54335: ARRAY
54336: PUSH
54337: LD_INT 1
54339: ARRAY
54340: PPUSH
54341: CALL 70844 0 1
54345: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
54346: LD_ADDR_EXP 124
54350: PUSH
54351: LD_EXP 124
54355: PPUSH
54356: LD_VAR 0 2
54360: PPUSH
54361: LD_EXP 101
54365: PUSH
54366: LD_VAR 0 2
54370: ARRAY
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: PPUSH
54376: CALL_OW 255
54380: PPUSH
54381: LD_EXP 126
54385: PUSH
54386: LD_VAR 0 2
54390: ARRAY
54391: PPUSH
54392: CALL 70809 0 2
54396: PPUSH
54397: CALL_OW 1
54401: ST_TO_ADDR
// if not mc_scan [ i ] then
54402: LD_EXP 124
54406: PUSH
54407: LD_VAR 0 2
54411: ARRAY
54412: NOT
54413: IFFALSE 54591
// begin mc_is_defending := Replace ( mc_is_defending , i , false ) ;
54415: LD_ADDR_EXP 144
54419: PUSH
54420: LD_EXP 144
54424: PPUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: LD_INT 0
54432: PPUSH
54433: CALL_OW 1
54437: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54438: LD_ADDR_VAR 0 4
54442: PUSH
54443: LD_EXP 101
54447: PUSH
54448: LD_VAR 0 2
54452: ARRAY
54453: PPUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 25
54459: PUSH
54460: LD_INT 5
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 25
54469: PUSH
54470: LD_INT 8
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 25
54479: PUSH
54480: LD_INT 9
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: PPUSH
54493: CALL_OW 72
54497: ST_TO_ADDR
// if not tmp then
54498: LD_VAR 0 4
54502: NOT
54503: IFFALSE 54507
// continue ;
54505: GO 54303
// for j in tmp do
54507: LD_ADDR_VAR 0 3
54511: PUSH
54512: LD_VAR 0 4
54516: PUSH
54517: FOR_IN
54518: IFFALSE 54589
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
54520: LD_VAR 0 3
54524: PPUSH
54525: CALL_OW 310
54529: PPUSH
54530: CALL_OW 266
54534: PUSH
54535: LD_INT 5
54537: EQUAL
54538: PUSH
54539: LD_VAR 0 3
54543: PPUSH
54544: CALL_OW 257
54548: PUSH
54549: LD_INT 1
54551: EQUAL
54552: AND
54553: PUSH
54554: LD_VAR 0 3
54558: PPUSH
54559: CALL_OW 459
54563: NOT
54564: AND
54565: PUSH
54566: LD_VAR 0 7
54570: AND
54571: IFFALSE 54587
// ComChangeProfession ( j , class ) ;
54573: LD_VAR 0 3
54577: PPUSH
54578: LD_VAR 0 7
54582: PPUSH
54583: CALL_OW 123
54587: GO 54517
54589: POP
54590: POP
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] and ( UnitFilter ( mc_bases [ i ] , [ [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) < 4 or UnitFilter ( mc_bases [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) then
54591: LD_EXP 124
54595: PUSH
54596: LD_VAR 0 2
54600: ARRAY
54601: PUSH
54602: LD_EXP 144
54606: PUSH
54607: LD_VAR 0 2
54611: ARRAY
54612: NOT
54613: AND
54614: PUSH
54615: LD_EXP 123
54619: PUSH
54620: LD_VAR 0 2
54624: ARRAY
54625: NOT
54626: AND
54627: PUSH
54628: LD_EXP 101
54632: PUSH
54633: LD_VAR 0 2
54637: ARRAY
54638: PPUSH
54639: LD_INT 50
54641: PUSH
54642: EMPTY
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 30
54650: PUSH
54651: LD_INT 32
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 30
54660: PUSH
54661: LD_INT 33
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 30
54670: PUSH
54671: LD_INT 4
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 30
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PPUSH
54699: CALL_OW 72
54703: PUSH
54704: LD_INT 4
54706: LESS
54707: PUSH
54708: LD_EXP 101
54712: PUSH
54713: LD_VAR 0 2
54717: ARRAY
54718: PPUSH
54719: LD_INT 3
54721: PUSH
54722: LD_INT 24
54724: PUSH
54725: LD_INT 1000
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 30
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 30
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PPUSH
54768: CALL_OW 72
54772: OR
54773: AND
54774: IFFALSE 55025
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
54776: LD_ADDR_EXP 144
54780: PUSH
54781: LD_EXP 144
54785: PPUSH
54786: LD_VAR 0 2
54790: PPUSH
54791: LD_INT 1
54793: PPUSH
54794: CALL_OW 1
54798: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54799: LD_ADDR_VAR 0 4
54803: PUSH
54804: LD_EXP 101
54808: PUSH
54809: LD_VAR 0 2
54813: ARRAY
54814: PPUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 25
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 25
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 25
54840: PUSH
54841: LD_INT 8
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 25
54850: PUSH
54851: LD_INT 9
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PPUSH
54865: CALL_OW 72
54869: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
54870: LD_ADDR_VAR 0 4
54874: PUSH
54875: LD_VAR 0 4
54879: PUSH
54880: LD_VAR 0 4
54884: PPUSH
54885: LD_INT 18
54887: PPUSH
54888: CALL 103941 0 2
54892: DIFF
54893: ST_TO_ADDR
// if not tmp and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
54894: LD_VAR 0 4
54898: NOT
54899: PUSH
54900: LD_EXP 101
54904: PUSH
54905: LD_VAR 0 2
54909: ARRAY
54910: PPUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 30
54916: PUSH
54917: LD_INT 4
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 30
54926: PUSH
54927: LD_INT 5
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: PPUSH
54939: CALL_OW 72
54943: NOT
54944: AND
54945: IFFALSE 55007
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ) ;
54947: LD_ADDR_VAR 0 4
54951: PUSH
54952: LD_EXP 101
54956: PUSH
54957: LD_VAR 0 2
54961: ARRAY
54962: PPUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 25
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 25
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 25
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: PPUSH
55002: CALL_OW 72
55006: ST_TO_ADDR
// BasicDefend ( i , tmp ) ;
55007: LD_VAR 0 2
55011: PPUSH
55012: LD_VAR 0 4
55016: PPUSH
55017: CALL 135231 0 2
// exit ;
55021: POP
55022: POP
55023: GO 55145
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
55025: LD_EXP 124
55029: PUSH
55030: LD_VAR 0 2
55034: ARRAY
55035: PUSH
55036: LD_EXP 144
55040: PUSH
55041: LD_VAR 0 2
55045: ARRAY
55046: NOT
55047: AND
55048: PUSH
55049: LD_EXP 123
55053: PUSH
55054: LD_VAR 0 2
55058: ARRAY
55059: AND
55060: IFFALSE 55141
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
55062: LD_ADDR_EXP 144
55066: PUSH
55067: LD_EXP 144
55071: PPUSH
55072: LD_VAR 0 2
55076: PPUSH
55077: LD_INT 1
55079: PPUSH
55080: CALL_OW 1
55084: ST_TO_ADDR
// tmp := mc_defender [ i ] ;
55085: LD_ADDR_VAR 0 4
55089: PUSH
55090: LD_EXP 123
55094: PUSH
55095: LD_VAR 0 2
55099: ARRAY
55100: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55101: LD_ADDR_EXP 123
55105: PUSH
55106: LD_EXP 123
55110: PPUSH
55111: LD_VAR 0 2
55115: PPUSH
55116: EMPTY
55117: PPUSH
55118: CALL_OW 1
55122: ST_TO_ADDR
// Defend ( i , tmp ) ;
55123: LD_VAR 0 2
55127: PPUSH
55128: LD_VAR 0 4
55132: PPUSH
55133: CALL 135827 0 2
// exit ;
55137: POP
55138: POP
55139: GO 55145
// end ; end ;
55141: GO 54303
55143: POP
55144: POP
// end ;
55145: LD_VAR 0 1
55149: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
55150: LD_INT 0
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
55162: PPUSH
// if not mc_bases then
55163: LD_EXP 101
55167: NOT
55168: IFFALSE 55172
// exit ;
55170: GO 56259
// for i = 1 to mc_bases do
55172: LD_ADDR_VAR 0 2
55176: PUSH
55177: DOUBLE
55178: LD_INT 1
55180: DEC
55181: ST_TO_ADDR
55182: LD_EXP 101
55186: PUSH
55187: FOR_TO
55188: IFFALSE 56257
// begin tmp := mc_lab [ i ] ;
55190: LD_ADDR_VAR 0 6
55194: PUSH
55195: LD_EXP 134
55199: PUSH
55200: LD_VAR 0 2
55204: ARRAY
55205: ST_TO_ADDR
// if not tmp then
55206: LD_VAR 0 6
55210: NOT
55211: IFFALSE 55215
// continue ;
55213: GO 55187
// idle_lab := 0 ;
55215: LD_ADDR_VAR 0 11
55219: PUSH
55220: LD_INT 0
55222: ST_TO_ADDR
// for j in tmp do
55223: LD_ADDR_VAR 0 3
55227: PUSH
55228: LD_VAR 0 6
55232: PUSH
55233: FOR_IN
55234: IFFALSE 56253
// begin researching := false ;
55236: LD_ADDR_VAR 0 10
55240: PUSH
55241: LD_INT 0
55243: ST_TO_ADDR
// side := GetSide ( j ) ;
55244: LD_ADDR_VAR 0 4
55248: PUSH
55249: LD_VAR 0 3
55253: PPUSH
55254: CALL_OW 255
55258: ST_TO_ADDR
// if not mc_tech [ side ] then
55259: LD_EXP 128
55263: PUSH
55264: LD_VAR 0 4
55268: ARRAY
55269: NOT
55270: IFFALSE 55274
// continue ;
55272: GO 55233
// if BuildingStatus ( j ) = bs_idle then
55274: LD_VAR 0 3
55278: PPUSH
55279: CALL_OW 461
55283: PUSH
55284: LD_INT 2
55286: EQUAL
55287: IFFALSE 55475
// begin if idle_lab and UnitsInside ( j ) < 6 then
55289: LD_VAR 0 11
55293: PUSH
55294: LD_VAR 0 3
55298: PPUSH
55299: CALL_OW 313
55303: PUSH
55304: LD_INT 6
55306: LESS
55307: AND
55308: IFFALSE 55379
// begin tmp2 := UnitsInside ( idle_lab ) ;
55310: LD_ADDR_VAR 0 9
55314: PUSH
55315: LD_VAR 0 11
55319: PPUSH
55320: CALL_OW 313
55324: ST_TO_ADDR
// if tmp2 then
55325: LD_VAR 0 9
55329: IFFALSE 55371
// for x in tmp2 do
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: LD_VAR 0 9
55340: PUSH
55341: FOR_IN
55342: IFFALSE 55369
// begin ComExitBuilding ( x ) ;
55344: LD_VAR 0 7
55348: PPUSH
55349: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
55353: LD_VAR 0 7
55357: PPUSH
55358: LD_VAR 0 3
55362: PPUSH
55363: CALL_OW 180
// end ;
55367: GO 55341
55369: POP
55370: POP
// idle_lab := 0 ;
55371: LD_ADDR_VAR 0 11
55375: PUSH
55376: LD_INT 0
55378: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
55379: LD_ADDR_VAR 0 5
55383: PUSH
55384: LD_EXP 128
55388: PUSH
55389: LD_VAR 0 4
55393: ARRAY
55394: PUSH
55395: FOR_IN
55396: IFFALSE 55456
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
55398: LD_VAR 0 3
55402: PPUSH
55403: LD_VAR 0 5
55407: PPUSH
55408: CALL_OW 430
55412: PUSH
55413: LD_VAR 0 4
55417: PPUSH
55418: LD_VAR 0 5
55422: PPUSH
55423: CALL 69914 0 2
55427: AND
55428: IFFALSE 55454
// begin researching := true ;
55430: LD_ADDR_VAR 0 10
55434: PUSH
55435: LD_INT 1
55437: ST_TO_ADDR
// ComResearch ( j , t ) ;
55438: LD_VAR 0 3
55442: PPUSH
55443: LD_VAR 0 5
55447: PPUSH
55448: CALL_OW 124
// break ;
55452: GO 55456
// end ;
55454: GO 55395
55456: POP
55457: POP
// if not researching then
55458: LD_VAR 0 10
55462: NOT
55463: IFFALSE 55475
// idle_lab := j ;
55465: LD_ADDR_VAR 0 11
55469: PUSH
55470: LD_VAR 0 3
55474: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
55475: LD_VAR 0 3
55479: PPUSH
55480: CALL_OW 461
55484: PUSH
55485: LD_INT 10
55487: EQUAL
55488: IFFALSE 56076
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
55490: LD_EXP 130
55494: PUSH
55495: LD_VAR 0 2
55499: ARRAY
55500: NOT
55501: PUSH
55502: LD_EXP 131
55506: PUSH
55507: LD_VAR 0 2
55511: ARRAY
55512: NOT
55513: AND
55514: PUSH
55515: LD_EXP 128
55519: PUSH
55520: LD_VAR 0 4
55524: ARRAY
55525: PUSH
55526: LD_INT 1
55528: GREATER
55529: AND
55530: IFFALSE 55661
// begin ComCancel ( j ) ;
55532: LD_VAR 0 3
55536: PPUSH
55537: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
55541: LD_ADDR_EXP 128
55545: PUSH
55546: LD_EXP 128
55550: PPUSH
55551: LD_VAR 0 4
55555: PPUSH
55556: LD_EXP 128
55560: PUSH
55561: LD_VAR 0 4
55565: ARRAY
55566: PPUSH
55567: LD_EXP 128
55571: PUSH
55572: LD_VAR 0 4
55576: ARRAY
55577: PUSH
55578: LD_INT 1
55580: MINUS
55581: PPUSH
55582: LD_EXP 128
55586: PUSH
55587: LD_VAR 0 4
55591: ARRAY
55592: PPUSH
55593: LD_INT 0
55595: PPUSH
55596: CALL 73438 0 4
55600: PPUSH
55601: CALL_OW 1
55605: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
55606: LD_ADDR_EXP 128
55610: PUSH
55611: LD_EXP 128
55615: PPUSH
55616: LD_VAR 0 4
55620: PPUSH
55621: LD_EXP 128
55625: PUSH
55626: LD_VAR 0 4
55630: ARRAY
55631: PPUSH
55632: LD_EXP 128
55636: PUSH
55637: LD_VAR 0 4
55641: ARRAY
55642: PPUSH
55643: LD_INT 1
55645: PPUSH
55646: LD_INT 0
55648: PPUSH
55649: CALL 73438 0 4
55653: PPUSH
55654: CALL_OW 1
55658: ST_TO_ADDR
// continue ;
55659: GO 55233
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
55661: LD_EXP 130
55665: PUSH
55666: LD_VAR 0 2
55670: ARRAY
55671: PUSH
55672: LD_EXP 131
55676: PUSH
55677: LD_VAR 0 2
55681: ARRAY
55682: NOT
55683: AND
55684: IFFALSE 55811
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
55686: LD_ADDR_EXP 131
55690: PUSH
55691: LD_EXP 131
55695: PPUSH
55696: LD_VAR 0 2
55700: PUSH
55701: LD_EXP 131
55705: PUSH
55706: LD_VAR 0 2
55710: ARRAY
55711: PUSH
55712: LD_INT 1
55714: PLUS
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PPUSH
55720: LD_EXP 130
55724: PUSH
55725: LD_VAR 0 2
55729: ARRAY
55730: PUSH
55731: LD_INT 1
55733: ARRAY
55734: PPUSH
55735: CALL 74020 0 3
55739: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
55740: LD_EXP 130
55744: PUSH
55745: LD_VAR 0 2
55749: ARRAY
55750: PUSH
55751: LD_INT 1
55753: ARRAY
55754: PPUSH
55755: LD_INT 112
55757: PPUSH
55758: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
55762: LD_ADDR_VAR 0 9
55766: PUSH
55767: LD_EXP 130
55771: PUSH
55772: LD_VAR 0 2
55776: ARRAY
55777: PPUSH
55778: LD_INT 1
55780: PPUSH
55781: CALL_OW 3
55785: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
55786: LD_ADDR_EXP 130
55790: PUSH
55791: LD_EXP 130
55795: PPUSH
55796: LD_VAR 0 2
55800: PPUSH
55801: LD_VAR 0 9
55805: PPUSH
55806: CALL_OW 1
55810: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
55811: LD_EXP 130
55815: PUSH
55816: LD_VAR 0 2
55820: ARRAY
55821: PUSH
55822: LD_EXP 131
55826: PUSH
55827: LD_VAR 0 2
55831: ARRAY
55832: AND
55833: PUSH
55834: LD_EXP 131
55838: PUSH
55839: LD_VAR 0 2
55843: ARRAY
55844: PUSH
55845: LD_INT 1
55847: ARRAY
55848: PPUSH
55849: CALL_OW 310
55853: NOT
55854: AND
55855: PUSH
55856: LD_VAR 0 3
55860: PPUSH
55861: CALL_OW 313
55865: PUSH
55866: LD_INT 6
55868: EQUAL
55869: AND
55870: IFFALSE 55926
// begin tmp2 := UnitsInside ( j ) ;
55872: LD_ADDR_VAR 0 9
55876: PUSH
55877: LD_VAR 0 3
55881: PPUSH
55882: CALL_OW 313
55886: ST_TO_ADDR
// if tmp2 = 6 then
55887: LD_VAR 0 9
55891: PUSH
55892: LD_INT 6
55894: EQUAL
55895: IFFALSE 55926
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
55897: LD_VAR 0 9
55901: PUSH
55902: LD_INT 1
55904: ARRAY
55905: PPUSH
55906: LD_INT 112
55908: PPUSH
55909: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
55913: LD_VAR 0 9
55917: PUSH
55918: LD_INT 1
55920: ARRAY
55921: PPUSH
55922: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
55926: LD_EXP 131
55930: PUSH
55931: LD_VAR 0 2
55935: ARRAY
55936: PUSH
55937: LD_EXP 131
55941: PUSH
55942: LD_VAR 0 2
55946: ARRAY
55947: PUSH
55948: LD_INT 1
55950: ARRAY
55951: PPUSH
55952: CALL_OW 314
55956: NOT
55957: AND
55958: PUSH
55959: LD_EXP 131
55963: PUSH
55964: LD_VAR 0 2
55968: ARRAY
55969: PUSH
55970: LD_INT 1
55972: ARRAY
55973: PPUSH
55974: CALL_OW 310
55978: NOT
55979: AND
55980: IFFALSE 56006
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
55982: LD_EXP 131
55986: PUSH
55987: LD_VAR 0 2
55991: ARRAY
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PPUSH
55997: LD_VAR 0 3
56001: PPUSH
56002: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
56006: LD_EXP 131
56010: PUSH
56011: LD_VAR 0 2
56015: ARRAY
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PPUSH
56021: CALL_OW 310
56025: PUSH
56026: LD_EXP 131
56030: PUSH
56031: LD_VAR 0 2
56035: ARRAY
56036: PUSH
56037: LD_INT 1
56039: ARRAY
56040: PPUSH
56041: CALL_OW 310
56045: PPUSH
56046: CALL_OW 461
56050: PUSH
56051: LD_INT 3
56053: NONEQUAL
56054: AND
56055: IFFALSE 56076
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
56057: LD_EXP 131
56061: PUSH
56062: LD_VAR 0 2
56066: ARRAY
56067: PUSH
56068: LD_INT 1
56070: ARRAY
56071: PPUSH
56072: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
56076: LD_VAR 0 3
56080: PPUSH
56081: CALL_OW 461
56085: PUSH
56086: LD_INT 6
56088: EQUAL
56089: PUSH
56090: LD_VAR 0 6
56094: PUSH
56095: LD_INT 1
56097: GREATER
56098: AND
56099: IFFALSE 56251
// begin sci := [ ] ;
56101: LD_ADDR_VAR 0 8
56105: PUSH
56106: EMPTY
56107: ST_TO_ADDR
// for x in ( tmp diff j ) do
56108: LD_ADDR_VAR 0 7
56112: PUSH
56113: LD_VAR 0 6
56117: PUSH
56118: LD_VAR 0 3
56122: DIFF
56123: PUSH
56124: FOR_IN
56125: IFFALSE 56177
// begin if sci = 6 then
56127: LD_VAR 0 8
56131: PUSH
56132: LD_INT 6
56134: EQUAL
56135: IFFALSE 56139
// break ;
56137: GO 56177
// if BuildingStatus ( x ) = bs_idle then
56139: LD_VAR 0 7
56143: PPUSH
56144: CALL_OW 461
56148: PUSH
56149: LD_INT 2
56151: EQUAL
56152: IFFALSE 56175
// sci := sci ^ UnitsInside ( x ) ;
56154: LD_ADDR_VAR 0 8
56158: PUSH
56159: LD_VAR 0 8
56163: PUSH
56164: LD_VAR 0 7
56168: PPUSH
56169: CALL_OW 313
56173: ADD
56174: ST_TO_ADDR
// end ;
56175: GO 56124
56177: POP
56178: POP
// if not sci then
56179: LD_VAR 0 8
56183: NOT
56184: IFFALSE 56188
// continue ;
56186: GO 55233
// for x in sci do
56188: LD_ADDR_VAR 0 7
56192: PUSH
56193: LD_VAR 0 8
56197: PUSH
56198: FOR_IN
56199: IFFALSE 56249
// if IsInUnit ( x ) and not HasTask ( x ) then
56201: LD_VAR 0 7
56205: PPUSH
56206: CALL_OW 310
56210: PUSH
56211: LD_VAR 0 7
56215: PPUSH
56216: CALL_OW 314
56220: NOT
56221: AND
56222: IFFALSE 56247
// begin ComExitBuilding ( x ) ;
56224: LD_VAR 0 7
56228: PPUSH
56229: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
56233: LD_VAR 0 7
56237: PPUSH
56238: LD_VAR 0 3
56242: PPUSH
56243: CALL_OW 180
// end ;
56247: GO 56198
56249: POP
56250: POP
// end ; end ;
56251: GO 55233
56253: POP
56254: POP
// end ;
56255: GO 55187
56257: POP
56258: POP
// end ;
56259: LD_VAR 0 1
56263: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
56264: LD_INT 0
56266: PPUSH
56267: PPUSH
// if not mc_bases then
56268: LD_EXP 101
56272: NOT
56273: IFFALSE 56277
// exit ;
56275: GO 56358
// for i = 1 to mc_bases do
56277: LD_ADDR_VAR 0 2
56281: PUSH
56282: DOUBLE
56283: LD_INT 1
56285: DEC
56286: ST_TO_ADDR
56287: LD_EXP 101
56291: PUSH
56292: FOR_TO
56293: IFFALSE 56356
// if mc_mines [ i ] and mc_miners [ i ] then
56295: LD_EXP 114
56299: PUSH
56300: LD_VAR 0 2
56304: ARRAY
56305: PUSH
56306: LD_EXP 115
56310: PUSH
56311: LD_VAR 0 2
56315: ARRAY
56316: AND
56317: IFFALSE 56354
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
56319: LD_EXP 115
56323: PUSH
56324: LD_VAR 0 2
56328: ARRAY
56329: PUSH
56330: LD_INT 1
56332: ARRAY
56333: PPUSH
56334: CALL_OW 255
56338: PPUSH
56339: LD_EXP 114
56343: PUSH
56344: LD_VAR 0 2
56348: ARRAY
56349: PPUSH
56350: CALL 70997 0 2
56354: GO 56292
56356: POP
56357: POP
// end ;
56358: LD_VAR 0 1
56362: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
56363: LD_INT 0
56365: PPUSH
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
56370: PPUSH
56371: PPUSH
56372: PPUSH
// if not mc_bases or not mc_parking then
56373: LD_EXP 101
56377: NOT
56378: PUSH
56379: LD_EXP 125
56383: NOT
56384: OR
56385: IFFALSE 56389
// exit ;
56387: GO 57127
// for i = 1 to mc_bases do
56389: LD_ADDR_VAR 0 2
56393: PUSH
56394: DOUBLE
56395: LD_INT 1
56397: DEC
56398: ST_TO_ADDR
56399: LD_EXP 101
56403: PUSH
56404: FOR_TO
56405: IFFALSE 57125
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
56407: LD_EXP 101
56411: PUSH
56412: LD_VAR 0 2
56416: ARRAY
56417: NOT
56418: PUSH
56419: LD_EXP 125
56423: PUSH
56424: LD_VAR 0 2
56428: ARRAY
56429: NOT
56430: OR
56431: IFFALSE 56435
// continue ;
56433: GO 56404
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
56435: LD_ADDR_VAR 0 5
56439: PUSH
56440: LD_EXP 101
56444: PUSH
56445: LD_VAR 0 2
56449: ARRAY
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PPUSH
56455: CALL_OW 255
56459: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56460: LD_ADDR_VAR 0 6
56464: PUSH
56465: LD_EXP 101
56469: PUSH
56470: LD_VAR 0 2
56474: ARRAY
56475: PPUSH
56476: LD_INT 30
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PPUSH
56486: CALL_OW 72
56490: ST_TO_ADDR
// if not fac then
56491: LD_VAR 0 6
56495: NOT
56496: IFFALSE 56547
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56498: LD_ADDR_VAR 0 6
56502: PUSH
56503: LD_EXP 101
56507: PUSH
56508: LD_VAR 0 2
56512: ARRAY
56513: PPUSH
56514: LD_INT 2
56516: PUSH
56517: LD_INT 30
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 30
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: PPUSH
56542: CALL_OW 72
56546: ST_TO_ADDR
// if not fac then
56547: LD_VAR 0 6
56551: NOT
56552: IFFALSE 56556
// continue ;
56554: GO 56404
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
56556: LD_ADDR_VAR 0 7
56560: PUSH
56561: LD_EXP 125
56565: PUSH
56566: LD_VAR 0 2
56570: ARRAY
56571: PPUSH
56572: LD_INT 22
56574: PUSH
56575: LD_VAR 0 5
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 21
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: LD_INT 60
56599: PUSH
56600: EMPTY
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 24
56612: PUSH
56613: LD_INT 1000
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 70
56634: ST_TO_ADDR
// for j in fac do
56635: LD_ADDR_VAR 0 3
56639: PUSH
56640: LD_VAR 0 6
56644: PUSH
56645: FOR_IN
56646: IFFALSE 56741
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
56648: LD_ADDR_VAR 0 7
56652: PUSH
56653: LD_VAR 0 7
56657: PUSH
56658: LD_INT 22
56660: PUSH
56661: LD_VAR 0 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 91
56672: PUSH
56673: LD_VAR 0 3
56677: PUSH
56678: LD_INT 15
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 21
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 60
56701: PUSH
56702: EMPTY
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 24
56714: PUSH
56715: LD_INT 1000
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: PPUSH
56733: CALL_OW 69
56737: UNION
56738: ST_TO_ADDR
56739: GO 56645
56741: POP
56742: POP
// if not vehs then
56743: LD_VAR 0 7
56747: NOT
56748: IFFALSE 56774
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56750: LD_ADDR_EXP 113
56754: PUSH
56755: LD_EXP 113
56759: PPUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: EMPTY
56766: PPUSH
56767: CALL_OW 1
56771: ST_TO_ADDR
// continue ;
56772: GO 56404
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56774: LD_ADDR_VAR 0 8
56778: PUSH
56779: LD_EXP 101
56783: PUSH
56784: LD_VAR 0 2
56788: ARRAY
56789: PPUSH
56790: LD_INT 30
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PPUSH
56800: CALL_OW 72
56804: ST_TO_ADDR
// if tmp then
56805: LD_VAR 0 8
56809: IFFALSE 56912
// begin for j in tmp do
56811: LD_ADDR_VAR 0 3
56815: PUSH
56816: LD_VAR 0 8
56820: PUSH
56821: FOR_IN
56822: IFFALSE 56910
// for k in UnitsInside ( j ) do
56824: LD_ADDR_VAR 0 4
56828: PUSH
56829: LD_VAR 0 3
56833: PPUSH
56834: CALL_OW 313
56838: PUSH
56839: FOR_IN
56840: IFFALSE 56906
// if k then
56842: LD_VAR 0 4
56846: IFFALSE 56904
// if not k in mc_repair_vehicle [ i ] then
56848: LD_VAR 0 4
56852: PUSH
56853: LD_EXP 113
56857: PUSH
56858: LD_VAR 0 2
56862: ARRAY
56863: IN
56864: NOT
56865: IFFALSE 56904
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
56867: LD_ADDR_EXP 113
56871: PUSH
56872: LD_EXP 113
56876: PPUSH
56877: LD_VAR 0 2
56881: PPUSH
56882: LD_EXP 113
56886: PUSH
56887: LD_VAR 0 2
56891: ARRAY
56892: PUSH
56893: LD_VAR 0 4
56897: UNION
56898: PPUSH
56899: CALL_OW 1
56903: ST_TO_ADDR
56904: GO 56839
56906: POP
56907: POP
56908: GO 56821
56910: POP
56911: POP
// end ; if not mc_repair_vehicle [ i ] then
56912: LD_EXP 113
56916: PUSH
56917: LD_VAR 0 2
56921: ARRAY
56922: NOT
56923: IFFALSE 56927
// continue ;
56925: GO 56404
// for j in mc_repair_vehicle [ i ] do
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_EXP 113
56936: PUSH
56937: LD_VAR 0 2
56941: ARRAY
56942: PUSH
56943: FOR_IN
56944: IFFALSE 57121
// begin if GetClass ( j ) <> 3 then
56946: LD_VAR 0 3
56950: PPUSH
56951: CALL_OW 257
56955: PUSH
56956: LD_INT 3
56958: NONEQUAL
56959: IFFALSE 57000
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
56961: LD_ADDR_EXP 113
56965: PUSH
56966: LD_EXP 113
56970: PPUSH
56971: LD_VAR 0 2
56975: PPUSH
56976: LD_EXP 113
56980: PUSH
56981: LD_VAR 0 2
56985: ARRAY
56986: PUSH
56987: LD_VAR 0 3
56991: DIFF
56992: PPUSH
56993: CALL_OW 1
56997: ST_TO_ADDR
// continue ;
56998: GO 56943
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
57000: LD_VAR 0 3
57004: PPUSH
57005: CALL_OW 311
57009: NOT
57010: PUSH
57011: LD_VAR 0 3
57015: PUSH
57016: LD_EXP 104
57020: PUSH
57021: LD_VAR 0 2
57025: ARRAY
57026: PUSH
57027: LD_INT 1
57029: ARRAY
57030: IN
57031: NOT
57032: AND
57033: PUSH
57034: LD_VAR 0 3
57038: PUSH
57039: LD_EXP 104
57043: PUSH
57044: LD_VAR 0 2
57048: ARRAY
57049: PUSH
57050: LD_INT 2
57052: ARRAY
57053: IN
57054: NOT
57055: AND
57056: IFFALSE 57119
// begin if IsInUnit ( j ) then
57058: LD_VAR 0 3
57062: PPUSH
57063: CALL_OW 310
57067: IFFALSE 57080
// ComExitBuilding ( j ) else
57069: LD_VAR 0 3
57073: PPUSH
57074: CALL_OW 122
57078: GO 57119
// if not WantToRepairVehicle ( j , vehs [ 1 ] ) then
57080: LD_VAR 0 3
57084: PPUSH
57085: LD_VAR 0 7
57089: PUSH
57090: LD_INT 1
57092: ARRAY
57093: PPUSH
57094: CALL 108424 0 2
57098: NOT
57099: IFFALSE 57119
// ComRepairVehicle ( j , vehs [ 1 ] ) ;
57101: LD_VAR 0 3
57105: PPUSH
57106: LD_VAR 0 7
57110: PUSH
57111: LD_INT 1
57113: ARRAY
57114: PPUSH
57115: CALL_OW 129
// end ; end ;
57119: GO 56943
57121: POP
57122: POP
// end ;
57123: GO 56404
57125: POP
57126: POP
// end ;
57127: LD_VAR 0 1
57131: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
57132: LD_INT 0
57134: PPUSH
57135: PPUSH
57136: PPUSH
57137: PPUSH
57138: PPUSH
57139: PPUSH
57140: PPUSH
57141: PPUSH
57142: PPUSH
57143: PPUSH
57144: PPUSH
// if not mc_bases then
57145: LD_EXP 101
57149: NOT
57150: IFFALSE 57154
// exit ;
57152: GO 57956
// for i = 1 to mc_bases do
57154: LD_ADDR_VAR 0 2
57158: PUSH
57159: DOUBLE
57160: LD_INT 1
57162: DEC
57163: ST_TO_ADDR
57164: LD_EXP 101
57168: PUSH
57169: FOR_TO
57170: IFFALSE 57954
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
57172: LD_EXP 129
57176: PUSH
57177: LD_VAR 0 2
57181: ARRAY
57182: NOT
57183: PUSH
57184: LD_EXP 104
57188: PUSH
57189: LD_VAR 0 2
57193: ARRAY
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: OR
57199: PUSH
57200: LD_EXP 104
57204: PUSH
57205: LD_VAR 0 2
57209: ARRAY
57210: PUSH
57211: LD_INT 2
57213: ARRAY
57214: OR
57215: PUSH
57216: LD_EXP 127
57220: PUSH
57221: LD_VAR 0 2
57225: ARRAY
57226: PPUSH
57227: LD_INT 1
57229: PPUSH
57230: CALL_OW 325
57234: NOT
57235: OR
57236: PUSH
57237: LD_EXP 124
57241: PUSH
57242: LD_VAR 0 2
57246: ARRAY
57247: OR
57248: IFFALSE 57252
// continue ;
57250: GO 57169
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
57252: LD_ADDR_VAR 0 8
57256: PUSH
57257: LD_EXP 101
57261: PUSH
57262: LD_VAR 0 2
57266: ARRAY
57267: PPUSH
57268: LD_INT 25
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 50
57280: PUSH
57281: EMPTY
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: LD_INT 60
57289: PUSH
57290: EMPTY
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: PPUSH
57302: CALL_OW 72
57306: PUSH
57307: LD_EXP 105
57311: PUSH
57312: LD_VAR 0 2
57316: ARRAY
57317: DIFF
57318: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57319: LD_ADDR_VAR 0 9
57323: PUSH
57324: LD_EXP 101
57328: PUSH
57329: LD_VAR 0 2
57333: ARRAY
57334: PPUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 30
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 30
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: PPUSH
57363: CALL_OW 72
57367: ST_TO_ADDR
// if not tmp or not dep then
57368: LD_VAR 0 8
57372: NOT
57373: PUSH
57374: LD_VAR 0 9
57378: NOT
57379: OR
57380: IFFALSE 57384
// continue ;
57382: GO 57169
// side := GetSide ( tmp [ 1 ] ) ;
57384: LD_ADDR_VAR 0 11
57388: PUSH
57389: LD_VAR 0 8
57393: PUSH
57394: LD_INT 1
57396: ARRAY
57397: PPUSH
57398: CALL_OW 255
57402: ST_TO_ADDR
// dep := dep [ 1 ] ;
57403: LD_ADDR_VAR 0 9
57407: PUSH
57408: LD_VAR 0 9
57412: PUSH
57413: LD_INT 1
57415: ARRAY
57416: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
57417: LD_ADDR_VAR 0 7
57421: PUSH
57422: LD_EXP 129
57426: PUSH
57427: LD_VAR 0 2
57431: ARRAY
57432: PPUSH
57433: LD_INT 22
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 25
57445: PUSH
57446: LD_INT 12
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PPUSH
57457: CALL_OW 70
57461: PUSH
57462: LD_INT 22
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 25
57474: PUSH
57475: LD_INT 12
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 91
57484: PUSH
57485: LD_VAR 0 9
57489: PUSH
57490: LD_INT 20
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: PPUSH
57503: CALL_OW 69
57507: UNION
57508: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
57509: LD_ADDR_VAR 0 10
57513: PUSH
57514: LD_EXP 129
57518: PUSH
57519: LD_VAR 0 2
57523: ARRAY
57524: PPUSH
57525: LD_INT 81
57527: PUSH
57528: LD_VAR 0 11
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PPUSH
57537: CALL_OW 70
57541: ST_TO_ADDR
// if not apes or danger_at_area then
57542: LD_VAR 0 7
57546: NOT
57547: PUSH
57548: LD_VAR 0 10
57552: OR
57553: IFFALSE 57603
// begin if mc_taming [ i ] then
57555: LD_EXP 132
57559: PUSH
57560: LD_VAR 0 2
57564: ARRAY
57565: IFFALSE 57601
// begin MC_Reset ( i , 121 ) ;
57567: LD_VAR 0 2
57571: PPUSH
57572: LD_INT 121
57574: PPUSH
57575: CALL 42519 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57579: LD_ADDR_EXP 132
57583: PUSH
57584: LD_EXP 132
57588: PPUSH
57589: LD_VAR 0 2
57593: PPUSH
57594: EMPTY
57595: PPUSH
57596: CALL_OW 1
57600: ST_TO_ADDR
// end ; continue ;
57601: GO 57169
// end ; for j in tmp do
57603: LD_ADDR_VAR 0 3
57607: PUSH
57608: LD_VAR 0 8
57612: PUSH
57613: FOR_IN
57614: IFFALSE 57950
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
57616: LD_VAR 0 3
57620: PUSH
57621: LD_EXP 132
57625: PUSH
57626: LD_VAR 0 2
57630: ARRAY
57631: IN
57632: NOT
57633: PUSH
57634: LD_EXP 132
57638: PUSH
57639: LD_VAR 0 2
57643: ARRAY
57644: PUSH
57645: LD_INT 3
57647: LESS
57648: AND
57649: IFFALSE 57707
// begin SetTag ( j , 121 ) ;
57651: LD_VAR 0 3
57655: PPUSH
57656: LD_INT 121
57658: PPUSH
57659: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
57663: LD_ADDR_EXP 132
57667: PUSH
57668: LD_EXP 132
57672: PPUSH
57673: LD_VAR 0 2
57677: PUSH
57678: LD_EXP 132
57682: PUSH
57683: LD_VAR 0 2
57687: ARRAY
57688: PUSH
57689: LD_INT 1
57691: PLUS
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: CALL 74020 0 3
57706: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
57707: LD_VAR 0 3
57711: PUSH
57712: LD_EXP 132
57716: PUSH
57717: LD_VAR 0 2
57721: ARRAY
57722: IN
57723: IFFALSE 57948
// begin if GetClass ( j ) <> 4 then
57725: LD_VAR 0 3
57729: PPUSH
57730: CALL_OW 257
57734: PUSH
57735: LD_INT 4
57737: NONEQUAL
57738: IFFALSE 57791
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
57740: LD_ADDR_EXP 132
57744: PUSH
57745: LD_EXP 132
57749: PPUSH
57750: LD_VAR 0 2
57754: PPUSH
57755: LD_EXP 132
57759: PUSH
57760: LD_VAR 0 2
57764: ARRAY
57765: PUSH
57766: LD_VAR 0 3
57770: DIFF
57771: PPUSH
57772: CALL_OW 1
57776: ST_TO_ADDR
// SetTag ( j , 0 ) ;
57777: LD_VAR 0 3
57781: PPUSH
57782: LD_INT 0
57784: PPUSH
57785: CALL_OW 109
// continue ;
57789: GO 57613
// end ; if IsInUnit ( j ) then
57791: LD_VAR 0 3
57795: PPUSH
57796: CALL_OW 310
57800: IFFALSE 57811
// ComExitBuilding ( j ) ;
57802: LD_VAR 0 3
57806: PPUSH
57807: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
57811: LD_ADDR_VAR 0 6
57815: PUSH
57816: LD_VAR 0 7
57820: PPUSH
57821: LD_VAR 0 3
57825: PPUSH
57826: CALL_OW 74
57830: ST_TO_ADDR
// if not ape then
57831: LD_VAR 0 6
57835: NOT
57836: IFFALSE 57840
// break ;
57838: GO 57950
// x := GetX ( ape ) ;
57840: LD_ADDR_VAR 0 4
57844: PUSH
57845: LD_VAR 0 6
57849: PPUSH
57850: CALL_OW 250
57854: ST_TO_ADDR
// y := GetY ( ape ) ;
57855: LD_ADDR_VAR 0 5
57859: PUSH
57860: LD_VAR 0 6
57864: PPUSH
57865: CALL_OW 251
57869: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57870: LD_VAR 0 4
57874: PPUSH
57875: LD_VAR 0 5
57879: PPUSH
57880: CALL_OW 488
57884: NOT
57885: PUSH
57886: LD_VAR 0 11
57890: PPUSH
57891: LD_VAR 0 4
57895: PPUSH
57896: LD_VAR 0 5
57900: PPUSH
57901: LD_INT 20
57903: PPUSH
57904: CALL 74916 0 4
57908: PUSH
57909: LD_INT 4
57911: ARRAY
57912: OR
57913: IFFALSE 57917
// break ;
57915: GO 57950
// if not HasTask ( j ) then
57917: LD_VAR 0 3
57921: PPUSH
57922: CALL_OW 314
57926: NOT
57927: IFFALSE 57948
// ComTameXY ( j , x , y ) ;
57929: LD_VAR 0 3
57933: PPUSH
57934: LD_VAR 0 4
57938: PPUSH
57939: LD_VAR 0 5
57943: PPUSH
57944: CALL_OW 131
// end ; end ;
57948: GO 57613
57950: POP
57951: POP
// end ;
57952: GO 57169
57954: POP
57955: POP
// end ;
57956: LD_VAR 0 1
57960: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
57961: LD_INT 0
57963: PPUSH
57964: PPUSH
57965: PPUSH
57966: PPUSH
57967: PPUSH
57968: PPUSH
57969: PPUSH
57970: PPUSH
// if not mc_bases then
57971: LD_EXP 101
57975: NOT
57976: IFFALSE 57980
// exit ;
57978: GO 58606
// for i = 1 to mc_bases do
57980: LD_ADDR_VAR 0 2
57984: PUSH
57985: DOUBLE
57986: LD_INT 1
57988: DEC
57989: ST_TO_ADDR
57990: LD_EXP 101
57994: PUSH
57995: FOR_TO
57996: IFFALSE 58604
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
57998: LD_EXP 130
58002: PUSH
58003: LD_VAR 0 2
58007: ARRAY
58008: NOT
58009: PUSH
58010: LD_EXP 130
58014: PUSH
58015: LD_VAR 0 2
58019: ARRAY
58020: PPUSH
58021: LD_INT 25
58023: PUSH
58024: LD_INT 12
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PPUSH
58031: CALL_OW 72
58035: NOT
58036: OR
58037: IFFALSE 58041
// continue ;
58039: GO 57995
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
58041: LD_ADDR_VAR 0 5
58045: PUSH
58046: LD_EXP 130
58050: PUSH
58051: LD_VAR 0 2
58055: ARRAY
58056: PUSH
58057: LD_INT 1
58059: ARRAY
58060: PPUSH
58061: CALL_OW 255
58065: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
58066: LD_VAR 0 5
58070: PPUSH
58071: LD_INT 2
58073: PPUSH
58074: CALL_OW 325
58078: IFFALSE 58331
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58080: LD_ADDR_VAR 0 4
58084: PUSH
58085: LD_EXP 130
58089: PUSH
58090: LD_VAR 0 2
58094: ARRAY
58095: PPUSH
58096: LD_INT 25
58098: PUSH
58099: LD_INT 16
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PPUSH
58106: CALL_OW 72
58110: ST_TO_ADDR
// if tmp < 6 then
58111: LD_VAR 0 4
58115: PUSH
58116: LD_INT 6
58118: LESS
58119: IFFALSE 58331
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58121: LD_ADDR_VAR 0 6
58125: PUSH
58126: LD_EXP 101
58130: PUSH
58131: LD_VAR 0 2
58135: ARRAY
58136: PPUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 30
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 30
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: PPUSH
58165: CALL_OW 72
58169: ST_TO_ADDR
// if depot then
58170: LD_VAR 0 6
58174: IFFALSE 58331
// begin selected := 0 ;
58176: LD_ADDR_VAR 0 7
58180: PUSH
58181: LD_INT 0
58183: ST_TO_ADDR
// for j in depot do
58184: LD_ADDR_VAR 0 3
58188: PUSH
58189: LD_VAR 0 6
58193: PUSH
58194: FOR_IN
58195: IFFALSE 58226
// begin if UnitsInside ( j ) < 6 then
58197: LD_VAR 0 3
58201: PPUSH
58202: CALL_OW 313
58206: PUSH
58207: LD_INT 6
58209: LESS
58210: IFFALSE 58224
// begin selected := j ;
58212: LD_ADDR_VAR 0 7
58216: PUSH
58217: LD_VAR 0 3
58221: ST_TO_ADDR
// break ;
58222: GO 58226
// end ; end ;
58224: GO 58194
58226: POP
58227: POP
// if selected then
58228: LD_VAR 0 7
58232: IFFALSE 58331
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58234: LD_ADDR_VAR 0 3
58238: PUSH
58239: LD_EXP 130
58243: PUSH
58244: LD_VAR 0 2
58248: ARRAY
58249: PPUSH
58250: LD_INT 25
58252: PUSH
58253: LD_INT 12
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PPUSH
58260: CALL_OW 72
58264: PUSH
58265: FOR_IN
58266: IFFALSE 58329
// if not HasTask ( j ) then
58268: LD_VAR 0 3
58272: PPUSH
58273: CALL_OW 314
58277: NOT
58278: IFFALSE 58327
// begin if not IsInUnit ( j ) then
58280: LD_VAR 0 3
58284: PPUSH
58285: CALL_OW 310
58289: NOT
58290: IFFALSE 58306
// ComEnterUnit ( j , selected ) ;
58292: LD_VAR 0 3
58296: PPUSH
58297: LD_VAR 0 7
58301: PPUSH
58302: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
58306: LD_VAR 0 3
58310: PPUSH
58311: LD_INT 16
58313: PPUSH
58314: CALL_OW 183
// AddComExitBuilding ( j ) ;
58318: LD_VAR 0 3
58322: PPUSH
58323: CALL_OW 182
// end ;
58327: GO 58265
58329: POP
58330: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
58331: LD_VAR 0 5
58335: PPUSH
58336: LD_INT 11
58338: PPUSH
58339: CALL_OW 325
58343: IFFALSE 58602
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58345: LD_ADDR_VAR 0 4
58349: PUSH
58350: LD_EXP 130
58354: PUSH
58355: LD_VAR 0 2
58359: ARRAY
58360: PPUSH
58361: LD_INT 25
58363: PUSH
58364: LD_INT 16
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PPUSH
58371: CALL_OW 72
58375: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
58376: LD_VAR 0 4
58380: PUSH
58381: LD_INT 6
58383: GREATEREQUAL
58384: PUSH
58385: LD_VAR 0 5
58389: PPUSH
58390: LD_INT 2
58392: PPUSH
58393: CALL_OW 325
58397: NOT
58398: OR
58399: IFFALSE 58602
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58401: LD_ADDR_VAR 0 8
58405: PUSH
58406: LD_EXP 101
58410: PUSH
58411: LD_VAR 0 2
58415: ARRAY
58416: PPUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 30
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 30
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: PPUSH
58445: CALL_OW 72
58449: ST_TO_ADDR
// if barracks then
58450: LD_VAR 0 8
58454: IFFALSE 58602
// begin selected := 0 ;
58456: LD_ADDR_VAR 0 7
58460: PUSH
58461: LD_INT 0
58463: ST_TO_ADDR
// for j in barracks do
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: LD_VAR 0 8
58473: PUSH
58474: FOR_IN
58475: IFFALSE 58506
// begin if UnitsInside ( j ) < 6 then
58477: LD_VAR 0 3
58481: PPUSH
58482: CALL_OW 313
58486: PUSH
58487: LD_INT 6
58489: LESS
58490: IFFALSE 58504
// begin selected := j ;
58492: LD_ADDR_VAR 0 7
58496: PUSH
58497: LD_VAR 0 3
58501: ST_TO_ADDR
// break ;
58502: GO 58506
// end ; end ;
58504: GO 58474
58506: POP
58507: POP
// if selected then
58508: LD_VAR 0 7
58512: IFFALSE 58602
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58514: LD_ADDR_VAR 0 3
58518: PUSH
58519: LD_EXP 130
58523: PUSH
58524: LD_VAR 0 2
58528: ARRAY
58529: PPUSH
58530: LD_INT 25
58532: PUSH
58533: LD_INT 12
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PPUSH
58540: CALL_OW 72
58544: PUSH
58545: FOR_IN
58546: IFFALSE 58600
// if not IsInUnit ( j ) and not HasTask ( j ) then
58548: LD_VAR 0 3
58552: PPUSH
58553: CALL_OW 310
58557: NOT
58558: PUSH
58559: LD_VAR 0 3
58563: PPUSH
58564: CALL_OW 314
58568: NOT
58569: AND
58570: IFFALSE 58598
// begin ComEnterUnit ( j , selected ) ;
58572: LD_VAR 0 3
58576: PPUSH
58577: LD_VAR 0 7
58581: PPUSH
58582: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
58586: LD_VAR 0 3
58590: PPUSH
58591: LD_INT 15
58593: PPUSH
58594: CALL_OW 183
// end ;
58598: GO 58545
58600: POP
58601: POP
// end ; end ; end ; end ; end ;
58602: GO 57995
58604: POP
58605: POP
// end ;
58606: LD_VAR 0 1
58610: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
58611: LD_INT 0
58613: PPUSH
58614: PPUSH
58615: PPUSH
58616: PPUSH
// if not mc_bases then
58617: LD_EXP 101
58621: NOT
58622: IFFALSE 58626
// exit ;
58624: GO 58804
// for i = 1 to mc_bases do
58626: LD_ADDR_VAR 0 2
58630: PUSH
58631: DOUBLE
58632: LD_INT 1
58634: DEC
58635: ST_TO_ADDR
58636: LD_EXP 101
58640: PUSH
58641: FOR_TO
58642: IFFALSE 58802
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
58644: LD_ADDR_VAR 0 4
58648: PUSH
58649: LD_EXP 101
58653: PUSH
58654: LD_VAR 0 2
58658: ARRAY
58659: PPUSH
58660: LD_INT 25
58662: PUSH
58663: LD_INT 9
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PPUSH
58670: CALL_OW 72
58674: ST_TO_ADDR
// if not tmp then
58675: LD_VAR 0 4
58679: NOT
58680: IFFALSE 58684
// continue ;
58682: GO 58641
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
58684: LD_EXP 127
58688: PUSH
58689: LD_VAR 0 2
58693: ARRAY
58694: PPUSH
58695: LD_INT 29
58697: PPUSH
58698: CALL_OW 325
58702: NOT
58703: PUSH
58704: LD_EXP 127
58708: PUSH
58709: LD_VAR 0 2
58713: ARRAY
58714: PPUSH
58715: LD_INT 28
58717: PPUSH
58718: CALL_OW 325
58722: NOT
58723: AND
58724: IFFALSE 58728
// continue ;
58726: GO 58641
// for j in tmp do
58728: LD_ADDR_VAR 0 3
58732: PUSH
58733: LD_VAR 0 4
58737: PUSH
58738: FOR_IN
58739: IFFALSE 58798
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
58741: LD_VAR 0 3
58745: PUSH
58746: LD_EXP 104
58750: PUSH
58751: LD_VAR 0 2
58755: ARRAY
58756: PUSH
58757: LD_INT 1
58759: ARRAY
58760: IN
58761: NOT
58762: PUSH
58763: LD_VAR 0 3
58767: PUSH
58768: LD_EXP 104
58772: PUSH
58773: LD_VAR 0 2
58777: ARRAY
58778: PUSH
58779: LD_INT 2
58781: ARRAY
58782: IN
58783: NOT
58784: AND
58785: IFFALSE 58796
// ComSpaceTimeShoot ( j ) ;
58787: LD_VAR 0 3
58791: PPUSH
58792: CALL 70005 0 1
58796: GO 58738
58798: POP
58799: POP
// end ;
58800: GO 58641
58802: POP
58803: POP
// end ;
58804: LD_VAR 0 1
58808: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
58809: LD_INT 0
58811: PPUSH
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
// if not mc_bases then
58820: LD_EXP 101
58824: NOT
58825: IFFALSE 58829
// exit ;
58827: GO 59451
// for i = 1 to mc_bases do
58829: LD_ADDR_VAR 0 2
58833: PUSH
58834: DOUBLE
58835: LD_INT 1
58837: DEC
58838: ST_TO_ADDR
58839: LD_EXP 101
58843: PUSH
58844: FOR_TO
58845: IFFALSE 59449
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
58847: LD_EXP 136
58851: PUSH
58852: LD_VAR 0 2
58856: ARRAY
58857: NOT
58858: PUSH
58859: LD_INT 38
58861: PPUSH
58862: LD_EXP 127
58866: PUSH
58867: LD_VAR 0 2
58871: ARRAY
58872: PPUSH
58873: CALL_OW 321
58877: PUSH
58878: LD_INT 2
58880: NONEQUAL
58881: OR
58882: IFFALSE 58886
// continue ;
58884: GO 58844
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
58886: LD_ADDR_VAR 0 8
58890: PUSH
58891: LD_EXP 101
58895: PUSH
58896: LD_VAR 0 2
58900: ARRAY
58901: PPUSH
58902: LD_INT 30
58904: PUSH
58905: LD_INT 34
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PPUSH
58912: CALL_OW 72
58916: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
58917: LD_ADDR_VAR 0 9
58921: PUSH
58922: LD_EXP 101
58926: PUSH
58927: LD_VAR 0 2
58931: ARRAY
58932: PPUSH
58933: LD_INT 25
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PPUSH
58943: CALL_OW 72
58947: PPUSH
58948: LD_INT 0
58950: PPUSH
58951: CALL 103941 0 2
58955: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
58956: LD_VAR 0 9
58960: NOT
58961: PUSH
58962: LD_VAR 0 8
58966: NOT
58967: OR
58968: PUSH
58969: LD_EXP 101
58973: PUSH
58974: LD_VAR 0 2
58978: ARRAY
58979: PPUSH
58980: LD_INT 124
58982: PPUSH
58983: CALL 103941 0 2
58987: OR
58988: IFFALSE 58992
// continue ;
58990: GO 58844
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
58992: LD_EXP 137
58996: PUSH
58997: LD_VAR 0 2
59001: ARRAY
59002: PUSH
59003: LD_EXP 136
59007: PUSH
59008: LD_VAR 0 2
59012: ARRAY
59013: LESS
59014: PUSH
59015: LD_EXP 137
59019: PUSH
59020: LD_VAR 0 2
59024: ARRAY
59025: PUSH
59026: LD_VAR 0 8
59030: LESS
59031: AND
59032: IFFALSE 59447
// begin tmp := sci [ 1 ] ;
59034: LD_ADDR_VAR 0 7
59038: PUSH
59039: LD_VAR 0 9
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
59048: LD_VAR 0 7
59052: PPUSH
59053: LD_INT 124
59055: PPUSH
59056: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
59060: LD_ADDR_VAR 0 3
59064: PUSH
59065: DOUBLE
59066: LD_EXP 136
59070: PUSH
59071: LD_VAR 0 2
59075: ARRAY
59076: INC
59077: ST_TO_ADDR
59078: LD_EXP 136
59082: PUSH
59083: LD_VAR 0 2
59087: ARRAY
59088: PUSH
59089: FOR_DOWNTO
59090: IFFALSE 59433
// begin if IsInUnit ( tmp ) then
59092: LD_VAR 0 7
59096: PPUSH
59097: CALL_OW 310
59101: IFFALSE 59112
// ComExitBuilding ( tmp ) ;
59103: LD_VAR 0 7
59107: PPUSH
59108: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
59112: LD_INT 35
59114: PPUSH
59115: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
59119: LD_VAR 0 7
59123: PPUSH
59124: CALL_OW 310
59128: NOT
59129: PUSH
59130: LD_VAR 0 7
59134: PPUSH
59135: CALL_OW 314
59139: NOT
59140: AND
59141: IFFALSE 59112
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
59143: LD_ADDR_VAR 0 6
59147: PUSH
59148: LD_VAR 0 7
59152: PPUSH
59153: CALL_OW 250
59157: PUSH
59158: LD_VAR 0 7
59162: PPUSH
59163: CALL_OW 251
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59172: LD_INT 35
59174: PPUSH
59175: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
59179: LD_ADDR_VAR 0 4
59183: PUSH
59184: LD_EXP 136
59188: PUSH
59189: LD_VAR 0 2
59193: ARRAY
59194: PUSH
59195: LD_VAR 0 3
59199: ARRAY
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
59205: LD_ADDR_VAR 0 5
59209: PUSH
59210: LD_EXP 136
59214: PUSH
59215: LD_VAR 0 2
59219: ARRAY
59220: PUSH
59221: LD_VAR 0 3
59225: ARRAY
59226: PUSH
59227: LD_INT 2
59229: ARRAY
59230: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
59231: LD_VAR 0 7
59235: PPUSH
59236: LD_INT 10
59238: PPUSH
59239: CALL 76617 0 2
59243: PUSH
59244: LD_INT 4
59246: ARRAY
59247: IFFALSE 59285
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
59249: LD_VAR 0 7
59253: PPUSH
59254: LD_VAR 0 6
59258: PUSH
59259: LD_INT 1
59261: ARRAY
59262: PPUSH
59263: LD_VAR 0 6
59267: PUSH
59268: LD_INT 2
59270: ARRAY
59271: PPUSH
59272: CALL_OW 111
// wait ( 0 0$10 ) ;
59276: LD_INT 350
59278: PPUSH
59279: CALL_OW 67
// end else
59283: GO 59311
// begin ComMoveXY ( tmp , x , y ) ;
59285: LD_VAR 0 7
59289: PPUSH
59290: LD_VAR 0 4
59294: PPUSH
59295: LD_VAR 0 5
59299: PPUSH
59300: CALL_OW 111
// wait ( 0 0$3 ) ;
59304: LD_INT 105
59306: PPUSH
59307: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
59311: LD_VAR 0 7
59315: PPUSH
59316: LD_VAR 0 4
59320: PPUSH
59321: LD_VAR 0 5
59325: PPUSH
59326: CALL_OW 307
59330: IFFALSE 59172
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
59332: LD_VAR 0 7
59336: PPUSH
59337: LD_VAR 0 4
59341: PPUSH
59342: LD_VAR 0 5
59346: PPUSH
59347: LD_VAR 0 8
59351: PUSH
59352: LD_VAR 0 3
59356: ARRAY
59357: PPUSH
59358: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
59362: LD_INT 35
59364: PPUSH
59365: CALL_OW 67
// until not HasTask ( tmp ) ;
59369: LD_VAR 0 7
59373: PPUSH
59374: CALL_OW 314
59378: NOT
59379: IFFALSE 59362
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
59381: LD_ADDR_EXP 137
59385: PUSH
59386: LD_EXP 137
59390: PPUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_EXP 137
59400: PUSH
59401: LD_VAR 0 2
59405: ARRAY
59406: PUSH
59407: LD_INT 1
59409: PLUS
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PPUSH
59415: LD_VAR 0 8
59419: PUSH
59420: LD_VAR 0 3
59424: ARRAY
59425: PPUSH
59426: CALL 74020 0 3
59430: ST_TO_ADDR
// end ;
59431: GO 59089
59433: POP
59434: POP
// MC_Reset ( i , 124 ) ;
59435: LD_VAR 0 2
59439: PPUSH
59440: LD_INT 124
59442: PPUSH
59443: CALL 42519 0 2
// end ; end ;
59447: GO 58844
59449: POP
59450: POP
// end ;
59451: LD_VAR 0 1
59455: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
// if not mc_bases then
59461: LD_EXP 101
59465: NOT
59466: IFFALSE 59470
// exit ;
59468: GO 60076
// for i = 1 to mc_bases do
59470: LD_ADDR_VAR 0 2
59474: PUSH
59475: DOUBLE
59476: LD_INT 1
59478: DEC
59479: ST_TO_ADDR
59480: LD_EXP 101
59484: PUSH
59485: FOR_TO
59486: IFFALSE 60074
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59488: LD_ADDR_VAR 0 3
59492: PUSH
59493: LD_EXP 101
59497: PUSH
59498: LD_VAR 0 2
59502: ARRAY
59503: PPUSH
59504: LD_INT 25
59506: PUSH
59507: LD_INT 4
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PPUSH
59514: CALL_OW 72
59518: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
59519: LD_VAR 0 3
59523: NOT
59524: PUSH
59525: LD_EXP 138
59529: PUSH
59530: LD_VAR 0 2
59534: ARRAY
59535: NOT
59536: OR
59537: PUSH
59538: LD_EXP 101
59542: PUSH
59543: LD_VAR 0 2
59547: ARRAY
59548: PPUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 30
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 30
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: PPUSH
59577: CALL_OW 72
59581: NOT
59582: OR
59583: IFFALSE 59633
// begin if mc_deposits_finder [ i ] then
59585: LD_EXP 139
59589: PUSH
59590: LD_VAR 0 2
59594: ARRAY
59595: IFFALSE 59631
// begin MC_Reset ( i , 125 ) ;
59597: LD_VAR 0 2
59601: PPUSH
59602: LD_INT 125
59604: PPUSH
59605: CALL 42519 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59609: LD_ADDR_EXP 139
59613: PUSH
59614: LD_EXP 139
59618: PPUSH
59619: LD_VAR 0 2
59623: PPUSH
59624: EMPTY
59625: PPUSH
59626: CALL_OW 1
59630: ST_TO_ADDR
// end ; continue ;
59631: GO 59485
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
59633: LD_EXP 138
59637: PUSH
59638: LD_VAR 0 2
59642: ARRAY
59643: PUSH
59644: LD_INT 1
59646: ARRAY
59647: PUSH
59648: LD_INT 3
59650: ARRAY
59651: PUSH
59652: LD_INT 1
59654: EQUAL
59655: PUSH
59656: LD_INT 20
59658: PPUSH
59659: LD_EXP 127
59663: PUSH
59664: LD_VAR 0 2
59668: ARRAY
59669: PPUSH
59670: CALL_OW 321
59674: PUSH
59675: LD_INT 2
59677: NONEQUAL
59678: AND
59679: IFFALSE 59729
// begin if mc_deposits_finder [ i ] then
59681: LD_EXP 139
59685: PUSH
59686: LD_VAR 0 2
59690: ARRAY
59691: IFFALSE 59727
// begin MC_Reset ( i , 125 ) ;
59693: LD_VAR 0 2
59697: PPUSH
59698: LD_INT 125
59700: PPUSH
59701: CALL 42519 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59705: LD_ADDR_EXP 139
59709: PUSH
59710: LD_EXP 139
59714: PPUSH
59715: LD_VAR 0 2
59719: PPUSH
59720: EMPTY
59721: PPUSH
59722: CALL_OW 1
59726: ST_TO_ADDR
// end ; continue ;
59727: GO 59485
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
59729: LD_EXP 138
59733: PUSH
59734: LD_VAR 0 2
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: LD_INT 1
59746: ARRAY
59747: PPUSH
59748: LD_EXP 138
59752: PUSH
59753: LD_VAR 0 2
59757: ARRAY
59758: PUSH
59759: LD_INT 1
59761: ARRAY
59762: PUSH
59763: LD_INT 2
59765: ARRAY
59766: PPUSH
59767: LD_EXP 127
59771: PUSH
59772: LD_VAR 0 2
59776: ARRAY
59777: PPUSH
59778: CALL_OW 440
59782: IFFALSE 59825
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
59784: LD_ADDR_EXP 138
59788: PUSH
59789: LD_EXP 138
59793: PPUSH
59794: LD_VAR 0 2
59798: PPUSH
59799: LD_EXP 138
59803: PUSH
59804: LD_VAR 0 2
59808: ARRAY
59809: PPUSH
59810: LD_INT 1
59812: PPUSH
59813: CALL_OW 3
59817: PPUSH
59818: CALL_OW 1
59822: ST_TO_ADDR
59823: GO 60072
// begin if not mc_deposits_finder [ i ] then
59825: LD_EXP 139
59829: PUSH
59830: LD_VAR 0 2
59834: ARRAY
59835: NOT
59836: IFFALSE 59888
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
59838: LD_ADDR_EXP 139
59842: PUSH
59843: LD_EXP 139
59847: PPUSH
59848: LD_VAR 0 2
59852: PPUSH
59853: LD_VAR 0 3
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PUSH
59862: EMPTY
59863: LIST
59864: PPUSH
59865: CALL_OW 1
59869: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
59870: LD_VAR 0 3
59874: PUSH
59875: LD_INT 1
59877: ARRAY
59878: PPUSH
59879: LD_INT 125
59881: PPUSH
59882: CALL_OW 109
// end else
59886: GO 60072
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
59888: LD_EXP 139
59892: PUSH
59893: LD_VAR 0 2
59897: ARRAY
59898: PUSH
59899: LD_INT 1
59901: ARRAY
59902: PPUSH
59903: CALL_OW 310
59907: IFFALSE 59930
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
59909: LD_EXP 139
59913: PUSH
59914: LD_VAR 0 2
59918: ARRAY
59919: PUSH
59920: LD_INT 1
59922: ARRAY
59923: PPUSH
59924: CALL_OW 122
59928: GO 60072
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
59930: LD_EXP 139
59934: PUSH
59935: LD_VAR 0 2
59939: ARRAY
59940: PUSH
59941: LD_INT 1
59943: ARRAY
59944: PPUSH
59945: CALL_OW 314
59949: NOT
59950: PUSH
59951: LD_EXP 139
59955: PUSH
59956: LD_VAR 0 2
59960: ARRAY
59961: PUSH
59962: LD_INT 1
59964: ARRAY
59965: PPUSH
59966: LD_EXP 138
59970: PUSH
59971: LD_VAR 0 2
59975: ARRAY
59976: PUSH
59977: LD_INT 1
59979: ARRAY
59980: PUSH
59981: LD_INT 1
59983: ARRAY
59984: PPUSH
59985: LD_EXP 138
59989: PUSH
59990: LD_VAR 0 2
59994: ARRAY
59995: PUSH
59996: LD_INT 1
59998: ARRAY
59999: PUSH
60000: LD_INT 2
60002: ARRAY
60003: PPUSH
60004: CALL_OW 297
60008: PUSH
60009: LD_INT 6
60011: GREATER
60012: AND
60013: IFFALSE 60072
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
60015: LD_EXP 139
60019: PUSH
60020: LD_VAR 0 2
60024: ARRAY
60025: PUSH
60026: LD_INT 1
60028: ARRAY
60029: PPUSH
60030: LD_EXP 138
60034: PUSH
60035: LD_VAR 0 2
60039: ARRAY
60040: PUSH
60041: LD_INT 1
60043: ARRAY
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: LD_EXP 138
60053: PUSH
60054: LD_VAR 0 2
60058: ARRAY
60059: PUSH
60060: LD_INT 1
60062: ARRAY
60063: PUSH
60064: LD_INT 2
60066: ARRAY
60067: PPUSH
60068: CALL_OW 111
// end ; end ; end ;
60072: GO 59485
60074: POP
60075: POP
// end ;
60076: LD_VAR 0 1
60080: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
60081: LD_INT 0
60083: PPUSH
60084: PPUSH
60085: PPUSH
60086: PPUSH
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
// if not mc_bases then
60094: LD_EXP 101
60098: NOT
60099: IFFALSE 60103
// exit ;
60101: GO 61043
// for i = 1 to mc_bases do
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: DOUBLE
60109: LD_INT 1
60111: DEC
60112: ST_TO_ADDR
60113: LD_EXP 101
60117: PUSH
60118: FOR_TO
60119: IFFALSE 61041
// begin if not mc_bases [ i ] or mc_scan [ i ] then
60121: LD_EXP 101
60125: PUSH
60126: LD_VAR 0 2
60130: ARRAY
60131: NOT
60132: PUSH
60133: LD_EXP 124
60137: PUSH
60138: LD_VAR 0 2
60142: ARRAY
60143: OR
60144: IFFALSE 60148
// continue ;
60146: GO 60118
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
60148: LD_ADDR_VAR 0 7
60152: PUSH
60153: LD_EXP 101
60157: PUSH
60158: LD_VAR 0 2
60162: ARRAY
60163: PUSH
60164: LD_INT 1
60166: ARRAY
60167: PPUSH
60168: CALL_OW 248
60172: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
60173: LD_VAR 0 7
60177: PUSH
60178: LD_INT 3
60180: EQUAL
60181: PUSH
60182: LD_EXP 120
60186: PUSH
60187: LD_VAR 0 2
60191: ARRAY
60192: PUSH
60193: LD_EXP 123
60197: PUSH
60198: LD_VAR 0 2
60202: ARRAY
60203: UNION
60204: PPUSH
60205: LD_INT 33
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PPUSH
60215: CALL_OW 72
60219: NOT
60220: OR
60221: IFFALSE 60225
// continue ;
60223: GO 60118
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
60225: LD_ADDR_VAR 0 9
60229: PUSH
60230: LD_EXP 101
60234: PUSH
60235: LD_VAR 0 2
60239: ARRAY
60240: PPUSH
60241: LD_INT 30
60243: PUSH
60244: LD_INT 36
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PPUSH
60251: CALL_OW 72
60255: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
60256: LD_ADDR_VAR 0 10
60260: PUSH
60261: LD_EXP 120
60265: PUSH
60266: LD_VAR 0 2
60270: ARRAY
60271: PPUSH
60272: LD_INT 34
60274: PUSH
60275: LD_INT 31
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PPUSH
60282: CALL_OW 72
60286: ST_TO_ADDR
// if not cts and not mcts then
60287: LD_VAR 0 9
60291: NOT
60292: PUSH
60293: LD_VAR 0 10
60297: NOT
60298: AND
60299: IFFALSE 60303
// continue ;
60301: GO 60118
// x := cts ;
60303: LD_ADDR_VAR 0 11
60307: PUSH
60308: LD_VAR 0 9
60312: ST_TO_ADDR
// if not x then
60313: LD_VAR 0 11
60317: NOT
60318: IFFALSE 60330
// x := mcts ;
60320: LD_ADDR_VAR 0 11
60324: PUSH
60325: LD_VAR 0 10
60329: ST_TO_ADDR
// if not x then
60330: LD_VAR 0 11
60334: NOT
60335: IFFALSE 60339
// continue ;
60337: GO 60118
// if mc_remote_driver [ i ] then
60339: LD_EXP 141
60343: PUSH
60344: LD_VAR 0 2
60348: ARRAY
60349: IFFALSE 60736
// for j in mc_remote_driver [ i ] do
60351: LD_ADDR_VAR 0 3
60355: PUSH
60356: LD_EXP 141
60360: PUSH
60361: LD_VAR 0 2
60365: ARRAY
60366: PUSH
60367: FOR_IN
60368: IFFALSE 60734
// begin if GetClass ( j ) <> 3 then
60370: LD_VAR 0 3
60374: PPUSH
60375: CALL_OW 257
60379: PUSH
60380: LD_INT 3
60382: NONEQUAL
60383: IFFALSE 60436
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
60385: LD_ADDR_EXP 141
60389: PUSH
60390: LD_EXP 141
60394: PPUSH
60395: LD_VAR 0 2
60399: PPUSH
60400: LD_EXP 141
60404: PUSH
60405: LD_VAR 0 2
60409: ARRAY
60410: PUSH
60411: LD_VAR 0 3
60415: DIFF
60416: PPUSH
60417: CALL_OW 1
60421: ST_TO_ADDR
// SetTag ( j , 0 ) ;
60422: LD_VAR 0 3
60426: PPUSH
60427: LD_INT 0
60429: PPUSH
60430: CALL_OW 109
// continue ;
60434: GO 60367
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
60436: LD_EXP 120
60440: PUSH
60441: LD_VAR 0 2
60445: ARRAY
60446: PPUSH
60447: LD_INT 34
60449: PUSH
60450: LD_INT 31
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 58
60459: PUSH
60460: EMPTY
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PPUSH
60467: CALL_OW 72
60471: PUSH
60472: LD_VAR 0 3
60476: PPUSH
60477: CALL 103976 0 1
60481: NOT
60482: AND
60483: IFFALSE 60554
// begin if IsInUnit ( j ) then
60485: LD_VAR 0 3
60489: PPUSH
60490: CALL_OW 310
60494: IFFALSE 60505
// ComExitBuilding ( j ) ;
60496: LD_VAR 0 3
60500: PPUSH
60501: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
60505: LD_VAR 0 3
60509: PPUSH
60510: LD_EXP 120
60514: PUSH
60515: LD_VAR 0 2
60519: ARRAY
60520: PPUSH
60521: LD_INT 34
60523: PUSH
60524: LD_INT 31
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 58
60533: PUSH
60534: EMPTY
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PPUSH
60541: CALL_OW 72
60545: PUSH
60546: LD_INT 1
60548: ARRAY
60549: PPUSH
60550: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
60554: LD_VAR 0 3
60558: PPUSH
60559: CALL_OW 310
60563: NOT
60564: PUSH
60565: LD_VAR 0 3
60569: PPUSH
60570: CALL_OW 310
60574: PPUSH
60575: CALL_OW 266
60579: PUSH
60580: LD_INT 36
60582: NONEQUAL
60583: PUSH
60584: LD_VAR 0 3
60588: PPUSH
60589: CALL 103976 0 1
60593: NOT
60594: AND
60595: OR
60596: IFFALSE 60732
// begin if IsInUnit ( j ) then
60598: LD_VAR 0 3
60602: PPUSH
60603: CALL_OW 310
60607: IFFALSE 60618
// ComExitBuilding ( j ) ;
60609: LD_VAR 0 3
60613: PPUSH
60614: CALL_OW 122
// ct := 0 ;
60618: LD_ADDR_VAR 0 8
60622: PUSH
60623: LD_INT 0
60625: ST_TO_ADDR
// for k in x do
60626: LD_ADDR_VAR 0 4
60630: PUSH
60631: LD_VAR 0 11
60635: PUSH
60636: FOR_IN
60637: IFFALSE 60710
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
60639: LD_VAR 0 4
60643: PPUSH
60644: CALL_OW 264
60648: PUSH
60649: LD_INT 31
60651: EQUAL
60652: PUSH
60653: LD_VAR 0 4
60657: PPUSH
60658: CALL_OW 311
60662: NOT
60663: AND
60664: PUSH
60665: LD_VAR 0 4
60669: PPUSH
60670: CALL_OW 266
60674: PUSH
60675: LD_INT 36
60677: EQUAL
60678: PUSH
60679: LD_VAR 0 4
60683: PPUSH
60684: CALL_OW 313
60688: PUSH
60689: LD_INT 3
60691: LESS
60692: AND
60693: OR
60694: IFFALSE 60708
// begin ct := k ;
60696: LD_ADDR_VAR 0 8
60700: PUSH
60701: LD_VAR 0 4
60705: ST_TO_ADDR
// break ;
60706: GO 60710
// end ;
60708: GO 60636
60710: POP
60711: POP
// if ct then
60712: LD_VAR 0 8
60716: IFFALSE 60732
// ComEnterUnit ( j , ct ) ;
60718: LD_VAR 0 3
60722: PPUSH
60723: LD_VAR 0 8
60727: PPUSH
60728: CALL_OW 120
// end ; end ;
60732: GO 60367
60734: POP
60735: POP
// places := 0 ;
60736: LD_ADDR_VAR 0 5
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
// for j = 1 to x do
60744: LD_ADDR_VAR 0 3
60748: PUSH
60749: DOUBLE
60750: LD_INT 1
60752: DEC
60753: ST_TO_ADDR
60754: LD_VAR 0 11
60758: PUSH
60759: FOR_TO
60760: IFFALSE 60836
// if GetWeapon ( x [ j ] ) = ar_control_tower then
60762: LD_VAR 0 11
60766: PUSH
60767: LD_VAR 0 3
60771: ARRAY
60772: PPUSH
60773: CALL_OW 264
60777: PUSH
60778: LD_INT 31
60780: EQUAL
60781: IFFALSE 60799
// places := places + 1 else
60783: LD_ADDR_VAR 0 5
60787: PUSH
60788: LD_VAR 0 5
60792: PUSH
60793: LD_INT 1
60795: PLUS
60796: ST_TO_ADDR
60797: GO 60834
// if GetBType ( x [ j ] ) = b_control_tower then
60799: LD_VAR 0 11
60803: PUSH
60804: LD_VAR 0 3
60808: ARRAY
60809: PPUSH
60810: CALL_OW 266
60814: PUSH
60815: LD_INT 36
60817: EQUAL
60818: IFFALSE 60834
// places := places + 3 ;
60820: LD_ADDR_VAR 0 5
60824: PUSH
60825: LD_VAR 0 5
60829: PUSH
60830: LD_INT 3
60832: PLUS
60833: ST_TO_ADDR
60834: GO 60759
60836: POP
60837: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
60838: LD_VAR 0 5
60842: PUSH
60843: LD_INT 0
60845: EQUAL
60846: PUSH
60847: LD_VAR 0 5
60851: PUSH
60852: LD_EXP 141
60856: PUSH
60857: LD_VAR 0 2
60861: ARRAY
60862: LESSEQUAL
60863: OR
60864: IFFALSE 60868
// continue ;
60866: GO 60118
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
60868: LD_ADDR_VAR 0 6
60872: PUSH
60873: LD_EXP 101
60877: PUSH
60878: LD_VAR 0 2
60882: ARRAY
60883: PPUSH
60884: LD_INT 25
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PPUSH
60894: CALL_OW 72
60898: PUSH
60899: LD_EXP 141
60903: PUSH
60904: LD_VAR 0 2
60908: ARRAY
60909: DIFF
60910: PPUSH
60911: LD_INT 3
60913: PPUSH
60914: CALL 104876 0 2
60918: ST_TO_ADDR
// for j in tmp do
60919: LD_ADDR_VAR 0 3
60923: PUSH
60924: LD_VAR 0 6
60928: PUSH
60929: FOR_IN
60930: IFFALSE 60965
// if GetTag ( j ) > 0 then
60932: LD_VAR 0 3
60936: PPUSH
60937: CALL_OW 110
60941: PUSH
60942: LD_INT 0
60944: GREATER
60945: IFFALSE 60963
// tmp := tmp diff j ;
60947: LD_ADDR_VAR 0 6
60951: PUSH
60952: LD_VAR 0 6
60956: PUSH
60957: LD_VAR 0 3
60961: DIFF
60962: ST_TO_ADDR
60963: GO 60929
60965: POP
60966: POP
// if not tmp then
60967: LD_VAR 0 6
60971: NOT
60972: IFFALSE 60976
// continue ;
60974: GO 60118
// if places then
60976: LD_VAR 0 5
60980: IFFALSE 61039
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
60982: LD_ADDR_EXP 141
60986: PUSH
60987: LD_EXP 141
60991: PPUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: LD_EXP 141
61001: PUSH
61002: LD_VAR 0 2
61006: ARRAY
61007: PUSH
61008: LD_VAR 0 6
61012: PUSH
61013: LD_INT 1
61015: ARRAY
61016: UNION
61017: PPUSH
61018: CALL_OW 1
61022: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
61023: LD_VAR 0 6
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: PPUSH
61032: LD_INT 126
61034: PPUSH
61035: CALL_OW 109
// end ; end ;
61039: GO 60118
61041: POP
61042: POP
// end ;
61043: LD_VAR 0 1
61047: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
61048: LD_INT 0
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
61055: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
61056: LD_VAR 0 1
61060: NOT
61061: PUSH
61062: LD_VAR 0 2
61066: NOT
61067: OR
61068: PUSH
61069: LD_VAR 0 3
61073: NOT
61074: OR
61075: PUSH
61076: LD_VAR 0 4
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: LD_INT 4
61092: PUSH
61093: LD_INT 5
61095: PUSH
61096: LD_INT 8
61098: PUSH
61099: LD_INT 9
61101: PUSH
61102: LD_INT 15
61104: PUSH
61105: LD_INT 16
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: IN
61119: NOT
61120: OR
61121: IFFALSE 61125
// exit ;
61123: GO 61983
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
61125: LD_ADDR_VAR 0 2
61129: PUSH
61130: LD_VAR 0 2
61134: PPUSH
61135: LD_INT 21
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 24
61147: PUSH
61148: LD_INT 250
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PPUSH
61159: CALL_OW 72
61163: ST_TO_ADDR
// case class of 1 , 15 :
61164: LD_VAR 0 4
61168: PUSH
61169: LD_INT 1
61171: DOUBLE
61172: EQUAL
61173: IFTRUE 61183
61175: LD_INT 15
61177: DOUBLE
61178: EQUAL
61179: IFTRUE 61183
61181: GO 61268
61183: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
61184: LD_ADDR_VAR 0 8
61188: PUSH
61189: LD_VAR 0 2
61193: PPUSH
61194: LD_INT 2
61196: PUSH
61197: LD_INT 30
61199: PUSH
61200: LD_INT 32
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 30
61209: PUSH
61210: LD_INT 31
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PPUSH
61222: CALL_OW 72
61226: PUSH
61227: LD_VAR 0 2
61231: PPUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 30
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 30
61247: PUSH
61248: LD_INT 5
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: PPUSH
61260: CALL_OW 72
61264: ADD
61265: ST_TO_ADDR
61266: GO 61514
61268: LD_INT 2
61270: DOUBLE
61271: EQUAL
61272: IFTRUE 61282
61274: LD_INT 16
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61282
61280: GO 61328
61282: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
61283: LD_ADDR_VAR 0 8
61287: PUSH
61288: LD_VAR 0 2
61292: PPUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 30
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 30
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: PPUSH
61321: CALL_OW 72
61325: ST_TO_ADDR
61326: GO 61514
61328: LD_INT 3
61330: DOUBLE
61331: EQUAL
61332: IFTRUE 61336
61334: GO 61382
61336: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
61337: LD_ADDR_VAR 0 8
61341: PUSH
61342: LD_VAR 0 2
61346: PPUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 30
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 30
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: PPUSH
61375: CALL_OW 72
61379: ST_TO_ADDR
61380: GO 61514
61382: LD_INT 4
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61390
61388: GO 61447
61390: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
61391: LD_ADDR_VAR 0 8
61395: PUSH
61396: LD_VAR 0 2
61400: PPUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 30
61406: PUSH
61407: LD_INT 6
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 30
61416: PUSH
61417: LD_INT 7
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 30
61426: PUSH
61427: LD_INT 8
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: PPUSH
61440: CALL_OW 72
61444: ST_TO_ADDR
61445: GO 61514
61447: LD_INT 5
61449: DOUBLE
61450: EQUAL
61451: IFTRUE 61467
61453: LD_INT 8
61455: DOUBLE
61456: EQUAL
61457: IFTRUE 61467
61459: LD_INT 9
61461: DOUBLE
61462: EQUAL
61463: IFTRUE 61467
61465: GO 61513
61467: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
61468: LD_ADDR_VAR 0 8
61472: PUSH
61473: LD_VAR 0 2
61477: PPUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 30
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 30
61493: PUSH
61494: LD_INT 5
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: PPUSH
61506: CALL_OW 72
61510: ST_TO_ADDR
61511: GO 61514
61513: POP
// if not tmp then
61514: LD_VAR 0 8
61518: NOT
61519: IFFALSE 61523
// exit ;
61521: GO 61983
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
61523: LD_VAR 0 4
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 15
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: IN
61538: PUSH
61539: LD_EXP 110
61543: PUSH
61544: LD_VAR 0 1
61548: ARRAY
61549: AND
61550: IFFALSE 61706
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
61552: LD_ADDR_VAR 0 9
61556: PUSH
61557: LD_EXP 110
61561: PUSH
61562: LD_VAR 0 1
61566: ARRAY
61567: PUSH
61568: LD_INT 1
61570: ARRAY
61571: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
61572: LD_VAR 0 9
61576: PUSH
61577: LD_EXP 111
61581: PUSH
61582: LD_VAR 0 1
61586: ARRAY
61587: IN
61588: NOT
61589: IFFALSE 61704
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
61591: LD_ADDR_EXP 111
61595: PUSH
61596: LD_EXP 111
61600: PPUSH
61601: LD_VAR 0 1
61605: PUSH
61606: LD_EXP 111
61610: PUSH
61611: LD_VAR 0 1
61615: ARRAY
61616: PUSH
61617: LD_INT 1
61619: PLUS
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PPUSH
61625: LD_VAR 0 9
61629: PPUSH
61630: CALL 74020 0 3
61634: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
61635: LD_ADDR_EXP 110
61639: PUSH
61640: LD_EXP 110
61644: PPUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: LD_EXP 110
61654: PUSH
61655: LD_VAR 0 1
61659: ARRAY
61660: PUSH
61661: LD_VAR 0 9
61665: DIFF
61666: PPUSH
61667: CALL_OW 1
61671: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
61672: LD_VAR 0 3
61676: PPUSH
61677: LD_EXP 111
61681: PUSH
61682: LD_VAR 0 1
61686: ARRAY
61687: PUSH
61688: LD_EXP 111
61692: PUSH
61693: LD_VAR 0 1
61697: ARRAY
61698: ARRAY
61699: PPUSH
61700: CALL_OW 120
// end ; exit ;
61704: GO 61983
// end ; if tmp > 1 then
61706: LD_VAR 0 8
61710: PUSH
61711: LD_INT 1
61713: GREATER
61714: IFFALSE 61818
// for i = 2 to tmp do
61716: LD_ADDR_VAR 0 6
61720: PUSH
61721: DOUBLE
61722: LD_INT 2
61724: DEC
61725: ST_TO_ADDR
61726: LD_VAR 0 8
61730: PUSH
61731: FOR_TO
61732: IFFALSE 61816
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
61734: LD_VAR 0 8
61738: PUSH
61739: LD_VAR 0 6
61743: ARRAY
61744: PPUSH
61745: CALL_OW 461
61749: PUSH
61750: LD_INT 6
61752: EQUAL
61753: IFFALSE 61814
// begin x := tmp [ i ] ;
61755: LD_ADDR_VAR 0 9
61759: PUSH
61760: LD_VAR 0 8
61764: PUSH
61765: LD_VAR 0 6
61769: ARRAY
61770: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
61771: LD_ADDR_VAR 0 8
61775: PUSH
61776: LD_VAR 0 8
61780: PPUSH
61781: LD_VAR 0 6
61785: PPUSH
61786: CALL_OW 3
61790: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
61791: LD_ADDR_VAR 0 8
61795: PUSH
61796: LD_VAR 0 8
61800: PPUSH
61801: LD_INT 1
61803: PPUSH
61804: LD_VAR 0 9
61808: PPUSH
61809: CALL_OW 2
61813: ST_TO_ADDR
// end ;
61814: GO 61731
61816: POP
61817: POP
// for i in tmp do
61818: LD_ADDR_VAR 0 6
61822: PUSH
61823: LD_VAR 0 8
61827: PUSH
61828: FOR_IN
61829: IFFALSE 61856
// begin if IsNotFull ( i ) then
61831: LD_VAR 0 6
61835: PPUSH
61836: CALL 71242 0 1
61840: IFFALSE 61854
// begin j := i ;
61842: LD_ADDR_VAR 0 7
61846: PUSH
61847: LD_VAR 0 6
61851: ST_TO_ADDR
// break ;
61852: GO 61856
// end ; end ;
61854: GO 61828
61856: POP
61857: POP
// if j then
61858: LD_VAR 0 7
61862: IFFALSE 61880
// ComEnterUnit ( unit , j ) else
61864: LD_VAR 0 3
61868: PPUSH
61869: LD_VAR 0 7
61873: PPUSH
61874: CALL_OW 120
61878: GO 61983
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61880: LD_ADDR_VAR 0 10
61884: PUSH
61885: LD_VAR 0 2
61889: PPUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 30
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 30
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: LIST
61917: PPUSH
61918: CALL_OW 72
61922: ST_TO_ADDR
// if depot then
61923: LD_VAR 0 10
61927: IFFALSE 61983
// begin depot := NearestUnitToUnit ( depot , unit ) ;
61929: LD_ADDR_VAR 0 10
61933: PUSH
61934: LD_VAR 0 10
61938: PPUSH
61939: LD_VAR 0 3
61943: PPUSH
61944: CALL_OW 74
61948: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
61949: LD_VAR 0 3
61953: PPUSH
61954: LD_VAR 0 10
61958: PPUSH
61959: CALL_OW 296
61963: PUSH
61964: LD_INT 10
61966: GREATER
61967: IFFALSE 61983
// ComStandNearbyBuilding ( unit , depot ) ;
61969: LD_VAR 0 3
61973: PPUSH
61974: LD_VAR 0 10
61978: PPUSH
61979: CALL 70622 0 2
// end ; end ; end ;
61983: LD_VAR 0 5
61987: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
61988: LD_INT 0
61990: PPUSH
61991: PPUSH
61992: PPUSH
61993: PPUSH
// if not mc_bases then
61994: LD_EXP 101
61998: NOT
61999: IFFALSE 62003
// exit ;
62001: GO 62242
// for i = 1 to mc_bases do
62003: LD_ADDR_VAR 0 2
62007: PUSH
62008: DOUBLE
62009: LD_INT 1
62011: DEC
62012: ST_TO_ADDR
62013: LD_EXP 101
62017: PUSH
62018: FOR_TO
62019: IFFALSE 62240
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
62021: LD_ADDR_VAR 0 4
62025: PUSH
62026: LD_EXP 101
62030: PUSH
62031: LD_VAR 0 2
62035: ARRAY
62036: PPUSH
62037: LD_INT 21
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PPUSH
62047: CALL_OW 72
62051: PUSH
62052: LD_EXP 130
62056: PUSH
62057: LD_VAR 0 2
62061: ARRAY
62062: UNION
62063: ST_TO_ADDR
// if not tmp then
62064: LD_VAR 0 4
62068: NOT
62069: IFFALSE 62073
// continue ;
62071: GO 62018
// for j in tmp do
62073: LD_ADDR_VAR 0 3
62077: PUSH
62078: LD_VAR 0 4
62082: PUSH
62083: FOR_IN
62084: IFFALSE 62236
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
62086: LD_VAR 0 3
62090: PPUSH
62091: CALL_OW 110
62095: NOT
62096: PUSH
62097: LD_VAR 0 3
62101: PPUSH
62102: CALL_OW 314
62106: NOT
62107: AND
62108: PUSH
62109: LD_VAR 0 3
62113: PPUSH
62114: CALL_OW 311
62118: NOT
62119: AND
62120: PUSH
62121: LD_VAR 0 3
62125: PPUSH
62126: CALL_OW 310
62130: NOT
62131: AND
62132: PUSH
62133: LD_VAR 0 3
62137: PUSH
62138: LD_EXP 104
62142: PUSH
62143: LD_VAR 0 2
62147: ARRAY
62148: PUSH
62149: LD_INT 1
62151: ARRAY
62152: IN
62153: NOT
62154: AND
62155: PUSH
62156: LD_VAR 0 3
62160: PUSH
62161: LD_EXP 104
62165: PUSH
62166: LD_VAR 0 2
62170: ARRAY
62171: PUSH
62172: LD_INT 2
62174: ARRAY
62175: IN
62176: NOT
62177: AND
62178: PUSH
62179: LD_VAR 0 3
62183: PUSH
62184: LD_EXP 113
62188: PUSH
62189: LD_VAR 0 2
62193: ARRAY
62194: IN
62195: NOT
62196: AND
62197: IFFALSE 62234
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
62199: LD_VAR 0 2
62203: PPUSH
62204: LD_EXP 101
62208: PUSH
62209: LD_VAR 0 2
62213: ARRAY
62214: PPUSH
62215: LD_VAR 0 3
62219: PPUSH
62220: LD_VAR 0 3
62224: PPUSH
62225: CALL_OW 257
62229: PPUSH
62230: CALL 61048 0 4
// end ;
62234: GO 62083
62236: POP
62237: POP
// end ;
62238: GO 62018
62240: POP
62241: POP
// end ;
62242: LD_VAR 0 1
62246: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , j , c ; begin
62247: LD_INT 0
62249: PPUSH
62250: PPUSH
62251: PPUSH
62252: PPUSH
62253: PPUSH
62254: PPUSH
// if not mc_bases [ base ] then
62255: LD_EXP 101
62259: PUSH
62260: LD_VAR 0 1
62264: ARRAY
62265: NOT
62266: IFFALSE 62270
// exit ;
62268: GO 62471
// tmp := [ ] ;
62270: LD_ADDR_VAR 0 6
62274: PUSH
62275: EMPTY
62276: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
62277: LD_ADDR_VAR 0 7
62281: PUSH
62282: LD_VAR 0 3
62286: PPUSH
62287: LD_INT 0
62289: PPUSH
62290: CALL_OW 517
62294: ST_TO_ADDR
// if not list then
62295: LD_VAR 0 7
62299: NOT
62300: IFFALSE 62304
// exit ;
62302: GO 62471
// c := Count ( list [ 1 ] ) ;
62304: LD_ADDR_VAR 0 9
62308: PUSH
62309: LD_VAR 0 7
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: CALL 71160 0 1
62322: ST_TO_ADDR
// if amount > c then
62323: LD_VAR 0 2
62327: PUSH
62328: LD_VAR 0 9
62332: GREATER
62333: IFFALSE 62345
// amount := c ;
62335: LD_ADDR_VAR 0 2
62339: PUSH
62340: LD_VAR 0 9
62344: ST_TO_ADDR
// for i := 1 to amount do
62345: LD_ADDR_VAR 0 5
62349: PUSH
62350: DOUBLE
62351: LD_INT 1
62353: DEC
62354: ST_TO_ADDR
62355: LD_VAR 0 2
62359: PUSH
62360: FOR_TO
62361: IFFALSE 62419
// tmp := Replace ( tmp , i , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62363: LD_ADDR_VAR 0 6
62367: PUSH
62368: LD_VAR 0 6
62372: PPUSH
62373: LD_VAR 0 5
62377: PPUSH
62378: LD_VAR 0 7
62382: PUSH
62383: LD_INT 1
62385: ARRAY
62386: PUSH
62387: LD_VAR 0 5
62391: ARRAY
62392: PUSH
62393: LD_VAR 0 7
62397: PUSH
62398: LD_INT 2
62400: ARRAY
62401: PUSH
62402: LD_VAR 0 5
62406: ARRAY
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PPUSH
62412: CALL_OW 1
62416: ST_TO_ADDR
62417: GO 62360
62419: POP
62420: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
62421: LD_ADDR_EXP 114
62425: PUSH
62426: LD_EXP 114
62430: PPUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: LD_VAR 0 6
62440: PPUSH
62441: CALL_OW 1
62445: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
62446: LD_ADDR_EXP 116
62450: PUSH
62451: LD_EXP 116
62455: PPUSH
62456: LD_VAR 0 1
62460: PPUSH
62461: LD_VAR 0 3
62465: PPUSH
62466: CALL_OW 1
62470: ST_TO_ADDR
// end ;
62471: LD_VAR 0 4
62475: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
62476: LD_INT 0
62478: PPUSH
// if not mc_bases [ base ] then
62479: LD_EXP 101
62483: PUSH
62484: LD_VAR 0 1
62488: ARRAY
62489: NOT
62490: IFFALSE 62494
// exit ;
62492: GO 62519
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
62494: LD_ADDR_EXP 106
62498: PUSH
62499: LD_EXP 106
62503: PPUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: LD_VAR 0 2
62513: PPUSH
62514: CALL_OW 1
62518: ST_TO_ADDR
// end ;
62519: LD_VAR 0 3
62523: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
62524: LD_INT 0
62526: PPUSH
// if not mc_bases [ base ] then
62527: LD_EXP 101
62531: PUSH
62532: LD_VAR 0 1
62536: ARRAY
62537: NOT
62538: IFFALSE 62542
// exit ;
62540: GO 62579
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
62542: LD_ADDR_EXP 106
62546: PUSH
62547: LD_EXP 106
62551: PPUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: LD_EXP 106
62561: PUSH
62562: LD_VAR 0 1
62566: ARRAY
62567: PUSH
62568: LD_VAR 0 2
62572: UNION
62573: PPUSH
62574: CALL_OW 1
62578: ST_TO_ADDR
// end ;
62579: LD_VAR 0 3
62583: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
62584: LD_INT 0
62586: PPUSH
// if not mc_bases [ base ] then
62587: LD_EXP 101
62591: PUSH
62592: LD_VAR 0 1
62596: ARRAY
62597: NOT
62598: IFFALSE 62602
// exit ;
62600: GO 62627
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
62602: LD_ADDR_EXP 122
62606: PUSH
62607: LD_EXP 122
62611: PPUSH
62612: LD_VAR 0 1
62616: PPUSH
62617: LD_VAR 0 2
62621: PPUSH
62622: CALL_OW 1
62626: ST_TO_ADDR
// end ;
62627: LD_VAR 0 3
62631: RET
// export function MC_InsertProduceList ( base , components ) ; begin
62632: LD_INT 0
62634: PPUSH
// if not mc_bases [ base ] then
62635: LD_EXP 101
62639: PUSH
62640: LD_VAR 0 1
62644: ARRAY
62645: NOT
62646: IFFALSE 62650
// exit ;
62648: GO 62687
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
62650: LD_ADDR_EXP 122
62654: PUSH
62655: LD_EXP 122
62659: PPUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: LD_EXP 122
62669: PUSH
62670: LD_VAR 0 1
62674: ARRAY
62675: PUSH
62676: LD_VAR 0 2
62680: ADD
62681: PPUSH
62682: CALL_OW 1
62686: ST_TO_ADDR
// end ;
62687: LD_VAR 0 3
62691: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
62692: LD_INT 0
62694: PPUSH
// if not mc_bases [ base ] then
62695: LD_EXP 101
62699: PUSH
62700: LD_VAR 0 1
62704: ARRAY
62705: NOT
62706: IFFALSE 62710
// exit ;
62708: GO 62764
// mc_defender := Replace ( mc_defender , base , deflist ) ;
62710: LD_ADDR_EXP 123
62714: PUSH
62715: LD_EXP 123
62719: PPUSH
62720: LD_VAR 0 1
62724: PPUSH
62725: LD_VAR 0 2
62729: PPUSH
62730: CALL_OW 1
62734: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
62735: LD_ADDR_EXP 112
62739: PUSH
62740: LD_EXP 112
62744: PPUSH
62745: LD_VAR 0 1
62749: PPUSH
62750: LD_VAR 0 2
62754: PUSH
62755: LD_INT 0
62757: PLUS
62758: PPUSH
62759: CALL_OW 1
62763: ST_TO_ADDR
// end ;
62764: LD_VAR 0 3
62768: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
62769: LD_INT 0
62771: PPUSH
// if not mc_bases [ base ] then
62772: LD_EXP 101
62776: PUSH
62777: LD_VAR 0 1
62781: ARRAY
62782: NOT
62783: IFFALSE 62787
// exit ;
62785: GO 62812
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
62787: LD_ADDR_EXP 112
62791: PUSH
62792: LD_EXP 112
62796: PPUSH
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_VAR 0 2
62806: PPUSH
62807: CALL_OW 1
62811: ST_TO_ADDR
// end ;
62812: LD_VAR 0 3
62816: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
62817: LD_INT 0
62819: PPUSH
62820: PPUSH
62821: PPUSH
62822: PPUSH
// if not mc_bases [ base ] then
62823: LD_EXP 101
62827: PUSH
62828: LD_VAR 0 1
62832: ARRAY
62833: NOT
62834: IFFALSE 62838
// exit ;
62836: GO 62903
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
62838: LD_ADDR_EXP 121
62842: PUSH
62843: LD_EXP 121
62847: PPUSH
62848: LD_VAR 0 1
62852: PUSH
62853: LD_EXP 121
62857: PUSH
62858: LD_VAR 0 1
62862: ARRAY
62863: PUSH
62864: LD_INT 1
62866: PLUS
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PPUSH
62872: LD_VAR 0 1
62876: PUSH
62877: LD_VAR 0 2
62881: PUSH
62882: LD_VAR 0 3
62886: PUSH
62887: LD_VAR 0 4
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: PPUSH
62898: CALL 74020 0 3
62902: ST_TO_ADDR
// end ;
62903: LD_VAR 0 5
62907: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
62908: LD_INT 0
62910: PPUSH
// if not mc_bases [ base ] then
62911: LD_EXP 101
62915: PUSH
62916: LD_VAR 0 1
62920: ARRAY
62921: NOT
62922: IFFALSE 62926
// exit ;
62924: GO 62951
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
62926: LD_ADDR_EXP 138
62930: PUSH
62931: LD_EXP 138
62935: PPUSH
62936: LD_VAR 0 1
62940: PPUSH
62941: LD_VAR 0 2
62945: PPUSH
62946: CALL_OW 1
62950: ST_TO_ADDR
// end ;
62951: LD_VAR 0 3
62955: RET
// export function MC_GetMinesField ( base ) ; begin
62956: LD_INT 0
62958: PPUSH
// result := mc_mines [ base ] ;
62959: LD_ADDR_VAR 0 2
62963: PUSH
62964: LD_EXP 114
62968: PUSH
62969: LD_VAR 0 1
62973: ARRAY
62974: ST_TO_ADDR
// end ;
62975: LD_VAR 0 2
62979: RET
// export function MC_GetProduceList ( base ) ; begin
62980: LD_INT 0
62982: PPUSH
// result := mc_produce [ base ] ;
62983: LD_ADDR_VAR 0 2
62987: PUSH
62988: LD_EXP 122
62992: PUSH
62993: LD_VAR 0 1
62997: ARRAY
62998: ST_TO_ADDR
// end ;
62999: LD_VAR 0 2
63003: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
63004: LD_INT 0
63006: PPUSH
63007: PPUSH
// if not mc_bases then
63008: LD_EXP 101
63012: NOT
63013: IFFALSE 63017
// exit ;
63015: GO 63082
// if mc_bases [ base ] then
63017: LD_EXP 101
63021: PUSH
63022: LD_VAR 0 1
63026: ARRAY
63027: IFFALSE 63082
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63029: LD_ADDR_VAR 0 3
63033: PUSH
63034: LD_EXP 101
63038: PUSH
63039: LD_VAR 0 1
63043: ARRAY
63044: PPUSH
63045: LD_INT 30
63047: PUSH
63048: LD_VAR 0 2
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PPUSH
63057: CALL_OW 72
63061: ST_TO_ADDR
// if result then
63062: LD_VAR 0 3
63066: IFFALSE 63082
// result := result [ 1 ] ;
63068: LD_ADDR_VAR 0 3
63072: PUSH
63073: LD_VAR 0 3
63077: PUSH
63078: LD_INT 1
63080: ARRAY
63081: ST_TO_ADDR
// end ; end ;
63082: LD_VAR 0 3
63086: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
63087: LD_INT 0
63089: PPUSH
63090: PPUSH
// if not mc_bases then
63091: LD_EXP 101
63095: NOT
63096: IFFALSE 63100
// exit ;
63098: GO 63145
// if mc_bases [ base ] then
63100: LD_EXP 101
63104: PUSH
63105: LD_VAR 0 1
63109: ARRAY
63110: IFFALSE 63145
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63112: LD_ADDR_VAR 0 3
63116: PUSH
63117: LD_EXP 101
63121: PUSH
63122: LD_VAR 0 1
63126: ARRAY
63127: PPUSH
63128: LD_INT 30
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PPUSH
63140: CALL_OW 72
63144: ST_TO_ADDR
// end ;
63145: LD_VAR 0 3
63149: RET
// export function MC_SetTame ( base , area ) ; begin
63150: LD_INT 0
63152: PPUSH
// if not mc_bases or not base then
63153: LD_EXP 101
63157: NOT
63158: PUSH
63159: LD_VAR 0 1
63163: NOT
63164: OR
63165: IFFALSE 63169
// exit ;
63167: GO 63194
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
63169: LD_ADDR_EXP 129
63173: PUSH
63174: LD_EXP 129
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: LD_VAR 0 2
63188: PPUSH
63189: CALL_OW 1
63193: ST_TO_ADDR
// end ;
63194: LD_VAR 0 3
63198: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
63199: LD_INT 0
63201: PPUSH
63202: PPUSH
// if not mc_bases or not base then
63203: LD_EXP 101
63207: NOT
63208: PUSH
63209: LD_VAR 0 1
63213: NOT
63214: OR
63215: IFFALSE 63219
// exit ;
63217: GO 63321
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63219: LD_ADDR_VAR 0 4
63223: PUSH
63224: LD_EXP 101
63228: PUSH
63229: LD_VAR 0 1
63233: ARRAY
63234: PPUSH
63235: LD_INT 30
63237: PUSH
63238: LD_VAR 0 2
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PPUSH
63247: CALL_OW 72
63251: ST_TO_ADDR
// if not tmp then
63252: LD_VAR 0 4
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63321
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
63261: LD_ADDR_EXP 133
63265: PUSH
63266: LD_EXP 133
63270: PPUSH
63271: LD_VAR 0 1
63275: PPUSH
63276: LD_EXP 133
63280: PUSH
63281: LD_VAR 0 1
63285: ARRAY
63286: PPUSH
63287: LD_EXP 133
63291: PUSH
63292: LD_VAR 0 1
63296: ARRAY
63297: PUSH
63298: LD_INT 1
63300: PLUS
63301: PPUSH
63302: LD_VAR 0 4
63306: PUSH
63307: LD_INT 1
63309: ARRAY
63310: PPUSH
63311: CALL_OW 2
63315: PPUSH
63316: CALL_OW 1
63320: ST_TO_ADDR
// end ;
63321: LD_VAR 0 3
63325: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
63326: LD_INT 0
63328: PPUSH
63329: PPUSH
// if not mc_bases or not base or not kinds then
63330: LD_EXP 101
63334: NOT
63335: PUSH
63336: LD_VAR 0 1
63340: NOT
63341: OR
63342: PUSH
63343: LD_VAR 0 2
63347: NOT
63348: OR
63349: IFFALSE 63353
// exit ;
63351: GO 63414
// for i in kinds do
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: FOR_IN
63364: IFFALSE 63412
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
63366: LD_ADDR_EXP 135
63370: PUSH
63371: LD_EXP 135
63375: PPUSH
63376: LD_VAR 0 1
63380: PUSH
63381: LD_EXP 135
63385: PUSH
63386: LD_VAR 0 1
63390: ARRAY
63391: PUSH
63392: LD_INT 1
63394: PLUS
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PPUSH
63400: LD_VAR 0 4
63404: PPUSH
63405: CALL 74020 0 3
63409: ST_TO_ADDR
63410: GO 63363
63412: POP
63413: POP
// end ;
63414: LD_VAR 0 3
63418: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
63419: LD_INT 0
63421: PPUSH
// if not mc_bases or not base or not areas then
63422: LD_EXP 101
63426: NOT
63427: PUSH
63428: LD_VAR 0 1
63432: NOT
63433: OR
63434: PUSH
63435: LD_VAR 0 2
63439: NOT
63440: OR
63441: IFFALSE 63445
// exit ;
63443: GO 63470
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
63445: LD_ADDR_EXP 119
63449: PUSH
63450: LD_EXP 119
63454: PPUSH
63455: LD_VAR 0 1
63459: PPUSH
63460: LD_VAR 0 2
63464: PPUSH
63465: CALL_OW 1
63469: ST_TO_ADDR
// end ;
63470: LD_VAR 0 3
63474: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
63475: LD_INT 0
63477: PPUSH
// if not mc_bases or not base or not teleports_exit then
63478: LD_EXP 101
63482: NOT
63483: PUSH
63484: LD_VAR 0 1
63488: NOT
63489: OR
63490: PUSH
63491: LD_VAR 0 2
63495: NOT
63496: OR
63497: IFFALSE 63501
// exit ;
63499: GO 63526
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
63501: LD_ADDR_EXP 136
63505: PUSH
63506: LD_EXP 136
63510: PPUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: LD_VAR 0 2
63520: PPUSH
63521: CALL_OW 1
63525: ST_TO_ADDR
// end ;
63526: LD_VAR 0 3
63530: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
63531: LD_INT 0
63533: PPUSH
63534: PPUSH
63535: PPUSH
// if not mc_bases or not base or not ext_list then
63536: LD_EXP 101
63540: NOT
63541: PUSH
63542: LD_VAR 0 1
63546: NOT
63547: OR
63548: PUSH
63549: LD_VAR 0 5
63553: NOT
63554: OR
63555: IFFALSE 63559
// exit ;
63557: GO 63732
// tmp := GetFacExtXYD ( x , y , d ) ;
63559: LD_ADDR_VAR 0 8
63563: PUSH
63564: LD_VAR 0 2
63568: PPUSH
63569: LD_VAR 0 3
63573: PPUSH
63574: LD_VAR 0 4
63578: PPUSH
63579: CALL 104006 0 3
63583: ST_TO_ADDR
// if not tmp then
63584: LD_VAR 0 8
63588: NOT
63589: IFFALSE 63593
// exit ;
63591: GO 63732
// for i in tmp do
63593: LD_ADDR_VAR 0 7
63597: PUSH
63598: LD_VAR 0 8
63602: PUSH
63603: FOR_IN
63604: IFFALSE 63730
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
63606: LD_ADDR_EXP 106
63610: PUSH
63611: LD_EXP 106
63615: PPUSH
63616: LD_VAR 0 1
63620: PPUSH
63621: LD_EXP 106
63625: PUSH
63626: LD_VAR 0 1
63630: ARRAY
63631: PPUSH
63632: LD_EXP 106
63636: PUSH
63637: LD_VAR 0 1
63641: ARRAY
63642: PUSH
63643: LD_INT 1
63645: PLUS
63646: PPUSH
63647: LD_VAR 0 5
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PUSH
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 1
63663: ARRAY
63664: PUSH
63665: LD_VAR 0 7
63669: PUSH
63670: LD_INT 2
63672: ARRAY
63673: PUSH
63674: LD_VAR 0 7
63678: PUSH
63679: LD_INT 3
63681: ARRAY
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: PPUSH
63689: CALL_OW 2
63693: PPUSH
63694: CALL_OW 1
63698: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
63699: LD_ADDR_VAR 0 5
63703: PUSH
63704: LD_VAR 0 5
63708: PPUSH
63709: LD_INT 1
63711: PPUSH
63712: CALL_OW 3
63716: ST_TO_ADDR
// if not ext_list then
63717: LD_VAR 0 5
63721: NOT
63722: IFFALSE 63728
// exit ;
63724: POP
63725: POP
63726: GO 63732
// end ;
63728: GO 63603
63730: POP
63731: POP
// end ;
63732: LD_VAR 0 6
63736: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
63737: LD_INT 0
63739: PPUSH
// if not mc_bases or not base or not weapon_list then
63740: LD_EXP 101
63744: NOT
63745: PUSH
63746: LD_VAR 0 1
63750: NOT
63751: OR
63752: PUSH
63753: LD_VAR 0 2
63757: NOT
63758: OR
63759: IFFALSE 63763
// exit ;
63761: GO 63788
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
63763: LD_ADDR_EXP 140
63767: PUSH
63768: LD_EXP 140
63772: PPUSH
63773: LD_VAR 0 1
63777: PPUSH
63778: LD_VAR 0 2
63782: PPUSH
63783: CALL_OW 1
63787: ST_TO_ADDR
// end ;
63788: LD_VAR 0 3
63792: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
63793: LD_INT 0
63795: PPUSH
// if not mc_bases or not base or not tech_list then
63796: LD_EXP 101
63800: NOT
63801: PUSH
63802: LD_VAR 0 1
63806: NOT
63807: OR
63808: PUSH
63809: LD_VAR 0 2
63813: NOT
63814: OR
63815: IFFALSE 63819
// exit ;
63817: GO 63844
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
63819: LD_ADDR_EXP 128
63823: PUSH
63824: LD_EXP 128
63828: PPUSH
63829: LD_VAR 0 1
63833: PPUSH
63834: LD_VAR 0 2
63838: PPUSH
63839: CALL_OW 1
63843: ST_TO_ADDR
// end ;
63844: LD_VAR 0 3
63848: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
63849: LD_INT 0
63851: PPUSH
// if not mc_bases or not parking_area or not base then
63852: LD_EXP 101
63856: NOT
63857: PUSH
63858: LD_VAR 0 2
63862: NOT
63863: OR
63864: PUSH
63865: LD_VAR 0 1
63869: NOT
63870: OR
63871: IFFALSE 63875
// exit ;
63873: GO 63900
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
63875: LD_ADDR_EXP 125
63879: PUSH
63880: LD_EXP 125
63884: PPUSH
63885: LD_VAR 0 1
63889: PPUSH
63890: LD_VAR 0 2
63894: PPUSH
63895: CALL_OW 1
63899: ST_TO_ADDR
// end ;
63900: LD_VAR 0 3
63904: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
63905: LD_INT 0
63907: PPUSH
// if not mc_bases or not base or not scan_area then
63908: LD_EXP 101
63912: NOT
63913: PUSH
63914: LD_VAR 0 1
63918: NOT
63919: OR
63920: PUSH
63921: LD_VAR 0 2
63925: NOT
63926: OR
63927: IFFALSE 63931
// exit ;
63929: GO 63956
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
63931: LD_ADDR_EXP 126
63935: PUSH
63936: LD_EXP 126
63940: PPUSH
63941: LD_VAR 0 1
63945: PPUSH
63946: LD_VAR 0 2
63950: PPUSH
63951: CALL_OW 1
63955: ST_TO_ADDR
// end ;
63956: LD_VAR 0 3
63960: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
63961: LD_INT 0
63963: PPUSH
63964: PPUSH
// if not mc_bases or not base then
63965: LD_EXP 101
63969: NOT
63970: PUSH
63971: LD_VAR 0 1
63975: NOT
63976: OR
63977: IFFALSE 63981
// exit ;
63979: GO 64045
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
63981: LD_ADDR_VAR 0 3
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 3
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 11
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
64008: LD_ADDR_EXP 128
64012: PUSH
64013: LD_EXP 128
64017: PPUSH
64018: LD_VAR 0 1
64022: PPUSH
64023: LD_EXP 128
64027: PUSH
64028: LD_VAR 0 1
64032: ARRAY
64033: PUSH
64034: LD_VAR 0 3
64038: DIFF
64039: PPUSH
64040: CALL_OW 1
64044: ST_TO_ADDR
// end ;
64045: LD_VAR 0 2
64049: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
64050: LD_INT 0
64052: PPUSH
// result := mc_vehicles [ base ] ;
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: LD_EXP 120
64062: PUSH
64063: LD_VAR 0 1
64067: ARRAY
64068: ST_TO_ADDR
// if onlyCombat then
64069: LD_VAR 0 2
64073: IFFALSE 64245
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
64075: LD_ADDR_VAR 0 3
64079: PUSH
64080: LD_VAR 0 3
64084: PUSH
64085: LD_VAR 0 3
64089: PPUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 34
64095: PUSH
64096: LD_INT 12
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 34
64105: PUSH
64106: LD_INT 51
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 34
64115: PUSH
64116: LD_INT 89
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 34
64125: PUSH
64126: LD_INT 32
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 34
64135: PUSH
64136: LD_INT 13
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 34
64145: PUSH
64146: LD_INT 52
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 34
64155: PUSH
64156: LD_INT 88
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 34
64165: PUSH
64166: LD_INT 14
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 34
64175: PUSH
64176: LD_INT 53
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 34
64185: PUSH
64186: LD_INT 98
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 34
64195: PUSH
64196: LD_INT 31
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 34
64205: PUSH
64206: LD_INT 48
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 34
64215: PUSH
64216: LD_INT 8
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: PPUSH
64239: CALL_OW 72
64243: DIFF
64244: ST_TO_ADDR
// end ; end_of_file
64245: LD_VAR 0 3
64249: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
64250: LD_INT 0
64252: PPUSH
64253: PPUSH
64254: PPUSH
// if not mc_bases or not skirmish then
64255: LD_EXP 101
64259: NOT
64260: PUSH
64261: LD_EXP 99
64265: NOT
64266: OR
64267: IFFALSE 64271
// exit ;
64269: GO 64436
// for i = 1 to mc_bases do
64271: LD_ADDR_VAR 0 4
64275: PUSH
64276: DOUBLE
64277: LD_INT 1
64279: DEC
64280: ST_TO_ADDR
64281: LD_EXP 101
64285: PUSH
64286: FOR_TO
64287: IFFALSE 64434
// begin if sci in mc_bases [ i ] then
64289: LD_VAR 0 2
64293: PUSH
64294: LD_EXP 101
64298: PUSH
64299: LD_VAR 0 4
64303: ARRAY
64304: IN
64305: IFFALSE 64432
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
64307: LD_ADDR_EXP 130
64311: PUSH
64312: LD_EXP 130
64316: PPUSH
64317: LD_VAR 0 4
64321: PUSH
64322: LD_EXP 130
64326: PUSH
64327: LD_VAR 0 4
64331: ARRAY
64332: PUSH
64333: LD_INT 1
64335: PLUS
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PPUSH
64341: LD_VAR 0 1
64345: PPUSH
64346: CALL 74020 0 3
64350: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
64351: LD_ADDR_VAR 0 5
64355: PUSH
64356: LD_EXP 101
64360: PUSH
64361: LD_VAR 0 4
64365: ARRAY
64366: PPUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 30
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 30
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: PPUSH
64395: CALL_OW 72
64399: PPUSH
64400: LD_VAR 0 1
64404: PPUSH
64405: CALL_OW 74
64409: ST_TO_ADDR
// if tmp then
64410: LD_VAR 0 5
64414: IFFALSE 64430
// ComStandNearbyBuilding ( ape , tmp ) ;
64416: LD_VAR 0 1
64420: PPUSH
64421: LD_VAR 0 5
64425: PPUSH
64426: CALL 70622 0 2
// break ;
64430: GO 64434
// end ; end ;
64432: GO 64286
64434: POP
64435: POP
// end ;
64436: LD_VAR 0 3
64440: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
64441: LD_INT 0
64443: PPUSH
64444: PPUSH
64445: PPUSH
// if not mc_bases or not skirmish then
64446: LD_EXP 101
64450: NOT
64451: PUSH
64452: LD_EXP 99
64456: NOT
64457: OR
64458: IFFALSE 64462
// exit ;
64460: GO 64551
// for i = 1 to mc_bases do
64462: LD_ADDR_VAR 0 4
64466: PUSH
64467: DOUBLE
64468: LD_INT 1
64470: DEC
64471: ST_TO_ADDR
64472: LD_EXP 101
64476: PUSH
64477: FOR_TO
64478: IFFALSE 64549
// begin if building in mc_busy_turret_list [ i ] then
64480: LD_VAR 0 1
64484: PUSH
64485: LD_EXP 111
64489: PUSH
64490: LD_VAR 0 4
64494: ARRAY
64495: IN
64496: IFFALSE 64547
// begin tmp := mc_busy_turret_list [ i ] diff building ;
64498: LD_ADDR_VAR 0 5
64502: PUSH
64503: LD_EXP 111
64507: PUSH
64508: LD_VAR 0 4
64512: ARRAY
64513: PUSH
64514: LD_VAR 0 1
64518: DIFF
64519: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
64520: LD_ADDR_EXP 111
64524: PUSH
64525: LD_EXP 111
64529: PPUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: LD_VAR 0 5
64539: PPUSH
64540: CALL_OW 1
64544: ST_TO_ADDR
// break ;
64545: GO 64549
// end ; end ;
64547: GO 64477
64549: POP
64550: POP
// end ;
64551: LD_VAR 0 3
64555: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
64556: LD_INT 0
64558: PPUSH
64559: PPUSH
64560: PPUSH
// if not mc_bases or not skirmish then
64561: LD_EXP 101
64565: NOT
64566: PUSH
64567: LD_EXP 99
64571: NOT
64572: OR
64573: IFFALSE 64577
// exit ;
64575: GO 64776
// for i = 1 to mc_bases do
64577: LD_ADDR_VAR 0 5
64581: PUSH
64582: DOUBLE
64583: LD_INT 1
64585: DEC
64586: ST_TO_ADDR
64587: LD_EXP 101
64591: PUSH
64592: FOR_TO
64593: IFFALSE 64774
// if building in mc_bases [ i ] then
64595: LD_VAR 0 1
64599: PUSH
64600: LD_EXP 101
64604: PUSH
64605: LD_VAR 0 5
64609: ARRAY
64610: IN
64611: IFFALSE 64772
// begin tmp := mc_bases [ i ] diff building ;
64613: LD_ADDR_VAR 0 6
64617: PUSH
64618: LD_EXP 101
64622: PUSH
64623: LD_VAR 0 5
64627: ARRAY
64628: PUSH
64629: LD_VAR 0 1
64633: DIFF
64634: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
64635: LD_ADDR_EXP 101
64639: PUSH
64640: LD_EXP 101
64644: PPUSH
64645: LD_VAR 0 5
64649: PPUSH
64650: LD_VAR 0 6
64654: PPUSH
64655: CALL_OW 1
64659: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
64660: LD_VAR 0 1
64664: PUSH
64665: LD_EXP 109
64669: PUSH
64670: LD_VAR 0 5
64674: ARRAY
64675: IN
64676: IFFALSE 64715
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
64678: LD_ADDR_EXP 109
64682: PUSH
64683: LD_EXP 109
64687: PPUSH
64688: LD_VAR 0 5
64692: PPUSH
64693: LD_EXP 109
64697: PUSH
64698: LD_VAR 0 5
64702: ARRAY
64703: PUSH
64704: LD_VAR 0 1
64708: DIFF
64709: PPUSH
64710: CALL_OW 1
64714: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
64715: LD_VAR 0 1
64719: PUSH
64720: LD_EXP 110
64724: PUSH
64725: LD_VAR 0 5
64729: ARRAY
64730: IN
64731: IFFALSE 64770
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
64733: LD_ADDR_EXP 110
64737: PUSH
64738: LD_EXP 110
64742: PPUSH
64743: LD_VAR 0 5
64747: PPUSH
64748: LD_EXP 110
64752: PUSH
64753: LD_VAR 0 5
64757: ARRAY
64758: PUSH
64759: LD_VAR 0 1
64763: DIFF
64764: PPUSH
64765: CALL_OW 1
64769: ST_TO_ADDR
// break ;
64770: GO 64774
// end ;
64772: GO 64592
64774: POP
64775: POP
// end ;
64776: LD_VAR 0 4
64780: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
64781: LD_INT 0
64783: PPUSH
64784: PPUSH
64785: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
64786: LD_EXP 101
64790: NOT
64791: PUSH
64792: LD_EXP 99
64796: NOT
64797: OR
64798: PUSH
64799: LD_VAR 0 3
64803: PUSH
64804: LD_EXP 127
64808: IN
64809: NOT
64810: OR
64811: IFFALSE 64815
// exit ;
64813: GO 64938
// for i = 1 to mc_vehicles do
64815: LD_ADDR_VAR 0 6
64819: PUSH
64820: DOUBLE
64821: LD_INT 1
64823: DEC
64824: ST_TO_ADDR
64825: LD_EXP 120
64829: PUSH
64830: FOR_TO
64831: IFFALSE 64936
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
64833: LD_VAR 0 2
64837: PUSH
64838: LD_EXP 120
64842: PUSH
64843: LD_VAR 0 6
64847: ARRAY
64848: IN
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_EXP 120
64859: PUSH
64860: LD_VAR 0 6
64864: ARRAY
64865: IN
64866: OR
64867: IFFALSE 64934
// begin tmp := mc_vehicles [ i ] diff old ;
64869: LD_ADDR_VAR 0 7
64873: PUSH
64874: LD_EXP 120
64878: PUSH
64879: LD_VAR 0 6
64883: ARRAY
64884: PUSH
64885: LD_VAR 0 2
64889: DIFF
64890: ST_TO_ADDR
// tmp := tmp diff new ;
64891: LD_ADDR_VAR 0 7
64895: PUSH
64896: LD_VAR 0 7
64900: PUSH
64901: LD_VAR 0 1
64905: DIFF
64906: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
64907: LD_ADDR_EXP 120
64911: PUSH
64912: LD_EXP 120
64916: PPUSH
64917: LD_VAR 0 6
64921: PPUSH
64922: LD_VAR 0 7
64926: PPUSH
64927: CALL_OW 1
64931: ST_TO_ADDR
// break ;
64932: GO 64936
// end ;
64934: GO 64830
64936: POP
64937: POP
// end ;
64938: LD_VAR 0 5
64942: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
64943: LD_INT 0
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
// if not mc_bases or not skirmish then
64949: LD_EXP 101
64953: NOT
64954: PUSH
64955: LD_EXP 99
64959: NOT
64960: OR
64961: IFFALSE 64965
// exit ;
64963: GO 65385
// repeat wait ( 0 0$1 ) ;
64965: LD_INT 35
64967: PPUSH
64968: CALL_OW 67
// until not mc_block_vehicle_constructed_thread ;
64972: LD_EXP 145
64976: NOT
64977: IFFALSE 64965
// mc_block_vehicle_constructed_thread := true ;
64979: LD_ADDR_EXP 145
64983: PUSH
64984: LD_INT 1
64986: ST_TO_ADDR
// side := GetSide ( vehicle ) ;
64987: LD_ADDR_VAR 0 5
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 255
65001: ST_TO_ADDR
// for i = 1 to mc_bases do
65002: LD_ADDR_VAR 0 4
65006: PUSH
65007: DOUBLE
65008: LD_INT 1
65010: DEC
65011: ST_TO_ADDR
65012: LD_EXP 101
65016: PUSH
65017: FOR_TO
65018: IFFALSE 65375
// begin if factory in mc_bases [ i ] then
65020: LD_VAR 0 2
65024: PUSH
65025: LD_EXP 101
65029: PUSH
65030: LD_VAR 0 4
65034: ARRAY
65035: IN
65036: IFFALSE 65373
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
65038: LD_EXP 123
65042: PUSH
65043: LD_VAR 0 4
65047: ARRAY
65048: PUSH
65049: LD_EXP 112
65053: PUSH
65054: LD_VAR 0 4
65058: ARRAY
65059: LESS
65060: PUSH
65061: LD_VAR 0 1
65065: PPUSH
65066: CALL_OW 264
65070: PUSH
65071: LD_INT 31
65073: PUSH
65074: LD_INT 32
65076: PUSH
65077: LD_INT 51
65079: PUSH
65080: LD_INT 89
65082: PUSH
65083: LD_INT 12
65085: PUSH
65086: LD_INT 30
65088: PUSH
65089: LD_INT 98
65091: PUSH
65092: LD_INT 11
65094: PUSH
65095: LD_INT 53
65097: PUSH
65098: LD_INT 14
65100: PUSH
65101: LD_INT 91
65103: PUSH
65104: LD_INT 29
65106: PUSH
65107: LD_INT 99
65109: PUSH
65110: LD_INT 13
65112: PUSH
65113: LD_INT 52
65115: PUSH
65116: LD_INT 88
65118: PUSH
65119: LD_INT 48
65121: PUSH
65122: LD_INT 8
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: IN
65145: NOT
65146: AND
65147: IFFALSE 65195
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
65149: LD_ADDR_EXP 123
65153: PUSH
65154: LD_EXP 123
65158: PPUSH
65159: LD_VAR 0 4
65163: PUSH
65164: LD_EXP 123
65168: PUSH
65169: LD_VAR 0 4
65173: ARRAY
65174: PUSH
65175: LD_INT 1
65177: PLUS
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PPUSH
65183: LD_VAR 0 1
65187: PPUSH
65188: CALL 74020 0 3
65192: ST_TO_ADDR
65193: GO 65239
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
65195: LD_ADDR_EXP 120
65199: PUSH
65200: LD_EXP 120
65204: PPUSH
65205: LD_VAR 0 4
65209: PUSH
65210: LD_EXP 120
65214: PUSH
65215: LD_VAR 0 4
65219: ARRAY
65220: PUSH
65221: LD_INT 1
65223: PLUS
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PPUSH
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL 74020 0 3
65238: ST_TO_ADDR
// mc_block_vehicle_constructed_thread := false ;
65239: LD_ADDR_EXP 145
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 263
65256: PUSH
65257: LD_INT 2
65259: EQUAL
65260: IFFALSE 65289
// begin repeat wait ( 0 0$3 ) ;
65262: LD_INT 105
65264: PPUSH
65265: CALL_OW 67
// Connect ( vehicle ) ;
65269: LD_VAR 0 1
65273: PPUSH
65274: CALL 76998 0 1
// until IsControledBy ( vehicle ) ;
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL_OW 312
65287: IFFALSE 65262
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
65289: LD_VAR 0 1
65293: PPUSH
65294: LD_EXP 125
65298: PUSH
65299: LD_VAR 0 4
65303: ARRAY
65304: PPUSH
65305: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 263
65318: PUSH
65319: LD_INT 1
65321: NONEQUAL
65322: IFFALSE 65326
// break ;
65324: GO 65375
// repeat wait ( 0 0$1 ) ;
65326: LD_INT 35
65328: PPUSH
65329: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_EXP 125
65342: PUSH
65343: LD_VAR 0 4
65347: ARRAY
65348: PPUSH
65349: CALL_OW 308
65353: IFFALSE 65326
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
65355: LD_VAR 0 1
65359: PPUSH
65360: CALL_OW 311
65364: PPUSH
65365: CALL_OW 121
// exit ;
65369: POP
65370: POP
65371: GO 65385
// end ; end ;
65373: GO 65017
65375: POP
65376: POP
// mc_block_vehicle_constructed_thread := false ;
65377: LD_ADDR_EXP 145
65381: PUSH
65382: LD_INT 0
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 3
65389: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
// if not mc_bases or not skirmish then
65396: LD_EXP 101
65400: NOT
65401: PUSH
65402: LD_EXP 99
65406: NOT
65407: OR
65408: IFFALSE 65412
// exit ;
65410: GO 65765
// repeat wait ( 0 0$1 ) ;
65412: LD_INT 35
65414: PPUSH
65415: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
65419: LD_VAR 0 2
65423: PPUSH
65424: LD_VAR 0 3
65428: PPUSH
65429: CALL_OW 284
65433: IFFALSE 65412
// if GetResourceTypeXY ( x , y ) = mat_artefact then
65435: LD_VAR 0 2
65439: PPUSH
65440: LD_VAR 0 3
65444: PPUSH
65445: CALL_OW 283
65449: PUSH
65450: LD_INT 4
65452: EQUAL
65453: IFFALSE 65457
// exit ;
65455: GO 65765
// for i = 1 to mc_bases do
65457: LD_ADDR_VAR 0 7
65461: PUSH
65462: DOUBLE
65463: LD_INT 1
65465: DEC
65466: ST_TO_ADDR
65467: LD_EXP 101
65471: PUSH
65472: FOR_TO
65473: IFFALSE 65763
// begin if mc_crates_area [ i ] then
65475: LD_EXP 119
65479: PUSH
65480: LD_VAR 0 7
65484: ARRAY
65485: IFFALSE 65596
// for j in mc_crates_area [ i ] do
65487: LD_ADDR_VAR 0 8
65491: PUSH
65492: LD_EXP 119
65496: PUSH
65497: LD_VAR 0 7
65501: ARRAY
65502: PUSH
65503: FOR_IN
65504: IFFALSE 65594
// if InArea ( x , y , j ) then
65506: LD_VAR 0 2
65510: PPUSH
65511: LD_VAR 0 3
65515: PPUSH
65516: LD_VAR 0 8
65520: PPUSH
65521: CALL_OW 309
65525: IFFALSE 65592
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65527: LD_ADDR_EXP 117
65531: PUSH
65532: LD_EXP 117
65536: PPUSH
65537: LD_VAR 0 7
65541: PUSH
65542: LD_EXP 117
65546: PUSH
65547: LD_VAR 0 7
65551: ARRAY
65552: PUSH
65553: LD_INT 1
65555: PLUS
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PPUSH
65561: LD_VAR 0 4
65565: PUSH
65566: LD_VAR 0 2
65570: PUSH
65571: LD_VAR 0 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PPUSH
65581: CALL 74020 0 3
65585: ST_TO_ADDR
// exit ;
65586: POP
65587: POP
65588: POP
65589: POP
65590: GO 65765
// end ;
65592: GO 65503
65594: POP
65595: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65596: LD_ADDR_VAR 0 9
65600: PUSH
65601: LD_EXP 101
65605: PUSH
65606: LD_VAR 0 7
65610: ARRAY
65611: PPUSH
65612: LD_INT 2
65614: PUSH
65615: LD_INT 30
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 30
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: PPUSH
65640: CALL_OW 72
65644: ST_TO_ADDR
// if not depot then
65645: LD_VAR 0 9
65649: NOT
65650: IFFALSE 65654
// continue ;
65652: GO 65472
// for j in depot do
65654: LD_ADDR_VAR 0 8
65658: PUSH
65659: LD_VAR 0 9
65663: PUSH
65664: FOR_IN
65665: IFFALSE 65759
// if GetDistUnitXY ( j , x , y ) < 30 then
65667: LD_VAR 0 8
65671: PPUSH
65672: LD_VAR 0 2
65676: PPUSH
65677: LD_VAR 0 3
65681: PPUSH
65682: CALL_OW 297
65686: PUSH
65687: LD_INT 30
65689: LESS
65690: IFFALSE 65757
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65692: LD_ADDR_EXP 117
65696: PUSH
65697: LD_EXP 117
65701: PPUSH
65702: LD_VAR 0 7
65706: PUSH
65707: LD_EXP 117
65711: PUSH
65712: LD_VAR 0 7
65716: ARRAY
65717: PUSH
65718: LD_INT 1
65720: PLUS
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PPUSH
65726: LD_VAR 0 4
65730: PUSH
65731: LD_VAR 0 2
65735: PUSH
65736: LD_VAR 0 3
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: PPUSH
65746: CALL 74020 0 3
65750: ST_TO_ADDR
// exit ;
65751: POP
65752: POP
65753: POP
65754: POP
65755: GO 65765
// end ;
65757: GO 65664
65759: POP
65760: POP
// end ;
65761: GO 65472
65763: POP
65764: POP
// end ;
65765: LD_VAR 0 6
65769: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
65774: PPUSH
65775: PPUSH
// if not mc_bases or not skirmish then
65776: LD_EXP 101
65780: NOT
65781: PUSH
65782: LD_EXP 99
65786: NOT
65787: OR
65788: IFFALSE 65792
// exit ;
65790: GO 66069
// side := GetSide ( lab ) ;
65792: LD_ADDR_VAR 0 4
65796: PUSH
65797: LD_VAR 0 2
65801: PPUSH
65802: CALL_OW 255
65806: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
65807: LD_VAR 0 4
65811: PUSH
65812: LD_EXP 127
65816: IN
65817: NOT
65818: PUSH
65819: LD_EXP 128
65823: NOT
65824: OR
65825: PUSH
65826: LD_EXP 101
65830: NOT
65831: OR
65832: IFFALSE 65836
// exit ;
65834: GO 66069
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
65836: LD_ADDR_EXP 128
65840: PUSH
65841: LD_EXP 128
65845: PPUSH
65846: LD_VAR 0 4
65850: PPUSH
65851: LD_EXP 128
65855: PUSH
65856: LD_VAR 0 4
65860: ARRAY
65861: PUSH
65862: LD_VAR 0 1
65866: DIFF
65867: PPUSH
65868: CALL_OW 1
65872: ST_TO_ADDR
// for i = 1 to mc_bases do
65873: LD_ADDR_VAR 0 5
65877: PUSH
65878: DOUBLE
65879: LD_INT 1
65881: DEC
65882: ST_TO_ADDR
65883: LD_EXP 101
65887: PUSH
65888: FOR_TO
65889: IFFALSE 66067
// begin if lab in mc_bases [ i ] then
65891: LD_VAR 0 2
65895: PUSH
65896: LD_EXP 101
65900: PUSH
65901: LD_VAR 0 5
65905: ARRAY
65906: IN
65907: IFFALSE 66065
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
65909: LD_VAR 0 1
65913: PUSH
65914: LD_INT 11
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: IN
65932: PUSH
65933: LD_EXP 131
65937: PUSH
65938: LD_VAR 0 5
65942: ARRAY
65943: AND
65944: IFFALSE 66065
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
65946: LD_ADDR_VAR 0 6
65950: PUSH
65951: LD_EXP 131
65955: PUSH
65956: LD_VAR 0 5
65960: ARRAY
65961: PUSH
65962: LD_INT 1
65964: ARRAY
65965: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65966: LD_ADDR_EXP 131
65970: PUSH
65971: LD_EXP 131
65975: PPUSH
65976: LD_VAR 0 5
65980: PPUSH
65981: EMPTY
65982: PPUSH
65983: CALL_OW 1
65987: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
65988: LD_VAR 0 6
65992: PPUSH
65993: LD_INT 0
65995: PPUSH
65996: CALL_OW 109
// ComExitBuilding ( tmp ) ;
66000: LD_VAR 0 6
66004: PPUSH
66005: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
66009: LD_ADDR_EXP 130
66013: PUSH
66014: LD_EXP 130
66018: PPUSH
66019: LD_VAR 0 5
66023: PPUSH
66024: LD_EXP 130
66028: PUSH
66029: LD_VAR 0 5
66033: ARRAY
66034: PPUSH
66035: LD_INT 1
66037: PPUSH
66038: LD_VAR 0 6
66042: PPUSH
66043: CALL_OW 2
66047: PPUSH
66048: CALL_OW 1
66052: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
66053: LD_VAR 0 5
66057: PPUSH
66058: LD_INT 112
66060: PPUSH
66061: CALL 42519 0 2
// end ; end ; end ;
66065: GO 65888
66067: POP
66068: POP
// end ;
66069: LD_VAR 0 3
66073: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
66074: LD_INT 0
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
// if not mc_bases or not skirmish then
66084: LD_EXP 101
66088: NOT
66089: PUSH
66090: LD_EXP 99
66094: NOT
66095: OR
66096: IFFALSE 66100
// exit ;
66098: GO 67469
// for i = 1 to mc_bases do
66100: LD_ADDR_VAR 0 3
66104: PUSH
66105: DOUBLE
66106: LD_INT 1
66108: DEC
66109: ST_TO_ADDR
66110: LD_EXP 101
66114: PUSH
66115: FOR_TO
66116: IFFALSE 67467
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
66118: LD_VAR 0 1
66122: PUSH
66123: LD_EXP 101
66127: PUSH
66128: LD_VAR 0 3
66132: ARRAY
66133: IN
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_EXP 108
66144: PUSH
66145: LD_VAR 0 3
66149: ARRAY
66150: IN
66151: OR
66152: PUSH
66153: LD_VAR 0 1
66157: PUSH
66158: LD_EXP 123
66162: PUSH
66163: LD_VAR 0 3
66167: ARRAY
66168: IN
66169: OR
66170: PUSH
66171: LD_VAR 0 1
66175: PUSH
66176: LD_EXP 120
66180: PUSH
66181: LD_VAR 0 3
66185: ARRAY
66186: IN
66187: OR
66188: PUSH
66189: LD_VAR 0 1
66193: PUSH
66194: LD_EXP 130
66198: PUSH
66199: LD_VAR 0 3
66203: ARRAY
66204: IN
66205: OR
66206: PUSH
66207: LD_VAR 0 1
66211: PUSH
66212: LD_EXP 131
66216: PUSH
66217: LD_VAR 0 3
66221: ARRAY
66222: IN
66223: OR
66224: IFFALSE 67465
// begin if un in mc_ape [ i ] then
66226: LD_VAR 0 1
66230: PUSH
66231: LD_EXP 130
66235: PUSH
66236: LD_VAR 0 3
66240: ARRAY
66241: IN
66242: IFFALSE 66281
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
66244: LD_ADDR_EXP 130
66248: PUSH
66249: LD_EXP 130
66253: PPUSH
66254: LD_VAR 0 3
66258: PPUSH
66259: LD_EXP 130
66263: PUSH
66264: LD_VAR 0 3
66268: ARRAY
66269: PUSH
66270: LD_VAR 0 1
66274: DIFF
66275: PPUSH
66276: CALL_OW 1
66280: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
66281: LD_VAR 0 1
66285: PUSH
66286: LD_EXP 131
66290: PUSH
66291: LD_VAR 0 3
66295: ARRAY
66296: IN
66297: IFFALSE 66321
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
66299: LD_ADDR_EXP 131
66303: PUSH
66304: LD_EXP 131
66308: PPUSH
66309: LD_VAR 0 3
66313: PPUSH
66314: EMPTY
66315: PPUSH
66316: CALL_OW 1
66320: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 247
66330: PUSH
66331: LD_INT 2
66333: EQUAL
66334: PUSH
66335: LD_VAR 0 1
66339: PPUSH
66340: CALL_OW 110
66344: PUSH
66345: LD_INT 20
66347: EQUAL
66348: PUSH
66349: LD_VAR 0 1
66353: PUSH
66354: LD_EXP 123
66358: PUSH
66359: LD_VAR 0 3
66363: ARRAY
66364: IN
66365: OR
66366: PUSH
66367: LD_VAR 0 1
66371: PPUSH
66372: CALL_OW 264
66376: PUSH
66377: LD_INT 12
66379: PUSH
66380: LD_INT 51
66382: PUSH
66383: LD_INT 89
66385: PUSH
66386: LD_INT 32
66388: PUSH
66389: LD_INT 13
66391: PUSH
66392: LD_INT 52
66394: PUSH
66395: LD_INT 31
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: IN
66407: OR
66408: AND
66409: IFFALSE 66717
// begin if un in mc_defender [ i ] then
66411: LD_VAR 0 1
66415: PUSH
66416: LD_EXP 123
66420: PUSH
66421: LD_VAR 0 3
66425: ARRAY
66426: IN
66427: IFFALSE 66466
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
66429: LD_ADDR_EXP 123
66433: PUSH
66434: LD_EXP 123
66438: PPUSH
66439: LD_VAR 0 3
66443: PPUSH
66444: LD_EXP 123
66448: PUSH
66449: LD_VAR 0 3
66453: ARRAY
66454: PUSH
66455: LD_VAR 0 1
66459: DIFF
66460: PPUSH
66461: CALL_OW 1
66465: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
66466: LD_ADDR_VAR 0 8
66470: PUSH
66471: LD_VAR 0 3
66475: PPUSH
66476: LD_INT 3
66478: PPUSH
66479: CALL 63087 0 2
66483: ST_TO_ADDR
// if fac then
66484: LD_VAR 0 8
66488: IFFALSE 66717
// begin for j in fac do
66490: LD_ADDR_VAR 0 4
66494: PUSH
66495: LD_VAR 0 8
66499: PUSH
66500: FOR_IN
66501: IFFALSE 66715
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
66503: LD_ADDR_VAR 0 9
66507: PUSH
66508: LD_VAR 0 8
66512: PPUSH
66513: LD_VAR 0 1
66517: PPUSH
66518: CALL_OW 265
66522: PPUSH
66523: LD_VAR 0 1
66527: PPUSH
66528: CALL_OW 262
66532: PPUSH
66533: LD_VAR 0 1
66537: PPUSH
66538: CALL_OW 263
66542: PPUSH
66543: LD_VAR 0 1
66547: PPUSH
66548: CALL_OW 264
66552: PPUSH
66553: CALL 71518 0 5
66557: ST_TO_ADDR
// if components then
66558: LD_VAR 0 9
66562: IFFALSE 66713
// begin if GetWeapon ( un ) = ar_control_tower then
66564: LD_VAR 0 1
66568: PPUSH
66569: CALL_OW 264
66573: PUSH
66574: LD_INT 31
66576: EQUAL
66577: IFFALSE 66694
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
66579: LD_VAR 0 1
66583: PPUSH
66584: CALL_OW 311
66588: PPUSH
66589: LD_INT 0
66591: PPUSH
66592: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
66596: LD_ADDR_EXP 141
66600: PUSH
66601: LD_EXP 141
66605: PPUSH
66606: LD_VAR 0 3
66610: PPUSH
66611: LD_EXP 141
66615: PUSH
66616: LD_VAR 0 3
66620: ARRAY
66621: PUSH
66622: LD_VAR 0 1
66626: PPUSH
66627: CALL_OW 311
66631: DIFF
66632: PPUSH
66633: CALL_OW 1
66637: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
66638: LD_ADDR_VAR 0 7
66642: PUSH
66643: LD_EXP 122
66647: PUSH
66648: LD_VAR 0 3
66652: ARRAY
66653: PPUSH
66654: LD_INT 1
66656: PPUSH
66657: LD_VAR 0 9
66661: PPUSH
66662: CALL_OW 2
66666: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
66667: LD_ADDR_EXP 122
66671: PUSH
66672: LD_EXP 122
66676: PPUSH
66677: LD_VAR 0 3
66681: PPUSH
66682: LD_VAR 0 7
66686: PPUSH
66687: CALL_OW 1
66691: ST_TO_ADDR
// end else
66692: GO 66711
// MC_InsertProduceList ( i , [ components ] ) ;
66694: LD_VAR 0 3
66698: PPUSH
66699: LD_VAR 0 9
66703: PUSH
66704: EMPTY
66705: LIST
66706: PPUSH
66707: CALL 62632 0 2
// break ;
66711: GO 66715
// end ; end ;
66713: GO 66500
66715: POP
66716: POP
// end ; end ; if GetType ( un ) = unit_building then
66717: LD_VAR 0 1
66721: PPUSH
66722: CALL_OW 247
66726: PUSH
66727: LD_INT 3
66729: EQUAL
66730: IFFALSE 67133
// begin btype := GetBType ( un ) ;
66732: LD_ADDR_VAR 0 5
66736: PUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 266
66746: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
66747: LD_VAR 0 5
66751: PUSH
66752: LD_INT 29
66754: PUSH
66755: LD_INT 30
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: IN
66762: IFFALSE 66835
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
66764: LD_VAR 0 1
66768: PPUSH
66769: CALL_OW 250
66773: PPUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 251
66783: PPUSH
66784: LD_VAR 0 1
66788: PPUSH
66789: CALL_OW 255
66793: PPUSH
66794: CALL_OW 440
66798: NOT
66799: IFFALSE 66835
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
66801: LD_VAR 0 1
66805: PPUSH
66806: CALL_OW 250
66810: PPUSH
66811: LD_VAR 0 1
66815: PPUSH
66816: CALL_OW 251
66820: PPUSH
66821: LD_VAR 0 1
66825: PPUSH
66826: CALL_OW 255
66830: PPUSH
66831: CALL_OW 441
// end ; if btype = b_warehouse then
66835: LD_VAR 0 5
66839: PUSH
66840: LD_INT 1
66842: EQUAL
66843: IFFALSE 66861
// begin btype := b_depot ;
66845: LD_ADDR_VAR 0 5
66849: PUSH
66850: LD_INT 0
66852: ST_TO_ADDR
// pos := 1 ;
66853: LD_ADDR_VAR 0 6
66857: PUSH
66858: LD_INT 1
66860: ST_TO_ADDR
// end ; if btype = b_factory then
66861: LD_VAR 0 5
66865: PUSH
66866: LD_INT 3
66868: EQUAL
66869: IFFALSE 66887
// begin btype := b_workshop ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: LD_INT 2
66878: ST_TO_ADDR
// pos := 1 ;
66879: LD_ADDR_VAR 0 6
66883: PUSH
66884: LD_INT 1
66886: ST_TO_ADDR
// end ; if btype = b_barracks then
66887: LD_VAR 0 5
66891: PUSH
66892: LD_INT 5
66894: EQUAL
66895: IFFALSE 66905
// btype := b_armoury ;
66897: LD_ADDR_VAR 0 5
66901: PUSH
66902: LD_INT 4
66904: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
66905: LD_VAR 0 5
66909: PUSH
66910: LD_INT 7
66912: PUSH
66913: LD_INT 8
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: IN
66920: IFFALSE 66930
// btype := b_lab ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_INT 6
66929: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
66930: LD_ADDR_EXP 106
66934: PUSH
66935: LD_EXP 106
66939: PPUSH
66940: LD_VAR 0 3
66944: PUSH
66945: LD_EXP 106
66949: PUSH
66950: LD_VAR 0 3
66954: ARRAY
66955: PUSH
66956: LD_INT 1
66958: PLUS
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PPUSH
66964: LD_VAR 0 5
66968: PUSH
66969: LD_VAR 0 1
66973: PPUSH
66974: CALL_OW 250
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 251
66988: PUSH
66989: LD_VAR 0 1
66993: PPUSH
66994: CALL_OW 254
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: PPUSH
67005: CALL 74020 0 3
67009: ST_TO_ADDR
// if pos = 1 then
67010: LD_VAR 0 6
67014: PUSH
67015: LD_INT 1
67017: EQUAL
67018: IFFALSE 67133
// begin tmp := mc_build_list [ i ] ;
67020: LD_ADDR_VAR 0 7
67024: PUSH
67025: LD_EXP 106
67029: PUSH
67030: LD_VAR 0 3
67034: ARRAY
67035: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67036: LD_VAR 0 7
67040: PPUSH
67041: LD_INT 2
67043: PUSH
67044: LD_INT 30
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 30
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: PPUSH
67069: CALL_OW 72
67073: IFFALSE 67083
// pos := 2 ;
67075: LD_ADDR_VAR 0 6
67079: PUSH
67080: LD_INT 2
67082: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
67083: LD_ADDR_VAR 0 7
67087: PUSH
67088: LD_VAR 0 7
67092: PPUSH
67093: LD_VAR 0 6
67097: PPUSH
67098: LD_VAR 0 7
67102: PPUSH
67103: CALL 74346 0 3
67107: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
67108: LD_ADDR_EXP 106
67112: PUSH
67113: LD_EXP 106
67117: PPUSH
67118: LD_VAR 0 3
67122: PPUSH
67123: LD_VAR 0 7
67127: PPUSH
67128: CALL_OW 1
67132: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
67133: LD_VAR 0 1
67137: PUSH
67138: LD_EXP 101
67142: PUSH
67143: LD_VAR 0 3
67147: ARRAY
67148: IN
67149: IFFALSE 67188
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
67151: LD_ADDR_EXP 101
67155: PUSH
67156: LD_EXP 101
67160: PPUSH
67161: LD_VAR 0 3
67165: PPUSH
67166: LD_EXP 101
67170: PUSH
67171: LD_VAR 0 3
67175: ARRAY
67176: PUSH
67177: LD_VAR 0 1
67181: DIFF
67182: PPUSH
67183: CALL_OW 1
67187: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
67188: LD_VAR 0 1
67192: PUSH
67193: LD_EXP 108
67197: PUSH
67198: LD_VAR 0 3
67202: ARRAY
67203: IN
67204: IFFALSE 67243
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
67206: LD_ADDR_EXP 108
67210: PUSH
67211: LD_EXP 108
67215: PPUSH
67216: LD_VAR 0 3
67220: PPUSH
67221: LD_EXP 108
67225: PUSH
67226: LD_VAR 0 3
67230: ARRAY
67231: PUSH
67232: LD_VAR 0 1
67236: DIFF
67237: PPUSH
67238: CALL_OW 1
67242: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
67243: LD_VAR 0 1
67247: PUSH
67248: LD_EXP 120
67252: PUSH
67253: LD_VAR 0 3
67257: ARRAY
67258: IN
67259: IFFALSE 67298
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
67261: LD_ADDR_EXP 120
67265: PUSH
67266: LD_EXP 120
67270: PPUSH
67271: LD_VAR 0 3
67275: PPUSH
67276: LD_EXP 120
67280: PUSH
67281: LD_VAR 0 3
67285: ARRAY
67286: PUSH
67287: LD_VAR 0 1
67291: DIFF
67292: PPUSH
67293: CALL_OW 1
67297: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
67298: LD_VAR 0 1
67302: PUSH
67303: LD_EXP 123
67307: PUSH
67308: LD_VAR 0 3
67312: ARRAY
67313: IN
67314: IFFALSE 67353
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
67316: LD_ADDR_EXP 123
67320: PUSH
67321: LD_EXP 123
67325: PPUSH
67326: LD_VAR 0 3
67330: PPUSH
67331: LD_EXP 123
67335: PUSH
67336: LD_VAR 0 3
67340: ARRAY
67341: PUSH
67342: LD_VAR 0 1
67346: DIFF
67347: PPUSH
67348: CALL_OW 1
67352: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
67353: LD_VAR 0 1
67357: PUSH
67358: LD_EXP 110
67362: PUSH
67363: LD_VAR 0 3
67367: ARRAY
67368: IN
67369: IFFALSE 67408
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
67371: LD_ADDR_EXP 110
67375: PUSH
67376: LD_EXP 110
67380: PPUSH
67381: LD_VAR 0 3
67385: PPUSH
67386: LD_EXP 110
67390: PUSH
67391: LD_VAR 0 3
67395: ARRAY
67396: PUSH
67397: LD_VAR 0 1
67401: DIFF
67402: PPUSH
67403: CALL_OW 1
67407: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
67408: LD_VAR 0 1
67412: PUSH
67413: LD_EXP 109
67417: PUSH
67418: LD_VAR 0 3
67422: ARRAY
67423: IN
67424: IFFALSE 67463
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
67426: LD_ADDR_EXP 109
67430: PUSH
67431: LD_EXP 109
67435: PPUSH
67436: LD_VAR 0 3
67440: PPUSH
67441: LD_EXP 109
67445: PUSH
67446: LD_VAR 0 3
67450: ARRAY
67451: PUSH
67452: LD_VAR 0 1
67456: DIFF
67457: PPUSH
67458: CALL_OW 1
67462: ST_TO_ADDR
// end ; break ;
67463: GO 67467
// end ;
67465: GO 66115
67467: POP
67468: POP
// end ;
67469: LD_VAR 0 2
67473: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
67474: LD_INT 0
67476: PPUSH
67477: PPUSH
67478: PPUSH
// if not mc_bases or not skirmish then
67479: LD_EXP 101
67483: NOT
67484: PUSH
67485: LD_EXP 99
67489: NOT
67490: OR
67491: IFFALSE 67495
// exit ;
67493: GO 67710
// for i = 1 to mc_bases do
67495: LD_ADDR_VAR 0 3
67499: PUSH
67500: DOUBLE
67501: LD_INT 1
67503: DEC
67504: ST_TO_ADDR
67505: LD_EXP 101
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67708
// begin if building in mc_construct_list [ i ] then
67513: LD_VAR 0 1
67517: PUSH
67518: LD_EXP 108
67522: PUSH
67523: LD_VAR 0 3
67527: ARRAY
67528: IN
67529: IFFALSE 67706
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67531: LD_ADDR_EXP 108
67535: PUSH
67536: LD_EXP 108
67540: PPUSH
67541: LD_VAR 0 3
67545: PPUSH
67546: LD_EXP 108
67550: PUSH
67551: LD_VAR 0 3
67555: ARRAY
67556: PUSH
67557: LD_VAR 0 1
67561: DIFF
67562: PPUSH
67563: CALL_OW 1
67567: ST_TO_ADDR
// if building in mc_lab [ i ] then
67568: LD_VAR 0 1
67572: PUSH
67573: LD_EXP 134
67577: PUSH
67578: LD_VAR 0 3
67582: ARRAY
67583: IN
67584: IFFALSE 67639
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
67586: LD_ADDR_EXP 135
67590: PUSH
67591: LD_EXP 135
67595: PPUSH
67596: LD_VAR 0 3
67600: PPUSH
67601: LD_EXP 135
67605: PUSH
67606: LD_VAR 0 3
67610: ARRAY
67611: PPUSH
67612: LD_INT 1
67614: PPUSH
67615: LD_EXP 135
67619: PUSH
67620: LD_VAR 0 3
67624: ARRAY
67625: PPUSH
67626: LD_INT 0
67628: PPUSH
67629: CALL 73438 0 4
67633: PPUSH
67634: CALL_OW 1
67638: ST_TO_ADDR
// if not building in mc_bases [ i ] then
67639: LD_VAR 0 1
67643: PUSH
67644: LD_EXP 101
67648: PUSH
67649: LD_VAR 0 3
67653: ARRAY
67654: IN
67655: NOT
67656: IFFALSE 67702
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
67658: LD_ADDR_EXP 101
67662: PUSH
67663: LD_EXP 101
67667: PPUSH
67668: LD_VAR 0 3
67672: PUSH
67673: LD_EXP 101
67677: PUSH
67678: LD_VAR 0 3
67682: ARRAY
67683: PUSH
67684: LD_INT 1
67686: PLUS
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PPUSH
67692: LD_VAR 0 1
67696: PPUSH
67697: CALL 74020 0 3
67701: ST_TO_ADDR
// exit ;
67702: POP
67703: POP
67704: GO 67710
// end ; end ;
67706: GO 67510
67708: POP
67709: POP
// end ;
67710: LD_VAR 0 2
67714: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
67715: LD_INT 0
67717: PPUSH
67718: PPUSH
67719: PPUSH
67720: PPUSH
67721: PPUSH
67722: PPUSH
67723: PPUSH
// if not mc_bases or not skirmish then
67724: LD_EXP 101
67728: NOT
67729: PUSH
67730: LD_EXP 99
67734: NOT
67735: OR
67736: IFFALSE 67740
// exit ;
67738: GO 68401
// for i = 1 to mc_bases do
67740: LD_ADDR_VAR 0 3
67744: PUSH
67745: DOUBLE
67746: LD_INT 1
67748: DEC
67749: ST_TO_ADDR
67750: LD_EXP 101
67754: PUSH
67755: FOR_TO
67756: IFFALSE 68399
// begin if building in mc_construct_list [ i ] then
67758: LD_VAR 0 1
67762: PUSH
67763: LD_EXP 108
67767: PUSH
67768: LD_VAR 0 3
67772: ARRAY
67773: IN
67774: IFFALSE 68397
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67776: LD_ADDR_EXP 108
67780: PUSH
67781: LD_EXP 108
67785: PPUSH
67786: LD_VAR 0 3
67790: PPUSH
67791: LD_EXP 108
67795: PUSH
67796: LD_VAR 0 3
67800: ARRAY
67801: PUSH
67802: LD_VAR 0 1
67806: DIFF
67807: PPUSH
67808: CALL_OW 1
67812: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
67813: LD_ADDR_EXP 101
67817: PUSH
67818: LD_EXP 101
67822: PPUSH
67823: LD_VAR 0 3
67827: PUSH
67828: LD_EXP 101
67832: PUSH
67833: LD_VAR 0 3
67837: ARRAY
67838: PUSH
67839: LD_INT 1
67841: PLUS
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PPUSH
67847: LD_VAR 0 1
67851: PPUSH
67852: CALL 74020 0 3
67856: ST_TO_ADDR
// btype := GetBType ( building ) ;
67857: LD_ADDR_VAR 0 5
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: CALL_OW 266
67871: ST_TO_ADDR
// side := GetSide ( building ) ;
67872: LD_ADDR_VAR 0 8
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 255
67886: ST_TO_ADDR
// if btype = b_lab then
67887: LD_VAR 0 5
67891: PUSH
67892: LD_INT 6
67894: EQUAL
67895: IFFALSE 67945
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
67897: LD_ADDR_EXP 134
67901: PUSH
67902: LD_EXP 134
67906: PPUSH
67907: LD_VAR 0 3
67911: PUSH
67912: LD_EXP 134
67916: PUSH
67917: LD_VAR 0 3
67921: ARRAY
67922: PUSH
67923: LD_INT 1
67925: PLUS
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PPUSH
67931: LD_VAR 0 1
67935: PPUSH
67936: CALL 74020 0 3
67940: ST_TO_ADDR
// exit ;
67941: POP
67942: POP
67943: GO 68401
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
67945: LD_VAR 0 5
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: IN
67964: IFFALSE 68088
// begin if btype = b_armoury then
67966: LD_VAR 0 5
67970: PUSH
67971: LD_INT 4
67973: EQUAL
67974: IFFALSE 67984
// btype := b_barracks ;
67976: LD_ADDR_VAR 0 5
67980: PUSH
67981: LD_INT 5
67983: ST_TO_ADDR
// if btype = b_depot then
67984: LD_VAR 0 5
67988: PUSH
67989: LD_INT 0
67991: EQUAL
67992: IFFALSE 68002
// btype := b_warehouse ;
67994: LD_ADDR_VAR 0 5
67998: PUSH
67999: LD_INT 1
68001: ST_TO_ADDR
// if btype = b_workshop then
68002: LD_VAR 0 5
68006: PUSH
68007: LD_INT 2
68009: EQUAL
68010: IFFALSE 68020
// btype := b_factory ;
68012: LD_ADDR_VAR 0 5
68016: PUSH
68017: LD_INT 3
68019: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
68020: LD_VAR 0 5
68024: PPUSH
68025: LD_VAR 0 8
68029: PPUSH
68030: CALL_OW 323
68034: PUSH
68035: LD_INT 1
68037: EQUAL
68038: IFFALSE 68084
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
68040: LD_ADDR_EXP 133
68044: PUSH
68045: LD_EXP 133
68049: PPUSH
68050: LD_VAR 0 3
68054: PUSH
68055: LD_EXP 133
68059: PUSH
68060: LD_VAR 0 3
68064: ARRAY
68065: PUSH
68066: LD_INT 1
68068: PLUS
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PPUSH
68074: LD_VAR 0 1
68078: PPUSH
68079: CALL 74020 0 3
68083: ST_TO_ADDR
// exit ;
68084: POP
68085: POP
68086: GO 68401
// end ; if btype in [ b_bunker , b_turret ] then
68088: LD_VAR 0 5
68092: PUSH
68093: LD_INT 32
68095: PUSH
68096: LD_INT 33
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: IN
68103: IFFALSE 68393
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
68105: LD_ADDR_EXP 109
68109: PUSH
68110: LD_EXP 109
68114: PPUSH
68115: LD_VAR 0 3
68119: PUSH
68120: LD_EXP 109
68124: PUSH
68125: LD_VAR 0 3
68129: ARRAY
68130: PUSH
68131: LD_INT 1
68133: PLUS
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PPUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: CALL 74020 0 3
68148: ST_TO_ADDR
// if btype = b_bunker then
68149: LD_VAR 0 5
68153: PUSH
68154: LD_INT 32
68156: EQUAL
68157: IFFALSE 68393
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
68159: LD_ADDR_EXP 110
68163: PUSH
68164: LD_EXP 110
68168: PPUSH
68169: LD_VAR 0 3
68173: PUSH
68174: LD_EXP 110
68178: PUSH
68179: LD_VAR 0 3
68183: ARRAY
68184: PUSH
68185: LD_INT 1
68187: PLUS
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PPUSH
68193: LD_VAR 0 1
68197: PPUSH
68198: CALL 74020 0 3
68202: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
68203: LD_ADDR_VAR 0 6
68207: PUSH
68208: LD_EXP 101
68212: PUSH
68213: LD_VAR 0 3
68217: ARRAY
68218: PPUSH
68219: LD_INT 25
68221: PUSH
68222: LD_INT 1
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: PUSH
68232: LD_INT 54
68234: PUSH
68235: EMPTY
68236: LIST
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PPUSH
68246: CALL_OW 72
68250: ST_TO_ADDR
// if tmp then
68251: LD_VAR 0 6
68255: IFFALSE 68261
// exit ;
68257: POP
68258: POP
68259: GO 68401
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
68261: LD_ADDR_VAR 0 6
68265: PUSH
68266: LD_EXP 101
68270: PUSH
68271: LD_VAR 0 3
68275: ARRAY
68276: PPUSH
68277: LD_INT 2
68279: PUSH
68280: LD_INT 30
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 30
68292: PUSH
68293: LD_INT 5
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PPUSH
68305: CALL_OW 72
68309: ST_TO_ADDR
// if not tmp then
68310: LD_VAR 0 6
68314: NOT
68315: IFFALSE 68321
// exit ;
68317: POP
68318: POP
68319: GO 68401
// for j in tmp do
68321: LD_ADDR_VAR 0 4
68325: PUSH
68326: LD_VAR 0 6
68330: PUSH
68331: FOR_IN
68332: IFFALSE 68391
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
68334: LD_ADDR_VAR 0 7
68338: PUSH
68339: LD_VAR 0 4
68343: PPUSH
68344: CALL_OW 313
68348: PPUSH
68349: LD_INT 25
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PPUSH
68359: CALL_OW 72
68363: ST_TO_ADDR
// if units then
68364: LD_VAR 0 7
68368: IFFALSE 68389
// begin ComExitBuilding ( units [ 1 ] ) ;
68370: LD_VAR 0 7
68374: PUSH
68375: LD_INT 1
68377: ARRAY
68378: PPUSH
68379: CALL_OW 122
// exit ;
68383: POP
68384: POP
68385: POP
68386: POP
68387: GO 68401
// end ; end ;
68389: GO 68331
68391: POP
68392: POP
// end ; end ; exit ;
68393: POP
68394: POP
68395: GO 68401
// end ; end ;
68397: GO 67755
68399: POP
68400: POP
// end ;
68401: LD_VAR 0 2
68405: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
68406: LD_INT 0
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
68414: PPUSH
// if not mc_bases or not skirmish then
68415: LD_EXP 101
68419: NOT
68420: PUSH
68421: LD_EXP 99
68425: NOT
68426: OR
68427: IFFALSE 68431
// exit ;
68429: GO 68696
// btype := GetBType ( building ) ;
68431: LD_ADDR_VAR 0 6
68435: PUSH
68436: LD_VAR 0 1
68440: PPUSH
68441: CALL_OW 266
68445: ST_TO_ADDR
// x := GetX ( building ) ;
68446: LD_ADDR_VAR 0 7
68450: PUSH
68451: LD_VAR 0 1
68455: PPUSH
68456: CALL_OW 250
68460: ST_TO_ADDR
// y := GetY ( building ) ;
68461: LD_ADDR_VAR 0 8
68465: PUSH
68466: LD_VAR 0 1
68470: PPUSH
68471: CALL_OW 251
68475: ST_TO_ADDR
// d := GetDir ( building ) ;
68476: LD_ADDR_VAR 0 9
68480: PUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: CALL_OW 254
68490: ST_TO_ADDR
// for i = 1 to mc_bases do
68491: LD_ADDR_VAR 0 4
68495: PUSH
68496: DOUBLE
68497: LD_INT 1
68499: DEC
68500: ST_TO_ADDR
68501: LD_EXP 101
68505: PUSH
68506: FOR_TO
68507: IFFALSE 68694
// begin if not mc_build_list [ i ] then
68509: LD_EXP 106
68513: PUSH
68514: LD_VAR 0 4
68518: ARRAY
68519: NOT
68520: IFFALSE 68524
// continue ;
68522: GO 68506
// for j := 1 to mc_build_list [ i ] do
68524: LD_ADDR_VAR 0 5
68528: PUSH
68529: DOUBLE
68530: LD_INT 1
68532: DEC
68533: ST_TO_ADDR
68534: LD_EXP 106
68538: PUSH
68539: LD_VAR 0 4
68543: ARRAY
68544: PUSH
68545: FOR_TO
68546: IFFALSE 68690
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
68548: LD_VAR 0 6
68552: PUSH
68553: LD_VAR 0 7
68557: PUSH
68558: LD_VAR 0 8
68562: PUSH
68563: LD_VAR 0 9
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: PPUSH
68574: LD_EXP 106
68578: PUSH
68579: LD_VAR 0 4
68583: ARRAY
68584: PUSH
68585: LD_VAR 0 5
68589: ARRAY
68590: PPUSH
68591: CALL 80209 0 2
68595: IFFALSE 68688
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
68597: LD_ADDR_EXP 106
68601: PUSH
68602: LD_EXP 106
68606: PPUSH
68607: LD_VAR 0 4
68611: PPUSH
68612: LD_EXP 106
68616: PUSH
68617: LD_VAR 0 4
68621: ARRAY
68622: PPUSH
68623: LD_VAR 0 5
68627: PPUSH
68628: CALL_OW 3
68632: PPUSH
68633: CALL_OW 1
68637: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
68638: LD_ADDR_EXP 108
68642: PUSH
68643: LD_EXP 108
68647: PPUSH
68648: LD_VAR 0 4
68652: PUSH
68653: LD_EXP 108
68657: PUSH
68658: LD_VAR 0 4
68662: ARRAY
68663: PUSH
68664: LD_INT 1
68666: PLUS
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PPUSH
68672: LD_VAR 0 1
68676: PPUSH
68677: CALL 74020 0 3
68681: ST_TO_ADDR
// exit ;
68682: POP
68683: POP
68684: POP
68685: POP
68686: GO 68696
// end ;
68688: GO 68545
68690: POP
68691: POP
// end ;
68692: GO 68506
68694: POP
68695: POP
// end ;
68696: LD_VAR 0 3
68700: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
68701: LD_INT 0
68703: PPUSH
68704: PPUSH
68705: PPUSH
// if not mc_bases or not skirmish then
68706: LD_EXP 101
68710: NOT
68711: PUSH
68712: LD_EXP 99
68716: NOT
68717: OR
68718: IFFALSE 68722
// exit ;
68720: GO 68912
// for i = 1 to mc_bases do
68722: LD_ADDR_VAR 0 4
68726: PUSH
68727: DOUBLE
68728: LD_INT 1
68730: DEC
68731: ST_TO_ADDR
68732: LD_EXP 101
68736: PUSH
68737: FOR_TO
68738: IFFALSE 68825
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
68740: LD_VAR 0 1
68744: PUSH
68745: LD_EXP 109
68749: PUSH
68750: LD_VAR 0 4
68754: ARRAY
68755: IN
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_EXP 110
68766: PUSH
68767: LD_VAR 0 4
68771: ARRAY
68772: IN
68773: NOT
68774: AND
68775: IFFALSE 68823
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
68777: LD_ADDR_EXP 110
68781: PUSH
68782: LD_EXP 110
68786: PPUSH
68787: LD_VAR 0 4
68791: PUSH
68792: LD_EXP 110
68796: PUSH
68797: LD_VAR 0 4
68801: ARRAY
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PPUSH
68811: LD_VAR 0 1
68815: PPUSH
68816: CALL 74020 0 3
68820: ST_TO_ADDR
// break ;
68821: GO 68825
// end ; end ;
68823: GO 68737
68825: POP
68826: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
68827: LD_VAR 0 1
68831: PPUSH
68832: CALL_OW 257
68836: PUSH
68837: LD_EXP 127
68841: IN
68842: PUSH
68843: LD_VAR 0 1
68847: PPUSH
68848: CALL_OW 266
68852: PUSH
68853: LD_INT 5
68855: EQUAL
68856: AND
68857: PUSH
68858: LD_VAR 0 2
68862: PPUSH
68863: CALL_OW 110
68867: PUSH
68868: LD_INT 18
68870: NONEQUAL
68871: AND
68872: IFFALSE 68912
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
68874: LD_VAR 0 2
68878: PPUSH
68879: CALL_OW 257
68883: PUSH
68884: LD_INT 5
68886: PUSH
68887: LD_INT 8
68889: PUSH
68890: LD_INT 9
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: LIST
68897: IN
68898: IFFALSE 68912
// SetClass ( unit , 1 ) ;
68900: LD_VAR 0 2
68904: PPUSH
68905: LD_INT 1
68907: PPUSH
68908: CALL_OW 336
// end ;
68912: LD_VAR 0 3
68916: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
68917: LD_INT 0
68919: PPUSH
68920: PPUSH
// if not mc_bases or not skirmish then
68921: LD_EXP 101
68925: NOT
68926: PUSH
68927: LD_EXP 99
68931: NOT
68932: OR
68933: IFFALSE 68937
// exit ;
68935: GO 69053
// if GetLives ( abandoned_vehicle ) > 250 then
68937: LD_VAR 0 2
68941: PPUSH
68942: CALL_OW 256
68946: PUSH
68947: LD_INT 250
68949: GREATER
68950: IFFALSE 68954
// exit ;
68952: GO 69053
// for i = 1 to mc_bases do
68954: LD_ADDR_VAR 0 6
68958: PUSH
68959: DOUBLE
68960: LD_INT 1
68962: DEC
68963: ST_TO_ADDR
68964: LD_EXP 101
68968: PUSH
68969: FOR_TO
68970: IFFALSE 69051
// begin if driver in mc_bases [ i ] then
68972: LD_VAR 0 1
68976: PUSH
68977: LD_EXP 101
68981: PUSH
68982: LD_VAR 0 6
68986: ARRAY
68987: IN
68988: IFFALSE 69049
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
68990: LD_VAR 0 1
68994: PPUSH
68995: LD_EXP 101
68999: PUSH
69000: LD_VAR 0 6
69004: ARRAY
69005: PPUSH
69006: LD_INT 2
69008: PUSH
69009: LD_INT 30
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 30
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: PPUSH
69034: CALL_OW 72
69038: PUSH
69039: LD_INT 1
69041: ARRAY
69042: PPUSH
69043: CALL 107236 0 2
// break ;
69047: GO 69051
// end ; end ;
69049: GO 68969
69051: POP
69052: POP
// end ; end_of_file
69053: LD_VAR 0 5
69057: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
69058: LD_INT 0
69060: PPUSH
69061: PPUSH
// if exist_mode then
69062: LD_VAR 0 2
69066: IFFALSE 69091
// unit := CreateCharacter ( prefix & ident ) else
69068: LD_ADDR_VAR 0 5
69072: PUSH
69073: LD_VAR 0 3
69077: PUSH
69078: LD_VAR 0 1
69082: STR
69083: PPUSH
69084: CALL_OW 34
69088: ST_TO_ADDR
69089: GO 69106
// unit := NewCharacter ( ident ) ;
69091: LD_ADDR_VAR 0 5
69095: PUSH
69096: LD_VAR 0 1
69100: PPUSH
69101: CALL_OW 25
69105: ST_TO_ADDR
// result := unit ;
69106: LD_ADDR_VAR 0 4
69110: PUSH
69111: LD_VAR 0 5
69115: ST_TO_ADDR
// end ;
69116: LD_VAR 0 4
69120: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
69121: LD_INT 0
69123: PPUSH
69124: PPUSH
// if not side or not nation then
69125: LD_VAR 0 1
69129: NOT
69130: PUSH
69131: LD_VAR 0 2
69135: NOT
69136: OR
69137: IFFALSE 69141
// exit ;
69139: GO 69909
// case nation of nation_american :
69141: LD_VAR 0 2
69145: PUSH
69146: LD_INT 1
69148: DOUBLE
69149: EQUAL
69150: IFTRUE 69154
69152: GO 69368
69154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
69155: LD_ADDR_VAR 0 4
69159: PUSH
69160: LD_INT 35
69162: PUSH
69163: LD_INT 45
69165: PUSH
69166: LD_INT 46
69168: PUSH
69169: LD_INT 47
69171: PUSH
69172: LD_INT 82
69174: PUSH
69175: LD_INT 83
69177: PUSH
69178: LD_INT 84
69180: PUSH
69181: LD_INT 85
69183: PUSH
69184: LD_INT 86
69186: PUSH
69187: LD_INT 1
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: LD_INT 6
69195: PUSH
69196: LD_INT 15
69198: PUSH
69199: LD_INT 16
69201: PUSH
69202: LD_INT 7
69204: PUSH
69205: LD_INT 12
69207: PUSH
69208: LD_INT 13
69210: PUSH
69211: LD_INT 10
69213: PUSH
69214: LD_INT 14
69216: PUSH
69217: LD_INT 20
69219: PUSH
69220: LD_INT 21
69222: PUSH
69223: LD_INT 22
69225: PUSH
69226: LD_INT 25
69228: PUSH
69229: LD_INT 32
69231: PUSH
69232: LD_INT 27
69234: PUSH
69235: LD_INT 36
69237: PUSH
69238: LD_INT 69
69240: PUSH
69241: LD_INT 39
69243: PUSH
69244: LD_INT 34
69246: PUSH
69247: LD_INT 40
69249: PUSH
69250: LD_INT 48
69252: PUSH
69253: LD_INT 49
69255: PUSH
69256: LD_INT 50
69258: PUSH
69259: LD_INT 51
69261: PUSH
69262: LD_INT 52
69264: PUSH
69265: LD_INT 53
69267: PUSH
69268: LD_INT 54
69270: PUSH
69271: LD_INT 55
69273: PUSH
69274: LD_INT 56
69276: PUSH
69277: LD_INT 57
69279: PUSH
69280: LD_INT 58
69282: PUSH
69283: LD_INT 59
69285: PUSH
69286: LD_INT 60
69288: PUSH
69289: LD_INT 61
69291: PUSH
69292: LD_INT 62
69294: PUSH
69295: LD_INT 80
69297: PUSH
69298: LD_INT 82
69300: PUSH
69301: LD_INT 83
69303: PUSH
69304: LD_INT 84
69306: PUSH
69307: LD_INT 85
69309: PUSH
69310: LD_INT 86
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: ST_TO_ADDR
69366: GO 69833
69368: LD_INT 2
69370: DOUBLE
69371: EQUAL
69372: IFTRUE 69376
69374: GO 69602
69376: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
69377: LD_ADDR_VAR 0 4
69381: PUSH
69382: LD_INT 35
69384: PUSH
69385: LD_INT 45
69387: PUSH
69388: LD_INT 46
69390: PUSH
69391: LD_INT 47
69393: PUSH
69394: LD_INT 82
69396: PUSH
69397: LD_INT 83
69399: PUSH
69400: LD_INT 84
69402: PUSH
69403: LD_INT 85
69405: PUSH
69406: LD_INT 87
69408: PUSH
69409: LD_INT 70
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: LD_INT 11
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: LD_INT 5
69426: PUSH
69427: LD_INT 6
69429: PUSH
69430: LD_INT 15
69432: PUSH
69433: LD_INT 18
69435: PUSH
69436: LD_INT 7
69438: PUSH
69439: LD_INT 17
69441: PUSH
69442: LD_INT 8
69444: PUSH
69445: LD_INT 20
69447: PUSH
69448: LD_INT 21
69450: PUSH
69451: LD_INT 22
69453: PUSH
69454: LD_INT 72
69456: PUSH
69457: LD_INT 26
69459: PUSH
69460: LD_INT 69
69462: PUSH
69463: LD_INT 39
69465: PUSH
69466: LD_INT 40
69468: PUSH
69469: LD_INT 41
69471: PUSH
69472: LD_INT 42
69474: PUSH
69475: LD_INT 43
69477: PUSH
69478: LD_INT 48
69480: PUSH
69481: LD_INT 49
69483: PUSH
69484: LD_INT 50
69486: PUSH
69487: LD_INT 51
69489: PUSH
69490: LD_INT 52
69492: PUSH
69493: LD_INT 53
69495: PUSH
69496: LD_INT 54
69498: PUSH
69499: LD_INT 55
69501: PUSH
69502: LD_INT 56
69504: PUSH
69505: LD_INT 60
69507: PUSH
69508: LD_INT 61
69510: PUSH
69511: LD_INT 62
69513: PUSH
69514: LD_INT 66
69516: PUSH
69517: LD_INT 67
69519: PUSH
69520: LD_INT 68
69522: PUSH
69523: LD_INT 81
69525: PUSH
69526: LD_INT 82
69528: PUSH
69529: LD_INT 83
69531: PUSH
69532: LD_INT 84
69534: PUSH
69535: LD_INT 85
69537: PUSH
69538: LD_INT 87
69540: PUSH
69541: LD_INT 88
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: ST_TO_ADDR
69600: GO 69833
69602: LD_INT 3
69604: DOUBLE
69605: EQUAL
69606: IFTRUE 69610
69608: GO 69832
69610: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
69611: LD_ADDR_VAR 0 4
69615: PUSH
69616: LD_INT 46
69618: PUSH
69619: LD_INT 47
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 82
69630: PUSH
69631: LD_INT 83
69633: PUSH
69634: LD_INT 84
69636: PUSH
69637: LD_INT 85
69639: PUSH
69640: LD_INT 86
69642: PUSH
69643: LD_INT 11
69645: PUSH
69646: LD_INT 9
69648: PUSH
69649: LD_INT 20
69651: PUSH
69652: LD_INT 19
69654: PUSH
69655: LD_INT 21
69657: PUSH
69658: LD_INT 24
69660: PUSH
69661: LD_INT 22
69663: PUSH
69664: LD_INT 25
69666: PUSH
69667: LD_INT 28
69669: PUSH
69670: LD_INT 29
69672: PUSH
69673: LD_INT 30
69675: PUSH
69676: LD_INT 31
69678: PUSH
69679: LD_INT 37
69681: PUSH
69682: LD_INT 38
69684: PUSH
69685: LD_INT 32
69687: PUSH
69688: LD_INT 27
69690: PUSH
69691: LD_INT 33
69693: PUSH
69694: LD_INT 69
69696: PUSH
69697: LD_INT 39
69699: PUSH
69700: LD_INT 34
69702: PUSH
69703: LD_INT 40
69705: PUSH
69706: LD_INT 71
69708: PUSH
69709: LD_INT 23
69711: PUSH
69712: LD_INT 44
69714: PUSH
69715: LD_INT 48
69717: PUSH
69718: LD_INT 49
69720: PUSH
69721: LD_INT 50
69723: PUSH
69724: LD_INT 51
69726: PUSH
69727: LD_INT 52
69729: PUSH
69730: LD_INT 53
69732: PUSH
69733: LD_INT 54
69735: PUSH
69736: LD_INT 55
69738: PUSH
69739: LD_INT 56
69741: PUSH
69742: LD_INT 57
69744: PUSH
69745: LD_INT 58
69747: PUSH
69748: LD_INT 59
69750: PUSH
69751: LD_INT 63
69753: PUSH
69754: LD_INT 64
69756: PUSH
69757: LD_INT 65
69759: PUSH
69760: LD_INT 82
69762: PUSH
69763: LD_INT 83
69765: PUSH
69766: LD_INT 84
69768: PUSH
69769: LD_INT 85
69771: PUSH
69772: LD_INT 86
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: ST_TO_ADDR
69830: GO 69833
69832: POP
// if state > - 1 and state < 3 then
69833: LD_VAR 0 3
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: GREATER
69842: PUSH
69843: LD_VAR 0 3
69847: PUSH
69848: LD_INT 3
69850: LESS
69851: AND
69852: IFFALSE 69909
// for i in result do
69854: LD_ADDR_VAR 0 5
69858: PUSH
69859: LD_VAR 0 4
69863: PUSH
69864: FOR_IN
69865: IFFALSE 69907
// if GetTech ( i , side ) <> state then
69867: LD_VAR 0 5
69871: PPUSH
69872: LD_VAR 0 1
69876: PPUSH
69877: CALL_OW 321
69881: PUSH
69882: LD_VAR 0 3
69886: NONEQUAL
69887: IFFALSE 69905
// result := result diff i ;
69889: LD_ADDR_VAR 0 4
69893: PUSH
69894: LD_VAR 0 4
69898: PUSH
69899: LD_VAR 0 5
69903: DIFF
69904: ST_TO_ADDR
69905: GO 69864
69907: POP
69908: POP
// end ;
69909: LD_VAR 0 4
69913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
69914: LD_INT 0
69916: PPUSH
69917: PPUSH
69918: PPUSH
// result := true ;
69919: LD_ADDR_VAR 0 3
69923: PUSH
69924: LD_INT 1
69926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
69927: LD_ADDR_VAR 0 5
69931: PUSH
69932: LD_VAR 0 2
69936: PPUSH
69937: CALL_OW 480
69941: ST_TO_ADDR
// if not tmp then
69942: LD_VAR 0 5
69946: NOT
69947: IFFALSE 69951
// exit ;
69949: GO 70000
// for i in tmp do
69951: LD_ADDR_VAR 0 4
69955: PUSH
69956: LD_VAR 0 5
69960: PUSH
69961: FOR_IN
69962: IFFALSE 69998
// if GetTech ( i , side ) <> state_researched then
69964: LD_VAR 0 4
69968: PPUSH
69969: LD_VAR 0 1
69973: PPUSH
69974: CALL_OW 321
69978: PUSH
69979: LD_INT 2
69981: NONEQUAL
69982: IFFALSE 69996
// begin result := false ;
69984: LD_ADDR_VAR 0 3
69988: PUSH
69989: LD_INT 0
69991: ST_TO_ADDR
// exit ;
69992: POP
69993: POP
69994: GO 70000
// end ;
69996: GO 69961
69998: POP
69999: POP
// end ;
70000: LD_VAR 0 3
70004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
70005: LD_INT 0
70007: PPUSH
70008: PPUSH
70009: PPUSH
70010: PPUSH
70011: PPUSH
70012: PPUSH
70013: PPUSH
70014: PPUSH
70015: PPUSH
70016: PPUSH
70017: PPUSH
70018: PPUSH
70019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
70020: LD_VAR 0 1
70024: NOT
70025: PUSH
70026: LD_VAR 0 1
70030: PPUSH
70031: CALL_OW 257
70035: PUSH
70036: LD_INT 9
70038: NONEQUAL
70039: OR
70040: IFFALSE 70044
// exit ;
70042: GO 70617
// side := GetSide ( unit ) ;
70044: LD_ADDR_VAR 0 9
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 255
70058: ST_TO_ADDR
// tech_space := tech_spacanom ;
70059: LD_ADDR_VAR 0 12
70063: PUSH
70064: LD_INT 29
70066: ST_TO_ADDR
// tech_time := tech_taurad ;
70067: LD_ADDR_VAR 0 13
70071: PUSH
70072: LD_INT 28
70074: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
70075: LD_ADDR_VAR 0 11
70079: PUSH
70080: LD_VAR 0 1
70084: PPUSH
70085: CALL_OW 310
70089: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
70090: LD_VAR 0 11
70094: PPUSH
70095: CALL_OW 247
70099: PUSH
70100: LD_INT 2
70102: EQUAL
70103: IFFALSE 70107
// exit ;
70105: GO 70617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
70107: LD_ADDR_VAR 0 8
70111: PUSH
70112: LD_INT 81
70114: PUSH
70115: LD_VAR 0 9
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 3
70126: PUSH
70127: LD_INT 21
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PPUSH
70145: CALL_OW 69
70149: ST_TO_ADDR
// if not tmp then
70150: LD_VAR 0 8
70154: NOT
70155: IFFALSE 70159
// exit ;
70157: GO 70617
// if in_unit then
70159: LD_VAR 0 11
70163: IFFALSE 70187
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
70165: LD_ADDR_VAR 0 10
70169: PUSH
70170: LD_VAR 0 8
70174: PPUSH
70175: LD_VAR 0 11
70179: PPUSH
70180: CALL_OW 74
70184: ST_TO_ADDR
70185: GO 70207
// enemy := NearestUnitToUnit ( tmp , unit ) ;
70187: LD_ADDR_VAR 0 10
70191: PUSH
70192: LD_VAR 0 8
70196: PPUSH
70197: LD_VAR 0 1
70201: PPUSH
70202: CALL_OW 74
70206: ST_TO_ADDR
// if not enemy then
70207: LD_VAR 0 10
70211: NOT
70212: IFFALSE 70216
// exit ;
70214: GO 70617
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
70216: LD_VAR 0 11
70220: PUSH
70221: LD_VAR 0 11
70225: PPUSH
70226: LD_VAR 0 10
70230: PPUSH
70231: CALL_OW 296
70235: PUSH
70236: LD_INT 13
70238: GREATER
70239: AND
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 10
70250: PPUSH
70251: CALL_OW 296
70255: PUSH
70256: LD_INT 12
70258: GREATER
70259: OR
70260: IFFALSE 70264
// exit ;
70262: GO 70617
// missile := [ 1 ] ;
70264: LD_ADDR_VAR 0 14
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: EMPTY
70273: LIST
70274: ST_TO_ADDR
// if Researched ( side , tech_space ) then
70275: LD_VAR 0 9
70279: PPUSH
70280: LD_VAR 0 12
70284: PPUSH
70285: CALL_OW 325
70289: IFFALSE 70318
// missile := Replace ( missile , missile + 1 , 2 ) ;
70291: LD_ADDR_VAR 0 14
70295: PUSH
70296: LD_VAR 0 14
70300: PPUSH
70301: LD_VAR 0 14
70305: PUSH
70306: LD_INT 1
70308: PLUS
70309: PPUSH
70310: LD_INT 2
70312: PPUSH
70313: CALL_OW 1
70317: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
70318: LD_VAR 0 9
70322: PPUSH
70323: LD_VAR 0 13
70327: PPUSH
70328: CALL_OW 325
70332: PUSH
70333: LD_VAR 0 10
70337: PPUSH
70338: CALL_OW 255
70342: PPUSH
70343: LD_VAR 0 13
70347: PPUSH
70348: CALL_OW 325
70352: NOT
70353: AND
70354: IFFALSE 70383
// missile := Replace ( missile , missile + 1 , 3 ) ;
70356: LD_ADDR_VAR 0 14
70360: PUSH
70361: LD_VAR 0 14
70365: PPUSH
70366: LD_VAR 0 14
70370: PUSH
70371: LD_INT 1
70373: PLUS
70374: PPUSH
70375: LD_INT 3
70377: PPUSH
70378: CALL_OW 1
70382: ST_TO_ADDR
// if missile < 2 then
70383: LD_VAR 0 14
70387: PUSH
70388: LD_INT 2
70390: LESS
70391: IFFALSE 70395
// exit ;
70393: GO 70617
// x := GetX ( enemy ) ;
70395: LD_ADDR_VAR 0 4
70399: PUSH
70400: LD_VAR 0 10
70404: PPUSH
70405: CALL_OW 250
70409: ST_TO_ADDR
// y := GetY ( enemy ) ;
70410: LD_ADDR_VAR 0 5
70414: PUSH
70415: LD_VAR 0 10
70419: PPUSH
70420: CALL_OW 251
70424: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
70425: LD_ADDR_VAR 0 6
70429: PUSH
70430: LD_VAR 0 4
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PPUSH
70439: LD_INT 1
70441: PPUSH
70442: CALL_OW 12
70446: PLUS
70447: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
70448: LD_ADDR_VAR 0 7
70452: PUSH
70453: LD_VAR 0 5
70457: PUSH
70458: LD_INT 1
70460: NEG
70461: PPUSH
70462: LD_INT 1
70464: PPUSH
70465: CALL_OW 12
70469: PLUS
70470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70471: LD_VAR 0 6
70475: PPUSH
70476: LD_VAR 0 7
70480: PPUSH
70481: CALL_OW 488
70485: NOT
70486: IFFALSE 70508
// begin _x := x ;
70488: LD_ADDR_VAR 0 6
70492: PUSH
70493: LD_VAR 0 4
70497: ST_TO_ADDR
// _y := y ;
70498: LD_ADDR_VAR 0 7
70502: PUSH
70503: LD_VAR 0 5
70507: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
70508: LD_ADDR_VAR 0 3
70512: PUSH
70513: LD_INT 1
70515: PPUSH
70516: LD_VAR 0 14
70520: PPUSH
70521: CALL_OW 12
70525: ST_TO_ADDR
// case i of 1 :
70526: LD_VAR 0 3
70530: PUSH
70531: LD_INT 1
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70539
70537: GO 70556
70539: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 10
70549: PPUSH
70550: CALL_OW 115
70554: GO 70617
70556: LD_INT 2
70558: DOUBLE
70559: EQUAL
70560: IFTRUE 70564
70562: GO 70586
70564: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
70565: LD_VAR 0 1
70569: PPUSH
70570: LD_VAR 0 6
70574: PPUSH
70575: LD_VAR 0 7
70579: PPUSH
70580: CALL_OW 153
70584: GO 70617
70586: LD_INT 3
70588: DOUBLE
70589: EQUAL
70590: IFTRUE 70594
70592: GO 70616
70594: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
70595: LD_VAR 0 1
70599: PPUSH
70600: LD_VAR 0 6
70604: PPUSH
70605: LD_VAR 0 7
70609: PPUSH
70610: CALL_OW 154
70614: GO 70617
70616: POP
// end ;
70617: LD_VAR 0 2
70621: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
70622: LD_INT 0
70624: PPUSH
70625: PPUSH
70626: PPUSH
70627: PPUSH
70628: PPUSH
70629: PPUSH
// if not unit or not building then
70630: LD_VAR 0 1
70634: NOT
70635: PUSH
70636: LD_VAR 0 2
70640: NOT
70641: OR
70642: IFFALSE 70646
// exit ;
70644: GO 70804
// x := GetX ( building ) ;
70646: LD_ADDR_VAR 0 5
70650: PUSH
70651: LD_VAR 0 2
70655: PPUSH
70656: CALL_OW 250
70660: ST_TO_ADDR
// y := GetY ( building ) ;
70661: LD_ADDR_VAR 0 6
70665: PUSH
70666: LD_VAR 0 2
70670: PPUSH
70671: CALL_OW 251
70675: ST_TO_ADDR
// for i = 0 to 5 do
70676: LD_ADDR_VAR 0 4
70680: PUSH
70681: DOUBLE
70682: LD_INT 0
70684: DEC
70685: ST_TO_ADDR
70686: LD_INT 5
70688: PUSH
70689: FOR_TO
70690: IFFALSE 70802
// begin _x := ShiftX ( x , i , 3 ) ;
70692: LD_ADDR_VAR 0 7
70696: PUSH
70697: LD_VAR 0 5
70701: PPUSH
70702: LD_VAR 0 4
70706: PPUSH
70707: LD_INT 3
70709: PPUSH
70710: CALL_OW 272
70714: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
70715: LD_ADDR_VAR 0 8
70719: PUSH
70720: LD_VAR 0 6
70724: PPUSH
70725: LD_VAR 0 4
70729: PPUSH
70730: LD_INT 3
70732: PPUSH
70733: CALL_OW 273
70737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70738: LD_VAR 0 7
70742: PPUSH
70743: LD_VAR 0 8
70747: PPUSH
70748: CALL_OW 488
70752: NOT
70753: IFFALSE 70757
// continue ;
70755: GO 70689
// if HexInfo ( _x , _y ) = 0 then
70757: LD_VAR 0 7
70761: PPUSH
70762: LD_VAR 0 8
70766: PPUSH
70767: CALL_OW 428
70771: PUSH
70772: LD_INT 0
70774: EQUAL
70775: IFFALSE 70800
// begin ComMoveXY ( unit , _x , _y ) ;
70777: LD_VAR 0 1
70781: PPUSH
70782: LD_VAR 0 7
70786: PPUSH
70787: LD_VAR 0 8
70791: PPUSH
70792: CALL_OW 111
// exit ;
70796: POP
70797: POP
70798: GO 70804
// end ; end ;
70800: GO 70689
70802: POP
70803: POP
// end ;
70804: LD_VAR 0 3
70808: RET
// export function ScanBase ( side , base_area ) ; begin
70809: LD_INT 0
70811: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: LD_VAR 0 2
70821: PPUSH
70822: LD_INT 81
70824: PUSH
70825: LD_VAR 0 1
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PPUSH
70834: CALL_OW 70
70838: ST_TO_ADDR
// end ;
70839: LD_VAR 0 3
70843: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
70844: LD_INT 0
70846: PPUSH
70847: PPUSH
70848: PPUSH
70849: PPUSH
// result := false ;
70850: LD_ADDR_VAR 0 2
70854: PUSH
70855: LD_INT 0
70857: ST_TO_ADDR
// side := GetSide ( unit ) ;
70858: LD_ADDR_VAR 0 3
70862: PUSH
70863: LD_VAR 0 1
70867: PPUSH
70868: CALL_OW 255
70872: ST_TO_ADDR
// nat := GetNation ( unit ) ;
70873: LD_ADDR_VAR 0 4
70877: PUSH
70878: LD_VAR 0 1
70882: PPUSH
70883: CALL_OW 248
70887: ST_TO_ADDR
// case nat of 1 :
70888: LD_VAR 0 4
70892: PUSH
70893: LD_INT 1
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70901
70899: GO 70912
70901: POP
// tech := tech_lassight ; 2 :
70902: LD_ADDR_VAR 0 5
70906: PUSH
70907: LD_INT 12
70909: ST_TO_ADDR
70910: GO 70951
70912: LD_INT 2
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70920
70918: GO 70931
70920: POP
// tech := tech_mortar ; 3 :
70921: LD_ADDR_VAR 0 5
70925: PUSH
70926: LD_INT 41
70928: ST_TO_ADDR
70929: GO 70951
70931: LD_INT 3
70933: DOUBLE
70934: EQUAL
70935: IFTRUE 70939
70937: GO 70950
70939: POP
// tech := tech_bazooka ; end ;
70940: LD_ADDR_VAR 0 5
70944: PUSH
70945: LD_INT 44
70947: ST_TO_ADDR
70948: GO 70951
70950: POP
// if Researched ( side , tech ) then
70951: LD_VAR 0 3
70955: PPUSH
70956: LD_VAR 0 5
70960: PPUSH
70961: CALL_OW 325
70965: IFFALSE 70992
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
70967: LD_ADDR_VAR 0 2
70971: PUSH
70972: LD_INT 5
70974: PUSH
70975: LD_INT 8
70977: PUSH
70978: LD_INT 9
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: LIST
70985: PUSH
70986: LD_VAR 0 4
70990: ARRAY
70991: ST_TO_ADDR
// end ;
70992: LD_VAR 0 2
70996: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
70997: LD_INT 0
70999: PPUSH
71000: PPUSH
71001: PPUSH
// if not mines then
71002: LD_VAR 0 2
71006: NOT
71007: IFFALSE 71011
// exit ;
71009: GO 71155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
71011: LD_ADDR_VAR 0 5
71015: PUSH
71016: LD_INT 81
71018: PUSH
71019: LD_VAR 0 1
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: LD_INT 21
71033: PUSH
71034: LD_INT 3
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PPUSH
71049: CALL_OW 69
71053: ST_TO_ADDR
// for i in mines do
71054: LD_ADDR_VAR 0 4
71058: PUSH
71059: LD_VAR 0 2
71063: PUSH
71064: FOR_IN
71065: IFFALSE 71153
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
71067: LD_VAR 0 4
71071: PUSH
71072: LD_INT 1
71074: ARRAY
71075: PPUSH
71076: LD_VAR 0 4
71080: PUSH
71081: LD_INT 2
71083: ARRAY
71084: PPUSH
71085: CALL_OW 458
71089: NOT
71090: IFFALSE 71094
// continue ;
71092: GO 71064
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
71094: LD_VAR 0 4
71098: PUSH
71099: LD_INT 1
71101: ARRAY
71102: PPUSH
71103: LD_VAR 0 4
71107: PUSH
71108: LD_INT 2
71110: ARRAY
71111: PPUSH
71112: CALL_OW 428
71116: PUSH
71117: LD_VAR 0 5
71121: IN
71122: IFFALSE 71151
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
71124: LD_VAR 0 4
71128: PUSH
71129: LD_INT 1
71131: ARRAY
71132: PPUSH
71133: LD_VAR 0 4
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: PPUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: CALL_OW 456
// end ;
71151: GO 71064
71153: POP
71154: POP
// end ;
71155: LD_VAR 0 3
71159: RET
// export function Count ( array ) ; begin
71160: LD_INT 0
71162: PPUSH
// result := array + 0 ;
71163: LD_ADDR_VAR 0 2
71167: PUSH
71168: LD_VAR 0 1
71172: PUSH
71173: LD_INT 0
71175: PLUS
71176: ST_TO_ADDR
// end ;
71177: LD_VAR 0 2
71181: RET
// export function IsEmpty ( building ) ; begin
71182: LD_INT 0
71184: PPUSH
// if not building then
71185: LD_VAR 0 1
71189: NOT
71190: IFFALSE 71194
// exit ;
71192: GO 71237
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
71194: LD_ADDR_VAR 0 2
71198: PUSH
71199: LD_VAR 0 1
71203: PUSH
71204: LD_INT 22
71206: PUSH
71207: LD_VAR 0 1
71211: PPUSH
71212: CALL_OW 255
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 58
71223: PUSH
71224: EMPTY
71225: LIST
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PPUSH
71231: CALL_OW 69
71235: IN
71236: ST_TO_ADDR
// end ;
71237: LD_VAR 0 2
71241: RET
// export function IsNotFull ( building ) ; var places ; begin
71242: LD_INT 0
71244: PPUSH
71245: PPUSH
// if not building then
71246: LD_VAR 0 1
71250: NOT
71251: IFFALSE 71255
// exit ;
71253: GO 71283
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
71255: LD_ADDR_VAR 0 2
71259: PUSH
71260: LD_VAR 0 1
71264: PPUSH
71265: LD_INT 3
71267: PUSH
71268: LD_INT 62
71270: PUSH
71271: EMPTY
71272: LIST
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PPUSH
71278: CALL_OW 72
71282: ST_TO_ADDR
// end ;
71283: LD_VAR 0 2
71287: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
71288: LD_INT 0
71290: PPUSH
71291: PPUSH
71292: PPUSH
71293: PPUSH
// tmp := [ ] ;
71294: LD_ADDR_VAR 0 3
71298: PUSH
71299: EMPTY
71300: ST_TO_ADDR
// list := [ ] ;
71301: LD_ADDR_VAR 0 5
71305: PUSH
71306: EMPTY
71307: ST_TO_ADDR
// for i = 16 to 25 do
71308: LD_ADDR_VAR 0 4
71312: PUSH
71313: DOUBLE
71314: LD_INT 16
71316: DEC
71317: ST_TO_ADDR
71318: LD_INT 25
71320: PUSH
71321: FOR_TO
71322: IFFALSE 71395
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
71324: LD_ADDR_VAR 0 3
71328: PUSH
71329: LD_VAR 0 3
71333: PUSH
71334: LD_INT 22
71336: PUSH
71337: LD_VAR 0 1
71341: PPUSH
71342: CALL_OW 255
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 91
71353: PUSH
71354: LD_VAR 0 1
71358: PUSH
71359: LD_INT 6
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 30
71369: PUSH
71370: LD_VAR 0 4
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: LIST
71383: PUSH
71384: EMPTY
71385: LIST
71386: PPUSH
71387: CALL_OW 69
71391: ADD
71392: ST_TO_ADDR
71393: GO 71321
71395: POP
71396: POP
// for i = 1 to tmp do
71397: LD_ADDR_VAR 0 4
71401: PUSH
71402: DOUBLE
71403: LD_INT 1
71405: DEC
71406: ST_TO_ADDR
71407: LD_VAR 0 3
71411: PUSH
71412: FOR_TO
71413: IFFALSE 71501
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
71415: LD_ADDR_VAR 0 5
71419: PUSH
71420: LD_VAR 0 5
71424: PUSH
71425: LD_VAR 0 3
71429: PUSH
71430: LD_VAR 0 4
71434: ARRAY
71435: PPUSH
71436: CALL_OW 266
71440: PUSH
71441: LD_VAR 0 3
71445: PUSH
71446: LD_VAR 0 4
71450: ARRAY
71451: PPUSH
71452: CALL_OW 250
71456: PUSH
71457: LD_VAR 0 3
71461: PUSH
71462: LD_VAR 0 4
71466: ARRAY
71467: PPUSH
71468: CALL_OW 251
71472: PUSH
71473: LD_VAR 0 3
71477: PUSH
71478: LD_VAR 0 4
71482: ARRAY
71483: PPUSH
71484: CALL_OW 254
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: PUSH
71495: EMPTY
71496: LIST
71497: ADD
71498: ST_TO_ADDR
71499: GO 71412
71501: POP
71502: POP
// result := list ;
71503: LD_ADDR_VAR 0 2
71507: PUSH
71508: LD_VAR 0 5
71512: ST_TO_ADDR
// end ;
71513: LD_VAR 0 2
71517: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
71518: LD_INT 0
71520: PPUSH
71521: PPUSH
71522: PPUSH
71523: PPUSH
71524: PPUSH
71525: PPUSH
71526: PPUSH
// if not factory then
71527: LD_VAR 0 1
71531: NOT
71532: IFFALSE 71536
// exit ;
71534: GO 72129
// if control = control_apeman then
71536: LD_VAR 0 4
71540: PUSH
71541: LD_INT 5
71543: EQUAL
71544: IFFALSE 71653
// begin tmp := UnitsInside ( factory ) ;
71546: LD_ADDR_VAR 0 8
71550: PUSH
71551: LD_VAR 0 1
71555: PPUSH
71556: CALL_OW 313
71560: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
71561: LD_VAR 0 8
71565: PPUSH
71566: LD_INT 25
71568: PUSH
71569: LD_INT 12
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PPUSH
71576: CALL_OW 72
71580: NOT
71581: IFFALSE 71591
// control := control_manual ;
71583: LD_ADDR_VAR 0 4
71587: PUSH
71588: LD_INT 1
71590: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
71591: LD_ADDR_VAR 0 8
71595: PUSH
71596: LD_VAR 0 1
71600: PPUSH
71601: CALL 71288 0 1
71605: ST_TO_ADDR
// if tmp then
71606: LD_VAR 0 8
71610: IFFALSE 71653
// begin for i in tmp do
71612: LD_ADDR_VAR 0 7
71616: PUSH
71617: LD_VAR 0 8
71621: PUSH
71622: FOR_IN
71623: IFFALSE 71651
// if i [ 1 ] = b_ext_radio then
71625: LD_VAR 0 7
71629: PUSH
71630: LD_INT 1
71632: ARRAY
71633: PUSH
71634: LD_INT 22
71636: EQUAL
71637: IFFALSE 71649
// begin control := control_remote ;
71639: LD_ADDR_VAR 0 4
71643: PUSH
71644: LD_INT 2
71646: ST_TO_ADDR
// break ;
71647: GO 71651
// end ;
71649: GO 71622
71651: POP
71652: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
71653: LD_VAR 0 1
71657: PPUSH
71658: LD_VAR 0 2
71662: PPUSH
71663: LD_VAR 0 3
71667: PPUSH
71668: LD_VAR 0 4
71672: PPUSH
71673: LD_VAR 0 5
71677: PPUSH
71678: CALL_OW 448
71682: IFFALSE 71717
// begin result := [ chassis , engine , control , weapon ] ;
71684: LD_ADDR_VAR 0 6
71688: PUSH
71689: LD_VAR 0 2
71693: PUSH
71694: LD_VAR 0 3
71698: PUSH
71699: LD_VAR 0 4
71703: PUSH
71704: LD_VAR 0 5
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: ST_TO_ADDR
// exit ;
71715: GO 72129
// end ; _chassis := AvailableChassisList ( factory ) ;
71717: LD_ADDR_VAR 0 9
71721: PUSH
71722: LD_VAR 0 1
71726: PPUSH
71727: CALL_OW 475
71731: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
71732: LD_ADDR_VAR 0 11
71736: PUSH
71737: LD_VAR 0 1
71741: PPUSH
71742: CALL_OW 476
71746: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
71747: LD_ADDR_VAR 0 12
71751: PUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: CALL_OW 477
71761: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
71762: LD_ADDR_VAR 0 10
71766: PUSH
71767: LD_VAR 0 1
71771: PPUSH
71772: CALL_OW 478
71776: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
71777: LD_VAR 0 9
71781: NOT
71782: PUSH
71783: LD_VAR 0 11
71787: NOT
71788: OR
71789: PUSH
71790: LD_VAR 0 12
71794: NOT
71795: OR
71796: PUSH
71797: LD_VAR 0 10
71801: NOT
71802: OR
71803: IFFALSE 71838
// begin result := [ chassis , engine , control , weapon ] ;
71805: LD_ADDR_VAR 0 6
71809: PUSH
71810: LD_VAR 0 2
71814: PUSH
71815: LD_VAR 0 3
71819: PUSH
71820: LD_VAR 0 4
71824: PUSH
71825: LD_VAR 0 5
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// exit ;
71836: GO 72129
// end ; if not chassis in _chassis then
71838: LD_VAR 0 2
71842: PUSH
71843: LD_VAR 0 9
71847: IN
71848: NOT
71849: IFFALSE 71875
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
71851: LD_ADDR_VAR 0 2
71855: PUSH
71856: LD_VAR 0 9
71860: PUSH
71861: LD_INT 1
71863: PPUSH
71864: LD_VAR 0 9
71868: PPUSH
71869: CALL_OW 12
71873: ARRAY
71874: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
71875: LD_VAR 0 2
71879: PPUSH
71880: LD_VAR 0 3
71884: PPUSH
71885: CALL 72134 0 2
71889: NOT
71890: IFFALSE 71949
// repeat engine := _engine [ 1 ] ;
71892: LD_ADDR_VAR 0 3
71896: PUSH
71897: LD_VAR 0 11
71901: PUSH
71902: LD_INT 1
71904: ARRAY
71905: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
71906: LD_ADDR_VAR 0 11
71910: PUSH
71911: LD_VAR 0 11
71915: PPUSH
71916: LD_INT 1
71918: PPUSH
71919: CALL_OW 3
71923: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
71924: LD_VAR 0 2
71928: PPUSH
71929: LD_VAR 0 3
71933: PPUSH
71934: CALL 72134 0 2
71938: PUSH
71939: LD_VAR 0 11
71943: PUSH
71944: EMPTY
71945: EQUAL
71946: OR
71947: IFFALSE 71892
// if not control in _control then
71949: LD_VAR 0 4
71953: PUSH
71954: LD_VAR 0 12
71958: IN
71959: NOT
71960: IFFALSE 71986
// control := _control [ rand ( 1 , _control ) ] ;
71962: LD_ADDR_VAR 0 4
71966: PUSH
71967: LD_VAR 0 12
71971: PUSH
71972: LD_INT 1
71974: PPUSH
71975: LD_VAR 0 12
71979: PPUSH
71980: CALL_OW 12
71984: ARRAY
71985: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
71986: LD_VAR 0 2
71990: PPUSH
71991: LD_VAR 0 5
71995: PPUSH
71996: CALL 72354 0 2
72000: NOT
72001: IFFALSE 72060
// repeat weapon := _weapon [ 1 ] ;
72003: LD_ADDR_VAR 0 5
72007: PUSH
72008: LD_VAR 0 10
72012: PUSH
72013: LD_INT 1
72015: ARRAY
72016: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
72017: LD_ADDR_VAR 0 10
72021: PUSH
72022: LD_VAR 0 10
72026: PPUSH
72027: LD_INT 1
72029: PPUSH
72030: CALL_OW 3
72034: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
72035: LD_VAR 0 2
72039: PPUSH
72040: LD_VAR 0 5
72044: PPUSH
72045: CALL 72354 0 2
72049: PUSH
72050: LD_VAR 0 10
72054: PUSH
72055: EMPTY
72056: EQUAL
72057: OR
72058: IFFALSE 72003
// result := [ ] ;
72060: LD_ADDR_VAR 0 6
72064: PUSH
72065: EMPTY
72066: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_VAR 0 2
72076: PPUSH
72077: LD_VAR 0 3
72081: PPUSH
72082: LD_VAR 0 4
72086: PPUSH
72087: LD_VAR 0 5
72091: PPUSH
72092: CALL_OW 448
72096: IFFALSE 72129
// result := [ chassis , engine , control , weapon ] ;
72098: LD_ADDR_VAR 0 6
72102: PUSH
72103: LD_VAR 0 2
72107: PUSH
72108: LD_VAR 0 3
72112: PUSH
72113: LD_VAR 0 4
72117: PUSH
72118: LD_VAR 0 5
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: ST_TO_ADDR
// end ;
72129: LD_VAR 0 6
72133: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
72134: LD_INT 0
72136: PPUSH
// if not chassis or not engine then
72137: LD_VAR 0 1
72141: NOT
72142: PUSH
72143: LD_VAR 0 2
72147: NOT
72148: OR
72149: IFFALSE 72153
// exit ;
72151: GO 72349
// case engine of engine_solar :
72153: LD_VAR 0 2
72157: PUSH
72158: LD_INT 2
72160: DOUBLE
72161: EQUAL
72162: IFTRUE 72166
72164: GO 72204
72166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
72167: LD_ADDR_VAR 0 3
72171: PUSH
72172: LD_INT 11
72174: PUSH
72175: LD_INT 12
72177: PUSH
72178: LD_INT 13
72180: PUSH
72181: LD_INT 14
72183: PUSH
72184: LD_INT 1
72186: PUSH
72187: LD_INT 2
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: ST_TO_ADDR
72202: GO 72333
72204: LD_INT 1
72206: DOUBLE
72207: EQUAL
72208: IFTRUE 72212
72210: GO 72274
72212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
72213: LD_ADDR_VAR 0 3
72217: PUSH
72218: LD_INT 11
72220: PUSH
72221: LD_INT 12
72223: PUSH
72224: LD_INT 13
72226: PUSH
72227: LD_INT 14
72229: PUSH
72230: LD_INT 1
72232: PUSH
72233: LD_INT 2
72235: PUSH
72236: LD_INT 3
72238: PUSH
72239: LD_INT 4
72241: PUSH
72242: LD_INT 5
72244: PUSH
72245: LD_INT 21
72247: PUSH
72248: LD_INT 23
72250: PUSH
72251: LD_INT 22
72253: PUSH
72254: LD_INT 24
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: ST_TO_ADDR
72272: GO 72333
72274: LD_INT 3
72276: DOUBLE
72277: EQUAL
72278: IFTRUE 72282
72280: GO 72332
72282: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
72283: LD_ADDR_VAR 0 3
72287: PUSH
72288: LD_INT 13
72290: PUSH
72291: LD_INT 14
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: LD_INT 5
72305: PUSH
72306: LD_INT 21
72308: PUSH
72309: LD_INT 22
72311: PUSH
72312: LD_INT 23
72314: PUSH
72315: LD_INT 24
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: ST_TO_ADDR
72330: GO 72333
72332: POP
// result := ( chassis in result ) ;
72333: LD_ADDR_VAR 0 3
72337: PUSH
72338: LD_VAR 0 1
72342: PUSH
72343: LD_VAR 0 3
72347: IN
72348: ST_TO_ADDR
// end ;
72349: LD_VAR 0 3
72353: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
72354: LD_INT 0
72356: PPUSH
// if not chassis or not weapon then
72357: LD_VAR 0 1
72361: NOT
72362: PUSH
72363: LD_VAR 0 2
72367: NOT
72368: OR
72369: IFFALSE 72373
// exit ;
72371: GO 73433
// case weapon of us_machine_gun :
72373: LD_VAR 0 2
72377: PUSH
72378: LD_INT 2
72380: DOUBLE
72381: EQUAL
72382: IFTRUE 72386
72384: GO 72416
72386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
72387: LD_ADDR_VAR 0 3
72391: PUSH
72392: LD_INT 1
72394: PUSH
72395: LD_INT 2
72397: PUSH
72398: LD_INT 3
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: LD_INT 5
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: ST_TO_ADDR
72414: GO 73417
72416: LD_INT 3
72418: DOUBLE
72419: EQUAL
72420: IFTRUE 72424
72422: GO 72454
72424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
72425: LD_ADDR_VAR 0 3
72429: PUSH
72430: LD_INT 1
72432: PUSH
72433: LD_INT 2
72435: PUSH
72436: LD_INT 3
72438: PUSH
72439: LD_INT 4
72441: PUSH
72442: LD_INT 5
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: ST_TO_ADDR
72452: GO 73417
72454: LD_INT 11
72456: DOUBLE
72457: EQUAL
72458: IFTRUE 72462
72460: GO 72492
72462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
72463: LD_ADDR_VAR 0 3
72467: PUSH
72468: LD_INT 1
72470: PUSH
72471: LD_INT 2
72473: PUSH
72474: LD_INT 3
72476: PUSH
72477: LD_INT 4
72479: PUSH
72480: LD_INT 5
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: ST_TO_ADDR
72490: GO 73417
72492: LD_INT 4
72494: DOUBLE
72495: EQUAL
72496: IFTRUE 72500
72498: GO 72526
72500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
72501: LD_ADDR_VAR 0 3
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: LD_INT 3
72511: PUSH
72512: LD_INT 4
72514: PUSH
72515: LD_INT 5
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: ST_TO_ADDR
72524: GO 73417
72526: LD_INT 5
72528: DOUBLE
72529: EQUAL
72530: IFTRUE 72534
72532: GO 72560
72534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
72535: LD_ADDR_VAR 0 3
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: LD_INT 3
72545: PUSH
72546: LD_INT 4
72548: PUSH
72549: LD_INT 5
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: ST_TO_ADDR
72558: GO 73417
72560: LD_INT 9
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72594
72568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
72569: LD_ADDR_VAR 0 3
72573: PUSH
72574: LD_INT 2
72576: PUSH
72577: LD_INT 3
72579: PUSH
72580: LD_INT 4
72582: PUSH
72583: LD_INT 5
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: ST_TO_ADDR
72592: GO 73417
72594: LD_INT 7
72596: DOUBLE
72597: EQUAL
72598: IFTRUE 72602
72600: GO 72628
72602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
72603: LD_ADDR_VAR 0 3
72607: PUSH
72608: LD_INT 2
72610: PUSH
72611: LD_INT 3
72613: PUSH
72614: LD_INT 4
72616: PUSH
72617: LD_INT 5
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: ST_TO_ADDR
72626: GO 73417
72628: LD_INT 12
72630: DOUBLE
72631: EQUAL
72632: IFTRUE 72636
72634: GO 72662
72636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
72637: LD_ADDR_VAR 0 3
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: LD_INT 3
72647: PUSH
72648: LD_INT 4
72650: PUSH
72651: LD_INT 5
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: ST_TO_ADDR
72660: GO 73417
72662: LD_INT 13
72664: DOUBLE
72665: EQUAL
72666: IFTRUE 72670
72668: GO 72696
72670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
72671: LD_ADDR_VAR 0 3
72675: PUSH
72676: LD_INT 2
72678: PUSH
72679: LD_INT 3
72681: PUSH
72682: LD_INT 4
72684: PUSH
72685: LD_INT 5
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: ST_TO_ADDR
72694: GO 73417
72696: LD_INT 14
72698: DOUBLE
72699: EQUAL
72700: IFTRUE 72704
72702: GO 72722
72704: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
72705: LD_ADDR_VAR 0 3
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: LD_INT 5
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: ST_TO_ADDR
72720: GO 73417
72722: LD_INT 6
72724: DOUBLE
72725: EQUAL
72726: IFTRUE 72730
72728: GO 72748
72730: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
72731: LD_ADDR_VAR 0 3
72735: PUSH
72736: LD_INT 4
72738: PUSH
72739: LD_INT 5
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: ST_TO_ADDR
72746: GO 73417
72748: LD_INT 10
72750: DOUBLE
72751: EQUAL
72752: IFTRUE 72756
72754: GO 72774
72756: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
72757: LD_ADDR_VAR 0 3
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 5
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: ST_TO_ADDR
72772: GO 73417
72774: LD_INT 22
72776: DOUBLE
72777: EQUAL
72778: IFTRUE 72782
72780: GO 72808
72782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
72783: LD_ADDR_VAR 0 3
72787: PUSH
72788: LD_INT 11
72790: PUSH
72791: LD_INT 12
72793: PUSH
72794: LD_INT 13
72796: PUSH
72797: LD_INT 14
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: ST_TO_ADDR
72806: GO 73417
72808: LD_INT 23
72810: DOUBLE
72811: EQUAL
72812: IFTRUE 72816
72814: GO 72842
72816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
72817: LD_ADDR_VAR 0 3
72821: PUSH
72822: LD_INT 11
72824: PUSH
72825: LD_INT 12
72827: PUSH
72828: LD_INT 13
72830: PUSH
72831: LD_INT 14
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: ST_TO_ADDR
72840: GO 73417
72842: LD_INT 24
72844: DOUBLE
72845: EQUAL
72846: IFTRUE 72850
72848: GO 72876
72850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
72851: LD_ADDR_VAR 0 3
72855: PUSH
72856: LD_INT 11
72858: PUSH
72859: LD_INT 12
72861: PUSH
72862: LD_INT 13
72864: PUSH
72865: LD_INT 14
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: ST_TO_ADDR
72874: GO 73417
72876: LD_INT 30
72878: DOUBLE
72879: EQUAL
72880: IFTRUE 72884
72882: GO 72910
72884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
72885: LD_ADDR_VAR 0 3
72889: PUSH
72890: LD_INT 11
72892: PUSH
72893: LD_INT 12
72895: PUSH
72896: LD_INT 13
72898: PUSH
72899: LD_INT 14
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: ST_TO_ADDR
72908: GO 73417
72910: LD_INT 25
72912: DOUBLE
72913: EQUAL
72914: IFTRUE 72918
72916: GO 72936
72918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
72919: LD_ADDR_VAR 0 3
72923: PUSH
72924: LD_INT 13
72926: PUSH
72927: LD_INT 14
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: ST_TO_ADDR
72934: GO 73417
72936: LD_INT 27
72938: DOUBLE
72939: EQUAL
72940: IFTRUE 72944
72942: GO 72962
72944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
72945: LD_ADDR_VAR 0 3
72949: PUSH
72950: LD_INT 13
72952: PUSH
72953: LD_INT 14
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: ST_TO_ADDR
72960: GO 73417
72962: LD_INT 92
72964: DOUBLE
72965: EQUAL
72966: IFTRUE 72970
72968: GO 72996
72970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
72971: LD_ADDR_VAR 0 3
72975: PUSH
72976: LD_INT 11
72978: PUSH
72979: LD_INT 12
72981: PUSH
72982: LD_INT 13
72984: PUSH
72985: LD_INT 14
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: ST_TO_ADDR
72994: GO 73417
72996: LD_INT 28
72998: DOUBLE
72999: EQUAL
73000: IFTRUE 73004
73002: GO 73022
73004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
73005: LD_ADDR_VAR 0 3
73009: PUSH
73010: LD_INT 13
73012: PUSH
73013: LD_INT 14
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: ST_TO_ADDR
73020: GO 73417
73022: LD_INT 29
73024: DOUBLE
73025: EQUAL
73026: IFTRUE 73030
73028: GO 73048
73030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
73031: LD_ADDR_VAR 0 3
73035: PUSH
73036: LD_INT 13
73038: PUSH
73039: LD_INT 14
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: ST_TO_ADDR
73046: GO 73417
73048: LD_INT 31
73050: DOUBLE
73051: EQUAL
73052: IFTRUE 73056
73054: GO 73074
73056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
73057: LD_ADDR_VAR 0 3
73061: PUSH
73062: LD_INT 13
73064: PUSH
73065: LD_INT 14
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: ST_TO_ADDR
73072: GO 73417
73074: LD_INT 26
73076: DOUBLE
73077: EQUAL
73078: IFTRUE 73082
73080: GO 73100
73082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
73083: LD_ADDR_VAR 0 3
73087: PUSH
73088: LD_INT 13
73090: PUSH
73091: LD_INT 14
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: ST_TO_ADDR
73098: GO 73417
73100: LD_INT 42
73102: DOUBLE
73103: EQUAL
73104: IFTRUE 73108
73106: GO 73134
73108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
73109: LD_ADDR_VAR 0 3
73113: PUSH
73114: LD_INT 21
73116: PUSH
73117: LD_INT 22
73119: PUSH
73120: LD_INT 23
73122: PUSH
73123: LD_INT 24
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: ST_TO_ADDR
73132: GO 73417
73134: LD_INT 43
73136: DOUBLE
73137: EQUAL
73138: IFTRUE 73142
73140: GO 73168
73142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
73143: LD_ADDR_VAR 0 3
73147: PUSH
73148: LD_INT 21
73150: PUSH
73151: LD_INT 22
73153: PUSH
73154: LD_INT 23
73156: PUSH
73157: LD_INT 24
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: ST_TO_ADDR
73166: GO 73417
73168: LD_INT 44
73170: DOUBLE
73171: EQUAL
73172: IFTRUE 73176
73174: GO 73202
73176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
73177: LD_ADDR_VAR 0 3
73181: PUSH
73182: LD_INT 21
73184: PUSH
73185: LD_INT 22
73187: PUSH
73188: LD_INT 23
73190: PUSH
73191: LD_INT 24
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: ST_TO_ADDR
73200: GO 73417
73202: LD_INT 45
73204: DOUBLE
73205: EQUAL
73206: IFTRUE 73210
73208: GO 73236
73210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
73211: LD_ADDR_VAR 0 3
73215: PUSH
73216: LD_INT 21
73218: PUSH
73219: LD_INT 22
73221: PUSH
73222: LD_INT 23
73224: PUSH
73225: LD_INT 24
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: ST_TO_ADDR
73234: GO 73417
73236: LD_INT 49
73238: DOUBLE
73239: EQUAL
73240: IFTRUE 73244
73242: GO 73270
73244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
73245: LD_ADDR_VAR 0 3
73249: PUSH
73250: LD_INT 21
73252: PUSH
73253: LD_INT 22
73255: PUSH
73256: LD_INT 23
73258: PUSH
73259: LD_INT 24
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: ST_TO_ADDR
73268: GO 73417
73270: LD_INT 51
73272: DOUBLE
73273: EQUAL
73274: IFTRUE 73278
73276: GO 73304
73278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
73279: LD_ADDR_VAR 0 3
73283: PUSH
73284: LD_INT 21
73286: PUSH
73287: LD_INT 22
73289: PUSH
73290: LD_INT 23
73292: PUSH
73293: LD_INT 24
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: ST_TO_ADDR
73302: GO 73417
73304: LD_INT 52
73306: DOUBLE
73307: EQUAL
73308: IFTRUE 73312
73310: GO 73338
73312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
73313: LD_ADDR_VAR 0 3
73317: PUSH
73318: LD_INT 21
73320: PUSH
73321: LD_INT 22
73323: PUSH
73324: LD_INT 23
73326: PUSH
73327: LD_INT 24
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: ST_TO_ADDR
73336: GO 73417
73338: LD_INT 53
73340: DOUBLE
73341: EQUAL
73342: IFTRUE 73346
73344: GO 73364
73346: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
73347: LD_ADDR_VAR 0 3
73351: PUSH
73352: LD_INT 23
73354: PUSH
73355: LD_INT 24
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: ST_TO_ADDR
73362: GO 73417
73364: LD_INT 46
73366: DOUBLE
73367: EQUAL
73368: IFTRUE 73372
73370: GO 73390
73372: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
73373: LD_ADDR_VAR 0 3
73377: PUSH
73378: LD_INT 23
73380: PUSH
73381: LD_INT 24
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: ST_TO_ADDR
73388: GO 73417
73390: LD_INT 47
73392: DOUBLE
73393: EQUAL
73394: IFTRUE 73398
73396: GO 73416
73398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
73399: LD_ADDR_VAR 0 3
73403: PUSH
73404: LD_INT 23
73406: PUSH
73407: LD_INT 24
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: ST_TO_ADDR
73414: GO 73417
73416: POP
// result := ( chassis in result ) ;
73417: LD_ADDR_VAR 0 3
73421: PUSH
73422: LD_VAR 0 1
73426: PUSH
73427: LD_VAR 0 3
73431: IN
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 3
73437: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
73444: PPUSH
73445: PPUSH
73446: PPUSH
// result := array ;
73447: LD_ADDR_VAR 0 5
73451: PUSH
73452: LD_VAR 0 1
73456: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
73457: LD_VAR 0 1
73461: NOT
73462: PUSH
73463: LD_VAR 0 2
73467: NOT
73468: OR
73469: PUSH
73470: LD_VAR 0 3
73474: NOT
73475: OR
73476: PUSH
73477: LD_VAR 0 2
73481: PUSH
73482: LD_VAR 0 1
73486: GREATER
73487: OR
73488: PUSH
73489: LD_VAR 0 3
73493: PUSH
73494: LD_VAR 0 1
73498: GREATER
73499: OR
73500: IFFALSE 73504
// exit ;
73502: GO 73800
// if direction then
73504: LD_VAR 0 4
73508: IFFALSE 73572
// begin d := 1 ;
73510: LD_ADDR_VAR 0 9
73514: PUSH
73515: LD_INT 1
73517: ST_TO_ADDR
// if i_from > i_to then
73518: LD_VAR 0 2
73522: PUSH
73523: LD_VAR 0 3
73527: GREATER
73528: IFFALSE 73554
// length := ( array - i_from ) + i_to else
73530: LD_ADDR_VAR 0 11
73534: PUSH
73535: LD_VAR 0 1
73539: PUSH
73540: LD_VAR 0 2
73544: MINUS
73545: PUSH
73546: LD_VAR 0 3
73550: PLUS
73551: ST_TO_ADDR
73552: GO 73570
// length := i_to - i_from ;
73554: LD_ADDR_VAR 0 11
73558: PUSH
73559: LD_VAR 0 3
73563: PUSH
73564: LD_VAR 0 2
73568: MINUS
73569: ST_TO_ADDR
// end else
73570: GO 73633
// begin d := - 1 ;
73572: LD_ADDR_VAR 0 9
73576: PUSH
73577: LD_INT 1
73579: NEG
73580: ST_TO_ADDR
// if i_from > i_to then
73581: LD_VAR 0 2
73585: PUSH
73586: LD_VAR 0 3
73590: GREATER
73591: IFFALSE 73611
// length := i_from - i_to else
73593: LD_ADDR_VAR 0 11
73597: PUSH
73598: LD_VAR 0 2
73602: PUSH
73603: LD_VAR 0 3
73607: MINUS
73608: ST_TO_ADDR
73609: GO 73633
// length := ( array - i_to ) + i_from ;
73611: LD_ADDR_VAR 0 11
73615: PUSH
73616: LD_VAR 0 1
73620: PUSH
73621: LD_VAR 0 3
73625: MINUS
73626: PUSH
73627: LD_VAR 0 2
73631: PLUS
73632: ST_TO_ADDR
// end ; if not length then
73633: LD_VAR 0 11
73637: NOT
73638: IFFALSE 73642
// exit ;
73640: GO 73800
// tmp := array ;
73642: LD_ADDR_VAR 0 10
73646: PUSH
73647: LD_VAR 0 1
73651: ST_TO_ADDR
// for i = 1 to length do
73652: LD_ADDR_VAR 0 6
73656: PUSH
73657: DOUBLE
73658: LD_INT 1
73660: DEC
73661: ST_TO_ADDR
73662: LD_VAR 0 11
73666: PUSH
73667: FOR_TO
73668: IFFALSE 73788
// begin for j = 1 to array do
73670: LD_ADDR_VAR 0 7
73674: PUSH
73675: DOUBLE
73676: LD_INT 1
73678: DEC
73679: ST_TO_ADDR
73680: LD_VAR 0 1
73684: PUSH
73685: FOR_TO
73686: IFFALSE 73774
// begin k := j + d ;
73688: LD_ADDR_VAR 0 8
73692: PUSH
73693: LD_VAR 0 7
73697: PUSH
73698: LD_VAR 0 9
73702: PLUS
73703: ST_TO_ADDR
// if k > array then
73704: LD_VAR 0 8
73708: PUSH
73709: LD_VAR 0 1
73713: GREATER
73714: IFFALSE 73724
// k := 1 ;
73716: LD_ADDR_VAR 0 8
73720: PUSH
73721: LD_INT 1
73723: ST_TO_ADDR
// if not k then
73724: LD_VAR 0 8
73728: NOT
73729: IFFALSE 73741
// k := array ;
73731: LD_ADDR_VAR 0 8
73735: PUSH
73736: LD_VAR 0 1
73740: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
73741: LD_ADDR_VAR 0 10
73745: PUSH
73746: LD_VAR 0 10
73750: PPUSH
73751: LD_VAR 0 8
73755: PPUSH
73756: LD_VAR 0 1
73760: PUSH
73761: LD_VAR 0 7
73765: ARRAY
73766: PPUSH
73767: CALL_OW 1
73771: ST_TO_ADDR
// end ;
73772: GO 73685
73774: POP
73775: POP
// array := tmp ;
73776: LD_ADDR_VAR 0 1
73780: PUSH
73781: LD_VAR 0 10
73785: ST_TO_ADDR
// end ;
73786: GO 73667
73788: POP
73789: POP
// result := array ;
73790: LD_ADDR_VAR 0 5
73794: PUSH
73795: LD_VAR 0 1
73799: ST_TO_ADDR
// end ;
73800: LD_VAR 0 5
73804: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
73805: LD_INT 0
73807: PPUSH
73808: PPUSH
// result := 0 ;
73809: LD_ADDR_VAR 0 3
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// if not array or not value in array then
73817: LD_VAR 0 1
73821: NOT
73822: PUSH
73823: LD_VAR 0 2
73827: PUSH
73828: LD_VAR 0 1
73832: IN
73833: NOT
73834: OR
73835: IFFALSE 73839
// exit ;
73837: GO 73893
// for i = 1 to array do
73839: LD_ADDR_VAR 0 4
73843: PUSH
73844: DOUBLE
73845: LD_INT 1
73847: DEC
73848: ST_TO_ADDR
73849: LD_VAR 0 1
73853: PUSH
73854: FOR_TO
73855: IFFALSE 73891
// if value = array [ i ] then
73857: LD_VAR 0 2
73861: PUSH
73862: LD_VAR 0 1
73866: PUSH
73867: LD_VAR 0 4
73871: ARRAY
73872: EQUAL
73873: IFFALSE 73889
// begin result := i ;
73875: LD_ADDR_VAR 0 3
73879: PUSH
73880: LD_VAR 0 4
73884: ST_TO_ADDR
// exit ;
73885: POP
73886: POP
73887: GO 73893
// end ;
73889: GO 73854
73891: POP
73892: POP
// end ;
73893: LD_VAR 0 3
73897: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
73898: LD_INT 0
73900: PPUSH
// vc_chassis := chassis ;
73901: LD_ADDR_OWVAR 37
73905: PUSH
73906: LD_VAR 0 1
73910: ST_TO_ADDR
// vc_engine := engine ;
73911: LD_ADDR_OWVAR 39
73915: PUSH
73916: LD_VAR 0 2
73920: ST_TO_ADDR
// vc_control := control ;
73921: LD_ADDR_OWVAR 38
73925: PUSH
73926: LD_VAR 0 3
73930: ST_TO_ADDR
// vc_weapon := weapon ;
73931: LD_ADDR_OWVAR 40
73935: PUSH
73936: LD_VAR 0 4
73940: ST_TO_ADDR
// vc_fuel_battery := fuel ;
73941: LD_ADDR_OWVAR 41
73945: PUSH
73946: LD_VAR 0 5
73950: ST_TO_ADDR
// end ;
73951: LD_VAR 0 6
73955: RET
// export function WantPlant ( unit ) ; var task ; begin
73956: LD_INT 0
73958: PPUSH
73959: PPUSH
// result := false ;
73960: LD_ADDR_VAR 0 2
73964: PUSH
73965: LD_INT 0
73967: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
73968: LD_ADDR_VAR 0 3
73972: PUSH
73973: LD_VAR 0 1
73977: PPUSH
73978: CALL_OW 437
73982: ST_TO_ADDR
// if task then
73983: LD_VAR 0 3
73987: IFFALSE 74015
// if task [ 1 ] [ 1 ] = p then
73989: LD_VAR 0 3
73993: PUSH
73994: LD_INT 1
73996: ARRAY
73997: PUSH
73998: LD_INT 1
74000: ARRAY
74001: PUSH
74002: LD_STRING p
74004: EQUAL
74005: IFFALSE 74015
// result := true ;
74007: LD_ADDR_VAR 0 2
74011: PUSH
74012: LD_INT 1
74014: ST_TO_ADDR
// end ;
74015: LD_VAR 0 2
74019: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
74020: LD_INT 0
74022: PPUSH
74023: PPUSH
74024: PPUSH
74025: PPUSH
// if pos < 1 then
74026: LD_VAR 0 2
74030: PUSH
74031: LD_INT 1
74033: LESS
74034: IFFALSE 74038
// exit ;
74036: GO 74341
// if pos = 1 then
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 1
74045: EQUAL
74046: IFFALSE 74079
// result := Replace ( arr , pos [ 1 ] , value ) else
74048: LD_ADDR_VAR 0 4
74052: PUSH
74053: LD_VAR 0 1
74057: PPUSH
74058: LD_VAR 0 2
74062: PUSH
74063: LD_INT 1
74065: ARRAY
74066: PPUSH
74067: LD_VAR 0 3
74071: PPUSH
74072: CALL_OW 1
74076: ST_TO_ADDR
74077: GO 74341
// begin tmp := arr ;
74079: LD_ADDR_VAR 0 6
74083: PUSH
74084: LD_VAR 0 1
74088: ST_TO_ADDR
// s_arr := [ tmp ] ;
74089: LD_ADDR_VAR 0 7
74093: PUSH
74094: LD_VAR 0 6
74098: PUSH
74099: EMPTY
74100: LIST
74101: ST_TO_ADDR
// for i = 1 to pos - 1 do
74102: LD_ADDR_VAR 0 5
74106: PUSH
74107: DOUBLE
74108: LD_INT 1
74110: DEC
74111: ST_TO_ADDR
74112: LD_VAR 0 2
74116: PUSH
74117: LD_INT 1
74119: MINUS
74120: PUSH
74121: FOR_TO
74122: IFFALSE 74167
// begin tmp := tmp [ pos [ i ] ] ;
74124: LD_ADDR_VAR 0 6
74128: PUSH
74129: LD_VAR 0 6
74133: PUSH
74134: LD_VAR 0 2
74138: PUSH
74139: LD_VAR 0 5
74143: ARRAY
74144: ARRAY
74145: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
74146: LD_ADDR_VAR 0 7
74150: PUSH
74151: LD_VAR 0 7
74155: PUSH
74156: LD_VAR 0 6
74160: PUSH
74161: EMPTY
74162: LIST
74163: ADD
74164: ST_TO_ADDR
// end ;
74165: GO 74121
74167: POP
74168: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
74169: LD_ADDR_VAR 0 6
74173: PUSH
74174: LD_VAR 0 6
74178: PPUSH
74179: LD_VAR 0 2
74183: PUSH
74184: LD_VAR 0 2
74188: ARRAY
74189: PPUSH
74190: LD_VAR 0 3
74194: PPUSH
74195: CALL_OW 1
74199: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
74200: LD_ADDR_VAR 0 7
74204: PUSH
74205: LD_VAR 0 7
74209: PPUSH
74210: LD_VAR 0 7
74214: PPUSH
74215: LD_VAR 0 6
74219: PPUSH
74220: CALL_OW 1
74224: ST_TO_ADDR
// for i = s_arr downto 2 do
74225: LD_ADDR_VAR 0 5
74229: PUSH
74230: DOUBLE
74231: LD_VAR 0 7
74235: INC
74236: ST_TO_ADDR
74237: LD_INT 2
74239: PUSH
74240: FOR_DOWNTO
74241: IFFALSE 74325
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
74243: LD_ADDR_VAR 0 6
74247: PUSH
74248: LD_VAR 0 7
74252: PUSH
74253: LD_VAR 0 5
74257: PUSH
74258: LD_INT 1
74260: MINUS
74261: ARRAY
74262: PPUSH
74263: LD_VAR 0 2
74267: PUSH
74268: LD_VAR 0 5
74272: PUSH
74273: LD_INT 1
74275: MINUS
74276: ARRAY
74277: PPUSH
74278: LD_VAR 0 7
74282: PUSH
74283: LD_VAR 0 5
74287: ARRAY
74288: PPUSH
74289: CALL_OW 1
74293: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
74294: LD_ADDR_VAR 0 7
74298: PUSH
74299: LD_VAR 0 7
74303: PPUSH
74304: LD_VAR 0 5
74308: PUSH
74309: LD_INT 1
74311: MINUS
74312: PPUSH
74313: LD_VAR 0 6
74317: PPUSH
74318: CALL_OW 1
74322: ST_TO_ADDR
// end ;
74323: GO 74240
74325: POP
74326: POP
// result := s_arr [ 1 ] ;
74327: LD_ADDR_VAR 0 4
74331: PUSH
74332: LD_VAR 0 7
74336: PUSH
74337: LD_INT 1
74339: ARRAY
74340: ST_TO_ADDR
// end ; end ;
74341: LD_VAR 0 4
74345: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
74346: LD_INT 0
74348: PPUSH
74349: PPUSH
// if not list then
74350: LD_VAR 0 1
74354: NOT
74355: IFFALSE 74359
// exit ;
74357: GO 74450
// i := list [ pos1 ] ;
74359: LD_ADDR_VAR 0 5
74363: PUSH
74364: LD_VAR 0 1
74368: PUSH
74369: LD_VAR 0 2
74373: ARRAY
74374: ST_TO_ADDR
// if not i then
74375: LD_VAR 0 5
74379: NOT
74380: IFFALSE 74384
// exit ;
74382: GO 74450
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
74384: LD_ADDR_VAR 0 1
74388: PUSH
74389: LD_VAR 0 1
74393: PPUSH
74394: LD_VAR 0 2
74398: PPUSH
74399: LD_VAR 0 1
74403: PUSH
74404: LD_VAR 0 3
74408: ARRAY
74409: PPUSH
74410: CALL_OW 1
74414: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
74415: LD_ADDR_VAR 0 1
74419: PUSH
74420: LD_VAR 0 1
74424: PPUSH
74425: LD_VAR 0 3
74429: PPUSH
74430: LD_VAR 0 5
74434: PPUSH
74435: CALL_OW 1
74439: ST_TO_ADDR
// result := list ;
74440: LD_ADDR_VAR 0 4
74444: PUSH
74445: LD_VAR 0 1
74449: ST_TO_ADDR
// end ;
74450: LD_VAR 0 4
74454: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
74455: LD_INT 0
74457: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
74458: LD_ADDR_VAR 0 5
74462: PUSH
74463: LD_VAR 0 1
74467: PPUSH
74468: CALL_OW 250
74472: PPUSH
74473: LD_VAR 0 1
74477: PPUSH
74478: CALL_OW 251
74482: PPUSH
74483: LD_VAR 0 2
74487: PPUSH
74488: LD_VAR 0 3
74492: PPUSH
74493: LD_VAR 0 4
74497: PPUSH
74498: CALL 74508 0 5
74502: ST_TO_ADDR
// end ;
74503: LD_VAR 0 5
74507: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
74513: PPUSH
// if not list then
74514: LD_VAR 0 3
74518: NOT
74519: IFFALSE 74523
// exit ;
74521: GO 74911
// result := [ ] ;
74523: LD_ADDR_VAR 0 6
74527: PUSH
74528: EMPTY
74529: ST_TO_ADDR
// for i in list do
74530: LD_ADDR_VAR 0 7
74534: PUSH
74535: LD_VAR 0 3
74539: PUSH
74540: FOR_IN
74541: IFFALSE 74743
// begin tmp := GetDistUnitXY ( i , x , y ) ;
74543: LD_ADDR_VAR 0 9
74547: PUSH
74548: LD_VAR 0 7
74552: PPUSH
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 2
74562: PPUSH
74563: CALL_OW 297
74567: ST_TO_ADDR
// if not result then
74568: LD_VAR 0 6
74572: NOT
74573: IFFALSE 74599
// result := [ [ i , tmp ] ] else
74575: LD_ADDR_VAR 0 6
74579: PUSH
74580: LD_VAR 0 7
74584: PUSH
74585: LD_VAR 0 9
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: EMPTY
74595: LIST
74596: ST_TO_ADDR
74597: GO 74741
// begin if result [ result ] [ 2 ] < tmp then
74599: LD_VAR 0 6
74603: PUSH
74604: LD_VAR 0 6
74608: ARRAY
74609: PUSH
74610: LD_INT 2
74612: ARRAY
74613: PUSH
74614: LD_VAR 0 9
74618: LESS
74619: IFFALSE 74661
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
74621: LD_ADDR_VAR 0 6
74625: PUSH
74626: LD_VAR 0 6
74630: PPUSH
74631: LD_VAR 0 6
74635: PUSH
74636: LD_INT 1
74638: PLUS
74639: PPUSH
74640: LD_VAR 0 7
74644: PUSH
74645: LD_VAR 0 9
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PPUSH
74654: CALL_OW 2
74658: ST_TO_ADDR
74659: GO 74741
// for j = 1 to result do
74661: LD_ADDR_VAR 0 8
74665: PUSH
74666: DOUBLE
74667: LD_INT 1
74669: DEC
74670: ST_TO_ADDR
74671: LD_VAR 0 6
74675: PUSH
74676: FOR_TO
74677: IFFALSE 74739
// begin if tmp < result [ j ] [ 2 ] then
74679: LD_VAR 0 9
74683: PUSH
74684: LD_VAR 0 6
74688: PUSH
74689: LD_VAR 0 8
74693: ARRAY
74694: PUSH
74695: LD_INT 2
74697: ARRAY
74698: LESS
74699: IFFALSE 74737
// begin result := Insert ( result , j , [ i , tmp ] ) ;
74701: LD_ADDR_VAR 0 6
74705: PUSH
74706: LD_VAR 0 6
74710: PPUSH
74711: LD_VAR 0 8
74715: PPUSH
74716: LD_VAR 0 7
74720: PUSH
74721: LD_VAR 0 9
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PPUSH
74730: CALL_OW 2
74734: ST_TO_ADDR
// break ;
74735: GO 74739
// end ; end ;
74737: GO 74676
74739: POP
74740: POP
// end ; end ;
74741: GO 74540
74743: POP
74744: POP
// if result and not asc then
74745: LD_VAR 0 6
74749: PUSH
74750: LD_VAR 0 4
74754: NOT
74755: AND
74756: IFFALSE 74831
// begin tmp := result ;
74758: LD_ADDR_VAR 0 9
74762: PUSH
74763: LD_VAR 0 6
74767: ST_TO_ADDR
// for i = tmp downto 1 do
74768: LD_ADDR_VAR 0 7
74772: PUSH
74773: DOUBLE
74774: LD_VAR 0 9
74778: INC
74779: ST_TO_ADDR
74780: LD_INT 1
74782: PUSH
74783: FOR_DOWNTO
74784: IFFALSE 74829
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
74786: LD_ADDR_VAR 0 6
74790: PUSH
74791: LD_VAR 0 6
74795: PPUSH
74796: LD_VAR 0 9
74800: PUSH
74801: LD_VAR 0 7
74805: MINUS
74806: PUSH
74807: LD_INT 1
74809: PLUS
74810: PPUSH
74811: LD_VAR 0 9
74815: PUSH
74816: LD_VAR 0 7
74820: ARRAY
74821: PPUSH
74822: CALL_OW 1
74826: ST_TO_ADDR
74827: GO 74783
74829: POP
74830: POP
// end ; tmp := [ ] ;
74831: LD_ADDR_VAR 0 9
74835: PUSH
74836: EMPTY
74837: ST_TO_ADDR
// if mode then
74838: LD_VAR 0 5
74842: IFFALSE 74911
// begin for i = 1 to result do
74844: LD_ADDR_VAR 0 7
74848: PUSH
74849: DOUBLE
74850: LD_INT 1
74852: DEC
74853: ST_TO_ADDR
74854: LD_VAR 0 6
74858: PUSH
74859: FOR_TO
74860: IFFALSE 74899
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
74862: LD_ADDR_VAR 0 9
74866: PUSH
74867: LD_VAR 0 9
74871: PPUSH
74872: LD_VAR 0 7
74876: PPUSH
74877: LD_VAR 0 6
74881: PUSH
74882: LD_VAR 0 7
74886: ARRAY
74887: PUSH
74888: LD_INT 1
74890: ARRAY
74891: PPUSH
74892: CALL_OW 1
74896: ST_TO_ADDR
74897: GO 74859
74899: POP
74900: POP
// result := tmp ;
74901: LD_ADDR_VAR 0 6
74905: PUSH
74906: LD_VAR 0 9
74910: ST_TO_ADDR
// end ; end ;
74911: LD_VAR 0 6
74915: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
74916: LD_INT 0
74918: PPUSH
74919: PPUSH
74920: PPUSH
74921: PPUSH
74922: PPUSH
74923: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
74924: LD_ADDR_VAR 0 5
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: LD_INT 0
74934: PUSH
74935: LD_INT 0
74937: PUSH
74938: EMPTY
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: ST_TO_ADDR
// if not x or not y then
74946: LD_VAR 0 2
74950: NOT
74951: PUSH
74952: LD_VAR 0 3
74956: NOT
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 76612
// if not range then
74962: LD_VAR 0 4
74966: NOT
74967: IFFALSE 74977
// range := 10 ;
74969: LD_ADDR_VAR 0 4
74973: PUSH
74974: LD_INT 10
74976: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
74977: LD_ADDR_VAR 0 8
74981: PUSH
74982: LD_INT 81
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 92
74996: PUSH
74997: LD_VAR 0 2
75001: PUSH
75002: LD_VAR 0 3
75006: PUSH
75007: LD_VAR 0 4
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 3
75020: PUSH
75021: LD_INT 21
75023: PUSH
75024: LD_INT 3
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: LIST
75039: PPUSH
75040: CALL_OW 69
75044: ST_TO_ADDR
// if not tmp then
75045: LD_VAR 0 8
75049: NOT
75050: IFFALSE 75054
// exit ;
75052: GO 76612
// for i in tmp do
75054: LD_ADDR_VAR 0 6
75058: PUSH
75059: LD_VAR 0 8
75063: PUSH
75064: FOR_IN
75065: IFFALSE 76587
// begin points := [ 0 , 0 , 0 ] ;
75067: LD_ADDR_VAR 0 9
75071: PUSH
75072: LD_INT 0
75074: PUSH
75075: LD_INT 0
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: LIST
75085: ST_TO_ADDR
// bpoints := 1 ;
75086: LD_ADDR_VAR 0 10
75090: PUSH
75091: LD_INT 1
75093: ST_TO_ADDR
// case GetType ( i ) of unit_human :
75094: LD_VAR 0 6
75098: PPUSH
75099: CALL_OW 247
75103: PUSH
75104: LD_INT 1
75106: DOUBLE
75107: EQUAL
75108: IFTRUE 75112
75110: GO 75690
75112: POP
// begin if GetClass ( i ) = 1 then
75113: LD_VAR 0 6
75117: PPUSH
75118: CALL_OW 257
75122: PUSH
75123: LD_INT 1
75125: EQUAL
75126: IFFALSE 75147
// points := [ 10 , 5 , 3 ] ;
75128: LD_ADDR_VAR 0 9
75132: PUSH
75133: LD_INT 10
75135: PUSH
75136: LD_INT 5
75138: PUSH
75139: LD_INT 3
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: LIST
75146: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
75147: LD_VAR 0 6
75151: PPUSH
75152: CALL_OW 257
75156: PUSH
75157: LD_INT 2
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: LD_INT 4
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: IN
75171: IFFALSE 75192
// points := [ 3 , 2 , 1 ] ;
75173: LD_ADDR_VAR 0 9
75177: PUSH
75178: LD_INT 3
75180: PUSH
75181: LD_INT 2
75183: PUSH
75184: LD_INT 1
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: LIST
75191: ST_TO_ADDR
// if GetClass ( i ) = 5 then
75192: LD_VAR 0 6
75196: PPUSH
75197: CALL_OW 257
75201: PUSH
75202: LD_INT 5
75204: EQUAL
75205: IFFALSE 75226
// points := [ 130 , 5 , 2 ] ;
75207: LD_ADDR_VAR 0 9
75211: PUSH
75212: LD_INT 130
75214: PUSH
75215: LD_INT 5
75217: PUSH
75218: LD_INT 2
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: ST_TO_ADDR
// if GetClass ( i ) = 8 then
75226: LD_VAR 0 6
75230: PPUSH
75231: CALL_OW 257
75235: PUSH
75236: LD_INT 8
75238: EQUAL
75239: IFFALSE 75260
// points := [ 35 , 35 , 30 ] ;
75241: LD_ADDR_VAR 0 9
75245: PUSH
75246: LD_INT 35
75248: PUSH
75249: LD_INT 35
75251: PUSH
75252: LD_INT 30
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: ST_TO_ADDR
// if GetClass ( i ) = 9 then
75260: LD_VAR 0 6
75264: PPUSH
75265: CALL_OW 257
75269: PUSH
75270: LD_INT 9
75272: EQUAL
75273: IFFALSE 75294
// points := [ 20 , 55 , 40 ] ;
75275: LD_ADDR_VAR 0 9
75279: PUSH
75280: LD_INT 20
75282: PUSH
75283: LD_INT 55
75285: PUSH
75286: LD_INT 40
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: LIST
75293: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
75294: LD_VAR 0 6
75298: PPUSH
75299: CALL_OW 257
75303: PUSH
75304: LD_INT 12
75306: PUSH
75307: LD_INT 16
75309: PUSH
75310: EMPTY
75311: LIST
75312: LIST
75313: IN
75314: IFFALSE 75335
// points := [ 5 , 3 , 2 ] ;
75316: LD_ADDR_VAR 0 9
75320: PUSH
75321: LD_INT 5
75323: PUSH
75324: LD_INT 3
75326: PUSH
75327: LD_INT 2
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: ST_TO_ADDR
// if GetClass ( i ) = 17 then
75335: LD_VAR 0 6
75339: PPUSH
75340: CALL_OW 257
75344: PUSH
75345: LD_INT 17
75347: EQUAL
75348: IFFALSE 75369
// points := [ 100 , 50 , 75 ] ;
75350: LD_ADDR_VAR 0 9
75354: PUSH
75355: LD_INT 100
75357: PUSH
75358: LD_INT 50
75360: PUSH
75361: LD_INT 75
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: ST_TO_ADDR
// if GetClass ( i ) = 15 then
75369: LD_VAR 0 6
75373: PPUSH
75374: CALL_OW 257
75378: PUSH
75379: LD_INT 15
75381: EQUAL
75382: IFFALSE 75403
// points := [ 10 , 5 , 3 ] ;
75384: LD_ADDR_VAR 0 9
75388: PUSH
75389: LD_INT 10
75391: PUSH
75392: LD_INT 5
75394: PUSH
75395: LD_INT 3
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: LIST
75402: ST_TO_ADDR
// if GetClass ( i ) = 14 then
75403: LD_VAR 0 6
75407: PPUSH
75408: CALL_OW 257
75412: PUSH
75413: LD_INT 14
75415: EQUAL
75416: IFFALSE 75437
// points := [ 10 , 0 , 0 ] ;
75418: LD_ADDR_VAR 0 9
75422: PUSH
75423: LD_INT 10
75425: PUSH
75426: LD_INT 0
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: LIST
75436: ST_TO_ADDR
// if GetClass ( i ) = 11 then
75437: LD_VAR 0 6
75441: PPUSH
75442: CALL_OW 257
75446: PUSH
75447: LD_INT 11
75449: EQUAL
75450: IFFALSE 75471
// points := [ 30 , 10 , 5 ] ;
75452: LD_ADDR_VAR 0 9
75456: PUSH
75457: LD_INT 30
75459: PUSH
75460: LD_INT 10
75462: PUSH
75463: LD_INT 5
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: LIST
75470: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
75471: LD_VAR 0 1
75475: PPUSH
75476: LD_INT 5
75478: PPUSH
75479: CALL_OW 321
75483: PUSH
75484: LD_INT 2
75486: EQUAL
75487: IFFALSE 75504
// bpoints := bpoints * 1.8 ;
75489: LD_ADDR_VAR 0 10
75493: PUSH
75494: LD_VAR 0 10
75498: PUSH
75499: LD_REAL  1.80000000000000E+0000
75502: MUL
75503: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
75504: LD_VAR 0 6
75508: PPUSH
75509: CALL_OW 257
75513: PUSH
75514: LD_INT 1
75516: PUSH
75517: LD_INT 2
75519: PUSH
75520: LD_INT 3
75522: PUSH
75523: LD_INT 4
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: IN
75532: PUSH
75533: LD_VAR 0 1
75537: PPUSH
75538: LD_INT 51
75540: PPUSH
75541: CALL_OW 321
75545: PUSH
75546: LD_INT 2
75548: EQUAL
75549: AND
75550: IFFALSE 75567
// bpoints := bpoints * 1.2 ;
75552: LD_ADDR_VAR 0 10
75556: PUSH
75557: LD_VAR 0 10
75561: PUSH
75562: LD_REAL  1.20000000000000E+0000
75565: MUL
75566: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
75567: LD_VAR 0 6
75571: PPUSH
75572: CALL_OW 257
75576: PUSH
75577: LD_INT 5
75579: PUSH
75580: LD_INT 7
75582: PUSH
75583: LD_INT 9
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: IN
75591: PUSH
75592: LD_VAR 0 1
75596: PPUSH
75597: LD_INT 52
75599: PPUSH
75600: CALL_OW 321
75604: PUSH
75605: LD_INT 2
75607: EQUAL
75608: AND
75609: IFFALSE 75626
// bpoints := bpoints * 1.5 ;
75611: LD_ADDR_VAR 0 10
75615: PUSH
75616: LD_VAR 0 10
75620: PUSH
75621: LD_REAL  1.50000000000000E+0000
75624: MUL
75625: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
75626: LD_VAR 0 1
75630: PPUSH
75631: LD_INT 66
75633: PPUSH
75634: CALL_OW 321
75638: PUSH
75639: LD_INT 2
75641: EQUAL
75642: IFFALSE 75659
// bpoints := bpoints * 1.1 ;
75644: LD_ADDR_VAR 0 10
75648: PUSH
75649: LD_VAR 0 10
75653: PUSH
75654: LD_REAL  1.10000000000000E+0000
75657: MUL
75658: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
75659: LD_ADDR_VAR 0 10
75663: PUSH
75664: LD_VAR 0 10
75668: PUSH
75669: LD_VAR 0 6
75673: PPUSH
75674: LD_INT 1
75676: PPUSH
75677: CALL_OW 259
75681: PUSH
75682: LD_REAL  1.15000000000000E+0000
75685: MUL
75686: MUL
75687: ST_TO_ADDR
// end ; unit_vehicle :
75688: GO 76516
75690: LD_INT 2
75692: DOUBLE
75693: EQUAL
75694: IFTRUE 75698
75696: GO 76504
75698: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
75699: LD_VAR 0 6
75703: PPUSH
75704: CALL_OW 264
75708: PUSH
75709: LD_INT 2
75711: PUSH
75712: LD_INT 42
75714: PUSH
75715: LD_INT 24
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: LIST
75722: IN
75723: IFFALSE 75744
// points := [ 25 , 5 , 3 ] ;
75725: LD_ADDR_VAR 0 9
75729: PUSH
75730: LD_INT 25
75732: PUSH
75733: LD_INT 5
75735: PUSH
75736: LD_INT 3
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: LIST
75743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
75744: LD_VAR 0 6
75748: PPUSH
75749: CALL_OW 264
75753: PUSH
75754: LD_INT 4
75756: PUSH
75757: LD_INT 43
75759: PUSH
75760: LD_INT 25
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: LIST
75767: IN
75768: IFFALSE 75789
// points := [ 40 , 15 , 5 ] ;
75770: LD_ADDR_VAR 0 9
75774: PUSH
75775: LD_INT 40
75777: PUSH
75778: LD_INT 15
75780: PUSH
75781: LD_INT 5
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: LIST
75788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
75789: LD_VAR 0 6
75793: PPUSH
75794: CALL_OW 264
75798: PUSH
75799: LD_INT 3
75801: PUSH
75802: LD_INT 23
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: IN
75809: IFFALSE 75830
// points := [ 7 , 25 , 8 ] ;
75811: LD_ADDR_VAR 0 9
75815: PUSH
75816: LD_INT 7
75818: PUSH
75819: LD_INT 25
75821: PUSH
75822: LD_INT 8
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
75830: LD_VAR 0 6
75834: PPUSH
75835: CALL_OW 264
75839: PUSH
75840: LD_INT 5
75842: PUSH
75843: LD_INT 27
75845: PUSH
75846: LD_INT 44
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: LIST
75853: IN
75854: IFFALSE 75875
// points := [ 14 , 50 , 16 ] ;
75856: LD_ADDR_VAR 0 9
75860: PUSH
75861: LD_INT 14
75863: PUSH
75864: LD_INT 50
75866: PUSH
75867: LD_INT 16
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: LIST
75874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
75875: LD_VAR 0 6
75879: PPUSH
75880: CALL_OW 264
75884: PUSH
75885: LD_INT 6
75887: PUSH
75888: LD_INT 46
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: IN
75895: IFFALSE 75916
// points := [ 32 , 120 , 70 ] ;
75897: LD_ADDR_VAR 0 9
75901: PUSH
75902: LD_INT 32
75904: PUSH
75905: LD_INT 120
75907: PUSH
75908: LD_INT 70
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: LIST
75915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
75916: LD_VAR 0 6
75920: PPUSH
75921: CALL_OW 264
75925: PUSH
75926: LD_INT 7
75928: PUSH
75929: LD_INT 28
75931: PUSH
75932: LD_INT 45
75934: PUSH
75935: LD_INT 92
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: IN
75944: IFFALSE 75965
// points := [ 35 , 20 , 45 ] ;
75946: LD_ADDR_VAR 0 9
75950: PUSH
75951: LD_INT 35
75953: PUSH
75954: LD_INT 20
75956: PUSH
75957: LD_INT 45
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: LIST
75964: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
75965: LD_VAR 0 6
75969: PPUSH
75970: CALL_OW 264
75974: PUSH
75975: LD_INT 47
75977: PUSH
75978: EMPTY
75979: LIST
75980: IN
75981: IFFALSE 76002
// points := [ 67 , 45 , 75 ] ;
75983: LD_ADDR_VAR 0 9
75987: PUSH
75988: LD_INT 67
75990: PUSH
75991: LD_INT 45
75993: PUSH
75994: LD_INT 75
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: LIST
76001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
76002: LD_VAR 0 6
76006: PPUSH
76007: CALL_OW 264
76011: PUSH
76012: LD_INT 26
76014: PUSH
76015: EMPTY
76016: LIST
76017: IN
76018: IFFALSE 76039
// points := [ 120 , 30 , 80 ] ;
76020: LD_ADDR_VAR 0 9
76024: PUSH
76025: LD_INT 120
76027: PUSH
76028: LD_INT 30
76030: PUSH
76031: LD_INT 80
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
76039: LD_VAR 0 6
76043: PPUSH
76044: CALL_OW 264
76048: PUSH
76049: LD_INT 22
76051: PUSH
76052: EMPTY
76053: LIST
76054: IN
76055: IFFALSE 76076
// points := [ 40 , 1 , 1 ] ;
76057: LD_ADDR_VAR 0 9
76061: PUSH
76062: LD_INT 40
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: LD_INT 1
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: LIST
76075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
76076: LD_VAR 0 6
76080: PPUSH
76081: CALL_OW 264
76085: PUSH
76086: LD_INT 29
76088: PUSH
76089: EMPTY
76090: LIST
76091: IN
76092: IFFALSE 76113
// points := [ 70 , 200 , 400 ] ;
76094: LD_ADDR_VAR 0 9
76098: PUSH
76099: LD_INT 70
76101: PUSH
76102: LD_INT 200
76104: PUSH
76105: LD_INT 400
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: LIST
76112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
76113: LD_VAR 0 6
76117: PPUSH
76118: CALL_OW 264
76122: PUSH
76123: LD_INT 14
76125: PUSH
76126: LD_INT 53
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: IN
76133: IFFALSE 76154
// points := [ 40 , 10 , 20 ] ;
76135: LD_ADDR_VAR 0 9
76139: PUSH
76140: LD_INT 40
76142: PUSH
76143: LD_INT 10
76145: PUSH
76146: LD_INT 20
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: LIST
76153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
76154: LD_VAR 0 6
76158: PPUSH
76159: CALL_OW 264
76163: PUSH
76164: LD_INT 9
76166: PUSH
76167: EMPTY
76168: LIST
76169: IN
76170: IFFALSE 76191
// points := [ 5 , 70 , 20 ] ;
76172: LD_ADDR_VAR 0 9
76176: PUSH
76177: LD_INT 5
76179: PUSH
76180: LD_INT 70
76182: PUSH
76183: LD_INT 20
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
76191: LD_VAR 0 6
76195: PPUSH
76196: CALL_OW 264
76200: PUSH
76201: LD_INT 10
76203: PUSH
76204: EMPTY
76205: LIST
76206: IN
76207: IFFALSE 76228
// points := [ 35 , 110 , 70 ] ;
76209: LD_ADDR_VAR 0 9
76213: PUSH
76214: LD_INT 35
76216: PUSH
76217: LD_INT 110
76219: PUSH
76220: LD_INT 70
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: LIST
76227: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
76228: LD_VAR 0 6
76232: PPUSH
76233: CALL_OW 265
76237: PUSH
76238: LD_INT 25
76240: EQUAL
76241: IFFALSE 76262
// points := [ 80 , 65 , 100 ] ;
76243: LD_ADDR_VAR 0 9
76247: PUSH
76248: LD_INT 80
76250: PUSH
76251: LD_INT 65
76253: PUSH
76254: LD_INT 100
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: LIST
76261: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
76262: LD_VAR 0 6
76266: PPUSH
76267: CALL_OW 263
76271: PUSH
76272: LD_INT 1
76274: EQUAL
76275: IFFALSE 76310
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
76277: LD_ADDR_VAR 0 10
76281: PUSH
76282: LD_VAR 0 10
76286: PUSH
76287: LD_VAR 0 6
76291: PPUSH
76292: CALL_OW 311
76296: PPUSH
76297: LD_INT 3
76299: PPUSH
76300: CALL_OW 259
76304: PUSH
76305: LD_INT 4
76307: MUL
76308: MUL
76309: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
76310: LD_VAR 0 6
76314: PPUSH
76315: CALL_OW 263
76319: PUSH
76320: LD_INT 2
76322: EQUAL
76323: IFFALSE 76374
// begin j := IsControledBy ( i ) ;
76325: LD_ADDR_VAR 0 7
76329: PUSH
76330: LD_VAR 0 6
76334: PPUSH
76335: CALL_OW 312
76339: ST_TO_ADDR
// if j then
76340: LD_VAR 0 7
76344: IFFALSE 76374
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
76346: LD_ADDR_VAR 0 10
76350: PUSH
76351: LD_VAR 0 10
76355: PUSH
76356: LD_VAR 0 7
76360: PPUSH
76361: LD_INT 3
76363: PPUSH
76364: CALL_OW 259
76368: PUSH
76369: LD_INT 3
76371: MUL
76372: MUL
76373: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
76374: LD_VAR 0 6
76378: PPUSH
76379: CALL_OW 264
76383: PUSH
76384: LD_INT 5
76386: PUSH
76387: LD_INT 6
76389: PUSH
76390: LD_INT 46
76392: PUSH
76393: LD_INT 44
76395: PUSH
76396: LD_INT 47
76398: PUSH
76399: LD_INT 45
76401: PUSH
76402: LD_INT 28
76404: PUSH
76405: LD_INT 7
76407: PUSH
76408: LD_INT 27
76410: PUSH
76411: LD_INT 29
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: IN
76426: PUSH
76427: LD_VAR 0 1
76431: PPUSH
76432: LD_INT 52
76434: PPUSH
76435: CALL_OW 321
76439: PUSH
76440: LD_INT 2
76442: EQUAL
76443: AND
76444: IFFALSE 76461
// bpoints := bpoints * 1.2 ;
76446: LD_ADDR_VAR 0 10
76450: PUSH
76451: LD_VAR 0 10
76455: PUSH
76456: LD_REAL  1.20000000000000E+0000
76459: MUL
76460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
76461: LD_VAR 0 6
76465: PPUSH
76466: CALL_OW 264
76470: PUSH
76471: LD_INT 6
76473: PUSH
76474: LD_INT 46
76476: PUSH
76477: LD_INT 47
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: LIST
76484: IN
76485: IFFALSE 76502
// bpoints := bpoints * 1.2 ;
76487: LD_ADDR_VAR 0 10
76491: PUSH
76492: LD_VAR 0 10
76496: PUSH
76497: LD_REAL  1.20000000000000E+0000
76500: MUL
76501: ST_TO_ADDR
// end ; unit_building :
76502: GO 76516
76504: LD_INT 3
76506: DOUBLE
76507: EQUAL
76508: IFTRUE 76512
76510: GO 76515
76512: POP
// ; end ;
76513: GO 76516
76515: POP
// for j = 1 to 3 do
76516: LD_ADDR_VAR 0 7
76520: PUSH
76521: DOUBLE
76522: LD_INT 1
76524: DEC
76525: ST_TO_ADDR
76526: LD_INT 3
76528: PUSH
76529: FOR_TO
76530: IFFALSE 76583
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
76532: LD_ADDR_VAR 0 5
76536: PUSH
76537: LD_VAR 0 5
76541: PPUSH
76542: LD_VAR 0 7
76546: PPUSH
76547: LD_VAR 0 5
76551: PUSH
76552: LD_VAR 0 7
76556: ARRAY
76557: PUSH
76558: LD_VAR 0 9
76562: PUSH
76563: LD_VAR 0 7
76567: ARRAY
76568: PUSH
76569: LD_VAR 0 10
76573: MUL
76574: PLUS
76575: PPUSH
76576: CALL_OW 1
76580: ST_TO_ADDR
76581: GO 76529
76583: POP
76584: POP
// end ;
76585: GO 75064
76587: POP
76588: POP
// result := Replace ( result , 4 , tmp ) ;
76589: LD_ADDR_VAR 0 5
76593: PUSH
76594: LD_VAR 0 5
76598: PPUSH
76599: LD_INT 4
76601: PPUSH
76602: LD_VAR 0 8
76606: PPUSH
76607: CALL_OW 1
76611: ST_TO_ADDR
// end ;
76612: LD_VAR 0 5
76616: RET
// export function DangerAtRange ( unit , range ) ; begin
76617: LD_INT 0
76619: PPUSH
// if not unit then
76620: LD_VAR 0 1
76624: NOT
76625: IFFALSE 76629
// exit ;
76627: GO 76674
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
76629: LD_ADDR_VAR 0 3
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 255
76643: PPUSH
76644: LD_VAR 0 1
76648: PPUSH
76649: CALL_OW 250
76653: PPUSH
76654: LD_VAR 0 1
76658: PPUSH
76659: CALL_OW 251
76663: PPUSH
76664: LD_VAR 0 2
76668: PPUSH
76669: CALL 74916 0 4
76673: ST_TO_ADDR
// end ;
76674: LD_VAR 0 3
76678: RET
// export function DangerInArea ( side , area ) ; begin
76679: LD_INT 0
76681: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
76682: LD_ADDR_VAR 0 3
76686: PUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: LD_INT 81
76694: PUSH
76695: LD_VAR 0 1
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PPUSH
76704: CALL_OW 70
76708: ST_TO_ADDR
// end ;
76709: LD_VAR 0 3
76713: RET
// export function IsExtension ( b ) ; begin
76714: LD_INT 0
76716: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
76717: LD_ADDR_VAR 0 2
76721: PUSH
76722: LD_VAR 0 1
76726: PUSH
76727: LD_INT 23
76729: PUSH
76730: LD_INT 20
76732: PUSH
76733: LD_INT 22
76735: PUSH
76736: LD_INT 17
76738: PUSH
76739: LD_INT 24
76741: PUSH
76742: LD_INT 21
76744: PUSH
76745: LD_INT 19
76747: PUSH
76748: LD_INT 16
76750: PUSH
76751: LD_INT 25
76753: PUSH
76754: LD_INT 18
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: IN
76769: ST_TO_ADDR
// end ;
76770: LD_VAR 0 2
76774: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
76775: LD_INT 0
76777: PPUSH
76778: PPUSH
76779: PPUSH
// result := [ ] ;
76780: LD_ADDR_VAR 0 4
76784: PUSH
76785: EMPTY
76786: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
76787: LD_ADDR_VAR 0 5
76791: PUSH
76792: LD_VAR 0 2
76796: PPUSH
76797: LD_INT 21
76799: PUSH
76800: LD_INT 3
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PPUSH
76807: CALL_OW 70
76811: ST_TO_ADDR
// if not tmp then
76812: LD_VAR 0 5
76816: NOT
76817: IFFALSE 76821
// exit ;
76819: GO 76885
// if checkLink then
76821: LD_VAR 0 3
76825: IFFALSE 76875
// begin for i in tmp do
76827: LD_ADDR_VAR 0 6
76831: PUSH
76832: LD_VAR 0 5
76836: PUSH
76837: FOR_IN
76838: IFFALSE 76873
// if GetBase ( i ) <> base then
76840: LD_VAR 0 6
76844: PPUSH
76845: CALL_OW 274
76849: PUSH
76850: LD_VAR 0 1
76854: NONEQUAL
76855: IFFALSE 76871
// ComLinkToBase ( base , i ) ;
76857: LD_VAR 0 1
76861: PPUSH
76862: LD_VAR 0 6
76866: PPUSH
76867: CALL_OW 169
76871: GO 76837
76873: POP
76874: POP
// end ; result := tmp ;
76875: LD_ADDR_VAR 0 4
76879: PUSH
76880: LD_VAR 0 5
76884: ST_TO_ADDR
// end ;
76885: LD_VAR 0 4
76889: RET
// export function ComComplete ( units , b ) ; var i ; begin
76890: LD_INT 0
76892: PPUSH
76893: PPUSH
// if not units then
76894: LD_VAR 0 1
76898: NOT
76899: IFFALSE 76903
// exit ;
76901: GO 76993
// for i in units do
76903: LD_ADDR_VAR 0 4
76907: PUSH
76908: LD_VAR 0 1
76912: PUSH
76913: FOR_IN
76914: IFFALSE 76991
// if BuildingStatus ( b ) = bs_build then
76916: LD_VAR 0 2
76920: PPUSH
76921: CALL_OW 461
76925: PUSH
76926: LD_INT 1
76928: EQUAL
76929: IFFALSE 76989
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
76931: LD_VAR 0 4
76935: PPUSH
76936: LD_STRING h
76938: PUSH
76939: LD_VAR 0 2
76943: PPUSH
76944: CALL_OW 250
76948: PUSH
76949: LD_VAR 0 2
76953: PPUSH
76954: CALL_OW 251
76958: PUSH
76959: LD_VAR 0 2
76963: PUSH
76964: LD_INT 0
76966: PUSH
76967: LD_INT 0
76969: PUSH
76970: LD_INT 0
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: PUSH
76982: EMPTY
76983: LIST
76984: PPUSH
76985: CALL_OW 446
76989: GO 76913
76991: POP
76992: POP
// end ;
76993: LD_VAR 0 3
76997: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
76998: LD_INT 0
77000: PPUSH
77001: PPUSH
77002: PPUSH
77003: PPUSH
77004: PPUSH
77005: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
77006: LD_VAR 0 1
77010: NOT
77011: PUSH
77012: LD_VAR 0 1
77016: PPUSH
77017: CALL_OW 263
77021: PUSH
77022: LD_INT 2
77024: NONEQUAL
77025: OR
77026: IFFALSE 77030
// exit ;
77028: GO 77346
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
77030: LD_ADDR_VAR 0 6
77034: PUSH
77035: LD_INT 22
77037: PUSH
77038: LD_VAR 0 1
77042: PPUSH
77043: CALL_OW 255
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 2
77054: PUSH
77055: LD_INT 30
77057: PUSH
77058: LD_INT 36
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 34
77067: PUSH
77068: LD_INT 31
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: LIST
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PPUSH
77084: CALL_OW 69
77088: ST_TO_ADDR
// if not tmp then
77089: LD_VAR 0 6
77093: NOT
77094: IFFALSE 77098
// exit ;
77096: GO 77346
// result := [ ] ;
77098: LD_ADDR_VAR 0 2
77102: PUSH
77103: EMPTY
77104: ST_TO_ADDR
// for i in tmp do
77105: LD_ADDR_VAR 0 3
77109: PUSH
77110: LD_VAR 0 6
77114: PUSH
77115: FOR_IN
77116: IFFALSE 77187
// begin t := UnitsInside ( i ) ;
77118: LD_ADDR_VAR 0 4
77122: PUSH
77123: LD_VAR 0 3
77127: PPUSH
77128: CALL_OW 313
77132: ST_TO_ADDR
// if t then
77133: LD_VAR 0 4
77137: IFFALSE 77185
// for j in t do
77139: LD_ADDR_VAR 0 7
77143: PUSH
77144: LD_VAR 0 4
77148: PUSH
77149: FOR_IN
77150: IFFALSE 77183
// result := Replace ( result , result + 1 , j ) ;
77152: LD_ADDR_VAR 0 2
77156: PUSH
77157: LD_VAR 0 2
77161: PPUSH
77162: LD_VAR 0 2
77166: PUSH
77167: LD_INT 1
77169: PLUS
77170: PPUSH
77171: LD_VAR 0 7
77175: PPUSH
77176: CALL_OW 1
77180: ST_TO_ADDR
77181: GO 77149
77183: POP
77184: POP
// end ;
77185: GO 77115
77187: POP
77188: POP
// if not result then
77189: LD_VAR 0 2
77193: NOT
77194: IFFALSE 77198
// exit ;
77196: GO 77346
// mech := result [ 1 ] ;
77198: LD_ADDR_VAR 0 5
77202: PUSH
77203: LD_VAR 0 2
77207: PUSH
77208: LD_INT 1
77210: ARRAY
77211: ST_TO_ADDR
// if result > 1 then
77212: LD_VAR 0 2
77216: PUSH
77217: LD_INT 1
77219: GREATER
77220: IFFALSE 77332
// begin for i = 2 to result do
77222: LD_ADDR_VAR 0 3
77226: PUSH
77227: DOUBLE
77228: LD_INT 2
77230: DEC
77231: ST_TO_ADDR
77232: LD_VAR 0 2
77236: PUSH
77237: FOR_TO
77238: IFFALSE 77330
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
77240: LD_ADDR_VAR 0 4
77244: PUSH
77245: LD_VAR 0 2
77249: PUSH
77250: LD_VAR 0 3
77254: ARRAY
77255: PPUSH
77256: LD_INT 3
77258: PPUSH
77259: CALL_OW 259
77263: PUSH
77264: LD_VAR 0 2
77268: PUSH
77269: LD_VAR 0 3
77273: ARRAY
77274: PPUSH
77275: CALL_OW 432
77279: MINUS
77280: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
77281: LD_VAR 0 4
77285: PUSH
77286: LD_VAR 0 5
77290: PPUSH
77291: LD_INT 3
77293: PPUSH
77294: CALL_OW 259
77298: PUSH
77299: LD_VAR 0 5
77303: PPUSH
77304: CALL_OW 432
77308: MINUS
77309: GREATEREQUAL
77310: IFFALSE 77328
// mech := result [ i ] ;
77312: LD_ADDR_VAR 0 5
77316: PUSH
77317: LD_VAR 0 2
77321: PUSH
77322: LD_VAR 0 3
77326: ARRAY
77327: ST_TO_ADDR
// end ;
77328: GO 77237
77330: POP
77331: POP
// end ; ComLinkTo ( vehicle , mech ) ;
77332: LD_VAR 0 1
77336: PPUSH
77337: LD_VAR 0 5
77341: PPUSH
77342: CALL_OW 135
// end ;
77346: LD_VAR 0 2
77350: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
77351: LD_INT 0
77353: PPUSH
77354: PPUSH
77355: PPUSH
77356: PPUSH
77357: PPUSH
77358: PPUSH
77359: PPUSH
77360: PPUSH
77361: PPUSH
77362: PPUSH
77363: PPUSH
77364: PPUSH
77365: PPUSH
// result := [ ] ;
77366: LD_ADDR_VAR 0 7
77370: PUSH
77371: EMPTY
77372: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
77373: LD_VAR 0 1
77377: PPUSH
77378: CALL_OW 266
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: LD_INT 1
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: IN
77393: NOT
77394: IFFALSE 77398
// exit ;
77396: GO 79032
// if name then
77398: LD_VAR 0 3
77402: IFFALSE 77418
// SetBName ( base_dep , name ) ;
77404: LD_VAR 0 1
77408: PPUSH
77409: LD_VAR 0 3
77413: PPUSH
77414: CALL_OW 500
// base := GetBase ( base_dep ) ;
77418: LD_ADDR_VAR 0 15
77422: PUSH
77423: LD_VAR 0 1
77427: PPUSH
77428: CALL_OW 274
77432: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
77433: LD_ADDR_VAR 0 16
77437: PUSH
77438: LD_VAR 0 1
77442: PPUSH
77443: CALL_OW 255
77447: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
77448: LD_ADDR_VAR 0 17
77452: PUSH
77453: LD_VAR 0 1
77457: PPUSH
77458: CALL_OW 248
77462: ST_TO_ADDR
// if sources then
77463: LD_VAR 0 5
77467: IFFALSE 77514
// for i = 1 to 3 do
77469: LD_ADDR_VAR 0 8
77473: PUSH
77474: DOUBLE
77475: LD_INT 1
77477: DEC
77478: ST_TO_ADDR
77479: LD_INT 3
77481: PUSH
77482: FOR_TO
77483: IFFALSE 77512
// AddResourceType ( base , i , sources [ i ] ) ;
77485: LD_VAR 0 15
77489: PPUSH
77490: LD_VAR 0 8
77494: PPUSH
77495: LD_VAR 0 5
77499: PUSH
77500: LD_VAR 0 8
77504: ARRAY
77505: PPUSH
77506: CALL_OW 276
77510: GO 77482
77512: POP
77513: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
77514: LD_ADDR_VAR 0 18
77518: PUSH
77519: LD_VAR 0 15
77523: PPUSH
77524: LD_VAR 0 2
77528: PPUSH
77529: LD_INT 1
77531: PPUSH
77532: CALL 76775 0 3
77536: ST_TO_ADDR
// InitHc ;
77537: CALL_OW 19
// InitUc ;
77541: CALL_OW 18
// uc_side := side ;
77545: LD_ADDR_OWVAR 20
77549: PUSH
77550: LD_VAR 0 16
77554: ST_TO_ADDR
// uc_nation := nation ;
77555: LD_ADDR_OWVAR 21
77559: PUSH
77560: LD_VAR 0 17
77564: ST_TO_ADDR
// if buildings then
77565: LD_VAR 0 18
77569: IFFALSE 78891
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
77571: LD_ADDR_VAR 0 19
77575: PUSH
77576: LD_VAR 0 18
77580: PPUSH
77581: LD_INT 2
77583: PUSH
77584: LD_INT 30
77586: PUSH
77587: LD_INT 29
77589: PUSH
77590: EMPTY
77591: LIST
77592: LIST
77593: PUSH
77594: LD_INT 30
77596: PUSH
77597: LD_INT 30
77599: PUSH
77600: EMPTY
77601: LIST
77602: LIST
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: LIST
77608: PPUSH
77609: CALL_OW 72
77613: ST_TO_ADDR
// if tmp then
77614: LD_VAR 0 19
77618: IFFALSE 77666
// for i in tmp do
77620: LD_ADDR_VAR 0 8
77624: PUSH
77625: LD_VAR 0 19
77629: PUSH
77630: FOR_IN
77631: IFFALSE 77664
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
77633: LD_VAR 0 8
77637: PPUSH
77638: CALL_OW 250
77642: PPUSH
77643: LD_VAR 0 8
77647: PPUSH
77648: CALL_OW 251
77652: PPUSH
77653: LD_VAR 0 16
77657: PPUSH
77658: CALL_OW 441
77662: GO 77630
77664: POP
77665: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
77666: LD_VAR 0 18
77670: PPUSH
77671: LD_INT 2
77673: PUSH
77674: LD_INT 30
77676: PUSH
77677: LD_INT 32
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 30
77686: PUSH
77687: LD_INT 33
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: LIST
77698: PPUSH
77699: CALL_OW 72
77703: IFFALSE 77791
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
77705: LD_ADDR_VAR 0 8
77709: PUSH
77710: LD_VAR 0 18
77714: PPUSH
77715: LD_INT 2
77717: PUSH
77718: LD_INT 30
77720: PUSH
77721: LD_INT 32
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: LD_INT 30
77730: PUSH
77731: LD_INT 33
77733: PUSH
77734: EMPTY
77735: LIST
77736: LIST
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: PPUSH
77743: CALL_OW 72
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77789
// begin if not GetBWeapon ( i ) then
77751: LD_VAR 0 8
77755: PPUSH
77756: CALL_OW 269
77760: NOT
77761: IFFALSE 77787
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
77763: LD_VAR 0 8
77767: PPUSH
77768: LD_VAR 0 8
77772: PPUSH
77773: LD_VAR 0 2
77777: PPUSH
77778: CALL 79037 0 2
77782: PPUSH
77783: CALL_OW 431
// end ;
77787: GO 77748
77789: POP
77790: POP
// end ; for i = 1 to personel do
77791: LD_ADDR_VAR 0 8
77795: PUSH
77796: DOUBLE
77797: LD_INT 1
77799: DEC
77800: ST_TO_ADDR
77801: LD_VAR 0 6
77805: PUSH
77806: FOR_TO
77807: IFFALSE 78871
// begin if i > 4 then
77809: LD_VAR 0 8
77813: PUSH
77814: LD_INT 4
77816: GREATER
77817: IFFALSE 77821
// break ;
77819: GO 78871
// case i of 1 :
77821: LD_VAR 0 8
77825: PUSH
77826: LD_INT 1
77828: DOUBLE
77829: EQUAL
77830: IFTRUE 77834
77832: GO 77914
77834: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
77835: LD_ADDR_VAR 0 12
77839: PUSH
77840: LD_VAR 0 18
77844: PPUSH
77845: LD_INT 22
77847: PUSH
77848: LD_VAR 0 16
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 58
77859: PUSH
77860: EMPTY
77861: LIST
77862: PUSH
77863: LD_INT 2
77865: PUSH
77866: LD_INT 30
77868: PUSH
77869: LD_INT 32
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 30
77878: PUSH
77879: LD_INT 4
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: LD_INT 30
77888: PUSH
77889: LD_INT 5
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: LIST
77906: PPUSH
77907: CALL_OW 72
77911: ST_TO_ADDR
77912: GO 78136
77914: LD_INT 2
77916: DOUBLE
77917: EQUAL
77918: IFTRUE 77922
77920: GO 77984
77922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
77923: LD_ADDR_VAR 0 12
77927: PUSH
77928: LD_VAR 0 18
77932: PPUSH
77933: LD_INT 22
77935: PUSH
77936: LD_VAR 0 16
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: LD_INT 2
77947: PUSH
77948: LD_INT 30
77950: PUSH
77951: LD_INT 0
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 30
77960: PUSH
77961: LD_INT 1
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: LIST
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PPUSH
77977: CALL_OW 72
77981: ST_TO_ADDR
77982: GO 78136
77984: LD_INT 3
77986: DOUBLE
77987: EQUAL
77988: IFTRUE 77992
77990: GO 78054
77992: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
77993: LD_ADDR_VAR 0 12
77997: PUSH
77998: LD_VAR 0 18
78002: PPUSH
78003: LD_INT 22
78005: PUSH
78006: LD_VAR 0 16
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_INT 2
78017: PUSH
78018: LD_INT 30
78020: PUSH
78021: LD_INT 2
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PUSH
78028: LD_INT 30
78030: PUSH
78031: LD_INT 3
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: LIST
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PPUSH
78047: CALL_OW 72
78051: ST_TO_ADDR
78052: GO 78136
78054: LD_INT 4
78056: DOUBLE
78057: EQUAL
78058: IFTRUE 78062
78060: GO 78135
78062: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
78063: LD_ADDR_VAR 0 12
78067: PUSH
78068: LD_VAR 0 18
78072: PPUSH
78073: LD_INT 22
78075: PUSH
78076: LD_VAR 0 16
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 2
78087: PUSH
78088: LD_INT 30
78090: PUSH
78091: LD_INT 6
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: LD_INT 30
78100: PUSH
78101: LD_INT 7
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 30
78110: PUSH
78111: LD_INT 8
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PPUSH
78128: CALL_OW 72
78132: ST_TO_ADDR
78133: GO 78136
78135: POP
// if i = 1 then
78136: LD_VAR 0 8
78140: PUSH
78141: LD_INT 1
78143: EQUAL
78144: IFFALSE 78255
// begin tmp := [ ] ;
78146: LD_ADDR_VAR 0 19
78150: PUSH
78151: EMPTY
78152: ST_TO_ADDR
// for j in f do
78153: LD_ADDR_VAR 0 9
78157: PUSH
78158: LD_VAR 0 12
78162: PUSH
78163: FOR_IN
78164: IFFALSE 78237
// if GetBType ( j ) = b_bunker then
78166: LD_VAR 0 9
78170: PPUSH
78171: CALL_OW 266
78175: PUSH
78176: LD_INT 32
78178: EQUAL
78179: IFFALSE 78206
// tmp := Insert ( tmp , 1 , j ) else
78181: LD_ADDR_VAR 0 19
78185: PUSH
78186: LD_VAR 0 19
78190: PPUSH
78191: LD_INT 1
78193: PPUSH
78194: LD_VAR 0 9
78198: PPUSH
78199: CALL_OW 2
78203: ST_TO_ADDR
78204: GO 78235
// tmp := Insert ( tmp , tmp + 1 , j ) ;
78206: LD_ADDR_VAR 0 19
78210: PUSH
78211: LD_VAR 0 19
78215: PPUSH
78216: LD_VAR 0 19
78220: PUSH
78221: LD_INT 1
78223: PLUS
78224: PPUSH
78225: LD_VAR 0 9
78229: PPUSH
78230: CALL_OW 2
78234: ST_TO_ADDR
78235: GO 78163
78237: POP
78238: POP
// if tmp then
78239: LD_VAR 0 19
78243: IFFALSE 78255
// f := tmp ;
78245: LD_ADDR_VAR 0 12
78249: PUSH
78250: LD_VAR 0 19
78254: ST_TO_ADDR
// end ; x := personel [ i ] ;
78255: LD_ADDR_VAR 0 13
78259: PUSH
78260: LD_VAR 0 6
78264: PUSH
78265: LD_VAR 0 8
78269: ARRAY
78270: ST_TO_ADDR
// if x = - 1 then
78271: LD_VAR 0 13
78275: PUSH
78276: LD_INT 1
78278: NEG
78279: EQUAL
78280: IFFALSE 78489
// begin for j in f do
78282: LD_ADDR_VAR 0 9
78286: PUSH
78287: LD_VAR 0 12
78291: PUSH
78292: FOR_IN
78293: IFFALSE 78485
// repeat InitHc ;
78295: CALL_OW 19
// if GetBType ( j ) = b_barracks then
78299: LD_VAR 0 9
78303: PPUSH
78304: CALL_OW 266
78308: PUSH
78309: LD_INT 5
78311: EQUAL
78312: IFFALSE 78382
// begin if UnitsInside ( j ) < 3 then
78314: LD_VAR 0 9
78318: PPUSH
78319: CALL_OW 313
78323: PUSH
78324: LD_INT 3
78326: LESS
78327: IFFALSE 78363
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
78329: LD_INT 0
78331: PPUSH
78332: LD_INT 5
78334: PUSH
78335: LD_INT 8
78337: PUSH
78338: LD_INT 9
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: LIST
78345: PUSH
78346: LD_VAR 0 17
78350: ARRAY
78351: PPUSH
78352: LD_VAR 0 4
78356: PPUSH
78357: CALL_OW 380
78361: GO 78380
// PrepareHuman ( false , i , skill ) ;
78363: LD_INT 0
78365: PPUSH
78366: LD_VAR 0 8
78370: PPUSH
78371: LD_VAR 0 4
78375: PPUSH
78376: CALL_OW 380
// end else
78380: GO 78399
// PrepareHuman ( false , i , skill ) ;
78382: LD_INT 0
78384: PPUSH
78385: LD_VAR 0 8
78389: PPUSH
78390: LD_VAR 0 4
78394: PPUSH
78395: CALL_OW 380
// un := CreateHuman ;
78399: LD_ADDR_VAR 0 14
78403: PUSH
78404: CALL_OW 44
78408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
78409: LD_ADDR_VAR 0 7
78413: PUSH
78414: LD_VAR 0 7
78418: PPUSH
78419: LD_INT 1
78421: PPUSH
78422: LD_VAR 0 14
78426: PPUSH
78427: CALL_OW 2
78431: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
78432: LD_VAR 0 14
78436: PPUSH
78437: LD_VAR 0 9
78441: PPUSH
78442: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
78446: LD_VAR 0 9
78450: PPUSH
78451: CALL_OW 313
78455: PUSH
78456: LD_INT 6
78458: EQUAL
78459: PUSH
78460: LD_VAR 0 9
78464: PPUSH
78465: CALL_OW 266
78469: PUSH
78470: LD_INT 32
78472: PUSH
78473: LD_INT 31
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: IN
78480: OR
78481: IFFALSE 78295
78483: GO 78292
78485: POP
78486: POP
// end else
78487: GO 78869
// for j = 1 to x do
78489: LD_ADDR_VAR 0 9
78493: PUSH
78494: DOUBLE
78495: LD_INT 1
78497: DEC
78498: ST_TO_ADDR
78499: LD_VAR 0 13
78503: PUSH
78504: FOR_TO
78505: IFFALSE 78867
// begin InitHc ;
78507: CALL_OW 19
// if not f then
78511: LD_VAR 0 12
78515: NOT
78516: IFFALSE 78605
// begin PrepareHuman ( false , i , skill ) ;
78518: LD_INT 0
78520: PPUSH
78521: LD_VAR 0 8
78525: PPUSH
78526: LD_VAR 0 4
78530: PPUSH
78531: CALL_OW 380
// un := CreateHuman ;
78535: LD_ADDR_VAR 0 14
78539: PUSH
78540: CALL_OW 44
78544: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
78545: LD_ADDR_VAR 0 7
78549: PUSH
78550: LD_VAR 0 7
78554: PPUSH
78555: LD_INT 1
78557: PPUSH
78558: LD_VAR 0 14
78562: PPUSH
78563: CALL_OW 2
78567: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
78568: LD_VAR 0 14
78572: PPUSH
78573: LD_VAR 0 1
78577: PPUSH
78578: CALL_OW 250
78582: PPUSH
78583: LD_VAR 0 1
78587: PPUSH
78588: CALL_OW 251
78592: PPUSH
78593: LD_INT 10
78595: PPUSH
78596: LD_INT 0
78598: PPUSH
78599: CALL_OW 50
// continue ;
78603: GO 78504
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
78605: LD_VAR 0 12
78609: PUSH
78610: LD_INT 1
78612: ARRAY
78613: PPUSH
78614: CALL_OW 313
78618: PUSH
78619: LD_VAR 0 12
78623: PUSH
78624: LD_INT 1
78626: ARRAY
78627: PPUSH
78628: CALL_OW 266
78632: PUSH
78633: LD_INT 32
78635: PUSH
78636: LD_INT 31
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: IN
78643: AND
78644: PUSH
78645: LD_VAR 0 12
78649: PUSH
78650: LD_INT 1
78652: ARRAY
78653: PPUSH
78654: CALL_OW 313
78658: PUSH
78659: LD_INT 6
78661: EQUAL
78662: OR
78663: IFFALSE 78683
// f := Delete ( f , 1 ) ;
78665: LD_ADDR_VAR 0 12
78669: PUSH
78670: LD_VAR 0 12
78674: PPUSH
78675: LD_INT 1
78677: PPUSH
78678: CALL_OW 3
78682: ST_TO_ADDR
// if not f then
78683: LD_VAR 0 12
78687: NOT
78688: IFFALSE 78706
// begin x := x + 2 ;
78690: LD_ADDR_VAR 0 13
78694: PUSH
78695: LD_VAR 0 13
78699: PUSH
78700: LD_INT 2
78702: PLUS
78703: ST_TO_ADDR
// continue ;
78704: GO 78504
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
78706: LD_VAR 0 12
78710: PUSH
78711: LD_INT 1
78713: ARRAY
78714: PPUSH
78715: CALL_OW 266
78719: PUSH
78720: LD_INT 5
78722: EQUAL
78723: IFFALSE 78797
// begin if UnitsInside ( f [ 1 ] ) < 3 then
78725: LD_VAR 0 12
78729: PUSH
78730: LD_INT 1
78732: ARRAY
78733: PPUSH
78734: CALL_OW 313
78738: PUSH
78739: LD_INT 3
78741: LESS
78742: IFFALSE 78778
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
78744: LD_INT 0
78746: PPUSH
78747: LD_INT 5
78749: PUSH
78750: LD_INT 8
78752: PUSH
78753: LD_INT 9
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: LIST
78760: PUSH
78761: LD_VAR 0 17
78765: ARRAY
78766: PPUSH
78767: LD_VAR 0 4
78771: PPUSH
78772: CALL_OW 380
78776: GO 78795
// PrepareHuman ( false , i , skill ) ;
78778: LD_INT 0
78780: PPUSH
78781: LD_VAR 0 8
78785: PPUSH
78786: LD_VAR 0 4
78790: PPUSH
78791: CALL_OW 380
// end else
78795: GO 78814
// PrepareHuman ( false , i , skill ) ;
78797: LD_INT 0
78799: PPUSH
78800: LD_VAR 0 8
78804: PPUSH
78805: LD_VAR 0 4
78809: PPUSH
78810: CALL_OW 380
// un := CreateHuman ;
78814: LD_ADDR_VAR 0 14
78818: PUSH
78819: CALL_OW 44
78823: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
78824: LD_ADDR_VAR 0 7
78828: PUSH
78829: LD_VAR 0 7
78833: PPUSH
78834: LD_INT 1
78836: PPUSH
78837: LD_VAR 0 14
78841: PPUSH
78842: CALL_OW 2
78846: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
78847: LD_VAR 0 14
78851: PPUSH
78852: LD_VAR 0 12
78856: PUSH
78857: LD_INT 1
78859: ARRAY
78860: PPUSH
78861: CALL_OW 52
// end ;
78865: GO 78504
78867: POP
78868: POP
// end ;
78869: GO 77806
78871: POP
78872: POP
// result := result ^ buildings ;
78873: LD_ADDR_VAR 0 7
78877: PUSH
78878: LD_VAR 0 7
78882: PUSH
78883: LD_VAR 0 18
78887: ADD
78888: ST_TO_ADDR
// end else
78889: GO 79032
// begin for i = 1 to personel do
78891: LD_ADDR_VAR 0 8
78895: PUSH
78896: DOUBLE
78897: LD_INT 1
78899: DEC
78900: ST_TO_ADDR
78901: LD_VAR 0 6
78905: PUSH
78906: FOR_TO
78907: IFFALSE 79030
// begin if i > 4 then
78909: LD_VAR 0 8
78913: PUSH
78914: LD_INT 4
78916: GREATER
78917: IFFALSE 78921
// break ;
78919: GO 79030
// x := personel [ i ] ;
78921: LD_ADDR_VAR 0 13
78925: PUSH
78926: LD_VAR 0 6
78930: PUSH
78931: LD_VAR 0 8
78935: ARRAY
78936: ST_TO_ADDR
// if x = - 1 then
78937: LD_VAR 0 13
78941: PUSH
78942: LD_INT 1
78944: NEG
78945: EQUAL
78946: IFFALSE 78950
// continue ;
78948: GO 78906
// PrepareHuman ( false , i , skill ) ;
78950: LD_INT 0
78952: PPUSH
78953: LD_VAR 0 8
78957: PPUSH
78958: LD_VAR 0 4
78962: PPUSH
78963: CALL_OW 380
// un := CreateHuman ;
78967: LD_ADDR_VAR 0 14
78971: PUSH
78972: CALL_OW 44
78976: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
78977: LD_VAR 0 14
78981: PPUSH
78982: LD_VAR 0 1
78986: PPUSH
78987: CALL_OW 250
78991: PPUSH
78992: LD_VAR 0 1
78996: PPUSH
78997: CALL_OW 251
79001: PPUSH
79002: LD_INT 10
79004: PPUSH
79005: LD_INT 0
79007: PPUSH
79008: CALL_OW 50
// result := result ^ un ;
79012: LD_ADDR_VAR 0 7
79016: PUSH
79017: LD_VAR 0 7
79021: PUSH
79022: LD_VAR 0 14
79026: ADD
79027: ST_TO_ADDR
// end ;
79028: GO 78906
79030: POP
79031: POP
// end ; end ;
79032: LD_VAR 0 7
79036: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
79037: LD_INT 0
79039: PPUSH
79040: PPUSH
79041: PPUSH
79042: PPUSH
79043: PPUSH
79044: PPUSH
79045: PPUSH
79046: PPUSH
79047: PPUSH
79048: PPUSH
79049: PPUSH
79050: PPUSH
79051: PPUSH
79052: PPUSH
79053: PPUSH
79054: PPUSH
// result := false ;
79055: LD_ADDR_VAR 0 3
79059: PUSH
79060: LD_INT 0
79062: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
79063: LD_VAR 0 1
79067: NOT
79068: PUSH
79069: LD_VAR 0 1
79073: PPUSH
79074: CALL_OW 266
79078: PUSH
79079: LD_INT 32
79081: PUSH
79082: LD_INT 33
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: IN
79089: NOT
79090: OR
79091: IFFALSE 79095
// exit ;
79093: GO 80204
// nat := GetNation ( tower ) ;
79095: LD_ADDR_VAR 0 12
79099: PUSH
79100: LD_VAR 0 1
79104: PPUSH
79105: CALL_OW 248
79109: ST_TO_ADDR
// side := GetSide ( tower ) ;
79110: LD_ADDR_VAR 0 16
79114: PUSH
79115: LD_VAR 0 1
79119: PPUSH
79120: CALL_OW 255
79124: ST_TO_ADDR
// x := GetX ( tower ) ;
79125: LD_ADDR_VAR 0 10
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 250
79139: ST_TO_ADDR
// y := GetY ( tower ) ;
79140: LD_ADDR_VAR 0 11
79144: PUSH
79145: LD_VAR 0 1
79149: PPUSH
79150: CALL_OW 251
79154: ST_TO_ADDR
// if not x or not y then
79155: LD_VAR 0 10
79159: NOT
79160: PUSH
79161: LD_VAR 0 11
79165: NOT
79166: OR
79167: IFFALSE 79171
// exit ;
79169: GO 80204
// weapon := 0 ;
79171: LD_ADDR_VAR 0 18
79175: PUSH
79176: LD_INT 0
79178: ST_TO_ADDR
// fac_list := [ ] ;
79179: LD_ADDR_VAR 0 17
79183: PUSH
79184: EMPTY
79185: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
79186: LD_ADDR_VAR 0 6
79190: PUSH
79191: LD_VAR 0 1
79195: PPUSH
79196: CALL_OW 274
79200: PPUSH
79201: LD_VAR 0 2
79205: PPUSH
79206: LD_INT 0
79208: PPUSH
79209: CALL 76775 0 3
79213: PPUSH
79214: LD_INT 30
79216: PUSH
79217: LD_INT 3
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PPUSH
79224: CALL_OW 72
79228: ST_TO_ADDR
// if not factories then
79229: LD_VAR 0 6
79233: NOT
79234: IFFALSE 79238
// exit ;
79236: GO 80204
// for i in factories do
79238: LD_ADDR_VAR 0 8
79242: PUSH
79243: LD_VAR 0 6
79247: PUSH
79248: FOR_IN
79249: IFFALSE 79274
// fac_list := fac_list union AvailableWeaponList ( i ) ;
79251: LD_ADDR_VAR 0 17
79255: PUSH
79256: LD_VAR 0 17
79260: PUSH
79261: LD_VAR 0 8
79265: PPUSH
79266: CALL_OW 478
79270: UNION
79271: ST_TO_ADDR
79272: GO 79248
79274: POP
79275: POP
// if not fac_list then
79276: LD_VAR 0 17
79280: NOT
79281: IFFALSE 79285
// exit ;
79283: GO 80204
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
79285: LD_ADDR_VAR 0 5
79289: PUSH
79290: LD_INT 4
79292: PUSH
79293: LD_INT 5
79295: PUSH
79296: LD_INT 9
79298: PUSH
79299: LD_INT 10
79301: PUSH
79302: LD_INT 6
79304: PUSH
79305: LD_INT 7
79307: PUSH
79308: LD_INT 11
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: PUSH
79320: LD_INT 27
79322: PUSH
79323: LD_INT 28
79325: PUSH
79326: LD_INT 26
79328: PUSH
79329: LD_INT 30
79331: PUSH
79332: EMPTY
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: PUSH
79338: LD_INT 43
79340: PUSH
79341: LD_INT 44
79343: PUSH
79344: LD_INT 46
79346: PUSH
79347: LD_INT 45
79349: PUSH
79350: LD_INT 47
79352: PUSH
79353: LD_INT 49
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: LIST
79360: LIST
79361: LIST
79362: LIST
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: LIST
79368: PUSH
79369: LD_VAR 0 12
79373: ARRAY
79374: ST_TO_ADDR
// list := list isect fac_list ;
79375: LD_ADDR_VAR 0 5
79379: PUSH
79380: LD_VAR 0 5
79384: PUSH
79385: LD_VAR 0 17
79389: ISECT
79390: ST_TO_ADDR
// if not list then
79391: LD_VAR 0 5
79395: NOT
79396: IFFALSE 79400
// exit ;
79398: GO 80204
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
79400: LD_VAR 0 12
79404: PUSH
79405: LD_INT 3
79407: EQUAL
79408: PUSH
79409: LD_INT 49
79411: PUSH
79412: LD_VAR 0 5
79416: IN
79417: AND
79418: PUSH
79419: LD_INT 31
79421: PPUSH
79422: LD_VAR 0 16
79426: PPUSH
79427: CALL_OW 321
79431: PUSH
79432: LD_INT 2
79434: EQUAL
79435: AND
79436: IFFALSE 79496
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
79438: LD_INT 22
79440: PUSH
79441: LD_VAR 0 16
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 35
79452: PUSH
79453: LD_INT 49
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 91
79462: PUSH
79463: LD_VAR 0 1
79467: PUSH
79468: LD_INT 10
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: LIST
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: PPUSH
79481: CALL_OW 69
79485: NOT
79486: IFFALSE 79496
// weapon := ru_time_lapser ;
79488: LD_ADDR_VAR 0 18
79492: PUSH
79493: LD_INT 49
79495: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
79496: LD_VAR 0 12
79500: PUSH
79501: LD_INT 1
79503: PUSH
79504: LD_INT 2
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: IN
79511: PUSH
79512: LD_INT 11
79514: PUSH
79515: LD_VAR 0 5
79519: IN
79520: PUSH
79521: LD_INT 30
79523: PUSH
79524: LD_VAR 0 5
79528: IN
79529: OR
79530: AND
79531: PUSH
79532: LD_INT 6
79534: PPUSH
79535: LD_VAR 0 16
79539: PPUSH
79540: CALL_OW 321
79544: PUSH
79545: LD_INT 2
79547: EQUAL
79548: AND
79549: IFFALSE 79714
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
79551: LD_INT 22
79553: PUSH
79554: LD_VAR 0 16
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 2
79565: PUSH
79566: LD_INT 35
79568: PUSH
79569: LD_INT 11
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 35
79578: PUSH
79579: LD_INT 30
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: LIST
79590: PUSH
79591: LD_INT 91
79593: PUSH
79594: LD_VAR 0 1
79598: PUSH
79599: LD_INT 18
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: LIST
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: LIST
79611: PPUSH
79612: CALL_OW 69
79616: NOT
79617: PUSH
79618: LD_INT 22
79620: PUSH
79621: LD_VAR 0 16
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 2
79632: PUSH
79633: LD_INT 30
79635: PUSH
79636: LD_INT 32
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: PUSH
79643: LD_INT 30
79645: PUSH
79646: LD_INT 33
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 91
79660: PUSH
79661: LD_VAR 0 1
79665: PUSH
79666: LD_INT 12
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: LIST
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: LIST
79678: PUSH
79679: EMPTY
79680: LIST
79681: PPUSH
79682: CALL_OW 69
79686: PUSH
79687: LD_INT 2
79689: GREATER
79690: AND
79691: IFFALSE 79714
// weapon := [ us_radar , ar_radar ] [ nat ] ;
79693: LD_ADDR_VAR 0 18
79697: PUSH
79698: LD_INT 11
79700: PUSH
79701: LD_INT 30
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: PUSH
79708: LD_VAR 0 12
79712: ARRAY
79713: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
79714: LD_VAR 0 18
79718: NOT
79719: PUSH
79720: LD_INT 40
79722: PPUSH
79723: LD_VAR 0 16
79727: PPUSH
79728: CALL_OW 321
79732: PUSH
79733: LD_INT 2
79735: EQUAL
79736: AND
79737: PUSH
79738: LD_INT 7
79740: PUSH
79741: LD_VAR 0 5
79745: IN
79746: PUSH
79747: LD_INT 28
79749: PUSH
79750: LD_VAR 0 5
79754: IN
79755: OR
79756: PUSH
79757: LD_INT 45
79759: PUSH
79760: LD_VAR 0 5
79764: IN
79765: OR
79766: AND
79767: IFFALSE 80021
// begin hex := GetHexInfo ( x , y ) ;
79769: LD_ADDR_VAR 0 4
79773: PUSH
79774: LD_VAR 0 10
79778: PPUSH
79779: LD_VAR 0 11
79783: PPUSH
79784: CALL_OW 546
79788: ST_TO_ADDR
// if hex [ 1 ] then
79789: LD_VAR 0 4
79793: PUSH
79794: LD_INT 1
79796: ARRAY
79797: IFFALSE 79801
// exit ;
79799: GO 80204
// height := hex [ 2 ] ;
79801: LD_ADDR_VAR 0 15
79805: PUSH
79806: LD_VAR 0 4
79810: PUSH
79811: LD_INT 2
79813: ARRAY
79814: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
79815: LD_ADDR_VAR 0 14
79819: PUSH
79820: LD_INT 0
79822: PUSH
79823: LD_INT 2
79825: PUSH
79826: LD_INT 3
79828: PUSH
79829: LD_INT 5
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: ST_TO_ADDR
// for i in tmp do
79838: LD_ADDR_VAR 0 8
79842: PUSH
79843: LD_VAR 0 14
79847: PUSH
79848: FOR_IN
79849: IFFALSE 80019
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
79851: LD_ADDR_VAR 0 9
79855: PUSH
79856: LD_VAR 0 10
79860: PPUSH
79861: LD_VAR 0 8
79865: PPUSH
79866: LD_INT 5
79868: PPUSH
79869: CALL_OW 272
79873: PUSH
79874: LD_VAR 0 11
79878: PPUSH
79879: LD_VAR 0 8
79883: PPUSH
79884: LD_INT 5
79886: PPUSH
79887: CALL_OW 273
79891: PUSH
79892: EMPTY
79893: LIST
79894: LIST
79895: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
79896: LD_VAR 0 9
79900: PUSH
79901: LD_INT 1
79903: ARRAY
79904: PPUSH
79905: LD_VAR 0 9
79909: PUSH
79910: LD_INT 2
79912: ARRAY
79913: PPUSH
79914: CALL_OW 488
79918: IFFALSE 80017
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
79920: LD_ADDR_VAR 0 4
79924: PUSH
79925: LD_VAR 0 9
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PPUSH
79934: LD_VAR 0 9
79938: PUSH
79939: LD_INT 2
79941: ARRAY
79942: PPUSH
79943: CALL_OW 546
79947: ST_TO_ADDR
// if hex [ 1 ] then
79948: LD_VAR 0 4
79952: PUSH
79953: LD_INT 1
79955: ARRAY
79956: IFFALSE 79960
// continue ;
79958: GO 79848
// h := hex [ 2 ] ;
79960: LD_ADDR_VAR 0 13
79964: PUSH
79965: LD_VAR 0 4
79969: PUSH
79970: LD_INT 2
79972: ARRAY
79973: ST_TO_ADDR
// if h + 7 < height then
79974: LD_VAR 0 13
79978: PUSH
79979: LD_INT 7
79981: PLUS
79982: PUSH
79983: LD_VAR 0 15
79987: LESS
79988: IFFALSE 80017
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
79990: LD_ADDR_VAR 0 18
79994: PUSH
79995: LD_INT 7
79997: PUSH
79998: LD_INT 28
80000: PUSH
80001: LD_INT 45
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: LIST
80008: PUSH
80009: LD_VAR 0 12
80013: ARRAY
80014: ST_TO_ADDR
// break ;
80015: GO 80019
// end ; end ; end ;
80017: GO 79848
80019: POP
80020: POP
// end ; if not weapon then
80021: LD_VAR 0 18
80025: NOT
80026: IFFALSE 80086
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
80028: LD_ADDR_VAR 0 5
80032: PUSH
80033: LD_VAR 0 5
80037: PUSH
80038: LD_INT 11
80040: PUSH
80041: LD_INT 30
80043: PUSH
80044: LD_INT 49
80046: PUSH
80047: EMPTY
80048: LIST
80049: LIST
80050: LIST
80051: DIFF
80052: ST_TO_ADDR
// if not list then
80053: LD_VAR 0 5
80057: NOT
80058: IFFALSE 80062
// exit ;
80060: GO 80204
// weapon := list [ rand ( 1 , list ) ] ;
80062: LD_ADDR_VAR 0 18
80066: PUSH
80067: LD_VAR 0 5
80071: PUSH
80072: LD_INT 1
80074: PPUSH
80075: LD_VAR 0 5
80079: PPUSH
80080: CALL_OW 12
80084: ARRAY
80085: ST_TO_ADDR
// end ; if weapon then
80086: LD_VAR 0 18
80090: IFFALSE 80204
// begin tmp := CostOfWeapon ( weapon ) ;
80092: LD_ADDR_VAR 0 14
80096: PUSH
80097: LD_VAR 0 18
80101: PPUSH
80102: CALL_OW 451
80106: ST_TO_ADDR
// j := GetBase ( tower ) ;
80107: LD_ADDR_VAR 0 9
80111: PUSH
80112: LD_VAR 0 1
80116: PPUSH
80117: CALL_OW 274
80121: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
80122: LD_VAR 0 9
80126: PPUSH
80127: LD_INT 1
80129: PPUSH
80130: CALL_OW 275
80134: PUSH
80135: LD_VAR 0 14
80139: PUSH
80140: LD_INT 1
80142: ARRAY
80143: GREATEREQUAL
80144: PUSH
80145: LD_VAR 0 9
80149: PPUSH
80150: LD_INT 2
80152: PPUSH
80153: CALL_OW 275
80157: PUSH
80158: LD_VAR 0 14
80162: PUSH
80163: LD_INT 2
80165: ARRAY
80166: GREATEREQUAL
80167: AND
80168: PUSH
80169: LD_VAR 0 9
80173: PPUSH
80174: LD_INT 3
80176: PPUSH
80177: CALL_OW 275
80181: PUSH
80182: LD_VAR 0 14
80186: PUSH
80187: LD_INT 3
80189: ARRAY
80190: GREATEREQUAL
80191: AND
80192: IFFALSE 80204
// result := weapon ;
80194: LD_ADDR_VAR 0 3
80198: PUSH
80199: LD_VAR 0 18
80203: ST_TO_ADDR
// end ; end ;
80204: LD_VAR 0 3
80208: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
80209: LD_INT 0
80211: PPUSH
80212: PPUSH
// result := true ;
80213: LD_ADDR_VAR 0 3
80217: PUSH
80218: LD_INT 1
80220: ST_TO_ADDR
// if array1 = array2 then
80221: LD_VAR 0 1
80225: PUSH
80226: LD_VAR 0 2
80230: EQUAL
80231: IFFALSE 80291
// begin for i = 1 to array1 do
80233: LD_ADDR_VAR 0 4
80237: PUSH
80238: DOUBLE
80239: LD_INT 1
80241: DEC
80242: ST_TO_ADDR
80243: LD_VAR 0 1
80247: PUSH
80248: FOR_TO
80249: IFFALSE 80287
// if array1 [ i ] <> array2 [ i ] then
80251: LD_VAR 0 1
80255: PUSH
80256: LD_VAR 0 4
80260: ARRAY
80261: PUSH
80262: LD_VAR 0 2
80266: PUSH
80267: LD_VAR 0 4
80271: ARRAY
80272: NONEQUAL
80273: IFFALSE 80285
// begin result := false ;
80275: LD_ADDR_VAR 0 3
80279: PUSH
80280: LD_INT 0
80282: ST_TO_ADDR
// break ;
80283: GO 80287
// end ;
80285: GO 80248
80287: POP
80288: POP
// end else
80289: GO 80299
// result := false ;
80291: LD_ADDR_VAR 0 3
80295: PUSH
80296: LD_INT 0
80298: ST_TO_ADDR
// end ;
80299: LD_VAR 0 3
80303: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
80304: LD_INT 0
80306: PPUSH
80307: PPUSH
// if not array1 or not array2 then
80308: LD_VAR 0 1
80312: NOT
80313: PUSH
80314: LD_VAR 0 2
80318: NOT
80319: OR
80320: IFFALSE 80324
// exit ;
80322: GO 80388
// result := true ;
80324: LD_ADDR_VAR 0 3
80328: PUSH
80329: LD_INT 1
80331: ST_TO_ADDR
// for i = 1 to array1 do
80332: LD_ADDR_VAR 0 4
80336: PUSH
80337: DOUBLE
80338: LD_INT 1
80340: DEC
80341: ST_TO_ADDR
80342: LD_VAR 0 1
80346: PUSH
80347: FOR_TO
80348: IFFALSE 80386
// if array1 [ i ] <> array2 [ i ] then
80350: LD_VAR 0 1
80354: PUSH
80355: LD_VAR 0 4
80359: ARRAY
80360: PUSH
80361: LD_VAR 0 2
80365: PUSH
80366: LD_VAR 0 4
80370: ARRAY
80371: NONEQUAL
80372: IFFALSE 80384
// begin result := false ;
80374: LD_ADDR_VAR 0 3
80378: PUSH
80379: LD_INT 0
80381: ST_TO_ADDR
// break ;
80382: GO 80386
// end ;
80384: GO 80347
80386: POP
80387: POP
// end ;
80388: LD_VAR 0 3
80392: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
80393: LD_INT 0
80395: PPUSH
80396: PPUSH
80397: PPUSH
// pom := GetBase ( fac ) ;
80398: LD_ADDR_VAR 0 5
80402: PUSH
80403: LD_VAR 0 1
80407: PPUSH
80408: CALL_OW 274
80412: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
80413: LD_ADDR_VAR 0 4
80417: PUSH
80418: LD_VAR 0 2
80422: PUSH
80423: LD_INT 1
80425: ARRAY
80426: PPUSH
80427: LD_VAR 0 2
80431: PUSH
80432: LD_INT 2
80434: ARRAY
80435: PPUSH
80436: LD_VAR 0 2
80440: PUSH
80441: LD_INT 3
80443: ARRAY
80444: PPUSH
80445: LD_VAR 0 2
80449: PUSH
80450: LD_INT 4
80452: ARRAY
80453: PPUSH
80454: CALL_OW 449
80458: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
80459: LD_ADDR_VAR 0 3
80463: PUSH
80464: LD_VAR 0 5
80468: PPUSH
80469: LD_INT 1
80471: PPUSH
80472: CALL_OW 275
80476: PUSH
80477: LD_VAR 0 4
80481: PUSH
80482: LD_INT 1
80484: ARRAY
80485: GREATEREQUAL
80486: PUSH
80487: LD_VAR 0 5
80491: PPUSH
80492: LD_INT 2
80494: PPUSH
80495: CALL_OW 275
80499: PUSH
80500: LD_VAR 0 4
80504: PUSH
80505: LD_INT 2
80507: ARRAY
80508: GREATEREQUAL
80509: AND
80510: PUSH
80511: LD_VAR 0 5
80515: PPUSH
80516: LD_INT 3
80518: PPUSH
80519: CALL_OW 275
80523: PUSH
80524: LD_VAR 0 4
80528: PUSH
80529: LD_INT 3
80531: ARRAY
80532: GREATEREQUAL
80533: AND
80534: ST_TO_ADDR
// end ;
80535: LD_VAR 0 3
80539: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
80540: LD_INT 0
80542: PPUSH
80543: PPUSH
80544: PPUSH
80545: PPUSH
// pom := GetBase ( building ) ;
80546: LD_ADDR_VAR 0 3
80550: PUSH
80551: LD_VAR 0 1
80555: PPUSH
80556: CALL_OW 274
80560: ST_TO_ADDR
// if not pom then
80561: LD_VAR 0 3
80565: NOT
80566: IFFALSE 80570
// exit ;
80568: GO 80740
// btype := GetBType ( building ) ;
80570: LD_ADDR_VAR 0 5
80574: PUSH
80575: LD_VAR 0 1
80579: PPUSH
80580: CALL_OW 266
80584: ST_TO_ADDR
// if btype = b_armoury then
80585: LD_VAR 0 5
80589: PUSH
80590: LD_INT 4
80592: EQUAL
80593: IFFALSE 80603
// btype := b_barracks ;
80595: LD_ADDR_VAR 0 5
80599: PUSH
80600: LD_INT 5
80602: ST_TO_ADDR
// if btype = b_depot then
80603: LD_VAR 0 5
80607: PUSH
80608: LD_INT 0
80610: EQUAL
80611: IFFALSE 80621
// btype := b_warehouse ;
80613: LD_ADDR_VAR 0 5
80617: PUSH
80618: LD_INT 1
80620: ST_TO_ADDR
// if btype = b_workshop then
80621: LD_VAR 0 5
80625: PUSH
80626: LD_INT 2
80628: EQUAL
80629: IFFALSE 80639
// btype := b_factory ;
80631: LD_ADDR_VAR 0 5
80635: PUSH
80636: LD_INT 3
80638: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
80639: LD_ADDR_VAR 0 4
80643: PUSH
80644: LD_VAR 0 5
80648: PPUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: CALL_OW 248
80658: PPUSH
80659: CALL_OW 450
80663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
80664: LD_ADDR_VAR 0 2
80668: PUSH
80669: LD_VAR 0 3
80673: PPUSH
80674: LD_INT 1
80676: PPUSH
80677: CALL_OW 275
80681: PUSH
80682: LD_VAR 0 4
80686: PUSH
80687: LD_INT 1
80689: ARRAY
80690: GREATEREQUAL
80691: PUSH
80692: LD_VAR 0 3
80696: PPUSH
80697: LD_INT 2
80699: PPUSH
80700: CALL_OW 275
80704: PUSH
80705: LD_VAR 0 4
80709: PUSH
80710: LD_INT 2
80712: ARRAY
80713: GREATEREQUAL
80714: AND
80715: PUSH
80716: LD_VAR 0 3
80720: PPUSH
80721: LD_INT 3
80723: PPUSH
80724: CALL_OW 275
80728: PUSH
80729: LD_VAR 0 4
80733: PUSH
80734: LD_INT 3
80736: ARRAY
80737: GREATEREQUAL
80738: AND
80739: ST_TO_ADDR
// end ;
80740: LD_VAR 0 2
80744: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
80745: LD_INT 0
80747: PPUSH
80748: PPUSH
80749: PPUSH
// pom := GetBase ( building ) ;
80750: LD_ADDR_VAR 0 4
80754: PUSH
80755: LD_VAR 0 1
80759: PPUSH
80760: CALL_OW 274
80764: ST_TO_ADDR
// if not pom then
80765: LD_VAR 0 4
80769: NOT
80770: IFFALSE 80774
// exit ;
80772: GO 80875
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
80774: LD_ADDR_VAR 0 5
80778: PUSH
80779: LD_VAR 0 2
80783: PPUSH
80784: LD_VAR 0 1
80788: PPUSH
80789: CALL_OW 248
80793: PPUSH
80794: CALL_OW 450
80798: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
80799: LD_ADDR_VAR 0 3
80803: PUSH
80804: LD_VAR 0 4
80808: PPUSH
80809: LD_INT 1
80811: PPUSH
80812: CALL_OW 275
80816: PUSH
80817: LD_VAR 0 5
80821: PUSH
80822: LD_INT 1
80824: ARRAY
80825: GREATEREQUAL
80826: PUSH
80827: LD_VAR 0 4
80831: PPUSH
80832: LD_INT 2
80834: PPUSH
80835: CALL_OW 275
80839: PUSH
80840: LD_VAR 0 5
80844: PUSH
80845: LD_INT 2
80847: ARRAY
80848: GREATEREQUAL
80849: AND
80850: PUSH
80851: LD_VAR 0 4
80855: PPUSH
80856: LD_INT 3
80858: PPUSH
80859: CALL_OW 275
80863: PUSH
80864: LD_VAR 0 5
80868: PUSH
80869: LD_INT 3
80871: ARRAY
80872: GREATEREQUAL
80873: AND
80874: ST_TO_ADDR
// end ;
80875: LD_VAR 0 3
80879: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
80880: LD_INT 0
80882: PPUSH
80883: PPUSH
80884: PPUSH
80885: PPUSH
80886: PPUSH
80887: PPUSH
80888: PPUSH
80889: PPUSH
80890: PPUSH
80891: PPUSH
80892: PPUSH
// result := false ;
80893: LD_ADDR_VAR 0 8
80897: PUSH
80898: LD_INT 0
80900: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
80901: LD_VAR 0 5
80905: NOT
80906: PUSH
80907: LD_VAR 0 1
80911: NOT
80912: OR
80913: PUSH
80914: LD_VAR 0 2
80918: NOT
80919: OR
80920: PUSH
80921: LD_VAR 0 3
80925: NOT
80926: OR
80927: IFFALSE 80931
// exit ;
80929: GO 81745
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
80931: LD_ADDR_VAR 0 14
80935: PUSH
80936: LD_VAR 0 1
80940: PPUSH
80941: LD_VAR 0 2
80945: PPUSH
80946: LD_VAR 0 3
80950: PPUSH
80951: LD_VAR 0 4
80955: PPUSH
80956: LD_VAR 0 5
80960: PUSH
80961: LD_INT 1
80963: ARRAY
80964: PPUSH
80965: CALL_OW 248
80969: PPUSH
80970: LD_INT 0
80972: PPUSH
80973: CALL 82978 0 6
80977: ST_TO_ADDR
// if not hexes then
80978: LD_VAR 0 14
80982: NOT
80983: IFFALSE 80987
// exit ;
80985: GO 81745
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80987: LD_ADDR_VAR 0 17
80991: PUSH
80992: LD_VAR 0 5
80996: PPUSH
80997: LD_INT 22
80999: PUSH
81000: LD_VAR 0 13
81004: PPUSH
81005: CALL_OW 255
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 2
81016: PUSH
81017: LD_INT 30
81019: PUSH
81020: LD_INT 0
81022: PUSH
81023: EMPTY
81024: LIST
81025: LIST
81026: PUSH
81027: LD_INT 30
81029: PUSH
81030: LD_INT 1
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: LIST
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PPUSH
81046: CALL_OW 72
81050: ST_TO_ADDR
// for i = 1 to hexes do
81051: LD_ADDR_VAR 0 9
81055: PUSH
81056: DOUBLE
81057: LD_INT 1
81059: DEC
81060: ST_TO_ADDR
81061: LD_VAR 0 14
81065: PUSH
81066: FOR_TO
81067: IFFALSE 81743
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81069: LD_ADDR_VAR 0 13
81073: PUSH
81074: LD_VAR 0 14
81078: PUSH
81079: LD_VAR 0 9
81083: ARRAY
81084: PUSH
81085: LD_INT 1
81087: ARRAY
81088: PPUSH
81089: LD_VAR 0 14
81093: PUSH
81094: LD_VAR 0 9
81098: ARRAY
81099: PUSH
81100: LD_INT 2
81102: ARRAY
81103: PPUSH
81104: CALL_OW 428
81108: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
81109: LD_VAR 0 14
81113: PUSH
81114: LD_VAR 0 9
81118: ARRAY
81119: PUSH
81120: LD_INT 1
81122: ARRAY
81123: PPUSH
81124: LD_VAR 0 14
81128: PUSH
81129: LD_VAR 0 9
81133: ARRAY
81134: PUSH
81135: LD_INT 2
81137: ARRAY
81138: PPUSH
81139: CALL_OW 351
81143: PUSH
81144: LD_VAR 0 14
81148: PUSH
81149: LD_VAR 0 9
81153: ARRAY
81154: PUSH
81155: LD_INT 1
81157: ARRAY
81158: PPUSH
81159: LD_VAR 0 14
81163: PUSH
81164: LD_VAR 0 9
81168: ARRAY
81169: PUSH
81170: LD_INT 2
81172: ARRAY
81173: PPUSH
81174: CALL_OW 488
81178: NOT
81179: OR
81180: PUSH
81181: LD_VAR 0 13
81185: PPUSH
81186: CALL_OW 247
81190: PUSH
81191: LD_INT 3
81193: EQUAL
81194: OR
81195: IFFALSE 81201
// exit ;
81197: POP
81198: POP
81199: GO 81745
// if not tmp then
81201: LD_VAR 0 13
81205: NOT
81206: IFFALSE 81210
// continue ;
81208: GO 81066
// result := true ;
81210: LD_ADDR_VAR 0 8
81214: PUSH
81215: LD_INT 1
81217: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
81218: LD_VAR 0 6
81222: PUSH
81223: LD_VAR 0 13
81227: PPUSH
81228: CALL_OW 247
81232: PUSH
81233: LD_INT 2
81235: EQUAL
81236: AND
81237: PUSH
81238: LD_VAR 0 13
81242: PPUSH
81243: CALL_OW 263
81247: PUSH
81248: LD_INT 1
81250: EQUAL
81251: AND
81252: IFFALSE 81416
// begin if IsDrivenBy ( tmp ) then
81254: LD_VAR 0 13
81258: PPUSH
81259: CALL_OW 311
81263: IFFALSE 81267
// continue ;
81265: GO 81066
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
81267: LD_VAR 0 6
81271: PPUSH
81272: LD_INT 3
81274: PUSH
81275: LD_INT 60
81277: PUSH
81278: EMPTY
81279: LIST
81280: PUSH
81281: EMPTY
81282: LIST
81283: LIST
81284: PUSH
81285: LD_INT 3
81287: PUSH
81288: LD_INT 55
81290: PUSH
81291: EMPTY
81292: LIST
81293: PUSH
81294: EMPTY
81295: LIST
81296: LIST
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PPUSH
81302: CALL_OW 72
81306: IFFALSE 81414
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
81308: LD_ADDR_VAR 0 18
81312: PUSH
81313: LD_VAR 0 6
81317: PPUSH
81318: LD_INT 3
81320: PUSH
81321: LD_INT 60
81323: PUSH
81324: EMPTY
81325: LIST
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PUSH
81331: LD_INT 3
81333: PUSH
81334: LD_INT 55
81336: PUSH
81337: EMPTY
81338: LIST
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PPUSH
81348: CALL_OW 72
81352: PUSH
81353: LD_INT 1
81355: ARRAY
81356: ST_TO_ADDR
// if IsInUnit ( driver ) then
81357: LD_VAR 0 18
81361: PPUSH
81362: CALL_OW 310
81366: IFFALSE 81377
// ComExit ( driver ) ;
81368: LD_VAR 0 18
81372: PPUSH
81373: CALL 106757 0 1
// AddComEnterUnit ( driver , tmp ) ;
81377: LD_VAR 0 18
81381: PPUSH
81382: LD_VAR 0 13
81386: PPUSH
81387: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
81391: LD_VAR 0 18
81395: PPUSH
81396: LD_VAR 0 7
81400: PPUSH
81401: CALL_OW 173
// AddComExitVehicle ( driver ) ;
81405: LD_VAR 0 18
81409: PPUSH
81410: CALL_OW 181
// end ; continue ;
81414: GO 81066
// end ; if not cleaners or not tmp in cleaners then
81416: LD_VAR 0 6
81420: NOT
81421: PUSH
81422: LD_VAR 0 13
81426: PUSH
81427: LD_VAR 0 6
81431: IN
81432: NOT
81433: OR
81434: IFFALSE 81741
// begin if dep then
81436: LD_VAR 0 17
81440: IFFALSE 81576
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
81442: LD_ADDR_VAR 0 16
81446: PUSH
81447: LD_VAR 0 17
81451: PUSH
81452: LD_INT 1
81454: ARRAY
81455: PPUSH
81456: CALL_OW 250
81460: PPUSH
81461: LD_VAR 0 17
81465: PUSH
81466: LD_INT 1
81468: ARRAY
81469: PPUSH
81470: CALL_OW 254
81474: PPUSH
81475: LD_INT 5
81477: PPUSH
81478: CALL_OW 272
81482: PUSH
81483: LD_VAR 0 17
81487: PUSH
81488: LD_INT 1
81490: ARRAY
81491: PPUSH
81492: CALL_OW 251
81496: PPUSH
81497: LD_VAR 0 17
81501: PUSH
81502: LD_INT 1
81504: ARRAY
81505: PPUSH
81506: CALL_OW 254
81510: PPUSH
81511: LD_INT 5
81513: PPUSH
81514: CALL_OW 273
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
81523: LD_VAR 0 16
81527: PUSH
81528: LD_INT 1
81530: ARRAY
81531: PPUSH
81532: LD_VAR 0 16
81536: PUSH
81537: LD_INT 2
81539: ARRAY
81540: PPUSH
81541: CALL_OW 488
81545: IFFALSE 81576
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
81547: LD_VAR 0 13
81551: PPUSH
81552: LD_VAR 0 16
81556: PUSH
81557: LD_INT 1
81559: ARRAY
81560: PPUSH
81561: LD_VAR 0 16
81565: PUSH
81566: LD_INT 2
81568: ARRAY
81569: PPUSH
81570: CALL_OW 111
// continue ;
81574: GO 81066
// end ; end ; r := GetDir ( tmp ) ;
81576: LD_ADDR_VAR 0 15
81580: PUSH
81581: LD_VAR 0 13
81585: PPUSH
81586: CALL_OW 254
81590: ST_TO_ADDR
// if r = 5 then
81591: LD_VAR 0 15
81595: PUSH
81596: LD_INT 5
81598: EQUAL
81599: IFFALSE 81609
// r := 0 ;
81601: LD_ADDR_VAR 0 15
81605: PUSH
81606: LD_INT 0
81608: ST_TO_ADDR
// for j = r to 5 do
81609: LD_ADDR_VAR 0 10
81613: PUSH
81614: DOUBLE
81615: LD_VAR 0 15
81619: DEC
81620: ST_TO_ADDR
81621: LD_INT 5
81623: PUSH
81624: FOR_TO
81625: IFFALSE 81739
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
81627: LD_ADDR_VAR 0 11
81631: PUSH
81632: LD_VAR 0 13
81636: PPUSH
81637: CALL_OW 250
81641: PPUSH
81642: LD_VAR 0 10
81646: PPUSH
81647: LD_INT 2
81649: PPUSH
81650: CALL_OW 272
81654: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
81655: LD_ADDR_VAR 0 12
81659: PUSH
81660: LD_VAR 0 13
81664: PPUSH
81665: CALL_OW 251
81669: PPUSH
81670: LD_VAR 0 10
81674: PPUSH
81675: LD_INT 2
81677: PPUSH
81678: CALL_OW 273
81682: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
81683: LD_VAR 0 11
81687: PPUSH
81688: LD_VAR 0 12
81692: PPUSH
81693: CALL_OW 488
81697: PUSH
81698: LD_VAR 0 11
81702: PPUSH
81703: LD_VAR 0 12
81707: PPUSH
81708: CALL_OW 428
81712: NOT
81713: AND
81714: IFFALSE 81737
// begin ComMoveXY ( tmp , _x , _y ) ;
81716: LD_VAR 0 13
81720: PPUSH
81721: LD_VAR 0 11
81725: PPUSH
81726: LD_VAR 0 12
81730: PPUSH
81731: CALL_OW 111
// break ;
81735: GO 81739
// end ; end ;
81737: GO 81624
81739: POP
81740: POP
// end ; end ;
81741: GO 81066
81743: POP
81744: POP
// end ;
81745: LD_VAR 0 8
81749: RET
// export function BuildingTechInvented ( side , btype ) ; begin
81750: LD_INT 0
81752: PPUSH
// result := true ;
81753: LD_ADDR_VAR 0 3
81757: PUSH
81758: LD_INT 1
81760: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
81761: LD_VAR 0 2
81765: PUSH
81766: LD_INT 24
81768: DOUBLE
81769: EQUAL
81770: IFTRUE 81780
81772: LD_INT 33
81774: DOUBLE
81775: EQUAL
81776: IFTRUE 81780
81778: GO 81805
81780: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
81781: LD_ADDR_VAR 0 3
81785: PUSH
81786: LD_INT 32
81788: PPUSH
81789: LD_VAR 0 1
81793: PPUSH
81794: CALL_OW 321
81798: PUSH
81799: LD_INT 2
81801: EQUAL
81802: ST_TO_ADDR
81803: GO 82121
81805: LD_INT 20
81807: DOUBLE
81808: EQUAL
81809: IFTRUE 81813
81811: GO 81838
81813: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
81814: LD_ADDR_VAR 0 3
81818: PUSH
81819: LD_INT 6
81821: PPUSH
81822: LD_VAR 0 1
81826: PPUSH
81827: CALL_OW 321
81831: PUSH
81832: LD_INT 2
81834: EQUAL
81835: ST_TO_ADDR
81836: GO 82121
81838: LD_INT 22
81840: DOUBLE
81841: EQUAL
81842: IFTRUE 81852
81844: LD_INT 36
81846: DOUBLE
81847: EQUAL
81848: IFTRUE 81852
81850: GO 81877
81852: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
81853: LD_ADDR_VAR 0 3
81857: PUSH
81858: LD_INT 15
81860: PPUSH
81861: LD_VAR 0 1
81865: PPUSH
81866: CALL_OW 321
81870: PUSH
81871: LD_INT 2
81873: EQUAL
81874: ST_TO_ADDR
81875: GO 82121
81877: LD_INT 30
81879: DOUBLE
81880: EQUAL
81881: IFTRUE 81885
81883: GO 81910
81885: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
81886: LD_ADDR_VAR 0 3
81890: PUSH
81891: LD_INT 20
81893: PPUSH
81894: LD_VAR 0 1
81898: PPUSH
81899: CALL_OW 321
81903: PUSH
81904: LD_INT 2
81906: EQUAL
81907: ST_TO_ADDR
81908: GO 82121
81910: LD_INT 28
81912: DOUBLE
81913: EQUAL
81914: IFTRUE 81924
81916: LD_INT 21
81918: DOUBLE
81919: EQUAL
81920: IFTRUE 81924
81922: GO 81949
81924: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
81925: LD_ADDR_VAR 0 3
81929: PUSH
81930: LD_INT 21
81932: PPUSH
81933: LD_VAR 0 1
81937: PPUSH
81938: CALL_OW 321
81942: PUSH
81943: LD_INT 2
81945: EQUAL
81946: ST_TO_ADDR
81947: GO 82121
81949: LD_INT 16
81951: DOUBLE
81952: EQUAL
81953: IFTRUE 81957
81955: GO 81982
81957: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
81958: LD_ADDR_VAR 0 3
81962: PUSH
81963: LD_INT 84
81965: PPUSH
81966: LD_VAR 0 1
81970: PPUSH
81971: CALL_OW 321
81975: PUSH
81976: LD_INT 2
81978: EQUAL
81979: ST_TO_ADDR
81980: GO 82121
81982: LD_INT 19
81984: DOUBLE
81985: EQUAL
81986: IFTRUE 81996
81988: LD_INT 23
81990: DOUBLE
81991: EQUAL
81992: IFTRUE 81996
81994: GO 82021
81996: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
81997: LD_ADDR_VAR 0 3
82001: PUSH
82002: LD_INT 83
82004: PPUSH
82005: LD_VAR 0 1
82009: PPUSH
82010: CALL_OW 321
82014: PUSH
82015: LD_INT 2
82017: EQUAL
82018: ST_TO_ADDR
82019: GO 82121
82021: LD_INT 17
82023: DOUBLE
82024: EQUAL
82025: IFTRUE 82029
82027: GO 82054
82029: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
82030: LD_ADDR_VAR 0 3
82034: PUSH
82035: LD_INT 39
82037: PPUSH
82038: LD_VAR 0 1
82042: PPUSH
82043: CALL_OW 321
82047: PUSH
82048: LD_INT 2
82050: EQUAL
82051: ST_TO_ADDR
82052: GO 82121
82054: LD_INT 18
82056: DOUBLE
82057: EQUAL
82058: IFTRUE 82062
82060: GO 82087
82062: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
82063: LD_ADDR_VAR 0 3
82067: PUSH
82068: LD_INT 40
82070: PPUSH
82071: LD_VAR 0 1
82075: PPUSH
82076: CALL_OW 321
82080: PUSH
82081: LD_INT 2
82083: EQUAL
82084: ST_TO_ADDR
82085: GO 82121
82087: LD_INT 27
82089: DOUBLE
82090: EQUAL
82091: IFTRUE 82095
82093: GO 82120
82095: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
82096: LD_ADDR_VAR 0 3
82100: PUSH
82101: LD_INT 35
82103: PPUSH
82104: LD_VAR 0 1
82108: PPUSH
82109: CALL_OW 321
82113: PUSH
82114: LD_INT 2
82116: EQUAL
82117: ST_TO_ADDR
82118: GO 82121
82120: POP
// end ;
82121: LD_VAR 0 3
82125: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
82126: LD_INT 0
82128: PPUSH
82129: PPUSH
82130: PPUSH
82131: PPUSH
82132: PPUSH
82133: PPUSH
82134: PPUSH
82135: PPUSH
82136: PPUSH
82137: PPUSH
82138: PPUSH
// result := false ;
82139: LD_ADDR_VAR 0 6
82143: PUSH
82144: LD_INT 0
82146: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
82147: LD_VAR 0 1
82151: NOT
82152: PUSH
82153: LD_VAR 0 1
82157: PPUSH
82158: CALL_OW 266
82162: PUSH
82163: LD_INT 0
82165: PUSH
82166: LD_INT 1
82168: PUSH
82169: EMPTY
82170: LIST
82171: LIST
82172: IN
82173: NOT
82174: OR
82175: PUSH
82176: LD_VAR 0 2
82180: NOT
82181: OR
82182: PUSH
82183: LD_VAR 0 5
82187: PUSH
82188: LD_INT 0
82190: PUSH
82191: LD_INT 1
82193: PUSH
82194: LD_INT 2
82196: PUSH
82197: LD_INT 3
82199: PUSH
82200: LD_INT 4
82202: PUSH
82203: LD_INT 5
82205: PUSH
82206: EMPTY
82207: LIST
82208: LIST
82209: LIST
82210: LIST
82211: LIST
82212: LIST
82213: IN
82214: NOT
82215: OR
82216: PUSH
82217: LD_VAR 0 3
82221: PPUSH
82222: LD_VAR 0 4
82226: PPUSH
82227: CALL_OW 488
82231: NOT
82232: OR
82233: IFFALSE 82237
// exit ;
82235: GO 82973
// side := GetSide ( depot ) ;
82237: LD_ADDR_VAR 0 9
82241: PUSH
82242: LD_VAR 0 1
82246: PPUSH
82247: CALL_OW 255
82251: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
82252: LD_VAR 0 9
82256: PPUSH
82257: LD_VAR 0 2
82261: PPUSH
82262: CALL 81750 0 2
82266: NOT
82267: IFFALSE 82271
// exit ;
82269: GO 82973
// pom := GetBase ( depot ) ;
82271: LD_ADDR_VAR 0 10
82275: PUSH
82276: LD_VAR 0 1
82280: PPUSH
82281: CALL_OW 274
82285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82286: LD_ADDR_VAR 0 11
82290: PUSH
82291: LD_VAR 0 2
82295: PPUSH
82296: LD_VAR 0 1
82300: PPUSH
82301: CALL_OW 248
82305: PPUSH
82306: CALL_OW 450
82310: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
82311: LD_VAR 0 10
82315: PPUSH
82316: LD_INT 1
82318: PPUSH
82319: CALL_OW 275
82323: PUSH
82324: LD_VAR 0 11
82328: PUSH
82329: LD_INT 1
82331: ARRAY
82332: GREATEREQUAL
82333: PUSH
82334: LD_VAR 0 10
82338: PPUSH
82339: LD_INT 2
82341: PPUSH
82342: CALL_OW 275
82346: PUSH
82347: LD_VAR 0 11
82351: PUSH
82352: LD_INT 2
82354: ARRAY
82355: GREATEREQUAL
82356: AND
82357: PUSH
82358: LD_VAR 0 10
82362: PPUSH
82363: LD_INT 3
82365: PPUSH
82366: CALL_OW 275
82370: PUSH
82371: LD_VAR 0 11
82375: PUSH
82376: LD_INT 3
82378: ARRAY
82379: GREATEREQUAL
82380: AND
82381: NOT
82382: IFFALSE 82386
// exit ;
82384: GO 82973
// if GetBType ( depot ) = b_depot then
82386: LD_VAR 0 1
82390: PPUSH
82391: CALL_OW 266
82395: PUSH
82396: LD_INT 0
82398: EQUAL
82399: IFFALSE 82411
// dist := 28 else
82401: LD_ADDR_VAR 0 14
82405: PUSH
82406: LD_INT 28
82408: ST_TO_ADDR
82409: GO 82419
// dist := 36 ;
82411: LD_ADDR_VAR 0 14
82415: PUSH
82416: LD_INT 36
82418: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
82419: LD_VAR 0 1
82423: PPUSH
82424: LD_VAR 0 3
82428: PPUSH
82429: LD_VAR 0 4
82433: PPUSH
82434: CALL_OW 297
82438: PUSH
82439: LD_VAR 0 14
82443: GREATER
82444: IFFALSE 82448
// exit ;
82446: GO 82973
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
82448: LD_ADDR_VAR 0 12
82452: PUSH
82453: LD_VAR 0 2
82457: PPUSH
82458: LD_VAR 0 3
82462: PPUSH
82463: LD_VAR 0 4
82467: PPUSH
82468: LD_VAR 0 5
82472: PPUSH
82473: LD_VAR 0 1
82477: PPUSH
82478: CALL_OW 248
82482: PPUSH
82483: LD_INT 0
82485: PPUSH
82486: CALL 82978 0 6
82490: ST_TO_ADDR
// if not hexes then
82491: LD_VAR 0 12
82495: NOT
82496: IFFALSE 82500
// exit ;
82498: GO 82973
// hex := GetHexInfo ( x , y ) ;
82500: LD_ADDR_VAR 0 15
82504: PUSH
82505: LD_VAR 0 3
82509: PPUSH
82510: LD_VAR 0 4
82514: PPUSH
82515: CALL_OW 546
82519: ST_TO_ADDR
// if hex [ 1 ] then
82520: LD_VAR 0 15
82524: PUSH
82525: LD_INT 1
82527: ARRAY
82528: IFFALSE 82532
// exit ;
82530: GO 82973
// height := hex [ 2 ] ;
82532: LD_ADDR_VAR 0 13
82536: PUSH
82537: LD_VAR 0 15
82541: PUSH
82542: LD_INT 2
82544: ARRAY
82545: ST_TO_ADDR
// for i = 1 to hexes do
82546: LD_ADDR_VAR 0 7
82550: PUSH
82551: DOUBLE
82552: LD_INT 1
82554: DEC
82555: ST_TO_ADDR
82556: LD_VAR 0 12
82560: PUSH
82561: FOR_TO
82562: IFFALSE 82892
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
82564: LD_VAR 0 12
82568: PUSH
82569: LD_VAR 0 7
82573: ARRAY
82574: PUSH
82575: LD_INT 1
82577: ARRAY
82578: PPUSH
82579: LD_VAR 0 12
82583: PUSH
82584: LD_VAR 0 7
82588: ARRAY
82589: PUSH
82590: LD_INT 2
82592: ARRAY
82593: PPUSH
82594: CALL_OW 488
82598: NOT
82599: PUSH
82600: LD_VAR 0 12
82604: PUSH
82605: LD_VAR 0 7
82609: ARRAY
82610: PUSH
82611: LD_INT 1
82613: ARRAY
82614: PPUSH
82615: LD_VAR 0 12
82619: PUSH
82620: LD_VAR 0 7
82624: ARRAY
82625: PUSH
82626: LD_INT 2
82628: ARRAY
82629: PPUSH
82630: CALL_OW 428
82634: PUSH
82635: LD_INT 0
82637: GREATER
82638: OR
82639: PUSH
82640: LD_VAR 0 12
82644: PUSH
82645: LD_VAR 0 7
82649: ARRAY
82650: PUSH
82651: LD_INT 1
82653: ARRAY
82654: PPUSH
82655: LD_VAR 0 12
82659: PUSH
82660: LD_VAR 0 7
82664: ARRAY
82665: PUSH
82666: LD_INT 2
82668: ARRAY
82669: PPUSH
82670: CALL_OW 351
82674: OR
82675: IFFALSE 82681
// exit ;
82677: POP
82678: POP
82679: GO 82973
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82681: LD_ADDR_VAR 0 8
82685: PUSH
82686: LD_VAR 0 12
82690: PUSH
82691: LD_VAR 0 7
82695: ARRAY
82696: PUSH
82697: LD_INT 1
82699: ARRAY
82700: PPUSH
82701: LD_VAR 0 12
82705: PUSH
82706: LD_VAR 0 7
82710: ARRAY
82711: PUSH
82712: LD_INT 2
82714: ARRAY
82715: PPUSH
82716: CALL_OW 546
82720: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
82721: LD_VAR 0 8
82725: PUSH
82726: LD_INT 1
82728: ARRAY
82729: PUSH
82730: LD_VAR 0 8
82734: PUSH
82735: LD_INT 2
82737: ARRAY
82738: PUSH
82739: LD_VAR 0 13
82743: PUSH
82744: LD_INT 2
82746: PLUS
82747: GREATER
82748: OR
82749: PUSH
82750: LD_VAR 0 8
82754: PUSH
82755: LD_INT 2
82757: ARRAY
82758: PUSH
82759: LD_VAR 0 13
82763: PUSH
82764: LD_INT 2
82766: MINUS
82767: LESS
82768: OR
82769: PUSH
82770: LD_VAR 0 8
82774: PUSH
82775: LD_INT 3
82777: ARRAY
82778: PUSH
82779: LD_INT 0
82781: PUSH
82782: LD_INT 8
82784: PUSH
82785: LD_INT 9
82787: PUSH
82788: LD_INT 10
82790: PUSH
82791: LD_INT 11
82793: PUSH
82794: LD_INT 12
82796: PUSH
82797: LD_INT 13
82799: PUSH
82800: LD_INT 16
82802: PUSH
82803: LD_INT 17
82805: PUSH
82806: LD_INT 18
82808: PUSH
82809: LD_INT 19
82811: PUSH
82812: LD_INT 20
82814: PUSH
82815: LD_INT 21
82817: PUSH
82818: EMPTY
82819: LIST
82820: LIST
82821: LIST
82822: LIST
82823: LIST
82824: LIST
82825: LIST
82826: LIST
82827: LIST
82828: LIST
82829: LIST
82830: LIST
82831: LIST
82832: IN
82833: NOT
82834: OR
82835: PUSH
82836: LD_VAR 0 8
82840: PUSH
82841: LD_INT 5
82843: ARRAY
82844: NOT
82845: OR
82846: PUSH
82847: LD_VAR 0 8
82851: PUSH
82852: LD_INT 6
82854: ARRAY
82855: PUSH
82856: LD_INT 1
82858: PUSH
82859: LD_INT 2
82861: PUSH
82862: LD_INT 7
82864: PUSH
82865: LD_INT 9
82867: PUSH
82868: LD_INT 10
82870: PUSH
82871: LD_INT 11
82873: PUSH
82874: EMPTY
82875: LIST
82876: LIST
82877: LIST
82878: LIST
82879: LIST
82880: LIST
82881: IN
82882: NOT
82883: OR
82884: IFFALSE 82890
// exit ;
82886: POP
82887: POP
82888: GO 82973
// end ;
82890: GO 82561
82892: POP
82893: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
82894: LD_VAR 0 9
82898: PPUSH
82899: LD_VAR 0 3
82903: PPUSH
82904: LD_VAR 0 4
82908: PPUSH
82909: LD_INT 20
82911: PPUSH
82912: CALL 74916 0 4
82916: PUSH
82917: LD_INT 4
82919: ARRAY
82920: IFFALSE 82924
// exit ;
82922: GO 82973
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
82924: LD_VAR 0 2
82928: PUSH
82929: LD_INT 29
82931: PUSH
82932: LD_INT 30
82934: PUSH
82935: EMPTY
82936: LIST
82937: LIST
82938: IN
82939: PUSH
82940: LD_VAR 0 3
82944: PPUSH
82945: LD_VAR 0 4
82949: PPUSH
82950: LD_VAR 0 9
82954: PPUSH
82955: CALL_OW 440
82959: NOT
82960: AND
82961: IFFALSE 82965
// exit ;
82963: GO 82973
// result := true ;
82965: LD_ADDR_VAR 0 6
82969: PUSH
82970: LD_INT 1
82972: ST_TO_ADDR
// end ;
82973: LD_VAR 0 6
82977: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
82978: LD_INT 0
82980: PPUSH
82981: PPUSH
82982: PPUSH
82983: PPUSH
82984: PPUSH
82985: PPUSH
82986: PPUSH
82987: PPUSH
82988: PPUSH
82989: PPUSH
82990: PPUSH
82991: PPUSH
82992: PPUSH
82993: PPUSH
82994: PPUSH
82995: PPUSH
82996: PPUSH
82997: PPUSH
82998: PPUSH
82999: PPUSH
83000: PPUSH
83001: PPUSH
83002: PPUSH
83003: PPUSH
83004: PPUSH
83005: PPUSH
83006: PPUSH
83007: PPUSH
83008: PPUSH
83009: PPUSH
83010: PPUSH
83011: PPUSH
83012: PPUSH
83013: PPUSH
83014: PPUSH
83015: PPUSH
83016: PPUSH
83017: PPUSH
83018: PPUSH
83019: PPUSH
83020: PPUSH
83021: PPUSH
83022: PPUSH
83023: PPUSH
83024: PPUSH
83025: PPUSH
83026: PPUSH
83027: PPUSH
83028: PPUSH
83029: PPUSH
83030: PPUSH
83031: PPUSH
83032: PPUSH
83033: PPUSH
83034: PPUSH
83035: PPUSH
83036: PPUSH
83037: PPUSH
// result = [ ] ;
83038: LD_ADDR_VAR 0 7
83042: PUSH
83043: EMPTY
83044: ST_TO_ADDR
// temp_list = [ ] ;
83045: LD_ADDR_VAR 0 9
83049: PUSH
83050: EMPTY
83051: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
83052: LD_VAR 0 4
83056: PUSH
83057: LD_INT 0
83059: PUSH
83060: LD_INT 1
83062: PUSH
83063: LD_INT 2
83065: PUSH
83066: LD_INT 3
83068: PUSH
83069: LD_INT 4
83071: PUSH
83072: LD_INT 5
83074: PUSH
83075: EMPTY
83076: LIST
83077: LIST
83078: LIST
83079: LIST
83080: LIST
83081: LIST
83082: IN
83083: NOT
83084: PUSH
83085: LD_VAR 0 1
83089: PUSH
83090: LD_INT 0
83092: PUSH
83093: LD_INT 1
83095: PUSH
83096: EMPTY
83097: LIST
83098: LIST
83099: IN
83100: PUSH
83101: LD_VAR 0 5
83105: PUSH
83106: LD_INT 1
83108: PUSH
83109: LD_INT 2
83111: PUSH
83112: LD_INT 3
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: LIST
83119: IN
83120: NOT
83121: AND
83122: OR
83123: IFFALSE 83127
// exit ;
83125: GO 101518
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
83127: LD_VAR 0 1
83131: PUSH
83132: LD_INT 6
83134: PUSH
83135: LD_INT 7
83137: PUSH
83138: LD_INT 8
83140: PUSH
83141: LD_INT 13
83143: PUSH
83144: LD_INT 12
83146: PUSH
83147: LD_INT 15
83149: PUSH
83150: LD_INT 11
83152: PUSH
83153: LD_INT 14
83155: PUSH
83156: LD_INT 10
83158: PUSH
83159: EMPTY
83160: LIST
83161: LIST
83162: LIST
83163: LIST
83164: LIST
83165: LIST
83166: LIST
83167: LIST
83168: LIST
83169: IN
83170: IFFALSE 83180
// btype = b_lab ;
83172: LD_ADDR_VAR 0 1
83176: PUSH
83177: LD_INT 6
83179: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
83180: LD_VAR 0 6
83184: PUSH
83185: LD_INT 0
83187: PUSH
83188: LD_INT 1
83190: PUSH
83191: LD_INT 2
83193: PUSH
83194: EMPTY
83195: LIST
83196: LIST
83197: LIST
83198: IN
83199: NOT
83200: PUSH
83201: LD_VAR 0 1
83205: PUSH
83206: LD_INT 0
83208: PUSH
83209: LD_INT 1
83211: PUSH
83212: LD_INT 2
83214: PUSH
83215: LD_INT 3
83217: PUSH
83218: LD_INT 6
83220: PUSH
83221: LD_INT 36
83223: PUSH
83224: LD_INT 4
83226: PUSH
83227: LD_INT 5
83229: PUSH
83230: LD_INT 31
83232: PUSH
83233: LD_INT 32
83235: PUSH
83236: LD_INT 33
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: LIST
83243: LIST
83244: LIST
83245: LIST
83246: LIST
83247: LIST
83248: LIST
83249: LIST
83250: LIST
83251: IN
83252: NOT
83253: PUSH
83254: LD_VAR 0 6
83258: PUSH
83259: LD_INT 1
83261: EQUAL
83262: AND
83263: OR
83264: PUSH
83265: LD_VAR 0 1
83269: PUSH
83270: LD_INT 2
83272: PUSH
83273: LD_INT 3
83275: PUSH
83276: EMPTY
83277: LIST
83278: LIST
83279: IN
83280: NOT
83281: PUSH
83282: LD_VAR 0 6
83286: PUSH
83287: LD_INT 2
83289: EQUAL
83290: AND
83291: OR
83292: IFFALSE 83302
// mode = 0 ;
83294: LD_ADDR_VAR 0 6
83298: PUSH
83299: LD_INT 0
83301: ST_TO_ADDR
// case mode of 0 :
83302: LD_VAR 0 6
83306: PUSH
83307: LD_INT 0
83309: DOUBLE
83310: EQUAL
83311: IFTRUE 83315
83313: GO 94768
83315: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83316: LD_ADDR_VAR 0 11
83320: PUSH
83321: LD_INT 0
83323: PUSH
83324: LD_INT 0
83326: PUSH
83327: EMPTY
83328: LIST
83329: LIST
83330: PUSH
83331: LD_INT 0
83333: PUSH
83334: LD_INT 1
83336: NEG
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: PUSH
83342: LD_INT 1
83344: PUSH
83345: LD_INT 0
83347: PUSH
83348: EMPTY
83349: LIST
83350: LIST
83351: PUSH
83352: LD_INT 1
83354: PUSH
83355: LD_INT 1
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: PUSH
83362: LD_INT 0
83364: PUSH
83365: LD_INT 1
83367: PUSH
83368: EMPTY
83369: LIST
83370: LIST
83371: PUSH
83372: LD_INT 1
83374: NEG
83375: PUSH
83376: LD_INT 0
83378: PUSH
83379: EMPTY
83380: LIST
83381: LIST
83382: PUSH
83383: LD_INT 1
83385: NEG
83386: PUSH
83387: LD_INT 1
83389: NEG
83390: PUSH
83391: EMPTY
83392: LIST
83393: LIST
83394: PUSH
83395: LD_INT 1
83397: NEG
83398: PUSH
83399: LD_INT 2
83401: NEG
83402: PUSH
83403: EMPTY
83404: LIST
83405: LIST
83406: PUSH
83407: LD_INT 0
83409: PUSH
83410: LD_INT 2
83412: NEG
83413: PUSH
83414: EMPTY
83415: LIST
83416: LIST
83417: PUSH
83418: LD_INT 1
83420: PUSH
83421: LD_INT 1
83423: NEG
83424: PUSH
83425: EMPTY
83426: LIST
83427: LIST
83428: PUSH
83429: LD_INT 1
83431: PUSH
83432: LD_INT 2
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PUSH
83439: LD_INT 0
83441: PUSH
83442: LD_INT 2
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: LD_INT 1
83451: NEG
83452: PUSH
83453: LD_INT 1
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: PUSH
83460: LD_INT 1
83462: PUSH
83463: LD_INT 3
83465: PUSH
83466: EMPTY
83467: LIST
83468: LIST
83469: PUSH
83470: LD_INT 0
83472: PUSH
83473: LD_INT 3
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: PUSH
83480: LD_INT 1
83482: NEG
83483: PUSH
83484: LD_INT 2
83486: PUSH
83487: EMPTY
83488: LIST
83489: LIST
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: LIST
83497: LIST
83498: LIST
83499: LIST
83500: LIST
83501: LIST
83502: LIST
83503: LIST
83504: LIST
83505: LIST
83506: LIST
83507: LIST
83508: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83509: LD_ADDR_VAR 0 12
83513: PUSH
83514: LD_INT 0
83516: PUSH
83517: LD_INT 0
83519: PUSH
83520: EMPTY
83521: LIST
83522: LIST
83523: PUSH
83524: LD_INT 0
83526: PUSH
83527: LD_INT 1
83529: NEG
83530: PUSH
83531: EMPTY
83532: LIST
83533: LIST
83534: PUSH
83535: LD_INT 1
83537: PUSH
83538: LD_INT 0
83540: PUSH
83541: EMPTY
83542: LIST
83543: LIST
83544: PUSH
83545: LD_INT 1
83547: PUSH
83548: LD_INT 1
83550: PUSH
83551: EMPTY
83552: LIST
83553: LIST
83554: PUSH
83555: LD_INT 0
83557: PUSH
83558: LD_INT 1
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PUSH
83565: LD_INT 1
83567: NEG
83568: PUSH
83569: LD_INT 0
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: PUSH
83576: LD_INT 1
83578: NEG
83579: PUSH
83580: LD_INT 1
83582: NEG
83583: PUSH
83584: EMPTY
83585: LIST
83586: LIST
83587: PUSH
83588: LD_INT 1
83590: PUSH
83591: LD_INT 1
83593: NEG
83594: PUSH
83595: EMPTY
83596: LIST
83597: LIST
83598: PUSH
83599: LD_INT 2
83601: PUSH
83602: LD_INT 0
83604: PUSH
83605: EMPTY
83606: LIST
83607: LIST
83608: PUSH
83609: LD_INT 2
83611: PUSH
83612: LD_INT 1
83614: PUSH
83615: EMPTY
83616: LIST
83617: LIST
83618: PUSH
83619: LD_INT 1
83621: NEG
83622: PUSH
83623: LD_INT 1
83625: PUSH
83626: EMPTY
83627: LIST
83628: LIST
83629: PUSH
83630: LD_INT 2
83632: NEG
83633: PUSH
83634: LD_INT 0
83636: PUSH
83637: EMPTY
83638: LIST
83639: LIST
83640: PUSH
83641: LD_INT 2
83643: NEG
83644: PUSH
83645: LD_INT 1
83647: NEG
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 2
83655: NEG
83656: PUSH
83657: LD_INT 1
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: LD_INT 3
83666: NEG
83667: PUSH
83668: LD_INT 0
83670: PUSH
83671: EMPTY
83672: LIST
83673: LIST
83674: PUSH
83675: LD_INT 3
83677: NEG
83678: PUSH
83679: LD_INT 1
83681: NEG
83682: PUSH
83683: EMPTY
83684: LIST
83685: LIST
83686: PUSH
83687: EMPTY
83688: LIST
83689: LIST
83690: LIST
83691: LIST
83692: LIST
83693: LIST
83694: LIST
83695: LIST
83696: LIST
83697: LIST
83698: LIST
83699: LIST
83700: LIST
83701: LIST
83702: LIST
83703: LIST
83704: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83705: LD_ADDR_VAR 0 13
83709: PUSH
83710: LD_INT 0
83712: PUSH
83713: LD_INT 0
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: PUSH
83720: LD_INT 0
83722: PUSH
83723: LD_INT 1
83725: NEG
83726: PUSH
83727: EMPTY
83728: LIST
83729: LIST
83730: PUSH
83731: LD_INT 1
83733: PUSH
83734: LD_INT 0
83736: PUSH
83737: EMPTY
83738: LIST
83739: LIST
83740: PUSH
83741: LD_INT 1
83743: PUSH
83744: LD_INT 1
83746: PUSH
83747: EMPTY
83748: LIST
83749: LIST
83750: PUSH
83751: LD_INT 0
83753: PUSH
83754: LD_INT 1
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: PUSH
83761: LD_INT 1
83763: NEG
83764: PUSH
83765: LD_INT 0
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: PUSH
83772: LD_INT 1
83774: NEG
83775: PUSH
83776: LD_INT 1
83778: NEG
83779: PUSH
83780: EMPTY
83781: LIST
83782: LIST
83783: PUSH
83784: LD_INT 1
83786: NEG
83787: PUSH
83788: LD_INT 2
83790: NEG
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: PUSH
83796: LD_INT 2
83798: PUSH
83799: LD_INT 1
83801: PUSH
83802: EMPTY
83803: LIST
83804: LIST
83805: PUSH
83806: LD_INT 2
83808: PUSH
83809: LD_INT 2
83811: PUSH
83812: EMPTY
83813: LIST
83814: LIST
83815: PUSH
83816: LD_INT 1
83818: PUSH
83819: LD_INT 2
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: PUSH
83826: LD_INT 2
83828: NEG
83829: PUSH
83830: LD_INT 1
83832: NEG
83833: PUSH
83834: EMPTY
83835: LIST
83836: LIST
83837: PUSH
83838: LD_INT 2
83840: NEG
83841: PUSH
83842: LD_INT 2
83844: NEG
83845: PUSH
83846: EMPTY
83847: LIST
83848: LIST
83849: PUSH
83850: LD_INT 2
83852: NEG
83853: PUSH
83854: LD_INT 3
83856: NEG
83857: PUSH
83858: EMPTY
83859: LIST
83860: LIST
83861: PUSH
83862: LD_INT 3
83864: NEG
83865: PUSH
83866: LD_INT 2
83868: NEG
83869: PUSH
83870: EMPTY
83871: LIST
83872: LIST
83873: PUSH
83874: LD_INT 3
83876: NEG
83877: PUSH
83878: LD_INT 3
83880: NEG
83881: PUSH
83882: EMPTY
83883: LIST
83884: LIST
83885: PUSH
83886: EMPTY
83887: LIST
83888: LIST
83889: LIST
83890: LIST
83891: LIST
83892: LIST
83893: LIST
83894: LIST
83895: LIST
83896: LIST
83897: LIST
83898: LIST
83899: LIST
83900: LIST
83901: LIST
83902: LIST
83903: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83904: LD_ADDR_VAR 0 14
83908: PUSH
83909: LD_INT 0
83911: PUSH
83912: LD_INT 0
83914: PUSH
83915: EMPTY
83916: LIST
83917: LIST
83918: PUSH
83919: LD_INT 0
83921: PUSH
83922: LD_INT 1
83924: NEG
83925: PUSH
83926: EMPTY
83927: LIST
83928: LIST
83929: PUSH
83930: LD_INT 1
83932: PUSH
83933: LD_INT 0
83935: PUSH
83936: EMPTY
83937: LIST
83938: LIST
83939: PUSH
83940: LD_INT 1
83942: PUSH
83943: LD_INT 1
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: PUSH
83950: LD_INT 0
83952: PUSH
83953: LD_INT 1
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: PUSH
83960: LD_INT 1
83962: NEG
83963: PUSH
83964: LD_INT 0
83966: PUSH
83967: EMPTY
83968: LIST
83969: LIST
83970: PUSH
83971: LD_INT 1
83973: NEG
83974: PUSH
83975: LD_INT 1
83977: NEG
83978: PUSH
83979: EMPTY
83980: LIST
83981: LIST
83982: PUSH
83983: LD_INT 1
83985: NEG
83986: PUSH
83987: LD_INT 2
83989: NEG
83990: PUSH
83991: EMPTY
83992: LIST
83993: LIST
83994: PUSH
83995: LD_INT 0
83997: PUSH
83998: LD_INT 2
84000: NEG
84001: PUSH
84002: EMPTY
84003: LIST
84004: LIST
84005: PUSH
84006: LD_INT 1
84008: PUSH
84009: LD_INT 1
84011: NEG
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: PUSH
84017: LD_INT 1
84019: PUSH
84020: LD_INT 2
84022: PUSH
84023: EMPTY
84024: LIST
84025: LIST
84026: PUSH
84027: LD_INT 0
84029: PUSH
84030: LD_INT 2
84032: PUSH
84033: EMPTY
84034: LIST
84035: LIST
84036: PUSH
84037: LD_INT 1
84039: NEG
84040: PUSH
84041: LD_INT 1
84043: PUSH
84044: EMPTY
84045: LIST
84046: LIST
84047: PUSH
84048: LD_INT 1
84050: NEG
84051: PUSH
84052: LD_INT 3
84054: NEG
84055: PUSH
84056: EMPTY
84057: LIST
84058: LIST
84059: PUSH
84060: LD_INT 0
84062: PUSH
84063: LD_INT 3
84065: NEG
84066: PUSH
84067: EMPTY
84068: LIST
84069: LIST
84070: PUSH
84071: LD_INT 1
84073: PUSH
84074: LD_INT 2
84076: NEG
84077: PUSH
84078: EMPTY
84079: LIST
84080: LIST
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: LIST
84086: LIST
84087: LIST
84088: LIST
84089: LIST
84090: LIST
84091: LIST
84092: LIST
84093: LIST
84094: LIST
84095: LIST
84096: LIST
84097: LIST
84098: LIST
84099: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
84100: LD_ADDR_VAR 0 15
84104: PUSH
84105: LD_INT 0
84107: PUSH
84108: LD_INT 0
84110: PUSH
84111: EMPTY
84112: LIST
84113: LIST
84114: PUSH
84115: LD_INT 0
84117: PUSH
84118: LD_INT 1
84120: NEG
84121: PUSH
84122: EMPTY
84123: LIST
84124: LIST
84125: PUSH
84126: LD_INT 1
84128: PUSH
84129: LD_INT 0
84131: PUSH
84132: EMPTY
84133: LIST
84134: LIST
84135: PUSH
84136: LD_INT 1
84138: PUSH
84139: LD_INT 1
84141: PUSH
84142: EMPTY
84143: LIST
84144: LIST
84145: PUSH
84146: LD_INT 0
84148: PUSH
84149: LD_INT 1
84151: PUSH
84152: EMPTY
84153: LIST
84154: LIST
84155: PUSH
84156: LD_INT 1
84158: NEG
84159: PUSH
84160: LD_INT 0
84162: PUSH
84163: EMPTY
84164: LIST
84165: LIST
84166: PUSH
84167: LD_INT 1
84169: NEG
84170: PUSH
84171: LD_INT 1
84173: NEG
84174: PUSH
84175: EMPTY
84176: LIST
84177: LIST
84178: PUSH
84179: LD_INT 1
84181: PUSH
84182: LD_INT 1
84184: NEG
84185: PUSH
84186: EMPTY
84187: LIST
84188: LIST
84189: PUSH
84190: LD_INT 2
84192: PUSH
84193: LD_INT 0
84195: PUSH
84196: EMPTY
84197: LIST
84198: LIST
84199: PUSH
84200: LD_INT 2
84202: PUSH
84203: LD_INT 1
84205: PUSH
84206: EMPTY
84207: LIST
84208: LIST
84209: PUSH
84210: LD_INT 1
84212: NEG
84213: PUSH
84214: LD_INT 1
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PUSH
84221: LD_INT 2
84223: NEG
84224: PUSH
84225: LD_INT 0
84227: PUSH
84228: EMPTY
84229: LIST
84230: LIST
84231: PUSH
84232: LD_INT 2
84234: NEG
84235: PUSH
84236: LD_INT 1
84238: NEG
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: PUSH
84244: LD_INT 2
84246: PUSH
84247: LD_INT 1
84249: NEG
84250: PUSH
84251: EMPTY
84252: LIST
84253: LIST
84254: PUSH
84255: LD_INT 3
84257: PUSH
84258: LD_INT 0
84260: PUSH
84261: EMPTY
84262: LIST
84263: LIST
84264: PUSH
84265: LD_INT 3
84267: PUSH
84268: LD_INT 1
84270: PUSH
84271: EMPTY
84272: LIST
84273: LIST
84274: PUSH
84275: EMPTY
84276: LIST
84277: LIST
84278: LIST
84279: LIST
84280: LIST
84281: LIST
84282: LIST
84283: LIST
84284: LIST
84285: LIST
84286: LIST
84287: LIST
84288: LIST
84289: LIST
84290: LIST
84291: LIST
84292: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
84293: LD_ADDR_VAR 0 16
84297: PUSH
84298: LD_INT 0
84300: PUSH
84301: LD_INT 0
84303: PUSH
84304: EMPTY
84305: LIST
84306: LIST
84307: PUSH
84308: LD_INT 0
84310: PUSH
84311: LD_INT 1
84313: NEG
84314: PUSH
84315: EMPTY
84316: LIST
84317: LIST
84318: PUSH
84319: LD_INT 1
84321: PUSH
84322: LD_INT 0
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: PUSH
84329: LD_INT 1
84331: PUSH
84332: LD_INT 1
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: PUSH
84339: LD_INT 0
84341: PUSH
84342: LD_INT 1
84344: PUSH
84345: EMPTY
84346: LIST
84347: LIST
84348: PUSH
84349: LD_INT 1
84351: NEG
84352: PUSH
84353: LD_INT 0
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: PUSH
84360: LD_INT 1
84362: NEG
84363: PUSH
84364: LD_INT 1
84366: NEG
84367: PUSH
84368: EMPTY
84369: LIST
84370: LIST
84371: PUSH
84372: LD_INT 1
84374: NEG
84375: PUSH
84376: LD_INT 2
84378: NEG
84379: PUSH
84380: EMPTY
84381: LIST
84382: LIST
84383: PUSH
84384: LD_INT 2
84386: PUSH
84387: LD_INT 1
84389: PUSH
84390: EMPTY
84391: LIST
84392: LIST
84393: PUSH
84394: LD_INT 2
84396: PUSH
84397: LD_INT 2
84399: PUSH
84400: EMPTY
84401: LIST
84402: LIST
84403: PUSH
84404: LD_INT 1
84406: PUSH
84407: LD_INT 2
84409: PUSH
84410: EMPTY
84411: LIST
84412: LIST
84413: PUSH
84414: LD_INT 2
84416: NEG
84417: PUSH
84418: LD_INT 1
84420: NEG
84421: PUSH
84422: EMPTY
84423: LIST
84424: LIST
84425: PUSH
84426: LD_INT 2
84428: NEG
84429: PUSH
84430: LD_INT 2
84432: NEG
84433: PUSH
84434: EMPTY
84435: LIST
84436: LIST
84437: PUSH
84438: LD_INT 3
84440: PUSH
84441: LD_INT 2
84443: PUSH
84444: EMPTY
84445: LIST
84446: LIST
84447: PUSH
84448: LD_INT 3
84450: PUSH
84451: LD_INT 3
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PUSH
84458: LD_INT 2
84460: PUSH
84461: LD_INT 3
84463: PUSH
84464: EMPTY
84465: LIST
84466: LIST
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: LIST
84472: LIST
84473: LIST
84474: LIST
84475: LIST
84476: LIST
84477: LIST
84478: LIST
84479: LIST
84480: LIST
84481: LIST
84482: LIST
84483: LIST
84484: LIST
84485: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84486: LD_ADDR_VAR 0 17
84490: PUSH
84491: LD_INT 0
84493: PUSH
84494: LD_INT 0
84496: PUSH
84497: EMPTY
84498: LIST
84499: LIST
84500: PUSH
84501: LD_INT 0
84503: PUSH
84504: LD_INT 1
84506: NEG
84507: PUSH
84508: EMPTY
84509: LIST
84510: LIST
84511: PUSH
84512: LD_INT 1
84514: PUSH
84515: LD_INT 0
84517: PUSH
84518: EMPTY
84519: LIST
84520: LIST
84521: PUSH
84522: LD_INT 1
84524: PUSH
84525: LD_INT 1
84527: PUSH
84528: EMPTY
84529: LIST
84530: LIST
84531: PUSH
84532: LD_INT 0
84534: PUSH
84535: LD_INT 1
84537: PUSH
84538: EMPTY
84539: LIST
84540: LIST
84541: PUSH
84542: LD_INT 1
84544: NEG
84545: PUSH
84546: LD_INT 0
84548: PUSH
84549: EMPTY
84550: LIST
84551: LIST
84552: PUSH
84553: LD_INT 1
84555: NEG
84556: PUSH
84557: LD_INT 1
84559: NEG
84560: PUSH
84561: EMPTY
84562: LIST
84563: LIST
84564: PUSH
84565: LD_INT 1
84567: NEG
84568: PUSH
84569: LD_INT 2
84571: NEG
84572: PUSH
84573: EMPTY
84574: LIST
84575: LIST
84576: PUSH
84577: LD_INT 0
84579: PUSH
84580: LD_INT 2
84582: NEG
84583: PUSH
84584: EMPTY
84585: LIST
84586: LIST
84587: PUSH
84588: LD_INT 1
84590: PUSH
84591: LD_INT 1
84593: NEG
84594: PUSH
84595: EMPTY
84596: LIST
84597: LIST
84598: PUSH
84599: LD_INT 2
84601: PUSH
84602: LD_INT 0
84604: PUSH
84605: EMPTY
84606: LIST
84607: LIST
84608: PUSH
84609: LD_INT 2
84611: PUSH
84612: LD_INT 1
84614: PUSH
84615: EMPTY
84616: LIST
84617: LIST
84618: PUSH
84619: LD_INT 2
84621: PUSH
84622: LD_INT 2
84624: PUSH
84625: EMPTY
84626: LIST
84627: LIST
84628: PUSH
84629: LD_INT 1
84631: PUSH
84632: LD_INT 2
84634: PUSH
84635: EMPTY
84636: LIST
84637: LIST
84638: PUSH
84639: LD_INT 0
84641: PUSH
84642: LD_INT 2
84644: PUSH
84645: EMPTY
84646: LIST
84647: LIST
84648: PUSH
84649: LD_INT 1
84651: NEG
84652: PUSH
84653: LD_INT 1
84655: PUSH
84656: EMPTY
84657: LIST
84658: LIST
84659: PUSH
84660: LD_INT 2
84662: NEG
84663: PUSH
84664: LD_INT 0
84666: PUSH
84667: EMPTY
84668: LIST
84669: LIST
84670: PUSH
84671: LD_INT 2
84673: NEG
84674: PUSH
84675: LD_INT 1
84677: NEG
84678: PUSH
84679: EMPTY
84680: LIST
84681: LIST
84682: PUSH
84683: LD_INT 2
84685: NEG
84686: PUSH
84687: LD_INT 2
84689: NEG
84690: PUSH
84691: EMPTY
84692: LIST
84693: LIST
84694: PUSH
84695: EMPTY
84696: LIST
84697: LIST
84698: LIST
84699: LIST
84700: LIST
84701: LIST
84702: LIST
84703: LIST
84704: LIST
84705: LIST
84706: LIST
84707: LIST
84708: LIST
84709: LIST
84710: LIST
84711: LIST
84712: LIST
84713: LIST
84714: LIST
84715: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84716: LD_ADDR_VAR 0 18
84720: PUSH
84721: LD_INT 0
84723: PUSH
84724: LD_INT 0
84726: PUSH
84727: EMPTY
84728: LIST
84729: LIST
84730: PUSH
84731: LD_INT 0
84733: PUSH
84734: LD_INT 1
84736: NEG
84737: PUSH
84738: EMPTY
84739: LIST
84740: LIST
84741: PUSH
84742: LD_INT 1
84744: PUSH
84745: LD_INT 0
84747: PUSH
84748: EMPTY
84749: LIST
84750: LIST
84751: PUSH
84752: LD_INT 1
84754: PUSH
84755: LD_INT 1
84757: PUSH
84758: EMPTY
84759: LIST
84760: LIST
84761: PUSH
84762: LD_INT 0
84764: PUSH
84765: LD_INT 1
84767: PUSH
84768: EMPTY
84769: LIST
84770: LIST
84771: PUSH
84772: LD_INT 1
84774: NEG
84775: PUSH
84776: LD_INT 0
84778: PUSH
84779: EMPTY
84780: LIST
84781: LIST
84782: PUSH
84783: LD_INT 1
84785: NEG
84786: PUSH
84787: LD_INT 1
84789: NEG
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 1
84797: NEG
84798: PUSH
84799: LD_INT 2
84801: NEG
84802: PUSH
84803: EMPTY
84804: LIST
84805: LIST
84806: PUSH
84807: LD_INT 0
84809: PUSH
84810: LD_INT 2
84812: NEG
84813: PUSH
84814: EMPTY
84815: LIST
84816: LIST
84817: PUSH
84818: LD_INT 1
84820: PUSH
84821: LD_INT 1
84823: NEG
84824: PUSH
84825: EMPTY
84826: LIST
84827: LIST
84828: PUSH
84829: LD_INT 2
84831: PUSH
84832: LD_INT 0
84834: PUSH
84835: EMPTY
84836: LIST
84837: LIST
84838: PUSH
84839: LD_INT 2
84841: PUSH
84842: LD_INT 1
84844: PUSH
84845: EMPTY
84846: LIST
84847: LIST
84848: PUSH
84849: LD_INT 2
84851: PUSH
84852: LD_INT 2
84854: PUSH
84855: EMPTY
84856: LIST
84857: LIST
84858: PUSH
84859: LD_INT 1
84861: PUSH
84862: LD_INT 2
84864: PUSH
84865: EMPTY
84866: LIST
84867: LIST
84868: PUSH
84869: LD_INT 0
84871: PUSH
84872: LD_INT 2
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: PUSH
84879: LD_INT 1
84881: NEG
84882: PUSH
84883: LD_INT 1
84885: PUSH
84886: EMPTY
84887: LIST
84888: LIST
84889: PUSH
84890: LD_INT 2
84892: NEG
84893: PUSH
84894: LD_INT 0
84896: PUSH
84897: EMPTY
84898: LIST
84899: LIST
84900: PUSH
84901: LD_INT 2
84903: NEG
84904: PUSH
84905: LD_INT 1
84907: NEG
84908: PUSH
84909: EMPTY
84910: LIST
84911: LIST
84912: PUSH
84913: LD_INT 2
84915: NEG
84916: PUSH
84917: LD_INT 2
84919: NEG
84920: PUSH
84921: EMPTY
84922: LIST
84923: LIST
84924: PUSH
84925: EMPTY
84926: LIST
84927: LIST
84928: LIST
84929: LIST
84930: LIST
84931: LIST
84932: LIST
84933: LIST
84934: LIST
84935: LIST
84936: LIST
84937: LIST
84938: LIST
84939: LIST
84940: LIST
84941: LIST
84942: LIST
84943: LIST
84944: LIST
84945: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84946: LD_ADDR_VAR 0 19
84950: PUSH
84951: LD_INT 0
84953: PUSH
84954: LD_INT 0
84956: PUSH
84957: EMPTY
84958: LIST
84959: LIST
84960: PUSH
84961: LD_INT 0
84963: PUSH
84964: LD_INT 1
84966: NEG
84967: PUSH
84968: EMPTY
84969: LIST
84970: LIST
84971: PUSH
84972: LD_INT 1
84974: PUSH
84975: LD_INT 0
84977: PUSH
84978: EMPTY
84979: LIST
84980: LIST
84981: PUSH
84982: LD_INT 1
84984: PUSH
84985: LD_INT 1
84987: PUSH
84988: EMPTY
84989: LIST
84990: LIST
84991: PUSH
84992: LD_INT 0
84994: PUSH
84995: LD_INT 1
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PUSH
85002: LD_INT 1
85004: NEG
85005: PUSH
85006: LD_INT 0
85008: PUSH
85009: EMPTY
85010: LIST
85011: LIST
85012: PUSH
85013: LD_INT 1
85015: NEG
85016: PUSH
85017: LD_INT 1
85019: NEG
85020: PUSH
85021: EMPTY
85022: LIST
85023: LIST
85024: PUSH
85025: LD_INT 1
85027: NEG
85028: PUSH
85029: LD_INT 2
85031: NEG
85032: PUSH
85033: EMPTY
85034: LIST
85035: LIST
85036: PUSH
85037: LD_INT 0
85039: PUSH
85040: LD_INT 2
85042: NEG
85043: PUSH
85044: EMPTY
85045: LIST
85046: LIST
85047: PUSH
85048: LD_INT 1
85050: PUSH
85051: LD_INT 1
85053: NEG
85054: PUSH
85055: EMPTY
85056: LIST
85057: LIST
85058: PUSH
85059: LD_INT 2
85061: PUSH
85062: LD_INT 0
85064: PUSH
85065: EMPTY
85066: LIST
85067: LIST
85068: PUSH
85069: LD_INT 2
85071: PUSH
85072: LD_INT 1
85074: PUSH
85075: EMPTY
85076: LIST
85077: LIST
85078: PUSH
85079: LD_INT 2
85081: PUSH
85082: LD_INT 2
85084: PUSH
85085: EMPTY
85086: LIST
85087: LIST
85088: PUSH
85089: LD_INT 1
85091: PUSH
85092: LD_INT 2
85094: PUSH
85095: EMPTY
85096: LIST
85097: LIST
85098: PUSH
85099: LD_INT 0
85101: PUSH
85102: LD_INT 2
85104: PUSH
85105: EMPTY
85106: LIST
85107: LIST
85108: PUSH
85109: LD_INT 1
85111: NEG
85112: PUSH
85113: LD_INT 1
85115: PUSH
85116: EMPTY
85117: LIST
85118: LIST
85119: PUSH
85120: LD_INT 2
85122: NEG
85123: PUSH
85124: LD_INT 0
85126: PUSH
85127: EMPTY
85128: LIST
85129: LIST
85130: PUSH
85131: LD_INT 2
85133: NEG
85134: PUSH
85135: LD_INT 1
85137: NEG
85138: PUSH
85139: EMPTY
85140: LIST
85141: LIST
85142: PUSH
85143: LD_INT 2
85145: NEG
85146: PUSH
85147: LD_INT 2
85149: NEG
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: LIST
85159: LIST
85160: LIST
85161: LIST
85162: LIST
85163: LIST
85164: LIST
85165: LIST
85166: LIST
85167: LIST
85168: LIST
85169: LIST
85170: LIST
85171: LIST
85172: LIST
85173: LIST
85174: LIST
85175: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85176: LD_ADDR_VAR 0 20
85180: PUSH
85181: LD_INT 0
85183: PUSH
85184: LD_INT 0
85186: PUSH
85187: EMPTY
85188: LIST
85189: LIST
85190: PUSH
85191: LD_INT 0
85193: PUSH
85194: LD_INT 1
85196: NEG
85197: PUSH
85198: EMPTY
85199: LIST
85200: LIST
85201: PUSH
85202: LD_INT 1
85204: PUSH
85205: LD_INT 0
85207: PUSH
85208: EMPTY
85209: LIST
85210: LIST
85211: PUSH
85212: LD_INT 1
85214: PUSH
85215: LD_INT 1
85217: PUSH
85218: EMPTY
85219: LIST
85220: LIST
85221: PUSH
85222: LD_INT 0
85224: PUSH
85225: LD_INT 1
85227: PUSH
85228: EMPTY
85229: LIST
85230: LIST
85231: PUSH
85232: LD_INT 1
85234: NEG
85235: PUSH
85236: LD_INT 0
85238: PUSH
85239: EMPTY
85240: LIST
85241: LIST
85242: PUSH
85243: LD_INT 1
85245: NEG
85246: PUSH
85247: LD_INT 1
85249: NEG
85250: PUSH
85251: EMPTY
85252: LIST
85253: LIST
85254: PUSH
85255: LD_INT 1
85257: NEG
85258: PUSH
85259: LD_INT 2
85261: NEG
85262: PUSH
85263: EMPTY
85264: LIST
85265: LIST
85266: PUSH
85267: LD_INT 0
85269: PUSH
85270: LD_INT 2
85272: NEG
85273: PUSH
85274: EMPTY
85275: LIST
85276: LIST
85277: PUSH
85278: LD_INT 1
85280: PUSH
85281: LD_INT 1
85283: NEG
85284: PUSH
85285: EMPTY
85286: LIST
85287: LIST
85288: PUSH
85289: LD_INT 2
85291: PUSH
85292: LD_INT 0
85294: PUSH
85295: EMPTY
85296: LIST
85297: LIST
85298: PUSH
85299: LD_INT 2
85301: PUSH
85302: LD_INT 1
85304: PUSH
85305: EMPTY
85306: LIST
85307: LIST
85308: PUSH
85309: LD_INT 2
85311: PUSH
85312: LD_INT 2
85314: PUSH
85315: EMPTY
85316: LIST
85317: LIST
85318: PUSH
85319: LD_INT 1
85321: PUSH
85322: LD_INT 2
85324: PUSH
85325: EMPTY
85326: LIST
85327: LIST
85328: PUSH
85329: LD_INT 0
85331: PUSH
85332: LD_INT 2
85334: PUSH
85335: EMPTY
85336: LIST
85337: LIST
85338: PUSH
85339: LD_INT 1
85341: NEG
85342: PUSH
85343: LD_INT 1
85345: PUSH
85346: EMPTY
85347: LIST
85348: LIST
85349: PUSH
85350: LD_INT 2
85352: NEG
85353: PUSH
85354: LD_INT 0
85356: PUSH
85357: EMPTY
85358: LIST
85359: LIST
85360: PUSH
85361: LD_INT 2
85363: NEG
85364: PUSH
85365: LD_INT 1
85367: NEG
85368: PUSH
85369: EMPTY
85370: LIST
85371: LIST
85372: PUSH
85373: LD_INT 2
85375: NEG
85376: PUSH
85377: LD_INT 2
85379: NEG
85380: PUSH
85381: EMPTY
85382: LIST
85383: LIST
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: LIST
85389: LIST
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: LIST
85395: LIST
85396: LIST
85397: LIST
85398: LIST
85399: LIST
85400: LIST
85401: LIST
85402: LIST
85403: LIST
85404: LIST
85405: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85406: LD_ADDR_VAR 0 21
85410: PUSH
85411: LD_INT 0
85413: PUSH
85414: LD_INT 0
85416: PUSH
85417: EMPTY
85418: LIST
85419: LIST
85420: PUSH
85421: LD_INT 0
85423: PUSH
85424: LD_INT 1
85426: NEG
85427: PUSH
85428: EMPTY
85429: LIST
85430: LIST
85431: PUSH
85432: LD_INT 1
85434: PUSH
85435: LD_INT 0
85437: PUSH
85438: EMPTY
85439: LIST
85440: LIST
85441: PUSH
85442: LD_INT 1
85444: PUSH
85445: LD_INT 1
85447: PUSH
85448: EMPTY
85449: LIST
85450: LIST
85451: PUSH
85452: LD_INT 0
85454: PUSH
85455: LD_INT 1
85457: PUSH
85458: EMPTY
85459: LIST
85460: LIST
85461: PUSH
85462: LD_INT 1
85464: NEG
85465: PUSH
85466: LD_INT 0
85468: PUSH
85469: EMPTY
85470: LIST
85471: LIST
85472: PUSH
85473: LD_INT 1
85475: NEG
85476: PUSH
85477: LD_INT 1
85479: NEG
85480: PUSH
85481: EMPTY
85482: LIST
85483: LIST
85484: PUSH
85485: LD_INT 1
85487: NEG
85488: PUSH
85489: LD_INT 2
85491: NEG
85492: PUSH
85493: EMPTY
85494: LIST
85495: LIST
85496: PUSH
85497: LD_INT 0
85499: PUSH
85500: LD_INT 2
85502: NEG
85503: PUSH
85504: EMPTY
85505: LIST
85506: LIST
85507: PUSH
85508: LD_INT 1
85510: PUSH
85511: LD_INT 1
85513: NEG
85514: PUSH
85515: EMPTY
85516: LIST
85517: LIST
85518: PUSH
85519: LD_INT 2
85521: PUSH
85522: LD_INT 0
85524: PUSH
85525: EMPTY
85526: LIST
85527: LIST
85528: PUSH
85529: LD_INT 2
85531: PUSH
85532: LD_INT 1
85534: PUSH
85535: EMPTY
85536: LIST
85537: LIST
85538: PUSH
85539: LD_INT 2
85541: PUSH
85542: LD_INT 2
85544: PUSH
85545: EMPTY
85546: LIST
85547: LIST
85548: PUSH
85549: LD_INT 1
85551: PUSH
85552: LD_INT 2
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: PUSH
85559: LD_INT 0
85561: PUSH
85562: LD_INT 2
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PUSH
85569: LD_INT 1
85571: NEG
85572: PUSH
85573: LD_INT 1
85575: PUSH
85576: EMPTY
85577: LIST
85578: LIST
85579: PUSH
85580: LD_INT 2
85582: NEG
85583: PUSH
85584: LD_INT 0
85586: PUSH
85587: EMPTY
85588: LIST
85589: LIST
85590: PUSH
85591: LD_INT 2
85593: NEG
85594: PUSH
85595: LD_INT 1
85597: NEG
85598: PUSH
85599: EMPTY
85600: LIST
85601: LIST
85602: PUSH
85603: LD_INT 2
85605: NEG
85606: PUSH
85607: LD_INT 2
85609: NEG
85610: PUSH
85611: EMPTY
85612: LIST
85613: LIST
85614: PUSH
85615: EMPTY
85616: LIST
85617: LIST
85618: LIST
85619: LIST
85620: LIST
85621: LIST
85622: LIST
85623: LIST
85624: LIST
85625: LIST
85626: LIST
85627: LIST
85628: LIST
85629: LIST
85630: LIST
85631: LIST
85632: LIST
85633: LIST
85634: LIST
85635: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85636: LD_ADDR_VAR 0 22
85640: PUSH
85641: LD_INT 0
85643: PUSH
85644: LD_INT 0
85646: PUSH
85647: EMPTY
85648: LIST
85649: LIST
85650: PUSH
85651: LD_INT 0
85653: PUSH
85654: LD_INT 1
85656: NEG
85657: PUSH
85658: EMPTY
85659: LIST
85660: LIST
85661: PUSH
85662: LD_INT 1
85664: PUSH
85665: LD_INT 0
85667: PUSH
85668: EMPTY
85669: LIST
85670: LIST
85671: PUSH
85672: LD_INT 1
85674: PUSH
85675: LD_INT 1
85677: PUSH
85678: EMPTY
85679: LIST
85680: LIST
85681: PUSH
85682: LD_INT 0
85684: PUSH
85685: LD_INT 1
85687: PUSH
85688: EMPTY
85689: LIST
85690: LIST
85691: PUSH
85692: LD_INT 1
85694: NEG
85695: PUSH
85696: LD_INT 0
85698: PUSH
85699: EMPTY
85700: LIST
85701: LIST
85702: PUSH
85703: LD_INT 1
85705: NEG
85706: PUSH
85707: LD_INT 1
85709: NEG
85710: PUSH
85711: EMPTY
85712: LIST
85713: LIST
85714: PUSH
85715: LD_INT 1
85717: NEG
85718: PUSH
85719: LD_INT 2
85721: NEG
85722: PUSH
85723: EMPTY
85724: LIST
85725: LIST
85726: PUSH
85727: LD_INT 0
85729: PUSH
85730: LD_INT 2
85732: NEG
85733: PUSH
85734: EMPTY
85735: LIST
85736: LIST
85737: PUSH
85738: LD_INT 1
85740: PUSH
85741: LD_INT 1
85743: NEG
85744: PUSH
85745: EMPTY
85746: LIST
85747: LIST
85748: PUSH
85749: LD_INT 2
85751: PUSH
85752: LD_INT 0
85754: PUSH
85755: EMPTY
85756: LIST
85757: LIST
85758: PUSH
85759: LD_INT 2
85761: PUSH
85762: LD_INT 1
85764: PUSH
85765: EMPTY
85766: LIST
85767: LIST
85768: PUSH
85769: LD_INT 2
85771: PUSH
85772: LD_INT 2
85774: PUSH
85775: EMPTY
85776: LIST
85777: LIST
85778: PUSH
85779: LD_INT 1
85781: PUSH
85782: LD_INT 2
85784: PUSH
85785: EMPTY
85786: LIST
85787: LIST
85788: PUSH
85789: LD_INT 0
85791: PUSH
85792: LD_INT 2
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: PUSH
85799: LD_INT 1
85801: NEG
85802: PUSH
85803: LD_INT 1
85805: PUSH
85806: EMPTY
85807: LIST
85808: LIST
85809: PUSH
85810: LD_INT 2
85812: NEG
85813: PUSH
85814: LD_INT 0
85816: PUSH
85817: EMPTY
85818: LIST
85819: LIST
85820: PUSH
85821: LD_INT 2
85823: NEG
85824: PUSH
85825: LD_INT 1
85827: NEG
85828: PUSH
85829: EMPTY
85830: LIST
85831: LIST
85832: PUSH
85833: LD_INT 2
85835: NEG
85836: PUSH
85837: LD_INT 2
85839: NEG
85840: PUSH
85841: EMPTY
85842: LIST
85843: LIST
85844: PUSH
85845: EMPTY
85846: LIST
85847: LIST
85848: LIST
85849: LIST
85850: LIST
85851: LIST
85852: LIST
85853: LIST
85854: LIST
85855: LIST
85856: LIST
85857: LIST
85858: LIST
85859: LIST
85860: LIST
85861: LIST
85862: LIST
85863: LIST
85864: LIST
85865: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
85866: LD_ADDR_VAR 0 23
85870: PUSH
85871: LD_INT 0
85873: PUSH
85874: LD_INT 0
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: LD_INT 0
85883: PUSH
85884: LD_INT 1
85886: NEG
85887: PUSH
85888: EMPTY
85889: LIST
85890: LIST
85891: PUSH
85892: LD_INT 1
85894: PUSH
85895: LD_INT 0
85897: PUSH
85898: EMPTY
85899: LIST
85900: LIST
85901: PUSH
85902: LD_INT 1
85904: PUSH
85905: LD_INT 1
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: PUSH
85912: LD_INT 0
85914: PUSH
85915: LD_INT 1
85917: PUSH
85918: EMPTY
85919: LIST
85920: LIST
85921: PUSH
85922: LD_INT 1
85924: NEG
85925: PUSH
85926: LD_INT 0
85928: PUSH
85929: EMPTY
85930: LIST
85931: LIST
85932: PUSH
85933: LD_INT 1
85935: NEG
85936: PUSH
85937: LD_INT 1
85939: NEG
85940: PUSH
85941: EMPTY
85942: LIST
85943: LIST
85944: PUSH
85945: LD_INT 1
85947: NEG
85948: PUSH
85949: LD_INT 2
85951: NEG
85952: PUSH
85953: EMPTY
85954: LIST
85955: LIST
85956: PUSH
85957: LD_INT 0
85959: PUSH
85960: LD_INT 2
85962: NEG
85963: PUSH
85964: EMPTY
85965: LIST
85966: LIST
85967: PUSH
85968: LD_INT 1
85970: PUSH
85971: LD_INT 1
85973: NEG
85974: PUSH
85975: EMPTY
85976: LIST
85977: LIST
85978: PUSH
85979: LD_INT 2
85981: PUSH
85982: LD_INT 0
85984: PUSH
85985: EMPTY
85986: LIST
85987: LIST
85988: PUSH
85989: LD_INT 2
85991: PUSH
85992: LD_INT 1
85994: PUSH
85995: EMPTY
85996: LIST
85997: LIST
85998: PUSH
85999: LD_INT 2
86001: PUSH
86002: LD_INT 2
86004: PUSH
86005: EMPTY
86006: LIST
86007: LIST
86008: PUSH
86009: LD_INT 1
86011: PUSH
86012: LD_INT 2
86014: PUSH
86015: EMPTY
86016: LIST
86017: LIST
86018: PUSH
86019: LD_INT 0
86021: PUSH
86022: LD_INT 2
86024: PUSH
86025: EMPTY
86026: LIST
86027: LIST
86028: PUSH
86029: LD_INT 1
86031: NEG
86032: PUSH
86033: LD_INT 1
86035: PUSH
86036: EMPTY
86037: LIST
86038: LIST
86039: PUSH
86040: LD_INT 2
86042: NEG
86043: PUSH
86044: LD_INT 0
86046: PUSH
86047: EMPTY
86048: LIST
86049: LIST
86050: PUSH
86051: LD_INT 2
86053: NEG
86054: PUSH
86055: LD_INT 1
86057: NEG
86058: PUSH
86059: EMPTY
86060: LIST
86061: LIST
86062: PUSH
86063: LD_INT 2
86065: NEG
86066: PUSH
86067: LD_INT 2
86069: NEG
86070: PUSH
86071: EMPTY
86072: LIST
86073: LIST
86074: PUSH
86075: LD_INT 2
86077: NEG
86078: PUSH
86079: LD_INT 3
86081: NEG
86082: PUSH
86083: EMPTY
86084: LIST
86085: LIST
86086: PUSH
86087: LD_INT 1
86089: NEG
86090: PUSH
86091: LD_INT 3
86093: NEG
86094: PUSH
86095: EMPTY
86096: LIST
86097: LIST
86098: PUSH
86099: LD_INT 1
86101: PUSH
86102: LD_INT 2
86104: NEG
86105: PUSH
86106: EMPTY
86107: LIST
86108: LIST
86109: PUSH
86110: LD_INT 2
86112: PUSH
86113: LD_INT 1
86115: NEG
86116: PUSH
86117: EMPTY
86118: LIST
86119: LIST
86120: PUSH
86121: EMPTY
86122: LIST
86123: LIST
86124: LIST
86125: LIST
86126: LIST
86127: LIST
86128: LIST
86129: LIST
86130: LIST
86131: LIST
86132: LIST
86133: LIST
86134: LIST
86135: LIST
86136: LIST
86137: LIST
86138: LIST
86139: LIST
86140: LIST
86141: LIST
86142: LIST
86143: LIST
86144: LIST
86145: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
86146: LD_ADDR_VAR 0 24
86150: PUSH
86151: LD_INT 0
86153: PUSH
86154: LD_INT 0
86156: PUSH
86157: EMPTY
86158: LIST
86159: LIST
86160: PUSH
86161: LD_INT 0
86163: PUSH
86164: LD_INT 1
86166: NEG
86167: PUSH
86168: EMPTY
86169: LIST
86170: LIST
86171: PUSH
86172: LD_INT 1
86174: PUSH
86175: LD_INT 0
86177: PUSH
86178: EMPTY
86179: LIST
86180: LIST
86181: PUSH
86182: LD_INT 1
86184: PUSH
86185: LD_INT 1
86187: PUSH
86188: EMPTY
86189: LIST
86190: LIST
86191: PUSH
86192: LD_INT 0
86194: PUSH
86195: LD_INT 1
86197: PUSH
86198: EMPTY
86199: LIST
86200: LIST
86201: PUSH
86202: LD_INT 1
86204: NEG
86205: PUSH
86206: LD_INT 0
86208: PUSH
86209: EMPTY
86210: LIST
86211: LIST
86212: PUSH
86213: LD_INT 1
86215: NEG
86216: PUSH
86217: LD_INT 1
86219: NEG
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: PUSH
86225: LD_INT 1
86227: NEG
86228: PUSH
86229: LD_INT 2
86231: NEG
86232: PUSH
86233: EMPTY
86234: LIST
86235: LIST
86236: PUSH
86237: LD_INT 0
86239: PUSH
86240: LD_INT 2
86242: NEG
86243: PUSH
86244: EMPTY
86245: LIST
86246: LIST
86247: PUSH
86248: LD_INT 1
86250: PUSH
86251: LD_INT 1
86253: NEG
86254: PUSH
86255: EMPTY
86256: LIST
86257: LIST
86258: PUSH
86259: LD_INT 2
86261: PUSH
86262: LD_INT 0
86264: PUSH
86265: EMPTY
86266: LIST
86267: LIST
86268: PUSH
86269: LD_INT 2
86271: PUSH
86272: LD_INT 1
86274: PUSH
86275: EMPTY
86276: LIST
86277: LIST
86278: PUSH
86279: LD_INT 2
86281: PUSH
86282: LD_INT 2
86284: PUSH
86285: EMPTY
86286: LIST
86287: LIST
86288: PUSH
86289: LD_INT 1
86291: PUSH
86292: LD_INT 2
86294: PUSH
86295: EMPTY
86296: LIST
86297: LIST
86298: PUSH
86299: LD_INT 0
86301: PUSH
86302: LD_INT 2
86304: PUSH
86305: EMPTY
86306: LIST
86307: LIST
86308: PUSH
86309: LD_INT 1
86311: NEG
86312: PUSH
86313: LD_INT 1
86315: PUSH
86316: EMPTY
86317: LIST
86318: LIST
86319: PUSH
86320: LD_INT 2
86322: NEG
86323: PUSH
86324: LD_INT 0
86326: PUSH
86327: EMPTY
86328: LIST
86329: LIST
86330: PUSH
86331: LD_INT 2
86333: NEG
86334: PUSH
86335: LD_INT 1
86337: NEG
86338: PUSH
86339: EMPTY
86340: LIST
86341: LIST
86342: PUSH
86343: LD_INT 2
86345: NEG
86346: PUSH
86347: LD_INT 2
86349: NEG
86350: PUSH
86351: EMPTY
86352: LIST
86353: LIST
86354: PUSH
86355: LD_INT 1
86357: PUSH
86358: LD_INT 2
86360: NEG
86361: PUSH
86362: EMPTY
86363: LIST
86364: LIST
86365: PUSH
86366: LD_INT 2
86368: PUSH
86369: LD_INT 1
86371: NEG
86372: PUSH
86373: EMPTY
86374: LIST
86375: LIST
86376: PUSH
86377: LD_INT 3
86379: PUSH
86380: LD_INT 1
86382: PUSH
86383: EMPTY
86384: LIST
86385: LIST
86386: PUSH
86387: LD_INT 3
86389: PUSH
86390: LD_INT 2
86392: PUSH
86393: EMPTY
86394: LIST
86395: LIST
86396: PUSH
86397: EMPTY
86398: LIST
86399: LIST
86400: LIST
86401: LIST
86402: LIST
86403: LIST
86404: LIST
86405: LIST
86406: LIST
86407: LIST
86408: LIST
86409: LIST
86410: LIST
86411: LIST
86412: LIST
86413: LIST
86414: LIST
86415: LIST
86416: LIST
86417: LIST
86418: LIST
86419: LIST
86420: LIST
86421: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
86422: LD_ADDR_VAR 0 25
86426: PUSH
86427: LD_INT 0
86429: PUSH
86430: LD_INT 0
86432: PUSH
86433: EMPTY
86434: LIST
86435: LIST
86436: PUSH
86437: LD_INT 0
86439: PUSH
86440: LD_INT 1
86442: NEG
86443: PUSH
86444: EMPTY
86445: LIST
86446: LIST
86447: PUSH
86448: LD_INT 1
86450: PUSH
86451: LD_INT 0
86453: PUSH
86454: EMPTY
86455: LIST
86456: LIST
86457: PUSH
86458: LD_INT 1
86460: PUSH
86461: LD_INT 1
86463: PUSH
86464: EMPTY
86465: LIST
86466: LIST
86467: PUSH
86468: LD_INT 0
86470: PUSH
86471: LD_INT 1
86473: PUSH
86474: EMPTY
86475: LIST
86476: LIST
86477: PUSH
86478: LD_INT 1
86480: NEG
86481: PUSH
86482: LD_INT 0
86484: PUSH
86485: EMPTY
86486: LIST
86487: LIST
86488: PUSH
86489: LD_INT 1
86491: NEG
86492: PUSH
86493: LD_INT 1
86495: NEG
86496: PUSH
86497: EMPTY
86498: LIST
86499: LIST
86500: PUSH
86501: LD_INT 1
86503: NEG
86504: PUSH
86505: LD_INT 2
86507: NEG
86508: PUSH
86509: EMPTY
86510: LIST
86511: LIST
86512: PUSH
86513: LD_INT 0
86515: PUSH
86516: LD_INT 2
86518: NEG
86519: PUSH
86520: EMPTY
86521: LIST
86522: LIST
86523: PUSH
86524: LD_INT 1
86526: PUSH
86527: LD_INT 1
86529: NEG
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: PUSH
86535: LD_INT 2
86537: PUSH
86538: LD_INT 0
86540: PUSH
86541: EMPTY
86542: LIST
86543: LIST
86544: PUSH
86545: LD_INT 2
86547: PUSH
86548: LD_INT 1
86550: PUSH
86551: EMPTY
86552: LIST
86553: LIST
86554: PUSH
86555: LD_INT 2
86557: PUSH
86558: LD_INT 2
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: PUSH
86565: LD_INT 1
86567: PUSH
86568: LD_INT 2
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PUSH
86575: LD_INT 0
86577: PUSH
86578: LD_INT 2
86580: PUSH
86581: EMPTY
86582: LIST
86583: LIST
86584: PUSH
86585: LD_INT 1
86587: NEG
86588: PUSH
86589: LD_INT 1
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: PUSH
86596: LD_INT 2
86598: NEG
86599: PUSH
86600: LD_INT 0
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: PUSH
86607: LD_INT 2
86609: NEG
86610: PUSH
86611: LD_INT 1
86613: NEG
86614: PUSH
86615: EMPTY
86616: LIST
86617: LIST
86618: PUSH
86619: LD_INT 2
86621: NEG
86622: PUSH
86623: LD_INT 2
86625: NEG
86626: PUSH
86627: EMPTY
86628: LIST
86629: LIST
86630: PUSH
86631: LD_INT 3
86633: PUSH
86634: LD_INT 1
86636: PUSH
86637: EMPTY
86638: LIST
86639: LIST
86640: PUSH
86641: LD_INT 3
86643: PUSH
86644: LD_INT 2
86646: PUSH
86647: EMPTY
86648: LIST
86649: LIST
86650: PUSH
86651: LD_INT 2
86653: PUSH
86654: LD_INT 3
86656: PUSH
86657: EMPTY
86658: LIST
86659: LIST
86660: PUSH
86661: LD_INT 1
86663: PUSH
86664: LD_INT 3
86666: PUSH
86667: EMPTY
86668: LIST
86669: LIST
86670: PUSH
86671: EMPTY
86672: LIST
86673: LIST
86674: LIST
86675: LIST
86676: LIST
86677: LIST
86678: LIST
86679: LIST
86680: LIST
86681: LIST
86682: LIST
86683: LIST
86684: LIST
86685: LIST
86686: LIST
86687: LIST
86688: LIST
86689: LIST
86690: LIST
86691: LIST
86692: LIST
86693: LIST
86694: LIST
86695: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
86696: LD_ADDR_VAR 0 26
86700: PUSH
86701: LD_INT 0
86703: PUSH
86704: LD_INT 0
86706: PUSH
86707: EMPTY
86708: LIST
86709: LIST
86710: PUSH
86711: LD_INT 0
86713: PUSH
86714: LD_INT 1
86716: NEG
86717: PUSH
86718: EMPTY
86719: LIST
86720: LIST
86721: PUSH
86722: LD_INT 1
86724: PUSH
86725: LD_INT 0
86727: PUSH
86728: EMPTY
86729: LIST
86730: LIST
86731: PUSH
86732: LD_INT 1
86734: PUSH
86735: LD_INT 1
86737: PUSH
86738: EMPTY
86739: LIST
86740: LIST
86741: PUSH
86742: LD_INT 0
86744: PUSH
86745: LD_INT 1
86747: PUSH
86748: EMPTY
86749: LIST
86750: LIST
86751: PUSH
86752: LD_INT 1
86754: NEG
86755: PUSH
86756: LD_INT 0
86758: PUSH
86759: EMPTY
86760: LIST
86761: LIST
86762: PUSH
86763: LD_INT 1
86765: NEG
86766: PUSH
86767: LD_INT 1
86769: NEG
86770: PUSH
86771: EMPTY
86772: LIST
86773: LIST
86774: PUSH
86775: LD_INT 1
86777: NEG
86778: PUSH
86779: LD_INT 2
86781: NEG
86782: PUSH
86783: EMPTY
86784: LIST
86785: LIST
86786: PUSH
86787: LD_INT 0
86789: PUSH
86790: LD_INT 2
86792: NEG
86793: PUSH
86794: EMPTY
86795: LIST
86796: LIST
86797: PUSH
86798: LD_INT 1
86800: PUSH
86801: LD_INT 1
86803: NEG
86804: PUSH
86805: EMPTY
86806: LIST
86807: LIST
86808: PUSH
86809: LD_INT 2
86811: PUSH
86812: LD_INT 0
86814: PUSH
86815: EMPTY
86816: LIST
86817: LIST
86818: PUSH
86819: LD_INT 2
86821: PUSH
86822: LD_INT 1
86824: PUSH
86825: EMPTY
86826: LIST
86827: LIST
86828: PUSH
86829: LD_INT 2
86831: PUSH
86832: LD_INT 2
86834: PUSH
86835: EMPTY
86836: LIST
86837: LIST
86838: PUSH
86839: LD_INT 1
86841: PUSH
86842: LD_INT 2
86844: PUSH
86845: EMPTY
86846: LIST
86847: LIST
86848: PUSH
86849: LD_INT 0
86851: PUSH
86852: LD_INT 2
86854: PUSH
86855: EMPTY
86856: LIST
86857: LIST
86858: PUSH
86859: LD_INT 1
86861: NEG
86862: PUSH
86863: LD_INT 1
86865: PUSH
86866: EMPTY
86867: LIST
86868: LIST
86869: PUSH
86870: LD_INT 2
86872: NEG
86873: PUSH
86874: LD_INT 0
86876: PUSH
86877: EMPTY
86878: LIST
86879: LIST
86880: PUSH
86881: LD_INT 2
86883: NEG
86884: PUSH
86885: LD_INT 1
86887: NEG
86888: PUSH
86889: EMPTY
86890: LIST
86891: LIST
86892: PUSH
86893: LD_INT 2
86895: NEG
86896: PUSH
86897: LD_INT 2
86899: NEG
86900: PUSH
86901: EMPTY
86902: LIST
86903: LIST
86904: PUSH
86905: LD_INT 2
86907: PUSH
86908: LD_INT 3
86910: PUSH
86911: EMPTY
86912: LIST
86913: LIST
86914: PUSH
86915: LD_INT 1
86917: PUSH
86918: LD_INT 3
86920: PUSH
86921: EMPTY
86922: LIST
86923: LIST
86924: PUSH
86925: LD_INT 1
86927: NEG
86928: PUSH
86929: LD_INT 2
86931: PUSH
86932: EMPTY
86933: LIST
86934: LIST
86935: PUSH
86936: LD_INT 2
86938: NEG
86939: PUSH
86940: LD_INT 1
86942: PUSH
86943: EMPTY
86944: LIST
86945: LIST
86946: PUSH
86947: EMPTY
86948: LIST
86949: LIST
86950: LIST
86951: LIST
86952: LIST
86953: LIST
86954: LIST
86955: LIST
86956: LIST
86957: LIST
86958: LIST
86959: LIST
86960: LIST
86961: LIST
86962: LIST
86963: LIST
86964: LIST
86965: LIST
86966: LIST
86967: LIST
86968: LIST
86969: LIST
86970: LIST
86971: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
86972: LD_ADDR_VAR 0 27
86976: PUSH
86977: LD_INT 0
86979: PUSH
86980: LD_INT 0
86982: PUSH
86983: EMPTY
86984: LIST
86985: LIST
86986: PUSH
86987: LD_INT 0
86989: PUSH
86990: LD_INT 1
86992: NEG
86993: PUSH
86994: EMPTY
86995: LIST
86996: LIST
86997: PUSH
86998: LD_INT 1
87000: PUSH
87001: LD_INT 0
87003: PUSH
87004: EMPTY
87005: LIST
87006: LIST
87007: PUSH
87008: LD_INT 1
87010: PUSH
87011: LD_INT 1
87013: PUSH
87014: EMPTY
87015: LIST
87016: LIST
87017: PUSH
87018: LD_INT 0
87020: PUSH
87021: LD_INT 1
87023: PUSH
87024: EMPTY
87025: LIST
87026: LIST
87027: PUSH
87028: LD_INT 1
87030: NEG
87031: PUSH
87032: LD_INT 0
87034: PUSH
87035: EMPTY
87036: LIST
87037: LIST
87038: PUSH
87039: LD_INT 1
87041: NEG
87042: PUSH
87043: LD_INT 1
87045: NEG
87046: PUSH
87047: EMPTY
87048: LIST
87049: LIST
87050: PUSH
87051: LD_INT 1
87053: NEG
87054: PUSH
87055: LD_INT 2
87057: NEG
87058: PUSH
87059: EMPTY
87060: LIST
87061: LIST
87062: PUSH
87063: LD_INT 0
87065: PUSH
87066: LD_INT 2
87068: NEG
87069: PUSH
87070: EMPTY
87071: LIST
87072: LIST
87073: PUSH
87074: LD_INT 1
87076: PUSH
87077: LD_INT 1
87079: NEG
87080: PUSH
87081: EMPTY
87082: LIST
87083: LIST
87084: PUSH
87085: LD_INT 2
87087: PUSH
87088: LD_INT 0
87090: PUSH
87091: EMPTY
87092: LIST
87093: LIST
87094: PUSH
87095: LD_INT 2
87097: PUSH
87098: LD_INT 1
87100: PUSH
87101: EMPTY
87102: LIST
87103: LIST
87104: PUSH
87105: LD_INT 2
87107: PUSH
87108: LD_INT 2
87110: PUSH
87111: EMPTY
87112: LIST
87113: LIST
87114: PUSH
87115: LD_INT 1
87117: PUSH
87118: LD_INT 2
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 0
87127: PUSH
87128: LD_INT 2
87130: PUSH
87131: EMPTY
87132: LIST
87133: LIST
87134: PUSH
87135: LD_INT 1
87137: NEG
87138: PUSH
87139: LD_INT 1
87141: PUSH
87142: EMPTY
87143: LIST
87144: LIST
87145: PUSH
87146: LD_INT 2
87148: NEG
87149: PUSH
87150: LD_INT 0
87152: PUSH
87153: EMPTY
87154: LIST
87155: LIST
87156: PUSH
87157: LD_INT 2
87159: NEG
87160: PUSH
87161: LD_INT 1
87163: NEG
87164: PUSH
87165: EMPTY
87166: LIST
87167: LIST
87168: PUSH
87169: LD_INT 2
87171: NEG
87172: PUSH
87173: LD_INT 2
87175: NEG
87176: PUSH
87177: EMPTY
87178: LIST
87179: LIST
87180: PUSH
87181: LD_INT 1
87183: NEG
87184: PUSH
87185: LD_INT 2
87187: PUSH
87188: EMPTY
87189: LIST
87190: LIST
87191: PUSH
87192: LD_INT 2
87194: NEG
87195: PUSH
87196: LD_INT 1
87198: PUSH
87199: EMPTY
87200: LIST
87201: LIST
87202: PUSH
87203: LD_INT 3
87205: NEG
87206: PUSH
87207: LD_INT 1
87209: NEG
87210: PUSH
87211: EMPTY
87212: LIST
87213: LIST
87214: PUSH
87215: LD_INT 3
87217: NEG
87218: PUSH
87219: LD_INT 2
87221: NEG
87222: PUSH
87223: EMPTY
87224: LIST
87225: LIST
87226: PUSH
87227: EMPTY
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: LIST
87233: LIST
87234: LIST
87235: LIST
87236: LIST
87237: LIST
87238: LIST
87239: LIST
87240: LIST
87241: LIST
87242: LIST
87243: LIST
87244: LIST
87245: LIST
87246: LIST
87247: LIST
87248: LIST
87249: LIST
87250: LIST
87251: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
87252: LD_ADDR_VAR 0 28
87256: PUSH
87257: LD_INT 0
87259: PUSH
87260: LD_INT 0
87262: PUSH
87263: EMPTY
87264: LIST
87265: LIST
87266: PUSH
87267: LD_INT 0
87269: PUSH
87270: LD_INT 1
87272: NEG
87273: PUSH
87274: EMPTY
87275: LIST
87276: LIST
87277: PUSH
87278: LD_INT 1
87280: PUSH
87281: LD_INT 0
87283: PUSH
87284: EMPTY
87285: LIST
87286: LIST
87287: PUSH
87288: LD_INT 1
87290: PUSH
87291: LD_INT 1
87293: PUSH
87294: EMPTY
87295: LIST
87296: LIST
87297: PUSH
87298: LD_INT 0
87300: PUSH
87301: LD_INT 1
87303: PUSH
87304: EMPTY
87305: LIST
87306: LIST
87307: PUSH
87308: LD_INT 1
87310: NEG
87311: PUSH
87312: LD_INT 0
87314: PUSH
87315: EMPTY
87316: LIST
87317: LIST
87318: PUSH
87319: LD_INT 1
87321: NEG
87322: PUSH
87323: LD_INT 1
87325: NEG
87326: PUSH
87327: EMPTY
87328: LIST
87329: LIST
87330: PUSH
87331: LD_INT 1
87333: NEG
87334: PUSH
87335: LD_INT 2
87337: NEG
87338: PUSH
87339: EMPTY
87340: LIST
87341: LIST
87342: PUSH
87343: LD_INT 0
87345: PUSH
87346: LD_INT 2
87348: NEG
87349: PUSH
87350: EMPTY
87351: LIST
87352: LIST
87353: PUSH
87354: LD_INT 1
87356: PUSH
87357: LD_INT 1
87359: NEG
87360: PUSH
87361: EMPTY
87362: LIST
87363: LIST
87364: PUSH
87365: LD_INT 2
87367: PUSH
87368: LD_INT 0
87370: PUSH
87371: EMPTY
87372: LIST
87373: LIST
87374: PUSH
87375: LD_INT 2
87377: PUSH
87378: LD_INT 1
87380: PUSH
87381: EMPTY
87382: LIST
87383: LIST
87384: PUSH
87385: LD_INT 2
87387: PUSH
87388: LD_INT 2
87390: PUSH
87391: EMPTY
87392: LIST
87393: LIST
87394: PUSH
87395: LD_INT 1
87397: PUSH
87398: LD_INT 2
87400: PUSH
87401: EMPTY
87402: LIST
87403: LIST
87404: PUSH
87405: LD_INT 0
87407: PUSH
87408: LD_INT 2
87410: PUSH
87411: EMPTY
87412: LIST
87413: LIST
87414: PUSH
87415: LD_INT 1
87417: NEG
87418: PUSH
87419: LD_INT 1
87421: PUSH
87422: EMPTY
87423: LIST
87424: LIST
87425: PUSH
87426: LD_INT 2
87428: NEG
87429: PUSH
87430: LD_INT 0
87432: PUSH
87433: EMPTY
87434: LIST
87435: LIST
87436: PUSH
87437: LD_INT 2
87439: NEG
87440: PUSH
87441: LD_INT 1
87443: NEG
87444: PUSH
87445: EMPTY
87446: LIST
87447: LIST
87448: PUSH
87449: LD_INT 2
87451: NEG
87452: PUSH
87453: LD_INT 2
87455: NEG
87456: PUSH
87457: EMPTY
87458: LIST
87459: LIST
87460: PUSH
87461: LD_INT 2
87463: NEG
87464: PUSH
87465: LD_INT 3
87467: NEG
87468: PUSH
87469: EMPTY
87470: LIST
87471: LIST
87472: PUSH
87473: LD_INT 1
87475: NEG
87476: PUSH
87477: LD_INT 3
87479: NEG
87480: PUSH
87481: EMPTY
87482: LIST
87483: LIST
87484: PUSH
87485: LD_INT 3
87487: NEG
87488: PUSH
87489: LD_INT 1
87491: NEG
87492: PUSH
87493: EMPTY
87494: LIST
87495: LIST
87496: PUSH
87497: LD_INT 3
87499: NEG
87500: PUSH
87501: LD_INT 2
87503: NEG
87504: PUSH
87505: EMPTY
87506: LIST
87507: LIST
87508: PUSH
87509: EMPTY
87510: LIST
87511: LIST
87512: LIST
87513: LIST
87514: LIST
87515: LIST
87516: LIST
87517: LIST
87518: LIST
87519: LIST
87520: LIST
87521: LIST
87522: LIST
87523: LIST
87524: LIST
87525: LIST
87526: LIST
87527: LIST
87528: LIST
87529: LIST
87530: LIST
87531: LIST
87532: LIST
87533: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
87534: LD_ADDR_VAR 0 29
87538: PUSH
87539: LD_INT 0
87541: PUSH
87542: LD_INT 0
87544: PUSH
87545: EMPTY
87546: LIST
87547: LIST
87548: PUSH
87549: LD_INT 0
87551: PUSH
87552: LD_INT 1
87554: NEG
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: PUSH
87560: LD_INT 1
87562: PUSH
87563: LD_INT 0
87565: PUSH
87566: EMPTY
87567: LIST
87568: LIST
87569: PUSH
87570: LD_INT 1
87572: PUSH
87573: LD_INT 1
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: LD_INT 0
87582: PUSH
87583: LD_INT 1
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PUSH
87590: LD_INT 1
87592: NEG
87593: PUSH
87594: LD_INT 0
87596: PUSH
87597: EMPTY
87598: LIST
87599: LIST
87600: PUSH
87601: LD_INT 1
87603: NEG
87604: PUSH
87605: LD_INT 1
87607: NEG
87608: PUSH
87609: EMPTY
87610: LIST
87611: LIST
87612: PUSH
87613: LD_INT 1
87615: NEG
87616: PUSH
87617: LD_INT 2
87619: NEG
87620: PUSH
87621: EMPTY
87622: LIST
87623: LIST
87624: PUSH
87625: LD_INT 0
87627: PUSH
87628: LD_INT 2
87630: NEG
87631: PUSH
87632: EMPTY
87633: LIST
87634: LIST
87635: PUSH
87636: LD_INT 1
87638: PUSH
87639: LD_INT 1
87641: NEG
87642: PUSH
87643: EMPTY
87644: LIST
87645: LIST
87646: PUSH
87647: LD_INT 2
87649: PUSH
87650: LD_INT 0
87652: PUSH
87653: EMPTY
87654: LIST
87655: LIST
87656: PUSH
87657: LD_INT 2
87659: PUSH
87660: LD_INT 1
87662: PUSH
87663: EMPTY
87664: LIST
87665: LIST
87666: PUSH
87667: LD_INT 1
87669: PUSH
87670: LD_INT 2
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: LD_INT 0
87679: PUSH
87680: LD_INT 2
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: LD_INT 1
87689: NEG
87690: PUSH
87691: LD_INT 1
87693: PUSH
87694: EMPTY
87695: LIST
87696: LIST
87697: PUSH
87698: LD_INT 2
87700: NEG
87701: PUSH
87702: LD_INT 1
87704: NEG
87705: PUSH
87706: EMPTY
87707: LIST
87708: LIST
87709: PUSH
87710: LD_INT 2
87712: NEG
87713: PUSH
87714: LD_INT 2
87716: NEG
87717: PUSH
87718: EMPTY
87719: LIST
87720: LIST
87721: PUSH
87722: LD_INT 2
87724: NEG
87725: PUSH
87726: LD_INT 3
87728: NEG
87729: PUSH
87730: EMPTY
87731: LIST
87732: LIST
87733: PUSH
87734: LD_INT 2
87736: PUSH
87737: LD_INT 1
87739: NEG
87740: PUSH
87741: EMPTY
87742: LIST
87743: LIST
87744: PUSH
87745: LD_INT 3
87747: PUSH
87748: LD_INT 1
87750: PUSH
87751: EMPTY
87752: LIST
87753: LIST
87754: PUSH
87755: LD_INT 1
87757: PUSH
87758: LD_INT 3
87760: PUSH
87761: EMPTY
87762: LIST
87763: LIST
87764: PUSH
87765: LD_INT 1
87767: NEG
87768: PUSH
87769: LD_INT 2
87771: PUSH
87772: EMPTY
87773: LIST
87774: LIST
87775: PUSH
87776: LD_INT 3
87778: NEG
87779: PUSH
87780: LD_INT 2
87782: NEG
87783: PUSH
87784: EMPTY
87785: LIST
87786: LIST
87787: PUSH
87788: EMPTY
87789: LIST
87790: LIST
87791: LIST
87792: LIST
87793: LIST
87794: LIST
87795: LIST
87796: LIST
87797: LIST
87798: LIST
87799: LIST
87800: LIST
87801: LIST
87802: LIST
87803: LIST
87804: LIST
87805: LIST
87806: LIST
87807: LIST
87808: LIST
87809: LIST
87810: LIST
87811: LIST
87812: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
87813: LD_ADDR_VAR 0 30
87817: PUSH
87818: LD_INT 0
87820: PUSH
87821: LD_INT 0
87823: PUSH
87824: EMPTY
87825: LIST
87826: LIST
87827: PUSH
87828: LD_INT 0
87830: PUSH
87831: LD_INT 1
87833: NEG
87834: PUSH
87835: EMPTY
87836: LIST
87837: LIST
87838: PUSH
87839: LD_INT 1
87841: PUSH
87842: LD_INT 0
87844: PUSH
87845: EMPTY
87846: LIST
87847: LIST
87848: PUSH
87849: LD_INT 1
87851: PUSH
87852: LD_INT 1
87854: PUSH
87855: EMPTY
87856: LIST
87857: LIST
87858: PUSH
87859: LD_INT 0
87861: PUSH
87862: LD_INT 1
87864: PUSH
87865: EMPTY
87866: LIST
87867: LIST
87868: PUSH
87869: LD_INT 1
87871: NEG
87872: PUSH
87873: LD_INT 0
87875: PUSH
87876: EMPTY
87877: LIST
87878: LIST
87879: PUSH
87880: LD_INT 1
87882: NEG
87883: PUSH
87884: LD_INT 1
87886: NEG
87887: PUSH
87888: EMPTY
87889: LIST
87890: LIST
87891: PUSH
87892: LD_INT 1
87894: NEG
87895: PUSH
87896: LD_INT 2
87898: NEG
87899: PUSH
87900: EMPTY
87901: LIST
87902: LIST
87903: PUSH
87904: LD_INT 0
87906: PUSH
87907: LD_INT 2
87909: NEG
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: PUSH
87915: LD_INT 1
87917: PUSH
87918: LD_INT 1
87920: NEG
87921: PUSH
87922: EMPTY
87923: LIST
87924: LIST
87925: PUSH
87926: LD_INT 2
87928: PUSH
87929: LD_INT 0
87931: PUSH
87932: EMPTY
87933: LIST
87934: LIST
87935: PUSH
87936: LD_INT 2
87938: PUSH
87939: LD_INT 1
87941: PUSH
87942: EMPTY
87943: LIST
87944: LIST
87945: PUSH
87946: LD_INT 2
87948: PUSH
87949: LD_INT 2
87951: PUSH
87952: EMPTY
87953: LIST
87954: LIST
87955: PUSH
87956: LD_INT 1
87958: PUSH
87959: LD_INT 2
87961: PUSH
87962: EMPTY
87963: LIST
87964: LIST
87965: PUSH
87966: LD_INT 1
87968: NEG
87969: PUSH
87970: LD_INT 1
87972: PUSH
87973: EMPTY
87974: LIST
87975: LIST
87976: PUSH
87977: LD_INT 2
87979: NEG
87980: PUSH
87981: LD_INT 0
87983: PUSH
87984: EMPTY
87985: LIST
87986: LIST
87987: PUSH
87988: LD_INT 2
87990: NEG
87991: PUSH
87992: LD_INT 1
87994: NEG
87995: PUSH
87996: EMPTY
87997: LIST
87998: LIST
87999: PUSH
88000: LD_INT 1
88002: NEG
88003: PUSH
88004: LD_INT 3
88006: NEG
88007: PUSH
88008: EMPTY
88009: LIST
88010: LIST
88011: PUSH
88012: LD_INT 1
88014: PUSH
88015: LD_INT 2
88017: NEG
88018: PUSH
88019: EMPTY
88020: LIST
88021: LIST
88022: PUSH
88023: LD_INT 3
88025: PUSH
88026: LD_INT 2
88028: PUSH
88029: EMPTY
88030: LIST
88031: LIST
88032: PUSH
88033: LD_INT 2
88035: PUSH
88036: LD_INT 3
88038: PUSH
88039: EMPTY
88040: LIST
88041: LIST
88042: PUSH
88043: LD_INT 2
88045: NEG
88046: PUSH
88047: LD_INT 1
88049: PUSH
88050: EMPTY
88051: LIST
88052: LIST
88053: PUSH
88054: LD_INT 3
88056: NEG
88057: PUSH
88058: LD_INT 1
88060: NEG
88061: PUSH
88062: EMPTY
88063: LIST
88064: LIST
88065: PUSH
88066: EMPTY
88067: LIST
88068: LIST
88069: LIST
88070: LIST
88071: LIST
88072: LIST
88073: LIST
88074: LIST
88075: LIST
88076: LIST
88077: LIST
88078: LIST
88079: LIST
88080: LIST
88081: LIST
88082: LIST
88083: LIST
88084: LIST
88085: LIST
88086: LIST
88087: LIST
88088: LIST
88089: LIST
88090: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
88091: LD_ADDR_VAR 0 31
88095: PUSH
88096: LD_INT 0
88098: PUSH
88099: LD_INT 0
88101: PUSH
88102: EMPTY
88103: LIST
88104: LIST
88105: PUSH
88106: LD_INT 0
88108: PUSH
88109: LD_INT 1
88111: NEG
88112: PUSH
88113: EMPTY
88114: LIST
88115: LIST
88116: PUSH
88117: LD_INT 1
88119: PUSH
88120: LD_INT 0
88122: PUSH
88123: EMPTY
88124: LIST
88125: LIST
88126: PUSH
88127: LD_INT 1
88129: PUSH
88130: LD_INT 1
88132: PUSH
88133: EMPTY
88134: LIST
88135: LIST
88136: PUSH
88137: LD_INT 0
88139: PUSH
88140: LD_INT 1
88142: PUSH
88143: EMPTY
88144: LIST
88145: LIST
88146: PUSH
88147: LD_INT 1
88149: NEG
88150: PUSH
88151: LD_INT 0
88153: PUSH
88154: EMPTY
88155: LIST
88156: LIST
88157: PUSH
88158: LD_INT 1
88160: NEG
88161: PUSH
88162: LD_INT 1
88164: NEG
88165: PUSH
88166: EMPTY
88167: LIST
88168: LIST
88169: PUSH
88170: LD_INT 1
88172: NEG
88173: PUSH
88174: LD_INT 2
88176: NEG
88177: PUSH
88178: EMPTY
88179: LIST
88180: LIST
88181: PUSH
88182: LD_INT 1
88184: PUSH
88185: LD_INT 1
88187: NEG
88188: PUSH
88189: EMPTY
88190: LIST
88191: LIST
88192: PUSH
88193: LD_INT 2
88195: PUSH
88196: LD_INT 0
88198: PUSH
88199: EMPTY
88200: LIST
88201: LIST
88202: PUSH
88203: LD_INT 2
88205: PUSH
88206: LD_INT 1
88208: PUSH
88209: EMPTY
88210: LIST
88211: LIST
88212: PUSH
88213: LD_INT 2
88215: PUSH
88216: LD_INT 2
88218: PUSH
88219: EMPTY
88220: LIST
88221: LIST
88222: PUSH
88223: LD_INT 1
88225: PUSH
88226: LD_INT 2
88228: PUSH
88229: EMPTY
88230: LIST
88231: LIST
88232: PUSH
88233: LD_INT 0
88235: PUSH
88236: LD_INT 2
88238: PUSH
88239: EMPTY
88240: LIST
88241: LIST
88242: PUSH
88243: LD_INT 1
88245: NEG
88246: PUSH
88247: LD_INT 1
88249: PUSH
88250: EMPTY
88251: LIST
88252: LIST
88253: PUSH
88254: LD_INT 2
88256: NEG
88257: PUSH
88258: LD_INT 1
88260: NEG
88261: PUSH
88262: EMPTY
88263: LIST
88264: LIST
88265: PUSH
88266: LD_INT 2
88268: NEG
88269: PUSH
88270: LD_INT 2
88272: NEG
88273: PUSH
88274: EMPTY
88275: LIST
88276: LIST
88277: PUSH
88278: LD_INT 2
88280: NEG
88281: PUSH
88282: LD_INT 3
88284: NEG
88285: PUSH
88286: EMPTY
88287: LIST
88288: LIST
88289: PUSH
88290: LD_INT 2
88292: PUSH
88293: LD_INT 1
88295: NEG
88296: PUSH
88297: EMPTY
88298: LIST
88299: LIST
88300: PUSH
88301: LD_INT 3
88303: PUSH
88304: LD_INT 1
88306: PUSH
88307: EMPTY
88308: LIST
88309: LIST
88310: PUSH
88311: LD_INT 1
88313: PUSH
88314: LD_INT 3
88316: PUSH
88317: EMPTY
88318: LIST
88319: LIST
88320: PUSH
88321: LD_INT 1
88323: NEG
88324: PUSH
88325: LD_INT 2
88327: PUSH
88328: EMPTY
88329: LIST
88330: LIST
88331: PUSH
88332: LD_INT 3
88334: NEG
88335: PUSH
88336: LD_INT 2
88338: NEG
88339: PUSH
88340: EMPTY
88341: LIST
88342: LIST
88343: PUSH
88344: EMPTY
88345: LIST
88346: LIST
88347: LIST
88348: LIST
88349: LIST
88350: LIST
88351: LIST
88352: LIST
88353: LIST
88354: LIST
88355: LIST
88356: LIST
88357: LIST
88358: LIST
88359: LIST
88360: LIST
88361: LIST
88362: LIST
88363: LIST
88364: LIST
88365: LIST
88366: LIST
88367: LIST
88368: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
88369: LD_ADDR_VAR 0 32
88373: PUSH
88374: LD_INT 0
88376: PUSH
88377: LD_INT 0
88379: PUSH
88380: EMPTY
88381: LIST
88382: LIST
88383: PUSH
88384: LD_INT 0
88386: PUSH
88387: LD_INT 1
88389: NEG
88390: PUSH
88391: EMPTY
88392: LIST
88393: LIST
88394: PUSH
88395: LD_INT 1
88397: PUSH
88398: LD_INT 0
88400: PUSH
88401: EMPTY
88402: LIST
88403: LIST
88404: PUSH
88405: LD_INT 1
88407: PUSH
88408: LD_INT 1
88410: PUSH
88411: EMPTY
88412: LIST
88413: LIST
88414: PUSH
88415: LD_INT 0
88417: PUSH
88418: LD_INT 1
88420: PUSH
88421: EMPTY
88422: LIST
88423: LIST
88424: PUSH
88425: LD_INT 1
88427: NEG
88428: PUSH
88429: LD_INT 0
88431: PUSH
88432: EMPTY
88433: LIST
88434: LIST
88435: PUSH
88436: LD_INT 1
88438: NEG
88439: PUSH
88440: LD_INT 1
88442: NEG
88443: PUSH
88444: EMPTY
88445: LIST
88446: LIST
88447: PUSH
88448: LD_INT 1
88450: NEG
88451: PUSH
88452: LD_INT 2
88454: NEG
88455: PUSH
88456: EMPTY
88457: LIST
88458: LIST
88459: PUSH
88460: LD_INT 0
88462: PUSH
88463: LD_INT 2
88465: NEG
88466: PUSH
88467: EMPTY
88468: LIST
88469: LIST
88470: PUSH
88471: LD_INT 1
88473: PUSH
88474: LD_INT 1
88476: NEG
88477: PUSH
88478: EMPTY
88479: LIST
88480: LIST
88481: PUSH
88482: LD_INT 2
88484: PUSH
88485: LD_INT 1
88487: PUSH
88488: EMPTY
88489: LIST
88490: LIST
88491: PUSH
88492: LD_INT 2
88494: PUSH
88495: LD_INT 2
88497: PUSH
88498: EMPTY
88499: LIST
88500: LIST
88501: PUSH
88502: LD_INT 1
88504: PUSH
88505: LD_INT 2
88507: PUSH
88508: EMPTY
88509: LIST
88510: LIST
88511: PUSH
88512: LD_INT 0
88514: PUSH
88515: LD_INT 2
88517: PUSH
88518: EMPTY
88519: LIST
88520: LIST
88521: PUSH
88522: LD_INT 1
88524: NEG
88525: PUSH
88526: LD_INT 1
88528: PUSH
88529: EMPTY
88530: LIST
88531: LIST
88532: PUSH
88533: LD_INT 2
88535: NEG
88536: PUSH
88537: LD_INT 0
88539: PUSH
88540: EMPTY
88541: LIST
88542: LIST
88543: PUSH
88544: LD_INT 2
88546: NEG
88547: PUSH
88548: LD_INT 1
88550: NEG
88551: PUSH
88552: EMPTY
88553: LIST
88554: LIST
88555: PUSH
88556: LD_INT 1
88558: NEG
88559: PUSH
88560: LD_INT 3
88562: NEG
88563: PUSH
88564: EMPTY
88565: LIST
88566: LIST
88567: PUSH
88568: LD_INT 1
88570: PUSH
88571: LD_INT 2
88573: NEG
88574: PUSH
88575: EMPTY
88576: LIST
88577: LIST
88578: PUSH
88579: LD_INT 3
88581: PUSH
88582: LD_INT 2
88584: PUSH
88585: EMPTY
88586: LIST
88587: LIST
88588: PUSH
88589: LD_INT 2
88591: PUSH
88592: LD_INT 3
88594: PUSH
88595: EMPTY
88596: LIST
88597: LIST
88598: PUSH
88599: LD_INT 2
88601: NEG
88602: PUSH
88603: LD_INT 1
88605: PUSH
88606: EMPTY
88607: LIST
88608: LIST
88609: PUSH
88610: LD_INT 3
88612: NEG
88613: PUSH
88614: LD_INT 1
88616: NEG
88617: PUSH
88618: EMPTY
88619: LIST
88620: LIST
88621: PUSH
88622: EMPTY
88623: LIST
88624: LIST
88625: LIST
88626: LIST
88627: LIST
88628: LIST
88629: LIST
88630: LIST
88631: LIST
88632: LIST
88633: LIST
88634: LIST
88635: LIST
88636: LIST
88637: LIST
88638: LIST
88639: LIST
88640: LIST
88641: LIST
88642: LIST
88643: LIST
88644: LIST
88645: LIST
88646: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
88647: LD_ADDR_VAR 0 33
88651: PUSH
88652: LD_INT 0
88654: PUSH
88655: LD_INT 0
88657: PUSH
88658: EMPTY
88659: LIST
88660: LIST
88661: PUSH
88662: LD_INT 0
88664: PUSH
88665: LD_INT 1
88667: NEG
88668: PUSH
88669: EMPTY
88670: LIST
88671: LIST
88672: PUSH
88673: LD_INT 1
88675: PUSH
88676: LD_INT 0
88678: PUSH
88679: EMPTY
88680: LIST
88681: LIST
88682: PUSH
88683: LD_INT 1
88685: PUSH
88686: LD_INT 1
88688: PUSH
88689: EMPTY
88690: LIST
88691: LIST
88692: PUSH
88693: LD_INT 0
88695: PUSH
88696: LD_INT 1
88698: PUSH
88699: EMPTY
88700: LIST
88701: LIST
88702: PUSH
88703: LD_INT 1
88705: NEG
88706: PUSH
88707: LD_INT 0
88709: PUSH
88710: EMPTY
88711: LIST
88712: LIST
88713: PUSH
88714: LD_INT 1
88716: NEG
88717: PUSH
88718: LD_INT 1
88720: NEG
88721: PUSH
88722: EMPTY
88723: LIST
88724: LIST
88725: PUSH
88726: LD_INT 1
88728: NEG
88729: PUSH
88730: LD_INT 2
88732: NEG
88733: PUSH
88734: EMPTY
88735: LIST
88736: LIST
88737: PUSH
88738: LD_INT 1
88740: PUSH
88741: LD_INT 1
88743: NEG
88744: PUSH
88745: EMPTY
88746: LIST
88747: LIST
88748: PUSH
88749: LD_INT 2
88751: PUSH
88752: LD_INT 0
88754: PUSH
88755: EMPTY
88756: LIST
88757: LIST
88758: PUSH
88759: LD_INT 2
88761: PUSH
88762: LD_INT 1
88764: PUSH
88765: EMPTY
88766: LIST
88767: LIST
88768: PUSH
88769: LD_INT 1
88771: PUSH
88772: LD_INT 2
88774: PUSH
88775: EMPTY
88776: LIST
88777: LIST
88778: PUSH
88779: LD_INT 0
88781: PUSH
88782: LD_INT 2
88784: PUSH
88785: EMPTY
88786: LIST
88787: LIST
88788: PUSH
88789: LD_INT 1
88791: NEG
88792: PUSH
88793: LD_INT 1
88795: PUSH
88796: EMPTY
88797: LIST
88798: LIST
88799: PUSH
88800: LD_INT 2
88802: NEG
88803: PUSH
88804: LD_INT 0
88806: PUSH
88807: EMPTY
88808: LIST
88809: LIST
88810: PUSH
88811: LD_INT 2
88813: NEG
88814: PUSH
88815: LD_INT 1
88817: NEG
88818: PUSH
88819: EMPTY
88820: LIST
88821: LIST
88822: PUSH
88823: LD_INT 2
88825: NEG
88826: PUSH
88827: LD_INT 2
88829: NEG
88830: PUSH
88831: EMPTY
88832: LIST
88833: LIST
88834: PUSH
88835: LD_INT 2
88837: NEG
88838: PUSH
88839: LD_INT 3
88841: NEG
88842: PUSH
88843: EMPTY
88844: LIST
88845: LIST
88846: PUSH
88847: LD_INT 2
88849: PUSH
88850: LD_INT 1
88852: NEG
88853: PUSH
88854: EMPTY
88855: LIST
88856: LIST
88857: PUSH
88858: LD_INT 3
88860: PUSH
88861: LD_INT 1
88863: PUSH
88864: EMPTY
88865: LIST
88866: LIST
88867: PUSH
88868: LD_INT 1
88870: PUSH
88871: LD_INT 3
88873: PUSH
88874: EMPTY
88875: LIST
88876: LIST
88877: PUSH
88878: LD_INT 1
88880: NEG
88881: PUSH
88882: LD_INT 2
88884: PUSH
88885: EMPTY
88886: LIST
88887: LIST
88888: PUSH
88889: LD_INT 3
88891: NEG
88892: PUSH
88893: LD_INT 2
88895: NEG
88896: PUSH
88897: EMPTY
88898: LIST
88899: LIST
88900: PUSH
88901: EMPTY
88902: LIST
88903: LIST
88904: LIST
88905: LIST
88906: LIST
88907: LIST
88908: LIST
88909: LIST
88910: LIST
88911: LIST
88912: LIST
88913: LIST
88914: LIST
88915: LIST
88916: LIST
88917: LIST
88918: LIST
88919: LIST
88920: LIST
88921: LIST
88922: LIST
88923: LIST
88924: LIST
88925: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
88926: LD_ADDR_VAR 0 34
88930: PUSH
88931: LD_INT 0
88933: PUSH
88934: LD_INT 0
88936: PUSH
88937: EMPTY
88938: LIST
88939: LIST
88940: PUSH
88941: LD_INT 0
88943: PUSH
88944: LD_INT 1
88946: NEG
88947: PUSH
88948: EMPTY
88949: LIST
88950: LIST
88951: PUSH
88952: LD_INT 1
88954: PUSH
88955: LD_INT 0
88957: PUSH
88958: EMPTY
88959: LIST
88960: LIST
88961: PUSH
88962: LD_INT 1
88964: PUSH
88965: LD_INT 1
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: PUSH
88972: LD_INT 0
88974: PUSH
88975: LD_INT 1
88977: PUSH
88978: EMPTY
88979: LIST
88980: LIST
88981: PUSH
88982: LD_INT 1
88984: NEG
88985: PUSH
88986: LD_INT 0
88988: PUSH
88989: EMPTY
88990: LIST
88991: LIST
88992: PUSH
88993: LD_INT 1
88995: NEG
88996: PUSH
88997: LD_INT 1
88999: NEG
89000: PUSH
89001: EMPTY
89002: LIST
89003: LIST
89004: PUSH
89005: LD_INT 1
89007: NEG
89008: PUSH
89009: LD_INT 2
89011: NEG
89012: PUSH
89013: EMPTY
89014: LIST
89015: LIST
89016: PUSH
89017: LD_INT 0
89019: PUSH
89020: LD_INT 2
89022: NEG
89023: PUSH
89024: EMPTY
89025: LIST
89026: LIST
89027: PUSH
89028: LD_INT 1
89030: PUSH
89031: LD_INT 1
89033: NEG
89034: PUSH
89035: EMPTY
89036: LIST
89037: LIST
89038: PUSH
89039: LD_INT 2
89041: PUSH
89042: LD_INT 1
89044: PUSH
89045: EMPTY
89046: LIST
89047: LIST
89048: PUSH
89049: LD_INT 2
89051: PUSH
89052: LD_INT 2
89054: PUSH
89055: EMPTY
89056: LIST
89057: LIST
89058: PUSH
89059: LD_INT 1
89061: PUSH
89062: LD_INT 2
89064: PUSH
89065: EMPTY
89066: LIST
89067: LIST
89068: PUSH
89069: LD_INT 1
89071: NEG
89072: PUSH
89073: LD_INT 1
89075: PUSH
89076: EMPTY
89077: LIST
89078: LIST
89079: PUSH
89080: LD_INT 2
89082: NEG
89083: PUSH
89084: LD_INT 0
89086: PUSH
89087: EMPTY
89088: LIST
89089: LIST
89090: PUSH
89091: LD_INT 2
89093: NEG
89094: PUSH
89095: LD_INT 1
89097: NEG
89098: PUSH
89099: EMPTY
89100: LIST
89101: LIST
89102: PUSH
89103: LD_INT 2
89105: NEG
89106: PUSH
89107: LD_INT 2
89109: NEG
89110: PUSH
89111: EMPTY
89112: LIST
89113: LIST
89114: PUSH
89115: LD_INT 1
89117: NEG
89118: PUSH
89119: LD_INT 3
89121: NEG
89122: PUSH
89123: EMPTY
89124: LIST
89125: LIST
89126: PUSH
89127: LD_INT 1
89129: PUSH
89130: LD_INT 2
89132: NEG
89133: PUSH
89134: EMPTY
89135: LIST
89136: LIST
89137: PUSH
89138: LD_INT 3
89140: PUSH
89141: LD_INT 2
89143: PUSH
89144: EMPTY
89145: LIST
89146: LIST
89147: PUSH
89148: LD_INT 2
89150: PUSH
89151: LD_INT 3
89153: PUSH
89154: EMPTY
89155: LIST
89156: LIST
89157: PUSH
89158: LD_INT 2
89160: NEG
89161: PUSH
89162: LD_INT 1
89164: PUSH
89165: EMPTY
89166: LIST
89167: LIST
89168: PUSH
89169: LD_INT 3
89171: NEG
89172: PUSH
89173: LD_INT 1
89175: NEG
89176: PUSH
89177: EMPTY
89178: LIST
89179: LIST
89180: PUSH
89181: EMPTY
89182: LIST
89183: LIST
89184: LIST
89185: LIST
89186: LIST
89187: LIST
89188: LIST
89189: LIST
89190: LIST
89191: LIST
89192: LIST
89193: LIST
89194: LIST
89195: LIST
89196: LIST
89197: LIST
89198: LIST
89199: LIST
89200: LIST
89201: LIST
89202: LIST
89203: LIST
89204: LIST
89205: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
89206: LD_ADDR_VAR 0 35
89210: PUSH
89211: LD_INT 0
89213: PUSH
89214: LD_INT 0
89216: PUSH
89217: EMPTY
89218: LIST
89219: LIST
89220: PUSH
89221: LD_INT 0
89223: PUSH
89224: LD_INT 1
89226: NEG
89227: PUSH
89228: EMPTY
89229: LIST
89230: LIST
89231: PUSH
89232: LD_INT 1
89234: PUSH
89235: LD_INT 0
89237: PUSH
89238: EMPTY
89239: LIST
89240: LIST
89241: PUSH
89242: LD_INT 1
89244: PUSH
89245: LD_INT 1
89247: PUSH
89248: EMPTY
89249: LIST
89250: LIST
89251: PUSH
89252: LD_INT 0
89254: PUSH
89255: LD_INT 1
89257: PUSH
89258: EMPTY
89259: LIST
89260: LIST
89261: PUSH
89262: LD_INT 1
89264: NEG
89265: PUSH
89266: LD_INT 0
89268: PUSH
89269: EMPTY
89270: LIST
89271: LIST
89272: PUSH
89273: LD_INT 1
89275: NEG
89276: PUSH
89277: LD_INT 1
89279: NEG
89280: PUSH
89281: EMPTY
89282: LIST
89283: LIST
89284: PUSH
89285: LD_INT 2
89287: PUSH
89288: LD_INT 1
89290: PUSH
89291: EMPTY
89292: LIST
89293: LIST
89294: PUSH
89295: LD_INT 2
89297: NEG
89298: PUSH
89299: LD_INT 1
89301: NEG
89302: PUSH
89303: EMPTY
89304: LIST
89305: LIST
89306: PUSH
89307: EMPTY
89308: LIST
89309: LIST
89310: LIST
89311: LIST
89312: LIST
89313: LIST
89314: LIST
89315: LIST
89316: LIST
89317: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
89318: LD_ADDR_VAR 0 36
89322: PUSH
89323: LD_INT 0
89325: PUSH
89326: LD_INT 0
89328: PUSH
89329: EMPTY
89330: LIST
89331: LIST
89332: PUSH
89333: LD_INT 0
89335: PUSH
89336: LD_INT 1
89338: NEG
89339: PUSH
89340: EMPTY
89341: LIST
89342: LIST
89343: PUSH
89344: LD_INT 1
89346: PUSH
89347: LD_INT 0
89349: PUSH
89350: EMPTY
89351: LIST
89352: LIST
89353: PUSH
89354: LD_INT 1
89356: PUSH
89357: LD_INT 1
89359: PUSH
89360: EMPTY
89361: LIST
89362: LIST
89363: PUSH
89364: LD_INT 0
89366: PUSH
89367: LD_INT 1
89369: PUSH
89370: EMPTY
89371: LIST
89372: LIST
89373: PUSH
89374: LD_INT 1
89376: NEG
89377: PUSH
89378: LD_INT 0
89380: PUSH
89381: EMPTY
89382: LIST
89383: LIST
89384: PUSH
89385: LD_INT 1
89387: NEG
89388: PUSH
89389: LD_INT 1
89391: NEG
89392: PUSH
89393: EMPTY
89394: LIST
89395: LIST
89396: PUSH
89397: LD_INT 1
89399: NEG
89400: PUSH
89401: LD_INT 2
89403: NEG
89404: PUSH
89405: EMPTY
89406: LIST
89407: LIST
89408: PUSH
89409: LD_INT 1
89411: PUSH
89412: LD_INT 2
89414: PUSH
89415: EMPTY
89416: LIST
89417: LIST
89418: PUSH
89419: EMPTY
89420: LIST
89421: LIST
89422: LIST
89423: LIST
89424: LIST
89425: LIST
89426: LIST
89427: LIST
89428: LIST
89429: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
89430: LD_ADDR_VAR 0 37
89434: PUSH
89435: LD_INT 0
89437: PUSH
89438: LD_INT 0
89440: PUSH
89441: EMPTY
89442: LIST
89443: LIST
89444: PUSH
89445: LD_INT 0
89447: PUSH
89448: LD_INT 1
89450: NEG
89451: PUSH
89452: EMPTY
89453: LIST
89454: LIST
89455: PUSH
89456: LD_INT 1
89458: PUSH
89459: LD_INT 0
89461: PUSH
89462: EMPTY
89463: LIST
89464: LIST
89465: PUSH
89466: LD_INT 1
89468: PUSH
89469: LD_INT 1
89471: PUSH
89472: EMPTY
89473: LIST
89474: LIST
89475: PUSH
89476: LD_INT 0
89478: PUSH
89479: LD_INT 1
89481: PUSH
89482: EMPTY
89483: LIST
89484: LIST
89485: PUSH
89486: LD_INT 1
89488: NEG
89489: PUSH
89490: LD_INT 0
89492: PUSH
89493: EMPTY
89494: LIST
89495: LIST
89496: PUSH
89497: LD_INT 1
89499: NEG
89500: PUSH
89501: LD_INT 1
89503: NEG
89504: PUSH
89505: EMPTY
89506: LIST
89507: LIST
89508: PUSH
89509: LD_INT 1
89511: PUSH
89512: LD_INT 1
89514: NEG
89515: PUSH
89516: EMPTY
89517: LIST
89518: LIST
89519: PUSH
89520: LD_INT 1
89522: NEG
89523: PUSH
89524: LD_INT 1
89526: PUSH
89527: EMPTY
89528: LIST
89529: LIST
89530: PUSH
89531: EMPTY
89532: LIST
89533: LIST
89534: LIST
89535: LIST
89536: LIST
89537: LIST
89538: LIST
89539: LIST
89540: LIST
89541: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
89542: LD_ADDR_VAR 0 38
89546: PUSH
89547: LD_INT 0
89549: PUSH
89550: LD_INT 0
89552: PUSH
89553: EMPTY
89554: LIST
89555: LIST
89556: PUSH
89557: LD_INT 0
89559: PUSH
89560: LD_INT 1
89562: NEG
89563: PUSH
89564: EMPTY
89565: LIST
89566: LIST
89567: PUSH
89568: LD_INT 1
89570: PUSH
89571: LD_INT 0
89573: PUSH
89574: EMPTY
89575: LIST
89576: LIST
89577: PUSH
89578: LD_INT 1
89580: PUSH
89581: LD_INT 1
89583: PUSH
89584: EMPTY
89585: LIST
89586: LIST
89587: PUSH
89588: LD_INT 0
89590: PUSH
89591: LD_INT 1
89593: PUSH
89594: EMPTY
89595: LIST
89596: LIST
89597: PUSH
89598: LD_INT 1
89600: NEG
89601: PUSH
89602: LD_INT 0
89604: PUSH
89605: EMPTY
89606: LIST
89607: LIST
89608: PUSH
89609: LD_INT 1
89611: NEG
89612: PUSH
89613: LD_INT 1
89615: NEG
89616: PUSH
89617: EMPTY
89618: LIST
89619: LIST
89620: PUSH
89621: LD_INT 2
89623: PUSH
89624: LD_INT 1
89626: PUSH
89627: EMPTY
89628: LIST
89629: LIST
89630: PUSH
89631: LD_INT 2
89633: NEG
89634: PUSH
89635: LD_INT 1
89637: NEG
89638: PUSH
89639: EMPTY
89640: LIST
89641: LIST
89642: PUSH
89643: EMPTY
89644: LIST
89645: LIST
89646: LIST
89647: LIST
89648: LIST
89649: LIST
89650: LIST
89651: LIST
89652: LIST
89653: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
89654: LD_ADDR_VAR 0 39
89658: PUSH
89659: LD_INT 0
89661: PUSH
89662: LD_INT 0
89664: PUSH
89665: EMPTY
89666: LIST
89667: LIST
89668: PUSH
89669: LD_INT 0
89671: PUSH
89672: LD_INT 1
89674: NEG
89675: PUSH
89676: EMPTY
89677: LIST
89678: LIST
89679: PUSH
89680: LD_INT 1
89682: PUSH
89683: LD_INT 0
89685: PUSH
89686: EMPTY
89687: LIST
89688: LIST
89689: PUSH
89690: LD_INT 1
89692: PUSH
89693: LD_INT 1
89695: PUSH
89696: EMPTY
89697: LIST
89698: LIST
89699: PUSH
89700: LD_INT 0
89702: PUSH
89703: LD_INT 1
89705: PUSH
89706: EMPTY
89707: LIST
89708: LIST
89709: PUSH
89710: LD_INT 1
89712: NEG
89713: PUSH
89714: LD_INT 0
89716: PUSH
89717: EMPTY
89718: LIST
89719: LIST
89720: PUSH
89721: LD_INT 1
89723: NEG
89724: PUSH
89725: LD_INT 1
89727: NEG
89728: PUSH
89729: EMPTY
89730: LIST
89731: LIST
89732: PUSH
89733: LD_INT 1
89735: NEG
89736: PUSH
89737: LD_INT 2
89739: NEG
89740: PUSH
89741: EMPTY
89742: LIST
89743: LIST
89744: PUSH
89745: LD_INT 1
89747: PUSH
89748: LD_INT 2
89750: PUSH
89751: EMPTY
89752: LIST
89753: LIST
89754: PUSH
89755: EMPTY
89756: LIST
89757: LIST
89758: LIST
89759: LIST
89760: LIST
89761: LIST
89762: LIST
89763: LIST
89764: LIST
89765: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
89766: LD_ADDR_VAR 0 40
89770: PUSH
89771: LD_INT 0
89773: PUSH
89774: LD_INT 0
89776: PUSH
89777: EMPTY
89778: LIST
89779: LIST
89780: PUSH
89781: LD_INT 0
89783: PUSH
89784: LD_INT 1
89786: NEG
89787: PUSH
89788: EMPTY
89789: LIST
89790: LIST
89791: PUSH
89792: LD_INT 1
89794: PUSH
89795: LD_INT 0
89797: PUSH
89798: EMPTY
89799: LIST
89800: LIST
89801: PUSH
89802: LD_INT 1
89804: PUSH
89805: LD_INT 1
89807: PUSH
89808: EMPTY
89809: LIST
89810: LIST
89811: PUSH
89812: LD_INT 0
89814: PUSH
89815: LD_INT 1
89817: PUSH
89818: EMPTY
89819: LIST
89820: LIST
89821: PUSH
89822: LD_INT 1
89824: NEG
89825: PUSH
89826: LD_INT 0
89828: PUSH
89829: EMPTY
89830: LIST
89831: LIST
89832: PUSH
89833: LD_INT 1
89835: NEG
89836: PUSH
89837: LD_INT 1
89839: NEG
89840: PUSH
89841: EMPTY
89842: LIST
89843: LIST
89844: PUSH
89845: LD_INT 1
89847: PUSH
89848: LD_INT 1
89850: NEG
89851: PUSH
89852: EMPTY
89853: LIST
89854: LIST
89855: PUSH
89856: LD_INT 1
89858: NEG
89859: PUSH
89860: LD_INT 1
89862: PUSH
89863: EMPTY
89864: LIST
89865: LIST
89866: PUSH
89867: EMPTY
89868: LIST
89869: LIST
89870: LIST
89871: LIST
89872: LIST
89873: LIST
89874: LIST
89875: LIST
89876: LIST
89877: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
89878: LD_ADDR_VAR 0 41
89882: PUSH
89883: LD_INT 0
89885: PUSH
89886: LD_INT 0
89888: PUSH
89889: EMPTY
89890: LIST
89891: LIST
89892: PUSH
89893: LD_INT 0
89895: PUSH
89896: LD_INT 1
89898: NEG
89899: PUSH
89900: EMPTY
89901: LIST
89902: LIST
89903: PUSH
89904: LD_INT 1
89906: PUSH
89907: LD_INT 0
89909: PUSH
89910: EMPTY
89911: LIST
89912: LIST
89913: PUSH
89914: LD_INT 1
89916: PUSH
89917: LD_INT 1
89919: PUSH
89920: EMPTY
89921: LIST
89922: LIST
89923: PUSH
89924: LD_INT 0
89926: PUSH
89927: LD_INT 1
89929: PUSH
89930: EMPTY
89931: LIST
89932: LIST
89933: PUSH
89934: LD_INT 1
89936: NEG
89937: PUSH
89938: LD_INT 0
89940: PUSH
89941: EMPTY
89942: LIST
89943: LIST
89944: PUSH
89945: LD_INT 1
89947: NEG
89948: PUSH
89949: LD_INT 1
89951: NEG
89952: PUSH
89953: EMPTY
89954: LIST
89955: LIST
89956: PUSH
89957: LD_INT 1
89959: NEG
89960: PUSH
89961: LD_INT 2
89963: NEG
89964: PUSH
89965: EMPTY
89966: LIST
89967: LIST
89968: PUSH
89969: LD_INT 1
89971: PUSH
89972: LD_INT 1
89974: NEG
89975: PUSH
89976: EMPTY
89977: LIST
89978: LIST
89979: PUSH
89980: LD_INT 2
89982: PUSH
89983: LD_INT 0
89985: PUSH
89986: EMPTY
89987: LIST
89988: LIST
89989: PUSH
89990: LD_INT 2
89992: PUSH
89993: LD_INT 1
89995: PUSH
89996: EMPTY
89997: LIST
89998: LIST
89999: PUSH
90000: LD_INT 2
90002: PUSH
90003: LD_INT 2
90005: PUSH
90006: EMPTY
90007: LIST
90008: LIST
90009: PUSH
90010: LD_INT 1
90012: PUSH
90013: LD_INT 2
90015: PUSH
90016: EMPTY
90017: LIST
90018: LIST
90019: PUSH
90020: LD_INT 1
90022: NEG
90023: PUSH
90024: LD_INT 1
90026: PUSH
90027: EMPTY
90028: LIST
90029: LIST
90030: PUSH
90031: LD_INT 2
90033: NEG
90034: PUSH
90035: LD_INT 0
90037: PUSH
90038: EMPTY
90039: LIST
90040: LIST
90041: PUSH
90042: LD_INT 2
90044: NEG
90045: PUSH
90046: LD_INT 1
90048: NEG
90049: PUSH
90050: EMPTY
90051: LIST
90052: LIST
90053: PUSH
90054: LD_INT 2
90056: NEG
90057: PUSH
90058: LD_INT 2
90060: NEG
90061: PUSH
90062: EMPTY
90063: LIST
90064: LIST
90065: PUSH
90066: LD_INT 2
90068: NEG
90069: PUSH
90070: LD_INT 3
90072: NEG
90073: PUSH
90074: EMPTY
90075: LIST
90076: LIST
90077: PUSH
90078: LD_INT 2
90080: PUSH
90081: LD_INT 1
90083: NEG
90084: PUSH
90085: EMPTY
90086: LIST
90087: LIST
90088: PUSH
90089: LD_INT 3
90091: PUSH
90092: LD_INT 0
90094: PUSH
90095: EMPTY
90096: LIST
90097: LIST
90098: PUSH
90099: LD_INT 3
90101: PUSH
90102: LD_INT 1
90104: PUSH
90105: EMPTY
90106: LIST
90107: LIST
90108: PUSH
90109: LD_INT 3
90111: PUSH
90112: LD_INT 2
90114: PUSH
90115: EMPTY
90116: LIST
90117: LIST
90118: PUSH
90119: LD_INT 3
90121: PUSH
90122: LD_INT 3
90124: PUSH
90125: EMPTY
90126: LIST
90127: LIST
90128: PUSH
90129: LD_INT 2
90131: PUSH
90132: LD_INT 3
90134: PUSH
90135: EMPTY
90136: LIST
90137: LIST
90138: PUSH
90139: LD_INT 2
90141: NEG
90142: PUSH
90143: LD_INT 1
90145: PUSH
90146: EMPTY
90147: LIST
90148: LIST
90149: PUSH
90150: LD_INT 3
90152: NEG
90153: PUSH
90154: LD_INT 0
90156: PUSH
90157: EMPTY
90158: LIST
90159: LIST
90160: PUSH
90161: LD_INT 3
90163: NEG
90164: PUSH
90165: LD_INT 1
90167: NEG
90168: PUSH
90169: EMPTY
90170: LIST
90171: LIST
90172: PUSH
90173: LD_INT 3
90175: NEG
90176: PUSH
90177: LD_INT 2
90179: NEG
90180: PUSH
90181: EMPTY
90182: LIST
90183: LIST
90184: PUSH
90185: LD_INT 3
90187: NEG
90188: PUSH
90189: LD_INT 3
90191: NEG
90192: PUSH
90193: EMPTY
90194: LIST
90195: LIST
90196: PUSH
90197: EMPTY
90198: LIST
90199: LIST
90200: LIST
90201: LIST
90202: LIST
90203: LIST
90204: LIST
90205: LIST
90206: LIST
90207: LIST
90208: LIST
90209: LIST
90210: LIST
90211: LIST
90212: LIST
90213: LIST
90214: LIST
90215: LIST
90216: LIST
90217: LIST
90218: LIST
90219: LIST
90220: LIST
90221: LIST
90222: LIST
90223: LIST
90224: LIST
90225: LIST
90226: LIST
90227: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
90228: LD_ADDR_VAR 0 42
90232: PUSH
90233: LD_INT 0
90235: PUSH
90236: LD_INT 0
90238: PUSH
90239: EMPTY
90240: LIST
90241: LIST
90242: PUSH
90243: LD_INT 0
90245: PUSH
90246: LD_INT 1
90248: NEG
90249: PUSH
90250: EMPTY
90251: LIST
90252: LIST
90253: PUSH
90254: LD_INT 1
90256: PUSH
90257: LD_INT 0
90259: PUSH
90260: EMPTY
90261: LIST
90262: LIST
90263: PUSH
90264: LD_INT 1
90266: PUSH
90267: LD_INT 1
90269: PUSH
90270: EMPTY
90271: LIST
90272: LIST
90273: PUSH
90274: LD_INT 0
90276: PUSH
90277: LD_INT 1
90279: PUSH
90280: EMPTY
90281: LIST
90282: LIST
90283: PUSH
90284: LD_INT 1
90286: NEG
90287: PUSH
90288: LD_INT 0
90290: PUSH
90291: EMPTY
90292: LIST
90293: LIST
90294: PUSH
90295: LD_INT 1
90297: NEG
90298: PUSH
90299: LD_INT 1
90301: NEG
90302: PUSH
90303: EMPTY
90304: LIST
90305: LIST
90306: PUSH
90307: LD_INT 1
90309: NEG
90310: PUSH
90311: LD_INT 2
90313: NEG
90314: PUSH
90315: EMPTY
90316: LIST
90317: LIST
90318: PUSH
90319: LD_INT 0
90321: PUSH
90322: LD_INT 2
90324: NEG
90325: PUSH
90326: EMPTY
90327: LIST
90328: LIST
90329: PUSH
90330: LD_INT 1
90332: PUSH
90333: LD_INT 1
90335: NEG
90336: PUSH
90337: EMPTY
90338: LIST
90339: LIST
90340: PUSH
90341: LD_INT 2
90343: PUSH
90344: LD_INT 1
90346: PUSH
90347: EMPTY
90348: LIST
90349: LIST
90350: PUSH
90351: LD_INT 2
90353: PUSH
90354: LD_INT 2
90356: PUSH
90357: EMPTY
90358: LIST
90359: LIST
90360: PUSH
90361: LD_INT 1
90363: PUSH
90364: LD_INT 2
90366: PUSH
90367: EMPTY
90368: LIST
90369: LIST
90370: PUSH
90371: LD_INT 0
90373: PUSH
90374: LD_INT 2
90376: PUSH
90377: EMPTY
90378: LIST
90379: LIST
90380: PUSH
90381: LD_INT 1
90383: NEG
90384: PUSH
90385: LD_INT 1
90387: PUSH
90388: EMPTY
90389: LIST
90390: LIST
90391: PUSH
90392: LD_INT 2
90394: NEG
90395: PUSH
90396: LD_INT 1
90398: NEG
90399: PUSH
90400: EMPTY
90401: LIST
90402: LIST
90403: PUSH
90404: LD_INT 2
90406: NEG
90407: PUSH
90408: LD_INT 2
90410: NEG
90411: PUSH
90412: EMPTY
90413: LIST
90414: LIST
90415: PUSH
90416: LD_INT 2
90418: NEG
90419: PUSH
90420: LD_INT 3
90422: NEG
90423: PUSH
90424: EMPTY
90425: LIST
90426: LIST
90427: PUSH
90428: LD_INT 1
90430: NEG
90431: PUSH
90432: LD_INT 3
90434: NEG
90435: PUSH
90436: EMPTY
90437: LIST
90438: LIST
90439: PUSH
90440: LD_INT 0
90442: PUSH
90443: LD_INT 3
90445: NEG
90446: PUSH
90447: EMPTY
90448: LIST
90449: LIST
90450: PUSH
90451: LD_INT 1
90453: PUSH
90454: LD_INT 2
90456: NEG
90457: PUSH
90458: EMPTY
90459: LIST
90460: LIST
90461: PUSH
90462: LD_INT 3
90464: PUSH
90465: LD_INT 2
90467: PUSH
90468: EMPTY
90469: LIST
90470: LIST
90471: PUSH
90472: LD_INT 3
90474: PUSH
90475: LD_INT 3
90477: PUSH
90478: EMPTY
90479: LIST
90480: LIST
90481: PUSH
90482: LD_INT 2
90484: PUSH
90485: LD_INT 3
90487: PUSH
90488: EMPTY
90489: LIST
90490: LIST
90491: PUSH
90492: LD_INT 1
90494: PUSH
90495: LD_INT 3
90497: PUSH
90498: EMPTY
90499: LIST
90500: LIST
90501: PUSH
90502: LD_INT 0
90504: PUSH
90505: LD_INT 3
90507: PUSH
90508: EMPTY
90509: LIST
90510: LIST
90511: PUSH
90512: LD_INT 1
90514: NEG
90515: PUSH
90516: LD_INT 2
90518: PUSH
90519: EMPTY
90520: LIST
90521: LIST
90522: PUSH
90523: LD_INT 3
90525: NEG
90526: PUSH
90527: LD_INT 2
90529: NEG
90530: PUSH
90531: EMPTY
90532: LIST
90533: LIST
90534: PUSH
90535: LD_INT 3
90537: NEG
90538: PUSH
90539: LD_INT 3
90541: NEG
90542: PUSH
90543: EMPTY
90544: LIST
90545: LIST
90546: PUSH
90547: EMPTY
90548: LIST
90549: LIST
90550: LIST
90551: LIST
90552: LIST
90553: LIST
90554: LIST
90555: LIST
90556: LIST
90557: LIST
90558: LIST
90559: LIST
90560: LIST
90561: LIST
90562: LIST
90563: LIST
90564: LIST
90565: LIST
90566: LIST
90567: LIST
90568: LIST
90569: LIST
90570: LIST
90571: LIST
90572: LIST
90573: LIST
90574: LIST
90575: LIST
90576: LIST
90577: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
90578: LD_ADDR_VAR 0 43
90582: PUSH
90583: LD_INT 0
90585: PUSH
90586: LD_INT 0
90588: PUSH
90589: EMPTY
90590: LIST
90591: LIST
90592: PUSH
90593: LD_INT 0
90595: PUSH
90596: LD_INT 1
90598: NEG
90599: PUSH
90600: EMPTY
90601: LIST
90602: LIST
90603: PUSH
90604: LD_INT 1
90606: PUSH
90607: LD_INT 0
90609: PUSH
90610: EMPTY
90611: LIST
90612: LIST
90613: PUSH
90614: LD_INT 1
90616: PUSH
90617: LD_INT 1
90619: PUSH
90620: EMPTY
90621: LIST
90622: LIST
90623: PUSH
90624: LD_INT 0
90626: PUSH
90627: LD_INT 1
90629: PUSH
90630: EMPTY
90631: LIST
90632: LIST
90633: PUSH
90634: LD_INT 1
90636: NEG
90637: PUSH
90638: LD_INT 0
90640: PUSH
90641: EMPTY
90642: LIST
90643: LIST
90644: PUSH
90645: LD_INT 1
90647: NEG
90648: PUSH
90649: LD_INT 1
90651: NEG
90652: PUSH
90653: EMPTY
90654: LIST
90655: LIST
90656: PUSH
90657: LD_INT 1
90659: NEG
90660: PUSH
90661: LD_INT 2
90663: NEG
90664: PUSH
90665: EMPTY
90666: LIST
90667: LIST
90668: PUSH
90669: LD_INT 0
90671: PUSH
90672: LD_INT 2
90674: NEG
90675: PUSH
90676: EMPTY
90677: LIST
90678: LIST
90679: PUSH
90680: LD_INT 1
90682: PUSH
90683: LD_INT 1
90685: NEG
90686: PUSH
90687: EMPTY
90688: LIST
90689: LIST
90690: PUSH
90691: LD_INT 2
90693: PUSH
90694: LD_INT 0
90696: PUSH
90697: EMPTY
90698: LIST
90699: LIST
90700: PUSH
90701: LD_INT 2
90703: PUSH
90704: LD_INT 1
90706: PUSH
90707: EMPTY
90708: LIST
90709: LIST
90710: PUSH
90711: LD_INT 1
90713: PUSH
90714: LD_INT 2
90716: PUSH
90717: EMPTY
90718: LIST
90719: LIST
90720: PUSH
90721: LD_INT 0
90723: PUSH
90724: LD_INT 2
90726: PUSH
90727: EMPTY
90728: LIST
90729: LIST
90730: PUSH
90731: LD_INT 1
90733: NEG
90734: PUSH
90735: LD_INT 1
90737: PUSH
90738: EMPTY
90739: LIST
90740: LIST
90741: PUSH
90742: LD_INT 2
90744: NEG
90745: PUSH
90746: LD_INT 0
90748: PUSH
90749: EMPTY
90750: LIST
90751: LIST
90752: PUSH
90753: LD_INT 2
90755: NEG
90756: PUSH
90757: LD_INT 1
90759: NEG
90760: PUSH
90761: EMPTY
90762: LIST
90763: LIST
90764: PUSH
90765: LD_INT 1
90767: NEG
90768: PUSH
90769: LD_INT 3
90771: NEG
90772: PUSH
90773: EMPTY
90774: LIST
90775: LIST
90776: PUSH
90777: LD_INT 0
90779: PUSH
90780: LD_INT 3
90782: NEG
90783: PUSH
90784: EMPTY
90785: LIST
90786: LIST
90787: PUSH
90788: LD_INT 1
90790: PUSH
90791: LD_INT 2
90793: NEG
90794: PUSH
90795: EMPTY
90796: LIST
90797: LIST
90798: PUSH
90799: LD_INT 2
90801: PUSH
90802: LD_INT 1
90804: NEG
90805: PUSH
90806: EMPTY
90807: LIST
90808: LIST
90809: PUSH
90810: LD_INT 3
90812: PUSH
90813: LD_INT 0
90815: PUSH
90816: EMPTY
90817: LIST
90818: LIST
90819: PUSH
90820: LD_INT 3
90822: PUSH
90823: LD_INT 1
90825: PUSH
90826: EMPTY
90827: LIST
90828: LIST
90829: PUSH
90830: LD_INT 1
90832: PUSH
90833: LD_INT 3
90835: PUSH
90836: EMPTY
90837: LIST
90838: LIST
90839: PUSH
90840: LD_INT 0
90842: PUSH
90843: LD_INT 3
90845: PUSH
90846: EMPTY
90847: LIST
90848: LIST
90849: PUSH
90850: LD_INT 1
90852: NEG
90853: PUSH
90854: LD_INT 2
90856: PUSH
90857: EMPTY
90858: LIST
90859: LIST
90860: PUSH
90861: LD_INT 2
90863: NEG
90864: PUSH
90865: LD_INT 1
90867: PUSH
90868: EMPTY
90869: LIST
90870: LIST
90871: PUSH
90872: LD_INT 3
90874: NEG
90875: PUSH
90876: LD_INT 0
90878: PUSH
90879: EMPTY
90880: LIST
90881: LIST
90882: PUSH
90883: LD_INT 3
90885: NEG
90886: PUSH
90887: LD_INT 1
90889: NEG
90890: PUSH
90891: EMPTY
90892: LIST
90893: LIST
90894: PUSH
90895: EMPTY
90896: LIST
90897: LIST
90898: LIST
90899: LIST
90900: LIST
90901: LIST
90902: LIST
90903: LIST
90904: LIST
90905: LIST
90906: LIST
90907: LIST
90908: LIST
90909: LIST
90910: LIST
90911: LIST
90912: LIST
90913: LIST
90914: LIST
90915: LIST
90916: LIST
90917: LIST
90918: LIST
90919: LIST
90920: LIST
90921: LIST
90922: LIST
90923: LIST
90924: LIST
90925: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
90926: LD_ADDR_VAR 0 44
90930: PUSH
90931: LD_INT 0
90933: PUSH
90934: LD_INT 0
90936: PUSH
90937: EMPTY
90938: LIST
90939: LIST
90940: PUSH
90941: LD_INT 0
90943: PUSH
90944: LD_INT 1
90946: NEG
90947: PUSH
90948: EMPTY
90949: LIST
90950: LIST
90951: PUSH
90952: LD_INT 1
90954: PUSH
90955: LD_INT 0
90957: PUSH
90958: EMPTY
90959: LIST
90960: LIST
90961: PUSH
90962: LD_INT 1
90964: PUSH
90965: LD_INT 1
90967: PUSH
90968: EMPTY
90969: LIST
90970: LIST
90971: PUSH
90972: LD_INT 0
90974: PUSH
90975: LD_INT 1
90977: PUSH
90978: EMPTY
90979: LIST
90980: LIST
90981: PUSH
90982: LD_INT 1
90984: NEG
90985: PUSH
90986: LD_INT 0
90988: PUSH
90989: EMPTY
90990: LIST
90991: LIST
90992: PUSH
90993: LD_INT 1
90995: NEG
90996: PUSH
90997: LD_INT 1
90999: NEG
91000: PUSH
91001: EMPTY
91002: LIST
91003: LIST
91004: PUSH
91005: LD_INT 1
91007: NEG
91008: PUSH
91009: LD_INT 2
91011: NEG
91012: PUSH
91013: EMPTY
91014: LIST
91015: LIST
91016: PUSH
91017: LD_INT 1
91019: PUSH
91020: LD_INT 1
91022: NEG
91023: PUSH
91024: EMPTY
91025: LIST
91026: LIST
91027: PUSH
91028: LD_INT 2
91030: PUSH
91031: LD_INT 0
91033: PUSH
91034: EMPTY
91035: LIST
91036: LIST
91037: PUSH
91038: LD_INT 2
91040: PUSH
91041: LD_INT 1
91043: PUSH
91044: EMPTY
91045: LIST
91046: LIST
91047: PUSH
91048: LD_INT 2
91050: PUSH
91051: LD_INT 2
91053: PUSH
91054: EMPTY
91055: LIST
91056: LIST
91057: PUSH
91058: LD_INT 1
91060: PUSH
91061: LD_INT 2
91063: PUSH
91064: EMPTY
91065: LIST
91066: LIST
91067: PUSH
91068: LD_INT 1
91070: NEG
91071: PUSH
91072: LD_INT 1
91074: PUSH
91075: EMPTY
91076: LIST
91077: LIST
91078: PUSH
91079: LD_INT 2
91081: NEG
91082: PUSH
91083: LD_INT 0
91085: PUSH
91086: EMPTY
91087: LIST
91088: LIST
91089: PUSH
91090: LD_INT 2
91092: NEG
91093: PUSH
91094: LD_INT 1
91096: NEG
91097: PUSH
91098: EMPTY
91099: LIST
91100: LIST
91101: PUSH
91102: LD_INT 2
91104: NEG
91105: PUSH
91106: LD_INT 2
91108: NEG
91109: PUSH
91110: EMPTY
91111: LIST
91112: LIST
91113: PUSH
91114: LD_INT 2
91116: NEG
91117: PUSH
91118: LD_INT 3
91120: NEG
91121: PUSH
91122: EMPTY
91123: LIST
91124: LIST
91125: PUSH
91126: LD_INT 2
91128: PUSH
91129: LD_INT 1
91131: NEG
91132: PUSH
91133: EMPTY
91134: LIST
91135: LIST
91136: PUSH
91137: LD_INT 3
91139: PUSH
91140: LD_INT 0
91142: PUSH
91143: EMPTY
91144: LIST
91145: LIST
91146: PUSH
91147: LD_INT 3
91149: PUSH
91150: LD_INT 1
91152: PUSH
91153: EMPTY
91154: LIST
91155: LIST
91156: PUSH
91157: LD_INT 3
91159: PUSH
91160: LD_INT 2
91162: PUSH
91163: EMPTY
91164: LIST
91165: LIST
91166: PUSH
91167: LD_INT 3
91169: PUSH
91170: LD_INT 3
91172: PUSH
91173: EMPTY
91174: LIST
91175: LIST
91176: PUSH
91177: LD_INT 2
91179: PUSH
91180: LD_INT 3
91182: PUSH
91183: EMPTY
91184: LIST
91185: LIST
91186: PUSH
91187: LD_INT 2
91189: NEG
91190: PUSH
91191: LD_INT 1
91193: PUSH
91194: EMPTY
91195: LIST
91196: LIST
91197: PUSH
91198: LD_INT 3
91200: NEG
91201: PUSH
91202: LD_INT 0
91204: PUSH
91205: EMPTY
91206: LIST
91207: LIST
91208: PUSH
91209: LD_INT 3
91211: NEG
91212: PUSH
91213: LD_INT 1
91215: NEG
91216: PUSH
91217: EMPTY
91218: LIST
91219: LIST
91220: PUSH
91221: LD_INT 3
91223: NEG
91224: PUSH
91225: LD_INT 2
91227: NEG
91228: PUSH
91229: EMPTY
91230: LIST
91231: LIST
91232: PUSH
91233: LD_INT 3
91235: NEG
91236: PUSH
91237: LD_INT 3
91239: NEG
91240: PUSH
91241: EMPTY
91242: LIST
91243: LIST
91244: PUSH
91245: EMPTY
91246: LIST
91247: LIST
91248: LIST
91249: LIST
91250: LIST
91251: LIST
91252: LIST
91253: LIST
91254: LIST
91255: LIST
91256: LIST
91257: LIST
91258: LIST
91259: LIST
91260: LIST
91261: LIST
91262: LIST
91263: LIST
91264: LIST
91265: LIST
91266: LIST
91267: LIST
91268: LIST
91269: LIST
91270: LIST
91271: LIST
91272: LIST
91273: LIST
91274: LIST
91275: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
91276: LD_ADDR_VAR 0 45
91280: PUSH
91281: LD_INT 0
91283: PUSH
91284: LD_INT 0
91286: PUSH
91287: EMPTY
91288: LIST
91289: LIST
91290: PUSH
91291: LD_INT 0
91293: PUSH
91294: LD_INT 1
91296: NEG
91297: PUSH
91298: EMPTY
91299: LIST
91300: LIST
91301: PUSH
91302: LD_INT 1
91304: PUSH
91305: LD_INT 0
91307: PUSH
91308: EMPTY
91309: LIST
91310: LIST
91311: PUSH
91312: LD_INT 1
91314: PUSH
91315: LD_INT 1
91317: PUSH
91318: EMPTY
91319: LIST
91320: LIST
91321: PUSH
91322: LD_INT 0
91324: PUSH
91325: LD_INT 1
91327: PUSH
91328: EMPTY
91329: LIST
91330: LIST
91331: PUSH
91332: LD_INT 1
91334: NEG
91335: PUSH
91336: LD_INT 0
91338: PUSH
91339: EMPTY
91340: LIST
91341: LIST
91342: PUSH
91343: LD_INT 1
91345: NEG
91346: PUSH
91347: LD_INT 1
91349: NEG
91350: PUSH
91351: EMPTY
91352: LIST
91353: LIST
91354: PUSH
91355: LD_INT 1
91357: NEG
91358: PUSH
91359: LD_INT 2
91361: NEG
91362: PUSH
91363: EMPTY
91364: LIST
91365: LIST
91366: PUSH
91367: LD_INT 0
91369: PUSH
91370: LD_INT 2
91372: NEG
91373: PUSH
91374: EMPTY
91375: LIST
91376: LIST
91377: PUSH
91378: LD_INT 1
91380: PUSH
91381: LD_INT 1
91383: NEG
91384: PUSH
91385: EMPTY
91386: LIST
91387: LIST
91388: PUSH
91389: LD_INT 2
91391: PUSH
91392: LD_INT 1
91394: PUSH
91395: EMPTY
91396: LIST
91397: LIST
91398: PUSH
91399: LD_INT 2
91401: PUSH
91402: LD_INT 2
91404: PUSH
91405: EMPTY
91406: LIST
91407: LIST
91408: PUSH
91409: LD_INT 1
91411: PUSH
91412: LD_INT 2
91414: PUSH
91415: EMPTY
91416: LIST
91417: LIST
91418: PUSH
91419: LD_INT 0
91421: PUSH
91422: LD_INT 2
91424: PUSH
91425: EMPTY
91426: LIST
91427: LIST
91428: PUSH
91429: LD_INT 1
91431: NEG
91432: PUSH
91433: LD_INT 1
91435: PUSH
91436: EMPTY
91437: LIST
91438: LIST
91439: PUSH
91440: LD_INT 2
91442: NEG
91443: PUSH
91444: LD_INT 1
91446: NEG
91447: PUSH
91448: EMPTY
91449: LIST
91450: LIST
91451: PUSH
91452: LD_INT 2
91454: NEG
91455: PUSH
91456: LD_INT 2
91458: NEG
91459: PUSH
91460: EMPTY
91461: LIST
91462: LIST
91463: PUSH
91464: LD_INT 2
91466: NEG
91467: PUSH
91468: LD_INT 3
91470: NEG
91471: PUSH
91472: EMPTY
91473: LIST
91474: LIST
91475: PUSH
91476: LD_INT 1
91478: NEG
91479: PUSH
91480: LD_INT 3
91482: NEG
91483: PUSH
91484: EMPTY
91485: LIST
91486: LIST
91487: PUSH
91488: LD_INT 0
91490: PUSH
91491: LD_INT 3
91493: NEG
91494: PUSH
91495: EMPTY
91496: LIST
91497: LIST
91498: PUSH
91499: LD_INT 1
91501: PUSH
91502: LD_INT 2
91504: NEG
91505: PUSH
91506: EMPTY
91507: LIST
91508: LIST
91509: PUSH
91510: LD_INT 3
91512: PUSH
91513: LD_INT 2
91515: PUSH
91516: EMPTY
91517: LIST
91518: LIST
91519: PUSH
91520: LD_INT 3
91522: PUSH
91523: LD_INT 3
91525: PUSH
91526: EMPTY
91527: LIST
91528: LIST
91529: PUSH
91530: LD_INT 2
91532: PUSH
91533: LD_INT 3
91535: PUSH
91536: EMPTY
91537: LIST
91538: LIST
91539: PUSH
91540: LD_INT 1
91542: PUSH
91543: LD_INT 3
91545: PUSH
91546: EMPTY
91547: LIST
91548: LIST
91549: PUSH
91550: LD_INT 0
91552: PUSH
91553: LD_INT 3
91555: PUSH
91556: EMPTY
91557: LIST
91558: LIST
91559: PUSH
91560: LD_INT 1
91562: NEG
91563: PUSH
91564: LD_INT 2
91566: PUSH
91567: EMPTY
91568: LIST
91569: LIST
91570: PUSH
91571: LD_INT 3
91573: NEG
91574: PUSH
91575: LD_INT 2
91577: NEG
91578: PUSH
91579: EMPTY
91580: LIST
91581: LIST
91582: PUSH
91583: LD_INT 3
91585: NEG
91586: PUSH
91587: LD_INT 3
91589: NEG
91590: PUSH
91591: EMPTY
91592: LIST
91593: LIST
91594: PUSH
91595: EMPTY
91596: LIST
91597: LIST
91598: LIST
91599: LIST
91600: LIST
91601: LIST
91602: LIST
91603: LIST
91604: LIST
91605: LIST
91606: LIST
91607: LIST
91608: LIST
91609: LIST
91610: LIST
91611: LIST
91612: LIST
91613: LIST
91614: LIST
91615: LIST
91616: LIST
91617: LIST
91618: LIST
91619: LIST
91620: LIST
91621: LIST
91622: LIST
91623: LIST
91624: LIST
91625: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
91626: LD_ADDR_VAR 0 46
91630: PUSH
91631: LD_INT 0
91633: PUSH
91634: LD_INT 0
91636: PUSH
91637: EMPTY
91638: LIST
91639: LIST
91640: PUSH
91641: LD_INT 0
91643: PUSH
91644: LD_INT 1
91646: NEG
91647: PUSH
91648: EMPTY
91649: LIST
91650: LIST
91651: PUSH
91652: LD_INT 1
91654: PUSH
91655: LD_INT 0
91657: PUSH
91658: EMPTY
91659: LIST
91660: LIST
91661: PUSH
91662: LD_INT 1
91664: PUSH
91665: LD_INT 1
91667: PUSH
91668: EMPTY
91669: LIST
91670: LIST
91671: PUSH
91672: LD_INT 0
91674: PUSH
91675: LD_INT 1
91677: PUSH
91678: EMPTY
91679: LIST
91680: LIST
91681: PUSH
91682: LD_INT 1
91684: NEG
91685: PUSH
91686: LD_INT 0
91688: PUSH
91689: EMPTY
91690: LIST
91691: LIST
91692: PUSH
91693: LD_INT 1
91695: NEG
91696: PUSH
91697: LD_INT 1
91699: NEG
91700: PUSH
91701: EMPTY
91702: LIST
91703: LIST
91704: PUSH
91705: LD_INT 1
91707: NEG
91708: PUSH
91709: LD_INT 2
91711: NEG
91712: PUSH
91713: EMPTY
91714: LIST
91715: LIST
91716: PUSH
91717: LD_INT 0
91719: PUSH
91720: LD_INT 2
91722: NEG
91723: PUSH
91724: EMPTY
91725: LIST
91726: LIST
91727: PUSH
91728: LD_INT 1
91730: PUSH
91731: LD_INT 1
91733: NEG
91734: PUSH
91735: EMPTY
91736: LIST
91737: LIST
91738: PUSH
91739: LD_INT 2
91741: PUSH
91742: LD_INT 0
91744: PUSH
91745: EMPTY
91746: LIST
91747: LIST
91748: PUSH
91749: LD_INT 2
91751: PUSH
91752: LD_INT 1
91754: PUSH
91755: EMPTY
91756: LIST
91757: LIST
91758: PUSH
91759: LD_INT 1
91761: PUSH
91762: LD_INT 2
91764: PUSH
91765: EMPTY
91766: LIST
91767: LIST
91768: PUSH
91769: LD_INT 0
91771: PUSH
91772: LD_INT 2
91774: PUSH
91775: EMPTY
91776: LIST
91777: LIST
91778: PUSH
91779: LD_INT 1
91781: NEG
91782: PUSH
91783: LD_INT 1
91785: PUSH
91786: EMPTY
91787: LIST
91788: LIST
91789: PUSH
91790: LD_INT 2
91792: NEG
91793: PUSH
91794: LD_INT 0
91796: PUSH
91797: EMPTY
91798: LIST
91799: LIST
91800: PUSH
91801: LD_INT 2
91803: NEG
91804: PUSH
91805: LD_INT 1
91807: NEG
91808: PUSH
91809: EMPTY
91810: LIST
91811: LIST
91812: PUSH
91813: LD_INT 1
91815: NEG
91816: PUSH
91817: LD_INT 3
91819: NEG
91820: PUSH
91821: EMPTY
91822: LIST
91823: LIST
91824: PUSH
91825: LD_INT 0
91827: PUSH
91828: LD_INT 3
91830: NEG
91831: PUSH
91832: EMPTY
91833: LIST
91834: LIST
91835: PUSH
91836: LD_INT 1
91838: PUSH
91839: LD_INT 2
91841: NEG
91842: PUSH
91843: EMPTY
91844: LIST
91845: LIST
91846: PUSH
91847: LD_INT 2
91849: PUSH
91850: LD_INT 1
91852: NEG
91853: PUSH
91854: EMPTY
91855: LIST
91856: LIST
91857: PUSH
91858: LD_INT 3
91860: PUSH
91861: LD_INT 0
91863: PUSH
91864: EMPTY
91865: LIST
91866: LIST
91867: PUSH
91868: LD_INT 3
91870: PUSH
91871: LD_INT 1
91873: PUSH
91874: EMPTY
91875: LIST
91876: LIST
91877: PUSH
91878: LD_INT 1
91880: PUSH
91881: LD_INT 3
91883: PUSH
91884: EMPTY
91885: LIST
91886: LIST
91887: PUSH
91888: LD_INT 0
91890: PUSH
91891: LD_INT 3
91893: PUSH
91894: EMPTY
91895: LIST
91896: LIST
91897: PUSH
91898: LD_INT 1
91900: NEG
91901: PUSH
91902: LD_INT 2
91904: PUSH
91905: EMPTY
91906: LIST
91907: LIST
91908: PUSH
91909: LD_INT 2
91911: NEG
91912: PUSH
91913: LD_INT 1
91915: PUSH
91916: EMPTY
91917: LIST
91918: LIST
91919: PUSH
91920: LD_INT 3
91922: NEG
91923: PUSH
91924: LD_INT 0
91926: PUSH
91927: EMPTY
91928: LIST
91929: LIST
91930: PUSH
91931: LD_INT 3
91933: NEG
91934: PUSH
91935: LD_INT 1
91937: NEG
91938: PUSH
91939: EMPTY
91940: LIST
91941: LIST
91942: PUSH
91943: EMPTY
91944: LIST
91945: LIST
91946: LIST
91947: LIST
91948: LIST
91949: LIST
91950: LIST
91951: LIST
91952: LIST
91953: LIST
91954: LIST
91955: LIST
91956: LIST
91957: LIST
91958: LIST
91959: LIST
91960: LIST
91961: LIST
91962: LIST
91963: LIST
91964: LIST
91965: LIST
91966: LIST
91967: LIST
91968: LIST
91969: LIST
91970: LIST
91971: LIST
91972: LIST
91973: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
91974: LD_ADDR_VAR 0 47
91978: PUSH
91979: LD_INT 0
91981: PUSH
91982: LD_INT 0
91984: PUSH
91985: EMPTY
91986: LIST
91987: LIST
91988: PUSH
91989: LD_INT 0
91991: PUSH
91992: LD_INT 1
91994: NEG
91995: PUSH
91996: EMPTY
91997: LIST
91998: LIST
91999: PUSH
92000: LD_INT 1
92002: PUSH
92003: LD_INT 0
92005: PUSH
92006: EMPTY
92007: LIST
92008: LIST
92009: PUSH
92010: LD_INT 1
92012: PUSH
92013: LD_INT 1
92015: PUSH
92016: EMPTY
92017: LIST
92018: LIST
92019: PUSH
92020: LD_INT 0
92022: PUSH
92023: LD_INT 1
92025: PUSH
92026: EMPTY
92027: LIST
92028: LIST
92029: PUSH
92030: LD_INT 1
92032: NEG
92033: PUSH
92034: LD_INT 0
92036: PUSH
92037: EMPTY
92038: LIST
92039: LIST
92040: PUSH
92041: LD_INT 1
92043: NEG
92044: PUSH
92045: LD_INT 1
92047: NEG
92048: PUSH
92049: EMPTY
92050: LIST
92051: LIST
92052: PUSH
92053: LD_INT 1
92055: NEG
92056: PUSH
92057: LD_INT 2
92059: NEG
92060: PUSH
92061: EMPTY
92062: LIST
92063: LIST
92064: PUSH
92065: LD_INT 0
92067: PUSH
92068: LD_INT 2
92070: NEG
92071: PUSH
92072: EMPTY
92073: LIST
92074: LIST
92075: PUSH
92076: LD_INT 1
92078: PUSH
92079: LD_INT 1
92081: NEG
92082: PUSH
92083: EMPTY
92084: LIST
92085: LIST
92086: PUSH
92087: LD_INT 2
92089: NEG
92090: PUSH
92091: LD_INT 1
92093: NEG
92094: PUSH
92095: EMPTY
92096: LIST
92097: LIST
92098: PUSH
92099: LD_INT 2
92101: NEG
92102: PUSH
92103: LD_INT 2
92105: NEG
92106: PUSH
92107: EMPTY
92108: LIST
92109: LIST
92110: PUSH
92111: EMPTY
92112: LIST
92113: LIST
92114: LIST
92115: LIST
92116: LIST
92117: LIST
92118: LIST
92119: LIST
92120: LIST
92121: LIST
92122: LIST
92123: LIST
92124: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
92125: LD_ADDR_VAR 0 48
92129: PUSH
92130: LD_INT 0
92132: PUSH
92133: LD_INT 0
92135: PUSH
92136: EMPTY
92137: LIST
92138: LIST
92139: PUSH
92140: LD_INT 0
92142: PUSH
92143: LD_INT 1
92145: NEG
92146: PUSH
92147: EMPTY
92148: LIST
92149: LIST
92150: PUSH
92151: LD_INT 1
92153: PUSH
92154: LD_INT 0
92156: PUSH
92157: EMPTY
92158: LIST
92159: LIST
92160: PUSH
92161: LD_INT 1
92163: PUSH
92164: LD_INT 1
92166: PUSH
92167: EMPTY
92168: LIST
92169: LIST
92170: PUSH
92171: LD_INT 0
92173: PUSH
92174: LD_INT 1
92176: PUSH
92177: EMPTY
92178: LIST
92179: LIST
92180: PUSH
92181: LD_INT 1
92183: NEG
92184: PUSH
92185: LD_INT 0
92187: PUSH
92188: EMPTY
92189: LIST
92190: LIST
92191: PUSH
92192: LD_INT 1
92194: NEG
92195: PUSH
92196: LD_INT 1
92198: NEG
92199: PUSH
92200: EMPTY
92201: LIST
92202: LIST
92203: PUSH
92204: LD_INT 1
92206: NEG
92207: PUSH
92208: LD_INT 2
92210: NEG
92211: PUSH
92212: EMPTY
92213: LIST
92214: LIST
92215: PUSH
92216: LD_INT 0
92218: PUSH
92219: LD_INT 2
92221: NEG
92222: PUSH
92223: EMPTY
92224: LIST
92225: LIST
92226: PUSH
92227: LD_INT 1
92229: PUSH
92230: LD_INT 1
92232: NEG
92233: PUSH
92234: EMPTY
92235: LIST
92236: LIST
92237: PUSH
92238: LD_INT 2
92240: PUSH
92241: LD_INT 0
92243: PUSH
92244: EMPTY
92245: LIST
92246: LIST
92247: PUSH
92248: LD_INT 2
92250: PUSH
92251: LD_INT 1
92253: PUSH
92254: EMPTY
92255: LIST
92256: LIST
92257: PUSH
92258: EMPTY
92259: LIST
92260: LIST
92261: LIST
92262: LIST
92263: LIST
92264: LIST
92265: LIST
92266: LIST
92267: LIST
92268: LIST
92269: LIST
92270: LIST
92271: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
92272: LD_ADDR_VAR 0 49
92276: PUSH
92277: LD_INT 0
92279: PUSH
92280: LD_INT 0
92282: PUSH
92283: EMPTY
92284: LIST
92285: LIST
92286: PUSH
92287: LD_INT 0
92289: PUSH
92290: LD_INT 1
92292: NEG
92293: PUSH
92294: EMPTY
92295: LIST
92296: LIST
92297: PUSH
92298: LD_INT 1
92300: PUSH
92301: LD_INT 0
92303: PUSH
92304: EMPTY
92305: LIST
92306: LIST
92307: PUSH
92308: LD_INT 1
92310: PUSH
92311: LD_INT 1
92313: PUSH
92314: EMPTY
92315: LIST
92316: LIST
92317: PUSH
92318: LD_INT 0
92320: PUSH
92321: LD_INT 1
92323: PUSH
92324: EMPTY
92325: LIST
92326: LIST
92327: PUSH
92328: LD_INT 1
92330: NEG
92331: PUSH
92332: LD_INT 0
92334: PUSH
92335: EMPTY
92336: LIST
92337: LIST
92338: PUSH
92339: LD_INT 1
92341: NEG
92342: PUSH
92343: LD_INT 1
92345: NEG
92346: PUSH
92347: EMPTY
92348: LIST
92349: LIST
92350: PUSH
92351: LD_INT 1
92353: PUSH
92354: LD_INT 1
92356: NEG
92357: PUSH
92358: EMPTY
92359: LIST
92360: LIST
92361: PUSH
92362: LD_INT 2
92364: PUSH
92365: LD_INT 0
92367: PUSH
92368: EMPTY
92369: LIST
92370: LIST
92371: PUSH
92372: LD_INT 2
92374: PUSH
92375: LD_INT 1
92377: PUSH
92378: EMPTY
92379: LIST
92380: LIST
92381: PUSH
92382: LD_INT 2
92384: PUSH
92385: LD_INT 2
92387: PUSH
92388: EMPTY
92389: LIST
92390: LIST
92391: PUSH
92392: LD_INT 1
92394: PUSH
92395: LD_INT 2
92397: PUSH
92398: EMPTY
92399: LIST
92400: LIST
92401: PUSH
92402: EMPTY
92403: LIST
92404: LIST
92405: LIST
92406: LIST
92407: LIST
92408: LIST
92409: LIST
92410: LIST
92411: LIST
92412: LIST
92413: LIST
92414: LIST
92415: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
92416: LD_ADDR_VAR 0 50
92420: PUSH
92421: LD_INT 0
92423: PUSH
92424: LD_INT 0
92426: PUSH
92427: EMPTY
92428: LIST
92429: LIST
92430: PUSH
92431: LD_INT 0
92433: PUSH
92434: LD_INT 1
92436: NEG
92437: PUSH
92438: EMPTY
92439: LIST
92440: LIST
92441: PUSH
92442: LD_INT 1
92444: PUSH
92445: LD_INT 0
92447: PUSH
92448: EMPTY
92449: LIST
92450: LIST
92451: PUSH
92452: LD_INT 1
92454: PUSH
92455: LD_INT 1
92457: PUSH
92458: EMPTY
92459: LIST
92460: LIST
92461: PUSH
92462: LD_INT 0
92464: PUSH
92465: LD_INT 1
92467: PUSH
92468: EMPTY
92469: LIST
92470: LIST
92471: PUSH
92472: LD_INT 1
92474: NEG
92475: PUSH
92476: LD_INT 0
92478: PUSH
92479: EMPTY
92480: LIST
92481: LIST
92482: PUSH
92483: LD_INT 1
92485: NEG
92486: PUSH
92487: LD_INT 1
92489: NEG
92490: PUSH
92491: EMPTY
92492: LIST
92493: LIST
92494: PUSH
92495: LD_INT 2
92497: PUSH
92498: LD_INT 1
92500: PUSH
92501: EMPTY
92502: LIST
92503: LIST
92504: PUSH
92505: LD_INT 2
92507: PUSH
92508: LD_INT 2
92510: PUSH
92511: EMPTY
92512: LIST
92513: LIST
92514: PUSH
92515: LD_INT 1
92517: PUSH
92518: LD_INT 2
92520: PUSH
92521: EMPTY
92522: LIST
92523: LIST
92524: PUSH
92525: LD_INT 0
92527: PUSH
92528: LD_INT 2
92530: PUSH
92531: EMPTY
92532: LIST
92533: LIST
92534: PUSH
92535: LD_INT 1
92537: NEG
92538: PUSH
92539: LD_INT 1
92541: PUSH
92542: EMPTY
92543: LIST
92544: LIST
92545: PUSH
92546: EMPTY
92547: LIST
92548: LIST
92549: LIST
92550: LIST
92551: LIST
92552: LIST
92553: LIST
92554: LIST
92555: LIST
92556: LIST
92557: LIST
92558: LIST
92559: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
92560: LD_ADDR_VAR 0 51
92564: PUSH
92565: LD_INT 0
92567: PUSH
92568: LD_INT 0
92570: PUSH
92571: EMPTY
92572: LIST
92573: LIST
92574: PUSH
92575: LD_INT 0
92577: PUSH
92578: LD_INT 1
92580: NEG
92581: PUSH
92582: EMPTY
92583: LIST
92584: LIST
92585: PUSH
92586: LD_INT 1
92588: PUSH
92589: LD_INT 0
92591: PUSH
92592: EMPTY
92593: LIST
92594: LIST
92595: PUSH
92596: LD_INT 1
92598: PUSH
92599: LD_INT 1
92601: PUSH
92602: EMPTY
92603: LIST
92604: LIST
92605: PUSH
92606: LD_INT 0
92608: PUSH
92609: LD_INT 1
92611: PUSH
92612: EMPTY
92613: LIST
92614: LIST
92615: PUSH
92616: LD_INT 1
92618: NEG
92619: PUSH
92620: LD_INT 0
92622: PUSH
92623: EMPTY
92624: LIST
92625: LIST
92626: PUSH
92627: LD_INT 1
92629: NEG
92630: PUSH
92631: LD_INT 1
92633: NEG
92634: PUSH
92635: EMPTY
92636: LIST
92637: LIST
92638: PUSH
92639: LD_INT 1
92641: PUSH
92642: LD_INT 2
92644: PUSH
92645: EMPTY
92646: LIST
92647: LIST
92648: PUSH
92649: LD_INT 0
92651: PUSH
92652: LD_INT 2
92654: PUSH
92655: EMPTY
92656: LIST
92657: LIST
92658: PUSH
92659: LD_INT 1
92661: NEG
92662: PUSH
92663: LD_INT 1
92665: PUSH
92666: EMPTY
92667: LIST
92668: LIST
92669: PUSH
92670: LD_INT 2
92672: NEG
92673: PUSH
92674: LD_INT 0
92676: PUSH
92677: EMPTY
92678: LIST
92679: LIST
92680: PUSH
92681: LD_INT 2
92683: NEG
92684: PUSH
92685: LD_INT 1
92687: NEG
92688: PUSH
92689: EMPTY
92690: LIST
92691: LIST
92692: PUSH
92693: EMPTY
92694: LIST
92695: LIST
92696: LIST
92697: LIST
92698: LIST
92699: LIST
92700: LIST
92701: LIST
92702: LIST
92703: LIST
92704: LIST
92705: LIST
92706: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
92707: LD_ADDR_VAR 0 52
92711: PUSH
92712: LD_INT 0
92714: PUSH
92715: LD_INT 0
92717: PUSH
92718: EMPTY
92719: LIST
92720: LIST
92721: PUSH
92722: LD_INT 0
92724: PUSH
92725: LD_INT 1
92727: NEG
92728: PUSH
92729: EMPTY
92730: LIST
92731: LIST
92732: PUSH
92733: LD_INT 1
92735: PUSH
92736: LD_INT 0
92738: PUSH
92739: EMPTY
92740: LIST
92741: LIST
92742: PUSH
92743: LD_INT 1
92745: PUSH
92746: LD_INT 1
92748: PUSH
92749: EMPTY
92750: LIST
92751: LIST
92752: PUSH
92753: LD_INT 0
92755: PUSH
92756: LD_INT 1
92758: PUSH
92759: EMPTY
92760: LIST
92761: LIST
92762: PUSH
92763: LD_INT 1
92765: NEG
92766: PUSH
92767: LD_INT 0
92769: PUSH
92770: EMPTY
92771: LIST
92772: LIST
92773: PUSH
92774: LD_INT 1
92776: NEG
92777: PUSH
92778: LD_INT 1
92780: NEG
92781: PUSH
92782: EMPTY
92783: LIST
92784: LIST
92785: PUSH
92786: LD_INT 1
92788: NEG
92789: PUSH
92790: LD_INT 2
92792: NEG
92793: PUSH
92794: EMPTY
92795: LIST
92796: LIST
92797: PUSH
92798: LD_INT 1
92800: NEG
92801: PUSH
92802: LD_INT 1
92804: PUSH
92805: EMPTY
92806: LIST
92807: LIST
92808: PUSH
92809: LD_INT 2
92811: NEG
92812: PUSH
92813: LD_INT 0
92815: PUSH
92816: EMPTY
92817: LIST
92818: LIST
92819: PUSH
92820: LD_INT 2
92822: NEG
92823: PUSH
92824: LD_INT 1
92826: NEG
92827: PUSH
92828: EMPTY
92829: LIST
92830: LIST
92831: PUSH
92832: LD_INT 2
92834: NEG
92835: PUSH
92836: LD_INT 2
92838: NEG
92839: PUSH
92840: EMPTY
92841: LIST
92842: LIST
92843: PUSH
92844: EMPTY
92845: LIST
92846: LIST
92847: LIST
92848: LIST
92849: LIST
92850: LIST
92851: LIST
92852: LIST
92853: LIST
92854: LIST
92855: LIST
92856: LIST
92857: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
92858: LD_ADDR_VAR 0 53
92862: PUSH
92863: LD_INT 0
92865: PUSH
92866: LD_INT 0
92868: PUSH
92869: EMPTY
92870: LIST
92871: LIST
92872: PUSH
92873: LD_INT 0
92875: PUSH
92876: LD_INT 1
92878: NEG
92879: PUSH
92880: EMPTY
92881: LIST
92882: LIST
92883: PUSH
92884: LD_INT 1
92886: PUSH
92887: LD_INT 0
92889: PUSH
92890: EMPTY
92891: LIST
92892: LIST
92893: PUSH
92894: LD_INT 1
92896: PUSH
92897: LD_INT 1
92899: PUSH
92900: EMPTY
92901: LIST
92902: LIST
92903: PUSH
92904: LD_INT 0
92906: PUSH
92907: LD_INT 1
92909: PUSH
92910: EMPTY
92911: LIST
92912: LIST
92913: PUSH
92914: LD_INT 1
92916: NEG
92917: PUSH
92918: LD_INT 0
92920: PUSH
92921: EMPTY
92922: LIST
92923: LIST
92924: PUSH
92925: LD_INT 1
92927: NEG
92928: PUSH
92929: LD_INT 1
92931: NEG
92932: PUSH
92933: EMPTY
92934: LIST
92935: LIST
92936: PUSH
92937: LD_INT 1
92939: NEG
92940: PUSH
92941: LD_INT 2
92943: NEG
92944: PUSH
92945: EMPTY
92946: LIST
92947: LIST
92948: PUSH
92949: LD_INT 0
92951: PUSH
92952: LD_INT 2
92954: NEG
92955: PUSH
92956: EMPTY
92957: LIST
92958: LIST
92959: PUSH
92960: LD_INT 1
92962: PUSH
92963: LD_INT 1
92965: NEG
92966: PUSH
92967: EMPTY
92968: LIST
92969: LIST
92970: PUSH
92971: LD_INT 2
92973: PUSH
92974: LD_INT 0
92976: PUSH
92977: EMPTY
92978: LIST
92979: LIST
92980: PUSH
92981: LD_INT 2
92983: PUSH
92984: LD_INT 1
92986: PUSH
92987: EMPTY
92988: LIST
92989: LIST
92990: PUSH
92991: LD_INT 2
92993: PUSH
92994: LD_INT 2
92996: PUSH
92997: EMPTY
92998: LIST
92999: LIST
93000: PUSH
93001: LD_INT 1
93003: PUSH
93004: LD_INT 2
93006: PUSH
93007: EMPTY
93008: LIST
93009: LIST
93010: PUSH
93011: LD_INT 0
93013: PUSH
93014: LD_INT 2
93016: PUSH
93017: EMPTY
93018: LIST
93019: LIST
93020: PUSH
93021: LD_INT 1
93023: NEG
93024: PUSH
93025: LD_INT 1
93027: PUSH
93028: EMPTY
93029: LIST
93030: LIST
93031: PUSH
93032: LD_INT 2
93034: NEG
93035: PUSH
93036: LD_INT 0
93038: PUSH
93039: EMPTY
93040: LIST
93041: LIST
93042: PUSH
93043: LD_INT 2
93045: NEG
93046: PUSH
93047: LD_INT 1
93049: NEG
93050: PUSH
93051: EMPTY
93052: LIST
93053: LIST
93054: PUSH
93055: LD_INT 2
93057: NEG
93058: PUSH
93059: LD_INT 2
93061: NEG
93062: PUSH
93063: EMPTY
93064: LIST
93065: LIST
93066: PUSH
93067: EMPTY
93068: LIST
93069: LIST
93070: LIST
93071: LIST
93072: LIST
93073: LIST
93074: LIST
93075: LIST
93076: LIST
93077: LIST
93078: LIST
93079: LIST
93080: LIST
93081: LIST
93082: LIST
93083: LIST
93084: LIST
93085: LIST
93086: LIST
93087: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93088: LD_ADDR_VAR 0 54
93092: PUSH
93093: LD_INT 0
93095: PUSH
93096: LD_INT 0
93098: PUSH
93099: EMPTY
93100: LIST
93101: LIST
93102: PUSH
93103: LD_INT 0
93105: PUSH
93106: LD_INT 1
93108: NEG
93109: PUSH
93110: EMPTY
93111: LIST
93112: LIST
93113: PUSH
93114: LD_INT 1
93116: PUSH
93117: LD_INT 0
93119: PUSH
93120: EMPTY
93121: LIST
93122: LIST
93123: PUSH
93124: LD_INT 1
93126: PUSH
93127: LD_INT 1
93129: PUSH
93130: EMPTY
93131: LIST
93132: LIST
93133: PUSH
93134: LD_INT 0
93136: PUSH
93137: LD_INT 1
93139: PUSH
93140: EMPTY
93141: LIST
93142: LIST
93143: PUSH
93144: LD_INT 1
93146: NEG
93147: PUSH
93148: LD_INT 0
93150: PUSH
93151: EMPTY
93152: LIST
93153: LIST
93154: PUSH
93155: LD_INT 1
93157: NEG
93158: PUSH
93159: LD_INT 1
93161: NEG
93162: PUSH
93163: EMPTY
93164: LIST
93165: LIST
93166: PUSH
93167: LD_INT 1
93169: NEG
93170: PUSH
93171: LD_INT 2
93173: NEG
93174: PUSH
93175: EMPTY
93176: LIST
93177: LIST
93178: PUSH
93179: LD_INT 0
93181: PUSH
93182: LD_INT 2
93184: NEG
93185: PUSH
93186: EMPTY
93187: LIST
93188: LIST
93189: PUSH
93190: LD_INT 1
93192: PUSH
93193: LD_INT 1
93195: NEG
93196: PUSH
93197: EMPTY
93198: LIST
93199: LIST
93200: PUSH
93201: LD_INT 2
93203: PUSH
93204: LD_INT 0
93206: PUSH
93207: EMPTY
93208: LIST
93209: LIST
93210: PUSH
93211: LD_INT 2
93213: PUSH
93214: LD_INT 1
93216: PUSH
93217: EMPTY
93218: LIST
93219: LIST
93220: PUSH
93221: LD_INT 2
93223: PUSH
93224: LD_INT 2
93226: PUSH
93227: EMPTY
93228: LIST
93229: LIST
93230: PUSH
93231: LD_INT 1
93233: PUSH
93234: LD_INT 2
93236: PUSH
93237: EMPTY
93238: LIST
93239: LIST
93240: PUSH
93241: LD_INT 0
93243: PUSH
93244: LD_INT 2
93246: PUSH
93247: EMPTY
93248: LIST
93249: LIST
93250: PUSH
93251: LD_INT 1
93253: NEG
93254: PUSH
93255: LD_INT 1
93257: PUSH
93258: EMPTY
93259: LIST
93260: LIST
93261: PUSH
93262: LD_INT 2
93264: NEG
93265: PUSH
93266: LD_INT 0
93268: PUSH
93269: EMPTY
93270: LIST
93271: LIST
93272: PUSH
93273: LD_INT 2
93275: NEG
93276: PUSH
93277: LD_INT 1
93279: NEG
93280: PUSH
93281: EMPTY
93282: LIST
93283: LIST
93284: PUSH
93285: LD_INT 2
93287: NEG
93288: PUSH
93289: LD_INT 2
93291: NEG
93292: PUSH
93293: EMPTY
93294: LIST
93295: LIST
93296: PUSH
93297: EMPTY
93298: LIST
93299: LIST
93300: LIST
93301: LIST
93302: LIST
93303: LIST
93304: LIST
93305: LIST
93306: LIST
93307: LIST
93308: LIST
93309: LIST
93310: LIST
93311: LIST
93312: LIST
93313: LIST
93314: LIST
93315: LIST
93316: LIST
93317: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93318: LD_ADDR_VAR 0 55
93322: PUSH
93323: LD_INT 0
93325: PUSH
93326: LD_INT 0
93328: PUSH
93329: EMPTY
93330: LIST
93331: LIST
93332: PUSH
93333: LD_INT 0
93335: PUSH
93336: LD_INT 1
93338: NEG
93339: PUSH
93340: EMPTY
93341: LIST
93342: LIST
93343: PUSH
93344: LD_INT 1
93346: PUSH
93347: LD_INT 0
93349: PUSH
93350: EMPTY
93351: LIST
93352: LIST
93353: PUSH
93354: LD_INT 1
93356: PUSH
93357: LD_INT 1
93359: PUSH
93360: EMPTY
93361: LIST
93362: LIST
93363: PUSH
93364: LD_INT 0
93366: PUSH
93367: LD_INT 1
93369: PUSH
93370: EMPTY
93371: LIST
93372: LIST
93373: PUSH
93374: LD_INT 1
93376: NEG
93377: PUSH
93378: LD_INT 0
93380: PUSH
93381: EMPTY
93382: LIST
93383: LIST
93384: PUSH
93385: LD_INT 1
93387: NEG
93388: PUSH
93389: LD_INT 1
93391: NEG
93392: PUSH
93393: EMPTY
93394: LIST
93395: LIST
93396: PUSH
93397: LD_INT 1
93399: NEG
93400: PUSH
93401: LD_INT 2
93403: NEG
93404: PUSH
93405: EMPTY
93406: LIST
93407: LIST
93408: PUSH
93409: LD_INT 0
93411: PUSH
93412: LD_INT 2
93414: NEG
93415: PUSH
93416: EMPTY
93417: LIST
93418: LIST
93419: PUSH
93420: LD_INT 1
93422: PUSH
93423: LD_INT 1
93425: NEG
93426: PUSH
93427: EMPTY
93428: LIST
93429: LIST
93430: PUSH
93431: LD_INT 2
93433: PUSH
93434: LD_INT 0
93436: PUSH
93437: EMPTY
93438: LIST
93439: LIST
93440: PUSH
93441: LD_INT 2
93443: PUSH
93444: LD_INT 1
93446: PUSH
93447: EMPTY
93448: LIST
93449: LIST
93450: PUSH
93451: LD_INT 2
93453: PUSH
93454: LD_INT 2
93456: PUSH
93457: EMPTY
93458: LIST
93459: LIST
93460: PUSH
93461: LD_INT 1
93463: PUSH
93464: LD_INT 2
93466: PUSH
93467: EMPTY
93468: LIST
93469: LIST
93470: PUSH
93471: LD_INT 0
93473: PUSH
93474: LD_INT 2
93476: PUSH
93477: EMPTY
93478: LIST
93479: LIST
93480: PUSH
93481: LD_INT 1
93483: NEG
93484: PUSH
93485: LD_INT 1
93487: PUSH
93488: EMPTY
93489: LIST
93490: LIST
93491: PUSH
93492: LD_INT 2
93494: NEG
93495: PUSH
93496: LD_INT 0
93498: PUSH
93499: EMPTY
93500: LIST
93501: LIST
93502: PUSH
93503: LD_INT 2
93505: NEG
93506: PUSH
93507: LD_INT 1
93509: NEG
93510: PUSH
93511: EMPTY
93512: LIST
93513: LIST
93514: PUSH
93515: LD_INT 2
93517: NEG
93518: PUSH
93519: LD_INT 2
93521: NEG
93522: PUSH
93523: EMPTY
93524: LIST
93525: LIST
93526: PUSH
93527: EMPTY
93528: LIST
93529: LIST
93530: LIST
93531: LIST
93532: LIST
93533: LIST
93534: LIST
93535: LIST
93536: LIST
93537: LIST
93538: LIST
93539: LIST
93540: LIST
93541: LIST
93542: LIST
93543: LIST
93544: LIST
93545: LIST
93546: LIST
93547: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93548: LD_ADDR_VAR 0 56
93552: PUSH
93553: LD_INT 0
93555: PUSH
93556: LD_INT 0
93558: PUSH
93559: EMPTY
93560: LIST
93561: LIST
93562: PUSH
93563: LD_INT 0
93565: PUSH
93566: LD_INT 1
93568: NEG
93569: PUSH
93570: EMPTY
93571: LIST
93572: LIST
93573: PUSH
93574: LD_INT 1
93576: PUSH
93577: LD_INT 0
93579: PUSH
93580: EMPTY
93581: LIST
93582: LIST
93583: PUSH
93584: LD_INT 1
93586: PUSH
93587: LD_INT 1
93589: PUSH
93590: EMPTY
93591: LIST
93592: LIST
93593: PUSH
93594: LD_INT 0
93596: PUSH
93597: LD_INT 1
93599: PUSH
93600: EMPTY
93601: LIST
93602: LIST
93603: PUSH
93604: LD_INT 1
93606: NEG
93607: PUSH
93608: LD_INT 0
93610: PUSH
93611: EMPTY
93612: LIST
93613: LIST
93614: PUSH
93615: LD_INT 1
93617: NEG
93618: PUSH
93619: LD_INT 1
93621: NEG
93622: PUSH
93623: EMPTY
93624: LIST
93625: LIST
93626: PUSH
93627: LD_INT 1
93629: NEG
93630: PUSH
93631: LD_INT 2
93633: NEG
93634: PUSH
93635: EMPTY
93636: LIST
93637: LIST
93638: PUSH
93639: LD_INT 0
93641: PUSH
93642: LD_INT 2
93644: NEG
93645: PUSH
93646: EMPTY
93647: LIST
93648: LIST
93649: PUSH
93650: LD_INT 1
93652: PUSH
93653: LD_INT 1
93655: NEG
93656: PUSH
93657: EMPTY
93658: LIST
93659: LIST
93660: PUSH
93661: LD_INT 2
93663: PUSH
93664: LD_INT 0
93666: PUSH
93667: EMPTY
93668: LIST
93669: LIST
93670: PUSH
93671: LD_INT 2
93673: PUSH
93674: LD_INT 1
93676: PUSH
93677: EMPTY
93678: LIST
93679: LIST
93680: PUSH
93681: LD_INT 2
93683: PUSH
93684: LD_INT 2
93686: PUSH
93687: EMPTY
93688: LIST
93689: LIST
93690: PUSH
93691: LD_INT 1
93693: PUSH
93694: LD_INT 2
93696: PUSH
93697: EMPTY
93698: LIST
93699: LIST
93700: PUSH
93701: LD_INT 0
93703: PUSH
93704: LD_INT 2
93706: PUSH
93707: EMPTY
93708: LIST
93709: LIST
93710: PUSH
93711: LD_INT 1
93713: NEG
93714: PUSH
93715: LD_INT 1
93717: PUSH
93718: EMPTY
93719: LIST
93720: LIST
93721: PUSH
93722: LD_INT 2
93724: NEG
93725: PUSH
93726: LD_INT 0
93728: PUSH
93729: EMPTY
93730: LIST
93731: LIST
93732: PUSH
93733: LD_INT 2
93735: NEG
93736: PUSH
93737: LD_INT 1
93739: NEG
93740: PUSH
93741: EMPTY
93742: LIST
93743: LIST
93744: PUSH
93745: LD_INT 2
93747: NEG
93748: PUSH
93749: LD_INT 2
93751: NEG
93752: PUSH
93753: EMPTY
93754: LIST
93755: LIST
93756: PUSH
93757: EMPTY
93758: LIST
93759: LIST
93760: LIST
93761: LIST
93762: LIST
93763: LIST
93764: LIST
93765: LIST
93766: LIST
93767: LIST
93768: LIST
93769: LIST
93770: LIST
93771: LIST
93772: LIST
93773: LIST
93774: LIST
93775: LIST
93776: LIST
93777: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93778: LD_ADDR_VAR 0 57
93782: PUSH
93783: LD_INT 0
93785: PUSH
93786: LD_INT 0
93788: PUSH
93789: EMPTY
93790: LIST
93791: LIST
93792: PUSH
93793: LD_INT 0
93795: PUSH
93796: LD_INT 1
93798: NEG
93799: PUSH
93800: EMPTY
93801: LIST
93802: LIST
93803: PUSH
93804: LD_INT 1
93806: PUSH
93807: LD_INT 0
93809: PUSH
93810: EMPTY
93811: LIST
93812: LIST
93813: PUSH
93814: LD_INT 1
93816: PUSH
93817: LD_INT 1
93819: PUSH
93820: EMPTY
93821: LIST
93822: LIST
93823: PUSH
93824: LD_INT 0
93826: PUSH
93827: LD_INT 1
93829: PUSH
93830: EMPTY
93831: LIST
93832: LIST
93833: PUSH
93834: LD_INT 1
93836: NEG
93837: PUSH
93838: LD_INT 0
93840: PUSH
93841: EMPTY
93842: LIST
93843: LIST
93844: PUSH
93845: LD_INT 1
93847: NEG
93848: PUSH
93849: LD_INT 1
93851: NEG
93852: PUSH
93853: EMPTY
93854: LIST
93855: LIST
93856: PUSH
93857: LD_INT 1
93859: NEG
93860: PUSH
93861: LD_INT 2
93863: NEG
93864: PUSH
93865: EMPTY
93866: LIST
93867: LIST
93868: PUSH
93869: LD_INT 0
93871: PUSH
93872: LD_INT 2
93874: NEG
93875: PUSH
93876: EMPTY
93877: LIST
93878: LIST
93879: PUSH
93880: LD_INT 1
93882: PUSH
93883: LD_INT 1
93885: NEG
93886: PUSH
93887: EMPTY
93888: LIST
93889: LIST
93890: PUSH
93891: LD_INT 2
93893: PUSH
93894: LD_INT 0
93896: PUSH
93897: EMPTY
93898: LIST
93899: LIST
93900: PUSH
93901: LD_INT 2
93903: PUSH
93904: LD_INT 1
93906: PUSH
93907: EMPTY
93908: LIST
93909: LIST
93910: PUSH
93911: LD_INT 2
93913: PUSH
93914: LD_INT 2
93916: PUSH
93917: EMPTY
93918: LIST
93919: LIST
93920: PUSH
93921: LD_INT 1
93923: PUSH
93924: LD_INT 2
93926: PUSH
93927: EMPTY
93928: LIST
93929: LIST
93930: PUSH
93931: LD_INT 0
93933: PUSH
93934: LD_INT 2
93936: PUSH
93937: EMPTY
93938: LIST
93939: LIST
93940: PUSH
93941: LD_INT 1
93943: NEG
93944: PUSH
93945: LD_INT 1
93947: PUSH
93948: EMPTY
93949: LIST
93950: LIST
93951: PUSH
93952: LD_INT 2
93954: NEG
93955: PUSH
93956: LD_INT 0
93958: PUSH
93959: EMPTY
93960: LIST
93961: LIST
93962: PUSH
93963: LD_INT 2
93965: NEG
93966: PUSH
93967: LD_INT 1
93969: NEG
93970: PUSH
93971: EMPTY
93972: LIST
93973: LIST
93974: PUSH
93975: LD_INT 2
93977: NEG
93978: PUSH
93979: LD_INT 2
93981: NEG
93982: PUSH
93983: EMPTY
93984: LIST
93985: LIST
93986: PUSH
93987: EMPTY
93988: LIST
93989: LIST
93990: LIST
93991: LIST
93992: LIST
93993: LIST
93994: LIST
93995: LIST
93996: LIST
93997: LIST
93998: LIST
93999: LIST
94000: LIST
94001: LIST
94002: LIST
94003: LIST
94004: LIST
94005: LIST
94006: LIST
94007: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
94008: LD_ADDR_VAR 0 58
94012: PUSH
94013: LD_INT 0
94015: PUSH
94016: LD_INT 0
94018: PUSH
94019: EMPTY
94020: LIST
94021: LIST
94022: PUSH
94023: LD_INT 0
94025: PUSH
94026: LD_INT 1
94028: NEG
94029: PUSH
94030: EMPTY
94031: LIST
94032: LIST
94033: PUSH
94034: LD_INT 1
94036: PUSH
94037: LD_INT 0
94039: PUSH
94040: EMPTY
94041: LIST
94042: LIST
94043: PUSH
94044: LD_INT 1
94046: PUSH
94047: LD_INT 1
94049: PUSH
94050: EMPTY
94051: LIST
94052: LIST
94053: PUSH
94054: LD_INT 0
94056: PUSH
94057: LD_INT 1
94059: PUSH
94060: EMPTY
94061: LIST
94062: LIST
94063: PUSH
94064: LD_INT 1
94066: NEG
94067: PUSH
94068: LD_INT 0
94070: PUSH
94071: EMPTY
94072: LIST
94073: LIST
94074: PUSH
94075: LD_INT 1
94077: NEG
94078: PUSH
94079: LD_INT 1
94081: NEG
94082: PUSH
94083: EMPTY
94084: LIST
94085: LIST
94086: PUSH
94087: LD_INT 1
94089: NEG
94090: PUSH
94091: LD_INT 2
94093: NEG
94094: PUSH
94095: EMPTY
94096: LIST
94097: LIST
94098: PUSH
94099: LD_INT 0
94101: PUSH
94102: LD_INT 2
94104: NEG
94105: PUSH
94106: EMPTY
94107: LIST
94108: LIST
94109: PUSH
94110: LD_INT 1
94112: PUSH
94113: LD_INT 1
94115: NEG
94116: PUSH
94117: EMPTY
94118: LIST
94119: LIST
94120: PUSH
94121: LD_INT 2
94123: PUSH
94124: LD_INT 0
94126: PUSH
94127: EMPTY
94128: LIST
94129: LIST
94130: PUSH
94131: LD_INT 2
94133: PUSH
94134: LD_INT 1
94136: PUSH
94137: EMPTY
94138: LIST
94139: LIST
94140: PUSH
94141: LD_INT 2
94143: PUSH
94144: LD_INT 2
94146: PUSH
94147: EMPTY
94148: LIST
94149: LIST
94150: PUSH
94151: LD_INT 1
94153: PUSH
94154: LD_INT 2
94156: PUSH
94157: EMPTY
94158: LIST
94159: LIST
94160: PUSH
94161: LD_INT 0
94163: PUSH
94164: LD_INT 2
94166: PUSH
94167: EMPTY
94168: LIST
94169: LIST
94170: PUSH
94171: LD_INT 1
94173: NEG
94174: PUSH
94175: LD_INT 1
94177: PUSH
94178: EMPTY
94179: LIST
94180: LIST
94181: PUSH
94182: LD_INT 2
94184: NEG
94185: PUSH
94186: LD_INT 0
94188: PUSH
94189: EMPTY
94190: LIST
94191: LIST
94192: PUSH
94193: LD_INT 2
94195: NEG
94196: PUSH
94197: LD_INT 1
94199: NEG
94200: PUSH
94201: EMPTY
94202: LIST
94203: LIST
94204: PUSH
94205: LD_INT 2
94207: NEG
94208: PUSH
94209: LD_INT 2
94211: NEG
94212: PUSH
94213: EMPTY
94214: LIST
94215: LIST
94216: PUSH
94217: EMPTY
94218: LIST
94219: LIST
94220: LIST
94221: LIST
94222: LIST
94223: LIST
94224: LIST
94225: LIST
94226: LIST
94227: LIST
94228: LIST
94229: LIST
94230: LIST
94231: LIST
94232: LIST
94233: LIST
94234: LIST
94235: LIST
94236: LIST
94237: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94238: LD_ADDR_VAR 0 59
94242: PUSH
94243: LD_INT 0
94245: PUSH
94246: LD_INT 0
94248: PUSH
94249: EMPTY
94250: LIST
94251: LIST
94252: PUSH
94253: LD_INT 0
94255: PUSH
94256: LD_INT 1
94258: NEG
94259: PUSH
94260: EMPTY
94261: LIST
94262: LIST
94263: PUSH
94264: LD_INT 1
94266: PUSH
94267: LD_INT 0
94269: PUSH
94270: EMPTY
94271: LIST
94272: LIST
94273: PUSH
94274: LD_INT 1
94276: PUSH
94277: LD_INT 1
94279: PUSH
94280: EMPTY
94281: LIST
94282: LIST
94283: PUSH
94284: LD_INT 0
94286: PUSH
94287: LD_INT 1
94289: PUSH
94290: EMPTY
94291: LIST
94292: LIST
94293: PUSH
94294: LD_INT 1
94296: NEG
94297: PUSH
94298: LD_INT 0
94300: PUSH
94301: EMPTY
94302: LIST
94303: LIST
94304: PUSH
94305: LD_INT 1
94307: NEG
94308: PUSH
94309: LD_INT 1
94311: NEG
94312: PUSH
94313: EMPTY
94314: LIST
94315: LIST
94316: PUSH
94317: EMPTY
94318: LIST
94319: LIST
94320: LIST
94321: LIST
94322: LIST
94323: LIST
94324: LIST
94325: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94326: LD_ADDR_VAR 0 60
94330: PUSH
94331: LD_INT 0
94333: PUSH
94334: LD_INT 0
94336: PUSH
94337: EMPTY
94338: LIST
94339: LIST
94340: PUSH
94341: LD_INT 0
94343: PUSH
94344: LD_INT 1
94346: NEG
94347: PUSH
94348: EMPTY
94349: LIST
94350: LIST
94351: PUSH
94352: LD_INT 1
94354: PUSH
94355: LD_INT 0
94357: PUSH
94358: EMPTY
94359: LIST
94360: LIST
94361: PUSH
94362: LD_INT 1
94364: PUSH
94365: LD_INT 1
94367: PUSH
94368: EMPTY
94369: LIST
94370: LIST
94371: PUSH
94372: LD_INT 0
94374: PUSH
94375: LD_INT 1
94377: PUSH
94378: EMPTY
94379: LIST
94380: LIST
94381: PUSH
94382: LD_INT 1
94384: NEG
94385: PUSH
94386: LD_INT 0
94388: PUSH
94389: EMPTY
94390: LIST
94391: LIST
94392: PUSH
94393: LD_INT 1
94395: NEG
94396: PUSH
94397: LD_INT 1
94399: NEG
94400: PUSH
94401: EMPTY
94402: LIST
94403: LIST
94404: PUSH
94405: EMPTY
94406: LIST
94407: LIST
94408: LIST
94409: LIST
94410: LIST
94411: LIST
94412: LIST
94413: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94414: LD_ADDR_VAR 0 61
94418: PUSH
94419: LD_INT 0
94421: PUSH
94422: LD_INT 0
94424: PUSH
94425: EMPTY
94426: LIST
94427: LIST
94428: PUSH
94429: LD_INT 0
94431: PUSH
94432: LD_INT 1
94434: NEG
94435: PUSH
94436: EMPTY
94437: LIST
94438: LIST
94439: PUSH
94440: LD_INT 1
94442: PUSH
94443: LD_INT 0
94445: PUSH
94446: EMPTY
94447: LIST
94448: LIST
94449: PUSH
94450: LD_INT 1
94452: PUSH
94453: LD_INT 1
94455: PUSH
94456: EMPTY
94457: LIST
94458: LIST
94459: PUSH
94460: LD_INT 0
94462: PUSH
94463: LD_INT 1
94465: PUSH
94466: EMPTY
94467: LIST
94468: LIST
94469: PUSH
94470: LD_INT 1
94472: NEG
94473: PUSH
94474: LD_INT 0
94476: PUSH
94477: EMPTY
94478: LIST
94479: LIST
94480: PUSH
94481: LD_INT 1
94483: NEG
94484: PUSH
94485: LD_INT 1
94487: NEG
94488: PUSH
94489: EMPTY
94490: LIST
94491: LIST
94492: PUSH
94493: EMPTY
94494: LIST
94495: LIST
94496: LIST
94497: LIST
94498: LIST
94499: LIST
94500: LIST
94501: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94502: LD_ADDR_VAR 0 62
94506: PUSH
94507: LD_INT 0
94509: PUSH
94510: LD_INT 0
94512: PUSH
94513: EMPTY
94514: LIST
94515: LIST
94516: PUSH
94517: LD_INT 0
94519: PUSH
94520: LD_INT 1
94522: NEG
94523: PUSH
94524: EMPTY
94525: LIST
94526: LIST
94527: PUSH
94528: LD_INT 1
94530: PUSH
94531: LD_INT 0
94533: PUSH
94534: EMPTY
94535: LIST
94536: LIST
94537: PUSH
94538: LD_INT 1
94540: PUSH
94541: LD_INT 1
94543: PUSH
94544: EMPTY
94545: LIST
94546: LIST
94547: PUSH
94548: LD_INT 0
94550: PUSH
94551: LD_INT 1
94553: PUSH
94554: EMPTY
94555: LIST
94556: LIST
94557: PUSH
94558: LD_INT 1
94560: NEG
94561: PUSH
94562: LD_INT 0
94564: PUSH
94565: EMPTY
94566: LIST
94567: LIST
94568: PUSH
94569: LD_INT 1
94571: NEG
94572: PUSH
94573: LD_INT 1
94575: NEG
94576: PUSH
94577: EMPTY
94578: LIST
94579: LIST
94580: PUSH
94581: EMPTY
94582: LIST
94583: LIST
94584: LIST
94585: LIST
94586: LIST
94587: LIST
94588: LIST
94589: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94590: LD_ADDR_VAR 0 63
94594: PUSH
94595: LD_INT 0
94597: PUSH
94598: LD_INT 0
94600: PUSH
94601: EMPTY
94602: LIST
94603: LIST
94604: PUSH
94605: LD_INT 0
94607: PUSH
94608: LD_INT 1
94610: NEG
94611: PUSH
94612: EMPTY
94613: LIST
94614: LIST
94615: PUSH
94616: LD_INT 1
94618: PUSH
94619: LD_INT 0
94621: PUSH
94622: EMPTY
94623: LIST
94624: LIST
94625: PUSH
94626: LD_INT 1
94628: PUSH
94629: LD_INT 1
94631: PUSH
94632: EMPTY
94633: LIST
94634: LIST
94635: PUSH
94636: LD_INT 0
94638: PUSH
94639: LD_INT 1
94641: PUSH
94642: EMPTY
94643: LIST
94644: LIST
94645: PUSH
94646: LD_INT 1
94648: NEG
94649: PUSH
94650: LD_INT 0
94652: PUSH
94653: EMPTY
94654: LIST
94655: LIST
94656: PUSH
94657: LD_INT 1
94659: NEG
94660: PUSH
94661: LD_INT 1
94663: NEG
94664: PUSH
94665: EMPTY
94666: LIST
94667: LIST
94668: PUSH
94669: EMPTY
94670: LIST
94671: LIST
94672: LIST
94673: LIST
94674: LIST
94675: LIST
94676: LIST
94677: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94678: LD_ADDR_VAR 0 64
94682: PUSH
94683: LD_INT 0
94685: PUSH
94686: LD_INT 0
94688: PUSH
94689: EMPTY
94690: LIST
94691: LIST
94692: PUSH
94693: LD_INT 0
94695: PUSH
94696: LD_INT 1
94698: NEG
94699: PUSH
94700: EMPTY
94701: LIST
94702: LIST
94703: PUSH
94704: LD_INT 1
94706: PUSH
94707: LD_INT 0
94709: PUSH
94710: EMPTY
94711: LIST
94712: LIST
94713: PUSH
94714: LD_INT 1
94716: PUSH
94717: LD_INT 1
94719: PUSH
94720: EMPTY
94721: LIST
94722: LIST
94723: PUSH
94724: LD_INT 0
94726: PUSH
94727: LD_INT 1
94729: PUSH
94730: EMPTY
94731: LIST
94732: LIST
94733: PUSH
94734: LD_INT 1
94736: NEG
94737: PUSH
94738: LD_INT 0
94740: PUSH
94741: EMPTY
94742: LIST
94743: LIST
94744: PUSH
94745: LD_INT 1
94747: NEG
94748: PUSH
94749: LD_INT 1
94751: NEG
94752: PUSH
94753: EMPTY
94754: LIST
94755: LIST
94756: PUSH
94757: EMPTY
94758: LIST
94759: LIST
94760: LIST
94761: LIST
94762: LIST
94763: LIST
94764: LIST
94765: ST_TO_ADDR
// end ; 1 :
94766: GO 100663
94768: LD_INT 1
94770: DOUBLE
94771: EQUAL
94772: IFTRUE 94776
94774: GO 97399
94776: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
94777: LD_ADDR_VAR 0 11
94781: PUSH
94782: LD_INT 1
94784: NEG
94785: PUSH
94786: LD_INT 3
94788: NEG
94789: PUSH
94790: EMPTY
94791: LIST
94792: LIST
94793: PUSH
94794: LD_INT 0
94796: PUSH
94797: LD_INT 3
94799: NEG
94800: PUSH
94801: EMPTY
94802: LIST
94803: LIST
94804: PUSH
94805: LD_INT 1
94807: PUSH
94808: LD_INT 2
94810: NEG
94811: PUSH
94812: EMPTY
94813: LIST
94814: LIST
94815: PUSH
94816: EMPTY
94817: LIST
94818: LIST
94819: LIST
94820: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
94821: LD_ADDR_VAR 0 12
94825: PUSH
94826: LD_INT 2
94828: PUSH
94829: LD_INT 1
94831: NEG
94832: PUSH
94833: EMPTY
94834: LIST
94835: LIST
94836: PUSH
94837: LD_INT 3
94839: PUSH
94840: LD_INT 0
94842: PUSH
94843: EMPTY
94844: LIST
94845: LIST
94846: PUSH
94847: LD_INT 3
94849: PUSH
94850: LD_INT 1
94852: PUSH
94853: EMPTY
94854: LIST
94855: LIST
94856: PUSH
94857: EMPTY
94858: LIST
94859: LIST
94860: LIST
94861: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
94862: LD_ADDR_VAR 0 13
94866: PUSH
94867: LD_INT 3
94869: PUSH
94870: LD_INT 2
94872: PUSH
94873: EMPTY
94874: LIST
94875: LIST
94876: PUSH
94877: LD_INT 3
94879: PUSH
94880: LD_INT 3
94882: PUSH
94883: EMPTY
94884: LIST
94885: LIST
94886: PUSH
94887: LD_INT 2
94889: PUSH
94890: LD_INT 3
94892: PUSH
94893: EMPTY
94894: LIST
94895: LIST
94896: PUSH
94897: EMPTY
94898: LIST
94899: LIST
94900: LIST
94901: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
94902: LD_ADDR_VAR 0 14
94906: PUSH
94907: LD_INT 1
94909: PUSH
94910: LD_INT 3
94912: PUSH
94913: EMPTY
94914: LIST
94915: LIST
94916: PUSH
94917: LD_INT 0
94919: PUSH
94920: LD_INT 3
94922: PUSH
94923: EMPTY
94924: LIST
94925: LIST
94926: PUSH
94927: LD_INT 1
94929: NEG
94930: PUSH
94931: LD_INT 2
94933: PUSH
94934: EMPTY
94935: LIST
94936: LIST
94937: PUSH
94938: EMPTY
94939: LIST
94940: LIST
94941: LIST
94942: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
94943: LD_ADDR_VAR 0 15
94947: PUSH
94948: LD_INT 2
94950: NEG
94951: PUSH
94952: LD_INT 1
94954: PUSH
94955: EMPTY
94956: LIST
94957: LIST
94958: PUSH
94959: LD_INT 3
94961: NEG
94962: PUSH
94963: LD_INT 0
94965: PUSH
94966: EMPTY
94967: LIST
94968: LIST
94969: PUSH
94970: LD_INT 3
94972: NEG
94973: PUSH
94974: LD_INT 1
94976: NEG
94977: PUSH
94978: EMPTY
94979: LIST
94980: LIST
94981: PUSH
94982: EMPTY
94983: LIST
94984: LIST
94985: LIST
94986: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
94987: LD_ADDR_VAR 0 16
94991: PUSH
94992: LD_INT 2
94994: NEG
94995: PUSH
94996: LD_INT 3
94998: NEG
94999: PUSH
95000: EMPTY
95001: LIST
95002: LIST
95003: PUSH
95004: LD_INT 3
95006: NEG
95007: PUSH
95008: LD_INT 2
95010: NEG
95011: PUSH
95012: EMPTY
95013: LIST
95014: LIST
95015: PUSH
95016: LD_INT 3
95018: NEG
95019: PUSH
95020: LD_INT 3
95022: NEG
95023: PUSH
95024: EMPTY
95025: LIST
95026: LIST
95027: PUSH
95028: EMPTY
95029: LIST
95030: LIST
95031: LIST
95032: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
95033: LD_ADDR_VAR 0 17
95037: PUSH
95038: LD_INT 1
95040: NEG
95041: PUSH
95042: LD_INT 3
95044: NEG
95045: PUSH
95046: EMPTY
95047: LIST
95048: LIST
95049: PUSH
95050: LD_INT 0
95052: PUSH
95053: LD_INT 3
95055: NEG
95056: PUSH
95057: EMPTY
95058: LIST
95059: LIST
95060: PUSH
95061: LD_INT 1
95063: PUSH
95064: LD_INT 2
95066: NEG
95067: PUSH
95068: EMPTY
95069: LIST
95070: LIST
95071: PUSH
95072: EMPTY
95073: LIST
95074: LIST
95075: LIST
95076: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
95077: LD_ADDR_VAR 0 18
95081: PUSH
95082: LD_INT 2
95084: PUSH
95085: LD_INT 1
95087: NEG
95088: PUSH
95089: EMPTY
95090: LIST
95091: LIST
95092: PUSH
95093: LD_INT 3
95095: PUSH
95096: LD_INT 0
95098: PUSH
95099: EMPTY
95100: LIST
95101: LIST
95102: PUSH
95103: LD_INT 3
95105: PUSH
95106: LD_INT 1
95108: PUSH
95109: EMPTY
95110: LIST
95111: LIST
95112: PUSH
95113: EMPTY
95114: LIST
95115: LIST
95116: LIST
95117: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
95118: LD_ADDR_VAR 0 19
95122: PUSH
95123: LD_INT 3
95125: PUSH
95126: LD_INT 2
95128: PUSH
95129: EMPTY
95130: LIST
95131: LIST
95132: PUSH
95133: LD_INT 3
95135: PUSH
95136: LD_INT 3
95138: PUSH
95139: EMPTY
95140: LIST
95141: LIST
95142: PUSH
95143: LD_INT 2
95145: PUSH
95146: LD_INT 3
95148: PUSH
95149: EMPTY
95150: LIST
95151: LIST
95152: PUSH
95153: EMPTY
95154: LIST
95155: LIST
95156: LIST
95157: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
95158: LD_ADDR_VAR 0 20
95162: PUSH
95163: LD_INT 1
95165: PUSH
95166: LD_INT 3
95168: PUSH
95169: EMPTY
95170: LIST
95171: LIST
95172: PUSH
95173: LD_INT 0
95175: PUSH
95176: LD_INT 3
95178: PUSH
95179: EMPTY
95180: LIST
95181: LIST
95182: PUSH
95183: LD_INT 1
95185: NEG
95186: PUSH
95187: LD_INT 2
95189: PUSH
95190: EMPTY
95191: LIST
95192: LIST
95193: PUSH
95194: EMPTY
95195: LIST
95196: LIST
95197: LIST
95198: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
95199: LD_ADDR_VAR 0 21
95203: PUSH
95204: LD_INT 2
95206: NEG
95207: PUSH
95208: LD_INT 1
95210: PUSH
95211: EMPTY
95212: LIST
95213: LIST
95214: PUSH
95215: LD_INT 3
95217: NEG
95218: PUSH
95219: LD_INT 0
95221: PUSH
95222: EMPTY
95223: LIST
95224: LIST
95225: PUSH
95226: LD_INT 3
95228: NEG
95229: PUSH
95230: LD_INT 1
95232: NEG
95233: PUSH
95234: EMPTY
95235: LIST
95236: LIST
95237: PUSH
95238: EMPTY
95239: LIST
95240: LIST
95241: LIST
95242: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
95243: LD_ADDR_VAR 0 22
95247: PUSH
95248: LD_INT 2
95250: NEG
95251: PUSH
95252: LD_INT 3
95254: NEG
95255: PUSH
95256: EMPTY
95257: LIST
95258: LIST
95259: PUSH
95260: LD_INT 3
95262: NEG
95263: PUSH
95264: LD_INT 2
95266: NEG
95267: PUSH
95268: EMPTY
95269: LIST
95270: LIST
95271: PUSH
95272: LD_INT 3
95274: NEG
95275: PUSH
95276: LD_INT 3
95278: NEG
95279: PUSH
95280: EMPTY
95281: LIST
95282: LIST
95283: PUSH
95284: EMPTY
95285: LIST
95286: LIST
95287: LIST
95288: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
95289: LD_ADDR_VAR 0 23
95293: PUSH
95294: LD_INT 0
95296: PUSH
95297: LD_INT 3
95299: NEG
95300: PUSH
95301: EMPTY
95302: LIST
95303: LIST
95304: PUSH
95305: LD_INT 1
95307: NEG
95308: PUSH
95309: LD_INT 4
95311: NEG
95312: PUSH
95313: EMPTY
95314: LIST
95315: LIST
95316: PUSH
95317: LD_INT 1
95319: PUSH
95320: LD_INT 3
95322: NEG
95323: PUSH
95324: EMPTY
95325: LIST
95326: LIST
95327: PUSH
95328: EMPTY
95329: LIST
95330: LIST
95331: LIST
95332: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
95333: LD_ADDR_VAR 0 24
95337: PUSH
95338: LD_INT 3
95340: PUSH
95341: LD_INT 0
95343: PUSH
95344: EMPTY
95345: LIST
95346: LIST
95347: PUSH
95348: LD_INT 3
95350: PUSH
95351: LD_INT 1
95353: NEG
95354: PUSH
95355: EMPTY
95356: LIST
95357: LIST
95358: PUSH
95359: LD_INT 4
95361: PUSH
95362: LD_INT 1
95364: PUSH
95365: EMPTY
95366: LIST
95367: LIST
95368: PUSH
95369: EMPTY
95370: LIST
95371: LIST
95372: LIST
95373: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
95374: LD_ADDR_VAR 0 25
95378: PUSH
95379: LD_INT 3
95381: PUSH
95382: LD_INT 3
95384: PUSH
95385: EMPTY
95386: LIST
95387: LIST
95388: PUSH
95389: LD_INT 4
95391: PUSH
95392: LD_INT 3
95394: PUSH
95395: EMPTY
95396: LIST
95397: LIST
95398: PUSH
95399: LD_INT 3
95401: PUSH
95402: LD_INT 4
95404: PUSH
95405: EMPTY
95406: LIST
95407: LIST
95408: PUSH
95409: EMPTY
95410: LIST
95411: LIST
95412: LIST
95413: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
95414: LD_ADDR_VAR 0 26
95418: PUSH
95419: LD_INT 0
95421: PUSH
95422: LD_INT 3
95424: PUSH
95425: EMPTY
95426: LIST
95427: LIST
95428: PUSH
95429: LD_INT 1
95431: PUSH
95432: LD_INT 4
95434: PUSH
95435: EMPTY
95436: LIST
95437: LIST
95438: PUSH
95439: LD_INT 1
95441: NEG
95442: PUSH
95443: LD_INT 3
95445: PUSH
95446: EMPTY
95447: LIST
95448: LIST
95449: PUSH
95450: EMPTY
95451: LIST
95452: LIST
95453: LIST
95454: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
95455: LD_ADDR_VAR 0 27
95459: PUSH
95460: LD_INT 3
95462: NEG
95463: PUSH
95464: LD_INT 0
95466: PUSH
95467: EMPTY
95468: LIST
95469: LIST
95470: PUSH
95471: LD_INT 3
95473: NEG
95474: PUSH
95475: LD_INT 1
95477: PUSH
95478: EMPTY
95479: LIST
95480: LIST
95481: PUSH
95482: LD_INT 4
95484: NEG
95485: PUSH
95486: LD_INT 1
95488: NEG
95489: PUSH
95490: EMPTY
95491: LIST
95492: LIST
95493: PUSH
95494: EMPTY
95495: LIST
95496: LIST
95497: LIST
95498: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
95499: LD_ADDR_VAR 0 28
95503: PUSH
95504: LD_INT 3
95506: NEG
95507: PUSH
95508: LD_INT 3
95510: NEG
95511: PUSH
95512: EMPTY
95513: LIST
95514: LIST
95515: PUSH
95516: LD_INT 3
95518: NEG
95519: PUSH
95520: LD_INT 4
95522: NEG
95523: PUSH
95524: EMPTY
95525: LIST
95526: LIST
95527: PUSH
95528: LD_INT 4
95530: NEG
95531: PUSH
95532: LD_INT 3
95534: NEG
95535: PUSH
95536: EMPTY
95537: LIST
95538: LIST
95539: PUSH
95540: EMPTY
95541: LIST
95542: LIST
95543: LIST
95544: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
95545: LD_ADDR_VAR 0 29
95549: PUSH
95550: LD_INT 1
95552: NEG
95553: PUSH
95554: LD_INT 3
95556: NEG
95557: PUSH
95558: EMPTY
95559: LIST
95560: LIST
95561: PUSH
95562: LD_INT 0
95564: PUSH
95565: LD_INT 3
95567: NEG
95568: PUSH
95569: EMPTY
95570: LIST
95571: LIST
95572: PUSH
95573: LD_INT 1
95575: PUSH
95576: LD_INT 2
95578: NEG
95579: PUSH
95580: EMPTY
95581: LIST
95582: LIST
95583: PUSH
95584: LD_INT 1
95586: NEG
95587: PUSH
95588: LD_INT 4
95590: NEG
95591: PUSH
95592: EMPTY
95593: LIST
95594: LIST
95595: PUSH
95596: LD_INT 0
95598: PUSH
95599: LD_INT 4
95601: NEG
95602: PUSH
95603: EMPTY
95604: LIST
95605: LIST
95606: PUSH
95607: LD_INT 1
95609: PUSH
95610: LD_INT 3
95612: NEG
95613: PUSH
95614: EMPTY
95615: LIST
95616: LIST
95617: PUSH
95618: LD_INT 1
95620: NEG
95621: PUSH
95622: LD_INT 5
95624: NEG
95625: PUSH
95626: EMPTY
95627: LIST
95628: LIST
95629: PUSH
95630: LD_INT 0
95632: PUSH
95633: LD_INT 5
95635: NEG
95636: PUSH
95637: EMPTY
95638: LIST
95639: LIST
95640: PUSH
95641: LD_INT 1
95643: PUSH
95644: LD_INT 4
95646: NEG
95647: PUSH
95648: EMPTY
95649: LIST
95650: LIST
95651: PUSH
95652: LD_INT 1
95654: NEG
95655: PUSH
95656: LD_INT 6
95658: NEG
95659: PUSH
95660: EMPTY
95661: LIST
95662: LIST
95663: PUSH
95664: LD_INT 0
95666: PUSH
95667: LD_INT 6
95669: NEG
95670: PUSH
95671: EMPTY
95672: LIST
95673: LIST
95674: PUSH
95675: LD_INT 1
95677: PUSH
95678: LD_INT 5
95680: NEG
95681: PUSH
95682: EMPTY
95683: LIST
95684: LIST
95685: PUSH
95686: EMPTY
95687: LIST
95688: LIST
95689: LIST
95690: LIST
95691: LIST
95692: LIST
95693: LIST
95694: LIST
95695: LIST
95696: LIST
95697: LIST
95698: LIST
95699: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
95700: LD_ADDR_VAR 0 30
95704: PUSH
95705: LD_INT 2
95707: PUSH
95708: LD_INT 1
95710: NEG
95711: PUSH
95712: EMPTY
95713: LIST
95714: LIST
95715: PUSH
95716: LD_INT 3
95718: PUSH
95719: LD_INT 0
95721: PUSH
95722: EMPTY
95723: LIST
95724: LIST
95725: PUSH
95726: LD_INT 3
95728: PUSH
95729: LD_INT 1
95731: PUSH
95732: EMPTY
95733: LIST
95734: LIST
95735: PUSH
95736: LD_INT 3
95738: PUSH
95739: LD_INT 1
95741: NEG
95742: PUSH
95743: EMPTY
95744: LIST
95745: LIST
95746: PUSH
95747: LD_INT 4
95749: PUSH
95750: LD_INT 0
95752: PUSH
95753: EMPTY
95754: LIST
95755: LIST
95756: PUSH
95757: LD_INT 4
95759: PUSH
95760: LD_INT 1
95762: PUSH
95763: EMPTY
95764: LIST
95765: LIST
95766: PUSH
95767: LD_INT 4
95769: PUSH
95770: LD_INT 1
95772: NEG
95773: PUSH
95774: EMPTY
95775: LIST
95776: LIST
95777: PUSH
95778: LD_INT 5
95780: PUSH
95781: LD_INT 0
95783: PUSH
95784: EMPTY
95785: LIST
95786: LIST
95787: PUSH
95788: LD_INT 5
95790: PUSH
95791: LD_INT 1
95793: PUSH
95794: EMPTY
95795: LIST
95796: LIST
95797: PUSH
95798: LD_INT 5
95800: PUSH
95801: LD_INT 1
95803: NEG
95804: PUSH
95805: EMPTY
95806: LIST
95807: LIST
95808: PUSH
95809: LD_INT 6
95811: PUSH
95812: LD_INT 0
95814: PUSH
95815: EMPTY
95816: LIST
95817: LIST
95818: PUSH
95819: LD_INT 6
95821: PUSH
95822: LD_INT 1
95824: PUSH
95825: EMPTY
95826: LIST
95827: LIST
95828: PUSH
95829: EMPTY
95830: LIST
95831: LIST
95832: LIST
95833: LIST
95834: LIST
95835: LIST
95836: LIST
95837: LIST
95838: LIST
95839: LIST
95840: LIST
95841: LIST
95842: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
95843: LD_ADDR_VAR 0 31
95847: PUSH
95848: LD_INT 3
95850: PUSH
95851: LD_INT 2
95853: PUSH
95854: EMPTY
95855: LIST
95856: LIST
95857: PUSH
95858: LD_INT 3
95860: PUSH
95861: LD_INT 3
95863: PUSH
95864: EMPTY
95865: LIST
95866: LIST
95867: PUSH
95868: LD_INT 2
95870: PUSH
95871: LD_INT 3
95873: PUSH
95874: EMPTY
95875: LIST
95876: LIST
95877: PUSH
95878: LD_INT 4
95880: PUSH
95881: LD_INT 3
95883: PUSH
95884: EMPTY
95885: LIST
95886: LIST
95887: PUSH
95888: LD_INT 4
95890: PUSH
95891: LD_INT 4
95893: PUSH
95894: EMPTY
95895: LIST
95896: LIST
95897: PUSH
95898: LD_INT 3
95900: PUSH
95901: LD_INT 4
95903: PUSH
95904: EMPTY
95905: LIST
95906: LIST
95907: PUSH
95908: LD_INT 5
95910: PUSH
95911: LD_INT 4
95913: PUSH
95914: EMPTY
95915: LIST
95916: LIST
95917: PUSH
95918: LD_INT 5
95920: PUSH
95921: LD_INT 5
95923: PUSH
95924: EMPTY
95925: LIST
95926: LIST
95927: PUSH
95928: LD_INT 4
95930: PUSH
95931: LD_INT 5
95933: PUSH
95934: EMPTY
95935: LIST
95936: LIST
95937: PUSH
95938: LD_INT 6
95940: PUSH
95941: LD_INT 5
95943: PUSH
95944: EMPTY
95945: LIST
95946: LIST
95947: PUSH
95948: LD_INT 6
95950: PUSH
95951: LD_INT 6
95953: PUSH
95954: EMPTY
95955: LIST
95956: LIST
95957: PUSH
95958: LD_INT 5
95960: PUSH
95961: LD_INT 6
95963: PUSH
95964: EMPTY
95965: LIST
95966: LIST
95967: PUSH
95968: EMPTY
95969: LIST
95970: LIST
95971: LIST
95972: LIST
95973: LIST
95974: LIST
95975: LIST
95976: LIST
95977: LIST
95978: LIST
95979: LIST
95980: LIST
95981: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
95982: LD_ADDR_VAR 0 32
95986: PUSH
95987: LD_INT 1
95989: PUSH
95990: LD_INT 3
95992: PUSH
95993: EMPTY
95994: LIST
95995: LIST
95996: PUSH
95997: LD_INT 0
95999: PUSH
96000: LD_INT 3
96002: PUSH
96003: EMPTY
96004: LIST
96005: LIST
96006: PUSH
96007: LD_INT 1
96009: NEG
96010: PUSH
96011: LD_INT 2
96013: PUSH
96014: EMPTY
96015: LIST
96016: LIST
96017: PUSH
96018: LD_INT 1
96020: PUSH
96021: LD_INT 4
96023: PUSH
96024: EMPTY
96025: LIST
96026: LIST
96027: PUSH
96028: LD_INT 0
96030: PUSH
96031: LD_INT 4
96033: PUSH
96034: EMPTY
96035: LIST
96036: LIST
96037: PUSH
96038: LD_INT 1
96040: NEG
96041: PUSH
96042: LD_INT 3
96044: PUSH
96045: EMPTY
96046: LIST
96047: LIST
96048: PUSH
96049: LD_INT 1
96051: PUSH
96052: LD_INT 5
96054: PUSH
96055: EMPTY
96056: LIST
96057: LIST
96058: PUSH
96059: LD_INT 0
96061: PUSH
96062: LD_INT 5
96064: PUSH
96065: EMPTY
96066: LIST
96067: LIST
96068: PUSH
96069: LD_INT 1
96071: NEG
96072: PUSH
96073: LD_INT 4
96075: PUSH
96076: EMPTY
96077: LIST
96078: LIST
96079: PUSH
96080: LD_INT 1
96082: PUSH
96083: LD_INT 6
96085: PUSH
96086: EMPTY
96087: LIST
96088: LIST
96089: PUSH
96090: LD_INT 0
96092: PUSH
96093: LD_INT 6
96095: PUSH
96096: EMPTY
96097: LIST
96098: LIST
96099: PUSH
96100: LD_INT 1
96102: NEG
96103: PUSH
96104: LD_INT 5
96106: PUSH
96107: EMPTY
96108: LIST
96109: LIST
96110: PUSH
96111: EMPTY
96112: LIST
96113: LIST
96114: LIST
96115: LIST
96116: LIST
96117: LIST
96118: LIST
96119: LIST
96120: LIST
96121: LIST
96122: LIST
96123: LIST
96124: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
96125: LD_ADDR_VAR 0 33
96129: PUSH
96130: LD_INT 2
96132: NEG
96133: PUSH
96134: LD_INT 1
96136: PUSH
96137: EMPTY
96138: LIST
96139: LIST
96140: PUSH
96141: LD_INT 3
96143: NEG
96144: PUSH
96145: LD_INT 0
96147: PUSH
96148: EMPTY
96149: LIST
96150: LIST
96151: PUSH
96152: LD_INT 3
96154: NEG
96155: PUSH
96156: LD_INT 1
96158: NEG
96159: PUSH
96160: EMPTY
96161: LIST
96162: LIST
96163: PUSH
96164: LD_INT 3
96166: NEG
96167: PUSH
96168: LD_INT 1
96170: PUSH
96171: EMPTY
96172: LIST
96173: LIST
96174: PUSH
96175: LD_INT 4
96177: NEG
96178: PUSH
96179: LD_INT 0
96181: PUSH
96182: EMPTY
96183: LIST
96184: LIST
96185: PUSH
96186: LD_INT 4
96188: NEG
96189: PUSH
96190: LD_INT 1
96192: NEG
96193: PUSH
96194: EMPTY
96195: LIST
96196: LIST
96197: PUSH
96198: LD_INT 4
96200: NEG
96201: PUSH
96202: LD_INT 1
96204: PUSH
96205: EMPTY
96206: LIST
96207: LIST
96208: PUSH
96209: LD_INT 5
96211: NEG
96212: PUSH
96213: LD_INT 0
96215: PUSH
96216: EMPTY
96217: LIST
96218: LIST
96219: PUSH
96220: LD_INT 5
96222: NEG
96223: PUSH
96224: LD_INT 1
96226: NEG
96227: PUSH
96228: EMPTY
96229: LIST
96230: LIST
96231: PUSH
96232: LD_INT 5
96234: NEG
96235: PUSH
96236: LD_INT 1
96238: PUSH
96239: EMPTY
96240: LIST
96241: LIST
96242: PUSH
96243: LD_INT 6
96245: NEG
96246: PUSH
96247: LD_INT 0
96249: PUSH
96250: EMPTY
96251: LIST
96252: LIST
96253: PUSH
96254: LD_INT 6
96256: NEG
96257: PUSH
96258: LD_INT 1
96260: NEG
96261: PUSH
96262: EMPTY
96263: LIST
96264: LIST
96265: PUSH
96266: EMPTY
96267: LIST
96268: LIST
96269: LIST
96270: LIST
96271: LIST
96272: LIST
96273: LIST
96274: LIST
96275: LIST
96276: LIST
96277: LIST
96278: LIST
96279: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
96280: LD_ADDR_VAR 0 34
96284: PUSH
96285: LD_INT 2
96287: NEG
96288: PUSH
96289: LD_INT 3
96291: NEG
96292: PUSH
96293: EMPTY
96294: LIST
96295: LIST
96296: PUSH
96297: LD_INT 3
96299: NEG
96300: PUSH
96301: LD_INT 2
96303: NEG
96304: PUSH
96305: EMPTY
96306: LIST
96307: LIST
96308: PUSH
96309: LD_INT 3
96311: NEG
96312: PUSH
96313: LD_INT 3
96315: NEG
96316: PUSH
96317: EMPTY
96318: LIST
96319: LIST
96320: PUSH
96321: LD_INT 3
96323: NEG
96324: PUSH
96325: LD_INT 4
96327: NEG
96328: PUSH
96329: EMPTY
96330: LIST
96331: LIST
96332: PUSH
96333: LD_INT 4
96335: NEG
96336: PUSH
96337: LD_INT 3
96339: NEG
96340: PUSH
96341: EMPTY
96342: LIST
96343: LIST
96344: PUSH
96345: LD_INT 4
96347: NEG
96348: PUSH
96349: LD_INT 4
96351: NEG
96352: PUSH
96353: EMPTY
96354: LIST
96355: LIST
96356: PUSH
96357: LD_INT 4
96359: NEG
96360: PUSH
96361: LD_INT 5
96363: NEG
96364: PUSH
96365: EMPTY
96366: LIST
96367: LIST
96368: PUSH
96369: LD_INT 5
96371: NEG
96372: PUSH
96373: LD_INT 4
96375: NEG
96376: PUSH
96377: EMPTY
96378: LIST
96379: LIST
96380: PUSH
96381: LD_INT 5
96383: NEG
96384: PUSH
96385: LD_INT 5
96387: NEG
96388: PUSH
96389: EMPTY
96390: LIST
96391: LIST
96392: PUSH
96393: LD_INT 5
96395: NEG
96396: PUSH
96397: LD_INT 6
96399: NEG
96400: PUSH
96401: EMPTY
96402: LIST
96403: LIST
96404: PUSH
96405: LD_INT 6
96407: NEG
96408: PUSH
96409: LD_INT 5
96411: NEG
96412: PUSH
96413: EMPTY
96414: LIST
96415: LIST
96416: PUSH
96417: LD_INT 6
96419: NEG
96420: PUSH
96421: LD_INT 6
96423: NEG
96424: PUSH
96425: EMPTY
96426: LIST
96427: LIST
96428: PUSH
96429: EMPTY
96430: LIST
96431: LIST
96432: LIST
96433: LIST
96434: LIST
96435: LIST
96436: LIST
96437: LIST
96438: LIST
96439: LIST
96440: LIST
96441: LIST
96442: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
96443: LD_ADDR_VAR 0 41
96447: PUSH
96448: LD_INT 0
96450: PUSH
96451: LD_INT 2
96453: NEG
96454: PUSH
96455: EMPTY
96456: LIST
96457: LIST
96458: PUSH
96459: LD_INT 1
96461: NEG
96462: PUSH
96463: LD_INT 3
96465: NEG
96466: PUSH
96467: EMPTY
96468: LIST
96469: LIST
96470: PUSH
96471: LD_INT 1
96473: PUSH
96474: LD_INT 2
96476: NEG
96477: PUSH
96478: EMPTY
96479: LIST
96480: LIST
96481: PUSH
96482: EMPTY
96483: LIST
96484: LIST
96485: LIST
96486: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
96487: LD_ADDR_VAR 0 42
96491: PUSH
96492: LD_INT 2
96494: PUSH
96495: LD_INT 0
96497: PUSH
96498: EMPTY
96499: LIST
96500: LIST
96501: PUSH
96502: LD_INT 2
96504: PUSH
96505: LD_INT 1
96507: NEG
96508: PUSH
96509: EMPTY
96510: LIST
96511: LIST
96512: PUSH
96513: LD_INT 3
96515: PUSH
96516: LD_INT 1
96518: PUSH
96519: EMPTY
96520: LIST
96521: LIST
96522: PUSH
96523: EMPTY
96524: LIST
96525: LIST
96526: LIST
96527: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
96528: LD_ADDR_VAR 0 43
96532: PUSH
96533: LD_INT 2
96535: PUSH
96536: LD_INT 2
96538: PUSH
96539: EMPTY
96540: LIST
96541: LIST
96542: PUSH
96543: LD_INT 3
96545: PUSH
96546: LD_INT 2
96548: PUSH
96549: EMPTY
96550: LIST
96551: LIST
96552: PUSH
96553: LD_INT 2
96555: PUSH
96556: LD_INT 3
96558: PUSH
96559: EMPTY
96560: LIST
96561: LIST
96562: PUSH
96563: EMPTY
96564: LIST
96565: LIST
96566: LIST
96567: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
96568: LD_ADDR_VAR 0 44
96572: PUSH
96573: LD_INT 0
96575: PUSH
96576: LD_INT 2
96578: PUSH
96579: EMPTY
96580: LIST
96581: LIST
96582: PUSH
96583: LD_INT 1
96585: PUSH
96586: LD_INT 3
96588: PUSH
96589: EMPTY
96590: LIST
96591: LIST
96592: PUSH
96593: LD_INT 1
96595: NEG
96596: PUSH
96597: LD_INT 2
96599: PUSH
96600: EMPTY
96601: LIST
96602: LIST
96603: PUSH
96604: EMPTY
96605: LIST
96606: LIST
96607: LIST
96608: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
96609: LD_ADDR_VAR 0 45
96613: PUSH
96614: LD_INT 2
96616: NEG
96617: PUSH
96618: LD_INT 0
96620: PUSH
96621: EMPTY
96622: LIST
96623: LIST
96624: PUSH
96625: LD_INT 2
96627: NEG
96628: PUSH
96629: LD_INT 1
96631: PUSH
96632: EMPTY
96633: LIST
96634: LIST
96635: PUSH
96636: LD_INT 3
96638: NEG
96639: PUSH
96640: LD_INT 1
96642: NEG
96643: PUSH
96644: EMPTY
96645: LIST
96646: LIST
96647: PUSH
96648: EMPTY
96649: LIST
96650: LIST
96651: LIST
96652: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
96653: LD_ADDR_VAR 0 46
96657: PUSH
96658: LD_INT 2
96660: NEG
96661: PUSH
96662: LD_INT 2
96664: NEG
96665: PUSH
96666: EMPTY
96667: LIST
96668: LIST
96669: PUSH
96670: LD_INT 2
96672: NEG
96673: PUSH
96674: LD_INT 3
96676: NEG
96677: PUSH
96678: EMPTY
96679: LIST
96680: LIST
96681: PUSH
96682: LD_INT 3
96684: NEG
96685: PUSH
96686: LD_INT 2
96688: NEG
96689: PUSH
96690: EMPTY
96691: LIST
96692: LIST
96693: PUSH
96694: EMPTY
96695: LIST
96696: LIST
96697: LIST
96698: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
96699: LD_ADDR_VAR 0 47
96703: PUSH
96704: LD_INT 2
96706: NEG
96707: PUSH
96708: LD_INT 3
96710: NEG
96711: PUSH
96712: EMPTY
96713: LIST
96714: LIST
96715: PUSH
96716: LD_INT 1
96718: NEG
96719: PUSH
96720: LD_INT 3
96722: NEG
96723: PUSH
96724: EMPTY
96725: LIST
96726: LIST
96727: PUSH
96728: EMPTY
96729: LIST
96730: LIST
96731: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
96732: LD_ADDR_VAR 0 48
96736: PUSH
96737: LD_INT 1
96739: PUSH
96740: LD_INT 2
96742: NEG
96743: PUSH
96744: EMPTY
96745: LIST
96746: LIST
96747: PUSH
96748: LD_INT 2
96750: PUSH
96751: LD_INT 1
96753: NEG
96754: PUSH
96755: EMPTY
96756: LIST
96757: LIST
96758: PUSH
96759: EMPTY
96760: LIST
96761: LIST
96762: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
96763: LD_ADDR_VAR 0 49
96767: PUSH
96768: LD_INT 3
96770: PUSH
96771: LD_INT 1
96773: PUSH
96774: EMPTY
96775: LIST
96776: LIST
96777: PUSH
96778: LD_INT 3
96780: PUSH
96781: LD_INT 2
96783: PUSH
96784: EMPTY
96785: LIST
96786: LIST
96787: PUSH
96788: EMPTY
96789: LIST
96790: LIST
96791: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
96792: LD_ADDR_VAR 0 50
96796: PUSH
96797: LD_INT 2
96799: PUSH
96800: LD_INT 3
96802: PUSH
96803: EMPTY
96804: LIST
96805: LIST
96806: PUSH
96807: LD_INT 1
96809: PUSH
96810: LD_INT 3
96812: PUSH
96813: EMPTY
96814: LIST
96815: LIST
96816: PUSH
96817: EMPTY
96818: LIST
96819: LIST
96820: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
96821: LD_ADDR_VAR 0 51
96825: PUSH
96826: LD_INT 1
96828: NEG
96829: PUSH
96830: LD_INT 2
96832: PUSH
96833: EMPTY
96834: LIST
96835: LIST
96836: PUSH
96837: LD_INT 2
96839: NEG
96840: PUSH
96841: LD_INT 1
96843: PUSH
96844: EMPTY
96845: LIST
96846: LIST
96847: PUSH
96848: EMPTY
96849: LIST
96850: LIST
96851: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
96852: LD_ADDR_VAR 0 52
96856: PUSH
96857: LD_INT 3
96859: NEG
96860: PUSH
96861: LD_INT 1
96863: NEG
96864: PUSH
96865: EMPTY
96866: LIST
96867: LIST
96868: PUSH
96869: LD_INT 3
96871: NEG
96872: PUSH
96873: LD_INT 2
96875: NEG
96876: PUSH
96877: EMPTY
96878: LIST
96879: LIST
96880: PUSH
96881: EMPTY
96882: LIST
96883: LIST
96884: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
96885: LD_ADDR_VAR 0 53
96889: PUSH
96890: LD_INT 1
96892: NEG
96893: PUSH
96894: LD_INT 3
96896: NEG
96897: PUSH
96898: EMPTY
96899: LIST
96900: LIST
96901: PUSH
96902: LD_INT 0
96904: PUSH
96905: LD_INT 3
96907: NEG
96908: PUSH
96909: EMPTY
96910: LIST
96911: LIST
96912: PUSH
96913: LD_INT 1
96915: PUSH
96916: LD_INT 2
96918: NEG
96919: PUSH
96920: EMPTY
96921: LIST
96922: LIST
96923: PUSH
96924: EMPTY
96925: LIST
96926: LIST
96927: LIST
96928: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
96929: LD_ADDR_VAR 0 54
96933: PUSH
96934: LD_INT 2
96936: PUSH
96937: LD_INT 1
96939: NEG
96940: PUSH
96941: EMPTY
96942: LIST
96943: LIST
96944: PUSH
96945: LD_INT 3
96947: PUSH
96948: LD_INT 0
96950: PUSH
96951: EMPTY
96952: LIST
96953: LIST
96954: PUSH
96955: LD_INT 3
96957: PUSH
96958: LD_INT 1
96960: PUSH
96961: EMPTY
96962: LIST
96963: LIST
96964: PUSH
96965: EMPTY
96966: LIST
96967: LIST
96968: LIST
96969: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
96970: LD_ADDR_VAR 0 55
96974: PUSH
96975: LD_INT 3
96977: PUSH
96978: LD_INT 2
96980: PUSH
96981: EMPTY
96982: LIST
96983: LIST
96984: PUSH
96985: LD_INT 3
96987: PUSH
96988: LD_INT 3
96990: PUSH
96991: EMPTY
96992: LIST
96993: LIST
96994: PUSH
96995: LD_INT 2
96997: PUSH
96998: LD_INT 3
97000: PUSH
97001: EMPTY
97002: LIST
97003: LIST
97004: PUSH
97005: EMPTY
97006: LIST
97007: LIST
97008: LIST
97009: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
97010: LD_ADDR_VAR 0 56
97014: PUSH
97015: LD_INT 1
97017: PUSH
97018: LD_INT 3
97020: PUSH
97021: EMPTY
97022: LIST
97023: LIST
97024: PUSH
97025: LD_INT 0
97027: PUSH
97028: LD_INT 3
97030: PUSH
97031: EMPTY
97032: LIST
97033: LIST
97034: PUSH
97035: LD_INT 1
97037: NEG
97038: PUSH
97039: LD_INT 2
97041: PUSH
97042: EMPTY
97043: LIST
97044: LIST
97045: PUSH
97046: EMPTY
97047: LIST
97048: LIST
97049: LIST
97050: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
97051: LD_ADDR_VAR 0 57
97055: PUSH
97056: LD_INT 2
97058: NEG
97059: PUSH
97060: LD_INT 1
97062: PUSH
97063: EMPTY
97064: LIST
97065: LIST
97066: PUSH
97067: LD_INT 3
97069: NEG
97070: PUSH
97071: LD_INT 0
97073: PUSH
97074: EMPTY
97075: LIST
97076: LIST
97077: PUSH
97078: LD_INT 3
97080: NEG
97081: PUSH
97082: LD_INT 1
97084: NEG
97085: PUSH
97086: EMPTY
97087: LIST
97088: LIST
97089: PUSH
97090: EMPTY
97091: LIST
97092: LIST
97093: LIST
97094: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
97095: LD_ADDR_VAR 0 58
97099: PUSH
97100: LD_INT 2
97102: NEG
97103: PUSH
97104: LD_INT 3
97106: NEG
97107: PUSH
97108: EMPTY
97109: LIST
97110: LIST
97111: PUSH
97112: LD_INT 3
97114: NEG
97115: PUSH
97116: LD_INT 2
97118: NEG
97119: PUSH
97120: EMPTY
97121: LIST
97122: LIST
97123: PUSH
97124: LD_INT 3
97126: NEG
97127: PUSH
97128: LD_INT 3
97130: NEG
97131: PUSH
97132: EMPTY
97133: LIST
97134: LIST
97135: PUSH
97136: EMPTY
97137: LIST
97138: LIST
97139: LIST
97140: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
97141: LD_ADDR_VAR 0 59
97145: PUSH
97146: LD_INT 1
97148: NEG
97149: PUSH
97150: LD_INT 2
97152: NEG
97153: PUSH
97154: EMPTY
97155: LIST
97156: LIST
97157: PUSH
97158: LD_INT 0
97160: PUSH
97161: LD_INT 2
97163: NEG
97164: PUSH
97165: EMPTY
97166: LIST
97167: LIST
97168: PUSH
97169: LD_INT 1
97171: PUSH
97172: LD_INT 1
97174: NEG
97175: PUSH
97176: EMPTY
97177: LIST
97178: LIST
97179: PUSH
97180: EMPTY
97181: LIST
97182: LIST
97183: LIST
97184: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
97185: LD_ADDR_VAR 0 60
97189: PUSH
97190: LD_INT 1
97192: PUSH
97193: LD_INT 1
97195: NEG
97196: PUSH
97197: EMPTY
97198: LIST
97199: LIST
97200: PUSH
97201: LD_INT 2
97203: PUSH
97204: LD_INT 0
97206: PUSH
97207: EMPTY
97208: LIST
97209: LIST
97210: PUSH
97211: LD_INT 2
97213: PUSH
97214: LD_INT 1
97216: PUSH
97217: EMPTY
97218: LIST
97219: LIST
97220: PUSH
97221: EMPTY
97222: LIST
97223: LIST
97224: LIST
97225: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
97226: LD_ADDR_VAR 0 61
97230: PUSH
97231: LD_INT 2
97233: PUSH
97234: LD_INT 1
97236: PUSH
97237: EMPTY
97238: LIST
97239: LIST
97240: PUSH
97241: LD_INT 2
97243: PUSH
97244: LD_INT 2
97246: PUSH
97247: EMPTY
97248: LIST
97249: LIST
97250: PUSH
97251: LD_INT 1
97253: PUSH
97254: LD_INT 2
97256: PUSH
97257: EMPTY
97258: LIST
97259: LIST
97260: PUSH
97261: EMPTY
97262: LIST
97263: LIST
97264: LIST
97265: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
97266: LD_ADDR_VAR 0 62
97270: PUSH
97271: LD_INT 1
97273: PUSH
97274: LD_INT 2
97276: PUSH
97277: EMPTY
97278: LIST
97279: LIST
97280: PUSH
97281: LD_INT 0
97283: PUSH
97284: LD_INT 2
97286: PUSH
97287: EMPTY
97288: LIST
97289: LIST
97290: PUSH
97291: LD_INT 1
97293: NEG
97294: PUSH
97295: LD_INT 1
97297: PUSH
97298: EMPTY
97299: LIST
97300: LIST
97301: PUSH
97302: EMPTY
97303: LIST
97304: LIST
97305: LIST
97306: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
97307: LD_ADDR_VAR 0 63
97311: PUSH
97312: LD_INT 1
97314: NEG
97315: PUSH
97316: LD_INT 1
97318: PUSH
97319: EMPTY
97320: LIST
97321: LIST
97322: PUSH
97323: LD_INT 2
97325: NEG
97326: PUSH
97327: LD_INT 0
97329: PUSH
97330: EMPTY
97331: LIST
97332: LIST
97333: PUSH
97334: LD_INT 2
97336: NEG
97337: PUSH
97338: LD_INT 1
97340: NEG
97341: PUSH
97342: EMPTY
97343: LIST
97344: LIST
97345: PUSH
97346: EMPTY
97347: LIST
97348: LIST
97349: LIST
97350: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
97351: LD_ADDR_VAR 0 64
97355: PUSH
97356: LD_INT 1
97358: NEG
97359: PUSH
97360: LD_INT 2
97362: NEG
97363: PUSH
97364: EMPTY
97365: LIST
97366: LIST
97367: PUSH
97368: LD_INT 2
97370: NEG
97371: PUSH
97372: LD_INT 1
97374: NEG
97375: PUSH
97376: EMPTY
97377: LIST
97378: LIST
97379: PUSH
97380: LD_INT 2
97382: NEG
97383: PUSH
97384: LD_INT 2
97386: NEG
97387: PUSH
97388: EMPTY
97389: LIST
97390: LIST
97391: PUSH
97392: EMPTY
97393: LIST
97394: LIST
97395: LIST
97396: ST_TO_ADDR
// end ; 2 :
97397: GO 100663
97399: LD_INT 2
97401: DOUBLE
97402: EQUAL
97403: IFTRUE 97407
97405: GO 100662
97407: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
97408: LD_ADDR_VAR 0 29
97412: PUSH
97413: LD_INT 4
97415: PUSH
97416: LD_INT 0
97418: PUSH
97419: EMPTY
97420: LIST
97421: LIST
97422: PUSH
97423: LD_INT 4
97425: PUSH
97426: LD_INT 1
97428: NEG
97429: PUSH
97430: EMPTY
97431: LIST
97432: LIST
97433: PUSH
97434: LD_INT 5
97436: PUSH
97437: LD_INT 0
97439: PUSH
97440: EMPTY
97441: LIST
97442: LIST
97443: PUSH
97444: LD_INT 5
97446: PUSH
97447: LD_INT 1
97449: PUSH
97450: EMPTY
97451: LIST
97452: LIST
97453: PUSH
97454: LD_INT 4
97456: PUSH
97457: LD_INT 1
97459: PUSH
97460: EMPTY
97461: LIST
97462: LIST
97463: PUSH
97464: LD_INT 3
97466: PUSH
97467: LD_INT 0
97469: PUSH
97470: EMPTY
97471: LIST
97472: LIST
97473: PUSH
97474: LD_INT 3
97476: PUSH
97477: LD_INT 1
97479: NEG
97480: PUSH
97481: EMPTY
97482: LIST
97483: LIST
97484: PUSH
97485: LD_INT 3
97487: PUSH
97488: LD_INT 2
97490: NEG
97491: PUSH
97492: EMPTY
97493: LIST
97494: LIST
97495: PUSH
97496: LD_INT 5
97498: PUSH
97499: LD_INT 2
97501: PUSH
97502: EMPTY
97503: LIST
97504: LIST
97505: PUSH
97506: LD_INT 3
97508: PUSH
97509: LD_INT 3
97511: PUSH
97512: EMPTY
97513: LIST
97514: LIST
97515: PUSH
97516: LD_INT 3
97518: PUSH
97519: LD_INT 2
97521: PUSH
97522: EMPTY
97523: LIST
97524: LIST
97525: PUSH
97526: LD_INT 4
97528: PUSH
97529: LD_INT 3
97531: PUSH
97532: EMPTY
97533: LIST
97534: LIST
97535: PUSH
97536: LD_INT 4
97538: PUSH
97539: LD_INT 4
97541: PUSH
97542: EMPTY
97543: LIST
97544: LIST
97545: PUSH
97546: LD_INT 3
97548: PUSH
97549: LD_INT 4
97551: PUSH
97552: EMPTY
97553: LIST
97554: LIST
97555: PUSH
97556: LD_INT 2
97558: PUSH
97559: LD_INT 3
97561: PUSH
97562: EMPTY
97563: LIST
97564: LIST
97565: PUSH
97566: LD_INT 2
97568: PUSH
97569: LD_INT 2
97571: PUSH
97572: EMPTY
97573: LIST
97574: LIST
97575: PUSH
97576: LD_INT 4
97578: PUSH
97579: LD_INT 2
97581: PUSH
97582: EMPTY
97583: LIST
97584: LIST
97585: PUSH
97586: LD_INT 2
97588: PUSH
97589: LD_INT 4
97591: PUSH
97592: EMPTY
97593: LIST
97594: LIST
97595: PUSH
97596: LD_INT 0
97598: PUSH
97599: LD_INT 4
97601: PUSH
97602: EMPTY
97603: LIST
97604: LIST
97605: PUSH
97606: LD_INT 0
97608: PUSH
97609: LD_INT 3
97611: PUSH
97612: EMPTY
97613: LIST
97614: LIST
97615: PUSH
97616: LD_INT 1
97618: PUSH
97619: LD_INT 4
97621: PUSH
97622: EMPTY
97623: LIST
97624: LIST
97625: PUSH
97626: LD_INT 1
97628: PUSH
97629: LD_INT 5
97631: PUSH
97632: EMPTY
97633: LIST
97634: LIST
97635: PUSH
97636: LD_INT 0
97638: PUSH
97639: LD_INT 5
97641: PUSH
97642: EMPTY
97643: LIST
97644: LIST
97645: PUSH
97646: LD_INT 1
97648: NEG
97649: PUSH
97650: LD_INT 4
97652: PUSH
97653: EMPTY
97654: LIST
97655: LIST
97656: PUSH
97657: LD_INT 1
97659: NEG
97660: PUSH
97661: LD_INT 3
97663: PUSH
97664: EMPTY
97665: LIST
97666: LIST
97667: PUSH
97668: LD_INT 2
97670: PUSH
97671: LD_INT 5
97673: PUSH
97674: EMPTY
97675: LIST
97676: LIST
97677: PUSH
97678: LD_INT 2
97680: NEG
97681: PUSH
97682: LD_INT 3
97684: PUSH
97685: EMPTY
97686: LIST
97687: LIST
97688: PUSH
97689: LD_INT 3
97691: NEG
97692: PUSH
97693: LD_INT 0
97695: PUSH
97696: EMPTY
97697: LIST
97698: LIST
97699: PUSH
97700: LD_INT 3
97702: NEG
97703: PUSH
97704: LD_INT 1
97706: NEG
97707: PUSH
97708: EMPTY
97709: LIST
97710: LIST
97711: PUSH
97712: LD_INT 2
97714: NEG
97715: PUSH
97716: LD_INT 0
97718: PUSH
97719: EMPTY
97720: LIST
97721: LIST
97722: PUSH
97723: LD_INT 2
97725: NEG
97726: PUSH
97727: LD_INT 1
97729: PUSH
97730: EMPTY
97731: LIST
97732: LIST
97733: PUSH
97734: LD_INT 3
97736: NEG
97737: PUSH
97738: LD_INT 1
97740: PUSH
97741: EMPTY
97742: LIST
97743: LIST
97744: PUSH
97745: LD_INT 4
97747: NEG
97748: PUSH
97749: LD_INT 0
97751: PUSH
97752: EMPTY
97753: LIST
97754: LIST
97755: PUSH
97756: LD_INT 4
97758: NEG
97759: PUSH
97760: LD_INT 1
97762: NEG
97763: PUSH
97764: EMPTY
97765: LIST
97766: LIST
97767: PUSH
97768: LD_INT 4
97770: NEG
97771: PUSH
97772: LD_INT 2
97774: NEG
97775: PUSH
97776: EMPTY
97777: LIST
97778: LIST
97779: PUSH
97780: LD_INT 2
97782: NEG
97783: PUSH
97784: LD_INT 2
97786: PUSH
97787: EMPTY
97788: LIST
97789: LIST
97790: PUSH
97791: LD_INT 4
97793: NEG
97794: PUSH
97795: LD_INT 4
97797: NEG
97798: PUSH
97799: EMPTY
97800: LIST
97801: LIST
97802: PUSH
97803: LD_INT 4
97805: NEG
97806: PUSH
97807: LD_INT 5
97809: NEG
97810: PUSH
97811: EMPTY
97812: LIST
97813: LIST
97814: PUSH
97815: LD_INT 3
97817: NEG
97818: PUSH
97819: LD_INT 4
97821: NEG
97822: PUSH
97823: EMPTY
97824: LIST
97825: LIST
97826: PUSH
97827: LD_INT 3
97829: NEG
97830: PUSH
97831: LD_INT 3
97833: NEG
97834: PUSH
97835: EMPTY
97836: LIST
97837: LIST
97838: PUSH
97839: LD_INT 4
97841: NEG
97842: PUSH
97843: LD_INT 3
97845: NEG
97846: PUSH
97847: EMPTY
97848: LIST
97849: LIST
97850: PUSH
97851: LD_INT 5
97853: NEG
97854: PUSH
97855: LD_INT 4
97857: NEG
97858: PUSH
97859: EMPTY
97860: LIST
97861: LIST
97862: PUSH
97863: LD_INT 5
97865: NEG
97866: PUSH
97867: LD_INT 5
97869: NEG
97870: PUSH
97871: EMPTY
97872: LIST
97873: LIST
97874: PUSH
97875: LD_INT 3
97877: NEG
97878: PUSH
97879: LD_INT 5
97881: NEG
97882: PUSH
97883: EMPTY
97884: LIST
97885: LIST
97886: PUSH
97887: LD_INT 5
97889: NEG
97890: PUSH
97891: LD_INT 3
97893: NEG
97894: PUSH
97895: EMPTY
97896: LIST
97897: LIST
97898: PUSH
97899: EMPTY
97900: LIST
97901: LIST
97902: LIST
97903: LIST
97904: LIST
97905: LIST
97906: LIST
97907: LIST
97908: LIST
97909: LIST
97910: LIST
97911: LIST
97912: LIST
97913: LIST
97914: LIST
97915: LIST
97916: LIST
97917: LIST
97918: LIST
97919: LIST
97920: LIST
97921: LIST
97922: LIST
97923: LIST
97924: LIST
97925: LIST
97926: LIST
97927: LIST
97928: LIST
97929: LIST
97930: LIST
97931: LIST
97932: LIST
97933: LIST
97934: LIST
97935: LIST
97936: LIST
97937: LIST
97938: LIST
97939: LIST
97940: LIST
97941: LIST
97942: LIST
97943: LIST
97944: LIST
97945: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
97946: LD_ADDR_VAR 0 30
97950: PUSH
97951: LD_INT 4
97953: PUSH
97954: LD_INT 4
97956: PUSH
97957: EMPTY
97958: LIST
97959: LIST
97960: PUSH
97961: LD_INT 4
97963: PUSH
97964: LD_INT 3
97966: PUSH
97967: EMPTY
97968: LIST
97969: LIST
97970: PUSH
97971: LD_INT 5
97973: PUSH
97974: LD_INT 4
97976: PUSH
97977: EMPTY
97978: LIST
97979: LIST
97980: PUSH
97981: LD_INT 5
97983: PUSH
97984: LD_INT 5
97986: PUSH
97987: EMPTY
97988: LIST
97989: LIST
97990: PUSH
97991: LD_INT 4
97993: PUSH
97994: LD_INT 5
97996: PUSH
97997: EMPTY
97998: LIST
97999: LIST
98000: PUSH
98001: LD_INT 3
98003: PUSH
98004: LD_INT 4
98006: PUSH
98007: EMPTY
98008: LIST
98009: LIST
98010: PUSH
98011: LD_INT 3
98013: PUSH
98014: LD_INT 3
98016: PUSH
98017: EMPTY
98018: LIST
98019: LIST
98020: PUSH
98021: LD_INT 5
98023: PUSH
98024: LD_INT 3
98026: PUSH
98027: EMPTY
98028: LIST
98029: LIST
98030: PUSH
98031: LD_INT 3
98033: PUSH
98034: LD_INT 5
98036: PUSH
98037: EMPTY
98038: LIST
98039: LIST
98040: PUSH
98041: LD_INT 0
98043: PUSH
98044: LD_INT 3
98046: PUSH
98047: EMPTY
98048: LIST
98049: LIST
98050: PUSH
98051: LD_INT 0
98053: PUSH
98054: LD_INT 2
98056: PUSH
98057: EMPTY
98058: LIST
98059: LIST
98060: PUSH
98061: LD_INT 1
98063: PUSH
98064: LD_INT 3
98066: PUSH
98067: EMPTY
98068: LIST
98069: LIST
98070: PUSH
98071: LD_INT 1
98073: PUSH
98074: LD_INT 4
98076: PUSH
98077: EMPTY
98078: LIST
98079: LIST
98080: PUSH
98081: LD_INT 0
98083: PUSH
98084: LD_INT 4
98086: PUSH
98087: EMPTY
98088: LIST
98089: LIST
98090: PUSH
98091: LD_INT 1
98093: NEG
98094: PUSH
98095: LD_INT 3
98097: PUSH
98098: EMPTY
98099: LIST
98100: LIST
98101: PUSH
98102: LD_INT 1
98104: NEG
98105: PUSH
98106: LD_INT 2
98108: PUSH
98109: EMPTY
98110: LIST
98111: LIST
98112: PUSH
98113: LD_INT 2
98115: PUSH
98116: LD_INT 4
98118: PUSH
98119: EMPTY
98120: LIST
98121: LIST
98122: PUSH
98123: LD_INT 2
98125: NEG
98126: PUSH
98127: LD_INT 2
98129: PUSH
98130: EMPTY
98131: LIST
98132: LIST
98133: PUSH
98134: LD_INT 4
98136: NEG
98137: PUSH
98138: LD_INT 0
98140: PUSH
98141: EMPTY
98142: LIST
98143: LIST
98144: PUSH
98145: LD_INT 4
98147: NEG
98148: PUSH
98149: LD_INT 1
98151: NEG
98152: PUSH
98153: EMPTY
98154: LIST
98155: LIST
98156: PUSH
98157: LD_INT 3
98159: NEG
98160: PUSH
98161: LD_INT 0
98163: PUSH
98164: EMPTY
98165: LIST
98166: LIST
98167: PUSH
98168: LD_INT 3
98170: NEG
98171: PUSH
98172: LD_INT 1
98174: PUSH
98175: EMPTY
98176: LIST
98177: LIST
98178: PUSH
98179: LD_INT 4
98181: NEG
98182: PUSH
98183: LD_INT 1
98185: PUSH
98186: EMPTY
98187: LIST
98188: LIST
98189: PUSH
98190: LD_INT 5
98192: NEG
98193: PUSH
98194: LD_INT 0
98196: PUSH
98197: EMPTY
98198: LIST
98199: LIST
98200: PUSH
98201: LD_INT 5
98203: NEG
98204: PUSH
98205: LD_INT 1
98207: NEG
98208: PUSH
98209: EMPTY
98210: LIST
98211: LIST
98212: PUSH
98213: LD_INT 5
98215: NEG
98216: PUSH
98217: LD_INT 2
98219: NEG
98220: PUSH
98221: EMPTY
98222: LIST
98223: LIST
98224: PUSH
98225: LD_INT 3
98227: NEG
98228: PUSH
98229: LD_INT 2
98231: PUSH
98232: EMPTY
98233: LIST
98234: LIST
98235: PUSH
98236: LD_INT 3
98238: NEG
98239: PUSH
98240: LD_INT 3
98242: NEG
98243: PUSH
98244: EMPTY
98245: LIST
98246: LIST
98247: PUSH
98248: LD_INT 3
98250: NEG
98251: PUSH
98252: LD_INT 4
98254: NEG
98255: PUSH
98256: EMPTY
98257: LIST
98258: LIST
98259: PUSH
98260: LD_INT 2
98262: NEG
98263: PUSH
98264: LD_INT 3
98266: NEG
98267: PUSH
98268: EMPTY
98269: LIST
98270: LIST
98271: PUSH
98272: LD_INT 2
98274: NEG
98275: PUSH
98276: LD_INT 2
98278: NEG
98279: PUSH
98280: EMPTY
98281: LIST
98282: LIST
98283: PUSH
98284: LD_INT 3
98286: NEG
98287: PUSH
98288: LD_INT 2
98290: NEG
98291: PUSH
98292: EMPTY
98293: LIST
98294: LIST
98295: PUSH
98296: LD_INT 4
98298: NEG
98299: PUSH
98300: LD_INT 3
98302: NEG
98303: PUSH
98304: EMPTY
98305: LIST
98306: LIST
98307: PUSH
98308: LD_INT 4
98310: NEG
98311: PUSH
98312: LD_INT 4
98314: NEG
98315: PUSH
98316: EMPTY
98317: LIST
98318: LIST
98319: PUSH
98320: LD_INT 2
98322: NEG
98323: PUSH
98324: LD_INT 4
98326: NEG
98327: PUSH
98328: EMPTY
98329: LIST
98330: LIST
98331: PUSH
98332: LD_INT 4
98334: NEG
98335: PUSH
98336: LD_INT 2
98338: NEG
98339: PUSH
98340: EMPTY
98341: LIST
98342: LIST
98343: PUSH
98344: LD_INT 0
98346: PUSH
98347: LD_INT 4
98349: NEG
98350: PUSH
98351: EMPTY
98352: LIST
98353: LIST
98354: PUSH
98355: LD_INT 0
98357: PUSH
98358: LD_INT 5
98360: NEG
98361: PUSH
98362: EMPTY
98363: LIST
98364: LIST
98365: PUSH
98366: LD_INT 1
98368: PUSH
98369: LD_INT 4
98371: NEG
98372: PUSH
98373: EMPTY
98374: LIST
98375: LIST
98376: PUSH
98377: LD_INT 1
98379: PUSH
98380: LD_INT 3
98382: NEG
98383: PUSH
98384: EMPTY
98385: LIST
98386: LIST
98387: PUSH
98388: LD_INT 0
98390: PUSH
98391: LD_INT 3
98393: NEG
98394: PUSH
98395: EMPTY
98396: LIST
98397: LIST
98398: PUSH
98399: LD_INT 1
98401: NEG
98402: PUSH
98403: LD_INT 4
98405: NEG
98406: PUSH
98407: EMPTY
98408: LIST
98409: LIST
98410: PUSH
98411: LD_INT 1
98413: NEG
98414: PUSH
98415: LD_INT 5
98417: NEG
98418: PUSH
98419: EMPTY
98420: LIST
98421: LIST
98422: PUSH
98423: LD_INT 2
98425: PUSH
98426: LD_INT 3
98428: NEG
98429: PUSH
98430: EMPTY
98431: LIST
98432: LIST
98433: PUSH
98434: LD_INT 2
98436: NEG
98437: PUSH
98438: LD_INT 5
98440: NEG
98441: PUSH
98442: EMPTY
98443: LIST
98444: LIST
98445: PUSH
98446: EMPTY
98447: LIST
98448: LIST
98449: LIST
98450: LIST
98451: LIST
98452: LIST
98453: LIST
98454: LIST
98455: LIST
98456: LIST
98457: LIST
98458: LIST
98459: LIST
98460: LIST
98461: LIST
98462: LIST
98463: LIST
98464: LIST
98465: LIST
98466: LIST
98467: LIST
98468: LIST
98469: LIST
98470: LIST
98471: LIST
98472: LIST
98473: LIST
98474: LIST
98475: LIST
98476: LIST
98477: LIST
98478: LIST
98479: LIST
98480: LIST
98481: LIST
98482: LIST
98483: LIST
98484: LIST
98485: LIST
98486: LIST
98487: LIST
98488: LIST
98489: LIST
98490: LIST
98491: LIST
98492: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
98493: LD_ADDR_VAR 0 31
98497: PUSH
98498: LD_INT 0
98500: PUSH
98501: LD_INT 4
98503: PUSH
98504: EMPTY
98505: LIST
98506: LIST
98507: PUSH
98508: LD_INT 0
98510: PUSH
98511: LD_INT 3
98513: PUSH
98514: EMPTY
98515: LIST
98516: LIST
98517: PUSH
98518: LD_INT 1
98520: PUSH
98521: LD_INT 4
98523: PUSH
98524: EMPTY
98525: LIST
98526: LIST
98527: PUSH
98528: LD_INT 1
98530: PUSH
98531: LD_INT 5
98533: PUSH
98534: EMPTY
98535: LIST
98536: LIST
98537: PUSH
98538: LD_INT 0
98540: PUSH
98541: LD_INT 5
98543: PUSH
98544: EMPTY
98545: LIST
98546: LIST
98547: PUSH
98548: LD_INT 1
98550: NEG
98551: PUSH
98552: LD_INT 4
98554: PUSH
98555: EMPTY
98556: LIST
98557: LIST
98558: PUSH
98559: LD_INT 1
98561: NEG
98562: PUSH
98563: LD_INT 3
98565: PUSH
98566: EMPTY
98567: LIST
98568: LIST
98569: PUSH
98570: LD_INT 2
98572: PUSH
98573: LD_INT 5
98575: PUSH
98576: EMPTY
98577: LIST
98578: LIST
98579: PUSH
98580: LD_INT 2
98582: NEG
98583: PUSH
98584: LD_INT 3
98586: PUSH
98587: EMPTY
98588: LIST
98589: LIST
98590: PUSH
98591: LD_INT 3
98593: NEG
98594: PUSH
98595: LD_INT 0
98597: PUSH
98598: EMPTY
98599: LIST
98600: LIST
98601: PUSH
98602: LD_INT 3
98604: NEG
98605: PUSH
98606: LD_INT 1
98608: NEG
98609: PUSH
98610: EMPTY
98611: LIST
98612: LIST
98613: PUSH
98614: LD_INT 2
98616: NEG
98617: PUSH
98618: LD_INT 0
98620: PUSH
98621: EMPTY
98622: LIST
98623: LIST
98624: PUSH
98625: LD_INT 2
98627: NEG
98628: PUSH
98629: LD_INT 1
98631: PUSH
98632: EMPTY
98633: LIST
98634: LIST
98635: PUSH
98636: LD_INT 3
98638: NEG
98639: PUSH
98640: LD_INT 1
98642: PUSH
98643: EMPTY
98644: LIST
98645: LIST
98646: PUSH
98647: LD_INT 4
98649: NEG
98650: PUSH
98651: LD_INT 0
98653: PUSH
98654: EMPTY
98655: LIST
98656: LIST
98657: PUSH
98658: LD_INT 4
98660: NEG
98661: PUSH
98662: LD_INT 1
98664: NEG
98665: PUSH
98666: EMPTY
98667: LIST
98668: LIST
98669: PUSH
98670: LD_INT 4
98672: NEG
98673: PUSH
98674: LD_INT 2
98676: NEG
98677: PUSH
98678: EMPTY
98679: LIST
98680: LIST
98681: PUSH
98682: LD_INT 2
98684: NEG
98685: PUSH
98686: LD_INT 2
98688: PUSH
98689: EMPTY
98690: LIST
98691: LIST
98692: PUSH
98693: LD_INT 4
98695: NEG
98696: PUSH
98697: LD_INT 4
98699: NEG
98700: PUSH
98701: EMPTY
98702: LIST
98703: LIST
98704: PUSH
98705: LD_INT 4
98707: NEG
98708: PUSH
98709: LD_INT 5
98711: NEG
98712: PUSH
98713: EMPTY
98714: LIST
98715: LIST
98716: PUSH
98717: LD_INT 3
98719: NEG
98720: PUSH
98721: LD_INT 4
98723: NEG
98724: PUSH
98725: EMPTY
98726: LIST
98727: LIST
98728: PUSH
98729: LD_INT 3
98731: NEG
98732: PUSH
98733: LD_INT 3
98735: NEG
98736: PUSH
98737: EMPTY
98738: LIST
98739: LIST
98740: PUSH
98741: LD_INT 4
98743: NEG
98744: PUSH
98745: LD_INT 3
98747: NEG
98748: PUSH
98749: EMPTY
98750: LIST
98751: LIST
98752: PUSH
98753: LD_INT 5
98755: NEG
98756: PUSH
98757: LD_INT 4
98759: NEG
98760: PUSH
98761: EMPTY
98762: LIST
98763: LIST
98764: PUSH
98765: LD_INT 5
98767: NEG
98768: PUSH
98769: LD_INT 5
98771: NEG
98772: PUSH
98773: EMPTY
98774: LIST
98775: LIST
98776: PUSH
98777: LD_INT 3
98779: NEG
98780: PUSH
98781: LD_INT 5
98783: NEG
98784: PUSH
98785: EMPTY
98786: LIST
98787: LIST
98788: PUSH
98789: LD_INT 5
98791: NEG
98792: PUSH
98793: LD_INT 3
98795: NEG
98796: PUSH
98797: EMPTY
98798: LIST
98799: LIST
98800: PUSH
98801: LD_INT 0
98803: PUSH
98804: LD_INT 3
98806: NEG
98807: PUSH
98808: EMPTY
98809: LIST
98810: LIST
98811: PUSH
98812: LD_INT 0
98814: PUSH
98815: LD_INT 4
98817: NEG
98818: PUSH
98819: EMPTY
98820: LIST
98821: LIST
98822: PUSH
98823: LD_INT 1
98825: PUSH
98826: LD_INT 3
98828: NEG
98829: PUSH
98830: EMPTY
98831: LIST
98832: LIST
98833: PUSH
98834: LD_INT 1
98836: PUSH
98837: LD_INT 2
98839: NEG
98840: PUSH
98841: EMPTY
98842: LIST
98843: LIST
98844: PUSH
98845: LD_INT 0
98847: PUSH
98848: LD_INT 2
98850: NEG
98851: PUSH
98852: EMPTY
98853: LIST
98854: LIST
98855: PUSH
98856: LD_INT 1
98858: NEG
98859: PUSH
98860: LD_INT 3
98862: NEG
98863: PUSH
98864: EMPTY
98865: LIST
98866: LIST
98867: PUSH
98868: LD_INT 1
98870: NEG
98871: PUSH
98872: LD_INT 4
98874: NEG
98875: PUSH
98876: EMPTY
98877: LIST
98878: LIST
98879: PUSH
98880: LD_INT 2
98882: PUSH
98883: LD_INT 2
98885: NEG
98886: PUSH
98887: EMPTY
98888: LIST
98889: LIST
98890: PUSH
98891: LD_INT 2
98893: NEG
98894: PUSH
98895: LD_INT 4
98897: NEG
98898: PUSH
98899: EMPTY
98900: LIST
98901: LIST
98902: PUSH
98903: LD_INT 4
98905: PUSH
98906: LD_INT 0
98908: PUSH
98909: EMPTY
98910: LIST
98911: LIST
98912: PUSH
98913: LD_INT 4
98915: PUSH
98916: LD_INT 1
98918: NEG
98919: PUSH
98920: EMPTY
98921: LIST
98922: LIST
98923: PUSH
98924: LD_INT 5
98926: PUSH
98927: LD_INT 0
98929: PUSH
98930: EMPTY
98931: LIST
98932: LIST
98933: PUSH
98934: LD_INT 5
98936: PUSH
98937: LD_INT 1
98939: PUSH
98940: EMPTY
98941: LIST
98942: LIST
98943: PUSH
98944: LD_INT 4
98946: PUSH
98947: LD_INT 1
98949: PUSH
98950: EMPTY
98951: LIST
98952: LIST
98953: PUSH
98954: LD_INT 3
98956: PUSH
98957: LD_INT 0
98959: PUSH
98960: EMPTY
98961: LIST
98962: LIST
98963: PUSH
98964: LD_INT 3
98966: PUSH
98967: LD_INT 1
98969: NEG
98970: PUSH
98971: EMPTY
98972: LIST
98973: LIST
98974: PUSH
98975: LD_INT 3
98977: PUSH
98978: LD_INT 2
98980: NEG
98981: PUSH
98982: EMPTY
98983: LIST
98984: LIST
98985: PUSH
98986: LD_INT 5
98988: PUSH
98989: LD_INT 2
98991: PUSH
98992: EMPTY
98993: LIST
98994: LIST
98995: PUSH
98996: EMPTY
98997: LIST
98998: LIST
98999: LIST
99000: LIST
99001: LIST
99002: LIST
99003: LIST
99004: LIST
99005: LIST
99006: LIST
99007: LIST
99008: LIST
99009: LIST
99010: LIST
99011: LIST
99012: LIST
99013: LIST
99014: LIST
99015: LIST
99016: LIST
99017: LIST
99018: LIST
99019: LIST
99020: LIST
99021: LIST
99022: LIST
99023: LIST
99024: LIST
99025: LIST
99026: LIST
99027: LIST
99028: LIST
99029: LIST
99030: LIST
99031: LIST
99032: LIST
99033: LIST
99034: LIST
99035: LIST
99036: LIST
99037: LIST
99038: LIST
99039: LIST
99040: LIST
99041: LIST
99042: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
99043: LD_ADDR_VAR 0 32
99047: PUSH
99048: LD_INT 4
99050: NEG
99051: PUSH
99052: LD_INT 0
99054: PUSH
99055: EMPTY
99056: LIST
99057: LIST
99058: PUSH
99059: LD_INT 4
99061: NEG
99062: PUSH
99063: LD_INT 1
99065: NEG
99066: PUSH
99067: EMPTY
99068: LIST
99069: LIST
99070: PUSH
99071: LD_INT 3
99073: NEG
99074: PUSH
99075: LD_INT 0
99077: PUSH
99078: EMPTY
99079: LIST
99080: LIST
99081: PUSH
99082: LD_INT 3
99084: NEG
99085: PUSH
99086: LD_INT 1
99088: PUSH
99089: EMPTY
99090: LIST
99091: LIST
99092: PUSH
99093: LD_INT 4
99095: NEG
99096: PUSH
99097: LD_INT 1
99099: PUSH
99100: EMPTY
99101: LIST
99102: LIST
99103: PUSH
99104: LD_INT 5
99106: NEG
99107: PUSH
99108: LD_INT 0
99110: PUSH
99111: EMPTY
99112: LIST
99113: LIST
99114: PUSH
99115: LD_INT 5
99117: NEG
99118: PUSH
99119: LD_INT 1
99121: NEG
99122: PUSH
99123: EMPTY
99124: LIST
99125: LIST
99126: PUSH
99127: LD_INT 5
99129: NEG
99130: PUSH
99131: LD_INT 2
99133: NEG
99134: PUSH
99135: EMPTY
99136: LIST
99137: LIST
99138: PUSH
99139: LD_INT 3
99141: NEG
99142: PUSH
99143: LD_INT 2
99145: PUSH
99146: EMPTY
99147: LIST
99148: LIST
99149: PUSH
99150: LD_INT 3
99152: NEG
99153: PUSH
99154: LD_INT 3
99156: NEG
99157: PUSH
99158: EMPTY
99159: LIST
99160: LIST
99161: PUSH
99162: LD_INT 3
99164: NEG
99165: PUSH
99166: LD_INT 4
99168: NEG
99169: PUSH
99170: EMPTY
99171: LIST
99172: LIST
99173: PUSH
99174: LD_INT 2
99176: NEG
99177: PUSH
99178: LD_INT 3
99180: NEG
99181: PUSH
99182: EMPTY
99183: LIST
99184: LIST
99185: PUSH
99186: LD_INT 2
99188: NEG
99189: PUSH
99190: LD_INT 2
99192: NEG
99193: PUSH
99194: EMPTY
99195: LIST
99196: LIST
99197: PUSH
99198: LD_INT 3
99200: NEG
99201: PUSH
99202: LD_INT 2
99204: NEG
99205: PUSH
99206: EMPTY
99207: LIST
99208: LIST
99209: PUSH
99210: LD_INT 4
99212: NEG
99213: PUSH
99214: LD_INT 3
99216: NEG
99217: PUSH
99218: EMPTY
99219: LIST
99220: LIST
99221: PUSH
99222: LD_INT 4
99224: NEG
99225: PUSH
99226: LD_INT 4
99228: NEG
99229: PUSH
99230: EMPTY
99231: LIST
99232: LIST
99233: PUSH
99234: LD_INT 2
99236: NEG
99237: PUSH
99238: LD_INT 4
99240: NEG
99241: PUSH
99242: EMPTY
99243: LIST
99244: LIST
99245: PUSH
99246: LD_INT 4
99248: NEG
99249: PUSH
99250: LD_INT 2
99252: NEG
99253: PUSH
99254: EMPTY
99255: LIST
99256: LIST
99257: PUSH
99258: LD_INT 0
99260: PUSH
99261: LD_INT 4
99263: NEG
99264: PUSH
99265: EMPTY
99266: LIST
99267: LIST
99268: PUSH
99269: LD_INT 0
99271: PUSH
99272: LD_INT 5
99274: NEG
99275: PUSH
99276: EMPTY
99277: LIST
99278: LIST
99279: PUSH
99280: LD_INT 1
99282: PUSH
99283: LD_INT 4
99285: NEG
99286: PUSH
99287: EMPTY
99288: LIST
99289: LIST
99290: PUSH
99291: LD_INT 1
99293: PUSH
99294: LD_INT 3
99296: NEG
99297: PUSH
99298: EMPTY
99299: LIST
99300: LIST
99301: PUSH
99302: LD_INT 0
99304: PUSH
99305: LD_INT 3
99307: NEG
99308: PUSH
99309: EMPTY
99310: LIST
99311: LIST
99312: PUSH
99313: LD_INT 1
99315: NEG
99316: PUSH
99317: LD_INT 4
99319: NEG
99320: PUSH
99321: EMPTY
99322: LIST
99323: LIST
99324: PUSH
99325: LD_INT 1
99327: NEG
99328: PUSH
99329: LD_INT 5
99331: NEG
99332: PUSH
99333: EMPTY
99334: LIST
99335: LIST
99336: PUSH
99337: LD_INT 2
99339: PUSH
99340: LD_INT 3
99342: NEG
99343: PUSH
99344: EMPTY
99345: LIST
99346: LIST
99347: PUSH
99348: LD_INT 2
99350: NEG
99351: PUSH
99352: LD_INT 5
99354: NEG
99355: PUSH
99356: EMPTY
99357: LIST
99358: LIST
99359: PUSH
99360: LD_INT 3
99362: PUSH
99363: LD_INT 0
99365: PUSH
99366: EMPTY
99367: LIST
99368: LIST
99369: PUSH
99370: LD_INT 3
99372: PUSH
99373: LD_INT 1
99375: NEG
99376: PUSH
99377: EMPTY
99378: LIST
99379: LIST
99380: PUSH
99381: LD_INT 4
99383: PUSH
99384: LD_INT 0
99386: PUSH
99387: EMPTY
99388: LIST
99389: LIST
99390: PUSH
99391: LD_INT 4
99393: PUSH
99394: LD_INT 1
99396: PUSH
99397: EMPTY
99398: LIST
99399: LIST
99400: PUSH
99401: LD_INT 3
99403: PUSH
99404: LD_INT 1
99406: PUSH
99407: EMPTY
99408: LIST
99409: LIST
99410: PUSH
99411: LD_INT 2
99413: PUSH
99414: LD_INT 0
99416: PUSH
99417: EMPTY
99418: LIST
99419: LIST
99420: PUSH
99421: LD_INT 2
99423: PUSH
99424: LD_INT 1
99426: NEG
99427: PUSH
99428: EMPTY
99429: LIST
99430: LIST
99431: PUSH
99432: LD_INT 2
99434: PUSH
99435: LD_INT 2
99437: NEG
99438: PUSH
99439: EMPTY
99440: LIST
99441: LIST
99442: PUSH
99443: LD_INT 4
99445: PUSH
99446: LD_INT 2
99448: PUSH
99449: EMPTY
99450: LIST
99451: LIST
99452: PUSH
99453: LD_INT 4
99455: PUSH
99456: LD_INT 4
99458: PUSH
99459: EMPTY
99460: LIST
99461: LIST
99462: PUSH
99463: LD_INT 4
99465: PUSH
99466: LD_INT 3
99468: PUSH
99469: EMPTY
99470: LIST
99471: LIST
99472: PUSH
99473: LD_INT 5
99475: PUSH
99476: LD_INT 4
99478: PUSH
99479: EMPTY
99480: LIST
99481: LIST
99482: PUSH
99483: LD_INT 5
99485: PUSH
99486: LD_INT 5
99488: PUSH
99489: EMPTY
99490: LIST
99491: LIST
99492: PUSH
99493: LD_INT 4
99495: PUSH
99496: LD_INT 5
99498: PUSH
99499: EMPTY
99500: LIST
99501: LIST
99502: PUSH
99503: LD_INT 3
99505: PUSH
99506: LD_INT 4
99508: PUSH
99509: EMPTY
99510: LIST
99511: LIST
99512: PUSH
99513: LD_INT 3
99515: PUSH
99516: LD_INT 3
99518: PUSH
99519: EMPTY
99520: LIST
99521: LIST
99522: PUSH
99523: LD_INT 5
99525: PUSH
99526: LD_INT 3
99528: PUSH
99529: EMPTY
99530: LIST
99531: LIST
99532: PUSH
99533: LD_INT 3
99535: PUSH
99536: LD_INT 5
99538: PUSH
99539: EMPTY
99540: LIST
99541: LIST
99542: PUSH
99543: EMPTY
99544: LIST
99545: LIST
99546: LIST
99547: LIST
99548: LIST
99549: LIST
99550: LIST
99551: LIST
99552: LIST
99553: LIST
99554: LIST
99555: LIST
99556: LIST
99557: LIST
99558: LIST
99559: LIST
99560: LIST
99561: LIST
99562: LIST
99563: LIST
99564: LIST
99565: LIST
99566: LIST
99567: LIST
99568: LIST
99569: LIST
99570: LIST
99571: LIST
99572: LIST
99573: LIST
99574: LIST
99575: LIST
99576: LIST
99577: LIST
99578: LIST
99579: LIST
99580: LIST
99581: LIST
99582: LIST
99583: LIST
99584: LIST
99585: LIST
99586: LIST
99587: LIST
99588: LIST
99589: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
99590: LD_ADDR_VAR 0 33
99594: PUSH
99595: LD_INT 4
99597: NEG
99598: PUSH
99599: LD_INT 4
99601: NEG
99602: PUSH
99603: EMPTY
99604: LIST
99605: LIST
99606: PUSH
99607: LD_INT 4
99609: NEG
99610: PUSH
99611: LD_INT 5
99613: NEG
99614: PUSH
99615: EMPTY
99616: LIST
99617: LIST
99618: PUSH
99619: LD_INT 3
99621: NEG
99622: PUSH
99623: LD_INT 4
99625: NEG
99626: PUSH
99627: EMPTY
99628: LIST
99629: LIST
99630: PUSH
99631: LD_INT 3
99633: NEG
99634: PUSH
99635: LD_INT 3
99637: NEG
99638: PUSH
99639: EMPTY
99640: LIST
99641: LIST
99642: PUSH
99643: LD_INT 4
99645: NEG
99646: PUSH
99647: LD_INT 3
99649: NEG
99650: PUSH
99651: EMPTY
99652: LIST
99653: LIST
99654: PUSH
99655: LD_INT 5
99657: NEG
99658: PUSH
99659: LD_INT 4
99661: NEG
99662: PUSH
99663: EMPTY
99664: LIST
99665: LIST
99666: PUSH
99667: LD_INT 5
99669: NEG
99670: PUSH
99671: LD_INT 5
99673: NEG
99674: PUSH
99675: EMPTY
99676: LIST
99677: LIST
99678: PUSH
99679: LD_INT 3
99681: NEG
99682: PUSH
99683: LD_INT 5
99685: NEG
99686: PUSH
99687: EMPTY
99688: LIST
99689: LIST
99690: PUSH
99691: LD_INT 5
99693: NEG
99694: PUSH
99695: LD_INT 3
99697: NEG
99698: PUSH
99699: EMPTY
99700: LIST
99701: LIST
99702: PUSH
99703: LD_INT 0
99705: PUSH
99706: LD_INT 3
99708: NEG
99709: PUSH
99710: EMPTY
99711: LIST
99712: LIST
99713: PUSH
99714: LD_INT 0
99716: PUSH
99717: LD_INT 4
99719: NEG
99720: PUSH
99721: EMPTY
99722: LIST
99723: LIST
99724: PUSH
99725: LD_INT 1
99727: PUSH
99728: LD_INT 3
99730: NEG
99731: PUSH
99732: EMPTY
99733: LIST
99734: LIST
99735: PUSH
99736: LD_INT 1
99738: PUSH
99739: LD_INT 2
99741: NEG
99742: PUSH
99743: EMPTY
99744: LIST
99745: LIST
99746: PUSH
99747: LD_INT 0
99749: PUSH
99750: LD_INT 2
99752: NEG
99753: PUSH
99754: EMPTY
99755: LIST
99756: LIST
99757: PUSH
99758: LD_INT 1
99760: NEG
99761: PUSH
99762: LD_INT 3
99764: NEG
99765: PUSH
99766: EMPTY
99767: LIST
99768: LIST
99769: PUSH
99770: LD_INT 1
99772: NEG
99773: PUSH
99774: LD_INT 4
99776: NEG
99777: PUSH
99778: EMPTY
99779: LIST
99780: LIST
99781: PUSH
99782: LD_INT 2
99784: PUSH
99785: LD_INT 2
99787: NEG
99788: PUSH
99789: EMPTY
99790: LIST
99791: LIST
99792: PUSH
99793: LD_INT 2
99795: NEG
99796: PUSH
99797: LD_INT 4
99799: NEG
99800: PUSH
99801: EMPTY
99802: LIST
99803: LIST
99804: PUSH
99805: LD_INT 4
99807: PUSH
99808: LD_INT 0
99810: PUSH
99811: EMPTY
99812: LIST
99813: LIST
99814: PUSH
99815: LD_INT 4
99817: PUSH
99818: LD_INT 1
99820: NEG
99821: PUSH
99822: EMPTY
99823: LIST
99824: LIST
99825: PUSH
99826: LD_INT 5
99828: PUSH
99829: LD_INT 0
99831: PUSH
99832: EMPTY
99833: LIST
99834: LIST
99835: PUSH
99836: LD_INT 5
99838: PUSH
99839: LD_INT 1
99841: PUSH
99842: EMPTY
99843: LIST
99844: LIST
99845: PUSH
99846: LD_INT 4
99848: PUSH
99849: LD_INT 1
99851: PUSH
99852: EMPTY
99853: LIST
99854: LIST
99855: PUSH
99856: LD_INT 3
99858: PUSH
99859: LD_INT 0
99861: PUSH
99862: EMPTY
99863: LIST
99864: LIST
99865: PUSH
99866: LD_INT 3
99868: PUSH
99869: LD_INT 1
99871: NEG
99872: PUSH
99873: EMPTY
99874: LIST
99875: LIST
99876: PUSH
99877: LD_INT 3
99879: PUSH
99880: LD_INT 2
99882: NEG
99883: PUSH
99884: EMPTY
99885: LIST
99886: LIST
99887: PUSH
99888: LD_INT 5
99890: PUSH
99891: LD_INT 2
99893: PUSH
99894: EMPTY
99895: LIST
99896: LIST
99897: PUSH
99898: LD_INT 3
99900: PUSH
99901: LD_INT 3
99903: PUSH
99904: EMPTY
99905: LIST
99906: LIST
99907: PUSH
99908: LD_INT 3
99910: PUSH
99911: LD_INT 2
99913: PUSH
99914: EMPTY
99915: LIST
99916: LIST
99917: PUSH
99918: LD_INT 4
99920: PUSH
99921: LD_INT 3
99923: PUSH
99924: EMPTY
99925: LIST
99926: LIST
99927: PUSH
99928: LD_INT 4
99930: PUSH
99931: LD_INT 4
99933: PUSH
99934: EMPTY
99935: LIST
99936: LIST
99937: PUSH
99938: LD_INT 3
99940: PUSH
99941: LD_INT 4
99943: PUSH
99944: EMPTY
99945: LIST
99946: LIST
99947: PUSH
99948: LD_INT 2
99950: PUSH
99951: LD_INT 3
99953: PUSH
99954: EMPTY
99955: LIST
99956: LIST
99957: PUSH
99958: LD_INT 2
99960: PUSH
99961: LD_INT 2
99963: PUSH
99964: EMPTY
99965: LIST
99966: LIST
99967: PUSH
99968: LD_INT 4
99970: PUSH
99971: LD_INT 2
99973: PUSH
99974: EMPTY
99975: LIST
99976: LIST
99977: PUSH
99978: LD_INT 2
99980: PUSH
99981: LD_INT 4
99983: PUSH
99984: EMPTY
99985: LIST
99986: LIST
99987: PUSH
99988: LD_INT 0
99990: PUSH
99991: LD_INT 4
99993: PUSH
99994: EMPTY
99995: LIST
99996: LIST
99997: PUSH
99998: LD_INT 0
100000: PUSH
100001: LD_INT 3
100003: PUSH
100004: EMPTY
100005: LIST
100006: LIST
100007: PUSH
100008: LD_INT 1
100010: PUSH
100011: LD_INT 4
100013: PUSH
100014: EMPTY
100015: LIST
100016: LIST
100017: PUSH
100018: LD_INT 1
100020: PUSH
100021: LD_INT 5
100023: PUSH
100024: EMPTY
100025: LIST
100026: LIST
100027: PUSH
100028: LD_INT 0
100030: PUSH
100031: LD_INT 5
100033: PUSH
100034: EMPTY
100035: LIST
100036: LIST
100037: PUSH
100038: LD_INT 1
100040: NEG
100041: PUSH
100042: LD_INT 4
100044: PUSH
100045: EMPTY
100046: LIST
100047: LIST
100048: PUSH
100049: LD_INT 1
100051: NEG
100052: PUSH
100053: LD_INT 3
100055: PUSH
100056: EMPTY
100057: LIST
100058: LIST
100059: PUSH
100060: LD_INT 2
100062: PUSH
100063: LD_INT 5
100065: PUSH
100066: EMPTY
100067: LIST
100068: LIST
100069: PUSH
100070: LD_INT 2
100072: NEG
100073: PUSH
100074: LD_INT 3
100076: PUSH
100077: EMPTY
100078: LIST
100079: LIST
100080: PUSH
100081: EMPTY
100082: LIST
100083: LIST
100084: LIST
100085: LIST
100086: LIST
100087: LIST
100088: LIST
100089: LIST
100090: LIST
100091: LIST
100092: LIST
100093: LIST
100094: LIST
100095: LIST
100096: LIST
100097: LIST
100098: LIST
100099: LIST
100100: LIST
100101: LIST
100102: LIST
100103: LIST
100104: LIST
100105: LIST
100106: LIST
100107: LIST
100108: LIST
100109: LIST
100110: LIST
100111: LIST
100112: LIST
100113: LIST
100114: LIST
100115: LIST
100116: LIST
100117: LIST
100118: LIST
100119: LIST
100120: LIST
100121: LIST
100122: LIST
100123: LIST
100124: LIST
100125: LIST
100126: LIST
100127: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
100128: LD_ADDR_VAR 0 34
100132: PUSH
100133: LD_INT 0
100135: PUSH
100136: LD_INT 4
100138: NEG
100139: PUSH
100140: EMPTY
100141: LIST
100142: LIST
100143: PUSH
100144: LD_INT 0
100146: PUSH
100147: LD_INT 5
100149: NEG
100150: PUSH
100151: EMPTY
100152: LIST
100153: LIST
100154: PUSH
100155: LD_INT 1
100157: PUSH
100158: LD_INT 4
100160: NEG
100161: PUSH
100162: EMPTY
100163: LIST
100164: LIST
100165: PUSH
100166: LD_INT 1
100168: PUSH
100169: LD_INT 3
100171: NEG
100172: PUSH
100173: EMPTY
100174: LIST
100175: LIST
100176: PUSH
100177: LD_INT 0
100179: PUSH
100180: LD_INT 3
100182: NEG
100183: PUSH
100184: EMPTY
100185: LIST
100186: LIST
100187: PUSH
100188: LD_INT 1
100190: NEG
100191: PUSH
100192: LD_INT 4
100194: NEG
100195: PUSH
100196: EMPTY
100197: LIST
100198: LIST
100199: PUSH
100200: LD_INT 1
100202: NEG
100203: PUSH
100204: LD_INT 5
100206: NEG
100207: PUSH
100208: EMPTY
100209: LIST
100210: LIST
100211: PUSH
100212: LD_INT 2
100214: PUSH
100215: LD_INT 3
100217: NEG
100218: PUSH
100219: EMPTY
100220: LIST
100221: LIST
100222: PUSH
100223: LD_INT 2
100225: NEG
100226: PUSH
100227: LD_INT 5
100229: NEG
100230: PUSH
100231: EMPTY
100232: LIST
100233: LIST
100234: PUSH
100235: LD_INT 3
100237: PUSH
100238: LD_INT 0
100240: PUSH
100241: EMPTY
100242: LIST
100243: LIST
100244: PUSH
100245: LD_INT 3
100247: PUSH
100248: LD_INT 1
100250: NEG
100251: PUSH
100252: EMPTY
100253: LIST
100254: LIST
100255: PUSH
100256: LD_INT 4
100258: PUSH
100259: LD_INT 0
100261: PUSH
100262: EMPTY
100263: LIST
100264: LIST
100265: PUSH
100266: LD_INT 4
100268: PUSH
100269: LD_INT 1
100271: PUSH
100272: EMPTY
100273: LIST
100274: LIST
100275: PUSH
100276: LD_INT 3
100278: PUSH
100279: LD_INT 1
100281: PUSH
100282: EMPTY
100283: LIST
100284: LIST
100285: PUSH
100286: LD_INT 2
100288: PUSH
100289: LD_INT 0
100291: PUSH
100292: EMPTY
100293: LIST
100294: LIST
100295: PUSH
100296: LD_INT 2
100298: PUSH
100299: LD_INT 1
100301: NEG
100302: PUSH
100303: EMPTY
100304: LIST
100305: LIST
100306: PUSH
100307: LD_INT 2
100309: PUSH
100310: LD_INT 2
100312: NEG
100313: PUSH
100314: EMPTY
100315: LIST
100316: LIST
100317: PUSH
100318: LD_INT 4
100320: PUSH
100321: LD_INT 2
100323: PUSH
100324: EMPTY
100325: LIST
100326: LIST
100327: PUSH
100328: LD_INT 4
100330: PUSH
100331: LD_INT 4
100333: PUSH
100334: EMPTY
100335: LIST
100336: LIST
100337: PUSH
100338: LD_INT 4
100340: PUSH
100341: LD_INT 3
100343: PUSH
100344: EMPTY
100345: LIST
100346: LIST
100347: PUSH
100348: LD_INT 5
100350: PUSH
100351: LD_INT 4
100353: PUSH
100354: EMPTY
100355: LIST
100356: LIST
100357: PUSH
100358: LD_INT 5
100360: PUSH
100361: LD_INT 5
100363: PUSH
100364: EMPTY
100365: LIST
100366: LIST
100367: PUSH
100368: LD_INT 4
100370: PUSH
100371: LD_INT 5
100373: PUSH
100374: EMPTY
100375: LIST
100376: LIST
100377: PUSH
100378: LD_INT 3
100380: PUSH
100381: LD_INT 4
100383: PUSH
100384: EMPTY
100385: LIST
100386: LIST
100387: PUSH
100388: LD_INT 3
100390: PUSH
100391: LD_INT 3
100393: PUSH
100394: EMPTY
100395: LIST
100396: LIST
100397: PUSH
100398: LD_INT 5
100400: PUSH
100401: LD_INT 3
100403: PUSH
100404: EMPTY
100405: LIST
100406: LIST
100407: PUSH
100408: LD_INT 3
100410: PUSH
100411: LD_INT 5
100413: PUSH
100414: EMPTY
100415: LIST
100416: LIST
100417: PUSH
100418: LD_INT 0
100420: PUSH
100421: LD_INT 3
100423: PUSH
100424: EMPTY
100425: LIST
100426: LIST
100427: PUSH
100428: LD_INT 0
100430: PUSH
100431: LD_INT 2
100433: PUSH
100434: EMPTY
100435: LIST
100436: LIST
100437: PUSH
100438: LD_INT 1
100440: PUSH
100441: LD_INT 3
100443: PUSH
100444: EMPTY
100445: LIST
100446: LIST
100447: PUSH
100448: LD_INT 1
100450: PUSH
100451: LD_INT 4
100453: PUSH
100454: EMPTY
100455: LIST
100456: LIST
100457: PUSH
100458: LD_INT 0
100460: PUSH
100461: LD_INT 4
100463: PUSH
100464: EMPTY
100465: LIST
100466: LIST
100467: PUSH
100468: LD_INT 1
100470: NEG
100471: PUSH
100472: LD_INT 3
100474: PUSH
100475: EMPTY
100476: LIST
100477: LIST
100478: PUSH
100479: LD_INT 1
100481: NEG
100482: PUSH
100483: LD_INT 2
100485: PUSH
100486: EMPTY
100487: LIST
100488: LIST
100489: PUSH
100490: LD_INT 2
100492: PUSH
100493: LD_INT 4
100495: PUSH
100496: EMPTY
100497: LIST
100498: LIST
100499: PUSH
100500: LD_INT 2
100502: NEG
100503: PUSH
100504: LD_INT 2
100506: PUSH
100507: EMPTY
100508: LIST
100509: LIST
100510: PUSH
100511: LD_INT 4
100513: NEG
100514: PUSH
100515: LD_INT 0
100517: PUSH
100518: EMPTY
100519: LIST
100520: LIST
100521: PUSH
100522: LD_INT 4
100524: NEG
100525: PUSH
100526: LD_INT 1
100528: NEG
100529: PUSH
100530: EMPTY
100531: LIST
100532: LIST
100533: PUSH
100534: LD_INT 3
100536: NEG
100537: PUSH
100538: LD_INT 0
100540: PUSH
100541: EMPTY
100542: LIST
100543: LIST
100544: PUSH
100545: LD_INT 3
100547: NEG
100548: PUSH
100549: LD_INT 1
100551: PUSH
100552: EMPTY
100553: LIST
100554: LIST
100555: PUSH
100556: LD_INT 4
100558: NEG
100559: PUSH
100560: LD_INT 1
100562: PUSH
100563: EMPTY
100564: LIST
100565: LIST
100566: PUSH
100567: LD_INT 5
100569: NEG
100570: PUSH
100571: LD_INT 0
100573: PUSH
100574: EMPTY
100575: LIST
100576: LIST
100577: PUSH
100578: LD_INT 5
100580: NEG
100581: PUSH
100582: LD_INT 1
100584: NEG
100585: PUSH
100586: EMPTY
100587: LIST
100588: LIST
100589: PUSH
100590: LD_INT 5
100592: NEG
100593: PUSH
100594: LD_INT 2
100596: NEG
100597: PUSH
100598: EMPTY
100599: LIST
100600: LIST
100601: PUSH
100602: LD_INT 3
100604: NEG
100605: PUSH
100606: LD_INT 2
100608: PUSH
100609: EMPTY
100610: LIST
100611: LIST
100612: PUSH
100613: EMPTY
100614: LIST
100615: LIST
100616: LIST
100617: LIST
100618: LIST
100619: LIST
100620: LIST
100621: LIST
100622: LIST
100623: LIST
100624: LIST
100625: LIST
100626: LIST
100627: LIST
100628: LIST
100629: LIST
100630: LIST
100631: LIST
100632: LIST
100633: LIST
100634: LIST
100635: LIST
100636: LIST
100637: LIST
100638: LIST
100639: LIST
100640: LIST
100641: LIST
100642: LIST
100643: LIST
100644: LIST
100645: LIST
100646: LIST
100647: LIST
100648: LIST
100649: LIST
100650: LIST
100651: LIST
100652: LIST
100653: LIST
100654: LIST
100655: LIST
100656: LIST
100657: LIST
100658: LIST
100659: ST_TO_ADDR
// end ; end ;
100660: GO 100663
100662: POP
// case btype of b_depot , b_warehouse :
100663: LD_VAR 0 1
100667: PUSH
100668: LD_INT 0
100670: DOUBLE
100671: EQUAL
100672: IFTRUE 100682
100674: LD_INT 1
100676: DOUBLE
100677: EQUAL
100678: IFTRUE 100682
100680: GO 100883
100682: POP
// case nation of nation_american :
100683: LD_VAR 0 5
100687: PUSH
100688: LD_INT 1
100690: DOUBLE
100691: EQUAL
100692: IFTRUE 100696
100694: GO 100752
100696: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
100697: LD_ADDR_VAR 0 9
100701: PUSH
100702: LD_VAR 0 11
100706: PUSH
100707: LD_VAR 0 12
100711: PUSH
100712: LD_VAR 0 13
100716: PUSH
100717: LD_VAR 0 14
100721: PUSH
100722: LD_VAR 0 15
100726: PUSH
100727: LD_VAR 0 16
100731: PUSH
100732: EMPTY
100733: LIST
100734: LIST
100735: LIST
100736: LIST
100737: LIST
100738: LIST
100739: PUSH
100740: LD_VAR 0 4
100744: PUSH
100745: LD_INT 1
100747: PLUS
100748: ARRAY
100749: ST_TO_ADDR
100750: GO 100881
100752: LD_INT 2
100754: DOUBLE
100755: EQUAL
100756: IFTRUE 100760
100758: GO 100816
100760: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
100761: LD_ADDR_VAR 0 9
100765: PUSH
100766: LD_VAR 0 17
100770: PUSH
100771: LD_VAR 0 18
100775: PUSH
100776: LD_VAR 0 19
100780: PUSH
100781: LD_VAR 0 20
100785: PUSH
100786: LD_VAR 0 21
100790: PUSH
100791: LD_VAR 0 22
100795: PUSH
100796: EMPTY
100797: LIST
100798: LIST
100799: LIST
100800: LIST
100801: LIST
100802: LIST
100803: PUSH
100804: LD_VAR 0 4
100808: PUSH
100809: LD_INT 1
100811: PLUS
100812: ARRAY
100813: ST_TO_ADDR
100814: GO 100881
100816: LD_INT 3
100818: DOUBLE
100819: EQUAL
100820: IFTRUE 100824
100822: GO 100880
100824: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
100825: LD_ADDR_VAR 0 9
100829: PUSH
100830: LD_VAR 0 23
100834: PUSH
100835: LD_VAR 0 24
100839: PUSH
100840: LD_VAR 0 25
100844: PUSH
100845: LD_VAR 0 26
100849: PUSH
100850: LD_VAR 0 27
100854: PUSH
100855: LD_VAR 0 28
100859: PUSH
100860: EMPTY
100861: LIST
100862: LIST
100863: LIST
100864: LIST
100865: LIST
100866: LIST
100867: PUSH
100868: LD_VAR 0 4
100872: PUSH
100873: LD_INT 1
100875: PLUS
100876: ARRAY
100877: ST_TO_ADDR
100878: GO 100881
100880: POP
100881: GO 101436
100883: LD_INT 2
100885: DOUBLE
100886: EQUAL
100887: IFTRUE 100897
100889: LD_INT 3
100891: DOUBLE
100892: EQUAL
100893: IFTRUE 100897
100895: GO 100953
100897: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
100898: LD_ADDR_VAR 0 9
100902: PUSH
100903: LD_VAR 0 29
100907: PUSH
100908: LD_VAR 0 30
100912: PUSH
100913: LD_VAR 0 31
100917: PUSH
100918: LD_VAR 0 32
100922: PUSH
100923: LD_VAR 0 33
100927: PUSH
100928: LD_VAR 0 34
100932: PUSH
100933: EMPTY
100934: LIST
100935: LIST
100936: LIST
100937: LIST
100938: LIST
100939: LIST
100940: PUSH
100941: LD_VAR 0 4
100945: PUSH
100946: LD_INT 1
100948: PLUS
100949: ARRAY
100950: ST_TO_ADDR
100951: GO 101436
100953: LD_INT 16
100955: DOUBLE
100956: EQUAL
100957: IFTRUE 101015
100959: LD_INT 17
100961: DOUBLE
100962: EQUAL
100963: IFTRUE 101015
100965: LD_INT 18
100967: DOUBLE
100968: EQUAL
100969: IFTRUE 101015
100971: LD_INT 19
100973: DOUBLE
100974: EQUAL
100975: IFTRUE 101015
100977: LD_INT 22
100979: DOUBLE
100980: EQUAL
100981: IFTRUE 101015
100983: LD_INT 20
100985: DOUBLE
100986: EQUAL
100987: IFTRUE 101015
100989: LD_INT 21
100991: DOUBLE
100992: EQUAL
100993: IFTRUE 101015
100995: LD_INT 23
100997: DOUBLE
100998: EQUAL
100999: IFTRUE 101015
101001: LD_INT 24
101003: DOUBLE
101004: EQUAL
101005: IFTRUE 101015
101007: LD_INT 25
101009: DOUBLE
101010: EQUAL
101011: IFTRUE 101015
101013: GO 101071
101015: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
101016: LD_ADDR_VAR 0 9
101020: PUSH
101021: LD_VAR 0 35
101025: PUSH
101026: LD_VAR 0 36
101030: PUSH
101031: LD_VAR 0 37
101035: PUSH
101036: LD_VAR 0 38
101040: PUSH
101041: LD_VAR 0 39
101045: PUSH
101046: LD_VAR 0 40
101050: PUSH
101051: EMPTY
101052: LIST
101053: LIST
101054: LIST
101055: LIST
101056: LIST
101057: LIST
101058: PUSH
101059: LD_VAR 0 4
101063: PUSH
101064: LD_INT 1
101066: PLUS
101067: ARRAY
101068: ST_TO_ADDR
101069: GO 101436
101071: LD_INT 6
101073: DOUBLE
101074: EQUAL
101075: IFTRUE 101127
101077: LD_INT 7
101079: DOUBLE
101080: EQUAL
101081: IFTRUE 101127
101083: LD_INT 8
101085: DOUBLE
101086: EQUAL
101087: IFTRUE 101127
101089: LD_INT 13
101091: DOUBLE
101092: EQUAL
101093: IFTRUE 101127
101095: LD_INT 12
101097: DOUBLE
101098: EQUAL
101099: IFTRUE 101127
101101: LD_INT 15
101103: DOUBLE
101104: EQUAL
101105: IFTRUE 101127
101107: LD_INT 11
101109: DOUBLE
101110: EQUAL
101111: IFTRUE 101127
101113: LD_INT 14
101115: DOUBLE
101116: EQUAL
101117: IFTRUE 101127
101119: LD_INT 10
101121: DOUBLE
101122: EQUAL
101123: IFTRUE 101127
101125: GO 101183
101127: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
101128: LD_ADDR_VAR 0 9
101132: PUSH
101133: LD_VAR 0 41
101137: PUSH
101138: LD_VAR 0 42
101142: PUSH
101143: LD_VAR 0 43
101147: PUSH
101148: LD_VAR 0 44
101152: PUSH
101153: LD_VAR 0 45
101157: PUSH
101158: LD_VAR 0 46
101162: PUSH
101163: EMPTY
101164: LIST
101165: LIST
101166: LIST
101167: LIST
101168: LIST
101169: LIST
101170: PUSH
101171: LD_VAR 0 4
101175: PUSH
101176: LD_INT 1
101178: PLUS
101179: ARRAY
101180: ST_TO_ADDR
101181: GO 101436
101183: LD_INT 36
101185: DOUBLE
101186: EQUAL
101187: IFTRUE 101191
101189: GO 101247
101191: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
101192: LD_ADDR_VAR 0 9
101196: PUSH
101197: LD_VAR 0 47
101201: PUSH
101202: LD_VAR 0 48
101206: PUSH
101207: LD_VAR 0 49
101211: PUSH
101212: LD_VAR 0 50
101216: PUSH
101217: LD_VAR 0 51
101221: PUSH
101222: LD_VAR 0 52
101226: PUSH
101227: EMPTY
101228: LIST
101229: LIST
101230: LIST
101231: LIST
101232: LIST
101233: LIST
101234: PUSH
101235: LD_VAR 0 4
101239: PUSH
101240: LD_INT 1
101242: PLUS
101243: ARRAY
101244: ST_TO_ADDR
101245: GO 101436
101247: LD_INT 4
101249: DOUBLE
101250: EQUAL
101251: IFTRUE 101273
101253: LD_INT 5
101255: DOUBLE
101256: EQUAL
101257: IFTRUE 101273
101259: LD_INT 34
101261: DOUBLE
101262: EQUAL
101263: IFTRUE 101273
101265: LD_INT 37
101267: DOUBLE
101268: EQUAL
101269: IFTRUE 101273
101271: GO 101329
101273: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
101274: LD_ADDR_VAR 0 9
101278: PUSH
101279: LD_VAR 0 53
101283: PUSH
101284: LD_VAR 0 54
101288: PUSH
101289: LD_VAR 0 55
101293: PUSH
101294: LD_VAR 0 56
101298: PUSH
101299: LD_VAR 0 57
101303: PUSH
101304: LD_VAR 0 58
101308: PUSH
101309: EMPTY
101310: LIST
101311: LIST
101312: LIST
101313: LIST
101314: LIST
101315: LIST
101316: PUSH
101317: LD_VAR 0 4
101321: PUSH
101322: LD_INT 1
101324: PLUS
101325: ARRAY
101326: ST_TO_ADDR
101327: GO 101436
101329: LD_INT 31
101331: DOUBLE
101332: EQUAL
101333: IFTRUE 101379
101335: LD_INT 32
101337: DOUBLE
101338: EQUAL
101339: IFTRUE 101379
101341: LD_INT 33
101343: DOUBLE
101344: EQUAL
101345: IFTRUE 101379
101347: LD_INT 27
101349: DOUBLE
101350: EQUAL
101351: IFTRUE 101379
101353: LD_INT 26
101355: DOUBLE
101356: EQUAL
101357: IFTRUE 101379
101359: LD_INT 28
101361: DOUBLE
101362: EQUAL
101363: IFTRUE 101379
101365: LD_INT 29
101367: DOUBLE
101368: EQUAL
101369: IFTRUE 101379
101371: LD_INT 30
101373: DOUBLE
101374: EQUAL
101375: IFTRUE 101379
101377: GO 101435
101379: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
101380: LD_ADDR_VAR 0 9
101384: PUSH
101385: LD_VAR 0 59
101389: PUSH
101390: LD_VAR 0 60
101394: PUSH
101395: LD_VAR 0 61
101399: PUSH
101400: LD_VAR 0 62
101404: PUSH
101405: LD_VAR 0 63
101409: PUSH
101410: LD_VAR 0 64
101414: PUSH
101415: EMPTY
101416: LIST
101417: LIST
101418: LIST
101419: LIST
101420: LIST
101421: LIST
101422: PUSH
101423: LD_VAR 0 4
101427: PUSH
101428: LD_INT 1
101430: PLUS
101431: ARRAY
101432: ST_TO_ADDR
101433: GO 101436
101435: POP
// temp_list2 = [ ] ;
101436: LD_ADDR_VAR 0 10
101440: PUSH
101441: EMPTY
101442: ST_TO_ADDR
// for i in temp_list do
101443: LD_ADDR_VAR 0 8
101447: PUSH
101448: LD_VAR 0 9
101452: PUSH
101453: FOR_IN
101454: IFFALSE 101506
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
101456: LD_ADDR_VAR 0 10
101460: PUSH
101461: LD_VAR 0 10
101465: PUSH
101466: LD_VAR 0 8
101470: PUSH
101471: LD_INT 1
101473: ARRAY
101474: PUSH
101475: LD_VAR 0 2
101479: PLUS
101480: PUSH
101481: LD_VAR 0 8
101485: PUSH
101486: LD_INT 2
101488: ARRAY
101489: PUSH
101490: LD_VAR 0 3
101494: PLUS
101495: PUSH
101496: EMPTY
101497: LIST
101498: LIST
101499: PUSH
101500: EMPTY
101501: LIST
101502: ADD
101503: ST_TO_ADDR
101504: GO 101453
101506: POP
101507: POP
// result = temp_list2 ;
101508: LD_ADDR_VAR 0 7
101512: PUSH
101513: LD_VAR 0 10
101517: ST_TO_ADDR
// end ;
101518: LD_VAR 0 7
101522: RET
// export function EnemyInRange ( unit , dist ) ; begin
101523: LD_INT 0
101525: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
101526: LD_ADDR_VAR 0 3
101530: PUSH
101531: LD_VAR 0 1
101535: PPUSH
101536: CALL_OW 255
101540: PPUSH
101541: LD_VAR 0 1
101545: PPUSH
101546: CALL_OW 250
101550: PPUSH
101551: LD_VAR 0 1
101555: PPUSH
101556: CALL_OW 251
101560: PPUSH
101561: LD_VAR 0 2
101565: PPUSH
101566: CALL 74916 0 4
101570: PUSH
101571: LD_INT 4
101573: ARRAY
101574: ST_TO_ADDR
// end ;
101575: LD_VAR 0 3
101579: RET
// export function PlayerSeeMe ( unit ) ; begin
101580: LD_INT 0
101582: PPUSH
// result := See ( your_side , unit ) ;
101583: LD_ADDR_VAR 0 2
101587: PUSH
101588: LD_OWVAR 2
101592: PPUSH
101593: LD_VAR 0 1
101597: PPUSH
101598: CALL_OW 292
101602: ST_TO_ADDR
// end ;
101603: LD_VAR 0 2
101607: RET
// export function ReverseDir ( unit ) ; begin
101608: LD_INT 0
101610: PPUSH
// if not unit then
101611: LD_VAR 0 1
101615: NOT
101616: IFFALSE 101620
// exit ;
101618: GO 101643
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
101620: LD_ADDR_VAR 0 2
101624: PUSH
101625: LD_VAR 0 1
101629: PPUSH
101630: CALL_OW 254
101634: PUSH
101635: LD_INT 3
101637: PLUS
101638: PUSH
101639: LD_INT 6
101641: MOD
101642: ST_TO_ADDR
// end ;
101643: LD_VAR 0 2
101647: RET
// export function ReverseArray ( array ) ; var i ; begin
101648: LD_INT 0
101650: PPUSH
101651: PPUSH
// if not array then
101652: LD_VAR 0 1
101656: NOT
101657: IFFALSE 101661
// exit ;
101659: GO 101716
// result := [ ] ;
101661: LD_ADDR_VAR 0 2
101665: PUSH
101666: EMPTY
101667: ST_TO_ADDR
// for i := array downto 1 do
101668: LD_ADDR_VAR 0 3
101672: PUSH
101673: DOUBLE
101674: LD_VAR 0 1
101678: INC
101679: ST_TO_ADDR
101680: LD_INT 1
101682: PUSH
101683: FOR_DOWNTO
101684: IFFALSE 101714
// result := Join ( result , array [ i ] ) ;
101686: LD_ADDR_VAR 0 2
101690: PUSH
101691: LD_VAR 0 2
101695: PPUSH
101696: LD_VAR 0 1
101700: PUSH
101701: LD_VAR 0 3
101705: ARRAY
101706: PPUSH
101707: CALL 106359 0 2
101711: ST_TO_ADDR
101712: GO 101683
101714: POP
101715: POP
// end ;
101716: LD_VAR 0 2
101720: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
101721: LD_INT 0
101723: PPUSH
101724: PPUSH
101725: PPUSH
101726: PPUSH
101727: PPUSH
101728: PPUSH
// if not unit or not hexes then
101729: LD_VAR 0 1
101733: NOT
101734: PUSH
101735: LD_VAR 0 2
101739: NOT
101740: OR
101741: IFFALSE 101745
// exit ;
101743: GO 101868
// dist := 9999 ;
101745: LD_ADDR_VAR 0 5
101749: PUSH
101750: LD_INT 9999
101752: ST_TO_ADDR
// for i = 1 to hexes do
101753: LD_ADDR_VAR 0 4
101757: PUSH
101758: DOUBLE
101759: LD_INT 1
101761: DEC
101762: ST_TO_ADDR
101763: LD_VAR 0 2
101767: PUSH
101768: FOR_TO
101769: IFFALSE 101856
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
101771: LD_ADDR_VAR 0 6
101775: PUSH
101776: LD_VAR 0 1
101780: PPUSH
101781: LD_VAR 0 2
101785: PUSH
101786: LD_VAR 0 4
101790: ARRAY
101791: PUSH
101792: LD_INT 1
101794: ARRAY
101795: PPUSH
101796: LD_VAR 0 2
101800: PUSH
101801: LD_VAR 0 4
101805: ARRAY
101806: PUSH
101807: LD_INT 2
101809: ARRAY
101810: PPUSH
101811: CALL_OW 297
101815: ST_TO_ADDR
// if tdist < dist then
101816: LD_VAR 0 6
101820: PUSH
101821: LD_VAR 0 5
101825: LESS
101826: IFFALSE 101854
// begin hex := hexes [ i ] ;
101828: LD_ADDR_VAR 0 8
101832: PUSH
101833: LD_VAR 0 2
101837: PUSH
101838: LD_VAR 0 4
101842: ARRAY
101843: ST_TO_ADDR
// dist := tdist ;
101844: LD_ADDR_VAR 0 5
101848: PUSH
101849: LD_VAR 0 6
101853: ST_TO_ADDR
// end ; end ;
101854: GO 101768
101856: POP
101857: POP
// result := hex ;
101858: LD_ADDR_VAR 0 3
101862: PUSH
101863: LD_VAR 0 8
101867: ST_TO_ADDR
// end ;
101868: LD_VAR 0 3
101872: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
101873: LD_INT 0
101875: PPUSH
101876: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
101877: LD_VAR 0 1
101881: NOT
101882: PUSH
101883: LD_VAR 0 1
101887: PUSH
101888: LD_INT 21
101890: PUSH
101891: LD_INT 2
101893: PUSH
101894: EMPTY
101895: LIST
101896: LIST
101897: PUSH
101898: LD_INT 23
101900: PUSH
101901: LD_INT 2
101903: PUSH
101904: EMPTY
101905: LIST
101906: LIST
101907: PUSH
101908: EMPTY
101909: LIST
101910: LIST
101911: PPUSH
101912: CALL_OW 69
101916: IN
101917: NOT
101918: OR
101919: IFFALSE 101923
// exit ;
101921: GO 101970
// for i = 1 to 3 do
101923: LD_ADDR_VAR 0 3
101927: PUSH
101928: DOUBLE
101929: LD_INT 1
101931: DEC
101932: ST_TO_ADDR
101933: LD_INT 3
101935: PUSH
101936: FOR_TO
101937: IFFALSE 101968
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
101939: LD_VAR 0 1
101943: PPUSH
101944: CALL_OW 250
101948: PPUSH
101949: LD_VAR 0 1
101953: PPUSH
101954: CALL_OW 251
101958: PPUSH
101959: LD_INT 1
101961: PPUSH
101962: CALL_OW 453
101966: GO 101936
101968: POP
101969: POP
// end ;
101970: LD_VAR 0 2
101974: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
101975: LD_INT 0
101977: PPUSH
101978: PPUSH
101979: PPUSH
101980: PPUSH
101981: PPUSH
101982: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
101983: LD_VAR 0 1
101987: NOT
101988: PUSH
101989: LD_VAR 0 2
101993: NOT
101994: OR
101995: PUSH
101996: LD_VAR 0 1
102000: PPUSH
102001: CALL_OW 314
102005: OR
102006: IFFALSE 102010
// exit ;
102008: GO 102477
// if GetLives ( i ) < 250 then
102010: LD_VAR 0 4
102014: PPUSH
102015: CALL_OW 256
102019: PUSH
102020: LD_INT 250
102022: LESS
102023: IFFALSE 102036
// begin ComAutodestruct ( i ) ;
102025: LD_VAR 0 4
102029: PPUSH
102030: CALL 101873 0 1
// exit ;
102034: GO 102477
// end ; x := GetX ( enemy_unit ) ;
102036: LD_ADDR_VAR 0 7
102040: PUSH
102041: LD_VAR 0 2
102045: PPUSH
102046: CALL_OW 250
102050: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
102051: LD_ADDR_VAR 0 8
102055: PUSH
102056: LD_VAR 0 2
102060: PPUSH
102061: CALL_OW 251
102065: ST_TO_ADDR
// if not x or not y then
102066: LD_VAR 0 7
102070: NOT
102071: PUSH
102072: LD_VAR 0 8
102076: NOT
102077: OR
102078: IFFALSE 102082
// exit ;
102080: GO 102477
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
102082: LD_ADDR_VAR 0 6
102086: PUSH
102087: LD_VAR 0 7
102091: PPUSH
102092: LD_INT 0
102094: PPUSH
102095: LD_INT 4
102097: PPUSH
102098: CALL_OW 272
102102: PUSH
102103: LD_VAR 0 8
102107: PPUSH
102108: LD_INT 0
102110: PPUSH
102111: LD_INT 4
102113: PPUSH
102114: CALL_OW 273
102118: PUSH
102119: EMPTY
102120: LIST
102121: LIST
102122: PUSH
102123: LD_VAR 0 7
102127: PPUSH
102128: LD_INT 1
102130: PPUSH
102131: LD_INT 4
102133: PPUSH
102134: CALL_OW 272
102138: PUSH
102139: LD_VAR 0 8
102143: PPUSH
102144: LD_INT 1
102146: PPUSH
102147: LD_INT 4
102149: PPUSH
102150: CALL_OW 273
102154: PUSH
102155: EMPTY
102156: LIST
102157: LIST
102158: PUSH
102159: LD_VAR 0 7
102163: PPUSH
102164: LD_INT 2
102166: PPUSH
102167: LD_INT 4
102169: PPUSH
102170: CALL_OW 272
102174: PUSH
102175: LD_VAR 0 8
102179: PPUSH
102180: LD_INT 2
102182: PPUSH
102183: LD_INT 4
102185: PPUSH
102186: CALL_OW 273
102190: PUSH
102191: EMPTY
102192: LIST
102193: LIST
102194: PUSH
102195: LD_VAR 0 7
102199: PPUSH
102200: LD_INT 3
102202: PPUSH
102203: LD_INT 4
102205: PPUSH
102206: CALL_OW 272
102210: PUSH
102211: LD_VAR 0 8
102215: PPUSH
102216: LD_INT 3
102218: PPUSH
102219: LD_INT 4
102221: PPUSH
102222: CALL_OW 273
102226: PUSH
102227: EMPTY
102228: LIST
102229: LIST
102230: PUSH
102231: LD_VAR 0 7
102235: PPUSH
102236: LD_INT 4
102238: PPUSH
102239: LD_INT 4
102241: PPUSH
102242: CALL_OW 272
102246: PUSH
102247: LD_VAR 0 8
102251: PPUSH
102252: LD_INT 4
102254: PPUSH
102255: LD_INT 4
102257: PPUSH
102258: CALL_OW 273
102262: PUSH
102263: EMPTY
102264: LIST
102265: LIST
102266: PUSH
102267: LD_VAR 0 7
102271: PPUSH
102272: LD_INT 5
102274: PPUSH
102275: LD_INT 4
102277: PPUSH
102278: CALL_OW 272
102282: PUSH
102283: LD_VAR 0 8
102287: PPUSH
102288: LD_INT 5
102290: PPUSH
102291: LD_INT 4
102293: PPUSH
102294: CALL_OW 273
102298: PUSH
102299: EMPTY
102300: LIST
102301: LIST
102302: PUSH
102303: EMPTY
102304: LIST
102305: LIST
102306: LIST
102307: LIST
102308: LIST
102309: LIST
102310: ST_TO_ADDR
// for i = tmp downto 1 do
102311: LD_ADDR_VAR 0 4
102315: PUSH
102316: DOUBLE
102317: LD_VAR 0 6
102321: INC
102322: ST_TO_ADDR
102323: LD_INT 1
102325: PUSH
102326: FOR_DOWNTO
102327: IFFALSE 102428
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
102329: LD_VAR 0 6
102333: PUSH
102334: LD_VAR 0 4
102338: ARRAY
102339: PUSH
102340: LD_INT 1
102342: ARRAY
102343: PPUSH
102344: LD_VAR 0 6
102348: PUSH
102349: LD_VAR 0 4
102353: ARRAY
102354: PUSH
102355: LD_INT 2
102357: ARRAY
102358: PPUSH
102359: CALL_OW 488
102363: NOT
102364: PUSH
102365: LD_VAR 0 6
102369: PUSH
102370: LD_VAR 0 4
102374: ARRAY
102375: PUSH
102376: LD_INT 1
102378: ARRAY
102379: PPUSH
102380: LD_VAR 0 6
102384: PUSH
102385: LD_VAR 0 4
102389: ARRAY
102390: PUSH
102391: LD_INT 2
102393: ARRAY
102394: PPUSH
102395: CALL_OW 428
102399: PUSH
102400: LD_INT 0
102402: NONEQUAL
102403: OR
102404: IFFALSE 102426
// tmp := Delete ( tmp , i ) ;
102406: LD_ADDR_VAR 0 6
102410: PUSH
102411: LD_VAR 0 6
102415: PPUSH
102416: LD_VAR 0 4
102420: PPUSH
102421: CALL_OW 3
102425: ST_TO_ADDR
102426: GO 102326
102428: POP
102429: POP
// j := GetClosestHex ( unit , tmp ) ;
102430: LD_ADDR_VAR 0 5
102434: PUSH
102435: LD_VAR 0 1
102439: PPUSH
102440: LD_VAR 0 6
102444: PPUSH
102445: CALL 101721 0 2
102449: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
102450: LD_VAR 0 1
102454: PPUSH
102455: LD_VAR 0 5
102459: PUSH
102460: LD_INT 1
102462: ARRAY
102463: PPUSH
102464: LD_VAR 0 5
102468: PUSH
102469: LD_INT 2
102471: ARRAY
102472: PPUSH
102473: CALL_OW 111
// end ;
102477: LD_VAR 0 3
102481: RET
// export function PrepareApemanSoldier ( ) ; begin
102482: LD_INT 0
102484: PPUSH
// uc_nation := 0 ;
102485: LD_ADDR_OWVAR 21
102489: PUSH
102490: LD_INT 0
102492: ST_TO_ADDR
// hc_sex := sex_male ;
102493: LD_ADDR_OWVAR 27
102497: PUSH
102498: LD_INT 1
102500: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
102501: LD_ADDR_OWVAR 28
102505: PUSH
102506: LD_INT 15
102508: ST_TO_ADDR
// hc_gallery :=  ;
102509: LD_ADDR_OWVAR 33
102513: PUSH
102514: LD_STRING 
102516: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
102517: LD_ADDR_OWVAR 31
102521: PUSH
102522: LD_INT 0
102524: PPUSH
102525: LD_INT 3
102527: PPUSH
102528: CALL_OW 12
102532: PUSH
102533: LD_INT 0
102535: PPUSH
102536: LD_INT 3
102538: PPUSH
102539: CALL_OW 12
102543: PUSH
102544: LD_INT 0
102546: PUSH
102547: LD_INT 0
102549: PUSH
102550: EMPTY
102551: LIST
102552: LIST
102553: LIST
102554: LIST
102555: ST_TO_ADDR
// end ;
102556: LD_VAR 0 1
102560: RET
// export function PrepareApemanEngineer ( ) ; begin
102561: LD_INT 0
102563: PPUSH
// uc_nation := 0 ;
102564: LD_ADDR_OWVAR 21
102568: PUSH
102569: LD_INT 0
102571: ST_TO_ADDR
// hc_sex := sex_male ;
102572: LD_ADDR_OWVAR 27
102576: PUSH
102577: LD_INT 1
102579: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
102580: LD_ADDR_OWVAR 28
102584: PUSH
102585: LD_INT 16
102587: ST_TO_ADDR
// hc_gallery :=  ;
102588: LD_ADDR_OWVAR 33
102592: PUSH
102593: LD_STRING 
102595: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
102596: LD_ADDR_OWVAR 31
102600: PUSH
102601: LD_INT 0
102603: PPUSH
102604: LD_INT 3
102606: PPUSH
102607: CALL_OW 12
102611: PUSH
102612: LD_INT 0
102614: PPUSH
102615: LD_INT 3
102617: PPUSH
102618: CALL_OW 12
102622: PUSH
102623: LD_INT 0
102625: PUSH
102626: LD_INT 0
102628: PUSH
102629: EMPTY
102630: LIST
102631: LIST
102632: LIST
102633: LIST
102634: ST_TO_ADDR
// end ;
102635: LD_VAR 0 1
102639: RET
// export function PrepareApeman ( agressivity ) ; begin
102640: LD_INT 0
102642: PPUSH
// uc_side := 0 ;
102643: LD_ADDR_OWVAR 20
102647: PUSH
102648: LD_INT 0
102650: ST_TO_ADDR
// uc_nation := 0 ;
102651: LD_ADDR_OWVAR 21
102655: PUSH
102656: LD_INT 0
102658: ST_TO_ADDR
// hc_sex := sex_male ;
102659: LD_ADDR_OWVAR 27
102663: PUSH
102664: LD_INT 1
102666: ST_TO_ADDR
// hc_class := class_apeman ;
102667: LD_ADDR_OWVAR 28
102671: PUSH
102672: LD_INT 12
102674: ST_TO_ADDR
// hc_gallery :=  ;
102675: LD_ADDR_OWVAR 33
102679: PUSH
102680: LD_STRING 
102682: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
102683: LD_ADDR_OWVAR 35
102687: PUSH
102688: LD_VAR 0 1
102692: NEG
102693: PPUSH
102694: LD_VAR 0 1
102698: PPUSH
102699: CALL_OW 12
102703: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
102704: LD_ADDR_OWVAR 31
102708: PUSH
102709: LD_INT 0
102711: PPUSH
102712: LD_INT 3
102714: PPUSH
102715: CALL_OW 12
102719: PUSH
102720: LD_INT 0
102722: PPUSH
102723: LD_INT 3
102725: PPUSH
102726: CALL_OW 12
102730: PUSH
102731: LD_INT 0
102733: PUSH
102734: LD_INT 0
102736: PUSH
102737: EMPTY
102738: LIST
102739: LIST
102740: LIST
102741: LIST
102742: ST_TO_ADDR
// end ;
102743: LD_VAR 0 2
102747: RET
// export function PrepareTiger ( agressivity ) ; begin
102748: LD_INT 0
102750: PPUSH
// uc_side := 0 ;
102751: LD_ADDR_OWVAR 20
102755: PUSH
102756: LD_INT 0
102758: ST_TO_ADDR
// uc_nation := 0 ;
102759: LD_ADDR_OWVAR 21
102763: PUSH
102764: LD_INT 0
102766: ST_TO_ADDR
// hc_class := class_tiger ;
102767: LD_ADDR_OWVAR 28
102771: PUSH
102772: LD_INT 14
102774: ST_TO_ADDR
// hc_gallery :=  ;
102775: LD_ADDR_OWVAR 33
102779: PUSH
102780: LD_STRING 
102782: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
102783: LD_ADDR_OWVAR 35
102787: PUSH
102788: LD_VAR 0 1
102792: NEG
102793: PPUSH
102794: LD_VAR 0 1
102798: PPUSH
102799: CALL_OW 12
102803: ST_TO_ADDR
// end ;
102804: LD_VAR 0 2
102808: RET
// export function PrepareEnchidna ( ) ; begin
102809: LD_INT 0
102811: PPUSH
// uc_side := 0 ;
102812: LD_ADDR_OWVAR 20
102816: PUSH
102817: LD_INT 0
102819: ST_TO_ADDR
// uc_nation := 0 ;
102820: LD_ADDR_OWVAR 21
102824: PUSH
102825: LD_INT 0
102827: ST_TO_ADDR
// hc_class := class_baggie ;
102828: LD_ADDR_OWVAR 28
102832: PUSH
102833: LD_INT 13
102835: ST_TO_ADDR
// hc_gallery :=  ;
102836: LD_ADDR_OWVAR 33
102840: PUSH
102841: LD_STRING 
102843: ST_TO_ADDR
// end ;
102844: LD_VAR 0 1
102848: RET
// export function PrepareFrog ( ) ; begin
102849: LD_INT 0
102851: PPUSH
// uc_side := 0 ;
102852: LD_ADDR_OWVAR 20
102856: PUSH
102857: LD_INT 0
102859: ST_TO_ADDR
// uc_nation := 0 ;
102860: LD_ADDR_OWVAR 21
102864: PUSH
102865: LD_INT 0
102867: ST_TO_ADDR
// hc_class := class_frog ;
102868: LD_ADDR_OWVAR 28
102872: PUSH
102873: LD_INT 19
102875: ST_TO_ADDR
// hc_gallery :=  ;
102876: LD_ADDR_OWVAR 33
102880: PUSH
102881: LD_STRING 
102883: ST_TO_ADDR
// end ;
102884: LD_VAR 0 1
102888: RET
// export function PrepareFish ( ) ; begin
102889: LD_INT 0
102891: PPUSH
// uc_side := 0 ;
102892: LD_ADDR_OWVAR 20
102896: PUSH
102897: LD_INT 0
102899: ST_TO_ADDR
// uc_nation := 0 ;
102900: LD_ADDR_OWVAR 21
102904: PUSH
102905: LD_INT 0
102907: ST_TO_ADDR
// hc_class := class_fish ;
102908: LD_ADDR_OWVAR 28
102912: PUSH
102913: LD_INT 20
102915: ST_TO_ADDR
// hc_gallery :=  ;
102916: LD_ADDR_OWVAR 33
102920: PUSH
102921: LD_STRING 
102923: ST_TO_ADDR
// end ;
102924: LD_VAR 0 1
102928: RET
// export function PrepareBird ( ) ; begin
102929: LD_INT 0
102931: PPUSH
// uc_side := 0 ;
102932: LD_ADDR_OWVAR 20
102936: PUSH
102937: LD_INT 0
102939: ST_TO_ADDR
// uc_nation := 0 ;
102940: LD_ADDR_OWVAR 21
102944: PUSH
102945: LD_INT 0
102947: ST_TO_ADDR
// hc_class := class_phororhacos ;
102948: LD_ADDR_OWVAR 28
102952: PUSH
102953: LD_INT 18
102955: ST_TO_ADDR
// hc_gallery :=  ;
102956: LD_ADDR_OWVAR 33
102960: PUSH
102961: LD_STRING 
102963: ST_TO_ADDR
// end ;
102964: LD_VAR 0 1
102968: RET
// export function PrepareHorse ( ) ; begin
102969: LD_INT 0
102971: PPUSH
// uc_side := 0 ;
102972: LD_ADDR_OWVAR 20
102976: PUSH
102977: LD_INT 0
102979: ST_TO_ADDR
// uc_nation := 0 ;
102980: LD_ADDR_OWVAR 21
102984: PUSH
102985: LD_INT 0
102987: ST_TO_ADDR
// hc_class := class_horse ;
102988: LD_ADDR_OWVAR 28
102992: PUSH
102993: LD_INT 21
102995: ST_TO_ADDR
// hc_gallery :=  ;
102996: LD_ADDR_OWVAR 33
103000: PUSH
103001: LD_STRING 
103003: ST_TO_ADDR
// end ;
103004: LD_VAR 0 1
103008: RET
// export function PrepareMastodont ( ) ; begin
103009: LD_INT 0
103011: PPUSH
// uc_side := 0 ;
103012: LD_ADDR_OWVAR 20
103016: PUSH
103017: LD_INT 0
103019: ST_TO_ADDR
// uc_nation := 0 ;
103020: LD_ADDR_OWVAR 21
103024: PUSH
103025: LD_INT 0
103027: ST_TO_ADDR
// vc_chassis := class_mastodont ;
103028: LD_ADDR_OWVAR 37
103032: PUSH
103033: LD_INT 31
103035: ST_TO_ADDR
// vc_control := control_rider ;
103036: LD_ADDR_OWVAR 38
103040: PUSH
103041: LD_INT 4
103043: ST_TO_ADDR
// end ;
103044: LD_VAR 0 1
103048: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
103049: LD_INT 0
103051: PPUSH
103052: PPUSH
103053: PPUSH
// uc_side = 0 ;
103054: LD_ADDR_OWVAR 20
103058: PUSH
103059: LD_INT 0
103061: ST_TO_ADDR
// uc_nation = 0 ;
103062: LD_ADDR_OWVAR 21
103066: PUSH
103067: LD_INT 0
103069: ST_TO_ADDR
// InitHc_All ( ) ;
103070: CALL_OW 584
// InitVc ;
103074: CALL_OW 20
// if mastodonts then
103078: LD_VAR 0 6
103082: IFFALSE 103149
// for i = 1 to mastodonts do
103084: LD_ADDR_VAR 0 11
103088: PUSH
103089: DOUBLE
103090: LD_INT 1
103092: DEC
103093: ST_TO_ADDR
103094: LD_VAR 0 6
103098: PUSH
103099: FOR_TO
103100: IFFALSE 103147
// begin vc_chassis := 31 ;
103102: LD_ADDR_OWVAR 37
103106: PUSH
103107: LD_INT 31
103109: ST_TO_ADDR
// vc_control := control_rider ;
103110: LD_ADDR_OWVAR 38
103114: PUSH
103115: LD_INT 4
103117: ST_TO_ADDR
// animal := CreateVehicle ;
103118: LD_ADDR_VAR 0 12
103122: PUSH
103123: CALL_OW 45
103127: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103128: LD_VAR 0 12
103132: PPUSH
103133: LD_VAR 0 8
103137: PPUSH
103138: LD_INT 0
103140: PPUSH
103141: CALL 105277 0 3
// end ;
103145: GO 103099
103147: POP
103148: POP
// if horses then
103149: LD_VAR 0 5
103153: IFFALSE 103220
// for i = 1 to horses do
103155: LD_ADDR_VAR 0 11
103159: PUSH
103160: DOUBLE
103161: LD_INT 1
103163: DEC
103164: ST_TO_ADDR
103165: LD_VAR 0 5
103169: PUSH
103170: FOR_TO
103171: IFFALSE 103218
// begin hc_class := 21 ;
103173: LD_ADDR_OWVAR 28
103177: PUSH
103178: LD_INT 21
103180: ST_TO_ADDR
// hc_gallery :=  ;
103181: LD_ADDR_OWVAR 33
103185: PUSH
103186: LD_STRING 
103188: ST_TO_ADDR
// animal := CreateHuman ;
103189: LD_ADDR_VAR 0 12
103193: PUSH
103194: CALL_OW 44
103198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103199: LD_VAR 0 12
103203: PPUSH
103204: LD_VAR 0 8
103208: PPUSH
103209: LD_INT 0
103211: PPUSH
103212: CALL 105277 0 3
// end ;
103216: GO 103170
103218: POP
103219: POP
// if birds then
103220: LD_VAR 0 1
103224: IFFALSE 103291
// for i = 1 to birds do
103226: LD_ADDR_VAR 0 11
103230: PUSH
103231: DOUBLE
103232: LD_INT 1
103234: DEC
103235: ST_TO_ADDR
103236: LD_VAR 0 1
103240: PUSH
103241: FOR_TO
103242: IFFALSE 103289
// begin hc_class = 18 ;
103244: LD_ADDR_OWVAR 28
103248: PUSH
103249: LD_INT 18
103251: ST_TO_ADDR
// hc_gallery =  ;
103252: LD_ADDR_OWVAR 33
103256: PUSH
103257: LD_STRING 
103259: ST_TO_ADDR
// animal := CreateHuman ;
103260: LD_ADDR_VAR 0 12
103264: PUSH
103265: CALL_OW 44
103269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103270: LD_VAR 0 12
103274: PPUSH
103275: LD_VAR 0 8
103279: PPUSH
103280: LD_INT 0
103282: PPUSH
103283: CALL 105277 0 3
// end ;
103287: GO 103241
103289: POP
103290: POP
// if tigers then
103291: LD_VAR 0 2
103295: IFFALSE 103379
// for i = 1 to tigers do
103297: LD_ADDR_VAR 0 11
103301: PUSH
103302: DOUBLE
103303: LD_INT 1
103305: DEC
103306: ST_TO_ADDR
103307: LD_VAR 0 2
103311: PUSH
103312: FOR_TO
103313: IFFALSE 103377
// begin hc_class = class_tiger ;
103315: LD_ADDR_OWVAR 28
103319: PUSH
103320: LD_INT 14
103322: ST_TO_ADDR
// hc_gallery =  ;
103323: LD_ADDR_OWVAR 33
103327: PUSH
103328: LD_STRING 
103330: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
103331: LD_ADDR_OWVAR 35
103335: PUSH
103336: LD_INT 7
103338: NEG
103339: PPUSH
103340: LD_INT 7
103342: PPUSH
103343: CALL_OW 12
103347: ST_TO_ADDR
// animal := CreateHuman ;
103348: LD_ADDR_VAR 0 12
103352: PUSH
103353: CALL_OW 44
103357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103358: LD_VAR 0 12
103362: PPUSH
103363: LD_VAR 0 8
103367: PPUSH
103368: LD_INT 0
103370: PPUSH
103371: CALL 105277 0 3
// end ;
103375: GO 103312
103377: POP
103378: POP
// if apemans then
103379: LD_VAR 0 3
103383: IFFALSE 103506
// for i = 1 to apemans do
103385: LD_ADDR_VAR 0 11
103389: PUSH
103390: DOUBLE
103391: LD_INT 1
103393: DEC
103394: ST_TO_ADDR
103395: LD_VAR 0 3
103399: PUSH
103400: FOR_TO
103401: IFFALSE 103504
// begin hc_class = class_apeman ;
103403: LD_ADDR_OWVAR 28
103407: PUSH
103408: LD_INT 12
103410: ST_TO_ADDR
// hc_gallery =  ;
103411: LD_ADDR_OWVAR 33
103415: PUSH
103416: LD_STRING 
103418: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
103419: LD_ADDR_OWVAR 35
103423: PUSH
103424: LD_INT 2
103426: NEG
103427: PPUSH
103428: LD_INT 2
103430: PPUSH
103431: CALL_OW 12
103435: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
103436: LD_ADDR_OWVAR 31
103440: PUSH
103441: LD_INT 1
103443: PPUSH
103444: LD_INT 3
103446: PPUSH
103447: CALL_OW 12
103451: PUSH
103452: LD_INT 1
103454: PPUSH
103455: LD_INT 3
103457: PPUSH
103458: CALL_OW 12
103462: PUSH
103463: LD_INT 0
103465: PUSH
103466: LD_INT 0
103468: PUSH
103469: EMPTY
103470: LIST
103471: LIST
103472: LIST
103473: LIST
103474: ST_TO_ADDR
// animal := CreateHuman ;
103475: LD_ADDR_VAR 0 12
103479: PUSH
103480: CALL_OW 44
103484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103485: LD_VAR 0 12
103489: PPUSH
103490: LD_VAR 0 8
103494: PPUSH
103495: LD_INT 0
103497: PPUSH
103498: CALL 105277 0 3
// end ;
103502: GO 103400
103504: POP
103505: POP
// if enchidnas then
103506: LD_VAR 0 4
103510: IFFALSE 103577
// for i = 1 to enchidnas do
103512: LD_ADDR_VAR 0 11
103516: PUSH
103517: DOUBLE
103518: LD_INT 1
103520: DEC
103521: ST_TO_ADDR
103522: LD_VAR 0 4
103526: PUSH
103527: FOR_TO
103528: IFFALSE 103575
// begin hc_class = 13 ;
103530: LD_ADDR_OWVAR 28
103534: PUSH
103535: LD_INT 13
103537: ST_TO_ADDR
// hc_gallery =  ;
103538: LD_ADDR_OWVAR 33
103542: PUSH
103543: LD_STRING 
103545: ST_TO_ADDR
// animal := CreateHuman ;
103546: LD_ADDR_VAR 0 12
103550: PUSH
103551: CALL_OW 44
103555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103556: LD_VAR 0 12
103560: PPUSH
103561: LD_VAR 0 8
103565: PPUSH
103566: LD_INT 0
103568: PPUSH
103569: CALL 105277 0 3
// end ;
103573: GO 103527
103575: POP
103576: POP
// if fishes then
103577: LD_VAR 0 7
103581: IFFALSE 103648
// for i = 1 to fishes do
103583: LD_ADDR_VAR 0 11
103587: PUSH
103588: DOUBLE
103589: LD_INT 1
103591: DEC
103592: ST_TO_ADDR
103593: LD_VAR 0 7
103597: PUSH
103598: FOR_TO
103599: IFFALSE 103646
// begin hc_class = 20 ;
103601: LD_ADDR_OWVAR 28
103605: PUSH
103606: LD_INT 20
103608: ST_TO_ADDR
// hc_gallery =  ;
103609: LD_ADDR_OWVAR 33
103613: PUSH
103614: LD_STRING 
103616: ST_TO_ADDR
// animal := CreateHuman ;
103617: LD_ADDR_VAR 0 12
103621: PUSH
103622: CALL_OW 44
103626: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
103627: LD_VAR 0 12
103631: PPUSH
103632: LD_VAR 0 9
103636: PPUSH
103637: LD_INT 0
103639: PPUSH
103640: CALL 105277 0 3
// end ;
103644: GO 103598
103646: POP
103647: POP
// end ;
103648: LD_VAR 0 10
103652: RET
// export function WantHeal ( sci , unit ) ; begin
103653: LD_INT 0
103655: PPUSH
// if GetTaskList ( sci ) > 0 then
103656: LD_VAR 0 1
103660: PPUSH
103661: CALL_OW 437
103665: PUSH
103666: LD_INT 0
103668: GREATER
103669: IFFALSE 103739
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
103671: LD_VAR 0 1
103675: PPUSH
103676: CALL_OW 437
103680: PUSH
103681: LD_INT 1
103683: ARRAY
103684: PUSH
103685: LD_INT 1
103687: ARRAY
103688: PUSH
103689: LD_STRING l
103691: EQUAL
103692: PUSH
103693: LD_VAR 0 1
103697: PPUSH
103698: CALL_OW 437
103702: PUSH
103703: LD_INT 1
103705: ARRAY
103706: PUSH
103707: LD_INT 4
103709: ARRAY
103710: PUSH
103711: LD_VAR 0 2
103715: EQUAL
103716: AND
103717: IFFALSE 103729
// result := true else
103719: LD_ADDR_VAR 0 3
103723: PUSH
103724: LD_INT 1
103726: ST_TO_ADDR
103727: GO 103737
// result := false ;
103729: LD_ADDR_VAR 0 3
103733: PUSH
103734: LD_INT 0
103736: ST_TO_ADDR
// end else
103737: GO 103747
// result := false ;
103739: LD_ADDR_VAR 0 3
103743: PUSH
103744: LD_INT 0
103746: ST_TO_ADDR
// end ;
103747: LD_VAR 0 3
103751: RET
// export function HealTarget ( sci ) ; begin
103752: LD_INT 0
103754: PPUSH
// if not sci then
103755: LD_VAR 0 1
103759: NOT
103760: IFFALSE 103764
// exit ;
103762: GO 103829
// result := 0 ;
103764: LD_ADDR_VAR 0 2
103768: PUSH
103769: LD_INT 0
103771: ST_TO_ADDR
// if GetTaskList ( sci ) then
103772: LD_VAR 0 1
103776: PPUSH
103777: CALL_OW 437
103781: IFFALSE 103829
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
103783: LD_VAR 0 1
103787: PPUSH
103788: CALL_OW 437
103792: PUSH
103793: LD_INT 1
103795: ARRAY
103796: PUSH
103797: LD_INT 1
103799: ARRAY
103800: PUSH
103801: LD_STRING l
103803: EQUAL
103804: IFFALSE 103829
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
103806: LD_ADDR_VAR 0 2
103810: PUSH
103811: LD_VAR 0 1
103815: PPUSH
103816: CALL_OW 437
103820: PUSH
103821: LD_INT 1
103823: ARRAY
103824: PUSH
103825: LD_INT 4
103827: ARRAY
103828: ST_TO_ADDR
// end ;
103829: LD_VAR 0 2
103833: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
103834: LD_INT 0
103836: PPUSH
103837: PPUSH
103838: PPUSH
103839: PPUSH
// if not base_units then
103840: LD_VAR 0 1
103844: NOT
103845: IFFALSE 103849
// exit ;
103847: GO 103936
// result := false ;
103849: LD_ADDR_VAR 0 2
103853: PUSH
103854: LD_INT 0
103856: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
103857: LD_ADDR_VAR 0 5
103861: PUSH
103862: LD_VAR 0 1
103866: PPUSH
103867: LD_INT 21
103869: PUSH
103870: LD_INT 3
103872: PUSH
103873: EMPTY
103874: LIST
103875: LIST
103876: PPUSH
103877: CALL_OW 72
103881: ST_TO_ADDR
// if not tmp then
103882: LD_VAR 0 5
103886: NOT
103887: IFFALSE 103891
// exit ;
103889: GO 103936
// for i in tmp do
103891: LD_ADDR_VAR 0 3
103895: PUSH
103896: LD_VAR 0 5
103900: PUSH
103901: FOR_IN
103902: IFFALSE 103934
// begin result := EnemyInRange ( i , 22 ) ;
103904: LD_ADDR_VAR 0 2
103908: PUSH
103909: LD_VAR 0 3
103913: PPUSH
103914: LD_INT 22
103916: PPUSH
103917: CALL 101523 0 2
103921: ST_TO_ADDR
// if result then
103922: LD_VAR 0 2
103926: IFFALSE 103932
// exit ;
103928: POP
103929: POP
103930: GO 103936
// end ;
103932: GO 103901
103934: POP
103935: POP
// end ;
103936: LD_VAR 0 2
103940: RET
// export function FilterByTag ( units , tag ) ; begin
103941: LD_INT 0
103943: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
103944: LD_ADDR_VAR 0 3
103948: PUSH
103949: LD_VAR 0 1
103953: PPUSH
103954: LD_INT 120
103956: PUSH
103957: LD_VAR 0 2
103961: PUSH
103962: EMPTY
103963: LIST
103964: LIST
103965: PPUSH
103966: CALL_OW 72
103970: ST_TO_ADDR
// end ;
103971: LD_VAR 0 3
103975: RET
// export function IsDriver ( un ) ; begin
103976: LD_INT 0
103978: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
103979: LD_ADDR_VAR 0 2
103983: PUSH
103984: LD_VAR 0 1
103988: PUSH
103989: LD_INT 55
103991: PUSH
103992: EMPTY
103993: LIST
103994: PPUSH
103995: CALL_OW 69
103999: IN
104000: ST_TO_ADDR
// end ;
104001: LD_VAR 0 2
104005: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
104006: LD_INT 0
104008: PPUSH
104009: PPUSH
// list := [ ] ;
104010: LD_ADDR_VAR 0 5
104014: PUSH
104015: EMPTY
104016: ST_TO_ADDR
// case d of 0 :
104017: LD_VAR 0 3
104021: PUSH
104022: LD_INT 0
104024: DOUBLE
104025: EQUAL
104026: IFTRUE 104030
104028: GO 104163
104030: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
104031: LD_ADDR_VAR 0 5
104035: PUSH
104036: LD_VAR 0 1
104040: PUSH
104041: LD_INT 4
104043: MINUS
104044: PUSH
104045: LD_VAR 0 2
104049: PUSH
104050: LD_INT 4
104052: MINUS
104053: PUSH
104054: LD_INT 2
104056: PUSH
104057: EMPTY
104058: LIST
104059: LIST
104060: LIST
104061: PUSH
104062: LD_VAR 0 1
104066: PUSH
104067: LD_INT 3
104069: MINUS
104070: PUSH
104071: LD_VAR 0 2
104075: PUSH
104076: LD_INT 1
104078: PUSH
104079: EMPTY
104080: LIST
104081: LIST
104082: LIST
104083: PUSH
104084: LD_VAR 0 1
104088: PUSH
104089: LD_INT 4
104091: PLUS
104092: PUSH
104093: LD_VAR 0 2
104097: PUSH
104098: LD_INT 4
104100: PUSH
104101: EMPTY
104102: LIST
104103: LIST
104104: LIST
104105: PUSH
104106: LD_VAR 0 1
104110: PUSH
104111: LD_INT 3
104113: PLUS
104114: PUSH
104115: LD_VAR 0 2
104119: PUSH
104120: LD_INT 3
104122: PLUS
104123: PUSH
104124: LD_INT 5
104126: PUSH
104127: EMPTY
104128: LIST
104129: LIST
104130: LIST
104131: PUSH
104132: LD_VAR 0 1
104136: PUSH
104137: LD_VAR 0 2
104141: PUSH
104142: LD_INT 4
104144: PLUS
104145: PUSH
104146: LD_INT 0
104148: PUSH
104149: EMPTY
104150: LIST
104151: LIST
104152: LIST
104153: PUSH
104154: EMPTY
104155: LIST
104156: LIST
104157: LIST
104158: LIST
104159: LIST
104160: ST_TO_ADDR
// end ; 1 :
104161: GO 104861
104163: LD_INT 1
104165: DOUBLE
104166: EQUAL
104167: IFTRUE 104171
104169: GO 104304
104171: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
104172: LD_ADDR_VAR 0 5
104176: PUSH
104177: LD_VAR 0 1
104181: PUSH
104182: LD_VAR 0 2
104186: PUSH
104187: LD_INT 4
104189: MINUS
104190: PUSH
104191: LD_INT 3
104193: PUSH
104194: EMPTY
104195: LIST
104196: LIST
104197: LIST
104198: PUSH
104199: LD_VAR 0 1
104203: PUSH
104204: LD_INT 3
104206: MINUS
104207: PUSH
104208: LD_VAR 0 2
104212: PUSH
104213: LD_INT 3
104215: MINUS
104216: PUSH
104217: LD_INT 2
104219: PUSH
104220: EMPTY
104221: LIST
104222: LIST
104223: LIST
104224: PUSH
104225: LD_VAR 0 1
104229: PUSH
104230: LD_INT 4
104232: MINUS
104233: PUSH
104234: LD_VAR 0 2
104238: PUSH
104239: LD_INT 1
104241: PUSH
104242: EMPTY
104243: LIST
104244: LIST
104245: LIST
104246: PUSH
104247: LD_VAR 0 1
104251: PUSH
104252: LD_VAR 0 2
104256: PUSH
104257: LD_INT 3
104259: PLUS
104260: PUSH
104261: LD_INT 0
104263: PUSH
104264: EMPTY
104265: LIST
104266: LIST
104267: LIST
104268: PUSH
104269: LD_VAR 0 1
104273: PUSH
104274: LD_INT 4
104276: PLUS
104277: PUSH
104278: LD_VAR 0 2
104282: PUSH
104283: LD_INT 4
104285: PLUS
104286: PUSH
104287: LD_INT 5
104289: PUSH
104290: EMPTY
104291: LIST
104292: LIST
104293: LIST
104294: PUSH
104295: EMPTY
104296: LIST
104297: LIST
104298: LIST
104299: LIST
104300: LIST
104301: ST_TO_ADDR
// end ; 2 :
104302: GO 104861
104304: LD_INT 2
104306: DOUBLE
104307: EQUAL
104308: IFTRUE 104312
104310: GO 104441
104312: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
104313: LD_ADDR_VAR 0 5
104317: PUSH
104318: LD_VAR 0 1
104322: PUSH
104323: LD_VAR 0 2
104327: PUSH
104328: LD_INT 3
104330: MINUS
104331: PUSH
104332: LD_INT 3
104334: PUSH
104335: EMPTY
104336: LIST
104337: LIST
104338: LIST
104339: PUSH
104340: LD_VAR 0 1
104344: PUSH
104345: LD_INT 4
104347: PLUS
104348: PUSH
104349: LD_VAR 0 2
104353: PUSH
104354: LD_INT 4
104356: PUSH
104357: EMPTY
104358: LIST
104359: LIST
104360: LIST
104361: PUSH
104362: LD_VAR 0 1
104366: PUSH
104367: LD_VAR 0 2
104371: PUSH
104372: LD_INT 4
104374: PLUS
104375: PUSH
104376: LD_INT 0
104378: PUSH
104379: EMPTY
104380: LIST
104381: LIST
104382: LIST
104383: PUSH
104384: LD_VAR 0 1
104388: PUSH
104389: LD_INT 3
104391: MINUS
104392: PUSH
104393: LD_VAR 0 2
104397: PUSH
104398: LD_INT 1
104400: PUSH
104401: EMPTY
104402: LIST
104403: LIST
104404: LIST
104405: PUSH
104406: LD_VAR 0 1
104410: PUSH
104411: LD_INT 4
104413: MINUS
104414: PUSH
104415: LD_VAR 0 2
104419: PUSH
104420: LD_INT 4
104422: MINUS
104423: PUSH
104424: LD_INT 2
104426: PUSH
104427: EMPTY
104428: LIST
104429: LIST
104430: LIST
104431: PUSH
104432: EMPTY
104433: LIST
104434: LIST
104435: LIST
104436: LIST
104437: LIST
104438: ST_TO_ADDR
// end ; 3 :
104439: GO 104861
104441: LD_INT 3
104443: DOUBLE
104444: EQUAL
104445: IFTRUE 104449
104447: GO 104582
104449: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
104450: LD_ADDR_VAR 0 5
104454: PUSH
104455: LD_VAR 0 1
104459: PUSH
104460: LD_INT 3
104462: PLUS
104463: PUSH
104464: LD_VAR 0 2
104468: PUSH
104469: LD_INT 4
104471: PUSH
104472: EMPTY
104473: LIST
104474: LIST
104475: LIST
104476: PUSH
104477: LD_VAR 0 1
104481: PUSH
104482: LD_INT 4
104484: PLUS
104485: PUSH
104486: LD_VAR 0 2
104490: PUSH
104491: LD_INT 4
104493: PLUS
104494: PUSH
104495: LD_INT 5
104497: PUSH
104498: EMPTY
104499: LIST
104500: LIST
104501: LIST
104502: PUSH
104503: LD_VAR 0 1
104507: PUSH
104508: LD_INT 4
104510: MINUS
104511: PUSH
104512: LD_VAR 0 2
104516: PUSH
104517: LD_INT 1
104519: PUSH
104520: EMPTY
104521: LIST
104522: LIST
104523: LIST
104524: PUSH
104525: LD_VAR 0 1
104529: PUSH
104530: LD_VAR 0 2
104534: PUSH
104535: LD_INT 4
104537: MINUS
104538: PUSH
104539: LD_INT 3
104541: PUSH
104542: EMPTY
104543: LIST
104544: LIST
104545: LIST
104546: PUSH
104547: LD_VAR 0 1
104551: PUSH
104552: LD_INT 3
104554: MINUS
104555: PUSH
104556: LD_VAR 0 2
104560: PUSH
104561: LD_INT 3
104563: MINUS
104564: PUSH
104565: LD_INT 2
104567: PUSH
104568: EMPTY
104569: LIST
104570: LIST
104571: LIST
104572: PUSH
104573: EMPTY
104574: LIST
104575: LIST
104576: LIST
104577: LIST
104578: LIST
104579: ST_TO_ADDR
// end ; 4 :
104580: GO 104861
104582: LD_INT 4
104584: DOUBLE
104585: EQUAL
104586: IFTRUE 104590
104588: GO 104723
104590: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
104591: LD_ADDR_VAR 0 5
104595: PUSH
104596: LD_VAR 0 1
104600: PUSH
104601: LD_VAR 0 2
104605: PUSH
104606: LD_INT 4
104608: PLUS
104609: PUSH
104610: LD_INT 0
104612: PUSH
104613: EMPTY
104614: LIST
104615: LIST
104616: LIST
104617: PUSH
104618: LD_VAR 0 1
104622: PUSH
104623: LD_INT 3
104625: PLUS
104626: PUSH
104627: LD_VAR 0 2
104631: PUSH
104632: LD_INT 3
104634: PLUS
104635: PUSH
104636: LD_INT 5
104638: PUSH
104639: EMPTY
104640: LIST
104641: LIST
104642: LIST
104643: PUSH
104644: LD_VAR 0 1
104648: PUSH
104649: LD_INT 4
104651: PLUS
104652: PUSH
104653: LD_VAR 0 2
104657: PUSH
104658: LD_INT 4
104660: PUSH
104661: EMPTY
104662: LIST
104663: LIST
104664: LIST
104665: PUSH
104666: LD_VAR 0 1
104670: PUSH
104671: LD_VAR 0 2
104675: PUSH
104676: LD_INT 3
104678: MINUS
104679: PUSH
104680: LD_INT 3
104682: PUSH
104683: EMPTY
104684: LIST
104685: LIST
104686: LIST
104687: PUSH
104688: LD_VAR 0 1
104692: PUSH
104693: LD_INT 4
104695: MINUS
104696: PUSH
104697: LD_VAR 0 2
104701: PUSH
104702: LD_INT 4
104704: MINUS
104705: PUSH
104706: LD_INT 2
104708: PUSH
104709: EMPTY
104710: LIST
104711: LIST
104712: LIST
104713: PUSH
104714: EMPTY
104715: LIST
104716: LIST
104717: LIST
104718: LIST
104719: LIST
104720: ST_TO_ADDR
// end ; 5 :
104721: GO 104861
104723: LD_INT 5
104725: DOUBLE
104726: EQUAL
104727: IFTRUE 104731
104729: GO 104860
104731: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
104732: LD_ADDR_VAR 0 5
104736: PUSH
104737: LD_VAR 0 1
104741: PUSH
104742: LD_INT 4
104744: MINUS
104745: PUSH
104746: LD_VAR 0 2
104750: PUSH
104751: LD_INT 1
104753: PUSH
104754: EMPTY
104755: LIST
104756: LIST
104757: LIST
104758: PUSH
104759: LD_VAR 0 1
104763: PUSH
104764: LD_VAR 0 2
104768: PUSH
104769: LD_INT 4
104771: MINUS
104772: PUSH
104773: LD_INT 3
104775: PUSH
104776: EMPTY
104777: LIST
104778: LIST
104779: LIST
104780: PUSH
104781: LD_VAR 0 1
104785: PUSH
104786: LD_INT 4
104788: PLUS
104789: PUSH
104790: LD_VAR 0 2
104794: PUSH
104795: LD_INT 4
104797: PLUS
104798: PUSH
104799: LD_INT 5
104801: PUSH
104802: EMPTY
104803: LIST
104804: LIST
104805: LIST
104806: PUSH
104807: LD_VAR 0 1
104811: PUSH
104812: LD_INT 3
104814: PLUS
104815: PUSH
104816: LD_VAR 0 2
104820: PUSH
104821: LD_INT 4
104823: PUSH
104824: EMPTY
104825: LIST
104826: LIST
104827: LIST
104828: PUSH
104829: LD_VAR 0 1
104833: PUSH
104834: LD_VAR 0 2
104838: PUSH
104839: LD_INT 3
104841: PLUS
104842: PUSH
104843: LD_INT 0
104845: PUSH
104846: EMPTY
104847: LIST
104848: LIST
104849: LIST
104850: PUSH
104851: EMPTY
104852: LIST
104853: LIST
104854: LIST
104855: LIST
104856: LIST
104857: ST_TO_ADDR
// end ; end ;
104858: GO 104861
104860: POP
// result := list ;
104861: LD_ADDR_VAR 0 4
104865: PUSH
104866: LD_VAR 0 5
104870: ST_TO_ADDR
// end ;
104871: LD_VAR 0 4
104875: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
104876: LD_INT 0
104878: PPUSH
104879: PPUSH
104880: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
104881: LD_VAR 0 1
104885: NOT
104886: PUSH
104887: LD_VAR 0 2
104891: PUSH
104892: LD_INT 1
104894: PUSH
104895: LD_INT 2
104897: PUSH
104898: LD_INT 3
104900: PUSH
104901: LD_INT 4
104903: PUSH
104904: EMPTY
104905: LIST
104906: LIST
104907: LIST
104908: LIST
104909: IN
104910: NOT
104911: OR
104912: IFFALSE 104916
// exit ;
104914: GO 104999
// tmp := [ ] ;
104916: LD_ADDR_VAR 0 5
104920: PUSH
104921: EMPTY
104922: ST_TO_ADDR
// for i in units do
104923: LD_ADDR_VAR 0 4
104927: PUSH
104928: LD_VAR 0 1
104932: PUSH
104933: FOR_IN
104934: IFFALSE 104968
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
104936: LD_ADDR_VAR 0 5
104940: PUSH
104941: LD_VAR 0 5
104945: PPUSH
104946: LD_VAR 0 4
104950: PPUSH
104951: LD_VAR 0 2
104955: PPUSH
104956: CALL_OW 259
104960: PPUSH
104961: CALL 106359 0 2
104965: ST_TO_ADDR
104966: GO 104933
104968: POP
104969: POP
// if not tmp then
104970: LD_VAR 0 5
104974: NOT
104975: IFFALSE 104979
// exit ;
104977: GO 104999
// result := SortListByListDesc ( units , tmp ) ;
104979: LD_ADDR_VAR 0 3
104983: PUSH
104984: LD_VAR 0 1
104988: PPUSH
104989: LD_VAR 0 5
104993: PPUSH
104994: CALL_OW 77
104998: ST_TO_ADDR
// end ;
104999: LD_VAR 0 3
105003: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
105004: LD_INT 0
105006: PPUSH
105007: PPUSH
105008: PPUSH
// result := false ;
105009: LD_ADDR_VAR 0 3
105013: PUSH
105014: LD_INT 0
105016: ST_TO_ADDR
// if not building then
105017: LD_VAR 0 2
105021: NOT
105022: IFFALSE 105026
// exit ;
105024: GO 105164
// x := GetX ( building ) ;
105026: LD_ADDR_VAR 0 4
105030: PUSH
105031: LD_VAR 0 2
105035: PPUSH
105036: CALL_OW 250
105040: ST_TO_ADDR
// y := GetY ( building ) ;
105041: LD_ADDR_VAR 0 5
105045: PUSH
105046: LD_VAR 0 2
105050: PPUSH
105051: CALL_OW 251
105055: ST_TO_ADDR
// if not x or not y then
105056: LD_VAR 0 4
105060: NOT
105061: PUSH
105062: LD_VAR 0 5
105066: NOT
105067: OR
105068: IFFALSE 105072
// exit ;
105070: GO 105164
// if GetTaskList ( unit ) then
105072: LD_VAR 0 1
105076: PPUSH
105077: CALL_OW 437
105081: IFFALSE 105164
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
105083: LD_STRING e
105085: PUSH
105086: LD_VAR 0 1
105090: PPUSH
105091: CALL_OW 437
105095: PUSH
105096: LD_INT 1
105098: ARRAY
105099: PUSH
105100: LD_INT 1
105102: ARRAY
105103: EQUAL
105104: PUSH
105105: LD_VAR 0 4
105109: PUSH
105110: LD_VAR 0 1
105114: PPUSH
105115: CALL_OW 437
105119: PUSH
105120: LD_INT 1
105122: ARRAY
105123: PUSH
105124: LD_INT 2
105126: ARRAY
105127: EQUAL
105128: AND
105129: PUSH
105130: LD_VAR 0 5
105134: PUSH
105135: LD_VAR 0 1
105139: PPUSH
105140: CALL_OW 437
105144: PUSH
105145: LD_INT 1
105147: ARRAY
105148: PUSH
105149: LD_INT 3
105151: ARRAY
105152: EQUAL
105153: AND
105154: IFFALSE 105164
// result := true end ;
105156: LD_ADDR_VAR 0 3
105160: PUSH
105161: LD_INT 1
105163: ST_TO_ADDR
// end ;
105164: LD_VAR 0 3
105168: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
105169: LD_INT 0
105171: PPUSH
// result := false ;
105172: LD_ADDR_VAR 0 4
105176: PUSH
105177: LD_INT 0
105179: ST_TO_ADDR
// if GetTaskList ( unit ) then
105180: LD_VAR 0 1
105184: PPUSH
105185: CALL_OW 437
105189: IFFALSE 105272
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
105191: LD_STRING M
105193: PUSH
105194: LD_VAR 0 1
105198: PPUSH
105199: CALL_OW 437
105203: PUSH
105204: LD_INT 1
105206: ARRAY
105207: PUSH
105208: LD_INT 1
105210: ARRAY
105211: EQUAL
105212: PUSH
105213: LD_VAR 0 2
105217: PUSH
105218: LD_VAR 0 1
105222: PPUSH
105223: CALL_OW 437
105227: PUSH
105228: LD_INT 1
105230: ARRAY
105231: PUSH
105232: LD_INT 2
105234: ARRAY
105235: EQUAL
105236: AND
105237: PUSH
105238: LD_VAR 0 3
105242: PUSH
105243: LD_VAR 0 1
105247: PPUSH
105248: CALL_OW 437
105252: PUSH
105253: LD_INT 1
105255: ARRAY
105256: PUSH
105257: LD_INT 3
105259: ARRAY
105260: EQUAL
105261: AND
105262: IFFALSE 105272
// result := true ;
105264: LD_ADDR_VAR 0 4
105268: PUSH
105269: LD_INT 1
105271: ST_TO_ADDR
// end ; end ;
105272: LD_VAR 0 4
105276: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
105277: LD_INT 0
105279: PPUSH
105280: PPUSH
105281: PPUSH
105282: PPUSH
// if not unit or not area then
105283: LD_VAR 0 1
105287: NOT
105288: PUSH
105289: LD_VAR 0 2
105293: NOT
105294: OR
105295: IFFALSE 105299
// exit ;
105297: GO 105462
// tmp := AreaToList ( area , i ) ;
105299: LD_ADDR_VAR 0 6
105303: PUSH
105304: LD_VAR 0 2
105308: PPUSH
105309: LD_VAR 0 5
105313: PPUSH
105314: CALL_OW 517
105318: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
105319: LD_ADDR_VAR 0 5
105323: PUSH
105324: DOUBLE
105325: LD_INT 1
105327: DEC
105328: ST_TO_ADDR
105329: LD_VAR 0 6
105333: PUSH
105334: LD_INT 1
105336: ARRAY
105337: PUSH
105338: FOR_TO
105339: IFFALSE 105460
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
105341: LD_ADDR_VAR 0 7
105345: PUSH
105346: LD_VAR 0 6
105350: PUSH
105351: LD_INT 1
105353: ARRAY
105354: PUSH
105355: LD_VAR 0 5
105359: ARRAY
105360: PUSH
105361: LD_VAR 0 6
105365: PUSH
105366: LD_INT 2
105368: ARRAY
105369: PUSH
105370: LD_VAR 0 5
105374: ARRAY
105375: PUSH
105376: EMPTY
105377: LIST
105378: LIST
105379: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
105380: LD_INT 92
105382: PUSH
105383: LD_VAR 0 7
105387: PUSH
105388: LD_INT 1
105390: ARRAY
105391: PUSH
105392: LD_VAR 0 7
105396: PUSH
105397: LD_INT 2
105399: ARRAY
105400: PUSH
105401: LD_INT 3
105403: PUSH
105404: EMPTY
105405: LIST
105406: LIST
105407: LIST
105408: LIST
105409: PPUSH
105410: CALL_OW 69
105414: PUSH
105415: LD_INT 0
105417: EQUAL
105418: IFFALSE 105458
// begin PlaceUnitArea ( unit , area , mode ) ;
105420: LD_VAR 0 1
105424: PPUSH
105425: LD_VAR 0 2
105429: PPUSH
105430: LD_VAR 0 3
105434: PPUSH
105435: CALL_OW 49
// result := IsPlaced ( unit ) ;
105439: LD_ADDR_VAR 0 4
105443: PUSH
105444: LD_VAR 0 1
105448: PPUSH
105449: CALL_OW 305
105453: ST_TO_ADDR
// exit ;
105454: POP
105455: POP
105456: GO 105462
// end ; end ;
105458: GO 105338
105460: POP
105461: POP
// end ;
105462: LD_VAR 0 4
105466: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
105467: LD_INT 0
105469: PPUSH
105470: PPUSH
105471: PPUSH
// if not side or side > 8 then
105472: LD_VAR 0 1
105476: NOT
105477: PUSH
105478: LD_VAR 0 1
105482: PUSH
105483: LD_INT 8
105485: GREATER
105486: OR
105487: IFFALSE 105491
// exit ;
105489: GO 105678
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
105491: LD_ADDR_VAR 0 4
105495: PUSH
105496: LD_INT 22
105498: PUSH
105499: LD_VAR 0 1
105503: PUSH
105504: EMPTY
105505: LIST
105506: LIST
105507: PUSH
105508: LD_INT 21
105510: PUSH
105511: LD_INT 3
105513: PUSH
105514: EMPTY
105515: LIST
105516: LIST
105517: PUSH
105518: EMPTY
105519: LIST
105520: LIST
105521: PPUSH
105522: CALL_OW 69
105526: ST_TO_ADDR
// if not tmp then
105527: LD_VAR 0 4
105531: NOT
105532: IFFALSE 105536
// exit ;
105534: GO 105678
// enable_addtolog := true ;
105536: LD_ADDR_OWVAR 81
105540: PUSH
105541: LD_INT 1
105543: ST_TO_ADDR
// AddToLog ( [ ) ;
105544: LD_STRING [
105546: PPUSH
105547: CALL_OW 561
// for i in tmp do
105551: LD_ADDR_VAR 0 3
105555: PUSH
105556: LD_VAR 0 4
105560: PUSH
105561: FOR_IN
105562: IFFALSE 105669
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
105564: LD_STRING [
105566: PUSH
105567: LD_VAR 0 3
105571: PPUSH
105572: CALL_OW 266
105576: STR
105577: PUSH
105578: LD_STRING , 
105580: STR
105581: PUSH
105582: LD_VAR 0 3
105586: PPUSH
105587: CALL_OW 250
105591: STR
105592: PUSH
105593: LD_STRING , 
105595: STR
105596: PUSH
105597: LD_VAR 0 3
105601: PPUSH
105602: CALL_OW 251
105606: STR
105607: PUSH
105608: LD_STRING , 
105610: STR
105611: PUSH
105612: LD_VAR 0 3
105616: PPUSH
105617: CALL_OW 254
105621: STR
105622: PUSH
105623: LD_STRING , 
105625: STR
105626: PUSH
105627: LD_VAR 0 3
105631: PPUSH
105632: LD_INT 1
105634: PPUSH
105635: CALL_OW 268
105639: STR
105640: PUSH
105641: LD_STRING , 
105643: STR
105644: PUSH
105645: LD_VAR 0 3
105649: PPUSH
105650: LD_INT 2
105652: PPUSH
105653: CALL_OW 268
105657: STR
105658: PUSH
105659: LD_STRING ],
105661: STR
105662: PPUSH
105663: CALL_OW 561
// end ;
105667: GO 105561
105669: POP
105670: POP
// AddToLog ( ]; ) ;
105671: LD_STRING ];
105673: PPUSH
105674: CALL_OW 561
// end ;
105678: LD_VAR 0 2
105682: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
105683: LD_INT 0
105685: PPUSH
105686: PPUSH
105687: PPUSH
105688: PPUSH
105689: PPUSH
// if not area or not rate or not max then
105690: LD_VAR 0 1
105694: NOT
105695: PUSH
105696: LD_VAR 0 2
105700: NOT
105701: OR
105702: PUSH
105703: LD_VAR 0 4
105707: NOT
105708: OR
105709: IFFALSE 105713
// exit ;
105711: GO 105902
// while 1 do
105713: LD_INT 1
105715: IFFALSE 105902
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
105717: LD_ADDR_VAR 0 9
105721: PUSH
105722: LD_VAR 0 1
105726: PPUSH
105727: LD_INT 1
105729: PPUSH
105730: CALL_OW 287
105734: PUSH
105735: LD_INT 10
105737: MUL
105738: ST_TO_ADDR
// r := rate / 10 ;
105739: LD_ADDR_VAR 0 7
105743: PUSH
105744: LD_VAR 0 2
105748: PUSH
105749: LD_INT 10
105751: DIVREAL
105752: ST_TO_ADDR
// time := 1 1$00 ;
105753: LD_ADDR_VAR 0 8
105757: PUSH
105758: LD_INT 2100
105760: ST_TO_ADDR
// if amount < min then
105761: LD_VAR 0 9
105765: PUSH
105766: LD_VAR 0 3
105770: LESS
105771: IFFALSE 105789
// r := r * 2 else
105773: LD_ADDR_VAR 0 7
105777: PUSH
105778: LD_VAR 0 7
105782: PUSH
105783: LD_INT 2
105785: MUL
105786: ST_TO_ADDR
105787: GO 105815
// if amount > max then
105789: LD_VAR 0 9
105793: PUSH
105794: LD_VAR 0 4
105798: GREATER
105799: IFFALSE 105815
// r := r / 2 ;
105801: LD_ADDR_VAR 0 7
105805: PUSH
105806: LD_VAR 0 7
105810: PUSH
105811: LD_INT 2
105813: DIVREAL
105814: ST_TO_ADDR
// time := time / r ;
105815: LD_ADDR_VAR 0 8
105819: PUSH
105820: LD_VAR 0 8
105824: PUSH
105825: LD_VAR 0 7
105829: DIVREAL
105830: ST_TO_ADDR
// if time < 0 then
105831: LD_VAR 0 8
105835: PUSH
105836: LD_INT 0
105838: LESS
105839: IFFALSE 105856
// time := time * - 1 ;
105841: LD_ADDR_VAR 0 8
105845: PUSH
105846: LD_VAR 0 8
105850: PUSH
105851: LD_INT 1
105853: NEG
105854: MUL
105855: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
105856: LD_VAR 0 8
105860: PUSH
105861: LD_INT 35
105863: PPUSH
105864: LD_INT 875
105866: PPUSH
105867: CALL_OW 12
105871: PLUS
105872: PPUSH
105873: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
105877: LD_INT 1
105879: PPUSH
105880: LD_INT 5
105882: PPUSH
105883: CALL_OW 12
105887: PPUSH
105888: LD_VAR 0 1
105892: PPUSH
105893: LD_INT 1
105895: PPUSH
105896: CALL_OW 55
// end ;
105900: GO 105713
// end ;
105902: LD_VAR 0 5
105906: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
105907: LD_INT 0
105909: PPUSH
105910: PPUSH
105911: PPUSH
105912: PPUSH
105913: PPUSH
105914: PPUSH
105915: PPUSH
105916: PPUSH
// if not turrets or not factories then
105917: LD_VAR 0 1
105921: NOT
105922: PUSH
105923: LD_VAR 0 2
105927: NOT
105928: OR
105929: IFFALSE 105933
// exit ;
105931: GO 106240
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
105933: LD_ADDR_VAR 0 10
105937: PUSH
105938: LD_INT 5
105940: PUSH
105941: LD_INT 6
105943: PUSH
105944: EMPTY
105945: LIST
105946: LIST
105947: PUSH
105948: LD_INT 2
105950: PUSH
105951: LD_INT 4
105953: PUSH
105954: EMPTY
105955: LIST
105956: LIST
105957: PUSH
105958: LD_INT 3
105960: PUSH
105961: LD_INT 5
105963: PUSH
105964: EMPTY
105965: LIST
105966: LIST
105967: PUSH
105968: EMPTY
105969: LIST
105970: LIST
105971: LIST
105972: PUSH
105973: LD_INT 24
105975: PUSH
105976: LD_INT 25
105978: PUSH
105979: EMPTY
105980: LIST
105981: LIST
105982: PUSH
105983: LD_INT 23
105985: PUSH
105986: LD_INT 27
105988: PUSH
105989: EMPTY
105990: LIST
105991: LIST
105992: PUSH
105993: EMPTY
105994: LIST
105995: LIST
105996: PUSH
105997: LD_INT 42
105999: PUSH
106000: LD_INT 43
106002: PUSH
106003: EMPTY
106004: LIST
106005: LIST
106006: PUSH
106007: LD_INT 44
106009: PUSH
106010: LD_INT 46
106012: PUSH
106013: EMPTY
106014: LIST
106015: LIST
106016: PUSH
106017: LD_INT 45
106019: PUSH
106020: LD_INT 47
106022: PUSH
106023: EMPTY
106024: LIST
106025: LIST
106026: PUSH
106027: EMPTY
106028: LIST
106029: LIST
106030: LIST
106031: PUSH
106032: EMPTY
106033: LIST
106034: LIST
106035: LIST
106036: ST_TO_ADDR
// result := [ ] ;
106037: LD_ADDR_VAR 0 3
106041: PUSH
106042: EMPTY
106043: ST_TO_ADDR
// for i in turrets do
106044: LD_ADDR_VAR 0 4
106048: PUSH
106049: LD_VAR 0 1
106053: PUSH
106054: FOR_IN
106055: IFFALSE 106238
// begin nat := GetNation ( i ) ;
106057: LD_ADDR_VAR 0 7
106061: PUSH
106062: LD_VAR 0 4
106066: PPUSH
106067: CALL_OW 248
106071: ST_TO_ADDR
// weapon := 0 ;
106072: LD_ADDR_VAR 0 8
106076: PUSH
106077: LD_INT 0
106079: ST_TO_ADDR
// if not nat then
106080: LD_VAR 0 7
106084: NOT
106085: IFFALSE 106089
// continue ;
106087: GO 106054
// for j in list [ nat ] do
106089: LD_ADDR_VAR 0 5
106093: PUSH
106094: LD_VAR 0 10
106098: PUSH
106099: LD_VAR 0 7
106103: ARRAY
106104: PUSH
106105: FOR_IN
106106: IFFALSE 106147
// if GetBWeapon ( i ) = j [ 1 ] then
106108: LD_VAR 0 4
106112: PPUSH
106113: CALL_OW 269
106117: PUSH
106118: LD_VAR 0 5
106122: PUSH
106123: LD_INT 1
106125: ARRAY
106126: EQUAL
106127: IFFALSE 106145
// begin weapon := j [ 2 ] ;
106129: LD_ADDR_VAR 0 8
106133: PUSH
106134: LD_VAR 0 5
106138: PUSH
106139: LD_INT 2
106141: ARRAY
106142: ST_TO_ADDR
// break ;
106143: GO 106147
// end ;
106145: GO 106105
106147: POP
106148: POP
// if not weapon then
106149: LD_VAR 0 8
106153: NOT
106154: IFFALSE 106158
// continue ;
106156: GO 106054
// for k in factories do
106158: LD_ADDR_VAR 0 6
106162: PUSH
106163: LD_VAR 0 2
106167: PUSH
106168: FOR_IN
106169: IFFALSE 106234
// begin weapons := AvailableWeaponList ( k ) ;
106171: LD_ADDR_VAR 0 9
106175: PUSH
106176: LD_VAR 0 6
106180: PPUSH
106181: CALL_OW 478
106185: ST_TO_ADDR
// if not weapons then
106186: LD_VAR 0 9
106190: NOT
106191: IFFALSE 106195
// continue ;
106193: GO 106168
// if weapon in weapons then
106195: LD_VAR 0 8
106199: PUSH
106200: LD_VAR 0 9
106204: IN
106205: IFFALSE 106232
// begin result := [ i , weapon ] ;
106207: LD_ADDR_VAR 0 3
106211: PUSH
106212: LD_VAR 0 4
106216: PUSH
106217: LD_VAR 0 8
106221: PUSH
106222: EMPTY
106223: LIST
106224: LIST
106225: ST_TO_ADDR
// exit ;
106226: POP
106227: POP
106228: POP
106229: POP
106230: GO 106240
// end ; end ;
106232: GO 106168
106234: POP
106235: POP
// end ;
106236: GO 106054
106238: POP
106239: POP
// end ;
106240: LD_VAR 0 3
106244: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
106245: LD_INT 0
106247: PPUSH
// if not side or side > 8 then
106248: LD_VAR 0 3
106252: NOT
106253: PUSH
106254: LD_VAR 0 3
106258: PUSH
106259: LD_INT 8
106261: GREATER
106262: OR
106263: IFFALSE 106267
// exit ;
106265: GO 106326
// if not range then
106267: LD_VAR 0 4
106271: NOT
106272: IFFALSE 106283
// range := - 12 ;
106274: LD_ADDR_VAR 0 4
106278: PUSH
106279: LD_INT 12
106281: NEG
106282: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
106283: LD_VAR 0 1
106287: PPUSH
106288: LD_VAR 0 2
106292: PPUSH
106293: LD_VAR 0 3
106297: PPUSH
106298: LD_VAR 0 4
106302: PPUSH
106303: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
106307: LD_VAR 0 1
106311: PPUSH
106312: LD_VAR 0 2
106316: PPUSH
106317: LD_VAR 0 3
106321: PPUSH
106322: CALL_OW 331
// end ;
106326: LD_VAR 0 5
106330: RET
// export function Video ( mode ) ; begin
106331: LD_INT 0
106333: PPUSH
// ingame_video = mode ;
106334: LD_ADDR_OWVAR 52
106338: PUSH
106339: LD_VAR 0 1
106343: ST_TO_ADDR
// interface_hidden = mode ;
106344: LD_ADDR_OWVAR 54
106348: PUSH
106349: LD_VAR 0 1
106353: ST_TO_ADDR
// end ;
106354: LD_VAR 0 2
106358: RET
// export function Join ( array , element ) ; begin
106359: LD_INT 0
106361: PPUSH
// result := Replace ( array , array + 1 , element ) ;
106362: LD_ADDR_VAR 0 3
106366: PUSH
106367: LD_VAR 0 1
106371: PPUSH
106372: LD_VAR 0 1
106376: PUSH
106377: LD_INT 1
106379: PLUS
106380: PPUSH
106381: LD_VAR 0 2
106385: PPUSH
106386: CALL_OW 1
106390: ST_TO_ADDR
// end ;
106391: LD_VAR 0 3
106395: RET
// export function JoinUnion ( array , element ) ; begin
106396: LD_INT 0
106398: PPUSH
// result := array union element ;
106399: LD_ADDR_VAR 0 3
106403: PUSH
106404: LD_VAR 0 1
106408: PUSH
106409: LD_VAR 0 2
106413: UNION
106414: ST_TO_ADDR
// end ;
106415: LD_VAR 0 3
106419: RET
// export function GetBehemoths ( side ) ; begin
106420: LD_INT 0
106422: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
106423: LD_ADDR_VAR 0 2
106427: PUSH
106428: LD_INT 22
106430: PUSH
106431: LD_VAR 0 1
106435: PUSH
106436: EMPTY
106437: LIST
106438: LIST
106439: PUSH
106440: LD_INT 31
106442: PUSH
106443: LD_INT 25
106445: PUSH
106446: EMPTY
106447: LIST
106448: LIST
106449: PUSH
106450: EMPTY
106451: LIST
106452: LIST
106453: PPUSH
106454: CALL_OW 69
106458: ST_TO_ADDR
// end ;
106459: LD_VAR 0 2
106463: RET
// export function Shuffle ( array ) ; var i , index ; begin
106464: LD_INT 0
106466: PPUSH
106467: PPUSH
106468: PPUSH
// result := [ ] ;
106469: LD_ADDR_VAR 0 2
106473: PUSH
106474: EMPTY
106475: ST_TO_ADDR
// if not array then
106476: LD_VAR 0 1
106480: NOT
106481: IFFALSE 106485
// exit ;
106483: GO 106584
// Randomize ;
106485: CALL_OW 10
// for i = array downto 1 do
106489: LD_ADDR_VAR 0 3
106493: PUSH
106494: DOUBLE
106495: LD_VAR 0 1
106499: INC
106500: ST_TO_ADDR
106501: LD_INT 1
106503: PUSH
106504: FOR_DOWNTO
106505: IFFALSE 106582
// begin index := rand ( 1 , array ) ;
106507: LD_ADDR_VAR 0 4
106511: PUSH
106512: LD_INT 1
106514: PPUSH
106515: LD_VAR 0 1
106519: PPUSH
106520: CALL_OW 12
106524: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
106525: LD_ADDR_VAR 0 2
106529: PUSH
106530: LD_VAR 0 2
106534: PPUSH
106535: LD_VAR 0 2
106539: PUSH
106540: LD_INT 1
106542: PLUS
106543: PPUSH
106544: LD_VAR 0 1
106548: PUSH
106549: LD_VAR 0 4
106553: ARRAY
106554: PPUSH
106555: CALL_OW 2
106559: ST_TO_ADDR
// array := Delete ( array , index ) ;
106560: LD_ADDR_VAR 0 1
106564: PUSH
106565: LD_VAR 0 1
106569: PPUSH
106570: LD_VAR 0 4
106574: PPUSH
106575: CALL_OW 3
106579: ST_TO_ADDR
// end ;
106580: GO 106504
106582: POP
106583: POP
// end ;
106584: LD_VAR 0 2
106588: RET
// export function GetBaseMaterials ( base ) ; begin
106589: LD_INT 0
106591: PPUSH
// result := [ 0 , 0 , 0 ] ;
106592: LD_ADDR_VAR 0 2
106596: PUSH
106597: LD_INT 0
106599: PUSH
106600: LD_INT 0
106602: PUSH
106603: LD_INT 0
106605: PUSH
106606: EMPTY
106607: LIST
106608: LIST
106609: LIST
106610: ST_TO_ADDR
// if not base then
106611: LD_VAR 0 1
106615: NOT
106616: IFFALSE 106620
// exit ;
106618: GO 106669
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
106620: LD_ADDR_VAR 0 2
106624: PUSH
106625: LD_VAR 0 1
106629: PPUSH
106630: LD_INT 1
106632: PPUSH
106633: CALL_OW 275
106637: PUSH
106638: LD_VAR 0 1
106642: PPUSH
106643: LD_INT 2
106645: PPUSH
106646: CALL_OW 275
106650: PUSH
106651: LD_VAR 0 1
106655: PPUSH
106656: LD_INT 3
106658: PPUSH
106659: CALL_OW 275
106663: PUSH
106664: EMPTY
106665: LIST
106666: LIST
106667: LIST
106668: ST_TO_ADDR
// end ;
106669: LD_VAR 0 2
106673: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
106674: LD_INT 0
106676: PPUSH
106677: PPUSH
// result := array ;
106678: LD_ADDR_VAR 0 3
106682: PUSH
106683: LD_VAR 0 1
106687: ST_TO_ADDR
// if size >= result then
106688: LD_VAR 0 2
106692: PUSH
106693: LD_VAR 0 3
106697: GREATEREQUAL
106698: IFFALSE 106702
// exit ;
106700: GO 106752
// if size then
106702: LD_VAR 0 2
106706: IFFALSE 106752
// for i := array downto size do
106708: LD_ADDR_VAR 0 4
106712: PUSH
106713: DOUBLE
106714: LD_VAR 0 1
106718: INC
106719: ST_TO_ADDR
106720: LD_VAR 0 2
106724: PUSH
106725: FOR_DOWNTO
106726: IFFALSE 106750
// result := Delete ( result , result ) ;
106728: LD_ADDR_VAR 0 3
106732: PUSH
106733: LD_VAR 0 3
106737: PPUSH
106738: LD_VAR 0 3
106742: PPUSH
106743: CALL_OW 3
106747: ST_TO_ADDR
106748: GO 106725
106750: POP
106751: POP
// end ;
106752: LD_VAR 0 3
106756: RET
// export function ComExit ( unit ) ; var tmp ; begin
106757: LD_INT 0
106759: PPUSH
106760: PPUSH
// if not IsInUnit ( unit ) then
106761: LD_VAR 0 1
106765: PPUSH
106766: CALL_OW 310
106770: NOT
106771: IFFALSE 106775
// exit ;
106773: GO 106835
// tmp := IsInUnit ( unit ) ;
106775: LD_ADDR_VAR 0 3
106779: PUSH
106780: LD_VAR 0 1
106784: PPUSH
106785: CALL_OW 310
106789: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
106790: LD_VAR 0 3
106794: PPUSH
106795: CALL_OW 247
106799: PUSH
106800: LD_INT 2
106802: EQUAL
106803: IFFALSE 106816
// ComExitVehicle ( unit ) else
106805: LD_VAR 0 1
106809: PPUSH
106810: CALL_OW 121
106814: GO 106825
// ComExitBuilding ( unit ) ;
106816: LD_VAR 0 1
106820: PPUSH
106821: CALL_OW 122
// result := tmp ;
106825: LD_ADDR_VAR 0 2
106829: PUSH
106830: LD_VAR 0 3
106834: ST_TO_ADDR
// end ;
106835: LD_VAR 0 2
106839: RET
// export function ComExitAll ( units ) ; var i ; begin
106840: LD_INT 0
106842: PPUSH
106843: PPUSH
// if not units then
106844: LD_VAR 0 1
106848: NOT
106849: IFFALSE 106853
// exit ;
106851: GO 106879
// for i in units do
106853: LD_ADDR_VAR 0 3
106857: PUSH
106858: LD_VAR 0 1
106862: PUSH
106863: FOR_IN
106864: IFFALSE 106877
// ComExit ( i ) ;
106866: LD_VAR 0 3
106870: PPUSH
106871: CALL 106757 0 1
106875: GO 106863
106877: POP
106878: POP
// end ;
106879: LD_VAR 0 2
106883: RET
// export function ResetHc ; begin
106884: LD_INT 0
106886: PPUSH
// InitHc ;
106887: CALL_OW 19
// hc_importance := 0 ;
106891: LD_ADDR_OWVAR 32
106895: PUSH
106896: LD_INT 0
106898: ST_TO_ADDR
// end ;
106899: LD_VAR 0 1
106903: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
106904: LD_INT 0
106906: PPUSH
106907: PPUSH
106908: PPUSH
// _x := ( x1 + x2 ) div 2 ;
106909: LD_ADDR_VAR 0 6
106913: PUSH
106914: LD_VAR 0 1
106918: PUSH
106919: LD_VAR 0 3
106923: PLUS
106924: PUSH
106925: LD_INT 2
106927: DIV
106928: ST_TO_ADDR
// if _x < 0 then
106929: LD_VAR 0 6
106933: PUSH
106934: LD_INT 0
106936: LESS
106937: IFFALSE 106954
// _x := _x * - 1 ;
106939: LD_ADDR_VAR 0 6
106943: PUSH
106944: LD_VAR 0 6
106948: PUSH
106949: LD_INT 1
106951: NEG
106952: MUL
106953: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
106954: LD_ADDR_VAR 0 7
106958: PUSH
106959: LD_VAR 0 2
106963: PUSH
106964: LD_VAR 0 4
106968: PLUS
106969: PUSH
106970: LD_INT 2
106972: DIV
106973: ST_TO_ADDR
// if _y < 0 then
106974: LD_VAR 0 7
106978: PUSH
106979: LD_INT 0
106981: LESS
106982: IFFALSE 106999
// _y := _y * - 1 ;
106984: LD_ADDR_VAR 0 7
106988: PUSH
106989: LD_VAR 0 7
106993: PUSH
106994: LD_INT 1
106996: NEG
106997: MUL
106998: ST_TO_ADDR
// result := [ _x , _y ] ;
106999: LD_ADDR_VAR 0 5
107003: PUSH
107004: LD_VAR 0 6
107008: PUSH
107009: LD_VAR 0 7
107013: PUSH
107014: EMPTY
107015: LIST
107016: LIST
107017: ST_TO_ADDR
// end ;
107018: LD_VAR 0 5
107022: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
107023: LD_INT 0
107025: PPUSH
107026: PPUSH
107027: PPUSH
107028: PPUSH
// task := GetTaskList ( unit ) ;
107029: LD_ADDR_VAR 0 7
107033: PUSH
107034: LD_VAR 0 1
107038: PPUSH
107039: CALL_OW 437
107043: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
107044: LD_VAR 0 7
107048: NOT
107049: PUSH
107050: LD_VAR 0 1
107054: PPUSH
107055: LD_VAR 0 2
107059: PPUSH
107060: CALL_OW 308
107064: NOT
107065: AND
107066: IFFALSE 107070
// exit ;
107068: GO 107188
// if IsInArea ( unit , area ) then
107070: LD_VAR 0 1
107074: PPUSH
107075: LD_VAR 0 2
107079: PPUSH
107080: CALL_OW 308
107084: IFFALSE 107102
// begin ComMoveToArea ( unit , goAway ) ;
107086: LD_VAR 0 1
107090: PPUSH
107091: LD_VAR 0 3
107095: PPUSH
107096: CALL_OW 113
// exit ;
107100: GO 107188
// end ; if task [ 1 ] [ 1 ] <> M then
107102: LD_VAR 0 7
107106: PUSH
107107: LD_INT 1
107109: ARRAY
107110: PUSH
107111: LD_INT 1
107113: ARRAY
107114: PUSH
107115: LD_STRING M
107117: NONEQUAL
107118: IFFALSE 107122
// exit ;
107120: GO 107188
// x := task [ 1 ] [ 2 ] ;
107122: LD_ADDR_VAR 0 5
107126: PUSH
107127: LD_VAR 0 7
107131: PUSH
107132: LD_INT 1
107134: ARRAY
107135: PUSH
107136: LD_INT 2
107138: ARRAY
107139: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
107140: LD_ADDR_VAR 0 6
107144: PUSH
107145: LD_VAR 0 7
107149: PUSH
107150: LD_INT 1
107152: ARRAY
107153: PUSH
107154: LD_INT 3
107156: ARRAY
107157: ST_TO_ADDR
// if InArea ( x , y , area ) then
107158: LD_VAR 0 5
107162: PPUSH
107163: LD_VAR 0 6
107167: PPUSH
107168: LD_VAR 0 2
107172: PPUSH
107173: CALL_OW 309
107177: IFFALSE 107188
// ComStop ( unit ) ;
107179: LD_VAR 0 1
107183: PPUSH
107184: CALL_OW 141
// end ;
107188: LD_VAR 0 4
107192: RET
// export function Abs ( value ) ; begin
107193: LD_INT 0
107195: PPUSH
// result := value ;
107196: LD_ADDR_VAR 0 2
107200: PUSH
107201: LD_VAR 0 1
107205: ST_TO_ADDR
// if value < 0 then
107206: LD_VAR 0 1
107210: PUSH
107211: LD_INT 0
107213: LESS
107214: IFFALSE 107231
// result := value * - 1 ;
107216: LD_ADDR_VAR 0 2
107220: PUSH
107221: LD_VAR 0 1
107225: PUSH
107226: LD_INT 1
107228: NEG
107229: MUL
107230: ST_TO_ADDR
// end ;
107231: LD_VAR 0 2
107235: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
107236: LD_INT 0
107238: PPUSH
107239: PPUSH
107240: PPUSH
107241: PPUSH
107242: PPUSH
107243: PPUSH
107244: PPUSH
107245: PPUSH
// if not unit or not building then
107246: LD_VAR 0 1
107250: NOT
107251: PUSH
107252: LD_VAR 0 2
107256: NOT
107257: OR
107258: IFFALSE 107262
// exit ;
107260: GO 107488
// x := GetX ( building ) ;
107262: LD_ADDR_VAR 0 4
107266: PUSH
107267: LD_VAR 0 2
107271: PPUSH
107272: CALL_OW 250
107276: ST_TO_ADDR
// y := GetY ( building ) ;
107277: LD_ADDR_VAR 0 6
107281: PUSH
107282: LD_VAR 0 2
107286: PPUSH
107287: CALL_OW 251
107291: ST_TO_ADDR
// d := GetDir ( building ) ;
107292: LD_ADDR_VAR 0 8
107296: PUSH
107297: LD_VAR 0 2
107301: PPUSH
107302: CALL_OW 254
107306: ST_TO_ADDR
// r := 4 ;
107307: LD_ADDR_VAR 0 9
107311: PUSH
107312: LD_INT 4
107314: ST_TO_ADDR
// for i := 1 to 5 do
107315: LD_ADDR_VAR 0 10
107319: PUSH
107320: DOUBLE
107321: LD_INT 1
107323: DEC
107324: ST_TO_ADDR
107325: LD_INT 5
107327: PUSH
107328: FOR_TO
107329: IFFALSE 107486
// begin _x := ShiftX ( x , d , r + i ) ;
107331: LD_ADDR_VAR 0 5
107335: PUSH
107336: LD_VAR 0 4
107340: PPUSH
107341: LD_VAR 0 8
107345: PPUSH
107346: LD_VAR 0 9
107350: PUSH
107351: LD_VAR 0 10
107355: PLUS
107356: PPUSH
107357: CALL_OW 272
107361: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
107362: LD_ADDR_VAR 0 7
107366: PUSH
107367: LD_VAR 0 6
107371: PPUSH
107372: LD_VAR 0 8
107376: PPUSH
107377: LD_VAR 0 9
107381: PUSH
107382: LD_VAR 0 10
107386: PLUS
107387: PPUSH
107388: CALL_OW 273
107392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
107393: LD_VAR 0 5
107397: PPUSH
107398: LD_VAR 0 7
107402: PPUSH
107403: CALL_OW 488
107407: PUSH
107408: LD_VAR 0 5
107412: PPUSH
107413: LD_VAR 0 7
107417: PPUSH
107418: CALL_OW 428
107422: PPUSH
107423: CALL_OW 247
107427: PUSH
107428: LD_INT 3
107430: PUSH
107431: LD_INT 2
107433: PUSH
107434: EMPTY
107435: LIST
107436: LIST
107437: IN
107438: NOT
107439: AND
107440: IFFALSE 107484
// begin ComMoveXY ( unit , _x , _y ) ;
107442: LD_VAR 0 1
107446: PPUSH
107447: LD_VAR 0 5
107451: PPUSH
107452: LD_VAR 0 7
107456: PPUSH
107457: CALL_OW 111
// result := [ _x , _y ] ;
107461: LD_ADDR_VAR 0 3
107465: PUSH
107466: LD_VAR 0 5
107470: PUSH
107471: LD_VAR 0 7
107475: PUSH
107476: EMPTY
107477: LIST
107478: LIST
107479: ST_TO_ADDR
// exit ;
107480: POP
107481: POP
107482: GO 107488
// end ; end ;
107484: GO 107328
107486: POP
107487: POP
// end ;
107488: LD_VAR 0 3
107492: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
107493: LD_INT 0
107495: PPUSH
107496: PPUSH
107497: PPUSH
// result := 0 ;
107498: LD_ADDR_VAR 0 3
107502: PUSH
107503: LD_INT 0
107505: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
107506: LD_VAR 0 1
107510: PUSH
107511: LD_INT 0
107513: LESS
107514: PUSH
107515: LD_VAR 0 1
107519: PUSH
107520: LD_INT 8
107522: GREATER
107523: OR
107524: PUSH
107525: LD_VAR 0 2
107529: PUSH
107530: LD_INT 0
107532: LESS
107533: OR
107534: PUSH
107535: LD_VAR 0 2
107539: PUSH
107540: LD_INT 8
107542: GREATER
107543: OR
107544: IFFALSE 107548
// exit ;
107546: GO 107623
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
107548: LD_ADDR_VAR 0 4
107552: PUSH
107553: LD_INT 22
107555: PUSH
107556: LD_VAR 0 2
107560: PUSH
107561: EMPTY
107562: LIST
107563: LIST
107564: PPUSH
107565: CALL_OW 69
107569: PUSH
107570: FOR_IN
107571: IFFALSE 107621
// begin un := UnitShoot ( i ) ;
107573: LD_ADDR_VAR 0 5
107577: PUSH
107578: LD_VAR 0 4
107582: PPUSH
107583: CALL_OW 504
107587: ST_TO_ADDR
// if GetSide ( un ) = side1 then
107588: LD_VAR 0 5
107592: PPUSH
107593: CALL_OW 255
107597: PUSH
107598: LD_VAR 0 1
107602: EQUAL
107603: IFFALSE 107619
// begin result := un ;
107605: LD_ADDR_VAR 0 3
107609: PUSH
107610: LD_VAR 0 5
107614: ST_TO_ADDR
// exit ;
107615: POP
107616: POP
107617: GO 107623
// end ; end ;
107619: GO 107570
107621: POP
107622: POP
// end ;
107623: LD_VAR 0 3
107627: RET
// export function GetCargoBay ( units ) ; begin
107628: LD_INT 0
107630: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
107631: LD_ADDR_VAR 0 2
107635: PUSH
107636: LD_VAR 0 1
107640: PPUSH
107641: LD_INT 2
107643: PUSH
107644: LD_INT 34
107646: PUSH
107647: LD_INT 12
107649: PUSH
107650: EMPTY
107651: LIST
107652: LIST
107653: PUSH
107654: LD_INT 34
107656: PUSH
107657: LD_INT 51
107659: PUSH
107660: EMPTY
107661: LIST
107662: LIST
107663: PUSH
107664: LD_INT 34
107666: PUSH
107667: LD_INT 32
107669: PUSH
107670: EMPTY
107671: LIST
107672: LIST
107673: PUSH
107674: LD_INT 34
107676: PUSH
107677: LD_INT 89
107679: PUSH
107680: EMPTY
107681: LIST
107682: LIST
107683: PUSH
107684: EMPTY
107685: LIST
107686: LIST
107687: LIST
107688: LIST
107689: LIST
107690: PPUSH
107691: CALL_OW 72
107695: ST_TO_ADDR
// end ;
107696: LD_VAR 0 2
107700: RET
// export function Negate ( value ) ; begin
107701: LD_INT 0
107703: PPUSH
// result := not value ;
107704: LD_ADDR_VAR 0 2
107708: PUSH
107709: LD_VAR 0 1
107713: NOT
107714: ST_TO_ADDR
// end ;
107715: LD_VAR 0 2
107719: RET
// export function Inc ( value ) ; begin
107720: LD_INT 0
107722: PPUSH
// result := value + 1 ;
107723: LD_ADDR_VAR 0 2
107727: PUSH
107728: LD_VAR 0 1
107732: PUSH
107733: LD_INT 1
107735: PLUS
107736: ST_TO_ADDR
// end ;
107737: LD_VAR 0 2
107741: RET
// export function Dec ( value ) ; begin
107742: LD_INT 0
107744: PPUSH
// result := value - 1 ;
107745: LD_ADDR_VAR 0 2
107749: PUSH
107750: LD_VAR 0 1
107754: PUSH
107755: LD_INT 1
107757: MINUS
107758: ST_TO_ADDR
// end ;
107759: LD_VAR 0 2
107763: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
107764: LD_INT 0
107766: PPUSH
107767: PPUSH
107768: PPUSH
107769: PPUSH
107770: PPUSH
107771: PPUSH
107772: PPUSH
107773: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
107774: LD_VAR 0 1
107778: PPUSH
107779: LD_VAR 0 2
107783: PPUSH
107784: CALL_OW 488
107788: NOT
107789: PUSH
107790: LD_VAR 0 3
107794: PPUSH
107795: LD_VAR 0 4
107799: PPUSH
107800: CALL_OW 488
107804: NOT
107805: OR
107806: IFFALSE 107819
// begin result := - 1 ;
107808: LD_ADDR_VAR 0 5
107812: PUSH
107813: LD_INT 1
107815: NEG
107816: ST_TO_ADDR
// exit ;
107817: GO 108054
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
107819: LD_ADDR_VAR 0 12
107823: PUSH
107824: LD_VAR 0 1
107828: PPUSH
107829: LD_VAR 0 2
107833: PPUSH
107834: LD_VAR 0 3
107838: PPUSH
107839: LD_VAR 0 4
107843: PPUSH
107844: CALL 106904 0 4
107848: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
107849: LD_ADDR_VAR 0 11
107853: PUSH
107854: LD_VAR 0 1
107858: PPUSH
107859: LD_VAR 0 2
107863: PPUSH
107864: LD_VAR 0 12
107868: PUSH
107869: LD_INT 1
107871: ARRAY
107872: PPUSH
107873: LD_VAR 0 12
107877: PUSH
107878: LD_INT 2
107880: ARRAY
107881: PPUSH
107882: CALL_OW 298
107886: ST_TO_ADDR
// distance := 9999 ;
107887: LD_ADDR_VAR 0 10
107891: PUSH
107892: LD_INT 9999
107894: ST_TO_ADDR
// for i := 0 to 5 do
107895: LD_ADDR_VAR 0 6
107899: PUSH
107900: DOUBLE
107901: LD_INT 0
107903: DEC
107904: ST_TO_ADDR
107905: LD_INT 5
107907: PUSH
107908: FOR_TO
107909: IFFALSE 108052
// begin _x := ShiftX ( x1 , i , centerDist ) ;
107911: LD_ADDR_VAR 0 7
107915: PUSH
107916: LD_VAR 0 1
107920: PPUSH
107921: LD_VAR 0 6
107925: PPUSH
107926: LD_VAR 0 11
107930: PPUSH
107931: CALL_OW 272
107935: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
107936: LD_ADDR_VAR 0 8
107940: PUSH
107941: LD_VAR 0 2
107945: PPUSH
107946: LD_VAR 0 6
107950: PPUSH
107951: LD_VAR 0 11
107955: PPUSH
107956: CALL_OW 273
107960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
107961: LD_VAR 0 7
107965: PPUSH
107966: LD_VAR 0 8
107970: PPUSH
107971: CALL_OW 488
107975: NOT
107976: IFFALSE 107980
// continue ;
107978: GO 107908
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
107980: LD_ADDR_VAR 0 9
107984: PUSH
107985: LD_VAR 0 12
107989: PUSH
107990: LD_INT 1
107992: ARRAY
107993: PPUSH
107994: LD_VAR 0 12
107998: PUSH
107999: LD_INT 2
108001: ARRAY
108002: PPUSH
108003: LD_VAR 0 7
108007: PPUSH
108008: LD_VAR 0 8
108012: PPUSH
108013: CALL_OW 298
108017: ST_TO_ADDR
// if tmp < distance then
108018: LD_VAR 0 9
108022: PUSH
108023: LD_VAR 0 10
108027: LESS
108028: IFFALSE 108050
// begin result := i ;
108030: LD_ADDR_VAR 0 5
108034: PUSH
108035: LD_VAR 0 6
108039: ST_TO_ADDR
// distance := tmp ;
108040: LD_ADDR_VAR 0 10
108044: PUSH
108045: LD_VAR 0 9
108049: ST_TO_ADDR
// end ; end ;
108050: GO 107908
108052: POP
108053: POP
// end ;
108054: LD_VAR 0 5
108058: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
108059: LD_INT 0
108061: PPUSH
108062: PPUSH
// if not driver or not IsInUnit ( driver ) then
108063: LD_VAR 0 1
108067: NOT
108068: PUSH
108069: LD_VAR 0 1
108073: PPUSH
108074: CALL_OW 310
108078: NOT
108079: OR
108080: IFFALSE 108084
// exit ;
108082: GO 108174
// vehicle := IsInUnit ( driver ) ;
108084: LD_ADDR_VAR 0 3
108088: PUSH
108089: LD_VAR 0 1
108093: PPUSH
108094: CALL_OW 310
108098: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
108099: LD_VAR 0 1
108103: PPUSH
108104: LD_STRING \
108106: PUSH
108107: LD_INT 0
108109: PUSH
108110: LD_INT 0
108112: PUSH
108113: LD_INT 0
108115: PUSH
108116: LD_INT 0
108118: PUSH
108119: LD_INT 0
108121: PUSH
108122: LD_INT 0
108124: PUSH
108125: EMPTY
108126: LIST
108127: LIST
108128: LIST
108129: LIST
108130: LIST
108131: LIST
108132: LIST
108133: PUSH
108134: LD_STRING E
108136: PUSH
108137: LD_INT 0
108139: PUSH
108140: LD_INT 0
108142: PUSH
108143: LD_VAR 0 3
108147: PUSH
108148: LD_INT 0
108150: PUSH
108151: LD_INT 0
108153: PUSH
108154: LD_INT 0
108156: PUSH
108157: EMPTY
108158: LIST
108159: LIST
108160: LIST
108161: LIST
108162: LIST
108163: LIST
108164: LIST
108165: PUSH
108166: EMPTY
108167: LIST
108168: LIST
108169: PPUSH
108170: CALL_OW 446
// end ;
108174: LD_VAR 0 2
108178: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
108179: LD_INT 0
108181: PPUSH
108182: PPUSH
// if not driver or not IsInUnit ( driver ) then
108183: LD_VAR 0 1
108187: NOT
108188: PUSH
108189: LD_VAR 0 1
108193: PPUSH
108194: CALL_OW 310
108198: NOT
108199: OR
108200: IFFALSE 108204
// exit ;
108202: GO 108294
// vehicle := IsInUnit ( driver ) ;
108204: LD_ADDR_VAR 0 3
108208: PUSH
108209: LD_VAR 0 1
108213: PPUSH
108214: CALL_OW 310
108218: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
108219: LD_VAR 0 1
108223: PPUSH
108224: LD_STRING \
108226: PUSH
108227: LD_INT 0
108229: PUSH
108230: LD_INT 0
108232: PUSH
108233: LD_INT 0
108235: PUSH
108236: LD_INT 0
108238: PUSH
108239: LD_INT 0
108241: PUSH
108242: LD_INT 0
108244: PUSH
108245: EMPTY
108246: LIST
108247: LIST
108248: LIST
108249: LIST
108250: LIST
108251: LIST
108252: LIST
108253: PUSH
108254: LD_STRING E
108256: PUSH
108257: LD_INT 0
108259: PUSH
108260: LD_INT 0
108262: PUSH
108263: LD_VAR 0 3
108267: PUSH
108268: LD_INT 0
108270: PUSH
108271: LD_INT 0
108273: PUSH
108274: LD_INT 0
108276: PUSH
108277: EMPTY
108278: LIST
108279: LIST
108280: LIST
108281: LIST
108282: LIST
108283: LIST
108284: LIST
108285: PUSH
108286: EMPTY
108287: LIST
108288: LIST
108289: PPUSH
108290: CALL_OW 447
// end ;
108294: LD_VAR 0 2
108298: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
108299: LD_INT 0
108301: PPUSH
108302: PPUSH
108303: PPUSH
// tmp := [ ] ;
108304: LD_ADDR_VAR 0 5
108308: PUSH
108309: EMPTY
108310: ST_TO_ADDR
// for i in units do
108311: LD_ADDR_VAR 0 4
108315: PUSH
108316: LD_VAR 0 1
108320: PUSH
108321: FOR_IN
108322: IFFALSE 108360
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
108324: LD_ADDR_VAR 0 5
108328: PUSH
108329: LD_VAR 0 5
108333: PPUSH
108334: LD_VAR 0 5
108338: PUSH
108339: LD_INT 1
108341: PLUS
108342: PPUSH
108343: LD_VAR 0 4
108347: PPUSH
108348: CALL_OW 256
108352: PPUSH
108353: CALL_OW 2
108357: ST_TO_ADDR
108358: GO 108321
108360: POP
108361: POP
// if not tmp then
108362: LD_VAR 0 5
108366: NOT
108367: IFFALSE 108371
// exit ;
108369: GO 108419
// if asc then
108371: LD_VAR 0 2
108375: IFFALSE 108399
// result := SortListByListAsc ( units , tmp ) else
108377: LD_ADDR_VAR 0 3
108381: PUSH
108382: LD_VAR 0 1
108386: PPUSH
108387: LD_VAR 0 5
108391: PPUSH
108392: CALL_OW 76
108396: ST_TO_ADDR
108397: GO 108419
// result := SortListByListDesc ( units , tmp ) ;
108399: LD_ADDR_VAR 0 3
108403: PUSH
108404: LD_VAR 0 1
108408: PPUSH
108409: LD_VAR 0 5
108413: PPUSH
108414: CALL_OW 77
108418: ST_TO_ADDR
// end ;
108419: LD_VAR 0 3
108423: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
108424: LD_INT 0
108426: PPUSH
108427: PPUSH
// task := GetTaskList ( mech ) ;
108428: LD_ADDR_VAR 0 4
108432: PUSH
108433: LD_VAR 0 1
108437: PPUSH
108438: CALL_OW 437
108442: ST_TO_ADDR
// if not task then
108443: LD_VAR 0 4
108447: NOT
108448: IFFALSE 108452
// exit ;
108450: GO 108494
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
108452: LD_ADDR_VAR 0 3
108456: PUSH
108457: LD_VAR 0 4
108461: PUSH
108462: LD_INT 1
108464: ARRAY
108465: PUSH
108466: LD_INT 1
108468: ARRAY
108469: PUSH
108470: LD_STRING r
108472: EQUAL
108473: PUSH
108474: LD_VAR 0 4
108478: PUSH
108479: LD_INT 1
108481: ARRAY
108482: PUSH
108483: LD_INT 4
108485: ARRAY
108486: PUSH
108487: LD_VAR 0 2
108491: EQUAL
108492: AND
108493: ST_TO_ADDR
// end ;
108494: LD_VAR 0 3
108498: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
108499: LD_INT 0
108501: PPUSH
// SetDir ( unit , d ) ;
108502: LD_VAR 0 1
108506: PPUSH
108507: LD_VAR 0 4
108511: PPUSH
108512: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
108516: LD_VAR 0 1
108520: PPUSH
108521: LD_VAR 0 2
108525: PPUSH
108526: LD_VAR 0 3
108530: PPUSH
108531: LD_VAR 0 5
108535: PPUSH
108536: CALL_OW 48
// end ;
108540: LD_VAR 0 6
108544: RET
// export function ToNaturalNumber ( number ) ; begin
108545: LD_INT 0
108547: PPUSH
// result := number div 1 ;
108548: LD_ADDR_VAR 0 2
108552: PUSH
108553: LD_VAR 0 1
108557: PUSH
108558: LD_INT 1
108560: DIV
108561: ST_TO_ADDR
// if number < 0 then
108562: LD_VAR 0 1
108566: PUSH
108567: LD_INT 0
108569: LESS
108570: IFFALSE 108580
// result := 0 ;
108572: LD_ADDR_VAR 0 2
108576: PUSH
108577: LD_INT 0
108579: ST_TO_ADDR
// end ;
108580: LD_VAR 0 2
108584: RET
// export function SortByClass ( units , class ) ; var un ; begin
108585: LD_INT 0
108587: PPUSH
108588: PPUSH
// if not units or not class then
108589: LD_VAR 0 1
108593: NOT
108594: PUSH
108595: LD_VAR 0 2
108599: NOT
108600: OR
108601: IFFALSE 108605
// exit ;
108603: GO 108700
// result := [ ] ;
108605: LD_ADDR_VAR 0 3
108609: PUSH
108610: EMPTY
108611: ST_TO_ADDR
// for un in units do
108612: LD_ADDR_VAR 0 4
108616: PUSH
108617: LD_VAR 0 1
108621: PUSH
108622: FOR_IN
108623: IFFALSE 108698
// if GetClass ( un ) = class then
108625: LD_VAR 0 4
108629: PPUSH
108630: CALL_OW 257
108634: PUSH
108635: LD_VAR 0 2
108639: EQUAL
108640: IFFALSE 108667
// result := Insert ( result , 1 , un ) else
108642: LD_ADDR_VAR 0 3
108646: PUSH
108647: LD_VAR 0 3
108651: PPUSH
108652: LD_INT 1
108654: PPUSH
108655: LD_VAR 0 4
108659: PPUSH
108660: CALL_OW 2
108664: ST_TO_ADDR
108665: GO 108696
// result := Replace ( result , result + 1 , un ) ;
108667: LD_ADDR_VAR 0 3
108671: PUSH
108672: LD_VAR 0 3
108676: PPUSH
108677: LD_VAR 0 3
108681: PUSH
108682: LD_INT 1
108684: PLUS
108685: PPUSH
108686: LD_VAR 0 4
108690: PPUSH
108691: CALL_OW 1
108695: ST_TO_ADDR
108696: GO 108622
108698: POP
108699: POP
// end ;
108700: LD_VAR 0 3
108704: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
108705: LD_INT 0
108707: PPUSH
108708: PPUSH
108709: PPUSH
108710: PPUSH
108711: PPUSH
108712: PPUSH
108713: PPUSH
// result := [ ] ;
108714: LD_ADDR_VAR 0 4
108718: PUSH
108719: EMPTY
108720: ST_TO_ADDR
// if x - r < 0 then
108721: LD_VAR 0 1
108725: PUSH
108726: LD_VAR 0 3
108730: MINUS
108731: PUSH
108732: LD_INT 0
108734: LESS
108735: IFFALSE 108747
// min_x := 0 else
108737: LD_ADDR_VAR 0 8
108741: PUSH
108742: LD_INT 0
108744: ST_TO_ADDR
108745: GO 108763
// min_x := x - r ;
108747: LD_ADDR_VAR 0 8
108751: PUSH
108752: LD_VAR 0 1
108756: PUSH
108757: LD_VAR 0 3
108761: MINUS
108762: ST_TO_ADDR
// if y - r < 0 then
108763: LD_VAR 0 2
108767: PUSH
108768: LD_VAR 0 3
108772: MINUS
108773: PUSH
108774: LD_INT 0
108776: LESS
108777: IFFALSE 108789
// min_y := 0 else
108779: LD_ADDR_VAR 0 7
108783: PUSH
108784: LD_INT 0
108786: ST_TO_ADDR
108787: GO 108805
// min_y := y - r ;
108789: LD_ADDR_VAR 0 7
108793: PUSH
108794: LD_VAR 0 2
108798: PUSH
108799: LD_VAR 0 3
108803: MINUS
108804: ST_TO_ADDR
// max_x := x + r ;
108805: LD_ADDR_VAR 0 9
108809: PUSH
108810: LD_VAR 0 1
108814: PUSH
108815: LD_VAR 0 3
108819: PLUS
108820: ST_TO_ADDR
// max_y := y + r ;
108821: LD_ADDR_VAR 0 10
108825: PUSH
108826: LD_VAR 0 2
108830: PUSH
108831: LD_VAR 0 3
108835: PLUS
108836: ST_TO_ADDR
// for _x = min_x to max_x do
108837: LD_ADDR_VAR 0 5
108841: PUSH
108842: DOUBLE
108843: LD_VAR 0 8
108847: DEC
108848: ST_TO_ADDR
108849: LD_VAR 0 9
108853: PUSH
108854: FOR_TO
108855: IFFALSE 108956
// for _y = min_y to max_y do
108857: LD_ADDR_VAR 0 6
108861: PUSH
108862: DOUBLE
108863: LD_VAR 0 7
108867: DEC
108868: ST_TO_ADDR
108869: LD_VAR 0 10
108873: PUSH
108874: FOR_TO
108875: IFFALSE 108952
// begin if not ValidHex ( _x , _y ) then
108877: LD_VAR 0 5
108881: PPUSH
108882: LD_VAR 0 6
108886: PPUSH
108887: CALL_OW 488
108891: NOT
108892: IFFALSE 108896
// continue ;
108894: GO 108874
// if GetResourceTypeXY ( _x , _y ) then
108896: LD_VAR 0 5
108900: PPUSH
108901: LD_VAR 0 6
108905: PPUSH
108906: CALL_OW 283
108910: IFFALSE 108950
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
108912: LD_ADDR_VAR 0 4
108916: PUSH
108917: LD_VAR 0 4
108921: PPUSH
108922: LD_VAR 0 4
108926: PUSH
108927: LD_INT 1
108929: PLUS
108930: PPUSH
108931: LD_VAR 0 5
108935: PUSH
108936: LD_VAR 0 6
108940: PUSH
108941: EMPTY
108942: LIST
108943: LIST
108944: PPUSH
108945: CALL_OW 1
108949: ST_TO_ADDR
// end ;
108950: GO 108874
108952: POP
108953: POP
108954: GO 108854
108956: POP
108957: POP
// end ;
108958: LD_VAR 0 4
108962: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
108963: LD_INT 0
108965: PPUSH
108966: PPUSH
108967: PPUSH
108968: PPUSH
108969: PPUSH
108970: PPUSH
108971: PPUSH
108972: PPUSH
// if not units then
108973: LD_VAR 0 1
108977: NOT
108978: IFFALSE 108982
// exit ;
108980: GO 109506
// result := UnitFilter ( units , [ f_ok ] ) ;
108982: LD_ADDR_VAR 0 3
108986: PUSH
108987: LD_VAR 0 1
108991: PPUSH
108992: LD_INT 50
108994: PUSH
108995: EMPTY
108996: LIST
108997: PPUSH
108998: CALL_OW 72
109002: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
109003: LD_ADDR_VAR 0 8
109007: PUSH
109008: LD_VAR 0 1
109012: PUSH
109013: LD_INT 1
109015: ARRAY
109016: PPUSH
109017: CALL_OW 255
109021: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
109022: LD_ADDR_VAR 0 10
109026: PUSH
109027: LD_INT 29
109029: PUSH
109030: LD_INT 91
109032: PUSH
109033: LD_INT 49
109035: PUSH
109036: EMPTY
109037: LIST
109038: LIST
109039: LIST
109040: ST_TO_ADDR
// if not result then
109041: LD_VAR 0 3
109045: NOT
109046: IFFALSE 109050
// exit ;
109048: GO 109506
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
109050: LD_ADDR_VAR 0 5
109054: PUSH
109055: LD_INT 81
109057: PUSH
109058: LD_VAR 0 8
109062: PUSH
109063: EMPTY
109064: LIST
109065: LIST
109066: PPUSH
109067: CALL_OW 69
109071: ST_TO_ADDR
// for i in result do
109072: LD_ADDR_VAR 0 4
109076: PUSH
109077: LD_VAR 0 3
109081: PUSH
109082: FOR_IN
109083: IFFALSE 109504
// begin tag := GetTag ( i ) + 1 ;
109085: LD_ADDR_VAR 0 9
109089: PUSH
109090: LD_VAR 0 4
109094: PPUSH
109095: CALL_OW 110
109099: PUSH
109100: LD_INT 1
109102: PLUS
109103: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
109104: LD_ADDR_VAR 0 7
109108: PUSH
109109: LD_VAR 0 4
109113: PPUSH
109114: CALL_OW 250
109118: PPUSH
109119: LD_VAR 0 4
109123: PPUSH
109124: CALL_OW 251
109128: PPUSH
109129: LD_INT 6
109131: PPUSH
109132: CALL 108705 0 3
109136: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
109137: LD_VAR 0 4
109141: PPUSH
109142: CALL_OW 247
109146: PUSH
109147: LD_INT 2
109149: EQUAL
109150: PUSH
109151: LD_VAR 0 7
109155: AND
109156: PUSH
109157: LD_VAR 0 4
109161: PPUSH
109162: CALL_OW 264
109166: PUSH
109167: LD_VAR 0 10
109171: IN
109172: NOT
109173: AND
109174: IFFALSE 109213
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
109176: LD_VAR 0 4
109180: PPUSH
109181: LD_VAR 0 7
109185: PUSH
109186: LD_INT 1
109188: ARRAY
109189: PUSH
109190: LD_INT 1
109192: ARRAY
109193: PPUSH
109194: LD_VAR 0 7
109198: PUSH
109199: LD_INT 1
109201: ARRAY
109202: PUSH
109203: LD_INT 2
109205: ARRAY
109206: PPUSH
109207: CALL_OW 116
109211: GO 109502
// if path > tag then
109213: LD_VAR 0 2
109217: PUSH
109218: LD_VAR 0 9
109222: GREATER
109223: IFFALSE 109431
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
109225: LD_ADDR_VAR 0 6
109229: PUSH
109230: LD_VAR 0 5
109234: PPUSH
109235: LD_INT 91
109237: PUSH
109238: LD_VAR 0 4
109242: PUSH
109243: LD_INT 8
109245: PUSH
109246: EMPTY
109247: LIST
109248: LIST
109249: LIST
109250: PPUSH
109251: CALL_OW 72
109255: ST_TO_ADDR
// if nearEnemy then
109256: LD_VAR 0 6
109260: IFFALSE 109329
// begin if GetWeapon ( i ) = ru_time_lapser then
109262: LD_VAR 0 4
109266: PPUSH
109267: CALL_OW 264
109271: PUSH
109272: LD_INT 49
109274: EQUAL
109275: IFFALSE 109303
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
109277: LD_VAR 0 4
109281: PPUSH
109282: LD_VAR 0 6
109286: PPUSH
109287: LD_VAR 0 4
109291: PPUSH
109292: CALL_OW 74
109296: PPUSH
109297: CALL_OW 112
109301: GO 109327
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
109303: LD_VAR 0 4
109307: PPUSH
109308: LD_VAR 0 6
109312: PPUSH
109313: LD_VAR 0 4
109317: PPUSH
109318: CALL_OW 74
109322: PPUSH
109323: CALL_OW 115
// end else
109327: GO 109429
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
109329: LD_VAR 0 4
109333: PPUSH
109334: LD_VAR 0 2
109338: PUSH
109339: LD_VAR 0 9
109343: ARRAY
109344: PUSH
109345: LD_INT 1
109347: ARRAY
109348: PPUSH
109349: LD_VAR 0 2
109353: PUSH
109354: LD_VAR 0 9
109358: ARRAY
109359: PUSH
109360: LD_INT 2
109362: ARRAY
109363: PPUSH
109364: CALL_OW 297
109368: PUSH
109369: LD_INT 6
109371: GREATER
109372: IFFALSE 109415
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
109374: LD_VAR 0 4
109378: PPUSH
109379: LD_VAR 0 2
109383: PUSH
109384: LD_VAR 0 9
109388: ARRAY
109389: PUSH
109390: LD_INT 1
109392: ARRAY
109393: PPUSH
109394: LD_VAR 0 2
109398: PUSH
109399: LD_VAR 0 9
109403: ARRAY
109404: PUSH
109405: LD_INT 2
109407: ARRAY
109408: PPUSH
109409: CALL_OW 114
109413: GO 109429
// SetTag ( i , tag ) ;
109415: LD_VAR 0 4
109419: PPUSH
109420: LD_VAR 0 9
109424: PPUSH
109425: CALL_OW 109
// end else
109429: GO 109502
// if enemy then
109431: LD_VAR 0 5
109435: IFFALSE 109502
// begin if GetWeapon ( i ) = ru_time_lapser then
109437: LD_VAR 0 4
109441: PPUSH
109442: CALL_OW 264
109446: PUSH
109447: LD_INT 49
109449: EQUAL
109450: IFFALSE 109478
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
109452: LD_VAR 0 4
109456: PPUSH
109457: LD_VAR 0 5
109461: PPUSH
109462: LD_VAR 0 4
109466: PPUSH
109467: CALL_OW 74
109471: PPUSH
109472: CALL_OW 112
109476: GO 109502
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
109478: LD_VAR 0 4
109482: PPUSH
109483: LD_VAR 0 5
109487: PPUSH
109488: LD_VAR 0 4
109492: PPUSH
109493: CALL_OW 74
109497: PPUSH
109498: CALL_OW 115
// end ; end ;
109502: GO 109082
109504: POP
109505: POP
// end ;
109506: LD_VAR 0 3
109510: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
109511: LD_INT 0
109513: PPUSH
109514: PPUSH
109515: PPUSH
// if not unit or IsInUnit ( unit ) then
109516: LD_VAR 0 1
109520: NOT
109521: PUSH
109522: LD_VAR 0 1
109526: PPUSH
109527: CALL_OW 310
109531: OR
109532: IFFALSE 109536
// exit ;
109534: GO 109627
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
109536: LD_ADDR_VAR 0 4
109540: PUSH
109541: LD_VAR 0 1
109545: PPUSH
109546: CALL_OW 250
109550: PPUSH
109551: LD_VAR 0 2
109555: PPUSH
109556: LD_INT 1
109558: PPUSH
109559: CALL_OW 272
109563: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
109564: LD_ADDR_VAR 0 5
109568: PUSH
109569: LD_VAR 0 1
109573: PPUSH
109574: CALL_OW 251
109578: PPUSH
109579: LD_VAR 0 2
109583: PPUSH
109584: LD_INT 1
109586: PPUSH
109587: CALL_OW 273
109591: ST_TO_ADDR
// if ValidHex ( x , y ) then
109592: LD_VAR 0 4
109596: PPUSH
109597: LD_VAR 0 5
109601: PPUSH
109602: CALL_OW 488
109606: IFFALSE 109627
// ComTurnXY ( unit , x , y ) ;
109608: LD_VAR 0 1
109612: PPUSH
109613: LD_VAR 0 4
109617: PPUSH
109618: LD_VAR 0 5
109622: PPUSH
109623: CALL_OW 118
// end ;
109627: LD_VAR 0 3
109631: RET
// export function SeeUnits ( side , units ) ; var i ; begin
109632: LD_INT 0
109634: PPUSH
109635: PPUSH
// result := false ;
109636: LD_ADDR_VAR 0 3
109640: PUSH
109641: LD_INT 0
109643: ST_TO_ADDR
// if not units then
109644: LD_VAR 0 2
109648: NOT
109649: IFFALSE 109653
// exit ;
109651: GO 109698
// for i in units do
109653: LD_ADDR_VAR 0 4
109657: PUSH
109658: LD_VAR 0 2
109662: PUSH
109663: FOR_IN
109664: IFFALSE 109696
// if See ( side , i ) then
109666: LD_VAR 0 1
109670: PPUSH
109671: LD_VAR 0 4
109675: PPUSH
109676: CALL_OW 292
109680: IFFALSE 109694
// begin result := true ;
109682: LD_ADDR_VAR 0 3
109686: PUSH
109687: LD_INT 1
109689: ST_TO_ADDR
// exit ;
109690: POP
109691: POP
109692: GO 109698
// end ;
109694: GO 109663
109696: POP
109697: POP
// end ;
109698: LD_VAR 0 3
109702: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
109703: LD_INT 0
109705: PPUSH
109706: PPUSH
109707: PPUSH
109708: PPUSH
// if not unit or not points then
109709: LD_VAR 0 1
109713: NOT
109714: PUSH
109715: LD_VAR 0 2
109719: NOT
109720: OR
109721: IFFALSE 109725
// exit ;
109723: GO 109815
// dist := 99999 ;
109725: LD_ADDR_VAR 0 5
109729: PUSH
109730: LD_INT 99999
109732: ST_TO_ADDR
// for i in points do
109733: LD_ADDR_VAR 0 4
109737: PUSH
109738: LD_VAR 0 2
109742: PUSH
109743: FOR_IN
109744: IFFALSE 109813
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
109746: LD_ADDR_VAR 0 6
109750: PUSH
109751: LD_VAR 0 1
109755: PPUSH
109756: LD_VAR 0 4
109760: PUSH
109761: LD_INT 1
109763: ARRAY
109764: PPUSH
109765: LD_VAR 0 4
109769: PUSH
109770: LD_INT 2
109772: ARRAY
109773: PPUSH
109774: CALL_OW 297
109778: ST_TO_ADDR
// if tmpDist < dist then
109779: LD_VAR 0 6
109783: PUSH
109784: LD_VAR 0 5
109788: LESS
109789: IFFALSE 109811
// begin result := i ;
109791: LD_ADDR_VAR 0 3
109795: PUSH
109796: LD_VAR 0 4
109800: ST_TO_ADDR
// dist := tmpDist ;
109801: LD_ADDR_VAR 0 5
109805: PUSH
109806: LD_VAR 0 6
109810: ST_TO_ADDR
// end ; end ;
109811: GO 109743
109813: POP
109814: POP
// end ;
109815: LD_VAR 0 3
109819: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
109820: LD_INT 0
109822: PPUSH
// uc_side := side ;
109823: LD_ADDR_OWVAR 20
109827: PUSH
109828: LD_VAR 0 1
109832: ST_TO_ADDR
// uc_nation := 3 ;
109833: LD_ADDR_OWVAR 21
109837: PUSH
109838: LD_INT 3
109840: ST_TO_ADDR
// vc_chassis := 25 ;
109841: LD_ADDR_OWVAR 37
109845: PUSH
109846: LD_INT 25
109848: ST_TO_ADDR
// vc_engine := engine_siberite ;
109849: LD_ADDR_OWVAR 39
109853: PUSH
109854: LD_INT 3
109856: ST_TO_ADDR
// vc_control := control_computer ;
109857: LD_ADDR_OWVAR 38
109861: PUSH
109862: LD_INT 3
109864: ST_TO_ADDR
// vc_weapon := 59 ;
109865: LD_ADDR_OWVAR 40
109869: PUSH
109870: LD_INT 59
109872: ST_TO_ADDR
// result := CreateVehicle ;
109873: LD_ADDR_VAR 0 5
109877: PUSH
109878: CALL_OW 45
109882: ST_TO_ADDR
// SetDir ( result , d ) ;
109883: LD_VAR 0 5
109887: PPUSH
109888: LD_VAR 0 4
109892: PPUSH
109893: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
109897: LD_VAR 0 5
109901: PPUSH
109902: LD_VAR 0 2
109906: PPUSH
109907: LD_VAR 0 3
109911: PPUSH
109912: LD_INT 0
109914: PPUSH
109915: CALL_OW 48
// end ;
109919: LD_VAR 0 5
109923: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
109924: LD_INT 0
109926: PPUSH
109927: PPUSH
109928: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
109929: LD_ADDR_VAR 0 2
109933: PUSH
109934: LD_INT 0
109936: PUSH
109937: LD_INT 0
109939: PUSH
109940: LD_INT 0
109942: PUSH
109943: LD_INT 0
109945: PUSH
109946: EMPTY
109947: LIST
109948: LIST
109949: LIST
109950: LIST
109951: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
109952: LD_VAR 0 1
109956: NOT
109957: PUSH
109958: LD_VAR 0 1
109962: PPUSH
109963: CALL_OW 264
109967: PUSH
109968: LD_INT 12
109970: PUSH
109971: LD_INT 51
109973: PUSH
109974: LD_INT 32
109976: PUSH
109977: LD_INT 89
109979: PUSH
109980: EMPTY
109981: LIST
109982: LIST
109983: LIST
109984: LIST
109985: IN
109986: NOT
109987: OR
109988: IFFALSE 109992
// exit ;
109990: GO 110090
// for i := 1 to 3 do
109992: LD_ADDR_VAR 0 3
109996: PUSH
109997: DOUBLE
109998: LD_INT 1
110000: DEC
110001: ST_TO_ADDR
110002: LD_INT 3
110004: PUSH
110005: FOR_TO
110006: IFFALSE 110088
// begin tmp := GetCargo ( cargo , i ) ;
110008: LD_ADDR_VAR 0 4
110012: PUSH
110013: LD_VAR 0 1
110017: PPUSH
110018: LD_VAR 0 3
110022: PPUSH
110023: CALL_OW 289
110027: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
110028: LD_ADDR_VAR 0 2
110032: PUSH
110033: LD_VAR 0 2
110037: PPUSH
110038: LD_VAR 0 3
110042: PPUSH
110043: LD_VAR 0 4
110047: PPUSH
110048: CALL_OW 1
110052: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
110053: LD_ADDR_VAR 0 2
110057: PUSH
110058: LD_VAR 0 2
110062: PPUSH
110063: LD_INT 4
110065: PPUSH
110066: LD_VAR 0 2
110070: PUSH
110071: LD_INT 4
110073: ARRAY
110074: PUSH
110075: LD_VAR 0 4
110079: PLUS
110080: PPUSH
110081: CALL_OW 1
110085: ST_TO_ADDR
// end ;
110086: GO 110005
110088: POP
110089: POP
// end ;
110090: LD_VAR 0 2
110094: RET
// export function Length ( array ) ; begin
110095: LD_INT 0
110097: PPUSH
// result := array + 0 ;
110098: LD_ADDR_VAR 0 2
110102: PUSH
110103: LD_VAR 0 1
110107: PUSH
110108: LD_INT 0
110110: PLUS
110111: ST_TO_ADDR
// end ;
110112: LD_VAR 0 2
110116: RET
// export function PrepareArray ( array ) ; begin
110117: LD_INT 0
110119: PPUSH
// result := array diff 0 ;
110120: LD_ADDR_VAR 0 2
110124: PUSH
110125: LD_VAR 0 1
110129: PUSH
110130: LD_INT 0
110132: DIFF
110133: ST_TO_ADDR
// if not result [ 1 ] then
110134: LD_VAR 0 2
110138: PUSH
110139: LD_INT 1
110141: ARRAY
110142: NOT
110143: IFFALSE 110163
// result := Delete ( result , 1 ) ;
110145: LD_ADDR_VAR 0 2
110149: PUSH
110150: LD_VAR 0 2
110154: PPUSH
110155: LD_INT 1
110157: PPUSH
110158: CALL_OW 3
110162: ST_TO_ADDR
// end ;
110163: LD_VAR 0 2
110167: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
110168: LD_INT 0
110170: PPUSH
110171: PPUSH
110172: PPUSH
110173: PPUSH
// sibRocketRange := 25 ;
110174: LD_ADDR_VAR 0 6
110178: PUSH
110179: LD_INT 25
110181: ST_TO_ADDR
// result := false ;
110182: LD_ADDR_VAR 0 4
110186: PUSH
110187: LD_INT 0
110189: ST_TO_ADDR
// for i := 0 to 5 do
110190: LD_ADDR_VAR 0 5
110194: PUSH
110195: DOUBLE
110196: LD_INT 0
110198: DEC
110199: ST_TO_ADDR
110200: LD_INT 5
110202: PUSH
110203: FOR_TO
110204: IFFALSE 110271
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
110206: LD_VAR 0 1
110210: PPUSH
110211: LD_VAR 0 5
110215: PPUSH
110216: LD_VAR 0 6
110220: PPUSH
110221: CALL_OW 272
110225: PPUSH
110226: LD_VAR 0 2
110230: PPUSH
110231: LD_VAR 0 5
110235: PPUSH
110236: LD_VAR 0 6
110240: PPUSH
110241: CALL_OW 273
110245: PPUSH
110246: LD_VAR 0 3
110250: PPUSH
110251: CALL_OW 309
110255: IFFALSE 110269
// begin result := true ;
110257: LD_ADDR_VAR 0 4
110261: PUSH
110262: LD_INT 1
110264: ST_TO_ADDR
// exit ;
110265: POP
110266: POP
110267: GO 110273
// end ;
110269: GO 110203
110271: POP
110272: POP
// end ;
110273: LD_VAR 0 4
110277: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
110278: LD_INT 0
110280: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
110281: LD_VAR 0 1
110285: PPUSH
110286: LD_VAR 0 2
110290: PPUSH
110291: LD_INT 0
110293: PPUSH
110294: LD_INT 0
110296: PPUSH
110297: LD_INT 1
110299: PPUSH
110300: LD_INT 0
110302: PPUSH
110303: CALL_OW 587
// end ;
110307: LD_VAR 0 3
110311: RET
// export function CenterOnNow ( unit ) ; begin
110312: LD_INT 0
110314: PPUSH
// result := IsInUnit ( unit ) ;
110315: LD_ADDR_VAR 0 2
110319: PUSH
110320: LD_VAR 0 1
110324: PPUSH
110325: CALL_OW 310
110329: ST_TO_ADDR
// if not result then
110330: LD_VAR 0 2
110334: NOT
110335: IFFALSE 110347
// result := unit ;
110337: LD_ADDR_VAR 0 2
110341: PUSH
110342: LD_VAR 0 1
110346: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
110347: LD_VAR 0 1
110351: PPUSH
110352: CALL_OW 87
// end ;
110356: LD_VAR 0 2
110360: RET
// export function ComMoveHex ( unit , hex ) ; begin
110361: LD_INT 0
110363: PPUSH
// if not hex then
110364: LD_VAR 0 2
110368: NOT
110369: IFFALSE 110373
// exit ;
110371: GO 110426
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
110373: LD_VAR 0 2
110377: PUSH
110378: LD_INT 1
110380: ARRAY
110381: PPUSH
110382: LD_VAR 0 2
110386: PUSH
110387: LD_INT 2
110389: ARRAY
110390: PPUSH
110391: CALL_OW 428
110395: IFFALSE 110399
// exit ;
110397: GO 110426
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
110399: LD_VAR 0 1
110403: PPUSH
110404: LD_VAR 0 2
110408: PUSH
110409: LD_INT 1
110411: ARRAY
110412: PPUSH
110413: LD_VAR 0 2
110417: PUSH
110418: LD_INT 2
110420: ARRAY
110421: PPUSH
110422: CALL_OW 111
// end ; end_of_file end_of_file
110426: LD_VAR 0 3
110430: RET
// export globalGameSaveCounter ; every 0 0$1 do
110431: GO 110433
110433: DISABLE
// begin enable ;
110434: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
110435: LD_STRING updateTimer(
110437: PUSH
110438: LD_OWVAR 1
110442: STR
110443: PUSH
110444: LD_STRING );
110446: STR
110447: PPUSH
110448: CALL_OW 559
// end ;
110452: END
// every 0 0$1 do
110453: GO 110455
110455: DISABLE
// begin globalGameSaveCounter := 0 ;
110456: LD_ADDR_EXP 146
110460: PUSH
110461: LD_INT 0
110463: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
110464: LD_STRING setGameSaveCounter(0)
110466: PPUSH
110467: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
110471: LD_STRING initStreamRollete();
110473: PPUSH
110474: CALL_OW 559
// InitStreamMode ;
110478: CALL 111804 0 0
// DefineStreamItems ( false ) ;
110482: LD_INT 0
110484: PPUSH
110485: CALL 112268 0 1
// end ;
110489: END
// export function SOS_MapStart ( ) ; begin
110490: LD_INT 0
110492: PPUSH
// if streamModeActive then
110493: LD_EXP 147
110497: IFFALSE 110506
// DefineStreamItems ( true ) ;
110499: LD_INT 1
110501: PPUSH
110502: CALL 112268 0 1
// UpdateLuaVariables ( ) ;
110506: CALL 110523 0 0
// UpdateFactoryWaypoints ( ) ;
110510: CALL 125137 0 0
// UpdateWarehouseGatheringPoints ( ) ;
110514: CALL 125394 0 0
// end ;
110518: LD_VAR 0 1
110522: RET
// function UpdateLuaVariables ( ) ; begin
110523: LD_INT 0
110525: PPUSH
// if globalGameSaveCounter then
110526: LD_EXP 146
110530: IFFALSE 110564
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
110532: LD_ADDR_EXP 146
110536: PUSH
110537: LD_EXP 146
110541: PPUSH
110542: CALL 107720 0 1
110546: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
110547: LD_STRING setGameSaveCounter(
110549: PUSH
110550: LD_EXP 146
110554: STR
110555: PUSH
110556: LD_STRING )
110558: STR
110559: PPUSH
110560: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
110564: LD_STRING setGameDifficulty(
110566: PUSH
110567: LD_OWVAR 67
110571: STR
110572: PUSH
110573: LD_STRING )
110575: STR
110576: PPUSH
110577: CALL_OW 559
// end ;
110581: LD_VAR 0 1
110585: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
110586: LD_INT 0
110588: PPUSH
// if p2 = stream_mode then
110589: LD_VAR 0 2
110593: PUSH
110594: LD_INT 100
110596: EQUAL
110597: IFFALSE 111600
// begin if not StreamModeActive then
110599: LD_EXP 147
110603: NOT
110604: IFFALSE 110614
// StreamModeActive := true ;
110606: LD_ADDR_EXP 147
110610: PUSH
110611: LD_INT 1
110613: ST_TO_ADDR
// if p3 = 0 then
110614: LD_VAR 0 3
110618: PUSH
110619: LD_INT 0
110621: EQUAL
110622: IFFALSE 110628
// InitStreamMode ;
110624: CALL 111804 0 0
// if p3 = 1 then
110628: LD_VAR 0 3
110632: PUSH
110633: LD_INT 1
110635: EQUAL
110636: IFFALSE 110646
// sRocket := true ;
110638: LD_ADDR_EXP 152
110642: PUSH
110643: LD_INT 1
110645: ST_TO_ADDR
// if p3 = 2 then
110646: LD_VAR 0 3
110650: PUSH
110651: LD_INT 2
110653: EQUAL
110654: IFFALSE 110664
// sSpeed := true ;
110656: LD_ADDR_EXP 151
110660: PUSH
110661: LD_INT 1
110663: ST_TO_ADDR
// if p3 = 3 then
110664: LD_VAR 0 3
110668: PUSH
110669: LD_INT 3
110671: EQUAL
110672: IFFALSE 110682
// sEngine := true ;
110674: LD_ADDR_EXP 153
110678: PUSH
110679: LD_INT 1
110681: ST_TO_ADDR
// if p3 = 4 then
110682: LD_VAR 0 3
110686: PUSH
110687: LD_INT 4
110689: EQUAL
110690: IFFALSE 110700
// sSpec := true ;
110692: LD_ADDR_EXP 150
110696: PUSH
110697: LD_INT 1
110699: ST_TO_ADDR
// if p3 = 5 then
110700: LD_VAR 0 3
110704: PUSH
110705: LD_INT 5
110707: EQUAL
110708: IFFALSE 110718
// sLevel := true ;
110710: LD_ADDR_EXP 154
110714: PUSH
110715: LD_INT 1
110717: ST_TO_ADDR
// if p3 = 6 then
110718: LD_VAR 0 3
110722: PUSH
110723: LD_INT 6
110725: EQUAL
110726: IFFALSE 110736
// sArmoury := true ;
110728: LD_ADDR_EXP 155
110732: PUSH
110733: LD_INT 1
110735: ST_TO_ADDR
// if p3 = 7 then
110736: LD_VAR 0 3
110740: PUSH
110741: LD_INT 7
110743: EQUAL
110744: IFFALSE 110754
// sRadar := true ;
110746: LD_ADDR_EXP 156
110750: PUSH
110751: LD_INT 1
110753: ST_TO_ADDR
// if p3 = 8 then
110754: LD_VAR 0 3
110758: PUSH
110759: LD_INT 8
110761: EQUAL
110762: IFFALSE 110772
// sBunker := true ;
110764: LD_ADDR_EXP 157
110768: PUSH
110769: LD_INT 1
110771: ST_TO_ADDR
// if p3 = 9 then
110772: LD_VAR 0 3
110776: PUSH
110777: LD_INT 9
110779: EQUAL
110780: IFFALSE 110790
// sHack := true ;
110782: LD_ADDR_EXP 158
110786: PUSH
110787: LD_INT 1
110789: ST_TO_ADDR
// if p3 = 10 then
110790: LD_VAR 0 3
110794: PUSH
110795: LD_INT 10
110797: EQUAL
110798: IFFALSE 110808
// sFire := true ;
110800: LD_ADDR_EXP 159
110804: PUSH
110805: LD_INT 1
110807: ST_TO_ADDR
// if p3 = 11 then
110808: LD_VAR 0 3
110812: PUSH
110813: LD_INT 11
110815: EQUAL
110816: IFFALSE 110826
// sRefresh := true ;
110818: LD_ADDR_EXP 160
110822: PUSH
110823: LD_INT 1
110825: ST_TO_ADDR
// if p3 = 12 then
110826: LD_VAR 0 3
110830: PUSH
110831: LD_INT 12
110833: EQUAL
110834: IFFALSE 110844
// sExp := true ;
110836: LD_ADDR_EXP 161
110840: PUSH
110841: LD_INT 1
110843: ST_TO_ADDR
// if p3 = 13 then
110844: LD_VAR 0 3
110848: PUSH
110849: LD_INT 13
110851: EQUAL
110852: IFFALSE 110862
// sDepot := true ;
110854: LD_ADDR_EXP 162
110858: PUSH
110859: LD_INT 1
110861: ST_TO_ADDR
// if p3 = 14 then
110862: LD_VAR 0 3
110866: PUSH
110867: LD_INT 14
110869: EQUAL
110870: IFFALSE 110880
// sFlag := true ;
110872: LD_ADDR_EXP 163
110876: PUSH
110877: LD_INT 1
110879: ST_TO_ADDR
// if p3 = 15 then
110880: LD_VAR 0 3
110884: PUSH
110885: LD_INT 15
110887: EQUAL
110888: IFFALSE 110898
// sKamikadze := true ;
110890: LD_ADDR_EXP 171
110894: PUSH
110895: LD_INT 1
110897: ST_TO_ADDR
// if p3 = 16 then
110898: LD_VAR 0 3
110902: PUSH
110903: LD_INT 16
110905: EQUAL
110906: IFFALSE 110916
// sTroll := true ;
110908: LD_ADDR_EXP 172
110912: PUSH
110913: LD_INT 1
110915: ST_TO_ADDR
// if p3 = 17 then
110916: LD_VAR 0 3
110920: PUSH
110921: LD_INT 17
110923: EQUAL
110924: IFFALSE 110934
// sSlow := true ;
110926: LD_ADDR_EXP 173
110930: PUSH
110931: LD_INT 1
110933: ST_TO_ADDR
// if p3 = 18 then
110934: LD_VAR 0 3
110938: PUSH
110939: LD_INT 18
110941: EQUAL
110942: IFFALSE 110952
// sLack := true ;
110944: LD_ADDR_EXP 174
110948: PUSH
110949: LD_INT 1
110951: ST_TO_ADDR
// if p3 = 19 then
110952: LD_VAR 0 3
110956: PUSH
110957: LD_INT 19
110959: EQUAL
110960: IFFALSE 110970
// sTank := true ;
110962: LD_ADDR_EXP 176
110966: PUSH
110967: LD_INT 1
110969: ST_TO_ADDR
// if p3 = 20 then
110970: LD_VAR 0 3
110974: PUSH
110975: LD_INT 20
110977: EQUAL
110978: IFFALSE 110988
// sRemote := true ;
110980: LD_ADDR_EXP 177
110984: PUSH
110985: LD_INT 1
110987: ST_TO_ADDR
// if p3 = 21 then
110988: LD_VAR 0 3
110992: PUSH
110993: LD_INT 21
110995: EQUAL
110996: IFFALSE 111006
// sPowell := true ;
110998: LD_ADDR_EXP 178
111002: PUSH
111003: LD_INT 1
111005: ST_TO_ADDR
// if p3 = 22 then
111006: LD_VAR 0 3
111010: PUSH
111011: LD_INT 22
111013: EQUAL
111014: IFFALSE 111024
// sTeleport := true ;
111016: LD_ADDR_EXP 181
111020: PUSH
111021: LD_INT 1
111023: ST_TO_ADDR
// if p3 = 23 then
111024: LD_VAR 0 3
111028: PUSH
111029: LD_INT 23
111031: EQUAL
111032: IFFALSE 111042
// sOilTower := true ;
111034: LD_ADDR_EXP 183
111038: PUSH
111039: LD_INT 1
111041: ST_TO_ADDR
// if p3 = 24 then
111042: LD_VAR 0 3
111046: PUSH
111047: LD_INT 24
111049: EQUAL
111050: IFFALSE 111060
// sShovel := true ;
111052: LD_ADDR_EXP 184
111056: PUSH
111057: LD_INT 1
111059: ST_TO_ADDR
// if p3 = 25 then
111060: LD_VAR 0 3
111064: PUSH
111065: LD_INT 25
111067: EQUAL
111068: IFFALSE 111078
// sSheik := true ;
111070: LD_ADDR_EXP 185
111074: PUSH
111075: LD_INT 1
111077: ST_TO_ADDR
// if p3 = 26 then
111078: LD_VAR 0 3
111082: PUSH
111083: LD_INT 26
111085: EQUAL
111086: IFFALSE 111096
// sEarthquake := true ;
111088: LD_ADDR_EXP 187
111092: PUSH
111093: LD_INT 1
111095: ST_TO_ADDR
// if p3 = 27 then
111096: LD_VAR 0 3
111100: PUSH
111101: LD_INT 27
111103: EQUAL
111104: IFFALSE 111114
// sAI := true ;
111106: LD_ADDR_EXP 188
111110: PUSH
111111: LD_INT 1
111113: ST_TO_ADDR
// if p3 = 28 then
111114: LD_VAR 0 3
111118: PUSH
111119: LD_INT 28
111121: EQUAL
111122: IFFALSE 111132
// sCargo := true ;
111124: LD_ADDR_EXP 191
111128: PUSH
111129: LD_INT 1
111131: ST_TO_ADDR
// if p3 = 29 then
111132: LD_VAR 0 3
111136: PUSH
111137: LD_INT 29
111139: EQUAL
111140: IFFALSE 111150
// sDLaser := true ;
111142: LD_ADDR_EXP 192
111146: PUSH
111147: LD_INT 1
111149: ST_TO_ADDR
// if p3 = 30 then
111150: LD_VAR 0 3
111154: PUSH
111155: LD_INT 30
111157: EQUAL
111158: IFFALSE 111168
// sExchange := true ;
111160: LD_ADDR_EXP 193
111164: PUSH
111165: LD_INT 1
111167: ST_TO_ADDR
// if p3 = 31 then
111168: LD_VAR 0 3
111172: PUSH
111173: LD_INT 31
111175: EQUAL
111176: IFFALSE 111186
// sFac := true ;
111178: LD_ADDR_EXP 194
111182: PUSH
111183: LD_INT 1
111185: ST_TO_ADDR
// if p3 = 32 then
111186: LD_VAR 0 3
111190: PUSH
111191: LD_INT 32
111193: EQUAL
111194: IFFALSE 111204
// sPower := true ;
111196: LD_ADDR_EXP 195
111200: PUSH
111201: LD_INT 1
111203: ST_TO_ADDR
// if p3 = 33 then
111204: LD_VAR 0 3
111208: PUSH
111209: LD_INT 33
111211: EQUAL
111212: IFFALSE 111222
// sRandom := true ;
111214: LD_ADDR_EXP 196
111218: PUSH
111219: LD_INT 1
111221: ST_TO_ADDR
// if p3 = 34 then
111222: LD_VAR 0 3
111226: PUSH
111227: LD_INT 34
111229: EQUAL
111230: IFFALSE 111240
// sShield := true ;
111232: LD_ADDR_EXP 197
111236: PUSH
111237: LD_INT 1
111239: ST_TO_ADDR
// if p3 = 35 then
111240: LD_VAR 0 3
111244: PUSH
111245: LD_INT 35
111247: EQUAL
111248: IFFALSE 111258
// sTime := true ;
111250: LD_ADDR_EXP 198
111254: PUSH
111255: LD_INT 1
111257: ST_TO_ADDR
// if p3 = 36 then
111258: LD_VAR 0 3
111262: PUSH
111263: LD_INT 36
111265: EQUAL
111266: IFFALSE 111276
// sTools := true ;
111268: LD_ADDR_EXP 199
111272: PUSH
111273: LD_INT 1
111275: ST_TO_ADDR
// if p3 = 101 then
111276: LD_VAR 0 3
111280: PUSH
111281: LD_INT 101
111283: EQUAL
111284: IFFALSE 111294
// sSold := true ;
111286: LD_ADDR_EXP 164
111290: PUSH
111291: LD_INT 1
111293: ST_TO_ADDR
// if p3 = 102 then
111294: LD_VAR 0 3
111298: PUSH
111299: LD_INT 102
111301: EQUAL
111302: IFFALSE 111312
// sDiff := true ;
111304: LD_ADDR_EXP 165
111308: PUSH
111309: LD_INT 1
111311: ST_TO_ADDR
// if p3 = 103 then
111312: LD_VAR 0 3
111316: PUSH
111317: LD_INT 103
111319: EQUAL
111320: IFFALSE 111330
// sFog := true ;
111322: LD_ADDR_EXP 168
111326: PUSH
111327: LD_INT 1
111329: ST_TO_ADDR
// if p3 = 104 then
111330: LD_VAR 0 3
111334: PUSH
111335: LD_INT 104
111337: EQUAL
111338: IFFALSE 111348
// sReset := true ;
111340: LD_ADDR_EXP 169
111344: PUSH
111345: LD_INT 1
111347: ST_TO_ADDR
// if p3 = 105 then
111348: LD_VAR 0 3
111352: PUSH
111353: LD_INT 105
111355: EQUAL
111356: IFFALSE 111366
// sSun := true ;
111358: LD_ADDR_EXP 170
111362: PUSH
111363: LD_INT 1
111365: ST_TO_ADDR
// if p3 = 106 then
111366: LD_VAR 0 3
111370: PUSH
111371: LD_INT 106
111373: EQUAL
111374: IFFALSE 111384
// sTiger := true ;
111376: LD_ADDR_EXP 166
111380: PUSH
111381: LD_INT 1
111383: ST_TO_ADDR
// if p3 = 107 then
111384: LD_VAR 0 3
111388: PUSH
111389: LD_INT 107
111391: EQUAL
111392: IFFALSE 111402
// sBomb := true ;
111394: LD_ADDR_EXP 167
111398: PUSH
111399: LD_INT 1
111401: ST_TO_ADDR
// if p3 = 108 then
111402: LD_VAR 0 3
111406: PUSH
111407: LD_INT 108
111409: EQUAL
111410: IFFALSE 111420
// sWound := true ;
111412: LD_ADDR_EXP 175
111416: PUSH
111417: LD_INT 1
111419: ST_TO_ADDR
// if p3 = 109 then
111420: LD_VAR 0 3
111424: PUSH
111425: LD_INT 109
111427: EQUAL
111428: IFFALSE 111438
// sBetray := true ;
111430: LD_ADDR_EXP 179
111434: PUSH
111435: LD_INT 1
111437: ST_TO_ADDR
// if p3 = 110 then
111438: LD_VAR 0 3
111442: PUSH
111443: LD_INT 110
111445: EQUAL
111446: IFFALSE 111456
// sContamin := true ;
111448: LD_ADDR_EXP 180
111452: PUSH
111453: LD_INT 1
111455: ST_TO_ADDR
// if p3 = 111 then
111456: LD_VAR 0 3
111460: PUSH
111461: LD_INT 111
111463: EQUAL
111464: IFFALSE 111474
// sOil := true ;
111466: LD_ADDR_EXP 182
111470: PUSH
111471: LD_INT 1
111473: ST_TO_ADDR
// if p3 = 112 then
111474: LD_VAR 0 3
111478: PUSH
111479: LD_INT 112
111481: EQUAL
111482: IFFALSE 111492
// sStu := true ;
111484: LD_ADDR_EXP 186
111488: PUSH
111489: LD_INT 1
111491: ST_TO_ADDR
// if p3 = 113 then
111492: LD_VAR 0 3
111496: PUSH
111497: LD_INT 113
111499: EQUAL
111500: IFFALSE 111510
// sBazooka := true ;
111502: LD_ADDR_EXP 189
111506: PUSH
111507: LD_INT 1
111509: ST_TO_ADDR
// if p3 = 114 then
111510: LD_VAR 0 3
111514: PUSH
111515: LD_INT 114
111517: EQUAL
111518: IFFALSE 111528
// sMortar := true ;
111520: LD_ADDR_EXP 190
111524: PUSH
111525: LD_INT 1
111527: ST_TO_ADDR
// if p3 = 115 then
111528: LD_VAR 0 3
111532: PUSH
111533: LD_INT 115
111535: EQUAL
111536: IFFALSE 111546
// sRanger := true ;
111538: LD_ADDR_EXP 200
111542: PUSH
111543: LD_INT 1
111545: ST_TO_ADDR
// if p3 = 116 then
111546: LD_VAR 0 3
111550: PUSH
111551: LD_INT 116
111553: EQUAL
111554: IFFALSE 111564
// sComputer := true ;
111556: LD_ADDR_EXP 201
111560: PUSH
111561: LD_INT 1
111563: ST_TO_ADDR
// if p3 = 117 then
111564: LD_VAR 0 3
111568: PUSH
111569: LD_INT 117
111571: EQUAL
111572: IFFALSE 111582
// s30 := true ;
111574: LD_ADDR_EXP 202
111578: PUSH
111579: LD_INT 1
111581: ST_TO_ADDR
// if p3 = 118 then
111582: LD_VAR 0 3
111586: PUSH
111587: LD_INT 118
111589: EQUAL
111590: IFFALSE 111600
// s60 := true ;
111592: LD_ADDR_EXP 203
111596: PUSH
111597: LD_INT 1
111599: ST_TO_ADDR
// end ; if p2 = hack_mode then
111600: LD_VAR 0 2
111604: PUSH
111605: LD_INT 101
111607: EQUAL
111608: IFFALSE 111736
// begin case p3 of 1 :
111610: LD_VAR 0 3
111614: PUSH
111615: LD_INT 1
111617: DOUBLE
111618: EQUAL
111619: IFTRUE 111623
111621: GO 111630
111623: POP
// hHackUnlimitedResources ; 2 :
111624: CALL 123883 0 0
111628: GO 111736
111630: LD_INT 2
111632: DOUBLE
111633: EQUAL
111634: IFTRUE 111638
111636: GO 111645
111638: POP
// hHackSetLevel10 ; 3 :
111639: CALL 124016 0 0
111643: GO 111736
111645: LD_INT 3
111647: DOUBLE
111648: EQUAL
111649: IFTRUE 111653
111651: GO 111660
111653: POP
// hHackSetLevel10YourUnits ; 4 :
111654: CALL 124101 0 0
111658: GO 111736
111660: LD_INT 4
111662: DOUBLE
111663: EQUAL
111664: IFTRUE 111668
111666: GO 111675
111668: POP
// hHackInvincible ; 5 :
111669: CALL 124549 0 0
111673: GO 111736
111675: LD_INT 5
111677: DOUBLE
111678: EQUAL
111679: IFTRUE 111683
111681: GO 111690
111683: POP
// hHackInvisible ; 6 :
111684: CALL 124660 0 0
111688: GO 111736
111690: LD_INT 6
111692: DOUBLE
111693: EQUAL
111694: IFTRUE 111698
111696: GO 111705
111698: POP
// hHackChangeYourSide ; 7 :
111699: CALL 124717 0 0
111703: GO 111736
111705: LD_INT 7
111707: DOUBLE
111708: EQUAL
111709: IFTRUE 111713
111711: GO 111720
111713: POP
// hHackChangeUnitSide ; 8 :
111714: CALL 124759 0 0
111718: GO 111736
111720: LD_INT 8
111722: DOUBLE
111723: EQUAL
111724: IFTRUE 111728
111726: GO 111735
111728: POP
// hHackFog ; end ;
111729: CALL 124860 0 0
111733: GO 111736
111735: POP
// end ; if p2 = game_save_mode then
111736: LD_VAR 0 2
111740: PUSH
111741: LD_INT 102
111743: EQUAL
111744: IFFALSE 111799
// begin if p3 = 1 then
111746: LD_VAR 0 3
111750: PUSH
111751: LD_INT 1
111753: EQUAL
111754: IFFALSE 111766
// globalGameSaveCounter := p4 ;
111756: LD_ADDR_EXP 146
111760: PUSH
111761: LD_VAR 0 4
111765: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
111766: LD_VAR 0 3
111770: PUSH
111771: LD_INT 2
111773: EQUAL
111774: PUSH
111775: LD_EXP 146
111779: AND
111780: IFFALSE 111799
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
111782: LD_STRING setGameSaveCounter(
111784: PUSH
111785: LD_EXP 146
111789: STR
111790: PUSH
111791: LD_STRING )
111793: STR
111794: PPUSH
111795: CALL_OW 559
// end ; end ;
111799: LD_VAR 0 7
111803: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
111804: LD_INT 0
111806: PPUSH
// streamModeActive := false ;
111807: LD_ADDR_EXP 147
111811: PUSH
111812: LD_INT 0
111814: ST_TO_ADDR
// normalCounter := 36 ;
111815: LD_ADDR_EXP 148
111819: PUSH
111820: LD_INT 36
111822: ST_TO_ADDR
// hardcoreCounter := 18 ;
111823: LD_ADDR_EXP 149
111827: PUSH
111828: LD_INT 18
111830: ST_TO_ADDR
// sRocket := false ;
111831: LD_ADDR_EXP 152
111835: PUSH
111836: LD_INT 0
111838: ST_TO_ADDR
// sSpeed := false ;
111839: LD_ADDR_EXP 151
111843: PUSH
111844: LD_INT 0
111846: ST_TO_ADDR
// sEngine := false ;
111847: LD_ADDR_EXP 153
111851: PUSH
111852: LD_INT 0
111854: ST_TO_ADDR
// sSpec := false ;
111855: LD_ADDR_EXP 150
111859: PUSH
111860: LD_INT 0
111862: ST_TO_ADDR
// sLevel := false ;
111863: LD_ADDR_EXP 154
111867: PUSH
111868: LD_INT 0
111870: ST_TO_ADDR
// sArmoury := false ;
111871: LD_ADDR_EXP 155
111875: PUSH
111876: LD_INT 0
111878: ST_TO_ADDR
// sRadar := false ;
111879: LD_ADDR_EXP 156
111883: PUSH
111884: LD_INT 0
111886: ST_TO_ADDR
// sBunker := false ;
111887: LD_ADDR_EXP 157
111891: PUSH
111892: LD_INT 0
111894: ST_TO_ADDR
// sHack := false ;
111895: LD_ADDR_EXP 158
111899: PUSH
111900: LD_INT 0
111902: ST_TO_ADDR
// sFire := false ;
111903: LD_ADDR_EXP 159
111907: PUSH
111908: LD_INT 0
111910: ST_TO_ADDR
// sRefresh := false ;
111911: LD_ADDR_EXP 160
111915: PUSH
111916: LD_INT 0
111918: ST_TO_ADDR
// sExp := false ;
111919: LD_ADDR_EXP 161
111923: PUSH
111924: LD_INT 0
111926: ST_TO_ADDR
// sDepot := false ;
111927: LD_ADDR_EXP 162
111931: PUSH
111932: LD_INT 0
111934: ST_TO_ADDR
// sFlag := false ;
111935: LD_ADDR_EXP 163
111939: PUSH
111940: LD_INT 0
111942: ST_TO_ADDR
// sKamikadze := false ;
111943: LD_ADDR_EXP 171
111947: PUSH
111948: LD_INT 0
111950: ST_TO_ADDR
// sTroll := false ;
111951: LD_ADDR_EXP 172
111955: PUSH
111956: LD_INT 0
111958: ST_TO_ADDR
// sSlow := false ;
111959: LD_ADDR_EXP 173
111963: PUSH
111964: LD_INT 0
111966: ST_TO_ADDR
// sLack := false ;
111967: LD_ADDR_EXP 174
111971: PUSH
111972: LD_INT 0
111974: ST_TO_ADDR
// sTank := false ;
111975: LD_ADDR_EXP 176
111979: PUSH
111980: LD_INT 0
111982: ST_TO_ADDR
// sRemote := false ;
111983: LD_ADDR_EXP 177
111987: PUSH
111988: LD_INT 0
111990: ST_TO_ADDR
// sPowell := false ;
111991: LD_ADDR_EXP 178
111995: PUSH
111996: LD_INT 0
111998: ST_TO_ADDR
// sTeleport := false ;
111999: LD_ADDR_EXP 181
112003: PUSH
112004: LD_INT 0
112006: ST_TO_ADDR
// sOilTower := false ;
112007: LD_ADDR_EXP 183
112011: PUSH
112012: LD_INT 0
112014: ST_TO_ADDR
// sShovel := false ;
112015: LD_ADDR_EXP 184
112019: PUSH
112020: LD_INT 0
112022: ST_TO_ADDR
// sSheik := false ;
112023: LD_ADDR_EXP 185
112027: PUSH
112028: LD_INT 0
112030: ST_TO_ADDR
// sEarthquake := false ;
112031: LD_ADDR_EXP 187
112035: PUSH
112036: LD_INT 0
112038: ST_TO_ADDR
// sAI := false ;
112039: LD_ADDR_EXP 188
112043: PUSH
112044: LD_INT 0
112046: ST_TO_ADDR
// sCargo := false ;
112047: LD_ADDR_EXP 191
112051: PUSH
112052: LD_INT 0
112054: ST_TO_ADDR
// sDLaser := false ;
112055: LD_ADDR_EXP 192
112059: PUSH
112060: LD_INT 0
112062: ST_TO_ADDR
// sExchange := false ;
112063: LD_ADDR_EXP 193
112067: PUSH
112068: LD_INT 0
112070: ST_TO_ADDR
// sFac := false ;
112071: LD_ADDR_EXP 194
112075: PUSH
112076: LD_INT 0
112078: ST_TO_ADDR
// sPower := false ;
112079: LD_ADDR_EXP 195
112083: PUSH
112084: LD_INT 0
112086: ST_TO_ADDR
// sRandom := false ;
112087: LD_ADDR_EXP 196
112091: PUSH
112092: LD_INT 0
112094: ST_TO_ADDR
// sShield := false ;
112095: LD_ADDR_EXP 197
112099: PUSH
112100: LD_INT 0
112102: ST_TO_ADDR
// sTime := false ;
112103: LD_ADDR_EXP 198
112107: PUSH
112108: LD_INT 0
112110: ST_TO_ADDR
// sTools := false ;
112111: LD_ADDR_EXP 199
112115: PUSH
112116: LD_INT 0
112118: ST_TO_ADDR
// sSold := false ;
112119: LD_ADDR_EXP 164
112123: PUSH
112124: LD_INT 0
112126: ST_TO_ADDR
// sDiff := false ;
112127: LD_ADDR_EXP 165
112131: PUSH
112132: LD_INT 0
112134: ST_TO_ADDR
// sFog := false ;
112135: LD_ADDR_EXP 168
112139: PUSH
112140: LD_INT 0
112142: ST_TO_ADDR
// sReset := false ;
112143: LD_ADDR_EXP 169
112147: PUSH
112148: LD_INT 0
112150: ST_TO_ADDR
// sSun := false ;
112151: LD_ADDR_EXP 170
112155: PUSH
112156: LD_INT 0
112158: ST_TO_ADDR
// sTiger := false ;
112159: LD_ADDR_EXP 166
112163: PUSH
112164: LD_INT 0
112166: ST_TO_ADDR
// sBomb := false ;
112167: LD_ADDR_EXP 167
112171: PUSH
112172: LD_INT 0
112174: ST_TO_ADDR
// sWound := false ;
112175: LD_ADDR_EXP 175
112179: PUSH
112180: LD_INT 0
112182: ST_TO_ADDR
// sBetray := false ;
112183: LD_ADDR_EXP 179
112187: PUSH
112188: LD_INT 0
112190: ST_TO_ADDR
// sContamin := false ;
112191: LD_ADDR_EXP 180
112195: PUSH
112196: LD_INT 0
112198: ST_TO_ADDR
// sOil := false ;
112199: LD_ADDR_EXP 182
112203: PUSH
112204: LD_INT 0
112206: ST_TO_ADDR
// sStu := false ;
112207: LD_ADDR_EXP 186
112211: PUSH
112212: LD_INT 0
112214: ST_TO_ADDR
// sBazooka := false ;
112215: LD_ADDR_EXP 189
112219: PUSH
112220: LD_INT 0
112222: ST_TO_ADDR
// sMortar := false ;
112223: LD_ADDR_EXP 190
112227: PUSH
112228: LD_INT 0
112230: ST_TO_ADDR
// sRanger := false ;
112231: LD_ADDR_EXP 200
112235: PUSH
112236: LD_INT 0
112238: ST_TO_ADDR
// sComputer := false ;
112239: LD_ADDR_EXP 201
112243: PUSH
112244: LD_INT 0
112246: ST_TO_ADDR
// s30 := false ;
112247: LD_ADDR_EXP 202
112251: PUSH
112252: LD_INT 0
112254: ST_TO_ADDR
// s60 := false ;
112255: LD_ADDR_EXP 203
112259: PUSH
112260: LD_INT 0
112262: ST_TO_ADDR
// end ;
112263: LD_VAR 0 1
112267: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
112268: LD_INT 0
112270: PPUSH
112271: PPUSH
112272: PPUSH
112273: PPUSH
112274: PPUSH
112275: PPUSH
112276: PPUSH
// result := [ ] ;
112277: LD_ADDR_VAR 0 2
112281: PUSH
112282: EMPTY
112283: ST_TO_ADDR
// if campaign_id = 1 then
112284: LD_OWVAR 69
112288: PUSH
112289: LD_INT 1
112291: EQUAL
112292: IFFALSE 115458
// begin case mission_number of 1 :
112294: LD_OWVAR 70
112298: PUSH
112299: LD_INT 1
112301: DOUBLE
112302: EQUAL
112303: IFTRUE 112307
112305: GO 112383
112307: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
112308: LD_ADDR_VAR 0 2
112312: PUSH
112313: LD_INT 2
112315: PUSH
112316: LD_INT 4
112318: PUSH
112319: LD_INT 11
112321: PUSH
112322: LD_INT 12
112324: PUSH
112325: LD_INT 15
112327: PUSH
112328: LD_INT 16
112330: PUSH
112331: LD_INT 22
112333: PUSH
112334: LD_INT 23
112336: PUSH
112337: LD_INT 26
112339: PUSH
112340: EMPTY
112341: LIST
112342: LIST
112343: LIST
112344: LIST
112345: LIST
112346: LIST
112347: LIST
112348: LIST
112349: LIST
112350: PUSH
112351: LD_INT 101
112353: PUSH
112354: LD_INT 102
112356: PUSH
112357: LD_INT 106
112359: PUSH
112360: LD_INT 116
112362: PUSH
112363: LD_INT 117
112365: PUSH
112366: LD_INT 118
112368: PUSH
112369: EMPTY
112370: LIST
112371: LIST
112372: LIST
112373: LIST
112374: LIST
112375: LIST
112376: PUSH
112377: EMPTY
112378: LIST
112379: LIST
112380: ST_TO_ADDR
112381: GO 115456
112383: LD_INT 2
112385: DOUBLE
112386: EQUAL
112387: IFTRUE 112391
112389: GO 112475
112391: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
112392: LD_ADDR_VAR 0 2
112396: PUSH
112397: LD_INT 2
112399: PUSH
112400: LD_INT 4
112402: PUSH
112403: LD_INT 11
112405: PUSH
112406: LD_INT 12
112408: PUSH
112409: LD_INT 15
112411: PUSH
112412: LD_INT 16
112414: PUSH
112415: LD_INT 22
112417: PUSH
112418: LD_INT 23
112420: PUSH
112421: LD_INT 26
112423: PUSH
112424: EMPTY
112425: LIST
112426: LIST
112427: LIST
112428: LIST
112429: LIST
112430: LIST
112431: LIST
112432: LIST
112433: LIST
112434: PUSH
112435: LD_INT 101
112437: PUSH
112438: LD_INT 102
112440: PUSH
112441: LD_INT 105
112443: PUSH
112444: LD_INT 106
112446: PUSH
112447: LD_INT 108
112449: PUSH
112450: LD_INT 116
112452: PUSH
112453: LD_INT 117
112455: PUSH
112456: LD_INT 118
112458: PUSH
112459: EMPTY
112460: LIST
112461: LIST
112462: LIST
112463: LIST
112464: LIST
112465: LIST
112466: LIST
112467: LIST
112468: PUSH
112469: EMPTY
112470: LIST
112471: LIST
112472: ST_TO_ADDR
112473: GO 115456
112475: LD_INT 3
112477: DOUBLE
112478: EQUAL
112479: IFTRUE 112483
112481: GO 112571
112483: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
112484: LD_ADDR_VAR 0 2
112488: PUSH
112489: LD_INT 2
112491: PUSH
112492: LD_INT 4
112494: PUSH
112495: LD_INT 5
112497: PUSH
112498: LD_INT 11
112500: PUSH
112501: LD_INT 12
112503: PUSH
112504: LD_INT 15
112506: PUSH
112507: LD_INT 16
112509: PUSH
112510: LD_INT 22
112512: PUSH
112513: LD_INT 26
112515: PUSH
112516: LD_INT 36
112518: PUSH
112519: EMPTY
112520: LIST
112521: LIST
112522: LIST
112523: LIST
112524: LIST
112525: LIST
112526: LIST
112527: LIST
112528: LIST
112529: LIST
112530: PUSH
112531: LD_INT 101
112533: PUSH
112534: LD_INT 102
112536: PUSH
112537: LD_INT 105
112539: PUSH
112540: LD_INT 106
112542: PUSH
112543: LD_INT 108
112545: PUSH
112546: LD_INT 116
112548: PUSH
112549: LD_INT 117
112551: PUSH
112552: LD_INT 118
112554: PUSH
112555: EMPTY
112556: LIST
112557: LIST
112558: LIST
112559: LIST
112560: LIST
112561: LIST
112562: LIST
112563: LIST
112564: PUSH
112565: EMPTY
112566: LIST
112567: LIST
112568: ST_TO_ADDR
112569: GO 115456
112571: LD_INT 4
112573: DOUBLE
112574: EQUAL
112575: IFTRUE 112579
112577: GO 112675
112579: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
112580: LD_ADDR_VAR 0 2
112584: PUSH
112585: LD_INT 2
112587: PUSH
112588: LD_INT 4
112590: PUSH
112591: LD_INT 5
112593: PUSH
112594: LD_INT 8
112596: PUSH
112597: LD_INT 11
112599: PUSH
112600: LD_INT 12
112602: PUSH
112603: LD_INT 15
112605: PUSH
112606: LD_INT 16
112608: PUSH
112609: LD_INT 22
112611: PUSH
112612: LD_INT 23
112614: PUSH
112615: LD_INT 26
112617: PUSH
112618: LD_INT 36
112620: PUSH
112621: EMPTY
112622: LIST
112623: LIST
112624: LIST
112625: LIST
112626: LIST
112627: LIST
112628: LIST
112629: LIST
112630: LIST
112631: LIST
112632: LIST
112633: LIST
112634: PUSH
112635: LD_INT 101
112637: PUSH
112638: LD_INT 102
112640: PUSH
112641: LD_INT 105
112643: PUSH
112644: LD_INT 106
112646: PUSH
112647: LD_INT 108
112649: PUSH
112650: LD_INT 116
112652: PUSH
112653: LD_INT 117
112655: PUSH
112656: LD_INT 118
112658: PUSH
112659: EMPTY
112660: LIST
112661: LIST
112662: LIST
112663: LIST
112664: LIST
112665: LIST
112666: LIST
112667: LIST
112668: PUSH
112669: EMPTY
112670: LIST
112671: LIST
112672: ST_TO_ADDR
112673: GO 115456
112675: LD_INT 5
112677: DOUBLE
112678: EQUAL
112679: IFTRUE 112683
112681: GO 112795
112683: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
112684: LD_ADDR_VAR 0 2
112688: PUSH
112689: LD_INT 2
112691: PUSH
112692: LD_INT 4
112694: PUSH
112695: LD_INT 5
112697: PUSH
112698: LD_INT 6
112700: PUSH
112701: LD_INT 8
112703: PUSH
112704: LD_INT 11
112706: PUSH
112707: LD_INT 12
112709: PUSH
112710: LD_INT 15
112712: PUSH
112713: LD_INT 16
112715: PUSH
112716: LD_INT 22
112718: PUSH
112719: LD_INT 23
112721: PUSH
112722: LD_INT 25
112724: PUSH
112725: LD_INT 26
112727: PUSH
112728: LD_INT 36
112730: PUSH
112731: EMPTY
112732: LIST
112733: LIST
112734: LIST
112735: LIST
112736: LIST
112737: LIST
112738: LIST
112739: LIST
112740: LIST
112741: LIST
112742: LIST
112743: LIST
112744: LIST
112745: LIST
112746: PUSH
112747: LD_INT 101
112749: PUSH
112750: LD_INT 102
112752: PUSH
112753: LD_INT 105
112755: PUSH
112756: LD_INT 106
112758: PUSH
112759: LD_INT 108
112761: PUSH
112762: LD_INT 109
112764: PUSH
112765: LD_INT 112
112767: PUSH
112768: LD_INT 116
112770: PUSH
112771: LD_INT 117
112773: PUSH
112774: LD_INT 118
112776: PUSH
112777: EMPTY
112778: LIST
112779: LIST
112780: LIST
112781: LIST
112782: LIST
112783: LIST
112784: LIST
112785: LIST
112786: LIST
112787: LIST
112788: PUSH
112789: EMPTY
112790: LIST
112791: LIST
112792: ST_TO_ADDR
112793: GO 115456
112795: LD_INT 6
112797: DOUBLE
112798: EQUAL
112799: IFTRUE 112803
112801: GO 112935
112803: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
112804: LD_ADDR_VAR 0 2
112808: PUSH
112809: LD_INT 2
112811: PUSH
112812: LD_INT 4
112814: PUSH
112815: LD_INT 5
112817: PUSH
112818: LD_INT 6
112820: PUSH
112821: LD_INT 8
112823: PUSH
112824: LD_INT 11
112826: PUSH
112827: LD_INT 12
112829: PUSH
112830: LD_INT 15
112832: PUSH
112833: LD_INT 16
112835: PUSH
112836: LD_INT 20
112838: PUSH
112839: LD_INT 21
112841: PUSH
112842: LD_INT 22
112844: PUSH
112845: LD_INT 23
112847: PUSH
112848: LD_INT 25
112850: PUSH
112851: LD_INT 26
112853: PUSH
112854: LD_INT 30
112856: PUSH
112857: LD_INT 31
112859: PUSH
112860: LD_INT 32
112862: PUSH
112863: LD_INT 36
112865: PUSH
112866: EMPTY
112867: LIST
112868: LIST
112869: LIST
112870: LIST
112871: LIST
112872: LIST
112873: LIST
112874: LIST
112875: LIST
112876: LIST
112877: LIST
112878: LIST
112879: LIST
112880: LIST
112881: LIST
112882: LIST
112883: LIST
112884: LIST
112885: LIST
112886: PUSH
112887: LD_INT 101
112889: PUSH
112890: LD_INT 102
112892: PUSH
112893: LD_INT 105
112895: PUSH
112896: LD_INT 106
112898: PUSH
112899: LD_INT 108
112901: PUSH
112902: LD_INT 109
112904: PUSH
112905: LD_INT 112
112907: PUSH
112908: LD_INT 116
112910: PUSH
112911: LD_INT 117
112913: PUSH
112914: LD_INT 118
112916: PUSH
112917: EMPTY
112918: LIST
112919: LIST
112920: LIST
112921: LIST
112922: LIST
112923: LIST
112924: LIST
112925: LIST
112926: LIST
112927: LIST
112928: PUSH
112929: EMPTY
112930: LIST
112931: LIST
112932: ST_TO_ADDR
112933: GO 115456
112935: LD_INT 7
112937: DOUBLE
112938: EQUAL
112939: IFTRUE 112943
112941: GO 113055
112943: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
112944: LD_ADDR_VAR 0 2
112948: PUSH
112949: LD_INT 2
112951: PUSH
112952: LD_INT 4
112954: PUSH
112955: LD_INT 5
112957: PUSH
112958: LD_INT 7
112960: PUSH
112961: LD_INT 11
112963: PUSH
112964: LD_INT 12
112966: PUSH
112967: LD_INT 15
112969: PUSH
112970: LD_INT 16
112972: PUSH
112973: LD_INT 20
112975: PUSH
112976: LD_INT 21
112978: PUSH
112979: LD_INT 22
112981: PUSH
112982: LD_INT 23
112984: PUSH
112985: LD_INT 25
112987: PUSH
112988: LD_INT 26
112990: PUSH
112991: EMPTY
112992: LIST
112993: LIST
112994: LIST
112995: LIST
112996: LIST
112997: LIST
112998: LIST
112999: LIST
113000: LIST
113001: LIST
113002: LIST
113003: LIST
113004: LIST
113005: LIST
113006: PUSH
113007: LD_INT 101
113009: PUSH
113010: LD_INT 102
113012: PUSH
113013: LD_INT 103
113015: PUSH
113016: LD_INT 105
113018: PUSH
113019: LD_INT 106
113021: PUSH
113022: LD_INT 108
113024: PUSH
113025: LD_INT 112
113027: PUSH
113028: LD_INT 116
113030: PUSH
113031: LD_INT 117
113033: PUSH
113034: LD_INT 118
113036: PUSH
113037: EMPTY
113038: LIST
113039: LIST
113040: LIST
113041: LIST
113042: LIST
113043: LIST
113044: LIST
113045: LIST
113046: LIST
113047: LIST
113048: PUSH
113049: EMPTY
113050: LIST
113051: LIST
113052: ST_TO_ADDR
113053: GO 115456
113055: LD_INT 8
113057: DOUBLE
113058: EQUAL
113059: IFTRUE 113063
113061: GO 113203
113063: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
113064: LD_ADDR_VAR 0 2
113068: PUSH
113069: LD_INT 2
113071: PUSH
113072: LD_INT 4
113074: PUSH
113075: LD_INT 5
113077: PUSH
113078: LD_INT 6
113080: PUSH
113081: LD_INT 7
113083: PUSH
113084: LD_INT 8
113086: PUSH
113087: LD_INT 11
113089: PUSH
113090: LD_INT 12
113092: PUSH
113093: LD_INT 15
113095: PUSH
113096: LD_INT 16
113098: PUSH
113099: LD_INT 20
113101: PUSH
113102: LD_INT 21
113104: PUSH
113105: LD_INT 22
113107: PUSH
113108: LD_INT 23
113110: PUSH
113111: LD_INT 25
113113: PUSH
113114: LD_INT 26
113116: PUSH
113117: LD_INT 30
113119: PUSH
113120: LD_INT 31
113122: PUSH
113123: LD_INT 32
113125: PUSH
113126: LD_INT 36
113128: PUSH
113129: EMPTY
113130: LIST
113131: LIST
113132: LIST
113133: LIST
113134: LIST
113135: LIST
113136: LIST
113137: LIST
113138: LIST
113139: LIST
113140: LIST
113141: LIST
113142: LIST
113143: LIST
113144: LIST
113145: LIST
113146: LIST
113147: LIST
113148: LIST
113149: LIST
113150: PUSH
113151: LD_INT 101
113153: PUSH
113154: LD_INT 102
113156: PUSH
113157: LD_INT 103
113159: PUSH
113160: LD_INT 105
113162: PUSH
113163: LD_INT 106
113165: PUSH
113166: LD_INT 108
113168: PUSH
113169: LD_INT 109
113171: PUSH
113172: LD_INT 112
113174: PUSH
113175: LD_INT 116
113177: PUSH
113178: LD_INT 117
113180: PUSH
113181: LD_INT 118
113183: PUSH
113184: EMPTY
113185: LIST
113186: LIST
113187: LIST
113188: LIST
113189: LIST
113190: LIST
113191: LIST
113192: LIST
113193: LIST
113194: LIST
113195: LIST
113196: PUSH
113197: EMPTY
113198: LIST
113199: LIST
113200: ST_TO_ADDR
113201: GO 115456
113203: LD_INT 9
113205: DOUBLE
113206: EQUAL
113207: IFTRUE 113211
113209: GO 113359
113211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
113212: LD_ADDR_VAR 0 2
113216: PUSH
113217: LD_INT 2
113219: PUSH
113220: LD_INT 4
113222: PUSH
113223: LD_INT 5
113225: PUSH
113226: LD_INT 6
113228: PUSH
113229: LD_INT 7
113231: PUSH
113232: LD_INT 8
113234: PUSH
113235: LD_INT 11
113237: PUSH
113238: LD_INT 12
113240: PUSH
113241: LD_INT 15
113243: PUSH
113244: LD_INT 16
113246: PUSH
113247: LD_INT 20
113249: PUSH
113250: LD_INT 21
113252: PUSH
113253: LD_INT 22
113255: PUSH
113256: LD_INT 23
113258: PUSH
113259: LD_INT 25
113261: PUSH
113262: LD_INT 26
113264: PUSH
113265: LD_INT 28
113267: PUSH
113268: LD_INT 30
113270: PUSH
113271: LD_INT 31
113273: PUSH
113274: LD_INT 32
113276: PUSH
113277: LD_INT 36
113279: PUSH
113280: EMPTY
113281: LIST
113282: LIST
113283: LIST
113284: LIST
113285: LIST
113286: LIST
113287: LIST
113288: LIST
113289: LIST
113290: LIST
113291: LIST
113292: LIST
113293: LIST
113294: LIST
113295: LIST
113296: LIST
113297: LIST
113298: LIST
113299: LIST
113300: LIST
113301: LIST
113302: PUSH
113303: LD_INT 101
113305: PUSH
113306: LD_INT 102
113308: PUSH
113309: LD_INT 103
113311: PUSH
113312: LD_INT 105
113314: PUSH
113315: LD_INT 106
113317: PUSH
113318: LD_INT 108
113320: PUSH
113321: LD_INT 109
113323: PUSH
113324: LD_INT 112
113326: PUSH
113327: LD_INT 114
113329: PUSH
113330: LD_INT 116
113332: PUSH
113333: LD_INT 117
113335: PUSH
113336: LD_INT 118
113338: PUSH
113339: EMPTY
113340: LIST
113341: LIST
113342: LIST
113343: LIST
113344: LIST
113345: LIST
113346: LIST
113347: LIST
113348: LIST
113349: LIST
113350: LIST
113351: LIST
113352: PUSH
113353: EMPTY
113354: LIST
113355: LIST
113356: ST_TO_ADDR
113357: GO 115456
113359: LD_INT 10
113361: DOUBLE
113362: EQUAL
113363: IFTRUE 113367
113365: GO 113563
113367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
113368: LD_ADDR_VAR 0 2
113372: PUSH
113373: LD_INT 2
113375: PUSH
113376: LD_INT 4
113378: PUSH
113379: LD_INT 5
113381: PUSH
113382: LD_INT 6
113384: PUSH
113385: LD_INT 7
113387: PUSH
113388: LD_INT 8
113390: PUSH
113391: LD_INT 9
113393: PUSH
113394: LD_INT 10
113396: PUSH
113397: LD_INT 11
113399: PUSH
113400: LD_INT 12
113402: PUSH
113403: LD_INT 13
113405: PUSH
113406: LD_INT 14
113408: PUSH
113409: LD_INT 15
113411: PUSH
113412: LD_INT 16
113414: PUSH
113415: LD_INT 17
113417: PUSH
113418: LD_INT 18
113420: PUSH
113421: LD_INT 19
113423: PUSH
113424: LD_INT 20
113426: PUSH
113427: LD_INT 21
113429: PUSH
113430: LD_INT 22
113432: PUSH
113433: LD_INT 23
113435: PUSH
113436: LD_INT 24
113438: PUSH
113439: LD_INT 25
113441: PUSH
113442: LD_INT 26
113444: PUSH
113445: LD_INT 28
113447: PUSH
113448: LD_INT 30
113450: PUSH
113451: LD_INT 31
113453: PUSH
113454: LD_INT 32
113456: PUSH
113457: LD_INT 36
113459: PUSH
113460: EMPTY
113461: LIST
113462: LIST
113463: LIST
113464: LIST
113465: LIST
113466: LIST
113467: LIST
113468: LIST
113469: LIST
113470: LIST
113471: LIST
113472: LIST
113473: LIST
113474: LIST
113475: LIST
113476: LIST
113477: LIST
113478: LIST
113479: LIST
113480: LIST
113481: LIST
113482: LIST
113483: LIST
113484: LIST
113485: LIST
113486: LIST
113487: LIST
113488: LIST
113489: LIST
113490: PUSH
113491: LD_INT 101
113493: PUSH
113494: LD_INT 102
113496: PUSH
113497: LD_INT 103
113499: PUSH
113500: LD_INT 104
113502: PUSH
113503: LD_INT 105
113505: PUSH
113506: LD_INT 106
113508: PUSH
113509: LD_INT 107
113511: PUSH
113512: LD_INT 108
113514: PUSH
113515: LD_INT 109
113517: PUSH
113518: LD_INT 110
113520: PUSH
113521: LD_INT 111
113523: PUSH
113524: LD_INT 112
113526: PUSH
113527: LD_INT 114
113529: PUSH
113530: LD_INT 116
113532: PUSH
113533: LD_INT 117
113535: PUSH
113536: LD_INT 118
113538: PUSH
113539: EMPTY
113540: LIST
113541: LIST
113542: LIST
113543: LIST
113544: LIST
113545: LIST
113546: LIST
113547: LIST
113548: LIST
113549: LIST
113550: LIST
113551: LIST
113552: LIST
113553: LIST
113554: LIST
113555: LIST
113556: PUSH
113557: EMPTY
113558: LIST
113559: LIST
113560: ST_TO_ADDR
113561: GO 115456
113563: LD_INT 11
113565: DOUBLE
113566: EQUAL
113567: IFTRUE 113571
113569: GO 113775
113571: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
113572: LD_ADDR_VAR 0 2
113576: PUSH
113577: LD_INT 2
113579: PUSH
113580: LD_INT 3
113582: PUSH
113583: LD_INT 4
113585: PUSH
113586: LD_INT 5
113588: PUSH
113589: LD_INT 6
113591: PUSH
113592: LD_INT 7
113594: PUSH
113595: LD_INT 8
113597: PUSH
113598: LD_INT 9
113600: PUSH
113601: LD_INT 10
113603: PUSH
113604: LD_INT 11
113606: PUSH
113607: LD_INT 12
113609: PUSH
113610: LD_INT 13
113612: PUSH
113613: LD_INT 14
113615: PUSH
113616: LD_INT 15
113618: PUSH
113619: LD_INT 16
113621: PUSH
113622: LD_INT 17
113624: PUSH
113625: LD_INT 18
113627: PUSH
113628: LD_INT 19
113630: PUSH
113631: LD_INT 20
113633: PUSH
113634: LD_INT 21
113636: PUSH
113637: LD_INT 22
113639: PUSH
113640: LD_INT 23
113642: PUSH
113643: LD_INT 24
113645: PUSH
113646: LD_INT 25
113648: PUSH
113649: LD_INT 26
113651: PUSH
113652: LD_INT 28
113654: PUSH
113655: LD_INT 30
113657: PUSH
113658: LD_INT 31
113660: PUSH
113661: LD_INT 32
113663: PUSH
113664: LD_INT 34
113666: PUSH
113667: LD_INT 36
113669: PUSH
113670: EMPTY
113671: LIST
113672: LIST
113673: LIST
113674: LIST
113675: LIST
113676: LIST
113677: LIST
113678: LIST
113679: LIST
113680: LIST
113681: LIST
113682: LIST
113683: LIST
113684: LIST
113685: LIST
113686: LIST
113687: LIST
113688: LIST
113689: LIST
113690: LIST
113691: LIST
113692: LIST
113693: LIST
113694: LIST
113695: LIST
113696: LIST
113697: LIST
113698: LIST
113699: LIST
113700: LIST
113701: LIST
113702: PUSH
113703: LD_INT 101
113705: PUSH
113706: LD_INT 102
113708: PUSH
113709: LD_INT 103
113711: PUSH
113712: LD_INT 104
113714: PUSH
113715: LD_INT 105
113717: PUSH
113718: LD_INT 106
113720: PUSH
113721: LD_INT 107
113723: PUSH
113724: LD_INT 108
113726: PUSH
113727: LD_INT 109
113729: PUSH
113730: LD_INT 110
113732: PUSH
113733: LD_INT 111
113735: PUSH
113736: LD_INT 112
113738: PUSH
113739: LD_INT 114
113741: PUSH
113742: LD_INT 116
113744: PUSH
113745: LD_INT 117
113747: PUSH
113748: LD_INT 118
113750: PUSH
113751: EMPTY
113752: LIST
113753: LIST
113754: LIST
113755: LIST
113756: LIST
113757: LIST
113758: LIST
113759: LIST
113760: LIST
113761: LIST
113762: LIST
113763: LIST
113764: LIST
113765: LIST
113766: LIST
113767: LIST
113768: PUSH
113769: EMPTY
113770: LIST
113771: LIST
113772: ST_TO_ADDR
113773: GO 115456
113775: LD_INT 12
113777: DOUBLE
113778: EQUAL
113779: IFTRUE 113783
113781: GO 114003
113783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
113784: LD_ADDR_VAR 0 2
113788: PUSH
113789: LD_INT 1
113791: PUSH
113792: LD_INT 2
113794: PUSH
113795: LD_INT 3
113797: PUSH
113798: LD_INT 4
113800: PUSH
113801: LD_INT 5
113803: PUSH
113804: LD_INT 6
113806: PUSH
113807: LD_INT 7
113809: PUSH
113810: LD_INT 8
113812: PUSH
113813: LD_INT 9
113815: PUSH
113816: LD_INT 10
113818: PUSH
113819: LD_INT 11
113821: PUSH
113822: LD_INT 12
113824: PUSH
113825: LD_INT 13
113827: PUSH
113828: LD_INT 14
113830: PUSH
113831: LD_INT 15
113833: PUSH
113834: LD_INT 16
113836: PUSH
113837: LD_INT 17
113839: PUSH
113840: LD_INT 18
113842: PUSH
113843: LD_INT 19
113845: PUSH
113846: LD_INT 20
113848: PUSH
113849: LD_INT 21
113851: PUSH
113852: LD_INT 22
113854: PUSH
113855: LD_INT 23
113857: PUSH
113858: LD_INT 24
113860: PUSH
113861: LD_INT 25
113863: PUSH
113864: LD_INT 26
113866: PUSH
113867: LD_INT 27
113869: PUSH
113870: LD_INT 28
113872: PUSH
113873: LD_INT 30
113875: PUSH
113876: LD_INT 31
113878: PUSH
113879: LD_INT 32
113881: PUSH
113882: LD_INT 33
113884: PUSH
113885: LD_INT 34
113887: PUSH
113888: LD_INT 36
113890: PUSH
113891: EMPTY
113892: LIST
113893: LIST
113894: LIST
113895: LIST
113896: LIST
113897: LIST
113898: LIST
113899: LIST
113900: LIST
113901: LIST
113902: LIST
113903: LIST
113904: LIST
113905: LIST
113906: LIST
113907: LIST
113908: LIST
113909: LIST
113910: LIST
113911: LIST
113912: LIST
113913: LIST
113914: LIST
113915: LIST
113916: LIST
113917: LIST
113918: LIST
113919: LIST
113920: LIST
113921: LIST
113922: LIST
113923: LIST
113924: LIST
113925: LIST
113926: PUSH
113927: LD_INT 101
113929: PUSH
113930: LD_INT 102
113932: PUSH
113933: LD_INT 103
113935: PUSH
113936: LD_INT 104
113938: PUSH
113939: LD_INT 105
113941: PUSH
113942: LD_INT 106
113944: PUSH
113945: LD_INT 107
113947: PUSH
113948: LD_INT 108
113950: PUSH
113951: LD_INT 109
113953: PUSH
113954: LD_INT 110
113956: PUSH
113957: LD_INT 111
113959: PUSH
113960: LD_INT 112
113962: PUSH
113963: LD_INT 113
113965: PUSH
113966: LD_INT 114
113968: PUSH
113969: LD_INT 116
113971: PUSH
113972: LD_INT 117
113974: PUSH
113975: LD_INT 118
113977: PUSH
113978: EMPTY
113979: LIST
113980: LIST
113981: LIST
113982: LIST
113983: LIST
113984: LIST
113985: LIST
113986: LIST
113987: LIST
113988: LIST
113989: LIST
113990: LIST
113991: LIST
113992: LIST
113993: LIST
113994: LIST
113995: LIST
113996: PUSH
113997: EMPTY
113998: LIST
113999: LIST
114000: ST_TO_ADDR
114001: GO 115456
114003: LD_INT 13
114005: DOUBLE
114006: EQUAL
114007: IFTRUE 114011
114009: GO 114219
114011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
114012: LD_ADDR_VAR 0 2
114016: PUSH
114017: LD_INT 1
114019: PUSH
114020: LD_INT 2
114022: PUSH
114023: LD_INT 3
114025: PUSH
114026: LD_INT 4
114028: PUSH
114029: LD_INT 5
114031: PUSH
114032: LD_INT 8
114034: PUSH
114035: LD_INT 9
114037: PUSH
114038: LD_INT 10
114040: PUSH
114041: LD_INT 11
114043: PUSH
114044: LD_INT 12
114046: PUSH
114047: LD_INT 14
114049: PUSH
114050: LD_INT 15
114052: PUSH
114053: LD_INT 16
114055: PUSH
114056: LD_INT 17
114058: PUSH
114059: LD_INT 18
114061: PUSH
114062: LD_INT 19
114064: PUSH
114065: LD_INT 20
114067: PUSH
114068: LD_INT 21
114070: PUSH
114071: LD_INT 22
114073: PUSH
114074: LD_INT 23
114076: PUSH
114077: LD_INT 24
114079: PUSH
114080: LD_INT 25
114082: PUSH
114083: LD_INT 26
114085: PUSH
114086: LD_INT 27
114088: PUSH
114089: LD_INT 28
114091: PUSH
114092: LD_INT 30
114094: PUSH
114095: LD_INT 31
114097: PUSH
114098: LD_INT 32
114100: PUSH
114101: LD_INT 33
114103: PUSH
114104: LD_INT 34
114106: PUSH
114107: LD_INT 36
114109: PUSH
114110: EMPTY
114111: LIST
114112: LIST
114113: LIST
114114: LIST
114115: LIST
114116: LIST
114117: LIST
114118: LIST
114119: LIST
114120: LIST
114121: LIST
114122: LIST
114123: LIST
114124: LIST
114125: LIST
114126: LIST
114127: LIST
114128: LIST
114129: LIST
114130: LIST
114131: LIST
114132: LIST
114133: LIST
114134: LIST
114135: LIST
114136: LIST
114137: LIST
114138: LIST
114139: LIST
114140: LIST
114141: LIST
114142: PUSH
114143: LD_INT 101
114145: PUSH
114146: LD_INT 102
114148: PUSH
114149: LD_INT 103
114151: PUSH
114152: LD_INT 104
114154: PUSH
114155: LD_INT 105
114157: PUSH
114158: LD_INT 106
114160: PUSH
114161: LD_INT 107
114163: PUSH
114164: LD_INT 108
114166: PUSH
114167: LD_INT 109
114169: PUSH
114170: LD_INT 110
114172: PUSH
114173: LD_INT 111
114175: PUSH
114176: LD_INT 112
114178: PUSH
114179: LD_INT 113
114181: PUSH
114182: LD_INT 114
114184: PUSH
114185: LD_INT 116
114187: PUSH
114188: LD_INT 117
114190: PUSH
114191: LD_INT 118
114193: PUSH
114194: EMPTY
114195: LIST
114196: LIST
114197: LIST
114198: LIST
114199: LIST
114200: LIST
114201: LIST
114202: LIST
114203: LIST
114204: LIST
114205: LIST
114206: LIST
114207: LIST
114208: LIST
114209: LIST
114210: LIST
114211: LIST
114212: PUSH
114213: EMPTY
114214: LIST
114215: LIST
114216: ST_TO_ADDR
114217: GO 115456
114219: LD_INT 14
114221: DOUBLE
114222: EQUAL
114223: IFTRUE 114227
114225: GO 114451
114227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
114228: LD_ADDR_VAR 0 2
114232: PUSH
114233: LD_INT 1
114235: PUSH
114236: LD_INT 2
114238: PUSH
114239: LD_INT 3
114241: PUSH
114242: LD_INT 4
114244: PUSH
114245: LD_INT 5
114247: PUSH
114248: LD_INT 6
114250: PUSH
114251: LD_INT 7
114253: PUSH
114254: LD_INT 8
114256: PUSH
114257: LD_INT 9
114259: PUSH
114260: LD_INT 10
114262: PUSH
114263: LD_INT 11
114265: PUSH
114266: LD_INT 12
114268: PUSH
114269: LD_INT 13
114271: PUSH
114272: LD_INT 14
114274: PUSH
114275: LD_INT 15
114277: PUSH
114278: LD_INT 16
114280: PUSH
114281: LD_INT 17
114283: PUSH
114284: LD_INT 18
114286: PUSH
114287: LD_INT 19
114289: PUSH
114290: LD_INT 20
114292: PUSH
114293: LD_INT 21
114295: PUSH
114296: LD_INT 22
114298: PUSH
114299: LD_INT 23
114301: PUSH
114302: LD_INT 24
114304: PUSH
114305: LD_INT 25
114307: PUSH
114308: LD_INT 26
114310: PUSH
114311: LD_INT 27
114313: PUSH
114314: LD_INT 28
114316: PUSH
114317: LD_INT 29
114319: PUSH
114320: LD_INT 30
114322: PUSH
114323: LD_INT 31
114325: PUSH
114326: LD_INT 32
114328: PUSH
114329: LD_INT 33
114331: PUSH
114332: LD_INT 34
114334: PUSH
114335: LD_INT 36
114337: PUSH
114338: EMPTY
114339: LIST
114340: LIST
114341: LIST
114342: LIST
114343: LIST
114344: LIST
114345: LIST
114346: LIST
114347: LIST
114348: LIST
114349: LIST
114350: LIST
114351: LIST
114352: LIST
114353: LIST
114354: LIST
114355: LIST
114356: LIST
114357: LIST
114358: LIST
114359: LIST
114360: LIST
114361: LIST
114362: LIST
114363: LIST
114364: LIST
114365: LIST
114366: LIST
114367: LIST
114368: LIST
114369: LIST
114370: LIST
114371: LIST
114372: LIST
114373: LIST
114374: PUSH
114375: LD_INT 101
114377: PUSH
114378: LD_INT 102
114380: PUSH
114381: LD_INT 103
114383: PUSH
114384: LD_INT 104
114386: PUSH
114387: LD_INT 105
114389: PUSH
114390: LD_INT 106
114392: PUSH
114393: LD_INT 107
114395: PUSH
114396: LD_INT 108
114398: PUSH
114399: LD_INT 109
114401: PUSH
114402: LD_INT 110
114404: PUSH
114405: LD_INT 111
114407: PUSH
114408: LD_INT 112
114410: PUSH
114411: LD_INT 113
114413: PUSH
114414: LD_INT 114
114416: PUSH
114417: LD_INT 116
114419: PUSH
114420: LD_INT 117
114422: PUSH
114423: LD_INT 118
114425: PUSH
114426: EMPTY
114427: LIST
114428: LIST
114429: LIST
114430: LIST
114431: LIST
114432: LIST
114433: LIST
114434: LIST
114435: LIST
114436: LIST
114437: LIST
114438: LIST
114439: LIST
114440: LIST
114441: LIST
114442: LIST
114443: LIST
114444: PUSH
114445: EMPTY
114446: LIST
114447: LIST
114448: ST_TO_ADDR
114449: GO 115456
114451: LD_INT 15
114453: DOUBLE
114454: EQUAL
114455: IFTRUE 114459
114457: GO 114683
114459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
114460: LD_ADDR_VAR 0 2
114464: PUSH
114465: LD_INT 1
114467: PUSH
114468: LD_INT 2
114470: PUSH
114471: LD_INT 3
114473: PUSH
114474: LD_INT 4
114476: PUSH
114477: LD_INT 5
114479: PUSH
114480: LD_INT 6
114482: PUSH
114483: LD_INT 7
114485: PUSH
114486: LD_INT 8
114488: PUSH
114489: LD_INT 9
114491: PUSH
114492: LD_INT 10
114494: PUSH
114495: LD_INT 11
114497: PUSH
114498: LD_INT 12
114500: PUSH
114501: LD_INT 13
114503: PUSH
114504: LD_INT 14
114506: PUSH
114507: LD_INT 15
114509: PUSH
114510: LD_INT 16
114512: PUSH
114513: LD_INT 17
114515: PUSH
114516: LD_INT 18
114518: PUSH
114519: LD_INT 19
114521: PUSH
114522: LD_INT 20
114524: PUSH
114525: LD_INT 21
114527: PUSH
114528: LD_INT 22
114530: PUSH
114531: LD_INT 23
114533: PUSH
114534: LD_INT 24
114536: PUSH
114537: LD_INT 25
114539: PUSH
114540: LD_INT 26
114542: PUSH
114543: LD_INT 27
114545: PUSH
114546: LD_INT 28
114548: PUSH
114549: LD_INT 29
114551: PUSH
114552: LD_INT 30
114554: PUSH
114555: LD_INT 31
114557: PUSH
114558: LD_INT 32
114560: PUSH
114561: LD_INT 33
114563: PUSH
114564: LD_INT 34
114566: PUSH
114567: LD_INT 36
114569: PUSH
114570: EMPTY
114571: LIST
114572: LIST
114573: LIST
114574: LIST
114575: LIST
114576: LIST
114577: LIST
114578: LIST
114579: LIST
114580: LIST
114581: LIST
114582: LIST
114583: LIST
114584: LIST
114585: LIST
114586: LIST
114587: LIST
114588: LIST
114589: LIST
114590: LIST
114591: LIST
114592: LIST
114593: LIST
114594: LIST
114595: LIST
114596: LIST
114597: LIST
114598: LIST
114599: LIST
114600: LIST
114601: LIST
114602: LIST
114603: LIST
114604: LIST
114605: LIST
114606: PUSH
114607: LD_INT 101
114609: PUSH
114610: LD_INT 102
114612: PUSH
114613: LD_INT 103
114615: PUSH
114616: LD_INT 104
114618: PUSH
114619: LD_INT 105
114621: PUSH
114622: LD_INT 106
114624: PUSH
114625: LD_INT 107
114627: PUSH
114628: LD_INT 108
114630: PUSH
114631: LD_INT 109
114633: PUSH
114634: LD_INT 110
114636: PUSH
114637: LD_INT 111
114639: PUSH
114640: LD_INT 112
114642: PUSH
114643: LD_INT 113
114645: PUSH
114646: LD_INT 114
114648: PUSH
114649: LD_INT 116
114651: PUSH
114652: LD_INT 117
114654: PUSH
114655: LD_INT 118
114657: PUSH
114658: EMPTY
114659: LIST
114660: LIST
114661: LIST
114662: LIST
114663: LIST
114664: LIST
114665: LIST
114666: LIST
114667: LIST
114668: LIST
114669: LIST
114670: LIST
114671: LIST
114672: LIST
114673: LIST
114674: LIST
114675: LIST
114676: PUSH
114677: EMPTY
114678: LIST
114679: LIST
114680: ST_TO_ADDR
114681: GO 115456
114683: LD_INT 16
114685: DOUBLE
114686: EQUAL
114687: IFTRUE 114691
114689: GO 114827
114691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
114692: LD_ADDR_VAR 0 2
114696: PUSH
114697: LD_INT 2
114699: PUSH
114700: LD_INT 4
114702: PUSH
114703: LD_INT 5
114705: PUSH
114706: LD_INT 7
114708: PUSH
114709: LD_INT 11
114711: PUSH
114712: LD_INT 12
114714: PUSH
114715: LD_INT 15
114717: PUSH
114718: LD_INT 16
114720: PUSH
114721: LD_INT 20
114723: PUSH
114724: LD_INT 21
114726: PUSH
114727: LD_INT 22
114729: PUSH
114730: LD_INT 23
114732: PUSH
114733: LD_INT 25
114735: PUSH
114736: LD_INT 26
114738: PUSH
114739: LD_INT 30
114741: PUSH
114742: LD_INT 31
114744: PUSH
114745: LD_INT 32
114747: PUSH
114748: LD_INT 33
114750: PUSH
114751: LD_INT 34
114753: PUSH
114754: EMPTY
114755: LIST
114756: LIST
114757: LIST
114758: LIST
114759: LIST
114760: LIST
114761: LIST
114762: LIST
114763: LIST
114764: LIST
114765: LIST
114766: LIST
114767: LIST
114768: LIST
114769: LIST
114770: LIST
114771: LIST
114772: LIST
114773: LIST
114774: PUSH
114775: LD_INT 101
114777: PUSH
114778: LD_INT 102
114780: PUSH
114781: LD_INT 103
114783: PUSH
114784: LD_INT 106
114786: PUSH
114787: LD_INT 108
114789: PUSH
114790: LD_INT 112
114792: PUSH
114793: LD_INT 113
114795: PUSH
114796: LD_INT 114
114798: PUSH
114799: LD_INT 116
114801: PUSH
114802: LD_INT 117
114804: PUSH
114805: LD_INT 118
114807: PUSH
114808: EMPTY
114809: LIST
114810: LIST
114811: LIST
114812: LIST
114813: LIST
114814: LIST
114815: LIST
114816: LIST
114817: LIST
114818: LIST
114819: LIST
114820: PUSH
114821: EMPTY
114822: LIST
114823: LIST
114824: ST_TO_ADDR
114825: GO 115456
114827: LD_INT 17
114829: DOUBLE
114830: EQUAL
114831: IFTRUE 114835
114833: GO 115059
114835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
114836: LD_ADDR_VAR 0 2
114840: PUSH
114841: LD_INT 1
114843: PUSH
114844: LD_INT 2
114846: PUSH
114847: LD_INT 3
114849: PUSH
114850: LD_INT 4
114852: PUSH
114853: LD_INT 5
114855: PUSH
114856: LD_INT 6
114858: PUSH
114859: LD_INT 7
114861: PUSH
114862: LD_INT 8
114864: PUSH
114865: LD_INT 9
114867: PUSH
114868: LD_INT 10
114870: PUSH
114871: LD_INT 11
114873: PUSH
114874: LD_INT 12
114876: PUSH
114877: LD_INT 13
114879: PUSH
114880: LD_INT 14
114882: PUSH
114883: LD_INT 15
114885: PUSH
114886: LD_INT 16
114888: PUSH
114889: LD_INT 17
114891: PUSH
114892: LD_INT 18
114894: PUSH
114895: LD_INT 19
114897: PUSH
114898: LD_INT 20
114900: PUSH
114901: LD_INT 21
114903: PUSH
114904: LD_INT 22
114906: PUSH
114907: LD_INT 23
114909: PUSH
114910: LD_INT 24
114912: PUSH
114913: LD_INT 25
114915: PUSH
114916: LD_INT 26
114918: PUSH
114919: LD_INT 27
114921: PUSH
114922: LD_INT 28
114924: PUSH
114925: LD_INT 29
114927: PUSH
114928: LD_INT 30
114930: PUSH
114931: LD_INT 31
114933: PUSH
114934: LD_INT 32
114936: PUSH
114937: LD_INT 33
114939: PUSH
114940: LD_INT 34
114942: PUSH
114943: LD_INT 36
114945: PUSH
114946: EMPTY
114947: LIST
114948: LIST
114949: LIST
114950: LIST
114951: LIST
114952: LIST
114953: LIST
114954: LIST
114955: LIST
114956: LIST
114957: LIST
114958: LIST
114959: LIST
114960: LIST
114961: LIST
114962: LIST
114963: LIST
114964: LIST
114965: LIST
114966: LIST
114967: LIST
114968: LIST
114969: LIST
114970: LIST
114971: LIST
114972: LIST
114973: LIST
114974: LIST
114975: LIST
114976: LIST
114977: LIST
114978: LIST
114979: LIST
114980: LIST
114981: LIST
114982: PUSH
114983: LD_INT 101
114985: PUSH
114986: LD_INT 102
114988: PUSH
114989: LD_INT 103
114991: PUSH
114992: LD_INT 104
114994: PUSH
114995: LD_INT 105
114997: PUSH
114998: LD_INT 106
115000: PUSH
115001: LD_INT 107
115003: PUSH
115004: LD_INT 108
115006: PUSH
115007: LD_INT 109
115009: PUSH
115010: LD_INT 110
115012: PUSH
115013: LD_INT 111
115015: PUSH
115016: LD_INT 112
115018: PUSH
115019: LD_INT 113
115021: PUSH
115022: LD_INT 114
115024: PUSH
115025: LD_INT 116
115027: PUSH
115028: LD_INT 117
115030: PUSH
115031: LD_INT 118
115033: PUSH
115034: EMPTY
115035: LIST
115036: LIST
115037: LIST
115038: LIST
115039: LIST
115040: LIST
115041: LIST
115042: LIST
115043: LIST
115044: LIST
115045: LIST
115046: LIST
115047: LIST
115048: LIST
115049: LIST
115050: LIST
115051: LIST
115052: PUSH
115053: EMPTY
115054: LIST
115055: LIST
115056: ST_TO_ADDR
115057: GO 115456
115059: LD_INT 18
115061: DOUBLE
115062: EQUAL
115063: IFTRUE 115067
115065: GO 115215
115067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
115068: LD_ADDR_VAR 0 2
115072: PUSH
115073: LD_INT 2
115075: PUSH
115076: LD_INT 4
115078: PUSH
115079: LD_INT 5
115081: PUSH
115082: LD_INT 7
115084: PUSH
115085: LD_INT 11
115087: PUSH
115088: LD_INT 12
115090: PUSH
115091: LD_INT 15
115093: PUSH
115094: LD_INT 16
115096: PUSH
115097: LD_INT 20
115099: PUSH
115100: LD_INT 21
115102: PUSH
115103: LD_INT 22
115105: PUSH
115106: LD_INT 23
115108: PUSH
115109: LD_INT 25
115111: PUSH
115112: LD_INT 26
115114: PUSH
115115: LD_INT 30
115117: PUSH
115118: LD_INT 31
115120: PUSH
115121: LD_INT 32
115123: PUSH
115124: LD_INT 33
115126: PUSH
115127: LD_INT 34
115129: PUSH
115130: LD_INT 35
115132: PUSH
115133: LD_INT 36
115135: PUSH
115136: EMPTY
115137: LIST
115138: LIST
115139: LIST
115140: LIST
115141: LIST
115142: LIST
115143: LIST
115144: LIST
115145: LIST
115146: LIST
115147: LIST
115148: LIST
115149: LIST
115150: LIST
115151: LIST
115152: LIST
115153: LIST
115154: LIST
115155: LIST
115156: LIST
115157: LIST
115158: PUSH
115159: LD_INT 101
115161: PUSH
115162: LD_INT 102
115164: PUSH
115165: LD_INT 103
115167: PUSH
115168: LD_INT 106
115170: PUSH
115171: LD_INT 108
115173: PUSH
115174: LD_INT 112
115176: PUSH
115177: LD_INT 113
115179: PUSH
115180: LD_INT 114
115182: PUSH
115183: LD_INT 115
115185: PUSH
115186: LD_INT 116
115188: PUSH
115189: LD_INT 117
115191: PUSH
115192: LD_INT 118
115194: PUSH
115195: EMPTY
115196: LIST
115197: LIST
115198: LIST
115199: LIST
115200: LIST
115201: LIST
115202: LIST
115203: LIST
115204: LIST
115205: LIST
115206: LIST
115207: LIST
115208: PUSH
115209: EMPTY
115210: LIST
115211: LIST
115212: ST_TO_ADDR
115213: GO 115456
115215: LD_INT 19
115217: DOUBLE
115218: EQUAL
115219: IFTRUE 115223
115221: GO 115455
115223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
115224: LD_ADDR_VAR 0 2
115228: PUSH
115229: LD_INT 1
115231: PUSH
115232: LD_INT 2
115234: PUSH
115235: LD_INT 3
115237: PUSH
115238: LD_INT 4
115240: PUSH
115241: LD_INT 5
115243: PUSH
115244: LD_INT 6
115246: PUSH
115247: LD_INT 7
115249: PUSH
115250: LD_INT 8
115252: PUSH
115253: LD_INT 9
115255: PUSH
115256: LD_INT 10
115258: PUSH
115259: LD_INT 11
115261: PUSH
115262: LD_INT 12
115264: PUSH
115265: LD_INT 13
115267: PUSH
115268: LD_INT 14
115270: PUSH
115271: LD_INT 15
115273: PUSH
115274: LD_INT 16
115276: PUSH
115277: LD_INT 17
115279: PUSH
115280: LD_INT 18
115282: PUSH
115283: LD_INT 19
115285: PUSH
115286: LD_INT 20
115288: PUSH
115289: LD_INT 21
115291: PUSH
115292: LD_INT 22
115294: PUSH
115295: LD_INT 23
115297: PUSH
115298: LD_INT 24
115300: PUSH
115301: LD_INT 25
115303: PUSH
115304: LD_INT 26
115306: PUSH
115307: LD_INT 27
115309: PUSH
115310: LD_INT 28
115312: PUSH
115313: LD_INT 29
115315: PUSH
115316: LD_INT 30
115318: PUSH
115319: LD_INT 31
115321: PUSH
115322: LD_INT 32
115324: PUSH
115325: LD_INT 33
115327: PUSH
115328: LD_INT 34
115330: PUSH
115331: LD_INT 35
115333: PUSH
115334: LD_INT 36
115336: PUSH
115337: EMPTY
115338: LIST
115339: LIST
115340: LIST
115341: LIST
115342: LIST
115343: LIST
115344: LIST
115345: LIST
115346: LIST
115347: LIST
115348: LIST
115349: LIST
115350: LIST
115351: LIST
115352: LIST
115353: LIST
115354: LIST
115355: LIST
115356: LIST
115357: LIST
115358: LIST
115359: LIST
115360: LIST
115361: LIST
115362: LIST
115363: LIST
115364: LIST
115365: LIST
115366: LIST
115367: LIST
115368: LIST
115369: LIST
115370: LIST
115371: LIST
115372: LIST
115373: LIST
115374: PUSH
115375: LD_INT 101
115377: PUSH
115378: LD_INT 102
115380: PUSH
115381: LD_INT 103
115383: PUSH
115384: LD_INT 104
115386: PUSH
115387: LD_INT 105
115389: PUSH
115390: LD_INT 106
115392: PUSH
115393: LD_INT 107
115395: PUSH
115396: LD_INT 108
115398: PUSH
115399: LD_INT 109
115401: PUSH
115402: LD_INT 110
115404: PUSH
115405: LD_INT 111
115407: PUSH
115408: LD_INT 112
115410: PUSH
115411: LD_INT 113
115413: PUSH
115414: LD_INT 114
115416: PUSH
115417: LD_INT 115
115419: PUSH
115420: LD_INT 116
115422: PUSH
115423: LD_INT 117
115425: PUSH
115426: LD_INT 118
115428: PUSH
115429: EMPTY
115430: LIST
115431: LIST
115432: LIST
115433: LIST
115434: LIST
115435: LIST
115436: LIST
115437: LIST
115438: LIST
115439: LIST
115440: LIST
115441: LIST
115442: LIST
115443: LIST
115444: LIST
115445: LIST
115446: LIST
115447: LIST
115448: PUSH
115449: EMPTY
115450: LIST
115451: LIST
115452: ST_TO_ADDR
115453: GO 115456
115455: POP
// end else
115456: GO 115687
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
115458: LD_ADDR_VAR 0 2
115462: PUSH
115463: LD_INT 1
115465: PUSH
115466: LD_INT 2
115468: PUSH
115469: LD_INT 3
115471: PUSH
115472: LD_INT 4
115474: PUSH
115475: LD_INT 5
115477: PUSH
115478: LD_INT 6
115480: PUSH
115481: LD_INT 7
115483: PUSH
115484: LD_INT 8
115486: PUSH
115487: LD_INT 9
115489: PUSH
115490: LD_INT 10
115492: PUSH
115493: LD_INT 11
115495: PUSH
115496: LD_INT 12
115498: PUSH
115499: LD_INT 13
115501: PUSH
115502: LD_INT 14
115504: PUSH
115505: LD_INT 15
115507: PUSH
115508: LD_INT 16
115510: PUSH
115511: LD_INT 17
115513: PUSH
115514: LD_INT 18
115516: PUSH
115517: LD_INT 19
115519: PUSH
115520: LD_INT 20
115522: PUSH
115523: LD_INT 21
115525: PUSH
115526: LD_INT 22
115528: PUSH
115529: LD_INT 23
115531: PUSH
115532: LD_INT 24
115534: PUSH
115535: LD_INT 25
115537: PUSH
115538: LD_INT 26
115540: PUSH
115541: LD_INT 27
115543: PUSH
115544: LD_INT 28
115546: PUSH
115547: LD_INT 29
115549: PUSH
115550: LD_INT 30
115552: PUSH
115553: LD_INT 31
115555: PUSH
115556: LD_INT 32
115558: PUSH
115559: LD_INT 33
115561: PUSH
115562: LD_INT 34
115564: PUSH
115565: LD_INT 35
115567: PUSH
115568: LD_INT 36
115570: PUSH
115571: EMPTY
115572: LIST
115573: LIST
115574: LIST
115575: LIST
115576: LIST
115577: LIST
115578: LIST
115579: LIST
115580: LIST
115581: LIST
115582: LIST
115583: LIST
115584: LIST
115585: LIST
115586: LIST
115587: LIST
115588: LIST
115589: LIST
115590: LIST
115591: LIST
115592: LIST
115593: LIST
115594: LIST
115595: LIST
115596: LIST
115597: LIST
115598: LIST
115599: LIST
115600: LIST
115601: LIST
115602: LIST
115603: LIST
115604: LIST
115605: LIST
115606: LIST
115607: LIST
115608: PUSH
115609: LD_INT 101
115611: PUSH
115612: LD_INT 102
115614: PUSH
115615: LD_INT 103
115617: PUSH
115618: LD_INT 104
115620: PUSH
115621: LD_INT 105
115623: PUSH
115624: LD_INT 106
115626: PUSH
115627: LD_INT 107
115629: PUSH
115630: LD_INT 108
115632: PUSH
115633: LD_INT 109
115635: PUSH
115636: LD_INT 110
115638: PUSH
115639: LD_INT 111
115641: PUSH
115642: LD_INT 112
115644: PUSH
115645: LD_INT 113
115647: PUSH
115648: LD_INT 114
115650: PUSH
115651: LD_INT 115
115653: PUSH
115654: LD_INT 116
115656: PUSH
115657: LD_INT 117
115659: PUSH
115660: LD_INT 118
115662: PUSH
115663: EMPTY
115664: LIST
115665: LIST
115666: LIST
115667: LIST
115668: LIST
115669: LIST
115670: LIST
115671: LIST
115672: LIST
115673: LIST
115674: LIST
115675: LIST
115676: LIST
115677: LIST
115678: LIST
115679: LIST
115680: LIST
115681: LIST
115682: PUSH
115683: EMPTY
115684: LIST
115685: LIST
115686: ST_TO_ADDR
// if result then
115687: LD_VAR 0 2
115691: IFFALSE 116477
// begin normal :=  ;
115693: LD_ADDR_VAR 0 5
115697: PUSH
115698: LD_STRING 
115700: ST_TO_ADDR
// hardcore :=  ;
115701: LD_ADDR_VAR 0 6
115705: PUSH
115706: LD_STRING 
115708: ST_TO_ADDR
// active :=  ;
115709: LD_ADDR_VAR 0 7
115713: PUSH
115714: LD_STRING 
115716: ST_TO_ADDR
// for i = 1 to normalCounter do
115717: LD_ADDR_VAR 0 8
115721: PUSH
115722: DOUBLE
115723: LD_INT 1
115725: DEC
115726: ST_TO_ADDR
115727: LD_EXP 148
115731: PUSH
115732: FOR_TO
115733: IFFALSE 115834
// begin tmp := 0 ;
115735: LD_ADDR_VAR 0 3
115739: PUSH
115740: LD_STRING 0
115742: ST_TO_ADDR
// if result [ 1 ] then
115743: LD_VAR 0 2
115747: PUSH
115748: LD_INT 1
115750: ARRAY
115751: IFFALSE 115816
// if result [ 1 ] [ 1 ] = i then
115753: LD_VAR 0 2
115757: PUSH
115758: LD_INT 1
115760: ARRAY
115761: PUSH
115762: LD_INT 1
115764: ARRAY
115765: PUSH
115766: LD_VAR 0 8
115770: EQUAL
115771: IFFALSE 115816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
115773: LD_ADDR_VAR 0 2
115777: PUSH
115778: LD_VAR 0 2
115782: PPUSH
115783: LD_INT 1
115785: PPUSH
115786: LD_VAR 0 2
115790: PUSH
115791: LD_INT 1
115793: ARRAY
115794: PPUSH
115795: LD_INT 1
115797: PPUSH
115798: CALL_OW 3
115802: PPUSH
115803: CALL_OW 1
115807: ST_TO_ADDR
// tmp := 1 ;
115808: LD_ADDR_VAR 0 3
115812: PUSH
115813: LD_STRING 1
115815: ST_TO_ADDR
// end ; normal := normal & tmp ;
115816: LD_ADDR_VAR 0 5
115820: PUSH
115821: LD_VAR 0 5
115825: PUSH
115826: LD_VAR 0 3
115830: STR
115831: ST_TO_ADDR
// end ;
115832: GO 115732
115834: POP
115835: POP
// for i = 1 to hardcoreCounter do
115836: LD_ADDR_VAR 0 8
115840: PUSH
115841: DOUBLE
115842: LD_INT 1
115844: DEC
115845: ST_TO_ADDR
115846: LD_EXP 149
115850: PUSH
115851: FOR_TO
115852: IFFALSE 115957
// begin tmp := 0 ;
115854: LD_ADDR_VAR 0 3
115858: PUSH
115859: LD_STRING 0
115861: ST_TO_ADDR
// if result [ 2 ] then
115862: LD_VAR 0 2
115866: PUSH
115867: LD_INT 2
115869: ARRAY
115870: IFFALSE 115939
// if result [ 2 ] [ 1 ] = 100 + i then
115872: LD_VAR 0 2
115876: PUSH
115877: LD_INT 2
115879: ARRAY
115880: PUSH
115881: LD_INT 1
115883: ARRAY
115884: PUSH
115885: LD_INT 100
115887: PUSH
115888: LD_VAR 0 8
115892: PLUS
115893: EQUAL
115894: IFFALSE 115939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
115896: LD_ADDR_VAR 0 2
115900: PUSH
115901: LD_VAR 0 2
115905: PPUSH
115906: LD_INT 2
115908: PPUSH
115909: LD_VAR 0 2
115913: PUSH
115914: LD_INT 2
115916: ARRAY
115917: PPUSH
115918: LD_INT 1
115920: PPUSH
115921: CALL_OW 3
115925: PPUSH
115926: CALL_OW 1
115930: ST_TO_ADDR
// tmp := 1 ;
115931: LD_ADDR_VAR 0 3
115935: PUSH
115936: LD_STRING 1
115938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
115939: LD_ADDR_VAR 0 6
115943: PUSH
115944: LD_VAR 0 6
115948: PUSH
115949: LD_VAR 0 3
115953: STR
115954: ST_TO_ADDR
// end ;
115955: GO 115851
115957: POP
115958: POP
// if isGameLoad then
115959: LD_VAR 0 1
115963: IFFALSE 116438
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
115965: LD_ADDR_VAR 0 4
115969: PUSH
115970: LD_EXP 152
115974: PUSH
115975: LD_EXP 151
115979: PUSH
115980: LD_EXP 153
115984: PUSH
115985: LD_EXP 150
115989: PUSH
115990: LD_EXP 154
115994: PUSH
115995: LD_EXP 155
115999: PUSH
116000: LD_EXP 156
116004: PUSH
116005: LD_EXP 157
116009: PUSH
116010: LD_EXP 158
116014: PUSH
116015: LD_EXP 159
116019: PUSH
116020: LD_EXP 160
116024: PUSH
116025: LD_EXP 161
116029: PUSH
116030: LD_EXP 162
116034: PUSH
116035: LD_EXP 163
116039: PUSH
116040: LD_EXP 171
116044: PUSH
116045: LD_EXP 172
116049: PUSH
116050: LD_EXP 173
116054: PUSH
116055: LD_EXP 174
116059: PUSH
116060: LD_EXP 176
116064: PUSH
116065: LD_EXP 177
116069: PUSH
116070: LD_EXP 178
116074: PUSH
116075: LD_EXP 181
116079: PUSH
116080: LD_EXP 183
116084: PUSH
116085: LD_EXP 184
116089: PUSH
116090: LD_EXP 185
116094: PUSH
116095: LD_EXP 187
116099: PUSH
116100: LD_EXP 188
116104: PUSH
116105: LD_EXP 191
116109: PUSH
116110: LD_EXP 192
116114: PUSH
116115: LD_EXP 193
116119: PUSH
116120: LD_EXP 194
116124: PUSH
116125: LD_EXP 195
116129: PUSH
116130: LD_EXP 196
116134: PUSH
116135: LD_EXP 197
116139: PUSH
116140: LD_EXP 198
116144: PUSH
116145: LD_EXP 199
116149: PUSH
116150: LD_EXP 164
116154: PUSH
116155: LD_EXP 165
116159: PUSH
116160: LD_EXP 168
116164: PUSH
116165: LD_EXP 169
116169: PUSH
116170: LD_EXP 170
116174: PUSH
116175: LD_EXP 166
116179: PUSH
116180: LD_EXP 167
116184: PUSH
116185: LD_EXP 175
116189: PUSH
116190: LD_EXP 179
116194: PUSH
116195: LD_EXP 180
116199: PUSH
116200: LD_EXP 182
116204: PUSH
116205: LD_EXP 186
116209: PUSH
116210: LD_EXP 189
116214: PUSH
116215: LD_EXP 190
116219: PUSH
116220: LD_EXP 200
116224: PUSH
116225: LD_EXP 201
116229: PUSH
116230: LD_EXP 202
116234: PUSH
116235: LD_EXP 203
116239: PUSH
116240: EMPTY
116241: LIST
116242: LIST
116243: LIST
116244: LIST
116245: LIST
116246: LIST
116247: LIST
116248: LIST
116249: LIST
116250: LIST
116251: LIST
116252: LIST
116253: LIST
116254: LIST
116255: LIST
116256: LIST
116257: LIST
116258: LIST
116259: LIST
116260: LIST
116261: LIST
116262: LIST
116263: LIST
116264: LIST
116265: LIST
116266: LIST
116267: LIST
116268: LIST
116269: LIST
116270: LIST
116271: LIST
116272: LIST
116273: LIST
116274: LIST
116275: LIST
116276: LIST
116277: LIST
116278: LIST
116279: LIST
116280: LIST
116281: LIST
116282: LIST
116283: LIST
116284: LIST
116285: LIST
116286: LIST
116287: LIST
116288: LIST
116289: LIST
116290: LIST
116291: LIST
116292: LIST
116293: LIST
116294: LIST
116295: ST_TO_ADDR
// tmp :=  ;
116296: LD_ADDR_VAR 0 3
116300: PUSH
116301: LD_STRING 
116303: ST_TO_ADDR
// for i = 1 to normalCounter do
116304: LD_ADDR_VAR 0 8
116308: PUSH
116309: DOUBLE
116310: LD_INT 1
116312: DEC
116313: ST_TO_ADDR
116314: LD_EXP 148
116318: PUSH
116319: FOR_TO
116320: IFFALSE 116356
// begin if flags [ i ] then
116322: LD_VAR 0 4
116326: PUSH
116327: LD_VAR 0 8
116331: ARRAY
116332: IFFALSE 116354
// tmp := tmp & i & ; ;
116334: LD_ADDR_VAR 0 3
116338: PUSH
116339: LD_VAR 0 3
116343: PUSH
116344: LD_VAR 0 8
116348: STR
116349: PUSH
116350: LD_STRING ;
116352: STR
116353: ST_TO_ADDR
// end ;
116354: GO 116319
116356: POP
116357: POP
// for i = 1 to hardcoreCounter do
116358: LD_ADDR_VAR 0 8
116362: PUSH
116363: DOUBLE
116364: LD_INT 1
116366: DEC
116367: ST_TO_ADDR
116368: LD_EXP 149
116372: PUSH
116373: FOR_TO
116374: IFFALSE 116420
// begin if flags [ normalCounter + i ] then
116376: LD_VAR 0 4
116380: PUSH
116381: LD_EXP 148
116385: PUSH
116386: LD_VAR 0 8
116390: PLUS
116391: ARRAY
116392: IFFALSE 116418
// tmp := tmp & ( 100 + i ) & ; ;
116394: LD_ADDR_VAR 0 3
116398: PUSH
116399: LD_VAR 0 3
116403: PUSH
116404: LD_INT 100
116406: PUSH
116407: LD_VAR 0 8
116411: PLUS
116412: STR
116413: PUSH
116414: LD_STRING ;
116416: STR
116417: ST_TO_ADDR
// end ;
116418: GO 116373
116420: POP
116421: POP
// if tmp then
116422: LD_VAR 0 3
116426: IFFALSE 116438
// active := tmp ;
116428: LD_ADDR_VAR 0 7
116432: PUSH
116433: LD_VAR 0 3
116437: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
116438: LD_STRING getStreamItemsFromMission("
116440: PUSH
116441: LD_VAR 0 5
116445: STR
116446: PUSH
116447: LD_STRING ","
116449: STR
116450: PUSH
116451: LD_VAR 0 6
116455: STR
116456: PUSH
116457: LD_STRING ","
116459: STR
116460: PUSH
116461: LD_VAR 0 7
116465: STR
116466: PUSH
116467: LD_STRING ")
116469: STR
116470: PPUSH
116471: CALL_OW 559
// end else
116475: GO 116484
// ToLua ( getStreamItemsFromMission("","","") ) ;
116477: LD_STRING getStreamItemsFromMission("","","")
116479: PPUSH
116480: CALL_OW 559
// end ;
116484: LD_VAR 0 2
116488: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
116489: LD_EXP 147
116493: PUSH
116494: LD_EXP 152
116498: AND
116499: IFFALSE 116623
116501: GO 116503
116503: DISABLE
116504: LD_INT 0
116506: PPUSH
116507: PPUSH
// begin enable ;
116508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
116509: LD_ADDR_VAR 0 2
116513: PUSH
116514: LD_INT 22
116516: PUSH
116517: LD_OWVAR 2
116521: PUSH
116522: EMPTY
116523: LIST
116524: LIST
116525: PUSH
116526: LD_INT 2
116528: PUSH
116529: LD_INT 34
116531: PUSH
116532: LD_INT 7
116534: PUSH
116535: EMPTY
116536: LIST
116537: LIST
116538: PUSH
116539: LD_INT 34
116541: PUSH
116542: LD_INT 45
116544: PUSH
116545: EMPTY
116546: LIST
116547: LIST
116548: PUSH
116549: LD_INT 34
116551: PUSH
116552: LD_INT 28
116554: PUSH
116555: EMPTY
116556: LIST
116557: LIST
116558: PUSH
116559: LD_INT 34
116561: PUSH
116562: LD_INT 47
116564: PUSH
116565: EMPTY
116566: LIST
116567: LIST
116568: PUSH
116569: EMPTY
116570: LIST
116571: LIST
116572: LIST
116573: LIST
116574: LIST
116575: PUSH
116576: EMPTY
116577: LIST
116578: LIST
116579: PPUSH
116580: CALL_OW 69
116584: ST_TO_ADDR
// if not tmp then
116585: LD_VAR 0 2
116589: NOT
116590: IFFALSE 116594
// exit ;
116592: GO 116623
// for i in tmp do
116594: LD_ADDR_VAR 0 1
116598: PUSH
116599: LD_VAR 0 2
116603: PUSH
116604: FOR_IN
116605: IFFALSE 116621
// begin SetLives ( i , 0 ) ;
116607: LD_VAR 0 1
116611: PPUSH
116612: LD_INT 0
116614: PPUSH
116615: CALL_OW 234
// end ;
116619: GO 116604
116621: POP
116622: POP
// end ;
116623: PPOPN 2
116625: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
116626: LD_EXP 147
116630: PUSH
116631: LD_EXP 153
116635: AND
116636: IFFALSE 116720
116638: GO 116640
116640: DISABLE
116641: LD_INT 0
116643: PPUSH
116644: PPUSH
// begin enable ;
116645: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
116646: LD_ADDR_VAR 0 2
116650: PUSH
116651: LD_INT 22
116653: PUSH
116654: LD_OWVAR 2
116658: PUSH
116659: EMPTY
116660: LIST
116661: LIST
116662: PUSH
116663: LD_INT 32
116665: PUSH
116666: LD_INT 3
116668: PUSH
116669: EMPTY
116670: LIST
116671: LIST
116672: PUSH
116673: EMPTY
116674: LIST
116675: LIST
116676: PPUSH
116677: CALL_OW 69
116681: ST_TO_ADDR
// if not tmp then
116682: LD_VAR 0 2
116686: NOT
116687: IFFALSE 116691
// exit ;
116689: GO 116720
// for i in tmp do
116691: LD_ADDR_VAR 0 1
116695: PUSH
116696: LD_VAR 0 2
116700: PUSH
116701: FOR_IN
116702: IFFALSE 116718
// begin SetLives ( i , 0 ) ;
116704: LD_VAR 0 1
116708: PPUSH
116709: LD_INT 0
116711: PPUSH
116712: CALL_OW 234
// end ;
116716: GO 116701
116718: POP
116719: POP
// end ;
116720: PPOPN 2
116722: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
116723: LD_EXP 147
116727: PUSH
116728: LD_EXP 150
116732: AND
116733: IFFALSE 116826
116735: GO 116737
116737: DISABLE
116738: LD_INT 0
116740: PPUSH
// begin enable ;
116741: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
116742: LD_ADDR_VAR 0 1
116746: PUSH
116747: LD_INT 22
116749: PUSH
116750: LD_OWVAR 2
116754: PUSH
116755: EMPTY
116756: LIST
116757: LIST
116758: PUSH
116759: LD_INT 2
116761: PUSH
116762: LD_INT 25
116764: PUSH
116765: LD_INT 5
116767: PUSH
116768: EMPTY
116769: LIST
116770: LIST
116771: PUSH
116772: LD_INT 25
116774: PUSH
116775: LD_INT 9
116777: PUSH
116778: EMPTY
116779: LIST
116780: LIST
116781: PUSH
116782: LD_INT 25
116784: PUSH
116785: LD_INT 8
116787: PUSH
116788: EMPTY
116789: LIST
116790: LIST
116791: PUSH
116792: EMPTY
116793: LIST
116794: LIST
116795: LIST
116796: LIST
116797: PUSH
116798: EMPTY
116799: LIST
116800: LIST
116801: PPUSH
116802: CALL_OW 69
116806: PUSH
116807: FOR_IN
116808: IFFALSE 116824
// begin SetClass ( i , 1 ) ;
116810: LD_VAR 0 1
116814: PPUSH
116815: LD_INT 1
116817: PPUSH
116818: CALL_OW 336
// end ;
116822: GO 116807
116824: POP
116825: POP
// end ;
116826: PPOPN 1
116828: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
116829: LD_EXP 147
116833: PUSH
116834: LD_EXP 151
116838: AND
116839: PUSH
116840: LD_OWVAR 65
116844: PUSH
116845: LD_INT 7
116847: LESS
116848: AND
116849: IFFALSE 116863
116851: GO 116853
116853: DISABLE
// begin enable ;
116854: ENABLE
// game_speed := 7 ;
116855: LD_ADDR_OWVAR 65
116859: PUSH
116860: LD_INT 7
116862: ST_TO_ADDR
// end ;
116863: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
116864: LD_EXP 147
116868: PUSH
116869: LD_EXP 154
116873: AND
116874: IFFALSE 117076
116876: GO 116878
116878: DISABLE
116879: LD_INT 0
116881: PPUSH
116882: PPUSH
116883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
116884: LD_ADDR_VAR 0 3
116888: PUSH
116889: LD_INT 81
116891: PUSH
116892: LD_OWVAR 2
116896: PUSH
116897: EMPTY
116898: LIST
116899: LIST
116900: PUSH
116901: LD_INT 21
116903: PUSH
116904: LD_INT 1
116906: PUSH
116907: EMPTY
116908: LIST
116909: LIST
116910: PUSH
116911: EMPTY
116912: LIST
116913: LIST
116914: PPUSH
116915: CALL_OW 69
116919: ST_TO_ADDR
// if not tmp then
116920: LD_VAR 0 3
116924: NOT
116925: IFFALSE 116929
// exit ;
116927: GO 117076
// if tmp > 5 then
116929: LD_VAR 0 3
116933: PUSH
116934: LD_INT 5
116936: GREATER
116937: IFFALSE 116949
// k := 5 else
116939: LD_ADDR_VAR 0 2
116943: PUSH
116944: LD_INT 5
116946: ST_TO_ADDR
116947: GO 116959
// k := tmp ;
116949: LD_ADDR_VAR 0 2
116953: PUSH
116954: LD_VAR 0 3
116958: ST_TO_ADDR
// for i := 1 to k do
116959: LD_ADDR_VAR 0 1
116963: PUSH
116964: DOUBLE
116965: LD_INT 1
116967: DEC
116968: ST_TO_ADDR
116969: LD_VAR 0 2
116973: PUSH
116974: FOR_TO
116975: IFFALSE 117074
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
116977: LD_VAR 0 3
116981: PUSH
116982: LD_VAR 0 1
116986: ARRAY
116987: PPUSH
116988: LD_VAR 0 1
116992: PUSH
116993: LD_INT 4
116995: MOD
116996: PUSH
116997: LD_INT 1
116999: PLUS
117000: PPUSH
117001: CALL_OW 259
117005: PUSH
117006: LD_INT 10
117008: LESS
117009: IFFALSE 117072
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
117011: LD_VAR 0 3
117015: PUSH
117016: LD_VAR 0 1
117020: ARRAY
117021: PPUSH
117022: LD_VAR 0 1
117026: PUSH
117027: LD_INT 4
117029: MOD
117030: PUSH
117031: LD_INT 1
117033: PLUS
117034: PPUSH
117035: LD_VAR 0 3
117039: PUSH
117040: LD_VAR 0 1
117044: ARRAY
117045: PPUSH
117046: LD_VAR 0 1
117050: PUSH
117051: LD_INT 4
117053: MOD
117054: PUSH
117055: LD_INT 1
117057: PLUS
117058: PPUSH
117059: CALL_OW 259
117063: PUSH
117064: LD_INT 1
117066: PLUS
117067: PPUSH
117068: CALL_OW 237
117072: GO 116974
117074: POP
117075: POP
// end ;
117076: PPOPN 3
117078: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
117079: LD_EXP 147
117083: PUSH
117084: LD_EXP 155
117088: AND
117089: IFFALSE 117109
117091: GO 117093
117093: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
117094: LD_INT 4
117096: PPUSH
117097: LD_OWVAR 2
117101: PPUSH
117102: LD_INT 0
117104: PPUSH
117105: CALL_OW 324
117109: END
// every 0 0$1 trigger StreamModeActive and sShovel do
117110: LD_EXP 147
117114: PUSH
117115: LD_EXP 184
117119: AND
117120: IFFALSE 117140
117122: GO 117124
117124: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
117125: LD_INT 19
117127: PPUSH
117128: LD_OWVAR 2
117132: PPUSH
117133: LD_INT 0
117135: PPUSH
117136: CALL_OW 324
117140: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
117141: LD_EXP 147
117145: PUSH
117146: LD_EXP 156
117150: AND
117151: IFFALSE 117253
117153: GO 117155
117155: DISABLE
117156: LD_INT 0
117158: PPUSH
117159: PPUSH
// begin enable ;
117160: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
117161: LD_ADDR_VAR 0 2
117165: PUSH
117166: LD_INT 22
117168: PUSH
117169: LD_OWVAR 2
117173: PUSH
117174: EMPTY
117175: LIST
117176: LIST
117177: PUSH
117178: LD_INT 2
117180: PUSH
117181: LD_INT 34
117183: PUSH
117184: LD_INT 11
117186: PUSH
117187: EMPTY
117188: LIST
117189: LIST
117190: PUSH
117191: LD_INT 34
117193: PUSH
117194: LD_INT 30
117196: PUSH
117197: EMPTY
117198: LIST
117199: LIST
117200: PUSH
117201: EMPTY
117202: LIST
117203: LIST
117204: LIST
117205: PUSH
117206: EMPTY
117207: LIST
117208: LIST
117209: PPUSH
117210: CALL_OW 69
117214: ST_TO_ADDR
// if not tmp then
117215: LD_VAR 0 2
117219: NOT
117220: IFFALSE 117224
// exit ;
117222: GO 117253
// for i in tmp do
117224: LD_ADDR_VAR 0 1
117228: PUSH
117229: LD_VAR 0 2
117233: PUSH
117234: FOR_IN
117235: IFFALSE 117251
// begin SetLives ( i , 0 ) ;
117237: LD_VAR 0 1
117241: PPUSH
117242: LD_INT 0
117244: PPUSH
117245: CALL_OW 234
// end ;
117249: GO 117234
117251: POP
117252: POP
// end ;
117253: PPOPN 2
117255: END
// every 0 0$1 trigger StreamModeActive and sBunker do
117256: LD_EXP 147
117260: PUSH
117261: LD_EXP 157
117265: AND
117266: IFFALSE 117286
117268: GO 117270
117270: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
117271: LD_INT 32
117273: PPUSH
117274: LD_OWVAR 2
117278: PPUSH
117279: LD_INT 0
117281: PPUSH
117282: CALL_OW 324
117286: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
117287: LD_EXP 147
117291: PUSH
117292: LD_EXP 158
117296: AND
117297: IFFALSE 117478
117299: GO 117301
117301: DISABLE
117302: LD_INT 0
117304: PPUSH
117305: PPUSH
117306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
117307: LD_ADDR_VAR 0 2
117311: PUSH
117312: LD_INT 22
117314: PUSH
117315: LD_OWVAR 2
117319: PUSH
117320: EMPTY
117321: LIST
117322: LIST
117323: PUSH
117324: LD_INT 33
117326: PUSH
117327: LD_INT 3
117329: PUSH
117330: EMPTY
117331: LIST
117332: LIST
117333: PUSH
117334: EMPTY
117335: LIST
117336: LIST
117337: PPUSH
117338: CALL_OW 69
117342: ST_TO_ADDR
// if not tmp then
117343: LD_VAR 0 2
117347: NOT
117348: IFFALSE 117352
// exit ;
117350: GO 117478
// side := 0 ;
117352: LD_ADDR_VAR 0 3
117356: PUSH
117357: LD_INT 0
117359: ST_TO_ADDR
// for i := 1 to 8 do
117360: LD_ADDR_VAR 0 1
117364: PUSH
117365: DOUBLE
117366: LD_INT 1
117368: DEC
117369: ST_TO_ADDR
117370: LD_INT 8
117372: PUSH
117373: FOR_TO
117374: IFFALSE 117422
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
117376: LD_OWVAR 2
117380: PUSH
117381: LD_VAR 0 1
117385: NONEQUAL
117386: PUSH
117387: LD_OWVAR 2
117391: PPUSH
117392: LD_VAR 0 1
117396: PPUSH
117397: CALL_OW 81
117401: PUSH
117402: LD_INT 2
117404: EQUAL
117405: AND
117406: IFFALSE 117420
// begin side := i ;
117408: LD_ADDR_VAR 0 3
117412: PUSH
117413: LD_VAR 0 1
117417: ST_TO_ADDR
// break ;
117418: GO 117422
// end ;
117420: GO 117373
117422: POP
117423: POP
// if not side then
117424: LD_VAR 0 3
117428: NOT
117429: IFFALSE 117433
// exit ;
117431: GO 117478
// for i := 1 to tmp do
117433: LD_ADDR_VAR 0 1
117437: PUSH
117438: DOUBLE
117439: LD_INT 1
117441: DEC
117442: ST_TO_ADDR
117443: LD_VAR 0 2
117447: PUSH
117448: FOR_TO
117449: IFFALSE 117476
// if Prob ( 60 ) then
117451: LD_INT 60
117453: PPUSH
117454: CALL_OW 13
117458: IFFALSE 117474
// SetSide ( i , side ) ;
117460: LD_VAR 0 1
117464: PPUSH
117465: LD_VAR 0 3
117469: PPUSH
117470: CALL_OW 235
117474: GO 117448
117476: POP
117477: POP
// end ;
117478: PPOPN 3
117480: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
117481: LD_EXP 147
117485: PUSH
117486: LD_EXP 160
117490: AND
117491: IFFALSE 117610
117493: GO 117495
117495: DISABLE
117496: LD_INT 0
117498: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
117499: LD_ADDR_VAR 0 1
117503: PUSH
117504: LD_INT 22
117506: PUSH
117507: LD_OWVAR 2
117511: PUSH
117512: EMPTY
117513: LIST
117514: LIST
117515: PUSH
117516: LD_INT 21
117518: PUSH
117519: LD_INT 1
117521: PUSH
117522: EMPTY
117523: LIST
117524: LIST
117525: PUSH
117526: LD_INT 3
117528: PUSH
117529: LD_INT 23
117531: PUSH
117532: LD_INT 0
117534: PUSH
117535: EMPTY
117536: LIST
117537: LIST
117538: PUSH
117539: EMPTY
117540: LIST
117541: LIST
117542: PUSH
117543: EMPTY
117544: LIST
117545: LIST
117546: LIST
117547: PPUSH
117548: CALL_OW 69
117552: PUSH
117553: FOR_IN
117554: IFFALSE 117608
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
117556: LD_VAR 0 1
117560: PPUSH
117561: CALL_OW 257
117565: PUSH
117566: LD_INT 1
117568: PUSH
117569: LD_INT 2
117571: PUSH
117572: LD_INT 3
117574: PUSH
117575: LD_INT 4
117577: PUSH
117578: EMPTY
117579: LIST
117580: LIST
117581: LIST
117582: LIST
117583: IN
117584: IFFALSE 117606
// SetClass ( un , rand ( 1 , 4 ) ) ;
117586: LD_VAR 0 1
117590: PPUSH
117591: LD_INT 1
117593: PPUSH
117594: LD_INT 4
117596: PPUSH
117597: CALL_OW 12
117601: PPUSH
117602: CALL_OW 336
117606: GO 117553
117608: POP
117609: POP
// end ;
117610: PPOPN 1
117612: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
117613: LD_EXP 147
117617: PUSH
117618: LD_EXP 159
117622: AND
117623: IFFALSE 117702
117625: GO 117627
117627: DISABLE
117628: LD_INT 0
117630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
117631: LD_ADDR_VAR 0 1
117635: PUSH
117636: LD_INT 22
117638: PUSH
117639: LD_OWVAR 2
117643: PUSH
117644: EMPTY
117645: LIST
117646: LIST
117647: PUSH
117648: LD_INT 21
117650: PUSH
117651: LD_INT 3
117653: PUSH
117654: EMPTY
117655: LIST
117656: LIST
117657: PUSH
117658: EMPTY
117659: LIST
117660: LIST
117661: PPUSH
117662: CALL_OW 69
117666: ST_TO_ADDR
// if not tmp then
117667: LD_VAR 0 1
117671: NOT
117672: IFFALSE 117676
// exit ;
117674: GO 117702
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
117676: LD_VAR 0 1
117680: PUSH
117681: LD_INT 1
117683: PPUSH
117684: LD_VAR 0 1
117688: PPUSH
117689: CALL_OW 12
117693: ARRAY
117694: PPUSH
117695: LD_INT 100
117697: PPUSH
117698: CALL_OW 234
// end ;
117702: PPOPN 1
117704: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
117705: LD_EXP 147
117709: PUSH
117710: LD_EXP 161
117714: AND
117715: IFFALSE 117813
117717: GO 117719
117719: DISABLE
117720: LD_INT 0
117722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
117723: LD_ADDR_VAR 0 1
117727: PUSH
117728: LD_INT 22
117730: PUSH
117731: LD_OWVAR 2
117735: PUSH
117736: EMPTY
117737: LIST
117738: LIST
117739: PUSH
117740: LD_INT 21
117742: PUSH
117743: LD_INT 1
117745: PUSH
117746: EMPTY
117747: LIST
117748: LIST
117749: PUSH
117750: EMPTY
117751: LIST
117752: LIST
117753: PPUSH
117754: CALL_OW 69
117758: ST_TO_ADDR
// if not tmp then
117759: LD_VAR 0 1
117763: NOT
117764: IFFALSE 117768
// exit ;
117766: GO 117813
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
117768: LD_VAR 0 1
117772: PUSH
117773: LD_INT 1
117775: PPUSH
117776: LD_VAR 0 1
117780: PPUSH
117781: CALL_OW 12
117785: ARRAY
117786: PPUSH
117787: LD_INT 1
117789: PPUSH
117790: LD_INT 4
117792: PPUSH
117793: CALL_OW 12
117797: PPUSH
117798: LD_INT 3000
117800: PPUSH
117801: LD_INT 9000
117803: PPUSH
117804: CALL_OW 12
117808: PPUSH
117809: CALL_OW 492
// end ;
117813: PPOPN 1
117815: END
// every 0 0$1 trigger StreamModeActive and sDepot do
117816: LD_EXP 147
117820: PUSH
117821: LD_EXP 162
117825: AND
117826: IFFALSE 117846
117828: GO 117830
117830: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
117831: LD_INT 1
117833: PPUSH
117834: LD_OWVAR 2
117838: PPUSH
117839: LD_INT 0
117841: PPUSH
117842: CALL_OW 324
117846: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
117847: LD_EXP 147
117851: PUSH
117852: LD_EXP 163
117856: AND
117857: IFFALSE 117940
117859: GO 117861
117861: DISABLE
117862: LD_INT 0
117864: PPUSH
117865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
117866: LD_ADDR_VAR 0 2
117870: PUSH
117871: LD_INT 22
117873: PUSH
117874: LD_OWVAR 2
117878: PUSH
117879: EMPTY
117880: LIST
117881: LIST
117882: PUSH
117883: LD_INT 21
117885: PUSH
117886: LD_INT 3
117888: PUSH
117889: EMPTY
117890: LIST
117891: LIST
117892: PUSH
117893: EMPTY
117894: LIST
117895: LIST
117896: PPUSH
117897: CALL_OW 69
117901: ST_TO_ADDR
// if not tmp then
117902: LD_VAR 0 2
117906: NOT
117907: IFFALSE 117911
// exit ;
117909: GO 117940
// for i in tmp do
117911: LD_ADDR_VAR 0 1
117915: PUSH
117916: LD_VAR 0 2
117920: PUSH
117921: FOR_IN
117922: IFFALSE 117938
// SetBLevel ( i , 10 ) ;
117924: LD_VAR 0 1
117928: PPUSH
117929: LD_INT 10
117931: PPUSH
117932: CALL_OW 241
117936: GO 117921
117938: POP
117939: POP
// end ;
117940: PPOPN 2
117942: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
117943: LD_EXP 147
117947: PUSH
117948: LD_EXP 164
117952: AND
117953: IFFALSE 118064
117955: GO 117957
117957: DISABLE
117958: LD_INT 0
117960: PPUSH
117961: PPUSH
117962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
117963: LD_ADDR_VAR 0 3
117967: PUSH
117968: LD_INT 22
117970: PUSH
117971: LD_OWVAR 2
117975: PUSH
117976: EMPTY
117977: LIST
117978: LIST
117979: PUSH
117980: LD_INT 25
117982: PUSH
117983: LD_INT 1
117985: PUSH
117986: EMPTY
117987: LIST
117988: LIST
117989: PUSH
117990: EMPTY
117991: LIST
117992: LIST
117993: PPUSH
117994: CALL_OW 69
117998: ST_TO_ADDR
// if not tmp then
117999: LD_VAR 0 3
118003: NOT
118004: IFFALSE 118008
// exit ;
118006: GO 118064
// un := tmp [ rand ( 1 , tmp ) ] ;
118008: LD_ADDR_VAR 0 2
118012: PUSH
118013: LD_VAR 0 3
118017: PUSH
118018: LD_INT 1
118020: PPUSH
118021: LD_VAR 0 3
118025: PPUSH
118026: CALL_OW 12
118030: ARRAY
118031: ST_TO_ADDR
// if Crawls ( un ) then
118032: LD_VAR 0 2
118036: PPUSH
118037: CALL_OW 318
118041: IFFALSE 118052
// ComWalk ( un ) ;
118043: LD_VAR 0 2
118047: PPUSH
118048: CALL_OW 138
// SetClass ( un , class_sniper ) ;
118052: LD_VAR 0 2
118056: PPUSH
118057: LD_INT 5
118059: PPUSH
118060: CALL_OW 336
// end ;
118064: PPOPN 3
118066: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
118067: LD_EXP 147
118071: PUSH
118072: LD_EXP 165
118076: AND
118077: PUSH
118078: LD_OWVAR 67
118082: PUSH
118083: LD_INT 4
118085: LESS
118086: AND
118087: IFFALSE 118106
118089: GO 118091
118091: DISABLE
// begin Difficulty := Difficulty + 1 ;
118092: LD_ADDR_OWVAR 67
118096: PUSH
118097: LD_OWVAR 67
118101: PUSH
118102: LD_INT 1
118104: PLUS
118105: ST_TO_ADDR
// end ;
118106: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
118107: LD_EXP 147
118111: PUSH
118112: LD_EXP 166
118116: AND
118117: IFFALSE 118220
118119: GO 118121
118121: DISABLE
118122: LD_INT 0
118124: PPUSH
// begin for i := 1 to 5 do
118125: LD_ADDR_VAR 0 1
118129: PUSH
118130: DOUBLE
118131: LD_INT 1
118133: DEC
118134: ST_TO_ADDR
118135: LD_INT 5
118137: PUSH
118138: FOR_TO
118139: IFFALSE 118218
// begin uc_nation := nation_nature ;
118141: LD_ADDR_OWVAR 21
118145: PUSH
118146: LD_INT 0
118148: ST_TO_ADDR
// uc_side := 0 ;
118149: LD_ADDR_OWVAR 20
118153: PUSH
118154: LD_INT 0
118156: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
118157: LD_ADDR_OWVAR 29
118161: PUSH
118162: LD_INT 12
118164: PUSH
118165: LD_INT 12
118167: PUSH
118168: EMPTY
118169: LIST
118170: LIST
118171: ST_TO_ADDR
// hc_agressivity := 20 ;
118172: LD_ADDR_OWVAR 35
118176: PUSH
118177: LD_INT 20
118179: ST_TO_ADDR
// hc_class := class_tiger ;
118180: LD_ADDR_OWVAR 28
118184: PUSH
118185: LD_INT 14
118187: ST_TO_ADDR
// hc_gallery :=  ;
118188: LD_ADDR_OWVAR 33
118192: PUSH
118193: LD_STRING 
118195: ST_TO_ADDR
// hc_name :=  ;
118196: LD_ADDR_OWVAR 26
118200: PUSH
118201: LD_STRING 
118203: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
118204: CALL_OW 44
118208: PPUSH
118209: LD_INT 0
118211: PPUSH
118212: CALL_OW 51
// end ;
118216: GO 118138
118218: POP
118219: POP
// end ;
118220: PPOPN 1
118222: END
// every 0 0$1 trigger StreamModeActive and sBomb do
118223: LD_EXP 147
118227: PUSH
118228: LD_EXP 167
118232: AND
118233: IFFALSE 118242
118235: GO 118237
118237: DISABLE
// StreamSibBomb ;
118238: CALL 118243 0 0
118242: END
// export function StreamSibBomb ; var i , x , y ; begin
118243: LD_INT 0
118245: PPUSH
118246: PPUSH
118247: PPUSH
118248: PPUSH
// result := false ;
118249: LD_ADDR_VAR 0 1
118253: PUSH
118254: LD_INT 0
118256: ST_TO_ADDR
// for i := 1 to 16 do
118257: LD_ADDR_VAR 0 2
118261: PUSH
118262: DOUBLE
118263: LD_INT 1
118265: DEC
118266: ST_TO_ADDR
118267: LD_INT 16
118269: PUSH
118270: FOR_TO
118271: IFFALSE 118470
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
118273: LD_ADDR_VAR 0 3
118277: PUSH
118278: LD_INT 10
118280: PUSH
118281: LD_INT 20
118283: PUSH
118284: LD_INT 30
118286: PUSH
118287: LD_INT 40
118289: PUSH
118290: LD_INT 50
118292: PUSH
118293: LD_INT 60
118295: PUSH
118296: LD_INT 70
118298: PUSH
118299: LD_INT 80
118301: PUSH
118302: LD_INT 90
118304: PUSH
118305: LD_INT 100
118307: PUSH
118308: LD_INT 110
118310: PUSH
118311: LD_INT 120
118313: PUSH
118314: LD_INT 130
118316: PUSH
118317: LD_INT 140
118319: PUSH
118320: LD_INT 150
118322: PUSH
118323: EMPTY
118324: LIST
118325: LIST
118326: LIST
118327: LIST
118328: LIST
118329: LIST
118330: LIST
118331: LIST
118332: LIST
118333: LIST
118334: LIST
118335: LIST
118336: LIST
118337: LIST
118338: LIST
118339: PUSH
118340: LD_INT 1
118342: PPUSH
118343: LD_INT 15
118345: PPUSH
118346: CALL_OW 12
118350: ARRAY
118351: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
118352: LD_ADDR_VAR 0 4
118356: PUSH
118357: LD_INT 10
118359: PUSH
118360: LD_INT 20
118362: PUSH
118363: LD_INT 30
118365: PUSH
118366: LD_INT 40
118368: PUSH
118369: LD_INT 50
118371: PUSH
118372: LD_INT 60
118374: PUSH
118375: LD_INT 70
118377: PUSH
118378: LD_INT 80
118380: PUSH
118381: LD_INT 90
118383: PUSH
118384: LD_INT 100
118386: PUSH
118387: LD_INT 110
118389: PUSH
118390: LD_INT 120
118392: PUSH
118393: LD_INT 130
118395: PUSH
118396: LD_INT 140
118398: PUSH
118399: LD_INT 150
118401: PUSH
118402: EMPTY
118403: LIST
118404: LIST
118405: LIST
118406: LIST
118407: LIST
118408: LIST
118409: LIST
118410: LIST
118411: LIST
118412: LIST
118413: LIST
118414: LIST
118415: LIST
118416: LIST
118417: LIST
118418: PUSH
118419: LD_INT 1
118421: PPUSH
118422: LD_INT 15
118424: PPUSH
118425: CALL_OW 12
118429: ARRAY
118430: ST_TO_ADDR
// if ValidHex ( x , y ) then
118431: LD_VAR 0 3
118435: PPUSH
118436: LD_VAR 0 4
118440: PPUSH
118441: CALL_OW 488
118445: IFFALSE 118468
// begin result := [ x , y ] ;
118447: LD_ADDR_VAR 0 1
118451: PUSH
118452: LD_VAR 0 3
118456: PUSH
118457: LD_VAR 0 4
118461: PUSH
118462: EMPTY
118463: LIST
118464: LIST
118465: ST_TO_ADDR
// break ;
118466: GO 118470
// end ; end ;
118468: GO 118270
118470: POP
118471: POP
// if result then
118472: LD_VAR 0 1
118476: IFFALSE 118536
// begin ToLua ( playSibBomb() ) ;
118478: LD_STRING playSibBomb()
118480: PPUSH
118481: CALL_OW 559
// wait ( 0 0$14 ) ;
118485: LD_INT 490
118487: PPUSH
118488: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
118492: LD_VAR 0 1
118496: PUSH
118497: LD_INT 1
118499: ARRAY
118500: PPUSH
118501: LD_VAR 0 1
118505: PUSH
118506: LD_INT 2
118508: ARRAY
118509: PPUSH
118510: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
118514: LD_VAR 0 1
118518: PUSH
118519: LD_INT 1
118521: ARRAY
118522: PPUSH
118523: LD_VAR 0 1
118527: PUSH
118528: LD_INT 2
118530: ARRAY
118531: PPUSH
118532: CALL_OW 429
// end ; end ;
118536: LD_VAR 0 1
118540: RET
// every 0 0$1 trigger StreamModeActive and sReset do
118541: LD_EXP 147
118545: PUSH
118546: LD_EXP 169
118550: AND
118551: IFFALSE 118563
118553: GO 118555
118555: DISABLE
// YouLost (  ) ;
118556: LD_STRING 
118558: PPUSH
118559: CALL_OW 104
118563: END
// every 0 0$1 trigger StreamModeActive and sFog do
118564: LD_EXP 147
118568: PUSH
118569: LD_EXP 168
118573: AND
118574: IFFALSE 118588
118576: GO 118578
118578: DISABLE
// FogOff ( your_side ) ;
118579: LD_OWVAR 2
118583: PPUSH
118584: CALL_OW 344
118588: END
// every 0 0$1 trigger StreamModeActive and sSun do
118589: LD_EXP 147
118593: PUSH
118594: LD_EXP 170
118598: AND
118599: IFFALSE 118627
118601: GO 118603
118603: DISABLE
// begin solar_recharge_percent := 0 ;
118604: LD_ADDR_OWVAR 79
118608: PUSH
118609: LD_INT 0
118611: ST_TO_ADDR
// wait ( 5 5$00 ) ;
118612: LD_INT 10500
118614: PPUSH
118615: CALL_OW 67
// solar_recharge_percent := 100 ;
118619: LD_ADDR_OWVAR 79
118623: PUSH
118624: LD_INT 100
118626: ST_TO_ADDR
// end ;
118627: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
118628: LD_EXP 147
118632: PUSH
118633: LD_EXP 171
118637: AND
118638: IFFALSE 118877
118640: GO 118642
118642: DISABLE
118643: LD_INT 0
118645: PPUSH
118646: PPUSH
118647: PPUSH
// begin tmp := [ ] ;
118648: LD_ADDR_VAR 0 3
118652: PUSH
118653: EMPTY
118654: ST_TO_ADDR
// for i := 1 to 6 do
118655: LD_ADDR_VAR 0 1
118659: PUSH
118660: DOUBLE
118661: LD_INT 1
118663: DEC
118664: ST_TO_ADDR
118665: LD_INT 6
118667: PUSH
118668: FOR_TO
118669: IFFALSE 118774
// begin uc_nation := nation_nature ;
118671: LD_ADDR_OWVAR 21
118675: PUSH
118676: LD_INT 0
118678: ST_TO_ADDR
// uc_side := 0 ;
118679: LD_ADDR_OWVAR 20
118683: PUSH
118684: LD_INT 0
118686: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
118687: LD_ADDR_OWVAR 29
118691: PUSH
118692: LD_INT 12
118694: PUSH
118695: LD_INT 12
118697: PUSH
118698: EMPTY
118699: LIST
118700: LIST
118701: ST_TO_ADDR
// hc_agressivity := 20 ;
118702: LD_ADDR_OWVAR 35
118706: PUSH
118707: LD_INT 20
118709: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
118710: LD_ADDR_OWVAR 28
118714: PUSH
118715: LD_INT 17
118717: ST_TO_ADDR
// hc_gallery :=  ;
118718: LD_ADDR_OWVAR 33
118722: PUSH
118723: LD_STRING 
118725: ST_TO_ADDR
// hc_name :=  ;
118726: LD_ADDR_OWVAR 26
118730: PUSH
118731: LD_STRING 
118733: ST_TO_ADDR
// un := CreateHuman ;
118734: LD_ADDR_VAR 0 2
118738: PUSH
118739: CALL_OW 44
118743: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
118744: LD_VAR 0 2
118748: PPUSH
118749: LD_INT 1
118751: PPUSH
118752: CALL_OW 51
// tmp := tmp ^ un ;
118756: LD_ADDR_VAR 0 3
118760: PUSH
118761: LD_VAR 0 3
118765: PUSH
118766: LD_VAR 0 2
118770: ADD
118771: ST_TO_ADDR
// end ;
118772: GO 118668
118774: POP
118775: POP
// repeat wait ( 0 0$1 ) ;
118776: LD_INT 35
118778: PPUSH
118779: CALL_OW 67
// for un in tmp do
118783: LD_ADDR_VAR 0 2
118787: PUSH
118788: LD_VAR 0 3
118792: PUSH
118793: FOR_IN
118794: IFFALSE 118868
// begin if IsDead ( un ) then
118796: LD_VAR 0 2
118800: PPUSH
118801: CALL_OW 301
118805: IFFALSE 118825
// begin tmp := tmp diff un ;
118807: LD_ADDR_VAR 0 3
118811: PUSH
118812: LD_VAR 0 3
118816: PUSH
118817: LD_VAR 0 2
118821: DIFF
118822: ST_TO_ADDR
// continue ;
118823: GO 118793
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
118825: LD_VAR 0 2
118829: PPUSH
118830: LD_INT 3
118832: PUSH
118833: LD_INT 22
118835: PUSH
118836: LD_INT 0
118838: PUSH
118839: EMPTY
118840: LIST
118841: LIST
118842: PUSH
118843: EMPTY
118844: LIST
118845: LIST
118846: PPUSH
118847: CALL_OW 69
118851: PPUSH
118852: LD_VAR 0 2
118856: PPUSH
118857: CALL_OW 74
118861: PPUSH
118862: CALL_OW 115
// end ;
118866: GO 118793
118868: POP
118869: POP
// until not tmp ;
118870: LD_VAR 0 3
118874: NOT
118875: IFFALSE 118776
// end ;
118877: PPOPN 3
118879: END
// every 0 0$1 trigger StreamModeActive and sTroll do
118880: LD_EXP 147
118884: PUSH
118885: LD_EXP 172
118889: AND
118890: IFFALSE 118944
118892: GO 118894
118894: DISABLE
// begin ToLua ( displayTroll(); ) ;
118895: LD_STRING displayTroll();
118897: PPUSH
118898: CALL_OW 559
// wait ( 3 3$00 ) ;
118902: LD_INT 6300
118904: PPUSH
118905: CALL_OW 67
// ToLua ( hideTroll(); ) ;
118909: LD_STRING hideTroll();
118911: PPUSH
118912: CALL_OW 559
// wait ( 1 1$00 ) ;
118916: LD_INT 2100
118918: PPUSH
118919: CALL_OW 67
// ToLua ( displayTroll(); ) ;
118923: LD_STRING displayTroll();
118925: PPUSH
118926: CALL_OW 559
// wait ( 1 1$00 ) ;
118930: LD_INT 2100
118932: PPUSH
118933: CALL_OW 67
// ToLua ( hideTroll(); ) ;
118937: LD_STRING hideTroll();
118939: PPUSH
118940: CALL_OW 559
// end ;
118944: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
118945: LD_EXP 147
118949: PUSH
118950: LD_EXP 173
118954: AND
118955: IFFALSE 119018
118957: GO 118959
118959: DISABLE
118960: LD_INT 0
118962: PPUSH
// begin p := 0 ;
118963: LD_ADDR_VAR 0 1
118967: PUSH
118968: LD_INT 0
118970: ST_TO_ADDR
// repeat game_speed := 1 ;
118971: LD_ADDR_OWVAR 65
118975: PUSH
118976: LD_INT 1
118978: ST_TO_ADDR
// wait ( 0 0$1 ) ;
118979: LD_INT 35
118981: PPUSH
118982: CALL_OW 67
// p := p + 1 ;
118986: LD_ADDR_VAR 0 1
118990: PUSH
118991: LD_VAR 0 1
118995: PUSH
118996: LD_INT 1
118998: PLUS
118999: ST_TO_ADDR
// until p >= 60 ;
119000: LD_VAR 0 1
119004: PUSH
119005: LD_INT 60
119007: GREATEREQUAL
119008: IFFALSE 118971
// game_speed := 4 ;
119010: LD_ADDR_OWVAR 65
119014: PUSH
119015: LD_INT 4
119017: ST_TO_ADDR
// end ;
119018: PPOPN 1
119020: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
119021: LD_EXP 147
119025: PUSH
119026: LD_EXP 174
119030: AND
119031: IFFALSE 119177
119033: GO 119035
119035: DISABLE
119036: LD_INT 0
119038: PPUSH
119039: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
119040: LD_ADDR_VAR 0 1
119044: PUSH
119045: LD_INT 22
119047: PUSH
119048: LD_OWVAR 2
119052: PUSH
119053: EMPTY
119054: LIST
119055: LIST
119056: PUSH
119057: LD_INT 2
119059: PUSH
119060: LD_INT 30
119062: PUSH
119063: LD_INT 0
119065: PUSH
119066: EMPTY
119067: LIST
119068: LIST
119069: PUSH
119070: LD_INT 30
119072: PUSH
119073: LD_INT 1
119075: PUSH
119076: EMPTY
119077: LIST
119078: LIST
119079: PUSH
119080: EMPTY
119081: LIST
119082: LIST
119083: LIST
119084: PUSH
119085: EMPTY
119086: LIST
119087: LIST
119088: PPUSH
119089: CALL_OW 69
119093: ST_TO_ADDR
// if not depot then
119094: LD_VAR 0 1
119098: NOT
119099: IFFALSE 119103
// exit ;
119101: GO 119177
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
119103: LD_ADDR_VAR 0 2
119107: PUSH
119108: LD_VAR 0 1
119112: PUSH
119113: LD_INT 1
119115: PPUSH
119116: LD_VAR 0 1
119120: PPUSH
119121: CALL_OW 12
119125: ARRAY
119126: PPUSH
119127: CALL_OW 274
119131: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
119132: LD_VAR 0 2
119136: PPUSH
119137: LD_INT 1
119139: PPUSH
119140: LD_INT 0
119142: PPUSH
119143: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
119147: LD_VAR 0 2
119151: PPUSH
119152: LD_INT 2
119154: PPUSH
119155: LD_INT 0
119157: PPUSH
119158: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
119162: LD_VAR 0 2
119166: PPUSH
119167: LD_INT 3
119169: PPUSH
119170: LD_INT 0
119172: PPUSH
119173: CALL_OW 277
// end ;
119177: PPOPN 2
119179: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
119180: LD_EXP 147
119184: PUSH
119185: LD_EXP 175
119189: AND
119190: IFFALSE 119287
119192: GO 119194
119194: DISABLE
119195: LD_INT 0
119197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
119198: LD_ADDR_VAR 0 1
119202: PUSH
119203: LD_INT 22
119205: PUSH
119206: LD_OWVAR 2
119210: PUSH
119211: EMPTY
119212: LIST
119213: LIST
119214: PUSH
119215: LD_INT 21
119217: PUSH
119218: LD_INT 1
119220: PUSH
119221: EMPTY
119222: LIST
119223: LIST
119224: PUSH
119225: LD_INT 3
119227: PUSH
119228: LD_INT 23
119230: PUSH
119231: LD_INT 0
119233: PUSH
119234: EMPTY
119235: LIST
119236: LIST
119237: PUSH
119238: EMPTY
119239: LIST
119240: LIST
119241: PUSH
119242: EMPTY
119243: LIST
119244: LIST
119245: LIST
119246: PPUSH
119247: CALL_OW 69
119251: ST_TO_ADDR
// if not tmp then
119252: LD_VAR 0 1
119256: NOT
119257: IFFALSE 119261
// exit ;
119259: GO 119287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
119261: LD_VAR 0 1
119265: PUSH
119266: LD_INT 1
119268: PPUSH
119269: LD_VAR 0 1
119273: PPUSH
119274: CALL_OW 12
119278: ARRAY
119279: PPUSH
119280: LD_INT 200
119282: PPUSH
119283: CALL_OW 234
// end ;
119287: PPOPN 1
119289: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
119290: LD_EXP 147
119294: PUSH
119295: LD_EXP 176
119299: AND
119300: IFFALSE 119379
119302: GO 119304
119304: DISABLE
119305: LD_INT 0
119307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
119308: LD_ADDR_VAR 0 1
119312: PUSH
119313: LD_INT 22
119315: PUSH
119316: LD_OWVAR 2
119320: PUSH
119321: EMPTY
119322: LIST
119323: LIST
119324: PUSH
119325: LD_INT 21
119327: PUSH
119328: LD_INT 2
119330: PUSH
119331: EMPTY
119332: LIST
119333: LIST
119334: PUSH
119335: EMPTY
119336: LIST
119337: LIST
119338: PPUSH
119339: CALL_OW 69
119343: ST_TO_ADDR
// if not tmp then
119344: LD_VAR 0 1
119348: NOT
119349: IFFALSE 119353
// exit ;
119351: GO 119379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
119353: LD_VAR 0 1
119357: PUSH
119358: LD_INT 1
119360: PPUSH
119361: LD_VAR 0 1
119365: PPUSH
119366: CALL_OW 12
119370: ARRAY
119371: PPUSH
119372: LD_INT 60
119374: PPUSH
119375: CALL_OW 234
// end ;
119379: PPOPN 1
119381: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
119382: LD_EXP 147
119386: PUSH
119387: LD_EXP 177
119391: AND
119392: IFFALSE 119491
119394: GO 119396
119396: DISABLE
119397: LD_INT 0
119399: PPUSH
119400: PPUSH
// begin enable ;
119401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
119402: LD_ADDR_VAR 0 1
119406: PUSH
119407: LD_INT 22
119409: PUSH
119410: LD_OWVAR 2
119414: PUSH
119415: EMPTY
119416: LIST
119417: LIST
119418: PUSH
119419: LD_INT 61
119421: PUSH
119422: EMPTY
119423: LIST
119424: PUSH
119425: LD_INT 33
119427: PUSH
119428: LD_INT 2
119430: PUSH
119431: EMPTY
119432: LIST
119433: LIST
119434: PUSH
119435: EMPTY
119436: LIST
119437: LIST
119438: LIST
119439: PPUSH
119440: CALL_OW 69
119444: ST_TO_ADDR
// if not tmp then
119445: LD_VAR 0 1
119449: NOT
119450: IFFALSE 119454
// exit ;
119452: GO 119491
// for i in tmp do
119454: LD_ADDR_VAR 0 2
119458: PUSH
119459: LD_VAR 0 1
119463: PUSH
119464: FOR_IN
119465: IFFALSE 119489
// if IsControledBy ( i ) then
119467: LD_VAR 0 2
119471: PPUSH
119472: CALL_OW 312
119476: IFFALSE 119487
// ComUnlink ( i ) ;
119478: LD_VAR 0 2
119482: PPUSH
119483: CALL_OW 136
119487: GO 119464
119489: POP
119490: POP
// end ;
119491: PPOPN 2
119493: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
119494: LD_EXP 147
119498: PUSH
119499: LD_EXP 178
119503: AND
119504: IFFALSE 119644
119506: GO 119508
119508: DISABLE
119509: LD_INT 0
119511: PPUSH
119512: PPUSH
// begin ToLua ( displayPowell(); ) ;
119513: LD_STRING displayPowell();
119515: PPUSH
119516: CALL_OW 559
// uc_side := 0 ;
119520: LD_ADDR_OWVAR 20
119524: PUSH
119525: LD_INT 0
119527: ST_TO_ADDR
// uc_nation := 2 ;
119528: LD_ADDR_OWVAR 21
119532: PUSH
119533: LD_INT 2
119535: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
119536: LD_ADDR_OWVAR 37
119540: PUSH
119541: LD_INT 14
119543: ST_TO_ADDR
// vc_engine := engine_siberite ;
119544: LD_ADDR_OWVAR 39
119548: PUSH
119549: LD_INT 3
119551: ST_TO_ADDR
// vc_control := control_apeman ;
119552: LD_ADDR_OWVAR 38
119556: PUSH
119557: LD_INT 5
119559: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
119560: LD_ADDR_OWVAR 40
119564: PUSH
119565: LD_INT 29
119567: ST_TO_ADDR
// un := CreateVehicle ;
119568: LD_ADDR_VAR 0 2
119572: PUSH
119573: CALL_OW 45
119577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
119578: LD_VAR 0 2
119582: PPUSH
119583: LD_INT 1
119585: PPUSH
119586: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
119590: LD_INT 35
119592: PPUSH
119593: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
119597: LD_VAR 0 2
119601: PPUSH
119602: LD_INT 22
119604: PUSH
119605: LD_OWVAR 2
119609: PUSH
119610: EMPTY
119611: LIST
119612: LIST
119613: PPUSH
119614: CALL_OW 69
119618: PPUSH
119619: LD_VAR 0 2
119623: PPUSH
119624: CALL_OW 74
119628: PPUSH
119629: CALL_OW 115
// until IsDead ( un ) ;
119633: LD_VAR 0 2
119637: PPUSH
119638: CALL_OW 301
119642: IFFALSE 119590
// end ;
119644: PPOPN 2
119646: END
// every 0 0$1 trigger StreamModeActive and sStu do
119647: LD_EXP 147
119651: PUSH
119652: LD_EXP 186
119656: AND
119657: IFFALSE 119673
119659: GO 119661
119661: DISABLE
// begin ToLua ( displayStucuk(); ) ;
119662: LD_STRING displayStucuk();
119664: PPUSH
119665: CALL_OW 559
// ResetFog ;
119669: CALL_OW 335
// end ;
119673: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
119674: LD_EXP 147
119678: PUSH
119679: LD_EXP 179
119683: AND
119684: IFFALSE 119825
119686: GO 119688
119688: DISABLE
119689: LD_INT 0
119691: PPUSH
119692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
119693: LD_ADDR_VAR 0 2
119697: PUSH
119698: LD_INT 22
119700: PUSH
119701: LD_OWVAR 2
119705: PUSH
119706: EMPTY
119707: LIST
119708: LIST
119709: PUSH
119710: LD_INT 21
119712: PUSH
119713: LD_INT 1
119715: PUSH
119716: EMPTY
119717: LIST
119718: LIST
119719: PUSH
119720: EMPTY
119721: LIST
119722: LIST
119723: PPUSH
119724: CALL_OW 69
119728: ST_TO_ADDR
// if not tmp then
119729: LD_VAR 0 2
119733: NOT
119734: IFFALSE 119738
// exit ;
119736: GO 119825
// un := tmp [ rand ( 1 , tmp ) ] ;
119738: LD_ADDR_VAR 0 1
119742: PUSH
119743: LD_VAR 0 2
119747: PUSH
119748: LD_INT 1
119750: PPUSH
119751: LD_VAR 0 2
119755: PPUSH
119756: CALL_OW 12
119760: ARRAY
119761: ST_TO_ADDR
// SetSide ( un , 0 ) ;
119762: LD_VAR 0 1
119766: PPUSH
119767: LD_INT 0
119769: PPUSH
119770: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
119774: LD_VAR 0 1
119778: PPUSH
119779: LD_OWVAR 3
119783: PUSH
119784: LD_VAR 0 1
119788: DIFF
119789: PPUSH
119790: LD_VAR 0 1
119794: PPUSH
119795: CALL_OW 74
119799: PPUSH
119800: CALL_OW 115
// wait ( 0 0$20 ) ;
119804: LD_INT 700
119806: PPUSH
119807: CALL_OW 67
// SetSide ( un , your_side ) ;
119811: LD_VAR 0 1
119815: PPUSH
119816: LD_OWVAR 2
119820: PPUSH
119821: CALL_OW 235
// end ;
119825: PPOPN 2
119827: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
119828: LD_EXP 147
119832: PUSH
119833: LD_EXP 180
119837: AND
119838: IFFALSE 119944
119840: GO 119842
119842: DISABLE
119843: LD_INT 0
119845: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
119846: LD_ADDR_VAR 0 1
119850: PUSH
119851: LD_INT 22
119853: PUSH
119854: LD_OWVAR 2
119858: PUSH
119859: EMPTY
119860: LIST
119861: LIST
119862: PUSH
119863: LD_INT 2
119865: PUSH
119866: LD_INT 30
119868: PUSH
119869: LD_INT 0
119871: PUSH
119872: EMPTY
119873: LIST
119874: LIST
119875: PUSH
119876: LD_INT 30
119878: PUSH
119879: LD_INT 1
119881: PUSH
119882: EMPTY
119883: LIST
119884: LIST
119885: PUSH
119886: EMPTY
119887: LIST
119888: LIST
119889: LIST
119890: PUSH
119891: EMPTY
119892: LIST
119893: LIST
119894: PPUSH
119895: CALL_OW 69
119899: ST_TO_ADDR
// if not depot then
119900: LD_VAR 0 1
119904: NOT
119905: IFFALSE 119909
// exit ;
119907: GO 119944
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
119909: LD_VAR 0 1
119913: PUSH
119914: LD_INT 1
119916: ARRAY
119917: PPUSH
119918: CALL_OW 250
119922: PPUSH
119923: LD_VAR 0 1
119927: PUSH
119928: LD_INT 1
119930: ARRAY
119931: PPUSH
119932: CALL_OW 251
119936: PPUSH
119937: LD_INT 70
119939: PPUSH
119940: CALL_OW 495
// end ;
119944: PPOPN 1
119946: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
119947: LD_EXP 147
119951: PUSH
119952: LD_EXP 181
119956: AND
119957: IFFALSE 120168
119959: GO 119961
119961: DISABLE
119962: LD_INT 0
119964: PPUSH
119965: PPUSH
119966: PPUSH
119967: PPUSH
119968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
119969: LD_ADDR_VAR 0 5
119973: PUSH
119974: LD_INT 22
119976: PUSH
119977: LD_OWVAR 2
119981: PUSH
119982: EMPTY
119983: LIST
119984: LIST
119985: PUSH
119986: LD_INT 21
119988: PUSH
119989: LD_INT 1
119991: PUSH
119992: EMPTY
119993: LIST
119994: LIST
119995: PUSH
119996: EMPTY
119997: LIST
119998: LIST
119999: PPUSH
120000: CALL_OW 69
120004: ST_TO_ADDR
// if not tmp then
120005: LD_VAR 0 5
120009: NOT
120010: IFFALSE 120014
// exit ;
120012: GO 120168
// for i in tmp do
120014: LD_ADDR_VAR 0 1
120018: PUSH
120019: LD_VAR 0 5
120023: PUSH
120024: FOR_IN
120025: IFFALSE 120166
// begin d := rand ( 0 , 5 ) ;
120027: LD_ADDR_VAR 0 4
120031: PUSH
120032: LD_INT 0
120034: PPUSH
120035: LD_INT 5
120037: PPUSH
120038: CALL_OW 12
120042: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
120043: LD_ADDR_VAR 0 2
120047: PUSH
120048: LD_VAR 0 1
120052: PPUSH
120053: CALL_OW 250
120057: PPUSH
120058: LD_VAR 0 4
120062: PPUSH
120063: LD_INT 3
120065: PPUSH
120066: LD_INT 12
120068: PPUSH
120069: CALL_OW 12
120073: PPUSH
120074: CALL_OW 272
120078: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
120079: LD_ADDR_VAR 0 3
120083: PUSH
120084: LD_VAR 0 1
120088: PPUSH
120089: CALL_OW 251
120093: PPUSH
120094: LD_VAR 0 4
120098: PPUSH
120099: LD_INT 3
120101: PPUSH
120102: LD_INT 12
120104: PPUSH
120105: CALL_OW 12
120109: PPUSH
120110: CALL_OW 273
120114: ST_TO_ADDR
// if ValidHex ( x , y ) then
120115: LD_VAR 0 2
120119: PPUSH
120120: LD_VAR 0 3
120124: PPUSH
120125: CALL_OW 488
120129: IFFALSE 120164
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
120131: LD_VAR 0 1
120135: PPUSH
120136: LD_VAR 0 2
120140: PPUSH
120141: LD_VAR 0 3
120145: PPUSH
120146: LD_INT 3
120148: PPUSH
120149: LD_INT 6
120151: PPUSH
120152: CALL_OW 12
120156: PPUSH
120157: LD_INT 1
120159: PPUSH
120160: CALL_OW 483
// end ;
120164: GO 120024
120166: POP
120167: POP
// end ;
120168: PPOPN 5
120170: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
120171: LD_EXP 147
120175: PUSH
120176: LD_EXP 182
120180: AND
120181: IFFALSE 120275
120183: GO 120185
120185: DISABLE
120186: LD_INT 0
120188: PPUSH
120189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
120190: LD_ADDR_VAR 0 2
120194: PUSH
120195: LD_INT 22
120197: PUSH
120198: LD_OWVAR 2
120202: PUSH
120203: EMPTY
120204: LIST
120205: LIST
120206: PUSH
120207: LD_INT 32
120209: PUSH
120210: LD_INT 1
120212: PUSH
120213: EMPTY
120214: LIST
120215: LIST
120216: PUSH
120217: LD_INT 21
120219: PUSH
120220: LD_INT 2
120222: PUSH
120223: EMPTY
120224: LIST
120225: LIST
120226: PUSH
120227: EMPTY
120228: LIST
120229: LIST
120230: LIST
120231: PPUSH
120232: CALL_OW 69
120236: ST_TO_ADDR
// if not tmp then
120237: LD_VAR 0 2
120241: NOT
120242: IFFALSE 120246
// exit ;
120244: GO 120275
// for i in tmp do
120246: LD_ADDR_VAR 0 1
120250: PUSH
120251: LD_VAR 0 2
120255: PUSH
120256: FOR_IN
120257: IFFALSE 120273
// SetFuel ( i , 0 ) ;
120259: LD_VAR 0 1
120263: PPUSH
120264: LD_INT 0
120266: PPUSH
120267: CALL_OW 240
120271: GO 120256
120273: POP
120274: POP
// end ;
120275: PPOPN 2
120277: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
120278: LD_EXP 147
120282: PUSH
120283: LD_EXP 183
120287: AND
120288: IFFALSE 120354
120290: GO 120292
120292: DISABLE
120293: LD_INT 0
120295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
120296: LD_ADDR_VAR 0 1
120300: PUSH
120301: LD_INT 22
120303: PUSH
120304: LD_OWVAR 2
120308: PUSH
120309: EMPTY
120310: LIST
120311: LIST
120312: PUSH
120313: LD_INT 30
120315: PUSH
120316: LD_INT 29
120318: PUSH
120319: EMPTY
120320: LIST
120321: LIST
120322: PUSH
120323: EMPTY
120324: LIST
120325: LIST
120326: PPUSH
120327: CALL_OW 69
120331: ST_TO_ADDR
// if not tmp then
120332: LD_VAR 0 1
120336: NOT
120337: IFFALSE 120341
// exit ;
120339: GO 120354
// DestroyUnit ( tmp [ 1 ] ) ;
120341: LD_VAR 0 1
120345: PUSH
120346: LD_INT 1
120348: ARRAY
120349: PPUSH
120350: CALL_OW 65
// end ;
120354: PPOPN 1
120356: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
120357: LD_EXP 147
120361: PUSH
120362: LD_EXP 185
120366: AND
120367: IFFALSE 120496
120369: GO 120371
120371: DISABLE
120372: LD_INT 0
120374: PPUSH
// begin uc_side := 0 ;
120375: LD_ADDR_OWVAR 20
120379: PUSH
120380: LD_INT 0
120382: ST_TO_ADDR
// uc_nation := nation_arabian ;
120383: LD_ADDR_OWVAR 21
120387: PUSH
120388: LD_INT 2
120390: ST_TO_ADDR
// hc_gallery :=  ;
120391: LD_ADDR_OWVAR 33
120395: PUSH
120396: LD_STRING 
120398: ST_TO_ADDR
// hc_name :=  ;
120399: LD_ADDR_OWVAR 26
120403: PUSH
120404: LD_STRING 
120406: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
120407: LD_INT 1
120409: PPUSH
120410: LD_INT 11
120412: PPUSH
120413: LD_INT 10
120415: PPUSH
120416: CALL_OW 380
// un := CreateHuman ;
120420: LD_ADDR_VAR 0 1
120424: PUSH
120425: CALL_OW 44
120429: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
120430: LD_VAR 0 1
120434: PPUSH
120435: LD_INT 1
120437: PPUSH
120438: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
120442: LD_INT 35
120444: PPUSH
120445: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
120449: LD_VAR 0 1
120453: PPUSH
120454: LD_INT 22
120456: PUSH
120457: LD_OWVAR 2
120461: PUSH
120462: EMPTY
120463: LIST
120464: LIST
120465: PPUSH
120466: CALL_OW 69
120470: PPUSH
120471: LD_VAR 0 1
120475: PPUSH
120476: CALL_OW 74
120480: PPUSH
120481: CALL_OW 115
// until IsDead ( un ) ;
120485: LD_VAR 0 1
120489: PPUSH
120490: CALL_OW 301
120494: IFFALSE 120442
// end ;
120496: PPOPN 1
120498: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
120499: LD_EXP 147
120503: PUSH
120504: LD_EXP 187
120508: AND
120509: IFFALSE 120521
120511: GO 120513
120513: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
120514: LD_STRING earthquake(getX(game), 0, 32)
120516: PPUSH
120517: CALL_OW 559
120521: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
120522: LD_EXP 147
120526: PUSH
120527: LD_EXP 188
120531: AND
120532: IFFALSE 120623
120534: GO 120536
120536: DISABLE
120537: LD_INT 0
120539: PPUSH
// begin enable ;
120540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
120541: LD_ADDR_VAR 0 1
120545: PUSH
120546: LD_INT 22
120548: PUSH
120549: LD_OWVAR 2
120553: PUSH
120554: EMPTY
120555: LIST
120556: LIST
120557: PUSH
120558: LD_INT 21
120560: PUSH
120561: LD_INT 2
120563: PUSH
120564: EMPTY
120565: LIST
120566: LIST
120567: PUSH
120568: LD_INT 33
120570: PUSH
120571: LD_INT 3
120573: PUSH
120574: EMPTY
120575: LIST
120576: LIST
120577: PUSH
120578: EMPTY
120579: LIST
120580: LIST
120581: LIST
120582: PPUSH
120583: CALL_OW 69
120587: ST_TO_ADDR
// if not tmp then
120588: LD_VAR 0 1
120592: NOT
120593: IFFALSE 120597
// exit ;
120595: GO 120623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
120597: LD_VAR 0 1
120601: PUSH
120602: LD_INT 1
120604: PPUSH
120605: LD_VAR 0 1
120609: PPUSH
120610: CALL_OW 12
120614: ARRAY
120615: PPUSH
120616: LD_INT 1
120618: PPUSH
120619: CALL_OW 234
// end ;
120623: PPOPN 1
120625: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
120626: LD_EXP 147
120630: PUSH
120631: LD_EXP 189
120635: AND
120636: IFFALSE 120777
120638: GO 120640
120640: DISABLE
120641: LD_INT 0
120643: PPUSH
120644: PPUSH
120645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
120646: LD_ADDR_VAR 0 3
120650: PUSH
120651: LD_INT 22
120653: PUSH
120654: LD_OWVAR 2
120658: PUSH
120659: EMPTY
120660: LIST
120661: LIST
120662: PUSH
120663: LD_INT 25
120665: PUSH
120666: LD_INT 1
120668: PUSH
120669: EMPTY
120670: LIST
120671: LIST
120672: PUSH
120673: EMPTY
120674: LIST
120675: LIST
120676: PPUSH
120677: CALL_OW 69
120681: ST_TO_ADDR
// if not tmp then
120682: LD_VAR 0 3
120686: NOT
120687: IFFALSE 120691
// exit ;
120689: GO 120777
// un := tmp [ rand ( 1 , tmp ) ] ;
120691: LD_ADDR_VAR 0 2
120695: PUSH
120696: LD_VAR 0 3
120700: PUSH
120701: LD_INT 1
120703: PPUSH
120704: LD_VAR 0 3
120708: PPUSH
120709: CALL_OW 12
120713: ARRAY
120714: ST_TO_ADDR
// if Crawls ( un ) then
120715: LD_VAR 0 2
120719: PPUSH
120720: CALL_OW 318
120724: IFFALSE 120735
// ComWalk ( un ) ;
120726: LD_VAR 0 2
120730: PPUSH
120731: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
120735: LD_VAR 0 2
120739: PPUSH
120740: LD_INT 9
120742: PPUSH
120743: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
120747: LD_INT 28
120749: PPUSH
120750: LD_OWVAR 2
120754: PPUSH
120755: LD_INT 2
120757: PPUSH
120758: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
120762: LD_INT 29
120764: PPUSH
120765: LD_OWVAR 2
120769: PPUSH
120770: LD_INT 2
120772: PPUSH
120773: CALL_OW 322
// end ;
120777: PPOPN 3
120779: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
120780: LD_EXP 147
120784: PUSH
120785: LD_EXP 190
120789: AND
120790: IFFALSE 120901
120792: GO 120794
120794: DISABLE
120795: LD_INT 0
120797: PPUSH
120798: PPUSH
120799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
120800: LD_ADDR_VAR 0 3
120804: PUSH
120805: LD_INT 22
120807: PUSH
120808: LD_OWVAR 2
120812: PUSH
120813: EMPTY
120814: LIST
120815: LIST
120816: PUSH
120817: LD_INT 25
120819: PUSH
120820: LD_INT 1
120822: PUSH
120823: EMPTY
120824: LIST
120825: LIST
120826: PUSH
120827: EMPTY
120828: LIST
120829: LIST
120830: PPUSH
120831: CALL_OW 69
120835: ST_TO_ADDR
// if not tmp then
120836: LD_VAR 0 3
120840: NOT
120841: IFFALSE 120845
// exit ;
120843: GO 120901
// un := tmp [ rand ( 1 , tmp ) ] ;
120845: LD_ADDR_VAR 0 2
120849: PUSH
120850: LD_VAR 0 3
120854: PUSH
120855: LD_INT 1
120857: PPUSH
120858: LD_VAR 0 3
120862: PPUSH
120863: CALL_OW 12
120867: ARRAY
120868: ST_TO_ADDR
// if Crawls ( un ) then
120869: LD_VAR 0 2
120873: PPUSH
120874: CALL_OW 318
120878: IFFALSE 120889
// ComWalk ( un ) ;
120880: LD_VAR 0 2
120884: PPUSH
120885: CALL_OW 138
// SetClass ( un , class_mortar ) ;
120889: LD_VAR 0 2
120893: PPUSH
120894: LD_INT 8
120896: PPUSH
120897: CALL_OW 336
// end ;
120901: PPOPN 3
120903: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
120904: LD_EXP 147
120908: PUSH
120909: LD_EXP 191
120913: AND
120914: IFFALSE 121058
120916: GO 120918
120918: DISABLE
120919: LD_INT 0
120921: PPUSH
120922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
120923: LD_ADDR_VAR 0 2
120927: PUSH
120928: LD_INT 22
120930: PUSH
120931: LD_OWVAR 2
120935: PUSH
120936: EMPTY
120937: LIST
120938: LIST
120939: PUSH
120940: LD_INT 21
120942: PUSH
120943: LD_INT 2
120945: PUSH
120946: EMPTY
120947: LIST
120948: LIST
120949: PUSH
120950: LD_INT 2
120952: PUSH
120953: LD_INT 34
120955: PUSH
120956: LD_INT 12
120958: PUSH
120959: EMPTY
120960: LIST
120961: LIST
120962: PUSH
120963: LD_INT 34
120965: PUSH
120966: LD_INT 51
120968: PUSH
120969: EMPTY
120970: LIST
120971: LIST
120972: PUSH
120973: LD_INT 34
120975: PUSH
120976: LD_INT 32
120978: PUSH
120979: EMPTY
120980: LIST
120981: LIST
120982: PUSH
120983: EMPTY
120984: LIST
120985: LIST
120986: LIST
120987: LIST
120988: PUSH
120989: EMPTY
120990: LIST
120991: LIST
120992: LIST
120993: PPUSH
120994: CALL_OW 69
120998: ST_TO_ADDR
// if not tmp then
120999: LD_VAR 0 2
121003: NOT
121004: IFFALSE 121008
// exit ;
121006: GO 121058
// for i in tmp do
121008: LD_ADDR_VAR 0 1
121012: PUSH
121013: LD_VAR 0 2
121017: PUSH
121018: FOR_IN
121019: IFFALSE 121056
// if GetCargo ( i , mat_artifact ) = 0 then
121021: LD_VAR 0 1
121025: PPUSH
121026: LD_INT 4
121028: PPUSH
121029: CALL_OW 289
121033: PUSH
121034: LD_INT 0
121036: EQUAL
121037: IFFALSE 121054
// SetCargo ( i , mat_siberit , 100 ) ;
121039: LD_VAR 0 1
121043: PPUSH
121044: LD_INT 3
121046: PPUSH
121047: LD_INT 100
121049: PPUSH
121050: CALL_OW 290
121054: GO 121018
121056: POP
121057: POP
// end ;
121058: PPOPN 2
121060: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
121061: LD_EXP 147
121065: PUSH
121066: LD_EXP 192
121070: AND
121071: IFFALSE 121254
121073: GO 121075
121075: DISABLE
121076: LD_INT 0
121078: PPUSH
121079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
121080: LD_ADDR_VAR 0 2
121084: PUSH
121085: LD_INT 22
121087: PUSH
121088: LD_OWVAR 2
121092: PUSH
121093: EMPTY
121094: LIST
121095: LIST
121096: PPUSH
121097: CALL_OW 69
121101: ST_TO_ADDR
// if not tmp then
121102: LD_VAR 0 2
121106: NOT
121107: IFFALSE 121111
// exit ;
121109: GO 121254
// for i := 1 to 2 do
121111: LD_ADDR_VAR 0 1
121115: PUSH
121116: DOUBLE
121117: LD_INT 1
121119: DEC
121120: ST_TO_ADDR
121121: LD_INT 2
121123: PUSH
121124: FOR_TO
121125: IFFALSE 121252
// begin uc_side := your_side ;
121127: LD_ADDR_OWVAR 20
121131: PUSH
121132: LD_OWVAR 2
121136: ST_TO_ADDR
// uc_nation := nation_american ;
121137: LD_ADDR_OWVAR 21
121141: PUSH
121142: LD_INT 1
121144: ST_TO_ADDR
// vc_chassis := us_morphling ;
121145: LD_ADDR_OWVAR 37
121149: PUSH
121150: LD_INT 5
121152: ST_TO_ADDR
// vc_engine := engine_siberite ;
121153: LD_ADDR_OWVAR 39
121157: PUSH
121158: LD_INT 3
121160: ST_TO_ADDR
// vc_control := control_computer ;
121161: LD_ADDR_OWVAR 38
121165: PUSH
121166: LD_INT 3
121168: ST_TO_ADDR
// vc_weapon := us_double_laser ;
121169: LD_ADDR_OWVAR 40
121173: PUSH
121174: LD_INT 10
121176: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
121177: LD_VAR 0 2
121181: PUSH
121182: LD_INT 1
121184: ARRAY
121185: PPUSH
121186: CALL_OW 310
121190: NOT
121191: IFFALSE 121238
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
121193: CALL_OW 45
121197: PPUSH
121198: LD_VAR 0 2
121202: PUSH
121203: LD_INT 1
121205: ARRAY
121206: PPUSH
121207: CALL_OW 250
121211: PPUSH
121212: LD_VAR 0 2
121216: PUSH
121217: LD_INT 1
121219: ARRAY
121220: PPUSH
121221: CALL_OW 251
121225: PPUSH
121226: LD_INT 12
121228: PPUSH
121229: LD_INT 1
121231: PPUSH
121232: CALL_OW 50
121236: GO 121250
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
121238: CALL_OW 45
121242: PPUSH
121243: LD_INT 1
121245: PPUSH
121246: CALL_OW 51
// end ;
121250: GO 121124
121252: POP
121253: POP
// end ;
121254: PPOPN 2
121256: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
121257: LD_EXP 147
121261: PUSH
121262: LD_EXP 193
121266: AND
121267: IFFALSE 121489
121269: GO 121271
121271: DISABLE
121272: LD_INT 0
121274: PPUSH
121275: PPUSH
121276: PPUSH
121277: PPUSH
121278: PPUSH
121279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
121280: LD_ADDR_VAR 0 6
121284: PUSH
121285: LD_INT 22
121287: PUSH
121288: LD_OWVAR 2
121292: PUSH
121293: EMPTY
121294: LIST
121295: LIST
121296: PUSH
121297: LD_INT 21
121299: PUSH
121300: LD_INT 1
121302: PUSH
121303: EMPTY
121304: LIST
121305: LIST
121306: PUSH
121307: LD_INT 3
121309: PUSH
121310: LD_INT 23
121312: PUSH
121313: LD_INT 0
121315: PUSH
121316: EMPTY
121317: LIST
121318: LIST
121319: PUSH
121320: EMPTY
121321: LIST
121322: LIST
121323: PUSH
121324: EMPTY
121325: LIST
121326: LIST
121327: LIST
121328: PPUSH
121329: CALL_OW 69
121333: ST_TO_ADDR
// if not tmp then
121334: LD_VAR 0 6
121338: NOT
121339: IFFALSE 121343
// exit ;
121341: GO 121489
// s1 := rand ( 1 , 4 ) ;
121343: LD_ADDR_VAR 0 2
121347: PUSH
121348: LD_INT 1
121350: PPUSH
121351: LD_INT 4
121353: PPUSH
121354: CALL_OW 12
121358: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
121359: LD_ADDR_VAR 0 4
121363: PUSH
121364: LD_VAR 0 6
121368: PUSH
121369: LD_INT 1
121371: ARRAY
121372: PPUSH
121373: LD_VAR 0 2
121377: PPUSH
121378: CALL_OW 259
121382: ST_TO_ADDR
// if s1 = 1 then
121383: LD_VAR 0 2
121387: PUSH
121388: LD_INT 1
121390: EQUAL
121391: IFFALSE 121411
// s2 := rand ( 2 , 4 ) else
121393: LD_ADDR_VAR 0 3
121397: PUSH
121398: LD_INT 2
121400: PPUSH
121401: LD_INT 4
121403: PPUSH
121404: CALL_OW 12
121408: ST_TO_ADDR
121409: GO 121419
// s2 := 1 ;
121411: LD_ADDR_VAR 0 3
121415: PUSH
121416: LD_INT 1
121418: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
121419: LD_ADDR_VAR 0 5
121423: PUSH
121424: LD_VAR 0 6
121428: PUSH
121429: LD_INT 1
121431: ARRAY
121432: PPUSH
121433: LD_VAR 0 3
121437: PPUSH
121438: CALL_OW 259
121442: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
121443: LD_VAR 0 6
121447: PUSH
121448: LD_INT 1
121450: ARRAY
121451: PPUSH
121452: LD_VAR 0 2
121456: PPUSH
121457: LD_VAR 0 5
121461: PPUSH
121462: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
121466: LD_VAR 0 6
121470: PUSH
121471: LD_INT 1
121473: ARRAY
121474: PPUSH
121475: LD_VAR 0 3
121479: PPUSH
121480: LD_VAR 0 4
121484: PPUSH
121485: CALL_OW 237
// end ;
121489: PPOPN 6
121491: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
121492: LD_EXP 147
121496: PUSH
121497: LD_EXP 194
121501: AND
121502: IFFALSE 121581
121504: GO 121506
121506: DISABLE
121507: LD_INT 0
121509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
121510: LD_ADDR_VAR 0 1
121514: PUSH
121515: LD_INT 22
121517: PUSH
121518: LD_OWVAR 2
121522: PUSH
121523: EMPTY
121524: LIST
121525: LIST
121526: PUSH
121527: LD_INT 30
121529: PUSH
121530: LD_INT 3
121532: PUSH
121533: EMPTY
121534: LIST
121535: LIST
121536: PUSH
121537: EMPTY
121538: LIST
121539: LIST
121540: PPUSH
121541: CALL_OW 69
121545: ST_TO_ADDR
// if not tmp then
121546: LD_VAR 0 1
121550: NOT
121551: IFFALSE 121555
// exit ;
121553: GO 121581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
121555: LD_VAR 0 1
121559: PUSH
121560: LD_INT 1
121562: PPUSH
121563: LD_VAR 0 1
121567: PPUSH
121568: CALL_OW 12
121572: ARRAY
121573: PPUSH
121574: LD_INT 1
121576: PPUSH
121577: CALL_OW 234
// end ;
121581: PPOPN 1
121583: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
121584: LD_EXP 147
121588: PUSH
121589: LD_EXP 195
121593: AND
121594: IFFALSE 121706
121596: GO 121598
121598: DISABLE
121599: LD_INT 0
121601: PPUSH
121602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
121603: LD_ADDR_VAR 0 2
121607: PUSH
121608: LD_INT 22
121610: PUSH
121611: LD_OWVAR 2
121615: PUSH
121616: EMPTY
121617: LIST
121618: LIST
121619: PUSH
121620: LD_INT 2
121622: PUSH
121623: LD_INT 30
121625: PUSH
121626: LD_INT 27
121628: PUSH
121629: EMPTY
121630: LIST
121631: LIST
121632: PUSH
121633: LD_INT 30
121635: PUSH
121636: LD_INT 26
121638: PUSH
121639: EMPTY
121640: LIST
121641: LIST
121642: PUSH
121643: LD_INT 30
121645: PUSH
121646: LD_INT 28
121648: PUSH
121649: EMPTY
121650: LIST
121651: LIST
121652: PUSH
121653: EMPTY
121654: LIST
121655: LIST
121656: LIST
121657: LIST
121658: PUSH
121659: EMPTY
121660: LIST
121661: LIST
121662: PPUSH
121663: CALL_OW 69
121667: ST_TO_ADDR
// if not tmp then
121668: LD_VAR 0 2
121672: NOT
121673: IFFALSE 121677
// exit ;
121675: GO 121706
// for i in tmp do
121677: LD_ADDR_VAR 0 1
121681: PUSH
121682: LD_VAR 0 2
121686: PUSH
121687: FOR_IN
121688: IFFALSE 121704
// SetLives ( i , 1 ) ;
121690: LD_VAR 0 1
121694: PPUSH
121695: LD_INT 1
121697: PPUSH
121698: CALL_OW 234
121702: GO 121687
121704: POP
121705: POP
// end ;
121706: PPOPN 2
121708: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
121709: LD_EXP 147
121713: PUSH
121714: LD_EXP 196
121718: AND
121719: IFFALSE 122006
121721: GO 121723
121723: DISABLE
121724: LD_INT 0
121726: PPUSH
121727: PPUSH
121728: PPUSH
// begin i := rand ( 1 , 7 ) ;
121729: LD_ADDR_VAR 0 1
121733: PUSH
121734: LD_INT 1
121736: PPUSH
121737: LD_INT 7
121739: PPUSH
121740: CALL_OW 12
121744: ST_TO_ADDR
// case i of 1 :
121745: LD_VAR 0 1
121749: PUSH
121750: LD_INT 1
121752: DOUBLE
121753: EQUAL
121754: IFTRUE 121758
121756: GO 121768
121758: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
121759: LD_STRING earthquake(getX(game), 0, 32)
121761: PPUSH
121762: CALL_OW 559
121766: GO 122006
121768: LD_INT 2
121770: DOUBLE
121771: EQUAL
121772: IFTRUE 121776
121774: GO 121790
121776: POP
// begin ToLua ( displayStucuk(); ) ;
121777: LD_STRING displayStucuk();
121779: PPUSH
121780: CALL_OW 559
// ResetFog ;
121784: CALL_OW 335
// end ; 3 :
121788: GO 122006
121790: LD_INT 3
121792: DOUBLE
121793: EQUAL
121794: IFTRUE 121798
121796: GO 121902
121798: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
121799: LD_ADDR_VAR 0 2
121803: PUSH
121804: LD_INT 22
121806: PUSH
121807: LD_OWVAR 2
121811: PUSH
121812: EMPTY
121813: LIST
121814: LIST
121815: PUSH
121816: LD_INT 25
121818: PUSH
121819: LD_INT 1
121821: PUSH
121822: EMPTY
121823: LIST
121824: LIST
121825: PUSH
121826: EMPTY
121827: LIST
121828: LIST
121829: PPUSH
121830: CALL_OW 69
121834: ST_TO_ADDR
// if not tmp then
121835: LD_VAR 0 2
121839: NOT
121840: IFFALSE 121844
// exit ;
121842: GO 122006
// un := tmp [ rand ( 1 , tmp ) ] ;
121844: LD_ADDR_VAR 0 3
121848: PUSH
121849: LD_VAR 0 2
121853: PUSH
121854: LD_INT 1
121856: PPUSH
121857: LD_VAR 0 2
121861: PPUSH
121862: CALL_OW 12
121866: ARRAY
121867: ST_TO_ADDR
// if Crawls ( un ) then
121868: LD_VAR 0 3
121872: PPUSH
121873: CALL_OW 318
121877: IFFALSE 121888
// ComWalk ( un ) ;
121879: LD_VAR 0 3
121883: PPUSH
121884: CALL_OW 138
// SetClass ( un , class_mortar ) ;
121888: LD_VAR 0 3
121892: PPUSH
121893: LD_INT 8
121895: PPUSH
121896: CALL_OW 336
// end ; 4 :
121900: GO 122006
121902: LD_INT 4
121904: DOUBLE
121905: EQUAL
121906: IFTRUE 121910
121908: GO 121984
121910: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
121911: LD_ADDR_VAR 0 2
121915: PUSH
121916: LD_INT 22
121918: PUSH
121919: LD_OWVAR 2
121923: PUSH
121924: EMPTY
121925: LIST
121926: LIST
121927: PUSH
121928: LD_INT 30
121930: PUSH
121931: LD_INT 29
121933: PUSH
121934: EMPTY
121935: LIST
121936: LIST
121937: PUSH
121938: EMPTY
121939: LIST
121940: LIST
121941: PPUSH
121942: CALL_OW 69
121946: ST_TO_ADDR
// if not tmp then
121947: LD_VAR 0 2
121951: NOT
121952: IFFALSE 121956
// exit ;
121954: GO 122006
// CenterNowOnUnits ( tmp [ 1 ] ) ;
121956: LD_VAR 0 2
121960: PUSH
121961: LD_INT 1
121963: ARRAY
121964: PPUSH
121965: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
121969: LD_VAR 0 2
121973: PUSH
121974: LD_INT 1
121976: ARRAY
121977: PPUSH
121978: CALL_OW 65
// end ; 5 .. 7 :
121982: GO 122006
121984: LD_INT 5
121986: DOUBLE
121987: GREATEREQUAL
121988: IFFALSE 121996
121990: LD_INT 7
121992: DOUBLE
121993: LESSEQUAL
121994: IFTRUE 121998
121996: GO 122005
121998: POP
// StreamSibBomb ; end ;
121999: CALL 118243 0 0
122003: GO 122006
122005: POP
// end ;
122006: PPOPN 3
122008: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
122009: LD_EXP 147
122013: PUSH
122014: LD_EXP 197
122018: AND
122019: IFFALSE 122175
122021: GO 122023
122023: DISABLE
122024: LD_INT 0
122026: PPUSH
122027: PPUSH
122028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
122029: LD_ADDR_VAR 0 2
122033: PUSH
122034: LD_INT 81
122036: PUSH
122037: LD_OWVAR 2
122041: PUSH
122042: EMPTY
122043: LIST
122044: LIST
122045: PUSH
122046: LD_INT 2
122048: PUSH
122049: LD_INT 21
122051: PUSH
122052: LD_INT 1
122054: PUSH
122055: EMPTY
122056: LIST
122057: LIST
122058: PUSH
122059: LD_INT 21
122061: PUSH
122062: LD_INT 2
122064: PUSH
122065: EMPTY
122066: LIST
122067: LIST
122068: PUSH
122069: EMPTY
122070: LIST
122071: LIST
122072: LIST
122073: PUSH
122074: EMPTY
122075: LIST
122076: LIST
122077: PPUSH
122078: CALL_OW 69
122082: ST_TO_ADDR
// if not tmp then
122083: LD_VAR 0 2
122087: NOT
122088: IFFALSE 122092
// exit ;
122090: GO 122175
// p := 0 ;
122092: LD_ADDR_VAR 0 3
122096: PUSH
122097: LD_INT 0
122099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
122100: LD_INT 35
122102: PPUSH
122103: CALL_OW 67
// p := p + 1 ;
122107: LD_ADDR_VAR 0 3
122111: PUSH
122112: LD_VAR 0 3
122116: PUSH
122117: LD_INT 1
122119: PLUS
122120: ST_TO_ADDR
// for i in tmp do
122121: LD_ADDR_VAR 0 1
122125: PUSH
122126: LD_VAR 0 2
122130: PUSH
122131: FOR_IN
122132: IFFALSE 122163
// if GetLives ( i ) < 1000 then
122134: LD_VAR 0 1
122138: PPUSH
122139: CALL_OW 256
122143: PUSH
122144: LD_INT 1000
122146: LESS
122147: IFFALSE 122161
// SetLives ( i , 1000 ) ;
122149: LD_VAR 0 1
122153: PPUSH
122154: LD_INT 1000
122156: PPUSH
122157: CALL_OW 234
122161: GO 122131
122163: POP
122164: POP
// until p > 20 ;
122165: LD_VAR 0 3
122169: PUSH
122170: LD_INT 20
122172: GREATER
122173: IFFALSE 122100
// end ;
122175: PPOPN 3
122177: END
// every 0 0$1 trigger StreamModeActive and sTime do
122178: LD_EXP 147
122182: PUSH
122183: LD_EXP 198
122187: AND
122188: IFFALSE 122223
122190: GO 122192
122192: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
122193: LD_INT 28
122195: PPUSH
122196: LD_OWVAR 2
122200: PPUSH
122201: LD_INT 2
122203: PPUSH
122204: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
122208: LD_INT 30
122210: PPUSH
122211: LD_OWVAR 2
122215: PPUSH
122216: LD_INT 2
122218: PPUSH
122219: CALL_OW 322
// end ;
122223: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
122224: LD_EXP 147
122228: PUSH
122229: LD_EXP 199
122233: AND
122234: IFFALSE 122355
122236: GO 122238
122238: DISABLE
122239: LD_INT 0
122241: PPUSH
122242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
122243: LD_ADDR_VAR 0 2
122247: PUSH
122248: LD_INT 22
122250: PUSH
122251: LD_OWVAR 2
122255: PUSH
122256: EMPTY
122257: LIST
122258: LIST
122259: PUSH
122260: LD_INT 21
122262: PUSH
122263: LD_INT 1
122265: PUSH
122266: EMPTY
122267: LIST
122268: LIST
122269: PUSH
122270: LD_INT 3
122272: PUSH
122273: LD_INT 23
122275: PUSH
122276: LD_INT 0
122278: PUSH
122279: EMPTY
122280: LIST
122281: LIST
122282: PUSH
122283: EMPTY
122284: LIST
122285: LIST
122286: PUSH
122287: EMPTY
122288: LIST
122289: LIST
122290: LIST
122291: PPUSH
122292: CALL_OW 69
122296: ST_TO_ADDR
// if not tmp then
122297: LD_VAR 0 2
122301: NOT
122302: IFFALSE 122306
// exit ;
122304: GO 122355
// for i in tmp do
122306: LD_ADDR_VAR 0 1
122310: PUSH
122311: LD_VAR 0 2
122315: PUSH
122316: FOR_IN
122317: IFFALSE 122353
// begin if Crawls ( i ) then
122319: LD_VAR 0 1
122323: PPUSH
122324: CALL_OW 318
122328: IFFALSE 122339
// ComWalk ( i ) ;
122330: LD_VAR 0 1
122334: PPUSH
122335: CALL_OW 138
// SetClass ( i , 2 ) ;
122339: LD_VAR 0 1
122343: PPUSH
122344: LD_INT 2
122346: PPUSH
122347: CALL_OW 336
// end ;
122351: GO 122316
122353: POP
122354: POP
// end ;
122355: PPOPN 2
122357: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
122358: LD_EXP 147
122362: PUSH
122363: LD_EXP 200
122367: AND
122368: IFFALSE 122656
122370: GO 122372
122372: DISABLE
122373: LD_INT 0
122375: PPUSH
122376: PPUSH
122377: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
122378: LD_OWVAR 2
122382: PPUSH
122383: LD_INT 9
122385: PPUSH
122386: LD_INT 1
122388: PPUSH
122389: LD_INT 1
122391: PPUSH
122392: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
122396: LD_INT 9
122398: PPUSH
122399: LD_OWVAR 2
122403: PPUSH
122404: CALL_OW 343
// uc_side := 9 ;
122408: LD_ADDR_OWVAR 20
122412: PUSH
122413: LD_INT 9
122415: ST_TO_ADDR
// uc_nation := 2 ;
122416: LD_ADDR_OWVAR 21
122420: PUSH
122421: LD_INT 2
122423: ST_TO_ADDR
// hc_name := Dark Warrior ;
122424: LD_ADDR_OWVAR 26
122428: PUSH
122429: LD_STRING Dark Warrior
122431: ST_TO_ADDR
// hc_gallery :=  ;
122432: LD_ADDR_OWVAR 33
122436: PUSH
122437: LD_STRING 
122439: ST_TO_ADDR
// hc_noskilllimit := true ;
122440: LD_ADDR_OWVAR 76
122444: PUSH
122445: LD_INT 1
122447: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
122448: LD_ADDR_OWVAR 31
122452: PUSH
122453: LD_INT 30
122455: PUSH
122456: LD_INT 30
122458: PUSH
122459: LD_INT 30
122461: PUSH
122462: LD_INT 30
122464: PUSH
122465: EMPTY
122466: LIST
122467: LIST
122468: LIST
122469: LIST
122470: ST_TO_ADDR
// un := CreateHuman ;
122471: LD_ADDR_VAR 0 3
122475: PUSH
122476: CALL_OW 44
122480: ST_TO_ADDR
// hc_noskilllimit := false ;
122481: LD_ADDR_OWVAR 76
122485: PUSH
122486: LD_INT 0
122488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
122489: LD_VAR 0 3
122493: PPUSH
122494: LD_INT 1
122496: PPUSH
122497: CALL_OW 51
// ToLua ( playRanger() ) ;
122501: LD_STRING playRanger()
122503: PPUSH
122504: CALL_OW 559
// p := 0 ;
122508: LD_ADDR_VAR 0 2
122512: PUSH
122513: LD_INT 0
122515: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
122516: LD_INT 35
122518: PPUSH
122519: CALL_OW 67
// p := p + 1 ;
122523: LD_ADDR_VAR 0 2
122527: PUSH
122528: LD_VAR 0 2
122532: PUSH
122533: LD_INT 1
122535: PLUS
122536: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
122537: LD_VAR 0 3
122541: PPUSH
122542: CALL_OW 256
122546: PUSH
122547: LD_INT 1000
122549: LESS
122550: IFFALSE 122564
// SetLives ( un , 1000 ) ;
122552: LD_VAR 0 3
122556: PPUSH
122557: LD_INT 1000
122559: PPUSH
122560: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
122564: LD_VAR 0 3
122568: PPUSH
122569: LD_INT 81
122571: PUSH
122572: LD_OWVAR 2
122576: PUSH
122577: EMPTY
122578: LIST
122579: LIST
122580: PUSH
122581: LD_INT 91
122583: PUSH
122584: LD_VAR 0 3
122588: PUSH
122589: LD_INT 30
122591: PUSH
122592: EMPTY
122593: LIST
122594: LIST
122595: LIST
122596: PUSH
122597: EMPTY
122598: LIST
122599: LIST
122600: PPUSH
122601: CALL_OW 69
122605: PPUSH
122606: LD_VAR 0 3
122610: PPUSH
122611: CALL_OW 74
122615: PPUSH
122616: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
122620: LD_VAR 0 2
122624: PUSH
122625: LD_INT 80
122627: GREATER
122628: PUSH
122629: LD_VAR 0 3
122633: PPUSH
122634: CALL_OW 301
122638: OR
122639: IFFALSE 122516
// if un then
122641: LD_VAR 0 3
122645: IFFALSE 122656
// RemoveUnit ( un ) ;
122647: LD_VAR 0 3
122651: PPUSH
122652: CALL_OW 64
// end ;
122656: PPOPN 3
122658: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
122659: LD_EXP 201
122663: IFFALSE 122779
122665: GO 122667
122667: DISABLE
122668: LD_INT 0
122670: PPUSH
122671: PPUSH
122672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
122673: LD_ADDR_VAR 0 2
122677: PUSH
122678: LD_INT 81
122680: PUSH
122681: LD_OWVAR 2
122685: PUSH
122686: EMPTY
122687: LIST
122688: LIST
122689: PUSH
122690: LD_INT 21
122692: PUSH
122693: LD_INT 1
122695: PUSH
122696: EMPTY
122697: LIST
122698: LIST
122699: PUSH
122700: EMPTY
122701: LIST
122702: LIST
122703: PPUSH
122704: CALL_OW 69
122708: ST_TO_ADDR
// ToLua ( playComputer() ) ;
122709: LD_STRING playComputer()
122711: PPUSH
122712: CALL_OW 559
// if not tmp then
122716: LD_VAR 0 2
122720: NOT
122721: IFFALSE 122725
// exit ;
122723: GO 122779
// for i in tmp do
122725: LD_ADDR_VAR 0 1
122729: PUSH
122730: LD_VAR 0 2
122734: PUSH
122735: FOR_IN
122736: IFFALSE 122777
// for j := 1 to 4 do
122738: LD_ADDR_VAR 0 3
122742: PUSH
122743: DOUBLE
122744: LD_INT 1
122746: DEC
122747: ST_TO_ADDR
122748: LD_INT 4
122750: PUSH
122751: FOR_TO
122752: IFFALSE 122773
// SetSkill ( i , j , 10 ) ;
122754: LD_VAR 0 1
122758: PPUSH
122759: LD_VAR 0 3
122763: PPUSH
122764: LD_INT 10
122766: PPUSH
122767: CALL_OW 237
122771: GO 122751
122773: POP
122774: POP
122775: GO 122735
122777: POP
122778: POP
// end ;
122779: PPOPN 3
122781: END
// every 0 0$1 trigger s30 do var i , tmp ;
122782: LD_EXP 202
122786: IFFALSE 122855
122788: GO 122790
122790: DISABLE
122791: LD_INT 0
122793: PPUSH
122794: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
122795: LD_ADDR_VAR 0 2
122799: PUSH
122800: LD_INT 22
122802: PUSH
122803: LD_OWVAR 2
122807: PUSH
122808: EMPTY
122809: LIST
122810: LIST
122811: PPUSH
122812: CALL_OW 69
122816: ST_TO_ADDR
// if not tmp then
122817: LD_VAR 0 2
122821: NOT
122822: IFFALSE 122826
// exit ;
122824: GO 122855
// for i in tmp do
122826: LD_ADDR_VAR 0 1
122830: PUSH
122831: LD_VAR 0 2
122835: PUSH
122836: FOR_IN
122837: IFFALSE 122853
// SetLives ( i , 300 ) ;
122839: LD_VAR 0 1
122843: PPUSH
122844: LD_INT 300
122846: PPUSH
122847: CALL_OW 234
122851: GO 122836
122853: POP
122854: POP
// end ;
122855: PPOPN 2
122857: END
// every 0 0$1 trigger s60 do var i , tmp ;
122858: LD_EXP 203
122862: IFFALSE 122931
122864: GO 122866
122866: DISABLE
122867: LD_INT 0
122869: PPUSH
122870: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
122871: LD_ADDR_VAR 0 2
122875: PUSH
122876: LD_INT 22
122878: PUSH
122879: LD_OWVAR 2
122883: PUSH
122884: EMPTY
122885: LIST
122886: LIST
122887: PPUSH
122888: CALL_OW 69
122892: ST_TO_ADDR
// if not tmp then
122893: LD_VAR 0 2
122897: NOT
122898: IFFALSE 122902
// exit ;
122900: GO 122931
// for i in tmp do
122902: LD_ADDR_VAR 0 1
122906: PUSH
122907: LD_VAR 0 2
122911: PUSH
122912: FOR_IN
122913: IFFALSE 122929
// SetLives ( i , 600 ) ;
122915: LD_VAR 0 1
122919: PPUSH
122920: LD_INT 600
122922: PPUSH
122923: CALL_OW 234
122927: GO 122912
122929: POP
122930: POP
// end ;
122931: PPOPN 2
122933: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
122934: LD_INT 0
122936: PPUSH
// case cmd of 301 :
122937: LD_VAR 0 1
122941: PUSH
122942: LD_INT 301
122944: DOUBLE
122945: EQUAL
122946: IFTRUE 122950
122948: GO 122982
122950: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
122951: LD_VAR 0 6
122955: PPUSH
122956: LD_VAR 0 7
122960: PPUSH
122961: LD_VAR 0 8
122965: PPUSH
122966: LD_VAR 0 4
122970: PPUSH
122971: LD_VAR 0 5
122975: PPUSH
122976: CALL 124191 0 5
122980: GO 123103
122982: LD_INT 302
122984: DOUBLE
122985: EQUAL
122986: IFTRUE 122990
122988: GO 123027
122990: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
122991: LD_VAR 0 6
122995: PPUSH
122996: LD_VAR 0 7
123000: PPUSH
123001: LD_VAR 0 8
123005: PPUSH
123006: LD_VAR 0 9
123010: PPUSH
123011: LD_VAR 0 4
123015: PPUSH
123016: LD_VAR 0 5
123020: PPUSH
123021: CALL 124282 0 6
123025: GO 123103
123027: LD_INT 303
123029: DOUBLE
123030: EQUAL
123031: IFTRUE 123035
123033: GO 123072
123035: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
123036: LD_VAR 0 6
123040: PPUSH
123041: LD_VAR 0 7
123045: PPUSH
123046: LD_VAR 0 8
123050: PPUSH
123051: LD_VAR 0 9
123055: PPUSH
123056: LD_VAR 0 4
123060: PPUSH
123061: LD_VAR 0 5
123065: PPUSH
123066: CALL 123108 0 6
123070: GO 123103
123072: LD_INT 304
123074: DOUBLE
123075: EQUAL
123076: IFTRUE 123080
123078: GO 123102
123080: POP
// hHackTeleport ( unit , x , y ) ; end ;
123081: LD_VAR 0 2
123085: PPUSH
123086: LD_VAR 0 4
123090: PPUSH
123091: LD_VAR 0 5
123095: PPUSH
123096: CALL 124875 0 3
123100: GO 123103
123102: POP
// end ;
123103: LD_VAR 0 12
123107: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
123108: LD_INT 0
123110: PPUSH
123111: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
123112: LD_VAR 0 1
123116: PUSH
123117: LD_INT 1
123119: LESS
123120: PUSH
123121: LD_VAR 0 1
123125: PUSH
123126: LD_INT 3
123128: GREATER
123129: OR
123130: PUSH
123131: LD_VAR 0 5
123135: PPUSH
123136: LD_VAR 0 6
123140: PPUSH
123141: CALL_OW 428
123145: OR
123146: IFFALSE 123150
// exit ;
123148: GO 123878
// uc_side := your_side ;
123150: LD_ADDR_OWVAR 20
123154: PUSH
123155: LD_OWVAR 2
123159: ST_TO_ADDR
// uc_nation := nation ;
123160: LD_ADDR_OWVAR 21
123164: PUSH
123165: LD_VAR 0 1
123169: ST_TO_ADDR
// bc_level = 1 ;
123170: LD_ADDR_OWVAR 43
123174: PUSH
123175: LD_INT 1
123177: ST_TO_ADDR
// case btype of 1 :
123178: LD_VAR 0 2
123182: PUSH
123183: LD_INT 1
123185: DOUBLE
123186: EQUAL
123187: IFTRUE 123191
123189: GO 123202
123191: POP
// bc_type := b_depot ; 2 :
123192: LD_ADDR_OWVAR 42
123196: PUSH
123197: LD_INT 0
123199: ST_TO_ADDR
123200: GO 123822
123202: LD_INT 2
123204: DOUBLE
123205: EQUAL
123206: IFTRUE 123210
123208: GO 123221
123210: POP
// bc_type := b_warehouse ; 3 :
123211: LD_ADDR_OWVAR 42
123215: PUSH
123216: LD_INT 1
123218: ST_TO_ADDR
123219: GO 123822
123221: LD_INT 3
123223: DOUBLE
123224: EQUAL
123225: IFTRUE 123229
123227: GO 123240
123229: POP
// bc_type := b_lab ; 4 .. 9 :
123230: LD_ADDR_OWVAR 42
123234: PUSH
123235: LD_INT 6
123237: ST_TO_ADDR
123238: GO 123822
123240: LD_INT 4
123242: DOUBLE
123243: GREATEREQUAL
123244: IFFALSE 123252
123246: LD_INT 9
123248: DOUBLE
123249: LESSEQUAL
123250: IFTRUE 123254
123252: GO 123314
123254: POP
// begin bc_type := b_lab_half ;
123255: LD_ADDR_OWVAR 42
123259: PUSH
123260: LD_INT 7
123262: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
123263: LD_ADDR_OWVAR 44
123267: PUSH
123268: LD_INT 10
123270: PUSH
123271: LD_INT 11
123273: PUSH
123274: LD_INT 12
123276: PUSH
123277: LD_INT 15
123279: PUSH
123280: LD_INT 14
123282: PUSH
123283: LD_INT 13
123285: PUSH
123286: EMPTY
123287: LIST
123288: LIST
123289: LIST
123290: LIST
123291: LIST
123292: LIST
123293: PUSH
123294: LD_VAR 0 2
123298: PUSH
123299: LD_INT 3
123301: MINUS
123302: ARRAY
123303: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
123304: LD_ADDR_OWVAR 45
123308: PUSH
123309: LD_INT 9
123311: ST_TO_ADDR
// end ; 10 .. 13 :
123312: GO 123822
123314: LD_INT 10
123316: DOUBLE
123317: GREATEREQUAL
123318: IFFALSE 123326
123320: LD_INT 13
123322: DOUBLE
123323: LESSEQUAL
123324: IFTRUE 123328
123326: GO 123405
123328: POP
// begin bc_type := b_lab_full ;
123329: LD_ADDR_OWVAR 42
123333: PUSH
123334: LD_INT 8
123336: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
123337: LD_ADDR_OWVAR 44
123341: PUSH
123342: LD_INT 10
123344: PUSH
123345: LD_INT 12
123347: PUSH
123348: LD_INT 14
123350: PUSH
123351: LD_INT 13
123353: PUSH
123354: EMPTY
123355: LIST
123356: LIST
123357: LIST
123358: LIST
123359: PUSH
123360: LD_VAR 0 2
123364: PUSH
123365: LD_INT 9
123367: MINUS
123368: ARRAY
123369: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
123370: LD_ADDR_OWVAR 45
123374: PUSH
123375: LD_INT 11
123377: PUSH
123378: LD_INT 15
123380: PUSH
123381: LD_INT 12
123383: PUSH
123384: LD_INT 15
123386: PUSH
123387: EMPTY
123388: LIST
123389: LIST
123390: LIST
123391: LIST
123392: PUSH
123393: LD_VAR 0 2
123397: PUSH
123398: LD_INT 9
123400: MINUS
123401: ARRAY
123402: ST_TO_ADDR
// end ; 14 :
123403: GO 123822
123405: LD_INT 14
123407: DOUBLE
123408: EQUAL
123409: IFTRUE 123413
123411: GO 123424
123413: POP
// bc_type := b_workshop ; 15 :
123414: LD_ADDR_OWVAR 42
123418: PUSH
123419: LD_INT 2
123421: ST_TO_ADDR
123422: GO 123822
123424: LD_INT 15
123426: DOUBLE
123427: EQUAL
123428: IFTRUE 123432
123430: GO 123443
123432: POP
// bc_type := b_factory ; 16 :
123433: LD_ADDR_OWVAR 42
123437: PUSH
123438: LD_INT 3
123440: ST_TO_ADDR
123441: GO 123822
123443: LD_INT 16
123445: DOUBLE
123446: EQUAL
123447: IFTRUE 123451
123449: GO 123462
123451: POP
// bc_type := b_ext_gun ; 17 :
123452: LD_ADDR_OWVAR 42
123456: PUSH
123457: LD_INT 17
123459: ST_TO_ADDR
123460: GO 123822
123462: LD_INT 17
123464: DOUBLE
123465: EQUAL
123466: IFTRUE 123470
123468: GO 123498
123470: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
123471: LD_ADDR_OWVAR 42
123475: PUSH
123476: LD_INT 19
123478: PUSH
123479: LD_INT 23
123481: PUSH
123482: LD_INT 19
123484: PUSH
123485: EMPTY
123486: LIST
123487: LIST
123488: LIST
123489: PUSH
123490: LD_VAR 0 1
123494: ARRAY
123495: ST_TO_ADDR
123496: GO 123822
123498: LD_INT 18
123500: DOUBLE
123501: EQUAL
123502: IFTRUE 123506
123504: GO 123517
123506: POP
// bc_type := b_ext_radar ; 19 :
123507: LD_ADDR_OWVAR 42
123511: PUSH
123512: LD_INT 20
123514: ST_TO_ADDR
123515: GO 123822
123517: LD_INT 19
123519: DOUBLE
123520: EQUAL
123521: IFTRUE 123525
123523: GO 123536
123525: POP
// bc_type := b_ext_radio ; 20 :
123526: LD_ADDR_OWVAR 42
123530: PUSH
123531: LD_INT 22
123533: ST_TO_ADDR
123534: GO 123822
123536: LD_INT 20
123538: DOUBLE
123539: EQUAL
123540: IFTRUE 123544
123542: GO 123555
123544: POP
// bc_type := b_ext_siberium ; 21 :
123545: LD_ADDR_OWVAR 42
123549: PUSH
123550: LD_INT 21
123552: ST_TO_ADDR
123553: GO 123822
123555: LD_INT 21
123557: DOUBLE
123558: EQUAL
123559: IFTRUE 123563
123561: GO 123574
123563: POP
// bc_type := b_ext_computer ; 22 :
123564: LD_ADDR_OWVAR 42
123568: PUSH
123569: LD_INT 24
123571: ST_TO_ADDR
123572: GO 123822
123574: LD_INT 22
123576: DOUBLE
123577: EQUAL
123578: IFTRUE 123582
123580: GO 123593
123582: POP
// bc_type := b_ext_track ; 23 :
123583: LD_ADDR_OWVAR 42
123587: PUSH
123588: LD_INT 16
123590: ST_TO_ADDR
123591: GO 123822
123593: LD_INT 23
123595: DOUBLE
123596: EQUAL
123597: IFTRUE 123601
123599: GO 123612
123601: POP
// bc_type := b_ext_laser ; 24 :
123602: LD_ADDR_OWVAR 42
123606: PUSH
123607: LD_INT 25
123609: ST_TO_ADDR
123610: GO 123822
123612: LD_INT 24
123614: DOUBLE
123615: EQUAL
123616: IFTRUE 123620
123618: GO 123631
123620: POP
// bc_type := b_control_tower ; 25 :
123621: LD_ADDR_OWVAR 42
123625: PUSH
123626: LD_INT 36
123628: ST_TO_ADDR
123629: GO 123822
123631: LD_INT 25
123633: DOUBLE
123634: EQUAL
123635: IFTRUE 123639
123637: GO 123650
123639: POP
// bc_type := b_breastwork ; 26 :
123640: LD_ADDR_OWVAR 42
123644: PUSH
123645: LD_INT 31
123647: ST_TO_ADDR
123648: GO 123822
123650: LD_INT 26
123652: DOUBLE
123653: EQUAL
123654: IFTRUE 123658
123656: GO 123669
123658: POP
// bc_type := b_bunker ; 27 :
123659: LD_ADDR_OWVAR 42
123663: PUSH
123664: LD_INT 32
123666: ST_TO_ADDR
123667: GO 123822
123669: LD_INT 27
123671: DOUBLE
123672: EQUAL
123673: IFTRUE 123677
123675: GO 123688
123677: POP
// bc_type := b_turret ; 28 :
123678: LD_ADDR_OWVAR 42
123682: PUSH
123683: LD_INT 33
123685: ST_TO_ADDR
123686: GO 123822
123688: LD_INT 28
123690: DOUBLE
123691: EQUAL
123692: IFTRUE 123696
123694: GO 123707
123696: POP
// bc_type := b_armoury ; 29 :
123697: LD_ADDR_OWVAR 42
123701: PUSH
123702: LD_INT 4
123704: ST_TO_ADDR
123705: GO 123822
123707: LD_INT 29
123709: DOUBLE
123710: EQUAL
123711: IFTRUE 123715
123713: GO 123726
123715: POP
// bc_type := b_barracks ; 30 :
123716: LD_ADDR_OWVAR 42
123720: PUSH
123721: LD_INT 5
123723: ST_TO_ADDR
123724: GO 123822
123726: LD_INT 30
123728: DOUBLE
123729: EQUAL
123730: IFTRUE 123734
123732: GO 123745
123734: POP
// bc_type := b_solar_power ; 31 :
123735: LD_ADDR_OWVAR 42
123739: PUSH
123740: LD_INT 27
123742: ST_TO_ADDR
123743: GO 123822
123745: LD_INT 31
123747: DOUBLE
123748: EQUAL
123749: IFTRUE 123753
123751: GO 123764
123753: POP
// bc_type := b_oil_power ; 32 :
123754: LD_ADDR_OWVAR 42
123758: PUSH
123759: LD_INT 26
123761: ST_TO_ADDR
123762: GO 123822
123764: LD_INT 32
123766: DOUBLE
123767: EQUAL
123768: IFTRUE 123772
123770: GO 123783
123772: POP
// bc_type := b_siberite_power ; 33 :
123773: LD_ADDR_OWVAR 42
123777: PUSH
123778: LD_INT 28
123780: ST_TO_ADDR
123781: GO 123822
123783: LD_INT 33
123785: DOUBLE
123786: EQUAL
123787: IFTRUE 123791
123789: GO 123802
123791: POP
// bc_type := b_oil_mine ; 34 :
123792: LD_ADDR_OWVAR 42
123796: PUSH
123797: LD_INT 29
123799: ST_TO_ADDR
123800: GO 123822
123802: LD_INT 34
123804: DOUBLE
123805: EQUAL
123806: IFTRUE 123810
123808: GO 123821
123810: POP
// bc_type := b_siberite_mine ; end ;
123811: LD_ADDR_OWVAR 42
123815: PUSH
123816: LD_INT 30
123818: ST_TO_ADDR
123819: GO 123822
123821: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
123822: LD_ADDR_VAR 0 8
123826: PUSH
123827: LD_VAR 0 5
123831: PPUSH
123832: LD_VAR 0 6
123836: PPUSH
123837: LD_VAR 0 3
123841: PPUSH
123842: CALL_OW 47
123846: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
123847: LD_OWVAR 42
123851: PUSH
123852: LD_INT 32
123854: PUSH
123855: LD_INT 33
123857: PUSH
123858: EMPTY
123859: LIST
123860: LIST
123861: IN
123862: IFFALSE 123878
// PlaceWeaponTurret ( b , weapon ) ;
123864: LD_VAR 0 8
123868: PPUSH
123869: LD_VAR 0 4
123873: PPUSH
123874: CALL_OW 431
// end ;
123878: LD_VAR 0 7
123882: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
123883: LD_INT 0
123885: PPUSH
123886: PPUSH
123887: PPUSH
123888: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
123889: LD_ADDR_VAR 0 4
123893: PUSH
123894: LD_INT 22
123896: PUSH
123897: LD_OWVAR 2
123901: PUSH
123902: EMPTY
123903: LIST
123904: LIST
123905: PUSH
123906: LD_INT 2
123908: PUSH
123909: LD_INT 30
123911: PUSH
123912: LD_INT 0
123914: PUSH
123915: EMPTY
123916: LIST
123917: LIST
123918: PUSH
123919: LD_INT 30
123921: PUSH
123922: LD_INT 1
123924: PUSH
123925: EMPTY
123926: LIST
123927: LIST
123928: PUSH
123929: EMPTY
123930: LIST
123931: LIST
123932: LIST
123933: PUSH
123934: EMPTY
123935: LIST
123936: LIST
123937: PPUSH
123938: CALL_OW 69
123942: ST_TO_ADDR
// if not tmp then
123943: LD_VAR 0 4
123947: NOT
123948: IFFALSE 123952
// exit ;
123950: GO 124011
// for i in tmp do
123952: LD_ADDR_VAR 0 2
123956: PUSH
123957: LD_VAR 0 4
123961: PUSH
123962: FOR_IN
123963: IFFALSE 124009
// for j = 1 to 3 do
123965: LD_ADDR_VAR 0 3
123969: PUSH
123970: DOUBLE
123971: LD_INT 1
123973: DEC
123974: ST_TO_ADDR
123975: LD_INT 3
123977: PUSH
123978: FOR_TO
123979: IFFALSE 124005
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
123981: LD_VAR 0 2
123985: PPUSH
123986: CALL_OW 274
123990: PPUSH
123991: LD_VAR 0 3
123995: PPUSH
123996: LD_INT 99999
123998: PPUSH
123999: CALL_OW 277
124003: GO 123978
124005: POP
124006: POP
124007: GO 123962
124009: POP
124010: POP
// end ;
124011: LD_VAR 0 1
124015: RET
// export function hHackSetLevel10 ; var i , j ; begin
124016: LD_INT 0
124018: PPUSH
124019: PPUSH
124020: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
124021: LD_ADDR_VAR 0 2
124025: PUSH
124026: LD_INT 21
124028: PUSH
124029: LD_INT 1
124031: PUSH
124032: EMPTY
124033: LIST
124034: LIST
124035: PPUSH
124036: CALL_OW 69
124040: PUSH
124041: FOR_IN
124042: IFFALSE 124094
// if IsSelected ( i ) then
124044: LD_VAR 0 2
124048: PPUSH
124049: CALL_OW 306
124053: IFFALSE 124092
// begin for j := 1 to 4 do
124055: LD_ADDR_VAR 0 3
124059: PUSH
124060: DOUBLE
124061: LD_INT 1
124063: DEC
124064: ST_TO_ADDR
124065: LD_INT 4
124067: PUSH
124068: FOR_TO
124069: IFFALSE 124090
// SetSkill ( i , j , 10 ) ;
124071: LD_VAR 0 2
124075: PPUSH
124076: LD_VAR 0 3
124080: PPUSH
124081: LD_INT 10
124083: PPUSH
124084: CALL_OW 237
124088: GO 124068
124090: POP
124091: POP
// end ;
124092: GO 124041
124094: POP
124095: POP
// end ;
124096: LD_VAR 0 1
124100: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
124101: LD_INT 0
124103: PPUSH
124104: PPUSH
124105: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
124106: LD_ADDR_VAR 0 2
124110: PUSH
124111: LD_INT 22
124113: PUSH
124114: LD_OWVAR 2
124118: PUSH
124119: EMPTY
124120: LIST
124121: LIST
124122: PUSH
124123: LD_INT 21
124125: PUSH
124126: LD_INT 1
124128: PUSH
124129: EMPTY
124130: LIST
124131: LIST
124132: PUSH
124133: EMPTY
124134: LIST
124135: LIST
124136: PPUSH
124137: CALL_OW 69
124141: PUSH
124142: FOR_IN
124143: IFFALSE 124184
// begin for j := 1 to 4 do
124145: LD_ADDR_VAR 0 3
124149: PUSH
124150: DOUBLE
124151: LD_INT 1
124153: DEC
124154: ST_TO_ADDR
124155: LD_INT 4
124157: PUSH
124158: FOR_TO
124159: IFFALSE 124180
// SetSkill ( i , j , 10 ) ;
124161: LD_VAR 0 2
124165: PPUSH
124166: LD_VAR 0 3
124170: PPUSH
124171: LD_INT 10
124173: PPUSH
124174: CALL_OW 237
124178: GO 124158
124180: POP
124181: POP
// end ;
124182: GO 124142
124184: POP
124185: POP
// end ;
124186: LD_VAR 0 1
124190: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
124191: LD_INT 0
124193: PPUSH
// uc_side := your_side ;
124194: LD_ADDR_OWVAR 20
124198: PUSH
124199: LD_OWVAR 2
124203: ST_TO_ADDR
// uc_nation := nation ;
124204: LD_ADDR_OWVAR 21
124208: PUSH
124209: LD_VAR 0 1
124213: ST_TO_ADDR
// InitHc ;
124214: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
124218: LD_INT 0
124220: PPUSH
124221: LD_VAR 0 2
124225: PPUSH
124226: LD_VAR 0 3
124230: PPUSH
124231: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
124235: LD_VAR 0 4
124239: PPUSH
124240: LD_VAR 0 5
124244: PPUSH
124245: CALL_OW 428
124249: PUSH
124250: LD_INT 0
124252: EQUAL
124253: IFFALSE 124277
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
124255: CALL_OW 44
124259: PPUSH
124260: LD_VAR 0 4
124264: PPUSH
124265: LD_VAR 0 5
124269: PPUSH
124270: LD_INT 1
124272: PPUSH
124273: CALL_OW 48
// end ;
124277: LD_VAR 0 6
124281: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
124282: LD_INT 0
124284: PPUSH
124285: PPUSH
// uc_side := your_side ;
124286: LD_ADDR_OWVAR 20
124290: PUSH
124291: LD_OWVAR 2
124295: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
124296: LD_VAR 0 1
124300: PUSH
124301: LD_INT 1
124303: PUSH
124304: LD_INT 2
124306: PUSH
124307: LD_INT 3
124309: PUSH
124310: LD_INT 4
124312: PUSH
124313: LD_INT 5
124315: PUSH
124316: EMPTY
124317: LIST
124318: LIST
124319: LIST
124320: LIST
124321: LIST
124322: IN
124323: IFFALSE 124335
// uc_nation := nation_american else
124325: LD_ADDR_OWVAR 21
124329: PUSH
124330: LD_INT 1
124332: ST_TO_ADDR
124333: GO 124378
// if chassis in [ 11 , 12 , 13 , 14 ] then
124335: LD_VAR 0 1
124339: PUSH
124340: LD_INT 11
124342: PUSH
124343: LD_INT 12
124345: PUSH
124346: LD_INT 13
124348: PUSH
124349: LD_INT 14
124351: PUSH
124352: EMPTY
124353: LIST
124354: LIST
124355: LIST
124356: LIST
124357: IN
124358: IFFALSE 124370
// uc_nation := nation_arabian else
124360: LD_ADDR_OWVAR 21
124364: PUSH
124365: LD_INT 2
124367: ST_TO_ADDR
124368: GO 124378
// uc_nation := nation_russian ;
124370: LD_ADDR_OWVAR 21
124374: PUSH
124375: LD_INT 3
124377: ST_TO_ADDR
// vc_chassis := chassis ;
124378: LD_ADDR_OWVAR 37
124382: PUSH
124383: LD_VAR 0 1
124387: ST_TO_ADDR
// vc_engine := engine ;
124388: LD_ADDR_OWVAR 39
124392: PUSH
124393: LD_VAR 0 2
124397: ST_TO_ADDR
// vc_control := control ;
124398: LD_ADDR_OWVAR 38
124402: PUSH
124403: LD_VAR 0 3
124407: ST_TO_ADDR
// vc_weapon := weapon ;
124408: LD_ADDR_OWVAR 40
124412: PUSH
124413: LD_VAR 0 4
124417: ST_TO_ADDR
// un := CreateVehicle ;
124418: LD_ADDR_VAR 0 8
124422: PUSH
124423: CALL_OW 45
124427: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
124428: LD_VAR 0 8
124432: PPUSH
124433: LD_INT 0
124435: PPUSH
124436: LD_INT 5
124438: PPUSH
124439: CALL_OW 12
124443: PPUSH
124444: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
124448: LD_VAR 0 8
124452: PPUSH
124453: LD_VAR 0 5
124457: PPUSH
124458: LD_VAR 0 6
124462: PPUSH
124463: LD_INT 1
124465: PPUSH
124466: CALL_OW 48
// end ;
124470: LD_VAR 0 7
124474: RET
// export hInvincible ; every 1 do
124475: GO 124477
124477: DISABLE
// hInvincible := [ ] ;
124478: LD_ADDR_EXP 204
124482: PUSH
124483: EMPTY
124484: ST_TO_ADDR
124485: END
// every 10 do var i ;
124486: GO 124488
124488: DISABLE
124489: LD_INT 0
124491: PPUSH
// begin enable ;
124492: ENABLE
// if not hInvincible then
124493: LD_EXP 204
124497: NOT
124498: IFFALSE 124502
// exit ;
124500: GO 124546
// for i in hInvincible do
124502: LD_ADDR_VAR 0 1
124506: PUSH
124507: LD_EXP 204
124511: PUSH
124512: FOR_IN
124513: IFFALSE 124544
// if GetLives ( i ) < 1000 then
124515: LD_VAR 0 1
124519: PPUSH
124520: CALL_OW 256
124524: PUSH
124525: LD_INT 1000
124527: LESS
124528: IFFALSE 124542
// SetLives ( i , 1000 ) ;
124530: LD_VAR 0 1
124534: PPUSH
124535: LD_INT 1000
124537: PPUSH
124538: CALL_OW 234
124542: GO 124512
124544: POP
124545: POP
// end ;
124546: PPOPN 1
124548: END
// export function hHackInvincible ; var i ; begin
124549: LD_INT 0
124551: PPUSH
124552: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
124553: LD_ADDR_VAR 0 2
124557: PUSH
124558: LD_INT 2
124560: PUSH
124561: LD_INT 21
124563: PUSH
124564: LD_INT 1
124566: PUSH
124567: EMPTY
124568: LIST
124569: LIST
124570: PUSH
124571: LD_INT 21
124573: PUSH
124574: LD_INT 2
124576: PUSH
124577: EMPTY
124578: LIST
124579: LIST
124580: PUSH
124581: EMPTY
124582: LIST
124583: LIST
124584: LIST
124585: PPUSH
124586: CALL_OW 69
124590: PUSH
124591: FOR_IN
124592: IFFALSE 124653
// if IsSelected ( i ) then
124594: LD_VAR 0 2
124598: PPUSH
124599: CALL_OW 306
124603: IFFALSE 124651
// begin if i in hInvincible then
124605: LD_VAR 0 2
124609: PUSH
124610: LD_EXP 204
124614: IN
124615: IFFALSE 124635
// hInvincible := hInvincible diff i else
124617: LD_ADDR_EXP 204
124621: PUSH
124622: LD_EXP 204
124626: PUSH
124627: LD_VAR 0 2
124631: DIFF
124632: ST_TO_ADDR
124633: GO 124651
// hInvincible := hInvincible union i ;
124635: LD_ADDR_EXP 204
124639: PUSH
124640: LD_EXP 204
124644: PUSH
124645: LD_VAR 0 2
124649: UNION
124650: ST_TO_ADDR
// end ;
124651: GO 124591
124653: POP
124654: POP
// end ;
124655: LD_VAR 0 1
124659: RET
// export function hHackInvisible ; var i , j ; begin
124660: LD_INT 0
124662: PPUSH
124663: PPUSH
124664: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
124665: LD_ADDR_VAR 0 2
124669: PUSH
124670: LD_INT 21
124672: PUSH
124673: LD_INT 1
124675: PUSH
124676: EMPTY
124677: LIST
124678: LIST
124679: PPUSH
124680: CALL_OW 69
124684: PUSH
124685: FOR_IN
124686: IFFALSE 124710
// if IsSelected ( i ) then
124688: LD_VAR 0 2
124692: PPUSH
124693: CALL_OW 306
124697: IFFALSE 124708
// ComForceInvisible ( i ) ;
124699: LD_VAR 0 2
124703: PPUSH
124704: CALL_OW 496
124708: GO 124685
124710: POP
124711: POP
// end ;
124712: LD_VAR 0 1
124716: RET
// export function hHackChangeYourSide ; begin
124717: LD_INT 0
124719: PPUSH
// if your_side = 8 then
124720: LD_OWVAR 2
124724: PUSH
124725: LD_INT 8
124727: EQUAL
124728: IFFALSE 124740
// your_side := 0 else
124730: LD_ADDR_OWVAR 2
124734: PUSH
124735: LD_INT 0
124737: ST_TO_ADDR
124738: GO 124754
// your_side := your_side + 1 ;
124740: LD_ADDR_OWVAR 2
124744: PUSH
124745: LD_OWVAR 2
124749: PUSH
124750: LD_INT 1
124752: PLUS
124753: ST_TO_ADDR
// end ;
124754: LD_VAR 0 1
124758: RET
// export function hHackChangeUnitSide ; var i , j ; begin
124759: LD_INT 0
124761: PPUSH
124762: PPUSH
124763: PPUSH
// for i in all_units do
124764: LD_ADDR_VAR 0 2
124768: PUSH
124769: LD_OWVAR 3
124773: PUSH
124774: FOR_IN
124775: IFFALSE 124853
// if IsSelected ( i ) then
124777: LD_VAR 0 2
124781: PPUSH
124782: CALL_OW 306
124786: IFFALSE 124851
// begin j := GetSide ( i ) ;
124788: LD_ADDR_VAR 0 3
124792: PUSH
124793: LD_VAR 0 2
124797: PPUSH
124798: CALL_OW 255
124802: ST_TO_ADDR
// if j = 8 then
124803: LD_VAR 0 3
124807: PUSH
124808: LD_INT 8
124810: EQUAL
124811: IFFALSE 124823
// j := 0 else
124813: LD_ADDR_VAR 0 3
124817: PUSH
124818: LD_INT 0
124820: ST_TO_ADDR
124821: GO 124837
// j := j + 1 ;
124823: LD_ADDR_VAR 0 3
124827: PUSH
124828: LD_VAR 0 3
124832: PUSH
124833: LD_INT 1
124835: PLUS
124836: ST_TO_ADDR
// SetSide ( i , j ) ;
124837: LD_VAR 0 2
124841: PPUSH
124842: LD_VAR 0 3
124846: PPUSH
124847: CALL_OW 235
// end ;
124851: GO 124774
124853: POP
124854: POP
// end ;
124855: LD_VAR 0 1
124859: RET
// export function hHackFog ; begin
124860: LD_INT 0
124862: PPUSH
// FogOff ( true ) ;
124863: LD_INT 1
124865: PPUSH
124866: CALL_OW 344
// end ;
124870: LD_VAR 0 1
124874: RET
// export function hHackTeleport ( unit , x , y ) ; begin
124875: LD_INT 0
124877: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
124878: LD_VAR 0 1
124882: PPUSH
124883: LD_VAR 0 2
124887: PPUSH
124888: LD_VAR 0 3
124892: PPUSH
124893: LD_INT 1
124895: PPUSH
124896: LD_INT 1
124898: PPUSH
124899: CALL_OW 483
// CenterOnXY ( x , y ) ;
124903: LD_VAR 0 2
124907: PPUSH
124908: LD_VAR 0 3
124912: PPUSH
124913: CALL_OW 84
// end ;
124917: LD_VAR 0 4
124921: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
124922: LD_INT 0
124924: PPUSH
124925: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
124926: LD_VAR 0 1
124930: NOT
124931: PUSH
124932: LD_VAR 0 2
124936: PPUSH
124937: LD_VAR 0 3
124941: PPUSH
124942: CALL_OW 488
124946: NOT
124947: OR
124948: PUSH
124949: LD_VAR 0 1
124953: PPUSH
124954: CALL_OW 266
124958: PUSH
124959: LD_INT 3
124961: NONEQUAL
124962: PUSH
124963: LD_VAR 0 1
124967: PPUSH
124968: CALL_OW 247
124972: PUSH
124973: LD_INT 1
124975: EQUAL
124976: NOT
124977: AND
124978: OR
124979: IFFALSE 124983
// exit ;
124981: GO 125132
// if GetType ( factory ) = unit_human then
124983: LD_VAR 0 1
124987: PPUSH
124988: CALL_OW 247
124992: PUSH
124993: LD_INT 1
124995: EQUAL
124996: IFFALSE 125013
// factory := IsInUnit ( factory ) ;
124998: LD_ADDR_VAR 0 1
125002: PUSH
125003: LD_VAR 0 1
125007: PPUSH
125008: CALL_OW 310
125012: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
125013: LD_VAR 0 1
125017: PPUSH
125018: CALL_OW 266
125022: PUSH
125023: LD_INT 3
125025: NONEQUAL
125026: IFFALSE 125030
// exit ;
125028: GO 125132
// if HexInfo ( x , y ) = factory then
125030: LD_VAR 0 2
125034: PPUSH
125035: LD_VAR 0 3
125039: PPUSH
125040: CALL_OW 428
125044: PUSH
125045: LD_VAR 0 1
125049: EQUAL
125050: IFFALSE 125077
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
125052: LD_ADDR_EXP 205
125056: PUSH
125057: LD_EXP 205
125061: PPUSH
125062: LD_VAR 0 1
125066: PPUSH
125067: LD_INT 0
125069: PPUSH
125070: CALL_OW 1
125074: ST_TO_ADDR
125075: GO 125128
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
125077: LD_ADDR_EXP 205
125081: PUSH
125082: LD_EXP 205
125086: PPUSH
125087: LD_VAR 0 1
125091: PPUSH
125092: LD_VAR 0 1
125096: PPUSH
125097: CALL_OW 255
125101: PUSH
125102: LD_VAR 0 1
125106: PUSH
125107: LD_VAR 0 2
125111: PUSH
125112: LD_VAR 0 3
125116: PUSH
125117: EMPTY
125118: LIST
125119: LIST
125120: LIST
125121: LIST
125122: PPUSH
125123: CALL_OW 1
125127: ST_TO_ADDR
// UpdateFactoryWaypoints ;
125128: CALL 125137 0 0
// end ;
125132: LD_VAR 0 4
125136: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
125137: LD_INT 0
125139: PPUSH
125140: PPUSH
125141: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
125142: LD_STRING resetFactoryWaypoint();
125144: PPUSH
125145: CALL_OW 559
// if factoryWaypoints then
125149: LD_EXP 205
125153: IFFALSE 125279
// begin list := PrepareArray ( factoryWaypoints ) ;
125155: LD_ADDR_VAR 0 3
125159: PUSH
125160: LD_EXP 205
125164: PPUSH
125165: CALL 110117 0 1
125169: ST_TO_ADDR
// for i := 1 to list do
125170: LD_ADDR_VAR 0 2
125174: PUSH
125175: DOUBLE
125176: LD_INT 1
125178: DEC
125179: ST_TO_ADDR
125180: LD_VAR 0 3
125184: PUSH
125185: FOR_TO
125186: IFFALSE 125277
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
125188: LD_STRING setFactoryWaypointXY(
125190: PUSH
125191: LD_VAR 0 3
125195: PUSH
125196: LD_VAR 0 2
125200: ARRAY
125201: PUSH
125202: LD_INT 1
125204: ARRAY
125205: STR
125206: PUSH
125207: LD_STRING ,
125209: STR
125210: PUSH
125211: LD_VAR 0 3
125215: PUSH
125216: LD_VAR 0 2
125220: ARRAY
125221: PUSH
125222: LD_INT 2
125224: ARRAY
125225: STR
125226: PUSH
125227: LD_STRING ,
125229: STR
125230: PUSH
125231: LD_VAR 0 3
125235: PUSH
125236: LD_VAR 0 2
125240: ARRAY
125241: PUSH
125242: LD_INT 3
125244: ARRAY
125245: STR
125246: PUSH
125247: LD_STRING ,
125249: STR
125250: PUSH
125251: LD_VAR 0 3
125255: PUSH
125256: LD_VAR 0 2
125260: ARRAY
125261: PUSH
125262: LD_INT 4
125264: ARRAY
125265: STR
125266: PUSH
125267: LD_STRING )
125269: STR
125270: PPUSH
125271: CALL_OW 559
125275: GO 125185
125277: POP
125278: POP
// end ; end ;
125279: LD_VAR 0 1
125283: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
125284: LD_INT 0
125286: PPUSH
// if HexInfo ( x , y ) = warehouse then
125287: LD_VAR 0 2
125291: PPUSH
125292: LD_VAR 0 3
125296: PPUSH
125297: CALL_OW 428
125301: PUSH
125302: LD_VAR 0 1
125306: EQUAL
125307: IFFALSE 125334
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
125309: LD_ADDR_EXP 206
125313: PUSH
125314: LD_EXP 206
125318: PPUSH
125319: LD_VAR 0 1
125323: PPUSH
125324: LD_INT 0
125326: PPUSH
125327: CALL_OW 1
125331: ST_TO_ADDR
125332: GO 125385
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
125334: LD_ADDR_EXP 206
125338: PUSH
125339: LD_EXP 206
125343: PPUSH
125344: LD_VAR 0 1
125348: PPUSH
125349: LD_VAR 0 1
125353: PPUSH
125354: CALL_OW 255
125358: PUSH
125359: LD_VAR 0 1
125363: PUSH
125364: LD_VAR 0 2
125368: PUSH
125369: LD_VAR 0 3
125373: PUSH
125374: EMPTY
125375: LIST
125376: LIST
125377: LIST
125378: LIST
125379: PPUSH
125380: CALL_OW 1
125384: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
125385: CALL 125394 0 0
// end ;
125389: LD_VAR 0 4
125393: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
125394: LD_INT 0
125396: PPUSH
125397: PPUSH
125398: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
125399: LD_STRING resetWarehouseGatheringPoints();
125401: PPUSH
125402: CALL_OW 559
// if warehouseGatheringPoints then
125406: LD_EXP 206
125410: IFFALSE 125536
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
125412: LD_ADDR_VAR 0 3
125416: PUSH
125417: LD_EXP 206
125421: PPUSH
125422: CALL 110117 0 1
125426: ST_TO_ADDR
// for i := 1 to list do
125427: LD_ADDR_VAR 0 2
125431: PUSH
125432: DOUBLE
125433: LD_INT 1
125435: DEC
125436: ST_TO_ADDR
125437: LD_VAR 0 3
125441: PUSH
125442: FOR_TO
125443: IFFALSE 125534
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
125445: LD_STRING setWarehouseGatheringPointXY(
125447: PUSH
125448: LD_VAR 0 3
125452: PUSH
125453: LD_VAR 0 2
125457: ARRAY
125458: PUSH
125459: LD_INT 1
125461: ARRAY
125462: STR
125463: PUSH
125464: LD_STRING ,
125466: STR
125467: PUSH
125468: LD_VAR 0 3
125472: PUSH
125473: LD_VAR 0 2
125477: ARRAY
125478: PUSH
125479: LD_INT 2
125481: ARRAY
125482: STR
125483: PUSH
125484: LD_STRING ,
125486: STR
125487: PUSH
125488: LD_VAR 0 3
125492: PUSH
125493: LD_VAR 0 2
125497: ARRAY
125498: PUSH
125499: LD_INT 3
125501: ARRAY
125502: STR
125503: PUSH
125504: LD_STRING ,
125506: STR
125507: PUSH
125508: LD_VAR 0 3
125512: PUSH
125513: LD_VAR 0 2
125517: ARRAY
125518: PUSH
125519: LD_INT 4
125521: ARRAY
125522: STR
125523: PUSH
125524: LD_STRING )
125526: STR
125527: PPUSH
125528: CALL_OW 559
125532: GO 125442
125534: POP
125535: POP
// end ; end ;
125536: LD_VAR 0 1
125540: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
125541: LD_EXP 206
125545: IFFALSE 126230
125547: GO 125549
125549: DISABLE
125550: LD_INT 0
125552: PPUSH
125553: PPUSH
125554: PPUSH
125555: PPUSH
125556: PPUSH
125557: PPUSH
125558: PPUSH
125559: PPUSH
125560: PPUSH
// begin enable ;
125561: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
125562: LD_ADDR_VAR 0 3
125566: PUSH
125567: LD_EXP 206
125571: PPUSH
125572: CALL 110117 0 1
125576: ST_TO_ADDR
// if not list then
125577: LD_VAR 0 3
125581: NOT
125582: IFFALSE 125586
// exit ;
125584: GO 126230
// for i := 1 to list do
125586: LD_ADDR_VAR 0 1
125590: PUSH
125591: DOUBLE
125592: LD_INT 1
125594: DEC
125595: ST_TO_ADDR
125596: LD_VAR 0 3
125600: PUSH
125601: FOR_TO
125602: IFFALSE 126228
// begin depot := list [ i ] [ 2 ] ;
125604: LD_ADDR_VAR 0 8
125608: PUSH
125609: LD_VAR 0 3
125613: PUSH
125614: LD_VAR 0 1
125618: ARRAY
125619: PUSH
125620: LD_INT 2
125622: ARRAY
125623: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
125624: LD_ADDR_VAR 0 5
125628: PUSH
125629: LD_VAR 0 3
125633: PUSH
125634: LD_VAR 0 1
125638: ARRAY
125639: PUSH
125640: LD_INT 1
125642: ARRAY
125643: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
125644: LD_VAR 0 8
125648: PPUSH
125649: CALL_OW 301
125653: PUSH
125654: LD_VAR 0 5
125658: PUSH
125659: LD_VAR 0 8
125663: PPUSH
125664: CALL_OW 255
125668: NONEQUAL
125669: OR
125670: IFFALSE 125699
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
125672: LD_ADDR_EXP 206
125676: PUSH
125677: LD_EXP 206
125681: PPUSH
125682: LD_VAR 0 8
125686: PPUSH
125687: LD_INT 0
125689: PPUSH
125690: CALL_OW 1
125694: ST_TO_ADDR
// exit ;
125695: POP
125696: POP
125697: GO 126230
// end ; x := list [ i ] [ 3 ] ;
125699: LD_ADDR_VAR 0 6
125703: PUSH
125704: LD_VAR 0 3
125708: PUSH
125709: LD_VAR 0 1
125713: ARRAY
125714: PUSH
125715: LD_INT 3
125717: ARRAY
125718: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
125719: LD_ADDR_VAR 0 7
125723: PUSH
125724: LD_VAR 0 3
125728: PUSH
125729: LD_VAR 0 1
125733: ARRAY
125734: PUSH
125735: LD_INT 4
125737: ARRAY
125738: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
125739: LD_ADDR_VAR 0 9
125743: PUSH
125744: LD_VAR 0 6
125748: PPUSH
125749: LD_VAR 0 7
125753: PPUSH
125754: LD_INT 16
125756: PPUSH
125757: CALL 108705 0 3
125761: ST_TO_ADDR
// if not cratesNearbyPoint then
125762: LD_VAR 0 9
125766: NOT
125767: IFFALSE 125773
// exit ;
125769: POP
125770: POP
125771: GO 126230
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
125773: LD_ADDR_VAR 0 4
125777: PUSH
125778: LD_INT 22
125780: PUSH
125781: LD_VAR 0 5
125785: PUSH
125786: EMPTY
125787: LIST
125788: LIST
125789: PUSH
125790: LD_INT 3
125792: PUSH
125793: LD_INT 60
125795: PUSH
125796: EMPTY
125797: LIST
125798: PUSH
125799: EMPTY
125800: LIST
125801: LIST
125802: PUSH
125803: LD_INT 91
125805: PUSH
125806: LD_VAR 0 8
125810: PUSH
125811: LD_INT 6
125813: PUSH
125814: EMPTY
125815: LIST
125816: LIST
125817: LIST
125818: PUSH
125819: LD_INT 2
125821: PUSH
125822: LD_INT 25
125824: PUSH
125825: LD_INT 2
125827: PUSH
125828: EMPTY
125829: LIST
125830: LIST
125831: PUSH
125832: LD_INT 25
125834: PUSH
125835: LD_INT 16
125837: PUSH
125838: EMPTY
125839: LIST
125840: LIST
125841: PUSH
125842: EMPTY
125843: LIST
125844: LIST
125845: LIST
125846: PUSH
125847: EMPTY
125848: LIST
125849: LIST
125850: LIST
125851: LIST
125852: PPUSH
125853: CALL_OW 69
125857: PUSH
125858: LD_VAR 0 8
125862: PPUSH
125863: CALL_OW 313
125867: PPUSH
125868: LD_INT 3
125870: PUSH
125871: LD_INT 60
125873: PUSH
125874: EMPTY
125875: LIST
125876: PUSH
125877: EMPTY
125878: LIST
125879: LIST
125880: PUSH
125881: LD_INT 2
125883: PUSH
125884: LD_INT 25
125886: PUSH
125887: LD_INT 2
125889: PUSH
125890: EMPTY
125891: LIST
125892: LIST
125893: PUSH
125894: LD_INT 25
125896: PUSH
125897: LD_INT 16
125899: PUSH
125900: EMPTY
125901: LIST
125902: LIST
125903: PUSH
125904: EMPTY
125905: LIST
125906: LIST
125907: LIST
125908: PUSH
125909: EMPTY
125910: LIST
125911: LIST
125912: PPUSH
125913: CALL_OW 72
125917: UNION
125918: ST_TO_ADDR
// if tmp then
125919: LD_VAR 0 4
125923: IFFALSE 126003
// begin tmp := ShrinkArray ( tmp , 3 ) ;
125925: LD_ADDR_VAR 0 4
125929: PUSH
125930: LD_VAR 0 4
125934: PPUSH
125935: LD_INT 3
125937: PPUSH
125938: CALL 106674 0 2
125942: ST_TO_ADDR
// for j in tmp do
125943: LD_ADDR_VAR 0 2
125947: PUSH
125948: LD_VAR 0 4
125952: PUSH
125953: FOR_IN
125954: IFFALSE 125997
// begin if IsInUnit ( j ) then
125956: LD_VAR 0 2
125960: PPUSH
125961: CALL_OW 310
125965: IFFALSE 125976
// ComExit ( j ) ;
125967: LD_VAR 0 2
125971: PPUSH
125972: CALL 106757 0 1
// AddComCollect ( j , x , y ) ;
125976: LD_VAR 0 2
125980: PPUSH
125981: LD_VAR 0 6
125985: PPUSH
125986: LD_VAR 0 7
125990: PPUSH
125991: CALL_OW 177
// end ;
125995: GO 125953
125997: POP
125998: POP
// exit ;
125999: POP
126000: POP
126001: GO 126230
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
126003: LD_ADDR_VAR 0 4
126007: PUSH
126008: LD_INT 22
126010: PUSH
126011: LD_VAR 0 5
126015: PUSH
126016: EMPTY
126017: LIST
126018: LIST
126019: PUSH
126020: LD_INT 91
126022: PUSH
126023: LD_VAR 0 8
126027: PUSH
126028: LD_INT 8
126030: PUSH
126031: EMPTY
126032: LIST
126033: LIST
126034: LIST
126035: PUSH
126036: LD_INT 2
126038: PUSH
126039: LD_INT 34
126041: PUSH
126042: LD_INT 12
126044: PUSH
126045: EMPTY
126046: LIST
126047: LIST
126048: PUSH
126049: LD_INT 34
126051: PUSH
126052: LD_INT 51
126054: PUSH
126055: EMPTY
126056: LIST
126057: LIST
126058: PUSH
126059: LD_INT 34
126061: PUSH
126062: LD_INT 32
126064: PUSH
126065: EMPTY
126066: LIST
126067: LIST
126068: PUSH
126069: LD_INT 34
126071: PUSH
126072: LD_INT 89
126074: PUSH
126075: EMPTY
126076: LIST
126077: LIST
126078: PUSH
126079: EMPTY
126080: LIST
126081: LIST
126082: LIST
126083: LIST
126084: LIST
126085: PUSH
126086: EMPTY
126087: LIST
126088: LIST
126089: LIST
126090: PPUSH
126091: CALL_OW 69
126095: ST_TO_ADDR
// if tmp then
126096: LD_VAR 0 4
126100: IFFALSE 126226
// begin for j in tmp do
126102: LD_ADDR_VAR 0 2
126106: PUSH
126107: LD_VAR 0 4
126111: PUSH
126112: FOR_IN
126113: IFFALSE 126224
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
126115: LD_VAR 0 2
126119: PPUSH
126120: CALL_OW 262
126124: PUSH
126125: LD_INT 3
126127: EQUAL
126128: PUSH
126129: LD_VAR 0 2
126133: PPUSH
126134: CALL_OW 261
126138: PUSH
126139: LD_INT 20
126141: GREATER
126142: OR
126143: PUSH
126144: LD_VAR 0 2
126148: PPUSH
126149: CALL_OW 314
126153: NOT
126154: AND
126155: PUSH
126156: LD_VAR 0 2
126160: PPUSH
126161: CALL_OW 263
126165: PUSH
126166: LD_INT 1
126168: NONEQUAL
126169: PUSH
126170: LD_VAR 0 2
126174: PPUSH
126175: CALL_OW 311
126179: OR
126180: AND
126181: IFFALSE 126222
// begin ComCollect ( j , x , y ) ;
126183: LD_VAR 0 2
126187: PPUSH
126188: LD_VAR 0 6
126192: PPUSH
126193: LD_VAR 0 7
126197: PPUSH
126198: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
126202: LD_VAR 0 2
126206: PPUSH
126207: LD_VAR 0 8
126211: PPUSH
126212: CALL_OW 172
// exit ;
126216: POP
126217: POP
126218: POP
126219: POP
126220: GO 126230
// end ;
126222: GO 126112
126224: POP
126225: POP
// end ; end ;
126226: GO 125601
126228: POP
126229: POP
// end ; end_of_file
126230: PPOPN 9
126232: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
126233: LD_INT 0
126235: PPUSH
126236: PPUSH
126237: PPUSH
126238: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
126239: LD_VAR 0 1
126243: PPUSH
126244: CALL_OW 264
126248: PUSH
126249: LD_INT 91
126251: EQUAL
126252: IFFALSE 126324
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
126254: LD_INT 68
126256: PPUSH
126257: LD_VAR 0 1
126261: PPUSH
126262: CALL_OW 255
126266: PPUSH
126267: CALL_OW 321
126271: PUSH
126272: LD_INT 2
126274: EQUAL
126275: IFFALSE 126287
// eff := 70 else
126277: LD_ADDR_VAR 0 4
126281: PUSH
126282: LD_INT 70
126284: ST_TO_ADDR
126285: GO 126295
// eff := 30 ;
126287: LD_ADDR_VAR 0 4
126291: PUSH
126292: LD_INT 30
126294: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
126295: LD_VAR 0 1
126299: PPUSH
126300: CALL_OW 250
126304: PPUSH
126305: LD_VAR 0 1
126309: PPUSH
126310: CALL_OW 251
126314: PPUSH
126315: LD_VAR 0 4
126319: PPUSH
126320: CALL_OW 495
// end ; end ;
126324: LD_VAR 0 2
126328: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
126329: LD_INT 0
126331: PPUSH
// end ;
126332: LD_VAR 0 4
126336: RET
// export function SOS_Command ( cmd ) ; begin
126337: LD_INT 0
126339: PPUSH
// end ;
126340: LD_VAR 0 2
126344: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
126345: LD_INT 0
126347: PPUSH
// end ;
126348: LD_VAR 0 6
126352: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
126353: LD_INT 0
126355: PPUSH
126356: PPUSH
// if not vehicle or not factory then
126357: LD_VAR 0 1
126361: NOT
126362: PUSH
126363: LD_VAR 0 2
126367: NOT
126368: OR
126369: IFFALSE 126373
// exit ;
126371: GO 126604
// if factoryWaypoints >= factory then
126373: LD_EXP 205
126377: PUSH
126378: LD_VAR 0 2
126382: GREATEREQUAL
126383: IFFALSE 126604
// if factoryWaypoints [ factory ] then
126385: LD_EXP 205
126389: PUSH
126390: LD_VAR 0 2
126394: ARRAY
126395: IFFALSE 126604
// begin if GetControl ( vehicle ) = control_manual then
126397: LD_VAR 0 1
126401: PPUSH
126402: CALL_OW 263
126406: PUSH
126407: LD_INT 1
126409: EQUAL
126410: IFFALSE 126491
// begin driver := IsDrivenBy ( vehicle ) ;
126412: LD_ADDR_VAR 0 4
126416: PUSH
126417: LD_VAR 0 1
126421: PPUSH
126422: CALL_OW 311
126426: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
126427: LD_VAR 0 4
126431: PPUSH
126432: LD_EXP 205
126436: PUSH
126437: LD_VAR 0 2
126441: ARRAY
126442: PUSH
126443: LD_INT 3
126445: ARRAY
126446: PPUSH
126447: LD_EXP 205
126451: PUSH
126452: LD_VAR 0 2
126456: ARRAY
126457: PUSH
126458: LD_INT 4
126460: ARRAY
126461: PPUSH
126462: CALL_OW 171
// AddComExitVehicle ( driver ) ;
126466: LD_VAR 0 4
126470: PPUSH
126471: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
126475: LD_VAR 0 4
126479: PPUSH
126480: LD_VAR 0 2
126484: PPUSH
126485: CALL_OW 180
// end else
126489: GO 126604
// if GetControl ( vehicle ) = control_remote then
126491: LD_VAR 0 1
126495: PPUSH
126496: CALL_OW 263
126500: PUSH
126501: LD_INT 2
126503: EQUAL
126504: IFFALSE 126565
// begin wait ( 0 0$2 ) ;
126506: LD_INT 70
126508: PPUSH
126509: CALL_OW 67
// if Connect ( vehicle ) then
126513: LD_VAR 0 1
126517: PPUSH
126518: CALL 76998 0 1
126522: IFFALSE 126563
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
126524: LD_VAR 0 1
126528: PPUSH
126529: LD_EXP 205
126533: PUSH
126534: LD_VAR 0 2
126538: ARRAY
126539: PUSH
126540: LD_INT 3
126542: ARRAY
126543: PPUSH
126544: LD_EXP 205
126548: PUSH
126549: LD_VAR 0 2
126553: ARRAY
126554: PUSH
126555: LD_INT 4
126557: ARRAY
126558: PPUSH
126559: CALL_OW 171
// end else
126563: GO 126604
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
126565: LD_VAR 0 1
126569: PPUSH
126570: LD_EXP 205
126574: PUSH
126575: LD_VAR 0 2
126579: ARRAY
126580: PUSH
126581: LD_INT 3
126583: ARRAY
126584: PPUSH
126585: LD_EXP 205
126589: PUSH
126590: LD_VAR 0 2
126594: ARRAY
126595: PUSH
126596: LD_INT 4
126598: ARRAY
126599: PPUSH
126600: CALL_OW 171
// end ; end ;
126604: LD_VAR 0 3
126608: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
126609: LD_INT 0
126611: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
126612: LD_VAR 0 1
126616: PUSH
126617: LD_INT 250
126619: EQUAL
126620: PUSH
126621: LD_VAR 0 2
126625: PPUSH
126626: CALL_OW 264
126630: PUSH
126631: LD_INT 81
126633: EQUAL
126634: AND
126635: IFFALSE 126656
// MinerPlaceMine ( unit , x , y ) ;
126637: LD_VAR 0 2
126641: PPUSH
126642: LD_VAR 0 4
126646: PPUSH
126647: LD_VAR 0 5
126651: PPUSH
126652: CALL 129041 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
126656: LD_VAR 0 1
126660: PUSH
126661: LD_INT 251
126663: EQUAL
126664: PUSH
126665: LD_VAR 0 2
126669: PPUSH
126670: CALL_OW 264
126674: PUSH
126675: LD_INT 81
126677: EQUAL
126678: AND
126679: IFFALSE 126700
// MinerDetonateMine ( unit , x , y ) ;
126681: LD_VAR 0 2
126685: PPUSH
126686: LD_VAR 0 4
126690: PPUSH
126691: LD_VAR 0 5
126695: PPUSH
126696: CALL 129316 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
126700: LD_VAR 0 1
126704: PUSH
126705: LD_INT 252
126707: EQUAL
126708: PUSH
126709: LD_VAR 0 2
126713: PPUSH
126714: CALL_OW 264
126718: PUSH
126719: LD_INT 81
126721: EQUAL
126722: AND
126723: IFFALSE 126744
// MinerCreateMinefield ( unit , x , y ) ;
126725: LD_VAR 0 2
126729: PPUSH
126730: LD_VAR 0 4
126734: PPUSH
126735: LD_VAR 0 5
126739: PPUSH
126740: CALL 129733 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
126744: LD_VAR 0 1
126748: PUSH
126749: LD_INT 253
126751: EQUAL
126752: PUSH
126753: LD_VAR 0 2
126757: PPUSH
126758: CALL_OW 257
126762: PUSH
126763: LD_INT 5
126765: EQUAL
126766: AND
126767: IFFALSE 126788
// ComBinocular ( unit , x , y ) ;
126769: LD_VAR 0 2
126773: PPUSH
126774: LD_VAR 0 4
126778: PPUSH
126779: LD_VAR 0 5
126783: PPUSH
126784: CALL 130102 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
126788: LD_VAR 0 1
126792: PUSH
126793: LD_INT 254
126795: EQUAL
126796: PUSH
126797: LD_VAR 0 2
126801: PPUSH
126802: CALL_OW 264
126806: PUSH
126807: LD_INT 99
126809: EQUAL
126810: AND
126811: PUSH
126812: LD_VAR 0 3
126816: PPUSH
126817: CALL_OW 263
126821: PUSH
126822: LD_INT 3
126824: EQUAL
126825: AND
126826: IFFALSE 126842
// HackDestroyVehicle ( unit , selectedUnit ) ;
126828: LD_VAR 0 2
126832: PPUSH
126833: LD_VAR 0 3
126837: PPUSH
126838: CALL 128405 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
126842: LD_VAR 0 1
126846: PUSH
126847: LD_INT 255
126849: EQUAL
126850: PUSH
126851: LD_VAR 0 2
126855: PPUSH
126856: CALL_OW 264
126860: PUSH
126861: LD_INT 14
126863: PUSH
126864: LD_INT 53
126866: PUSH
126867: EMPTY
126868: LIST
126869: LIST
126870: IN
126871: AND
126872: PUSH
126873: LD_VAR 0 4
126877: PPUSH
126878: LD_VAR 0 5
126882: PPUSH
126883: CALL_OW 488
126887: AND
126888: IFFALSE 126912
// CutTreeXYR ( unit , x , y , 12 ) ;
126890: LD_VAR 0 2
126894: PPUSH
126895: LD_VAR 0 4
126899: PPUSH
126900: LD_VAR 0 5
126904: PPUSH
126905: LD_INT 12
126907: PPUSH
126908: CALL 126975 0 4
// if cmd = 256 then
126912: LD_VAR 0 1
126916: PUSH
126917: LD_INT 256
126919: EQUAL
126920: IFFALSE 126941
// SetFactoryWaypoint ( unit , x , y ) ;
126922: LD_VAR 0 2
126926: PPUSH
126927: LD_VAR 0 4
126931: PPUSH
126932: LD_VAR 0 5
126936: PPUSH
126937: CALL 124922 0 3
// if cmd = 257 then
126941: LD_VAR 0 1
126945: PUSH
126946: LD_INT 257
126948: EQUAL
126949: IFFALSE 126970
// SetWarehouseGatheringPoint ( unit , x , y ) ;
126951: LD_VAR 0 2
126955: PPUSH
126956: LD_VAR 0 4
126960: PPUSH
126961: LD_VAR 0 5
126965: PPUSH
126966: CALL 125284 0 3
// end ;
126970: LD_VAR 0 6
126974: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
126975: LD_INT 0
126977: PPUSH
126978: PPUSH
126979: PPUSH
126980: PPUSH
126981: PPUSH
126982: PPUSH
126983: PPUSH
126984: PPUSH
126985: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
126986: LD_VAR 0 1
126990: NOT
126991: PUSH
126992: LD_VAR 0 2
126996: PPUSH
126997: LD_VAR 0 3
127001: PPUSH
127002: CALL_OW 488
127006: NOT
127007: OR
127008: PUSH
127009: LD_VAR 0 4
127013: NOT
127014: OR
127015: IFFALSE 127019
// exit ;
127017: GO 127359
// list := [ ] ;
127019: LD_ADDR_VAR 0 13
127023: PUSH
127024: EMPTY
127025: ST_TO_ADDR
// if x - r < 0 then
127026: LD_VAR 0 2
127030: PUSH
127031: LD_VAR 0 4
127035: MINUS
127036: PUSH
127037: LD_INT 0
127039: LESS
127040: IFFALSE 127052
// min_x := 0 else
127042: LD_ADDR_VAR 0 7
127046: PUSH
127047: LD_INT 0
127049: ST_TO_ADDR
127050: GO 127068
// min_x := x - r ;
127052: LD_ADDR_VAR 0 7
127056: PUSH
127057: LD_VAR 0 2
127061: PUSH
127062: LD_VAR 0 4
127066: MINUS
127067: ST_TO_ADDR
// if y - r < 0 then
127068: LD_VAR 0 3
127072: PUSH
127073: LD_VAR 0 4
127077: MINUS
127078: PUSH
127079: LD_INT 0
127081: LESS
127082: IFFALSE 127094
// min_y := 0 else
127084: LD_ADDR_VAR 0 8
127088: PUSH
127089: LD_INT 0
127091: ST_TO_ADDR
127092: GO 127110
// min_y := y - r ;
127094: LD_ADDR_VAR 0 8
127098: PUSH
127099: LD_VAR 0 3
127103: PUSH
127104: LD_VAR 0 4
127108: MINUS
127109: ST_TO_ADDR
// max_x := x + r ;
127110: LD_ADDR_VAR 0 9
127114: PUSH
127115: LD_VAR 0 2
127119: PUSH
127120: LD_VAR 0 4
127124: PLUS
127125: ST_TO_ADDR
// max_y := y + r ;
127126: LD_ADDR_VAR 0 10
127130: PUSH
127131: LD_VAR 0 3
127135: PUSH
127136: LD_VAR 0 4
127140: PLUS
127141: ST_TO_ADDR
// for _x = min_x to max_x do
127142: LD_ADDR_VAR 0 11
127146: PUSH
127147: DOUBLE
127148: LD_VAR 0 7
127152: DEC
127153: ST_TO_ADDR
127154: LD_VAR 0 9
127158: PUSH
127159: FOR_TO
127160: IFFALSE 127277
// for _y = min_y to max_y do
127162: LD_ADDR_VAR 0 12
127166: PUSH
127167: DOUBLE
127168: LD_VAR 0 8
127172: DEC
127173: ST_TO_ADDR
127174: LD_VAR 0 10
127178: PUSH
127179: FOR_TO
127180: IFFALSE 127273
// begin if not ValidHex ( _x , _y ) then
127182: LD_VAR 0 11
127186: PPUSH
127187: LD_VAR 0 12
127191: PPUSH
127192: CALL_OW 488
127196: NOT
127197: IFFALSE 127201
// continue ;
127199: GO 127179
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
127201: LD_VAR 0 11
127205: PPUSH
127206: LD_VAR 0 12
127210: PPUSH
127211: CALL_OW 351
127215: PUSH
127216: LD_VAR 0 11
127220: PPUSH
127221: LD_VAR 0 12
127225: PPUSH
127226: CALL_OW 554
127230: AND
127231: IFFALSE 127271
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
127233: LD_ADDR_VAR 0 13
127237: PUSH
127238: LD_VAR 0 13
127242: PPUSH
127243: LD_VAR 0 13
127247: PUSH
127248: LD_INT 1
127250: PLUS
127251: PPUSH
127252: LD_VAR 0 11
127256: PUSH
127257: LD_VAR 0 12
127261: PUSH
127262: EMPTY
127263: LIST
127264: LIST
127265: PPUSH
127266: CALL_OW 2
127270: ST_TO_ADDR
// end ;
127271: GO 127179
127273: POP
127274: POP
127275: GO 127159
127277: POP
127278: POP
// if not list then
127279: LD_VAR 0 13
127283: NOT
127284: IFFALSE 127288
// exit ;
127286: GO 127359
// for i in list do
127288: LD_ADDR_VAR 0 6
127292: PUSH
127293: LD_VAR 0 13
127297: PUSH
127298: FOR_IN
127299: IFFALSE 127357
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
127301: LD_VAR 0 1
127305: PPUSH
127306: LD_STRING M
127308: PUSH
127309: LD_VAR 0 6
127313: PUSH
127314: LD_INT 1
127316: ARRAY
127317: PUSH
127318: LD_VAR 0 6
127322: PUSH
127323: LD_INT 2
127325: ARRAY
127326: PUSH
127327: LD_INT 0
127329: PUSH
127330: LD_INT 0
127332: PUSH
127333: LD_INT 0
127335: PUSH
127336: LD_INT 0
127338: PUSH
127339: EMPTY
127340: LIST
127341: LIST
127342: LIST
127343: LIST
127344: LIST
127345: LIST
127346: LIST
127347: PUSH
127348: EMPTY
127349: LIST
127350: PPUSH
127351: CALL_OW 447
127355: GO 127298
127357: POP
127358: POP
// end ;
127359: LD_VAR 0 5
127363: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
127364: LD_EXP 208
127368: NOT
127369: IFFALSE 127419
127371: GO 127373
127373: DISABLE
// begin initHack := true ;
127374: LD_ADDR_EXP 208
127378: PUSH
127379: LD_INT 1
127381: ST_TO_ADDR
// hackTanks := [ ] ;
127382: LD_ADDR_EXP 209
127386: PUSH
127387: EMPTY
127388: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
127389: LD_ADDR_EXP 210
127393: PUSH
127394: EMPTY
127395: ST_TO_ADDR
// hackLimit := 3 ;
127396: LD_ADDR_EXP 211
127400: PUSH
127401: LD_INT 3
127403: ST_TO_ADDR
// hackDist := 12 ;
127404: LD_ADDR_EXP 212
127408: PUSH
127409: LD_INT 12
127411: ST_TO_ADDR
// hackCounter := [ ] ;
127412: LD_ADDR_EXP 213
127416: PUSH
127417: EMPTY
127418: ST_TO_ADDR
// end ;
127419: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
127420: LD_EXP 208
127424: PUSH
127425: LD_INT 34
127427: PUSH
127428: LD_INT 99
127430: PUSH
127431: EMPTY
127432: LIST
127433: LIST
127434: PPUSH
127435: CALL_OW 69
127439: AND
127440: IFFALSE 127693
127442: GO 127444
127444: DISABLE
127445: LD_INT 0
127447: PPUSH
127448: PPUSH
// begin enable ;
127449: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
127450: LD_ADDR_VAR 0 1
127454: PUSH
127455: LD_INT 34
127457: PUSH
127458: LD_INT 99
127460: PUSH
127461: EMPTY
127462: LIST
127463: LIST
127464: PPUSH
127465: CALL_OW 69
127469: PUSH
127470: FOR_IN
127471: IFFALSE 127691
// begin if not i in hackTanks then
127473: LD_VAR 0 1
127477: PUSH
127478: LD_EXP 209
127482: IN
127483: NOT
127484: IFFALSE 127567
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
127486: LD_ADDR_EXP 209
127490: PUSH
127491: LD_EXP 209
127495: PPUSH
127496: LD_EXP 209
127500: PUSH
127501: LD_INT 1
127503: PLUS
127504: PPUSH
127505: LD_VAR 0 1
127509: PPUSH
127510: CALL_OW 1
127514: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
127515: LD_ADDR_EXP 210
127519: PUSH
127520: LD_EXP 210
127524: PPUSH
127525: LD_EXP 210
127529: PUSH
127530: LD_INT 1
127532: PLUS
127533: PPUSH
127534: EMPTY
127535: PPUSH
127536: CALL_OW 1
127540: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
127541: LD_ADDR_EXP 213
127545: PUSH
127546: LD_EXP 213
127550: PPUSH
127551: LD_EXP 213
127555: PUSH
127556: LD_INT 1
127558: PLUS
127559: PPUSH
127560: EMPTY
127561: PPUSH
127562: CALL_OW 1
127566: ST_TO_ADDR
// end ; if not IsOk ( i ) then
127567: LD_VAR 0 1
127571: PPUSH
127572: CALL_OW 302
127576: NOT
127577: IFFALSE 127590
// begin HackUnlinkAll ( i ) ;
127579: LD_VAR 0 1
127583: PPUSH
127584: CALL 127696 0 1
// continue ;
127588: GO 127470
// end ; HackCheckCapturedStatus ( i ) ;
127590: LD_VAR 0 1
127594: PPUSH
127595: CALL 128139 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
127599: LD_ADDR_VAR 0 2
127603: PUSH
127604: LD_INT 81
127606: PUSH
127607: LD_VAR 0 1
127611: PPUSH
127612: CALL_OW 255
127616: PUSH
127617: EMPTY
127618: LIST
127619: LIST
127620: PUSH
127621: LD_INT 33
127623: PUSH
127624: LD_INT 3
127626: PUSH
127627: EMPTY
127628: LIST
127629: LIST
127630: PUSH
127631: LD_INT 91
127633: PUSH
127634: LD_VAR 0 1
127638: PUSH
127639: LD_EXP 212
127643: PUSH
127644: EMPTY
127645: LIST
127646: LIST
127647: LIST
127648: PUSH
127649: LD_INT 50
127651: PUSH
127652: EMPTY
127653: LIST
127654: PUSH
127655: EMPTY
127656: LIST
127657: LIST
127658: LIST
127659: LIST
127660: PPUSH
127661: CALL_OW 69
127665: ST_TO_ADDR
// if not tmp then
127666: LD_VAR 0 2
127670: NOT
127671: IFFALSE 127675
// continue ;
127673: GO 127470
// HackLink ( i , tmp ) ;
127675: LD_VAR 0 1
127679: PPUSH
127680: LD_VAR 0 2
127684: PPUSH
127685: CALL 127832 0 2
// end ;
127689: GO 127470
127691: POP
127692: POP
// end ;
127693: PPOPN 2
127695: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
127696: LD_INT 0
127698: PPUSH
127699: PPUSH
127700: PPUSH
// if not hack in hackTanks then
127701: LD_VAR 0 1
127705: PUSH
127706: LD_EXP 209
127710: IN
127711: NOT
127712: IFFALSE 127716
// exit ;
127714: GO 127827
// index := GetElementIndex ( hackTanks , hack ) ;
127716: LD_ADDR_VAR 0 4
127720: PUSH
127721: LD_EXP 209
127725: PPUSH
127726: LD_VAR 0 1
127730: PPUSH
127731: CALL 73805 0 2
127735: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
127736: LD_EXP 210
127740: PUSH
127741: LD_VAR 0 4
127745: ARRAY
127746: IFFALSE 127827
// begin for i in hackTanksCaptured [ index ] do
127748: LD_ADDR_VAR 0 3
127752: PUSH
127753: LD_EXP 210
127757: PUSH
127758: LD_VAR 0 4
127762: ARRAY
127763: PUSH
127764: FOR_IN
127765: IFFALSE 127791
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
127767: LD_VAR 0 3
127771: PUSH
127772: LD_INT 1
127774: ARRAY
127775: PPUSH
127776: LD_VAR 0 3
127780: PUSH
127781: LD_INT 2
127783: ARRAY
127784: PPUSH
127785: CALL_OW 235
127789: GO 127764
127791: POP
127792: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
127793: LD_ADDR_EXP 210
127797: PUSH
127798: LD_EXP 210
127802: PPUSH
127803: LD_VAR 0 4
127807: PPUSH
127808: EMPTY
127809: PPUSH
127810: CALL_OW 1
127814: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
127815: LD_VAR 0 1
127819: PPUSH
127820: LD_INT 0
127822: PPUSH
127823: CALL_OW 505
// end ; end ;
127827: LD_VAR 0 2
127831: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
127832: LD_INT 0
127834: PPUSH
127835: PPUSH
127836: PPUSH
// if not hack in hackTanks or not vehicles then
127837: LD_VAR 0 1
127841: PUSH
127842: LD_EXP 209
127846: IN
127847: NOT
127848: PUSH
127849: LD_VAR 0 2
127853: NOT
127854: OR
127855: IFFALSE 127859
// exit ;
127857: GO 128134
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
127859: LD_ADDR_VAR 0 2
127863: PUSH
127864: LD_VAR 0 1
127868: PPUSH
127869: LD_VAR 0 2
127873: PPUSH
127874: LD_INT 1
127876: PPUSH
127877: LD_INT 1
127879: PPUSH
127880: CALL 74455 0 4
127884: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
127885: LD_ADDR_VAR 0 5
127889: PUSH
127890: LD_EXP 209
127894: PPUSH
127895: LD_VAR 0 1
127899: PPUSH
127900: CALL 73805 0 2
127904: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
127905: LD_EXP 210
127909: PUSH
127910: LD_VAR 0 5
127914: ARRAY
127915: PUSH
127916: LD_EXP 211
127920: LESS
127921: IFFALSE 128110
// begin for i := 1 to vehicles do
127923: LD_ADDR_VAR 0 4
127927: PUSH
127928: DOUBLE
127929: LD_INT 1
127931: DEC
127932: ST_TO_ADDR
127933: LD_VAR 0 2
127937: PUSH
127938: FOR_TO
127939: IFFALSE 128108
// begin if hackTanksCaptured [ index ] = hackLimit then
127941: LD_EXP 210
127945: PUSH
127946: LD_VAR 0 5
127950: ARRAY
127951: PUSH
127952: LD_EXP 211
127956: EQUAL
127957: IFFALSE 127961
// break ;
127959: GO 128108
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
127961: LD_ADDR_EXP 213
127965: PUSH
127966: LD_EXP 213
127970: PPUSH
127971: LD_VAR 0 5
127975: PPUSH
127976: LD_EXP 213
127980: PUSH
127981: LD_VAR 0 5
127985: ARRAY
127986: PUSH
127987: LD_INT 1
127989: PLUS
127990: PPUSH
127991: CALL_OW 1
127995: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
127996: LD_ADDR_EXP 210
128000: PUSH
128001: LD_EXP 210
128005: PPUSH
128006: LD_VAR 0 5
128010: PUSH
128011: LD_EXP 210
128015: PUSH
128016: LD_VAR 0 5
128020: ARRAY
128021: PUSH
128022: LD_INT 1
128024: PLUS
128025: PUSH
128026: EMPTY
128027: LIST
128028: LIST
128029: PPUSH
128030: LD_VAR 0 2
128034: PUSH
128035: LD_VAR 0 4
128039: ARRAY
128040: PUSH
128041: LD_VAR 0 2
128045: PUSH
128046: LD_VAR 0 4
128050: ARRAY
128051: PPUSH
128052: CALL_OW 255
128056: PUSH
128057: EMPTY
128058: LIST
128059: LIST
128060: PPUSH
128061: CALL 74020 0 3
128065: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
128066: LD_VAR 0 2
128070: PUSH
128071: LD_VAR 0 4
128075: ARRAY
128076: PPUSH
128077: LD_VAR 0 1
128081: PPUSH
128082: CALL_OW 255
128086: PPUSH
128087: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
128091: LD_VAR 0 2
128095: PUSH
128096: LD_VAR 0 4
128100: ARRAY
128101: PPUSH
128102: CALL_OW 141
// end ;
128106: GO 127938
128108: POP
128109: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
128110: LD_VAR 0 1
128114: PPUSH
128115: LD_EXP 210
128119: PUSH
128120: LD_VAR 0 5
128124: ARRAY
128125: PUSH
128126: LD_INT 0
128128: PLUS
128129: PPUSH
128130: CALL_OW 505
// end ;
128134: LD_VAR 0 3
128138: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
128139: LD_INT 0
128141: PPUSH
128142: PPUSH
128143: PPUSH
128144: PPUSH
// if not hack in hackTanks then
128145: LD_VAR 0 1
128149: PUSH
128150: LD_EXP 209
128154: IN
128155: NOT
128156: IFFALSE 128160
// exit ;
128158: GO 128400
// index := GetElementIndex ( hackTanks , hack ) ;
128160: LD_ADDR_VAR 0 4
128164: PUSH
128165: LD_EXP 209
128169: PPUSH
128170: LD_VAR 0 1
128174: PPUSH
128175: CALL 73805 0 2
128179: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
128180: LD_ADDR_VAR 0 3
128184: PUSH
128185: DOUBLE
128186: LD_EXP 210
128190: PUSH
128191: LD_VAR 0 4
128195: ARRAY
128196: INC
128197: ST_TO_ADDR
128198: LD_INT 1
128200: PUSH
128201: FOR_DOWNTO
128202: IFFALSE 128374
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
128204: LD_ADDR_VAR 0 5
128208: PUSH
128209: LD_EXP 210
128213: PUSH
128214: LD_VAR 0 4
128218: ARRAY
128219: PUSH
128220: LD_VAR 0 3
128224: ARRAY
128225: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
128226: LD_VAR 0 5
128230: PUSH
128231: LD_INT 1
128233: ARRAY
128234: PPUSH
128235: CALL_OW 302
128239: NOT
128240: PUSH
128241: LD_VAR 0 5
128245: PUSH
128246: LD_INT 1
128248: ARRAY
128249: PPUSH
128250: CALL_OW 255
128254: PUSH
128255: LD_VAR 0 1
128259: PPUSH
128260: CALL_OW 255
128264: NONEQUAL
128265: OR
128266: IFFALSE 128372
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
128268: LD_VAR 0 5
128272: PUSH
128273: LD_INT 1
128275: ARRAY
128276: PPUSH
128277: CALL_OW 305
128281: PUSH
128282: LD_VAR 0 5
128286: PUSH
128287: LD_INT 1
128289: ARRAY
128290: PPUSH
128291: CALL_OW 255
128295: PUSH
128296: LD_VAR 0 1
128300: PPUSH
128301: CALL_OW 255
128305: EQUAL
128306: AND
128307: IFFALSE 128331
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
128309: LD_VAR 0 5
128313: PUSH
128314: LD_INT 1
128316: ARRAY
128317: PPUSH
128318: LD_VAR 0 5
128322: PUSH
128323: LD_INT 2
128325: ARRAY
128326: PPUSH
128327: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
128331: LD_ADDR_EXP 210
128335: PUSH
128336: LD_EXP 210
128340: PPUSH
128341: LD_VAR 0 4
128345: PPUSH
128346: LD_EXP 210
128350: PUSH
128351: LD_VAR 0 4
128355: ARRAY
128356: PPUSH
128357: LD_VAR 0 3
128361: PPUSH
128362: CALL_OW 3
128366: PPUSH
128367: CALL_OW 1
128371: ST_TO_ADDR
// end ; end ;
128372: GO 128201
128374: POP
128375: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
128376: LD_VAR 0 1
128380: PPUSH
128381: LD_EXP 210
128385: PUSH
128386: LD_VAR 0 4
128390: ARRAY
128391: PUSH
128392: LD_INT 0
128394: PLUS
128395: PPUSH
128396: CALL_OW 505
// end ;
128400: LD_VAR 0 2
128404: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
128405: LD_INT 0
128407: PPUSH
128408: PPUSH
128409: PPUSH
128410: PPUSH
// if not hack in hackTanks then
128411: LD_VAR 0 1
128415: PUSH
128416: LD_EXP 209
128420: IN
128421: NOT
128422: IFFALSE 128426
// exit ;
128424: GO 128511
// index := GetElementIndex ( hackTanks , hack ) ;
128426: LD_ADDR_VAR 0 5
128430: PUSH
128431: LD_EXP 209
128435: PPUSH
128436: LD_VAR 0 1
128440: PPUSH
128441: CALL 73805 0 2
128445: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
128446: LD_ADDR_VAR 0 4
128450: PUSH
128451: DOUBLE
128452: LD_INT 1
128454: DEC
128455: ST_TO_ADDR
128456: LD_EXP 210
128460: PUSH
128461: LD_VAR 0 5
128465: ARRAY
128466: PUSH
128467: FOR_TO
128468: IFFALSE 128509
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
128470: LD_EXP 210
128474: PUSH
128475: LD_VAR 0 5
128479: ARRAY
128480: PUSH
128481: LD_VAR 0 4
128485: ARRAY
128486: PUSH
128487: LD_INT 1
128489: ARRAY
128490: PUSH
128491: LD_VAR 0 2
128495: EQUAL
128496: IFFALSE 128507
// KillUnit ( vehicle ) ;
128498: LD_VAR 0 2
128502: PPUSH
128503: CALL_OW 66
128507: GO 128467
128509: POP
128510: POP
// end ;
128511: LD_VAR 0 3
128515: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
128516: LD_EXP 214
128520: NOT
128521: IFFALSE 128556
128523: GO 128525
128525: DISABLE
// begin initMiner := true ;
128526: LD_ADDR_EXP 214
128530: PUSH
128531: LD_INT 1
128533: ST_TO_ADDR
// minersList := [ ] ;
128534: LD_ADDR_EXP 215
128538: PUSH
128539: EMPTY
128540: ST_TO_ADDR
// minerMinesList := [ ] ;
128541: LD_ADDR_EXP 216
128545: PUSH
128546: EMPTY
128547: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
128548: LD_ADDR_EXP 217
128552: PUSH
128553: LD_INT 5
128555: ST_TO_ADDR
// end ;
128556: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
128557: LD_EXP 214
128561: PUSH
128562: LD_INT 34
128564: PUSH
128565: LD_INT 81
128567: PUSH
128568: EMPTY
128569: LIST
128570: LIST
128571: PPUSH
128572: CALL_OW 69
128576: AND
128577: IFFALSE 129038
128579: GO 128581
128581: DISABLE
128582: LD_INT 0
128584: PPUSH
128585: PPUSH
128586: PPUSH
128587: PPUSH
// begin enable ;
128588: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
128589: LD_ADDR_VAR 0 1
128593: PUSH
128594: LD_INT 34
128596: PUSH
128597: LD_INT 81
128599: PUSH
128600: EMPTY
128601: LIST
128602: LIST
128603: PPUSH
128604: CALL_OW 69
128608: PUSH
128609: FOR_IN
128610: IFFALSE 128682
// begin if not i in minersList then
128612: LD_VAR 0 1
128616: PUSH
128617: LD_EXP 215
128621: IN
128622: NOT
128623: IFFALSE 128680
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
128625: LD_ADDR_EXP 215
128629: PUSH
128630: LD_EXP 215
128634: PPUSH
128635: LD_EXP 215
128639: PUSH
128640: LD_INT 1
128642: PLUS
128643: PPUSH
128644: LD_VAR 0 1
128648: PPUSH
128649: CALL_OW 1
128653: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
128654: LD_ADDR_EXP 216
128658: PUSH
128659: LD_EXP 216
128663: PPUSH
128664: LD_EXP 216
128668: PUSH
128669: LD_INT 1
128671: PLUS
128672: PPUSH
128673: EMPTY
128674: PPUSH
128675: CALL_OW 1
128679: ST_TO_ADDR
// end end ;
128680: GO 128609
128682: POP
128683: POP
// for i := minerMinesList downto 1 do
128684: LD_ADDR_VAR 0 1
128688: PUSH
128689: DOUBLE
128690: LD_EXP 216
128694: INC
128695: ST_TO_ADDR
128696: LD_INT 1
128698: PUSH
128699: FOR_DOWNTO
128700: IFFALSE 129036
// begin if IsLive ( minersList [ i ] ) then
128702: LD_EXP 215
128706: PUSH
128707: LD_VAR 0 1
128711: ARRAY
128712: PPUSH
128713: CALL_OW 300
128717: IFFALSE 128745
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
128719: LD_EXP 215
128723: PUSH
128724: LD_VAR 0 1
128728: ARRAY
128729: PPUSH
128730: LD_EXP 216
128734: PUSH
128735: LD_VAR 0 1
128739: ARRAY
128740: PPUSH
128741: CALL_OW 505
// if not minerMinesList [ i ] then
128745: LD_EXP 216
128749: PUSH
128750: LD_VAR 0 1
128754: ARRAY
128755: NOT
128756: IFFALSE 128760
// continue ;
128758: GO 128699
// for j := minerMinesList [ i ] downto 1 do
128760: LD_ADDR_VAR 0 2
128764: PUSH
128765: DOUBLE
128766: LD_EXP 216
128770: PUSH
128771: LD_VAR 0 1
128775: ARRAY
128776: INC
128777: ST_TO_ADDR
128778: LD_INT 1
128780: PUSH
128781: FOR_DOWNTO
128782: IFFALSE 129032
// begin side := GetSide ( minersList [ i ] ) ;
128784: LD_ADDR_VAR 0 3
128788: PUSH
128789: LD_EXP 215
128793: PUSH
128794: LD_VAR 0 1
128798: ARRAY
128799: PPUSH
128800: CALL_OW 255
128804: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
128805: LD_ADDR_VAR 0 4
128809: PUSH
128810: LD_EXP 216
128814: PUSH
128815: LD_VAR 0 1
128819: ARRAY
128820: PUSH
128821: LD_VAR 0 2
128825: ARRAY
128826: PUSH
128827: LD_INT 1
128829: ARRAY
128830: PPUSH
128831: LD_EXP 216
128835: PUSH
128836: LD_VAR 0 1
128840: ARRAY
128841: PUSH
128842: LD_VAR 0 2
128846: ARRAY
128847: PUSH
128848: LD_INT 2
128850: ARRAY
128851: PPUSH
128852: CALL_OW 428
128856: ST_TO_ADDR
// if not tmp then
128857: LD_VAR 0 4
128861: NOT
128862: IFFALSE 128866
// continue ;
128864: GO 128781
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
128866: LD_VAR 0 4
128870: PUSH
128871: LD_INT 81
128873: PUSH
128874: LD_VAR 0 3
128878: PUSH
128879: EMPTY
128880: LIST
128881: LIST
128882: PPUSH
128883: CALL_OW 69
128887: IN
128888: PUSH
128889: LD_EXP 216
128893: PUSH
128894: LD_VAR 0 1
128898: ARRAY
128899: PUSH
128900: LD_VAR 0 2
128904: ARRAY
128905: PUSH
128906: LD_INT 1
128908: ARRAY
128909: PPUSH
128910: LD_EXP 216
128914: PUSH
128915: LD_VAR 0 1
128919: ARRAY
128920: PUSH
128921: LD_VAR 0 2
128925: ARRAY
128926: PUSH
128927: LD_INT 2
128929: ARRAY
128930: PPUSH
128931: CALL_OW 458
128935: AND
128936: IFFALSE 129030
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
128938: LD_EXP 216
128942: PUSH
128943: LD_VAR 0 1
128947: ARRAY
128948: PUSH
128949: LD_VAR 0 2
128953: ARRAY
128954: PUSH
128955: LD_INT 1
128957: ARRAY
128958: PPUSH
128959: LD_EXP 216
128963: PUSH
128964: LD_VAR 0 1
128968: ARRAY
128969: PUSH
128970: LD_VAR 0 2
128974: ARRAY
128975: PUSH
128976: LD_INT 2
128978: ARRAY
128979: PPUSH
128980: LD_VAR 0 3
128984: PPUSH
128985: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
128989: LD_ADDR_EXP 216
128993: PUSH
128994: LD_EXP 216
128998: PPUSH
128999: LD_VAR 0 1
129003: PPUSH
129004: LD_EXP 216
129008: PUSH
129009: LD_VAR 0 1
129013: ARRAY
129014: PPUSH
129015: LD_VAR 0 2
129019: PPUSH
129020: CALL_OW 3
129024: PPUSH
129025: CALL_OW 1
129029: ST_TO_ADDR
// end ; end ;
129030: GO 128781
129032: POP
129033: POP
// end ;
129034: GO 128699
129036: POP
129037: POP
// end ;
129038: PPOPN 4
129040: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
129041: LD_INT 0
129043: PPUSH
129044: PPUSH
// result := false ;
129045: LD_ADDR_VAR 0 4
129049: PUSH
129050: LD_INT 0
129052: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
129053: LD_VAR 0 1
129057: PPUSH
129058: CALL_OW 264
129062: PUSH
129063: LD_INT 81
129065: EQUAL
129066: NOT
129067: IFFALSE 129071
// exit ;
129069: GO 129311
// index := GetElementIndex ( minersList , unit ) ;
129071: LD_ADDR_VAR 0 5
129075: PUSH
129076: LD_EXP 215
129080: PPUSH
129081: LD_VAR 0 1
129085: PPUSH
129086: CALL 73805 0 2
129090: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
129091: LD_EXP 216
129095: PUSH
129096: LD_VAR 0 5
129100: ARRAY
129101: PUSH
129102: LD_EXP 217
129106: GREATEREQUAL
129107: IFFALSE 129111
// exit ;
129109: GO 129311
// ComMoveXY ( unit , x , y ) ;
129111: LD_VAR 0 1
129115: PPUSH
129116: LD_VAR 0 2
129120: PPUSH
129121: LD_VAR 0 3
129125: PPUSH
129126: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
129130: LD_INT 35
129132: PPUSH
129133: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
129137: LD_VAR 0 1
129141: PPUSH
129142: LD_VAR 0 2
129146: PPUSH
129147: LD_VAR 0 3
129151: PPUSH
129152: CALL 105169 0 3
129156: NOT
129157: PUSH
129158: LD_VAR 0 1
129162: PPUSH
129163: CALL_OW 314
129167: AND
129168: IFFALSE 129172
// exit ;
129170: GO 129311
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
129172: LD_VAR 0 2
129176: PPUSH
129177: LD_VAR 0 3
129181: PPUSH
129182: CALL_OW 428
129186: PUSH
129187: LD_VAR 0 1
129191: EQUAL
129192: PUSH
129193: LD_VAR 0 1
129197: PPUSH
129198: CALL_OW 314
129202: NOT
129203: AND
129204: IFFALSE 129130
// PlaySoundXY ( x , y , PlantMine ) ;
129206: LD_VAR 0 2
129210: PPUSH
129211: LD_VAR 0 3
129215: PPUSH
129216: LD_STRING PlantMine
129218: PPUSH
129219: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
129223: LD_VAR 0 2
129227: PPUSH
129228: LD_VAR 0 3
129232: PPUSH
129233: LD_VAR 0 1
129237: PPUSH
129238: CALL_OW 255
129242: PPUSH
129243: LD_INT 0
129245: PPUSH
129246: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
129250: LD_ADDR_EXP 216
129254: PUSH
129255: LD_EXP 216
129259: PPUSH
129260: LD_VAR 0 5
129264: PUSH
129265: LD_EXP 216
129269: PUSH
129270: LD_VAR 0 5
129274: ARRAY
129275: PUSH
129276: LD_INT 1
129278: PLUS
129279: PUSH
129280: EMPTY
129281: LIST
129282: LIST
129283: PPUSH
129284: LD_VAR 0 2
129288: PUSH
129289: LD_VAR 0 3
129293: PUSH
129294: EMPTY
129295: LIST
129296: LIST
129297: PPUSH
129298: CALL 74020 0 3
129302: ST_TO_ADDR
// result := true ;
129303: LD_ADDR_VAR 0 4
129307: PUSH
129308: LD_INT 1
129310: ST_TO_ADDR
// end ;
129311: LD_VAR 0 4
129315: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
129316: LD_INT 0
129318: PPUSH
129319: PPUSH
129320: PPUSH
// if not unit in minersList then
129321: LD_VAR 0 1
129325: PUSH
129326: LD_EXP 215
129330: IN
129331: NOT
129332: IFFALSE 129336
// exit ;
129334: GO 129728
// index := GetElementIndex ( minersList , unit ) ;
129336: LD_ADDR_VAR 0 6
129340: PUSH
129341: LD_EXP 215
129345: PPUSH
129346: LD_VAR 0 1
129350: PPUSH
129351: CALL 73805 0 2
129355: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
129356: LD_ADDR_VAR 0 5
129360: PUSH
129361: DOUBLE
129362: LD_EXP 216
129366: PUSH
129367: LD_VAR 0 6
129371: ARRAY
129372: INC
129373: ST_TO_ADDR
129374: LD_INT 1
129376: PUSH
129377: FOR_DOWNTO
129378: IFFALSE 129539
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
129380: LD_EXP 216
129384: PUSH
129385: LD_VAR 0 6
129389: ARRAY
129390: PUSH
129391: LD_VAR 0 5
129395: ARRAY
129396: PUSH
129397: LD_INT 1
129399: ARRAY
129400: PUSH
129401: LD_VAR 0 2
129405: EQUAL
129406: PUSH
129407: LD_EXP 216
129411: PUSH
129412: LD_VAR 0 6
129416: ARRAY
129417: PUSH
129418: LD_VAR 0 5
129422: ARRAY
129423: PUSH
129424: LD_INT 2
129426: ARRAY
129427: PUSH
129428: LD_VAR 0 3
129432: EQUAL
129433: AND
129434: IFFALSE 129537
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
129436: LD_EXP 216
129440: PUSH
129441: LD_VAR 0 6
129445: ARRAY
129446: PUSH
129447: LD_VAR 0 5
129451: ARRAY
129452: PUSH
129453: LD_INT 1
129455: ARRAY
129456: PPUSH
129457: LD_EXP 216
129461: PUSH
129462: LD_VAR 0 6
129466: ARRAY
129467: PUSH
129468: LD_VAR 0 5
129472: ARRAY
129473: PUSH
129474: LD_INT 2
129476: ARRAY
129477: PPUSH
129478: LD_VAR 0 1
129482: PPUSH
129483: CALL_OW 255
129487: PPUSH
129488: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
129492: LD_ADDR_EXP 216
129496: PUSH
129497: LD_EXP 216
129501: PPUSH
129502: LD_VAR 0 6
129506: PPUSH
129507: LD_EXP 216
129511: PUSH
129512: LD_VAR 0 6
129516: ARRAY
129517: PPUSH
129518: LD_VAR 0 5
129522: PPUSH
129523: CALL_OW 3
129527: PPUSH
129528: CALL_OW 1
129532: ST_TO_ADDR
// exit ;
129533: POP
129534: POP
129535: GO 129728
// end ; end ;
129537: GO 129377
129539: POP
129540: POP
// for i := minerMinesList [ index ] downto 1 do
129541: LD_ADDR_VAR 0 5
129545: PUSH
129546: DOUBLE
129547: LD_EXP 216
129551: PUSH
129552: LD_VAR 0 6
129556: ARRAY
129557: INC
129558: ST_TO_ADDR
129559: LD_INT 1
129561: PUSH
129562: FOR_DOWNTO
129563: IFFALSE 129726
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
129565: LD_EXP 216
129569: PUSH
129570: LD_VAR 0 6
129574: ARRAY
129575: PUSH
129576: LD_VAR 0 5
129580: ARRAY
129581: PUSH
129582: LD_INT 1
129584: ARRAY
129585: PPUSH
129586: LD_EXP 216
129590: PUSH
129591: LD_VAR 0 6
129595: ARRAY
129596: PUSH
129597: LD_VAR 0 5
129601: ARRAY
129602: PUSH
129603: LD_INT 2
129605: ARRAY
129606: PPUSH
129607: LD_VAR 0 2
129611: PPUSH
129612: LD_VAR 0 3
129616: PPUSH
129617: CALL_OW 298
129621: PUSH
129622: LD_INT 6
129624: LESS
129625: IFFALSE 129724
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
129627: LD_EXP 216
129631: PUSH
129632: LD_VAR 0 6
129636: ARRAY
129637: PUSH
129638: LD_VAR 0 5
129642: ARRAY
129643: PUSH
129644: LD_INT 1
129646: ARRAY
129647: PPUSH
129648: LD_EXP 216
129652: PUSH
129653: LD_VAR 0 6
129657: ARRAY
129658: PUSH
129659: LD_VAR 0 5
129663: ARRAY
129664: PUSH
129665: LD_INT 2
129667: ARRAY
129668: PPUSH
129669: LD_VAR 0 1
129673: PPUSH
129674: CALL_OW 255
129678: PPUSH
129679: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
129683: LD_ADDR_EXP 216
129687: PUSH
129688: LD_EXP 216
129692: PPUSH
129693: LD_VAR 0 6
129697: PPUSH
129698: LD_EXP 216
129702: PUSH
129703: LD_VAR 0 6
129707: ARRAY
129708: PPUSH
129709: LD_VAR 0 5
129713: PPUSH
129714: CALL_OW 3
129718: PPUSH
129719: CALL_OW 1
129723: ST_TO_ADDR
// end ; end ;
129724: GO 129562
129726: POP
129727: POP
// end ;
129728: LD_VAR 0 4
129732: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
129733: LD_INT 0
129735: PPUSH
129736: PPUSH
129737: PPUSH
129738: PPUSH
129739: PPUSH
129740: PPUSH
129741: PPUSH
129742: PPUSH
129743: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
129744: LD_VAR 0 1
129748: PPUSH
129749: CALL_OW 264
129753: PUSH
129754: LD_INT 81
129756: EQUAL
129757: NOT
129758: PUSH
129759: LD_VAR 0 1
129763: PUSH
129764: LD_EXP 215
129768: IN
129769: NOT
129770: OR
129771: IFFALSE 129775
// exit ;
129773: GO 130097
// index := GetElementIndex ( minersList , unit ) ;
129775: LD_ADDR_VAR 0 6
129779: PUSH
129780: LD_EXP 215
129784: PPUSH
129785: LD_VAR 0 1
129789: PPUSH
129790: CALL 73805 0 2
129794: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
129795: LD_ADDR_VAR 0 8
129799: PUSH
129800: LD_EXP 217
129804: PUSH
129805: LD_EXP 216
129809: PUSH
129810: LD_VAR 0 6
129814: ARRAY
129815: MINUS
129816: ST_TO_ADDR
// if not minesFreeAmount then
129817: LD_VAR 0 8
129821: NOT
129822: IFFALSE 129826
// exit ;
129824: GO 130097
// tmp := [ ] ;
129826: LD_ADDR_VAR 0 7
129830: PUSH
129831: EMPTY
129832: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
129833: LD_ADDR_VAR 0 5
129837: PUSH
129838: DOUBLE
129839: LD_INT 1
129841: DEC
129842: ST_TO_ADDR
129843: LD_VAR 0 8
129847: PUSH
129848: FOR_TO
129849: IFFALSE 130044
// begin _d := rand ( 0 , 5 ) ;
129851: LD_ADDR_VAR 0 11
129855: PUSH
129856: LD_INT 0
129858: PPUSH
129859: LD_INT 5
129861: PPUSH
129862: CALL_OW 12
129866: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
129867: LD_ADDR_VAR 0 12
129871: PUSH
129872: LD_INT 2
129874: PPUSH
129875: LD_INT 6
129877: PPUSH
129878: CALL_OW 12
129882: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
129883: LD_ADDR_VAR 0 9
129887: PUSH
129888: LD_VAR 0 2
129892: PPUSH
129893: LD_VAR 0 11
129897: PPUSH
129898: LD_VAR 0 12
129902: PPUSH
129903: CALL_OW 272
129907: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
129908: LD_ADDR_VAR 0 10
129912: PUSH
129913: LD_VAR 0 3
129917: PPUSH
129918: LD_VAR 0 11
129922: PPUSH
129923: LD_VAR 0 12
129927: PPUSH
129928: CALL_OW 273
129932: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
129933: LD_VAR 0 9
129937: PPUSH
129938: LD_VAR 0 10
129942: PPUSH
129943: CALL_OW 488
129947: PUSH
129948: LD_VAR 0 9
129952: PUSH
129953: LD_VAR 0 10
129957: PUSH
129958: EMPTY
129959: LIST
129960: LIST
129961: PUSH
129962: LD_VAR 0 7
129966: IN
129967: NOT
129968: AND
129969: PUSH
129970: LD_VAR 0 9
129974: PPUSH
129975: LD_VAR 0 10
129979: PPUSH
129980: CALL_OW 458
129984: NOT
129985: AND
129986: IFFALSE 130028
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
129988: LD_ADDR_VAR 0 7
129992: PUSH
129993: LD_VAR 0 7
129997: PPUSH
129998: LD_VAR 0 7
130002: PUSH
130003: LD_INT 1
130005: PLUS
130006: PPUSH
130007: LD_VAR 0 9
130011: PUSH
130012: LD_VAR 0 10
130016: PUSH
130017: EMPTY
130018: LIST
130019: LIST
130020: PPUSH
130021: CALL_OW 1
130025: ST_TO_ADDR
130026: GO 130042
// i := i - 1 ;
130028: LD_ADDR_VAR 0 5
130032: PUSH
130033: LD_VAR 0 5
130037: PUSH
130038: LD_INT 1
130040: MINUS
130041: ST_TO_ADDR
// end ;
130042: GO 129848
130044: POP
130045: POP
// for i in tmp do
130046: LD_ADDR_VAR 0 5
130050: PUSH
130051: LD_VAR 0 7
130055: PUSH
130056: FOR_IN
130057: IFFALSE 130095
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
130059: LD_VAR 0 1
130063: PPUSH
130064: LD_VAR 0 5
130068: PUSH
130069: LD_INT 1
130071: ARRAY
130072: PPUSH
130073: LD_VAR 0 5
130077: PUSH
130078: LD_INT 2
130080: ARRAY
130081: PPUSH
130082: CALL 129041 0 3
130086: NOT
130087: IFFALSE 130093
// exit ;
130089: POP
130090: POP
130091: GO 130097
130093: GO 130056
130095: POP
130096: POP
// end ;
130097: LD_VAR 0 4
130101: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
130102: LD_INT 0
130104: PPUSH
130105: PPUSH
130106: PPUSH
130107: PPUSH
130108: PPUSH
130109: PPUSH
130110: PPUSH
// if not GetClass ( unit ) = class_sniper then
130111: LD_VAR 0 1
130115: PPUSH
130116: CALL_OW 257
130120: PUSH
130121: LD_INT 5
130123: EQUAL
130124: NOT
130125: IFFALSE 130129
// exit ;
130127: GO 130517
// dist := 8 ;
130129: LD_ADDR_VAR 0 5
130133: PUSH
130134: LD_INT 8
130136: ST_TO_ADDR
// viewRange := 12 ;
130137: LD_ADDR_VAR 0 7
130141: PUSH
130142: LD_INT 12
130144: ST_TO_ADDR
// side := GetSide ( unit ) ;
130145: LD_ADDR_VAR 0 6
130149: PUSH
130150: LD_VAR 0 1
130154: PPUSH
130155: CALL_OW 255
130159: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
130160: LD_INT 61
130162: PPUSH
130163: LD_VAR 0 6
130167: PPUSH
130168: CALL_OW 321
130172: PUSH
130173: LD_INT 2
130175: EQUAL
130176: IFFALSE 130186
// viewRange := 16 ;
130178: LD_ADDR_VAR 0 7
130182: PUSH
130183: LD_INT 16
130185: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
130186: LD_VAR 0 1
130190: PPUSH
130191: LD_VAR 0 2
130195: PPUSH
130196: LD_VAR 0 3
130200: PPUSH
130201: CALL_OW 297
130205: PUSH
130206: LD_VAR 0 5
130210: GREATER
130211: IFFALSE 130290
// begin ComMoveXY ( unit , x , y ) ;
130213: LD_VAR 0 1
130217: PPUSH
130218: LD_VAR 0 2
130222: PPUSH
130223: LD_VAR 0 3
130227: PPUSH
130228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
130232: LD_INT 35
130234: PPUSH
130235: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
130239: LD_VAR 0 1
130243: PPUSH
130244: LD_VAR 0 2
130248: PPUSH
130249: LD_VAR 0 3
130253: PPUSH
130254: CALL 105169 0 3
130258: NOT
130259: IFFALSE 130263
// exit ;
130261: GO 130517
// until GetDistUnitXY ( unit , x , y ) < dist ;
130263: LD_VAR 0 1
130267: PPUSH
130268: LD_VAR 0 2
130272: PPUSH
130273: LD_VAR 0 3
130277: PPUSH
130278: CALL_OW 297
130282: PUSH
130283: LD_VAR 0 5
130287: LESS
130288: IFFALSE 130232
// end ; ComTurnXY ( unit , x , y ) ;
130290: LD_VAR 0 1
130294: PPUSH
130295: LD_VAR 0 2
130299: PPUSH
130300: LD_VAR 0 3
130304: PPUSH
130305: CALL_OW 118
// wait ( 5 ) ;
130309: LD_INT 5
130311: PPUSH
130312: CALL_OW 67
// _d := GetDir ( unit ) ;
130316: LD_ADDR_VAR 0 10
130320: PUSH
130321: LD_VAR 0 1
130325: PPUSH
130326: CALL_OW 254
130330: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
130331: LD_ADDR_VAR 0 8
130335: PUSH
130336: LD_VAR 0 1
130340: PPUSH
130341: CALL_OW 250
130345: PPUSH
130346: LD_VAR 0 10
130350: PPUSH
130351: LD_VAR 0 5
130355: PPUSH
130356: CALL_OW 272
130360: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
130361: LD_ADDR_VAR 0 9
130365: PUSH
130366: LD_VAR 0 1
130370: PPUSH
130371: CALL_OW 251
130375: PPUSH
130376: LD_VAR 0 10
130380: PPUSH
130381: LD_VAR 0 5
130385: PPUSH
130386: CALL_OW 273
130390: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
130391: LD_VAR 0 8
130395: PPUSH
130396: LD_VAR 0 9
130400: PPUSH
130401: CALL_OW 488
130405: NOT
130406: IFFALSE 130410
// exit ;
130408: GO 130517
// ComAnimCustom ( unit , 1 ) ;
130410: LD_VAR 0 1
130414: PPUSH
130415: LD_INT 1
130417: PPUSH
130418: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
130422: LD_VAR 0 8
130426: PPUSH
130427: LD_VAR 0 9
130431: PPUSH
130432: LD_VAR 0 6
130436: PPUSH
130437: LD_VAR 0 7
130441: PPUSH
130442: CALL_OW 330
// repeat wait ( 1 ) ;
130446: LD_INT 1
130448: PPUSH
130449: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
130453: LD_VAR 0 1
130457: PPUSH
130458: CALL_OW 316
130462: PUSH
130463: LD_VAR 0 1
130467: PPUSH
130468: CALL_OW 314
130472: OR
130473: PUSH
130474: LD_VAR 0 1
130478: PPUSH
130479: CALL_OW 302
130483: NOT
130484: OR
130485: PUSH
130486: LD_VAR 0 1
130490: PPUSH
130491: CALL_OW 301
130495: OR
130496: IFFALSE 130446
// RemoveSeeing ( _x , _y , side ) ;
130498: LD_VAR 0 8
130502: PPUSH
130503: LD_VAR 0 9
130507: PPUSH
130508: LD_VAR 0 6
130512: PPUSH
130513: CALL_OW 331
// end ; end_of_file
130517: LD_VAR 0 4
130521: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
130522: LD_INT 0
130524: PPUSH
130525: PPUSH
130526: PPUSH
130527: PPUSH
130528: PPUSH
130529: PPUSH
130530: PPUSH
130531: PPUSH
130532: PPUSH
130533: PPUSH
130534: PPUSH
130535: PPUSH
130536: PPUSH
130537: PPUSH
130538: PPUSH
130539: PPUSH
130540: PPUSH
130541: PPUSH
130542: PPUSH
130543: PPUSH
130544: PPUSH
130545: PPUSH
130546: PPUSH
130547: PPUSH
130548: PPUSH
130549: PPUSH
130550: PPUSH
130551: PPUSH
130552: PPUSH
130553: PPUSH
130554: PPUSH
130555: PPUSH
130556: PPUSH
130557: PPUSH
// if not list then
130558: LD_VAR 0 1
130562: NOT
130563: IFFALSE 130567
// exit ;
130565: GO 135226
// base := list [ 1 ] ;
130567: LD_ADDR_VAR 0 3
130571: PUSH
130572: LD_VAR 0 1
130576: PUSH
130577: LD_INT 1
130579: ARRAY
130580: ST_TO_ADDR
// group := list [ 2 ] ;
130581: LD_ADDR_VAR 0 4
130585: PUSH
130586: LD_VAR 0 1
130590: PUSH
130591: LD_INT 2
130593: ARRAY
130594: ST_TO_ADDR
// path := list [ 3 ] ;
130595: LD_ADDR_VAR 0 5
130599: PUSH
130600: LD_VAR 0 1
130604: PUSH
130605: LD_INT 3
130607: ARRAY
130608: ST_TO_ADDR
// flags := list [ 4 ] ;
130609: LD_ADDR_VAR 0 6
130613: PUSH
130614: LD_VAR 0 1
130618: PUSH
130619: LD_INT 4
130621: ARRAY
130622: ST_TO_ADDR
// mined := [ ] ;
130623: LD_ADDR_VAR 0 27
130627: PUSH
130628: EMPTY
130629: ST_TO_ADDR
// bombed := [ ] ;
130630: LD_ADDR_VAR 0 28
130634: PUSH
130635: EMPTY
130636: ST_TO_ADDR
// healers := [ ] ;
130637: LD_ADDR_VAR 0 31
130641: PUSH
130642: EMPTY
130643: ST_TO_ADDR
// to_heal := [ ] ;
130644: LD_ADDR_VAR 0 30
130648: PUSH
130649: EMPTY
130650: ST_TO_ADDR
// repairs := [ ] ;
130651: LD_ADDR_VAR 0 33
130655: PUSH
130656: EMPTY
130657: ST_TO_ADDR
// to_repair := [ ] ;
130658: LD_ADDR_VAR 0 32
130662: PUSH
130663: EMPTY
130664: ST_TO_ADDR
// if not group or not path then
130665: LD_VAR 0 4
130669: NOT
130670: PUSH
130671: LD_VAR 0 5
130675: NOT
130676: OR
130677: IFFALSE 130681
// exit ;
130679: GO 135226
// side := GetSide ( group [ 1 ] ) ;
130681: LD_ADDR_VAR 0 35
130685: PUSH
130686: LD_VAR 0 4
130690: PUSH
130691: LD_INT 1
130693: ARRAY
130694: PPUSH
130695: CALL_OW 255
130699: ST_TO_ADDR
// if flags then
130700: LD_VAR 0 6
130704: IFFALSE 130848
// begin f_ignore_area := flags [ 1 ] ;
130706: LD_ADDR_VAR 0 17
130710: PUSH
130711: LD_VAR 0 6
130715: PUSH
130716: LD_INT 1
130718: ARRAY
130719: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
130720: LD_ADDR_VAR 0 18
130724: PUSH
130725: LD_VAR 0 6
130729: PUSH
130730: LD_INT 2
130732: ARRAY
130733: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
130734: LD_ADDR_VAR 0 19
130738: PUSH
130739: LD_VAR 0 6
130743: PUSH
130744: LD_INT 3
130746: ARRAY
130747: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
130748: LD_ADDR_VAR 0 20
130752: PUSH
130753: LD_VAR 0 6
130757: PUSH
130758: LD_INT 4
130760: ARRAY
130761: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
130762: LD_ADDR_VAR 0 21
130766: PUSH
130767: LD_VAR 0 6
130771: PUSH
130772: LD_INT 5
130774: ARRAY
130775: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
130776: LD_ADDR_VAR 0 22
130780: PUSH
130781: LD_VAR 0 6
130785: PUSH
130786: LD_INT 6
130788: ARRAY
130789: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
130790: LD_ADDR_VAR 0 23
130794: PUSH
130795: LD_VAR 0 6
130799: PUSH
130800: LD_INT 7
130802: ARRAY
130803: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
130804: LD_ADDR_VAR 0 24
130808: PUSH
130809: LD_VAR 0 6
130813: PUSH
130814: LD_INT 8
130816: ARRAY
130817: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
130818: LD_ADDR_VAR 0 25
130822: PUSH
130823: LD_VAR 0 6
130827: PUSH
130828: LD_INT 9
130830: ARRAY
130831: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
130832: LD_ADDR_VAR 0 26
130836: PUSH
130837: LD_VAR 0 6
130841: PUSH
130842: LD_INT 10
130844: ARRAY
130845: ST_TO_ADDR
// end else
130846: GO 130928
// begin f_ignore_area := false ;
130848: LD_ADDR_VAR 0 17
130852: PUSH
130853: LD_INT 0
130855: ST_TO_ADDR
// f_capture := false ;
130856: LD_ADDR_VAR 0 18
130860: PUSH
130861: LD_INT 0
130863: ST_TO_ADDR
// f_ignore_civ := false ;
130864: LD_ADDR_VAR 0 19
130868: PUSH
130869: LD_INT 0
130871: ST_TO_ADDR
// f_murder := false ;
130872: LD_ADDR_VAR 0 20
130876: PUSH
130877: LD_INT 0
130879: ST_TO_ADDR
// f_mines := false ;
130880: LD_ADDR_VAR 0 21
130884: PUSH
130885: LD_INT 0
130887: ST_TO_ADDR
// f_repair := false ;
130888: LD_ADDR_VAR 0 22
130892: PUSH
130893: LD_INT 0
130895: ST_TO_ADDR
// f_heal := false ;
130896: LD_ADDR_VAR 0 23
130900: PUSH
130901: LD_INT 0
130903: ST_TO_ADDR
// f_spacetime := false ;
130904: LD_ADDR_VAR 0 24
130908: PUSH
130909: LD_INT 0
130911: ST_TO_ADDR
// f_attack_depot := false ;
130912: LD_ADDR_VAR 0 25
130916: PUSH
130917: LD_INT 0
130919: ST_TO_ADDR
// f_crawl := false ;
130920: LD_ADDR_VAR 0 26
130924: PUSH
130925: LD_INT 0
130927: ST_TO_ADDR
// end ; if f_heal then
130928: LD_VAR 0 23
130932: IFFALSE 130959
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
130934: LD_ADDR_VAR 0 31
130938: PUSH
130939: LD_VAR 0 4
130943: PPUSH
130944: LD_INT 25
130946: PUSH
130947: LD_INT 4
130949: PUSH
130950: EMPTY
130951: LIST
130952: LIST
130953: PPUSH
130954: CALL_OW 72
130958: ST_TO_ADDR
// if f_repair then
130959: LD_VAR 0 22
130963: IFFALSE 130990
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
130965: LD_ADDR_VAR 0 33
130969: PUSH
130970: LD_VAR 0 4
130974: PPUSH
130975: LD_INT 25
130977: PUSH
130978: LD_INT 3
130980: PUSH
130981: EMPTY
130982: LIST
130983: LIST
130984: PPUSH
130985: CALL_OW 72
130989: ST_TO_ADDR
// units_path := [ ] ;
130990: LD_ADDR_VAR 0 16
130994: PUSH
130995: EMPTY
130996: ST_TO_ADDR
// for i = 1 to group do
130997: LD_ADDR_VAR 0 7
131001: PUSH
131002: DOUBLE
131003: LD_INT 1
131005: DEC
131006: ST_TO_ADDR
131007: LD_VAR 0 4
131011: PUSH
131012: FOR_TO
131013: IFFALSE 131042
// units_path := Replace ( units_path , i , path ) ;
131015: LD_ADDR_VAR 0 16
131019: PUSH
131020: LD_VAR 0 16
131024: PPUSH
131025: LD_VAR 0 7
131029: PPUSH
131030: LD_VAR 0 5
131034: PPUSH
131035: CALL_OW 1
131039: ST_TO_ADDR
131040: GO 131012
131042: POP
131043: POP
// repeat for i = group downto 1 do
131044: LD_ADDR_VAR 0 7
131048: PUSH
131049: DOUBLE
131050: LD_VAR 0 4
131054: INC
131055: ST_TO_ADDR
131056: LD_INT 1
131058: PUSH
131059: FOR_DOWNTO
131060: IFFALSE 135182
// begin wait ( 5 ) ;
131062: LD_INT 5
131064: PPUSH
131065: CALL_OW 67
// tmp := [ ] ;
131069: LD_ADDR_VAR 0 14
131073: PUSH
131074: EMPTY
131075: ST_TO_ADDR
// attacking := false ;
131076: LD_ADDR_VAR 0 29
131080: PUSH
131081: LD_INT 0
131083: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
131084: LD_VAR 0 4
131088: PUSH
131089: LD_VAR 0 7
131093: ARRAY
131094: PPUSH
131095: CALL_OW 301
131099: PUSH
131100: LD_VAR 0 4
131104: PUSH
131105: LD_VAR 0 7
131109: ARRAY
131110: NOT
131111: OR
131112: IFFALSE 131221
// begin if GetType ( group [ i ] ) = unit_human then
131114: LD_VAR 0 4
131118: PUSH
131119: LD_VAR 0 7
131123: ARRAY
131124: PPUSH
131125: CALL_OW 247
131129: PUSH
131130: LD_INT 1
131132: EQUAL
131133: IFFALSE 131179
// begin to_heal := to_heal diff group [ i ] ;
131135: LD_ADDR_VAR 0 30
131139: PUSH
131140: LD_VAR 0 30
131144: PUSH
131145: LD_VAR 0 4
131149: PUSH
131150: LD_VAR 0 7
131154: ARRAY
131155: DIFF
131156: ST_TO_ADDR
// healers := healers diff group [ i ] ;
131157: LD_ADDR_VAR 0 31
131161: PUSH
131162: LD_VAR 0 31
131166: PUSH
131167: LD_VAR 0 4
131171: PUSH
131172: LD_VAR 0 7
131176: ARRAY
131177: DIFF
131178: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
131179: LD_ADDR_VAR 0 4
131183: PUSH
131184: LD_VAR 0 4
131188: PPUSH
131189: LD_VAR 0 7
131193: PPUSH
131194: CALL_OW 3
131198: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
131199: LD_ADDR_VAR 0 16
131203: PUSH
131204: LD_VAR 0 16
131208: PPUSH
131209: LD_VAR 0 7
131213: PPUSH
131214: CALL_OW 3
131218: ST_TO_ADDR
// continue ;
131219: GO 131059
// end ; if f_repair then
131221: LD_VAR 0 22
131225: IFFALSE 131714
// begin if GetType ( group [ i ] ) = unit_vehicle then
131227: LD_VAR 0 4
131231: PUSH
131232: LD_VAR 0 7
131236: ARRAY
131237: PPUSH
131238: CALL_OW 247
131242: PUSH
131243: LD_INT 2
131245: EQUAL
131246: IFFALSE 131436
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
131248: LD_VAR 0 4
131252: PUSH
131253: LD_VAR 0 7
131257: ARRAY
131258: PPUSH
131259: CALL_OW 256
131263: PUSH
131264: LD_INT 700
131266: LESS
131267: PUSH
131268: LD_VAR 0 4
131272: PUSH
131273: LD_VAR 0 7
131277: ARRAY
131278: PUSH
131279: LD_VAR 0 32
131283: IN
131284: NOT
131285: AND
131286: IFFALSE 131310
// to_repair := to_repair union group [ i ] ;
131288: LD_ADDR_VAR 0 32
131292: PUSH
131293: LD_VAR 0 32
131297: PUSH
131298: LD_VAR 0 4
131302: PUSH
131303: LD_VAR 0 7
131307: ARRAY
131308: UNION
131309: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
131310: LD_VAR 0 4
131314: PUSH
131315: LD_VAR 0 7
131319: ARRAY
131320: PPUSH
131321: CALL_OW 256
131325: PUSH
131326: LD_INT 1000
131328: EQUAL
131329: PUSH
131330: LD_VAR 0 4
131334: PUSH
131335: LD_VAR 0 7
131339: ARRAY
131340: PUSH
131341: LD_VAR 0 32
131345: IN
131346: AND
131347: IFFALSE 131371
// to_repair := to_repair diff group [ i ] ;
131349: LD_ADDR_VAR 0 32
131353: PUSH
131354: LD_VAR 0 32
131358: PUSH
131359: LD_VAR 0 4
131363: PUSH
131364: LD_VAR 0 7
131368: ARRAY
131369: DIFF
131370: ST_TO_ADDR
// if group [ i ] in to_repair then
131371: LD_VAR 0 4
131375: PUSH
131376: LD_VAR 0 7
131380: ARRAY
131381: PUSH
131382: LD_VAR 0 32
131386: IN
131387: IFFALSE 131434
// begin if not IsInArea ( group [ i ] , f_repair ) then
131389: LD_VAR 0 4
131393: PUSH
131394: LD_VAR 0 7
131398: ARRAY
131399: PPUSH
131400: LD_VAR 0 22
131404: PPUSH
131405: CALL_OW 308
131409: NOT
131410: IFFALSE 131432
// ComMoveToArea ( group [ i ] , f_repair ) ;
131412: LD_VAR 0 4
131416: PUSH
131417: LD_VAR 0 7
131421: ARRAY
131422: PPUSH
131423: LD_VAR 0 22
131427: PPUSH
131428: CALL_OW 113
// continue ;
131432: GO 131059
// end ; end else
131434: GO 131714
// if group [ i ] in repairs then
131436: LD_VAR 0 4
131440: PUSH
131441: LD_VAR 0 7
131445: ARRAY
131446: PUSH
131447: LD_VAR 0 33
131451: IN
131452: IFFALSE 131714
// begin if IsInUnit ( group [ i ] ) then
131454: LD_VAR 0 4
131458: PUSH
131459: LD_VAR 0 7
131463: ARRAY
131464: PPUSH
131465: CALL_OW 310
131469: IFFALSE 131537
// begin z := IsInUnit ( group [ i ] ) ;
131471: LD_ADDR_VAR 0 13
131475: PUSH
131476: LD_VAR 0 4
131480: PUSH
131481: LD_VAR 0 7
131485: ARRAY
131486: PPUSH
131487: CALL_OW 310
131491: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
131492: LD_VAR 0 13
131496: PUSH
131497: LD_VAR 0 32
131501: IN
131502: PUSH
131503: LD_VAR 0 13
131507: PPUSH
131508: LD_VAR 0 22
131512: PPUSH
131513: CALL_OW 308
131517: AND
131518: IFFALSE 131535
// ComExitVehicle ( group [ i ] ) ;
131520: LD_VAR 0 4
131524: PUSH
131525: LD_VAR 0 7
131529: ARRAY
131530: PPUSH
131531: CALL_OW 121
// end else
131535: GO 131714
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
131537: LD_ADDR_VAR 0 13
131541: PUSH
131542: LD_VAR 0 4
131546: PPUSH
131547: LD_INT 95
131549: PUSH
131550: LD_VAR 0 22
131554: PUSH
131555: EMPTY
131556: LIST
131557: LIST
131558: PUSH
131559: LD_INT 58
131561: PUSH
131562: EMPTY
131563: LIST
131564: PUSH
131565: EMPTY
131566: LIST
131567: LIST
131568: PPUSH
131569: CALL_OW 72
131573: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
131574: LD_VAR 0 4
131578: PUSH
131579: LD_VAR 0 7
131583: ARRAY
131584: PPUSH
131585: CALL_OW 314
131589: NOT
131590: IFFALSE 131712
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
131592: LD_ADDR_VAR 0 10
131596: PUSH
131597: LD_VAR 0 13
131601: PPUSH
131602: LD_VAR 0 4
131606: PUSH
131607: LD_VAR 0 7
131611: ARRAY
131612: PPUSH
131613: CALL_OW 74
131617: ST_TO_ADDR
// if not x then
131618: LD_VAR 0 10
131622: NOT
131623: IFFALSE 131627
// continue ;
131625: GO 131059
// if GetLives ( x ) < 1000 then
131627: LD_VAR 0 10
131631: PPUSH
131632: CALL_OW 256
131636: PUSH
131637: LD_INT 1000
131639: LESS
131640: IFFALSE 131664
// ComRepairVehicle ( group [ i ] , x ) else
131642: LD_VAR 0 4
131646: PUSH
131647: LD_VAR 0 7
131651: ARRAY
131652: PPUSH
131653: LD_VAR 0 10
131657: PPUSH
131658: CALL_OW 129
131662: GO 131712
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
131664: LD_VAR 0 23
131668: PUSH
131669: LD_VAR 0 4
131673: PUSH
131674: LD_VAR 0 7
131678: ARRAY
131679: PPUSH
131680: CALL_OW 256
131684: PUSH
131685: LD_INT 1000
131687: LESS
131688: AND
131689: NOT
131690: IFFALSE 131712
// ComEnterUnit ( group [ i ] , x ) ;
131692: LD_VAR 0 4
131696: PUSH
131697: LD_VAR 0 7
131701: ARRAY
131702: PPUSH
131703: LD_VAR 0 10
131707: PPUSH
131708: CALL_OW 120
// end ; continue ;
131712: GO 131059
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
131714: LD_VAR 0 23
131718: PUSH
131719: LD_VAR 0 4
131723: PUSH
131724: LD_VAR 0 7
131728: ARRAY
131729: PPUSH
131730: CALL_OW 247
131734: PUSH
131735: LD_INT 1
131737: EQUAL
131738: AND
131739: IFFALSE 132217
// begin if group [ i ] in healers then
131741: LD_VAR 0 4
131745: PUSH
131746: LD_VAR 0 7
131750: ARRAY
131751: PUSH
131752: LD_VAR 0 31
131756: IN
131757: IFFALSE 132030
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
131759: LD_VAR 0 4
131763: PUSH
131764: LD_VAR 0 7
131768: ARRAY
131769: PPUSH
131770: LD_VAR 0 23
131774: PPUSH
131775: CALL_OW 308
131779: NOT
131780: PUSH
131781: LD_VAR 0 4
131785: PUSH
131786: LD_VAR 0 7
131790: ARRAY
131791: PPUSH
131792: CALL_OW 314
131796: NOT
131797: AND
131798: IFFALSE 131822
// ComMoveToArea ( group [ i ] , f_heal ) else
131800: LD_VAR 0 4
131804: PUSH
131805: LD_VAR 0 7
131809: ARRAY
131810: PPUSH
131811: LD_VAR 0 23
131815: PPUSH
131816: CALL_OW 113
131820: GO 132028
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
131822: LD_VAR 0 4
131826: PUSH
131827: LD_VAR 0 7
131831: ARRAY
131832: PPUSH
131833: CALL 103752 0 1
131837: PPUSH
131838: CALL_OW 256
131842: PUSH
131843: LD_INT 1000
131845: EQUAL
131846: IFFALSE 131865
// ComStop ( group [ i ] ) else
131848: LD_VAR 0 4
131852: PUSH
131853: LD_VAR 0 7
131857: ARRAY
131858: PPUSH
131859: CALL_OW 141
131863: GO 132028
// if not HasTask ( group [ i ] ) and to_heal then
131865: LD_VAR 0 4
131869: PUSH
131870: LD_VAR 0 7
131874: ARRAY
131875: PPUSH
131876: CALL_OW 314
131880: NOT
131881: PUSH
131882: LD_VAR 0 30
131886: AND
131887: IFFALSE 132028
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
131889: LD_ADDR_VAR 0 13
131893: PUSH
131894: LD_VAR 0 30
131898: PPUSH
131899: LD_INT 3
131901: PUSH
131902: LD_INT 54
131904: PUSH
131905: EMPTY
131906: LIST
131907: PUSH
131908: EMPTY
131909: LIST
131910: LIST
131911: PPUSH
131912: CALL_OW 72
131916: PPUSH
131917: LD_VAR 0 4
131921: PUSH
131922: LD_VAR 0 7
131926: ARRAY
131927: PPUSH
131928: CALL_OW 74
131932: ST_TO_ADDR
// if z then
131933: LD_VAR 0 13
131937: IFFALSE 132028
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
131939: LD_INT 91
131941: PUSH
131942: LD_VAR 0 13
131946: PUSH
131947: LD_INT 10
131949: PUSH
131950: EMPTY
131951: LIST
131952: LIST
131953: LIST
131954: PUSH
131955: LD_INT 81
131957: PUSH
131958: LD_VAR 0 13
131962: PPUSH
131963: CALL_OW 255
131967: PUSH
131968: EMPTY
131969: LIST
131970: LIST
131971: PUSH
131972: EMPTY
131973: LIST
131974: LIST
131975: PPUSH
131976: CALL_OW 69
131980: PUSH
131981: LD_INT 0
131983: EQUAL
131984: IFFALSE 132008
// ComHeal ( group [ i ] , z ) else
131986: LD_VAR 0 4
131990: PUSH
131991: LD_VAR 0 7
131995: ARRAY
131996: PPUSH
131997: LD_VAR 0 13
132001: PPUSH
132002: CALL_OW 128
132006: GO 132028
// ComMoveToArea ( group [ i ] , f_heal ) ;
132008: LD_VAR 0 4
132012: PUSH
132013: LD_VAR 0 7
132017: ARRAY
132018: PPUSH
132019: LD_VAR 0 23
132023: PPUSH
132024: CALL_OW 113
// end ; continue ;
132028: GO 131059
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
132030: LD_VAR 0 4
132034: PUSH
132035: LD_VAR 0 7
132039: ARRAY
132040: PPUSH
132041: CALL_OW 256
132045: PUSH
132046: LD_INT 700
132048: LESS
132049: PUSH
132050: LD_VAR 0 4
132054: PUSH
132055: LD_VAR 0 7
132059: ARRAY
132060: PUSH
132061: LD_VAR 0 30
132065: IN
132066: NOT
132067: AND
132068: IFFALSE 132092
// to_heal := to_heal union group [ i ] ;
132070: LD_ADDR_VAR 0 30
132074: PUSH
132075: LD_VAR 0 30
132079: PUSH
132080: LD_VAR 0 4
132084: PUSH
132085: LD_VAR 0 7
132089: ARRAY
132090: UNION
132091: ST_TO_ADDR
// if group [ i ] in to_heal then
132092: LD_VAR 0 4
132096: PUSH
132097: LD_VAR 0 7
132101: ARRAY
132102: PUSH
132103: LD_VAR 0 30
132107: IN
132108: IFFALSE 132217
// begin if GetLives ( group [ i ] ) = 1000 then
132110: LD_VAR 0 4
132114: PUSH
132115: LD_VAR 0 7
132119: ARRAY
132120: PPUSH
132121: CALL_OW 256
132125: PUSH
132126: LD_INT 1000
132128: EQUAL
132129: IFFALSE 132155
// to_heal := to_heal diff group [ i ] else
132131: LD_ADDR_VAR 0 30
132135: PUSH
132136: LD_VAR 0 30
132140: PUSH
132141: LD_VAR 0 4
132145: PUSH
132146: LD_VAR 0 7
132150: ARRAY
132151: DIFF
132152: ST_TO_ADDR
132153: GO 132217
// begin if not IsInArea ( group [ i ] , to_heal ) then
132155: LD_VAR 0 4
132159: PUSH
132160: LD_VAR 0 7
132164: ARRAY
132165: PPUSH
132166: LD_VAR 0 30
132170: PPUSH
132171: CALL_OW 308
132175: NOT
132176: IFFALSE 132200
// ComMoveToArea ( group [ i ] , f_heal ) else
132178: LD_VAR 0 4
132182: PUSH
132183: LD_VAR 0 7
132187: ARRAY
132188: PPUSH
132189: LD_VAR 0 23
132193: PPUSH
132194: CALL_OW 113
132198: GO 132215
// ComHold ( group [ i ] ) ;
132200: LD_VAR 0 4
132204: PUSH
132205: LD_VAR 0 7
132209: ARRAY
132210: PPUSH
132211: CALL_OW 140
// continue ;
132215: GO 131059
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
132217: LD_VAR 0 4
132221: PUSH
132222: LD_VAR 0 7
132226: ARRAY
132227: PPUSH
132228: LD_INT 10
132230: PPUSH
132231: CALL 101523 0 2
132235: NOT
132236: PUSH
132237: LD_VAR 0 16
132241: PUSH
132242: LD_VAR 0 7
132246: ARRAY
132247: PUSH
132248: EMPTY
132249: EQUAL
132250: NOT
132251: AND
132252: IFFALSE 132518
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
132254: LD_VAR 0 4
132258: PUSH
132259: LD_VAR 0 7
132263: ARRAY
132264: PPUSH
132265: CALL_OW 262
132269: PUSH
132270: LD_INT 1
132272: PUSH
132273: LD_INT 2
132275: PUSH
132276: EMPTY
132277: LIST
132278: LIST
132279: IN
132280: IFFALSE 132321
// if GetFuel ( group [ i ] ) < 10 then
132282: LD_VAR 0 4
132286: PUSH
132287: LD_VAR 0 7
132291: ARRAY
132292: PPUSH
132293: CALL_OW 261
132297: PUSH
132298: LD_INT 10
132300: LESS
132301: IFFALSE 132321
// SetFuel ( group [ i ] , 12 ) ;
132303: LD_VAR 0 4
132307: PUSH
132308: LD_VAR 0 7
132312: ARRAY
132313: PPUSH
132314: LD_INT 12
132316: PPUSH
132317: CALL_OW 240
// if units_path [ i ] then
132321: LD_VAR 0 16
132325: PUSH
132326: LD_VAR 0 7
132330: ARRAY
132331: IFFALSE 132516
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
132333: LD_VAR 0 4
132337: PUSH
132338: LD_VAR 0 7
132342: ARRAY
132343: PPUSH
132344: LD_VAR 0 16
132348: PUSH
132349: LD_VAR 0 7
132353: ARRAY
132354: PUSH
132355: LD_INT 1
132357: ARRAY
132358: PUSH
132359: LD_INT 1
132361: ARRAY
132362: PPUSH
132363: LD_VAR 0 16
132367: PUSH
132368: LD_VAR 0 7
132372: ARRAY
132373: PUSH
132374: LD_INT 1
132376: ARRAY
132377: PUSH
132378: LD_INT 2
132380: ARRAY
132381: PPUSH
132382: CALL_OW 297
132386: PUSH
132387: LD_INT 6
132389: GREATER
132390: IFFALSE 132465
// begin if not HasTask ( group [ i ] ) then
132392: LD_VAR 0 4
132396: PUSH
132397: LD_VAR 0 7
132401: ARRAY
132402: PPUSH
132403: CALL_OW 314
132407: NOT
132408: IFFALSE 132463
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
132410: LD_VAR 0 4
132414: PUSH
132415: LD_VAR 0 7
132419: ARRAY
132420: PPUSH
132421: LD_VAR 0 16
132425: PUSH
132426: LD_VAR 0 7
132430: ARRAY
132431: PUSH
132432: LD_INT 1
132434: ARRAY
132435: PUSH
132436: LD_INT 1
132438: ARRAY
132439: PPUSH
132440: LD_VAR 0 16
132444: PUSH
132445: LD_VAR 0 7
132449: ARRAY
132450: PUSH
132451: LD_INT 1
132453: ARRAY
132454: PUSH
132455: LD_INT 2
132457: ARRAY
132458: PPUSH
132459: CALL_OW 114
// end else
132463: GO 132516
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
132465: LD_ADDR_VAR 0 15
132469: PUSH
132470: LD_VAR 0 16
132474: PUSH
132475: LD_VAR 0 7
132479: ARRAY
132480: PPUSH
132481: LD_INT 1
132483: PPUSH
132484: CALL_OW 3
132488: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
132489: LD_ADDR_VAR 0 16
132493: PUSH
132494: LD_VAR 0 16
132498: PPUSH
132499: LD_VAR 0 7
132503: PPUSH
132504: LD_VAR 0 15
132508: PPUSH
132509: CALL_OW 1
132513: ST_TO_ADDR
// continue ;
132514: GO 131059
// end ; end ; end else
132516: GO 135180
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
132518: LD_ADDR_VAR 0 14
132522: PUSH
132523: LD_INT 81
132525: PUSH
132526: LD_VAR 0 4
132530: PUSH
132531: LD_VAR 0 7
132535: ARRAY
132536: PPUSH
132537: CALL_OW 255
132541: PUSH
132542: EMPTY
132543: LIST
132544: LIST
132545: PPUSH
132546: CALL_OW 69
132550: ST_TO_ADDR
// if not tmp then
132551: LD_VAR 0 14
132555: NOT
132556: IFFALSE 132560
// continue ;
132558: GO 131059
// if f_ignore_area then
132560: LD_VAR 0 17
132564: IFFALSE 132652
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
132566: LD_ADDR_VAR 0 15
132570: PUSH
132571: LD_VAR 0 14
132575: PPUSH
132576: LD_INT 3
132578: PUSH
132579: LD_INT 92
132581: PUSH
132582: LD_VAR 0 17
132586: PUSH
132587: LD_INT 1
132589: ARRAY
132590: PUSH
132591: LD_VAR 0 17
132595: PUSH
132596: LD_INT 2
132598: ARRAY
132599: PUSH
132600: LD_VAR 0 17
132604: PUSH
132605: LD_INT 3
132607: ARRAY
132608: PUSH
132609: EMPTY
132610: LIST
132611: LIST
132612: LIST
132613: LIST
132614: PUSH
132615: EMPTY
132616: LIST
132617: LIST
132618: PPUSH
132619: CALL_OW 72
132623: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
132624: LD_VAR 0 14
132628: PUSH
132629: LD_VAR 0 15
132633: DIFF
132634: IFFALSE 132652
// tmp := tmp diff tmp2 ;
132636: LD_ADDR_VAR 0 14
132640: PUSH
132641: LD_VAR 0 14
132645: PUSH
132646: LD_VAR 0 15
132650: DIFF
132651: ST_TO_ADDR
// end ; if not f_murder then
132652: LD_VAR 0 20
132656: NOT
132657: IFFALSE 132715
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
132659: LD_ADDR_VAR 0 15
132663: PUSH
132664: LD_VAR 0 14
132668: PPUSH
132669: LD_INT 3
132671: PUSH
132672: LD_INT 50
132674: PUSH
132675: EMPTY
132676: LIST
132677: PUSH
132678: EMPTY
132679: LIST
132680: LIST
132681: PPUSH
132682: CALL_OW 72
132686: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
132687: LD_VAR 0 14
132691: PUSH
132692: LD_VAR 0 15
132696: DIFF
132697: IFFALSE 132715
// tmp := tmp diff tmp2 ;
132699: LD_ADDR_VAR 0 14
132703: PUSH
132704: LD_VAR 0 14
132708: PUSH
132709: LD_VAR 0 15
132713: DIFF
132714: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
132715: LD_ADDR_VAR 0 14
132719: PUSH
132720: LD_VAR 0 4
132724: PUSH
132725: LD_VAR 0 7
132729: ARRAY
132730: PPUSH
132731: LD_VAR 0 14
132735: PPUSH
132736: LD_INT 1
132738: PPUSH
132739: LD_INT 1
132741: PPUSH
132742: CALL 74455 0 4
132746: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
132747: LD_VAR 0 4
132751: PUSH
132752: LD_VAR 0 7
132756: ARRAY
132757: PPUSH
132758: CALL_OW 257
132762: PUSH
132763: LD_INT 1
132765: EQUAL
132766: IFFALSE 133214
// begin if WantPlant ( group [ i ] ) then
132768: LD_VAR 0 4
132772: PUSH
132773: LD_VAR 0 7
132777: ARRAY
132778: PPUSH
132779: CALL 73956 0 1
132783: IFFALSE 132787
// continue ;
132785: GO 131059
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
132787: LD_VAR 0 18
132791: PUSH
132792: LD_VAR 0 4
132796: PUSH
132797: LD_VAR 0 7
132801: ARRAY
132802: PPUSH
132803: CALL_OW 310
132807: NOT
132808: AND
132809: PUSH
132810: LD_VAR 0 14
132814: PUSH
132815: LD_INT 1
132817: ARRAY
132818: PUSH
132819: LD_VAR 0 14
132823: PPUSH
132824: LD_INT 21
132826: PUSH
132827: LD_INT 2
132829: PUSH
132830: EMPTY
132831: LIST
132832: LIST
132833: PUSH
132834: LD_INT 58
132836: PUSH
132837: EMPTY
132838: LIST
132839: PUSH
132840: EMPTY
132841: LIST
132842: LIST
132843: PPUSH
132844: CALL_OW 72
132848: IN
132849: AND
132850: IFFALSE 132886
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
132852: LD_VAR 0 4
132856: PUSH
132857: LD_VAR 0 7
132861: ARRAY
132862: PPUSH
132863: LD_VAR 0 14
132867: PUSH
132868: LD_INT 1
132870: ARRAY
132871: PPUSH
132872: CALL_OW 120
// attacking := true ;
132876: LD_ADDR_VAR 0 29
132880: PUSH
132881: LD_INT 1
132883: ST_TO_ADDR
// continue ;
132884: GO 131059
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
132886: LD_VAR 0 26
132890: PUSH
132891: LD_VAR 0 4
132895: PUSH
132896: LD_VAR 0 7
132900: ARRAY
132901: PPUSH
132902: CALL_OW 257
132906: PUSH
132907: LD_INT 1
132909: EQUAL
132910: AND
132911: PUSH
132912: LD_VAR 0 4
132916: PUSH
132917: LD_VAR 0 7
132921: ARRAY
132922: PPUSH
132923: CALL_OW 256
132927: PUSH
132928: LD_INT 800
132930: LESS
132931: AND
132932: PUSH
132933: LD_VAR 0 4
132937: PUSH
132938: LD_VAR 0 7
132942: ARRAY
132943: PPUSH
132944: CALL_OW 318
132948: NOT
132949: AND
132950: IFFALSE 132967
// ComCrawl ( group [ i ] ) ;
132952: LD_VAR 0 4
132956: PUSH
132957: LD_VAR 0 7
132961: ARRAY
132962: PPUSH
132963: CALL_OW 137
// if f_mines then
132967: LD_VAR 0 21
132971: IFFALSE 133214
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
132973: LD_VAR 0 14
132977: PUSH
132978: LD_INT 1
132980: ARRAY
132981: PPUSH
132982: CALL_OW 247
132986: PUSH
132987: LD_INT 3
132989: EQUAL
132990: PUSH
132991: LD_VAR 0 14
132995: PUSH
132996: LD_INT 1
132998: ARRAY
132999: PUSH
133000: LD_VAR 0 27
133004: IN
133005: NOT
133006: AND
133007: IFFALSE 133214
// begin x := GetX ( tmp [ 1 ] ) ;
133009: LD_ADDR_VAR 0 10
133013: PUSH
133014: LD_VAR 0 14
133018: PUSH
133019: LD_INT 1
133021: ARRAY
133022: PPUSH
133023: CALL_OW 250
133027: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
133028: LD_ADDR_VAR 0 11
133032: PUSH
133033: LD_VAR 0 14
133037: PUSH
133038: LD_INT 1
133040: ARRAY
133041: PPUSH
133042: CALL_OW 251
133046: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
133047: LD_ADDR_VAR 0 12
133051: PUSH
133052: LD_VAR 0 4
133056: PUSH
133057: LD_VAR 0 7
133061: ARRAY
133062: PPUSH
133063: CALL 101608 0 1
133067: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
133068: LD_VAR 0 4
133072: PUSH
133073: LD_VAR 0 7
133077: ARRAY
133078: PPUSH
133079: LD_VAR 0 10
133083: PPUSH
133084: LD_VAR 0 11
133088: PPUSH
133089: LD_VAR 0 14
133093: PUSH
133094: LD_INT 1
133096: ARRAY
133097: PPUSH
133098: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
133102: LD_VAR 0 4
133106: PUSH
133107: LD_VAR 0 7
133111: ARRAY
133112: PPUSH
133113: LD_VAR 0 10
133117: PPUSH
133118: LD_VAR 0 12
133122: PPUSH
133123: LD_INT 7
133125: PPUSH
133126: CALL_OW 272
133130: PPUSH
133131: LD_VAR 0 11
133135: PPUSH
133136: LD_VAR 0 12
133140: PPUSH
133141: LD_INT 7
133143: PPUSH
133144: CALL_OW 273
133148: PPUSH
133149: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
133153: LD_VAR 0 4
133157: PUSH
133158: LD_VAR 0 7
133162: ARRAY
133163: PPUSH
133164: LD_INT 71
133166: PPUSH
133167: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
133171: LD_ADDR_VAR 0 27
133175: PUSH
133176: LD_VAR 0 27
133180: PPUSH
133181: LD_VAR 0 27
133185: PUSH
133186: LD_INT 1
133188: PLUS
133189: PPUSH
133190: LD_VAR 0 14
133194: PUSH
133195: LD_INT 1
133197: ARRAY
133198: PPUSH
133199: CALL_OW 1
133203: ST_TO_ADDR
// attacking := true ;
133204: LD_ADDR_VAR 0 29
133208: PUSH
133209: LD_INT 1
133211: ST_TO_ADDR
// continue ;
133212: GO 131059
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
133214: LD_VAR 0 4
133218: PUSH
133219: LD_VAR 0 7
133223: ARRAY
133224: PPUSH
133225: CALL_OW 257
133229: PUSH
133230: LD_INT 17
133232: EQUAL
133233: PUSH
133234: LD_VAR 0 4
133238: PUSH
133239: LD_VAR 0 7
133243: ARRAY
133244: PPUSH
133245: CALL_OW 110
133249: PUSH
133250: LD_INT 71
133252: EQUAL
133253: NOT
133254: AND
133255: IFFALSE 133401
// begin attacking := false ;
133257: LD_ADDR_VAR 0 29
133261: PUSH
133262: LD_INT 0
133264: ST_TO_ADDR
// k := 5 ;
133265: LD_ADDR_VAR 0 9
133269: PUSH
133270: LD_INT 5
133272: ST_TO_ADDR
// if tmp < k then
133273: LD_VAR 0 14
133277: PUSH
133278: LD_VAR 0 9
133282: LESS
133283: IFFALSE 133295
// k := tmp ;
133285: LD_ADDR_VAR 0 9
133289: PUSH
133290: LD_VAR 0 14
133294: ST_TO_ADDR
// for j = 1 to k do
133295: LD_ADDR_VAR 0 8
133299: PUSH
133300: DOUBLE
133301: LD_INT 1
133303: DEC
133304: ST_TO_ADDR
133305: LD_VAR 0 9
133309: PUSH
133310: FOR_TO
133311: IFFALSE 133399
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
133313: LD_VAR 0 14
133317: PUSH
133318: LD_VAR 0 8
133322: ARRAY
133323: PUSH
133324: LD_VAR 0 14
133328: PPUSH
133329: LD_INT 58
133331: PUSH
133332: EMPTY
133333: LIST
133334: PPUSH
133335: CALL_OW 72
133339: IN
133340: NOT
133341: IFFALSE 133397
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
133343: LD_VAR 0 4
133347: PUSH
133348: LD_VAR 0 7
133352: ARRAY
133353: PPUSH
133354: LD_VAR 0 14
133358: PUSH
133359: LD_VAR 0 8
133363: ARRAY
133364: PPUSH
133365: CALL_OW 115
// attacking := true ;
133369: LD_ADDR_VAR 0 29
133373: PUSH
133374: LD_INT 1
133376: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
133377: LD_VAR 0 4
133381: PUSH
133382: LD_VAR 0 7
133386: ARRAY
133387: PPUSH
133388: LD_INT 71
133390: PPUSH
133391: CALL_OW 109
// continue ;
133395: GO 133310
// end ; end ;
133397: GO 133310
133399: POP
133400: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
133401: LD_VAR 0 4
133405: PUSH
133406: LD_VAR 0 7
133410: ARRAY
133411: PPUSH
133412: CALL_OW 257
133416: PUSH
133417: LD_INT 8
133419: EQUAL
133420: PUSH
133421: LD_VAR 0 4
133425: PUSH
133426: LD_VAR 0 7
133430: ARRAY
133431: PPUSH
133432: CALL_OW 264
133436: PUSH
133437: LD_INT 28
133439: PUSH
133440: LD_INT 45
133442: PUSH
133443: LD_INT 7
133445: PUSH
133446: LD_INT 47
133448: PUSH
133449: EMPTY
133450: LIST
133451: LIST
133452: LIST
133453: LIST
133454: IN
133455: OR
133456: IFFALSE 133712
// begin attacking := false ;
133458: LD_ADDR_VAR 0 29
133462: PUSH
133463: LD_INT 0
133465: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
133466: LD_VAR 0 14
133470: PUSH
133471: LD_INT 1
133473: ARRAY
133474: PPUSH
133475: CALL_OW 266
133479: PUSH
133480: LD_INT 32
133482: PUSH
133483: LD_INT 31
133485: PUSH
133486: LD_INT 33
133488: PUSH
133489: LD_INT 4
133491: PUSH
133492: LD_INT 5
133494: PUSH
133495: EMPTY
133496: LIST
133497: LIST
133498: LIST
133499: LIST
133500: LIST
133501: IN
133502: IFFALSE 133688
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
133504: LD_ADDR_VAR 0 9
133508: PUSH
133509: LD_VAR 0 14
133513: PUSH
133514: LD_INT 1
133516: ARRAY
133517: PPUSH
133518: CALL_OW 266
133522: PPUSH
133523: LD_VAR 0 14
133527: PUSH
133528: LD_INT 1
133530: ARRAY
133531: PPUSH
133532: CALL_OW 250
133536: PPUSH
133537: LD_VAR 0 14
133541: PUSH
133542: LD_INT 1
133544: ARRAY
133545: PPUSH
133546: CALL_OW 251
133550: PPUSH
133551: LD_VAR 0 14
133555: PUSH
133556: LD_INT 1
133558: ARRAY
133559: PPUSH
133560: CALL_OW 254
133564: PPUSH
133565: LD_VAR 0 14
133569: PUSH
133570: LD_INT 1
133572: ARRAY
133573: PPUSH
133574: CALL_OW 248
133578: PPUSH
133579: LD_INT 0
133581: PPUSH
133582: CALL 82978 0 6
133586: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
133587: LD_ADDR_VAR 0 8
133591: PUSH
133592: LD_VAR 0 4
133596: PUSH
133597: LD_VAR 0 7
133601: ARRAY
133602: PPUSH
133603: LD_VAR 0 9
133607: PPUSH
133608: CALL 101721 0 2
133612: ST_TO_ADDR
// if j then
133613: LD_VAR 0 8
133617: IFFALSE 133686
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
133619: LD_VAR 0 8
133623: PUSH
133624: LD_INT 1
133626: ARRAY
133627: PPUSH
133628: LD_VAR 0 8
133632: PUSH
133633: LD_INT 2
133635: ARRAY
133636: PPUSH
133637: CALL_OW 488
133641: IFFALSE 133686
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
133643: LD_VAR 0 4
133647: PUSH
133648: LD_VAR 0 7
133652: ARRAY
133653: PPUSH
133654: LD_VAR 0 8
133658: PUSH
133659: LD_INT 1
133661: ARRAY
133662: PPUSH
133663: LD_VAR 0 8
133667: PUSH
133668: LD_INT 2
133670: ARRAY
133671: PPUSH
133672: CALL_OW 116
// attacking := true ;
133676: LD_ADDR_VAR 0 29
133680: PUSH
133681: LD_INT 1
133683: ST_TO_ADDR
// continue ;
133684: GO 131059
// end ; end else
133686: GO 133712
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
133688: LD_VAR 0 4
133692: PUSH
133693: LD_VAR 0 7
133697: ARRAY
133698: PPUSH
133699: LD_VAR 0 14
133703: PUSH
133704: LD_INT 1
133706: ARRAY
133707: PPUSH
133708: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
133712: LD_VAR 0 4
133716: PUSH
133717: LD_VAR 0 7
133721: ARRAY
133722: PPUSH
133723: CALL_OW 265
133727: PUSH
133728: LD_INT 11
133730: EQUAL
133731: IFFALSE 134009
// begin k := 10 ;
133733: LD_ADDR_VAR 0 9
133737: PUSH
133738: LD_INT 10
133740: ST_TO_ADDR
// x := 0 ;
133741: LD_ADDR_VAR 0 10
133745: PUSH
133746: LD_INT 0
133748: ST_TO_ADDR
// if tmp < k then
133749: LD_VAR 0 14
133753: PUSH
133754: LD_VAR 0 9
133758: LESS
133759: IFFALSE 133771
// k := tmp ;
133761: LD_ADDR_VAR 0 9
133765: PUSH
133766: LD_VAR 0 14
133770: ST_TO_ADDR
// for j = k downto 1 do
133771: LD_ADDR_VAR 0 8
133775: PUSH
133776: DOUBLE
133777: LD_VAR 0 9
133781: INC
133782: ST_TO_ADDR
133783: LD_INT 1
133785: PUSH
133786: FOR_DOWNTO
133787: IFFALSE 133862
// begin if GetType ( tmp [ j ] ) = unit_human then
133789: LD_VAR 0 14
133793: PUSH
133794: LD_VAR 0 8
133798: ARRAY
133799: PPUSH
133800: CALL_OW 247
133804: PUSH
133805: LD_INT 1
133807: EQUAL
133808: IFFALSE 133860
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
133810: LD_VAR 0 4
133814: PUSH
133815: LD_VAR 0 7
133819: ARRAY
133820: PPUSH
133821: LD_VAR 0 14
133825: PUSH
133826: LD_VAR 0 8
133830: ARRAY
133831: PPUSH
133832: CALL 101975 0 2
// x := tmp [ j ] ;
133836: LD_ADDR_VAR 0 10
133840: PUSH
133841: LD_VAR 0 14
133845: PUSH
133846: LD_VAR 0 8
133850: ARRAY
133851: ST_TO_ADDR
// attacking := true ;
133852: LD_ADDR_VAR 0 29
133856: PUSH
133857: LD_INT 1
133859: ST_TO_ADDR
// end ; end ;
133860: GO 133786
133862: POP
133863: POP
// if not x then
133864: LD_VAR 0 10
133868: NOT
133869: IFFALSE 134009
// begin attacking := true ;
133871: LD_ADDR_VAR 0 29
133875: PUSH
133876: LD_INT 1
133878: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
133879: LD_VAR 0 4
133883: PUSH
133884: LD_VAR 0 7
133888: ARRAY
133889: PPUSH
133890: CALL_OW 250
133894: PPUSH
133895: LD_VAR 0 4
133899: PUSH
133900: LD_VAR 0 7
133904: ARRAY
133905: PPUSH
133906: CALL_OW 251
133910: PPUSH
133911: CALL_OW 546
133915: PUSH
133916: LD_INT 2
133918: ARRAY
133919: PUSH
133920: LD_VAR 0 14
133924: PUSH
133925: LD_INT 1
133927: ARRAY
133928: PPUSH
133929: CALL_OW 250
133933: PPUSH
133934: LD_VAR 0 14
133938: PUSH
133939: LD_INT 1
133941: ARRAY
133942: PPUSH
133943: CALL_OW 251
133947: PPUSH
133948: CALL_OW 546
133952: PUSH
133953: LD_INT 2
133955: ARRAY
133956: EQUAL
133957: IFFALSE 133985
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
133959: LD_VAR 0 4
133963: PUSH
133964: LD_VAR 0 7
133968: ARRAY
133969: PPUSH
133970: LD_VAR 0 14
133974: PUSH
133975: LD_INT 1
133977: ARRAY
133978: PPUSH
133979: CALL 101975 0 2
133983: GO 134009
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
133985: LD_VAR 0 4
133989: PUSH
133990: LD_VAR 0 7
133994: ARRAY
133995: PPUSH
133996: LD_VAR 0 14
134000: PUSH
134001: LD_INT 1
134003: ARRAY
134004: PPUSH
134005: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
134009: LD_VAR 0 4
134013: PUSH
134014: LD_VAR 0 7
134018: ARRAY
134019: PPUSH
134020: CALL_OW 264
134024: PUSH
134025: LD_INT 29
134027: EQUAL
134028: IFFALSE 134394
// begin if WantsToAttack ( group [ i ] ) in bombed then
134030: LD_VAR 0 4
134034: PUSH
134035: LD_VAR 0 7
134039: ARRAY
134040: PPUSH
134041: CALL_OW 319
134045: PUSH
134046: LD_VAR 0 28
134050: IN
134051: IFFALSE 134055
// continue ;
134053: GO 131059
// k := 8 ;
134055: LD_ADDR_VAR 0 9
134059: PUSH
134060: LD_INT 8
134062: ST_TO_ADDR
// x := 0 ;
134063: LD_ADDR_VAR 0 10
134067: PUSH
134068: LD_INT 0
134070: ST_TO_ADDR
// if tmp < k then
134071: LD_VAR 0 14
134075: PUSH
134076: LD_VAR 0 9
134080: LESS
134081: IFFALSE 134093
// k := tmp ;
134083: LD_ADDR_VAR 0 9
134087: PUSH
134088: LD_VAR 0 14
134092: ST_TO_ADDR
// for j = 1 to k do
134093: LD_ADDR_VAR 0 8
134097: PUSH
134098: DOUBLE
134099: LD_INT 1
134101: DEC
134102: ST_TO_ADDR
134103: LD_VAR 0 9
134107: PUSH
134108: FOR_TO
134109: IFFALSE 134241
// begin if GetType ( tmp [ j ] ) = unit_building then
134111: LD_VAR 0 14
134115: PUSH
134116: LD_VAR 0 8
134120: ARRAY
134121: PPUSH
134122: CALL_OW 247
134126: PUSH
134127: LD_INT 3
134129: EQUAL
134130: IFFALSE 134239
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
134132: LD_VAR 0 14
134136: PUSH
134137: LD_VAR 0 8
134141: ARRAY
134142: PUSH
134143: LD_VAR 0 28
134147: IN
134148: NOT
134149: PUSH
134150: LD_VAR 0 14
134154: PUSH
134155: LD_VAR 0 8
134159: ARRAY
134160: PPUSH
134161: CALL_OW 313
134165: AND
134166: IFFALSE 134239
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
134168: LD_VAR 0 4
134172: PUSH
134173: LD_VAR 0 7
134177: ARRAY
134178: PPUSH
134179: LD_VAR 0 14
134183: PUSH
134184: LD_VAR 0 8
134188: ARRAY
134189: PPUSH
134190: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
134194: LD_ADDR_VAR 0 28
134198: PUSH
134199: LD_VAR 0 28
134203: PPUSH
134204: LD_VAR 0 28
134208: PUSH
134209: LD_INT 1
134211: PLUS
134212: PPUSH
134213: LD_VAR 0 14
134217: PUSH
134218: LD_VAR 0 8
134222: ARRAY
134223: PPUSH
134224: CALL_OW 1
134228: ST_TO_ADDR
// attacking := true ;
134229: LD_ADDR_VAR 0 29
134233: PUSH
134234: LD_INT 1
134236: ST_TO_ADDR
// break ;
134237: GO 134241
// end ; end ;
134239: GO 134108
134241: POP
134242: POP
// if not attacking and f_attack_depot then
134243: LD_VAR 0 29
134247: NOT
134248: PUSH
134249: LD_VAR 0 25
134253: AND
134254: IFFALSE 134349
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
134256: LD_ADDR_VAR 0 13
134260: PUSH
134261: LD_VAR 0 14
134265: PPUSH
134266: LD_INT 2
134268: PUSH
134269: LD_INT 30
134271: PUSH
134272: LD_INT 0
134274: PUSH
134275: EMPTY
134276: LIST
134277: LIST
134278: PUSH
134279: LD_INT 30
134281: PUSH
134282: LD_INT 1
134284: PUSH
134285: EMPTY
134286: LIST
134287: LIST
134288: PUSH
134289: EMPTY
134290: LIST
134291: LIST
134292: LIST
134293: PPUSH
134294: CALL_OW 72
134298: ST_TO_ADDR
// if z then
134299: LD_VAR 0 13
134303: IFFALSE 134349
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
134305: LD_VAR 0 4
134309: PUSH
134310: LD_VAR 0 7
134314: ARRAY
134315: PPUSH
134316: LD_VAR 0 13
134320: PPUSH
134321: LD_VAR 0 4
134325: PUSH
134326: LD_VAR 0 7
134330: ARRAY
134331: PPUSH
134332: CALL_OW 74
134336: PPUSH
134337: CALL_OW 115
// attacking := true ;
134341: LD_ADDR_VAR 0 29
134345: PUSH
134346: LD_INT 1
134348: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
134349: LD_VAR 0 4
134353: PUSH
134354: LD_VAR 0 7
134358: ARRAY
134359: PPUSH
134360: CALL_OW 256
134364: PUSH
134365: LD_INT 500
134367: LESS
134368: IFFALSE 134394
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
134370: LD_VAR 0 4
134374: PUSH
134375: LD_VAR 0 7
134379: ARRAY
134380: PPUSH
134381: LD_VAR 0 14
134385: PUSH
134386: LD_INT 1
134388: ARRAY
134389: PPUSH
134390: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
134394: LD_VAR 0 4
134398: PUSH
134399: LD_VAR 0 7
134403: ARRAY
134404: PPUSH
134405: CALL_OW 264
134409: PUSH
134410: LD_INT 49
134412: EQUAL
134413: IFFALSE 134534
// begin if not HasTask ( group [ i ] ) then
134415: LD_VAR 0 4
134419: PUSH
134420: LD_VAR 0 7
134424: ARRAY
134425: PPUSH
134426: CALL_OW 314
134430: NOT
134431: IFFALSE 134534
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
134433: LD_ADDR_VAR 0 9
134437: PUSH
134438: LD_INT 81
134440: PUSH
134441: LD_VAR 0 4
134445: PUSH
134446: LD_VAR 0 7
134450: ARRAY
134451: PPUSH
134452: CALL_OW 255
134456: PUSH
134457: EMPTY
134458: LIST
134459: LIST
134460: PPUSH
134461: CALL_OW 69
134465: PPUSH
134466: LD_VAR 0 4
134470: PUSH
134471: LD_VAR 0 7
134475: ARRAY
134476: PPUSH
134477: CALL_OW 74
134481: ST_TO_ADDR
// if k then
134482: LD_VAR 0 9
134486: IFFALSE 134534
// if GetDistUnits ( group [ i ] , k ) > 10 then
134488: LD_VAR 0 4
134492: PUSH
134493: LD_VAR 0 7
134497: ARRAY
134498: PPUSH
134499: LD_VAR 0 9
134503: PPUSH
134504: CALL_OW 296
134508: PUSH
134509: LD_INT 10
134511: GREATER
134512: IFFALSE 134534
// ComMoveUnit ( group [ i ] , k ) ;
134514: LD_VAR 0 4
134518: PUSH
134519: LD_VAR 0 7
134523: ARRAY
134524: PPUSH
134525: LD_VAR 0 9
134529: PPUSH
134530: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
134534: LD_VAR 0 4
134538: PUSH
134539: LD_VAR 0 7
134543: ARRAY
134544: PPUSH
134545: CALL_OW 256
134549: PUSH
134550: LD_INT 250
134552: LESS
134553: PUSH
134554: LD_VAR 0 4
134558: PUSH
134559: LD_VAR 0 7
134563: ARRAY
134564: PUSH
134565: LD_INT 21
134567: PUSH
134568: LD_INT 2
134570: PUSH
134571: EMPTY
134572: LIST
134573: LIST
134574: PUSH
134575: LD_INT 23
134577: PUSH
134578: LD_INT 2
134580: PUSH
134581: EMPTY
134582: LIST
134583: LIST
134584: PUSH
134585: EMPTY
134586: LIST
134587: LIST
134588: PPUSH
134589: CALL_OW 69
134593: IN
134594: AND
134595: IFFALSE 134720
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
134597: LD_ADDR_VAR 0 9
134601: PUSH
134602: LD_OWVAR 3
134606: PUSH
134607: LD_VAR 0 4
134611: PUSH
134612: LD_VAR 0 7
134616: ARRAY
134617: DIFF
134618: PPUSH
134619: LD_VAR 0 4
134623: PUSH
134624: LD_VAR 0 7
134628: ARRAY
134629: PPUSH
134630: CALL_OW 74
134634: ST_TO_ADDR
// if not k then
134635: LD_VAR 0 9
134639: NOT
134640: IFFALSE 134644
// continue ;
134642: GO 131059
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
134644: LD_VAR 0 9
134648: PUSH
134649: LD_INT 81
134651: PUSH
134652: LD_VAR 0 4
134656: PUSH
134657: LD_VAR 0 7
134661: ARRAY
134662: PPUSH
134663: CALL_OW 255
134667: PUSH
134668: EMPTY
134669: LIST
134670: LIST
134671: PPUSH
134672: CALL_OW 69
134676: IN
134677: PUSH
134678: LD_VAR 0 9
134682: PPUSH
134683: LD_VAR 0 4
134687: PUSH
134688: LD_VAR 0 7
134692: ARRAY
134693: PPUSH
134694: CALL_OW 296
134698: PUSH
134699: LD_INT 5
134701: LESS
134702: AND
134703: IFFALSE 134720
// ComAutodestruct ( group [ i ] ) ;
134705: LD_VAR 0 4
134709: PUSH
134710: LD_VAR 0 7
134714: ARRAY
134715: PPUSH
134716: CALL 101873 0 1
// end ; if f_attack_depot then
134720: LD_VAR 0 25
134724: IFFALSE 134836
// begin k := 6 ;
134726: LD_ADDR_VAR 0 9
134730: PUSH
134731: LD_INT 6
134733: ST_TO_ADDR
// if tmp < k then
134734: LD_VAR 0 14
134738: PUSH
134739: LD_VAR 0 9
134743: LESS
134744: IFFALSE 134756
// k := tmp ;
134746: LD_ADDR_VAR 0 9
134750: PUSH
134751: LD_VAR 0 14
134755: ST_TO_ADDR
// for j = 1 to k do
134756: LD_ADDR_VAR 0 8
134760: PUSH
134761: DOUBLE
134762: LD_INT 1
134764: DEC
134765: ST_TO_ADDR
134766: LD_VAR 0 9
134770: PUSH
134771: FOR_TO
134772: IFFALSE 134834
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
134774: LD_VAR 0 8
134778: PPUSH
134779: CALL_OW 266
134783: PUSH
134784: LD_INT 0
134786: PUSH
134787: LD_INT 1
134789: PUSH
134790: EMPTY
134791: LIST
134792: LIST
134793: IN
134794: IFFALSE 134832
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
134796: LD_VAR 0 4
134800: PUSH
134801: LD_VAR 0 7
134805: ARRAY
134806: PPUSH
134807: LD_VAR 0 14
134811: PUSH
134812: LD_VAR 0 8
134816: ARRAY
134817: PPUSH
134818: CALL_OW 115
// attacking := true ;
134822: LD_ADDR_VAR 0 29
134826: PUSH
134827: LD_INT 1
134829: ST_TO_ADDR
// break ;
134830: GO 134834
// end ;
134832: GO 134771
134834: POP
134835: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
134836: LD_VAR 0 4
134840: PUSH
134841: LD_VAR 0 7
134845: ARRAY
134846: PPUSH
134847: CALL_OW 302
134851: PUSH
134852: LD_VAR 0 29
134856: NOT
134857: AND
134858: IFFALSE 135180
// begin if GetTag ( group [ i ] ) = 71 then
134860: LD_VAR 0 4
134864: PUSH
134865: LD_VAR 0 7
134869: ARRAY
134870: PPUSH
134871: CALL_OW 110
134875: PUSH
134876: LD_INT 71
134878: EQUAL
134879: IFFALSE 134920
// begin if HasTask ( group [ i ] ) then
134881: LD_VAR 0 4
134885: PUSH
134886: LD_VAR 0 7
134890: ARRAY
134891: PPUSH
134892: CALL_OW 314
134896: IFFALSE 134902
// continue else
134898: GO 131059
134900: GO 134920
// SetTag ( group [ i ] , 0 ) ;
134902: LD_VAR 0 4
134906: PUSH
134907: LD_VAR 0 7
134911: ARRAY
134912: PPUSH
134913: LD_INT 0
134915: PPUSH
134916: CALL_OW 109
// end ; k := 8 ;
134920: LD_ADDR_VAR 0 9
134924: PUSH
134925: LD_INT 8
134927: ST_TO_ADDR
// x := 0 ;
134928: LD_ADDR_VAR 0 10
134932: PUSH
134933: LD_INT 0
134935: ST_TO_ADDR
// if tmp < k then
134936: LD_VAR 0 14
134940: PUSH
134941: LD_VAR 0 9
134945: LESS
134946: IFFALSE 134958
// k := tmp ;
134948: LD_ADDR_VAR 0 9
134952: PUSH
134953: LD_VAR 0 14
134957: ST_TO_ADDR
// for j = 1 to k do
134958: LD_ADDR_VAR 0 8
134962: PUSH
134963: DOUBLE
134964: LD_INT 1
134966: DEC
134967: ST_TO_ADDR
134968: LD_VAR 0 9
134972: PUSH
134973: FOR_TO
134974: IFFALSE 135072
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
134976: LD_VAR 0 14
134980: PUSH
134981: LD_VAR 0 8
134985: ARRAY
134986: PPUSH
134987: CALL_OW 247
134991: PUSH
134992: LD_INT 1
134994: EQUAL
134995: PUSH
134996: LD_VAR 0 14
135000: PUSH
135001: LD_VAR 0 8
135005: ARRAY
135006: PPUSH
135007: CALL_OW 256
135011: PUSH
135012: LD_INT 250
135014: LESS
135015: PUSH
135016: LD_VAR 0 20
135020: AND
135021: PUSH
135022: LD_VAR 0 20
135026: NOT
135027: PUSH
135028: LD_VAR 0 14
135032: PUSH
135033: LD_VAR 0 8
135037: ARRAY
135038: PPUSH
135039: CALL_OW 256
135043: PUSH
135044: LD_INT 250
135046: GREATEREQUAL
135047: AND
135048: OR
135049: AND
135050: IFFALSE 135070
// begin x := tmp [ j ] ;
135052: LD_ADDR_VAR 0 10
135056: PUSH
135057: LD_VAR 0 14
135061: PUSH
135062: LD_VAR 0 8
135066: ARRAY
135067: ST_TO_ADDR
// break ;
135068: GO 135072
// end ;
135070: GO 134973
135072: POP
135073: POP
// if x then
135074: LD_VAR 0 10
135078: IFFALSE 135102
// ComAttackUnit ( group [ i ] , x ) else
135080: LD_VAR 0 4
135084: PUSH
135085: LD_VAR 0 7
135089: ARRAY
135090: PPUSH
135091: LD_VAR 0 10
135095: PPUSH
135096: CALL_OW 115
135100: GO 135126
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
135102: LD_VAR 0 4
135106: PUSH
135107: LD_VAR 0 7
135111: ARRAY
135112: PPUSH
135113: LD_VAR 0 14
135117: PUSH
135118: LD_INT 1
135120: ARRAY
135121: PPUSH
135122: CALL_OW 115
// if not HasTask ( group [ i ] ) then
135126: LD_VAR 0 4
135130: PUSH
135131: LD_VAR 0 7
135135: ARRAY
135136: PPUSH
135137: CALL_OW 314
135141: NOT
135142: IFFALSE 135180
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
135144: LD_VAR 0 4
135148: PUSH
135149: LD_VAR 0 7
135153: ARRAY
135154: PPUSH
135155: LD_VAR 0 14
135159: PPUSH
135160: LD_VAR 0 4
135164: PUSH
135165: LD_VAR 0 7
135169: ARRAY
135170: PPUSH
135171: CALL_OW 74
135175: PPUSH
135176: CALL_OW 115
// end ; end ; end ;
135180: GO 131059
135182: POP
135183: POP
// wait ( 0 0$2 ) ;
135184: LD_INT 70
135186: PPUSH
135187: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
135191: LD_VAR 0 4
135195: NOT
135196: PUSH
135197: LD_VAR 0 4
135201: PUSH
135202: EMPTY
135203: EQUAL
135204: OR
135205: PUSH
135206: LD_INT 81
135208: PUSH
135209: LD_VAR 0 35
135213: PUSH
135214: EMPTY
135215: LIST
135216: LIST
135217: PPUSH
135218: CALL_OW 69
135222: NOT
135223: OR
135224: IFFALSE 131044
// end ;
135226: LD_VAR 0 2
135230: RET
// export function BasicDefend ( base , solds ) ; var enemy , e , side , i , hex ; begin
135231: LD_INT 0
135233: PPUSH
135234: PPUSH
135235: PPUSH
135236: PPUSH
135237: PPUSH
135238: PPUSH
// if not base or not mc_bases [ base ] or not solds then
135239: LD_VAR 0 1
135243: NOT
135244: PUSH
135245: LD_EXP 101
135249: PUSH
135250: LD_VAR 0 1
135254: ARRAY
135255: NOT
135256: OR
135257: PUSH
135258: LD_VAR 0 2
135262: NOT
135263: OR
135264: IFFALSE 135268
// exit ;
135266: GO 135822
// side := mc_sides [ base ] ;
135268: LD_ADDR_VAR 0 6
135272: PUSH
135273: LD_EXP 127
135277: PUSH
135278: LD_VAR 0 1
135282: ARRAY
135283: ST_TO_ADDR
// if not side then
135284: LD_VAR 0 6
135288: NOT
135289: IFFALSE 135293
// exit ;
135291: GO 135822
// for i in solds do
135293: LD_ADDR_VAR 0 7
135297: PUSH
135298: LD_VAR 0 2
135302: PUSH
135303: FOR_IN
135304: IFFALSE 135365
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
135306: LD_VAR 0 7
135310: PPUSH
135311: CALL_OW 310
135315: PPUSH
135316: CALL_OW 266
135320: PUSH
135321: LD_INT 32
135323: PUSH
135324: LD_INT 31
135326: PUSH
135327: EMPTY
135328: LIST
135329: LIST
135330: IN
135331: IFFALSE 135351
// solds := solds diff i else
135333: LD_ADDR_VAR 0 2
135337: PUSH
135338: LD_VAR 0 2
135342: PUSH
135343: LD_VAR 0 7
135347: DIFF
135348: ST_TO_ADDR
135349: GO 135363
// SetTag ( i , 18 ) ;
135351: LD_VAR 0 7
135355: PPUSH
135356: LD_INT 18
135358: PPUSH
135359: CALL_OW 109
135363: GO 135303
135365: POP
135366: POP
// if not solds then
135367: LD_VAR 0 2
135371: NOT
135372: IFFALSE 135376
// exit ;
135374: GO 135822
// repeat wait ( 0 0$2 ) ;
135376: LD_INT 70
135378: PPUSH
135379: CALL_OW 67
// enemy := mc_scan [ base ] ;
135383: LD_ADDR_VAR 0 4
135387: PUSH
135388: LD_EXP 124
135392: PUSH
135393: LD_VAR 0 1
135397: ARRAY
135398: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
135399: LD_EXP 101
135403: PUSH
135404: LD_VAR 0 1
135408: ARRAY
135409: NOT
135410: PUSH
135411: LD_EXP 101
135415: PUSH
135416: LD_VAR 0 1
135420: ARRAY
135421: PUSH
135422: EMPTY
135423: EQUAL
135424: OR
135425: IFFALSE 135462
// begin for i in solds do
135427: LD_ADDR_VAR 0 7
135431: PUSH
135432: LD_VAR 0 2
135436: PUSH
135437: FOR_IN
135438: IFFALSE 135451
// ComStop ( i ) ;
135440: LD_VAR 0 7
135444: PPUSH
135445: CALL_OW 141
135449: GO 135437
135451: POP
135452: POP
// solds := [ ] ;
135453: LD_ADDR_VAR 0 2
135457: PUSH
135458: EMPTY
135459: ST_TO_ADDR
// exit ;
135460: GO 135822
// end ; for i in solds do
135462: LD_ADDR_VAR 0 7
135466: PUSH
135467: LD_VAR 0 2
135471: PUSH
135472: FOR_IN
135473: IFFALSE 135794
// begin if IsInUnit ( i ) then
135475: LD_VAR 0 7
135479: PPUSH
135480: CALL_OW 310
135484: IFFALSE 135495
// ComExitBuilding ( i ) ;
135486: LD_VAR 0 7
135490: PPUSH
135491: CALL_OW 122
// if GetLives ( i ) > 500 then
135495: LD_VAR 0 7
135499: PPUSH
135500: CALL_OW 256
135504: PUSH
135505: LD_INT 500
135507: GREATER
135508: IFFALSE 135561
// begin e := NearestUnitToUnit ( enemy , i ) ;
135510: LD_ADDR_VAR 0 5
135514: PUSH
135515: LD_VAR 0 4
135519: PPUSH
135520: LD_VAR 0 7
135524: PPUSH
135525: CALL_OW 74
135529: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
135530: LD_VAR 0 7
135534: PPUSH
135535: LD_VAR 0 5
135539: PPUSH
135540: CALL_OW 250
135544: PPUSH
135545: LD_VAR 0 5
135549: PPUSH
135550: CALL_OW 251
135554: PPUSH
135555: CALL_OW 114
// end else
135559: GO 135792
// if GetDistUnits ( i , NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ) > 10 then
135561: LD_VAR 0 7
135565: PPUSH
135566: LD_EXP 101
135570: PUSH
135571: LD_VAR 0 1
135575: ARRAY
135576: PPUSH
135577: LD_INT 2
135579: PUSH
135580: LD_INT 30
135582: PUSH
135583: LD_INT 0
135585: PUSH
135586: EMPTY
135587: LIST
135588: LIST
135589: PUSH
135590: LD_INT 30
135592: PUSH
135593: LD_INT 1
135595: PUSH
135596: EMPTY
135597: LIST
135598: LIST
135599: PUSH
135600: LD_INT 30
135602: PUSH
135603: LD_INT 6
135605: PUSH
135606: EMPTY
135607: LIST
135608: LIST
135609: PUSH
135610: EMPTY
135611: LIST
135612: LIST
135613: LIST
135614: LIST
135615: PPUSH
135616: CALL_OW 72
135620: PPUSH
135621: LD_VAR 0 7
135625: PPUSH
135626: CALL_OW 74
135630: PPUSH
135631: CALL_OW 296
135635: PUSH
135636: LD_INT 10
135638: GREATER
135639: IFFALSE 135792
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
135641: LD_ADDR_VAR 0 8
135645: PUSH
135646: LD_EXP 101
135650: PUSH
135651: LD_VAR 0 1
135655: ARRAY
135656: PPUSH
135657: LD_INT 2
135659: PUSH
135660: LD_INT 30
135662: PUSH
135663: LD_INT 0
135665: PUSH
135666: EMPTY
135667: LIST
135668: LIST
135669: PUSH
135670: LD_INT 30
135672: PUSH
135673: LD_INT 1
135675: PUSH
135676: EMPTY
135677: LIST
135678: LIST
135679: PUSH
135680: LD_INT 30
135682: PUSH
135683: LD_INT 6
135685: PUSH
135686: EMPTY
135687: LIST
135688: LIST
135689: PUSH
135690: EMPTY
135691: LIST
135692: LIST
135693: LIST
135694: LIST
135695: PPUSH
135696: CALL_OW 72
135700: PPUSH
135701: LD_VAR 0 7
135705: PPUSH
135706: CALL_OW 74
135710: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
135711: LD_VAR 0 7
135715: PPUSH
135716: LD_VAR 0 8
135720: PPUSH
135721: CALL_OW 250
135725: PPUSH
135726: LD_INT 3
135728: PPUSH
135729: LD_INT 5
135731: PPUSH
135732: CALL_OW 272
135736: PPUSH
135737: LD_VAR 0 8
135741: PPUSH
135742: CALL_OW 251
135746: PPUSH
135747: LD_INT 3
135749: PPUSH
135750: LD_INT 5
135752: PPUSH
135753: CALL_OW 273
135757: PPUSH
135758: CALL_OW 111
// SetTag ( i , 0 ) ;
135762: LD_VAR 0 7
135766: PPUSH
135767: LD_INT 0
135769: PPUSH
135770: CALL_OW 109
// solds := solds diff i ;
135774: LD_ADDR_VAR 0 2
135778: PUSH
135779: LD_VAR 0 2
135783: PUSH
135784: LD_VAR 0 7
135788: DIFF
135789: ST_TO_ADDR
// continue ;
135790: GO 135472
// end ; end ;
135792: GO 135472
135794: POP
135795: POP
// until not solds or not enemy ;
135796: LD_VAR 0 2
135800: NOT
135801: PUSH
135802: LD_VAR 0 4
135806: NOT
135807: OR
135808: IFFALSE 135376
// MC_Reset ( base , 18 ) ;
135810: LD_VAR 0 1
135814: PPUSH
135815: LD_INT 18
135817: PPUSH
135818: CALL 42519 0 2
// end ;
135822: LD_VAR 0 3
135826: RET
// export function Defend ( base , defenders ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend , class , enemy ; begin
135827: LD_INT 0
135829: PPUSH
135830: PPUSH
135831: PPUSH
135832: PPUSH
135833: PPUSH
135834: PPUSH
135835: PPUSH
135836: PPUSH
135837: PPUSH
135838: PPUSH
135839: PPUSH
135840: PPUSH
135841: PPUSH
135842: PPUSH
135843: PPUSH
135844: PPUSH
135845: PPUSH
135846: PPUSH
135847: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
135848: LD_ADDR_VAR 0 12
135852: PUSH
135853: LD_EXP 101
135857: PUSH
135858: LD_VAR 0 1
135862: ARRAY
135863: PPUSH
135864: LD_INT 25
135866: PUSH
135867: LD_INT 3
135869: PUSH
135870: EMPTY
135871: LIST
135872: LIST
135873: PPUSH
135874: CALL_OW 72
135878: ST_TO_ADDR
// if mc_remote_driver [ base ] then
135879: LD_EXP 141
135883: PUSH
135884: LD_VAR 0 1
135888: ARRAY
135889: IFFALSE 135913
// mechs := mechs diff mc_remote_driver [ base ] ;
135891: LD_ADDR_VAR 0 12
135895: PUSH
135896: LD_VAR 0 12
135900: PUSH
135901: LD_EXP 141
135905: PUSH
135906: LD_VAR 0 1
135910: ARRAY
135911: DIFF
135912: ST_TO_ADDR
// for i in mechs do
135913: LD_ADDR_VAR 0 4
135917: PUSH
135918: LD_VAR 0 12
135922: PUSH
135923: FOR_IN
135924: IFFALSE 135959
// if GetTag ( i ) > 0 then
135926: LD_VAR 0 4
135930: PPUSH
135931: CALL_OW 110
135935: PUSH
135936: LD_INT 0
135938: GREATER
135939: IFFALSE 135957
// mechs := mechs diff i ;
135941: LD_ADDR_VAR 0 12
135945: PUSH
135946: LD_VAR 0 12
135950: PUSH
135951: LD_VAR 0 4
135955: DIFF
135956: ST_TO_ADDR
135957: GO 135923
135959: POP
135960: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
135961: LD_ADDR_VAR 0 8
135965: PUSH
135966: LD_EXP 101
135970: PUSH
135971: LD_VAR 0 1
135975: ARRAY
135976: PPUSH
135977: LD_INT 2
135979: PUSH
135980: LD_INT 25
135982: PUSH
135983: LD_INT 1
135985: PUSH
135986: EMPTY
135987: LIST
135988: LIST
135989: PUSH
135990: LD_INT 25
135992: PUSH
135993: LD_INT 5
135995: PUSH
135996: EMPTY
135997: LIST
135998: LIST
135999: PUSH
136000: LD_INT 25
136002: PUSH
136003: LD_INT 8
136005: PUSH
136006: EMPTY
136007: LIST
136008: LIST
136009: PUSH
136010: LD_INT 25
136012: PUSH
136013: LD_INT 9
136015: PUSH
136016: EMPTY
136017: LIST
136018: LIST
136019: PUSH
136020: EMPTY
136021: LIST
136022: LIST
136023: LIST
136024: LIST
136025: LIST
136026: PPUSH
136027: CALL_OW 72
136031: ST_TO_ADDR
// if not defenders and not solds then
136032: LD_VAR 0 2
136036: NOT
136037: PUSH
136038: LD_VAR 0 8
136042: NOT
136043: AND
136044: IFFALSE 136048
// exit ;
136046: GO 137818
// depot_under_attack := false ;
136048: LD_ADDR_VAR 0 16
136052: PUSH
136053: LD_INT 0
136055: ST_TO_ADDR
// sold_defenders := [ ] ;
136056: LD_ADDR_VAR 0 17
136060: PUSH
136061: EMPTY
136062: ST_TO_ADDR
// if mechs then
136063: LD_VAR 0 12
136067: IFFALSE 136220
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
136069: LD_ADDR_VAR 0 4
136073: PUSH
136074: LD_VAR 0 2
136078: PPUSH
136079: LD_INT 21
136081: PUSH
136082: LD_INT 2
136084: PUSH
136085: EMPTY
136086: LIST
136087: LIST
136088: PPUSH
136089: CALL_OW 72
136093: PUSH
136094: FOR_IN
136095: IFFALSE 136218
// begin if GetTag ( i ) <> 20 then
136097: LD_VAR 0 4
136101: PPUSH
136102: CALL_OW 110
136106: PUSH
136107: LD_INT 20
136109: NONEQUAL
136110: IFFALSE 136124
// SetTag ( i , 20 ) ;
136112: LD_VAR 0 4
136116: PPUSH
136117: LD_INT 20
136119: PPUSH
136120: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
136124: LD_VAR 0 4
136128: PPUSH
136129: CALL_OW 263
136133: PUSH
136134: LD_INT 1
136136: EQUAL
136137: PUSH
136138: LD_VAR 0 4
136142: PPUSH
136143: CALL_OW 311
136147: NOT
136148: AND
136149: IFFALSE 136216
// begin un := mechs [ 1 ] ;
136151: LD_ADDR_VAR 0 10
136155: PUSH
136156: LD_VAR 0 12
136160: PUSH
136161: LD_INT 1
136163: ARRAY
136164: ST_TO_ADDR
// ComExit ( un ) ;
136165: LD_VAR 0 10
136169: PPUSH
136170: CALL 106757 0 1
// AddComEnterUnit ( un , i ) ;
136174: LD_VAR 0 10
136178: PPUSH
136179: LD_VAR 0 4
136183: PPUSH
136184: CALL_OW 180
// SetTag ( un , 19 ) ;
136188: LD_VAR 0 10
136192: PPUSH
136193: LD_INT 19
136195: PPUSH
136196: CALL_OW 109
// mechs := mechs diff un ;
136200: LD_ADDR_VAR 0 12
136204: PUSH
136205: LD_VAR 0 12
136209: PUSH
136210: LD_VAR 0 10
136214: DIFF
136215: ST_TO_ADDR
// end ; end ;
136216: GO 136094
136218: POP
136219: POP
// if solds then
136220: LD_VAR 0 8
136224: IFFALSE 136283
// for i in solds do
136226: LD_ADDR_VAR 0 4
136230: PUSH
136231: LD_VAR 0 8
136235: PUSH
136236: FOR_IN
136237: IFFALSE 136281
// if not GetTag ( i ) then
136239: LD_VAR 0 4
136243: PPUSH
136244: CALL_OW 110
136248: NOT
136249: IFFALSE 136279
// begin defenders := defenders union i ;
136251: LD_ADDR_VAR 0 2
136255: PUSH
136256: LD_VAR 0 2
136260: PUSH
136261: LD_VAR 0 4
136265: UNION
136266: ST_TO_ADDR
// SetTag ( i , 18 ) ;
136267: LD_VAR 0 4
136271: PPUSH
136272: LD_INT 18
136274: PPUSH
136275: CALL_OW 109
// end ;
136279: GO 136236
136281: POP
136282: POP
// repeat wait ( 0 0$2 ) ;
136283: LD_INT 70
136285: PPUSH
136286: CALL_OW 67
// enemy := mc_scan [ base ] ;
136290: LD_ADDR_VAR 0 21
136294: PUSH
136295: LD_EXP 124
136299: PUSH
136300: LD_VAR 0 1
136304: ARRAY
136305: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
136306: LD_EXP 101
136310: PUSH
136311: LD_VAR 0 1
136315: ARRAY
136316: NOT
136317: PUSH
136318: LD_EXP 101
136322: PUSH
136323: LD_VAR 0 1
136327: ARRAY
136328: PUSH
136329: EMPTY
136330: EQUAL
136331: OR
136332: IFFALSE 136369
// begin for i in defenders do
136334: LD_ADDR_VAR 0 4
136338: PUSH
136339: LD_VAR 0 2
136343: PUSH
136344: FOR_IN
136345: IFFALSE 136358
// ComStop ( i ) ;
136347: LD_VAR 0 4
136351: PPUSH
136352: CALL_OW 141
136356: GO 136344
136358: POP
136359: POP
// defenders := [ ] ;
136360: LD_ADDR_VAR 0 2
136364: PUSH
136365: EMPTY
136366: ST_TO_ADDR
// exit ;
136367: GO 137818
// end ; for i in defenders do
136369: LD_ADDR_VAR 0 4
136373: PUSH
136374: LD_VAR 0 2
136378: PUSH
136379: FOR_IN
136380: IFFALSE 137278
// begin e := NearestUnitToUnit ( enemy , i ) ;
136382: LD_ADDR_VAR 0 13
136386: PUSH
136387: LD_VAR 0 21
136391: PPUSH
136392: LD_VAR 0 4
136396: PPUSH
136397: CALL_OW 74
136401: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
136402: LD_ADDR_VAR 0 7
136406: PUSH
136407: LD_EXP 101
136411: PUSH
136412: LD_VAR 0 1
136416: ARRAY
136417: PPUSH
136418: LD_INT 2
136420: PUSH
136421: LD_INT 30
136423: PUSH
136424: LD_INT 0
136426: PUSH
136427: EMPTY
136428: LIST
136429: LIST
136430: PUSH
136431: LD_INT 30
136433: PUSH
136434: LD_INT 1
136436: PUSH
136437: EMPTY
136438: LIST
136439: LIST
136440: PUSH
136441: EMPTY
136442: LIST
136443: LIST
136444: LIST
136445: PPUSH
136446: CALL_OW 72
136450: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
136451: LD_ADDR_VAR 0 16
136455: PUSH
136456: LD_VAR 0 7
136460: NOT
136461: PUSH
136462: LD_VAR 0 7
136466: PPUSH
136467: LD_INT 3
136469: PUSH
136470: LD_INT 24
136472: PUSH
136473: LD_INT 600
136475: PUSH
136476: EMPTY
136477: LIST
136478: LIST
136479: PUSH
136480: EMPTY
136481: LIST
136482: LIST
136483: PPUSH
136484: CALL_OW 72
136488: OR
136489: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
136490: LD_VAR 0 4
136494: PPUSH
136495: CALL_OW 247
136499: PUSH
136500: LD_INT 2
136502: DOUBLE
136503: EQUAL
136504: IFTRUE 136508
136506: GO 136904
136508: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
136509: LD_VAR 0 4
136513: PPUSH
136514: CALL_OW 256
136518: PUSH
136519: LD_INT 1000
136521: EQUAL
136522: PUSH
136523: LD_VAR 0 4
136527: PPUSH
136528: LD_VAR 0 13
136532: PPUSH
136533: CALL_OW 296
136537: PUSH
136538: LD_INT 40
136540: LESS
136541: PUSH
136542: LD_VAR 0 13
136546: PPUSH
136547: LD_EXP 126
136551: PUSH
136552: LD_VAR 0 1
136556: ARRAY
136557: PPUSH
136558: CALL_OW 308
136562: OR
136563: AND
136564: IFFALSE 136686
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
136566: LD_VAR 0 4
136570: PPUSH
136571: CALL_OW 262
136575: PUSH
136576: LD_INT 1
136578: EQUAL
136579: PUSH
136580: LD_VAR 0 4
136584: PPUSH
136585: CALL_OW 261
136589: PUSH
136590: LD_INT 30
136592: LESS
136593: AND
136594: PUSH
136595: LD_VAR 0 7
136599: AND
136600: IFFALSE 136670
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
136602: LD_VAR 0 4
136606: PPUSH
136607: LD_VAR 0 7
136611: PPUSH
136612: LD_VAR 0 4
136616: PPUSH
136617: CALL_OW 74
136621: PPUSH
136622: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
136626: LD_VAR 0 4
136630: PPUSH
136631: LD_VAR 0 7
136635: PPUSH
136636: LD_VAR 0 4
136640: PPUSH
136641: CALL_OW 74
136645: PPUSH
136646: CALL_OW 296
136650: PUSH
136651: LD_INT 6
136653: LESS
136654: IFFALSE 136668
// SetFuel ( i , 100 ) ;
136656: LD_VAR 0 4
136660: PPUSH
136661: LD_INT 100
136663: PPUSH
136664: CALL_OW 240
// end else
136668: GO 136684
// ComAttackUnit ( i , e ) ;
136670: LD_VAR 0 4
136674: PPUSH
136675: LD_VAR 0 13
136679: PPUSH
136680: CALL_OW 115
// end else
136684: GO 136787
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
136686: LD_VAR 0 13
136690: PPUSH
136691: LD_EXP 126
136695: PUSH
136696: LD_VAR 0 1
136700: ARRAY
136701: PPUSH
136702: CALL_OW 308
136706: NOT
136707: PUSH
136708: LD_VAR 0 4
136712: PPUSH
136713: LD_VAR 0 13
136717: PPUSH
136718: CALL_OW 296
136722: PUSH
136723: LD_INT 40
136725: GREATEREQUAL
136726: AND
136727: PUSH
136728: LD_VAR 0 4
136732: PPUSH
136733: CALL_OW 256
136737: PUSH
136738: LD_INT 650
136740: LESSEQUAL
136741: OR
136742: PUSH
136743: LD_VAR 0 4
136747: PPUSH
136748: LD_EXP 125
136752: PUSH
136753: LD_VAR 0 1
136757: ARRAY
136758: PPUSH
136759: CALL_OW 308
136763: NOT
136764: AND
136765: IFFALSE 136787
// ComMoveToArea ( i , mc_parking [ base ] ) ;
136767: LD_VAR 0 4
136771: PPUSH
136772: LD_EXP 125
136776: PUSH
136777: LD_VAR 0 1
136781: ARRAY
136782: PPUSH
136783: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
136787: LD_VAR 0 4
136791: PPUSH
136792: CALL_OW 256
136796: PUSH
136797: LD_INT 1000
136799: LESS
136800: PUSH
136801: LD_VAR 0 4
136805: PPUSH
136806: CALL_OW 263
136810: PUSH
136811: LD_INT 1
136813: EQUAL
136814: AND
136815: PUSH
136816: LD_VAR 0 4
136820: PPUSH
136821: CALL_OW 311
136825: AND
136826: PUSH
136827: LD_VAR 0 4
136831: PPUSH
136832: LD_EXP 125
136836: PUSH
136837: LD_VAR 0 1
136841: ARRAY
136842: PPUSH
136843: CALL_OW 308
136847: AND
136848: IFFALSE 136902
// begin mech := IsDrivenBy ( i ) ;
136850: LD_ADDR_VAR 0 9
136854: PUSH
136855: LD_VAR 0 4
136859: PPUSH
136860: CALL_OW 311
136864: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
136865: LD_VAR 0 9
136869: PPUSH
136870: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
136874: LD_VAR 0 9
136878: PPUSH
136879: LD_VAR 0 4
136883: PPUSH
136884: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
136888: LD_VAR 0 9
136892: PPUSH
136893: LD_VAR 0 4
136897: PPUSH
136898: CALL_OW 180
// end ; end ; unit_human :
136902: GO 137249
136904: LD_INT 1
136906: DOUBLE
136907: EQUAL
136908: IFTRUE 136912
136910: GO 137248
136912: POP
// begin b := IsInUnit ( i ) ;
136913: LD_ADDR_VAR 0 18
136917: PUSH
136918: LD_VAR 0 4
136922: PPUSH
136923: CALL_OW 310
136927: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
136928: LD_ADDR_VAR 0 19
136932: PUSH
136933: LD_VAR 0 18
136937: NOT
136938: PUSH
136939: LD_VAR 0 18
136943: PPUSH
136944: CALL_OW 266
136948: PUSH
136949: LD_INT 32
136951: PUSH
136952: LD_INT 31
136954: PUSH
136955: EMPTY
136956: LIST
136957: LIST
136958: IN
136959: OR
136960: ST_TO_ADDR
// if GetBType ( b ) = b_barracks and GetClass ( i ) in [ 1 , 2 , 3 , 4 ] then
136961: LD_VAR 0 18
136965: PPUSH
136966: CALL_OW 266
136970: PUSH
136971: LD_INT 5
136973: EQUAL
136974: PUSH
136975: LD_VAR 0 4
136979: PPUSH
136980: CALL_OW 257
136984: PUSH
136985: LD_INT 1
136987: PUSH
136988: LD_INT 2
136990: PUSH
136991: LD_INT 3
136993: PUSH
136994: LD_INT 4
136996: PUSH
136997: EMPTY
136998: LIST
136999: LIST
137000: LIST
137001: LIST
137002: IN
137003: AND
137004: IFFALSE 137041
// begin class := AllowSpecClass ( i ) ;
137006: LD_ADDR_VAR 0 20
137010: PUSH
137011: LD_VAR 0 4
137015: PPUSH
137016: CALL 70844 0 1
137020: ST_TO_ADDR
// if class then
137021: LD_VAR 0 20
137025: IFFALSE 137041
// ComChangeProfession ( i , class ) ;
137027: LD_VAR 0 4
137031: PPUSH
137032: LD_VAR 0 20
137036: PPUSH
137037: CALL_OW 123
// end ; if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
137041: LD_VAR 0 16
137045: PUSH
137046: LD_VAR 0 2
137050: PPUSH
137051: LD_INT 21
137053: PUSH
137054: LD_INT 2
137056: PUSH
137057: EMPTY
137058: LIST
137059: LIST
137060: PPUSH
137061: CALL_OW 72
137065: PUSH
137066: LD_INT 1
137068: LESSEQUAL
137069: OR
137070: PUSH
137071: LD_VAR 0 19
137075: AND
137076: PUSH
137077: LD_VAR 0 4
137081: PUSH
137082: LD_VAR 0 17
137086: IN
137087: NOT
137088: AND
137089: IFFALSE 137182
// begin if b then
137091: LD_VAR 0 18
137095: IFFALSE 137144
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
137097: LD_VAR 0 18
137101: PPUSH
137102: LD_VAR 0 21
137106: PPUSH
137107: LD_VAR 0 18
137111: PPUSH
137112: CALL_OW 74
137116: PPUSH
137117: CALL_OW 296
137121: PUSH
137122: LD_INT 10
137124: LESS
137125: PUSH
137126: LD_VAR 0 18
137130: PPUSH
137131: CALL_OW 461
137135: PUSH
137136: LD_INT 7
137138: NONEQUAL
137139: AND
137140: IFFALSE 137144
// continue ;
137142: GO 136379
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
137144: LD_ADDR_VAR 0 17
137148: PUSH
137149: LD_VAR 0 17
137153: PPUSH
137154: LD_VAR 0 17
137158: PUSH
137159: LD_INT 1
137161: PLUS
137162: PPUSH
137163: LD_VAR 0 4
137167: PPUSH
137168: CALL_OW 1
137172: ST_TO_ADDR
// ComExitBuilding ( i ) ;
137173: LD_VAR 0 4
137177: PPUSH
137178: CALL_OW 122
// end ; if sold_defenders then
137182: LD_VAR 0 17
137186: IFFALSE 137246
// if i in sold_defenders then
137188: LD_VAR 0 4
137192: PUSH
137193: LD_VAR 0 17
137197: IN
137198: IFFALSE 137246
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
137200: LD_VAR 0 4
137204: PPUSH
137205: CALL_OW 314
137209: NOT
137210: PUSH
137211: LD_VAR 0 4
137215: PPUSH
137216: LD_VAR 0 13
137220: PPUSH
137221: CALL_OW 296
137225: PUSH
137226: LD_INT 30
137228: LESS
137229: AND
137230: IFFALSE 137246
// ComAttackUnit ( i , e ) ;
137232: LD_VAR 0 4
137236: PPUSH
137237: LD_VAR 0 13
137241: PPUSH
137242: CALL_OW 115
// end ; end ; end ;
137246: GO 137249
137248: POP
// if IsDead ( i ) then
137249: LD_VAR 0 4
137253: PPUSH
137254: CALL_OW 301
137258: IFFALSE 137276
// defenders := defenders diff i ;
137260: LD_ADDR_VAR 0 2
137264: PUSH
137265: LD_VAR 0 2
137269: PUSH
137270: LD_VAR 0 4
137274: DIFF
137275: ST_TO_ADDR
// end ;
137276: GO 136379
137278: POP
137279: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
137280: LD_VAR 0 21
137284: NOT
137285: PUSH
137286: LD_VAR 0 2
137290: NOT
137291: OR
137292: PUSH
137293: LD_EXP 101
137297: PUSH
137298: LD_VAR 0 1
137302: ARRAY
137303: NOT
137304: OR
137305: IFFALSE 136283
// MC_Reset ( base , 18 ) ;
137307: LD_VAR 0 1
137311: PPUSH
137312: LD_INT 18
137314: PPUSH
137315: CALL 42519 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
137319: LD_ADDR_VAR 0 2
137323: PUSH
137324: LD_VAR 0 2
137328: PUSH
137329: LD_VAR 0 2
137333: PPUSH
137334: LD_INT 2
137336: PUSH
137337: LD_INT 25
137339: PUSH
137340: LD_INT 1
137342: PUSH
137343: EMPTY
137344: LIST
137345: LIST
137346: PUSH
137347: LD_INT 25
137349: PUSH
137350: LD_INT 5
137352: PUSH
137353: EMPTY
137354: LIST
137355: LIST
137356: PUSH
137357: LD_INT 25
137359: PUSH
137360: LD_INT 8
137362: PUSH
137363: EMPTY
137364: LIST
137365: LIST
137366: PUSH
137367: LD_INT 25
137369: PUSH
137370: LD_INT 9
137372: PUSH
137373: EMPTY
137374: LIST
137375: LIST
137376: PUSH
137377: EMPTY
137378: LIST
137379: LIST
137380: LIST
137381: LIST
137382: LIST
137383: PPUSH
137384: CALL_OW 72
137388: DIFF
137389: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
137390: LD_VAR 0 21
137394: NOT
137395: PUSH
137396: LD_VAR 0 2
137400: PPUSH
137401: LD_INT 21
137403: PUSH
137404: LD_INT 2
137406: PUSH
137407: EMPTY
137408: LIST
137409: LIST
137410: PPUSH
137411: CALL_OW 72
137415: AND
137416: IFFALSE 137754
// begin tmp := FilterByTag ( defenders , 19 ) ;
137418: LD_ADDR_VAR 0 11
137422: PUSH
137423: LD_VAR 0 2
137427: PPUSH
137428: LD_INT 19
137430: PPUSH
137431: CALL 103941 0 2
137435: ST_TO_ADDR
// if tmp then
137436: LD_VAR 0 11
137440: IFFALSE 137510
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
137442: LD_ADDR_VAR 0 11
137446: PUSH
137447: LD_VAR 0 11
137451: PPUSH
137452: LD_INT 25
137454: PUSH
137455: LD_INT 3
137457: PUSH
137458: EMPTY
137459: LIST
137460: LIST
137461: PPUSH
137462: CALL_OW 72
137466: ST_TO_ADDR
// if tmp then
137467: LD_VAR 0 11
137471: IFFALSE 137510
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
137473: LD_ADDR_EXP 113
137477: PUSH
137478: LD_EXP 113
137482: PPUSH
137483: LD_VAR 0 1
137487: PPUSH
137488: LD_EXP 113
137492: PUSH
137493: LD_VAR 0 1
137497: ARRAY
137498: PUSH
137499: LD_VAR 0 11
137503: UNION
137504: PPUSH
137505: CALL_OW 1
137509: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
137510: LD_VAR 0 1
137514: PPUSH
137515: LD_INT 19
137517: PPUSH
137518: CALL 42519 0 2
// repeat wait ( 0 0$1 ) ;
137522: LD_INT 35
137524: PPUSH
137525: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
137529: LD_EXP 101
137533: PUSH
137534: LD_VAR 0 1
137538: ARRAY
137539: NOT
137540: PUSH
137541: LD_EXP 101
137545: PUSH
137546: LD_VAR 0 1
137550: ARRAY
137551: PUSH
137552: EMPTY
137553: EQUAL
137554: OR
137555: IFFALSE 137592
// begin for i in defenders do
137557: LD_ADDR_VAR 0 4
137561: PUSH
137562: LD_VAR 0 2
137566: PUSH
137567: FOR_IN
137568: IFFALSE 137581
// ComStop ( i ) ;
137570: LD_VAR 0 4
137574: PPUSH
137575: CALL_OW 141
137579: GO 137567
137581: POP
137582: POP
// defenders := [ ] ;
137583: LD_ADDR_VAR 0 2
137587: PUSH
137588: EMPTY
137589: ST_TO_ADDR
// exit ;
137590: GO 137818
// end ; for i in defenders do
137592: LD_ADDR_VAR 0 4
137596: PUSH
137597: LD_VAR 0 2
137601: PUSH
137602: FOR_IN
137603: IFFALSE 137692
// begin if not IsInArea ( i , mc_parking [ base ] ) then
137605: LD_VAR 0 4
137609: PPUSH
137610: LD_EXP 125
137614: PUSH
137615: LD_VAR 0 1
137619: ARRAY
137620: PPUSH
137621: CALL_OW 308
137625: NOT
137626: IFFALSE 137650
// ComMoveToArea ( i , mc_parking [ base ] ) else
137628: LD_VAR 0 4
137632: PPUSH
137633: LD_EXP 125
137637: PUSH
137638: LD_VAR 0 1
137642: ARRAY
137643: PPUSH
137644: CALL_OW 113
137648: GO 137690
// if GetControl ( i ) = control_manual then
137650: LD_VAR 0 4
137654: PPUSH
137655: CALL_OW 263
137659: PUSH
137660: LD_INT 1
137662: EQUAL
137663: IFFALSE 137690
// if IsDrivenBy ( i ) then
137665: LD_VAR 0 4
137669: PPUSH
137670: CALL_OW 311
137674: IFFALSE 137690
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
137676: LD_VAR 0 4
137680: PPUSH
137681: CALL_OW 311
137685: PPUSH
137686: CALL_OW 121
// end ;
137690: GO 137602
137692: POP
137693: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
137694: LD_VAR 0 2
137698: PPUSH
137699: LD_INT 95
137701: PUSH
137702: LD_EXP 125
137706: PUSH
137707: LD_VAR 0 1
137711: ARRAY
137712: PUSH
137713: EMPTY
137714: LIST
137715: LIST
137716: PPUSH
137717: CALL_OW 72
137721: PUSH
137722: LD_VAR 0 2
137726: EQUAL
137727: PUSH
137728: LD_EXP 124
137732: PUSH
137733: LD_VAR 0 1
137737: ARRAY
137738: OR
137739: PUSH
137740: LD_EXP 101
137744: PUSH
137745: LD_VAR 0 1
137749: ARRAY
137750: NOT
137751: OR
137752: IFFALSE 137522
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
137754: LD_ADDR_EXP 123
137758: PUSH
137759: LD_EXP 123
137763: PPUSH
137764: LD_VAR 0 1
137768: PPUSH
137769: LD_VAR 0 2
137773: PPUSH
137774: LD_INT 21
137776: PUSH
137777: LD_INT 2
137779: PUSH
137780: EMPTY
137781: LIST
137782: LIST
137783: PPUSH
137784: CALL_OW 72
137788: PPUSH
137789: CALL_OW 1
137793: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
137794: LD_VAR 0 1
137798: PPUSH
137799: LD_INT 19
137801: PPUSH
137802: CALL 42519 0 2
// MC_Reset ( base , 20 ) ;
137806: LD_VAR 0 1
137810: PPUSH
137811: LD_INT 20
137813: PPUSH
137814: CALL 42519 0 2
// end ; end_of_file
137818: LD_VAR 0 3
137822: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
137823: LD_VAR 0 1
137827: PUSH
137828: LD_INT 200
137830: DOUBLE
137831: GREATEREQUAL
137832: IFFALSE 137840
137834: LD_INT 299
137836: DOUBLE
137837: LESSEQUAL
137838: IFTRUE 137842
137840: GO 137874
137842: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
137843: LD_VAR 0 1
137847: PPUSH
137848: LD_VAR 0 2
137852: PPUSH
137853: LD_VAR 0 3
137857: PPUSH
137858: LD_VAR 0 4
137862: PPUSH
137863: LD_VAR 0 5
137867: PPUSH
137868: CALL 126609 0 5
137872: GO 137951
137874: LD_INT 300
137876: DOUBLE
137877: GREATEREQUAL
137878: IFFALSE 137886
137880: LD_INT 399
137882: DOUBLE
137883: LESSEQUAL
137884: IFTRUE 137888
137886: GO 137950
137888: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
137889: LD_VAR 0 1
137893: PPUSH
137894: LD_VAR 0 2
137898: PPUSH
137899: LD_VAR 0 3
137903: PPUSH
137904: LD_VAR 0 4
137908: PPUSH
137909: LD_VAR 0 5
137913: PPUSH
137914: LD_VAR 0 6
137918: PPUSH
137919: LD_VAR 0 7
137923: PPUSH
137924: LD_VAR 0 8
137928: PPUSH
137929: LD_VAR 0 9
137933: PPUSH
137934: LD_VAR 0 10
137938: PPUSH
137939: LD_VAR 0 11
137943: PPUSH
137944: CALL 122934 0 11
137948: GO 137951
137950: POP
// end ;
137951: PPOPN 11
137953: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
137954: LD_VAR 0 1
137958: PPUSH
137959: LD_VAR 0 2
137963: PPUSH
137964: LD_VAR 0 3
137968: PPUSH
137969: LD_VAR 0 4
137973: PPUSH
137974: LD_VAR 0 5
137978: PPUSH
137979: CALL 126345 0 5
// end ; end_of_file
137983: PPOPN 5
137985: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
137986: LD_VAR 0 1
137990: PPUSH
137991: LD_VAR 0 2
137995: PPUSH
137996: LD_VAR 0 3
138000: PPUSH
138001: LD_VAR 0 4
138005: PPUSH
138006: LD_VAR 0 5
138010: PPUSH
138011: LD_VAR 0 6
138015: PPUSH
138016: CALL 110586 0 6
// end ;
138020: PPOPN 6
138022: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
138023: LD_INT 0
138025: PPUSH
// begin if not units then
138026: LD_VAR 0 1
138030: NOT
138031: IFFALSE 138035
// exit ;
138033: GO 138035
// end ;
138035: PPOPN 7
138037: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
138038: CALL 110490 0 0
// end ;
138042: PPOPN 1
138044: END
