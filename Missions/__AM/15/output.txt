// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 65 0 0
// InitMacro ;
  15: CALL 38350 0 0
// InitNature ;
  19: CALL 38218 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// PrepareAlliance ;
  36: CALL 12360 0 0
// PrepareRussian ;
  40: CALL 7323 0 0
// PrepareLegion ;
  44: CALL 4478 0 0
// PreparePowell ;
  48: CALL 3056 0 0
// PrepareAmerican ;
  52: CALL 1816 0 0
// Action ;
  56: CALL 17080 0 0
// MC_Start ( ) ;
  60: CALL 40530 0 0
// end ;
  64: END
// export debug ; export KappaStatus , KurtStatus , JMMVeh , JMMGirlVeh , JMMGirlStatus , JMMGirl , KhatamStatus , BurlakStatus , StevensStatus , FastEnd , FakeInfo ; export missionStart , missionTime , missionStage , activeAttacks , powellAnger , powellSquadAttack , powellAllowRetreat , powellCenterCameraMode , russianDestroyed , legionDestroyed , allianceDestroyed , vsevolodFirstAttack , allowBehemothConstruct , behemothUnderConstruct , behemothDestroyedBeforeFinish , behemothDone , seeBehemoth , platonovHasBomb , allianceActive , lostCounter , rothCaptured , capturedUnit , trueAmericans , powellAngerQuery , bombExploded , legionEscapeUnits , amConstructCounter ; export function InitVariables ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// missionStart := false ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// missionTime := 0 0$00 ;
  84: LD_ADDR_EXP 14
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// missionStage := 1 ;
  92: LD_ADDR_EXP 15
  96: PUSH
  97: LD_INT 1
  99: ST_TO_ADDR
// activeAttacks := false ;
 100: LD_ADDR_EXP 16
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// powellAnger := 0 ;
 108: LD_ADDR_EXP 17
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// powellAngerQuery := false ;
 116: LD_ADDR_EXP 36
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// powellAllowRetreat := true ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 1
 131: ST_TO_ADDR
// powellCenterCameraMode := false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// powellSquadAttack := [ [ ] , [ ] ] ;
 140: LD_ADDR_EXP 18
 144: PUSH
 145: EMPTY
 146: PUSH
 147: EMPTY
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: ST_TO_ADDR
// russianDestroyed := false ;
 153: LD_ADDR_EXP 21
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// legionDestroyed := false ;
 161: LD_ADDR_EXP 22
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// allianceDestroyed := false ;
 169: LD_ADDR_EXP 23
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// KappaStatus := LoadVariable ( 14_KappaStatus_1 , 0 ) ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 14_KappaStatus_1
 184: PPUSH
 185: LD_INT 0
 187: PPUSH
 188: CALL_OW 30
 192: ST_TO_ADDR
// KurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 193: LD_ADDR_EXP 3
 197: PUSH
 198: LD_STRING 06_KurtStatus_1
 200: PPUSH
 201: LD_INT 0
 203: PPUSH
 204: CALL_OW 30
 208: ST_TO_ADDR
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , 0 ) ;
 209: LD_ADDR_EXP 4
 213: PUSH
 214: LD_STRING 14_JMMVeh_1
 216: PPUSH
 217: LD_INT 0
 219: PPUSH
 220: CALL_OW 30
 224: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , 0 ) ;
 225: LD_ADDR_EXP 5
 229: PUSH
 230: LD_STRING 14_JMMGirlVeh_1
 232: PPUSH
 233: LD_INT 0
 235: PPUSH
 236: CALL_OW 30
 240: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
 241: LD_ADDR_EXP 7
 245: PUSH
 246: LD_STRING 14_JMMGirl_1
 248: PPUSH
 249: LD_INT 0
 251: PPUSH
 252: CALL_OW 30
 256: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
 257: LD_ADDR_EXP 6
 261: PUSH
 262: LD_STRING 14_JMMGirlStatus_1
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: CALL_OW 30
 272: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
 273: LD_ADDR_EXP 8
 277: PUSH
 278: LD_STRING 10_KhatamStatus_1
 280: PPUSH
 281: LD_INT 0
 283: PPUSH
 284: CALL_OW 30
 288: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 289: LD_ADDR_EXP 9
 293: PUSH
 294: LD_STRING 13_BurlakStatus_1
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 305: LD_ADDR_EXP 10
 309: PUSH
 310: LD_STRING 13_StevensStatus_1
 312: PPUSH
 313: LD_INT 0
 315: PPUSH
 316: CALL_OW 30
 320: ST_TO_ADDR
// FastEnd := LoadVariable ( 14_FastEnd_1 , 0 ) ;
 321: LD_ADDR_EXP 11
 325: PUSH
 326: LD_STRING 14_FastEnd_1
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL_OW 30
 336: ST_TO_ADDR
// FakeInfo := LoadVariable ( 12_MainDepositFake_1 , 0 ) ;
 337: LD_ADDR_EXP 12
 341: PUSH
 342: LD_STRING 12_MainDepositFake_1
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 30
 352: ST_TO_ADDR
// vsevolodFirstAttack := true ;
 353: LD_ADDR_EXP 24
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// behemothUnderConstruct := false ;
 361: LD_ADDR_EXP 26
 365: PUSH
 366: LD_INT 0
 368: ST_TO_ADDR
// behemothDestroyedBeforeFinish := false ;
 369: LD_ADDR_EXP 27
 373: PUSH
 374: LD_INT 0
 376: ST_TO_ADDR
// behemothDone := false ;
 377: LD_ADDR_EXP 28
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// allowBehemothConstruct := false ;
 385: LD_ADDR_EXP 25
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// seeBehemoth := false ;
 393: LD_ADDR_EXP 29
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// platonovHasBomb := false ;
 401: LD_ADDR_EXP 30
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// allianceActive := false ;
 409: LD_ADDR_EXP 31
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// rothCaptured := false ;
 417: LD_ADDR_EXP 33
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// lostCounter := 0 ;
 425: LD_ADDR_EXP 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// capturedUnit := [ ] ;
 433: LD_ADDR_EXP 34
 437: PUSH
 438: EMPTY
 439: ST_TO_ADDR
// trueAmericans := [ ] ;
 440: LD_ADDR_EXP 35
 444: PUSH
 445: EMPTY
 446: ST_TO_ADDR
// bombExploded := false ;
 447: LD_ADDR_EXP 37
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// legionEscapeUnits := [ ] ;
 455: LD_ADDR_EXP 38
 459: PUSH
 460: EMPTY
 461: ST_TO_ADDR
// amConstructCounter := 0 ;
 462: LD_ADDR_EXP 39
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export function CustomInitMacro ( ) ; begin
 475: LD_INT 0
 477: PPUSH
// mc_parking := [ allianceParkingArea , russianParkingArea , legionParkingArea , powellParking ] ;
 478: LD_ADDR_EXP 125
 482: PUSH
 483: LD_INT 2
 485: PUSH
 486: LD_INT 3
 488: PUSH
 489: LD_INT 6
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: ST_TO_ADDR
// mc_scan_area := [ allianceBaseArea , russianBaseArea , legionBaseArea , powellBase ] ;
 501: LD_ADDR_EXP 126
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: LD_INT 4
 511: PUSH
 512: LD_INT 5
 514: PUSH
 515: LD_INT 9
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: ST_TO_ADDR
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto ] ) ;
 524: LD_INT 1
 526: PPUSH
 527: LD_INT 10
 529: PUSH
 530: LD_INT 11
 532: PUSH
 533: LD_INT 12
 535: PUSH
 536: LD_INT 15
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: PPUSH
 545: CALL 63326 0 2
// MC_SetCratesArea ( 1 , [ allianceCratesArea ] ) ;
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 17
 554: PUSH
 555: EMPTY
 556: LIST
 557: PPUSH
 558: CALL 63419 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
 562: LD_INT 1
 564: PPUSH
 565: LD_INT 5
 567: PPUSH
 568: CALL 62769 0 2
// MC_SetProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 572: LD_INT 1
 574: PPUSH
 575: LD_INT 24
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 3
 583: PUSH
 584: LD_INT 47
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 24
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 3
 601: PUSH
 602: LD_INT 47
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 24
 613: PUSH
 614: LD_INT 3
 616: PUSH
 617: LD_INT 3
 619: PUSH
 620: LD_INT 47
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 24
 631: PUSH
 632: LD_INT 3
 634: PUSH
 635: LD_INT 3
 637: PUSH
 638: LD_INT 47
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: PUSH
 647: LD_INT 24
 649: PUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 47
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: PPUSH
 672: CALL 62584 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_spacetime ] ) ;
 676: LD_INT 2
 678: PPUSH
 679: LD_INT 10
 681: PUSH
 682: LD_INT 11
 684: PUSH
 685: LD_INT 12
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL 63326 0 2
// MC_SetCratesArea ( 2 , [ russianCratesArea ] ) ;
 701: LD_INT 2
 703: PPUSH
 704: LD_INT 16
 706: PUSH
 707: EMPTY
 708: LIST
 709: PPUSH
 710: CALL 63419 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_crane ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
 714: LD_INT 2
 716: PPUSH
 717: LD_INT 21
 719: PUSH
 720: LD_INT 3
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 51
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 52
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: LD_INT 3
 761: PUSH
 762: LD_INT 52
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 24
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: LD_INT 3
 779: PUSH
 780: LD_INT 47
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 3
 794: PUSH
 795: LD_INT 3
 797: PUSH
 798: LD_INT 47
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 24
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: LD_INT 47
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 24
 827: PUSH
 828: LD_INT 3
 830: PUSH
 831: LD_INT 3
 833: PUSH
 834: LD_INT 47
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 24
 845: PUSH
 846: LD_INT 3
 848: PUSH
 849: LD_INT 3
 851: PUSH
 852: LD_INT 47
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PPUSH
 871: CALL 62584 0 2
// MC_SetDefenderLimit ( 2 , 5 ) ;
 875: LD_INT 2
 877: PPUSH
 878: LD_INT 5
 880: PPUSH
 881: CALL 62769 0 2
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
 885: LD_INT 2
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL 63199 0 2
// MC_SetMinesField ( 3 , [ 10 , 12 , 14 , 15 ] [ Difficulty ] , legionMinefield ) ;
 895: LD_INT 3
 897: PPUSH
 898: LD_INT 10
 900: PUSH
 901: LD_INT 12
 903: PUSH
 904: LD_INT 14
 906: PUSH
 907: LD_INT 15
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_OWVAR 67
 920: ARRAY
 921: PPUSH
 922: LD_INT 27
 924: PPUSH
 925: CALL 62247 0 3
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_siberium , b_lab_biological , b_lab_opto ] ) ;
 929: LD_INT 3
 931: PPUSH
 932: LD_INT 10
 934: PUSH
 935: LD_INT 11
 937: PUSH
 938: LD_INT 13
 940: PUSH
 941: LD_INT 15
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL 63326 0 2
// MC_SetCratesArea ( 3 , [ legionCratesArea ] ) ;
 954: LD_INT 3
 956: PPUSH
 957: LD_INT 15
 959: PUSH
 960: EMPTY
 961: LIST
 962: PPUSH
 963: CALL 63419 0 2
// mc_ape := Replace ( mc_ape , 3 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , class_apeman_soldier ] ] ) ) ;
 967: LD_ADDR_EXP 130
 971: PUSH
 972: LD_EXP 130
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: LD_INT 22
 982: PUSH
 983: LD_INT 8
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: LD_INT 25
 992: PUSH
 993: LD_INT 15
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PPUSH
1004: CALL_OW 69
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// MC_SetProduceList ( 3 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_siberite , control_remote , ar_cargo_bay ] , [ ar_half_tracked , engine_combustion , control_remote , ar_crane ] ] ) ;
1014: LD_INT 3
1016: PPUSH
1017: LD_INT 13
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: LD_INT 31
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 13
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: LD_INT 31
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 13
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: LD_INT 2
1061: PUSH
1062: LD_INT 32
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 14
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: LD_INT 88
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL 62584 0 2
// MC_SetLabKind ( 4 , [ b_lab_weapon , b_lab_computer ] ) ;
1099: LD_INT 4
1101: PPUSH
1102: LD_INT 10
1104: PUSH
1105: LD_INT 12
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PPUSH
1112: CALL 63326 0 2
// MC_SetCratesArea ( 4 , [ powellBase ] ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 9
1121: PUSH
1122: EMPTY
1123: LIST
1124: PPUSH
1125: CALL 63419 0 2
// MC_SetBuildingList ( 4 , [ [ b_oil_power , 74 , 107 , 0 ] , [ b_bunker , 77 , 101 , 4 ] , [ b_bunker , 69 , 86 , 4 ] , [ b_solar_power , 77 , 110 , 3 ] , [ b_solar_power , 42 , 79 , 5 ] , [ b_oil_mine , 86 , 105 , 2 ] , [ b_siberite_mine , 40 , 75 , 1 ] , [ b_bunker , 80 , 106 , 4 ] , [ b_bunker , 75 , 114 , 5 ] , [ b_armoury , 39 , 61 , 3 ] ] ) ;
1129: LD_INT 4
1131: PPUSH
1132: LD_INT 26
1134: PUSH
1135: LD_INT 74
1137: PUSH
1138: LD_INT 107
1140: PUSH
1141: LD_INT 0
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_INT 32
1152: PUSH
1153: LD_INT 77
1155: PUSH
1156: LD_INT 101
1158: PUSH
1159: LD_INT 4
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 32
1170: PUSH
1171: LD_INT 69
1173: PUSH
1174: LD_INT 86
1176: PUSH
1177: LD_INT 4
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 27
1188: PUSH
1189: LD_INT 77
1191: PUSH
1192: LD_INT 110
1194: PUSH
1195: LD_INT 3
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 27
1206: PUSH
1207: LD_INT 42
1209: PUSH
1210: LD_INT 79
1212: PUSH
1213: LD_INT 5
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_INT 29
1224: PUSH
1225: LD_INT 86
1227: PUSH
1228: LD_INT 105
1230: PUSH
1231: LD_INT 2
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 30
1242: PUSH
1243: LD_INT 40
1245: PUSH
1246: LD_INT 75
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 32
1260: PUSH
1261: LD_INT 80
1263: PUSH
1264: LD_INT 106
1266: PUSH
1267: LD_INT 4
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 32
1278: PUSH
1279: LD_INT 75
1281: PUSH
1282: LD_INT 114
1284: PUSH
1285: LD_INT 5
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 4
1296: PUSH
1297: LD_INT 39
1299: PUSH
1300: LD_INT 61
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL 62476 0 2
// MC_SetAllowedTurretWeapons ( 4 , [ us_double_gun , us_heavy_gun , us_rocket_launcher ] ) ;
1328: LD_INT 4
1330: PPUSH
1331: LD_INT 5
1333: PUSH
1334: LD_INT 6
1336: PUSH
1337: LD_INT 7
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL 63737 0 2
// MC_SetDepositsXY ( 4 , [ [ 40 , 75 , 1 ] , [ 86 , 105 , 0 ] ] ) ;
1349: LD_INT 4
1351: PPUSH
1352: LD_INT 40
1354: PUSH
1355: LD_INT 75
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 86
1368: PUSH
1369: LD_INT 105
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: LIST
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PPUSH
1384: CALL 62908 0 2
// MC_SetUpgradeBuilding ( 4 , b_workshop ) ;
1388: LD_INT 4
1390: PPUSH
1391: LD_INT 2
1393: PPUSH
1394: CALL 63199 0 2
// MC_SetUpgradeBuilding ( 4 , b_depot ) ;
1398: LD_INT 4
1400: PPUSH
1401: LD_INT 0
1403: PPUSH
1404: CALL 63199 0 2
// MC_SetFactoryExtension ( 4 , 54 , 85 , 2 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket ] ) ;
1408: LD_INT 4
1410: PPUSH
1411: LD_INT 54
1413: PPUSH
1414: LD_INT 85
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: LD_INT 19
1422: PUSH
1423: LD_INT 16
1425: PUSH
1426: LD_INT 17
1428: PUSH
1429: LD_INT 18
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: PPUSH
1438: CALL 63531 0 5
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ) ;
1442: LD_INT 4
1444: PPUSH
1445: LD_INT 3
1447: PUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 5
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 4
1483: PUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: LD_INT 7
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 4
1501: PUSH
1502: LD_INT 1
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: LD_INT 6
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PPUSH
1523: CALL 62584 0 2
// MC_SetTame ( 4 , powellApe ) ;
1527: LD_INT 4
1529: PPUSH
1530: LD_INT 13
1532: PPUSH
1533: CALL 63150 0 2
// end ;
1537: LD_VAR 0 1
1541: RET
// every 0 0$3 trigger powellAngerQuery and powellAnger >= 2 do
1542: LD_EXP 36
1546: PUSH
1547: LD_EXP 17
1551: PUSH
1552: LD_INT 2
1554: GREATEREQUAL
1555: AND
1556: IFFALSE 1568
1558: GO 1560
1560: DISABLE
// SetAchievement ( ACH_POWELL ) ;
1561: LD_STRING ACH_POWELL
1563: PPUSH
1564: CALL_OW 543
1568: END
// every 0 0$3 trigger amConstructCounter >= 30 do
1569: LD_EXP 39
1573: PUSH
1574: LD_INT 30
1576: GREATEREQUAL
1577: IFFALSE 1589
1579: GO 1581
1581: DISABLE
// SetAchievement ( ACH_PROD ) ;
1582: LD_STRING ACH_PROD
1584: PPUSH
1585: CALL_OW 543
1589: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_minskill , 1 , 10 ] , [ f_minskill , 2 , 10 ] , [ f_minskill , 3 , 10 ] , [ f_minskill , 4 , 10 ] ] ] ) >= 10 do
1590: LD_INT 22
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 21
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 2
1612: PUSH
1613: LD_INT 28
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 10
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 28
1629: PUSH
1630: LD_INT 2
1632: PUSH
1633: LD_INT 10
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 28
1643: PUSH
1644: LD_INT 3
1646: PUSH
1647: LD_INT 10
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 28
1657: PUSH
1658: LD_INT 4
1660: PUSH
1661: LD_INT 10
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL_OW 69
1685: PUSH
1686: LD_INT 10
1688: GREATEREQUAL
1689: IFFALSE 1701
1691: GO 1693
1693: DISABLE
// SetAchievement ( ACH_EXP ) ;
1694: LD_STRING ACH_EXP
1696: PPUSH
1697: CALL_OW 543
1701: END
// every 0 0$1 trigger debug do var i , tmp ;
1702: LD_EXP 1
1706: IFFALSE 1813
1708: GO 1710
1710: DISABLE
1711: LD_INT 0
1713: PPUSH
1714: PPUSH
// begin enable ;
1715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_lives , 999 ] ] ] ) ;
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: LD_INT 22
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 3
1733: PUSH
1734: LD_INT 21
1736: PUSH
1737: LD_INT 3
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 3
1750: PUSH
1751: LD_INT 24
1753: PUSH
1754: LD_INT 999
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: ST_TO_ADDR
// if not tmp then
1775: LD_VAR 0 2
1779: NOT
1780: IFFALSE 1784
// exit ;
1782: GO 1813
// for i in tmp do
1784: LD_ADDR_VAR 0 1
1788: PUSH
1789: LD_VAR 0 2
1793: PUSH
1794: FOR_IN
1795: IFFALSE 1811
// SetLives ( i , 1000 ) ;
1797: LD_VAR 0 1
1801: PPUSH
1802: LD_INT 1000
1804: PPUSH
1805: CALL_OW 234
1809: GO 1794
1811: POP
1812: POP
// end ; end_of_file
1813: PPOPN 2
1815: END
// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker , Mike ; export JMMNewVeh , GirlNewVeh ; export function PrepareAmerican ; begin
1816: LD_INT 0
1818: PPUSH
// uc_side := 1 ;
1819: LD_ADDR_OWVAR 20
1823: PUSH
1824: LD_INT 1
1826: ST_TO_ADDR
// uc_nation := 1 ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14_ ) ;
1835: LD_ADDR_EXP 40
1839: PUSH
1840: LD_STRING JMM
1842: PPUSH
1843: LD_EXP 1
1847: NOT
1848: PPUSH
1849: LD_STRING 14_
1851: PPUSH
1852: CALL 69058 0 3
1856: ST_TO_ADDR
// if not JMMVeh or not JMMVeh [ 1 ] [ 1 ] then
1857: LD_EXP 4
1861: NOT
1862: PUSH
1863: LD_EXP 4
1867: PUSH
1868: LD_INT 1
1870: ARRAY
1871: PUSH
1872: LD_INT 1
1874: ARRAY
1875: NOT
1876: OR
1877: IFFALSE 1900
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) else
1879: LD_INT 5
1881: PPUSH
1882: LD_INT 3
1884: PPUSH
1885: LD_INT 1
1887: PPUSH
1888: LD_INT 9
1890: PPUSH
1891: LD_INT 100
1893: PPUSH
1894: CALL 73898 0 5
1898: GO 1959
// PrepareVehicle ( JMMVeh [ 1 ] [ 1 ] , JMMVeh [ 2 ] [ 1 ] , JMMVeh [ 3 ] [ 1 ] , JMMVeh [ 4 ] [ 1 ] , 30 ) ;
1900: LD_EXP 4
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PUSH
1909: LD_INT 1
1911: ARRAY
1912: PPUSH
1913: LD_EXP 4
1917: PUSH
1918: LD_INT 2
1920: ARRAY
1921: PUSH
1922: LD_INT 1
1924: ARRAY
1925: PPUSH
1926: LD_EXP 4
1930: PUSH
1931: LD_INT 3
1933: ARRAY
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_EXP 4
1943: PUSH
1944: LD_INT 4
1946: ARRAY
1947: PUSH
1948: LD_INT 1
1950: ARRAY
1951: PPUSH
1952: LD_INT 30
1954: PPUSH
1955: CALL 73898 0 5
// JMMNewVeh := CreateVehicle ;
1959: LD_ADDR_EXP 58
1963: PUSH
1964: CALL_OW 45
1968: ST_TO_ADDR
// if not JMMNewVeh then
1969: LD_EXP 58
1973: NOT
1974: IFFALSE 2005
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_laser , 100 ) ;
1976: LD_INT 5
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 9
1987: PPUSH
1988: LD_INT 100
1990: PPUSH
1991: CALL 73898 0 5
// JMMNewVeh := CreateVehicle ;
1995: LD_ADDR_EXP 58
1999: PUSH
2000: CALL_OW 45
2004: ST_TO_ADDR
// end ; SetDir ( JMMNewVeh , 4 ) ;
2005: LD_EXP 58
2009: PPUSH
2010: LD_INT 4
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( JMMNewVeh , 79 , 91 , false ) ;
2017: LD_EXP 58
2021: PPUSH
2022: LD_INT 79
2024: PPUSH
2025: LD_INT 91
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMNewVeh ) ;
2035: LD_EXP 40
2039: PPUSH
2040: LD_EXP 58
2044: PPUSH
2045: CALL_OW 52
// if JMMGirlStatus and not KappaStatus then
2049: LD_EXP 6
2053: PUSH
2054: LD_EXP 2
2058: NOT
2059: AND
2060: IFFALSE 2318
// begin if not JMMGirlVeh then
2062: LD_EXP 5
2066: NOT
2067: IFFALSE 2090
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_laser , 100 ) else
2069: LD_INT 3
2071: PPUSH
2072: LD_INT 3
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_INT 9
2080: PPUSH
2081: LD_INT 100
2083: PPUSH
2084: CALL 73898 0 5
2088: GO 2149
// PrepareVehicle ( JMMGirlVeh [ 1 ] [ 1 ] , JMMGirlVeh [ 2 ] [ 1 ] , JMMGirlVeh [ 3 ] [ 1 ] , JMMGirlVeh [ 4 ] [ 1 ] , 30 ) ;
2090: LD_EXP 5
2094: PUSH
2095: LD_INT 1
2097: ARRAY
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_EXP 5
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PUSH
2112: LD_INT 1
2114: ARRAY
2115: PPUSH
2116: LD_EXP 5
2120: PUSH
2121: LD_INT 3
2123: ARRAY
2124: PUSH
2125: LD_INT 1
2127: ARRAY
2128: PPUSH
2129: LD_EXP 5
2133: PUSH
2134: LD_INT 4
2136: ARRAY
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_INT 30
2144: PPUSH
2145: CALL 73898 0 5
// GirlNewVeh := CreateVehicle ;
2149: LD_ADDR_EXP 59
2153: PUSH
2154: CALL_OW 45
2158: ST_TO_ADDR
// SetDir ( GirlNewVeh , 4 ) ;
2159: LD_EXP 59
2163: PPUSH
2164: LD_INT 4
2166: PPUSH
2167: CALL_OW 233
// PlaceUnitXY ( GirlNewVeh , 82 , 96 , false ) ;
2171: LD_EXP 59
2175: PPUSH
2176: LD_INT 82
2178: PPUSH
2179: LD_INT 96
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// if JMMGirl = 1 then
2189: LD_EXP 7
2193: PUSH
2194: LD_INT 1
2196: EQUAL
2197: IFFALSE 2232
// begin Joan := PrepareUnit ( Joan , true , 14_ ) ;
2199: LD_ADDR_EXP 41
2203: PUSH
2204: LD_STRING Joan
2206: PPUSH
2207: LD_INT 1
2209: PPUSH
2210: LD_STRING 14_
2212: PPUSH
2213: CALL 69058 0 3
2217: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , GirlNewVeh ) ;
2218: LD_EXP 41
2222: PPUSH
2223: LD_EXP 59
2227: PPUSH
2228: CALL_OW 52
// end ; if JMMGirl = 2 then
2232: LD_EXP 7
2236: PUSH
2237: LD_INT 2
2239: EQUAL
2240: IFFALSE 2275
// begin Lisa := PrepareUnit ( Lisa , true , 14_ ) ;
2242: LD_ADDR_EXP 43
2246: PUSH
2247: LD_STRING Lisa
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_STRING 14_
2255: PPUSH
2256: CALL 69058 0 3
2260: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , GirlNewVeh ) ;
2261: LD_EXP 43
2265: PPUSH
2266: LD_EXP 59
2270: PPUSH
2271: CALL_OW 52
// end ; if JMMGirl = 3 then
2275: LD_EXP 7
2279: PUSH
2280: LD_INT 3
2282: EQUAL
2283: IFFALSE 2318
// begin Connie := PrepareUnit ( Connie , true , 14_ ) ;
2285: LD_ADDR_EXP 55
2289: PUSH
2290: LD_STRING Connie
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_STRING 14_
2298: PPUSH
2299: CALL 69058 0 3
2303: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , GirlNewVeh ) ;
2304: LD_EXP 55
2308: PPUSH
2309: LD_EXP 59
2313: PPUSH
2314: CALL_OW 52
// end ; end ; end ;
2318: LD_VAR 0 1
2322: RET
// export function PrepareStevensSquad ; var tmp ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
// uc_side := 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// uc_nation := 1 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// tmp := [ ] ;
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: EMPTY
2349: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debug ) , 13f_ ) ;
2350: LD_ADDR_EXP 42
2354: PUSH
2355: LD_STRING Stevens
2357: PPUSH
2358: LD_EXP 1
2362: NOT
2363: PPUSH
2364: LD_STRING 13f_
2366: PPUSH
2367: CALL 69058 0 3
2371: ST_TO_ADDR
// if not Stevens then
2372: LD_EXP 42
2376: NOT
2377: IFFALSE 2445
// begin hc_name = Baker Smith ;
2379: LD_ADDR_OWVAR 26
2383: PUSH
2384: LD_STRING Baker Smith
2386: ST_TO_ADDR
// hc_gallery = us ;
2387: LD_ADDR_OWVAR 33
2391: PUSH
2392: LD_STRING us
2394: ST_TO_ADDR
// hc_face_number := 29 ;
2395: LD_ADDR_OWVAR 34
2399: PUSH
2400: LD_INT 29
2402: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 10
2408: PPUSH
2409: CALL_OW 384
// Baker = CreateHuman ;
2413: LD_ADDR_EXP 56
2417: PUSH
2418: CALL_OW 44
2422: ST_TO_ADDR
// tmp := tmp ^ Baker ;
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_EXP 56
2437: ADD
2438: ST_TO_ADDR
// InitHc ;
2439: CALL_OW 19
// end else
2443: GO 2461
// tmp := tmp ^ Stevens ;
2445: LD_ADDR_VAR 0 2
2449: PUSH
2450: LD_VAR 0 2
2454: PUSH
2455: LD_EXP 42
2459: ADD
2460: ST_TO_ADDR
// if not Lisa then
2461: LD_EXP 43
2465: NOT
2466: IFFALSE 2512
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , 13f_ ) ;
2468: LD_ADDR_EXP 43
2472: PUSH
2473: LD_STRING Lisa
2475: PPUSH
2476: LD_EXP 1
2480: NOT
2481: PPUSH
2482: LD_STRING 13f_
2484: PPUSH
2485: CALL 69058 0 3
2489: ST_TO_ADDR
// if Lisa then
2490: LD_EXP 43
2494: IFFALSE 2512
// tmp := tmp ^ Lisa ;
2496: LD_ADDR_VAR 0 2
2500: PUSH
2501: LD_VAR 0 2
2505: PUSH
2506: LD_EXP 43
2510: ADD
2511: ST_TO_ADDR
// end ; if not Donaldson then
2512: LD_EXP 44
2516: NOT
2517: IFFALSE 2563
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13f_ ) ;
2519: LD_ADDR_EXP 44
2523: PUSH
2524: LD_STRING Donaldson
2526: PPUSH
2527: LD_EXP 1
2531: NOT
2532: PPUSH
2533: LD_STRING 13f_
2535: PPUSH
2536: CALL 69058 0 3
2540: ST_TO_ADDR
// if Donaldson then
2541: LD_EXP 44
2545: IFFALSE 2563
// tmp := tmp ^ Donaldson ;
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_VAR 0 2
2556: PUSH
2557: LD_EXP 44
2561: ADD
2562: ST_TO_ADDR
// end ; if not Bobby then
2563: LD_EXP 45
2567: NOT
2568: IFFALSE 2614
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 13f_ ) ;
2570: LD_ADDR_EXP 45
2574: PUSH
2575: LD_STRING Bobby
2577: PPUSH
2578: LD_EXP 1
2582: NOT
2583: PPUSH
2584: LD_STRING 13f_
2586: PPUSH
2587: CALL 69058 0 3
2591: ST_TO_ADDR
// if Bobby then
2592: LD_EXP 45
2596: IFFALSE 2614
// tmp := tmp ^ Bobby ;
2598: LD_ADDR_VAR 0 2
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: LD_EXP 45
2612: ADD
2613: ST_TO_ADDR
// end ; if not Cyrus then
2614: LD_EXP 46
2618: NOT
2619: IFFALSE 2665
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13f_ ) ;
2621: LD_ADDR_EXP 46
2625: PUSH
2626: LD_STRING Cyrus
2628: PPUSH
2629: LD_EXP 1
2633: NOT
2634: PPUSH
2635: LD_STRING 13f_
2637: PPUSH
2638: CALL 69058 0 3
2642: ST_TO_ADDR
// if Cyrus then
2643: LD_EXP 46
2647: IFFALSE 2665
// tmp := tmp ^ Cyrus ;
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_VAR 0 2
2658: PUSH
2659: LD_EXP 46
2663: ADD
2664: ST_TO_ADDR
// end ; if not Brown then
2665: LD_EXP 48
2669: NOT
2670: IFFALSE 2716
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 13f_ ) ;
2672: LD_ADDR_EXP 48
2676: PUSH
2677: LD_STRING Brown
2679: PPUSH
2680: LD_EXP 1
2684: NOT
2685: PPUSH
2686: LD_STRING 13f_
2688: PPUSH
2689: CALL 69058 0 3
2693: ST_TO_ADDR
// if Brown then
2694: LD_EXP 48
2698: IFFALSE 2716
// tmp := tmp ^ Brown ;
2700: LD_ADDR_VAR 0 2
2704: PUSH
2705: LD_VAR 0 2
2709: PUSH
2710: LD_EXP 48
2714: ADD
2715: ST_TO_ADDR
// end ; if not Gladstone then
2716: LD_EXP 49
2720: NOT
2721: IFFALSE 2767
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13f_ ) ;
2723: LD_ADDR_EXP 49
2727: PUSH
2728: LD_STRING Gladstone
2730: PPUSH
2731: LD_EXP 1
2735: NOT
2736: PPUSH
2737: LD_STRING 13f_
2739: PPUSH
2740: CALL 69058 0 3
2744: ST_TO_ADDR
// if Gladstone then
2745: LD_EXP 49
2749: IFFALSE 2767
// tmp := tmp ^ Gladstone ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 2
2760: PUSH
2761: LD_EXP 49
2765: ADD
2766: ST_TO_ADDR
// end ; if not Houten then
2767: LD_EXP 50
2771: NOT
2772: IFFALSE 2818
// begin Houten := PrepareUnit ( Houten , ( not debug ) , 13f_ ) ;
2774: LD_ADDR_EXP 50
2778: PUSH
2779: LD_STRING Houten
2781: PPUSH
2782: LD_EXP 1
2786: NOT
2787: PPUSH
2788: LD_STRING 13f_
2790: PPUSH
2791: CALL 69058 0 3
2795: ST_TO_ADDR
// if Houten then
2796: LD_EXP 50
2800: IFFALSE 2818
// tmp := tmp ^ Houten ;
2802: LD_ADDR_VAR 0 2
2806: PUSH
2807: LD_VAR 0 2
2811: PUSH
2812: LD_EXP 50
2816: ADD
2817: ST_TO_ADDR
// end ; if not Cornel then
2818: LD_EXP 51
2822: NOT
2823: IFFALSE 2869
// begin Cornel := PrepareUnit ( Cornell , ( not debug ) , 13f_ ) ;
2825: LD_ADDR_EXP 51
2829: PUSH
2830: LD_STRING Cornell
2832: PPUSH
2833: LD_EXP 1
2837: NOT
2838: PPUSH
2839: LD_STRING 13f_
2841: PPUSH
2842: CALL 69058 0 3
2846: ST_TO_ADDR
// if Cornel then
2847: LD_EXP 51
2851: IFFALSE 2869
// tmp := tmp ^ Cornel ;
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: LD_VAR 0 2
2862: PUSH
2863: LD_EXP 51
2867: ADD
2868: ST_TO_ADDR
// end ; if not Gary then
2869: LD_EXP 52
2873: NOT
2874: IFFALSE 2920
// begin Gary := PrepareUnit ( Gary , ( not debug ) , 13f_ ) ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_STRING Gary
2883: PPUSH
2884: LD_EXP 1
2888: NOT
2889: PPUSH
2890: LD_STRING 13f_
2892: PPUSH
2893: CALL 69058 0 3
2897: ST_TO_ADDR
// if Gary then
2898: LD_EXP 52
2902: IFFALSE 2920
// tmp := tmp ^ Gary ;
2904: LD_ADDR_VAR 0 2
2908: PUSH
2909: LD_VAR 0 2
2913: PUSH
2914: LD_EXP 52
2918: ADD
2919: ST_TO_ADDR
// end ; if not Frank then
2920: LD_EXP 53
2924: NOT
2925: IFFALSE 2971
// begin Frank := PrepareUnit ( Frank , ( not debug ) , 13f_ ) ;
2927: LD_ADDR_EXP 53
2931: PUSH
2932: LD_STRING Frank
2934: PPUSH
2935: LD_EXP 1
2939: NOT
2940: PPUSH
2941: LD_STRING 13f_
2943: PPUSH
2944: CALL 69058 0 3
2948: ST_TO_ADDR
// if Frank then
2949: LD_EXP 53
2953: IFFALSE 2971
// tmp := tmp ^ Frank ;
2955: LD_ADDR_VAR 0 2
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_EXP 53
2969: ADD
2970: ST_TO_ADDR
// end ; if not Kikuchi then
2971: LD_EXP 54
2975: NOT
2976: IFFALSE 3022
// begin Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13f_ ) ;
2978: LD_ADDR_EXP 54
2982: PUSH
2983: LD_STRING Kikuchi
2985: PPUSH
2986: LD_EXP 1
2990: NOT
2991: PPUSH
2992: LD_STRING 13f_
2994: PPUSH
2995: CALL 69058 0 3
2999: ST_TO_ADDR
// if Kikuchi then
3000: LD_EXP 54
3004: IFFALSE 3022
// tmp := tmp ^ Kikuchi ;
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: LD_VAR 0 2
3015: PUSH
3016: LD_EXP 54
3020: ADD
3021: ST_TO_ADDR
// end ; tmp := tmp union CreateCharacterSet ( 13_other_survivors ) ;
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: LD_VAR 0 2
3031: PUSH
3032: LD_STRING 13_other_survivors
3034: PPUSH
3035: CALL_OW 31
3039: UNION
3040: ST_TO_ADDR
// result := tmp ;
3041: LD_ADDR_VAR 0 1
3045: PUSH
3046: LD_VAR 0 2
3050: ST_TO_ADDR
// end ; end_of_file
3051: LD_VAR 0 1
3055: RET
// export Powell ; export vip , extraSquad ; export function PreparePowell ; var i , b , veh , tmp , depot , lab , armoury , workshop , un ; begin
3056: LD_INT 0
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
// uc_side := 4 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 4
3075: ST_TO_ADDR
// uc_nation := 1 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// SetResourceType ( GetBase ( am_depot ) , mat_cans , [ 3500 , 3000 , 2500 , 2000 ] [ Difficulty ] ) ;
3084: LD_INT 387
3086: PPUSH
3087: CALL_OW 274
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3500
3097: PUSH
3098: LD_INT 3000
3100: PUSH
3101: LD_INT 2500
3103: PUSH
3104: LD_INT 2000
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PPUSH
3119: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_oil , 400 ) ;
3123: LD_INT 387
3125: PPUSH
3126: CALL_OW 274
3130: PPUSH
3131: LD_INT 2
3133: PPUSH
3134: LD_INT 400
3136: PPUSH
3137: CALL_OW 277
// SetResourceType ( GetBase ( am_depot ) , mat_siberit , 10 ) ;
3141: LD_INT 387
3143: PPUSH
3144: CALL_OW 274
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: LD_INT 10
3154: PPUSH
3155: CALL_OW 277
// SetBName ( am_depot , sigma ) ;
3159: LD_INT 387
3161: PPUSH
3162: LD_STRING sigma
3164: PPUSH
3165: CALL_OW 500
// Powell := NewCharacter ( Powell ) ;
3169: LD_ADDR_EXP 60
3173: PUSH
3174: LD_STRING Powell
3176: PPUSH
3177: CALL_OW 25
3181: ST_TO_ADDR
// PlaceUnitXY ( Powell , 57 , 94 , false ) ;
3182: LD_EXP 60
3186: PPUSH
3187: LD_INT 57
3189: PPUSH
3190: LD_INT 94
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 48
// ComTurnXY ( Powell , 58 , 94 ) ;
3200: LD_EXP 60
3204: PPUSH
3205: LD_INT 58
3207: PPUSH
3208: LD_INT 94
3210: PPUSH
3211: CALL_OW 118
// vip := [ ] ;
3215: LD_ADDR_EXP 61
3219: PUSH
3220: EMPTY
3221: ST_TO_ADDR
// extraSquad := [ ] ;
3222: LD_ADDR_EXP 62
3226: PUSH
3227: EMPTY
3228: ST_TO_ADDR
// tmp := [ ] ;
3229: LD_ADDR_VAR 0 5
3233: PUSH
3234: EMPTY
3235: ST_TO_ADDR
// if JMMGirl <> 2 then
3236: LD_EXP 7
3240: PUSH
3241: LD_INT 2
3243: NONEQUAL
3244: IFFALSE 3268
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
3246: LD_ADDR_EXP 43
3250: PUSH
3251: LD_STRING Lisa
3253: PPUSH
3254: LD_EXP 1
3258: NOT
3259: PPUSH
3260: LD_STRING 13s_
3262: PPUSH
3263: CALL 69058 0 3
3267: ST_TO_ADDR
// if Lisa then
3268: LD_EXP 43
3272: IFFALSE 3290
// tmp := tmp ^ Lisa ;
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_VAR 0 5
3283: PUSH
3284: LD_EXP 43
3288: ADD
3289: ST_TO_ADDR
// if JMMGirl < 3 then
3290: LD_EXP 7
3294: PUSH
3295: LD_INT 3
3297: LESS
3298: IFFALSE 3329
// begin Connie := NewCharacter ( Coonie ) ;
3300: LD_ADDR_EXP 55
3304: PUSH
3305: LD_STRING Coonie
3307: PPUSH
3308: CALL_OW 25
3312: ST_TO_ADDR
// tmp := tmp ^ Connie ;
3313: LD_ADDR_VAR 0 5
3317: PUSH
3318: LD_VAR 0 5
3322: PUSH
3323: LD_EXP 55
3327: ADD
3328: ST_TO_ADDR
// end ; Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13s_ ) ;
3329: LD_ADDR_EXP 44
3333: PUSH
3334: LD_STRING Donaldson
3336: PPUSH
3337: LD_EXP 1
3341: NOT
3342: PPUSH
3343: LD_STRING 13s_
3345: PPUSH
3346: CALL 69058 0 3
3350: ST_TO_ADDR
// if Donaldson then
3351: LD_EXP 44
3355: IFFALSE 3373
// tmp := tmp ^ Donaldson ;
3357: LD_ADDR_VAR 0 5
3361: PUSH
3362: LD_VAR 0 5
3366: PUSH
3367: LD_EXP 44
3371: ADD
3372: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 13s_ ) ;
3373: LD_ADDR_EXP 45
3377: PUSH
3378: LD_STRING Bobby
3380: PPUSH
3381: LD_EXP 1
3385: NOT
3386: PPUSH
3387: LD_STRING 13s_
3389: PPUSH
3390: CALL 69058 0 3
3394: ST_TO_ADDR
// if Bobby then
3395: LD_EXP 45
3399: IFFALSE 3417
// tmp := tmp ^ Bobby ;
3401: LD_ADDR_VAR 0 5
3405: PUSH
3406: LD_VAR 0 5
3410: PUSH
3411: LD_EXP 45
3415: ADD
3416: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 13s_ ) ;
3417: LD_ADDR_EXP 46
3421: PUSH
3422: LD_STRING Cyrus
3424: PPUSH
3425: LD_EXP 1
3429: NOT
3430: PPUSH
3431: LD_STRING 13s_
3433: PPUSH
3434: CALL 69058 0 3
3438: ST_TO_ADDR
// if Cyrus then
3439: LD_EXP 46
3443: IFFALSE 3461
// tmp := tmp ^ Cyrus ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_VAR 0 5
3454: PUSH
3455: LD_EXP 46
3459: ADD
3460: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13s_ ) ;
3461: LD_ADDR_EXP 47
3465: PUSH
3466: LD_STRING Denis
3468: PPUSH
3469: LD_EXP 1
3473: NOT
3474: PPUSH
3475: LD_STRING 13s_
3477: PPUSH
3478: CALL 69058 0 3
3482: ST_TO_ADDR
// if not Denis then
3483: LD_EXP 47
3487: NOT
3488: IFFALSE 3512
// Denis := PrepareUnit ( Denis , ( not debug ) , 13f_ ) ;
3490: LD_ADDR_EXP 47
3494: PUSH
3495: LD_STRING Denis
3497: PPUSH
3498: LD_EXP 1
3502: NOT
3503: PPUSH
3504: LD_STRING 13f_
3506: PPUSH
3507: CALL 69058 0 3
3511: ST_TO_ADDR
// if Denis then
3512: LD_EXP 47
3516: IFFALSE 3534
// tmp := tmp ^ Denis ;
3518: LD_ADDR_VAR 0 5
3522: PUSH
3523: LD_VAR 0 5
3527: PUSH
3528: LD_EXP 47
3532: ADD
3533: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 13s_ ) ;
3534: LD_ADDR_EXP 48
3538: PUSH
3539: LD_STRING Brown
3541: PPUSH
3542: LD_EXP 1
3546: NOT
3547: PPUSH
3548: LD_STRING 13s_
3550: PPUSH
3551: CALL 69058 0 3
3555: ST_TO_ADDR
// if Brown then
3556: LD_EXP 48
3560: IFFALSE 3578
// tmp := tmp ^ Brown ;
3562: LD_ADDR_VAR 0 5
3566: PUSH
3567: LD_VAR 0 5
3571: PUSH
3572: LD_EXP 48
3576: ADD
3577: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 13s_ ) ;
3578: LD_ADDR_EXP 49
3582: PUSH
3583: LD_STRING Gladstone
3585: PPUSH
3586: LD_EXP 1
3590: NOT
3591: PPUSH
3592: LD_STRING 13s_
3594: PPUSH
3595: CALL 69058 0 3
3599: ST_TO_ADDR
// if Gladstone then
3600: LD_EXP 49
3604: IFFALSE 3622
// tmp := tmp ^ Gladstone ;
3606: LD_ADDR_VAR 0 5
3610: PUSH
3611: LD_VAR 0 5
3615: PUSH
3616: LD_EXP 49
3620: ADD
3621: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 13s_ ) ;
3622: LD_ADDR_EXP 50
3626: PUSH
3627: LD_STRING Houten
3629: PPUSH
3630: LD_EXP 1
3634: NOT
3635: PPUSH
3636: LD_STRING 13s_
3638: PPUSH
3639: CALL 69058 0 3
3643: ST_TO_ADDR
// if Houten then
3644: LD_EXP 50
3648: IFFALSE 3666
// tmp := tmp ^ Houten ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: LD_EXP 50
3664: ADD
3665: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 13s_ ) ;
3666: LD_ADDR_EXP 51
3670: PUSH
3671: LD_STRING Cornel
3673: PPUSH
3674: LD_EXP 1
3678: NOT
3679: PPUSH
3680: LD_STRING 13s_
3682: PPUSH
3683: CALL 69058 0 3
3687: ST_TO_ADDR
// if Cornel then
3688: LD_EXP 51
3692: IFFALSE 3710
// tmp := tmp ^ Cornel ;
3694: LD_ADDR_VAR 0 5
3698: PUSH
3699: LD_VAR 0 5
3703: PUSH
3704: LD_EXP 51
3708: ADD
3709: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 13s_ ) ;
3710: LD_ADDR_EXP 52
3714: PUSH
3715: LD_STRING Gary
3717: PPUSH
3718: LD_EXP 1
3722: NOT
3723: PPUSH
3724: LD_STRING 13s_
3726: PPUSH
3727: CALL 69058 0 3
3731: ST_TO_ADDR
// if Gary then
3732: LD_EXP 52
3736: IFFALSE 3754
// tmp := tmp ^ Gary ;
3738: LD_ADDR_VAR 0 5
3742: PUSH
3743: LD_VAR 0 5
3747: PUSH
3748: LD_EXP 52
3752: ADD
3753: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13s_ ) ;
3754: LD_ADDR_EXP 53
3758: PUSH
3759: LD_STRING Frank
3761: PPUSH
3762: LD_EXP 1
3766: NOT
3767: PPUSH
3768: LD_STRING 13s_
3770: PPUSH
3771: CALL 69058 0 3
3775: ST_TO_ADDR
// if Frank then
3776: LD_EXP 53
3780: IFFALSE 3798
// tmp := tmp ^ Frank ;
3782: LD_ADDR_VAR 0 5
3786: PUSH
3787: LD_VAR 0 5
3791: PUSH
3792: LD_EXP 53
3796: ADD
3797: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 13s_ ) ;
3798: LD_ADDR_EXP 54
3802: PUSH
3803: LD_STRING Kikuchi
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_STRING 13s_
3814: PPUSH
3815: CALL 69058 0 3
3819: ST_TO_ADDR
// if Kikuchi then
3820: LD_EXP 54
3824: IFFALSE 3842
// tmp := tmp ^ Kikuchi ;
3826: LD_ADDR_VAR 0 5
3830: PUSH
3831: LD_VAR 0 5
3835: PUSH
3836: LD_EXP 54
3840: ADD
3841: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
3842: LD_ADDR_EXP 57
3846: PUSH
3847: LD_STRING Mike
3849: PPUSH
3850: LD_EXP 1
3854: NOT
3855: PPUSH
3856: LD_STRING 10c_
3858: PPUSH
3859: CALL 69058 0 3
3863: ST_TO_ADDR
// if Mike then
3864: LD_EXP 57
3868: IFFALSE 3891
// PlaceUnitXYR ( Mike , 61 , 89 , 8 , false ) ;
3870: LD_EXP 57
3874: PPUSH
3875: LD_INT 61
3877: PPUSH
3878: LD_INT 89
3880: PPUSH
3881: LD_INT 8
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// vip := tmp ;
3891: LD_ADDR_EXP 61
3895: PUSH
3896: LD_VAR 0 5
3900: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 13s_others ) ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_VAR 0 5
3910: PUSH
3911: LD_STRING 13s_others
3913: PPUSH
3914: CALL_OW 31
3918: UNION
3919: ST_TO_ADDR
// if tmp < 18 then
3920: LD_VAR 0 5
3924: PUSH
3925: LD_INT 18
3927: LESS
3928: IFFALSE 4033
// begin InitHC_All ( ) ;
3930: CALL_OW 584
// for i = 1 to 18 - tmp do
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_INT 18
3946: PUSH
3947: LD_VAR 0 5
3951: MINUS
3952: PUSH
3953: FOR_TO
3954: IFFALSE 4031
// begin PrepareHuman ( sex_male , i mod 4 + 1 , 4 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_VAR 0 2
3963: PUSH
3964: LD_INT 4
3966: MOD
3967: PUSH
3968: LD_INT 1
3970: PLUS
3971: PPUSH
3972: LD_INT 4
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 10
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3989: LD_ADDR_VAR 0 5
3993: PUSH
3994: LD_VAR 0 5
3998: PPUSH
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL 106379 0 2
4008: ST_TO_ADDR
// extraSquad := Join ( extraSquad , un ) ;
4009: LD_ADDR_EXP 62
4013: PUSH
4014: LD_EXP 62
4018: PPUSH
4019: LD_VAR 0 10
4023: PPUSH
4024: CALL 106379 0 2
4028: ST_TO_ADDR
// end ;
4029: GO 3953
4031: POP
4032: POP
// end ; depot := HexInfo ( 53 , 94 ) ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_INT 53
4040: PPUSH
4041: LD_INT 94
4043: PPUSH
4044: CALL_OW 428
4048: ST_TO_ADDR
// lab := HexInfo ( 56 , 101 ) ;
4049: LD_ADDR_VAR 0 7
4053: PUSH
4054: LD_INT 56
4056: PPUSH
4057: LD_INT 101
4059: PPUSH
4060: CALL_OW 428
4064: ST_TO_ADDR
// armoury := HexInfo ( 67 , 101 ) ;
4065: LD_ADDR_VAR 0 8
4069: PUSH
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 101
4075: PPUSH
4076: CALL_OW 428
4080: ST_TO_ADDR
// workshop := HexInfo ( 54 , 85 ) ;
4081: LD_ADDR_VAR 0 9
4085: PUSH
4086: LD_INT 54
4088: PPUSH
4089: LD_INT 85
4091: PPUSH
4092: CALL_OW 428
4096: ST_TO_ADDR
// b := [ armoury , depot , workshop , lab ] ;
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: LD_VAR 0 8
4106: PUSH
4107: LD_VAR 0 6
4111: PUSH
4112: LD_VAR 0 9
4116: PUSH
4117: LD_VAR 0 7
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: ST_TO_ADDR
// for i in tmp do
4128: LD_ADDR_VAR 0 2
4132: PUSH
4133: LD_VAR 0 5
4137: PUSH
4138: FOR_IN
4139: IFFALSE 4334
// begin case GetBType ( b [ 1 ] ) of b_armoury :
4141: LD_VAR 0 3
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PPUSH
4150: CALL_OW 266
4154: PUSH
4155: LD_INT 4
4157: DOUBLE
4158: EQUAL
4159: IFTRUE 4163
4161: GO 4178
4163: POP
// SetClass ( i , class_soldier ) ; b_depot :
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 336
4176: GO 4248
4178: LD_INT 0
4180: DOUBLE
4181: EQUAL
4182: IFTRUE 4186
4184: GO 4201
4186: POP
// SetClass ( i , class_engineer ) ; b_workshop :
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_INT 2
4194: PPUSH
4195: CALL_OW 336
4199: GO 4248
4201: LD_INT 2
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4224
4209: POP
// SetClass ( i , class_mechanic ) ; b_lab :
4210: LD_VAR 0 2
4214: PPUSH
4215: LD_INT 3
4217: PPUSH
4218: CALL_OW 336
4222: GO 4248
4224: LD_INT 6
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4247
4232: POP
// SetClass ( i , class_scientistic ) ; end ;
4233: LD_VAR 0 2
4237: PPUSH
4238: LD_INT 4
4240: PPUSH
4241: CALL_OW 336
4245: GO 4248
4247: POP
// if UnitsInside ( b [ 1 ] ) = 6 then
4248: LD_VAR 0 3
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: CALL_OW 313
4261: PUSH
4262: LD_INT 6
4264: EQUAL
4265: IFFALSE 4285
// b := Delete ( b , 1 ) ;
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_VAR 0 3
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: CALL_OW 3
4284: ST_TO_ADDR
// if b then
4285: LD_VAR 0 3
4289: IFFALSE 4311
// PlaceHumanInUnit ( i , b [ 1 ] ) else
4291: LD_VAR 0 2
4295: PPUSH
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: PPUSH
4305: CALL_OW 52
4309: GO 4332
// PlaceUnitXYR ( i , 61 , 89 , 8 , false ) ;
4311: LD_VAR 0 2
4315: PPUSH
4316: LD_INT 61
4318: PPUSH
4319: LD_INT 89
4321: PPUSH
4322: LD_INT 8
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 50
// end ;
4332: GO 4138
4334: POP
4335: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 100 ) ;
4336: LD_INT 2
4338: PPUSH
4339: LD_INT 1
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_INT 12
4347: PPUSH
4348: LD_INT 100
4350: PPUSH
4351: CALL 73898 0 5
// veh := CreateVehicle ;
4355: LD_ADDR_VAR 0 4
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4365: LD_VAR 0 4
4369: PPUSH
4370: LD_INT 4
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( veh , 49 , 88 , false ) ;
4377: LD_VAR 0 4
4381: PPUSH
4382: LD_INT 49
4384: PPUSH
4385: LD_INT 88
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
4395: LD_VAR 0 4
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: LD_INT 100
4405: PPUSH
4406: CALL_OW 290
// uc_side := 0 ;
4410: LD_ADDR_OWVAR 20
4414: PUSH
4415: LD_INT 0
4417: ST_TO_ADDR
// uc_nation := 0 ;
4418: LD_ADDR_OWVAR 21
4422: PUSH
4423: LD_INT 0
4425: ST_TO_ADDR
// for i := 1 to 3 do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_INT 3
4438: PUSH
4439: FOR_TO
4440: IFFALSE 4471
// begin InitHc ;
4442: CALL_OW 19
// hc_class := class_apeman ;
4446: LD_ADDR_OWVAR 28
4450: PUSH
4451: LD_INT 12
4453: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , powellApe , false ) ;
4454: CALL_OW 44
4458: PPUSH
4459: LD_INT 13
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ;
4469: GO 4439
4471: POP
4472: POP
// end ; end_of_file
4473: LD_VAR 0 1
4477: RET
// export Kurt , Kozlov , Friend ; export powellBomb ; export function PrepareLegion ; var i , side , un , tmp ; begin
4478: LD_INT 0
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// side := 8 ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_INT 8
4492: ST_TO_ADDR
// uc_side := side ;
4493: LD_ADDR_OWVAR 20
4497: PUSH
4498: LD_VAR 0 3
4502: ST_TO_ADDR
// uc_nation := 2 ;
4503: LD_ADDR_OWVAR 21
4507: PUSH
4508: LD_INT 2
4510: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4511: LD_ADDR_VAR 0 2
4515: PUSH
4516: LD_INT 22
4518: PUSH
4519: LD_VAR 0 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 69
4546: PUSH
4547: FOR_IN
4548: IFFALSE 4564
// SetBLevel ( i , 10 ) ;
4550: LD_VAR 0 2
4554: PPUSH
4555: LD_INT 10
4557: PPUSH
4558: CALL_OW 241
4562: GO 4547
4564: POP
4565: POP
// if KurtStatus then
4566: LD_EXP 3
4570: IFFALSE 4593
// Kurt := PrepareUnit ( Kurt , false ,  ) else
4572: LD_ADDR_EXP 63
4576: PUSH
4577: LD_STRING Kurt
4579: PPUSH
4580: LD_INT 0
4582: PPUSH
4583: LD_STRING 
4585: PPUSH
4586: CALL 69058 0 3
4590: ST_TO_ADDR
4591: GO 4615
// Kurt := PrepareUnit ( AltKurt , ( not debug ) ,  ) ;
4593: LD_ADDR_EXP 63
4597: PUSH
4598: LD_STRING AltKurt
4600: PPUSH
4601: LD_EXP 1
4605: NOT
4606: PPUSH
4607: LD_STRING 
4609: PPUSH
4610: CALL 69058 0 3
4614: ST_TO_ADDR
// if not Kurt then
4615: LD_EXP 63
4619: NOT
4620: IFFALSE 4646
// begin InitHc ;
4622: CALL_OW 19
// PrepareSoldier ( sex_male , 10 ) ;
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 10
4631: PPUSH
4632: CALL_OW 381
// Kurt := CreateHuman ;
4636: LD_ADDR_EXP 63
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Kurt , ar_depot1 ) ;
4646: LD_EXP 63
4650: PPUSH
4651: LD_INT 324
4653: PPUSH
4654: CALL_OW 52
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
4658: LD_ADDR_EXP 64
4662: PUSH
4663: LD_STRING Kozlov
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: LD_STRING 
4671: PPUSH
4672: CALL 69058 0 3
4676: ST_TO_ADDR
// PlaceHumanInUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
4677: LD_EXP 64
4681: PPUSH
4682: LD_INT 22
4684: PUSH
4685: LD_INT 8
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 23
4694: PUSH
4695: LD_INT 3
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 30
4704: PUSH
4705: LD_INT 8
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: PPUSH
4717: CALL_OW 69
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PPUSH
4726: CALL_OW 52
// SetSkill ( Kozlov , class_mechanic , 10 ) ;
4730: LD_EXP 64
4734: PPUSH
4735: LD_INT 3
4737: PPUSH
4738: LD_INT 10
4740: PPUSH
4741: CALL_OW 237
// SetSkill ( Kozlov , class_scientistic , 10 ) ;
4745: LD_EXP 64
4749: PPUSH
4750: LD_INT 4
4752: PPUSH
4753: LD_INT 10
4755: PPUSH
4756: CALL_OW 237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 22
4767: PUSH
4768: LD_VAR 0 3
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: LD_INT 30
4779: PUSH
4780: LD_INT 32
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 58
4789: PUSH
4790: EMPTY
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 69
4802: ST_TO_ADDR
// for i = 1 to 10 do
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: DOUBLE
4809: LD_INT 1
4811: DEC
4812: ST_TO_ADDR
4813: LD_INT 10
4815: PUSH
4816: FOR_TO
4817: IFFALSE 4889
// begin uc_nation := nation_nature ;
4819: LD_ADDR_OWVAR 21
4823: PUSH
4824: LD_INT 0
4826: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
4827: LD_ADDR_OWVAR 28
4831: PUSH
4832: LD_INT 15
4834: ST_TO_ADDR
// hc_gallery :=  ;
4835: LD_ADDR_OWVAR 33
4839: PUSH
4840: LD_STRING 
4842: ST_TO_ADDR
// hc_name :=  ;
4843: LD_ADDR_OWVAR 26
4847: PUSH
4848: LD_STRING 
4850: ST_TO_ADDR
// un := CreateHuman ;
4851: LD_ADDR_VAR 0 4
4855: PUSH
4856: CALL_OW 44
4860: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - i ] ) ;
4861: LD_VAR 0 4
4865: PPUSH
4866: LD_VAR 0 5
4870: PUSH
4871: LD_VAR 0 5
4875: PUSH
4876: LD_VAR 0 2
4880: MINUS
4881: ARRAY
4882: PPUSH
4883: CALL_OW 52
// end ;
4887: GO 4816
4889: POP
4890: POP
// tmp := CreateCharacterSet ( 12_kurt_squad ) ;
4891: LD_ADDR_VAR 0 5
4895: PUSH
4896: LD_STRING 12_kurt_squad
4898: PPUSH
4899: CALL_OW 31
4903: ST_TO_ADDR
// if tmp then
4904: LD_VAR 0 5
4908: IFFALSE 4942
// for i in tmp do
4910: LD_ADDR_VAR 0 2
4914: PUSH
4915: LD_VAR 0 5
4919: PUSH
4920: FOR_IN
4921: IFFALSE 4940
// PlaceUnitArea ( i , legionBaseArea , false ) ;
4923: LD_VAR 0 2
4927: PPUSH
4928: LD_INT 5
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
4938: GO 4920
4940: POP
4941: POP
// PrepareBase ( ar_depot1 , legionBaseArea ,  , [ 8 , 9 , 10 , 10 ] [ Difficulty ] , [ 3000 , 500 , 150 ] , [ 16 , 6 , 6 , 8 ] ) ;
4942: LD_INT 324
4944: PPUSH
4945: LD_INT 5
4947: PPUSH
4948: LD_STRING 
4950: PPUSH
4951: LD_INT 8
4953: PUSH
4954: LD_INT 9
4956: PUSH
4957: LD_INT 10
4959: PUSH
4960: LD_INT 10
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PPUSH
4975: LD_INT 3000
4977: PUSH
4978: LD_INT 500
4980: PUSH
4981: LD_INT 150
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PPUSH
4989: LD_INT 16
4991: PUSH
4992: LD_INT 6
4994: PUSH
4995: LD_INT 6
4997: PUSH
4998: LD_INT 8
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL 77351 0 6
// mc_bases := Replace ( mc_bases , 3 , FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 2 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Kurt ) ;
5011: LD_ADDR_EXP 101
5015: PUSH
5016: LD_EXP 101
5020: PPUSH
5021: LD_INT 3
5023: PPUSH
5024: LD_INT 22
5026: PUSH
5027: LD_VAR 0 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 23
5038: PUSH
5039: LD_INT 2
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 21
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: PPUSH
5068: CALL_OW 69
5072: PUSH
5073: LD_EXP 63
5077: DIFF
5078: PPUSH
5079: CALL_OW 1
5083: ST_TO_ADDR
// PrepareMechanic ( sex_male , 7 ) ;
5084: LD_INT 1
5086: PPUSH
5087: LD_INT 7
5089: PPUSH
5090: CALL_OW 383
// hc_name := Ali Hadrach ;
5094: LD_ADDR_OWVAR 26
5098: PUSH
5099: LD_STRING Ali Hadrach
5101: ST_TO_ADDR
// hc_face_number := 31 ;
5102: LD_ADDR_OWVAR 34
5106: PUSH
5107: LD_INT 31
5109: ST_TO_ADDR
// Friend := CreateHuman ;
5110: LD_ADDR_EXP 65
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_selfpropelled_bomb , 100 ) ;
5120: LD_INT 14
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: LD_INT 29
5131: PPUSH
5132: LD_INT 100
5134: PPUSH
5135: CALL 73898 0 5
// powellBomb := CreateVehicle ;
5139: LD_ADDR_EXP 66
5143: PUSH
5144: CALL_OW 45
5148: ST_TO_ADDR
// PlaceUnitXY ( powellBomb , 90 , 51 , false ) ;
5149: LD_EXP 66
5153: PPUSH
5154: LD_INT 90
5156: PPUSH
5157: LD_INT 51
5159: PPUSH
5160: LD_INT 0
5162: PPUSH
5163: CALL_OW 48
// end ;
5167: LD_VAR 0 1
5171: RET
// export function RebuildKozlovFactory ; var fac , lab ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
// if IsLive ( kozlov_fac ) then
5177: LD_INT 332
5179: PPUSH
5180: CALL_OW 300
5184: IFFALSE 5188
// exit ;
5186: GO 5755
// ComExitBuilding ( Kozlov ) ;
5188: LD_EXP 64
5192: PPUSH
5193: CALL_OW 122
// if GetClass ( Kozlov ) <> 2 then
5197: LD_EXP 64
5201: PPUSH
5202: CALL_OW 257
5206: PUSH
5207: LD_INT 2
5209: NONEQUAL
5210: IFFALSE 5245
// begin AddComEnterUnit ( Kozlov , ar_depot1 ) ;
5212: LD_EXP 64
5216: PPUSH
5217: LD_INT 324
5219: PPUSH
5220: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_engineer ) ;
5224: LD_EXP 64
5228: PPUSH
5229: LD_INT 2
5231: PPUSH
5232: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
5236: LD_EXP 64
5240: PPUSH
5241: CALL_OW 182
// end ; AddComBuild ( Kozlov , b_workshop , 93 , 32 , 3 ) ;
5245: LD_EXP 64
5249: PPUSH
5250: LD_INT 2
5252: PPUSH
5253: LD_INT 93
5255: PPUSH
5256: LD_INT 32
5258: PPUSH
5259: LD_INT 3
5261: PPUSH
5262: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
5266: LD_INT 35
5268: PPUSH
5269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) ;
5273: LD_INT 22
5275: PUSH
5276: LD_INT 8
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 3
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 23
5295: PUSH
5296: LD_INT 3
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 57
5305: PUSH
5306: EMPTY
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 69
5319: IFFALSE 5266
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] , [ f_constructed ] ] ) [ 1 ] ;
5321: LD_ADDR_VAR 0 2
5325: PUSH
5326: LD_INT 22
5328: PUSH
5329: LD_INT 8
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 30
5338: PUSH
5339: LD_INT 3
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 23
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 57
5358: PUSH
5359: EMPTY
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PPUSH
5368: CALL_OW 69
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] ] ) then
5377: LD_INT 22
5379: PUSH
5380: LD_INT 8
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 23
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 69
5416: NOT
5417: IFFALSE 5495
// begin AddComBuild ( Kozlov , b_ext_siberium , 97 , 36 , 5 ) ;
5419: LD_EXP 64
5423: PPUSH
5424: LD_INT 21
5426: PPUSH
5427: LD_INT 97
5429: PPUSH
5430: LD_INT 36
5432: PPUSH
5433: LD_INT 5
5435: PPUSH
5436: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
5440: LD_INT 35
5442: PPUSH
5443: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_siberium ] , [ f_constructed ] ] ) ;
5447: LD_INT 22
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 3
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 30
5469: PUSH
5470: LD_INT 21
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 57
5479: PUSH
5480: EMPTY
5481: LIST
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: IFFALSE 5440
// end ; if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] ] ) then
5495: LD_INT 22
5497: PUSH
5498: LD_INT 8
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 23
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 30
5517: PUSH
5518: LD_INT 18
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL_OW 69
5534: NOT
5535: IFFALSE 5613
// begin AddComBuild ( Kozlov , b_ext_rocket , 89 , 32 , 1 ) ;
5537: LD_EXP 64
5541: PPUSH
5542: LD_INT 18
5544: PPUSH
5545: LD_INT 89
5547: PPUSH
5548: LD_INT 32
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
5558: LD_INT 35
5560: PPUSH
5561: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_btype , b_ext_rocket ] , [ f_constructed ] ] ) ;
5565: LD_INT 22
5567: PUSH
5568: LD_INT 8
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 23
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 18
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 57
5597: PUSH
5598: EMPTY
5599: LIST
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: IFFALSE 5558
// end ; lab := kozlov_lab ;
5613: LD_ADDR_VAR 0 3
5617: PUSH
5618: LD_INT 336
5620: ST_TO_ADDR
// if not lab then
5621: LD_VAR 0 3
5625: NOT
5626: IFFALSE 5630
// exit ;
5628: GO 5755
// AddComEnterUnit ( Kozlov , lab [ 1 ] ) ;
5630: LD_EXP 64
5634: PPUSH
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: CALL_OW 180
// AddComChangeProfession ( Kozlov , 4 ) ;
5648: LD_EXP 64
5652: PPUSH
5653: LD_INT 4
5655: PPUSH
5656: CALL_OW 183
// ComResearch ( lab [ 1 ] , tech_sibFiss ) ;
5660: LD_VAR 0 3
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: LD_INT 25
5671: PPUSH
5672: CALL_OW 124
// repeat wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// until GetTech ( tech_sibFiss , 8 ) = state_researched ;
5683: LD_INT 25
5685: PPUSH
5686: LD_INT 8
5688: PPUSH
5689: CALL_OW 321
5693: PUSH
5694: LD_INT 2
5696: EQUAL
5697: IFFALSE 5676
// ComExitBuilding ( Kozlov ) ;
5699: LD_EXP 64
5703: PPUSH
5704: CALL_OW 122
// AddComEnterUnit ( Kozlov , fac ) ;
5708: LD_EXP 64
5712: PPUSH
5713: LD_VAR 0 2
5717: PPUSH
5718: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
5722: LD_EXP 64
5726: PPUSH
5727: LD_INT 3
5729: PPUSH
5730: CALL_OW 183
// ComConstruct ( fac , ru_heavy_wheeled , engine_siberite , control_manual , ru_siberium_rocket ) ;
5734: LD_VAR 0 2
5738: PPUSH
5739: LD_INT 23
5741: PPUSH
5742: LD_INT 3
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_INT 48
5750: PPUSH
5751: CALL_OW 125
// end ;
5755: LD_VAR 0 1
5759: RET
// every 0 0$10 trigger not legionDestroyed and missionStage >= 6 do
5760: LD_EXP 22
5764: NOT
5765: PUSH
5766: LD_EXP 15
5770: PUSH
5771: LD_INT 6
5773: GREATEREQUAL
5774: AND
5775: IFFALSE 5856
5777: GO 5779
5779: DISABLE
// begin MC_SetDefenderLimit ( 3 , 3 ) ;
5780: LD_INT 3
5782: PPUSH
5783: LD_INT 3
5785: PPUSH
5786: CALL 62769 0 2
// MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher ] ] ) ;
5790: LD_INT 3
5792: PPUSH
5793: LD_INT 14
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: LD_INT 28
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 14
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: LD_INT 1
5819: PUSH
5820: LD_INT 28
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 14
5831: PUSH
5832: LD_INT 1
5834: PUSH
5835: LD_INT 1
5837: PUSH
5838: LD_INT 28
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL 62632 0 2
// end ;
5856: END
// every 7 7$30 trigger not legionDestroyed and missionStage >= 6 and not MC_GetVehicles ( 3 , true ) do var i , tmp , target ;
5857: LD_EXP 22
5861: NOT
5862: PUSH
5863: LD_EXP 15
5867: PUSH
5868: LD_INT 6
5870: GREATEREQUAL
5871: AND
5872: PUSH
5873: LD_INT 3
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL 64050 0 2
5883: NOT
5884: AND
5885: IFFALSE 6759
5887: GO 5889
5889: DISABLE
5890: LD_INT 0
5892: PPUSH
5893: PPUSH
5894: PPUSH
// begin enable ;
5895: ENABLE
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
5896: LD_INT 22
5898: PUSH
5899: LD_INT 8
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 23
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 30
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: PPUSH
5931: CALL_OW 69
5935: NOT
5936: IFFALSE 5940
// exit ;
5938: GO 6759
// if Prob ( 40 ) then
5940: LD_INT 40
5942: PPUSH
5943: CALL_OW 13
5947: IFFALSE 6074
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 14
5954: PUSH
5955: LD_INT 1
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 28
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 14
5972: PUSH
5973: LD_INT 1
5975: PUSH
5976: LD_INT 2
5978: PUSH
5979: LD_INT 28
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 14
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: LD_INT 28
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 14
6008: PUSH
6009: LD_INT 1
6011: PUSH
6012: LD_INT 2
6014: PUSH
6015: LD_INT 28
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 14
6026: PUSH
6027: LD_INT 1
6029: PUSH
6030: LD_INT 2
6032: PUSH
6033: LD_INT 28
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: PUSH
6042: LD_INT 14
6044: PUSH
6045: LD_INT 1
6047: PUSH
6048: LD_INT 2
6050: PUSH
6051: LD_INT 26
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PPUSH
6068: CALL 62632 0 2
// end else
6072: GO 6281
// begin MC_InsertProduceList ( 3 , [ [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower , ar_rocket_launcher ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ Difficulty ] ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ Difficulty ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
6074: LD_INT 3
6076: PPUSH
6077: LD_INT 14
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: LD_INT 2
6085: PUSH
6086: LD_INT 27
6088: PUSH
6089: LD_INT 26
6091: PUSH
6092: LD_INT 26
6094: PUSH
6095: LD_INT 28
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_OWVAR 67
6108: ARRAY
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 1
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: LD_INT 27
6127: PUSH
6128: LD_INT 26
6130: PUSH
6131: LD_INT 26
6133: PUSH
6134: LD_INT 26
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PUSH
6143: LD_OWVAR 67
6147: ARRAY
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 14
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 26
6166: PUSH
6167: LD_INT 26
6169: PUSH
6170: LD_INT 29
6172: PUSH
6173: LD_INT 29
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_OWVAR 67
6186: ARRAY
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 13
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: LD_INT 2
6202: PUSH
6203: LD_INT 26
6205: PUSH
6206: LD_INT 29
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 29
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_OWVAR 67
6225: ARRAY
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 13
6235: PUSH
6236: LD_INT 1
6238: PUSH
6239: LD_INT 2
6241: PUSH
6242: LD_INT 29
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 14
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: PPUSH
6277: CALL 62632 0 2
// end ; repeat wait ( 0 0$1 ) ;
6281: LD_INT 35
6283: PPUSH
6284: CALL_OW 67
// until MC_GetVehicles ( 3 , true ) >= 6 ;
6288: LD_INT 3
6290: PPUSH
6291: LD_INT 1
6293: PPUSH
6294: CALL 64050 0 2
6298: PUSH
6299: LD_INT 6
6301: GREATEREQUAL
6302: IFFALSE 6281
// wait ( 0 0$30 ) ;
6304: LD_INT 1050
6306: PPUSH
6307: CALL_OW 67
// tmp := MC_GetVehicles ( 3 , true ) ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: LD_INT 3
6318: PPUSH
6319: LD_INT 1
6321: PPUSH
6322: CALL 64050 0 2
6326: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 3 , mc_vehicles [ 3 ] diff tmp ) ;
6327: LD_ADDR_EXP 120
6331: PUSH
6332: LD_EXP 120
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_EXP 120
6344: PUSH
6345: LD_INT 3
6347: ARRAY
6348: PUSH
6349: LD_VAR 0 2
6353: DIFF
6354: PPUSH
6355: CALL_OW 1
6359: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 0
6367: PPUSH
6368: LD_INT 2
6370: PPUSH
6371: CALL_OW 12
6375: ST_TO_ADDR
// if target then
6376: LD_VAR 0 3
6380: IFFALSE 6517
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 24
6394: PUSH
6395: LD_INT 250
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 72
6406: ST_TO_ADDR
// if not tmp then
6407: LD_VAR 0 2
6411: NOT
6412: IFFALSE 6416
// break ;
6414: GO 6515
// for i in tmp do
6416: LD_ADDR_VAR 0 1
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: FOR_IN
6427: IFFALSE 6467
// if GetDistUnitXY ( i , 89 , 71 ) > 9 then
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_INT 89
6436: PPUSH
6437: LD_INT 71
6439: PPUSH
6440: CALL_OW 297
6444: PUSH
6445: LD_INT 9
6447: GREATER
6448: IFFALSE 6465
// ComMoveXY ( i , 89 , 71 ) ;
6450: LD_VAR 0 1
6454: PPUSH
6455: LD_INT 89
6457: PPUSH
6458: LD_INT 71
6460: PPUSH
6461: CALL_OW 111
6465: GO 6426
6467: POP
6468: POP
// wait ( 0 0$1 ) ;
6469: LD_INT 35
6471: PPUSH
6472: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 89 , 71 , 9 ] ) >= ( tmp - 1 ) ;
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_INT 92
6483: PUSH
6484: LD_INT 89
6486: PUSH
6487: LD_INT 71
6489: PUSH
6490: LD_INT 9
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: PUSH
6504: LD_VAR 0 2
6508: PUSH
6509: LD_INT 1
6511: MINUS
6512: GREATEREQUAL
6513: IFFALSE 6382
// end else
6515: GO 6650
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
6517: LD_ADDR_VAR 0 2
6521: PUSH
6522: LD_VAR 0 2
6526: PPUSH
6527: LD_INT 24
6529: PUSH
6530: LD_INT 250
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 72
6541: ST_TO_ADDR
// if not tmp then
6542: LD_VAR 0 2
6546: NOT
6547: IFFALSE 6551
// break ;
6549: GO 6650
// for i in tmp do
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_VAR 0 2
6560: PUSH
6561: FOR_IN
6562: IFFALSE 6602
// if GetDistUnitXY ( i , 125 , 129 ) > 9 then
6564: LD_VAR 0 1
6568: PPUSH
6569: LD_INT 125
6571: PPUSH
6572: LD_INT 129
6574: PPUSH
6575: CALL_OW 297
6579: PUSH
6580: LD_INT 9
6582: GREATER
6583: IFFALSE 6600
// ComMoveXY ( i , 125 , 129 ) ;
6585: LD_VAR 0 1
6589: PPUSH
6590: LD_INT 125
6592: PPUSH
6593: LD_INT 129
6595: PPUSH
6596: CALL_OW 111
6600: GO 6561
6602: POP
6603: POP
// wait ( 0 0$1 ) ;
6604: LD_INT 35
6606: PPUSH
6607: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 125 , 129 , 9 ] ) >= ( tmp - 1 ) ;
6611: LD_VAR 0 2
6615: PPUSH
6616: LD_INT 92
6618: PUSH
6619: LD_INT 125
6621: PUSH
6622: LD_INT 129
6624: PUSH
6625: LD_INT 9
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 72
6638: PUSH
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: MINUS
6647: GREATEREQUAL
6648: IFFALSE 6517
// end ; repeat wait ( 0 0$1 ) ;
6650: LD_INT 35
6652: PPUSH
6653: CALL_OW 67
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6750
// begin if GetLives ( i ) > 251 then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 256
6679: PUSH
6680: LD_INT 251
6682: GREATER
6683: IFFALSE 6721
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
6685: LD_VAR 0 1
6689: PPUSH
6690: LD_INT 81
6692: PUSH
6693: LD_INT 8
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PPUSH
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 74
6714: PPUSH
6715: CALL_OW 115
6719: GO 6748
// if IsDead ( i ) then
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 301
6730: IFFALSE 6748
// tmp := tmp diff i ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 2
6741: PUSH
6742: LD_VAR 0 1
6746: DIFF
6747: ST_TO_ADDR
// end ;
6748: GO 6667
6750: POP
6751: POP
// until not tmp ;
6752: LD_VAR 0 2
6756: NOT
6757: IFFALSE 6650
// end ;
6759: PPOPN 3
6761: END
// every 20 20$00 trigger not legionDestroyed and missionStage >= 6 and Difficulty > 1 do var i , un , tmp ;
6762: LD_EXP 22
6766: NOT
6767: PUSH
6768: LD_EXP 15
6772: PUSH
6773: LD_INT 6
6775: GREATEREQUAL
6776: AND
6777: PUSH
6778: LD_OWVAR 67
6782: PUSH
6783: LD_INT 1
6785: GREATER
6786: AND
6787: IFFALSE 7320
6789: GO 6791
6791: DISABLE
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
6796: PPUSH
// begin enable ;
6797: ENABLE
// tmp := [ ] ;
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: EMPTY
6804: ST_TO_ADDR
// for i = 1 to [ 4 , 6 , 7 , 8 ] [ Difficulty ] do
6805: LD_ADDR_VAR 0 1
6809: PUSH
6810: DOUBLE
6811: LD_INT 1
6813: DEC
6814: ST_TO_ADDR
6815: LD_INT 4
6817: PUSH
6818: LD_INT 6
6820: PUSH
6821: LD_INT 7
6823: PUSH
6824: LD_INT 8
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: LD_OWVAR 67
6837: ARRAY
6838: PUSH
6839: FOR_TO
6840: IFFALSE 7000
// begin uc_side := 8 ;
6842: LD_ADDR_OWVAR 20
6846: PUSH
6847: LD_INT 8
6849: ST_TO_ADDR
// uc_nation := 2 ;
6850: LD_ADDR_OWVAR 21
6854: PUSH
6855: LD_INT 2
6857: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_apeman , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_gatling_gun ] [ rand ( 1 , 4 ) ] , 88 ) ;
6858: LD_INT 13
6860: PUSH
6861: LD_INT 14
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 1
6870: PPUSH
6871: LD_INT 2
6873: PPUSH
6874: CALL_OW 12
6878: ARRAY
6879: PPUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 5
6885: PPUSH
6886: LD_INT 27
6888: PUSH
6889: LD_INT 28
6891: PUSH
6892: LD_INT 26
6894: PUSH
6895: LD_INT 25
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 4
6909: PPUSH
6910: CALL_OW 12
6914: ARRAY
6915: PPUSH
6916: LD_INT 88
6918: PPUSH
6919: CALL 73898 0 5
// un := CreateVehicle ;
6923: LD_ADDR_VAR 0 2
6927: PUSH
6928: CALL_OW 45
6932: ST_TO_ADDR
// tmp := tmp ^ un ;
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_VAR 0 3
6942: PUSH
6943: LD_VAR 0 2
6947: ADD
6948: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: CALL_OW 233
// PlaceUnitArea ( un , northSpawn , false ) ;
6961: LD_VAR 0 2
6965: PPUSH
6966: LD_INT 30
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ComMoveXY ( un , 16 , 11 ) ;
6976: LD_VAR 0 2
6980: PPUSH
6981: LD_INT 16
6983: PPUSH
6984: LD_INT 11
6986: PPUSH
6987: CALL_OW 111
// wait ( 0 0$2 ) ;
6991: LD_INT 70
6993: PPUSH
6994: CALL_OW 67
// end ;
6998: GO 6839
7000: POP
7001: POP
// for i = 1 to Difficulty do
7002: LD_ADDR_VAR 0 1
7006: PUSH
7007: DOUBLE
7008: LD_INT 1
7010: DEC
7011: ST_TO_ADDR
7012: LD_OWVAR 67
7016: PUSH
7017: FOR_TO
7018: IFFALSE 7147
// begin uc_side := 8 ;
7020: LD_ADDR_OWVAR 20
7024: PUSH
7025: LD_INT 8
7027: ST_TO_ADDR
// uc_nation := 2 ;
7028: LD_ADDR_OWVAR 21
7032: PUSH
7033: LD_INT 2
7035: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
7036: LD_INT 0
7038: PPUSH
7039: LD_INT 8
7041: PPUSH
7042: LD_INT 8
7044: PUSH
7045: LD_INT 8
7047: PUSH
7048: LD_INT 9
7050: PUSH
7051: LD_INT 10
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: LD_OWVAR 67
7064: ARRAY
7065: PPUSH
7066: CALL_OW 380
// un := CreateHuman ;
7070: LD_ADDR_VAR 0 2
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// tmp := tmp ^ un ;
7080: LD_ADDR_VAR 0 3
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: LD_VAR 0 2
7094: ADD
7095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7096: LD_VAR 0 2
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: CALL_OW 233
// PlaceUnitArea ( un , northSpawn , false ) ;
7108: LD_VAR 0 2
7112: PPUSH
7113: LD_INT 30
7115: PPUSH
7116: LD_INT 0
7118: PPUSH
7119: CALL_OW 49
// ComMoveXY ( un , 16 , 11 ) ;
7123: LD_VAR 0 2
7127: PPUSH
7128: LD_INT 16
7130: PPUSH
7131: LD_INT 11
7133: PPUSH
7134: CALL_OW 111
// wait ( 0 0$2 ) ;
7138: LD_INT 70
7140: PPUSH
7141: CALL_OW 67
// end ;
7145: GO 7017
7147: POP
7148: POP
// repeat wait ( 0 0$1 ) ;
7149: LD_INT 35
7151: PPUSH
7152: CALL_OW 67
// if legionDestroyed then
7156: LD_EXP 22
7160: IFFALSE 7164
// exit ;
7162: GO 7320
// for i in tmp do
7164: LD_ADDR_VAR 0 1
7168: PUSH
7169: LD_VAR 0 3
7173: PUSH
7174: FOR_IN
7175: IFFALSE 7311
// begin if GetLives ( i ) > 250 then
7177: LD_VAR 0 1
7181: PPUSH
7182: CALL_OW 256
7186: PUSH
7187: LD_INT 250
7189: GREATER
7190: IFFALSE 7282
// begin if not FilterAllUnits ( [ [ f_enemy , 8 ] , [ f_dist , i , 10 ] ] ) then
7192: LD_INT 81
7194: PUSH
7195: LD_INT 8
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 91
7204: PUSH
7205: LD_VAR 0 1
7209: PUSH
7210: LD_INT 10
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: NOT
7227: IFFALSE 7246
// ComAgressiveMove ( i , 67 , 110 ) else
7229: LD_VAR 0 1
7233: PPUSH
7234: LD_INT 67
7236: PPUSH
7237: LD_INT 110
7239: PPUSH
7240: CALL_OW 114
7244: GO 7280
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7246: LD_VAR 0 1
7250: PPUSH
7251: LD_INT 81
7253: PUSH
7254: LD_INT 8
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: PPUSH
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 74
7275: PPUSH
7276: CALL_OW 115
// end else
7280: GO 7309
// if IsDead ( i ) then
7282: LD_VAR 0 1
7286: PPUSH
7287: CALL_OW 301
7291: IFFALSE 7309
// tmp := tmp diff i ;
7293: LD_ADDR_VAR 0 3
7297: PUSH
7298: LD_VAR 0 3
7302: PUSH
7303: LD_VAR 0 1
7307: DIFF
7308: ST_TO_ADDR
// end ;
7309: GO 7174
7311: POP
7312: POP
// until not tmp ;
7313: LD_VAR 0 3
7317: NOT
7318: IFFALSE 7149
// end ; end_of_file
7320: PPOPN 3
7322: END
// export Platonov , Kovalyuk , Bystrov , Yakotich , Gleb , Bierezov ; export Vsevolod , sewiVeh ; export behemoths , behemothBuilders ; export function PrepareRussian ; var i , j , base , tmp , side , xy , un , b , teleport ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// side := 3 ;
7335: LD_ADDR_VAR 0 6
7339: PUSH
7340: LD_INT 3
7342: ST_TO_ADDR
// uc_side := side ;
7343: LD_ADDR_OWVAR 20
7347: PUSH
7348: LD_VAR 0 6
7352: ST_TO_ADDR
// uc_nation := 3 ;
7353: LD_ADDR_OWVAR 21
7357: PUSH
7358: LD_INT 3
7360: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
7361: LD_ADDR_VAR 0 2
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_VAR 0 6
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 21
7380: PUSH
7381: LD_INT 3
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 69
7396: PUSH
7397: FOR_IN
7398: IFFALSE 7414
// SetBLevel ( i , 10 ) ;
7400: LD_VAR 0 2
7404: PPUSH
7405: LD_INT 10
7407: PPUSH
7408: CALL_OW 241
7412: GO 7397
7414: POP
7415: POP
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
7416: LD_ADDR_VAR 0 10
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_VAR 0 6
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 30
7435: PUSH
7436: LD_INT 34
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: ST_TO_ADDR
// if teleport then
7452: LD_VAR 0 10
7456: IFFALSE 7477
// TeleportExit ( teleport [ 1 ] , 123 , 122 ) ;
7458: LD_VAR 0 10
7462: PUSH
7463: LD_INT 1
7465: ARRAY
7466: PPUSH
7467: LD_INT 123
7469: PPUSH
7470: LD_INT 122
7472: PPUSH
7473: CALL_OW 243
// Platonov := NewCharacter ( Platonov ) ;
7477: LD_ADDR_EXP 67
7481: PUSH
7482: LD_STRING Platonov
7484: PPUSH
7485: CALL_OW 25
7489: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
7490: LD_ADDR_EXP 68
7494: PUSH
7495: LD_STRING Kovalyuk
7497: PPUSH
7498: CALL_OW 25
7502: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , ( not debug ) , 09_ ) ;
7503: LD_ADDR_EXP 70
7507: PUSH
7508: LD_STRING Yakotich
7510: PPUSH
7511: LD_EXP 1
7515: NOT
7516: PPUSH
7517: LD_STRING 09_
7519: PPUSH
7520: CALL 69058 0 3
7524: ST_TO_ADDR
// Bystrov := NewCharacter ( Bystrov ) ;
7525: LD_ADDR_EXP 69
7529: PUSH
7530: LD_STRING Bystrov
7532: PPUSH
7533: CALL_OW 25
7537: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
7538: LD_ADDR_EXP 71
7542: PUSH
7543: LD_STRING Gleb
7545: PPUSH
7546: CALL_OW 25
7550: ST_TO_ADDR
// if TestCharacters ( 03_Cornel ) then
7551: LD_STRING 03_Cornel
7553: PPUSH
7554: CALL_OW 28
7558: IFFALSE 7606
// begin Bierezov := NewCharacter ( Mikhail ) ;
7560: LD_ADDR_EXP 72
7564: PUSH
7565: LD_STRING Mikhail
7567: PPUSH
7568: CALL_OW 25
7572: ST_TO_ADDR
// PlaceUnitXYR ( Bierezov , 197 , 111 , 9 , false ) ;
7573: LD_EXP 72
7577: PPUSH
7578: LD_INT 197
7580: PPUSH
7581: LD_INT 111
7583: PPUSH
7584: LD_INT 9
7586: PPUSH
7587: LD_INT 0
7589: PPUSH
7590: CALL_OW 50
// SetClass ( Bierezov , 3 ) ;
7594: LD_EXP 72
7598: PPUSH
7599: LD_INT 3
7601: PPUSH
7602: CALL_OW 336
// end ; PlaceHumanInUnit ( Platonov , ru_depot ) ;
7606: LD_EXP 67
7610: PPUSH
7611: LD_INT 126
7613: PPUSH
7614: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , ru_fac1 ) ;
7618: LD_EXP 68
7622: PPUSH
7623: LD_INT 134
7625: PPUSH
7626: CALL_OW 52
// PlaceUnitXYR ( Yakotich , 197 , 111 , 9 , false ) ;
7630: LD_EXP 70
7634: PPUSH
7635: LD_INT 197
7637: PPUSH
7638: LD_INT 111
7640: PPUSH
7641: LD_INT 9
7643: PPUSH
7644: LD_INT 0
7646: PPUSH
7647: CALL_OW 50
// PlaceUnitXYR ( Bystrov , 197 , 111 , 9 , false ) ;
7651: LD_EXP 69
7655: PPUSH
7656: LD_INT 197
7658: PPUSH
7659: LD_INT 111
7661: PPUSH
7662: LD_INT 9
7664: PPUSH
7665: LD_INT 0
7667: PPUSH
7668: CALL_OW 50
// PlaceUnitXYR ( Gleb , 197 , 111 , 9 , false ) ;
7672: LD_EXP 71
7676: PPUSH
7677: LD_INT 197
7679: PPUSH
7680: LD_INT 111
7682: PPUSH
7683: LD_INT 9
7685: PPUSH
7686: LD_INT 0
7688: PPUSH
7689: CALL_OW 50
// tmp := PrepareBase ( ru_depot , russianBaseArea , zhukov , [ 9 , 10 , 10 , 10 ] [ Difficulty ] , [ 90000 , 1000 , 300 ] , [ 18 , 8 , 13 , 8 ] ) ;
7693: LD_ADDR_VAR 0 5
7697: PUSH
7698: LD_INT 126
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: LD_STRING zhukov
7706: PPUSH
7707: LD_INT 9
7709: PUSH
7710: LD_INT 10
7712: PUSH
7713: LD_INT 10
7715: PUSH
7716: LD_INT 10
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_OWVAR 67
7729: ARRAY
7730: PPUSH
7731: LD_INT 90000
7733: PUSH
7734: LD_INT 1000
7736: PUSH
7737: LD_INT 300
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: PPUSH
7745: LD_INT 18
7747: PUSH
7748: LD_INT 8
7750: PUSH
7751: LD_INT 13
7753: PUSH
7754: LD_INT 8
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PPUSH
7763: CALL 77351 0 6
7767: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp union [ Yakotich , Bystrov , Gleb , Bierezov ] ) ;
7768: LD_ADDR_EXP 101
7772: PUSH
7773: LD_EXP 101
7777: PPUSH
7778: LD_INT 2
7780: PPUSH
7781: LD_VAR 0 5
7785: PUSH
7786: LD_EXP 70
7790: PUSH
7791: LD_EXP 69
7795: PUSH
7796: LD_EXP 71
7800: PUSH
7801: LD_EXP 72
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: UNION
7812: PPUSH
7813: CALL_OW 1
7817: ST_TO_ADDR
// base := GetBase ( ru_depot2 ) ;
7818: LD_ADDR_VAR 0 4
7822: PUSH
7823: LD_INT 267
7825: PPUSH
7826: CALL_OW 274
7830: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 5000 ) ;
7831: LD_VAR 0 4
7835: PPUSH
7836: LD_INT 1
7838: PPUSH
7839: LD_INT 5000
7841: PPUSH
7842: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: LD_INT 200
7856: PPUSH
7857: CALL_OW 277
// SetResourceType ( base , mat_siberit , 200 ) ;
7861: LD_VAR 0 4
7865: PPUSH
7866: LD_INT 3
7868: PPUSH
7869: LD_INT 200
7871: PPUSH
7872: CALL_OW 277
// for i := 1 to 6 do
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: DOUBLE
7882: LD_INT 1
7884: DEC
7885: ST_TO_ADDR
7886: LD_INT 6
7888: PUSH
7889: FOR_TO
7890: IFFALSE 7973
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
7892: LD_INT 0
7894: PPUSH
7895: LD_INT 8
7897: PUSH
7898: LD_INT 9
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: LD_INT 10
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: PUSH
7913: LD_OWVAR 67
7917: ARRAY
7918: PPUSH
7919: CALL_OW 381
// un := CreateHuman ;
7923: LD_ADDR_VAR 0 8
7927: PUSH
7928: CALL_OW 44
7932: ST_TO_ADDR
// if i mod 2 = 0 then
7933: LD_VAR 0 2
7937: PUSH
7938: LD_INT 2
7940: MOD
7941: PUSH
7942: LD_INT 0
7944: EQUAL
7945: IFFALSE 7959
// SetClass ( un , class_bazooker ) ;
7947: LD_VAR 0 8
7951: PPUSH
7952: LD_INT 9
7954: PPUSH
7955: CALL_OW 336
// PlaceHumanInUnit ( un , ru_specBar ) ;
7959: LD_VAR 0 8
7963: PPUSH
7964: LD_INT 460
7966: PPUSH
7967: CALL_OW 52
// end ;
7971: GO 7889
7973: POP
7974: POP
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_crane , 100 ) ;
7975: LD_INT 21
7977: PPUSH
7978: LD_INT 3
7980: PPUSH
7981: LD_INT 3
7983: PPUSH
7984: LD_INT 52
7986: PPUSH
7987: LD_INT 100
7989: PPUSH
7990: CALL 73898 0 5
// PlaceUnitXYD ( CreateVehicle , 259 , 145 , 3 , false ) ;
7994: CALL_OW 45
7998: PPUSH
7999: LD_INT 259
8001: PPUSH
8002: LD_INT 145
8004: PPUSH
8005: LD_INT 3
8007: PPUSH
8008: LD_INT 0
8010: PPUSH
8011: CALL 108519 0 5
// PlaceUnitXYD ( CreateVehicle , 245 , 139 , 3 , false ) ;
8015: CALL_OW 45
8019: PPUSH
8020: LD_INT 245
8022: PPUSH
8023: LD_INT 139
8025: PPUSH
8026: LD_INT 3
8028: PPUSH
8029: LD_INT 0
8031: PPUSH
8032: CALL 108519 0 5
// behemoths := [ ] ;
8036: LD_ADDR_EXP 75
8040: PUSH
8041: EMPTY
8042: ST_TO_ADDR
// behemothBuilders := [ ] ;
8043: LD_ADDR_EXP 76
8047: PUSH
8048: EMPTY
8049: ST_TO_ADDR
// if Kovalyuk then
8050: LD_EXP 68
8054: IFFALSE 8076
// behemothBuilders := Join ( behemothBuilders , Kovalyuk ) ;
8056: LD_ADDR_EXP 76
8060: PUSH
8061: LD_EXP 76
8065: PPUSH
8066: LD_EXP 68
8070: PPUSH
8071: CALL 106379 0 2
8075: ST_TO_ADDR
// j := 3 ;
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: LD_INT 3
8083: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) diff Kovalyuk do
8084: LD_ADDR_VAR 0 2
8088: PUSH
8089: LD_INT 22
8091: PUSH
8092: LD_INT 3
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 25
8101: PUSH
8102: LD_INT 3
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PPUSH
8113: CALL_OW 69
8117: PUSH
8118: LD_EXP 68
8122: DIFF
8123: PUSH
8124: FOR_IN
8125: IFFALSE 8175
// begin behemothBuilders := Join ( behemothBuilders , i ) ;
8127: LD_ADDR_EXP 76
8131: PUSH
8132: LD_EXP 76
8136: PPUSH
8137: LD_VAR 0 2
8141: PPUSH
8142: CALL 106379 0 2
8146: ST_TO_ADDR
// j := j - 1 ;
8147: LD_ADDR_VAR 0 3
8151: PUSH
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 1
8159: MINUS
8160: ST_TO_ADDR
// if j = 0 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 0
8168: EQUAL
8169: IFFALSE 8173
// break ;
8171: GO 8175
// end ;
8173: GO 8124
8175: POP
8176: POP
// end ;
8177: LD_VAR 0 1
8181: RET
// export function BuildBehemoths ; var i , j , xy , tmp ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
// xy := [ [ 209 , 149 ] , [ 219 , 154 ] , [ 223 , 149 ] , [ 232 , 155 ] ] ;
8189: LD_ADDR_VAR 0 4
8193: PUSH
8194: LD_INT 209
8196: PUSH
8197: LD_INT 149
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 219
8206: PUSH
8207: LD_INT 154
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 223
8216: PUSH
8217: LD_INT 149
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 232
8226: PUSH
8227: LD_INT 155
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: ST_TO_ADDR
// if not behemothBuilders then
8240: LD_EXP 76
8244: NOT
8245: IFFALSE 8249
// exit ;
8247: GO 8380
// j := 1 ;
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// for i in behemothBuilders do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_EXP 76
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8378
// begin if GetClass ( i ) <> class_mechanic then
8270: LD_VAR 0 2
8274: PPUSH
8275: CALL_OW 257
8279: PUSH
8280: LD_INT 3
8282: NONEQUAL
8283: IFFALSE 8297
// SetClass ( i , class_mechanic ) ;
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 3
8292: PPUSH
8293: CALL_OW 336
// if IsInUnit ( i ) then
8297: LD_VAR 0 2
8301: PPUSH
8302: CALL_OW 310
8306: IFFALSE 8317
// ComExitBuilding ( i ) ;
8308: LD_VAR 0 2
8312: PPUSH
8313: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , xy [ j ] [ 1 ] , xy [ j ] [ 2 ] , 0 ) ;
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_INT 37
8324: PPUSH
8325: LD_VAR 0 4
8329: PUSH
8330: LD_VAR 0 3
8334: ARRAY
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_VAR 0 4
8344: PUSH
8345: LD_VAR 0 3
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: ARRAY
8354: PPUSH
8355: LD_INT 0
8357: PPUSH
8358: CALL_OW 230
// j := j + 1 ;
8362: LD_ADDR_VAR 0 3
8366: PUSH
8367: LD_VAR 0 3
8371: PUSH
8372: LD_INT 1
8374: PLUS
8375: ST_TO_ADDR
// end ;
8376: GO 8267
8378: POP
8379: POP
// end ;
8380: LD_VAR 0 1
8384: RET
// every 0 0$1 trigger FilterUnitsInArea ( behemothParking , [ f_btype , b_behemoth ] ) do
8385: LD_INT 24
8387: PPUSH
8388: LD_INT 30
8390: PUSH
8391: LD_INT 37
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 70
8402: IFFALSE 8415
8404: GO 8406
8406: DISABLE
// behemothUnderConstruct := true ;
8407: LD_ADDR_EXP 26
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
8415: END
// every 0 0$3 trigger GetBehemoths ( 3 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) do var i , tmp ;
8416: LD_INT 3
8418: PPUSH
8419: CALL 106440 0 1
8423: PUSH
8424: LD_INT 22
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 30
8436: PUSH
8437: LD_INT 37
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 69
8452: NOT
8453: AND
8454: IFFALSE 8640
8456: GO 8458
8458: DISABLE
8459: LD_INT 0
8461: PPUSH
8462: PPUSH
// begin enable ;
8463: ENABLE
// tmp := GetBehemoths ( 3 ) ;
8464: LD_ADDR_VAR 0 2
8468: PUSH
8469: LD_INT 3
8471: PPUSH
8472: CALL 106440 0 1
8476: ST_TO_ADDR
// for i in tmp do
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_VAR 0 2
8486: PUSH
8487: FOR_IN
8488: IFFALSE 8638
// begin if IsInArea ( i , powellBase ) and not GetTag ( i ) = 2 then
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_INT 9
8497: PPUSH
8498: CALL_OW 308
8502: PUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 110
8512: PUSH
8513: LD_INT 2
8515: EQUAL
8516: NOT
8517: AND
8518: IFFALSE 8532
// SetTag ( i , 2 ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_INT 2
8527: PPUSH
8528: CALL_OW 109
// if not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , i , 12 ] ] ) and not GetTag ( i ) = 2 then
8532: LD_INT 81
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 91
8544: PUSH
8545: LD_VAR 0 1
8549: PUSH
8550: LD_INT 12
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 69
8566: NOT
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 110
8577: PUSH
8578: LD_INT 2
8580: EQUAL
8581: NOT
8582: AND
8583: IFFALSE 8602
// ComAgressiveMove ( i , 64 , 93 ) else
8585: LD_VAR 0 1
8589: PPUSH
8590: LD_INT 64
8592: PPUSH
8593: LD_INT 93
8595: PPUSH
8596: CALL_OW 114
8600: GO 8636
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8602: LD_VAR 0 1
8606: PPUSH
8607: LD_INT 81
8609: PUSH
8610: LD_INT 3
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 69
8621: PPUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 74
8631: PPUSH
8632: CALL_OW 115
// end ;
8636: GO 8487
8638: POP
8639: POP
// end ;
8640: PPOPN 2
8642: END
// export function PrepareRussianAttack ( strength ) ; var i , j ; begin
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
8647: PPUSH
// result := [ ] ;
8648: LD_ADDR_VAR 0 2
8652: PUSH
8653: EMPTY
8654: ST_TO_ADDR
// uc_side := 6 ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_INT 6
8662: ST_TO_ADDR
// uc_nation := 3 ;
8663: LD_ADDR_OWVAR 21
8667: PUSH
8668: LD_INT 3
8670: ST_TO_ADDR
// case strength of 1 :
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8826
8684: POP
// begin for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
8685: LD_ADDR_VAR 0 3
8689: PUSH
8690: DOUBLE
8691: LD_INT 1
8693: DEC
8694: ST_TO_ADDR
8695: LD_INT 4
8697: PUSH
8698: LD_INT 5
8700: PUSH
8701: LD_INT 6
8703: PUSH
8704: LD_INT 7
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: PUSH
8719: FOR_TO
8720: IFFALSE 8822
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked ] [ i mod 2 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] , 80 ) ;
8722: LD_INT 22
8724: PUSH
8725: LD_INT 24
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 2
8739: MOD
8740: PUSH
8741: LD_INT 1
8743: PLUS
8744: ARRAY
8745: PPUSH
8746: LD_INT 1
8748: PUSH
8749: LD_INT 3
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_INT 2
8761: PPUSH
8762: CALL_OW 12
8766: ARRAY
8767: PPUSH
8768: LD_INT 3
8770: PPUSH
8771: LD_INT 43
8773: PUSH
8774: LD_INT 44
8776: PUSH
8777: LD_INT 45
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 3
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: PPUSH
8797: LD_INT 80
8799: PPUSH
8800: CALL 73898 0 5
// result := result union CreateVehicle ;
8804: LD_ADDR_VAR 0 2
8808: PUSH
8809: LD_VAR 0 2
8813: PUSH
8814: CALL_OW 45
8818: UNION
8819: ST_TO_ADDR
// end ;
8820: GO 8719
8822: POP
8823: POP
// end ; 2 :
8824: GO 9821
8826: LD_INT 2
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 9002
8834: POP
// begin for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
8835: LD_ADDR_VAR 0 3
8839: PUSH
8840: DOUBLE
8841: LD_INT 1
8843: DEC
8844: ST_TO_ADDR
8845: LD_INT 5
8847: PUSH
8848: LD_INT 6
8850: PUSH
8851: LD_INT 7
8853: PUSH
8854: LD_INT 8
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PUSH
8863: LD_OWVAR 67
8867: ARRAY
8868: PUSH
8869: FOR_TO
8870: IFFALSE 8998
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_gun , ru_heavy_gun , ru_heavy_gun , ru_time_lapser , ru_time_lapser ] [ i mod 8 + 1 ] , 80 ) ;
8872: LD_INT 22
8874: PUSH
8875: LD_INT 24
8877: PUSH
8878: LD_INT 24
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: LD_VAR 0 3
8890: PUSH
8891: LD_INT 3
8893: MOD
8894: PUSH
8895: LD_INT 1
8897: PLUS
8898: ARRAY
8899: PPUSH
8900: LD_INT 1
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_INT 2
8915: PPUSH
8916: CALL_OW 12
8920: ARRAY
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: LD_INT 43
8927: PUSH
8928: LD_INT 44
8930: PUSH
8931: LD_INT 45
8933: PUSH
8934: LD_INT 44
8936: PUSH
8937: LD_INT 46
8939: PUSH
8940: LD_INT 46
8942: PUSH
8943: LD_INT 49
8945: PUSH
8946: LD_INT 49
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 8
8966: MOD
8967: PUSH
8968: LD_INT 1
8970: PLUS
8971: ARRAY
8972: PPUSH
8973: LD_INT 80
8975: PPUSH
8976: CALL 73898 0 5
// result := result union CreateVehicle ;
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: LD_VAR 0 2
8989: PUSH
8990: CALL_OW 45
8994: UNION
8995: ST_TO_ADDR
// end ;
8996: GO 8869
8998: POP
8999: POP
// end ; 3 :
9000: GO 9821
9002: LD_INT 3
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9182
9010: POP
// begin for i = 1 to [ 6 , 7 , 8 , 9 ] [ Difficulty ] do
9011: LD_ADDR_VAR 0 3
9015: PUSH
9016: DOUBLE
9017: LD_INT 1
9019: DEC
9020: ST_TO_ADDR
9021: LD_INT 6
9023: PUSH
9024: LD_INT 7
9026: PUSH
9027: LD_INT 8
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_OWVAR 67
9043: ARRAY
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9178
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun , ru_time_lapser , ru_time_lapser , ru_time_lapser ] [ i mod 9 + 1 ] , 80 ) ;
9048: LD_INT 22
9050: PUSH
9051: LD_INT 24
9053: PUSH
9054: LD_INT 24
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: PUSH
9062: LD_VAR 0 3
9066: PUSH
9067: LD_INT 3
9069: MOD
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: ARRAY
9075: PPUSH
9076: LD_INT 1
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 1
9088: PPUSH
9089: LD_INT 2
9091: PPUSH
9092: CALL_OW 12
9096: ARRAY
9097: PPUSH
9098: LD_INT 3
9100: PPUSH
9101: LD_INT 43
9103: PUSH
9104: LD_INT 47
9106: PUSH
9107: LD_INT 45
9109: PUSH
9110: LD_INT 45
9112: PUSH
9113: LD_INT 46
9115: PUSH
9116: LD_INT 46
9118: PUSH
9119: LD_INT 49
9121: PUSH
9122: LD_INT 49
9124: PUSH
9125: LD_INT 49
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 9
9146: MOD
9147: PUSH
9148: LD_INT 1
9150: PLUS
9151: ARRAY
9152: PPUSH
9153: LD_INT 80
9155: PPUSH
9156: CALL 73898 0 5
// result := result union CreateVehicle ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_VAR 0 2
9169: PUSH
9170: CALL_OW 45
9174: UNION
9175: ST_TO_ADDR
// end ;
9176: GO 9045
9178: POP
9179: POP
// end ; 4 :
9180: GO 9821
9182: LD_INT 4
9184: DOUBLE
9185: EQUAL
9186: IFTRUE 9190
9188: GO 9820
9190: POP
// begin uc_nation := 3 ;
9191: LD_ADDR_OWVAR 21
9195: PUSH
9196: LD_INT 3
9198: ST_TO_ADDR
// for i = 1 to [ 6 , 8 , 9 , 10 ] [ Difficulty ] do
9199: LD_ADDR_VAR 0 3
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_INT 6
9211: PUSH
9212: LD_INT 8
9214: PUSH
9215: LD_INT 9
9217: PUSH
9218: LD_INT 10
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: LD_OWVAR 67
9231: ARRAY
9232: PUSH
9233: FOR_TO
9234: IFFALSE 9366
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ ru_rocket_launcher , ru_rocket , ru_rocket , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun , ru_time_lapser , ru_time_lapser , ru_time_lapser ] [ i mod 9 + 1 ] , 80 ) ;
9236: LD_INT 22
9238: PUSH
9239: LD_INT 24
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: PUSH
9250: LD_VAR 0 3
9254: PUSH
9255: LD_INT 3
9257: MOD
9258: PUSH
9259: LD_INT 1
9261: PLUS
9262: ARRAY
9263: PPUSH
9264: LD_INT 1
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 2
9279: PPUSH
9280: CALL_OW 12
9284: ARRAY
9285: PPUSH
9286: LD_INT 3
9288: PPUSH
9289: LD_INT 45
9291: PUSH
9292: LD_INT 47
9294: PUSH
9295: LD_INT 47
9297: PUSH
9298: LD_INT 45
9300: PUSH
9301: LD_INT 46
9303: PUSH
9304: LD_INT 46
9306: PUSH
9307: LD_INT 49
9309: PUSH
9310: LD_INT 49
9312: PUSH
9313: LD_INT 49
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: PUSH
9327: LD_VAR 0 3
9331: PUSH
9332: LD_INT 9
9334: MOD
9335: PUSH
9336: LD_INT 1
9338: PLUS
9339: ARRAY
9340: PPUSH
9341: LD_INT 80
9343: PPUSH
9344: CALL 73898 0 5
// result := result union CreateVehicle ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_VAR 0 2
9357: PUSH
9358: CALL_OW 45
9362: UNION
9363: ST_TO_ADDR
// end ;
9364: GO 9233
9366: POP
9367: POP
// if not KappaStatus then
9368: LD_EXP 2
9372: NOT
9373: IFFALSE 9608
// begin uc_nation := 1 ;
9375: LD_ADDR_OWVAR 21
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// for i = 1 to 3 do
9383: LD_ADDR_VAR 0 3
9387: PUSH
9388: DOUBLE
9389: LD_INT 1
9391: DEC
9392: ST_TO_ADDR
9393: LD_INT 3
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9533
// begin j := rand ( 0 , 1 ) ;
9399: LD_ADDR_VAR 0 4
9403: PUSH
9404: LD_INT 0
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 12
9414: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling , us_morphling , us_heavy_tracked ] [ j + rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher , us_heavy_gun ] [ j + rand ( 1 , 2 ) ] , 85 ) ;
9415: LD_INT 3
9417: PUSH
9418: LD_INT 5
9420: PUSH
9421: LD_INT 5
9423: PUSH
9424: LD_INT 4
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: LD_VAR 0 4
9437: PUSH
9438: LD_INT 1
9440: PPUSH
9441: LD_INT 3
9443: PPUSH
9444: CALL_OW 12
9448: PLUS
9449: ARRAY
9450: PPUSH
9451: LD_INT 1
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_INT 2
9466: PPUSH
9467: CALL_OW 12
9471: ARRAY
9472: PPUSH
9473: LD_INT 3
9475: PPUSH
9476: LD_INT 9
9478: PUSH
9479: LD_INT 7
9481: PUSH
9482: LD_INT 6
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: PUSH
9490: LD_VAR 0 4
9494: PUSH
9495: LD_INT 1
9497: PPUSH
9498: LD_INT 2
9500: PPUSH
9501: CALL_OW 12
9505: PLUS
9506: ARRAY
9507: PPUSH
9508: LD_INT 85
9510: PPUSH
9511: CALL 73898 0 5
// result := result union CreateVehicle ;
9515: LD_ADDR_VAR 0 2
9519: PUSH
9520: LD_VAR 0 2
9524: PUSH
9525: CALL_OW 45
9529: UNION
9530: ST_TO_ADDR
// end ;
9531: GO 9396
9533: POP
9534: POP
// if vsevolodFirstAttack then
9535: LD_EXP 24
9539: IFFALSE 9606
// begin vsevolodFirstAttack := false ;
9541: LD_ADDR_EXP 24
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ) ;
9549: LD_INT 5
9551: PPUSH
9552: LD_INT 3
9554: PPUSH
9555: LD_INT 1
9557: PPUSH
9558: LD_INT 6
9560: PPUSH
9561: LD_INT 100
9563: PPUSH
9564: CALL 73898 0 5
// sewiVeh := CreateVehicle ;
9568: LD_ADDR_EXP 74
9572: PUSH
9573: CALL_OW 45
9577: ST_TO_ADDR
// SetMark ( sewiVeh , 1 ) ;
9578: LD_EXP 74
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 242
// result := result union sewiVeh ;
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_EXP 74
9604: UNION
9605: ST_TO_ADDR
// end ; end else
9606: GO 9818
// if vsevolodFirstAttack then
9608: LD_EXP 24
9612: IFFALSE 9818
// begin vsevolodFirstAttack := false ;
9614: LD_ADDR_EXP 24
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// uc_nation := 3 ;
9622: LD_ADDR_OWVAR 21
9626: PUSH
9627: LD_INT 3
9629: ST_TO_ADDR
// for i = 1 to 2 + Difficulty do
9630: LD_ADDR_VAR 0 3
9634: PUSH
9635: DOUBLE
9636: LD_INT 1
9638: DEC
9639: ST_TO_ADDR
9640: LD_INT 2
9642: PUSH
9643: LD_OWVAR 67
9647: PLUS
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9758
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , [ ru_rocket_launcher , ru_rocket , ru_rocket ] [ i mod 3 + 1 ] , 80 ) ;
9652: LD_INT 22
9654: PUSH
9655: LD_INT 24
9657: PUSH
9658: LD_INT 24
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_VAR 0 3
9670: PUSH
9671: LD_INT 3
9673: MOD
9674: PUSH
9675: LD_INT 1
9677: PLUS
9678: ARRAY
9679: PPUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 1
9692: PPUSH
9693: LD_INT 2
9695: PPUSH
9696: CALL_OW 12
9700: ARRAY
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: LD_INT 45
9707: PUSH
9708: LD_INT 47
9710: PUSH
9711: LD_INT 47
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 3
9726: MOD
9727: PUSH
9728: LD_INT 1
9730: PLUS
9731: ARRAY
9732: PPUSH
9733: LD_INT 80
9735: PPUSH
9736: CALL 73898 0 5
// result := result union CreateVehicle ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_VAR 0 2
9749: PUSH
9750: CALL_OW 45
9754: UNION
9755: ST_TO_ADDR
// end ;
9756: GO 9649
9758: POP
9759: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_rocket , 100 ) ;
9760: LD_INT 24
9762: PPUSH
9763: LD_INT 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 47
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: CALL 73898 0 5
// sewiVeh := CreateVehicle ;
9779: LD_ADDR_EXP 74
9783: PUSH
9784: CALL_OW 45
9788: ST_TO_ADDR
// SetMark ( sewiVeh , - 6 ) ;
9789: LD_EXP 74
9793: PPUSH
9794: LD_INT 6
9796: NEG
9797: PPUSH
9798: CALL_OW 242
// result := result union sewiVeh ;
9802: LD_ADDR_VAR 0 2
9806: PUSH
9807: LD_VAR 0 2
9811: PUSH
9812: LD_EXP 74
9816: UNION
9817: ST_TO_ADDR
// end ; end ; end ;
9818: GO 9821
9820: POP
// end ;
9821: LD_VAR 0 2
9825: RET
// every 0 0$30 trigger activeAttacks do var i , tmp , time , areas , strength , xy ;
9826: LD_EXP 16
9830: IFFALSE 10571
9832: GO 9834
9834: DISABLE
9835: LD_INT 0
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
// begin areas := [ southSpawn , southWestSpawn ] ;
9843: LD_ADDR_VAR 0 4
9847: PUSH
9848: LD_INT 11
9850: PUSH
9851: LD_INT 12
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: ST_TO_ADDR
// time := [ 5 5$30 , 4 4$50 , 4 4$40 , 4 4$30 ] [ Difficulty ] ;
9858: LD_ADDR_VAR 0 3
9862: PUSH
9863: LD_INT 11550
9865: PUSH
9866: LD_INT 10150
9868: PUSH
9869: LD_INT 9800
9871: PUSH
9872: LD_INT 9450
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_OWVAR 67
9885: ARRAY
9886: ST_TO_ADDR
// xy := [ [ 70 , 118 ] , [ 78 , 31 ] ] ;
9887: LD_ADDR_VAR 0 6
9891: PUSH
9892: LD_INT 70
9894: PUSH
9895: LD_INT 118
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 78
9904: PUSH
9905: LD_INT 31
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: ST_TO_ADDR
// repeat if missionStage = 2 then
9916: LD_EXP 15
9920: PUSH
9921: LD_INT 2
9923: EQUAL
9924: IFFALSE 9935
// wait ( 1 1$30 ) else
9926: LD_INT 3150
9928: PPUSH
9929: CALL_OW 67
9933: GO 9944
// wait ( time ) ;
9935: LD_VAR 0 3
9939: PPUSH
9940: CALL_OW 67
// if missionStage = 6 or Difficulty > 2 then
9944: LD_EXP 15
9948: PUSH
9949: LD_INT 6
9951: EQUAL
9952: PUSH
9953: LD_OWVAR 67
9957: PUSH
9958: LD_INT 2
9960: GREATER
9961: OR
9962: IFFALSE 9990
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
9964: LD_INT 51
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: LD_INT 2
9972: PPUSH
9973: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
9977: LD_INT 57
9979: PPUSH
9980: LD_INT 6
9982: PPUSH
9983: LD_INT 2
9985: PPUSH
9986: CALL_OW 322
// end ; if missionStage = 8 then
9990: LD_EXP 15
9994: PUSH
9995: LD_INT 8
9997: EQUAL
9998: IFFALSE 10026
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
10000: LD_INT 52
10002: PPUSH
10003: LD_INT 6
10005: PPUSH
10006: LD_INT 2
10008: PPUSH
10009: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
10013: LD_INT 58
10015: PPUSH
10016: LD_INT 6
10018: PPUSH
10019: LD_INT 2
10021: PPUSH
10022: CALL_OW 322
// end ; if Difficulty = 4 or missionStage = 10 then
10026: LD_OWVAR 67
10030: PUSH
10031: LD_INT 4
10033: EQUAL
10034: PUSH
10035: LD_EXP 15
10039: PUSH
10040: LD_INT 10
10042: EQUAL
10043: OR
10044: IFFALSE 10072
// begin SetTech ( tech_weap3 , 6 , state_researched ) ;
10046: LD_INT 53
10048: PPUSH
10049: LD_INT 6
10051: PPUSH
10052: LD_INT 2
10054: PPUSH
10055: CALL_OW 322
// SetTech ( tech_comp3 , 6 , state_researched ) ;
10059: LD_INT 59
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: LD_INT 2
10067: PPUSH
10068: CALL_OW 322
// end ; if activeAttacks then
10072: LD_EXP 16
10076: IFFALSE 10565
// begin if missionStage = 2 then
10078: LD_EXP 15
10082: PUSH
10083: LD_INT 2
10085: EQUAL
10086: IFFALSE 10096
// strength := 1 ;
10088: LD_ADDR_VAR 0 5
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// if missionStage > 2 then
10096: LD_EXP 15
10100: PUSH
10101: LD_INT 2
10103: GREATER
10104: IFFALSE 10114
// strength := 2 ;
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: LD_INT 2
10113: ST_TO_ADDR
// if missionStage > 6 then
10114: LD_EXP 15
10118: PUSH
10119: LD_INT 6
10121: GREATER
10122: IFFALSE 10132
// strength := 3 ;
10124: LD_ADDR_VAR 0 5
10128: PUSH
10129: LD_INT 3
10131: ST_TO_ADDR
// if missionStage > 10 then
10132: LD_EXP 15
10136: PUSH
10137: LD_INT 10
10139: GREATER
10140: IFFALSE 10150
// strength := 4 ;
10142: LD_ADDR_VAR 0 5
10146: PUSH
10147: LD_INT 4
10149: ST_TO_ADDR
// tmp := PrepareRussianAttack ( strength ) ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_VAR 0 5
10159: PPUSH
10160: CALL 8643 0 1
10164: ST_TO_ADDR
// for i in tmp do
10165: LD_ADDR_VAR 0 1
10169: PUSH
10170: LD_VAR 0 2
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10434
// begin PlaceUnitArea ( i , areas [ rand ( 1 , 2 ) ] , false ) ;
10178: LD_VAR 0 1
10182: PPUSH
10183: LD_VAR 0 4
10187: PUSH
10188: LD_INT 1
10190: PPUSH
10191: LD_INT 2
10193: PPUSH
10194: CALL_OW 12
10198: ARRAY
10199: PPUSH
10200: LD_INT 0
10202: PPUSH
10203: CALL_OW 49
// if i = sewiVeh then
10207: LD_VAR 0 1
10211: PUSH
10212: LD_EXP 74
10216: EQUAL
10217: IFFALSE 10254
// begin Vsevolod = PrepareUnit ( Vsevolod , false ,  ) ;
10219: LD_ADDR_EXP 73
10223: PUSH
10224: LD_STRING Vsevolod
10226: PPUSH
10227: LD_INT 0
10229: PPUSH
10230: LD_STRING 
10232: PPUSH
10233: CALL 69058 0 3
10237: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , i ) ;
10238: LD_EXP 73
10242: PPUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 52
// end else
10252: GO 10335
// if GetControl ( i ) = control_manual then
10254: LD_VAR 0 1
10258: PPUSH
10259: CALL_OW 263
10263: PUSH
10264: LD_INT 1
10266: EQUAL
10267: IFFALSE 10335
// begin uc_side := 6 ;
10269: LD_ADDR_OWVAR 20
10273: PUSH
10274: LD_INT 6
10276: ST_TO_ADDR
// uc_nation := 3 ;
10277: LD_ADDR_OWVAR 21
10281: PUSH
10282: LD_INT 3
10284: ST_TO_ADDR
// hc_gallery :=  ;
10285: LD_ADDR_OWVAR 33
10289: PUSH
10290: LD_STRING 
10292: ST_TO_ADDR
// hc_name :=  ;
10293: LD_ADDR_OWVAR 26
10297: PUSH
10298: LD_STRING 
10300: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
10301: LD_INT 0
10303: PPUSH
10304: LD_INT 3
10306: PPUSH
10307: LD_INT 10
10309: PPUSH
10310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
10314: CALL_OW 44
10318: PPUSH
10319: LD_VAR 0 1
10323: PPUSH
10324: CALL_OW 52
// wait ( 0 0$0.3 ) ;
10328: LD_INT 10
10330: PPUSH
10331: CALL_OW 67
// end ; case rand ( 1 , 3 ) of 1 :
10335: LD_INT 1
10337: PPUSH
10338: LD_INT 3
10340: PPUSH
10341: CALL_OW 12
10345: PUSH
10346: LD_INT 1
10348: DOUBLE
10349: EQUAL
10350: IFTRUE 10354
10352: GO 10372
10354: POP
// ComMoveXY ( i , 111 , 197 ) ; 2 :
10355: LD_VAR 0 1
10359: PPUSH
10360: LD_INT 111
10362: PPUSH
10363: LD_INT 197
10365: PPUSH
10366: CALL_OW 111
10370: GO 10425
10372: LD_INT 2
10374: DOUBLE
10375: EQUAL
10376: IFTRUE 10380
10378: GO 10398
10380: POP
// ComMoveXY ( i , 91 , 165 ) ; 3 :
10381: LD_VAR 0 1
10385: PPUSH
10386: LD_INT 91
10388: PPUSH
10389: LD_INT 165
10391: PPUSH
10392: CALL_OW 111
10396: GO 10425
10398: LD_INT 3
10400: DOUBLE
10401: EQUAL
10402: IFTRUE 10406
10404: GO 10424
10406: POP
// ComMoveXY ( i , 137 , 157 ) ; end ;
10407: LD_VAR 0 1
10411: PPUSH
10412: LD_INT 137
10414: PPUSH
10415: LD_INT 157
10417: PPUSH
10418: CALL_OW 111
10422: GO 10425
10424: POP
// wait ( 0 0$2 ) ;
10425: LD_INT 70
10427: PPUSH
10428: CALL_OW 67
// end ;
10432: GO 10175
10434: POP
10435: POP
// repeat wait ( 0 0$1 ) ;
10436: LD_INT 35
10438: PPUSH
10439: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_ok ] ) do
10443: LD_ADDR_VAR 0 1
10447: PUSH
10448: LD_VAR 0 2
10452: PPUSH
10453: LD_INT 50
10455: PUSH
10456: EMPTY
10457: LIST
10458: PPUSH
10459: CALL_OW 72
10463: PUSH
10464: FOR_IN
10465: IFFALSE 10524
// AgressiveMove ( i , [ [ 108 , 153 ] , [ 105 , 149 ] , [ 85 , 131 ] , [ 64 , 105 ] ] ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 108
10474: PUSH
10475: LD_INT 153
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 105
10484: PUSH
10485: LD_INT 149
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 85
10494: PUSH
10495: LD_INT 131
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 64
10504: PUSH
10505: LD_INT 105
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PPUSH
10518: CALL 108983 0 2
10522: GO 10464
10524: POP
10525: POP
// until not UnitFilter ( tmp , [ [ f_not , [ f_weapon , ru_time_lapser ] ] , [ f_ok ] ] ) ;
10526: LD_VAR 0 2
10530: PPUSH
10531: LD_INT 3
10533: PUSH
10534: LD_INT 34
10536: PUSH
10537: LD_INT 49
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 50
10550: PUSH
10551: EMPTY
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 72
10562: NOT
10563: IFFALSE 10436
// end ; until russianDestroyed ;
10565: LD_EXP 21
10569: IFFALSE 9916
// end ;
10571: PPOPN 6
10573: END
// every 7 7$30 trigger not russianDestroyed and missionStage >= 6 do var i , tmp , target , teleport ;
10574: LD_EXP 21
10578: NOT
10579: PUSH
10580: LD_EXP 15
10584: PUSH
10585: LD_INT 6
10587: GREATEREQUAL
10588: AND
10589: IFFALSE 11528
10591: GO 10593
10593: DISABLE
10594: LD_INT 0
10596: PPUSH
10597: PPUSH
10598: PPUSH
10599: PPUSH
// begin enable ;
10600: ENABLE
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 3
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: NOT
10630: IFFALSE 10634
// exit ;
10632: GO 11528
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
10634: LD_ADDR_VAR 0 4
10638: PUSH
10639: LD_INT 22
10641: PUSH
10642: LD_INT 3
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 30
10651: PUSH
10652: LD_INT 34
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PPUSH
10663: CALL_OW 69
10667: ST_TO_ADDR
// if Prob ( 40 ) then
10668: LD_INT 40
10670: PPUSH
10671: CALL_OW 13
10675: IFFALSE 10821
// begin MC_InsertProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
10677: LD_INT 2
10679: PPUSH
10680: LD_INT 22
10682: PUSH
10683: LD_INT 3
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 49
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 22
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: LD_INT 49
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 3
10721: PUSH
10722: LD_INT 3
10724: PUSH
10725: LD_INT 49
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 24
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 3
10742: PUSH
10743: LD_INT 46
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 24
10754: PUSH
10755: LD_INT 3
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 46
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 24
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: LD_INT 3
10778: PUSH
10779: LD_INT 46
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 24
10790: PUSH
10791: LD_INT 3
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: LD_INT 46
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PPUSH
10815: CALL 62632 0 2
// end else
10819: GO 10963
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
10821: LD_INT 2
10823: PPUSH
10824: LD_INT 24
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: LD_INT 47
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 24
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: LD_INT 47
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 24
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: LD_INT 3
10868: PUSH
10869: LD_INT 47
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 24
10880: PUSH
10881: LD_INT 3
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 46
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 24
10898: PUSH
10899: LD_INT 3
10901: PUSH
10902: LD_INT 3
10904: PUSH
10905: LD_INT 46
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 24
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: LD_INT 3
10922: PUSH
10923: LD_INT 46
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 24
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: LD_INT 3
10940: PUSH
10941: LD_INT 46
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: PPUSH
10959: CALL 62632 0 2
// end ; repeat wait ( 0 0$1 ) ;
10963: LD_INT 35
10965: PPUSH
10966: CALL_OW 67
// until MC_GetVehicles ( 2 , true ) >= 7 ;
10970: LD_INT 2
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL 64050 0 2
10980: PUSH
10981: LD_INT 7
10983: GREATEREQUAL
10984: IFFALSE 10963
// wait ( 0 0$10 ) ;
10986: LD_INT 350
10988: PPUSH
10989: CALL_OW 67
// tmp := MC_GetVehicles ( 2 , true ) ;
10993: LD_ADDR_VAR 0 2
10997: PUSH
10998: LD_INT 2
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL 64050 0 2
11008: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 2 , mc_vehicles [ 2 ] diff tmp ) ;
11009: LD_ADDR_EXP 120
11013: PUSH
11014: LD_EXP 120
11018: PPUSH
11019: LD_INT 2
11021: PPUSH
11022: LD_EXP 120
11026: PUSH
11027: LD_INT 2
11029: ARRAY
11030: PUSH
11031: LD_VAR 0 2
11035: DIFF
11036: PPUSH
11037: CALL_OW 1
11041: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_INT 0
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 12
11057: ST_TO_ADDR
// if target then
11058: LD_VAR 0 3
11062: IFFALSE 11190
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
11064: LD_ADDR_VAR 0 2
11068: PUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_INT 24
11076: PUSH
11077: LD_INT 250
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 72
11088: ST_TO_ADDR
// for i in tmp do
11089: LD_ADDR_VAR 0 1
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11140
// if GetDistUnitXY ( i , 139 , 89 ) > 9 then
11102: LD_VAR 0 1
11106: PPUSH
11107: LD_INT 139
11109: PPUSH
11110: LD_INT 89
11112: PPUSH
11113: CALL_OW 297
11117: PUSH
11118: LD_INT 9
11120: GREATER
11121: IFFALSE 11138
// ComMoveXY ( i , 139 , 89 ) ;
11123: LD_VAR 0 1
11127: PPUSH
11128: LD_INT 139
11130: PPUSH
11131: LD_INT 89
11133: PPUSH
11134: CALL_OW 111
11138: GO 11099
11140: POP
11141: POP
// wait ( 0 0$1 ) ;
11142: LD_INT 35
11144: PPUSH
11145: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 139 , 89 , 9 ] ) >= ( tmp - 1 ) ;
11149: LD_VAR 0 2
11153: PPUSH
11154: LD_INT 92
11156: PUSH
11157: LD_INT 139
11159: PUSH
11160: LD_INT 89
11162: PUSH
11163: LD_INT 9
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 72
11176: PUSH
11177: LD_VAR 0 2
11181: PUSH
11182: LD_INT 1
11184: MINUS
11185: GREATEREQUAL
11186: IFFALSE 11064
// end else
11188: GO 11332
// begin ComEnterUnit ( tmp , teleport [ 1 ] ) ;
11190: LD_VAR 0 2
11194: PPUSH
11195: LD_VAR 0 4
11199: PUSH
11200: LD_INT 1
11202: ARRAY
11203: PPUSH
11204: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
11208: LD_ADDR_VAR 0 2
11212: PUSH
11213: LD_VAR 0 2
11217: PPUSH
11218: LD_INT 24
11220: PUSH
11221: LD_INT 250
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 72
11232: ST_TO_ADDR
// for i in tmp do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_VAR 0 2
11242: PUSH
11243: FOR_IN
11244: IFFALSE 11284
// if GetDistUnitXY ( i , 124 , 139 ) > 9 then
11246: LD_VAR 0 1
11250: PPUSH
11251: LD_INT 124
11253: PPUSH
11254: LD_INT 139
11256: PPUSH
11257: CALL_OW 297
11261: PUSH
11262: LD_INT 9
11264: GREATER
11265: IFFALSE 11282
// ComMoveXY ( i , 124 , 139 ) ;
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_INT 124
11274: PPUSH
11275: LD_INT 139
11277: PPUSH
11278: CALL_OW 111
11282: GO 11243
11284: POP
11285: POP
// wait ( 0 0$1 ) ;
11286: LD_INT 35
11288: PPUSH
11289: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 124 , 139 , 9 ] ) >= ( tmp - 1 ) ;
11293: LD_VAR 0 2
11297: PPUSH
11298: LD_INT 92
11300: PUSH
11301: LD_INT 124
11303: PUSH
11304: LD_INT 139
11306: PUSH
11307: LD_INT 9
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: PPUSH
11316: CALL_OW 72
11320: PUSH
11321: LD_VAR 0 2
11325: PUSH
11326: LD_INT 1
11328: MINUS
11329: GREATEREQUAL
11330: IFFALSE 11208
// end ; repeat wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// for i in tmp do
11339: LD_ADDR_VAR 0 1
11343: PUSH
11344: LD_VAR 0 2
11348: PUSH
11349: FOR_IN
11350: IFFALSE 11519
// begin if GetLives ( i ) > 251 then
11352: LD_VAR 0 1
11356: PPUSH
11357: CALL_OW 256
11361: PUSH
11362: LD_INT 251
11364: GREATER
11365: IFFALSE 11490
// begin if GetWeapon ( i ) = ru_time_lapser then
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 264
11376: PUSH
11377: LD_INT 49
11379: EQUAL
11380: IFFALSE 11436
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) else
11382: LD_VAR 0 1
11386: PPUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 22
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_INT 8
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PPUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 74
11429: PPUSH
11430: CALL_OW 112
11434: GO 11488
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 8 ] ] ) , i ) ) ;
11436: LD_VAR 0 1
11440: PPUSH
11441: LD_INT 2
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 22
11456: PUSH
11457: LD_INT 8
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: PPUSH
11469: CALL_OW 69
11473: PPUSH
11474: LD_VAR 0 1
11478: PPUSH
11479: CALL_OW 74
11483: PPUSH
11484: CALL_OW 115
// end else
11488: GO 11517
// if IsDead ( i ) then
11490: LD_VAR 0 1
11494: PPUSH
11495: CALL_OW 301
11499: IFFALSE 11517
// tmp := tmp diff i ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 2
11510: PUSH
11511: LD_VAR 0 1
11515: DIFF
11516: ST_TO_ADDR
// end ;
11517: GO 11349
11519: POP
11520: POP
// until not tmp ;
11521: LD_VAR 0 2
11525: NOT
11526: IFFALSE 11332
// end ;
11528: PPOPN 4
11530: END
// export ruMobile ; every 0 0$01 trigger missionStage >= 7 and Difficulty > 1 do var i , veh , un ;
11531: LD_EXP 15
11535: PUSH
11536: LD_INT 7
11538: GREATEREQUAL
11539: PUSH
11540: LD_OWVAR 67
11544: PUSH
11545: LD_INT 1
11547: GREATER
11548: AND
11549: IFFALSE 11841
11551: GO 11553
11553: DISABLE
11554: LD_INT 0
11556: PPUSH
11557: PPUSH
11558: PPUSH
// begin ruMobile := [ ] ;
11559: LD_ADDR_EXP 77
11563: PUSH
11564: EMPTY
11565: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty - 1 ] do
11566: LD_ADDR_VAR 0 1
11570: PUSH
11571: DOUBLE
11572: LD_INT 1
11574: DEC
11575: ST_TO_ADDR
11576: LD_INT 4
11578: PUSH
11579: LD_INT 5
11581: PUSH
11582: LD_INT 6
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: LD_OWVAR 67
11594: PUSH
11595: LD_INT 1
11597: MINUS
11598: ARRAY
11599: PUSH
11600: FOR_TO
11601: IFFALSE 11839
// begin uc_side := 3 ;
11603: LD_ADDR_OWVAR 20
11607: PUSH
11608: LD_INT 3
11610: ST_TO_ADDR
// uc_nation := 1 ;
11611: LD_ADDR_OWVAR 21
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , [ us_laser , us_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
11619: LD_INT 5
11621: PPUSH
11622: LD_INT 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: LD_INT 9
11630: PUSH
11631: LD_INT 7
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_VAR 0 1
11642: PUSH
11643: LD_INT 2
11645: MOD
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ARRAY
11651: PPUSH
11652: LD_INT 100
11654: PPUSH
11655: CALL 73898 0 5
// veh := CreateVehicle ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: CALL_OW 45
11668: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
11669: LD_VAR 0 2
11673: PPUSH
11674: LD_INT 3
11676: PPUSH
11677: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea2 , false ) ;
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 29
11688: PPUSH
11689: LD_INT 0
11691: PPUSH
11692: CALL_OW 49
// uc_nation := 3 ;
11696: LD_ADDR_OWVAR 21
11700: PUSH
11701: LD_INT 3
11703: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
11704: LD_INT 0
11706: PPUSH
11707: LD_INT 10
11709: PPUSH
11710: CALL_OW 383
// un := CreateHuman ;
11714: LD_ADDR_VAR 0 3
11718: PUSH
11719: CALL_OW 44
11723: ST_TO_ADDR
// SetTag ( un , 105 ) ;
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_INT 105
11731: PPUSH
11732: CALL_OW 109
// if GetSkill ( un , skill_mechanical ) < [ 8 , 9 , 10 ] [ Difficulty ] then
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 3
11743: PPUSH
11744: CALL_OW 259
11748: PUSH
11749: LD_INT 8
11751: PUSH
11752: LD_INT 9
11754: PUSH
11755: LD_INT 10
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_OWVAR 67
11767: ARRAY
11768: LESS
11769: IFFALSE 11803
// SetSkill ( un , skill_mechanical , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 3
11778: PPUSH
11779: LD_INT 8
11781: PUSH
11782: LD_INT 9
11784: PUSH
11785: LD_INT 10
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_OWVAR 67
11797: ARRAY
11798: PPUSH
11799: CALL_OW 237
// PlaceHumanInUnit ( un , veh ) ;
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: CALL_OW 52
// ruMobile := Join ( ruMobile , veh ) ;
11817: LD_ADDR_EXP 77
11821: PUSH
11822: LD_EXP 77
11826: PPUSH
11827: LD_VAR 0 2
11831: PPUSH
11832: CALL 106379 0 2
11836: ST_TO_ADDR
// end ;
11837: GO 11600
11839: POP
11840: POP
// end ;
11841: PPOPN 3
11843: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
11844: LD_EXP 77
11848: IFFALSE 12357
11850: GO 11852
11852: DISABLE
11853: LD_INT 0
11855: PPUSH
11856: PPUSH
11857: PPUSH
// begin enable ;
11858: ENABLE
// if not ruMobile then
11859: LD_EXP 77
11863: NOT
11864: IFFALSE 11869
// begin disable ;
11866: DISABLE
// exit ;
11867: GO 12357
// end ; for i in ruMobile do
11869: LD_ADDR_VAR 0 1
11873: PUSH
11874: LD_EXP 77
11878: PUSH
11879: FOR_IN
11880: IFFALSE 12355
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 302
11891: NOT
11892: PUSH
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL_OW 255
11902: PUSH
11903: LD_INT 3
11905: NONEQUAL
11906: OR
11907: IFFALSE 11927
// begin ruMobile := ruMobile diff i ;
11909: LD_ADDR_EXP 77
11913: PUSH
11914: LD_EXP 77
11918: PUSH
11919: LD_VAR 0 1
11923: DIFF
11924: ST_TO_ADDR
// continue ;
11925: GO 11879
// end ; if GetTag ( i ) = 300 then
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 110
11936: PUSH
11937: LD_INT 300
11939: EQUAL
11940: IFFALSE 11990
// begin ComMoveXY ( i , 160 , 81 ) ;
11942: LD_VAR 0 1
11946: PPUSH
11947: LD_INT 160
11949: PPUSH
11950: LD_INT 81
11952: PPUSH
11953: CALL_OW 111
// if GetDistUnitXY ( i , 160 , 81 ) < 8 then
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 160
11964: PPUSH
11965: LD_INT 81
11967: PPUSH
11968: CALL_OW 297
11972: PUSH
11973: LD_INT 8
11975: LESS
11976: IFFALSE 11990
// SetTag ( i , 301 ) ;
11978: LD_VAR 0 1
11982: PPUSH
11983: LD_INT 301
11985: PPUSH
11986: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11990: LD_VAR 0 1
11994: PPUSH
11995: CALL_OW 110
11999: PUSH
12000: LD_INT 301
12002: EQUAL
12003: IFFALSE 12046
// begin if not IsInArea ( i , ruMobileParkingArea ) then
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_INT 33
12012: PPUSH
12013: CALL_OW 308
12017: NOT
12018: IFFALSE 12034
// ComMoveToArea ( i , ruMobileParkingArea ) else
12020: LD_VAR 0 1
12024: PPUSH
12025: LD_INT 33
12027: PPUSH
12028: CALL_OW 113
12032: GO 12046
// SetTag ( i , 302 ) ;
12034: LD_VAR 0 1
12038: PPUSH
12039: LD_INT 302
12041: PPUSH
12042: CALL_OW 109
// end ; if GetTag ( i ) = 302 then
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 110
12055: PUSH
12056: LD_INT 302
12058: EQUAL
12059: IFFALSE 12189
// begin if GetLives ( i ) < 1000 then
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 256
12070: PUSH
12071: LD_INT 1000
12073: LESS
12074: IFFALSE 12166
// begin if not IsDrivenBy ( i ) then
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 311
12085: NOT
12086: IFFALSE 12090
// continue ;
12088: GO 11879
// mech := IsDrivenBy ( i ) ;
12090: LD_ADDR_VAR 0 2
12094: PUSH
12095: LD_VAR 0 1
12099: PPUSH
12100: CALL_OW 311
12104: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
12128: LD_INT 35
12130: PPUSH
12131: CALL_OW 67
// until GetLives ( i ) = 1000 ;
12135: LD_VAR 0 1
12139: PPUSH
12140: CALL_OW 256
12144: PUSH
12145: LD_INT 1000
12147: EQUAL
12148: IFFALSE 12128
// ComEnterUnit ( mech , i ) ;
12150: LD_VAR 0 2
12154: PPUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: CALL_OW 120
// end else
12164: GO 12189
// if IsDrivenBy ( i ) then
12166: LD_VAR 0 1
12170: PPUSH
12171: CALL_OW 311
12175: IFFALSE 12189
// SetTag ( i , 0 ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_INT 0
12184: PPUSH
12185: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
12189: LD_VAR 0 1
12193: PPUSH
12194: CALL_OW 110
12198: PUSH
12199: LD_INT 300
12201: LESS
12202: IFFALSE 12353
// begin enemy := FilterUnitsInArea ( russianBaseArea , [ f_enemy , 3 ] ) ;
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: LD_INT 4
12211: PPUSH
12212: LD_INT 81
12214: PUSH
12215: LD_INT 3
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 70
12226: ST_TO_ADDR
// if GetLives ( i ) < 650 then
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 256
12236: PUSH
12237: LD_INT 650
12239: LESS
12240: IFFALSE 12265
// begin ComStop ( i ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 141
// SetTag ( i , 300 ) ;
12251: LD_VAR 0 1
12255: PPUSH
12256: LD_INT 300
12258: PPUSH
12259: CALL_OW 109
// continue ;
12263: GO 11879
// end ; if enemy then
12265: LD_VAR 0 3
12269: IFFALSE 12309
// begin if not HasTask ( i ) then
12271: LD_VAR 0 1
12275: PPUSH
12276: CALL_OW 314
12280: NOT
12281: IFFALSE 12307
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12283: LD_VAR 0 1
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 74
12302: PPUSH
12303: CALL_OW 115
// end else
12307: GO 12353
// AgressiveMove ( i , [ [ 158 , 61 ] , [ 98 , 100 ] , [ 78 , 93 ] ] ) ;
12309: LD_VAR 0 1
12313: PPUSH
12314: LD_INT 158
12316: PUSH
12317: LD_INT 61
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 98
12326: PUSH
12327: LD_INT 100
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 78
12336: PUSH
12337: LD_INT 93
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL 108983 0 2
// end ; end ;
12353: GO 11879
12355: POP
12356: POP
// end ; end_of_file
12357: PPOPN 3
12359: END
// export Roth , Simms , Kirilenkova , Dolgov , Petrosyan , Petrovova , Kuzmov , Lipshchin , Gnyevko , Titov , Xavier , Belkov , Burlak , Karamazov , Kapitsova , Scholtze , Oblukov ; export allianceSpecialForce ; export function PrepareAlliance ; var i , tmp , base , side , teleport , b ; begin
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
12366: PPUSH
12367: PPUSH
12368: PPUSH
// side := 7 ;
12369: LD_ADDR_VAR 0 5
12373: PUSH
12374: LD_INT 7
12376: ST_TO_ADDR
// uc_side := side ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_VAR 0 5
12386: ST_TO_ADDR
// uc_nation := 1 ;
12387: LD_ADDR_OWVAR 21
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
12395: LD_ADDR_VAR 0 2
12399: PUSH
12400: LD_INT 22
12402: PUSH
12403: LD_VAR 0 5
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 3
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: PUSH
12431: FOR_IN
12432: IFFALSE 12448
// SetBLevel ( i , 10 ) ;
12434: LD_VAR 0 2
12438: PPUSH
12439: LD_INT 10
12441: PPUSH
12442: CALL_OW 241
12446: GO 12431
12448: POP
12449: POP
// base := GetBase ( al_depot ) ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_INT 2
12457: PPUSH
12458: CALL_OW 274
12462: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_teleport ] ] ) ;
12463: LD_ADDR_VAR 0 6
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_VAR 0 5
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 34
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if teleport then
12499: LD_VAR 0 6
12503: IFFALSE 12524
// TeleportExit ( teleport [ 1 ] , 262 , 119 ) ;
12505: LD_VAR 0 6
12509: PUSH
12510: LD_INT 1
12512: ARRAY
12513: PPUSH
12514: LD_INT 262
12516: PPUSH
12517: LD_INT 119
12519: PPUSH
12520: CALL_OW 243
// SetResourceType ( base , mat_cans , 19500 ) ;
12524: LD_VAR 0 4
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: LD_INT 19500
12534: PPUSH
12535: CALL_OW 277
// SetResourceType ( base , mat_oil , 200 ) ;
12539: LD_VAR 0 4
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: LD_INT 200
12549: PPUSH
12550: CALL_OW 277
// SetResourceType ( base , mat_siberit , 650 ) ;
12554: LD_VAR 0 4
12558: PPUSH
12559: LD_INT 3
12561: PPUSH
12562: LD_INT 650
12564: PPUSH
12565: CALL_OW 277
// Roth := NewCharacter ( Roth ) ;
12569: LD_ADDR_EXP 78
12573: PUSH
12574: LD_STRING Roth
12576: PPUSH
12577: CALL_OW 25
12581: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
12582: LD_ADDR_EXP 79
12586: PUSH
12587: LD_STRING Simms
12589: PPUSH
12590: LD_EXP 1
12594: NOT
12595: PPUSH
12596: LD_STRING 10c_
12598: PPUSH
12599: CALL 69058 0 3
12603: ST_TO_ADDR
// SetClass ( Simms , class_scientistic ) ;
12604: LD_EXP 79
12608: PPUSH
12609: LD_INT 4
12611: PPUSH
12612: CALL_OW 336
// if not Simms then
12616: LD_EXP 79
12620: NOT
12621: IFFALSE 12651
// begin uc_nation := 1 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
12631: LD_INT 2
12633: PPUSH
12634: LD_INT 10
12636: PPUSH
12637: CALL_OW 384
// Simms := CreateHuman ;
12641: LD_ADDR_EXP 79
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// end ; uc_nation := 3 ;
12651: LD_ADDR_OWVAR 21
12655: PUSH
12656: LD_INT 3
12658: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
12659: LD_ADDR_EXP 80
12663: PUSH
12664: LD_STRING Kirilenkova
12666: PPUSH
12667: CALL_OW 25
12671: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
12672: LD_ADDR_EXP 94
12676: PUSH
12677: LD_STRING Oblukov
12679: PPUSH
12680: CALL_OW 25
12684: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
12685: LD_ADDR_EXP 81
12689: PUSH
12690: LD_STRING Dolgov
12692: PPUSH
12693: CALL_OW 25
12697: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
12698: LD_ADDR_EXP 82
12702: PUSH
12703: LD_STRING Petrosyan
12705: PPUSH
12706: CALL_OW 25
12710: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
12711: LD_ADDR_EXP 93
12715: PUSH
12716: LD_STRING Scholtze
12718: PPUSH
12719: CALL_OW 25
12723: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
12724: LD_ADDR_EXP 92
12728: PUSH
12729: LD_STRING Kapitsova
12731: PPUSH
12732: CALL_OW 25
12736: ST_TO_ADDR
// Petrovova := NewCharacter ( Petrovova ) ;
12737: LD_ADDR_EXP 83
12741: PUSH
12742: LD_STRING Petrovova
12744: PPUSH
12745: CALL_OW 25
12749: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
12750: LD_ADDR_EXP 84
12754: PUSH
12755: LD_STRING Kuzmov
12757: PPUSH
12758: CALL_OW 25
12762: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
12763: LD_ADDR_EXP 91
12767: PUSH
12768: LD_STRING Karamazov
12770: PPUSH
12771: CALL_OW 25
12775: ST_TO_ADDR
// if LoadVariable ( 13_Lipshchin_1 , 0 ) then
12776: LD_STRING 13_Lipshchin_1
12778: PPUSH
12779: LD_INT 0
12781: PPUSH
12782: CALL_OW 30
12786: IFFALSE 12801
// Lipshchin := NewCharacter ( Lipshchin ) ;
12788: LD_ADDR_EXP 85
12792: PUSH
12793: LD_STRING Lipshchin
12795: PPUSH
12796: CALL_OW 25
12800: ST_TO_ADDR
// if LoadVariable ( 13_Titov_1 , 0 ) then
12801: LD_STRING 13_Titov_1
12803: PPUSH
12804: LD_INT 0
12806: PPUSH
12807: CALL_OW 30
12811: IFFALSE 12826
// Titov := NewCharacter ( Titov ) ;
12813: LD_ADDR_EXP 87
12817: PUSH
12818: LD_STRING Titov
12820: PPUSH
12821: CALL_OW 25
12825: ST_TO_ADDR
// if LoadVariable ( 13_Gnyevko_1 , 0 ) then
12826: LD_STRING 13_Gnyevko_1
12828: PPUSH
12829: LD_INT 0
12831: PPUSH
12832: CALL_OW 30
12836: IFFALSE 12851
// Gnyevko := NewCharacter ( Gnyevko ) ;
12838: LD_ADDR_EXP 86
12842: PUSH
12843: LD_STRING Gnyevko
12845: PPUSH
12846: CALL_OW 25
12850: ST_TO_ADDR
// if LoadVariable ( 13_Xavier_1 , 0 ) then
12851: LD_STRING 13_Xavier_1
12853: PPUSH
12854: LD_INT 0
12856: PPUSH
12857: CALL_OW 30
12861: IFFALSE 12876
// Xavier := NewCharacter ( Xavier2 ) ;
12863: LD_ADDR_EXP 88
12867: PUSH
12868: LD_STRING Xavier2
12870: PPUSH
12871: CALL_OW 25
12875: ST_TO_ADDR
// if LoadVariable ( 13_Belkov_1 , 0 ) then
12876: LD_STRING 13_Belkov_1
12878: PPUSH
12879: LD_INT 0
12881: PPUSH
12882: CALL_OW 30
12886: IFFALSE 12901
// Belkov := NewCharacter ( Belkov ) ;
12888: LD_ADDR_EXP 89
12892: PUSH
12893: LD_STRING Belkov
12895: PPUSH
12896: CALL_OW 25
12900: ST_TO_ADDR
// if not BurlakStatus then
12901: LD_EXP 9
12905: NOT
12906: IFFALSE 12921
// Burlak = NewCharacter ( Burlak ) ;
12908: LD_ADDR_EXP 90
12912: PUSH
12913: LD_STRING Burlak
12915: PPUSH
12916: CALL_OW 25
12920: ST_TO_ADDR
// tmp := [ Roth , Kirilenkova , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova , Petrovova , Kuzmov , Karamazov ] ;
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_EXP 78
12930: PUSH
12931: LD_EXP 80
12935: PUSH
12936: LD_EXP 94
12940: PUSH
12941: LD_EXP 81
12945: PUSH
12946: LD_EXP 82
12950: PUSH
12951: LD_EXP 93
12955: PUSH
12956: LD_EXP 92
12960: PUSH
12961: LD_EXP 83
12965: PUSH
12966: LD_EXP 84
12970: PUSH
12971: LD_EXP 91
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: ST_TO_ADDR
// if Simms then
12988: LD_EXP 79
12992: IFFALSE 13010
// tmp := tmp ^ Simms ;
12994: LD_ADDR_VAR 0 3
12998: PUSH
12999: LD_VAR 0 3
13003: PUSH
13004: LD_EXP 79
13008: ADD
13009: ST_TO_ADDR
// if Titov then
13010: LD_EXP 87
13014: IFFALSE 13032
// tmp := tmp ^ Titov ;
13016: LD_ADDR_VAR 0 3
13020: PUSH
13021: LD_VAR 0 3
13025: PUSH
13026: LD_EXP 87
13030: ADD
13031: ST_TO_ADDR
// if Lipshchin then
13032: LD_EXP 85
13036: IFFALSE 13054
// tmp := tmp ^ Lipshchin ;
13038: LD_ADDR_VAR 0 3
13042: PUSH
13043: LD_VAR 0 3
13047: PUSH
13048: LD_EXP 85
13052: ADD
13053: ST_TO_ADDR
// if Gnyevko then
13054: LD_EXP 86
13058: IFFALSE 13076
// tmp := tmp ^ Gnyevko ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_EXP 86
13074: ADD
13075: ST_TO_ADDR
// if Xavier then
13076: LD_EXP 88
13080: IFFALSE 13098
// tmp := tmp ^ Xavier ;
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: LD_VAR 0 3
13091: PUSH
13092: LD_EXP 88
13096: ADD
13097: ST_TO_ADDR
// if Belkov then
13098: LD_EXP 89
13102: IFFALSE 13120
// tmp := tmp ^ Belkov ;
13104: LD_ADDR_VAR 0 3
13108: PUSH
13109: LD_VAR 0 3
13113: PUSH
13114: LD_EXP 89
13118: ADD
13119: ST_TO_ADDR
// if Burlak then
13120: LD_EXP 90
13124: IFFALSE 13142
// tmp := tmp ^ Burlak ;
13126: LD_ADDR_VAR 0 3
13130: PUSH
13131: LD_VAR 0 3
13135: PUSH
13136: LD_EXP 90
13140: ADD
13141: ST_TO_ADDR
// for i = 1 to 11 do
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: DOUBLE
13148: LD_INT 1
13150: DEC
13151: ST_TO_ADDR
13152: LD_INT 11
13154: PUSH
13155: FOR_TO
13156: IFFALSE 13224
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
13158: LD_ADDR_OWVAR 21
13162: PUSH
13163: LD_INT 1
13165: PUSH
13166: LD_INT 3
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 12
13183: ARRAY
13184: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 10 ) ;
13185: LD_INT 0
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_INT 4
13193: PPUSH
13194: CALL_OW 12
13198: PPUSH
13199: LD_INT 10
13201: PPUSH
13202: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_VAR 0 3
13215: PUSH
13216: CALL_OW 44
13220: ADD
13221: ST_TO_ADDR
// end ;
13222: GO 13155
13224: POP
13225: POP
// for i in tmp do
13226: LD_ADDR_VAR 0 2
13230: PUSH
13231: LD_VAR 0 3
13235: PUSH
13236: FOR_IN
13237: IFFALSE 13262
// PlaceUnitXYR ( i , 260 , 235 , 8 , false ) ;
13239: LD_VAR 0 2
13243: PPUSH
13244: LD_INT 260
13246: PPUSH
13247: LD_INT 235
13249: PPUSH
13250: LD_INT 8
13252: PPUSH
13253: LD_INT 0
13255: PPUSH
13256: CALL_OW 50
13260: GO 13236
13262: POP
13263: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff [ Roth , Simms ] ) ;
13264: LD_ADDR_EXP 101
13268: PUSH
13269: LD_EXP 101
13273: PPUSH
13274: LD_INT 1
13276: PPUSH
13277: LD_INT 22
13279: PUSH
13280: LD_VAR 0 5
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 3
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: PUSH
13315: LD_EXP 78
13319: PUSH
13320: LD_EXP 79
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: DIFF
13329: PPUSH
13330: CALL_OW 1
13334: ST_TO_ADDR
// uc_side := 0 ;
13335: LD_ADDR_OWVAR 20
13339: PUSH
13340: LD_INT 0
13342: ST_TO_ADDR
// uc_nation := 0 ;
13343: LD_ADDR_OWVAR 21
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// for i = 1 to 5 do
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: DOUBLE
13357: LD_INT 1
13359: DEC
13360: ST_TO_ADDR
13361: LD_INT 5
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13402
// begin InitHc ;
13367: CALL_OW 19
// hc_class := class_apeman ;
13371: LD_ADDR_OWVAR 28
13375: PUSH
13376: LD_INT 12
13378: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 299 , 229 , 10 , false ) ;
13379: CALL_OW 44
13383: PPUSH
13384: LD_INT 299
13386: PPUSH
13387: LD_INT 229
13389: PPUSH
13390: LD_INT 10
13392: PPUSH
13393: LD_INT 0
13395: PPUSH
13396: CALL_OW 50
// end ;
13400: GO 13364
13402: POP
13403: POP
// ComMoveXY ( Roth , 259 , 235 ) ;
13404: LD_EXP 78
13408: PPUSH
13409: LD_INT 259
13411: PPUSH
13412: LD_INT 235
13414: PPUSH
13415: CALL_OW 111
// AddComTurnXY ( Roth , 262 , 235 ) ;
13419: LD_EXP 78
13423: PPUSH
13424: LD_INT 262
13426: PPUSH
13427: LD_INT 235
13429: PPUSH
13430: CALL_OW 178
// if Simms then
13434: LD_EXP 79
13438: IFFALSE 13469
// begin ComMoveXY ( Simms , 262 , 235 ) ;
13440: LD_EXP 79
13444: PPUSH
13445: LD_INT 262
13447: PPUSH
13448: LD_INT 235
13450: PPUSH
13451: CALL_OW 111
// AddComTurnUnit ( Simms , Roth ) ;
13455: LD_EXP 79
13459: PPUSH
13460: LD_EXP 78
13464: PPUSH
13465: CALL_OW 179
// end ; uc_side := 7 ;
13469: LD_ADDR_OWVAR 20
13473: PUSH
13474: LD_INT 7
13476: ST_TO_ADDR
// uc_nation := 1 ;
13477: LD_ADDR_OWVAR 21
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// bc_type := b_control_tower ;
13485: LD_ADDR_OWVAR 42
13489: PUSH
13490: LD_INT 36
13492: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 268 , 251 , 4 ) ;
13493: LD_ADDR_VAR 0 7
13497: PUSH
13498: LD_INT 268
13500: PPUSH
13501: LD_INT 251
13503: PPUSH
13504: LD_INT 4
13506: PPUSH
13507: CALL_OW 47
13511: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
13512: LD_INT 0
13514: PPUSH
13515: LD_INT 10
13517: PPUSH
13518: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , b ) ;
13522: CALL_OW 44
13526: PPUSH
13527: LD_VAR 0 7
13531: PPUSH
13532: CALL_OW 52
// end ;
13536: LD_VAR 0 1
13540: RET
// every 9 9$00 trigger allianceActive and not allianceDestroyed do var i , tmp , target ;
13541: LD_EXP 31
13545: PUSH
13546: LD_EXP 23
13550: NOT
13551: AND
13552: IFFALSE 13780
13554: GO 13556
13556: DISABLE
13557: LD_INT 0
13559: PPUSH
13560: PPUSH
13561: PPUSH
// begin enable ;
13562: ENABLE
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_weapon , us_siberium_rocket ] ] ] ) ;
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 81
13570: PUSH
13571: LD_INT 7
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 32
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: LD_INT 30
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_INT 28
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 34
13613: PUSH
13614: LD_INT 49
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 34
13623: PUSH
13624: LD_INT 10
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 34
13633: PUSH
13634: LD_INT 8
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: ST_TO_ADDR
// if not tmp then
13659: LD_VAR 0 2
13663: NOT
13664: IFFALSE 13668
// exit ;
13666: GO 13780
// if UnitFilter ( tmp , [ f_weapon , us_siberium_rocket ] ) then
13668: LD_VAR 0 2
13672: PPUSH
13673: LD_INT 34
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 72
13687: IFFALSE 13720
// target := UnitFilter ( tmp , [ f_weapon , us_siberium_rocket ] ) [ 1 ] else
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: LD_VAR 0 2
13698: PPUSH
13699: LD_INT 34
13701: PUSH
13702: LD_INT 8
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
13718: GO 13744
// target := tmp [ rand ( 1 , tmp ) ] ;
13720: LD_ADDR_VAR 0 3
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_INT 1
13732: PPUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: CALL_OW 12
13742: ARRAY
13743: ST_TO_ADDR
// if GetSide ( target ) = 1 then
13744: LD_VAR 0 3
13748: PPUSH
13749: CALL_OW 255
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: IFFALSE 13768
// CenterNowOnUnits ( target ) ;
13759: LD_VAR 0 3
13763: PPUSH
13764: CALL_OW 87
// SetLives ( target , 0 ) ;
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
// end ;
13780: PPOPN 3
13782: END
// every 0 0$2 trigger not allianceDestroyed and allianceActive do var i , un , tmp ;
13783: LD_EXP 23
13787: NOT
13788: PUSH
13789: LD_EXP 31
13793: AND
13794: IFFALSE 14310
13796: GO 13798
13798: DISABLE
13799: LD_INT 0
13801: PPUSH
13802: PPUSH
13803: PPUSH
// begin uc_side := 7 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 7
13811: ST_TO_ADDR
// uc_nation := 1 ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 1
13819: ST_TO_ADDR
// tmp := Shuffle ( [ [ 125 , 163 ] , [ 185 , 168 ] , [ 111 , 97 ] , [ 94 , 114 ] ] ) ;
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_INT 125
13827: PUSH
13828: LD_INT 163
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 185
13837: PUSH
13838: LD_INT 168
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 111
13847: PUSH
13848: LD_INT 97
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 94
13857: PUSH
13858: LD_INT 114
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL 106484 0 1
13875: ST_TO_ADDR
// allianceSpecialForce := [ ] ;
13876: LD_ADDR_EXP 95
13880: PUSH
13881: EMPTY
13882: ST_TO_ADDR
// for i = 1 to Difficulty do
13883: LD_ADDR_VAR 0 1
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_OWVAR 67
13897: PUSH
13898: FOR_TO
13899: IFFALSE 14057
// begin InitHc ;
13901: CALL_OW 19
// PrepareSoldier ( false , 8 ) ;
13905: LD_INT 0
13907: PPUSH
13908: LD_INT 8
13910: PPUSH
13911: CALL_OW 381
// un := CreateHuman ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: CALL_OW 44
13924: ST_TO_ADDR
// PlaceUnitXYR ( un , 258 , 267 , 4 , false ) ;
13925: LD_VAR 0 2
13929: PPUSH
13930: LD_INT 258
13932: PPUSH
13933: LD_INT 267
13935: PPUSH
13936: LD_INT 4
13938: PPUSH
13939: LD_INT 0
13941: PPUSH
13942: CALL_OW 50
// allianceSpecialForce := allianceSpecialForce union un ;
13946: LD_ADDR_EXP 95
13950: PUSH
13951: LD_EXP 95
13955: PUSH
13956: LD_VAR 0 2
13960: UNION
13961: ST_TO_ADDR
// TeleportUnit ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 4 , true ) ;
13962: LD_VAR 0 2
13966: PPUSH
13967: LD_VAR 0 3
13971: PUSH
13972: LD_VAR 0 1
13976: ARRAY
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: LD_VAR 0 3
13986: PUSH
13987: LD_VAR 0 1
13991: ARRAY
13992: PUSH
13993: LD_INT 2
13995: ARRAY
13996: PPUSH
13997: LD_INT 4
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 483
// AddComMoveXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
14007: LD_VAR 0 2
14011: PPUSH
14012: LD_VAR 0 3
14016: PUSH
14017: LD_VAR 0 1
14021: ARRAY
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: LD_VAR 0 3
14031: PUSH
14032: LD_VAR 0 1
14036: ARRAY
14037: PUSH
14038: LD_INT 2
14040: ARRAY
14041: PPUSH
14042: CALL_OW 171
// AddComInvisible ( un ) ;
14046: LD_VAR 0 2
14050: PPUSH
14051: CALL_OW 212
// end ;
14055: GO 13898
14057: POP
14058: POP
// repeat wait ( 0 0$45 ) ;
14059: LD_INT 1575
14061: PPUSH
14062: CALL_OW 67
// for i in allianceSpecialForce do
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: LD_EXP 95
14075: PUSH
14076: FOR_IN
14077: IFFALSE 14295
// begin if IsInvisible ( i ) then
14079: LD_VAR 0 1
14083: PPUSH
14084: CALL_OW 571
14088: IFFALSE 14264
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_outside ] , [ f_dist , i , 25 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ;
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 1
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 50
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: LD_INT 56
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: LD_INT 91
14119: PUSH
14120: LD_VAR 0 1
14124: PUSH
14125: LD_INT 25
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 1
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 2
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 25
14158: PUSH
14159: LD_INT 3
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 4
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 25
14178: PUSH
14179: LD_INT 5
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 25
14188: PUSH
14189: LD_INT 8
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: ST_TO_ADDR
// if not tmp then
14217: LD_VAR 0 3
14221: NOT
14222: IFFALSE 14226
// continue ;
14224: GO 14076
// if Prob ( 30 * Difficulty ) then
14226: LD_INT 30
14228: PUSH
14229: LD_OWVAR 67
14233: MUL
14234: PPUSH
14235: CALL_OW 13
14239: IFFALSE 14264
// AllianceCaptureUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
14241: LD_VAR 0 3
14245: PUSH
14246: LD_INT 1
14248: PPUSH
14249: LD_VAR 0 3
14253: PPUSH
14254: CALL_OW 12
14258: ARRAY
14259: PPUSH
14260: CALL 34227 0 1
// end ; if IsDead ( i ) then
14264: LD_VAR 0 1
14268: PPUSH
14269: CALL_OW 301
14273: IFFALSE 14293
// begin allianceSpecialForce := allianceSpecialForce diff i ;
14275: LD_ADDR_EXP 95
14279: PUSH
14280: LD_EXP 95
14284: PUSH
14285: LD_VAR 0 1
14289: DIFF
14290: ST_TO_ADDR
// continue ;
14291: GO 14076
// end ; end ;
14293: GO 14076
14295: POP
14296: POP
// until allianceDestroyed or not allianceSpecialForce ;
14297: LD_EXP 23
14301: PUSH
14302: LD_EXP 95
14306: NOT
14307: OR
14308: IFFALSE 14059
// end ;
14310: PPOPN 3
14312: END
// every 0 0$30 trigger allianceActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_bweapon , us_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ] ) do var i , un , tmp , e ;
14313: LD_EXP 31
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_INT 1
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: LD_INT 35
14333: PUSH
14334: LD_INT 8
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 34
14343: PUSH
14344: LD_INT 8
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: AND
14365: IFFALSE 14765
14367: GO 14369
14369: DISABLE
14370: LD_INT 0
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
// begin for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: DOUBLE
14382: LD_INT 1
14384: DEC
14385: ST_TO_ADDR
14386: LD_INT 6
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: LD_INT 10
14394: PUSH
14395: LD_INT 12
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: PUSH
14404: LD_OWVAR 67
14408: ARRAY
14409: PUSH
14410: FOR_TO
14411: IFFALSE 14603
// begin uc_side := 7 ;
14413: LD_ADDR_OWVAR 20
14417: PUSH
14418: LD_INT 7
14420: ST_TO_ADDR
// uc_nation := 1 ;
14421: LD_ADDR_OWVAR 21
14425: PUSH
14426: LD_INT 1
14428: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , [ control_remote , control_computer ] [ rand ( 1 , 2 ) ] , [ us_heavy_gun , us_laser ] [ rand ( 1 , 2 ) ] , 100 ) ;
14429: LD_INT 5
14431: PPUSH
14432: LD_INT 3
14434: PPUSH
14435: LD_INT 2
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 1
14447: PPUSH
14448: LD_INT 2
14450: PPUSH
14451: CALL_OW 12
14455: ARRAY
14456: PPUSH
14457: LD_INT 6
14459: PUSH
14460: LD_INT 9
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 1
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 12
14477: ARRAY
14478: PPUSH
14479: LD_INT 100
14481: PPUSH
14482: CALL 73898 0 5
// un := CreateVehicle ;
14486: LD_ADDR_VAR 0 2
14490: PUSH
14491: CALL_OW 45
14495: ST_TO_ADDR
// SetDir ( un , 4 ) ;
14496: LD_VAR 0 2
14500: PPUSH
14501: LD_INT 4
14503: PPUSH
14504: CALL_OW 233
// PlaceUnitXYR ( un , 307 , 219 , 6 , false ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: LD_INT 307
14515: PPUSH
14516: LD_INT 219
14518: PPUSH
14519: LD_INT 6
14521: PPUSH
14522: LD_INT 0
14524: PPUSH
14525: CALL_OW 50
// if GetControl ( un ) = control_remote then
14529: LD_VAR 0 2
14533: PPUSH
14534: CALL_OW 263
14538: PUSH
14539: LD_INT 2
14541: EQUAL
14542: IFFALSE 14553
// Connect ( un ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: CALL 76998 0 1
// TeleportUnit ( un , 124 , 92 , 12 , true ) ;
14553: LD_VAR 0 2
14557: PPUSH
14558: LD_INT 124
14560: PPUSH
14561: LD_INT 92
14563: PPUSH
14564: LD_INT 12
14566: PPUSH
14567: LD_INT 1
14569: PPUSH
14570: CALL_OW 483
// tmp := Join ( tmp , un ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_VAR 0 2
14588: PPUSH
14589: CALL 106379 0 2
14593: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
14594: LD_INT 10
14596: PPUSH
14597: CALL_OW 67
// end ;
14601: GO 14410
14603: POP
14604: POP
// repeat wait ( 0 0$2 ) ;
14605: LD_INT 70
14607: PPUSH
14608: CALL_OW 67
// e := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) ;
14612: LD_ADDR_VAR 0 4
14616: PUSH
14617: LD_INT 22
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 34
14629: PUSH
14630: LD_INT 8
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PPUSH
14641: CALL_OW 69
14645: ST_TO_ADDR
// if not e then
14646: LD_VAR 0 4
14650: NOT
14651: IFFALSE 14687
// e := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_INT 22
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: ST_TO_ADDR
// for i in tmp do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_VAR 0 3
14696: PUSH
14697: FOR_IN
14698: IFFALSE 14756
// if not IsOK ( i ) then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 302
14709: NOT
14710: IFFALSE 14730
// tmp := tmp diff i else
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_VAR 0 3
14721: PUSH
14722: LD_VAR 0 1
14726: DIFF
14727: ST_TO_ADDR
14728: GO 14754
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
14730: LD_VAR 0 1
14734: PPUSH
14735: LD_VAR 0 4
14739: PPUSH
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 74
14749: PPUSH
14750: CALL_OW 115
14754: GO 14697
14756: POP
14757: POP
// until not tmp ;
14758: LD_VAR 0 3
14762: NOT
14763: IFFALSE 14605
// end ;
14765: PPOPN 4
14767: END
// every 8 8$20 trigger not allianceDestroyed and allianceActive do var i , tmp , target , teleport ;
14768: LD_EXP 23
14772: NOT
14773: PUSH
14774: LD_EXP 31
14778: AND
14779: IFFALSE 15729
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
// begin enable ;
14790: ENABLE
// if not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) then
14791: LD_INT 22
14793: PUSH
14794: LD_INT 7
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 30
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: NOT
14820: IFFALSE 14824
// exit ;
14822: GO 15729
// teleport := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_teleport ] ] ) ;
14824: LD_ADDR_VAR 0 4
14828: PUSH
14829: LD_INT 22
14831: PUSH
14832: LD_INT 7
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 30
14841: PUSH
14842: LD_INT 34
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: ST_TO_ADDR
// if Prob ( 40 ) then
14858: LD_INT 40
14860: PPUSH
14861: CALL_OW 13
14865: IFFALSE 15011
// begin MC_InsertProduceList ( 1 , [ [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_heavy_gun ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ) ;
14867: LD_INT 1
14869: PPUSH
14870: LD_INT 5
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 6
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 5
14890: PUSH
14891: LD_INT 3
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: LD_INT 6
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 5
14908: PUSH
14909: LD_INT 3
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 6
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 5
14926: PUSH
14927: LD_INT 3
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: LD_INT 9
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: LD_INT 45
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 24
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: LD_INT 47
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 24
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: LD_INT 3
14986: PUSH
14987: LD_INT 45
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL 62632 0 2
// end else
15009: GO 15153
// begin MC_InsertProduceList ( 1 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ us_morphling , engine_siberite , control_remote , us_laser ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , ] ) ;
15011: LD_INT 1
15013: PPUSH
15014: LD_INT 24
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: LD_INT 3
15022: PUSH
15023: LD_INT 47
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 24
15034: PUSH
15035: LD_INT 3
15037: PUSH
15038: LD_INT 3
15040: PUSH
15041: LD_INT 47
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 5
15052: PUSH
15053: LD_INT 3
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 5
15070: PUSH
15071: LD_INT 3
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 9
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 5
15088: PUSH
15089: LD_INT 3
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: LD_INT 9
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: LD_INT 3
15112: PUSH
15113: LD_INT 45
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 24
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: LD_INT 45
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: PPUSH
15149: CALL 62632 0 2
// end ; repeat wait ( 0 0$1 ) ;
15153: LD_INT 35
15155: PPUSH
15156: CALL_OW 67
// until MC_GetVehicles ( 1 , true ) >= 7 ;
15160: LD_INT 1
15162: PPUSH
15163: LD_INT 1
15165: PPUSH
15166: CALL 64050 0 2
15170: PUSH
15171: LD_INT 7
15173: GREATEREQUAL
15174: IFFALSE 15153
// wait ( 0 0$10 ) ;
15176: LD_INT 350
15178: PPUSH
15179: CALL_OW 67
// tmp := MC_GetVehicles ( 1 , true ) ;
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL 64050 0 2
15198: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , 1 , mc_vehicles [ 1 ] diff tmp ) ;
15199: LD_ADDR_EXP 120
15203: PUSH
15204: LD_EXP 120
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: LD_EXP 120
15216: PUSH
15217: LD_INT 1
15219: ARRAY
15220: PUSH
15221: LD_VAR 0 2
15225: DIFF
15226: PPUSH
15227: CALL_OW 1
15231: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
15232: LD_ADDR_VAR 0 3
15236: PUSH
15237: LD_INT 0
15239: PPUSH
15240: LD_INT 1
15242: PPUSH
15243: CALL_OW 12
15247: ST_TO_ADDR
// if target then
15248: LD_VAR 0 3
15252: IFFALSE 15418
// begin for i in tmp do
15254: LD_ADDR_VAR 0 1
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: FOR_IN
15265: IFFALSE 15290
// TeleportUnit ( i , 179 , 209 , 8 , true ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_INT 179
15274: PPUSH
15275: LD_INT 209
15277: PPUSH
15278: LD_INT 8
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 483
15288: GO 15264
15290: POP
15291: POP
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
15292: LD_ADDR_VAR 0 2
15296: PUSH
15297: LD_VAR 0 2
15301: PPUSH
15302: LD_INT 24
15304: PUSH
15305: LD_INT 250
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 72
15316: ST_TO_ADDR
// for i in tmp do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: LD_VAR 0 2
15326: PUSH
15327: FOR_IN
15328: IFFALSE 15368
// if GetDistUnitXY ( i , 179 , 209 ) > 9 then
15330: LD_VAR 0 1
15334: PPUSH
15335: LD_INT 179
15337: PPUSH
15338: LD_INT 209
15340: PPUSH
15341: CALL_OW 297
15345: PUSH
15346: LD_INT 9
15348: GREATER
15349: IFFALSE 15366
// ComMoveXY ( i , 179 , 209 ) ;
15351: LD_VAR 0 1
15355: PPUSH
15356: LD_INT 179
15358: PPUSH
15359: LD_INT 209
15361: PPUSH
15362: CALL_OW 111
15366: GO 15327
15368: POP
15369: POP
// wait ( 0 0$1 ) ;
15370: LD_INT 35
15372: PPUSH
15373: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 179 , 209 , 9 ] ) >= ( tmp - 1 ) ;
15377: LD_VAR 0 2
15381: PPUSH
15382: LD_INT 92
15384: PUSH
15385: LD_INT 179
15387: PUSH
15388: LD_INT 209
15390: PUSH
15391: LD_INT 9
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 72
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: LD_INT 1
15412: MINUS
15413: GREATEREQUAL
15414: IFFALSE 15292
// end else
15416: GO 15580
// begin for i in tmp do
15418: LD_ADDR_VAR 0 1
15422: PUSH
15423: LD_VAR 0 2
15427: PUSH
15428: FOR_IN
15429: IFFALSE 15454
// TeleportUnit ( i , 285 , 163 , 8 , true ) ;
15431: LD_VAR 0 1
15435: PPUSH
15436: LD_INT 285
15438: PPUSH
15439: LD_INT 163
15441: PPUSH
15442: LD_INT 8
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 483
15452: GO 15428
15454: POP
15455: POP
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
15456: LD_ADDR_VAR 0 2
15460: PUSH
15461: LD_VAR 0 2
15465: PPUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 250
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 72
15480: ST_TO_ADDR
// for i in tmp do
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: LD_VAR 0 2
15490: PUSH
15491: FOR_IN
15492: IFFALSE 15532
// if GetDistUnitXY ( i , 285 , 163 ) > 9 then
15494: LD_VAR 0 1
15498: PPUSH
15499: LD_INT 285
15501: PPUSH
15502: LD_INT 163
15504: PPUSH
15505: CALL_OW 297
15509: PUSH
15510: LD_INT 9
15512: GREATER
15513: IFFALSE 15530
// ComMoveXY ( i , 285 , 163 ) ;
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_INT 285
15522: PPUSH
15523: LD_INT 163
15525: PPUSH
15526: CALL_OW 111
15530: GO 15491
15532: POP
15533: POP
// wait ( 0 0$1 ) ;
15534: LD_INT 35
15536: PPUSH
15537: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 285 , 163 , 9 ] ) >= ( tmp - 1 ) ;
15541: LD_VAR 0 2
15545: PPUSH
15546: LD_INT 92
15548: PUSH
15549: LD_INT 285
15551: PUSH
15552: LD_INT 163
15554: PUSH
15555: LD_INT 9
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 72
15568: PUSH
15569: LD_VAR 0 2
15573: PUSH
15574: LD_INT 1
15576: MINUS
15577: GREATEREQUAL
15578: IFFALSE 15456
// end ; repeat wait ( 0 0$1 ) ;
15580: LD_INT 35
15582: PPUSH
15583: CALL_OW 67
// for i in tmp do
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_VAR 0 2
15596: PUSH
15597: FOR_IN
15598: IFFALSE 15720
// if GetLives ( i ) > 251 then
15600: LD_VAR 0 1
15604: PPUSH
15605: CALL_OW 256
15609: PUSH
15610: LD_INT 251
15612: GREATER
15613: IFFALSE 15702
// begin if GetWeapon ( i ) = ru_time_lapser then
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 264
15624: PUSH
15625: LD_INT 49
15627: EQUAL
15628: IFFALSE 15666
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) else
15630: LD_VAR 0 1
15634: PPUSH
15635: LD_INT 81
15637: PUSH
15638: LD_INT 7
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: PPUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 74
15659: PPUSH
15660: CALL_OW 112
15664: GO 15700
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , i ) ) ;
15666: LD_VAR 0 1
15670: PPUSH
15671: LD_INT 81
15673: PUSH
15674: LD_INT 7
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: PPUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 74
15695: PPUSH
15696: CALL_OW 115
// end else
15700: GO 15718
// tmp := tmp diff i ;
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_VAR 0 2
15711: PUSH
15712: LD_VAR 0 1
15716: DIFF
15717: ST_TO_ADDR
15718: GO 15597
15720: POP
15721: POP
// until not tmp ;
15722: LD_VAR 0 2
15726: NOT
15727: IFFALSE 15580
// end ;
15729: PPOPN 4
15731: END
// every 1 1$30 trigger allianceActive and IsOk ( Roth ) and Difficulty > 2 do
15732: LD_EXP 31
15736: PUSH
15737: LD_EXP 78
15741: PPUSH
15742: CALL_OW 302
15746: AND
15747: PUSH
15748: LD_OWVAR 67
15752: PUSH
15753: LD_INT 2
15755: GREATER
15756: AND
15757: IFFALSE 15857
15759: GO 15761
15761: DISABLE
// begin enable ;
15762: ENABLE
// if GetDistUnitXY ( Roth , 245 , 234 ) > 6 then
15763: LD_EXP 78
15767: PPUSH
15768: LD_INT 245
15770: PPUSH
15771: LD_INT 234
15773: PPUSH
15774: CALL_OW 297
15778: PUSH
15779: LD_INT 6
15781: GREATER
15782: IFFALSE 15801
// ComMoveXY ( Roth , 245 , 234 ) else
15784: LD_EXP 78
15788: PPUSH
15789: LD_INT 245
15791: PPUSH
15792: LD_INT 234
15794: PPUSH
15795: CALL_OW 111
15799: GO 15857
// ComMoveHex ( Roth , [ [ 259 , 235 ] , [ 252 , 209 ] , [ 275 , 235 ] ] [ rand ( 1 , 3 ) ] ) ;
15801: LD_EXP 78
15805: PPUSH
15806: LD_INT 259
15808: PUSH
15809: LD_INT 235
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 252
15818: PUSH
15819: LD_INT 209
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 275
15828: PUSH
15829: LD_INT 235
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 1
15843: PPUSH
15844: LD_INT 3
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: PPUSH
15853: CALL 110381 0 2
// end ; end_of_file
15857: END
// export Omar , Heike , Khatam ; export function PrepareOmarInvasion ; var i , veh , un ; begin
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
15862: PPUSH
15863: PPUSH
// missionStage := 13 ;
15864: LD_ADDR_EXP 15
15868: PUSH
15869: LD_INT 13
15871: ST_TO_ADDR
// uc_side := 2 ;
15872: LD_ADDR_OWVAR 20
15876: PUSH
15877: LD_INT 2
15879: ST_TO_ADDR
// uc_nation := 2 ;
15880: LD_ADDR_OWVAR 21
15884: PUSH
15885: LD_INT 2
15887: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
15888: LD_ADDR_EXP 96
15892: PUSH
15893: LD_STRING Omar
15895: PPUSH
15896: CALL_OW 25
15900: ST_TO_ADDR
// SetDir ( Omar , 4 ) ;
15901: LD_EXP 96
15905: PPUSH
15906: LD_INT 4
15908: PPUSH
15909: CALL_OW 233
// PlaceUnitXY ( Omar , 242 , 75 , false ) ;
15913: LD_EXP 96
15917: PPUSH
15918: LD_INT 242
15920: PPUSH
15921: LD_INT 75
15923: PPUSH
15924: LD_INT 0
15926: PPUSH
15927: CALL_OW 48
// Heike := NewCharacter ( Heike ) ;
15931: LD_ADDR_EXP 97
15935: PUSH
15936: LD_STRING Heike
15938: PPUSH
15939: CALL_OW 25
15943: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
15944: LD_INT 14
15946: PPUSH
15947: LD_INT 3
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: LD_INT 27
15955: PPUSH
15956: LD_INT 100
15958: PPUSH
15959: CALL 73898 0 5
// veh := CreateVehicle ;
15963: LD_ADDR_VAR 0 3
15967: PUSH
15968: CALL_OW 45
15972: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 2
15980: NEG
15981: PPUSH
15982: CALL_OW 242
// SetDir ( veh , 4 ) ;
15986: LD_VAR 0 3
15990: PPUSH
15991: LD_INT 4
15993: PPUSH
15994: CALL_OW 233
// PlaceUnitXY ( veh , 241 , 72 , false ) ;
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 241
16005: PPUSH
16006: LD_INT 72
16008: PPUSH
16009: LD_INT 0
16011: PPUSH
16012: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
16016: LD_EXP 97
16020: PPUSH
16021: LD_VAR 0 3
16025: PPUSH
16026: CALL_OW 52
// if KhatamStatus then
16030: LD_EXP 8
16034: IFFALSE 16097
// begin Khatam := NewCharacter ( Khatam ) ;
16036: LD_ADDR_EXP 98
16040: PUSH
16041: LD_STRING Khatam
16043: PPUSH
16044: CALL_OW 25
16048: ST_TO_ADDR
// PlaceUnitXYR ( Khatam , 245 , 78 , 3 , false ) ;
16049: LD_EXP 98
16053: PPUSH
16054: LD_INT 245
16056: PPUSH
16057: LD_INT 78
16059: PPUSH
16060: LD_INT 3
16062: PPUSH
16063: LD_INT 0
16065: PPUSH
16066: CALL_OW 50
// SetSkill ( Khatam , 4 , 10 ) ;
16070: LD_EXP 98
16074: PPUSH
16075: LD_INT 4
16077: PPUSH
16078: LD_INT 10
16080: PPUSH
16081: CALL_OW 237
// SetClass ( Khatam , class_scientistic ) ;
16085: LD_EXP 98
16089: PPUSH
16090: LD_INT 4
16092: PPUSH
16093: CALL_OW 336
// end ; for i = 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
16097: LD_ADDR_VAR 0 2
16101: PUSH
16102: DOUBLE
16103: LD_INT 1
16105: DEC
16106: ST_TO_ADDR
16107: LD_INT 2
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 3
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: LD_OWVAR 67
16129: ARRAY
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16198
// begin PrepareScientist ( false , 6 + Difficulty ) ;
16134: LD_INT 0
16136: PPUSH
16137: LD_INT 6
16139: PUSH
16140: LD_OWVAR 67
16144: PLUS
16145: PPUSH
16146: CALL_OW 384
// un := CreateHuman ;
16150: LD_ADDR_VAR 0 4
16154: PUSH
16155: CALL_OW 44
16159: ST_TO_ADDR
// PlaceUnitArea ( un , [ arabianAttackArea , arabianAttackArea2 ] [ i mod 2 + 1 ] , false ) ;
16160: LD_VAR 0 4
16164: PPUSH
16165: LD_INT 28
16167: PUSH
16168: LD_INT 29
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_VAR 0 2
16179: PUSH
16180: LD_INT 2
16182: MOD
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: ARRAY
16188: PPUSH
16189: LD_INT 0
16191: PPUSH
16192: CALL_OW 49
// end ;
16196: GO 16131
16198: POP
16199: POP
// for i = 1 to 6 do
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: DOUBLE
16206: LD_INT 1
16208: DEC
16209: ST_TO_ADDR
16210: LD_INT 6
16212: PUSH
16213: FOR_TO
16214: IFFALSE 16259
// begin PrepareSoldier ( false , 6 + Difficulty ) ;
16216: LD_INT 0
16218: PPUSH
16219: LD_INT 6
16221: PUSH
16222: LD_OWVAR 67
16226: PLUS
16227: PPUSH
16228: CALL_OW 381
// un := CreateHuman ;
16232: LD_ADDR_VAR 0 4
16236: PUSH
16237: CALL_OW 44
16241: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea3 , false ) ;
16242: LD_VAR 0 4
16246: PPUSH
16247: LD_INT 32
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 49
// end ;
16257: GO 16213
16259: POP
16260: POP
// for i = 1 to 3 do
16261: LD_ADDR_VAR 0 2
16265: PUSH
16266: DOUBLE
16267: LD_INT 1
16269: DEC
16270: ST_TO_ADDR
16271: LD_INT 3
16273: PUSH
16274: FOR_TO
16275: IFFALSE 16323
// begin PrepareHuman ( false , class_mortar , 6 + Difficulty ) ;
16277: LD_INT 0
16279: PPUSH
16280: LD_INT 8
16282: PPUSH
16283: LD_INT 6
16285: PUSH
16286: LD_OWVAR 67
16290: PLUS
16291: PPUSH
16292: CALL_OW 380
// un := CreateHuman ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: CALL_OW 44
16305: ST_TO_ADDR
// PlaceUnitArea ( un , arabianAttackArea3 , false ) ;
16306: LD_VAR 0 4
16310: PPUSH
16311: LD_INT 32
16313: PPUSH
16314: LD_INT 0
16316: PPUSH
16317: CALL_OW 49
// end ;
16321: GO 16274
16323: POP
16324: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: DOUBLE
16331: LD_INT 1
16333: DEC
16334: ST_TO_ADDR
16335: LD_INT 2
16337: PUSH
16338: LD_INT 3
16340: PUSH
16341: LD_INT 4
16343: PUSH
16344: LD_INT 4
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: PUSH
16353: LD_OWVAR 67
16357: ARRAY
16358: PUSH
16359: FOR_TO
16360: IFFALSE 16450
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_rocket_launcher , 80 ) ;
16362: LD_INT 14
16364: PPUSH
16365: LD_INT 2
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: LD_INT 28
16373: PPUSH
16374: LD_INT 80
16376: PPUSH
16377: CALL 73898 0 5
// veh := CreateVehicle ;
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: CALL_OW 45
16390: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 3
16398: PPUSH
16399: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea2 , false ) ;
16403: LD_VAR 0 3
16407: PPUSH
16408: LD_INT 29
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 49
// PrepareMechanic ( false , 6 + Difficulty ) ;
16418: LD_INT 0
16420: PPUSH
16421: LD_INT 6
16423: PUSH
16424: LD_OWVAR 67
16428: PLUS
16429: PPUSH
16430: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16434: CALL_OW 44
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: CALL_OW 52
// end ;
16448: GO 16359
16450: POP
16451: POP
// for i = 1 to 5 + Difficulty do
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: DOUBLE
16458: LD_INT 1
16460: DEC
16461: ST_TO_ADDR
16462: LD_INT 5
16464: PUSH
16465: LD_OWVAR 67
16469: PLUS
16470: PUSH
16471: FOR_TO
16472: IFFALSE 16599
// begin PrepareVehicle ( ar_half_tracked , rand ( 1 , 3 ) , control_manual , [ ar_rocket_launcher , ar_flame_thrower , ar_gun , ar_gatling_gun ] [ i mod 4 + 1 ] , 80 ) ;
16474: LD_INT 14
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: LD_INT 3
16482: PPUSH
16483: CALL_OW 12
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: LD_INT 28
16493: PUSH
16494: LD_INT 26
16496: PUSH
16497: LD_INT 27
16499: PUSH
16500: LD_INT 25
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: PUSH
16509: LD_VAR 0 2
16513: PUSH
16514: LD_INT 4
16516: MOD
16517: PUSH
16518: LD_INT 1
16520: PLUS
16521: ARRAY
16522: PPUSH
16523: LD_INT 80
16525: PPUSH
16526: CALL 73898 0 5
// veh := CreateVehicle ;
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: CALL_OW 45
16539: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16540: LD_VAR 0 3
16544: PPUSH
16545: LD_INT 4
16547: PPUSH
16548: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 28
16559: PPUSH
16560: LD_INT 0
16562: PPUSH
16563: CALL_OW 49
// PrepareMechanic ( false , 6 + Difficulty ) ;
16567: LD_INT 0
16569: PPUSH
16570: LD_INT 6
16572: PUSH
16573: LD_OWVAR 67
16577: PLUS
16578: PPUSH
16579: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16583: CALL_OW 44
16587: PPUSH
16588: LD_VAR 0 3
16592: PPUSH
16593: CALL_OW 52
// end ;
16597: GO 16471
16599: POP
16600: POP
// for i = 1 to Difficulty do
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_OWVAR 67
16615: PUSH
16616: FOR_TO
16617: IFFALSE 16677
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_selfpropelled_bomb , 80 ) ;
16619: LD_INT 14
16621: PPUSH
16622: LD_INT 3
16624: PPUSH
16625: LD_INT 5
16627: PPUSH
16628: LD_INT 29
16630: PPUSH
16631: LD_INT 80
16633: PPUSH
16634: CALL 73898 0 5
// veh := CreateVehicle ;
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: CALL_OW 45
16647: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_INT 4
16655: PPUSH
16656: CALL_OW 233
// PlaceUnitArea ( veh , arabianAttackArea , false ) ;
16660: LD_VAR 0 3
16664: PPUSH
16665: LD_INT 28
16667: PPUSH
16668: LD_INT 0
16670: PPUSH
16671: CALL_OW 49
// end ;
16675: GO 16616
16677: POP
16678: POP
// end ;
16679: LD_VAR 0 1
16683: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , tmp , sci , enemy ;
16684: LD_INT 22
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: IFFALSE 17077
16700: GO 16702
16702: DISABLE
16703: LD_INT 0
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
// begin sci := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff Khatam ;
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 22
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 4
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: PUSH
16743: LD_EXP 98
16747: DIFF
16748: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 2 ] ) diff ( Khatam union sci ) ;
16749: LD_ADDR_VAR 0 2
16753: PUSH
16754: LD_INT 22
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PPUSH
16764: CALL_OW 69
16768: PUSH
16769: LD_EXP 98
16773: PUSH
16774: LD_VAR 0 3
16778: UNION
16779: DIFF
16780: ST_TO_ADDR
// if Khatam then
16781: LD_EXP 98
16785: IFFALSE 16802
// ComMoveXY ( Khatam , 211 , 92 ) ;
16787: LD_EXP 98
16791: PPUSH
16792: LD_INT 211
16794: PPUSH
16795: LD_INT 92
16797: PPUSH
16798: CALL_OW 111
// SetResourceVisibility ( 197 , 80 , 2 ) ;
16802: LD_INT 197
16804: PPUSH
16805: LD_INT 80
16807: PPUSH
16808: LD_INT 2
16810: PPUSH
16811: CALL_OW 441
// SetResourceVisibility ( 213 , 90 , 2 ) ;
16815: LD_INT 213
16817: PPUSH
16818: LD_INT 90
16820: PPUSH
16821: LD_INT 2
16823: PPUSH
16824: CALL_OW 441
// SetResourceVisibility ( 215 , 129 , 2 ) ;
16828: LD_INT 215
16830: PPUSH
16831: LD_INT 129
16833: PPUSH
16834: LD_INT 2
16836: PPUSH
16837: CALL_OW 441
// if sci then
16841: LD_VAR 0 3
16845: IFFALSE 16866
// ComContaminate ( sci [ 1 ] , 197 , 80 ) ;
16847: LD_VAR 0 3
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PPUSH
16856: LD_INT 197
16858: PPUSH
16859: LD_INT 80
16861: PPUSH
16862: CALL_OW 158
// if sci > 1 then
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 1
16873: GREATER
16874: IFFALSE 16895
// ComContaminate ( sci [ 2 ] , 213 , 90 ) ;
16876: LD_VAR 0 3
16880: PUSH
16881: LD_INT 2
16883: ARRAY
16884: PPUSH
16885: LD_INT 213
16887: PPUSH
16888: LD_INT 90
16890: PPUSH
16891: CALL_OW 158
// if sci > 2 then
16895: LD_VAR 0 3
16899: PUSH
16900: LD_INT 2
16902: GREATER
16903: IFFALSE 16924
// ComContaminate ( sci [ 3 ] , 215 , 129 ) ;
16905: LD_VAR 0 3
16909: PUSH
16910: LD_INT 3
16912: ARRAY
16913: PPUSH
16914: LD_INT 215
16916: PPUSH
16917: LD_INT 129
16919: PPUSH
16920: CALL_OW 158
// ComAgressiveMove ( tmp , 195 , 102 ) ;
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_INT 195
16931: PPUSH
16932: LD_INT 102
16934: PPUSH
16935: CALL_OW 114
// wait ( 0 0$5 ) ;
16939: LD_INT 175
16941: PPUSH
16942: CALL_OW 67
// repeat wait ( 0 0$2 ) ;
16946: LD_INT 70
16948: PPUSH
16949: CALL_OW 67
// enemy := FilterAllUnits ( [ [ f_distxy , 195 , 102 , 36 ] , [ f_side , 1 ] ] ) ;
16953: LD_ADDR_VAR 0 4
16957: PUSH
16958: LD_INT 92
16960: PUSH
16961: LD_INT 195
16963: PUSH
16964: LD_INT 102
16966: PUSH
16967: LD_INT 36
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: ST_TO_ADDR
// for i in tmp do
16995: LD_ADDR_VAR 0 1
16999: PUSH
17000: LD_VAR 0 2
17004: PUSH
17005: FOR_IN
17006: IFFALSE 17057
// if enemy then
17008: LD_VAR 0 4
17012: IFFALSE 17040
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_VAR 0 4
17023: PPUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 74
17033: PPUSH
17034: CALL_OW 115
17038: GO 17055
// ComAgressiveMove ( i , 195 , 102 ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_INT 195
17047: PPUSH
17048: LD_INT 102
17050: PPUSH
17051: CALL_OW 114
17055: GO 17005
17057: POP
17058: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
17059: LD_VAR 0 2
17063: PPUSH
17064: LD_INT 50
17066: PUSH
17067: EMPTY
17068: LIST
17069: PPUSH
17070: CALL_OW 72
17074: NOT
17075: IFFALSE 16946
// end ; end_of_file
17077: PPOPN 4
17079: END
// export function Action ; var i , t , cargo , tmp , options , dec , amount , macmilan_squad ; begin
17080: LD_INT 0
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
// Video ( true ) ;
17091: LD_INT 1
17093: PPUSH
17094: CALL 106351 0 1
// tmp := AreaToList ( macmilanCameraArea , 0 ) ;
17098: LD_ADDR_VAR 0 5
17102: PUSH
17103: LD_INT 7
17105: PPUSH
17106: LD_INT 0
17108: PPUSH
17109: CALL_OW 517
17113: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
17114: LD_ADDR_VAR 0 2
17118: PUSH
17119: DOUBLE
17120: LD_INT 1
17122: DEC
17123: ST_TO_ADDR
17124: LD_VAR 0 5
17128: PUSH
17129: LD_INT 1
17131: ARRAY
17132: PUSH
17133: FOR_TO
17134: IFFALSE 17179
// RevealMapOnXY ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 1 , - 15 ) ;
17136: LD_VAR 0 5
17140: PUSH
17141: LD_INT 1
17143: ARRAY
17144: PUSH
17145: LD_VAR 0 2
17149: ARRAY
17150: PPUSH
17151: LD_VAR 0 5
17155: PUSH
17156: LD_INT 2
17158: ARRAY
17159: PUSH
17160: LD_VAR 0 2
17164: ARRAY
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: LD_INT 15
17171: NEG
17172: PPUSH
17173: CALL 106265 0 4
17177: GO 17133
17179: POP
17180: POP
// CenterNowOnUnits ( Powell ) ;
17181: LD_EXP 60
17185: PPUSH
17186: CALL_OW 87
// tmp := [ JMMNewVeh ] ;
17190: LD_ADDR_VAR 0 5
17194: PUSH
17195: LD_EXP 58
17199: PUSH
17200: EMPTY
17201: LIST
17202: ST_TO_ADDR
// if GirlNewVeh then
17203: LD_EXP 59
17207: IFFALSE 17225
// tmp := tmp ^ GirlNewVeh ;
17209: LD_ADDR_VAR 0 5
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: LD_EXP 59
17223: ADD
17224: ST_TO_ADDR
// ComMoveXY ( tmp , 60 , 109 ) ;
17225: LD_VAR 0 5
17229: PPUSH
17230: LD_INT 60
17232: PPUSH
17233: LD_INT 109
17235: PPUSH
17236: CALL_OW 111
// if KappaStatus then
17240: LD_EXP 2
17244: IFFALSE 17296
// begin Say ( JMM , D1nT-JMM-1 ) ;
17246: LD_EXP 40
17250: PPUSH
17251: LD_STRING D1nT-JMM-1
17253: PPUSH
17254: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
17258: LD_EXP 60
17262: PPUSH
17263: LD_STRING D1T-Pow-1
17265: PPUSH
17266: CALL_OW 88
// Say ( JMM , D1T-JMM-2 ) ;
17270: LD_EXP 40
17274: PPUSH
17275: LD_STRING D1T-JMM-2
17277: PPUSH
17278: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
17282: LD_EXP 60
17286: PPUSH
17287: LD_STRING D1T-Pow-2
17289: PPUSH
17290: CALL_OW 88
// end else
17294: GO 17502
// if JMMGirlStatus then
17296: LD_EXP 6
17300: IFFALSE 17445
// begin Say ( JMM , D1T-JMM-1 ) ;
17302: LD_EXP 40
17306: PPUSH
17307: LD_STRING D1T-JMM-1
17309: PPUSH
17310: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
17314: LD_EXP 60
17318: PPUSH
17319: LD_STRING D1T-Pow-1
17321: PPUSH
17322: CALL_OW 88
// Say ( JMM , D1T-JMM-3 ) ;
17326: LD_EXP 40
17330: PPUSH
17331: LD_STRING D1T-JMM-3
17333: PPUSH
17334: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
17338: LD_EXP 60
17342: PPUSH
17343: LD_STRING D1T-Pow-3
17345: PPUSH
17346: CALL_OW 88
// if JMMGirl then
17350: LD_EXP 7
17354: IFFALSE 17443
// begin case JMMGirl of 1 :
17356: LD_EXP 7
17360: PUSH
17361: LD_INT 1
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17384
17369: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
17370: LD_EXP 41
17374: PPUSH
17375: LD_STRING D1T-Joan-3
17377: PPUSH
17378: CALL_OW 88
17382: GO 17431
17384: LD_INT 2
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17407
17392: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
17393: LD_EXP 43
17397: PPUSH
17398: LD_STRING D1T-Lisa-3
17400: PPUSH
17401: CALL_OW 88
17405: GO 17431
17407: LD_INT 3
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17430
17415: POP
// Say ( Connie , D1T-Con-3 ) ; end ;
17416: LD_EXP 55
17420: PPUSH
17421: LD_STRING D1T-Con-3
17423: PPUSH
17424: CALL_OW 88
17428: GO 17431
17430: POP
// Say ( Powell , D1T-Pow-4 ) ;
17431: LD_EXP 60
17435: PPUSH
17436: LD_STRING D1T-Pow-4
17438: PPUSH
17439: CALL_OW 88
// end ; end else
17443: GO 17502
// if not FastEnd then
17445: LD_EXP 11
17449: NOT
17450: IFFALSE 17478
// begin Say ( JMM , D1T-JMM-4 ) ;
17452: LD_EXP 40
17456: PPUSH
17457: LD_STRING D1T-JMM-4
17459: PPUSH
17460: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
17464: LD_EXP 60
17468: PPUSH
17469: LD_STRING D1T-Pow-5
17471: PPUSH
17472: CALL_OW 88
// end else
17476: GO 17502
// begin Say ( JMM , D1nT-JMM-1 ) ;
17478: LD_EXP 40
17482: PPUSH
17483: LD_STRING D1nT-JMM-1
17485: PPUSH
17486: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
17490: LD_EXP 60
17494: PPUSH
17495: LD_STRING D1nT-Pow-1
17497: PPUSH
17498: CALL_OW 88
// end ; repeat wait ( 3 ) ;
17502: LD_INT 3
17504: PPUSH
17505: CALL_OW 67
// until not HasTask ( JMMNewVeh ) ;
17509: LD_EXP 58
17513: PPUSH
17514: CALL_OW 314
17518: NOT
17519: IFFALSE 17502
// ComExitVehicle ( JMM ) ;
17521: LD_EXP 40
17525: PPUSH
17526: CALL_OW 121
// repeat wait ( 3 ) ;
17530: LD_INT 3
17532: PPUSH
17533: CALL_OW 67
// until not IsInUnit ( JMM ) ;
17537: LD_EXP 40
17541: PPUSH
17542: CALL_OW 310
17546: NOT
17547: IFFALSE 17530
// ComMoveXY ( JMM , 60 , 94 ) ;
17549: LD_EXP 40
17553: PPUSH
17554: LD_INT 60
17556: PPUSH
17557: LD_INT 94
17559: PPUSH
17560: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
17564: LD_EXP 40
17568: PPUSH
17569: LD_EXP 60
17573: PPUSH
17574: CALL_OW 179
// if Joan then
17578: LD_EXP 41
17582: IFFALSE 17636
// begin ComExitVehicle ( Joan ) ;
17584: LD_EXP 41
17588: PPUSH
17589: CALL_OW 121
// AddComWait ( Joan , 0 0$1 ) ;
17593: LD_EXP 41
17597: PPUSH
17598: LD_INT 35
17600: PPUSH
17601: CALL_OW 202
// AddComMoveXY ( Joan , 65 , 104 ) ;
17605: LD_EXP 41
17609: PPUSH
17610: LD_INT 65
17612: PPUSH
17613: LD_INT 104
17615: PPUSH
17616: CALL_OW 171
// AddComTurnUnit ( Joan , JMM ) ;
17620: LD_EXP 41
17624: PPUSH
17625: LD_EXP 40
17629: PPUSH
17630: CALL_OW 179
// end else
17634: GO 17770
// if Lisa and JMMGirl = 2 then
17636: LD_EXP 43
17640: PUSH
17641: LD_EXP 7
17645: PUSH
17646: LD_INT 2
17648: EQUAL
17649: AND
17650: IFFALSE 17704
// begin ComExitVehicle ( Lisa ) ;
17652: LD_EXP 43
17656: PPUSH
17657: CALL_OW 121
// AddComWait ( Lisa , 0 0$1 ) ;
17661: LD_EXP 43
17665: PPUSH
17666: LD_INT 35
17668: PPUSH
17669: CALL_OW 202
// AddComMoveXY ( Lisa , 65 , 104 ) ;
17673: LD_EXP 43
17677: PPUSH
17678: LD_INT 65
17680: PPUSH
17681: LD_INT 104
17683: PPUSH
17684: CALL_OW 171
// AddComTurnUnit ( Lisa , JMM ) ;
17688: LD_EXP 43
17692: PPUSH
17693: LD_EXP 40
17697: PPUSH
17698: CALL_OW 179
// end else
17702: GO 17770
// if Connie and JMMGirl = 3 then
17704: LD_EXP 55
17708: PUSH
17709: LD_EXP 7
17713: PUSH
17714: LD_INT 3
17716: EQUAL
17717: AND
17718: IFFALSE 17770
// begin ComExitVehicle ( Connie ) ;
17720: LD_EXP 55
17724: PPUSH
17725: CALL_OW 121
// AddComWait ( Connie , 0 0$1 ) ;
17729: LD_EXP 55
17733: PPUSH
17734: LD_INT 35
17736: PPUSH
17737: CALL_OW 202
// AddComMoveXY ( Connie , 65 , 104 ) ;
17741: LD_EXP 55
17745: PPUSH
17746: LD_INT 65
17748: PPUSH
17749: LD_INT 104
17751: PPUSH
17752: CALL_OW 171
// AddComTurnUnit ( Connie , JMM ) ;
17756: LD_EXP 55
17760: PPUSH
17761: LD_EXP 40
17765: PPUSH
17766: CALL_OW 179
// end ; repeat wait ( 0 0$1 ) ;
17770: LD_INT 35
17772: PPUSH
17773: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) < 8 ;
17777: LD_EXP 40
17781: PPUSH
17782: LD_EXP 60
17786: PPUSH
17787: CALL_OW 296
17791: PUSH
17792: LD_INT 8
17794: LESS
17795: IFFALSE 17770
// wait ( 0 0$0.5 ) ;
17797: LD_INT 18
17799: PPUSH
17800: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
17804: LD_EXP 40
17808: PPUSH
17809: LD_STRING D1-JMM-1
17811: PPUSH
17812: CALL_OW 88
// async ;
17816: ASYNC
// Say ( Powell , D1-Pow-1 ) ;
17817: LD_EXP 60
17821: PPUSH
17822: LD_STRING D1-Pow-1
17824: PPUSH
17825: CALL_OW 88
// if not dialogue_skipped then
17829: LD_OWVAR 59
17833: NOT
17834: IFFALSE 17843
// wait ( 0 0$2 ) ;
17836: LD_INT 70
17838: PPUSH
17839: CALL_OW 67
// RevealMapOnXY ( 170 , 99 , 1 , - 6 ) ;
17843: LD_INT 170
17845: PPUSH
17846: LD_INT 99
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_INT 6
17854: NEG
17855: PPUSH
17856: CALL 106265 0 4
// RevealMapOnXY ( 174 , 115 , 1 , - 6 ) ;
17860: LD_INT 174
17862: PPUSH
17863: LD_INT 115
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_INT 6
17871: NEG
17872: PPUSH
17873: CALL 106265 0 4
// RevealMapOnXY ( 169 , 71 , 1 , - 6 ) ;
17877: LD_INT 169
17879: PPUSH
17880: LD_INT 71
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: LD_INT 6
17888: NEG
17889: PPUSH
17890: CALL 106265 0 4
// if not dialogue_skipped then
17894: LD_OWVAR 59
17898: NOT
17899: IFFALSE 17918
// begin CenterOnXY ( 170 , 99 ) ;
17901: LD_INT 170
17903: PPUSH
17904: LD_INT 99
17906: PPUSH
17907: CALL_OW 84
// wait ( 0 0$2.3 ) ;
17911: LD_INT 80
17913: PPUSH
17914: CALL_OW 67
// end ; RevealMapOnXY ( 75 , 53 , 1 , - 9 ) ;
17918: LD_INT 75
17920: PPUSH
17921: LD_INT 53
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 9
17929: NEG
17930: PPUSH
17931: CALL 106265 0 4
// RevealMapOnXY ( 54 , 42 , 1 , - 9 ) ;
17935: LD_INT 54
17937: PPUSH
17938: LD_INT 42
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: LD_INT 9
17946: NEG
17947: PPUSH
17948: CALL 106265 0 4
// RevealMapOnXY ( 62 , 51 , 1 , - 9 ) ;
17952: LD_INT 62
17954: PPUSH
17955: LD_INT 51
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: LD_INT 9
17963: NEG
17964: PPUSH
17965: CALL 106265 0 4
// if not dialogue_skipped then
17969: LD_OWVAR 59
17973: NOT
17974: IFFALSE 17993
// begin CenterOnXY ( 75 , 53 ) ;
17976: LD_INT 75
17978: PPUSH
17979: LD_INT 53
17981: PPUSH
17982: CALL_OW 84
// wait ( 0 0$4 ) ;
17986: LD_INT 140
17988: PPUSH
17989: CALL_OW 67
// end ; CenterNowOnUnits ( Powell ) ;
17993: LD_EXP 60
17997: PPUSH
17998: CALL_OW 87
// if not dialogue_skipped then
18002: LD_OWVAR 59
18006: NOT
18007: IFFALSE 18016
// wait ( 0 0$2 ) ;
18009: LD_INT 70
18011: PPUSH
18012: CALL_OW 67
// sync ;
18016: SYNC
// Say ( JMM , D1-JMM-2 ) ;
18017: LD_EXP 40
18021: PPUSH
18022: LD_STRING D1-JMM-2
18024: PPUSH
18025: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
18029: LD_EXP 60
18033: PPUSH
18034: LD_STRING D1-Pow-2
18036: PPUSH
18037: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
18041: LD_EXP 40
18045: PPUSH
18046: LD_STRING D1-JMM-3
18048: PPUSH
18049: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
18053: LD_EXP 60
18057: PPUSH
18058: LD_STRING D1-Pow-3
18060: PPUSH
18061: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
18065: LD_EXP 40
18069: PPUSH
18070: LD_STRING D1-JMM-4
18072: PPUSH
18073: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
18077: LD_EXP 60
18081: PPUSH
18082: LD_STRING D1-Pow-4
18084: PPUSH
18085: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
18089: LD_EXP 40
18093: PPUSH
18094: LD_STRING D1-JMM-5
18096: PPUSH
18097: CALL_OW 88
// async ;
18101: ASYNC
// Say ( Powell , D1-Pow-5 ) ;
18102: LD_EXP 60
18106: PPUSH
18107: LD_STRING D1-Pow-5
18109: PPUSH
18110: CALL_OW 88
// if not dialogue_skipped then
18114: LD_OWVAR 59
18118: NOT
18119: IFFALSE 18128
// wait ( 0 0$3.6 ) ;
18121: LD_INT 126
18123: PPUSH
18124: CALL_OW 67
// RevealMapOnXY ( 134 , 210 , 1 , - 11 ) ;
18128: LD_INT 134
18130: PPUSH
18131: LD_INT 210
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: LD_INT 11
18139: NEG
18140: PPUSH
18141: CALL 106265 0 4
// if not dialogue_skipped then
18145: LD_OWVAR 59
18149: NOT
18150: IFFALSE 18169
// begin CenterOnXY ( 134 , 210 ) ;
18152: LD_INT 134
18154: PPUSH
18155: LD_INT 210
18157: PPUSH
18158: CALL_OW 84
// wait ( 0 0$2 ) ;
18162: LD_INT 70
18164: PPUSH
18165: CALL_OW 67
// end ; RevealMapOnXY ( 101 , 159 , 1 , - 10 ) ;
18169: LD_INT 101
18171: PPUSH
18172: LD_INT 159
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 10
18180: NEG
18181: PPUSH
18182: CALL 106265 0 4
// if not dialogue_skipped then
18186: LD_OWVAR 59
18190: NOT
18191: IFFALSE 18210
// begin CenterOnXY ( 101 , 159 ) ;
18193: LD_INT 101
18195: PPUSH
18196: LD_INT 159
18198: PPUSH
18199: CALL_OW 84
// wait ( 0 0$2 ) ;
18203: LD_INT 70
18205: PPUSH
18206: CALL_OW 67
// end ; sync ;
18210: SYNC
// CenterNowOnUnits ( Powell ) ;
18211: LD_EXP 60
18215: PPUSH
18216: CALL_OW 87
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
18220: LD_ADDR_VAR 0 6
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: LD_INT 2
18230: PUSH
18231: LD_INT 3
18233: PUSH
18234: LD_INT 4
18236: PUSH
18237: LD_INT 5
18239: PUSH
18240: LD_INT 6
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: ST_TO_ADDR
// if not dialogue_skipped then
18251: LD_OWVAR 59
18255: NOT
18256: IFFALSE 18425
// begin game_speed := 4 ;
18258: LD_ADDR_OWVAR 65
18262: PUSH
18263: LD_INT 4
18265: ST_TO_ADDR
// wait ( 0 0$6 ) ;
18266: LD_INT 210
18268: PPUSH
18269: CALL_OW 67
// dec := SelectiveQuery ( Q1 , options ) ;
18273: LD_ADDR_VAR 0 7
18277: PUSH
18278: LD_STRING Q1
18280: PPUSH
18281: LD_VAR 0 6
18285: PPUSH
18286: CALL_OW 98
18290: ST_TO_ADDR
// repeat dec := SelectiveQuery ( Q1 , options ) ;
18291: LD_ADDR_VAR 0 7
18295: PUSH
18296: LD_STRING Q1
18298: PPUSH
18299: LD_VAR 0 6
18303: PPUSH
18304: CALL_OW 98
18308: ST_TO_ADDR
// options := options diff dec ;
18309: LD_ADDR_VAR 0 6
18313: PUSH
18314: LD_VAR 0 6
18318: PUSH
18319: LD_VAR 0 7
18323: DIFF
18324: ST_TO_ADDR
// ResolveQuery ( dec , options ) ;
18325: LD_VAR 0 7
18329: PPUSH
18330: LD_VAR 0 6
18334: PPUSH
18335: CALL 19989 0 2
// until ( dec in [ 5 , 6 ] ) or options = 2 ;
18339: LD_VAR 0 7
18343: PUSH
18344: LD_INT 5
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: IN
18354: PUSH
18355: LD_VAR 0 6
18359: PUSH
18360: LD_INT 2
18362: EQUAL
18363: OR
18364: IFFALSE 18291
// if not ( dec in [ 5 , 6 ] ) then
18366: LD_VAR 0 7
18370: PUSH
18371: LD_INT 5
18373: PUSH
18374: LD_INT 6
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: IN
18381: NOT
18382: IFFALSE 18425
// begin dec := SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
18384: LD_ADDR_VAR 0 7
18388: PUSH
18389: LD_STRING Q1a
18391: PPUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 98
18406: ST_TO_ADDR
// ResolveQuery ( dec + 4 , options ) ;
18407: LD_VAR 0 7
18411: PUSH
18412: LD_INT 4
18414: PLUS
18415: PPUSH
18416: LD_VAR 0 6
18420: PPUSH
18421: CALL 19989 0 2
// end ; end ; CenterOnXY ( 81 , 127 ) ;
18425: LD_INT 81
18427: PPUSH
18428: LD_INT 127
18430: PPUSH
18431: CALL_OW 84
// amount := 8 ;
18435: LD_ADDR_VAR 0 8
18439: PUSH
18440: LD_INT 8
18442: ST_TO_ADDR
// macmilan_squad := [ ] ;
18443: LD_ADDR_VAR 0 9
18447: PUSH
18448: EMPTY
18449: ST_TO_ADDR
// if vip < amount then
18450: LD_EXP 61
18454: PUSH
18455: LD_VAR 0 8
18459: LESS
18460: IFFALSE 18504
// tmp := vip union FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) else
18462: LD_ADDR_VAR 0 5
18466: PUSH
18467: LD_EXP 61
18471: PUSH
18472: LD_INT 22
18474: PUSH
18475: LD_INT 4
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 21
18484: PUSH
18485: LD_INT 1
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PPUSH
18496: CALL_OW 69
18500: UNION
18501: ST_TO_ADDR
18502: GO 18514
// tmp := vip ;
18504: LD_ADDR_VAR 0 5
18508: PUSH
18509: LD_EXP 61
18513: ST_TO_ADDR
// tmp := tmp diff Powell ;
18514: LD_ADDR_VAR 0 5
18518: PUSH
18519: LD_VAR 0 5
18523: PUSH
18524: LD_EXP 60
18528: DIFF
18529: ST_TO_ADDR
// if tmp < amount then
18530: LD_VAR 0 5
18534: PUSH
18535: LD_VAR 0 8
18539: LESS
18540: IFFALSE 18552
// amount := tmp ;
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: LD_VAR 0 5
18551: ST_TO_ADDR
// if GetClass ( tmp [ 1 ] ) <> 2 then
18552: LD_VAR 0 5
18556: PUSH
18557: LD_INT 1
18559: ARRAY
18560: PPUSH
18561: CALL_OW 257
18565: PUSH
18566: LD_INT 2
18568: NONEQUAL
18569: IFFALSE 18667
// begin if IsInUnit ( tmp [ 1 ] ) then
18571: LD_VAR 0 5
18575: PUSH
18576: LD_INT 1
18578: ARRAY
18579: PPUSH
18580: CALL_OW 310
18584: IFFALSE 18599
// ComExitBuilding ( tmp [ 1 ] ) ;
18586: LD_VAR 0 5
18590: PUSH
18591: LD_INT 1
18593: ARRAY
18594: PPUSH
18595: CALL_OW 122
// if UnitsInside ( am_depot ) = 6 then
18599: LD_INT 387
18601: PPUSH
18602: CALL_OW 313
18606: PUSH
18607: LD_INT 6
18609: EQUAL
18610: IFFALSE 18635
// begin ComExitBuilding ( UnitsInside ( am_depot ) [ 1 ] ) ;
18612: LD_INT 387
18614: PPUSH
18615: CALL_OW 313
18619: PUSH
18620: LD_INT 1
18622: ARRAY
18623: PPUSH
18624: CALL_OW 122
// wait ( 3 ) ;
18628: LD_INT 3
18630: PPUSH
18631: CALL_OW 67
// end ; AddComEnterUnit ( tmp [ 1 ] , am_depot ) ;
18635: LD_VAR 0 5
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PPUSH
18644: LD_INT 387
18646: PPUSH
18647: CALL_OW 180
// AddComChangeProfession ( tmp [ 1 ] , 2 ) ;
18651: LD_VAR 0 5
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: LD_INT 2
18662: PPUSH
18663: CALL_OW 183
// end ; ComMoveXY ( JMM , 82 , 129 ) ;
18667: LD_EXP 40
18671: PPUSH
18672: LD_INT 82
18674: PPUSH
18675: LD_INT 129
18677: PPUSH
18678: CALL_OW 111
// AddComTurnUnit ( JMM , Powell ) ;
18682: LD_EXP 40
18686: PPUSH
18687: LD_EXP 60
18691: PPUSH
18692: CALL_OW 179
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , 84 , 128 ) ;
18696: LD_INT 22
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 69
18710: PUSH
18711: LD_EXP 40
18715: DIFF
18716: PPUSH
18717: LD_INT 84
18719: PPUSH
18720: LD_INT 128
18722: PPUSH
18723: CALL_OW 111
// AddComTurnUnit ( FilterAllUnits ( [ f_side , 1 ] ) diff JMM , JMM ) ;
18727: LD_INT 22
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_EXP 40
18746: DIFF
18747: PPUSH
18748: LD_EXP 40
18752: PPUSH
18753: CALL_OW 179
// for i = 1 to amount do
18757: LD_ADDR_VAR 0 2
18761: PUSH
18762: DOUBLE
18763: LD_INT 1
18765: DEC
18766: ST_TO_ADDR
18767: LD_VAR 0 8
18771: PUSH
18772: FOR_TO
18773: IFFALSE 18941
// begin macmilan_squad := macmilan_squad ^ tmp [ i ] ;
18775: LD_ADDR_VAR 0 9
18779: PUSH
18780: LD_VAR 0 9
18784: PUSH
18785: LD_VAR 0 5
18789: PUSH
18790: LD_VAR 0 2
18794: ARRAY
18795: ADD
18796: ST_TO_ADDR
// if IsInUnit ( tmp [ i ] ) then
18797: LD_VAR 0 5
18801: PUSH
18802: LD_VAR 0 2
18806: ARRAY
18807: PPUSH
18808: CALL_OW 310
18812: IFFALSE 18829
// AddComExitBuilding ( tmp [ i ] ) ;
18814: LD_VAR 0 5
18818: PUSH
18819: LD_VAR 0 2
18823: ARRAY
18824: PPUSH
18825: CALL_OW 182
// if i = 2 and JMMNewVeh then
18829: LD_VAR 0 2
18833: PUSH
18834: LD_INT 2
18836: EQUAL
18837: PUSH
18838: LD_EXP 58
18842: AND
18843: IFFALSE 18901
// begin AddComEnterUnit ( tmp [ i ] , JMMNewVeh ) ;
18845: LD_VAR 0 5
18849: PUSH
18850: LD_VAR 0 2
18854: ARRAY
18855: PPUSH
18856: LD_EXP 58
18860: PPUSH
18861: CALL_OW 180
// AddComMoveXY ( tmp [ i ] , 86 , 133 ) ;
18865: LD_VAR 0 5
18869: PUSH
18870: LD_VAR 0 2
18874: ARRAY
18875: PPUSH
18876: LD_INT 86
18878: PPUSH
18879: LD_INT 133
18881: PPUSH
18882: CALL_OW 171
// AddComExitVehicle ( tmp [ i ] ) ;
18886: LD_VAR 0 5
18890: PUSH
18891: LD_VAR 0 2
18895: ARRAY
18896: PPUSH
18897: CALL_OW 181
// end ; AddComMoveToArea ( tmp [ i ] , macmilanSquadStand ) ;
18901: LD_VAR 0 5
18905: PUSH
18906: LD_VAR 0 2
18910: ARRAY
18911: PPUSH
18912: LD_INT 8
18914: PPUSH
18915: CALL_OW 173
// AddComTurnUnit ( tmp [ i ] , JMM ) ;
18919: LD_VAR 0 5
18923: PUSH
18924: LD_VAR 0 2
18928: ARRAY
18929: PPUSH
18930: LD_EXP 40
18934: PPUSH
18935: CALL_OW 179
// end ;
18939: GO 18772
18941: POP
18942: POP
// if GirlNewVeh then
18943: LD_EXP 59
18947: IFFALSE 18961
// SetSide ( GirlNewVeh , 4 ) ;
18949: LD_EXP 59
18953: PPUSH
18954: LD_INT 4
18956: PPUSH
18957: CALL_OW 235
// if Mike then
18961: LD_EXP 57
18965: IFFALSE 19002
// begin macmilan_squad := Join ( macmilan_squad , Mike ) ;
18967: LD_ADDR_VAR 0 9
18971: PUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: LD_EXP 57
18981: PPUSH
18982: CALL 106379 0 2
18986: ST_TO_ADDR
// ComMoveXY ( Mike , 86 , 133 ) ;
18987: LD_EXP 57
18991: PPUSH
18992: LD_INT 86
18994: PPUSH
18995: LD_INT 133
18997: PPUSH
18998: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
19002: LD_INT 35
19004: PPUSH
19005: CALL_OW 67
// until UnitFilter ( macmilan_squad , [ f_inarea , powellBase ] ) = 0 and not IsInArea ( JMM , powellBase ) ;
19009: LD_VAR 0 9
19013: PPUSH
19014: LD_INT 95
19016: PUSH
19017: LD_INT 9
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PPUSH
19024: CALL_OW 72
19028: PUSH
19029: LD_INT 0
19031: EQUAL
19032: PUSH
19033: LD_EXP 40
19037: PPUSH
19038: LD_INT 9
19040: PPUSH
19041: CALL_OW 308
19045: NOT
19046: AND
19047: IFFALSE 19002
// wait ( 0 0$2 ) ;
19049: LD_INT 70
19051: PPUSH
19052: CALL_OW 67
// SetSide ( macmilan_squad , 1 ) ;
19056: LD_VAR 0 9
19060: PPUSH
19061: LD_INT 1
19063: PPUSH
19064: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_distxy , 83 , 130 , 10 ] ] ) , 1 ) ;
19068: LD_INT 21
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 92
19080: PUSH
19081: LD_INT 83
19083: PUSH
19084: LD_INT 130
19086: PUSH
19087: LD_INT 10
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: CALL_OW 235
// tick := 0 ;
19112: LD_ADDR_OWVAR 1
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// Video ( false ) ;
19120: LD_INT 0
19122: PPUSH
19123: CALL 106351 0 1
// ChangeMissionObjectives ( M1 ) ;
19127: LD_STRING M1
19129: PPUSH
19130: CALL_OW 337
// SaveForQuickRestart ;
19134: CALL_OW 22
// missionStart := true ;
19138: LD_ADDR_EXP 13
19142: PUSH
19143: LD_INT 1
19145: ST_TO_ADDR
// missionStage := 2 ;
19146: LD_ADDR_EXP 15
19150: PUSH
19151: LD_INT 2
19153: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19154: LD_INT 35
19156: PPUSH
19157: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Powell ;
19161: LD_ADDR_VAR 0 5
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_INT 4
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 21
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PPUSH
19190: CALL_OW 69
19194: PUSH
19195: LD_EXP 60
19199: DIFF
19200: ST_TO_ADDR
// if not tmp then
19201: LD_VAR 0 5
19205: NOT
19206: IFFALSE 19221
// tmp := [ Powell ] ;
19208: LD_ADDR_VAR 0 5
19212: PUSH
19213: LD_EXP 60
19217: PUSH
19218: EMPTY
19219: LIST
19220: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) [ 1 ] ;
19221: LD_ADDR_VAR 0 4
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_INT 4
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 34
19238: PUSH
19239: LD_INT 12
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: ST_TO_ADDR
// if IsInUnit ( tmp [ 1 ] ) then
19259: LD_VAR 0 5
19263: PUSH
19264: LD_INT 1
19266: ARRAY
19267: PPUSH
19268: CALL_OW 310
19272: IFFALSE 19287
// ComExitBuilding ( tmp [ 1 ] ) ;
19274: LD_VAR 0 5
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: CALL_OW 122
// AddComEnterUnit ( tmp [ 1 ] , cargo ) ;
19287: LD_VAR 0 5
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: LD_VAR 0 4
19300: PPUSH
19301: CALL_OW 180
// AddComMoveXY ( tmp [ 1 ] , 80 , 136 ) ;
19305: LD_VAR 0 5
19309: PUSH
19310: LD_INT 1
19312: ARRAY
19313: PPUSH
19314: LD_INT 80
19316: PPUSH
19317: LD_INT 136
19319: PPUSH
19320: CALL_OW 171
// AddComUnload ( tmp [ 1 ] ) ;
19324: LD_VAR 0 5
19328: PUSH
19329: LD_INT 1
19331: ARRAY
19332: PPUSH
19333: CALL_OW 219
// AddComMoveXY ( tmp [ 1 ] , 59 , 112 ) ;
19337: LD_VAR 0 5
19341: PUSH
19342: LD_INT 1
19344: ARRAY
19345: PPUSH
19346: LD_INT 59
19348: PPUSH
19349: LD_INT 112
19351: PPUSH
19352: CALL_OW 171
// AddComExitVehicle ( tmp [ 1 ] ) ;
19356: LD_VAR 0 5
19360: PUSH
19361: LD_INT 1
19363: ARRAY
19364: PPUSH
19365: CALL_OW 181
// if Joan and GetSide ( Joan ) = 1 then
19369: LD_EXP 41
19373: PUSH
19374: LD_EXP 41
19378: PPUSH
19379: CALL_OW 255
19383: PUSH
19384: LD_INT 1
19386: EQUAL
19387: AND
19388: IFFALSE 19414
// begin Say ( Joan , D3W-Joan-1 ) ;
19390: LD_EXP 41
19394: PPUSH
19395: LD_STRING D3W-Joan-1
19397: PPUSH
19398: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
19402: LD_EXP 40
19406: PPUSH
19407: LD_STRING D3W-JMM-1
19409: PPUSH
19410: CALL_OW 88
// end ; if Lisa and GetSide ( Lisa ) = 1 and not Lisa in vip then
19414: LD_EXP 43
19418: PUSH
19419: LD_EXP 43
19423: PPUSH
19424: CALL_OW 255
19428: PUSH
19429: LD_INT 1
19431: EQUAL
19432: AND
19433: PUSH
19434: LD_EXP 43
19438: PUSH
19439: LD_EXP 61
19443: IN
19444: NOT
19445: AND
19446: IFFALSE 19472
// begin Say ( Lisa , D3W-Lisa-1 ) ;
19448: LD_EXP 43
19452: PPUSH
19453: LD_STRING D3W-Lisa-1
19455: PPUSH
19456: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
19460: LD_EXP 40
19464: PPUSH
19465: LD_STRING D3W-JMM-1
19467: PPUSH
19468: CALL_OW 88
// end ; if Connie and GetSide ( Connie ) = 1 then
19472: LD_EXP 55
19476: PUSH
19477: LD_EXP 55
19481: PPUSH
19482: CALL_OW 255
19486: PUSH
19487: LD_INT 1
19489: EQUAL
19490: AND
19491: IFFALSE 19517
// begin Say ( Connie , D3W-Con-1 ) ;
19493: LD_EXP 55
19497: PPUSH
19498: LD_STRING D3W-Con-1
19500: PPUSH
19501: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
19505: LD_EXP 40
19509: PPUSH
19510: LD_STRING D3W-JMM-1
19512: PPUSH
19513: CALL_OW 88
// end ; wait ( 0 0$0.5 ) ;
19517: LD_INT 18
19519: PPUSH
19520: CALL_OW 67
// if Lisa in vip and GetSide ( Lisa ) = 1 then
19524: LD_EXP 43
19528: PUSH
19529: LD_EXP 61
19533: IN
19534: PUSH
19535: LD_EXP 43
19539: PPUSH
19540: CALL_OW 255
19544: PUSH
19545: LD_INT 1
19547: EQUAL
19548: AND
19549: IFFALSE 19565
// Say ( Lisa , D3nW-Lisa-1 ) else
19551: LD_EXP 43
19555: PPUSH
19556: LD_STRING D3nW-Lisa-1
19558: PPUSH
19559: CALL_OW 88
19563: GO 19809
// if Cyrus in vip and GetSide ( Cyrus ) = 1 then
19565: LD_EXP 46
19569: PUSH
19570: LD_EXP 61
19574: IN
19575: PUSH
19576: LD_EXP 46
19580: PPUSH
19581: CALL_OW 255
19585: PUSH
19586: LD_INT 1
19588: EQUAL
19589: AND
19590: IFFALSE 19606
// Say ( Cyrus , D3nW-Cyrus-1 ) else
19592: LD_EXP 46
19596: PPUSH
19597: LD_STRING D3nW-Cyrus-1
19599: PPUSH
19600: CALL_OW 88
19604: GO 19809
// if Bobby in vip and GetSide ( Bobby ) = 1 then
19606: LD_EXP 45
19610: PUSH
19611: LD_EXP 61
19615: IN
19616: PUSH
19617: LD_EXP 45
19621: PPUSH
19622: CALL_OW 255
19626: PUSH
19627: LD_INT 1
19629: EQUAL
19630: AND
19631: IFFALSE 19647
// Say ( Bobby , D3nW-Bobby-1 ) else
19633: LD_EXP 45
19637: PPUSH
19638: LD_STRING D3nW-Bobby-1
19640: PPUSH
19641: CALL_OW 88
19645: GO 19809
// if Gary in vip and GetSide ( Gary ) = 1 then
19647: LD_EXP 52
19651: PUSH
19652: LD_EXP 61
19656: IN
19657: PUSH
19658: LD_EXP 52
19662: PPUSH
19663: CALL_OW 255
19667: PUSH
19668: LD_INT 1
19670: EQUAL
19671: AND
19672: IFFALSE 19688
// Say ( Gary , D3nW-Gary-1 ) else
19674: LD_EXP 52
19678: PPUSH
19679: LD_STRING D3nW-Gary-1
19681: PPUSH
19682: CALL_OW 88
19686: GO 19809
// if Donaldson in vip and GetSide ( Donaldson ) = 1 then
19688: LD_EXP 44
19692: PUSH
19693: LD_EXP 61
19697: IN
19698: PUSH
19699: LD_EXP 44
19703: PPUSH
19704: CALL_OW 255
19708: PUSH
19709: LD_INT 1
19711: EQUAL
19712: AND
19713: IFFALSE 19729
// Say ( Donaldson , D3nW-Don-1 ) else
19715: LD_EXP 44
19719: PPUSH
19720: LD_STRING D3nW-Don-1
19722: PPUSH
19723: CALL_OW 88
19727: GO 19809
// if Cornel in vip and GetSide ( Cornel ) = 1 then
19729: LD_EXP 51
19733: PUSH
19734: LD_EXP 61
19738: IN
19739: PUSH
19740: LD_EXP 51
19744: PPUSH
19745: CALL_OW 255
19749: PUSH
19750: LD_INT 1
19752: EQUAL
19753: AND
19754: IFFALSE 19770
// Say ( Cornel , D3nW-Corn-1 ) else
19756: LD_EXP 51
19760: PPUSH
19761: LD_STRING D3nW-Corn-1
19763: PPUSH
19764: CALL_OW 88
19768: GO 19809
// if Frank in vip and GetSide ( Frank ) = 1 then
19770: LD_EXP 53
19774: PUSH
19775: LD_EXP 61
19779: IN
19780: PUSH
19781: LD_EXP 53
19785: PPUSH
19786: CALL_OW 255
19790: PUSH
19791: LD_INT 1
19793: EQUAL
19794: AND
19795: IFFALSE 19809
// Say ( Frank , D3nW-Frank-1 ) ;
19797: LD_EXP 53
19801: PPUSH
19802: LD_STRING D3nW-Frank-1
19804: PPUSH
19805: CALL_OW 88
// if UnitFilter ( vip , [ f_side , 1 ] ) then
19809: LD_EXP 61
19813: PPUSH
19814: LD_INT 22
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PPUSH
19824: CALL_OW 72
19828: IFFALSE 19854
// begin Say ( JMM , D3nW-JMM-1 ) ;
19830: LD_EXP 40
19834: PPUSH
19835: LD_STRING D3nW-JMM-1
19837: PPUSH
19838: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
19842: LD_EXP 40
19846: PPUSH
19847: LD_STRING D3nW-JMM-1a
19849: PPUSH
19850: CALL_OW 88
// end ; t := 0 0$00 ;
19854: LD_ADDR_VAR 0 3
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19862: LD_INT 35
19864: PPUSH
19865: CALL_OW 67
// t := t + 0 0$1 ;
19869: LD_ADDR_VAR 0 3
19873: PUSH
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 35
19881: PLUS
19882: ST_TO_ADDR
// until HexInfo ( 59 , 112 ) or t > 1 1$00 ;
19883: LD_INT 59
19885: PPUSH
19886: LD_INT 112
19888: PPUSH
19889: CALL_OW 428
19893: PUSH
19894: LD_VAR 0 3
19898: PUSH
19899: LD_INT 2100
19901: GREATER
19902: OR
19903: IFFALSE 19862
// mc_bases := Replace ( mc_bases , 4 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_not , [ f_type , unit_vehicle ] ] ] ) diff Powell ) ;
19905: LD_ADDR_EXP 101
19909: PUSH
19910: LD_EXP 101
19914: PPUSH
19915: LD_INT 4
19917: PPUSH
19918: LD_INT 22
19920: PUSH
19921: LD_INT 4
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 23
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_EXP 60
19969: DIFF
19970: PPUSH
19971: CALL_OW 1
19975: ST_TO_ADDR
// activeAttacks := true ;
19976: LD_ADDR_EXP 16
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// end ;
19984: LD_VAR 0 1
19988: RET
// export function ResolveQuery ( question , list_of_q ) ; begin
19989: LD_INT 0
19991: PPUSH
// case question of 1 :
19992: LD_VAR 0 1
19996: PUSH
19997: LD_INT 1
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20056
20005: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
20006: LD_EXP 40
20010: PPUSH
20011: LD_STRING D2Mot-JMM-1
20013: PPUSH
20014: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
20018: LD_EXP 60
20022: PPUSH
20023: LD_STRING D2Mot-Pow-1
20025: PPUSH
20026: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
20030: LD_EXP 40
20034: PPUSH
20035: LD_STRING D2Mot-JMM-2
20037: PPUSH
20038: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
20042: LD_EXP 60
20046: PPUSH
20047: LD_STRING D2Mot-Pow-2
20049: PPUSH
20050: CALL_OW 88
// end ; 2 :
20054: GO 20407
20056: LD_INT 2
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20140
20064: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
20065: LD_EXP 40
20069: PPUSH
20070: LD_STRING D2Rus-JMM-1
20072: PPUSH
20073: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
20077: LD_EXP 60
20081: PPUSH
20082: LD_STRING D2Rus-Pow-1
20084: PPUSH
20085: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
20089: LD_EXP 40
20093: PPUSH
20094: LD_STRING D2Rus-JMM-2
20096: PPUSH
20097: CALL_OW 88
// if not ( 3 in list_of_q ) then
20101: LD_INT 3
20103: PUSH
20104: LD_VAR 0 2
20108: IN
20109: NOT
20110: IFFALSE 20126
// Say ( Powell , D2Rus-Pow-2 ) else
20112: LD_EXP 60
20116: PPUSH
20117: LD_STRING D2Rus-Pow-2
20119: PPUSH
20120: CALL_OW 88
20124: GO 20138
// Say ( Powell , D2Rus-Pow-2a ) ;
20126: LD_EXP 60
20130: PPUSH
20131: LD_STRING D2Rus-Pow-2a
20133: PPUSH
20134: CALL_OW 88
// end ; 3 :
20138: GO 20407
20140: LD_INT 3
20142: DOUBLE
20143: EQUAL
20144: IFTRUE 20148
20146: GO 20233
20148: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
20149: LD_EXP 40
20153: PPUSH
20154: LD_STRING D2Leg-JMM-1
20156: PPUSH
20157: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
20161: LD_EXP 60
20165: PPUSH
20166: LD_STRING D2Leg-Pow-1
20168: PPUSH
20169: CALL_OW 88
// if 2 in list_of_q then
20173: LD_INT 2
20175: PUSH
20176: LD_VAR 0 2
20180: IN
20181: IFFALSE 20207
// begin Say ( JMM , D2Leg-JMM-2 ) ;
20183: LD_EXP 40
20187: PPUSH
20188: LD_STRING D2Leg-JMM-2
20190: PPUSH
20191: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
20195: LD_EXP 60
20199: PPUSH
20200: LD_STRING D2Leg-Pow-2
20202: PPUSH
20203: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
20207: LD_EXP 40
20211: PPUSH
20212: LD_STRING D2Leg-JMM-3
20214: PPUSH
20215: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
20219: LD_EXP 60
20223: PPUSH
20224: LD_STRING D2Leg-Pow-3
20226: PPUSH
20227: CALL_OW 88
// end ; 4 :
20231: GO 20407
20233: LD_INT 4
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20316
20241: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
20242: LD_EXP 40
20246: PPUSH
20247: LD_STRING D2Ar-JMM-1
20249: PPUSH
20250: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
20254: LD_EXP 60
20258: PPUSH
20259: LD_STRING D2Ar-Pow-1
20261: PPUSH
20262: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
20266: LD_EXP 40
20270: PPUSH
20271: LD_STRING D2Ar-JMM-2
20273: PPUSH
20274: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
20278: LD_EXP 60
20282: PPUSH
20283: LD_STRING D2Ar-Pow-2
20285: PPUSH
20286: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
20290: LD_EXP 40
20294: PPUSH
20295: LD_STRING D2Ar-JMM-3
20297: PPUSH
20298: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
20302: LD_EXP 60
20306: PPUSH
20307: LD_STRING D2Ar-Pow-3
20309: PPUSH
20310: CALL_OW 88
// end ; 5 :
20314: GO 20407
20316: LD_INT 5
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20339
20324: POP
// Say ( JMM , D2Conf-JMM-1 ) ; 6 :
20325: LD_EXP 40
20329: PPUSH
20330: LD_STRING D2Conf-JMM-1
20332: PPUSH
20333: CALL_OW 88
20337: GO 20407
20339: LD_INT 6
20341: DOUBLE
20342: EQUAL
20343: IFTRUE 20347
20345: GO 20406
20347: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
20348: LD_EXP 40
20352: PPUSH
20353: LD_STRING D2Com-JMM-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
20360: LD_EXP 60
20364: PPUSH
20365: LD_STRING D2Com-Pow-1
20367: PPUSH
20368: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
20372: LD_EXP 40
20376: PPUSH
20377: LD_STRING D2Com-JMM-2
20379: PPUSH
20380: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
20384: LD_EXP 60
20388: PPUSH
20389: LD_STRING D2Com-Pow-2
20391: PPUSH
20392: CALL_OW 88
// powellAngerQuery := true ;
20396: LD_ADDR_EXP 36
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// end ; end ;
20404: GO 20407
20406: POP
// end ;
20407: LD_VAR 0 3
20411: RET
// every 0 0$5 trigger missionStart do var tmp ;
20412: LD_EXP 13
20416: IFFALSE 20741
20418: GO 20420
20420: DISABLE
20421: LD_INT 0
20423: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20424: LD_INT 35
20426: PPUSH
20427: CALL_OW 67
// if FilterUnitsInArea ( powellBorder , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] ] ) and missionStage in [ 2 , 3 , 4 , 5 ] then
20431: LD_INT 14
20433: PPUSH
20434: LD_INT 22
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 3
20446: PUSH
20447: LD_INT 21
20449: PUSH
20450: LD_INT 3
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 70
20469: PUSH
20470: LD_EXP 15
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 3
20480: PUSH
20481: LD_INT 4
20483: PUSH
20484: LD_INT 5
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: IN
20493: AND
20494: IFFALSE 20731
// begin powellAnger := powellAnger + 1 ;
20496: LD_ADDR_EXP 17
20500: PUSH
20501: LD_EXP 17
20505: PUSH
20506: LD_INT 1
20508: PLUS
20509: ST_TO_ADDR
// Video ( true ) ;
20510: LD_INT 1
20512: PPUSH
20513: CALL 106351 0 1
// CenterNowOnUnits ( tmp ) ;
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 87
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
20526: LD_INT 14
20528: PPUSH
20529: LD_INT 22
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 70
20543: PPUSH
20544: LD_INT 86
20546: PPUSH
20547: LD_INT 133
20549: PPUSH
20550: CALL_OW 111
// async ;
20554: ASYNC
// case powellAnger of 1 :
20555: LD_EXP 17
20559: PUSH
20560: LD_INT 1
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20583
20568: POP
// Say ( Powell , DBack1-Pow-1 ) ; 2 :
20569: LD_EXP 60
20573: PPUSH
20574: LD_STRING DBack1-Pow-1
20576: PPUSH
20577: CALL_OW 88
20581: GO 20630
20583: LD_INT 2
20585: DOUBLE
20586: EQUAL
20587: IFTRUE 20591
20589: GO 20606
20591: POP
// Say ( Powell , DBack2-Pow-1 ) ; 3 :
20592: LD_EXP 60
20596: PPUSH
20597: LD_STRING DBack2-Pow-1
20599: PPUSH
20600: CALL_OW 88
20604: GO 20630
20606: LD_INT 3
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20629
20614: POP
// Say ( Powell , DBack3-Pow-1 ) ; end ;
20615: LD_EXP 60
20619: PPUSH
20620: LD_STRING DBack3-Pow-1
20622: PPUSH
20623: CALL_OW 88
20627: GO 20630
20629: POP
// sync ;
20630: SYNC
// repeat wait ( 0 0$1 ) ;
20631: LD_INT 35
20633: PPUSH
20634: CALL_OW 67
// ComMoveXY ( FilterUnitsInArea ( powellBorder , [ f_side , 1 ] ) , 86 , 133 ) ;
20638: LD_INT 14
20640: PPUSH
20641: LD_INT 22
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: PPUSH
20656: LD_INT 86
20658: PPUSH
20659: LD_INT 133
20661: PPUSH
20662: CALL_OW 111
// until not FilterUnitsInArea ( powellBorder , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20666: LD_INT 14
20668: PPUSH
20669: LD_INT 22
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 3
20681: PUSH
20682: LD_INT 21
20684: PUSH
20685: LD_INT 3
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 70
20704: NOT
20705: IFFALSE 20631
// if powellAnger >= 3 then
20707: LD_EXP 17
20711: PUSH
20712: LD_INT 3
20714: GREATEREQUAL
20715: IFFALSE 20724
// YouLost ( Dismissed ) ;
20717: LD_STRING Dismissed
20719: PPUSH
20720: CALL_OW 104
// Video ( false ) ;
20724: LD_INT 0
20726: PPUSH
20727: CALL 106351 0 1
// end ; until missionStage > 5 ;
20731: LD_EXP 15
20735: PUSH
20736: LD_INT 5
20738: GREATER
20739: IFFALSE 20424
// end ;
20741: PPOPN 1
20743: END
// every 0 0$30 trigger missionStart and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 4 and missionStage = 2 do var i , tmp , tmp2 , retreat , arm , bar , ru , un , emptyTowers , t , p ;
20744: LD_EXP 13
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_INT 4
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 21
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PPUSH
20773: CALL_OW 69
20777: PUSH
20778: LD_INT 4
20780: GREATEREQUAL
20781: AND
20782: PUSH
20783: LD_EXP 15
20787: PUSH
20788: LD_INT 2
20790: EQUAL
20791: AND
20792: IFFALSE 23042
20794: GO 20796
20796: DISABLE
20797: LD_INT 0
20799: PPUSH
20800: PPUSH
20801: PPUSH
20802: PPUSH
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
// begin missionStage := 3 ;
20810: LD_ADDR_EXP 15
20814: PUSH
20815: LD_INT 3
20817: ST_TO_ADDR
// retreat := false ;
20818: LD_ADDR_VAR 0 4
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) ;
20826: LD_ADDR_VAR 0 5
20830: PUSH
20831: LD_INT 22
20833: PUSH
20834: LD_INT 4
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 4
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_barracks ] ] ) ;
20860: LD_ADDR_VAR 0 6
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 4
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 30
20877: PUSH
20878: LD_INT 5
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: ST_TO_ADDR
// if not bar then
20894: LD_VAR 0 6
20898: NOT
20899: IFFALSE 20952
// begin repeat wait ( 0 0$1 ) ;
20901: LD_INT 35
20903: PPUSH
20904: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_barracks ] ] ) ;
20908: LD_INT 22
20910: PUSH
20911: LD_INT 4
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 3
20920: PUSH
20921: LD_INT 57
20923: PUSH
20924: EMPTY
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 30
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: IFFALSE 20901
// end ; bar := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_barracks ] ] ) ;
20952: LD_ADDR_VAR 0 6
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_INT 4
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20986: LD_INT 35
20988: PPUSH
20989: CALL_OW 67
// until mc_vehicles [ 4 ] >= 4 ;
20993: LD_EXP 120
20997: PUSH
20998: LD_INT 4
21000: ARRAY
21001: PUSH
21002: LD_INT 4
21004: GREATEREQUAL
21005: IFFALSE 20986
// tmp := [ ] ;
21007: LD_ADDR_VAR 0 2
21011: PUSH
21012: EMPTY
21013: ST_TO_ADDR
// tmp2 := [ ] ;
21014: LD_ADDR_VAR 0 3
21018: PUSH
21019: EMPTY
21020: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff ( Powell union vip ) do
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_INT 4
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 25
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 25
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 25
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 25
21071: PUSH
21072: LD_INT 4
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 25
21081: PUSH
21082: LD_INT 5
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: CALL_OW 69
21105: PUSH
21106: LD_EXP 60
21110: PUSH
21111: LD_EXP 61
21115: UNION
21116: DIFF
21117: PUSH
21118: FOR_IN
21119: IFFALSE 21181
// if not i in extraSquad then
21121: LD_VAR 0 1
21125: PUSH
21126: LD_EXP 62
21130: IN
21131: NOT
21132: IFFALSE 21156
// tmp := Join ( tmp , i ) else
21134: LD_ADDR_VAR 0 2
21138: PUSH
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_VAR 0 1
21148: PPUSH
21149: CALL 106379 0 2
21153: ST_TO_ADDR
21154: GO 21179
// tmp := Insert ( tmp , 1 , i ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: LD_INT 1
21168: PPUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 2
21178: ST_TO_ADDR
21179: GO 21118
21181: POP
21182: POP
// for i in UnitFilter ( tmp , [ f_sex , sex_male ] ) do
21183: LD_ADDR_VAR 0 1
21187: PUSH
21188: LD_VAR 0 2
21192: PPUSH
21193: LD_INT 26
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 72
21207: PUSH
21208: FOR_IN
21209: IFFALSE 21260
// begin p := Inc ( p ) ;
21211: LD_ADDR_VAR 0 11
21215: PUSH
21216: LD_VAR 0 11
21220: PPUSH
21221: CALL 107740 0 1
21225: ST_TO_ADDR
// tmp2 := Join ( tmp2 , i ) ;
21226: LD_ADDR_VAR 0 3
21230: PUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: LD_VAR 0 1
21240: PPUSH
21241: CALL 106379 0 2
21245: ST_TO_ADDR
// if p = 4 then
21246: LD_VAR 0 11
21250: PUSH
21251: LD_INT 4
21253: EQUAL
21254: IFFALSE 21258
// break ;
21256: GO 21260
// end ;
21258: GO 21208
21260: POP
21261: POP
// tmp := tmp diff tmp2 ;
21262: LD_ADDR_VAR 0 2
21266: PUSH
21267: LD_VAR 0 2
21271: PUSH
21272: LD_VAR 0 3
21276: DIFF
21277: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_INT 3
21290: PPUSH
21291: CALL 104896 0 2
21295: ST_TO_ADDR
// tmp2 := SortBySkill ( tmp2 , 3 ) ;
21296: LD_ADDR_VAR 0 3
21300: PUSH
21301: LD_VAR 0 3
21305: PPUSH
21306: LD_INT 3
21308: PPUSH
21309: CALL 104896 0 2
21313: ST_TO_ADDR
// for i := 1 to 4 do
21314: LD_ADDR_VAR 0 1
21318: PUSH
21319: DOUBLE
21320: LD_INT 1
21322: DEC
21323: ST_TO_ADDR
21324: LD_INT 4
21326: PUSH
21327: FOR_TO
21328: IFFALSE 21481
// begin if tmp2 then
21330: LD_VAR 0 3
21334: IFFALSE 21402
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp2 [ tmp2 ] ) ;
21336: LD_ADDR_EXP 18
21340: PUSH
21341: LD_EXP 18
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: LD_EXP 18
21353: PUSH
21354: LD_INT 1
21356: ARRAY
21357: PUSH
21358: LD_VAR 0 3
21362: PUSH
21363: LD_VAR 0 3
21367: ARRAY
21368: ADD
21369: PPUSH
21370: CALL_OW 1
21374: ST_TO_ADDR
// SetTag ( tmp2 [ tmp2 ] , 1 ) ;
21375: LD_VAR 0 3
21379: PUSH
21380: LD_VAR 0 3
21384: ARRAY
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL_OW 109
// tmp2 := [ ] ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: EMPTY
21399: ST_TO_ADDR
// end else
21400: GO 21479
// begin powellSquadAttack := Replace ( powellSquadAttack , 1 , powellSquadAttack [ 1 ] ^ tmp [ tmp ] ) ;
21402: LD_ADDR_EXP 18
21406: PUSH
21407: LD_EXP 18
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: LD_EXP 18
21419: PUSH
21420: LD_INT 1
21422: ARRAY
21423: PUSH
21424: LD_VAR 0 2
21428: PUSH
21429: LD_VAR 0 2
21433: ARRAY
21434: ADD
21435: PPUSH
21436: CALL_OW 1
21440: ST_TO_ADDR
// SetTag ( tmp [ tmp ] , 1 ) ;
21441: LD_VAR 0 2
21445: PUSH
21446: LD_VAR 0 2
21450: ARRAY
21451: PPUSH
21452: LD_INT 1
21454: PPUSH
21455: CALL_OW 109
// tmp := Delete ( tmp , tmp ) ;
21459: LD_ADDR_VAR 0 2
21463: PUSH
21464: LD_VAR 0 2
21468: PPUSH
21469: LD_VAR 0 2
21473: PPUSH
21474: CALL_OW 3
21478: ST_TO_ADDR
// end ; end ;
21479: GO 21327
21481: POP
21482: POP
// if tmp2 then
21483: LD_VAR 0 3
21487: IFFALSE 21505
// tmp := tmp union tmp2 ;
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_VAR 0 2
21498: PUSH
21499: LD_VAR 0 3
21503: UNION
21504: ST_TO_ADDR
// for i := 1 to 4 do
21505: LD_ADDR_VAR 0 1
21509: PUSH
21510: DOUBLE
21511: LD_INT 1
21513: DEC
21514: ST_TO_ADDR
21515: LD_INT 4
21517: PUSH
21518: FOR_TO
21519: IFFALSE 21568
// powellSquadAttack := Replace ( powellSquadAttack , 2 , powellSquadAttack [ 2 ] ^ tmp [ tmp - i ] ) ;
21521: LD_ADDR_EXP 18
21525: PUSH
21526: LD_EXP 18
21530: PPUSH
21531: LD_INT 2
21533: PPUSH
21534: LD_EXP 18
21538: PUSH
21539: LD_INT 2
21541: ARRAY
21542: PUSH
21543: LD_VAR 0 2
21547: PUSH
21548: LD_VAR 0 2
21552: PUSH
21553: LD_VAR 0 1
21557: MINUS
21558: ARRAY
21559: ADD
21560: PPUSH
21561: CALL_OW 1
21565: ST_TO_ADDR
21566: GO 21518
21568: POP
21569: POP
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] diff powellSquadAttack [ 1 ] ) ;
21570: LD_ADDR_EXP 101
21574: PUSH
21575: LD_EXP 101
21579: PPUSH
21580: LD_INT 4
21582: PPUSH
21583: LD_EXP 101
21587: PUSH
21588: LD_INT 4
21590: ARRAY
21591: PUSH
21592: LD_EXP 18
21596: PUSH
21597: LD_INT 1
21599: ARRAY
21600: DIFF
21601: PPUSH
21602: CALL_OW 1
21606: ST_TO_ADDR
// if UnitsInside ( arm [ 1 ] ) then
21607: LD_VAR 0 5
21611: PUSH
21612: LD_INT 1
21614: ARRAY
21615: PPUSH
21616: CALL_OW 313
21620: IFFALSE 21675
// begin for i in UnitsInside ( arm [ 1 ] ) do
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_VAR 0 5
21631: PUSH
21632: LD_INT 1
21634: ARRAY
21635: PPUSH
21636: CALL_OW 313
21640: PUSH
21641: FOR_IN
21642: IFFALSE 21673
// begin ComExitBuilding ( i ) ;
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 122
// AddComEnterUnit ( i , bar [ 1 ] ) ;
21653: LD_VAR 0 1
21657: PPUSH
21658: LD_VAR 0 6
21662: PUSH
21663: LD_INT 1
21665: ARRAY
21666: PPUSH
21667: CALL_OW 180
// end ;
21671: GO 21641
21673: POP
21674: POP
// end ; wait ( 0 0$3 ) ;
21675: LD_INT 105
21677: PPUSH
21678: CALL_OW 67
// for i in powellSquadAttack [ 1 ] do
21682: LD_ADDR_VAR 0 1
21686: PUSH
21687: LD_EXP 18
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PUSH
21696: FOR_IN
21697: IFFALSE 21804
// begin if IsInUnit ( i ) then
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 310
21708: IFFALSE 21719
// ComExitBuilding ( i ) ;
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 122
// if GetClass ( i ) <> 1 then
21719: LD_VAR 0 1
21723: PPUSH
21724: CALL_OW 257
21728: PUSH
21729: LD_INT 1
21731: NONEQUAL
21732: IFFALSE 21773
// begin AddComEnterUnit ( i , arm [ 1 ] ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_VAR 0 5
21743: PUSH
21744: LD_INT 1
21746: ARRAY
21747: PPUSH
21748: CALL_OW 180
// AddComChangeProfession ( i , class_soldier ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 183
// AddComExitBuilding ( i ) ;
21764: LD_VAR 0 1
21768: PPUSH
21769: CALL_OW 182
// end ; AddComMoveXY ( i , 60 , 94 ) ;
21773: LD_VAR 0 1
21777: PPUSH
21778: LD_INT 60
21780: PPUSH
21781: LD_INT 94
21783: PPUSH
21784: CALL_OW 171
// AddComTurnUnit ( i , Powell ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_EXP 60
21797: PPUSH
21798: CALL_OW 179
// end ;
21802: GO 21696
21804: POP
21805: POP
// wait ( 0 0$45 ) ;
21806: LD_INT 1575
21808: PPUSH
21809: CALL_OW 67
// Say ( Powell , D4-Pow-1 ) ;
21813: LD_EXP 60
21817: PPUSH
21818: LD_STRING D4-Pow-1
21820: PPUSH
21821: CALL_OW 88
// tmp := UnitFilter ( powellSquadAttack [ 1 ] , [ f_sex , sex_male ] ) ;
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: LD_EXP 18
21834: PUSH
21835: LD_INT 1
21837: ARRAY
21838: PPUSH
21839: LD_INT 26
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PPUSH
21849: CALL_OW 72
21853: ST_TO_ADDR
// if tmp then
21854: LD_VAR 0 2
21858: IFFALSE 21876
// Say ( tmp [ 1 ] , D4-Sol1-1 ) ;
21860: LD_VAR 0 2
21864: PUSH
21865: LD_INT 1
21867: ARRAY
21868: PPUSH
21869: LD_STRING D4-Sol1-1
21871: PPUSH
21872: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
21876: LD_EXP 60
21880: PPUSH
21881: LD_STRING D4-Pow-2
21883: PPUSH
21884: CALL_OW 88
// for i = 1 to powellSquadAttack [ 1 ] do
21888: LD_ADDR_VAR 0 1
21892: PUSH
21893: DOUBLE
21894: LD_INT 1
21896: DEC
21897: ST_TO_ADDR
21898: LD_EXP 18
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: PUSH
21907: FOR_TO
21908: IFFALSE 22001
// begin ComEnterUnit ( powellSquadAttack [ 1 ] [ i ] , mc_vehicles [ 4 ] [ 1 ] ) ;
21910: LD_EXP 18
21914: PUSH
21915: LD_INT 1
21917: ARRAY
21918: PUSH
21919: LD_VAR 0 1
21923: ARRAY
21924: PPUSH
21925: LD_EXP 120
21929: PUSH
21930: LD_INT 4
21932: ARRAY
21933: PUSH
21934: LD_INT 1
21936: ARRAY
21937: PPUSH
21938: CALL_OW 120
// mc_vehicles := Replace ( mc_vehicles , 4 , Delete ( mc_vehicles [ 4 ] , 1 ) ) ;
21942: LD_ADDR_EXP 120
21946: PUSH
21947: LD_EXP 120
21951: PPUSH
21952: LD_INT 4
21954: PPUSH
21955: LD_EXP 120
21959: PUSH
21960: LD_INT 4
21962: ARRAY
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 3
21971: PPUSH
21972: CALL_OW 1
21976: ST_TO_ADDR
// DoNotAttack ( 8 , powellSquadAttack [ 1 ] [ i ] ) ;
21977: LD_INT 8
21979: PPUSH
21980: LD_EXP 18
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PUSH
21989: LD_VAR 0 1
21993: ARRAY
21994: PPUSH
21995: CALL_OW 471
// end ;
21999: GO 21907
22001: POP
22002: POP
// repeat wait ( 0 0$1 ) ;
22003: LD_INT 35
22005: PPUSH
22006: CALL_OW 67
// until UnitFilter ( powellSquadAttack [ 1 ] , [ f_driving ] ) >= 4 ;
22010: LD_EXP 18
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: PPUSH
22019: LD_INT 55
22021: PUSH
22022: EMPTY
22023: LIST
22024: PPUSH
22025: CALL_OW 72
22029: PUSH
22030: LD_INT 4
22032: GREATEREQUAL
22033: IFFALSE 22003
// ComMoveXY ( powellSquadAttack [ 1 ] , 69 , 94 ) ;
22035: LD_EXP 18
22039: PUSH
22040: LD_INT 1
22042: ARRAY
22043: PPUSH
22044: LD_INT 69
22046: PPUSH
22047: LD_INT 94
22049: PPUSH
22050: CALL_OW 111
// AddComMoveXY ( powellSquadAttack [ 1 ] , 82 , 83 ) ;
22054: LD_EXP 18
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: LD_INT 82
22065: PPUSH
22066: LD_INT 83
22068: PPUSH
22069: CALL_OW 171
// AddComAgressiveMove ( powellSquadAttack [ 1 ] , 77 , 69 ) ;
22073: LD_EXP 18
22077: PUSH
22078: LD_INT 1
22080: ARRAY
22081: PPUSH
22082: LD_INT 77
22084: PPUSH
22085: LD_INT 69
22087: PPUSH
22088: CALL_OW 174
// repeat wait ( 3 ) ;
22092: LD_INT 3
22094: PPUSH
22095: CALL_OW 67
// for i in powellSquadAttack [ 1 ] do
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_EXP 18
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22250
// begin if GetLives ( i ) < 990 then
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 256
22125: PUSH
22126: LD_INT 990
22128: LESS
22129: IFFALSE 22143
// SetLives ( i , 1000 ) ;
22131: LD_VAR 0 1
22135: PPUSH
22136: LD_INT 1000
22138: PPUSH
22139: CALL_OW 234
// if not IsInUnit ( i ) then
22143: LD_VAR 0 1
22147: PPUSH
22148: CALL_OW 310
22152: NOT
22153: IFFALSE 22248
// begin if not HasTask ( i ) then
22155: LD_VAR 0 1
22159: PPUSH
22160: CALL_OW 314
22164: NOT
22165: IFFALSE 22182
// ComMoveXY ( i , 64 , 93 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_INT 64
22174: PPUSH
22175: LD_INT 93
22177: PPUSH
22178: CALL_OW 111
// if not retreat and GetSex ( i ) = sex_male then
22182: LD_VAR 0 4
22186: NOT
22187: PUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 258
22197: PUSH
22198: LD_INT 1
22200: EQUAL
22201: AND
22202: IFFALSE 22248
// begin retreat := true ;
22204: LD_ADDR_VAR 0 4
22208: PUSH
22209: LD_INT 1
22211: ST_TO_ADDR
// SetTag ( i , 2 ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 2
22219: PPUSH
22220: CALL_OW 109
// Say ( i , D4a-Sol1-1 ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_STRING D4a-Sol1-1
22231: PPUSH
22232: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
22236: LD_EXP 60
22240: PPUSH
22241: LD_STRING D4a-Pow-1
22243: PPUSH
22244: CALL_OW 88
// end ; end ; end ;
22248: GO 22113
22250: POP
22251: POP
// until UnitFilter ( powellSquadAttack [ 1 ] , [ [ f_inarea , powellBase ] , [ f_not , [ f_driving ] ] ] ) >= 4 ;
22252: LD_EXP 18
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: PPUSH
22261: LD_INT 95
22263: PUSH
22264: LD_INT 9
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 55
22276: PUSH
22277: EMPTY
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 72
22292: PUSH
22293: LD_INT 4
22295: GREATEREQUAL
22296: IFFALSE 22092
// for i in powellSquadAttack [ 1 ] do
22298: LD_ADDR_VAR 0 1
22302: PUSH
22303: LD_EXP 18
22307: PUSH
22308: LD_INT 1
22310: ARRAY
22311: PUSH
22312: FOR_IN
22313: IFFALSE 22449
// begin if GetTag ( i ) = 2 then
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL_OW 110
22324: PUSH
22325: LD_INT 2
22327: EQUAL
22328: IFFALSE 22390
// begin ComMoveXY ( i , 60 , 94 ) ;
22330: LD_VAR 0 1
22334: PPUSH
22335: LD_INT 60
22337: PPUSH
22338: LD_INT 94
22340: PPUSH
22341: CALL_OW 111
// AddComTurnUnit ( i , Powell ) ;
22345: LD_VAR 0 1
22349: PPUSH
22350: LD_EXP 60
22354: PPUSH
22355: CALL_OW 179
// wait ( 0 0$3 ) ;
22359: LD_INT 105
22361: PPUSH
22362: CALL_OW 67
// Say ( i , D4a-Sol1-2 ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_STRING D4a-Sol1-2
22373: PPUSH
22374: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
22378: LD_EXP 60
22382: PPUSH
22383: LD_STRING D4a-Pow-2
22385: PPUSH
22386: CALL_OW 88
// end ; SetTag ( i , 0 ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 0
22397: PPUSH
22398: CALL_OW 109
// mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] union i ) ;
22402: LD_ADDR_EXP 101
22406: PUSH
22407: LD_EXP 101
22411: PPUSH
22412: LD_INT 4
22414: PPUSH
22415: LD_EXP 101
22419: PUSH
22420: LD_INT 4
22422: ARRAY
22423: PUSH
22424: LD_VAR 0 1
22428: UNION
22429: PPUSH
22430: CALL_OW 1
22434: ST_TO_ADDR
// NormalAttack ( 8 , i ) ;
22435: LD_INT 8
22437: PPUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 472
// end ;
22447: GO 22312
22449: POP
22450: POP
// wait ( 2 2$00 ) ;
22451: LD_INT 4200
22453: PPUSH
22454: CALL_OW 67
// emptyTowers := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
22458: LD_ADDR_VAR 0 9
22462: PUSH
22463: LD_INT 22
22465: PUSH
22466: LD_INT 4
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 30
22475: PUSH
22476: LD_INT 32
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 58
22485: PUSH
22486: EMPTY
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 69
22498: ST_TO_ADDR
// if tmp then
22499: LD_VAR 0 2
22503: IFFALSE 22743
// begin for i := 1 to tmp do
22505: LD_ADDR_VAR 0 1
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_VAR 0 2
22519: PUSH
22520: FOR_TO
22521: IFFALSE 22734
// begin mc_bases := Replace ( mc_bases , 4 , mc_bases [ 4 ] diff tmp [ i ] ) ;
22523: LD_ADDR_EXP 101
22527: PUSH
22528: LD_EXP 101
22532: PPUSH
22533: LD_INT 4
22535: PPUSH
22536: LD_EXP 101
22540: PUSH
22541: LD_INT 4
22543: ARRAY
22544: PUSH
22545: LD_VAR 0 2
22549: PUSH
22550: LD_VAR 0 1
22554: ARRAY
22555: DIFF
22556: PPUSH
22557: CALL_OW 1
22561: ST_TO_ADDR
// t := IsInUnit ( tmp [ i ] ) ;
22562: LD_ADDR_VAR 0 10
22566: PUSH
22567: LD_VAR 0 2
22571: PUSH
22572: LD_VAR 0 1
22576: ARRAY
22577: PPUSH
22578: CALL_OW 310
22582: ST_TO_ADDR
// if t and GetBType ( t ) = b_bunker then
22583: LD_VAR 0 10
22587: PUSH
22588: LD_VAR 0 10
22592: PPUSH
22593: CALL_OW 266
22597: PUSH
22598: LD_INT 32
22600: EQUAL
22601: AND
22602: IFFALSE 22606
// continue ;
22604: GO 22520
// if t then
22606: LD_VAR 0 10
22610: IFFALSE 22627
// ComExitBuilding ( tmp [ i ] ) ;
22612: LD_VAR 0 2
22616: PUSH
22617: LD_VAR 0 1
22621: ARRAY
22622: PPUSH
22623: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , arm [ 1 ] ) ;
22627: LD_VAR 0 2
22631: PUSH
22632: LD_VAR 0 1
22636: ARRAY
22637: PPUSH
22638: LD_VAR 0 5
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PPUSH
22647: CALL_OW 180
// AddComChangeProfession ( tmp [ i ] , class_soldier ) ;
22651: LD_VAR 0 2
22655: PUSH
22656: LD_VAR 0 1
22660: ARRAY
22661: PPUSH
22662: LD_INT 1
22664: PPUSH
22665: CALL_OW 183
// if emptyTowers then
22669: LD_VAR 0 9
22673: IFFALSE 22732
// begin AddComExitBuilding ( tmp [ i ] ) ;
22675: LD_VAR 0 2
22679: PUSH
22680: LD_VAR 0 1
22684: ARRAY
22685: PPUSH
22686: CALL_OW 182
// AddComEnterUnit ( tmp [ i ] , emptyTowers [ 1 ] ) ;
22690: LD_VAR 0 2
22694: PUSH
22695: LD_VAR 0 1
22699: ARRAY
22700: PPUSH
22701: LD_VAR 0 9
22705: PUSH
22706: LD_INT 1
22708: ARRAY
22709: PPUSH
22710: CALL_OW 180
// emptyTowers := Delete ( emptyTowers , 1 ) ;
22714: LD_ADDR_VAR 0 9
22718: PUSH
22719: LD_VAR 0 9
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 3
22731: ST_TO_ADDR
// end ; end ;
22732: GO 22520
22734: POP
22735: POP
// wait ( 0 0$30 ) ;
22736: LD_INT 1050
22738: PPUSH
22739: CALL_OW 67
// end ; uc_side := 6 ;
22743: LD_ADDR_OWVAR 20
22747: PUSH
22748: LD_INT 6
22750: ST_TO_ADDR
// uc_nation := 3 ;
22751: LD_ADDR_OWVAR 21
22755: PUSH
22756: LD_INT 3
22758: ST_TO_ADDR
// ru := [ ] ;
22759: LD_ADDR_VAR 0 7
22763: PUSH
22764: EMPTY
22765: ST_TO_ADDR
// for i = 1 to 5 do
22766: LD_ADDR_VAR 0 1
22770: PUSH
22771: DOUBLE
22772: LD_INT 1
22774: DEC
22775: ST_TO_ADDR
22776: LD_INT 5
22778: PUSH
22779: FOR_TO
22780: IFFALSE 22900
// begin PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , 89 ) ;
22782: LD_INT 22
22784: PUSH
22785: LD_INT 23
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PPUSH
22795: LD_INT 2
22797: PPUSH
22798: CALL_OW 12
22802: ARRAY
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: LD_INT 3
22809: PPUSH
22810: LD_INT 43
22812: PUSH
22813: LD_INT 44
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: PPUSH
22823: LD_INT 2
22825: PPUSH
22826: CALL_OW 12
22830: ARRAY
22831: PPUSH
22832: LD_INT 89
22834: PPUSH
22835: CALL 73898 0 5
// un := CreateVehicle ;
22839: LD_ADDR_VAR 0 8
22843: PUSH
22844: CALL_OW 45
22848: ST_TO_ADDR
// SetDir ( un , 4 ) ;
22849: LD_VAR 0 8
22853: PPUSH
22854: LD_INT 4
22856: PPUSH
22857: CALL_OW 233
// PlaceUnitXYR ( un , 136 , 90 , 8 , false ) ;
22861: LD_VAR 0 8
22865: PPUSH
22866: LD_INT 136
22868: PPUSH
22869: LD_INT 90
22871: PPUSH
22872: LD_INT 8
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 50
// ru := ru ^ un ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 7
22891: PUSH
22892: LD_VAR 0 8
22896: ADD
22897: ST_TO_ADDR
// end ;
22898: GO 22779
22900: POP
22901: POP
// if ru then
22902: LD_VAR 0 7
22906: IFFALSE 22923
// ComAgressiveMove ( ru , 57 , 94 ) ;
22908: LD_VAR 0 7
22912: PPUSH
22913: LD_INT 57
22915: PPUSH
22916: LD_INT 94
22918: PPUSH
22919: CALL_OW 114
// wait ( 3 3$00 ) ;
22923: LD_INT 6300
22925: PPUSH
22926: CALL_OW 67
// MC_SetProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ) ;
22930: LD_INT 4
22932: PPUSH
22933: LD_INT 3
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 5
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 4
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 6
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 4
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: LD_INT 7
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: LD_INT 7
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 5
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PPUSH
23030: CALL 62584 0 2
// missionStage := 4 ;
23034: LD_ADDR_EXP 15
23038: PUSH
23039: LD_INT 4
23041: ST_TO_ADDR
// end ;
23042: PPOPN 11
23044: END
// every 0 0$02 trigger missionStage = 4 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) >= 5 do var i , j , tmp , tmp2 , xy , forces , _xy , dist , fac , arm , speaker , emp_towers , veh ;
23045: LD_EXP 15
23049: PUSH
23050: LD_INT 4
23052: EQUAL
23053: PUSH
23054: LD_INT 22
23056: PUSH
23057: LD_INT 4
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PPUSH
23078: CALL_OW 69
23082: PUSH
23083: LD_INT 5
23085: GREATEREQUAL
23086: AND
23087: IFFALSE 27354
23089: GO 23091
23091: DISABLE
23092: LD_INT 0
23094: PPUSH
23095: PPUSH
23096: PPUSH
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
23103: PPUSH
23104: PPUSH
23105: PPUSH
23106: PPUSH
// begin wait ( 0 0$10 ) ;
23107: LD_INT 350
23109: PPUSH
23110: CALL_OW 67
// missionStage := 5 ;
23114: LD_ADDR_EXP 15
23118: PUSH
23119: LD_INT 5
23121: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
23122: LD_ADDR_VAR 0 10
23126: PUSH
23127: LD_INT 22
23129: PUSH
23130: LD_INT 4
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 4
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 30
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: ST_TO_ADDR
// forces := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 16 ] ] , [ f_not , [ f_class , 12 ] ] ] ) diff Powell ;
23174: LD_ADDR_VAR 0 6
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_INT 4
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 21
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: LD_INT 25
23204: PUSH
23205: LD_INT 16
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 12
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: PUSH
23244: LD_EXP 60
23248: DIFF
23249: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
23250: LD_ADDR_VAR 0 9
23254: PUSH
23255: LD_INT 22
23257: PUSH
23258: LD_INT 4
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 30
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: PUSH
23284: LD_INT 1
23286: ARRAY
23287: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
23288: LD_INT 350
23290: PPUSH
23291: CALL_OW 67
// if mc_vehicles [ 4 ] < 5 and BuildingStatus ( fac ) = bs_idle then
23295: LD_EXP 120
23299: PUSH
23300: LD_INT 4
23302: ARRAY
23303: PUSH
23304: LD_INT 5
23306: LESS
23307: PUSH
23308: LD_VAR 0 9
23312: PPUSH
23313: CALL_OW 461
23317: PUSH
23318: LD_INT 2
23320: EQUAL
23321: AND
23322: IFFALSE 23352
// MC_InsertProduceList ( 4 , [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ) ;
23324: LD_INT 4
23326: PPUSH
23327: LD_INT 3
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 5
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: PPUSH
23348: CALL 62632 0 2
// until mc_vehicles [ 4 ] >= 5 and UnitFilter ( mc_vehicles [ 4 ] , [ f_empty ] ) >= 5 ;
23352: LD_EXP 120
23356: PUSH
23357: LD_INT 4
23359: ARRAY
23360: PUSH
23361: LD_INT 5
23363: GREATEREQUAL
23364: PUSH
23365: LD_EXP 120
23369: PUSH
23370: LD_INT 4
23372: ARRAY
23373: PPUSH
23374: LD_INT 58
23376: PUSH
23377: EMPTY
23378: LIST
23379: PPUSH
23380: CALL_OW 72
23384: PUSH
23385: LD_INT 5
23387: GREATEREQUAL
23388: AND
23389: IFFALSE 23288
// powellAllowRetreat := false ;
23391: LD_ADDR_EXP 19
23395: PUSH
23396: LD_INT 0
23398: ST_TO_ADDR
// activeAttacks := false ;
23399: LD_ADDR_EXP 16
23403: PUSH
23404: LD_INT 0
23406: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23407: LD_INT 35
23409: PPUSH
23410: CALL_OW 67
// until FilterAllUnits ( [ f_side , 6 ] ) = 0 ;
23414: LD_INT 22
23416: PUSH
23417: LD_INT 6
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PPUSH
23424: CALL_OW 69
23428: PUSH
23429: LD_INT 0
23431: EQUAL
23432: IFFALSE 23407
// tmp := mc_vehicles [ 4 ] ;
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: LD_EXP 120
23443: PUSH
23444: LD_INT 4
23446: ARRAY
23447: ST_TO_ADDR
// for i := 1 to powellSquadAttack do
23448: LD_ADDR_VAR 0 1
23452: PUSH
23453: DOUBLE
23454: LD_INT 1
23456: DEC
23457: ST_TO_ADDR
23458: LD_EXP 18
23462: PUSH
23463: FOR_TO
23464: IFFALSE 23725
// begin for j in powellSquadAttack [ i ] do
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_EXP 18
23475: PUSH
23476: LD_VAR 0 1
23480: ARRAY
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23721
// begin forces := forces diff j ;
23485: LD_ADDR_VAR 0 6
23489: PUSH
23490: LD_VAR 0 6
23494: PUSH
23495: LD_VAR 0 2
23499: DIFF
23500: ST_TO_ADDR
// SetTag ( j , 1 ) ;
23501: LD_VAR 0 2
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: CALL_OW 109
// wait ( 0 0$2 ) ;
23513: LD_INT 70
23515: PPUSH
23516: CALL_OW 67
// if IsInUnit ( j ) then
23520: LD_VAR 0 2
23524: PPUSH
23525: CALL_OW 310
23529: IFFALSE 23540
// ComExitBuilding ( j ) ;
23531: LD_VAR 0 2
23535: PPUSH
23536: CALL_OW 122
// if GetClass ( j ) <> 1 then
23540: LD_VAR 0 2
23544: PPUSH
23545: CALL_OW 257
23549: PUSH
23550: LD_INT 1
23552: NONEQUAL
23553: IFFALSE 23633
// begin if UnitsInside ( arm [ 1 ] ) >= 5 then
23555: LD_VAR 0 10
23559: PUSH
23560: LD_INT 1
23562: ARRAY
23563: PPUSH
23564: CALL_OW 313
23568: PUSH
23569: LD_INT 5
23571: GREATEREQUAL
23572: IFFALSE 23594
// AddComEnterUnit ( j , arm [ 2 ] ) else
23574: LD_VAR 0 2
23578: PPUSH
23579: LD_VAR 0 10
23583: PUSH
23584: LD_INT 2
23586: ARRAY
23587: PPUSH
23588: CALL_OW 180
23592: GO 23612
// AddComEnterUnit ( j , arm [ 1 ] ) ;
23594: LD_VAR 0 2
23598: PPUSH
23599: LD_VAR 0 10
23603: PUSH
23604: LD_INT 1
23606: ARRAY
23607: PPUSH
23608: CALL_OW 180
// AddComChangeProfession ( j , 1 ) ;
23612: LD_VAR 0 2
23616: PPUSH
23617: LD_INT 1
23619: PPUSH
23620: CALL_OW 183
// AddComExitBuilding ( j ) ;
23624: LD_VAR 0 2
23628: PPUSH
23629: CALL_OW 182
// end ; if i = 2 then
23633: LD_VAR 0 1
23637: PUSH
23638: LD_INT 2
23640: EQUAL
23641: IFFALSE 23658
// AddComMoveXY ( j , 61 , 93 ) ;
23643: LD_VAR 0 2
23647: PPUSH
23648: LD_INT 61
23650: PPUSH
23651: LD_INT 93
23653: PPUSH
23654: CALL_OW 171
// if i = 1 then
23658: LD_VAR 0 1
23662: PUSH
23663: LD_INT 1
23665: EQUAL
23666: IFFALSE 23719
// begin AddComEnterUnit ( j , tmp [ 1 ] ) ;
23668: LD_VAR 0 2
23672: PPUSH
23673: LD_VAR 0 3
23677: PUSH
23678: LD_INT 1
23680: ARRAY
23681: PPUSH
23682: CALL_OW 180
// tmp := Delete ( tmp , 1 ) ;
23686: LD_ADDR_VAR 0 3
23690: PUSH
23691: LD_VAR 0 3
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 3
23703: ST_TO_ADDR
// AddComMoveXY ( j , 69 , 94 ) ;
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_INT 69
23711: PPUSH
23712: LD_INT 94
23714: PPUSH
23715: CALL_OW 171
// end ; end ;
23719: GO 23482
23721: POP
23722: POP
// end ;
23723: GO 23463
23725: POP
23726: POP
// wait ( 0 0$30 ) ;
23727: LD_INT 1050
23729: PPUSH
23730: CALL_OW 67
// MC_Kill ( 4 ) ;
23734: LD_INT 4
23736: PPUSH
23737: CALL 38607 0 1
// tmp := UnitsInside ( fac ) ;
23741: LD_ADDR_VAR 0 3
23745: PUSH
23746: LD_VAR 0 9
23750: PPUSH
23751: CALL_OW 313
23755: ST_TO_ADDR
// if tmp then
23756: LD_VAR 0 3
23760: IFFALSE 23881
// for i in tmp do
23762: LD_ADDR_VAR 0 1
23766: PUSH
23767: LD_VAR 0 3
23771: PUSH
23772: FOR_IN
23773: IFFALSE 23879
// begin ComExitBuilding ( i ) ;
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 122
// if UnitsInside ( arm [ 2 ] ) < 6 then
23784: LD_VAR 0 10
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: PPUSH
23793: CALL_OW 313
23797: PUSH
23798: LD_INT 6
23800: LESS
23801: IFFALSE 23823
// AddComEnterUnit ( i , arm [ 2 ] ) else
23803: LD_VAR 0 1
23807: PPUSH
23808: LD_VAR 0 10
23812: PUSH
23813: LD_INT 2
23815: ARRAY
23816: PPUSH
23817: CALL_OW 180
23821: GO 23877
// if UnitsInside ( arm [ 1 ] ) < 6 then
23823: LD_VAR 0 10
23827: PUSH
23828: LD_INT 1
23830: ARRAY
23831: PPUSH
23832: CALL_OW 313
23836: PUSH
23837: LD_INT 6
23839: LESS
23840: IFFALSE 23862
// AddComEnterUnit ( i , arm [ 1 ] ) else
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_VAR 0 10
23851: PUSH
23852: LD_INT 1
23854: ARRAY
23855: PPUSH
23856: CALL_OW 180
23860: GO 23877
// AddComMoveXY ( i , 37 , 68 ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: LD_INT 37
23869: PPUSH
23870: LD_INT 68
23872: PPUSH
23873: CALL_OW 171
// end ;
23877: GO 23772
23879: POP
23880: POP
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) diff vip ;
23881: LD_ADDR_VAR 0 11
23885: PUSH
23886: LD_VAR 0 6
23890: PPUSH
23891: LD_INT 26
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 72
23905: PUSH
23906: LD_EXP 61
23910: DIFF
23911: ST_TO_ADDR
// if not speaker then
23912: LD_VAR 0 11
23916: NOT
23917: IFFALSE 23944
// speaker := UnitFilter ( forces , [ f_sex , sex_male ] ) ;
23919: LD_ADDR_VAR 0 11
23923: PUSH
23924: LD_VAR 0 6
23928: PPUSH
23929: LD_INT 26
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 72
23943: ST_TO_ADDR
// if speaker then
23944: LD_VAR 0 11
23948: IFFALSE 23964
// speaker := speaker [ 1 ] ;
23950: LD_ADDR_VAR 0 11
23954: PUSH
23955: LD_VAR 0 11
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: ST_TO_ADDR
// Video ( true ) ;
23964: LD_INT 1
23966: PPUSH
23967: CALL 106351 0 1
// CenterNowOnUnits ( Powell ) ;
23971: LD_EXP 60
23975: PPUSH
23976: CALL_OW 87
// tmp := UnitFilter ( forces , [ f_not , [ f_class , 1 ] ] ) ;
23980: LD_ADDR_VAR 0 3
23984: PUSH
23985: LD_VAR 0 6
23989: PPUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 25
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 72
24011: ST_TO_ADDR
// emp_towers := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
24012: LD_ADDR_VAR 0 12
24016: PUSH
24017: LD_INT 22
24019: PUSH
24020: LD_INT 4
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 30
24029: PUSH
24030: LD_INT 32
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 58
24039: PUSH
24040: EMPTY
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: ST_TO_ADDR
// for i := 1 to 4 do
24053: LD_ADDR_VAR 0 1
24057: PUSH
24058: DOUBLE
24059: LD_INT 1
24061: DEC
24062: ST_TO_ADDR
24063: LD_INT 4
24065: PUSH
24066: FOR_TO
24067: IFFALSE 24213
// begin if IsInUnit ( tmp [ i ] ) then
24069: LD_VAR 0 3
24073: PUSH
24074: LD_VAR 0 1
24078: ARRAY
24079: PPUSH
24080: CALL_OW 310
24084: IFFALSE 24101
// ComExitBuilding ( tmp [ i ] ) ;
24086: LD_VAR 0 3
24090: PUSH
24091: LD_VAR 0 1
24095: ARRAY
24096: PPUSH
24097: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , arm [ 1 ] ) ;
24101: LD_VAR 0 3
24105: PUSH
24106: LD_VAR 0 1
24110: ARRAY
24111: PPUSH
24112: LD_VAR 0 10
24116: PUSH
24117: LD_INT 1
24119: ARRAY
24120: PPUSH
24121: CALL_OW 180
// AddComChangeProfession ( tmp [ i ] , class_soldier ) ;
24125: LD_VAR 0 3
24129: PUSH
24130: LD_VAR 0 1
24134: ARRAY
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 183
// if Count ( emp_towers ) then
24143: LD_VAR 0 12
24147: PPUSH
24148: CALL 71160 0 1
24152: IFFALSE 24211
// begin AddComExitBuilding ( tmp [ i ] ) ;
24154: LD_VAR 0 3
24158: PUSH
24159: LD_VAR 0 1
24163: ARRAY
24164: PPUSH
24165: CALL_OW 182
// AddComEnterUnit ( tmp [ i ] , emp_towers [ 1 ] ) ;
24169: LD_VAR 0 3
24173: PUSH
24174: LD_VAR 0 1
24178: ARRAY
24179: PPUSH
24180: LD_VAR 0 12
24184: PUSH
24185: LD_INT 1
24187: ARRAY
24188: PPUSH
24189: CALL_OW 180
// emp_towers := Delete ( emp_towers , 1 ) ;
24193: LD_ADDR_VAR 0 12
24197: PUSH
24198: LD_VAR 0 12
24202: PPUSH
24203: LD_INT 1
24205: PPUSH
24206: CALL_OW 3
24210: ST_TO_ADDR
// end ; end ;
24211: GO 24066
24213: POP
24214: POP
// wait ( 0 0$5 ) ;
24215: LD_INT 175
24217: PPUSH
24218: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
24222: LD_VAR 0 3
24226: PPUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 54
24232: PUSH
24233: EMPTY
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 72
24244: IFFALSE 24264
// ComEnterUnit ( tmp , arm [ 1 ] ) ;
24246: LD_VAR 0 3
24250: PPUSH
24251: LD_VAR 0 10
24255: PUSH
24256: LD_INT 1
24258: ARRAY
24259: PPUSH
24260: CALL_OW 120
// tmp := UnitFilter ( powellSquadAttack [ 1 ] ^ powellSquadAttack [ 2 ] , [ f_sex , sex_male ] ) ;
24264: LD_ADDR_VAR 0 3
24268: PUSH
24269: LD_EXP 18
24273: PUSH
24274: LD_INT 1
24276: ARRAY
24277: PUSH
24278: LD_EXP 18
24282: PUSH
24283: LD_INT 2
24285: ARRAY
24286: ADD
24287: PPUSH
24288: LD_INT 26
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 72
24302: ST_TO_ADDR
// for i in powellSquadAttack [ 2 ] do
24303: LD_ADDR_VAR 0 1
24307: PUSH
24308: LD_EXP 18
24312: PUSH
24313: LD_INT 2
24315: ARRAY
24316: PUSH
24317: FOR_IN
24318: IFFALSE 24336
// ComTurnUnit ( i , Powell ) ;
24320: LD_VAR 0 1
24324: PPUSH
24325: LD_EXP 60
24329: PPUSH
24330: CALL_OW 119
24334: GO 24317
24336: POP
24337: POP
// Say ( Powell , D5-Pow-1 ) ;
24338: LD_EXP 60
24342: PPUSH
24343: LD_STRING D5-Pow-1
24345: PPUSH
24346: CALL_OW 88
// if tmp then
24350: LD_VAR 0 3
24354: IFFALSE 24372
// Say ( tmp [ 1 ] , D5-Sol2-1 ) ;
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: LD_STRING D5-Sol2-1
24367: PPUSH
24368: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
24372: LD_EXP 60
24376: PPUSH
24377: LD_STRING D5-Pow-2
24379: PPUSH
24380: CALL_OW 88
// if tmp > 1 then
24384: LD_VAR 0 3
24388: PUSH
24389: LD_INT 1
24391: GREATER
24392: IFFALSE 24410
// Say ( tmp [ 2 ] , D5-Sol2-2 ) ;
24394: LD_VAR 0 3
24398: PUSH
24399: LD_INT 2
24401: ARRAY
24402: PPUSH
24403: LD_STRING D5-Sol2-2
24405: PPUSH
24406: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
24410: LD_EXP 60
24414: PPUSH
24415: LD_STRING D5-Pow-3
24417: PPUSH
24418: CALL_OW 88
// wait ( 0 0$1 ) ;
24422: LD_INT 35
24424: PPUSH
24425: CALL_OW 67
// tmp := powellSquadAttack [ 1 ] union powellSquadAttack [ 2 ] ;
24429: LD_ADDR_VAR 0 3
24433: PUSH
24434: LD_EXP 18
24438: PUSH
24439: LD_INT 1
24441: ARRAY
24442: PUSH
24443: LD_EXP 18
24447: PUSH
24448: LD_INT 2
24450: ARRAY
24451: UNION
24452: ST_TO_ADDR
// ComAgressiveMove ( tmp , 80 , 67 ) ;
24453: LD_VAR 0 3
24457: PPUSH
24458: LD_INT 80
24460: PPUSH
24461: LD_INT 67
24463: PPUSH
24464: CALL_OW 114
// wait ( 0 0$2 ) ;
24468: LD_INT 70
24470: PPUSH
24471: CALL_OW 67
// CenterOnXY ( 79 , 72 ) ;
24475: LD_INT 79
24477: PPUSH
24478: LD_INT 72
24480: PPUSH
24481: CALL_OW 84
// repeat wait ( 0 0$2 ) ;
24485: LD_INT 70
24487: PPUSH
24488: CALL_OW 67
// until UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) ;
24492: LD_VAR 0 3
24496: PPUSH
24497: LD_INT 3
24499: PUSH
24500: LD_INT 24
24502: PUSH
24503: LD_INT 1000
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PPUSH
24514: CALL_OW 72
24518: IFFALSE 24485
// Say ( Powell , D5a-Pow-1 ) ;
24520: LD_EXP 60
24524: PPUSH
24525: LD_STRING D5a-Pow-1
24527: PPUSH
24528: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
24532: LD_EXP 60
24536: PPUSH
24537: LD_STRING D5a-Pow-1a
24539: PPUSH
24540: CALL_OW 88
// wait ( 0 0$0.7 ) ;
24544: LD_INT 24
24546: PPUSH
24547: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
24551: LD_EXP 60
24555: PPUSH
24556: LD_STRING D5a-Pow-1b
24558: PPUSH
24559: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24563: LD_INT 10
24565: PPUSH
24566: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
24570: LD_EXP 60
24574: PPUSH
24575: LD_STRING D5a-Pow-1c
24577: PPUSH
24578: CALL_OW 88
// ComMoveXY ( tmp , 68 , 63 ) ;
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_INT 68
24589: PPUSH
24590: LD_INT 63
24592: PPUSH
24593: CALL_OW 111
// wait ( 0 0$0.5 ) ;
24597: LD_INT 18
24599: PPUSH
24600: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
24604: LD_EXP 60
24608: PPUSH
24609: LD_STRING D5a-Pow-1d
24611: PPUSH
24612: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
24616: LD_INT 35
24618: PPUSH
24619: CALL_OW 67
// if not HasTask ( tmp ) then
24623: LD_VAR 0 3
24627: PPUSH
24628: CALL_OW 314
24632: NOT
24633: IFFALSE 24650
// ComAgressiveMove ( tmp , 68 , 63 ) ;
24635: LD_VAR 0 3
24639: PPUSH
24640: LD_INT 68
24642: PPUSH
24643: LD_INT 63
24645: PPUSH
24646: CALL_OW 114
// until not UnitFilter ( tmp , [ f_lives , 1 ] ) ;
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_INT 24
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 72
24669: NOT
24670: IFFALSE 24616
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 60 , 93 , 10 ] , [ f_not , [ f_inside ] ] ] ) diff Powell ;
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 22
24679: PUSH
24680: LD_INT 4
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 92
24689: PUSH
24690: LD_INT 60
24692: PUSH
24693: LD_INT 93
24695: PUSH
24696: LD_INT 10
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: LD_INT 54
24710: PUSH
24711: EMPTY
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 69
24727: PUSH
24728: LD_EXP 60
24732: DIFF
24733: ST_TO_ADDR
// if tmp then
24734: LD_VAR 0 3
24738: IFFALSE 24772
// for i in tmp do
24740: LD_ADDR_VAR 0 1
24744: PUSH
24745: LD_VAR 0 3
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24770
// ComMoveXY ( i , 36 , 67 ) ;
24753: LD_VAR 0 1
24757: PPUSH
24758: LD_INT 36
24760: PPUSH
24761: LD_INT 67
24763: PPUSH
24764: CALL_OW 111
24768: GO 24750
24770: POP
24771: POP
// wait ( 0 0$3 ) ;
24772: LD_INT 105
24774: PPUSH
24775: CALL_OW 67
// Say ( speaker , D6-Sol3-1 ) ;
24779: LD_VAR 0 11
24783: PPUSH
24784: LD_STRING D6-Sol3-1
24786: PPUSH
24787: CALL_OW 88
// CenterNowOnUnits ( Powell ) ;
24791: LD_EXP 60
24795: PPUSH
24796: CALL_OW 87
// Say ( Powell , D6-Pow-1 ) ;
24800: LD_EXP 60
24804: PPUSH
24805: LD_STRING D6-Pow-1
24807: PPUSH
24808: CALL_OW 88
// tmp := [ ] ;
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: EMPTY
24818: ST_TO_ADDR
// for i = 1 to 2 do
24819: LD_ADDR_VAR 0 1
24823: PUSH
24824: DOUBLE
24825: LD_INT 1
24827: DEC
24828: ST_TO_ADDR
24829: LD_INT 2
24831: PUSH
24832: FOR_TO
24833: IFFALSE 24947
// begin uc_side := 8 ;
24835: LD_ADDR_OWVAR 20
24839: PUSH
24840: LD_INT 8
24842: ST_TO_ADDR
// uc_nation := 2 ;
24843: LD_ADDR_OWVAR 21
24847: PUSH
24848: LD_INT 2
24850: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb , 100 ) ;
24851: LD_INT 14
24853: PPUSH
24854: LD_INT 3
24856: PPUSH
24857: LD_INT 2
24859: PPUSH
24860: LD_INT 29
24862: PPUSH
24863: LD_INT 100
24865: PPUSH
24866: CALL 73898 0 5
// veh := CreateVehicle ;
24870: LD_ADDR_VAR 0 13
24874: PUSH
24875: CALL_OW 45
24879: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
24880: LD_VAR 0 13
24884: PPUSH
24885: LD_INT 4
24887: PPUSH
24888: CALL_OW 233
// PlaceUnitXYR ( veh , 99 , 83 , 3 , false ) ;
24892: LD_VAR 0 13
24896: PPUSH
24897: LD_INT 99
24899: PPUSH
24900: LD_INT 83
24902: PPUSH
24903: LD_INT 3
24905: PPUSH
24906: LD_INT 0
24908: PPUSH
24909: CALL_OW 50
// wait ( 3 ) ;
24913: LD_INT 3
24915: PPUSH
24916: CALL_OW 67
// Connect ( veh ) ;
24920: LD_VAR 0 13
24924: PPUSH
24925: CALL 76998 0 1
// tmp := tmp ^ veh ;
24929: LD_ADDR_VAR 0 3
24933: PUSH
24934: LD_VAR 0 3
24938: PUSH
24939: LD_VAR 0 13
24943: ADD
24944: ST_TO_ADDR
// end ;
24945: GO 24832
24947: POP
24948: POP
// wait ( 0 0$1 ) ;
24949: LD_INT 35
24951: PPUSH
24952: CALL_OW 67
// PlaceSeeing ( 99 , 83 , 1 , 10 ) ;
24956: LD_INT 99
24958: PPUSH
24959: LD_INT 83
24961: PPUSH
24962: LD_INT 1
24964: PPUSH
24965: LD_INT 10
24967: PPUSH
24968: CALL_OW 330
// CenterNowOnXY ( 99 , 83 ) ;
24972: LD_INT 99
24974: PPUSH
24975: LD_INT 83
24977: PPUSH
24978: CALL_OW 86
// Say ( speaker , D6-Sol3-2 ) ;
24982: LD_VAR 0 11
24986: PPUSH
24987: LD_STRING D6-Sol3-2
24989: PPUSH
24990: CALL_OW 88
// async ;
24994: ASYNC
// Say ( Powell , D6-Pow-2 ) ;
24995: LD_EXP 60
24999: PPUSH
25000: LD_STRING D6-Pow-2
25002: PPUSH
25003: CALL_OW 88
// ComAttackUnit ( tmp [ 1 ] , fac ) ;
25007: LD_VAR 0 3
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: PPUSH
25016: LD_VAR 0 9
25020: PPUSH
25021: CALL_OW 115
// ComAttackUnit ( tmp [ 2 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , tmp [ 2 ] ) ) ;
25025: LD_VAR 0 3
25029: PUSH
25030: LD_INT 2
25032: ARRAY
25033: PPUSH
25034: LD_INT 22
25036: PUSH
25037: LD_INT 4
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 21
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PPUSH
25058: CALL_OW 69
25062: PPUSH
25063: LD_VAR 0 3
25067: PUSH
25068: LD_INT 2
25070: ARRAY
25071: PPUSH
25072: CALL_OW 74
25076: PPUSH
25077: CALL_OW 115
// CenterNowOnUnits ( Powell ) ;
25081: LD_EXP 60
25085: PPUSH
25086: CALL_OW 87
// RemoveSeeing ( 99 , 83 , 1 ) ;
25090: LD_INT 99
25092: PPUSH
25093: LD_INT 83
25095: PPUSH
25096: LD_INT 1
25098: PPUSH
25099: CALL_OW 331
// repeat wait ( 4 ) ;
25103: LD_INT 4
25105: PPUSH
25106: CALL_OW 67
// if GetLives ( tmp [ 1 ] ) < 1000 then
25110: LD_VAR 0 3
25114: PUSH
25115: LD_INT 1
25117: ARRAY
25118: PPUSH
25119: CALL_OW 256
25123: PUSH
25124: LD_INT 1000
25126: LESS
25127: IFFALSE 25145
// SetLives ( tmp [ 1 ] , 1000 ) ;
25129: LD_VAR 0 3
25133: PUSH
25134: LD_INT 1
25136: ARRAY
25137: PPUSH
25138: LD_INT 1000
25140: PPUSH
25141: CALL_OW 234
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) = 0 ;
25145: LD_INT 22
25147: PUSH
25148: LD_INT 4
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 30
25157: PUSH
25158: LD_INT 3
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PPUSH
25169: CALL_OW 69
25173: PUSH
25174: LD_INT 0
25176: EQUAL
25177: IFFALSE 25103
// skirmish := false ;
25179: LD_ADDR_EXP 99
25183: PUSH
25184: LD_INT 0
25186: ST_TO_ADDR
// sync ;
25187: SYNC
// Say ( Powell , D6a-Pow-1 ) ;
25188: LD_EXP 60
25192: PPUSH
25193: LD_STRING D6a-Pow-1
25195: PPUSH
25196: CALL_OW 88
// Say ( speaker , D6a-Sol3-1 ) ;
25200: LD_VAR 0 11
25204: PPUSH
25205: LD_STRING D6a-Sol3-1
25207: PPUSH
25208: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
25212: LD_EXP 60
25216: PPUSH
25217: LD_STRING D6a-Pow-2
25219: PPUSH
25220: CALL_OW 88
// Say ( speaker , D6a-Sol3-2 ) ;
25224: LD_VAR 0 11
25228: PPUSH
25229: LD_STRING D6a-Sol3-2
25231: PPUSH
25232: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
25236: LD_EXP 60
25240: PPUSH
25241: LD_STRING D6a-Pow-3
25243: PPUSH
25244: CALL_OW 88
// powellCenterCameraMode := true ;
25248: LD_ADDR_EXP 20
25252: PUSH
25253: LD_INT 1
25255: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
25256: LD_ADDR_VAR 0 1
25260: PUSH
25261: LD_INT 22
25263: PUSH
25264: LD_INT 8
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 25
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: FOR_IN
25291: IFFALSE 25346
// begin SetTag ( i , 1 ) ;
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 109
// ComExitBuilding ( i ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 122
// AddComMoveXY ( i , 35 , 6 ) ;
25314: LD_VAR 0 1
25318: PPUSH
25319: LD_INT 35
25321: PPUSH
25322: LD_INT 6
25324: PPUSH
25325: CALL_OW 171
// AddComMoveXY ( i , 53 , 4 ) ;
25329: LD_VAR 0 1
25333: PPUSH
25334: LD_INT 53
25336: PPUSH
25337: LD_INT 4
25339: PPUSH
25340: CALL_OW 171
// end ;
25344: GO 25290
25346: POP
25347: POP
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ) ;
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 22
25355: PUSH
25356: LD_INT 4
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 21
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 3
25375: PUSH
25376: LD_INT 34
25378: PUSH
25379: LD_INT 12
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 69
25399: ST_TO_ADDR
// ComEnterUnit ( Powell , NearestUnitToUnit ( tmp , Powell ) ) ;
25400: LD_EXP 60
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: LD_EXP 60
25414: PPUSH
25415: CALL_OW 74
25419: PPUSH
25420: CALL_OW 120
// AddComMoveXY ( Powell , 100 , 88 ) ;
25424: LD_EXP 60
25428: PPUSH
25429: LD_INT 100
25431: PPUSH
25432: LD_INT 88
25434: PPUSH
25435: CALL_OW 171
// AddComMoveXY ( Powell , 100 , 75 ) ;
25439: LD_EXP 60
25443: PPUSH
25444: LD_INT 100
25446: PPUSH
25447: LD_INT 75
25449: PPUSH
25450: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 53 ) ;
25454: LD_EXP 60
25458: PPUSH
25459: LD_INT 88
25461: PPUSH
25462: LD_INT 53
25464: PPUSH
25465: CALL_OW 171
// DoNotAttack ( 8 , Powell ) ;
25469: LD_INT 8
25471: PPUSH
25472: LD_EXP 60
25476: PPUSH
25477: CALL_OW 471
// repeat wait ( 3 ) ;
25481: LD_INT 3
25483: PPUSH
25484: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , 100 , 75 , 6 ] ] ) ;
25488: LD_INT 22
25490: PUSH
25491: LD_INT 4
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 92
25500: PUSH
25501: LD_INT 100
25503: PUSH
25504: LD_INT 75
25506: PUSH
25507: LD_INT 6
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: IFFALSE 25481
// async ;
25526: ASYNC
// Say ( Powell , D6b-Pow-1 ) ;
25527: LD_EXP 60
25531: PPUSH
25532: LD_STRING D6b-Pow-1
25534: PPUSH
25535: CALL_OW 88
// repeat wait ( 3 ) ;
25539: LD_INT 3
25541: PPUSH
25542: CALL_OW 67
// if GetLives ( IsInUnit ( Powell ) ) < 1000 then
25546: LD_EXP 60
25550: PPUSH
25551: CALL_OW 310
25555: PPUSH
25556: CALL_OW 256
25560: PUSH
25561: LD_INT 1000
25563: LESS
25564: IFFALSE 25583
// SetLives ( IsInUnit ( Powell ) , 1000 ) ;
25566: LD_EXP 60
25570: PPUSH
25571: CALL_OW 310
25575: PPUSH
25576: LD_INT 1000
25578: PPUSH
25579: CALL_OW 234
// if GetLives ( Powell ) < 1000 then
25583: LD_EXP 60
25587: PPUSH
25588: CALL_OW 256
25592: PUSH
25593: LD_INT 1000
25595: LESS
25596: IFFALSE 25610
// SetLives ( Powell , 1000 ) ;
25598: LD_EXP 60
25602: PPUSH
25603: LD_INT 1000
25605: PPUSH
25606: CALL_OW 234
// if GetDistUnits ( Powell , powellBomb ) < 5 or GetDistUnits ( IsInUnit ( Powell ) , powellBomb ) < 5 then
25610: LD_EXP 60
25614: PPUSH
25615: LD_EXP 66
25619: PPUSH
25620: CALL_OW 296
25624: PUSH
25625: LD_INT 5
25627: LESS
25628: PUSH
25629: LD_EXP 60
25633: PPUSH
25634: CALL_OW 310
25638: PPUSH
25639: LD_EXP 66
25643: PPUSH
25644: CALL_OW 296
25648: PUSH
25649: LD_INT 5
25651: LESS
25652: OR
25653: IFFALSE 25672
// SetLives ( IsInUnit ( Powell ) , 100 ) ;
25655: LD_EXP 60
25659: PPUSH
25660: CALL_OW 310
25664: PPUSH
25665: LD_INT 100
25667: PPUSH
25668: CALL_OW 234
// until not IsInUnit ( Powell ) ;
25672: LD_EXP 60
25676: PPUSH
25677: CALL_OW 310
25681: NOT
25682: IFFALSE 25539
// DoNotAttack ( 8 , powellBomb ) ;
25684: LD_INT 8
25686: PPUSH
25687: LD_EXP 66
25691: PPUSH
25692: CALL_OW 471
// game_speed := 4 ;
25696: LD_ADDR_OWVAR 65
25700: PUSH
25701: LD_INT 4
25703: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1a ) ;
25704: LD_EXP 60
25708: PPUSH
25709: LD_STRING D6b-Pow-1a
25711: PPUSH
25712: CALL_OW 88
// AddComEnterUnit ( Powell , powellBomb ) ;
25716: LD_EXP 60
25720: PPUSH
25721: LD_EXP 66
25725: PPUSH
25726: CALL_OW 180
// sync ;
25730: SYNC
// repeat wait ( 0 0$1 ) ;
25731: LD_INT 35
25733: PPUSH
25734: CALL_OW 67
// until IsInUnit ( Powell ) ;
25738: LD_EXP 60
25742: PPUSH
25743: CALL_OW 310
25747: IFFALSE 25731
// DoNotAttack ( 8 , IsInUnit ( Powell ) ) ;
25749: LD_INT 8
25751: PPUSH
25752: LD_EXP 60
25756: PPUSH
25757: CALL_OW 310
25761: PPUSH
25762: CALL_OW 471
// AddComMoveXY ( Powell , 91 , 44 ) ;
25766: LD_EXP 60
25770: PPUSH
25771: LD_INT 91
25773: PPUSH
25774: LD_INT 44
25776: PPUSH
25777: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
25781: LD_EXP 60
25785: PPUSH
25786: LD_INT 96
25788: PPUSH
25789: LD_INT 44
25791: PPUSH
25792: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
25796: LD_EXP 60
25800: PPUSH
25801: LD_INT 96
25803: PPUSH
25804: LD_INT 41
25806: PPUSH
25807: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
25811: LD_EXP 60
25815: PPUSH
25816: LD_INT 92
25818: PPUSH
25819: LD_INT 39
25821: PPUSH
25822: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
25826: LD_EXP 60
25830: PPUSH
25831: LD_INT 88
25833: PPUSH
25834: LD_INT 41
25836: PPUSH
25837: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
25841: LD_EXP 60
25845: PPUSH
25846: LD_INT 91
25848: PPUSH
25849: LD_INT 44
25851: PPUSH
25852: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 44 ) ;
25856: LD_EXP 60
25860: PPUSH
25861: LD_INT 96
25863: PPUSH
25864: LD_INT 44
25866: PPUSH
25867: CALL_OW 171
// AddComMoveXY ( Powell , 96 , 41 ) ;
25871: LD_EXP 60
25875: PPUSH
25876: LD_INT 96
25878: PPUSH
25879: LD_INT 41
25881: PPUSH
25882: CALL_OW 171
// AddComMoveXY ( Powell , 92 , 39 ) ;
25886: LD_EXP 60
25890: PPUSH
25891: LD_INT 92
25893: PPUSH
25894: LD_INT 39
25896: PPUSH
25897: CALL_OW 171
// AddComMoveXY ( Powell , 88 , 41 ) ;
25901: LD_EXP 60
25905: PPUSH
25906: LD_INT 88
25908: PPUSH
25909: LD_INT 41
25911: PPUSH
25912: CALL_OW 171
// AddComMoveXY ( Powell , 91 , 44 ) ;
25916: LD_EXP 60
25920: PPUSH
25921: LD_INT 91
25923: PPUSH
25924: LD_INT 44
25926: PPUSH
25927: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 39 ) ;
25931: LD_EXP 60
25935: PPUSH
25936: LD_INT 93
25938: PPUSH
25939: LD_INT 39
25941: PPUSH
25942: CALL_OW 171
// AddComMoveXY ( Powell , 93 , 36 ) ;
25946: LD_EXP 60
25950: PPUSH
25951: LD_INT 93
25953: PPUSH
25954: LD_INT 36
25956: PPUSH
25957: CALL_OW 171
// wait ( 0 0$3.5 ) ;
25961: LD_INT 122
25963: PPUSH
25964: CALL_OW 67
// game_speed := 4 ;
25968: LD_ADDR_OWVAR 65
25972: PUSH
25973: LD_INT 4
25975: ST_TO_ADDR
// Say ( Powell , D6b-Pow-1b ) ;
25976: LD_EXP 60
25980: PPUSH
25981: LD_STRING D6b-Pow-1b
25983: PPUSH
25984: CALL_OW 88
// tmp := [ ] ;
25988: LD_ADDR_VAR 0 3
25992: PUSH
25993: EMPTY
25994: ST_TO_ADDR
// xy := [ [ 78 , 47 ] , [ 106 , 53 ] ] ;
25995: LD_ADDR_VAR 0 5
25999: PUSH
26000: LD_INT 78
26002: PUSH
26003: LD_INT 47
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 106
26012: PUSH
26013: LD_INT 53
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_distxy , 90 , 52 , 12 ] ] ) do
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_INT 8
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 21
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 92
26051: PUSH
26052: LD_INT 90
26054: PUSH
26055: LD_INT 52
26057: PUSH
26058: LD_INT 12
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: PUSH
26077: FOR_IN
26078: IFFALSE 26103
// tmp := tmp ^ UnitsInside ( i ) ;
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_VAR 0 3
26089: PUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 313
26099: ADD
26100: ST_TO_ADDR
26101: GO 26077
26103: POP
26104: POP
// for i in tmp do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 3
26114: PUSH
26115: FOR_IN
26116: IFFALSE 26278
// begin dist := 9999 ;
26118: LD_ADDR_VAR 0 8
26122: PUSH
26123: LD_INT 9999
26125: ST_TO_ADDR
// _xy := [ ] ;
26126: LD_ADDR_VAR 0 7
26130: PUSH
26131: EMPTY
26132: ST_TO_ADDR
// SetTag ( i , 1 ) ;
26133: LD_VAR 0 1
26137: PPUSH
26138: LD_INT 1
26140: PPUSH
26141: CALL_OW 109
// ComExitBuilding ( i ) ;
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 122
// for j in xy do
26154: LD_ADDR_VAR 0 2
26158: PUSH
26159: LD_VAR 0 5
26163: PUSH
26164: FOR_IN
26165: IFFALSE 26247
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < dist then
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_VAR 0 2
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 2
26185: PUSH
26186: LD_INT 2
26188: ARRAY
26189: PPUSH
26190: CALL_OW 297
26194: PUSH
26195: LD_VAR 0 8
26199: LESS
26200: IFFALSE 26245
// begin dist := GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) ;
26202: LD_ADDR_VAR 0 8
26206: PUSH
26207: LD_VAR 0 1
26211: PPUSH
26212: LD_VAR 0 2
26216: PUSH
26217: LD_INT 1
26219: ARRAY
26220: PPUSH
26221: LD_VAR 0 2
26225: PUSH
26226: LD_INT 2
26228: ARRAY
26229: PPUSH
26230: CALL_OW 297
26234: ST_TO_ADDR
// _xy := j ;
26235: LD_ADDR_VAR 0 7
26239: PUSH
26240: LD_VAR 0 2
26244: ST_TO_ADDR
// end ;
26245: GO 26164
26247: POP
26248: POP
// AddComMoveXY ( i , _xy [ 1 ] , _xy [ 2 ] ) ;
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_VAR 0 7
26258: PUSH
26259: LD_INT 1
26261: ARRAY
26262: PPUSH
26263: LD_VAR 0 7
26267: PUSH
26268: LD_INT 2
26270: ARRAY
26271: PPUSH
26272: CALL_OW 171
// end ;
26276: GO 26115
26278: POP
26279: POP
// tmp2 := UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_class , 1 ] ] ) ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_VAR 0 3
26289: PPUSH
26290: LD_INT 26
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 25
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PPUSH
26314: CALL_OW 72
26318: ST_TO_ADDR
// if tmp2 < 2 then
26319: LD_VAR 0 4
26323: PUSH
26324: LD_INT 2
26326: LESS
26327: IFFALSE 26396
// tmp2 := FilterAllUnits ( [ [ f_side , 8 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman_soldier ] ] ] ) diff [ Kurt , Kozlov ] ;
26329: LD_ADDR_VAR 0 4
26333: PUSH
26334: LD_INT 22
26336: PUSH
26337: LD_INT 8
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 26
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 3
26356: PUSH
26357: LD_INT 25
26359: PUSH
26360: LD_INT 15
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 69
26380: PUSH
26381: LD_EXP 63
26385: PUSH
26386: LD_EXP 64
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: DIFF
26395: ST_TO_ADDR
// if tmp2 then
26396: LD_VAR 0 4
26400: IFFALSE 26418
// Say ( tmp2 [ 1 ] , D6b-ArSol1-1 ) ;
26402: LD_VAR 0 4
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: LD_STRING D6b-ArSol1-1
26413: PPUSH
26414: CALL_OW 88
// async ;
26418: ASYNC
// Say ( Powell , D6b-Pow-2 ) ;
26419: LD_EXP 60
26423: PPUSH
26424: LD_STRING D6b-Pow-2
26426: PPUSH
26427: CALL_OW 88
// wait ( 0 0$0.5 ) ;
26431: LD_INT 18
26433: PPUSH
26434: CALL_OW 67
// if tmp2 > 1 then
26438: LD_VAR 0 4
26442: PUSH
26443: LD_INT 1
26445: GREATER
26446: IFFALSE 26464
// Say ( tmp2 [ 2 ] , D6b-ArSol2-1 ) ;
26448: LD_VAR 0 4
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PPUSH
26457: LD_STRING D6b-ArSol2-1
26459: PPUSH
26460: CALL_OW 88
// sync ;
26464: SYNC
// repeat wait ( 5 ) ;
26465: LD_INT 5
26467: PPUSH
26468: CALL_OW 67
// until GetSide ( HexInfo ( 93 , 36 ) ) = 4 ;
26472: LD_INT 93
26474: PPUSH
26475: LD_INT 36
26477: PPUSH
26478: CALL_OW 428
26482: PPUSH
26483: CALL_OW 255
26487: PUSH
26488: LD_INT 4
26490: EQUAL
26491: IFFALSE 26465
// DialogueOn ;
26493: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26497: LD_INT 10
26499: PPUSH
26500: CALL_OW 68
// Say ( Powell , D6b-Pow-2a ) ;
26504: LD_EXP 60
26508: PPUSH
26509: LD_STRING D6b-Pow-2a
26511: PPUSH
26512: CALL_OW 88
// DialogueOff ;
26516: CALL_OW 7
// ComAttackUnit ( IsInUnit ( Powell ) , kozlov_fac ) ;
26520: LD_EXP 60
26524: PPUSH
26525: CALL_OW 310
26529: PPUSH
26530: LD_INT 332
26532: PPUSH
26533: CALL_OW 115
// PlaceSeeing ( 93 , 35 , 1 , - 6 ) ;
26537: LD_INT 93
26539: PPUSH
26540: LD_INT 35
26542: PPUSH
26543: LD_INT 1
26545: PPUSH
26546: LD_INT 6
26548: NEG
26549: PPUSH
26550: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26554: LD_INT 35
26556: PPUSH
26557: CALL_OW 67
// if GetLives ( kozlov_fac ) < 1000 and IsLive ( kozlov_fac ) then
26561: LD_INT 332
26563: PPUSH
26564: CALL_OW 256
26568: PUSH
26569: LD_INT 1000
26571: LESS
26572: PUSH
26573: LD_INT 332
26575: PPUSH
26576: CALL_OW 300
26580: AND
26581: IFFALSE 26593
// SetLives ( kozlov_fac , 0 ) ;
26583: LD_INT 332
26585: PPUSH
26586: LD_INT 0
26588: PPUSH
26589: CALL_OW 234
// until IsDead ( kozlov_fac ) or IsDead ( Powell ) ;
26593: LD_INT 332
26595: PPUSH
26596: CALL_OW 301
26600: PUSH
26601: LD_EXP 60
26605: PPUSH
26606: CALL_OW 301
26610: OR
26611: IFFALSE 26554
// game_speed := 4 ;
26613: LD_ADDR_OWVAR 65
26617: PUSH
26618: LD_INT 4
26620: ST_TO_ADDR
// powellCenterCameraMode := false ;
26621: LD_ADDR_EXP 20
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// for i in tmp union FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) do
26629: LD_ADDR_VAR 0 1
26633: PUSH
26634: LD_VAR 0 3
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_INT 8
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 25
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PPUSH
26663: CALL_OW 69
26667: UNION
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26686
// SetTag ( i , 0 ) ;
26672: LD_VAR 0 1
26676: PPUSH
26677: LD_INT 0
26679: PPUSH
26680: CALL_OW 109
26684: GO 26669
26686: POP
26687: POP
// wait ( 0 0$3 ) ;
26688: LD_INT 105
26690: PPUSH
26691: CALL_OW 67
// RemoveSeeing ( 93 , 35 , 1 ) ;
26695: LD_INT 93
26697: PPUSH
26698: LD_INT 35
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 331
// DialogueOn ;
26708: CALL_OW 6
// Say ( speaker , D6c-Sol3-1 ) ;
26712: LD_VAR 0 11
26716: PPUSH
26717: LD_STRING D6c-Sol3-1
26719: PPUSH
26720: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
26724: LD_INT 10
26726: PPUSH
26727: CALL_OW 68
// Say ( JMM , D6c-JMM-1 ) ;
26731: LD_EXP 40
26735: PPUSH
26736: LD_STRING D6c-JMM-1
26738: PPUSH
26739: CALL_OW 88
// if Cyrus then
26743: LD_EXP 46
26747: IFFALSE 26761
// Say ( Cyrus , D6c-Cyrus-1 ) ;
26749: LD_EXP 46
26753: PPUSH
26754: LD_STRING D6c-Cyrus-1
26756: PPUSH
26757: CALL_OW 88
// if Bobby then
26761: LD_EXP 45
26765: IFFALSE 26779
// Say ( Bobby , D6c-Bobby-1 ) ;
26767: LD_EXP 45
26771: PPUSH
26772: LD_STRING D6c-Bobby-1
26774: PPUSH
26775: CALL_OW 88
// if Cornel then
26779: LD_EXP 51
26783: IFFALSE 26797
// Say ( Cornel , D6c-Corn-1 ) ;
26785: LD_EXP 51
26789: PPUSH
26790: LD_STRING D6c-Corn-1
26792: PPUSH
26793: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff ( speaker union JMM union vip ) ;
26797: LD_ADDR_VAR 0 4
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 22
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_INT 4
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 26
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 23
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 69
26859: PUSH
26860: LD_VAR 0 11
26864: PUSH
26865: LD_EXP 40
26869: UNION
26870: PUSH
26871: LD_EXP 61
26875: UNION
26876: DIFF
26877: ST_TO_ADDR
// if tmp2 then
26878: LD_VAR 0 4
26882: IFFALSE 26900
// Say ( tmp2 [ 1 ] , D6c-Sol1-1 ) ;
26884: LD_VAR 0 4
26888: PUSH
26889: LD_INT 1
26891: ARRAY
26892: PPUSH
26893: LD_STRING D6c-Sol1-1
26895: PPUSH
26896: CALL_OW 88
// if Lisa then
26900: LD_EXP 43
26904: IFFALSE 26918
// Say ( Lisa , D6c-Lisa-1 ) ;
26906: LD_EXP 43
26910: PPUSH
26911: LD_STRING D6c-Lisa-1
26913: PPUSH
26914: CALL_OW 88
// if Gary then
26918: LD_EXP 52
26922: IFFALSE 26936
// Say ( Gary , D6c-Gary-1 ) ;
26924: LD_EXP 52
26928: PPUSH
26929: LD_STRING D6c-Gary-1
26931: PPUSH
26932: CALL_OW 88
// if Donaldson then
26936: LD_EXP 44
26940: IFFALSE 26954
// Say ( Donaldson , D6c-Don-1 ) ;
26942: LD_EXP 44
26946: PPUSH
26947: LD_STRING D6c-Don-1
26949: PPUSH
26950: CALL_OW 88
// if tmp2 > 1 then
26954: LD_VAR 0 4
26958: PUSH
26959: LD_INT 1
26961: GREATER
26962: IFFALSE 26980
// Say ( tmp2 [ 2 ] , D6c-Sol2-1 ) ;
26964: LD_VAR 0 4
26968: PUSH
26969: LD_INT 2
26971: ARRAY
26972: PPUSH
26973: LD_STRING D6c-Sol2-1
26975: PPUSH
26976: CALL_OW 88
// Say ( speaker , D6c-Sol3-2 ) ;
26980: LD_VAR 0 11
26984: PPUSH
26985: LD_STRING D6c-Sol3-2
26987: PPUSH
26988: CALL_OW 88
// if IsInUnit ( JMM ) then
26992: LD_EXP 40
26996: PPUSH
26997: CALL_OW 310
27001: IFFALSE 27019
// CenterNowOnUnits ( IsInUnit ( JMM ) ) else
27003: LD_EXP 40
27007: PPUSH
27008: CALL_OW 310
27012: PPUSH
27013: CALL_OW 87
27017: GO 27028
// CenterNowOnUnits ( JMM ) ;
27019: LD_EXP 40
27023: PPUSH
27024: CALL_OW 87
// dwait ( 0 0$2 ) ;
27028: LD_INT 70
27030: PPUSH
27031: CALL_OW 68
// Say ( JMM , D6c-JMM-2 ) ;
27035: LD_EXP 40
27039: PPUSH
27040: LD_STRING D6c-JMM-2
27042: PPUSH
27043: CALL_OW 88
// DialogueOff ;
27047: CALL_OW 7
// Video ( false ) ;
27051: LD_INT 0
27053: PPUSH
27054: CALL 106351 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
27058: LD_INT 22
27060: PUSH
27061: LD_INT 4
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 69
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL_OW 235
// ChangeSideFog ( 4 , 4 ) ;
27080: LD_INT 4
27082: PPUSH
27083: LD_INT 4
27085: PPUSH
27086: CALL_OW 343
// for i in GetTechNation ( 4 , 1 , 2 ) do
27090: LD_ADDR_VAR 0 1
27094: PUSH
27095: LD_INT 4
27097: PPUSH
27098: LD_INT 1
27100: PPUSH
27101: LD_INT 2
27103: PPUSH
27104: CALL 69121 0 3
27108: PUSH
27109: FOR_IN
27110: IFFALSE 27147
// if GetTech ( i , 1 ) <> state_researched then
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_INT 1
27119: PPUSH
27120: CALL_OW 321
27124: PUSH
27125: LD_INT 2
27127: NONEQUAL
27128: IFFALSE 27145
// SetTech ( i , 1 , state_researched ) ;
27130: LD_VAR 0 1
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: LD_INT 2
27140: PPUSH
27141: CALL_OW 322
27145: GO 27109
27147: POP
27148: POP
// missionStage := 6 ;
27149: LD_ADDR_EXP 15
27153: PUSH
27154: LD_INT 6
27156: ST_TO_ADDR
// activeAttacks := true ;
27157: LD_ADDR_EXP 16
27161: PUSH
27162: LD_INT 1
27164: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
27165: LD_STRING M2
27167: PPUSH
27168: CALL_OW 337
// SaveForQuickRestart ;
27172: CALL_OW 22
// wait ( 0 0$40 ) ;
27176: LD_INT 1400
27178: PPUSH
27179: CALL_OW 67
// DialogueOn ;
27183: CALL_OW 6
// SayRadioNoFaceNoName ( Friend , D7-Friend-1 ) ;
27187: LD_EXP 65
27191: PPUSH
27192: LD_STRING D7-Friend-1
27194: PPUSH
27195: CALL 110298 0 2
// Say ( JMM , D7-JMM-1 ) ;
27199: LD_EXP 40
27203: PPUSH
27204: LD_STRING D7-JMM-1
27206: PPUSH
27207: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-2 ) ;
27211: LD_EXP 65
27215: PPUSH
27216: LD_STRING D7-Friend-2
27218: PPUSH
27219: CALL 110298 0 2
// Say ( JMM , D7-JMM-2 ) ;
27223: LD_EXP 40
27227: PPUSH
27228: LD_STRING D7-JMM-2
27230: PPUSH
27231: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-3 ) ;
27235: LD_EXP 65
27239: PPUSH
27240: LD_STRING D7-Friend-3
27242: PPUSH
27243: CALL 110298 0 2
// Say ( JMM , D7-JMM-3 ) ;
27247: LD_EXP 40
27251: PPUSH
27252: LD_STRING D7-JMM-3
27254: PPUSH
27255: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-4 ) ;
27259: LD_EXP 65
27263: PPUSH
27264: LD_STRING D7-Friend-4
27266: PPUSH
27267: CALL 110298 0 2
// Say ( JMM , D7-JMM-4 ) ;
27271: LD_EXP 40
27275: PPUSH
27276: LD_STRING D7-JMM-4
27278: PPUSH
27279: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-5 ) ;
27283: LD_EXP 65
27287: PPUSH
27288: LD_STRING D7-Friend-5
27290: PPUSH
27291: CALL 110298 0 2
// Say ( JMM , D7-JMM-5 ) ;
27295: LD_EXP 40
27299: PPUSH
27300: LD_STRING D7-JMM-5
27302: PPUSH
27303: CALL_OW 88
// SayRadioNoFaceNoName ( Friend , D7-Friend-6 ) ;
27307: LD_EXP 65
27311: PPUSH
27312: LD_STRING D7-Friend-6
27314: PPUSH
27315: CALL 110298 0 2
// Say ( JMM , D7-JMM-6 ) ;
27319: LD_EXP 40
27323: PPUSH
27324: LD_STRING D7-JMM-6
27326: PPUSH
27327: CALL_OW 88
// DialogueOff ;
27331: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
27335: LD_STRING Mlegion
27337: PPUSH
27338: CALL_OW 337
// skirmish := true ;
27342: LD_ADDR_EXP 99
27346: PUSH
27347: LD_INT 1
27349: ST_TO_ADDR
// RebuildKozlovFactory ;
27350: CALL 5172 0 0
// end ;
27354: PPOPN 13
27356: END
// every 0 0$2 trigger powellCenterCameraMode and IsLive ( Powell ) do
27357: LD_EXP 20
27361: PUSH
27362: LD_EXP 60
27366: PPUSH
27367: CALL_OW 300
27371: AND
27372: IFFALSE 27414
27374: GO 27376
27376: DISABLE
// begin enable ;
27377: ENABLE
// if IsInUnit ( Powell ) then
27378: LD_EXP 60
27382: PPUSH
27383: CALL_OW 310
27387: IFFALSE 27405
// CenterOnUnits ( IsInUnit ( Powell ) ) else
27389: LD_EXP 60
27393: PPUSH
27394: CALL_OW 310
27398: PPUSH
27399: CALL_OW 85
27403: GO 27414
// CenterOnUnits ( Powell ) ;
27405: LD_EXP 60
27409: PPUSH
27410: CALL_OW 85
// end ;
27414: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) do var bomb , target ;
27415: LD_INT 22
27417: PUSH
27418: LD_INT 8
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 34
27427: PUSH
27428: LD_INT 48
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PPUSH
27439: CALL_OW 69
27443: IFFALSE 27717
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
27451: PPUSH
// begin if missionStage < 9 then
27452: LD_EXP 15
27456: PUSH
27457: LD_INT 9
27459: LESS
27460: IFFALSE 27470
// missionStage := 9 ;
27462: LD_ADDR_EXP 15
27466: PUSH
27467: LD_INT 9
27469: ST_TO_ADDR
// bomb := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
27470: LD_ADDR_VAR 0 1
27474: PUSH
27475: LD_INT 22
27477: PUSH
27478: LD_INT 8
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 34
27487: PUSH
27488: LD_INT 48
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: PUSH
27504: LD_INT 1
27506: ARRAY
27507: ST_TO_ADDR
// wait ( 0 0$05 ) ;
27508: LD_INT 175
27510: PPUSH
27511: CALL_OW 67
// if FakeInfo or KurtStatus in [ 0 , 2 ] then
27515: LD_EXP 12
27519: PUSH
27520: LD_EXP 3
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: IN
27535: OR
27536: IFFALSE 27559
// target := [ 68 , 108 , 1 ] else
27538: LD_ADDR_VAR 0 2
27542: PUSH
27543: LD_INT 68
27545: PUSH
27546: LD_INT 108
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
27557: GO 27578
// target := [ 181 , 88 , 2 ] ;
27559: LD_ADDR_VAR 0 2
27563: PUSH
27564: LD_INT 181
27566: PUSH
27567: LD_INT 88
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// AddComAttackPlace ( bomb , target [ 1 ] , target [ 2 ] ) ;
27578: LD_VAR 0 1
27582: PPUSH
27583: LD_VAR 0 2
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PPUSH
27592: LD_VAR 0 2
27596: PUSH
27597: LD_INT 2
27599: ARRAY
27600: PPUSH
27601: CALL_OW 176
// if target [ 3 ] = 1 then
27605: LD_VAR 0 2
27609: PUSH
27610: LD_INT 3
27612: ARRAY
27613: PUSH
27614: LD_INT 1
27616: EQUAL
27617: IFFALSE 27633
// SayRadio ( Kurt , D12-Kurt-1 ) else
27619: LD_EXP 63
27623: PPUSH
27624: LD_STRING D12-Kurt-1
27626: PPUSH
27627: CALL_OW 94
27631: GO 27657
// begin SayRadio ( Kurt , D12a-Kurt-1 ) ;
27633: LD_EXP 63
27637: PPUSH
27638: LD_STRING D12a-Kurt-1
27640: PPUSH
27641: CALL_OW 94
// SayRadio ( Roth , D12a-Roth-1 ) ;
27645: LD_EXP 78
27649: PPUSH
27650: LD_STRING D12a-Roth-1
27652: PPUSH
27653: CALL_OW 94
// end ; wait ( 0 0$10 ) ;
27657: LD_INT 350
27659: PPUSH
27660: CALL_OW 67
// AddComRecycle ( bomb , FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
27664: LD_VAR 0 1
27668: PPUSH
27669: LD_INT 22
27671: PUSH
27672: LD_INT 8
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 23
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 30
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: PPUSH
27704: CALL_OW 69
27708: PUSH
27709: LD_INT 1
27711: ARRAY
27712: PPUSH
27713: CALL_OW 228
// end ;
27717: PPOPN 2
27719: END
// every 0 0$3 trigger ( GetLives ( Kurt ) < 999 or FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) and not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ru_siberium_rocket ] ] ) and IsOk ( Kurt ) and FilterUnitsInArea ( legionBaseArea , [ f_side , 1 ] ) do var i , tmp , x ;
27720: LD_EXP 63
27724: PPUSH
27725: CALL_OW 256
27729: PUSH
27730: LD_INT 999
27732: LESS
27733: PUSH
27734: LD_INT 22
27736: PUSH
27737: LD_INT 8
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 21
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 23
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: PUSH
27774: LD_INT 9
27776: PUSH
27777: LD_INT 8
27779: PUSH
27780: LD_INT 7
27782: PUSH
27783: LD_INT 6
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: PUSH
27792: LD_OWVAR 67
27796: ARRAY
27797: LESSEQUAL
27798: OR
27799: PUSH
27800: LD_INT 22
27802: PUSH
27803: LD_INT 8
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 34
27812: PUSH
27813: LD_INT 48
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PPUSH
27824: CALL_OW 69
27828: NOT
27829: AND
27830: PUSH
27831: LD_EXP 63
27835: PPUSH
27836: CALL_OW 302
27840: AND
27841: PUSH
27842: LD_INT 5
27844: PPUSH
27845: LD_INT 22
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PPUSH
27855: CALL_OW 70
27859: AND
27860: IFFALSE 28622
27862: GO 27864
27864: DISABLE
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
27869: PPUSH
// begin legionDestroyed := true ;
27870: LD_ADDR_EXP 22
27874: PUSH
27875: LD_INT 1
27877: ST_TO_ADDR
// DialogueOn ;
27878: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
27882: LD_EXP 40
27886: PPUSH
27887: LD_STRING D13-JMM-1
27889: PPUSH
27890: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
27894: LD_EXP 63
27898: PPUSH
27899: LD_STRING D13-Kurt-1
27901: PPUSH
27902: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
27906: LD_EXP 40
27910: PPUSH
27911: LD_STRING D13-JMM-2
27913: PPUSH
27914: CALL_OW 88
// if FakeInfo then
27918: LD_EXP 12
27922: IFFALSE 27942
// begin Say ( Kurt , D13-Kurt-2 ) ;
27924: LD_EXP 63
27928: PPUSH
27929: LD_STRING D13-Kurt-2
27931: PPUSH
27932: CALL_OW 88
// DialogueOff ;
27936: CALL_OW 7
// exit ;
27940: GO 28622
// end ; if not KurtStatus then
27942: LD_EXP 3
27946: NOT
27947: IFFALSE 27963
// Say ( Kurt , D13-Kurt-2b ) else
27949: LD_EXP 63
27953: PPUSH
27954: LD_STRING D13-Kurt-2b
27956: PPUSH
27957: CALL_OW 88
27961: GO 27975
// Say ( Kurt , D13-Kurt-2a ) ;
27963: LD_EXP 63
27967: PPUSH
27968: LD_STRING D13-Kurt-2a
27970: PPUSH
27971: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
27975: LD_EXP 40
27979: PPUSH
27980: LD_STRING D13-JMM-3
27982: PPUSH
27983: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
27987: LD_EXP 63
27991: PPUSH
27992: LD_STRING D13-Kurt-3
27994: PPUSH
27995: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
27999: LD_EXP 40
28003: PPUSH
28004: LD_STRING D13-JMM-4
28006: PPUSH
28007: CALL_OW 88
// DialogueOff ;
28011: CALL_OW 7
// ChangeMissionObjectives ( MlegionOut ) ;
28015: LD_STRING MlegionOut
28017: PPUSH
28018: CALL_OW 337
// MC_Kill ( 3 ) ;
28022: LD_INT 3
28024: PPUSH
28025: CALL 38607 0 1
// KillUnit ( Kozlov ) ;
28029: LD_EXP 64
28033: PPUSH
28034: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 3 ] , [ f_not , [ f_type , b_turret ] ] ] ) do
28038: LD_ADDR_VAR 0 1
28042: PUSH
28043: LD_INT 22
28045: PUSH
28046: LD_INT 8
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 23
28055: PUSH
28056: LD_INT 3
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 21
28068: PUSH
28069: LD_INT 33
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: PPUSH
28085: CALL_OW 69
28089: PUSH
28090: FOR_IN
28091: IFFALSE 28104
// KillUnit ( i ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: CALL_OW 66
28102: GO 28090
28104: POP
28105: POP
// ChangeSideFog ( 8 , 1 ) ;
28106: LD_INT 8
28108: PPUSH
28109: LD_INT 1
28111: PPUSH
28112: CALL_OW 343
// tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) diff [ Kozlov , Kurt ] ;
28116: LD_ADDR_VAR 0 2
28120: PUSH
28121: LD_INT 22
28123: PUSH
28124: LD_INT 8
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 21
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: PUSH
28150: LD_EXP 64
28154: PUSH
28155: LD_EXP 63
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: DIFF
28164: ST_TO_ADDR
// if tmp >= [ 6 , 5 , 4 , 3 ] [ Difficulty ] then
28165: LD_VAR 0 2
28169: PUSH
28170: LD_INT 6
28172: PUSH
28173: LD_INT 5
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: PUSH
28188: LD_OWVAR 67
28192: ARRAY
28193: GREATEREQUAL
28194: IFFALSE 28346
// begin x := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_INT 6
28203: PUSH
28204: LD_INT 5
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 3
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: PUSH
28219: LD_OWVAR 67
28223: ARRAY
28224: ST_TO_ADDR
// for i := tmp - ( x + 1 ) downto 1 do
28225: LD_ADDR_VAR 0 1
28229: PUSH
28230: DOUBLE
28231: LD_VAR 0 2
28235: PUSH
28236: LD_VAR 0 3
28240: PUSH
28241: LD_INT 1
28243: PLUS
28244: MINUS
28245: INC
28246: ST_TO_ADDR
28247: LD_INT 1
28249: PUSH
28250: FOR_DOWNTO
28251: IFFALSE 28342
// begin legionEscapeUnits := legionEscapeUnits ^ tmp [ i ] ;
28253: LD_ADDR_EXP 38
28257: PUSH
28258: LD_EXP 38
28262: PUSH
28263: LD_VAR 0 2
28267: PUSH
28268: LD_VAR 0 1
28272: ARRAY
28273: ADD
28274: ST_TO_ADDR
// if IsInUnit ( tmp [ i ] ) then
28275: LD_VAR 0 2
28279: PUSH
28280: LD_VAR 0 1
28284: ARRAY
28285: PPUSH
28286: CALL_OW 310
28290: IFFALSE 28307
// ComExit ( tmp [ i ] ) ;
28292: LD_VAR 0 2
28296: PUSH
28297: LD_VAR 0 1
28301: ARRAY
28302: PPUSH
28303: CALL 106777 0 1
// AddComMoveXY ( tmp [ i ] , 34 + rand ( 0 , 6 ) , 1 ) ;
28307: LD_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: ARRAY
28317: PPUSH
28318: LD_INT 34
28320: PUSH
28321: LD_INT 0
28323: PPUSH
28324: LD_INT 6
28326: PPUSH
28327: CALL_OW 12
28331: PLUS
28332: PPUSH
28333: LD_INT 1
28335: PPUSH
28336: CALL_OW 171
// end ;
28340: GO 28250
28342: POP
28343: POP
// end else
28344: GO 28356
// x := tmp ;
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_VAR 0 2
28355: ST_TO_ADDR
// for i := tmp downto tmp - x do
28356: LD_ADDR_VAR 0 1
28360: PUSH
28361: DOUBLE
28362: LD_VAR 0 2
28366: INC
28367: ST_TO_ADDR
28368: LD_VAR 0 2
28372: PUSH
28373: LD_VAR 0 3
28377: MINUS
28378: PUSH
28379: FOR_DOWNTO
28380: IFFALSE 28452
// begin if IsInUnit ( tmp [ i ] ) then
28382: LD_VAR 0 2
28386: PUSH
28387: LD_VAR 0 1
28391: ARRAY
28392: PPUSH
28393: CALL_OW 310
28397: IFFALSE 28414
// ComExit ( tmp [ i ] ) ;
28399: LD_VAR 0 2
28403: PUSH
28404: LD_VAR 0 1
28408: ARRAY
28409: PPUSH
28410: CALL 106777 0 1
// SetSide ( tmp [ i ] , 1 ) ;
28414: LD_VAR 0 2
28418: PUSH
28419: LD_VAR 0 1
28423: ARRAY
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: CALL_OW 235
// SetLives ( tmp [ i ] , 1000 ) ;
28432: LD_VAR 0 2
28436: PUSH
28437: LD_VAR 0 1
28441: ARRAY
28442: PPUSH
28443: LD_INT 1000
28445: PPUSH
28446: CALL_OW 234
// end ;
28450: GO 28379
28452: POP
28453: POP
// wait ( 0 0$0.3 ) ;
28454: LD_INT 10
28456: PPUSH
28457: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) do
28461: LD_ADDR_VAR 0 1
28465: PUSH
28466: LD_INT 22
28468: PUSH
28469: LD_INT 8
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 21
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: PUSH
28495: FOR_IN
28496: IFFALSE 28509
// KillUnit ( i ) ;
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 66
28507: GO 28495
28509: POP
28510: POP
// SetSide ( Kurt , 1 ) ;
28511: LD_EXP 63
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) , 1 ) ;
28523: LD_INT 22
28525: PUSH
28526: LD_INT 8
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 21
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PPUSH
28547: CALL_OW 69
28551: PPUSH
28552: LD_INT 1
28554: PPUSH
28555: CALL_OW 235
// SetAttitude ( 8 , 1 , att_friend , true ) ;
28559: LD_INT 8
28561: PPUSH
28562: LD_INT 1
28564: PPUSH
28565: LD_INT 1
28567: PPUSH
28568: LD_INT 1
28570: PPUSH
28571: CALL_OW 80
// wait ( 1 1$20 ) ;
28575: LD_INT 2800
28577: PPUSH
28578: CALL_OW 67
// PlaceUnitXY ( Friend , 37 , 1 , false ) ;
28582: LD_EXP 65
28586: PPUSH
28587: LD_INT 37
28589: PPUSH
28590: LD_INT 1
28592: PPUSH
28593: LD_INT 0
28595: PPUSH
28596: CALL_OW 48
// wait ( 0 0$1 ) ;
28600: LD_INT 35
28602: PPUSH
28603: CALL_OW 67
// ComMoveXY ( Friend , 60 , 95 ) ;
28607: LD_EXP 65
28611: PPUSH
28612: LD_INT 60
28614: PPUSH
28615: LD_INT 95
28617: PPUSH
28618: CALL_OW 111
// end ;
28622: PPOPN 3
28624: END
// every 0 0$1 trigger not legionDestroyed and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 do
28625: LD_EXP 22
28629: NOT
28630: PUSH
28631: LD_INT 22
28633: PUSH
28634: LD_INT 8
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 21
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PPUSH
28655: CALL_OW 69
28659: PUSH
28660: LD_INT 0
28662: EQUAL
28663: AND
28664: IFFALSE 28684
28666: GO 28668
28668: DISABLE
// begin legionDestroyed := true ;
28669: LD_ADDR_EXP 22
28673: PUSH
28674: LD_INT 1
28676: ST_TO_ADDR
// ChangeMissionObjectives ( MlegionOut ) ;
28677: LD_STRING MlegionOut
28679: PPUSH
28680: CALL_OW 337
// end ;
28684: END
// every 0 0$1 trigger legionEscapeUnits do var i ;
28685: LD_EXP 38
28689: IFFALSE 28764
28691: GO 28693
28693: DISABLE
28694: LD_INT 0
28696: PPUSH
// begin enable ;
28697: ENABLE
// for i in legionEscapeUnits do
28698: LD_ADDR_VAR 0 1
28702: PUSH
28703: LD_EXP 38
28707: PUSH
28708: FOR_IN
28709: IFFALSE 28762
// begin if IsInArea ( i , legionEscapeArea ) then
28711: LD_VAR 0 1
28715: PPUSH
28716: LD_INT 31
28718: PPUSH
28719: CALL_OW 308
28723: IFFALSE 28736
// RemoveUnit ( i ) else
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 64
28734: GO 28760
// if not HasTask ( i ) then
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 314
28745: NOT
28746: IFFALSE 28760
// ComMoveToArea ( i , legionEscapeArea ) ;
28748: LD_VAR 0 1
28752: PPUSH
28753: LD_INT 31
28755: PPUSH
28756: CALL_OW 113
// end ;
28760: GO 28708
28762: POP
28763: POP
// end ;
28764: PPOPN 1
28766: END
// every 0 0$3 trigger See ( 1 , Friend ) do var dec ;
28767: LD_INT 1
28769: PPUSH
28770: LD_EXP 65
28774: PPUSH
28775: CALL_OW 292
28779: IFFALSE 29077
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
// begin wait ( 0 0$2 ) ;
28787: LD_INT 70
28789: PPUSH
28790: CALL_OW 67
// CenterNowOnUnits ( Friend ) ;
28794: LD_EXP 65
28798: PPUSH
28799: CALL_OW 87
// DialogueOn ;
28803: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
28807: LD_EXP 40
28811: PPUSH
28812: LD_STRING D14-JMM-1
28814: PPUSH
28815: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
28819: LD_EXP 65
28823: PPUSH
28824: LD_STRING D14-Friend-1
28826: PPUSH
28827: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
28831: LD_EXP 40
28835: PPUSH
28836: LD_STRING D14-JMM-2
28838: PPUSH
28839: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
28843: LD_EXP 65
28847: PPUSH
28848: LD_STRING D14-Friend-2
28850: PPUSH
28851: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
28855: LD_EXP 40
28859: PPUSH
28860: LD_STRING D14-JMM-3
28862: PPUSH
28863: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
28867: LD_EXP 65
28871: PPUSH
28872: LD_STRING D14-Friend-3
28874: PPUSH
28875: CALL_OW 88
// DialogueOff ;
28879: CALL_OW 7
// dec := Query ( Q14 ) ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_STRING Q14
28890: PPUSH
28891: CALL_OW 97
28895: ST_TO_ADDR
// if dec = 1 then
28896: LD_VAR 0 1
28900: PUSH
28901: LD_INT 1
28903: EQUAL
28904: IFFALSE 28938
// begin DialogueOn ;
28906: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
28910: LD_EXP 40
28914: PPUSH
28915: LD_STRING D14a-JMM-1
28917: PPUSH
28918: CALL_OW 88
// DialogueOff ;
28922: CALL_OW 7
// SetSide ( Friend , 1 ) ;
28926: LD_EXP 65
28930: PPUSH
28931: LD_INT 1
28933: PPUSH
28934: CALL_OW 235
// end ; if dec = 2 then
28938: LD_VAR 0 1
28942: PUSH
28943: LD_INT 2
28945: EQUAL
28946: IFFALSE 28999
// begin DialogueOn ;
28948: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
28952: LD_EXP 40
28956: PPUSH
28957: LD_STRING D14b-JMM-1
28959: PPUSH
28960: CALL_OW 88
// DialogueOff ;
28964: CALL_OW 7
// wait ( 0 0$1 ) ;
28968: LD_INT 35
28970: PPUSH
28971: CALL_OW 67
// ComMoveXY ( Friend , 9 , 2 ) ;
28975: LD_EXP 65
28979: PPUSH
28980: LD_INT 9
28982: PPUSH
28983: LD_INT 2
28985: PPUSH
28986: CALL_OW 111
// AddComHold ( Friend ) ;
28990: LD_EXP 65
28994: PPUSH
28995: CALL_OW 200
// end ; if dec = 3 then
28999: LD_VAR 0 1
29003: PUSH
29004: LD_INT 3
29006: EQUAL
29007: IFFALSE 29077
// begin DialogueOn ;
29009: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
29013: LD_EXP 40
29017: PPUSH
29018: LD_STRING D14c-JMM-1
29020: PPUSH
29021: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
29025: LD_EXP 65
29029: PPUSH
29030: LD_STRING D14c-Friend-1
29032: PPUSH
29033: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
29037: LD_EXP 40
29041: PPUSH
29042: LD_STRING D14c-JMM-2
29044: PPUSH
29045: CALL_OW 88
// DialogueOff ;
29049: CALL_OW 7
// ComMoveXY ( Friend , 9 , 2 ) ;
29053: LD_EXP 65
29057: PPUSH
29058: LD_INT 9
29060: PPUSH
29061: LD_INT 2
29063: PPUSH
29064: CALL_OW 111
// AddComHold ( Friend ) ;
29068: LD_EXP 65
29072: PPUSH
29073: CALL_OW 200
// end ; end ;
29077: PPOPN 1
29079: END
// every 0 0$1 trigger HexInfo ( 9 , 2 ) = Friend and GetSide ( Friend ) = 8 do
29080: LD_INT 9
29082: PPUSH
29083: LD_INT 2
29085: PPUSH
29086: CALL_OW 428
29090: PUSH
29091: LD_EXP 65
29095: EQUAL
29096: PUSH
29097: LD_EXP 65
29101: PPUSH
29102: CALL_OW 255
29106: PUSH
29107: LD_INT 8
29109: EQUAL
29110: AND
29111: IFFALSE 29125
29113: GO 29115
29115: DISABLE
// RemoveUnit ( Friend ) ;
29116: LD_EXP 65
29120: PPUSH
29121: CALL_OW 64
29125: END
// every 0 0$1 trigger missionTime >= 15 15$00 and JMMGirl and KappaStatus do var i , veh , vehG ;
29126: LD_EXP 14
29130: PUSH
29131: LD_INT 31500
29133: GREATEREQUAL
29134: PUSH
29135: LD_EXP 7
29139: AND
29140: PUSH
29141: LD_EXP 2
29145: AND
29146: IFFALSE 29576
29148: GO 29150
29150: DISABLE
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
29155: PPUSH
// begin missionStage := 7 ;
29156: LD_ADDR_EXP 15
29160: PUSH
29161: LD_INT 7
29163: ST_TO_ADDR
// uc_side = 1 ;
29164: LD_ADDR_OWVAR 20
29168: PUSH
29169: LD_INT 1
29171: ST_TO_ADDR
// uc_nation = 1 ;
29172: LD_ADDR_OWVAR 21
29176: PUSH
29177: LD_INT 1
29179: ST_TO_ADDR
// for i = 1 to 5 do
29180: LD_ADDR_VAR 0 1
29184: PUSH
29185: DOUBLE
29186: LD_INT 1
29188: DEC
29189: ST_TO_ADDR
29190: LD_INT 5
29192: PUSH
29193: FOR_TO
29194: IFFALSE 29290
// begin vc_engine = 3 ;
29196: LD_ADDR_OWVAR 39
29200: PUSH
29201: LD_INT 3
29203: ST_TO_ADDR
// vc_control = 3 ;
29204: LD_ADDR_OWVAR 38
29208: PUSH
29209: LD_INT 3
29211: ST_TO_ADDR
// vc_chassis = 3 ;
29212: LD_ADDR_OWVAR 37
29216: PUSH
29217: LD_INT 3
29219: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
29220: LD_ADDR_OWVAR 40
29224: PUSH
29225: LD_INT 5
29227: PUSH
29228: LD_INT 9
29230: PUSH
29231: LD_INT 7
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PPUSH
29242: LD_INT 3
29244: PPUSH
29245: CALL_OW 12
29249: ARRAY
29250: ST_TO_ADDR
// veh = CreateVehicle ;
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: CALL_OW 45
29260: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
29261: LD_VAR 0 2
29265: PPUSH
29266: LD_INT 1
29268: PPUSH
29269: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
29273: LD_VAR 0 2
29277: PPUSH
29278: LD_INT 19
29280: PPUSH
29281: LD_INT 0
29283: PPUSH
29284: CALL_OW 49
// end ;
29288: GO 29193
29290: POP
29291: POP
// vc_engine = 3 ;
29292: LD_ADDR_OWVAR 39
29296: PUSH
29297: LD_INT 3
29299: ST_TO_ADDR
// vc_control = 1 ;
29300: LD_ADDR_OWVAR 38
29304: PUSH
29305: LD_INT 1
29307: ST_TO_ADDR
// vc_chassis = 3 ;
29308: LD_ADDR_OWVAR 37
29312: PUSH
29313: LD_INT 3
29315: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
29316: LD_ADDR_OWVAR 40
29320: PUSH
29321: LD_INT 5
29323: PUSH
29324: LD_INT 9
29326: PUSH
29327: LD_INT 7
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: PPUSH
29338: LD_INT 3
29340: PPUSH
29341: CALL_OW 12
29345: ARRAY
29346: ST_TO_ADDR
// vehG = CreateVehicle ;
29347: LD_ADDR_VAR 0 3
29351: PUSH
29352: CALL_OW 45
29356: ST_TO_ADDR
// SetDir ( vehG , 1 ) ;
29357: LD_VAR 0 3
29361: PPUSH
29362: LD_INT 1
29364: PPUSH
29365: CALL_OW 233
// PlaceUnitArea ( vehG , reinforcementsArea , false ) ;
29369: LD_VAR 0 3
29373: PPUSH
29374: LD_INT 19
29376: PPUSH
29377: LD_INT 0
29379: PPUSH
29380: CALL_OW 49
// if JMMGirl = 1 then
29384: LD_EXP 7
29388: PUSH
29389: LD_INT 1
29391: EQUAL
29392: IFFALSE 29448
// begin Joan = PrepareUnit ( Joan , true , 14_ ) ;
29394: LD_ADDR_EXP 41
29398: PUSH
29399: LD_STRING Joan
29401: PPUSH
29402: LD_INT 1
29404: PPUSH
29405: LD_STRING 14_
29407: PPUSH
29408: CALL 69058 0 3
29412: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , vehG ) ;
29413: LD_EXP 41
29417: PPUSH
29418: LD_VAR 0 3
29422: PPUSH
29423: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
29436: LD_EXP 41
29440: PPUSH
29441: LD_STRING D10BW-Joan-1
29443: PPUSH
29444: CALL_OW 94
// end ; if JMMGirl = 2 then
29448: LD_EXP 7
29452: PUSH
29453: LD_INT 2
29455: EQUAL
29456: IFFALSE 29512
// begin Lisa = PrepareUnit ( Lisa , true , 14_ ) ;
29458: LD_ADDR_EXP 43
29462: PUSH
29463: LD_STRING Lisa
29465: PPUSH
29466: LD_INT 1
29468: PPUSH
29469: LD_STRING 14_
29471: PPUSH
29472: CALL 69058 0 3
29476: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , vehG ) ;
29477: LD_EXP 43
29481: PPUSH
29482: LD_VAR 0 3
29486: PPUSH
29487: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
29491: LD_VAR 0 3
29495: PPUSH
29496: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
29500: LD_EXP 43
29504: PPUSH
29505: LD_STRING D10BW-Lisa-1
29507: PPUSH
29508: CALL_OW 94
// end ; if JMMGirl = 3 then
29512: LD_EXP 7
29516: PUSH
29517: LD_INT 3
29519: EQUAL
29520: IFFALSE 29576
// begin Connie = PrepareUnit ( Connie , true , 14_ ) ;
29522: LD_ADDR_EXP 55
29526: PUSH
29527: LD_STRING Connie
29529: PPUSH
29530: LD_INT 1
29532: PPUSH
29533: LD_STRING 14_
29535: PPUSH
29536: CALL 69058 0 3
29540: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , vehG ) ;
29541: LD_EXP 55
29545: PPUSH
29546: LD_VAR 0 3
29550: PPUSH
29551: CALL_OW 52
// CenterNowOnUnits ( vehG ) ;
29555: LD_VAR 0 3
29559: PPUSH
29560: CALL_OW 87
// SayRadio ( Connie , D10BW-Con-1 ) ;
29564: LD_EXP 55
29568: PPUSH
29569: LD_STRING D10BW-Con-1
29571: PPUSH
29572: CALL_OW 94
// end ; end ;
29576: PPOPN 3
29578: END
// every 0 0$1 trigger missionTime >= 45 45$00 do var i , veh , tmp ;
29579: LD_EXP 14
29583: PUSH
29584: LD_INT 94500
29586: GREATEREQUAL
29587: IFFALSE 29999
29589: GO 29591
29591: DISABLE
29592: LD_INT 0
29594: PPUSH
29595: PPUSH
29596: PPUSH
// begin tmp := PrepareStevensSquad ;
29597: LD_ADDR_VAR 0 3
29601: PUSH
29602: CALL 2323 0 0
29606: ST_TO_ADDR
// if not tmp then
29607: LD_VAR 0 3
29611: NOT
29612: IFFALSE 29616
// exit ;
29614: GO 29999
// uc_side := 1 ;
29616: LD_ADDR_OWVAR 20
29620: PUSH
29621: LD_INT 1
29623: ST_TO_ADDR
// uc_nation := 1 ;
29624: LD_ADDR_OWVAR 21
29628: PUSH
29629: LD_INT 1
29631: ST_TO_ADDR
// for i in tmp do
29632: LD_ADDR_VAR 0 1
29636: PUSH
29637: LD_VAR 0 3
29641: PUSH
29642: FOR_IN
29643: IFFALSE 29740
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , [ us_double_gun , us_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 40 ) ;
29645: LD_INT 3
29647: PPUSH
29648: LD_INT 3
29650: PPUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 5
29656: PUSH
29657: LD_INT 9
29659: PUSH
29660: LD_INT 7
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PPUSH
29671: LD_INT 3
29673: PPUSH
29674: CALL_OW 12
29678: ARRAY
29679: PPUSH
29680: LD_INT 40
29682: PPUSH
29683: CALL 73898 0 5
// veh := CreateVehicle ;
29687: LD_ADDR_VAR 0 2
29691: PUSH
29692: CALL_OW 45
29696: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
29697: LD_VAR 0 2
29701: PPUSH
29702: LD_INT 1
29704: PPUSH
29705: CALL_OW 233
// PlaceUnitArea ( veh , reinforcementsArea , false ) ;
29709: LD_VAR 0 2
29713: PPUSH
29714: LD_INT 19
29716: PPUSH
29717: LD_INT 0
29719: PPUSH
29720: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_VAR 0 2
29733: PPUSH
29734: CALL_OW 52
// end ;
29738: GO 29642
29740: POP
29741: POP
// missionStage := 8 ;
29742: LD_ADDR_EXP 15
29746: PUSH
29747: LD_INT 8
29749: ST_TO_ADDR
// DialogueOn ;
29750: CALL_OW 6
// if Stevens then
29754: LD_EXP 42
29758: IFFALSE 29872
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
29760: LD_EXP 42
29764: PPUSH
29765: CALL_OW 310
29769: PPUSH
29770: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
29774: LD_EXP 42
29778: PPUSH
29779: LD_STRING D8-Huck-1
29781: PPUSH
29782: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
29786: LD_EXP 40
29790: PPUSH
29791: LD_STRING D8-JMM-1
29793: PPUSH
29794: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
29798: LD_EXP 42
29802: PPUSH
29803: LD_STRING D8-Huck-2
29805: PPUSH
29806: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
29810: LD_EXP 40
29814: PPUSH
29815: LD_STRING D8-JMM-2
29817: PPUSH
29818: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
29822: LD_EXP 42
29826: PPUSH
29827: LD_STRING D8-Huck-3
29829: PPUSH
29830: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
29834: LD_EXP 40
29838: PPUSH
29839: LD_STRING D8-JMM-3
29841: PPUSH
29842: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
29846: LD_EXP 42
29850: PPUSH
29851: LD_STRING D8-Huck-4
29853: PPUSH
29854: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
29858: LD_EXP 40
29862: PPUSH
29863: LD_STRING D8-JMM-4
29865: PPUSH
29866: CALL_OW 88
// end else
29870: GO 29982
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
29872: LD_EXP 56
29876: PPUSH
29877: CALL_OW 310
29881: PPUSH
29882: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
29886: LD_EXP 56
29890: PPUSH
29891: LD_STRING D8-Huck-1
29893: PPUSH
29894: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
29898: LD_EXP 40
29902: PPUSH
29903: LD_STRING D8-JMM-1a
29905: PPUSH
29906: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
29910: LD_EXP 56
29914: PPUSH
29915: LD_STRING D8-Huck-2
29917: PPUSH
29918: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
29922: LD_EXP 40
29926: PPUSH
29927: LD_STRING D8-JMM-2
29929: PPUSH
29930: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
29934: LD_EXP 56
29938: PPUSH
29939: LD_STRING D8-Huck-3
29941: PPUSH
29942: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
29946: LD_EXP 40
29950: PPUSH
29951: LD_STRING D8-JMM-3
29953: PPUSH
29954: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
29958: LD_EXP 56
29962: PPUSH
29963: LD_STRING D8-Huck-4
29965: PPUSH
29966: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
29970: LD_EXP 40
29974: PPUSH
29975: LD_STRING D8-JMM-4
29977: PPUSH
29978: CALL_OW 88
// end ; DialogueOff ;
29982: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
29986: LD_INT 25
29988: PPUSH
29989: LD_INT 1
29991: PPUSH
29992: LD_INT 1
29994: PPUSH
29995: CALL_OW 322
// end ;
29999: PPOPN 3
30001: END
// every 0 0$1 trigger IsOk ( sewiVeh ) and See ( 1 , sewiVeh ) do
30002: LD_EXP 74
30006: PPUSH
30007: CALL_OW 302
30011: PUSH
30012: LD_INT 1
30014: PPUSH
30015: LD_EXP 74
30019: PPUSH
30020: CALL_OW 292
30024: AND
30025: IFFALSE 30276
30027: GO 30029
30029: DISABLE
// begin CenterNowOnUnits ( sewiVeh ) ;
30030: LD_EXP 74
30034: PPUSH
30035: CALL_OW 87
// DialogueOn ;
30039: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30043: LD_EXP 40
30047: PPUSH
30048: LD_STRING D10nB-JMM-1
30050: PPUSH
30051: CALL_OW 88
// if BurlakStatus = 1 then
30055: LD_EXP 9
30059: PUSH
30060: LD_INT 1
30062: EQUAL
30063: IFFALSE 30077
// begin SayRadio ( Vsevolod , D10nB-Vse-1a ) ;
30065: LD_EXP 73
30069: PPUSH
30070: LD_STRING D10nB-Vse-1a
30072: PPUSH
30073: CALL_OW 94
// end ; if BurlakStatus = 0 then
30077: LD_EXP 9
30081: PUSH
30082: LD_INT 0
30084: EQUAL
30085: IFFALSE 30099
// SayRadio ( Vsevolod , D10nB-Vse-1 ) ;
30087: LD_EXP 73
30091: PPUSH
30092: LD_STRING D10nB-Vse-1
30094: PPUSH
30095: CALL_OW 94
// Say ( JMM , D10nB-JMM-2 ) ;
30099: LD_EXP 40
30103: PPUSH
30104: LD_STRING D10nB-JMM-2
30106: PPUSH
30107: CALL_OW 88
// if KappaStatus then
30111: LD_EXP 2
30115: IFFALSE 30129
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
30117: LD_EXP 73
30121: PPUSH
30122: LD_STRING D10nB-Vse-5a
30124: PPUSH
30125: CALL_OW 94
// if not KappaStatus and JMMGirlStatus = 0 then
30129: LD_EXP 2
30133: NOT
30134: PUSH
30135: LD_EXP 6
30139: PUSH
30140: LD_INT 0
30142: EQUAL
30143: AND
30144: IFFALSE 30272
// begin if JMMGirl = 1 then
30146: LD_EXP 7
30150: PUSH
30151: LD_INT 1
30153: EQUAL
30154: IFFALSE 30204
// begin SayRadio ( Vsevolod , D10nB-Vse-2 ) ;
30156: LD_EXP 73
30160: PPUSH
30161: LD_STRING D10nB-Vse-2
30163: PPUSH
30164: CALL_OW 94
// Say ( JMM , D10nB-JMM-3 ) ;
30168: LD_EXP 40
30172: PPUSH
30173: LD_STRING D10nB-JMM-3
30175: PPUSH
30176: CALL_OW 88
// SayRadio ( Vsevolod , D10nB-Vse-3 ) ;
30180: LD_EXP 73
30184: PPUSH
30185: LD_STRING D10nB-Vse-3
30187: PPUSH
30188: CALL_OW 94
// Say ( JMM , D10nB-JMM-4 ) ;
30192: LD_EXP 40
30196: PPUSH
30197: LD_STRING D10nB-JMM-4
30199: PPUSH
30200: CALL_OW 88
// end ; if JMMGirl = 2 then
30204: LD_EXP 7
30208: PUSH
30209: LD_INT 2
30211: EQUAL
30212: IFFALSE 30238
// begin SayRadio ( Vsevolod , D10nB-Vse-4 ) ;
30214: LD_EXP 73
30218: PPUSH
30219: LD_STRING D10nB-Vse-4
30221: PPUSH
30222: CALL_OW 94
// Say ( JMM , D10nB-JMM-5 ) ;
30226: LD_EXP 40
30230: PPUSH
30231: LD_STRING D10nB-JMM-5
30233: PPUSH
30234: CALL_OW 88
// end ; if JMMGirl = 3 then
30238: LD_EXP 7
30242: PUSH
30243: LD_INT 3
30245: EQUAL
30246: IFFALSE 30272
// begin SayRadio ( Vsevolod , D10nB-Vse-5 ) ;
30248: LD_EXP 73
30252: PPUSH
30253: LD_STRING D10nB-Vse-5
30255: PPUSH
30256: CALL_OW 94
// Say ( JMM , D10nB-JMM-6 ) ;
30260: LD_EXP 40
30264: PPUSH
30265: LD_STRING D10nB-JMM-6
30267: PPUSH
30268: CALL_OW 88
// end ; end ; DialogueOff ;
30272: CALL_OW 7
// end ;
30276: END
// every 0 0$1 trigger missionTime >= 55 55$00 and IsOk ( Kovalyuk ) and IsOk ( ru_depot2 ) do var tmp ;
30277: LD_EXP 14
30281: PUSH
30282: LD_INT 115500
30284: GREATEREQUAL
30285: PUSH
30286: LD_EXP 68
30290: PPUSH
30291: CALL_OW 302
30295: AND
30296: PUSH
30297: LD_INT 267
30299: PPUSH
30300: CALL_OW 302
30304: AND
30305: IFFALSE 30681
30307: GO 30309
30309: DISABLE
30310: LD_INT 0
30312: PPUSH
// begin missionStage := 10 ;
30313: LD_ADDR_EXP 15
30317: PUSH
30318: LD_INT 10
30320: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Kurt , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
30321: LD_ADDR_VAR 0 1
30325: PUSH
30326: LD_INT 22
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 23
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 26
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 12
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: LD_INT 25
30378: PUSH
30379: LD_INT 16
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 69
30401: PUSH
30402: LD_EXP 40
30406: PUSH
30407: LD_EXP 63
30411: PUSH
30412: LD_EXP 42
30416: PUSH
30417: LD_EXP 56
30421: PUSH
30422: LD_EXP 43
30426: PUSH
30427: LD_EXP 44
30431: PUSH
30432: LD_EXP 45
30436: PUSH
30437: LD_EXP 46
30441: PUSH
30442: LD_EXP 47
30446: PUSH
30447: LD_EXP 48
30451: PUSH
30452: LD_EXP 49
30456: PUSH
30457: LD_EXP 50
30461: PUSH
30462: LD_EXP 51
30466: PUSH
30467: LD_EXP 52
30471: PUSH
30472: LD_EXP 53
30476: PUSH
30477: LD_EXP 54
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: DIFF
30500: ST_TO_ADDR
// if not tmp and Brown then
30501: LD_VAR 0 1
30505: NOT
30506: PUSH
30507: LD_EXP 48
30511: AND
30512: IFFALSE 30527
// tmp := [ Brown ] ;
30514: LD_ADDR_VAR 0 1
30518: PUSH
30519: LD_EXP 48
30523: PUSH
30524: EMPTY
30525: LIST
30526: ST_TO_ADDR
// DialogueOn ;
30527: CALL_OW 6
// Say ( tmp [ 1 ] , D11-Sol1-1 ) ;
30531: LD_VAR 0 1
30535: PUSH
30536: LD_INT 1
30538: ARRAY
30539: PPUSH
30540: LD_STRING D11-Sol1-1
30542: PPUSH
30543: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
30547: LD_EXP 67
30551: PPUSH
30552: LD_STRING D11-Pla-1
30554: PPUSH
30555: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
30559: LD_EXP 68
30563: PPUSH
30564: LD_STRING D11-Kov-1
30566: PPUSH
30567: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
30571: LD_EXP 67
30575: PPUSH
30576: LD_STRING D11-Pla-2
30578: PPUSH
30579: CALL_OW 94
// Say ( tmp [ 1 ] , D11-Sol1-2 ) ;
30583: LD_VAR 0 1
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_STRING D11-Sol1-2
30594: PPUSH
30595: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
30599: LD_EXP 40
30603: PPUSH
30604: LD_STRING D11-JMM-2
30606: PPUSH
30607: CALL_OW 88
// DialogueOff ;
30611: CALL_OW 7
// allowBehemothConstruct := true ;
30615: LD_ADDR_EXP 25
30619: PUSH
30620: LD_INT 1
30622: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
30623: LD_STRING M4
30625: PPUSH
30626: CALL_OW 337
// BuildBehemoths ;
30630: CALL 8182 0 0
// repeat wait ( 15 15$00 ) ;
30634: LD_INT 31500
30636: PPUSH
30637: CALL_OW 67
// if behemothDestroyedBeforeFinish then
30641: LD_EXP 27
30645: IFFALSE 30649
// break ;
30647: GO 30681
// if GetResourceType ( GetBase ( ru_depot2 ) , mat_cans ) >= 1000 then
30649: LD_INT 267
30651: PPUSH
30652: CALL_OW 274
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL_OW 275
30664: PUSH
30665: LD_INT 1000
30667: GREATEREQUAL
30668: IFFALSE 30674
// BuildBehemoths ;
30670: CALL 8182 0 0
// until not behemothBuilders ;
30674: LD_EXP 76
30678: NOT
30679: IFFALSE 30634
// end ;
30681: PPOPN 1
30683: END
// every 0 0$1 trigger not behemothBuilders and not behemothDone and allowBehemothConstruct do
30684: LD_EXP 76
30688: NOT
30689: PUSH
30690: LD_EXP 28
30694: NOT
30695: AND
30696: PUSH
30697: LD_EXP 25
30701: AND
30702: IFFALSE 30722
30704: GO 30706
30706: DISABLE
// begin ChangeMissionObjectives ( M4a ) ;
30707: LD_STRING M4a
30709: PPUSH
30710: CALL_OW 337
// behemothDestroyedBeforeFinish := true ;
30714: LD_ADDR_EXP 27
30718: PUSH
30719: LD_INT 1
30721: ST_TO_ADDR
// end ;
30722: END
// every 0 0$1 trigger behemothDone do
30723: LD_EXP 28
30727: IFFALSE 30739
30729: GO 30731
30731: DISABLE
// ChangeMissionObjectives ( M4b ) ;
30732: LD_STRING M4b
30734: PPUSH
30735: CALL_OW 337
30739: END
// every 0 0$1 trigger not seeBehemoth do var tmp , i ;
30740: LD_EXP 29
30744: NOT
30745: IFFALSE 30941
30747: GO 30749
30749: DISABLE
30750: LD_INT 0
30752: PPUSH
30753: PPUSH
// begin enable ;
30754: ENABLE
// tmp := GetBehemoths ( 3 ) ;
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_INT 3
30762: PPUSH
30763: CALL 106440 0 1
30767: ST_TO_ADDR
// if not tmp and not behemothDone then
30768: LD_VAR 0 1
30772: NOT
30773: PUSH
30774: LD_EXP 28
30778: NOT
30779: AND
30780: IFFALSE 30816
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_behemoth ] ] ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_INT 22
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: LD_INT 37
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PPUSH
30811: CALL_OW 69
30815: ST_TO_ADDR
// if not tmp then
30816: LD_VAR 0 1
30820: NOT
30821: IFFALSE 30825
// exit ;
30823: GO 30941
// for i in tmp do
30825: LD_ADDR_VAR 0 2
30829: PUSH
30830: LD_VAR 0 1
30834: PUSH
30835: FOR_IN
30836: IFFALSE 30939
// if See ( 1 , i ) then
30838: LD_INT 1
30840: PPUSH
30841: LD_VAR 0 2
30845: PPUSH
30846: CALL_OW 292
30850: IFFALSE 30937
// begin if GetType ( i ) = unit_building then
30852: LD_VAR 0 2
30856: PPUSH
30857: CALL_OW 247
30861: PUSH
30862: LD_INT 3
30864: EQUAL
30865: IFFALSE 30903
// begin disable ;
30867: DISABLE
// CenterNowOnUnits ( i ) ;
30868: LD_VAR 0 2
30872: PPUSH
30873: CALL_OW 87
// Say ( JMM , D17a-JMM-1 ) ;
30877: LD_EXP 40
30881: PPUSH
30882: LD_STRING D17a-JMM-1
30884: PPUSH
30885: CALL_OW 88
// seeBehemoth := true ;
30889: LD_ADDR_EXP 29
30893: PUSH
30894: LD_INT 1
30896: ST_TO_ADDR
// exit ;
30897: POP
30898: POP
30899: GO 30941
// end else
30901: GO 30937
// begin disable ;
30903: DISABLE
// CenterNowOnUnits ( i ) ;
30904: LD_VAR 0 2
30908: PPUSH
30909: CALL_OW 87
// Say ( JMM , D17b-JMM-1 ) ;
30913: LD_EXP 40
30917: PPUSH
30918: LD_STRING D17b-JMM-1
30920: PPUSH
30921: CALL_OW 88
// seeBehemoth := true ;
30925: LD_ADDR_EXP 29
30929: PUSH
30930: LD_INT 1
30932: ST_TO_ADDR
// exit ;
30933: POP
30934: POP
30935: GO 30941
// end ; end ;
30937: GO 30835
30939: POP
30940: POP
// end ;
30941: PPOPN 2
30943: END
// every 0 0$1 trigger missionTime >= 58 58$40 do var bomb , dec , tmp ;
30944: LD_EXP 14
30948: PUSH
30949: LD_INT 123200
30951: GREATEREQUAL
30952: IFFALSE 32152
30954: GO 30956
30956: DISABLE
30957: LD_INT 0
30959: PPUSH
30960: PPUSH
30961: PPUSH
// begin MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
30962: LD_INT 2
30964: PPUSH
30965: LD_INT 23
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: LD_INT 48
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: PPUSH
30986: CALL 62632 0 2
// repeat wait ( 0 0$1 ) ;
30990: LD_INT 35
30992: PPUSH
30993: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
30997: LD_INT 22
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 34
31009: PUSH
31010: LD_INT 48
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 69
31025: IFFALSE 30990
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
31027: LD_ADDR_VAR 0 1
31031: PUSH
31032: LD_INT 22
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 34
31044: PUSH
31045: LD_INT 48
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 69
31060: PUSH
31061: LD_INT 1
31063: ARRAY
31064: ST_TO_ADDR
// missionStage := 12 ;
31065: LD_ADDR_EXP 15
31069: PUSH
31070: LD_INT 12
31072: ST_TO_ADDR
// platonovHasBomb := true ;
31073: LD_ADDR_EXP 30
31077: PUSH
31078: LD_INT 1
31080: ST_TO_ADDR
// AddComMoveXY ( bomb , 181 , 86 ) ;
31081: LD_VAR 0 1
31085: PPUSH
31086: LD_INT 181
31088: PPUSH
31089: LD_INT 86
31091: PPUSH
31092: CALL_OW 171
// AddComHold ( bomb ) ;
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 200
// wait ( 0 0$10 ) ;
31105: LD_INT 350
31107: PPUSH
31108: CALL_OW 67
// DialogueOn ;
31112: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
31116: LD_EXP 67
31120: PPUSH
31121: LD_STRING D15-Pla-1
31123: PPUSH
31124: CALL_OW 94
// dec := Query ( Q15a ) ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_STRING Q15a
31135: PPUSH
31136: CALL_OW 97
31140: ST_TO_ADDR
// if dec = 1 then
31141: LD_VAR 0 2
31145: PUSH
31146: LD_INT 1
31148: EQUAL
31149: IFFALSE 31172
// begin Say ( JMM , D15a-JMM-1 ) ;
31151: LD_EXP 40
31155: PPUSH
31156: LD_STRING D15a-JMM-1
31158: PPUSH
31159: CALL_OW 88
// YouLost ( Surrender ) ;
31163: LD_STRING Surrender
31165: PPUSH
31166: CALL_OW 104
// exit ;
31170: GO 32152
// end ; if dec = 2 then
31172: LD_VAR 0 2
31176: PUSH
31177: LD_INT 2
31179: EQUAL
31180: IFFALSE 31249
// begin Say ( JMM , D15b-JMM-1 ) ;
31182: LD_EXP 40
31186: PPUSH
31187: LD_STRING D15b-JMM-1
31189: PPUSH
31190: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
31194: LD_EXP 67
31198: PPUSH
31199: LD_STRING D15b-Pla-1
31201: PPUSH
31202: CALL_OW 94
// DialogueOff ;
31206: CALL_OW 7
// wait ( 3 3$00 ) ;
31210: LD_INT 6300
31212: PPUSH
31213: CALL_OW 67
// DialogueOn ;
31217: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
31221: LD_EXP 40
31225: PPUSH
31226: LD_STRING D15d-JMM-1a
31228: PPUSH
31229: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
31233: LD_EXP 67
31237: PPUSH
31238: LD_STRING D15d-Pla-1
31240: PPUSH
31241: CALL_OW 94
// DialogueOff ;
31245: CALL_OW 7
// end ; if dec = 3 then
31249: LD_VAR 0 2
31253: PUSH
31254: LD_INT 3
31256: EQUAL
31257: IFFALSE 31311
// begin Say ( JMM , D15c-JMM-1 ) ;
31259: LD_EXP 40
31263: PPUSH
31264: LD_STRING D15c-JMM-1
31266: PPUSH
31267: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
31271: LD_EXP 67
31275: PPUSH
31276: LD_STRING D15c-Pla-1
31278: PPUSH
31279: CALL_OW 94
// DialogueOff ;
31283: CALL_OW 7
// wait ( 0 0$15 ) ;
31287: LD_INT 525
31289: PPUSH
31290: CALL_OW 67
// ComAttackPlace ( bomb , 60 , 95 ) ;
31294: LD_VAR 0 1
31298: PPUSH
31299: LD_INT 60
31301: PPUSH
31302: LD_INT 95
31304: PPUSH
31305: CALL_OW 116
// exit ;
31309: GO 32152
// end ; if dec = 4 then
31311: LD_VAR 0 2
31315: PUSH
31316: LD_INT 4
31318: EQUAL
31319: IFFALSE 31349
// begin Say ( JMM , D15d-JMM-1 ) ;
31321: LD_EXP 40
31325: PPUSH
31326: LD_STRING D15d-JMM-1
31328: PPUSH
31329: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
31333: LD_EXP 67
31337: PPUSH
31338: LD_STRING D15d-Pla-1
31340: PPUSH
31341: CALL_OW 94
// DialogueOff ;
31345: CALL_OW 7
// end ; if IsOk ( Friend ) and GetSide ( Friend ) = 1 and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
31349: LD_EXP 65
31353: PPUSH
31354: CALL_OW 302
31358: PUSH
31359: LD_EXP 65
31363: PPUSH
31364: CALL_OW 255
31368: PUSH
31369: LD_INT 1
31371: EQUAL
31372: AND
31373: PUSH
31374: LD_INT 22
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 34
31386: PUSH
31387: LD_INT 8
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PPUSH
31398: CALL_OW 69
31402: NOT
31403: AND
31404: IFFALSE 32053
// begin SetSide ( Friend , 8 ) ;
31406: LD_EXP 65
31410: PPUSH
31411: LD_INT 8
31413: PPUSH
31414: CALL_OW 235
// if IsInUnit ( Friend ) then
31418: LD_EXP 65
31422: PPUSH
31423: CALL_OW 310
31427: IFFALSE 31438
// ComExitBuilding ( Friend ) ;
31429: LD_EXP 65
31433: PPUSH
31434: CALL_OW 122
// if IsDriver ( Friend ) then
31438: LD_EXP 65
31442: PPUSH
31443: CALL 103996 0 1
31447: IFFALSE 31458
// ComExitVehicle ( Friend ) ;
31449: LD_EXP 65
31453: PPUSH
31454: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
31458: LD_EXP 65
31462: PPUSH
31463: LD_INT 9
31465: PPUSH
31466: LD_INT 2
31468: PPUSH
31469: CALL_OW 171
// wait ( 0 0$05 ) ;
31473: LD_INT 175
31475: PPUSH
31476: CALL_OW 67
// CenterNowOnUnits ( Friend ) ;
31480: LD_EXP 65
31484: PPUSH
31485: CALL_OW 87
// DialogueOn ;
31489: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
31493: LD_EXP 40
31497: PPUSH
31498: LD_STRING D16-JMM-1
31500: PPUSH
31501: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
31505: LD_EXP 65
31509: PPUSH
31510: LD_STRING D16-Friend-1
31512: PPUSH
31513: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
31517: LD_EXP 40
31521: PPUSH
31522: LD_STRING D16-JMM-2
31524: PPUSH
31525: CALL_OW 88
// DialogueOff ;
31529: CALL_OW 7
// SetSide ( Friend , 1 ) ;
31533: LD_EXP 65
31537: PPUSH
31538: LD_INT 1
31540: PPUSH
31541: CALL_OW 235
// ComHold ( Friend ) ;
31545: LD_EXP 65
31549: PPUSH
31550: CALL_OW 140
// wait ( 0 0$20 ) ;
31554: LD_INT 700
31556: PPUSH
31557: CALL_OW 67
// if GetDistUnitXY ( Friend , 9 , 2 ) < 30 then
31561: LD_EXP 65
31565: PPUSH
31566: LD_INT 9
31568: PPUSH
31569: LD_INT 2
31571: PPUSH
31572: CALL_OW 297
31576: PUSH
31577: LD_INT 30
31579: LESS
31580: IFFALSE 31649
// begin SetSide ( Friend , 8 ) ;
31582: LD_EXP 65
31586: PPUSH
31587: LD_INT 8
31589: PPUSH
31590: CALL_OW 235
// if IsInUnit ( Friend ) then
31594: LD_EXP 65
31598: PPUSH
31599: CALL_OW 310
31603: IFFALSE 31614
// ComExitBuilding ( Friend ) ;
31605: LD_EXP 65
31609: PPUSH
31610: CALL_OW 122
// if IsDriver ( Friend ) then
31614: LD_EXP 65
31618: PPUSH
31619: CALL 103996 0 1
31623: IFFALSE 31634
// ComExitVehicle ( Friend ) ;
31625: LD_EXP 65
31629: PPUSH
31630: CALL_OW 121
// AddComMoveXY ( Friend , 9 , 2 ) ;
31634: LD_EXP 65
31638: PPUSH
31639: LD_INT 9
31641: PPUSH
31642: LD_INT 2
31644: PPUSH
31645: CALL_OW 171
// end ; wait ( 0 0$30 ) ;
31649: LD_INT 1050
31651: PPUSH
31652: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
31656: LD_INT 22
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 34
31668: PUSH
31669: LD_INT 8
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PPUSH
31680: CALL_OW 69
31684: NOT
31685: IFFALSE 32031
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_not , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ] ) diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
31687: LD_ADDR_VAR 0 3
31691: PUSH
31692: LD_INT 22
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 26
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: LD_INT 25
31717: PUSH
31718: LD_INT 12
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 25
31727: PUSH
31728: LD_INT 16
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 69
31749: PUSH
31750: LD_EXP 40
31754: PUSH
31755: LD_EXP 42
31759: PUSH
31760: LD_EXP 56
31764: PUSH
31765: LD_EXP 43
31769: PUSH
31770: LD_EXP 44
31774: PUSH
31775: LD_EXP 45
31779: PUSH
31780: LD_EXP 46
31784: PUSH
31785: LD_EXP 47
31789: PUSH
31790: LD_EXP 48
31794: PUSH
31795: LD_EXP 49
31799: PUSH
31800: LD_EXP 50
31804: PUSH
31805: LD_EXP 51
31809: PUSH
31810: LD_EXP 52
31814: PUSH
31815: LD_EXP 53
31819: PUSH
31820: LD_EXP 54
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: DIFF
31842: ST_TO_ADDR
// DialogueOn ;
31843: CALL_OW 6
// SayRadio ( Platonov , D16a-Pla-1 ) ;
31847: LD_EXP 67
31851: PPUSH
31852: LD_STRING D16a-Pla-1
31854: PPUSH
31855: CALL_OW 94
// if Stevens then
31859: LD_EXP 42
31863: IFFALSE 31879
// Say ( Stevens , D16a-Huck-1 ) else
31865: LD_EXP 42
31869: PPUSH
31870: LD_STRING D16a-Huck-1
31872: PPUSH
31873: CALL_OW 88
31877: GO 31921
// if Baker then
31879: LD_EXP 56
31883: IFFALSE 31899
// Say ( Baker , D16a-Huck-1 ) else
31885: LD_EXP 56
31889: PPUSH
31890: LD_STRING D16a-Huck-1
31892: PPUSH
31893: CALL_OW 88
31897: GO 31921
// if tmp then
31899: LD_VAR 0 3
31903: IFFALSE 31921
// Say ( tmp [ 1 ] , D16a-Sol1-1 ) ;
31905: LD_VAR 0 3
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PPUSH
31914: LD_STRING D16a-Sol1-1
31916: PPUSH
31917: CALL_OW 88
// if GetSide ( Friend ) = 8 then
31921: LD_EXP 65
31925: PPUSH
31926: CALL_OW 255
31930: PUSH
31931: LD_INT 8
31933: EQUAL
31934: IFFALSE 31950
// Say ( JMM , D16a-JMM-1 ) else
31936: LD_EXP 40
31940: PPUSH
31941: LD_STRING D16a-JMM-1
31943: PPUSH
31944: CALL_OW 88
31948: GO 32010
// begin Say ( JMM , D16a-JMM-1a ) ;
31950: LD_EXP 40
31954: PPUSH
31955: LD_STRING D16a-JMM-1a
31957: PPUSH
31958: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
31962: LD_EXP 65
31966: PPUSH
31967: LD_STRING D16a-Friend-1
31969: PPUSH
31970: CALL_OW 88
// ComExitBuilding ( Friend ) ;
31974: LD_EXP 65
31978: PPUSH
31979: CALL_OW 122
// AddComMoveXY ( Friend , 191 , 103 ) ;
31983: LD_EXP 65
31987: PPUSH
31988: LD_INT 191
31990: PPUSH
31991: LD_INT 103
31993: PPUSH
31994: CALL_OW 171
// SetSide ( Friend , 3 ) ;
31998: LD_EXP 65
32002: PPUSH
32003: LD_INT 3
32005: PPUSH
32006: CALL_OW 235
// end ; DialogueOff ;
32010: CALL_OW 7
// ComAttackPlace ( bomb , 60 , 95 ) ;
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_INT 60
32021: PPUSH
32022: LD_INT 95
32024: PPUSH
32025: CALL_OW 116
// end else
32029: GO 32051
// begin DialogueOn ;
32031: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla-1 ) ;
32035: LD_EXP 67
32039: PPUSH
32040: LD_STRING D16c-Pla-1
32042: PPUSH
32043: CALL_OW 94
// DialogueOff ;
32047: CALL_OW 7
// end ; end else
32051: GO 32152
// begin wait ( 3 3$00 ) ;
32053: LD_INT 6300
32055: PPUSH
32056: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
32060: LD_INT 22
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 34
32072: PUSH
32073: LD_INT 8
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 69
32088: NOT
32089: IFFALSE 32132
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
32091: LD_EXP 67
32095: PPUSH
32096: LD_STRING D16b-Pla-1
32098: PPUSH
32099: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
32103: LD_EXP 40
32107: PPUSH
32108: LD_STRING D16b-JMM-1
32110: PPUSH
32111: CALL_OW 88
// ComAttackPlace ( bomb , 60 , 95 ) ;
32115: LD_VAR 0 1
32119: PPUSH
32120: LD_INT 60
32122: PPUSH
32123: LD_INT 95
32125: PPUSH
32126: CALL_OW 116
// end else
32130: GO 32152
// begin DialogueOn ;
32132: CALL_OW 6
// SayRadio ( Platonov , D16c-Pla-1 ) ;
32136: LD_EXP 67
32140: PPUSH
32141: LD_STRING D16c-Pla-1
32143: PPUSH
32144: CALL_OW 94
// DialogueOff ;
32148: CALL_OW 7
// end ; end ; end ;
32152: PPOPN 3
32154: END
// every 0 0$10 trigger ( GetTech ( tech_SibFiss , 1 ) = state_researched or missionTime >= 60 60$00 ) and not allianceDestroyed and IsOk ( Roth ) do var dec ;
32155: LD_INT 25
32157: PPUSH
32158: LD_INT 1
32160: PPUSH
32161: CALL_OW 321
32165: PUSH
32166: LD_INT 2
32168: EQUAL
32169: PUSH
32170: LD_EXP 14
32174: PUSH
32175: LD_INT 126000
32177: GREATEREQUAL
32178: OR
32179: PUSH
32180: LD_EXP 23
32184: NOT
32185: AND
32186: PUSH
32187: LD_EXP 78
32191: PPUSH
32192: CALL_OW 302
32196: AND
32197: IFFALSE 32555
32199: GO 32201
32201: DISABLE
32202: LD_INT 0
32204: PPUSH
// begin missionStage := 11 ;
32205: LD_ADDR_EXP 15
32209: PUSH
32210: LD_INT 11
32212: ST_TO_ADDR
// DialogueOn ;
32213: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
32217: LD_EXP 78
32221: PPUSH
32222: LD_STRING D9-Roth-1
32224: PPUSH
32225: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
32229: LD_EXP 40
32233: PPUSH
32234: LD_STRING D9-JMM-1
32236: PPUSH
32237: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
32241: LD_EXP 78
32245: PPUSH
32246: LD_STRING D9-Roth-2
32248: PPUSH
32249: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
32253: LD_EXP 78
32257: PPUSH
32258: LD_STRING D9-Roth-2a
32260: PPUSH
32261: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
32265: LD_EXP 67
32269: PPUSH
32270: LD_STRING D9-Pla-2
32272: PPUSH
32273: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
32277: LD_EXP 78
32281: PPUSH
32282: LD_STRING D9-Roth-3
32284: PPUSH
32285: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
32289: LD_EXP 67
32293: PPUSH
32294: LD_STRING D9-Pla-3
32296: PPUSH
32297: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
32301: LD_EXP 78
32305: PPUSH
32306: LD_STRING D9-Roth-4
32308: PPUSH
32309: CALL_OW 94
// dec := Query ( Q9 ) ;
32313: LD_ADDR_VAR 0 1
32317: PUSH
32318: LD_STRING Q9
32320: PPUSH
32321: CALL_OW 97
32325: ST_TO_ADDR
// if dec = 1 then
32326: LD_VAR 0 1
32330: PUSH
32331: LD_INT 1
32333: EQUAL
32334: IFFALSE 32348
// SayRadio ( Roth , D9a-Roth-1 ) ;
32336: LD_EXP 78
32340: PPUSH
32341: LD_STRING D9a-Roth-1
32343: PPUSH
32344: CALL_OW 94
// if dec = 2 then
32348: LD_VAR 0 1
32352: PUSH
32353: LD_INT 2
32355: EQUAL
32356: IFFALSE 32382
// begin Say ( JMM , D9b-JMM-1 ) ;
32358: LD_EXP 40
32362: PPUSH
32363: LD_STRING D9b-JMM-1
32365: PPUSH
32366: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
32370: LD_EXP 78
32374: PPUSH
32375: LD_STRING D9b-Roth-1
32377: PPUSH
32378: CALL_OW 94
// end ; if dec = 3 then
32382: LD_VAR 0 1
32386: PUSH
32387: LD_INT 3
32389: EQUAL
32390: IFFALSE 32452
// begin Say ( JMM , D9c-JMM-1 ) ;
32392: LD_EXP 40
32396: PPUSH
32397: LD_STRING D9c-JMM-1
32399: PPUSH
32400: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
32404: LD_EXP 78
32408: PPUSH
32409: LD_STRING D9c-Roth-1
32411: PPUSH
32412: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
32416: LD_EXP 40
32420: PPUSH
32421: LD_STRING D9c-JMM-2
32423: PPUSH
32424: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
32428: LD_EXP 78
32432: PPUSH
32433: LD_STRING D9c-Roth-2
32435: PPUSH
32436: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
32440: LD_EXP 40
32444: PPUSH
32445: LD_STRING D9c-JMM-3
32447: PPUSH
32448: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
32452: LD_EXP 78
32456: PPUSH
32457: LD_STRING D9c-Roth-3
32459: PPUSH
32460: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
32464: LD_EXP 78
32468: PPUSH
32469: LD_STRING D9cont-Roth-1
32471: PPUSH
32472: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
32476: LD_EXP 40
32480: PPUSH
32481: LD_STRING D9cont-JMM-1
32483: PPUSH
32484: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
32488: LD_EXP 78
32492: PPUSH
32493: LD_STRING D9cont-Roth-2
32495: PPUSH
32496: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
32500: LD_EXP 40
32504: PPUSH
32505: LD_STRING D9cont-JMM-2
32507: PPUSH
32508: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
32512: LD_EXP 78
32516: PPUSH
32517: LD_STRING D9cont-Roth-3
32519: PPUSH
32520: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
32524: LD_EXP 40
32528: PPUSH
32529: LD_STRING D9cont-JMM-3
32531: PPUSH
32532: CALL_OW 88
// DialogueOff ;
32536: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
32540: LD_STRING M3
32542: PPUSH
32543: CALL_OW 337
// allianceActive := true ;
32547: LD_ADDR_EXP 31
32551: PUSH
32552: LD_INT 1
32554: ST_TO_ADDR
// end ;
32555: PPOPN 1
32557: END
// every 0 0$2 trigger See ( 1 , ru_depot ) and IsInUnit ( Platonov ) do var enemy ;
32558: LD_INT 1
32560: PPUSH
32561: LD_INT 126
32563: PPUSH
32564: CALL_OW 292
32568: PUSH
32569: LD_EXP 67
32573: PPUSH
32574: CALL_OW 310
32578: AND
32579: IFFALSE 32732
32581: GO 32583
32583: DISABLE
32584: LD_INT 0
32586: PPUSH
// begin ComExitBuilding ( Platonov ) ;
32587: LD_EXP 67
32591: PPUSH
32592: CALL_OW 122
// enemy := NearestUnitToUnit ( FilterUnitsInArea ( russianBaseArea , [ f_side , 1 ] ) , Platonov ) ;
32596: LD_ADDR_VAR 0 1
32600: PUSH
32601: LD_INT 4
32603: PPUSH
32604: LD_INT 22
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PPUSH
32614: CALL_OW 70
32618: PPUSH
32619: LD_EXP 67
32623: PPUSH
32624: CALL_OW 74
32628: ST_TO_ADDR
// AddComAttackUnit ( Platonov , enemy [ 1 ] ) ;
32629: LD_EXP 67
32633: PPUSH
32634: LD_VAR 0 1
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: PPUSH
32643: CALL_OW 175
// SayRadio ( Platonov , D18-Pla-1 ) ;
32647: LD_EXP 67
32651: PPUSH
32652: LD_STRING D18-Pla-1
32654: PPUSH
32655: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
32659: LD_INT 22
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 34
32671: PUSH
32672: LD_INT 48
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PPUSH
32683: CALL_OW 69
32687: IFFALSE 32732
// ComAttackPlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 111 , 97 ) ;
32689: LD_INT 22
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 34
32701: PUSH
32702: LD_INT 48
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PPUSH
32713: CALL_OW 69
32717: PUSH
32718: LD_INT 1
32720: ARRAY
32721: PPUSH
32722: LD_INT 111
32724: PPUSH
32725: LD_INT 97
32727: PPUSH
32728: CALL_OW 116
// end ;
32732: PPOPN 1
32734: END
// every 0 0$2 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 , 10 ] [ Difficulty ] do var i , tmp , tmp2 , omarOnMotherLode ;
32735: LD_EXP 67
32739: PPUSH
32740: CALL_OW 301
32744: PUSH
32745: LD_EXP 70
32749: PPUSH
32750: CALL_OW 301
32754: AND
32755: PUSH
32756: LD_INT 22
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 21
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 50
32778: PUSH
32779: EMPTY
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PPUSH
32787: CALL_OW 69
32791: PUSH
32792: LD_INT 7
32794: PUSH
32795: LD_INT 8
32797: PUSH
32798: LD_INT 9
32800: PUSH
32801: LD_INT 10
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: PUSH
32810: LD_OWVAR 67
32814: ARRAY
32815: LESS
32816: AND
32817: IFFALSE 33616
32819: GO 32821
32821: DISABLE
32822: LD_INT 0
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
// begin MC_Kill ( 2 ) ;
32828: LD_INT 2
32830: PPUSH
32831: CALL 38607 0 1
// SetAttitude ( 1 , 3 , att_friend , true ) ;
32835: LD_INT 1
32837: PPUSH
32838: LD_INT 3
32840: PPUSH
32841: LD_INT 1
32843: PPUSH
32844: LD_INT 1
32846: PPUSH
32847: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) ;
32851: LD_ADDR_VAR 0 2
32855: PUSH
32856: LD_INT 22
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 21
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 50
32878: PUSH
32879: EMPTY
32880: LIST
32881: PUSH
32882: LD_INT 26
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: PPUSH
32898: CALL_OW 69
32902: ST_TO_ADDR
// if not tmp then
32903: LD_VAR 0 2
32907: NOT
32908: IFFALSE 32964
// begin uc_side = 3 ;
32910: LD_ADDR_OWVAR 20
32914: PUSH
32915: LD_INT 3
32917: ST_TO_ADDR
// uc_nation = 3 ;
32918: LD_ADDR_OWVAR 21
32922: PUSH
32923: LD_INT 3
32925: ST_TO_ADDR
// hc_name =  ;
32926: LD_ADDR_OWVAR 26
32930: PUSH
32931: LD_STRING 
32933: ST_TO_ADDR
// hc_gallery =  ;
32934: LD_ADDR_OWVAR 33
32938: PUSH
32939: LD_STRING 
32941: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
32942: LD_INT 1
32944: PPUSH
32945: LD_INT 10
32947: PPUSH
32948: CALL_OW 381
// tmp = CreateHuman ;
32952: LD_ADDR_VAR 0 2
32956: PUSH
32957: CALL_OW 44
32961: ST_TO_ADDR
// end else
32962: GO 32978
// tmp := tmp [ 1 ] ;
32964: LD_ADDR_VAR 0 2
32968: PUSH
32969: LD_VAR 0 2
32973: PUSH
32974: LD_INT 1
32976: ARRAY
32977: ST_TO_ADDR
// DialogueOn ;
32978: CALL_OW 6
// SayRadio ( tmp , DSurrenderRussians-RSol1-1a ) ;
32982: LD_VAR 0 2
32986: PPUSH
32987: LD_STRING DSurrenderRussians-RSol1-1a
32989: PPUSH
32990: CALL_OW 94
// DialogueOff ;
32994: CALL_OW 7
// russianDestroyed := true ;
32998: LD_ADDR_EXP 21
33002: PUSH
33003: LD_INT 1
33005: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
33006: LD_ADDR_VAR 0 1
33010: PUSH
33011: LD_INT 22
33013: PUSH
33014: LD_INT 6
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 69
33025: PUSH
33026: FOR_IN
33027: IFFALSE 33040
// KillUnit ( i ) ;
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 66
33038: GO 33026
33040: POP
33041: POP
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
33042: LD_INT 22
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 21
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PPUSH
33066: CALL_OW 69
33070: PPUSH
33071: CALL_OW 122
// wait ( 0 0$1 ) ;
33075: LD_INT 35
33077: PPUSH
33078: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , russianEscapeArea ) ;
33082: LD_INT 22
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 21
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PPUSH
33106: CALL_OW 69
33110: PPUSH
33111: LD_INT 25
33113: PPUSH
33114: CALL_OW 173
// wait ( 0 0$35 ) ;
33118: LD_INT 1225
33120: PPUSH
33121: CALL_OW 67
// PrepareOmarInvasion ;
33125: CALL 15858 0 0
// tmp := [ GetX ( Omar ) , GetY ( Omar ) ] ;
33129: LD_ADDR_VAR 0 2
33133: PUSH
33134: LD_EXP 96
33138: PPUSH
33139: CALL_OW 250
33143: PUSH
33144: LD_EXP 96
33148: PPUSH
33149: CALL_OW 251
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// PlaceSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 , - 8 ) ;
33158: LD_VAR 0 2
33162: PUSH
33163: LD_INT 1
33165: ARRAY
33166: PPUSH
33167: LD_VAR 0 2
33171: PUSH
33172: LD_INT 2
33174: ARRAY
33175: PPUSH
33176: LD_INT 1
33178: PPUSH
33179: LD_INT 8
33181: NEG
33182: PPUSH
33183: CALL_OW 330
// CenterNowOnUnits ( Omar ) ;
33187: LD_EXP 96
33191: PPUSH
33192: CALL_OW 87
// DialogueOn ;
33196: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
33200: LD_EXP 40
33204: PPUSH
33205: LD_STRING D19-JMM-1
33207: PPUSH
33208: CALL_OW 88
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Joan , Kurt , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie , Baker ] ;
33212: LD_ADDR_VAR 0 3
33216: PUSH
33217: LD_INT 22
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 26
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: LD_INT 25
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 25
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 25
33262: PUSH
33263: LD_INT 3
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 25
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 25
33282: PUSH
33283: LD_INT 5
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 25
33292: PUSH
33293: LD_INT 8
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: PUSH
33319: LD_EXP 40
33323: PUSH
33324: LD_EXP 41
33328: PUSH
33329: LD_EXP 63
33333: PUSH
33334: LD_EXP 42
33338: PUSH
33339: LD_EXP 43
33343: PUSH
33344: LD_EXP 44
33348: PUSH
33349: LD_EXP 45
33353: PUSH
33354: LD_EXP 46
33358: PUSH
33359: LD_EXP 47
33363: PUSH
33364: LD_EXP 48
33368: PUSH
33369: LD_EXP 49
33373: PUSH
33374: LD_EXP 50
33378: PUSH
33379: LD_EXP 51
33383: PUSH
33384: LD_EXP 52
33388: PUSH
33389: LD_EXP 53
33393: PUSH
33394: LD_EXP 54
33398: PUSH
33399: LD_EXP 55
33403: PUSH
33404: LD_EXP 56
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: DIFF
33429: ST_TO_ADDR
// if tmp2 then
33430: LD_VAR 0 3
33434: IFFALSE 33452
// Say ( tmp2 [ 1 ] , D19-Sol1-1 ) ;
33436: LD_VAR 0 3
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: PPUSH
33445: LD_STRING D19-Sol1-1
33447: PPUSH
33448: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
33452: LD_EXP 40
33456: PPUSH
33457: LD_STRING D19-JMM-2
33459: PPUSH
33460: CALL_OW 88
// DialogueOff ;
33464: CALL_OW 7
// RemoveSeeing ( tmp [ 1 ] , tmp [ 2 ] , 1 ) ;
33468: LD_VAR 0 2
33472: PUSH
33473: LD_INT 1
33475: ARRAY
33476: PPUSH
33477: LD_VAR 0 2
33481: PUSH
33482: LD_INT 2
33484: ARRAY
33485: PPUSH
33486: LD_INT 1
33488: PPUSH
33489: CALL_OW 331
// ChangeMissionObjectives ( M5 ) ;
33493: LD_STRING M5
33495: PPUSH
33496: CALL_OW 337
// omarOnMotherLode := false ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_INT 0
33507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33508: LD_INT 35
33510: PPUSH
33511: CALL_OW 67
// if GetDistUnitXY ( Omar , 215 , 100 ) < 10 and not omarOnMotherLode then
33515: LD_EXP 96
33519: PPUSH
33520: LD_INT 215
33522: PPUSH
33523: LD_INT 100
33525: PPUSH
33526: CALL_OW 297
33530: PUSH
33531: LD_INT 10
33533: LESS
33534: PUSH
33535: LD_VAR 0 4
33539: NOT
33540: AND
33541: IFFALSE 33575
// begin omarOnMotherLode := true ;
33543: LD_ADDR_VAR 0 4
33547: PUSH
33548: LD_INT 1
33550: ST_TO_ADDR
// Say ( JMM , D19b-JMM-1 ) ;
33551: LD_EXP 40
33555: PPUSH
33556: LD_STRING D19b-JMM-1
33558: PPUSH
33559: CALL_OW 88
// Say ( Omar , DOmarContam-Omar-1 ) ;
33563: LD_EXP 96
33567: PPUSH
33568: LD_STRING DOmarContam-Omar-1
33570: PPUSH
33571: CALL_OW 88
// end ; until IsDead ( Omar ) ;
33575: LD_EXP 96
33579: PPUSH
33580: CALL_OW 301
33584: IFFALSE 33508
// Say ( JMM , D19a-JMM-1 ) ;
33586: LD_EXP 40
33590: PPUSH
33591: LD_STRING D19a-JMM-1
33593: PPUSH
33594: CALL_OW 88
// if Heike then
33598: LD_EXP 97
33602: IFFALSE 33616
// Say ( Heike , D19a-Hke-1 ) ;
33604: LD_EXP 97
33608: PPUSH
33609: LD_STRING D19a-Hke-1
33611: PPUSH
33612: CALL_OW 88
// end ;
33616: PPOPN 4
33618: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and russianDestroyed do var i , tmp ;
33619: LD_INT 22
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 21
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: PUSH
33648: LD_EXP 21
33652: AND
33653: IFFALSE 33721
33655: GO 33657
33657: DISABLE
33658: LD_INT 0
33660: PPUSH
33661: PPUSH
// begin enable ;
33662: ENABLE
// tmp := FilterUnitsInArea ( russianEscapeArea , [ f_side , 3 ] ) ;
33663: LD_ADDR_VAR 0 2
33667: PUSH
33668: LD_INT 25
33670: PPUSH
33671: LD_INT 22
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PPUSH
33681: CALL_OW 70
33685: ST_TO_ADDR
// if not tmp then
33686: LD_VAR 0 2
33690: NOT
33691: IFFALSE 33695
// exit ;
33693: GO 33721
// for i in tmp do
33695: LD_ADDR_VAR 0 1
33699: PUSH
33700: LD_VAR 0 2
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33719
// RemoveUnit ( i ) ;
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 64
33717: GO 33705
33719: POP
33720: POP
// end ;
33721: PPOPN 2
33723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) < 6 do var tmp , i ;
33724: LD_INT 22
33726: PUSH
33727: LD_INT 7
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 21
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 69
33752: PUSH
33753: LD_INT 6
33755: LESS
33756: IFFALSE 34224
33758: GO 33760
33760: DISABLE
33761: LD_INT 0
33763: PPUSH
33764: PPUSH
// begin MC_Kill ( 1 ) ;
33765: LD_INT 1
33767: PPUSH
33768: CALL 38607 0 1
// SetAttitude ( 7 , 1 , att_friend , true ) ;
33772: LD_INT 7
33774: PPUSH
33775: LD_INT 1
33777: PPUSH
33778: LD_INT 1
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_sex , sex_male ] ] ) diff Roth ;
33788: LD_ADDR_VAR 0 1
33792: PUSH
33793: LD_INT 22
33795: PUSH
33796: LD_INT 7
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 26
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PPUSH
33817: CALL_OW 69
33821: PUSH
33822: LD_EXP 78
33826: DIFF
33827: ST_TO_ADDR
// if tmp then
33828: LD_VAR 0 1
33832: IFFALSE 33850
// tmp := tmp [ 1 ] else
33834: LD_ADDR_VAR 0 1
33838: PUSH
33839: LD_VAR 0 1
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: ST_TO_ADDR
33848: GO 33886
// begin uc_side := 7 ;
33850: LD_ADDR_OWVAR 20
33854: PUSH
33855: LD_INT 7
33857: ST_TO_ADDR
// uc_nation := 1 ;
33858: LD_ADDR_OWVAR 21
33862: PUSH
33863: LD_INT 1
33865: ST_TO_ADDR
// PrepareScientist ( sex_male , 8 ) ;
33866: LD_INT 1
33868: PPUSH
33869: LD_INT 8
33871: PPUSH
33872: CALL_OW 384
// tmp := CreateHuman ;
33876: LD_ADDR_VAR 0 1
33880: PUSH
33881: CALL_OW 44
33885: ST_TO_ADDR
// end ; DialogueOn ;
33886: CALL_OW 6
// if IsOK ( Roth ) then
33890: LD_EXP 78
33894: PPUSH
33895: CALL_OW 302
33899: IFFALSE 33913
// Say ( JMM , DAb-JMM-1 ) ;
33901: LD_EXP 40
33905: PPUSH
33906: LD_STRING DAb-JMM-1
33908: PPUSH
33909: CALL_OW 88
// if IsOK ( Roth ) then
33913: LD_EXP 78
33917: PPUSH
33918: CALL_OW 302
33922: IFFALSE 33946
// begin Say ( Roth , DSurrenderAlliance-Roth-1 ) ;
33924: LD_EXP 78
33928: PPUSH
33929: LD_STRING DSurrenderAlliance-Roth-1
33931: PPUSH
33932: CALL_OW 88
// RothCaptured := true ;
33936: LD_ADDR_EXP 33
33940: PUSH
33941: LD_INT 1
33943: ST_TO_ADDR
// end else
33944: GO 33958
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_STRING DSurrenderAlliance-Sci1-1
33953: PPUSH
33954: CALL_OW 88
// DialogueOff ;
33958: CALL_OW 7
// allianceDestroyed := true ;
33962: LD_ADDR_EXP 23
33966: PUSH
33967: LD_INT 1
33969: ST_TO_ADDR
// if capturedUnit = 0 then
33970: LD_EXP 34
33974: PUSH
33975: LD_INT 0
33977: EQUAL
33978: IFFALSE 33987
// SetAchievement ( ACH_ALLIANCE ) ;
33980: LD_STRING ACH_ALLIANCE
33982: PPUSH
33983: CALL_OW 543
// if trueAmericans then
33987: LD_EXP 35
33991: IFFALSE 34067
// begin if trueAmericans = 1 then
33993: LD_EXP 35
33997: PUSH
33998: LD_INT 1
34000: EQUAL
34001: IFFALSE 34017
// Say ( JMM , DAb-JMM-1a ) else
34003: LD_EXP 40
34007: PPUSH
34008: LD_STRING DAb-JMM-1a
34010: PPUSH
34011: CALL_OW 88
34015: GO 34029
// Say ( JMM , DAb-JMM-1b ) ;
34017: LD_EXP 40
34021: PPUSH
34022: LD_STRING DAb-JMM-1b
34024: PPUSH
34025: CALL_OW 88
// CenterNowOnUnits ( trueAmericans ) ;
34029: LD_EXP 35
34033: PPUSH
34034: CALL_OW 87
// for i in trueAmericans do
34038: LD_ADDR_VAR 0 2
34042: PUSH
34043: LD_EXP 35
34047: PUSH
34048: FOR_IN
34049: IFFALSE 34065
// SetSide ( i , 1 ) ;
34051: LD_VAR 0 2
34055: PPUSH
34056: LD_INT 1
34058: PPUSH
34059: CALL_OW 235
34063: GO 34048
34065: POP
34066: POP
// end ; repeat wait ( 0 0$1 ) ;
34067: LD_INT 35
34069: PPUSH
34070: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
34074: LD_ADDR_VAR 0 2
34078: PUSH
34079: LD_INT 22
34081: PUSH
34082: LD_INT 7
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL_OW 69
34107: PUSH
34108: FOR_IN
34109: IFFALSE 34191
// begin if IsInUnit ( i ) then
34111: LD_VAR 0 2
34115: PPUSH
34116: CALL_OW 310
34120: IFFALSE 34131
// ComExitBuilding ( i ) ;
34122: LD_VAR 0 2
34126: PPUSH
34127: CALL_OW 122
// if IsDriver ( i ) then
34131: LD_VAR 0 2
34135: PPUSH
34136: CALL 103996 0 1
34140: IFFALSE 34151
// ComExitVehicle ( i ) ;
34142: LD_VAR 0 2
34146: PPUSH
34147: CALL_OW 121
// if not IsInArea ( i , allianceEscapeArea ) then
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_INT 26
34158: PPUSH
34159: CALL_OW 308
34163: NOT
34164: IFFALSE 34180
// AddComMoveToArea ( i , allianceEscapeArea ) else
34166: LD_VAR 0 2
34170: PPUSH
34171: LD_INT 26
34173: PPUSH
34174: CALL_OW 173
34178: GO 34189
// RemoveUnit ( i ) ;
34180: LD_VAR 0 2
34184: PPUSH
34185: CALL_OW 64
// end ;
34189: GO 34108
34191: POP
34192: POP
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
34193: LD_INT 22
34195: PUSH
34196: LD_INT 7
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 21
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PPUSH
34217: CALL_OW 69
34221: NOT
34222: IFFALSE 34067
// end ;
34224: PPOPN 2
34226: END
// export function AllianceCaptureUnit ( unit ) ; var join ; begin
34227: LD_INT 0
34229: PPUSH
34230: PPUSH
// if not unit then
34231: LD_VAR 0 1
34235: NOT
34236: IFFALSE 34240
// exit ;
34238: GO 35748
// DoNotAttack ( 7 , unit ) ;
34240: LD_INT 7
34242: PPUSH
34243: LD_VAR 0 1
34247: PPUSH
34248: CALL_OW 471
// TeleportUnit ( unit , 260 , 235 , 3 , true ) ;
34252: LD_VAR 0 1
34256: PPUSH
34257: LD_INT 260
34259: PPUSH
34260: LD_INT 235
34262: PPUSH
34263: LD_INT 3
34265: PPUSH
34266: LD_INT 1
34268: PPUSH
34269: CALL_OW 483
// SetSide ( unit , 4 ) ;
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_INT 4
34280: PPUSH
34281: CALL_OW 235
// capturedUnit := capturedUnit + 1 ;
34285: LD_ADDR_EXP 34
34289: PUSH
34290: LD_EXP 34
34294: PUSH
34295: LD_INT 1
34297: PLUS
34298: ST_TO_ADDR
// wait ( 0 0$2 ) ;
34299: LD_INT 70
34301: PPUSH
34302: CALL_OW 67
// PlaceSeeing ( 260 , 235 , 1 , - 8 ) ;
34306: LD_INT 260
34308: PPUSH
34309: LD_INT 235
34311: PPUSH
34312: LD_INT 1
34314: PPUSH
34315: LD_INT 8
34317: NEG
34318: PPUSH
34319: CALL_OW 330
// CenterNowOnUnits ( unit ) ;
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 87
// ComTurnUnit ( unit , Roth ) ;
34332: LD_VAR 0 1
34336: PPUSH
34337: LD_EXP 78
34341: PPUSH
34342: CALL_OW 119
// DialogueOn ;
34346: CALL_OW 6
// case unit of JMM :
34350: LD_VAR 0 1
34354: PUSH
34355: LD_EXP 40
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34380
34365: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
34366: LD_EXP 40
34370: PPUSH
34371: LD_STRING DA1-JMM-1
34373: PPUSH
34374: CALL_OW 91
34378: GO 34822
34380: LD_EXP 41
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34390
34388: GO 34405
34390: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
34391: LD_EXP 41
34395: PPUSH
34396: LD_STRING DA1-Joan-1
34398: PPUSH
34399: CALL_OW 91
34403: GO 34822
34405: LD_EXP 43
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34430
34415: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
34416: LD_EXP 43
34420: PPUSH
34421: LD_STRING DA1-Lisa-1
34423: PPUSH
34424: CALL_OW 91
34428: GO 34822
34430: LD_EXP 44
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34455
34440: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornel :
34441: LD_EXP 44
34445: PPUSH
34446: LD_STRING DA1-Don-1
34448: PPUSH
34449: CALL_OW 91
34453: GO 34822
34455: LD_EXP 51
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34465
34463: GO 34480
34465: POP
// ForceSay ( Cornel , DA1-Corn-1 ) ; Denis :
34466: LD_EXP 51
34470: PPUSH
34471: LD_STRING DA1-Corn-1
34473: PPUSH
34474: CALL_OW 91
34478: GO 34822
34480: LD_EXP 47
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 34505
34490: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
34491: LD_EXP 47
34495: PPUSH
34496: LD_STRING DA1-Den-1
34498: PPUSH
34499: CALL_OW 91
34503: GO 34822
34505: LD_EXP 45
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34515
34513: GO 34530
34515: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
34516: LD_EXP 45
34520: PPUSH
34521: LD_STRING DA1-Bobby-1
34523: PPUSH
34524: CALL_OW 91
34528: GO 34822
34530: LD_EXP 49
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34555
34540: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
34541: LD_EXP 49
34545: PPUSH
34546: LD_STRING DA1-Glad-1
34548: PPUSH
34549: CALL_OW 91
34553: GO 34822
34555: LD_EXP 46
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34580
34565: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
34566: LD_EXP 46
34570: PPUSH
34571: LD_STRING DA1-Cyrus-1
34573: PPUSH
34574: CALL_OW 91
34578: GO 34822
34580: LD_EXP 42
34584: DOUBLE
34585: EQUAL
34586: IFTRUE 34590
34588: GO 34605
34590: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Baker :
34591: LD_EXP 42
34595: PPUSH
34596: LD_STRING DA1-Huck-1
34598: PPUSH
34599: CALL_OW 91
34603: GO 34822
34605: LD_EXP 56
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34630
34615: POP
// ForceSay ( Baker , DA1-Huck-1 ) ; Brown :
34616: LD_EXP 56
34620: PPUSH
34621: LD_STRING DA1-Huck-1
34623: PPUSH
34624: CALL_OW 91
34628: GO 34822
34630: LD_EXP 48
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34655
34640: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
34641: LD_EXP 48
34645: PPUSH
34646: LD_STRING DA1-Brown-1
34648: PPUSH
34649: CALL_OW 91
34653: GO 34822
34655: LD_EXP 52
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34680
34665: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Connie :
34666: LD_EXP 52
34670: PPUSH
34671: LD_STRING DA1-Gary-1
34673: PPUSH
34674: CALL_OW 91
34678: GO 34822
34680: LD_EXP 55
34684: DOUBLE
34685: EQUAL
34686: IFTRUE 34690
34688: GO 34705
34690: POP
// ForceSay ( Connie , DA1-Con-1 ) ; Kurt :
34691: LD_EXP 55
34695: PPUSH
34696: LD_STRING DA1-Con-1
34698: PPUSH
34699: CALL_OW 91
34703: GO 34822
34705: LD_EXP 63
34709: DOUBLE
34710: EQUAL
34711: IFTRUE 34715
34713: GO 34730
34715: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Kikuchi :
34716: LD_EXP 63
34720: PPUSH
34721: LD_STRING DA1-Kurt-1
34723: PPUSH
34724: CALL_OW 91
34728: GO 34822
34730: LD_EXP 54
34734: DOUBLE
34735: EQUAL
34736: IFTRUE 34740
34738: GO 34755
34740: POP
// ForceSay ( Kikuchi , DA1-Yam-1 ) ; Frank :
34741: LD_EXP 54
34745: PPUSH
34746: LD_STRING DA1-Yam-1
34748: PPUSH
34749: CALL_OW 91
34753: GO 34822
34755: LD_EXP 53
34759: DOUBLE
34760: EQUAL
34761: IFTRUE 34765
34763: GO 34780
34765: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
34766: LD_EXP 53
34770: PPUSH
34771: LD_STRING DA1-Frank-1
34773: PPUSH
34774: CALL_OW 91
34778: GO 34822
34780: POP
// begin if GetSex ( unit ) = sex_male then
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 258
34790: PUSH
34791: LD_INT 1
34793: EQUAL
34794: IFFALSE 34810
// ForceSay ( unit , DA1-Sol1-1 ) else
34796: LD_VAR 0 1
34800: PPUSH
34801: LD_STRING DA1-Sol1-1
34803: PPUSH
34804: CALL_OW 91
34808: GO 34822
// ForceSay ( unit , DA1-FSol1-1 ) ;
34810: LD_VAR 0 1
34814: PPUSH
34815: LD_STRING DA1-FSol1-1
34817: PPUSH
34818: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
34822: LD_EXP 78
34826: PPUSH
34827: LD_STRING DA-Roth-1
34829: PPUSH
34830: CALL_OW 88
// if capturedUnit = 1 then
34834: LD_EXP 34
34838: PUSH
34839: LD_INT 1
34841: EQUAL
34842: IFFALSE 34870
// begin Say ( Simms , DA-Sim-1 ) ;
34844: LD_EXP 79
34848: PPUSH
34849: LD_STRING DA-Sim-1
34851: PPUSH
34852: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
34856: LD_EXP 78
34860: PPUSH
34861: LD_STRING DA-Roth-2
34863: PPUSH
34864: CALL_OW 88
// end else
34868: GO 34882
// Say ( Simms , DA-Sim-2 ) ;
34870: LD_EXP 79
34874: PPUSH
34875: LD_STRING DA-Sim-2
34877: PPUSH
34878: CALL_OW 88
// case unit of JMM :
34882: LD_VAR 0 1
34886: PUSH
34887: LD_EXP 40
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34912
34897: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
34898: LD_EXP 40
34902: PPUSH
34903: LD_STRING DA1-JMM-1a
34905: PPUSH
34906: CALL_OW 91
34910: GO 35429
34912: LD_EXP 41
34916: DOUBLE
34917: EQUAL
34918: IFTRUE 34922
34920: GO 34937
34922: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
34923: LD_EXP 41
34927: PPUSH
34928: LD_STRING DA1-Joan-1a
34930: PPUSH
34931: CALL_OW 91
34935: GO 35429
34937: LD_EXP 43
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34947
34945: GO 34962
34947: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
34948: LD_EXP 43
34952: PPUSH
34953: LD_STRING DA1-Lisa-1a
34955: PPUSH
34956: CALL_OW 91
34960: GO 35429
34962: LD_EXP 44
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34972
34970: GO 34987
34972: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornel :
34973: LD_EXP 44
34977: PPUSH
34978: LD_STRING DA1-Don-1a
34980: PPUSH
34981: CALL_OW 91
34985: GO 35429
34987: LD_EXP 51
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35012
34997: POP
// ForceSay ( Cornel , DA1-Corn-1a ) ; Denis :
34998: LD_EXP 51
35002: PPUSH
35003: LD_STRING DA1-Corn-1a
35005: PPUSH
35006: CALL_OW 91
35010: GO 35429
35012: LD_EXP 47
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35037
35022: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
35023: LD_EXP 47
35027: PPUSH
35028: LD_STRING DA1-Den-1a
35030: PPUSH
35031: CALL_OW 91
35035: GO 35429
35037: LD_EXP 45
35041: DOUBLE
35042: EQUAL
35043: IFTRUE 35047
35045: GO 35062
35047: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
35048: LD_EXP 45
35052: PPUSH
35053: LD_STRING DA1-Bobby-1a
35055: PPUSH
35056: CALL_OW 91
35060: GO 35429
35062: LD_EXP 49
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35087
35072: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
35073: LD_EXP 49
35077: PPUSH
35078: LD_STRING DA1-Glad-1a
35080: PPUSH
35081: CALL_OW 91
35085: GO 35429
35087: LD_EXP 46
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35097
35095: GO 35112
35097: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
35098: LD_EXP 46
35102: PPUSH
35103: LD_STRING DA1-Cyrus-1a
35105: PPUSH
35106: CALL_OW 91
35110: GO 35429
35112: LD_EXP 42
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35137
35122: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Baker :
35123: LD_EXP 42
35127: PPUSH
35128: LD_STRING DA1-Huck-1a
35130: PPUSH
35131: CALL_OW 91
35135: GO 35429
35137: LD_EXP 56
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35162
35147: POP
// ForceSay ( Baker , DA1-Huck-1a ) ; Brown :
35148: LD_EXP 56
35152: PPUSH
35153: LD_STRING DA1-Huck-1a
35155: PPUSH
35156: CALL_OW 91
35160: GO 35429
35162: LD_EXP 48
35166: DOUBLE
35167: EQUAL
35168: IFTRUE 35172
35170: GO 35187
35172: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
35173: LD_EXP 48
35177: PPUSH
35178: LD_STRING DA1-Brown-1a
35180: PPUSH
35181: CALL_OW 91
35185: GO 35429
35187: LD_EXP 52
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35212
35197: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Connie :
35198: LD_EXP 52
35202: PPUSH
35203: LD_STRING DA1-Gary-1a
35205: PPUSH
35206: CALL_OW 91
35210: GO 35429
35212: LD_EXP 55
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35247
35222: POP
// if JMMGirl = 3 then
35223: LD_EXP 7
35227: PUSH
35228: LD_INT 3
35230: EQUAL
35231: IFFALSE 35245
// ForceSay ( Connie , DA1-Con-1a ) ; Kurt :
35233: LD_EXP 55
35237: PPUSH
35238: LD_STRING DA1-Con-1a
35240: PPUSH
35241: CALL_OW 91
35245: GO 35429
35247: LD_EXP 63
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35272
35257: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Kikuchi :
35258: LD_EXP 63
35262: PPUSH
35263: LD_STRING DA1-Kurt-1a
35265: PPUSH
35266: CALL_OW 91
35270: GO 35429
35272: LD_EXP 54
35276: DOUBLE
35277: EQUAL
35278: IFTRUE 35282
35280: GO 35297
35282: POP
// ForceSay ( Kikuchi , DA1-Yam-1a ) ; Frank :
35283: LD_EXP 54
35287: PPUSH
35288: LD_STRING DA1-Yam-1a
35290: PPUSH
35291: CALL_OW 91
35295: GO 35429
35297: LD_EXP 53
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35307
35305: GO 35322
35307: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
35308: LD_EXP 53
35312: PPUSH
35313: LD_STRING DA1-Frank-1a
35315: PPUSH
35316: CALL_OW 91
35320: GO 35429
35322: POP
// begin join := rand ( 0 , 1 ) ;
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 0
35330: PPUSH
35331: LD_INT 1
35333: PPUSH
35334: CALL_OW 12
35338: ST_TO_ADDR
// if join then
35339: LD_VAR 0 3
35343: IFFALSE 35388
// begin if GetSex ( unit ) = sex_male then
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 258
35354: PUSH
35355: LD_INT 1
35357: EQUAL
35358: IFFALSE 35374
// ForceSay ( unit , DA1-Sol1-1b ) else
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_STRING DA1-Sol1-1b
35367: PPUSH
35368: CALL_OW 91
35372: GO 35386
// ForceSay ( unit , DA1-FSol1-1b ) ;
35374: LD_VAR 0 1
35378: PPUSH
35379: LD_STRING DA1-FSol1-1b
35381: PPUSH
35382: CALL_OW 91
// end else
35386: GO 35429
// begin if GetSex ( unit ) = sex_male then
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 258
35397: PUSH
35398: LD_INT 1
35400: EQUAL
35401: IFFALSE 35417
// ForceSay ( unit , DA1-Sol1-1a ) else
35403: LD_VAR 0 1
35407: PPUSH
35408: LD_STRING DA1-Sol1-1a
35410: PPUSH
35411: CALL_OW 91
35415: GO 35429
// ForceSay ( unit , DA1-FSol1-1a ) ;
35417: LD_VAR 0 1
35421: PPUSH
35422: LD_STRING DA1-FSol1-1a
35424: PPUSH
35425: CALL_OW 91
// end ; end ; end ; if unit = JMM then
35429: LD_VAR 0 1
35433: PUSH
35434: LD_EXP 40
35438: EQUAL
35439: IFFALSE 35450
// begin YouLost ( JMMCaptured ) ;
35441: LD_STRING JMMCaptured
35443: PPUSH
35444: CALL_OW 104
// exit ;
35448: GO 35748
// end ; if unit in [ Donaldson , Denis , Bobby , Stevens , Baker , Brown , Kikuchi ] or join then
35450: LD_VAR 0 1
35454: PUSH
35455: LD_EXP 44
35459: PUSH
35460: LD_EXP 47
35464: PUSH
35465: LD_EXP 45
35469: PUSH
35470: LD_EXP 42
35474: PUSH
35475: LD_EXP 56
35479: PUSH
35480: LD_EXP 48
35484: PUSH
35485: LD_EXP 54
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: IN
35499: PUSH
35500: LD_VAR 0 3
35504: OR
35505: IFFALSE 35604
// begin Say ( Roth , DA-Roth-3 ) ;
35507: LD_EXP 78
35511: PPUSH
35512: LD_STRING DA-Roth-3
35514: PPUSH
35515: CALL_OW 88
// SetSide ( unit , 7 ) ;
35519: LD_VAR 0 1
35523: PPUSH
35524: LD_INT 7
35526: PPUSH
35527: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] ^ unit ) ;
35531: LD_ADDR_EXP 101
35535: PUSH
35536: LD_EXP 101
35540: PPUSH
35541: LD_INT 1
35543: PPUSH
35544: LD_EXP 101
35548: PUSH
35549: LD_INT 1
35551: ARRAY
35552: PUSH
35553: LD_VAR 0 1
35557: ADD
35558: PPUSH
35559: CALL_OW 1
35563: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
35564: LD_INT 260
35566: PPUSH
35567: LD_INT 235
35569: PPUSH
35570: LD_INT 1
35572: PPUSH
35573: CALL_OW 331
// SetLives ( unit , 1000 ) ;
35577: LD_VAR 0 1
35581: PPUSH
35582: LD_INT 1000
35584: PPUSH
35585: CALL_OW 234
// DialogueOff ;
35589: CALL_OW 7
// ComFree ( unit ) ;
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL_OW 139
// end else
35602: GO 35685
// begin Say ( Roth , DA-Roth-3a ) ;
35604: LD_EXP 78
35608: PPUSH
35609: LD_STRING DA-Roth-3a
35611: PPUSH
35612: CALL_OW 88
// trueAmericans := trueAmericans ^ unit ;
35616: LD_ADDR_EXP 35
35620: PUSH
35621: LD_EXP 35
35625: PUSH
35626: LD_VAR 0 1
35630: ADD
35631: ST_TO_ADDR
// RemoveSeeing ( 260 , 235 , 1 ) ;
35632: LD_INT 260
35634: PPUSH
35635: LD_INT 235
35637: PPUSH
35638: LD_INT 1
35640: PPUSH
35641: CALL_OW 331
// SetLives ( unit , 1000 ) ;
35645: LD_VAR 0 1
35649: PPUSH
35650: LD_INT 1000
35652: PPUSH
35653: CALL_OW 234
// DialogueOff ;
35657: CALL_OW 7
// ComMoveXY ( unit , 272 , 254 ) ;
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_INT 272
35668: PPUSH
35669: LD_INT 254
35671: PPUSH
35672: CALL_OW 111
// AddComHold ( unit ) ;
35676: LD_VAR 0 1
35680: PPUSH
35681: CALL_OW 200
// end ; if capturedUnit = 1 then
35685: LD_EXP 34
35689: PUSH
35690: LD_INT 1
35692: EQUAL
35693: IFFALSE 35748
// begin DialogueOn ;
35695: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
35699: LD_EXP 40
35703: PPUSH
35704: CALL_OW 87
// Say ( JMM , DAa-JMM-1 ) ;
35708: LD_EXP 40
35712: PPUSH
35713: LD_STRING DAa-JMM-1
35715: PPUSH
35716: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
35720: LD_EXP 40
35724: PPUSH
35725: LD_STRING DAa-JMM-1a
35727: PPUSH
35728: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
35732: LD_EXP 40
35736: PPUSH
35737: LD_STRING DAa-JMM-1b
35739: PPUSH
35740: CALL_OW 88
// DialogueOff ;
35744: CALL_OW 7
// end ; end ;
35748: LD_VAR 0 2
35752: RET
// every 0 0$1 trigger missionStage >= 13 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and russianDestroyed and legionDestroyed and allianceDestroyed do var m1 , m2 , m3 ;
35753: LD_EXP 15
35757: PUSH
35758: LD_INT 13
35760: GREATEREQUAL
35761: PUSH
35762: LD_INT 22
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 21
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: PUSH
35791: LD_INT 0
35793: EQUAL
35794: AND
35795: PUSH
35796: LD_INT 22
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 33
35808: PUSH
35809: LD_INT 5
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 21
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 50
35828: PUSH
35829: EMPTY
35830: LIST
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: PPUSH
35838: CALL_OW 69
35842: PUSH
35843: LD_INT 0
35845: EQUAL
35846: AND
35847: PUSH
35848: LD_EXP 21
35852: AND
35853: PUSH
35854: LD_EXP 22
35858: AND
35859: PUSH
35860: LD_EXP 23
35864: AND
35865: IFFALSE 36561
35867: GO 35869
35869: DISABLE
35870: LD_INT 0
35872: PPUSH
35873: PPUSH
35874: PPUSH
// begin m1 := false ;
35875: LD_ADDR_VAR 0 1
35879: PUSH
35880: LD_INT 0
35882: ST_TO_ADDR
// m2 := false ;
35883: LD_ADDR_VAR 0 2
35887: PUSH
35888: LD_INT 0
35890: ST_TO_ADDR
// m3 := false ;
35891: LD_ADDR_VAR 0 3
35895: PUSH
35896: LD_INT 0
35898: ST_TO_ADDR
// if not bombExploded then
35899: LD_EXP 37
35903: NOT
35904: IFFALSE 35913
// SetAchievement ( ACH_SIBROCKET ) ;
35906: LD_STRING ACH_SIBROCKET
35908: PPUSH
35909: CALL_OW 543
// if GetSide ( Friend ) = 1 and IsOk ( Friend ) then
35913: LD_EXP 65
35917: PPUSH
35918: CALL_OW 255
35922: PUSH
35923: LD_INT 1
35925: EQUAL
35926: PUSH
35927: LD_EXP 65
35931: PPUSH
35932: CALL_OW 302
35936: AND
35937: IFFALSE 35953
// begin wait ( 3 ) ;
35939: LD_INT 3
35941: PPUSH
35942: CALL_OW 67
// SetAchievement ( ACH_OPO ) ;
35946: LD_STRING ACH_OPO
35948: PPUSH
35949: CALL_OW 543
// end ; if tick <= 120 120$00 then
35953: LD_OWVAR 1
35957: PUSH
35958: LD_INT 252000
35960: LESSEQUAL
35961: IFFALSE 35977
// begin wait ( 3 ) ;
35963: LD_INT 3
35965: PPUSH
35966: CALL_OW 67
// SetAchievement ( ACH_ASPEED_15 ) ;
35970: LD_STRING ACH_ASPEED_15
35972: PPUSH
35973: CALL_OW 543
// end ; CenterNowOnUnits ( JMM ) ;
35977: LD_EXP 40
35981: PPUSH
35982: CALL_OW 87
// music_class := 5 ;
35986: LD_ADDR_OWVAR 72
35990: PUSH
35991: LD_INT 5
35993: ST_TO_ADDR
// music_nat := 5 ;
35994: LD_ADDR_OWVAR 71
35998: PUSH
35999: LD_INT 5
36001: ST_TO_ADDR
// DialogueOn ;
36002: CALL_OW 6
// Say ( JMM , D20-JMM-1 ) ;
36006: LD_EXP 40
36010: PPUSH
36011: LD_STRING D20-JMM-1
36013: PPUSH
36014: CALL_OW 88
// if IsOK ( Joan ) then
36018: LD_EXP 41
36022: PPUSH
36023: CALL_OW 302
36027: IFFALSE 36041
// Say ( Joan , D20-Joan-1 ) ;
36029: LD_EXP 41
36033: PPUSH
36034: LD_STRING D20-Joan-1
36036: PPUSH
36037: CALL_OW 88
// if IsOk ( Lisa ) then
36041: LD_EXP 43
36045: PPUSH
36046: CALL_OW 302
36050: IFFALSE 36064
// Say ( Lisa , D20-Lisa-1 ) ;
36052: LD_EXP 43
36056: PPUSH
36057: LD_STRING D20-Lisa-1
36059: PPUSH
36060: CALL_OW 88
// if IsOk ( Donaldson ) then
36064: LD_EXP 44
36068: PPUSH
36069: CALL_OW 302
36073: IFFALSE 36087
// Say ( Donaldson , D20-Don-1 ) ;
36075: LD_EXP 44
36079: PPUSH
36080: LD_STRING D20-Don-1
36082: PPUSH
36083: CALL_OW 88
// if IsOK ( Cornel ) then
36087: LD_EXP 51
36091: PPUSH
36092: CALL_OW 302
36096: IFFALSE 36110
// Say ( Cornel , D20-Corn-1 ) ;
36098: LD_EXP 51
36102: PPUSH
36103: LD_STRING D20-Corn-1
36105: PPUSH
36106: CALL_OW 88
// if IsOk ( Denis ) then
36110: LD_EXP 47
36114: PPUSH
36115: CALL_OW 302
36119: IFFALSE 36133
// Say ( Denis , D20-Den-1 ) ;
36121: LD_EXP 47
36125: PPUSH
36126: LD_STRING D20-Den-1
36128: PPUSH
36129: CALL_OW 88
// if IsOk ( Bobby ) then
36133: LD_EXP 45
36137: PPUSH
36138: CALL_OW 302
36142: IFFALSE 36156
// Say ( Bobby , D20-Bobby-1 ) ;
36144: LD_EXP 45
36148: PPUSH
36149: LD_STRING D20-Bobby-1
36151: PPUSH
36152: CALL_OW 88
// if IsOk ( Gladstone ) then
36156: LD_EXP 49
36160: PPUSH
36161: CALL_OW 302
36165: IFFALSE 36179
// Say ( Gladstone , D20-Glad-1 ) ;
36167: LD_EXP 49
36171: PPUSH
36172: LD_STRING D20-Glad-1
36174: PPUSH
36175: CALL_OW 88
// if IsOk ( Cyrus ) then
36179: LD_EXP 46
36183: PPUSH
36184: CALL_OW 302
36188: IFFALSE 36202
// Say ( Cyrus , D20-Cyrus-1 ) ;
36190: LD_EXP 46
36194: PPUSH
36195: LD_STRING D20-Cyrus-1
36197: PPUSH
36198: CALL_OW 88
// if IsOk ( Stevens ) then
36202: LD_EXP 42
36206: PPUSH
36207: CALL_OW 302
36211: IFFALSE 36225
// Say ( Stevens , D20-Huck-1 ) ;
36213: LD_EXP 42
36217: PPUSH
36218: LD_STRING D20-Huck-1
36220: PPUSH
36221: CALL_OW 88
// if IsOk ( Brown ) then
36225: LD_EXP 48
36229: PPUSH
36230: CALL_OW 302
36234: IFFALSE 36248
// Say ( Brown , D20-Brown-1 ) ;
36236: LD_EXP 48
36240: PPUSH
36241: LD_STRING D20-Brown-1
36243: PPUSH
36244: CALL_OW 88
// if IsOk ( Gary ) then
36248: LD_EXP 52
36252: PPUSH
36253: CALL_OW 302
36257: IFFALSE 36271
// Say ( Gary , D20-Gary-1 ) ;
36259: LD_EXP 52
36263: PPUSH
36264: LD_STRING D20-Gary-1
36266: PPUSH
36267: CALL_OW 88
// if IsOk ( Connie ) then
36271: LD_EXP 55
36275: PPUSH
36276: CALL_OW 302
36280: IFFALSE 36294
// Say ( Connie , D20-Con-1 ) ;
36282: LD_EXP 55
36286: PPUSH
36287: LD_STRING D20-Con-1
36289: PPUSH
36290: CALL_OW 88
// if IsOk ( Kurt ) then
36294: LD_EXP 63
36298: PPUSH
36299: CALL_OW 302
36303: IFFALSE 36317
// Say ( Kurt , D20-Kurt-1 ) ;
36305: LD_EXP 63
36309: PPUSH
36310: LD_STRING D20-Kurt-1
36312: PPUSH
36313: CALL_OW 88
// if IsOk ( Kikuchi ) then
36317: LD_EXP 54
36321: PPUSH
36322: CALL_OW 302
36326: IFFALSE 36340
// Say ( Kikuchi , D20-Yam-1 ) ;
36328: LD_EXP 54
36332: PPUSH
36333: LD_STRING D20-Yam-1
36335: PPUSH
36336: CALL_OW 88
// if IsOk ( Frank ) then
36340: LD_EXP 53
36344: PPUSH
36345: CALL_OW 302
36349: IFFALSE 36363
// Say ( Frank , D20-Frank-1 ) ;
36351: LD_EXP 53
36355: PPUSH
36356: LD_STRING D20-Frank-1
36358: PPUSH
36359: CALL_OW 88
// DialogueOff ;
36363: CALL_OW 7
// if RothCaptured then
36367: LD_EXP 33
36371: IFFALSE 36393
// begin m1 := true ;
36373: LD_ADDR_VAR 0 1
36377: PUSH
36378: LD_INT 1
36380: ST_TO_ADDR
// AddMedal ( Roth , 1 ) ;
36381: LD_STRING Roth
36383: PPUSH
36384: LD_INT 1
36386: PPUSH
36387: CALL_OW 101
// end else
36391: GO 36404
// AddMedal ( Roth , - 1 ) ;
36393: LD_STRING Roth
36395: PPUSH
36396: LD_INT 1
36398: NEG
36399: PPUSH
36400: CALL_OW 101
// if not allowBehemothConstruct or behemothDestroyedBeforeFinish or not behemothDone then
36404: LD_EXP 25
36408: NOT
36409: PUSH
36410: LD_EXP 27
36414: OR
36415: PUSH
36416: LD_EXP 28
36420: NOT
36421: OR
36422: IFFALSE 36444
// begin m2 := true ;
36424: LD_ADDR_VAR 0 2
36428: PUSH
36429: LD_INT 1
36431: ST_TO_ADDR
// AddMedal ( Project , 1 ) ;
36432: LD_STRING Project
36434: PPUSH
36435: LD_INT 1
36437: PPUSH
36438: CALL_OW 101
// end else
36442: GO 36455
// AddMedal ( Project , - 1 ) ;
36444: LD_STRING Project
36446: PPUSH
36447: LD_INT 1
36449: NEG
36450: PPUSH
36451: CALL_OW 101
// if lostCounter = 0 then
36455: LD_EXP 32
36459: PUSH
36460: LD_INT 0
36462: EQUAL
36463: IFFALSE 36485
// begin m3 := true ;
36465: LD_ADDR_VAR 0 3
36469: PUSH
36470: LD_INT 1
36472: ST_TO_ADDR
// AddMedal ( NoLosses , 1 ) ;
36473: LD_STRING NoLosses
36475: PPUSH
36476: LD_INT 1
36478: PPUSH
36479: CALL_OW 101
// end else
36483: GO 36496
// AddMedal ( NoLosses , - 1 ) ;
36485: LD_STRING NoLosses
36487: PPUSH
36488: LD_INT 1
36490: NEG
36491: PPUSH
36492: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
36496: LD_VAR 0 1
36500: PUSH
36501: LD_VAR 0 2
36505: AND
36506: PUSH
36507: LD_VAR 0 3
36511: AND
36512: PUSH
36513: LD_OWVAR 67
36517: PUSH
36518: LD_INT 3
36520: GREATEREQUAL
36521: AND
36522: IFFALSE 36534
// SetAchievementEX ( ACH_AMER , 15 ) ;
36524: LD_STRING ACH_AMER
36526: PPUSH
36527: LD_INT 15
36529: PPUSH
36530: CALL_OW 564
// GiveMedals ( MAIN ) ;
36534: LD_STRING MAIN
36536: PPUSH
36537: CALL_OW 102
// music_class := 4 ;
36541: LD_ADDR_OWVAR 72
36545: PUSH
36546: LD_INT 4
36548: ST_TO_ADDR
// music_nat := 1 ;
36549: LD_ADDR_OWVAR 71
36553: PUSH
36554: LD_INT 1
36556: ST_TO_ADDR
// YouWin ;
36557: CALL_OW 103
// end ; end_of_file
36561: PPOPN 3
36563: END
// export function CustomEvent ( event ) ; begin
36564: LD_INT 0
36566: PPUSH
// end ;
36567: LD_VAR 0 2
36571: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 and IsLive ( Powell ) then
36572: LD_VAR 0 1
36576: PUSH
36577: LD_INT 1
36579: EQUAL
36580: PUSH
36581: LD_VAR 0 2
36585: PUSH
36586: LD_INT 4
36588: EQUAL
36589: AND
36590: PUSH
36591: LD_EXP 60
36595: PPUSH
36596: CALL_OW 300
36600: AND
36601: IFFALSE 36617
// begin wait ( 0 0$2 ) ;
36603: LD_INT 70
36605: PPUSH
36606: CALL_OW 67
// YouLost ( Dismissed ) ;
36610: LD_STRING Dismissed
36612: PPUSH
36613: CALL_OW 104
// end ; end ;
36617: PPOPN 2
36619: END
// on SibDepositContaminated ( unit , x , y ) do begin if InArea ( x , y , motherLodeArea ) then
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: LD_INT 18
36632: PPUSH
36633: CALL_OW 309
36637: IFFALSE 36646
// YouLost ( Motherlode3 ) ;
36639: LD_STRING Motherlode3
36641: PPUSH
36642: CALL_OW 104
// end ;
36646: PPOPN 3
36648: END
// on BehemothConstructed ( behemoth ) do begin if not behemothDestroyedBeforeFinish then
36649: LD_EXP 27
36653: NOT
36654: IFFALSE 36664
// behemothDone := true ;
36656: LD_ADDR_EXP 28
36660: PUSH
36661: LD_INT 1
36663: ST_TO_ADDR
// end ;
36664: PPOPN 1
36666: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if GetSide ( unit ) = 1 then
36667: LD_VAR 0 1
36671: PPUSH
36672: CALL_OW 255
36676: PUSH
36677: LD_INT 1
36679: EQUAL
36680: IFFALSE 36690
// bombExploded := true ;
36682: LD_ADDR_EXP 37
36686: PUSH
36687: LD_INT 1
36689: ST_TO_ADDR
// if GetSide ( unit ) = 3 then
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL_OW 255
36699: PUSH
36700: LD_INT 3
36702: EQUAL
36703: IFFALSE 36733
// MC_InsertProduceList ( 2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
36705: LD_INT 2
36707: PPUSH
36708: LD_INT 23
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: LD_INT 48
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: PPUSH
36729: CALL 62632 0 2
// if GetSide ( unit ) = 1 and GetSide ( Friend ) = 1 and IsOk ( Friend ) and platonovHasBomb and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_siberium_rocket ] ] ) then
36733: LD_VAR 0 1
36737: PPUSH
36738: CALL_OW 255
36742: PUSH
36743: LD_INT 1
36745: EQUAL
36746: PUSH
36747: LD_EXP 65
36751: PPUSH
36752: CALL_OW 255
36756: PUSH
36757: LD_INT 1
36759: EQUAL
36760: AND
36761: PUSH
36762: LD_EXP 65
36766: PPUSH
36767: CALL_OW 302
36771: AND
36772: PUSH
36773: LD_EXP 30
36777: AND
36778: PUSH
36779: LD_INT 22
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 34
36791: PUSH
36792: LD_INT 48
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PPUSH
36803: CALL_OW 69
36807: AND
36808: PUSH
36809: LD_INT 22
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 34
36821: PUSH
36822: LD_INT 8
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PPUSH
36833: CALL_OW 69
36837: NOT
36838: AND
36839: IFFALSE 36891
// begin wait ( 0 0$5 ) ;
36841: LD_INT 175
36843: PPUSH
36844: CALL_OW 67
// ComAttackPlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] , 60 , 95 ) ;
36848: LD_INT 22
36850: PUSH
36851: LD_INT 3
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 34
36860: PUSH
36861: LD_INT 48
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PPUSH
36872: CALL_OW 69
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PPUSH
36881: LD_INT 60
36883: PPUSH
36884: LD_INT 95
36886: PPUSH
36887: CALL_OW 116
// end ; if InArea ( x , y , motherLodeArea ) or IsInSibRocketRange ( x , y , motherLodeArea ) then
36891: LD_VAR 0 2
36895: PPUSH
36896: LD_VAR 0 3
36900: PPUSH
36901: LD_INT 18
36903: PPUSH
36904: CALL_OW 309
36908: PUSH
36909: LD_VAR 0 2
36913: PPUSH
36914: LD_VAR 0 3
36918: PPUSH
36919: LD_INT 18
36921: PPUSH
36922: CALL 110188 0 3
36926: OR
36927: IFFALSE 36974
// begin if GetSide ( unit ) = 1 then
36929: LD_VAR 0 1
36933: PPUSH
36934: CALL_OW 255
36938: PUSH
36939: LD_INT 1
36941: EQUAL
36942: IFFALSE 36960
// begin wait ( 0 0$6 ) ;
36944: LD_INT 210
36946: PPUSH
36947: CALL_OW 67
// YouLost ( Motherlode2 ) ;
36951: LD_STRING Motherlode2
36953: PPUSH
36954: CALL_OW 104
// end else
36958: GO 36974
// begin wait ( 0 0$6 ) ;
36960: LD_INT 210
36962: PPUSH
36963: CALL_OW 67
// YouLost ( Motherlode1 ) ;
36967: LD_STRING Motherlode1
36969: PPUSH
36970: CALL_OW 104
// end ; end ; if GetSide ( unit ) = 3 then
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 255
36983: PUSH
36984: LD_INT 3
36986: EQUAL
36987: IFFALSE 37008
// begin wait ( 0 0$5 ) ;
36989: LD_INT 175
36991: PPUSH
36992: CALL_OW 67
// SayRadio ( Platonov , D18-Pla-1 ) ;
36996: LD_EXP 67
37000: PPUSH
37001: LD_STRING D18-Pla-1
37003: PPUSH
37004: CALL_OW 94
// end ; end ;
37008: PPOPN 3
37010: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL 126403 0 1
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
37020: LD_VAR 0 1
37024: PUSH
37025: LD_INT 22
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 21
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 23
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: PPUSH
37060: CALL_OW 69
37064: IN
37065: IFFALSE 37081
// lostCounter := lostCounter + 1 ;
37067: LD_ADDR_EXP 32
37071: PUSH
37072: LD_EXP 32
37076: PUSH
37077: LD_INT 1
37079: PLUS
37080: ST_TO_ADDR
// if un in behemothBuilders then
37081: LD_VAR 0 1
37085: PUSH
37086: LD_EXP 76
37090: IN
37091: IFFALSE 37111
// begin behemothBuilders := behemothBuilders diff un ;
37093: LD_ADDR_EXP 76
37097: PUSH
37098: LD_EXP 76
37102: PUSH
37103: LD_VAR 0 1
37107: DIFF
37108: ST_TO_ADDR
// exit ;
37109: GO 37141
// end ; if un = JMM then
37111: LD_VAR 0 1
37115: PUSH
37116: LD_EXP 40
37120: EQUAL
37121: IFFALSE 37132
// begin YouLost ( JMM ) ;
37123: LD_STRING JMM
37125: PPUSH
37126: CALL_OW 104
// exit ;
37130: GO 37141
// end ; MCE_UnitDestroyed ( un ) ;
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL 66074 0 1
// end ;
37141: PPOPN 1
37143: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
37144: LD_VAR 0 1
37148: PPUSH
37149: LD_VAR 0 2
37153: PPUSH
37154: CALL 68406 0 2
// end ;
37158: PPOPN 2
37160: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL 67474 0 1
// end ;
37170: PPOPN 1
37172: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) then
37173: LD_VAR 0 1
37177: PUSH
37178: LD_INT 22
37180: PUSH
37181: LD_INT 8
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 30
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 23
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: PPUSH
37213: CALL_OW 69
37217: IN
37218: IFFALSE 37245
// begin ComUpgrade ( building ) ;
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 146
// ComComplete ( Kozlov , building ) ;
37229: LD_EXP 64
37233: PPUSH
37234: LD_VAR 0 1
37238: PPUSH
37239: CALL 76890 0 2
// exit ;
37243: GO 37254
// end ; MCE_BuildingComplete ( building ) ;
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL 67715 0 1
// end ;
37254: PPOPN 1
37256: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
37257: LD_VAR 0 1
37261: PPUSH
37262: LD_VAR 0 2
37266: PPUSH
37267: CALL 65770 0 2
// end ;
37271: PPOPN 2
37273: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: LD_VAR 0 5
37298: PPUSH
37299: CALL 65390 0 5
// end ;
37303: PPOPN 5
37305: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 1 then
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 255
37315: PUSH
37316: LD_INT 1
37318: EQUAL
37319: IFFALSE 37336
// amConstructCounter := Inc ( amConstructCounter ) ;
37321: LD_ADDR_EXP 39
37325: PUSH
37326: LD_EXP 39
37330: PPUSH
37331: CALL 107740 0 1
37335: ST_TO_ADDR
// SOS_VehicleConstructed ( vehicle , factory ) ;
37336: LD_VAR 0 1
37340: PPUSH
37341: LD_VAR 0 2
37345: PPUSH
37346: CALL 126523 0 2
// MCE_VehicleConstructed ( vehicle , factory ) ;
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_VAR 0 2
37359: PPUSH
37360: CALL 64943 0 2
// end ;
37364: PPOPN 2
37366: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
37367: LD_VAR 0 1
37371: PPUSH
37372: LD_VAR 0 2
37376: PPUSH
37377: LD_VAR 0 3
37381: PPUSH
37382: LD_VAR 0 4
37386: PPUSH
37387: CALL 64781 0 4
// end ;
37391: PPOPN 4
37393: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
37394: LD_VAR 0 1
37398: PPUSH
37399: LD_VAR 0 2
37403: PPUSH
37404: LD_VAR 0 3
37408: PPUSH
37409: CALL 64556 0 3
// end ;
37413: PPOPN 3
37415: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_VAR 0 2
37425: PPUSH
37426: CALL 64441 0 2
// end ;
37430: PPOPN 2
37432: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
37433: LD_VAR 0 1
37437: PPUSH
37438: LD_VAR 0 2
37442: PPUSH
37443: CALL 68701 0 2
// end ;
37447: PPOPN 2
37449: END
// on EvacuateBuilding ( building , unit ) do begin if building = ru_specBar then
37450: LD_VAR 0 1
37454: PUSH
37455: LD_INT 460
37457: EQUAL
37458: IFFALSE 37480
// ComEnterUnit ( unit , HexInfo ( 227 , 136 ) ) ;
37460: LD_VAR 0 2
37464: PPUSH
37465: LD_INT 227
37467: PPUSH
37468: LD_INT 136
37470: PPUSH
37471: CALL_OW 428
37475: PPUSH
37476: CALL_OW 120
// end ;
37480: PPOPN 2
37482: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 4 and driver in powellSquadAttack [ 1 ] and powellAllowRetreat then
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 255
37492: PUSH
37493: LD_INT 4
37495: EQUAL
37496: PUSH
37497: LD_VAR 0 1
37501: PUSH
37502: LD_EXP 18
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: IN
37511: AND
37512: PUSH
37513: LD_EXP 19
37517: AND
37518: IFFALSE 37537
// begin ComMoveXY ( driver , 61 , 93 ) ;
37520: LD_VAR 0 1
37524: PPUSH
37525: LD_INT 61
37527: PPUSH
37528: LD_INT 93
37530: PPUSH
37531: CALL_OW 111
// exit ;
37535: GO 37606
// end ; if GetSide ( driver ) = 3 and GetTag ( driver ) = 105 then
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 255
37546: PUSH
37547: LD_INT 3
37549: EQUAL
37550: PUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 110
37560: PUSH
37561: LD_INT 105
37563: EQUAL
37564: AND
37565: IFFALSE 37582
// begin ComMoveXY ( driver , 187 , 92 ) ;
37567: LD_VAR 0 1
37571: PPUSH
37572: LD_INT 187
37574: PPUSH
37575: LD_INT 92
37577: PPUSH
37578: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
37582: LD_VAR 0 1
37586: PPUSH
37587: LD_VAR 0 2
37591: PPUSH
37592: LD_VAR 0 3
37596: PPUSH
37597: LD_VAR 0 4
37601: PPUSH
37602: CALL 68917 0 4
// end ;
37606: PPOPN 4
37608: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
37609: LD_VAR 0 1
37613: PPUSH
37614: LD_VAR 0 2
37618: PPUSH
37619: CALL 64250 0 2
// end ;
37623: PPOPN 2
37625: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
37626: LD_VAR 0 1
37630: PPUSH
37631: CALL 126507 0 1
// end ; end_of_file
37635: PPOPN 1
37637: END
// every 0 0$30 trigger missionStage = 2 do var i , time ;
37638: LD_EXP 15
37642: PUSH
37643: LD_INT 2
37645: EQUAL
37646: IFFALSE 38163
37648: GO 37650
37650: DISABLE
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
// begin time := 0 0$35 ;
37655: LD_ADDR_VAR 0 2
37659: PUSH
37660: LD_INT 1225
37662: ST_TO_ADDR
// repeat wait ( time ) ;
37663: LD_VAR 0 2
37667: PPUSH
37668: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 150 , 19 , true ) ;
37672: LD_INT 1
37674: PPUSH
37675: LD_INT 5
37677: PPUSH
37678: CALL_OW 12
37682: PPUSH
37683: LD_INT 106
37685: PPUSH
37686: LD_INT 150
37688: PPUSH
37689: LD_INT 19
37691: PPUSH
37692: LD_INT 1
37694: PPUSH
37695: CALL_OW 56
// wait ( rand ( 0 0$13 , 0 0$22 ) ) ;
37699: LD_INT 455
37701: PPUSH
37702: LD_INT 770
37704: PPUSH
37705: CALL_OW 12
37709: PPUSH
37710: CALL_OW 67
// if Prob ( 50 ) then
37714: LD_INT 50
37716: PPUSH
37717: CALL_OW 13
37721: IFFALSE 37750
// CreateCratesXYR ( rand ( 1 , 5 ) , 62 , 108 , 10 , true ) ;
37723: LD_INT 1
37725: PPUSH
37726: LD_INT 5
37728: PPUSH
37729: CALL_OW 12
37733: PPUSH
37734: LD_INT 62
37736: PPUSH
37737: LD_INT 108
37739: PPUSH
37740: LD_INT 10
37742: PPUSH
37743: LD_INT 1
37745: PPUSH
37746: CALL_OW 56
// until missionStage > 4 ;
37750: LD_EXP 15
37754: PUSH
37755: LD_INT 4
37757: GREATER
37758: IFFALSE 37663
// repeat wait ( 0 0$1 ) ;
37760: LD_INT 35
37762: PPUSH
37763: CALL_OW 67
// until missionStage = 6 ;
37767: LD_EXP 15
37771: PUSH
37772: LD_INT 6
37774: EQUAL
37775: IFFALSE 37760
// time := 0 0$20 ;
37777: LD_ADDR_VAR 0 2
37781: PUSH
37782: LD_INT 700
37784: ST_TO_ADDR
// repeat wait ( time ) ;
37785: LD_VAR 0 2
37789: PPUSH
37790: CALL_OW 67
// if Prob ( 90 ) then
37794: LD_INT 90
37796: PPUSH
37797: CALL_OW 13
37801: IFFALSE 37844
// begin time := time + 0 0$2 ;
37803: LD_ADDR_VAR 0 2
37807: PUSH
37808: LD_VAR 0 2
37812: PUSH
37813: LD_INT 70
37815: PLUS
37816: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 106 , 89 , 45 , true ) ;
37817: LD_INT 1
37819: PPUSH
37820: LD_INT 5
37822: PPUSH
37823: CALL_OW 12
37827: PPUSH
37828: LD_INT 106
37830: PPUSH
37831: LD_INT 89
37833: PPUSH
37834: LD_INT 45
37836: PPUSH
37837: LD_INT 1
37839: PPUSH
37840: CALL_OW 56
// end ; if Prob ( 45 ) then
37844: LD_INT 45
37846: PPUSH
37847: CALL_OW 13
37851: IFFALSE 37907
// begin for i := 1 to 4 do
37853: LD_ADDR_VAR 0 1
37857: PUSH
37858: DOUBLE
37859: LD_INT 1
37861: DEC
37862: ST_TO_ADDR
37863: LD_INT 4
37865: PUSH
37866: FOR_TO
37867: IFFALSE 37905
// begin wait ( 0 0$5 ) ;
37869: LD_INT 175
37871: PPUSH
37872: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 113 , 117 , 25 , true ) ;
37876: LD_INT 1
37878: PPUSH
37879: LD_INT 5
37881: PPUSH
37882: CALL_OW 12
37886: PPUSH
37887: LD_INT 113
37889: PPUSH
37890: LD_INT 117
37892: PPUSH
37893: LD_INT 25
37895: PPUSH
37896: LD_INT 1
37898: PPUSH
37899: CALL_OW 56
// end ;
37903: GO 37866
37905: POP
37906: POP
// end ; if Prob ( 40 ) then
37907: LD_INT 40
37909: PPUSH
37910: CALL_OW 13
37914: IFFALSE 37960
// begin wait ( rand ( 0 0$11 , 0 0$27 ) ) ;
37916: LD_INT 385
37918: PPUSH
37919: LD_INT 945
37921: PPUSH
37922: CALL_OW 12
37926: PPUSH
37927: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 21 , 26 , 12 , true ) ;
37931: LD_INT 1
37933: PPUSH
37934: LD_INT 5
37936: PPUSH
37937: CALL_OW 12
37941: PPUSH
37942: LD_INT 21
37944: PPUSH
37945: LD_INT 26
37947: PPUSH
37948: LD_INT 12
37950: PPUSH
37951: LD_INT 1
37953: PPUSH
37954: CALL_OW 56
// end else
37958: GO 37996
// begin wait ( rand ( 0 0$20 , 0 0$35 ) ) ;
37960: LD_INT 700
37962: PPUSH
37963: LD_INT 1225
37965: PPUSH
37966: CALL_OW 12
37970: PPUSH
37971: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , russianCratesArea , true ) ;
37975: LD_INT 1
37977: PPUSH
37978: LD_INT 5
37980: PPUSH
37981: CALL_OW 12
37985: PPUSH
37986: LD_INT 16
37988: PPUSH
37989: LD_INT 1
37991: PPUSH
37992: CALL_OW 55
// end ; if Prob ( 50 ) then
37996: LD_INT 50
37998: PPUSH
37999: CALL_OW 13
38003: IFFALSE 38049
// begin wait ( rand ( 0 0$20 , 0 0$30 ) ) ;
38005: LD_INT 700
38007: PPUSH
38008: LD_INT 1050
38010: PPUSH
38011: CALL_OW 12
38015: PPUSH
38016: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 168 , 168 , 16 , true ) ;
38020: LD_INT 1
38022: PPUSH
38023: LD_INT 5
38025: PPUSH
38026: CALL_OW 12
38030: PPUSH
38031: LD_INT 168
38033: PPUSH
38034: LD_INT 168
38036: PPUSH
38037: LD_INT 16
38039: PPUSH
38040: LD_INT 1
38042: PPUSH
38043: CALL_OW 56
// end else
38047: GO 38085
// begin wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
38049: LD_INT 350
38051: PPUSH
38052: LD_INT 525
38054: PPUSH
38055: CALL_OW 12
38059: PPUSH
38060: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , legionCratesArea , true ) ;
38064: LD_INT 1
38066: PPUSH
38067: LD_INT 5
38069: PPUSH
38070: CALL_OW 12
38074: PPUSH
38075: LD_INT 15
38077: PPUSH
38078: LD_INT 1
38080: PPUSH
38081: CALL_OW 55
// end ; wait ( rand ( 0 0$5 , 0 0$9 ) ) ;
38085: LD_INT 175
38087: PPUSH
38088: LD_INT 315
38090: PPUSH
38091: CALL_OW 12
38095: PPUSH
38096: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 103 , 140 , 20 , true ) ;
38100: LD_INT 1
38102: PPUSH
38103: LD_INT 5
38105: PPUSH
38106: CALL_OW 12
38110: PPUSH
38111: LD_INT 103
38113: PPUSH
38114: LD_INT 140
38116: PPUSH
38117: LD_INT 20
38119: PPUSH
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 56
// time := time + 0 0$2 ;
38127: LD_ADDR_VAR 0 2
38131: PUSH
38132: LD_VAR 0 2
38136: PUSH
38137: LD_INT 70
38139: PLUS
38140: ST_TO_ADDR
// if time > 1 1$20 then
38141: LD_VAR 0 2
38145: PUSH
38146: LD_INT 2800
38148: GREATER
38149: IFFALSE 38159
// time := 0 0$30 ;
38151: LD_ADDR_VAR 0 2
38155: PUSH
38156: LD_INT 1050
38158: ST_TO_ADDR
// until false ;
38159: LD_INT 0
38161: IFFALSE 37785
// end ; end_of_file
38163: PPOPN 2
38165: END
// every 0 0$1 trigger missionStart and missionStage >= 6 do
38166: LD_EXP 13
38170: PUSH
38171: LD_EXP 15
38175: PUSH
38176: LD_INT 6
38178: GREATEREQUAL
38179: AND
38180: IFFALSE 38217
38182: GO 38184
38184: DISABLE
// begin enable ;
38185: ENABLE
// missionTime := missionTime + 0 0$1 ;
38186: LD_ADDR_EXP 14
38190: PUSH
38191: LD_EXP 14
38195: PUSH
38196: LD_INT 35
38198: PLUS
38199: ST_TO_ADDR
// display_strings = [ #Am15-1 , missionTime ] ;
38200: LD_ADDR_OWVAR 47
38204: PUSH
38205: LD_STRING #Am15-1
38207: PUSH
38208: LD_EXP 14
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// end ; end_of_file
38217: END
// export function InitNature ; begin
38218: LD_INT 0
38220: PPUSH
// PrepareNature ( 3 , 3 , 2 , 1 , 1 , 0 , 0 , natureArea1 , 0 ) ;
38221: LD_INT 3
38223: PPUSH
38224: LD_INT 3
38226: PPUSH
38227: LD_INT 2
38229: PPUSH
38230: LD_INT 1
38232: PPUSH
38233: LD_INT 1
38235: PPUSH
38236: LD_INT 0
38238: PPUSH
38239: LD_INT 0
38241: PPUSH
38242: LD_INT 20
38244: PPUSH
38245: LD_INT 0
38247: PPUSH
38248: CALL 103069 0 9
// PrepareNature ( 2 , 1 , 1 , 1 , 1 , 0 , 0 , natureArea2 , 0 ) ;
38252: LD_INT 2
38254: PPUSH
38255: LD_INT 1
38257: PPUSH
38258: LD_INT 1
38260: PPUSH
38261: LD_INT 1
38263: PPUSH
38264: LD_INT 1
38266: PPUSH
38267: LD_INT 0
38269: PPUSH
38270: LD_INT 0
38272: PPUSH
38273: LD_INT 21
38275: PPUSH
38276: LD_INT 0
38278: PPUSH
38279: CALL 103069 0 9
// PrepareNature ( 4 , 1 , 2 , 4 , 2 , 1 , 0 , natureArea3 , 0 ) ;
38283: LD_INT 4
38285: PPUSH
38286: LD_INT 1
38288: PPUSH
38289: LD_INT 2
38291: PPUSH
38292: LD_INT 4
38294: PPUSH
38295: LD_INT 2
38297: PPUSH
38298: LD_INT 1
38300: PPUSH
38301: LD_INT 0
38303: PPUSH
38304: LD_INT 22
38306: PPUSH
38307: LD_INT 0
38309: PPUSH
38310: CALL 103069 0 9
// PrepareNature ( 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , natureWaterArea ) ;
38314: LD_INT 0
38316: PPUSH
38317: LD_INT 0
38319: PPUSH
38320: LD_INT 0
38322: PPUSH
38323: LD_INT 0
38325: PPUSH
38326: LD_INT 0
38328: PPUSH
38329: LD_INT 0
38331: PPUSH
38332: LD_INT 9
38334: PPUSH
38335: LD_INT 0
38337: PPUSH
38338: LD_INT 23
38340: PPUSH
38341: CALL 103069 0 9
// end ; end_of_file
38345: LD_VAR 0 1
38349: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export mc_block_vehicle_constructed_thread ; export function InitMacro ; var i ; begin
38350: LD_INT 0
38352: PPUSH
38353: PPUSH
// skirmish := false ;
38354: LD_ADDR_EXP 99
38358: PUSH
38359: LD_INT 0
38361: ST_TO_ADDR
// debug_mc := false ;
38362: LD_ADDR_EXP 100
38366: PUSH
38367: LD_INT 0
38369: ST_TO_ADDR
// mc_bases := [ ] ;
38370: LD_ADDR_EXP 101
38374: PUSH
38375: EMPTY
38376: ST_TO_ADDR
// mc_sides := [ ] ;
38377: LD_ADDR_EXP 127
38381: PUSH
38382: EMPTY
38383: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
38384: LD_ADDR_EXP 102
38388: PUSH
38389: EMPTY
38390: ST_TO_ADDR
// mc_building_repairs := [ ] ;
38391: LD_ADDR_EXP 103
38395: PUSH
38396: EMPTY
38397: ST_TO_ADDR
// mc_need_heal := [ ] ;
38398: LD_ADDR_EXP 104
38402: PUSH
38403: EMPTY
38404: ST_TO_ADDR
// mc_healers := [ ] ;
38405: LD_ADDR_EXP 105
38409: PUSH
38410: EMPTY
38411: ST_TO_ADDR
// mc_build_list := [ ] ;
38412: LD_ADDR_EXP 106
38416: PUSH
38417: EMPTY
38418: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
38419: LD_ADDR_EXP 133
38423: PUSH
38424: EMPTY
38425: ST_TO_ADDR
// mc_builders := [ ] ;
38426: LD_ADDR_EXP 107
38430: PUSH
38431: EMPTY
38432: ST_TO_ADDR
// mc_construct_list := [ ] ;
38433: LD_ADDR_EXP 108
38437: PUSH
38438: EMPTY
38439: ST_TO_ADDR
// mc_turret_list := [ ] ;
38440: LD_ADDR_EXP 109
38444: PUSH
38445: EMPTY
38446: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
38447: LD_ADDR_EXP 110
38451: PUSH
38452: EMPTY
38453: ST_TO_ADDR
// mc_miners := [ ] ;
38454: LD_ADDR_EXP 115
38458: PUSH
38459: EMPTY
38460: ST_TO_ADDR
// mc_mines := [ ] ;
38461: LD_ADDR_EXP 114
38465: PUSH
38466: EMPTY
38467: ST_TO_ADDR
// mc_minefields := [ ] ;
38468: LD_ADDR_EXP 116
38472: PUSH
38473: EMPTY
38474: ST_TO_ADDR
// mc_crates := [ ] ;
38475: LD_ADDR_EXP 117
38479: PUSH
38480: EMPTY
38481: ST_TO_ADDR
// mc_crates_collector := [ ] ;
38482: LD_ADDR_EXP 118
38486: PUSH
38487: EMPTY
38488: ST_TO_ADDR
// mc_crates_area := [ ] ;
38489: LD_ADDR_EXP 119
38493: PUSH
38494: EMPTY
38495: ST_TO_ADDR
// mc_vehicles := [ ] ;
38496: LD_ADDR_EXP 120
38500: PUSH
38501: EMPTY
38502: ST_TO_ADDR
// mc_attack := [ ] ;
38503: LD_ADDR_EXP 121
38507: PUSH
38508: EMPTY
38509: ST_TO_ADDR
// mc_produce := [ ] ;
38510: LD_ADDR_EXP 122
38514: PUSH
38515: EMPTY
38516: ST_TO_ADDR
// mc_defender := [ ] ;
38517: LD_ADDR_EXP 123
38521: PUSH
38522: EMPTY
38523: ST_TO_ADDR
// mc_parking := [ ] ;
38524: LD_ADDR_EXP 125
38528: PUSH
38529: EMPTY
38530: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
38531: LD_ADDR_EXP 111
38535: PUSH
38536: EMPTY
38537: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
38538: LD_ADDR_EXP 113
38542: PUSH
38543: EMPTY
38544: ST_TO_ADDR
// mc_scan := [ ] ;
38545: LD_ADDR_EXP 124
38549: PUSH
38550: EMPTY
38551: ST_TO_ADDR
// mc_scan_area := [ ] ;
38552: LD_ADDR_EXP 126
38556: PUSH
38557: EMPTY
38558: ST_TO_ADDR
// mc_tech := [ ] ;
38559: LD_ADDR_EXP 128
38563: PUSH
38564: EMPTY
38565: ST_TO_ADDR
// mc_class := [ ] ;
38566: LD_ADDR_EXP 142
38570: PUSH
38571: EMPTY
38572: ST_TO_ADDR
// mc_class_case_use := [ ] ;
38573: LD_ADDR_EXP 143
38577: PUSH
38578: EMPTY
38579: ST_TO_ADDR
// mc_is_defending := [ ] ;
38580: LD_ADDR_EXP 144
38584: PUSH
38585: EMPTY
38586: ST_TO_ADDR
// mc_lab_upgrade := [ ] ;
38587: LD_ADDR_EXP 135
38591: PUSH
38592: EMPTY
38593: ST_TO_ADDR
// mc_block_vehicle_constructed_thread := false ;
38594: LD_ADDR_EXP 145
38598: PUSH
38599: LD_INT 0
38601: ST_TO_ADDR
// end ;
38602: LD_VAR 0 1
38606: RET
// export function MC_Kill ( base ) ; begin
38607: LD_INT 0
38609: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
38610: LD_ADDR_EXP 101
38614: PUSH
38615: LD_EXP 101
38619: PPUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: EMPTY
38626: PPUSH
38627: CALL_OW 1
38631: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
38632: LD_ADDR_EXP 102
38636: PUSH
38637: LD_EXP 102
38641: PPUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: EMPTY
38648: PPUSH
38649: CALL_OW 1
38653: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
38654: LD_ADDR_EXP 103
38658: PUSH
38659: LD_EXP 103
38663: PPUSH
38664: LD_VAR 0 1
38668: PPUSH
38669: EMPTY
38670: PPUSH
38671: CALL_OW 1
38675: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
38676: LD_ADDR_EXP 104
38680: PUSH
38681: LD_EXP 104
38685: PPUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: EMPTY
38692: PPUSH
38693: CALL_OW 1
38697: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
38698: LD_ADDR_EXP 105
38702: PUSH
38703: LD_EXP 105
38707: PPUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: EMPTY
38714: PPUSH
38715: CALL_OW 1
38719: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
38720: LD_ADDR_EXP 106
38724: PUSH
38725: LD_EXP 106
38729: PPUSH
38730: LD_VAR 0 1
38734: PPUSH
38735: EMPTY
38736: PPUSH
38737: CALL_OW 1
38741: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
38742: LD_ADDR_EXP 107
38746: PUSH
38747: LD_EXP 107
38751: PPUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: EMPTY
38758: PPUSH
38759: CALL_OW 1
38763: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
38764: LD_ADDR_EXP 108
38768: PUSH
38769: LD_EXP 108
38773: PPUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: EMPTY
38780: PPUSH
38781: CALL_OW 1
38785: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
38786: LD_ADDR_EXP 109
38790: PUSH
38791: LD_EXP 109
38795: PPUSH
38796: LD_VAR 0 1
38800: PPUSH
38801: EMPTY
38802: PPUSH
38803: CALL_OW 1
38807: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
38808: LD_ADDR_EXP 110
38812: PUSH
38813: LD_EXP 110
38817: PPUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: EMPTY
38824: PPUSH
38825: CALL_OW 1
38829: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
38830: LD_ADDR_EXP 111
38834: PUSH
38835: LD_EXP 111
38839: PPUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: EMPTY
38846: PPUSH
38847: CALL_OW 1
38851: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
38852: LD_ADDR_EXP 112
38856: PUSH
38857: LD_EXP 112
38861: PPUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_INT 0
38869: PPUSH
38870: CALL_OW 1
38874: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
38875: LD_ADDR_EXP 113
38879: PUSH
38880: LD_EXP 113
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: EMPTY
38891: PPUSH
38892: CALL_OW 1
38896: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
38897: LD_ADDR_EXP 114
38901: PUSH
38902: LD_EXP 114
38906: PPUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: EMPTY
38913: PPUSH
38914: CALL_OW 1
38918: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
38919: LD_ADDR_EXP 115
38923: PUSH
38924: LD_EXP 115
38928: PPUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: EMPTY
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
38941: LD_ADDR_EXP 116
38945: PUSH
38946: LD_EXP 116
38950: PPUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: EMPTY
38957: PPUSH
38958: CALL_OW 1
38962: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
38963: LD_ADDR_EXP 117
38967: PUSH
38968: LD_EXP 117
38972: PPUSH
38973: LD_VAR 0 1
38977: PPUSH
38978: EMPTY
38979: PPUSH
38980: CALL_OW 1
38984: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
38985: LD_ADDR_EXP 118
38989: PUSH
38990: LD_EXP 118
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: EMPTY
39001: PPUSH
39002: CALL_OW 1
39006: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
39007: LD_ADDR_EXP 119
39011: PUSH
39012: LD_EXP 119
39016: PPUSH
39017: LD_VAR 0 1
39021: PPUSH
39022: EMPTY
39023: PPUSH
39024: CALL_OW 1
39028: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
39029: LD_ADDR_EXP 120
39033: PUSH
39034: LD_EXP 120
39038: PPUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: EMPTY
39045: PPUSH
39046: CALL_OW 1
39050: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
39051: LD_ADDR_EXP 121
39055: PUSH
39056: LD_EXP 121
39060: PPUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: EMPTY
39067: PPUSH
39068: CALL_OW 1
39072: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
39073: LD_ADDR_EXP 122
39077: PUSH
39078: LD_EXP 122
39082: PPUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: EMPTY
39089: PPUSH
39090: CALL_OW 1
39094: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
39095: LD_ADDR_EXP 123
39099: PUSH
39100: LD_EXP 123
39104: PPUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: EMPTY
39111: PPUSH
39112: CALL_OW 1
39116: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
39117: LD_ADDR_EXP 124
39121: PUSH
39122: LD_EXP 124
39126: PPUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: EMPTY
39133: PPUSH
39134: CALL_OW 1
39138: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
39139: LD_ADDR_EXP 125
39143: PUSH
39144: LD_EXP 125
39148: PPUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: EMPTY
39155: PPUSH
39156: CALL_OW 1
39160: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
39161: LD_ADDR_EXP 126
39165: PUSH
39166: LD_EXP 126
39170: PPUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: EMPTY
39177: PPUSH
39178: CALL_OW 1
39182: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
39183: LD_ADDR_EXP 128
39187: PUSH
39188: LD_EXP 128
39192: PPUSH
39193: LD_VAR 0 1
39197: PPUSH
39198: EMPTY
39199: PPUSH
39200: CALL_OW 1
39204: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
39205: LD_ADDR_EXP 130
39209: PUSH
39210: LD_EXP 130
39214: PPUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: EMPTY
39221: PPUSH
39222: CALL_OW 1
39226: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
39227: LD_ADDR_EXP 131
39231: PUSH
39232: LD_EXP 131
39236: PPUSH
39237: LD_VAR 0 1
39241: PPUSH
39242: EMPTY
39243: PPUSH
39244: CALL_OW 1
39248: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
39249: LD_ADDR_EXP 132
39253: PUSH
39254: LD_EXP 132
39258: PPUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: EMPTY
39265: PPUSH
39266: CALL_OW 1
39270: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
39271: LD_ADDR_EXP 133
39275: PUSH
39276: LD_EXP 133
39280: PPUSH
39281: LD_VAR 0 1
39285: PPUSH
39286: EMPTY
39287: PPUSH
39288: CALL_OW 1
39292: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
39293: LD_ADDR_EXP 134
39297: PUSH
39298: LD_EXP 134
39302: PPUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: EMPTY
39309: PPUSH
39310: CALL_OW 1
39314: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
39315: LD_ADDR_EXP 135
39319: PUSH
39320: LD_EXP 135
39324: PPUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: EMPTY
39331: PPUSH
39332: CALL_OW 1
39336: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
39337: LD_ADDR_EXP 136
39341: PUSH
39342: LD_EXP 136
39346: PPUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: EMPTY
39353: PPUSH
39354: CALL_OW 1
39358: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
39359: LD_ADDR_EXP 137
39363: PUSH
39364: LD_EXP 137
39368: PPUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: EMPTY
39375: PPUSH
39376: CALL_OW 1
39380: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
39381: LD_ADDR_EXP 138
39385: PUSH
39386: LD_EXP 138
39390: PPUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: EMPTY
39397: PPUSH
39398: CALL_OW 1
39402: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
39403: LD_ADDR_EXP 139
39407: PUSH
39408: LD_EXP 139
39412: PPUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: EMPTY
39419: PPUSH
39420: CALL_OW 1
39424: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
39425: LD_ADDR_EXP 140
39429: PUSH
39430: LD_EXP 140
39434: PPUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: EMPTY
39441: PPUSH
39442: CALL_OW 1
39446: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
39447: LD_ADDR_EXP 141
39451: PUSH
39452: LD_EXP 141
39456: PPUSH
39457: LD_VAR 0 1
39461: PPUSH
39462: EMPTY
39463: PPUSH
39464: CALL_OW 1
39468: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
39469: LD_ADDR_EXP 142
39473: PUSH
39474: LD_EXP 142
39478: PPUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: EMPTY
39485: PPUSH
39486: CALL_OW 1
39490: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
39491: LD_ADDR_EXP 143
39495: PUSH
39496: LD_EXP 143
39500: PPUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: LD_INT 0
39508: PPUSH
39509: CALL_OW 1
39513: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
39514: LD_ADDR_EXP 144
39518: PUSH
39519: LD_EXP 144
39523: PPUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_INT 0
39531: PPUSH
39532: CALL_OW 1
39536: ST_TO_ADDR
// end ;
39537: LD_VAR 0 2
39541: RET
// export function MC_Add ( side , units ) ; var base ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
// base := mc_bases + 1 ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_EXP 101
39555: PUSH
39556: LD_INT 1
39558: PLUS
39559: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
39560: LD_ADDR_EXP 127
39564: PUSH
39565: LD_EXP 127
39569: PPUSH
39570: LD_VAR 0 4
39574: PPUSH
39575: LD_VAR 0 1
39579: PPUSH
39580: CALL_OW 1
39584: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
39585: LD_ADDR_EXP 101
39589: PUSH
39590: LD_EXP 101
39594: PPUSH
39595: LD_VAR 0 4
39599: PPUSH
39600: LD_VAR 0 2
39604: PPUSH
39605: CALL_OW 1
39609: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
39610: LD_ADDR_EXP 102
39614: PUSH
39615: LD_EXP 102
39619: PPUSH
39620: LD_VAR 0 4
39624: PPUSH
39625: EMPTY
39626: PPUSH
39627: CALL_OW 1
39631: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
39632: LD_ADDR_EXP 103
39636: PUSH
39637: LD_EXP 103
39641: PPUSH
39642: LD_VAR 0 4
39646: PPUSH
39647: EMPTY
39648: PPUSH
39649: CALL_OW 1
39653: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
39654: LD_ADDR_EXP 104
39658: PUSH
39659: LD_EXP 104
39663: PPUSH
39664: LD_VAR 0 4
39668: PPUSH
39669: EMPTY
39670: PPUSH
39671: CALL_OW 1
39675: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
39676: LD_ADDR_EXP 105
39680: PUSH
39681: LD_EXP 105
39685: PPUSH
39686: LD_VAR 0 4
39690: PPUSH
39691: EMPTY
39692: PPUSH
39693: CALL_OW 1
39697: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
39698: LD_ADDR_EXP 106
39702: PUSH
39703: LD_EXP 106
39707: PPUSH
39708: LD_VAR 0 4
39712: PPUSH
39713: EMPTY
39714: PPUSH
39715: CALL_OW 1
39719: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
39720: LD_ADDR_EXP 107
39724: PUSH
39725: LD_EXP 107
39729: PPUSH
39730: LD_VAR 0 4
39734: PPUSH
39735: EMPTY
39736: PPUSH
39737: CALL_OW 1
39741: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
39742: LD_ADDR_EXP 108
39746: PUSH
39747: LD_EXP 108
39751: PPUSH
39752: LD_VAR 0 4
39756: PPUSH
39757: EMPTY
39758: PPUSH
39759: CALL_OW 1
39763: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
39764: LD_ADDR_EXP 109
39768: PUSH
39769: LD_EXP 109
39773: PPUSH
39774: LD_VAR 0 4
39778: PPUSH
39779: EMPTY
39780: PPUSH
39781: CALL_OW 1
39785: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
39786: LD_ADDR_EXP 110
39790: PUSH
39791: LD_EXP 110
39795: PPUSH
39796: LD_VAR 0 4
39800: PPUSH
39801: EMPTY
39802: PPUSH
39803: CALL_OW 1
39807: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
39808: LD_ADDR_EXP 111
39812: PUSH
39813: LD_EXP 111
39817: PPUSH
39818: LD_VAR 0 4
39822: PPUSH
39823: EMPTY
39824: PPUSH
39825: CALL_OW 1
39829: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
39830: LD_ADDR_EXP 112
39834: PUSH
39835: LD_EXP 112
39839: PPUSH
39840: LD_VAR 0 4
39844: PPUSH
39845: LD_INT 0
39847: PPUSH
39848: CALL_OW 1
39852: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
39853: LD_ADDR_EXP 113
39857: PUSH
39858: LD_EXP 113
39862: PPUSH
39863: LD_VAR 0 4
39867: PPUSH
39868: EMPTY
39869: PPUSH
39870: CALL_OW 1
39874: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
39875: LD_ADDR_EXP 114
39879: PUSH
39880: LD_EXP 114
39884: PPUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: EMPTY
39891: PPUSH
39892: CALL_OW 1
39896: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
39897: LD_ADDR_EXP 115
39901: PUSH
39902: LD_EXP 115
39906: PPUSH
39907: LD_VAR 0 4
39911: PPUSH
39912: EMPTY
39913: PPUSH
39914: CALL_OW 1
39918: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
39919: LD_ADDR_EXP 116
39923: PUSH
39924: LD_EXP 116
39928: PPUSH
39929: LD_VAR 0 4
39933: PPUSH
39934: EMPTY
39935: PPUSH
39936: CALL_OW 1
39940: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
39941: LD_ADDR_EXP 117
39945: PUSH
39946: LD_EXP 117
39950: PPUSH
39951: LD_VAR 0 4
39955: PPUSH
39956: EMPTY
39957: PPUSH
39958: CALL_OW 1
39962: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
39963: LD_ADDR_EXP 118
39967: PUSH
39968: LD_EXP 118
39972: PPUSH
39973: LD_VAR 0 4
39977: PPUSH
39978: EMPTY
39979: PPUSH
39980: CALL_OW 1
39984: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
39985: LD_ADDR_EXP 119
39989: PUSH
39990: LD_EXP 119
39994: PPUSH
39995: LD_VAR 0 4
39999: PPUSH
40000: EMPTY
40001: PPUSH
40002: CALL_OW 1
40006: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
40007: LD_ADDR_EXP 120
40011: PUSH
40012: LD_EXP 120
40016: PPUSH
40017: LD_VAR 0 4
40021: PPUSH
40022: EMPTY
40023: PPUSH
40024: CALL_OW 1
40028: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
40029: LD_ADDR_EXP 121
40033: PUSH
40034: LD_EXP 121
40038: PPUSH
40039: LD_VAR 0 4
40043: PPUSH
40044: EMPTY
40045: PPUSH
40046: CALL_OW 1
40050: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
40051: LD_ADDR_EXP 122
40055: PUSH
40056: LD_EXP 122
40060: PPUSH
40061: LD_VAR 0 4
40065: PPUSH
40066: EMPTY
40067: PPUSH
40068: CALL_OW 1
40072: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
40073: LD_ADDR_EXP 123
40077: PUSH
40078: LD_EXP 123
40082: PPUSH
40083: LD_VAR 0 4
40087: PPUSH
40088: EMPTY
40089: PPUSH
40090: CALL_OW 1
40094: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
40095: LD_ADDR_EXP 124
40099: PUSH
40100: LD_EXP 124
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: EMPTY
40111: PPUSH
40112: CALL_OW 1
40116: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
40117: LD_ADDR_EXP 125
40121: PUSH
40122: LD_EXP 125
40126: PPUSH
40127: LD_VAR 0 4
40131: PPUSH
40132: EMPTY
40133: PPUSH
40134: CALL_OW 1
40138: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
40139: LD_ADDR_EXP 126
40143: PUSH
40144: LD_EXP 126
40148: PPUSH
40149: LD_VAR 0 4
40153: PPUSH
40154: EMPTY
40155: PPUSH
40156: CALL_OW 1
40160: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
40161: LD_ADDR_EXP 128
40165: PUSH
40166: LD_EXP 128
40170: PPUSH
40171: LD_VAR 0 4
40175: PPUSH
40176: EMPTY
40177: PPUSH
40178: CALL_OW 1
40182: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
40183: LD_ADDR_EXP 130
40187: PUSH
40188: LD_EXP 130
40192: PPUSH
40193: LD_VAR 0 4
40197: PPUSH
40198: EMPTY
40199: PPUSH
40200: CALL_OW 1
40204: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
40205: LD_ADDR_EXP 131
40209: PUSH
40210: LD_EXP 131
40214: PPUSH
40215: LD_VAR 0 4
40219: PPUSH
40220: EMPTY
40221: PPUSH
40222: CALL_OW 1
40226: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
40227: LD_ADDR_EXP 132
40231: PUSH
40232: LD_EXP 132
40236: PPUSH
40237: LD_VAR 0 4
40241: PPUSH
40242: EMPTY
40243: PPUSH
40244: CALL_OW 1
40248: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
40249: LD_ADDR_EXP 133
40253: PUSH
40254: LD_EXP 133
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: EMPTY
40265: PPUSH
40266: CALL_OW 1
40270: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
40271: LD_ADDR_EXP 134
40275: PUSH
40276: LD_EXP 134
40280: PPUSH
40281: LD_VAR 0 4
40285: PPUSH
40286: EMPTY
40287: PPUSH
40288: CALL_OW 1
40292: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
40293: LD_ADDR_EXP 135
40297: PUSH
40298: LD_EXP 135
40302: PPUSH
40303: LD_VAR 0 4
40307: PPUSH
40308: EMPTY
40309: PPUSH
40310: CALL_OW 1
40314: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
40315: LD_ADDR_EXP 136
40319: PUSH
40320: LD_EXP 136
40324: PPUSH
40325: LD_VAR 0 4
40329: PPUSH
40330: EMPTY
40331: PPUSH
40332: CALL_OW 1
40336: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
40337: LD_ADDR_EXP 137
40341: PUSH
40342: LD_EXP 137
40346: PPUSH
40347: LD_VAR 0 4
40351: PPUSH
40352: EMPTY
40353: PPUSH
40354: CALL_OW 1
40358: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
40359: LD_ADDR_EXP 138
40363: PUSH
40364: LD_EXP 138
40368: PPUSH
40369: LD_VAR 0 4
40373: PPUSH
40374: EMPTY
40375: PPUSH
40376: CALL_OW 1
40380: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
40381: LD_ADDR_EXP 139
40385: PUSH
40386: LD_EXP 139
40390: PPUSH
40391: LD_VAR 0 4
40395: PPUSH
40396: EMPTY
40397: PPUSH
40398: CALL_OW 1
40402: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
40403: LD_ADDR_EXP 140
40407: PUSH
40408: LD_EXP 140
40412: PPUSH
40413: LD_VAR 0 4
40417: PPUSH
40418: EMPTY
40419: PPUSH
40420: CALL_OW 1
40424: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
40425: LD_ADDR_EXP 141
40429: PUSH
40430: LD_EXP 141
40434: PPUSH
40435: LD_VAR 0 4
40439: PPUSH
40440: EMPTY
40441: PPUSH
40442: CALL_OW 1
40446: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
40447: LD_ADDR_EXP 142
40451: PUSH
40452: LD_EXP 142
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: EMPTY
40463: PPUSH
40464: CALL_OW 1
40468: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
40469: LD_ADDR_EXP 143
40473: PUSH
40474: LD_EXP 143
40478: PPUSH
40479: LD_VAR 0 4
40483: PPUSH
40484: LD_INT 0
40486: PPUSH
40487: CALL_OW 1
40491: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
40492: LD_ADDR_EXP 144
40496: PUSH
40497: LD_EXP 144
40501: PPUSH
40502: LD_VAR 0 4
40506: PPUSH
40507: LD_INT 0
40509: PPUSH
40510: CALL_OW 1
40514: ST_TO_ADDR
// result := base ;
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_VAR 0 4
40524: ST_TO_ADDR
// end ;
40525: LD_VAR 0 3
40529: RET
// export function MC_Start ( ) ; var i ; begin
40530: LD_INT 0
40532: PPUSH
40533: PPUSH
// for i = 1 to mc_bases do
40534: LD_ADDR_VAR 0 2
40538: PUSH
40539: DOUBLE
40540: LD_INT 1
40542: DEC
40543: ST_TO_ADDR
40544: LD_EXP 101
40548: PUSH
40549: FOR_TO
40550: IFFALSE 41650
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
40552: LD_ADDR_EXP 101
40556: PUSH
40557: LD_EXP 101
40561: PPUSH
40562: LD_VAR 0 2
40566: PPUSH
40567: LD_EXP 101
40571: PUSH
40572: LD_VAR 0 2
40576: ARRAY
40577: PUSH
40578: LD_INT 0
40580: DIFF
40581: PPUSH
40582: CALL_OW 1
40586: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
40587: LD_ADDR_EXP 102
40591: PUSH
40592: LD_EXP 102
40596: PPUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: EMPTY
40603: PPUSH
40604: CALL_OW 1
40608: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
40609: LD_ADDR_EXP 103
40613: PUSH
40614: LD_EXP 103
40618: PPUSH
40619: LD_VAR 0 2
40623: PPUSH
40624: EMPTY
40625: PPUSH
40626: CALL_OW 1
40630: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
40631: LD_ADDR_EXP 104
40635: PUSH
40636: LD_EXP 104
40640: PPUSH
40641: LD_VAR 0 2
40645: PPUSH
40646: EMPTY
40647: PPUSH
40648: CALL_OW 1
40652: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
40653: LD_ADDR_EXP 105
40657: PUSH
40658: LD_EXP 105
40662: PPUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: EMPTY
40669: PUSH
40670: EMPTY
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PPUSH
40676: CALL_OW 1
40680: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
40681: LD_ADDR_EXP 106
40685: PUSH
40686: LD_EXP 106
40690: PPUSH
40691: LD_VAR 0 2
40695: PPUSH
40696: EMPTY
40697: PPUSH
40698: CALL_OW 1
40702: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
40703: LD_ADDR_EXP 133
40707: PUSH
40708: LD_EXP 133
40712: PPUSH
40713: LD_VAR 0 2
40717: PPUSH
40718: EMPTY
40719: PPUSH
40720: CALL_OW 1
40724: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
40725: LD_ADDR_EXP 107
40729: PUSH
40730: LD_EXP 107
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: EMPTY
40741: PPUSH
40742: CALL_OW 1
40746: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
40747: LD_ADDR_EXP 108
40751: PUSH
40752: LD_EXP 108
40756: PPUSH
40757: LD_VAR 0 2
40761: PPUSH
40762: EMPTY
40763: PPUSH
40764: CALL_OW 1
40768: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
40769: LD_ADDR_EXP 109
40773: PUSH
40774: LD_EXP 109
40778: PPUSH
40779: LD_VAR 0 2
40783: PPUSH
40784: LD_EXP 101
40788: PUSH
40789: LD_VAR 0 2
40793: ARRAY
40794: PPUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 30
40800: PUSH
40801: LD_INT 32
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 30
40810: PUSH
40811: LD_INT 33
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: PPUSH
40823: CALL_OW 72
40827: PPUSH
40828: CALL_OW 1
40832: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
40833: LD_ADDR_EXP 110
40837: PUSH
40838: LD_EXP 110
40842: PPUSH
40843: LD_VAR 0 2
40847: PPUSH
40848: LD_EXP 101
40852: PUSH
40853: LD_VAR 0 2
40857: ARRAY
40858: PPUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: LD_INT 32
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 30
40874: PUSH
40875: LD_INT 31
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 58
40889: PUSH
40890: EMPTY
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PPUSH
40897: CALL_OW 72
40901: PPUSH
40902: CALL_OW 1
40906: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
40907: LD_ADDR_EXP 111
40911: PUSH
40912: LD_EXP 111
40916: PPUSH
40917: LD_VAR 0 2
40921: PPUSH
40922: EMPTY
40923: PPUSH
40924: CALL_OW 1
40928: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
40929: LD_ADDR_EXP 115
40933: PUSH
40934: LD_EXP 115
40938: PPUSH
40939: LD_VAR 0 2
40943: PPUSH
40944: EMPTY
40945: PPUSH
40946: CALL_OW 1
40950: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
40951: LD_ADDR_EXP 114
40955: PUSH
40956: LD_EXP 114
40960: PPUSH
40961: LD_VAR 0 2
40965: PPUSH
40966: EMPTY
40967: PPUSH
40968: CALL_OW 1
40972: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
40973: LD_ADDR_EXP 116
40977: PUSH
40978: LD_EXP 116
40982: PPUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: EMPTY
40989: PPUSH
40990: CALL_OW 1
40994: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
40995: LD_ADDR_EXP 117
40999: PUSH
41000: LD_EXP 117
41004: PPUSH
41005: LD_VAR 0 2
41009: PPUSH
41010: EMPTY
41011: PPUSH
41012: CALL_OW 1
41016: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
41017: LD_ADDR_EXP 118
41021: PUSH
41022: LD_EXP 118
41026: PPUSH
41027: LD_VAR 0 2
41031: PPUSH
41032: EMPTY
41033: PPUSH
41034: CALL_OW 1
41038: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
41039: LD_ADDR_EXP 119
41043: PUSH
41044: LD_EXP 119
41048: PPUSH
41049: LD_VAR 0 2
41053: PPUSH
41054: EMPTY
41055: PPUSH
41056: CALL_OW 1
41060: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
41061: LD_ADDR_EXP 120
41065: PUSH
41066: LD_EXP 120
41070: PPUSH
41071: LD_VAR 0 2
41075: PPUSH
41076: EMPTY
41077: PPUSH
41078: CALL_OW 1
41082: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
41083: LD_ADDR_EXP 121
41087: PUSH
41088: LD_EXP 121
41092: PPUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: EMPTY
41099: PPUSH
41100: CALL_OW 1
41104: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
41105: LD_ADDR_EXP 122
41109: PUSH
41110: LD_EXP 122
41114: PPUSH
41115: LD_VAR 0 2
41119: PPUSH
41120: EMPTY
41121: PPUSH
41122: CALL_OW 1
41126: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
41127: LD_ADDR_EXP 123
41131: PUSH
41132: LD_EXP 123
41136: PPUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: EMPTY
41143: PPUSH
41144: CALL_OW 1
41148: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
41149: LD_ADDR_EXP 112
41153: PUSH
41154: LD_EXP 112
41158: PPUSH
41159: LD_VAR 0 2
41163: PPUSH
41164: LD_INT 0
41166: PPUSH
41167: CALL_OW 1
41171: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
41172: LD_ADDR_EXP 125
41176: PUSH
41177: LD_EXP 125
41181: PPUSH
41182: LD_VAR 0 2
41186: PPUSH
41187: LD_INT 0
41189: PPUSH
41190: CALL_OW 1
41194: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
41195: LD_ADDR_EXP 113
41199: PUSH
41200: LD_EXP 113
41204: PPUSH
41205: LD_VAR 0 2
41209: PPUSH
41210: EMPTY
41211: PPUSH
41212: CALL_OW 1
41216: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
41217: LD_ADDR_EXP 124
41221: PUSH
41222: LD_EXP 124
41226: PPUSH
41227: LD_VAR 0 2
41231: PPUSH
41232: LD_INT 0
41234: PPUSH
41235: CALL_OW 1
41239: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
41240: LD_ADDR_EXP 126
41244: PUSH
41245: LD_EXP 126
41249: PPUSH
41250: LD_VAR 0 2
41254: PPUSH
41255: EMPTY
41256: PPUSH
41257: CALL_OW 1
41261: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
41262: LD_ADDR_EXP 129
41266: PUSH
41267: LD_EXP 129
41271: PPUSH
41272: LD_VAR 0 2
41276: PPUSH
41277: LD_INT 0
41279: PPUSH
41280: CALL_OW 1
41284: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
41285: LD_ADDR_EXP 130
41289: PUSH
41290: LD_EXP 130
41294: PPUSH
41295: LD_VAR 0 2
41299: PPUSH
41300: EMPTY
41301: PPUSH
41302: CALL_OW 1
41306: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41307: LD_ADDR_EXP 131
41311: PUSH
41312: LD_EXP 131
41316: PPUSH
41317: LD_VAR 0 2
41321: PPUSH
41322: EMPTY
41323: PPUSH
41324: CALL_OW 1
41328: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
41329: LD_ADDR_EXP 132
41333: PUSH
41334: LD_EXP 132
41338: PPUSH
41339: LD_VAR 0 2
41343: PPUSH
41344: EMPTY
41345: PPUSH
41346: CALL_OW 1
41350: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
41351: LD_ADDR_EXP 134
41355: PUSH
41356: LD_EXP 134
41360: PPUSH
41361: LD_VAR 0 2
41365: PPUSH
41366: LD_EXP 101
41370: PUSH
41371: LD_VAR 0 2
41375: ARRAY
41376: PPUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 30
41382: PUSH
41383: LD_INT 6
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 30
41392: PUSH
41393: LD_INT 7
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 30
41402: PUSH
41403: LD_INT 8
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL_OW 72
41420: PPUSH
41421: CALL_OW 1
41425: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
41426: LD_ADDR_EXP 135
41430: PUSH
41431: LD_EXP 135
41435: PPUSH
41436: LD_VAR 0 2
41440: PPUSH
41441: EMPTY
41442: PPUSH
41443: CALL_OW 1
41447: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
41448: LD_ADDR_EXP 136
41452: PUSH
41453: LD_EXP 136
41457: PPUSH
41458: LD_VAR 0 2
41462: PPUSH
41463: EMPTY
41464: PPUSH
41465: CALL_OW 1
41469: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
41470: LD_ADDR_EXP 137
41474: PUSH
41475: LD_EXP 137
41479: PPUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: EMPTY
41486: PPUSH
41487: CALL_OW 1
41491: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
41492: LD_ADDR_EXP 138
41496: PUSH
41497: LD_EXP 138
41501: PPUSH
41502: LD_VAR 0 2
41506: PPUSH
41507: EMPTY
41508: PPUSH
41509: CALL_OW 1
41513: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41514: LD_ADDR_EXP 139
41518: PUSH
41519: LD_EXP 139
41523: PPUSH
41524: LD_VAR 0 2
41528: PPUSH
41529: EMPTY
41530: PPUSH
41531: CALL_OW 1
41535: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
41536: LD_ADDR_EXP 140
41540: PUSH
41541: LD_EXP 140
41545: PPUSH
41546: LD_VAR 0 2
41550: PPUSH
41551: EMPTY
41552: PPUSH
41553: CALL_OW 1
41557: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
41558: LD_ADDR_EXP 141
41562: PUSH
41563: LD_EXP 141
41567: PPUSH
41568: LD_VAR 0 2
41572: PPUSH
41573: EMPTY
41574: PPUSH
41575: CALL_OW 1
41579: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
41580: LD_ADDR_EXP 142
41584: PUSH
41585: LD_EXP 142
41589: PPUSH
41590: LD_VAR 0 2
41594: PPUSH
41595: EMPTY
41596: PPUSH
41597: CALL_OW 1
41601: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
41602: LD_ADDR_EXP 143
41606: PUSH
41607: LD_EXP 143
41611: PPUSH
41612: LD_VAR 0 2
41616: PPUSH
41617: LD_INT 0
41619: PPUSH
41620: CALL_OW 1
41624: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
41625: LD_ADDR_EXP 144
41629: PUSH
41630: LD_EXP 144
41634: PPUSH
41635: LD_VAR 0 2
41639: PPUSH
41640: LD_INT 0
41642: PPUSH
41643: CALL_OW 1
41647: ST_TO_ADDR
// end ;
41648: GO 40549
41650: POP
41651: POP
// MC_InitSides ( ) ;
41652: CALL 41938 0 0
// MC_InitResearch ( ) ;
41656: CALL 41677 0 0
// CustomInitMacro ( ) ;
41660: CALL 475 0 0
// skirmish := true ;
41664: LD_ADDR_EXP 99
41668: PUSH
41669: LD_INT 1
41671: ST_TO_ADDR
// end ;
41672: LD_VAR 0 1
41676: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
41677: LD_INT 0
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
// if not mc_bases then
41685: LD_EXP 101
41689: NOT
41690: IFFALSE 41694
// exit ;
41692: GO 41933
// for i = 1 to 8 do
41694: LD_ADDR_VAR 0 2
41698: PUSH
41699: DOUBLE
41700: LD_INT 1
41702: DEC
41703: ST_TO_ADDR
41704: LD_INT 8
41706: PUSH
41707: FOR_TO
41708: IFFALSE 41734
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
41710: LD_ADDR_EXP 128
41714: PUSH
41715: LD_EXP 128
41719: PPUSH
41720: LD_VAR 0 2
41724: PPUSH
41725: EMPTY
41726: PPUSH
41727: CALL_OW 1
41731: ST_TO_ADDR
41732: GO 41707
41734: POP
41735: POP
// tmp := [ ] ;
41736: LD_ADDR_VAR 0 5
41740: PUSH
41741: EMPTY
41742: ST_TO_ADDR
// for i = 1 to mc_sides do
41743: LD_ADDR_VAR 0 2
41747: PUSH
41748: DOUBLE
41749: LD_INT 1
41751: DEC
41752: ST_TO_ADDR
41753: LD_EXP 127
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41817
// if not mc_sides [ i ] in tmp then
41761: LD_EXP 127
41765: PUSH
41766: LD_VAR 0 2
41770: ARRAY
41771: PUSH
41772: LD_VAR 0 5
41776: IN
41777: NOT
41778: IFFALSE 41815
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
41780: LD_ADDR_VAR 0 5
41784: PUSH
41785: LD_VAR 0 5
41789: PPUSH
41790: LD_VAR 0 5
41794: PUSH
41795: LD_INT 1
41797: PLUS
41798: PPUSH
41799: LD_EXP 127
41803: PUSH
41804: LD_VAR 0 2
41808: ARRAY
41809: PPUSH
41810: CALL_OW 2
41814: ST_TO_ADDR
41815: GO 41758
41817: POP
41818: POP
// if not tmp then
41819: LD_VAR 0 5
41823: NOT
41824: IFFALSE 41828
// exit ;
41826: GO 41933
// for j in tmp do
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_VAR 0 5
41837: PUSH
41838: FOR_IN
41839: IFFALSE 41931
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_INT 22
41848: PUSH
41849: LD_VAR 0 3
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PPUSH
41858: CALL_OW 69
41862: ST_TO_ADDR
// if not un then
41863: LD_VAR 0 6
41867: NOT
41868: IFFALSE 41872
// continue ;
41870: GO 41838
// nation := GetNation ( un [ 1 ] ) ;
41872: LD_ADDR_VAR 0 4
41876: PUSH
41877: LD_VAR 0 6
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: PPUSH
41886: CALL_OW 248
41890: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
41891: LD_ADDR_EXP 128
41895: PUSH
41896: LD_EXP 128
41900: PPUSH
41901: LD_VAR 0 3
41905: PPUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_VAR 0 4
41915: PPUSH
41916: LD_INT 1
41918: PPUSH
41919: CALL 69121 0 3
41923: PPUSH
41924: CALL_OW 1
41928: ST_TO_ADDR
// end ;
41929: GO 41838
41931: POP
41932: POP
// end ;
41933: LD_VAR 0 1
41937: RET
// export function MC_InitSides ( ) ; var i ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
// if not mc_bases then
41942: LD_EXP 101
41946: NOT
41947: IFFALSE 41951
// exit ;
41949: GO 42025
// for i = 1 to mc_bases do
41951: LD_ADDR_VAR 0 2
41955: PUSH
41956: DOUBLE
41957: LD_INT 1
41959: DEC
41960: ST_TO_ADDR
41961: LD_EXP 101
41965: PUSH
41966: FOR_TO
41967: IFFALSE 42023
// if mc_bases [ i ] then
41969: LD_EXP 101
41973: PUSH
41974: LD_VAR 0 2
41978: ARRAY
41979: IFFALSE 42021
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
41981: LD_ADDR_EXP 127
41985: PUSH
41986: LD_EXP 127
41990: PPUSH
41991: LD_VAR 0 2
41995: PPUSH
41996: LD_EXP 101
42000: PUSH
42001: LD_VAR 0 2
42005: ARRAY
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: CALL_OW 255
42015: PPUSH
42016: CALL_OW 1
42020: ST_TO_ADDR
42021: GO 41966
42023: POP
42024: POP
// end ;
42025: LD_VAR 0 1
42029: RET
// every 0 0$03 trigger skirmish do
42030: LD_EXP 99
42034: IFFALSE 42188
42036: GO 42038
42038: DISABLE
// begin enable ;
42039: ENABLE
// MC_CheckBuildings ( ) ;
42040: CALL 46700 0 0
// MC_CheckPeopleLife ( ) ;
42044: CALL 46861 0 0
// RaiseSailEvent ( 100 ) ;
42048: LD_INT 100
42050: PPUSH
42051: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
42055: LD_INT 103
42057: PPUSH
42058: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
42062: LD_INT 104
42064: PPUSH
42065: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
42069: LD_INT 105
42071: PPUSH
42072: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
42076: LD_INT 106
42078: PPUSH
42079: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
42083: LD_INT 107
42085: PPUSH
42086: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
42090: LD_INT 108
42092: PPUSH
42093: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
42097: LD_INT 109
42099: PPUSH
42100: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
42104: LD_INT 110
42106: PPUSH
42107: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
42111: LD_INT 111
42113: PPUSH
42114: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
42118: LD_INT 112
42120: PPUSH
42121: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
42125: LD_INT 113
42127: PPUSH
42128: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
42132: LD_INT 120
42134: PPUSH
42135: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
42139: LD_INT 121
42141: PPUSH
42142: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
42146: LD_INT 122
42148: PPUSH
42149: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
42153: LD_INT 123
42155: PPUSH
42156: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
42160: LD_INT 124
42162: PPUSH
42163: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
42167: LD_INT 125
42169: PPUSH
42170: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
42174: LD_INT 126
42176: PPUSH
42177: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
42181: LD_INT 200
42183: PPUSH
42184: CALL_OW 427
// end ;
42188: END
// on SailEvent ( event ) do begin if event < 100 then
42189: LD_VAR 0 1
42193: PUSH
42194: LD_INT 100
42196: LESS
42197: IFFALSE 42208
// CustomEvent ( event ) ;
42199: LD_VAR 0 1
42203: PPUSH
42204: CALL 36564 0 1
// if event = 100 then
42208: LD_VAR 0 1
42212: PUSH
42213: LD_INT 100
42215: EQUAL
42216: IFFALSE 42222
// MC_ClassManager ( ) ;
42218: CALL 42614 0 0
// if event = 101 then
42222: LD_VAR 0 1
42226: PUSH
42227: LD_INT 101
42229: EQUAL
42230: IFFALSE 42236
// MC_RepairBuildings ( ) ;
42232: CALL 47446 0 0
// if event = 102 then
42236: LD_VAR 0 1
42240: PUSH
42241: LD_INT 102
42243: EQUAL
42244: IFFALSE 42250
// MC_Heal ( ) ;
42246: CALL 48381 0 0
// if event = 103 then
42250: LD_VAR 0 1
42254: PUSH
42255: LD_INT 103
42257: EQUAL
42258: IFFALSE 42264
// MC_Build ( ) ;
42260: CALL 48803 0 0
// if event = 104 then
42264: LD_VAR 0 1
42268: PUSH
42269: LD_INT 104
42271: EQUAL
42272: IFFALSE 42278
// MC_TurretWeapon ( ) ;
42274: CALL 50437 0 0
// if event = 105 then
42278: LD_VAR 0 1
42282: PUSH
42283: LD_INT 105
42285: EQUAL
42286: IFFALSE 42292
// MC_BuildUpgrade ( ) ;
42288: CALL 49988 0 0
// if event = 106 then
42292: LD_VAR 0 1
42296: PUSH
42297: LD_INT 106
42299: EQUAL
42300: IFFALSE 42306
// MC_PlantMines ( ) ;
42302: CALL 50867 0 0
// if event = 107 then
42306: LD_VAR 0 1
42310: PUSH
42311: LD_INT 107
42313: EQUAL
42314: IFFALSE 42320
// MC_CollectCrates ( ) ;
42316: CALL 51665 0 0
// if event = 108 then
42320: LD_VAR 0 1
42324: PUSH
42325: LD_INT 108
42327: EQUAL
42328: IFFALSE 42334
// MC_LinkRemoteControl ( ) ;
42330: CALL 53515 0 0
// if event = 109 then
42334: LD_VAR 0 1
42338: PUSH
42339: LD_INT 109
42341: EQUAL
42342: IFFALSE 42348
// MC_ProduceVehicle ( ) ;
42344: CALL 53696 0 0
// if event = 110 then
42348: LD_VAR 0 1
42352: PUSH
42353: LD_INT 110
42355: EQUAL
42356: IFFALSE 42362
// MC_SendAttack ( ) ;
42358: CALL 54162 0 0
// if event = 111 then
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 111
42369: EQUAL
42370: IFFALSE 42376
// MC_Defend ( ) ;
42372: CALL 54270 0 0
// if event = 112 then
42376: LD_VAR 0 1
42380: PUSH
42381: LD_INT 112
42383: EQUAL
42384: IFFALSE 42390
// MC_Research ( ) ;
42386: CALL 55150 0 0
// if event = 113 then
42390: LD_VAR 0 1
42394: PUSH
42395: LD_INT 113
42397: EQUAL
42398: IFFALSE 42404
// MC_MinesTrigger ( ) ;
42400: CALL 56264 0 0
// if event = 120 then
42404: LD_VAR 0 1
42408: PUSH
42409: LD_INT 120
42411: EQUAL
42412: IFFALSE 42418
// MC_RepairVehicle ( ) ;
42414: CALL 56363 0 0
// if event = 121 then
42418: LD_VAR 0 1
42422: PUSH
42423: LD_INT 121
42425: EQUAL
42426: IFFALSE 42432
// MC_TameApe ( ) ;
42428: CALL 57132 0 0
// if event = 122 then
42432: LD_VAR 0 1
42436: PUSH
42437: LD_INT 122
42439: EQUAL
42440: IFFALSE 42446
// MC_ChangeApeClass ( ) ;
42442: CALL 57961 0 0
// if event = 123 then
42446: LD_VAR 0 1
42450: PUSH
42451: LD_INT 123
42453: EQUAL
42454: IFFALSE 42460
// MC_Bazooka ( ) ;
42456: CALL 58611 0 0
// if event = 124 then
42460: LD_VAR 0 1
42464: PUSH
42465: LD_INT 124
42467: EQUAL
42468: IFFALSE 42474
// MC_TeleportExit ( ) ;
42470: CALL 58809 0 0
// if event = 125 then
42474: LD_VAR 0 1
42478: PUSH
42479: LD_INT 125
42481: EQUAL
42482: IFFALSE 42488
// MC_Deposits ( ) ;
42484: CALL 59456 0 0
// if event = 126 then
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 126
42495: EQUAL
42496: IFFALSE 42502
// MC_RemoteDriver ( ) ;
42498: CALL 60081 0 0
// if event = 200 then
42502: LD_VAR 0 1
42506: PUSH
42507: LD_INT 200
42509: EQUAL
42510: IFFALSE 42516
// MC_Idle ( ) ;
42512: CALL 61988 0 0
// end ;
42516: PPOPN 1
42518: END
// export function MC_Reset ( base , tag ) ; var i ; begin
42519: LD_INT 0
42521: PPUSH
42522: PPUSH
// if not mc_bases [ base ] or not tag then
42523: LD_EXP 101
42527: PUSH
42528: LD_VAR 0 1
42532: ARRAY
42533: NOT
42534: PUSH
42535: LD_VAR 0 2
42539: NOT
42540: OR
42541: IFFALSE 42545
// exit ;
42543: GO 42609
// for i in mc_bases [ base ] union mc_ape [ base ] do
42545: LD_ADDR_VAR 0 4
42549: PUSH
42550: LD_EXP 101
42554: PUSH
42555: LD_VAR 0 1
42559: ARRAY
42560: PUSH
42561: LD_EXP 130
42565: PUSH
42566: LD_VAR 0 1
42570: ARRAY
42571: UNION
42572: PUSH
42573: FOR_IN
42574: IFFALSE 42607
// if GetTag ( i ) = tag then
42576: LD_VAR 0 4
42580: PPUSH
42581: CALL_OW 110
42585: PUSH
42586: LD_VAR 0 2
42590: EQUAL
42591: IFFALSE 42605
// SetTag ( i , 0 ) ;
42593: LD_VAR 0 4
42597: PPUSH
42598: LD_INT 0
42600: PPUSH
42601: CALL_OW 109
42605: GO 42573
42607: POP
42608: POP
// end ;
42609: LD_VAR 0 3
42613: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
42614: LD_INT 0
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
// if not mc_bases then
42624: LD_EXP 101
42628: NOT
42629: IFFALSE 42633
// exit ;
42631: GO 43082
// for i = 1 to mc_bases do
42633: LD_ADDR_VAR 0 2
42637: PUSH
42638: DOUBLE
42639: LD_INT 1
42641: DEC
42642: ST_TO_ADDR
42643: LD_EXP 101
42647: PUSH
42648: FOR_TO
42649: IFFALSE 43080
// begin tmp := MC_ClassCheckReq ( i ) ;
42651: LD_ADDR_VAR 0 4
42655: PUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: CALL 43087 0 1
42665: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
42666: LD_ADDR_EXP 142
42670: PUSH
42671: LD_EXP 142
42675: PPUSH
42676: LD_VAR 0 2
42680: PPUSH
42681: LD_VAR 0 4
42685: PPUSH
42686: CALL_OW 1
42690: ST_TO_ADDR
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
42691: LD_ADDR_VAR 0 6
42695: PUSH
42696: LD_EXP 101
42700: PUSH
42701: LD_VAR 0 2
42705: ARRAY
42706: PPUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 30
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 30
42722: PUSH
42723: LD_INT 5
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PPUSH
42735: CALL_OW 72
42739: PUSH
42740: LD_EXP 101
42744: PUSH
42745: LD_VAR 0 2
42749: ARRAY
42750: PPUSH
42751: LD_INT 2
42753: PUSH
42754: LD_INT 30
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 30
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PPUSH
42779: CALL_OW 72
42783: PUSH
42784: LD_EXP 101
42788: PUSH
42789: LD_VAR 0 2
42793: ARRAY
42794: PPUSH
42795: LD_INT 30
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PPUSH
42805: CALL_OW 72
42809: PUSH
42810: LD_EXP 101
42814: PUSH
42815: LD_VAR 0 2
42819: ARRAY
42820: PPUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 30
42826: PUSH
42827: LD_INT 6
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 30
42836: PUSH
42837: LD_INT 7
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 30
42846: PUSH
42847: LD_INT 8
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: PPUSH
42860: CALL_OW 72
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: ST_TO_ADDR
// for j := 1 to 4 do
42871: LD_ADDR_VAR 0 3
42875: PUSH
42876: DOUBLE
42877: LD_INT 1
42879: DEC
42880: ST_TO_ADDR
42881: LD_INT 4
42883: PUSH
42884: FOR_TO
42885: IFFALSE 43076
// begin if not tmp [ j ] then
42887: LD_VAR 0 4
42891: PUSH
42892: LD_VAR 0 3
42896: ARRAY
42897: NOT
42898: IFFALSE 42902
// continue ;
42900: GO 42884
// for p in tmp [ j ] do
42902: LD_ADDR_VAR 0 5
42906: PUSH
42907: LD_VAR 0 4
42911: PUSH
42912: LD_VAR 0 3
42916: ARRAY
42917: PUSH
42918: FOR_IN
42919: IFFALSE 43072
// begin if not b [ j ] then
42921: LD_VAR 0 6
42925: PUSH
42926: LD_VAR 0 3
42930: ARRAY
42931: NOT
42932: IFFALSE 42936
// break ;
42934: GO 43072
// e := 0 ;
42936: LD_ADDR_VAR 0 7
42940: PUSH
42941: LD_INT 0
42943: ST_TO_ADDR
// for k in b [ j ] do
42944: LD_ADDR_VAR 0 8
42948: PUSH
42949: LD_VAR 0 6
42953: PUSH
42954: LD_VAR 0 3
42958: ARRAY
42959: PUSH
42960: FOR_IN
42961: IFFALSE 42988
// if IsNotFull ( k ) then
42963: LD_VAR 0 8
42967: PPUSH
42968: CALL 71242 0 1
42972: IFFALSE 42986
// begin e := k ;
42974: LD_ADDR_VAR 0 7
42978: PUSH
42979: LD_VAR 0 8
42983: ST_TO_ADDR
// break ;
42984: GO 42988
// end ;
42986: GO 42960
42988: POP
42989: POP
// if e and not UnitGoingToBuilding ( p , e ) then
42990: LD_VAR 0 7
42994: PUSH
42995: LD_VAR 0 5
42999: PPUSH
43000: LD_VAR 0 7
43004: PPUSH
43005: CALL 105024 0 2
43009: NOT
43010: AND
43011: IFFALSE 43070
// begin if IsInUnit ( p ) then
43013: LD_VAR 0 5
43017: PPUSH
43018: CALL_OW 310
43022: IFFALSE 43033
// ComExitBuilding ( p ) ;
43024: LD_VAR 0 5
43028: PPUSH
43029: CALL_OW 122
// ComEnterUnit ( p , e ) ;
43033: LD_VAR 0 5
43037: PPUSH
43038: LD_VAR 0 7
43042: PPUSH
43043: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
43047: LD_VAR 0 5
43051: PPUSH
43052: LD_VAR 0 3
43056: PPUSH
43057: CALL_OW 183
// AddComExitBuilding ( p ) ;
43061: LD_VAR 0 5
43065: PPUSH
43066: CALL_OW 182
// end ; end ;
43070: GO 42918
43072: POP
43073: POP
// end ;
43074: GO 42884
43076: POP
43077: POP
// end ;
43078: GO 42648
43080: POP
43081: POP
// end ;
43082: LD_VAR 0 1
43086: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
43087: LD_INT 0
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43101: LD_ADDR_VAR 0 2
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
43124: LD_VAR 0 1
43128: NOT
43129: PUSH
43130: LD_EXP 101
43134: PUSH
43135: LD_VAR 0 1
43139: ARRAY
43140: NOT
43141: OR
43142: PUSH
43143: LD_EXP 101
43147: PUSH
43148: LD_VAR 0 1
43152: ARRAY
43153: PPUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 30
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 30
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: PPUSH
43182: CALL_OW 72
43186: NOT
43187: OR
43188: IFFALSE 43192
// exit ;
43190: GO 46695
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43192: LD_ADDR_VAR 0 4
43196: PUSH
43197: LD_EXP 101
43201: PUSH
43202: LD_VAR 0 1
43206: ARRAY
43207: PPUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 25
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 25
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 25
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 25
43243: PUSH
43244: LD_INT 4
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 25
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 25
43263: PUSH
43264: LD_INT 8
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 25
43273: PUSH
43274: LD_INT 9
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: PPUSH
43291: CALL_OW 72
43295: ST_TO_ADDR
// if not tmp then
43296: LD_VAR 0 4
43300: NOT
43301: IFFALSE 43305
// exit ;
43303: GO 46695
// for i in tmp do
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: FOR_IN
43316: IFFALSE 43347
// if GetTag ( i ) then
43318: LD_VAR 0 3
43322: PPUSH
43323: CALL_OW 110
43327: IFFALSE 43345
// tmp := tmp diff i ;
43329: LD_ADDR_VAR 0 4
43333: PUSH
43334: LD_VAR 0 4
43338: PUSH
43339: LD_VAR 0 3
43343: DIFF
43344: ST_TO_ADDR
43345: GO 43315
43347: POP
43348: POP
// if not tmp then
43349: LD_VAR 0 4
43353: NOT
43354: IFFALSE 43358
// exit ;
43356: GO 46695
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43358: LD_ADDR_VAR 0 5
43362: PUSH
43363: LD_EXP 101
43367: PUSH
43368: LD_VAR 0 1
43372: ARRAY
43373: PPUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 25
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 25
43389: PUSH
43390: LD_INT 5
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 25
43399: PUSH
43400: LD_INT 8
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 25
43409: PUSH
43410: LD_INT 9
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: PPUSH
43424: CALL_OW 72
43428: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_EXP 101
43438: PUSH
43439: LD_VAR 0 1
43443: ARRAY
43444: PPUSH
43445: LD_INT 25
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PPUSH
43455: CALL_OW 72
43459: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
43460: LD_ADDR_VAR 0 7
43464: PUSH
43465: LD_EXP 101
43469: PUSH
43470: LD_VAR 0 1
43474: ARRAY
43475: PPUSH
43476: LD_INT 25
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PPUSH
43486: CALL_OW 72
43490: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
43491: LD_ADDR_VAR 0 8
43495: PUSH
43496: LD_EXP 101
43500: PUSH
43501: LD_VAR 0 1
43505: ARRAY
43506: PPUSH
43507: LD_INT 25
43509: PUSH
43510: LD_INT 4
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 24
43519: PUSH
43520: LD_INT 251
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PPUSH
43531: CALL_OW 72
43535: ST_TO_ADDR
// if mc_is_defending [ base ] then
43536: LD_EXP 144
43540: PUSH
43541: LD_VAR 0 1
43545: ARRAY
43546: IFFALSE 44007
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
43548: LD_ADDR_EXP 143
43552: PUSH
43553: LD_EXP 143
43557: PPUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: LD_INT 4
43565: PPUSH
43566: CALL_OW 1
43570: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
43571: LD_ADDR_VAR 0 12
43575: PUSH
43576: LD_EXP 101
43580: PUSH
43581: LD_VAR 0 1
43585: ARRAY
43586: PPUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 30
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 30
43602: PUSH
43603: LD_INT 5
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: PPUSH
43615: CALL_OW 72
43619: ST_TO_ADDR
// if not b then
43620: LD_VAR 0 12
43624: NOT
43625: IFFALSE 43629
// exit ;
43627: GO 46695
// p := [ ] ;
43629: LD_ADDR_VAR 0 11
43633: PUSH
43634: EMPTY
43635: ST_TO_ADDR
// if sci >= 2 then
43636: LD_VAR 0 8
43640: PUSH
43641: LD_INT 2
43643: GREATEREQUAL
43644: IFFALSE 43675
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
43646: LD_ADDR_VAR 0 8
43650: PUSH
43651: LD_VAR 0 8
43655: PUSH
43656: LD_INT 1
43658: ARRAY
43659: PUSH
43660: LD_VAR 0 8
43664: PUSH
43665: LD_INT 2
43667: ARRAY
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: ST_TO_ADDR
43673: GO 43736
// if sci = 1 then
43675: LD_VAR 0 8
43679: PUSH
43680: LD_INT 1
43682: EQUAL
43683: IFFALSE 43704
// sci := [ sci [ 1 ] ] else
43685: LD_ADDR_VAR 0 8
43689: PUSH
43690: LD_VAR 0 8
43694: PUSH
43695: LD_INT 1
43697: ARRAY
43698: PUSH
43699: EMPTY
43700: LIST
43701: ST_TO_ADDR
43702: GO 43736
// if sci = 0 then
43704: LD_VAR 0 8
43708: PUSH
43709: LD_INT 0
43711: EQUAL
43712: IFFALSE 43736
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
43714: LD_ADDR_VAR 0 11
43718: PUSH
43719: LD_VAR 0 4
43723: PPUSH
43724: LD_INT 4
43726: PPUSH
43727: CALL 104896 0 2
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: ST_TO_ADDR
// if eng > 4 then
43736: LD_VAR 0 6
43740: PUSH
43741: LD_INT 4
43743: GREATER
43744: IFFALSE 43790
// for i = eng downto 4 do
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: DOUBLE
43752: LD_VAR 0 6
43756: INC
43757: ST_TO_ADDR
43758: LD_INT 4
43760: PUSH
43761: FOR_DOWNTO
43762: IFFALSE 43788
// eng := eng diff eng [ i ] ;
43764: LD_ADDR_VAR 0 6
43768: PUSH
43769: LD_VAR 0 6
43773: PUSH
43774: LD_VAR 0 6
43778: PUSH
43779: LD_VAR 0 3
43783: ARRAY
43784: DIFF
43785: ST_TO_ADDR
43786: GO 43761
43788: POP
43789: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
43790: LD_ADDR_VAR 0 4
43794: PUSH
43795: LD_VAR 0 4
43799: PUSH
43800: LD_VAR 0 5
43804: PUSH
43805: LD_VAR 0 6
43809: UNION
43810: PUSH
43811: LD_VAR 0 7
43815: UNION
43816: PUSH
43817: LD_VAR 0 8
43821: UNION
43822: DIFF
43823: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
43824: LD_ADDR_VAR 0 13
43828: PUSH
43829: LD_EXP 101
43833: PUSH
43834: LD_VAR 0 1
43838: ARRAY
43839: PPUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 30
43845: PUSH
43846: LD_INT 32
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 30
43855: PUSH
43856: LD_INT 31
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: PPUSH
43868: CALL_OW 72
43872: PUSH
43873: LD_EXP 101
43877: PUSH
43878: LD_VAR 0 1
43882: ARRAY
43883: PPUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 30
43889: PUSH
43890: LD_INT 4
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 30
43899: PUSH
43900: LD_INT 5
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: PPUSH
43912: CALL_OW 72
43916: PUSH
43917: LD_INT 6
43919: MUL
43920: PLUS
43921: ST_TO_ADDR
// if bcount < tmp then
43922: LD_VAR 0 13
43926: PUSH
43927: LD_VAR 0 4
43931: LESS
43932: IFFALSE 43978
// for i = tmp downto bcount do
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: DOUBLE
43940: LD_VAR 0 4
43944: INC
43945: ST_TO_ADDR
43946: LD_VAR 0 13
43950: PUSH
43951: FOR_DOWNTO
43952: IFFALSE 43976
// tmp := Delete ( tmp , tmp ) ;
43954: LD_ADDR_VAR 0 4
43958: PUSH
43959: LD_VAR 0 4
43963: PPUSH
43964: LD_VAR 0 4
43968: PPUSH
43969: CALL_OW 3
43973: ST_TO_ADDR
43974: GO 43951
43976: POP
43977: POP
// result := [ tmp , 0 , 0 , p ] ;
43978: LD_ADDR_VAR 0 2
43982: PUSH
43983: LD_VAR 0 4
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_VAR 0 11
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// exit ;
44005: GO 46695
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44007: LD_EXP 101
44011: PUSH
44012: LD_VAR 0 1
44016: ARRAY
44017: PPUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 30
44023: PUSH
44024: LD_INT 6
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 30
44033: PUSH
44034: LD_INT 7
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 30
44043: PUSH
44044: LD_INT 8
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: PPUSH
44057: CALL_OW 72
44061: NOT
44062: PUSH
44063: LD_EXP 101
44067: PUSH
44068: LD_VAR 0 1
44072: ARRAY
44073: PPUSH
44074: LD_INT 30
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PPUSH
44084: CALL_OW 72
44088: NOT
44089: AND
44090: IFFALSE 44162
// begin if eng = tmp then
44092: LD_VAR 0 6
44096: PUSH
44097: LD_VAR 0 4
44101: EQUAL
44102: IFFALSE 44106
// exit ;
44104: GO 46695
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
44106: LD_ADDR_EXP 143
44110: PUSH
44111: LD_EXP 143
44115: PPUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: LD_INT 1
44123: PPUSH
44124: CALL_OW 1
44128: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
44129: LD_ADDR_VAR 0 2
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_VAR 0 4
44141: PUSH
44142: LD_VAR 0 6
44146: DIFF
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// exit ;
44160: GO 46695
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44162: LD_EXP 128
44166: PUSH
44167: LD_EXP 127
44171: PUSH
44172: LD_VAR 0 1
44176: ARRAY
44177: ARRAY
44178: PUSH
44179: LD_EXP 101
44183: PUSH
44184: LD_VAR 0 1
44188: ARRAY
44189: PPUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 30
44195: PUSH
44196: LD_INT 6
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 30
44205: PUSH
44206: LD_INT 7
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 30
44215: PUSH
44216: LD_INT 8
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: PPUSH
44229: CALL_OW 72
44233: AND
44234: PUSH
44235: LD_EXP 101
44239: PUSH
44240: LD_VAR 0 1
44244: ARRAY
44245: PPUSH
44246: LD_INT 30
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PPUSH
44256: CALL_OW 72
44260: NOT
44261: AND
44262: IFFALSE 44476
// begin if sci >= 6 then
44264: LD_VAR 0 8
44268: PUSH
44269: LD_INT 6
44271: GREATEREQUAL
44272: IFFALSE 44276
// exit ;
44274: GO 46695
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
44276: LD_ADDR_EXP 143
44280: PUSH
44281: LD_EXP 143
44285: PPUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: LD_INT 2
44293: PPUSH
44294: CALL_OW 1
44298: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
44299: LD_ADDR_VAR 0 9
44303: PUSH
44304: LD_VAR 0 4
44308: PUSH
44309: LD_VAR 0 8
44313: DIFF
44314: PPUSH
44315: LD_INT 4
44317: PPUSH
44318: CALL 104896 0 2
44322: ST_TO_ADDR
// p := [ ] ;
44323: LD_ADDR_VAR 0 11
44327: PUSH
44328: EMPTY
44329: ST_TO_ADDR
// if sci < 6 and sort > 6 then
44330: LD_VAR 0 8
44334: PUSH
44335: LD_INT 6
44337: LESS
44338: PUSH
44339: LD_VAR 0 9
44343: PUSH
44344: LD_INT 6
44346: GREATER
44347: AND
44348: IFFALSE 44429
// begin for i = 1 to 6 - sci do
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: DOUBLE
44356: LD_INT 1
44358: DEC
44359: ST_TO_ADDR
44360: LD_INT 6
44362: PUSH
44363: LD_VAR 0 8
44367: MINUS
44368: PUSH
44369: FOR_TO
44370: IFFALSE 44425
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
44372: LD_ADDR_VAR 0 11
44376: PUSH
44377: LD_VAR 0 11
44381: PPUSH
44382: LD_VAR 0 11
44386: PUSH
44387: LD_INT 1
44389: PLUS
44390: PPUSH
44391: LD_VAR 0 9
44395: PUSH
44396: LD_INT 1
44398: ARRAY
44399: PPUSH
44400: CALL_OW 2
44404: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
44405: LD_ADDR_VAR 0 9
44409: PUSH
44410: LD_VAR 0 9
44414: PPUSH
44415: LD_INT 1
44417: PPUSH
44418: CALL_OW 3
44422: ST_TO_ADDR
// end ;
44423: GO 44369
44425: POP
44426: POP
// end else
44427: GO 44449
// if sort then
44429: LD_VAR 0 9
44433: IFFALSE 44449
// p := sort [ 1 ] ;
44435: LD_ADDR_VAR 0 11
44439: PUSH
44440: LD_VAR 0 9
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
44449: LD_ADDR_VAR 0 2
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_VAR 0 11
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
// exit ;
44474: GO 46695
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44476: LD_EXP 128
44480: PUSH
44481: LD_EXP 127
44485: PUSH
44486: LD_VAR 0 1
44490: ARRAY
44491: ARRAY
44492: PUSH
44493: LD_EXP 101
44497: PUSH
44498: LD_VAR 0 1
44502: ARRAY
44503: PPUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 30
44509: PUSH
44510: LD_INT 6
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 30
44519: PUSH
44520: LD_INT 7
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 30
44529: PUSH
44530: LD_INT 8
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: PPUSH
44543: CALL_OW 72
44547: AND
44548: PUSH
44549: LD_EXP 101
44553: PUSH
44554: LD_VAR 0 1
44558: ARRAY
44559: PPUSH
44560: LD_INT 30
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PPUSH
44570: CALL_OW 72
44574: AND
44575: IFFALSE 45309
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
44577: LD_ADDR_EXP 143
44581: PUSH
44582: LD_EXP 143
44586: PPUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: LD_INT 3
44594: PPUSH
44595: CALL_OW 1
44599: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// if not eng then
44623: LD_VAR 0 6
44627: NOT
44628: IFFALSE 44691
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
44630: LD_ADDR_VAR 0 11
44634: PUSH
44635: LD_VAR 0 4
44639: PPUSH
44640: LD_INT 2
44642: PPUSH
44643: CALL 104896 0 2
44647: PUSH
44648: LD_INT 1
44650: ARRAY
44651: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
44652: LD_ADDR_VAR 0 2
44656: PUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: LD_INT 2
44664: PPUSH
44665: LD_VAR 0 11
44669: PPUSH
44670: CALL_OW 1
44674: ST_TO_ADDR
// tmp := tmp diff p ;
44675: LD_ADDR_VAR 0 4
44679: PUSH
44680: LD_VAR 0 4
44684: PUSH
44685: LD_VAR 0 11
44689: DIFF
44690: ST_TO_ADDR
// end ; if tmp and sci < 6 then
44691: LD_VAR 0 4
44695: PUSH
44696: LD_VAR 0 8
44700: PUSH
44701: LD_INT 6
44703: LESS
44704: AND
44705: IFFALSE 44893
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
44707: LD_ADDR_VAR 0 9
44711: PUSH
44712: LD_VAR 0 4
44716: PUSH
44717: LD_VAR 0 8
44721: PUSH
44722: LD_VAR 0 7
44726: UNION
44727: DIFF
44728: PPUSH
44729: LD_INT 4
44731: PPUSH
44732: CALL 104896 0 2
44736: ST_TO_ADDR
// p := [ ] ;
44737: LD_ADDR_VAR 0 11
44741: PUSH
44742: EMPTY
44743: ST_TO_ADDR
// if sort then
44744: LD_VAR 0 9
44748: IFFALSE 44864
// for i = 1 to 6 - sci do
44750: LD_ADDR_VAR 0 3
44754: PUSH
44755: DOUBLE
44756: LD_INT 1
44758: DEC
44759: ST_TO_ADDR
44760: LD_INT 6
44762: PUSH
44763: LD_VAR 0 8
44767: MINUS
44768: PUSH
44769: FOR_TO
44770: IFFALSE 44862
// begin if i = sort then
44772: LD_VAR 0 3
44776: PUSH
44777: LD_VAR 0 9
44781: EQUAL
44782: IFFALSE 44786
// break ;
44784: GO 44862
// if GetClass ( i ) = 4 then
44786: LD_VAR 0 3
44790: PPUSH
44791: CALL_OW 257
44795: PUSH
44796: LD_INT 4
44798: EQUAL
44799: IFFALSE 44803
// continue ;
44801: GO 44769
// p := Insert ( p , p + 1 , sort [ i ] ) ;
44803: LD_ADDR_VAR 0 11
44807: PUSH
44808: LD_VAR 0 11
44812: PPUSH
44813: LD_VAR 0 11
44817: PUSH
44818: LD_INT 1
44820: PLUS
44821: PPUSH
44822: LD_VAR 0 9
44826: PUSH
44827: LD_VAR 0 3
44831: ARRAY
44832: PPUSH
44833: CALL_OW 2
44837: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
44838: LD_ADDR_VAR 0 4
44842: PUSH
44843: LD_VAR 0 4
44847: PUSH
44848: LD_VAR 0 9
44852: PUSH
44853: LD_VAR 0 3
44857: ARRAY
44858: DIFF
44859: ST_TO_ADDR
// end ;
44860: GO 44769
44862: POP
44863: POP
// if p then
44864: LD_VAR 0 11
44868: IFFALSE 44893
// result := Replace ( result , 4 , p ) ;
44870: LD_ADDR_VAR 0 2
44874: PUSH
44875: LD_VAR 0 2
44879: PPUSH
44880: LD_INT 4
44882: PPUSH
44883: LD_VAR 0 11
44887: PPUSH
44888: CALL_OW 1
44892: ST_TO_ADDR
// end ; if tmp and mech < 6 then
44893: LD_VAR 0 4
44897: PUSH
44898: LD_VAR 0 7
44902: PUSH
44903: LD_INT 6
44905: LESS
44906: AND
44907: IFFALSE 45095
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
44909: LD_ADDR_VAR 0 9
44913: PUSH
44914: LD_VAR 0 4
44918: PUSH
44919: LD_VAR 0 8
44923: PUSH
44924: LD_VAR 0 7
44928: UNION
44929: DIFF
44930: PPUSH
44931: LD_INT 3
44933: PPUSH
44934: CALL 104896 0 2
44938: ST_TO_ADDR
// p := [ ] ;
44939: LD_ADDR_VAR 0 11
44943: PUSH
44944: EMPTY
44945: ST_TO_ADDR
// if sort then
44946: LD_VAR 0 9
44950: IFFALSE 45066
// for i = 1 to 6 - mech do
44952: LD_ADDR_VAR 0 3
44956: PUSH
44957: DOUBLE
44958: LD_INT 1
44960: DEC
44961: ST_TO_ADDR
44962: LD_INT 6
44964: PUSH
44965: LD_VAR 0 7
44969: MINUS
44970: PUSH
44971: FOR_TO
44972: IFFALSE 45064
// begin if i = sort then
44974: LD_VAR 0 3
44978: PUSH
44979: LD_VAR 0 9
44983: EQUAL
44984: IFFALSE 44988
// break ;
44986: GO 45064
// if GetClass ( i ) = 3 then
44988: LD_VAR 0 3
44992: PPUSH
44993: CALL_OW 257
44997: PUSH
44998: LD_INT 3
45000: EQUAL
45001: IFFALSE 45005
// continue ;
45003: GO 44971
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45005: LD_ADDR_VAR 0 11
45009: PUSH
45010: LD_VAR 0 11
45014: PPUSH
45015: LD_VAR 0 11
45019: PUSH
45020: LD_INT 1
45022: PLUS
45023: PPUSH
45024: LD_VAR 0 9
45028: PUSH
45029: LD_VAR 0 3
45033: ARRAY
45034: PPUSH
45035: CALL_OW 2
45039: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45040: LD_ADDR_VAR 0 4
45044: PUSH
45045: LD_VAR 0 4
45049: PUSH
45050: LD_VAR 0 9
45054: PUSH
45055: LD_VAR 0 3
45059: ARRAY
45060: DIFF
45061: ST_TO_ADDR
// end ;
45062: GO 44971
45064: POP
45065: POP
// if p then
45066: LD_VAR 0 11
45070: IFFALSE 45095
// result := Replace ( result , 3 , p ) ;
45072: LD_ADDR_VAR 0 2
45076: PUSH
45077: LD_VAR 0 2
45081: PPUSH
45082: LD_INT 3
45084: PPUSH
45085: LD_VAR 0 11
45089: PPUSH
45090: CALL_OW 1
45094: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
45095: LD_VAR 0 4
45099: PUSH
45100: LD_INT 6
45102: GREATER
45103: PUSH
45104: LD_VAR 0 6
45108: PUSH
45109: LD_INT 6
45111: LESS
45112: AND
45113: IFFALSE 45307
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
45115: LD_ADDR_VAR 0 9
45119: PUSH
45120: LD_VAR 0 4
45124: PUSH
45125: LD_VAR 0 8
45129: PUSH
45130: LD_VAR 0 7
45134: UNION
45135: PUSH
45136: LD_VAR 0 6
45140: UNION
45141: DIFF
45142: PPUSH
45143: LD_INT 2
45145: PPUSH
45146: CALL 104896 0 2
45150: ST_TO_ADDR
// p := [ ] ;
45151: LD_ADDR_VAR 0 11
45155: PUSH
45156: EMPTY
45157: ST_TO_ADDR
// if sort then
45158: LD_VAR 0 9
45162: IFFALSE 45278
// for i = 1 to 6 - eng do
45164: LD_ADDR_VAR 0 3
45168: PUSH
45169: DOUBLE
45170: LD_INT 1
45172: DEC
45173: ST_TO_ADDR
45174: LD_INT 6
45176: PUSH
45177: LD_VAR 0 6
45181: MINUS
45182: PUSH
45183: FOR_TO
45184: IFFALSE 45276
// begin if i = sort then
45186: LD_VAR 0 3
45190: PUSH
45191: LD_VAR 0 9
45195: EQUAL
45196: IFFALSE 45200
// break ;
45198: GO 45276
// if GetClass ( i ) = 2 then
45200: LD_VAR 0 3
45204: PPUSH
45205: CALL_OW 257
45209: PUSH
45210: LD_INT 2
45212: EQUAL
45213: IFFALSE 45217
// continue ;
45215: GO 45183
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45217: LD_ADDR_VAR 0 11
45221: PUSH
45222: LD_VAR 0 11
45226: PPUSH
45227: LD_VAR 0 11
45231: PUSH
45232: LD_INT 1
45234: PLUS
45235: PPUSH
45236: LD_VAR 0 9
45240: PUSH
45241: LD_VAR 0 3
45245: ARRAY
45246: PPUSH
45247: CALL_OW 2
45251: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45252: LD_ADDR_VAR 0 4
45256: PUSH
45257: LD_VAR 0 4
45261: PUSH
45262: LD_VAR 0 9
45266: PUSH
45267: LD_VAR 0 3
45271: ARRAY
45272: DIFF
45273: ST_TO_ADDR
// end ;
45274: GO 45183
45276: POP
45277: POP
// if p then
45278: LD_VAR 0 11
45282: IFFALSE 45307
// result := Replace ( result , 2 , p ) ;
45284: LD_ADDR_VAR 0 2
45288: PUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_INT 2
45296: PPUSH
45297: LD_VAR 0 11
45301: PPUSH
45302: CALL_OW 1
45306: ST_TO_ADDR
// end ; exit ;
45307: GO 46695
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
45309: LD_EXP 128
45313: PUSH
45314: LD_EXP 127
45318: PUSH
45319: LD_VAR 0 1
45323: ARRAY
45324: ARRAY
45325: NOT
45326: PUSH
45327: LD_EXP 101
45331: PUSH
45332: LD_VAR 0 1
45336: ARRAY
45337: PPUSH
45338: LD_INT 30
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PPUSH
45348: CALL_OW 72
45352: AND
45353: PUSH
45354: LD_EXP 106
45358: PUSH
45359: LD_VAR 0 1
45363: ARRAY
45364: AND
45365: IFFALSE 45973
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
45367: LD_ADDR_EXP 143
45371: PUSH
45372: LD_EXP 143
45376: PPUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: LD_INT 5
45384: PPUSH
45385: CALL_OW 1
45389: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
45390: LD_ADDR_VAR 0 2
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if sci > 1 then
45413: LD_VAR 0 8
45417: PUSH
45418: LD_INT 1
45420: GREATER
45421: IFFALSE 45449
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
45423: LD_ADDR_VAR 0 4
45427: PUSH
45428: LD_VAR 0 4
45432: PUSH
45433: LD_VAR 0 8
45437: PUSH
45438: LD_VAR 0 8
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: DIFF
45447: DIFF
45448: ST_TO_ADDR
// if tmp and not sci then
45449: LD_VAR 0 4
45453: PUSH
45454: LD_VAR 0 8
45458: NOT
45459: AND
45460: IFFALSE 45529
// begin sort := SortBySkill ( tmp , 4 ) ;
45462: LD_ADDR_VAR 0 9
45466: PUSH
45467: LD_VAR 0 4
45471: PPUSH
45472: LD_INT 4
45474: PPUSH
45475: CALL 104896 0 2
45479: ST_TO_ADDR
// if sort then
45480: LD_VAR 0 9
45484: IFFALSE 45500
// p := sort [ 1 ] ;
45486: LD_ADDR_VAR 0 11
45490: PUSH
45491: LD_VAR 0 9
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: ST_TO_ADDR
// if p then
45500: LD_VAR 0 11
45504: IFFALSE 45529
// result := Replace ( result , 4 , p ) ;
45506: LD_ADDR_VAR 0 2
45510: PUSH
45511: LD_VAR 0 2
45515: PPUSH
45516: LD_INT 4
45518: PPUSH
45519: LD_VAR 0 11
45523: PPUSH
45524: CALL_OW 1
45528: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
45529: LD_ADDR_VAR 0 4
45533: PUSH
45534: LD_VAR 0 4
45538: PUSH
45539: LD_VAR 0 7
45543: DIFF
45544: ST_TO_ADDR
// if tmp and mech < 6 then
45545: LD_VAR 0 4
45549: PUSH
45550: LD_VAR 0 7
45554: PUSH
45555: LD_INT 6
45557: LESS
45558: AND
45559: IFFALSE 45747
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_VAR 0 4
45570: PUSH
45571: LD_VAR 0 8
45575: PUSH
45576: LD_VAR 0 7
45580: UNION
45581: DIFF
45582: PPUSH
45583: LD_INT 3
45585: PPUSH
45586: CALL 104896 0 2
45590: ST_TO_ADDR
// p := [ ] ;
45591: LD_ADDR_VAR 0 11
45595: PUSH
45596: EMPTY
45597: ST_TO_ADDR
// if sort then
45598: LD_VAR 0 9
45602: IFFALSE 45718
// for i = 1 to 6 - mech do
45604: LD_ADDR_VAR 0 3
45608: PUSH
45609: DOUBLE
45610: LD_INT 1
45612: DEC
45613: ST_TO_ADDR
45614: LD_INT 6
45616: PUSH
45617: LD_VAR 0 7
45621: MINUS
45622: PUSH
45623: FOR_TO
45624: IFFALSE 45716
// begin if i = sort then
45626: LD_VAR 0 3
45630: PUSH
45631: LD_VAR 0 9
45635: EQUAL
45636: IFFALSE 45640
// break ;
45638: GO 45716
// if GetClass ( i ) = 3 then
45640: LD_VAR 0 3
45644: PPUSH
45645: CALL_OW 257
45649: PUSH
45650: LD_INT 3
45652: EQUAL
45653: IFFALSE 45657
// continue ;
45655: GO 45623
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45657: LD_ADDR_VAR 0 11
45661: PUSH
45662: LD_VAR 0 11
45666: PPUSH
45667: LD_VAR 0 11
45671: PUSH
45672: LD_INT 1
45674: PLUS
45675: PPUSH
45676: LD_VAR 0 9
45680: PUSH
45681: LD_VAR 0 3
45685: ARRAY
45686: PPUSH
45687: CALL_OW 2
45691: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45692: LD_ADDR_VAR 0 4
45696: PUSH
45697: LD_VAR 0 4
45701: PUSH
45702: LD_VAR 0 9
45706: PUSH
45707: LD_VAR 0 3
45711: ARRAY
45712: DIFF
45713: ST_TO_ADDR
// end ;
45714: GO 45623
45716: POP
45717: POP
// if p then
45718: LD_VAR 0 11
45722: IFFALSE 45747
// result := Replace ( result , 3 , p ) ;
45724: LD_ADDR_VAR 0 2
45728: PUSH
45729: LD_VAR 0 2
45733: PPUSH
45734: LD_INT 3
45736: PPUSH
45737: LD_VAR 0 11
45741: PPUSH
45742: CALL_OW 1
45746: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
45747: LD_ADDR_VAR 0 4
45751: PUSH
45752: LD_VAR 0 4
45756: PUSH
45757: LD_VAR 0 6
45761: DIFF
45762: ST_TO_ADDR
// if tmp and eng < 6 then
45763: LD_VAR 0 4
45767: PUSH
45768: LD_VAR 0 6
45772: PUSH
45773: LD_INT 6
45775: LESS
45776: AND
45777: IFFALSE 45971
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
45779: LD_ADDR_VAR 0 9
45783: PUSH
45784: LD_VAR 0 4
45788: PUSH
45789: LD_VAR 0 8
45793: PUSH
45794: LD_VAR 0 7
45798: UNION
45799: PUSH
45800: LD_VAR 0 6
45804: UNION
45805: DIFF
45806: PPUSH
45807: LD_INT 2
45809: PPUSH
45810: CALL 104896 0 2
45814: ST_TO_ADDR
// p := [ ] ;
45815: LD_ADDR_VAR 0 11
45819: PUSH
45820: EMPTY
45821: ST_TO_ADDR
// if sort then
45822: LD_VAR 0 9
45826: IFFALSE 45942
// for i = 1 to 6 - eng do
45828: LD_ADDR_VAR 0 3
45832: PUSH
45833: DOUBLE
45834: LD_INT 1
45836: DEC
45837: ST_TO_ADDR
45838: LD_INT 6
45840: PUSH
45841: LD_VAR 0 6
45845: MINUS
45846: PUSH
45847: FOR_TO
45848: IFFALSE 45940
// begin if i = sort then
45850: LD_VAR 0 3
45854: PUSH
45855: LD_VAR 0 9
45859: EQUAL
45860: IFFALSE 45864
// break ;
45862: GO 45940
// if GetClass ( i ) = 2 then
45864: LD_VAR 0 3
45868: PPUSH
45869: CALL_OW 257
45873: PUSH
45874: LD_INT 2
45876: EQUAL
45877: IFFALSE 45881
// continue ;
45879: GO 45847
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45881: LD_ADDR_VAR 0 11
45885: PUSH
45886: LD_VAR 0 11
45890: PPUSH
45891: LD_VAR 0 11
45895: PUSH
45896: LD_INT 1
45898: PLUS
45899: PPUSH
45900: LD_VAR 0 9
45904: PUSH
45905: LD_VAR 0 3
45909: ARRAY
45910: PPUSH
45911: CALL_OW 2
45915: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45916: LD_ADDR_VAR 0 4
45920: PUSH
45921: LD_VAR 0 4
45925: PUSH
45926: LD_VAR 0 9
45930: PUSH
45931: LD_VAR 0 3
45935: ARRAY
45936: DIFF
45937: ST_TO_ADDR
// end ;
45938: GO 45847
45940: POP
45941: POP
// if p then
45942: LD_VAR 0 11
45946: IFFALSE 45971
// result := Replace ( result , 2 , p ) ;
45948: LD_ADDR_VAR 0 2
45952: PUSH
45953: LD_VAR 0 2
45957: PPUSH
45958: LD_INT 2
45960: PPUSH
45961: LD_VAR 0 11
45965: PPUSH
45966: CALL_OW 1
45970: ST_TO_ADDR
// end ; exit ;
45971: GO 46695
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
45973: LD_EXP 128
45977: PUSH
45978: LD_EXP 127
45982: PUSH
45983: LD_VAR 0 1
45987: ARRAY
45988: ARRAY
45989: NOT
45990: PUSH
45991: LD_EXP 101
45995: PUSH
45996: LD_VAR 0 1
46000: ARRAY
46001: PPUSH
46002: LD_INT 30
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PPUSH
46012: CALL_OW 72
46016: AND
46017: PUSH
46018: LD_EXP 106
46022: PUSH
46023: LD_VAR 0 1
46027: ARRAY
46028: NOT
46029: AND
46030: IFFALSE 46695
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
46032: LD_ADDR_EXP 143
46036: PUSH
46037: LD_EXP 143
46041: PPUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: LD_INT 6
46049: PPUSH
46050: CALL_OW 1
46054: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46055: LD_ADDR_VAR 0 2
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// if sci >= 1 then
46078: LD_VAR 0 8
46082: PUSH
46083: LD_INT 1
46085: GREATEREQUAL
46086: IFFALSE 46108
// tmp := tmp diff sci [ 1 ] ;
46088: LD_ADDR_VAR 0 4
46092: PUSH
46093: LD_VAR 0 4
46097: PUSH
46098: LD_VAR 0 8
46102: PUSH
46103: LD_INT 1
46105: ARRAY
46106: DIFF
46107: ST_TO_ADDR
// if tmp and not sci then
46108: LD_VAR 0 4
46112: PUSH
46113: LD_VAR 0 8
46117: NOT
46118: AND
46119: IFFALSE 46188
// begin sort := SortBySkill ( tmp , 4 ) ;
46121: LD_ADDR_VAR 0 9
46125: PUSH
46126: LD_VAR 0 4
46130: PPUSH
46131: LD_INT 4
46133: PPUSH
46134: CALL 104896 0 2
46138: ST_TO_ADDR
// if sort then
46139: LD_VAR 0 9
46143: IFFALSE 46159
// p := sort [ 1 ] ;
46145: LD_ADDR_VAR 0 11
46149: PUSH
46150: LD_VAR 0 9
46154: PUSH
46155: LD_INT 1
46157: ARRAY
46158: ST_TO_ADDR
// if p then
46159: LD_VAR 0 11
46163: IFFALSE 46188
// result := Replace ( result , 4 , p ) ;
46165: LD_ADDR_VAR 0 2
46169: PUSH
46170: LD_VAR 0 2
46174: PPUSH
46175: LD_INT 4
46177: PPUSH
46178: LD_VAR 0 11
46182: PPUSH
46183: CALL_OW 1
46187: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
46188: LD_ADDR_VAR 0 4
46192: PUSH
46193: LD_VAR 0 4
46197: PUSH
46198: LD_VAR 0 7
46202: DIFF
46203: ST_TO_ADDR
// if tmp and mech < 6 then
46204: LD_VAR 0 4
46208: PUSH
46209: LD_VAR 0 7
46213: PUSH
46214: LD_INT 6
46216: LESS
46217: AND
46218: IFFALSE 46400
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
46220: LD_ADDR_VAR 0 9
46224: PUSH
46225: LD_VAR 0 4
46229: PUSH
46230: LD_VAR 0 7
46234: DIFF
46235: PPUSH
46236: LD_INT 3
46238: PPUSH
46239: CALL 104896 0 2
46243: ST_TO_ADDR
// p := [ ] ;
46244: LD_ADDR_VAR 0 11
46248: PUSH
46249: EMPTY
46250: ST_TO_ADDR
// if sort then
46251: LD_VAR 0 9
46255: IFFALSE 46371
// for i = 1 to 6 - mech do
46257: LD_ADDR_VAR 0 3
46261: PUSH
46262: DOUBLE
46263: LD_INT 1
46265: DEC
46266: ST_TO_ADDR
46267: LD_INT 6
46269: PUSH
46270: LD_VAR 0 7
46274: MINUS
46275: PUSH
46276: FOR_TO
46277: IFFALSE 46369
// begin if i = sort then
46279: LD_VAR 0 3
46283: PUSH
46284: LD_VAR 0 9
46288: EQUAL
46289: IFFALSE 46293
// break ;
46291: GO 46369
// if GetClass ( i ) = 3 then
46293: LD_VAR 0 3
46297: PPUSH
46298: CALL_OW 257
46302: PUSH
46303: LD_INT 3
46305: EQUAL
46306: IFFALSE 46310
// continue ;
46308: GO 46276
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46310: LD_ADDR_VAR 0 11
46314: PUSH
46315: LD_VAR 0 11
46319: PPUSH
46320: LD_VAR 0 11
46324: PUSH
46325: LD_INT 1
46327: PLUS
46328: PPUSH
46329: LD_VAR 0 9
46333: PUSH
46334: LD_VAR 0 3
46338: ARRAY
46339: PPUSH
46340: CALL_OW 2
46344: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46345: LD_ADDR_VAR 0 4
46349: PUSH
46350: LD_VAR 0 4
46354: PUSH
46355: LD_VAR 0 9
46359: PUSH
46360: LD_VAR 0 3
46364: ARRAY
46365: DIFF
46366: ST_TO_ADDR
// end ;
46367: GO 46276
46369: POP
46370: POP
// if p then
46371: LD_VAR 0 11
46375: IFFALSE 46400
// result := Replace ( result , 3 , p ) ;
46377: LD_ADDR_VAR 0 2
46381: PUSH
46382: LD_VAR 0 2
46386: PPUSH
46387: LD_INT 3
46389: PPUSH
46390: LD_VAR 0 11
46394: PPUSH
46395: CALL_OW 1
46399: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
46400: LD_ADDR_VAR 0 4
46404: PUSH
46405: LD_VAR 0 4
46409: PUSH
46410: LD_VAR 0 6
46414: DIFF
46415: ST_TO_ADDR
// if tmp and eng < 4 then
46416: LD_VAR 0 4
46420: PUSH
46421: LD_VAR 0 6
46425: PUSH
46426: LD_INT 4
46428: LESS
46429: AND
46430: IFFALSE 46620
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
46432: LD_ADDR_VAR 0 9
46436: PUSH
46437: LD_VAR 0 4
46441: PUSH
46442: LD_VAR 0 7
46446: PUSH
46447: LD_VAR 0 6
46451: UNION
46452: DIFF
46453: PPUSH
46454: LD_INT 2
46456: PPUSH
46457: CALL 104896 0 2
46461: ST_TO_ADDR
// p := [ ] ;
46462: LD_ADDR_VAR 0 11
46466: PUSH
46467: EMPTY
46468: ST_TO_ADDR
// if sort then
46469: LD_VAR 0 9
46473: IFFALSE 46589
// for i = 1 to 4 - eng do
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: DOUBLE
46481: LD_INT 1
46483: DEC
46484: ST_TO_ADDR
46485: LD_INT 4
46487: PUSH
46488: LD_VAR 0 6
46492: MINUS
46493: PUSH
46494: FOR_TO
46495: IFFALSE 46587
// begin if i = sort then
46497: LD_VAR 0 3
46501: PUSH
46502: LD_VAR 0 9
46506: EQUAL
46507: IFFALSE 46511
// break ;
46509: GO 46587
// if GetClass ( i ) = 2 then
46511: LD_VAR 0 3
46515: PPUSH
46516: CALL_OW 257
46520: PUSH
46521: LD_INT 2
46523: EQUAL
46524: IFFALSE 46528
// continue ;
46526: GO 46494
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46528: LD_ADDR_VAR 0 11
46532: PUSH
46533: LD_VAR 0 11
46537: PPUSH
46538: LD_VAR 0 11
46542: PUSH
46543: LD_INT 1
46545: PLUS
46546: PPUSH
46547: LD_VAR 0 9
46551: PUSH
46552: LD_VAR 0 3
46556: ARRAY
46557: PPUSH
46558: CALL_OW 2
46562: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46563: LD_ADDR_VAR 0 4
46567: PUSH
46568: LD_VAR 0 4
46572: PUSH
46573: LD_VAR 0 9
46577: PUSH
46578: LD_VAR 0 3
46582: ARRAY
46583: DIFF
46584: ST_TO_ADDR
// end ;
46585: GO 46494
46587: POP
46588: POP
// if p then
46589: LD_VAR 0 11
46593: IFFALSE 46618
// result := Replace ( result , 2 , p ) ;
46595: LD_ADDR_VAR 0 2
46599: PUSH
46600: LD_VAR 0 2
46604: PPUSH
46605: LD_INT 2
46607: PPUSH
46608: LD_VAR 0 11
46612: PPUSH
46613: CALL_OW 1
46617: ST_TO_ADDR
// end else
46618: GO 46664
// for i = eng downto 5 do
46620: LD_ADDR_VAR 0 3
46624: PUSH
46625: DOUBLE
46626: LD_VAR 0 6
46630: INC
46631: ST_TO_ADDR
46632: LD_INT 5
46634: PUSH
46635: FOR_DOWNTO
46636: IFFALSE 46662
// tmp := tmp union eng [ i ] ;
46638: LD_ADDR_VAR 0 4
46642: PUSH
46643: LD_VAR 0 4
46647: PUSH
46648: LD_VAR 0 6
46652: PUSH
46653: LD_VAR 0 3
46657: ARRAY
46658: UNION
46659: ST_TO_ADDR
46660: GO 46635
46662: POP
46663: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
46664: LD_ADDR_VAR 0 2
46668: PUSH
46669: LD_VAR 0 2
46673: PPUSH
46674: LD_INT 1
46676: PPUSH
46677: LD_VAR 0 4
46681: PUSH
46682: LD_VAR 0 5
46686: DIFF
46687: PPUSH
46688: CALL_OW 1
46692: ST_TO_ADDR
// exit ;
46693: GO 46695
// end ; end ;
46695: LD_VAR 0 2
46699: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
46700: LD_INT 0
46702: PPUSH
46703: PPUSH
46704: PPUSH
// if not mc_bases then
46705: LD_EXP 101
46709: NOT
46710: IFFALSE 46714
// exit ;
46712: GO 46856
// for i = 1 to mc_bases do
46714: LD_ADDR_VAR 0 2
46718: PUSH
46719: DOUBLE
46720: LD_INT 1
46722: DEC
46723: ST_TO_ADDR
46724: LD_EXP 101
46728: PUSH
46729: FOR_TO
46730: IFFALSE 46847
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
46732: LD_ADDR_VAR 0 3
46736: PUSH
46737: LD_EXP 101
46741: PUSH
46742: LD_VAR 0 2
46746: ARRAY
46747: PPUSH
46748: LD_INT 21
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 30
46766: PUSH
46767: LD_INT 29
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 30
46776: PUSH
46777: LD_INT 30
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 24
46798: PUSH
46799: LD_INT 1000
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: PPUSH
46815: CALL_OW 72
46819: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
46820: LD_ADDR_EXP 102
46824: PUSH
46825: LD_EXP 102
46829: PPUSH
46830: LD_VAR 0 2
46834: PPUSH
46835: LD_VAR 0 3
46839: PPUSH
46840: CALL_OW 1
46844: ST_TO_ADDR
// end ;
46845: GO 46729
46847: POP
46848: POP
// RaiseSailEvent ( 101 ) ;
46849: LD_INT 101
46851: PPUSH
46852: CALL_OW 427
// end ;
46856: LD_VAR 0 1
46860: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
46861: LD_INT 0
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
// if not mc_bases then
46870: LD_EXP 101
46874: NOT
46875: IFFALSE 46879
// exit ;
46877: GO 47441
// for i = 1 to mc_bases do
46879: LD_ADDR_VAR 0 2
46883: PUSH
46884: DOUBLE
46885: LD_INT 1
46887: DEC
46888: ST_TO_ADDR
46889: LD_EXP 101
46893: PUSH
46894: FOR_TO
46895: IFFALSE 47432
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
46897: LD_ADDR_VAR 0 5
46901: PUSH
46902: LD_EXP 101
46906: PUSH
46907: LD_VAR 0 2
46911: ARRAY
46912: PUSH
46913: LD_EXP 130
46917: PUSH
46918: LD_VAR 0 2
46922: ARRAY
46923: UNION
46924: PPUSH
46925: LD_INT 21
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 54
46943: PUSH
46944: EMPTY
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 24
46956: PUSH
46957: LD_INT 1000
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PPUSH
46977: CALL_OW 72
46981: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
46982: LD_ADDR_VAR 0 6
46986: PUSH
46987: LD_EXP 101
46991: PUSH
46992: LD_VAR 0 2
46996: ARRAY
46997: PPUSH
46998: LD_INT 21
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 54
47016: PUSH
47017: EMPTY
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 24
47029: PUSH
47030: LD_INT 250
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PPUSH
47050: CALL_OW 72
47054: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47055: LD_ADDR_VAR 0 7
47059: PUSH
47060: LD_VAR 0 5
47064: PUSH
47065: LD_VAR 0 6
47069: DIFF
47070: ST_TO_ADDR
// if not need_heal_1 then
47071: LD_VAR 0 6
47075: NOT
47076: IFFALSE 47109
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
47078: LD_ADDR_EXP 104
47082: PUSH
47083: LD_EXP 104
47087: PPUSH
47088: LD_VAR 0 2
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PPUSH
47100: EMPTY
47101: PPUSH
47102: CALL 74020 0 3
47106: ST_TO_ADDR
47107: GO 47179
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
47109: LD_ADDR_EXP 104
47113: PUSH
47114: LD_EXP 104
47118: PPUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PPUSH
47131: LD_EXP 104
47135: PUSH
47136: LD_VAR 0 2
47140: ARRAY
47141: PUSH
47142: LD_INT 1
47144: ARRAY
47145: PPUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 24
47151: PUSH
47152: LD_INT 1000
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PPUSH
47163: CALL_OW 72
47167: PUSH
47168: LD_VAR 0 6
47172: UNION
47173: PPUSH
47174: CALL 74020 0 3
47178: ST_TO_ADDR
// if not need_heal_2 then
47179: LD_VAR 0 7
47183: NOT
47184: IFFALSE 47217
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
47186: LD_ADDR_EXP 104
47190: PUSH
47191: LD_EXP 104
47195: PPUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PPUSH
47208: EMPTY
47209: PPUSH
47210: CALL 74020 0 3
47214: ST_TO_ADDR
47215: GO 47249
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
47217: LD_ADDR_EXP 104
47221: PUSH
47222: LD_EXP 104
47226: PPUSH
47227: LD_VAR 0 2
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PPUSH
47239: LD_VAR 0 7
47243: PPUSH
47244: CALL 74020 0 3
47248: ST_TO_ADDR
// if need_heal_2 then
47249: LD_VAR 0 7
47253: IFFALSE 47414
// for j in need_heal_2 do
47255: LD_ADDR_VAR 0 3
47259: PUSH
47260: LD_VAR 0 7
47264: PUSH
47265: FOR_IN
47266: IFFALSE 47412
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47268: LD_ADDR_VAR 0 5
47272: PUSH
47273: LD_EXP 101
47277: PUSH
47278: LD_VAR 0 2
47282: ARRAY
47283: PPUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 30
47289: PUSH
47290: LD_INT 6
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 30
47299: PUSH
47300: LD_INT 7
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 30
47309: PUSH
47310: LD_INT 8
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 30
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 30
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: PPUSH
47345: CALL_OW 72
47349: ST_TO_ADDR
// if tmp then
47350: LD_VAR 0 5
47354: IFFALSE 47410
// begin k := NearestUnitToUnit ( tmp , j ) ;
47356: LD_ADDR_VAR 0 4
47360: PUSH
47361: LD_VAR 0 5
47365: PPUSH
47366: LD_VAR 0 3
47370: PPUSH
47371: CALL_OW 74
47375: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
47376: LD_VAR 0 3
47380: PPUSH
47381: LD_VAR 0 4
47385: PPUSH
47386: CALL_OW 296
47390: PUSH
47391: LD_INT 5
47393: GREATER
47394: IFFALSE 47410
// ComMoveToNearbyEntrance ( j , k ) ;
47396: LD_VAR 0 3
47400: PPUSH
47401: LD_VAR 0 4
47405: PPUSH
47406: CALL 107256 0 2
// end ; end ;
47410: GO 47265
47412: POP
47413: POP
// if not need_heal_1 and not need_heal_2 then
47414: LD_VAR 0 6
47418: NOT
47419: PUSH
47420: LD_VAR 0 7
47424: NOT
47425: AND
47426: IFFALSE 47430
// continue ;
47428: GO 46894
// end ;
47430: GO 46894
47432: POP
47433: POP
// RaiseSailEvent ( 102 ) ;
47434: LD_INT 102
47436: PPUSH
47437: CALL_OW 427
// end ;
47441: LD_VAR 0 1
47445: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
47446: LD_INT 0
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
// if not mc_bases then
47456: LD_EXP 101
47460: NOT
47461: IFFALSE 47465
// exit ;
47463: GO 48376
// for i = 1 to mc_bases do
47465: LD_ADDR_VAR 0 2
47469: PUSH
47470: DOUBLE
47471: LD_INT 1
47473: DEC
47474: ST_TO_ADDR
47475: LD_EXP 101
47479: PUSH
47480: FOR_TO
47481: IFFALSE 48374
// begin if not mc_building_need_repair [ i ] then
47483: LD_EXP 102
47487: PUSH
47488: LD_VAR 0 2
47492: ARRAY
47493: NOT
47494: IFFALSE 47679
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
47496: LD_ADDR_VAR 0 6
47500: PUSH
47501: LD_EXP 120
47505: PUSH
47506: LD_VAR 0 2
47510: ARRAY
47511: PPUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 24
47517: PUSH
47518: LD_INT 1000
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 34
47534: PUSH
47535: LD_INT 13
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 34
47544: PUSH
47545: LD_INT 52
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 34
47554: PUSH
47555: LD_INT 88
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PPUSH
47572: CALL_OW 72
47576: ST_TO_ADDR
// if cranes then
47577: LD_VAR 0 6
47581: IFFALSE 47643
// for j in cranes do
47583: LD_ADDR_VAR 0 3
47587: PUSH
47588: LD_VAR 0 6
47592: PUSH
47593: FOR_IN
47594: IFFALSE 47641
// if not IsInArea ( j , mc_parking [ i ] ) then
47596: LD_VAR 0 3
47600: PPUSH
47601: LD_EXP 125
47605: PUSH
47606: LD_VAR 0 2
47610: ARRAY
47611: PPUSH
47612: CALL_OW 308
47616: NOT
47617: IFFALSE 47639
// ComMoveToArea ( j , mc_parking [ i ] ) ;
47619: LD_VAR 0 3
47623: PPUSH
47624: LD_EXP 125
47628: PUSH
47629: LD_VAR 0 2
47633: ARRAY
47634: PPUSH
47635: CALL_OW 113
47639: GO 47593
47641: POP
47642: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
47643: LD_ADDR_EXP 103
47647: PUSH
47648: LD_EXP 103
47652: PPUSH
47653: LD_VAR 0 2
47657: PPUSH
47658: EMPTY
47659: PPUSH
47660: CALL_OW 1
47664: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
47665: LD_VAR 0 2
47669: PPUSH
47670: LD_INT 101
47672: PPUSH
47673: CALL 42519 0 2
// continue ;
47677: GO 47480
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
47679: LD_ADDR_EXP 107
47683: PUSH
47684: LD_EXP 107
47688: PPUSH
47689: LD_VAR 0 2
47693: PPUSH
47694: EMPTY
47695: PPUSH
47696: CALL_OW 1
47700: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47701: LD_VAR 0 2
47705: PPUSH
47706: LD_INT 103
47708: PPUSH
47709: CALL 42519 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
47713: LD_ADDR_VAR 0 5
47717: PUSH
47718: LD_EXP 101
47722: PUSH
47723: LD_VAR 0 2
47727: ARRAY
47728: PUSH
47729: LD_EXP 130
47733: PUSH
47734: LD_VAR 0 2
47738: ARRAY
47739: UNION
47740: PPUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 25
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 25
47756: PUSH
47757: LD_INT 16
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: PPUSH
47772: CALL_OW 72
47776: ST_TO_ADDR
// if mc_need_heal [ i ] then
47777: LD_EXP 104
47781: PUSH
47782: LD_VAR 0 2
47786: ARRAY
47787: IFFALSE 47831
// tmp := tmp diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
47789: LD_ADDR_VAR 0 5
47793: PUSH
47794: LD_VAR 0 5
47798: PUSH
47799: LD_EXP 104
47803: PUSH
47804: LD_VAR 0 2
47808: ARRAY
47809: PUSH
47810: LD_INT 1
47812: ARRAY
47813: PUSH
47814: LD_EXP 104
47818: PUSH
47819: LD_VAR 0 2
47823: ARRAY
47824: PUSH
47825: LD_INT 2
47827: ARRAY
47828: UNION
47829: DIFF
47830: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
47831: LD_ADDR_VAR 0 6
47835: PUSH
47836: LD_EXP 120
47840: PUSH
47841: LD_VAR 0 2
47845: ARRAY
47846: PPUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 34
47852: PUSH
47853: LD_INT 13
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 34
47862: PUSH
47863: LD_INT 52
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 34
47872: PUSH
47873: LD_INT 88
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: PPUSH
47886: CALL_OW 72
47890: ST_TO_ADDR
// if cranes then
47891: LD_VAR 0 6
47895: IFFALSE 48063
// begin for j in cranes do
47897: LD_ADDR_VAR 0 3
47901: PUSH
47902: LD_VAR 0 6
47906: PUSH
47907: FOR_IN
47908: IFFALSE 48061
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
47910: LD_VAR 0 3
47914: PPUSH
47915: CALL_OW 256
47919: PUSH
47920: LD_INT 1000
47922: EQUAL
47923: PUSH
47924: LD_VAR 0 3
47928: PPUSH
47929: CALL_OW 314
47933: NOT
47934: AND
47935: IFFALSE 48001
// begin to_repair := NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ;
47937: LD_ADDR_VAR 0 8
47941: PUSH
47942: LD_EXP 102
47946: PUSH
47947: LD_VAR 0 2
47951: ARRAY
47952: PPUSH
47953: LD_VAR 0 3
47957: PPUSH
47958: CALL_OW 74
47962: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
47963: LD_VAR 0 8
47967: PPUSH
47968: LD_INT 16
47970: PPUSH
47971: CALL 76617 0 2
47975: PUSH
47976: LD_INT 4
47978: ARRAY
47979: PUSH
47980: LD_INT 10
47982: LESS
47983: IFFALSE 47999
// ComRepairBuilding ( j , to_repair ) ;
47985: LD_VAR 0 3
47989: PPUSH
47990: LD_VAR 0 8
47994: PPUSH
47995: CALL_OW 130
// end else
47999: GO 48059
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
48001: LD_VAR 0 3
48005: PPUSH
48006: CALL_OW 256
48010: PUSH
48011: LD_INT 500
48013: LESS
48014: PUSH
48015: LD_VAR 0 3
48019: PPUSH
48020: LD_EXP 125
48024: PUSH
48025: LD_VAR 0 2
48029: ARRAY
48030: PPUSH
48031: CALL_OW 308
48035: NOT
48036: AND
48037: IFFALSE 48059
// ComMoveToArea ( j , mc_parking [ i ] ) ;
48039: LD_VAR 0 3
48043: PPUSH
48044: LD_EXP 125
48048: PUSH
48049: LD_VAR 0 2
48053: ARRAY
48054: PPUSH
48055: CALL_OW 113
// end ;
48059: GO 47907
48061: POP
48062: POP
// end ; if tmp > 3 then
48063: LD_VAR 0 5
48067: PUSH
48068: LD_INT 3
48070: GREATER
48071: IFFALSE 48091
// tmp := ShrinkArray ( tmp , 4 ) ;
48073: LD_ADDR_VAR 0 5
48077: PUSH
48078: LD_VAR 0 5
48082: PPUSH
48083: LD_INT 4
48085: PPUSH
48086: CALL 106694 0 2
48090: ST_TO_ADDR
// if not tmp then
48091: LD_VAR 0 5
48095: NOT
48096: IFFALSE 48100
// continue ;
48098: GO 47480
// for j in tmp do
48100: LD_ADDR_VAR 0 3
48104: PUSH
48105: LD_VAR 0 5
48109: PUSH
48110: FOR_IN
48111: IFFALSE 48370
// begin if IsInUnit ( j ) then
48113: LD_VAR 0 3
48117: PPUSH
48118: CALL_OW 310
48122: IFFALSE 48133
// ComExitBuilding ( j ) ;
48124: LD_VAR 0 3
48128: PPUSH
48129: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48133: LD_VAR 0 3
48137: PUSH
48138: LD_EXP 103
48142: PUSH
48143: LD_VAR 0 2
48147: ARRAY
48148: IN
48149: NOT
48150: IFFALSE 48208
// begin SetTag ( j , 101 ) ;
48152: LD_VAR 0 3
48156: PPUSH
48157: LD_INT 101
48159: PPUSH
48160: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48164: LD_ADDR_EXP 103
48168: PUSH
48169: LD_EXP 103
48173: PPUSH
48174: LD_VAR 0 2
48178: PUSH
48179: LD_EXP 103
48183: PUSH
48184: LD_VAR 0 2
48188: ARRAY
48189: PUSH
48190: LD_INT 1
48192: PLUS
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PPUSH
48198: LD_VAR 0 3
48202: PPUSH
48203: CALL 74020 0 3
48207: ST_TO_ADDR
// end ; wait ( 1 ) ;
48208: LD_INT 1
48210: PPUSH
48211: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
48215: LD_ADDR_VAR 0 7
48219: PUSH
48220: LD_EXP 102
48224: PUSH
48225: LD_VAR 0 2
48229: ARRAY
48230: ST_TO_ADDR
// if mc_scan [ i ] then
48231: LD_EXP 124
48235: PUSH
48236: LD_VAR 0 2
48240: ARRAY
48241: IFFALSE 48303
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
48243: LD_ADDR_VAR 0 7
48247: PUSH
48248: LD_EXP 102
48252: PUSH
48253: LD_VAR 0 2
48257: ARRAY
48258: PPUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 30
48264: PUSH
48265: LD_INT 32
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 30
48274: PUSH
48275: LD_INT 33
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 30
48284: PUSH
48285: LD_INT 31
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: PPUSH
48298: CALL_OW 72
48302: ST_TO_ADDR
// if not to_repair_tmp then
48303: LD_VAR 0 7
48307: NOT
48308: IFFALSE 48312
// continue ;
48310: GO 48110
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
48312: LD_ADDR_VAR 0 8
48316: PUSH
48317: LD_VAR 0 7
48321: PPUSH
48322: LD_VAR 0 3
48326: PPUSH
48327: CALL_OW 74
48331: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 14 then
48332: LD_VAR 0 8
48336: PPUSH
48337: LD_INT 16
48339: PPUSH
48340: CALL 76617 0 2
48344: PUSH
48345: LD_INT 4
48347: ARRAY
48348: PUSH
48349: LD_INT 14
48351: LESS
48352: IFFALSE 48368
// ComRepairBuilding ( j , to_repair ) ;
48354: LD_VAR 0 3
48358: PPUSH
48359: LD_VAR 0 8
48363: PPUSH
48364: CALL_OW 130
// end ;
48368: GO 48110
48370: POP
48371: POP
// end ;
48372: GO 47480
48374: POP
48375: POP
// end ;
48376: LD_VAR 0 1
48380: RET
// export function MC_Heal ; var i , j , tmp ; begin
48381: LD_INT 0
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
// if not mc_bases then
48387: LD_EXP 101
48391: NOT
48392: IFFALSE 48396
// exit ;
48394: GO 48798
// for i = 1 to mc_bases do
48396: LD_ADDR_VAR 0 2
48400: PUSH
48401: DOUBLE
48402: LD_INT 1
48404: DEC
48405: ST_TO_ADDR
48406: LD_EXP 101
48410: PUSH
48411: FOR_TO
48412: IFFALSE 48796
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48414: LD_EXP 104
48418: PUSH
48419: LD_VAR 0 2
48423: ARRAY
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: NOT
48429: PUSH
48430: LD_EXP 104
48434: PUSH
48435: LD_VAR 0 2
48439: ARRAY
48440: PUSH
48441: LD_INT 2
48443: ARRAY
48444: NOT
48445: AND
48446: IFFALSE 48484
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48448: LD_ADDR_EXP 105
48452: PUSH
48453: LD_EXP 105
48457: PPUSH
48458: LD_VAR 0 2
48462: PPUSH
48463: EMPTY
48464: PPUSH
48465: CALL_OW 1
48469: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
48470: LD_VAR 0 2
48474: PPUSH
48475: LD_INT 102
48477: PPUSH
48478: CALL 42519 0 2
// continue ;
48482: GO 48411
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
48484: LD_ADDR_VAR 0 4
48488: PUSH
48489: LD_EXP 101
48493: PUSH
48494: LD_VAR 0 2
48498: ARRAY
48499: PPUSH
48500: LD_INT 25
48502: PUSH
48503: LD_INT 4
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PPUSH
48510: CALL_OW 72
48514: ST_TO_ADDR
// if not tmp then
48515: LD_VAR 0 4
48519: NOT
48520: IFFALSE 48524
// continue ;
48522: GO 48411
// if mc_taming [ i ] then
48524: LD_EXP 132
48528: PUSH
48529: LD_VAR 0 2
48533: ARRAY
48534: IFFALSE 48558
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
48536: LD_ADDR_EXP 132
48540: PUSH
48541: LD_EXP 132
48545: PPUSH
48546: LD_VAR 0 2
48550: PPUSH
48551: EMPTY
48552: PPUSH
48553: CALL_OW 1
48557: ST_TO_ADDR
// for j in tmp do
48558: LD_ADDR_VAR 0 3
48562: PUSH
48563: LD_VAR 0 4
48567: PUSH
48568: FOR_IN
48569: IFFALSE 48792
// begin if IsInUnit ( j ) then
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 310
48580: IFFALSE 48591
// ComExitBuilding ( j ) ;
48582: LD_VAR 0 3
48586: PPUSH
48587: CALL_OW 122
// if not j in mc_healers [ i ] then
48591: LD_VAR 0 3
48595: PUSH
48596: LD_EXP 105
48600: PUSH
48601: LD_VAR 0 2
48605: ARRAY
48606: IN
48607: NOT
48608: IFFALSE 48654
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
48610: LD_ADDR_EXP 105
48614: PUSH
48615: LD_EXP 105
48619: PPUSH
48620: LD_VAR 0 2
48624: PUSH
48625: LD_EXP 105
48629: PUSH
48630: LD_VAR 0 2
48634: ARRAY
48635: PUSH
48636: LD_INT 1
48638: PLUS
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PPUSH
48644: LD_VAR 0 3
48648: PPUSH
48649: CALL 74020 0 3
48653: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
48654: LD_VAR 0 3
48658: PPUSH
48659: CALL_OW 110
48663: PUSH
48664: LD_INT 102
48666: NONEQUAL
48667: IFFALSE 48681
// SetTag ( j , 102 ) ;
48669: LD_VAR 0 3
48673: PPUSH
48674: LD_INT 102
48676: PPUSH
48677: CALL_OW 109
// Wait ( 3 ) ;
48681: LD_INT 3
48683: PPUSH
48684: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48688: LD_EXP 104
48692: PUSH
48693: LD_VAR 0 2
48697: ARRAY
48698: PUSH
48699: LD_INT 1
48701: ARRAY
48702: IFFALSE 48734
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48704: LD_VAR 0 3
48708: PPUSH
48709: LD_EXP 104
48713: PUSH
48714: LD_VAR 0 2
48718: ARRAY
48719: PUSH
48720: LD_INT 1
48722: ARRAY
48723: PUSH
48724: LD_INT 1
48726: ARRAY
48727: PPUSH
48728: CALL_OW 128
48732: GO 48790
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
48734: LD_VAR 0 3
48738: PPUSH
48739: CALL_OW 314
48743: NOT
48744: PUSH
48745: LD_EXP 104
48749: PUSH
48750: LD_VAR 0 2
48754: ARRAY
48755: PUSH
48756: LD_INT 2
48758: ARRAY
48759: AND
48760: IFFALSE 48790
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
48762: LD_VAR 0 3
48766: PPUSH
48767: LD_EXP 104
48771: PUSH
48772: LD_VAR 0 2
48776: ARRAY
48777: PUSH
48778: LD_INT 2
48780: ARRAY
48781: PUSH
48782: LD_INT 1
48784: ARRAY
48785: PPUSH
48786: CALL_OW 128
// end ;
48790: GO 48568
48792: POP
48793: POP
// end ;
48794: GO 48411
48796: POP
48797: POP
// end ;
48798: LD_VAR 0 1
48802: RET
// export function MC_Build ( ) ; var i , j , k , tmp , depot ; begin
48803: LD_INT 0
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
48810: PPUSH
// if not mc_bases then
48811: LD_EXP 101
48815: NOT
48816: IFFALSE 48820
// exit ;
48818: GO 49983
// for i = 1 to mc_bases do
48820: LD_ADDR_VAR 0 2
48824: PUSH
48825: DOUBLE
48826: LD_INT 1
48828: DEC
48829: ST_TO_ADDR
48830: LD_EXP 101
48834: PUSH
48835: FOR_TO
48836: IFFALSE 49981
// begin if mc_scan [ i ] then
48838: LD_EXP 124
48842: PUSH
48843: LD_VAR 0 2
48847: ARRAY
48848: IFFALSE 48852
// continue ;
48850: GO 48835
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
48852: LD_EXP 106
48856: PUSH
48857: LD_VAR 0 2
48861: ARRAY
48862: NOT
48863: PUSH
48864: LD_EXP 108
48868: PUSH
48869: LD_VAR 0 2
48873: ARRAY
48874: NOT
48875: AND
48876: PUSH
48877: LD_EXP 107
48881: PUSH
48882: LD_VAR 0 2
48886: ARRAY
48887: AND
48888: IFFALSE 48926
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
48890: LD_ADDR_EXP 107
48894: PUSH
48895: LD_EXP 107
48899: PPUSH
48900: LD_VAR 0 2
48904: PPUSH
48905: EMPTY
48906: PPUSH
48907: CALL_OW 1
48911: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48912: LD_VAR 0 2
48916: PPUSH
48917: LD_INT 103
48919: PPUSH
48920: CALL 42519 0 2
// continue ;
48924: GO 48835
// end ; if mc_construct_list [ i ] then
48926: LD_EXP 108
48930: PUSH
48931: LD_VAR 0 2
48935: ARRAY
48936: IFFALSE 49156
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
48938: LD_ADDR_VAR 0 5
48942: PUSH
48943: LD_EXP 101
48947: PUSH
48948: LD_VAR 0 2
48952: ARRAY
48953: PPUSH
48954: LD_INT 25
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PPUSH
48964: CALL_OW 72
48968: PUSH
48969: LD_EXP 103
48973: PUSH
48974: LD_VAR 0 2
48978: ARRAY
48979: DIFF
48980: ST_TO_ADDR
// if not tmp then
48981: LD_VAR 0 5
48985: NOT
48986: IFFALSE 48990
// continue ;
48988: GO 48835
// for j in tmp do
48990: LD_ADDR_VAR 0 3
48994: PUSH
48995: LD_VAR 0 5
48999: PUSH
49000: FOR_IN
49001: IFFALSE 49152
// begin if not mc_builders [ i ] then
49003: LD_EXP 107
49007: PUSH
49008: LD_VAR 0 2
49012: ARRAY
49013: NOT
49014: IFFALSE 49072
// begin SetTag ( j , 103 ) ;
49016: LD_VAR 0 3
49020: PPUSH
49021: LD_INT 103
49023: PPUSH
49024: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49028: LD_ADDR_EXP 107
49032: PUSH
49033: LD_EXP 107
49037: PPUSH
49038: LD_VAR 0 2
49042: PUSH
49043: LD_EXP 107
49047: PUSH
49048: LD_VAR 0 2
49052: ARRAY
49053: PUSH
49054: LD_INT 1
49056: PLUS
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PPUSH
49062: LD_VAR 0 3
49066: PPUSH
49067: CALL 74020 0 3
49071: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49072: LD_VAR 0 3
49076: PPUSH
49077: CALL_OW 310
49081: IFFALSE 49092
// ComExitBuilding ( j ) ;
49083: LD_VAR 0 3
49087: PPUSH
49088: CALL_OW 122
// wait ( 3 ) ;
49092: LD_INT 3
49094: PPUSH
49095: CALL_OW 67
// if not mc_construct_list [ i ] then
49099: LD_EXP 108
49103: PUSH
49104: LD_VAR 0 2
49108: ARRAY
49109: NOT
49110: IFFALSE 49114
// break ;
49112: GO 49152
// if not HasTask ( j ) then
49114: LD_VAR 0 3
49118: PPUSH
49119: CALL_OW 314
49123: NOT
49124: IFFALSE 49150
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49126: LD_VAR 0 3
49130: PPUSH
49131: LD_EXP 108
49135: PUSH
49136: LD_VAR 0 2
49140: ARRAY
49141: PUSH
49142: LD_INT 1
49144: ARRAY
49145: PPUSH
49146: CALL 76890 0 2
// end ;
49150: GO 49000
49152: POP
49153: POP
// end else
49154: GO 49979
// if mc_build_list [ i ] then
49156: LD_EXP 106
49160: PUSH
49161: LD_VAR 0 2
49165: ARRAY
49166: IFFALSE 49979
// begin if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
49168: LD_EXP 106
49172: PUSH
49173: LD_VAR 0 2
49177: ARRAY
49178: PUSH
49179: LD_INT 1
49181: ARRAY
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: PPUSH
49187: CALL 76714 0 1
49191: PUSH
49192: LD_EXP 101
49196: PUSH
49197: LD_VAR 0 2
49201: ARRAY
49202: PPUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 30
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 30
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: PPUSH
49231: CALL_OW 72
49235: NOT
49236: AND
49237: IFFALSE 49342
// begin for j = 1 to mc_build_list [ i ] do
49239: LD_ADDR_VAR 0 3
49243: PUSH
49244: DOUBLE
49245: LD_INT 1
49247: DEC
49248: ST_TO_ADDR
49249: LD_EXP 106
49253: PUSH
49254: LD_VAR 0 2
49258: ARRAY
49259: PUSH
49260: FOR_TO
49261: IFFALSE 49340
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
49263: LD_EXP 106
49267: PUSH
49268: LD_VAR 0 2
49272: ARRAY
49273: PUSH
49274: LD_VAR 0 3
49278: ARRAY
49279: PUSH
49280: LD_INT 1
49282: ARRAY
49283: PUSH
49284: LD_INT 2
49286: EQUAL
49287: IFFALSE 49338
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
49289: LD_ADDR_EXP 106
49293: PUSH
49294: LD_EXP 106
49298: PPUSH
49299: LD_VAR 0 2
49303: PPUSH
49304: LD_EXP 106
49308: PUSH
49309: LD_VAR 0 2
49313: ARRAY
49314: PPUSH
49315: LD_VAR 0 3
49319: PPUSH
49320: LD_INT 1
49322: PPUSH
49323: LD_INT 0
49325: PPUSH
49326: CALL 73438 0 4
49330: PPUSH
49331: CALL_OW 1
49335: ST_TO_ADDR
// break ;
49336: GO 49340
// end ;
49338: GO 49260
49340: POP
49341: POP
// end ; depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49342: LD_ADDR_VAR 0 6
49346: PUSH
49347: LD_EXP 101
49351: PUSH
49352: LD_VAR 0 2
49356: ARRAY
49357: PPUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 30
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 30
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: PPUSH
49386: CALL_OW 72
49390: ST_TO_ADDR
// for k := 1 to depot do
49391: LD_ADDR_VAR 0 4
49395: PUSH
49396: DOUBLE
49397: LD_INT 1
49399: DEC
49400: ST_TO_ADDR
49401: LD_VAR 0 6
49405: PUSH
49406: FOR_TO
49407: IFFALSE 49977
// begin if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or CanBeBuilt ( depot [ k ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49409: LD_EXP 106
49413: PUSH
49414: LD_VAR 0 2
49418: ARRAY
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PUSH
49428: LD_INT 0
49430: EQUAL
49431: PUSH
49432: LD_VAR 0 6
49436: PUSH
49437: LD_VAR 0 4
49441: ARRAY
49442: PPUSH
49443: LD_EXP 106
49447: PUSH
49448: LD_VAR 0 2
49452: ARRAY
49453: PUSH
49454: LD_INT 1
49456: ARRAY
49457: PUSH
49458: LD_INT 1
49460: ARRAY
49461: PPUSH
49462: LD_EXP 106
49466: PUSH
49467: LD_VAR 0 2
49471: ARRAY
49472: PUSH
49473: LD_INT 1
49475: ARRAY
49476: PUSH
49477: LD_INT 2
49479: ARRAY
49480: PPUSH
49481: LD_EXP 106
49485: PUSH
49486: LD_VAR 0 2
49490: ARRAY
49491: PUSH
49492: LD_INT 1
49494: ARRAY
49495: PUSH
49496: LD_INT 3
49498: ARRAY
49499: PPUSH
49500: LD_EXP 106
49504: PUSH
49505: LD_VAR 0 2
49509: ARRAY
49510: PUSH
49511: LD_INT 1
49513: ARRAY
49514: PUSH
49515: LD_INT 4
49517: ARRAY
49518: PPUSH
49519: CALL 82126 0 5
49523: OR
49524: IFFALSE 49805
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49526: LD_ADDR_VAR 0 5
49530: PUSH
49531: LD_EXP 101
49535: PUSH
49536: LD_VAR 0 2
49540: ARRAY
49541: PPUSH
49542: LD_INT 25
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 72
49556: PUSH
49557: LD_EXP 103
49561: PUSH
49562: LD_VAR 0 2
49566: ARRAY
49567: DIFF
49568: ST_TO_ADDR
// if not tmp then
49569: LD_VAR 0 5
49573: NOT
49574: IFFALSE 49578
// continue ;
49576: GO 49406
// for j in tmp do
49578: LD_ADDR_VAR 0 3
49582: PUSH
49583: LD_VAR 0 5
49587: PUSH
49588: FOR_IN
49589: IFFALSE 49801
// begin if not mc_builders [ i ] then
49591: LD_EXP 107
49595: PUSH
49596: LD_VAR 0 2
49600: ARRAY
49601: NOT
49602: IFFALSE 49660
// begin SetTag ( j , 103 ) ;
49604: LD_VAR 0 3
49608: PPUSH
49609: LD_INT 103
49611: PPUSH
49612: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49616: LD_ADDR_EXP 107
49620: PUSH
49621: LD_EXP 107
49625: PPUSH
49626: LD_VAR 0 2
49630: PUSH
49631: LD_EXP 107
49635: PUSH
49636: LD_VAR 0 2
49640: ARRAY
49641: PUSH
49642: LD_INT 1
49644: PLUS
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PPUSH
49650: LD_VAR 0 3
49654: PPUSH
49655: CALL 74020 0 3
49659: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49660: LD_VAR 0 3
49664: PPUSH
49665: CALL_OW 310
49669: IFFALSE 49680
// ComExitBuilding ( j ) ;
49671: LD_VAR 0 3
49675: PPUSH
49676: CALL_OW 122
// wait ( 3 ) ;
49680: LD_INT 3
49682: PPUSH
49683: CALL_OW 67
// if not mc_build_list [ i ] then
49687: LD_EXP 106
49691: PUSH
49692: LD_VAR 0 2
49696: ARRAY
49697: NOT
49698: IFFALSE 49702
// break ;
49700: GO 49801
// if not HasTask ( j ) then
49702: LD_VAR 0 3
49706: PPUSH
49707: CALL_OW 314
49711: NOT
49712: IFFALSE 49799
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49714: LD_VAR 0 3
49718: PPUSH
49719: LD_EXP 106
49723: PUSH
49724: LD_VAR 0 2
49728: ARRAY
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: PPUSH
49738: LD_EXP 106
49742: PUSH
49743: LD_VAR 0 2
49747: ARRAY
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: PPUSH
49757: LD_EXP 106
49761: PUSH
49762: LD_VAR 0 2
49766: ARRAY
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PUSH
49772: LD_INT 3
49774: ARRAY
49775: PPUSH
49776: LD_EXP 106
49780: PUSH
49781: LD_VAR 0 2
49785: ARRAY
49786: PUSH
49787: LD_INT 1
49789: ARRAY
49790: PUSH
49791: LD_INT 4
49793: ARRAY
49794: PPUSH
49795: CALL_OW 145
// end ;
49799: GO 49588
49801: POP
49802: POP
// end else
49803: GO 49975
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
49805: LD_EXP 101
49809: PUSH
49810: LD_VAR 0 2
49814: ARRAY
49815: PPUSH
49816: LD_EXP 106
49820: PUSH
49821: LD_VAR 0 2
49825: ARRAY
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PUSH
49831: LD_INT 1
49833: ARRAY
49834: PPUSH
49835: LD_EXP 106
49839: PUSH
49840: LD_VAR 0 2
49844: ARRAY
49845: PUSH
49846: LD_INT 1
49848: ARRAY
49849: PUSH
49850: LD_INT 2
49852: ARRAY
49853: PPUSH
49854: LD_EXP 106
49858: PUSH
49859: LD_VAR 0 2
49863: ARRAY
49864: PUSH
49865: LD_INT 1
49867: ARRAY
49868: PUSH
49869: LD_INT 3
49871: ARRAY
49872: PPUSH
49873: LD_EXP 106
49877: PUSH
49878: LD_VAR 0 2
49882: ARRAY
49883: PUSH
49884: LD_INT 1
49886: ARRAY
49887: PUSH
49888: LD_INT 4
49890: ARRAY
49891: PPUSH
49892: LD_EXP 101
49896: PUSH
49897: LD_VAR 0 2
49901: ARRAY
49902: PPUSH
49903: LD_INT 21
49905: PUSH
49906: LD_INT 3
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PPUSH
49913: CALL_OW 72
49917: PPUSH
49918: EMPTY
49919: PPUSH
49920: CALL 80880 0 7
49924: NOT
49925: IFFALSE 49975
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
49927: LD_ADDR_EXP 106
49931: PUSH
49932: LD_EXP 106
49936: PPUSH
49937: LD_VAR 0 2
49941: PPUSH
49942: LD_EXP 106
49946: PUSH
49947: LD_VAR 0 2
49951: ARRAY
49952: PPUSH
49953: LD_INT 1
49955: PPUSH
49956: LD_INT 1
49958: NEG
49959: PPUSH
49960: LD_INT 0
49962: PPUSH
49963: CALL 73438 0 4
49967: PPUSH
49968: CALL_OW 1
49972: ST_TO_ADDR
// continue ;
49973: GO 49406
// end ; end ;
49975: GO 49406
49977: POP
49978: POP
// end ; end ;
49979: GO 48835
49981: POP
49982: POP
// end ;
49983: LD_VAR 0 1
49987: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
49988: LD_INT 0
49990: PPUSH
49991: PPUSH
49992: PPUSH
49993: PPUSH
49994: PPUSH
49995: PPUSH
// if not mc_bases then
49996: LD_EXP 101
50000: NOT
50001: IFFALSE 50005
// exit ;
50003: GO 50432
// for i = 1 to mc_bases do
50005: LD_ADDR_VAR 0 2
50009: PUSH
50010: DOUBLE
50011: LD_INT 1
50013: DEC
50014: ST_TO_ADDR
50015: LD_EXP 101
50019: PUSH
50020: FOR_TO
50021: IFFALSE 50430
// begin tmp := mc_build_upgrade [ i ] ;
50023: LD_ADDR_VAR 0 4
50027: PUSH
50028: LD_EXP 133
50032: PUSH
50033: LD_VAR 0 2
50037: ARRAY
50038: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
50039: LD_ADDR_VAR 0 6
50043: PUSH
50044: LD_EXP 134
50048: PUSH
50049: LD_VAR 0 2
50053: ARRAY
50054: PPUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 6
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 30
50070: PUSH
50071: LD_INT 7
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: PPUSH
50083: CALL_OW 72
50087: ST_TO_ADDR
// if not tmp and not lab then
50088: LD_VAR 0 4
50092: NOT
50093: PUSH
50094: LD_VAR 0 6
50098: NOT
50099: AND
50100: IFFALSE 50104
// continue ;
50102: GO 50020
// if tmp then
50104: LD_VAR 0 4
50108: IFFALSE 50228
// for j in tmp do
50110: LD_ADDR_VAR 0 3
50114: PUSH
50115: LD_VAR 0 4
50119: PUSH
50120: FOR_IN
50121: IFFALSE 50226
// begin if UpgradeCost ( j ) then
50123: LD_VAR 0 3
50127: PPUSH
50128: CALL 80540 0 1
50132: IFFALSE 50224
// begin ComUpgrade ( j ) ;
50134: LD_VAR 0 3
50138: PPUSH
50139: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
50143: LD_ADDR_EXP 133
50147: PUSH
50148: LD_EXP 133
50152: PPUSH
50153: LD_VAR 0 2
50157: PPUSH
50158: LD_EXP 133
50162: PUSH
50163: LD_VAR 0 2
50167: ARRAY
50168: PUSH
50169: LD_VAR 0 3
50173: DIFF
50174: PPUSH
50175: CALL_OW 1
50179: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
50180: LD_ADDR_EXP 108
50184: PUSH
50185: LD_EXP 108
50189: PPUSH
50190: LD_VAR 0 2
50194: PUSH
50195: LD_EXP 108
50199: PUSH
50200: LD_VAR 0 2
50204: ARRAY
50205: PUSH
50206: LD_INT 1
50208: PLUS
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PPUSH
50214: LD_VAR 0 3
50218: PPUSH
50219: CALL 74020 0 3
50223: ST_TO_ADDR
// end ; end ;
50224: GO 50120
50226: POP
50227: POP
// if not lab or not mc_lab_upgrade [ i ] then
50228: LD_VAR 0 6
50232: NOT
50233: PUSH
50234: LD_EXP 135
50238: PUSH
50239: LD_VAR 0 2
50243: ARRAY
50244: NOT
50245: OR
50246: IFFALSE 50250
// continue ;
50248: GO 50020
// for j in lab do
50250: LD_ADDR_VAR 0 3
50254: PUSH
50255: LD_VAR 0 6
50259: PUSH
50260: FOR_IN
50261: IFFALSE 50426
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
50263: LD_VAR 0 3
50267: PPUSH
50268: CALL_OW 266
50272: PUSH
50273: LD_INT 6
50275: PUSH
50276: LD_INT 7
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: IN
50283: PUSH
50284: LD_VAR 0 3
50288: PPUSH
50289: CALL_OW 461
50293: PUSH
50294: LD_INT 1
50296: NONEQUAL
50297: AND
50298: IFFALSE 50424
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
50300: LD_VAR 0 3
50304: PPUSH
50305: LD_EXP 135
50309: PUSH
50310: LD_VAR 0 2
50314: ARRAY
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: PPUSH
50320: CALL 80745 0 2
50324: IFFALSE 50424
// begin ComCancel ( j ) ;
50326: LD_VAR 0 3
50330: PPUSH
50331: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
50335: LD_VAR 0 3
50339: PPUSH
50340: LD_EXP 135
50344: PUSH
50345: LD_VAR 0 2
50349: ARRAY
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PPUSH
50355: CALL_OW 207
// if not j in mc_construct_list [ i ] then
50359: LD_VAR 0 3
50363: PUSH
50364: LD_EXP 108
50368: PUSH
50369: LD_VAR 0 2
50373: ARRAY
50374: IN
50375: NOT
50376: IFFALSE 50422
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
50378: LD_ADDR_EXP 108
50382: PUSH
50383: LD_EXP 108
50387: PPUSH
50388: LD_VAR 0 2
50392: PUSH
50393: LD_EXP 108
50397: PUSH
50398: LD_VAR 0 2
50402: ARRAY
50403: PUSH
50404: LD_INT 1
50406: PLUS
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PPUSH
50412: LD_VAR 0 3
50416: PPUSH
50417: CALL 74020 0 3
50421: ST_TO_ADDR
// break ;
50422: GO 50426
// end ; end ; end ;
50424: GO 50260
50426: POP
50427: POP
// end ;
50428: GO 50020
50430: POP
50431: POP
// end ;
50432: LD_VAR 0 1
50436: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
50437: LD_INT 0
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
// if not mc_bases then
50448: LD_EXP 101
50452: NOT
50453: IFFALSE 50457
// exit ;
50455: GO 50862
// for i = 1 to mc_bases do
50457: LD_ADDR_VAR 0 2
50461: PUSH
50462: DOUBLE
50463: LD_INT 1
50465: DEC
50466: ST_TO_ADDR
50467: LD_EXP 101
50471: PUSH
50472: FOR_TO
50473: IFFALSE 50860
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
50475: LD_EXP 109
50479: PUSH
50480: LD_VAR 0 2
50484: ARRAY
50485: NOT
50486: PUSH
50487: LD_EXP 101
50491: PUSH
50492: LD_VAR 0 2
50496: ARRAY
50497: PPUSH
50498: LD_INT 30
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PPUSH
50508: CALL_OW 72
50512: NOT
50513: OR
50514: IFFALSE 50518
// continue ;
50516: GO 50472
// busy := false ;
50518: LD_ADDR_VAR 0 8
50522: PUSH
50523: LD_INT 0
50525: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50526: LD_ADDR_VAR 0 4
50530: PUSH
50531: LD_EXP 101
50535: PUSH
50536: LD_VAR 0 2
50540: ARRAY
50541: PPUSH
50542: LD_INT 30
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PPUSH
50552: CALL_OW 72
50556: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
50557: LD_ADDR_VAR 0 6
50561: PUSH
50562: LD_EXP 109
50566: PUSH
50567: LD_VAR 0 2
50571: ARRAY
50572: PPUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 30
50578: PUSH
50579: LD_INT 32
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 30
50588: PUSH
50589: LD_INT 33
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: PPUSH
50601: CALL_OW 72
50605: ST_TO_ADDR
// if not t then
50606: LD_VAR 0 6
50610: NOT
50611: IFFALSE 50615
// continue ;
50613: GO 50472
// for j in tmp do
50615: LD_ADDR_VAR 0 3
50619: PUSH
50620: LD_VAR 0 4
50624: PUSH
50625: FOR_IN
50626: IFFALSE 50656
// if not BuildingStatus ( j ) = bs_idle then
50628: LD_VAR 0 3
50632: PPUSH
50633: CALL_OW 461
50637: PUSH
50638: LD_INT 2
50640: EQUAL
50641: NOT
50642: IFFALSE 50654
// begin busy := true ;
50644: LD_ADDR_VAR 0 8
50648: PUSH
50649: LD_INT 1
50651: ST_TO_ADDR
// break ;
50652: GO 50656
// end ;
50654: GO 50625
50656: POP
50657: POP
// if busy then
50658: LD_VAR 0 8
50662: IFFALSE 50666
// continue ;
50664: GO 50472
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
50666: LD_ADDR_VAR 0 7
50670: PUSH
50671: LD_VAR 0 6
50675: PPUSH
50676: LD_INT 35
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PPUSH
50686: CALL_OW 72
50690: ST_TO_ADDR
// if tw then
50691: LD_VAR 0 7
50695: IFFALSE 50772
// begin tw := tw [ 1 ] ;
50697: LD_ADDR_VAR 0 7
50701: PUSH
50702: LD_VAR 0 7
50706: PUSH
50707: LD_INT 1
50709: ARRAY
50710: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
50711: LD_ADDR_VAR 0 9
50715: PUSH
50716: LD_VAR 0 7
50720: PPUSH
50721: LD_EXP 126
50725: PUSH
50726: LD_VAR 0 2
50730: ARRAY
50731: PPUSH
50732: CALL 79037 0 2
50736: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
50737: LD_EXP 140
50741: PUSH
50742: LD_VAR 0 2
50746: ARRAY
50747: IFFALSE 50770
// if not weapon in mc_allowed_tower_weapons [ i ] then
50749: LD_VAR 0 9
50753: PUSH
50754: LD_EXP 140
50758: PUSH
50759: LD_VAR 0 2
50763: ARRAY
50764: IN
50765: NOT
50766: IFFALSE 50770
// continue ;
50768: GO 50472
// end else
50770: GO 50835
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_EXP 109
50781: PUSH
50782: LD_VAR 0 2
50786: ARRAY
50787: PPUSH
50788: LD_VAR 0 4
50792: PPUSH
50793: CALL 105927 0 2
50797: ST_TO_ADDR
// if not tmp2 then
50798: LD_VAR 0 5
50802: NOT
50803: IFFALSE 50807
// continue ;
50805: GO 50472
// tw := tmp2 [ 1 ] ;
50807: LD_ADDR_VAR 0 7
50811: PUSH
50812: LD_VAR 0 5
50816: PUSH
50817: LD_INT 1
50819: ARRAY
50820: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
50821: LD_ADDR_VAR 0 9
50825: PUSH
50826: LD_VAR 0 5
50830: PUSH
50831: LD_INT 2
50833: ARRAY
50834: ST_TO_ADDR
// end ; if not weapon then
50835: LD_VAR 0 9
50839: NOT
50840: IFFALSE 50844
// continue ;
50842: GO 50472
// ComPlaceWeapon ( tw , weapon ) ;
50844: LD_VAR 0 7
50848: PPUSH
50849: LD_VAR 0 9
50853: PPUSH
50854: CALL_OW 148
// end ;
50858: GO 50472
50860: POP
50861: POP
// end ;
50862: LD_VAR 0 1
50866: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
50867: LD_INT 0
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
// if not mc_bases then
50876: LD_EXP 101
50880: NOT
50881: IFFALSE 50885
// exit ;
50883: GO 51660
// for i = 1 to mc_bases do
50885: LD_ADDR_VAR 0 2
50889: PUSH
50890: DOUBLE
50891: LD_INT 1
50893: DEC
50894: ST_TO_ADDR
50895: LD_EXP 101
50899: PUSH
50900: FOR_TO
50901: IFFALSE 51658
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
50903: LD_EXP 114
50907: PUSH
50908: LD_VAR 0 2
50912: ARRAY
50913: NOT
50914: PUSH
50915: LD_EXP 114
50919: PUSH
50920: LD_VAR 0 2
50924: ARRAY
50925: PUSH
50926: LD_EXP 115
50930: PUSH
50931: LD_VAR 0 2
50935: ARRAY
50936: EQUAL
50937: OR
50938: PUSH
50939: LD_EXP 124
50943: PUSH
50944: LD_VAR 0 2
50948: ARRAY
50949: OR
50950: IFFALSE 50954
// continue ;
50952: GO 50900
// if mc_miners [ i ] then
50954: LD_EXP 115
50958: PUSH
50959: LD_VAR 0 2
50963: ARRAY
50964: IFFALSE 51345
// begin for j = mc_miners [ i ] downto 1 do
50966: LD_ADDR_VAR 0 3
50970: PUSH
50971: DOUBLE
50972: LD_EXP 115
50976: PUSH
50977: LD_VAR 0 2
50981: ARRAY
50982: INC
50983: ST_TO_ADDR
50984: LD_INT 1
50986: PUSH
50987: FOR_DOWNTO
50988: IFFALSE 51343
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
50990: LD_EXP 115
50994: PUSH
50995: LD_VAR 0 2
50999: ARRAY
51000: PUSH
51001: LD_VAR 0 3
51005: ARRAY
51006: PPUSH
51007: CALL_OW 301
51011: PUSH
51012: LD_EXP 115
51016: PUSH
51017: LD_VAR 0 2
51021: ARRAY
51022: PUSH
51023: LD_VAR 0 3
51027: ARRAY
51028: PPUSH
51029: CALL_OW 257
51033: PUSH
51034: LD_INT 1
51036: NONEQUAL
51037: OR
51038: IFFALSE 51101
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51040: LD_ADDR_VAR 0 5
51044: PUSH
51045: LD_EXP 115
51049: PUSH
51050: LD_VAR 0 2
51054: ARRAY
51055: PUSH
51056: LD_EXP 115
51060: PUSH
51061: LD_VAR 0 2
51065: ARRAY
51066: PUSH
51067: LD_VAR 0 3
51071: ARRAY
51072: DIFF
51073: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51074: LD_ADDR_EXP 115
51078: PUSH
51079: LD_EXP 115
51083: PPUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: LD_VAR 0 5
51093: PPUSH
51094: CALL_OW 1
51098: ST_TO_ADDR
// continue ;
51099: GO 50987
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
51101: LD_EXP 115
51105: PUSH
51106: LD_VAR 0 2
51110: ARRAY
51111: PUSH
51112: LD_VAR 0 3
51116: ARRAY
51117: PPUSH
51118: CALL_OW 257
51122: PUSH
51123: LD_INT 1
51125: EQUAL
51126: PUSH
51127: LD_EXP 115
51131: PUSH
51132: LD_VAR 0 2
51136: ARRAY
51137: PUSH
51138: LD_VAR 0 3
51142: ARRAY
51143: PPUSH
51144: CALL_OW 459
51148: NOT
51149: AND
51150: PUSH
51151: LD_EXP 115
51155: PUSH
51156: LD_VAR 0 2
51160: ARRAY
51161: PUSH
51162: LD_VAR 0 3
51166: ARRAY
51167: PPUSH
51168: CALL_OW 314
51172: NOT
51173: AND
51174: IFFALSE 51341
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51176: LD_EXP 115
51180: PUSH
51181: LD_VAR 0 2
51185: ARRAY
51186: PUSH
51187: LD_VAR 0 3
51191: ARRAY
51192: PPUSH
51193: CALL_OW 310
51197: IFFALSE 51220
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51199: LD_EXP 115
51203: PUSH
51204: LD_VAR 0 2
51208: ARRAY
51209: PUSH
51210: LD_VAR 0 3
51214: ARRAY
51215: PPUSH
51216: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51220: LD_EXP 115
51224: PUSH
51225: LD_VAR 0 2
51229: ARRAY
51230: PUSH
51231: LD_VAR 0 3
51235: ARRAY
51236: PPUSH
51237: CALL_OW 314
51241: NOT
51242: IFFALSE 51341
// begin r := ( j mod Count ( mc_mines [ i ] ) ) + 1 ;
51244: LD_ADDR_VAR 0 7
51248: PUSH
51249: LD_VAR 0 3
51253: PUSH
51254: LD_EXP 114
51258: PUSH
51259: LD_VAR 0 2
51263: ARRAY
51264: PPUSH
51265: CALL 71160 0 1
51269: MOD
51270: PUSH
51271: LD_INT 1
51273: PLUS
51274: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
51275: LD_EXP 115
51279: PUSH
51280: LD_VAR 0 2
51284: ARRAY
51285: PUSH
51286: LD_VAR 0 3
51290: ARRAY
51291: PPUSH
51292: LD_EXP 114
51296: PUSH
51297: LD_VAR 0 2
51301: ARRAY
51302: PUSH
51303: LD_VAR 0 7
51307: ARRAY
51308: PUSH
51309: LD_INT 1
51311: ARRAY
51312: PPUSH
51313: LD_EXP 114
51317: PUSH
51318: LD_VAR 0 2
51322: ARRAY
51323: PUSH
51324: LD_VAR 0 7
51328: ARRAY
51329: PUSH
51330: LD_INT 2
51332: ARRAY
51333: PPUSH
51334: LD_INT 0
51336: PPUSH
51337: CALL_OW 193
// end ; end ; end ;
51341: GO 50987
51343: POP
51344: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51345: LD_ADDR_VAR 0 5
51349: PUSH
51350: LD_EXP 101
51354: PUSH
51355: LD_VAR 0 2
51359: ARRAY
51360: PPUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 30
51366: PUSH
51367: LD_INT 4
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 30
51376: PUSH
51377: LD_INT 5
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 30
51386: PUSH
51387: LD_INT 32
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: PPUSH
51400: CALL_OW 72
51404: ST_TO_ADDR
// if not tmp then
51405: LD_VAR 0 5
51409: NOT
51410: IFFALSE 51414
// continue ;
51412: GO 50900
// list := [ ] ;
51414: LD_ADDR_VAR 0 6
51418: PUSH
51419: EMPTY
51420: ST_TO_ADDR
// for j in tmp do
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_VAR 0 5
51430: PUSH
51431: FOR_IN
51432: IFFALSE 51501
// begin for k in UnitsInside ( j ) do
51434: LD_ADDR_VAR 0 4
51438: PUSH
51439: LD_VAR 0 3
51443: PPUSH
51444: CALL_OW 313
51448: PUSH
51449: FOR_IN
51450: IFFALSE 51497
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51452: LD_VAR 0 4
51456: PPUSH
51457: CALL_OW 257
51461: PUSH
51462: LD_INT 1
51464: EQUAL
51465: PUSH
51466: LD_VAR 0 4
51470: PPUSH
51471: CALL_OW 459
51475: NOT
51476: AND
51477: IFFALSE 51495
// list := list ^ k ;
51479: LD_ADDR_VAR 0 6
51483: PUSH
51484: LD_VAR 0 6
51488: PUSH
51489: LD_VAR 0 4
51493: ADD
51494: ST_TO_ADDR
51495: GO 51449
51497: POP
51498: POP
// end ;
51499: GO 51431
51501: POP
51502: POP
// list := list diff mc_miners [ i ] ;
51503: LD_ADDR_VAR 0 6
51507: PUSH
51508: LD_VAR 0 6
51512: PUSH
51513: LD_EXP 115
51517: PUSH
51518: LD_VAR 0 2
51522: ARRAY
51523: DIFF
51524: ST_TO_ADDR
// if not list then
51525: LD_VAR 0 6
51529: NOT
51530: IFFALSE 51534
// continue ;
51532: GO 50900
// k := mc_mines [ i ] - mc_miners [ i ] ;
51534: LD_ADDR_VAR 0 4
51538: PUSH
51539: LD_EXP 114
51543: PUSH
51544: LD_VAR 0 2
51548: ARRAY
51549: PUSH
51550: LD_EXP 115
51554: PUSH
51555: LD_VAR 0 2
51559: ARRAY
51560: MINUS
51561: ST_TO_ADDR
// if k > list then
51562: LD_VAR 0 4
51566: PUSH
51567: LD_VAR 0 6
51571: GREATER
51572: IFFALSE 51584
// k := list ;
51574: LD_ADDR_VAR 0 4
51578: PUSH
51579: LD_VAR 0 6
51583: ST_TO_ADDR
// for j = 1 to k do
51584: LD_ADDR_VAR 0 3
51588: PUSH
51589: DOUBLE
51590: LD_INT 1
51592: DEC
51593: ST_TO_ADDR
51594: LD_VAR 0 4
51598: PUSH
51599: FOR_TO
51600: IFFALSE 51654
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
51602: LD_ADDR_EXP 115
51606: PUSH
51607: LD_EXP 115
51611: PPUSH
51612: LD_VAR 0 2
51616: PUSH
51617: LD_EXP 115
51621: PUSH
51622: LD_VAR 0 2
51626: ARRAY
51627: PUSH
51628: LD_INT 1
51630: PLUS
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PPUSH
51636: LD_VAR 0 6
51640: PUSH
51641: LD_VAR 0 3
51645: ARRAY
51646: PPUSH
51647: CALL 74020 0 3
51651: ST_TO_ADDR
51652: GO 51599
51654: POP
51655: POP
// end ;
51656: GO 50900
51658: POP
51659: POP
// end ;
51660: LD_VAR 0 1
51664: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , side , target , cargo , depot , fac , components ; begin
51665: LD_INT 0
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
// if not mc_bases then
51678: LD_EXP 101
51682: NOT
51683: IFFALSE 51687
// exit ;
51685: GO 53510
// for i = 1 to mc_bases do
51687: LD_ADDR_VAR 0 2
51691: PUSH
51692: DOUBLE
51693: LD_INT 1
51695: DEC
51696: ST_TO_ADDR
51697: LD_EXP 101
51701: PUSH
51702: FOR_TO
51703: IFFALSE 53508
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
51705: LD_EXP 101
51709: PUSH
51710: LD_VAR 0 2
51714: ARRAY
51715: NOT
51716: PUSH
51717: LD_EXP 108
51721: PUSH
51722: LD_VAR 0 2
51726: ARRAY
51727: OR
51728: IFFALSE 51732
// continue ;
51730: GO 51702
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
51732: LD_EXP 117
51736: PUSH
51737: LD_VAR 0 2
51741: ARRAY
51742: NOT
51743: PUSH
51744: LD_EXP 118
51748: PUSH
51749: LD_VAR 0 2
51753: ARRAY
51754: AND
51755: IFFALSE 51793
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51757: LD_ADDR_EXP 118
51761: PUSH
51762: LD_EXP 118
51766: PPUSH
51767: LD_VAR 0 2
51771: PPUSH
51772: EMPTY
51773: PPUSH
51774: CALL_OW 1
51778: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
51779: LD_VAR 0 2
51783: PPUSH
51784: LD_INT 107
51786: PPUSH
51787: CALL 42519 0 2
// continue ;
51791: GO 51702
// end ; target := [ ] ;
51793: LD_ADDR_VAR 0 7
51797: PUSH
51798: EMPTY
51799: ST_TO_ADDR
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
51800: LD_ADDR_VAR 0 6
51804: PUSH
51805: LD_EXP 101
51809: PUSH
51810: LD_VAR 0 2
51814: ARRAY
51815: PUSH
51816: LD_INT 1
51818: ARRAY
51819: PPUSH
51820: CALL_OW 255
51824: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51825: LD_ADDR_VAR 0 9
51829: PUSH
51830: LD_EXP 101
51834: PUSH
51835: LD_VAR 0 2
51839: ARRAY
51840: PPUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 30
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 30
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: LIST
51868: PPUSH
51869: CALL_OW 72
51873: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51874: LD_ADDR_VAR 0 3
51878: PUSH
51879: DOUBLE
51880: LD_EXP 117
51884: PUSH
51885: LD_VAR 0 2
51889: ARRAY
51890: INC
51891: ST_TO_ADDR
51892: LD_INT 1
51894: PUSH
51895: FOR_DOWNTO
51896: IFFALSE 52141
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51898: LD_EXP 117
51902: PUSH
51903: LD_VAR 0 2
51907: ARRAY
51908: PUSH
51909: LD_VAR 0 3
51913: ARRAY
51914: PUSH
51915: LD_INT 2
51917: ARRAY
51918: PPUSH
51919: LD_EXP 117
51923: PUSH
51924: LD_VAR 0 2
51928: ARRAY
51929: PUSH
51930: LD_VAR 0 3
51934: ARRAY
51935: PUSH
51936: LD_INT 3
51938: ARRAY
51939: PPUSH
51940: CALL_OW 488
51944: PUSH
51945: LD_EXP 117
51949: PUSH
51950: LD_VAR 0 2
51954: ARRAY
51955: PUSH
51956: LD_VAR 0 3
51960: ARRAY
51961: PUSH
51962: LD_INT 2
51964: ARRAY
51965: PPUSH
51966: LD_EXP 117
51970: PUSH
51971: LD_VAR 0 2
51975: ARRAY
51976: PUSH
51977: LD_VAR 0 3
51981: ARRAY
51982: PUSH
51983: LD_INT 3
51985: ARRAY
51986: PPUSH
51987: CALL_OW 284
51991: PUSH
51992: LD_INT 0
51994: EQUAL
51995: AND
51996: IFFALSE 52051
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
51998: LD_ADDR_VAR 0 5
52002: PUSH
52003: LD_EXP 117
52007: PUSH
52008: LD_VAR 0 2
52012: ARRAY
52013: PPUSH
52014: LD_VAR 0 3
52018: PPUSH
52019: CALL_OW 3
52023: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52024: LD_ADDR_EXP 117
52028: PUSH
52029: LD_EXP 117
52033: PPUSH
52034: LD_VAR 0 2
52038: PPUSH
52039: LD_VAR 0 5
52043: PPUSH
52044: CALL_OW 1
52048: ST_TO_ADDR
// continue ;
52049: GO 51895
// end ; if DangerAtRangeXY ( side , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
52051: LD_VAR 0 6
52055: PPUSH
52056: LD_EXP 117
52060: PUSH
52061: LD_VAR 0 2
52065: ARRAY
52066: PUSH
52067: LD_VAR 0 3
52071: ARRAY
52072: PUSH
52073: LD_INT 2
52075: ARRAY
52076: PPUSH
52077: LD_EXP 117
52081: PUSH
52082: LD_VAR 0 2
52086: ARRAY
52087: PUSH
52088: LD_VAR 0 3
52092: ARRAY
52093: PUSH
52094: LD_INT 3
52096: ARRAY
52097: PPUSH
52098: LD_INT 30
52100: PPUSH
52101: CALL 74916 0 4
52105: PUSH
52106: LD_INT 4
52108: ARRAY
52109: PUSH
52110: LD_INT 0
52112: EQUAL
52113: IFFALSE 52139
// begin target := mc_crates [ i ] [ j ] ;
52115: LD_ADDR_VAR 0 7
52119: PUSH
52120: LD_EXP 117
52124: PUSH
52125: LD_VAR 0 2
52129: ARRAY
52130: PUSH
52131: LD_VAR 0 3
52135: ARRAY
52136: ST_TO_ADDR
// break ;
52137: GO 52141
// end ; end ;
52139: GO 51895
52141: POP
52142: POP
// if not target then
52143: LD_VAR 0 7
52147: NOT
52148: IFFALSE 52152
// continue ;
52150: GO 51702
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
52152: LD_ADDR_VAR 0 8
52156: PUSH
52157: LD_EXP 120
52161: PUSH
52162: LD_VAR 0 2
52166: ARRAY
52167: PPUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: LD_INT 58
52176: PUSH
52177: EMPTY
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 61
52186: PUSH
52187: EMPTY
52188: LIST
52189: PUSH
52190: LD_INT 33
52192: PUSH
52193: LD_INT 5
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 33
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 34
52222: PUSH
52223: LD_INT 32
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 34
52232: PUSH
52233: LD_INT 51
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 34
52242: PUSH
52243: LD_INT 12
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PPUSH
52260: CALL_OW 72
52264: ST_TO_ADDR
// if not cargo then
52265: LD_VAR 0 8
52269: NOT
52270: IFFALSE 52976
// begin if mc_crates_collector [ i ] < 5 then
52272: LD_EXP 118
52276: PUSH
52277: LD_VAR 0 2
52281: ARRAY
52282: PUSH
52283: LD_INT 5
52285: LESS
52286: IFFALSE 52652
// begin if mc_ape [ i ] then
52288: LD_EXP 130
52292: PUSH
52293: LD_VAR 0 2
52297: ARRAY
52298: IFFALSE 52345
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
52300: LD_ADDR_VAR 0 5
52304: PUSH
52305: LD_EXP 130
52309: PUSH
52310: LD_VAR 0 2
52314: ARRAY
52315: PPUSH
52316: LD_INT 25
52318: PUSH
52319: LD_INT 16
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 24
52328: PUSH
52329: LD_INT 750
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PPUSH
52340: CALL_OW 72
52344: ST_TO_ADDR
// if not tmp then
52345: LD_VAR 0 5
52349: NOT
52350: IFFALSE 52397
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
52352: LD_ADDR_VAR 0 5
52356: PUSH
52357: LD_EXP 101
52361: PUSH
52362: LD_VAR 0 2
52366: ARRAY
52367: PPUSH
52368: LD_INT 25
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 24
52380: PUSH
52381: LD_INT 750
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PPUSH
52392: CALL_OW 72
52396: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
52397: LD_EXP 130
52401: PUSH
52402: LD_VAR 0 2
52406: ARRAY
52407: PUSH
52408: LD_EXP 101
52412: PUSH
52413: LD_VAR 0 2
52417: ARRAY
52418: PPUSH
52419: LD_INT 25
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 24
52431: PUSH
52432: LD_INT 750
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PPUSH
52443: CALL_OW 72
52447: AND
52448: PUSH
52449: LD_VAR 0 5
52453: PUSH
52454: LD_INT 5
52456: LESS
52457: AND
52458: IFFALSE 52540
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
52460: LD_ADDR_VAR 0 3
52464: PUSH
52465: LD_EXP 101
52469: PUSH
52470: LD_VAR 0 2
52474: ARRAY
52475: PPUSH
52476: LD_INT 25
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 24
52488: PUSH
52489: LD_INT 750
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PPUSH
52500: CALL_OW 72
52504: PUSH
52505: FOR_IN
52506: IFFALSE 52538
// begin tmp := tmp union j ;
52508: LD_ADDR_VAR 0 5
52512: PUSH
52513: LD_VAR 0 5
52517: PUSH
52518: LD_VAR 0 3
52522: UNION
52523: ST_TO_ADDR
// if tmp >= 5 then
52524: LD_VAR 0 5
52528: PUSH
52529: LD_INT 5
52531: GREATEREQUAL
52532: IFFALSE 52536
// break ;
52534: GO 52538
// end ;
52536: GO 52505
52538: POP
52539: POP
// end ; if not tmp then
52540: LD_VAR 0 5
52544: NOT
52545: IFFALSE 52549
// continue ;
52547: GO 51702
// for j in tmp do
52549: LD_ADDR_VAR 0 3
52553: PUSH
52554: LD_VAR 0 5
52558: PUSH
52559: FOR_IN
52560: IFFALSE 52650
// if not GetTag ( j ) then
52562: LD_VAR 0 3
52566: PPUSH
52567: CALL_OW 110
52571: NOT
52572: IFFALSE 52648
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52574: LD_ADDR_EXP 118
52578: PUSH
52579: LD_EXP 118
52583: PPUSH
52584: LD_VAR 0 2
52588: PUSH
52589: LD_EXP 118
52593: PUSH
52594: LD_VAR 0 2
52598: ARRAY
52599: PUSH
52600: LD_INT 1
52602: PLUS
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PPUSH
52608: LD_VAR 0 3
52612: PPUSH
52613: CALL 74020 0 3
52617: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52618: LD_VAR 0 3
52622: PPUSH
52623: LD_INT 107
52625: PPUSH
52626: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
52630: LD_EXP 118
52634: PUSH
52635: LD_VAR 0 2
52639: ARRAY
52640: PUSH
52641: LD_INT 5
52643: GREATEREQUAL
52644: IFFALSE 52648
// break ;
52646: GO 52650
// end ;
52648: GO 52559
52650: POP
52651: POP
// end ; if mc_crates_collector [ i ] and target then
52652: LD_EXP 118
52656: PUSH
52657: LD_VAR 0 2
52661: ARRAY
52662: PUSH
52663: LD_VAR 0 7
52667: AND
52668: IFFALSE 52974
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52670: LD_EXP 118
52674: PUSH
52675: LD_VAR 0 2
52679: ARRAY
52680: PUSH
52681: LD_VAR 0 7
52685: PUSH
52686: LD_INT 1
52688: ARRAY
52689: LESS
52690: IFFALSE 52710
// tmp := mc_crates_collector [ i ] else
52692: LD_ADDR_VAR 0 5
52696: PUSH
52697: LD_EXP 118
52701: PUSH
52702: LD_VAR 0 2
52706: ARRAY
52707: ST_TO_ADDR
52708: GO 52724
// tmp := target [ 1 ] ;
52710: LD_ADDR_VAR 0 5
52714: PUSH
52715: LD_VAR 0 7
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: ST_TO_ADDR
// k := 0 ;
52724: LD_ADDR_VAR 0 4
52728: PUSH
52729: LD_INT 0
52731: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
52732: LD_ADDR_VAR 0 3
52736: PUSH
52737: LD_EXP 118
52741: PUSH
52742: LD_VAR 0 2
52746: ARRAY
52747: PUSH
52748: FOR_IN
52749: IFFALSE 52972
// begin k := k + 1 ;
52751: LD_ADDR_VAR 0 4
52755: PUSH
52756: LD_VAR 0 4
52760: PUSH
52761: LD_INT 1
52763: PLUS
52764: ST_TO_ADDR
// if k > tmp then
52765: LD_VAR 0 4
52769: PUSH
52770: LD_VAR 0 5
52774: GREATER
52775: IFFALSE 52779
// break ;
52777: GO 52972
// if not GetClass ( j ) in [ 2 , 16 ] then
52779: LD_VAR 0 3
52783: PPUSH
52784: CALL_OW 257
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 16
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: IN
52799: NOT
52800: IFFALSE 52853
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
52802: LD_ADDR_EXP 118
52806: PUSH
52807: LD_EXP 118
52811: PPUSH
52812: LD_VAR 0 2
52816: PPUSH
52817: LD_EXP 118
52821: PUSH
52822: LD_VAR 0 2
52826: ARRAY
52827: PUSH
52828: LD_VAR 0 3
52832: DIFF
52833: PPUSH
52834: CALL_OW 1
52838: ST_TO_ADDR
// SetTag ( j , 0 ) ;
52839: LD_VAR 0 3
52843: PPUSH
52844: LD_INT 0
52846: PPUSH
52847: CALL_OW 109
// continue ;
52851: GO 52748
// end ; if IsInUnit ( j ) then
52853: LD_VAR 0 3
52857: PPUSH
52858: CALL_OW 310
52862: IFFALSE 52873
// ComExitBuilding ( j ) ;
52864: LD_VAR 0 3
52868: PPUSH
52869: CALL_OW 122
// wait ( 3 ) ;
52873: LD_INT 3
52875: PPUSH
52876: CALL_OW 67
// if HasTask ( j ) and DangerAtRangeXY ( side , target [ 2 ] , target [ 3 ] , 30 ) [ 4 ] then
52880: LD_VAR 0 3
52884: PPUSH
52885: CALL_OW 314
52889: PUSH
52890: LD_VAR 0 6
52894: PPUSH
52895: LD_VAR 0 7
52899: PUSH
52900: LD_INT 2
52902: ARRAY
52903: PPUSH
52904: LD_VAR 0 7
52908: PUSH
52909: LD_INT 3
52911: ARRAY
52912: PPUSH
52913: LD_INT 30
52915: PPUSH
52916: CALL 74916 0 4
52920: PUSH
52921: LD_INT 4
52923: ARRAY
52924: AND
52925: IFFALSE 52943
// ComStandNearbyBuilding ( j , depot ) else
52927: LD_VAR 0 3
52931: PPUSH
52932: LD_VAR 0 9
52936: PPUSH
52937: CALL 70622 0 2
52941: GO 52970
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
52943: LD_VAR 0 3
52947: PPUSH
52948: LD_VAR 0 7
52952: PUSH
52953: LD_INT 2
52955: ARRAY
52956: PPUSH
52957: LD_VAR 0 7
52961: PUSH
52962: LD_INT 3
52964: ARRAY
52965: PPUSH
52966: CALL_OW 117
// end ;
52970: GO 52748
52972: POP
52973: POP
// end ; end else
52974: GO 53506
// begin for j in cargo do
52976: LD_ADDR_VAR 0 3
52980: PUSH
52981: LD_VAR 0 8
52985: PUSH
52986: FOR_IN
52987: IFFALSE 53504
// begin if GetTag ( j ) <> 0 then
52989: LD_VAR 0 3
52993: PPUSH
52994: CALL_OW 110
52998: PUSH
52999: LD_INT 0
53001: NONEQUAL
53002: IFFALSE 53006
// continue ;
53004: GO 52986
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
53006: LD_VAR 0 3
53010: PPUSH
53011: CALL_OW 256
53015: PUSH
53016: LD_INT 1000
53018: LESS
53019: PUSH
53020: LD_VAR 0 3
53024: PPUSH
53025: LD_EXP 125
53029: PUSH
53030: LD_VAR 0 2
53034: ARRAY
53035: PPUSH
53036: CALL_OW 308
53040: NOT
53041: AND
53042: IFFALSE 53064
// ComMoveToArea ( j , mc_parking [ i ] ) ;
53044: LD_VAR 0 3
53048: PPUSH
53049: LD_EXP 125
53053: PUSH
53054: LD_VAR 0 2
53058: ARRAY
53059: PPUSH
53060: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
53064: LD_VAR 0 3
53068: PPUSH
53069: CALL_OW 256
53073: PUSH
53074: LD_INT 1000
53076: LESS
53077: PUSH
53078: LD_VAR 0 3
53082: PPUSH
53083: LD_EXP 125
53087: PUSH
53088: LD_VAR 0 2
53092: ARRAY
53093: PPUSH
53094: CALL_OW 308
53098: AND
53099: IFFALSE 53103
// continue ;
53101: GO 52986
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
53103: LD_VAR 0 3
53107: PPUSH
53108: CALL_OW 262
53112: PUSH
53113: LD_INT 2
53115: EQUAL
53116: PUSH
53117: LD_VAR 0 3
53121: PPUSH
53122: CALL_OW 261
53126: PUSH
53127: LD_INT 15
53129: LESS
53130: AND
53131: IFFALSE 53135
// continue ;
53133: GO 52986
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
53135: LD_VAR 0 3
53139: PPUSH
53140: CALL_OW 262
53144: PUSH
53145: LD_INT 1
53147: EQUAL
53148: PUSH
53149: LD_VAR 0 3
53153: PPUSH
53154: CALL_OW 261
53158: PUSH
53159: LD_INT 10
53161: LESS
53162: AND
53163: IFFALSE 53443
// begin if not depot then
53165: LD_VAR 0 9
53169: NOT
53170: IFFALSE 53174
// continue ;
53172: GO 52986
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
53174: LD_VAR 0 3
53178: PPUSH
53179: LD_VAR 0 9
53183: PPUSH
53184: LD_VAR 0 3
53188: PPUSH
53189: CALL_OW 74
53193: PPUSH
53194: CALL_OW 296
53198: PUSH
53199: LD_INT 6
53201: LESS
53202: IFFALSE 53218
// SetFuel ( j , 100 ) else
53204: LD_VAR 0 3
53208: PPUSH
53209: LD_INT 100
53211: PPUSH
53212: CALL_OW 240
53216: GO 53443
// if GetFuel ( j ) = 0 then
53218: LD_VAR 0 3
53222: PPUSH
53223: CALL_OW 261
53227: PUSH
53228: LD_INT 0
53230: EQUAL
53231: IFFALSE 53443
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
53233: LD_ADDR_EXP 120
53237: PUSH
53238: LD_EXP 120
53242: PPUSH
53243: LD_VAR 0 2
53247: PPUSH
53248: LD_EXP 120
53252: PUSH
53253: LD_VAR 0 2
53257: ARRAY
53258: PUSH
53259: LD_VAR 0 3
53263: DIFF
53264: PPUSH
53265: CALL_OW 1
53269: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
53270: LD_VAR 0 3
53274: PPUSH
53275: CALL_OW 263
53279: PUSH
53280: LD_INT 1
53282: EQUAL
53283: IFFALSE 53299
// ComExitVehicle ( IsInUnit ( j ) ) ;
53285: LD_VAR 0 3
53289: PPUSH
53290: CALL_OW 310
53294: PPUSH
53295: CALL_OW 121
// if GetControl ( j ) = control_remote then
53299: LD_VAR 0 3
53303: PPUSH
53304: CALL_OW 263
53308: PUSH
53309: LD_INT 2
53311: EQUAL
53312: IFFALSE 53323
// ComUnlink ( j ) ;
53314: LD_VAR 0 3
53318: PPUSH
53319: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
53323: LD_ADDR_VAR 0 10
53327: PUSH
53328: LD_VAR 0 2
53332: PPUSH
53333: LD_INT 3
53335: PPUSH
53336: CALL 63087 0 2
53340: ST_TO_ADDR
// if fac then
53341: LD_VAR 0 10
53345: IFFALSE 53441
// begin for k in fac do
53347: LD_ADDR_VAR 0 4
53351: PUSH
53352: LD_VAR 0 10
53356: PUSH
53357: FOR_IN
53358: IFFALSE 53439
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
53360: LD_ADDR_VAR 0 11
53364: PUSH
53365: LD_VAR 0 10
53369: PPUSH
53370: LD_VAR 0 3
53374: PPUSH
53375: CALL_OW 265
53379: PPUSH
53380: LD_VAR 0 3
53384: PPUSH
53385: CALL_OW 262
53389: PPUSH
53390: LD_VAR 0 3
53394: PPUSH
53395: CALL_OW 263
53399: PPUSH
53400: LD_VAR 0 3
53404: PPUSH
53405: CALL_OW 264
53409: PPUSH
53410: CALL 71518 0 5
53414: ST_TO_ADDR
// if components then
53415: LD_VAR 0 11
53419: IFFALSE 53437
// begin MC_InsertProduceList ( i , components ) ;
53421: LD_VAR 0 2
53425: PPUSH
53426: LD_VAR 0 11
53430: PPUSH
53431: CALL 62632 0 2
// break ;
53435: GO 53439
// end ; end ;
53437: GO 53357
53439: POP
53440: POP
// end ; continue ;
53441: GO 52986
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
53443: LD_VAR 0 3
53447: PPUSH
53448: LD_INT 1
53450: PPUSH
53451: CALL_OW 289
53455: PUSH
53456: LD_INT 100
53458: LESS
53459: PUSH
53460: LD_VAR 0 3
53464: PPUSH
53465: CALL_OW 314
53469: NOT
53470: AND
53471: IFFALSE 53500
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
53473: LD_VAR 0 3
53477: PPUSH
53478: LD_VAR 0 7
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: PPUSH
53487: LD_VAR 0 7
53491: PUSH
53492: LD_INT 3
53494: ARRAY
53495: PPUSH
53496: CALL_OW 117
// break ;
53500: GO 53504
// end ;
53502: GO 52986
53504: POP
53505: POP
// end ; end ;
53506: GO 51702
53508: POP
53509: POP
// end ;
53510: LD_VAR 0 1
53514: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
53515: LD_INT 0
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
// if not mc_bases then
53521: LD_EXP 101
53525: NOT
53526: IFFALSE 53530
// exit ;
53528: GO 53691
// for i = 1 to mc_bases do
53530: LD_ADDR_VAR 0 2
53534: PUSH
53535: DOUBLE
53536: LD_INT 1
53538: DEC
53539: ST_TO_ADDR
53540: LD_EXP 101
53544: PUSH
53545: FOR_TO
53546: IFFALSE 53689
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
53548: LD_ADDR_VAR 0 4
53552: PUSH
53553: LD_EXP 120
53557: PUSH
53558: LD_VAR 0 2
53562: ARRAY
53563: PUSH
53564: LD_EXP 123
53568: PUSH
53569: LD_VAR 0 2
53573: ARRAY
53574: UNION
53575: PPUSH
53576: LD_INT 33
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PPUSH
53586: CALL_OW 72
53590: ST_TO_ADDR
// if tmp then
53591: LD_VAR 0 4
53595: IFFALSE 53687
// for j in tmp do
53597: LD_ADDR_VAR 0 3
53601: PUSH
53602: LD_VAR 0 4
53606: PUSH
53607: FOR_IN
53608: IFFALSE 53685
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
53610: LD_VAR 0 3
53614: PPUSH
53615: CALL_OW 312
53619: NOT
53620: PUSH
53621: LD_VAR 0 3
53625: PPUSH
53626: CALL_OW 256
53630: PUSH
53631: LD_INT 250
53633: GREATEREQUAL
53634: AND
53635: IFFALSE 53648
// Connect ( j ) else
53637: LD_VAR 0 3
53641: PPUSH
53642: CALL 76998 0 1
53646: GO 53683
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
53648: LD_VAR 0 3
53652: PPUSH
53653: CALL_OW 256
53657: PUSH
53658: LD_INT 250
53660: LESS
53661: PUSH
53662: LD_VAR 0 3
53666: PPUSH
53667: CALL_OW 312
53671: AND
53672: IFFALSE 53683
// ComUnlink ( j ) ;
53674: LD_VAR 0 3
53678: PPUSH
53679: CALL_OW 136
53683: GO 53607
53685: POP
53686: POP
// end ;
53687: GO 53545
53689: POP
53690: POP
// end ;
53691: LD_VAR 0 1
53695: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
53696: LD_INT 0
53698: PPUSH
53699: PPUSH
53700: PPUSH
53701: PPUSH
53702: PPUSH
// if not mc_bases then
53703: LD_EXP 101
53707: NOT
53708: IFFALSE 53712
// exit ;
53710: GO 54157
// for i = 1 to mc_bases do
53712: LD_ADDR_VAR 0 2
53716: PUSH
53717: DOUBLE
53718: LD_INT 1
53720: DEC
53721: ST_TO_ADDR
53722: LD_EXP 101
53726: PUSH
53727: FOR_TO
53728: IFFALSE 54155
// begin if not mc_produce [ i ] then
53730: LD_EXP 122
53734: PUSH
53735: LD_VAR 0 2
53739: ARRAY
53740: NOT
53741: IFFALSE 53745
// continue ;
53743: GO 53727
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53745: LD_ADDR_VAR 0 5
53749: PUSH
53750: LD_EXP 101
53754: PUSH
53755: LD_VAR 0 2
53759: ARRAY
53760: PPUSH
53761: LD_INT 30
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PPUSH
53771: CALL_OW 72
53775: ST_TO_ADDR
// if not fac then
53776: LD_VAR 0 5
53780: NOT
53781: IFFALSE 53785
// continue ;
53783: GO 53727
// for j in fac do
53785: LD_ADDR_VAR 0 3
53789: PUSH
53790: LD_VAR 0 5
53794: PUSH
53795: FOR_IN
53796: IFFALSE 54151
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
53798: LD_VAR 0 3
53802: PPUSH
53803: CALL_OW 461
53807: PUSH
53808: LD_INT 2
53810: NONEQUAL
53811: PUSH
53812: LD_VAR 0 3
53816: PPUSH
53817: LD_INT 15
53819: PPUSH
53820: CALL 76617 0 2
53824: PUSH
53825: LD_INT 4
53827: ARRAY
53828: OR
53829: IFFALSE 53833
// continue ;
53831: GO 53795
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
53833: LD_VAR 0 3
53837: PPUSH
53838: LD_EXP 122
53842: PUSH
53843: LD_VAR 0 2
53847: ARRAY
53848: PUSH
53849: LD_INT 1
53851: ARRAY
53852: PUSH
53853: LD_INT 1
53855: ARRAY
53856: PPUSH
53857: LD_EXP 122
53861: PUSH
53862: LD_VAR 0 2
53866: ARRAY
53867: PUSH
53868: LD_INT 1
53870: ARRAY
53871: PUSH
53872: LD_INT 2
53874: ARRAY
53875: PPUSH
53876: LD_EXP 122
53880: PUSH
53881: LD_VAR 0 2
53885: ARRAY
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PUSH
53891: LD_INT 3
53893: ARRAY
53894: PPUSH
53895: LD_EXP 122
53899: PUSH
53900: LD_VAR 0 2
53904: ARRAY
53905: PUSH
53906: LD_INT 1
53908: ARRAY
53909: PUSH
53910: LD_INT 4
53912: ARRAY
53913: PPUSH
53914: CALL_OW 448
53918: PUSH
53919: LD_VAR 0 3
53923: PPUSH
53924: LD_EXP 122
53928: PUSH
53929: LD_VAR 0 2
53933: ARRAY
53934: PUSH
53935: LD_INT 1
53937: ARRAY
53938: PUSH
53939: LD_INT 1
53941: ARRAY
53942: PUSH
53943: LD_EXP 122
53947: PUSH
53948: LD_VAR 0 2
53952: ARRAY
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: PUSH
53958: LD_INT 2
53960: ARRAY
53961: PUSH
53962: LD_EXP 122
53966: PUSH
53967: LD_VAR 0 2
53971: ARRAY
53972: PUSH
53973: LD_INT 1
53975: ARRAY
53976: PUSH
53977: LD_INT 3
53979: ARRAY
53980: PUSH
53981: LD_EXP 122
53985: PUSH
53986: LD_VAR 0 2
53990: ARRAY
53991: PUSH
53992: LD_INT 1
53994: ARRAY
53995: PUSH
53996: LD_INT 4
53998: ARRAY
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: PPUSH
54006: CALL 80393 0 2
54010: AND
54011: IFFALSE 54149
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
54013: LD_VAR 0 3
54017: PPUSH
54018: LD_EXP 122
54022: PUSH
54023: LD_VAR 0 2
54027: ARRAY
54028: PUSH
54029: LD_INT 1
54031: ARRAY
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PPUSH
54037: LD_EXP 122
54041: PUSH
54042: LD_VAR 0 2
54046: ARRAY
54047: PUSH
54048: LD_INT 1
54050: ARRAY
54051: PUSH
54052: LD_INT 2
54054: ARRAY
54055: PPUSH
54056: LD_EXP 122
54060: PUSH
54061: LD_VAR 0 2
54065: ARRAY
54066: PUSH
54067: LD_INT 1
54069: ARRAY
54070: PUSH
54071: LD_INT 3
54073: ARRAY
54074: PPUSH
54075: LD_EXP 122
54079: PUSH
54080: LD_VAR 0 2
54084: ARRAY
54085: PUSH
54086: LD_INT 1
54088: ARRAY
54089: PUSH
54090: LD_INT 4
54092: ARRAY
54093: PPUSH
54094: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
54098: LD_ADDR_VAR 0 4
54102: PUSH
54103: LD_EXP 122
54107: PUSH
54108: LD_VAR 0 2
54112: ARRAY
54113: PPUSH
54114: LD_INT 1
54116: PPUSH
54117: CALL_OW 3
54121: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
54122: LD_ADDR_EXP 122
54126: PUSH
54127: LD_EXP 122
54131: PPUSH
54132: LD_VAR 0 2
54136: PPUSH
54137: LD_VAR 0 4
54141: PPUSH
54142: CALL_OW 1
54146: ST_TO_ADDR
// break ;
54147: GO 54151
// end ; end ;
54149: GO 53795
54151: POP
54152: POP
// end ;
54153: GO 53727
54155: POP
54156: POP
// end ;
54157: LD_VAR 0 1
54161: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
54162: LD_INT 0
54164: PPUSH
54165: PPUSH
54166: PPUSH
// if not mc_bases then
54167: LD_EXP 101
54171: NOT
54172: IFFALSE 54176
// exit ;
54174: GO 54265
// for i = 1 to mc_bases do
54176: LD_ADDR_VAR 0 2
54180: PUSH
54181: DOUBLE
54182: LD_INT 1
54184: DEC
54185: ST_TO_ADDR
54186: LD_EXP 101
54190: PUSH
54191: FOR_TO
54192: IFFALSE 54263
// begin if mc_attack [ i ] then
54194: LD_EXP 121
54198: PUSH
54199: LD_VAR 0 2
54203: ARRAY
54204: IFFALSE 54261
// begin tmp := mc_attack [ i ] [ 1 ] ;
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: LD_EXP 121
54215: PUSH
54216: LD_VAR 0 2
54220: ARRAY
54221: PUSH
54222: LD_INT 1
54224: ARRAY
54225: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
54226: LD_ADDR_EXP 121
54230: PUSH
54231: LD_EXP 121
54235: PPUSH
54236: LD_VAR 0 2
54240: PPUSH
54241: EMPTY
54242: PPUSH
54243: CALL_OW 1
54247: ST_TO_ADDR
// Attack ( tmp ) ;
54248: LD_VAR 0 3
54252: PPUSH
54253: CALL 130692 0 1
// exit ;
54257: POP
54258: POP
54259: GO 54265
// end ; end ;
54261: GO 54191
54263: POP
54264: POP
// end ;
54265: LD_VAR 0 1
54269: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
54270: LD_INT 0
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
// if not mc_bases then
54279: LD_EXP 101
54283: NOT
54284: IFFALSE 54288
// exit ;
54286: GO 55145
// for i = 1 to mc_bases do
54288: LD_ADDR_VAR 0 2
54292: PUSH
54293: DOUBLE
54294: LD_INT 1
54296: DEC
54297: ST_TO_ADDR
54298: LD_EXP 101
54302: PUSH
54303: FOR_TO
54304: IFFALSE 55143
// begin if not mc_bases [ i ] then
54306: LD_EXP 101
54310: PUSH
54311: LD_VAR 0 2
54315: ARRAY
54316: NOT
54317: IFFALSE 54321
// continue ;
54319: GO 54303
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
54321: LD_ADDR_VAR 0 7
54325: PUSH
54326: LD_EXP 101
54330: PUSH
54331: LD_VAR 0 2
54335: ARRAY
54336: PUSH
54337: LD_INT 1
54339: ARRAY
54340: PPUSH
54341: CALL 70844 0 1
54345: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
54346: LD_ADDR_EXP 124
54350: PUSH
54351: LD_EXP 124
54355: PPUSH
54356: LD_VAR 0 2
54360: PPUSH
54361: LD_EXP 101
54365: PUSH
54366: LD_VAR 0 2
54370: ARRAY
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: PPUSH
54376: CALL_OW 255
54380: PPUSH
54381: LD_EXP 126
54385: PUSH
54386: LD_VAR 0 2
54390: ARRAY
54391: PPUSH
54392: CALL 70809 0 2
54396: PPUSH
54397: CALL_OW 1
54401: ST_TO_ADDR
// if not mc_scan [ i ] then
54402: LD_EXP 124
54406: PUSH
54407: LD_VAR 0 2
54411: ARRAY
54412: NOT
54413: IFFALSE 54591
// begin mc_is_defending := Replace ( mc_is_defending , i , false ) ;
54415: LD_ADDR_EXP 144
54419: PUSH
54420: LD_EXP 144
54424: PPUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: LD_INT 0
54432: PPUSH
54433: CALL_OW 1
54437: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54438: LD_ADDR_VAR 0 4
54442: PUSH
54443: LD_EXP 101
54447: PUSH
54448: LD_VAR 0 2
54452: ARRAY
54453: PPUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 25
54459: PUSH
54460: LD_INT 5
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 25
54469: PUSH
54470: LD_INT 8
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 25
54479: PUSH
54480: LD_INT 9
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: PPUSH
54493: CALL_OW 72
54497: ST_TO_ADDR
// if not tmp then
54498: LD_VAR 0 4
54502: NOT
54503: IFFALSE 54507
// continue ;
54505: GO 54303
// for j in tmp do
54507: LD_ADDR_VAR 0 3
54511: PUSH
54512: LD_VAR 0 4
54516: PUSH
54517: FOR_IN
54518: IFFALSE 54589
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
54520: LD_VAR 0 3
54524: PPUSH
54525: CALL_OW 310
54529: PPUSH
54530: CALL_OW 266
54534: PUSH
54535: LD_INT 5
54537: EQUAL
54538: PUSH
54539: LD_VAR 0 3
54543: PPUSH
54544: CALL_OW 257
54548: PUSH
54549: LD_INT 1
54551: EQUAL
54552: AND
54553: PUSH
54554: LD_VAR 0 3
54558: PPUSH
54559: CALL_OW 459
54563: NOT
54564: AND
54565: PUSH
54566: LD_VAR 0 7
54570: AND
54571: IFFALSE 54587
// ComChangeProfession ( j , class ) ;
54573: LD_VAR 0 3
54577: PPUSH
54578: LD_VAR 0 7
54582: PPUSH
54583: CALL_OW 123
54587: GO 54517
54589: POP
54590: POP
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] and ( UnitFilter ( mc_bases [ i ] , [ [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) < 4 or UnitFilter ( mc_bases [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) then
54591: LD_EXP 124
54595: PUSH
54596: LD_VAR 0 2
54600: ARRAY
54601: PUSH
54602: LD_EXP 144
54606: PUSH
54607: LD_VAR 0 2
54611: ARRAY
54612: NOT
54613: AND
54614: PUSH
54615: LD_EXP 123
54619: PUSH
54620: LD_VAR 0 2
54624: ARRAY
54625: NOT
54626: AND
54627: PUSH
54628: LD_EXP 101
54632: PUSH
54633: LD_VAR 0 2
54637: ARRAY
54638: PPUSH
54639: LD_INT 50
54641: PUSH
54642: EMPTY
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 30
54650: PUSH
54651: LD_INT 32
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 30
54660: PUSH
54661: LD_INT 33
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 30
54670: PUSH
54671: LD_INT 4
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 30
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PPUSH
54699: CALL_OW 72
54703: PUSH
54704: LD_INT 4
54706: LESS
54707: PUSH
54708: LD_EXP 101
54712: PUSH
54713: LD_VAR 0 2
54717: ARRAY
54718: PPUSH
54719: LD_INT 3
54721: PUSH
54722: LD_INT 24
54724: PUSH
54725: LD_INT 1000
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 30
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 30
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PPUSH
54768: CALL_OW 72
54772: OR
54773: AND
54774: IFFALSE 55025
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
54776: LD_ADDR_EXP 144
54780: PUSH
54781: LD_EXP 144
54785: PPUSH
54786: LD_VAR 0 2
54790: PPUSH
54791: LD_INT 1
54793: PPUSH
54794: CALL_OW 1
54798: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54799: LD_ADDR_VAR 0 4
54803: PUSH
54804: LD_EXP 101
54808: PUSH
54809: LD_VAR 0 2
54813: ARRAY
54814: PPUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 25
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 25
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 25
54840: PUSH
54841: LD_INT 8
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 25
54850: PUSH
54851: LD_INT 9
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PPUSH
54865: CALL_OW 72
54869: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
54870: LD_ADDR_VAR 0 4
54874: PUSH
54875: LD_VAR 0 4
54879: PUSH
54880: LD_VAR 0 4
54884: PPUSH
54885: LD_INT 18
54887: PPUSH
54888: CALL 103961 0 2
54892: DIFF
54893: ST_TO_ADDR
// if not tmp and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
54894: LD_VAR 0 4
54898: NOT
54899: PUSH
54900: LD_EXP 101
54904: PUSH
54905: LD_VAR 0 2
54909: ARRAY
54910: PPUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 30
54916: PUSH
54917: LD_INT 4
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 30
54926: PUSH
54927: LD_INT 5
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: PPUSH
54939: CALL_OW 72
54943: NOT
54944: AND
54945: IFFALSE 55007
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ) ;
54947: LD_ADDR_VAR 0 4
54951: PUSH
54952: LD_EXP 101
54956: PUSH
54957: LD_VAR 0 2
54961: ARRAY
54962: PPUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 25
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 25
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 25
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: PPUSH
55002: CALL_OW 72
55006: ST_TO_ADDR
// BasicDefend ( i , tmp ) ;
55007: LD_VAR 0 2
55011: PPUSH
55012: LD_VAR 0 4
55016: PPUSH
55017: CALL 135401 0 2
// exit ;
55021: POP
55022: POP
55023: GO 55145
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
55025: LD_EXP 124
55029: PUSH
55030: LD_VAR 0 2
55034: ARRAY
55035: PUSH
55036: LD_EXP 144
55040: PUSH
55041: LD_VAR 0 2
55045: ARRAY
55046: NOT
55047: AND
55048: PUSH
55049: LD_EXP 123
55053: PUSH
55054: LD_VAR 0 2
55058: ARRAY
55059: AND
55060: IFFALSE 55141
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
55062: LD_ADDR_EXP 144
55066: PUSH
55067: LD_EXP 144
55071: PPUSH
55072: LD_VAR 0 2
55076: PPUSH
55077: LD_INT 1
55079: PPUSH
55080: CALL_OW 1
55084: ST_TO_ADDR
// tmp := mc_defender [ i ] ;
55085: LD_ADDR_VAR 0 4
55089: PUSH
55090: LD_EXP 123
55094: PUSH
55095: LD_VAR 0 2
55099: ARRAY
55100: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55101: LD_ADDR_EXP 123
55105: PUSH
55106: LD_EXP 123
55110: PPUSH
55111: LD_VAR 0 2
55115: PPUSH
55116: EMPTY
55117: PPUSH
55118: CALL_OW 1
55122: ST_TO_ADDR
// Defend ( i , tmp ) ;
55123: LD_VAR 0 2
55127: PPUSH
55128: LD_VAR 0 4
55132: PPUSH
55133: CALL 135997 0 2
// exit ;
55137: POP
55138: POP
55139: GO 55145
// end ; end ;
55141: GO 54303
55143: POP
55144: POP
// end ;
55145: LD_VAR 0 1
55149: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
55150: LD_INT 0
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
55162: PPUSH
// if not mc_bases then
55163: LD_EXP 101
55167: NOT
55168: IFFALSE 55172
// exit ;
55170: GO 56259
// for i = 1 to mc_bases do
55172: LD_ADDR_VAR 0 2
55176: PUSH
55177: DOUBLE
55178: LD_INT 1
55180: DEC
55181: ST_TO_ADDR
55182: LD_EXP 101
55186: PUSH
55187: FOR_TO
55188: IFFALSE 56257
// begin tmp := mc_lab [ i ] ;
55190: LD_ADDR_VAR 0 6
55194: PUSH
55195: LD_EXP 134
55199: PUSH
55200: LD_VAR 0 2
55204: ARRAY
55205: ST_TO_ADDR
// if not tmp then
55206: LD_VAR 0 6
55210: NOT
55211: IFFALSE 55215
// continue ;
55213: GO 55187
// idle_lab := 0 ;
55215: LD_ADDR_VAR 0 11
55219: PUSH
55220: LD_INT 0
55222: ST_TO_ADDR
// for j in tmp do
55223: LD_ADDR_VAR 0 3
55227: PUSH
55228: LD_VAR 0 6
55232: PUSH
55233: FOR_IN
55234: IFFALSE 56253
// begin researching := false ;
55236: LD_ADDR_VAR 0 10
55240: PUSH
55241: LD_INT 0
55243: ST_TO_ADDR
// side := GetSide ( j ) ;
55244: LD_ADDR_VAR 0 4
55248: PUSH
55249: LD_VAR 0 3
55253: PPUSH
55254: CALL_OW 255
55258: ST_TO_ADDR
// if not mc_tech [ side ] then
55259: LD_EXP 128
55263: PUSH
55264: LD_VAR 0 4
55268: ARRAY
55269: NOT
55270: IFFALSE 55274
// continue ;
55272: GO 55233
// if BuildingStatus ( j ) = bs_idle then
55274: LD_VAR 0 3
55278: PPUSH
55279: CALL_OW 461
55283: PUSH
55284: LD_INT 2
55286: EQUAL
55287: IFFALSE 55475
// begin if idle_lab and UnitsInside ( j ) < 6 then
55289: LD_VAR 0 11
55293: PUSH
55294: LD_VAR 0 3
55298: PPUSH
55299: CALL_OW 313
55303: PUSH
55304: LD_INT 6
55306: LESS
55307: AND
55308: IFFALSE 55379
// begin tmp2 := UnitsInside ( idle_lab ) ;
55310: LD_ADDR_VAR 0 9
55314: PUSH
55315: LD_VAR 0 11
55319: PPUSH
55320: CALL_OW 313
55324: ST_TO_ADDR
// if tmp2 then
55325: LD_VAR 0 9
55329: IFFALSE 55371
// for x in tmp2 do
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: LD_VAR 0 9
55340: PUSH
55341: FOR_IN
55342: IFFALSE 55369
// begin ComExitBuilding ( x ) ;
55344: LD_VAR 0 7
55348: PPUSH
55349: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
55353: LD_VAR 0 7
55357: PPUSH
55358: LD_VAR 0 3
55362: PPUSH
55363: CALL_OW 180
// end ;
55367: GO 55341
55369: POP
55370: POP
// idle_lab := 0 ;
55371: LD_ADDR_VAR 0 11
55375: PUSH
55376: LD_INT 0
55378: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
55379: LD_ADDR_VAR 0 5
55383: PUSH
55384: LD_EXP 128
55388: PUSH
55389: LD_VAR 0 4
55393: ARRAY
55394: PUSH
55395: FOR_IN
55396: IFFALSE 55456
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
55398: LD_VAR 0 3
55402: PPUSH
55403: LD_VAR 0 5
55407: PPUSH
55408: CALL_OW 430
55412: PUSH
55413: LD_VAR 0 4
55417: PPUSH
55418: LD_VAR 0 5
55422: PPUSH
55423: CALL 69914 0 2
55427: AND
55428: IFFALSE 55454
// begin researching := true ;
55430: LD_ADDR_VAR 0 10
55434: PUSH
55435: LD_INT 1
55437: ST_TO_ADDR
// ComResearch ( j , t ) ;
55438: LD_VAR 0 3
55442: PPUSH
55443: LD_VAR 0 5
55447: PPUSH
55448: CALL_OW 124
// break ;
55452: GO 55456
// end ;
55454: GO 55395
55456: POP
55457: POP
// if not researching then
55458: LD_VAR 0 10
55462: NOT
55463: IFFALSE 55475
// idle_lab := j ;
55465: LD_ADDR_VAR 0 11
55469: PUSH
55470: LD_VAR 0 3
55474: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
55475: LD_VAR 0 3
55479: PPUSH
55480: CALL_OW 461
55484: PUSH
55485: LD_INT 10
55487: EQUAL
55488: IFFALSE 56076
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
55490: LD_EXP 130
55494: PUSH
55495: LD_VAR 0 2
55499: ARRAY
55500: NOT
55501: PUSH
55502: LD_EXP 131
55506: PUSH
55507: LD_VAR 0 2
55511: ARRAY
55512: NOT
55513: AND
55514: PUSH
55515: LD_EXP 128
55519: PUSH
55520: LD_VAR 0 4
55524: ARRAY
55525: PUSH
55526: LD_INT 1
55528: GREATER
55529: AND
55530: IFFALSE 55661
// begin ComCancel ( j ) ;
55532: LD_VAR 0 3
55536: PPUSH
55537: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
55541: LD_ADDR_EXP 128
55545: PUSH
55546: LD_EXP 128
55550: PPUSH
55551: LD_VAR 0 4
55555: PPUSH
55556: LD_EXP 128
55560: PUSH
55561: LD_VAR 0 4
55565: ARRAY
55566: PPUSH
55567: LD_EXP 128
55571: PUSH
55572: LD_VAR 0 4
55576: ARRAY
55577: PUSH
55578: LD_INT 1
55580: MINUS
55581: PPUSH
55582: LD_EXP 128
55586: PUSH
55587: LD_VAR 0 4
55591: ARRAY
55592: PPUSH
55593: LD_INT 0
55595: PPUSH
55596: CALL 73438 0 4
55600: PPUSH
55601: CALL_OW 1
55605: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
55606: LD_ADDR_EXP 128
55610: PUSH
55611: LD_EXP 128
55615: PPUSH
55616: LD_VAR 0 4
55620: PPUSH
55621: LD_EXP 128
55625: PUSH
55626: LD_VAR 0 4
55630: ARRAY
55631: PPUSH
55632: LD_EXP 128
55636: PUSH
55637: LD_VAR 0 4
55641: ARRAY
55642: PPUSH
55643: LD_INT 1
55645: PPUSH
55646: LD_INT 0
55648: PPUSH
55649: CALL 73438 0 4
55653: PPUSH
55654: CALL_OW 1
55658: ST_TO_ADDR
// continue ;
55659: GO 55233
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
55661: LD_EXP 130
55665: PUSH
55666: LD_VAR 0 2
55670: ARRAY
55671: PUSH
55672: LD_EXP 131
55676: PUSH
55677: LD_VAR 0 2
55681: ARRAY
55682: NOT
55683: AND
55684: IFFALSE 55811
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
55686: LD_ADDR_EXP 131
55690: PUSH
55691: LD_EXP 131
55695: PPUSH
55696: LD_VAR 0 2
55700: PUSH
55701: LD_EXP 131
55705: PUSH
55706: LD_VAR 0 2
55710: ARRAY
55711: PUSH
55712: LD_INT 1
55714: PLUS
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PPUSH
55720: LD_EXP 130
55724: PUSH
55725: LD_VAR 0 2
55729: ARRAY
55730: PUSH
55731: LD_INT 1
55733: ARRAY
55734: PPUSH
55735: CALL 74020 0 3
55739: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
55740: LD_EXP 130
55744: PUSH
55745: LD_VAR 0 2
55749: ARRAY
55750: PUSH
55751: LD_INT 1
55753: ARRAY
55754: PPUSH
55755: LD_INT 112
55757: PPUSH
55758: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
55762: LD_ADDR_VAR 0 9
55766: PUSH
55767: LD_EXP 130
55771: PUSH
55772: LD_VAR 0 2
55776: ARRAY
55777: PPUSH
55778: LD_INT 1
55780: PPUSH
55781: CALL_OW 3
55785: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
55786: LD_ADDR_EXP 130
55790: PUSH
55791: LD_EXP 130
55795: PPUSH
55796: LD_VAR 0 2
55800: PPUSH
55801: LD_VAR 0 9
55805: PPUSH
55806: CALL_OW 1
55810: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
55811: LD_EXP 130
55815: PUSH
55816: LD_VAR 0 2
55820: ARRAY
55821: PUSH
55822: LD_EXP 131
55826: PUSH
55827: LD_VAR 0 2
55831: ARRAY
55832: AND
55833: PUSH
55834: LD_EXP 131
55838: PUSH
55839: LD_VAR 0 2
55843: ARRAY
55844: PUSH
55845: LD_INT 1
55847: ARRAY
55848: PPUSH
55849: CALL_OW 310
55853: NOT
55854: AND
55855: PUSH
55856: LD_VAR 0 3
55860: PPUSH
55861: CALL_OW 313
55865: PUSH
55866: LD_INT 6
55868: EQUAL
55869: AND
55870: IFFALSE 55926
// begin tmp2 := UnitsInside ( j ) ;
55872: LD_ADDR_VAR 0 9
55876: PUSH
55877: LD_VAR 0 3
55881: PPUSH
55882: CALL_OW 313
55886: ST_TO_ADDR
// if tmp2 = 6 then
55887: LD_VAR 0 9
55891: PUSH
55892: LD_INT 6
55894: EQUAL
55895: IFFALSE 55926
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
55897: LD_VAR 0 9
55901: PUSH
55902: LD_INT 1
55904: ARRAY
55905: PPUSH
55906: LD_INT 112
55908: PPUSH
55909: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
55913: LD_VAR 0 9
55917: PUSH
55918: LD_INT 1
55920: ARRAY
55921: PPUSH
55922: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
55926: LD_EXP 131
55930: PUSH
55931: LD_VAR 0 2
55935: ARRAY
55936: PUSH
55937: LD_EXP 131
55941: PUSH
55942: LD_VAR 0 2
55946: ARRAY
55947: PUSH
55948: LD_INT 1
55950: ARRAY
55951: PPUSH
55952: CALL_OW 314
55956: NOT
55957: AND
55958: PUSH
55959: LD_EXP 131
55963: PUSH
55964: LD_VAR 0 2
55968: ARRAY
55969: PUSH
55970: LD_INT 1
55972: ARRAY
55973: PPUSH
55974: CALL_OW 310
55978: NOT
55979: AND
55980: IFFALSE 56006
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
55982: LD_EXP 131
55986: PUSH
55987: LD_VAR 0 2
55991: ARRAY
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PPUSH
55997: LD_VAR 0 3
56001: PPUSH
56002: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
56006: LD_EXP 131
56010: PUSH
56011: LD_VAR 0 2
56015: ARRAY
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PPUSH
56021: CALL_OW 310
56025: PUSH
56026: LD_EXP 131
56030: PUSH
56031: LD_VAR 0 2
56035: ARRAY
56036: PUSH
56037: LD_INT 1
56039: ARRAY
56040: PPUSH
56041: CALL_OW 310
56045: PPUSH
56046: CALL_OW 461
56050: PUSH
56051: LD_INT 3
56053: NONEQUAL
56054: AND
56055: IFFALSE 56076
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
56057: LD_EXP 131
56061: PUSH
56062: LD_VAR 0 2
56066: ARRAY
56067: PUSH
56068: LD_INT 1
56070: ARRAY
56071: PPUSH
56072: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
56076: LD_VAR 0 3
56080: PPUSH
56081: CALL_OW 461
56085: PUSH
56086: LD_INT 6
56088: EQUAL
56089: PUSH
56090: LD_VAR 0 6
56094: PUSH
56095: LD_INT 1
56097: GREATER
56098: AND
56099: IFFALSE 56251
// begin sci := [ ] ;
56101: LD_ADDR_VAR 0 8
56105: PUSH
56106: EMPTY
56107: ST_TO_ADDR
// for x in ( tmp diff j ) do
56108: LD_ADDR_VAR 0 7
56112: PUSH
56113: LD_VAR 0 6
56117: PUSH
56118: LD_VAR 0 3
56122: DIFF
56123: PUSH
56124: FOR_IN
56125: IFFALSE 56177
// begin if sci = 6 then
56127: LD_VAR 0 8
56131: PUSH
56132: LD_INT 6
56134: EQUAL
56135: IFFALSE 56139
// break ;
56137: GO 56177
// if BuildingStatus ( x ) = bs_idle then
56139: LD_VAR 0 7
56143: PPUSH
56144: CALL_OW 461
56148: PUSH
56149: LD_INT 2
56151: EQUAL
56152: IFFALSE 56175
// sci := sci ^ UnitsInside ( x ) ;
56154: LD_ADDR_VAR 0 8
56158: PUSH
56159: LD_VAR 0 8
56163: PUSH
56164: LD_VAR 0 7
56168: PPUSH
56169: CALL_OW 313
56173: ADD
56174: ST_TO_ADDR
// end ;
56175: GO 56124
56177: POP
56178: POP
// if not sci then
56179: LD_VAR 0 8
56183: NOT
56184: IFFALSE 56188
// continue ;
56186: GO 55233
// for x in sci do
56188: LD_ADDR_VAR 0 7
56192: PUSH
56193: LD_VAR 0 8
56197: PUSH
56198: FOR_IN
56199: IFFALSE 56249
// if IsInUnit ( x ) and not HasTask ( x ) then
56201: LD_VAR 0 7
56205: PPUSH
56206: CALL_OW 310
56210: PUSH
56211: LD_VAR 0 7
56215: PPUSH
56216: CALL_OW 314
56220: NOT
56221: AND
56222: IFFALSE 56247
// begin ComExitBuilding ( x ) ;
56224: LD_VAR 0 7
56228: PPUSH
56229: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
56233: LD_VAR 0 7
56237: PPUSH
56238: LD_VAR 0 3
56242: PPUSH
56243: CALL_OW 180
// end ;
56247: GO 56198
56249: POP
56250: POP
// end ; end ;
56251: GO 55233
56253: POP
56254: POP
// end ;
56255: GO 55187
56257: POP
56258: POP
// end ;
56259: LD_VAR 0 1
56263: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
56264: LD_INT 0
56266: PPUSH
56267: PPUSH
// if not mc_bases then
56268: LD_EXP 101
56272: NOT
56273: IFFALSE 56277
// exit ;
56275: GO 56358
// for i = 1 to mc_bases do
56277: LD_ADDR_VAR 0 2
56281: PUSH
56282: DOUBLE
56283: LD_INT 1
56285: DEC
56286: ST_TO_ADDR
56287: LD_EXP 101
56291: PUSH
56292: FOR_TO
56293: IFFALSE 56356
// if mc_mines [ i ] and mc_miners [ i ] then
56295: LD_EXP 114
56299: PUSH
56300: LD_VAR 0 2
56304: ARRAY
56305: PUSH
56306: LD_EXP 115
56310: PUSH
56311: LD_VAR 0 2
56315: ARRAY
56316: AND
56317: IFFALSE 56354
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
56319: LD_EXP 115
56323: PUSH
56324: LD_VAR 0 2
56328: ARRAY
56329: PUSH
56330: LD_INT 1
56332: ARRAY
56333: PPUSH
56334: CALL_OW 255
56338: PPUSH
56339: LD_EXP 114
56343: PUSH
56344: LD_VAR 0 2
56348: ARRAY
56349: PPUSH
56350: CALL 70997 0 2
56354: GO 56292
56356: POP
56357: POP
// end ;
56358: LD_VAR 0 1
56362: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
56363: LD_INT 0
56365: PPUSH
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
56370: PPUSH
56371: PPUSH
56372: PPUSH
// if not mc_bases or not mc_parking then
56373: LD_EXP 101
56377: NOT
56378: PUSH
56379: LD_EXP 125
56383: NOT
56384: OR
56385: IFFALSE 56389
// exit ;
56387: GO 57127
// for i = 1 to mc_bases do
56389: LD_ADDR_VAR 0 2
56393: PUSH
56394: DOUBLE
56395: LD_INT 1
56397: DEC
56398: ST_TO_ADDR
56399: LD_EXP 101
56403: PUSH
56404: FOR_TO
56405: IFFALSE 57125
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
56407: LD_EXP 101
56411: PUSH
56412: LD_VAR 0 2
56416: ARRAY
56417: NOT
56418: PUSH
56419: LD_EXP 125
56423: PUSH
56424: LD_VAR 0 2
56428: ARRAY
56429: NOT
56430: OR
56431: IFFALSE 56435
// continue ;
56433: GO 56404
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
56435: LD_ADDR_VAR 0 5
56439: PUSH
56440: LD_EXP 101
56444: PUSH
56445: LD_VAR 0 2
56449: ARRAY
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PPUSH
56455: CALL_OW 255
56459: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56460: LD_ADDR_VAR 0 6
56464: PUSH
56465: LD_EXP 101
56469: PUSH
56470: LD_VAR 0 2
56474: ARRAY
56475: PPUSH
56476: LD_INT 30
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PPUSH
56486: CALL_OW 72
56490: ST_TO_ADDR
// if not fac then
56491: LD_VAR 0 6
56495: NOT
56496: IFFALSE 56547
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56498: LD_ADDR_VAR 0 6
56502: PUSH
56503: LD_EXP 101
56507: PUSH
56508: LD_VAR 0 2
56512: ARRAY
56513: PPUSH
56514: LD_INT 2
56516: PUSH
56517: LD_INT 30
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 30
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: PPUSH
56542: CALL_OW 72
56546: ST_TO_ADDR
// if not fac then
56547: LD_VAR 0 6
56551: NOT
56552: IFFALSE 56556
// continue ;
56554: GO 56404
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
56556: LD_ADDR_VAR 0 7
56560: PUSH
56561: LD_EXP 125
56565: PUSH
56566: LD_VAR 0 2
56570: ARRAY
56571: PPUSH
56572: LD_INT 22
56574: PUSH
56575: LD_VAR 0 5
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 21
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: LD_INT 60
56599: PUSH
56600: EMPTY
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 24
56612: PUSH
56613: LD_INT 1000
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 70
56634: ST_TO_ADDR
// for j in fac do
56635: LD_ADDR_VAR 0 3
56639: PUSH
56640: LD_VAR 0 6
56644: PUSH
56645: FOR_IN
56646: IFFALSE 56741
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
56648: LD_ADDR_VAR 0 7
56652: PUSH
56653: LD_VAR 0 7
56657: PUSH
56658: LD_INT 22
56660: PUSH
56661: LD_VAR 0 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 91
56672: PUSH
56673: LD_VAR 0 3
56677: PUSH
56678: LD_INT 15
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 21
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 60
56701: PUSH
56702: EMPTY
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 24
56714: PUSH
56715: LD_INT 1000
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: PPUSH
56733: CALL_OW 69
56737: UNION
56738: ST_TO_ADDR
56739: GO 56645
56741: POP
56742: POP
// if not vehs then
56743: LD_VAR 0 7
56747: NOT
56748: IFFALSE 56774
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56750: LD_ADDR_EXP 113
56754: PUSH
56755: LD_EXP 113
56759: PPUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: EMPTY
56766: PPUSH
56767: CALL_OW 1
56771: ST_TO_ADDR
// continue ;
56772: GO 56404
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56774: LD_ADDR_VAR 0 8
56778: PUSH
56779: LD_EXP 101
56783: PUSH
56784: LD_VAR 0 2
56788: ARRAY
56789: PPUSH
56790: LD_INT 30
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PPUSH
56800: CALL_OW 72
56804: ST_TO_ADDR
// if tmp then
56805: LD_VAR 0 8
56809: IFFALSE 56912
// begin for j in tmp do
56811: LD_ADDR_VAR 0 3
56815: PUSH
56816: LD_VAR 0 8
56820: PUSH
56821: FOR_IN
56822: IFFALSE 56910
// for k in UnitsInside ( j ) do
56824: LD_ADDR_VAR 0 4
56828: PUSH
56829: LD_VAR 0 3
56833: PPUSH
56834: CALL_OW 313
56838: PUSH
56839: FOR_IN
56840: IFFALSE 56906
// if k then
56842: LD_VAR 0 4
56846: IFFALSE 56904
// if not k in mc_repair_vehicle [ i ] then
56848: LD_VAR 0 4
56852: PUSH
56853: LD_EXP 113
56857: PUSH
56858: LD_VAR 0 2
56862: ARRAY
56863: IN
56864: NOT
56865: IFFALSE 56904
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
56867: LD_ADDR_EXP 113
56871: PUSH
56872: LD_EXP 113
56876: PPUSH
56877: LD_VAR 0 2
56881: PPUSH
56882: LD_EXP 113
56886: PUSH
56887: LD_VAR 0 2
56891: ARRAY
56892: PUSH
56893: LD_VAR 0 4
56897: UNION
56898: PPUSH
56899: CALL_OW 1
56903: ST_TO_ADDR
56904: GO 56839
56906: POP
56907: POP
56908: GO 56821
56910: POP
56911: POP
// end ; if not mc_repair_vehicle [ i ] then
56912: LD_EXP 113
56916: PUSH
56917: LD_VAR 0 2
56921: ARRAY
56922: NOT
56923: IFFALSE 56927
// continue ;
56925: GO 56404
// for j in mc_repair_vehicle [ i ] do
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_EXP 113
56936: PUSH
56937: LD_VAR 0 2
56941: ARRAY
56942: PUSH
56943: FOR_IN
56944: IFFALSE 57121
// begin if GetClass ( j ) <> 3 then
56946: LD_VAR 0 3
56950: PPUSH
56951: CALL_OW 257
56955: PUSH
56956: LD_INT 3
56958: NONEQUAL
56959: IFFALSE 57000
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
56961: LD_ADDR_EXP 113
56965: PUSH
56966: LD_EXP 113
56970: PPUSH
56971: LD_VAR 0 2
56975: PPUSH
56976: LD_EXP 113
56980: PUSH
56981: LD_VAR 0 2
56985: ARRAY
56986: PUSH
56987: LD_VAR 0 3
56991: DIFF
56992: PPUSH
56993: CALL_OW 1
56997: ST_TO_ADDR
// continue ;
56998: GO 56943
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
57000: LD_VAR 0 3
57004: PPUSH
57005: CALL_OW 311
57009: NOT
57010: PUSH
57011: LD_VAR 0 3
57015: PUSH
57016: LD_EXP 104
57020: PUSH
57021: LD_VAR 0 2
57025: ARRAY
57026: PUSH
57027: LD_INT 1
57029: ARRAY
57030: IN
57031: NOT
57032: AND
57033: PUSH
57034: LD_VAR 0 3
57038: PUSH
57039: LD_EXP 104
57043: PUSH
57044: LD_VAR 0 2
57048: ARRAY
57049: PUSH
57050: LD_INT 2
57052: ARRAY
57053: IN
57054: NOT
57055: AND
57056: IFFALSE 57119
// begin if IsInUnit ( j ) then
57058: LD_VAR 0 3
57062: PPUSH
57063: CALL_OW 310
57067: IFFALSE 57080
// ComExitBuilding ( j ) else
57069: LD_VAR 0 3
57073: PPUSH
57074: CALL_OW 122
57078: GO 57119
// if not WantToRepairVehicle ( j , vehs [ 1 ] ) then
57080: LD_VAR 0 3
57084: PPUSH
57085: LD_VAR 0 7
57089: PUSH
57090: LD_INT 1
57092: ARRAY
57093: PPUSH
57094: CALL 108444 0 2
57098: NOT
57099: IFFALSE 57119
// ComRepairVehicle ( j , vehs [ 1 ] ) ;
57101: LD_VAR 0 3
57105: PPUSH
57106: LD_VAR 0 7
57110: PUSH
57111: LD_INT 1
57113: ARRAY
57114: PPUSH
57115: CALL_OW 129
// end ; end ;
57119: GO 56943
57121: POP
57122: POP
// end ;
57123: GO 56404
57125: POP
57126: POP
// end ;
57127: LD_VAR 0 1
57131: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
57132: LD_INT 0
57134: PPUSH
57135: PPUSH
57136: PPUSH
57137: PPUSH
57138: PPUSH
57139: PPUSH
57140: PPUSH
57141: PPUSH
57142: PPUSH
57143: PPUSH
57144: PPUSH
// if not mc_bases then
57145: LD_EXP 101
57149: NOT
57150: IFFALSE 57154
// exit ;
57152: GO 57956
// for i = 1 to mc_bases do
57154: LD_ADDR_VAR 0 2
57158: PUSH
57159: DOUBLE
57160: LD_INT 1
57162: DEC
57163: ST_TO_ADDR
57164: LD_EXP 101
57168: PUSH
57169: FOR_TO
57170: IFFALSE 57954
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
57172: LD_EXP 129
57176: PUSH
57177: LD_VAR 0 2
57181: ARRAY
57182: NOT
57183: PUSH
57184: LD_EXP 104
57188: PUSH
57189: LD_VAR 0 2
57193: ARRAY
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: OR
57199: PUSH
57200: LD_EXP 104
57204: PUSH
57205: LD_VAR 0 2
57209: ARRAY
57210: PUSH
57211: LD_INT 2
57213: ARRAY
57214: OR
57215: PUSH
57216: LD_EXP 127
57220: PUSH
57221: LD_VAR 0 2
57225: ARRAY
57226: PPUSH
57227: LD_INT 1
57229: PPUSH
57230: CALL_OW 325
57234: NOT
57235: OR
57236: PUSH
57237: LD_EXP 124
57241: PUSH
57242: LD_VAR 0 2
57246: ARRAY
57247: OR
57248: IFFALSE 57252
// continue ;
57250: GO 57169
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
57252: LD_ADDR_VAR 0 8
57256: PUSH
57257: LD_EXP 101
57261: PUSH
57262: LD_VAR 0 2
57266: ARRAY
57267: PPUSH
57268: LD_INT 25
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 50
57280: PUSH
57281: EMPTY
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: LD_INT 60
57289: PUSH
57290: EMPTY
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: PPUSH
57302: CALL_OW 72
57306: PUSH
57307: LD_EXP 105
57311: PUSH
57312: LD_VAR 0 2
57316: ARRAY
57317: DIFF
57318: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57319: LD_ADDR_VAR 0 9
57323: PUSH
57324: LD_EXP 101
57328: PUSH
57329: LD_VAR 0 2
57333: ARRAY
57334: PPUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 30
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 30
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: PPUSH
57363: CALL_OW 72
57367: ST_TO_ADDR
// if not tmp or not dep then
57368: LD_VAR 0 8
57372: NOT
57373: PUSH
57374: LD_VAR 0 9
57378: NOT
57379: OR
57380: IFFALSE 57384
// continue ;
57382: GO 57169
// side := GetSide ( tmp [ 1 ] ) ;
57384: LD_ADDR_VAR 0 11
57388: PUSH
57389: LD_VAR 0 8
57393: PUSH
57394: LD_INT 1
57396: ARRAY
57397: PPUSH
57398: CALL_OW 255
57402: ST_TO_ADDR
// dep := dep [ 1 ] ;
57403: LD_ADDR_VAR 0 9
57407: PUSH
57408: LD_VAR 0 9
57412: PUSH
57413: LD_INT 1
57415: ARRAY
57416: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
57417: LD_ADDR_VAR 0 7
57421: PUSH
57422: LD_EXP 129
57426: PUSH
57427: LD_VAR 0 2
57431: ARRAY
57432: PPUSH
57433: LD_INT 22
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 25
57445: PUSH
57446: LD_INT 12
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PPUSH
57457: CALL_OW 70
57461: PUSH
57462: LD_INT 22
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 25
57474: PUSH
57475: LD_INT 12
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 91
57484: PUSH
57485: LD_VAR 0 9
57489: PUSH
57490: LD_INT 20
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: PPUSH
57503: CALL_OW 69
57507: UNION
57508: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
57509: LD_ADDR_VAR 0 10
57513: PUSH
57514: LD_EXP 129
57518: PUSH
57519: LD_VAR 0 2
57523: ARRAY
57524: PPUSH
57525: LD_INT 81
57527: PUSH
57528: LD_VAR 0 11
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PPUSH
57537: CALL_OW 70
57541: ST_TO_ADDR
// if not apes or danger_at_area then
57542: LD_VAR 0 7
57546: NOT
57547: PUSH
57548: LD_VAR 0 10
57552: OR
57553: IFFALSE 57603
// begin if mc_taming [ i ] then
57555: LD_EXP 132
57559: PUSH
57560: LD_VAR 0 2
57564: ARRAY
57565: IFFALSE 57601
// begin MC_Reset ( i , 121 ) ;
57567: LD_VAR 0 2
57571: PPUSH
57572: LD_INT 121
57574: PPUSH
57575: CALL 42519 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57579: LD_ADDR_EXP 132
57583: PUSH
57584: LD_EXP 132
57588: PPUSH
57589: LD_VAR 0 2
57593: PPUSH
57594: EMPTY
57595: PPUSH
57596: CALL_OW 1
57600: ST_TO_ADDR
// end ; continue ;
57601: GO 57169
// end ; for j in tmp do
57603: LD_ADDR_VAR 0 3
57607: PUSH
57608: LD_VAR 0 8
57612: PUSH
57613: FOR_IN
57614: IFFALSE 57950
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
57616: LD_VAR 0 3
57620: PUSH
57621: LD_EXP 132
57625: PUSH
57626: LD_VAR 0 2
57630: ARRAY
57631: IN
57632: NOT
57633: PUSH
57634: LD_EXP 132
57638: PUSH
57639: LD_VAR 0 2
57643: ARRAY
57644: PUSH
57645: LD_INT 3
57647: LESS
57648: AND
57649: IFFALSE 57707
// begin SetTag ( j , 121 ) ;
57651: LD_VAR 0 3
57655: PPUSH
57656: LD_INT 121
57658: PPUSH
57659: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
57663: LD_ADDR_EXP 132
57667: PUSH
57668: LD_EXP 132
57672: PPUSH
57673: LD_VAR 0 2
57677: PUSH
57678: LD_EXP 132
57682: PUSH
57683: LD_VAR 0 2
57687: ARRAY
57688: PUSH
57689: LD_INT 1
57691: PLUS
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: CALL 74020 0 3
57706: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
57707: LD_VAR 0 3
57711: PUSH
57712: LD_EXP 132
57716: PUSH
57717: LD_VAR 0 2
57721: ARRAY
57722: IN
57723: IFFALSE 57948
// begin if GetClass ( j ) <> 4 then
57725: LD_VAR 0 3
57729: PPUSH
57730: CALL_OW 257
57734: PUSH
57735: LD_INT 4
57737: NONEQUAL
57738: IFFALSE 57791
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
57740: LD_ADDR_EXP 132
57744: PUSH
57745: LD_EXP 132
57749: PPUSH
57750: LD_VAR 0 2
57754: PPUSH
57755: LD_EXP 132
57759: PUSH
57760: LD_VAR 0 2
57764: ARRAY
57765: PUSH
57766: LD_VAR 0 3
57770: DIFF
57771: PPUSH
57772: CALL_OW 1
57776: ST_TO_ADDR
// SetTag ( j , 0 ) ;
57777: LD_VAR 0 3
57781: PPUSH
57782: LD_INT 0
57784: PPUSH
57785: CALL_OW 109
// continue ;
57789: GO 57613
// end ; if IsInUnit ( j ) then
57791: LD_VAR 0 3
57795: PPUSH
57796: CALL_OW 310
57800: IFFALSE 57811
// ComExitBuilding ( j ) ;
57802: LD_VAR 0 3
57806: PPUSH
57807: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
57811: LD_ADDR_VAR 0 6
57815: PUSH
57816: LD_VAR 0 7
57820: PPUSH
57821: LD_VAR 0 3
57825: PPUSH
57826: CALL_OW 74
57830: ST_TO_ADDR
// if not ape then
57831: LD_VAR 0 6
57835: NOT
57836: IFFALSE 57840
// break ;
57838: GO 57950
// x := GetX ( ape ) ;
57840: LD_ADDR_VAR 0 4
57844: PUSH
57845: LD_VAR 0 6
57849: PPUSH
57850: CALL_OW 250
57854: ST_TO_ADDR
// y := GetY ( ape ) ;
57855: LD_ADDR_VAR 0 5
57859: PUSH
57860: LD_VAR 0 6
57864: PPUSH
57865: CALL_OW 251
57869: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57870: LD_VAR 0 4
57874: PPUSH
57875: LD_VAR 0 5
57879: PPUSH
57880: CALL_OW 488
57884: NOT
57885: PUSH
57886: LD_VAR 0 11
57890: PPUSH
57891: LD_VAR 0 4
57895: PPUSH
57896: LD_VAR 0 5
57900: PPUSH
57901: LD_INT 20
57903: PPUSH
57904: CALL 74916 0 4
57908: PUSH
57909: LD_INT 4
57911: ARRAY
57912: OR
57913: IFFALSE 57917
// break ;
57915: GO 57950
// if not HasTask ( j ) then
57917: LD_VAR 0 3
57921: PPUSH
57922: CALL_OW 314
57926: NOT
57927: IFFALSE 57948
// ComTameXY ( j , x , y ) ;
57929: LD_VAR 0 3
57933: PPUSH
57934: LD_VAR 0 4
57938: PPUSH
57939: LD_VAR 0 5
57943: PPUSH
57944: CALL_OW 131
// end ; end ;
57948: GO 57613
57950: POP
57951: POP
// end ;
57952: GO 57169
57954: POP
57955: POP
// end ;
57956: LD_VAR 0 1
57960: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
57961: LD_INT 0
57963: PPUSH
57964: PPUSH
57965: PPUSH
57966: PPUSH
57967: PPUSH
57968: PPUSH
57969: PPUSH
57970: PPUSH
// if not mc_bases then
57971: LD_EXP 101
57975: NOT
57976: IFFALSE 57980
// exit ;
57978: GO 58606
// for i = 1 to mc_bases do
57980: LD_ADDR_VAR 0 2
57984: PUSH
57985: DOUBLE
57986: LD_INT 1
57988: DEC
57989: ST_TO_ADDR
57990: LD_EXP 101
57994: PUSH
57995: FOR_TO
57996: IFFALSE 58604
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
57998: LD_EXP 130
58002: PUSH
58003: LD_VAR 0 2
58007: ARRAY
58008: NOT
58009: PUSH
58010: LD_EXP 130
58014: PUSH
58015: LD_VAR 0 2
58019: ARRAY
58020: PPUSH
58021: LD_INT 25
58023: PUSH
58024: LD_INT 12
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PPUSH
58031: CALL_OW 72
58035: NOT
58036: OR
58037: IFFALSE 58041
// continue ;
58039: GO 57995
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
58041: LD_ADDR_VAR 0 5
58045: PUSH
58046: LD_EXP 130
58050: PUSH
58051: LD_VAR 0 2
58055: ARRAY
58056: PUSH
58057: LD_INT 1
58059: ARRAY
58060: PPUSH
58061: CALL_OW 255
58065: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
58066: LD_VAR 0 5
58070: PPUSH
58071: LD_INT 2
58073: PPUSH
58074: CALL_OW 325
58078: IFFALSE 58331
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58080: LD_ADDR_VAR 0 4
58084: PUSH
58085: LD_EXP 130
58089: PUSH
58090: LD_VAR 0 2
58094: ARRAY
58095: PPUSH
58096: LD_INT 25
58098: PUSH
58099: LD_INT 16
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PPUSH
58106: CALL_OW 72
58110: ST_TO_ADDR
// if tmp < 6 then
58111: LD_VAR 0 4
58115: PUSH
58116: LD_INT 6
58118: LESS
58119: IFFALSE 58331
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58121: LD_ADDR_VAR 0 6
58125: PUSH
58126: LD_EXP 101
58130: PUSH
58131: LD_VAR 0 2
58135: ARRAY
58136: PPUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 30
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 30
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: PPUSH
58165: CALL_OW 72
58169: ST_TO_ADDR
// if depot then
58170: LD_VAR 0 6
58174: IFFALSE 58331
// begin selected := 0 ;
58176: LD_ADDR_VAR 0 7
58180: PUSH
58181: LD_INT 0
58183: ST_TO_ADDR
// for j in depot do
58184: LD_ADDR_VAR 0 3
58188: PUSH
58189: LD_VAR 0 6
58193: PUSH
58194: FOR_IN
58195: IFFALSE 58226
// begin if UnitsInside ( j ) < 6 then
58197: LD_VAR 0 3
58201: PPUSH
58202: CALL_OW 313
58206: PUSH
58207: LD_INT 6
58209: LESS
58210: IFFALSE 58224
// begin selected := j ;
58212: LD_ADDR_VAR 0 7
58216: PUSH
58217: LD_VAR 0 3
58221: ST_TO_ADDR
// break ;
58222: GO 58226
// end ; end ;
58224: GO 58194
58226: POP
58227: POP
// if selected then
58228: LD_VAR 0 7
58232: IFFALSE 58331
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58234: LD_ADDR_VAR 0 3
58238: PUSH
58239: LD_EXP 130
58243: PUSH
58244: LD_VAR 0 2
58248: ARRAY
58249: PPUSH
58250: LD_INT 25
58252: PUSH
58253: LD_INT 12
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PPUSH
58260: CALL_OW 72
58264: PUSH
58265: FOR_IN
58266: IFFALSE 58329
// if not HasTask ( j ) then
58268: LD_VAR 0 3
58272: PPUSH
58273: CALL_OW 314
58277: NOT
58278: IFFALSE 58327
// begin if not IsInUnit ( j ) then
58280: LD_VAR 0 3
58284: PPUSH
58285: CALL_OW 310
58289: NOT
58290: IFFALSE 58306
// ComEnterUnit ( j , selected ) ;
58292: LD_VAR 0 3
58296: PPUSH
58297: LD_VAR 0 7
58301: PPUSH
58302: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
58306: LD_VAR 0 3
58310: PPUSH
58311: LD_INT 16
58313: PPUSH
58314: CALL_OW 183
// AddComExitBuilding ( j ) ;
58318: LD_VAR 0 3
58322: PPUSH
58323: CALL_OW 182
// end ;
58327: GO 58265
58329: POP
58330: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
58331: LD_VAR 0 5
58335: PPUSH
58336: LD_INT 11
58338: PPUSH
58339: CALL_OW 325
58343: IFFALSE 58602
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58345: LD_ADDR_VAR 0 4
58349: PUSH
58350: LD_EXP 130
58354: PUSH
58355: LD_VAR 0 2
58359: ARRAY
58360: PPUSH
58361: LD_INT 25
58363: PUSH
58364: LD_INT 16
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PPUSH
58371: CALL_OW 72
58375: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
58376: LD_VAR 0 4
58380: PUSH
58381: LD_INT 6
58383: GREATEREQUAL
58384: PUSH
58385: LD_VAR 0 5
58389: PPUSH
58390: LD_INT 2
58392: PPUSH
58393: CALL_OW 325
58397: NOT
58398: OR
58399: IFFALSE 58602
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58401: LD_ADDR_VAR 0 8
58405: PUSH
58406: LD_EXP 101
58410: PUSH
58411: LD_VAR 0 2
58415: ARRAY
58416: PPUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 30
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 30
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: PPUSH
58445: CALL_OW 72
58449: ST_TO_ADDR
// if barracks then
58450: LD_VAR 0 8
58454: IFFALSE 58602
// begin selected := 0 ;
58456: LD_ADDR_VAR 0 7
58460: PUSH
58461: LD_INT 0
58463: ST_TO_ADDR
// for j in barracks do
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: LD_VAR 0 8
58473: PUSH
58474: FOR_IN
58475: IFFALSE 58506
// begin if UnitsInside ( j ) < 6 then
58477: LD_VAR 0 3
58481: PPUSH
58482: CALL_OW 313
58486: PUSH
58487: LD_INT 6
58489: LESS
58490: IFFALSE 58504
// begin selected := j ;
58492: LD_ADDR_VAR 0 7
58496: PUSH
58497: LD_VAR 0 3
58501: ST_TO_ADDR
// break ;
58502: GO 58506
// end ; end ;
58504: GO 58474
58506: POP
58507: POP
// if selected then
58508: LD_VAR 0 7
58512: IFFALSE 58602
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58514: LD_ADDR_VAR 0 3
58518: PUSH
58519: LD_EXP 130
58523: PUSH
58524: LD_VAR 0 2
58528: ARRAY
58529: PPUSH
58530: LD_INT 25
58532: PUSH
58533: LD_INT 12
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PPUSH
58540: CALL_OW 72
58544: PUSH
58545: FOR_IN
58546: IFFALSE 58600
// if not IsInUnit ( j ) and not HasTask ( j ) then
58548: LD_VAR 0 3
58552: PPUSH
58553: CALL_OW 310
58557: NOT
58558: PUSH
58559: LD_VAR 0 3
58563: PPUSH
58564: CALL_OW 314
58568: NOT
58569: AND
58570: IFFALSE 58598
// begin ComEnterUnit ( j , selected ) ;
58572: LD_VAR 0 3
58576: PPUSH
58577: LD_VAR 0 7
58581: PPUSH
58582: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
58586: LD_VAR 0 3
58590: PPUSH
58591: LD_INT 15
58593: PPUSH
58594: CALL_OW 183
// end ;
58598: GO 58545
58600: POP
58601: POP
// end ; end ; end ; end ; end ;
58602: GO 57995
58604: POP
58605: POP
// end ;
58606: LD_VAR 0 1
58610: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
58611: LD_INT 0
58613: PPUSH
58614: PPUSH
58615: PPUSH
58616: PPUSH
// if not mc_bases then
58617: LD_EXP 101
58621: NOT
58622: IFFALSE 58626
// exit ;
58624: GO 58804
// for i = 1 to mc_bases do
58626: LD_ADDR_VAR 0 2
58630: PUSH
58631: DOUBLE
58632: LD_INT 1
58634: DEC
58635: ST_TO_ADDR
58636: LD_EXP 101
58640: PUSH
58641: FOR_TO
58642: IFFALSE 58802
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
58644: LD_ADDR_VAR 0 4
58648: PUSH
58649: LD_EXP 101
58653: PUSH
58654: LD_VAR 0 2
58658: ARRAY
58659: PPUSH
58660: LD_INT 25
58662: PUSH
58663: LD_INT 9
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PPUSH
58670: CALL_OW 72
58674: ST_TO_ADDR
// if not tmp then
58675: LD_VAR 0 4
58679: NOT
58680: IFFALSE 58684
// continue ;
58682: GO 58641
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
58684: LD_EXP 127
58688: PUSH
58689: LD_VAR 0 2
58693: ARRAY
58694: PPUSH
58695: LD_INT 29
58697: PPUSH
58698: CALL_OW 325
58702: NOT
58703: PUSH
58704: LD_EXP 127
58708: PUSH
58709: LD_VAR 0 2
58713: ARRAY
58714: PPUSH
58715: LD_INT 28
58717: PPUSH
58718: CALL_OW 325
58722: NOT
58723: AND
58724: IFFALSE 58728
// continue ;
58726: GO 58641
// for j in tmp do
58728: LD_ADDR_VAR 0 3
58732: PUSH
58733: LD_VAR 0 4
58737: PUSH
58738: FOR_IN
58739: IFFALSE 58798
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
58741: LD_VAR 0 3
58745: PUSH
58746: LD_EXP 104
58750: PUSH
58751: LD_VAR 0 2
58755: ARRAY
58756: PUSH
58757: LD_INT 1
58759: ARRAY
58760: IN
58761: NOT
58762: PUSH
58763: LD_VAR 0 3
58767: PUSH
58768: LD_EXP 104
58772: PUSH
58773: LD_VAR 0 2
58777: ARRAY
58778: PUSH
58779: LD_INT 2
58781: ARRAY
58782: IN
58783: NOT
58784: AND
58785: IFFALSE 58796
// ComSpaceTimeShoot ( j ) ;
58787: LD_VAR 0 3
58791: PPUSH
58792: CALL 70005 0 1
58796: GO 58738
58798: POP
58799: POP
// end ;
58800: GO 58641
58802: POP
58803: POP
// end ;
58804: LD_VAR 0 1
58808: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
58809: LD_INT 0
58811: PPUSH
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
// if not mc_bases then
58820: LD_EXP 101
58824: NOT
58825: IFFALSE 58829
// exit ;
58827: GO 59451
// for i = 1 to mc_bases do
58829: LD_ADDR_VAR 0 2
58833: PUSH
58834: DOUBLE
58835: LD_INT 1
58837: DEC
58838: ST_TO_ADDR
58839: LD_EXP 101
58843: PUSH
58844: FOR_TO
58845: IFFALSE 59449
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
58847: LD_EXP 136
58851: PUSH
58852: LD_VAR 0 2
58856: ARRAY
58857: NOT
58858: PUSH
58859: LD_INT 38
58861: PPUSH
58862: LD_EXP 127
58866: PUSH
58867: LD_VAR 0 2
58871: ARRAY
58872: PPUSH
58873: CALL_OW 321
58877: PUSH
58878: LD_INT 2
58880: NONEQUAL
58881: OR
58882: IFFALSE 58886
// continue ;
58884: GO 58844
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
58886: LD_ADDR_VAR 0 8
58890: PUSH
58891: LD_EXP 101
58895: PUSH
58896: LD_VAR 0 2
58900: ARRAY
58901: PPUSH
58902: LD_INT 30
58904: PUSH
58905: LD_INT 34
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PPUSH
58912: CALL_OW 72
58916: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
58917: LD_ADDR_VAR 0 9
58921: PUSH
58922: LD_EXP 101
58926: PUSH
58927: LD_VAR 0 2
58931: ARRAY
58932: PPUSH
58933: LD_INT 25
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PPUSH
58943: CALL_OW 72
58947: PPUSH
58948: LD_INT 0
58950: PPUSH
58951: CALL 103961 0 2
58955: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
58956: LD_VAR 0 9
58960: NOT
58961: PUSH
58962: LD_VAR 0 8
58966: NOT
58967: OR
58968: PUSH
58969: LD_EXP 101
58973: PUSH
58974: LD_VAR 0 2
58978: ARRAY
58979: PPUSH
58980: LD_INT 124
58982: PPUSH
58983: CALL 103961 0 2
58987: OR
58988: IFFALSE 58992
// continue ;
58990: GO 58844
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
58992: LD_EXP 137
58996: PUSH
58997: LD_VAR 0 2
59001: ARRAY
59002: PUSH
59003: LD_EXP 136
59007: PUSH
59008: LD_VAR 0 2
59012: ARRAY
59013: LESS
59014: PUSH
59015: LD_EXP 137
59019: PUSH
59020: LD_VAR 0 2
59024: ARRAY
59025: PUSH
59026: LD_VAR 0 8
59030: LESS
59031: AND
59032: IFFALSE 59447
// begin tmp := sci [ 1 ] ;
59034: LD_ADDR_VAR 0 7
59038: PUSH
59039: LD_VAR 0 9
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
59048: LD_VAR 0 7
59052: PPUSH
59053: LD_INT 124
59055: PPUSH
59056: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
59060: LD_ADDR_VAR 0 3
59064: PUSH
59065: DOUBLE
59066: LD_EXP 136
59070: PUSH
59071: LD_VAR 0 2
59075: ARRAY
59076: INC
59077: ST_TO_ADDR
59078: LD_EXP 136
59082: PUSH
59083: LD_VAR 0 2
59087: ARRAY
59088: PUSH
59089: FOR_DOWNTO
59090: IFFALSE 59433
// begin if IsInUnit ( tmp ) then
59092: LD_VAR 0 7
59096: PPUSH
59097: CALL_OW 310
59101: IFFALSE 59112
// ComExitBuilding ( tmp ) ;
59103: LD_VAR 0 7
59107: PPUSH
59108: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
59112: LD_INT 35
59114: PPUSH
59115: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
59119: LD_VAR 0 7
59123: PPUSH
59124: CALL_OW 310
59128: NOT
59129: PUSH
59130: LD_VAR 0 7
59134: PPUSH
59135: CALL_OW 314
59139: NOT
59140: AND
59141: IFFALSE 59112
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
59143: LD_ADDR_VAR 0 6
59147: PUSH
59148: LD_VAR 0 7
59152: PPUSH
59153: CALL_OW 250
59157: PUSH
59158: LD_VAR 0 7
59162: PPUSH
59163: CALL_OW 251
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59172: LD_INT 35
59174: PPUSH
59175: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
59179: LD_ADDR_VAR 0 4
59183: PUSH
59184: LD_EXP 136
59188: PUSH
59189: LD_VAR 0 2
59193: ARRAY
59194: PUSH
59195: LD_VAR 0 3
59199: ARRAY
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
59205: LD_ADDR_VAR 0 5
59209: PUSH
59210: LD_EXP 136
59214: PUSH
59215: LD_VAR 0 2
59219: ARRAY
59220: PUSH
59221: LD_VAR 0 3
59225: ARRAY
59226: PUSH
59227: LD_INT 2
59229: ARRAY
59230: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
59231: LD_VAR 0 7
59235: PPUSH
59236: LD_INT 10
59238: PPUSH
59239: CALL 76617 0 2
59243: PUSH
59244: LD_INT 4
59246: ARRAY
59247: IFFALSE 59285
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
59249: LD_VAR 0 7
59253: PPUSH
59254: LD_VAR 0 6
59258: PUSH
59259: LD_INT 1
59261: ARRAY
59262: PPUSH
59263: LD_VAR 0 6
59267: PUSH
59268: LD_INT 2
59270: ARRAY
59271: PPUSH
59272: CALL_OW 111
// wait ( 0 0$10 ) ;
59276: LD_INT 350
59278: PPUSH
59279: CALL_OW 67
// end else
59283: GO 59311
// begin ComMoveXY ( tmp , x , y ) ;
59285: LD_VAR 0 7
59289: PPUSH
59290: LD_VAR 0 4
59294: PPUSH
59295: LD_VAR 0 5
59299: PPUSH
59300: CALL_OW 111
// wait ( 0 0$3 ) ;
59304: LD_INT 105
59306: PPUSH
59307: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
59311: LD_VAR 0 7
59315: PPUSH
59316: LD_VAR 0 4
59320: PPUSH
59321: LD_VAR 0 5
59325: PPUSH
59326: CALL_OW 307
59330: IFFALSE 59172
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
59332: LD_VAR 0 7
59336: PPUSH
59337: LD_VAR 0 4
59341: PPUSH
59342: LD_VAR 0 5
59346: PPUSH
59347: LD_VAR 0 8
59351: PUSH
59352: LD_VAR 0 3
59356: ARRAY
59357: PPUSH
59358: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
59362: LD_INT 35
59364: PPUSH
59365: CALL_OW 67
// until not HasTask ( tmp ) ;
59369: LD_VAR 0 7
59373: PPUSH
59374: CALL_OW 314
59378: NOT
59379: IFFALSE 59362
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
59381: LD_ADDR_EXP 137
59385: PUSH
59386: LD_EXP 137
59390: PPUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_EXP 137
59400: PUSH
59401: LD_VAR 0 2
59405: ARRAY
59406: PUSH
59407: LD_INT 1
59409: PLUS
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PPUSH
59415: LD_VAR 0 8
59419: PUSH
59420: LD_VAR 0 3
59424: ARRAY
59425: PPUSH
59426: CALL 74020 0 3
59430: ST_TO_ADDR
// end ;
59431: GO 59089
59433: POP
59434: POP
// MC_Reset ( i , 124 ) ;
59435: LD_VAR 0 2
59439: PPUSH
59440: LD_INT 124
59442: PPUSH
59443: CALL 42519 0 2
// end ; end ;
59447: GO 58844
59449: POP
59450: POP
// end ;
59451: LD_VAR 0 1
59455: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
// if not mc_bases then
59461: LD_EXP 101
59465: NOT
59466: IFFALSE 59470
// exit ;
59468: GO 60076
// for i = 1 to mc_bases do
59470: LD_ADDR_VAR 0 2
59474: PUSH
59475: DOUBLE
59476: LD_INT 1
59478: DEC
59479: ST_TO_ADDR
59480: LD_EXP 101
59484: PUSH
59485: FOR_TO
59486: IFFALSE 60074
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59488: LD_ADDR_VAR 0 3
59492: PUSH
59493: LD_EXP 101
59497: PUSH
59498: LD_VAR 0 2
59502: ARRAY
59503: PPUSH
59504: LD_INT 25
59506: PUSH
59507: LD_INT 4
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PPUSH
59514: CALL_OW 72
59518: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
59519: LD_VAR 0 3
59523: NOT
59524: PUSH
59525: LD_EXP 138
59529: PUSH
59530: LD_VAR 0 2
59534: ARRAY
59535: NOT
59536: OR
59537: PUSH
59538: LD_EXP 101
59542: PUSH
59543: LD_VAR 0 2
59547: ARRAY
59548: PPUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 30
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 30
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: PPUSH
59577: CALL_OW 72
59581: NOT
59582: OR
59583: IFFALSE 59633
// begin if mc_deposits_finder [ i ] then
59585: LD_EXP 139
59589: PUSH
59590: LD_VAR 0 2
59594: ARRAY
59595: IFFALSE 59631
// begin MC_Reset ( i , 125 ) ;
59597: LD_VAR 0 2
59601: PPUSH
59602: LD_INT 125
59604: PPUSH
59605: CALL 42519 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59609: LD_ADDR_EXP 139
59613: PUSH
59614: LD_EXP 139
59618: PPUSH
59619: LD_VAR 0 2
59623: PPUSH
59624: EMPTY
59625: PPUSH
59626: CALL_OW 1
59630: ST_TO_ADDR
// end ; continue ;
59631: GO 59485
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
59633: LD_EXP 138
59637: PUSH
59638: LD_VAR 0 2
59642: ARRAY
59643: PUSH
59644: LD_INT 1
59646: ARRAY
59647: PUSH
59648: LD_INT 3
59650: ARRAY
59651: PUSH
59652: LD_INT 1
59654: EQUAL
59655: PUSH
59656: LD_INT 20
59658: PPUSH
59659: LD_EXP 127
59663: PUSH
59664: LD_VAR 0 2
59668: ARRAY
59669: PPUSH
59670: CALL_OW 321
59674: PUSH
59675: LD_INT 2
59677: NONEQUAL
59678: AND
59679: IFFALSE 59729
// begin if mc_deposits_finder [ i ] then
59681: LD_EXP 139
59685: PUSH
59686: LD_VAR 0 2
59690: ARRAY
59691: IFFALSE 59727
// begin MC_Reset ( i , 125 ) ;
59693: LD_VAR 0 2
59697: PPUSH
59698: LD_INT 125
59700: PPUSH
59701: CALL 42519 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59705: LD_ADDR_EXP 139
59709: PUSH
59710: LD_EXP 139
59714: PPUSH
59715: LD_VAR 0 2
59719: PPUSH
59720: EMPTY
59721: PPUSH
59722: CALL_OW 1
59726: ST_TO_ADDR
// end ; continue ;
59727: GO 59485
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
59729: LD_EXP 138
59733: PUSH
59734: LD_VAR 0 2
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: LD_INT 1
59746: ARRAY
59747: PPUSH
59748: LD_EXP 138
59752: PUSH
59753: LD_VAR 0 2
59757: ARRAY
59758: PUSH
59759: LD_INT 1
59761: ARRAY
59762: PUSH
59763: LD_INT 2
59765: ARRAY
59766: PPUSH
59767: LD_EXP 127
59771: PUSH
59772: LD_VAR 0 2
59776: ARRAY
59777: PPUSH
59778: CALL_OW 440
59782: IFFALSE 59825
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
59784: LD_ADDR_EXP 138
59788: PUSH
59789: LD_EXP 138
59793: PPUSH
59794: LD_VAR 0 2
59798: PPUSH
59799: LD_EXP 138
59803: PUSH
59804: LD_VAR 0 2
59808: ARRAY
59809: PPUSH
59810: LD_INT 1
59812: PPUSH
59813: CALL_OW 3
59817: PPUSH
59818: CALL_OW 1
59822: ST_TO_ADDR
59823: GO 60072
// begin if not mc_deposits_finder [ i ] then
59825: LD_EXP 139
59829: PUSH
59830: LD_VAR 0 2
59834: ARRAY
59835: NOT
59836: IFFALSE 59888
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
59838: LD_ADDR_EXP 139
59842: PUSH
59843: LD_EXP 139
59847: PPUSH
59848: LD_VAR 0 2
59852: PPUSH
59853: LD_VAR 0 3
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PUSH
59862: EMPTY
59863: LIST
59864: PPUSH
59865: CALL_OW 1
59869: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
59870: LD_VAR 0 3
59874: PUSH
59875: LD_INT 1
59877: ARRAY
59878: PPUSH
59879: LD_INT 125
59881: PPUSH
59882: CALL_OW 109
// end else
59886: GO 60072
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
59888: LD_EXP 139
59892: PUSH
59893: LD_VAR 0 2
59897: ARRAY
59898: PUSH
59899: LD_INT 1
59901: ARRAY
59902: PPUSH
59903: CALL_OW 310
59907: IFFALSE 59930
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
59909: LD_EXP 139
59913: PUSH
59914: LD_VAR 0 2
59918: ARRAY
59919: PUSH
59920: LD_INT 1
59922: ARRAY
59923: PPUSH
59924: CALL_OW 122
59928: GO 60072
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
59930: LD_EXP 139
59934: PUSH
59935: LD_VAR 0 2
59939: ARRAY
59940: PUSH
59941: LD_INT 1
59943: ARRAY
59944: PPUSH
59945: CALL_OW 314
59949: NOT
59950: PUSH
59951: LD_EXP 139
59955: PUSH
59956: LD_VAR 0 2
59960: ARRAY
59961: PUSH
59962: LD_INT 1
59964: ARRAY
59965: PPUSH
59966: LD_EXP 138
59970: PUSH
59971: LD_VAR 0 2
59975: ARRAY
59976: PUSH
59977: LD_INT 1
59979: ARRAY
59980: PUSH
59981: LD_INT 1
59983: ARRAY
59984: PPUSH
59985: LD_EXP 138
59989: PUSH
59990: LD_VAR 0 2
59994: ARRAY
59995: PUSH
59996: LD_INT 1
59998: ARRAY
59999: PUSH
60000: LD_INT 2
60002: ARRAY
60003: PPUSH
60004: CALL_OW 297
60008: PUSH
60009: LD_INT 6
60011: GREATER
60012: AND
60013: IFFALSE 60072
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
60015: LD_EXP 139
60019: PUSH
60020: LD_VAR 0 2
60024: ARRAY
60025: PUSH
60026: LD_INT 1
60028: ARRAY
60029: PPUSH
60030: LD_EXP 138
60034: PUSH
60035: LD_VAR 0 2
60039: ARRAY
60040: PUSH
60041: LD_INT 1
60043: ARRAY
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: LD_EXP 138
60053: PUSH
60054: LD_VAR 0 2
60058: ARRAY
60059: PUSH
60060: LD_INT 1
60062: ARRAY
60063: PUSH
60064: LD_INT 2
60066: ARRAY
60067: PPUSH
60068: CALL_OW 111
// end ; end ; end ;
60072: GO 59485
60074: POP
60075: POP
// end ;
60076: LD_VAR 0 1
60080: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
60081: LD_INT 0
60083: PPUSH
60084: PPUSH
60085: PPUSH
60086: PPUSH
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
// if not mc_bases then
60094: LD_EXP 101
60098: NOT
60099: IFFALSE 60103
// exit ;
60101: GO 61043
// for i = 1 to mc_bases do
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: DOUBLE
60109: LD_INT 1
60111: DEC
60112: ST_TO_ADDR
60113: LD_EXP 101
60117: PUSH
60118: FOR_TO
60119: IFFALSE 61041
// begin if not mc_bases [ i ] or mc_scan [ i ] then
60121: LD_EXP 101
60125: PUSH
60126: LD_VAR 0 2
60130: ARRAY
60131: NOT
60132: PUSH
60133: LD_EXP 124
60137: PUSH
60138: LD_VAR 0 2
60142: ARRAY
60143: OR
60144: IFFALSE 60148
// continue ;
60146: GO 60118
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
60148: LD_ADDR_VAR 0 7
60152: PUSH
60153: LD_EXP 101
60157: PUSH
60158: LD_VAR 0 2
60162: ARRAY
60163: PUSH
60164: LD_INT 1
60166: ARRAY
60167: PPUSH
60168: CALL_OW 248
60172: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
60173: LD_VAR 0 7
60177: PUSH
60178: LD_INT 3
60180: EQUAL
60181: PUSH
60182: LD_EXP 120
60186: PUSH
60187: LD_VAR 0 2
60191: ARRAY
60192: PUSH
60193: LD_EXP 123
60197: PUSH
60198: LD_VAR 0 2
60202: ARRAY
60203: UNION
60204: PPUSH
60205: LD_INT 33
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PPUSH
60215: CALL_OW 72
60219: NOT
60220: OR
60221: IFFALSE 60225
// continue ;
60223: GO 60118
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
60225: LD_ADDR_VAR 0 9
60229: PUSH
60230: LD_EXP 101
60234: PUSH
60235: LD_VAR 0 2
60239: ARRAY
60240: PPUSH
60241: LD_INT 30
60243: PUSH
60244: LD_INT 36
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PPUSH
60251: CALL_OW 72
60255: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
60256: LD_ADDR_VAR 0 10
60260: PUSH
60261: LD_EXP 120
60265: PUSH
60266: LD_VAR 0 2
60270: ARRAY
60271: PPUSH
60272: LD_INT 34
60274: PUSH
60275: LD_INT 31
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PPUSH
60282: CALL_OW 72
60286: ST_TO_ADDR
// if not cts and not mcts then
60287: LD_VAR 0 9
60291: NOT
60292: PUSH
60293: LD_VAR 0 10
60297: NOT
60298: AND
60299: IFFALSE 60303
// continue ;
60301: GO 60118
// x := cts ;
60303: LD_ADDR_VAR 0 11
60307: PUSH
60308: LD_VAR 0 9
60312: ST_TO_ADDR
// if not x then
60313: LD_VAR 0 11
60317: NOT
60318: IFFALSE 60330
// x := mcts ;
60320: LD_ADDR_VAR 0 11
60324: PUSH
60325: LD_VAR 0 10
60329: ST_TO_ADDR
// if not x then
60330: LD_VAR 0 11
60334: NOT
60335: IFFALSE 60339
// continue ;
60337: GO 60118
// if mc_remote_driver [ i ] then
60339: LD_EXP 141
60343: PUSH
60344: LD_VAR 0 2
60348: ARRAY
60349: IFFALSE 60736
// for j in mc_remote_driver [ i ] do
60351: LD_ADDR_VAR 0 3
60355: PUSH
60356: LD_EXP 141
60360: PUSH
60361: LD_VAR 0 2
60365: ARRAY
60366: PUSH
60367: FOR_IN
60368: IFFALSE 60734
// begin if GetClass ( j ) <> 3 then
60370: LD_VAR 0 3
60374: PPUSH
60375: CALL_OW 257
60379: PUSH
60380: LD_INT 3
60382: NONEQUAL
60383: IFFALSE 60436
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
60385: LD_ADDR_EXP 141
60389: PUSH
60390: LD_EXP 141
60394: PPUSH
60395: LD_VAR 0 2
60399: PPUSH
60400: LD_EXP 141
60404: PUSH
60405: LD_VAR 0 2
60409: ARRAY
60410: PUSH
60411: LD_VAR 0 3
60415: DIFF
60416: PPUSH
60417: CALL_OW 1
60421: ST_TO_ADDR
// SetTag ( j , 0 ) ;
60422: LD_VAR 0 3
60426: PPUSH
60427: LD_INT 0
60429: PPUSH
60430: CALL_OW 109
// continue ;
60434: GO 60367
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
60436: LD_EXP 120
60440: PUSH
60441: LD_VAR 0 2
60445: ARRAY
60446: PPUSH
60447: LD_INT 34
60449: PUSH
60450: LD_INT 31
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 58
60459: PUSH
60460: EMPTY
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PPUSH
60467: CALL_OW 72
60471: PUSH
60472: LD_VAR 0 3
60476: PPUSH
60477: CALL 103996 0 1
60481: NOT
60482: AND
60483: IFFALSE 60554
// begin if IsInUnit ( j ) then
60485: LD_VAR 0 3
60489: PPUSH
60490: CALL_OW 310
60494: IFFALSE 60505
// ComExitBuilding ( j ) ;
60496: LD_VAR 0 3
60500: PPUSH
60501: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
60505: LD_VAR 0 3
60509: PPUSH
60510: LD_EXP 120
60514: PUSH
60515: LD_VAR 0 2
60519: ARRAY
60520: PPUSH
60521: LD_INT 34
60523: PUSH
60524: LD_INT 31
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 58
60533: PUSH
60534: EMPTY
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PPUSH
60541: CALL_OW 72
60545: PUSH
60546: LD_INT 1
60548: ARRAY
60549: PPUSH
60550: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
60554: LD_VAR 0 3
60558: PPUSH
60559: CALL_OW 310
60563: NOT
60564: PUSH
60565: LD_VAR 0 3
60569: PPUSH
60570: CALL_OW 310
60574: PPUSH
60575: CALL_OW 266
60579: PUSH
60580: LD_INT 36
60582: NONEQUAL
60583: PUSH
60584: LD_VAR 0 3
60588: PPUSH
60589: CALL 103996 0 1
60593: NOT
60594: AND
60595: OR
60596: IFFALSE 60732
// begin if IsInUnit ( j ) then
60598: LD_VAR 0 3
60602: PPUSH
60603: CALL_OW 310
60607: IFFALSE 60618
// ComExitBuilding ( j ) ;
60609: LD_VAR 0 3
60613: PPUSH
60614: CALL_OW 122
// ct := 0 ;
60618: LD_ADDR_VAR 0 8
60622: PUSH
60623: LD_INT 0
60625: ST_TO_ADDR
// for k in x do
60626: LD_ADDR_VAR 0 4
60630: PUSH
60631: LD_VAR 0 11
60635: PUSH
60636: FOR_IN
60637: IFFALSE 60710
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
60639: LD_VAR 0 4
60643: PPUSH
60644: CALL_OW 264
60648: PUSH
60649: LD_INT 31
60651: EQUAL
60652: PUSH
60653: LD_VAR 0 4
60657: PPUSH
60658: CALL_OW 311
60662: NOT
60663: AND
60664: PUSH
60665: LD_VAR 0 4
60669: PPUSH
60670: CALL_OW 266
60674: PUSH
60675: LD_INT 36
60677: EQUAL
60678: PUSH
60679: LD_VAR 0 4
60683: PPUSH
60684: CALL_OW 313
60688: PUSH
60689: LD_INT 3
60691: LESS
60692: AND
60693: OR
60694: IFFALSE 60708
// begin ct := k ;
60696: LD_ADDR_VAR 0 8
60700: PUSH
60701: LD_VAR 0 4
60705: ST_TO_ADDR
// break ;
60706: GO 60710
// end ;
60708: GO 60636
60710: POP
60711: POP
// if ct then
60712: LD_VAR 0 8
60716: IFFALSE 60732
// ComEnterUnit ( j , ct ) ;
60718: LD_VAR 0 3
60722: PPUSH
60723: LD_VAR 0 8
60727: PPUSH
60728: CALL_OW 120
// end ; end ;
60732: GO 60367
60734: POP
60735: POP
// places := 0 ;
60736: LD_ADDR_VAR 0 5
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
// for j = 1 to x do
60744: LD_ADDR_VAR 0 3
60748: PUSH
60749: DOUBLE
60750: LD_INT 1
60752: DEC
60753: ST_TO_ADDR
60754: LD_VAR 0 11
60758: PUSH
60759: FOR_TO
60760: IFFALSE 60836
// if GetWeapon ( x [ j ] ) = ar_control_tower then
60762: LD_VAR 0 11
60766: PUSH
60767: LD_VAR 0 3
60771: ARRAY
60772: PPUSH
60773: CALL_OW 264
60777: PUSH
60778: LD_INT 31
60780: EQUAL
60781: IFFALSE 60799
// places := places + 1 else
60783: LD_ADDR_VAR 0 5
60787: PUSH
60788: LD_VAR 0 5
60792: PUSH
60793: LD_INT 1
60795: PLUS
60796: ST_TO_ADDR
60797: GO 60834
// if GetBType ( x [ j ] ) = b_control_tower then
60799: LD_VAR 0 11
60803: PUSH
60804: LD_VAR 0 3
60808: ARRAY
60809: PPUSH
60810: CALL_OW 266
60814: PUSH
60815: LD_INT 36
60817: EQUAL
60818: IFFALSE 60834
// places := places + 3 ;
60820: LD_ADDR_VAR 0 5
60824: PUSH
60825: LD_VAR 0 5
60829: PUSH
60830: LD_INT 3
60832: PLUS
60833: ST_TO_ADDR
60834: GO 60759
60836: POP
60837: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
60838: LD_VAR 0 5
60842: PUSH
60843: LD_INT 0
60845: EQUAL
60846: PUSH
60847: LD_VAR 0 5
60851: PUSH
60852: LD_EXP 141
60856: PUSH
60857: LD_VAR 0 2
60861: ARRAY
60862: LESSEQUAL
60863: OR
60864: IFFALSE 60868
// continue ;
60866: GO 60118
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
60868: LD_ADDR_VAR 0 6
60872: PUSH
60873: LD_EXP 101
60877: PUSH
60878: LD_VAR 0 2
60882: ARRAY
60883: PPUSH
60884: LD_INT 25
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PPUSH
60894: CALL_OW 72
60898: PUSH
60899: LD_EXP 141
60903: PUSH
60904: LD_VAR 0 2
60908: ARRAY
60909: DIFF
60910: PPUSH
60911: LD_INT 3
60913: PPUSH
60914: CALL 104896 0 2
60918: ST_TO_ADDR
// for j in tmp do
60919: LD_ADDR_VAR 0 3
60923: PUSH
60924: LD_VAR 0 6
60928: PUSH
60929: FOR_IN
60930: IFFALSE 60965
// if GetTag ( j ) > 0 then
60932: LD_VAR 0 3
60936: PPUSH
60937: CALL_OW 110
60941: PUSH
60942: LD_INT 0
60944: GREATER
60945: IFFALSE 60963
// tmp := tmp diff j ;
60947: LD_ADDR_VAR 0 6
60951: PUSH
60952: LD_VAR 0 6
60956: PUSH
60957: LD_VAR 0 3
60961: DIFF
60962: ST_TO_ADDR
60963: GO 60929
60965: POP
60966: POP
// if not tmp then
60967: LD_VAR 0 6
60971: NOT
60972: IFFALSE 60976
// continue ;
60974: GO 60118
// if places then
60976: LD_VAR 0 5
60980: IFFALSE 61039
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
60982: LD_ADDR_EXP 141
60986: PUSH
60987: LD_EXP 141
60991: PPUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: LD_EXP 141
61001: PUSH
61002: LD_VAR 0 2
61006: ARRAY
61007: PUSH
61008: LD_VAR 0 6
61012: PUSH
61013: LD_INT 1
61015: ARRAY
61016: UNION
61017: PPUSH
61018: CALL_OW 1
61022: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
61023: LD_VAR 0 6
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: PPUSH
61032: LD_INT 126
61034: PPUSH
61035: CALL_OW 109
// end ; end ;
61039: GO 60118
61041: POP
61042: POP
// end ;
61043: LD_VAR 0 1
61047: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
61048: LD_INT 0
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
61055: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
61056: LD_VAR 0 1
61060: NOT
61061: PUSH
61062: LD_VAR 0 2
61066: NOT
61067: OR
61068: PUSH
61069: LD_VAR 0 3
61073: NOT
61074: OR
61075: PUSH
61076: LD_VAR 0 4
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: LD_INT 4
61092: PUSH
61093: LD_INT 5
61095: PUSH
61096: LD_INT 8
61098: PUSH
61099: LD_INT 9
61101: PUSH
61102: LD_INT 15
61104: PUSH
61105: LD_INT 16
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: IN
61119: NOT
61120: OR
61121: IFFALSE 61125
// exit ;
61123: GO 61983
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
61125: LD_ADDR_VAR 0 2
61129: PUSH
61130: LD_VAR 0 2
61134: PPUSH
61135: LD_INT 21
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 24
61147: PUSH
61148: LD_INT 250
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PPUSH
61159: CALL_OW 72
61163: ST_TO_ADDR
// case class of 1 , 15 :
61164: LD_VAR 0 4
61168: PUSH
61169: LD_INT 1
61171: DOUBLE
61172: EQUAL
61173: IFTRUE 61183
61175: LD_INT 15
61177: DOUBLE
61178: EQUAL
61179: IFTRUE 61183
61181: GO 61268
61183: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
61184: LD_ADDR_VAR 0 8
61188: PUSH
61189: LD_VAR 0 2
61193: PPUSH
61194: LD_INT 2
61196: PUSH
61197: LD_INT 30
61199: PUSH
61200: LD_INT 32
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 30
61209: PUSH
61210: LD_INT 31
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PPUSH
61222: CALL_OW 72
61226: PUSH
61227: LD_VAR 0 2
61231: PPUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 30
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 30
61247: PUSH
61248: LD_INT 5
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: PPUSH
61260: CALL_OW 72
61264: ADD
61265: ST_TO_ADDR
61266: GO 61514
61268: LD_INT 2
61270: DOUBLE
61271: EQUAL
61272: IFTRUE 61282
61274: LD_INT 16
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61282
61280: GO 61328
61282: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
61283: LD_ADDR_VAR 0 8
61287: PUSH
61288: LD_VAR 0 2
61292: PPUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 30
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 30
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: PPUSH
61321: CALL_OW 72
61325: ST_TO_ADDR
61326: GO 61514
61328: LD_INT 3
61330: DOUBLE
61331: EQUAL
61332: IFTRUE 61336
61334: GO 61382
61336: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
61337: LD_ADDR_VAR 0 8
61341: PUSH
61342: LD_VAR 0 2
61346: PPUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 30
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 30
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: PPUSH
61375: CALL_OW 72
61379: ST_TO_ADDR
61380: GO 61514
61382: LD_INT 4
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61390
61388: GO 61447
61390: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
61391: LD_ADDR_VAR 0 8
61395: PUSH
61396: LD_VAR 0 2
61400: PPUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 30
61406: PUSH
61407: LD_INT 6
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 30
61416: PUSH
61417: LD_INT 7
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 30
61426: PUSH
61427: LD_INT 8
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: PPUSH
61440: CALL_OW 72
61444: ST_TO_ADDR
61445: GO 61514
61447: LD_INT 5
61449: DOUBLE
61450: EQUAL
61451: IFTRUE 61467
61453: LD_INT 8
61455: DOUBLE
61456: EQUAL
61457: IFTRUE 61467
61459: LD_INT 9
61461: DOUBLE
61462: EQUAL
61463: IFTRUE 61467
61465: GO 61513
61467: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
61468: LD_ADDR_VAR 0 8
61472: PUSH
61473: LD_VAR 0 2
61477: PPUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 30
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 30
61493: PUSH
61494: LD_INT 5
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: PPUSH
61506: CALL_OW 72
61510: ST_TO_ADDR
61511: GO 61514
61513: POP
// if not tmp then
61514: LD_VAR 0 8
61518: NOT
61519: IFFALSE 61523
// exit ;
61521: GO 61983
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
61523: LD_VAR 0 4
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 15
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: IN
61538: PUSH
61539: LD_EXP 110
61543: PUSH
61544: LD_VAR 0 1
61548: ARRAY
61549: AND
61550: IFFALSE 61706
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
61552: LD_ADDR_VAR 0 9
61556: PUSH
61557: LD_EXP 110
61561: PUSH
61562: LD_VAR 0 1
61566: ARRAY
61567: PUSH
61568: LD_INT 1
61570: ARRAY
61571: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
61572: LD_VAR 0 9
61576: PUSH
61577: LD_EXP 111
61581: PUSH
61582: LD_VAR 0 1
61586: ARRAY
61587: IN
61588: NOT
61589: IFFALSE 61704
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
61591: LD_ADDR_EXP 111
61595: PUSH
61596: LD_EXP 111
61600: PPUSH
61601: LD_VAR 0 1
61605: PUSH
61606: LD_EXP 111
61610: PUSH
61611: LD_VAR 0 1
61615: ARRAY
61616: PUSH
61617: LD_INT 1
61619: PLUS
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PPUSH
61625: LD_VAR 0 9
61629: PPUSH
61630: CALL 74020 0 3
61634: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
61635: LD_ADDR_EXP 110
61639: PUSH
61640: LD_EXP 110
61644: PPUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: LD_EXP 110
61654: PUSH
61655: LD_VAR 0 1
61659: ARRAY
61660: PUSH
61661: LD_VAR 0 9
61665: DIFF
61666: PPUSH
61667: CALL_OW 1
61671: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
61672: LD_VAR 0 3
61676: PPUSH
61677: LD_EXP 111
61681: PUSH
61682: LD_VAR 0 1
61686: ARRAY
61687: PUSH
61688: LD_EXP 111
61692: PUSH
61693: LD_VAR 0 1
61697: ARRAY
61698: ARRAY
61699: PPUSH
61700: CALL_OW 120
// end ; exit ;
61704: GO 61983
// end ; if tmp > 1 then
61706: LD_VAR 0 8
61710: PUSH
61711: LD_INT 1
61713: GREATER
61714: IFFALSE 61818
// for i = 2 to tmp do
61716: LD_ADDR_VAR 0 6
61720: PUSH
61721: DOUBLE
61722: LD_INT 2
61724: DEC
61725: ST_TO_ADDR
61726: LD_VAR 0 8
61730: PUSH
61731: FOR_TO
61732: IFFALSE 61816
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
61734: LD_VAR 0 8
61738: PUSH
61739: LD_VAR 0 6
61743: ARRAY
61744: PPUSH
61745: CALL_OW 461
61749: PUSH
61750: LD_INT 6
61752: EQUAL
61753: IFFALSE 61814
// begin x := tmp [ i ] ;
61755: LD_ADDR_VAR 0 9
61759: PUSH
61760: LD_VAR 0 8
61764: PUSH
61765: LD_VAR 0 6
61769: ARRAY
61770: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
61771: LD_ADDR_VAR 0 8
61775: PUSH
61776: LD_VAR 0 8
61780: PPUSH
61781: LD_VAR 0 6
61785: PPUSH
61786: CALL_OW 3
61790: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
61791: LD_ADDR_VAR 0 8
61795: PUSH
61796: LD_VAR 0 8
61800: PPUSH
61801: LD_INT 1
61803: PPUSH
61804: LD_VAR 0 9
61808: PPUSH
61809: CALL_OW 2
61813: ST_TO_ADDR
// end ;
61814: GO 61731
61816: POP
61817: POP
// for i in tmp do
61818: LD_ADDR_VAR 0 6
61822: PUSH
61823: LD_VAR 0 8
61827: PUSH
61828: FOR_IN
61829: IFFALSE 61856
// begin if IsNotFull ( i ) then
61831: LD_VAR 0 6
61835: PPUSH
61836: CALL 71242 0 1
61840: IFFALSE 61854
// begin j := i ;
61842: LD_ADDR_VAR 0 7
61846: PUSH
61847: LD_VAR 0 6
61851: ST_TO_ADDR
// break ;
61852: GO 61856
// end ; end ;
61854: GO 61828
61856: POP
61857: POP
// if j then
61858: LD_VAR 0 7
61862: IFFALSE 61880
// ComEnterUnit ( unit , j ) else
61864: LD_VAR 0 3
61868: PPUSH
61869: LD_VAR 0 7
61873: PPUSH
61874: CALL_OW 120
61878: GO 61983
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61880: LD_ADDR_VAR 0 10
61884: PUSH
61885: LD_VAR 0 2
61889: PPUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 30
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 30
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: LIST
61917: PPUSH
61918: CALL_OW 72
61922: ST_TO_ADDR
// if depot then
61923: LD_VAR 0 10
61927: IFFALSE 61983
// begin depot := NearestUnitToUnit ( depot , unit ) ;
61929: LD_ADDR_VAR 0 10
61933: PUSH
61934: LD_VAR 0 10
61938: PPUSH
61939: LD_VAR 0 3
61943: PPUSH
61944: CALL_OW 74
61948: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
61949: LD_VAR 0 3
61953: PPUSH
61954: LD_VAR 0 10
61958: PPUSH
61959: CALL_OW 296
61963: PUSH
61964: LD_INT 10
61966: GREATER
61967: IFFALSE 61983
// ComStandNearbyBuilding ( unit , depot ) ;
61969: LD_VAR 0 3
61973: PPUSH
61974: LD_VAR 0 10
61978: PPUSH
61979: CALL 70622 0 2
// end ; end ; end ;
61983: LD_VAR 0 5
61987: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
61988: LD_INT 0
61990: PPUSH
61991: PPUSH
61992: PPUSH
61993: PPUSH
// if not mc_bases then
61994: LD_EXP 101
61998: NOT
61999: IFFALSE 62003
// exit ;
62001: GO 62242
// for i = 1 to mc_bases do
62003: LD_ADDR_VAR 0 2
62007: PUSH
62008: DOUBLE
62009: LD_INT 1
62011: DEC
62012: ST_TO_ADDR
62013: LD_EXP 101
62017: PUSH
62018: FOR_TO
62019: IFFALSE 62240
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
62021: LD_ADDR_VAR 0 4
62025: PUSH
62026: LD_EXP 101
62030: PUSH
62031: LD_VAR 0 2
62035: ARRAY
62036: PPUSH
62037: LD_INT 21
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PPUSH
62047: CALL_OW 72
62051: PUSH
62052: LD_EXP 130
62056: PUSH
62057: LD_VAR 0 2
62061: ARRAY
62062: UNION
62063: ST_TO_ADDR
// if not tmp then
62064: LD_VAR 0 4
62068: NOT
62069: IFFALSE 62073
// continue ;
62071: GO 62018
// for j in tmp do
62073: LD_ADDR_VAR 0 3
62077: PUSH
62078: LD_VAR 0 4
62082: PUSH
62083: FOR_IN
62084: IFFALSE 62236
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
62086: LD_VAR 0 3
62090: PPUSH
62091: CALL_OW 110
62095: NOT
62096: PUSH
62097: LD_VAR 0 3
62101: PPUSH
62102: CALL_OW 314
62106: NOT
62107: AND
62108: PUSH
62109: LD_VAR 0 3
62113: PPUSH
62114: CALL_OW 311
62118: NOT
62119: AND
62120: PUSH
62121: LD_VAR 0 3
62125: PPUSH
62126: CALL_OW 310
62130: NOT
62131: AND
62132: PUSH
62133: LD_VAR 0 3
62137: PUSH
62138: LD_EXP 104
62142: PUSH
62143: LD_VAR 0 2
62147: ARRAY
62148: PUSH
62149: LD_INT 1
62151: ARRAY
62152: IN
62153: NOT
62154: AND
62155: PUSH
62156: LD_VAR 0 3
62160: PUSH
62161: LD_EXP 104
62165: PUSH
62166: LD_VAR 0 2
62170: ARRAY
62171: PUSH
62172: LD_INT 2
62174: ARRAY
62175: IN
62176: NOT
62177: AND
62178: PUSH
62179: LD_VAR 0 3
62183: PUSH
62184: LD_EXP 113
62188: PUSH
62189: LD_VAR 0 2
62193: ARRAY
62194: IN
62195: NOT
62196: AND
62197: IFFALSE 62234
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
62199: LD_VAR 0 2
62203: PPUSH
62204: LD_EXP 101
62208: PUSH
62209: LD_VAR 0 2
62213: ARRAY
62214: PPUSH
62215: LD_VAR 0 3
62219: PPUSH
62220: LD_VAR 0 3
62224: PPUSH
62225: CALL_OW 257
62229: PPUSH
62230: CALL 61048 0 4
// end ;
62234: GO 62083
62236: POP
62237: POP
// end ;
62238: GO 62018
62240: POP
62241: POP
// end ;
62242: LD_VAR 0 1
62246: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , j , c ; begin
62247: LD_INT 0
62249: PPUSH
62250: PPUSH
62251: PPUSH
62252: PPUSH
62253: PPUSH
62254: PPUSH
// if not mc_bases [ base ] then
62255: LD_EXP 101
62259: PUSH
62260: LD_VAR 0 1
62264: ARRAY
62265: NOT
62266: IFFALSE 62270
// exit ;
62268: GO 62471
// tmp := [ ] ;
62270: LD_ADDR_VAR 0 6
62274: PUSH
62275: EMPTY
62276: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
62277: LD_ADDR_VAR 0 7
62281: PUSH
62282: LD_VAR 0 3
62286: PPUSH
62287: LD_INT 0
62289: PPUSH
62290: CALL_OW 517
62294: ST_TO_ADDR
// if not list then
62295: LD_VAR 0 7
62299: NOT
62300: IFFALSE 62304
// exit ;
62302: GO 62471
// c := Count ( list [ 1 ] ) ;
62304: LD_ADDR_VAR 0 9
62308: PUSH
62309: LD_VAR 0 7
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: CALL 71160 0 1
62322: ST_TO_ADDR
// if amount > c then
62323: LD_VAR 0 2
62327: PUSH
62328: LD_VAR 0 9
62332: GREATER
62333: IFFALSE 62345
// amount := c ;
62335: LD_ADDR_VAR 0 2
62339: PUSH
62340: LD_VAR 0 9
62344: ST_TO_ADDR
// for i := 1 to amount do
62345: LD_ADDR_VAR 0 5
62349: PUSH
62350: DOUBLE
62351: LD_INT 1
62353: DEC
62354: ST_TO_ADDR
62355: LD_VAR 0 2
62359: PUSH
62360: FOR_TO
62361: IFFALSE 62419
// tmp := Replace ( tmp , i , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62363: LD_ADDR_VAR 0 6
62367: PUSH
62368: LD_VAR 0 6
62372: PPUSH
62373: LD_VAR 0 5
62377: PPUSH
62378: LD_VAR 0 7
62382: PUSH
62383: LD_INT 1
62385: ARRAY
62386: PUSH
62387: LD_VAR 0 5
62391: ARRAY
62392: PUSH
62393: LD_VAR 0 7
62397: PUSH
62398: LD_INT 2
62400: ARRAY
62401: PUSH
62402: LD_VAR 0 5
62406: ARRAY
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PPUSH
62412: CALL_OW 1
62416: ST_TO_ADDR
62417: GO 62360
62419: POP
62420: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
62421: LD_ADDR_EXP 114
62425: PUSH
62426: LD_EXP 114
62430: PPUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: LD_VAR 0 6
62440: PPUSH
62441: CALL_OW 1
62445: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
62446: LD_ADDR_EXP 116
62450: PUSH
62451: LD_EXP 116
62455: PPUSH
62456: LD_VAR 0 1
62460: PPUSH
62461: LD_VAR 0 3
62465: PPUSH
62466: CALL_OW 1
62470: ST_TO_ADDR
// end ;
62471: LD_VAR 0 4
62475: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
62476: LD_INT 0
62478: PPUSH
// if not mc_bases [ base ] then
62479: LD_EXP 101
62483: PUSH
62484: LD_VAR 0 1
62488: ARRAY
62489: NOT
62490: IFFALSE 62494
// exit ;
62492: GO 62519
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
62494: LD_ADDR_EXP 106
62498: PUSH
62499: LD_EXP 106
62503: PPUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: LD_VAR 0 2
62513: PPUSH
62514: CALL_OW 1
62518: ST_TO_ADDR
// end ;
62519: LD_VAR 0 3
62523: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
62524: LD_INT 0
62526: PPUSH
// if not mc_bases [ base ] then
62527: LD_EXP 101
62531: PUSH
62532: LD_VAR 0 1
62536: ARRAY
62537: NOT
62538: IFFALSE 62542
// exit ;
62540: GO 62579
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
62542: LD_ADDR_EXP 106
62546: PUSH
62547: LD_EXP 106
62551: PPUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: LD_EXP 106
62561: PUSH
62562: LD_VAR 0 1
62566: ARRAY
62567: PUSH
62568: LD_VAR 0 2
62572: UNION
62573: PPUSH
62574: CALL_OW 1
62578: ST_TO_ADDR
// end ;
62579: LD_VAR 0 3
62583: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
62584: LD_INT 0
62586: PPUSH
// if not mc_bases [ base ] then
62587: LD_EXP 101
62591: PUSH
62592: LD_VAR 0 1
62596: ARRAY
62597: NOT
62598: IFFALSE 62602
// exit ;
62600: GO 62627
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
62602: LD_ADDR_EXP 122
62606: PUSH
62607: LD_EXP 122
62611: PPUSH
62612: LD_VAR 0 1
62616: PPUSH
62617: LD_VAR 0 2
62621: PPUSH
62622: CALL_OW 1
62626: ST_TO_ADDR
// end ;
62627: LD_VAR 0 3
62631: RET
// export function MC_InsertProduceList ( base , components ) ; begin
62632: LD_INT 0
62634: PPUSH
// if not mc_bases [ base ] then
62635: LD_EXP 101
62639: PUSH
62640: LD_VAR 0 1
62644: ARRAY
62645: NOT
62646: IFFALSE 62650
// exit ;
62648: GO 62687
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
62650: LD_ADDR_EXP 122
62654: PUSH
62655: LD_EXP 122
62659: PPUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: LD_EXP 122
62669: PUSH
62670: LD_VAR 0 1
62674: ARRAY
62675: PUSH
62676: LD_VAR 0 2
62680: ADD
62681: PPUSH
62682: CALL_OW 1
62686: ST_TO_ADDR
// end ;
62687: LD_VAR 0 3
62691: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
62692: LD_INT 0
62694: PPUSH
// if not mc_bases [ base ] then
62695: LD_EXP 101
62699: PUSH
62700: LD_VAR 0 1
62704: ARRAY
62705: NOT
62706: IFFALSE 62710
// exit ;
62708: GO 62764
// mc_defender := Replace ( mc_defender , base , deflist ) ;
62710: LD_ADDR_EXP 123
62714: PUSH
62715: LD_EXP 123
62719: PPUSH
62720: LD_VAR 0 1
62724: PPUSH
62725: LD_VAR 0 2
62729: PPUSH
62730: CALL_OW 1
62734: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
62735: LD_ADDR_EXP 112
62739: PUSH
62740: LD_EXP 112
62744: PPUSH
62745: LD_VAR 0 1
62749: PPUSH
62750: LD_VAR 0 2
62754: PUSH
62755: LD_INT 0
62757: PLUS
62758: PPUSH
62759: CALL_OW 1
62763: ST_TO_ADDR
// end ;
62764: LD_VAR 0 3
62768: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
62769: LD_INT 0
62771: PPUSH
// if not mc_bases [ base ] then
62772: LD_EXP 101
62776: PUSH
62777: LD_VAR 0 1
62781: ARRAY
62782: NOT
62783: IFFALSE 62787
// exit ;
62785: GO 62812
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
62787: LD_ADDR_EXP 112
62791: PUSH
62792: LD_EXP 112
62796: PPUSH
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_VAR 0 2
62806: PPUSH
62807: CALL_OW 1
62811: ST_TO_ADDR
// end ;
62812: LD_VAR 0 3
62816: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
62817: LD_INT 0
62819: PPUSH
62820: PPUSH
62821: PPUSH
62822: PPUSH
// if not mc_bases [ base ] then
62823: LD_EXP 101
62827: PUSH
62828: LD_VAR 0 1
62832: ARRAY
62833: NOT
62834: IFFALSE 62838
// exit ;
62836: GO 62903
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
62838: LD_ADDR_EXP 121
62842: PUSH
62843: LD_EXP 121
62847: PPUSH
62848: LD_VAR 0 1
62852: PUSH
62853: LD_EXP 121
62857: PUSH
62858: LD_VAR 0 1
62862: ARRAY
62863: PUSH
62864: LD_INT 1
62866: PLUS
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PPUSH
62872: LD_VAR 0 1
62876: PUSH
62877: LD_VAR 0 2
62881: PUSH
62882: LD_VAR 0 3
62886: PUSH
62887: LD_VAR 0 4
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: PPUSH
62898: CALL 74020 0 3
62902: ST_TO_ADDR
// end ;
62903: LD_VAR 0 5
62907: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
62908: LD_INT 0
62910: PPUSH
// if not mc_bases [ base ] then
62911: LD_EXP 101
62915: PUSH
62916: LD_VAR 0 1
62920: ARRAY
62921: NOT
62922: IFFALSE 62926
// exit ;
62924: GO 62951
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
62926: LD_ADDR_EXP 138
62930: PUSH
62931: LD_EXP 138
62935: PPUSH
62936: LD_VAR 0 1
62940: PPUSH
62941: LD_VAR 0 2
62945: PPUSH
62946: CALL_OW 1
62950: ST_TO_ADDR
// end ;
62951: LD_VAR 0 3
62955: RET
// export function MC_GetMinesField ( base ) ; begin
62956: LD_INT 0
62958: PPUSH
// result := mc_mines [ base ] ;
62959: LD_ADDR_VAR 0 2
62963: PUSH
62964: LD_EXP 114
62968: PUSH
62969: LD_VAR 0 1
62973: ARRAY
62974: ST_TO_ADDR
// end ;
62975: LD_VAR 0 2
62979: RET
// export function MC_GetProduceList ( base ) ; begin
62980: LD_INT 0
62982: PPUSH
// result := mc_produce [ base ] ;
62983: LD_ADDR_VAR 0 2
62987: PUSH
62988: LD_EXP 122
62992: PUSH
62993: LD_VAR 0 1
62997: ARRAY
62998: ST_TO_ADDR
// end ;
62999: LD_VAR 0 2
63003: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
63004: LD_INT 0
63006: PPUSH
63007: PPUSH
// if not mc_bases then
63008: LD_EXP 101
63012: NOT
63013: IFFALSE 63017
// exit ;
63015: GO 63082
// if mc_bases [ base ] then
63017: LD_EXP 101
63021: PUSH
63022: LD_VAR 0 1
63026: ARRAY
63027: IFFALSE 63082
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63029: LD_ADDR_VAR 0 3
63033: PUSH
63034: LD_EXP 101
63038: PUSH
63039: LD_VAR 0 1
63043: ARRAY
63044: PPUSH
63045: LD_INT 30
63047: PUSH
63048: LD_VAR 0 2
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PPUSH
63057: CALL_OW 72
63061: ST_TO_ADDR
// if result then
63062: LD_VAR 0 3
63066: IFFALSE 63082
// result := result [ 1 ] ;
63068: LD_ADDR_VAR 0 3
63072: PUSH
63073: LD_VAR 0 3
63077: PUSH
63078: LD_INT 1
63080: ARRAY
63081: ST_TO_ADDR
// end ; end ;
63082: LD_VAR 0 3
63086: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
63087: LD_INT 0
63089: PPUSH
63090: PPUSH
// if not mc_bases then
63091: LD_EXP 101
63095: NOT
63096: IFFALSE 63100
// exit ;
63098: GO 63145
// if mc_bases [ base ] then
63100: LD_EXP 101
63104: PUSH
63105: LD_VAR 0 1
63109: ARRAY
63110: IFFALSE 63145
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63112: LD_ADDR_VAR 0 3
63116: PUSH
63117: LD_EXP 101
63121: PUSH
63122: LD_VAR 0 1
63126: ARRAY
63127: PPUSH
63128: LD_INT 30
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PPUSH
63140: CALL_OW 72
63144: ST_TO_ADDR
// end ;
63145: LD_VAR 0 3
63149: RET
// export function MC_SetTame ( base , area ) ; begin
63150: LD_INT 0
63152: PPUSH
// if not mc_bases or not base then
63153: LD_EXP 101
63157: NOT
63158: PUSH
63159: LD_VAR 0 1
63163: NOT
63164: OR
63165: IFFALSE 63169
// exit ;
63167: GO 63194
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
63169: LD_ADDR_EXP 129
63173: PUSH
63174: LD_EXP 129
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: LD_VAR 0 2
63188: PPUSH
63189: CALL_OW 1
63193: ST_TO_ADDR
// end ;
63194: LD_VAR 0 3
63198: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
63199: LD_INT 0
63201: PPUSH
63202: PPUSH
// if not mc_bases or not base then
63203: LD_EXP 101
63207: NOT
63208: PUSH
63209: LD_VAR 0 1
63213: NOT
63214: OR
63215: IFFALSE 63219
// exit ;
63217: GO 63321
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63219: LD_ADDR_VAR 0 4
63223: PUSH
63224: LD_EXP 101
63228: PUSH
63229: LD_VAR 0 1
63233: ARRAY
63234: PPUSH
63235: LD_INT 30
63237: PUSH
63238: LD_VAR 0 2
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PPUSH
63247: CALL_OW 72
63251: ST_TO_ADDR
// if not tmp then
63252: LD_VAR 0 4
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63321
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
63261: LD_ADDR_EXP 133
63265: PUSH
63266: LD_EXP 133
63270: PPUSH
63271: LD_VAR 0 1
63275: PPUSH
63276: LD_EXP 133
63280: PUSH
63281: LD_VAR 0 1
63285: ARRAY
63286: PPUSH
63287: LD_EXP 133
63291: PUSH
63292: LD_VAR 0 1
63296: ARRAY
63297: PUSH
63298: LD_INT 1
63300: PLUS
63301: PPUSH
63302: LD_VAR 0 4
63306: PUSH
63307: LD_INT 1
63309: ARRAY
63310: PPUSH
63311: CALL_OW 2
63315: PPUSH
63316: CALL_OW 1
63320: ST_TO_ADDR
// end ;
63321: LD_VAR 0 3
63325: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
63326: LD_INT 0
63328: PPUSH
63329: PPUSH
// if not mc_bases or not base or not kinds then
63330: LD_EXP 101
63334: NOT
63335: PUSH
63336: LD_VAR 0 1
63340: NOT
63341: OR
63342: PUSH
63343: LD_VAR 0 2
63347: NOT
63348: OR
63349: IFFALSE 63353
// exit ;
63351: GO 63414
// for i in kinds do
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: FOR_IN
63364: IFFALSE 63412
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
63366: LD_ADDR_EXP 135
63370: PUSH
63371: LD_EXP 135
63375: PPUSH
63376: LD_VAR 0 1
63380: PUSH
63381: LD_EXP 135
63385: PUSH
63386: LD_VAR 0 1
63390: ARRAY
63391: PUSH
63392: LD_INT 1
63394: PLUS
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PPUSH
63400: LD_VAR 0 4
63404: PPUSH
63405: CALL 74020 0 3
63409: ST_TO_ADDR
63410: GO 63363
63412: POP
63413: POP
// end ;
63414: LD_VAR 0 3
63418: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
63419: LD_INT 0
63421: PPUSH
// if not mc_bases or not base or not areas then
63422: LD_EXP 101
63426: NOT
63427: PUSH
63428: LD_VAR 0 1
63432: NOT
63433: OR
63434: PUSH
63435: LD_VAR 0 2
63439: NOT
63440: OR
63441: IFFALSE 63445
// exit ;
63443: GO 63470
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
63445: LD_ADDR_EXP 119
63449: PUSH
63450: LD_EXP 119
63454: PPUSH
63455: LD_VAR 0 1
63459: PPUSH
63460: LD_VAR 0 2
63464: PPUSH
63465: CALL_OW 1
63469: ST_TO_ADDR
// end ;
63470: LD_VAR 0 3
63474: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
63475: LD_INT 0
63477: PPUSH
// if not mc_bases or not base or not teleports_exit then
63478: LD_EXP 101
63482: NOT
63483: PUSH
63484: LD_VAR 0 1
63488: NOT
63489: OR
63490: PUSH
63491: LD_VAR 0 2
63495: NOT
63496: OR
63497: IFFALSE 63501
// exit ;
63499: GO 63526
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
63501: LD_ADDR_EXP 136
63505: PUSH
63506: LD_EXP 136
63510: PPUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: LD_VAR 0 2
63520: PPUSH
63521: CALL_OW 1
63525: ST_TO_ADDR
// end ;
63526: LD_VAR 0 3
63530: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
63531: LD_INT 0
63533: PPUSH
63534: PPUSH
63535: PPUSH
// if not mc_bases or not base or not ext_list then
63536: LD_EXP 101
63540: NOT
63541: PUSH
63542: LD_VAR 0 1
63546: NOT
63547: OR
63548: PUSH
63549: LD_VAR 0 5
63553: NOT
63554: OR
63555: IFFALSE 63559
// exit ;
63557: GO 63732
// tmp := GetFacExtXYD ( x , y , d ) ;
63559: LD_ADDR_VAR 0 8
63563: PUSH
63564: LD_VAR 0 2
63568: PPUSH
63569: LD_VAR 0 3
63573: PPUSH
63574: LD_VAR 0 4
63578: PPUSH
63579: CALL 104026 0 3
63583: ST_TO_ADDR
// if not tmp then
63584: LD_VAR 0 8
63588: NOT
63589: IFFALSE 63593
// exit ;
63591: GO 63732
// for i in tmp do
63593: LD_ADDR_VAR 0 7
63597: PUSH
63598: LD_VAR 0 8
63602: PUSH
63603: FOR_IN
63604: IFFALSE 63730
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
63606: LD_ADDR_EXP 106
63610: PUSH
63611: LD_EXP 106
63615: PPUSH
63616: LD_VAR 0 1
63620: PPUSH
63621: LD_EXP 106
63625: PUSH
63626: LD_VAR 0 1
63630: ARRAY
63631: PPUSH
63632: LD_EXP 106
63636: PUSH
63637: LD_VAR 0 1
63641: ARRAY
63642: PUSH
63643: LD_INT 1
63645: PLUS
63646: PPUSH
63647: LD_VAR 0 5
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PUSH
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 1
63663: ARRAY
63664: PUSH
63665: LD_VAR 0 7
63669: PUSH
63670: LD_INT 2
63672: ARRAY
63673: PUSH
63674: LD_VAR 0 7
63678: PUSH
63679: LD_INT 3
63681: ARRAY
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: PPUSH
63689: CALL_OW 2
63693: PPUSH
63694: CALL_OW 1
63698: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
63699: LD_ADDR_VAR 0 5
63703: PUSH
63704: LD_VAR 0 5
63708: PPUSH
63709: LD_INT 1
63711: PPUSH
63712: CALL_OW 3
63716: ST_TO_ADDR
// if not ext_list then
63717: LD_VAR 0 5
63721: NOT
63722: IFFALSE 63728
// exit ;
63724: POP
63725: POP
63726: GO 63732
// end ;
63728: GO 63603
63730: POP
63731: POP
// end ;
63732: LD_VAR 0 6
63736: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
63737: LD_INT 0
63739: PPUSH
// if not mc_bases or not base or not weapon_list then
63740: LD_EXP 101
63744: NOT
63745: PUSH
63746: LD_VAR 0 1
63750: NOT
63751: OR
63752: PUSH
63753: LD_VAR 0 2
63757: NOT
63758: OR
63759: IFFALSE 63763
// exit ;
63761: GO 63788
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
63763: LD_ADDR_EXP 140
63767: PUSH
63768: LD_EXP 140
63772: PPUSH
63773: LD_VAR 0 1
63777: PPUSH
63778: LD_VAR 0 2
63782: PPUSH
63783: CALL_OW 1
63787: ST_TO_ADDR
// end ;
63788: LD_VAR 0 3
63792: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
63793: LD_INT 0
63795: PPUSH
// if not mc_bases or not base or not tech_list then
63796: LD_EXP 101
63800: NOT
63801: PUSH
63802: LD_VAR 0 1
63806: NOT
63807: OR
63808: PUSH
63809: LD_VAR 0 2
63813: NOT
63814: OR
63815: IFFALSE 63819
// exit ;
63817: GO 63844
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
63819: LD_ADDR_EXP 128
63823: PUSH
63824: LD_EXP 128
63828: PPUSH
63829: LD_VAR 0 1
63833: PPUSH
63834: LD_VAR 0 2
63838: PPUSH
63839: CALL_OW 1
63843: ST_TO_ADDR
// end ;
63844: LD_VAR 0 3
63848: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
63849: LD_INT 0
63851: PPUSH
// if not mc_bases or not parking_area or not base then
63852: LD_EXP 101
63856: NOT
63857: PUSH
63858: LD_VAR 0 2
63862: NOT
63863: OR
63864: PUSH
63865: LD_VAR 0 1
63869: NOT
63870: OR
63871: IFFALSE 63875
// exit ;
63873: GO 63900
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
63875: LD_ADDR_EXP 125
63879: PUSH
63880: LD_EXP 125
63884: PPUSH
63885: LD_VAR 0 1
63889: PPUSH
63890: LD_VAR 0 2
63894: PPUSH
63895: CALL_OW 1
63899: ST_TO_ADDR
// end ;
63900: LD_VAR 0 3
63904: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
63905: LD_INT 0
63907: PPUSH
// if not mc_bases or not base or not scan_area then
63908: LD_EXP 101
63912: NOT
63913: PUSH
63914: LD_VAR 0 1
63918: NOT
63919: OR
63920: PUSH
63921: LD_VAR 0 2
63925: NOT
63926: OR
63927: IFFALSE 63931
// exit ;
63929: GO 63956
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
63931: LD_ADDR_EXP 126
63935: PUSH
63936: LD_EXP 126
63940: PPUSH
63941: LD_VAR 0 1
63945: PPUSH
63946: LD_VAR 0 2
63950: PPUSH
63951: CALL_OW 1
63955: ST_TO_ADDR
// end ;
63956: LD_VAR 0 3
63960: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
63961: LD_INT 0
63963: PPUSH
63964: PPUSH
// if not mc_bases or not base then
63965: LD_EXP 101
63969: NOT
63970: PUSH
63971: LD_VAR 0 1
63975: NOT
63976: OR
63977: IFFALSE 63981
// exit ;
63979: GO 64045
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
63981: LD_ADDR_VAR 0 3
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 3
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 11
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
64008: LD_ADDR_EXP 128
64012: PUSH
64013: LD_EXP 128
64017: PPUSH
64018: LD_VAR 0 1
64022: PPUSH
64023: LD_EXP 128
64027: PUSH
64028: LD_VAR 0 1
64032: ARRAY
64033: PUSH
64034: LD_VAR 0 3
64038: DIFF
64039: PPUSH
64040: CALL_OW 1
64044: ST_TO_ADDR
// end ;
64045: LD_VAR 0 2
64049: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
64050: LD_INT 0
64052: PPUSH
// result := mc_vehicles [ base ] ;
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: LD_EXP 120
64062: PUSH
64063: LD_VAR 0 1
64067: ARRAY
64068: ST_TO_ADDR
// if onlyCombat then
64069: LD_VAR 0 2
64073: IFFALSE 64245
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
64075: LD_ADDR_VAR 0 3
64079: PUSH
64080: LD_VAR 0 3
64084: PUSH
64085: LD_VAR 0 3
64089: PPUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 34
64095: PUSH
64096: LD_INT 12
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 34
64105: PUSH
64106: LD_INT 51
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 34
64115: PUSH
64116: LD_INT 89
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 34
64125: PUSH
64126: LD_INT 32
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 34
64135: PUSH
64136: LD_INT 13
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 34
64145: PUSH
64146: LD_INT 52
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 34
64155: PUSH
64156: LD_INT 88
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 34
64165: PUSH
64166: LD_INT 14
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 34
64175: PUSH
64176: LD_INT 53
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 34
64185: PUSH
64186: LD_INT 98
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 34
64195: PUSH
64196: LD_INT 31
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 34
64205: PUSH
64206: LD_INT 48
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 34
64215: PUSH
64216: LD_INT 8
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: PPUSH
64239: CALL_OW 72
64243: DIFF
64244: ST_TO_ADDR
// end ; end_of_file
64245: LD_VAR 0 3
64249: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
64250: LD_INT 0
64252: PPUSH
64253: PPUSH
64254: PPUSH
// if not mc_bases or not skirmish then
64255: LD_EXP 101
64259: NOT
64260: PUSH
64261: LD_EXP 99
64265: NOT
64266: OR
64267: IFFALSE 64271
// exit ;
64269: GO 64436
// for i = 1 to mc_bases do
64271: LD_ADDR_VAR 0 4
64275: PUSH
64276: DOUBLE
64277: LD_INT 1
64279: DEC
64280: ST_TO_ADDR
64281: LD_EXP 101
64285: PUSH
64286: FOR_TO
64287: IFFALSE 64434
// begin if sci in mc_bases [ i ] then
64289: LD_VAR 0 2
64293: PUSH
64294: LD_EXP 101
64298: PUSH
64299: LD_VAR 0 4
64303: ARRAY
64304: IN
64305: IFFALSE 64432
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
64307: LD_ADDR_EXP 130
64311: PUSH
64312: LD_EXP 130
64316: PPUSH
64317: LD_VAR 0 4
64321: PUSH
64322: LD_EXP 130
64326: PUSH
64327: LD_VAR 0 4
64331: ARRAY
64332: PUSH
64333: LD_INT 1
64335: PLUS
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PPUSH
64341: LD_VAR 0 1
64345: PPUSH
64346: CALL 74020 0 3
64350: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
64351: LD_ADDR_VAR 0 5
64355: PUSH
64356: LD_EXP 101
64360: PUSH
64361: LD_VAR 0 4
64365: ARRAY
64366: PPUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 30
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 30
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: PPUSH
64395: CALL_OW 72
64399: PPUSH
64400: LD_VAR 0 1
64404: PPUSH
64405: CALL_OW 74
64409: ST_TO_ADDR
// if tmp then
64410: LD_VAR 0 5
64414: IFFALSE 64430
// ComStandNearbyBuilding ( ape , tmp ) ;
64416: LD_VAR 0 1
64420: PPUSH
64421: LD_VAR 0 5
64425: PPUSH
64426: CALL 70622 0 2
// break ;
64430: GO 64434
// end ; end ;
64432: GO 64286
64434: POP
64435: POP
// end ;
64436: LD_VAR 0 3
64440: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
64441: LD_INT 0
64443: PPUSH
64444: PPUSH
64445: PPUSH
// if not mc_bases or not skirmish then
64446: LD_EXP 101
64450: NOT
64451: PUSH
64452: LD_EXP 99
64456: NOT
64457: OR
64458: IFFALSE 64462
// exit ;
64460: GO 64551
// for i = 1 to mc_bases do
64462: LD_ADDR_VAR 0 4
64466: PUSH
64467: DOUBLE
64468: LD_INT 1
64470: DEC
64471: ST_TO_ADDR
64472: LD_EXP 101
64476: PUSH
64477: FOR_TO
64478: IFFALSE 64549
// begin if building in mc_busy_turret_list [ i ] then
64480: LD_VAR 0 1
64484: PUSH
64485: LD_EXP 111
64489: PUSH
64490: LD_VAR 0 4
64494: ARRAY
64495: IN
64496: IFFALSE 64547
// begin tmp := mc_busy_turret_list [ i ] diff building ;
64498: LD_ADDR_VAR 0 5
64502: PUSH
64503: LD_EXP 111
64507: PUSH
64508: LD_VAR 0 4
64512: ARRAY
64513: PUSH
64514: LD_VAR 0 1
64518: DIFF
64519: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
64520: LD_ADDR_EXP 111
64524: PUSH
64525: LD_EXP 111
64529: PPUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: LD_VAR 0 5
64539: PPUSH
64540: CALL_OW 1
64544: ST_TO_ADDR
// break ;
64545: GO 64549
// end ; end ;
64547: GO 64477
64549: POP
64550: POP
// end ;
64551: LD_VAR 0 3
64555: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
64556: LD_INT 0
64558: PPUSH
64559: PPUSH
64560: PPUSH
// if not mc_bases or not skirmish then
64561: LD_EXP 101
64565: NOT
64566: PUSH
64567: LD_EXP 99
64571: NOT
64572: OR
64573: IFFALSE 64577
// exit ;
64575: GO 64776
// for i = 1 to mc_bases do
64577: LD_ADDR_VAR 0 5
64581: PUSH
64582: DOUBLE
64583: LD_INT 1
64585: DEC
64586: ST_TO_ADDR
64587: LD_EXP 101
64591: PUSH
64592: FOR_TO
64593: IFFALSE 64774
// if building in mc_bases [ i ] then
64595: LD_VAR 0 1
64599: PUSH
64600: LD_EXP 101
64604: PUSH
64605: LD_VAR 0 5
64609: ARRAY
64610: IN
64611: IFFALSE 64772
// begin tmp := mc_bases [ i ] diff building ;
64613: LD_ADDR_VAR 0 6
64617: PUSH
64618: LD_EXP 101
64622: PUSH
64623: LD_VAR 0 5
64627: ARRAY
64628: PUSH
64629: LD_VAR 0 1
64633: DIFF
64634: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
64635: LD_ADDR_EXP 101
64639: PUSH
64640: LD_EXP 101
64644: PPUSH
64645: LD_VAR 0 5
64649: PPUSH
64650: LD_VAR 0 6
64654: PPUSH
64655: CALL_OW 1
64659: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
64660: LD_VAR 0 1
64664: PUSH
64665: LD_EXP 109
64669: PUSH
64670: LD_VAR 0 5
64674: ARRAY
64675: IN
64676: IFFALSE 64715
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
64678: LD_ADDR_EXP 109
64682: PUSH
64683: LD_EXP 109
64687: PPUSH
64688: LD_VAR 0 5
64692: PPUSH
64693: LD_EXP 109
64697: PUSH
64698: LD_VAR 0 5
64702: ARRAY
64703: PUSH
64704: LD_VAR 0 1
64708: DIFF
64709: PPUSH
64710: CALL_OW 1
64714: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
64715: LD_VAR 0 1
64719: PUSH
64720: LD_EXP 110
64724: PUSH
64725: LD_VAR 0 5
64729: ARRAY
64730: IN
64731: IFFALSE 64770
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
64733: LD_ADDR_EXP 110
64737: PUSH
64738: LD_EXP 110
64742: PPUSH
64743: LD_VAR 0 5
64747: PPUSH
64748: LD_EXP 110
64752: PUSH
64753: LD_VAR 0 5
64757: ARRAY
64758: PUSH
64759: LD_VAR 0 1
64763: DIFF
64764: PPUSH
64765: CALL_OW 1
64769: ST_TO_ADDR
// break ;
64770: GO 64774
// end ;
64772: GO 64592
64774: POP
64775: POP
// end ;
64776: LD_VAR 0 4
64780: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
64781: LD_INT 0
64783: PPUSH
64784: PPUSH
64785: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
64786: LD_EXP 101
64790: NOT
64791: PUSH
64792: LD_EXP 99
64796: NOT
64797: OR
64798: PUSH
64799: LD_VAR 0 3
64803: PUSH
64804: LD_EXP 127
64808: IN
64809: NOT
64810: OR
64811: IFFALSE 64815
// exit ;
64813: GO 64938
// for i = 1 to mc_vehicles do
64815: LD_ADDR_VAR 0 6
64819: PUSH
64820: DOUBLE
64821: LD_INT 1
64823: DEC
64824: ST_TO_ADDR
64825: LD_EXP 120
64829: PUSH
64830: FOR_TO
64831: IFFALSE 64936
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
64833: LD_VAR 0 2
64837: PUSH
64838: LD_EXP 120
64842: PUSH
64843: LD_VAR 0 6
64847: ARRAY
64848: IN
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_EXP 120
64859: PUSH
64860: LD_VAR 0 6
64864: ARRAY
64865: IN
64866: OR
64867: IFFALSE 64934
// begin tmp := mc_vehicles [ i ] diff old ;
64869: LD_ADDR_VAR 0 7
64873: PUSH
64874: LD_EXP 120
64878: PUSH
64879: LD_VAR 0 6
64883: ARRAY
64884: PUSH
64885: LD_VAR 0 2
64889: DIFF
64890: ST_TO_ADDR
// tmp := tmp diff new ;
64891: LD_ADDR_VAR 0 7
64895: PUSH
64896: LD_VAR 0 7
64900: PUSH
64901: LD_VAR 0 1
64905: DIFF
64906: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
64907: LD_ADDR_EXP 120
64911: PUSH
64912: LD_EXP 120
64916: PPUSH
64917: LD_VAR 0 6
64921: PPUSH
64922: LD_VAR 0 7
64926: PPUSH
64927: CALL_OW 1
64931: ST_TO_ADDR
// break ;
64932: GO 64936
// end ;
64934: GO 64830
64936: POP
64937: POP
// end ;
64938: LD_VAR 0 5
64942: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
64943: LD_INT 0
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
// if not mc_bases or not skirmish then
64949: LD_EXP 101
64953: NOT
64954: PUSH
64955: LD_EXP 99
64959: NOT
64960: OR
64961: IFFALSE 64965
// exit ;
64963: GO 65385
// repeat wait ( 0 0$1 ) ;
64965: LD_INT 35
64967: PPUSH
64968: CALL_OW 67
// until not mc_block_vehicle_constructed_thread ;
64972: LD_EXP 145
64976: NOT
64977: IFFALSE 64965
// mc_block_vehicle_constructed_thread := true ;
64979: LD_ADDR_EXP 145
64983: PUSH
64984: LD_INT 1
64986: ST_TO_ADDR
// side := GetSide ( vehicle ) ;
64987: LD_ADDR_VAR 0 5
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 255
65001: ST_TO_ADDR
// for i = 1 to mc_bases do
65002: LD_ADDR_VAR 0 4
65006: PUSH
65007: DOUBLE
65008: LD_INT 1
65010: DEC
65011: ST_TO_ADDR
65012: LD_EXP 101
65016: PUSH
65017: FOR_TO
65018: IFFALSE 65375
// begin if factory in mc_bases [ i ] then
65020: LD_VAR 0 2
65024: PUSH
65025: LD_EXP 101
65029: PUSH
65030: LD_VAR 0 4
65034: ARRAY
65035: IN
65036: IFFALSE 65373
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
65038: LD_EXP 123
65042: PUSH
65043: LD_VAR 0 4
65047: ARRAY
65048: PUSH
65049: LD_EXP 112
65053: PUSH
65054: LD_VAR 0 4
65058: ARRAY
65059: LESS
65060: PUSH
65061: LD_VAR 0 1
65065: PPUSH
65066: CALL_OW 264
65070: PUSH
65071: LD_INT 31
65073: PUSH
65074: LD_INT 32
65076: PUSH
65077: LD_INT 51
65079: PUSH
65080: LD_INT 89
65082: PUSH
65083: LD_INT 12
65085: PUSH
65086: LD_INT 30
65088: PUSH
65089: LD_INT 98
65091: PUSH
65092: LD_INT 11
65094: PUSH
65095: LD_INT 53
65097: PUSH
65098: LD_INT 14
65100: PUSH
65101: LD_INT 91
65103: PUSH
65104: LD_INT 29
65106: PUSH
65107: LD_INT 99
65109: PUSH
65110: LD_INT 13
65112: PUSH
65113: LD_INT 52
65115: PUSH
65116: LD_INT 88
65118: PUSH
65119: LD_INT 48
65121: PUSH
65122: LD_INT 8
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: IN
65145: NOT
65146: AND
65147: IFFALSE 65195
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
65149: LD_ADDR_EXP 123
65153: PUSH
65154: LD_EXP 123
65158: PPUSH
65159: LD_VAR 0 4
65163: PUSH
65164: LD_EXP 123
65168: PUSH
65169: LD_VAR 0 4
65173: ARRAY
65174: PUSH
65175: LD_INT 1
65177: PLUS
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PPUSH
65183: LD_VAR 0 1
65187: PPUSH
65188: CALL 74020 0 3
65192: ST_TO_ADDR
65193: GO 65239
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
65195: LD_ADDR_EXP 120
65199: PUSH
65200: LD_EXP 120
65204: PPUSH
65205: LD_VAR 0 4
65209: PUSH
65210: LD_EXP 120
65214: PUSH
65215: LD_VAR 0 4
65219: ARRAY
65220: PUSH
65221: LD_INT 1
65223: PLUS
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PPUSH
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL 74020 0 3
65238: ST_TO_ADDR
// mc_block_vehicle_constructed_thread := false ;
65239: LD_ADDR_EXP 145
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 263
65256: PUSH
65257: LD_INT 2
65259: EQUAL
65260: IFFALSE 65289
// begin repeat wait ( 0 0$3 ) ;
65262: LD_INT 105
65264: PPUSH
65265: CALL_OW 67
// Connect ( vehicle ) ;
65269: LD_VAR 0 1
65273: PPUSH
65274: CALL 76998 0 1
// until IsControledBy ( vehicle ) ;
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL_OW 312
65287: IFFALSE 65262
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
65289: LD_VAR 0 1
65293: PPUSH
65294: LD_EXP 125
65298: PUSH
65299: LD_VAR 0 4
65303: ARRAY
65304: PPUSH
65305: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 263
65318: PUSH
65319: LD_INT 1
65321: NONEQUAL
65322: IFFALSE 65326
// break ;
65324: GO 65375
// repeat wait ( 0 0$1 ) ;
65326: LD_INT 35
65328: PPUSH
65329: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_EXP 125
65342: PUSH
65343: LD_VAR 0 4
65347: ARRAY
65348: PPUSH
65349: CALL_OW 308
65353: IFFALSE 65326
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
65355: LD_VAR 0 1
65359: PPUSH
65360: CALL_OW 311
65364: PPUSH
65365: CALL_OW 121
// exit ;
65369: POP
65370: POP
65371: GO 65385
// end ; end ;
65373: GO 65017
65375: POP
65376: POP
// mc_block_vehicle_constructed_thread := false ;
65377: LD_ADDR_EXP 145
65381: PUSH
65382: LD_INT 0
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 3
65389: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
// if not mc_bases or not skirmish then
65396: LD_EXP 101
65400: NOT
65401: PUSH
65402: LD_EXP 99
65406: NOT
65407: OR
65408: IFFALSE 65412
// exit ;
65410: GO 65765
// repeat wait ( 0 0$1 ) ;
65412: LD_INT 35
65414: PPUSH
65415: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
65419: LD_VAR 0 2
65423: PPUSH
65424: LD_VAR 0 3
65428: PPUSH
65429: CALL_OW 284
65433: IFFALSE 65412
// if GetResourceTypeXY ( x , y ) = mat_artefact then
65435: LD_VAR 0 2
65439: PPUSH
65440: LD_VAR 0 3
65444: PPUSH
65445: CALL_OW 283
65449: PUSH
65450: LD_INT 4
65452: EQUAL
65453: IFFALSE 65457
// exit ;
65455: GO 65765
// for i = 1 to mc_bases do
65457: LD_ADDR_VAR 0 7
65461: PUSH
65462: DOUBLE
65463: LD_INT 1
65465: DEC
65466: ST_TO_ADDR
65467: LD_EXP 101
65471: PUSH
65472: FOR_TO
65473: IFFALSE 65763
// begin if mc_crates_area [ i ] then
65475: LD_EXP 119
65479: PUSH
65480: LD_VAR 0 7
65484: ARRAY
65485: IFFALSE 65596
// for j in mc_crates_area [ i ] do
65487: LD_ADDR_VAR 0 8
65491: PUSH
65492: LD_EXP 119
65496: PUSH
65497: LD_VAR 0 7
65501: ARRAY
65502: PUSH
65503: FOR_IN
65504: IFFALSE 65594
// if InArea ( x , y , j ) then
65506: LD_VAR 0 2
65510: PPUSH
65511: LD_VAR 0 3
65515: PPUSH
65516: LD_VAR 0 8
65520: PPUSH
65521: CALL_OW 309
65525: IFFALSE 65592
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65527: LD_ADDR_EXP 117
65531: PUSH
65532: LD_EXP 117
65536: PPUSH
65537: LD_VAR 0 7
65541: PUSH
65542: LD_EXP 117
65546: PUSH
65547: LD_VAR 0 7
65551: ARRAY
65552: PUSH
65553: LD_INT 1
65555: PLUS
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PPUSH
65561: LD_VAR 0 4
65565: PUSH
65566: LD_VAR 0 2
65570: PUSH
65571: LD_VAR 0 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PPUSH
65581: CALL 74020 0 3
65585: ST_TO_ADDR
// exit ;
65586: POP
65587: POP
65588: POP
65589: POP
65590: GO 65765
// end ;
65592: GO 65503
65594: POP
65595: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65596: LD_ADDR_VAR 0 9
65600: PUSH
65601: LD_EXP 101
65605: PUSH
65606: LD_VAR 0 7
65610: ARRAY
65611: PPUSH
65612: LD_INT 2
65614: PUSH
65615: LD_INT 30
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 30
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: PPUSH
65640: CALL_OW 72
65644: ST_TO_ADDR
// if not depot then
65645: LD_VAR 0 9
65649: NOT
65650: IFFALSE 65654
// continue ;
65652: GO 65472
// for j in depot do
65654: LD_ADDR_VAR 0 8
65658: PUSH
65659: LD_VAR 0 9
65663: PUSH
65664: FOR_IN
65665: IFFALSE 65759
// if GetDistUnitXY ( j , x , y ) < 30 then
65667: LD_VAR 0 8
65671: PPUSH
65672: LD_VAR 0 2
65676: PPUSH
65677: LD_VAR 0 3
65681: PPUSH
65682: CALL_OW 297
65686: PUSH
65687: LD_INT 30
65689: LESS
65690: IFFALSE 65757
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65692: LD_ADDR_EXP 117
65696: PUSH
65697: LD_EXP 117
65701: PPUSH
65702: LD_VAR 0 7
65706: PUSH
65707: LD_EXP 117
65711: PUSH
65712: LD_VAR 0 7
65716: ARRAY
65717: PUSH
65718: LD_INT 1
65720: PLUS
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PPUSH
65726: LD_VAR 0 4
65730: PUSH
65731: LD_VAR 0 2
65735: PUSH
65736: LD_VAR 0 3
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: PPUSH
65746: CALL 74020 0 3
65750: ST_TO_ADDR
// exit ;
65751: POP
65752: POP
65753: POP
65754: POP
65755: GO 65765
// end ;
65757: GO 65664
65759: POP
65760: POP
// end ;
65761: GO 65472
65763: POP
65764: POP
// end ;
65765: LD_VAR 0 6
65769: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
65774: PPUSH
65775: PPUSH
// if not mc_bases or not skirmish then
65776: LD_EXP 101
65780: NOT
65781: PUSH
65782: LD_EXP 99
65786: NOT
65787: OR
65788: IFFALSE 65792
// exit ;
65790: GO 66069
// side := GetSide ( lab ) ;
65792: LD_ADDR_VAR 0 4
65796: PUSH
65797: LD_VAR 0 2
65801: PPUSH
65802: CALL_OW 255
65806: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
65807: LD_VAR 0 4
65811: PUSH
65812: LD_EXP 127
65816: IN
65817: NOT
65818: PUSH
65819: LD_EXP 128
65823: NOT
65824: OR
65825: PUSH
65826: LD_EXP 101
65830: NOT
65831: OR
65832: IFFALSE 65836
// exit ;
65834: GO 66069
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
65836: LD_ADDR_EXP 128
65840: PUSH
65841: LD_EXP 128
65845: PPUSH
65846: LD_VAR 0 4
65850: PPUSH
65851: LD_EXP 128
65855: PUSH
65856: LD_VAR 0 4
65860: ARRAY
65861: PUSH
65862: LD_VAR 0 1
65866: DIFF
65867: PPUSH
65868: CALL_OW 1
65872: ST_TO_ADDR
// for i = 1 to mc_bases do
65873: LD_ADDR_VAR 0 5
65877: PUSH
65878: DOUBLE
65879: LD_INT 1
65881: DEC
65882: ST_TO_ADDR
65883: LD_EXP 101
65887: PUSH
65888: FOR_TO
65889: IFFALSE 66067
// begin if lab in mc_bases [ i ] then
65891: LD_VAR 0 2
65895: PUSH
65896: LD_EXP 101
65900: PUSH
65901: LD_VAR 0 5
65905: ARRAY
65906: IN
65907: IFFALSE 66065
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
65909: LD_VAR 0 1
65913: PUSH
65914: LD_INT 11
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: IN
65932: PUSH
65933: LD_EXP 131
65937: PUSH
65938: LD_VAR 0 5
65942: ARRAY
65943: AND
65944: IFFALSE 66065
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
65946: LD_ADDR_VAR 0 6
65950: PUSH
65951: LD_EXP 131
65955: PUSH
65956: LD_VAR 0 5
65960: ARRAY
65961: PUSH
65962: LD_INT 1
65964: ARRAY
65965: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65966: LD_ADDR_EXP 131
65970: PUSH
65971: LD_EXP 131
65975: PPUSH
65976: LD_VAR 0 5
65980: PPUSH
65981: EMPTY
65982: PPUSH
65983: CALL_OW 1
65987: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
65988: LD_VAR 0 6
65992: PPUSH
65993: LD_INT 0
65995: PPUSH
65996: CALL_OW 109
// ComExitBuilding ( tmp ) ;
66000: LD_VAR 0 6
66004: PPUSH
66005: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
66009: LD_ADDR_EXP 130
66013: PUSH
66014: LD_EXP 130
66018: PPUSH
66019: LD_VAR 0 5
66023: PPUSH
66024: LD_EXP 130
66028: PUSH
66029: LD_VAR 0 5
66033: ARRAY
66034: PPUSH
66035: LD_INT 1
66037: PPUSH
66038: LD_VAR 0 6
66042: PPUSH
66043: CALL_OW 2
66047: PPUSH
66048: CALL_OW 1
66052: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
66053: LD_VAR 0 5
66057: PPUSH
66058: LD_INT 112
66060: PPUSH
66061: CALL 42519 0 2
// end ; end ; end ;
66065: GO 65888
66067: POP
66068: POP
// end ;
66069: LD_VAR 0 3
66073: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
66074: LD_INT 0
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
// if not mc_bases or not skirmish then
66084: LD_EXP 101
66088: NOT
66089: PUSH
66090: LD_EXP 99
66094: NOT
66095: OR
66096: IFFALSE 66100
// exit ;
66098: GO 67469
// for i = 1 to mc_bases do
66100: LD_ADDR_VAR 0 3
66104: PUSH
66105: DOUBLE
66106: LD_INT 1
66108: DEC
66109: ST_TO_ADDR
66110: LD_EXP 101
66114: PUSH
66115: FOR_TO
66116: IFFALSE 67467
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
66118: LD_VAR 0 1
66122: PUSH
66123: LD_EXP 101
66127: PUSH
66128: LD_VAR 0 3
66132: ARRAY
66133: IN
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_EXP 108
66144: PUSH
66145: LD_VAR 0 3
66149: ARRAY
66150: IN
66151: OR
66152: PUSH
66153: LD_VAR 0 1
66157: PUSH
66158: LD_EXP 123
66162: PUSH
66163: LD_VAR 0 3
66167: ARRAY
66168: IN
66169: OR
66170: PUSH
66171: LD_VAR 0 1
66175: PUSH
66176: LD_EXP 120
66180: PUSH
66181: LD_VAR 0 3
66185: ARRAY
66186: IN
66187: OR
66188: PUSH
66189: LD_VAR 0 1
66193: PUSH
66194: LD_EXP 130
66198: PUSH
66199: LD_VAR 0 3
66203: ARRAY
66204: IN
66205: OR
66206: PUSH
66207: LD_VAR 0 1
66211: PUSH
66212: LD_EXP 131
66216: PUSH
66217: LD_VAR 0 3
66221: ARRAY
66222: IN
66223: OR
66224: IFFALSE 67465
// begin if un in mc_ape [ i ] then
66226: LD_VAR 0 1
66230: PUSH
66231: LD_EXP 130
66235: PUSH
66236: LD_VAR 0 3
66240: ARRAY
66241: IN
66242: IFFALSE 66281
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
66244: LD_ADDR_EXP 130
66248: PUSH
66249: LD_EXP 130
66253: PPUSH
66254: LD_VAR 0 3
66258: PPUSH
66259: LD_EXP 130
66263: PUSH
66264: LD_VAR 0 3
66268: ARRAY
66269: PUSH
66270: LD_VAR 0 1
66274: DIFF
66275: PPUSH
66276: CALL_OW 1
66280: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
66281: LD_VAR 0 1
66285: PUSH
66286: LD_EXP 131
66290: PUSH
66291: LD_VAR 0 3
66295: ARRAY
66296: IN
66297: IFFALSE 66321
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
66299: LD_ADDR_EXP 131
66303: PUSH
66304: LD_EXP 131
66308: PPUSH
66309: LD_VAR 0 3
66313: PPUSH
66314: EMPTY
66315: PPUSH
66316: CALL_OW 1
66320: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 247
66330: PUSH
66331: LD_INT 2
66333: EQUAL
66334: PUSH
66335: LD_VAR 0 1
66339: PPUSH
66340: CALL_OW 110
66344: PUSH
66345: LD_INT 20
66347: EQUAL
66348: PUSH
66349: LD_VAR 0 1
66353: PUSH
66354: LD_EXP 123
66358: PUSH
66359: LD_VAR 0 3
66363: ARRAY
66364: IN
66365: OR
66366: PUSH
66367: LD_VAR 0 1
66371: PPUSH
66372: CALL_OW 264
66376: PUSH
66377: LD_INT 12
66379: PUSH
66380: LD_INT 51
66382: PUSH
66383: LD_INT 89
66385: PUSH
66386: LD_INT 32
66388: PUSH
66389: LD_INT 13
66391: PUSH
66392: LD_INT 52
66394: PUSH
66395: LD_INT 31
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: IN
66407: OR
66408: AND
66409: IFFALSE 66717
// begin if un in mc_defender [ i ] then
66411: LD_VAR 0 1
66415: PUSH
66416: LD_EXP 123
66420: PUSH
66421: LD_VAR 0 3
66425: ARRAY
66426: IN
66427: IFFALSE 66466
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
66429: LD_ADDR_EXP 123
66433: PUSH
66434: LD_EXP 123
66438: PPUSH
66439: LD_VAR 0 3
66443: PPUSH
66444: LD_EXP 123
66448: PUSH
66449: LD_VAR 0 3
66453: ARRAY
66454: PUSH
66455: LD_VAR 0 1
66459: DIFF
66460: PPUSH
66461: CALL_OW 1
66465: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
66466: LD_ADDR_VAR 0 8
66470: PUSH
66471: LD_VAR 0 3
66475: PPUSH
66476: LD_INT 3
66478: PPUSH
66479: CALL 63087 0 2
66483: ST_TO_ADDR
// if fac then
66484: LD_VAR 0 8
66488: IFFALSE 66717
// begin for j in fac do
66490: LD_ADDR_VAR 0 4
66494: PUSH
66495: LD_VAR 0 8
66499: PUSH
66500: FOR_IN
66501: IFFALSE 66715
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
66503: LD_ADDR_VAR 0 9
66507: PUSH
66508: LD_VAR 0 8
66512: PPUSH
66513: LD_VAR 0 1
66517: PPUSH
66518: CALL_OW 265
66522: PPUSH
66523: LD_VAR 0 1
66527: PPUSH
66528: CALL_OW 262
66532: PPUSH
66533: LD_VAR 0 1
66537: PPUSH
66538: CALL_OW 263
66542: PPUSH
66543: LD_VAR 0 1
66547: PPUSH
66548: CALL_OW 264
66552: PPUSH
66553: CALL 71518 0 5
66557: ST_TO_ADDR
// if components then
66558: LD_VAR 0 9
66562: IFFALSE 66713
// begin if GetWeapon ( un ) = ar_control_tower then
66564: LD_VAR 0 1
66568: PPUSH
66569: CALL_OW 264
66573: PUSH
66574: LD_INT 31
66576: EQUAL
66577: IFFALSE 66694
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
66579: LD_VAR 0 1
66583: PPUSH
66584: CALL_OW 311
66588: PPUSH
66589: LD_INT 0
66591: PPUSH
66592: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
66596: LD_ADDR_EXP 141
66600: PUSH
66601: LD_EXP 141
66605: PPUSH
66606: LD_VAR 0 3
66610: PPUSH
66611: LD_EXP 141
66615: PUSH
66616: LD_VAR 0 3
66620: ARRAY
66621: PUSH
66622: LD_VAR 0 1
66626: PPUSH
66627: CALL_OW 311
66631: DIFF
66632: PPUSH
66633: CALL_OW 1
66637: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
66638: LD_ADDR_VAR 0 7
66642: PUSH
66643: LD_EXP 122
66647: PUSH
66648: LD_VAR 0 3
66652: ARRAY
66653: PPUSH
66654: LD_INT 1
66656: PPUSH
66657: LD_VAR 0 9
66661: PPUSH
66662: CALL_OW 2
66666: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
66667: LD_ADDR_EXP 122
66671: PUSH
66672: LD_EXP 122
66676: PPUSH
66677: LD_VAR 0 3
66681: PPUSH
66682: LD_VAR 0 7
66686: PPUSH
66687: CALL_OW 1
66691: ST_TO_ADDR
// end else
66692: GO 66711
// MC_InsertProduceList ( i , [ components ] ) ;
66694: LD_VAR 0 3
66698: PPUSH
66699: LD_VAR 0 9
66703: PUSH
66704: EMPTY
66705: LIST
66706: PPUSH
66707: CALL 62632 0 2
// break ;
66711: GO 66715
// end ; end ;
66713: GO 66500
66715: POP
66716: POP
// end ; end ; if GetType ( un ) = unit_building then
66717: LD_VAR 0 1
66721: PPUSH
66722: CALL_OW 247
66726: PUSH
66727: LD_INT 3
66729: EQUAL
66730: IFFALSE 67133
// begin btype := GetBType ( un ) ;
66732: LD_ADDR_VAR 0 5
66736: PUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 266
66746: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
66747: LD_VAR 0 5
66751: PUSH
66752: LD_INT 29
66754: PUSH
66755: LD_INT 30
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: IN
66762: IFFALSE 66835
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
66764: LD_VAR 0 1
66768: PPUSH
66769: CALL_OW 250
66773: PPUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 251
66783: PPUSH
66784: LD_VAR 0 1
66788: PPUSH
66789: CALL_OW 255
66793: PPUSH
66794: CALL_OW 440
66798: NOT
66799: IFFALSE 66835
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
66801: LD_VAR 0 1
66805: PPUSH
66806: CALL_OW 250
66810: PPUSH
66811: LD_VAR 0 1
66815: PPUSH
66816: CALL_OW 251
66820: PPUSH
66821: LD_VAR 0 1
66825: PPUSH
66826: CALL_OW 255
66830: PPUSH
66831: CALL_OW 441
// end ; if btype = b_warehouse then
66835: LD_VAR 0 5
66839: PUSH
66840: LD_INT 1
66842: EQUAL
66843: IFFALSE 66861
// begin btype := b_depot ;
66845: LD_ADDR_VAR 0 5
66849: PUSH
66850: LD_INT 0
66852: ST_TO_ADDR
// pos := 1 ;
66853: LD_ADDR_VAR 0 6
66857: PUSH
66858: LD_INT 1
66860: ST_TO_ADDR
// end ; if btype = b_factory then
66861: LD_VAR 0 5
66865: PUSH
66866: LD_INT 3
66868: EQUAL
66869: IFFALSE 66887
// begin btype := b_workshop ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: LD_INT 2
66878: ST_TO_ADDR
// pos := 1 ;
66879: LD_ADDR_VAR 0 6
66883: PUSH
66884: LD_INT 1
66886: ST_TO_ADDR
// end ; if btype = b_barracks then
66887: LD_VAR 0 5
66891: PUSH
66892: LD_INT 5
66894: EQUAL
66895: IFFALSE 66905
// btype := b_armoury ;
66897: LD_ADDR_VAR 0 5
66901: PUSH
66902: LD_INT 4
66904: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
66905: LD_VAR 0 5
66909: PUSH
66910: LD_INT 7
66912: PUSH
66913: LD_INT 8
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: IN
66920: IFFALSE 66930
// btype := b_lab ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_INT 6
66929: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
66930: LD_ADDR_EXP 106
66934: PUSH
66935: LD_EXP 106
66939: PPUSH
66940: LD_VAR 0 3
66944: PUSH
66945: LD_EXP 106
66949: PUSH
66950: LD_VAR 0 3
66954: ARRAY
66955: PUSH
66956: LD_INT 1
66958: PLUS
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PPUSH
66964: LD_VAR 0 5
66968: PUSH
66969: LD_VAR 0 1
66973: PPUSH
66974: CALL_OW 250
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 251
66988: PUSH
66989: LD_VAR 0 1
66993: PPUSH
66994: CALL_OW 254
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: PPUSH
67005: CALL 74020 0 3
67009: ST_TO_ADDR
// if pos = 1 then
67010: LD_VAR 0 6
67014: PUSH
67015: LD_INT 1
67017: EQUAL
67018: IFFALSE 67133
// begin tmp := mc_build_list [ i ] ;
67020: LD_ADDR_VAR 0 7
67024: PUSH
67025: LD_EXP 106
67029: PUSH
67030: LD_VAR 0 3
67034: ARRAY
67035: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67036: LD_VAR 0 7
67040: PPUSH
67041: LD_INT 2
67043: PUSH
67044: LD_INT 30
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 30
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: PPUSH
67069: CALL_OW 72
67073: IFFALSE 67083
// pos := 2 ;
67075: LD_ADDR_VAR 0 6
67079: PUSH
67080: LD_INT 2
67082: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
67083: LD_ADDR_VAR 0 7
67087: PUSH
67088: LD_VAR 0 7
67092: PPUSH
67093: LD_VAR 0 6
67097: PPUSH
67098: LD_VAR 0 7
67102: PPUSH
67103: CALL 74346 0 3
67107: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
67108: LD_ADDR_EXP 106
67112: PUSH
67113: LD_EXP 106
67117: PPUSH
67118: LD_VAR 0 3
67122: PPUSH
67123: LD_VAR 0 7
67127: PPUSH
67128: CALL_OW 1
67132: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
67133: LD_VAR 0 1
67137: PUSH
67138: LD_EXP 101
67142: PUSH
67143: LD_VAR 0 3
67147: ARRAY
67148: IN
67149: IFFALSE 67188
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
67151: LD_ADDR_EXP 101
67155: PUSH
67156: LD_EXP 101
67160: PPUSH
67161: LD_VAR 0 3
67165: PPUSH
67166: LD_EXP 101
67170: PUSH
67171: LD_VAR 0 3
67175: ARRAY
67176: PUSH
67177: LD_VAR 0 1
67181: DIFF
67182: PPUSH
67183: CALL_OW 1
67187: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
67188: LD_VAR 0 1
67192: PUSH
67193: LD_EXP 108
67197: PUSH
67198: LD_VAR 0 3
67202: ARRAY
67203: IN
67204: IFFALSE 67243
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
67206: LD_ADDR_EXP 108
67210: PUSH
67211: LD_EXP 108
67215: PPUSH
67216: LD_VAR 0 3
67220: PPUSH
67221: LD_EXP 108
67225: PUSH
67226: LD_VAR 0 3
67230: ARRAY
67231: PUSH
67232: LD_VAR 0 1
67236: DIFF
67237: PPUSH
67238: CALL_OW 1
67242: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
67243: LD_VAR 0 1
67247: PUSH
67248: LD_EXP 120
67252: PUSH
67253: LD_VAR 0 3
67257: ARRAY
67258: IN
67259: IFFALSE 67298
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
67261: LD_ADDR_EXP 120
67265: PUSH
67266: LD_EXP 120
67270: PPUSH
67271: LD_VAR 0 3
67275: PPUSH
67276: LD_EXP 120
67280: PUSH
67281: LD_VAR 0 3
67285: ARRAY
67286: PUSH
67287: LD_VAR 0 1
67291: DIFF
67292: PPUSH
67293: CALL_OW 1
67297: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
67298: LD_VAR 0 1
67302: PUSH
67303: LD_EXP 123
67307: PUSH
67308: LD_VAR 0 3
67312: ARRAY
67313: IN
67314: IFFALSE 67353
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
67316: LD_ADDR_EXP 123
67320: PUSH
67321: LD_EXP 123
67325: PPUSH
67326: LD_VAR 0 3
67330: PPUSH
67331: LD_EXP 123
67335: PUSH
67336: LD_VAR 0 3
67340: ARRAY
67341: PUSH
67342: LD_VAR 0 1
67346: DIFF
67347: PPUSH
67348: CALL_OW 1
67352: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
67353: LD_VAR 0 1
67357: PUSH
67358: LD_EXP 110
67362: PUSH
67363: LD_VAR 0 3
67367: ARRAY
67368: IN
67369: IFFALSE 67408
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
67371: LD_ADDR_EXP 110
67375: PUSH
67376: LD_EXP 110
67380: PPUSH
67381: LD_VAR 0 3
67385: PPUSH
67386: LD_EXP 110
67390: PUSH
67391: LD_VAR 0 3
67395: ARRAY
67396: PUSH
67397: LD_VAR 0 1
67401: DIFF
67402: PPUSH
67403: CALL_OW 1
67407: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
67408: LD_VAR 0 1
67412: PUSH
67413: LD_EXP 109
67417: PUSH
67418: LD_VAR 0 3
67422: ARRAY
67423: IN
67424: IFFALSE 67463
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
67426: LD_ADDR_EXP 109
67430: PUSH
67431: LD_EXP 109
67435: PPUSH
67436: LD_VAR 0 3
67440: PPUSH
67441: LD_EXP 109
67445: PUSH
67446: LD_VAR 0 3
67450: ARRAY
67451: PUSH
67452: LD_VAR 0 1
67456: DIFF
67457: PPUSH
67458: CALL_OW 1
67462: ST_TO_ADDR
// end ; break ;
67463: GO 67467
// end ;
67465: GO 66115
67467: POP
67468: POP
// end ;
67469: LD_VAR 0 2
67473: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
67474: LD_INT 0
67476: PPUSH
67477: PPUSH
67478: PPUSH
// if not mc_bases or not skirmish then
67479: LD_EXP 101
67483: NOT
67484: PUSH
67485: LD_EXP 99
67489: NOT
67490: OR
67491: IFFALSE 67495
// exit ;
67493: GO 67710
// for i = 1 to mc_bases do
67495: LD_ADDR_VAR 0 3
67499: PUSH
67500: DOUBLE
67501: LD_INT 1
67503: DEC
67504: ST_TO_ADDR
67505: LD_EXP 101
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67708
// begin if building in mc_construct_list [ i ] then
67513: LD_VAR 0 1
67517: PUSH
67518: LD_EXP 108
67522: PUSH
67523: LD_VAR 0 3
67527: ARRAY
67528: IN
67529: IFFALSE 67706
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67531: LD_ADDR_EXP 108
67535: PUSH
67536: LD_EXP 108
67540: PPUSH
67541: LD_VAR 0 3
67545: PPUSH
67546: LD_EXP 108
67550: PUSH
67551: LD_VAR 0 3
67555: ARRAY
67556: PUSH
67557: LD_VAR 0 1
67561: DIFF
67562: PPUSH
67563: CALL_OW 1
67567: ST_TO_ADDR
// if building in mc_lab [ i ] then
67568: LD_VAR 0 1
67572: PUSH
67573: LD_EXP 134
67577: PUSH
67578: LD_VAR 0 3
67582: ARRAY
67583: IN
67584: IFFALSE 67639
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
67586: LD_ADDR_EXP 135
67590: PUSH
67591: LD_EXP 135
67595: PPUSH
67596: LD_VAR 0 3
67600: PPUSH
67601: LD_EXP 135
67605: PUSH
67606: LD_VAR 0 3
67610: ARRAY
67611: PPUSH
67612: LD_INT 1
67614: PPUSH
67615: LD_EXP 135
67619: PUSH
67620: LD_VAR 0 3
67624: ARRAY
67625: PPUSH
67626: LD_INT 0
67628: PPUSH
67629: CALL 73438 0 4
67633: PPUSH
67634: CALL_OW 1
67638: ST_TO_ADDR
// if not building in mc_bases [ i ] then
67639: LD_VAR 0 1
67643: PUSH
67644: LD_EXP 101
67648: PUSH
67649: LD_VAR 0 3
67653: ARRAY
67654: IN
67655: NOT
67656: IFFALSE 67702
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
67658: LD_ADDR_EXP 101
67662: PUSH
67663: LD_EXP 101
67667: PPUSH
67668: LD_VAR 0 3
67672: PUSH
67673: LD_EXP 101
67677: PUSH
67678: LD_VAR 0 3
67682: ARRAY
67683: PUSH
67684: LD_INT 1
67686: PLUS
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PPUSH
67692: LD_VAR 0 1
67696: PPUSH
67697: CALL 74020 0 3
67701: ST_TO_ADDR
// exit ;
67702: POP
67703: POP
67704: GO 67710
// end ; end ;
67706: GO 67510
67708: POP
67709: POP
// end ;
67710: LD_VAR 0 2
67714: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
67715: LD_INT 0
67717: PPUSH
67718: PPUSH
67719: PPUSH
67720: PPUSH
67721: PPUSH
67722: PPUSH
67723: PPUSH
// if not mc_bases or not skirmish then
67724: LD_EXP 101
67728: NOT
67729: PUSH
67730: LD_EXP 99
67734: NOT
67735: OR
67736: IFFALSE 67740
// exit ;
67738: GO 68401
// for i = 1 to mc_bases do
67740: LD_ADDR_VAR 0 3
67744: PUSH
67745: DOUBLE
67746: LD_INT 1
67748: DEC
67749: ST_TO_ADDR
67750: LD_EXP 101
67754: PUSH
67755: FOR_TO
67756: IFFALSE 68399
// begin if building in mc_construct_list [ i ] then
67758: LD_VAR 0 1
67762: PUSH
67763: LD_EXP 108
67767: PUSH
67768: LD_VAR 0 3
67772: ARRAY
67773: IN
67774: IFFALSE 68397
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67776: LD_ADDR_EXP 108
67780: PUSH
67781: LD_EXP 108
67785: PPUSH
67786: LD_VAR 0 3
67790: PPUSH
67791: LD_EXP 108
67795: PUSH
67796: LD_VAR 0 3
67800: ARRAY
67801: PUSH
67802: LD_VAR 0 1
67806: DIFF
67807: PPUSH
67808: CALL_OW 1
67812: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
67813: LD_ADDR_EXP 101
67817: PUSH
67818: LD_EXP 101
67822: PPUSH
67823: LD_VAR 0 3
67827: PUSH
67828: LD_EXP 101
67832: PUSH
67833: LD_VAR 0 3
67837: ARRAY
67838: PUSH
67839: LD_INT 1
67841: PLUS
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PPUSH
67847: LD_VAR 0 1
67851: PPUSH
67852: CALL 74020 0 3
67856: ST_TO_ADDR
// btype := GetBType ( building ) ;
67857: LD_ADDR_VAR 0 5
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: CALL_OW 266
67871: ST_TO_ADDR
// side := GetSide ( building ) ;
67872: LD_ADDR_VAR 0 8
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 255
67886: ST_TO_ADDR
// if btype = b_lab then
67887: LD_VAR 0 5
67891: PUSH
67892: LD_INT 6
67894: EQUAL
67895: IFFALSE 67945
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
67897: LD_ADDR_EXP 134
67901: PUSH
67902: LD_EXP 134
67906: PPUSH
67907: LD_VAR 0 3
67911: PUSH
67912: LD_EXP 134
67916: PUSH
67917: LD_VAR 0 3
67921: ARRAY
67922: PUSH
67923: LD_INT 1
67925: PLUS
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PPUSH
67931: LD_VAR 0 1
67935: PPUSH
67936: CALL 74020 0 3
67940: ST_TO_ADDR
// exit ;
67941: POP
67942: POP
67943: GO 68401
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
67945: LD_VAR 0 5
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: IN
67964: IFFALSE 68088
// begin if btype = b_armoury then
67966: LD_VAR 0 5
67970: PUSH
67971: LD_INT 4
67973: EQUAL
67974: IFFALSE 67984
// btype := b_barracks ;
67976: LD_ADDR_VAR 0 5
67980: PUSH
67981: LD_INT 5
67983: ST_TO_ADDR
// if btype = b_depot then
67984: LD_VAR 0 5
67988: PUSH
67989: LD_INT 0
67991: EQUAL
67992: IFFALSE 68002
// btype := b_warehouse ;
67994: LD_ADDR_VAR 0 5
67998: PUSH
67999: LD_INT 1
68001: ST_TO_ADDR
// if btype = b_workshop then
68002: LD_VAR 0 5
68006: PUSH
68007: LD_INT 2
68009: EQUAL
68010: IFFALSE 68020
// btype := b_factory ;
68012: LD_ADDR_VAR 0 5
68016: PUSH
68017: LD_INT 3
68019: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
68020: LD_VAR 0 5
68024: PPUSH
68025: LD_VAR 0 8
68029: PPUSH
68030: CALL_OW 323
68034: PUSH
68035: LD_INT 1
68037: EQUAL
68038: IFFALSE 68084
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
68040: LD_ADDR_EXP 133
68044: PUSH
68045: LD_EXP 133
68049: PPUSH
68050: LD_VAR 0 3
68054: PUSH
68055: LD_EXP 133
68059: PUSH
68060: LD_VAR 0 3
68064: ARRAY
68065: PUSH
68066: LD_INT 1
68068: PLUS
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PPUSH
68074: LD_VAR 0 1
68078: PPUSH
68079: CALL 74020 0 3
68083: ST_TO_ADDR
// exit ;
68084: POP
68085: POP
68086: GO 68401
// end ; if btype in [ b_bunker , b_turret ] then
68088: LD_VAR 0 5
68092: PUSH
68093: LD_INT 32
68095: PUSH
68096: LD_INT 33
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: IN
68103: IFFALSE 68393
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
68105: LD_ADDR_EXP 109
68109: PUSH
68110: LD_EXP 109
68114: PPUSH
68115: LD_VAR 0 3
68119: PUSH
68120: LD_EXP 109
68124: PUSH
68125: LD_VAR 0 3
68129: ARRAY
68130: PUSH
68131: LD_INT 1
68133: PLUS
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PPUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: CALL 74020 0 3
68148: ST_TO_ADDR
// if btype = b_bunker then
68149: LD_VAR 0 5
68153: PUSH
68154: LD_INT 32
68156: EQUAL
68157: IFFALSE 68393
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
68159: LD_ADDR_EXP 110
68163: PUSH
68164: LD_EXP 110
68168: PPUSH
68169: LD_VAR 0 3
68173: PUSH
68174: LD_EXP 110
68178: PUSH
68179: LD_VAR 0 3
68183: ARRAY
68184: PUSH
68185: LD_INT 1
68187: PLUS
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PPUSH
68193: LD_VAR 0 1
68197: PPUSH
68198: CALL 74020 0 3
68202: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
68203: LD_ADDR_VAR 0 6
68207: PUSH
68208: LD_EXP 101
68212: PUSH
68213: LD_VAR 0 3
68217: ARRAY
68218: PPUSH
68219: LD_INT 25
68221: PUSH
68222: LD_INT 1
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: PUSH
68232: LD_INT 54
68234: PUSH
68235: EMPTY
68236: LIST
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PPUSH
68246: CALL_OW 72
68250: ST_TO_ADDR
// if tmp then
68251: LD_VAR 0 6
68255: IFFALSE 68261
// exit ;
68257: POP
68258: POP
68259: GO 68401
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
68261: LD_ADDR_VAR 0 6
68265: PUSH
68266: LD_EXP 101
68270: PUSH
68271: LD_VAR 0 3
68275: ARRAY
68276: PPUSH
68277: LD_INT 2
68279: PUSH
68280: LD_INT 30
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 30
68292: PUSH
68293: LD_INT 5
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PPUSH
68305: CALL_OW 72
68309: ST_TO_ADDR
// if not tmp then
68310: LD_VAR 0 6
68314: NOT
68315: IFFALSE 68321
// exit ;
68317: POP
68318: POP
68319: GO 68401
// for j in tmp do
68321: LD_ADDR_VAR 0 4
68325: PUSH
68326: LD_VAR 0 6
68330: PUSH
68331: FOR_IN
68332: IFFALSE 68391
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
68334: LD_ADDR_VAR 0 7
68338: PUSH
68339: LD_VAR 0 4
68343: PPUSH
68344: CALL_OW 313
68348: PPUSH
68349: LD_INT 25
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PPUSH
68359: CALL_OW 72
68363: ST_TO_ADDR
// if units then
68364: LD_VAR 0 7
68368: IFFALSE 68389
// begin ComExitBuilding ( units [ 1 ] ) ;
68370: LD_VAR 0 7
68374: PUSH
68375: LD_INT 1
68377: ARRAY
68378: PPUSH
68379: CALL_OW 122
// exit ;
68383: POP
68384: POP
68385: POP
68386: POP
68387: GO 68401
// end ; end ;
68389: GO 68331
68391: POP
68392: POP
// end ; end ; exit ;
68393: POP
68394: POP
68395: GO 68401
// end ; end ;
68397: GO 67755
68399: POP
68400: POP
// end ;
68401: LD_VAR 0 2
68405: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
68406: LD_INT 0
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
68414: PPUSH
// if not mc_bases or not skirmish then
68415: LD_EXP 101
68419: NOT
68420: PUSH
68421: LD_EXP 99
68425: NOT
68426: OR
68427: IFFALSE 68431
// exit ;
68429: GO 68696
// btype := GetBType ( building ) ;
68431: LD_ADDR_VAR 0 6
68435: PUSH
68436: LD_VAR 0 1
68440: PPUSH
68441: CALL_OW 266
68445: ST_TO_ADDR
// x := GetX ( building ) ;
68446: LD_ADDR_VAR 0 7
68450: PUSH
68451: LD_VAR 0 1
68455: PPUSH
68456: CALL_OW 250
68460: ST_TO_ADDR
// y := GetY ( building ) ;
68461: LD_ADDR_VAR 0 8
68465: PUSH
68466: LD_VAR 0 1
68470: PPUSH
68471: CALL_OW 251
68475: ST_TO_ADDR
// d := GetDir ( building ) ;
68476: LD_ADDR_VAR 0 9
68480: PUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: CALL_OW 254
68490: ST_TO_ADDR
// for i = 1 to mc_bases do
68491: LD_ADDR_VAR 0 4
68495: PUSH
68496: DOUBLE
68497: LD_INT 1
68499: DEC
68500: ST_TO_ADDR
68501: LD_EXP 101
68505: PUSH
68506: FOR_TO
68507: IFFALSE 68694
// begin if not mc_build_list [ i ] then
68509: LD_EXP 106
68513: PUSH
68514: LD_VAR 0 4
68518: ARRAY
68519: NOT
68520: IFFALSE 68524
// continue ;
68522: GO 68506
// for j := 1 to mc_build_list [ i ] do
68524: LD_ADDR_VAR 0 5
68528: PUSH
68529: DOUBLE
68530: LD_INT 1
68532: DEC
68533: ST_TO_ADDR
68534: LD_EXP 106
68538: PUSH
68539: LD_VAR 0 4
68543: ARRAY
68544: PUSH
68545: FOR_TO
68546: IFFALSE 68690
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
68548: LD_VAR 0 6
68552: PUSH
68553: LD_VAR 0 7
68557: PUSH
68558: LD_VAR 0 8
68562: PUSH
68563: LD_VAR 0 9
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: PPUSH
68574: LD_EXP 106
68578: PUSH
68579: LD_VAR 0 4
68583: ARRAY
68584: PUSH
68585: LD_VAR 0 5
68589: ARRAY
68590: PPUSH
68591: CALL 80209 0 2
68595: IFFALSE 68688
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
68597: LD_ADDR_EXP 106
68601: PUSH
68602: LD_EXP 106
68606: PPUSH
68607: LD_VAR 0 4
68611: PPUSH
68612: LD_EXP 106
68616: PUSH
68617: LD_VAR 0 4
68621: ARRAY
68622: PPUSH
68623: LD_VAR 0 5
68627: PPUSH
68628: CALL_OW 3
68632: PPUSH
68633: CALL_OW 1
68637: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
68638: LD_ADDR_EXP 108
68642: PUSH
68643: LD_EXP 108
68647: PPUSH
68648: LD_VAR 0 4
68652: PUSH
68653: LD_EXP 108
68657: PUSH
68658: LD_VAR 0 4
68662: ARRAY
68663: PUSH
68664: LD_INT 1
68666: PLUS
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PPUSH
68672: LD_VAR 0 1
68676: PPUSH
68677: CALL 74020 0 3
68681: ST_TO_ADDR
// exit ;
68682: POP
68683: POP
68684: POP
68685: POP
68686: GO 68696
// end ;
68688: GO 68545
68690: POP
68691: POP
// end ;
68692: GO 68506
68694: POP
68695: POP
// end ;
68696: LD_VAR 0 3
68700: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
68701: LD_INT 0
68703: PPUSH
68704: PPUSH
68705: PPUSH
// if not mc_bases or not skirmish then
68706: LD_EXP 101
68710: NOT
68711: PUSH
68712: LD_EXP 99
68716: NOT
68717: OR
68718: IFFALSE 68722
// exit ;
68720: GO 68912
// for i = 1 to mc_bases do
68722: LD_ADDR_VAR 0 4
68726: PUSH
68727: DOUBLE
68728: LD_INT 1
68730: DEC
68731: ST_TO_ADDR
68732: LD_EXP 101
68736: PUSH
68737: FOR_TO
68738: IFFALSE 68825
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
68740: LD_VAR 0 1
68744: PUSH
68745: LD_EXP 109
68749: PUSH
68750: LD_VAR 0 4
68754: ARRAY
68755: IN
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_EXP 110
68766: PUSH
68767: LD_VAR 0 4
68771: ARRAY
68772: IN
68773: NOT
68774: AND
68775: IFFALSE 68823
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
68777: LD_ADDR_EXP 110
68781: PUSH
68782: LD_EXP 110
68786: PPUSH
68787: LD_VAR 0 4
68791: PUSH
68792: LD_EXP 110
68796: PUSH
68797: LD_VAR 0 4
68801: ARRAY
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PPUSH
68811: LD_VAR 0 1
68815: PPUSH
68816: CALL 74020 0 3
68820: ST_TO_ADDR
// break ;
68821: GO 68825
// end ; end ;
68823: GO 68737
68825: POP
68826: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
68827: LD_VAR 0 1
68831: PPUSH
68832: CALL_OW 257
68836: PUSH
68837: LD_EXP 127
68841: IN
68842: PUSH
68843: LD_VAR 0 1
68847: PPUSH
68848: CALL_OW 266
68852: PUSH
68853: LD_INT 5
68855: EQUAL
68856: AND
68857: PUSH
68858: LD_VAR 0 2
68862: PPUSH
68863: CALL_OW 110
68867: PUSH
68868: LD_INT 18
68870: NONEQUAL
68871: AND
68872: IFFALSE 68912
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
68874: LD_VAR 0 2
68878: PPUSH
68879: CALL_OW 257
68883: PUSH
68884: LD_INT 5
68886: PUSH
68887: LD_INT 8
68889: PUSH
68890: LD_INT 9
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: LIST
68897: IN
68898: IFFALSE 68912
// SetClass ( unit , 1 ) ;
68900: LD_VAR 0 2
68904: PPUSH
68905: LD_INT 1
68907: PPUSH
68908: CALL_OW 336
// end ;
68912: LD_VAR 0 3
68916: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
68917: LD_INT 0
68919: PPUSH
68920: PPUSH
// if not mc_bases or not skirmish then
68921: LD_EXP 101
68925: NOT
68926: PUSH
68927: LD_EXP 99
68931: NOT
68932: OR
68933: IFFALSE 68937
// exit ;
68935: GO 69053
// if GetLives ( abandoned_vehicle ) > 250 then
68937: LD_VAR 0 2
68941: PPUSH
68942: CALL_OW 256
68946: PUSH
68947: LD_INT 250
68949: GREATER
68950: IFFALSE 68954
// exit ;
68952: GO 69053
// for i = 1 to mc_bases do
68954: LD_ADDR_VAR 0 6
68958: PUSH
68959: DOUBLE
68960: LD_INT 1
68962: DEC
68963: ST_TO_ADDR
68964: LD_EXP 101
68968: PUSH
68969: FOR_TO
68970: IFFALSE 69051
// begin if driver in mc_bases [ i ] then
68972: LD_VAR 0 1
68976: PUSH
68977: LD_EXP 101
68981: PUSH
68982: LD_VAR 0 6
68986: ARRAY
68987: IN
68988: IFFALSE 69049
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
68990: LD_VAR 0 1
68994: PPUSH
68995: LD_EXP 101
68999: PUSH
69000: LD_VAR 0 6
69004: ARRAY
69005: PPUSH
69006: LD_INT 2
69008: PUSH
69009: LD_INT 30
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 30
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: PPUSH
69034: CALL_OW 72
69038: PUSH
69039: LD_INT 1
69041: ARRAY
69042: PPUSH
69043: CALL 107256 0 2
// break ;
69047: GO 69051
// end ; end ;
69049: GO 68969
69051: POP
69052: POP
// end ; end_of_file
69053: LD_VAR 0 5
69057: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
69058: LD_INT 0
69060: PPUSH
69061: PPUSH
// if exist_mode then
69062: LD_VAR 0 2
69066: IFFALSE 69091
// unit := CreateCharacter ( prefix & ident ) else
69068: LD_ADDR_VAR 0 5
69072: PUSH
69073: LD_VAR 0 3
69077: PUSH
69078: LD_VAR 0 1
69082: STR
69083: PPUSH
69084: CALL_OW 34
69088: ST_TO_ADDR
69089: GO 69106
// unit := NewCharacter ( ident ) ;
69091: LD_ADDR_VAR 0 5
69095: PUSH
69096: LD_VAR 0 1
69100: PPUSH
69101: CALL_OW 25
69105: ST_TO_ADDR
// result := unit ;
69106: LD_ADDR_VAR 0 4
69110: PUSH
69111: LD_VAR 0 5
69115: ST_TO_ADDR
// end ;
69116: LD_VAR 0 4
69120: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
69121: LD_INT 0
69123: PPUSH
69124: PPUSH
// if not side or not nation then
69125: LD_VAR 0 1
69129: NOT
69130: PUSH
69131: LD_VAR 0 2
69135: NOT
69136: OR
69137: IFFALSE 69141
// exit ;
69139: GO 69909
// case nation of nation_american :
69141: LD_VAR 0 2
69145: PUSH
69146: LD_INT 1
69148: DOUBLE
69149: EQUAL
69150: IFTRUE 69154
69152: GO 69368
69154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
69155: LD_ADDR_VAR 0 4
69159: PUSH
69160: LD_INT 35
69162: PUSH
69163: LD_INT 45
69165: PUSH
69166: LD_INT 46
69168: PUSH
69169: LD_INT 47
69171: PUSH
69172: LD_INT 82
69174: PUSH
69175: LD_INT 83
69177: PUSH
69178: LD_INT 84
69180: PUSH
69181: LD_INT 85
69183: PUSH
69184: LD_INT 86
69186: PUSH
69187: LD_INT 1
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: LD_INT 6
69195: PUSH
69196: LD_INT 15
69198: PUSH
69199: LD_INT 16
69201: PUSH
69202: LD_INT 7
69204: PUSH
69205: LD_INT 12
69207: PUSH
69208: LD_INT 13
69210: PUSH
69211: LD_INT 10
69213: PUSH
69214: LD_INT 14
69216: PUSH
69217: LD_INT 20
69219: PUSH
69220: LD_INT 21
69222: PUSH
69223: LD_INT 22
69225: PUSH
69226: LD_INT 25
69228: PUSH
69229: LD_INT 32
69231: PUSH
69232: LD_INT 27
69234: PUSH
69235: LD_INT 36
69237: PUSH
69238: LD_INT 69
69240: PUSH
69241: LD_INT 39
69243: PUSH
69244: LD_INT 34
69246: PUSH
69247: LD_INT 40
69249: PUSH
69250: LD_INT 48
69252: PUSH
69253: LD_INT 49
69255: PUSH
69256: LD_INT 50
69258: PUSH
69259: LD_INT 51
69261: PUSH
69262: LD_INT 52
69264: PUSH
69265: LD_INT 53
69267: PUSH
69268: LD_INT 54
69270: PUSH
69271: LD_INT 55
69273: PUSH
69274: LD_INT 56
69276: PUSH
69277: LD_INT 57
69279: PUSH
69280: LD_INT 58
69282: PUSH
69283: LD_INT 59
69285: PUSH
69286: LD_INT 60
69288: PUSH
69289: LD_INT 61
69291: PUSH
69292: LD_INT 62
69294: PUSH
69295: LD_INT 80
69297: PUSH
69298: LD_INT 82
69300: PUSH
69301: LD_INT 83
69303: PUSH
69304: LD_INT 84
69306: PUSH
69307: LD_INT 85
69309: PUSH
69310: LD_INT 86
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: ST_TO_ADDR
69366: GO 69833
69368: LD_INT 2
69370: DOUBLE
69371: EQUAL
69372: IFTRUE 69376
69374: GO 69602
69376: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
69377: LD_ADDR_VAR 0 4
69381: PUSH
69382: LD_INT 35
69384: PUSH
69385: LD_INT 45
69387: PUSH
69388: LD_INT 46
69390: PUSH
69391: LD_INT 47
69393: PUSH
69394: LD_INT 82
69396: PUSH
69397: LD_INT 83
69399: PUSH
69400: LD_INT 84
69402: PUSH
69403: LD_INT 85
69405: PUSH
69406: LD_INT 87
69408: PUSH
69409: LD_INT 70
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: LD_INT 11
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: LD_INT 5
69426: PUSH
69427: LD_INT 6
69429: PUSH
69430: LD_INT 15
69432: PUSH
69433: LD_INT 18
69435: PUSH
69436: LD_INT 7
69438: PUSH
69439: LD_INT 17
69441: PUSH
69442: LD_INT 8
69444: PUSH
69445: LD_INT 20
69447: PUSH
69448: LD_INT 21
69450: PUSH
69451: LD_INT 22
69453: PUSH
69454: LD_INT 72
69456: PUSH
69457: LD_INT 26
69459: PUSH
69460: LD_INT 69
69462: PUSH
69463: LD_INT 39
69465: PUSH
69466: LD_INT 40
69468: PUSH
69469: LD_INT 41
69471: PUSH
69472: LD_INT 42
69474: PUSH
69475: LD_INT 43
69477: PUSH
69478: LD_INT 48
69480: PUSH
69481: LD_INT 49
69483: PUSH
69484: LD_INT 50
69486: PUSH
69487: LD_INT 51
69489: PUSH
69490: LD_INT 52
69492: PUSH
69493: LD_INT 53
69495: PUSH
69496: LD_INT 54
69498: PUSH
69499: LD_INT 55
69501: PUSH
69502: LD_INT 56
69504: PUSH
69505: LD_INT 60
69507: PUSH
69508: LD_INT 61
69510: PUSH
69511: LD_INT 62
69513: PUSH
69514: LD_INT 66
69516: PUSH
69517: LD_INT 67
69519: PUSH
69520: LD_INT 68
69522: PUSH
69523: LD_INT 81
69525: PUSH
69526: LD_INT 82
69528: PUSH
69529: LD_INT 83
69531: PUSH
69532: LD_INT 84
69534: PUSH
69535: LD_INT 85
69537: PUSH
69538: LD_INT 87
69540: PUSH
69541: LD_INT 88
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: ST_TO_ADDR
69600: GO 69833
69602: LD_INT 3
69604: DOUBLE
69605: EQUAL
69606: IFTRUE 69610
69608: GO 69832
69610: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
69611: LD_ADDR_VAR 0 4
69615: PUSH
69616: LD_INT 46
69618: PUSH
69619: LD_INT 47
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 82
69630: PUSH
69631: LD_INT 83
69633: PUSH
69634: LD_INT 84
69636: PUSH
69637: LD_INT 85
69639: PUSH
69640: LD_INT 86
69642: PUSH
69643: LD_INT 11
69645: PUSH
69646: LD_INT 9
69648: PUSH
69649: LD_INT 20
69651: PUSH
69652: LD_INT 19
69654: PUSH
69655: LD_INT 21
69657: PUSH
69658: LD_INT 24
69660: PUSH
69661: LD_INT 22
69663: PUSH
69664: LD_INT 25
69666: PUSH
69667: LD_INT 28
69669: PUSH
69670: LD_INT 29
69672: PUSH
69673: LD_INT 30
69675: PUSH
69676: LD_INT 31
69678: PUSH
69679: LD_INT 37
69681: PUSH
69682: LD_INT 38
69684: PUSH
69685: LD_INT 32
69687: PUSH
69688: LD_INT 27
69690: PUSH
69691: LD_INT 33
69693: PUSH
69694: LD_INT 69
69696: PUSH
69697: LD_INT 39
69699: PUSH
69700: LD_INT 34
69702: PUSH
69703: LD_INT 40
69705: PUSH
69706: LD_INT 71
69708: PUSH
69709: LD_INT 23
69711: PUSH
69712: LD_INT 44
69714: PUSH
69715: LD_INT 48
69717: PUSH
69718: LD_INT 49
69720: PUSH
69721: LD_INT 50
69723: PUSH
69724: LD_INT 51
69726: PUSH
69727: LD_INT 52
69729: PUSH
69730: LD_INT 53
69732: PUSH
69733: LD_INT 54
69735: PUSH
69736: LD_INT 55
69738: PUSH
69739: LD_INT 56
69741: PUSH
69742: LD_INT 57
69744: PUSH
69745: LD_INT 58
69747: PUSH
69748: LD_INT 59
69750: PUSH
69751: LD_INT 63
69753: PUSH
69754: LD_INT 64
69756: PUSH
69757: LD_INT 65
69759: PUSH
69760: LD_INT 82
69762: PUSH
69763: LD_INT 83
69765: PUSH
69766: LD_INT 84
69768: PUSH
69769: LD_INT 85
69771: PUSH
69772: LD_INT 86
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: ST_TO_ADDR
69830: GO 69833
69832: POP
// if state > - 1 and state < 3 then
69833: LD_VAR 0 3
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: GREATER
69842: PUSH
69843: LD_VAR 0 3
69847: PUSH
69848: LD_INT 3
69850: LESS
69851: AND
69852: IFFALSE 69909
// for i in result do
69854: LD_ADDR_VAR 0 5
69858: PUSH
69859: LD_VAR 0 4
69863: PUSH
69864: FOR_IN
69865: IFFALSE 69907
// if GetTech ( i , side ) <> state then
69867: LD_VAR 0 5
69871: PPUSH
69872: LD_VAR 0 1
69876: PPUSH
69877: CALL_OW 321
69881: PUSH
69882: LD_VAR 0 3
69886: NONEQUAL
69887: IFFALSE 69905
// result := result diff i ;
69889: LD_ADDR_VAR 0 4
69893: PUSH
69894: LD_VAR 0 4
69898: PUSH
69899: LD_VAR 0 5
69903: DIFF
69904: ST_TO_ADDR
69905: GO 69864
69907: POP
69908: POP
// end ;
69909: LD_VAR 0 4
69913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
69914: LD_INT 0
69916: PPUSH
69917: PPUSH
69918: PPUSH
// result := true ;
69919: LD_ADDR_VAR 0 3
69923: PUSH
69924: LD_INT 1
69926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
69927: LD_ADDR_VAR 0 5
69931: PUSH
69932: LD_VAR 0 2
69936: PPUSH
69937: CALL_OW 480
69941: ST_TO_ADDR
// if not tmp then
69942: LD_VAR 0 5
69946: NOT
69947: IFFALSE 69951
// exit ;
69949: GO 70000
// for i in tmp do
69951: LD_ADDR_VAR 0 4
69955: PUSH
69956: LD_VAR 0 5
69960: PUSH
69961: FOR_IN
69962: IFFALSE 69998
// if GetTech ( i , side ) <> state_researched then
69964: LD_VAR 0 4
69968: PPUSH
69969: LD_VAR 0 1
69973: PPUSH
69974: CALL_OW 321
69978: PUSH
69979: LD_INT 2
69981: NONEQUAL
69982: IFFALSE 69996
// begin result := false ;
69984: LD_ADDR_VAR 0 3
69988: PUSH
69989: LD_INT 0
69991: ST_TO_ADDR
// exit ;
69992: POP
69993: POP
69994: GO 70000
// end ;
69996: GO 69961
69998: POP
69999: POP
// end ;
70000: LD_VAR 0 3
70004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
70005: LD_INT 0
70007: PPUSH
70008: PPUSH
70009: PPUSH
70010: PPUSH
70011: PPUSH
70012: PPUSH
70013: PPUSH
70014: PPUSH
70015: PPUSH
70016: PPUSH
70017: PPUSH
70018: PPUSH
70019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
70020: LD_VAR 0 1
70024: NOT
70025: PUSH
70026: LD_VAR 0 1
70030: PPUSH
70031: CALL_OW 257
70035: PUSH
70036: LD_INT 9
70038: NONEQUAL
70039: OR
70040: IFFALSE 70044
// exit ;
70042: GO 70617
// side := GetSide ( unit ) ;
70044: LD_ADDR_VAR 0 9
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 255
70058: ST_TO_ADDR
// tech_space := tech_spacanom ;
70059: LD_ADDR_VAR 0 12
70063: PUSH
70064: LD_INT 29
70066: ST_TO_ADDR
// tech_time := tech_taurad ;
70067: LD_ADDR_VAR 0 13
70071: PUSH
70072: LD_INT 28
70074: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
70075: LD_ADDR_VAR 0 11
70079: PUSH
70080: LD_VAR 0 1
70084: PPUSH
70085: CALL_OW 310
70089: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
70090: LD_VAR 0 11
70094: PPUSH
70095: CALL_OW 247
70099: PUSH
70100: LD_INT 2
70102: EQUAL
70103: IFFALSE 70107
// exit ;
70105: GO 70617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
70107: LD_ADDR_VAR 0 8
70111: PUSH
70112: LD_INT 81
70114: PUSH
70115: LD_VAR 0 9
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 3
70126: PUSH
70127: LD_INT 21
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PPUSH
70145: CALL_OW 69
70149: ST_TO_ADDR
// if not tmp then
70150: LD_VAR 0 8
70154: NOT
70155: IFFALSE 70159
// exit ;
70157: GO 70617
// if in_unit then
70159: LD_VAR 0 11
70163: IFFALSE 70187
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
70165: LD_ADDR_VAR 0 10
70169: PUSH
70170: LD_VAR 0 8
70174: PPUSH
70175: LD_VAR 0 11
70179: PPUSH
70180: CALL_OW 74
70184: ST_TO_ADDR
70185: GO 70207
// enemy := NearestUnitToUnit ( tmp , unit ) ;
70187: LD_ADDR_VAR 0 10
70191: PUSH
70192: LD_VAR 0 8
70196: PPUSH
70197: LD_VAR 0 1
70201: PPUSH
70202: CALL_OW 74
70206: ST_TO_ADDR
// if not enemy then
70207: LD_VAR 0 10
70211: NOT
70212: IFFALSE 70216
// exit ;
70214: GO 70617
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
70216: LD_VAR 0 11
70220: PUSH
70221: LD_VAR 0 11
70225: PPUSH
70226: LD_VAR 0 10
70230: PPUSH
70231: CALL_OW 296
70235: PUSH
70236: LD_INT 13
70238: GREATER
70239: AND
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 10
70250: PPUSH
70251: CALL_OW 296
70255: PUSH
70256: LD_INT 12
70258: GREATER
70259: OR
70260: IFFALSE 70264
// exit ;
70262: GO 70617
// missile := [ 1 ] ;
70264: LD_ADDR_VAR 0 14
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: EMPTY
70273: LIST
70274: ST_TO_ADDR
// if Researched ( side , tech_space ) then
70275: LD_VAR 0 9
70279: PPUSH
70280: LD_VAR 0 12
70284: PPUSH
70285: CALL_OW 325
70289: IFFALSE 70318
// missile := Replace ( missile , missile + 1 , 2 ) ;
70291: LD_ADDR_VAR 0 14
70295: PUSH
70296: LD_VAR 0 14
70300: PPUSH
70301: LD_VAR 0 14
70305: PUSH
70306: LD_INT 1
70308: PLUS
70309: PPUSH
70310: LD_INT 2
70312: PPUSH
70313: CALL_OW 1
70317: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
70318: LD_VAR 0 9
70322: PPUSH
70323: LD_VAR 0 13
70327: PPUSH
70328: CALL_OW 325
70332: PUSH
70333: LD_VAR 0 10
70337: PPUSH
70338: CALL_OW 255
70342: PPUSH
70343: LD_VAR 0 13
70347: PPUSH
70348: CALL_OW 325
70352: NOT
70353: AND
70354: IFFALSE 70383
// missile := Replace ( missile , missile + 1 , 3 ) ;
70356: LD_ADDR_VAR 0 14
70360: PUSH
70361: LD_VAR 0 14
70365: PPUSH
70366: LD_VAR 0 14
70370: PUSH
70371: LD_INT 1
70373: PLUS
70374: PPUSH
70375: LD_INT 3
70377: PPUSH
70378: CALL_OW 1
70382: ST_TO_ADDR
// if missile < 2 then
70383: LD_VAR 0 14
70387: PUSH
70388: LD_INT 2
70390: LESS
70391: IFFALSE 70395
// exit ;
70393: GO 70617
// x := GetX ( enemy ) ;
70395: LD_ADDR_VAR 0 4
70399: PUSH
70400: LD_VAR 0 10
70404: PPUSH
70405: CALL_OW 250
70409: ST_TO_ADDR
// y := GetY ( enemy ) ;
70410: LD_ADDR_VAR 0 5
70414: PUSH
70415: LD_VAR 0 10
70419: PPUSH
70420: CALL_OW 251
70424: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
70425: LD_ADDR_VAR 0 6
70429: PUSH
70430: LD_VAR 0 4
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PPUSH
70439: LD_INT 1
70441: PPUSH
70442: CALL_OW 12
70446: PLUS
70447: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
70448: LD_ADDR_VAR 0 7
70452: PUSH
70453: LD_VAR 0 5
70457: PUSH
70458: LD_INT 1
70460: NEG
70461: PPUSH
70462: LD_INT 1
70464: PPUSH
70465: CALL_OW 12
70469: PLUS
70470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70471: LD_VAR 0 6
70475: PPUSH
70476: LD_VAR 0 7
70480: PPUSH
70481: CALL_OW 488
70485: NOT
70486: IFFALSE 70508
// begin _x := x ;
70488: LD_ADDR_VAR 0 6
70492: PUSH
70493: LD_VAR 0 4
70497: ST_TO_ADDR
// _y := y ;
70498: LD_ADDR_VAR 0 7
70502: PUSH
70503: LD_VAR 0 5
70507: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
70508: LD_ADDR_VAR 0 3
70512: PUSH
70513: LD_INT 1
70515: PPUSH
70516: LD_VAR 0 14
70520: PPUSH
70521: CALL_OW 12
70525: ST_TO_ADDR
// case i of 1 :
70526: LD_VAR 0 3
70530: PUSH
70531: LD_INT 1
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70539
70537: GO 70556
70539: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 10
70549: PPUSH
70550: CALL_OW 115
70554: GO 70617
70556: LD_INT 2
70558: DOUBLE
70559: EQUAL
70560: IFTRUE 70564
70562: GO 70586
70564: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
70565: LD_VAR 0 1
70569: PPUSH
70570: LD_VAR 0 6
70574: PPUSH
70575: LD_VAR 0 7
70579: PPUSH
70580: CALL_OW 153
70584: GO 70617
70586: LD_INT 3
70588: DOUBLE
70589: EQUAL
70590: IFTRUE 70594
70592: GO 70616
70594: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
70595: LD_VAR 0 1
70599: PPUSH
70600: LD_VAR 0 6
70604: PPUSH
70605: LD_VAR 0 7
70609: PPUSH
70610: CALL_OW 154
70614: GO 70617
70616: POP
// end ;
70617: LD_VAR 0 2
70621: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
70622: LD_INT 0
70624: PPUSH
70625: PPUSH
70626: PPUSH
70627: PPUSH
70628: PPUSH
70629: PPUSH
// if not unit or not building then
70630: LD_VAR 0 1
70634: NOT
70635: PUSH
70636: LD_VAR 0 2
70640: NOT
70641: OR
70642: IFFALSE 70646
// exit ;
70644: GO 70804
// x := GetX ( building ) ;
70646: LD_ADDR_VAR 0 5
70650: PUSH
70651: LD_VAR 0 2
70655: PPUSH
70656: CALL_OW 250
70660: ST_TO_ADDR
// y := GetY ( building ) ;
70661: LD_ADDR_VAR 0 6
70665: PUSH
70666: LD_VAR 0 2
70670: PPUSH
70671: CALL_OW 251
70675: ST_TO_ADDR
// for i = 0 to 5 do
70676: LD_ADDR_VAR 0 4
70680: PUSH
70681: DOUBLE
70682: LD_INT 0
70684: DEC
70685: ST_TO_ADDR
70686: LD_INT 5
70688: PUSH
70689: FOR_TO
70690: IFFALSE 70802
// begin _x := ShiftX ( x , i , 3 ) ;
70692: LD_ADDR_VAR 0 7
70696: PUSH
70697: LD_VAR 0 5
70701: PPUSH
70702: LD_VAR 0 4
70706: PPUSH
70707: LD_INT 3
70709: PPUSH
70710: CALL_OW 272
70714: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
70715: LD_ADDR_VAR 0 8
70719: PUSH
70720: LD_VAR 0 6
70724: PPUSH
70725: LD_VAR 0 4
70729: PPUSH
70730: LD_INT 3
70732: PPUSH
70733: CALL_OW 273
70737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70738: LD_VAR 0 7
70742: PPUSH
70743: LD_VAR 0 8
70747: PPUSH
70748: CALL_OW 488
70752: NOT
70753: IFFALSE 70757
// continue ;
70755: GO 70689
// if HexInfo ( _x , _y ) = 0 then
70757: LD_VAR 0 7
70761: PPUSH
70762: LD_VAR 0 8
70766: PPUSH
70767: CALL_OW 428
70771: PUSH
70772: LD_INT 0
70774: EQUAL
70775: IFFALSE 70800
// begin ComMoveXY ( unit , _x , _y ) ;
70777: LD_VAR 0 1
70781: PPUSH
70782: LD_VAR 0 7
70786: PPUSH
70787: LD_VAR 0 8
70791: PPUSH
70792: CALL_OW 111
// exit ;
70796: POP
70797: POP
70798: GO 70804
// end ; end ;
70800: GO 70689
70802: POP
70803: POP
// end ;
70804: LD_VAR 0 3
70808: RET
// export function ScanBase ( side , base_area ) ; begin
70809: LD_INT 0
70811: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: LD_VAR 0 2
70821: PPUSH
70822: LD_INT 81
70824: PUSH
70825: LD_VAR 0 1
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PPUSH
70834: CALL_OW 70
70838: ST_TO_ADDR
// end ;
70839: LD_VAR 0 3
70843: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
70844: LD_INT 0
70846: PPUSH
70847: PPUSH
70848: PPUSH
70849: PPUSH
// result := false ;
70850: LD_ADDR_VAR 0 2
70854: PUSH
70855: LD_INT 0
70857: ST_TO_ADDR
// side := GetSide ( unit ) ;
70858: LD_ADDR_VAR 0 3
70862: PUSH
70863: LD_VAR 0 1
70867: PPUSH
70868: CALL_OW 255
70872: ST_TO_ADDR
// nat := GetNation ( unit ) ;
70873: LD_ADDR_VAR 0 4
70877: PUSH
70878: LD_VAR 0 1
70882: PPUSH
70883: CALL_OW 248
70887: ST_TO_ADDR
// case nat of 1 :
70888: LD_VAR 0 4
70892: PUSH
70893: LD_INT 1
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70901
70899: GO 70912
70901: POP
// tech := tech_lassight ; 2 :
70902: LD_ADDR_VAR 0 5
70906: PUSH
70907: LD_INT 12
70909: ST_TO_ADDR
70910: GO 70951
70912: LD_INT 2
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70920
70918: GO 70931
70920: POP
// tech := tech_mortar ; 3 :
70921: LD_ADDR_VAR 0 5
70925: PUSH
70926: LD_INT 41
70928: ST_TO_ADDR
70929: GO 70951
70931: LD_INT 3
70933: DOUBLE
70934: EQUAL
70935: IFTRUE 70939
70937: GO 70950
70939: POP
// tech := tech_bazooka ; end ;
70940: LD_ADDR_VAR 0 5
70944: PUSH
70945: LD_INT 44
70947: ST_TO_ADDR
70948: GO 70951
70950: POP
// if Researched ( side , tech ) then
70951: LD_VAR 0 3
70955: PPUSH
70956: LD_VAR 0 5
70960: PPUSH
70961: CALL_OW 325
70965: IFFALSE 70992
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
70967: LD_ADDR_VAR 0 2
70971: PUSH
70972: LD_INT 5
70974: PUSH
70975: LD_INT 8
70977: PUSH
70978: LD_INT 9
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: LIST
70985: PUSH
70986: LD_VAR 0 4
70990: ARRAY
70991: ST_TO_ADDR
// end ;
70992: LD_VAR 0 2
70996: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
70997: LD_INT 0
70999: PPUSH
71000: PPUSH
71001: PPUSH
// if not mines then
71002: LD_VAR 0 2
71006: NOT
71007: IFFALSE 71011
// exit ;
71009: GO 71155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
71011: LD_ADDR_VAR 0 5
71015: PUSH
71016: LD_INT 81
71018: PUSH
71019: LD_VAR 0 1
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: LD_INT 21
71033: PUSH
71034: LD_INT 3
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PPUSH
71049: CALL_OW 69
71053: ST_TO_ADDR
// for i in mines do
71054: LD_ADDR_VAR 0 4
71058: PUSH
71059: LD_VAR 0 2
71063: PUSH
71064: FOR_IN
71065: IFFALSE 71153
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
71067: LD_VAR 0 4
71071: PUSH
71072: LD_INT 1
71074: ARRAY
71075: PPUSH
71076: LD_VAR 0 4
71080: PUSH
71081: LD_INT 2
71083: ARRAY
71084: PPUSH
71085: CALL_OW 458
71089: NOT
71090: IFFALSE 71094
// continue ;
71092: GO 71064
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
71094: LD_VAR 0 4
71098: PUSH
71099: LD_INT 1
71101: ARRAY
71102: PPUSH
71103: LD_VAR 0 4
71107: PUSH
71108: LD_INT 2
71110: ARRAY
71111: PPUSH
71112: CALL_OW 428
71116: PUSH
71117: LD_VAR 0 5
71121: IN
71122: IFFALSE 71151
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
71124: LD_VAR 0 4
71128: PUSH
71129: LD_INT 1
71131: ARRAY
71132: PPUSH
71133: LD_VAR 0 4
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: PPUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: CALL_OW 456
// end ;
71151: GO 71064
71153: POP
71154: POP
// end ;
71155: LD_VAR 0 3
71159: RET
// export function Count ( array ) ; begin
71160: LD_INT 0
71162: PPUSH
// result := array + 0 ;
71163: LD_ADDR_VAR 0 2
71167: PUSH
71168: LD_VAR 0 1
71172: PUSH
71173: LD_INT 0
71175: PLUS
71176: ST_TO_ADDR
// end ;
71177: LD_VAR 0 2
71181: RET
// export function IsEmpty ( building ) ; begin
71182: LD_INT 0
71184: PPUSH
// if not building then
71185: LD_VAR 0 1
71189: NOT
71190: IFFALSE 71194
// exit ;
71192: GO 71237
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
71194: LD_ADDR_VAR 0 2
71198: PUSH
71199: LD_VAR 0 1
71203: PUSH
71204: LD_INT 22
71206: PUSH
71207: LD_VAR 0 1
71211: PPUSH
71212: CALL_OW 255
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 58
71223: PUSH
71224: EMPTY
71225: LIST
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PPUSH
71231: CALL_OW 69
71235: IN
71236: ST_TO_ADDR
// end ;
71237: LD_VAR 0 2
71241: RET
// export function IsNotFull ( building ) ; var places ; begin
71242: LD_INT 0
71244: PPUSH
71245: PPUSH
// if not building then
71246: LD_VAR 0 1
71250: NOT
71251: IFFALSE 71255
// exit ;
71253: GO 71283
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
71255: LD_ADDR_VAR 0 2
71259: PUSH
71260: LD_VAR 0 1
71264: PPUSH
71265: LD_INT 3
71267: PUSH
71268: LD_INT 62
71270: PUSH
71271: EMPTY
71272: LIST
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PPUSH
71278: CALL_OW 72
71282: ST_TO_ADDR
// end ;
71283: LD_VAR 0 2
71287: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
71288: LD_INT 0
71290: PPUSH
71291: PPUSH
71292: PPUSH
71293: PPUSH
// tmp := [ ] ;
71294: LD_ADDR_VAR 0 3
71298: PUSH
71299: EMPTY
71300: ST_TO_ADDR
// list := [ ] ;
71301: LD_ADDR_VAR 0 5
71305: PUSH
71306: EMPTY
71307: ST_TO_ADDR
// for i = 16 to 25 do
71308: LD_ADDR_VAR 0 4
71312: PUSH
71313: DOUBLE
71314: LD_INT 16
71316: DEC
71317: ST_TO_ADDR
71318: LD_INT 25
71320: PUSH
71321: FOR_TO
71322: IFFALSE 71395
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
71324: LD_ADDR_VAR 0 3
71328: PUSH
71329: LD_VAR 0 3
71333: PUSH
71334: LD_INT 22
71336: PUSH
71337: LD_VAR 0 1
71341: PPUSH
71342: CALL_OW 255
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 91
71353: PUSH
71354: LD_VAR 0 1
71358: PUSH
71359: LD_INT 6
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 30
71369: PUSH
71370: LD_VAR 0 4
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: LIST
71383: PUSH
71384: EMPTY
71385: LIST
71386: PPUSH
71387: CALL_OW 69
71391: ADD
71392: ST_TO_ADDR
71393: GO 71321
71395: POP
71396: POP
// for i = 1 to tmp do
71397: LD_ADDR_VAR 0 4
71401: PUSH
71402: DOUBLE
71403: LD_INT 1
71405: DEC
71406: ST_TO_ADDR
71407: LD_VAR 0 3
71411: PUSH
71412: FOR_TO
71413: IFFALSE 71501
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
71415: LD_ADDR_VAR 0 5
71419: PUSH
71420: LD_VAR 0 5
71424: PUSH
71425: LD_VAR 0 3
71429: PUSH
71430: LD_VAR 0 4
71434: ARRAY
71435: PPUSH
71436: CALL_OW 266
71440: PUSH
71441: LD_VAR 0 3
71445: PUSH
71446: LD_VAR 0 4
71450: ARRAY
71451: PPUSH
71452: CALL_OW 250
71456: PUSH
71457: LD_VAR 0 3
71461: PUSH
71462: LD_VAR 0 4
71466: ARRAY
71467: PPUSH
71468: CALL_OW 251
71472: PUSH
71473: LD_VAR 0 3
71477: PUSH
71478: LD_VAR 0 4
71482: ARRAY
71483: PPUSH
71484: CALL_OW 254
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: PUSH
71495: EMPTY
71496: LIST
71497: ADD
71498: ST_TO_ADDR
71499: GO 71412
71501: POP
71502: POP
// result := list ;
71503: LD_ADDR_VAR 0 2
71507: PUSH
71508: LD_VAR 0 5
71512: ST_TO_ADDR
// end ;
71513: LD_VAR 0 2
71517: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
71518: LD_INT 0
71520: PPUSH
71521: PPUSH
71522: PPUSH
71523: PPUSH
71524: PPUSH
71525: PPUSH
71526: PPUSH
// if not factory then
71527: LD_VAR 0 1
71531: NOT
71532: IFFALSE 71536
// exit ;
71534: GO 72129
// if control = control_apeman then
71536: LD_VAR 0 4
71540: PUSH
71541: LD_INT 5
71543: EQUAL
71544: IFFALSE 71653
// begin tmp := UnitsInside ( factory ) ;
71546: LD_ADDR_VAR 0 8
71550: PUSH
71551: LD_VAR 0 1
71555: PPUSH
71556: CALL_OW 313
71560: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
71561: LD_VAR 0 8
71565: PPUSH
71566: LD_INT 25
71568: PUSH
71569: LD_INT 12
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PPUSH
71576: CALL_OW 72
71580: NOT
71581: IFFALSE 71591
// control := control_manual ;
71583: LD_ADDR_VAR 0 4
71587: PUSH
71588: LD_INT 1
71590: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
71591: LD_ADDR_VAR 0 8
71595: PUSH
71596: LD_VAR 0 1
71600: PPUSH
71601: CALL 71288 0 1
71605: ST_TO_ADDR
// if tmp then
71606: LD_VAR 0 8
71610: IFFALSE 71653
// begin for i in tmp do
71612: LD_ADDR_VAR 0 7
71616: PUSH
71617: LD_VAR 0 8
71621: PUSH
71622: FOR_IN
71623: IFFALSE 71651
// if i [ 1 ] = b_ext_radio then
71625: LD_VAR 0 7
71629: PUSH
71630: LD_INT 1
71632: ARRAY
71633: PUSH
71634: LD_INT 22
71636: EQUAL
71637: IFFALSE 71649
// begin control := control_remote ;
71639: LD_ADDR_VAR 0 4
71643: PUSH
71644: LD_INT 2
71646: ST_TO_ADDR
// break ;
71647: GO 71651
// end ;
71649: GO 71622
71651: POP
71652: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
71653: LD_VAR 0 1
71657: PPUSH
71658: LD_VAR 0 2
71662: PPUSH
71663: LD_VAR 0 3
71667: PPUSH
71668: LD_VAR 0 4
71672: PPUSH
71673: LD_VAR 0 5
71677: PPUSH
71678: CALL_OW 448
71682: IFFALSE 71717
// begin result := [ chassis , engine , control , weapon ] ;
71684: LD_ADDR_VAR 0 6
71688: PUSH
71689: LD_VAR 0 2
71693: PUSH
71694: LD_VAR 0 3
71698: PUSH
71699: LD_VAR 0 4
71703: PUSH
71704: LD_VAR 0 5
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: ST_TO_ADDR
// exit ;
71715: GO 72129
// end ; _chassis := AvailableChassisList ( factory ) ;
71717: LD_ADDR_VAR 0 9
71721: PUSH
71722: LD_VAR 0 1
71726: PPUSH
71727: CALL_OW 475
71731: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
71732: LD_ADDR_VAR 0 11
71736: PUSH
71737: LD_VAR 0 1
71741: PPUSH
71742: CALL_OW 476
71746: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
71747: LD_ADDR_VAR 0 12
71751: PUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: CALL_OW 477
71761: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
71762: LD_ADDR_VAR 0 10
71766: PUSH
71767: LD_VAR 0 1
71771: PPUSH
71772: CALL_OW 478
71776: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
71777: LD_VAR 0 9
71781: NOT
71782: PUSH
71783: LD_VAR 0 11
71787: NOT
71788: OR
71789: PUSH
71790: LD_VAR 0 12
71794: NOT
71795: OR
71796: PUSH
71797: LD_VAR 0 10
71801: NOT
71802: OR
71803: IFFALSE 71838
// begin result := [ chassis , engine , control , weapon ] ;
71805: LD_ADDR_VAR 0 6
71809: PUSH
71810: LD_VAR 0 2
71814: PUSH
71815: LD_VAR 0 3
71819: PUSH
71820: LD_VAR 0 4
71824: PUSH
71825: LD_VAR 0 5
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// exit ;
71836: GO 72129
// end ; if not chassis in _chassis then
71838: LD_VAR 0 2
71842: PUSH
71843: LD_VAR 0 9
71847: IN
71848: NOT
71849: IFFALSE 71875
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
71851: LD_ADDR_VAR 0 2
71855: PUSH
71856: LD_VAR 0 9
71860: PUSH
71861: LD_INT 1
71863: PPUSH
71864: LD_VAR 0 9
71868: PPUSH
71869: CALL_OW 12
71873: ARRAY
71874: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
71875: LD_VAR 0 2
71879: PPUSH
71880: LD_VAR 0 3
71884: PPUSH
71885: CALL 72134 0 2
71889: NOT
71890: IFFALSE 71949
// repeat engine := _engine [ 1 ] ;
71892: LD_ADDR_VAR 0 3
71896: PUSH
71897: LD_VAR 0 11
71901: PUSH
71902: LD_INT 1
71904: ARRAY
71905: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
71906: LD_ADDR_VAR 0 11
71910: PUSH
71911: LD_VAR 0 11
71915: PPUSH
71916: LD_INT 1
71918: PPUSH
71919: CALL_OW 3
71923: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
71924: LD_VAR 0 2
71928: PPUSH
71929: LD_VAR 0 3
71933: PPUSH
71934: CALL 72134 0 2
71938: PUSH
71939: LD_VAR 0 11
71943: PUSH
71944: EMPTY
71945: EQUAL
71946: OR
71947: IFFALSE 71892
// if not control in _control then
71949: LD_VAR 0 4
71953: PUSH
71954: LD_VAR 0 12
71958: IN
71959: NOT
71960: IFFALSE 71986
// control := _control [ rand ( 1 , _control ) ] ;
71962: LD_ADDR_VAR 0 4
71966: PUSH
71967: LD_VAR 0 12
71971: PUSH
71972: LD_INT 1
71974: PPUSH
71975: LD_VAR 0 12
71979: PPUSH
71980: CALL_OW 12
71984: ARRAY
71985: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
71986: LD_VAR 0 2
71990: PPUSH
71991: LD_VAR 0 5
71995: PPUSH
71996: CALL 72354 0 2
72000: NOT
72001: IFFALSE 72060
// repeat weapon := _weapon [ 1 ] ;
72003: LD_ADDR_VAR 0 5
72007: PUSH
72008: LD_VAR 0 10
72012: PUSH
72013: LD_INT 1
72015: ARRAY
72016: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
72017: LD_ADDR_VAR 0 10
72021: PUSH
72022: LD_VAR 0 10
72026: PPUSH
72027: LD_INT 1
72029: PPUSH
72030: CALL_OW 3
72034: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
72035: LD_VAR 0 2
72039: PPUSH
72040: LD_VAR 0 5
72044: PPUSH
72045: CALL 72354 0 2
72049: PUSH
72050: LD_VAR 0 10
72054: PUSH
72055: EMPTY
72056: EQUAL
72057: OR
72058: IFFALSE 72003
// result := [ ] ;
72060: LD_ADDR_VAR 0 6
72064: PUSH
72065: EMPTY
72066: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_VAR 0 2
72076: PPUSH
72077: LD_VAR 0 3
72081: PPUSH
72082: LD_VAR 0 4
72086: PPUSH
72087: LD_VAR 0 5
72091: PPUSH
72092: CALL_OW 448
72096: IFFALSE 72129
// result := [ chassis , engine , control , weapon ] ;
72098: LD_ADDR_VAR 0 6
72102: PUSH
72103: LD_VAR 0 2
72107: PUSH
72108: LD_VAR 0 3
72112: PUSH
72113: LD_VAR 0 4
72117: PUSH
72118: LD_VAR 0 5
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: ST_TO_ADDR
// end ;
72129: LD_VAR 0 6
72133: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
72134: LD_INT 0
72136: PPUSH
// if not chassis or not engine then
72137: LD_VAR 0 1
72141: NOT
72142: PUSH
72143: LD_VAR 0 2
72147: NOT
72148: OR
72149: IFFALSE 72153
// exit ;
72151: GO 72349
// case engine of engine_solar :
72153: LD_VAR 0 2
72157: PUSH
72158: LD_INT 2
72160: DOUBLE
72161: EQUAL
72162: IFTRUE 72166
72164: GO 72204
72166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
72167: LD_ADDR_VAR 0 3
72171: PUSH
72172: LD_INT 11
72174: PUSH
72175: LD_INT 12
72177: PUSH
72178: LD_INT 13
72180: PUSH
72181: LD_INT 14
72183: PUSH
72184: LD_INT 1
72186: PUSH
72187: LD_INT 2
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: ST_TO_ADDR
72202: GO 72333
72204: LD_INT 1
72206: DOUBLE
72207: EQUAL
72208: IFTRUE 72212
72210: GO 72274
72212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
72213: LD_ADDR_VAR 0 3
72217: PUSH
72218: LD_INT 11
72220: PUSH
72221: LD_INT 12
72223: PUSH
72224: LD_INT 13
72226: PUSH
72227: LD_INT 14
72229: PUSH
72230: LD_INT 1
72232: PUSH
72233: LD_INT 2
72235: PUSH
72236: LD_INT 3
72238: PUSH
72239: LD_INT 4
72241: PUSH
72242: LD_INT 5
72244: PUSH
72245: LD_INT 21
72247: PUSH
72248: LD_INT 23
72250: PUSH
72251: LD_INT 22
72253: PUSH
72254: LD_INT 24
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: ST_TO_ADDR
72272: GO 72333
72274: LD_INT 3
72276: DOUBLE
72277: EQUAL
72278: IFTRUE 72282
72280: GO 72332
72282: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
72283: LD_ADDR_VAR 0 3
72287: PUSH
72288: LD_INT 13
72290: PUSH
72291: LD_INT 14
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: LD_INT 5
72305: PUSH
72306: LD_INT 21
72308: PUSH
72309: LD_INT 22
72311: PUSH
72312: LD_INT 23
72314: PUSH
72315: LD_INT 24
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: ST_TO_ADDR
72330: GO 72333
72332: POP
// result := ( chassis in result ) ;
72333: LD_ADDR_VAR 0 3
72337: PUSH
72338: LD_VAR 0 1
72342: PUSH
72343: LD_VAR 0 3
72347: IN
72348: ST_TO_ADDR
// end ;
72349: LD_VAR 0 3
72353: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
72354: LD_INT 0
72356: PPUSH
// if not chassis or not weapon then
72357: LD_VAR 0 1
72361: NOT
72362: PUSH
72363: LD_VAR 0 2
72367: NOT
72368: OR
72369: IFFALSE 72373
// exit ;
72371: GO 73433
// case weapon of us_machine_gun :
72373: LD_VAR 0 2
72377: PUSH
72378: LD_INT 2
72380: DOUBLE
72381: EQUAL
72382: IFTRUE 72386
72384: GO 72416
72386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
72387: LD_ADDR_VAR 0 3
72391: PUSH
72392: LD_INT 1
72394: PUSH
72395: LD_INT 2
72397: PUSH
72398: LD_INT 3
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: LD_INT 5
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: ST_TO_ADDR
72414: GO 73417
72416: LD_INT 3
72418: DOUBLE
72419: EQUAL
72420: IFTRUE 72424
72422: GO 72454
72424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
72425: LD_ADDR_VAR 0 3
72429: PUSH
72430: LD_INT 1
72432: PUSH
72433: LD_INT 2
72435: PUSH
72436: LD_INT 3
72438: PUSH
72439: LD_INT 4
72441: PUSH
72442: LD_INT 5
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: ST_TO_ADDR
72452: GO 73417
72454: LD_INT 11
72456: DOUBLE
72457: EQUAL
72458: IFTRUE 72462
72460: GO 72492
72462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
72463: LD_ADDR_VAR 0 3
72467: PUSH
72468: LD_INT 1
72470: PUSH
72471: LD_INT 2
72473: PUSH
72474: LD_INT 3
72476: PUSH
72477: LD_INT 4
72479: PUSH
72480: LD_INT 5
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: ST_TO_ADDR
72490: GO 73417
72492: LD_INT 4
72494: DOUBLE
72495: EQUAL
72496: IFTRUE 72500
72498: GO 72526
72500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
72501: LD_ADDR_VAR 0 3
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: LD_INT 3
72511: PUSH
72512: LD_INT 4
72514: PUSH
72515: LD_INT 5
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: ST_TO_ADDR
72524: GO 73417
72526: LD_INT 5
72528: DOUBLE
72529: EQUAL
72530: IFTRUE 72534
72532: GO 72560
72534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
72535: LD_ADDR_VAR 0 3
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: LD_INT 3
72545: PUSH
72546: LD_INT 4
72548: PUSH
72549: LD_INT 5
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: ST_TO_ADDR
72558: GO 73417
72560: LD_INT 9
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72594
72568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
72569: LD_ADDR_VAR 0 3
72573: PUSH
72574: LD_INT 2
72576: PUSH
72577: LD_INT 3
72579: PUSH
72580: LD_INT 4
72582: PUSH
72583: LD_INT 5
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: ST_TO_ADDR
72592: GO 73417
72594: LD_INT 7
72596: DOUBLE
72597: EQUAL
72598: IFTRUE 72602
72600: GO 72628
72602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
72603: LD_ADDR_VAR 0 3
72607: PUSH
72608: LD_INT 2
72610: PUSH
72611: LD_INT 3
72613: PUSH
72614: LD_INT 4
72616: PUSH
72617: LD_INT 5
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: ST_TO_ADDR
72626: GO 73417
72628: LD_INT 12
72630: DOUBLE
72631: EQUAL
72632: IFTRUE 72636
72634: GO 72662
72636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
72637: LD_ADDR_VAR 0 3
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: LD_INT 3
72647: PUSH
72648: LD_INT 4
72650: PUSH
72651: LD_INT 5
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: ST_TO_ADDR
72660: GO 73417
72662: LD_INT 13
72664: DOUBLE
72665: EQUAL
72666: IFTRUE 72670
72668: GO 72696
72670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
72671: LD_ADDR_VAR 0 3
72675: PUSH
72676: LD_INT 2
72678: PUSH
72679: LD_INT 3
72681: PUSH
72682: LD_INT 4
72684: PUSH
72685: LD_INT 5
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: ST_TO_ADDR
72694: GO 73417
72696: LD_INT 14
72698: DOUBLE
72699: EQUAL
72700: IFTRUE 72704
72702: GO 72722
72704: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
72705: LD_ADDR_VAR 0 3
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: LD_INT 5
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: ST_TO_ADDR
72720: GO 73417
72722: LD_INT 6
72724: DOUBLE
72725: EQUAL
72726: IFTRUE 72730
72728: GO 72748
72730: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
72731: LD_ADDR_VAR 0 3
72735: PUSH
72736: LD_INT 4
72738: PUSH
72739: LD_INT 5
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: ST_TO_ADDR
72746: GO 73417
72748: LD_INT 10
72750: DOUBLE
72751: EQUAL
72752: IFTRUE 72756
72754: GO 72774
72756: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
72757: LD_ADDR_VAR 0 3
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 5
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: ST_TO_ADDR
72772: GO 73417
72774: LD_INT 22
72776: DOUBLE
72777: EQUAL
72778: IFTRUE 72782
72780: GO 72808
72782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
72783: LD_ADDR_VAR 0 3
72787: PUSH
72788: LD_INT 11
72790: PUSH
72791: LD_INT 12
72793: PUSH
72794: LD_INT 13
72796: PUSH
72797: LD_INT 14
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: ST_TO_ADDR
72806: GO 73417
72808: LD_INT 23
72810: DOUBLE
72811: EQUAL
72812: IFTRUE 72816
72814: GO 72842
72816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
72817: LD_ADDR_VAR 0 3
72821: PUSH
72822: LD_INT 11
72824: PUSH
72825: LD_INT 12
72827: PUSH
72828: LD_INT 13
72830: PUSH
72831: LD_INT 14
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: ST_TO_ADDR
72840: GO 73417
72842: LD_INT 24
72844: DOUBLE
72845: EQUAL
72846: IFTRUE 72850
72848: GO 72876
72850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
72851: LD_ADDR_VAR 0 3
72855: PUSH
72856: LD_INT 11
72858: PUSH
72859: LD_INT 12
72861: PUSH
72862: LD_INT 13
72864: PUSH
72865: LD_INT 14
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: ST_TO_ADDR
72874: GO 73417
72876: LD_INT 30
72878: DOUBLE
72879: EQUAL
72880: IFTRUE 72884
72882: GO 72910
72884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
72885: LD_ADDR_VAR 0 3
72889: PUSH
72890: LD_INT 11
72892: PUSH
72893: LD_INT 12
72895: PUSH
72896: LD_INT 13
72898: PUSH
72899: LD_INT 14
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: ST_TO_ADDR
72908: GO 73417
72910: LD_INT 25
72912: DOUBLE
72913: EQUAL
72914: IFTRUE 72918
72916: GO 72936
72918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
72919: LD_ADDR_VAR 0 3
72923: PUSH
72924: LD_INT 13
72926: PUSH
72927: LD_INT 14
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: ST_TO_ADDR
72934: GO 73417
72936: LD_INT 27
72938: DOUBLE
72939: EQUAL
72940: IFTRUE 72944
72942: GO 72962
72944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
72945: LD_ADDR_VAR 0 3
72949: PUSH
72950: LD_INT 13
72952: PUSH
72953: LD_INT 14
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: ST_TO_ADDR
72960: GO 73417
72962: LD_INT 92
72964: DOUBLE
72965: EQUAL
72966: IFTRUE 72970
72968: GO 72996
72970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
72971: LD_ADDR_VAR 0 3
72975: PUSH
72976: LD_INT 11
72978: PUSH
72979: LD_INT 12
72981: PUSH
72982: LD_INT 13
72984: PUSH
72985: LD_INT 14
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: ST_TO_ADDR
72994: GO 73417
72996: LD_INT 28
72998: DOUBLE
72999: EQUAL
73000: IFTRUE 73004
73002: GO 73022
73004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
73005: LD_ADDR_VAR 0 3
73009: PUSH
73010: LD_INT 13
73012: PUSH
73013: LD_INT 14
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: ST_TO_ADDR
73020: GO 73417
73022: LD_INT 29
73024: DOUBLE
73025: EQUAL
73026: IFTRUE 73030
73028: GO 73048
73030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
73031: LD_ADDR_VAR 0 3
73035: PUSH
73036: LD_INT 13
73038: PUSH
73039: LD_INT 14
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: ST_TO_ADDR
73046: GO 73417
73048: LD_INT 31
73050: DOUBLE
73051: EQUAL
73052: IFTRUE 73056
73054: GO 73074
73056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
73057: LD_ADDR_VAR 0 3
73061: PUSH
73062: LD_INT 13
73064: PUSH
73065: LD_INT 14
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: ST_TO_ADDR
73072: GO 73417
73074: LD_INT 26
73076: DOUBLE
73077: EQUAL
73078: IFTRUE 73082
73080: GO 73100
73082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
73083: LD_ADDR_VAR 0 3
73087: PUSH
73088: LD_INT 13
73090: PUSH
73091: LD_INT 14
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: ST_TO_ADDR
73098: GO 73417
73100: LD_INT 42
73102: DOUBLE
73103: EQUAL
73104: IFTRUE 73108
73106: GO 73134
73108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
73109: LD_ADDR_VAR 0 3
73113: PUSH
73114: LD_INT 21
73116: PUSH
73117: LD_INT 22
73119: PUSH
73120: LD_INT 23
73122: PUSH
73123: LD_INT 24
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: ST_TO_ADDR
73132: GO 73417
73134: LD_INT 43
73136: DOUBLE
73137: EQUAL
73138: IFTRUE 73142
73140: GO 73168
73142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
73143: LD_ADDR_VAR 0 3
73147: PUSH
73148: LD_INT 21
73150: PUSH
73151: LD_INT 22
73153: PUSH
73154: LD_INT 23
73156: PUSH
73157: LD_INT 24
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: ST_TO_ADDR
73166: GO 73417
73168: LD_INT 44
73170: DOUBLE
73171: EQUAL
73172: IFTRUE 73176
73174: GO 73202
73176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
73177: LD_ADDR_VAR 0 3
73181: PUSH
73182: LD_INT 21
73184: PUSH
73185: LD_INT 22
73187: PUSH
73188: LD_INT 23
73190: PUSH
73191: LD_INT 24
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: ST_TO_ADDR
73200: GO 73417
73202: LD_INT 45
73204: DOUBLE
73205: EQUAL
73206: IFTRUE 73210
73208: GO 73236
73210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
73211: LD_ADDR_VAR 0 3
73215: PUSH
73216: LD_INT 21
73218: PUSH
73219: LD_INT 22
73221: PUSH
73222: LD_INT 23
73224: PUSH
73225: LD_INT 24
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: ST_TO_ADDR
73234: GO 73417
73236: LD_INT 49
73238: DOUBLE
73239: EQUAL
73240: IFTRUE 73244
73242: GO 73270
73244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
73245: LD_ADDR_VAR 0 3
73249: PUSH
73250: LD_INT 21
73252: PUSH
73253: LD_INT 22
73255: PUSH
73256: LD_INT 23
73258: PUSH
73259: LD_INT 24
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: ST_TO_ADDR
73268: GO 73417
73270: LD_INT 51
73272: DOUBLE
73273: EQUAL
73274: IFTRUE 73278
73276: GO 73304
73278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
73279: LD_ADDR_VAR 0 3
73283: PUSH
73284: LD_INT 21
73286: PUSH
73287: LD_INT 22
73289: PUSH
73290: LD_INT 23
73292: PUSH
73293: LD_INT 24
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: ST_TO_ADDR
73302: GO 73417
73304: LD_INT 52
73306: DOUBLE
73307: EQUAL
73308: IFTRUE 73312
73310: GO 73338
73312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
73313: LD_ADDR_VAR 0 3
73317: PUSH
73318: LD_INT 21
73320: PUSH
73321: LD_INT 22
73323: PUSH
73324: LD_INT 23
73326: PUSH
73327: LD_INT 24
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: ST_TO_ADDR
73336: GO 73417
73338: LD_INT 53
73340: DOUBLE
73341: EQUAL
73342: IFTRUE 73346
73344: GO 73364
73346: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
73347: LD_ADDR_VAR 0 3
73351: PUSH
73352: LD_INT 23
73354: PUSH
73355: LD_INT 24
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: ST_TO_ADDR
73362: GO 73417
73364: LD_INT 46
73366: DOUBLE
73367: EQUAL
73368: IFTRUE 73372
73370: GO 73390
73372: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
73373: LD_ADDR_VAR 0 3
73377: PUSH
73378: LD_INT 23
73380: PUSH
73381: LD_INT 24
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: ST_TO_ADDR
73388: GO 73417
73390: LD_INT 47
73392: DOUBLE
73393: EQUAL
73394: IFTRUE 73398
73396: GO 73416
73398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
73399: LD_ADDR_VAR 0 3
73403: PUSH
73404: LD_INT 23
73406: PUSH
73407: LD_INT 24
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: ST_TO_ADDR
73414: GO 73417
73416: POP
// result := ( chassis in result ) ;
73417: LD_ADDR_VAR 0 3
73421: PUSH
73422: LD_VAR 0 1
73426: PUSH
73427: LD_VAR 0 3
73431: IN
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 3
73437: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
73444: PPUSH
73445: PPUSH
73446: PPUSH
// result := array ;
73447: LD_ADDR_VAR 0 5
73451: PUSH
73452: LD_VAR 0 1
73456: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
73457: LD_VAR 0 1
73461: NOT
73462: PUSH
73463: LD_VAR 0 2
73467: NOT
73468: OR
73469: PUSH
73470: LD_VAR 0 3
73474: NOT
73475: OR
73476: PUSH
73477: LD_VAR 0 2
73481: PUSH
73482: LD_VAR 0 1
73486: GREATER
73487: OR
73488: PUSH
73489: LD_VAR 0 3
73493: PUSH
73494: LD_VAR 0 1
73498: GREATER
73499: OR
73500: IFFALSE 73504
// exit ;
73502: GO 73800
// if direction then
73504: LD_VAR 0 4
73508: IFFALSE 73572
// begin d := 1 ;
73510: LD_ADDR_VAR 0 9
73514: PUSH
73515: LD_INT 1
73517: ST_TO_ADDR
// if i_from > i_to then
73518: LD_VAR 0 2
73522: PUSH
73523: LD_VAR 0 3
73527: GREATER
73528: IFFALSE 73554
// length := ( array - i_from ) + i_to else
73530: LD_ADDR_VAR 0 11
73534: PUSH
73535: LD_VAR 0 1
73539: PUSH
73540: LD_VAR 0 2
73544: MINUS
73545: PUSH
73546: LD_VAR 0 3
73550: PLUS
73551: ST_TO_ADDR
73552: GO 73570
// length := i_to - i_from ;
73554: LD_ADDR_VAR 0 11
73558: PUSH
73559: LD_VAR 0 3
73563: PUSH
73564: LD_VAR 0 2
73568: MINUS
73569: ST_TO_ADDR
// end else
73570: GO 73633
// begin d := - 1 ;
73572: LD_ADDR_VAR 0 9
73576: PUSH
73577: LD_INT 1
73579: NEG
73580: ST_TO_ADDR
// if i_from > i_to then
73581: LD_VAR 0 2
73585: PUSH
73586: LD_VAR 0 3
73590: GREATER
73591: IFFALSE 73611
// length := i_from - i_to else
73593: LD_ADDR_VAR 0 11
73597: PUSH
73598: LD_VAR 0 2
73602: PUSH
73603: LD_VAR 0 3
73607: MINUS
73608: ST_TO_ADDR
73609: GO 73633
// length := ( array - i_to ) + i_from ;
73611: LD_ADDR_VAR 0 11
73615: PUSH
73616: LD_VAR 0 1
73620: PUSH
73621: LD_VAR 0 3
73625: MINUS
73626: PUSH
73627: LD_VAR 0 2
73631: PLUS
73632: ST_TO_ADDR
// end ; if not length then
73633: LD_VAR 0 11
73637: NOT
73638: IFFALSE 73642
// exit ;
73640: GO 73800
// tmp := array ;
73642: LD_ADDR_VAR 0 10
73646: PUSH
73647: LD_VAR 0 1
73651: ST_TO_ADDR
// for i = 1 to length do
73652: LD_ADDR_VAR 0 6
73656: PUSH
73657: DOUBLE
73658: LD_INT 1
73660: DEC
73661: ST_TO_ADDR
73662: LD_VAR 0 11
73666: PUSH
73667: FOR_TO
73668: IFFALSE 73788
// begin for j = 1 to array do
73670: LD_ADDR_VAR 0 7
73674: PUSH
73675: DOUBLE
73676: LD_INT 1
73678: DEC
73679: ST_TO_ADDR
73680: LD_VAR 0 1
73684: PUSH
73685: FOR_TO
73686: IFFALSE 73774
// begin k := j + d ;
73688: LD_ADDR_VAR 0 8
73692: PUSH
73693: LD_VAR 0 7
73697: PUSH
73698: LD_VAR 0 9
73702: PLUS
73703: ST_TO_ADDR
// if k > array then
73704: LD_VAR 0 8
73708: PUSH
73709: LD_VAR 0 1
73713: GREATER
73714: IFFALSE 73724
// k := 1 ;
73716: LD_ADDR_VAR 0 8
73720: PUSH
73721: LD_INT 1
73723: ST_TO_ADDR
// if not k then
73724: LD_VAR 0 8
73728: NOT
73729: IFFALSE 73741
// k := array ;
73731: LD_ADDR_VAR 0 8
73735: PUSH
73736: LD_VAR 0 1
73740: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
73741: LD_ADDR_VAR 0 10
73745: PUSH
73746: LD_VAR 0 10
73750: PPUSH
73751: LD_VAR 0 8
73755: PPUSH
73756: LD_VAR 0 1
73760: PUSH
73761: LD_VAR 0 7
73765: ARRAY
73766: PPUSH
73767: CALL_OW 1
73771: ST_TO_ADDR
// end ;
73772: GO 73685
73774: POP
73775: POP
// array := tmp ;
73776: LD_ADDR_VAR 0 1
73780: PUSH
73781: LD_VAR 0 10
73785: ST_TO_ADDR
// end ;
73786: GO 73667
73788: POP
73789: POP
// result := array ;
73790: LD_ADDR_VAR 0 5
73794: PUSH
73795: LD_VAR 0 1
73799: ST_TO_ADDR
// end ;
73800: LD_VAR 0 5
73804: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
73805: LD_INT 0
73807: PPUSH
73808: PPUSH
// result := 0 ;
73809: LD_ADDR_VAR 0 3
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// if not array or not value in array then
73817: LD_VAR 0 1
73821: NOT
73822: PUSH
73823: LD_VAR 0 2
73827: PUSH
73828: LD_VAR 0 1
73832: IN
73833: NOT
73834: OR
73835: IFFALSE 73839
// exit ;
73837: GO 73893
// for i = 1 to array do
73839: LD_ADDR_VAR 0 4
73843: PUSH
73844: DOUBLE
73845: LD_INT 1
73847: DEC
73848: ST_TO_ADDR
73849: LD_VAR 0 1
73853: PUSH
73854: FOR_TO
73855: IFFALSE 73891
// if value = array [ i ] then
73857: LD_VAR 0 2
73861: PUSH
73862: LD_VAR 0 1
73866: PUSH
73867: LD_VAR 0 4
73871: ARRAY
73872: EQUAL
73873: IFFALSE 73889
// begin result := i ;
73875: LD_ADDR_VAR 0 3
73879: PUSH
73880: LD_VAR 0 4
73884: ST_TO_ADDR
// exit ;
73885: POP
73886: POP
73887: GO 73893
// end ;
73889: GO 73854
73891: POP
73892: POP
// end ;
73893: LD_VAR 0 3
73897: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
73898: LD_INT 0
73900: PPUSH
// vc_chassis := chassis ;
73901: LD_ADDR_OWVAR 37
73905: PUSH
73906: LD_VAR 0 1
73910: ST_TO_ADDR
// vc_engine := engine ;
73911: LD_ADDR_OWVAR 39
73915: PUSH
73916: LD_VAR 0 2
73920: ST_TO_ADDR
// vc_control := control ;
73921: LD_ADDR_OWVAR 38
73925: PUSH
73926: LD_VAR 0 3
73930: ST_TO_ADDR
// vc_weapon := weapon ;
73931: LD_ADDR_OWVAR 40
73935: PUSH
73936: LD_VAR 0 4
73940: ST_TO_ADDR
// vc_fuel_battery := fuel ;
73941: LD_ADDR_OWVAR 41
73945: PUSH
73946: LD_VAR 0 5
73950: ST_TO_ADDR
// end ;
73951: LD_VAR 0 6
73955: RET
// export function WantPlant ( unit ) ; var task ; begin
73956: LD_INT 0
73958: PPUSH
73959: PPUSH
// result := false ;
73960: LD_ADDR_VAR 0 2
73964: PUSH
73965: LD_INT 0
73967: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
73968: LD_ADDR_VAR 0 3
73972: PUSH
73973: LD_VAR 0 1
73977: PPUSH
73978: CALL_OW 437
73982: ST_TO_ADDR
// if task then
73983: LD_VAR 0 3
73987: IFFALSE 74015
// if task [ 1 ] [ 1 ] = p then
73989: LD_VAR 0 3
73993: PUSH
73994: LD_INT 1
73996: ARRAY
73997: PUSH
73998: LD_INT 1
74000: ARRAY
74001: PUSH
74002: LD_STRING p
74004: EQUAL
74005: IFFALSE 74015
// result := true ;
74007: LD_ADDR_VAR 0 2
74011: PUSH
74012: LD_INT 1
74014: ST_TO_ADDR
// end ;
74015: LD_VAR 0 2
74019: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
74020: LD_INT 0
74022: PPUSH
74023: PPUSH
74024: PPUSH
74025: PPUSH
// if pos < 1 then
74026: LD_VAR 0 2
74030: PUSH
74031: LD_INT 1
74033: LESS
74034: IFFALSE 74038
// exit ;
74036: GO 74341
// if pos = 1 then
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 1
74045: EQUAL
74046: IFFALSE 74079
// result := Replace ( arr , pos [ 1 ] , value ) else
74048: LD_ADDR_VAR 0 4
74052: PUSH
74053: LD_VAR 0 1
74057: PPUSH
74058: LD_VAR 0 2
74062: PUSH
74063: LD_INT 1
74065: ARRAY
74066: PPUSH
74067: LD_VAR 0 3
74071: PPUSH
74072: CALL_OW 1
74076: ST_TO_ADDR
74077: GO 74341
// begin tmp := arr ;
74079: LD_ADDR_VAR 0 6
74083: PUSH
74084: LD_VAR 0 1
74088: ST_TO_ADDR
// s_arr := [ tmp ] ;
74089: LD_ADDR_VAR 0 7
74093: PUSH
74094: LD_VAR 0 6
74098: PUSH
74099: EMPTY
74100: LIST
74101: ST_TO_ADDR
// for i = 1 to pos - 1 do
74102: LD_ADDR_VAR 0 5
74106: PUSH
74107: DOUBLE
74108: LD_INT 1
74110: DEC
74111: ST_TO_ADDR
74112: LD_VAR 0 2
74116: PUSH
74117: LD_INT 1
74119: MINUS
74120: PUSH
74121: FOR_TO
74122: IFFALSE 74167
// begin tmp := tmp [ pos [ i ] ] ;
74124: LD_ADDR_VAR 0 6
74128: PUSH
74129: LD_VAR 0 6
74133: PUSH
74134: LD_VAR 0 2
74138: PUSH
74139: LD_VAR 0 5
74143: ARRAY
74144: ARRAY
74145: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
74146: LD_ADDR_VAR 0 7
74150: PUSH
74151: LD_VAR 0 7
74155: PUSH
74156: LD_VAR 0 6
74160: PUSH
74161: EMPTY
74162: LIST
74163: ADD
74164: ST_TO_ADDR
// end ;
74165: GO 74121
74167: POP
74168: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
74169: LD_ADDR_VAR 0 6
74173: PUSH
74174: LD_VAR 0 6
74178: PPUSH
74179: LD_VAR 0 2
74183: PUSH
74184: LD_VAR 0 2
74188: ARRAY
74189: PPUSH
74190: LD_VAR 0 3
74194: PPUSH
74195: CALL_OW 1
74199: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
74200: LD_ADDR_VAR 0 7
74204: PUSH
74205: LD_VAR 0 7
74209: PPUSH
74210: LD_VAR 0 7
74214: PPUSH
74215: LD_VAR 0 6
74219: PPUSH
74220: CALL_OW 1
74224: ST_TO_ADDR
// for i = s_arr downto 2 do
74225: LD_ADDR_VAR 0 5
74229: PUSH
74230: DOUBLE
74231: LD_VAR 0 7
74235: INC
74236: ST_TO_ADDR
74237: LD_INT 2
74239: PUSH
74240: FOR_DOWNTO
74241: IFFALSE 74325
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
74243: LD_ADDR_VAR 0 6
74247: PUSH
74248: LD_VAR 0 7
74252: PUSH
74253: LD_VAR 0 5
74257: PUSH
74258: LD_INT 1
74260: MINUS
74261: ARRAY
74262: PPUSH
74263: LD_VAR 0 2
74267: PUSH
74268: LD_VAR 0 5
74272: PUSH
74273: LD_INT 1
74275: MINUS
74276: ARRAY
74277: PPUSH
74278: LD_VAR 0 7
74282: PUSH
74283: LD_VAR 0 5
74287: ARRAY
74288: PPUSH
74289: CALL_OW 1
74293: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
74294: LD_ADDR_VAR 0 7
74298: PUSH
74299: LD_VAR 0 7
74303: PPUSH
74304: LD_VAR 0 5
74308: PUSH
74309: LD_INT 1
74311: MINUS
74312: PPUSH
74313: LD_VAR 0 6
74317: PPUSH
74318: CALL_OW 1
74322: ST_TO_ADDR
// end ;
74323: GO 74240
74325: POP
74326: POP
// result := s_arr [ 1 ] ;
74327: LD_ADDR_VAR 0 4
74331: PUSH
74332: LD_VAR 0 7
74336: PUSH
74337: LD_INT 1
74339: ARRAY
74340: ST_TO_ADDR
// end ; end ;
74341: LD_VAR 0 4
74345: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
74346: LD_INT 0
74348: PPUSH
74349: PPUSH
// if not list then
74350: LD_VAR 0 1
74354: NOT
74355: IFFALSE 74359
// exit ;
74357: GO 74450
// i := list [ pos1 ] ;
74359: LD_ADDR_VAR 0 5
74363: PUSH
74364: LD_VAR 0 1
74368: PUSH
74369: LD_VAR 0 2
74373: ARRAY
74374: ST_TO_ADDR
// if not i then
74375: LD_VAR 0 5
74379: NOT
74380: IFFALSE 74384
// exit ;
74382: GO 74450
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
74384: LD_ADDR_VAR 0 1
74388: PUSH
74389: LD_VAR 0 1
74393: PPUSH
74394: LD_VAR 0 2
74398: PPUSH
74399: LD_VAR 0 1
74403: PUSH
74404: LD_VAR 0 3
74408: ARRAY
74409: PPUSH
74410: CALL_OW 1
74414: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
74415: LD_ADDR_VAR 0 1
74419: PUSH
74420: LD_VAR 0 1
74424: PPUSH
74425: LD_VAR 0 3
74429: PPUSH
74430: LD_VAR 0 5
74434: PPUSH
74435: CALL_OW 1
74439: ST_TO_ADDR
// result := list ;
74440: LD_ADDR_VAR 0 4
74444: PUSH
74445: LD_VAR 0 1
74449: ST_TO_ADDR
// end ;
74450: LD_VAR 0 4
74454: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
74455: LD_INT 0
74457: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
74458: LD_ADDR_VAR 0 5
74462: PUSH
74463: LD_VAR 0 1
74467: PPUSH
74468: CALL_OW 250
74472: PPUSH
74473: LD_VAR 0 1
74477: PPUSH
74478: CALL_OW 251
74482: PPUSH
74483: LD_VAR 0 2
74487: PPUSH
74488: LD_VAR 0 3
74492: PPUSH
74493: LD_VAR 0 4
74497: PPUSH
74498: CALL 74508 0 5
74502: ST_TO_ADDR
// end ;
74503: LD_VAR 0 5
74507: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
74513: PPUSH
// if not list then
74514: LD_VAR 0 3
74518: NOT
74519: IFFALSE 74523
// exit ;
74521: GO 74911
// result := [ ] ;
74523: LD_ADDR_VAR 0 6
74527: PUSH
74528: EMPTY
74529: ST_TO_ADDR
// for i in list do
74530: LD_ADDR_VAR 0 7
74534: PUSH
74535: LD_VAR 0 3
74539: PUSH
74540: FOR_IN
74541: IFFALSE 74743
// begin tmp := GetDistUnitXY ( i , x , y ) ;
74543: LD_ADDR_VAR 0 9
74547: PUSH
74548: LD_VAR 0 7
74552: PPUSH
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 2
74562: PPUSH
74563: CALL_OW 297
74567: ST_TO_ADDR
// if not result then
74568: LD_VAR 0 6
74572: NOT
74573: IFFALSE 74599
// result := [ [ i , tmp ] ] else
74575: LD_ADDR_VAR 0 6
74579: PUSH
74580: LD_VAR 0 7
74584: PUSH
74585: LD_VAR 0 9
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: EMPTY
74595: LIST
74596: ST_TO_ADDR
74597: GO 74741
// begin if result [ result ] [ 2 ] < tmp then
74599: LD_VAR 0 6
74603: PUSH
74604: LD_VAR 0 6
74608: ARRAY
74609: PUSH
74610: LD_INT 2
74612: ARRAY
74613: PUSH
74614: LD_VAR 0 9
74618: LESS
74619: IFFALSE 74661
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
74621: LD_ADDR_VAR 0 6
74625: PUSH
74626: LD_VAR 0 6
74630: PPUSH
74631: LD_VAR 0 6
74635: PUSH
74636: LD_INT 1
74638: PLUS
74639: PPUSH
74640: LD_VAR 0 7
74644: PUSH
74645: LD_VAR 0 9
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PPUSH
74654: CALL_OW 2
74658: ST_TO_ADDR
74659: GO 74741
// for j = 1 to result do
74661: LD_ADDR_VAR 0 8
74665: PUSH
74666: DOUBLE
74667: LD_INT 1
74669: DEC
74670: ST_TO_ADDR
74671: LD_VAR 0 6
74675: PUSH
74676: FOR_TO
74677: IFFALSE 74739
// begin if tmp < result [ j ] [ 2 ] then
74679: LD_VAR 0 9
74683: PUSH
74684: LD_VAR 0 6
74688: PUSH
74689: LD_VAR 0 8
74693: ARRAY
74694: PUSH
74695: LD_INT 2
74697: ARRAY
74698: LESS
74699: IFFALSE 74737
// begin result := Insert ( result , j , [ i , tmp ] ) ;
74701: LD_ADDR_VAR 0 6
74705: PUSH
74706: LD_VAR 0 6
74710: PPUSH
74711: LD_VAR 0 8
74715: PPUSH
74716: LD_VAR 0 7
74720: PUSH
74721: LD_VAR 0 9
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PPUSH
74730: CALL_OW 2
74734: ST_TO_ADDR
// break ;
74735: GO 74739
// end ; end ;
74737: GO 74676
74739: POP
74740: POP
// end ; end ;
74741: GO 74540
74743: POP
74744: POP
// if result and not asc then
74745: LD_VAR 0 6
74749: PUSH
74750: LD_VAR 0 4
74754: NOT
74755: AND
74756: IFFALSE 74831
// begin tmp := result ;
74758: LD_ADDR_VAR 0 9
74762: PUSH
74763: LD_VAR 0 6
74767: ST_TO_ADDR
// for i = tmp downto 1 do
74768: LD_ADDR_VAR 0 7
74772: PUSH
74773: DOUBLE
74774: LD_VAR 0 9
74778: INC
74779: ST_TO_ADDR
74780: LD_INT 1
74782: PUSH
74783: FOR_DOWNTO
74784: IFFALSE 74829
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
74786: LD_ADDR_VAR 0 6
74790: PUSH
74791: LD_VAR 0 6
74795: PPUSH
74796: LD_VAR 0 9
74800: PUSH
74801: LD_VAR 0 7
74805: MINUS
74806: PUSH
74807: LD_INT 1
74809: PLUS
74810: PPUSH
74811: LD_VAR 0 9
74815: PUSH
74816: LD_VAR 0 7
74820: ARRAY
74821: PPUSH
74822: CALL_OW 1
74826: ST_TO_ADDR
74827: GO 74783
74829: POP
74830: POP
// end ; tmp := [ ] ;
74831: LD_ADDR_VAR 0 9
74835: PUSH
74836: EMPTY
74837: ST_TO_ADDR
// if mode then
74838: LD_VAR 0 5
74842: IFFALSE 74911
// begin for i = 1 to result do
74844: LD_ADDR_VAR 0 7
74848: PUSH
74849: DOUBLE
74850: LD_INT 1
74852: DEC
74853: ST_TO_ADDR
74854: LD_VAR 0 6
74858: PUSH
74859: FOR_TO
74860: IFFALSE 74899
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
74862: LD_ADDR_VAR 0 9
74866: PUSH
74867: LD_VAR 0 9
74871: PPUSH
74872: LD_VAR 0 7
74876: PPUSH
74877: LD_VAR 0 6
74881: PUSH
74882: LD_VAR 0 7
74886: ARRAY
74887: PUSH
74888: LD_INT 1
74890: ARRAY
74891: PPUSH
74892: CALL_OW 1
74896: ST_TO_ADDR
74897: GO 74859
74899: POP
74900: POP
// result := tmp ;
74901: LD_ADDR_VAR 0 6
74905: PUSH
74906: LD_VAR 0 9
74910: ST_TO_ADDR
// end ; end ;
74911: LD_VAR 0 6
74915: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
74916: LD_INT 0
74918: PPUSH
74919: PPUSH
74920: PPUSH
74921: PPUSH
74922: PPUSH
74923: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
74924: LD_ADDR_VAR 0 5
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: LD_INT 0
74934: PUSH
74935: LD_INT 0
74937: PUSH
74938: EMPTY
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: ST_TO_ADDR
// if not x or not y then
74946: LD_VAR 0 2
74950: NOT
74951: PUSH
74952: LD_VAR 0 3
74956: NOT
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 76612
// if not range then
74962: LD_VAR 0 4
74966: NOT
74967: IFFALSE 74977
// range := 10 ;
74969: LD_ADDR_VAR 0 4
74973: PUSH
74974: LD_INT 10
74976: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
74977: LD_ADDR_VAR 0 8
74981: PUSH
74982: LD_INT 81
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 92
74996: PUSH
74997: LD_VAR 0 2
75001: PUSH
75002: LD_VAR 0 3
75006: PUSH
75007: LD_VAR 0 4
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 3
75020: PUSH
75021: LD_INT 21
75023: PUSH
75024: LD_INT 3
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: LIST
75039: PPUSH
75040: CALL_OW 69
75044: ST_TO_ADDR
// if not tmp then
75045: LD_VAR 0 8
75049: NOT
75050: IFFALSE 75054
// exit ;
75052: GO 76612
// for i in tmp do
75054: LD_ADDR_VAR 0 6
75058: PUSH
75059: LD_VAR 0 8
75063: PUSH
75064: FOR_IN
75065: IFFALSE 76587
// begin points := [ 0 , 0 , 0 ] ;
75067: LD_ADDR_VAR 0 9
75071: PUSH
75072: LD_INT 0
75074: PUSH
75075: LD_INT 0
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: LIST
75085: ST_TO_ADDR
// bpoints := 1 ;
75086: LD_ADDR_VAR 0 10
75090: PUSH
75091: LD_INT 1
75093: ST_TO_ADDR
// case GetType ( i ) of unit_human :
75094: LD_VAR 0 6
75098: PPUSH
75099: CALL_OW 247
75103: PUSH
75104: LD_INT 1
75106: DOUBLE
75107: EQUAL
75108: IFTRUE 75112
75110: GO 75690
75112: POP
// begin if GetClass ( i ) = 1 then
75113: LD_VAR 0 6
75117: PPUSH
75118: CALL_OW 257
75122: PUSH
75123: LD_INT 1
75125: EQUAL
75126: IFFALSE 75147
// points := [ 10 , 5 , 3 ] ;
75128: LD_ADDR_VAR 0 9
75132: PUSH
75133: LD_INT 10
75135: PUSH
75136: LD_INT 5
75138: PUSH
75139: LD_INT 3
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: LIST
75146: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
75147: LD_VAR 0 6
75151: PPUSH
75152: CALL_OW 257
75156: PUSH
75157: LD_INT 2
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: LD_INT 4
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: IN
75171: IFFALSE 75192
// points := [ 3 , 2 , 1 ] ;
75173: LD_ADDR_VAR 0 9
75177: PUSH
75178: LD_INT 3
75180: PUSH
75181: LD_INT 2
75183: PUSH
75184: LD_INT 1
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: LIST
75191: ST_TO_ADDR
// if GetClass ( i ) = 5 then
75192: LD_VAR 0 6
75196: PPUSH
75197: CALL_OW 257
75201: PUSH
75202: LD_INT 5
75204: EQUAL
75205: IFFALSE 75226
// points := [ 130 , 5 , 2 ] ;
75207: LD_ADDR_VAR 0 9
75211: PUSH
75212: LD_INT 130
75214: PUSH
75215: LD_INT 5
75217: PUSH
75218: LD_INT 2
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: ST_TO_ADDR
// if GetClass ( i ) = 8 then
75226: LD_VAR 0 6
75230: PPUSH
75231: CALL_OW 257
75235: PUSH
75236: LD_INT 8
75238: EQUAL
75239: IFFALSE 75260
// points := [ 35 , 35 , 30 ] ;
75241: LD_ADDR_VAR 0 9
75245: PUSH
75246: LD_INT 35
75248: PUSH
75249: LD_INT 35
75251: PUSH
75252: LD_INT 30
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: ST_TO_ADDR
// if GetClass ( i ) = 9 then
75260: LD_VAR 0 6
75264: PPUSH
75265: CALL_OW 257
75269: PUSH
75270: LD_INT 9
75272: EQUAL
75273: IFFALSE 75294
// points := [ 20 , 55 , 40 ] ;
75275: LD_ADDR_VAR 0 9
75279: PUSH
75280: LD_INT 20
75282: PUSH
75283: LD_INT 55
75285: PUSH
75286: LD_INT 40
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: LIST
75293: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
75294: LD_VAR 0 6
75298: PPUSH
75299: CALL_OW 257
75303: PUSH
75304: LD_INT 12
75306: PUSH
75307: LD_INT 16
75309: PUSH
75310: EMPTY
75311: LIST
75312: LIST
75313: IN
75314: IFFALSE 75335
// points := [ 5 , 3 , 2 ] ;
75316: LD_ADDR_VAR 0 9
75320: PUSH
75321: LD_INT 5
75323: PUSH
75324: LD_INT 3
75326: PUSH
75327: LD_INT 2
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: ST_TO_ADDR
// if GetClass ( i ) = 17 then
75335: LD_VAR 0 6
75339: PPUSH
75340: CALL_OW 257
75344: PUSH
75345: LD_INT 17
75347: EQUAL
75348: IFFALSE 75369
// points := [ 100 , 50 , 75 ] ;
75350: LD_ADDR_VAR 0 9
75354: PUSH
75355: LD_INT 100
75357: PUSH
75358: LD_INT 50
75360: PUSH
75361: LD_INT 75
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: ST_TO_ADDR
// if GetClass ( i ) = 15 then
75369: LD_VAR 0 6
75373: PPUSH
75374: CALL_OW 257
75378: PUSH
75379: LD_INT 15
75381: EQUAL
75382: IFFALSE 75403
// points := [ 10 , 5 , 3 ] ;
75384: LD_ADDR_VAR 0 9
75388: PUSH
75389: LD_INT 10
75391: PUSH
75392: LD_INT 5
75394: PUSH
75395: LD_INT 3
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: LIST
75402: ST_TO_ADDR
// if GetClass ( i ) = 14 then
75403: LD_VAR 0 6
75407: PPUSH
75408: CALL_OW 257
75412: PUSH
75413: LD_INT 14
75415: EQUAL
75416: IFFALSE 75437
// points := [ 10 , 0 , 0 ] ;
75418: LD_ADDR_VAR 0 9
75422: PUSH
75423: LD_INT 10
75425: PUSH
75426: LD_INT 0
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: LIST
75436: ST_TO_ADDR
// if GetClass ( i ) = 11 then
75437: LD_VAR 0 6
75441: PPUSH
75442: CALL_OW 257
75446: PUSH
75447: LD_INT 11
75449: EQUAL
75450: IFFALSE 75471
// points := [ 30 , 10 , 5 ] ;
75452: LD_ADDR_VAR 0 9
75456: PUSH
75457: LD_INT 30
75459: PUSH
75460: LD_INT 10
75462: PUSH
75463: LD_INT 5
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: LIST
75470: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
75471: LD_VAR 0 1
75475: PPUSH
75476: LD_INT 5
75478: PPUSH
75479: CALL_OW 321
75483: PUSH
75484: LD_INT 2
75486: EQUAL
75487: IFFALSE 75504
// bpoints := bpoints * 1.8 ;
75489: LD_ADDR_VAR 0 10
75493: PUSH
75494: LD_VAR 0 10
75498: PUSH
75499: LD_REAL  1.80000000000000E+0000
75502: MUL
75503: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
75504: LD_VAR 0 6
75508: PPUSH
75509: CALL_OW 257
75513: PUSH
75514: LD_INT 1
75516: PUSH
75517: LD_INT 2
75519: PUSH
75520: LD_INT 3
75522: PUSH
75523: LD_INT 4
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: IN
75532: PUSH
75533: LD_VAR 0 1
75537: PPUSH
75538: LD_INT 51
75540: PPUSH
75541: CALL_OW 321
75545: PUSH
75546: LD_INT 2
75548: EQUAL
75549: AND
75550: IFFALSE 75567
// bpoints := bpoints * 1.2 ;
75552: LD_ADDR_VAR 0 10
75556: PUSH
75557: LD_VAR 0 10
75561: PUSH
75562: LD_REAL  1.20000000000000E+0000
75565: MUL
75566: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
75567: LD_VAR 0 6
75571: PPUSH
75572: CALL_OW 257
75576: PUSH
75577: LD_INT 5
75579: PUSH
75580: LD_INT 7
75582: PUSH
75583: LD_INT 9
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: IN
75591: PUSH
75592: LD_VAR 0 1
75596: PPUSH
75597: LD_INT 52
75599: PPUSH
75600: CALL_OW 321
75604: PUSH
75605: LD_INT 2
75607: EQUAL
75608: AND
75609: IFFALSE 75626
// bpoints := bpoints * 1.5 ;
75611: LD_ADDR_VAR 0 10
75615: PUSH
75616: LD_VAR 0 10
75620: PUSH
75621: LD_REAL  1.50000000000000E+0000
75624: MUL
75625: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
75626: LD_VAR 0 1
75630: PPUSH
75631: LD_INT 66
75633: PPUSH
75634: CALL_OW 321
75638: PUSH
75639: LD_INT 2
75641: EQUAL
75642: IFFALSE 75659
// bpoints := bpoints * 1.1 ;
75644: LD_ADDR_VAR 0 10
75648: PUSH
75649: LD_VAR 0 10
75653: PUSH
75654: LD_REAL  1.10000000000000E+0000
75657: MUL
75658: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
75659: LD_ADDR_VAR 0 10
75663: PUSH
75664: LD_VAR 0 10
75668: PUSH
75669: LD_VAR 0 6
75673: PPUSH
75674: LD_INT 1
75676: PPUSH
75677: CALL_OW 259
75681: PUSH
75682: LD_REAL  1.15000000000000E+0000
75685: MUL
75686: MUL
75687: ST_TO_ADDR
// end ; unit_vehicle :
75688: GO 76516
75690: LD_INT 2
75692: DOUBLE
75693: EQUAL
75694: IFTRUE 75698
75696: GO 76504
75698: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
75699: LD_VAR 0 6
75703: PPUSH
75704: CALL_OW 264
75708: PUSH
75709: LD_INT 2
75711: PUSH
75712: LD_INT 42
75714: PUSH
75715: LD_INT 24
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: LIST
75722: IN
75723: IFFALSE 75744
// points := [ 25 , 5 , 3 ] ;
75725: LD_ADDR_VAR 0 9
75729: PUSH
75730: LD_INT 25
75732: PUSH
75733: LD_INT 5
75735: PUSH
75736: LD_INT 3
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: LIST
75743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
75744: LD_VAR 0 6
75748: PPUSH
75749: CALL_OW 264
75753: PUSH
75754: LD_INT 4
75756: PUSH
75757: LD_INT 43
75759: PUSH
75760: LD_INT 25
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: LIST
75767: IN
75768: IFFALSE 75789
// points := [ 40 , 15 , 5 ] ;
75770: LD_ADDR_VAR 0 9
75774: PUSH
75775: LD_INT 40
75777: PUSH
75778: LD_INT 15
75780: PUSH
75781: LD_INT 5
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: LIST
75788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
75789: LD_VAR 0 6
75793: PPUSH
75794: CALL_OW 264
75798: PUSH
75799: LD_INT 3
75801: PUSH
75802: LD_INT 23
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: IN
75809: IFFALSE 75830
// points := [ 7 , 25 , 8 ] ;
75811: LD_ADDR_VAR 0 9
75815: PUSH
75816: LD_INT 7
75818: PUSH
75819: LD_INT 25
75821: PUSH
75822: LD_INT 8
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
75830: LD_VAR 0 6
75834: PPUSH
75835: CALL_OW 264
75839: PUSH
75840: LD_INT 5
75842: PUSH
75843: LD_INT 27
75845: PUSH
75846: LD_INT 44
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: LIST
75853: IN
75854: IFFALSE 75875
// points := [ 14 , 50 , 16 ] ;
75856: LD_ADDR_VAR 0 9
75860: PUSH
75861: LD_INT 14
75863: PUSH
75864: LD_INT 50
75866: PUSH
75867: LD_INT 16
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: LIST
75874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
75875: LD_VAR 0 6
75879: PPUSH
75880: CALL_OW 264
75884: PUSH
75885: LD_INT 6
75887: PUSH
75888: LD_INT 46
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: IN
75895: IFFALSE 75916
// points := [ 32 , 120 , 70 ] ;
75897: LD_ADDR_VAR 0 9
75901: PUSH
75902: LD_INT 32
75904: PUSH
75905: LD_INT 120
75907: PUSH
75908: LD_INT 70
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: LIST
75915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
75916: LD_VAR 0 6
75920: PPUSH
75921: CALL_OW 264
75925: PUSH
75926: LD_INT 7
75928: PUSH
75929: LD_INT 28
75931: PUSH
75932: LD_INT 45
75934: PUSH
75935: LD_INT 92
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: IN
75944: IFFALSE 75965
// points := [ 35 , 20 , 45 ] ;
75946: LD_ADDR_VAR 0 9
75950: PUSH
75951: LD_INT 35
75953: PUSH
75954: LD_INT 20
75956: PUSH
75957: LD_INT 45
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: LIST
75964: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
75965: LD_VAR 0 6
75969: PPUSH
75970: CALL_OW 264
75974: PUSH
75975: LD_INT 47
75977: PUSH
75978: EMPTY
75979: LIST
75980: IN
75981: IFFALSE 76002
// points := [ 67 , 45 , 75 ] ;
75983: LD_ADDR_VAR 0 9
75987: PUSH
75988: LD_INT 67
75990: PUSH
75991: LD_INT 45
75993: PUSH
75994: LD_INT 75
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: LIST
76001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
76002: LD_VAR 0 6
76006: PPUSH
76007: CALL_OW 264
76011: PUSH
76012: LD_INT 26
76014: PUSH
76015: EMPTY
76016: LIST
76017: IN
76018: IFFALSE 76039
// points := [ 120 , 30 , 80 ] ;
76020: LD_ADDR_VAR 0 9
76024: PUSH
76025: LD_INT 120
76027: PUSH
76028: LD_INT 30
76030: PUSH
76031: LD_INT 80
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
76039: LD_VAR 0 6
76043: PPUSH
76044: CALL_OW 264
76048: PUSH
76049: LD_INT 22
76051: PUSH
76052: EMPTY
76053: LIST
76054: IN
76055: IFFALSE 76076
// points := [ 40 , 1 , 1 ] ;
76057: LD_ADDR_VAR 0 9
76061: PUSH
76062: LD_INT 40
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: LD_INT 1
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: LIST
76075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
76076: LD_VAR 0 6
76080: PPUSH
76081: CALL_OW 264
76085: PUSH
76086: LD_INT 29
76088: PUSH
76089: EMPTY
76090: LIST
76091: IN
76092: IFFALSE 76113
// points := [ 70 , 200 , 400 ] ;
76094: LD_ADDR_VAR 0 9
76098: PUSH
76099: LD_INT 70
76101: PUSH
76102: LD_INT 200
76104: PUSH
76105: LD_INT 400
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: LIST
76112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
76113: LD_VAR 0 6
76117: PPUSH
76118: CALL_OW 264
76122: PUSH
76123: LD_INT 14
76125: PUSH
76126: LD_INT 53
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: IN
76133: IFFALSE 76154
// points := [ 40 , 10 , 20 ] ;
76135: LD_ADDR_VAR 0 9
76139: PUSH
76140: LD_INT 40
76142: PUSH
76143: LD_INT 10
76145: PUSH
76146: LD_INT 20
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: LIST
76153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
76154: LD_VAR 0 6
76158: PPUSH
76159: CALL_OW 264
76163: PUSH
76164: LD_INT 9
76166: PUSH
76167: EMPTY
76168: LIST
76169: IN
76170: IFFALSE 76191
// points := [ 5 , 70 , 20 ] ;
76172: LD_ADDR_VAR 0 9
76176: PUSH
76177: LD_INT 5
76179: PUSH
76180: LD_INT 70
76182: PUSH
76183: LD_INT 20
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
76191: LD_VAR 0 6
76195: PPUSH
76196: CALL_OW 264
76200: PUSH
76201: LD_INT 10
76203: PUSH
76204: EMPTY
76205: LIST
76206: IN
76207: IFFALSE 76228
// points := [ 35 , 110 , 70 ] ;
76209: LD_ADDR_VAR 0 9
76213: PUSH
76214: LD_INT 35
76216: PUSH
76217: LD_INT 110
76219: PUSH
76220: LD_INT 70
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: LIST
76227: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
76228: LD_VAR 0 6
76232: PPUSH
76233: CALL_OW 265
76237: PUSH
76238: LD_INT 25
76240: EQUAL
76241: IFFALSE 76262
// points := [ 80 , 65 , 100 ] ;
76243: LD_ADDR_VAR 0 9
76247: PUSH
76248: LD_INT 80
76250: PUSH
76251: LD_INT 65
76253: PUSH
76254: LD_INT 100
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: LIST
76261: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
76262: LD_VAR 0 6
76266: PPUSH
76267: CALL_OW 263
76271: PUSH
76272: LD_INT 1
76274: EQUAL
76275: IFFALSE 76310
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
76277: LD_ADDR_VAR 0 10
76281: PUSH
76282: LD_VAR 0 10
76286: PUSH
76287: LD_VAR 0 6
76291: PPUSH
76292: CALL_OW 311
76296: PPUSH
76297: LD_INT 3
76299: PPUSH
76300: CALL_OW 259
76304: PUSH
76305: LD_INT 4
76307: MUL
76308: MUL
76309: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
76310: LD_VAR 0 6
76314: PPUSH
76315: CALL_OW 263
76319: PUSH
76320: LD_INT 2
76322: EQUAL
76323: IFFALSE 76374
// begin j := IsControledBy ( i ) ;
76325: LD_ADDR_VAR 0 7
76329: PUSH
76330: LD_VAR 0 6
76334: PPUSH
76335: CALL_OW 312
76339: ST_TO_ADDR
// if j then
76340: LD_VAR 0 7
76344: IFFALSE 76374
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
76346: LD_ADDR_VAR 0 10
76350: PUSH
76351: LD_VAR 0 10
76355: PUSH
76356: LD_VAR 0 7
76360: PPUSH
76361: LD_INT 3
76363: PPUSH
76364: CALL_OW 259
76368: PUSH
76369: LD_INT 3
76371: MUL
76372: MUL
76373: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
76374: LD_VAR 0 6
76378: PPUSH
76379: CALL_OW 264
76383: PUSH
76384: LD_INT 5
76386: PUSH
76387: LD_INT 6
76389: PUSH
76390: LD_INT 46
76392: PUSH
76393: LD_INT 44
76395: PUSH
76396: LD_INT 47
76398: PUSH
76399: LD_INT 45
76401: PUSH
76402: LD_INT 28
76404: PUSH
76405: LD_INT 7
76407: PUSH
76408: LD_INT 27
76410: PUSH
76411: LD_INT 29
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: IN
76426: PUSH
76427: LD_VAR 0 1
76431: PPUSH
76432: LD_INT 52
76434: PPUSH
76435: CALL_OW 321
76439: PUSH
76440: LD_INT 2
76442: EQUAL
76443: AND
76444: IFFALSE 76461
// bpoints := bpoints * 1.2 ;
76446: LD_ADDR_VAR 0 10
76450: PUSH
76451: LD_VAR 0 10
76455: PUSH
76456: LD_REAL  1.20000000000000E+0000
76459: MUL
76460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
76461: LD_VAR 0 6
76465: PPUSH
76466: CALL_OW 264
76470: PUSH
76471: LD_INT 6
76473: PUSH
76474: LD_INT 46
76476: PUSH
76477: LD_INT 47
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: LIST
76484: IN
76485: IFFALSE 76502
// bpoints := bpoints * 1.2 ;
76487: LD_ADDR_VAR 0 10
76491: PUSH
76492: LD_VAR 0 10
76496: PUSH
76497: LD_REAL  1.20000000000000E+0000
76500: MUL
76501: ST_TO_ADDR
// end ; unit_building :
76502: GO 76516
76504: LD_INT 3
76506: DOUBLE
76507: EQUAL
76508: IFTRUE 76512
76510: GO 76515
76512: POP
// ; end ;
76513: GO 76516
76515: POP
// for j = 1 to 3 do
76516: LD_ADDR_VAR 0 7
76520: PUSH
76521: DOUBLE
76522: LD_INT 1
76524: DEC
76525: ST_TO_ADDR
76526: LD_INT 3
76528: PUSH
76529: FOR_TO
76530: IFFALSE 76583
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
76532: LD_ADDR_VAR 0 5
76536: PUSH
76537: LD_VAR 0 5
76541: PPUSH
76542: LD_VAR 0 7
76546: PPUSH
76547: LD_VAR 0 5
76551: PUSH
76552: LD_VAR 0 7
76556: ARRAY
76557: PUSH
76558: LD_VAR 0 9
76562: PUSH
76563: LD_VAR 0 7
76567: ARRAY
76568: PUSH
76569: LD_VAR 0 10
76573: MUL
76574: PLUS
76575: PPUSH
76576: CALL_OW 1
76580: ST_TO_ADDR
76581: GO 76529
76583: POP
76584: POP
// end ;
76585: GO 75064
76587: POP
76588: POP
// result := Replace ( result , 4 , tmp ) ;
76589: LD_ADDR_VAR 0 5
76593: PUSH
76594: LD_VAR 0 5
76598: PPUSH
76599: LD_INT 4
76601: PPUSH
76602: LD_VAR 0 8
76606: PPUSH
76607: CALL_OW 1
76611: ST_TO_ADDR
// end ;
76612: LD_VAR 0 5
76616: RET
// export function DangerAtRange ( unit , range ) ; begin
76617: LD_INT 0
76619: PPUSH
// if not unit then
76620: LD_VAR 0 1
76624: NOT
76625: IFFALSE 76629
// exit ;
76627: GO 76674
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
76629: LD_ADDR_VAR 0 3
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 255
76643: PPUSH
76644: LD_VAR 0 1
76648: PPUSH
76649: CALL_OW 250
76653: PPUSH
76654: LD_VAR 0 1
76658: PPUSH
76659: CALL_OW 251
76663: PPUSH
76664: LD_VAR 0 2
76668: PPUSH
76669: CALL 74916 0 4
76673: ST_TO_ADDR
// end ;
76674: LD_VAR 0 3
76678: RET
// export function DangerInArea ( side , area ) ; begin
76679: LD_INT 0
76681: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
76682: LD_ADDR_VAR 0 3
76686: PUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: LD_INT 81
76694: PUSH
76695: LD_VAR 0 1
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PPUSH
76704: CALL_OW 70
76708: ST_TO_ADDR
// end ;
76709: LD_VAR 0 3
76713: RET
// export function IsExtension ( b ) ; begin
76714: LD_INT 0
76716: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
76717: LD_ADDR_VAR 0 2
76721: PUSH
76722: LD_VAR 0 1
76726: PUSH
76727: LD_INT 23
76729: PUSH
76730: LD_INT 20
76732: PUSH
76733: LD_INT 22
76735: PUSH
76736: LD_INT 17
76738: PUSH
76739: LD_INT 24
76741: PUSH
76742: LD_INT 21
76744: PUSH
76745: LD_INT 19
76747: PUSH
76748: LD_INT 16
76750: PUSH
76751: LD_INT 25
76753: PUSH
76754: LD_INT 18
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: IN
76769: ST_TO_ADDR
// end ;
76770: LD_VAR 0 2
76774: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
76775: LD_INT 0
76777: PPUSH
76778: PPUSH
76779: PPUSH
// result := [ ] ;
76780: LD_ADDR_VAR 0 4
76784: PUSH
76785: EMPTY
76786: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
76787: LD_ADDR_VAR 0 5
76791: PUSH
76792: LD_VAR 0 2
76796: PPUSH
76797: LD_INT 21
76799: PUSH
76800: LD_INT 3
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PPUSH
76807: CALL_OW 70
76811: ST_TO_ADDR
// if not tmp then
76812: LD_VAR 0 5
76816: NOT
76817: IFFALSE 76821
// exit ;
76819: GO 76885
// if checkLink then
76821: LD_VAR 0 3
76825: IFFALSE 76875
// begin for i in tmp do
76827: LD_ADDR_VAR 0 6
76831: PUSH
76832: LD_VAR 0 5
76836: PUSH
76837: FOR_IN
76838: IFFALSE 76873
// if GetBase ( i ) <> base then
76840: LD_VAR 0 6
76844: PPUSH
76845: CALL_OW 274
76849: PUSH
76850: LD_VAR 0 1
76854: NONEQUAL
76855: IFFALSE 76871
// ComLinkToBase ( base , i ) ;
76857: LD_VAR 0 1
76861: PPUSH
76862: LD_VAR 0 6
76866: PPUSH
76867: CALL_OW 169
76871: GO 76837
76873: POP
76874: POP
// end ; result := tmp ;
76875: LD_ADDR_VAR 0 4
76879: PUSH
76880: LD_VAR 0 5
76884: ST_TO_ADDR
// end ;
76885: LD_VAR 0 4
76889: RET
// export function ComComplete ( units , b ) ; var i ; begin
76890: LD_INT 0
76892: PPUSH
76893: PPUSH
// if not units then
76894: LD_VAR 0 1
76898: NOT
76899: IFFALSE 76903
// exit ;
76901: GO 76993
// for i in units do
76903: LD_ADDR_VAR 0 4
76907: PUSH
76908: LD_VAR 0 1
76912: PUSH
76913: FOR_IN
76914: IFFALSE 76991
// if BuildingStatus ( b ) = bs_build then
76916: LD_VAR 0 2
76920: PPUSH
76921: CALL_OW 461
76925: PUSH
76926: LD_INT 1
76928: EQUAL
76929: IFFALSE 76989
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
76931: LD_VAR 0 4
76935: PPUSH
76936: LD_STRING h
76938: PUSH
76939: LD_VAR 0 2
76943: PPUSH
76944: CALL_OW 250
76948: PUSH
76949: LD_VAR 0 2
76953: PPUSH
76954: CALL_OW 251
76958: PUSH
76959: LD_VAR 0 2
76963: PUSH
76964: LD_INT 0
76966: PUSH
76967: LD_INT 0
76969: PUSH
76970: LD_INT 0
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: PUSH
76982: EMPTY
76983: LIST
76984: PPUSH
76985: CALL_OW 446
76989: GO 76913
76991: POP
76992: POP
// end ;
76993: LD_VAR 0 3
76997: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
76998: LD_INT 0
77000: PPUSH
77001: PPUSH
77002: PPUSH
77003: PPUSH
77004: PPUSH
77005: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
77006: LD_VAR 0 1
77010: NOT
77011: PUSH
77012: LD_VAR 0 1
77016: PPUSH
77017: CALL_OW 263
77021: PUSH
77022: LD_INT 2
77024: NONEQUAL
77025: OR
77026: IFFALSE 77030
// exit ;
77028: GO 77346
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
77030: LD_ADDR_VAR 0 6
77034: PUSH
77035: LD_INT 22
77037: PUSH
77038: LD_VAR 0 1
77042: PPUSH
77043: CALL_OW 255
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 2
77054: PUSH
77055: LD_INT 30
77057: PUSH
77058: LD_INT 36
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 34
77067: PUSH
77068: LD_INT 31
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: LIST
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PPUSH
77084: CALL_OW 69
77088: ST_TO_ADDR
// if not tmp then
77089: LD_VAR 0 6
77093: NOT
77094: IFFALSE 77098
// exit ;
77096: GO 77346
// result := [ ] ;
77098: LD_ADDR_VAR 0 2
77102: PUSH
77103: EMPTY
77104: ST_TO_ADDR
// for i in tmp do
77105: LD_ADDR_VAR 0 3
77109: PUSH
77110: LD_VAR 0 6
77114: PUSH
77115: FOR_IN
77116: IFFALSE 77187
// begin t := UnitsInside ( i ) ;
77118: LD_ADDR_VAR 0 4
77122: PUSH
77123: LD_VAR 0 3
77127: PPUSH
77128: CALL_OW 313
77132: ST_TO_ADDR
// if t then
77133: LD_VAR 0 4
77137: IFFALSE 77185
// for j in t do
77139: LD_ADDR_VAR 0 7
77143: PUSH
77144: LD_VAR 0 4
77148: PUSH
77149: FOR_IN
77150: IFFALSE 77183
// result := Replace ( result , result + 1 , j ) ;
77152: LD_ADDR_VAR 0 2
77156: PUSH
77157: LD_VAR 0 2
77161: PPUSH
77162: LD_VAR 0 2
77166: PUSH
77167: LD_INT 1
77169: PLUS
77170: PPUSH
77171: LD_VAR 0 7
77175: PPUSH
77176: CALL_OW 1
77180: ST_TO_ADDR
77181: GO 77149
77183: POP
77184: POP
// end ;
77185: GO 77115
77187: POP
77188: POP
// if not result then
77189: LD_VAR 0 2
77193: NOT
77194: IFFALSE 77198
// exit ;
77196: GO 77346
// mech := result [ 1 ] ;
77198: LD_ADDR_VAR 0 5
77202: PUSH
77203: LD_VAR 0 2
77207: PUSH
77208: LD_INT 1
77210: ARRAY
77211: ST_TO_ADDR
// if result > 1 then
77212: LD_VAR 0 2
77216: PUSH
77217: LD_INT 1
77219: GREATER
77220: IFFALSE 77332
// begin for i = 2 to result do
77222: LD_ADDR_VAR 0 3
77226: PUSH
77227: DOUBLE
77228: LD_INT 2
77230: DEC
77231: ST_TO_ADDR
77232: LD_VAR 0 2
77236: PUSH
77237: FOR_TO
77238: IFFALSE 77330
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
77240: LD_ADDR_VAR 0 4
77244: PUSH
77245: LD_VAR 0 2
77249: PUSH
77250: LD_VAR 0 3
77254: ARRAY
77255: PPUSH
77256: LD_INT 3
77258: PPUSH
77259: CALL_OW 259
77263: PUSH
77264: LD_VAR 0 2
77268: PUSH
77269: LD_VAR 0 3
77273: ARRAY
77274: PPUSH
77275: CALL_OW 432
77279: MINUS
77280: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
77281: LD_VAR 0 4
77285: PUSH
77286: LD_VAR 0 5
77290: PPUSH
77291: LD_INT 3
77293: PPUSH
77294: CALL_OW 259
77298: PUSH
77299: LD_VAR 0 5
77303: PPUSH
77304: CALL_OW 432
77308: MINUS
77309: GREATEREQUAL
77310: IFFALSE 77328
// mech := result [ i ] ;
77312: LD_ADDR_VAR 0 5
77316: PUSH
77317: LD_VAR 0 2
77321: PUSH
77322: LD_VAR 0 3
77326: ARRAY
77327: ST_TO_ADDR
// end ;
77328: GO 77237
77330: POP
77331: POP
// end ; ComLinkTo ( vehicle , mech ) ;
77332: LD_VAR 0 1
77336: PPUSH
77337: LD_VAR 0 5
77341: PPUSH
77342: CALL_OW 135
// end ;
77346: LD_VAR 0 2
77350: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
77351: LD_INT 0
77353: PPUSH
77354: PPUSH
77355: PPUSH
77356: PPUSH
77357: PPUSH
77358: PPUSH
77359: PPUSH
77360: PPUSH
77361: PPUSH
77362: PPUSH
77363: PPUSH
77364: PPUSH
77365: PPUSH
// result := [ ] ;
77366: LD_ADDR_VAR 0 7
77370: PUSH
77371: EMPTY
77372: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
77373: LD_VAR 0 1
77377: PPUSH
77378: CALL_OW 266
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: LD_INT 1
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: IN
77393: NOT
77394: IFFALSE 77398
// exit ;
77396: GO 79032
// if name then
77398: LD_VAR 0 3
77402: IFFALSE 77418
// SetBName ( base_dep , name ) ;
77404: LD_VAR 0 1
77408: PPUSH
77409: LD_VAR 0 3
77413: PPUSH
77414: CALL_OW 500
// base := GetBase ( base_dep ) ;
77418: LD_ADDR_VAR 0 15
77422: PUSH
77423: LD_VAR 0 1
77427: PPUSH
77428: CALL_OW 274
77432: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
77433: LD_ADDR_VAR 0 16
77437: PUSH
77438: LD_VAR 0 1
77442: PPUSH
77443: CALL_OW 255
77447: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
77448: LD_ADDR_VAR 0 17
77452: PUSH
77453: LD_VAR 0 1
77457: PPUSH
77458: CALL_OW 248
77462: ST_TO_ADDR
// if sources then
77463: LD_VAR 0 5
77467: IFFALSE 77514
// for i = 1 to 3 do
77469: LD_ADDR_VAR 0 8
77473: PUSH
77474: DOUBLE
77475: LD_INT 1
77477: DEC
77478: ST_TO_ADDR
77479: LD_INT 3
77481: PUSH
77482: FOR_TO
77483: IFFALSE 77512
// AddResourceType ( base , i , sources [ i ] ) ;
77485: LD_VAR 0 15
77489: PPUSH
77490: LD_VAR 0 8
77494: PPUSH
77495: LD_VAR 0 5
77499: PUSH
77500: LD_VAR 0 8
77504: ARRAY
77505: PPUSH
77506: CALL_OW 276
77510: GO 77482
77512: POP
77513: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
77514: LD_ADDR_VAR 0 18
77518: PUSH
77519: LD_VAR 0 15
77523: PPUSH
77524: LD_VAR 0 2
77528: PPUSH
77529: LD_INT 1
77531: PPUSH
77532: CALL 76775 0 3
77536: ST_TO_ADDR
// InitHc ;
77537: CALL_OW 19
// InitUc ;
77541: CALL_OW 18
// uc_side := side ;
77545: LD_ADDR_OWVAR 20
77549: PUSH
77550: LD_VAR 0 16
77554: ST_TO_ADDR
// uc_nation := nation ;
77555: LD_ADDR_OWVAR 21
77559: PUSH
77560: LD_VAR 0 17
77564: ST_TO_ADDR
// if buildings then
77565: LD_VAR 0 18
77569: IFFALSE 78891
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
77571: LD_ADDR_VAR 0 19
77575: PUSH
77576: LD_VAR 0 18
77580: PPUSH
77581: LD_INT 2
77583: PUSH
77584: LD_INT 30
77586: PUSH
77587: LD_INT 29
77589: PUSH
77590: EMPTY
77591: LIST
77592: LIST
77593: PUSH
77594: LD_INT 30
77596: PUSH
77597: LD_INT 30
77599: PUSH
77600: EMPTY
77601: LIST
77602: LIST
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: LIST
77608: PPUSH
77609: CALL_OW 72
77613: ST_TO_ADDR
// if tmp then
77614: LD_VAR 0 19
77618: IFFALSE 77666
// for i in tmp do
77620: LD_ADDR_VAR 0 8
77624: PUSH
77625: LD_VAR 0 19
77629: PUSH
77630: FOR_IN
77631: IFFALSE 77664
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
77633: LD_VAR 0 8
77637: PPUSH
77638: CALL_OW 250
77642: PPUSH
77643: LD_VAR 0 8
77647: PPUSH
77648: CALL_OW 251
77652: PPUSH
77653: LD_VAR 0 16
77657: PPUSH
77658: CALL_OW 441
77662: GO 77630
77664: POP
77665: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
77666: LD_VAR 0 18
77670: PPUSH
77671: LD_INT 2
77673: PUSH
77674: LD_INT 30
77676: PUSH
77677: LD_INT 32
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 30
77686: PUSH
77687: LD_INT 33
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: LIST
77698: PPUSH
77699: CALL_OW 72
77703: IFFALSE 77791
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
77705: LD_ADDR_VAR 0 8
77709: PUSH
77710: LD_VAR 0 18
77714: PPUSH
77715: LD_INT 2
77717: PUSH
77718: LD_INT 30
77720: PUSH
77721: LD_INT 32
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: LD_INT 30
77730: PUSH
77731: LD_INT 33
77733: PUSH
77734: EMPTY
77735: LIST
77736: LIST
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: PPUSH
77743: CALL_OW 72
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77789
// begin if not GetBWeapon ( i ) then
77751: LD_VAR 0 8
77755: PPUSH
77756: CALL_OW 269
77760: NOT
77761: IFFALSE 77787
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
77763: LD_VAR 0 8
77767: PPUSH
77768: LD_VAR 0 8
77772: PPUSH
77773: LD_VAR 0 2
77777: PPUSH
77778: CALL 79037 0 2
77782: PPUSH
77783: CALL_OW 431
// end ;
77787: GO 77748
77789: POP
77790: POP
// end ; for i = 1 to personel do
77791: LD_ADDR_VAR 0 8
77795: PUSH
77796: DOUBLE
77797: LD_INT 1
77799: DEC
77800: ST_TO_ADDR
77801: LD_VAR 0 6
77805: PUSH
77806: FOR_TO
77807: IFFALSE 78871
// begin if i > 4 then
77809: LD_VAR 0 8
77813: PUSH
77814: LD_INT 4
77816: GREATER
77817: IFFALSE 77821
// break ;
77819: GO 78871
// case i of 1 :
77821: LD_VAR 0 8
77825: PUSH
77826: LD_INT 1
77828: DOUBLE
77829: EQUAL
77830: IFTRUE 77834
77832: GO 77914
77834: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
77835: LD_ADDR_VAR 0 12
77839: PUSH
77840: LD_VAR 0 18
77844: PPUSH
77845: LD_INT 22
77847: PUSH
77848: LD_VAR 0 16
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 58
77859: PUSH
77860: EMPTY
77861: LIST
77862: PUSH
77863: LD_INT 2
77865: PUSH
77866: LD_INT 30
77868: PUSH
77869: LD_INT 32
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 30
77878: PUSH
77879: LD_INT 4
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: LD_INT 30
77888: PUSH
77889: LD_INT 5
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: LIST
77906: PPUSH
77907: CALL_OW 72
77911: ST_TO_ADDR
77912: GO 78136
77914: LD_INT 2
77916: DOUBLE
77917: EQUAL
77918: IFTRUE 77922
77920: GO 77984
77922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
77923: LD_ADDR_VAR 0 12
77927: PUSH
77928: LD_VAR 0 18
77932: PPUSH
77933: LD_INT 22
77935: PUSH
77936: LD_VAR 0 16
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: LD_INT 2
77947: PUSH
77948: LD_INT 30
77950: PUSH
77951: LD_INT 0
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 30
77960: PUSH
77961: LD_INT 1
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: LIST
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PPUSH
77977: CALL_OW 72
77981: ST_TO_ADDR
77982: GO 78136
77984: LD_INT 3
77986: DOUBLE
77987: EQUAL
77988: IFTRUE 77992
77990: GO 78054
77992: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
77993: LD_ADDR_VAR 0 12
77997: PUSH
77998: LD_VAR 0 18
78002: PPUSH
78003: LD_INT 22
78005: PUSH
78006: LD_VAR 0 16
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_INT 2
78017: PUSH
78018: LD_INT 30
78020: PUSH
78021: LD_INT 2
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PUSH
78028: LD_INT 30
78030: PUSH
78031: LD_INT 3
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: LIST
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PPUSH
78047: CALL_OW 72
78051: ST_TO_ADDR
78052: GO 78136
78054: LD_INT 4
78056: DOUBLE
78057: EQUAL
78058: IFTRUE 78062
78060: GO 78135
78062: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
78063: LD_ADDR_VAR 0 12
78067: PUSH
78068: LD_VAR 0 18
78072: PPUSH
78073: LD_INT 22
78075: PUSH
78076: LD_VAR 0 16
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 2
78087: PUSH
78088: LD_INT 30
78090: PUSH
78091: LD_INT 6
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: LD_INT 30
78100: PUSH
78101: LD_INT 7
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 30
78110: PUSH
78111: LD_INT 8
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PPUSH
78128: CALL_OW 72
78132: ST_TO_ADDR
78133: GO 78136
78135: POP
// if i = 1 then
78136: LD_VAR 0 8
78140: PUSH
78141: LD_INT 1
78143: EQUAL
78144: IFFALSE 78255
// begin tmp := [ ] ;
78146: LD_ADDR_VAR 0 19
78150: PUSH
78151: EMPTY
78152: ST_TO_ADDR
// for j in f do
78153: LD_ADDR_VAR 0 9
78157: PUSH
78158: LD_VAR 0 12
78162: PUSH
78163: FOR_IN
78164: IFFALSE 78237
// if GetBType ( j ) = b_bunker then
78166: LD_VAR 0 9
78170: PPUSH
78171: CALL_OW 266
78175: PUSH
78176: LD_INT 32
78178: EQUAL
78179: IFFALSE 78206
// tmp := Insert ( tmp , 1 , j ) else
78181: LD_ADDR_VAR 0 19
78185: PUSH
78186: LD_VAR 0 19
78190: PPUSH
78191: LD_INT 1
78193: PPUSH
78194: LD_VAR 0 9
78198: PPUSH
78199: CALL_OW 2
78203: ST_TO_ADDR
78204: GO 78235
// tmp := Insert ( tmp , tmp + 1 , j ) ;
78206: LD_ADDR_VAR 0 19
78210: PUSH
78211: LD_VAR 0 19
78215: PPUSH
78216: LD_VAR 0 19
78220: PUSH
78221: LD_INT 1
78223: PLUS
78224: PPUSH
78225: LD_VAR 0 9
78229: PPUSH
78230: CALL_OW 2
78234: ST_TO_ADDR
78235: GO 78163
78237: POP
78238: POP
// if tmp then
78239: LD_VAR 0 19
78243: IFFALSE 78255
// f := tmp ;
78245: LD_ADDR_VAR 0 12
78249: PUSH
78250: LD_VAR 0 19
78254: ST_TO_ADDR
// end ; x := personel [ i ] ;
78255: LD_ADDR_VAR 0 13
78259: PUSH
78260: LD_VAR 0 6
78264: PUSH
78265: LD_VAR 0 8
78269: ARRAY
78270: ST_TO_ADDR
// if x = - 1 then
78271: LD_VAR 0 13
78275: PUSH
78276: LD_INT 1
78278: NEG
78279: EQUAL
78280: IFFALSE 78489
// begin for j in f do
78282: LD_ADDR_VAR 0 9
78286: PUSH
78287: LD_VAR 0 12
78291: PUSH
78292: FOR_IN
78293: IFFALSE 78485
// repeat InitHc ;
78295: CALL_OW 19
// if GetBType ( j ) = b_barracks then
78299: LD_VAR 0 9
78303: PPUSH
78304: CALL_OW 266
78308: PUSH
78309: LD_INT 5
78311: EQUAL
78312: IFFALSE 78382
// begin if UnitsInside ( j ) < 3 then
78314: LD_VAR 0 9
78318: PPUSH
78319: CALL_OW 313
78323: PUSH
78324: LD_INT 3
78326: LESS
78327: IFFALSE 78363
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
78329: LD_INT 0
78331: PPUSH
78332: LD_INT 5
78334: PUSH
78335: LD_INT 8
78337: PUSH
78338: LD_INT 9
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: LIST
78345: PUSH
78346: LD_VAR 0 17
78350: ARRAY
78351: PPUSH
78352: LD_VAR 0 4
78356: PPUSH
78357: CALL_OW 380
78361: GO 78380
// PrepareHuman ( false , i , skill ) ;
78363: LD_INT 0
78365: PPUSH
78366: LD_VAR 0 8
78370: PPUSH
78371: LD_VAR 0 4
78375: PPUSH
78376: CALL_OW 380
// end else
78380: GO 78399
// PrepareHuman ( false , i , skill ) ;
78382: LD_INT 0
78384: PPUSH
78385: LD_VAR 0 8
78389: PPUSH
78390: LD_VAR 0 4
78394: PPUSH
78395: CALL_OW 380
// un := CreateHuman ;
78399: LD_ADDR_VAR 0 14
78403: PUSH
78404: CALL_OW 44
78408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
78409: LD_ADDR_VAR 0 7
78413: PUSH
78414: LD_VAR 0 7
78418: PPUSH
78419: LD_INT 1
78421: PPUSH
78422: LD_VAR 0 14
78426: PPUSH
78427: CALL_OW 2
78431: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
78432: LD_VAR 0 14
78436: PPUSH
78437: LD_VAR 0 9
78441: PPUSH
78442: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
78446: LD_VAR 0 9
78450: PPUSH
78451: CALL_OW 313
78455: PUSH
78456: LD_INT 6
78458: EQUAL
78459: PUSH
78460: LD_VAR 0 9
78464: PPUSH
78465: CALL_OW 266
78469: PUSH
78470: LD_INT 32
78472: PUSH
78473: LD_INT 31
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: IN
78480: OR
78481: IFFALSE 78295
78483: GO 78292
78485: POP
78486: POP
// end else
78487: GO 78869
// for j = 1 to x do
78489: LD_ADDR_VAR 0 9
78493: PUSH
78494: DOUBLE
78495: LD_INT 1
78497: DEC
78498: ST_TO_ADDR
78499: LD_VAR 0 13
78503: PUSH
78504: FOR_TO
78505: IFFALSE 78867
// begin InitHc ;
78507: CALL_OW 19
// if not f then
78511: LD_VAR 0 12
78515: NOT
78516: IFFALSE 78605
// begin PrepareHuman ( false , i , skill ) ;
78518: LD_INT 0
78520: PPUSH
78521: LD_VAR 0 8
78525: PPUSH
78526: LD_VAR 0 4
78530: PPUSH
78531: CALL_OW 380
// un := CreateHuman ;
78535: LD_ADDR_VAR 0 14
78539: PUSH
78540: CALL_OW 44
78544: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
78545: LD_ADDR_VAR 0 7
78549: PUSH
78550: LD_VAR 0 7
78554: PPUSH
78555: LD_INT 1
78557: PPUSH
78558: LD_VAR 0 14
78562: PPUSH
78563: CALL_OW 2
78567: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
78568: LD_VAR 0 14
78572: PPUSH
78573: LD_VAR 0 1
78577: PPUSH
78578: CALL_OW 250
78582: PPUSH
78583: LD_VAR 0 1
78587: PPUSH
78588: CALL_OW 251
78592: PPUSH
78593: LD_INT 10
78595: PPUSH
78596: LD_INT 0
78598: PPUSH
78599: CALL_OW 50
// continue ;
78603: GO 78504
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
78605: LD_VAR 0 12
78609: PUSH
78610: LD_INT 1
78612: ARRAY
78613: PPUSH
78614: CALL_OW 313
78618: PUSH
78619: LD_VAR 0 12
78623: PUSH
78624: LD_INT 1
78626: ARRAY
78627: PPUSH
78628: CALL_OW 266
78632: PUSH
78633: LD_INT 32
78635: PUSH
78636: LD_INT 31
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: IN
78643: AND
78644: PUSH
78645: LD_VAR 0 12
78649: PUSH
78650: LD_INT 1
78652: ARRAY
78653: PPUSH
78654: CALL_OW 313
78658: PUSH
78659: LD_INT 6
78661: EQUAL
78662: OR
78663: IFFALSE 78683
// f := Delete ( f , 1 ) ;
78665: LD_ADDR_VAR 0 12
78669: PUSH
78670: LD_VAR 0 12
78674: PPUSH
78675: LD_INT 1
78677: PPUSH
78678: CALL_OW 3
78682: ST_TO_ADDR
// if not f then
78683: LD_VAR 0 12
78687: NOT
78688: IFFALSE 78706
// begin x := x + 2 ;
78690: LD_ADDR_VAR 0 13
78694: PUSH
78695: LD_VAR 0 13
78699: PUSH
78700: LD_INT 2
78702: PLUS
78703: ST_TO_ADDR
// continue ;
78704: GO 78504
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
78706: LD_VAR 0 12
78710: PUSH
78711: LD_INT 1
78713: ARRAY
78714: PPUSH
78715: CALL_OW 266
78719: PUSH
78720: LD_INT 5
78722: EQUAL
78723: IFFALSE 78797
// begin if UnitsInside ( f [ 1 ] ) < 3 then
78725: LD_VAR 0 12
78729: PUSH
78730: LD_INT 1
78732: ARRAY
78733: PPUSH
78734: CALL_OW 313
78738: PUSH
78739: LD_INT 3
78741: LESS
78742: IFFALSE 78778
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
78744: LD_INT 0
78746: PPUSH
78747: LD_INT 5
78749: PUSH
78750: LD_INT 8
78752: PUSH
78753: LD_INT 9
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: LIST
78760: PUSH
78761: LD_VAR 0 17
78765: ARRAY
78766: PPUSH
78767: LD_VAR 0 4
78771: PPUSH
78772: CALL_OW 380
78776: GO 78795
// PrepareHuman ( false , i , skill ) ;
78778: LD_INT 0
78780: PPUSH
78781: LD_VAR 0 8
78785: PPUSH
78786: LD_VAR 0 4
78790: PPUSH
78791: CALL_OW 380
// end else
78795: GO 78814
// PrepareHuman ( false , i , skill ) ;
78797: LD_INT 0
78799: PPUSH
78800: LD_VAR 0 8
78804: PPUSH
78805: LD_VAR 0 4
78809: PPUSH
78810: CALL_OW 380
// un := CreateHuman ;
78814: LD_ADDR_VAR 0 14
78818: PUSH
78819: CALL_OW 44
78823: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
78824: LD_ADDR_VAR 0 7
78828: PUSH
78829: LD_VAR 0 7
78833: PPUSH
78834: LD_INT 1
78836: PPUSH
78837: LD_VAR 0 14
78841: PPUSH
78842: CALL_OW 2
78846: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
78847: LD_VAR 0 14
78851: PPUSH
78852: LD_VAR 0 12
78856: PUSH
78857: LD_INT 1
78859: ARRAY
78860: PPUSH
78861: CALL_OW 52
// end ;
78865: GO 78504
78867: POP
78868: POP
// end ;
78869: GO 77806
78871: POP
78872: POP
// result := result ^ buildings ;
78873: LD_ADDR_VAR 0 7
78877: PUSH
78878: LD_VAR 0 7
78882: PUSH
78883: LD_VAR 0 18
78887: ADD
78888: ST_TO_ADDR
// end else
78889: GO 79032
// begin for i = 1 to personel do
78891: LD_ADDR_VAR 0 8
78895: PUSH
78896: DOUBLE
78897: LD_INT 1
78899: DEC
78900: ST_TO_ADDR
78901: LD_VAR 0 6
78905: PUSH
78906: FOR_TO
78907: IFFALSE 79030
// begin if i > 4 then
78909: LD_VAR 0 8
78913: PUSH
78914: LD_INT 4
78916: GREATER
78917: IFFALSE 78921
// break ;
78919: GO 79030
// x := personel [ i ] ;
78921: LD_ADDR_VAR 0 13
78925: PUSH
78926: LD_VAR 0 6
78930: PUSH
78931: LD_VAR 0 8
78935: ARRAY
78936: ST_TO_ADDR
// if x = - 1 then
78937: LD_VAR 0 13
78941: PUSH
78942: LD_INT 1
78944: NEG
78945: EQUAL
78946: IFFALSE 78950
// continue ;
78948: GO 78906
// PrepareHuman ( false , i , skill ) ;
78950: LD_INT 0
78952: PPUSH
78953: LD_VAR 0 8
78957: PPUSH
78958: LD_VAR 0 4
78962: PPUSH
78963: CALL_OW 380
// un := CreateHuman ;
78967: LD_ADDR_VAR 0 14
78971: PUSH
78972: CALL_OW 44
78976: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
78977: LD_VAR 0 14
78981: PPUSH
78982: LD_VAR 0 1
78986: PPUSH
78987: CALL_OW 250
78991: PPUSH
78992: LD_VAR 0 1
78996: PPUSH
78997: CALL_OW 251
79001: PPUSH
79002: LD_INT 10
79004: PPUSH
79005: LD_INT 0
79007: PPUSH
79008: CALL_OW 50
// result := result ^ un ;
79012: LD_ADDR_VAR 0 7
79016: PUSH
79017: LD_VAR 0 7
79021: PUSH
79022: LD_VAR 0 14
79026: ADD
79027: ST_TO_ADDR
// end ;
79028: GO 78906
79030: POP
79031: POP
// end ; end ;
79032: LD_VAR 0 7
79036: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
79037: LD_INT 0
79039: PPUSH
79040: PPUSH
79041: PPUSH
79042: PPUSH
79043: PPUSH
79044: PPUSH
79045: PPUSH
79046: PPUSH
79047: PPUSH
79048: PPUSH
79049: PPUSH
79050: PPUSH
79051: PPUSH
79052: PPUSH
79053: PPUSH
79054: PPUSH
// result := false ;
79055: LD_ADDR_VAR 0 3
79059: PUSH
79060: LD_INT 0
79062: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
79063: LD_VAR 0 1
79067: NOT
79068: PUSH
79069: LD_VAR 0 1
79073: PPUSH
79074: CALL_OW 266
79078: PUSH
79079: LD_INT 32
79081: PUSH
79082: LD_INT 33
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: IN
79089: NOT
79090: OR
79091: IFFALSE 79095
// exit ;
79093: GO 80204
// nat := GetNation ( tower ) ;
79095: LD_ADDR_VAR 0 12
79099: PUSH
79100: LD_VAR 0 1
79104: PPUSH
79105: CALL_OW 248
79109: ST_TO_ADDR
// side := GetSide ( tower ) ;
79110: LD_ADDR_VAR 0 16
79114: PUSH
79115: LD_VAR 0 1
79119: PPUSH
79120: CALL_OW 255
79124: ST_TO_ADDR
// x := GetX ( tower ) ;
79125: LD_ADDR_VAR 0 10
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 250
79139: ST_TO_ADDR
// y := GetY ( tower ) ;
79140: LD_ADDR_VAR 0 11
79144: PUSH
79145: LD_VAR 0 1
79149: PPUSH
79150: CALL_OW 251
79154: ST_TO_ADDR
// if not x or not y then
79155: LD_VAR 0 10
79159: NOT
79160: PUSH
79161: LD_VAR 0 11
79165: NOT
79166: OR
79167: IFFALSE 79171
// exit ;
79169: GO 80204
// weapon := 0 ;
79171: LD_ADDR_VAR 0 18
79175: PUSH
79176: LD_INT 0
79178: ST_TO_ADDR
// fac_list := [ ] ;
79179: LD_ADDR_VAR 0 17
79183: PUSH
79184: EMPTY
79185: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
79186: LD_ADDR_VAR 0 6
79190: PUSH
79191: LD_VAR 0 1
79195: PPUSH
79196: CALL_OW 274
79200: PPUSH
79201: LD_VAR 0 2
79205: PPUSH
79206: LD_INT 0
79208: PPUSH
79209: CALL 76775 0 3
79213: PPUSH
79214: LD_INT 30
79216: PUSH
79217: LD_INT 3
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PPUSH
79224: CALL_OW 72
79228: ST_TO_ADDR
// if not factories then
79229: LD_VAR 0 6
79233: NOT
79234: IFFALSE 79238
// exit ;
79236: GO 80204
// for i in factories do
79238: LD_ADDR_VAR 0 8
79242: PUSH
79243: LD_VAR 0 6
79247: PUSH
79248: FOR_IN
79249: IFFALSE 79274
// fac_list := fac_list union AvailableWeaponList ( i ) ;
79251: LD_ADDR_VAR 0 17
79255: PUSH
79256: LD_VAR 0 17
79260: PUSH
79261: LD_VAR 0 8
79265: PPUSH
79266: CALL_OW 478
79270: UNION
79271: ST_TO_ADDR
79272: GO 79248
79274: POP
79275: POP
// if not fac_list then
79276: LD_VAR 0 17
79280: NOT
79281: IFFALSE 79285
// exit ;
79283: GO 80204
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
79285: LD_ADDR_VAR 0 5
79289: PUSH
79290: LD_INT 4
79292: PUSH
79293: LD_INT 5
79295: PUSH
79296: LD_INT 9
79298: PUSH
79299: LD_INT 10
79301: PUSH
79302: LD_INT 6
79304: PUSH
79305: LD_INT 7
79307: PUSH
79308: LD_INT 11
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: PUSH
79320: LD_INT 27
79322: PUSH
79323: LD_INT 28
79325: PUSH
79326: LD_INT 26
79328: PUSH
79329: LD_INT 30
79331: PUSH
79332: EMPTY
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: PUSH
79338: LD_INT 43
79340: PUSH
79341: LD_INT 44
79343: PUSH
79344: LD_INT 46
79346: PUSH
79347: LD_INT 45
79349: PUSH
79350: LD_INT 47
79352: PUSH
79353: LD_INT 49
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: LIST
79360: LIST
79361: LIST
79362: LIST
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: LIST
79368: PUSH
79369: LD_VAR 0 12
79373: ARRAY
79374: ST_TO_ADDR
// list := list isect fac_list ;
79375: LD_ADDR_VAR 0 5
79379: PUSH
79380: LD_VAR 0 5
79384: PUSH
79385: LD_VAR 0 17
79389: ISECT
79390: ST_TO_ADDR
// if not list then
79391: LD_VAR 0 5
79395: NOT
79396: IFFALSE 79400
// exit ;
79398: GO 80204
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
79400: LD_VAR 0 12
79404: PUSH
79405: LD_INT 3
79407: EQUAL
79408: PUSH
79409: LD_INT 49
79411: PUSH
79412: LD_VAR 0 5
79416: IN
79417: AND
79418: PUSH
79419: LD_INT 31
79421: PPUSH
79422: LD_VAR 0 16
79426: PPUSH
79427: CALL_OW 321
79431: PUSH
79432: LD_INT 2
79434: EQUAL
79435: AND
79436: IFFALSE 79496
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
79438: LD_INT 22
79440: PUSH
79441: LD_VAR 0 16
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 35
79452: PUSH
79453: LD_INT 49
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 91
79462: PUSH
79463: LD_VAR 0 1
79467: PUSH
79468: LD_INT 10
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: LIST
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: PPUSH
79481: CALL_OW 69
79485: NOT
79486: IFFALSE 79496
// weapon := ru_time_lapser ;
79488: LD_ADDR_VAR 0 18
79492: PUSH
79493: LD_INT 49
79495: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
79496: LD_VAR 0 12
79500: PUSH
79501: LD_INT 1
79503: PUSH
79504: LD_INT 2
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: IN
79511: PUSH
79512: LD_INT 11
79514: PUSH
79515: LD_VAR 0 5
79519: IN
79520: PUSH
79521: LD_INT 30
79523: PUSH
79524: LD_VAR 0 5
79528: IN
79529: OR
79530: AND
79531: PUSH
79532: LD_INT 6
79534: PPUSH
79535: LD_VAR 0 16
79539: PPUSH
79540: CALL_OW 321
79544: PUSH
79545: LD_INT 2
79547: EQUAL
79548: AND
79549: IFFALSE 79714
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
79551: LD_INT 22
79553: PUSH
79554: LD_VAR 0 16
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 2
79565: PUSH
79566: LD_INT 35
79568: PUSH
79569: LD_INT 11
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 35
79578: PUSH
79579: LD_INT 30
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: LIST
79590: PUSH
79591: LD_INT 91
79593: PUSH
79594: LD_VAR 0 1
79598: PUSH
79599: LD_INT 18
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: LIST
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: LIST
79611: PPUSH
79612: CALL_OW 69
79616: NOT
79617: PUSH
79618: LD_INT 22
79620: PUSH
79621: LD_VAR 0 16
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 2
79632: PUSH
79633: LD_INT 30
79635: PUSH
79636: LD_INT 32
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: PUSH
79643: LD_INT 30
79645: PUSH
79646: LD_INT 33
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 91
79660: PUSH
79661: LD_VAR 0 1
79665: PUSH
79666: LD_INT 12
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: LIST
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: LIST
79678: PUSH
79679: EMPTY
79680: LIST
79681: PPUSH
79682: CALL_OW 69
79686: PUSH
79687: LD_INT 2
79689: GREATER
79690: AND
79691: IFFALSE 79714
// weapon := [ us_radar , ar_radar ] [ nat ] ;
79693: LD_ADDR_VAR 0 18
79697: PUSH
79698: LD_INT 11
79700: PUSH
79701: LD_INT 30
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: PUSH
79708: LD_VAR 0 12
79712: ARRAY
79713: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
79714: LD_VAR 0 18
79718: NOT
79719: PUSH
79720: LD_INT 40
79722: PPUSH
79723: LD_VAR 0 16
79727: PPUSH
79728: CALL_OW 321
79732: PUSH
79733: LD_INT 2
79735: EQUAL
79736: AND
79737: PUSH
79738: LD_INT 7
79740: PUSH
79741: LD_VAR 0 5
79745: IN
79746: PUSH
79747: LD_INT 28
79749: PUSH
79750: LD_VAR 0 5
79754: IN
79755: OR
79756: PUSH
79757: LD_INT 45
79759: PUSH
79760: LD_VAR 0 5
79764: IN
79765: OR
79766: AND
79767: IFFALSE 80021
// begin hex := GetHexInfo ( x , y ) ;
79769: LD_ADDR_VAR 0 4
79773: PUSH
79774: LD_VAR 0 10
79778: PPUSH
79779: LD_VAR 0 11
79783: PPUSH
79784: CALL_OW 546
79788: ST_TO_ADDR
// if hex [ 1 ] then
79789: LD_VAR 0 4
79793: PUSH
79794: LD_INT 1
79796: ARRAY
79797: IFFALSE 79801
// exit ;
79799: GO 80204
// height := hex [ 2 ] ;
79801: LD_ADDR_VAR 0 15
79805: PUSH
79806: LD_VAR 0 4
79810: PUSH
79811: LD_INT 2
79813: ARRAY
79814: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
79815: LD_ADDR_VAR 0 14
79819: PUSH
79820: LD_INT 0
79822: PUSH
79823: LD_INT 2
79825: PUSH
79826: LD_INT 3
79828: PUSH
79829: LD_INT 5
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: ST_TO_ADDR
// for i in tmp do
79838: LD_ADDR_VAR 0 8
79842: PUSH
79843: LD_VAR 0 14
79847: PUSH
79848: FOR_IN
79849: IFFALSE 80019
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
79851: LD_ADDR_VAR 0 9
79855: PUSH
79856: LD_VAR 0 10
79860: PPUSH
79861: LD_VAR 0 8
79865: PPUSH
79866: LD_INT 5
79868: PPUSH
79869: CALL_OW 272
79873: PUSH
79874: LD_VAR 0 11
79878: PPUSH
79879: LD_VAR 0 8
79883: PPUSH
79884: LD_INT 5
79886: PPUSH
79887: CALL_OW 273
79891: PUSH
79892: EMPTY
79893: LIST
79894: LIST
79895: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
79896: LD_VAR 0 9
79900: PUSH
79901: LD_INT 1
79903: ARRAY
79904: PPUSH
79905: LD_VAR 0 9
79909: PUSH
79910: LD_INT 2
79912: ARRAY
79913: PPUSH
79914: CALL_OW 488
79918: IFFALSE 80017
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
79920: LD_ADDR_VAR 0 4
79924: PUSH
79925: LD_VAR 0 9
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PPUSH
79934: LD_VAR 0 9
79938: PUSH
79939: LD_INT 2
79941: ARRAY
79942: PPUSH
79943: CALL_OW 546
79947: ST_TO_ADDR
// if hex [ 1 ] then
79948: LD_VAR 0 4
79952: PUSH
79953: LD_INT 1
79955: ARRAY
79956: IFFALSE 79960
// continue ;
79958: GO 79848
// h := hex [ 2 ] ;
79960: LD_ADDR_VAR 0 13
79964: PUSH
79965: LD_VAR 0 4
79969: PUSH
79970: LD_INT 2
79972: ARRAY
79973: ST_TO_ADDR
// if h + 7 < height then
79974: LD_VAR 0 13
79978: PUSH
79979: LD_INT 7
79981: PLUS
79982: PUSH
79983: LD_VAR 0 15
79987: LESS
79988: IFFALSE 80017
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
79990: LD_ADDR_VAR 0 18
79994: PUSH
79995: LD_INT 7
79997: PUSH
79998: LD_INT 28
80000: PUSH
80001: LD_INT 45
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: LIST
80008: PUSH
80009: LD_VAR 0 12
80013: ARRAY
80014: ST_TO_ADDR
// break ;
80015: GO 80019
// end ; end ; end ;
80017: GO 79848
80019: POP
80020: POP
// end ; if not weapon then
80021: LD_VAR 0 18
80025: NOT
80026: IFFALSE 80086
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
80028: LD_ADDR_VAR 0 5
80032: PUSH
80033: LD_VAR 0 5
80037: PUSH
80038: LD_INT 11
80040: PUSH
80041: LD_INT 30
80043: PUSH
80044: LD_INT 49
80046: PUSH
80047: EMPTY
80048: LIST
80049: LIST
80050: LIST
80051: DIFF
80052: ST_TO_ADDR
// if not list then
80053: LD_VAR 0 5
80057: NOT
80058: IFFALSE 80062
// exit ;
80060: GO 80204
// weapon := list [ rand ( 1 , list ) ] ;
80062: LD_ADDR_VAR 0 18
80066: PUSH
80067: LD_VAR 0 5
80071: PUSH
80072: LD_INT 1
80074: PPUSH
80075: LD_VAR 0 5
80079: PPUSH
80080: CALL_OW 12
80084: ARRAY
80085: ST_TO_ADDR
// end ; if weapon then
80086: LD_VAR 0 18
80090: IFFALSE 80204
// begin tmp := CostOfWeapon ( weapon ) ;
80092: LD_ADDR_VAR 0 14
80096: PUSH
80097: LD_VAR 0 18
80101: PPUSH
80102: CALL_OW 451
80106: ST_TO_ADDR
// j := GetBase ( tower ) ;
80107: LD_ADDR_VAR 0 9
80111: PUSH
80112: LD_VAR 0 1
80116: PPUSH
80117: CALL_OW 274
80121: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
80122: LD_VAR 0 9
80126: PPUSH
80127: LD_INT 1
80129: PPUSH
80130: CALL_OW 275
80134: PUSH
80135: LD_VAR 0 14
80139: PUSH
80140: LD_INT 1
80142: ARRAY
80143: GREATEREQUAL
80144: PUSH
80145: LD_VAR 0 9
80149: PPUSH
80150: LD_INT 2
80152: PPUSH
80153: CALL_OW 275
80157: PUSH
80158: LD_VAR 0 14
80162: PUSH
80163: LD_INT 2
80165: ARRAY
80166: GREATEREQUAL
80167: AND
80168: PUSH
80169: LD_VAR 0 9
80173: PPUSH
80174: LD_INT 3
80176: PPUSH
80177: CALL_OW 275
80181: PUSH
80182: LD_VAR 0 14
80186: PUSH
80187: LD_INT 3
80189: ARRAY
80190: GREATEREQUAL
80191: AND
80192: IFFALSE 80204
// result := weapon ;
80194: LD_ADDR_VAR 0 3
80198: PUSH
80199: LD_VAR 0 18
80203: ST_TO_ADDR
// end ; end ;
80204: LD_VAR 0 3
80208: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
80209: LD_INT 0
80211: PPUSH
80212: PPUSH
// result := true ;
80213: LD_ADDR_VAR 0 3
80217: PUSH
80218: LD_INT 1
80220: ST_TO_ADDR
// if array1 = array2 then
80221: LD_VAR 0 1
80225: PUSH
80226: LD_VAR 0 2
80230: EQUAL
80231: IFFALSE 80291
// begin for i = 1 to array1 do
80233: LD_ADDR_VAR 0 4
80237: PUSH
80238: DOUBLE
80239: LD_INT 1
80241: DEC
80242: ST_TO_ADDR
80243: LD_VAR 0 1
80247: PUSH
80248: FOR_TO
80249: IFFALSE 80287
// if array1 [ i ] <> array2 [ i ] then
80251: LD_VAR 0 1
80255: PUSH
80256: LD_VAR 0 4
80260: ARRAY
80261: PUSH
80262: LD_VAR 0 2
80266: PUSH
80267: LD_VAR 0 4
80271: ARRAY
80272: NONEQUAL
80273: IFFALSE 80285
// begin result := false ;
80275: LD_ADDR_VAR 0 3
80279: PUSH
80280: LD_INT 0
80282: ST_TO_ADDR
// break ;
80283: GO 80287
// end ;
80285: GO 80248
80287: POP
80288: POP
// end else
80289: GO 80299
// result := false ;
80291: LD_ADDR_VAR 0 3
80295: PUSH
80296: LD_INT 0
80298: ST_TO_ADDR
// end ;
80299: LD_VAR 0 3
80303: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
80304: LD_INT 0
80306: PPUSH
80307: PPUSH
// if not array1 or not array2 then
80308: LD_VAR 0 1
80312: NOT
80313: PUSH
80314: LD_VAR 0 2
80318: NOT
80319: OR
80320: IFFALSE 80324
// exit ;
80322: GO 80388
// result := true ;
80324: LD_ADDR_VAR 0 3
80328: PUSH
80329: LD_INT 1
80331: ST_TO_ADDR
// for i = 1 to array1 do
80332: LD_ADDR_VAR 0 4
80336: PUSH
80337: DOUBLE
80338: LD_INT 1
80340: DEC
80341: ST_TO_ADDR
80342: LD_VAR 0 1
80346: PUSH
80347: FOR_TO
80348: IFFALSE 80386
// if array1 [ i ] <> array2 [ i ] then
80350: LD_VAR 0 1
80354: PUSH
80355: LD_VAR 0 4
80359: ARRAY
80360: PUSH
80361: LD_VAR 0 2
80365: PUSH
80366: LD_VAR 0 4
80370: ARRAY
80371: NONEQUAL
80372: IFFALSE 80384
// begin result := false ;
80374: LD_ADDR_VAR 0 3
80378: PUSH
80379: LD_INT 0
80381: ST_TO_ADDR
// break ;
80382: GO 80386
// end ;
80384: GO 80347
80386: POP
80387: POP
// end ;
80388: LD_VAR 0 3
80392: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
80393: LD_INT 0
80395: PPUSH
80396: PPUSH
80397: PPUSH
// pom := GetBase ( fac ) ;
80398: LD_ADDR_VAR 0 5
80402: PUSH
80403: LD_VAR 0 1
80407: PPUSH
80408: CALL_OW 274
80412: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
80413: LD_ADDR_VAR 0 4
80417: PUSH
80418: LD_VAR 0 2
80422: PUSH
80423: LD_INT 1
80425: ARRAY
80426: PPUSH
80427: LD_VAR 0 2
80431: PUSH
80432: LD_INT 2
80434: ARRAY
80435: PPUSH
80436: LD_VAR 0 2
80440: PUSH
80441: LD_INT 3
80443: ARRAY
80444: PPUSH
80445: LD_VAR 0 2
80449: PUSH
80450: LD_INT 4
80452: ARRAY
80453: PPUSH
80454: CALL_OW 449
80458: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
80459: LD_ADDR_VAR 0 3
80463: PUSH
80464: LD_VAR 0 5
80468: PPUSH
80469: LD_INT 1
80471: PPUSH
80472: CALL_OW 275
80476: PUSH
80477: LD_VAR 0 4
80481: PUSH
80482: LD_INT 1
80484: ARRAY
80485: GREATEREQUAL
80486: PUSH
80487: LD_VAR 0 5
80491: PPUSH
80492: LD_INT 2
80494: PPUSH
80495: CALL_OW 275
80499: PUSH
80500: LD_VAR 0 4
80504: PUSH
80505: LD_INT 2
80507: ARRAY
80508: GREATEREQUAL
80509: AND
80510: PUSH
80511: LD_VAR 0 5
80515: PPUSH
80516: LD_INT 3
80518: PPUSH
80519: CALL_OW 275
80523: PUSH
80524: LD_VAR 0 4
80528: PUSH
80529: LD_INT 3
80531: ARRAY
80532: GREATEREQUAL
80533: AND
80534: ST_TO_ADDR
// end ;
80535: LD_VAR 0 3
80539: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
80540: LD_INT 0
80542: PPUSH
80543: PPUSH
80544: PPUSH
80545: PPUSH
// pom := GetBase ( building ) ;
80546: LD_ADDR_VAR 0 3
80550: PUSH
80551: LD_VAR 0 1
80555: PPUSH
80556: CALL_OW 274
80560: ST_TO_ADDR
// if not pom then
80561: LD_VAR 0 3
80565: NOT
80566: IFFALSE 80570
// exit ;
80568: GO 80740
// btype := GetBType ( building ) ;
80570: LD_ADDR_VAR 0 5
80574: PUSH
80575: LD_VAR 0 1
80579: PPUSH
80580: CALL_OW 266
80584: ST_TO_ADDR
// if btype = b_armoury then
80585: LD_VAR 0 5
80589: PUSH
80590: LD_INT 4
80592: EQUAL
80593: IFFALSE 80603
// btype := b_barracks ;
80595: LD_ADDR_VAR 0 5
80599: PUSH
80600: LD_INT 5
80602: ST_TO_ADDR
// if btype = b_depot then
80603: LD_VAR 0 5
80607: PUSH
80608: LD_INT 0
80610: EQUAL
80611: IFFALSE 80621
// btype := b_warehouse ;
80613: LD_ADDR_VAR 0 5
80617: PUSH
80618: LD_INT 1
80620: ST_TO_ADDR
// if btype = b_workshop then
80621: LD_VAR 0 5
80625: PUSH
80626: LD_INT 2
80628: EQUAL
80629: IFFALSE 80639
// btype := b_factory ;
80631: LD_ADDR_VAR 0 5
80635: PUSH
80636: LD_INT 3
80638: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
80639: LD_ADDR_VAR 0 4
80643: PUSH
80644: LD_VAR 0 5
80648: PPUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: CALL_OW 248
80658: PPUSH
80659: CALL_OW 450
80663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
80664: LD_ADDR_VAR 0 2
80668: PUSH
80669: LD_VAR 0 3
80673: PPUSH
80674: LD_INT 1
80676: PPUSH
80677: CALL_OW 275
80681: PUSH
80682: LD_VAR 0 4
80686: PUSH
80687: LD_INT 1
80689: ARRAY
80690: GREATEREQUAL
80691: PUSH
80692: LD_VAR 0 3
80696: PPUSH
80697: LD_INT 2
80699: PPUSH
80700: CALL_OW 275
80704: PUSH
80705: LD_VAR 0 4
80709: PUSH
80710: LD_INT 2
80712: ARRAY
80713: GREATEREQUAL
80714: AND
80715: PUSH
80716: LD_VAR 0 3
80720: PPUSH
80721: LD_INT 3
80723: PPUSH
80724: CALL_OW 275
80728: PUSH
80729: LD_VAR 0 4
80733: PUSH
80734: LD_INT 3
80736: ARRAY
80737: GREATEREQUAL
80738: AND
80739: ST_TO_ADDR
// end ;
80740: LD_VAR 0 2
80744: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
80745: LD_INT 0
80747: PPUSH
80748: PPUSH
80749: PPUSH
// pom := GetBase ( building ) ;
80750: LD_ADDR_VAR 0 4
80754: PUSH
80755: LD_VAR 0 1
80759: PPUSH
80760: CALL_OW 274
80764: ST_TO_ADDR
// if not pom then
80765: LD_VAR 0 4
80769: NOT
80770: IFFALSE 80774
// exit ;
80772: GO 80875
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
80774: LD_ADDR_VAR 0 5
80778: PUSH
80779: LD_VAR 0 2
80783: PPUSH
80784: LD_VAR 0 1
80788: PPUSH
80789: CALL_OW 248
80793: PPUSH
80794: CALL_OW 450
80798: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
80799: LD_ADDR_VAR 0 3
80803: PUSH
80804: LD_VAR 0 4
80808: PPUSH
80809: LD_INT 1
80811: PPUSH
80812: CALL_OW 275
80816: PUSH
80817: LD_VAR 0 5
80821: PUSH
80822: LD_INT 1
80824: ARRAY
80825: GREATEREQUAL
80826: PUSH
80827: LD_VAR 0 4
80831: PPUSH
80832: LD_INT 2
80834: PPUSH
80835: CALL_OW 275
80839: PUSH
80840: LD_VAR 0 5
80844: PUSH
80845: LD_INT 2
80847: ARRAY
80848: GREATEREQUAL
80849: AND
80850: PUSH
80851: LD_VAR 0 4
80855: PPUSH
80856: LD_INT 3
80858: PPUSH
80859: CALL_OW 275
80863: PUSH
80864: LD_VAR 0 5
80868: PUSH
80869: LD_INT 3
80871: ARRAY
80872: GREATEREQUAL
80873: AND
80874: ST_TO_ADDR
// end ;
80875: LD_VAR 0 3
80879: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
80880: LD_INT 0
80882: PPUSH
80883: PPUSH
80884: PPUSH
80885: PPUSH
80886: PPUSH
80887: PPUSH
80888: PPUSH
80889: PPUSH
80890: PPUSH
80891: PPUSH
80892: PPUSH
// result := false ;
80893: LD_ADDR_VAR 0 8
80897: PUSH
80898: LD_INT 0
80900: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
80901: LD_VAR 0 5
80905: NOT
80906: PUSH
80907: LD_VAR 0 1
80911: NOT
80912: OR
80913: PUSH
80914: LD_VAR 0 2
80918: NOT
80919: OR
80920: PUSH
80921: LD_VAR 0 3
80925: NOT
80926: OR
80927: IFFALSE 80931
// exit ;
80929: GO 81745
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
80931: LD_ADDR_VAR 0 14
80935: PUSH
80936: LD_VAR 0 1
80940: PPUSH
80941: LD_VAR 0 2
80945: PPUSH
80946: LD_VAR 0 3
80950: PPUSH
80951: LD_VAR 0 4
80955: PPUSH
80956: LD_VAR 0 5
80960: PUSH
80961: LD_INT 1
80963: ARRAY
80964: PPUSH
80965: CALL_OW 248
80969: PPUSH
80970: LD_INT 0
80972: PPUSH
80973: CALL 82998 0 6
80977: ST_TO_ADDR
// if not hexes then
80978: LD_VAR 0 14
80982: NOT
80983: IFFALSE 80987
// exit ;
80985: GO 81745
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80987: LD_ADDR_VAR 0 17
80991: PUSH
80992: LD_VAR 0 5
80996: PPUSH
80997: LD_INT 22
80999: PUSH
81000: LD_VAR 0 13
81004: PPUSH
81005: CALL_OW 255
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 2
81016: PUSH
81017: LD_INT 30
81019: PUSH
81020: LD_INT 0
81022: PUSH
81023: EMPTY
81024: LIST
81025: LIST
81026: PUSH
81027: LD_INT 30
81029: PUSH
81030: LD_INT 1
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: LIST
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PPUSH
81046: CALL_OW 72
81050: ST_TO_ADDR
// for i = 1 to hexes do
81051: LD_ADDR_VAR 0 9
81055: PUSH
81056: DOUBLE
81057: LD_INT 1
81059: DEC
81060: ST_TO_ADDR
81061: LD_VAR 0 14
81065: PUSH
81066: FOR_TO
81067: IFFALSE 81743
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81069: LD_ADDR_VAR 0 13
81073: PUSH
81074: LD_VAR 0 14
81078: PUSH
81079: LD_VAR 0 9
81083: ARRAY
81084: PUSH
81085: LD_INT 1
81087: ARRAY
81088: PPUSH
81089: LD_VAR 0 14
81093: PUSH
81094: LD_VAR 0 9
81098: ARRAY
81099: PUSH
81100: LD_INT 2
81102: ARRAY
81103: PPUSH
81104: CALL_OW 428
81108: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
81109: LD_VAR 0 14
81113: PUSH
81114: LD_VAR 0 9
81118: ARRAY
81119: PUSH
81120: LD_INT 1
81122: ARRAY
81123: PPUSH
81124: LD_VAR 0 14
81128: PUSH
81129: LD_VAR 0 9
81133: ARRAY
81134: PUSH
81135: LD_INT 2
81137: ARRAY
81138: PPUSH
81139: CALL_OW 351
81143: PUSH
81144: LD_VAR 0 14
81148: PUSH
81149: LD_VAR 0 9
81153: ARRAY
81154: PUSH
81155: LD_INT 1
81157: ARRAY
81158: PPUSH
81159: LD_VAR 0 14
81163: PUSH
81164: LD_VAR 0 9
81168: ARRAY
81169: PUSH
81170: LD_INT 2
81172: ARRAY
81173: PPUSH
81174: CALL_OW 488
81178: NOT
81179: OR
81180: PUSH
81181: LD_VAR 0 13
81185: PPUSH
81186: CALL_OW 247
81190: PUSH
81191: LD_INT 3
81193: EQUAL
81194: OR
81195: IFFALSE 81201
// exit ;
81197: POP
81198: POP
81199: GO 81745
// if not tmp then
81201: LD_VAR 0 13
81205: NOT
81206: IFFALSE 81210
// continue ;
81208: GO 81066
// result := true ;
81210: LD_ADDR_VAR 0 8
81214: PUSH
81215: LD_INT 1
81217: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
81218: LD_VAR 0 6
81222: PUSH
81223: LD_VAR 0 13
81227: PPUSH
81228: CALL_OW 247
81232: PUSH
81233: LD_INT 2
81235: EQUAL
81236: AND
81237: PUSH
81238: LD_VAR 0 13
81242: PPUSH
81243: CALL_OW 263
81247: PUSH
81248: LD_INT 1
81250: EQUAL
81251: AND
81252: IFFALSE 81416
// begin if IsDrivenBy ( tmp ) then
81254: LD_VAR 0 13
81258: PPUSH
81259: CALL_OW 311
81263: IFFALSE 81267
// continue ;
81265: GO 81066
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
81267: LD_VAR 0 6
81271: PPUSH
81272: LD_INT 3
81274: PUSH
81275: LD_INT 60
81277: PUSH
81278: EMPTY
81279: LIST
81280: PUSH
81281: EMPTY
81282: LIST
81283: LIST
81284: PUSH
81285: LD_INT 3
81287: PUSH
81288: LD_INT 55
81290: PUSH
81291: EMPTY
81292: LIST
81293: PUSH
81294: EMPTY
81295: LIST
81296: LIST
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PPUSH
81302: CALL_OW 72
81306: IFFALSE 81414
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
81308: LD_ADDR_VAR 0 18
81312: PUSH
81313: LD_VAR 0 6
81317: PPUSH
81318: LD_INT 3
81320: PUSH
81321: LD_INT 60
81323: PUSH
81324: EMPTY
81325: LIST
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PUSH
81331: LD_INT 3
81333: PUSH
81334: LD_INT 55
81336: PUSH
81337: EMPTY
81338: LIST
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PPUSH
81348: CALL_OW 72
81352: PUSH
81353: LD_INT 1
81355: ARRAY
81356: ST_TO_ADDR
// if IsInUnit ( driver ) then
81357: LD_VAR 0 18
81361: PPUSH
81362: CALL_OW 310
81366: IFFALSE 81377
// ComExit ( driver ) ;
81368: LD_VAR 0 18
81372: PPUSH
81373: CALL 106777 0 1
// AddComEnterUnit ( driver , tmp ) ;
81377: LD_VAR 0 18
81381: PPUSH
81382: LD_VAR 0 13
81386: PPUSH
81387: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
81391: LD_VAR 0 18
81395: PPUSH
81396: LD_VAR 0 7
81400: PPUSH
81401: CALL_OW 173
// AddComExitVehicle ( driver ) ;
81405: LD_VAR 0 18
81409: PPUSH
81410: CALL_OW 181
// end ; continue ;
81414: GO 81066
// end ; if not cleaners or not tmp in cleaners then
81416: LD_VAR 0 6
81420: NOT
81421: PUSH
81422: LD_VAR 0 13
81426: PUSH
81427: LD_VAR 0 6
81431: IN
81432: NOT
81433: OR
81434: IFFALSE 81741
// begin if dep then
81436: LD_VAR 0 17
81440: IFFALSE 81576
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
81442: LD_ADDR_VAR 0 16
81446: PUSH
81447: LD_VAR 0 17
81451: PUSH
81452: LD_INT 1
81454: ARRAY
81455: PPUSH
81456: CALL_OW 250
81460: PPUSH
81461: LD_VAR 0 17
81465: PUSH
81466: LD_INT 1
81468: ARRAY
81469: PPUSH
81470: CALL_OW 254
81474: PPUSH
81475: LD_INT 5
81477: PPUSH
81478: CALL_OW 272
81482: PUSH
81483: LD_VAR 0 17
81487: PUSH
81488: LD_INT 1
81490: ARRAY
81491: PPUSH
81492: CALL_OW 251
81496: PPUSH
81497: LD_VAR 0 17
81501: PUSH
81502: LD_INT 1
81504: ARRAY
81505: PPUSH
81506: CALL_OW 254
81510: PPUSH
81511: LD_INT 5
81513: PPUSH
81514: CALL_OW 273
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
81523: LD_VAR 0 16
81527: PUSH
81528: LD_INT 1
81530: ARRAY
81531: PPUSH
81532: LD_VAR 0 16
81536: PUSH
81537: LD_INT 2
81539: ARRAY
81540: PPUSH
81541: CALL_OW 488
81545: IFFALSE 81576
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
81547: LD_VAR 0 13
81551: PPUSH
81552: LD_VAR 0 16
81556: PUSH
81557: LD_INT 1
81559: ARRAY
81560: PPUSH
81561: LD_VAR 0 16
81565: PUSH
81566: LD_INT 2
81568: ARRAY
81569: PPUSH
81570: CALL_OW 111
// continue ;
81574: GO 81066
// end ; end ; r := GetDir ( tmp ) ;
81576: LD_ADDR_VAR 0 15
81580: PUSH
81581: LD_VAR 0 13
81585: PPUSH
81586: CALL_OW 254
81590: ST_TO_ADDR
// if r = 5 then
81591: LD_VAR 0 15
81595: PUSH
81596: LD_INT 5
81598: EQUAL
81599: IFFALSE 81609
// r := 0 ;
81601: LD_ADDR_VAR 0 15
81605: PUSH
81606: LD_INT 0
81608: ST_TO_ADDR
// for j = r to 5 do
81609: LD_ADDR_VAR 0 10
81613: PUSH
81614: DOUBLE
81615: LD_VAR 0 15
81619: DEC
81620: ST_TO_ADDR
81621: LD_INT 5
81623: PUSH
81624: FOR_TO
81625: IFFALSE 81739
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
81627: LD_ADDR_VAR 0 11
81631: PUSH
81632: LD_VAR 0 13
81636: PPUSH
81637: CALL_OW 250
81641: PPUSH
81642: LD_VAR 0 10
81646: PPUSH
81647: LD_INT 2
81649: PPUSH
81650: CALL_OW 272
81654: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
81655: LD_ADDR_VAR 0 12
81659: PUSH
81660: LD_VAR 0 13
81664: PPUSH
81665: CALL_OW 251
81669: PPUSH
81670: LD_VAR 0 10
81674: PPUSH
81675: LD_INT 2
81677: PPUSH
81678: CALL_OW 273
81682: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
81683: LD_VAR 0 11
81687: PPUSH
81688: LD_VAR 0 12
81692: PPUSH
81693: CALL_OW 488
81697: PUSH
81698: LD_VAR 0 11
81702: PPUSH
81703: LD_VAR 0 12
81707: PPUSH
81708: CALL_OW 428
81712: NOT
81713: AND
81714: IFFALSE 81737
// begin ComMoveXY ( tmp , _x , _y ) ;
81716: LD_VAR 0 13
81720: PPUSH
81721: LD_VAR 0 11
81725: PPUSH
81726: LD_VAR 0 12
81730: PPUSH
81731: CALL_OW 111
// break ;
81735: GO 81739
// end ; end ;
81737: GO 81624
81739: POP
81740: POP
// end ; end ;
81741: GO 81066
81743: POP
81744: POP
// end ;
81745: LD_VAR 0 8
81749: RET
// export function BuildingTechInvented ( side , btype ) ; begin
81750: LD_INT 0
81752: PPUSH
// result := true ;
81753: LD_ADDR_VAR 0 3
81757: PUSH
81758: LD_INT 1
81760: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
81761: LD_VAR 0 2
81765: PUSH
81766: LD_INT 24
81768: DOUBLE
81769: EQUAL
81770: IFTRUE 81780
81772: LD_INT 33
81774: DOUBLE
81775: EQUAL
81776: IFTRUE 81780
81778: GO 81805
81780: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
81781: LD_ADDR_VAR 0 3
81785: PUSH
81786: LD_INT 32
81788: PPUSH
81789: LD_VAR 0 1
81793: PPUSH
81794: CALL_OW 321
81798: PUSH
81799: LD_INT 2
81801: EQUAL
81802: ST_TO_ADDR
81803: GO 82121
81805: LD_INT 20
81807: DOUBLE
81808: EQUAL
81809: IFTRUE 81813
81811: GO 81838
81813: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
81814: LD_ADDR_VAR 0 3
81818: PUSH
81819: LD_INT 6
81821: PPUSH
81822: LD_VAR 0 1
81826: PPUSH
81827: CALL_OW 321
81831: PUSH
81832: LD_INT 2
81834: EQUAL
81835: ST_TO_ADDR
81836: GO 82121
81838: LD_INT 22
81840: DOUBLE
81841: EQUAL
81842: IFTRUE 81852
81844: LD_INT 36
81846: DOUBLE
81847: EQUAL
81848: IFTRUE 81852
81850: GO 81877
81852: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
81853: LD_ADDR_VAR 0 3
81857: PUSH
81858: LD_INT 15
81860: PPUSH
81861: LD_VAR 0 1
81865: PPUSH
81866: CALL_OW 321
81870: PUSH
81871: LD_INT 2
81873: EQUAL
81874: ST_TO_ADDR
81875: GO 82121
81877: LD_INT 30
81879: DOUBLE
81880: EQUAL
81881: IFTRUE 81885
81883: GO 81910
81885: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
81886: LD_ADDR_VAR 0 3
81890: PUSH
81891: LD_INT 20
81893: PPUSH
81894: LD_VAR 0 1
81898: PPUSH
81899: CALL_OW 321
81903: PUSH
81904: LD_INT 2
81906: EQUAL
81907: ST_TO_ADDR
81908: GO 82121
81910: LD_INT 28
81912: DOUBLE
81913: EQUAL
81914: IFTRUE 81924
81916: LD_INT 21
81918: DOUBLE
81919: EQUAL
81920: IFTRUE 81924
81922: GO 81949
81924: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
81925: LD_ADDR_VAR 0 3
81929: PUSH
81930: LD_INT 21
81932: PPUSH
81933: LD_VAR 0 1
81937: PPUSH
81938: CALL_OW 321
81942: PUSH
81943: LD_INT 2
81945: EQUAL
81946: ST_TO_ADDR
81947: GO 82121
81949: LD_INT 16
81951: DOUBLE
81952: EQUAL
81953: IFTRUE 81957
81955: GO 81982
81957: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
81958: LD_ADDR_VAR 0 3
81962: PUSH
81963: LD_INT 84
81965: PPUSH
81966: LD_VAR 0 1
81970: PPUSH
81971: CALL_OW 321
81975: PUSH
81976: LD_INT 2
81978: EQUAL
81979: ST_TO_ADDR
81980: GO 82121
81982: LD_INT 19
81984: DOUBLE
81985: EQUAL
81986: IFTRUE 81996
81988: LD_INT 23
81990: DOUBLE
81991: EQUAL
81992: IFTRUE 81996
81994: GO 82021
81996: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
81997: LD_ADDR_VAR 0 3
82001: PUSH
82002: LD_INT 83
82004: PPUSH
82005: LD_VAR 0 1
82009: PPUSH
82010: CALL_OW 321
82014: PUSH
82015: LD_INT 2
82017: EQUAL
82018: ST_TO_ADDR
82019: GO 82121
82021: LD_INT 17
82023: DOUBLE
82024: EQUAL
82025: IFTRUE 82029
82027: GO 82054
82029: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
82030: LD_ADDR_VAR 0 3
82034: PUSH
82035: LD_INT 39
82037: PPUSH
82038: LD_VAR 0 1
82042: PPUSH
82043: CALL_OW 321
82047: PUSH
82048: LD_INT 2
82050: EQUAL
82051: ST_TO_ADDR
82052: GO 82121
82054: LD_INT 18
82056: DOUBLE
82057: EQUAL
82058: IFTRUE 82062
82060: GO 82087
82062: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
82063: LD_ADDR_VAR 0 3
82067: PUSH
82068: LD_INT 40
82070: PPUSH
82071: LD_VAR 0 1
82075: PPUSH
82076: CALL_OW 321
82080: PUSH
82081: LD_INT 2
82083: EQUAL
82084: ST_TO_ADDR
82085: GO 82121
82087: LD_INT 27
82089: DOUBLE
82090: EQUAL
82091: IFTRUE 82095
82093: GO 82120
82095: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
82096: LD_ADDR_VAR 0 3
82100: PUSH
82101: LD_INT 35
82103: PPUSH
82104: LD_VAR 0 1
82108: PPUSH
82109: CALL_OW 321
82113: PUSH
82114: LD_INT 2
82116: EQUAL
82117: ST_TO_ADDR
82118: GO 82121
82120: POP
// end ;
82121: LD_VAR 0 3
82125: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
82126: LD_INT 0
82128: PPUSH
82129: PPUSH
82130: PPUSH
82131: PPUSH
82132: PPUSH
82133: PPUSH
82134: PPUSH
82135: PPUSH
82136: PPUSH
82137: PPUSH
82138: PPUSH
// result := false ;
82139: LD_ADDR_VAR 0 6
82143: PUSH
82144: LD_INT 0
82146: ST_TO_ADDR
// if btype = b_depot then
82147: LD_VAR 0 2
82151: PUSH
82152: LD_INT 0
82154: EQUAL
82155: IFFALSE 82167
// begin result := true ;
82157: LD_ADDR_VAR 0 6
82161: PUSH
82162: LD_INT 1
82164: ST_TO_ADDR
// exit ;
82165: GO 82993
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
82167: LD_VAR 0 1
82171: NOT
82172: PUSH
82173: LD_VAR 0 1
82177: PPUSH
82178: CALL_OW 266
82182: PUSH
82183: LD_INT 0
82185: PUSH
82186: LD_INT 1
82188: PUSH
82189: EMPTY
82190: LIST
82191: LIST
82192: IN
82193: NOT
82194: OR
82195: PUSH
82196: LD_VAR 0 2
82200: NOT
82201: OR
82202: PUSH
82203: LD_VAR 0 5
82207: PUSH
82208: LD_INT 0
82210: PUSH
82211: LD_INT 1
82213: PUSH
82214: LD_INT 2
82216: PUSH
82217: LD_INT 3
82219: PUSH
82220: LD_INT 4
82222: PUSH
82223: LD_INT 5
82225: PUSH
82226: EMPTY
82227: LIST
82228: LIST
82229: LIST
82230: LIST
82231: LIST
82232: LIST
82233: IN
82234: NOT
82235: OR
82236: PUSH
82237: LD_VAR 0 3
82241: PPUSH
82242: LD_VAR 0 4
82246: PPUSH
82247: CALL_OW 488
82251: NOT
82252: OR
82253: IFFALSE 82257
// exit ;
82255: GO 82993
// side := GetSide ( depot ) ;
82257: LD_ADDR_VAR 0 9
82261: PUSH
82262: LD_VAR 0 1
82266: PPUSH
82267: CALL_OW 255
82271: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
82272: LD_VAR 0 9
82276: PPUSH
82277: LD_VAR 0 2
82281: PPUSH
82282: CALL 81750 0 2
82286: NOT
82287: IFFALSE 82291
// exit ;
82289: GO 82993
// pom := GetBase ( depot ) ;
82291: LD_ADDR_VAR 0 10
82295: PUSH
82296: LD_VAR 0 1
82300: PPUSH
82301: CALL_OW 274
82305: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82306: LD_ADDR_VAR 0 11
82310: PUSH
82311: LD_VAR 0 2
82315: PPUSH
82316: LD_VAR 0 1
82320: PPUSH
82321: CALL_OW 248
82325: PPUSH
82326: CALL_OW 450
82330: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
82331: LD_VAR 0 10
82335: PPUSH
82336: LD_INT 1
82338: PPUSH
82339: CALL_OW 275
82343: PUSH
82344: LD_VAR 0 11
82348: PUSH
82349: LD_INT 1
82351: ARRAY
82352: GREATEREQUAL
82353: PUSH
82354: LD_VAR 0 10
82358: PPUSH
82359: LD_INT 2
82361: PPUSH
82362: CALL_OW 275
82366: PUSH
82367: LD_VAR 0 11
82371: PUSH
82372: LD_INT 2
82374: ARRAY
82375: GREATEREQUAL
82376: AND
82377: PUSH
82378: LD_VAR 0 10
82382: PPUSH
82383: LD_INT 3
82385: PPUSH
82386: CALL_OW 275
82390: PUSH
82391: LD_VAR 0 11
82395: PUSH
82396: LD_INT 3
82398: ARRAY
82399: GREATEREQUAL
82400: AND
82401: NOT
82402: IFFALSE 82406
// exit ;
82404: GO 82993
// if GetBType ( depot ) = b_depot then
82406: LD_VAR 0 1
82410: PPUSH
82411: CALL_OW 266
82415: PUSH
82416: LD_INT 0
82418: EQUAL
82419: IFFALSE 82431
// dist := 28 else
82421: LD_ADDR_VAR 0 14
82425: PUSH
82426: LD_INT 28
82428: ST_TO_ADDR
82429: GO 82439
// dist := 36 ;
82431: LD_ADDR_VAR 0 14
82435: PUSH
82436: LD_INT 36
82438: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
82439: LD_VAR 0 1
82443: PPUSH
82444: LD_VAR 0 3
82448: PPUSH
82449: LD_VAR 0 4
82453: PPUSH
82454: CALL_OW 297
82458: PUSH
82459: LD_VAR 0 14
82463: GREATER
82464: IFFALSE 82468
// exit ;
82466: GO 82993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
82468: LD_ADDR_VAR 0 12
82472: PUSH
82473: LD_VAR 0 2
82477: PPUSH
82478: LD_VAR 0 3
82482: PPUSH
82483: LD_VAR 0 4
82487: PPUSH
82488: LD_VAR 0 5
82492: PPUSH
82493: LD_VAR 0 1
82497: PPUSH
82498: CALL_OW 248
82502: PPUSH
82503: LD_INT 0
82505: PPUSH
82506: CALL 82998 0 6
82510: ST_TO_ADDR
// if not hexes then
82511: LD_VAR 0 12
82515: NOT
82516: IFFALSE 82520
// exit ;
82518: GO 82993
// hex := GetHexInfo ( x , y ) ;
82520: LD_ADDR_VAR 0 15
82524: PUSH
82525: LD_VAR 0 3
82529: PPUSH
82530: LD_VAR 0 4
82534: PPUSH
82535: CALL_OW 546
82539: ST_TO_ADDR
// if hex [ 1 ] then
82540: LD_VAR 0 15
82544: PUSH
82545: LD_INT 1
82547: ARRAY
82548: IFFALSE 82552
// exit ;
82550: GO 82993
// height := hex [ 2 ] ;
82552: LD_ADDR_VAR 0 13
82556: PUSH
82557: LD_VAR 0 15
82561: PUSH
82562: LD_INT 2
82564: ARRAY
82565: ST_TO_ADDR
// for i = 1 to hexes do
82566: LD_ADDR_VAR 0 7
82570: PUSH
82571: DOUBLE
82572: LD_INT 1
82574: DEC
82575: ST_TO_ADDR
82576: LD_VAR 0 12
82580: PUSH
82581: FOR_TO
82582: IFFALSE 82912
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
82584: LD_VAR 0 12
82588: PUSH
82589: LD_VAR 0 7
82593: ARRAY
82594: PUSH
82595: LD_INT 1
82597: ARRAY
82598: PPUSH
82599: LD_VAR 0 12
82603: PUSH
82604: LD_VAR 0 7
82608: ARRAY
82609: PUSH
82610: LD_INT 2
82612: ARRAY
82613: PPUSH
82614: CALL_OW 488
82618: NOT
82619: PUSH
82620: LD_VAR 0 12
82624: PUSH
82625: LD_VAR 0 7
82629: ARRAY
82630: PUSH
82631: LD_INT 1
82633: ARRAY
82634: PPUSH
82635: LD_VAR 0 12
82639: PUSH
82640: LD_VAR 0 7
82644: ARRAY
82645: PUSH
82646: LD_INT 2
82648: ARRAY
82649: PPUSH
82650: CALL_OW 428
82654: PUSH
82655: LD_INT 0
82657: GREATER
82658: OR
82659: PUSH
82660: LD_VAR 0 12
82664: PUSH
82665: LD_VAR 0 7
82669: ARRAY
82670: PUSH
82671: LD_INT 1
82673: ARRAY
82674: PPUSH
82675: LD_VAR 0 12
82679: PUSH
82680: LD_VAR 0 7
82684: ARRAY
82685: PUSH
82686: LD_INT 2
82688: ARRAY
82689: PPUSH
82690: CALL_OW 351
82694: OR
82695: IFFALSE 82701
// exit ;
82697: POP
82698: POP
82699: GO 82993
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82701: LD_ADDR_VAR 0 8
82705: PUSH
82706: LD_VAR 0 12
82710: PUSH
82711: LD_VAR 0 7
82715: ARRAY
82716: PUSH
82717: LD_INT 1
82719: ARRAY
82720: PPUSH
82721: LD_VAR 0 12
82725: PUSH
82726: LD_VAR 0 7
82730: ARRAY
82731: PUSH
82732: LD_INT 2
82734: ARRAY
82735: PPUSH
82736: CALL_OW 546
82740: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
82741: LD_VAR 0 8
82745: PUSH
82746: LD_INT 1
82748: ARRAY
82749: PUSH
82750: LD_VAR 0 8
82754: PUSH
82755: LD_INT 2
82757: ARRAY
82758: PUSH
82759: LD_VAR 0 13
82763: PUSH
82764: LD_INT 2
82766: PLUS
82767: GREATER
82768: OR
82769: PUSH
82770: LD_VAR 0 8
82774: PUSH
82775: LD_INT 2
82777: ARRAY
82778: PUSH
82779: LD_VAR 0 13
82783: PUSH
82784: LD_INT 2
82786: MINUS
82787: LESS
82788: OR
82789: PUSH
82790: LD_VAR 0 8
82794: PUSH
82795: LD_INT 3
82797: ARRAY
82798: PUSH
82799: LD_INT 0
82801: PUSH
82802: LD_INT 8
82804: PUSH
82805: LD_INT 9
82807: PUSH
82808: LD_INT 10
82810: PUSH
82811: LD_INT 11
82813: PUSH
82814: LD_INT 12
82816: PUSH
82817: LD_INT 13
82819: PUSH
82820: LD_INT 16
82822: PUSH
82823: LD_INT 17
82825: PUSH
82826: LD_INT 18
82828: PUSH
82829: LD_INT 19
82831: PUSH
82832: LD_INT 20
82834: PUSH
82835: LD_INT 21
82837: PUSH
82838: EMPTY
82839: LIST
82840: LIST
82841: LIST
82842: LIST
82843: LIST
82844: LIST
82845: LIST
82846: LIST
82847: LIST
82848: LIST
82849: LIST
82850: LIST
82851: LIST
82852: IN
82853: NOT
82854: OR
82855: PUSH
82856: LD_VAR 0 8
82860: PUSH
82861: LD_INT 5
82863: ARRAY
82864: NOT
82865: OR
82866: PUSH
82867: LD_VAR 0 8
82871: PUSH
82872: LD_INT 6
82874: ARRAY
82875: PUSH
82876: LD_INT 1
82878: PUSH
82879: LD_INT 2
82881: PUSH
82882: LD_INT 7
82884: PUSH
82885: LD_INT 9
82887: PUSH
82888: LD_INT 10
82890: PUSH
82891: LD_INT 11
82893: PUSH
82894: EMPTY
82895: LIST
82896: LIST
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: IN
82902: NOT
82903: OR
82904: IFFALSE 82910
// exit ;
82906: POP
82907: POP
82908: GO 82993
// end ;
82910: GO 82581
82912: POP
82913: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
82914: LD_VAR 0 9
82918: PPUSH
82919: LD_VAR 0 3
82923: PPUSH
82924: LD_VAR 0 4
82928: PPUSH
82929: LD_INT 20
82931: PPUSH
82932: CALL 74916 0 4
82936: PUSH
82937: LD_INT 4
82939: ARRAY
82940: IFFALSE 82944
// exit ;
82942: GO 82993
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
82944: LD_VAR 0 2
82948: PUSH
82949: LD_INT 29
82951: PUSH
82952: LD_INT 30
82954: PUSH
82955: EMPTY
82956: LIST
82957: LIST
82958: IN
82959: PUSH
82960: LD_VAR 0 3
82964: PPUSH
82965: LD_VAR 0 4
82969: PPUSH
82970: LD_VAR 0 9
82974: PPUSH
82975: CALL_OW 440
82979: NOT
82980: AND
82981: IFFALSE 82985
// exit ;
82983: GO 82993
// result := true ;
82985: LD_ADDR_VAR 0 6
82989: PUSH
82990: LD_INT 1
82992: ST_TO_ADDR
// end ;
82993: LD_VAR 0 6
82997: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
82998: LD_INT 0
83000: PPUSH
83001: PPUSH
83002: PPUSH
83003: PPUSH
83004: PPUSH
83005: PPUSH
83006: PPUSH
83007: PPUSH
83008: PPUSH
83009: PPUSH
83010: PPUSH
83011: PPUSH
83012: PPUSH
83013: PPUSH
83014: PPUSH
83015: PPUSH
83016: PPUSH
83017: PPUSH
83018: PPUSH
83019: PPUSH
83020: PPUSH
83021: PPUSH
83022: PPUSH
83023: PPUSH
83024: PPUSH
83025: PPUSH
83026: PPUSH
83027: PPUSH
83028: PPUSH
83029: PPUSH
83030: PPUSH
83031: PPUSH
83032: PPUSH
83033: PPUSH
83034: PPUSH
83035: PPUSH
83036: PPUSH
83037: PPUSH
83038: PPUSH
83039: PPUSH
83040: PPUSH
83041: PPUSH
83042: PPUSH
83043: PPUSH
83044: PPUSH
83045: PPUSH
83046: PPUSH
83047: PPUSH
83048: PPUSH
83049: PPUSH
83050: PPUSH
83051: PPUSH
83052: PPUSH
83053: PPUSH
83054: PPUSH
83055: PPUSH
83056: PPUSH
83057: PPUSH
// result = [ ] ;
83058: LD_ADDR_VAR 0 7
83062: PUSH
83063: EMPTY
83064: ST_TO_ADDR
// temp_list = [ ] ;
83065: LD_ADDR_VAR 0 9
83069: PUSH
83070: EMPTY
83071: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
83072: LD_VAR 0 4
83076: PUSH
83077: LD_INT 0
83079: PUSH
83080: LD_INT 1
83082: PUSH
83083: LD_INT 2
83085: PUSH
83086: LD_INT 3
83088: PUSH
83089: LD_INT 4
83091: PUSH
83092: LD_INT 5
83094: PUSH
83095: EMPTY
83096: LIST
83097: LIST
83098: LIST
83099: LIST
83100: LIST
83101: LIST
83102: IN
83103: NOT
83104: PUSH
83105: LD_VAR 0 1
83109: PUSH
83110: LD_INT 0
83112: PUSH
83113: LD_INT 1
83115: PUSH
83116: EMPTY
83117: LIST
83118: LIST
83119: IN
83120: PUSH
83121: LD_VAR 0 5
83125: PUSH
83126: LD_INT 1
83128: PUSH
83129: LD_INT 2
83131: PUSH
83132: LD_INT 3
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: LIST
83139: IN
83140: NOT
83141: AND
83142: OR
83143: IFFALSE 83147
// exit ;
83145: GO 101538
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
83147: LD_VAR 0 1
83151: PUSH
83152: LD_INT 6
83154: PUSH
83155: LD_INT 7
83157: PUSH
83158: LD_INT 8
83160: PUSH
83161: LD_INT 13
83163: PUSH
83164: LD_INT 12
83166: PUSH
83167: LD_INT 15
83169: PUSH
83170: LD_INT 11
83172: PUSH
83173: LD_INT 14
83175: PUSH
83176: LD_INT 10
83178: PUSH
83179: EMPTY
83180: LIST
83181: LIST
83182: LIST
83183: LIST
83184: LIST
83185: LIST
83186: LIST
83187: LIST
83188: LIST
83189: IN
83190: IFFALSE 83200
// btype = b_lab ;
83192: LD_ADDR_VAR 0 1
83196: PUSH
83197: LD_INT 6
83199: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
83200: LD_VAR 0 6
83204: PUSH
83205: LD_INT 0
83207: PUSH
83208: LD_INT 1
83210: PUSH
83211: LD_INT 2
83213: PUSH
83214: EMPTY
83215: LIST
83216: LIST
83217: LIST
83218: IN
83219: NOT
83220: PUSH
83221: LD_VAR 0 1
83225: PUSH
83226: LD_INT 0
83228: PUSH
83229: LD_INT 1
83231: PUSH
83232: LD_INT 2
83234: PUSH
83235: LD_INT 3
83237: PUSH
83238: LD_INT 6
83240: PUSH
83241: LD_INT 36
83243: PUSH
83244: LD_INT 4
83246: PUSH
83247: LD_INT 5
83249: PUSH
83250: LD_INT 31
83252: PUSH
83253: LD_INT 32
83255: PUSH
83256: LD_INT 33
83258: PUSH
83259: EMPTY
83260: LIST
83261: LIST
83262: LIST
83263: LIST
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: LIST
83271: IN
83272: NOT
83273: PUSH
83274: LD_VAR 0 6
83278: PUSH
83279: LD_INT 1
83281: EQUAL
83282: AND
83283: OR
83284: PUSH
83285: LD_VAR 0 1
83289: PUSH
83290: LD_INT 2
83292: PUSH
83293: LD_INT 3
83295: PUSH
83296: EMPTY
83297: LIST
83298: LIST
83299: IN
83300: NOT
83301: PUSH
83302: LD_VAR 0 6
83306: PUSH
83307: LD_INT 2
83309: EQUAL
83310: AND
83311: OR
83312: IFFALSE 83322
// mode = 0 ;
83314: LD_ADDR_VAR 0 6
83318: PUSH
83319: LD_INT 0
83321: ST_TO_ADDR
// case mode of 0 :
83322: LD_VAR 0 6
83326: PUSH
83327: LD_INT 0
83329: DOUBLE
83330: EQUAL
83331: IFTRUE 83335
83333: GO 94788
83335: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83336: LD_ADDR_VAR 0 11
83340: PUSH
83341: LD_INT 0
83343: PUSH
83344: LD_INT 0
83346: PUSH
83347: EMPTY
83348: LIST
83349: LIST
83350: PUSH
83351: LD_INT 0
83353: PUSH
83354: LD_INT 1
83356: NEG
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: PUSH
83362: LD_INT 1
83364: PUSH
83365: LD_INT 0
83367: PUSH
83368: EMPTY
83369: LIST
83370: LIST
83371: PUSH
83372: LD_INT 1
83374: PUSH
83375: LD_INT 1
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: PUSH
83382: LD_INT 0
83384: PUSH
83385: LD_INT 1
83387: PUSH
83388: EMPTY
83389: LIST
83390: LIST
83391: PUSH
83392: LD_INT 1
83394: NEG
83395: PUSH
83396: LD_INT 0
83398: PUSH
83399: EMPTY
83400: LIST
83401: LIST
83402: PUSH
83403: LD_INT 1
83405: NEG
83406: PUSH
83407: LD_INT 1
83409: NEG
83410: PUSH
83411: EMPTY
83412: LIST
83413: LIST
83414: PUSH
83415: LD_INT 1
83417: NEG
83418: PUSH
83419: LD_INT 2
83421: NEG
83422: PUSH
83423: EMPTY
83424: LIST
83425: LIST
83426: PUSH
83427: LD_INT 0
83429: PUSH
83430: LD_INT 2
83432: NEG
83433: PUSH
83434: EMPTY
83435: LIST
83436: LIST
83437: PUSH
83438: LD_INT 1
83440: PUSH
83441: LD_INT 1
83443: NEG
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: LD_INT 1
83451: PUSH
83452: LD_INT 2
83454: PUSH
83455: EMPTY
83456: LIST
83457: LIST
83458: PUSH
83459: LD_INT 0
83461: PUSH
83462: LD_INT 2
83464: PUSH
83465: EMPTY
83466: LIST
83467: LIST
83468: PUSH
83469: LD_INT 1
83471: NEG
83472: PUSH
83473: LD_INT 1
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: PUSH
83480: LD_INT 1
83482: PUSH
83483: LD_INT 3
83485: PUSH
83486: EMPTY
83487: LIST
83488: LIST
83489: PUSH
83490: LD_INT 0
83492: PUSH
83493: LD_INT 3
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PUSH
83500: LD_INT 1
83502: NEG
83503: PUSH
83504: LD_INT 2
83506: PUSH
83507: EMPTY
83508: LIST
83509: LIST
83510: PUSH
83511: EMPTY
83512: LIST
83513: LIST
83514: LIST
83515: LIST
83516: LIST
83517: LIST
83518: LIST
83519: LIST
83520: LIST
83521: LIST
83522: LIST
83523: LIST
83524: LIST
83525: LIST
83526: LIST
83527: LIST
83528: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83529: LD_ADDR_VAR 0 12
83533: PUSH
83534: LD_INT 0
83536: PUSH
83537: LD_INT 0
83539: PUSH
83540: EMPTY
83541: LIST
83542: LIST
83543: PUSH
83544: LD_INT 0
83546: PUSH
83547: LD_INT 1
83549: NEG
83550: PUSH
83551: EMPTY
83552: LIST
83553: LIST
83554: PUSH
83555: LD_INT 1
83557: PUSH
83558: LD_INT 0
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PUSH
83565: LD_INT 1
83567: PUSH
83568: LD_INT 1
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PUSH
83575: LD_INT 0
83577: PUSH
83578: LD_INT 1
83580: PUSH
83581: EMPTY
83582: LIST
83583: LIST
83584: PUSH
83585: LD_INT 1
83587: NEG
83588: PUSH
83589: LD_INT 0
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: PUSH
83596: LD_INT 1
83598: NEG
83599: PUSH
83600: LD_INT 1
83602: NEG
83603: PUSH
83604: EMPTY
83605: LIST
83606: LIST
83607: PUSH
83608: LD_INT 1
83610: PUSH
83611: LD_INT 1
83613: NEG
83614: PUSH
83615: EMPTY
83616: LIST
83617: LIST
83618: PUSH
83619: LD_INT 2
83621: PUSH
83622: LD_INT 0
83624: PUSH
83625: EMPTY
83626: LIST
83627: LIST
83628: PUSH
83629: LD_INT 2
83631: PUSH
83632: LD_INT 1
83634: PUSH
83635: EMPTY
83636: LIST
83637: LIST
83638: PUSH
83639: LD_INT 1
83641: NEG
83642: PUSH
83643: LD_INT 1
83645: PUSH
83646: EMPTY
83647: LIST
83648: LIST
83649: PUSH
83650: LD_INT 2
83652: NEG
83653: PUSH
83654: LD_INT 0
83656: PUSH
83657: EMPTY
83658: LIST
83659: LIST
83660: PUSH
83661: LD_INT 2
83663: NEG
83664: PUSH
83665: LD_INT 1
83667: NEG
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: PUSH
83673: LD_INT 2
83675: NEG
83676: PUSH
83677: LD_INT 1
83679: PUSH
83680: EMPTY
83681: LIST
83682: LIST
83683: PUSH
83684: LD_INT 3
83686: NEG
83687: PUSH
83688: LD_INT 0
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: PUSH
83695: LD_INT 3
83697: NEG
83698: PUSH
83699: LD_INT 1
83701: NEG
83702: PUSH
83703: EMPTY
83704: LIST
83705: LIST
83706: PUSH
83707: EMPTY
83708: LIST
83709: LIST
83710: LIST
83711: LIST
83712: LIST
83713: LIST
83714: LIST
83715: LIST
83716: LIST
83717: LIST
83718: LIST
83719: LIST
83720: LIST
83721: LIST
83722: LIST
83723: LIST
83724: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83725: LD_ADDR_VAR 0 13
83729: PUSH
83730: LD_INT 0
83732: PUSH
83733: LD_INT 0
83735: PUSH
83736: EMPTY
83737: LIST
83738: LIST
83739: PUSH
83740: LD_INT 0
83742: PUSH
83743: LD_INT 1
83745: NEG
83746: PUSH
83747: EMPTY
83748: LIST
83749: LIST
83750: PUSH
83751: LD_INT 1
83753: PUSH
83754: LD_INT 0
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: PUSH
83761: LD_INT 1
83763: PUSH
83764: LD_INT 1
83766: PUSH
83767: EMPTY
83768: LIST
83769: LIST
83770: PUSH
83771: LD_INT 0
83773: PUSH
83774: LD_INT 1
83776: PUSH
83777: EMPTY
83778: LIST
83779: LIST
83780: PUSH
83781: LD_INT 1
83783: NEG
83784: PUSH
83785: LD_INT 0
83787: PUSH
83788: EMPTY
83789: LIST
83790: LIST
83791: PUSH
83792: LD_INT 1
83794: NEG
83795: PUSH
83796: LD_INT 1
83798: NEG
83799: PUSH
83800: EMPTY
83801: LIST
83802: LIST
83803: PUSH
83804: LD_INT 1
83806: NEG
83807: PUSH
83808: LD_INT 2
83810: NEG
83811: PUSH
83812: EMPTY
83813: LIST
83814: LIST
83815: PUSH
83816: LD_INT 2
83818: PUSH
83819: LD_INT 1
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: PUSH
83826: LD_INT 2
83828: PUSH
83829: LD_INT 2
83831: PUSH
83832: EMPTY
83833: LIST
83834: LIST
83835: PUSH
83836: LD_INT 1
83838: PUSH
83839: LD_INT 2
83841: PUSH
83842: EMPTY
83843: LIST
83844: LIST
83845: PUSH
83846: LD_INT 2
83848: NEG
83849: PUSH
83850: LD_INT 1
83852: NEG
83853: PUSH
83854: EMPTY
83855: LIST
83856: LIST
83857: PUSH
83858: LD_INT 2
83860: NEG
83861: PUSH
83862: LD_INT 2
83864: NEG
83865: PUSH
83866: EMPTY
83867: LIST
83868: LIST
83869: PUSH
83870: LD_INT 2
83872: NEG
83873: PUSH
83874: LD_INT 3
83876: NEG
83877: PUSH
83878: EMPTY
83879: LIST
83880: LIST
83881: PUSH
83882: LD_INT 3
83884: NEG
83885: PUSH
83886: LD_INT 2
83888: NEG
83889: PUSH
83890: EMPTY
83891: LIST
83892: LIST
83893: PUSH
83894: LD_INT 3
83896: NEG
83897: PUSH
83898: LD_INT 3
83900: NEG
83901: PUSH
83902: EMPTY
83903: LIST
83904: LIST
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: LIST
83910: LIST
83911: LIST
83912: LIST
83913: LIST
83914: LIST
83915: LIST
83916: LIST
83917: LIST
83918: LIST
83919: LIST
83920: LIST
83921: LIST
83922: LIST
83923: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83924: LD_ADDR_VAR 0 14
83928: PUSH
83929: LD_INT 0
83931: PUSH
83932: LD_INT 0
83934: PUSH
83935: EMPTY
83936: LIST
83937: LIST
83938: PUSH
83939: LD_INT 0
83941: PUSH
83942: LD_INT 1
83944: NEG
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: PUSH
83950: LD_INT 1
83952: PUSH
83953: LD_INT 0
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: PUSH
83960: LD_INT 1
83962: PUSH
83963: LD_INT 1
83965: PUSH
83966: EMPTY
83967: LIST
83968: LIST
83969: PUSH
83970: LD_INT 0
83972: PUSH
83973: LD_INT 1
83975: PUSH
83976: EMPTY
83977: LIST
83978: LIST
83979: PUSH
83980: LD_INT 1
83982: NEG
83983: PUSH
83984: LD_INT 0
83986: PUSH
83987: EMPTY
83988: LIST
83989: LIST
83990: PUSH
83991: LD_INT 1
83993: NEG
83994: PUSH
83995: LD_INT 1
83997: NEG
83998: PUSH
83999: EMPTY
84000: LIST
84001: LIST
84002: PUSH
84003: LD_INT 1
84005: NEG
84006: PUSH
84007: LD_INT 2
84009: NEG
84010: PUSH
84011: EMPTY
84012: LIST
84013: LIST
84014: PUSH
84015: LD_INT 0
84017: PUSH
84018: LD_INT 2
84020: NEG
84021: PUSH
84022: EMPTY
84023: LIST
84024: LIST
84025: PUSH
84026: LD_INT 1
84028: PUSH
84029: LD_INT 1
84031: NEG
84032: PUSH
84033: EMPTY
84034: LIST
84035: LIST
84036: PUSH
84037: LD_INT 1
84039: PUSH
84040: LD_INT 2
84042: PUSH
84043: EMPTY
84044: LIST
84045: LIST
84046: PUSH
84047: LD_INT 0
84049: PUSH
84050: LD_INT 2
84052: PUSH
84053: EMPTY
84054: LIST
84055: LIST
84056: PUSH
84057: LD_INT 1
84059: NEG
84060: PUSH
84061: LD_INT 1
84063: PUSH
84064: EMPTY
84065: LIST
84066: LIST
84067: PUSH
84068: LD_INT 1
84070: NEG
84071: PUSH
84072: LD_INT 3
84074: NEG
84075: PUSH
84076: EMPTY
84077: LIST
84078: LIST
84079: PUSH
84080: LD_INT 0
84082: PUSH
84083: LD_INT 3
84085: NEG
84086: PUSH
84087: EMPTY
84088: LIST
84089: LIST
84090: PUSH
84091: LD_INT 1
84093: PUSH
84094: LD_INT 2
84096: NEG
84097: PUSH
84098: EMPTY
84099: LIST
84100: LIST
84101: PUSH
84102: EMPTY
84103: LIST
84104: LIST
84105: LIST
84106: LIST
84107: LIST
84108: LIST
84109: LIST
84110: LIST
84111: LIST
84112: LIST
84113: LIST
84114: LIST
84115: LIST
84116: LIST
84117: LIST
84118: LIST
84119: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
84120: LD_ADDR_VAR 0 15
84124: PUSH
84125: LD_INT 0
84127: PUSH
84128: LD_INT 0
84130: PUSH
84131: EMPTY
84132: LIST
84133: LIST
84134: PUSH
84135: LD_INT 0
84137: PUSH
84138: LD_INT 1
84140: NEG
84141: PUSH
84142: EMPTY
84143: LIST
84144: LIST
84145: PUSH
84146: LD_INT 1
84148: PUSH
84149: LD_INT 0
84151: PUSH
84152: EMPTY
84153: LIST
84154: LIST
84155: PUSH
84156: LD_INT 1
84158: PUSH
84159: LD_INT 1
84161: PUSH
84162: EMPTY
84163: LIST
84164: LIST
84165: PUSH
84166: LD_INT 0
84168: PUSH
84169: LD_INT 1
84171: PUSH
84172: EMPTY
84173: LIST
84174: LIST
84175: PUSH
84176: LD_INT 1
84178: NEG
84179: PUSH
84180: LD_INT 0
84182: PUSH
84183: EMPTY
84184: LIST
84185: LIST
84186: PUSH
84187: LD_INT 1
84189: NEG
84190: PUSH
84191: LD_INT 1
84193: NEG
84194: PUSH
84195: EMPTY
84196: LIST
84197: LIST
84198: PUSH
84199: LD_INT 1
84201: PUSH
84202: LD_INT 1
84204: NEG
84205: PUSH
84206: EMPTY
84207: LIST
84208: LIST
84209: PUSH
84210: LD_INT 2
84212: PUSH
84213: LD_INT 0
84215: PUSH
84216: EMPTY
84217: LIST
84218: LIST
84219: PUSH
84220: LD_INT 2
84222: PUSH
84223: LD_INT 1
84225: PUSH
84226: EMPTY
84227: LIST
84228: LIST
84229: PUSH
84230: LD_INT 1
84232: NEG
84233: PUSH
84234: LD_INT 1
84236: PUSH
84237: EMPTY
84238: LIST
84239: LIST
84240: PUSH
84241: LD_INT 2
84243: NEG
84244: PUSH
84245: LD_INT 0
84247: PUSH
84248: EMPTY
84249: LIST
84250: LIST
84251: PUSH
84252: LD_INT 2
84254: NEG
84255: PUSH
84256: LD_INT 1
84258: NEG
84259: PUSH
84260: EMPTY
84261: LIST
84262: LIST
84263: PUSH
84264: LD_INT 2
84266: PUSH
84267: LD_INT 1
84269: NEG
84270: PUSH
84271: EMPTY
84272: LIST
84273: LIST
84274: PUSH
84275: LD_INT 3
84277: PUSH
84278: LD_INT 0
84280: PUSH
84281: EMPTY
84282: LIST
84283: LIST
84284: PUSH
84285: LD_INT 3
84287: PUSH
84288: LD_INT 1
84290: PUSH
84291: EMPTY
84292: LIST
84293: LIST
84294: PUSH
84295: EMPTY
84296: LIST
84297: LIST
84298: LIST
84299: LIST
84300: LIST
84301: LIST
84302: LIST
84303: LIST
84304: LIST
84305: LIST
84306: LIST
84307: LIST
84308: LIST
84309: LIST
84310: LIST
84311: LIST
84312: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
84313: LD_ADDR_VAR 0 16
84317: PUSH
84318: LD_INT 0
84320: PUSH
84321: LD_INT 0
84323: PUSH
84324: EMPTY
84325: LIST
84326: LIST
84327: PUSH
84328: LD_INT 0
84330: PUSH
84331: LD_INT 1
84333: NEG
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: PUSH
84339: LD_INT 1
84341: PUSH
84342: LD_INT 0
84344: PUSH
84345: EMPTY
84346: LIST
84347: LIST
84348: PUSH
84349: LD_INT 1
84351: PUSH
84352: LD_INT 1
84354: PUSH
84355: EMPTY
84356: LIST
84357: LIST
84358: PUSH
84359: LD_INT 0
84361: PUSH
84362: LD_INT 1
84364: PUSH
84365: EMPTY
84366: LIST
84367: LIST
84368: PUSH
84369: LD_INT 1
84371: NEG
84372: PUSH
84373: LD_INT 0
84375: PUSH
84376: EMPTY
84377: LIST
84378: LIST
84379: PUSH
84380: LD_INT 1
84382: NEG
84383: PUSH
84384: LD_INT 1
84386: NEG
84387: PUSH
84388: EMPTY
84389: LIST
84390: LIST
84391: PUSH
84392: LD_INT 1
84394: NEG
84395: PUSH
84396: LD_INT 2
84398: NEG
84399: PUSH
84400: EMPTY
84401: LIST
84402: LIST
84403: PUSH
84404: LD_INT 2
84406: PUSH
84407: LD_INT 1
84409: PUSH
84410: EMPTY
84411: LIST
84412: LIST
84413: PUSH
84414: LD_INT 2
84416: PUSH
84417: LD_INT 2
84419: PUSH
84420: EMPTY
84421: LIST
84422: LIST
84423: PUSH
84424: LD_INT 1
84426: PUSH
84427: LD_INT 2
84429: PUSH
84430: EMPTY
84431: LIST
84432: LIST
84433: PUSH
84434: LD_INT 2
84436: NEG
84437: PUSH
84438: LD_INT 1
84440: NEG
84441: PUSH
84442: EMPTY
84443: LIST
84444: LIST
84445: PUSH
84446: LD_INT 2
84448: NEG
84449: PUSH
84450: LD_INT 2
84452: NEG
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PUSH
84458: LD_INT 3
84460: PUSH
84461: LD_INT 2
84463: PUSH
84464: EMPTY
84465: LIST
84466: LIST
84467: PUSH
84468: LD_INT 3
84470: PUSH
84471: LD_INT 3
84473: PUSH
84474: EMPTY
84475: LIST
84476: LIST
84477: PUSH
84478: LD_INT 2
84480: PUSH
84481: LD_INT 3
84483: PUSH
84484: EMPTY
84485: LIST
84486: LIST
84487: PUSH
84488: EMPTY
84489: LIST
84490: LIST
84491: LIST
84492: LIST
84493: LIST
84494: LIST
84495: LIST
84496: LIST
84497: LIST
84498: LIST
84499: LIST
84500: LIST
84501: LIST
84502: LIST
84503: LIST
84504: LIST
84505: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84506: LD_ADDR_VAR 0 17
84510: PUSH
84511: LD_INT 0
84513: PUSH
84514: LD_INT 0
84516: PUSH
84517: EMPTY
84518: LIST
84519: LIST
84520: PUSH
84521: LD_INT 0
84523: PUSH
84524: LD_INT 1
84526: NEG
84527: PUSH
84528: EMPTY
84529: LIST
84530: LIST
84531: PUSH
84532: LD_INT 1
84534: PUSH
84535: LD_INT 0
84537: PUSH
84538: EMPTY
84539: LIST
84540: LIST
84541: PUSH
84542: LD_INT 1
84544: PUSH
84545: LD_INT 1
84547: PUSH
84548: EMPTY
84549: LIST
84550: LIST
84551: PUSH
84552: LD_INT 0
84554: PUSH
84555: LD_INT 1
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: PUSH
84562: LD_INT 1
84564: NEG
84565: PUSH
84566: LD_INT 0
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: PUSH
84573: LD_INT 1
84575: NEG
84576: PUSH
84577: LD_INT 1
84579: NEG
84580: PUSH
84581: EMPTY
84582: LIST
84583: LIST
84584: PUSH
84585: LD_INT 1
84587: NEG
84588: PUSH
84589: LD_INT 2
84591: NEG
84592: PUSH
84593: EMPTY
84594: LIST
84595: LIST
84596: PUSH
84597: LD_INT 0
84599: PUSH
84600: LD_INT 2
84602: NEG
84603: PUSH
84604: EMPTY
84605: LIST
84606: LIST
84607: PUSH
84608: LD_INT 1
84610: PUSH
84611: LD_INT 1
84613: NEG
84614: PUSH
84615: EMPTY
84616: LIST
84617: LIST
84618: PUSH
84619: LD_INT 2
84621: PUSH
84622: LD_INT 0
84624: PUSH
84625: EMPTY
84626: LIST
84627: LIST
84628: PUSH
84629: LD_INT 2
84631: PUSH
84632: LD_INT 1
84634: PUSH
84635: EMPTY
84636: LIST
84637: LIST
84638: PUSH
84639: LD_INT 2
84641: PUSH
84642: LD_INT 2
84644: PUSH
84645: EMPTY
84646: LIST
84647: LIST
84648: PUSH
84649: LD_INT 1
84651: PUSH
84652: LD_INT 2
84654: PUSH
84655: EMPTY
84656: LIST
84657: LIST
84658: PUSH
84659: LD_INT 0
84661: PUSH
84662: LD_INT 2
84664: PUSH
84665: EMPTY
84666: LIST
84667: LIST
84668: PUSH
84669: LD_INT 1
84671: NEG
84672: PUSH
84673: LD_INT 1
84675: PUSH
84676: EMPTY
84677: LIST
84678: LIST
84679: PUSH
84680: LD_INT 2
84682: NEG
84683: PUSH
84684: LD_INT 0
84686: PUSH
84687: EMPTY
84688: LIST
84689: LIST
84690: PUSH
84691: LD_INT 2
84693: NEG
84694: PUSH
84695: LD_INT 1
84697: NEG
84698: PUSH
84699: EMPTY
84700: LIST
84701: LIST
84702: PUSH
84703: LD_INT 2
84705: NEG
84706: PUSH
84707: LD_INT 2
84709: NEG
84710: PUSH
84711: EMPTY
84712: LIST
84713: LIST
84714: PUSH
84715: EMPTY
84716: LIST
84717: LIST
84718: LIST
84719: LIST
84720: LIST
84721: LIST
84722: LIST
84723: LIST
84724: LIST
84725: LIST
84726: LIST
84727: LIST
84728: LIST
84729: LIST
84730: LIST
84731: LIST
84732: LIST
84733: LIST
84734: LIST
84735: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84736: LD_ADDR_VAR 0 18
84740: PUSH
84741: LD_INT 0
84743: PUSH
84744: LD_INT 0
84746: PUSH
84747: EMPTY
84748: LIST
84749: LIST
84750: PUSH
84751: LD_INT 0
84753: PUSH
84754: LD_INT 1
84756: NEG
84757: PUSH
84758: EMPTY
84759: LIST
84760: LIST
84761: PUSH
84762: LD_INT 1
84764: PUSH
84765: LD_INT 0
84767: PUSH
84768: EMPTY
84769: LIST
84770: LIST
84771: PUSH
84772: LD_INT 1
84774: PUSH
84775: LD_INT 1
84777: PUSH
84778: EMPTY
84779: LIST
84780: LIST
84781: PUSH
84782: LD_INT 0
84784: PUSH
84785: LD_INT 1
84787: PUSH
84788: EMPTY
84789: LIST
84790: LIST
84791: PUSH
84792: LD_INT 1
84794: NEG
84795: PUSH
84796: LD_INT 0
84798: PUSH
84799: EMPTY
84800: LIST
84801: LIST
84802: PUSH
84803: LD_INT 1
84805: NEG
84806: PUSH
84807: LD_INT 1
84809: NEG
84810: PUSH
84811: EMPTY
84812: LIST
84813: LIST
84814: PUSH
84815: LD_INT 1
84817: NEG
84818: PUSH
84819: LD_INT 2
84821: NEG
84822: PUSH
84823: EMPTY
84824: LIST
84825: LIST
84826: PUSH
84827: LD_INT 0
84829: PUSH
84830: LD_INT 2
84832: NEG
84833: PUSH
84834: EMPTY
84835: LIST
84836: LIST
84837: PUSH
84838: LD_INT 1
84840: PUSH
84841: LD_INT 1
84843: NEG
84844: PUSH
84845: EMPTY
84846: LIST
84847: LIST
84848: PUSH
84849: LD_INT 2
84851: PUSH
84852: LD_INT 0
84854: PUSH
84855: EMPTY
84856: LIST
84857: LIST
84858: PUSH
84859: LD_INT 2
84861: PUSH
84862: LD_INT 1
84864: PUSH
84865: EMPTY
84866: LIST
84867: LIST
84868: PUSH
84869: LD_INT 2
84871: PUSH
84872: LD_INT 2
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: PUSH
84879: LD_INT 1
84881: PUSH
84882: LD_INT 2
84884: PUSH
84885: EMPTY
84886: LIST
84887: LIST
84888: PUSH
84889: LD_INT 0
84891: PUSH
84892: LD_INT 2
84894: PUSH
84895: EMPTY
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 1
84901: NEG
84902: PUSH
84903: LD_INT 1
84905: PUSH
84906: EMPTY
84907: LIST
84908: LIST
84909: PUSH
84910: LD_INT 2
84912: NEG
84913: PUSH
84914: LD_INT 0
84916: PUSH
84917: EMPTY
84918: LIST
84919: LIST
84920: PUSH
84921: LD_INT 2
84923: NEG
84924: PUSH
84925: LD_INT 1
84927: NEG
84928: PUSH
84929: EMPTY
84930: LIST
84931: LIST
84932: PUSH
84933: LD_INT 2
84935: NEG
84936: PUSH
84937: LD_INT 2
84939: NEG
84940: PUSH
84941: EMPTY
84942: LIST
84943: LIST
84944: PUSH
84945: EMPTY
84946: LIST
84947: LIST
84948: LIST
84949: LIST
84950: LIST
84951: LIST
84952: LIST
84953: LIST
84954: LIST
84955: LIST
84956: LIST
84957: LIST
84958: LIST
84959: LIST
84960: LIST
84961: LIST
84962: LIST
84963: LIST
84964: LIST
84965: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84966: LD_ADDR_VAR 0 19
84970: PUSH
84971: LD_INT 0
84973: PUSH
84974: LD_INT 0
84976: PUSH
84977: EMPTY
84978: LIST
84979: LIST
84980: PUSH
84981: LD_INT 0
84983: PUSH
84984: LD_INT 1
84986: NEG
84987: PUSH
84988: EMPTY
84989: LIST
84990: LIST
84991: PUSH
84992: LD_INT 1
84994: PUSH
84995: LD_INT 0
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PUSH
85002: LD_INT 1
85004: PUSH
85005: LD_INT 1
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: LD_INT 0
85014: PUSH
85015: LD_INT 1
85017: PUSH
85018: EMPTY
85019: LIST
85020: LIST
85021: PUSH
85022: LD_INT 1
85024: NEG
85025: PUSH
85026: LD_INT 0
85028: PUSH
85029: EMPTY
85030: LIST
85031: LIST
85032: PUSH
85033: LD_INT 1
85035: NEG
85036: PUSH
85037: LD_INT 1
85039: NEG
85040: PUSH
85041: EMPTY
85042: LIST
85043: LIST
85044: PUSH
85045: LD_INT 1
85047: NEG
85048: PUSH
85049: LD_INT 2
85051: NEG
85052: PUSH
85053: EMPTY
85054: LIST
85055: LIST
85056: PUSH
85057: LD_INT 0
85059: PUSH
85060: LD_INT 2
85062: NEG
85063: PUSH
85064: EMPTY
85065: LIST
85066: LIST
85067: PUSH
85068: LD_INT 1
85070: PUSH
85071: LD_INT 1
85073: NEG
85074: PUSH
85075: EMPTY
85076: LIST
85077: LIST
85078: PUSH
85079: LD_INT 2
85081: PUSH
85082: LD_INT 0
85084: PUSH
85085: EMPTY
85086: LIST
85087: LIST
85088: PUSH
85089: LD_INT 2
85091: PUSH
85092: LD_INT 1
85094: PUSH
85095: EMPTY
85096: LIST
85097: LIST
85098: PUSH
85099: LD_INT 2
85101: PUSH
85102: LD_INT 2
85104: PUSH
85105: EMPTY
85106: LIST
85107: LIST
85108: PUSH
85109: LD_INT 1
85111: PUSH
85112: LD_INT 2
85114: PUSH
85115: EMPTY
85116: LIST
85117: LIST
85118: PUSH
85119: LD_INT 0
85121: PUSH
85122: LD_INT 2
85124: PUSH
85125: EMPTY
85126: LIST
85127: LIST
85128: PUSH
85129: LD_INT 1
85131: NEG
85132: PUSH
85133: LD_INT 1
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: PUSH
85140: LD_INT 2
85142: NEG
85143: PUSH
85144: LD_INT 0
85146: PUSH
85147: EMPTY
85148: LIST
85149: LIST
85150: PUSH
85151: LD_INT 2
85153: NEG
85154: PUSH
85155: LD_INT 1
85157: NEG
85158: PUSH
85159: EMPTY
85160: LIST
85161: LIST
85162: PUSH
85163: LD_INT 2
85165: NEG
85166: PUSH
85167: LD_INT 2
85169: NEG
85170: PUSH
85171: EMPTY
85172: LIST
85173: LIST
85174: PUSH
85175: EMPTY
85176: LIST
85177: LIST
85178: LIST
85179: LIST
85180: LIST
85181: LIST
85182: LIST
85183: LIST
85184: LIST
85185: LIST
85186: LIST
85187: LIST
85188: LIST
85189: LIST
85190: LIST
85191: LIST
85192: LIST
85193: LIST
85194: LIST
85195: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85196: LD_ADDR_VAR 0 20
85200: PUSH
85201: LD_INT 0
85203: PUSH
85204: LD_INT 0
85206: PUSH
85207: EMPTY
85208: LIST
85209: LIST
85210: PUSH
85211: LD_INT 0
85213: PUSH
85214: LD_INT 1
85216: NEG
85217: PUSH
85218: EMPTY
85219: LIST
85220: LIST
85221: PUSH
85222: LD_INT 1
85224: PUSH
85225: LD_INT 0
85227: PUSH
85228: EMPTY
85229: LIST
85230: LIST
85231: PUSH
85232: LD_INT 1
85234: PUSH
85235: LD_INT 1
85237: PUSH
85238: EMPTY
85239: LIST
85240: LIST
85241: PUSH
85242: LD_INT 0
85244: PUSH
85245: LD_INT 1
85247: PUSH
85248: EMPTY
85249: LIST
85250: LIST
85251: PUSH
85252: LD_INT 1
85254: NEG
85255: PUSH
85256: LD_INT 0
85258: PUSH
85259: EMPTY
85260: LIST
85261: LIST
85262: PUSH
85263: LD_INT 1
85265: NEG
85266: PUSH
85267: LD_INT 1
85269: NEG
85270: PUSH
85271: EMPTY
85272: LIST
85273: LIST
85274: PUSH
85275: LD_INT 1
85277: NEG
85278: PUSH
85279: LD_INT 2
85281: NEG
85282: PUSH
85283: EMPTY
85284: LIST
85285: LIST
85286: PUSH
85287: LD_INT 0
85289: PUSH
85290: LD_INT 2
85292: NEG
85293: PUSH
85294: EMPTY
85295: LIST
85296: LIST
85297: PUSH
85298: LD_INT 1
85300: PUSH
85301: LD_INT 1
85303: NEG
85304: PUSH
85305: EMPTY
85306: LIST
85307: LIST
85308: PUSH
85309: LD_INT 2
85311: PUSH
85312: LD_INT 0
85314: PUSH
85315: EMPTY
85316: LIST
85317: LIST
85318: PUSH
85319: LD_INT 2
85321: PUSH
85322: LD_INT 1
85324: PUSH
85325: EMPTY
85326: LIST
85327: LIST
85328: PUSH
85329: LD_INT 2
85331: PUSH
85332: LD_INT 2
85334: PUSH
85335: EMPTY
85336: LIST
85337: LIST
85338: PUSH
85339: LD_INT 1
85341: PUSH
85342: LD_INT 2
85344: PUSH
85345: EMPTY
85346: LIST
85347: LIST
85348: PUSH
85349: LD_INT 0
85351: PUSH
85352: LD_INT 2
85354: PUSH
85355: EMPTY
85356: LIST
85357: LIST
85358: PUSH
85359: LD_INT 1
85361: NEG
85362: PUSH
85363: LD_INT 1
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PUSH
85370: LD_INT 2
85372: NEG
85373: PUSH
85374: LD_INT 0
85376: PUSH
85377: EMPTY
85378: LIST
85379: LIST
85380: PUSH
85381: LD_INT 2
85383: NEG
85384: PUSH
85385: LD_INT 1
85387: NEG
85388: PUSH
85389: EMPTY
85390: LIST
85391: LIST
85392: PUSH
85393: LD_INT 2
85395: NEG
85396: PUSH
85397: LD_INT 2
85399: NEG
85400: PUSH
85401: EMPTY
85402: LIST
85403: LIST
85404: PUSH
85405: EMPTY
85406: LIST
85407: LIST
85408: LIST
85409: LIST
85410: LIST
85411: LIST
85412: LIST
85413: LIST
85414: LIST
85415: LIST
85416: LIST
85417: LIST
85418: LIST
85419: LIST
85420: LIST
85421: LIST
85422: LIST
85423: LIST
85424: LIST
85425: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85426: LD_ADDR_VAR 0 21
85430: PUSH
85431: LD_INT 0
85433: PUSH
85434: LD_INT 0
85436: PUSH
85437: EMPTY
85438: LIST
85439: LIST
85440: PUSH
85441: LD_INT 0
85443: PUSH
85444: LD_INT 1
85446: NEG
85447: PUSH
85448: EMPTY
85449: LIST
85450: LIST
85451: PUSH
85452: LD_INT 1
85454: PUSH
85455: LD_INT 0
85457: PUSH
85458: EMPTY
85459: LIST
85460: LIST
85461: PUSH
85462: LD_INT 1
85464: PUSH
85465: LD_INT 1
85467: PUSH
85468: EMPTY
85469: LIST
85470: LIST
85471: PUSH
85472: LD_INT 0
85474: PUSH
85475: LD_INT 1
85477: PUSH
85478: EMPTY
85479: LIST
85480: LIST
85481: PUSH
85482: LD_INT 1
85484: NEG
85485: PUSH
85486: LD_INT 0
85488: PUSH
85489: EMPTY
85490: LIST
85491: LIST
85492: PUSH
85493: LD_INT 1
85495: NEG
85496: PUSH
85497: LD_INT 1
85499: NEG
85500: PUSH
85501: EMPTY
85502: LIST
85503: LIST
85504: PUSH
85505: LD_INT 1
85507: NEG
85508: PUSH
85509: LD_INT 2
85511: NEG
85512: PUSH
85513: EMPTY
85514: LIST
85515: LIST
85516: PUSH
85517: LD_INT 0
85519: PUSH
85520: LD_INT 2
85522: NEG
85523: PUSH
85524: EMPTY
85525: LIST
85526: LIST
85527: PUSH
85528: LD_INT 1
85530: PUSH
85531: LD_INT 1
85533: NEG
85534: PUSH
85535: EMPTY
85536: LIST
85537: LIST
85538: PUSH
85539: LD_INT 2
85541: PUSH
85542: LD_INT 0
85544: PUSH
85545: EMPTY
85546: LIST
85547: LIST
85548: PUSH
85549: LD_INT 2
85551: PUSH
85552: LD_INT 1
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: PUSH
85559: LD_INT 2
85561: PUSH
85562: LD_INT 2
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PUSH
85569: LD_INT 1
85571: PUSH
85572: LD_INT 2
85574: PUSH
85575: EMPTY
85576: LIST
85577: LIST
85578: PUSH
85579: LD_INT 0
85581: PUSH
85582: LD_INT 2
85584: PUSH
85585: EMPTY
85586: LIST
85587: LIST
85588: PUSH
85589: LD_INT 1
85591: NEG
85592: PUSH
85593: LD_INT 1
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: PUSH
85600: LD_INT 2
85602: NEG
85603: PUSH
85604: LD_INT 0
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PUSH
85611: LD_INT 2
85613: NEG
85614: PUSH
85615: LD_INT 1
85617: NEG
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: PUSH
85623: LD_INT 2
85625: NEG
85626: PUSH
85627: LD_INT 2
85629: NEG
85630: PUSH
85631: EMPTY
85632: LIST
85633: LIST
85634: PUSH
85635: EMPTY
85636: LIST
85637: LIST
85638: LIST
85639: LIST
85640: LIST
85641: LIST
85642: LIST
85643: LIST
85644: LIST
85645: LIST
85646: LIST
85647: LIST
85648: LIST
85649: LIST
85650: LIST
85651: LIST
85652: LIST
85653: LIST
85654: LIST
85655: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85656: LD_ADDR_VAR 0 22
85660: PUSH
85661: LD_INT 0
85663: PUSH
85664: LD_INT 0
85666: PUSH
85667: EMPTY
85668: LIST
85669: LIST
85670: PUSH
85671: LD_INT 0
85673: PUSH
85674: LD_INT 1
85676: NEG
85677: PUSH
85678: EMPTY
85679: LIST
85680: LIST
85681: PUSH
85682: LD_INT 1
85684: PUSH
85685: LD_INT 0
85687: PUSH
85688: EMPTY
85689: LIST
85690: LIST
85691: PUSH
85692: LD_INT 1
85694: PUSH
85695: LD_INT 1
85697: PUSH
85698: EMPTY
85699: LIST
85700: LIST
85701: PUSH
85702: LD_INT 0
85704: PUSH
85705: LD_INT 1
85707: PUSH
85708: EMPTY
85709: LIST
85710: LIST
85711: PUSH
85712: LD_INT 1
85714: NEG
85715: PUSH
85716: LD_INT 0
85718: PUSH
85719: EMPTY
85720: LIST
85721: LIST
85722: PUSH
85723: LD_INT 1
85725: NEG
85726: PUSH
85727: LD_INT 1
85729: NEG
85730: PUSH
85731: EMPTY
85732: LIST
85733: LIST
85734: PUSH
85735: LD_INT 1
85737: NEG
85738: PUSH
85739: LD_INT 2
85741: NEG
85742: PUSH
85743: EMPTY
85744: LIST
85745: LIST
85746: PUSH
85747: LD_INT 0
85749: PUSH
85750: LD_INT 2
85752: NEG
85753: PUSH
85754: EMPTY
85755: LIST
85756: LIST
85757: PUSH
85758: LD_INT 1
85760: PUSH
85761: LD_INT 1
85763: NEG
85764: PUSH
85765: EMPTY
85766: LIST
85767: LIST
85768: PUSH
85769: LD_INT 2
85771: PUSH
85772: LD_INT 0
85774: PUSH
85775: EMPTY
85776: LIST
85777: LIST
85778: PUSH
85779: LD_INT 2
85781: PUSH
85782: LD_INT 1
85784: PUSH
85785: EMPTY
85786: LIST
85787: LIST
85788: PUSH
85789: LD_INT 2
85791: PUSH
85792: LD_INT 2
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: PUSH
85799: LD_INT 1
85801: PUSH
85802: LD_INT 2
85804: PUSH
85805: EMPTY
85806: LIST
85807: LIST
85808: PUSH
85809: LD_INT 0
85811: PUSH
85812: LD_INT 2
85814: PUSH
85815: EMPTY
85816: LIST
85817: LIST
85818: PUSH
85819: LD_INT 1
85821: NEG
85822: PUSH
85823: LD_INT 1
85825: PUSH
85826: EMPTY
85827: LIST
85828: LIST
85829: PUSH
85830: LD_INT 2
85832: NEG
85833: PUSH
85834: LD_INT 0
85836: PUSH
85837: EMPTY
85838: LIST
85839: LIST
85840: PUSH
85841: LD_INT 2
85843: NEG
85844: PUSH
85845: LD_INT 1
85847: NEG
85848: PUSH
85849: EMPTY
85850: LIST
85851: LIST
85852: PUSH
85853: LD_INT 2
85855: NEG
85856: PUSH
85857: LD_INT 2
85859: NEG
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: PUSH
85865: EMPTY
85866: LIST
85867: LIST
85868: LIST
85869: LIST
85870: LIST
85871: LIST
85872: LIST
85873: LIST
85874: LIST
85875: LIST
85876: LIST
85877: LIST
85878: LIST
85879: LIST
85880: LIST
85881: LIST
85882: LIST
85883: LIST
85884: LIST
85885: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
85886: LD_ADDR_VAR 0 23
85890: PUSH
85891: LD_INT 0
85893: PUSH
85894: LD_INT 0
85896: PUSH
85897: EMPTY
85898: LIST
85899: LIST
85900: PUSH
85901: LD_INT 0
85903: PUSH
85904: LD_INT 1
85906: NEG
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: PUSH
85912: LD_INT 1
85914: PUSH
85915: LD_INT 0
85917: PUSH
85918: EMPTY
85919: LIST
85920: LIST
85921: PUSH
85922: LD_INT 1
85924: PUSH
85925: LD_INT 1
85927: PUSH
85928: EMPTY
85929: LIST
85930: LIST
85931: PUSH
85932: LD_INT 0
85934: PUSH
85935: LD_INT 1
85937: PUSH
85938: EMPTY
85939: LIST
85940: LIST
85941: PUSH
85942: LD_INT 1
85944: NEG
85945: PUSH
85946: LD_INT 0
85948: PUSH
85949: EMPTY
85950: LIST
85951: LIST
85952: PUSH
85953: LD_INT 1
85955: NEG
85956: PUSH
85957: LD_INT 1
85959: NEG
85960: PUSH
85961: EMPTY
85962: LIST
85963: LIST
85964: PUSH
85965: LD_INT 1
85967: NEG
85968: PUSH
85969: LD_INT 2
85971: NEG
85972: PUSH
85973: EMPTY
85974: LIST
85975: LIST
85976: PUSH
85977: LD_INT 0
85979: PUSH
85980: LD_INT 2
85982: NEG
85983: PUSH
85984: EMPTY
85985: LIST
85986: LIST
85987: PUSH
85988: LD_INT 1
85990: PUSH
85991: LD_INT 1
85993: NEG
85994: PUSH
85995: EMPTY
85996: LIST
85997: LIST
85998: PUSH
85999: LD_INT 2
86001: PUSH
86002: LD_INT 0
86004: PUSH
86005: EMPTY
86006: LIST
86007: LIST
86008: PUSH
86009: LD_INT 2
86011: PUSH
86012: LD_INT 1
86014: PUSH
86015: EMPTY
86016: LIST
86017: LIST
86018: PUSH
86019: LD_INT 2
86021: PUSH
86022: LD_INT 2
86024: PUSH
86025: EMPTY
86026: LIST
86027: LIST
86028: PUSH
86029: LD_INT 1
86031: PUSH
86032: LD_INT 2
86034: PUSH
86035: EMPTY
86036: LIST
86037: LIST
86038: PUSH
86039: LD_INT 0
86041: PUSH
86042: LD_INT 2
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: PUSH
86049: LD_INT 1
86051: NEG
86052: PUSH
86053: LD_INT 1
86055: PUSH
86056: EMPTY
86057: LIST
86058: LIST
86059: PUSH
86060: LD_INT 2
86062: NEG
86063: PUSH
86064: LD_INT 0
86066: PUSH
86067: EMPTY
86068: LIST
86069: LIST
86070: PUSH
86071: LD_INT 2
86073: NEG
86074: PUSH
86075: LD_INT 1
86077: NEG
86078: PUSH
86079: EMPTY
86080: LIST
86081: LIST
86082: PUSH
86083: LD_INT 2
86085: NEG
86086: PUSH
86087: LD_INT 2
86089: NEG
86090: PUSH
86091: EMPTY
86092: LIST
86093: LIST
86094: PUSH
86095: LD_INT 2
86097: NEG
86098: PUSH
86099: LD_INT 3
86101: NEG
86102: PUSH
86103: EMPTY
86104: LIST
86105: LIST
86106: PUSH
86107: LD_INT 1
86109: NEG
86110: PUSH
86111: LD_INT 3
86113: NEG
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: PUSH
86119: LD_INT 1
86121: PUSH
86122: LD_INT 2
86124: NEG
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: PUSH
86130: LD_INT 2
86132: PUSH
86133: LD_INT 1
86135: NEG
86136: PUSH
86137: EMPTY
86138: LIST
86139: LIST
86140: PUSH
86141: EMPTY
86142: LIST
86143: LIST
86144: LIST
86145: LIST
86146: LIST
86147: LIST
86148: LIST
86149: LIST
86150: LIST
86151: LIST
86152: LIST
86153: LIST
86154: LIST
86155: LIST
86156: LIST
86157: LIST
86158: LIST
86159: LIST
86160: LIST
86161: LIST
86162: LIST
86163: LIST
86164: LIST
86165: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
86166: LD_ADDR_VAR 0 24
86170: PUSH
86171: LD_INT 0
86173: PUSH
86174: LD_INT 0
86176: PUSH
86177: EMPTY
86178: LIST
86179: LIST
86180: PUSH
86181: LD_INT 0
86183: PUSH
86184: LD_INT 1
86186: NEG
86187: PUSH
86188: EMPTY
86189: LIST
86190: LIST
86191: PUSH
86192: LD_INT 1
86194: PUSH
86195: LD_INT 0
86197: PUSH
86198: EMPTY
86199: LIST
86200: LIST
86201: PUSH
86202: LD_INT 1
86204: PUSH
86205: LD_INT 1
86207: PUSH
86208: EMPTY
86209: LIST
86210: LIST
86211: PUSH
86212: LD_INT 0
86214: PUSH
86215: LD_INT 1
86217: PUSH
86218: EMPTY
86219: LIST
86220: LIST
86221: PUSH
86222: LD_INT 1
86224: NEG
86225: PUSH
86226: LD_INT 0
86228: PUSH
86229: EMPTY
86230: LIST
86231: LIST
86232: PUSH
86233: LD_INT 1
86235: NEG
86236: PUSH
86237: LD_INT 1
86239: NEG
86240: PUSH
86241: EMPTY
86242: LIST
86243: LIST
86244: PUSH
86245: LD_INT 1
86247: NEG
86248: PUSH
86249: LD_INT 2
86251: NEG
86252: PUSH
86253: EMPTY
86254: LIST
86255: LIST
86256: PUSH
86257: LD_INT 0
86259: PUSH
86260: LD_INT 2
86262: NEG
86263: PUSH
86264: EMPTY
86265: LIST
86266: LIST
86267: PUSH
86268: LD_INT 1
86270: PUSH
86271: LD_INT 1
86273: NEG
86274: PUSH
86275: EMPTY
86276: LIST
86277: LIST
86278: PUSH
86279: LD_INT 2
86281: PUSH
86282: LD_INT 0
86284: PUSH
86285: EMPTY
86286: LIST
86287: LIST
86288: PUSH
86289: LD_INT 2
86291: PUSH
86292: LD_INT 1
86294: PUSH
86295: EMPTY
86296: LIST
86297: LIST
86298: PUSH
86299: LD_INT 2
86301: PUSH
86302: LD_INT 2
86304: PUSH
86305: EMPTY
86306: LIST
86307: LIST
86308: PUSH
86309: LD_INT 1
86311: PUSH
86312: LD_INT 2
86314: PUSH
86315: EMPTY
86316: LIST
86317: LIST
86318: PUSH
86319: LD_INT 0
86321: PUSH
86322: LD_INT 2
86324: PUSH
86325: EMPTY
86326: LIST
86327: LIST
86328: PUSH
86329: LD_INT 1
86331: NEG
86332: PUSH
86333: LD_INT 1
86335: PUSH
86336: EMPTY
86337: LIST
86338: LIST
86339: PUSH
86340: LD_INT 2
86342: NEG
86343: PUSH
86344: LD_INT 0
86346: PUSH
86347: EMPTY
86348: LIST
86349: LIST
86350: PUSH
86351: LD_INT 2
86353: NEG
86354: PUSH
86355: LD_INT 1
86357: NEG
86358: PUSH
86359: EMPTY
86360: LIST
86361: LIST
86362: PUSH
86363: LD_INT 2
86365: NEG
86366: PUSH
86367: LD_INT 2
86369: NEG
86370: PUSH
86371: EMPTY
86372: LIST
86373: LIST
86374: PUSH
86375: LD_INT 1
86377: PUSH
86378: LD_INT 2
86380: NEG
86381: PUSH
86382: EMPTY
86383: LIST
86384: LIST
86385: PUSH
86386: LD_INT 2
86388: PUSH
86389: LD_INT 1
86391: NEG
86392: PUSH
86393: EMPTY
86394: LIST
86395: LIST
86396: PUSH
86397: LD_INT 3
86399: PUSH
86400: LD_INT 1
86402: PUSH
86403: EMPTY
86404: LIST
86405: LIST
86406: PUSH
86407: LD_INT 3
86409: PUSH
86410: LD_INT 2
86412: PUSH
86413: EMPTY
86414: LIST
86415: LIST
86416: PUSH
86417: EMPTY
86418: LIST
86419: LIST
86420: LIST
86421: LIST
86422: LIST
86423: LIST
86424: LIST
86425: LIST
86426: LIST
86427: LIST
86428: LIST
86429: LIST
86430: LIST
86431: LIST
86432: LIST
86433: LIST
86434: LIST
86435: LIST
86436: LIST
86437: LIST
86438: LIST
86439: LIST
86440: LIST
86441: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
86442: LD_ADDR_VAR 0 25
86446: PUSH
86447: LD_INT 0
86449: PUSH
86450: LD_INT 0
86452: PUSH
86453: EMPTY
86454: LIST
86455: LIST
86456: PUSH
86457: LD_INT 0
86459: PUSH
86460: LD_INT 1
86462: NEG
86463: PUSH
86464: EMPTY
86465: LIST
86466: LIST
86467: PUSH
86468: LD_INT 1
86470: PUSH
86471: LD_INT 0
86473: PUSH
86474: EMPTY
86475: LIST
86476: LIST
86477: PUSH
86478: LD_INT 1
86480: PUSH
86481: LD_INT 1
86483: PUSH
86484: EMPTY
86485: LIST
86486: LIST
86487: PUSH
86488: LD_INT 0
86490: PUSH
86491: LD_INT 1
86493: PUSH
86494: EMPTY
86495: LIST
86496: LIST
86497: PUSH
86498: LD_INT 1
86500: NEG
86501: PUSH
86502: LD_INT 0
86504: PUSH
86505: EMPTY
86506: LIST
86507: LIST
86508: PUSH
86509: LD_INT 1
86511: NEG
86512: PUSH
86513: LD_INT 1
86515: NEG
86516: PUSH
86517: EMPTY
86518: LIST
86519: LIST
86520: PUSH
86521: LD_INT 1
86523: NEG
86524: PUSH
86525: LD_INT 2
86527: NEG
86528: PUSH
86529: EMPTY
86530: LIST
86531: LIST
86532: PUSH
86533: LD_INT 0
86535: PUSH
86536: LD_INT 2
86538: NEG
86539: PUSH
86540: EMPTY
86541: LIST
86542: LIST
86543: PUSH
86544: LD_INT 1
86546: PUSH
86547: LD_INT 1
86549: NEG
86550: PUSH
86551: EMPTY
86552: LIST
86553: LIST
86554: PUSH
86555: LD_INT 2
86557: PUSH
86558: LD_INT 0
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: PUSH
86565: LD_INT 2
86567: PUSH
86568: LD_INT 1
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PUSH
86575: LD_INT 2
86577: PUSH
86578: LD_INT 2
86580: PUSH
86581: EMPTY
86582: LIST
86583: LIST
86584: PUSH
86585: LD_INT 1
86587: PUSH
86588: LD_INT 2
86590: PUSH
86591: EMPTY
86592: LIST
86593: LIST
86594: PUSH
86595: LD_INT 0
86597: PUSH
86598: LD_INT 2
86600: PUSH
86601: EMPTY
86602: LIST
86603: LIST
86604: PUSH
86605: LD_INT 1
86607: NEG
86608: PUSH
86609: LD_INT 1
86611: PUSH
86612: EMPTY
86613: LIST
86614: LIST
86615: PUSH
86616: LD_INT 2
86618: NEG
86619: PUSH
86620: LD_INT 0
86622: PUSH
86623: EMPTY
86624: LIST
86625: LIST
86626: PUSH
86627: LD_INT 2
86629: NEG
86630: PUSH
86631: LD_INT 1
86633: NEG
86634: PUSH
86635: EMPTY
86636: LIST
86637: LIST
86638: PUSH
86639: LD_INT 2
86641: NEG
86642: PUSH
86643: LD_INT 2
86645: NEG
86646: PUSH
86647: EMPTY
86648: LIST
86649: LIST
86650: PUSH
86651: LD_INT 3
86653: PUSH
86654: LD_INT 1
86656: PUSH
86657: EMPTY
86658: LIST
86659: LIST
86660: PUSH
86661: LD_INT 3
86663: PUSH
86664: LD_INT 2
86666: PUSH
86667: EMPTY
86668: LIST
86669: LIST
86670: PUSH
86671: LD_INT 2
86673: PUSH
86674: LD_INT 3
86676: PUSH
86677: EMPTY
86678: LIST
86679: LIST
86680: PUSH
86681: LD_INT 1
86683: PUSH
86684: LD_INT 3
86686: PUSH
86687: EMPTY
86688: LIST
86689: LIST
86690: PUSH
86691: EMPTY
86692: LIST
86693: LIST
86694: LIST
86695: LIST
86696: LIST
86697: LIST
86698: LIST
86699: LIST
86700: LIST
86701: LIST
86702: LIST
86703: LIST
86704: LIST
86705: LIST
86706: LIST
86707: LIST
86708: LIST
86709: LIST
86710: LIST
86711: LIST
86712: LIST
86713: LIST
86714: LIST
86715: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
86716: LD_ADDR_VAR 0 26
86720: PUSH
86721: LD_INT 0
86723: PUSH
86724: LD_INT 0
86726: PUSH
86727: EMPTY
86728: LIST
86729: LIST
86730: PUSH
86731: LD_INT 0
86733: PUSH
86734: LD_INT 1
86736: NEG
86737: PUSH
86738: EMPTY
86739: LIST
86740: LIST
86741: PUSH
86742: LD_INT 1
86744: PUSH
86745: LD_INT 0
86747: PUSH
86748: EMPTY
86749: LIST
86750: LIST
86751: PUSH
86752: LD_INT 1
86754: PUSH
86755: LD_INT 1
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PUSH
86762: LD_INT 0
86764: PUSH
86765: LD_INT 1
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: PUSH
86772: LD_INT 1
86774: NEG
86775: PUSH
86776: LD_INT 0
86778: PUSH
86779: EMPTY
86780: LIST
86781: LIST
86782: PUSH
86783: LD_INT 1
86785: NEG
86786: PUSH
86787: LD_INT 1
86789: NEG
86790: PUSH
86791: EMPTY
86792: LIST
86793: LIST
86794: PUSH
86795: LD_INT 1
86797: NEG
86798: PUSH
86799: LD_INT 2
86801: NEG
86802: PUSH
86803: EMPTY
86804: LIST
86805: LIST
86806: PUSH
86807: LD_INT 0
86809: PUSH
86810: LD_INT 2
86812: NEG
86813: PUSH
86814: EMPTY
86815: LIST
86816: LIST
86817: PUSH
86818: LD_INT 1
86820: PUSH
86821: LD_INT 1
86823: NEG
86824: PUSH
86825: EMPTY
86826: LIST
86827: LIST
86828: PUSH
86829: LD_INT 2
86831: PUSH
86832: LD_INT 0
86834: PUSH
86835: EMPTY
86836: LIST
86837: LIST
86838: PUSH
86839: LD_INT 2
86841: PUSH
86842: LD_INT 1
86844: PUSH
86845: EMPTY
86846: LIST
86847: LIST
86848: PUSH
86849: LD_INT 2
86851: PUSH
86852: LD_INT 2
86854: PUSH
86855: EMPTY
86856: LIST
86857: LIST
86858: PUSH
86859: LD_INT 1
86861: PUSH
86862: LD_INT 2
86864: PUSH
86865: EMPTY
86866: LIST
86867: LIST
86868: PUSH
86869: LD_INT 0
86871: PUSH
86872: LD_INT 2
86874: PUSH
86875: EMPTY
86876: LIST
86877: LIST
86878: PUSH
86879: LD_INT 1
86881: NEG
86882: PUSH
86883: LD_INT 1
86885: PUSH
86886: EMPTY
86887: LIST
86888: LIST
86889: PUSH
86890: LD_INT 2
86892: NEG
86893: PUSH
86894: LD_INT 0
86896: PUSH
86897: EMPTY
86898: LIST
86899: LIST
86900: PUSH
86901: LD_INT 2
86903: NEG
86904: PUSH
86905: LD_INT 1
86907: NEG
86908: PUSH
86909: EMPTY
86910: LIST
86911: LIST
86912: PUSH
86913: LD_INT 2
86915: NEG
86916: PUSH
86917: LD_INT 2
86919: NEG
86920: PUSH
86921: EMPTY
86922: LIST
86923: LIST
86924: PUSH
86925: LD_INT 2
86927: PUSH
86928: LD_INT 3
86930: PUSH
86931: EMPTY
86932: LIST
86933: LIST
86934: PUSH
86935: LD_INT 1
86937: PUSH
86938: LD_INT 3
86940: PUSH
86941: EMPTY
86942: LIST
86943: LIST
86944: PUSH
86945: LD_INT 1
86947: NEG
86948: PUSH
86949: LD_INT 2
86951: PUSH
86952: EMPTY
86953: LIST
86954: LIST
86955: PUSH
86956: LD_INT 2
86958: NEG
86959: PUSH
86960: LD_INT 1
86962: PUSH
86963: EMPTY
86964: LIST
86965: LIST
86966: PUSH
86967: EMPTY
86968: LIST
86969: LIST
86970: LIST
86971: LIST
86972: LIST
86973: LIST
86974: LIST
86975: LIST
86976: LIST
86977: LIST
86978: LIST
86979: LIST
86980: LIST
86981: LIST
86982: LIST
86983: LIST
86984: LIST
86985: LIST
86986: LIST
86987: LIST
86988: LIST
86989: LIST
86990: LIST
86991: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
86992: LD_ADDR_VAR 0 27
86996: PUSH
86997: LD_INT 0
86999: PUSH
87000: LD_INT 0
87002: PUSH
87003: EMPTY
87004: LIST
87005: LIST
87006: PUSH
87007: LD_INT 0
87009: PUSH
87010: LD_INT 1
87012: NEG
87013: PUSH
87014: EMPTY
87015: LIST
87016: LIST
87017: PUSH
87018: LD_INT 1
87020: PUSH
87021: LD_INT 0
87023: PUSH
87024: EMPTY
87025: LIST
87026: LIST
87027: PUSH
87028: LD_INT 1
87030: PUSH
87031: LD_INT 1
87033: PUSH
87034: EMPTY
87035: LIST
87036: LIST
87037: PUSH
87038: LD_INT 0
87040: PUSH
87041: LD_INT 1
87043: PUSH
87044: EMPTY
87045: LIST
87046: LIST
87047: PUSH
87048: LD_INT 1
87050: NEG
87051: PUSH
87052: LD_INT 0
87054: PUSH
87055: EMPTY
87056: LIST
87057: LIST
87058: PUSH
87059: LD_INT 1
87061: NEG
87062: PUSH
87063: LD_INT 1
87065: NEG
87066: PUSH
87067: EMPTY
87068: LIST
87069: LIST
87070: PUSH
87071: LD_INT 1
87073: NEG
87074: PUSH
87075: LD_INT 2
87077: NEG
87078: PUSH
87079: EMPTY
87080: LIST
87081: LIST
87082: PUSH
87083: LD_INT 0
87085: PUSH
87086: LD_INT 2
87088: NEG
87089: PUSH
87090: EMPTY
87091: LIST
87092: LIST
87093: PUSH
87094: LD_INT 1
87096: PUSH
87097: LD_INT 1
87099: NEG
87100: PUSH
87101: EMPTY
87102: LIST
87103: LIST
87104: PUSH
87105: LD_INT 2
87107: PUSH
87108: LD_INT 0
87110: PUSH
87111: EMPTY
87112: LIST
87113: LIST
87114: PUSH
87115: LD_INT 2
87117: PUSH
87118: LD_INT 1
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 2
87127: PUSH
87128: LD_INT 2
87130: PUSH
87131: EMPTY
87132: LIST
87133: LIST
87134: PUSH
87135: LD_INT 1
87137: PUSH
87138: LD_INT 2
87140: PUSH
87141: EMPTY
87142: LIST
87143: LIST
87144: PUSH
87145: LD_INT 0
87147: PUSH
87148: LD_INT 2
87150: PUSH
87151: EMPTY
87152: LIST
87153: LIST
87154: PUSH
87155: LD_INT 1
87157: NEG
87158: PUSH
87159: LD_INT 1
87161: PUSH
87162: EMPTY
87163: LIST
87164: LIST
87165: PUSH
87166: LD_INT 2
87168: NEG
87169: PUSH
87170: LD_INT 0
87172: PUSH
87173: EMPTY
87174: LIST
87175: LIST
87176: PUSH
87177: LD_INT 2
87179: NEG
87180: PUSH
87181: LD_INT 1
87183: NEG
87184: PUSH
87185: EMPTY
87186: LIST
87187: LIST
87188: PUSH
87189: LD_INT 2
87191: NEG
87192: PUSH
87193: LD_INT 2
87195: NEG
87196: PUSH
87197: EMPTY
87198: LIST
87199: LIST
87200: PUSH
87201: LD_INT 1
87203: NEG
87204: PUSH
87205: LD_INT 2
87207: PUSH
87208: EMPTY
87209: LIST
87210: LIST
87211: PUSH
87212: LD_INT 2
87214: NEG
87215: PUSH
87216: LD_INT 1
87218: PUSH
87219: EMPTY
87220: LIST
87221: LIST
87222: PUSH
87223: LD_INT 3
87225: NEG
87226: PUSH
87227: LD_INT 1
87229: NEG
87230: PUSH
87231: EMPTY
87232: LIST
87233: LIST
87234: PUSH
87235: LD_INT 3
87237: NEG
87238: PUSH
87239: LD_INT 2
87241: NEG
87242: PUSH
87243: EMPTY
87244: LIST
87245: LIST
87246: PUSH
87247: EMPTY
87248: LIST
87249: LIST
87250: LIST
87251: LIST
87252: LIST
87253: LIST
87254: LIST
87255: LIST
87256: LIST
87257: LIST
87258: LIST
87259: LIST
87260: LIST
87261: LIST
87262: LIST
87263: LIST
87264: LIST
87265: LIST
87266: LIST
87267: LIST
87268: LIST
87269: LIST
87270: LIST
87271: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
87272: LD_ADDR_VAR 0 28
87276: PUSH
87277: LD_INT 0
87279: PUSH
87280: LD_INT 0
87282: PUSH
87283: EMPTY
87284: LIST
87285: LIST
87286: PUSH
87287: LD_INT 0
87289: PUSH
87290: LD_INT 1
87292: NEG
87293: PUSH
87294: EMPTY
87295: LIST
87296: LIST
87297: PUSH
87298: LD_INT 1
87300: PUSH
87301: LD_INT 0
87303: PUSH
87304: EMPTY
87305: LIST
87306: LIST
87307: PUSH
87308: LD_INT 1
87310: PUSH
87311: LD_INT 1
87313: PUSH
87314: EMPTY
87315: LIST
87316: LIST
87317: PUSH
87318: LD_INT 0
87320: PUSH
87321: LD_INT 1
87323: PUSH
87324: EMPTY
87325: LIST
87326: LIST
87327: PUSH
87328: LD_INT 1
87330: NEG
87331: PUSH
87332: LD_INT 0
87334: PUSH
87335: EMPTY
87336: LIST
87337: LIST
87338: PUSH
87339: LD_INT 1
87341: NEG
87342: PUSH
87343: LD_INT 1
87345: NEG
87346: PUSH
87347: EMPTY
87348: LIST
87349: LIST
87350: PUSH
87351: LD_INT 1
87353: NEG
87354: PUSH
87355: LD_INT 2
87357: NEG
87358: PUSH
87359: EMPTY
87360: LIST
87361: LIST
87362: PUSH
87363: LD_INT 0
87365: PUSH
87366: LD_INT 2
87368: NEG
87369: PUSH
87370: EMPTY
87371: LIST
87372: LIST
87373: PUSH
87374: LD_INT 1
87376: PUSH
87377: LD_INT 1
87379: NEG
87380: PUSH
87381: EMPTY
87382: LIST
87383: LIST
87384: PUSH
87385: LD_INT 2
87387: PUSH
87388: LD_INT 0
87390: PUSH
87391: EMPTY
87392: LIST
87393: LIST
87394: PUSH
87395: LD_INT 2
87397: PUSH
87398: LD_INT 1
87400: PUSH
87401: EMPTY
87402: LIST
87403: LIST
87404: PUSH
87405: LD_INT 2
87407: PUSH
87408: LD_INT 2
87410: PUSH
87411: EMPTY
87412: LIST
87413: LIST
87414: PUSH
87415: LD_INT 1
87417: PUSH
87418: LD_INT 2
87420: PUSH
87421: EMPTY
87422: LIST
87423: LIST
87424: PUSH
87425: LD_INT 0
87427: PUSH
87428: LD_INT 2
87430: PUSH
87431: EMPTY
87432: LIST
87433: LIST
87434: PUSH
87435: LD_INT 1
87437: NEG
87438: PUSH
87439: LD_INT 1
87441: PUSH
87442: EMPTY
87443: LIST
87444: LIST
87445: PUSH
87446: LD_INT 2
87448: NEG
87449: PUSH
87450: LD_INT 0
87452: PUSH
87453: EMPTY
87454: LIST
87455: LIST
87456: PUSH
87457: LD_INT 2
87459: NEG
87460: PUSH
87461: LD_INT 1
87463: NEG
87464: PUSH
87465: EMPTY
87466: LIST
87467: LIST
87468: PUSH
87469: LD_INT 2
87471: NEG
87472: PUSH
87473: LD_INT 2
87475: NEG
87476: PUSH
87477: EMPTY
87478: LIST
87479: LIST
87480: PUSH
87481: LD_INT 2
87483: NEG
87484: PUSH
87485: LD_INT 3
87487: NEG
87488: PUSH
87489: EMPTY
87490: LIST
87491: LIST
87492: PUSH
87493: LD_INT 1
87495: NEG
87496: PUSH
87497: LD_INT 3
87499: NEG
87500: PUSH
87501: EMPTY
87502: LIST
87503: LIST
87504: PUSH
87505: LD_INT 3
87507: NEG
87508: PUSH
87509: LD_INT 1
87511: NEG
87512: PUSH
87513: EMPTY
87514: LIST
87515: LIST
87516: PUSH
87517: LD_INT 3
87519: NEG
87520: PUSH
87521: LD_INT 2
87523: NEG
87524: PUSH
87525: EMPTY
87526: LIST
87527: LIST
87528: PUSH
87529: EMPTY
87530: LIST
87531: LIST
87532: LIST
87533: LIST
87534: LIST
87535: LIST
87536: LIST
87537: LIST
87538: LIST
87539: LIST
87540: LIST
87541: LIST
87542: LIST
87543: LIST
87544: LIST
87545: LIST
87546: LIST
87547: LIST
87548: LIST
87549: LIST
87550: LIST
87551: LIST
87552: LIST
87553: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
87554: LD_ADDR_VAR 0 29
87558: PUSH
87559: LD_INT 0
87561: PUSH
87562: LD_INT 0
87564: PUSH
87565: EMPTY
87566: LIST
87567: LIST
87568: PUSH
87569: LD_INT 0
87571: PUSH
87572: LD_INT 1
87574: NEG
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: LD_INT 1
87582: PUSH
87583: LD_INT 0
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PUSH
87590: LD_INT 1
87592: PUSH
87593: LD_INT 1
87595: PUSH
87596: EMPTY
87597: LIST
87598: LIST
87599: PUSH
87600: LD_INT 0
87602: PUSH
87603: LD_INT 1
87605: PUSH
87606: EMPTY
87607: LIST
87608: LIST
87609: PUSH
87610: LD_INT 1
87612: NEG
87613: PUSH
87614: LD_INT 0
87616: PUSH
87617: EMPTY
87618: LIST
87619: LIST
87620: PUSH
87621: LD_INT 1
87623: NEG
87624: PUSH
87625: LD_INT 1
87627: NEG
87628: PUSH
87629: EMPTY
87630: LIST
87631: LIST
87632: PUSH
87633: LD_INT 1
87635: NEG
87636: PUSH
87637: LD_INT 2
87639: NEG
87640: PUSH
87641: EMPTY
87642: LIST
87643: LIST
87644: PUSH
87645: LD_INT 0
87647: PUSH
87648: LD_INT 2
87650: NEG
87651: PUSH
87652: EMPTY
87653: LIST
87654: LIST
87655: PUSH
87656: LD_INT 1
87658: PUSH
87659: LD_INT 1
87661: NEG
87662: PUSH
87663: EMPTY
87664: LIST
87665: LIST
87666: PUSH
87667: LD_INT 2
87669: PUSH
87670: LD_INT 0
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: LD_INT 2
87679: PUSH
87680: LD_INT 1
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: LD_INT 1
87689: PUSH
87690: LD_INT 2
87692: PUSH
87693: EMPTY
87694: LIST
87695: LIST
87696: PUSH
87697: LD_INT 0
87699: PUSH
87700: LD_INT 2
87702: PUSH
87703: EMPTY
87704: LIST
87705: LIST
87706: PUSH
87707: LD_INT 1
87709: NEG
87710: PUSH
87711: LD_INT 1
87713: PUSH
87714: EMPTY
87715: LIST
87716: LIST
87717: PUSH
87718: LD_INT 2
87720: NEG
87721: PUSH
87722: LD_INT 1
87724: NEG
87725: PUSH
87726: EMPTY
87727: LIST
87728: LIST
87729: PUSH
87730: LD_INT 2
87732: NEG
87733: PUSH
87734: LD_INT 2
87736: NEG
87737: PUSH
87738: EMPTY
87739: LIST
87740: LIST
87741: PUSH
87742: LD_INT 2
87744: NEG
87745: PUSH
87746: LD_INT 3
87748: NEG
87749: PUSH
87750: EMPTY
87751: LIST
87752: LIST
87753: PUSH
87754: LD_INT 2
87756: PUSH
87757: LD_INT 1
87759: NEG
87760: PUSH
87761: EMPTY
87762: LIST
87763: LIST
87764: PUSH
87765: LD_INT 3
87767: PUSH
87768: LD_INT 1
87770: PUSH
87771: EMPTY
87772: LIST
87773: LIST
87774: PUSH
87775: LD_INT 1
87777: PUSH
87778: LD_INT 3
87780: PUSH
87781: EMPTY
87782: LIST
87783: LIST
87784: PUSH
87785: LD_INT 1
87787: NEG
87788: PUSH
87789: LD_INT 2
87791: PUSH
87792: EMPTY
87793: LIST
87794: LIST
87795: PUSH
87796: LD_INT 3
87798: NEG
87799: PUSH
87800: LD_INT 2
87802: NEG
87803: PUSH
87804: EMPTY
87805: LIST
87806: LIST
87807: PUSH
87808: EMPTY
87809: LIST
87810: LIST
87811: LIST
87812: LIST
87813: LIST
87814: LIST
87815: LIST
87816: LIST
87817: LIST
87818: LIST
87819: LIST
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: LIST
87826: LIST
87827: LIST
87828: LIST
87829: LIST
87830: LIST
87831: LIST
87832: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
87833: LD_ADDR_VAR 0 30
87837: PUSH
87838: LD_INT 0
87840: PUSH
87841: LD_INT 0
87843: PUSH
87844: EMPTY
87845: LIST
87846: LIST
87847: PUSH
87848: LD_INT 0
87850: PUSH
87851: LD_INT 1
87853: NEG
87854: PUSH
87855: EMPTY
87856: LIST
87857: LIST
87858: PUSH
87859: LD_INT 1
87861: PUSH
87862: LD_INT 0
87864: PUSH
87865: EMPTY
87866: LIST
87867: LIST
87868: PUSH
87869: LD_INT 1
87871: PUSH
87872: LD_INT 1
87874: PUSH
87875: EMPTY
87876: LIST
87877: LIST
87878: PUSH
87879: LD_INT 0
87881: PUSH
87882: LD_INT 1
87884: PUSH
87885: EMPTY
87886: LIST
87887: LIST
87888: PUSH
87889: LD_INT 1
87891: NEG
87892: PUSH
87893: LD_INT 0
87895: PUSH
87896: EMPTY
87897: LIST
87898: LIST
87899: PUSH
87900: LD_INT 1
87902: NEG
87903: PUSH
87904: LD_INT 1
87906: NEG
87907: PUSH
87908: EMPTY
87909: LIST
87910: LIST
87911: PUSH
87912: LD_INT 1
87914: NEG
87915: PUSH
87916: LD_INT 2
87918: NEG
87919: PUSH
87920: EMPTY
87921: LIST
87922: LIST
87923: PUSH
87924: LD_INT 0
87926: PUSH
87927: LD_INT 2
87929: NEG
87930: PUSH
87931: EMPTY
87932: LIST
87933: LIST
87934: PUSH
87935: LD_INT 1
87937: PUSH
87938: LD_INT 1
87940: NEG
87941: PUSH
87942: EMPTY
87943: LIST
87944: LIST
87945: PUSH
87946: LD_INT 2
87948: PUSH
87949: LD_INT 0
87951: PUSH
87952: EMPTY
87953: LIST
87954: LIST
87955: PUSH
87956: LD_INT 2
87958: PUSH
87959: LD_INT 1
87961: PUSH
87962: EMPTY
87963: LIST
87964: LIST
87965: PUSH
87966: LD_INT 2
87968: PUSH
87969: LD_INT 2
87971: PUSH
87972: EMPTY
87973: LIST
87974: LIST
87975: PUSH
87976: LD_INT 1
87978: PUSH
87979: LD_INT 2
87981: PUSH
87982: EMPTY
87983: LIST
87984: LIST
87985: PUSH
87986: LD_INT 1
87988: NEG
87989: PUSH
87990: LD_INT 1
87992: PUSH
87993: EMPTY
87994: LIST
87995: LIST
87996: PUSH
87997: LD_INT 2
87999: NEG
88000: PUSH
88001: LD_INT 0
88003: PUSH
88004: EMPTY
88005: LIST
88006: LIST
88007: PUSH
88008: LD_INT 2
88010: NEG
88011: PUSH
88012: LD_INT 1
88014: NEG
88015: PUSH
88016: EMPTY
88017: LIST
88018: LIST
88019: PUSH
88020: LD_INT 1
88022: NEG
88023: PUSH
88024: LD_INT 3
88026: NEG
88027: PUSH
88028: EMPTY
88029: LIST
88030: LIST
88031: PUSH
88032: LD_INT 1
88034: PUSH
88035: LD_INT 2
88037: NEG
88038: PUSH
88039: EMPTY
88040: LIST
88041: LIST
88042: PUSH
88043: LD_INT 3
88045: PUSH
88046: LD_INT 2
88048: PUSH
88049: EMPTY
88050: LIST
88051: LIST
88052: PUSH
88053: LD_INT 2
88055: PUSH
88056: LD_INT 3
88058: PUSH
88059: EMPTY
88060: LIST
88061: LIST
88062: PUSH
88063: LD_INT 2
88065: NEG
88066: PUSH
88067: LD_INT 1
88069: PUSH
88070: EMPTY
88071: LIST
88072: LIST
88073: PUSH
88074: LD_INT 3
88076: NEG
88077: PUSH
88078: LD_INT 1
88080: NEG
88081: PUSH
88082: EMPTY
88083: LIST
88084: LIST
88085: PUSH
88086: EMPTY
88087: LIST
88088: LIST
88089: LIST
88090: LIST
88091: LIST
88092: LIST
88093: LIST
88094: LIST
88095: LIST
88096: LIST
88097: LIST
88098: LIST
88099: LIST
88100: LIST
88101: LIST
88102: LIST
88103: LIST
88104: LIST
88105: LIST
88106: LIST
88107: LIST
88108: LIST
88109: LIST
88110: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
88111: LD_ADDR_VAR 0 31
88115: PUSH
88116: LD_INT 0
88118: PUSH
88119: LD_INT 0
88121: PUSH
88122: EMPTY
88123: LIST
88124: LIST
88125: PUSH
88126: LD_INT 0
88128: PUSH
88129: LD_INT 1
88131: NEG
88132: PUSH
88133: EMPTY
88134: LIST
88135: LIST
88136: PUSH
88137: LD_INT 1
88139: PUSH
88140: LD_INT 0
88142: PUSH
88143: EMPTY
88144: LIST
88145: LIST
88146: PUSH
88147: LD_INT 1
88149: PUSH
88150: LD_INT 1
88152: PUSH
88153: EMPTY
88154: LIST
88155: LIST
88156: PUSH
88157: LD_INT 0
88159: PUSH
88160: LD_INT 1
88162: PUSH
88163: EMPTY
88164: LIST
88165: LIST
88166: PUSH
88167: LD_INT 1
88169: NEG
88170: PUSH
88171: LD_INT 0
88173: PUSH
88174: EMPTY
88175: LIST
88176: LIST
88177: PUSH
88178: LD_INT 1
88180: NEG
88181: PUSH
88182: LD_INT 1
88184: NEG
88185: PUSH
88186: EMPTY
88187: LIST
88188: LIST
88189: PUSH
88190: LD_INT 1
88192: NEG
88193: PUSH
88194: LD_INT 2
88196: NEG
88197: PUSH
88198: EMPTY
88199: LIST
88200: LIST
88201: PUSH
88202: LD_INT 1
88204: PUSH
88205: LD_INT 1
88207: NEG
88208: PUSH
88209: EMPTY
88210: LIST
88211: LIST
88212: PUSH
88213: LD_INT 2
88215: PUSH
88216: LD_INT 0
88218: PUSH
88219: EMPTY
88220: LIST
88221: LIST
88222: PUSH
88223: LD_INT 2
88225: PUSH
88226: LD_INT 1
88228: PUSH
88229: EMPTY
88230: LIST
88231: LIST
88232: PUSH
88233: LD_INT 2
88235: PUSH
88236: LD_INT 2
88238: PUSH
88239: EMPTY
88240: LIST
88241: LIST
88242: PUSH
88243: LD_INT 1
88245: PUSH
88246: LD_INT 2
88248: PUSH
88249: EMPTY
88250: LIST
88251: LIST
88252: PUSH
88253: LD_INT 0
88255: PUSH
88256: LD_INT 2
88258: PUSH
88259: EMPTY
88260: LIST
88261: LIST
88262: PUSH
88263: LD_INT 1
88265: NEG
88266: PUSH
88267: LD_INT 1
88269: PUSH
88270: EMPTY
88271: LIST
88272: LIST
88273: PUSH
88274: LD_INT 2
88276: NEG
88277: PUSH
88278: LD_INT 1
88280: NEG
88281: PUSH
88282: EMPTY
88283: LIST
88284: LIST
88285: PUSH
88286: LD_INT 2
88288: NEG
88289: PUSH
88290: LD_INT 2
88292: NEG
88293: PUSH
88294: EMPTY
88295: LIST
88296: LIST
88297: PUSH
88298: LD_INT 2
88300: NEG
88301: PUSH
88302: LD_INT 3
88304: NEG
88305: PUSH
88306: EMPTY
88307: LIST
88308: LIST
88309: PUSH
88310: LD_INT 2
88312: PUSH
88313: LD_INT 1
88315: NEG
88316: PUSH
88317: EMPTY
88318: LIST
88319: LIST
88320: PUSH
88321: LD_INT 3
88323: PUSH
88324: LD_INT 1
88326: PUSH
88327: EMPTY
88328: LIST
88329: LIST
88330: PUSH
88331: LD_INT 1
88333: PUSH
88334: LD_INT 3
88336: PUSH
88337: EMPTY
88338: LIST
88339: LIST
88340: PUSH
88341: LD_INT 1
88343: NEG
88344: PUSH
88345: LD_INT 2
88347: PUSH
88348: EMPTY
88349: LIST
88350: LIST
88351: PUSH
88352: LD_INT 3
88354: NEG
88355: PUSH
88356: LD_INT 2
88358: NEG
88359: PUSH
88360: EMPTY
88361: LIST
88362: LIST
88363: PUSH
88364: EMPTY
88365: LIST
88366: LIST
88367: LIST
88368: LIST
88369: LIST
88370: LIST
88371: LIST
88372: LIST
88373: LIST
88374: LIST
88375: LIST
88376: LIST
88377: LIST
88378: LIST
88379: LIST
88380: LIST
88381: LIST
88382: LIST
88383: LIST
88384: LIST
88385: LIST
88386: LIST
88387: LIST
88388: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
88389: LD_ADDR_VAR 0 32
88393: PUSH
88394: LD_INT 0
88396: PUSH
88397: LD_INT 0
88399: PUSH
88400: EMPTY
88401: LIST
88402: LIST
88403: PUSH
88404: LD_INT 0
88406: PUSH
88407: LD_INT 1
88409: NEG
88410: PUSH
88411: EMPTY
88412: LIST
88413: LIST
88414: PUSH
88415: LD_INT 1
88417: PUSH
88418: LD_INT 0
88420: PUSH
88421: EMPTY
88422: LIST
88423: LIST
88424: PUSH
88425: LD_INT 1
88427: PUSH
88428: LD_INT 1
88430: PUSH
88431: EMPTY
88432: LIST
88433: LIST
88434: PUSH
88435: LD_INT 0
88437: PUSH
88438: LD_INT 1
88440: PUSH
88441: EMPTY
88442: LIST
88443: LIST
88444: PUSH
88445: LD_INT 1
88447: NEG
88448: PUSH
88449: LD_INT 0
88451: PUSH
88452: EMPTY
88453: LIST
88454: LIST
88455: PUSH
88456: LD_INT 1
88458: NEG
88459: PUSH
88460: LD_INT 1
88462: NEG
88463: PUSH
88464: EMPTY
88465: LIST
88466: LIST
88467: PUSH
88468: LD_INT 1
88470: NEG
88471: PUSH
88472: LD_INT 2
88474: NEG
88475: PUSH
88476: EMPTY
88477: LIST
88478: LIST
88479: PUSH
88480: LD_INT 0
88482: PUSH
88483: LD_INT 2
88485: NEG
88486: PUSH
88487: EMPTY
88488: LIST
88489: LIST
88490: PUSH
88491: LD_INT 1
88493: PUSH
88494: LD_INT 1
88496: NEG
88497: PUSH
88498: EMPTY
88499: LIST
88500: LIST
88501: PUSH
88502: LD_INT 2
88504: PUSH
88505: LD_INT 1
88507: PUSH
88508: EMPTY
88509: LIST
88510: LIST
88511: PUSH
88512: LD_INT 2
88514: PUSH
88515: LD_INT 2
88517: PUSH
88518: EMPTY
88519: LIST
88520: LIST
88521: PUSH
88522: LD_INT 1
88524: PUSH
88525: LD_INT 2
88527: PUSH
88528: EMPTY
88529: LIST
88530: LIST
88531: PUSH
88532: LD_INT 0
88534: PUSH
88535: LD_INT 2
88537: PUSH
88538: EMPTY
88539: LIST
88540: LIST
88541: PUSH
88542: LD_INT 1
88544: NEG
88545: PUSH
88546: LD_INT 1
88548: PUSH
88549: EMPTY
88550: LIST
88551: LIST
88552: PUSH
88553: LD_INT 2
88555: NEG
88556: PUSH
88557: LD_INT 0
88559: PUSH
88560: EMPTY
88561: LIST
88562: LIST
88563: PUSH
88564: LD_INT 2
88566: NEG
88567: PUSH
88568: LD_INT 1
88570: NEG
88571: PUSH
88572: EMPTY
88573: LIST
88574: LIST
88575: PUSH
88576: LD_INT 1
88578: NEG
88579: PUSH
88580: LD_INT 3
88582: NEG
88583: PUSH
88584: EMPTY
88585: LIST
88586: LIST
88587: PUSH
88588: LD_INT 1
88590: PUSH
88591: LD_INT 2
88593: NEG
88594: PUSH
88595: EMPTY
88596: LIST
88597: LIST
88598: PUSH
88599: LD_INT 3
88601: PUSH
88602: LD_INT 2
88604: PUSH
88605: EMPTY
88606: LIST
88607: LIST
88608: PUSH
88609: LD_INT 2
88611: PUSH
88612: LD_INT 3
88614: PUSH
88615: EMPTY
88616: LIST
88617: LIST
88618: PUSH
88619: LD_INT 2
88621: NEG
88622: PUSH
88623: LD_INT 1
88625: PUSH
88626: EMPTY
88627: LIST
88628: LIST
88629: PUSH
88630: LD_INT 3
88632: NEG
88633: PUSH
88634: LD_INT 1
88636: NEG
88637: PUSH
88638: EMPTY
88639: LIST
88640: LIST
88641: PUSH
88642: EMPTY
88643: LIST
88644: LIST
88645: LIST
88646: LIST
88647: LIST
88648: LIST
88649: LIST
88650: LIST
88651: LIST
88652: LIST
88653: LIST
88654: LIST
88655: LIST
88656: LIST
88657: LIST
88658: LIST
88659: LIST
88660: LIST
88661: LIST
88662: LIST
88663: LIST
88664: LIST
88665: LIST
88666: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
88667: LD_ADDR_VAR 0 33
88671: PUSH
88672: LD_INT 0
88674: PUSH
88675: LD_INT 0
88677: PUSH
88678: EMPTY
88679: LIST
88680: LIST
88681: PUSH
88682: LD_INT 0
88684: PUSH
88685: LD_INT 1
88687: NEG
88688: PUSH
88689: EMPTY
88690: LIST
88691: LIST
88692: PUSH
88693: LD_INT 1
88695: PUSH
88696: LD_INT 0
88698: PUSH
88699: EMPTY
88700: LIST
88701: LIST
88702: PUSH
88703: LD_INT 1
88705: PUSH
88706: LD_INT 1
88708: PUSH
88709: EMPTY
88710: LIST
88711: LIST
88712: PUSH
88713: LD_INT 0
88715: PUSH
88716: LD_INT 1
88718: PUSH
88719: EMPTY
88720: LIST
88721: LIST
88722: PUSH
88723: LD_INT 1
88725: NEG
88726: PUSH
88727: LD_INT 0
88729: PUSH
88730: EMPTY
88731: LIST
88732: LIST
88733: PUSH
88734: LD_INT 1
88736: NEG
88737: PUSH
88738: LD_INT 1
88740: NEG
88741: PUSH
88742: EMPTY
88743: LIST
88744: LIST
88745: PUSH
88746: LD_INT 1
88748: NEG
88749: PUSH
88750: LD_INT 2
88752: NEG
88753: PUSH
88754: EMPTY
88755: LIST
88756: LIST
88757: PUSH
88758: LD_INT 1
88760: PUSH
88761: LD_INT 1
88763: NEG
88764: PUSH
88765: EMPTY
88766: LIST
88767: LIST
88768: PUSH
88769: LD_INT 2
88771: PUSH
88772: LD_INT 0
88774: PUSH
88775: EMPTY
88776: LIST
88777: LIST
88778: PUSH
88779: LD_INT 2
88781: PUSH
88782: LD_INT 1
88784: PUSH
88785: EMPTY
88786: LIST
88787: LIST
88788: PUSH
88789: LD_INT 1
88791: PUSH
88792: LD_INT 2
88794: PUSH
88795: EMPTY
88796: LIST
88797: LIST
88798: PUSH
88799: LD_INT 0
88801: PUSH
88802: LD_INT 2
88804: PUSH
88805: EMPTY
88806: LIST
88807: LIST
88808: PUSH
88809: LD_INT 1
88811: NEG
88812: PUSH
88813: LD_INT 1
88815: PUSH
88816: EMPTY
88817: LIST
88818: LIST
88819: PUSH
88820: LD_INT 2
88822: NEG
88823: PUSH
88824: LD_INT 0
88826: PUSH
88827: EMPTY
88828: LIST
88829: LIST
88830: PUSH
88831: LD_INT 2
88833: NEG
88834: PUSH
88835: LD_INT 1
88837: NEG
88838: PUSH
88839: EMPTY
88840: LIST
88841: LIST
88842: PUSH
88843: LD_INT 2
88845: NEG
88846: PUSH
88847: LD_INT 2
88849: NEG
88850: PUSH
88851: EMPTY
88852: LIST
88853: LIST
88854: PUSH
88855: LD_INT 2
88857: NEG
88858: PUSH
88859: LD_INT 3
88861: NEG
88862: PUSH
88863: EMPTY
88864: LIST
88865: LIST
88866: PUSH
88867: LD_INT 2
88869: PUSH
88870: LD_INT 1
88872: NEG
88873: PUSH
88874: EMPTY
88875: LIST
88876: LIST
88877: PUSH
88878: LD_INT 3
88880: PUSH
88881: LD_INT 1
88883: PUSH
88884: EMPTY
88885: LIST
88886: LIST
88887: PUSH
88888: LD_INT 1
88890: PUSH
88891: LD_INT 3
88893: PUSH
88894: EMPTY
88895: LIST
88896: LIST
88897: PUSH
88898: LD_INT 1
88900: NEG
88901: PUSH
88902: LD_INT 2
88904: PUSH
88905: EMPTY
88906: LIST
88907: LIST
88908: PUSH
88909: LD_INT 3
88911: NEG
88912: PUSH
88913: LD_INT 2
88915: NEG
88916: PUSH
88917: EMPTY
88918: LIST
88919: LIST
88920: PUSH
88921: EMPTY
88922: LIST
88923: LIST
88924: LIST
88925: LIST
88926: LIST
88927: LIST
88928: LIST
88929: LIST
88930: LIST
88931: LIST
88932: LIST
88933: LIST
88934: LIST
88935: LIST
88936: LIST
88937: LIST
88938: LIST
88939: LIST
88940: LIST
88941: LIST
88942: LIST
88943: LIST
88944: LIST
88945: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
88946: LD_ADDR_VAR 0 34
88950: PUSH
88951: LD_INT 0
88953: PUSH
88954: LD_INT 0
88956: PUSH
88957: EMPTY
88958: LIST
88959: LIST
88960: PUSH
88961: LD_INT 0
88963: PUSH
88964: LD_INT 1
88966: NEG
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: PUSH
88972: LD_INT 1
88974: PUSH
88975: LD_INT 0
88977: PUSH
88978: EMPTY
88979: LIST
88980: LIST
88981: PUSH
88982: LD_INT 1
88984: PUSH
88985: LD_INT 1
88987: PUSH
88988: EMPTY
88989: LIST
88990: LIST
88991: PUSH
88992: LD_INT 0
88994: PUSH
88995: LD_INT 1
88997: PUSH
88998: EMPTY
88999: LIST
89000: LIST
89001: PUSH
89002: LD_INT 1
89004: NEG
89005: PUSH
89006: LD_INT 0
89008: PUSH
89009: EMPTY
89010: LIST
89011: LIST
89012: PUSH
89013: LD_INT 1
89015: NEG
89016: PUSH
89017: LD_INT 1
89019: NEG
89020: PUSH
89021: EMPTY
89022: LIST
89023: LIST
89024: PUSH
89025: LD_INT 1
89027: NEG
89028: PUSH
89029: LD_INT 2
89031: NEG
89032: PUSH
89033: EMPTY
89034: LIST
89035: LIST
89036: PUSH
89037: LD_INT 0
89039: PUSH
89040: LD_INT 2
89042: NEG
89043: PUSH
89044: EMPTY
89045: LIST
89046: LIST
89047: PUSH
89048: LD_INT 1
89050: PUSH
89051: LD_INT 1
89053: NEG
89054: PUSH
89055: EMPTY
89056: LIST
89057: LIST
89058: PUSH
89059: LD_INT 2
89061: PUSH
89062: LD_INT 1
89064: PUSH
89065: EMPTY
89066: LIST
89067: LIST
89068: PUSH
89069: LD_INT 2
89071: PUSH
89072: LD_INT 2
89074: PUSH
89075: EMPTY
89076: LIST
89077: LIST
89078: PUSH
89079: LD_INT 1
89081: PUSH
89082: LD_INT 2
89084: PUSH
89085: EMPTY
89086: LIST
89087: LIST
89088: PUSH
89089: LD_INT 1
89091: NEG
89092: PUSH
89093: LD_INT 1
89095: PUSH
89096: EMPTY
89097: LIST
89098: LIST
89099: PUSH
89100: LD_INT 2
89102: NEG
89103: PUSH
89104: LD_INT 0
89106: PUSH
89107: EMPTY
89108: LIST
89109: LIST
89110: PUSH
89111: LD_INT 2
89113: NEG
89114: PUSH
89115: LD_INT 1
89117: NEG
89118: PUSH
89119: EMPTY
89120: LIST
89121: LIST
89122: PUSH
89123: LD_INT 2
89125: NEG
89126: PUSH
89127: LD_INT 2
89129: NEG
89130: PUSH
89131: EMPTY
89132: LIST
89133: LIST
89134: PUSH
89135: LD_INT 1
89137: NEG
89138: PUSH
89139: LD_INT 3
89141: NEG
89142: PUSH
89143: EMPTY
89144: LIST
89145: LIST
89146: PUSH
89147: LD_INT 1
89149: PUSH
89150: LD_INT 2
89152: NEG
89153: PUSH
89154: EMPTY
89155: LIST
89156: LIST
89157: PUSH
89158: LD_INT 3
89160: PUSH
89161: LD_INT 2
89163: PUSH
89164: EMPTY
89165: LIST
89166: LIST
89167: PUSH
89168: LD_INT 2
89170: PUSH
89171: LD_INT 3
89173: PUSH
89174: EMPTY
89175: LIST
89176: LIST
89177: PUSH
89178: LD_INT 2
89180: NEG
89181: PUSH
89182: LD_INT 1
89184: PUSH
89185: EMPTY
89186: LIST
89187: LIST
89188: PUSH
89189: LD_INT 3
89191: NEG
89192: PUSH
89193: LD_INT 1
89195: NEG
89196: PUSH
89197: EMPTY
89198: LIST
89199: LIST
89200: PUSH
89201: EMPTY
89202: LIST
89203: LIST
89204: LIST
89205: LIST
89206: LIST
89207: LIST
89208: LIST
89209: LIST
89210: LIST
89211: LIST
89212: LIST
89213: LIST
89214: LIST
89215: LIST
89216: LIST
89217: LIST
89218: LIST
89219: LIST
89220: LIST
89221: LIST
89222: LIST
89223: LIST
89224: LIST
89225: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
89226: LD_ADDR_VAR 0 35
89230: PUSH
89231: LD_INT 0
89233: PUSH
89234: LD_INT 0
89236: PUSH
89237: EMPTY
89238: LIST
89239: LIST
89240: PUSH
89241: LD_INT 0
89243: PUSH
89244: LD_INT 1
89246: NEG
89247: PUSH
89248: EMPTY
89249: LIST
89250: LIST
89251: PUSH
89252: LD_INT 1
89254: PUSH
89255: LD_INT 0
89257: PUSH
89258: EMPTY
89259: LIST
89260: LIST
89261: PUSH
89262: LD_INT 1
89264: PUSH
89265: LD_INT 1
89267: PUSH
89268: EMPTY
89269: LIST
89270: LIST
89271: PUSH
89272: LD_INT 0
89274: PUSH
89275: LD_INT 1
89277: PUSH
89278: EMPTY
89279: LIST
89280: LIST
89281: PUSH
89282: LD_INT 1
89284: NEG
89285: PUSH
89286: LD_INT 0
89288: PUSH
89289: EMPTY
89290: LIST
89291: LIST
89292: PUSH
89293: LD_INT 1
89295: NEG
89296: PUSH
89297: LD_INT 1
89299: NEG
89300: PUSH
89301: EMPTY
89302: LIST
89303: LIST
89304: PUSH
89305: LD_INT 2
89307: PUSH
89308: LD_INT 1
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: PUSH
89315: LD_INT 2
89317: NEG
89318: PUSH
89319: LD_INT 1
89321: NEG
89322: PUSH
89323: EMPTY
89324: LIST
89325: LIST
89326: PUSH
89327: EMPTY
89328: LIST
89329: LIST
89330: LIST
89331: LIST
89332: LIST
89333: LIST
89334: LIST
89335: LIST
89336: LIST
89337: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
89338: LD_ADDR_VAR 0 36
89342: PUSH
89343: LD_INT 0
89345: PUSH
89346: LD_INT 0
89348: PUSH
89349: EMPTY
89350: LIST
89351: LIST
89352: PUSH
89353: LD_INT 0
89355: PUSH
89356: LD_INT 1
89358: NEG
89359: PUSH
89360: EMPTY
89361: LIST
89362: LIST
89363: PUSH
89364: LD_INT 1
89366: PUSH
89367: LD_INT 0
89369: PUSH
89370: EMPTY
89371: LIST
89372: LIST
89373: PUSH
89374: LD_INT 1
89376: PUSH
89377: LD_INT 1
89379: PUSH
89380: EMPTY
89381: LIST
89382: LIST
89383: PUSH
89384: LD_INT 0
89386: PUSH
89387: LD_INT 1
89389: PUSH
89390: EMPTY
89391: LIST
89392: LIST
89393: PUSH
89394: LD_INT 1
89396: NEG
89397: PUSH
89398: LD_INT 0
89400: PUSH
89401: EMPTY
89402: LIST
89403: LIST
89404: PUSH
89405: LD_INT 1
89407: NEG
89408: PUSH
89409: LD_INT 1
89411: NEG
89412: PUSH
89413: EMPTY
89414: LIST
89415: LIST
89416: PUSH
89417: LD_INT 1
89419: NEG
89420: PUSH
89421: LD_INT 2
89423: NEG
89424: PUSH
89425: EMPTY
89426: LIST
89427: LIST
89428: PUSH
89429: LD_INT 1
89431: PUSH
89432: LD_INT 2
89434: PUSH
89435: EMPTY
89436: LIST
89437: LIST
89438: PUSH
89439: EMPTY
89440: LIST
89441: LIST
89442: LIST
89443: LIST
89444: LIST
89445: LIST
89446: LIST
89447: LIST
89448: LIST
89449: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
89450: LD_ADDR_VAR 0 37
89454: PUSH
89455: LD_INT 0
89457: PUSH
89458: LD_INT 0
89460: PUSH
89461: EMPTY
89462: LIST
89463: LIST
89464: PUSH
89465: LD_INT 0
89467: PUSH
89468: LD_INT 1
89470: NEG
89471: PUSH
89472: EMPTY
89473: LIST
89474: LIST
89475: PUSH
89476: LD_INT 1
89478: PUSH
89479: LD_INT 0
89481: PUSH
89482: EMPTY
89483: LIST
89484: LIST
89485: PUSH
89486: LD_INT 1
89488: PUSH
89489: LD_INT 1
89491: PUSH
89492: EMPTY
89493: LIST
89494: LIST
89495: PUSH
89496: LD_INT 0
89498: PUSH
89499: LD_INT 1
89501: PUSH
89502: EMPTY
89503: LIST
89504: LIST
89505: PUSH
89506: LD_INT 1
89508: NEG
89509: PUSH
89510: LD_INT 0
89512: PUSH
89513: EMPTY
89514: LIST
89515: LIST
89516: PUSH
89517: LD_INT 1
89519: NEG
89520: PUSH
89521: LD_INT 1
89523: NEG
89524: PUSH
89525: EMPTY
89526: LIST
89527: LIST
89528: PUSH
89529: LD_INT 1
89531: PUSH
89532: LD_INT 1
89534: NEG
89535: PUSH
89536: EMPTY
89537: LIST
89538: LIST
89539: PUSH
89540: LD_INT 1
89542: NEG
89543: PUSH
89544: LD_INT 1
89546: PUSH
89547: EMPTY
89548: LIST
89549: LIST
89550: PUSH
89551: EMPTY
89552: LIST
89553: LIST
89554: LIST
89555: LIST
89556: LIST
89557: LIST
89558: LIST
89559: LIST
89560: LIST
89561: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
89562: LD_ADDR_VAR 0 38
89566: PUSH
89567: LD_INT 0
89569: PUSH
89570: LD_INT 0
89572: PUSH
89573: EMPTY
89574: LIST
89575: LIST
89576: PUSH
89577: LD_INT 0
89579: PUSH
89580: LD_INT 1
89582: NEG
89583: PUSH
89584: EMPTY
89585: LIST
89586: LIST
89587: PUSH
89588: LD_INT 1
89590: PUSH
89591: LD_INT 0
89593: PUSH
89594: EMPTY
89595: LIST
89596: LIST
89597: PUSH
89598: LD_INT 1
89600: PUSH
89601: LD_INT 1
89603: PUSH
89604: EMPTY
89605: LIST
89606: LIST
89607: PUSH
89608: LD_INT 0
89610: PUSH
89611: LD_INT 1
89613: PUSH
89614: EMPTY
89615: LIST
89616: LIST
89617: PUSH
89618: LD_INT 1
89620: NEG
89621: PUSH
89622: LD_INT 0
89624: PUSH
89625: EMPTY
89626: LIST
89627: LIST
89628: PUSH
89629: LD_INT 1
89631: NEG
89632: PUSH
89633: LD_INT 1
89635: NEG
89636: PUSH
89637: EMPTY
89638: LIST
89639: LIST
89640: PUSH
89641: LD_INT 2
89643: PUSH
89644: LD_INT 1
89646: PUSH
89647: EMPTY
89648: LIST
89649: LIST
89650: PUSH
89651: LD_INT 2
89653: NEG
89654: PUSH
89655: LD_INT 1
89657: NEG
89658: PUSH
89659: EMPTY
89660: LIST
89661: LIST
89662: PUSH
89663: EMPTY
89664: LIST
89665: LIST
89666: LIST
89667: LIST
89668: LIST
89669: LIST
89670: LIST
89671: LIST
89672: LIST
89673: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
89674: LD_ADDR_VAR 0 39
89678: PUSH
89679: LD_INT 0
89681: PUSH
89682: LD_INT 0
89684: PUSH
89685: EMPTY
89686: LIST
89687: LIST
89688: PUSH
89689: LD_INT 0
89691: PUSH
89692: LD_INT 1
89694: NEG
89695: PUSH
89696: EMPTY
89697: LIST
89698: LIST
89699: PUSH
89700: LD_INT 1
89702: PUSH
89703: LD_INT 0
89705: PUSH
89706: EMPTY
89707: LIST
89708: LIST
89709: PUSH
89710: LD_INT 1
89712: PUSH
89713: LD_INT 1
89715: PUSH
89716: EMPTY
89717: LIST
89718: LIST
89719: PUSH
89720: LD_INT 0
89722: PUSH
89723: LD_INT 1
89725: PUSH
89726: EMPTY
89727: LIST
89728: LIST
89729: PUSH
89730: LD_INT 1
89732: NEG
89733: PUSH
89734: LD_INT 0
89736: PUSH
89737: EMPTY
89738: LIST
89739: LIST
89740: PUSH
89741: LD_INT 1
89743: NEG
89744: PUSH
89745: LD_INT 1
89747: NEG
89748: PUSH
89749: EMPTY
89750: LIST
89751: LIST
89752: PUSH
89753: LD_INT 1
89755: NEG
89756: PUSH
89757: LD_INT 2
89759: NEG
89760: PUSH
89761: EMPTY
89762: LIST
89763: LIST
89764: PUSH
89765: LD_INT 1
89767: PUSH
89768: LD_INT 2
89770: PUSH
89771: EMPTY
89772: LIST
89773: LIST
89774: PUSH
89775: EMPTY
89776: LIST
89777: LIST
89778: LIST
89779: LIST
89780: LIST
89781: LIST
89782: LIST
89783: LIST
89784: LIST
89785: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
89786: LD_ADDR_VAR 0 40
89790: PUSH
89791: LD_INT 0
89793: PUSH
89794: LD_INT 0
89796: PUSH
89797: EMPTY
89798: LIST
89799: LIST
89800: PUSH
89801: LD_INT 0
89803: PUSH
89804: LD_INT 1
89806: NEG
89807: PUSH
89808: EMPTY
89809: LIST
89810: LIST
89811: PUSH
89812: LD_INT 1
89814: PUSH
89815: LD_INT 0
89817: PUSH
89818: EMPTY
89819: LIST
89820: LIST
89821: PUSH
89822: LD_INT 1
89824: PUSH
89825: LD_INT 1
89827: PUSH
89828: EMPTY
89829: LIST
89830: LIST
89831: PUSH
89832: LD_INT 0
89834: PUSH
89835: LD_INT 1
89837: PUSH
89838: EMPTY
89839: LIST
89840: LIST
89841: PUSH
89842: LD_INT 1
89844: NEG
89845: PUSH
89846: LD_INT 0
89848: PUSH
89849: EMPTY
89850: LIST
89851: LIST
89852: PUSH
89853: LD_INT 1
89855: NEG
89856: PUSH
89857: LD_INT 1
89859: NEG
89860: PUSH
89861: EMPTY
89862: LIST
89863: LIST
89864: PUSH
89865: LD_INT 1
89867: PUSH
89868: LD_INT 1
89870: NEG
89871: PUSH
89872: EMPTY
89873: LIST
89874: LIST
89875: PUSH
89876: LD_INT 1
89878: NEG
89879: PUSH
89880: LD_INT 1
89882: PUSH
89883: EMPTY
89884: LIST
89885: LIST
89886: PUSH
89887: EMPTY
89888: LIST
89889: LIST
89890: LIST
89891: LIST
89892: LIST
89893: LIST
89894: LIST
89895: LIST
89896: LIST
89897: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
89898: LD_ADDR_VAR 0 41
89902: PUSH
89903: LD_INT 0
89905: PUSH
89906: LD_INT 0
89908: PUSH
89909: EMPTY
89910: LIST
89911: LIST
89912: PUSH
89913: LD_INT 0
89915: PUSH
89916: LD_INT 1
89918: NEG
89919: PUSH
89920: EMPTY
89921: LIST
89922: LIST
89923: PUSH
89924: LD_INT 1
89926: PUSH
89927: LD_INT 0
89929: PUSH
89930: EMPTY
89931: LIST
89932: LIST
89933: PUSH
89934: LD_INT 1
89936: PUSH
89937: LD_INT 1
89939: PUSH
89940: EMPTY
89941: LIST
89942: LIST
89943: PUSH
89944: LD_INT 0
89946: PUSH
89947: LD_INT 1
89949: PUSH
89950: EMPTY
89951: LIST
89952: LIST
89953: PUSH
89954: LD_INT 1
89956: NEG
89957: PUSH
89958: LD_INT 0
89960: PUSH
89961: EMPTY
89962: LIST
89963: LIST
89964: PUSH
89965: LD_INT 1
89967: NEG
89968: PUSH
89969: LD_INT 1
89971: NEG
89972: PUSH
89973: EMPTY
89974: LIST
89975: LIST
89976: PUSH
89977: LD_INT 1
89979: NEG
89980: PUSH
89981: LD_INT 2
89983: NEG
89984: PUSH
89985: EMPTY
89986: LIST
89987: LIST
89988: PUSH
89989: LD_INT 1
89991: PUSH
89992: LD_INT 1
89994: NEG
89995: PUSH
89996: EMPTY
89997: LIST
89998: LIST
89999: PUSH
90000: LD_INT 2
90002: PUSH
90003: LD_INT 0
90005: PUSH
90006: EMPTY
90007: LIST
90008: LIST
90009: PUSH
90010: LD_INT 2
90012: PUSH
90013: LD_INT 1
90015: PUSH
90016: EMPTY
90017: LIST
90018: LIST
90019: PUSH
90020: LD_INT 2
90022: PUSH
90023: LD_INT 2
90025: PUSH
90026: EMPTY
90027: LIST
90028: LIST
90029: PUSH
90030: LD_INT 1
90032: PUSH
90033: LD_INT 2
90035: PUSH
90036: EMPTY
90037: LIST
90038: LIST
90039: PUSH
90040: LD_INT 1
90042: NEG
90043: PUSH
90044: LD_INT 1
90046: PUSH
90047: EMPTY
90048: LIST
90049: LIST
90050: PUSH
90051: LD_INT 2
90053: NEG
90054: PUSH
90055: LD_INT 0
90057: PUSH
90058: EMPTY
90059: LIST
90060: LIST
90061: PUSH
90062: LD_INT 2
90064: NEG
90065: PUSH
90066: LD_INT 1
90068: NEG
90069: PUSH
90070: EMPTY
90071: LIST
90072: LIST
90073: PUSH
90074: LD_INT 2
90076: NEG
90077: PUSH
90078: LD_INT 2
90080: NEG
90081: PUSH
90082: EMPTY
90083: LIST
90084: LIST
90085: PUSH
90086: LD_INT 2
90088: NEG
90089: PUSH
90090: LD_INT 3
90092: NEG
90093: PUSH
90094: EMPTY
90095: LIST
90096: LIST
90097: PUSH
90098: LD_INT 2
90100: PUSH
90101: LD_INT 1
90103: NEG
90104: PUSH
90105: EMPTY
90106: LIST
90107: LIST
90108: PUSH
90109: LD_INT 3
90111: PUSH
90112: LD_INT 0
90114: PUSH
90115: EMPTY
90116: LIST
90117: LIST
90118: PUSH
90119: LD_INT 3
90121: PUSH
90122: LD_INT 1
90124: PUSH
90125: EMPTY
90126: LIST
90127: LIST
90128: PUSH
90129: LD_INT 3
90131: PUSH
90132: LD_INT 2
90134: PUSH
90135: EMPTY
90136: LIST
90137: LIST
90138: PUSH
90139: LD_INT 3
90141: PUSH
90142: LD_INT 3
90144: PUSH
90145: EMPTY
90146: LIST
90147: LIST
90148: PUSH
90149: LD_INT 2
90151: PUSH
90152: LD_INT 3
90154: PUSH
90155: EMPTY
90156: LIST
90157: LIST
90158: PUSH
90159: LD_INT 2
90161: NEG
90162: PUSH
90163: LD_INT 1
90165: PUSH
90166: EMPTY
90167: LIST
90168: LIST
90169: PUSH
90170: LD_INT 3
90172: NEG
90173: PUSH
90174: LD_INT 0
90176: PUSH
90177: EMPTY
90178: LIST
90179: LIST
90180: PUSH
90181: LD_INT 3
90183: NEG
90184: PUSH
90185: LD_INT 1
90187: NEG
90188: PUSH
90189: EMPTY
90190: LIST
90191: LIST
90192: PUSH
90193: LD_INT 3
90195: NEG
90196: PUSH
90197: LD_INT 2
90199: NEG
90200: PUSH
90201: EMPTY
90202: LIST
90203: LIST
90204: PUSH
90205: LD_INT 3
90207: NEG
90208: PUSH
90209: LD_INT 3
90211: NEG
90212: PUSH
90213: EMPTY
90214: LIST
90215: LIST
90216: PUSH
90217: EMPTY
90218: LIST
90219: LIST
90220: LIST
90221: LIST
90222: LIST
90223: LIST
90224: LIST
90225: LIST
90226: LIST
90227: LIST
90228: LIST
90229: LIST
90230: LIST
90231: LIST
90232: LIST
90233: LIST
90234: LIST
90235: LIST
90236: LIST
90237: LIST
90238: LIST
90239: LIST
90240: LIST
90241: LIST
90242: LIST
90243: LIST
90244: LIST
90245: LIST
90246: LIST
90247: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
90248: LD_ADDR_VAR 0 42
90252: PUSH
90253: LD_INT 0
90255: PUSH
90256: LD_INT 0
90258: PUSH
90259: EMPTY
90260: LIST
90261: LIST
90262: PUSH
90263: LD_INT 0
90265: PUSH
90266: LD_INT 1
90268: NEG
90269: PUSH
90270: EMPTY
90271: LIST
90272: LIST
90273: PUSH
90274: LD_INT 1
90276: PUSH
90277: LD_INT 0
90279: PUSH
90280: EMPTY
90281: LIST
90282: LIST
90283: PUSH
90284: LD_INT 1
90286: PUSH
90287: LD_INT 1
90289: PUSH
90290: EMPTY
90291: LIST
90292: LIST
90293: PUSH
90294: LD_INT 0
90296: PUSH
90297: LD_INT 1
90299: PUSH
90300: EMPTY
90301: LIST
90302: LIST
90303: PUSH
90304: LD_INT 1
90306: NEG
90307: PUSH
90308: LD_INT 0
90310: PUSH
90311: EMPTY
90312: LIST
90313: LIST
90314: PUSH
90315: LD_INT 1
90317: NEG
90318: PUSH
90319: LD_INT 1
90321: NEG
90322: PUSH
90323: EMPTY
90324: LIST
90325: LIST
90326: PUSH
90327: LD_INT 1
90329: NEG
90330: PUSH
90331: LD_INT 2
90333: NEG
90334: PUSH
90335: EMPTY
90336: LIST
90337: LIST
90338: PUSH
90339: LD_INT 0
90341: PUSH
90342: LD_INT 2
90344: NEG
90345: PUSH
90346: EMPTY
90347: LIST
90348: LIST
90349: PUSH
90350: LD_INT 1
90352: PUSH
90353: LD_INT 1
90355: NEG
90356: PUSH
90357: EMPTY
90358: LIST
90359: LIST
90360: PUSH
90361: LD_INT 2
90363: PUSH
90364: LD_INT 1
90366: PUSH
90367: EMPTY
90368: LIST
90369: LIST
90370: PUSH
90371: LD_INT 2
90373: PUSH
90374: LD_INT 2
90376: PUSH
90377: EMPTY
90378: LIST
90379: LIST
90380: PUSH
90381: LD_INT 1
90383: PUSH
90384: LD_INT 2
90386: PUSH
90387: EMPTY
90388: LIST
90389: LIST
90390: PUSH
90391: LD_INT 0
90393: PUSH
90394: LD_INT 2
90396: PUSH
90397: EMPTY
90398: LIST
90399: LIST
90400: PUSH
90401: LD_INT 1
90403: NEG
90404: PUSH
90405: LD_INT 1
90407: PUSH
90408: EMPTY
90409: LIST
90410: LIST
90411: PUSH
90412: LD_INT 2
90414: NEG
90415: PUSH
90416: LD_INT 1
90418: NEG
90419: PUSH
90420: EMPTY
90421: LIST
90422: LIST
90423: PUSH
90424: LD_INT 2
90426: NEG
90427: PUSH
90428: LD_INT 2
90430: NEG
90431: PUSH
90432: EMPTY
90433: LIST
90434: LIST
90435: PUSH
90436: LD_INT 2
90438: NEG
90439: PUSH
90440: LD_INT 3
90442: NEG
90443: PUSH
90444: EMPTY
90445: LIST
90446: LIST
90447: PUSH
90448: LD_INT 1
90450: NEG
90451: PUSH
90452: LD_INT 3
90454: NEG
90455: PUSH
90456: EMPTY
90457: LIST
90458: LIST
90459: PUSH
90460: LD_INT 0
90462: PUSH
90463: LD_INT 3
90465: NEG
90466: PUSH
90467: EMPTY
90468: LIST
90469: LIST
90470: PUSH
90471: LD_INT 1
90473: PUSH
90474: LD_INT 2
90476: NEG
90477: PUSH
90478: EMPTY
90479: LIST
90480: LIST
90481: PUSH
90482: LD_INT 3
90484: PUSH
90485: LD_INT 2
90487: PUSH
90488: EMPTY
90489: LIST
90490: LIST
90491: PUSH
90492: LD_INT 3
90494: PUSH
90495: LD_INT 3
90497: PUSH
90498: EMPTY
90499: LIST
90500: LIST
90501: PUSH
90502: LD_INT 2
90504: PUSH
90505: LD_INT 3
90507: PUSH
90508: EMPTY
90509: LIST
90510: LIST
90511: PUSH
90512: LD_INT 1
90514: PUSH
90515: LD_INT 3
90517: PUSH
90518: EMPTY
90519: LIST
90520: LIST
90521: PUSH
90522: LD_INT 0
90524: PUSH
90525: LD_INT 3
90527: PUSH
90528: EMPTY
90529: LIST
90530: LIST
90531: PUSH
90532: LD_INT 1
90534: NEG
90535: PUSH
90536: LD_INT 2
90538: PUSH
90539: EMPTY
90540: LIST
90541: LIST
90542: PUSH
90543: LD_INT 3
90545: NEG
90546: PUSH
90547: LD_INT 2
90549: NEG
90550: PUSH
90551: EMPTY
90552: LIST
90553: LIST
90554: PUSH
90555: LD_INT 3
90557: NEG
90558: PUSH
90559: LD_INT 3
90561: NEG
90562: PUSH
90563: EMPTY
90564: LIST
90565: LIST
90566: PUSH
90567: EMPTY
90568: LIST
90569: LIST
90570: LIST
90571: LIST
90572: LIST
90573: LIST
90574: LIST
90575: LIST
90576: LIST
90577: LIST
90578: LIST
90579: LIST
90580: LIST
90581: LIST
90582: LIST
90583: LIST
90584: LIST
90585: LIST
90586: LIST
90587: LIST
90588: LIST
90589: LIST
90590: LIST
90591: LIST
90592: LIST
90593: LIST
90594: LIST
90595: LIST
90596: LIST
90597: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
90598: LD_ADDR_VAR 0 43
90602: PUSH
90603: LD_INT 0
90605: PUSH
90606: LD_INT 0
90608: PUSH
90609: EMPTY
90610: LIST
90611: LIST
90612: PUSH
90613: LD_INT 0
90615: PUSH
90616: LD_INT 1
90618: NEG
90619: PUSH
90620: EMPTY
90621: LIST
90622: LIST
90623: PUSH
90624: LD_INT 1
90626: PUSH
90627: LD_INT 0
90629: PUSH
90630: EMPTY
90631: LIST
90632: LIST
90633: PUSH
90634: LD_INT 1
90636: PUSH
90637: LD_INT 1
90639: PUSH
90640: EMPTY
90641: LIST
90642: LIST
90643: PUSH
90644: LD_INT 0
90646: PUSH
90647: LD_INT 1
90649: PUSH
90650: EMPTY
90651: LIST
90652: LIST
90653: PUSH
90654: LD_INT 1
90656: NEG
90657: PUSH
90658: LD_INT 0
90660: PUSH
90661: EMPTY
90662: LIST
90663: LIST
90664: PUSH
90665: LD_INT 1
90667: NEG
90668: PUSH
90669: LD_INT 1
90671: NEG
90672: PUSH
90673: EMPTY
90674: LIST
90675: LIST
90676: PUSH
90677: LD_INT 1
90679: NEG
90680: PUSH
90681: LD_INT 2
90683: NEG
90684: PUSH
90685: EMPTY
90686: LIST
90687: LIST
90688: PUSH
90689: LD_INT 0
90691: PUSH
90692: LD_INT 2
90694: NEG
90695: PUSH
90696: EMPTY
90697: LIST
90698: LIST
90699: PUSH
90700: LD_INT 1
90702: PUSH
90703: LD_INT 1
90705: NEG
90706: PUSH
90707: EMPTY
90708: LIST
90709: LIST
90710: PUSH
90711: LD_INT 2
90713: PUSH
90714: LD_INT 0
90716: PUSH
90717: EMPTY
90718: LIST
90719: LIST
90720: PUSH
90721: LD_INT 2
90723: PUSH
90724: LD_INT 1
90726: PUSH
90727: EMPTY
90728: LIST
90729: LIST
90730: PUSH
90731: LD_INT 1
90733: PUSH
90734: LD_INT 2
90736: PUSH
90737: EMPTY
90738: LIST
90739: LIST
90740: PUSH
90741: LD_INT 0
90743: PUSH
90744: LD_INT 2
90746: PUSH
90747: EMPTY
90748: LIST
90749: LIST
90750: PUSH
90751: LD_INT 1
90753: NEG
90754: PUSH
90755: LD_INT 1
90757: PUSH
90758: EMPTY
90759: LIST
90760: LIST
90761: PUSH
90762: LD_INT 2
90764: NEG
90765: PUSH
90766: LD_INT 0
90768: PUSH
90769: EMPTY
90770: LIST
90771: LIST
90772: PUSH
90773: LD_INT 2
90775: NEG
90776: PUSH
90777: LD_INT 1
90779: NEG
90780: PUSH
90781: EMPTY
90782: LIST
90783: LIST
90784: PUSH
90785: LD_INT 1
90787: NEG
90788: PUSH
90789: LD_INT 3
90791: NEG
90792: PUSH
90793: EMPTY
90794: LIST
90795: LIST
90796: PUSH
90797: LD_INT 0
90799: PUSH
90800: LD_INT 3
90802: NEG
90803: PUSH
90804: EMPTY
90805: LIST
90806: LIST
90807: PUSH
90808: LD_INT 1
90810: PUSH
90811: LD_INT 2
90813: NEG
90814: PUSH
90815: EMPTY
90816: LIST
90817: LIST
90818: PUSH
90819: LD_INT 2
90821: PUSH
90822: LD_INT 1
90824: NEG
90825: PUSH
90826: EMPTY
90827: LIST
90828: LIST
90829: PUSH
90830: LD_INT 3
90832: PUSH
90833: LD_INT 0
90835: PUSH
90836: EMPTY
90837: LIST
90838: LIST
90839: PUSH
90840: LD_INT 3
90842: PUSH
90843: LD_INT 1
90845: PUSH
90846: EMPTY
90847: LIST
90848: LIST
90849: PUSH
90850: LD_INT 1
90852: PUSH
90853: LD_INT 3
90855: PUSH
90856: EMPTY
90857: LIST
90858: LIST
90859: PUSH
90860: LD_INT 0
90862: PUSH
90863: LD_INT 3
90865: PUSH
90866: EMPTY
90867: LIST
90868: LIST
90869: PUSH
90870: LD_INT 1
90872: NEG
90873: PUSH
90874: LD_INT 2
90876: PUSH
90877: EMPTY
90878: LIST
90879: LIST
90880: PUSH
90881: LD_INT 2
90883: NEG
90884: PUSH
90885: LD_INT 1
90887: PUSH
90888: EMPTY
90889: LIST
90890: LIST
90891: PUSH
90892: LD_INT 3
90894: NEG
90895: PUSH
90896: LD_INT 0
90898: PUSH
90899: EMPTY
90900: LIST
90901: LIST
90902: PUSH
90903: LD_INT 3
90905: NEG
90906: PUSH
90907: LD_INT 1
90909: NEG
90910: PUSH
90911: EMPTY
90912: LIST
90913: LIST
90914: PUSH
90915: EMPTY
90916: LIST
90917: LIST
90918: LIST
90919: LIST
90920: LIST
90921: LIST
90922: LIST
90923: LIST
90924: LIST
90925: LIST
90926: LIST
90927: LIST
90928: LIST
90929: LIST
90930: LIST
90931: LIST
90932: LIST
90933: LIST
90934: LIST
90935: LIST
90936: LIST
90937: LIST
90938: LIST
90939: LIST
90940: LIST
90941: LIST
90942: LIST
90943: LIST
90944: LIST
90945: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
90946: LD_ADDR_VAR 0 44
90950: PUSH
90951: LD_INT 0
90953: PUSH
90954: LD_INT 0
90956: PUSH
90957: EMPTY
90958: LIST
90959: LIST
90960: PUSH
90961: LD_INT 0
90963: PUSH
90964: LD_INT 1
90966: NEG
90967: PUSH
90968: EMPTY
90969: LIST
90970: LIST
90971: PUSH
90972: LD_INT 1
90974: PUSH
90975: LD_INT 0
90977: PUSH
90978: EMPTY
90979: LIST
90980: LIST
90981: PUSH
90982: LD_INT 1
90984: PUSH
90985: LD_INT 1
90987: PUSH
90988: EMPTY
90989: LIST
90990: LIST
90991: PUSH
90992: LD_INT 0
90994: PUSH
90995: LD_INT 1
90997: PUSH
90998: EMPTY
90999: LIST
91000: LIST
91001: PUSH
91002: LD_INT 1
91004: NEG
91005: PUSH
91006: LD_INT 0
91008: PUSH
91009: EMPTY
91010: LIST
91011: LIST
91012: PUSH
91013: LD_INT 1
91015: NEG
91016: PUSH
91017: LD_INT 1
91019: NEG
91020: PUSH
91021: EMPTY
91022: LIST
91023: LIST
91024: PUSH
91025: LD_INT 1
91027: NEG
91028: PUSH
91029: LD_INT 2
91031: NEG
91032: PUSH
91033: EMPTY
91034: LIST
91035: LIST
91036: PUSH
91037: LD_INT 1
91039: PUSH
91040: LD_INT 1
91042: NEG
91043: PUSH
91044: EMPTY
91045: LIST
91046: LIST
91047: PUSH
91048: LD_INT 2
91050: PUSH
91051: LD_INT 0
91053: PUSH
91054: EMPTY
91055: LIST
91056: LIST
91057: PUSH
91058: LD_INT 2
91060: PUSH
91061: LD_INT 1
91063: PUSH
91064: EMPTY
91065: LIST
91066: LIST
91067: PUSH
91068: LD_INT 2
91070: PUSH
91071: LD_INT 2
91073: PUSH
91074: EMPTY
91075: LIST
91076: LIST
91077: PUSH
91078: LD_INT 1
91080: PUSH
91081: LD_INT 2
91083: PUSH
91084: EMPTY
91085: LIST
91086: LIST
91087: PUSH
91088: LD_INT 1
91090: NEG
91091: PUSH
91092: LD_INT 1
91094: PUSH
91095: EMPTY
91096: LIST
91097: LIST
91098: PUSH
91099: LD_INT 2
91101: NEG
91102: PUSH
91103: LD_INT 0
91105: PUSH
91106: EMPTY
91107: LIST
91108: LIST
91109: PUSH
91110: LD_INT 2
91112: NEG
91113: PUSH
91114: LD_INT 1
91116: NEG
91117: PUSH
91118: EMPTY
91119: LIST
91120: LIST
91121: PUSH
91122: LD_INT 2
91124: NEG
91125: PUSH
91126: LD_INT 2
91128: NEG
91129: PUSH
91130: EMPTY
91131: LIST
91132: LIST
91133: PUSH
91134: LD_INT 2
91136: NEG
91137: PUSH
91138: LD_INT 3
91140: NEG
91141: PUSH
91142: EMPTY
91143: LIST
91144: LIST
91145: PUSH
91146: LD_INT 2
91148: PUSH
91149: LD_INT 1
91151: NEG
91152: PUSH
91153: EMPTY
91154: LIST
91155: LIST
91156: PUSH
91157: LD_INT 3
91159: PUSH
91160: LD_INT 0
91162: PUSH
91163: EMPTY
91164: LIST
91165: LIST
91166: PUSH
91167: LD_INT 3
91169: PUSH
91170: LD_INT 1
91172: PUSH
91173: EMPTY
91174: LIST
91175: LIST
91176: PUSH
91177: LD_INT 3
91179: PUSH
91180: LD_INT 2
91182: PUSH
91183: EMPTY
91184: LIST
91185: LIST
91186: PUSH
91187: LD_INT 3
91189: PUSH
91190: LD_INT 3
91192: PUSH
91193: EMPTY
91194: LIST
91195: LIST
91196: PUSH
91197: LD_INT 2
91199: PUSH
91200: LD_INT 3
91202: PUSH
91203: EMPTY
91204: LIST
91205: LIST
91206: PUSH
91207: LD_INT 2
91209: NEG
91210: PUSH
91211: LD_INT 1
91213: PUSH
91214: EMPTY
91215: LIST
91216: LIST
91217: PUSH
91218: LD_INT 3
91220: NEG
91221: PUSH
91222: LD_INT 0
91224: PUSH
91225: EMPTY
91226: LIST
91227: LIST
91228: PUSH
91229: LD_INT 3
91231: NEG
91232: PUSH
91233: LD_INT 1
91235: NEG
91236: PUSH
91237: EMPTY
91238: LIST
91239: LIST
91240: PUSH
91241: LD_INT 3
91243: NEG
91244: PUSH
91245: LD_INT 2
91247: NEG
91248: PUSH
91249: EMPTY
91250: LIST
91251: LIST
91252: PUSH
91253: LD_INT 3
91255: NEG
91256: PUSH
91257: LD_INT 3
91259: NEG
91260: PUSH
91261: EMPTY
91262: LIST
91263: LIST
91264: PUSH
91265: EMPTY
91266: LIST
91267: LIST
91268: LIST
91269: LIST
91270: LIST
91271: LIST
91272: LIST
91273: LIST
91274: LIST
91275: LIST
91276: LIST
91277: LIST
91278: LIST
91279: LIST
91280: LIST
91281: LIST
91282: LIST
91283: LIST
91284: LIST
91285: LIST
91286: LIST
91287: LIST
91288: LIST
91289: LIST
91290: LIST
91291: LIST
91292: LIST
91293: LIST
91294: LIST
91295: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
91296: LD_ADDR_VAR 0 45
91300: PUSH
91301: LD_INT 0
91303: PUSH
91304: LD_INT 0
91306: PUSH
91307: EMPTY
91308: LIST
91309: LIST
91310: PUSH
91311: LD_INT 0
91313: PUSH
91314: LD_INT 1
91316: NEG
91317: PUSH
91318: EMPTY
91319: LIST
91320: LIST
91321: PUSH
91322: LD_INT 1
91324: PUSH
91325: LD_INT 0
91327: PUSH
91328: EMPTY
91329: LIST
91330: LIST
91331: PUSH
91332: LD_INT 1
91334: PUSH
91335: LD_INT 1
91337: PUSH
91338: EMPTY
91339: LIST
91340: LIST
91341: PUSH
91342: LD_INT 0
91344: PUSH
91345: LD_INT 1
91347: PUSH
91348: EMPTY
91349: LIST
91350: LIST
91351: PUSH
91352: LD_INT 1
91354: NEG
91355: PUSH
91356: LD_INT 0
91358: PUSH
91359: EMPTY
91360: LIST
91361: LIST
91362: PUSH
91363: LD_INT 1
91365: NEG
91366: PUSH
91367: LD_INT 1
91369: NEG
91370: PUSH
91371: EMPTY
91372: LIST
91373: LIST
91374: PUSH
91375: LD_INT 1
91377: NEG
91378: PUSH
91379: LD_INT 2
91381: NEG
91382: PUSH
91383: EMPTY
91384: LIST
91385: LIST
91386: PUSH
91387: LD_INT 0
91389: PUSH
91390: LD_INT 2
91392: NEG
91393: PUSH
91394: EMPTY
91395: LIST
91396: LIST
91397: PUSH
91398: LD_INT 1
91400: PUSH
91401: LD_INT 1
91403: NEG
91404: PUSH
91405: EMPTY
91406: LIST
91407: LIST
91408: PUSH
91409: LD_INT 2
91411: PUSH
91412: LD_INT 1
91414: PUSH
91415: EMPTY
91416: LIST
91417: LIST
91418: PUSH
91419: LD_INT 2
91421: PUSH
91422: LD_INT 2
91424: PUSH
91425: EMPTY
91426: LIST
91427: LIST
91428: PUSH
91429: LD_INT 1
91431: PUSH
91432: LD_INT 2
91434: PUSH
91435: EMPTY
91436: LIST
91437: LIST
91438: PUSH
91439: LD_INT 0
91441: PUSH
91442: LD_INT 2
91444: PUSH
91445: EMPTY
91446: LIST
91447: LIST
91448: PUSH
91449: LD_INT 1
91451: NEG
91452: PUSH
91453: LD_INT 1
91455: PUSH
91456: EMPTY
91457: LIST
91458: LIST
91459: PUSH
91460: LD_INT 2
91462: NEG
91463: PUSH
91464: LD_INT 1
91466: NEG
91467: PUSH
91468: EMPTY
91469: LIST
91470: LIST
91471: PUSH
91472: LD_INT 2
91474: NEG
91475: PUSH
91476: LD_INT 2
91478: NEG
91479: PUSH
91480: EMPTY
91481: LIST
91482: LIST
91483: PUSH
91484: LD_INT 2
91486: NEG
91487: PUSH
91488: LD_INT 3
91490: NEG
91491: PUSH
91492: EMPTY
91493: LIST
91494: LIST
91495: PUSH
91496: LD_INT 1
91498: NEG
91499: PUSH
91500: LD_INT 3
91502: NEG
91503: PUSH
91504: EMPTY
91505: LIST
91506: LIST
91507: PUSH
91508: LD_INT 0
91510: PUSH
91511: LD_INT 3
91513: NEG
91514: PUSH
91515: EMPTY
91516: LIST
91517: LIST
91518: PUSH
91519: LD_INT 1
91521: PUSH
91522: LD_INT 2
91524: NEG
91525: PUSH
91526: EMPTY
91527: LIST
91528: LIST
91529: PUSH
91530: LD_INT 3
91532: PUSH
91533: LD_INT 2
91535: PUSH
91536: EMPTY
91537: LIST
91538: LIST
91539: PUSH
91540: LD_INT 3
91542: PUSH
91543: LD_INT 3
91545: PUSH
91546: EMPTY
91547: LIST
91548: LIST
91549: PUSH
91550: LD_INT 2
91552: PUSH
91553: LD_INT 3
91555: PUSH
91556: EMPTY
91557: LIST
91558: LIST
91559: PUSH
91560: LD_INT 1
91562: PUSH
91563: LD_INT 3
91565: PUSH
91566: EMPTY
91567: LIST
91568: LIST
91569: PUSH
91570: LD_INT 0
91572: PUSH
91573: LD_INT 3
91575: PUSH
91576: EMPTY
91577: LIST
91578: LIST
91579: PUSH
91580: LD_INT 1
91582: NEG
91583: PUSH
91584: LD_INT 2
91586: PUSH
91587: EMPTY
91588: LIST
91589: LIST
91590: PUSH
91591: LD_INT 3
91593: NEG
91594: PUSH
91595: LD_INT 2
91597: NEG
91598: PUSH
91599: EMPTY
91600: LIST
91601: LIST
91602: PUSH
91603: LD_INT 3
91605: NEG
91606: PUSH
91607: LD_INT 3
91609: NEG
91610: PUSH
91611: EMPTY
91612: LIST
91613: LIST
91614: PUSH
91615: EMPTY
91616: LIST
91617: LIST
91618: LIST
91619: LIST
91620: LIST
91621: LIST
91622: LIST
91623: LIST
91624: LIST
91625: LIST
91626: LIST
91627: LIST
91628: LIST
91629: LIST
91630: LIST
91631: LIST
91632: LIST
91633: LIST
91634: LIST
91635: LIST
91636: LIST
91637: LIST
91638: LIST
91639: LIST
91640: LIST
91641: LIST
91642: LIST
91643: LIST
91644: LIST
91645: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
91646: LD_ADDR_VAR 0 46
91650: PUSH
91651: LD_INT 0
91653: PUSH
91654: LD_INT 0
91656: PUSH
91657: EMPTY
91658: LIST
91659: LIST
91660: PUSH
91661: LD_INT 0
91663: PUSH
91664: LD_INT 1
91666: NEG
91667: PUSH
91668: EMPTY
91669: LIST
91670: LIST
91671: PUSH
91672: LD_INT 1
91674: PUSH
91675: LD_INT 0
91677: PUSH
91678: EMPTY
91679: LIST
91680: LIST
91681: PUSH
91682: LD_INT 1
91684: PUSH
91685: LD_INT 1
91687: PUSH
91688: EMPTY
91689: LIST
91690: LIST
91691: PUSH
91692: LD_INT 0
91694: PUSH
91695: LD_INT 1
91697: PUSH
91698: EMPTY
91699: LIST
91700: LIST
91701: PUSH
91702: LD_INT 1
91704: NEG
91705: PUSH
91706: LD_INT 0
91708: PUSH
91709: EMPTY
91710: LIST
91711: LIST
91712: PUSH
91713: LD_INT 1
91715: NEG
91716: PUSH
91717: LD_INT 1
91719: NEG
91720: PUSH
91721: EMPTY
91722: LIST
91723: LIST
91724: PUSH
91725: LD_INT 1
91727: NEG
91728: PUSH
91729: LD_INT 2
91731: NEG
91732: PUSH
91733: EMPTY
91734: LIST
91735: LIST
91736: PUSH
91737: LD_INT 0
91739: PUSH
91740: LD_INT 2
91742: NEG
91743: PUSH
91744: EMPTY
91745: LIST
91746: LIST
91747: PUSH
91748: LD_INT 1
91750: PUSH
91751: LD_INT 1
91753: NEG
91754: PUSH
91755: EMPTY
91756: LIST
91757: LIST
91758: PUSH
91759: LD_INT 2
91761: PUSH
91762: LD_INT 0
91764: PUSH
91765: EMPTY
91766: LIST
91767: LIST
91768: PUSH
91769: LD_INT 2
91771: PUSH
91772: LD_INT 1
91774: PUSH
91775: EMPTY
91776: LIST
91777: LIST
91778: PUSH
91779: LD_INT 1
91781: PUSH
91782: LD_INT 2
91784: PUSH
91785: EMPTY
91786: LIST
91787: LIST
91788: PUSH
91789: LD_INT 0
91791: PUSH
91792: LD_INT 2
91794: PUSH
91795: EMPTY
91796: LIST
91797: LIST
91798: PUSH
91799: LD_INT 1
91801: NEG
91802: PUSH
91803: LD_INT 1
91805: PUSH
91806: EMPTY
91807: LIST
91808: LIST
91809: PUSH
91810: LD_INT 2
91812: NEG
91813: PUSH
91814: LD_INT 0
91816: PUSH
91817: EMPTY
91818: LIST
91819: LIST
91820: PUSH
91821: LD_INT 2
91823: NEG
91824: PUSH
91825: LD_INT 1
91827: NEG
91828: PUSH
91829: EMPTY
91830: LIST
91831: LIST
91832: PUSH
91833: LD_INT 1
91835: NEG
91836: PUSH
91837: LD_INT 3
91839: NEG
91840: PUSH
91841: EMPTY
91842: LIST
91843: LIST
91844: PUSH
91845: LD_INT 0
91847: PUSH
91848: LD_INT 3
91850: NEG
91851: PUSH
91852: EMPTY
91853: LIST
91854: LIST
91855: PUSH
91856: LD_INT 1
91858: PUSH
91859: LD_INT 2
91861: NEG
91862: PUSH
91863: EMPTY
91864: LIST
91865: LIST
91866: PUSH
91867: LD_INT 2
91869: PUSH
91870: LD_INT 1
91872: NEG
91873: PUSH
91874: EMPTY
91875: LIST
91876: LIST
91877: PUSH
91878: LD_INT 3
91880: PUSH
91881: LD_INT 0
91883: PUSH
91884: EMPTY
91885: LIST
91886: LIST
91887: PUSH
91888: LD_INT 3
91890: PUSH
91891: LD_INT 1
91893: PUSH
91894: EMPTY
91895: LIST
91896: LIST
91897: PUSH
91898: LD_INT 1
91900: PUSH
91901: LD_INT 3
91903: PUSH
91904: EMPTY
91905: LIST
91906: LIST
91907: PUSH
91908: LD_INT 0
91910: PUSH
91911: LD_INT 3
91913: PUSH
91914: EMPTY
91915: LIST
91916: LIST
91917: PUSH
91918: LD_INT 1
91920: NEG
91921: PUSH
91922: LD_INT 2
91924: PUSH
91925: EMPTY
91926: LIST
91927: LIST
91928: PUSH
91929: LD_INT 2
91931: NEG
91932: PUSH
91933: LD_INT 1
91935: PUSH
91936: EMPTY
91937: LIST
91938: LIST
91939: PUSH
91940: LD_INT 3
91942: NEG
91943: PUSH
91944: LD_INT 0
91946: PUSH
91947: EMPTY
91948: LIST
91949: LIST
91950: PUSH
91951: LD_INT 3
91953: NEG
91954: PUSH
91955: LD_INT 1
91957: NEG
91958: PUSH
91959: EMPTY
91960: LIST
91961: LIST
91962: PUSH
91963: EMPTY
91964: LIST
91965: LIST
91966: LIST
91967: LIST
91968: LIST
91969: LIST
91970: LIST
91971: LIST
91972: LIST
91973: LIST
91974: LIST
91975: LIST
91976: LIST
91977: LIST
91978: LIST
91979: LIST
91980: LIST
91981: LIST
91982: LIST
91983: LIST
91984: LIST
91985: LIST
91986: LIST
91987: LIST
91988: LIST
91989: LIST
91990: LIST
91991: LIST
91992: LIST
91993: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
91994: LD_ADDR_VAR 0 47
91998: PUSH
91999: LD_INT 0
92001: PUSH
92002: LD_INT 0
92004: PUSH
92005: EMPTY
92006: LIST
92007: LIST
92008: PUSH
92009: LD_INT 0
92011: PUSH
92012: LD_INT 1
92014: NEG
92015: PUSH
92016: EMPTY
92017: LIST
92018: LIST
92019: PUSH
92020: LD_INT 1
92022: PUSH
92023: LD_INT 0
92025: PUSH
92026: EMPTY
92027: LIST
92028: LIST
92029: PUSH
92030: LD_INT 1
92032: PUSH
92033: LD_INT 1
92035: PUSH
92036: EMPTY
92037: LIST
92038: LIST
92039: PUSH
92040: LD_INT 0
92042: PUSH
92043: LD_INT 1
92045: PUSH
92046: EMPTY
92047: LIST
92048: LIST
92049: PUSH
92050: LD_INT 1
92052: NEG
92053: PUSH
92054: LD_INT 0
92056: PUSH
92057: EMPTY
92058: LIST
92059: LIST
92060: PUSH
92061: LD_INT 1
92063: NEG
92064: PUSH
92065: LD_INT 1
92067: NEG
92068: PUSH
92069: EMPTY
92070: LIST
92071: LIST
92072: PUSH
92073: LD_INT 1
92075: NEG
92076: PUSH
92077: LD_INT 2
92079: NEG
92080: PUSH
92081: EMPTY
92082: LIST
92083: LIST
92084: PUSH
92085: LD_INT 0
92087: PUSH
92088: LD_INT 2
92090: NEG
92091: PUSH
92092: EMPTY
92093: LIST
92094: LIST
92095: PUSH
92096: LD_INT 1
92098: PUSH
92099: LD_INT 1
92101: NEG
92102: PUSH
92103: EMPTY
92104: LIST
92105: LIST
92106: PUSH
92107: LD_INT 2
92109: NEG
92110: PUSH
92111: LD_INT 1
92113: NEG
92114: PUSH
92115: EMPTY
92116: LIST
92117: LIST
92118: PUSH
92119: LD_INT 2
92121: NEG
92122: PUSH
92123: LD_INT 2
92125: NEG
92126: PUSH
92127: EMPTY
92128: LIST
92129: LIST
92130: PUSH
92131: EMPTY
92132: LIST
92133: LIST
92134: LIST
92135: LIST
92136: LIST
92137: LIST
92138: LIST
92139: LIST
92140: LIST
92141: LIST
92142: LIST
92143: LIST
92144: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
92145: LD_ADDR_VAR 0 48
92149: PUSH
92150: LD_INT 0
92152: PUSH
92153: LD_INT 0
92155: PUSH
92156: EMPTY
92157: LIST
92158: LIST
92159: PUSH
92160: LD_INT 0
92162: PUSH
92163: LD_INT 1
92165: NEG
92166: PUSH
92167: EMPTY
92168: LIST
92169: LIST
92170: PUSH
92171: LD_INT 1
92173: PUSH
92174: LD_INT 0
92176: PUSH
92177: EMPTY
92178: LIST
92179: LIST
92180: PUSH
92181: LD_INT 1
92183: PUSH
92184: LD_INT 1
92186: PUSH
92187: EMPTY
92188: LIST
92189: LIST
92190: PUSH
92191: LD_INT 0
92193: PUSH
92194: LD_INT 1
92196: PUSH
92197: EMPTY
92198: LIST
92199: LIST
92200: PUSH
92201: LD_INT 1
92203: NEG
92204: PUSH
92205: LD_INT 0
92207: PUSH
92208: EMPTY
92209: LIST
92210: LIST
92211: PUSH
92212: LD_INT 1
92214: NEG
92215: PUSH
92216: LD_INT 1
92218: NEG
92219: PUSH
92220: EMPTY
92221: LIST
92222: LIST
92223: PUSH
92224: LD_INT 1
92226: NEG
92227: PUSH
92228: LD_INT 2
92230: NEG
92231: PUSH
92232: EMPTY
92233: LIST
92234: LIST
92235: PUSH
92236: LD_INT 0
92238: PUSH
92239: LD_INT 2
92241: NEG
92242: PUSH
92243: EMPTY
92244: LIST
92245: LIST
92246: PUSH
92247: LD_INT 1
92249: PUSH
92250: LD_INT 1
92252: NEG
92253: PUSH
92254: EMPTY
92255: LIST
92256: LIST
92257: PUSH
92258: LD_INT 2
92260: PUSH
92261: LD_INT 0
92263: PUSH
92264: EMPTY
92265: LIST
92266: LIST
92267: PUSH
92268: LD_INT 2
92270: PUSH
92271: LD_INT 1
92273: PUSH
92274: EMPTY
92275: LIST
92276: LIST
92277: PUSH
92278: EMPTY
92279: LIST
92280: LIST
92281: LIST
92282: LIST
92283: LIST
92284: LIST
92285: LIST
92286: LIST
92287: LIST
92288: LIST
92289: LIST
92290: LIST
92291: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
92292: LD_ADDR_VAR 0 49
92296: PUSH
92297: LD_INT 0
92299: PUSH
92300: LD_INT 0
92302: PUSH
92303: EMPTY
92304: LIST
92305: LIST
92306: PUSH
92307: LD_INT 0
92309: PUSH
92310: LD_INT 1
92312: NEG
92313: PUSH
92314: EMPTY
92315: LIST
92316: LIST
92317: PUSH
92318: LD_INT 1
92320: PUSH
92321: LD_INT 0
92323: PUSH
92324: EMPTY
92325: LIST
92326: LIST
92327: PUSH
92328: LD_INT 1
92330: PUSH
92331: LD_INT 1
92333: PUSH
92334: EMPTY
92335: LIST
92336: LIST
92337: PUSH
92338: LD_INT 0
92340: PUSH
92341: LD_INT 1
92343: PUSH
92344: EMPTY
92345: LIST
92346: LIST
92347: PUSH
92348: LD_INT 1
92350: NEG
92351: PUSH
92352: LD_INT 0
92354: PUSH
92355: EMPTY
92356: LIST
92357: LIST
92358: PUSH
92359: LD_INT 1
92361: NEG
92362: PUSH
92363: LD_INT 1
92365: NEG
92366: PUSH
92367: EMPTY
92368: LIST
92369: LIST
92370: PUSH
92371: LD_INT 1
92373: PUSH
92374: LD_INT 1
92376: NEG
92377: PUSH
92378: EMPTY
92379: LIST
92380: LIST
92381: PUSH
92382: LD_INT 2
92384: PUSH
92385: LD_INT 0
92387: PUSH
92388: EMPTY
92389: LIST
92390: LIST
92391: PUSH
92392: LD_INT 2
92394: PUSH
92395: LD_INT 1
92397: PUSH
92398: EMPTY
92399: LIST
92400: LIST
92401: PUSH
92402: LD_INT 2
92404: PUSH
92405: LD_INT 2
92407: PUSH
92408: EMPTY
92409: LIST
92410: LIST
92411: PUSH
92412: LD_INT 1
92414: PUSH
92415: LD_INT 2
92417: PUSH
92418: EMPTY
92419: LIST
92420: LIST
92421: PUSH
92422: EMPTY
92423: LIST
92424: LIST
92425: LIST
92426: LIST
92427: LIST
92428: LIST
92429: LIST
92430: LIST
92431: LIST
92432: LIST
92433: LIST
92434: LIST
92435: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
92436: LD_ADDR_VAR 0 50
92440: PUSH
92441: LD_INT 0
92443: PUSH
92444: LD_INT 0
92446: PUSH
92447: EMPTY
92448: LIST
92449: LIST
92450: PUSH
92451: LD_INT 0
92453: PUSH
92454: LD_INT 1
92456: NEG
92457: PUSH
92458: EMPTY
92459: LIST
92460: LIST
92461: PUSH
92462: LD_INT 1
92464: PUSH
92465: LD_INT 0
92467: PUSH
92468: EMPTY
92469: LIST
92470: LIST
92471: PUSH
92472: LD_INT 1
92474: PUSH
92475: LD_INT 1
92477: PUSH
92478: EMPTY
92479: LIST
92480: LIST
92481: PUSH
92482: LD_INT 0
92484: PUSH
92485: LD_INT 1
92487: PUSH
92488: EMPTY
92489: LIST
92490: LIST
92491: PUSH
92492: LD_INT 1
92494: NEG
92495: PUSH
92496: LD_INT 0
92498: PUSH
92499: EMPTY
92500: LIST
92501: LIST
92502: PUSH
92503: LD_INT 1
92505: NEG
92506: PUSH
92507: LD_INT 1
92509: NEG
92510: PUSH
92511: EMPTY
92512: LIST
92513: LIST
92514: PUSH
92515: LD_INT 2
92517: PUSH
92518: LD_INT 1
92520: PUSH
92521: EMPTY
92522: LIST
92523: LIST
92524: PUSH
92525: LD_INT 2
92527: PUSH
92528: LD_INT 2
92530: PUSH
92531: EMPTY
92532: LIST
92533: LIST
92534: PUSH
92535: LD_INT 1
92537: PUSH
92538: LD_INT 2
92540: PUSH
92541: EMPTY
92542: LIST
92543: LIST
92544: PUSH
92545: LD_INT 0
92547: PUSH
92548: LD_INT 2
92550: PUSH
92551: EMPTY
92552: LIST
92553: LIST
92554: PUSH
92555: LD_INT 1
92557: NEG
92558: PUSH
92559: LD_INT 1
92561: PUSH
92562: EMPTY
92563: LIST
92564: LIST
92565: PUSH
92566: EMPTY
92567: LIST
92568: LIST
92569: LIST
92570: LIST
92571: LIST
92572: LIST
92573: LIST
92574: LIST
92575: LIST
92576: LIST
92577: LIST
92578: LIST
92579: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
92580: LD_ADDR_VAR 0 51
92584: PUSH
92585: LD_INT 0
92587: PUSH
92588: LD_INT 0
92590: PUSH
92591: EMPTY
92592: LIST
92593: LIST
92594: PUSH
92595: LD_INT 0
92597: PUSH
92598: LD_INT 1
92600: NEG
92601: PUSH
92602: EMPTY
92603: LIST
92604: LIST
92605: PUSH
92606: LD_INT 1
92608: PUSH
92609: LD_INT 0
92611: PUSH
92612: EMPTY
92613: LIST
92614: LIST
92615: PUSH
92616: LD_INT 1
92618: PUSH
92619: LD_INT 1
92621: PUSH
92622: EMPTY
92623: LIST
92624: LIST
92625: PUSH
92626: LD_INT 0
92628: PUSH
92629: LD_INT 1
92631: PUSH
92632: EMPTY
92633: LIST
92634: LIST
92635: PUSH
92636: LD_INT 1
92638: NEG
92639: PUSH
92640: LD_INT 0
92642: PUSH
92643: EMPTY
92644: LIST
92645: LIST
92646: PUSH
92647: LD_INT 1
92649: NEG
92650: PUSH
92651: LD_INT 1
92653: NEG
92654: PUSH
92655: EMPTY
92656: LIST
92657: LIST
92658: PUSH
92659: LD_INT 1
92661: PUSH
92662: LD_INT 2
92664: PUSH
92665: EMPTY
92666: LIST
92667: LIST
92668: PUSH
92669: LD_INT 0
92671: PUSH
92672: LD_INT 2
92674: PUSH
92675: EMPTY
92676: LIST
92677: LIST
92678: PUSH
92679: LD_INT 1
92681: NEG
92682: PUSH
92683: LD_INT 1
92685: PUSH
92686: EMPTY
92687: LIST
92688: LIST
92689: PUSH
92690: LD_INT 2
92692: NEG
92693: PUSH
92694: LD_INT 0
92696: PUSH
92697: EMPTY
92698: LIST
92699: LIST
92700: PUSH
92701: LD_INT 2
92703: NEG
92704: PUSH
92705: LD_INT 1
92707: NEG
92708: PUSH
92709: EMPTY
92710: LIST
92711: LIST
92712: PUSH
92713: EMPTY
92714: LIST
92715: LIST
92716: LIST
92717: LIST
92718: LIST
92719: LIST
92720: LIST
92721: LIST
92722: LIST
92723: LIST
92724: LIST
92725: LIST
92726: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
92727: LD_ADDR_VAR 0 52
92731: PUSH
92732: LD_INT 0
92734: PUSH
92735: LD_INT 0
92737: PUSH
92738: EMPTY
92739: LIST
92740: LIST
92741: PUSH
92742: LD_INT 0
92744: PUSH
92745: LD_INT 1
92747: NEG
92748: PUSH
92749: EMPTY
92750: LIST
92751: LIST
92752: PUSH
92753: LD_INT 1
92755: PUSH
92756: LD_INT 0
92758: PUSH
92759: EMPTY
92760: LIST
92761: LIST
92762: PUSH
92763: LD_INT 1
92765: PUSH
92766: LD_INT 1
92768: PUSH
92769: EMPTY
92770: LIST
92771: LIST
92772: PUSH
92773: LD_INT 0
92775: PUSH
92776: LD_INT 1
92778: PUSH
92779: EMPTY
92780: LIST
92781: LIST
92782: PUSH
92783: LD_INT 1
92785: NEG
92786: PUSH
92787: LD_INT 0
92789: PUSH
92790: EMPTY
92791: LIST
92792: LIST
92793: PUSH
92794: LD_INT 1
92796: NEG
92797: PUSH
92798: LD_INT 1
92800: NEG
92801: PUSH
92802: EMPTY
92803: LIST
92804: LIST
92805: PUSH
92806: LD_INT 1
92808: NEG
92809: PUSH
92810: LD_INT 2
92812: NEG
92813: PUSH
92814: EMPTY
92815: LIST
92816: LIST
92817: PUSH
92818: LD_INT 1
92820: NEG
92821: PUSH
92822: LD_INT 1
92824: PUSH
92825: EMPTY
92826: LIST
92827: LIST
92828: PUSH
92829: LD_INT 2
92831: NEG
92832: PUSH
92833: LD_INT 0
92835: PUSH
92836: EMPTY
92837: LIST
92838: LIST
92839: PUSH
92840: LD_INT 2
92842: NEG
92843: PUSH
92844: LD_INT 1
92846: NEG
92847: PUSH
92848: EMPTY
92849: LIST
92850: LIST
92851: PUSH
92852: LD_INT 2
92854: NEG
92855: PUSH
92856: LD_INT 2
92858: NEG
92859: PUSH
92860: EMPTY
92861: LIST
92862: LIST
92863: PUSH
92864: EMPTY
92865: LIST
92866: LIST
92867: LIST
92868: LIST
92869: LIST
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: LIST
92875: LIST
92876: LIST
92877: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
92878: LD_ADDR_VAR 0 53
92882: PUSH
92883: LD_INT 0
92885: PUSH
92886: LD_INT 0
92888: PUSH
92889: EMPTY
92890: LIST
92891: LIST
92892: PUSH
92893: LD_INT 0
92895: PUSH
92896: LD_INT 1
92898: NEG
92899: PUSH
92900: EMPTY
92901: LIST
92902: LIST
92903: PUSH
92904: LD_INT 1
92906: PUSH
92907: LD_INT 0
92909: PUSH
92910: EMPTY
92911: LIST
92912: LIST
92913: PUSH
92914: LD_INT 1
92916: PUSH
92917: LD_INT 1
92919: PUSH
92920: EMPTY
92921: LIST
92922: LIST
92923: PUSH
92924: LD_INT 0
92926: PUSH
92927: LD_INT 1
92929: PUSH
92930: EMPTY
92931: LIST
92932: LIST
92933: PUSH
92934: LD_INT 1
92936: NEG
92937: PUSH
92938: LD_INT 0
92940: PUSH
92941: EMPTY
92942: LIST
92943: LIST
92944: PUSH
92945: LD_INT 1
92947: NEG
92948: PUSH
92949: LD_INT 1
92951: NEG
92952: PUSH
92953: EMPTY
92954: LIST
92955: LIST
92956: PUSH
92957: LD_INT 1
92959: NEG
92960: PUSH
92961: LD_INT 2
92963: NEG
92964: PUSH
92965: EMPTY
92966: LIST
92967: LIST
92968: PUSH
92969: LD_INT 0
92971: PUSH
92972: LD_INT 2
92974: NEG
92975: PUSH
92976: EMPTY
92977: LIST
92978: LIST
92979: PUSH
92980: LD_INT 1
92982: PUSH
92983: LD_INT 1
92985: NEG
92986: PUSH
92987: EMPTY
92988: LIST
92989: LIST
92990: PUSH
92991: LD_INT 2
92993: PUSH
92994: LD_INT 0
92996: PUSH
92997: EMPTY
92998: LIST
92999: LIST
93000: PUSH
93001: LD_INT 2
93003: PUSH
93004: LD_INT 1
93006: PUSH
93007: EMPTY
93008: LIST
93009: LIST
93010: PUSH
93011: LD_INT 2
93013: PUSH
93014: LD_INT 2
93016: PUSH
93017: EMPTY
93018: LIST
93019: LIST
93020: PUSH
93021: LD_INT 1
93023: PUSH
93024: LD_INT 2
93026: PUSH
93027: EMPTY
93028: LIST
93029: LIST
93030: PUSH
93031: LD_INT 0
93033: PUSH
93034: LD_INT 2
93036: PUSH
93037: EMPTY
93038: LIST
93039: LIST
93040: PUSH
93041: LD_INT 1
93043: NEG
93044: PUSH
93045: LD_INT 1
93047: PUSH
93048: EMPTY
93049: LIST
93050: LIST
93051: PUSH
93052: LD_INT 2
93054: NEG
93055: PUSH
93056: LD_INT 0
93058: PUSH
93059: EMPTY
93060: LIST
93061: LIST
93062: PUSH
93063: LD_INT 2
93065: NEG
93066: PUSH
93067: LD_INT 1
93069: NEG
93070: PUSH
93071: EMPTY
93072: LIST
93073: LIST
93074: PUSH
93075: LD_INT 2
93077: NEG
93078: PUSH
93079: LD_INT 2
93081: NEG
93082: PUSH
93083: EMPTY
93084: LIST
93085: LIST
93086: PUSH
93087: EMPTY
93088: LIST
93089: LIST
93090: LIST
93091: LIST
93092: LIST
93093: LIST
93094: LIST
93095: LIST
93096: LIST
93097: LIST
93098: LIST
93099: LIST
93100: LIST
93101: LIST
93102: LIST
93103: LIST
93104: LIST
93105: LIST
93106: LIST
93107: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93108: LD_ADDR_VAR 0 54
93112: PUSH
93113: LD_INT 0
93115: PUSH
93116: LD_INT 0
93118: PUSH
93119: EMPTY
93120: LIST
93121: LIST
93122: PUSH
93123: LD_INT 0
93125: PUSH
93126: LD_INT 1
93128: NEG
93129: PUSH
93130: EMPTY
93131: LIST
93132: LIST
93133: PUSH
93134: LD_INT 1
93136: PUSH
93137: LD_INT 0
93139: PUSH
93140: EMPTY
93141: LIST
93142: LIST
93143: PUSH
93144: LD_INT 1
93146: PUSH
93147: LD_INT 1
93149: PUSH
93150: EMPTY
93151: LIST
93152: LIST
93153: PUSH
93154: LD_INT 0
93156: PUSH
93157: LD_INT 1
93159: PUSH
93160: EMPTY
93161: LIST
93162: LIST
93163: PUSH
93164: LD_INT 1
93166: NEG
93167: PUSH
93168: LD_INT 0
93170: PUSH
93171: EMPTY
93172: LIST
93173: LIST
93174: PUSH
93175: LD_INT 1
93177: NEG
93178: PUSH
93179: LD_INT 1
93181: NEG
93182: PUSH
93183: EMPTY
93184: LIST
93185: LIST
93186: PUSH
93187: LD_INT 1
93189: NEG
93190: PUSH
93191: LD_INT 2
93193: NEG
93194: PUSH
93195: EMPTY
93196: LIST
93197: LIST
93198: PUSH
93199: LD_INT 0
93201: PUSH
93202: LD_INT 2
93204: NEG
93205: PUSH
93206: EMPTY
93207: LIST
93208: LIST
93209: PUSH
93210: LD_INT 1
93212: PUSH
93213: LD_INT 1
93215: NEG
93216: PUSH
93217: EMPTY
93218: LIST
93219: LIST
93220: PUSH
93221: LD_INT 2
93223: PUSH
93224: LD_INT 0
93226: PUSH
93227: EMPTY
93228: LIST
93229: LIST
93230: PUSH
93231: LD_INT 2
93233: PUSH
93234: LD_INT 1
93236: PUSH
93237: EMPTY
93238: LIST
93239: LIST
93240: PUSH
93241: LD_INT 2
93243: PUSH
93244: LD_INT 2
93246: PUSH
93247: EMPTY
93248: LIST
93249: LIST
93250: PUSH
93251: LD_INT 1
93253: PUSH
93254: LD_INT 2
93256: PUSH
93257: EMPTY
93258: LIST
93259: LIST
93260: PUSH
93261: LD_INT 0
93263: PUSH
93264: LD_INT 2
93266: PUSH
93267: EMPTY
93268: LIST
93269: LIST
93270: PUSH
93271: LD_INT 1
93273: NEG
93274: PUSH
93275: LD_INT 1
93277: PUSH
93278: EMPTY
93279: LIST
93280: LIST
93281: PUSH
93282: LD_INT 2
93284: NEG
93285: PUSH
93286: LD_INT 0
93288: PUSH
93289: EMPTY
93290: LIST
93291: LIST
93292: PUSH
93293: LD_INT 2
93295: NEG
93296: PUSH
93297: LD_INT 1
93299: NEG
93300: PUSH
93301: EMPTY
93302: LIST
93303: LIST
93304: PUSH
93305: LD_INT 2
93307: NEG
93308: PUSH
93309: LD_INT 2
93311: NEG
93312: PUSH
93313: EMPTY
93314: LIST
93315: LIST
93316: PUSH
93317: EMPTY
93318: LIST
93319: LIST
93320: LIST
93321: LIST
93322: LIST
93323: LIST
93324: LIST
93325: LIST
93326: LIST
93327: LIST
93328: LIST
93329: LIST
93330: LIST
93331: LIST
93332: LIST
93333: LIST
93334: LIST
93335: LIST
93336: LIST
93337: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93338: LD_ADDR_VAR 0 55
93342: PUSH
93343: LD_INT 0
93345: PUSH
93346: LD_INT 0
93348: PUSH
93349: EMPTY
93350: LIST
93351: LIST
93352: PUSH
93353: LD_INT 0
93355: PUSH
93356: LD_INT 1
93358: NEG
93359: PUSH
93360: EMPTY
93361: LIST
93362: LIST
93363: PUSH
93364: LD_INT 1
93366: PUSH
93367: LD_INT 0
93369: PUSH
93370: EMPTY
93371: LIST
93372: LIST
93373: PUSH
93374: LD_INT 1
93376: PUSH
93377: LD_INT 1
93379: PUSH
93380: EMPTY
93381: LIST
93382: LIST
93383: PUSH
93384: LD_INT 0
93386: PUSH
93387: LD_INT 1
93389: PUSH
93390: EMPTY
93391: LIST
93392: LIST
93393: PUSH
93394: LD_INT 1
93396: NEG
93397: PUSH
93398: LD_INT 0
93400: PUSH
93401: EMPTY
93402: LIST
93403: LIST
93404: PUSH
93405: LD_INT 1
93407: NEG
93408: PUSH
93409: LD_INT 1
93411: NEG
93412: PUSH
93413: EMPTY
93414: LIST
93415: LIST
93416: PUSH
93417: LD_INT 1
93419: NEG
93420: PUSH
93421: LD_INT 2
93423: NEG
93424: PUSH
93425: EMPTY
93426: LIST
93427: LIST
93428: PUSH
93429: LD_INT 0
93431: PUSH
93432: LD_INT 2
93434: NEG
93435: PUSH
93436: EMPTY
93437: LIST
93438: LIST
93439: PUSH
93440: LD_INT 1
93442: PUSH
93443: LD_INT 1
93445: NEG
93446: PUSH
93447: EMPTY
93448: LIST
93449: LIST
93450: PUSH
93451: LD_INT 2
93453: PUSH
93454: LD_INT 0
93456: PUSH
93457: EMPTY
93458: LIST
93459: LIST
93460: PUSH
93461: LD_INT 2
93463: PUSH
93464: LD_INT 1
93466: PUSH
93467: EMPTY
93468: LIST
93469: LIST
93470: PUSH
93471: LD_INT 2
93473: PUSH
93474: LD_INT 2
93476: PUSH
93477: EMPTY
93478: LIST
93479: LIST
93480: PUSH
93481: LD_INT 1
93483: PUSH
93484: LD_INT 2
93486: PUSH
93487: EMPTY
93488: LIST
93489: LIST
93490: PUSH
93491: LD_INT 0
93493: PUSH
93494: LD_INT 2
93496: PUSH
93497: EMPTY
93498: LIST
93499: LIST
93500: PUSH
93501: LD_INT 1
93503: NEG
93504: PUSH
93505: LD_INT 1
93507: PUSH
93508: EMPTY
93509: LIST
93510: LIST
93511: PUSH
93512: LD_INT 2
93514: NEG
93515: PUSH
93516: LD_INT 0
93518: PUSH
93519: EMPTY
93520: LIST
93521: LIST
93522: PUSH
93523: LD_INT 2
93525: NEG
93526: PUSH
93527: LD_INT 1
93529: NEG
93530: PUSH
93531: EMPTY
93532: LIST
93533: LIST
93534: PUSH
93535: LD_INT 2
93537: NEG
93538: PUSH
93539: LD_INT 2
93541: NEG
93542: PUSH
93543: EMPTY
93544: LIST
93545: LIST
93546: PUSH
93547: EMPTY
93548: LIST
93549: LIST
93550: LIST
93551: LIST
93552: LIST
93553: LIST
93554: LIST
93555: LIST
93556: LIST
93557: LIST
93558: LIST
93559: LIST
93560: LIST
93561: LIST
93562: LIST
93563: LIST
93564: LIST
93565: LIST
93566: LIST
93567: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93568: LD_ADDR_VAR 0 56
93572: PUSH
93573: LD_INT 0
93575: PUSH
93576: LD_INT 0
93578: PUSH
93579: EMPTY
93580: LIST
93581: LIST
93582: PUSH
93583: LD_INT 0
93585: PUSH
93586: LD_INT 1
93588: NEG
93589: PUSH
93590: EMPTY
93591: LIST
93592: LIST
93593: PUSH
93594: LD_INT 1
93596: PUSH
93597: LD_INT 0
93599: PUSH
93600: EMPTY
93601: LIST
93602: LIST
93603: PUSH
93604: LD_INT 1
93606: PUSH
93607: LD_INT 1
93609: PUSH
93610: EMPTY
93611: LIST
93612: LIST
93613: PUSH
93614: LD_INT 0
93616: PUSH
93617: LD_INT 1
93619: PUSH
93620: EMPTY
93621: LIST
93622: LIST
93623: PUSH
93624: LD_INT 1
93626: NEG
93627: PUSH
93628: LD_INT 0
93630: PUSH
93631: EMPTY
93632: LIST
93633: LIST
93634: PUSH
93635: LD_INT 1
93637: NEG
93638: PUSH
93639: LD_INT 1
93641: NEG
93642: PUSH
93643: EMPTY
93644: LIST
93645: LIST
93646: PUSH
93647: LD_INT 1
93649: NEG
93650: PUSH
93651: LD_INT 2
93653: NEG
93654: PUSH
93655: EMPTY
93656: LIST
93657: LIST
93658: PUSH
93659: LD_INT 0
93661: PUSH
93662: LD_INT 2
93664: NEG
93665: PUSH
93666: EMPTY
93667: LIST
93668: LIST
93669: PUSH
93670: LD_INT 1
93672: PUSH
93673: LD_INT 1
93675: NEG
93676: PUSH
93677: EMPTY
93678: LIST
93679: LIST
93680: PUSH
93681: LD_INT 2
93683: PUSH
93684: LD_INT 0
93686: PUSH
93687: EMPTY
93688: LIST
93689: LIST
93690: PUSH
93691: LD_INT 2
93693: PUSH
93694: LD_INT 1
93696: PUSH
93697: EMPTY
93698: LIST
93699: LIST
93700: PUSH
93701: LD_INT 2
93703: PUSH
93704: LD_INT 2
93706: PUSH
93707: EMPTY
93708: LIST
93709: LIST
93710: PUSH
93711: LD_INT 1
93713: PUSH
93714: LD_INT 2
93716: PUSH
93717: EMPTY
93718: LIST
93719: LIST
93720: PUSH
93721: LD_INT 0
93723: PUSH
93724: LD_INT 2
93726: PUSH
93727: EMPTY
93728: LIST
93729: LIST
93730: PUSH
93731: LD_INT 1
93733: NEG
93734: PUSH
93735: LD_INT 1
93737: PUSH
93738: EMPTY
93739: LIST
93740: LIST
93741: PUSH
93742: LD_INT 2
93744: NEG
93745: PUSH
93746: LD_INT 0
93748: PUSH
93749: EMPTY
93750: LIST
93751: LIST
93752: PUSH
93753: LD_INT 2
93755: NEG
93756: PUSH
93757: LD_INT 1
93759: NEG
93760: PUSH
93761: EMPTY
93762: LIST
93763: LIST
93764: PUSH
93765: LD_INT 2
93767: NEG
93768: PUSH
93769: LD_INT 2
93771: NEG
93772: PUSH
93773: EMPTY
93774: LIST
93775: LIST
93776: PUSH
93777: EMPTY
93778: LIST
93779: LIST
93780: LIST
93781: LIST
93782: LIST
93783: LIST
93784: LIST
93785: LIST
93786: LIST
93787: LIST
93788: LIST
93789: LIST
93790: LIST
93791: LIST
93792: LIST
93793: LIST
93794: LIST
93795: LIST
93796: LIST
93797: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
93798: LD_ADDR_VAR 0 57
93802: PUSH
93803: LD_INT 0
93805: PUSH
93806: LD_INT 0
93808: PUSH
93809: EMPTY
93810: LIST
93811: LIST
93812: PUSH
93813: LD_INT 0
93815: PUSH
93816: LD_INT 1
93818: NEG
93819: PUSH
93820: EMPTY
93821: LIST
93822: LIST
93823: PUSH
93824: LD_INT 1
93826: PUSH
93827: LD_INT 0
93829: PUSH
93830: EMPTY
93831: LIST
93832: LIST
93833: PUSH
93834: LD_INT 1
93836: PUSH
93837: LD_INT 1
93839: PUSH
93840: EMPTY
93841: LIST
93842: LIST
93843: PUSH
93844: LD_INT 0
93846: PUSH
93847: LD_INT 1
93849: PUSH
93850: EMPTY
93851: LIST
93852: LIST
93853: PUSH
93854: LD_INT 1
93856: NEG
93857: PUSH
93858: LD_INT 0
93860: PUSH
93861: EMPTY
93862: LIST
93863: LIST
93864: PUSH
93865: LD_INT 1
93867: NEG
93868: PUSH
93869: LD_INT 1
93871: NEG
93872: PUSH
93873: EMPTY
93874: LIST
93875: LIST
93876: PUSH
93877: LD_INT 1
93879: NEG
93880: PUSH
93881: LD_INT 2
93883: NEG
93884: PUSH
93885: EMPTY
93886: LIST
93887: LIST
93888: PUSH
93889: LD_INT 0
93891: PUSH
93892: LD_INT 2
93894: NEG
93895: PUSH
93896: EMPTY
93897: LIST
93898: LIST
93899: PUSH
93900: LD_INT 1
93902: PUSH
93903: LD_INT 1
93905: NEG
93906: PUSH
93907: EMPTY
93908: LIST
93909: LIST
93910: PUSH
93911: LD_INT 2
93913: PUSH
93914: LD_INT 0
93916: PUSH
93917: EMPTY
93918: LIST
93919: LIST
93920: PUSH
93921: LD_INT 2
93923: PUSH
93924: LD_INT 1
93926: PUSH
93927: EMPTY
93928: LIST
93929: LIST
93930: PUSH
93931: LD_INT 2
93933: PUSH
93934: LD_INT 2
93936: PUSH
93937: EMPTY
93938: LIST
93939: LIST
93940: PUSH
93941: LD_INT 1
93943: PUSH
93944: LD_INT 2
93946: PUSH
93947: EMPTY
93948: LIST
93949: LIST
93950: PUSH
93951: LD_INT 0
93953: PUSH
93954: LD_INT 2
93956: PUSH
93957: EMPTY
93958: LIST
93959: LIST
93960: PUSH
93961: LD_INT 1
93963: NEG
93964: PUSH
93965: LD_INT 1
93967: PUSH
93968: EMPTY
93969: LIST
93970: LIST
93971: PUSH
93972: LD_INT 2
93974: NEG
93975: PUSH
93976: LD_INT 0
93978: PUSH
93979: EMPTY
93980: LIST
93981: LIST
93982: PUSH
93983: LD_INT 2
93985: NEG
93986: PUSH
93987: LD_INT 1
93989: NEG
93990: PUSH
93991: EMPTY
93992: LIST
93993: LIST
93994: PUSH
93995: LD_INT 2
93997: NEG
93998: PUSH
93999: LD_INT 2
94001: NEG
94002: PUSH
94003: EMPTY
94004: LIST
94005: LIST
94006: PUSH
94007: EMPTY
94008: LIST
94009: LIST
94010: LIST
94011: LIST
94012: LIST
94013: LIST
94014: LIST
94015: LIST
94016: LIST
94017: LIST
94018: LIST
94019: LIST
94020: LIST
94021: LIST
94022: LIST
94023: LIST
94024: LIST
94025: LIST
94026: LIST
94027: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
94028: LD_ADDR_VAR 0 58
94032: PUSH
94033: LD_INT 0
94035: PUSH
94036: LD_INT 0
94038: PUSH
94039: EMPTY
94040: LIST
94041: LIST
94042: PUSH
94043: LD_INT 0
94045: PUSH
94046: LD_INT 1
94048: NEG
94049: PUSH
94050: EMPTY
94051: LIST
94052: LIST
94053: PUSH
94054: LD_INT 1
94056: PUSH
94057: LD_INT 0
94059: PUSH
94060: EMPTY
94061: LIST
94062: LIST
94063: PUSH
94064: LD_INT 1
94066: PUSH
94067: LD_INT 1
94069: PUSH
94070: EMPTY
94071: LIST
94072: LIST
94073: PUSH
94074: LD_INT 0
94076: PUSH
94077: LD_INT 1
94079: PUSH
94080: EMPTY
94081: LIST
94082: LIST
94083: PUSH
94084: LD_INT 1
94086: NEG
94087: PUSH
94088: LD_INT 0
94090: PUSH
94091: EMPTY
94092: LIST
94093: LIST
94094: PUSH
94095: LD_INT 1
94097: NEG
94098: PUSH
94099: LD_INT 1
94101: NEG
94102: PUSH
94103: EMPTY
94104: LIST
94105: LIST
94106: PUSH
94107: LD_INT 1
94109: NEG
94110: PUSH
94111: LD_INT 2
94113: NEG
94114: PUSH
94115: EMPTY
94116: LIST
94117: LIST
94118: PUSH
94119: LD_INT 0
94121: PUSH
94122: LD_INT 2
94124: NEG
94125: PUSH
94126: EMPTY
94127: LIST
94128: LIST
94129: PUSH
94130: LD_INT 1
94132: PUSH
94133: LD_INT 1
94135: NEG
94136: PUSH
94137: EMPTY
94138: LIST
94139: LIST
94140: PUSH
94141: LD_INT 2
94143: PUSH
94144: LD_INT 0
94146: PUSH
94147: EMPTY
94148: LIST
94149: LIST
94150: PUSH
94151: LD_INT 2
94153: PUSH
94154: LD_INT 1
94156: PUSH
94157: EMPTY
94158: LIST
94159: LIST
94160: PUSH
94161: LD_INT 2
94163: PUSH
94164: LD_INT 2
94166: PUSH
94167: EMPTY
94168: LIST
94169: LIST
94170: PUSH
94171: LD_INT 1
94173: PUSH
94174: LD_INT 2
94176: PUSH
94177: EMPTY
94178: LIST
94179: LIST
94180: PUSH
94181: LD_INT 0
94183: PUSH
94184: LD_INT 2
94186: PUSH
94187: EMPTY
94188: LIST
94189: LIST
94190: PUSH
94191: LD_INT 1
94193: NEG
94194: PUSH
94195: LD_INT 1
94197: PUSH
94198: EMPTY
94199: LIST
94200: LIST
94201: PUSH
94202: LD_INT 2
94204: NEG
94205: PUSH
94206: LD_INT 0
94208: PUSH
94209: EMPTY
94210: LIST
94211: LIST
94212: PUSH
94213: LD_INT 2
94215: NEG
94216: PUSH
94217: LD_INT 1
94219: NEG
94220: PUSH
94221: EMPTY
94222: LIST
94223: LIST
94224: PUSH
94225: LD_INT 2
94227: NEG
94228: PUSH
94229: LD_INT 2
94231: NEG
94232: PUSH
94233: EMPTY
94234: LIST
94235: LIST
94236: PUSH
94237: EMPTY
94238: LIST
94239: LIST
94240: LIST
94241: LIST
94242: LIST
94243: LIST
94244: LIST
94245: LIST
94246: LIST
94247: LIST
94248: LIST
94249: LIST
94250: LIST
94251: LIST
94252: LIST
94253: LIST
94254: LIST
94255: LIST
94256: LIST
94257: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94258: LD_ADDR_VAR 0 59
94262: PUSH
94263: LD_INT 0
94265: PUSH
94266: LD_INT 0
94268: PUSH
94269: EMPTY
94270: LIST
94271: LIST
94272: PUSH
94273: LD_INT 0
94275: PUSH
94276: LD_INT 1
94278: NEG
94279: PUSH
94280: EMPTY
94281: LIST
94282: LIST
94283: PUSH
94284: LD_INT 1
94286: PUSH
94287: LD_INT 0
94289: PUSH
94290: EMPTY
94291: LIST
94292: LIST
94293: PUSH
94294: LD_INT 1
94296: PUSH
94297: LD_INT 1
94299: PUSH
94300: EMPTY
94301: LIST
94302: LIST
94303: PUSH
94304: LD_INT 0
94306: PUSH
94307: LD_INT 1
94309: PUSH
94310: EMPTY
94311: LIST
94312: LIST
94313: PUSH
94314: LD_INT 1
94316: NEG
94317: PUSH
94318: LD_INT 0
94320: PUSH
94321: EMPTY
94322: LIST
94323: LIST
94324: PUSH
94325: LD_INT 1
94327: NEG
94328: PUSH
94329: LD_INT 1
94331: NEG
94332: PUSH
94333: EMPTY
94334: LIST
94335: LIST
94336: PUSH
94337: EMPTY
94338: LIST
94339: LIST
94340: LIST
94341: LIST
94342: LIST
94343: LIST
94344: LIST
94345: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94346: LD_ADDR_VAR 0 60
94350: PUSH
94351: LD_INT 0
94353: PUSH
94354: LD_INT 0
94356: PUSH
94357: EMPTY
94358: LIST
94359: LIST
94360: PUSH
94361: LD_INT 0
94363: PUSH
94364: LD_INT 1
94366: NEG
94367: PUSH
94368: EMPTY
94369: LIST
94370: LIST
94371: PUSH
94372: LD_INT 1
94374: PUSH
94375: LD_INT 0
94377: PUSH
94378: EMPTY
94379: LIST
94380: LIST
94381: PUSH
94382: LD_INT 1
94384: PUSH
94385: LD_INT 1
94387: PUSH
94388: EMPTY
94389: LIST
94390: LIST
94391: PUSH
94392: LD_INT 0
94394: PUSH
94395: LD_INT 1
94397: PUSH
94398: EMPTY
94399: LIST
94400: LIST
94401: PUSH
94402: LD_INT 1
94404: NEG
94405: PUSH
94406: LD_INT 0
94408: PUSH
94409: EMPTY
94410: LIST
94411: LIST
94412: PUSH
94413: LD_INT 1
94415: NEG
94416: PUSH
94417: LD_INT 1
94419: NEG
94420: PUSH
94421: EMPTY
94422: LIST
94423: LIST
94424: PUSH
94425: EMPTY
94426: LIST
94427: LIST
94428: LIST
94429: LIST
94430: LIST
94431: LIST
94432: LIST
94433: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94434: LD_ADDR_VAR 0 61
94438: PUSH
94439: LD_INT 0
94441: PUSH
94442: LD_INT 0
94444: PUSH
94445: EMPTY
94446: LIST
94447: LIST
94448: PUSH
94449: LD_INT 0
94451: PUSH
94452: LD_INT 1
94454: NEG
94455: PUSH
94456: EMPTY
94457: LIST
94458: LIST
94459: PUSH
94460: LD_INT 1
94462: PUSH
94463: LD_INT 0
94465: PUSH
94466: EMPTY
94467: LIST
94468: LIST
94469: PUSH
94470: LD_INT 1
94472: PUSH
94473: LD_INT 1
94475: PUSH
94476: EMPTY
94477: LIST
94478: LIST
94479: PUSH
94480: LD_INT 0
94482: PUSH
94483: LD_INT 1
94485: PUSH
94486: EMPTY
94487: LIST
94488: LIST
94489: PUSH
94490: LD_INT 1
94492: NEG
94493: PUSH
94494: LD_INT 0
94496: PUSH
94497: EMPTY
94498: LIST
94499: LIST
94500: PUSH
94501: LD_INT 1
94503: NEG
94504: PUSH
94505: LD_INT 1
94507: NEG
94508: PUSH
94509: EMPTY
94510: LIST
94511: LIST
94512: PUSH
94513: EMPTY
94514: LIST
94515: LIST
94516: LIST
94517: LIST
94518: LIST
94519: LIST
94520: LIST
94521: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94522: LD_ADDR_VAR 0 62
94526: PUSH
94527: LD_INT 0
94529: PUSH
94530: LD_INT 0
94532: PUSH
94533: EMPTY
94534: LIST
94535: LIST
94536: PUSH
94537: LD_INT 0
94539: PUSH
94540: LD_INT 1
94542: NEG
94543: PUSH
94544: EMPTY
94545: LIST
94546: LIST
94547: PUSH
94548: LD_INT 1
94550: PUSH
94551: LD_INT 0
94553: PUSH
94554: EMPTY
94555: LIST
94556: LIST
94557: PUSH
94558: LD_INT 1
94560: PUSH
94561: LD_INT 1
94563: PUSH
94564: EMPTY
94565: LIST
94566: LIST
94567: PUSH
94568: LD_INT 0
94570: PUSH
94571: LD_INT 1
94573: PUSH
94574: EMPTY
94575: LIST
94576: LIST
94577: PUSH
94578: LD_INT 1
94580: NEG
94581: PUSH
94582: LD_INT 0
94584: PUSH
94585: EMPTY
94586: LIST
94587: LIST
94588: PUSH
94589: LD_INT 1
94591: NEG
94592: PUSH
94593: LD_INT 1
94595: NEG
94596: PUSH
94597: EMPTY
94598: LIST
94599: LIST
94600: PUSH
94601: EMPTY
94602: LIST
94603: LIST
94604: LIST
94605: LIST
94606: LIST
94607: LIST
94608: LIST
94609: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94610: LD_ADDR_VAR 0 63
94614: PUSH
94615: LD_INT 0
94617: PUSH
94618: LD_INT 0
94620: PUSH
94621: EMPTY
94622: LIST
94623: LIST
94624: PUSH
94625: LD_INT 0
94627: PUSH
94628: LD_INT 1
94630: NEG
94631: PUSH
94632: EMPTY
94633: LIST
94634: LIST
94635: PUSH
94636: LD_INT 1
94638: PUSH
94639: LD_INT 0
94641: PUSH
94642: EMPTY
94643: LIST
94644: LIST
94645: PUSH
94646: LD_INT 1
94648: PUSH
94649: LD_INT 1
94651: PUSH
94652: EMPTY
94653: LIST
94654: LIST
94655: PUSH
94656: LD_INT 0
94658: PUSH
94659: LD_INT 1
94661: PUSH
94662: EMPTY
94663: LIST
94664: LIST
94665: PUSH
94666: LD_INT 1
94668: NEG
94669: PUSH
94670: LD_INT 0
94672: PUSH
94673: EMPTY
94674: LIST
94675: LIST
94676: PUSH
94677: LD_INT 1
94679: NEG
94680: PUSH
94681: LD_INT 1
94683: NEG
94684: PUSH
94685: EMPTY
94686: LIST
94687: LIST
94688: PUSH
94689: EMPTY
94690: LIST
94691: LIST
94692: LIST
94693: LIST
94694: LIST
94695: LIST
94696: LIST
94697: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
94698: LD_ADDR_VAR 0 64
94702: PUSH
94703: LD_INT 0
94705: PUSH
94706: LD_INT 0
94708: PUSH
94709: EMPTY
94710: LIST
94711: LIST
94712: PUSH
94713: LD_INT 0
94715: PUSH
94716: LD_INT 1
94718: NEG
94719: PUSH
94720: EMPTY
94721: LIST
94722: LIST
94723: PUSH
94724: LD_INT 1
94726: PUSH
94727: LD_INT 0
94729: PUSH
94730: EMPTY
94731: LIST
94732: LIST
94733: PUSH
94734: LD_INT 1
94736: PUSH
94737: LD_INT 1
94739: PUSH
94740: EMPTY
94741: LIST
94742: LIST
94743: PUSH
94744: LD_INT 0
94746: PUSH
94747: LD_INT 1
94749: PUSH
94750: EMPTY
94751: LIST
94752: LIST
94753: PUSH
94754: LD_INT 1
94756: NEG
94757: PUSH
94758: LD_INT 0
94760: PUSH
94761: EMPTY
94762: LIST
94763: LIST
94764: PUSH
94765: LD_INT 1
94767: NEG
94768: PUSH
94769: LD_INT 1
94771: NEG
94772: PUSH
94773: EMPTY
94774: LIST
94775: LIST
94776: PUSH
94777: EMPTY
94778: LIST
94779: LIST
94780: LIST
94781: LIST
94782: LIST
94783: LIST
94784: LIST
94785: ST_TO_ADDR
// end ; 1 :
94786: GO 100683
94788: LD_INT 1
94790: DOUBLE
94791: EQUAL
94792: IFTRUE 94796
94794: GO 97419
94796: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
94797: LD_ADDR_VAR 0 11
94801: PUSH
94802: LD_INT 1
94804: NEG
94805: PUSH
94806: LD_INT 3
94808: NEG
94809: PUSH
94810: EMPTY
94811: LIST
94812: LIST
94813: PUSH
94814: LD_INT 0
94816: PUSH
94817: LD_INT 3
94819: NEG
94820: PUSH
94821: EMPTY
94822: LIST
94823: LIST
94824: PUSH
94825: LD_INT 1
94827: PUSH
94828: LD_INT 2
94830: NEG
94831: PUSH
94832: EMPTY
94833: LIST
94834: LIST
94835: PUSH
94836: EMPTY
94837: LIST
94838: LIST
94839: LIST
94840: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
94841: LD_ADDR_VAR 0 12
94845: PUSH
94846: LD_INT 2
94848: PUSH
94849: LD_INT 1
94851: NEG
94852: PUSH
94853: EMPTY
94854: LIST
94855: LIST
94856: PUSH
94857: LD_INT 3
94859: PUSH
94860: LD_INT 0
94862: PUSH
94863: EMPTY
94864: LIST
94865: LIST
94866: PUSH
94867: LD_INT 3
94869: PUSH
94870: LD_INT 1
94872: PUSH
94873: EMPTY
94874: LIST
94875: LIST
94876: PUSH
94877: EMPTY
94878: LIST
94879: LIST
94880: LIST
94881: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
94882: LD_ADDR_VAR 0 13
94886: PUSH
94887: LD_INT 3
94889: PUSH
94890: LD_INT 2
94892: PUSH
94893: EMPTY
94894: LIST
94895: LIST
94896: PUSH
94897: LD_INT 3
94899: PUSH
94900: LD_INT 3
94902: PUSH
94903: EMPTY
94904: LIST
94905: LIST
94906: PUSH
94907: LD_INT 2
94909: PUSH
94910: LD_INT 3
94912: PUSH
94913: EMPTY
94914: LIST
94915: LIST
94916: PUSH
94917: EMPTY
94918: LIST
94919: LIST
94920: LIST
94921: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
94922: LD_ADDR_VAR 0 14
94926: PUSH
94927: LD_INT 1
94929: PUSH
94930: LD_INT 3
94932: PUSH
94933: EMPTY
94934: LIST
94935: LIST
94936: PUSH
94937: LD_INT 0
94939: PUSH
94940: LD_INT 3
94942: PUSH
94943: EMPTY
94944: LIST
94945: LIST
94946: PUSH
94947: LD_INT 1
94949: NEG
94950: PUSH
94951: LD_INT 2
94953: PUSH
94954: EMPTY
94955: LIST
94956: LIST
94957: PUSH
94958: EMPTY
94959: LIST
94960: LIST
94961: LIST
94962: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
94963: LD_ADDR_VAR 0 15
94967: PUSH
94968: LD_INT 2
94970: NEG
94971: PUSH
94972: LD_INT 1
94974: PUSH
94975: EMPTY
94976: LIST
94977: LIST
94978: PUSH
94979: LD_INT 3
94981: NEG
94982: PUSH
94983: LD_INT 0
94985: PUSH
94986: EMPTY
94987: LIST
94988: LIST
94989: PUSH
94990: LD_INT 3
94992: NEG
94993: PUSH
94994: LD_INT 1
94996: NEG
94997: PUSH
94998: EMPTY
94999: LIST
95000: LIST
95001: PUSH
95002: EMPTY
95003: LIST
95004: LIST
95005: LIST
95006: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
95007: LD_ADDR_VAR 0 16
95011: PUSH
95012: LD_INT 2
95014: NEG
95015: PUSH
95016: LD_INT 3
95018: NEG
95019: PUSH
95020: EMPTY
95021: LIST
95022: LIST
95023: PUSH
95024: LD_INT 3
95026: NEG
95027: PUSH
95028: LD_INT 2
95030: NEG
95031: PUSH
95032: EMPTY
95033: LIST
95034: LIST
95035: PUSH
95036: LD_INT 3
95038: NEG
95039: PUSH
95040: LD_INT 3
95042: NEG
95043: PUSH
95044: EMPTY
95045: LIST
95046: LIST
95047: PUSH
95048: EMPTY
95049: LIST
95050: LIST
95051: LIST
95052: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
95053: LD_ADDR_VAR 0 17
95057: PUSH
95058: LD_INT 1
95060: NEG
95061: PUSH
95062: LD_INT 3
95064: NEG
95065: PUSH
95066: EMPTY
95067: LIST
95068: LIST
95069: PUSH
95070: LD_INT 0
95072: PUSH
95073: LD_INT 3
95075: NEG
95076: PUSH
95077: EMPTY
95078: LIST
95079: LIST
95080: PUSH
95081: LD_INT 1
95083: PUSH
95084: LD_INT 2
95086: NEG
95087: PUSH
95088: EMPTY
95089: LIST
95090: LIST
95091: PUSH
95092: EMPTY
95093: LIST
95094: LIST
95095: LIST
95096: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
95097: LD_ADDR_VAR 0 18
95101: PUSH
95102: LD_INT 2
95104: PUSH
95105: LD_INT 1
95107: NEG
95108: PUSH
95109: EMPTY
95110: LIST
95111: LIST
95112: PUSH
95113: LD_INT 3
95115: PUSH
95116: LD_INT 0
95118: PUSH
95119: EMPTY
95120: LIST
95121: LIST
95122: PUSH
95123: LD_INT 3
95125: PUSH
95126: LD_INT 1
95128: PUSH
95129: EMPTY
95130: LIST
95131: LIST
95132: PUSH
95133: EMPTY
95134: LIST
95135: LIST
95136: LIST
95137: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
95138: LD_ADDR_VAR 0 19
95142: PUSH
95143: LD_INT 3
95145: PUSH
95146: LD_INT 2
95148: PUSH
95149: EMPTY
95150: LIST
95151: LIST
95152: PUSH
95153: LD_INT 3
95155: PUSH
95156: LD_INT 3
95158: PUSH
95159: EMPTY
95160: LIST
95161: LIST
95162: PUSH
95163: LD_INT 2
95165: PUSH
95166: LD_INT 3
95168: PUSH
95169: EMPTY
95170: LIST
95171: LIST
95172: PUSH
95173: EMPTY
95174: LIST
95175: LIST
95176: LIST
95177: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
95178: LD_ADDR_VAR 0 20
95182: PUSH
95183: LD_INT 1
95185: PUSH
95186: LD_INT 3
95188: PUSH
95189: EMPTY
95190: LIST
95191: LIST
95192: PUSH
95193: LD_INT 0
95195: PUSH
95196: LD_INT 3
95198: PUSH
95199: EMPTY
95200: LIST
95201: LIST
95202: PUSH
95203: LD_INT 1
95205: NEG
95206: PUSH
95207: LD_INT 2
95209: PUSH
95210: EMPTY
95211: LIST
95212: LIST
95213: PUSH
95214: EMPTY
95215: LIST
95216: LIST
95217: LIST
95218: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
95219: LD_ADDR_VAR 0 21
95223: PUSH
95224: LD_INT 2
95226: NEG
95227: PUSH
95228: LD_INT 1
95230: PUSH
95231: EMPTY
95232: LIST
95233: LIST
95234: PUSH
95235: LD_INT 3
95237: NEG
95238: PUSH
95239: LD_INT 0
95241: PUSH
95242: EMPTY
95243: LIST
95244: LIST
95245: PUSH
95246: LD_INT 3
95248: NEG
95249: PUSH
95250: LD_INT 1
95252: NEG
95253: PUSH
95254: EMPTY
95255: LIST
95256: LIST
95257: PUSH
95258: EMPTY
95259: LIST
95260: LIST
95261: LIST
95262: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
95263: LD_ADDR_VAR 0 22
95267: PUSH
95268: LD_INT 2
95270: NEG
95271: PUSH
95272: LD_INT 3
95274: NEG
95275: PUSH
95276: EMPTY
95277: LIST
95278: LIST
95279: PUSH
95280: LD_INT 3
95282: NEG
95283: PUSH
95284: LD_INT 2
95286: NEG
95287: PUSH
95288: EMPTY
95289: LIST
95290: LIST
95291: PUSH
95292: LD_INT 3
95294: NEG
95295: PUSH
95296: LD_INT 3
95298: NEG
95299: PUSH
95300: EMPTY
95301: LIST
95302: LIST
95303: PUSH
95304: EMPTY
95305: LIST
95306: LIST
95307: LIST
95308: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
95309: LD_ADDR_VAR 0 23
95313: PUSH
95314: LD_INT 0
95316: PUSH
95317: LD_INT 3
95319: NEG
95320: PUSH
95321: EMPTY
95322: LIST
95323: LIST
95324: PUSH
95325: LD_INT 1
95327: NEG
95328: PUSH
95329: LD_INT 4
95331: NEG
95332: PUSH
95333: EMPTY
95334: LIST
95335: LIST
95336: PUSH
95337: LD_INT 1
95339: PUSH
95340: LD_INT 3
95342: NEG
95343: PUSH
95344: EMPTY
95345: LIST
95346: LIST
95347: PUSH
95348: EMPTY
95349: LIST
95350: LIST
95351: LIST
95352: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
95353: LD_ADDR_VAR 0 24
95357: PUSH
95358: LD_INT 3
95360: PUSH
95361: LD_INT 0
95363: PUSH
95364: EMPTY
95365: LIST
95366: LIST
95367: PUSH
95368: LD_INT 3
95370: PUSH
95371: LD_INT 1
95373: NEG
95374: PUSH
95375: EMPTY
95376: LIST
95377: LIST
95378: PUSH
95379: LD_INT 4
95381: PUSH
95382: LD_INT 1
95384: PUSH
95385: EMPTY
95386: LIST
95387: LIST
95388: PUSH
95389: EMPTY
95390: LIST
95391: LIST
95392: LIST
95393: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
95394: LD_ADDR_VAR 0 25
95398: PUSH
95399: LD_INT 3
95401: PUSH
95402: LD_INT 3
95404: PUSH
95405: EMPTY
95406: LIST
95407: LIST
95408: PUSH
95409: LD_INT 4
95411: PUSH
95412: LD_INT 3
95414: PUSH
95415: EMPTY
95416: LIST
95417: LIST
95418: PUSH
95419: LD_INT 3
95421: PUSH
95422: LD_INT 4
95424: PUSH
95425: EMPTY
95426: LIST
95427: LIST
95428: PUSH
95429: EMPTY
95430: LIST
95431: LIST
95432: LIST
95433: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
95434: LD_ADDR_VAR 0 26
95438: PUSH
95439: LD_INT 0
95441: PUSH
95442: LD_INT 3
95444: PUSH
95445: EMPTY
95446: LIST
95447: LIST
95448: PUSH
95449: LD_INT 1
95451: PUSH
95452: LD_INT 4
95454: PUSH
95455: EMPTY
95456: LIST
95457: LIST
95458: PUSH
95459: LD_INT 1
95461: NEG
95462: PUSH
95463: LD_INT 3
95465: PUSH
95466: EMPTY
95467: LIST
95468: LIST
95469: PUSH
95470: EMPTY
95471: LIST
95472: LIST
95473: LIST
95474: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
95475: LD_ADDR_VAR 0 27
95479: PUSH
95480: LD_INT 3
95482: NEG
95483: PUSH
95484: LD_INT 0
95486: PUSH
95487: EMPTY
95488: LIST
95489: LIST
95490: PUSH
95491: LD_INT 3
95493: NEG
95494: PUSH
95495: LD_INT 1
95497: PUSH
95498: EMPTY
95499: LIST
95500: LIST
95501: PUSH
95502: LD_INT 4
95504: NEG
95505: PUSH
95506: LD_INT 1
95508: NEG
95509: PUSH
95510: EMPTY
95511: LIST
95512: LIST
95513: PUSH
95514: EMPTY
95515: LIST
95516: LIST
95517: LIST
95518: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
95519: LD_ADDR_VAR 0 28
95523: PUSH
95524: LD_INT 3
95526: NEG
95527: PUSH
95528: LD_INT 3
95530: NEG
95531: PUSH
95532: EMPTY
95533: LIST
95534: LIST
95535: PUSH
95536: LD_INT 3
95538: NEG
95539: PUSH
95540: LD_INT 4
95542: NEG
95543: PUSH
95544: EMPTY
95545: LIST
95546: LIST
95547: PUSH
95548: LD_INT 4
95550: NEG
95551: PUSH
95552: LD_INT 3
95554: NEG
95555: PUSH
95556: EMPTY
95557: LIST
95558: LIST
95559: PUSH
95560: EMPTY
95561: LIST
95562: LIST
95563: LIST
95564: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
95565: LD_ADDR_VAR 0 29
95569: PUSH
95570: LD_INT 1
95572: NEG
95573: PUSH
95574: LD_INT 3
95576: NEG
95577: PUSH
95578: EMPTY
95579: LIST
95580: LIST
95581: PUSH
95582: LD_INT 0
95584: PUSH
95585: LD_INT 3
95587: NEG
95588: PUSH
95589: EMPTY
95590: LIST
95591: LIST
95592: PUSH
95593: LD_INT 1
95595: PUSH
95596: LD_INT 2
95598: NEG
95599: PUSH
95600: EMPTY
95601: LIST
95602: LIST
95603: PUSH
95604: LD_INT 1
95606: NEG
95607: PUSH
95608: LD_INT 4
95610: NEG
95611: PUSH
95612: EMPTY
95613: LIST
95614: LIST
95615: PUSH
95616: LD_INT 0
95618: PUSH
95619: LD_INT 4
95621: NEG
95622: PUSH
95623: EMPTY
95624: LIST
95625: LIST
95626: PUSH
95627: LD_INT 1
95629: PUSH
95630: LD_INT 3
95632: NEG
95633: PUSH
95634: EMPTY
95635: LIST
95636: LIST
95637: PUSH
95638: LD_INT 1
95640: NEG
95641: PUSH
95642: LD_INT 5
95644: NEG
95645: PUSH
95646: EMPTY
95647: LIST
95648: LIST
95649: PUSH
95650: LD_INT 0
95652: PUSH
95653: LD_INT 5
95655: NEG
95656: PUSH
95657: EMPTY
95658: LIST
95659: LIST
95660: PUSH
95661: LD_INT 1
95663: PUSH
95664: LD_INT 4
95666: NEG
95667: PUSH
95668: EMPTY
95669: LIST
95670: LIST
95671: PUSH
95672: LD_INT 1
95674: NEG
95675: PUSH
95676: LD_INT 6
95678: NEG
95679: PUSH
95680: EMPTY
95681: LIST
95682: LIST
95683: PUSH
95684: LD_INT 0
95686: PUSH
95687: LD_INT 6
95689: NEG
95690: PUSH
95691: EMPTY
95692: LIST
95693: LIST
95694: PUSH
95695: LD_INT 1
95697: PUSH
95698: LD_INT 5
95700: NEG
95701: PUSH
95702: EMPTY
95703: LIST
95704: LIST
95705: PUSH
95706: EMPTY
95707: LIST
95708: LIST
95709: LIST
95710: LIST
95711: LIST
95712: LIST
95713: LIST
95714: LIST
95715: LIST
95716: LIST
95717: LIST
95718: LIST
95719: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
95720: LD_ADDR_VAR 0 30
95724: PUSH
95725: LD_INT 2
95727: PUSH
95728: LD_INT 1
95730: NEG
95731: PUSH
95732: EMPTY
95733: LIST
95734: LIST
95735: PUSH
95736: LD_INT 3
95738: PUSH
95739: LD_INT 0
95741: PUSH
95742: EMPTY
95743: LIST
95744: LIST
95745: PUSH
95746: LD_INT 3
95748: PUSH
95749: LD_INT 1
95751: PUSH
95752: EMPTY
95753: LIST
95754: LIST
95755: PUSH
95756: LD_INT 3
95758: PUSH
95759: LD_INT 1
95761: NEG
95762: PUSH
95763: EMPTY
95764: LIST
95765: LIST
95766: PUSH
95767: LD_INT 4
95769: PUSH
95770: LD_INT 0
95772: PUSH
95773: EMPTY
95774: LIST
95775: LIST
95776: PUSH
95777: LD_INT 4
95779: PUSH
95780: LD_INT 1
95782: PUSH
95783: EMPTY
95784: LIST
95785: LIST
95786: PUSH
95787: LD_INT 4
95789: PUSH
95790: LD_INT 1
95792: NEG
95793: PUSH
95794: EMPTY
95795: LIST
95796: LIST
95797: PUSH
95798: LD_INT 5
95800: PUSH
95801: LD_INT 0
95803: PUSH
95804: EMPTY
95805: LIST
95806: LIST
95807: PUSH
95808: LD_INT 5
95810: PUSH
95811: LD_INT 1
95813: PUSH
95814: EMPTY
95815: LIST
95816: LIST
95817: PUSH
95818: LD_INT 5
95820: PUSH
95821: LD_INT 1
95823: NEG
95824: PUSH
95825: EMPTY
95826: LIST
95827: LIST
95828: PUSH
95829: LD_INT 6
95831: PUSH
95832: LD_INT 0
95834: PUSH
95835: EMPTY
95836: LIST
95837: LIST
95838: PUSH
95839: LD_INT 6
95841: PUSH
95842: LD_INT 1
95844: PUSH
95845: EMPTY
95846: LIST
95847: LIST
95848: PUSH
95849: EMPTY
95850: LIST
95851: LIST
95852: LIST
95853: LIST
95854: LIST
95855: LIST
95856: LIST
95857: LIST
95858: LIST
95859: LIST
95860: LIST
95861: LIST
95862: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
95863: LD_ADDR_VAR 0 31
95867: PUSH
95868: LD_INT 3
95870: PUSH
95871: LD_INT 2
95873: PUSH
95874: EMPTY
95875: LIST
95876: LIST
95877: PUSH
95878: LD_INT 3
95880: PUSH
95881: LD_INT 3
95883: PUSH
95884: EMPTY
95885: LIST
95886: LIST
95887: PUSH
95888: LD_INT 2
95890: PUSH
95891: LD_INT 3
95893: PUSH
95894: EMPTY
95895: LIST
95896: LIST
95897: PUSH
95898: LD_INT 4
95900: PUSH
95901: LD_INT 3
95903: PUSH
95904: EMPTY
95905: LIST
95906: LIST
95907: PUSH
95908: LD_INT 4
95910: PUSH
95911: LD_INT 4
95913: PUSH
95914: EMPTY
95915: LIST
95916: LIST
95917: PUSH
95918: LD_INT 3
95920: PUSH
95921: LD_INT 4
95923: PUSH
95924: EMPTY
95925: LIST
95926: LIST
95927: PUSH
95928: LD_INT 5
95930: PUSH
95931: LD_INT 4
95933: PUSH
95934: EMPTY
95935: LIST
95936: LIST
95937: PUSH
95938: LD_INT 5
95940: PUSH
95941: LD_INT 5
95943: PUSH
95944: EMPTY
95945: LIST
95946: LIST
95947: PUSH
95948: LD_INT 4
95950: PUSH
95951: LD_INT 5
95953: PUSH
95954: EMPTY
95955: LIST
95956: LIST
95957: PUSH
95958: LD_INT 6
95960: PUSH
95961: LD_INT 5
95963: PUSH
95964: EMPTY
95965: LIST
95966: LIST
95967: PUSH
95968: LD_INT 6
95970: PUSH
95971: LD_INT 6
95973: PUSH
95974: EMPTY
95975: LIST
95976: LIST
95977: PUSH
95978: LD_INT 5
95980: PUSH
95981: LD_INT 6
95983: PUSH
95984: EMPTY
95985: LIST
95986: LIST
95987: PUSH
95988: EMPTY
95989: LIST
95990: LIST
95991: LIST
95992: LIST
95993: LIST
95994: LIST
95995: LIST
95996: LIST
95997: LIST
95998: LIST
95999: LIST
96000: LIST
96001: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
96002: LD_ADDR_VAR 0 32
96006: PUSH
96007: LD_INT 1
96009: PUSH
96010: LD_INT 3
96012: PUSH
96013: EMPTY
96014: LIST
96015: LIST
96016: PUSH
96017: LD_INT 0
96019: PUSH
96020: LD_INT 3
96022: PUSH
96023: EMPTY
96024: LIST
96025: LIST
96026: PUSH
96027: LD_INT 1
96029: NEG
96030: PUSH
96031: LD_INT 2
96033: PUSH
96034: EMPTY
96035: LIST
96036: LIST
96037: PUSH
96038: LD_INT 1
96040: PUSH
96041: LD_INT 4
96043: PUSH
96044: EMPTY
96045: LIST
96046: LIST
96047: PUSH
96048: LD_INT 0
96050: PUSH
96051: LD_INT 4
96053: PUSH
96054: EMPTY
96055: LIST
96056: LIST
96057: PUSH
96058: LD_INT 1
96060: NEG
96061: PUSH
96062: LD_INT 3
96064: PUSH
96065: EMPTY
96066: LIST
96067: LIST
96068: PUSH
96069: LD_INT 1
96071: PUSH
96072: LD_INT 5
96074: PUSH
96075: EMPTY
96076: LIST
96077: LIST
96078: PUSH
96079: LD_INT 0
96081: PUSH
96082: LD_INT 5
96084: PUSH
96085: EMPTY
96086: LIST
96087: LIST
96088: PUSH
96089: LD_INT 1
96091: NEG
96092: PUSH
96093: LD_INT 4
96095: PUSH
96096: EMPTY
96097: LIST
96098: LIST
96099: PUSH
96100: LD_INT 1
96102: PUSH
96103: LD_INT 6
96105: PUSH
96106: EMPTY
96107: LIST
96108: LIST
96109: PUSH
96110: LD_INT 0
96112: PUSH
96113: LD_INT 6
96115: PUSH
96116: EMPTY
96117: LIST
96118: LIST
96119: PUSH
96120: LD_INT 1
96122: NEG
96123: PUSH
96124: LD_INT 5
96126: PUSH
96127: EMPTY
96128: LIST
96129: LIST
96130: PUSH
96131: EMPTY
96132: LIST
96133: LIST
96134: LIST
96135: LIST
96136: LIST
96137: LIST
96138: LIST
96139: LIST
96140: LIST
96141: LIST
96142: LIST
96143: LIST
96144: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
96145: LD_ADDR_VAR 0 33
96149: PUSH
96150: LD_INT 2
96152: NEG
96153: PUSH
96154: LD_INT 1
96156: PUSH
96157: EMPTY
96158: LIST
96159: LIST
96160: PUSH
96161: LD_INT 3
96163: NEG
96164: PUSH
96165: LD_INT 0
96167: PUSH
96168: EMPTY
96169: LIST
96170: LIST
96171: PUSH
96172: LD_INT 3
96174: NEG
96175: PUSH
96176: LD_INT 1
96178: NEG
96179: PUSH
96180: EMPTY
96181: LIST
96182: LIST
96183: PUSH
96184: LD_INT 3
96186: NEG
96187: PUSH
96188: LD_INT 1
96190: PUSH
96191: EMPTY
96192: LIST
96193: LIST
96194: PUSH
96195: LD_INT 4
96197: NEG
96198: PUSH
96199: LD_INT 0
96201: PUSH
96202: EMPTY
96203: LIST
96204: LIST
96205: PUSH
96206: LD_INT 4
96208: NEG
96209: PUSH
96210: LD_INT 1
96212: NEG
96213: PUSH
96214: EMPTY
96215: LIST
96216: LIST
96217: PUSH
96218: LD_INT 4
96220: NEG
96221: PUSH
96222: LD_INT 1
96224: PUSH
96225: EMPTY
96226: LIST
96227: LIST
96228: PUSH
96229: LD_INT 5
96231: NEG
96232: PUSH
96233: LD_INT 0
96235: PUSH
96236: EMPTY
96237: LIST
96238: LIST
96239: PUSH
96240: LD_INT 5
96242: NEG
96243: PUSH
96244: LD_INT 1
96246: NEG
96247: PUSH
96248: EMPTY
96249: LIST
96250: LIST
96251: PUSH
96252: LD_INT 5
96254: NEG
96255: PUSH
96256: LD_INT 1
96258: PUSH
96259: EMPTY
96260: LIST
96261: LIST
96262: PUSH
96263: LD_INT 6
96265: NEG
96266: PUSH
96267: LD_INT 0
96269: PUSH
96270: EMPTY
96271: LIST
96272: LIST
96273: PUSH
96274: LD_INT 6
96276: NEG
96277: PUSH
96278: LD_INT 1
96280: NEG
96281: PUSH
96282: EMPTY
96283: LIST
96284: LIST
96285: PUSH
96286: EMPTY
96287: LIST
96288: LIST
96289: LIST
96290: LIST
96291: LIST
96292: LIST
96293: LIST
96294: LIST
96295: LIST
96296: LIST
96297: LIST
96298: LIST
96299: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
96300: LD_ADDR_VAR 0 34
96304: PUSH
96305: LD_INT 2
96307: NEG
96308: PUSH
96309: LD_INT 3
96311: NEG
96312: PUSH
96313: EMPTY
96314: LIST
96315: LIST
96316: PUSH
96317: LD_INT 3
96319: NEG
96320: PUSH
96321: LD_INT 2
96323: NEG
96324: PUSH
96325: EMPTY
96326: LIST
96327: LIST
96328: PUSH
96329: LD_INT 3
96331: NEG
96332: PUSH
96333: LD_INT 3
96335: NEG
96336: PUSH
96337: EMPTY
96338: LIST
96339: LIST
96340: PUSH
96341: LD_INT 3
96343: NEG
96344: PUSH
96345: LD_INT 4
96347: NEG
96348: PUSH
96349: EMPTY
96350: LIST
96351: LIST
96352: PUSH
96353: LD_INT 4
96355: NEG
96356: PUSH
96357: LD_INT 3
96359: NEG
96360: PUSH
96361: EMPTY
96362: LIST
96363: LIST
96364: PUSH
96365: LD_INT 4
96367: NEG
96368: PUSH
96369: LD_INT 4
96371: NEG
96372: PUSH
96373: EMPTY
96374: LIST
96375: LIST
96376: PUSH
96377: LD_INT 4
96379: NEG
96380: PUSH
96381: LD_INT 5
96383: NEG
96384: PUSH
96385: EMPTY
96386: LIST
96387: LIST
96388: PUSH
96389: LD_INT 5
96391: NEG
96392: PUSH
96393: LD_INT 4
96395: NEG
96396: PUSH
96397: EMPTY
96398: LIST
96399: LIST
96400: PUSH
96401: LD_INT 5
96403: NEG
96404: PUSH
96405: LD_INT 5
96407: NEG
96408: PUSH
96409: EMPTY
96410: LIST
96411: LIST
96412: PUSH
96413: LD_INT 5
96415: NEG
96416: PUSH
96417: LD_INT 6
96419: NEG
96420: PUSH
96421: EMPTY
96422: LIST
96423: LIST
96424: PUSH
96425: LD_INT 6
96427: NEG
96428: PUSH
96429: LD_INT 5
96431: NEG
96432: PUSH
96433: EMPTY
96434: LIST
96435: LIST
96436: PUSH
96437: LD_INT 6
96439: NEG
96440: PUSH
96441: LD_INT 6
96443: NEG
96444: PUSH
96445: EMPTY
96446: LIST
96447: LIST
96448: PUSH
96449: EMPTY
96450: LIST
96451: LIST
96452: LIST
96453: LIST
96454: LIST
96455: LIST
96456: LIST
96457: LIST
96458: LIST
96459: LIST
96460: LIST
96461: LIST
96462: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
96463: LD_ADDR_VAR 0 41
96467: PUSH
96468: LD_INT 0
96470: PUSH
96471: LD_INT 2
96473: NEG
96474: PUSH
96475: EMPTY
96476: LIST
96477: LIST
96478: PUSH
96479: LD_INT 1
96481: NEG
96482: PUSH
96483: LD_INT 3
96485: NEG
96486: PUSH
96487: EMPTY
96488: LIST
96489: LIST
96490: PUSH
96491: LD_INT 1
96493: PUSH
96494: LD_INT 2
96496: NEG
96497: PUSH
96498: EMPTY
96499: LIST
96500: LIST
96501: PUSH
96502: EMPTY
96503: LIST
96504: LIST
96505: LIST
96506: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
96507: LD_ADDR_VAR 0 42
96511: PUSH
96512: LD_INT 2
96514: PUSH
96515: LD_INT 0
96517: PUSH
96518: EMPTY
96519: LIST
96520: LIST
96521: PUSH
96522: LD_INT 2
96524: PUSH
96525: LD_INT 1
96527: NEG
96528: PUSH
96529: EMPTY
96530: LIST
96531: LIST
96532: PUSH
96533: LD_INT 3
96535: PUSH
96536: LD_INT 1
96538: PUSH
96539: EMPTY
96540: LIST
96541: LIST
96542: PUSH
96543: EMPTY
96544: LIST
96545: LIST
96546: LIST
96547: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
96548: LD_ADDR_VAR 0 43
96552: PUSH
96553: LD_INT 2
96555: PUSH
96556: LD_INT 2
96558: PUSH
96559: EMPTY
96560: LIST
96561: LIST
96562: PUSH
96563: LD_INT 3
96565: PUSH
96566: LD_INT 2
96568: PUSH
96569: EMPTY
96570: LIST
96571: LIST
96572: PUSH
96573: LD_INT 2
96575: PUSH
96576: LD_INT 3
96578: PUSH
96579: EMPTY
96580: LIST
96581: LIST
96582: PUSH
96583: EMPTY
96584: LIST
96585: LIST
96586: LIST
96587: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
96588: LD_ADDR_VAR 0 44
96592: PUSH
96593: LD_INT 0
96595: PUSH
96596: LD_INT 2
96598: PUSH
96599: EMPTY
96600: LIST
96601: LIST
96602: PUSH
96603: LD_INT 1
96605: PUSH
96606: LD_INT 3
96608: PUSH
96609: EMPTY
96610: LIST
96611: LIST
96612: PUSH
96613: LD_INT 1
96615: NEG
96616: PUSH
96617: LD_INT 2
96619: PUSH
96620: EMPTY
96621: LIST
96622: LIST
96623: PUSH
96624: EMPTY
96625: LIST
96626: LIST
96627: LIST
96628: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
96629: LD_ADDR_VAR 0 45
96633: PUSH
96634: LD_INT 2
96636: NEG
96637: PUSH
96638: LD_INT 0
96640: PUSH
96641: EMPTY
96642: LIST
96643: LIST
96644: PUSH
96645: LD_INT 2
96647: NEG
96648: PUSH
96649: LD_INT 1
96651: PUSH
96652: EMPTY
96653: LIST
96654: LIST
96655: PUSH
96656: LD_INT 3
96658: NEG
96659: PUSH
96660: LD_INT 1
96662: NEG
96663: PUSH
96664: EMPTY
96665: LIST
96666: LIST
96667: PUSH
96668: EMPTY
96669: LIST
96670: LIST
96671: LIST
96672: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
96673: LD_ADDR_VAR 0 46
96677: PUSH
96678: LD_INT 2
96680: NEG
96681: PUSH
96682: LD_INT 2
96684: NEG
96685: PUSH
96686: EMPTY
96687: LIST
96688: LIST
96689: PUSH
96690: LD_INT 2
96692: NEG
96693: PUSH
96694: LD_INT 3
96696: NEG
96697: PUSH
96698: EMPTY
96699: LIST
96700: LIST
96701: PUSH
96702: LD_INT 3
96704: NEG
96705: PUSH
96706: LD_INT 2
96708: NEG
96709: PUSH
96710: EMPTY
96711: LIST
96712: LIST
96713: PUSH
96714: EMPTY
96715: LIST
96716: LIST
96717: LIST
96718: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
96719: LD_ADDR_VAR 0 47
96723: PUSH
96724: LD_INT 2
96726: NEG
96727: PUSH
96728: LD_INT 3
96730: NEG
96731: PUSH
96732: EMPTY
96733: LIST
96734: LIST
96735: PUSH
96736: LD_INT 1
96738: NEG
96739: PUSH
96740: LD_INT 3
96742: NEG
96743: PUSH
96744: EMPTY
96745: LIST
96746: LIST
96747: PUSH
96748: EMPTY
96749: LIST
96750: LIST
96751: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
96752: LD_ADDR_VAR 0 48
96756: PUSH
96757: LD_INT 1
96759: PUSH
96760: LD_INT 2
96762: NEG
96763: PUSH
96764: EMPTY
96765: LIST
96766: LIST
96767: PUSH
96768: LD_INT 2
96770: PUSH
96771: LD_INT 1
96773: NEG
96774: PUSH
96775: EMPTY
96776: LIST
96777: LIST
96778: PUSH
96779: EMPTY
96780: LIST
96781: LIST
96782: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
96783: LD_ADDR_VAR 0 49
96787: PUSH
96788: LD_INT 3
96790: PUSH
96791: LD_INT 1
96793: PUSH
96794: EMPTY
96795: LIST
96796: LIST
96797: PUSH
96798: LD_INT 3
96800: PUSH
96801: LD_INT 2
96803: PUSH
96804: EMPTY
96805: LIST
96806: LIST
96807: PUSH
96808: EMPTY
96809: LIST
96810: LIST
96811: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
96812: LD_ADDR_VAR 0 50
96816: PUSH
96817: LD_INT 2
96819: PUSH
96820: LD_INT 3
96822: PUSH
96823: EMPTY
96824: LIST
96825: LIST
96826: PUSH
96827: LD_INT 1
96829: PUSH
96830: LD_INT 3
96832: PUSH
96833: EMPTY
96834: LIST
96835: LIST
96836: PUSH
96837: EMPTY
96838: LIST
96839: LIST
96840: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
96841: LD_ADDR_VAR 0 51
96845: PUSH
96846: LD_INT 1
96848: NEG
96849: PUSH
96850: LD_INT 2
96852: PUSH
96853: EMPTY
96854: LIST
96855: LIST
96856: PUSH
96857: LD_INT 2
96859: NEG
96860: PUSH
96861: LD_INT 1
96863: PUSH
96864: EMPTY
96865: LIST
96866: LIST
96867: PUSH
96868: EMPTY
96869: LIST
96870: LIST
96871: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
96872: LD_ADDR_VAR 0 52
96876: PUSH
96877: LD_INT 3
96879: NEG
96880: PUSH
96881: LD_INT 1
96883: NEG
96884: PUSH
96885: EMPTY
96886: LIST
96887: LIST
96888: PUSH
96889: LD_INT 3
96891: NEG
96892: PUSH
96893: LD_INT 2
96895: NEG
96896: PUSH
96897: EMPTY
96898: LIST
96899: LIST
96900: PUSH
96901: EMPTY
96902: LIST
96903: LIST
96904: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
96905: LD_ADDR_VAR 0 53
96909: PUSH
96910: LD_INT 1
96912: NEG
96913: PUSH
96914: LD_INT 3
96916: NEG
96917: PUSH
96918: EMPTY
96919: LIST
96920: LIST
96921: PUSH
96922: LD_INT 0
96924: PUSH
96925: LD_INT 3
96927: NEG
96928: PUSH
96929: EMPTY
96930: LIST
96931: LIST
96932: PUSH
96933: LD_INT 1
96935: PUSH
96936: LD_INT 2
96938: NEG
96939: PUSH
96940: EMPTY
96941: LIST
96942: LIST
96943: PUSH
96944: EMPTY
96945: LIST
96946: LIST
96947: LIST
96948: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
96949: LD_ADDR_VAR 0 54
96953: PUSH
96954: LD_INT 2
96956: PUSH
96957: LD_INT 1
96959: NEG
96960: PUSH
96961: EMPTY
96962: LIST
96963: LIST
96964: PUSH
96965: LD_INT 3
96967: PUSH
96968: LD_INT 0
96970: PUSH
96971: EMPTY
96972: LIST
96973: LIST
96974: PUSH
96975: LD_INT 3
96977: PUSH
96978: LD_INT 1
96980: PUSH
96981: EMPTY
96982: LIST
96983: LIST
96984: PUSH
96985: EMPTY
96986: LIST
96987: LIST
96988: LIST
96989: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
96990: LD_ADDR_VAR 0 55
96994: PUSH
96995: LD_INT 3
96997: PUSH
96998: LD_INT 2
97000: PUSH
97001: EMPTY
97002: LIST
97003: LIST
97004: PUSH
97005: LD_INT 3
97007: PUSH
97008: LD_INT 3
97010: PUSH
97011: EMPTY
97012: LIST
97013: LIST
97014: PUSH
97015: LD_INT 2
97017: PUSH
97018: LD_INT 3
97020: PUSH
97021: EMPTY
97022: LIST
97023: LIST
97024: PUSH
97025: EMPTY
97026: LIST
97027: LIST
97028: LIST
97029: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
97030: LD_ADDR_VAR 0 56
97034: PUSH
97035: LD_INT 1
97037: PUSH
97038: LD_INT 3
97040: PUSH
97041: EMPTY
97042: LIST
97043: LIST
97044: PUSH
97045: LD_INT 0
97047: PUSH
97048: LD_INT 3
97050: PUSH
97051: EMPTY
97052: LIST
97053: LIST
97054: PUSH
97055: LD_INT 1
97057: NEG
97058: PUSH
97059: LD_INT 2
97061: PUSH
97062: EMPTY
97063: LIST
97064: LIST
97065: PUSH
97066: EMPTY
97067: LIST
97068: LIST
97069: LIST
97070: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
97071: LD_ADDR_VAR 0 57
97075: PUSH
97076: LD_INT 2
97078: NEG
97079: PUSH
97080: LD_INT 1
97082: PUSH
97083: EMPTY
97084: LIST
97085: LIST
97086: PUSH
97087: LD_INT 3
97089: NEG
97090: PUSH
97091: LD_INT 0
97093: PUSH
97094: EMPTY
97095: LIST
97096: LIST
97097: PUSH
97098: LD_INT 3
97100: NEG
97101: PUSH
97102: LD_INT 1
97104: NEG
97105: PUSH
97106: EMPTY
97107: LIST
97108: LIST
97109: PUSH
97110: EMPTY
97111: LIST
97112: LIST
97113: LIST
97114: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
97115: LD_ADDR_VAR 0 58
97119: PUSH
97120: LD_INT 2
97122: NEG
97123: PUSH
97124: LD_INT 3
97126: NEG
97127: PUSH
97128: EMPTY
97129: LIST
97130: LIST
97131: PUSH
97132: LD_INT 3
97134: NEG
97135: PUSH
97136: LD_INT 2
97138: NEG
97139: PUSH
97140: EMPTY
97141: LIST
97142: LIST
97143: PUSH
97144: LD_INT 3
97146: NEG
97147: PUSH
97148: LD_INT 3
97150: NEG
97151: PUSH
97152: EMPTY
97153: LIST
97154: LIST
97155: PUSH
97156: EMPTY
97157: LIST
97158: LIST
97159: LIST
97160: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
97161: LD_ADDR_VAR 0 59
97165: PUSH
97166: LD_INT 1
97168: NEG
97169: PUSH
97170: LD_INT 2
97172: NEG
97173: PUSH
97174: EMPTY
97175: LIST
97176: LIST
97177: PUSH
97178: LD_INT 0
97180: PUSH
97181: LD_INT 2
97183: NEG
97184: PUSH
97185: EMPTY
97186: LIST
97187: LIST
97188: PUSH
97189: LD_INT 1
97191: PUSH
97192: LD_INT 1
97194: NEG
97195: PUSH
97196: EMPTY
97197: LIST
97198: LIST
97199: PUSH
97200: EMPTY
97201: LIST
97202: LIST
97203: LIST
97204: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
97205: LD_ADDR_VAR 0 60
97209: PUSH
97210: LD_INT 1
97212: PUSH
97213: LD_INT 1
97215: NEG
97216: PUSH
97217: EMPTY
97218: LIST
97219: LIST
97220: PUSH
97221: LD_INT 2
97223: PUSH
97224: LD_INT 0
97226: PUSH
97227: EMPTY
97228: LIST
97229: LIST
97230: PUSH
97231: LD_INT 2
97233: PUSH
97234: LD_INT 1
97236: PUSH
97237: EMPTY
97238: LIST
97239: LIST
97240: PUSH
97241: EMPTY
97242: LIST
97243: LIST
97244: LIST
97245: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
97246: LD_ADDR_VAR 0 61
97250: PUSH
97251: LD_INT 2
97253: PUSH
97254: LD_INT 1
97256: PUSH
97257: EMPTY
97258: LIST
97259: LIST
97260: PUSH
97261: LD_INT 2
97263: PUSH
97264: LD_INT 2
97266: PUSH
97267: EMPTY
97268: LIST
97269: LIST
97270: PUSH
97271: LD_INT 1
97273: PUSH
97274: LD_INT 2
97276: PUSH
97277: EMPTY
97278: LIST
97279: LIST
97280: PUSH
97281: EMPTY
97282: LIST
97283: LIST
97284: LIST
97285: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
97286: LD_ADDR_VAR 0 62
97290: PUSH
97291: LD_INT 1
97293: PUSH
97294: LD_INT 2
97296: PUSH
97297: EMPTY
97298: LIST
97299: LIST
97300: PUSH
97301: LD_INT 0
97303: PUSH
97304: LD_INT 2
97306: PUSH
97307: EMPTY
97308: LIST
97309: LIST
97310: PUSH
97311: LD_INT 1
97313: NEG
97314: PUSH
97315: LD_INT 1
97317: PUSH
97318: EMPTY
97319: LIST
97320: LIST
97321: PUSH
97322: EMPTY
97323: LIST
97324: LIST
97325: LIST
97326: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
97327: LD_ADDR_VAR 0 63
97331: PUSH
97332: LD_INT 1
97334: NEG
97335: PUSH
97336: LD_INT 1
97338: PUSH
97339: EMPTY
97340: LIST
97341: LIST
97342: PUSH
97343: LD_INT 2
97345: NEG
97346: PUSH
97347: LD_INT 0
97349: PUSH
97350: EMPTY
97351: LIST
97352: LIST
97353: PUSH
97354: LD_INT 2
97356: NEG
97357: PUSH
97358: LD_INT 1
97360: NEG
97361: PUSH
97362: EMPTY
97363: LIST
97364: LIST
97365: PUSH
97366: EMPTY
97367: LIST
97368: LIST
97369: LIST
97370: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
97371: LD_ADDR_VAR 0 64
97375: PUSH
97376: LD_INT 1
97378: NEG
97379: PUSH
97380: LD_INT 2
97382: NEG
97383: PUSH
97384: EMPTY
97385: LIST
97386: LIST
97387: PUSH
97388: LD_INT 2
97390: NEG
97391: PUSH
97392: LD_INT 1
97394: NEG
97395: PUSH
97396: EMPTY
97397: LIST
97398: LIST
97399: PUSH
97400: LD_INT 2
97402: NEG
97403: PUSH
97404: LD_INT 2
97406: NEG
97407: PUSH
97408: EMPTY
97409: LIST
97410: LIST
97411: PUSH
97412: EMPTY
97413: LIST
97414: LIST
97415: LIST
97416: ST_TO_ADDR
// end ; 2 :
97417: GO 100683
97419: LD_INT 2
97421: DOUBLE
97422: EQUAL
97423: IFTRUE 97427
97425: GO 100682
97427: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
97428: LD_ADDR_VAR 0 29
97432: PUSH
97433: LD_INT 4
97435: PUSH
97436: LD_INT 0
97438: PUSH
97439: EMPTY
97440: LIST
97441: LIST
97442: PUSH
97443: LD_INT 4
97445: PUSH
97446: LD_INT 1
97448: NEG
97449: PUSH
97450: EMPTY
97451: LIST
97452: LIST
97453: PUSH
97454: LD_INT 5
97456: PUSH
97457: LD_INT 0
97459: PUSH
97460: EMPTY
97461: LIST
97462: LIST
97463: PUSH
97464: LD_INT 5
97466: PUSH
97467: LD_INT 1
97469: PUSH
97470: EMPTY
97471: LIST
97472: LIST
97473: PUSH
97474: LD_INT 4
97476: PUSH
97477: LD_INT 1
97479: PUSH
97480: EMPTY
97481: LIST
97482: LIST
97483: PUSH
97484: LD_INT 3
97486: PUSH
97487: LD_INT 0
97489: PUSH
97490: EMPTY
97491: LIST
97492: LIST
97493: PUSH
97494: LD_INT 3
97496: PUSH
97497: LD_INT 1
97499: NEG
97500: PUSH
97501: EMPTY
97502: LIST
97503: LIST
97504: PUSH
97505: LD_INT 3
97507: PUSH
97508: LD_INT 2
97510: NEG
97511: PUSH
97512: EMPTY
97513: LIST
97514: LIST
97515: PUSH
97516: LD_INT 5
97518: PUSH
97519: LD_INT 2
97521: PUSH
97522: EMPTY
97523: LIST
97524: LIST
97525: PUSH
97526: LD_INT 3
97528: PUSH
97529: LD_INT 3
97531: PUSH
97532: EMPTY
97533: LIST
97534: LIST
97535: PUSH
97536: LD_INT 3
97538: PUSH
97539: LD_INT 2
97541: PUSH
97542: EMPTY
97543: LIST
97544: LIST
97545: PUSH
97546: LD_INT 4
97548: PUSH
97549: LD_INT 3
97551: PUSH
97552: EMPTY
97553: LIST
97554: LIST
97555: PUSH
97556: LD_INT 4
97558: PUSH
97559: LD_INT 4
97561: PUSH
97562: EMPTY
97563: LIST
97564: LIST
97565: PUSH
97566: LD_INT 3
97568: PUSH
97569: LD_INT 4
97571: PUSH
97572: EMPTY
97573: LIST
97574: LIST
97575: PUSH
97576: LD_INT 2
97578: PUSH
97579: LD_INT 3
97581: PUSH
97582: EMPTY
97583: LIST
97584: LIST
97585: PUSH
97586: LD_INT 2
97588: PUSH
97589: LD_INT 2
97591: PUSH
97592: EMPTY
97593: LIST
97594: LIST
97595: PUSH
97596: LD_INT 4
97598: PUSH
97599: LD_INT 2
97601: PUSH
97602: EMPTY
97603: LIST
97604: LIST
97605: PUSH
97606: LD_INT 2
97608: PUSH
97609: LD_INT 4
97611: PUSH
97612: EMPTY
97613: LIST
97614: LIST
97615: PUSH
97616: LD_INT 0
97618: PUSH
97619: LD_INT 4
97621: PUSH
97622: EMPTY
97623: LIST
97624: LIST
97625: PUSH
97626: LD_INT 0
97628: PUSH
97629: LD_INT 3
97631: PUSH
97632: EMPTY
97633: LIST
97634: LIST
97635: PUSH
97636: LD_INT 1
97638: PUSH
97639: LD_INT 4
97641: PUSH
97642: EMPTY
97643: LIST
97644: LIST
97645: PUSH
97646: LD_INT 1
97648: PUSH
97649: LD_INT 5
97651: PUSH
97652: EMPTY
97653: LIST
97654: LIST
97655: PUSH
97656: LD_INT 0
97658: PUSH
97659: LD_INT 5
97661: PUSH
97662: EMPTY
97663: LIST
97664: LIST
97665: PUSH
97666: LD_INT 1
97668: NEG
97669: PUSH
97670: LD_INT 4
97672: PUSH
97673: EMPTY
97674: LIST
97675: LIST
97676: PUSH
97677: LD_INT 1
97679: NEG
97680: PUSH
97681: LD_INT 3
97683: PUSH
97684: EMPTY
97685: LIST
97686: LIST
97687: PUSH
97688: LD_INT 2
97690: PUSH
97691: LD_INT 5
97693: PUSH
97694: EMPTY
97695: LIST
97696: LIST
97697: PUSH
97698: LD_INT 2
97700: NEG
97701: PUSH
97702: LD_INT 3
97704: PUSH
97705: EMPTY
97706: LIST
97707: LIST
97708: PUSH
97709: LD_INT 3
97711: NEG
97712: PUSH
97713: LD_INT 0
97715: PUSH
97716: EMPTY
97717: LIST
97718: LIST
97719: PUSH
97720: LD_INT 3
97722: NEG
97723: PUSH
97724: LD_INT 1
97726: NEG
97727: PUSH
97728: EMPTY
97729: LIST
97730: LIST
97731: PUSH
97732: LD_INT 2
97734: NEG
97735: PUSH
97736: LD_INT 0
97738: PUSH
97739: EMPTY
97740: LIST
97741: LIST
97742: PUSH
97743: LD_INT 2
97745: NEG
97746: PUSH
97747: LD_INT 1
97749: PUSH
97750: EMPTY
97751: LIST
97752: LIST
97753: PUSH
97754: LD_INT 3
97756: NEG
97757: PUSH
97758: LD_INT 1
97760: PUSH
97761: EMPTY
97762: LIST
97763: LIST
97764: PUSH
97765: LD_INT 4
97767: NEG
97768: PUSH
97769: LD_INT 0
97771: PUSH
97772: EMPTY
97773: LIST
97774: LIST
97775: PUSH
97776: LD_INT 4
97778: NEG
97779: PUSH
97780: LD_INT 1
97782: NEG
97783: PUSH
97784: EMPTY
97785: LIST
97786: LIST
97787: PUSH
97788: LD_INT 4
97790: NEG
97791: PUSH
97792: LD_INT 2
97794: NEG
97795: PUSH
97796: EMPTY
97797: LIST
97798: LIST
97799: PUSH
97800: LD_INT 2
97802: NEG
97803: PUSH
97804: LD_INT 2
97806: PUSH
97807: EMPTY
97808: LIST
97809: LIST
97810: PUSH
97811: LD_INT 4
97813: NEG
97814: PUSH
97815: LD_INT 4
97817: NEG
97818: PUSH
97819: EMPTY
97820: LIST
97821: LIST
97822: PUSH
97823: LD_INT 4
97825: NEG
97826: PUSH
97827: LD_INT 5
97829: NEG
97830: PUSH
97831: EMPTY
97832: LIST
97833: LIST
97834: PUSH
97835: LD_INT 3
97837: NEG
97838: PUSH
97839: LD_INT 4
97841: NEG
97842: PUSH
97843: EMPTY
97844: LIST
97845: LIST
97846: PUSH
97847: LD_INT 3
97849: NEG
97850: PUSH
97851: LD_INT 3
97853: NEG
97854: PUSH
97855: EMPTY
97856: LIST
97857: LIST
97858: PUSH
97859: LD_INT 4
97861: NEG
97862: PUSH
97863: LD_INT 3
97865: NEG
97866: PUSH
97867: EMPTY
97868: LIST
97869: LIST
97870: PUSH
97871: LD_INT 5
97873: NEG
97874: PUSH
97875: LD_INT 4
97877: NEG
97878: PUSH
97879: EMPTY
97880: LIST
97881: LIST
97882: PUSH
97883: LD_INT 5
97885: NEG
97886: PUSH
97887: LD_INT 5
97889: NEG
97890: PUSH
97891: EMPTY
97892: LIST
97893: LIST
97894: PUSH
97895: LD_INT 3
97897: NEG
97898: PUSH
97899: LD_INT 5
97901: NEG
97902: PUSH
97903: EMPTY
97904: LIST
97905: LIST
97906: PUSH
97907: LD_INT 5
97909: NEG
97910: PUSH
97911: LD_INT 3
97913: NEG
97914: PUSH
97915: EMPTY
97916: LIST
97917: LIST
97918: PUSH
97919: EMPTY
97920: LIST
97921: LIST
97922: LIST
97923: LIST
97924: LIST
97925: LIST
97926: LIST
97927: LIST
97928: LIST
97929: LIST
97930: LIST
97931: LIST
97932: LIST
97933: LIST
97934: LIST
97935: LIST
97936: LIST
97937: LIST
97938: LIST
97939: LIST
97940: LIST
97941: LIST
97942: LIST
97943: LIST
97944: LIST
97945: LIST
97946: LIST
97947: LIST
97948: LIST
97949: LIST
97950: LIST
97951: LIST
97952: LIST
97953: LIST
97954: LIST
97955: LIST
97956: LIST
97957: LIST
97958: LIST
97959: LIST
97960: LIST
97961: LIST
97962: LIST
97963: LIST
97964: LIST
97965: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
97966: LD_ADDR_VAR 0 30
97970: PUSH
97971: LD_INT 4
97973: PUSH
97974: LD_INT 4
97976: PUSH
97977: EMPTY
97978: LIST
97979: LIST
97980: PUSH
97981: LD_INT 4
97983: PUSH
97984: LD_INT 3
97986: PUSH
97987: EMPTY
97988: LIST
97989: LIST
97990: PUSH
97991: LD_INT 5
97993: PUSH
97994: LD_INT 4
97996: PUSH
97997: EMPTY
97998: LIST
97999: LIST
98000: PUSH
98001: LD_INT 5
98003: PUSH
98004: LD_INT 5
98006: PUSH
98007: EMPTY
98008: LIST
98009: LIST
98010: PUSH
98011: LD_INT 4
98013: PUSH
98014: LD_INT 5
98016: PUSH
98017: EMPTY
98018: LIST
98019: LIST
98020: PUSH
98021: LD_INT 3
98023: PUSH
98024: LD_INT 4
98026: PUSH
98027: EMPTY
98028: LIST
98029: LIST
98030: PUSH
98031: LD_INT 3
98033: PUSH
98034: LD_INT 3
98036: PUSH
98037: EMPTY
98038: LIST
98039: LIST
98040: PUSH
98041: LD_INT 5
98043: PUSH
98044: LD_INT 3
98046: PUSH
98047: EMPTY
98048: LIST
98049: LIST
98050: PUSH
98051: LD_INT 3
98053: PUSH
98054: LD_INT 5
98056: PUSH
98057: EMPTY
98058: LIST
98059: LIST
98060: PUSH
98061: LD_INT 0
98063: PUSH
98064: LD_INT 3
98066: PUSH
98067: EMPTY
98068: LIST
98069: LIST
98070: PUSH
98071: LD_INT 0
98073: PUSH
98074: LD_INT 2
98076: PUSH
98077: EMPTY
98078: LIST
98079: LIST
98080: PUSH
98081: LD_INT 1
98083: PUSH
98084: LD_INT 3
98086: PUSH
98087: EMPTY
98088: LIST
98089: LIST
98090: PUSH
98091: LD_INT 1
98093: PUSH
98094: LD_INT 4
98096: PUSH
98097: EMPTY
98098: LIST
98099: LIST
98100: PUSH
98101: LD_INT 0
98103: PUSH
98104: LD_INT 4
98106: PUSH
98107: EMPTY
98108: LIST
98109: LIST
98110: PUSH
98111: LD_INT 1
98113: NEG
98114: PUSH
98115: LD_INT 3
98117: PUSH
98118: EMPTY
98119: LIST
98120: LIST
98121: PUSH
98122: LD_INT 1
98124: NEG
98125: PUSH
98126: LD_INT 2
98128: PUSH
98129: EMPTY
98130: LIST
98131: LIST
98132: PUSH
98133: LD_INT 2
98135: PUSH
98136: LD_INT 4
98138: PUSH
98139: EMPTY
98140: LIST
98141: LIST
98142: PUSH
98143: LD_INT 2
98145: NEG
98146: PUSH
98147: LD_INT 2
98149: PUSH
98150: EMPTY
98151: LIST
98152: LIST
98153: PUSH
98154: LD_INT 4
98156: NEG
98157: PUSH
98158: LD_INT 0
98160: PUSH
98161: EMPTY
98162: LIST
98163: LIST
98164: PUSH
98165: LD_INT 4
98167: NEG
98168: PUSH
98169: LD_INT 1
98171: NEG
98172: PUSH
98173: EMPTY
98174: LIST
98175: LIST
98176: PUSH
98177: LD_INT 3
98179: NEG
98180: PUSH
98181: LD_INT 0
98183: PUSH
98184: EMPTY
98185: LIST
98186: LIST
98187: PUSH
98188: LD_INT 3
98190: NEG
98191: PUSH
98192: LD_INT 1
98194: PUSH
98195: EMPTY
98196: LIST
98197: LIST
98198: PUSH
98199: LD_INT 4
98201: NEG
98202: PUSH
98203: LD_INT 1
98205: PUSH
98206: EMPTY
98207: LIST
98208: LIST
98209: PUSH
98210: LD_INT 5
98212: NEG
98213: PUSH
98214: LD_INT 0
98216: PUSH
98217: EMPTY
98218: LIST
98219: LIST
98220: PUSH
98221: LD_INT 5
98223: NEG
98224: PUSH
98225: LD_INT 1
98227: NEG
98228: PUSH
98229: EMPTY
98230: LIST
98231: LIST
98232: PUSH
98233: LD_INT 5
98235: NEG
98236: PUSH
98237: LD_INT 2
98239: NEG
98240: PUSH
98241: EMPTY
98242: LIST
98243: LIST
98244: PUSH
98245: LD_INT 3
98247: NEG
98248: PUSH
98249: LD_INT 2
98251: PUSH
98252: EMPTY
98253: LIST
98254: LIST
98255: PUSH
98256: LD_INT 3
98258: NEG
98259: PUSH
98260: LD_INT 3
98262: NEG
98263: PUSH
98264: EMPTY
98265: LIST
98266: LIST
98267: PUSH
98268: LD_INT 3
98270: NEG
98271: PUSH
98272: LD_INT 4
98274: NEG
98275: PUSH
98276: EMPTY
98277: LIST
98278: LIST
98279: PUSH
98280: LD_INT 2
98282: NEG
98283: PUSH
98284: LD_INT 3
98286: NEG
98287: PUSH
98288: EMPTY
98289: LIST
98290: LIST
98291: PUSH
98292: LD_INT 2
98294: NEG
98295: PUSH
98296: LD_INT 2
98298: NEG
98299: PUSH
98300: EMPTY
98301: LIST
98302: LIST
98303: PUSH
98304: LD_INT 3
98306: NEG
98307: PUSH
98308: LD_INT 2
98310: NEG
98311: PUSH
98312: EMPTY
98313: LIST
98314: LIST
98315: PUSH
98316: LD_INT 4
98318: NEG
98319: PUSH
98320: LD_INT 3
98322: NEG
98323: PUSH
98324: EMPTY
98325: LIST
98326: LIST
98327: PUSH
98328: LD_INT 4
98330: NEG
98331: PUSH
98332: LD_INT 4
98334: NEG
98335: PUSH
98336: EMPTY
98337: LIST
98338: LIST
98339: PUSH
98340: LD_INT 2
98342: NEG
98343: PUSH
98344: LD_INT 4
98346: NEG
98347: PUSH
98348: EMPTY
98349: LIST
98350: LIST
98351: PUSH
98352: LD_INT 4
98354: NEG
98355: PUSH
98356: LD_INT 2
98358: NEG
98359: PUSH
98360: EMPTY
98361: LIST
98362: LIST
98363: PUSH
98364: LD_INT 0
98366: PUSH
98367: LD_INT 4
98369: NEG
98370: PUSH
98371: EMPTY
98372: LIST
98373: LIST
98374: PUSH
98375: LD_INT 0
98377: PUSH
98378: LD_INT 5
98380: NEG
98381: PUSH
98382: EMPTY
98383: LIST
98384: LIST
98385: PUSH
98386: LD_INT 1
98388: PUSH
98389: LD_INT 4
98391: NEG
98392: PUSH
98393: EMPTY
98394: LIST
98395: LIST
98396: PUSH
98397: LD_INT 1
98399: PUSH
98400: LD_INT 3
98402: NEG
98403: PUSH
98404: EMPTY
98405: LIST
98406: LIST
98407: PUSH
98408: LD_INT 0
98410: PUSH
98411: LD_INT 3
98413: NEG
98414: PUSH
98415: EMPTY
98416: LIST
98417: LIST
98418: PUSH
98419: LD_INT 1
98421: NEG
98422: PUSH
98423: LD_INT 4
98425: NEG
98426: PUSH
98427: EMPTY
98428: LIST
98429: LIST
98430: PUSH
98431: LD_INT 1
98433: NEG
98434: PUSH
98435: LD_INT 5
98437: NEG
98438: PUSH
98439: EMPTY
98440: LIST
98441: LIST
98442: PUSH
98443: LD_INT 2
98445: PUSH
98446: LD_INT 3
98448: NEG
98449: PUSH
98450: EMPTY
98451: LIST
98452: LIST
98453: PUSH
98454: LD_INT 2
98456: NEG
98457: PUSH
98458: LD_INT 5
98460: NEG
98461: PUSH
98462: EMPTY
98463: LIST
98464: LIST
98465: PUSH
98466: EMPTY
98467: LIST
98468: LIST
98469: LIST
98470: LIST
98471: LIST
98472: LIST
98473: LIST
98474: LIST
98475: LIST
98476: LIST
98477: LIST
98478: LIST
98479: LIST
98480: LIST
98481: LIST
98482: LIST
98483: LIST
98484: LIST
98485: LIST
98486: LIST
98487: LIST
98488: LIST
98489: LIST
98490: LIST
98491: LIST
98492: LIST
98493: LIST
98494: LIST
98495: LIST
98496: LIST
98497: LIST
98498: LIST
98499: LIST
98500: LIST
98501: LIST
98502: LIST
98503: LIST
98504: LIST
98505: LIST
98506: LIST
98507: LIST
98508: LIST
98509: LIST
98510: LIST
98511: LIST
98512: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
98513: LD_ADDR_VAR 0 31
98517: PUSH
98518: LD_INT 0
98520: PUSH
98521: LD_INT 4
98523: PUSH
98524: EMPTY
98525: LIST
98526: LIST
98527: PUSH
98528: LD_INT 0
98530: PUSH
98531: LD_INT 3
98533: PUSH
98534: EMPTY
98535: LIST
98536: LIST
98537: PUSH
98538: LD_INT 1
98540: PUSH
98541: LD_INT 4
98543: PUSH
98544: EMPTY
98545: LIST
98546: LIST
98547: PUSH
98548: LD_INT 1
98550: PUSH
98551: LD_INT 5
98553: PUSH
98554: EMPTY
98555: LIST
98556: LIST
98557: PUSH
98558: LD_INT 0
98560: PUSH
98561: LD_INT 5
98563: PUSH
98564: EMPTY
98565: LIST
98566: LIST
98567: PUSH
98568: LD_INT 1
98570: NEG
98571: PUSH
98572: LD_INT 4
98574: PUSH
98575: EMPTY
98576: LIST
98577: LIST
98578: PUSH
98579: LD_INT 1
98581: NEG
98582: PUSH
98583: LD_INT 3
98585: PUSH
98586: EMPTY
98587: LIST
98588: LIST
98589: PUSH
98590: LD_INT 2
98592: PUSH
98593: LD_INT 5
98595: PUSH
98596: EMPTY
98597: LIST
98598: LIST
98599: PUSH
98600: LD_INT 2
98602: NEG
98603: PUSH
98604: LD_INT 3
98606: PUSH
98607: EMPTY
98608: LIST
98609: LIST
98610: PUSH
98611: LD_INT 3
98613: NEG
98614: PUSH
98615: LD_INT 0
98617: PUSH
98618: EMPTY
98619: LIST
98620: LIST
98621: PUSH
98622: LD_INT 3
98624: NEG
98625: PUSH
98626: LD_INT 1
98628: NEG
98629: PUSH
98630: EMPTY
98631: LIST
98632: LIST
98633: PUSH
98634: LD_INT 2
98636: NEG
98637: PUSH
98638: LD_INT 0
98640: PUSH
98641: EMPTY
98642: LIST
98643: LIST
98644: PUSH
98645: LD_INT 2
98647: NEG
98648: PUSH
98649: LD_INT 1
98651: PUSH
98652: EMPTY
98653: LIST
98654: LIST
98655: PUSH
98656: LD_INT 3
98658: NEG
98659: PUSH
98660: LD_INT 1
98662: PUSH
98663: EMPTY
98664: LIST
98665: LIST
98666: PUSH
98667: LD_INT 4
98669: NEG
98670: PUSH
98671: LD_INT 0
98673: PUSH
98674: EMPTY
98675: LIST
98676: LIST
98677: PUSH
98678: LD_INT 4
98680: NEG
98681: PUSH
98682: LD_INT 1
98684: NEG
98685: PUSH
98686: EMPTY
98687: LIST
98688: LIST
98689: PUSH
98690: LD_INT 4
98692: NEG
98693: PUSH
98694: LD_INT 2
98696: NEG
98697: PUSH
98698: EMPTY
98699: LIST
98700: LIST
98701: PUSH
98702: LD_INT 2
98704: NEG
98705: PUSH
98706: LD_INT 2
98708: PUSH
98709: EMPTY
98710: LIST
98711: LIST
98712: PUSH
98713: LD_INT 4
98715: NEG
98716: PUSH
98717: LD_INT 4
98719: NEG
98720: PUSH
98721: EMPTY
98722: LIST
98723: LIST
98724: PUSH
98725: LD_INT 4
98727: NEG
98728: PUSH
98729: LD_INT 5
98731: NEG
98732: PUSH
98733: EMPTY
98734: LIST
98735: LIST
98736: PUSH
98737: LD_INT 3
98739: NEG
98740: PUSH
98741: LD_INT 4
98743: NEG
98744: PUSH
98745: EMPTY
98746: LIST
98747: LIST
98748: PUSH
98749: LD_INT 3
98751: NEG
98752: PUSH
98753: LD_INT 3
98755: NEG
98756: PUSH
98757: EMPTY
98758: LIST
98759: LIST
98760: PUSH
98761: LD_INT 4
98763: NEG
98764: PUSH
98765: LD_INT 3
98767: NEG
98768: PUSH
98769: EMPTY
98770: LIST
98771: LIST
98772: PUSH
98773: LD_INT 5
98775: NEG
98776: PUSH
98777: LD_INT 4
98779: NEG
98780: PUSH
98781: EMPTY
98782: LIST
98783: LIST
98784: PUSH
98785: LD_INT 5
98787: NEG
98788: PUSH
98789: LD_INT 5
98791: NEG
98792: PUSH
98793: EMPTY
98794: LIST
98795: LIST
98796: PUSH
98797: LD_INT 3
98799: NEG
98800: PUSH
98801: LD_INT 5
98803: NEG
98804: PUSH
98805: EMPTY
98806: LIST
98807: LIST
98808: PUSH
98809: LD_INT 5
98811: NEG
98812: PUSH
98813: LD_INT 3
98815: NEG
98816: PUSH
98817: EMPTY
98818: LIST
98819: LIST
98820: PUSH
98821: LD_INT 0
98823: PUSH
98824: LD_INT 3
98826: NEG
98827: PUSH
98828: EMPTY
98829: LIST
98830: LIST
98831: PUSH
98832: LD_INT 0
98834: PUSH
98835: LD_INT 4
98837: NEG
98838: PUSH
98839: EMPTY
98840: LIST
98841: LIST
98842: PUSH
98843: LD_INT 1
98845: PUSH
98846: LD_INT 3
98848: NEG
98849: PUSH
98850: EMPTY
98851: LIST
98852: LIST
98853: PUSH
98854: LD_INT 1
98856: PUSH
98857: LD_INT 2
98859: NEG
98860: PUSH
98861: EMPTY
98862: LIST
98863: LIST
98864: PUSH
98865: LD_INT 0
98867: PUSH
98868: LD_INT 2
98870: NEG
98871: PUSH
98872: EMPTY
98873: LIST
98874: LIST
98875: PUSH
98876: LD_INT 1
98878: NEG
98879: PUSH
98880: LD_INT 3
98882: NEG
98883: PUSH
98884: EMPTY
98885: LIST
98886: LIST
98887: PUSH
98888: LD_INT 1
98890: NEG
98891: PUSH
98892: LD_INT 4
98894: NEG
98895: PUSH
98896: EMPTY
98897: LIST
98898: LIST
98899: PUSH
98900: LD_INT 2
98902: PUSH
98903: LD_INT 2
98905: NEG
98906: PUSH
98907: EMPTY
98908: LIST
98909: LIST
98910: PUSH
98911: LD_INT 2
98913: NEG
98914: PUSH
98915: LD_INT 4
98917: NEG
98918: PUSH
98919: EMPTY
98920: LIST
98921: LIST
98922: PUSH
98923: LD_INT 4
98925: PUSH
98926: LD_INT 0
98928: PUSH
98929: EMPTY
98930: LIST
98931: LIST
98932: PUSH
98933: LD_INT 4
98935: PUSH
98936: LD_INT 1
98938: NEG
98939: PUSH
98940: EMPTY
98941: LIST
98942: LIST
98943: PUSH
98944: LD_INT 5
98946: PUSH
98947: LD_INT 0
98949: PUSH
98950: EMPTY
98951: LIST
98952: LIST
98953: PUSH
98954: LD_INT 5
98956: PUSH
98957: LD_INT 1
98959: PUSH
98960: EMPTY
98961: LIST
98962: LIST
98963: PUSH
98964: LD_INT 4
98966: PUSH
98967: LD_INT 1
98969: PUSH
98970: EMPTY
98971: LIST
98972: LIST
98973: PUSH
98974: LD_INT 3
98976: PUSH
98977: LD_INT 0
98979: PUSH
98980: EMPTY
98981: LIST
98982: LIST
98983: PUSH
98984: LD_INT 3
98986: PUSH
98987: LD_INT 1
98989: NEG
98990: PUSH
98991: EMPTY
98992: LIST
98993: LIST
98994: PUSH
98995: LD_INT 3
98997: PUSH
98998: LD_INT 2
99000: NEG
99001: PUSH
99002: EMPTY
99003: LIST
99004: LIST
99005: PUSH
99006: LD_INT 5
99008: PUSH
99009: LD_INT 2
99011: PUSH
99012: EMPTY
99013: LIST
99014: LIST
99015: PUSH
99016: EMPTY
99017: LIST
99018: LIST
99019: LIST
99020: LIST
99021: LIST
99022: LIST
99023: LIST
99024: LIST
99025: LIST
99026: LIST
99027: LIST
99028: LIST
99029: LIST
99030: LIST
99031: LIST
99032: LIST
99033: LIST
99034: LIST
99035: LIST
99036: LIST
99037: LIST
99038: LIST
99039: LIST
99040: LIST
99041: LIST
99042: LIST
99043: LIST
99044: LIST
99045: LIST
99046: LIST
99047: LIST
99048: LIST
99049: LIST
99050: LIST
99051: LIST
99052: LIST
99053: LIST
99054: LIST
99055: LIST
99056: LIST
99057: LIST
99058: LIST
99059: LIST
99060: LIST
99061: LIST
99062: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
99063: LD_ADDR_VAR 0 32
99067: PUSH
99068: LD_INT 4
99070: NEG
99071: PUSH
99072: LD_INT 0
99074: PUSH
99075: EMPTY
99076: LIST
99077: LIST
99078: PUSH
99079: LD_INT 4
99081: NEG
99082: PUSH
99083: LD_INT 1
99085: NEG
99086: PUSH
99087: EMPTY
99088: LIST
99089: LIST
99090: PUSH
99091: LD_INT 3
99093: NEG
99094: PUSH
99095: LD_INT 0
99097: PUSH
99098: EMPTY
99099: LIST
99100: LIST
99101: PUSH
99102: LD_INT 3
99104: NEG
99105: PUSH
99106: LD_INT 1
99108: PUSH
99109: EMPTY
99110: LIST
99111: LIST
99112: PUSH
99113: LD_INT 4
99115: NEG
99116: PUSH
99117: LD_INT 1
99119: PUSH
99120: EMPTY
99121: LIST
99122: LIST
99123: PUSH
99124: LD_INT 5
99126: NEG
99127: PUSH
99128: LD_INT 0
99130: PUSH
99131: EMPTY
99132: LIST
99133: LIST
99134: PUSH
99135: LD_INT 5
99137: NEG
99138: PUSH
99139: LD_INT 1
99141: NEG
99142: PUSH
99143: EMPTY
99144: LIST
99145: LIST
99146: PUSH
99147: LD_INT 5
99149: NEG
99150: PUSH
99151: LD_INT 2
99153: NEG
99154: PUSH
99155: EMPTY
99156: LIST
99157: LIST
99158: PUSH
99159: LD_INT 3
99161: NEG
99162: PUSH
99163: LD_INT 2
99165: PUSH
99166: EMPTY
99167: LIST
99168: LIST
99169: PUSH
99170: LD_INT 3
99172: NEG
99173: PUSH
99174: LD_INT 3
99176: NEG
99177: PUSH
99178: EMPTY
99179: LIST
99180: LIST
99181: PUSH
99182: LD_INT 3
99184: NEG
99185: PUSH
99186: LD_INT 4
99188: NEG
99189: PUSH
99190: EMPTY
99191: LIST
99192: LIST
99193: PUSH
99194: LD_INT 2
99196: NEG
99197: PUSH
99198: LD_INT 3
99200: NEG
99201: PUSH
99202: EMPTY
99203: LIST
99204: LIST
99205: PUSH
99206: LD_INT 2
99208: NEG
99209: PUSH
99210: LD_INT 2
99212: NEG
99213: PUSH
99214: EMPTY
99215: LIST
99216: LIST
99217: PUSH
99218: LD_INT 3
99220: NEG
99221: PUSH
99222: LD_INT 2
99224: NEG
99225: PUSH
99226: EMPTY
99227: LIST
99228: LIST
99229: PUSH
99230: LD_INT 4
99232: NEG
99233: PUSH
99234: LD_INT 3
99236: NEG
99237: PUSH
99238: EMPTY
99239: LIST
99240: LIST
99241: PUSH
99242: LD_INT 4
99244: NEG
99245: PUSH
99246: LD_INT 4
99248: NEG
99249: PUSH
99250: EMPTY
99251: LIST
99252: LIST
99253: PUSH
99254: LD_INT 2
99256: NEG
99257: PUSH
99258: LD_INT 4
99260: NEG
99261: PUSH
99262: EMPTY
99263: LIST
99264: LIST
99265: PUSH
99266: LD_INT 4
99268: NEG
99269: PUSH
99270: LD_INT 2
99272: NEG
99273: PUSH
99274: EMPTY
99275: LIST
99276: LIST
99277: PUSH
99278: LD_INT 0
99280: PUSH
99281: LD_INT 4
99283: NEG
99284: PUSH
99285: EMPTY
99286: LIST
99287: LIST
99288: PUSH
99289: LD_INT 0
99291: PUSH
99292: LD_INT 5
99294: NEG
99295: PUSH
99296: EMPTY
99297: LIST
99298: LIST
99299: PUSH
99300: LD_INT 1
99302: PUSH
99303: LD_INT 4
99305: NEG
99306: PUSH
99307: EMPTY
99308: LIST
99309: LIST
99310: PUSH
99311: LD_INT 1
99313: PUSH
99314: LD_INT 3
99316: NEG
99317: PUSH
99318: EMPTY
99319: LIST
99320: LIST
99321: PUSH
99322: LD_INT 0
99324: PUSH
99325: LD_INT 3
99327: NEG
99328: PUSH
99329: EMPTY
99330: LIST
99331: LIST
99332: PUSH
99333: LD_INT 1
99335: NEG
99336: PUSH
99337: LD_INT 4
99339: NEG
99340: PUSH
99341: EMPTY
99342: LIST
99343: LIST
99344: PUSH
99345: LD_INT 1
99347: NEG
99348: PUSH
99349: LD_INT 5
99351: NEG
99352: PUSH
99353: EMPTY
99354: LIST
99355: LIST
99356: PUSH
99357: LD_INT 2
99359: PUSH
99360: LD_INT 3
99362: NEG
99363: PUSH
99364: EMPTY
99365: LIST
99366: LIST
99367: PUSH
99368: LD_INT 2
99370: NEG
99371: PUSH
99372: LD_INT 5
99374: NEG
99375: PUSH
99376: EMPTY
99377: LIST
99378: LIST
99379: PUSH
99380: LD_INT 3
99382: PUSH
99383: LD_INT 0
99385: PUSH
99386: EMPTY
99387: LIST
99388: LIST
99389: PUSH
99390: LD_INT 3
99392: PUSH
99393: LD_INT 1
99395: NEG
99396: PUSH
99397: EMPTY
99398: LIST
99399: LIST
99400: PUSH
99401: LD_INT 4
99403: PUSH
99404: LD_INT 0
99406: PUSH
99407: EMPTY
99408: LIST
99409: LIST
99410: PUSH
99411: LD_INT 4
99413: PUSH
99414: LD_INT 1
99416: PUSH
99417: EMPTY
99418: LIST
99419: LIST
99420: PUSH
99421: LD_INT 3
99423: PUSH
99424: LD_INT 1
99426: PUSH
99427: EMPTY
99428: LIST
99429: LIST
99430: PUSH
99431: LD_INT 2
99433: PUSH
99434: LD_INT 0
99436: PUSH
99437: EMPTY
99438: LIST
99439: LIST
99440: PUSH
99441: LD_INT 2
99443: PUSH
99444: LD_INT 1
99446: NEG
99447: PUSH
99448: EMPTY
99449: LIST
99450: LIST
99451: PUSH
99452: LD_INT 2
99454: PUSH
99455: LD_INT 2
99457: NEG
99458: PUSH
99459: EMPTY
99460: LIST
99461: LIST
99462: PUSH
99463: LD_INT 4
99465: PUSH
99466: LD_INT 2
99468: PUSH
99469: EMPTY
99470: LIST
99471: LIST
99472: PUSH
99473: LD_INT 4
99475: PUSH
99476: LD_INT 4
99478: PUSH
99479: EMPTY
99480: LIST
99481: LIST
99482: PUSH
99483: LD_INT 4
99485: PUSH
99486: LD_INT 3
99488: PUSH
99489: EMPTY
99490: LIST
99491: LIST
99492: PUSH
99493: LD_INT 5
99495: PUSH
99496: LD_INT 4
99498: PUSH
99499: EMPTY
99500: LIST
99501: LIST
99502: PUSH
99503: LD_INT 5
99505: PUSH
99506: LD_INT 5
99508: PUSH
99509: EMPTY
99510: LIST
99511: LIST
99512: PUSH
99513: LD_INT 4
99515: PUSH
99516: LD_INT 5
99518: PUSH
99519: EMPTY
99520: LIST
99521: LIST
99522: PUSH
99523: LD_INT 3
99525: PUSH
99526: LD_INT 4
99528: PUSH
99529: EMPTY
99530: LIST
99531: LIST
99532: PUSH
99533: LD_INT 3
99535: PUSH
99536: LD_INT 3
99538: PUSH
99539: EMPTY
99540: LIST
99541: LIST
99542: PUSH
99543: LD_INT 5
99545: PUSH
99546: LD_INT 3
99548: PUSH
99549: EMPTY
99550: LIST
99551: LIST
99552: PUSH
99553: LD_INT 3
99555: PUSH
99556: LD_INT 5
99558: PUSH
99559: EMPTY
99560: LIST
99561: LIST
99562: PUSH
99563: EMPTY
99564: LIST
99565: LIST
99566: LIST
99567: LIST
99568: LIST
99569: LIST
99570: LIST
99571: LIST
99572: LIST
99573: LIST
99574: LIST
99575: LIST
99576: LIST
99577: LIST
99578: LIST
99579: LIST
99580: LIST
99581: LIST
99582: LIST
99583: LIST
99584: LIST
99585: LIST
99586: LIST
99587: LIST
99588: LIST
99589: LIST
99590: LIST
99591: LIST
99592: LIST
99593: LIST
99594: LIST
99595: LIST
99596: LIST
99597: LIST
99598: LIST
99599: LIST
99600: LIST
99601: LIST
99602: LIST
99603: LIST
99604: LIST
99605: LIST
99606: LIST
99607: LIST
99608: LIST
99609: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
99610: LD_ADDR_VAR 0 33
99614: PUSH
99615: LD_INT 4
99617: NEG
99618: PUSH
99619: LD_INT 4
99621: NEG
99622: PUSH
99623: EMPTY
99624: LIST
99625: LIST
99626: PUSH
99627: LD_INT 4
99629: NEG
99630: PUSH
99631: LD_INT 5
99633: NEG
99634: PUSH
99635: EMPTY
99636: LIST
99637: LIST
99638: PUSH
99639: LD_INT 3
99641: NEG
99642: PUSH
99643: LD_INT 4
99645: NEG
99646: PUSH
99647: EMPTY
99648: LIST
99649: LIST
99650: PUSH
99651: LD_INT 3
99653: NEG
99654: PUSH
99655: LD_INT 3
99657: NEG
99658: PUSH
99659: EMPTY
99660: LIST
99661: LIST
99662: PUSH
99663: LD_INT 4
99665: NEG
99666: PUSH
99667: LD_INT 3
99669: NEG
99670: PUSH
99671: EMPTY
99672: LIST
99673: LIST
99674: PUSH
99675: LD_INT 5
99677: NEG
99678: PUSH
99679: LD_INT 4
99681: NEG
99682: PUSH
99683: EMPTY
99684: LIST
99685: LIST
99686: PUSH
99687: LD_INT 5
99689: NEG
99690: PUSH
99691: LD_INT 5
99693: NEG
99694: PUSH
99695: EMPTY
99696: LIST
99697: LIST
99698: PUSH
99699: LD_INT 3
99701: NEG
99702: PUSH
99703: LD_INT 5
99705: NEG
99706: PUSH
99707: EMPTY
99708: LIST
99709: LIST
99710: PUSH
99711: LD_INT 5
99713: NEG
99714: PUSH
99715: LD_INT 3
99717: NEG
99718: PUSH
99719: EMPTY
99720: LIST
99721: LIST
99722: PUSH
99723: LD_INT 0
99725: PUSH
99726: LD_INT 3
99728: NEG
99729: PUSH
99730: EMPTY
99731: LIST
99732: LIST
99733: PUSH
99734: LD_INT 0
99736: PUSH
99737: LD_INT 4
99739: NEG
99740: PUSH
99741: EMPTY
99742: LIST
99743: LIST
99744: PUSH
99745: LD_INT 1
99747: PUSH
99748: LD_INT 3
99750: NEG
99751: PUSH
99752: EMPTY
99753: LIST
99754: LIST
99755: PUSH
99756: LD_INT 1
99758: PUSH
99759: LD_INT 2
99761: NEG
99762: PUSH
99763: EMPTY
99764: LIST
99765: LIST
99766: PUSH
99767: LD_INT 0
99769: PUSH
99770: LD_INT 2
99772: NEG
99773: PUSH
99774: EMPTY
99775: LIST
99776: LIST
99777: PUSH
99778: LD_INT 1
99780: NEG
99781: PUSH
99782: LD_INT 3
99784: NEG
99785: PUSH
99786: EMPTY
99787: LIST
99788: LIST
99789: PUSH
99790: LD_INT 1
99792: NEG
99793: PUSH
99794: LD_INT 4
99796: NEG
99797: PUSH
99798: EMPTY
99799: LIST
99800: LIST
99801: PUSH
99802: LD_INT 2
99804: PUSH
99805: LD_INT 2
99807: NEG
99808: PUSH
99809: EMPTY
99810: LIST
99811: LIST
99812: PUSH
99813: LD_INT 2
99815: NEG
99816: PUSH
99817: LD_INT 4
99819: NEG
99820: PUSH
99821: EMPTY
99822: LIST
99823: LIST
99824: PUSH
99825: LD_INT 4
99827: PUSH
99828: LD_INT 0
99830: PUSH
99831: EMPTY
99832: LIST
99833: LIST
99834: PUSH
99835: LD_INT 4
99837: PUSH
99838: LD_INT 1
99840: NEG
99841: PUSH
99842: EMPTY
99843: LIST
99844: LIST
99845: PUSH
99846: LD_INT 5
99848: PUSH
99849: LD_INT 0
99851: PUSH
99852: EMPTY
99853: LIST
99854: LIST
99855: PUSH
99856: LD_INT 5
99858: PUSH
99859: LD_INT 1
99861: PUSH
99862: EMPTY
99863: LIST
99864: LIST
99865: PUSH
99866: LD_INT 4
99868: PUSH
99869: LD_INT 1
99871: PUSH
99872: EMPTY
99873: LIST
99874: LIST
99875: PUSH
99876: LD_INT 3
99878: PUSH
99879: LD_INT 0
99881: PUSH
99882: EMPTY
99883: LIST
99884: LIST
99885: PUSH
99886: LD_INT 3
99888: PUSH
99889: LD_INT 1
99891: NEG
99892: PUSH
99893: EMPTY
99894: LIST
99895: LIST
99896: PUSH
99897: LD_INT 3
99899: PUSH
99900: LD_INT 2
99902: NEG
99903: PUSH
99904: EMPTY
99905: LIST
99906: LIST
99907: PUSH
99908: LD_INT 5
99910: PUSH
99911: LD_INT 2
99913: PUSH
99914: EMPTY
99915: LIST
99916: LIST
99917: PUSH
99918: LD_INT 3
99920: PUSH
99921: LD_INT 3
99923: PUSH
99924: EMPTY
99925: LIST
99926: LIST
99927: PUSH
99928: LD_INT 3
99930: PUSH
99931: LD_INT 2
99933: PUSH
99934: EMPTY
99935: LIST
99936: LIST
99937: PUSH
99938: LD_INT 4
99940: PUSH
99941: LD_INT 3
99943: PUSH
99944: EMPTY
99945: LIST
99946: LIST
99947: PUSH
99948: LD_INT 4
99950: PUSH
99951: LD_INT 4
99953: PUSH
99954: EMPTY
99955: LIST
99956: LIST
99957: PUSH
99958: LD_INT 3
99960: PUSH
99961: LD_INT 4
99963: PUSH
99964: EMPTY
99965: LIST
99966: LIST
99967: PUSH
99968: LD_INT 2
99970: PUSH
99971: LD_INT 3
99973: PUSH
99974: EMPTY
99975: LIST
99976: LIST
99977: PUSH
99978: LD_INT 2
99980: PUSH
99981: LD_INT 2
99983: PUSH
99984: EMPTY
99985: LIST
99986: LIST
99987: PUSH
99988: LD_INT 4
99990: PUSH
99991: LD_INT 2
99993: PUSH
99994: EMPTY
99995: LIST
99996: LIST
99997: PUSH
99998: LD_INT 2
100000: PUSH
100001: LD_INT 4
100003: PUSH
100004: EMPTY
100005: LIST
100006: LIST
100007: PUSH
100008: LD_INT 0
100010: PUSH
100011: LD_INT 4
100013: PUSH
100014: EMPTY
100015: LIST
100016: LIST
100017: PUSH
100018: LD_INT 0
100020: PUSH
100021: LD_INT 3
100023: PUSH
100024: EMPTY
100025: LIST
100026: LIST
100027: PUSH
100028: LD_INT 1
100030: PUSH
100031: LD_INT 4
100033: PUSH
100034: EMPTY
100035: LIST
100036: LIST
100037: PUSH
100038: LD_INT 1
100040: PUSH
100041: LD_INT 5
100043: PUSH
100044: EMPTY
100045: LIST
100046: LIST
100047: PUSH
100048: LD_INT 0
100050: PUSH
100051: LD_INT 5
100053: PUSH
100054: EMPTY
100055: LIST
100056: LIST
100057: PUSH
100058: LD_INT 1
100060: NEG
100061: PUSH
100062: LD_INT 4
100064: PUSH
100065: EMPTY
100066: LIST
100067: LIST
100068: PUSH
100069: LD_INT 1
100071: NEG
100072: PUSH
100073: LD_INT 3
100075: PUSH
100076: EMPTY
100077: LIST
100078: LIST
100079: PUSH
100080: LD_INT 2
100082: PUSH
100083: LD_INT 5
100085: PUSH
100086: EMPTY
100087: LIST
100088: LIST
100089: PUSH
100090: LD_INT 2
100092: NEG
100093: PUSH
100094: LD_INT 3
100096: PUSH
100097: EMPTY
100098: LIST
100099: LIST
100100: PUSH
100101: EMPTY
100102: LIST
100103: LIST
100104: LIST
100105: LIST
100106: LIST
100107: LIST
100108: LIST
100109: LIST
100110: LIST
100111: LIST
100112: LIST
100113: LIST
100114: LIST
100115: LIST
100116: LIST
100117: LIST
100118: LIST
100119: LIST
100120: LIST
100121: LIST
100122: LIST
100123: LIST
100124: LIST
100125: LIST
100126: LIST
100127: LIST
100128: LIST
100129: LIST
100130: LIST
100131: LIST
100132: LIST
100133: LIST
100134: LIST
100135: LIST
100136: LIST
100137: LIST
100138: LIST
100139: LIST
100140: LIST
100141: LIST
100142: LIST
100143: LIST
100144: LIST
100145: LIST
100146: LIST
100147: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
100148: LD_ADDR_VAR 0 34
100152: PUSH
100153: LD_INT 0
100155: PUSH
100156: LD_INT 4
100158: NEG
100159: PUSH
100160: EMPTY
100161: LIST
100162: LIST
100163: PUSH
100164: LD_INT 0
100166: PUSH
100167: LD_INT 5
100169: NEG
100170: PUSH
100171: EMPTY
100172: LIST
100173: LIST
100174: PUSH
100175: LD_INT 1
100177: PUSH
100178: LD_INT 4
100180: NEG
100181: PUSH
100182: EMPTY
100183: LIST
100184: LIST
100185: PUSH
100186: LD_INT 1
100188: PUSH
100189: LD_INT 3
100191: NEG
100192: PUSH
100193: EMPTY
100194: LIST
100195: LIST
100196: PUSH
100197: LD_INT 0
100199: PUSH
100200: LD_INT 3
100202: NEG
100203: PUSH
100204: EMPTY
100205: LIST
100206: LIST
100207: PUSH
100208: LD_INT 1
100210: NEG
100211: PUSH
100212: LD_INT 4
100214: NEG
100215: PUSH
100216: EMPTY
100217: LIST
100218: LIST
100219: PUSH
100220: LD_INT 1
100222: NEG
100223: PUSH
100224: LD_INT 5
100226: NEG
100227: PUSH
100228: EMPTY
100229: LIST
100230: LIST
100231: PUSH
100232: LD_INT 2
100234: PUSH
100235: LD_INT 3
100237: NEG
100238: PUSH
100239: EMPTY
100240: LIST
100241: LIST
100242: PUSH
100243: LD_INT 2
100245: NEG
100246: PUSH
100247: LD_INT 5
100249: NEG
100250: PUSH
100251: EMPTY
100252: LIST
100253: LIST
100254: PUSH
100255: LD_INT 3
100257: PUSH
100258: LD_INT 0
100260: PUSH
100261: EMPTY
100262: LIST
100263: LIST
100264: PUSH
100265: LD_INT 3
100267: PUSH
100268: LD_INT 1
100270: NEG
100271: PUSH
100272: EMPTY
100273: LIST
100274: LIST
100275: PUSH
100276: LD_INT 4
100278: PUSH
100279: LD_INT 0
100281: PUSH
100282: EMPTY
100283: LIST
100284: LIST
100285: PUSH
100286: LD_INT 4
100288: PUSH
100289: LD_INT 1
100291: PUSH
100292: EMPTY
100293: LIST
100294: LIST
100295: PUSH
100296: LD_INT 3
100298: PUSH
100299: LD_INT 1
100301: PUSH
100302: EMPTY
100303: LIST
100304: LIST
100305: PUSH
100306: LD_INT 2
100308: PUSH
100309: LD_INT 0
100311: PUSH
100312: EMPTY
100313: LIST
100314: LIST
100315: PUSH
100316: LD_INT 2
100318: PUSH
100319: LD_INT 1
100321: NEG
100322: PUSH
100323: EMPTY
100324: LIST
100325: LIST
100326: PUSH
100327: LD_INT 2
100329: PUSH
100330: LD_INT 2
100332: NEG
100333: PUSH
100334: EMPTY
100335: LIST
100336: LIST
100337: PUSH
100338: LD_INT 4
100340: PUSH
100341: LD_INT 2
100343: PUSH
100344: EMPTY
100345: LIST
100346: LIST
100347: PUSH
100348: LD_INT 4
100350: PUSH
100351: LD_INT 4
100353: PUSH
100354: EMPTY
100355: LIST
100356: LIST
100357: PUSH
100358: LD_INT 4
100360: PUSH
100361: LD_INT 3
100363: PUSH
100364: EMPTY
100365: LIST
100366: LIST
100367: PUSH
100368: LD_INT 5
100370: PUSH
100371: LD_INT 4
100373: PUSH
100374: EMPTY
100375: LIST
100376: LIST
100377: PUSH
100378: LD_INT 5
100380: PUSH
100381: LD_INT 5
100383: PUSH
100384: EMPTY
100385: LIST
100386: LIST
100387: PUSH
100388: LD_INT 4
100390: PUSH
100391: LD_INT 5
100393: PUSH
100394: EMPTY
100395: LIST
100396: LIST
100397: PUSH
100398: LD_INT 3
100400: PUSH
100401: LD_INT 4
100403: PUSH
100404: EMPTY
100405: LIST
100406: LIST
100407: PUSH
100408: LD_INT 3
100410: PUSH
100411: LD_INT 3
100413: PUSH
100414: EMPTY
100415: LIST
100416: LIST
100417: PUSH
100418: LD_INT 5
100420: PUSH
100421: LD_INT 3
100423: PUSH
100424: EMPTY
100425: LIST
100426: LIST
100427: PUSH
100428: LD_INT 3
100430: PUSH
100431: LD_INT 5
100433: PUSH
100434: EMPTY
100435: LIST
100436: LIST
100437: PUSH
100438: LD_INT 0
100440: PUSH
100441: LD_INT 3
100443: PUSH
100444: EMPTY
100445: LIST
100446: LIST
100447: PUSH
100448: LD_INT 0
100450: PUSH
100451: LD_INT 2
100453: PUSH
100454: EMPTY
100455: LIST
100456: LIST
100457: PUSH
100458: LD_INT 1
100460: PUSH
100461: LD_INT 3
100463: PUSH
100464: EMPTY
100465: LIST
100466: LIST
100467: PUSH
100468: LD_INT 1
100470: PUSH
100471: LD_INT 4
100473: PUSH
100474: EMPTY
100475: LIST
100476: LIST
100477: PUSH
100478: LD_INT 0
100480: PUSH
100481: LD_INT 4
100483: PUSH
100484: EMPTY
100485: LIST
100486: LIST
100487: PUSH
100488: LD_INT 1
100490: NEG
100491: PUSH
100492: LD_INT 3
100494: PUSH
100495: EMPTY
100496: LIST
100497: LIST
100498: PUSH
100499: LD_INT 1
100501: NEG
100502: PUSH
100503: LD_INT 2
100505: PUSH
100506: EMPTY
100507: LIST
100508: LIST
100509: PUSH
100510: LD_INT 2
100512: PUSH
100513: LD_INT 4
100515: PUSH
100516: EMPTY
100517: LIST
100518: LIST
100519: PUSH
100520: LD_INT 2
100522: NEG
100523: PUSH
100524: LD_INT 2
100526: PUSH
100527: EMPTY
100528: LIST
100529: LIST
100530: PUSH
100531: LD_INT 4
100533: NEG
100534: PUSH
100535: LD_INT 0
100537: PUSH
100538: EMPTY
100539: LIST
100540: LIST
100541: PUSH
100542: LD_INT 4
100544: NEG
100545: PUSH
100546: LD_INT 1
100548: NEG
100549: PUSH
100550: EMPTY
100551: LIST
100552: LIST
100553: PUSH
100554: LD_INT 3
100556: NEG
100557: PUSH
100558: LD_INT 0
100560: PUSH
100561: EMPTY
100562: LIST
100563: LIST
100564: PUSH
100565: LD_INT 3
100567: NEG
100568: PUSH
100569: LD_INT 1
100571: PUSH
100572: EMPTY
100573: LIST
100574: LIST
100575: PUSH
100576: LD_INT 4
100578: NEG
100579: PUSH
100580: LD_INT 1
100582: PUSH
100583: EMPTY
100584: LIST
100585: LIST
100586: PUSH
100587: LD_INT 5
100589: NEG
100590: PUSH
100591: LD_INT 0
100593: PUSH
100594: EMPTY
100595: LIST
100596: LIST
100597: PUSH
100598: LD_INT 5
100600: NEG
100601: PUSH
100602: LD_INT 1
100604: NEG
100605: PUSH
100606: EMPTY
100607: LIST
100608: LIST
100609: PUSH
100610: LD_INT 5
100612: NEG
100613: PUSH
100614: LD_INT 2
100616: NEG
100617: PUSH
100618: EMPTY
100619: LIST
100620: LIST
100621: PUSH
100622: LD_INT 3
100624: NEG
100625: PUSH
100626: LD_INT 2
100628: PUSH
100629: EMPTY
100630: LIST
100631: LIST
100632: PUSH
100633: EMPTY
100634: LIST
100635: LIST
100636: LIST
100637: LIST
100638: LIST
100639: LIST
100640: LIST
100641: LIST
100642: LIST
100643: LIST
100644: LIST
100645: LIST
100646: LIST
100647: LIST
100648: LIST
100649: LIST
100650: LIST
100651: LIST
100652: LIST
100653: LIST
100654: LIST
100655: LIST
100656: LIST
100657: LIST
100658: LIST
100659: LIST
100660: LIST
100661: LIST
100662: LIST
100663: LIST
100664: LIST
100665: LIST
100666: LIST
100667: LIST
100668: LIST
100669: LIST
100670: LIST
100671: LIST
100672: LIST
100673: LIST
100674: LIST
100675: LIST
100676: LIST
100677: LIST
100678: LIST
100679: ST_TO_ADDR
// end ; end ;
100680: GO 100683
100682: POP
// case btype of b_depot , b_warehouse :
100683: LD_VAR 0 1
100687: PUSH
100688: LD_INT 0
100690: DOUBLE
100691: EQUAL
100692: IFTRUE 100702
100694: LD_INT 1
100696: DOUBLE
100697: EQUAL
100698: IFTRUE 100702
100700: GO 100903
100702: POP
// case nation of nation_american :
100703: LD_VAR 0 5
100707: PUSH
100708: LD_INT 1
100710: DOUBLE
100711: EQUAL
100712: IFTRUE 100716
100714: GO 100772
100716: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
100717: LD_ADDR_VAR 0 9
100721: PUSH
100722: LD_VAR 0 11
100726: PUSH
100727: LD_VAR 0 12
100731: PUSH
100732: LD_VAR 0 13
100736: PUSH
100737: LD_VAR 0 14
100741: PUSH
100742: LD_VAR 0 15
100746: PUSH
100747: LD_VAR 0 16
100751: PUSH
100752: EMPTY
100753: LIST
100754: LIST
100755: LIST
100756: LIST
100757: LIST
100758: LIST
100759: PUSH
100760: LD_VAR 0 4
100764: PUSH
100765: LD_INT 1
100767: PLUS
100768: ARRAY
100769: ST_TO_ADDR
100770: GO 100901
100772: LD_INT 2
100774: DOUBLE
100775: EQUAL
100776: IFTRUE 100780
100778: GO 100836
100780: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
100781: LD_ADDR_VAR 0 9
100785: PUSH
100786: LD_VAR 0 17
100790: PUSH
100791: LD_VAR 0 18
100795: PUSH
100796: LD_VAR 0 19
100800: PUSH
100801: LD_VAR 0 20
100805: PUSH
100806: LD_VAR 0 21
100810: PUSH
100811: LD_VAR 0 22
100815: PUSH
100816: EMPTY
100817: LIST
100818: LIST
100819: LIST
100820: LIST
100821: LIST
100822: LIST
100823: PUSH
100824: LD_VAR 0 4
100828: PUSH
100829: LD_INT 1
100831: PLUS
100832: ARRAY
100833: ST_TO_ADDR
100834: GO 100901
100836: LD_INT 3
100838: DOUBLE
100839: EQUAL
100840: IFTRUE 100844
100842: GO 100900
100844: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
100845: LD_ADDR_VAR 0 9
100849: PUSH
100850: LD_VAR 0 23
100854: PUSH
100855: LD_VAR 0 24
100859: PUSH
100860: LD_VAR 0 25
100864: PUSH
100865: LD_VAR 0 26
100869: PUSH
100870: LD_VAR 0 27
100874: PUSH
100875: LD_VAR 0 28
100879: PUSH
100880: EMPTY
100881: LIST
100882: LIST
100883: LIST
100884: LIST
100885: LIST
100886: LIST
100887: PUSH
100888: LD_VAR 0 4
100892: PUSH
100893: LD_INT 1
100895: PLUS
100896: ARRAY
100897: ST_TO_ADDR
100898: GO 100901
100900: POP
100901: GO 101456
100903: LD_INT 2
100905: DOUBLE
100906: EQUAL
100907: IFTRUE 100917
100909: LD_INT 3
100911: DOUBLE
100912: EQUAL
100913: IFTRUE 100917
100915: GO 100973
100917: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
100918: LD_ADDR_VAR 0 9
100922: PUSH
100923: LD_VAR 0 29
100927: PUSH
100928: LD_VAR 0 30
100932: PUSH
100933: LD_VAR 0 31
100937: PUSH
100938: LD_VAR 0 32
100942: PUSH
100943: LD_VAR 0 33
100947: PUSH
100948: LD_VAR 0 34
100952: PUSH
100953: EMPTY
100954: LIST
100955: LIST
100956: LIST
100957: LIST
100958: LIST
100959: LIST
100960: PUSH
100961: LD_VAR 0 4
100965: PUSH
100966: LD_INT 1
100968: PLUS
100969: ARRAY
100970: ST_TO_ADDR
100971: GO 101456
100973: LD_INT 16
100975: DOUBLE
100976: EQUAL
100977: IFTRUE 101035
100979: LD_INT 17
100981: DOUBLE
100982: EQUAL
100983: IFTRUE 101035
100985: LD_INT 18
100987: DOUBLE
100988: EQUAL
100989: IFTRUE 101035
100991: LD_INT 19
100993: DOUBLE
100994: EQUAL
100995: IFTRUE 101035
100997: LD_INT 22
100999: DOUBLE
101000: EQUAL
101001: IFTRUE 101035
101003: LD_INT 20
101005: DOUBLE
101006: EQUAL
101007: IFTRUE 101035
101009: LD_INT 21
101011: DOUBLE
101012: EQUAL
101013: IFTRUE 101035
101015: LD_INT 23
101017: DOUBLE
101018: EQUAL
101019: IFTRUE 101035
101021: LD_INT 24
101023: DOUBLE
101024: EQUAL
101025: IFTRUE 101035
101027: LD_INT 25
101029: DOUBLE
101030: EQUAL
101031: IFTRUE 101035
101033: GO 101091
101035: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
101036: LD_ADDR_VAR 0 9
101040: PUSH
101041: LD_VAR 0 35
101045: PUSH
101046: LD_VAR 0 36
101050: PUSH
101051: LD_VAR 0 37
101055: PUSH
101056: LD_VAR 0 38
101060: PUSH
101061: LD_VAR 0 39
101065: PUSH
101066: LD_VAR 0 40
101070: PUSH
101071: EMPTY
101072: LIST
101073: LIST
101074: LIST
101075: LIST
101076: LIST
101077: LIST
101078: PUSH
101079: LD_VAR 0 4
101083: PUSH
101084: LD_INT 1
101086: PLUS
101087: ARRAY
101088: ST_TO_ADDR
101089: GO 101456
101091: LD_INT 6
101093: DOUBLE
101094: EQUAL
101095: IFTRUE 101147
101097: LD_INT 7
101099: DOUBLE
101100: EQUAL
101101: IFTRUE 101147
101103: LD_INT 8
101105: DOUBLE
101106: EQUAL
101107: IFTRUE 101147
101109: LD_INT 13
101111: DOUBLE
101112: EQUAL
101113: IFTRUE 101147
101115: LD_INT 12
101117: DOUBLE
101118: EQUAL
101119: IFTRUE 101147
101121: LD_INT 15
101123: DOUBLE
101124: EQUAL
101125: IFTRUE 101147
101127: LD_INT 11
101129: DOUBLE
101130: EQUAL
101131: IFTRUE 101147
101133: LD_INT 14
101135: DOUBLE
101136: EQUAL
101137: IFTRUE 101147
101139: LD_INT 10
101141: DOUBLE
101142: EQUAL
101143: IFTRUE 101147
101145: GO 101203
101147: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
101148: LD_ADDR_VAR 0 9
101152: PUSH
101153: LD_VAR 0 41
101157: PUSH
101158: LD_VAR 0 42
101162: PUSH
101163: LD_VAR 0 43
101167: PUSH
101168: LD_VAR 0 44
101172: PUSH
101173: LD_VAR 0 45
101177: PUSH
101178: LD_VAR 0 46
101182: PUSH
101183: EMPTY
101184: LIST
101185: LIST
101186: LIST
101187: LIST
101188: LIST
101189: LIST
101190: PUSH
101191: LD_VAR 0 4
101195: PUSH
101196: LD_INT 1
101198: PLUS
101199: ARRAY
101200: ST_TO_ADDR
101201: GO 101456
101203: LD_INT 36
101205: DOUBLE
101206: EQUAL
101207: IFTRUE 101211
101209: GO 101267
101211: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
101212: LD_ADDR_VAR 0 9
101216: PUSH
101217: LD_VAR 0 47
101221: PUSH
101222: LD_VAR 0 48
101226: PUSH
101227: LD_VAR 0 49
101231: PUSH
101232: LD_VAR 0 50
101236: PUSH
101237: LD_VAR 0 51
101241: PUSH
101242: LD_VAR 0 52
101246: PUSH
101247: EMPTY
101248: LIST
101249: LIST
101250: LIST
101251: LIST
101252: LIST
101253: LIST
101254: PUSH
101255: LD_VAR 0 4
101259: PUSH
101260: LD_INT 1
101262: PLUS
101263: ARRAY
101264: ST_TO_ADDR
101265: GO 101456
101267: LD_INT 4
101269: DOUBLE
101270: EQUAL
101271: IFTRUE 101293
101273: LD_INT 5
101275: DOUBLE
101276: EQUAL
101277: IFTRUE 101293
101279: LD_INT 34
101281: DOUBLE
101282: EQUAL
101283: IFTRUE 101293
101285: LD_INT 37
101287: DOUBLE
101288: EQUAL
101289: IFTRUE 101293
101291: GO 101349
101293: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
101294: LD_ADDR_VAR 0 9
101298: PUSH
101299: LD_VAR 0 53
101303: PUSH
101304: LD_VAR 0 54
101308: PUSH
101309: LD_VAR 0 55
101313: PUSH
101314: LD_VAR 0 56
101318: PUSH
101319: LD_VAR 0 57
101323: PUSH
101324: LD_VAR 0 58
101328: PUSH
101329: EMPTY
101330: LIST
101331: LIST
101332: LIST
101333: LIST
101334: LIST
101335: LIST
101336: PUSH
101337: LD_VAR 0 4
101341: PUSH
101342: LD_INT 1
101344: PLUS
101345: ARRAY
101346: ST_TO_ADDR
101347: GO 101456
101349: LD_INT 31
101351: DOUBLE
101352: EQUAL
101353: IFTRUE 101399
101355: LD_INT 32
101357: DOUBLE
101358: EQUAL
101359: IFTRUE 101399
101361: LD_INT 33
101363: DOUBLE
101364: EQUAL
101365: IFTRUE 101399
101367: LD_INT 27
101369: DOUBLE
101370: EQUAL
101371: IFTRUE 101399
101373: LD_INT 26
101375: DOUBLE
101376: EQUAL
101377: IFTRUE 101399
101379: LD_INT 28
101381: DOUBLE
101382: EQUAL
101383: IFTRUE 101399
101385: LD_INT 29
101387: DOUBLE
101388: EQUAL
101389: IFTRUE 101399
101391: LD_INT 30
101393: DOUBLE
101394: EQUAL
101395: IFTRUE 101399
101397: GO 101455
101399: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
101400: LD_ADDR_VAR 0 9
101404: PUSH
101405: LD_VAR 0 59
101409: PUSH
101410: LD_VAR 0 60
101414: PUSH
101415: LD_VAR 0 61
101419: PUSH
101420: LD_VAR 0 62
101424: PUSH
101425: LD_VAR 0 63
101429: PUSH
101430: LD_VAR 0 64
101434: PUSH
101435: EMPTY
101436: LIST
101437: LIST
101438: LIST
101439: LIST
101440: LIST
101441: LIST
101442: PUSH
101443: LD_VAR 0 4
101447: PUSH
101448: LD_INT 1
101450: PLUS
101451: ARRAY
101452: ST_TO_ADDR
101453: GO 101456
101455: POP
// temp_list2 = [ ] ;
101456: LD_ADDR_VAR 0 10
101460: PUSH
101461: EMPTY
101462: ST_TO_ADDR
// for i in temp_list do
101463: LD_ADDR_VAR 0 8
101467: PUSH
101468: LD_VAR 0 9
101472: PUSH
101473: FOR_IN
101474: IFFALSE 101526
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
101476: LD_ADDR_VAR 0 10
101480: PUSH
101481: LD_VAR 0 10
101485: PUSH
101486: LD_VAR 0 8
101490: PUSH
101491: LD_INT 1
101493: ARRAY
101494: PUSH
101495: LD_VAR 0 2
101499: PLUS
101500: PUSH
101501: LD_VAR 0 8
101505: PUSH
101506: LD_INT 2
101508: ARRAY
101509: PUSH
101510: LD_VAR 0 3
101514: PLUS
101515: PUSH
101516: EMPTY
101517: LIST
101518: LIST
101519: PUSH
101520: EMPTY
101521: LIST
101522: ADD
101523: ST_TO_ADDR
101524: GO 101473
101526: POP
101527: POP
// result = temp_list2 ;
101528: LD_ADDR_VAR 0 7
101532: PUSH
101533: LD_VAR 0 10
101537: ST_TO_ADDR
// end ;
101538: LD_VAR 0 7
101542: RET
// export function EnemyInRange ( unit , dist ) ; begin
101543: LD_INT 0
101545: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
101546: LD_ADDR_VAR 0 3
101550: PUSH
101551: LD_VAR 0 1
101555: PPUSH
101556: CALL_OW 255
101560: PPUSH
101561: LD_VAR 0 1
101565: PPUSH
101566: CALL_OW 250
101570: PPUSH
101571: LD_VAR 0 1
101575: PPUSH
101576: CALL_OW 251
101580: PPUSH
101581: LD_VAR 0 2
101585: PPUSH
101586: CALL 74916 0 4
101590: PUSH
101591: LD_INT 4
101593: ARRAY
101594: ST_TO_ADDR
// end ;
101595: LD_VAR 0 3
101599: RET
// export function PlayerSeeMe ( unit ) ; begin
101600: LD_INT 0
101602: PPUSH
// result := See ( your_side , unit ) ;
101603: LD_ADDR_VAR 0 2
101607: PUSH
101608: LD_OWVAR 2
101612: PPUSH
101613: LD_VAR 0 1
101617: PPUSH
101618: CALL_OW 292
101622: ST_TO_ADDR
// end ;
101623: LD_VAR 0 2
101627: RET
// export function ReverseDir ( unit ) ; begin
101628: LD_INT 0
101630: PPUSH
// if not unit then
101631: LD_VAR 0 1
101635: NOT
101636: IFFALSE 101640
// exit ;
101638: GO 101663
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
101640: LD_ADDR_VAR 0 2
101644: PUSH
101645: LD_VAR 0 1
101649: PPUSH
101650: CALL_OW 254
101654: PUSH
101655: LD_INT 3
101657: PLUS
101658: PUSH
101659: LD_INT 6
101661: MOD
101662: ST_TO_ADDR
// end ;
101663: LD_VAR 0 2
101667: RET
// export function ReverseArray ( array ) ; var i ; begin
101668: LD_INT 0
101670: PPUSH
101671: PPUSH
// if not array then
101672: LD_VAR 0 1
101676: NOT
101677: IFFALSE 101681
// exit ;
101679: GO 101736
// result := [ ] ;
101681: LD_ADDR_VAR 0 2
101685: PUSH
101686: EMPTY
101687: ST_TO_ADDR
// for i := array downto 1 do
101688: LD_ADDR_VAR 0 3
101692: PUSH
101693: DOUBLE
101694: LD_VAR 0 1
101698: INC
101699: ST_TO_ADDR
101700: LD_INT 1
101702: PUSH
101703: FOR_DOWNTO
101704: IFFALSE 101734
// result := Join ( result , array [ i ] ) ;
101706: LD_ADDR_VAR 0 2
101710: PUSH
101711: LD_VAR 0 2
101715: PPUSH
101716: LD_VAR 0 1
101720: PUSH
101721: LD_VAR 0 3
101725: ARRAY
101726: PPUSH
101727: CALL 106379 0 2
101731: ST_TO_ADDR
101732: GO 101703
101734: POP
101735: POP
// end ;
101736: LD_VAR 0 2
101740: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
101741: LD_INT 0
101743: PPUSH
101744: PPUSH
101745: PPUSH
101746: PPUSH
101747: PPUSH
101748: PPUSH
// if not unit or not hexes then
101749: LD_VAR 0 1
101753: NOT
101754: PUSH
101755: LD_VAR 0 2
101759: NOT
101760: OR
101761: IFFALSE 101765
// exit ;
101763: GO 101888
// dist := 9999 ;
101765: LD_ADDR_VAR 0 5
101769: PUSH
101770: LD_INT 9999
101772: ST_TO_ADDR
// for i = 1 to hexes do
101773: LD_ADDR_VAR 0 4
101777: PUSH
101778: DOUBLE
101779: LD_INT 1
101781: DEC
101782: ST_TO_ADDR
101783: LD_VAR 0 2
101787: PUSH
101788: FOR_TO
101789: IFFALSE 101876
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
101791: LD_ADDR_VAR 0 6
101795: PUSH
101796: LD_VAR 0 1
101800: PPUSH
101801: LD_VAR 0 2
101805: PUSH
101806: LD_VAR 0 4
101810: ARRAY
101811: PUSH
101812: LD_INT 1
101814: ARRAY
101815: PPUSH
101816: LD_VAR 0 2
101820: PUSH
101821: LD_VAR 0 4
101825: ARRAY
101826: PUSH
101827: LD_INT 2
101829: ARRAY
101830: PPUSH
101831: CALL_OW 297
101835: ST_TO_ADDR
// if tdist < dist then
101836: LD_VAR 0 6
101840: PUSH
101841: LD_VAR 0 5
101845: LESS
101846: IFFALSE 101874
// begin hex := hexes [ i ] ;
101848: LD_ADDR_VAR 0 8
101852: PUSH
101853: LD_VAR 0 2
101857: PUSH
101858: LD_VAR 0 4
101862: ARRAY
101863: ST_TO_ADDR
// dist := tdist ;
101864: LD_ADDR_VAR 0 5
101868: PUSH
101869: LD_VAR 0 6
101873: ST_TO_ADDR
// end ; end ;
101874: GO 101788
101876: POP
101877: POP
// result := hex ;
101878: LD_ADDR_VAR 0 3
101882: PUSH
101883: LD_VAR 0 8
101887: ST_TO_ADDR
// end ;
101888: LD_VAR 0 3
101892: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
101893: LD_INT 0
101895: PPUSH
101896: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
101897: LD_VAR 0 1
101901: NOT
101902: PUSH
101903: LD_VAR 0 1
101907: PUSH
101908: LD_INT 21
101910: PUSH
101911: LD_INT 2
101913: PUSH
101914: EMPTY
101915: LIST
101916: LIST
101917: PUSH
101918: LD_INT 23
101920: PUSH
101921: LD_INT 2
101923: PUSH
101924: EMPTY
101925: LIST
101926: LIST
101927: PUSH
101928: EMPTY
101929: LIST
101930: LIST
101931: PPUSH
101932: CALL_OW 69
101936: IN
101937: NOT
101938: OR
101939: IFFALSE 101943
// exit ;
101941: GO 101990
// for i = 1 to 3 do
101943: LD_ADDR_VAR 0 3
101947: PUSH
101948: DOUBLE
101949: LD_INT 1
101951: DEC
101952: ST_TO_ADDR
101953: LD_INT 3
101955: PUSH
101956: FOR_TO
101957: IFFALSE 101988
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
101959: LD_VAR 0 1
101963: PPUSH
101964: CALL_OW 250
101968: PPUSH
101969: LD_VAR 0 1
101973: PPUSH
101974: CALL_OW 251
101978: PPUSH
101979: LD_INT 1
101981: PPUSH
101982: CALL_OW 453
101986: GO 101956
101988: POP
101989: POP
// end ;
101990: LD_VAR 0 2
101994: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
101995: LD_INT 0
101997: PPUSH
101998: PPUSH
101999: PPUSH
102000: PPUSH
102001: PPUSH
102002: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
102003: LD_VAR 0 1
102007: NOT
102008: PUSH
102009: LD_VAR 0 2
102013: NOT
102014: OR
102015: PUSH
102016: LD_VAR 0 1
102020: PPUSH
102021: CALL_OW 314
102025: OR
102026: IFFALSE 102030
// exit ;
102028: GO 102497
// if GetLives ( i ) < 250 then
102030: LD_VAR 0 4
102034: PPUSH
102035: CALL_OW 256
102039: PUSH
102040: LD_INT 250
102042: LESS
102043: IFFALSE 102056
// begin ComAutodestruct ( i ) ;
102045: LD_VAR 0 4
102049: PPUSH
102050: CALL 101893 0 1
// exit ;
102054: GO 102497
// end ; x := GetX ( enemy_unit ) ;
102056: LD_ADDR_VAR 0 7
102060: PUSH
102061: LD_VAR 0 2
102065: PPUSH
102066: CALL_OW 250
102070: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
102071: LD_ADDR_VAR 0 8
102075: PUSH
102076: LD_VAR 0 2
102080: PPUSH
102081: CALL_OW 251
102085: ST_TO_ADDR
// if not x or not y then
102086: LD_VAR 0 7
102090: NOT
102091: PUSH
102092: LD_VAR 0 8
102096: NOT
102097: OR
102098: IFFALSE 102102
// exit ;
102100: GO 102497
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
102102: LD_ADDR_VAR 0 6
102106: PUSH
102107: LD_VAR 0 7
102111: PPUSH
102112: LD_INT 0
102114: PPUSH
102115: LD_INT 4
102117: PPUSH
102118: CALL_OW 272
102122: PUSH
102123: LD_VAR 0 8
102127: PPUSH
102128: LD_INT 0
102130: PPUSH
102131: LD_INT 4
102133: PPUSH
102134: CALL_OW 273
102138: PUSH
102139: EMPTY
102140: LIST
102141: LIST
102142: PUSH
102143: LD_VAR 0 7
102147: PPUSH
102148: LD_INT 1
102150: PPUSH
102151: LD_INT 4
102153: PPUSH
102154: CALL_OW 272
102158: PUSH
102159: LD_VAR 0 8
102163: PPUSH
102164: LD_INT 1
102166: PPUSH
102167: LD_INT 4
102169: PPUSH
102170: CALL_OW 273
102174: PUSH
102175: EMPTY
102176: LIST
102177: LIST
102178: PUSH
102179: LD_VAR 0 7
102183: PPUSH
102184: LD_INT 2
102186: PPUSH
102187: LD_INT 4
102189: PPUSH
102190: CALL_OW 272
102194: PUSH
102195: LD_VAR 0 8
102199: PPUSH
102200: LD_INT 2
102202: PPUSH
102203: LD_INT 4
102205: PPUSH
102206: CALL_OW 273
102210: PUSH
102211: EMPTY
102212: LIST
102213: LIST
102214: PUSH
102215: LD_VAR 0 7
102219: PPUSH
102220: LD_INT 3
102222: PPUSH
102223: LD_INT 4
102225: PPUSH
102226: CALL_OW 272
102230: PUSH
102231: LD_VAR 0 8
102235: PPUSH
102236: LD_INT 3
102238: PPUSH
102239: LD_INT 4
102241: PPUSH
102242: CALL_OW 273
102246: PUSH
102247: EMPTY
102248: LIST
102249: LIST
102250: PUSH
102251: LD_VAR 0 7
102255: PPUSH
102256: LD_INT 4
102258: PPUSH
102259: LD_INT 4
102261: PPUSH
102262: CALL_OW 272
102266: PUSH
102267: LD_VAR 0 8
102271: PPUSH
102272: LD_INT 4
102274: PPUSH
102275: LD_INT 4
102277: PPUSH
102278: CALL_OW 273
102282: PUSH
102283: EMPTY
102284: LIST
102285: LIST
102286: PUSH
102287: LD_VAR 0 7
102291: PPUSH
102292: LD_INT 5
102294: PPUSH
102295: LD_INT 4
102297: PPUSH
102298: CALL_OW 272
102302: PUSH
102303: LD_VAR 0 8
102307: PPUSH
102308: LD_INT 5
102310: PPUSH
102311: LD_INT 4
102313: PPUSH
102314: CALL_OW 273
102318: PUSH
102319: EMPTY
102320: LIST
102321: LIST
102322: PUSH
102323: EMPTY
102324: LIST
102325: LIST
102326: LIST
102327: LIST
102328: LIST
102329: LIST
102330: ST_TO_ADDR
// for i = tmp downto 1 do
102331: LD_ADDR_VAR 0 4
102335: PUSH
102336: DOUBLE
102337: LD_VAR 0 6
102341: INC
102342: ST_TO_ADDR
102343: LD_INT 1
102345: PUSH
102346: FOR_DOWNTO
102347: IFFALSE 102448
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
102349: LD_VAR 0 6
102353: PUSH
102354: LD_VAR 0 4
102358: ARRAY
102359: PUSH
102360: LD_INT 1
102362: ARRAY
102363: PPUSH
102364: LD_VAR 0 6
102368: PUSH
102369: LD_VAR 0 4
102373: ARRAY
102374: PUSH
102375: LD_INT 2
102377: ARRAY
102378: PPUSH
102379: CALL_OW 488
102383: NOT
102384: PUSH
102385: LD_VAR 0 6
102389: PUSH
102390: LD_VAR 0 4
102394: ARRAY
102395: PUSH
102396: LD_INT 1
102398: ARRAY
102399: PPUSH
102400: LD_VAR 0 6
102404: PUSH
102405: LD_VAR 0 4
102409: ARRAY
102410: PUSH
102411: LD_INT 2
102413: ARRAY
102414: PPUSH
102415: CALL_OW 428
102419: PUSH
102420: LD_INT 0
102422: NONEQUAL
102423: OR
102424: IFFALSE 102446
// tmp := Delete ( tmp , i ) ;
102426: LD_ADDR_VAR 0 6
102430: PUSH
102431: LD_VAR 0 6
102435: PPUSH
102436: LD_VAR 0 4
102440: PPUSH
102441: CALL_OW 3
102445: ST_TO_ADDR
102446: GO 102346
102448: POP
102449: POP
// j := GetClosestHex ( unit , tmp ) ;
102450: LD_ADDR_VAR 0 5
102454: PUSH
102455: LD_VAR 0 1
102459: PPUSH
102460: LD_VAR 0 6
102464: PPUSH
102465: CALL 101741 0 2
102469: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
102470: LD_VAR 0 1
102474: PPUSH
102475: LD_VAR 0 5
102479: PUSH
102480: LD_INT 1
102482: ARRAY
102483: PPUSH
102484: LD_VAR 0 5
102488: PUSH
102489: LD_INT 2
102491: ARRAY
102492: PPUSH
102493: CALL_OW 111
// end ;
102497: LD_VAR 0 3
102501: RET
// export function PrepareApemanSoldier ( ) ; begin
102502: LD_INT 0
102504: PPUSH
// uc_nation := 0 ;
102505: LD_ADDR_OWVAR 21
102509: PUSH
102510: LD_INT 0
102512: ST_TO_ADDR
// hc_sex := sex_male ;
102513: LD_ADDR_OWVAR 27
102517: PUSH
102518: LD_INT 1
102520: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
102521: LD_ADDR_OWVAR 28
102525: PUSH
102526: LD_INT 15
102528: ST_TO_ADDR
// hc_gallery :=  ;
102529: LD_ADDR_OWVAR 33
102533: PUSH
102534: LD_STRING 
102536: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
102537: LD_ADDR_OWVAR 31
102541: PUSH
102542: LD_INT 0
102544: PPUSH
102545: LD_INT 3
102547: PPUSH
102548: CALL_OW 12
102552: PUSH
102553: LD_INT 0
102555: PPUSH
102556: LD_INT 3
102558: PPUSH
102559: CALL_OW 12
102563: PUSH
102564: LD_INT 0
102566: PUSH
102567: LD_INT 0
102569: PUSH
102570: EMPTY
102571: LIST
102572: LIST
102573: LIST
102574: LIST
102575: ST_TO_ADDR
// end ;
102576: LD_VAR 0 1
102580: RET
// export function PrepareApemanEngineer ( ) ; begin
102581: LD_INT 0
102583: PPUSH
// uc_nation := 0 ;
102584: LD_ADDR_OWVAR 21
102588: PUSH
102589: LD_INT 0
102591: ST_TO_ADDR
// hc_sex := sex_male ;
102592: LD_ADDR_OWVAR 27
102596: PUSH
102597: LD_INT 1
102599: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
102600: LD_ADDR_OWVAR 28
102604: PUSH
102605: LD_INT 16
102607: ST_TO_ADDR
// hc_gallery :=  ;
102608: LD_ADDR_OWVAR 33
102612: PUSH
102613: LD_STRING 
102615: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
102616: LD_ADDR_OWVAR 31
102620: PUSH
102621: LD_INT 0
102623: PPUSH
102624: LD_INT 3
102626: PPUSH
102627: CALL_OW 12
102631: PUSH
102632: LD_INT 0
102634: PPUSH
102635: LD_INT 3
102637: PPUSH
102638: CALL_OW 12
102642: PUSH
102643: LD_INT 0
102645: PUSH
102646: LD_INT 0
102648: PUSH
102649: EMPTY
102650: LIST
102651: LIST
102652: LIST
102653: LIST
102654: ST_TO_ADDR
// end ;
102655: LD_VAR 0 1
102659: RET
// export function PrepareApeman ( agressivity ) ; begin
102660: LD_INT 0
102662: PPUSH
// uc_side := 0 ;
102663: LD_ADDR_OWVAR 20
102667: PUSH
102668: LD_INT 0
102670: ST_TO_ADDR
// uc_nation := 0 ;
102671: LD_ADDR_OWVAR 21
102675: PUSH
102676: LD_INT 0
102678: ST_TO_ADDR
// hc_sex := sex_male ;
102679: LD_ADDR_OWVAR 27
102683: PUSH
102684: LD_INT 1
102686: ST_TO_ADDR
// hc_class := class_apeman ;
102687: LD_ADDR_OWVAR 28
102691: PUSH
102692: LD_INT 12
102694: ST_TO_ADDR
// hc_gallery :=  ;
102695: LD_ADDR_OWVAR 33
102699: PUSH
102700: LD_STRING 
102702: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
102703: LD_ADDR_OWVAR 35
102707: PUSH
102708: LD_VAR 0 1
102712: NEG
102713: PPUSH
102714: LD_VAR 0 1
102718: PPUSH
102719: CALL_OW 12
102723: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
102724: LD_ADDR_OWVAR 31
102728: PUSH
102729: LD_INT 0
102731: PPUSH
102732: LD_INT 3
102734: PPUSH
102735: CALL_OW 12
102739: PUSH
102740: LD_INT 0
102742: PPUSH
102743: LD_INT 3
102745: PPUSH
102746: CALL_OW 12
102750: PUSH
102751: LD_INT 0
102753: PUSH
102754: LD_INT 0
102756: PUSH
102757: EMPTY
102758: LIST
102759: LIST
102760: LIST
102761: LIST
102762: ST_TO_ADDR
// end ;
102763: LD_VAR 0 2
102767: RET
// export function PrepareTiger ( agressivity ) ; begin
102768: LD_INT 0
102770: PPUSH
// uc_side := 0 ;
102771: LD_ADDR_OWVAR 20
102775: PUSH
102776: LD_INT 0
102778: ST_TO_ADDR
// uc_nation := 0 ;
102779: LD_ADDR_OWVAR 21
102783: PUSH
102784: LD_INT 0
102786: ST_TO_ADDR
// hc_class := class_tiger ;
102787: LD_ADDR_OWVAR 28
102791: PUSH
102792: LD_INT 14
102794: ST_TO_ADDR
// hc_gallery :=  ;
102795: LD_ADDR_OWVAR 33
102799: PUSH
102800: LD_STRING 
102802: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
102803: LD_ADDR_OWVAR 35
102807: PUSH
102808: LD_VAR 0 1
102812: NEG
102813: PPUSH
102814: LD_VAR 0 1
102818: PPUSH
102819: CALL_OW 12
102823: ST_TO_ADDR
// end ;
102824: LD_VAR 0 2
102828: RET
// export function PrepareEnchidna ( ) ; begin
102829: LD_INT 0
102831: PPUSH
// uc_side := 0 ;
102832: LD_ADDR_OWVAR 20
102836: PUSH
102837: LD_INT 0
102839: ST_TO_ADDR
// uc_nation := 0 ;
102840: LD_ADDR_OWVAR 21
102844: PUSH
102845: LD_INT 0
102847: ST_TO_ADDR
// hc_class := class_baggie ;
102848: LD_ADDR_OWVAR 28
102852: PUSH
102853: LD_INT 13
102855: ST_TO_ADDR
// hc_gallery :=  ;
102856: LD_ADDR_OWVAR 33
102860: PUSH
102861: LD_STRING 
102863: ST_TO_ADDR
// end ;
102864: LD_VAR 0 1
102868: RET
// export function PrepareFrog ( ) ; begin
102869: LD_INT 0
102871: PPUSH
// uc_side := 0 ;
102872: LD_ADDR_OWVAR 20
102876: PUSH
102877: LD_INT 0
102879: ST_TO_ADDR
// uc_nation := 0 ;
102880: LD_ADDR_OWVAR 21
102884: PUSH
102885: LD_INT 0
102887: ST_TO_ADDR
// hc_class := class_frog ;
102888: LD_ADDR_OWVAR 28
102892: PUSH
102893: LD_INT 19
102895: ST_TO_ADDR
// hc_gallery :=  ;
102896: LD_ADDR_OWVAR 33
102900: PUSH
102901: LD_STRING 
102903: ST_TO_ADDR
// end ;
102904: LD_VAR 0 1
102908: RET
// export function PrepareFish ( ) ; begin
102909: LD_INT 0
102911: PPUSH
// uc_side := 0 ;
102912: LD_ADDR_OWVAR 20
102916: PUSH
102917: LD_INT 0
102919: ST_TO_ADDR
// uc_nation := 0 ;
102920: LD_ADDR_OWVAR 21
102924: PUSH
102925: LD_INT 0
102927: ST_TO_ADDR
// hc_class := class_fish ;
102928: LD_ADDR_OWVAR 28
102932: PUSH
102933: LD_INT 20
102935: ST_TO_ADDR
// hc_gallery :=  ;
102936: LD_ADDR_OWVAR 33
102940: PUSH
102941: LD_STRING 
102943: ST_TO_ADDR
// end ;
102944: LD_VAR 0 1
102948: RET
// export function PrepareBird ( ) ; begin
102949: LD_INT 0
102951: PPUSH
// uc_side := 0 ;
102952: LD_ADDR_OWVAR 20
102956: PUSH
102957: LD_INT 0
102959: ST_TO_ADDR
// uc_nation := 0 ;
102960: LD_ADDR_OWVAR 21
102964: PUSH
102965: LD_INT 0
102967: ST_TO_ADDR
// hc_class := class_phororhacos ;
102968: LD_ADDR_OWVAR 28
102972: PUSH
102973: LD_INT 18
102975: ST_TO_ADDR
// hc_gallery :=  ;
102976: LD_ADDR_OWVAR 33
102980: PUSH
102981: LD_STRING 
102983: ST_TO_ADDR
// end ;
102984: LD_VAR 0 1
102988: RET
// export function PrepareHorse ( ) ; begin
102989: LD_INT 0
102991: PPUSH
// uc_side := 0 ;
102992: LD_ADDR_OWVAR 20
102996: PUSH
102997: LD_INT 0
102999: ST_TO_ADDR
// uc_nation := 0 ;
103000: LD_ADDR_OWVAR 21
103004: PUSH
103005: LD_INT 0
103007: ST_TO_ADDR
// hc_class := class_horse ;
103008: LD_ADDR_OWVAR 28
103012: PUSH
103013: LD_INT 21
103015: ST_TO_ADDR
// hc_gallery :=  ;
103016: LD_ADDR_OWVAR 33
103020: PUSH
103021: LD_STRING 
103023: ST_TO_ADDR
// end ;
103024: LD_VAR 0 1
103028: RET
// export function PrepareMastodont ( ) ; begin
103029: LD_INT 0
103031: PPUSH
// uc_side := 0 ;
103032: LD_ADDR_OWVAR 20
103036: PUSH
103037: LD_INT 0
103039: ST_TO_ADDR
// uc_nation := 0 ;
103040: LD_ADDR_OWVAR 21
103044: PUSH
103045: LD_INT 0
103047: ST_TO_ADDR
// vc_chassis := class_mastodont ;
103048: LD_ADDR_OWVAR 37
103052: PUSH
103053: LD_INT 31
103055: ST_TO_ADDR
// vc_control := control_rider ;
103056: LD_ADDR_OWVAR 38
103060: PUSH
103061: LD_INT 4
103063: ST_TO_ADDR
// end ;
103064: LD_VAR 0 1
103068: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
103069: LD_INT 0
103071: PPUSH
103072: PPUSH
103073: PPUSH
// uc_side = 0 ;
103074: LD_ADDR_OWVAR 20
103078: PUSH
103079: LD_INT 0
103081: ST_TO_ADDR
// uc_nation = 0 ;
103082: LD_ADDR_OWVAR 21
103086: PUSH
103087: LD_INT 0
103089: ST_TO_ADDR
// InitHc_All ( ) ;
103090: CALL_OW 584
// InitVc ;
103094: CALL_OW 20
// if mastodonts then
103098: LD_VAR 0 6
103102: IFFALSE 103169
// for i = 1 to mastodonts do
103104: LD_ADDR_VAR 0 11
103108: PUSH
103109: DOUBLE
103110: LD_INT 1
103112: DEC
103113: ST_TO_ADDR
103114: LD_VAR 0 6
103118: PUSH
103119: FOR_TO
103120: IFFALSE 103167
// begin vc_chassis := 31 ;
103122: LD_ADDR_OWVAR 37
103126: PUSH
103127: LD_INT 31
103129: ST_TO_ADDR
// vc_control := control_rider ;
103130: LD_ADDR_OWVAR 38
103134: PUSH
103135: LD_INT 4
103137: ST_TO_ADDR
// animal := CreateVehicle ;
103138: LD_ADDR_VAR 0 12
103142: PUSH
103143: CALL_OW 45
103147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103148: LD_VAR 0 12
103152: PPUSH
103153: LD_VAR 0 8
103157: PPUSH
103158: LD_INT 0
103160: PPUSH
103161: CALL 105297 0 3
// end ;
103165: GO 103119
103167: POP
103168: POP
// if horses then
103169: LD_VAR 0 5
103173: IFFALSE 103240
// for i = 1 to horses do
103175: LD_ADDR_VAR 0 11
103179: PUSH
103180: DOUBLE
103181: LD_INT 1
103183: DEC
103184: ST_TO_ADDR
103185: LD_VAR 0 5
103189: PUSH
103190: FOR_TO
103191: IFFALSE 103238
// begin hc_class := 21 ;
103193: LD_ADDR_OWVAR 28
103197: PUSH
103198: LD_INT 21
103200: ST_TO_ADDR
// hc_gallery :=  ;
103201: LD_ADDR_OWVAR 33
103205: PUSH
103206: LD_STRING 
103208: ST_TO_ADDR
// animal := CreateHuman ;
103209: LD_ADDR_VAR 0 12
103213: PUSH
103214: CALL_OW 44
103218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103219: LD_VAR 0 12
103223: PPUSH
103224: LD_VAR 0 8
103228: PPUSH
103229: LD_INT 0
103231: PPUSH
103232: CALL 105297 0 3
// end ;
103236: GO 103190
103238: POP
103239: POP
// if birds then
103240: LD_VAR 0 1
103244: IFFALSE 103311
// for i = 1 to birds do
103246: LD_ADDR_VAR 0 11
103250: PUSH
103251: DOUBLE
103252: LD_INT 1
103254: DEC
103255: ST_TO_ADDR
103256: LD_VAR 0 1
103260: PUSH
103261: FOR_TO
103262: IFFALSE 103309
// begin hc_class := 18 ;
103264: LD_ADDR_OWVAR 28
103268: PUSH
103269: LD_INT 18
103271: ST_TO_ADDR
// hc_gallery =  ;
103272: LD_ADDR_OWVAR 33
103276: PUSH
103277: LD_STRING 
103279: ST_TO_ADDR
// animal := CreateHuman ;
103280: LD_ADDR_VAR 0 12
103284: PUSH
103285: CALL_OW 44
103289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103290: LD_VAR 0 12
103294: PPUSH
103295: LD_VAR 0 8
103299: PPUSH
103300: LD_INT 0
103302: PPUSH
103303: CALL 105297 0 3
// end ;
103307: GO 103261
103309: POP
103310: POP
// if tigers then
103311: LD_VAR 0 2
103315: IFFALSE 103399
// for i = 1 to tigers do
103317: LD_ADDR_VAR 0 11
103321: PUSH
103322: DOUBLE
103323: LD_INT 1
103325: DEC
103326: ST_TO_ADDR
103327: LD_VAR 0 2
103331: PUSH
103332: FOR_TO
103333: IFFALSE 103397
// begin hc_class = class_tiger ;
103335: LD_ADDR_OWVAR 28
103339: PUSH
103340: LD_INT 14
103342: ST_TO_ADDR
// hc_gallery =  ;
103343: LD_ADDR_OWVAR 33
103347: PUSH
103348: LD_STRING 
103350: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
103351: LD_ADDR_OWVAR 35
103355: PUSH
103356: LD_INT 7
103358: NEG
103359: PPUSH
103360: LD_INT 7
103362: PPUSH
103363: CALL_OW 12
103367: ST_TO_ADDR
// animal := CreateHuman ;
103368: LD_ADDR_VAR 0 12
103372: PUSH
103373: CALL_OW 44
103377: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103378: LD_VAR 0 12
103382: PPUSH
103383: LD_VAR 0 8
103387: PPUSH
103388: LD_INT 0
103390: PPUSH
103391: CALL 105297 0 3
// end ;
103395: GO 103332
103397: POP
103398: POP
// if apemans then
103399: LD_VAR 0 3
103403: IFFALSE 103526
// for i = 1 to apemans do
103405: LD_ADDR_VAR 0 11
103409: PUSH
103410: DOUBLE
103411: LD_INT 1
103413: DEC
103414: ST_TO_ADDR
103415: LD_VAR 0 3
103419: PUSH
103420: FOR_TO
103421: IFFALSE 103524
// begin hc_class = class_apeman ;
103423: LD_ADDR_OWVAR 28
103427: PUSH
103428: LD_INT 12
103430: ST_TO_ADDR
// hc_gallery =  ;
103431: LD_ADDR_OWVAR 33
103435: PUSH
103436: LD_STRING 
103438: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
103439: LD_ADDR_OWVAR 35
103443: PUSH
103444: LD_INT 2
103446: NEG
103447: PPUSH
103448: LD_INT 2
103450: PPUSH
103451: CALL_OW 12
103455: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
103456: LD_ADDR_OWVAR 31
103460: PUSH
103461: LD_INT 1
103463: PPUSH
103464: LD_INT 3
103466: PPUSH
103467: CALL_OW 12
103471: PUSH
103472: LD_INT 1
103474: PPUSH
103475: LD_INT 3
103477: PPUSH
103478: CALL_OW 12
103482: PUSH
103483: LD_INT 0
103485: PUSH
103486: LD_INT 0
103488: PUSH
103489: EMPTY
103490: LIST
103491: LIST
103492: LIST
103493: LIST
103494: ST_TO_ADDR
// animal := CreateHuman ;
103495: LD_ADDR_VAR 0 12
103499: PUSH
103500: CALL_OW 44
103504: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103505: LD_VAR 0 12
103509: PPUSH
103510: LD_VAR 0 8
103514: PPUSH
103515: LD_INT 0
103517: PPUSH
103518: CALL 105297 0 3
// end ;
103522: GO 103420
103524: POP
103525: POP
// if enchidnas then
103526: LD_VAR 0 4
103530: IFFALSE 103597
// for i = 1 to enchidnas do
103532: LD_ADDR_VAR 0 11
103536: PUSH
103537: DOUBLE
103538: LD_INT 1
103540: DEC
103541: ST_TO_ADDR
103542: LD_VAR 0 4
103546: PUSH
103547: FOR_TO
103548: IFFALSE 103595
// begin hc_class = 13 ;
103550: LD_ADDR_OWVAR 28
103554: PUSH
103555: LD_INT 13
103557: ST_TO_ADDR
// hc_gallery =  ;
103558: LD_ADDR_OWVAR 33
103562: PUSH
103563: LD_STRING 
103565: ST_TO_ADDR
// animal := CreateHuman ;
103566: LD_ADDR_VAR 0 12
103570: PUSH
103571: CALL_OW 44
103575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
103576: LD_VAR 0 12
103580: PPUSH
103581: LD_VAR 0 8
103585: PPUSH
103586: LD_INT 0
103588: PPUSH
103589: CALL 105297 0 3
// end ;
103593: GO 103547
103595: POP
103596: POP
// if fishes then
103597: LD_VAR 0 7
103601: IFFALSE 103668
// for i = 1 to fishes do
103603: LD_ADDR_VAR 0 11
103607: PUSH
103608: DOUBLE
103609: LD_INT 1
103611: DEC
103612: ST_TO_ADDR
103613: LD_VAR 0 7
103617: PUSH
103618: FOR_TO
103619: IFFALSE 103666
// begin hc_class = 20 ;
103621: LD_ADDR_OWVAR 28
103625: PUSH
103626: LD_INT 20
103628: ST_TO_ADDR
// hc_gallery =  ;
103629: LD_ADDR_OWVAR 33
103633: PUSH
103634: LD_STRING 
103636: ST_TO_ADDR
// animal := CreateHuman ;
103637: LD_ADDR_VAR 0 12
103641: PUSH
103642: CALL_OW 44
103646: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
103647: LD_VAR 0 12
103651: PPUSH
103652: LD_VAR 0 9
103656: PPUSH
103657: LD_INT 0
103659: PPUSH
103660: CALL 105297 0 3
// end ;
103664: GO 103618
103666: POP
103667: POP
// end ;
103668: LD_VAR 0 10
103672: RET
// export function WantHeal ( sci , unit ) ; begin
103673: LD_INT 0
103675: PPUSH
// if GetTaskList ( sci ) > 0 then
103676: LD_VAR 0 1
103680: PPUSH
103681: CALL_OW 437
103685: PUSH
103686: LD_INT 0
103688: GREATER
103689: IFFALSE 103759
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
103691: LD_VAR 0 1
103695: PPUSH
103696: CALL_OW 437
103700: PUSH
103701: LD_INT 1
103703: ARRAY
103704: PUSH
103705: LD_INT 1
103707: ARRAY
103708: PUSH
103709: LD_STRING l
103711: EQUAL
103712: PUSH
103713: LD_VAR 0 1
103717: PPUSH
103718: CALL_OW 437
103722: PUSH
103723: LD_INT 1
103725: ARRAY
103726: PUSH
103727: LD_INT 4
103729: ARRAY
103730: PUSH
103731: LD_VAR 0 2
103735: EQUAL
103736: AND
103737: IFFALSE 103749
// result := true else
103739: LD_ADDR_VAR 0 3
103743: PUSH
103744: LD_INT 1
103746: ST_TO_ADDR
103747: GO 103757
// result := false ;
103749: LD_ADDR_VAR 0 3
103753: PUSH
103754: LD_INT 0
103756: ST_TO_ADDR
// end else
103757: GO 103767
// result := false ;
103759: LD_ADDR_VAR 0 3
103763: PUSH
103764: LD_INT 0
103766: ST_TO_ADDR
// end ;
103767: LD_VAR 0 3
103771: RET
// export function HealTarget ( sci ) ; begin
103772: LD_INT 0
103774: PPUSH
// if not sci then
103775: LD_VAR 0 1
103779: NOT
103780: IFFALSE 103784
// exit ;
103782: GO 103849
// result := 0 ;
103784: LD_ADDR_VAR 0 2
103788: PUSH
103789: LD_INT 0
103791: ST_TO_ADDR
// if GetTaskList ( sci ) then
103792: LD_VAR 0 1
103796: PPUSH
103797: CALL_OW 437
103801: IFFALSE 103849
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
103803: LD_VAR 0 1
103807: PPUSH
103808: CALL_OW 437
103812: PUSH
103813: LD_INT 1
103815: ARRAY
103816: PUSH
103817: LD_INT 1
103819: ARRAY
103820: PUSH
103821: LD_STRING l
103823: EQUAL
103824: IFFALSE 103849
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
103826: LD_ADDR_VAR 0 2
103830: PUSH
103831: LD_VAR 0 1
103835: PPUSH
103836: CALL_OW 437
103840: PUSH
103841: LD_INT 1
103843: ARRAY
103844: PUSH
103845: LD_INT 4
103847: ARRAY
103848: ST_TO_ADDR
// end ;
103849: LD_VAR 0 2
103853: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
103854: LD_INT 0
103856: PPUSH
103857: PPUSH
103858: PPUSH
103859: PPUSH
// if not base_units then
103860: LD_VAR 0 1
103864: NOT
103865: IFFALSE 103869
// exit ;
103867: GO 103956
// result := false ;
103869: LD_ADDR_VAR 0 2
103873: PUSH
103874: LD_INT 0
103876: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
103877: LD_ADDR_VAR 0 5
103881: PUSH
103882: LD_VAR 0 1
103886: PPUSH
103887: LD_INT 21
103889: PUSH
103890: LD_INT 3
103892: PUSH
103893: EMPTY
103894: LIST
103895: LIST
103896: PPUSH
103897: CALL_OW 72
103901: ST_TO_ADDR
// if not tmp then
103902: LD_VAR 0 5
103906: NOT
103907: IFFALSE 103911
// exit ;
103909: GO 103956
// for i in tmp do
103911: LD_ADDR_VAR 0 3
103915: PUSH
103916: LD_VAR 0 5
103920: PUSH
103921: FOR_IN
103922: IFFALSE 103954
// begin result := EnemyInRange ( i , 22 ) ;
103924: LD_ADDR_VAR 0 2
103928: PUSH
103929: LD_VAR 0 3
103933: PPUSH
103934: LD_INT 22
103936: PPUSH
103937: CALL 101543 0 2
103941: ST_TO_ADDR
// if result then
103942: LD_VAR 0 2
103946: IFFALSE 103952
// exit ;
103948: POP
103949: POP
103950: GO 103956
// end ;
103952: GO 103921
103954: POP
103955: POP
// end ;
103956: LD_VAR 0 2
103960: RET
// export function FilterByTag ( units , tag ) ; begin
103961: LD_INT 0
103963: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
103964: LD_ADDR_VAR 0 3
103968: PUSH
103969: LD_VAR 0 1
103973: PPUSH
103974: LD_INT 120
103976: PUSH
103977: LD_VAR 0 2
103981: PUSH
103982: EMPTY
103983: LIST
103984: LIST
103985: PPUSH
103986: CALL_OW 72
103990: ST_TO_ADDR
// end ;
103991: LD_VAR 0 3
103995: RET
// export function IsDriver ( un ) ; begin
103996: LD_INT 0
103998: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
103999: LD_ADDR_VAR 0 2
104003: PUSH
104004: LD_VAR 0 1
104008: PUSH
104009: LD_INT 55
104011: PUSH
104012: EMPTY
104013: LIST
104014: PPUSH
104015: CALL_OW 69
104019: IN
104020: ST_TO_ADDR
// end ;
104021: LD_VAR 0 2
104025: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
104026: LD_INT 0
104028: PPUSH
104029: PPUSH
// list := [ ] ;
104030: LD_ADDR_VAR 0 5
104034: PUSH
104035: EMPTY
104036: ST_TO_ADDR
// case d of 0 :
104037: LD_VAR 0 3
104041: PUSH
104042: LD_INT 0
104044: DOUBLE
104045: EQUAL
104046: IFTRUE 104050
104048: GO 104183
104050: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
104051: LD_ADDR_VAR 0 5
104055: PUSH
104056: LD_VAR 0 1
104060: PUSH
104061: LD_INT 4
104063: MINUS
104064: PUSH
104065: LD_VAR 0 2
104069: PUSH
104070: LD_INT 4
104072: MINUS
104073: PUSH
104074: LD_INT 2
104076: PUSH
104077: EMPTY
104078: LIST
104079: LIST
104080: LIST
104081: PUSH
104082: LD_VAR 0 1
104086: PUSH
104087: LD_INT 3
104089: MINUS
104090: PUSH
104091: LD_VAR 0 2
104095: PUSH
104096: LD_INT 1
104098: PUSH
104099: EMPTY
104100: LIST
104101: LIST
104102: LIST
104103: PUSH
104104: LD_VAR 0 1
104108: PUSH
104109: LD_INT 4
104111: PLUS
104112: PUSH
104113: LD_VAR 0 2
104117: PUSH
104118: LD_INT 4
104120: PUSH
104121: EMPTY
104122: LIST
104123: LIST
104124: LIST
104125: PUSH
104126: LD_VAR 0 1
104130: PUSH
104131: LD_INT 3
104133: PLUS
104134: PUSH
104135: LD_VAR 0 2
104139: PUSH
104140: LD_INT 3
104142: PLUS
104143: PUSH
104144: LD_INT 5
104146: PUSH
104147: EMPTY
104148: LIST
104149: LIST
104150: LIST
104151: PUSH
104152: LD_VAR 0 1
104156: PUSH
104157: LD_VAR 0 2
104161: PUSH
104162: LD_INT 4
104164: PLUS
104165: PUSH
104166: LD_INT 0
104168: PUSH
104169: EMPTY
104170: LIST
104171: LIST
104172: LIST
104173: PUSH
104174: EMPTY
104175: LIST
104176: LIST
104177: LIST
104178: LIST
104179: LIST
104180: ST_TO_ADDR
// end ; 1 :
104181: GO 104881
104183: LD_INT 1
104185: DOUBLE
104186: EQUAL
104187: IFTRUE 104191
104189: GO 104324
104191: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
104192: LD_ADDR_VAR 0 5
104196: PUSH
104197: LD_VAR 0 1
104201: PUSH
104202: LD_VAR 0 2
104206: PUSH
104207: LD_INT 4
104209: MINUS
104210: PUSH
104211: LD_INT 3
104213: PUSH
104214: EMPTY
104215: LIST
104216: LIST
104217: LIST
104218: PUSH
104219: LD_VAR 0 1
104223: PUSH
104224: LD_INT 3
104226: MINUS
104227: PUSH
104228: LD_VAR 0 2
104232: PUSH
104233: LD_INT 3
104235: MINUS
104236: PUSH
104237: LD_INT 2
104239: PUSH
104240: EMPTY
104241: LIST
104242: LIST
104243: LIST
104244: PUSH
104245: LD_VAR 0 1
104249: PUSH
104250: LD_INT 4
104252: MINUS
104253: PUSH
104254: LD_VAR 0 2
104258: PUSH
104259: LD_INT 1
104261: PUSH
104262: EMPTY
104263: LIST
104264: LIST
104265: LIST
104266: PUSH
104267: LD_VAR 0 1
104271: PUSH
104272: LD_VAR 0 2
104276: PUSH
104277: LD_INT 3
104279: PLUS
104280: PUSH
104281: LD_INT 0
104283: PUSH
104284: EMPTY
104285: LIST
104286: LIST
104287: LIST
104288: PUSH
104289: LD_VAR 0 1
104293: PUSH
104294: LD_INT 4
104296: PLUS
104297: PUSH
104298: LD_VAR 0 2
104302: PUSH
104303: LD_INT 4
104305: PLUS
104306: PUSH
104307: LD_INT 5
104309: PUSH
104310: EMPTY
104311: LIST
104312: LIST
104313: LIST
104314: PUSH
104315: EMPTY
104316: LIST
104317: LIST
104318: LIST
104319: LIST
104320: LIST
104321: ST_TO_ADDR
// end ; 2 :
104322: GO 104881
104324: LD_INT 2
104326: DOUBLE
104327: EQUAL
104328: IFTRUE 104332
104330: GO 104461
104332: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
104333: LD_ADDR_VAR 0 5
104337: PUSH
104338: LD_VAR 0 1
104342: PUSH
104343: LD_VAR 0 2
104347: PUSH
104348: LD_INT 3
104350: MINUS
104351: PUSH
104352: LD_INT 3
104354: PUSH
104355: EMPTY
104356: LIST
104357: LIST
104358: LIST
104359: PUSH
104360: LD_VAR 0 1
104364: PUSH
104365: LD_INT 4
104367: PLUS
104368: PUSH
104369: LD_VAR 0 2
104373: PUSH
104374: LD_INT 4
104376: PUSH
104377: EMPTY
104378: LIST
104379: LIST
104380: LIST
104381: PUSH
104382: LD_VAR 0 1
104386: PUSH
104387: LD_VAR 0 2
104391: PUSH
104392: LD_INT 4
104394: PLUS
104395: PUSH
104396: LD_INT 0
104398: PUSH
104399: EMPTY
104400: LIST
104401: LIST
104402: LIST
104403: PUSH
104404: LD_VAR 0 1
104408: PUSH
104409: LD_INT 3
104411: MINUS
104412: PUSH
104413: LD_VAR 0 2
104417: PUSH
104418: LD_INT 1
104420: PUSH
104421: EMPTY
104422: LIST
104423: LIST
104424: LIST
104425: PUSH
104426: LD_VAR 0 1
104430: PUSH
104431: LD_INT 4
104433: MINUS
104434: PUSH
104435: LD_VAR 0 2
104439: PUSH
104440: LD_INT 4
104442: MINUS
104443: PUSH
104444: LD_INT 2
104446: PUSH
104447: EMPTY
104448: LIST
104449: LIST
104450: LIST
104451: PUSH
104452: EMPTY
104453: LIST
104454: LIST
104455: LIST
104456: LIST
104457: LIST
104458: ST_TO_ADDR
// end ; 3 :
104459: GO 104881
104461: LD_INT 3
104463: DOUBLE
104464: EQUAL
104465: IFTRUE 104469
104467: GO 104602
104469: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
104470: LD_ADDR_VAR 0 5
104474: PUSH
104475: LD_VAR 0 1
104479: PUSH
104480: LD_INT 3
104482: PLUS
104483: PUSH
104484: LD_VAR 0 2
104488: PUSH
104489: LD_INT 4
104491: PUSH
104492: EMPTY
104493: LIST
104494: LIST
104495: LIST
104496: PUSH
104497: LD_VAR 0 1
104501: PUSH
104502: LD_INT 4
104504: PLUS
104505: PUSH
104506: LD_VAR 0 2
104510: PUSH
104511: LD_INT 4
104513: PLUS
104514: PUSH
104515: LD_INT 5
104517: PUSH
104518: EMPTY
104519: LIST
104520: LIST
104521: LIST
104522: PUSH
104523: LD_VAR 0 1
104527: PUSH
104528: LD_INT 4
104530: MINUS
104531: PUSH
104532: LD_VAR 0 2
104536: PUSH
104537: LD_INT 1
104539: PUSH
104540: EMPTY
104541: LIST
104542: LIST
104543: LIST
104544: PUSH
104545: LD_VAR 0 1
104549: PUSH
104550: LD_VAR 0 2
104554: PUSH
104555: LD_INT 4
104557: MINUS
104558: PUSH
104559: LD_INT 3
104561: PUSH
104562: EMPTY
104563: LIST
104564: LIST
104565: LIST
104566: PUSH
104567: LD_VAR 0 1
104571: PUSH
104572: LD_INT 3
104574: MINUS
104575: PUSH
104576: LD_VAR 0 2
104580: PUSH
104581: LD_INT 3
104583: MINUS
104584: PUSH
104585: LD_INT 2
104587: PUSH
104588: EMPTY
104589: LIST
104590: LIST
104591: LIST
104592: PUSH
104593: EMPTY
104594: LIST
104595: LIST
104596: LIST
104597: LIST
104598: LIST
104599: ST_TO_ADDR
// end ; 4 :
104600: GO 104881
104602: LD_INT 4
104604: DOUBLE
104605: EQUAL
104606: IFTRUE 104610
104608: GO 104743
104610: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
104611: LD_ADDR_VAR 0 5
104615: PUSH
104616: LD_VAR 0 1
104620: PUSH
104621: LD_VAR 0 2
104625: PUSH
104626: LD_INT 4
104628: PLUS
104629: PUSH
104630: LD_INT 0
104632: PUSH
104633: EMPTY
104634: LIST
104635: LIST
104636: LIST
104637: PUSH
104638: LD_VAR 0 1
104642: PUSH
104643: LD_INT 3
104645: PLUS
104646: PUSH
104647: LD_VAR 0 2
104651: PUSH
104652: LD_INT 3
104654: PLUS
104655: PUSH
104656: LD_INT 5
104658: PUSH
104659: EMPTY
104660: LIST
104661: LIST
104662: LIST
104663: PUSH
104664: LD_VAR 0 1
104668: PUSH
104669: LD_INT 4
104671: PLUS
104672: PUSH
104673: LD_VAR 0 2
104677: PUSH
104678: LD_INT 4
104680: PUSH
104681: EMPTY
104682: LIST
104683: LIST
104684: LIST
104685: PUSH
104686: LD_VAR 0 1
104690: PUSH
104691: LD_VAR 0 2
104695: PUSH
104696: LD_INT 3
104698: MINUS
104699: PUSH
104700: LD_INT 3
104702: PUSH
104703: EMPTY
104704: LIST
104705: LIST
104706: LIST
104707: PUSH
104708: LD_VAR 0 1
104712: PUSH
104713: LD_INT 4
104715: MINUS
104716: PUSH
104717: LD_VAR 0 2
104721: PUSH
104722: LD_INT 4
104724: MINUS
104725: PUSH
104726: LD_INT 2
104728: PUSH
104729: EMPTY
104730: LIST
104731: LIST
104732: LIST
104733: PUSH
104734: EMPTY
104735: LIST
104736: LIST
104737: LIST
104738: LIST
104739: LIST
104740: ST_TO_ADDR
// end ; 5 :
104741: GO 104881
104743: LD_INT 5
104745: DOUBLE
104746: EQUAL
104747: IFTRUE 104751
104749: GO 104880
104751: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
104752: LD_ADDR_VAR 0 5
104756: PUSH
104757: LD_VAR 0 1
104761: PUSH
104762: LD_INT 4
104764: MINUS
104765: PUSH
104766: LD_VAR 0 2
104770: PUSH
104771: LD_INT 1
104773: PUSH
104774: EMPTY
104775: LIST
104776: LIST
104777: LIST
104778: PUSH
104779: LD_VAR 0 1
104783: PUSH
104784: LD_VAR 0 2
104788: PUSH
104789: LD_INT 4
104791: MINUS
104792: PUSH
104793: LD_INT 3
104795: PUSH
104796: EMPTY
104797: LIST
104798: LIST
104799: LIST
104800: PUSH
104801: LD_VAR 0 1
104805: PUSH
104806: LD_INT 4
104808: PLUS
104809: PUSH
104810: LD_VAR 0 2
104814: PUSH
104815: LD_INT 4
104817: PLUS
104818: PUSH
104819: LD_INT 5
104821: PUSH
104822: EMPTY
104823: LIST
104824: LIST
104825: LIST
104826: PUSH
104827: LD_VAR 0 1
104831: PUSH
104832: LD_INT 3
104834: PLUS
104835: PUSH
104836: LD_VAR 0 2
104840: PUSH
104841: LD_INT 4
104843: PUSH
104844: EMPTY
104845: LIST
104846: LIST
104847: LIST
104848: PUSH
104849: LD_VAR 0 1
104853: PUSH
104854: LD_VAR 0 2
104858: PUSH
104859: LD_INT 3
104861: PLUS
104862: PUSH
104863: LD_INT 0
104865: PUSH
104866: EMPTY
104867: LIST
104868: LIST
104869: LIST
104870: PUSH
104871: EMPTY
104872: LIST
104873: LIST
104874: LIST
104875: LIST
104876: LIST
104877: ST_TO_ADDR
// end ; end ;
104878: GO 104881
104880: POP
// result := list ;
104881: LD_ADDR_VAR 0 4
104885: PUSH
104886: LD_VAR 0 5
104890: ST_TO_ADDR
// end ;
104891: LD_VAR 0 4
104895: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
104896: LD_INT 0
104898: PPUSH
104899: PPUSH
104900: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
104901: LD_VAR 0 1
104905: NOT
104906: PUSH
104907: LD_VAR 0 2
104911: PUSH
104912: LD_INT 1
104914: PUSH
104915: LD_INT 2
104917: PUSH
104918: LD_INT 3
104920: PUSH
104921: LD_INT 4
104923: PUSH
104924: EMPTY
104925: LIST
104926: LIST
104927: LIST
104928: LIST
104929: IN
104930: NOT
104931: OR
104932: IFFALSE 104936
// exit ;
104934: GO 105019
// tmp := [ ] ;
104936: LD_ADDR_VAR 0 5
104940: PUSH
104941: EMPTY
104942: ST_TO_ADDR
// for i in units do
104943: LD_ADDR_VAR 0 4
104947: PUSH
104948: LD_VAR 0 1
104952: PUSH
104953: FOR_IN
104954: IFFALSE 104988
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
104956: LD_ADDR_VAR 0 5
104960: PUSH
104961: LD_VAR 0 5
104965: PPUSH
104966: LD_VAR 0 4
104970: PPUSH
104971: LD_VAR 0 2
104975: PPUSH
104976: CALL_OW 259
104980: PPUSH
104981: CALL 106379 0 2
104985: ST_TO_ADDR
104986: GO 104953
104988: POP
104989: POP
// if not tmp then
104990: LD_VAR 0 5
104994: NOT
104995: IFFALSE 104999
// exit ;
104997: GO 105019
// result := SortListByListDesc ( units , tmp ) ;
104999: LD_ADDR_VAR 0 3
105003: PUSH
105004: LD_VAR 0 1
105008: PPUSH
105009: LD_VAR 0 5
105013: PPUSH
105014: CALL_OW 77
105018: ST_TO_ADDR
// end ;
105019: LD_VAR 0 3
105023: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
105024: LD_INT 0
105026: PPUSH
105027: PPUSH
105028: PPUSH
// result := false ;
105029: LD_ADDR_VAR 0 3
105033: PUSH
105034: LD_INT 0
105036: ST_TO_ADDR
// if not building then
105037: LD_VAR 0 2
105041: NOT
105042: IFFALSE 105046
// exit ;
105044: GO 105184
// x := GetX ( building ) ;
105046: LD_ADDR_VAR 0 4
105050: PUSH
105051: LD_VAR 0 2
105055: PPUSH
105056: CALL_OW 250
105060: ST_TO_ADDR
// y := GetY ( building ) ;
105061: LD_ADDR_VAR 0 5
105065: PUSH
105066: LD_VAR 0 2
105070: PPUSH
105071: CALL_OW 251
105075: ST_TO_ADDR
// if not x or not y then
105076: LD_VAR 0 4
105080: NOT
105081: PUSH
105082: LD_VAR 0 5
105086: NOT
105087: OR
105088: IFFALSE 105092
// exit ;
105090: GO 105184
// if GetTaskList ( unit ) then
105092: LD_VAR 0 1
105096: PPUSH
105097: CALL_OW 437
105101: IFFALSE 105184
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
105103: LD_STRING e
105105: PUSH
105106: LD_VAR 0 1
105110: PPUSH
105111: CALL_OW 437
105115: PUSH
105116: LD_INT 1
105118: ARRAY
105119: PUSH
105120: LD_INT 1
105122: ARRAY
105123: EQUAL
105124: PUSH
105125: LD_VAR 0 4
105129: PUSH
105130: LD_VAR 0 1
105134: PPUSH
105135: CALL_OW 437
105139: PUSH
105140: LD_INT 1
105142: ARRAY
105143: PUSH
105144: LD_INT 2
105146: ARRAY
105147: EQUAL
105148: AND
105149: PUSH
105150: LD_VAR 0 5
105154: PUSH
105155: LD_VAR 0 1
105159: PPUSH
105160: CALL_OW 437
105164: PUSH
105165: LD_INT 1
105167: ARRAY
105168: PUSH
105169: LD_INT 3
105171: ARRAY
105172: EQUAL
105173: AND
105174: IFFALSE 105184
// result := true end ;
105176: LD_ADDR_VAR 0 3
105180: PUSH
105181: LD_INT 1
105183: ST_TO_ADDR
// end ;
105184: LD_VAR 0 3
105188: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
105189: LD_INT 0
105191: PPUSH
// result := false ;
105192: LD_ADDR_VAR 0 4
105196: PUSH
105197: LD_INT 0
105199: ST_TO_ADDR
// if GetTaskList ( unit ) then
105200: LD_VAR 0 1
105204: PPUSH
105205: CALL_OW 437
105209: IFFALSE 105292
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
105211: LD_STRING M
105213: PUSH
105214: LD_VAR 0 1
105218: PPUSH
105219: CALL_OW 437
105223: PUSH
105224: LD_INT 1
105226: ARRAY
105227: PUSH
105228: LD_INT 1
105230: ARRAY
105231: EQUAL
105232: PUSH
105233: LD_VAR 0 2
105237: PUSH
105238: LD_VAR 0 1
105242: PPUSH
105243: CALL_OW 437
105247: PUSH
105248: LD_INT 1
105250: ARRAY
105251: PUSH
105252: LD_INT 2
105254: ARRAY
105255: EQUAL
105256: AND
105257: PUSH
105258: LD_VAR 0 3
105262: PUSH
105263: LD_VAR 0 1
105267: PPUSH
105268: CALL_OW 437
105272: PUSH
105273: LD_INT 1
105275: ARRAY
105276: PUSH
105277: LD_INT 3
105279: ARRAY
105280: EQUAL
105281: AND
105282: IFFALSE 105292
// result := true ;
105284: LD_ADDR_VAR 0 4
105288: PUSH
105289: LD_INT 1
105291: ST_TO_ADDR
// end ; end ;
105292: LD_VAR 0 4
105296: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
105297: LD_INT 0
105299: PPUSH
105300: PPUSH
105301: PPUSH
105302: PPUSH
// if not unit or not area then
105303: LD_VAR 0 1
105307: NOT
105308: PUSH
105309: LD_VAR 0 2
105313: NOT
105314: OR
105315: IFFALSE 105319
// exit ;
105317: GO 105482
// tmp := AreaToList ( area , i ) ;
105319: LD_ADDR_VAR 0 6
105323: PUSH
105324: LD_VAR 0 2
105328: PPUSH
105329: LD_VAR 0 5
105333: PPUSH
105334: CALL_OW 517
105338: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
105339: LD_ADDR_VAR 0 5
105343: PUSH
105344: DOUBLE
105345: LD_INT 1
105347: DEC
105348: ST_TO_ADDR
105349: LD_VAR 0 6
105353: PUSH
105354: LD_INT 1
105356: ARRAY
105357: PUSH
105358: FOR_TO
105359: IFFALSE 105480
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
105361: LD_ADDR_VAR 0 7
105365: PUSH
105366: LD_VAR 0 6
105370: PUSH
105371: LD_INT 1
105373: ARRAY
105374: PUSH
105375: LD_VAR 0 5
105379: ARRAY
105380: PUSH
105381: LD_VAR 0 6
105385: PUSH
105386: LD_INT 2
105388: ARRAY
105389: PUSH
105390: LD_VAR 0 5
105394: ARRAY
105395: PUSH
105396: EMPTY
105397: LIST
105398: LIST
105399: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
105400: LD_INT 92
105402: PUSH
105403: LD_VAR 0 7
105407: PUSH
105408: LD_INT 1
105410: ARRAY
105411: PUSH
105412: LD_VAR 0 7
105416: PUSH
105417: LD_INT 2
105419: ARRAY
105420: PUSH
105421: LD_INT 3
105423: PUSH
105424: EMPTY
105425: LIST
105426: LIST
105427: LIST
105428: LIST
105429: PPUSH
105430: CALL_OW 69
105434: PUSH
105435: LD_INT 0
105437: EQUAL
105438: IFFALSE 105478
// begin PlaceUnitArea ( unit , area , mode ) ;
105440: LD_VAR 0 1
105444: PPUSH
105445: LD_VAR 0 2
105449: PPUSH
105450: LD_VAR 0 3
105454: PPUSH
105455: CALL_OW 49
// result := IsPlaced ( unit ) ;
105459: LD_ADDR_VAR 0 4
105463: PUSH
105464: LD_VAR 0 1
105468: PPUSH
105469: CALL_OW 305
105473: ST_TO_ADDR
// exit ;
105474: POP
105475: POP
105476: GO 105482
// end ; end ;
105478: GO 105358
105480: POP
105481: POP
// end ;
105482: LD_VAR 0 4
105486: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
105487: LD_INT 0
105489: PPUSH
105490: PPUSH
105491: PPUSH
// if not side or side > 8 then
105492: LD_VAR 0 1
105496: NOT
105497: PUSH
105498: LD_VAR 0 1
105502: PUSH
105503: LD_INT 8
105505: GREATER
105506: OR
105507: IFFALSE 105511
// exit ;
105509: GO 105698
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
105511: LD_ADDR_VAR 0 4
105515: PUSH
105516: LD_INT 22
105518: PUSH
105519: LD_VAR 0 1
105523: PUSH
105524: EMPTY
105525: LIST
105526: LIST
105527: PUSH
105528: LD_INT 21
105530: PUSH
105531: LD_INT 3
105533: PUSH
105534: EMPTY
105535: LIST
105536: LIST
105537: PUSH
105538: EMPTY
105539: LIST
105540: LIST
105541: PPUSH
105542: CALL_OW 69
105546: ST_TO_ADDR
// if not tmp then
105547: LD_VAR 0 4
105551: NOT
105552: IFFALSE 105556
// exit ;
105554: GO 105698
// enable_addtolog := true ;
105556: LD_ADDR_OWVAR 81
105560: PUSH
105561: LD_INT 1
105563: ST_TO_ADDR
// AddToLog ( [ ) ;
105564: LD_STRING [
105566: PPUSH
105567: CALL_OW 561
// for i in tmp do
105571: LD_ADDR_VAR 0 3
105575: PUSH
105576: LD_VAR 0 4
105580: PUSH
105581: FOR_IN
105582: IFFALSE 105689
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
105584: LD_STRING [
105586: PUSH
105587: LD_VAR 0 3
105591: PPUSH
105592: CALL_OW 266
105596: STR
105597: PUSH
105598: LD_STRING , 
105600: STR
105601: PUSH
105602: LD_VAR 0 3
105606: PPUSH
105607: CALL_OW 250
105611: STR
105612: PUSH
105613: LD_STRING , 
105615: STR
105616: PUSH
105617: LD_VAR 0 3
105621: PPUSH
105622: CALL_OW 251
105626: STR
105627: PUSH
105628: LD_STRING , 
105630: STR
105631: PUSH
105632: LD_VAR 0 3
105636: PPUSH
105637: CALL_OW 254
105641: STR
105642: PUSH
105643: LD_STRING , 
105645: STR
105646: PUSH
105647: LD_VAR 0 3
105651: PPUSH
105652: LD_INT 1
105654: PPUSH
105655: CALL_OW 268
105659: STR
105660: PUSH
105661: LD_STRING , 
105663: STR
105664: PUSH
105665: LD_VAR 0 3
105669: PPUSH
105670: LD_INT 2
105672: PPUSH
105673: CALL_OW 268
105677: STR
105678: PUSH
105679: LD_STRING ],
105681: STR
105682: PPUSH
105683: CALL_OW 561
// end ;
105687: GO 105581
105689: POP
105690: POP
// AddToLog ( ]; ) ;
105691: LD_STRING ];
105693: PPUSH
105694: CALL_OW 561
// end ;
105698: LD_VAR 0 2
105702: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
105703: LD_INT 0
105705: PPUSH
105706: PPUSH
105707: PPUSH
105708: PPUSH
105709: PPUSH
// if not area or not rate or not max then
105710: LD_VAR 0 1
105714: NOT
105715: PUSH
105716: LD_VAR 0 2
105720: NOT
105721: OR
105722: PUSH
105723: LD_VAR 0 4
105727: NOT
105728: OR
105729: IFFALSE 105733
// exit ;
105731: GO 105922
// while 1 do
105733: LD_INT 1
105735: IFFALSE 105922
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
105737: LD_ADDR_VAR 0 9
105741: PUSH
105742: LD_VAR 0 1
105746: PPUSH
105747: LD_INT 1
105749: PPUSH
105750: CALL_OW 287
105754: PUSH
105755: LD_INT 10
105757: MUL
105758: ST_TO_ADDR
// r := rate / 10 ;
105759: LD_ADDR_VAR 0 7
105763: PUSH
105764: LD_VAR 0 2
105768: PUSH
105769: LD_INT 10
105771: DIVREAL
105772: ST_TO_ADDR
// time := 1 1$00 ;
105773: LD_ADDR_VAR 0 8
105777: PUSH
105778: LD_INT 2100
105780: ST_TO_ADDR
// if amount < min then
105781: LD_VAR 0 9
105785: PUSH
105786: LD_VAR 0 3
105790: LESS
105791: IFFALSE 105809
// r := r * 2 else
105793: LD_ADDR_VAR 0 7
105797: PUSH
105798: LD_VAR 0 7
105802: PUSH
105803: LD_INT 2
105805: MUL
105806: ST_TO_ADDR
105807: GO 105835
// if amount > max then
105809: LD_VAR 0 9
105813: PUSH
105814: LD_VAR 0 4
105818: GREATER
105819: IFFALSE 105835
// r := r / 2 ;
105821: LD_ADDR_VAR 0 7
105825: PUSH
105826: LD_VAR 0 7
105830: PUSH
105831: LD_INT 2
105833: DIVREAL
105834: ST_TO_ADDR
// time := time / r ;
105835: LD_ADDR_VAR 0 8
105839: PUSH
105840: LD_VAR 0 8
105844: PUSH
105845: LD_VAR 0 7
105849: DIVREAL
105850: ST_TO_ADDR
// if time < 0 then
105851: LD_VAR 0 8
105855: PUSH
105856: LD_INT 0
105858: LESS
105859: IFFALSE 105876
// time := time * - 1 ;
105861: LD_ADDR_VAR 0 8
105865: PUSH
105866: LD_VAR 0 8
105870: PUSH
105871: LD_INT 1
105873: NEG
105874: MUL
105875: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
105876: LD_VAR 0 8
105880: PUSH
105881: LD_INT 35
105883: PPUSH
105884: LD_INT 875
105886: PPUSH
105887: CALL_OW 12
105891: PLUS
105892: PPUSH
105893: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
105897: LD_INT 1
105899: PPUSH
105900: LD_INT 5
105902: PPUSH
105903: CALL_OW 12
105907: PPUSH
105908: LD_VAR 0 1
105912: PPUSH
105913: LD_INT 1
105915: PPUSH
105916: CALL_OW 55
// end ;
105920: GO 105733
// end ;
105922: LD_VAR 0 5
105926: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
105927: LD_INT 0
105929: PPUSH
105930: PPUSH
105931: PPUSH
105932: PPUSH
105933: PPUSH
105934: PPUSH
105935: PPUSH
105936: PPUSH
// if not turrets or not factories then
105937: LD_VAR 0 1
105941: NOT
105942: PUSH
105943: LD_VAR 0 2
105947: NOT
105948: OR
105949: IFFALSE 105953
// exit ;
105951: GO 106260
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
105953: LD_ADDR_VAR 0 10
105957: PUSH
105958: LD_INT 5
105960: PUSH
105961: LD_INT 6
105963: PUSH
105964: EMPTY
105965: LIST
105966: LIST
105967: PUSH
105968: LD_INT 2
105970: PUSH
105971: LD_INT 4
105973: PUSH
105974: EMPTY
105975: LIST
105976: LIST
105977: PUSH
105978: LD_INT 3
105980: PUSH
105981: LD_INT 5
105983: PUSH
105984: EMPTY
105985: LIST
105986: LIST
105987: PUSH
105988: EMPTY
105989: LIST
105990: LIST
105991: LIST
105992: PUSH
105993: LD_INT 24
105995: PUSH
105996: LD_INT 25
105998: PUSH
105999: EMPTY
106000: LIST
106001: LIST
106002: PUSH
106003: LD_INT 23
106005: PUSH
106006: LD_INT 27
106008: PUSH
106009: EMPTY
106010: LIST
106011: LIST
106012: PUSH
106013: EMPTY
106014: LIST
106015: LIST
106016: PUSH
106017: LD_INT 42
106019: PUSH
106020: LD_INT 43
106022: PUSH
106023: EMPTY
106024: LIST
106025: LIST
106026: PUSH
106027: LD_INT 44
106029: PUSH
106030: LD_INT 46
106032: PUSH
106033: EMPTY
106034: LIST
106035: LIST
106036: PUSH
106037: LD_INT 45
106039: PUSH
106040: LD_INT 47
106042: PUSH
106043: EMPTY
106044: LIST
106045: LIST
106046: PUSH
106047: EMPTY
106048: LIST
106049: LIST
106050: LIST
106051: PUSH
106052: EMPTY
106053: LIST
106054: LIST
106055: LIST
106056: ST_TO_ADDR
// result := [ ] ;
106057: LD_ADDR_VAR 0 3
106061: PUSH
106062: EMPTY
106063: ST_TO_ADDR
// for i in turrets do
106064: LD_ADDR_VAR 0 4
106068: PUSH
106069: LD_VAR 0 1
106073: PUSH
106074: FOR_IN
106075: IFFALSE 106258
// begin nat := GetNation ( i ) ;
106077: LD_ADDR_VAR 0 7
106081: PUSH
106082: LD_VAR 0 4
106086: PPUSH
106087: CALL_OW 248
106091: ST_TO_ADDR
// weapon := 0 ;
106092: LD_ADDR_VAR 0 8
106096: PUSH
106097: LD_INT 0
106099: ST_TO_ADDR
// if not nat then
106100: LD_VAR 0 7
106104: NOT
106105: IFFALSE 106109
// continue ;
106107: GO 106074
// for j in list [ nat ] do
106109: LD_ADDR_VAR 0 5
106113: PUSH
106114: LD_VAR 0 10
106118: PUSH
106119: LD_VAR 0 7
106123: ARRAY
106124: PUSH
106125: FOR_IN
106126: IFFALSE 106167
// if GetBWeapon ( i ) = j [ 1 ] then
106128: LD_VAR 0 4
106132: PPUSH
106133: CALL_OW 269
106137: PUSH
106138: LD_VAR 0 5
106142: PUSH
106143: LD_INT 1
106145: ARRAY
106146: EQUAL
106147: IFFALSE 106165
// begin weapon := j [ 2 ] ;
106149: LD_ADDR_VAR 0 8
106153: PUSH
106154: LD_VAR 0 5
106158: PUSH
106159: LD_INT 2
106161: ARRAY
106162: ST_TO_ADDR
// break ;
106163: GO 106167
// end ;
106165: GO 106125
106167: POP
106168: POP
// if not weapon then
106169: LD_VAR 0 8
106173: NOT
106174: IFFALSE 106178
// continue ;
106176: GO 106074
// for k in factories do
106178: LD_ADDR_VAR 0 6
106182: PUSH
106183: LD_VAR 0 2
106187: PUSH
106188: FOR_IN
106189: IFFALSE 106254
// begin weapons := AvailableWeaponList ( k ) ;
106191: LD_ADDR_VAR 0 9
106195: PUSH
106196: LD_VAR 0 6
106200: PPUSH
106201: CALL_OW 478
106205: ST_TO_ADDR
// if not weapons then
106206: LD_VAR 0 9
106210: NOT
106211: IFFALSE 106215
// continue ;
106213: GO 106188
// if weapon in weapons then
106215: LD_VAR 0 8
106219: PUSH
106220: LD_VAR 0 9
106224: IN
106225: IFFALSE 106252
// begin result := [ i , weapon ] ;
106227: LD_ADDR_VAR 0 3
106231: PUSH
106232: LD_VAR 0 4
106236: PUSH
106237: LD_VAR 0 8
106241: PUSH
106242: EMPTY
106243: LIST
106244: LIST
106245: ST_TO_ADDR
// exit ;
106246: POP
106247: POP
106248: POP
106249: POP
106250: GO 106260
// end ; end ;
106252: GO 106188
106254: POP
106255: POP
// end ;
106256: GO 106074
106258: POP
106259: POP
// end ;
106260: LD_VAR 0 3
106264: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
106265: LD_INT 0
106267: PPUSH
// if not side or side > 8 then
106268: LD_VAR 0 3
106272: NOT
106273: PUSH
106274: LD_VAR 0 3
106278: PUSH
106279: LD_INT 8
106281: GREATER
106282: OR
106283: IFFALSE 106287
// exit ;
106285: GO 106346
// if not range then
106287: LD_VAR 0 4
106291: NOT
106292: IFFALSE 106303
// range := - 12 ;
106294: LD_ADDR_VAR 0 4
106298: PUSH
106299: LD_INT 12
106301: NEG
106302: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
106303: LD_VAR 0 1
106307: PPUSH
106308: LD_VAR 0 2
106312: PPUSH
106313: LD_VAR 0 3
106317: PPUSH
106318: LD_VAR 0 4
106322: PPUSH
106323: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
106327: LD_VAR 0 1
106331: PPUSH
106332: LD_VAR 0 2
106336: PPUSH
106337: LD_VAR 0 3
106341: PPUSH
106342: CALL_OW 331
// end ;
106346: LD_VAR 0 5
106350: RET
// export function Video ( mode ) ; begin
106351: LD_INT 0
106353: PPUSH
// ingame_video = mode ;
106354: LD_ADDR_OWVAR 52
106358: PUSH
106359: LD_VAR 0 1
106363: ST_TO_ADDR
// interface_hidden = mode ;
106364: LD_ADDR_OWVAR 54
106368: PUSH
106369: LD_VAR 0 1
106373: ST_TO_ADDR
// end ;
106374: LD_VAR 0 2
106378: RET
// export function Join ( array , element ) ; begin
106379: LD_INT 0
106381: PPUSH
// result := Replace ( array , array + 1 , element ) ;
106382: LD_ADDR_VAR 0 3
106386: PUSH
106387: LD_VAR 0 1
106391: PPUSH
106392: LD_VAR 0 1
106396: PUSH
106397: LD_INT 1
106399: PLUS
106400: PPUSH
106401: LD_VAR 0 2
106405: PPUSH
106406: CALL_OW 1
106410: ST_TO_ADDR
// end ;
106411: LD_VAR 0 3
106415: RET
// export function JoinUnion ( array , element ) ; begin
106416: LD_INT 0
106418: PPUSH
// result := array union element ;
106419: LD_ADDR_VAR 0 3
106423: PUSH
106424: LD_VAR 0 1
106428: PUSH
106429: LD_VAR 0 2
106433: UNION
106434: ST_TO_ADDR
// end ;
106435: LD_VAR 0 3
106439: RET
// export function GetBehemoths ( side ) ; begin
106440: LD_INT 0
106442: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
106443: LD_ADDR_VAR 0 2
106447: PUSH
106448: LD_INT 22
106450: PUSH
106451: LD_VAR 0 1
106455: PUSH
106456: EMPTY
106457: LIST
106458: LIST
106459: PUSH
106460: LD_INT 31
106462: PUSH
106463: LD_INT 25
106465: PUSH
106466: EMPTY
106467: LIST
106468: LIST
106469: PUSH
106470: EMPTY
106471: LIST
106472: LIST
106473: PPUSH
106474: CALL_OW 69
106478: ST_TO_ADDR
// end ;
106479: LD_VAR 0 2
106483: RET
// export function Shuffle ( array ) ; var i , index ; begin
106484: LD_INT 0
106486: PPUSH
106487: PPUSH
106488: PPUSH
// result := [ ] ;
106489: LD_ADDR_VAR 0 2
106493: PUSH
106494: EMPTY
106495: ST_TO_ADDR
// if not array then
106496: LD_VAR 0 1
106500: NOT
106501: IFFALSE 106505
// exit ;
106503: GO 106604
// Randomize ;
106505: CALL_OW 10
// for i = array downto 1 do
106509: LD_ADDR_VAR 0 3
106513: PUSH
106514: DOUBLE
106515: LD_VAR 0 1
106519: INC
106520: ST_TO_ADDR
106521: LD_INT 1
106523: PUSH
106524: FOR_DOWNTO
106525: IFFALSE 106602
// begin index := rand ( 1 , array ) ;
106527: LD_ADDR_VAR 0 4
106531: PUSH
106532: LD_INT 1
106534: PPUSH
106535: LD_VAR 0 1
106539: PPUSH
106540: CALL_OW 12
106544: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
106545: LD_ADDR_VAR 0 2
106549: PUSH
106550: LD_VAR 0 2
106554: PPUSH
106555: LD_VAR 0 2
106559: PUSH
106560: LD_INT 1
106562: PLUS
106563: PPUSH
106564: LD_VAR 0 1
106568: PUSH
106569: LD_VAR 0 4
106573: ARRAY
106574: PPUSH
106575: CALL_OW 2
106579: ST_TO_ADDR
// array := Delete ( array , index ) ;
106580: LD_ADDR_VAR 0 1
106584: PUSH
106585: LD_VAR 0 1
106589: PPUSH
106590: LD_VAR 0 4
106594: PPUSH
106595: CALL_OW 3
106599: ST_TO_ADDR
// end ;
106600: GO 106524
106602: POP
106603: POP
// end ;
106604: LD_VAR 0 2
106608: RET
// export function GetBaseMaterials ( base ) ; begin
106609: LD_INT 0
106611: PPUSH
// result := [ 0 , 0 , 0 ] ;
106612: LD_ADDR_VAR 0 2
106616: PUSH
106617: LD_INT 0
106619: PUSH
106620: LD_INT 0
106622: PUSH
106623: LD_INT 0
106625: PUSH
106626: EMPTY
106627: LIST
106628: LIST
106629: LIST
106630: ST_TO_ADDR
// if not base then
106631: LD_VAR 0 1
106635: NOT
106636: IFFALSE 106640
// exit ;
106638: GO 106689
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
106640: LD_ADDR_VAR 0 2
106644: PUSH
106645: LD_VAR 0 1
106649: PPUSH
106650: LD_INT 1
106652: PPUSH
106653: CALL_OW 275
106657: PUSH
106658: LD_VAR 0 1
106662: PPUSH
106663: LD_INT 2
106665: PPUSH
106666: CALL_OW 275
106670: PUSH
106671: LD_VAR 0 1
106675: PPUSH
106676: LD_INT 3
106678: PPUSH
106679: CALL_OW 275
106683: PUSH
106684: EMPTY
106685: LIST
106686: LIST
106687: LIST
106688: ST_TO_ADDR
// end ;
106689: LD_VAR 0 2
106693: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
106694: LD_INT 0
106696: PPUSH
106697: PPUSH
// result := array ;
106698: LD_ADDR_VAR 0 3
106702: PUSH
106703: LD_VAR 0 1
106707: ST_TO_ADDR
// if size >= result then
106708: LD_VAR 0 2
106712: PUSH
106713: LD_VAR 0 3
106717: GREATEREQUAL
106718: IFFALSE 106722
// exit ;
106720: GO 106772
// if size then
106722: LD_VAR 0 2
106726: IFFALSE 106772
// for i := array downto size do
106728: LD_ADDR_VAR 0 4
106732: PUSH
106733: DOUBLE
106734: LD_VAR 0 1
106738: INC
106739: ST_TO_ADDR
106740: LD_VAR 0 2
106744: PUSH
106745: FOR_DOWNTO
106746: IFFALSE 106770
// result := Delete ( result , result ) ;
106748: LD_ADDR_VAR 0 3
106752: PUSH
106753: LD_VAR 0 3
106757: PPUSH
106758: LD_VAR 0 3
106762: PPUSH
106763: CALL_OW 3
106767: ST_TO_ADDR
106768: GO 106745
106770: POP
106771: POP
// end ;
106772: LD_VAR 0 3
106776: RET
// export function ComExit ( unit ) ; var tmp ; begin
106777: LD_INT 0
106779: PPUSH
106780: PPUSH
// if not IsInUnit ( unit ) then
106781: LD_VAR 0 1
106785: PPUSH
106786: CALL_OW 310
106790: NOT
106791: IFFALSE 106795
// exit ;
106793: GO 106855
// tmp := IsInUnit ( unit ) ;
106795: LD_ADDR_VAR 0 3
106799: PUSH
106800: LD_VAR 0 1
106804: PPUSH
106805: CALL_OW 310
106809: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
106810: LD_VAR 0 3
106814: PPUSH
106815: CALL_OW 247
106819: PUSH
106820: LD_INT 2
106822: EQUAL
106823: IFFALSE 106836
// ComExitVehicle ( unit ) else
106825: LD_VAR 0 1
106829: PPUSH
106830: CALL_OW 121
106834: GO 106845
// ComExitBuilding ( unit ) ;
106836: LD_VAR 0 1
106840: PPUSH
106841: CALL_OW 122
// result := tmp ;
106845: LD_ADDR_VAR 0 2
106849: PUSH
106850: LD_VAR 0 3
106854: ST_TO_ADDR
// end ;
106855: LD_VAR 0 2
106859: RET
// export function ComExitAll ( units ) ; var i ; begin
106860: LD_INT 0
106862: PPUSH
106863: PPUSH
// if not units then
106864: LD_VAR 0 1
106868: NOT
106869: IFFALSE 106873
// exit ;
106871: GO 106899
// for i in units do
106873: LD_ADDR_VAR 0 3
106877: PUSH
106878: LD_VAR 0 1
106882: PUSH
106883: FOR_IN
106884: IFFALSE 106897
// ComExit ( i ) ;
106886: LD_VAR 0 3
106890: PPUSH
106891: CALL 106777 0 1
106895: GO 106883
106897: POP
106898: POP
// end ;
106899: LD_VAR 0 2
106903: RET
// export function ResetHc ; begin
106904: LD_INT 0
106906: PPUSH
// InitHc ;
106907: CALL_OW 19
// hc_importance := 0 ;
106911: LD_ADDR_OWVAR 32
106915: PUSH
106916: LD_INT 0
106918: ST_TO_ADDR
// end ;
106919: LD_VAR 0 1
106923: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
106924: LD_INT 0
106926: PPUSH
106927: PPUSH
106928: PPUSH
// _x := ( x1 + x2 ) div 2 ;
106929: LD_ADDR_VAR 0 6
106933: PUSH
106934: LD_VAR 0 1
106938: PUSH
106939: LD_VAR 0 3
106943: PLUS
106944: PUSH
106945: LD_INT 2
106947: DIV
106948: ST_TO_ADDR
// if _x < 0 then
106949: LD_VAR 0 6
106953: PUSH
106954: LD_INT 0
106956: LESS
106957: IFFALSE 106974
// _x := _x * - 1 ;
106959: LD_ADDR_VAR 0 6
106963: PUSH
106964: LD_VAR 0 6
106968: PUSH
106969: LD_INT 1
106971: NEG
106972: MUL
106973: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
106974: LD_ADDR_VAR 0 7
106978: PUSH
106979: LD_VAR 0 2
106983: PUSH
106984: LD_VAR 0 4
106988: PLUS
106989: PUSH
106990: LD_INT 2
106992: DIV
106993: ST_TO_ADDR
// if _y < 0 then
106994: LD_VAR 0 7
106998: PUSH
106999: LD_INT 0
107001: LESS
107002: IFFALSE 107019
// _y := _y * - 1 ;
107004: LD_ADDR_VAR 0 7
107008: PUSH
107009: LD_VAR 0 7
107013: PUSH
107014: LD_INT 1
107016: NEG
107017: MUL
107018: ST_TO_ADDR
// result := [ _x , _y ] ;
107019: LD_ADDR_VAR 0 5
107023: PUSH
107024: LD_VAR 0 6
107028: PUSH
107029: LD_VAR 0 7
107033: PUSH
107034: EMPTY
107035: LIST
107036: LIST
107037: ST_TO_ADDR
// end ;
107038: LD_VAR 0 5
107042: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
107043: LD_INT 0
107045: PPUSH
107046: PPUSH
107047: PPUSH
107048: PPUSH
// task := GetTaskList ( unit ) ;
107049: LD_ADDR_VAR 0 7
107053: PUSH
107054: LD_VAR 0 1
107058: PPUSH
107059: CALL_OW 437
107063: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
107064: LD_VAR 0 7
107068: NOT
107069: PUSH
107070: LD_VAR 0 1
107074: PPUSH
107075: LD_VAR 0 2
107079: PPUSH
107080: CALL_OW 308
107084: NOT
107085: AND
107086: IFFALSE 107090
// exit ;
107088: GO 107208
// if IsInArea ( unit , area ) then
107090: LD_VAR 0 1
107094: PPUSH
107095: LD_VAR 0 2
107099: PPUSH
107100: CALL_OW 308
107104: IFFALSE 107122
// begin ComMoveToArea ( unit , goAway ) ;
107106: LD_VAR 0 1
107110: PPUSH
107111: LD_VAR 0 3
107115: PPUSH
107116: CALL_OW 113
// exit ;
107120: GO 107208
// end ; if task [ 1 ] [ 1 ] <> M then
107122: LD_VAR 0 7
107126: PUSH
107127: LD_INT 1
107129: ARRAY
107130: PUSH
107131: LD_INT 1
107133: ARRAY
107134: PUSH
107135: LD_STRING M
107137: NONEQUAL
107138: IFFALSE 107142
// exit ;
107140: GO 107208
// x := task [ 1 ] [ 2 ] ;
107142: LD_ADDR_VAR 0 5
107146: PUSH
107147: LD_VAR 0 7
107151: PUSH
107152: LD_INT 1
107154: ARRAY
107155: PUSH
107156: LD_INT 2
107158: ARRAY
107159: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
107160: LD_ADDR_VAR 0 6
107164: PUSH
107165: LD_VAR 0 7
107169: PUSH
107170: LD_INT 1
107172: ARRAY
107173: PUSH
107174: LD_INT 3
107176: ARRAY
107177: ST_TO_ADDR
// if InArea ( x , y , area ) then
107178: LD_VAR 0 5
107182: PPUSH
107183: LD_VAR 0 6
107187: PPUSH
107188: LD_VAR 0 2
107192: PPUSH
107193: CALL_OW 309
107197: IFFALSE 107208
// ComStop ( unit ) ;
107199: LD_VAR 0 1
107203: PPUSH
107204: CALL_OW 141
// end ;
107208: LD_VAR 0 4
107212: RET
// export function Abs ( value ) ; begin
107213: LD_INT 0
107215: PPUSH
// result := value ;
107216: LD_ADDR_VAR 0 2
107220: PUSH
107221: LD_VAR 0 1
107225: ST_TO_ADDR
// if value < 0 then
107226: LD_VAR 0 1
107230: PUSH
107231: LD_INT 0
107233: LESS
107234: IFFALSE 107251
// result := value * - 1 ;
107236: LD_ADDR_VAR 0 2
107240: PUSH
107241: LD_VAR 0 1
107245: PUSH
107246: LD_INT 1
107248: NEG
107249: MUL
107250: ST_TO_ADDR
// end ;
107251: LD_VAR 0 2
107255: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
107256: LD_INT 0
107258: PPUSH
107259: PPUSH
107260: PPUSH
107261: PPUSH
107262: PPUSH
107263: PPUSH
107264: PPUSH
107265: PPUSH
// if not unit or not building then
107266: LD_VAR 0 1
107270: NOT
107271: PUSH
107272: LD_VAR 0 2
107276: NOT
107277: OR
107278: IFFALSE 107282
// exit ;
107280: GO 107508
// x := GetX ( building ) ;
107282: LD_ADDR_VAR 0 4
107286: PUSH
107287: LD_VAR 0 2
107291: PPUSH
107292: CALL_OW 250
107296: ST_TO_ADDR
// y := GetY ( building ) ;
107297: LD_ADDR_VAR 0 6
107301: PUSH
107302: LD_VAR 0 2
107306: PPUSH
107307: CALL_OW 251
107311: ST_TO_ADDR
// d := GetDir ( building ) ;
107312: LD_ADDR_VAR 0 8
107316: PUSH
107317: LD_VAR 0 2
107321: PPUSH
107322: CALL_OW 254
107326: ST_TO_ADDR
// r := 4 ;
107327: LD_ADDR_VAR 0 9
107331: PUSH
107332: LD_INT 4
107334: ST_TO_ADDR
// for i := 1 to 5 do
107335: LD_ADDR_VAR 0 10
107339: PUSH
107340: DOUBLE
107341: LD_INT 1
107343: DEC
107344: ST_TO_ADDR
107345: LD_INT 5
107347: PUSH
107348: FOR_TO
107349: IFFALSE 107506
// begin _x := ShiftX ( x , d , r + i ) ;
107351: LD_ADDR_VAR 0 5
107355: PUSH
107356: LD_VAR 0 4
107360: PPUSH
107361: LD_VAR 0 8
107365: PPUSH
107366: LD_VAR 0 9
107370: PUSH
107371: LD_VAR 0 10
107375: PLUS
107376: PPUSH
107377: CALL_OW 272
107381: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
107382: LD_ADDR_VAR 0 7
107386: PUSH
107387: LD_VAR 0 6
107391: PPUSH
107392: LD_VAR 0 8
107396: PPUSH
107397: LD_VAR 0 9
107401: PUSH
107402: LD_VAR 0 10
107406: PLUS
107407: PPUSH
107408: CALL_OW 273
107412: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
107413: LD_VAR 0 5
107417: PPUSH
107418: LD_VAR 0 7
107422: PPUSH
107423: CALL_OW 488
107427: PUSH
107428: LD_VAR 0 5
107432: PPUSH
107433: LD_VAR 0 7
107437: PPUSH
107438: CALL_OW 428
107442: PPUSH
107443: CALL_OW 247
107447: PUSH
107448: LD_INT 3
107450: PUSH
107451: LD_INT 2
107453: PUSH
107454: EMPTY
107455: LIST
107456: LIST
107457: IN
107458: NOT
107459: AND
107460: IFFALSE 107504
// begin ComMoveXY ( unit , _x , _y ) ;
107462: LD_VAR 0 1
107466: PPUSH
107467: LD_VAR 0 5
107471: PPUSH
107472: LD_VAR 0 7
107476: PPUSH
107477: CALL_OW 111
// result := [ _x , _y ] ;
107481: LD_ADDR_VAR 0 3
107485: PUSH
107486: LD_VAR 0 5
107490: PUSH
107491: LD_VAR 0 7
107495: PUSH
107496: EMPTY
107497: LIST
107498: LIST
107499: ST_TO_ADDR
// exit ;
107500: POP
107501: POP
107502: GO 107508
// end ; end ;
107504: GO 107348
107506: POP
107507: POP
// end ;
107508: LD_VAR 0 3
107512: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
107513: LD_INT 0
107515: PPUSH
107516: PPUSH
107517: PPUSH
// result := 0 ;
107518: LD_ADDR_VAR 0 3
107522: PUSH
107523: LD_INT 0
107525: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
107526: LD_VAR 0 1
107530: PUSH
107531: LD_INT 0
107533: LESS
107534: PUSH
107535: LD_VAR 0 1
107539: PUSH
107540: LD_INT 8
107542: GREATER
107543: OR
107544: PUSH
107545: LD_VAR 0 2
107549: PUSH
107550: LD_INT 0
107552: LESS
107553: OR
107554: PUSH
107555: LD_VAR 0 2
107559: PUSH
107560: LD_INT 8
107562: GREATER
107563: OR
107564: IFFALSE 107568
// exit ;
107566: GO 107643
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
107568: LD_ADDR_VAR 0 4
107572: PUSH
107573: LD_INT 22
107575: PUSH
107576: LD_VAR 0 2
107580: PUSH
107581: EMPTY
107582: LIST
107583: LIST
107584: PPUSH
107585: CALL_OW 69
107589: PUSH
107590: FOR_IN
107591: IFFALSE 107641
// begin un := UnitShoot ( i ) ;
107593: LD_ADDR_VAR 0 5
107597: PUSH
107598: LD_VAR 0 4
107602: PPUSH
107603: CALL_OW 504
107607: ST_TO_ADDR
// if GetSide ( un ) = side1 then
107608: LD_VAR 0 5
107612: PPUSH
107613: CALL_OW 255
107617: PUSH
107618: LD_VAR 0 1
107622: EQUAL
107623: IFFALSE 107639
// begin result := un ;
107625: LD_ADDR_VAR 0 3
107629: PUSH
107630: LD_VAR 0 5
107634: ST_TO_ADDR
// exit ;
107635: POP
107636: POP
107637: GO 107643
// end ; end ;
107639: GO 107590
107641: POP
107642: POP
// end ;
107643: LD_VAR 0 3
107647: RET
// export function GetCargoBay ( units ) ; begin
107648: LD_INT 0
107650: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
107651: LD_ADDR_VAR 0 2
107655: PUSH
107656: LD_VAR 0 1
107660: PPUSH
107661: LD_INT 2
107663: PUSH
107664: LD_INT 34
107666: PUSH
107667: LD_INT 12
107669: PUSH
107670: EMPTY
107671: LIST
107672: LIST
107673: PUSH
107674: LD_INT 34
107676: PUSH
107677: LD_INT 51
107679: PUSH
107680: EMPTY
107681: LIST
107682: LIST
107683: PUSH
107684: LD_INT 34
107686: PUSH
107687: LD_INT 32
107689: PUSH
107690: EMPTY
107691: LIST
107692: LIST
107693: PUSH
107694: LD_INT 34
107696: PUSH
107697: LD_INT 89
107699: PUSH
107700: EMPTY
107701: LIST
107702: LIST
107703: PUSH
107704: EMPTY
107705: LIST
107706: LIST
107707: LIST
107708: LIST
107709: LIST
107710: PPUSH
107711: CALL_OW 72
107715: ST_TO_ADDR
// end ;
107716: LD_VAR 0 2
107720: RET
// export function Negate ( value ) ; begin
107721: LD_INT 0
107723: PPUSH
// result := not value ;
107724: LD_ADDR_VAR 0 2
107728: PUSH
107729: LD_VAR 0 1
107733: NOT
107734: ST_TO_ADDR
// end ;
107735: LD_VAR 0 2
107739: RET
// export function Inc ( value ) ; begin
107740: LD_INT 0
107742: PPUSH
// result := value + 1 ;
107743: LD_ADDR_VAR 0 2
107747: PUSH
107748: LD_VAR 0 1
107752: PUSH
107753: LD_INT 1
107755: PLUS
107756: ST_TO_ADDR
// end ;
107757: LD_VAR 0 2
107761: RET
// export function Dec ( value ) ; begin
107762: LD_INT 0
107764: PPUSH
// result := value - 1 ;
107765: LD_ADDR_VAR 0 2
107769: PUSH
107770: LD_VAR 0 1
107774: PUSH
107775: LD_INT 1
107777: MINUS
107778: ST_TO_ADDR
// end ;
107779: LD_VAR 0 2
107783: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
107784: LD_INT 0
107786: PPUSH
107787: PPUSH
107788: PPUSH
107789: PPUSH
107790: PPUSH
107791: PPUSH
107792: PPUSH
107793: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
107794: LD_VAR 0 1
107798: PPUSH
107799: LD_VAR 0 2
107803: PPUSH
107804: CALL_OW 488
107808: NOT
107809: PUSH
107810: LD_VAR 0 3
107814: PPUSH
107815: LD_VAR 0 4
107819: PPUSH
107820: CALL_OW 488
107824: NOT
107825: OR
107826: IFFALSE 107839
// begin result := - 1 ;
107828: LD_ADDR_VAR 0 5
107832: PUSH
107833: LD_INT 1
107835: NEG
107836: ST_TO_ADDR
// exit ;
107837: GO 108074
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
107839: LD_ADDR_VAR 0 12
107843: PUSH
107844: LD_VAR 0 1
107848: PPUSH
107849: LD_VAR 0 2
107853: PPUSH
107854: LD_VAR 0 3
107858: PPUSH
107859: LD_VAR 0 4
107863: PPUSH
107864: CALL 106924 0 4
107868: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
107869: LD_ADDR_VAR 0 11
107873: PUSH
107874: LD_VAR 0 1
107878: PPUSH
107879: LD_VAR 0 2
107883: PPUSH
107884: LD_VAR 0 12
107888: PUSH
107889: LD_INT 1
107891: ARRAY
107892: PPUSH
107893: LD_VAR 0 12
107897: PUSH
107898: LD_INT 2
107900: ARRAY
107901: PPUSH
107902: CALL_OW 298
107906: ST_TO_ADDR
// distance := 9999 ;
107907: LD_ADDR_VAR 0 10
107911: PUSH
107912: LD_INT 9999
107914: ST_TO_ADDR
// for i := 0 to 5 do
107915: LD_ADDR_VAR 0 6
107919: PUSH
107920: DOUBLE
107921: LD_INT 0
107923: DEC
107924: ST_TO_ADDR
107925: LD_INT 5
107927: PUSH
107928: FOR_TO
107929: IFFALSE 108072
// begin _x := ShiftX ( x1 , i , centerDist ) ;
107931: LD_ADDR_VAR 0 7
107935: PUSH
107936: LD_VAR 0 1
107940: PPUSH
107941: LD_VAR 0 6
107945: PPUSH
107946: LD_VAR 0 11
107950: PPUSH
107951: CALL_OW 272
107955: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
107956: LD_ADDR_VAR 0 8
107960: PUSH
107961: LD_VAR 0 2
107965: PPUSH
107966: LD_VAR 0 6
107970: PPUSH
107971: LD_VAR 0 11
107975: PPUSH
107976: CALL_OW 273
107980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
107981: LD_VAR 0 7
107985: PPUSH
107986: LD_VAR 0 8
107990: PPUSH
107991: CALL_OW 488
107995: NOT
107996: IFFALSE 108000
// continue ;
107998: GO 107928
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
108000: LD_ADDR_VAR 0 9
108004: PUSH
108005: LD_VAR 0 12
108009: PUSH
108010: LD_INT 1
108012: ARRAY
108013: PPUSH
108014: LD_VAR 0 12
108018: PUSH
108019: LD_INT 2
108021: ARRAY
108022: PPUSH
108023: LD_VAR 0 7
108027: PPUSH
108028: LD_VAR 0 8
108032: PPUSH
108033: CALL_OW 298
108037: ST_TO_ADDR
// if tmp < distance then
108038: LD_VAR 0 9
108042: PUSH
108043: LD_VAR 0 10
108047: LESS
108048: IFFALSE 108070
// begin result := i ;
108050: LD_ADDR_VAR 0 5
108054: PUSH
108055: LD_VAR 0 6
108059: ST_TO_ADDR
// distance := tmp ;
108060: LD_ADDR_VAR 0 10
108064: PUSH
108065: LD_VAR 0 9
108069: ST_TO_ADDR
// end ; end ;
108070: GO 107928
108072: POP
108073: POP
// end ;
108074: LD_VAR 0 5
108078: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
108079: LD_INT 0
108081: PPUSH
108082: PPUSH
// if not driver or not IsInUnit ( driver ) then
108083: LD_VAR 0 1
108087: NOT
108088: PUSH
108089: LD_VAR 0 1
108093: PPUSH
108094: CALL_OW 310
108098: NOT
108099: OR
108100: IFFALSE 108104
// exit ;
108102: GO 108194
// vehicle := IsInUnit ( driver ) ;
108104: LD_ADDR_VAR 0 3
108108: PUSH
108109: LD_VAR 0 1
108113: PPUSH
108114: CALL_OW 310
108118: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
108119: LD_VAR 0 1
108123: PPUSH
108124: LD_STRING \
108126: PUSH
108127: LD_INT 0
108129: PUSH
108130: LD_INT 0
108132: PUSH
108133: LD_INT 0
108135: PUSH
108136: LD_INT 0
108138: PUSH
108139: LD_INT 0
108141: PUSH
108142: LD_INT 0
108144: PUSH
108145: EMPTY
108146: LIST
108147: LIST
108148: LIST
108149: LIST
108150: LIST
108151: LIST
108152: LIST
108153: PUSH
108154: LD_STRING E
108156: PUSH
108157: LD_INT 0
108159: PUSH
108160: LD_INT 0
108162: PUSH
108163: LD_VAR 0 3
108167: PUSH
108168: LD_INT 0
108170: PUSH
108171: LD_INT 0
108173: PUSH
108174: LD_INT 0
108176: PUSH
108177: EMPTY
108178: LIST
108179: LIST
108180: LIST
108181: LIST
108182: LIST
108183: LIST
108184: LIST
108185: PUSH
108186: EMPTY
108187: LIST
108188: LIST
108189: PPUSH
108190: CALL_OW 446
// end ;
108194: LD_VAR 0 2
108198: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
108199: LD_INT 0
108201: PPUSH
108202: PPUSH
// if not driver or not IsInUnit ( driver ) then
108203: LD_VAR 0 1
108207: NOT
108208: PUSH
108209: LD_VAR 0 1
108213: PPUSH
108214: CALL_OW 310
108218: NOT
108219: OR
108220: IFFALSE 108224
// exit ;
108222: GO 108314
// vehicle := IsInUnit ( driver ) ;
108224: LD_ADDR_VAR 0 3
108228: PUSH
108229: LD_VAR 0 1
108233: PPUSH
108234: CALL_OW 310
108238: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
108239: LD_VAR 0 1
108243: PPUSH
108244: LD_STRING \
108246: PUSH
108247: LD_INT 0
108249: PUSH
108250: LD_INT 0
108252: PUSH
108253: LD_INT 0
108255: PUSH
108256: LD_INT 0
108258: PUSH
108259: LD_INT 0
108261: PUSH
108262: LD_INT 0
108264: PUSH
108265: EMPTY
108266: LIST
108267: LIST
108268: LIST
108269: LIST
108270: LIST
108271: LIST
108272: LIST
108273: PUSH
108274: LD_STRING E
108276: PUSH
108277: LD_INT 0
108279: PUSH
108280: LD_INT 0
108282: PUSH
108283: LD_VAR 0 3
108287: PUSH
108288: LD_INT 0
108290: PUSH
108291: LD_INT 0
108293: PUSH
108294: LD_INT 0
108296: PUSH
108297: EMPTY
108298: LIST
108299: LIST
108300: LIST
108301: LIST
108302: LIST
108303: LIST
108304: LIST
108305: PUSH
108306: EMPTY
108307: LIST
108308: LIST
108309: PPUSH
108310: CALL_OW 447
// end ;
108314: LD_VAR 0 2
108318: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
108319: LD_INT 0
108321: PPUSH
108322: PPUSH
108323: PPUSH
// tmp := [ ] ;
108324: LD_ADDR_VAR 0 5
108328: PUSH
108329: EMPTY
108330: ST_TO_ADDR
// for i in units do
108331: LD_ADDR_VAR 0 4
108335: PUSH
108336: LD_VAR 0 1
108340: PUSH
108341: FOR_IN
108342: IFFALSE 108380
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
108344: LD_ADDR_VAR 0 5
108348: PUSH
108349: LD_VAR 0 5
108353: PPUSH
108354: LD_VAR 0 5
108358: PUSH
108359: LD_INT 1
108361: PLUS
108362: PPUSH
108363: LD_VAR 0 4
108367: PPUSH
108368: CALL_OW 256
108372: PPUSH
108373: CALL_OW 2
108377: ST_TO_ADDR
108378: GO 108341
108380: POP
108381: POP
// if not tmp then
108382: LD_VAR 0 5
108386: NOT
108387: IFFALSE 108391
// exit ;
108389: GO 108439
// if asc then
108391: LD_VAR 0 2
108395: IFFALSE 108419
// result := SortListByListAsc ( units , tmp ) else
108397: LD_ADDR_VAR 0 3
108401: PUSH
108402: LD_VAR 0 1
108406: PPUSH
108407: LD_VAR 0 5
108411: PPUSH
108412: CALL_OW 76
108416: ST_TO_ADDR
108417: GO 108439
// result := SortListByListDesc ( units , tmp ) ;
108419: LD_ADDR_VAR 0 3
108423: PUSH
108424: LD_VAR 0 1
108428: PPUSH
108429: LD_VAR 0 5
108433: PPUSH
108434: CALL_OW 77
108438: ST_TO_ADDR
// end ;
108439: LD_VAR 0 3
108443: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
108444: LD_INT 0
108446: PPUSH
108447: PPUSH
// task := GetTaskList ( mech ) ;
108448: LD_ADDR_VAR 0 4
108452: PUSH
108453: LD_VAR 0 1
108457: PPUSH
108458: CALL_OW 437
108462: ST_TO_ADDR
// if not task then
108463: LD_VAR 0 4
108467: NOT
108468: IFFALSE 108472
// exit ;
108470: GO 108514
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
108472: LD_ADDR_VAR 0 3
108476: PUSH
108477: LD_VAR 0 4
108481: PUSH
108482: LD_INT 1
108484: ARRAY
108485: PUSH
108486: LD_INT 1
108488: ARRAY
108489: PUSH
108490: LD_STRING r
108492: EQUAL
108493: PUSH
108494: LD_VAR 0 4
108498: PUSH
108499: LD_INT 1
108501: ARRAY
108502: PUSH
108503: LD_INT 4
108505: ARRAY
108506: PUSH
108507: LD_VAR 0 2
108511: EQUAL
108512: AND
108513: ST_TO_ADDR
// end ;
108514: LD_VAR 0 3
108518: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
108519: LD_INT 0
108521: PPUSH
// SetDir ( unit , d ) ;
108522: LD_VAR 0 1
108526: PPUSH
108527: LD_VAR 0 4
108531: PPUSH
108532: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
108536: LD_VAR 0 1
108540: PPUSH
108541: LD_VAR 0 2
108545: PPUSH
108546: LD_VAR 0 3
108550: PPUSH
108551: LD_VAR 0 5
108555: PPUSH
108556: CALL_OW 48
// end ;
108560: LD_VAR 0 6
108564: RET
// export function ToNaturalNumber ( number ) ; begin
108565: LD_INT 0
108567: PPUSH
// result := number div 1 ;
108568: LD_ADDR_VAR 0 2
108572: PUSH
108573: LD_VAR 0 1
108577: PUSH
108578: LD_INT 1
108580: DIV
108581: ST_TO_ADDR
// if number < 0 then
108582: LD_VAR 0 1
108586: PUSH
108587: LD_INT 0
108589: LESS
108590: IFFALSE 108600
// result := 0 ;
108592: LD_ADDR_VAR 0 2
108596: PUSH
108597: LD_INT 0
108599: ST_TO_ADDR
// end ;
108600: LD_VAR 0 2
108604: RET
// export function SortByClass ( units , class ) ; var un ; begin
108605: LD_INT 0
108607: PPUSH
108608: PPUSH
// if not units or not class then
108609: LD_VAR 0 1
108613: NOT
108614: PUSH
108615: LD_VAR 0 2
108619: NOT
108620: OR
108621: IFFALSE 108625
// exit ;
108623: GO 108720
// result := [ ] ;
108625: LD_ADDR_VAR 0 3
108629: PUSH
108630: EMPTY
108631: ST_TO_ADDR
// for un in units do
108632: LD_ADDR_VAR 0 4
108636: PUSH
108637: LD_VAR 0 1
108641: PUSH
108642: FOR_IN
108643: IFFALSE 108718
// if GetClass ( un ) = class then
108645: LD_VAR 0 4
108649: PPUSH
108650: CALL_OW 257
108654: PUSH
108655: LD_VAR 0 2
108659: EQUAL
108660: IFFALSE 108687
// result := Insert ( result , 1 , un ) else
108662: LD_ADDR_VAR 0 3
108666: PUSH
108667: LD_VAR 0 3
108671: PPUSH
108672: LD_INT 1
108674: PPUSH
108675: LD_VAR 0 4
108679: PPUSH
108680: CALL_OW 2
108684: ST_TO_ADDR
108685: GO 108716
// result := Replace ( result , result + 1 , un ) ;
108687: LD_ADDR_VAR 0 3
108691: PUSH
108692: LD_VAR 0 3
108696: PPUSH
108697: LD_VAR 0 3
108701: PUSH
108702: LD_INT 1
108704: PLUS
108705: PPUSH
108706: LD_VAR 0 4
108710: PPUSH
108711: CALL_OW 1
108715: ST_TO_ADDR
108716: GO 108642
108718: POP
108719: POP
// end ;
108720: LD_VAR 0 3
108724: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
108725: LD_INT 0
108727: PPUSH
108728: PPUSH
108729: PPUSH
108730: PPUSH
108731: PPUSH
108732: PPUSH
108733: PPUSH
// result := [ ] ;
108734: LD_ADDR_VAR 0 4
108738: PUSH
108739: EMPTY
108740: ST_TO_ADDR
// if x - r < 0 then
108741: LD_VAR 0 1
108745: PUSH
108746: LD_VAR 0 3
108750: MINUS
108751: PUSH
108752: LD_INT 0
108754: LESS
108755: IFFALSE 108767
// min_x := 0 else
108757: LD_ADDR_VAR 0 8
108761: PUSH
108762: LD_INT 0
108764: ST_TO_ADDR
108765: GO 108783
// min_x := x - r ;
108767: LD_ADDR_VAR 0 8
108771: PUSH
108772: LD_VAR 0 1
108776: PUSH
108777: LD_VAR 0 3
108781: MINUS
108782: ST_TO_ADDR
// if y - r < 0 then
108783: LD_VAR 0 2
108787: PUSH
108788: LD_VAR 0 3
108792: MINUS
108793: PUSH
108794: LD_INT 0
108796: LESS
108797: IFFALSE 108809
// min_y := 0 else
108799: LD_ADDR_VAR 0 7
108803: PUSH
108804: LD_INT 0
108806: ST_TO_ADDR
108807: GO 108825
// min_y := y - r ;
108809: LD_ADDR_VAR 0 7
108813: PUSH
108814: LD_VAR 0 2
108818: PUSH
108819: LD_VAR 0 3
108823: MINUS
108824: ST_TO_ADDR
// max_x := x + r ;
108825: LD_ADDR_VAR 0 9
108829: PUSH
108830: LD_VAR 0 1
108834: PUSH
108835: LD_VAR 0 3
108839: PLUS
108840: ST_TO_ADDR
// max_y := y + r ;
108841: LD_ADDR_VAR 0 10
108845: PUSH
108846: LD_VAR 0 2
108850: PUSH
108851: LD_VAR 0 3
108855: PLUS
108856: ST_TO_ADDR
// for _x = min_x to max_x do
108857: LD_ADDR_VAR 0 5
108861: PUSH
108862: DOUBLE
108863: LD_VAR 0 8
108867: DEC
108868: ST_TO_ADDR
108869: LD_VAR 0 9
108873: PUSH
108874: FOR_TO
108875: IFFALSE 108976
// for _y = min_y to max_y do
108877: LD_ADDR_VAR 0 6
108881: PUSH
108882: DOUBLE
108883: LD_VAR 0 7
108887: DEC
108888: ST_TO_ADDR
108889: LD_VAR 0 10
108893: PUSH
108894: FOR_TO
108895: IFFALSE 108972
// begin if not ValidHex ( _x , _y ) then
108897: LD_VAR 0 5
108901: PPUSH
108902: LD_VAR 0 6
108906: PPUSH
108907: CALL_OW 488
108911: NOT
108912: IFFALSE 108916
// continue ;
108914: GO 108894
// if GetResourceTypeXY ( _x , _y ) then
108916: LD_VAR 0 5
108920: PPUSH
108921: LD_VAR 0 6
108925: PPUSH
108926: CALL_OW 283
108930: IFFALSE 108970
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
108932: LD_ADDR_VAR 0 4
108936: PUSH
108937: LD_VAR 0 4
108941: PPUSH
108942: LD_VAR 0 4
108946: PUSH
108947: LD_INT 1
108949: PLUS
108950: PPUSH
108951: LD_VAR 0 5
108955: PUSH
108956: LD_VAR 0 6
108960: PUSH
108961: EMPTY
108962: LIST
108963: LIST
108964: PPUSH
108965: CALL_OW 1
108969: ST_TO_ADDR
// end ;
108970: GO 108894
108972: POP
108973: POP
108974: GO 108874
108976: POP
108977: POP
// end ;
108978: LD_VAR 0 4
108982: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
108983: LD_INT 0
108985: PPUSH
108986: PPUSH
108987: PPUSH
108988: PPUSH
108989: PPUSH
108990: PPUSH
108991: PPUSH
108992: PPUSH
// if not units then
108993: LD_VAR 0 1
108997: NOT
108998: IFFALSE 109002
// exit ;
109000: GO 109526
// result := UnitFilter ( units , [ f_ok ] ) ;
109002: LD_ADDR_VAR 0 3
109006: PUSH
109007: LD_VAR 0 1
109011: PPUSH
109012: LD_INT 50
109014: PUSH
109015: EMPTY
109016: LIST
109017: PPUSH
109018: CALL_OW 72
109022: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
109023: LD_ADDR_VAR 0 8
109027: PUSH
109028: LD_VAR 0 1
109032: PUSH
109033: LD_INT 1
109035: ARRAY
109036: PPUSH
109037: CALL_OW 255
109041: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
109042: LD_ADDR_VAR 0 10
109046: PUSH
109047: LD_INT 29
109049: PUSH
109050: LD_INT 91
109052: PUSH
109053: LD_INT 49
109055: PUSH
109056: EMPTY
109057: LIST
109058: LIST
109059: LIST
109060: ST_TO_ADDR
// if not result then
109061: LD_VAR 0 3
109065: NOT
109066: IFFALSE 109070
// exit ;
109068: GO 109526
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
109070: LD_ADDR_VAR 0 5
109074: PUSH
109075: LD_INT 81
109077: PUSH
109078: LD_VAR 0 8
109082: PUSH
109083: EMPTY
109084: LIST
109085: LIST
109086: PPUSH
109087: CALL_OW 69
109091: ST_TO_ADDR
// for i in result do
109092: LD_ADDR_VAR 0 4
109096: PUSH
109097: LD_VAR 0 3
109101: PUSH
109102: FOR_IN
109103: IFFALSE 109524
// begin tag := GetTag ( i ) + 1 ;
109105: LD_ADDR_VAR 0 9
109109: PUSH
109110: LD_VAR 0 4
109114: PPUSH
109115: CALL_OW 110
109119: PUSH
109120: LD_INT 1
109122: PLUS
109123: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
109124: LD_ADDR_VAR 0 7
109128: PUSH
109129: LD_VAR 0 4
109133: PPUSH
109134: CALL_OW 250
109138: PPUSH
109139: LD_VAR 0 4
109143: PPUSH
109144: CALL_OW 251
109148: PPUSH
109149: LD_INT 6
109151: PPUSH
109152: CALL 108725 0 3
109156: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
109157: LD_VAR 0 4
109161: PPUSH
109162: CALL_OW 247
109166: PUSH
109167: LD_INT 2
109169: EQUAL
109170: PUSH
109171: LD_VAR 0 7
109175: AND
109176: PUSH
109177: LD_VAR 0 4
109181: PPUSH
109182: CALL_OW 264
109186: PUSH
109187: LD_VAR 0 10
109191: IN
109192: NOT
109193: AND
109194: IFFALSE 109233
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
109196: LD_VAR 0 4
109200: PPUSH
109201: LD_VAR 0 7
109205: PUSH
109206: LD_INT 1
109208: ARRAY
109209: PUSH
109210: LD_INT 1
109212: ARRAY
109213: PPUSH
109214: LD_VAR 0 7
109218: PUSH
109219: LD_INT 1
109221: ARRAY
109222: PUSH
109223: LD_INT 2
109225: ARRAY
109226: PPUSH
109227: CALL_OW 116
109231: GO 109522
// if path > tag then
109233: LD_VAR 0 2
109237: PUSH
109238: LD_VAR 0 9
109242: GREATER
109243: IFFALSE 109451
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
109245: LD_ADDR_VAR 0 6
109249: PUSH
109250: LD_VAR 0 5
109254: PPUSH
109255: LD_INT 91
109257: PUSH
109258: LD_VAR 0 4
109262: PUSH
109263: LD_INT 8
109265: PUSH
109266: EMPTY
109267: LIST
109268: LIST
109269: LIST
109270: PPUSH
109271: CALL_OW 72
109275: ST_TO_ADDR
// if nearEnemy then
109276: LD_VAR 0 6
109280: IFFALSE 109349
// begin if GetWeapon ( i ) = ru_time_lapser then
109282: LD_VAR 0 4
109286: PPUSH
109287: CALL_OW 264
109291: PUSH
109292: LD_INT 49
109294: EQUAL
109295: IFFALSE 109323
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
109297: LD_VAR 0 4
109301: PPUSH
109302: LD_VAR 0 6
109306: PPUSH
109307: LD_VAR 0 4
109311: PPUSH
109312: CALL_OW 74
109316: PPUSH
109317: CALL_OW 112
109321: GO 109347
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
109323: LD_VAR 0 4
109327: PPUSH
109328: LD_VAR 0 6
109332: PPUSH
109333: LD_VAR 0 4
109337: PPUSH
109338: CALL_OW 74
109342: PPUSH
109343: CALL 110451 0 2
// end else
109347: GO 109449
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
109349: LD_VAR 0 4
109353: PPUSH
109354: LD_VAR 0 2
109358: PUSH
109359: LD_VAR 0 9
109363: ARRAY
109364: PUSH
109365: LD_INT 1
109367: ARRAY
109368: PPUSH
109369: LD_VAR 0 2
109373: PUSH
109374: LD_VAR 0 9
109378: ARRAY
109379: PUSH
109380: LD_INT 2
109382: ARRAY
109383: PPUSH
109384: CALL_OW 297
109388: PUSH
109389: LD_INT 6
109391: GREATER
109392: IFFALSE 109435
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
109394: LD_VAR 0 4
109398: PPUSH
109399: LD_VAR 0 2
109403: PUSH
109404: LD_VAR 0 9
109408: ARRAY
109409: PUSH
109410: LD_INT 1
109412: ARRAY
109413: PPUSH
109414: LD_VAR 0 2
109418: PUSH
109419: LD_VAR 0 9
109423: ARRAY
109424: PUSH
109425: LD_INT 2
109427: ARRAY
109428: PPUSH
109429: CALL_OW 114
109433: GO 109449
// SetTag ( i , tag ) ;
109435: LD_VAR 0 4
109439: PPUSH
109440: LD_VAR 0 9
109444: PPUSH
109445: CALL_OW 109
// end else
109449: GO 109522
// if enemy then
109451: LD_VAR 0 5
109455: IFFALSE 109522
// begin if GetWeapon ( i ) = ru_time_lapser then
109457: LD_VAR 0 4
109461: PPUSH
109462: CALL_OW 264
109466: PUSH
109467: LD_INT 49
109469: EQUAL
109470: IFFALSE 109498
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
109472: LD_VAR 0 4
109476: PPUSH
109477: LD_VAR 0 5
109481: PPUSH
109482: LD_VAR 0 4
109486: PPUSH
109487: CALL_OW 74
109491: PPUSH
109492: CALL_OW 112
109496: GO 109522
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
109498: LD_VAR 0 4
109502: PPUSH
109503: LD_VAR 0 5
109507: PPUSH
109508: LD_VAR 0 4
109512: PPUSH
109513: CALL_OW 74
109517: PPUSH
109518: CALL 110451 0 2
// end ; end ;
109522: GO 109102
109524: POP
109525: POP
// end ;
109526: LD_VAR 0 3
109530: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
109531: LD_INT 0
109533: PPUSH
109534: PPUSH
109535: PPUSH
// if not unit or IsInUnit ( unit ) then
109536: LD_VAR 0 1
109540: NOT
109541: PUSH
109542: LD_VAR 0 1
109546: PPUSH
109547: CALL_OW 310
109551: OR
109552: IFFALSE 109556
// exit ;
109554: GO 109647
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
109556: LD_ADDR_VAR 0 4
109560: PUSH
109561: LD_VAR 0 1
109565: PPUSH
109566: CALL_OW 250
109570: PPUSH
109571: LD_VAR 0 2
109575: PPUSH
109576: LD_INT 1
109578: PPUSH
109579: CALL_OW 272
109583: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
109584: LD_ADDR_VAR 0 5
109588: PUSH
109589: LD_VAR 0 1
109593: PPUSH
109594: CALL_OW 251
109598: PPUSH
109599: LD_VAR 0 2
109603: PPUSH
109604: LD_INT 1
109606: PPUSH
109607: CALL_OW 273
109611: ST_TO_ADDR
// if ValidHex ( x , y ) then
109612: LD_VAR 0 4
109616: PPUSH
109617: LD_VAR 0 5
109621: PPUSH
109622: CALL_OW 488
109626: IFFALSE 109647
// ComTurnXY ( unit , x , y ) ;
109628: LD_VAR 0 1
109632: PPUSH
109633: LD_VAR 0 4
109637: PPUSH
109638: LD_VAR 0 5
109642: PPUSH
109643: CALL_OW 118
// end ;
109647: LD_VAR 0 3
109651: RET
// export function SeeUnits ( side , units ) ; var i ; begin
109652: LD_INT 0
109654: PPUSH
109655: PPUSH
// result := false ;
109656: LD_ADDR_VAR 0 3
109660: PUSH
109661: LD_INT 0
109663: ST_TO_ADDR
// if not units then
109664: LD_VAR 0 2
109668: NOT
109669: IFFALSE 109673
// exit ;
109671: GO 109718
// for i in units do
109673: LD_ADDR_VAR 0 4
109677: PUSH
109678: LD_VAR 0 2
109682: PUSH
109683: FOR_IN
109684: IFFALSE 109716
// if See ( side , i ) then
109686: LD_VAR 0 1
109690: PPUSH
109691: LD_VAR 0 4
109695: PPUSH
109696: CALL_OW 292
109700: IFFALSE 109714
// begin result := true ;
109702: LD_ADDR_VAR 0 3
109706: PUSH
109707: LD_INT 1
109709: ST_TO_ADDR
// exit ;
109710: POP
109711: POP
109712: GO 109718
// end ;
109714: GO 109683
109716: POP
109717: POP
// end ;
109718: LD_VAR 0 3
109722: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
109723: LD_INT 0
109725: PPUSH
109726: PPUSH
109727: PPUSH
109728: PPUSH
// if not unit or not points then
109729: LD_VAR 0 1
109733: NOT
109734: PUSH
109735: LD_VAR 0 2
109739: NOT
109740: OR
109741: IFFALSE 109745
// exit ;
109743: GO 109835
// dist := 99999 ;
109745: LD_ADDR_VAR 0 5
109749: PUSH
109750: LD_INT 99999
109752: ST_TO_ADDR
// for i in points do
109753: LD_ADDR_VAR 0 4
109757: PUSH
109758: LD_VAR 0 2
109762: PUSH
109763: FOR_IN
109764: IFFALSE 109833
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
109766: LD_ADDR_VAR 0 6
109770: PUSH
109771: LD_VAR 0 1
109775: PPUSH
109776: LD_VAR 0 4
109780: PUSH
109781: LD_INT 1
109783: ARRAY
109784: PPUSH
109785: LD_VAR 0 4
109789: PUSH
109790: LD_INT 2
109792: ARRAY
109793: PPUSH
109794: CALL_OW 297
109798: ST_TO_ADDR
// if tmpDist < dist then
109799: LD_VAR 0 6
109803: PUSH
109804: LD_VAR 0 5
109808: LESS
109809: IFFALSE 109831
// begin result := i ;
109811: LD_ADDR_VAR 0 3
109815: PUSH
109816: LD_VAR 0 4
109820: ST_TO_ADDR
// dist := tmpDist ;
109821: LD_ADDR_VAR 0 5
109825: PUSH
109826: LD_VAR 0 6
109830: ST_TO_ADDR
// end ; end ;
109831: GO 109763
109833: POP
109834: POP
// end ;
109835: LD_VAR 0 3
109839: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
109840: LD_INT 0
109842: PPUSH
// uc_side := side ;
109843: LD_ADDR_OWVAR 20
109847: PUSH
109848: LD_VAR 0 1
109852: ST_TO_ADDR
// uc_nation := 3 ;
109853: LD_ADDR_OWVAR 21
109857: PUSH
109858: LD_INT 3
109860: ST_TO_ADDR
// vc_chassis := 25 ;
109861: LD_ADDR_OWVAR 37
109865: PUSH
109866: LD_INT 25
109868: ST_TO_ADDR
// vc_engine := engine_siberite ;
109869: LD_ADDR_OWVAR 39
109873: PUSH
109874: LD_INT 3
109876: ST_TO_ADDR
// vc_control := control_computer ;
109877: LD_ADDR_OWVAR 38
109881: PUSH
109882: LD_INT 3
109884: ST_TO_ADDR
// vc_weapon := 59 ;
109885: LD_ADDR_OWVAR 40
109889: PUSH
109890: LD_INT 59
109892: ST_TO_ADDR
// result := CreateVehicle ;
109893: LD_ADDR_VAR 0 5
109897: PUSH
109898: CALL_OW 45
109902: ST_TO_ADDR
// SetDir ( result , d ) ;
109903: LD_VAR 0 5
109907: PPUSH
109908: LD_VAR 0 4
109912: PPUSH
109913: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
109917: LD_VAR 0 5
109921: PPUSH
109922: LD_VAR 0 2
109926: PPUSH
109927: LD_VAR 0 3
109931: PPUSH
109932: LD_INT 0
109934: PPUSH
109935: CALL_OW 48
// end ;
109939: LD_VAR 0 5
109943: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
109944: LD_INT 0
109946: PPUSH
109947: PPUSH
109948: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
109949: LD_ADDR_VAR 0 2
109953: PUSH
109954: LD_INT 0
109956: PUSH
109957: LD_INT 0
109959: PUSH
109960: LD_INT 0
109962: PUSH
109963: LD_INT 0
109965: PUSH
109966: EMPTY
109967: LIST
109968: LIST
109969: LIST
109970: LIST
109971: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
109972: LD_VAR 0 1
109976: NOT
109977: PUSH
109978: LD_VAR 0 1
109982: PPUSH
109983: CALL_OW 264
109987: PUSH
109988: LD_INT 12
109990: PUSH
109991: LD_INT 51
109993: PUSH
109994: LD_INT 32
109996: PUSH
109997: LD_INT 89
109999: PUSH
110000: EMPTY
110001: LIST
110002: LIST
110003: LIST
110004: LIST
110005: IN
110006: NOT
110007: OR
110008: IFFALSE 110012
// exit ;
110010: GO 110110
// for i := 1 to 3 do
110012: LD_ADDR_VAR 0 3
110016: PUSH
110017: DOUBLE
110018: LD_INT 1
110020: DEC
110021: ST_TO_ADDR
110022: LD_INT 3
110024: PUSH
110025: FOR_TO
110026: IFFALSE 110108
// begin tmp := GetCargo ( cargo , i ) ;
110028: LD_ADDR_VAR 0 4
110032: PUSH
110033: LD_VAR 0 1
110037: PPUSH
110038: LD_VAR 0 3
110042: PPUSH
110043: CALL_OW 289
110047: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
110048: LD_ADDR_VAR 0 2
110052: PUSH
110053: LD_VAR 0 2
110057: PPUSH
110058: LD_VAR 0 3
110062: PPUSH
110063: LD_VAR 0 4
110067: PPUSH
110068: CALL_OW 1
110072: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
110073: LD_ADDR_VAR 0 2
110077: PUSH
110078: LD_VAR 0 2
110082: PPUSH
110083: LD_INT 4
110085: PPUSH
110086: LD_VAR 0 2
110090: PUSH
110091: LD_INT 4
110093: ARRAY
110094: PUSH
110095: LD_VAR 0 4
110099: PLUS
110100: PPUSH
110101: CALL_OW 1
110105: ST_TO_ADDR
// end ;
110106: GO 110025
110108: POP
110109: POP
// end ;
110110: LD_VAR 0 2
110114: RET
// export function Length ( array ) ; begin
110115: LD_INT 0
110117: PPUSH
// result := array + 0 ;
110118: LD_ADDR_VAR 0 2
110122: PUSH
110123: LD_VAR 0 1
110127: PUSH
110128: LD_INT 0
110130: PLUS
110131: ST_TO_ADDR
// end ;
110132: LD_VAR 0 2
110136: RET
// export function PrepareArray ( array ) ; begin
110137: LD_INT 0
110139: PPUSH
// result := array diff 0 ;
110140: LD_ADDR_VAR 0 2
110144: PUSH
110145: LD_VAR 0 1
110149: PUSH
110150: LD_INT 0
110152: DIFF
110153: ST_TO_ADDR
// if not result [ 1 ] then
110154: LD_VAR 0 2
110158: PUSH
110159: LD_INT 1
110161: ARRAY
110162: NOT
110163: IFFALSE 110183
// result := Delete ( result , 1 ) ;
110165: LD_ADDR_VAR 0 2
110169: PUSH
110170: LD_VAR 0 2
110174: PPUSH
110175: LD_INT 1
110177: PPUSH
110178: CALL_OW 3
110182: ST_TO_ADDR
// end ;
110183: LD_VAR 0 2
110187: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
110188: LD_INT 0
110190: PPUSH
110191: PPUSH
110192: PPUSH
110193: PPUSH
// sibRocketRange := 25 ;
110194: LD_ADDR_VAR 0 6
110198: PUSH
110199: LD_INT 25
110201: ST_TO_ADDR
// result := false ;
110202: LD_ADDR_VAR 0 4
110206: PUSH
110207: LD_INT 0
110209: ST_TO_ADDR
// for i := 0 to 5 do
110210: LD_ADDR_VAR 0 5
110214: PUSH
110215: DOUBLE
110216: LD_INT 0
110218: DEC
110219: ST_TO_ADDR
110220: LD_INT 5
110222: PUSH
110223: FOR_TO
110224: IFFALSE 110291
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
110226: LD_VAR 0 1
110230: PPUSH
110231: LD_VAR 0 5
110235: PPUSH
110236: LD_VAR 0 6
110240: PPUSH
110241: CALL_OW 272
110245: PPUSH
110246: LD_VAR 0 2
110250: PPUSH
110251: LD_VAR 0 5
110255: PPUSH
110256: LD_VAR 0 6
110260: PPUSH
110261: CALL_OW 273
110265: PPUSH
110266: LD_VAR 0 3
110270: PPUSH
110271: CALL_OW 309
110275: IFFALSE 110289
// begin result := true ;
110277: LD_ADDR_VAR 0 4
110281: PUSH
110282: LD_INT 1
110284: ST_TO_ADDR
// exit ;
110285: POP
110286: POP
110287: GO 110293
// end ;
110289: GO 110223
110291: POP
110292: POP
// end ;
110293: LD_VAR 0 4
110297: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
110298: LD_INT 0
110300: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
110301: LD_VAR 0 1
110305: PPUSH
110306: LD_VAR 0 2
110310: PPUSH
110311: LD_INT 0
110313: PPUSH
110314: LD_INT 0
110316: PPUSH
110317: LD_INT 1
110319: PPUSH
110320: LD_INT 0
110322: PPUSH
110323: CALL_OW 587
// end ;
110327: LD_VAR 0 3
110331: RET
// export function CenterOnNow ( unit ) ; begin
110332: LD_INT 0
110334: PPUSH
// result := IsInUnit ( unit ) ;
110335: LD_ADDR_VAR 0 2
110339: PUSH
110340: LD_VAR 0 1
110344: PPUSH
110345: CALL_OW 310
110349: ST_TO_ADDR
// if not result then
110350: LD_VAR 0 2
110354: NOT
110355: IFFALSE 110367
// result := unit ;
110357: LD_ADDR_VAR 0 2
110361: PUSH
110362: LD_VAR 0 1
110366: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
110367: LD_VAR 0 1
110371: PPUSH
110372: CALL_OW 87
// end ;
110376: LD_VAR 0 2
110380: RET
// export function ComMoveHex ( unit , hex ) ; begin
110381: LD_INT 0
110383: PPUSH
// if not hex then
110384: LD_VAR 0 2
110388: NOT
110389: IFFALSE 110393
// exit ;
110391: GO 110446
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
110393: LD_VAR 0 2
110397: PUSH
110398: LD_INT 1
110400: ARRAY
110401: PPUSH
110402: LD_VAR 0 2
110406: PUSH
110407: LD_INT 2
110409: ARRAY
110410: PPUSH
110411: CALL_OW 428
110415: IFFALSE 110419
// exit ;
110417: GO 110446
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
110419: LD_VAR 0 1
110423: PPUSH
110424: LD_VAR 0 2
110428: PUSH
110429: LD_INT 1
110431: ARRAY
110432: PPUSH
110433: LD_VAR 0 2
110437: PUSH
110438: LD_INT 2
110440: ARRAY
110441: PPUSH
110442: CALL_OW 111
// end ;
110446: LD_VAR 0 3
110450: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
110451: LD_INT 0
110453: PPUSH
110454: PPUSH
110455: PPUSH
// if not unit or not enemy then
110456: LD_VAR 0 1
110460: NOT
110461: PUSH
110462: LD_VAR 0 2
110466: NOT
110467: OR
110468: IFFALSE 110472
// exit ;
110470: GO 110596
// x := GetX ( enemy ) ;
110472: LD_ADDR_VAR 0 4
110476: PUSH
110477: LD_VAR 0 2
110481: PPUSH
110482: CALL_OW 250
110486: ST_TO_ADDR
// y := GetY ( enemy ) ;
110487: LD_ADDR_VAR 0 5
110491: PUSH
110492: LD_VAR 0 2
110496: PPUSH
110497: CALL_OW 251
110501: ST_TO_ADDR
// if ValidHex ( x , y ) then
110502: LD_VAR 0 4
110506: PPUSH
110507: LD_VAR 0 5
110511: PPUSH
110512: CALL_OW 488
110516: IFFALSE 110596
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
110518: LD_VAR 0 2
110522: PPUSH
110523: CALL_OW 247
110527: PUSH
110528: LD_INT 3
110530: PUSH
110531: LD_INT 2
110533: PUSH
110534: EMPTY
110535: LIST
110536: LIST
110537: IN
110538: PUSH
110539: LD_VAR 0 1
110543: PPUSH
110544: CALL_OW 255
110548: PPUSH
110549: LD_VAR 0 2
110553: PPUSH
110554: CALL_OW 292
110558: AND
110559: IFFALSE 110577
// ComAttackUnit ( unit , enemy ) else
110561: LD_VAR 0 1
110565: PPUSH
110566: LD_VAR 0 2
110570: PPUSH
110571: CALL_OW 115
110575: GO 110596
// ComAgressiveMove ( unit , x , y ) ;
110577: LD_VAR 0 1
110581: PPUSH
110582: LD_VAR 0 4
110586: PPUSH
110587: LD_VAR 0 5
110591: PPUSH
110592: CALL_OW 114
// end ; end_of_file end_of_file
110596: LD_VAR 0 3
110600: RET
// export globalGameSaveCounter ; every 0 0$1 do
110601: GO 110603
110603: DISABLE
// begin enable ;
110604: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
110605: LD_STRING updateTimer(
110607: PUSH
110608: LD_OWVAR 1
110612: STR
110613: PUSH
110614: LD_STRING );
110616: STR
110617: PPUSH
110618: CALL_OW 559
// end ;
110622: END
// every 0 0$1 do
110623: GO 110625
110625: DISABLE
// begin globalGameSaveCounter := 0 ;
110626: LD_ADDR_EXP 146
110630: PUSH
110631: LD_INT 0
110633: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
110634: LD_STRING setGameSaveCounter(0)
110636: PPUSH
110637: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
110641: LD_STRING initStreamRollete();
110643: PPUSH
110644: CALL_OW 559
// InitStreamMode ;
110648: CALL 111974 0 0
// DefineStreamItems ( false ) ;
110652: LD_INT 0
110654: PPUSH
110655: CALL 112438 0 1
// end ;
110659: END
// export function SOS_MapStart ( ) ; begin
110660: LD_INT 0
110662: PPUSH
// if streamModeActive then
110663: LD_EXP 147
110667: IFFALSE 110676
// DefineStreamItems ( true ) ;
110669: LD_INT 1
110671: PPUSH
110672: CALL 112438 0 1
// UpdateLuaVariables ( ) ;
110676: CALL 110693 0 0
// UpdateFactoryWaypoints ( ) ;
110680: CALL 125307 0 0
// UpdateWarehouseGatheringPoints ( ) ;
110684: CALL 125564 0 0
// end ;
110688: LD_VAR 0 1
110692: RET
// function UpdateLuaVariables ( ) ; begin
110693: LD_INT 0
110695: PPUSH
// if globalGameSaveCounter then
110696: LD_EXP 146
110700: IFFALSE 110734
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
110702: LD_ADDR_EXP 146
110706: PUSH
110707: LD_EXP 146
110711: PPUSH
110712: CALL 107740 0 1
110716: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
110717: LD_STRING setGameSaveCounter(
110719: PUSH
110720: LD_EXP 146
110724: STR
110725: PUSH
110726: LD_STRING )
110728: STR
110729: PPUSH
110730: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
110734: LD_STRING setGameDifficulty(
110736: PUSH
110737: LD_OWVAR 67
110741: STR
110742: PUSH
110743: LD_STRING )
110745: STR
110746: PPUSH
110747: CALL_OW 559
// end ;
110751: LD_VAR 0 1
110755: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
110756: LD_INT 0
110758: PPUSH
// if p2 = stream_mode then
110759: LD_VAR 0 2
110763: PUSH
110764: LD_INT 100
110766: EQUAL
110767: IFFALSE 111770
// begin if not StreamModeActive then
110769: LD_EXP 147
110773: NOT
110774: IFFALSE 110784
// StreamModeActive := true ;
110776: LD_ADDR_EXP 147
110780: PUSH
110781: LD_INT 1
110783: ST_TO_ADDR
// if p3 = 0 then
110784: LD_VAR 0 3
110788: PUSH
110789: LD_INT 0
110791: EQUAL
110792: IFFALSE 110798
// InitStreamMode ;
110794: CALL 111974 0 0
// if p3 = 1 then
110798: LD_VAR 0 3
110802: PUSH
110803: LD_INT 1
110805: EQUAL
110806: IFFALSE 110816
// sRocket := true ;
110808: LD_ADDR_EXP 152
110812: PUSH
110813: LD_INT 1
110815: ST_TO_ADDR
// if p3 = 2 then
110816: LD_VAR 0 3
110820: PUSH
110821: LD_INT 2
110823: EQUAL
110824: IFFALSE 110834
// sSpeed := true ;
110826: LD_ADDR_EXP 151
110830: PUSH
110831: LD_INT 1
110833: ST_TO_ADDR
// if p3 = 3 then
110834: LD_VAR 0 3
110838: PUSH
110839: LD_INT 3
110841: EQUAL
110842: IFFALSE 110852
// sEngine := true ;
110844: LD_ADDR_EXP 153
110848: PUSH
110849: LD_INT 1
110851: ST_TO_ADDR
// if p3 = 4 then
110852: LD_VAR 0 3
110856: PUSH
110857: LD_INT 4
110859: EQUAL
110860: IFFALSE 110870
// sSpec := true ;
110862: LD_ADDR_EXP 150
110866: PUSH
110867: LD_INT 1
110869: ST_TO_ADDR
// if p3 = 5 then
110870: LD_VAR 0 3
110874: PUSH
110875: LD_INT 5
110877: EQUAL
110878: IFFALSE 110888
// sLevel := true ;
110880: LD_ADDR_EXP 154
110884: PUSH
110885: LD_INT 1
110887: ST_TO_ADDR
// if p3 = 6 then
110888: LD_VAR 0 3
110892: PUSH
110893: LD_INT 6
110895: EQUAL
110896: IFFALSE 110906
// sArmoury := true ;
110898: LD_ADDR_EXP 155
110902: PUSH
110903: LD_INT 1
110905: ST_TO_ADDR
// if p3 = 7 then
110906: LD_VAR 0 3
110910: PUSH
110911: LD_INT 7
110913: EQUAL
110914: IFFALSE 110924
// sRadar := true ;
110916: LD_ADDR_EXP 156
110920: PUSH
110921: LD_INT 1
110923: ST_TO_ADDR
// if p3 = 8 then
110924: LD_VAR 0 3
110928: PUSH
110929: LD_INT 8
110931: EQUAL
110932: IFFALSE 110942
// sBunker := true ;
110934: LD_ADDR_EXP 157
110938: PUSH
110939: LD_INT 1
110941: ST_TO_ADDR
// if p3 = 9 then
110942: LD_VAR 0 3
110946: PUSH
110947: LD_INT 9
110949: EQUAL
110950: IFFALSE 110960
// sHack := true ;
110952: LD_ADDR_EXP 158
110956: PUSH
110957: LD_INT 1
110959: ST_TO_ADDR
// if p3 = 10 then
110960: LD_VAR 0 3
110964: PUSH
110965: LD_INT 10
110967: EQUAL
110968: IFFALSE 110978
// sFire := true ;
110970: LD_ADDR_EXP 159
110974: PUSH
110975: LD_INT 1
110977: ST_TO_ADDR
// if p3 = 11 then
110978: LD_VAR 0 3
110982: PUSH
110983: LD_INT 11
110985: EQUAL
110986: IFFALSE 110996
// sRefresh := true ;
110988: LD_ADDR_EXP 160
110992: PUSH
110993: LD_INT 1
110995: ST_TO_ADDR
// if p3 = 12 then
110996: LD_VAR 0 3
111000: PUSH
111001: LD_INT 12
111003: EQUAL
111004: IFFALSE 111014
// sExp := true ;
111006: LD_ADDR_EXP 161
111010: PUSH
111011: LD_INT 1
111013: ST_TO_ADDR
// if p3 = 13 then
111014: LD_VAR 0 3
111018: PUSH
111019: LD_INT 13
111021: EQUAL
111022: IFFALSE 111032
// sDepot := true ;
111024: LD_ADDR_EXP 162
111028: PUSH
111029: LD_INT 1
111031: ST_TO_ADDR
// if p3 = 14 then
111032: LD_VAR 0 3
111036: PUSH
111037: LD_INT 14
111039: EQUAL
111040: IFFALSE 111050
// sFlag := true ;
111042: LD_ADDR_EXP 163
111046: PUSH
111047: LD_INT 1
111049: ST_TO_ADDR
// if p3 = 15 then
111050: LD_VAR 0 3
111054: PUSH
111055: LD_INT 15
111057: EQUAL
111058: IFFALSE 111068
// sKamikadze := true ;
111060: LD_ADDR_EXP 171
111064: PUSH
111065: LD_INT 1
111067: ST_TO_ADDR
// if p3 = 16 then
111068: LD_VAR 0 3
111072: PUSH
111073: LD_INT 16
111075: EQUAL
111076: IFFALSE 111086
// sTroll := true ;
111078: LD_ADDR_EXP 172
111082: PUSH
111083: LD_INT 1
111085: ST_TO_ADDR
// if p3 = 17 then
111086: LD_VAR 0 3
111090: PUSH
111091: LD_INT 17
111093: EQUAL
111094: IFFALSE 111104
// sSlow := true ;
111096: LD_ADDR_EXP 173
111100: PUSH
111101: LD_INT 1
111103: ST_TO_ADDR
// if p3 = 18 then
111104: LD_VAR 0 3
111108: PUSH
111109: LD_INT 18
111111: EQUAL
111112: IFFALSE 111122
// sLack := true ;
111114: LD_ADDR_EXP 174
111118: PUSH
111119: LD_INT 1
111121: ST_TO_ADDR
// if p3 = 19 then
111122: LD_VAR 0 3
111126: PUSH
111127: LD_INT 19
111129: EQUAL
111130: IFFALSE 111140
// sTank := true ;
111132: LD_ADDR_EXP 176
111136: PUSH
111137: LD_INT 1
111139: ST_TO_ADDR
// if p3 = 20 then
111140: LD_VAR 0 3
111144: PUSH
111145: LD_INT 20
111147: EQUAL
111148: IFFALSE 111158
// sRemote := true ;
111150: LD_ADDR_EXP 177
111154: PUSH
111155: LD_INT 1
111157: ST_TO_ADDR
// if p3 = 21 then
111158: LD_VAR 0 3
111162: PUSH
111163: LD_INT 21
111165: EQUAL
111166: IFFALSE 111176
// sPowell := true ;
111168: LD_ADDR_EXP 178
111172: PUSH
111173: LD_INT 1
111175: ST_TO_ADDR
// if p3 = 22 then
111176: LD_VAR 0 3
111180: PUSH
111181: LD_INT 22
111183: EQUAL
111184: IFFALSE 111194
// sTeleport := true ;
111186: LD_ADDR_EXP 181
111190: PUSH
111191: LD_INT 1
111193: ST_TO_ADDR
// if p3 = 23 then
111194: LD_VAR 0 3
111198: PUSH
111199: LD_INT 23
111201: EQUAL
111202: IFFALSE 111212
// sOilTower := true ;
111204: LD_ADDR_EXP 183
111208: PUSH
111209: LD_INT 1
111211: ST_TO_ADDR
// if p3 = 24 then
111212: LD_VAR 0 3
111216: PUSH
111217: LD_INT 24
111219: EQUAL
111220: IFFALSE 111230
// sShovel := true ;
111222: LD_ADDR_EXP 184
111226: PUSH
111227: LD_INT 1
111229: ST_TO_ADDR
// if p3 = 25 then
111230: LD_VAR 0 3
111234: PUSH
111235: LD_INT 25
111237: EQUAL
111238: IFFALSE 111248
// sSheik := true ;
111240: LD_ADDR_EXP 185
111244: PUSH
111245: LD_INT 1
111247: ST_TO_ADDR
// if p3 = 26 then
111248: LD_VAR 0 3
111252: PUSH
111253: LD_INT 26
111255: EQUAL
111256: IFFALSE 111266
// sEarthquake := true ;
111258: LD_ADDR_EXP 187
111262: PUSH
111263: LD_INT 1
111265: ST_TO_ADDR
// if p3 = 27 then
111266: LD_VAR 0 3
111270: PUSH
111271: LD_INT 27
111273: EQUAL
111274: IFFALSE 111284
// sAI := true ;
111276: LD_ADDR_EXP 188
111280: PUSH
111281: LD_INT 1
111283: ST_TO_ADDR
// if p3 = 28 then
111284: LD_VAR 0 3
111288: PUSH
111289: LD_INT 28
111291: EQUAL
111292: IFFALSE 111302
// sCargo := true ;
111294: LD_ADDR_EXP 191
111298: PUSH
111299: LD_INT 1
111301: ST_TO_ADDR
// if p3 = 29 then
111302: LD_VAR 0 3
111306: PUSH
111307: LD_INT 29
111309: EQUAL
111310: IFFALSE 111320
// sDLaser := true ;
111312: LD_ADDR_EXP 192
111316: PUSH
111317: LD_INT 1
111319: ST_TO_ADDR
// if p3 = 30 then
111320: LD_VAR 0 3
111324: PUSH
111325: LD_INT 30
111327: EQUAL
111328: IFFALSE 111338
// sExchange := true ;
111330: LD_ADDR_EXP 193
111334: PUSH
111335: LD_INT 1
111337: ST_TO_ADDR
// if p3 = 31 then
111338: LD_VAR 0 3
111342: PUSH
111343: LD_INT 31
111345: EQUAL
111346: IFFALSE 111356
// sFac := true ;
111348: LD_ADDR_EXP 194
111352: PUSH
111353: LD_INT 1
111355: ST_TO_ADDR
// if p3 = 32 then
111356: LD_VAR 0 3
111360: PUSH
111361: LD_INT 32
111363: EQUAL
111364: IFFALSE 111374
// sPower := true ;
111366: LD_ADDR_EXP 195
111370: PUSH
111371: LD_INT 1
111373: ST_TO_ADDR
// if p3 = 33 then
111374: LD_VAR 0 3
111378: PUSH
111379: LD_INT 33
111381: EQUAL
111382: IFFALSE 111392
// sRandom := true ;
111384: LD_ADDR_EXP 196
111388: PUSH
111389: LD_INT 1
111391: ST_TO_ADDR
// if p3 = 34 then
111392: LD_VAR 0 3
111396: PUSH
111397: LD_INT 34
111399: EQUAL
111400: IFFALSE 111410
// sShield := true ;
111402: LD_ADDR_EXP 197
111406: PUSH
111407: LD_INT 1
111409: ST_TO_ADDR
// if p3 = 35 then
111410: LD_VAR 0 3
111414: PUSH
111415: LD_INT 35
111417: EQUAL
111418: IFFALSE 111428
// sTime := true ;
111420: LD_ADDR_EXP 198
111424: PUSH
111425: LD_INT 1
111427: ST_TO_ADDR
// if p3 = 36 then
111428: LD_VAR 0 3
111432: PUSH
111433: LD_INT 36
111435: EQUAL
111436: IFFALSE 111446
// sTools := true ;
111438: LD_ADDR_EXP 199
111442: PUSH
111443: LD_INT 1
111445: ST_TO_ADDR
// if p3 = 101 then
111446: LD_VAR 0 3
111450: PUSH
111451: LD_INT 101
111453: EQUAL
111454: IFFALSE 111464
// sSold := true ;
111456: LD_ADDR_EXP 164
111460: PUSH
111461: LD_INT 1
111463: ST_TO_ADDR
// if p3 = 102 then
111464: LD_VAR 0 3
111468: PUSH
111469: LD_INT 102
111471: EQUAL
111472: IFFALSE 111482
// sDiff := true ;
111474: LD_ADDR_EXP 165
111478: PUSH
111479: LD_INT 1
111481: ST_TO_ADDR
// if p3 = 103 then
111482: LD_VAR 0 3
111486: PUSH
111487: LD_INT 103
111489: EQUAL
111490: IFFALSE 111500
// sFog := true ;
111492: LD_ADDR_EXP 168
111496: PUSH
111497: LD_INT 1
111499: ST_TO_ADDR
// if p3 = 104 then
111500: LD_VAR 0 3
111504: PUSH
111505: LD_INT 104
111507: EQUAL
111508: IFFALSE 111518
// sReset := true ;
111510: LD_ADDR_EXP 169
111514: PUSH
111515: LD_INT 1
111517: ST_TO_ADDR
// if p3 = 105 then
111518: LD_VAR 0 3
111522: PUSH
111523: LD_INT 105
111525: EQUAL
111526: IFFALSE 111536
// sSun := true ;
111528: LD_ADDR_EXP 170
111532: PUSH
111533: LD_INT 1
111535: ST_TO_ADDR
// if p3 = 106 then
111536: LD_VAR 0 3
111540: PUSH
111541: LD_INT 106
111543: EQUAL
111544: IFFALSE 111554
// sTiger := true ;
111546: LD_ADDR_EXP 166
111550: PUSH
111551: LD_INT 1
111553: ST_TO_ADDR
// if p3 = 107 then
111554: LD_VAR 0 3
111558: PUSH
111559: LD_INT 107
111561: EQUAL
111562: IFFALSE 111572
// sBomb := true ;
111564: LD_ADDR_EXP 167
111568: PUSH
111569: LD_INT 1
111571: ST_TO_ADDR
// if p3 = 108 then
111572: LD_VAR 0 3
111576: PUSH
111577: LD_INT 108
111579: EQUAL
111580: IFFALSE 111590
// sWound := true ;
111582: LD_ADDR_EXP 175
111586: PUSH
111587: LD_INT 1
111589: ST_TO_ADDR
// if p3 = 109 then
111590: LD_VAR 0 3
111594: PUSH
111595: LD_INT 109
111597: EQUAL
111598: IFFALSE 111608
// sBetray := true ;
111600: LD_ADDR_EXP 179
111604: PUSH
111605: LD_INT 1
111607: ST_TO_ADDR
// if p3 = 110 then
111608: LD_VAR 0 3
111612: PUSH
111613: LD_INT 110
111615: EQUAL
111616: IFFALSE 111626
// sContamin := true ;
111618: LD_ADDR_EXP 180
111622: PUSH
111623: LD_INT 1
111625: ST_TO_ADDR
// if p3 = 111 then
111626: LD_VAR 0 3
111630: PUSH
111631: LD_INT 111
111633: EQUAL
111634: IFFALSE 111644
// sOil := true ;
111636: LD_ADDR_EXP 182
111640: PUSH
111641: LD_INT 1
111643: ST_TO_ADDR
// if p3 = 112 then
111644: LD_VAR 0 3
111648: PUSH
111649: LD_INT 112
111651: EQUAL
111652: IFFALSE 111662
// sStu := true ;
111654: LD_ADDR_EXP 186
111658: PUSH
111659: LD_INT 1
111661: ST_TO_ADDR
// if p3 = 113 then
111662: LD_VAR 0 3
111666: PUSH
111667: LD_INT 113
111669: EQUAL
111670: IFFALSE 111680
// sBazooka := true ;
111672: LD_ADDR_EXP 189
111676: PUSH
111677: LD_INT 1
111679: ST_TO_ADDR
// if p3 = 114 then
111680: LD_VAR 0 3
111684: PUSH
111685: LD_INT 114
111687: EQUAL
111688: IFFALSE 111698
// sMortar := true ;
111690: LD_ADDR_EXP 190
111694: PUSH
111695: LD_INT 1
111697: ST_TO_ADDR
// if p3 = 115 then
111698: LD_VAR 0 3
111702: PUSH
111703: LD_INT 115
111705: EQUAL
111706: IFFALSE 111716
// sRanger := true ;
111708: LD_ADDR_EXP 200
111712: PUSH
111713: LD_INT 1
111715: ST_TO_ADDR
// if p3 = 116 then
111716: LD_VAR 0 3
111720: PUSH
111721: LD_INT 116
111723: EQUAL
111724: IFFALSE 111734
// sComputer := true ;
111726: LD_ADDR_EXP 201
111730: PUSH
111731: LD_INT 1
111733: ST_TO_ADDR
// if p3 = 117 then
111734: LD_VAR 0 3
111738: PUSH
111739: LD_INT 117
111741: EQUAL
111742: IFFALSE 111752
// s30 := true ;
111744: LD_ADDR_EXP 202
111748: PUSH
111749: LD_INT 1
111751: ST_TO_ADDR
// if p3 = 118 then
111752: LD_VAR 0 3
111756: PUSH
111757: LD_INT 118
111759: EQUAL
111760: IFFALSE 111770
// s60 := true ;
111762: LD_ADDR_EXP 203
111766: PUSH
111767: LD_INT 1
111769: ST_TO_ADDR
// end ; if p2 = hack_mode then
111770: LD_VAR 0 2
111774: PUSH
111775: LD_INT 101
111777: EQUAL
111778: IFFALSE 111906
// begin case p3 of 1 :
111780: LD_VAR 0 3
111784: PUSH
111785: LD_INT 1
111787: DOUBLE
111788: EQUAL
111789: IFTRUE 111793
111791: GO 111800
111793: POP
// hHackUnlimitedResources ; 2 :
111794: CALL 124053 0 0
111798: GO 111906
111800: LD_INT 2
111802: DOUBLE
111803: EQUAL
111804: IFTRUE 111808
111806: GO 111815
111808: POP
// hHackSetLevel10 ; 3 :
111809: CALL 124186 0 0
111813: GO 111906
111815: LD_INT 3
111817: DOUBLE
111818: EQUAL
111819: IFTRUE 111823
111821: GO 111830
111823: POP
// hHackSetLevel10YourUnits ; 4 :
111824: CALL 124271 0 0
111828: GO 111906
111830: LD_INT 4
111832: DOUBLE
111833: EQUAL
111834: IFTRUE 111838
111836: GO 111845
111838: POP
// hHackInvincible ; 5 :
111839: CALL 124719 0 0
111843: GO 111906
111845: LD_INT 5
111847: DOUBLE
111848: EQUAL
111849: IFTRUE 111853
111851: GO 111860
111853: POP
// hHackInvisible ; 6 :
111854: CALL 124830 0 0
111858: GO 111906
111860: LD_INT 6
111862: DOUBLE
111863: EQUAL
111864: IFTRUE 111868
111866: GO 111875
111868: POP
// hHackChangeYourSide ; 7 :
111869: CALL 124887 0 0
111873: GO 111906
111875: LD_INT 7
111877: DOUBLE
111878: EQUAL
111879: IFTRUE 111883
111881: GO 111890
111883: POP
// hHackChangeUnitSide ; 8 :
111884: CALL 124929 0 0
111888: GO 111906
111890: LD_INT 8
111892: DOUBLE
111893: EQUAL
111894: IFTRUE 111898
111896: GO 111905
111898: POP
// hHackFog ; end ;
111899: CALL 125030 0 0
111903: GO 111906
111905: POP
// end ; if p2 = game_save_mode then
111906: LD_VAR 0 2
111910: PUSH
111911: LD_INT 102
111913: EQUAL
111914: IFFALSE 111969
// begin if p3 = 1 then
111916: LD_VAR 0 3
111920: PUSH
111921: LD_INT 1
111923: EQUAL
111924: IFFALSE 111936
// globalGameSaveCounter := p4 ;
111926: LD_ADDR_EXP 146
111930: PUSH
111931: LD_VAR 0 4
111935: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
111936: LD_VAR 0 3
111940: PUSH
111941: LD_INT 2
111943: EQUAL
111944: PUSH
111945: LD_EXP 146
111949: AND
111950: IFFALSE 111969
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
111952: LD_STRING setGameSaveCounter(
111954: PUSH
111955: LD_EXP 146
111959: STR
111960: PUSH
111961: LD_STRING )
111963: STR
111964: PPUSH
111965: CALL_OW 559
// end ; end ;
111969: LD_VAR 0 7
111973: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
111974: LD_INT 0
111976: PPUSH
// streamModeActive := false ;
111977: LD_ADDR_EXP 147
111981: PUSH
111982: LD_INT 0
111984: ST_TO_ADDR
// normalCounter := 36 ;
111985: LD_ADDR_EXP 148
111989: PUSH
111990: LD_INT 36
111992: ST_TO_ADDR
// hardcoreCounter := 18 ;
111993: LD_ADDR_EXP 149
111997: PUSH
111998: LD_INT 18
112000: ST_TO_ADDR
// sRocket := false ;
112001: LD_ADDR_EXP 152
112005: PUSH
112006: LD_INT 0
112008: ST_TO_ADDR
// sSpeed := false ;
112009: LD_ADDR_EXP 151
112013: PUSH
112014: LD_INT 0
112016: ST_TO_ADDR
// sEngine := false ;
112017: LD_ADDR_EXP 153
112021: PUSH
112022: LD_INT 0
112024: ST_TO_ADDR
// sSpec := false ;
112025: LD_ADDR_EXP 150
112029: PUSH
112030: LD_INT 0
112032: ST_TO_ADDR
// sLevel := false ;
112033: LD_ADDR_EXP 154
112037: PUSH
112038: LD_INT 0
112040: ST_TO_ADDR
// sArmoury := false ;
112041: LD_ADDR_EXP 155
112045: PUSH
112046: LD_INT 0
112048: ST_TO_ADDR
// sRadar := false ;
112049: LD_ADDR_EXP 156
112053: PUSH
112054: LD_INT 0
112056: ST_TO_ADDR
// sBunker := false ;
112057: LD_ADDR_EXP 157
112061: PUSH
112062: LD_INT 0
112064: ST_TO_ADDR
// sHack := false ;
112065: LD_ADDR_EXP 158
112069: PUSH
112070: LD_INT 0
112072: ST_TO_ADDR
// sFire := false ;
112073: LD_ADDR_EXP 159
112077: PUSH
112078: LD_INT 0
112080: ST_TO_ADDR
// sRefresh := false ;
112081: LD_ADDR_EXP 160
112085: PUSH
112086: LD_INT 0
112088: ST_TO_ADDR
// sExp := false ;
112089: LD_ADDR_EXP 161
112093: PUSH
112094: LD_INT 0
112096: ST_TO_ADDR
// sDepot := false ;
112097: LD_ADDR_EXP 162
112101: PUSH
112102: LD_INT 0
112104: ST_TO_ADDR
// sFlag := false ;
112105: LD_ADDR_EXP 163
112109: PUSH
112110: LD_INT 0
112112: ST_TO_ADDR
// sKamikadze := false ;
112113: LD_ADDR_EXP 171
112117: PUSH
112118: LD_INT 0
112120: ST_TO_ADDR
// sTroll := false ;
112121: LD_ADDR_EXP 172
112125: PUSH
112126: LD_INT 0
112128: ST_TO_ADDR
// sSlow := false ;
112129: LD_ADDR_EXP 173
112133: PUSH
112134: LD_INT 0
112136: ST_TO_ADDR
// sLack := false ;
112137: LD_ADDR_EXP 174
112141: PUSH
112142: LD_INT 0
112144: ST_TO_ADDR
// sTank := false ;
112145: LD_ADDR_EXP 176
112149: PUSH
112150: LD_INT 0
112152: ST_TO_ADDR
// sRemote := false ;
112153: LD_ADDR_EXP 177
112157: PUSH
112158: LD_INT 0
112160: ST_TO_ADDR
// sPowell := false ;
112161: LD_ADDR_EXP 178
112165: PUSH
112166: LD_INT 0
112168: ST_TO_ADDR
// sTeleport := false ;
112169: LD_ADDR_EXP 181
112173: PUSH
112174: LD_INT 0
112176: ST_TO_ADDR
// sOilTower := false ;
112177: LD_ADDR_EXP 183
112181: PUSH
112182: LD_INT 0
112184: ST_TO_ADDR
// sShovel := false ;
112185: LD_ADDR_EXP 184
112189: PUSH
112190: LD_INT 0
112192: ST_TO_ADDR
// sSheik := false ;
112193: LD_ADDR_EXP 185
112197: PUSH
112198: LD_INT 0
112200: ST_TO_ADDR
// sEarthquake := false ;
112201: LD_ADDR_EXP 187
112205: PUSH
112206: LD_INT 0
112208: ST_TO_ADDR
// sAI := false ;
112209: LD_ADDR_EXP 188
112213: PUSH
112214: LD_INT 0
112216: ST_TO_ADDR
// sCargo := false ;
112217: LD_ADDR_EXP 191
112221: PUSH
112222: LD_INT 0
112224: ST_TO_ADDR
// sDLaser := false ;
112225: LD_ADDR_EXP 192
112229: PUSH
112230: LD_INT 0
112232: ST_TO_ADDR
// sExchange := false ;
112233: LD_ADDR_EXP 193
112237: PUSH
112238: LD_INT 0
112240: ST_TO_ADDR
// sFac := false ;
112241: LD_ADDR_EXP 194
112245: PUSH
112246: LD_INT 0
112248: ST_TO_ADDR
// sPower := false ;
112249: LD_ADDR_EXP 195
112253: PUSH
112254: LD_INT 0
112256: ST_TO_ADDR
// sRandom := false ;
112257: LD_ADDR_EXP 196
112261: PUSH
112262: LD_INT 0
112264: ST_TO_ADDR
// sShield := false ;
112265: LD_ADDR_EXP 197
112269: PUSH
112270: LD_INT 0
112272: ST_TO_ADDR
// sTime := false ;
112273: LD_ADDR_EXP 198
112277: PUSH
112278: LD_INT 0
112280: ST_TO_ADDR
// sTools := false ;
112281: LD_ADDR_EXP 199
112285: PUSH
112286: LD_INT 0
112288: ST_TO_ADDR
// sSold := false ;
112289: LD_ADDR_EXP 164
112293: PUSH
112294: LD_INT 0
112296: ST_TO_ADDR
// sDiff := false ;
112297: LD_ADDR_EXP 165
112301: PUSH
112302: LD_INT 0
112304: ST_TO_ADDR
// sFog := false ;
112305: LD_ADDR_EXP 168
112309: PUSH
112310: LD_INT 0
112312: ST_TO_ADDR
// sReset := false ;
112313: LD_ADDR_EXP 169
112317: PUSH
112318: LD_INT 0
112320: ST_TO_ADDR
// sSun := false ;
112321: LD_ADDR_EXP 170
112325: PUSH
112326: LD_INT 0
112328: ST_TO_ADDR
// sTiger := false ;
112329: LD_ADDR_EXP 166
112333: PUSH
112334: LD_INT 0
112336: ST_TO_ADDR
// sBomb := false ;
112337: LD_ADDR_EXP 167
112341: PUSH
112342: LD_INT 0
112344: ST_TO_ADDR
// sWound := false ;
112345: LD_ADDR_EXP 175
112349: PUSH
112350: LD_INT 0
112352: ST_TO_ADDR
// sBetray := false ;
112353: LD_ADDR_EXP 179
112357: PUSH
112358: LD_INT 0
112360: ST_TO_ADDR
// sContamin := false ;
112361: LD_ADDR_EXP 180
112365: PUSH
112366: LD_INT 0
112368: ST_TO_ADDR
// sOil := false ;
112369: LD_ADDR_EXP 182
112373: PUSH
112374: LD_INT 0
112376: ST_TO_ADDR
// sStu := false ;
112377: LD_ADDR_EXP 186
112381: PUSH
112382: LD_INT 0
112384: ST_TO_ADDR
// sBazooka := false ;
112385: LD_ADDR_EXP 189
112389: PUSH
112390: LD_INT 0
112392: ST_TO_ADDR
// sMortar := false ;
112393: LD_ADDR_EXP 190
112397: PUSH
112398: LD_INT 0
112400: ST_TO_ADDR
// sRanger := false ;
112401: LD_ADDR_EXP 200
112405: PUSH
112406: LD_INT 0
112408: ST_TO_ADDR
// sComputer := false ;
112409: LD_ADDR_EXP 201
112413: PUSH
112414: LD_INT 0
112416: ST_TO_ADDR
// s30 := false ;
112417: LD_ADDR_EXP 202
112421: PUSH
112422: LD_INT 0
112424: ST_TO_ADDR
// s60 := false ;
112425: LD_ADDR_EXP 203
112429: PUSH
112430: LD_INT 0
112432: ST_TO_ADDR
// end ;
112433: LD_VAR 0 1
112437: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
112438: LD_INT 0
112440: PPUSH
112441: PPUSH
112442: PPUSH
112443: PPUSH
112444: PPUSH
112445: PPUSH
112446: PPUSH
// result := [ ] ;
112447: LD_ADDR_VAR 0 2
112451: PUSH
112452: EMPTY
112453: ST_TO_ADDR
// if campaign_id = 1 then
112454: LD_OWVAR 69
112458: PUSH
112459: LD_INT 1
112461: EQUAL
112462: IFFALSE 115628
// begin case mission_number of 1 :
112464: LD_OWVAR 70
112468: PUSH
112469: LD_INT 1
112471: DOUBLE
112472: EQUAL
112473: IFTRUE 112477
112475: GO 112553
112477: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
112478: LD_ADDR_VAR 0 2
112482: PUSH
112483: LD_INT 2
112485: PUSH
112486: LD_INT 4
112488: PUSH
112489: LD_INT 11
112491: PUSH
112492: LD_INT 12
112494: PUSH
112495: LD_INT 15
112497: PUSH
112498: LD_INT 16
112500: PUSH
112501: LD_INT 22
112503: PUSH
112504: LD_INT 23
112506: PUSH
112507: LD_INT 26
112509: PUSH
112510: EMPTY
112511: LIST
112512: LIST
112513: LIST
112514: LIST
112515: LIST
112516: LIST
112517: LIST
112518: LIST
112519: LIST
112520: PUSH
112521: LD_INT 101
112523: PUSH
112524: LD_INT 102
112526: PUSH
112527: LD_INT 106
112529: PUSH
112530: LD_INT 116
112532: PUSH
112533: LD_INT 117
112535: PUSH
112536: LD_INT 118
112538: PUSH
112539: EMPTY
112540: LIST
112541: LIST
112542: LIST
112543: LIST
112544: LIST
112545: LIST
112546: PUSH
112547: EMPTY
112548: LIST
112549: LIST
112550: ST_TO_ADDR
112551: GO 115626
112553: LD_INT 2
112555: DOUBLE
112556: EQUAL
112557: IFTRUE 112561
112559: GO 112645
112561: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
112562: LD_ADDR_VAR 0 2
112566: PUSH
112567: LD_INT 2
112569: PUSH
112570: LD_INT 4
112572: PUSH
112573: LD_INT 11
112575: PUSH
112576: LD_INT 12
112578: PUSH
112579: LD_INT 15
112581: PUSH
112582: LD_INT 16
112584: PUSH
112585: LD_INT 22
112587: PUSH
112588: LD_INT 23
112590: PUSH
112591: LD_INT 26
112593: PUSH
112594: EMPTY
112595: LIST
112596: LIST
112597: LIST
112598: LIST
112599: LIST
112600: LIST
112601: LIST
112602: LIST
112603: LIST
112604: PUSH
112605: LD_INT 101
112607: PUSH
112608: LD_INT 102
112610: PUSH
112611: LD_INT 105
112613: PUSH
112614: LD_INT 106
112616: PUSH
112617: LD_INT 108
112619: PUSH
112620: LD_INT 116
112622: PUSH
112623: LD_INT 117
112625: PUSH
112626: LD_INT 118
112628: PUSH
112629: EMPTY
112630: LIST
112631: LIST
112632: LIST
112633: LIST
112634: LIST
112635: LIST
112636: LIST
112637: LIST
112638: PUSH
112639: EMPTY
112640: LIST
112641: LIST
112642: ST_TO_ADDR
112643: GO 115626
112645: LD_INT 3
112647: DOUBLE
112648: EQUAL
112649: IFTRUE 112653
112651: GO 112741
112653: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
112654: LD_ADDR_VAR 0 2
112658: PUSH
112659: LD_INT 2
112661: PUSH
112662: LD_INT 4
112664: PUSH
112665: LD_INT 5
112667: PUSH
112668: LD_INT 11
112670: PUSH
112671: LD_INT 12
112673: PUSH
112674: LD_INT 15
112676: PUSH
112677: LD_INT 16
112679: PUSH
112680: LD_INT 22
112682: PUSH
112683: LD_INT 26
112685: PUSH
112686: LD_INT 36
112688: PUSH
112689: EMPTY
112690: LIST
112691: LIST
112692: LIST
112693: LIST
112694: LIST
112695: LIST
112696: LIST
112697: LIST
112698: LIST
112699: LIST
112700: PUSH
112701: LD_INT 101
112703: PUSH
112704: LD_INT 102
112706: PUSH
112707: LD_INT 105
112709: PUSH
112710: LD_INT 106
112712: PUSH
112713: LD_INT 108
112715: PUSH
112716: LD_INT 116
112718: PUSH
112719: LD_INT 117
112721: PUSH
112722: LD_INT 118
112724: PUSH
112725: EMPTY
112726: LIST
112727: LIST
112728: LIST
112729: LIST
112730: LIST
112731: LIST
112732: LIST
112733: LIST
112734: PUSH
112735: EMPTY
112736: LIST
112737: LIST
112738: ST_TO_ADDR
112739: GO 115626
112741: LD_INT 4
112743: DOUBLE
112744: EQUAL
112745: IFTRUE 112749
112747: GO 112845
112749: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
112750: LD_ADDR_VAR 0 2
112754: PUSH
112755: LD_INT 2
112757: PUSH
112758: LD_INT 4
112760: PUSH
112761: LD_INT 5
112763: PUSH
112764: LD_INT 8
112766: PUSH
112767: LD_INT 11
112769: PUSH
112770: LD_INT 12
112772: PUSH
112773: LD_INT 15
112775: PUSH
112776: LD_INT 16
112778: PUSH
112779: LD_INT 22
112781: PUSH
112782: LD_INT 23
112784: PUSH
112785: LD_INT 26
112787: PUSH
112788: LD_INT 36
112790: PUSH
112791: EMPTY
112792: LIST
112793: LIST
112794: LIST
112795: LIST
112796: LIST
112797: LIST
112798: LIST
112799: LIST
112800: LIST
112801: LIST
112802: LIST
112803: LIST
112804: PUSH
112805: LD_INT 101
112807: PUSH
112808: LD_INT 102
112810: PUSH
112811: LD_INT 105
112813: PUSH
112814: LD_INT 106
112816: PUSH
112817: LD_INT 108
112819: PUSH
112820: LD_INT 116
112822: PUSH
112823: LD_INT 117
112825: PUSH
112826: LD_INT 118
112828: PUSH
112829: EMPTY
112830: LIST
112831: LIST
112832: LIST
112833: LIST
112834: LIST
112835: LIST
112836: LIST
112837: LIST
112838: PUSH
112839: EMPTY
112840: LIST
112841: LIST
112842: ST_TO_ADDR
112843: GO 115626
112845: LD_INT 5
112847: DOUBLE
112848: EQUAL
112849: IFTRUE 112853
112851: GO 112965
112853: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
112854: LD_ADDR_VAR 0 2
112858: PUSH
112859: LD_INT 2
112861: PUSH
112862: LD_INT 4
112864: PUSH
112865: LD_INT 5
112867: PUSH
112868: LD_INT 6
112870: PUSH
112871: LD_INT 8
112873: PUSH
112874: LD_INT 11
112876: PUSH
112877: LD_INT 12
112879: PUSH
112880: LD_INT 15
112882: PUSH
112883: LD_INT 16
112885: PUSH
112886: LD_INT 22
112888: PUSH
112889: LD_INT 23
112891: PUSH
112892: LD_INT 25
112894: PUSH
112895: LD_INT 26
112897: PUSH
112898: LD_INT 36
112900: PUSH
112901: EMPTY
112902: LIST
112903: LIST
112904: LIST
112905: LIST
112906: LIST
112907: LIST
112908: LIST
112909: LIST
112910: LIST
112911: LIST
112912: LIST
112913: LIST
112914: LIST
112915: LIST
112916: PUSH
112917: LD_INT 101
112919: PUSH
112920: LD_INT 102
112922: PUSH
112923: LD_INT 105
112925: PUSH
112926: LD_INT 106
112928: PUSH
112929: LD_INT 108
112931: PUSH
112932: LD_INT 109
112934: PUSH
112935: LD_INT 112
112937: PUSH
112938: LD_INT 116
112940: PUSH
112941: LD_INT 117
112943: PUSH
112944: LD_INT 118
112946: PUSH
112947: EMPTY
112948: LIST
112949: LIST
112950: LIST
112951: LIST
112952: LIST
112953: LIST
112954: LIST
112955: LIST
112956: LIST
112957: LIST
112958: PUSH
112959: EMPTY
112960: LIST
112961: LIST
112962: ST_TO_ADDR
112963: GO 115626
112965: LD_INT 6
112967: DOUBLE
112968: EQUAL
112969: IFTRUE 112973
112971: GO 113105
112973: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
112974: LD_ADDR_VAR 0 2
112978: PUSH
112979: LD_INT 2
112981: PUSH
112982: LD_INT 4
112984: PUSH
112985: LD_INT 5
112987: PUSH
112988: LD_INT 6
112990: PUSH
112991: LD_INT 8
112993: PUSH
112994: LD_INT 11
112996: PUSH
112997: LD_INT 12
112999: PUSH
113000: LD_INT 15
113002: PUSH
113003: LD_INT 16
113005: PUSH
113006: LD_INT 20
113008: PUSH
113009: LD_INT 21
113011: PUSH
113012: LD_INT 22
113014: PUSH
113015: LD_INT 23
113017: PUSH
113018: LD_INT 25
113020: PUSH
113021: LD_INT 26
113023: PUSH
113024: LD_INT 30
113026: PUSH
113027: LD_INT 31
113029: PUSH
113030: LD_INT 32
113032: PUSH
113033: LD_INT 36
113035: PUSH
113036: EMPTY
113037: LIST
113038: LIST
113039: LIST
113040: LIST
113041: LIST
113042: LIST
113043: LIST
113044: LIST
113045: LIST
113046: LIST
113047: LIST
113048: LIST
113049: LIST
113050: LIST
113051: LIST
113052: LIST
113053: LIST
113054: LIST
113055: LIST
113056: PUSH
113057: LD_INT 101
113059: PUSH
113060: LD_INT 102
113062: PUSH
113063: LD_INT 105
113065: PUSH
113066: LD_INT 106
113068: PUSH
113069: LD_INT 108
113071: PUSH
113072: LD_INT 109
113074: PUSH
113075: LD_INT 112
113077: PUSH
113078: LD_INT 116
113080: PUSH
113081: LD_INT 117
113083: PUSH
113084: LD_INT 118
113086: PUSH
113087: EMPTY
113088: LIST
113089: LIST
113090: LIST
113091: LIST
113092: LIST
113093: LIST
113094: LIST
113095: LIST
113096: LIST
113097: LIST
113098: PUSH
113099: EMPTY
113100: LIST
113101: LIST
113102: ST_TO_ADDR
113103: GO 115626
113105: LD_INT 7
113107: DOUBLE
113108: EQUAL
113109: IFTRUE 113113
113111: GO 113225
113113: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
113114: LD_ADDR_VAR 0 2
113118: PUSH
113119: LD_INT 2
113121: PUSH
113122: LD_INT 4
113124: PUSH
113125: LD_INT 5
113127: PUSH
113128: LD_INT 7
113130: PUSH
113131: LD_INT 11
113133: PUSH
113134: LD_INT 12
113136: PUSH
113137: LD_INT 15
113139: PUSH
113140: LD_INT 16
113142: PUSH
113143: LD_INT 20
113145: PUSH
113146: LD_INT 21
113148: PUSH
113149: LD_INT 22
113151: PUSH
113152: LD_INT 23
113154: PUSH
113155: LD_INT 25
113157: PUSH
113158: LD_INT 26
113160: PUSH
113161: EMPTY
113162: LIST
113163: LIST
113164: LIST
113165: LIST
113166: LIST
113167: LIST
113168: LIST
113169: LIST
113170: LIST
113171: LIST
113172: LIST
113173: LIST
113174: LIST
113175: LIST
113176: PUSH
113177: LD_INT 101
113179: PUSH
113180: LD_INT 102
113182: PUSH
113183: LD_INT 103
113185: PUSH
113186: LD_INT 105
113188: PUSH
113189: LD_INT 106
113191: PUSH
113192: LD_INT 108
113194: PUSH
113195: LD_INT 112
113197: PUSH
113198: LD_INT 116
113200: PUSH
113201: LD_INT 117
113203: PUSH
113204: LD_INT 118
113206: PUSH
113207: EMPTY
113208: LIST
113209: LIST
113210: LIST
113211: LIST
113212: LIST
113213: LIST
113214: LIST
113215: LIST
113216: LIST
113217: LIST
113218: PUSH
113219: EMPTY
113220: LIST
113221: LIST
113222: ST_TO_ADDR
113223: GO 115626
113225: LD_INT 8
113227: DOUBLE
113228: EQUAL
113229: IFTRUE 113233
113231: GO 113373
113233: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
113234: LD_ADDR_VAR 0 2
113238: PUSH
113239: LD_INT 2
113241: PUSH
113242: LD_INT 4
113244: PUSH
113245: LD_INT 5
113247: PUSH
113248: LD_INT 6
113250: PUSH
113251: LD_INT 7
113253: PUSH
113254: LD_INT 8
113256: PUSH
113257: LD_INT 11
113259: PUSH
113260: LD_INT 12
113262: PUSH
113263: LD_INT 15
113265: PUSH
113266: LD_INT 16
113268: PUSH
113269: LD_INT 20
113271: PUSH
113272: LD_INT 21
113274: PUSH
113275: LD_INT 22
113277: PUSH
113278: LD_INT 23
113280: PUSH
113281: LD_INT 25
113283: PUSH
113284: LD_INT 26
113286: PUSH
113287: LD_INT 30
113289: PUSH
113290: LD_INT 31
113292: PUSH
113293: LD_INT 32
113295: PUSH
113296: LD_INT 36
113298: PUSH
113299: EMPTY
113300: LIST
113301: LIST
113302: LIST
113303: LIST
113304: LIST
113305: LIST
113306: LIST
113307: LIST
113308: LIST
113309: LIST
113310: LIST
113311: LIST
113312: LIST
113313: LIST
113314: LIST
113315: LIST
113316: LIST
113317: LIST
113318: LIST
113319: LIST
113320: PUSH
113321: LD_INT 101
113323: PUSH
113324: LD_INT 102
113326: PUSH
113327: LD_INT 103
113329: PUSH
113330: LD_INT 105
113332: PUSH
113333: LD_INT 106
113335: PUSH
113336: LD_INT 108
113338: PUSH
113339: LD_INT 109
113341: PUSH
113342: LD_INT 112
113344: PUSH
113345: LD_INT 116
113347: PUSH
113348: LD_INT 117
113350: PUSH
113351: LD_INT 118
113353: PUSH
113354: EMPTY
113355: LIST
113356: LIST
113357: LIST
113358: LIST
113359: LIST
113360: LIST
113361: LIST
113362: LIST
113363: LIST
113364: LIST
113365: LIST
113366: PUSH
113367: EMPTY
113368: LIST
113369: LIST
113370: ST_TO_ADDR
113371: GO 115626
113373: LD_INT 9
113375: DOUBLE
113376: EQUAL
113377: IFTRUE 113381
113379: GO 113529
113381: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
113382: LD_ADDR_VAR 0 2
113386: PUSH
113387: LD_INT 2
113389: PUSH
113390: LD_INT 4
113392: PUSH
113393: LD_INT 5
113395: PUSH
113396: LD_INT 6
113398: PUSH
113399: LD_INT 7
113401: PUSH
113402: LD_INT 8
113404: PUSH
113405: LD_INT 11
113407: PUSH
113408: LD_INT 12
113410: PUSH
113411: LD_INT 15
113413: PUSH
113414: LD_INT 16
113416: PUSH
113417: LD_INT 20
113419: PUSH
113420: LD_INT 21
113422: PUSH
113423: LD_INT 22
113425: PUSH
113426: LD_INT 23
113428: PUSH
113429: LD_INT 25
113431: PUSH
113432: LD_INT 26
113434: PUSH
113435: LD_INT 28
113437: PUSH
113438: LD_INT 30
113440: PUSH
113441: LD_INT 31
113443: PUSH
113444: LD_INT 32
113446: PUSH
113447: LD_INT 36
113449: PUSH
113450: EMPTY
113451: LIST
113452: LIST
113453: LIST
113454: LIST
113455: LIST
113456: LIST
113457: LIST
113458: LIST
113459: LIST
113460: LIST
113461: LIST
113462: LIST
113463: LIST
113464: LIST
113465: LIST
113466: LIST
113467: LIST
113468: LIST
113469: LIST
113470: LIST
113471: LIST
113472: PUSH
113473: LD_INT 101
113475: PUSH
113476: LD_INT 102
113478: PUSH
113479: LD_INT 103
113481: PUSH
113482: LD_INT 105
113484: PUSH
113485: LD_INT 106
113487: PUSH
113488: LD_INT 108
113490: PUSH
113491: LD_INT 109
113493: PUSH
113494: LD_INT 112
113496: PUSH
113497: LD_INT 114
113499: PUSH
113500: LD_INT 116
113502: PUSH
113503: LD_INT 117
113505: PUSH
113506: LD_INT 118
113508: PUSH
113509: EMPTY
113510: LIST
113511: LIST
113512: LIST
113513: LIST
113514: LIST
113515: LIST
113516: LIST
113517: LIST
113518: LIST
113519: LIST
113520: LIST
113521: LIST
113522: PUSH
113523: EMPTY
113524: LIST
113525: LIST
113526: ST_TO_ADDR
113527: GO 115626
113529: LD_INT 10
113531: DOUBLE
113532: EQUAL
113533: IFTRUE 113537
113535: GO 113733
113537: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
113538: LD_ADDR_VAR 0 2
113542: PUSH
113543: LD_INT 2
113545: PUSH
113546: LD_INT 4
113548: PUSH
113549: LD_INT 5
113551: PUSH
113552: LD_INT 6
113554: PUSH
113555: LD_INT 7
113557: PUSH
113558: LD_INT 8
113560: PUSH
113561: LD_INT 9
113563: PUSH
113564: LD_INT 10
113566: PUSH
113567: LD_INT 11
113569: PUSH
113570: LD_INT 12
113572: PUSH
113573: LD_INT 13
113575: PUSH
113576: LD_INT 14
113578: PUSH
113579: LD_INT 15
113581: PUSH
113582: LD_INT 16
113584: PUSH
113585: LD_INT 17
113587: PUSH
113588: LD_INT 18
113590: PUSH
113591: LD_INT 19
113593: PUSH
113594: LD_INT 20
113596: PUSH
113597: LD_INT 21
113599: PUSH
113600: LD_INT 22
113602: PUSH
113603: LD_INT 23
113605: PUSH
113606: LD_INT 24
113608: PUSH
113609: LD_INT 25
113611: PUSH
113612: LD_INT 26
113614: PUSH
113615: LD_INT 28
113617: PUSH
113618: LD_INT 30
113620: PUSH
113621: LD_INT 31
113623: PUSH
113624: LD_INT 32
113626: PUSH
113627: LD_INT 36
113629: PUSH
113630: EMPTY
113631: LIST
113632: LIST
113633: LIST
113634: LIST
113635: LIST
113636: LIST
113637: LIST
113638: LIST
113639: LIST
113640: LIST
113641: LIST
113642: LIST
113643: LIST
113644: LIST
113645: LIST
113646: LIST
113647: LIST
113648: LIST
113649: LIST
113650: LIST
113651: LIST
113652: LIST
113653: LIST
113654: LIST
113655: LIST
113656: LIST
113657: LIST
113658: LIST
113659: LIST
113660: PUSH
113661: LD_INT 101
113663: PUSH
113664: LD_INT 102
113666: PUSH
113667: LD_INT 103
113669: PUSH
113670: LD_INT 104
113672: PUSH
113673: LD_INT 105
113675: PUSH
113676: LD_INT 106
113678: PUSH
113679: LD_INT 107
113681: PUSH
113682: LD_INT 108
113684: PUSH
113685: LD_INT 109
113687: PUSH
113688: LD_INT 110
113690: PUSH
113691: LD_INT 111
113693: PUSH
113694: LD_INT 112
113696: PUSH
113697: LD_INT 114
113699: PUSH
113700: LD_INT 116
113702: PUSH
113703: LD_INT 117
113705: PUSH
113706: LD_INT 118
113708: PUSH
113709: EMPTY
113710: LIST
113711: LIST
113712: LIST
113713: LIST
113714: LIST
113715: LIST
113716: LIST
113717: LIST
113718: LIST
113719: LIST
113720: LIST
113721: LIST
113722: LIST
113723: LIST
113724: LIST
113725: LIST
113726: PUSH
113727: EMPTY
113728: LIST
113729: LIST
113730: ST_TO_ADDR
113731: GO 115626
113733: LD_INT 11
113735: DOUBLE
113736: EQUAL
113737: IFTRUE 113741
113739: GO 113945
113741: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
113742: LD_ADDR_VAR 0 2
113746: PUSH
113747: LD_INT 2
113749: PUSH
113750: LD_INT 3
113752: PUSH
113753: LD_INT 4
113755: PUSH
113756: LD_INT 5
113758: PUSH
113759: LD_INT 6
113761: PUSH
113762: LD_INT 7
113764: PUSH
113765: LD_INT 8
113767: PUSH
113768: LD_INT 9
113770: PUSH
113771: LD_INT 10
113773: PUSH
113774: LD_INT 11
113776: PUSH
113777: LD_INT 12
113779: PUSH
113780: LD_INT 13
113782: PUSH
113783: LD_INT 14
113785: PUSH
113786: LD_INT 15
113788: PUSH
113789: LD_INT 16
113791: PUSH
113792: LD_INT 17
113794: PUSH
113795: LD_INT 18
113797: PUSH
113798: LD_INT 19
113800: PUSH
113801: LD_INT 20
113803: PUSH
113804: LD_INT 21
113806: PUSH
113807: LD_INT 22
113809: PUSH
113810: LD_INT 23
113812: PUSH
113813: LD_INT 24
113815: PUSH
113816: LD_INT 25
113818: PUSH
113819: LD_INT 26
113821: PUSH
113822: LD_INT 28
113824: PUSH
113825: LD_INT 30
113827: PUSH
113828: LD_INT 31
113830: PUSH
113831: LD_INT 32
113833: PUSH
113834: LD_INT 34
113836: PUSH
113837: LD_INT 36
113839: PUSH
113840: EMPTY
113841: LIST
113842: LIST
113843: LIST
113844: LIST
113845: LIST
113846: LIST
113847: LIST
113848: LIST
113849: LIST
113850: LIST
113851: LIST
113852: LIST
113853: LIST
113854: LIST
113855: LIST
113856: LIST
113857: LIST
113858: LIST
113859: LIST
113860: LIST
113861: LIST
113862: LIST
113863: LIST
113864: LIST
113865: LIST
113866: LIST
113867: LIST
113868: LIST
113869: LIST
113870: LIST
113871: LIST
113872: PUSH
113873: LD_INT 101
113875: PUSH
113876: LD_INT 102
113878: PUSH
113879: LD_INT 103
113881: PUSH
113882: LD_INT 104
113884: PUSH
113885: LD_INT 105
113887: PUSH
113888: LD_INT 106
113890: PUSH
113891: LD_INT 107
113893: PUSH
113894: LD_INT 108
113896: PUSH
113897: LD_INT 109
113899: PUSH
113900: LD_INT 110
113902: PUSH
113903: LD_INT 111
113905: PUSH
113906: LD_INT 112
113908: PUSH
113909: LD_INT 114
113911: PUSH
113912: LD_INT 116
113914: PUSH
113915: LD_INT 117
113917: PUSH
113918: LD_INT 118
113920: PUSH
113921: EMPTY
113922: LIST
113923: LIST
113924: LIST
113925: LIST
113926: LIST
113927: LIST
113928: LIST
113929: LIST
113930: LIST
113931: LIST
113932: LIST
113933: LIST
113934: LIST
113935: LIST
113936: LIST
113937: LIST
113938: PUSH
113939: EMPTY
113940: LIST
113941: LIST
113942: ST_TO_ADDR
113943: GO 115626
113945: LD_INT 12
113947: DOUBLE
113948: EQUAL
113949: IFTRUE 113953
113951: GO 114173
113953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
113954: LD_ADDR_VAR 0 2
113958: PUSH
113959: LD_INT 1
113961: PUSH
113962: LD_INT 2
113964: PUSH
113965: LD_INT 3
113967: PUSH
113968: LD_INT 4
113970: PUSH
113971: LD_INT 5
113973: PUSH
113974: LD_INT 6
113976: PUSH
113977: LD_INT 7
113979: PUSH
113980: LD_INT 8
113982: PUSH
113983: LD_INT 9
113985: PUSH
113986: LD_INT 10
113988: PUSH
113989: LD_INT 11
113991: PUSH
113992: LD_INT 12
113994: PUSH
113995: LD_INT 13
113997: PUSH
113998: LD_INT 14
114000: PUSH
114001: LD_INT 15
114003: PUSH
114004: LD_INT 16
114006: PUSH
114007: LD_INT 17
114009: PUSH
114010: LD_INT 18
114012: PUSH
114013: LD_INT 19
114015: PUSH
114016: LD_INT 20
114018: PUSH
114019: LD_INT 21
114021: PUSH
114022: LD_INT 22
114024: PUSH
114025: LD_INT 23
114027: PUSH
114028: LD_INT 24
114030: PUSH
114031: LD_INT 25
114033: PUSH
114034: LD_INT 26
114036: PUSH
114037: LD_INT 27
114039: PUSH
114040: LD_INT 28
114042: PUSH
114043: LD_INT 30
114045: PUSH
114046: LD_INT 31
114048: PUSH
114049: LD_INT 32
114051: PUSH
114052: LD_INT 33
114054: PUSH
114055: LD_INT 34
114057: PUSH
114058: LD_INT 36
114060: PUSH
114061: EMPTY
114062: LIST
114063: LIST
114064: LIST
114065: LIST
114066: LIST
114067: LIST
114068: LIST
114069: LIST
114070: LIST
114071: LIST
114072: LIST
114073: LIST
114074: LIST
114075: LIST
114076: LIST
114077: LIST
114078: LIST
114079: LIST
114080: LIST
114081: LIST
114082: LIST
114083: LIST
114084: LIST
114085: LIST
114086: LIST
114087: LIST
114088: LIST
114089: LIST
114090: LIST
114091: LIST
114092: LIST
114093: LIST
114094: LIST
114095: LIST
114096: PUSH
114097: LD_INT 101
114099: PUSH
114100: LD_INT 102
114102: PUSH
114103: LD_INT 103
114105: PUSH
114106: LD_INT 104
114108: PUSH
114109: LD_INT 105
114111: PUSH
114112: LD_INT 106
114114: PUSH
114115: LD_INT 107
114117: PUSH
114118: LD_INT 108
114120: PUSH
114121: LD_INT 109
114123: PUSH
114124: LD_INT 110
114126: PUSH
114127: LD_INT 111
114129: PUSH
114130: LD_INT 112
114132: PUSH
114133: LD_INT 113
114135: PUSH
114136: LD_INT 114
114138: PUSH
114139: LD_INT 116
114141: PUSH
114142: LD_INT 117
114144: PUSH
114145: LD_INT 118
114147: PUSH
114148: EMPTY
114149: LIST
114150: LIST
114151: LIST
114152: LIST
114153: LIST
114154: LIST
114155: LIST
114156: LIST
114157: LIST
114158: LIST
114159: LIST
114160: LIST
114161: LIST
114162: LIST
114163: LIST
114164: LIST
114165: LIST
114166: PUSH
114167: EMPTY
114168: LIST
114169: LIST
114170: ST_TO_ADDR
114171: GO 115626
114173: LD_INT 13
114175: DOUBLE
114176: EQUAL
114177: IFTRUE 114181
114179: GO 114389
114181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
114182: LD_ADDR_VAR 0 2
114186: PUSH
114187: LD_INT 1
114189: PUSH
114190: LD_INT 2
114192: PUSH
114193: LD_INT 3
114195: PUSH
114196: LD_INT 4
114198: PUSH
114199: LD_INT 5
114201: PUSH
114202: LD_INT 8
114204: PUSH
114205: LD_INT 9
114207: PUSH
114208: LD_INT 10
114210: PUSH
114211: LD_INT 11
114213: PUSH
114214: LD_INT 12
114216: PUSH
114217: LD_INT 14
114219: PUSH
114220: LD_INT 15
114222: PUSH
114223: LD_INT 16
114225: PUSH
114226: LD_INT 17
114228: PUSH
114229: LD_INT 18
114231: PUSH
114232: LD_INT 19
114234: PUSH
114235: LD_INT 20
114237: PUSH
114238: LD_INT 21
114240: PUSH
114241: LD_INT 22
114243: PUSH
114244: LD_INT 23
114246: PUSH
114247: LD_INT 24
114249: PUSH
114250: LD_INT 25
114252: PUSH
114253: LD_INT 26
114255: PUSH
114256: LD_INT 27
114258: PUSH
114259: LD_INT 28
114261: PUSH
114262: LD_INT 30
114264: PUSH
114265: LD_INT 31
114267: PUSH
114268: LD_INT 32
114270: PUSH
114271: LD_INT 33
114273: PUSH
114274: LD_INT 34
114276: PUSH
114277: LD_INT 36
114279: PUSH
114280: EMPTY
114281: LIST
114282: LIST
114283: LIST
114284: LIST
114285: LIST
114286: LIST
114287: LIST
114288: LIST
114289: LIST
114290: LIST
114291: LIST
114292: LIST
114293: LIST
114294: LIST
114295: LIST
114296: LIST
114297: LIST
114298: LIST
114299: LIST
114300: LIST
114301: LIST
114302: LIST
114303: LIST
114304: LIST
114305: LIST
114306: LIST
114307: LIST
114308: LIST
114309: LIST
114310: LIST
114311: LIST
114312: PUSH
114313: LD_INT 101
114315: PUSH
114316: LD_INT 102
114318: PUSH
114319: LD_INT 103
114321: PUSH
114322: LD_INT 104
114324: PUSH
114325: LD_INT 105
114327: PUSH
114328: LD_INT 106
114330: PUSH
114331: LD_INT 107
114333: PUSH
114334: LD_INT 108
114336: PUSH
114337: LD_INT 109
114339: PUSH
114340: LD_INT 110
114342: PUSH
114343: LD_INT 111
114345: PUSH
114346: LD_INT 112
114348: PUSH
114349: LD_INT 113
114351: PUSH
114352: LD_INT 114
114354: PUSH
114355: LD_INT 116
114357: PUSH
114358: LD_INT 117
114360: PUSH
114361: LD_INT 118
114363: PUSH
114364: EMPTY
114365: LIST
114366: LIST
114367: LIST
114368: LIST
114369: LIST
114370: LIST
114371: LIST
114372: LIST
114373: LIST
114374: LIST
114375: LIST
114376: LIST
114377: LIST
114378: LIST
114379: LIST
114380: LIST
114381: LIST
114382: PUSH
114383: EMPTY
114384: LIST
114385: LIST
114386: ST_TO_ADDR
114387: GO 115626
114389: LD_INT 14
114391: DOUBLE
114392: EQUAL
114393: IFTRUE 114397
114395: GO 114621
114397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
114398: LD_ADDR_VAR 0 2
114402: PUSH
114403: LD_INT 1
114405: PUSH
114406: LD_INT 2
114408: PUSH
114409: LD_INT 3
114411: PUSH
114412: LD_INT 4
114414: PUSH
114415: LD_INT 5
114417: PUSH
114418: LD_INT 6
114420: PUSH
114421: LD_INT 7
114423: PUSH
114424: LD_INT 8
114426: PUSH
114427: LD_INT 9
114429: PUSH
114430: LD_INT 10
114432: PUSH
114433: LD_INT 11
114435: PUSH
114436: LD_INT 12
114438: PUSH
114439: LD_INT 13
114441: PUSH
114442: LD_INT 14
114444: PUSH
114445: LD_INT 15
114447: PUSH
114448: LD_INT 16
114450: PUSH
114451: LD_INT 17
114453: PUSH
114454: LD_INT 18
114456: PUSH
114457: LD_INT 19
114459: PUSH
114460: LD_INT 20
114462: PUSH
114463: LD_INT 21
114465: PUSH
114466: LD_INT 22
114468: PUSH
114469: LD_INT 23
114471: PUSH
114472: LD_INT 24
114474: PUSH
114475: LD_INT 25
114477: PUSH
114478: LD_INT 26
114480: PUSH
114481: LD_INT 27
114483: PUSH
114484: LD_INT 28
114486: PUSH
114487: LD_INT 29
114489: PUSH
114490: LD_INT 30
114492: PUSH
114493: LD_INT 31
114495: PUSH
114496: LD_INT 32
114498: PUSH
114499: LD_INT 33
114501: PUSH
114502: LD_INT 34
114504: PUSH
114505: LD_INT 36
114507: PUSH
114508: EMPTY
114509: LIST
114510: LIST
114511: LIST
114512: LIST
114513: LIST
114514: LIST
114515: LIST
114516: LIST
114517: LIST
114518: LIST
114519: LIST
114520: LIST
114521: LIST
114522: LIST
114523: LIST
114524: LIST
114525: LIST
114526: LIST
114527: LIST
114528: LIST
114529: LIST
114530: LIST
114531: LIST
114532: LIST
114533: LIST
114534: LIST
114535: LIST
114536: LIST
114537: LIST
114538: LIST
114539: LIST
114540: LIST
114541: LIST
114542: LIST
114543: LIST
114544: PUSH
114545: LD_INT 101
114547: PUSH
114548: LD_INT 102
114550: PUSH
114551: LD_INT 103
114553: PUSH
114554: LD_INT 104
114556: PUSH
114557: LD_INT 105
114559: PUSH
114560: LD_INT 106
114562: PUSH
114563: LD_INT 107
114565: PUSH
114566: LD_INT 108
114568: PUSH
114569: LD_INT 109
114571: PUSH
114572: LD_INT 110
114574: PUSH
114575: LD_INT 111
114577: PUSH
114578: LD_INT 112
114580: PUSH
114581: LD_INT 113
114583: PUSH
114584: LD_INT 114
114586: PUSH
114587: LD_INT 116
114589: PUSH
114590: LD_INT 117
114592: PUSH
114593: LD_INT 118
114595: PUSH
114596: EMPTY
114597: LIST
114598: LIST
114599: LIST
114600: LIST
114601: LIST
114602: LIST
114603: LIST
114604: LIST
114605: LIST
114606: LIST
114607: LIST
114608: LIST
114609: LIST
114610: LIST
114611: LIST
114612: LIST
114613: LIST
114614: PUSH
114615: EMPTY
114616: LIST
114617: LIST
114618: ST_TO_ADDR
114619: GO 115626
114621: LD_INT 15
114623: DOUBLE
114624: EQUAL
114625: IFTRUE 114629
114627: GO 114853
114629: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
114630: LD_ADDR_VAR 0 2
114634: PUSH
114635: LD_INT 1
114637: PUSH
114638: LD_INT 2
114640: PUSH
114641: LD_INT 3
114643: PUSH
114644: LD_INT 4
114646: PUSH
114647: LD_INT 5
114649: PUSH
114650: LD_INT 6
114652: PUSH
114653: LD_INT 7
114655: PUSH
114656: LD_INT 8
114658: PUSH
114659: LD_INT 9
114661: PUSH
114662: LD_INT 10
114664: PUSH
114665: LD_INT 11
114667: PUSH
114668: LD_INT 12
114670: PUSH
114671: LD_INT 13
114673: PUSH
114674: LD_INT 14
114676: PUSH
114677: LD_INT 15
114679: PUSH
114680: LD_INT 16
114682: PUSH
114683: LD_INT 17
114685: PUSH
114686: LD_INT 18
114688: PUSH
114689: LD_INT 19
114691: PUSH
114692: LD_INT 20
114694: PUSH
114695: LD_INT 21
114697: PUSH
114698: LD_INT 22
114700: PUSH
114701: LD_INT 23
114703: PUSH
114704: LD_INT 24
114706: PUSH
114707: LD_INT 25
114709: PUSH
114710: LD_INT 26
114712: PUSH
114713: LD_INT 27
114715: PUSH
114716: LD_INT 28
114718: PUSH
114719: LD_INT 29
114721: PUSH
114722: LD_INT 30
114724: PUSH
114725: LD_INT 31
114727: PUSH
114728: LD_INT 32
114730: PUSH
114731: LD_INT 33
114733: PUSH
114734: LD_INT 34
114736: PUSH
114737: LD_INT 36
114739: PUSH
114740: EMPTY
114741: LIST
114742: LIST
114743: LIST
114744: LIST
114745: LIST
114746: LIST
114747: LIST
114748: LIST
114749: LIST
114750: LIST
114751: LIST
114752: LIST
114753: LIST
114754: LIST
114755: LIST
114756: LIST
114757: LIST
114758: LIST
114759: LIST
114760: LIST
114761: LIST
114762: LIST
114763: LIST
114764: LIST
114765: LIST
114766: LIST
114767: LIST
114768: LIST
114769: LIST
114770: LIST
114771: LIST
114772: LIST
114773: LIST
114774: LIST
114775: LIST
114776: PUSH
114777: LD_INT 101
114779: PUSH
114780: LD_INT 102
114782: PUSH
114783: LD_INT 103
114785: PUSH
114786: LD_INT 104
114788: PUSH
114789: LD_INT 105
114791: PUSH
114792: LD_INT 106
114794: PUSH
114795: LD_INT 107
114797: PUSH
114798: LD_INT 108
114800: PUSH
114801: LD_INT 109
114803: PUSH
114804: LD_INT 110
114806: PUSH
114807: LD_INT 111
114809: PUSH
114810: LD_INT 112
114812: PUSH
114813: LD_INT 113
114815: PUSH
114816: LD_INT 114
114818: PUSH
114819: LD_INT 116
114821: PUSH
114822: LD_INT 117
114824: PUSH
114825: LD_INT 118
114827: PUSH
114828: EMPTY
114829: LIST
114830: LIST
114831: LIST
114832: LIST
114833: LIST
114834: LIST
114835: LIST
114836: LIST
114837: LIST
114838: LIST
114839: LIST
114840: LIST
114841: LIST
114842: LIST
114843: LIST
114844: LIST
114845: LIST
114846: PUSH
114847: EMPTY
114848: LIST
114849: LIST
114850: ST_TO_ADDR
114851: GO 115626
114853: LD_INT 16
114855: DOUBLE
114856: EQUAL
114857: IFTRUE 114861
114859: GO 114997
114861: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
114862: LD_ADDR_VAR 0 2
114866: PUSH
114867: LD_INT 2
114869: PUSH
114870: LD_INT 4
114872: PUSH
114873: LD_INT 5
114875: PUSH
114876: LD_INT 7
114878: PUSH
114879: LD_INT 11
114881: PUSH
114882: LD_INT 12
114884: PUSH
114885: LD_INT 15
114887: PUSH
114888: LD_INT 16
114890: PUSH
114891: LD_INT 20
114893: PUSH
114894: LD_INT 21
114896: PUSH
114897: LD_INT 22
114899: PUSH
114900: LD_INT 23
114902: PUSH
114903: LD_INT 25
114905: PUSH
114906: LD_INT 26
114908: PUSH
114909: LD_INT 30
114911: PUSH
114912: LD_INT 31
114914: PUSH
114915: LD_INT 32
114917: PUSH
114918: LD_INT 33
114920: PUSH
114921: LD_INT 34
114923: PUSH
114924: EMPTY
114925: LIST
114926: LIST
114927: LIST
114928: LIST
114929: LIST
114930: LIST
114931: LIST
114932: LIST
114933: LIST
114934: LIST
114935: LIST
114936: LIST
114937: LIST
114938: LIST
114939: LIST
114940: LIST
114941: LIST
114942: LIST
114943: LIST
114944: PUSH
114945: LD_INT 101
114947: PUSH
114948: LD_INT 102
114950: PUSH
114951: LD_INT 103
114953: PUSH
114954: LD_INT 106
114956: PUSH
114957: LD_INT 108
114959: PUSH
114960: LD_INT 112
114962: PUSH
114963: LD_INT 113
114965: PUSH
114966: LD_INT 114
114968: PUSH
114969: LD_INT 116
114971: PUSH
114972: LD_INT 117
114974: PUSH
114975: LD_INT 118
114977: PUSH
114978: EMPTY
114979: LIST
114980: LIST
114981: LIST
114982: LIST
114983: LIST
114984: LIST
114985: LIST
114986: LIST
114987: LIST
114988: LIST
114989: LIST
114990: PUSH
114991: EMPTY
114992: LIST
114993: LIST
114994: ST_TO_ADDR
114995: GO 115626
114997: LD_INT 17
114999: DOUBLE
115000: EQUAL
115001: IFTRUE 115005
115003: GO 115229
115005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
115006: LD_ADDR_VAR 0 2
115010: PUSH
115011: LD_INT 1
115013: PUSH
115014: LD_INT 2
115016: PUSH
115017: LD_INT 3
115019: PUSH
115020: LD_INT 4
115022: PUSH
115023: LD_INT 5
115025: PUSH
115026: LD_INT 6
115028: PUSH
115029: LD_INT 7
115031: PUSH
115032: LD_INT 8
115034: PUSH
115035: LD_INT 9
115037: PUSH
115038: LD_INT 10
115040: PUSH
115041: LD_INT 11
115043: PUSH
115044: LD_INT 12
115046: PUSH
115047: LD_INT 13
115049: PUSH
115050: LD_INT 14
115052: PUSH
115053: LD_INT 15
115055: PUSH
115056: LD_INT 16
115058: PUSH
115059: LD_INT 17
115061: PUSH
115062: LD_INT 18
115064: PUSH
115065: LD_INT 19
115067: PUSH
115068: LD_INT 20
115070: PUSH
115071: LD_INT 21
115073: PUSH
115074: LD_INT 22
115076: PUSH
115077: LD_INT 23
115079: PUSH
115080: LD_INT 24
115082: PUSH
115083: LD_INT 25
115085: PUSH
115086: LD_INT 26
115088: PUSH
115089: LD_INT 27
115091: PUSH
115092: LD_INT 28
115094: PUSH
115095: LD_INT 29
115097: PUSH
115098: LD_INT 30
115100: PUSH
115101: LD_INT 31
115103: PUSH
115104: LD_INT 32
115106: PUSH
115107: LD_INT 33
115109: PUSH
115110: LD_INT 34
115112: PUSH
115113: LD_INT 36
115115: PUSH
115116: EMPTY
115117: LIST
115118: LIST
115119: LIST
115120: LIST
115121: LIST
115122: LIST
115123: LIST
115124: LIST
115125: LIST
115126: LIST
115127: LIST
115128: LIST
115129: LIST
115130: LIST
115131: LIST
115132: LIST
115133: LIST
115134: LIST
115135: LIST
115136: LIST
115137: LIST
115138: LIST
115139: LIST
115140: LIST
115141: LIST
115142: LIST
115143: LIST
115144: LIST
115145: LIST
115146: LIST
115147: LIST
115148: LIST
115149: LIST
115150: LIST
115151: LIST
115152: PUSH
115153: LD_INT 101
115155: PUSH
115156: LD_INT 102
115158: PUSH
115159: LD_INT 103
115161: PUSH
115162: LD_INT 104
115164: PUSH
115165: LD_INT 105
115167: PUSH
115168: LD_INT 106
115170: PUSH
115171: LD_INT 107
115173: PUSH
115174: LD_INT 108
115176: PUSH
115177: LD_INT 109
115179: PUSH
115180: LD_INT 110
115182: PUSH
115183: LD_INT 111
115185: PUSH
115186: LD_INT 112
115188: PUSH
115189: LD_INT 113
115191: PUSH
115192: LD_INT 114
115194: PUSH
115195: LD_INT 116
115197: PUSH
115198: LD_INT 117
115200: PUSH
115201: LD_INT 118
115203: PUSH
115204: EMPTY
115205: LIST
115206: LIST
115207: LIST
115208: LIST
115209: LIST
115210: LIST
115211: LIST
115212: LIST
115213: LIST
115214: LIST
115215: LIST
115216: LIST
115217: LIST
115218: LIST
115219: LIST
115220: LIST
115221: LIST
115222: PUSH
115223: EMPTY
115224: LIST
115225: LIST
115226: ST_TO_ADDR
115227: GO 115626
115229: LD_INT 18
115231: DOUBLE
115232: EQUAL
115233: IFTRUE 115237
115235: GO 115385
115237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
115238: LD_ADDR_VAR 0 2
115242: PUSH
115243: LD_INT 2
115245: PUSH
115246: LD_INT 4
115248: PUSH
115249: LD_INT 5
115251: PUSH
115252: LD_INT 7
115254: PUSH
115255: LD_INT 11
115257: PUSH
115258: LD_INT 12
115260: PUSH
115261: LD_INT 15
115263: PUSH
115264: LD_INT 16
115266: PUSH
115267: LD_INT 20
115269: PUSH
115270: LD_INT 21
115272: PUSH
115273: LD_INT 22
115275: PUSH
115276: LD_INT 23
115278: PUSH
115279: LD_INT 25
115281: PUSH
115282: LD_INT 26
115284: PUSH
115285: LD_INT 30
115287: PUSH
115288: LD_INT 31
115290: PUSH
115291: LD_INT 32
115293: PUSH
115294: LD_INT 33
115296: PUSH
115297: LD_INT 34
115299: PUSH
115300: LD_INT 35
115302: PUSH
115303: LD_INT 36
115305: PUSH
115306: EMPTY
115307: LIST
115308: LIST
115309: LIST
115310: LIST
115311: LIST
115312: LIST
115313: LIST
115314: LIST
115315: LIST
115316: LIST
115317: LIST
115318: LIST
115319: LIST
115320: LIST
115321: LIST
115322: LIST
115323: LIST
115324: LIST
115325: LIST
115326: LIST
115327: LIST
115328: PUSH
115329: LD_INT 101
115331: PUSH
115332: LD_INT 102
115334: PUSH
115335: LD_INT 103
115337: PUSH
115338: LD_INT 106
115340: PUSH
115341: LD_INT 108
115343: PUSH
115344: LD_INT 112
115346: PUSH
115347: LD_INT 113
115349: PUSH
115350: LD_INT 114
115352: PUSH
115353: LD_INT 115
115355: PUSH
115356: LD_INT 116
115358: PUSH
115359: LD_INT 117
115361: PUSH
115362: LD_INT 118
115364: PUSH
115365: EMPTY
115366: LIST
115367: LIST
115368: LIST
115369: LIST
115370: LIST
115371: LIST
115372: LIST
115373: LIST
115374: LIST
115375: LIST
115376: LIST
115377: LIST
115378: PUSH
115379: EMPTY
115380: LIST
115381: LIST
115382: ST_TO_ADDR
115383: GO 115626
115385: LD_INT 19
115387: DOUBLE
115388: EQUAL
115389: IFTRUE 115393
115391: GO 115625
115393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
115394: LD_ADDR_VAR 0 2
115398: PUSH
115399: LD_INT 1
115401: PUSH
115402: LD_INT 2
115404: PUSH
115405: LD_INT 3
115407: PUSH
115408: LD_INT 4
115410: PUSH
115411: LD_INT 5
115413: PUSH
115414: LD_INT 6
115416: PUSH
115417: LD_INT 7
115419: PUSH
115420: LD_INT 8
115422: PUSH
115423: LD_INT 9
115425: PUSH
115426: LD_INT 10
115428: PUSH
115429: LD_INT 11
115431: PUSH
115432: LD_INT 12
115434: PUSH
115435: LD_INT 13
115437: PUSH
115438: LD_INT 14
115440: PUSH
115441: LD_INT 15
115443: PUSH
115444: LD_INT 16
115446: PUSH
115447: LD_INT 17
115449: PUSH
115450: LD_INT 18
115452: PUSH
115453: LD_INT 19
115455: PUSH
115456: LD_INT 20
115458: PUSH
115459: LD_INT 21
115461: PUSH
115462: LD_INT 22
115464: PUSH
115465: LD_INT 23
115467: PUSH
115468: LD_INT 24
115470: PUSH
115471: LD_INT 25
115473: PUSH
115474: LD_INT 26
115476: PUSH
115477: LD_INT 27
115479: PUSH
115480: LD_INT 28
115482: PUSH
115483: LD_INT 29
115485: PUSH
115486: LD_INT 30
115488: PUSH
115489: LD_INT 31
115491: PUSH
115492: LD_INT 32
115494: PUSH
115495: LD_INT 33
115497: PUSH
115498: LD_INT 34
115500: PUSH
115501: LD_INT 35
115503: PUSH
115504: LD_INT 36
115506: PUSH
115507: EMPTY
115508: LIST
115509: LIST
115510: LIST
115511: LIST
115512: LIST
115513: LIST
115514: LIST
115515: LIST
115516: LIST
115517: LIST
115518: LIST
115519: LIST
115520: LIST
115521: LIST
115522: LIST
115523: LIST
115524: LIST
115525: LIST
115526: LIST
115527: LIST
115528: LIST
115529: LIST
115530: LIST
115531: LIST
115532: LIST
115533: LIST
115534: LIST
115535: LIST
115536: LIST
115537: LIST
115538: LIST
115539: LIST
115540: LIST
115541: LIST
115542: LIST
115543: LIST
115544: PUSH
115545: LD_INT 101
115547: PUSH
115548: LD_INT 102
115550: PUSH
115551: LD_INT 103
115553: PUSH
115554: LD_INT 104
115556: PUSH
115557: LD_INT 105
115559: PUSH
115560: LD_INT 106
115562: PUSH
115563: LD_INT 107
115565: PUSH
115566: LD_INT 108
115568: PUSH
115569: LD_INT 109
115571: PUSH
115572: LD_INT 110
115574: PUSH
115575: LD_INT 111
115577: PUSH
115578: LD_INT 112
115580: PUSH
115581: LD_INT 113
115583: PUSH
115584: LD_INT 114
115586: PUSH
115587: LD_INT 115
115589: PUSH
115590: LD_INT 116
115592: PUSH
115593: LD_INT 117
115595: PUSH
115596: LD_INT 118
115598: PUSH
115599: EMPTY
115600: LIST
115601: LIST
115602: LIST
115603: LIST
115604: LIST
115605: LIST
115606: LIST
115607: LIST
115608: LIST
115609: LIST
115610: LIST
115611: LIST
115612: LIST
115613: LIST
115614: LIST
115615: LIST
115616: LIST
115617: LIST
115618: PUSH
115619: EMPTY
115620: LIST
115621: LIST
115622: ST_TO_ADDR
115623: GO 115626
115625: POP
// end else
115626: GO 115857
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
115628: LD_ADDR_VAR 0 2
115632: PUSH
115633: LD_INT 1
115635: PUSH
115636: LD_INT 2
115638: PUSH
115639: LD_INT 3
115641: PUSH
115642: LD_INT 4
115644: PUSH
115645: LD_INT 5
115647: PUSH
115648: LD_INT 6
115650: PUSH
115651: LD_INT 7
115653: PUSH
115654: LD_INT 8
115656: PUSH
115657: LD_INT 9
115659: PUSH
115660: LD_INT 10
115662: PUSH
115663: LD_INT 11
115665: PUSH
115666: LD_INT 12
115668: PUSH
115669: LD_INT 13
115671: PUSH
115672: LD_INT 14
115674: PUSH
115675: LD_INT 15
115677: PUSH
115678: LD_INT 16
115680: PUSH
115681: LD_INT 17
115683: PUSH
115684: LD_INT 18
115686: PUSH
115687: LD_INT 19
115689: PUSH
115690: LD_INT 20
115692: PUSH
115693: LD_INT 21
115695: PUSH
115696: LD_INT 22
115698: PUSH
115699: LD_INT 23
115701: PUSH
115702: LD_INT 24
115704: PUSH
115705: LD_INT 25
115707: PUSH
115708: LD_INT 26
115710: PUSH
115711: LD_INT 27
115713: PUSH
115714: LD_INT 28
115716: PUSH
115717: LD_INT 29
115719: PUSH
115720: LD_INT 30
115722: PUSH
115723: LD_INT 31
115725: PUSH
115726: LD_INT 32
115728: PUSH
115729: LD_INT 33
115731: PUSH
115732: LD_INT 34
115734: PUSH
115735: LD_INT 35
115737: PUSH
115738: LD_INT 36
115740: PUSH
115741: EMPTY
115742: LIST
115743: LIST
115744: LIST
115745: LIST
115746: LIST
115747: LIST
115748: LIST
115749: LIST
115750: LIST
115751: LIST
115752: LIST
115753: LIST
115754: LIST
115755: LIST
115756: LIST
115757: LIST
115758: LIST
115759: LIST
115760: LIST
115761: LIST
115762: LIST
115763: LIST
115764: LIST
115765: LIST
115766: LIST
115767: LIST
115768: LIST
115769: LIST
115770: LIST
115771: LIST
115772: LIST
115773: LIST
115774: LIST
115775: LIST
115776: LIST
115777: LIST
115778: PUSH
115779: LD_INT 101
115781: PUSH
115782: LD_INT 102
115784: PUSH
115785: LD_INT 103
115787: PUSH
115788: LD_INT 104
115790: PUSH
115791: LD_INT 105
115793: PUSH
115794: LD_INT 106
115796: PUSH
115797: LD_INT 107
115799: PUSH
115800: LD_INT 108
115802: PUSH
115803: LD_INT 109
115805: PUSH
115806: LD_INT 110
115808: PUSH
115809: LD_INT 111
115811: PUSH
115812: LD_INT 112
115814: PUSH
115815: LD_INT 113
115817: PUSH
115818: LD_INT 114
115820: PUSH
115821: LD_INT 115
115823: PUSH
115824: LD_INT 116
115826: PUSH
115827: LD_INT 117
115829: PUSH
115830: LD_INT 118
115832: PUSH
115833: EMPTY
115834: LIST
115835: LIST
115836: LIST
115837: LIST
115838: LIST
115839: LIST
115840: LIST
115841: LIST
115842: LIST
115843: LIST
115844: LIST
115845: LIST
115846: LIST
115847: LIST
115848: LIST
115849: LIST
115850: LIST
115851: LIST
115852: PUSH
115853: EMPTY
115854: LIST
115855: LIST
115856: ST_TO_ADDR
// if result then
115857: LD_VAR 0 2
115861: IFFALSE 116647
// begin normal :=  ;
115863: LD_ADDR_VAR 0 5
115867: PUSH
115868: LD_STRING 
115870: ST_TO_ADDR
// hardcore :=  ;
115871: LD_ADDR_VAR 0 6
115875: PUSH
115876: LD_STRING 
115878: ST_TO_ADDR
// active :=  ;
115879: LD_ADDR_VAR 0 7
115883: PUSH
115884: LD_STRING 
115886: ST_TO_ADDR
// for i = 1 to normalCounter do
115887: LD_ADDR_VAR 0 8
115891: PUSH
115892: DOUBLE
115893: LD_INT 1
115895: DEC
115896: ST_TO_ADDR
115897: LD_EXP 148
115901: PUSH
115902: FOR_TO
115903: IFFALSE 116004
// begin tmp := 0 ;
115905: LD_ADDR_VAR 0 3
115909: PUSH
115910: LD_STRING 0
115912: ST_TO_ADDR
// if result [ 1 ] then
115913: LD_VAR 0 2
115917: PUSH
115918: LD_INT 1
115920: ARRAY
115921: IFFALSE 115986
// if result [ 1 ] [ 1 ] = i then
115923: LD_VAR 0 2
115927: PUSH
115928: LD_INT 1
115930: ARRAY
115931: PUSH
115932: LD_INT 1
115934: ARRAY
115935: PUSH
115936: LD_VAR 0 8
115940: EQUAL
115941: IFFALSE 115986
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
115943: LD_ADDR_VAR 0 2
115947: PUSH
115948: LD_VAR 0 2
115952: PPUSH
115953: LD_INT 1
115955: PPUSH
115956: LD_VAR 0 2
115960: PUSH
115961: LD_INT 1
115963: ARRAY
115964: PPUSH
115965: LD_INT 1
115967: PPUSH
115968: CALL_OW 3
115972: PPUSH
115973: CALL_OW 1
115977: ST_TO_ADDR
// tmp := 1 ;
115978: LD_ADDR_VAR 0 3
115982: PUSH
115983: LD_STRING 1
115985: ST_TO_ADDR
// end ; normal := normal & tmp ;
115986: LD_ADDR_VAR 0 5
115990: PUSH
115991: LD_VAR 0 5
115995: PUSH
115996: LD_VAR 0 3
116000: STR
116001: ST_TO_ADDR
// end ;
116002: GO 115902
116004: POP
116005: POP
// for i = 1 to hardcoreCounter do
116006: LD_ADDR_VAR 0 8
116010: PUSH
116011: DOUBLE
116012: LD_INT 1
116014: DEC
116015: ST_TO_ADDR
116016: LD_EXP 149
116020: PUSH
116021: FOR_TO
116022: IFFALSE 116127
// begin tmp := 0 ;
116024: LD_ADDR_VAR 0 3
116028: PUSH
116029: LD_STRING 0
116031: ST_TO_ADDR
// if result [ 2 ] then
116032: LD_VAR 0 2
116036: PUSH
116037: LD_INT 2
116039: ARRAY
116040: IFFALSE 116109
// if result [ 2 ] [ 1 ] = 100 + i then
116042: LD_VAR 0 2
116046: PUSH
116047: LD_INT 2
116049: ARRAY
116050: PUSH
116051: LD_INT 1
116053: ARRAY
116054: PUSH
116055: LD_INT 100
116057: PUSH
116058: LD_VAR 0 8
116062: PLUS
116063: EQUAL
116064: IFFALSE 116109
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
116066: LD_ADDR_VAR 0 2
116070: PUSH
116071: LD_VAR 0 2
116075: PPUSH
116076: LD_INT 2
116078: PPUSH
116079: LD_VAR 0 2
116083: PUSH
116084: LD_INT 2
116086: ARRAY
116087: PPUSH
116088: LD_INT 1
116090: PPUSH
116091: CALL_OW 3
116095: PPUSH
116096: CALL_OW 1
116100: ST_TO_ADDR
// tmp := 1 ;
116101: LD_ADDR_VAR 0 3
116105: PUSH
116106: LD_STRING 1
116108: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
116109: LD_ADDR_VAR 0 6
116113: PUSH
116114: LD_VAR 0 6
116118: PUSH
116119: LD_VAR 0 3
116123: STR
116124: ST_TO_ADDR
// end ;
116125: GO 116021
116127: POP
116128: POP
// if isGameLoad then
116129: LD_VAR 0 1
116133: IFFALSE 116608
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
116135: LD_ADDR_VAR 0 4
116139: PUSH
116140: LD_EXP 152
116144: PUSH
116145: LD_EXP 151
116149: PUSH
116150: LD_EXP 153
116154: PUSH
116155: LD_EXP 150
116159: PUSH
116160: LD_EXP 154
116164: PUSH
116165: LD_EXP 155
116169: PUSH
116170: LD_EXP 156
116174: PUSH
116175: LD_EXP 157
116179: PUSH
116180: LD_EXP 158
116184: PUSH
116185: LD_EXP 159
116189: PUSH
116190: LD_EXP 160
116194: PUSH
116195: LD_EXP 161
116199: PUSH
116200: LD_EXP 162
116204: PUSH
116205: LD_EXP 163
116209: PUSH
116210: LD_EXP 171
116214: PUSH
116215: LD_EXP 172
116219: PUSH
116220: LD_EXP 173
116224: PUSH
116225: LD_EXP 174
116229: PUSH
116230: LD_EXP 176
116234: PUSH
116235: LD_EXP 177
116239: PUSH
116240: LD_EXP 178
116244: PUSH
116245: LD_EXP 181
116249: PUSH
116250: LD_EXP 183
116254: PUSH
116255: LD_EXP 184
116259: PUSH
116260: LD_EXP 185
116264: PUSH
116265: LD_EXP 187
116269: PUSH
116270: LD_EXP 188
116274: PUSH
116275: LD_EXP 191
116279: PUSH
116280: LD_EXP 192
116284: PUSH
116285: LD_EXP 193
116289: PUSH
116290: LD_EXP 194
116294: PUSH
116295: LD_EXP 195
116299: PUSH
116300: LD_EXP 196
116304: PUSH
116305: LD_EXP 197
116309: PUSH
116310: LD_EXP 198
116314: PUSH
116315: LD_EXP 199
116319: PUSH
116320: LD_EXP 164
116324: PUSH
116325: LD_EXP 165
116329: PUSH
116330: LD_EXP 168
116334: PUSH
116335: LD_EXP 169
116339: PUSH
116340: LD_EXP 170
116344: PUSH
116345: LD_EXP 166
116349: PUSH
116350: LD_EXP 167
116354: PUSH
116355: LD_EXP 175
116359: PUSH
116360: LD_EXP 179
116364: PUSH
116365: LD_EXP 180
116369: PUSH
116370: LD_EXP 182
116374: PUSH
116375: LD_EXP 186
116379: PUSH
116380: LD_EXP 189
116384: PUSH
116385: LD_EXP 190
116389: PUSH
116390: LD_EXP 200
116394: PUSH
116395: LD_EXP 201
116399: PUSH
116400: LD_EXP 202
116404: PUSH
116405: LD_EXP 203
116409: PUSH
116410: EMPTY
116411: LIST
116412: LIST
116413: LIST
116414: LIST
116415: LIST
116416: LIST
116417: LIST
116418: LIST
116419: LIST
116420: LIST
116421: LIST
116422: LIST
116423: LIST
116424: LIST
116425: LIST
116426: LIST
116427: LIST
116428: LIST
116429: LIST
116430: LIST
116431: LIST
116432: LIST
116433: LIST
116434: LIST
116435: LIST
116436: LIST
116437: LIST
116438: LIST
116439: LIST
116440: LIST
116441: LIST
116442: LIST
116443: LIST
116444: LIST
116445: LIST
116446: LIST
116447: LIST
116448: LIST
116449: LIST
116450: LIST
116451: LIST
116452: LIST
116453: LIST
116454: LIST
116455: LIST
116456: LIST
116457: LIST
116458: LIST
116459: LIST
116460: LIST
116461: LIST
116462: LIST
116463: LIST
116464: LIST
116465: ST_TO_ADDR
// tmp :=  ;
116466: LD_ADDR_VAR 0 3
116470: PUSH
116471: LD_STRING 
116473: ST_TO_ADDR
// for i = 1 to normalCounter do
116474: LD_ADDR_VAR 0 8
116478: PUSH
116479: DOUBLE
116480: LD_INT 1
116482: DEC
116483: ST_TO_ADDR
116484: LD_EXP 148
116488: PUSH
116489: FOR_TO
116490: IFFALSE 116526
// begin if flags [ i ] then
116492: LD_VAR 0 4
116496: PUSH
116497: LD_VAR 0 8
116501: ARRAY
116502: IFFALSE 116524
// tmp := tmp & i & ; ;
116504: LD_ADDR_VAR 0 3
116508: PUSH
116509: LD_VAR 0 3
116513: PUSH
116514: LD_VAR 0 8
116518: STR
116519: PUSH
116520: LD_STRING ;
116522: STR
116523: ST_TO_ADDR
// end ;
116524: GO 116489
116526: POP
116527: POP
// for i = 1 to hardcoreCounter do
116528: LD_ADDR_VAR 0 8
116532: PUSH
116533: DOUBLE
116534: LD_INT 1
116536: DEC
116537: ST_TO_ADDR
116538: LD_EXP 149
116542: PUSH
116543: FOR_TO
116544: IFFALSE 116590
// begin if flags [ normalCounter + i ] then
116546: LD_VAR 0 4
116550: PUSH
116551: LD_EXP 148
116555: PUSH
116556: LD_VAR 0 8
116560: PLUS
116561: ARRAY
116562: IFFALSE 116588
// tmp := tmp & ( 100 + i ) & ; ;
116564: LD_ADDR_VAR 0 3
116568: PUSH
116569: LD_VAR 0 3
116573: PUSH
116574: LD_INT 100
116576: PUSH
116577: LD_VAR 0 8
116581: PLUS
116582: STR
116583: PUSH
116584: LD_STRING ;
116586: STR
116587: ST_TO_ADDR
// end ;
116588: GO 116543
116590: POP
116591: POP
// if tmp then
116592: LD_VAR 0 3
116596: IFFALSE 116608
// active := tmp ;
116598: LD_ADDR_VAR 0 7
116602: PUSH
116603: LD_VAR 0 3
116607: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
116608: LD_STRING getStreamItemsFromMission("
116610: PUSH
116611: LD_VAR 0 5
116615: STR
116616: PUSH
116617: LD_STRING ","
116619: STR
116620: PUSH
116621: LD_VAR 0 6
116625: STR
116626: PUSH
116627: LD_STRING ","
116629: STR
116630: PUSH
116631: LD_VAR 0 7
116635: STR
116636: PUSH
116637: LD_STRING ")
116639: STR
116640: PPUSH
116641: CALL_OW 559
// end else
116645: GO 116654
// ToLua ( getStreamItemsFromMission("","","") ) ;
116647: LD_STRING getStreamItemsFromMission("","","")
116649: PPUSH
116650: CALL_OW 559
// end ;
116654: LD_VAR 0 2
116658: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
116659: LD_EXP 147
116663: PUSH
116664: LD_EXP 152
116668: AND
116669: IFFALSE 116793
116671: GO 116673
116673: DISABLE
116674: LD_INT 0
116676: PPUSH
116677: PPUSH
// begin enable ;
116678: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
116679: LD_ADDR_VAR 0 2
116683: PUSH
116684: LD_INT 22
116686: PUSH
116687: LD_OWVAR 2
116691: PUSH
116692: EMPTY
116693: LIST
116694: LIST
116695: PUSH
116696: LD_INT 2
116698: PUSH
116699: LD_INT 34
116701: PUSH
116702: LD_INT 7
116704: PUSH
116705: EMPTY
116706: LIST
116707: LIST
116708: PUSH
116709: LD_INT 34
116711: PUSH
116712: LD_INT 45
116714: PUSH
116715: EMPTY
116716: LIST
116717: LIST
116718: PUSH
116719: LD_INT 34
116721: PUSH
116722: LD_INT 28
116724: PUSH
116725: EMPTY
116726: LIST
116727: LIST
116728: PUSH
116729: LD_INT 34
116731: PUSH
116732: LD_INT 47
116734: PUSH
116735: EMPTY
116736: LIST
116737: LIST
116738: PUSH
116739: EMPTY
116740: LIST
116741: LIST
116742: LIST
116743: LIST
116744: LIST
116745: PUSH
116746: EMPTY
116747: LIST
116748: LIST
116749: PPUSH
116750: CALL_OW 69
116754: ST_TO_ADDR
// if not tmp then
116755: LD_VAR 0 2
116759: NOT
116760: IFFALSE 116764
// exit ;
116762: GO 116793
// for i in tmp do
116764: LD_ADDR_VAR 0 1
116768: PUSH
116769: LD_VAR 0 2
116773: PUSH
116774: FOR_IN
116775: IFFALSE 116791
// begin SetLives ( i , 0 ) ;
116777: LD_VAR 0 1
116781: PPUSH
116782: LD_INT 0
116784: PPUSH
116785: CALL_OW 234
// end ;
116789: GO 116774
116791: POP
116792: POP
// end ;
116793: PPOPN 2
116795: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
116796: LD_EXP 147
116800: PUSH
116801: LD_EXP 153
116805: AND
116806: IFFALSE 116890
116808: GO 116810
116810: DISABLE
116811: LD_INT 0
116813: PPUSH
116814: PPUSH
// begin enable ;
116815: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
116816: LD_ADDR_VAR 0 2
116820: PUSH
116821: LD_INT 22
116823: PUSH
116824: LD_OWVAR 2
116828: PUSH
116829: EMPTY
116830: LIST
116831: LIST
116832: PUSH
116833: LD_INT 32
116835: PUSH
116836: LD_INT 3
116838: PUSH
116839: EMPTY
116840: LIST
116841: LIST
116842: PUSH
116843: EMPTY
116844: LIST
116845: LIST
116846: PPUSH
116847: CALL_OW 69
116851: ST_TO_ADDR
// if not tmp then
116852: LD_VAR 0 2
116856: NOT
116857: IFFALSE 116861
// exit ;
116859: GO 116890
// for i in tmp do
116861: LD_ADDR_VAR 0 1
116865: PUSH
116866: LD_VAR 0 2
116870: PUSH
116871: FOR_IN
116872: IFFALSE 116888
// begin SetLives ( i , 0 ) ;
116874: LD_VAR 0 1
116878: PPUSH
116879: LD_INT 0
116881: PPUSH
116882: CALL_OW 234
// end ;
116886: GO 116871
116888: POP
116889: POP
// end ;
116890: PPOPN 2
116892: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
116893: LD_EXP 147
116897: PUSH
116898: LD_EXP 150
116902: AND
116903: IFFALSE 116996
116905: GO 116907
116907: DISABLE
116908: LD_INT 0
116910: PPUSH
// begin enable ;
116911: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
116912: LD_ADDR_VAR 0 1
116916: PUSH
116917: LD_INT 22
116919: PUSH
116920: LD_OWVAR 2
116924: PUSH
116925: EMPTY
116926: LIST
116927: LIST
116928: PUSH
116929: LD_INT 2
116931: PUSH
116932: LD_INT 25
116934: PUSH
116935: LD_INT 5
116937: PUSH
116938: EMPTY
116939: LIST
116940: LIST
116941: PUSH
116942: LD_INT 25
116944: PUSH
116945: LD_INT 9
116947: PUSH
116948: EMPTY
116949: LIST
116950: LIST
116951: PUSH
116952: LD_INT 25
116954: PUSH
116955: LD_INT 8
116957: PUSH
116958: EMPTY
116959: LIST
116960: LIST
116961: PUSH
116962: EMPTY
116963: LIST
116964: LIST
116965: LIST
116966: LIST
116967: PUSH
116968: EMPTY
116969: LIST
116970: LIST
116971: PPUSH
116972: CALL_OW 69
116976: PUSH
116977: FOR_IN
116978: IFFALSE 116994
// begin SetClass ( i , 1 ) ;
116980: LD_VAR 0 1
116984: PPUSH
116985: LD_INT 1
116987: PPUSH
116988: CALL_OW 336
// end ;
116992: GO 116977
116994: POP
116995: POP
// end ;
116996: PPOPN 1
116998: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
116999: LD_EXP 147
117003: PUSH
117004: LD_EXP 151
117008: AND
117009: PUSH
117010: LD_OWVAR 65
117014: PUSH
117015: LD_INT 7
117017: LESS
117018: AND
117019: IFFALSE 117033
117021: GO 117023
117023: DISABLE
// begin enable ;
117024: ENABLE
// game_speed := 7 ;
117025: LD_ADDR_OWVAR 65
117029: PUSH
117030: LD_INT 7
117032: ST_TO_ADDR
// end ;
117033: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
117034: LD_EXP 147
117038: PUSH
117039: LD_EXP 154
117043: AND
117044: IFFALSE 117246
117046: GO 117048
117048: DISABLE
117049: LD_INT 0
117051: PPUSH
117052: PPUSH
117053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
117054: LD_ADDR_VAR 0 3
117058: PUSH
117059: LD_INT 81
117061: PUSH
117062: LD_OWVAR 2
117066: PUSH
117067: EMPTY
117068: LIST
117069: LIST
117070: PUSH
117071: LD_INT 21
117073: PUSH
117074: LD_INT 1
117076: PUSH
117077: EMPTY
117078: LIST
117079: LIST
117080: PUSH
117081: EMPTY
117082: LIST
117083: LIST
117084: PPUSH
117085: CALL_OW 69
117089: ST_TO_ADDR
// if not tmp then
117090: LD_VAR 0 3
117094: NOT
117095: IFFALSE 117099
// exit ;
117097: GO 117246
// if tmp > 5 then
117099: LD_VAR 0 3
117103: PUSH
117104: LD_INT 5
117106: GREATER
117107: IFFALSE 117119
// k := 5 else
117109: LD_ADDR_VAR 0 2
117113: PUSH
117114: LD_INT 5
117116: ST_TO_ADDR
117117: GO 117129
// k := tmp ;
117119: LD_ADDR_VAR 0 2
117123: PUSH
117124: LD_VAR 0 3
117128: ST_TO_ADDR
// for i := 1 to k do
117129: LD_ADDR_VAR 0 1
117133: PUSH
117134: DOUBLE
117135: LD_INT 1
117137: DEC
117138: ST_TO_ADDR
117139: LD_VAR 0 2
117143: PUSH
117144: FOR_TO
117145: IFFALSE 117244
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
117147: LD_VAR 0 3
117151: PUSH
117152: LD_VAR 0 1
117156: ARRAY
117157: PPUSH
117158: LD_VAR 0 1
117162: PUSH
117163: LD_INT 4
117165: MOD
117166: PUSH
117167: LD_INT 1
117169: PLUS
117170: PPUSH
117171: CALL_OW 259
117175: PUSH
117176: LD_INT 10
117178: LESS
117179: IFFALSE 117242
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
117181: LD_VAR 0 3
117185: PUSH
117186: LD_VAR 0 1
117190: ARRAY
117191: PPUSH
117192: LD_VAR 0 1
117196: PUSH
117197: LD_INT 4
117199: MOD
117200: PUSH
117201: LD_INT 1
117203: PLUS
117204: PPUSH
117205: LD_VAR 0 3
117209: PUSH
117210: LD_VAR 0 1
117214: ARRAY
117215: PPUSH
117216: LD_VAR 0 1
117220: PUSH
117221: LD_INT 4
117223: MOD
117224: PUSH
117225: LD_INT 1
117227: PLUS
117228: PPUSH
117229: CALL_OW 259
117233: PUSH
117234: LD_INT 1
117236: PLUS
117237: PPUSH
117238: CALL_OW 237
117242: GO 117144
117244: POP
117245: POP
// end ;
117246: PPOPN 3
117248: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
117249: LD_EXP 147
117253: PUSH
117254: LD_EXP 155
117258: AND
117259: IFFALSE 117279
117261: GO 117263
117263: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
117264: LD_INT 4
117266: PPUSH
117267: LD_OWVAR 2
117271: PPUSH
117272: LD_INT 0
117274: PPUSH
117275: CALL_OW 324
117279: END
// every 0 0$1 trigger StreamModeActive and sShovel do
117280: LD_EXP 147
117284: PUSH
117285: LD_EXP 184
117289: AND
117290: IFFALSE 117310
117292: GO 117294
117294: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
117295: LD_INT 19
117297: PPUSH
117298: LD_OWVAR 2
117302: PPUSH
117303: LD_INT 0
117305: PPUSH
117306: CALL_OW 324
117310: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
117311: LD_EXP 147
117315: PUSH
117316: LD_EXP 156
117320: AND
117321: IFFALSE 117423
117323: GO 117325
117325: DISABLE
117326: LD_INT 0
117328: PPUSH
117329: PPUSH
// begin enable ;
117330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
117331: LD_ADDR_VAR 0 2
117335: PUSH
117336: LD_INT 22
117338: PUSH
117339: LD_OWVAR 2
117343: PUSH
117344: EMPTY
117345: LIST
117346: LIST
117347: PUSH
117348: LD_INT 2
117350: PUSH
117351: LD_INT 34
117353: PUSH
117354: LD_INT 11
117356: PUSH
117357: EMPTY
117358: LIST
117359: LIST
117360: PUSH
117361: LD_INT 34
117363: PUSH
117364: LD_INT 30
117366: PUSH
117367: EMPTY
117368: LIST
117369: LIST
117370: PUSH
117371: EMPTY
117372: LIST
117373: LIST
117374: LIST
117375: PUSH
117376: EMPTY
117377: LIST
117378: LIST
117379: PPUSH
117380: CALL_OW 69
117384: ST_TO_ADDR
// if not tmp then
117385: LD_VAR 0 2
117389: NOT
117390: IFFALSE 117394
// exit ;
117392: GO 117423
// for i in tmp do
117394: LD_ADDR_VAR 0 1
117398: PUSH
117399: LD_VAR 0 2
117403: PUSH
117404: FOR_IN
117405: IFFALSE 117421
// begin SetLives ( i , 0 ) ;
117407: LD_VAR 0 1
117411: PPUSH
117412: LD_INT 0
117414: PPUSH
117415: CALL_OW 234
// end ;
117419: GO 117404
117421: POP
117422: POP
// end ;
117423: PPOPN 2
117425: END
// every 0 0$1 trigger StreamModeActive and sBunker do
117426: LD_EXP 147
117430: PUSH
117431: LD_EXP 157
117435: AND
117436: IFFALSE 117456
117438: GO 117440
117440: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
117441: LD_INT 32
117443: PPUSH
117444: LD_OWVAR 2
117448: PPUSH
117449: LD_INT 0
117451: PPUSH
117452: CALL_OW 324
117456: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
117457: LD_EXP 147
117461: PUSH
117462: LD_EXP 158
117466: AND
117467: IFFALSE 117648
117469: GO 117471
117471: DISABLE
117472: LD_INT 0
117474: PPUSH
117475: PPUSH
117476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
117477: LD_ADDR_VAR 0 2
117481: PUSH
117482: LD_INT 22
117484: PUSH
117485: LD_OWVAR 2
117489: PUSH
117490: EMPTY
117491: LIST
117492: LIST
117493: PUSH
117494: LD_INT 33
117496: PUSH
117497: LD_INT 3
117499: PUSH
117500: EMPTY
117501: LIST
117502: LIST
117503: PUSH
117504: EMPTY
117505: LIST
117506: LIST
117507: PPUSH
117508: CALL_OW 69
117512: ST_TO_ADDR
// if not tmp then
117513: LD_VAR 0 2
117517: NOT
117518: IFFALSE 117522
// exit ;
117520: GO 117648
// side := 0 ;
117522: LD_ADDR_VAR 0 3
117526: PUSH
117527: LD_INT 0
117529: ST_TO_ADDR
// for i := 1 to 8 do
117530: LD_ADDR_VAR 0 1
117534: PUSH
117535: DOUBLE
117536: LD_INT 1
117538: DEC
117539: ST_TO_ADDR
117540: LD_INT 8
117542: PUSH
117543: FOR_TO
117544: IFFALSE 117592
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
117546: LD_OWVAR 2
117550: PUSH
117551: LD_VAR 0 1
117555: NONEQUAL
117556: PUSH
117557: LD_OWVAR 2
117561: PPUSH
117562: LD_VAR 0 1
117566: PPUSH
117567: CALL_OW 81
117571: PUSH
117572: LD_INT 2
117574: EQUAL
117575: AND
117576: IFFALSE 117590
// begin side := i ;
117578: LD_ADDR_VAR 0 3
117582: PUSH
117583: LD_VAR 0 1
117587: ST_TO_ADDR
// break ;
117588: GO 117592
// end ;
117590: GO 117543
117592: POP
117593: POP
// if not side then
117594: LD_VAR 0 3
117598: NOT
117599: IFFALSE 117603
// exit ;
117601: GO 117648
// for i := 1 to tmp do
117603: LD_ADDR_VAR 0 1
117607: PUSH
117608: DOUBLE
117609: LD_INT 1
117611: DEC
117612: ST_TO_ADDR
117613: LD_VAR 0 2
117617: PUSH
117618: FOR_TO
117619: IFFALSE 117646
// if Prob ( 60 ) then
117621: LD_INT 60
117623: PPUSH
117624: CALL_OW 13
117628: IFFALSE 117644
// SetSide ( i , side ) ;
117630: LD_VAR 0 1
117634: PPUSH
117635: LD_VAR 0 3
117639: PPUSH
117640: CALL_OW 235
117644: GO 117618
117646: POP
117647: POP
// end ;
117648: PPOPN 3
117650: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
117651: LD_EXP 147
117655: PUSH
117656: LD_EXP 160
117660: AND
117661: IFFALSE 117780
117663: GO 117665
117665: DISABLE
117666: LD_INT 0
117668: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
117669: LD_ADDR_VAR 0 1
117673: PUSH
117674: LD_INT 22
117676: PUSH
117677: LD_OWVAR 2
117681: PUSH
117682: EMPTY
117683: LIST
117684: LIST
117685: PUSH
117686: LD_INT 21
117688: PUSH
117689: LD_INT 1
117691: PUSH
117692: EMPTY
117693: LIST
117694: LIST
117695: PUSH
117696: LD_INT 3
117698: PUSH
117699: LD_INT 23
117701: PUSH
117702: LD_INT 0
117704: PUSH
117705: EMPTY
117706: LIST
117707: LIST
117708: PUSH
117709: EMPTY
117710: LIST
117711: LIST
117712: PUSH
117713: EMPTY
117714: LIST
117715: LIST
117716: LIST
117717: PPUSH
117718: CALL_OW 69
117722: PUSH
117723: FOR_IN
117724: IFFALSE 117778
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
117726: LD_VAR 0 1
117730: PPUSH
117731: CALL_OW 257
117735: PUSH
117736: LD_INT 1
117738: PUSH
117739: LD_INT 2
117741: PUSH
117742: LD_INT 3
117744: PUSH
117745: LD_INT 4
117747: PUSH
117748: EMPTY
117749: LIST
117750: LIST
117751: LIST
117752: LIST
117753: IN
117754: IFFALSE 117776
// SetClass ( un , rand ( 1 , 4 ) ) ;
117756: LD_VAR 0 1
117760: PPUSH
117761: LD_INT 1
117763: PPUSH
117764: LD_INT 4
117766: PPUSH
117767: CALL_OW 12
117771: PPUSH
117772: CALL_OW 336
117776: GO 117723
117778: POP
117779: POP
// end ;
117780: PPOPN 1
117782: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
117783: LD_EXP 147
117787: PUSH
117788: LD_EXP 159
117792: AND
117793: IFFALSE 117872
117795: GO 117797
117797: DISABLE
117798: LD_INT 0
117800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
117801: LD_ADDR_VAR 0 1
117805: PUSH
117806: LD_INT 22
117808: PUSH
117809: LD_OWVAR 2
117813: PUSH
117814: EMPTY
117815: LIST
117816: LIST
117817: PUSH
117818: LD_INT 21
117820: PUSH
117821: LD_INT 3
117823: PUSH
117824: EMPTY
117825: LIST
117826: LIST
117827: PUSH
117828: EMPTY
117829: LIST
117830: LIST
117831: PPUSH
117832: CALL_OW 69
117836: ST_TO_ADDR
// if not tmp then
117837: LD_VAR 0 1
117841: NOT
117842: IFFALSE 117846
// exit ;
117844: GO 117872
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
117846: LD_VAR 0 1
117850: PUSH
117851: LD_INT 1
117853: PPUSH
117854: LD_VAR 0 1
117858: PPUSH
117859: CALL_OW 12
117863: ARRAY
117864: PPUSH
117865: LD_INT 100
117867: PPUSH
117868: CALL_OW 234
// end ;
117872: PPOPN 1
117874: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
117875: LD_EXP 147
117879: PUSH
117880: LD_EXP 161
117884: AND
117885: IFFALSE 117983
117887: GO 117889
117889: DISABLE
117890: LD_INT 0
117892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
117893: LD_ADDR_VAR 0 1
117897: PUSH
117898: LD_INT 22
117900: PUSH
117901: LD_OWVAR 2
117905: PUSH
117906: EMPTY
117907: LIST
117908: LIST
117909: PUSH
117910: LD_INT 21
117912: PUSH
117913: LD_INT 1
117915: PUSH
117916: EMPTY
117917: LIST
117918: LIST
117919: PUSH
117920: EMPTY
117921: LIST
117922: LIST
117923: PPUSH
117924: CALL_OW 69
117928: ST_TO_ADDR
// if not tmp then
117929: LD_VAR 0 1
117933: NOT
117934: IFFALSE 117938
// exit ;
117936: GO 117983
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
117938: LD_VAR 0 1
117942: PUSH
117943: LD_INT 1
117945: PPUSH
117946: LD_VAR 0 1
117950: PPUSH
117951: CALL_OW 12
117955: ARRAY
117956: PPUSH
117957: LD_INT 1
117959: PPUSH
117960: LD_INT 4
117962: PPUSH
117963: CALL_OW 12
117967: PPUSH
117968: LD_INT 3000
117970: PPUSH
117971: LD_INT 9000
117973: PPUSH
117974: CALL_OW 12
117978: PPUSH
117979: CALL_OW 492
// end ;
117983: PPOPN 1
117985: END
// every 0 0$1 trigger StreamModeActive and sDepot do
117986: LD_EXP 147
117990: PUSH
117991: LD_EXP 162
117995: AND
117996: IFFALSE 118016
117998: GO 118000
118000: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
118001: LD_INT 1
118003: PPUSH
118004: LD_OWVAR 2
118008: PPUSH
118009: LD_INT 0
118011: PPUSH
118012: CALL_OW 324
118016: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
118017: LD_EXP 147
118021: PUSH
118022: LD_EXP 163
118026: AND
118027: IFFALSE 118110
118029: GO 118031
118031: DISABLE
118032: LD_INT 0
118034: PPUSH
118035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
118036: LD_ADDR_VAR 0 2
118040: PUSH
118041: LD_INT 22
118043: PUSH
118044: LD_OWVAR 2
118048: PUSH
118049: EMPTY
118050: LIST
118051: LIST
118052: PUSH
118053: LD_INT 21
118055: PUSH
118056: LD_INT 3
118058: PUSH
118059: EMPTY
118060: LIST
118061: LIST
118062: PUSH
118063: EMPTY
118064: LIST
118065: LIST
118066: PPUSH
118067: CALL_OW 69
118071: ST_TO_ADDR
// if not tmp then
118072: LD_VAR 0 2
118076: NOT
118077: IFFALSE 118081
// exit ;
118079: GO 118110
// for i in tmp do
118081: LD_ADDR_VAR 0 1
118085: PUSH
118086: LD_VAR 0 2
118090: PUSH
118091: FOR_IN
118092: IFFALSE 118108
// SetBLevel ( i , 10 ) ;
118094: LD_VAR 0 1
118098: PPUSH
118099: LD_INT 10
118101: PPUSH
118102: CALL_OW 241
118106: GO 118091
118108: POP
118109: POP
// end ;
118110: PPOPN 2
118112: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
118113: LD_EXP 147
118117: PUSH
118118: LD_EXP 164
118122: AND
118123: IFFALSE 118234
118125: GO 118127
118127: DISABLE
118128: LD_INT 0
118130: PPUSH
118131: PPUSH
118132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
118133: LD_ADDR_VAR 0 3
118137: PUSH
118138: LD_INT 22
118140: PUSH
118141: LD_OWVAR 2
118145: PUSH
118146: EMPTY
118147: LIST
118148: LIST
118149: PUSH
118150: LD_INT 25
118152: PUSH
118153: LD_INT 1
118155: PUSH
118156: EMPTY
118157: LIST
118158: LIST
118159: PUSH
118160: EMPTY
118161: LIST
118162: LIST
118163: PPUSH
118164: CALL_OW 69
118168: ST_TO_ADDR
// if not tmp then
118169: LD_VAR 0 3
118173: NOT
118174: IFFALSE 118178
// exit ;
118176: GO 118234
// un := tmp [ rand ( 1 , tmp ) ] ;
118178: LD_ADDR_VAR 0 2
118182: PUSH
118183: LD_VAR 0 3
118187: PUSH
118188: LD_INT 1
118190: PPUSH
118191: LD_VAR 0 3
118195: PPUSH
118196: CALL_OW 12
118200: ARRAY
118201: ST_TO_ADDR
// if Crawls ( un ) then
118202: LD_VAR 0 2
118206: PPUSH
118207: CALL_OW 318
118211: IFFALSE 118222
// ComWalk ( un ) ;
118213: LD_VAR 0 2
118217: PPUSH
118218: CALL_OW 138
// SetClass ( un , class_sniper ) ;
118222: LD_VAR 0 2
118226: PPUSH
118227: LD_INT 5
118229: PPUSH
118230: CALL_OW 336
// end ;
118234: PPOPN 3
118236: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
118237: LD_EXP 147
118241: PUSH
118242: LD_EXP 165
118246: AND
118247: PUSH
118248: LD_OWVAR 67
118252: PUSH
118253: LD_INT 4
118255: LESS
118256: AND
118257: IFFALSE 118276
118259: GO 118261
118261: DISABLE
// begin Difficulty := Difficulty + 1 ;
118262: LD_ADDR_OWVAR 67
118266: PUSH
118267: LD_OWVAR 67
118271: PUSH
118272: LD_INT 1
118274: PLUS
118275: ST_TO_ADDR
// end ;
118276: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
118277: LD_EXP 147
118281: PUSH
118282: LD_EXP 166
118286: AND
118287: IFFALSE 118390
118289: GO 118291
118291: DISABLE
118292: LD_INT 0
118294: PPUSH
// begin for i := 1 to 5 do
118295: LD_ADDR_VAR 0 1
118299: PUSH
118300: DOUBLE
118301: LD_INT 1
118303: DEC
118304: ST_TO_ADDR
118305: LD_INT 5
118307: PUSH
118308: FOR_TO
118309: IFFALSE 118388
// begin uc_nation := nation_nature ;
118311: LD_ADDR_OWVAR 21
118315: PUSH
118316: LD_INT 0
118318: ST_TO_ADDR
// uc_side := 0 ;
118319: LD_ADDR_OWVAR 20
118323: PUSH
118324: LD_INT 0
118326: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
118327: LD_ADDR_OWVAR 29
118331: PUSH
118332: LD_INT 12
118334: PUSH
118335: LD_INT 12
118337: PUSH
118338: EMPTY
118339: LIST
118340: LIST
118341: ST_TO_ADDR
// hc_agressivity := 20 ;
118342: LD_ADDR_OWVAR 35
118346: PUSH
118347: LD_INT 20
118349: ST_TO_ADDR
// hc_class := class_tiger ;
118350: LD_ADDR_OWVAR 28
118354: PUSH
118355: LD_INT 14
118357: ST_TO_ADDR
// hc_gallery :=  ;
118358: LD_ADDR_OWVAR 33
118362: PUSH
118363: LD_STRING 
118365: ST_TO_ADDR
// hc_name :=  ;
118366: LD_ADDR_OWVAR 26
118370: PUSH
118371: LD_STRING 
118373: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
118374: CALL_OW 44
118378: PPUSH
118379: LD_INT 0
118381: PPUSH
118382: CALL_OW 51
// end ;
118386: GO 118308
118388: POP
118389: POP
// end ;
118390: PPOPN 1
118392: END
// every 0 0$1 trigger StreamModeActive and sBomb do
118393: LD_EXP 147
118397: PUSH
118398: LD_EXP 167
118402: AND
118403: IFFALSE 118412
118405: GO 118407
118407: DISABLE
// StreamSibBomb ;
118408: CALL 118413 0 0
118412: END
// export function StreamSibBomb ; var i , x , y ; begin
118413: LD_INT 0
118415: PPUSH
118416: PPUSH
118417: PPUSH
118418: PPUSH
// result := false ;
118419: LD_ADDR_VAR 0 1
118423: PUSH
118424: LD_INT 0
118426: ST_TO_ADDR
// for i := 1 to 16 do
118427: LD_ADDR_VAR 0 2
118431: PUSH
118432: DOUBLE
118433: LD_INT 1
118435: DEC
118436: ST_TO_ADDR
118437: LD_INT 16
118439: PUSH
118440: FOR_TO
118441: IFFALSE 118640
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
118443: LD_ADDR_VAR 0 3
118447: PUSH
118448: LD_INT 10
118450: PUSH
118451: LD_INT 20
118453: PUSH
118454: LD_INT 30
118456: PUSH
118457: LD_INT 40
118459: PUSH
118460: LD_INT 50
118462: PUSH
118463: LD_INT 60
118465: PUSH
118466: LD_INT 70
118468: PUSH
118469: LD_INT 80
118471: PUSH
118472: LD_INT 90
118474: PUSH
118475: LD_INT 100
118477: PUSH
118478: LD_INT 110
118480: PUSH
118481: LD_INT 120
118483: PUSH
118484: LD_INT 130
118486: PUSH
118487: LD_INT 140
118489: PUSH
118490: LD_INT 150
118492: PUSH
118493: EMPTY
118494: LIST
118495: LIST
118496: LIST
118497: LIST
118498: LIST
118499: LIST
118500: LIST
118501: LIST
118502: LIST
118503: LIST
118504: LIST
118505: LIST
118506: LIST
118507: LIST
118508: LIST
118509: PUSH
118510: LD_INT 1
118512: PPUSH
118513: LD_INT 15
118515: PPUSH
118516: CALL_OW 12
118520: ARRAY
118521: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
118522: LD_ADDR_VAR 0 4
118526: PUSH
118527: LD_INT 10
118529: PUSH
118530: LD_INT 20
118532: PUSH
118533: LD_INT 30
118535: PUSH
118536: LD_INT 40
118538: PUSH
118539: LD_INT 50
118541: PUSH
118542: LD_INT 60
118544: PUSH
118545: LD_INT 70
118547: PUSH
118548: LD_INT 80
118550: PUSH
118551: LD_INT 90
118553: PUSH
118554: LD_INT 100
118556: PUSH
118557: LD_INT 110
118559: PUSH
118560: LD_INT 120
118562: PUSH
118563: LD_INT 130
118565: PUSH
118566: LD_INT 140
118568: PUSH
118569: LD_INT 150
118571: PUSH
118572: EMPTY
118573: LIST
118574: LIST
118575: LIST
118576: LIST
118577: LIST
118578: LIST
118579: LIST
118580: LIST
118581: LIST
118582: LIST
118583: LIST
118584: LIST
118585: LIST
118586: LIST
118587: LIST
118588: PUSH
118589: LD_INT 1
118591: PPUSH
118592: LD_INT 15
118594: PPUSH
118595: CALL_OW 12
118599: ARRAY
118600: ST_TO_ADDR
// if ValidHex ( x , y ) then
118601: LD_VAR 0 3
118605: PPUSH
118606: LD_VAR 0 4
118610: PPUSH
118611: CALL_OW 488
118615: IFFALSE 118638
// begin result := [ x , y ] ;
118617: LD_ADDR_VAR 0 1
118621: PUSH
118622: LD_VAR 0 3
118626: PUSH
118627: LD_VAR 0 4
118631: PUSH
118632: EMPTY
118633: LIST
118634: LIST
118635: ST_TO_ADDR
// break ;
118636: GO 118640
// end ; end ;
118638: GO 118440
118640: POP
118641: POP
// if result then
118642: LD_VAR 0 1
118646: IFFALSE 118706
// begin ToLua ( playSibBomb() ) ;
118648: LD_STRING playSibBomb()
118650: PPUSH
118651: CALL_OW 559
// wait ( 0 0$14 ) ;
118655: LD_INT 490
118657: PPUSH
118658: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
118662: LD_VAR 0 1
118666: PUSH
118667: LD_INT 1
118669: ARRAY
118670: PPUSH
118671: LD_VAR 0 1
118675: PUSH
118676: LD_INT 2
118678: ARRAY
118679: PPUSH
118680: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
118684: LD_VAR 0 1
118688: PUSH
118689: LD_INT 1
118691: ARRAY
118692: PPUSH
118693: LD_VAR 0 1
118697: PUSH
118698: LD_INT 2
118700: ARRAY
118701: PPUSH
118702: CALL_OW 429
// end ; end ;
118706: LD_VAR 0 1
118710: RET
// every 0 0$1 trigger StreamModeActive and sReset do
118711: LD_EXP 147
118715: PUSH
118716: LD_EXP 169
118720: AND
118721: IFFALSE 118733
118723: GO 118725
118725: DISABLE
// YouLost (  ) ;
118726: LD_STRING 
118728: PPUSH
118729: CALL_OW 104
118733: END
// every 0 0$1 trigger StreamModeActive and sFog do
118734: LD_EXP 147
118738: PUSH
118739: LD_EXP 168
118743: AND
118744: IFFALSE 118758
118746: GO 118748
118748: DISABLE
// FogOff ( your_side ) ;
118749: LD_OWVAR 2
118753: PPUSH
118754: CALL_OW 344
118758: END
// every 0 0$1 trigger StreamModeActive and sSun do
118759: LD_EXP 147
118763: PUSH
118764: LD_EXP 170
118768: AND
118769: IFFALSE 118797
118771: GO 118773
118773: DISABLE
// begin solar_recharge_percent := 0 ;
118774: LD_ADDR_OWVAR 79
118778: PUSH
118779: LD_INT 0
118781: ST_TO_ADDR
// wait ( 5 5$00 ) ;
118782: LD_INT 10500
118784: PPUSH
118785: CALL_OW 67
// solar_recharge_percent := 100 ;
118789: LD_ADDR_OWVAR 79
118793: PUSH
118794: LD_INT 100
118796: ST_TO_ADDR
// end ;
118797: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
118798: LD_EXP 147
118802: PUSH
118803: LD_EXP 171
118807: AND
118808: IFFALSE 119047
118810: GO 118812
118812: DISABLE
118813: LD_INT 0
118815: PPUSH
118816: PPUSH
118817: PPUSH
// begin tmp := [ ] ;
118818: LD_ADDR_VAR 0 3
118822: PUSH
118823: EMPTY
118824: ST_TO_ADDR
// for i := 1 to 6 do
118825: LD_ADDR_VAR 0 1
118829: PUSH
118830: DOUBLE
118831: LD_INT 1
118833: DEC
118834: ST_TO_ADDR
118835: LD_INT 6
118837: PUSH
118838: FOR_TO
118839: IFFALSE 118944
// begin uc_nation := nation_nature ;
118841: LD_ADDR_OWVAR 21
118845: PUSH
118846: LD_INT 0
118848: ST_TO_ADDR
// uc_side := 0 ;
118849: LD_ADDR_OWVAR 20
118853: PUSH
118854: LD_INT 0
118856: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
118857: LD_ADDR_OWVAR 29
118861: PUSH
118862: LD_INT 12
118864: PUSH
118865: LD_INT 12
118867: PUSH
118868: EMPTY
118869: LIST
118870: LIST
118871: ST_TO_ADDR
// hc_agressivity := 20 ;
118872: LD_ADDR_OWVAR 35
118876: PUSH
118877: LD_INT 20
118879: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
118880: LD_ADDR_OWVAR 28
118884: PUSH
118885: LD_INT 17
118887: ST_TO_ADDR
// hc_gallery :=  ;
118888: LD_ADDR_OWVAR 33
118892: PUSH
118893: LD_STRING 
118895: ST_TO_ADDR
// hc_name :=  ;
118896: LD_ADDR_OWVAR 26
118900: PUSH
118901: LD_STRING 
118903: ST_TO_ADDR
// un := CreateHuman ;
118904: LD_ADDR_VAR 0 2
118908: PUSH
118909: CALL_OW 44
118913: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
118914: LD_VAR 0 2
118918: PPUSH
118919: LD_INT 1
118921: PPUSH
118922: CALL_OW 51
// tmp := tmp ^ un ;
118926: LD_ADDR_VAR 0 3
118930: PUSH
118931: LD_VAR 0 3
118935: PUSH
118936: LD_VAR 0 2
118940: ADD
118941: ST_TO_ADDR
// end ;
118942: GO 118838
118944: POP
118945: POP
// repeat wait ( 0 0$1 ) ;
118946: LD_INT 35
118948: PPUSH
118949: CALL_OW 67
// for un in tmp do
118953: LD_ADDR_VAR 0 2
118957: PUSH
118958: LD_VAR 0 3
118962: PUSH
118963: FOR_IN
118964: IFFALSE 119038
// begin if IsDead ( un ) then
118966: LD_VAR 0 2
118970: PPUSH
118971: CALL_OW 301
118975: IFFALSE 118995
// begin tmp := tmp diff un ;
118977: LD_ADDR_VAR 0 3
118981: PUSH
118982: LD_VAR 0 3
118986: PUSH
118987: LD_VAR 0 2
118991: DIFF
118992: ST_TO_ADDR
// continue ;
118993: GO 118963
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
118995: LD_VAR 0 2
118999: PPUSH
119000: LD_INT 3
119002: PUSH
119003: LD_INT 22
119005: PUSH
119006: LD_INT 0
119008: PUSH
119009: EMPTY
119010: LIST
119011: LIST
119012: PUSH
119013: EMPTY
119014: LIST
119015: LIST
119016: PPUSH
119017: CALL_OW 69
119021: PPUSH
119022: LD_VAR 0 2
119026: PPUSH
119027: CALL_OW 74
119031: PPUSH
119032: CALL_OW 115
// end ;
119036: GO 118963
119038: POP
119039: POP
// until not tmp ;
119040: LD_VAR 0 3
119044: NOT
119045: IFFALSE 118946
// end ;
119047: PPOPN 3
119049: END
// every 0 0$1 trigger StreamModeActive and sTroll do
119050: LD_EXP 147
119054: PUSH
119055: LD_EXP 172
119059: AND
119060: IFFALSE 119114
119062: GO 119064
119064: DISABLE
// begin ToLua ( displayTroll(); ) ;
119065: LD_STRING displayTroll();
119067: PPUSH
119068: CALL_OW 559
// wait ( 3 3$00 ) ;
119072: LD_INT 6300
119074: PPUSH
119075: CALL_OW 67
// ToLua ( hideTroll(); ) ;
119079: LD_STRING hideTroll();
119081: PPUSH
119082: CALL_OW 559
// wait ( 1 1$00 ) ;
119086: LD_INT 2100
119088: PPUSH
119089: CALL_OW 67
// ToLua ( displayTroll(); ) ;
119093: LD_STRING displayTroll();
119095: PPUSH
119096: CALL_OW 559
// wait ( 1 1$00 ) ;
119100: LD_INT 2100
119102: PPUSH
119103: CALL_OW 67
// ToLua ( hideTroll(); ) ;
119107: LD_STRING hideTroll();
119109: PPUSH
119110: CALL_OW 559
// end ;
119114: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
119115: LD_EXP 147
119119: PUSH
119120: LD_EXP 173
119124: AND
119125: IFFALSE 119188
119127: GO 119129
119129: DISABLE
119130: LD_INT 0
119132: PPUSH
// begin p := 0 ;
119133: LD_ADDR_VAR 0 1
119137: PUSH
119138: LD_INT 0
119140: ST_TO_ADDR
// repeat game_speed := 1 ;
119141: LD_ADDR_OWVAR 65
119145: PUSH
119146: LD_INT 1
119148: ST_TO_ADDR
// wait ( 0 0$1 ) ;
119149: LD_INT 35
119151: PPUSH
119152: CALL_OW 67
// p := p + 1 ;
119156: LD_ADDR_VAR 0 1
119160: PUSH
119161: LD_VAR 0 1
119165: PUSH
119166: LD_INT 1
119168: PLUS
119169: ST_TO_ADDR
// until p >= 60 ;
119170: LD_VAR 0 1
119174: PUSH
119175: LD_INT 60
119177: GREATEREQUAL
119178: IFFALSE 119141
// game_speed := 4 ;
119180: LD_ADDR_OWVAR 65
119184: PUSH
119185: LD_INT 4
119187: ST_TO_ADDR
// end ;
119188: PPOPN 1
119190: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
119191: LD_EXP 147
119195: PUSH
119196: LD_EXP 174
119200: AND
119201: IFFALSE 119347
119203: GO 119205
119205: DISABLE
119206: LD_INT 0
119208: PPUSH
119209: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
119210: LD_ADDR_VAR 0 1
119214: PUSH
119215: LD_INT 22
119217: PUSH
119218: LD_OWVAR 2
119222: PUSH
119223: EMPTY
119224: LIST
119225: LIST
119226: PUSH
119227: LD_INT 2
119229: PUSH
119230: LD_INT 30
119232: PUSH
119233: LD_INT 0
119235: PUSH
119236: EMPTY
119237: LIST
119238: LIST
119239: PUSH
119240: LD_INT 30
119242: PUSH
119243: LD_INT 1
119245: PUSH
119246: EMPTY
119247: LIST
119248: LIST
119249: PUSH
119250: EMPTY
119251: LIST
119252: LIST
119253: LIST
119254: PUSH
119255: EMPTY
119256: LIST
119257: LIST
119258: PPUSH
119259: CALL_OW 69
119263: ST_TO_ADDR
// if not depot then
119264: LD_VAR 0 1
119268: NOT
119269: IFFALSE 119273
// exit ;
119271: GO 119347
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
119273: LD_ADDR_VAR 0 2
119277: PUSH
119278: LD_VAR 0 1
119282: PUSH
119283: LD_INT 1
119285: PPUSH
119286: LD_VAR 0 1
119290: PPUSH
119291: CALL_OW 12
119295: ARRAY
119296: PPUSH
119297: CALL_OW 274
119301: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
119302: LD_VAR 0 2
119306: PPUSH
119307: LD_INT 1
119309: PPUSH
119310: LD_INT 0
119312: PPUSH
119313: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
119317: LD_VAR 0 2
119321: PPUSH
119322: LD_INT 2
119324: PPUSH
119325: LD_INT 0
119327: PPUSH
119328: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
119332: LD_VAR 0 2
119336: PPUSH
119337: LD_INT 3
119339: PPUSH
119340: LD_INT 0
119342: PPUSH
119343: CALL_OW 277
// end ;
119347: PPOPN 2
119349: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
119350: LD_EXP 147
119354: PUSH
119355: LD_EXP 175
119359: AND
119360: IFFALSE 119457
119362: GO 119364
119364: DISABLE
119365: LD_INT 0
119367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
119368: LD_ADDR_VAR 0 1
119372: PUSH
119373: LD_INT 22
119375: PUSH
119376: LD_OWVAR 2
119380: PUSH
119381: EMPTY
119382: LIST
119383: LIST
119384: PUSH
119385: LD_INT 21
119387: PUSH
119388: LD_INT 1
119390: PUSH
119391: EMPTY
119392: LIST
119393: LIST
119394: PUSH
119395: LD_INT 3
119397: PUSH
119398: LD_INT 23
119400: PUSH
119401: LD_INT 0
119403: PUSH
119404: EMPTY
119405: LIST
119406: LIST
119407: PUSH
119408: EMPTY
119409: LIST
119410: LIST
119411: PUSH
119412: EMPTY
119413: LIST
119414: LIST
119415: LIST
119416: PPUSH
119417: CALL_OW 69
119421: ST_TO_ADDR
// if not tmp then
119422: LD_VAR 0 1
119426: NOT
119427: IFFALSE 119431
// exit ;
119429: GO 119457
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
119431: LD_VAR 0 1
119435: PUSH
119436: LD_INT 1
119438: PPUSH
119439: LD_VAR 0 1
119443: PPUSH
119444: CALL_OW 12
119448: ARRAY
119449: PPUSH
119450: LD_INT 200
119452: PPUSH
119453: CALL_OW 234
// end ;
119457: PPOPN 1
119459: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
119460: LD_EXP 147
119464: PUSH
119465: LD_EXP 176
119469: AND
119470: IFFALSE 119549
119472: GO 119474
119474: DISABLE
119475: LD_INT 0
119477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
119478: LD_ADDR_VAR 0 1
119482: PUSH
119483: LD_INT 22
119485: PUSH
119486: LD_OWVAR 2
119490: PUSH
119491: EMPTY
119492: LIST
119493: LIST
119494: PUSH
119495: LD_INT 21
119497: PUSH
119498: LD_INT 2
119500: PUSH
119501: EMPTY
119502: LIST
119503: LIST
119504: PUSH
119505: EMPTY
119506: LIST
119507: LIST
119508: PPUSH
119509: CALL_OW 69
119513: ST_TO_ADDR
// if not tmp then
119514: LD_VAR 0 1
119518: NOT
119519: IFFALSE 119523
// exit ;
119521: GO 119549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
119523: LD_VAR 0 1
119527: PUSH
119528: LD_INT 1
119530: PPUSH
119531: LD_VAR 0 1
119535: PPUSH
119536: CALL_OW 12
119540: ARRAY
119541: PPUSH
119542: LD_INT 60
119544: PPUSH
119545: CALL_OW 234
// end ;
119549: PPOPN 1
119551: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
119552: LD_EXP 147
119556: PUSH
119557: LD_EXP 177
119561: AND
119562: IFFALSE 119661
119564: GO 119566
119566: DISABLE
119567: LD_INT 0
119569: PPUSH
119570: PPUSH
// begin enable ;
119571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
119572: LD_ADDR_VAR 0 1
119576: PUSH
119577: LD_INT 22
119579: PUSH
119580: LD_OWVAR 2
119584: PUSH
119585: EMPTY
119586: LIST
119587: LIST
119588: PUSH
119589: LD_INT 61
119591: PUSH
119592: EMPTY
119593: LIST
119594: PUSH
119595: LD_INT 33
119597: PUSH
119598: LD_INT 2
119600: PUSH
119601: EMPTY
119602: LIST
119603: LIST
119604: PUSH
119605: EMPTY
119606: LIST
119607: LIST
119608: LIST
119609: PPUSH
119610: CALL_OW 69
119614: ST_TO_ADDR
// if not tmp then
119615: LD_VAR 0 1
119619: NOT
119620: IFFALSE 119624
// exit ;
119622: GO 119661
// for i in tmp do
119624: LD_ADDR_VAR 0 2
119628: PUSH
119629: LD_VAR 0 1
119633: PUSH
119634: FOR_IN
119635: IFFALSE 119659
// if IsControledBy ( i ) then
119637: LD_VAR 0 2
119641: PPUSH
119642: CALL_OW 312
119646: IFFALSE 119657
// ComUnlink ( i ) ;
119648: LD_VAR 0 2
119652: PPUSH
119653: CALL_OW 136
119657: GO 119634
119659: POP
119660: POP
// end ;
119661: PPOPN 2
119663: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
119664: LD_EXP 147
119668: PUSH
119669: LD_EXP 178
119673: AND
119674: IFFALSE 119814
119676: GO 119678
119678: DISABLE
119679: LD_INT 0
119681: PPUSH
119682: PPUSH
// begin ToLua ( displayPowell(); ) ;
119683: LD_STRING displayPowell();
119685: PPUSH
119686: CALL_OW 559
// uc_side := 0 ;
119690: LD_ADDR_OWVAR 20
119694: PUSH
119695: LD_INT 0
119697: ST_TO_ADDR
// uc_nation := 2 ;
119698: LD_ADDR_OWVAR 21
119702: PUSH
119703: LD_INT 2
119705: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
119706: LD_ADDR_OWVAR 37
119710: PUSH
119711: LD_INT 14
119713: ST_TO_ADDR
// vc_engine := engine_siberite ;
119714: LD_ADDR_OWVAR 39
119718: PUSH
119719: LD_INT 3
119721: ST_TO_ADDR
// vc_control := control_apeman ;
119722: LD_ADDR_OWVAR 38
119726: PUSH
119727: LD_INT 5
119729: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
119730: LD_ADDR_OWVAR 40
119734: PUSH
119735: LD_INT 29
119737: ST_TO_ADDR
// un := CreateVehicle ;
119738: LD_ADDR_VAR 0 2
119742: PUSH
119743: CALL_OW 45
119747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
119748: LD_VAR 0 2
119752: PPUSH
119753: LD_INT 1
119755: PPUSH
119756: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
119760: LD_INT 35
119762: PPUSH
119763: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
119767: LD_VAR 0 2
119771: PPUSH
119772: LD_INT 22
119774: PUSH
119775: LD_OWVAR 2
119779: PUSH
119780: EMPTY
119781: LIST
119782: LIST
119783: PPUSH
119784: CALL_OW 69
119788: PPUSH
119789: LD_VAR 0 2
119793: PPUSH
119794: CALL_OW 74
119798: PPUSH
119799: CALL_OW 115
// until IsDead ( un ) ;
119803: LD_VAR 0 2
119807: PPUSH
119808: CALL_OW 301
119812: IFFALSE 119760
// end ;
119814: PPOPN 2
119816: END
// every 0 0$1 trigger StreamModeActive and sStu do
119817: LD_EXP 147
119821: PUSH
119822: LD_EXP 186
119826: AND
119827: IFFALSE 119843
119829: GO 119831
119831: DISABLE
// begin ToLua ( displayStucuk(); ) ;
119832: LD_STRING displayStucuk();
119834: PPUSH
119835: CALL_OW 559
// ResetFog ;
119839: CALL_OW 335
// end ;
119843: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
119844: LD_EXP 147
119848: PUSH
119849: LD_EXP 179
119853: AND
119854: IFFALSE 119995
119856: GO 119858
119858: DISABLE
119859: LD_INT 0
119861: PPUSH
119862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
119863: LD_ADDR_VAR 0 2
119867: PUSH
119868: LD_INT 22
119870: PUSH
119871: LD_OWVAR 2
119875: PUSH
119876: EMPTY
119877: LIST
119878: LIST
119879: PUSH
119880: LD_INT 21
119882: PUSH
119883: LD_INT 1
119885: PUSH
119886: EMPTY
119887: LIST
119888: LIST
119889: PUSH
119890: EMPTY
119891: LIST
119892: LIST
119893: PPUSH
119894: CALL_OW 69
119898: ST_TO_ADDR
// if not tmp then
119899: LD_VAR 0 2
119903: NOT
119904: IFFALSE 119908
// exit ;
119906: GO 119995
// un := tmp [ rand ( 1 , tmp ) ] ;
119908: LD_ADDR_VAR 0 1
119912: PUSH
119913: LD_VAR 0 2
119917: PUSH
119918: LD_INT 1
119920: PPUSH
119921: LD_VAR 0 2
119925: PPUSH
119926: CALL_OW 12
119930: ARRAY
119931: ST_TO_ADDR
// SetSide ( un , 0 ) ;
119932: LD_VAR 0 1
119936: PPUSH
119937: LD_INT 0
119939: PPUSH
119940: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
119944: LD_VAR 0 1
119948: PPUSH
119949: LD_OWVAR 3
119953: PUSH
119954: LD_VAR 0 1
119958: DIFF
119959: PPUSH
119960: LD_VAR 0 1
119964: PPUSH
119965: CALL_OW 74
119969: PPUSH
119970: CALL_OW 115
// wait ( 0 0$20 ) ;
119974: LD_INT 700
119976: PPUSH
119977: CALL_OW 67
// SetSide ( un , your_side ) ;
119981: LD_VAR 0 1
119985: PPUSH
119986: LD_OWVAR 2
119990: PPUSH
119991: CALL_OW 235
// end ;
119995: PPOPN 2
119997: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
119998: LD_EXP 147
120002: PUSH
120003: LD_EXP 180
120007: AND
120008: IFFALSE 120114
120010: GO 120012
120012: DISABLE
120013: LD_INT 0
120015: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
120016: LD_ADDR_VAR 0 1
120020: PUSH
120021: LD_INT 22
120023: PUSH
120024: LD_OWVAR 2
120028: PUSH
120029: EMPTY
120030: LIST
120031: LIST
120032: PUSH
120033: LD_INT 2
120035: PUSH
120036: LD_INT 30
120038: PUSH
120039: LD_INT 0
120041: PUSH
120042: EMPTY
120043: LIST
120044: LIST
120045: PUSH
120046: LD_INT 30
120048: PUSH
120049: LD_INT 1
120051: PUSH
120052: EMPTY
120053: LIST
120054: LIST
120055: PUSH
120056: EMPTY
120057: LIST
120058: LIST
120059: LIST
120060: PUSH
120061: EMPTY
120062: LIST
120063: LIST
120064: PPUSH
120065: CALL_OW 69
120069: ST_TO_ADDR
// if not depot then
120070: LD_VAR 0 1
120074: NOT
120075: IFFALSE 120079
// exit ;
120077: GO 120114
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
120079: LD_VAR 0 1
120083: PUSH
120084: LD_INT 1
120086: ARRAY
120087: PPUSH
120088: CALL_OW 250
120092: PPUSH
120093: LD_VAR 0 1
120097: PUSH
120098: LD_INT 1
120100: ARRAY
120101: PPUSH
120102: CALL_OW 251
120106: PPUSH
120107: LD_INT 70
120109: PPUSH
120110: CALL_OW 495
// end ;
120114: PPOPN 1
120116: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
120117: LD_EXP 147
120121: PUSH
120122: LD_EXP 181
120126: AND
120127: IFFALSE 120338
120129: GO 120131
120131: DISABLE
120132: LD_INT 0
120134: PPUSH
120135: PPUSH
120136: PPUSH
120137: PPUSH
120138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
120139: LD_ADDR_VAR 0 5
120143: PUSH
120144: LD_INT 22
120146: PUSH
120147: LD_OWVAR 2
120151: PUSH
120152: EMPTY
120153: LIST
120154: LIST
120155: PUSH
120156: LD_INT 21
120158: PUSH
120159: LD_INT 1
120161: PUSH
120162: EMPTY
120163: LIST
120164: LIST
120165: PUSH
120166: EMPTY
120167: LIST
120168: LIST
120169: PPUSH
120170: CALL_OW 69
120174: ST_TO_ADDR
// if not tmp then
120175: LD_VAR 0 5
120179: NOT
120180: IFFALSE 120184
// exit ;
120182: GO 120338
// for i in tmp do
120184: LD_ADDR_VAR 0 1
120188: PUSH
120189: LD_VAR 0 5
120193: PUSH
120194: FOR_IN
120195: IFFALSE 120336
// begin d := rand ( 0 , 5 ) ;
120197: LD_ADDR_VAR 0 4
120201: PUSH
120202: LD_INT 0
120204: PPUSH
120205: LD_INT 5
120207: PPUSH
120208: CALL_OW 12
120212: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
120213: LD_ADDR_VAR 0 2
120217: PUSH
120218: LD_VAR 0 1
120222: PPUSH
120223: CALL_OW 250
120227: PPUSH
120228: LD_VAR 0 4
120232: PPUSH
120233: LD_INT 3
120235: PPUSH
120236: LD_INT 12
120238: PPUSH
120239: CALL_OW 12
120243: PPUSH
120244: CALL_OW 272
120248: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
120249: LD_ADDR_VAR 0 3
120253: PUSH
120254: LD_VAR 0 1
120258: PPUSH
120259: CALL_OW 251
120263: PPUSH
120264: LD_VAR 0 4
120268: PPUSH
120269: LD_INT 3
120271: PPUSH
120272: LD_INT 12
120274: PPUSH
120275: CALL_OW 12
120279: PPUSH
120280: CALL_OW 273
120284: ST_TO_ADDR
// if ValidHex ( x , y ) then
120285: LD_VAR 0 2
120289: PPUSH
120290: LD_VAR 0 3
120294: PPUSH
120295: CALL_OW 488
120299: IFFALSE 120334
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
120301: LD_VAR 0 1
120305: PPUSH
120306: LD_VAR 0 2
120310: PPUSH
120311: LD_VAR 0 3
120315: PPUSH
120316: LD_INT 3
120318: PPUSH
120319: LD_INT 6
120321: PPUSH
120322: CALL_OW 12
120326: PPUSH
120327: LD_INT 1
120329: PPUSH
120330: CALL_OW 483
// end ;
120334: GO 120194
120336: POP
120337: POP
// end ;
120338: PPOPN 5
120340: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
120341: LD_EXP 147
120345: PUSH
120346: LD_EXP 182
120350: AND
120351: IFFALSE 120445
120353: GO 120355
120355: DISABLE
120356: LD_INT 0
120358: PPUSH
120359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
120360: LD_ADDR_VAR 0 2
120364: PUSH
120365: LD_INT 22
120367: PUSH
120368: LD_OWVAR 2
120372: PUSH
120373: EMPTY
120374: LIST
120375: LIST
120376: PUSH
120377: LD_INT 32
120379: PUSH
120380: LD_INT 1
120382: PUSH
120383: EMPTY
120384: LIST
120385: LIST
120386: PUSH
120387: LD_INT 21
120389: PUSH
120390: LD_INT 2
120392: PUSH
120393: EMPTY
120394: LIST
120395: LIST
120396: PUSH
120397: EMPTY
120398: LIST
120399: LIST
120400: LIST
120401: PPUSH
120402: CALL_OW 69
120406: ST_TO_ADDR
// if not tmp then
120407: LD_VAR 0 2
120411: NOT
120412: IFFALSE 120416
// exit ;
120414: GO 120445
// for i in tmp do
120416: LD_ADDR_VAR 0 1
120420: PUSH
120421: LD_VAR 0 2
120425: PUSH
120426: FOR_IN
120427: IFFALSE 120443
// SetFuel ( i , 0 ) ;
120429: LD_VAR 0 1
120433: PPUSH
120434: LD_INT 0
120436: PPUSH
120437: CALL_OW 240
120441: GO 120426
120443: POP
120444: POP
// end ;
120445: PPOPN 2
120447: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
120448: LD_EXP 147
120452: PUSH
120453: LD_EXP 183
120457: AND
120458: IFFALSE 120524
120460: GO 120462
120462: DISABLE
120463: LD_INT 0
120465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
120466: LD_ADDR_VAR 0 1
120470: PUSH
120471: LD_INT 22
120473: PUSH
120474: LD_OWVAR 2
120478: PUSH
120479: EMPTY
120480: LIST
120481: LIST
120482: PUSH
120483: LD_INT 30
120485: PUSH
120486: LD_INT 29
120488: PUSH
120489: EMPTY
120490: LIST
120491: LIST
120492: PUSH
120493: EMPTY
120494: LIST
120495: LIST
120496: PPUSH
120497: CALL_OW 69
120501: ST_TO_ADDR
// if not tmp then
120502: LD_VAR 0 1
120506: NOT
120507: IFFALSE 120511
// exit ;
120509: GO 120524
// DestroyUnit ( tmp [ 1 ] ) ;
120511: LD_VAR 0 1
120515: PUSH
120516: LD_INT 1
120518: ARRAY
120519: PPUSH
120520: CALL_OW 65
// end ;
120524: PPOPN 1
120526: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
120527: LD_EXP 147
120531: PUSH
120532: LD_EXP 185
120536: AND
120537: IFFALSE 120666
120539: GO 120541
120541: DISABLE
120542: LD_INT 0
120544: PPUSH
// begin uc_side := 0 ;
120545: LD_ADDR_OWVAR 20
120549: PUSH
120550: LD_INT 0
120552: ST_TO_ADDR
// uc_nation := nation_arabian ;
120553: LD_ADDR_OWVAR 21
120557: PUSH
120558: LD_INT 2
120560: ST_TO_ADDR
// hc_gallery :=  ;
120561: LD_ADDR_OWVAR 33
120565: PUSH
120566: LD_STRING 
120568: ST_TO_ADDR
// hc_name :=  ;
120569: LD_ADDR_OWVAR 26
120573: PUSH
120574: LD_STRING 
120576: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
120577: LD_INT 1
120579: PPUSH
120580: LD_INT 11
120582: PPUSH
120583: LD_INT 10
120585: PPUSH
120586: CALL_OW 380
// un := CreateHuman ;
120590: LD_ADDR_VAR 0 1
120594: PUSH
120595: CALL_OW 44
120599: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
120600: LD_VAR 0 1
120604: PPUSH
120605: LD_INT 1
120607: PPUSH
120608: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
120612: LD_INT 35
120614: PPUSH
120615: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
120619: LD_VAR 0 1
120623: PPUSH
120624: LD_INT 22
120626: PUSH
120627: LD_OWVAR 2
120631: PUSH
120632: EMPTY
120633: LIST
120634: LIST
120635: PPUSH
120636: CALL_OW 69
120640: PPUSH
120641: LD_VAR 0 1
120645: PPUSH
120646: CALL_OW 74
120650: PPUSH
120651: CALL_OW 115
// until IsDead ( un ) ;
120655: LD_VAR 0 1
120659: PPUSH
120660: CALL_OW 301
120664: IFFALSE 120612
// end ;
120666: PPOPN 1
120668: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
120669: LD_EXP 147
120673: PUSH
120674: LD_EXP 187
120678: AND
120679: IFFALSE 120691
120681: GO 120683
120683: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
120684: LD_STRING earthquake(getX(game), 0, 32)
120686: PPUSH
120687: CALL_OW 559
120691: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
120692: LD_EXP 147
120696: PUSH
120697: LD_EXP 188
120701: AND
120702: IFFALSE 120793
120704: GO 120706
120706: DISABLE
120707: LD_INT 0
120709: PPUSH
// begin enable ;
120710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
120711: LD_ADDR_VAR 0 1
120715: PUSH
120716: LD_INT 22
120718: PUSH
120719: LD_OWVAR 2
120723: PUSH
120724: EMPTY
120725: LIST
120726: LIST
120727: PUSH
120728: LD_INT 21
120730: PUSH
120731: LD_INT 2
120733: PUSH
120734: EMPTY
120735: LIST
120736: LIST
120737: PUSH
120738: LD_INT 33
120740: PUSH
120741: LD_INT 3
120743: PUSH
120744: EMPTY
120745: LIST
120746: LIST
120747: PUSH
120748: EMPTY
120749: LIST
120750: LIST
120751: LIST
120752: PPUSH
120753: CALL_OW 69
120757: ST_TO_ADDR
// if not tmp then
120758: LD_VAR 0 1
120762: NOT
120763: IFFALSE 120767
// exit ;
120765: GO 120793
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
120767: LD_VAR 0 1
120771: PUSH
120772: LD_INT 1
120774: PPUSH
120775: LD_VAR 0 1
120779: PPUSH
120780: CALL_OW 12
120784: ARRAY
120785: PPUSH
120786: LD_INT 1
120788: PPUSH
120789: CALL_OW 234
// end ;
120793: PPOPN 1
120795: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
120796: LD_EXP 147
120800: PUSH
120801: LD_EXP 189
120805: AND
120806: IFFALSE 120947
120808: GO 120810
120810: DISABLE
120811: LD_INT 0
120813: PPUSH
120814: PPUSH
120815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
120816: LD_ADDR_VAR 0 3
120820: PUSH
120821: LD_INT 22
120823: PUSH
120824: LD_OWVAR 2
120828: PUSH
120829: EMPTY
120830: LIST
120831: LIST
120832: PUSH
120833: LD_INT 25
120835: PUSH
120836: LD_INT 1
120838: PUSH
120839: EMPTY
120840: LIST
120841: LIST
120842: PUSH
120843: EMPTY
120844: LIST
120845: LIST
120846: PPUSH
120847: CALL_OW 69
120851: ST_TO_ADDR
// if not tmp then
120852: LD_VAR 0 3
120856: NOT
120857: IFFALSE 120861
// exit ;
120859: GO 120947
// un := tmp [ rand ( 1 , tmp ) ] ;
120861: LD_ADDR_VAR 0 2
120865: PUSH
120866: LD_VAR 0 3
120870: PUSH
120871: LD_INT 1
120873: PPUSH
120874: LD_VAR 0 3
120878: PPUSH
120879: CALL_OW 12
120883: ARRAY
120884: ST_TO_ADDR
// if Crawls ( un ) then
120885: LD_VAR 0 2
120889: PPUSH
120890: CALL_OW 318
120894: IFFALSE 120905
// ComWalk ( un ) ;
120896: LD_VAR 0 2
120900: PPUSH
120901: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
120905: LD_VAR 0 2
120909: PPUSH
120910: LD_INT 9
120912: PPUSH
120913: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
120917: LD_INT 28
120919: PPUSH
120920: LD_OWVAR 2
120924: PPUSH
120925: LD_INT 2
120927: PPUSH
120928: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
120932: LD_INT 29
120934: PPUSH
120935: LD_OWVAR 2
120939: PPUSH
120940: LD_INT 2
120942: PPUSH
120943: CALL_OW 322
// end ;
120947: PPOPN 3
120949: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
120950: LD_EXP 147
120954: PUSH
120955: LD_EXP 190
120959: AND
120960: IFFALSE 121071
120962: GO 120964
120964: DISABLE
120965: LD_INT 0
120967: PPUSH
120968: PPUSH
120969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
120970: LD_ADDR_VAR 0 3
120974: PUSH
120975: LD_INT 22
120977: PUSH
120978: LD_OWVAR 2
120982: PUSH
120983: EMPTY
120984: LIST
120985: LIST
120986: PUSH
120987: LD_INT 25
120989: PUSH
120990: LD_INT 1
120992: PUSH
120993: EMPTY
120994: LIST
120995: LIST
120996: PUSH
120997: EMPTY
120998: LIST
120999: LIST
121000: PPUSH
121001: CALL_OW 69
121005: ST_TO_ADDR
// if not tmp then
121006: LD_VAR 0 3
121010: NOT
121011: IFFALSE 121015
// exit ;
121013: GO 121071
// un := tmp [ rand ( 1 , tmp ) ] ;
121015: LD_ADDR_VAR 0 2
121019: PUSH
121020: LD_VAR 0 3
121024: PUSH
121025: LD_INT 1
121027: PPUSH
121028: LD_VAR 0 3
121032: PPUSH
121033: CALL_OW 12
121037: ARRAY
121038: ST_TO_ADDR
// if Crawls ( un ) then
121039: LD_VAR 0 2
121043: PPUSH
121044: CALL_OW 318
121048: IFFALSE 121059
// ComWalk ( un ) ;
121050: LD_VAR 0 2
121054: PPUSH
121055: CALL_OW 138
// SetClass ( un , class_mortar ) ;
121059: LD_VAR 0 2
121063: PPUSH
121064: LD_INT 8
121066: PPUSH
121067: CALL_OW 336
// end ;
121071: PPOPN 3
121073: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
121074: LD_EXP 147
121078: PUSH
121079: LD_EXP 191
121083: AND
121084: IFFALSE 121228
121086: GO 121088
121088: DISABLE
121089: LD_INT 0
121091: PPUSH
121092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
121093: LD_ADDR_VAR 0 2
121097: PUSH
121098: LD_INT 22
121100: PUSH
121101: LD_OWVAR 2
121105: PUSH
121106: EMPTY
121107: LIST
121108: LIST
121109: PUSH
121110: LD_INT 21
121112: PUSH
121113: LD_INT 2
121115: PUSH
121116: EMPTY
121117: LIST
121118: LIST
121119: PUSH
121120: LD_INT 2
121122: PUSH
121123: LD_INT 34
121125: PUSH
121126: LD_INT 12
121128: PUSH
121129: EMPTY
121130: LIST
121131: LIST
121132: PUSH
121133: LD_INT 34
121135: PUSH
121136: LD_INT 51
121138: PUSH
121139: EMPTY
121140: LIST
121141: LIST
121142: PUSH
121143: LD_INT 34
121145: PUSH
121146: LD_INT 32
121148: PUSH
121149: EMPTY
121150: LIST
121151: LIST
121152: PUSH
121153: EMPTY
121154: LIST
121155: LIST
121156: LIST
121157: LIST
121158: PUSH
121159: EMPTY
121160: LIST
121161: LIST
121162: LIST
121163: PPUSH
121164: CALL_OW 69
121168: ST_TO_ADDR
// if not tmp then
121169: LD_VAR 0 2
121173: NOT
121174: IFFALSE 121178
// exit ;
121176: GO 121228
// for i in tmp do
121178: LD_ADDR_VAR 0 1
121182: PUSH
121183: LD_VAR 0 2
121187: PUSH
121188: FOR_IN
121189: IFFALSE 121226
// if GetCargo ( i , mat_artifact ) = 0 then
121191: LD_VAR 0 1
121195: PPUSH
121196: LD_INT 4
121198: PPUSH
121199: CALL_OW 289
121203: PUSH
121204: LD_INT 0
121206: EQUAL
121207: IFFALSE 121224
// SetCargo ( i , mat_siberit , 100 ) ;
121209: LD_VAR 0 1
121213: PPUSH
121214: LD_INT 3
121216: PPUSH
121217: LD_INT 100
121219: PPUSH
121220: CALL_OW 290
121224: GO 121188
121226: POP
121227: POP
// end ;
121228: PPOPN 2
121230: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
121231: LD_EXP 147
121235: PUSH
121236: LD_EXP 192
121240: AND
121241: IFFALSE 121424
121243: GO 121245
121245: DISABLE
121246: LD_INT 0
121248: PPUSH
121249: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
121250: LD_ADDR_VAR 0 2
121254: PUSH
121255: LD_INT 22
121257: PUSH
121258: LD_OWVAR 2
121262: PUSH
121263: EMPTY
121264: LIST
121265: LIST
121266: PPUSH
121267: CALL_OW 69
121271: ST_TO_ADDR
// if not tmp then
121272: LD_VAR 0 2
121276: NOT
121277: IFFALSE 121281
// exit ;
121279: GO 121424
// for i := 1 to 2 do
121281: LD_ADDR_VAR 0 1
121285: PUSH
121286: DOUBLE
121287: LD_INT 1
121289: DEC
121290: ST_TO_ADDR
121291: LD_INT 2
121293: PUSH
121294: FOR_TO
121295: IFFALSE 121422
// begin uc_side := your_side ;
121297: LD_ADDR_OWVAR 20
121301: PUSH
121302: LD_OWVAR 2
121306: ST_TO_ADDR
// uc_nation := nation_american ;
121307: LD_ADDR_OWVAR 21
121311: PUSH
121312: LD_INT 1
121314: ST_TO_ADDR
// vc_chassis := us_morphling ;
121315: LD_ADDR_OWVAR 37
121319: PUSH
121320: LD_INT 5
121322: ST_TO_ADDR
// vc_engine := engine_siberite ;
121323: LD_ADDR_OWVAR 39
121327: PUSH
121328: LD_INT 3
121330: ST_TO_ADDR
// vc_control := control_computer ;
121331: LD_ADDR_OWVAR 38
121335: PUSH
121336: LD_INT 3
121338: ST_TO_ADDR
// vc_weapon := us_double_laser ;
121339: LD_ADDR_OWVAR 40
121343: PUSH
121344: LD_INT 10
121346: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
121347: LD_VAR 0 2
121351: PUSH
121352: LD_INT 1
121354: ARRAY
121355: PPUSH
121356: CALL_OW 310
121360: NOT
121361: IFFALSE 121408
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
121363: CALL_OW 45
121367: PPUSH
121368: LD_VAR 0 2
121372: PUSH
121373: LD_INT 1
121375: ARRAY
121376: PPUSH
121377: CALL_OW 250
121381: PPUSH
121382: LD_VAR 0 2
121386: PUSH
121387: LD_INT 1
121389: ARRAY
121390: PPUSH
121391: CALL_OW 251
121395: PPUSH
121396: LD_INT 12
121398: PPUSH
121399: LD_INT 1
121401: PPUSH
121402: CALL_OW 50
121406: GO 121420
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
121408: CALL_OW 45
121412: PPUSH
121413: LD_INT 1
121415: PPUSH
121416: CALL_OW 51
// end ;
121420: GO 121294
121422: POP
121423: POP
// end ;
121424: PPOPN 2
121426: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
121427: LD_EXP 147
121431: PUSH
121432: LD_EXP 193
121436: AND
121437: IFFALSE 121659
121439: GO 121441
121441: DISABLE
121442: LD_INT 0
121444: PPUSH
121445: PPUSH
121446: PPUSH
121447: PPUSH
121448: PPUSH
121449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
121450: LD_ADDR_VAR 0 6
121454: PUSH
121455: LD_INT 22
121457: PUSH
121458: LD_OWVAR 2
121462: PUSH
121463: EMPTY
121464: LIST
121465: LIST
121466: PUSH
121467: LD_INT 21
121469: PUSH
121470: LD_INT 1
121472: PUSH
121473: EMPTY
121474: LIST
121475: LIST
121476: PUSH
121477: LD_INT 3
121479: PUSH
121480: LD_INT 23
121482: PUSH
121483: LD_INT 0
121485: PUSH
121486: EMPTY
121487: LIST
121488: LIST
121489: PUSH
121490: EMPTY
121491: LIST
121492: LIST
121493: PUSH
121494: EMPTY
121495: LIST
121496: LIST
121497: LIST
121498: PPUSH
121499: CALL_OW 69
121503: ST_TO_ADDR
// if not tmp then
121504: LD_VAR 0 6
121508: NOT
121509: IFFALSE 121513
// exit ;
121511: GO 121659
// s1 := rand ( 1 , 4 ) ;
121513: LD_ADDR_VAR 0 2
121517: PUSH
121518: LD_INT 1
121520: PPUSH
121521: LD_INT 4
121523: PPUSH
121524: CALL_OW 12
121528: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
121529: LD_ADDR_VAR 0 4
121533: PUSH
121534: LD_VAR 0 6
121538: PUSH
121539: LD_INT 1
121541: ARRAY
121542: PPUSH
121543: LD_VAR 0 2
121547: PPUSH
121548: CALL_OW 259
121552: ST_TO_ADDR
// if s1 = 1 then
121553: LD_VAR 0 2
121557: PUSH
121558: LD_INT 1
121560: EQUAL
121561: IFFALSE 121581
// s2 := rand ( 2 , 4 ) else
121563: LD_ADDR_VAR 0 3
121567: PUSH
121568: LD_INT 2
121570: PPUSH
121571: LD_INT 4
121573: PPUSH
121574: CALL_OW 12
121578: ST_TO_ADDR
121579: GO 121589
// s2 := 1 ;
121581: LD_ADDR_VAR 0 3
121585: PUSH
121586: LD_INT 1
121588: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
121589: LD_ADDR_VAR 0 5
121593: PUSH
121594: LD_VAR 0 6
121598: PUSH
121599: LD_INT 1
121601: ARRAY
121602: PPUSH
121603: LD_VAR 0 3
121607: PPUSH
121608: CALL_OW 259
121612: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
121613: LD_VAR 0 6
121617: PUSH
121618: LD_INT 1
121620: ARRAY
121621: PPUSH
121622: LD_VAR 0 2
121626: PPUSH
121627: LD_VAR 0 5
121631: PPUSH
121632: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
121636: LD_VAR 0 6
121640: PUSH
121641: LD_INT 1
121643: ARRAY
121644: PPUSH
121645: LD_VAR 0 3
121649: PPUSH
121650: LD_VAR 0 4
121654: PPUSH
121655: CALL_OW 237
// end ;
121659: PPOPN 6
121661: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
121662: LD_EXP 147
121666: PUSH
121667: LD_EXP 194
121671: AND
121672: IFFALSE 121751
121674: GO 121676
121676: DISABLE
121677: LD_INT 0
121679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
121680: LD_ADDR_VAR 0 1
121684: PUSH
121685: LD_INT 22
121687: PUSH
121688: LD_OWVAR 2
121692: PUSH
121693: EMPTY
121694: LIST
121695: LIST
121696: PUSH
121697: LD_INT 30
121699: PUSH
121700: LD_INT 3
121702: PUSH
121703: EMPTY
121704: LIST
121705: LIST
121706: PUSH
121707: EMPTY
121708: LIST
121709: LIST
121710: PPUSH
121711: CALL_OW 69
121715: ST_TO_ADDR
// if not tmp then
121716: LD_VAR 0 1
121720: NOT
121721: IFFALSE 121725
// exit ;
121723: GO 121751
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
121725: LD_VAR 0 1
121729: PUSH
121730: LD_INT 1
121732: PPUSH
121733: LD_VAR 0 1
121737: PPUSH
121738: CALL_OW 12
121742: ARRAY
121743: PPUSH
121744: LD_INT 1
121746: PPUSH
121747: CALL_OW 234
// end ;
121751: PPOPN 1
121753: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
121754: LD_EXP 147
121758: PUSH
121759: LD_EXP 195
121763: AND
121764: IFFALSE 121876
121766: GO 121768
121768: DISABLE
121769: LD_INT 0
121771: PPUSH
121772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
121773: LD_ADDR_VAR 0 2
121777: PUSH
121778: LD_INT 22
121780: PUSH
121781: LD_OWVAR 2
121785: PUSH
121786: EMPTY
121787: LIST
121788: LIST
121789: PUSH
121790: LD_INT 2
121792: PUSH
121793: LD_INT 30
121795: PUSH
121796: LD_INT 27
121798: PUSH
121799: EMPTY
121800: LIST
121801: LIST
121802: PUSH
121803: LD_INT 30
121805: PUSH
121806: LD_INT 26
121808: PUSH
121809: EMPTY
121810: LIST
121811: LIST
121812: PUSH
121813: LD_INT 30
121815: PUSH
121816: LD_INT 28
121818: PUSH
121819: EMPTY
121820: LIST
121821: LIST
121822: PUSH
121823: EMPTY
121824: LIST
121825: LIST
121826: LIST
121827: LIST
121828: PUSH
121829: EMPTY
121830: LIST
121831: LIST
121832: PPUSH
121833: CALL_OW 69
121837: ST_TO_ADDR
// if not tmp then
121838: LD_VAR 0 2
121842: NOT
121843: IFFALSE 121847
// exit ;
121845: GO 121876
// for i in tmp do
121847: LD_ADDR_VAR 0 1
121851: PUSH
121852: LD_VAR 0 2
121856: PUSH
121857: FOR_IN
121858: IFFALSE 121874
// SetLives ( i , 1 ) ;
121860: LD_VAR 0 1
121864: PPUSH
121865: LD_INT 1
121867: PPUSH
121868: CALL_OW 234
121872: GO 121857
121874: POP
121875: POP
// end ;
121876: PPOPN 2
121878: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
121879: LD_EXP 147
121883: PUSH
121884: LD_EXP 196
121888: AND
121889: IFFALSE 122176
121891: GO 121893
121893: DISABLE
121894: LD_INT 0
121896: PPUSH
121897: PPUSH
121898: PPUSH
// begin i := rand ( 1 , 7 ) ;
121899: LD_ADDR_VAR 0 1
121903: PUSH
121904: LD_INT 1
121906: PPUSH
121907: LD_INT 7
121909: PPUSH
121910: CALL_OW 12
121914: ST_TO_ADDR
// case i of 1 :
121915: LD_VAR 0 1
121919: PUSH
121920: LD_INT 1
121922: DOUBLE
121923: EQUAL
121924: IFTRUE 121928
121926: GO 121938
121928: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
121929: LD_STRING earthquake(getX(game), 0, 32)
121931: PPUSH
121932: CALL_OW 559
121936: GO 122176
121938: LD_INT 2
121940: DOUBLE
121941: EQUAL
121942: IFTRUE 121946
121944: GO 121960
121946: POP
// begin ToLua ( displayStucuk(); ) ;
121947: LD_STRING displayStucuk();
121949: PPUSH
121950: CALL_OW 559
// ResetFog ;
121954: CALL_OW 335
// end ; 3 :
121958: GO 122176
121960: LD_INT 3
121962: DOUBLE
121963: EQUAL
121964: IFTRUE 121968
121966: GO 122072
121968: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
121969: LD_ADDR_VAR 0 2
121973: PUSH
121974: LD_INT 22
121976: PUSH
121977: LD_OWVAR 2
121981: PUSH
121982: EMPTY
121983: LIST
121984: LIST
121985: PUSH
121986: LD_INT 25
121988: PUSH
121989: LD_INT 1
121991: PUSH
121992: EMPTY
121993: LIST
121994: LIST
121995: PUSH
121996: EMPTY
121997: LIST
121998: LIST
121999: PPUSH
122000: CALL_OW 69
122004: ST_TO_ADDR
// if not tmp then
122005: LD_VAR 0 2
122009: NOT
122010: IFFALSE 122014
// exit ;
122012: GO 122176
// un := tmp [ rand ( 1 , tmp ) ] ;
122014: LD_ADDR_VAR 0 3
122018: PUSH
122019: LD_VAR 0 2
122023: PUSH
122024: LD_INT 1
122026: PPUSH
122027: LD_VAR 0 2
122031: PPUSH
122032: CALL_OW 12
122036: ARRAY
122037: ST_TO_ADDR
// if Crawls ( un ) then
122038: LD_VAR 0 3
122042: PPUSH
122043: CALL_OW 318
122047: IFFALSE 122058
// ComWalk ( un ) ;
122049: LD_VAR 0 3
122053: PPUSH
122054: CALL_OW 138
// SetClass ( un , class_mortar ) ;
122058: LD_VAR 0 3
122062: PPUSH
122063: LD_INT 8
122065: PPUSH
122066: CALL_OW 336
// end ; 4 :
122070: GO 122176
122072: LD_INT 4
122074: DOUBLE
122075: EQUAL
122076: IFTRUE 122080
122078: GO 122154
122080: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
122081: LD_ADDR_VAR 0 2
122085: PUSH
122086: LD_INT 22
122088: PUSH
122089: LD_OWVAR 2
122093: PUSH
122094: EMPTY
122095: LIST
122096: LIST
122097: PUSH
122098: LD_INT 30
122100: PUSH
122101: LD_INT 29
122103: PUSH
122104: EMPTY
122105: LIST
122106: LIST
122107: PUSH
122108: EMPTY
122109: LIST
122110: LIST
122111: PPUSH
122112: CALL_OW 69
122116: ST_TO_ADDR
// if not tmp then
122117: LD_VAR 0 2
122121: NOT
122122: IFFALSE 122126
// exit ;
122124: GO 122176
// CenterNowOnUnits ( tmp [ 1 ] ) ;
122126: LD_VAR 0 2
122130: PUSH
122131: LD_INT 1
122133: ARRAY
122134: PPUSH
122135: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
122139: LD_VAR 0 2
122143: PUSH
122144: LD_INT 1
122146: ARRAY
122147: PPUSH
122148: CALL_OW 65
// end ; 5 .. 7 :
122152: GO 122176
122154: LD_INT 5
122156: DOUBLE
122157: GREATEREQUAL
122158: IFFALSE 122166
122160: LD_INT 7
122162: DOUBLE
122163: LESSEQUAL
122164: IFTRUE 122168
122166: GO 122175
122168: POP
// StreamSibBomb ; end ;
122169: CALL 118413 0 0
122173: GO 122176
122175: POP
// end ;
122176: PPOPN 3
122178: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
122179: LD_EXP 147
122183: PUSH
122184: LD_EXP 197
122188: AND
122189: IFFALSE 122345
122191: GO 122193
122193: DISABLE
122194: LD_INT 0
122196: PPUSH
122197: PPUSH
122198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
122199: LD_ADDR_VAR 0 2
122203: PUSH
122204: LD_INT 81
122206: PUSH
122207: LD_OWVAR 2
122211: PUSH
122212: EMPTY
122213: LIST
122214: LIST
122215: PUSH
122216: LD_INT 2
122218: PUSH
122219: LD_INT 21
122221: PUSH
122222: LD_INT 1
122224: PUSH
122225: EMPTY
122226: LIST
122227: LIST
122228: PUSH
122229: LD_INT 21
122231: PUSH
122232: LD_INT 2
122234: PUSH
122235: EMPTY
122236: LIST
122237: LIST
122238: PUSH
122239: EMPTY
122240: LIST
122241: LIST
122242: LIST
122243: PUSH
122244: EMPTY
122245: LIST
122246: LIST
122247: PPUSH
122248: CALL_OW 69
122252: ST_TO_ADDR
// if not tmp then
122253: LD_VAR 0 2
122257: NOT
122258: IFFALSE 122262
// exit ;
122260: GO 122345
// p := 0 ;
122262: LD_ADDR_VAR 0 3
122266: PUSH
122267: LD_INT 0
122269: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
122270: LD_INT 35
122272: PPUSH
122273: CALL_OW 67
// p := p + 1 ;
122277: LD_ADDR_VAR 0 3
122281: PUSH
122282: LD_VAR 0 3
122286: PUSH
122287: LD_INT 1
122289: PLUS
122290: ST_TO_ADDR
// for i in tmp do
122291: LD_ADDR_VAR 0 1
122295: PUSH
122296: LD_VAR 0 2
122300: PUSH
122301: FOR_IN
122302: IFFALSE 122333
// if GetLives ( i ) < 1000 then
122304: LD_VAR 0 1
122308: PPUSH
122309: CALL_OW 256
122313: PUSH
122314: LD_INT 1000
122316: LESS
122317: IFFALSE 122331
// SetLives ( i , 1000 ) ;
122319: LD_VAR 0 1
122323: PPUSH
122324: LD_INT 1000
122326: PPUSH
122327: CALL_OW 234
122331: GO 122301
122333: POP
122334: POP
// until p > 20 ;
122335: LD_VAR 0 3
122339: PUSH
122340: LD_INT 20
122342: GREATER
122343: IFFALSE 122270
// end ;
122345: PPOPN 3
122347: END
// every 0 0$1 trigger StreamModeActive and sTime do
122348: LD_EXP 147
122352: PUSH
122353: LD_EXP 198
122357: AND
122358: IFFALSE 122393
122360: GO 122362
122362: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
122363: LD_INT 28
122365: PPUSH
122366: LD_OWVAR 2
122370: PPUSH
122371: LD_INT 2
122373: PPUSH
122374: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
122378: LD_INT 30
122380: PPUSH
122381: LD_OWVAR 2
122385: PPUSH
122386: LD_INT 2
122388: PPUSH
122389: CALL_OW 322
// end ;
122393: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
122394: LD_EXP 147
122398: PUSH
122399: LD_EXP 199
122403: AND
122404: IFFALSE 122525
122406: GO 122408
122408: DISABLE
122409: LD_INT 0
122411: PPUSH
122412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
122413: LD_ADDR_VAR 0 2
122417: PUSH
122418: LD_INT 22
122420: PUSH
122421: LD_OWVAR 2
122425: PUSH
122426: EMPTY
122427: LIST
122428: LIST
122429: PUSH
122430: LD_INT 21
122432: PUSH
122433: LD_INT 1
122435: PUSH
122436: EMPTY
122437: LIST
122438: LIST
122439: PUSH
122440: LD_INT 3
122442: PUSH
122443: LD_INT 23
122445: PUSH
122446: LD_INT 0
122448: PUSH
122449: EMPTY
122450: LIST
122451: LIST
122452: PUSH
122453: EMPTY
122454: LIST
122455: LIST
122456: PUSH
122457: EMPTY
122458: LIST
122459: LIST
122460: LIST
122461: PPUSH
122462: CALL_OW 69
122466: ST_TO_ADDR
// if not tmp then
122467: LD_VAR 0 2
122471: NOT
122472: IFFALSE 122476
// exit ;
122474: GO 122525
// for i in tmp do
122476: LD_ADDR_VAR 0 1
122480: PUSH
122481: LD_VAR 0 2
122485: PUSH
122486: FOR_IN
122487: IFFALSE 122523
// begin if Crawls ( i ) then
122489: LD_VAR 0 1
122493: PPUSH
122494: CALL_OW 318
122498: IFFALSE 122509
// ComWalk ( i ) ;
122500: LD_VAR 0 1
122504: PPUSH
122505: CALL_OW 138
// SetClass ( i , 2 ) ;
122509: LD_VAR 0 1
122513: PPUSH
122514: LD_INT 2
122516: PPUSH
122517: CALL_OW 336
// end ;
122521: GO 122486
122523: POP
122524: POP
// end ;
122525: PPOPN 2
122527: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
122528: LD_EXP 147
122532: PUSH
122533: LD_EXP 200
122537: AND
122538: IFFALSE 122826
122540: GO 122542
122542: DISABLE
122543: LD_INT 0
122545: PPUSH
122546: PPUSH
122547: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
122548: LD_OWVAR 2
122552: PPUSH
122553: LD_INT 9
122555: PPUSH
122556: LD_INT 1
122558: PPUSH
122559: LD_INT 1
122561: PPUSH
122562: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
122566: LD_INT 9
122568: PPUSH
122569: LD_OWVAR 2
122573: PPUSH
122574: CALL_OW 343
// uc_side := 9 ;
122578: LD_ADDR_OWVAR 20
122582: PUSH
122583: LD_INT 9
122585: ST_TO_ADDR
// uc_nation := 2 ;
122586: LD_ADDR_OWVAR 21
122590: PUSH
122591: LD_INT 2
122593: ST_TO_ADDR
// hc_name := Dark Warrior ;
122594: LD_ADDR_OWVAR 26
122598: PUSH
122599: LD_STRING Dark Warrior
122601: ST_TO_ADDR
// hc_gallery :=  ;
122602: LD_ADDR_OWVAR 33
122606: PUSH
122607: LD_STRING 
122609: ST_TO_ADDR
// hc_noskilllimit := true ;
122610: LD_ADDR_OWVAR 76
122614: PUSH
122615: LD_INT 1
122617: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
122618: LD_ADDR_OWVAR 31
122622: PUSH
122623: LD_INT 30
122625: PUSH
122626: LD_INT 30
122628: PUSH
122629: LD_INT 30
122631: PUSH
122632: LD_INT 30
122634: PUSH
122635: EMPTY
122636: LIST
122637: LIST
122638: LIST
122639: LIST
122640: ST_TO_ADDR
// un := CreateHuman ;
122641: LD_ADDR_VAR 0 3
122645: PUSH
122646: CALL_OW 44
122650: ST_TO_ADDR
// hc_noskilllimit := false ;
122651: LD_ADDR_OWVAR 76
122655: PUSH
122656: LD_INT 0
122658: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
122659: LD_VAR 0 3
122663: PPUSH
122664: LD_INT 1
122666: PPUSH
122667: CALL_OW 51
// ToLua ( playRanger() ) ;
122671: LD_STRING playRanger()
122673: PPUSH
122674: CALL_OW 559
// p := 0 ;
122678: LD_ADDR_VAR 0 2
122682: PUSH
122683: LD_INT 0
122685: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
122686: LD_INT 35
122688: PPUSH
122689: CALL_OW 67
// p := p + 1 ;
122693: LD_ADDR_VAR 0 2
122697: PUSH
122698: LD_VAR 0 2
122702: PUSH
122703: LD_INT 1
122705: PLUS
122706: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
122707: LD_VAR 0 3
122711: PPUSH
122712: CALL_OW 256
122716: PUSH
122717: LD_INT 1000
122719: LESS
122720: IFFALSE 122734
// SetLives ( un , 1000 ) ;
122722: LD_VAR 0 3
122726: PPUSH
122727: LD_INT 1000
122729: PPUSH
122730: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
122734: LD_VAR 0 3
122738: PPUSH
122739: LD_INT 81
122741: PUSH
122742: LD_OWVAR 2
122746: PUSH
122747: EMPTY
122748: LIST
122749: LIST
122750: PUSH
122751: LD_INT 91
122753: PUSH
122754: LD_VAR 0 3
122758: PUSH
122759: LD_INT 30
122761: PUSH
122762: EMPTY
122763: LIST
122764: LIST
122765: LIST
122766: PUSH
122767: EMPTY
122768: LIST
122769: LIST
122770: PPUSH
122771: CALL_OW 69
122775: PPUSH
122776: LD_VAR 0 3
122780: PPUSH
122781: CALL_OW 74
122785: PPUSH
122786: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
122790: LD_VAR 0 2
122794: PUSH
122795: LD_INT 80
122797: GREATER
122798: PUSH
122799: LD_VAR 0 3
122803: PPUSH
122804: CALL_OW 301
122808: OR
122809: IFFALSE 122686
// if un then
122811: LD_VAR 0 3
122815: IFFALSE 122826
// RemoveUnit ( un ) ;
122817: LD_VAR 0 3
122821: PPUSH
122822: CALL_OW 64
// end ;
122826: PPOPN 3
122828: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
122829: LD_EXP 201
122833: IFFALSE 122949
122835: GO 122837
122837: DISABLE
122838: LD_INT 0
122840: PPUSH
122841: PPUSH
122842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
122843: LD_ADDR_VAR 0 2
122847: PUSH
122848: LD_INT 81
122850: PUSH
122851: LD_OWVAR 2
122855: PUSH
122856: EMPTY
122857: LIST
122858: LIST
122859: PUSH
122860: LD_INT 21
122862: PUSH
122863: LD_INT 1
122865: PUSH
122866: EMPTY
122867: LIST
122868: LIST
122869: PUSH
122870: EMPTY
122871: LIST
122872: LIST
122873: PPUSH
122874: CALL_OW 69
122878: ST_TO_ADDR
// ToLua ( playComputer() ) ;
122879: LD_STRING playComputer()
122881: PPUSH
122882: CALL_OW 559
// if not tmp then
122886: LD_VAR 0 2
122890: NOT
122891: IFFALSE 122895
// exit ;
122893: GO 122949
// for i in tmp do
122895: LD_ADDR_VAR 0 1
122899: PUSH
122900: LD_VAR 0 2
122904: PUSH
122905: FOR_IN
122906: IFFALSE 122947
// for j := 1 to 4 do
122908: LD_ADDR_VAR 0 3
122912: PUSH
122913: DOUBLE
122914: LD_INT 1
122916: DEC
122917: ST_TO_ADDR
122918: LD_INT 4
122920: PUSH
122921: FOR_TO
122922: IFFALSE 122943
// SetSkill ( i , j , 10 ) ;
122924: LD_VAR 0 1
122928: PPUSH
122929: LD_VAR 0 3
122933: PPUSH
122934: LD_INT 10
122936: PPUSH
122937: CALL_OW 237
122941: GO 122921
122943: POP
122944: POP
122945: GO 122905
122947: POP
122948: POP
// end ;
122949: PPOPN 3
122951: END
// every 0 0$1 trigger s30 do var i , tmp ;
122952: LD_EXP 202
122956: IFFALSE 123025
122958: GO 122960
122960: DISABLE
122961: LD_INT 0
122963: PPUSH
122964: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
122965: LD_ADDR_VAR 0 2
122969: PUSH
122970: LD_INT 22
122972: PUSH
122973: LD_OWVAR 2
122977: PUSH
122978: EMPTY
122979: LIST
122980: LIST
122981: PPUSH
122982: CALL_OW 69
122986: ST_TO_ADDR
// if not tmp then
122987: LD_VAR 0 2
122991: NOT
122992: IFFALSE 122996
// exit ;
122994: GO 123025
// for i in tmp do
122996: LD_ADDR_VAR 0 1
123000: PUSH
123001: LD_VAR 0 2
123005: PUSH
123006: FOR_IN
123007: IFFALSE 123023
// SetLives ( i , 300 ) ;
123009: LD_VAR 0 1
123013: PPUSH
123014: LD_INT 300
123016: PPUSH
123017: CALL_OW 234
123021: GO 123006
123023: POP
123024: POP
// end ;
123025: PPOPN 2
123027: END
// every 0 0$1 trigger s60 do var i , tmp ;
123028: LD_EXP 203
123032: IFFALSE 123101
123034: GO 123036
123036: DISABLE
123037: LD_INT 0
123039: PPUSH
123040: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
123041: LD_ADDR_VAR 0 2
123045: PUSH
123046: LD_INT 22
123048: PUSH
123049: LD_OWVAR 2
123053: PUSH
123054: EMPTY
123055: LIST
123056: LIST
123057: PPUSH
123058: CALL_OW 69
123062: ST_TO_ADDR
// if not tmp then
123063: LD_VAR 0 2
123067: NOT
123068: IFFALSE 123072
// exit ;
123070: GO 123101
// for i in tmp do
123072: LD_ADDR_VAR 0 1
123076: PUSH
123077: LD_VAR 0 2
123081: PUSH
123082: FOR_IN
123083: IFFALSE 123099
// SetLives ( i , 600 ) ;
123085: LD_VAR 0 1
123089: PPUSH
123090: LD_INT 600
123092: PPUSH
123093: CALL_OW 234
123097: GO 123082
123099: POP
123100: POP
// end ;
123101: PPOPN 2
123103: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
123104: LD_INT 0
123106: PPUSH
// case cmd of 301 :
123107: LD_VAR 0 1
123111: PUSH
123112: LD_INT 301
123114: DOUBLE
123115: EQUAL
123116: IFTRUE 123120
123118: GO 123152
123120: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
123121: LD_VAR 0 6
123125: PPUSH
123126: LD_VAR 0 7
123130: PPUSH
123131: LD_VAR 0 8
123135: PPUSH
123136: LD_VAR 0 4
123140: PPUSH
123141: LD_VAR 0 5
123145: PPUSH
123146: CALL 124361 0 5
123150: GO 123273
123152: LD_INT 302
123154: DOUBLE
123155: EQUAL
123156: IFTRUE 123160
123158: GO 123197
123160: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
123161: LD_VAR 0 6
123165: PPUSH
123166: LD_VAR 0 7
123170: PPUSH
123171: LD_VAR 0 8
123175: PPUSH
123176: LD_VAR 0 9
123180: PPUSH
123181: LD_VAR 0 4
123185: PPUSH
123186: LD_VAR 0 5
123190: PPUSH
123191: CALL 124452 0 6
123195: GO 123273
123197: LD_INT 303
123199: DOUBLE
123200: EQUAL
123201: IFTRUE 123205
123203: GO 123242
123205: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
123206: LD_VAR 0 6
123210: PPUSH
123211: LD_VAR 0 7
123215: PPUSH
123216: LD_VAR 0 8
123220: PPUSH
123221: LD_VAR 0 9
123225: PPUSH
123226: LD_VAR 0 4
123230: PPUSH
123231: LD_VAR 0 5
123235: PPUSH
123236: CALL 123278 0 6
123240: GO 123273
123242: LD_INT 304
123244: DOUBLE
123245: EQUAL
123246: IFTRUE 123250
123248: GO 123272
123250: POP
// hHackTeleport ( unit , x , y ) ; end ;
123251: LD_VAR 0 2
123255: PPUSH
123256: LD_VAR 0 4
123260: PPUSH
123261: LD_VAR 0 5
123265: PPUSH
123266: CALL 125045 0 3
123270: GO 123273
123272: POP
// end ;
123273: LD_VAR 0 12
123277: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
123278: LD_INT 0
123280: PPUSH
123281: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
123282: LD_VAR 0 1
123286: PUSH
123287: LD_INT 1
123289: LESS
123290: PUSH
123291: LD_VAR 0 1
123295: PUSH
123296: LD_INT 3
123298: GREATER
123299: OR
123300: PUSH
123301: LD_VAR 0 5
123305: PPUSH
123306: LD_VAR 0 6
123310: PPUSH
123311: CALL_OW 428
123315: OR
123316: IFFALSE 123320
// exit ;
123318: GO 124048
// uc_side := your_side ;
123320: LD_ADDR_OWVAR 20
123324: PUSH
123325: LD_OWVAR 2
123329: ST_TO_ADDR
// uc_nation := nation ;
123330: LD_ADDR_OWVAR 21
123334: PUSH
123335: LD_VAR 0 1
123339: ST_TO_ADDR
// bc_level = 1 ;
123340: LD_ADDR_OWVAR 43
123344: PUSH
123345: LD_INT 1
123347: ST_TO_ADDR
// case btype of 1 :
123348: LD_VAR 0 2
123352: PUSH
123353: LD_INT 1
123355: DOUBLE
123356: EQUAL
123357: IFTRUE 123361
123359: GO 123372
123361: POP
// bc_type := b_depot ; 2 :
123362: LD_ADDR_OWVAR 42
123366: PUSH
123367: LD_INT 0
123369: ST_TO_ADDR
123370: GO 123992
123372: LD_INT 2
123374: DOUBLE
123375: EQUAL
123376: IFTRUE 123380
123378: GO 123391
123380: POP
// bc_type := b_warehouse ; 3 :
123381: LD_ADDR_OWVAR 42
123385: PUSH
123386: LD_INT 1
123388: ST_TO_ADDR
123389: GO 123992
123391: LD_INT 3
123393: DOUBLE
123394: EQUAL
123395: IFTRUE 123399
123397: GO 123410
123399: POP
// bc_type := b_lab ; 4 .. 9 :
123400: LD_ADDR_OWVAR 42
123404: PUSH
123405: LD_INT 6
123407: ST_TO_ADDR
123408: GO 123992
123410: LD_INT 4
123412: DOUBLE
123413: GREATEREQUAL
123414: IFFALSE 123422
123416: LD_INT 9
123418: DOUBLE
123419: LESSEQUAL
123420: IFTRUE 123424
123422: GO 123484
123424: POP
// begin bc_type := b_lab_half ;
123425: LD_ADDR_OWVAR 42
123429: PUSH
123430: LD_INT 7
123432: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
123433: LD_ADDR_OWVAR 44
123437: PUSH
123438: LD_INT 10
123440: PUSH
123441: LD_INT 11
123443: PUSH
123444: LD_INT 12
123446: PUSH
123447: LD_INT 15
123449: PUSH
123450: LD_INT 14
123452: PUSH
123453: LD_INT 13
123455: PUSH
123456: EMPTY
123457: LIST
123458: LIST
123459: LIST
123460: LIST
123461: LIST
123462: LIST
123463: PUSH
123464: LD_VAR 0 2
123468: PUSH
123469: LD_INT 3
123471: MINUS
123472: ARRAY
123473: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
123474: LD_ADDR_OWVAR 45
123478: PUSH
123479: LD_INT 9
123481: ST_TO_ADDR
// end ; 10 .. 13 :
123482: GO 123992
123484: LD_INT 10
123486: DOUBLE
123487: GREATEREQUAL
123488: IFFALSE 123496
123490: LD_INT 13
123492: DOUBLE
123493: LESSEQUAL
123494: IFTRUE 123498
123496: GO 123575
123498: POP
// begin bc_type := b_lab_full ;
123499: LD_ADDR_OWVAR 42
123503: PUSH
123504: LD_INT 8
123506: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
123507: LD_ADDR_OWVAR 44
123511: PUSH
123512: LD_INT 10
123514: PUSH
123515: LD_INT 12
123517: PUSH
123518: LD_INT 14
123520: PUSH
123521: LD_INT 13
123523: PUSH
123524: EMPTY
123525: LIST
123526: LIST
123527: LIST
123528: LIST
123529: PUSH
123530: LD_VAR 0 2
123534: PUSH
123535: LD_INT 9
123537: MINUS
123538: ARRAY
123539: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
123540: LD_ADDR_OWVAR 45
123544: PUSH
123545: LD_INT 11
123547: PUSH
123548: LD_INT 15
123550: PUSH
123551: LD_INT 12
123553: PUSH
123554: LD_INT 15
123556: PUSH
123557: EMPTY
123558: LIST
123559: LIST
123560: LIST
123561: LIST
123562: PUSH
123563: LD_VAR 0 2
123567: PUSH
123568: LD_INT 9
123570: MINUS
123571: ARRAY
123572: ST_TO_ADDR
// end ; 14 :
123573: GO 123992
123575: LD_INT 14
123577: DOUBLE
123578: EQUAL
123579: IFTRUE 123583
123581: GO 123594
123583: POP
// bc_type := b_workshop ; 15 :
123584: LD_ADDR_OWVAR 42
123588: PUSH
123589: LD_INT 2
123591: ST_TO_ADDR
123592: GO 123992
123594: LD_INT 15
123596: DOUBLE
123597: EQUAL
123598: IFTRUE 123602
123600: GO 123613
123602: POP
// bc_type := b_factory ; 16 :
123603: LD_ADDR_OWVAR 42
123607: PUSH
123608: LD_INT 3
123610: ST_TO_ADDR
123611: GO 123992
123613: LD_INT 16
123615: DOUBLE
123616: EQUAL
123617: IFTRUE 123621
123619: GO 123632
123621: POP
// bc_type := b_ext_gun ; 17 :
123622: LD_ADDR_OWVAR 42
123626: PUSH
123627: LD_INT 17
123629: ST_TO_ADDR
123630: GO 123992
123632: LD_INT 17
123634: DOUBLE
123635: EQUAL
123636: IFTRUE 123640
123638: GO 123668
123640: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
123641: LD_ADDR_OWVAR 42
123645: PUSH
123646: LD_INT 19
123648: PUSH
123649: LD_INT 23
123651: PUSH
123652: LD_INT 19
123654: PUSH
123655: EMPTY
123656: LIST
123657: LIST
123658: LIST
123659: PUSH
123660: LD_VAR 0 1
123664: ARRAY
123665: ST_TO_ADDR
123666: GO 123992
123668: LD_INT 18
123670: DOUBLE
123671: EQUAL
123672: IFTRUE 123676
123674: GO 123687
123676: POP
// bc_type := b_ext_radar ; 19 :
123677: LD_ADDR_OWVAR 42
123681: PUSH
123682: LD_INT 20
123684: ST_TO_ADDR
123685: GO 123992
123687: LD_INT 19
123689: DOUBLE
123690: EQUAL
123691: IFTRUE 123695
123693: GO 123706
123695: POP
// bc_type := b_ext_radio ; 20 :
123696: LD_ADDR_OWVAR 42
123700: PUSH
123701: LD_INT 22
123703: ST_TO_ADDR
123704: GO 123992
123706: LD_INT 20
123708: DOUBLE
123709: EQUAL
123710: IFTRUE 123714
123712: GO 123725
123714: POP
// bc_type := b_ext_siberium ; 21 :
123715: LD_ADDR_OWVAR 42
123719: PUSH
123720: LD_INT 21
123722: ST_TO_ADDR
123723: GO 123992
123725: LD_INT 21
123727: DOUBLE
123728: EQUAL
123729: IFTRUE 123733
123731: GO 123744
123733: POP
// bc_type := b_ext_computer ; 22 :
123734: LD_ADDR_OWVAR 42
123738: PUSH
123739: LD_INT 24
123741: ST_TO_ADDR
123742: GO 123992
123744: LD_INT 22
123746: DOUBLE
123747: EQUAL
123748: IFTRUE 123752
123750: GO 123763
123752: POP
// bc_type := b_ext_track ; 23 :
123753: LD_ADDR_OWVAR 42
123757: PUSH
123758: LD_INT 16
123760: ST_TO_ADDR
123761: GO 123992
123763: LD_INT 23
123765: DOUBLE
123766: EQUAL
123767: IFTRUE 123771
123769: GO 123782
123771: POP
// bc_type := b_ext_laser ; 24 :
123772: LD_ADDR_OWVAR 42
123776: PUSH
123777: LD_INT 25
123779: ST_TO_ADDR
123780: GO 123992
123782: LD_INT 24
123784: DOUBLE
123785: EQUAL
123786: IFTRUE 123790
123788: GO 123801
123790: POP
// bc_type := b_control_tower ; 25 :
123791: LD_ADDR_OWVAR 42
123795: PUSH
123796: LD_INT 36
123798: ST_TO_ADDR
123799: GO 123992
123801: LD_INT 25
123803: DOUBLE
123804: EQUAL
123805: IFTRUE 123809
123807: GO 123820
123809: POP
// bc_type := b_breastwork ; 26 :
123810: LD_ADDR_OWVAR 42
123814: PUSH
123815: LD_INT 31
123817: ST_TO_ADDR
123818: GO 123992
123820: LD_INT 26
123822: DOUBLE
123823: EQUAL
123824: IFTRUE 123828
123826: GO 123839
123828: POP
// bc_type := b_bunker ; 27 :
123829: LD_ADDR_OWVAR 42
123833: PUSH
123834: LD_INT 32
123836: ST_TO_ADDR
123837: GO 123992
123839: LD_INT 27
123841: DOUBLE
123842: EQUAL
123843: IFTRUE 123847
123845: GO 123858
123847: POP
// bc_type := b_turret ; 28 :
123848: LD_ADDR_OWVAR 42
123852: PUSH
123853: LD_INT 33
123855: ST_TO_ADDR
123856: GO 123992
123858: LD_INT 28
123860: DOUBLE
123861: EQUAL
123862: IFTRUE 123866
123864: GO 123877
123866: POP
// bc_type := b_armoury ; 29 :
123867: LD_ADDR_OWVAR 42
123871: PUSH
123872: LD_INT 4
123874: ST_TO_ADDR
123875: GO 123992
123877: LD_INT 29
123879: DOUBLE
123880: EQUAL
123881: IFTRUE 123885
123883: GO 123896
123885: POP
// bc_type := b_barracks ; 30 :
123886: LD_ADDR_OWVAR 42
123890: PUSH
123891: LD_INT 5
123893: ST_TO_ADDR
123894: GO 123992
123896: LD_INT 30
123898: DOUBLE
123899: EQUAL
123900: IFTRUE 123904
123902: GO 123915
123904: POP
// bc_type := b_solar_power ; 31 :
123905: LD_ADDR_OWVAR 42
123909: PUSH
123910: LD_INT 27
123912: ST_TO_ADDR
123913: GO 123992
123915: LD_INT 31
123917: DOUBLE
123918: EQUAL
123919: IFTRUE 123923
123921: GO 123934
123923: POP
// bc_type := b_oil_power ; 32 :
123924: LD_ADDR_OWVAR 42
123928: PUSH
123929: LD_INT 26
123931: ST_TO_ADDR
123932: GO 123992
123934: LD_INT 32
123936: DOUBLE
123937: EQUAL
123938: IFTRUE 123942
123940: GO 123953
123942: POP
// bc_type := b_siberite_power ; 33 :
123943: LD_ADDR_OWVAR 42
123947: PUSH
123948: LD_INT 28
123950: ST_TO_ADDR
123951: GO 123992
123953: LD_INT 33
123955: DOUBLE
123956: EQUAL
123957: IFTRUE 123961
123959: GO 123972
123961: POP
// bc_type := b_oil_mine ; 34 :
123962: LD_ADDR_OWVAR 42
123966: PUSH
123967: LD_INT 29
123969: ST_TO_ADDR
123970: GO 123992
123972: LD_INT 34
123974: DOUBLE
123975: EQUAL
123976: IFTRUE 123980
123978: GO 123991
123980: POP
// bc_type := b_siberite_mine ; end ;
123981: LD_ADDR_OWVAR 42
123985: PUSH
123986: LD_INT 30
123988: ST_TO_ADDR
123989: GO 123992
123991: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
123992: LD_ADDR_VAR 0 8
123996: PUSH
123997: LD_VAR 0 5
124001: PPUSH
124002: LD_VAR 0 6
124006: PPUSH
124007: LD_VAR 0 3
124011: PPUSH
124012: CALL_OW 47
124016: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
124017: LD_OWVAR 42
124021: PUSH
124022: LD_INT 32
124024: PUSH
124025: LD_INT 33
124027: PUSH
124028: EMPTY
124029: LIST
124030: LIST
124031: IN
124032: IFFALSE 124048
// PlaceWeaponTurret ( b , weapon ) ;
124034: LD_VAR 0 8
124038: PPUSH
124039: LD_VAR 0 4
124043: PPUSH
124044: CALL_OW 431
// end ;
124048: LD_VAR 0 7
124052: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
124053: LD_INT 0
124055: PPUSH
124056: PPUSH
124057: PPUSH
124058: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
124059: LD_ADDR_VAR 0 4
124063: PUSH
124064: LD_INT 22
124066: PUSH
124067: LD_OWVAR 2
124071: PUSH
124072: EMPTY
124073: LIST
124074: LIST
124075: PUSH
124076: LD_INT 2
124078: PUSH
124079: LD_INT 30
124081: PUSH
124082: LD_INT 0
124084: PUSH
124085: EMPTY
124086: LIST
124087: LIST
124088: PUSH
124089: LD_INT 30
124091: PUSH
124092: LD_INT 1
124094: PUSH
124095: EMPTY
124096: LIST
124097: LIST
124098: PUSH
124099: EMPTY
124100: LIST
124101: LIST
124102: LIST
124103: PUSH
124104: EMPTY
124105: LIST
124106: LIST
124107: PPUSH
124108: CALL_OW 69
124112: ST_TO_ADDR
// if not tmp then
124113: LD_VAR 0 4
124117: NOT
124118: IFFALSE 124122
// exit ;
124120: GO 124181
// for i in tmp do
124122: LD_ADDR_VAR 0 2
124126: PUSH
124127: LD_VAR 0 4
124131: PUSH
124132: FOR_IN
124133: IFFALSE 124179
// for j = 1 to 3 do
124135: LD_ADDR_VAR 0 3
124139: PUSH
124140: DOUBLE
124141: LD_INT 1
124143: DEC
124144: ST_TO_ADDR
124145: LD_INT 3
124147: PUSH
124148: FOR_TO
124149: IFFALSE 124175
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
124151: LD_VAR 0 2
124155: PPUSH
124156: CALL_OW 274
124160: PPUSH
124161: LD_VAR 0 3
124165: PPUSH
124166: LD_INT 99999
124168: PPUSH
124169: CALL_OW 277
124173: GO 124148
124175: POP
124176: POP
124177: GO 124132
124179: POP
124180: POP
// end ;
124181: LD_VAR 0 1
124185: RET
// export function hHackSetLevel10 ; var i , j ; begin
124186: LD_INT 0
124188: PPUSH
124189: PPUSH
124190: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
124191: LD_ADDR_VAR 0 2
124195: PUSH
124196: LD_INT 21
124198: PUSH
124199: LD_INT 1
124201: PUSH
124202: EMPTY
124203: LIST
124204: LIST
124205: PPUSH
124206: CALL_OW 69
124210: PUSH
124211: FOR_IN
124212: IFFALSE 124264
// if IsSelected ( i ) then
124214: LD_VAR 0 2
124218: PPUSH
124219: CALL_OW 306
124223: IFFALSE 124262
// begin for j := 1 to 4 do
124225: LD_ADDR_VAR 0 3
124229: PUSH
124230: DOUBLE
124231: LD_INT 1
124233: DEC
124234: ST_TO_ADDR
124235: LD_INT 4
124237: PUSH
124238: FOR_TO
124239: IFFALSE 124260
// SetSkill ( i , j , 10 ) ;
124241: LD_VAR 0 2
124245: PPUSH
124246: LD_VAR 0 3
124250: PPUSH
124251: LD_INT 10
124253: PPUSH
124254: CALL_OW 237
124258: GO 124238
124260: POP
124261: POP
// end ;
124262: GO 124211
124264: POP
124265: POP
// end ;
124266: LD_VAR 0 1
124270: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
124271: LD_INT 0
124273: PPUSH
124274: PPUSH
124275: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
124276: LD_ADDR_VAR 0 2
124280: PUSH
124281: LD_INT 22
124283: PUSH
124284: LD_OWVAR 2
124288: PUSH
124289: EMPTY
124290: LIST
124291: LIST
124292: PUSH
124293: LD_INT 21
124295: PUSH
124296: LD_INT 1
124298: PUSH
124299: EMPTY
124300: LIST
124301: LIST
124302: PUSH
124303: EMPTY
124304: LIST
124305: LIST
124306: PPUSH
124307: CALL_OW 69
124311: PUSH
124312: FOR_IN
124313: IFFALSE 124354
// begin for j := 1 to 4 do
124315: LD_ADDR_VAR 0 3
124319: PUSH
124320: DOUBLE
124321: LD_INT 1
124323: DEC
124324: ST_TO_ADDR
124325: LD_INT 4
124327: PUSH
124328: FOR_TO
124329: IFFALSE 124350
// SetSkill ( i , j , 10 ) ;
124331: LD_VAR 0 2
124335: PPUSH
124336: LD_VAR 0 3
124340: PPUSH
124341: LD_INT 10
124343: PPUSH
124344: CALL_OW 237
124348: GO 124328
124350: POP
124351: POP
// end ;
124352: GO 124312
124354: POP
124355: POP
// end ;
124356: LD_VAR 0 1
124360: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
124361: LD_INT 0
124363: PPUSH
// uc_side := your_side ;
124364: LD_ADDR_OWVAR 20
124368: PUSH
124369: LD_OWVAR 2
124373: ST_TO_ADDR
// uc_nation := nation ;
124374: LD_ADDR_OWVAR 21
124378: PUSH
124379: LD_VAR 0 1
124383: ST_TO_ADDR
// InitHc ;
124384: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
124388: LD_INT 0
124390: PPUSH
124391: LD_VAR 0 2
124395: PPUSH
124396: LD_VAR 0 3
124400: PPUSH
124401: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
124405: LD_VAR 0 4
124409: PPUSH
124410: LD_VAR 0 5
124414: PPUSH
124415: CALL_OW 428
124419: PUSH
124420: LD_INT 0
124422: EQUAL
124423: IFFALSE 124447
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
124425: CALL_OW 44
124429: PPUSH
124430: LD_VAR 0 4
124434: PPUSH
124435: LD_VAR 0 5
124439: PPUSH
124440: LD_INT 1
124442: PPUSH
124443: CALL_OW 48
// end ;
124447: LD_VAR 0 6
124451: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
124452: LD_INT 0
124454: PPUSH
124455: PPUSH
// uc_side := your_side ;
124456: LD_ADDR_OWVAR 20
124460: PUSH
124461: LD_OWVAR 2
124465: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
124466: LD_VAR 0 1
124470: PUSH
124471: LD_INT 1
124473: PUSH
124474: LD_INT 2
124476: PUSH
124477: LD_INT 3
124479: PUSH
124480: LD_INT 4
124482: PUSH
124483: LD_INT 5
124485: PUSH
124486: EMPTY
124487: LIST
124488: LIST
124489: LIST
124490: LIST
124491: LIST
124492: IN
124493: IFFALSE 124505
// uc_nation := nation_american else
124495: LD_ADDR_OWVAR 21
124499: PUSH
124500: LD_INT 1
124502: ST_TO_ADDR
124503: GO 124548
// if chassis in [ 11 , 12 , 13 , 14 ] then
124505: LD_VAR 0 1
124509: PUSH
124510: LD_INT 11
124512: PUSH
124513: LD_INT 12
124515: PUSH
124516: LD_INT 13
124518: PUSH
124519: LD_INT 14
124521: PUSH
124522: EMPTY
124523: LIST
124524: LIST
124525: LIST
124526: LIST
124527: IN
124528: IFFALSE 124540
// uc_nation := nation_arabian else
124530: LD_ADDR_OWVAR 21
124534: PUSH
124535: LD_INT 2
124537: ST_TO_ADDR
124538: GO 124548
// uc_nation := nation_russian ;
124540: LD_ADDR_OWVAR 21
124544: PUSH
124545: LD_INT 3
124547: ST_TO_ADDR
// vc_chassis := chassis ;
124548: LD_ADDR_OWVAR 37
124552: PUSH
124553: LD_VAR 0 1
124557: ST_TO_ADDR
// vc_engine := engine ;
124558: LD_ADDR_OWVAR 39
124562: PUSH
124563: LD_VAR 0 2
124567: ST_TO_ADDR
// vc_control := control ;
124568: LD_ADDR_OWVAR 38
124572: PUSH
124573: LD_VAR 0 3
124577: ST_TO_ADDR
// vc_weapon := weapon ;
124578: LD_ADDR_OWVAR 40
124582: PUSH
124583: LD_VAR 0 4
124587: ST_TO_ADDR
// un := CreateVehicle ;
124588: LD_ADDR_VAR 0 8
124592: PUSH
124593: CALL_OW 45
124597: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
124598: LD_VAR 0 8
124602: PPUSH
124603: LD_INT 0
124605: PPUSH
124606: LD_INT 5
124608: PPUSH
124609: CALL_OW 12
124613: PPUSH
124614: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
124618: LD_VAR 0 8
124622: PPUSH
124623: LD_VAR 0 5
124627: PPUSH
124628: LD_VAR 0 6
124632: PPUSH
124633: LD_INT 1
124635: PPUSH
124636: CALL_OW 48
// end ;
124640: LD_VAR 0 7
124644: RET
// export hInvincible ; every 1 do
124645: GO 124647
124647: DISABLE
// hInvincible := [ ] ;
124648: LD_ADDR_EXP 204
124652: PUSH
124653: EMPTY
124654: ST_TO_ADDR
124655: END
// every 10 do var i ;
124656: GO 124658
124658: DISABLE
124659: LD_INT 0
124661: PPUSH
// begin enable ;
124662: ENABLE
// if not hInvincible then
124663: LD_EXP 204
124667: NOT
124668: IFFALSE 124672
// exit ;
124670: GO 124716
// for i in hInvincible do
124672: LD_ADDR_VAR 0 1
124676: PUSH
124677: LD_EXP 204
124681: PUSH
124682: FOR_IN
124683: IFFALSE 124714
// if GetLives ( i ) < 1000 then
124685: LD_VAR 0 1
124689: PPUSH
124690: CALL_OW 256
124694: PUSH
124695: LD_INT 1000
124697: LESS
124698: IFFALSE 124712
// SetLives ( i , 1000 ) ;
124700: LD_VAR 0 1
124704: PPUSH
124705: LD_INT 1000
124707: PPUSH
124708: CALL_OW 234
124712: GO 124682
124714: POP
124715: POP
// end ;
124716: PPOPN 1
124718: END
// export function hHackInvincible ; var i ; begin
124719: LD_INT 0
124721: PPUSH
124722: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
124723: LD_ADDR_VAR 0 2
124727: PUSH
124728: LD_INT 2
124730: PUSH
124731: LD_INT 21
124733: PUSH
124734: LD_INT 1
124736: PUSH
124737: EMPTY
124738: LIST
124739: LIST
124740: PUSH
124741: LD_INT 21
124743: PUSH
124744: LD_INT 2
124746: PUSH
124747: EMPTY
124748: LIST
124749: LIST
124750: PUSH
124751: EMPTY
124752: LIST
124753: LIST
124754: LIST
124755: PPUSH
124756: CALL_OW 69
124760: PUSH
124761: FOR_IN
124762: IFFALSE 124823
// if IsSelected ( i ) then
124764: LD_VAR 0 2
124768: PPUSH
124769: CALL_OW 306
124773: IFFALSE 124821
// begin if i in hInvincible then
124775: LD_VAR 0 2
124779: PUSH
124780: LD_EXP 204
124784: IN
124785: IFFALSE 124805
// hInvincible := hInvincible diff i else
124787: LD_ADDR_EXP 204
124791: PUSH
124792: LD_EXP 204
124796: PUSH
124797: LD_VAR 0 2
124801: DIFF
124802: ST_TO_ADDR
124803: GO 124821
// hInvincible := hInvincible union i ;
124805: LD_ADDR_EXP 204
124809: PUSH
124810: LD_EXP 204
124814: PUSH
124815: LD_VAR 0 2
124819: UNION
124820: ST_TO_ADDR
// end ;
124821: GO 124761
124823: POP
124824: POP
// end ;
124825: LD_VAR 0 1
124829: RET
// export function hHackInvisible ; var i , j ; begin
124830: LD_INT 0
124832: PPUSH
124833: PPUSH
124834: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
124835: LD_ADDR_VAR 0 2
124839: PUSH
124840: LD_INT 21
124842: PUSH
124843: LD_INT 1
124845: PUSH
124846: EMPTY
124847: LIST
124848: LIST
124849: PPUSH
124850: CALL_OW 69
124854: PUSH
124855: FOR_IN
124856: IFFALSE 124880
// if IsSelected ( i ) then
124858: LD_VAR 0 2
124862: PPUSH
124863: CALL_OW 306
124867: IFFALSE 124878
// ComForceInvisible ( i ) ;
124869: LD_VAR 0 2
124873: PPUSH
124874: CALL_OW 496
124878: GO 124855
124880: POP
124881: POP
// end ;
124882: LD_VAR 0 1
124886: RET
// export function hHackChangeYourSide ; begin
124887: LD_INT 0
124889: PPUSH
// if your_side = 8 then
124890: LD_OWVAR 2
124894: PUSH
124895: LD_INT 8
124897: EQUAL
124898: IFFALSE 124910
// your_side := 0 else
124900: LD_ADDR_OWVAR 2
124904: PUSH
124905: LD_INT 0
124907: ST_TO_ADDR
124908: GO 124924
// your_side := your_side + 1 ;
124910: LD_ADDR_OWVAR 2
124914: PUSH
124915: LD_OWVAR 2
124919: PUSH
124920: LD_INT 1
124922: PLUS
124923: ST_TO_ADDR
// end ;
124924: LD_VAR 0 1
124928: RET
// export function hHackChangeUnitSide ; var i , j ; begin
124929: LD_INT 0
124931: PPUSH
124932: PPUSH
124933: PPUSH
// for i in all_units do
124934: LD_ADDR_VAR 0 2
124938: PUSH
124939: LD_OWVAR 3
124943: PUSH
124944: FOR_IN
124945: IFFALSE 125023
// if IsSelected ( i ) then
124947: LD_VAR 0 2
124951: PPUSH
124952: CALL_OW 306
124956: IFFALSE 125021
// begin j := GetSide ( i ) ;
124958: LD_ADDR_VAR 0 3
124962: PUSH
124963: LD_VAR 0 2
124967: PPUSH
124968: CALL_OW 255
124972: ST_TO_ADDR
// if j = 8 then
124973: LD_VAR 0 3
124977: PUSH
124978: LD_INT 8
124980: EQUAL
124981: IFFALSE 124993
// j := 0 else
124983: LD_ADDR_VAR 0 3
124987: PUSH
124988: LD_INT 0
124990: ST_TO_ADDR
124991: GO 125007
// j := j + 1 ;
124993: LD_ADDR_VAR 0 3
124997: PUSH
124998: LD_VAR 0 3
125002: PUSH
125003: LD_INT 1
125005: PLUS
125006: ST_TO_ADDR
// SetSide ( i , j ) ;
125007: LD_VAR 0 2
125011: PPUSH
125012: LD_VAR 0 3
125016: PPUSH
125017: CALL_OW 235
// end ;
125021: GO 124944
125023: POP
125024: POP
// end ;
125025: LD_VAR 0 1
125029: RET
// export function hHackFog ; begin
125030: LD_INT 0
125032: PPUSH
// FogOff ( true ) ;
125033: LD_INT 1
125035: PPUSH
125036: CALL_OW 344
// end ;
125040: LD_VAR 0 1
125044: RET
// export function hHackTeleport ( unit , x , y ) ; begin
125045: LD_INT 0
125047: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
125048: LD_VAR 0 1
125052: PPUSH
125053: LD_VAR 0 2
125057: PPUSH
125058: LD_VAR 0 3
125062: PPUSH
125063: LD_INT 1
125065: PPUSH
125066: LD_INT 1
125068: PPUSH
125069: CALL_OW 483
// CenterOnXY ( x , y ) ;
125073: LD_VAR 0 2
125077: PPUSH
125078: LD_VAR 0 3
125082: PPUSH
125083: CALL_OW 84
// end ;
125087: LD_VAR 0 4
125091: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
125092: LD_INT 0
125094: PPUSH
125095: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
125096: LD_VAR 0 1
125100: NOT
125101: PUSH
125102: LD_VAR 0 2
125106: PPUSH
125107: LD_VAR 0 3
125111: PPUSH
125112: CALL_OW 488
125116: NOT
125117: OR
125118: PUSH
125119: LD_VAR 0 1
125123: PPUSH
125124: CALL_OW 266
125128: PUSH
125129: LD_INT 3
125131: NONEQUAL
125132: PUSH
125133: LD_VAR 0 1
125137: PPUSH
125138: CALL_OW 247
125142: PUSH
125143: LD_INT 1
125145: EQUAL
125146: NOT
125147: AND
125148: OR
125149: IFFALSE 125153
// exit ;
125151: GO 125302
// if GetType ( factory ) = unit_human then
125153: LD_VAR 0 1
125157: PPUSH
125158: CALL_OW 247
125162: PUSH
125163: LD_INT 1
125165: EQUAL
125166: IFFALSE 125183
// factory := IsInUnit ( factory ) ;
125168: LD_ADDR_VAR 0 1
125172: PUSH
125173: LD_VAR 0 1
125177: PPUSH
125178: CALL_OW 310
125182: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
125183: LD_VAR 0 1
125187: PPUSH
125188: CALL_OW 266
125192: PUSH
125193: LD_INT 3
125195: NONEQUAL
125196: IFFALSE 125200
// exit ;
125198: GO 125302
// if HexInfo ( x , y ) = factory then
125200: LD_VAR 0 2
125204: PPUSH
125205: LD_VAR 0 3
125209: PPUSH
125210: CALL_OW 428
125214: PUSH
125215: LD_VAR 0 1
125219: EQUAL
125220: IFFALSE 125247
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
125222: LD_ADDR_EXP 205
125226: PUSH
125227: LD_EXP 205
125231: PPUSH
125232: LD_VAR 0 1
125236: PPUSH
125237: LD_INT 0
125239: PPUSH
125240: CALL_OW 1
125244: ST_TO_ADDR
125245: GO 125298
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
125247: LD_ADDR_EXP 205
125251: PUSH
125252: LD_EXP 205
125256: PPUSH
125257: LD_VAR 0 1
125261: PPUSH
125262: LD_VAR 0 1
125266: PPUSH
125267: CALL_OW 255
125271: PUSH
125272: LD_VAR 0 1
125276: PUSH
125277: LD_VAR 0 2
125281: PUSH
125282: LD_VAR 0 3
125286: PUSH
125287: EMPTY
125288: LIST
125289: LIST
125290: LIST
125291: LIST
125292: PPUSH
125293: CALL_OW 1
125297: ST_TO_ADDR
// UpdateFactoryWaypoints ;
125298: CALL 125307 0 0
// end ;
125302: LD_VAR 0 4
125306: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
125307: LD_INT 0
125309: PPUSH
125310: PPUSH
125311: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
125312: LD_STRING resetFactoryWaypoint();
125314: PPUSH
125315: CALL_OW 559
// if factoryWaypoints then
125319: LD_EXP 205
125323: IFFALSE 125449
// begin list := PrepareArray ( factoryWaypoints ) ;
125325: LD_ADDR_VAR 0 3
125329: PUSH
125330: LD_EXP 205
125334: PPUSH
125335: CALL 110137 0 1
125339: ST_TO_ADDR
// for i := 1 to list do
125340: LD_ADDR_VAR 0 2
125344: PUSH
125345: DOUBLE
125346: LD_INT 1
125348: DEC
125349: ST_TO_ADDR
125350: LD_VAR 0 3
125354: PUSH
125355: FOR_TO
125356: IFFALSE 125447
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
125358: LD_STRING setFactoryWaypointXY(
125360: PUSH
125361: LD_VAR 0 3
125365: PUSH
125366: LD_VAR 0 2
125370: ARRAY
125371: PUSH
125372: LD_INT 1
125374: ARRAY
125375: STR
125376: PUSH
125377: LD_STRING ,
125379: STR
125380: PUSH
125381: LD_VAR 0 3
125385: PUSH
125386: LD_VAR 0 2
125390: ARRAY
125391: PUSH
125392: LD_INT 2
125394: ARRAY
125395: STR
125396: PUSH
125397: LD_STRING ,
125399: STR
125400: PUSH
125401: LD_VAR 0 3
125405: PUSH
125406: LD_VAR 0 2
125410: ARRAY
125411: PUSH
125412: LD_INT 3
125414: ARRAY
125415: STR
125416: PUSH
125417: LD_STRING ,
125419: STR
125420: PUSH
125421: LD_VAR 0 3
125425: PUSH
125426: LD_VAR 0 2
125430: ARRAY
125431: PUSH
125432: LD_INT 4
125434: ARRAY
125435: STR
125436: PUSH
125437: LD_STRING )
125439: STR
125440: PPUSH
125441: CALL_OW 559
125445: GO 125355
125447: POP
125448: POP
// end ; end ;
125449: LD_VAR 0 1
125453: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
125454: LD_INT 0
125456: PPUSH
// if HexInfo ( x , y ) = warehouse then
125457: LD_VAR 0 2
125461: PPUSH
125462: LD_VAR 0 3
125466: PPUSH
125467: CALL_OW 428
125471: PUSH
125472: LD_VAR 0 1
125476: EQUAL
125477: IFFALSE 125504
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
125479: LD_ADDR_EXP 206
125483: PUSH
125484: LD_EXP 206
125488: PPUSH
125489: LD_VAR 0 1
125493: PPUSH
125494: LD_INT 0
125496: PPUSH
125497: CALL_OW 1
125501: ST_TO_ADDR
125502: GO 125555
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
125504: LD_ADDR_EXP 206
125508: PUSH
125509: LD_EXP 206
125513: PPUSH
125514: LD_VAR 0 1
125518: PPUSH
125519: LD_VAR 0 1
125523: PPUSH
125524: CALL_OW 255
125528: PUSH
125529: LD_VAR 0 1
125533: PUSH
125534: LD_VAR 0 2
125538: PUSH
125539: LD_VAR 0 3
125543: PUSH
125544: EMPTY
125545: LIST
125546: LIST
125547: LIST
125548: LIST
125549: PPUSH
125550: CALL_OW 1
125554: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
125555: CALL 125564 0 0
// end ;
125559: LD_VAR 0 4
125563: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
125564: LD_INT 0
125566: PPUSH
125567: PPUSH
125568: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
125569: LD_STRING resetWarehouseGatheringPoints();
125571: PPUSH
125572: CALL_OW 559
// if warehouseGatheringPoints then
125576: LD_EXP 206
125580: IFFALSE 125706
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
125582: LD_ADDR_VAR 0 3
125586: PUSH
125587: LD_EXP 206
125591: PPUSH
125592: CALL 110137 0 1
125596: ST_TO_ADDR
// for i := 1 to list do
125597: LD_ADDR_VAR 0 2
125601: PUSH
125602: DOUBLE
125603: LD_INT 1
125605: DEC
125606: ST_TO_ADDR
125607: LD_VAR 0 3
125611: PUSH
125612: FOR_TO
125613: IFFALSE 125704
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
125615: LD_STRING setWarehouseGatheringPointXY(
125617: PUSH
125618: LD_VAR 0 3
125622: PUSH
125623: LD_VAR 0 2
125627: ARRAY
125628: PUSH
125629: LD_INT 1
125631: ARRAY
125632: STR
125633: PUSH
125634: LD_STRING ,
125636: STR
125637: PUSH
125638: LD_VAR 0 3
125642: PUSH
125643: LD_VAR 0 2
125647: ARRAY
125648: PUSH
125649: LD_INT 2
125651: ARRAY
125652: STR
125653: PUSH
125654: LD_STRING ,
125656: STR
125657: PUSH
125658: LD_VAR 0 3
125662: PUSH
125663: LD_VAR 0 2
125667: ARRAY
125668: PUSH
125669: LD_INT 3
125671: ARRAY
125672: STR
125673: PUSH
125674: LD_STRING ,
125676: STR
125677: PUSH
125678: LD_VAR 0 3
125682: PUSH
125683: LD_VAR 0 2
125687: ARRAY
125688: PUSH
125689: LD_INT 4
125691: ARRAY
125692: STR
125693: PUSH
125694: LD_STRING )
125696: STR
125697: PPUSH
125698: CALL_OW 559
125702: GO 125612
125704: POP
125705: POP
// end ; end ;
125706: LD_VAR 0 1
125710: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
125711: LD_EXP 206
125715: IFFALSE 126400
125717: GO 125719
125719: DISABLE
125720: LD_INT 0
125722: PPUSH
125723: PPUSH
125724: PPUSH
125725: PPUSH
125726: PPUSH
125727: PPUSH
125728: PPUSH
125729: PPUSH
125730: PPUSH
// begin enable ;
125731: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
125732: LD_ADDR_VAR 0 3
125736: PUSH
125737: LD_EXP 206
125741: PPUSH
125742: CALL 110137 0 1
125746: ST_TO_ADDR
// if not list then
125747: LD_VAR 0 3
125751: NOT
125752: IFFALSE 125756
// exit ;
125754: GO 126400
// for i := 1 to list do
125756: LD_ADDR_VAR 0 1
125760: PUSH
125761: DOUBLE
125762: LD_INT 1
125764: DEC
125765: ST_TO_ADDR
125766: LD_VAR 0 3
125770: PUSH
125771: FOR_TO
125772: IFFALSE 126398
// begin depot := list [ i ] [ 2 ] ;
125774: LD_ADDR_VAR 0 8
125778: PUSH
125779: LD_VAR 0 3
125783: PUSH
125784: LD_VAR 0 1
125788: ARRAY
125789: PUSH
125790: LD_INT 2
125792: ARRAY
125793: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
125794: LD_ADDR_VAR 0 5
125798: PUSH
125799: LD_VAR 0 3
125803: PUSH
125804: LD_VAR 0 1
125808: ARRAY
125809: PUSH
125810: LD_INT 1
125812: ARRAY
125813: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
125814: LD_VAR 0 8
125818: PPUSH
125819: CALL_OW 301
125823: PUSH
125824: LD_VAR 0 5
125828: PUSH
125829: LD_VAR 0 8
125833: PPUSH
125834: CALL_OW 255
125838: NONEQUAL
125839: OR
125840: IFFALSE 125869
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
125842: LD_ADDR_EXP 206
125846: PUSH
125847: LD_EXP 206
125851: PPUSH
125852: LD_VAR 0 8
125856: PPUSH
125857: LD_INT 0
125859: PPUSH
125860: CALL_OW 1
125864: ST_TO_ADDR
// exit ;
125865: POP
125866: POP
125867: GO 126400
// end ; x := list [ i ] [ 3 ] ;
125869: LD_ADDR_VAR 0 6
125873: PUSH
125874: LD_VAR 0 3
125878: PUSH
125879: LD_VAR 0 1
125883: ARRAY
125884: PUSH
125885: LD_INT 3
125887: ARRAY
125888: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
125889: LD_ADDR_VAR 0 7
125893: PUSH
125894: LD_VAR 0 3
125898: PUSH
125899: LD_VAR 0 1
125903: ARRAY
125904: PUSH
125905: LD_INT 4
125907: ARRAY
125908: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
125909: LD_ADDR_VAR 0 9
125913: PUSH
125914: LD_VAR 0 6
125918: PPUSH
125919: LD_VAR 0 7
125923: PPUSH
125924: LD_INT 16
125926: PPUSH
125927: CALL 108725 0 3
125931: ST_TO_ADDR
// if not cratesNearbyPoint then
125932: LD_VAR 0 9
125936: NOT
125937: IFFALSE 125943
// exit ;
125939: POP
125940: POP
125941: GO 126400
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
125943: LD_ADDR_VAR 0 4
125947: PUSH
125948: LD_INT 22
125950: PUSH
125951: LD_VAR 0 5
125955: PUSH
125956: EMPTY
125957: LIST
125958: LIST
125959: PUSH
125960: LD_INT 3
125962: PUSH
125963: LD_INT 60
125965: PUSH
125966: EMPTY
125967: LIST
125968: PUSH
125969: EMPTY
125970: LIST
125971: LIST
125972: PUSH
125973: LD_INT 91
125975: PUSH
125976: LD_VAR 0 8
125980: PUSH
125981: LD_INT 6
125983: PUSH
125984: EMPTY
125985: LIST
125986: LIST
125987: LIST
125988: PUSH
125989: LD_INT 2
125991: PUSH
125992: LD_INT 25
125994: PUSH
125995: LD_INT 2
125997: PUSH
125998: EMPTY
125999: LIST
126000: LIST
126001: PUSH
126002: LD_INT 25
126004: PUSH
126005: LD_INT 16
126007: PUSH
126008: EMPTY
126009: LIST
126010: LIST
126011: PUSH
126012: EMPTY
126013: LIST
126014: LIST
126015: LIST
126016: PUSH
126017: EMPTY
126018: LIST
126019: LIST
126020: LIST
126021: LIST
126022: PPUSH
126023: CALL_OW 69
126027: PUSH
126028: LD_VAR 0 8
126032: PPUSH
126033: CALL_OW 313
126037: PPUSH
126038: LD_INT 3
126040: PUSH
126041: LD_INT 60
126043: PUSH
126044: EMPTY
126045: LIST
126046: PUSH
126047: EMPTY
126048: LIST
126049: LIST
126050: PUSH
126051: LD_INT 2
126053: PUSH
126054: LD_INT 25
126056: PUSH
126057: LD_INT 2
126059: PUSH
126060: EMPTY
126061: LIST
126062: LIST
126063: PUSH
126064: LD_INT 25
126066: PUSH
126067: LD_INT 16
126069: PUSH
126070: EMPTY
126071: LIST
126072: LIST
126073: PUSH
126074: EMPTY
126075: LIST
126076: LIST
126077: LIST
126078: PUSH
126079: EMPTY
126080: LIST
126081: LIST
126082: PPUSH
126083: CALL_OW 72
126087: UNION
126088: ST_TO_ADDR
// if tmp then
126089: LD_VAR 0 4
126093: IFFALSE 126173
// begin tmp := ShrinkArray ( tmp , 3 ) ;
126095: LD_ADDR_VAR 0 4
126099: PUSH
126100: LD_VAR 0 4
126104: PPUSH
126105: LD_INT 3
126107: PPUSH
126108: CALL 106694 0 2
126112: ST_TO_ADDR
// for j in tmp do
126113: LD_ADDR_VAR 0 2
126117: PUSH
126118: LD_VAR 0 4
126122: PUSH
126123: FOR_IN
126124: IFFALSE 126167
// begin if IsInUnit ( j ) then
126126: LD_VAR 0 2
126130: PPUSH
126131: CALL_OW 310
126135: IFFALSE 126146
// ComExit ( j ) ;
126137: LD_VAR 0 2
126141: PPUSH
126142: CALL 106777 0 1
// AddComCollect ( j , x , y ) ;
126146: LD_VAR 0 2
126150: PPUSH
126151: LD_VAR 0 6
126155: PPUSH
126156: LD_VAR 0 7
126160: PPUSH
126161: CALL_OW 177
// end ;
126165: GO 126123
126167: POP
126168: POP
// exit ;
126169: POP
126170: POP
126171: GO 126400
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
126173: LD_ADDR_VAR 0 4
126177: PUSH
126178: LD_INT 22
126180: PUSH
126181: LD_VAR 0 5
126185: PUSH
126186: EMPTY
126187: LIST
126188: LIST
126189: PUSH
126190: LD_INT 91
126192: PUSH
126193: LD_VAR 0 8
126197: PUSH
126198: LD_INT 8
126200: PUSH
126201: EMPTY
126202: LIST
126203: LIST
126204: LIST
126205: PUSH
126206: LD_INT 2
126208: PUSH
126209: LD_INT 34
126211: PUSH
126212: LD_INT 12
126214: PUSH
126215: EMPTY
126216: LIST
126217: LIST
126218: PUSH
126219: LD_INT 34
126221: PUSH
126222: LD_INT 51
126224: PUSH
126225: EMPTY
126226: LIST
126227: LIST
126228: PUSH
126229: LD_INT 34
126231: PUSH
126232: LD_INT 32
126234: PUSH
126235: EMPTY
126236: LIST
126237: LIST
126238: PUSH
126239: LD_INT 34
126241: PUSH
126242: LD_INT 89
126244: PUSH
126245: EMPTY
126246: LIST
126247: LIST
126248: PUSH
126249: EMPTY
126250: LIST
126251: LIST
126252: LIST
126253: LIST
126254: LIST
126255: PUSH
126256: EMPTY
126257: LIST
126258: LIST
126259: LIST
126260: PPUSH
126261: CALL_OW 69
126265: ST_TO_ADDR
// if tmp then
126266: LD_VAR 0 4
126270: IFFALSE 126396
// begin for j in tmp do
126272: LD_ADDR_VAR 0 2
126276: PUSH
126277: LD_VAR 0 4
126281: PUSH
126282: FOR_IN
126283: IFFALSE 126394
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
126285: LD_VAR 0 2
126289: PPUSH
126290: CALL_OW 262
126294: PUSH
126295: LD_INT 3
126297: EQUAL
126298: PUSH
126299: LD_VAR 0 2
126303: PPUSH
126304: CALL_OW 261
126308: PUSH
126309: LD_INT 20
126311: GREATER
126312: OR
126313: PUSH
126314: LD_VAR 0 2
126318: PPUSH
126319: CALL_OW 314
126323: NOT
126324: AND
126325: PUSH
126326: LD_VAR 0 2
126330: PPUSH
126331: CALL_OW 263
126335: PUSH
126336: LD_INT 1
126338: NONEQUAL
126339: PUSH
126340: LD_VAR 0 2
126344: PPUSH
126345: CALL_OW 311
126349: OR
126350: AND
126351: IFFALSE 126392
// begin ComCollect ( j , x , y ) ;
126353: LD_VAR 0 2
126357: PPUSH
126358: LD_VAR 0 6
126362: PPUSH
126363: LD_VAR 0 7
126367: PPUSH
126368: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
126372: LD_VAR 0 2
126376: PPUSH
126377: LD_VAR 0 8
126381: PPUSH
126382: CALL_OW 172
// exit ;
126386: POP
126387: POP
126388: POP
126389: POP
126390: GO 126400
// end ;
126392: GO 126282
126394: POP
126395: POP
// end ; end ;
126396: GO 125771
126398: POP
126399: POP
// end ; end_of_file
126400: PPOPN 9
126402: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
126403: LD_INT 0
126405: PPUSH
126406: PPUSH
126407: PPUSH
126408: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
126409: LD_VAR 0 1
126413: PPUSH
126414: CALL_OW 264
126418: PUSH
126419: LD_INT 91
126421: EQUAL
126422: IFFALSE 126494
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
126424: LD_INT 68
126426: PPUSH
126427: LD_VAR 0 1
126431: PPUSH
126432: CALL_OW 255
126436: PPUSH
126437: CALL_OW 321
126441: PUSH
126442: LD_INT 2
126444: EQUAL
126445: IFFALSE 126457
// eff := 70 else
126447: LD_ADDR_VAR 0 4
126451: PUSH
126452: LD_INT 70
126454: ST_TO_ADDR
126455: GO 126465
// eff := 30 ;
126457: LD_ADDR_VAR 0 4
126461: PUSH
126462: LD_INT 30
126464: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
126465: LD_VAR 0 1
126469: PPUSH
126470: CALL_OW 250
126474: PPUSH
126475: LD_VAR 0 1
126479: PPUSH
126480: CALL_OW 251
126484: PPUSH
126485: LD_VAR 0 4
126489: PPUSH
126490: CALL_OW 495
// end ; end ;
126494: LD_VAR 0 2
126498: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
126499: LD_INT 0
126501: PPUSH
// end ;
126502: LD_VAR 0 4
126506: RET
// export function SOS_Command ( cmd ) ; begin
126507: LD_INT 0
126509: PPUSH
// end ;
126510: LD_VAR 0 2
126514: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
126515: LD_INT 0
126517: PPUSH
// end ;
126518: LD_VAR 0 6
126522: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
126523: LD_INT 0
126525: PPUSH
126526: PPUSH
// if not vehicle or not factory then
126527: LD_VAR 0 1
126531: NOT
126532: PUSH
126533: LD_VAR 0 2
126537: NOT
126538: OR
126539: IFFALSE 126543
// exit ;
126541: GO 126774
// if factoryWaypoints >= factory then
126543: LD_EXP 205
126547: PUSH
126548: LD_VAR 0 2
126552: GREATEREQUAL
126553: IFFALSE 126774
// if factoryWaypoints [ factory ] then
126555: LD_EXP 205
126559: PUSH
126560: LD_VAR 0 2
126564: ARRAY
126565: IFFALSE 126774
// begin if GetControl ( vehicle ) = control_manual then
126567: LD_VAR 0 1
126571: PPUSH
126572: CALL_OW 263
126576: PUSH
126577: LD_INT 1
126579: EQUAL
126580: IFFALSE 126661
// begin driver := IsDrivenBy ( vehicle ) ;
126582: LD_ADDR_VAR 0 4
126586: PUSH
126587: LD_VAR 0 1
126591: PPUSH
126592: CALL_OW 311
126596: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
126597: LD_VAR 0 4
126601: PPUSH
126602: LD_EXP 205
126606: PUSH
126607: LD_VAR 0 2
126611: ARRAY
126612: PUSH
126613: LD_INT 3
126615: ARRAY
126616: PPUSH
126617: LD_EXP 205
126621: PUSH
126622: LD_VAR 0 2
126626: ARRAY
126627: PUSH
126628: LD_INT 4
126630: ARRAY
126631: PPUSH
126632: CALL_OW 171
// AddComExitVehicle ( driver ) ;
126636: LD_VAR 0 4
126640: PPUSH
126641: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
126645: LD_VAR 0 4
126649: PPUSH
126650: LD_VAR 0 2
126654: PPUSH
126655: CALL_OW 180
// end else
126659: GO 126774
// if GetControl ( vehicle ) = control_remote then
126661: LD_VAR 0 1
126665: PPUSH
126666: CALL_OW 263
126670: PUSH
126671: LD_INT 2
126673: EQUAL
126674: IFFALSE 126735
// begin wait ( 0 0$2 ) ;
126676: LD_INT 70
126678: PPUSH
126679: CALL_OW 67
// if Connect ( vehicle ) then
126683: LD_VAR 0 1
126687: PPUSH
126688: CALL 76998 0 1
126692: IFFALSE 126733
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
126694: LD_VAR 0 1
126698: PPUSH
126699: LD_EXP 205
126703: PUSH
126704: LD_VAR 0 2
126708: ARRAY
126709: PUSH
126710: LD_INT 3
126712: ARRAY
126713: PPUSH
126714: LD_EXP 205
126718: PUSH
126719: LD_VAR 0 2
126723: ARRAY
126724: PUSH
126725: LD_INT 4
126727: ARRAY
126728: PPUSH
126729: CALL_OW 171
// end else
126733: GO 126774
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
126735: LD_VAR 0 1
126739: PPUSH
126740: LD_EXP 205
126744: PUSH
126745: LD_VAR 0 2
126749: ARRAY
126750: PUSH
126751: LD_INT 3
126753: ARRAY
126754: PPUSH
126755: LD_EXP 205
126759: PUSH
126760: LD_VAR 0 2
126764: ARRAY
126765: PUSH
126766: LD_INT 4
126768: ARRAY
126769: PPUSH
126770: CALL_OW 171
// end ; end ;
126774: LD_VAR 0 3
126778: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
126779: LD_INT 0
126781: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
126782: LD_VAR 0 1
126786: PUSH
126787: LD_INT 250
126789: EQUAL
126790: PUSH
126791: LD_VAR 0 2
126795: PPUSH
126796: CALL_OW 264
126800: PUSH
126801: LD_INT 81
126803: EQUAL
126804: AND
126805: IFFALSE 126826
// MinerPlaceMine ( unit , x , y ) ;
126807: LD_VAR 0 2
126811: PPUSH
126812: LD_VAR 0 4
126816: PPUSH
126817: LD_VAR 0 5
126821: PPUSH
126822: CALL 129211 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
126826: LD_VAR 0 1
126830: PUSH
126831: LD_INT 251
126833: EQUAL
126834: PUSH
126835: LD_VAR 0 2
126839: PPUSH
126840: CALL_OW 264
126844: PUSH
126845: LD_INT 81
126847: EQUAL
126848: AND
126849: IFFALSE 126870
// MinerDetonateMine ( unit , x , y ) ;
126851: LD_VAR 0 2
126855: PPUSH
126856: LD_VAR 0 4
126860: PPUSH
126861: LD_VAR 0 5
126865: PPUSH
126866: CALL 129486 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
126870: LD_VAR 0 1
126874: PUSH
126875: LD_INT 252
126877: EQUAL
126878: PUSH
126879: LD_VAR 0 2
126883: PPUSH
126884: CALL_OW 264
126888: PUSH
126889: LD_INT 81
126891: EQUAL
126892: AND
126893: IFFALSE 126914
// MinerCreateMinefield ( unit , x , y ) ;
126895: LD_VAR 0 2
126899: PPUSH
126900: LD_VAR 0 4
126904: PPUSH
126905: LD_VAR 0 5
126909: PPUSH
126910: CALL 129903 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
126914: LD_VAR 0 1
126918: PUSH
126919: LD_INT 253
126921: EQUAL
126922: PUSH
126923: LD_VAR 0 2
126927: PPUSH
126928: CALL_OW 257
126932: PUSH
126933: LD_INT 5
126935: EQUAL
126936: AND
126937: IFFALSE 126958
// ComBinocular ( unit , x , y ) ;
126939: LD_VAR 0 2
126943: PPUSH
126944: LD_VAR 0 4
126948: PPUSH
126949: LD_VAR 0 5
126953: PPUSH
126954: CALL 130272 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
126958: LD_VAR 0 1
126962: PUSH
126963: LD_INT 254
126965: EQUAL
126966: PUSH
126967: LD_VAR 0 2
126971: PPUSH
126972: CALL_OW 264
126976: PUSH
126977: LD_INT 99
126979: EQUAL
126980: AND
126981: PUSH
126982: LD_VAR 0 3
126986: PPUSH
126987: CALL_OW 263
126991: PUSH
126992: LD_INT 3
126994: EQUAL
126995: AND
126996: IFFALSE 127012
// HackDestroyVehicle ( unit , selectedUnit ) ;
126998: LD_VAR 0 2
127002: PPUSH
127003: LD_VAR 0 3
127007: PPUSH
127008: CALL 128575 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
127012: LD_VAR 0 1
127016: PUSH
127017: LD_INT 255
127019: EQUAL
127020: PUSH
127021: LD_VAR 0 2
127025: PPUSH
127026: CALL_OW 264
127030: PUSH
127031: LD_INT 14
127033: PUSH
127034: LD_INT 53
127036: PUSH
127037: EMPTY
127038: LIST
127039: LIST
127040: IN
127041: AND
127042: PUSH
127043: LD_VAR 0 4
127047: PPUSH
127048: LD_VAR 0 5
127052: PPUSH
127053: CALL_OW 488
127057: AND
127058: IFFALSE 127082
// CutTreeXYR ( unit , x , y , 12 ) ;
127060: LD_VAR 0 2
127064: PPUSH
127065: LD_VAR 0 4
127069: PPUSH
127070: LD_VAR 0 5
127074: PPUSH
127075: LD_INT 12
127077: PPUSH
127078: CALL 127145 0 4
// if cmd = 256 then
127082: LD_VAR 0 1
127086: PUSH
127087: LD_INT 256
127089: EQUAL
127090: IFFALSE 127111
// SetFactoryWaypoint ( unit , x , y ) ;
127092: LD_VAR 0 2
127096: PPUSH
127097: LD_VAR 0 4
127101: PPUSH
127102: LD_VAR 0 5
127106: PPUSH
127107: CALL 125092 0 3
// if cmd = 257 then
127111: LD_VAR 0 1
127115: PUSH
127116: LD_INT 257
127118: EQUAL
127119: IFFALSE 127140
// SetWarehouseGatheringPoint ( unit , x , y ) ;
127121: LD_VAR 0 2
127125: PPUSH
127126: LD_VAR 0 4
127130: PPUSH
127131: LD_VAR 0 5
127135: PPUSH
127136: CALL 125454 0 3
// end ;
127140: LD_VAR 0 6
127144: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
127145: LD_INT 0
127147: PPUSH
127148: PPUSH
127149: PPUSH
127150: PPUSH
127151: PPUSH
127152: PPUSH
127153: PPUSH
127154: PPUSH
127155: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
127156: LD_VAR 0 1
127160: NOT
127161: PUSH
127162: LD_VAR 0 2
127166: PPUSH
127167: LD_VAR 0 3
127171: PPUSH
127172: CALL_OW 488
127176: NOT
127177: OR
127178: PUSH
127179: LD_VAR 0 4
127183: NOT
127184: OR
127185: IFFALSE 127189
// exit ;
127187: GO 127529
// list := [ ] ;
127189: LD_ADDR_VAR 0 13
127193: PUSH
127194: EMPTY
127195: ST_TO_ADDR
// if x - r < 0 then
127196: LD_VAR 0 2
127200: PUSH
127201: LD_VAR 0 4
127205: MINUS
127206: PUSH
127207: LD_INT 0
127209: LESS
127210: IFFALSE 127222
// min_x := 0 else
127212: LD_ADDR_VAR 0 7
127216: PUSH
127217: LD_INT 0
127219: ST_TO_ADDR
127220: GO 127238
// min_x := x - r ;
127222: LD_ADDR_VAR 0 7
127226: PUSH
127227: LD_VAR 0 2
127231: PUSH
127232: LD_VAR 0 4
127236: MINUS
127237: ST_TO_ADDR
// if y - r < 0 then
127238: LD_VAR 0 3
127242: PUSH
127243: LD_VAR 0 4
127247: MINUS
127248: PUSH
127249: LD_INT 0
127251: LESS
127252: IFFALSE 127264
// min_y := 0 else
127254: LD_ADDR_VAR 0 8
127258: PUSH
127259: LD_INT 0
127261: ST_TO_ADDR
127262: GO 127280
// min_y := y - r ;
127264: LD_ADDR_VAR 0 8
127268: PUSH
127269: LD_VAR 0 3
127273: PUSH
127274: LD_VAR 0 4
127278: MINUS
127279: ST_TO_ADDR
// max_x := x + r ;
127280: LD_ADDR_VAR 0 9
127284: PUSH
127285: LD_VAR 0 2
127289: PUSH
127290: LD_VAR 0 4
127294: PLUS
127295: ST_TO_ADDR
// max_y := y + r ;
127296: LD_ADDR_VAR 0 10
127300: PUSH
127301: LD_VAR 0 3
127305: PUSH
127306: LD_VAR 0 4
127310: PLUS
127311: ST_TO_ADDR
// for _x = min_x to max_x do
127312: LD_ADDR_VAR 0 11
127316: PUSH
127317: DOUBLE
127318: LD_VAR 0 7
127322: DEC
127323: ST_TO_ADDR
127324: LD_VAR 0 9
127328: PUSH
127329: FOR_TO
127330: IFFALSE 127447
// for _y = min_y to max_y do
127332: LD_ADDR_VAR 0 12
127336: PUSH
127337: DOUBLE
127338: LD_VAR 0 8
127342: DEC
127343: ST_TO_ADDR
127344: LD_VAR 0 10
127348: PUSH
127349: FOR_TO
127350: IFFALSE 127443
// begin if not ValidHex ( _x , _y ) then
127352: LD_VAR 0 11
127356: PPUSH
127357: LD_VAR 0 12
127361: PPUSH
127362: CALL_OW 488
127366: NOT
127367: IFFALSE 127371
// continue ;
127369: GO 127349
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
127371: LD_VAR 0 11
127375: PPUSH
127376: LD_VAR 0 12
127380: PPUSH
127381: CALL_OW 351
127385: PUSH
127386: LD_VAR 0 11
127390: PPUSH
127391: LD_VAR 0 12
127395: PPUSH
127396: CALL_OW 554
127400: AND
127401: IFFALSE 127441
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
127403: LD_ADDR_VAR 0 13
127407: PUSH
127408: LD_VAR 0 13
127412: PPUSH
127413: LD_VAR 0 13
127417: PUSH
127418: LD_INT 1
127420: PLUS
127421: PPUSH
127422: LD_VAR 0 11
127426: PUSH
127427: LD_VAR 0 12
127431: PUSH
127432: EMPTY
127433: LIST
127434: LIST
127435: PPUSH
127436: CALL_OW 2
127440: ST_TO_ADDR
// end ;
127441: GO 127349
127443: POP
127444: POP
127445: GO 127329
127447: POP
127448: POP
// if not list then
127449: LD_VAR 0 13
127453: NOT
127454: IFFALSE 127458
// exit ;
127456: GO 127529
// for i in list do
127458: LD_ADDR_VAR 0 6
127462: PUSH
127463: LD_VAR 0 13
127467: PUSH
127468: FOR_IN
127469: IFFALSE 127527
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
127471: LD_VAR 0 1
127475: PPUSH
127476: LD_STRING M
127478: PUSH
127479: LD_VAR 0 6
127483: PUSH
127484: LD_INT 1
127486: ARRAY
127487: PUSH
127488: LD_VAR 0 6
127492: PUSH
127493: LD_INT 2
127495: ARRAY
127496: PUSH
127497: LD_INT 0
127499: PUSH
127500: LD_INT 0
127502: PUSH
127503: LD_INT 0
127505: PUSH
127506: LD_INT 0
127508: PUSH
127509: EMPTY
127510: LIST
127511: LIST
127512: LIST
127513: LIST
127514: LIST
127515: LIST
127516: LIST
127517: PUSH
127518: EMPTY
127519: LIST
127520: PPUSH
127521: CALL_OW 447
127525: GO 127468
127527: POP
127528: POP
// end ;
127529: LD_VAR 0 5
127533: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
127534: LD_EXP 208
127538: NOT
127539: IFFALSE 127589
127541: GO 127543
127543: DISABLE
// begin initHack := true ;
127544: LD_ADDR_EXP 208
127548: PUSH
127549: LD_INT 1
127551: ST_TO_ADDR
// hackTanks := [ ] ;
127552: LD_ADDR_EXP 209
127556: PUSH
127557: EMPTY
127558: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
127559: LD_ADDR_EXP 210
127563: PUSH
127564: EMPTY
127565: ST_TO_ADDR
// hackLimit := 3 ;
127566: LD_ADDR_EXP 211
127570: PUSH
127571: LD_INT 3
127573: ST_TO_ADDR
// hackDist := 12 ;
127574: LD_ADDR_EXP 212
127578: PUSH
127579: LD_INT 12
127581: ST_TO_ADDR
// hackCounter := [ ] ;
127582: LD_ADDR_EXP 213
127586: PUSH
127587: EMPTY
127588: ST_TO_ADDR
// end ;
127589: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
127590: LD_EXP 208
127594: PUSH
127595: LD_INT 34
127597: PUSH
127598: LD_INT 99
127600: PUSH
127601: EMPTY
127602: LIST
127603: LIST
127604: PPUSH
127605: CALL_OW 69
127609: AND
127610: IFFALSE 127863
127612: GO 127614
127614: DISABLE
127615: LD_INT 0
127617: PPUSH
127618: PPUSH
// begin enable ;
127619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
127620: LD_ADDR_VAR 0 1
127624: PUSH
127625: LD_INT 34
127627: PUSH
127628: LD_INT 99
127630: PUSH
127631: EMPTY
127632: LIST
127633: LIST
127634: PPUSH
127635: CALL_OW 69
127639: PUSH
127640: FOR_IN
127641: IFFALSE 127861
// begin if not i in hackTanks then
127643: LD_VAR 0 1
127647: PUSH
127648: LD_EXP 209
127652: IN
127653: NOT
127654: IFFALSE 127737
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
127656: LD_ADDR_EXP 209
127660: PUSH
127661: LD_EXP 209
127665: PPUSH
127666: LD_EXP 209
127670: PUSH
127671: LD_INT 1
127673: PLUS
127674: PPUSH
127675: LD_VAR 0 1
127679: PPUSH
127680: CALL_OW 1
127684: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
127685: LD_ADDR_EXP 210
127689: PUSH
127690: LD_EXP 210
127694: PPUSH
127695: LD_EXP 210
127699: PUSH
127700: LD_INT 1
127702: PLUS
127703: PPUSH
127704: EMPTY
127705: PPUSH
127706: CALL_OW 1
127710: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
127711: LD_ADDR_EXP 213
127715: PUSH
127716: LD_EXP 213
127720: PPUSH
127721: LD_EXP 213
127725: PUSH
127726: LD_INT 1
127728: PLUS
127729: PPUSH
127730: EMPTY
127731: PPUSH
127732: CALL_OW 1
127736: ST_TO_ADDR
// end ; if not IsOk ( i ) then
127737: LD_VAR 0 1
127741: PPUSH
127742: CALL_OW 302
127746: NOT
127747: IFFALSE 127760
// begin HackUnlinkAll ( i ) ;
127749: LD_VAR 0 1
127753: PPUSH
127754: CALL 127866 0 1
// continue ;
127758: GO 127640
// end ; HackCheckCapturedStatus ( i ) ;
127760: LD_VAR 0 1
127764: PPUSH
127765: CALL 128309 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
127769: LD_ADDR_VAR 0 2
127773: PUSH
127774: LD_INT 81
127776: PUSH
127777: LD_VAR 0 1
127781: PPUSH
127782: CALL_OW 255
127786: PUSH
127787: EMPTY
127788: LIST
127789: LIST
127790: PUSH
127791: LD_INT 33
127793: PUSH
127794: LD_INT 3
127796: PUSH
127797: EMPTY
127798: LIST
127799: LIST
127800: PUSH
127801: LD_INT 91
127803: PUSH
127804: LD_VAR 0 1
127808: PUSH
127809: LD_EXP 212
127813: PUSH
127814: EMPTY
127815: LIST
127816: LIST
127817: LIST
127818: PUSH
127819: LD_INT 50
127821: PUSH
127822: EMPTY
127823: LIST
127824: PUSH
127825: EMPTY
127826: LIST
127827: LIST
127828: LIST
127829: LIST
127830: PPUSH
127831: CALL_OW 69
127835: ST_TO_ADDR
// if not tmp then
127836: LD_VAR 0 2
127840: NOT
127841: IFFALSE 127845
// continue ;
127843: GO 127640
// HackLink ( i , tmp ) ;
127845: LD_VAR 0 1
127849: PPUSH
127850: LD_VAR 0 2
127854: PPUSH
127855: CALL 128002 0 2
// end ;
127859: GO 127640
127861: POP
127862: POP
// end ;
127863: PPOPN 2
127865: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
127866: LD_INT 0
127868: PPUSH
127869: PPUSH
127870: PPUSH
// if not hack in hackTanks then
127871: LD_VAR 0 1
127875: PUSH
127876: LD_EXP 209
127880: IN
127881: NOT
127882: IFFALSE 127886
// exit ;
127884: GO 127997
// index := GetElementIndex ( hackTanks , hack ) ;
127886: LD_ADDR_VAR 0 4
127890: PUSH
127891: LD_EXP 209
127895: PPUSH
127896: LD_VAR 0 1
127900: PPUSH
127901: CALL 73805 0 2
127905: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
127906: LD_EXP 210
127910: PUSH
127911: LD_VAR 0 4
127915: ARRAY
127916: IFFALSE 127997
// begin for i in hackTanksCaptured [ index ] do
127918: LD_ADDR_VAR 0 3
127922: PUSH
127923: LD_EXP 210
127927: PUSH
127928: LD_VAR 0 4
127932: ARRAY
127933: PUSH
127934: FOR_IN
127935: IFFALSE 127961
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
127937: LD_VAR 0 3
127941: PUSH
127942: LD_INT 1
127944: ARRAY
127945: PPUSH
127946: LD_VAR 0 3
127950: PUSH
127951: LD_INT 2
127953: ARRAY
127954: PPUSH
127955: CALL_OW 235
127959: GO 127934
127961: POP
127962: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
127963: LD_ADDR_EXP 210
127967: PUSH
127968: LD_EXP 210
127972: PPUSH
127973: LD_VAR 0 4
127977: PPUSH
127978: EMPTY
127979: PPUSH
127980: CALL_OW 1
127984: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
127985: LD_VAR 0 1
127989: PPUSH
127990: LD_INT 0
127992: PPUSH
127993: CALL_OW 505
// end ; end ;
127997: LD_VAR 0 2
128001: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
128002: LD_INT 0
128004: PPUSH
128005: PPUSH
128006: PPUSH
// if not hack in hackTanks or not vehicles then
128007: LD_VAR 0 1
128011: PUSH
128012: LD_EXP 209
128016: IN
128017: NOT
128018: PUSH
128019: LD_VAR 0 2
128023: NOT
128024: OR
128025: IFFALSE 128029
// exit ;
128027: GO 128304
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
128029: LD_ADDR_VAR 0 2
128033: PUSH
128034: LD_VAR 0 1
128038: PPUSH
128039: LD_VAR 0 2
128043: PPUSH
128044: LD_INT 1
128046: PPUSH
128047: LD_INT 1
128049: PPUSH
128050: CALL 74455 0 4
128054: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
128055: LD_ADDR_VAR 0 5
128059: PUSH
128060: LD_EXP 209
128064: PPUSH
128065: LD_VAR 0 1
128069: PPUSH
128070: CALL 73805 0 2
128074: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
128075: LD_EXP 210
128079: PUSH
128080: LD_VAR 0 5
128084: ARRAY
128085: PUSH
128086: LD_EXP 211
128090: LESS
128091: IFFALSE 128280
// begin for i := 1 to vehicles do
128093: LD_ADDR_VAR 0 4
128097: PUSH
128098: DOUBLE
128099: LD_INT 1
128101: DEC
128102: ST_TO_ADDR
128103: LD_VAR 0 2
128107: PUSH
128108: FOR_TO
128109: IFFALSE 128278
// begin if hackTanksCaptured [ index ] = hackLimit then
128111: LD_EXP 210
128115: PUSH
128116: LD_VAR 0 5
128120: ARRAY
128121: PUSH
128122: LD_EXP 211
128126: EQUAL
128127: IFFALSE 128131
// break ;
128129: GO 128278
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
128131: LD_ADDR_EXP 213
128135: PUSH
128136: LD_EXP 213
128140: PPUSH
128141: LD_VAR 0 5
128145: PPUSH
128146: LD_EXP 213
128150: PUSH
128151: LD_VAR 0 5
128155: ARRAY
128156: PUSH
128157: LD_INT 1
128159: PLUS
128160: PPUSH
128161: CALL_OW 1
128165: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
128166: LD_ADDR_EXP 210
128170: PUSH
128171: LD_EXP 210
128175: PPUSH
128176: LD_VAR 0 5
128180: PUSH
128181: LD_EXP 210
128185: PUSH
128186: LD_VAR 0 5
128190: ARRAY
128191: PUSH
128192: LD_INT 1
128194: PLUS
128195: PUSH
128196: EMPTY
128197: LIST
128198: LIST
128199: PPUSH
128200: LD_VAR 0 2
128204: PUSH
128205: LD_VAR 0 4
128209: ARRAY
128210: PUSH
128211: LD_VAR 0 2
128215: PUSH
128216: LD_VAR 0 4
128220: ARRAY
128221: PPUSH
128222: CALL_OW 255
128226: PUSH
128227: EMPTY
128228: LIST
128229: LIST
128230: PPUSH
128231: CALL 74020 0 3
128235: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
128236: LD_VAR 0 2
128240: PUSH
128241: LD_VAR 0 4
128245: ARRAY
128246: PPUSH
128247: LD_VAR 0 1
128251: PPUSH
128252: CALL_OW 255
128256: PPUSH
128257: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
128261: LD_VAR 0 2
128265: PUSH
128266: LD_VAR 0 4
128270: ARRAY
128271: PPUSH
128272: CALL_OW 141
// end ;
128276: GO 128108
128278: POP
128279: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
128280: LD_VAR 0 1
128284: PPUSH
128285: LD_EXP 210
128289: PUSH
128290: LD_VAR 0 5
128294: ARRAY
128295: PUSH
128296: LD_INT 0
128298: PLUS
128299: PPUSH
128300: CALL_OW 505
// end ;
128304: LD_VAR 0 3
128308: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
128309: LD_INT 0
128311: PPUSH
128312: PPUSH
128313: PPUSH
128314: PPUSH
// if not hack in hackTanks then
128315: LD_VAR 0 1
128319: PUSH
128320: LD_EXP 209
128324: IN
128325: NOT
128326: IFFALSE 128330
// exit ;
128328: GO 128570
// index := GetElementIndex ( hackTanks , hack ) ;
128330: LD_ADDR_VAR 0 4
128334: PUSH
128335: LD_EXP 209
128339: PPUSH
128340: LD_VAR 0 1
128344: PPUSH
128345: CALL 73805 0 2
128349: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
128350: LD_ADDR_VAR 0 3
128354: PUSH
128355: DOUBLE
128356: LD_EXP 210
128360: PUSH
128361: LD_VAR 0 4
128365: ARRAY
128366: INC
128367: ST_TO_ADDR
128368: LD_INT 1
128370: PUSH
128371: FOR_DOWNTO
128372: IFFALSE 128544
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
128374: LD_ADDR_VAR 0 5
128378: PUSH
128379: LD_EXP 210
128383: PUSH
128384: LD_VAR 0 4
128388: ARRAY
128389: PUSH
128390: LD_VAR 0 3
128394: ARRAY
128395: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
128396: LD_VAR 0 5
128400: PUSH
128401: LD_INT 1
128403: ARRAY
128404: PPUSH
128405: CALL_OW 302
128409: NOT
128410: PUSH
128411: LD_VAR 0 5
128415: PUSH
128416: LD_INT 1
128418: ARRAY
128419: PPUSH
128420: CALL_OW 255
128424: PUSH
128425: LD_VAR 0 1
128429: PPUSH
128430: CALL_OW 255
128434: NONEQUAL
128435: OR
128436: IFFALSE 128542
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
128438: LD_VAR 0 5
128442: PUSH
128443: LD_INT 1
128445: ARRAY
128446: PPUSH
128447: CALL_OW 305
128451: PUSH
128452: LD_VAR 0 5
128456: PUSH
128457: LD_INT 1
128459: ARRAY
128460: PPUSH
128461: CALL_OW 255
128465: PUSH
128466: LD_VAR 0 1
128470: PPUSH
128471: CALL_OW 255
128475: EQUAL
128476: AND
128477: IFFALSE 128501
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
128479: LD_VAR 0 5
128483: PUSH
128484: LD_INT 1
128486: ARRAY
128487: PPUSH
128488: LD_VAR 0 5
128492: PUSH
128493: LD_INT 2
128495: ARRAY
128496: PPUSH
128497: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
128501: LD_ADDR_EXP 210
128505: PUSH
128506: LD_EXP 210
128510: PPUSH
128511: LD_VAR 0 4
128515: PPUSH
128516: LD_EXP 210
128520: PUSH
128521: LD_VAR 0 4
128525: ARRAY
128526: PPUSH
128527: LD_VAR 0 3
128531: PPUSH
128532: CALL_OW 3
128536: PPUSH
128537: CALL_OW 1
128541: ST_TO_ADDR
// end ; end ;
128542: GO 128371
128544: POP
128545: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
128546: LD_VAR 0 1
128550: PPUSH
128551: LD_EXP 210
128555: PUSH
128556: LD_VAR 0 4
128560: ARRAY
128561: PUSH
128562: LD_INT 0
128564: PLUS
128565: PPUSH
128566: CALL_OW 505
// end ;
128570: LD_VAR 0 2
128574: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
128575: LD_INT 0
128577: PPUSH
128578: PPUSH
128579: PPUSH
128580: PPUSH
// if not hack in hackTanks then
128581: LD_VAR 0 1
128585: PUSH
128586: LD_EXP 209
128590: IN
128591: NOT
128592: IFFALSE 128596
// exit ;
128594: GO 128681
// index := GetElementIndex ( hackTanks , hack ) ;
128596: LD_ADDR_VAR 0 5
128600: PUSH
128601: LD_EXP 209
128605: PPUSH
128606: LD_VAR 0 1
128610: PPUSH
128611: CALL 73805 0 2
128615: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
128616: LD_ADDR_VAR 0 4
128620: PUSH
128621: DOUBLE
128622: LD_INT 1
128624: DEC
128625: ST_TO_ADDR
128626: LD_EXP 210
128630: PUSH
128631: LD_VAR 0 5
128635: ARRAY
128636: PUSH
128637: FOR_TO
128638: IFFALSE 128679
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
128640: LD_EXP 210
128644: PUSH
128645: LD_VAR 0 5
128649: ARRAY
128650: PUSH
128651: LD_VAR 0 4
128655: ARRAY
128656: PUSH
128657: LD_INT 1
128659: ARRAY
128660: PUSH
128661: LD_VAR 0 2
128665: EQUAL
128666: IFFALSE 128677
// KillUnit ( vehicle ) ;
128668: LD_VAR 0 2
128672: PPUSH
128673: CALL_OW 66
128677: GO 128637
128679: POP
128680: POP
// end ;
128681: LD_VAR 0 3
128685: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
128686: LD_EXP 214
128690: NOT
128691: IFFALSE 128726
128693: GO 128695
128695: DISABLE
// begin initMiner := true ;
128696: LD_ADDR_EXP 214
128700: PUSH
128701: LD_INT 1
128703: ST_TO_ADDR
// minersList := [ ] ;
128704: LD_ADDR_EXP 215
128708: PUSH
128709: EMPTY
128710: ST_TO_ADDR
// minerMinesList := [ ] ;
128711: LD_ADDR_EXP 216
128715: PUSH
128716: EMPTY
128717: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
128718: LD_ADDR_EXP 217
128722: PUSH
128723: LD_INT 5
128725: ST_TO_ADDR
// end ;
128726: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
128727: LD_EXP 214
128731: PUSH
128732: LD_INT 34
128734: PUSH
128735: LD_INT 81
128737: PUSH
128738: EMPTY
128739: LIST
128740: LIST
128741: PPUSH
128742: CALL_OW 69
128746: AND
128747: IFFALSE 129208
128749: GO 128751
128751: DISABLE
128752: LD_INT 0
128754: PPUSH
128755: PPUSH
128756: PPUSH
128757: PPUSH
// begin enable ;
128758: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
128759: LD_ADDR_VAR 0 1
128763: PUSH
128764: LD_INT 34
128766: PUSH
128767: LD_INT 81
128769: PUSH
128770: EMPTY
128771: LIST
128772: LIST
128773: PPUSH
128774: CALL_OW 69
128778: PUSH
128779: FOR_IN
128780: IFFALSE 128852
// begin if not i in minersList then
128782: LD_VAR 0 1
128786: PUSH
128787: LD_EXP 215
128791: IN
128792: NOT
128793: IFFALSE 128850
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
128795: LD_ADDR_EXP 215
128799: PUSH
128800: LD_EXP 215
128804: PPUSH
128805: LD_EXP 215
128809: PUSH
128810: LD_INT 1
128812: PLUS
128813: PPUSH
128814: LD_VAR 0 1
128818: PPUSH
128819: CALL_OW 1
128823: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
128824: LD_ADDR_EXP 216
128828: PUSH
128829: LD_EXP 216
128833: PPUSH
128834: LD_EXP 216
128838: PUSH
128839: LD_INT 1
128841: PLUS
128842: PPUSH
128843: EMPTY
128844: PPUSH
128845: CALL_OW 1
128849: ST_TO_ADDR
// end end ;
128850: GO 128779
128852: POP
128853: POP
// for i := minerMinesList downto 1 do
128854: LD_ADDR_VAR 0 1
128858: PUSH
128859: DOUBLE
128860: LD_EXP 216
128864: INC
128865: ST_TO_ADDR
128866: LD_INT 1
128868: PUSH
128869: FOR_DOWNTO
128870: IFFALSE 129206
// begin if IsLive ( minersList [ i ] ) then
128872: LD_EXP 215
128876: PUSH
128877: LD_VAR 0 1
128881: ARRAY
128882: PPUSH
128883: CALL_OW 300
128887: IFFALSE 128915
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
128889: LD_EXP 215
128893: PUSH
128894: LD_VAR 0 1
128898: ARRAY
128899: PPUSH
128900: LD_EXP 216
128904: PUSH
128905: LD_VAR 0 1
128909: ARRAY
128910: PPUSH
128911: CALL_OW 505
// if not minerMinesList [ i ] then
128915: LD_EXP 216
128919: PUSH
128920: LD_VAR 0 1
128924: ARRAY
128925: NOT
128926: IFFALSE 128930
// continue ;
128928: GO 128869
// for j := minerMinesList [ i ] downto 1 do
128930: LD_ADDR_VAR 0 2
128934: PUSH
128935: DOUBLE
128936: LD_EXP 216
128940: PUSH
128941: LD_VAR 0 1
128945: ARRAY
128946: INC
128947: ST_TO_ADDR
128948: LD_INT 1
128950: PUSH
128951: FOR_DOWNTO
128952: IFFALSE 129202
// begin side := GetSide ( minersList [ i ] ) ;
128954: LD_ADDR_VAR 0 3
128958: PUSH
128959: LD_EXP 215
128963: PUSH
128964: LD_VAR 0 1
128968: ARRAY
128969: PPUSH
128970: CALL_OW 255
128974: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
128975: LD_ADDR_VAR 0 4
128979: PUSH
128980: LD_EXP 216
128984: PUSH
128985: LD_VAR 0 1
128989: ARRAY
128990: PUSH
128991: LD_VAR 0 2
128995: ARRAY
128996: PUSH
128997: LD_INT 1
128999: ARRAY
129000: PPUSH
129001: LD_EXP 216
129005: PUSH
129006: LD_VAR 0 1
129010: ARRAY
129011: PUSH
129012: LD_VAR 0 2
129016: ARRAY
129017: PUSH
129018: LD_INT 2
129020: ARRAY
129021: PPUSH
129022: CALL_OW 428
129026: ST_TO_ADDR
// if not tmp then
129027: LD_VAR 0 4
129031: NOT
129032: IFFALSE 129036
// continue ;
129034: GO 128951
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
129036: LD_VAR 0 4
129040: PUSH
129041: LD_INT 81
129043: PUSH
129044: LD_VAR 0 3
129048: PUSH
129049: EMPTY
129050: LIST
129051: LIST
129052: PPUSH
129053: CALL_OW 69
129057: IN
129058: PUSH
129059: LD_EXP 216
129063: PUSH
129064: LD_VAR 0 1
129068: ARRAY
129069: PUSH
129070: LD_VAR 0 2
129074: ARRAY
129075: PUSH
129076: LD_INT 1
129078: ARRAY
129079: PPUSH
129080: LD_EXP 216
129084: PUSH
129085: LD_VAR 0 1
129089: ARRAY
129090: PUSH
129091: LD_VAR 0 2
129095: ARRAY
129096: PUSH
129097: LD_INT 2
129099: ARRAY
129100: PPUSH
129101: CALL_OW 458
129105: AND
129106: IFFALSE 129200
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
129108: LD_EXP 216
129112: PUSH
129113: LD_VAR 0 1
129117: ARRAY
129118: PUSH
129119: LD_VAR 0 2
129123: ARRAY
129124: PUSH
129125: LD_INT 1
129127: ARRAY
129128: PPUSH
129129: LD_EXP 216
129133: PUSH
129134: LD_VAR 0 1
129138: ARRAY
129139: PUSH
129140: LD_VAR 0 2
129144: ARRAY
129145: PUSH
129146: LD_INT 2
129148: ARRAY
129149: PPUSH
129150: LD_VAR 0 3
129154: PPUSH
129155: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
129159: LD_ADDR_EXP 216
129163: PUSH
129164: LD_EXP 216
129168: PPUSH
129169: LD_VAR 0 1
129173: PPUSH
129174: LD_EXP 216
129178: PUSH
129179: LD_VAR 0 1
129183: ARRAY
129184: PPUSH
129185: LD_VAR 0 2
129189: PPUSH
129190: CALL_OW 3
129194: PPUSH
129195: CALL_OW 1
129199: ST_TO_ADDR
// end ; end ;
129200: GO 128951
129202: POP
129203: POP
// end ;
129204: GO 128869
129206: POP
129207: POP
// end ;
129208: PPOPN 4
129210: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
129211: LD_INT 0
129213: PPUSH
129214: PPUSH
// result := false ;
129215: LD_ADDR_VAR 0 4
129219: PUSH
129220: LD_INT 0
129222: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
129223: LD_VAR 0 1
129227: PPUSH
129228: CALL_OW 264
129232: PUSH
129233: LD_INT 81
129235: EQUAL
129236: NOT
129237: IFFALSE 129241
// exit ;
129239: GO 129481
// index := GetElementIndex ( minersList , unit ) ;
129241: LD_ADDR_VAR 0 5
129245: PUSH
129246: LD_EXP 215
129250: PPUSH
129251: LD_VAR 0 1
129255: PPUSH
129256: CALL 73805 0 2
129260: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
129261: LD_EXP 216
129265: PUSH
129266: LD_VAR 0 5
129270: ARRAY
129271: PUSH
129272: LD_EXP 217
129276: GREATEREQUAL
129277: IFFALSE 129281
// exit ;
129279: GO 129481
// ComMoveXY ( unit , x , y ) ;
129281: LD_VAR 0 1
129285: PPUSH
129286: LD_VAR 0 2
129290: PPUSH
129291: LD_VAR 0 3
129295: PPUSH
129296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
129300: LD_INT 35
129302: PPUSH
129303: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
129307: LD_VAR 0 1
129311: PPUSH
129312: LD_VAR 0 2
129316: PPUSH
129317: LD_VAR 0 3
129321: PPUSH
129322: CALL 105189 0 3
129326: NOT
129327: PUSH
129328: LD_VAR 0 1
129332: PPUSH
129333: CALL_OW 314
129337: AND
129338: IFFALSE 129342
// exit ;
129340: GO 129481
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
129342: LD_VAR 0 2
129346: PPUSH
129347: LD_VAR 0 3
129351: PPUSH
129352: CALL_OW 428
129356: PUSH
129357: LD_VAR 0 1
129361: EQUAL
129362: PUSH
129363: LD_VAR 0 1
129367: PPUSH
129368: CALL_OW 314
129372: NOT
129373: AND
129374: IFFALSE 129300
// PlaySoundXY ( x , y , PlantMine ) ;
129376: LD_VAR 0 2
129380: PPUSH
129381: LD_VAR 0 3
129385: PPUSH
129386: LD_STRING PlantMine
129388: PPUSH
129389: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
129393: LD_VAR 0 2
129397: PPUSH
129398: LD_VAR 0 3
129402: PPUSH
129403: LD_VAR 0 1
129407: PPUSH
129408: CALL_OW 255
129412: PPUSH
129413: LD_INT 0
129415: PPUSH
129416: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
129420: LD_ADDR_EXP 216
129424: PUSH
129425: LD_EXP 216
129429: PPUSH
129430: LD_VAR 0 5
129434: PUSH
129435: LD_EXP 216
129439: PUSH
129440: LD_VAR 0 5
129444: ARRAY
129445: PUSH
129446: LD_INT 1
129448: PLUS
129449: PUSH
129450: EMPTY
129451: LIST
129452: LIST
129453: PPUSH
129454: LD_VAR 0 2
129458: PUSH
129459: LD_VAR 0 3
129463: PUSH
129464: EMPTY
129465: LIST
129466: LIST
129467: PPUSH
129468: CALL 74020 0 3
129472: ST_TO_ADDR
// result := true ;
129473: LD_ADDR_VAR 0 4
129477: PUSH
129478: LD_INT 1
129480: ST_TO_ADDR
// end ;
129481: LD_VAR 0 4
129485: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
129486: LD_INT 0
129488: PPUSH
129489: PPUSH
129490: PPUSH
// if not unit in minersList then
129491: LD_VAR 0 1
129495: PUSH
129496: LD_EXP 215
129500: IN
129501: NOT
129502: IFFALSE 129506
// exit ;
129504: GO 129898
// index := GetElementIndex ( minersList , unit ) ;
129506: LD_ADDR_VAR 0 6
129510: PUSH
129511: LD_EXP 215
129515: PPUSH
129516: LD_VAR 0 1
129520: PPUSH
129521: CALL 73805 0 2
129525: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
129526: LD_ADDR_VAR 0 5
129530: PUSH
129531: DOUBLE
129532: LD_EXP 216
129536: PUSH
129537: LD_VAR 0 6
129541: ARRAY
129542: INC
129543: ST_TO_ADDR
129544: LD_INT 1
129546: PUSH
129547: FOR_DOWNTO
129548: IFFALSE 129709
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
129550: LD_EXP 216
129554: PUSH
129555: LD_VAR 0 6
129559: ARRAY
129560: PUSH
129561: LD_VAR 0 5
129565: ARRAY
129566: PUSH
129567: LD_INT 1
129569: ARRAY
129570: PUSH
129571: LD_VAR 0 2
129575: EQUAL
129576: PUSH
129577: LD_EXP 216
129581: PUSH
129582: LD_VAR 0 6
129586: ARRAY
129587: PUSH
129588: LD_VAR 0 5
129592: ARRAY
129593: PUSH
129594: LD_INT 2
129596: ARRAY
129597: PUSH
129598: LD_VAR 0 3
129602: EQUAL
129603: AND
129604: IFFALSE 129707
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
129606: LD_EXP 216
129610: PUSH
129611: LD_VAR 0 6
129615: ARRAY
129616: PUSH
129617: LD_VAR 0 5
129621: ARRAY
129622: PUSH
129623: LD_INT 1
129625: ARRAY
129626: PPUSH
129627: LD_EXP 216
129631: PUSH
129632: LD_VAR 0 6
129636: ARRAY
129637: PUSH
129638: LD_VAR 0 5
129642: ARRAY
129643: PUSH
129644: LD_INT 2
129646: ARRAY
129647: PPUSH
129648: LD_VAR 0 1
129652: PPUSH
129653: CALL_OW 255
129657: PPUSH
129658: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
129662: LD_ADDR_EXP 216
129666: PUSH
129667: LD_EXP 216
129671: PPUSH
129672: LD_VAR 0 6
129676: PPUSH
129677: LD_EXP 216
129681: PUSH
129682: LD_VAR 0 6
129686: ARRAY
129687: PPUSH
129688: LD_VAR 0 5
129692: PPUSH
129693: CALL_OW 3
129697: PPUSH
129698: CALL_OW 1
129702: ST_TO_ADDR
// exit ;
129703: POP
129704: POP
129705: GO 129898
// end ; end ;
129707: GO 129547
129709: POP
129710: POP
// for i := minerMinesList [ index ] downto 1 do
129711: LD_ADDR_VAR 0 5
129715: PUSH
129716: DOUBLE
129717: LD_EXP 216
129721: PUSH
129722: LD_VAR 0 6
129726: ARRAY
129727: INC
129728: ST_TO_ADDR
129729: LD_INT 1
129731: PUSH
129732: FOR_DOWNTO
129733: IFFALSE 129896
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
129735: LD_EXP 216
129739: PUSH
129740: LD_VAR 0 6
129744: ARRAY
129745: PUSH
129746: LD_VAR 0 5
129750: ARRAY
129751: PUSH
129752: LD_INT 1
129754: ARRAY
129755: PPUSH
129756: LD_EXP 216
129760: PUSH
129761: LD_VAR 0 6
129765: ARRAY
129766: PUSH
129767: LD_VAR 0 5
129771: ARRAY
129772: PUSH
129773: LD_INT 2
129775: ARRAY
129776: PPUSH
129777: LD_VAR 0 2
129781: PPUSH
129782: LD_VAR 0 3
129786: PPUSH
129787: CALL_OW 298
129791: PUSH
129792: LD_INT 6
129794: LESS
129795: IFFALSE 129894
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
129797: LD_EXP 216
129801: PUSH
129802: LD_VAR 0 6
129806: ARRAY
129807: PUSH
129808: LD_VAR 0 5
129812: ARRAY
129813: PUSH
129814: LD_INT 1
129816: ARRAY
129817: PPUSH
129818: LD_EXP 216
129822: PUSH
129823: LD_VAR 0 6
129827: ARRAY
129828: PUSH
129829: LD_VAR 0 5
129833: ARRAY
129834: PUSH
129835: LD_INT 2
129837: ARRAY
129838: PPUSH
129839: LD_VAR 0 1
129843: PPUSH
129844: CALL_OW 255
129848: PPUSH
129849: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
129853: LD_ADDR_EXP 216
129857: PUSH
129858: LD_EXP 216
129862: PPUSH
129863: LD_VAR 0 6
129867: PPUSH
129868: LD_EXP 216
129872: PUSH
129873: LD_VAR 0 6
129877: ARRAY
129878: PPUSH
129879: LD_VAR 0 5
129883: PPUSH
129884: CALL_OW 3
129888: PPUSH
129889: CALL_OW 1
129893: ST_TO_ADDR
// end ; end ;
129894: GO 129732
129896: POP
129897: POP
// end ;
129898: LD_VAR 0 4
129902: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
129903: LD_INT 0
129905: PPUSH
129906: PPUSH
129907: PPUSH
129908: PPUSH
129909: PPUSH
129910: PPUSH
129911: PPUSH
129912: PPUSH
129913: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
129914: LD_VAR 0 1
129918: PPUSH
129919: CALL_OW 264
129923: PUSH
129924: LD_INT 81
129926: EQUAL
129927: NOT
129928: PUSH
129929: LD_VAR 0 1
129933: PUSH
129934: LD_EXP 215
129938: IN
129939: NOT
129940: OR
129941: IFFALSE 129945
// exit ;
129943: GO 130267
// index := GetElementIndex ( minersList , unit ) ;
129945: LD_ADDR_VAR 0 6
129949: PUSH
129950: LD_EXP 215
129954: PPUSH
129955: LD_VAR 0 1
129959: PPUSH
129960: CALL 73805 0 2
129964: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
129965: LD_ADDR_VAR 0 8
129969: PUSH
129970: LD_EXP 217
129974: PUSH
129975: LD_EXP 216
129979: PUSH
129980: LD_VAR 0 6
129984: ARRAY
129985: MINUS
129986: ST_TO_ADDR
// if not minesFreeAmount then
129987: LD_VAR 0 8
129991: NOT
129992: IFFALSE 129996
// exit ;
129994: GO 130267
// tmp := [ ] ;
129996: LD_ADDR_VAR 0 7
130000: PUSH
130001: EMPTY
130002: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
130003: LD_ADDR_VAR 0 5
130007: PUSH
130008: DOUBLE
130009: LD_INT 1
130011: DEC
130012: ST_TO_ADDR
130013: LD_VAR 0 8
130017: PUSH
130018: FOR_TO
130019: IFFALSE 130214
// begin _d := rand ( 0 , 5 ) ;
130021: LD_ADDR_VAR 0 11
130025: PUSH
130026: LD_INT 0
130028: PPUSH
130029: LD_INT 5
130031: PPUSH
130032: CALL_OW 12
130036: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
130037: LD_ADDR_VAR 0 12
130041: PUSH
130042: LD_INT 2
130044: PPUSH
130045: LD_INT 6
130047: PPUSH
130048: CALL_OW 12
130052: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
130053: LD_ADDR_VAR 0 9
130057: PUSH
130058: LD_VAR 0 2
130062: PPUSH
130063: LD_VAR 0 11
130067: PPUSH
130068: LD_VAR 0 12
130072: PPUSH
130073: CALL_OW 272
130077: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
130078: LD_ADDR_VAR 0 10
130082: PUSH
130083: LD_VAR 0 3
130087: PPUSH
130088: LD_VAR 0 11
130092: PPUSH
130093: LD_VAR 0 12
130097: PPUSH
130098: CALL_OW 273
130102: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
130103: LD_VAR 0 9
130107: PPUSH
130108: LD_VAR 0 10
130112: PPUSH
130113: CALL_OW 488
130117: PUSH
130118: LD_VAR 0 9
130122: PUSH
130123: LD_VAR 0 10
130127: PUSH
130128: EMPTY
130129: LIST
130130: LIST
130131: PUSH
130132: LD_VAR 0 7
130136: IN
130137: NOT
130138: AND
130139: PUSH
130140: LD_VAR 0 9
130144: PPUSH
130145: LD_VAR 0 10
130149: PPUSH
130150: CALL_OW 458
130154: NOT
130155: AND
130156: IFFALSE 130198
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
130158: LD_ADDR_VAR 0 7
130162: PUSH
130163: LD_VAR 0 7
130167: PPUSH
130168: LD_VAR 0 7
130172: PUSH
130173: LD_INT 1
130175: PLUS
130176: PPUSH
130177: LD_VAR 0 9
130181: PUSH
130182: LD_VAR 0 10
130186: PUSH
130187: EMPTY
130188: LIST
130189: LIST
130190: PPUSH
130191: CALL_OW 1
130195: ST_TO_ADDR
130196: GO 130212
// i := i - 1 ;
130198: LD_ADDR_VAR 0 5
130202: PUSH
130203: LD_VAR 0 5
130207: PUSH
130208: LD_INT 1
130210: MINUS
130211: ST_TO_ADDR
// end ;
130212: GO 130018
130214: POP
130215: POP
// for i in tmp do
130216: LD_ADDR_VAR 0 5
130220: PUSH
130221: LD_VAR 0 7
130225: PUSH
130226: FOR_IN
130227: IFFALSE 130265
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
130229: LD_VAR 0 1
130233: PPUSH
130234: LD_VAR 0 5
130238: PUSH
130239: LD_INT 1
130241: ARRAY
130242: PPUSH
130243: LD_VAR 0 5
130247: PUSH
130248: LD_INT 2
130250: ARRAY
130251: PPUSH
130252: CALL 129211 0 3
130256: NOT
130257: IFFALSE 130263
// exit ;
130259: POP
130260: POP
130261: GO 130267
130263: GO 130226
130265: POP
130266: POP
// end ;
130267: LD_VAR 0 4
130271: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
130272: LD_INT 0
130274: PPUSH
130275: PPUSH
130276: PPUSH
130277: PPUSH
130278: PPUSH
130279: PPUSH
130280: PPUSH
// if not GetClass ( unit ) = class_sniper then
130281: LD_VAR 0 1
130285: PPUSH
130286: CALL_OW 257
130290: PUSH
130291: LD_INT 5
130293: EQUAL
130294: NOT
130295: IFFALSE 130299
// exit ;
130297: GO 130687
// dist := 8 ;
130299: LD_ADDR_VAR 0 5
130303: PUSH
130304: LD_INT 8
130306: ST_TO_ADDR
// viewRange := 12 ;
130307: LD_ADDR_VAR 0 7
130311: PUSH
130312: LD_INT 12
130314: ST_TO_ADDR
// side := GetSide ( unit ) ;
130315: LD_ADDR_VAR 0 6
130319: PUSH
130320: LD_VAR 0 1
130324: PPUSH
130325: CALL_OW 255
130329: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
130330: LD_INT 61
130332: PPUSH
130333: LD_VAR 0 6
130337: PPUSH
130338: CALL_OW 321
130342: PUSH
130343: LD_INT 2
130345: EQUAL
130346: IFFALSE 130356
// viewRange := 16 ;
130348: LD_ADDR_VAR 0 7
130352: PUSH
130353: LD_INT 16
130355: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
130356: LD_VAR 0 1
130360: PPUSH
130361: LD_VAR 0 2
130365: PPUSH
130366: LD_VAR 0 3
130370: PPUSH
130371: CALL_OW 297
130375: PUSH
130376: LD_VAR 0 5
130380: GREATER
130381: IFFALSE 130460
// begin ComMoveXY ( unit , x , y ) ;
130383: LD_VAR 0 1
130387: PPUSH
130388: LD_VAR 0 2
130392: PPUSH
130393: LD_VAR 0 3
130397: PPUSH
130398: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
130402: LD_INT 35
130404: PPUSH
130405: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
130409: LD_VAR 0 1
130413: PPUSH
130414: LD_VAR 0 2
130418: PPUSH
130419: LD_VAR 0 3
130423: PPUSH
130424: CALL 105189 0 3
130428: NOT
130429: IFFALSE 130433
// exit ;
130431: GO 130687
// until GetDistUnitXY ( unit , x , y ) < dist ;
130433: LD_VAR 0 1
130437: PPUSH
130438: LD_VAR 0 2
130442: PPUSH
130443: LD_VAR 0 3
130447: PPUSH
130448: CALL_OW 297
130452: PUSH
130453: LD_VAR 0 5
130457: LESS
130458: IFFALSE 130402
// end ; ComTurnXY ( unit , x , y ) ;
130460: LD_VAR 0 1
130464: PPUSH
130465: LD_VAR 0 2
130469: PPUSH
130470: LD_VAR 0 3
130474: PPUSH
130475: CALL_OW 118
// wait ( 5 ) ;
130479: LD_INT 5
130481: PPUSH
130482: CALL_OW 67
// _d := GetDir ( unit ) ;
130486: LD_ADDR_VAR 0 10
130490: PUSH
130491: LD_VAR 0 1
130495: PPUSH
130496: CALL_OW 254
130500: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
130501: LD_ADDR_VAR 0 8
130505: PUSH
130506: LD_VAR 0 1
130510: PPUSH
130511: CALL_OW 250
130515: PPUSH
130516: LD_VAR 0 10
130520: PPUSH
130521: LD_VAR 0 5
130525: PPUSH
130526: CALL_OW 272
130530: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
130531: LD_ADDR_VAR 0 9
130535: PUSH
130536: LD_VAR 0 1
130540: PPUSH
130541: CALL_OW 251
130545: PPUSH
130546: LD_VAR 0 10
130550: PPUSH
130551: LD_VAR 0 5
130555: PPUSH
130556: CALL_OW 273
130560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
130561: LD_VAR 0 8
130565: PPUSH
130566: LD_VAR 0 9
130570: PPUSH
130571: CALL_OW 488
130575: NOT
130576: IFFALSE 130580
// exit ;
130578: GO 130687
// ComAnimCustom ( unit , 1 ) ;
130580: LD_VAR 0 1
130584: PPUSH
130585: LD_INT 1
130587: PPUSH
130588: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
130592: LD_VAR 0 8
130596: PPUSH
130597: LD_VAR 0 9
130601: PPUSH
130602: LD_VAR 0 6
130606: PPUSH
130607: LD_VAR 0 7
130611: PPUSH
130612: CALL_OW 330
// repeat wait ( 1 ) ;
130616: LD_INT 1
130618: PPUSH
130619: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
130623: LD_VAR 0 1
130627: PPUSH
130628: CALL_OW 316
130632: PUSH
130633: LD_VAR 0 1
130637: PPUSH
130638: CALL_OW 314
130642: OR
130643: PUSH
130644: LD_VAR 0 1
130648: PPUSH
130649: CALL_OW 302
130653: NOT
130654: OR
130655: PUSH
130656: LD_VAR 0 1
130660: PPUSH
130661: CALL_OW 301
130665: OR
130666: IFFALSE 130616
// RemoveSeeing ( _x , _y , side ) ;
130668: LD_VAR 0 8
130672: PPUSH
130673: LD_VAR 0 9
130677: PPUSH
130678: LD_VAR 0 6
130682: PPUSH
130683: CALL_OW 331
// end ; end_of_file
130687: LD_VAR 0 4
130691: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
130692: LD_INT 0
130694: PPUSH
130695: PPUSH
130696: PPUSH
130697: PPUSH
130698: PPUSH
130699: PPUSH
130700: PPUSH
130701: PPUSH
130702: PPUSH
130703: PPUSH
130704: PPUSH
130705: PPUSH
130706: PPUSH
130707: PPUSH
130708: PPUSH
130709: PPUSH
130710: PPUSH
130711: PPUSH
130712: PPUSH
130713: PPUSH
130714: PPUSH
130715: PPUSH
130716: PPUSH
130717: PPUSH
130718: PPUSH
130719: PPUSH
130720: PPUSH
130721: PPUSH
130722: PPUSH
130723: PPUSH
130724: PPUSH
130725: PPUSH
130726: PPUSH
130727: PPUSH
// if not list then
130728: LD_VAR 0 1
130732: NOT
130733: IFFALSE 130737
// exit ;
130735: GO 135396
// base := list [ 1 ] ;
130737: LD_ADDR_VAR 0 3
130741: PUSH
130742: LD_VAR 0 1
130746: PUSH
130747: LD_INT 1
130749: ARRAY
130750: ST_TO_ADDR
// group := list [ 2 ] ;
130751: LD_ADDR_VAR 0 4
130755: PUSH
130756: LD_VAR 0 1
130760: PUSH
130761: LD_INT 2
130763: ARRAY
130764: ST_TO_ADDR
// path := list [ 3 ] ;
130765: LD_ADDR_VAR 0 5
130769: PUSH
130770: LD_VAR 0 1
130774: PUSH
130775: LD_INT 3
130777: ARRAY
130778: ST_TO_ADDR
// flags := list [ 4 ] ;
130779: LD_ADDR_VAR 0 6
130783: PUSH
130784: LD_VAR 0 1
130788: PUSH
130789: LD_INT 4
130791: ARRAY
130792: ST_TO_ADDR
// mined := [ ] ;
130793: LD_ADDR_VAR 0 27
130797: PUSH
130798: EMPTY
130799: ST_TO_ADDR
// bombed := [ ] ;
130800: LD_ADDR_VAR 0 28
130804: PUSH
130805: EMPTY
130806: ST_TO_ADDR
// healers := [ ] ;
130807: LD_ADDR_VAR 0 31
130811: PUSH
130812: EMPTY
130813: ST_TO_ADDR
// to_heal := [ ] ;
130814: LD_ADDR_VAR 0 30
130818: PUSH
130819: EMPTY
130820: ST_TO_ADDR
// repairs := [ ] ;
130821: LD_ADDR_VAR 0 33
130825: PUSH
130826: EMPTY
130827: ST_TO_ADDR
// to_repair := [ ] ;
130828: LD_ADDR_VAR 0 32
130832: PUSH
130833: EMPTY
130834: ST_TO_ADDR
// if not group or not path then
130835: LD_VAR 0 4
130839: NOT
130840: PUSH
130841: LD_VAR 0 5
130845: NOT
130846: OR
130847: IFFALSE 130851
// exit ;
130849: GO 135396
// side := GetSide ( group [ 1 ] ) ;
130851: LD_ADDR_VAR 0 35
130855: PUSH
130856: LD_VAR 0 4
130860: PUSH
130861: LD_INT 1
130863: ARRAY
130864: PPUSH
130865: CALL_OW 255
130869: ST_TO_ADDR
// if flags then
130870: LD_VAR 0 6
130874: IFFALSE 131018
// begin f_ignore_area := flags [ 1 ] ;
130876: LD_ADDR_VAR 0 17
130880: PUSH
130881: LD_VAR 0 6
130885: PUSH
130886: LD_INT 1
130888: ARRAY
130889: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
130890: LD_ADDR_VAR 0 18
130894: PUSH
130895: LD_VAR 0 6
130899: PUSH
130900: LD_INT 2
130902: ARRAY
130903: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
130904: LD_ADDR_VAR 0 19
130908: PUSH
130909: LD_VAR 0 6
130913: PUSH
130914: LD_INT 3
130916: ARRAY
130917: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
130918: LD_ADDR_VAR 0 20
130922: PUSH
130923: LD_VAR 0 6
130927: PUSH
130928: LD_INT 4
130930: ARRAY
130931: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
130932: LD_ADDR_VAR 0 21
130936: PUSH
130937: LD_VAR 0 6
130941: PUSH
130942: LD_INT 5
130944: ARRAY
130945: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
130946: LD_ADDR_VAR 0 22
130950: PUSH
130951: LD_VAR 0 6
130955: PUSH
130956: LD_INT 6
130958: ARRAY
130959: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
130960: LD_ADDR_VAR 0 23
130964: PUSH
130965: LD_VAR 0 6
130969: PUSH
130970: LD_INT 7
130972: ARRAY
130973: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
130974: LD_ADDR_VAR 0 24
130978: PUSH
130979: LD_VAR 0 6
130983: PUSH
130984: LD_INT 8
130986: ARRAY
130987: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
130988: LD_ADDR_VAR 0 25
130992: PUSH
130993: LD_VAR 0 6
130997: PUSH
130998: LD_INT 9
131000: ARRAY
131001: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
131002: LD_ADDR_VAR 0 26
131006: PUSH
131007: LD_VAR 0 6
131011: PUSH
131012: LD_INT 10
131014: ARRAY
131015: ST_TO_ADDR
// end else
131016: GO 131098
// begin f_ignore_area := false ;
131018: LD_ADDR_VAR 0 17
131022: PUSH
131023: LD_INT 0
131025: ST_TO_ADDR
// f_capture := false ;
131026: LD_ADDR_VAR 0 18
131030: PUSH
131031: LD_INT 0
131033: ST_TO_ADDR
// f_ignore_civ := false ;
131034: LD_ADDR_VAR 0 19
131038: PUSH
131039: LD_INT 0
131041: ST_TO_ADDR
// f_murder := false ;
131042: LD_ADDR_VAR 0 20
131046: PUSH
131047: LD_INT 0
131049: ST_TO_ADDR
// f_mines := false ;
131050: LD_ADDR_VAR 0 21
131054: PUSH
131055: LD_INT 0
131057: ST_TO_ADDR
// f_repair := false ;
131058: LD_ADDR_VAR 0 22
131062: PUSH
131063: LD_INT 0
131065: ST_TO_ADDR
// f_heal := false ;
131066: LD_ADDR_VAR 0 23
131070: PUSH
131071: LD_INT 0
131073: ST_TO_ADDR
// f_spacetime := false ;
131074: LD_ADDR_VAR 0 24
131078: PUSH
131079: LD_INT 0
131081: ST_TO_ADDR
// f_attack_depot := false ;
131082: LD_ADDR_VAR 0 25
131086: PUSH
131087: LD_INT 0
131089: ST_TO_ADDR
// f_crawl := false ;
131090: LD_ADDR_VAR 0 26
131094: PUSH
131095: LD_INT 0
131097: ST_TO_ADDR
// end ; if f_heal then
131098: LD_VAR 0 23
131102: IFFALSE 131129
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
131104: LD_ADDR_VAR 0 31
131108: PUSH
131109: LD_VAR 0 4
131113: PPUSH
131114: LD_INT 25
131116: PUSH
131117: LD_INT 4
131119: PUSH
131120: EMPTY
131121: LIST
131122: LIST
131123: PPUSH
131124: CALL_OW 72
131128: ST_TO_ADDR
// if f_repair then
131129: LD_VAR 0 22
131133: IFFALSE 131160
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
131135: LD_ADDR_VAR 0 33
131139: PUSH
131140: LD_VAR 0 4
131144: PPUSH
131145: LD_INT 25
131147: PUSH
131148: LD_INT 3
131150: PUSH
131151: EMPTY
131152: LIST
131153: LIST
131154: PPUSH
131155: CALL_OW 72
131159: ST_TO_ADDR
// units_path := [ ] ;
131160: LD_ADDR_VAR 0 16
131164: PUSH
131165: EMPTY
131166: ST_TO_ADDR
// for i = 1 to group do
131167: LD_ADDR_VAR 0 7
131171: PUSH
131172: DOUBLE
131173: LD_INT 1
131175: DEC
131176: ST_TO_ADDR
131177: LD_VAR 0 4
131181: PUSH
131182: FOR_TO
131183: IFFALSE 131212
// units_path := Replace ( units_path , i , path ) ;
131185: LD_ADDR_VAR 0 16
131189: PUSH
131190: LD_VAR 0 16
131194: PPUSH
131195: LD_VAR 0 7
131199: PPUSH
131200: LD_VAR 0 5
131204: PPUSH
131205: CALL_OW 1
131209: ST_TO_ADDR
131210: GO 131182
131212: POP
131213: POP
// repeat for i = group downto 1 do
131214: LD_ADDR_VAR 0 7
131218: PUSH
131219: DOUBLE
131220: LD_VAR 0 4
131224: INC
131225: ST_TO_ADDR
131226: LD_INT 1
131228: PUSH
131229: FOR_DOWNTO
131230: IFFALSE 135352
// begin wait ( 5 ) ;
131232: LD_INT 5
131234: PPUSH
131235: CALL_OW 67
// tmp := [ ] ;
131239: LD_ADDR_VAR 0 14
131243: PUSH
131244: EMPTY
131245: ST_TO_ADDR
// attacking := false ;
131246: LD_ADDR_VAR 0 29
131250: PUSH
131251: LD_INT 0
131253: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
131254: LD_VAR 0 4
131258: PUSH
131259: LD_VAR 0 7
131263: ARRAY
131264: PPUSH
131265: CALL_OW 301
131269: PUSH
131270: LD_VAR 0 4
131274: PUSH
131275: LD_VAR 0 7
131279: ARRAY
131280: NOT
131281: OR
131282: IFFALSE 131391
// begin if GetType ( group [ i ] ) = unit_human then
131284: LD_VAR 0 4
131288: PUSH
131289: LD_VAR 0 7
131293: ARRAY
131294: PPUSH
131295: CALL_OW 247
131299: PUSH
131300: LD_INT 1
131302: EQUAL
131303: IFFALSE 131349
// begin to_heal := to_heal diff group [ i ] ;
131305: LD_ADDR_VAR 0 30
131309: PUSH
131310: LD_VAR 0 30
131314: PUSH
131315: LD_VAR 0 4
131319: PUSH
131320: LD_VAR 0 7
131324: ARRAY
131325: DIFF
131326: ST_TO_ADDR
// healers := healers diff group [ i ] ;
131327: LD_ADDR_VAR 0 31
131331: PUSH
131332: LD_VAR 0 31
131336: PUSH
131337: LD_VAR 0 4
131341: PUSH
131342: LD_VAR 0 7
131346: ARRAY
131347: DIFF
131348: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
131349: LD_ADDR_VAR 0 4
131353: PUSH
131354: LD_VAR 0 4
131358: PPUSH
131359: LD_VAR 0 7
131363: PPUSH
131364: CALL_OW 3
131368: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
131369: LD_ADDR_VAR 0 16
131373: PUSH
131374: LD_VAR 0 16
131378: PPUSH
131379: LD_VAR 0 7
131383: PPUSH
131384: CALL_OW 3
131388: ST_TO_ADDR
// continue ;
131389: GO 131229
// end ; if f_repair then
131391: LD_VAR 0 22
131395: IFFALSE 131884
// begin if GetType ( group [ i ] ) = unit_vehicle then
131397: LD_VAR 0 4
131401: PUSH
131402: LD_VAR 0 7
131406: ARRAY
131407: PPUSH
131408: CALL_OW 247
131412: PUSH
131413: LD_INT 2
131415: EQUAL
131416: IFFALSE 131606
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
131418: LD_VAR 0 4
131422: PUSH
131423: LD_VAR 0 7
131427: ARRAY
131428: PPUSH
131429: CALL_OW 256
131433: PUSH
131434: LD_INT 700
131436: LESS
131437: PUSH
131438: LD_VAR 0 4
131442: PUSH
131443: LD_VAR 0 7
131447: ARRAY
131448: PUSH
131449: LD_VAR 0 32
131453: IN
131454: NOT
131455: AND
131456: IFFALSE 131480
// to_repair := to_repair union group [ i ] ;
131458: LD_ADDR_VAR 0 32
131462: PUSH
131463: LD_VAR 0 32
131467: PUSH
131468: LD_VAR 0 4
131472: PUSH
131473: LD_VAR 0 7
131477: ARRAY
131478: UNION
131479: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
131480: LD_VAR 0 4
131484: PUSH
131485: LD_VAR 0 7
131489: ARRAY
131490: PPUSH
131491: CALL_OW 256
131495: PUSH
131496: LD_INT 1000
131498: EQUAL
131499: PUSH
131500: LD_VAR 0 4
131504: PUSH
131505: LD_VAR 0 7
131509: ARRAY
131510: PUSH
131511: LD_VAR 0 32
131515: IN
131516: AND
131517: IFFALSE 131541
// to_repair := to_repair diff group [ i ] ;
131519: LD_ADDR_VAR 0 32
131523: PUSH
131524: LD_VAR 0 32
131528: PUSH
131529: LD_VAR 0 4
131533: PUSH
131534: LD_VAR 0 7
131538: ARRAY
131539: DIFF
131540: ST_TO_ADDR
// if group [ i ] in to_repair then
131541: LD_VAR 0 4
131545: PUSH
131546: LD_VAR 0 7
131550: ARRAY
131551: PUSH
131552: LD_VAR 0 32
131556: IN
131557: IFFALSE 131604
// begin if not IsInArea ( group [ i ] , f_repair ) then
131559: LD_VAR 0 4
131563: PUSH
131564: LD_VAR 0 7
131568: ARRAY
131569: PPUSH
131570: LD_VAR 0 22
131574: PPUSH
131575: CALL_OW 308
131579: NOT
131580: IFFALSE 131602
// ComMoveToArea ( group [ i ] , f_repair ) ;
131582: LD_VAR 0 4
131586: PUSH
131587: LD_VAR 0 7
131591: ARRAY
131592: PPUSH
131593: LD_VAR 0 22
131597: PPUSH
131598: CALL_OW 113
// continue ;
131602: GO 131229
// end ; end else
131604: GO 131884
// if group [ i ] in repairs then
131606: LD_VAR 0 4
131610: PUSH
131611: LD_VAR 0 7
131615: ARRAY
131616: PUSH
131617: LD_VAR 0 33
131621: IN
131622: IFFALSE 131884
// begin if IsInUnit ( group [ i ] ) then
131624: LD_VAR 0 4
131628: PUSH
131629: LD_VAR 0 7
131633: ARRAY
131634: PPUSH
131635: CALL_OW 310
131639: IFFALSE 131707
// begin z := IsInUnit ( group [ i ] ) ;
131641: LD_ADDR_VAR 0 13
131645: PUSH
131646: LD_VAR 0 4
131650: PUSH
131651: LD_VAR 0 7
131655: ARRAY
131656: PPUSH
131657: CALL_OW 310
131661: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
131662: LD_VAR 0 13
131666: PUSH
131667: LD_VAR 0 32
131671: IN
131672: PUSH
131673: LD_VAR 0 13
131677: PPUSH
131678: LD_VAR 0 22
131682: PPUSH
131683: CALL_OW 308
131687: AND
131688: IFFALSE 131705
// ComExitVehicle ( group [ i ] ) ;
131690: LD_VAR 0 4
131694: PUSH
131695: LD_VAR 0 7
131699: ARRAY
131700: PPUSH
131701: CALL_OW 121
// end else
131705: GO 131884
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
131707: LD_ADDR_VAR 0 13
131711: PUSH
131712: LD_VAR 0 4
131716: PPUSH
131717: LD_INT 95
131719: PUSH
131720: LD_VAR 0 22
131724: PUSH
131725: EMPTY
131726: LIST
131727: LIST
131728: PUSH
131729: LD_INT 58
131731: PUSH
131732: EMPTY
131733: LIST
131734: PUSH
131735: EMPTY
131736: LIST
131737: LIST
131738: PPUSH
131739: CALL_OW 72
131743: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
131744: LD_VAR 0 4
131748: PUSH
131749: LD_VAR 0 7
131753: ARRAY
131754: PPUSH
131755: CALL_OW 314
131759: NOT
131760: IFFALSE 131882
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
131762: LD_ADDR_VAR 0 10
131766: PUSH
131767: LD_VAR 0 13
131771: PPUSH
131772: LD_VAR 0 4
131776: PUSH
131777: LD_VAR 0 7
131781: ARRAY
131782: PPUSH
131783: CALL_OW 74
131787: ST_TO_ADDR
// if not x then
131788: LD_VAR 0 10
131792: NOT
131793: IFFALSE 131797
// continue ;
131795: GO 131229
// if GetLives ( x ) < 1000 then
131797: LD_VAR 0 10
131801: PPUSH
131802: CALL_OW 256
131806: PUSH
131807: LD_INT 1000
131809: LESS
131810: IFFALSE 131834
// ComRepairVehicle ( group [ i ] , x ) else
131812: LD_VAR 0 4
131816: PUSH
131817: LD_VAR 0 7
131821: ARRAY
131822: PPUSH
131823: LD_VAR 0 10
131827: PPUSH
131828: CALL_OW 129
131832: GO 131882
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
131834: LD_VAR 0 23
131838: PUSH
131839: LD_VAR 0 4
131843: PUSH
131844: LD_VAR 0 7
131848: ARRAY
131849: PPUSH
131850: CALL_OW 256
131854: PUSH
131855: LD_INT 1000
131857: LESS
131858: AND
131859: NOT
131860: IFFALSE 131882
// ComEnterUnit ( group [ i ] , x ) ;
131862: LD_VAR 0 4
131866: PUSH
131867: LD_VAR 0 7
131871: ARRAY
131872: PPUSH
131873: LD_VAR 0 10
131877: PPUSH
131878: CALL_OW 120
// end ; continue ;
131882: GO 131229
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
131884: LD_VAR 0 23
131888: PUSH
131889: LD_VAR 0 4
131893: PUSH
131894: LD_VAR 0 7
131898: ARRAY
131899: PPUSH
131900: CALL_OW 247
131904: PUSH
131905: LD_INT 1
131907: EQUAL
131908: AND
131909: IFFALSE 132387
// begin if group [ i ] in healers then
131911: LD_VAR 0 4
131915: PUSH
131916: LD_VAR 0 7
131920: ARRAY
131921: PUSH
131922: LD_VAR 0 31
131926: IN
131927: IFFALSE 132200
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
131929: LD_VAR 0 4
131933: PUSH
131934: LD_VAR 0 7
131938: ARRAY
131939: PPUSH
131940: LD_VAR 0 23
131944: PPUSH
131945: CALL_OW 308
131949: NOT
131950: PUSH
131951: LD_VAR 0 4
131955: PUSH
131956: LD_VAR 0 7
131960: ARRAY
131961: PPUSH
131962: CALL_OW 314
131966: NOT
131967: AND
131968: IFFALSE 131992
// ComMoveToArea ( group [ i ] , f_heal ) else
131970: LD_VAR 0 4
131974: PUSH
131975: LD_VAR 0 7
131979: ARRAY
131980: PPUSH
131981: LD_VAR 0 23
131985: PPUSH
131986: CALL_OW 113
131990: GO 132198
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
131992: LD_VAR 0 4
131996: PUSH
131997: LD_VAR 0 7
132001: ARRAY
132002: PPUSH
132003: CALL 103772 0 1
132007: PPUSH
132008: CALL_OW 256
132012: PUSH
132013: LD_INT 1000
132015: EQUAL
132016: IFFALSE 132035
// ComStop ( group [ i ] ) else
132018: LD_VAR 0 4
132022: PUSH
132023: LD_VAR 0 7
132027: ARRAY
132028: PPUSH
132029: CALL_OW 141
132033: GO 132198
// if not HasTask ( group [ i ] ) and to_heal then
132035: LD_VAR 0 4
132039: PUSH
132040: LD_VAR 0 7
132044: ARRAY
132045: PPUSH
132046: CALL_OW 314
132050: NOT
132051: PUSH
132052: LD_VAR 0 30
132056: AND
132057: IFFALSE 132198
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
132059: LD_ADDR_VAR 0 13
132063: PUSH
132064: LD_VAR 0 30
132068: PPUSH
132069: LD_INT 3
132071: PUSH
132072: LD_INT 54
132074: PUSH
132075: EMPTY
132076: LIST
132077: PUSH
132078: EMPTY
132079: LIST
132080: LIST
132081: PPUSH
132082: CALL_OW 72
132086: PPUSH
132087: LD_VAR 0 4
132091: PUSH
132092: LD_VAR 0 7
132096: ARRAY
132097: PPUSH
132098: CALL_OW 74
132102: ST_TO_ADDR
// if z then
132103: LD_VAR 0 13
132107: IFFALSE 132198
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
132109: LD_INT 91
132111: PUSH
132112: LD_VAR 0 13
132116: PUSH
132117: LD_INT 10
132119: PUSH
132120: EMPTY
132121: LIST
132122: LIST
132123: LIST
132124: PUSH
132125: LD_INT 81
132127: PUSH
132128: LD_VAR 0 13
132132: PPUSH
132133: CALL_OW 255
132137: PUSH
132138: EMPTY
132139: LIST
132140: LIST
132141: PUSH
132142: EMPTY
132143: LIST
132144: LIST
132145: PPUSH
132146: CALL_OW 69
132150: PUSH
132151: LD_INT 0
132153: EQUAL
132154: IFFALSE 132178
// ComHeal ( group [ i ] , z ) else
132156: LD_VAR 0 4
132160: PUSH
132161: LD_VAR 0 7
132165: ARRAY
132166: PPUSH
132167: LD_VAR 0 13
132171: PPUSH
132172: CALL_OW 128
132176: GO 132198
// ComMoveToArea ( group [ i ] , f_heal ) ;
132178: LD_VAR 0 4
132182: PUSH
132183: LD_VAR 0 7
132187: ARRAY
132188: PPUSH
132189: LD_VAR 0 23
132193: PPUSH
132194: CALL_OW 113
// end ; continue ;
132198: GO 131229
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
132200: LD_VAR 0 4
132204: PUSH
132205: LD_VAR 0 7
132209: ARRAY
132210: PPUSH
132211: CALL_OW 256
132215: PUSH
132216: LD_INT 700
132218: LESS
132219: PUSH
132220: LD_VAR 0 4
132224: PUSH
132225: LD_VAR 0 7
132229: ARRAY
132230: PUSH
132231: LD_VAR 0 30
132235: IN
132236: NOT
132237: AND
132238: IFFALSE 132262
// to_heal := to_heal union group [ i ] ;
132240: LD_ADDR_VAR 0 30
132244: PUSH
132245: LD_VAR 0 30
132249: PUSH
132250: LD_VAR 0 4
132254: PUSH
132255: LD_VAR 0 7
132259: ARRAY
132260: UNION
132261: ST_TO_ADDR
// if group [ i ] in to_heal then
132262: LD_VAR 0 4
132266: PUSH
132267: LD_VAR 0 7
132271: ARRAY
132272: PUSH
132273: LD_VAR 0 30
132277: IN
132278: IFFALSE 132387
// begin if GetLives ( group [ i ] ) = 1000 then
132280: LD_VAR 0 4
132284: PUSH
132285: LD_VAR 0 7
132289: ARRAY
132290: PPUSH
132291: CALL_OW 256
132295: PUSH
132296: LD_INT 1000
132298: EQUAL
132299: IFFALSE 132325
// to_heal := to_heal diff group [ i ] else
132301: LD_ADDR_VAR 0 30
132305: PUSH
132306: LD_VAR 0 30
132310: PUSH
132311: LD_VAR 0 4
132315: PUSH
132316: LD_VAR 0 7
132320: ARRAY
132321: DIFF
132322: ST_TO_ADDR
132323: GO 132387
// begin if not IsInArea ( group [ i ] , to_heal ) then
132325: LD_VAR 0 4
132329: PUSH
132330: LD_VAR 0 7
132334: ARRAY
132335: PPUSH
132336: LD_VAR 0 30
132340: PPUSH
132341: CALL_OW 308
132345: NOT
132346: IFFALSE 132370
// ComMoveToArea ( group [ i ] , f_heal ) else
132348: LD_VAR 0 4
132352: PUSH
132353: LD_VAR 0 7
132357: ARRAY
132358: PPUSH
132359: LD_VAR 0 23
132363: PPUSH
132364: CALL_OW 113
132368: GO 132385
// ComHold ( group [ i ] ) ;
132370: LD_VAR 0 4
132374: PUSH
132375: LD_VAR 0 7
132379: ARRAY
132380: PPUSH
132381: CALL_OW 140
// continue ;
132385: GO 131229
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
132387: LD_VAR 0 4
132391: PUSH
132392: LD_VAR 0 7
132396: ARRAY
132397: PPUSH
132398: LD_INT 10
132400: PPUSH
132401: CALL 101543 0 2
132405: NOT
132406: PUSH
132407: LD_VAR 0 16
132411: PUSH
132412: LD_VAR 0 7
132416: ARRAY
132417: PUSH
132418: EMPTY
132419: EQUAL
132420: NOT
132421: AND
132422: IFFALSE 132688
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
132424: LD_VAR 0 4
132428: PUSH
132429: LD_VAR 0 7
132433: ARRAY
132434: PPUSH
132435: CALL_OW 262
132439: PUSH
132440: LD_INT 1
132442: PUSH
132443: LD_INT 2
132445: PUSH
132446: EMPTY
132447: LIST
132448: LIST
132449: IN
132450: IFFALSE 132491
// if GetFuel ( group [ i ] ) < 10 then
132452: LD_VAR 0 4
132456: PUSH
132457: LD_VAR 0 7
132461: ARRAY
132462: PPUSH
132463: CALL_OW 261
132467: PUSH
132468: LD_INT 10
132470: LESS
132471: IFFALSE 132491
// SetFuel ( group [ i ] , 12 ) ;
132473: LD_VAR 0 4
132477: PUSH
132478: LD_VAR 0 7
132482: ARRAY
132483: PPUSH
132484: LD_INT 12
132486: PPUSH
132487: CALL_OW 240
// if units_path [ i ] then
132491: LD_VAR 0 16
132495: PUSH
132496: LD_VAR 0 7
132500: ARRAY
132501: IFFALSE 132686
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
132503: LD_VAR 0 4
132507: PUSH
132508: LD_VAR 0 7
132512: ARRAY
132513: PPUSH
132514: LD_VAR 0 16
132518: PUSH
132519: LD_VAR 0 7
132523: ARRAY
132524: PUSH
132525: LD_INT 1
132527: ARRAY
132528: PUSH
132529: LD_INT 1
132531: ARRAY
132532: PPUSH
132533: LD_VAR 0 16
132537: PUSH
132538: LD_VAR 0 7
132542: ARRAY
132543: PUSH
132544: LD_INT 1
132546: ARRAY
132547: PUSH
132548: LD_INT 2
132550: ARRAY
132551: PPUSH
132552: CALL_OW 297
132556: PUSH
132557: LD_INT 6
132559: GREATER
132560: IFFALSE 132635
// begin if not HasTask ( group [ i ] ) then
132562: LD_VAR 0 4
132566: PUSH
132567: LD_VAR 0 7
132571: ARRAY
132572: PPUSH
132573: CALL_OW 314
132577: NOT
132578: IFFALSE 132633
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
132580: LD_VAR 0 4
132584: PUSH
132585: LD_VAR 0 7
132589: ARRAY
132590: PPUSH
132591: LD_VAR 0 16
132595: PUSH
132596: LD_VAR 0 7
132600: ARRAY
132601: PUSH
132602: LD_INT 1
132604: ARRAY
132605: PUSH
132606: LD_INT 1
132608: ARRAY
132609: PPUSH
132610: LD_VAR 0 16
132614: PUSH
132615: LD_VAR 0 7
132619: ARRAY
132620: PUSH
132621: LD_INT 1
132623: ARRAY
132624: PUSH
132625: LD_INT 2
132627: ARRAY
132628: PPUSH
132629: CALL_OW 114
// end else
132633: GO 132686
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
132635: LD_ADDR_VAR 0 15
132639: PUSH
132640: LD_VAR 0 16
132644: PUSH
132645: LD_VAR 0 7
132649: ARRAY
132650: PPUSH
132651: LD_INT 1
132653: PPUSH
132654: CALL_OW 3
132658: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
132659: LD_ADDR_VAR 0 16
132663: PUSH
132664: LD_VAR 0 16
132668: PPUSH
132669: LD_VAR 0 7
132673: PPUSH
132674: LD_VAR 0 15
132678: PPUSH
132679: CALL_OW 1
132683: ST_TO_ADDR
// continue ;
132684: GO 131229
// end ; end ; end else
132686: GO 135350
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
132688: LD_ADDR_VAR 0 14
132692: PUSH
132693: LD_INT 81
132695: PUSH
132696: LD_VAR 0 4
132700: PUSH
132701: LD_VAR 0 7
132705: ARRAY
132706: PPUSH
132707: CALL_OW 255
132711: PUSH
132712: EMPTY
132713: LIST
132714: LIST
132715: PPUSH
132716: CALL_OW 69
132720: ST_TO_ADDR
// if not tmp then
132721: LD_VAR 0 14
132725: NOT
132726: IFFALSE 132730
// continue ;
132728: GO 131229
// if f_ignore_area then
132730: LD_VAR 0 17
132734: IFFALSE 132822
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
132736: LD_ADDR_VAR 0 15
132740: PUSH
132741: LD_VAR 0 14
132745: PPUSH
132746: LD_INT 3
132748: PUSH
132749: LD_INT 92
132751: PUSH
132752: LD_VAR 0 17
132756: PUSH
132757: LD_INT 1
132759: ARRAY
132760: PUSH
132761: LD_VAR 0 17
132765: PUSH
132766: LD_INT 2
132768: ARRAY
132769: PUSH
132770: LD_VAR 0 17
132774: PUSH
132775: LD_INT 3
132777: ARRAY
132778: PUSH
132779: EMPTY
132780: LIST
132781: LIST
132782: LIST
132783: LIST
132784: PUSH
132785: EMPTY
132786: LIST
132787: LIST
132788: PPUSH
132789: CALL_OW 72
132793: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
132794: LD_VAR 0 14
132798: PUSH
132799: LD_VAR 0 15
132803: DIFF
132804: IFFALSE 132822
// tmp := tmp diff tmp2 ;
132806: LD_ADDR_VAR 0 14
132810: PUSH
132811: LD_VAR 0 14
132815: PUSH
132816: LD_VAR 0 15
132820: DIFF
132821: ST_TO_ADDR
// end ; if not f_murder then
132822: LD_VAR 0 20
132826: NOT
132827: IFFALSE 132885
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
132829: LD_ADDR_VAR 0 15
132833: PUSH
132834: LD_VAR 0 14
132838: PPUSH
132839: LD_INT 3
132841: PUSH
132842: LD_INT 50
132844: PUSH
132845: EMPTY
132846: LIST
132847: PUSH
132848: EMPTY
132849: LIST
132850: LIST
132851: PPUSH
132852: CALL_OW 72
132856: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
132857: LD_VAR 0 14
132861: PUSH
132862: LD_VAR 0 15
132866: DIFF
132867: IFFALSE 132885
// tmp := tmp diff tmp2 ;
132869: LD_ADDR_VAR 0 14
132873: PUSH
132874: LD_VAR 0 14
132878: PUSH
132879: LD_VAR 0 15
132883: DIFF
132884: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
132885: LD_ADDR_VAR 0 14
132889: PUSH
132890: LD_VAR 0 4
132894: PUSH
132895: LD_VAR 0 7
132899: ARRAY
132900: PPUSH
132901: LD_VAR 0 14
132905: PPUSH
132906: LD_INT 1
132908: PPUSH
132909: LD_INT 1
132911: PPUSH
132912: CALL 74455 0 4
132916: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
132917: LD_VAR 0 4
132921: PUSH
132922: LD_VAR 0 7
132926: ARRAY
132927: PPUSH
132928: CALL_OW 257
132932: PUSH
132933: LD_INT 1
132935: EQUAL
132936: IFFALSE 133384
// begin if WantPlant ( group [ i ] ) then
132938: LD_VAR 0 4
132942: PUSH
132943: LD_VAR 0 7
132947: ARRAY
132948: PPUSH
132949: CALL 73956 0 1
132953: IFFALSE 132957
// continue ;
132955: GO 131229
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
132957: LD_VAR 0 18
132961: PUSH
132962: LD_VAR 0 4
132966: PUSH
132967: LD_VAR 0 7
132971: ARRAY
132972: PPUSH
132973: CALL_OW 310
132977: NOT
132978: AND
132979: PUSH
132980: LD_VAR 0 14
132984: PUSH
132985: LD_INT 1
132987: ARRAY
132988: PUSH
132989: LD_VAR 0 14
132993: PPUSH
132994: LD_INT 21
132996: PUSH
132997: LD_INT 2
132999: PUSH
133000: EMPTY
133001: LIST
133002: LIST
133003: PUSH
133004: LD_INT 58
133006: PUSH
133007: EMPTY
133008: LIST
133009: PUSH
133010: EMPTY
133011: LIST
133012: LIST
133013: PPUSH
133014: CALL_OW 72
133018: IN
133019: AND
133020: IFFALSE 133056
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
133022: LD_VAR 0 4
133026: PUSH
133027: LD_VAR 0 7
133031: ARRAY
133032: PPUSH
133033: LD_VAR 0 14
133037: PUSH
133038: LD_INT 1
133040: ARRAY
133041: PPUSH
133042: CALL_OW 120
// attacking := true ;
133046: LD_ADDR_VAR 0 29
133050: PUSH
133051: LD_INT 1
133053: ST_TO_ADDR
// continue ;
133054: GO 131229
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
133056: LD_VAR 0 26
133060: PUSH
133061: LD_VAR 0 4
133065: PUSH
133066: LD_VAR 0 7
133070: ARRAY
133071: PPUSH
133072: CALL_OW 257
133076: PUSH
133077: LD_INT 1
133079: EQUAL
133080: AND
133081: PUSH
133082: LD_VAR 0 4
133086: PUSH
133087: LD_VAR 0 7
133091: ARRAY
133092: PPUSH
133093: CALL_OW 256
133097: PUSH
133098: LD_INT 800
133100: LESS
133101: AND
133102: PUSH
133103: LD_VAR 0 4
133107: PUSH
133108: LD_VAR 0 7
133112: ARRAY
133113: PPUSH
133114: CALL_OW 318
133118: NOT
133119: AND
133120: IFFALSE 133137
// ComCrawl ( group [ i ] ) ;
133122: LD_VAR 0 4
133126: PUSH
133127: LD_VAR 0 7
133131: ARRAY
133132: PPUSH
133133: CALL_OW 137
// if f_mines then
133137: LD_VAR 0 21
133141: IFFALSE 133384
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
133143: LD_VAR 0 14
133147: PUSH
133148: LD_INT 1
133150: ARRAY
133151: PPUSH
133152: CALL_OW 247
133156: PUSH
133157: LD_INT 3
133159: EQUAL
133160: PUSH
133161: LD_VAR 0 14
133165: PUSH
133166: LD_INT 1
133168: ARRAY
133169: PUSH
133170: LD_VAR 0 27
133174: IN
133175: NOT
133176: AND
133177: IFFALSE 133384
// begin x := GetX ( tmp [ 1 ] ) ;
133179: LD_ADDR_VAR 0 10
133183: PUSH
133184: LD_VAR 0 14
133188: PUSH
133189: LD_INT 1
133191: ARRAY
133192: PPUSH
133193: CALL_OW 250
133197: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
133198: LD_ADDR_VAR 0 11
133202: PUSH
133203: LD_VAR 0 14
133207: PUSH
133208: LD_INT 1
133210: ARRAY
133211: PPUSH
133212: CALL_OW 251
133216: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
133217: LD_ADDR_VAR 0 12
133221: PUSH
133222: LD_VAR 0 4
133226: PUSH
133227: LD_VAR 0 7
133231: ARRAY
133232: PPUSH
133233: CALL 101628 0 1
133237: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
133238: LD_VAR 0 4
133242: PUSH
133243: LD_VAR 0 7
133247: ARRAY
133248: PPUSH
133249: LD_VAR 0 10
133253: PPUSH
133254: LD_VAR 0 11
133258: PPUSH
133259: LD_VAR 0 14
133263: PUSH
133264: LD_INT 1
133266: ARRAY
133267: PPUSH
133268: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
133272: LD_VAR 0 4
133276: PUSH
133277: LD_VAR 0 7
133281: ARRAY
133282: PPUSH
133283: LD_VAR 0 10
133287: PPUSH
133288: LD_VAR 0 12
133292: PPUSH
133293: LD_INT 7
133295: PPUSH
133296: CALL_OW 272
133300: PPUSH
133301: LD_VAR 0 11
133305: PPUSH
133306: LD_VAR 0 12
133310: PPUSH
133311: LD_INT 7
133313: PPUSH
133314: CALL_OW 273
133318: PPUSH
133319: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
133323: LD_VAR 0 4
133327: PUSH
133328: LD_VAR 0 7
133332: ARRAY
133333: PPUSH
133334: LD_INT 71
133336: PPUSH
133337: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
133341: LD_ADDR_VAR 0 27
133345: PUSH
133346: LD_VAR 0 27
133350: PPUSH
133351: LD_VAR 0 27
133355: PUSH
133356: LD_INT 1
133358: PLUS
133359: PPUSH
133360: LD_VAR 0 14
133364: PUSH
133365: LD_INT 1
133367: ARRAY
133368: PPUSH
133369: CALL_OW 1
133373: ST_TO_ADDR
// attacking := true ;
133374: LD_ADDR_VAR 0 29
133378: PUSH
133379: LD_INT 1
133381: ST_TO_ADDR
// continue ;
133382: GO 131229
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
133384: LD_VAR 0 4
133388: PUSH
133389: LD_VAR 0 7
133393: ARRAY
133394: PPUSH
133395: CALL_OW 257
133399: PUSH
133400: LD_INT 17
133402: EQUAL
133403: PUSH
133404: LD_VAR 0 4
133408: PUSH
133409: LD_VAR 0 7
133413: ARRAY
133414: PPUSH
133415: CALL_OW 110
133419: PUSH
133420: LD_INT 71
133422: EQUAL
133423: NOT
133424: AND
133425: IFFALSE 133571
// begin attacking := false ;
133427: LD_ADDR_VAR 0 29
133431: PUSH
133432: LD_INT 0
133434: ST_TO_ADDR
// k := 5 ;
133435: LD_ADDR_VAR 0 9
133439: PUSH
133440: LD_INT 5
133442: ST_TO_ADDR
// if tmp < k then
133443: LD_VAR 0 14
133447: PUSH
133448: LD_VAR 0 9
133452: LESS
133453: IFFALSE 133465
// k := tmp ;
133455: LD_ADDR_VAR 0 9
133459: PUSH
133460: LD_VAR 0 14
133464: ST_TO_ADDR
// for j = 1 to k do
133465: LD_ADDR_VAR 0 8
133469: PUSH
133470: DOUBLE
133471: LD_INT 1
133473: DEC
133474: ST_TO_ADDR
133475: LD_VAR 0 9
133479: PUSH
133480: FOR_TO
133481: IFFALSE 133569
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
133483: LD_VAR 0 14
133487: PUSH
133488: LD_VAR 0 8
133492: ARRAY
133493: PUSH
133494: LD_VAR 0 14
133498: PPUSH
133499: LD_INT 58
133501: PUSH
133502: EMPTY
133503: LIST
133504: PPUSH
133505: CALL_OW 72
133509: IN
133510: NOT
133511: IFFALSE 133567
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
133513: LD_VAR 0 4
133517: PUSH
133518: LD_VAR 0 7
133522: ARRAY
133523: PPUSH
133524: LD_VAR 0 14
133528: PUSH
133529: LD_VAR 0 8
133533: ARRAY
133534: PPUSH
133535: CALL_OW 115
// attacking := true ;
133539: LD_ADDR_VAR 0 29
133543: PUSH
133544: LD_INT 1
133546: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
133547: LD_VAR 0 4
133551: PUSH
133552: LD_VAR 0 7
133556: ARRAY
133557: PPUSH
133558: LD_INT 71
133560: PPUSH
133561: CALL_OW 109
// continue ;
133565: GO 133480
// end ; end ;
133567: GO 133480
133569: POP
133570: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
133571: LD_VAR 0 4
133575: PUSH
133576: LD_VAR 0 7
133580: ARRAY
133581: PPUSH
133582: CALL_OW 257
133586: PUSH
133587: LD_INT 8
133589: EQUAL
133590: PUSH
133591: LD_VAR 0 4
133595: PUSH
133596: LD_VAR 0 7
133600: ARRAY
133601: PPUSH
133602: CALL_OW 264
133606: PUSH
133607: LD_INT 28
133609: PUSH
133610: LD_INT 45
133612: PUSH
133613: LD_INT 7
133615: PUSH
133616: LD_INT 47
133618: PUSH
133619: EMPTY
133620: LIST
133621: LIST
133622: LIST
133623: LIST
133624: IN
133625: OR
133626: IFFALSE 133882
// begin attacking := false ;
133628: LD_ADDR_VAR 0 29
133632: PUSH
133633: LD_INT 0
133635: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
133636: LD_VAR 0 14
133640: PUSH
133641: LD_INT 1
133643: ARRAY
133644: PPUSH
133645: CALL_OW 266
133649: PUSH
133650: LD_INT 32
133652: PUSH
133653: LD_INT 31
133655: PUSH
133656: LD_INT 33
133658: PUSH
133659: LD_INT 4
133661: PUSH
133662: LD_INT 5
133664: PUSH
133665: EMPTY
133666: LIST
133667: LIST
133668: LIST
133669: LIST
133670: LIST
133671: IN
133672: IFFALSE 133858
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
133674: LD_ADDR_VAR 0 9
133678: PUSH
133679: LD_VAR 0 14
133683: PUSH
133684: LD_INT 1
133686: ARRAY
133687: PPUSH
133688: CALL_OW 266
133692: PPUSH
133693: LD_VAR 0 14
133697: PUSH
133698: LD_INT 1
133700: ARRAY
133701: PPUSH
133702: CALL_OW 250
133706: PPUSH
133707: LD_VAR 0 14
133711: PUSH
133712: LD_INT 1
133714: ARRAY
133715: PPUSH
133716: CALL_OW 251
133720: PPUSH
133721: LD_VAR 0 14
133725: PUSH
133726: LD_INT 1
133728: ARRAY
133729: PPUSH
133730: CALL_OW 254
133734: PPUSH
133735: LD_VAR 0 14
133739: PUSH
133740: LD_INT 1
133742: ARRAY
133743: PPUSH
133744: CALL_OW 248
133748: PPUSH
133749: LD_INT 0
133751: PPUSH
133752: CALL 82998 0 6
133756: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
133757: LD_ADDR_VAR 0 8
133761: PUSH
133762: LD_VAR 0 4
133766: PUSH
133767: LD_VAR 0 7
133771: ARRAY
133772: PPUSH
133773: LD_VAR 0 9
133777: PPUSH
133778: CALL 101741 0 2
133782: ST_TO_ADDR
// if j then
133783: LD_VAR 0 8
133787: IFFALSE 133856
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
133789: LD_VAR 0 8
133793: PUSH
133794: LD_INT 1
133796: ARRAY
133797: PPUSH
133798: LD_VAR 0 8
133802: PUSH
133803: LD_INT 2
133805: ARRAY
133806: PPUSH
133807: CALL_OW 488
133811: IFFALSE 133856
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
133813: LD_VAR 0 4
133817: PUSH
133818: LD_VAR 0 7
133822: ARRAY
133823: PPUSH
133824: LD_VAR 0 8
133828: PUSH
133829: LD_INT 1
133831: ARRAY
133832: PPUSH
133833: LD_VAR 0 8
133837: PUSH
133838: LD_INT 2
133840: ARRAY
133841: PPUSH
133842: CALL_OW 116
// attacking := true ;
133846: LD_ADDR_VAR 0 29
133850: PUSH
133851: LD_INT 1
133853: ST_TO_ADDR
// continue ;
133854: GO 131229
// end ; end else
133856: GO 133882
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
133858: LD_VAR 0 4
133862: PUSH
133863: LD_VAR 0 7
133867: ARRAY
133868: PPUSH
133869: LD_VAR 0 14
133873: PUSH
133874: LD_INT 1
133876: ARRAY
133877: PPUSH
133878: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
133882: LD_VAR 0 4
133886: PUSH
133887: LD_VAR 0 7
133891: ARRAY
133892: PPUSH
133893: CALL_OW 265
133897: PUSH
133898: LD_INT 11
133900: EQUAL
133901: IFFALSE 134179
// begin k := 10 ;
133903: LD_ADDR_VAR 0 9
133907: PUSH
133908: LD_INT 10
133910: ST_TO_ADDR
// x := 0 ;
133911: LD_ADDR_VAR 0 10
133915: PUSH
133916: LD_INT 0
133918: ST_TO_ADDR
// if tmp < k then
133919: LD_VAR 0 14
133923: PUSH
133924: LD_VAR 0 9
133928: LESS
133929: IFFALSE 133941
// k := tmp ;
133931: LD_ADDR_VAR 0 9
133935: PUSH
133936: LD_VAR 0 14
133940: ST_TO_ADDR
// for j = k downto 1 do
133941: LD_ADDR_VAR 0 8
133945: PUSH
133946: DOUBLE
133947: LD_VAR 0 9
133951: INC
133952: ST_TO_ADDR
133953: LD_INT 1
133955: PUSH
133956: FOR_DOWNTO
133957: IFFALSE 134032
// begin if GetType ( tmp [ j ] ) = unit_human then
133959: LD_VAR 0 14
133963: PUSH
133964: LD_VAR 0 8
133968: ARRAY
133969: PPUSH
133970: CALL_OW 247
133974: PUSH
133975: LD_INT 1
133977: EQUAL
133978: IFFALSE 134030
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
133980: LD_VAR 0 4
133984: PUSH
133985: LD_VAR 0 7
133989: ARRAY
133990: PPUSH
133991: LD_VAR 0 14
133995: PUSH
133996: LD_VAR 0 8
134000: ARRAY
134001: PPUSH
134002: CALL 101995 0 2
// x := tmp [ j ] ;
134006: LD_ADDR_VAR 0 10
134010: PUSH
134011: LD_VAR 0 14
134015: PUSH
134016: LD_VAR 0 8
134020: ARRAY
134021: ST_TO_ADDR
// attacking := true ;
134022: LD_ADDR_VAR 0 29
134026: PUSH
134027: LD_INT 1
134029: ST_TO_ADDR
// end ; end ;
134030: GO 133956
134032: POP
134033: POP
// if not x then
134034: LD_VAR 0 10
134038: NOT
134039: IFFALSE 134179
// begin attacking := true ;
134041: LD_ADDR_VAR 0 29
134045: PUSH
134046: LD_INT 1
134048: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
134049: LD_VAR 0 4
134053: PUSH
134054: LD_VAR 0 7
134058: ARRAY
134059: PPUSH
134060: CALL_OW 250
134064: PPUSH
134065: LD_VAR 0 4
134069: PUSH
134070: LD_VAR 0 7
134074: ARRAY
134075: PPUSH
134076: CALL_OW 251
134080: PPUSH
134081: CALL_OW 546
134085: PUSH
134086: LD_INT 2
134088: ARRAY
134089: PUSH
134090: LD_VAR 0 14
134094: PUSH
134095: LD_INT 1
134097: ARRAY
134098: PPUSH
134099: CALL_OW 250
134103: PPUSH
134104: LD_VAR 0 14
134108: PUSH
134109: LD_INT 1
134111: ARRAY
134112: PPUSH
134113: CALL_OW 251
134117: PPUSH
134118: CALL_OW 546
134122: PUSH
134123: LD_INT 2
134125: ARRAY
134126: EQUAL
134127: IFFALSE 134155
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
134129: LD_VAR 0 4
134133: PUSH
134134: LD_VAR 0 7
134138: ARRAY
134139: PPUSH
134140: LD_VAR 0 14
134144: PUSH
134145: LD_INT 1
134147: ARRAY
134148: PPUSH
134149: CALL 101995 0 2
134153: GO 134179
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
134155: LD_VAR 0 4
134159: PUSH
134160: LD_VAR 0 7
134164: ARRAY
134165: PPUSH
134166: LD_VAR 0 14
134170: PUSH
134171: LD_INT 1
134173: ARRAY
134174: PPUSH
134175: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
134179: LD_VAR 0 4
134183: PUSH
134184: LD_VAR 0 7
134188: ARRAY
134189: PPUSH
134190: CALL_OW 264
134194: PUSH
134195: LD_INT 29
134197: EQUAL
134198: IFFALSE 134564
// begin if WantsToAttack ( group [ i ] ) in bombed then
134200: LD_VAR 0 4
134204: PUSH
134205: LD_VAR 0 7
134209: ARRAY
134210: PPUSH
134211: CALL_OW 319
134215: PUSH
134216: LD_VAR 0 28
134220: IN
134221: IFFALSE 134225
// continue ;
134223: GO 131229
// k := 8 ;
134225: LD_ADDR_VAR 0 9
134229: PUSH
134230: LD_INT 8
134232: ST_TO_ADDR
// x := 0 ;
134233: LD_ADDR_VAR 0 10
134237: PUSH
134238: LD_INT 0
134240: ST_TO_ADDR
// if tmp < k then
134241: LD_VAR 0 14
134245: PUSH
134246: LD_VAR 0 9
134250: LESS
134251: IFFALSE 134263
// k := tmp ;
134253: LD_ADDR_VAR 0 9
134257: PUSH
134258: LD_VAR 0 14
134262: ST_TO_ADDR
// for j = 1 to k do
134263: LD_ADDR_VAR 0 8
134267: PUSH
134268: DOUBLE
134269: LD_INT 1
134271: DEC
134272: ST_TO_ADDR
134273: LD_VAR 0 9
134277: PUSH
134278: FOR_TO
134279: IFFALSE 134411
// begin if GetType ( tmp [ j ] ) = unit_building then
134281: LD_VAR 0 14
134285: PUSH
134286: LD_VAR 0 8
134290: ARRAY
134291: PPUSH
134292: CALL_OW 247
134296: PUSH
134297: LD_INT 3
134299: EQUAL
134300: IFFALSE 134409
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
134302: LD_VAR 0 14
134306: PUSH
134307: LD_VAR 0 8
134311: ARRAY
134312: PUSH
134313: LD_VAR 0 28
134317: IN
134318: NOT
134319: PUSH
134320: LD_VAR 0 14
134324: PUSH
134325: LD_VAR 0 8
134329: ARRAY
134330: PPUSH
134331: CALL_OW 313
134335: AND
134336: IFFALSE 134409
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
134338: LD_VAR 0 4
134342: PUSH
134343: LD_VAR 0 7
134347: ARRAY
134348: PPUSH
134349: LD_VAR 0 14
134353: PUSH
134354: LD_VAR 0 8
134358: ARRAY
134359: PPUSH
134360: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
134364: LD_ADDR_VAR 0 28
134368: PUSH
134369: LD_VAR 0 28
134373: PPUSH
134374: LD_VAR 0 28
134378: PUSH
134379: LD_INT 1
134381: PLUS
134382: PPUSH
134383: LD_VAR 0 14
134387: PUSH
134388: LD_VAR 0 8
134392: ARRAY
134393: PPUSH
134394: CALL_OW 1
134398: ST_TO_ADDR
// attacking := true ;
134399: LD_ADDR_VAR 0 29
134403: PUSH
134404: LD_INT 1
134406: ST_TO_ADDR
// break ;
134407: GO 134411
// end ; end ;
134409: GO 134278
134411: POP
134412: POP
// if not attacking and f_attack_depot then
134413: LD_VAR 0 29
134417: NOT
134418: PUSH
134419: LD_VAR 0 25
134423: AND
134424: IFFALSE 134519
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
134426: LD_ADDR_VAR 0 13
134430: PUSH
134431: LD_VAR 0 14
134435: PPUSH
134436: LD_INT 2
134438: PUSH
134439: LD_INT 30
134441: PUSH
134442: LD_INT 0
134444: PUSH
134445: EMPTY
134446: LIST
134447: LIST
134448: PUSH
134449: LD_INT 30
134451: PUSH
134452: LD_INT 1
134454: PUSH
134455: EMPTY
134456: LIST
134457: LIST
134458: PUSH
134459: EMPTY
134460: LIST
134461: LIST
134462: LIST
134463: PPUSH
134464: CALL_OW 72
134468: ST_TO_ADDR
// if z then
134469: LD_VAR 0 13
134473: IFFALSE 134519
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
134475: LD_VAR 0 4
134479: PUSH
134480: LD_VAR 0 7
134484: ARRAY
134485: PPUSH
134486: LD_VAR 0 13
134490: PPUSH
134491: LD_VAR 0 4
134495: PUSH
134496: LD_VAR 0 7
134500: ARRAY
134501: PPUSH
134502: CALL_OW 74
134506: PPUSH
134507: CALL_OW 115
// attacking := true ;
134511: LD_ADDR_VAR 0 29
134515: PUSH
134516: LD_INT 1
134518: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
134519: LD_VAR 0 4
134523: PUSH
134524: LD_VAR 0 7
134528: ARRAY
134529: PPUSH
134530: CALL_OW 256
134534: PUSH
134535: LD_INT 500
134537: LESS
134538: IFFALSE 134564
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
134540: LD_VAR 0 4
134544: PUSH
134545: LD_VAR 0 7
134549: ARRAY
134550: PPUSH
134551: LD_VAR 0 14
134555: PUSH
134556: LD_INT 1
134558: ARRAY
134559: PPUSH
134560: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
134564: LD_VAR 0 4
134568: PUSH
134569: LD_VAR 0 7
134573: ARRAY
134574: PPUSH
134575: CALL_OW 264
134579: PUSH
134580: LD_INT 49
134582: EQUAL
134583: IFFALSE 134704
// begin if not HasTask ( group [ i ] ) then
134585: LD_VAR 0 4
134589: PUSH
134590: LD_VAR 0 7
134594: ARRAY
134595: PPUSH
134596: CALL_OW 314
134600: NOT
134601: IFFALSE 134704
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
134603: LD_ADDR_VAR 0 9
134607: PUSH
134608: LD_INT 81
134610: PUSH
134611: LD_VAR 0 4
134615: PUSH
134616: LD_VAR 0 7
134620: ARRAY
134621: PPUSH
134622: CALL_OW 255
134626: PUSH
134627: EMPTY
134628: LIST
134629: LIST
134630: PPUSH
134631: CALL_OW 69
134635: PPUSH
134636: LD_VAR 0 4
134640: PUSH
134641: LD_VAR 0 7
134645: ARRAY
134646: PPUSH
134647: CALL_OW 74
134651: ST_TO_ADDR
// if k then
134652: LD_VAR 0 9
134656: IFFALSE 134704
// if GetDistUnits ( group [ i ] , k ) > 10 then
134658: LD_VAR 0 4
134662: PUSH
134663: LD_VAR 0 7
134667: ARRAY
134668: PPUSH
134669: LD_VAR 0 9
134673: PPUSH
134674: CALL_OW 296
134678: PUSH
134679: LD_INT 10
134681: GREATER
134682: IFFALSE 134704
// ComMoveUnit ( group [ i ] , k ) ;
134684: LD_VAR 0 4
134688: PUSH
134689: LD_VAR 0 7
134693: ARRAY
134694: PPUSH
134695: LD_VAR 0 9
134699: PPUSH
134700: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
134704: LD_VAR 0 4
134708: PUSH
134709: LD_VAR 0 7
134713: ARRAY
134714: PPUSH
134715: CALL_OW 256
134719: PUSH
134720: LD_INT 250
134722: LESS
134723: PUSH
134724: LD_VAR 0 4
134728: PUSH
134729: LD_VAR 0 7
134733: ARRAY
134734: PUSH
134735: LD_INT 21
134737: PUSH
134738: LD_INT 2
134740: PUSH
134741: EMPTY
134742: LIST
134743: LIST
134744: PUSH
134745: LD_INT 23
134747: PUSH
134748: LD_INT 2
134750: PUSH
134751: EMPTY
134752: LIST
134753: LIST
134754: PUSH
134755: EMPTY
134756: LIST
134757: LIST
134758: PPUSH
134759: CALL_OW 69
134763: IN
134764: AND
134765: IFFALSE 134890
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
134767: LD_ADDR_VAR 0 9
134771: PUSH
134772: LD_OWVAR 3
134776: PUSH
134777: LD_VAR 0 4
134781: PUSH
134782: LD_VAR 0 7
134786: ARRAY
134787: DIFF
134788: PPUSH
134789: LD_VAR 0 4
134793: PUSH
134794: LD_VAR 0 7
134798: ARRAY
134799: PPUSH
134800: CALL_OW 74
134804: ST_TO_ADDR
// if not k then
134805: LD_VAR 0 9
134809: NOT
134810: IFFALSE 134814
// continue ;
134812: GO 131229
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
134814: LD_VAR 0 9
134818: PUSH
134819: LD_INT 81
134821: PUSH
134822: LD_VAR 0 4
134826: PUSH
134827: LD_VAR 0 7
134831: ARRAY
134832: PPUSH
134833: CALL_OW 255
134837: PUSH
134838: EMPTY
134839: LIST
134840: LIST
134841: PPUSH
134842: CALL_OW 69
134846: IN
134847: PUSH
134848: LD_VAR 0 9
134852: PPUSH
134853: LD_VAR 0 4
134857: PUSH
134858: LD_VAR 0 7
134862: ARRAY
134863: PPUSH
134864: CALL_OW 296
134868: PUSH
134869: LD_INT 5
134871: LESS
134872: AND
134873: IFFALSE 134890
// ComAutodestruct ( group [ i ] ) ;
134875: LD_VAR 0 4
134879: PUSH
134880: LD_VAR 0 7
134884: ARRAY
134885: PPUSH
134886: CALL 101893 0 1
// end ; if f_attack_depot then
134890: LD_VAR 0 25
134894: IFFALSE 135006
// begin k := 6 ;
134896: LD_ADDR_VAR 0 9
134900: PUSH
134901: LD_INT 6
134903: ST_TO_ADDR
// if tmp < k then
134904: LD_VAR 0 14
134908: PUSH
134909: LD_VAR 0 9
134913: LESS
134914: IFFALSE 134926
// k := tmp ;
134916: LD_ADDR_VAR 0 9
134920: PUSH
134921: LD_VAR 0 14
134925: ST_TO_ADDR
// for j = 1 to k do
134926: LD_ADDR_VAR 0 8
134930: PUSH
134931: DOUBLE
134932: LD_INT 1
134934: DEC
134935: ST_TO_ADDR
134936: LD_VAR 0 9
134940: PUSH
134941: FOR_TO
134942: IFFALSE 135004
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
134944: LD_VAR 0 8
134948: PPUSH
134949: CALL_OW 266
134953: PUSH
134954: LD_INT 0
134956: PUSH
134957: LD_INT 1
134959: PUSH
134960: EMPTY
134961: LIST
134962: LIST
134963: IN
134964: IFFALSE 135002
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
134966: LD_VAR 0 4
134970: PUSH
134971: LD_VAR 0 7
134975: ARRAY
134976: PPUSH
134977: LD_VAR 0 14
134981: PUSH
134982: LD_VAR 0 8
134986: ARRAY
134987: PPUSH
134988: CALL_OW 115
// attacking := true ;
134992: LD_ADDR_VAR 0 29
134996: PUSH
134997: LD_INT 1
134999: ST_TO_ADDR
// break ;
135000: GO 135004
// end ;
135002: GO 134941
135004: POP
135005: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
135006: LD_VAR 0 4
135010: PUSH
135011: LD_VAR 0 7
135015: ARRAY
135016: PPUSH
135017: CALL_OW 302
135021: PUSH
135022: LD_VAR 0 29
135026: NOT
135027: AND
135028: IFFALSE 135350
// begin if GetTag ( group [ i ] ) = 71 then
135030: LD_VAR 0 4
135034: PUSH
135035: LD_VAR 0 7
135039: ARRAY
135040: PPUSH
135041: CALL_OW 110
135045: PUSH
135046: LD_INT 71
135048: EQUAL
135049: IFFALSE 135090
// begin if HasTask ( group [ i ] ) then
135051: LD_VAR 0 4
135055: PUSH
135056: LD_VAR 0 7
135060: ARRAY
135061: PPUSH
135062: CALL_OW 314
135066: IFFALSE 135072
// continue else
135068: GO 131229
135070: GO 135090
// SetTag ( group [ i ] , 0 ) ;
135072: LD_VAR 0 4
135076: PUSH
135077: LD_VAR 0 7
135081: ARRAY
135082: PPUSH
135083: LD_INT 0
135085: PPUSH
135086: CALL_OW 109
// end ; k := 8 ;
135090: LD_ADDR_VAR 0 9
135094: PUSH
135095: LD_INT 8
135097: ST_TO_ADDR
// x := 0 ;
135098: LD_ADDR_VAR 0 10
135102: PUSH
135103: LD_INT 0
135105: ST_TO_ADDR
// if tmp < k then
135106: LD_VAR 0 14
135110: PUSH
135111: LD_VAR 0 9
135115: LESS
135116: IFFALSE 135128
// k := tmp ;
135118: LD_ADDR_VAR 0 9
135122: PUSH
135123: LD_VAR 0 14
135127: ST_TO_ADDR
// for j = 1 to k do
135128: LD_ADDR_VAR 0 8
135132: PUSH
135133: DOUBLE
135134: LD_INT 1
135136: DEC
135137: ST_TO_ADDR
135138: LD_VAR 0 9
135142: PUSH
135143: FOR_TO
135144: IFFALSE 135242
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
135146: LD_VAR 0 14
135150: PUSH
135151: LD_VAR 0 8
135155: ARRAY
135156: PPUSH
135157: CALL_OW 247
135161: PUSH
135162: LD_INT 1
135164: EQUAL
135165: PUSH
135166: LD_VAR 0 14
135170: PUSH
135171: LD_VAR 0 8
135175: ARRAY
135176: PPUSH
135177: CALL_OW 256
135181: PUSH
135182: LD_INT 250
135184: LESS
135185: PUSH
135186: LD_VAR 0 20
135190: AND
135191: PUSH
135192: LD_VAR 0 20
135196: NOT
135197: PUSH
135198: LD_VAR 0 14
135202: PUSH
135203: LD_VAR 0 8
135207: ARRAY
135208: PPUSH
135209: CALL_OW 256
135213: PUSH
135214: LD_INT 250
135216: GREATEREQUAL
135217: AND
135218: OR
135219: AND
135220: IFFALSE 135240
// begin x := tmp [ j ] ;
135222: LD_ADDR_VAR 0 10
135226: PUSH
135227: LD_VAR 0 14
135231: PUSH
135232: LD_VAR 0 8
135236: ARRAY
135237: ST_TO_ADDR
// break ;
135238: GO 135242
// end ;
135240: GO 135143
135242: POP
135243: POP
// if x then
135244: LD_VAR 0 10
135248: IFFALSE 135272
// ComAttackUnit ( group [ i ] , x ) else
135250: LD_VAR 0 4
135254: PUSH
135255: LD_VAR 0 7
135259: ARRAY
135260: PPUSH
135261: LD_VAR 0 10
135265: PPUSH
135266: CALL_OW 115
135270: GO 135296
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
135272: LD_VAR 0 4
135276: PUSH
135277: LD_VAR 0 7
135281: ARRAY
135282: PPUSH
135283: LD_VAR 0 14
135287: PUSH
135288: LD_INT 1
135290: ARRAY
135291: PPUSH
135292: CALL_OW 115
// if not HasTask ( group [ i ] ) then
135296: LD_VAR 0 4
135300: PUSH
135301: LD_VAR 0 7
135305: ARRAY
135306: PPUSH
135307: CALL_OW 314
135311: NOT
135312: IFFALSE 135350
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
135314: LD_VAR 0 4
135318: PUSH
135319: LD_VAR 0 7
135323: ARRAY
135324: PPUSH
135325: LD_VAR 0 14
135329: PPUSH
135330: LD_VAR 0 4
135334: PUSH
135335: LD_VAR 0 7
135339: ARRAY
135340: PPUSH
135341: CALL_OW 74
135345: PPUSH
135346: CALL_OW 115
// end ; end ; end ;
135350: GO 131229
135352: POP
135353: POP
// wait ( 0 0$2 ) ;
135354: LD_INT 70
135356: PPUSH
135357: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
135361: LD_VAR 0 4
135365: NOT
135366: PUSH
135367: LD_VAR 0 4
135371: PUSH
135372: EMPTY
135373: EQUAL
135374: OR
135375: PUSH
135376: LD_INT 81
135378: PUSH
135379: LD_VAR 0 35
135383: PUSH
135384: EMPTY
135385: LIST
135386: LIST
135387: PPUSH
135388: CALL_OW 69
135392: NOT
135393: OR
135394: IFFALSE 131214
// end ;
135396: LD_VAR 0 2
135400: RET
// export function BasicDefend ( base , solds ) ; var enemy , e , side , i , hex ; begin
135401: LD_INT 0
135403: PPUSH
135404: PPUSH
135405: PPUSH
135406: PPUSH
135407: PPUSH
135408: PPUSH
// if not base or not mc_bases [ base ] or not solds then
135409: LD_VAR 0 1
135413: NOT
135414: PUSH
135415: LD_EXP 101
135419: PUSH
135420: LD_VAR 0 1
135424: ARRAY
135425: NOT
135426: OR
135427: PUSH
135428: LD_VAR 0 2
135432: NOT
135433: OR
135434: IFFALSE 135438
// exit ;
135436: GO 135992
// side := mc_sides [ base ] ;
135438: LD_ADDR_VAR 0 6
135442: PUSH
135443: LD_EXP 127
135447: PUSH
135448: LD_VAR 0 1
135452: ARRAY
135453: ST_TO_ADDR
// if not side then
135454: LD_VAR 0 6
135458: NOT
135459: IFFALSE 135463
// exit ;
135461: GO 135992
// for i in solds do
135463: LD_ADDR_VAR 0 7
135467: PUSH
135468: LD_VAR 0 2
135472: PUSH
135473: FOR_IN
135474: IFFALSE 135535
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
135476: LD_VAR 0 7
135480: PPUSH
135481: CALL_OW 310
135485: PPUSH
135486: CALL_OW 266
135490: PUSH
135491: LD_INT 32
135493: PUSH
135494: LD_INT 31
135496: PUSH
135497: EMPTY
135498: LIST
135499: LIST
135500: IN
135501: IFFALSE 135521
// solds := solds diff i else
135503: LD_ADDR_VAR 0 2
135507: PUSH
135508: LD_VAR 0 2
135512: PUSH
135513: LD_VAR 0 7
135517: DIFF
135518: ST_TO_ADDR
135519: GO 135533
// SetTag ( i , 18 ) ;
135521: LD_VAR 0 7
135525: PPUSH
135526: LD_INT 18
135528: PPUSH
135529: CALL_OW 109
135533: GO 135473
135535: POP
135536: POP
// if not solds then
135537: LD_VAR 0 2
135541: NOT
135542: IFFALSE 135546
// exit ;
135544: GO 135992
// repeat wait ( 0 0$2 ) ;
135546: LD_INT 70
135548: PPUSH
135549: CALL_OW 67
// enemy := mc_scan [ base ] ;
135553: LD_ADDR_VAR 0 4
135557: PUSH
135558: LD_EXP 124
135562: PUSH
135563: LD_VAR 0 1
135567: ARRAY
135568: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
135569: LD_EXP 101
135573: PUSH
135574: LD_VAR 0 1
135578: ARRAY
135579: NOT
135580: PUSH
135581: LD_EXP 101
135585: PUSH
135586: LD_VAR 0 1
135590: ARRAY
135591: PUSH
135592: EMPTY
135593: EQUAL
135594: OR
135595: IFFALSE 135632
// begin for i in solds do
135597: LD_ADDR_VAR 0 7
135601: PUSH
135602: LD_VAR 0 2
135606: PUSH
135607: FOR_IN
135608: IFFALSE 135621
// ComStop ( i ) ;
135610: LD_VAR 0 7
135614: PPUSH
135615: CALL_OW 141
135619: GO 135607
135621: POP
135622: POP
// solds := [ ] ;
135623: LD_ADDR_VAR 0 2
135627: PUSH
135628: EMPTY
135629: ST_TO_ADDR
// exit ;
135630: GO 135992
// end ; for i in solds do
135632: LD_ADDR_VAR 0 7
135636: PUSH
135637: LD_VAR 0 2
135641: PUSH
135642: FOR_IN
135643: IFFALSE 135964
// begin if IsInUnit ( i ) then
135645: LD_VAR 0 7
135649: PPUSH
135650: CALL_OW 310
135654: IFFALSE 135665
// ComExitBuilding ( i ) ;
135656: LD_VAR 0 7
135660: PPUSH
135661: CALL_OW 122
// if GetLives ( i ) > 500 then
135665: LD_VAR 0 7
135669: PPUSH
135670: CALL_OW 256
135674: PUSH
135675: LD_INT 500
135677: GREATER
135678: IFFALSE 135731
// begin e := NearestUnitToUnit ( enemy , i ) ;
135680: LD_ADDR_VAR 0 5
135684: PUSH
135685: LD_VAR 0 4
135689: PPUSH
135690: LD_VAR 0 7
135694: PPUSH
135695: CALL_OW 74
135699: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
135700: LD_VAR 0 7
135704: PPUSH
135705: LD_VAR 0 5
135709: PPUSH
135710: CALL_OW 250
135714: PPUSH
135715: LD_VAR 0 5
135719: PPUSH
135720: CALL_OW 251
135724: PPUSH
135725: CALL_OW 114
// end else
135729: GO 135962
// if GetDistUnits ( i , NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ) > 10 then
135731: LD_VAR 0 7
135735: PPUSH
135736: LD_EXP 101
135740: PUSH
135741: LD_VAR 0 1
135745: ARRAY
135746: PPUSH
135747: LD_INT 2
135749: PUSH
135750: LD_INT 30
135752: PUSH
135753: LD_INT 0
135755: PUSH
135756: EMPTY
135757: LIST
135758: LIST
135759: PUSH
135760: LD_INT 30
135762: PUSH
135763: LD_INT 1
135765: PUSH
135766: EMPTY
135767: LIST
135768: LIST
135769: PUSH
135770: LD_INT 30
135772: PUSH
135773: LD_INT 6
135775: PUSH
135776: EMPTY
135777: LIST
135778: LIST
135779: PUSH
135780: EMPTY
135781: LIST
135782: LIST
135783: LIST
135784: LIST
135785: PPUSH
135786: CALL_OW 72
135790: PPUSH
135791: LD_VAR 0 7
135795: PPUSH
135796: CALL_OW 74
135800: PPUSH
135801: CALL_OW 296
135805: PUSH
135806: LD_INT 10
135808: GREATER
135809: IFFALSE 135962
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
135811: LD_ADDR_VAR 0 8
135815: PUSH
135816: LD_EXP 101
135820: PUSH
135821: LD_VAR 0 1
135825: ARRAY
135826: PPUSH
135827: LD_INT 2
135829: PUSH
135830: LD_INT 30
135832: PUSH
135833: LD_INT 0
135835: PUSH
135836: EMPTY
135837: LIST
135838: LIST
135839: PUSH
135840: LD_INT 30
135842: PUSH
135843: LD_INT 1
135845: PUSH
135846: EMPTY
135847: LIST
135848: LIST
135849: PUSH
135850: LD_INT 30
135852: PUSH
135853: LD_INT 6
135855: PUSH
135856: EMPTY
135857: LIST
135858: LIST
135859: PUSH
135860: EMPTY
135861: LIST
135862: LIST
135863: LIST
135864: LIST
135865: PPUSH
135866: CALL_OW 72
135870: PPUSH
135871: LD_VAR 0 7
135875: PPUSH
135876: CALL_OW 74
135880: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
135881: LD_VAR 0 7
135885: PPUSH
135886: LD_VAR 0 8
135890: PPUSH
135891: CALL_OW 250
135895: PPUSH
135896: LD_INT 3
135898: PPUSH
135899: LD_INT 5
135901: PPUSH
135902: CALL_OW 272
135906: PPUSH
135907: LD_VAR 0 8
135911: PPUSH
135912: CALL_OW 251
135916: PPUSH
135917: LD_INT 3
135919: PPUSH
135920: LD_INT 5
135922: PPUSH
135923: CALL_OW 273
135927: PPUSH
135928: CALL_OW 111
// SetTag ( i , 0 ) ;
135932: LD_VAR 0 7
135936: PPUSH
135937: LD_INT 0
135939: PPUSH
135940: CALL_OW 109
// solds := solds diff i ;
135944: LD_ADDR_VAR 0 2
135948: PUSH
135949: LD_VAR 0 2
135953: PUSH
135954: LD_VAR 0 7
135958: DIFF
135959: ST_TO_ADDR
// continue ;
135960: GO 135642
// end ; end ;
135962: GO 135642
135964: POP
135965: POP
// until not solds or not enemy ;
135966: LD_VAR 0 2
135970: NOT
135971: PUSH
135972: LD_VAR 0 4
135976: NOT
135977: OR
135978: IFFALSE 135546
// MC_Reset ( base , 18 ) ;
135980: LD_VAR 0 1
135984: PPUSH
135985: LD_INT 18
135987: PPUSH
135988: CALL 42519 0 2
// end ;
135992: LD_VAR 0 3
135996: RET
// export function Defend ( base , defenders ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend , class , enemy ; begin
135997: LD_INT 0
135999: PPUSH
136000: PPUSH
136001: PPUSH
136002: PPUSH
136003: PPUSH
136004: PPUSH
136005: PPUSH
136006: PPUSH
136007: PPUSH
136008: PPUSH
136009: PPUSH
136010: PPUSH
136011: PPUSH
136012: PPUSH
136013: PPUSH
136014: PPUSH
136015: PPUSH
136016: PPUSH
136017: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
136018: LD_ADDR_VAR 0 12
136022: PUSH
136023: LD_EXP 101
136027: PUSH
136028: LD_VAR 0 1
136032: ARRAY
136033: PPUSH
136034: LD_INT 25
136036: PUSH
136037: LD_INT 3
136039: PUSH
136040: EMPTY
136041: LIST
136042: LIST
136043: PPUSH
136044: CALL_OW 72
136048: ST_TO_ADDR
// if mc_remote_driver [ base ] then
136049: LD_EXP 141
136053: PUSH
136054: LD_VAR 0 1
136058: ARRAY
136059: IFFALSE 136083
// mechs := mechs diff mc_remote_driver [ base ] ;
136061: LD_ADDR_VAR 0 12
136065: PUSH
136066: LD_VAR 0 12
136070: PUSH
136071: LD_EXP 141
136075: PUSH
136076: LD_VAR 0 1
136080: ARRAY
136081: DIFF
136082: ST_TO_ADDR
// for i in mechs do
136083: LD_ADDR_VAR 0 4
136087: PUSH
136088: LD_VAR 0 12
136092: PUSH
136093: FOR_IN
136094: IFFALSE 136129
// if GetTag ( i ) > 0 then
136096: LD_VAR 0 4
136100: PPUSH
136101: CALL_OW 110
136105: PUSH
136106: LD_INT 0
136108: GREATER
136109: IFFALSE 136127
// mechs := mechs diff i ;
136111: LD_ADDR_VAR 0 12
136115: PUSH
136116: LD_VAR 0 12
136120: PUSH
136121: LD_VAR 0 4
136125: DIFF
136126: ST_TO_ADDR
136127: GO 136093
136129: POP
136130: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
136131: LD_ADDR_VAR 0 8
136135: PUSH
136136: LD_EXP 101
136140: PUSH
136141: LD_VAR 0 1
136145: ARRAY
136146: PPUSH
136147: LD_INT 2
136149: PUSH
136150: LD_INT 25
136152: PUSH
136153: LD_INT 1
136155: PUSH
136156: EMPTY
136157: LIST
136158: LIST
136159: PUSH
136160: LD_INT 25
136162: PUSH
136163: LD_INT 5
136165: PUSH
136166: EMPTY
136167: LIST
136168: LIST
136169: PUSH
136170: LD_INT 25
136172: PUSH
136173: LD_INT 8
136175: PUSH
136176: EMPTY
136177: LIST
136178: LIST
136179: PUSH
136180: LD_INT 25
136182: PUSH
136183: LD_INT 9
136185: PUSH
136186: EMPTY
136187: LIST
136188: LIST
136189: PUSH
136190: EMPTY
136191: LIST
136192: LIST
136193: LIST
136194: LIST
136195: LIST
136196: PPUSH
136197: CALL_OW 72
136201: ST_TO_ADDR
// if not defenders and not solds then
136202: LD_VAR 0 2
136206: NOT
136207: PUSH
136208: LD_VAR 0 8
136212: NOT
136213: AND
136214: IFFALSE 136218
// exit ;
136216: GO 137988
// depot_under_attack := false ;
136218: LD_ADDR_VAR 0 16
136222: PUSH
136223: LD_INT 0
136225: ST_TO_ADDR
// sold_defenders := [ ] ;
136226: LD_ADDR_VAR 0 17
136230: PUSH
136231: EMPTY
136232: ST_TO_ADDR
// if mechs then
136233: LD_VAR 0 12
136237: IFFALSE 136390
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
136239: LD_ADDR_VAR 0 4
136243: PUSH
136244: LD_VAR 0 2
136248: PPUSH
136249: LD_INT 21
136251: PUSH
136252: LD_INT 2
136254: PUSH
136255: EMPTY
136256: LIST
136257: LIST
136258: PPUSH
136259: CALL_OW 72
136263: PUSH
136264: FOR_IN
136265: IFFALSE 136388
// begin if GetTag ( i ) <> 20 then
136267: LD_VAR 0 4
136271: PPUSH
136272: CALL_OW 110
136276: PUSH
136277: LD_INT 20
136279: NONEQUAL
136280: IFFALSE 136294
// SetTag ( i , 20 ) ;
136282: LD_VAR 0 4
136286: PPUSH
136287: LD_INT 20
136289: PPUSH
136290: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
136294: LD_VAR 0 4
136298: PPUSH
136299: CALL_OW 263
136303: PUSH
136304: LD_INT 1
136306: EQUAL
136307: PUSH
136308: LD_VAR 0 4
136312: PPUSH
136313: CALL_OW 311
136317: NOT
136318: AND
136319: IFFALSE 136386
// begin un := mechs [ 1 ] ;
136321: LD_ADDR_VAR 0 10
136325: PUSH
136326: LD_VAR 0 12
136330: PUSH
136331: LD_INT 1
136333: ARRAY
136334: ST_TO_ADDR
// ComExit ( un ) ;
136335: LD_VAR 0 10
136339: PPUSH
136340: CALL 106777 0 1
// AddComEnterUnit ( un , i ) ;
136344: LD_VAR 0 10
136348: PPUSH
136349: LD_VAR 0 4
136353: PPUSH
136354: CALL_OW 180
// SetTag ( un , 19 ) ;
136358: LD_VAR 0 10
136362: PPUSH
136363: LD_INT 19
136365: PPUSH
136366: CALL_OW 109
// mechs := mechs diff un ;
136370: LD_ADDR_VAR 0 12
136374: PUSH
136375: LD_VAR 0 12
136379: PUSH
136380: LD_VAR 0 10
136384: DIFF
136385: ST_TO_ADDR
// end ; end ;
136386: GO 136264
136388: POP
136389: POP
// if solds then
136390: LD_VAR 0 8
136394: IFFALSE 136453
// for i in solds do
136396: LD_ADDR_VAR 0 4
136400: PUSH
136401: LD_VAR 0 8
136405: PUSH
136406: FOR_IN
136407: IFFALSE 136451
// if not GetTag ( i ) then
136409: LD_VAR 0 4
136413: PPUSH
136414: CALL_OW 110
136418: NOT
136419: IFFALSE 136449
// begin defenders := defenders union i ;
136421: LD_ADDR_VAR 0 2
136425: PUSH
136426: LD_VAR 0 2
136430: PUSH
136431: LD_VAR 0 4
136435: UNION
136436: ST_TO_ADDR
// SetTag ( i , 18 ) ;
136437: LD_VAR 0 4
136441: PPUSH
136442: LD_INT 18
136444: PPUSH
136445: CALL_OW 109
// end ;
136449: GO 136406
136451: POP
136452: POP
// repeat wait ( 0 0$2 ) ;
136453: LD_INT 70
136455: PPUSH
136456: CALL_OW 67
// enemy := mc_scan [ base ] ;
136460: LD_ADDR_VAR 0 21
136464: PUSH
136465: LD_EXP 124
136469: PUSH
136470: LD_VAR 0 1
136474: ARRAY
136475: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
136476: LD_EXP 101
136480: PUSH
136481: LD_VAR 0 1
136485: ARRAY
136486: NOT
136487: PUSH
136488: LD_EXP 101
136492: PUSH
136493: LD_VAR 0 1
136497: ARRAY
136498: PUSH
136499: EMPTY
136500: EQUAL
136501: OR
136502: IFFALSE 136539
// begin for i in defenders do
136504: LD_ADDR_VAR 0 4
136508: PUSH
136509: LD_VAR 0 2
136513: PUSH
136514: FOR_IN
136515: IFFALSE 136528
// ComStop ( i ) ;
136517: LD_VAR 0 4
136521: PPUSH
136522: CALL_OW 141
136526: GO 136514
136528: POP
136529: POP
// defenders := [ ] ;
136530: LD_ADDR_VAR 0 2
136534: PUSH
136535: EMPTY
136536: ST_TO_ADDR
// exit ;
136537: GO 137988
// end ; for i in defenders do
136539: LD_ADDR_VAR 0 4
136543: PUSH
136544: LD_VAR 0 2
136548: PUSH
136549: FOR_IN
136550: IFFALSE 137448
// begin e := NearestUnitToUnit ( enemy , i ) ;
136552: LD_ADDR_VAR 0 13
136556: PUSH
136557: LD_VAR 0 21
136561: PPUSH
136562: LD_VAR 0 4
136566: PPUSH
136567: CALL_OW 74
136571: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
136572: LD_ADDR_VAR 0 7
136576: PUSH
136577: LD_EXP 101
136581: PUSH
136582: LD_VAR 0 1
136586: ARRAY
136587: PPUSH
136588: LD_INT 2
136590: PUSH
136591: LD_INT 30
136593: PUSH
136594: LD_INT 0
136596: PUSH
136597: EMPTY
136598: LIST
136599: LIST
136600: PUSH
136601: LD_INT 30
136603: PUSH
136604: LD_INT 1
136606: PUSH
136607: EMPTY
136608: LIST
136609: LIST
136610: PUSH
136611: EMPTY
136612: LIST
136613: LIST
136614: LIST
136615: PPUSH
136616: CALL_OW 72
136620: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
136621: LD_ADDR_VAR 0 16
136625: PUSH
136626: LD_VAR 0 7
136630: NOT
136631: PUSH
136632: LD_VAR 0 7
136636: PPUSH
136637: LD_INT 3
136639: PUSH
136640: LD_INT 24
136642: PUSH
136643: LD_INT 600
136645: PUSH
136646: EMPTY
136647: LIST
136648: LIST
136649: PUSH
136650: EMPTY
136651: LIST
136652: LIST
136653: PPUSH
136654: CALL_OW 72
136658: OR
136659: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
136660: LD_VAR 0 4
136664: PPUSH
136665: CALL_OW 247
136669: PUSH
136670: LD_INT 2
136672: DOUBLE
136673: EQUAL
136674: IFTRUE 136678
136676: GO 137074
136678: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
136679: LD_VAR 0 4
136683: PPUSH
136684: CALL_OW 256
136688: PUSH
136689: LD_INT 1000
136691: EQUAL
136692: PUSH
136693: LD_VAR 0 4
136697: PPUSH
136698: LD_VAR 0 13
136702: PPUSH
136703: CALL_OW 296
136707: PUSH
136708: LD_INT 40
136710: LESS
136711: PUSH
136712: LD_VAR 0 13
136716: PPUSH
136717: LD_EXP 126
136721: PUSH
136722: LD_VAR 0 1
136726: ARRAY
136727: PPUSH
136728: CALL_OW 308
136732: OR
136733: AND
136734: IFFALSE 136856
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
136736: LD_VAR 0 4
136740: PPUSH
136741: CALL_OW 262
136745: PUSH
136746: LD_INT 1
136748: EQUAL
136749: PUSH
136750: LD_VAR 0 4
136754: PPUSH
136755: CALL_OW 261
136759: PUSH
136760: LD_INT 30
136762: LESS
136763: AND
136764: PUSH
136765: LD_VAR 0 7
136769: AND
136770: IFFALSE 136840
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
136772: LD_VAR 0 4
136776: PPUSH
136777: LD_VAR 0 7
136781: PPUSH
136782: LD_VAR 0 4
136786: PPUSH
136787: CALL_OW 74
136791: PPUSH
136792: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
136796: LD_VAR 0 4
136800: PPUSH
136801: LD_VAR 0 7
136805: PPUSH
136806: LD_VAR 0 4
136810: PPUSH
136811: CALL_OW 74
136815: PPUSH
136816: CALL_OW 296
136820: PUSH
136821: LD_INT 6
136823: LESS
136824: IFFALSE 136838
// SetFuel ( i , 100 ) ;
136826: LD_VAR 0 4
136830: PPUSH
136831: LD_INT 100
136833: PPUSH
136834: CALL_OW 240
// end else
136838: GO 136854
// ComAttackUnit ( i , e ) ;
136840: LD_VAR 0 4
136844: PPUSH
136845: LD_VAR 0 13
136849: PPUSH
136850: CALL_OW 115
// end else
136854: GO 136957
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
136856: LD_VAR 0 13
136860: PPUSH
136861: LD_EXP 126
136865: PUSH
136866: LD_VAR 0 1
136870: ARRAY
136871: PPUSH
136872: CALL_OW 308
136876: NOT
136877: PUSH
136878: LD_VAR 0 4
136882: PPUSH
136883: LD_VAR 0 13
136887: PPUSH
136888: CALL_OW 296
136892: PUSH
136893: LD_INT 40
136895: GREATEREQUAL
136896: AND
136897: PUSH
136898: LD_VAR 0 4
136902: PPUSH
136903: CALL_OW 256
136907: PUSH
136908: LD_INT 650
136910: LESSEQUAL
136911: OR
136912: PUSH
136913: LD_VAR 0 4
136917: PPUSH
136918: LD_EXP 125
136922: PUSH
136923: LD_VAR 0 1
136927: ARRAY
136928: PPUSH
136929: CALL_OW 308
136933: NOT
136934: AND
136935: IFFALSE 136957
// ComMoveToArea ( i , mc_parking [ base ] ) ;
136937: LD_VAR 0 4
136941: PPUSH
136942: LD_EXP 125
136946: PUSH
136947: LD_VAR 0 1
136951: ARRAY
136952: PPUSH
136953: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
136957: LD_VAR 0 4
136961: PPUSH
136962: CALL_OW 256
136966: PUSH
136967: LD_INT 1000
136969: LESS
136970: PUSH
136971: LD_VAR 0 4
136975: PPUSH
136976: CALL_OW 263
136980: PUSH
136981: LD_INT 1
136983: EQUAL
136984: AND
136985: PUSH
136986: LD_VAR 0 4
136990: PPUSH
136991: CALL_OW 311
136995: AND
136996: PUSH
136997: LD_VAR 0 4
137001: PPUSH
137002: LD_EXP 125
137006: PUSH
137007: LD_VAR 0 1
137011: ARRAY
137012: PPUSH
137013: CALL_OW 308
137017: AND
137018: IFFALSE 137072
// begin mech := IsDrivenBy ( i ) ;
137020: LD_ADDR_VAR 0 9
137024: PUSH
137025: LD_VAR 0 4
137029: PPUSH
137030: CALL_OW 311
137034: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
137035: LD_VAR 0 9
137039: PPUSH
137040: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
137044: LD_VAR 0 9
137048: PPUSH
137049: LD_VAR 0 4
137053: PPUSH
137054: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
137058: LD_VAR 0 9
137062: PPUSH
137063: LD_VAR 0 4
137067: PPUSH
137068: CALL_OW 180
// end ; end ; unit_human :
137072: GO 137419
137074: LD_INT 1
137076: DOUBLE
137077: EQUAL
137078: IFTRUE 137082
137080: GO 137418
137082: POP
// begin b := IsInUnit ( i ) ;
137083: LD_ADDR_VAR 0 18
137087: PUSH
137088: LD_VAR 0 4
137092: PPUSH
137093: CALL_OW 310
137097: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
137098: LD_ADDR_VAR 0 19
137102: PUSH
137103: LD_VAR 0 18
137107: NOT
137108: PUSH
137109: LD_VAR 0 18
137113: PPUSH
137114: CALL_OW 266
137118: PUSH
137119: LD_INT 32
137121: PUSH
137122: LD_INT 31
137124: PUSH
137125: EMPTY
137126: LIST
137127: LIST
137128: IN
137129: OR
137130: ST_TO_ADDR
// if GetBType ( b ) = b_barracks and GetClass ( i ) in [ 1 , 2 , 3 , 4 ] then
137131: LD_VAR 0 18
137135: PPUSH
137136: CALL_OW 266
137140: PUSH
137141: LD_INT 5
137143: EQUAL
137144: PUSH
137145: LD_VAR 0 4
137149: PPUSH
137150: CALL_OW 257
137154: PUSH
137155: LD_INT 1
137157: PUSH
137158: LD_INT 2
137160: PUSH
137161: LD_INT 3
137163: PUSH
137164: LD_INT 4
137166: PUSH
137167: EMPTY
137168: LIST
137169: LIST
137170: LIST
137171: LIST
137172: IN
137173: AND
137174: IFFALSE 137211
// begin class := AllowSpecClass ( i ) ;
137176: LD_ADDR_VAR 0 20
137180: PUSH
137181: LD_VAR 0 4
137185: PPUSH
137186: CALL 70844 0 1
137190: ST_TO_ADDR
// if class then
137191: LD_VAR 0 20
137195: IFFALSE 137211
// ComChangeProfession ( i , class ) ;
137197: LD_VAR 0 4
137201: PPUSH
137202: LD_VAR 0 20
137206: PPUSH
137207: CALL_OW 123
// end ; if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
137211: LD_VAR 0 16
137215: PUSH
137216: LD_VAR 0 2
137220: PPUSH
137221: LD_INT 21
137223: PUSH
137224: LD_INT 2
137226: PUSH
137227: EMPTY
137228: LIST
137229: LIST
137230: PPUSH
137231: CALL_OW 72
137235: PUSH
137236: LD_INT 1
137238: LESSEQUAL
137239: OR
137240: PUSH
137241: LD_VAR 0 19
137245: AND
137246: PUSH
137247: LD_VAR 0 4
137251: PUSH
137252: LD_VAR 0 17
137256: IN
137257: NOT
137258: AND
137259: IFFALSE 137352
// begin if b then
137261: LD_VAR 0 18
137265: IFFALSE 137314
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
137267: LD_VAR 0 18
137271: PPUSH
137272: LD_VAR 0 21
137276: PPUSH
137277: LD_VAR 0 18
137281: PPUSH
137282: CALL_OW 74
137286: PPUSH
137287: CALL_OW 296
137291: PUSH
137292: LD_INT 10
137294: LESS
137295: PUSH
137296: LD_VAR 0 18
137300: PPUSH
137301: CALL_OW 461
137305: PUSH
137306: LD_INT 7
137308: NONEQUAL
137309: AND
137310: IFFALSE 137314
// continue ;
137312: GO 136549
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
137314: LD_ADDR_VAR 0 17
137318: PUSH
137319: LD_VAR 0 17
137323: PPUSH
137324: LD_VAR 0 17
137328: PUSH
137329: LD_INT 1
137331: PLUS
137332: PPUSH
137333: LD_VAR 0 4
137337: PPUSH
137338: CALL_OW 1
137342: ST_TO_ADDR
// ComExitBuilding ( i ) ;
137343: LD_VAR 0 4
137347: PPUSH
137348: CALL_OW 122
// end ; if sold_defenders then
137352: LD_VAR 0 17
137356: IFFALSE 137416
// if i in sold_defenders then
137358: LD_VAR 0 4
137362: PUSH
137363: LD_VAR 0 17
137367: IN
137368: IFFALSE 137416
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
137370: LD_VAR 0 4
137374: PPUSH
137375: CALL_OW 314
137379: NOT
137380: PUSH
137381: LD_VAR 0 4
137385: PPUSH
137386: LD_VAR 0 13
137390: PPUSH
137391: CALL_OW 296
137395: PUSH
137396: LD_INT 30
137398: LESS
137399: AND
137400: IFFALSE 137416
// ComAttackUnit ( i , e ) ;
137402: LD_VAR 0 4
137406: PPUSH
137407: LD_VAR 0 13
137411: PPUSH
137412: CALL_OW 115
// end ; end ; end ;
137416: GO 137419
137418: POP
// if IsDead ( i ) then
137419: LD_VAR 0 4
137423: PPUSH
137424: CALL_OW 301
137428: IFFALSE 137446
// defenders := defenders diff i ;
137430: LD_ADDR_VAR 0 2
137434: PUSH
137435: LD_VAR 0 2
137439: PUSH
137440: LD_VAR 0 4
137444: DIFF
137445: ST_TO_ADDR
// end ;
137446: GO 136549
137448: POP
137449: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
137450: LD_VAR 0 21
137454: NOT
137455: PUSH
137456: LD_VAR 0 2
137460: NOT
137461: OR
137462: PUSH
137463: LD_EXP 101
137467: PUSH
137468: LD_VAR 0 1
137472: ARRAY
137473: NOT
137474: OR
137475: IFFALSE 136453
// MC_Reset ( base , 18 ) ;
137477: LD_VAR 0 1
137481: PPUSH
137482: LD_INT 18
137484: PPUSH
137485: CALL 42519 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
137489: LD_ADDR_VAR 0 2
137493: PUSH
137494: LD_VAR 0 2
137498: PUSH
137499: LD_VAR 0 2
137503: PPUSH
137504: LD_INT 2
137506: PUSH
137507: LD_INT 25
137509: PUSH
137510: LD_INT 1
137512: PUSH
137513: EMPTY
137514: LIST
137515: LIST
137516: PUSH
137517: LD_INT 25
137519: PUSH
137520: LD_INT 5
137522: PUSH
137523: EMPTY
137524: LIST
137525: LIST
137526: PUSH
137527: LD_INT 25
137529: PUSH
137530: LD_INT 8
137532: PUSH
137533: EMPTY
137534: LIST
137535: LIST
137536: PUSH
137537: LD_INT 25
137539: PUSH
137540: LD_INT 9
137542: PUSH
137543: EMPTY
137544: LIST
137545: LIST
137546: PUSH
137547: EMPTY
137548: LIST
137549: LIST
137550: LIST
137551: LIST
137552: LIST
137553: PPUSH
137554: CALL_OW 72
137558: DIFF
137559: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
137560: LD_VAR 0 21
137564: NOT
137565: PUSH
137566: LD_VAR 0 2
137570: PPUSH
137571: LD_INT 21
137573: PUSH
137574: LD_INT 2
137576: PUSH
137577: EMPTY
137578: LIST
137579: LIST
137580: PPUSH
137581: CALL_OW 72
137585: AND
137586: IFFALSE 137924
// begin tmp := FilterByTag ( defenders , 19 ) ;
137588: LD_ADDR_VAR 0 11
137592: PUSH
137593: LD_VAR 0 2
137597: PPUSH
137598: LD_INT 19
137600: PPUSH
137601: CALL 103961 0 2
137605: ST_TO_ADDR
// if tmp then
137606: LD_VAR 0 11
137610: IFFALSE 137680
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
137612: LD_ADDR_VAR 0 11
137616: PUSH
137617: LD_VAR 0 11
137621: PPUSH
137622: LD_INT 25
137624: PUSH
137625: LD_INT 3
137627: PUSH
137628: EMPTY
137629: LIST
137630: LIST
137631: PPUSH
137632: CALL_OW 72
137636: ST_TO_ADDR
// if tmp then
137637: LD_VAR 0 11
137641: IFFALSE 137680
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
137643: LD_ADDR_EXP 113
137647: PUSH
137648: LD_EXP 113
137652: PPUSH
137653: LD_VAR 0 1
137657: PPUSH
137658: LD_EXP 113
137662: PUSH
137663: LD_VAR 0 1
137667: ARRAY
137668: PUSH
137669: LD_VAR 0 11
137673: UNION
137674: PPUSH
137675: CALL_OW 1
137679: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
137680: LD_VAR 0 1
137684: PPUSH
137685: LD_INT 19
137687: PPUSH
137688: CALL 42519 0 2
// repeat wait ( 0 0$1 ) ;
137692: LD_INT 35
137694: PPUSH
137695: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
137699: LD_EXP 101
137703: PUSH
137704: LD_VAR 0 1
137708: ARRAY
137709: NOT
137710: PUSH
137711: LD_EXP 101
137715: PUSH
137716: LD_VAR 0 1
137720: ARRAY
137721: PUSH
137722: EMPTY
137723: EQUAL
137724: OR
137725: IFFALSE 137762
// begin for i in defenders do
137727: LD_ADDR_VAR 0 4
137731: PUSH
137732: LD_VAR 0 2
137736: PUSH
137737: FOR_IN
137738: IFFALSE 137751
// ComStop ( i ) ;
137740: LD_VAR 0 4
137744: PPUSH
137745: CALL_OW 141
137749: GO 137737
137751: POP
137752: POP
// defenders := [ ] ;
137753: LD_ADDR_VAR 0 2
137757: PUSH
137758: EMPTY
137759: ST_TO_ADDR
// exit ;
137760: GO 137988
// end ; for i in defenders do
137762: LD_ADDR_VAR 0 4
137766: PUSH
137767: LD_VAR 0 2
137771: PUSH
137772: FOR_IN
137773: IFFALSE 137862
// begin if not IsInArea ( i , mc_parking [ base ] ) then
137775: LD_VAR 0 4
137779: PPUSH
137780: LD_EXP 125
137784: PUSH
137785: LD_VAR 0 1
137789: ARRAY
137790: PPUSH
137791: CALL_OW 308
137795: NOT
137796: IFFALSE 137820
// ComMoveToArea ( i , mc_parking [ base ] ) else
137798: LD_VAR 0 4
137802: PPUSH
137803: LD_EXP 125
137807: PUSH
137808: LD_VAR 0 1
137812: ARRAY
137813: PPUSH
137814: CALL_OW 113
137818: GO 137860
// if GetControl ( i ) = control_manual then
137820: LD_VAR 0 4
137824: PPUSH
137825: CALL_OW 263
137829: PUSH
137830: LD_INT 1
137832: EQUAL
137833: IFFALSE 137860
// if IsDrivenBy ( i ) then
137835: LD_VAR 0 4
137839: PPUSH
137840: CALL_OW 311
137844: IFFALSE 137860
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
137846: LD_VAR 0 4
137850: PPUSH
137851: CALL_OW 311
137855: PPUSH
137856: CALL_OW 121
// end ;
137860: GO 137772
137862: POP
137863: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
137864: LD_VAR 0 2
137868: PPUSH
137869: LD_INT 95
137871: PUSH
137872: LD_EXP 125
137876: PUSH
137877: LD_VAR 0 1
137881: ARRAY
137882: PUSH
137883: EMPTY
137884: LIST
137885: LIST
137886: PPUSH
137887: CALL_OW 72
137891: PUSH
137892: LD_VAR 0 2
137896: EQUAL
137897: PUSH
137898: LD_EXP 124
137902: PUSH
137903: LD_VAR 0 1
137907: ARRAY
137908: OR
137909: PUSH
137910: LD_EXP 101
137914: PUSH
137915: LD_VAR 0 1
137919: ARRAY
137920: NOT
137921: OR
137922: IFFALSE 137692
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
137924: LD_ADDR_EXP 123
137928: PUSH
137929: LD_EXP 123
137933: PPUSH
137934: LD_VAR 0 1
137938: PPUSH
137939: LD_VAR 0 2
137943: PPUSH
137944: LD_INT 21
137946: PUSH
137947: LD_INT 2
137949: PUSH
137950: EMPTY
137951: LIST
137952: LIST
137953: PPUSH
137954: CALL_OW 72
137958: PPUSH
137959: CALL_OW 1
137963: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
137964: LD_VAR 0 1
137968: PPUSH
137969: LD_INT 19
137971: PPUSH
137972: CALL 42519 0 2
// MC_Reset ( base , 20 ) ;
137976: LD_VAR 0 1
137980: PPUSH
137981: LD_INT 20
137983: PPUSH
137984: CALL 42519 0 2
// end ; end_of_file
137988: LD_VAR 0 3
137992: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
137993: LD_VAR 0 1
137997: PUSH
137998: LD_INT 200
138000: DOUBLE
138001: GREATEREQUAL
138002: IFFALSE 138010
138004: LD_INT 299
138006: DOUBLE
138007: LESSEQUAL
138008: IFTRUE 138012
138010: GO 138044
138012: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
138013: LD_VAR 0 1
138017: PPUSH
138018: LD_VAR 0 2
138022: PPUSH
138023: LD_VAR 0 3
138027: PPUSH
138028: LD_VAR 0 4
138032: PPUSH
138033: LD_VAR 0 5
138037: PPUSH
138038: CALL 126779 0 5
138042: GO 138121
138044: LD_INT 300
138046: DOUBLE
138047: GREATEREQUAL
138048: IFFALSE 138056
138050: LD_INT 399
138052: DOUBLE
138053: LESSEQUAL
138054: IFTRUE 138058
138056: GO 138120
138058: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
138059: LD_VAR 0 1
138063: PPUSH
138064: LD_VAR 0 2
138068: PPUSH
138069: LD_VAR 0 3
138073: PPUSH
138074: LD_VAR 0 4
138078: PPUSH
138079: LD_VAR 0 5
138083: PPUSH
138084: LD_VAR 0 6
138088: PPUSH
138089: LD_VAR 0 7
138093: PPUSH
138094: LD_VAR 0 8
138098: PPUSH
138099: LD_VAR 0 9
138103: PPUSH
138104: LD_VAR 0 10
138108: PPUSH
138109: LD_VAR 0 11
138113: PPUSH
138114: CALL 123104 0 11
138118: GO 138121
138120: POP
// end ;
138121: PPOPN 11
138123: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
138124: LD_VAR 0 1
138128: PPUSH
138129: LD_VAR 0 2
138133: PPUSH
138134: LD_VAR 0 3
138138: PPUSH
138139: LD_VAR 0 4
138143: PPUSH
138144: LD_VAR 0 5
138148: PPUSH
138149: CALL 126515 0 5
// end ; end_of_file
138153: PPOPN 5
138155: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
138156: LD_VAR 0 1
138160: PPUSH
138161: LD_VAR 0 2
138165: PPUSH
138166: LD_VAR 0 3
138170: PPUSH
138171: LD_VAR 0 4
138175: PPUSH
138176: LD_VAR 0 5
138180: PPUSH
138181: LD_VAR 0 6
138185: PPUSH
138186: CALL 110756 0 6
// end ;
138190: PPOPN 6
138192: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
138193: LD_INT 0
138195: PPUSH
// begin if not units then
138196: LD_VAR 0 1
138200: NOT
138201: IFFALSE 138205
// exit ;
138203: GO 138205
// end ;
138205: PPOPN 7
138207: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
138208: CALL 110660 0 0
// end ;
138212: PPOPN 1
138214: END
