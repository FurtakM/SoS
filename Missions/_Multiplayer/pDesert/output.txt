// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2300 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2723 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 4
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 5
1283: PUSH
1284: LD_INT 6
1286: PUSH
1287: LD_INT 7
1289: PUSH
1290: LD_INT 8
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1299: LD_ADDR_VAR 0 9
1303: PUSH
1304: LD_INT 9
1306: PPUSH
1307: LD_INT 2
1309: PPUSH
1310: CALL 54195 0 2
1314: PUSH
1315: LD_INT 10
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL 54195 0 2
1325: PUSH
1326: LD_INT 11
1328: PPUSH
1329: LD_INT 3
1331: PPUSH
1332: CALL 54195 0 2
1336: PUSH
1337: LD_INT 12
1339: PPUSH
1340: LD_INT 5
1342: PPUSH
1343: CALL 54195 0 2
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: DOUBLE
1360: LD_INT 1
1362: DEC
1363: ST_TO_ADDR
1364: LD_VAR 0 9
1368: PPUSH
1369: CALL 13500 0 1
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1479
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1377: LD_ADDR_EXP 21
1381: PUSH
1382: LD_EXP 21
1386: PPUSH
1387: LD_VAR 0 3
1391: PPUSH
1392: LD_VAR 0 9
1396: PUSH
1397: LD_VAR 0 3
1401: ARRAY
1402: PUSH
1403: LD_INT 1
1405: ARRAY
1406: PPUSH
1407: LD_VAR 0 9
1411: PUSH
1412: LD_VAR 0 3
1416: ARRAY
1417: PUSH
1418: LD_INT 3
1420: ARRAY
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: CALL_OW 272
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: LD_VAR 0 3
1439: ARRAY
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 9
1449: PUSH
1450: LD_VAR 0 3
1454: ARRAY
1455: PUSH
1456: LD_INT 3
1458: ARRAY
1459: PPUSH
1460: LD_INT 10
1462: PPUSH
1463: CALL_OW 273
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 1
1476: ST_TO_ADDR
1477: GO 1374
1479: POP
1480: POP
// if baseLevel >= 1 then
1481: LD_VAR 0 8
1485: PUSH
1486: LD_INT 1
1488: GREATEREQUAL
1489: IFFALSE 1501
// mpDepots := startPos ;
1491: LD_ADDR_EXP 14
1495: PUSH
1496: LD_VAR 0 9
1500: ST_TO_ADDR
// if hasOil then
1501: LD_VAR 0 6
1505: IFFALSE 1588
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1507: LD_ADDR_VAR 0 4
1511: PUSH
1512: LD_EXP 6
1516: PUSH
1517: LD_INT 6
1519: ARRAY
1520: PUSH
1521: LD_INT 2
1523: EQUAL
1524: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1525: LD_ADDR_EXP 12
1529: PUSH
1530: LD_INT 13
1532: PPUSH
1533: LD_VAR 0 4
1537: PPUSH
1538: CALL 54028 0 2
1542: PUSH
1543: LD_INT 15
1545: PPUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: CALL 54028 0 2
1555: PUSH
1556: LD_INT 17
1558: PPUSH
1559: LD_VAR 0 4
1563: PPUSH
1564: CALL 54028 0 2
1568: PUSH
1569: LD_INT 19
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL 54028 0 2
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: ST_TO_ADDR
// end ; if hasSib then
1588: LD_VAR 0 7
1592: IFFALSE 1675
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1594: LD_ADDR_VAR 0 4
1598: PUSH
1599: LD_EXP 6
1603: PUSH
1604: LD_INT 7
1606: ARRAY
1607: PUSH
1608: LD_INT 2
1610: EQUAL
1611: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1612: LD_ADDR_EXP 13
1616: PUSH
1617: LD_INT 14
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 54028 0 2
1629: PUSH
1630: LD_INT 16
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 54028 0 2
1642: PUSH
1643: LD_INT 18
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 54028 0 2
1655: PUSH
1656: LD_INT 20
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 54028 0 2
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: ST_TO_ADDR
// end ; end ;
1675: LD_VAR 0 2
1679: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1680: GO 1682
1682: DISABLE
1683: LD_INT 0
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
// begin if not mpShipments then
1693: LD_EXP 27
1697: NOT
1698: IFFALSE 1702
// exit ;
1700: GO 2137
// case mpShipments of 1 :
1702: LD_EXP 27
1706: PUSH
1707: LD_INT 1
1709: DOUBLE
1710: EQUAL
1711: IFTRUE 1715
1713: GO 1750
1715: POP
// begin time := 0 0$30 ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: LD_INT 1050
1723: ST_TO_ADDR
// normalTime := 0 0$30 ;
1724: LD_ADDR_VAR 0 6
1728: PUSH
1729: LD_INT 1050
1731: ST_TO_ADDR
// maxTime := 1 1$20 ;
1732: LD_ADDR_VAR 0 8
1736: PUSH
1737: LD_INT 2800
1739: ST_TO_ADDR
// delayTime := 0 0$5 ;
1740: LD_ADDR_VAR 0 7
1744: PUSH
1745: LD_INT 175
1747: ST_TO_ADDR
// end ; 2 :
1748: GO 1880
1750: LD_INT 2
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1793
1758: POP
// begin time := 0 0$25 ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_INT 875
1766: ST_TO_ADDR
// normalTime := 0 0$25 ;
1767: LD_ADDR_VAR 0 6
1771: PUSH
1772: LD_INT 875
1774: ST_TO_ADDR
// maxTime := 1 1$10 ;
1775: LD_ADDR_VAR 0 8
1779: PUSH
1780: LD_INT 2450
1782: ST_TO_ADDR
// delayTime := 0 0$4 ;
1783: LD_ADDR_VAR 0 7
1787: PUSH
1788: LD_INT 140
1790: ST_TO_ADDR
// end ; 3 :
1791: GO 1880
1793: LD_INT 3
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1836
1801: POP
// begin time := 0 0$20 ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: LD_INT 700
1809: ST_TO_ADDR
// normalTime := 0 0$20 ;
1810: LD_ADDR_VAR 0 6
1814: PUSH
1815: LD_INT 700
1817: ST_TO_ADDR
// maxTime := 1 1$00 ;
1818: LD_ADDR_VAR 0 8
1822: PUSH
1823: LD_INT 2100
1825: ST_TO_ADDR
// delayTime := 0 0$3 ;
1826: LD_ADDR_VAR 0 7
1830: PUSH
1831: LD_INT 105
1833: ST_TO_ADDR
// end ; 4 :
1834: GO 1880
1836: LD_INT 4
1838: DOUBLE
1839: EQUAL
1840: IFTRUE 1844
1842: GO 1879
1844: POP
// begin time := 0 0$15 ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: LD_INT 525
1852: ST_TO_ADDR
// normalTime := 0 0$15 ;
1853: LD_ADDR_VAR 0 6
1857: PUSH
1858: LD_INT 525
1860: ST_TO_ADDR
// maxTime := 0 0$55 ;
1861: LD_ADDR_VAR 0 8
1865: PUSH
1866: LD_INT 1925
1868: ST_TO_ADDR
// delayTime := 0 0$2 ;
1869: LD_ADDR_VAR 0 7
1873: PUSH
1874: LD_INT 70
1876: ST_TO_ADDR
// end ; end ;
1877: GO 1880
1879: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
1880: LD_ADDR_VAR 0 3
1884: PUSH
1885: LD_INT 1
1887: PUSH
1888: LD_INT 2
1890: PUSH
1891: LD_INT 3
1893: PUSH
1894: LD_INT 4
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// areas := [ CenterArea , NorthCratesArea , SouthCratesArea , WestCratesArea , EastCratesArea ] ;
1903: LD_ADDR_VAR 0 5
1907: PUSH
1908: LD_INT 21
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 23
1916: PUSH
1917: LD_INT 24
1919: PUSH
1920: LD_INT 25
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// for i := 1 to 8 do
1930: LD_ADDR_VAR 0 1
1934: PUSH
1935: DOUBLE
1936: LD_INT 1
1938: DEC
1939: ST_TO_ADDR
1940: LD_INT 8
1942: PUSH
1943: FOR_TO
1944: IFFALSE 1991
// begin if not mpSidePositions [ i ] then
1946: LD_EXP 7
1950: PUSH
1951: LD_VAR 0 1
1955: ARRAY
1956: NOT
1957: IFFALSE 1961
// continue ;
1959: GO 1943
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
1961: LD_ADDR_VAR 0 5
1965: PUSH
1966: LD_VAR 0 5
1970: PUSH
1971: LD_VAR 0 3
1975: PUSH
1976: LD_EXP 7
1980: PUSH
1981: LD_VAR 0 1
1985: ARRAY
1986: ARRAY
1987: ADD
1988: ST_TO_ADDR
// end ;
1989: GO 1943
1991: POP
1992: POP
// x := 1 ;
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// repeat wait ( time ) ;
2001: LD_VAR 0 4
2005: PPUSH
2006: CALL_OW 67
// x := Inc ( x ) ;
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_VAR 0 2
2019: PPUSH
2020: CALL 50849 0 1
2024: ST_TO_ADDR
// if x > 5 then
2025: LD_VAR 0 2
2029: PUSH
2030: LD_INT 5
2032: GREATER
2033: IFFALSE 2043
// x := 1 ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: LD_INT 1
2042: ST_TO_ADDR
// for i in areas do
2043: LD_ADDR_VAR 0 1
2047: PUSH
2048: LD_VAR 0 5
2052: PUSH
2053: FOR_IN
2054: IFFALSE 2093
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2056: LD_VAR 0 1
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 287
2068: PUSH
2069: LD_INT 20
2071: LESS
2072: IFFALSE 2091
// begin CreateCratesArea ( x , i , true ) ;
2074: LD_VAR 0 2
2078: PPUSH
2079: LD_VAR 0 1
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: CALL_OW 55
// end ; end ;
2091: GO 2053
2093: POP
2094: POP
// time := time + delayTime ;
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: LD_VAR 0 4
2104: PUSH
2105: LD_VAR 0 7
2109: PLUS
2110: ST_TO_ADDR
// if time > maxTime then
2111: LD_VAR 0 4
2115: PUSH
2116: LD_VAR 0 8
2120: GREATER
2121: IFFALSE 2133
// time := normalTime ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: LD_VAR 0 6
2132: ST_TO_ADDR
// until false ;
2133: LD_INT 0
2135: IFFALSE 2001
// end ; end_of_file
2137: PPOPN 8
2139: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL 54993 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2149: LD_VAR 0 1
2153: PPUSH
2154: CALL 7846 0 1
// end ;
2158: PPOPN 1
2160: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL 55010 0 1
// end ;
2170: PPOPN 1
2172: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2173: LD_VAR 0 1
2177: PPUSH
2178: CALL 8899 0 1
2182: PPOPN 1
2184: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_VAR 0 2
2194: PPUSH
2195: CALL 55051 0 2
2199: PPOPN 2
2201: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2202: LD_VAR 0 1
2206: PPUSH
2207: LD_VAR 0 2
2211: PPUSH
2212: CALL 8652 0 2
2216: PPOPN 2
2218: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2219: LD_VAR 0 1
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_VAR 0 3
2233: PPUSH
2234: CALL 8952 0 3
2238: PPOPN 3
2240: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2241: LD_VAR 0 1
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: LD_VAR 0 3
2255: PPUSH
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_VAR 0 5
2265: PPUSH
2266: CALL 9636 0 5
// end ;
2270: PPOPN 5
2272: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2273: LD_VAR 0 1
2277: PPUSH
2278: LD_VAR 0 2
2282: PPUSH
2283: LD_VAR 0 3
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: CALL 9739 0 4
2297: PPOPN 4
2299: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2300: LD_INT 0
2302: PPUSH
2303: PPUSH
// disable ( mpActive ) ;
2304: LD_INT 100
2306: DISABLE_MARKED
// disable ( mpWin ) ;
2307: LD_INT 101
2309: DISABLE_MARKED
// disable ( mpLose ) ;
2310: LD_INT 102
2312: DISABLE_MARKED
// mpGameType := 0 ;
2313: LD_ADDR_EXP 3
2317: PUSH
2318: LD_INT 0
2320: ST_TO_ADDR
// mpGameSettings := [ ] ;
2321: LD_ADDR_EXP 6
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2328: LD_ADDR_EXP 4
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2335: LD_ADDR_EXP 5
2339: PUSH
2340: EMPTY
2341: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2342: LD_ADDR_EXP 29
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: LD_INT 2
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2357: LD_ADDR_EXP 12
2361: PUSH
2362: EMPTY
2363: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2364: LD_ADDR_EXP 13
2368: PUSH
2369: EMPTY
2370: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2371: LD_ADDR_EXP 42
2375: PUSH
2376: EMPTY
2377: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2378: LD_ADDR_EXP 43
2382: PUSH
2383: EMPTY
2384: ST_TO_ADDR
// mpDepots := [ ] ;
2385: LD_ADDR_EXP 14
2389: PUSH
2390: EMPTY
2391: ST_TO_ADDR
// mpBuildings := [ ] ;
2392: LD_ADDR_EXP 17
2396: PUSH
2397: EMPTY
2398: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2399: LD_ADDR_EXP 18
2403: PUSH
2404: EMPTY
2405: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2406: LD_ADDR_EXP 19
2410: PUSH
2411: EMPTY
2412: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2413: LD_ADDR_EXP 20
2417: PUSH
2418: EMPTY
2419: ST_TO_ADDR
// mpStartingResources := [ ] ;
2420: LD_ADDR_EXP 15
2424: PUSH
2425: EMPTY
2426: ST_TO_ADDR
// mpStartPos := [ ] ;
2427: LD_ADDR_EXP 21
2431: PUSH
2432: EMPTY
2433: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2434: LD_ADDR_EXP 22
2438: PUSH
2439: LD_INT 1
2441: NEG
2442: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2443: LD_ADDR_EXP 23
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// mpApemans := [ ] ;
2450: LD_ADDR_EXP 30
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// mpApemansArea := [ ] ;
2457: LD_ADDR_EXP 31
2461: PUSH
2462: EMPTY
2463: ST_TO_ADDR
// mpRespawn := [ ] ;
2464: LD_ADDR_EXP 33
2468: PUSH
2469: EMPTY
2470: ST_TO_ADDR
// mpKingArea := 0 ;
2471: LD_ADDR_EXP 34
2475: PUSH
2476: LD_INT 0
2478: ST_TO_ADDR
// mpPoints := [ ] ;
2479: LD_ADDR_EXP 35
2483: PUSH
2484: EMPTY
2485: ST_TO_ADDR
// mpVehicles := 0 ;
2486: LD_ADDR_EXP 36
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// mpShipments := 0 ;
2494: LD_ADDR_EXP 27
2498: PUSH
2499: LD_INT 0
2501: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2502: LD_ADDR_EXP 40
2506: PUSH
2507: EMPTY
2508: PUSH
2509: EMPTY
2510: PUSH
2511: EMPTY
2512: PUSH
2513: EMPTY
2514: PUSH
2515: EMPTY
2516: PUSH
2517: EMPTY
2518: PUSH
2519: EMPTY
2520: PUSH
2521: EMPTY
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2533: LD_ADDR_EXP 32
2537: PUSH
2538: EMPTY
2539: PUSH
2540: EMPTY
2541: PUSH
2542: EMPTY
2543: PUSH
2544: EMPTY
2545: PUSH
2546: EMPTY
2547: PUSH
2548: EMPTY
2549: PUSH
2550: EMPTY
2551: PUSH
2552: EMPTY
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2564: LD_ADDR_EXP 41
2568: PUSH
2569: LD_INT 0
2571: PUSH
2572: LD_INT 0
2574: PUSH
2575: LD_INT 0
2577: PUSH
2578: LD_INT 0
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: LD_INT 0
2586: PUSH
2587: LD_INT 0
2589: PUSH
2590: LD_INT 0
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: ST_TO_ADDR
// mpEmissions := 0 ;
2603: LD_ADDR_EXP 37
2607: PUSH
2608: LD_INT 0
2610: ST_TO_ADDR
// mpTeleports := 0 ;
2611: LD_ADDR_EXP 44
2615: PUSH
2616: LD_INT 0
2618: ST_TO_ADDR
// mpArtifacts := 0 ;
2619: LD_ADDR_EXP 45
2623: PUSH
2624: LD_INT 0
2626: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2627: LD_ADDR_EXP 46
2631: PUSH
2632: LD_INT 0
2634: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2635: LD_ADDR_EXP 25
2639: PUSH
2640: LD_INT 3
2642: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2643: LD_ADDR_EXP 24
2647: PUSH
2648: LD_INT 15
2650: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2651: LD_ADDR_EXP 38
2655: PUSH
2656: LD_INT 0
2658: ST_TO_ADDR
// mpGameActive := false ;
2659: LD_ADDR_EXP 39
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// mpBlockRespThread := false ;
2667: LD_ADDR_EXP 47
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// for i := 1 to 32 do
2675: LD_ADDR_VAR 0 2
2679: PUSH
2680: DOUBLE
2681: LD_INT 1
2683: DEC
2684: ST_TO_ADDR
2685: LD_INT 32
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2716
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2691: LD_ADDR_EXP 6
2695: PUSH
2696: LD_EXP 6
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 1
2713: ST_TO_ADDR
2714: GO 2688
2716: POP
2717: POP
// end ;
2718: LD_VAR 0 1
2722: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2723: LD_INT 0
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
2732: PPUSH
2733: PPUSH
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
2739: LD_ADDR_VAR 0 14
2743: PUSH
2744: LD_INT 1
2746: PUSH
2747: LD_INT 2
2749: PUSH
2750: LD_INT 3
2752: PUSH
2753: LD_INT 5
2755: PUSH
2756: LD_INT 6
2758: PUSH
2759: LD_INT 7
2761: PUSH
2762: LD_INT 8
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// for i in gameTypes do
2774: LD_ADDR_VAR 0 2
2778: PUSH
2779: LD_VAR 0 14
2783: PUSH
2784: FOR_IN
2785: IFFALSE 2794
// disable ( i ) ;
2787: LD_VAR 0 2
2791: DISABLE_MARKED
2792: GO 2784
2794: POP
2795: POP
// if Multiplayer then
2796: LD_OWVAR 4
2800: IFFALSE 2984
// begin mpGameType := mp_game_type ;
2802: LD_ADDR_EXP 3
2806: PUSH
2807: LD_OWVAR 6
2811: ST_TO_ADDR
// your_side := mp_player_side ;
2812: LD_ADDR_OWVAR 2
2816: PUSH
2817: LD_OWVAR 7
2821: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2822: LD_ADDR_EXP 7
2826: PUSH
2827: LD_OWVAR 17
2831: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2832: LD_ADDR_EXP 8
2836: PUSH
2837: LD_OWVAR 15
2841: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2842: LD_ADDR_EXP 9
2846: PUSH
2847: LD_OWVAR 16
2851: ST_TO_ADDR
// mpTeams := mp_teams ;
2852: LD_ADDR_EXP 10
2856: PUSH
2857: LD_OWVAR 12
2861: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_EXP 4
2876: PPUSH
2877: CALL 13500 0 1
2881: PUSH
2882: FOR_TO
2883: IFFALSE 2959
// begin setting := mpGameSettingsKeys [ i ] ;
2885: LD_ADDR_VAR 0 12
2889: PUSH
2890: LD_EXP 4
2894: PUSH
2895: LD_VAR 0 2
2899: ARRAY
2900: ST_TO_ADDR
// if setting then
2901: LD_VAR 0 12
2905: IFFALSE 2957
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
2907: LD_ADDR_EXP 6
2911: PUSH
2912: LD_EXP 6
2916: PPUSH
2917: LD_VAR 0 2
2921: PPUSH
2922: LD_EXP 5
2926: PUSH
2927: LD_VAR 0 2
2931: ARRAY
2932: PUSH
2933: LD_VAR 0 2
2937: PUSH
2938: LD_INT 1
2940: MINUS
2941: PPUSH
2942: CALL_OW 426
2946: PUSH
2947: LD_INT 1
2949: PLUS
2950: ARRAY
2951: PPUSH
2952: CALL_OW 1
2956: ST_TO_ADDR
// end ;
2957: GO 2882
2959: POP
2960: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
2961: LD_ADDR_EXP 11
2965: PUSH
2966: LD_EXP 8
2970: PUSH
2971: LD_INT 0
2973: PUSH
2974: EMPTY
2975: LIST
2976: DIFF
2977: PUSH
2978: LD_INT 1
2980: GREATER
2981: ST_TO_ADDR
// end else
2982: GO 2984
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
2984: LD_EXP 3
2988: PPUSH
2989: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
2993: LD_EXP 18
2997: PPUSH
2998: CALL 13500 0 1
3002: IFFALSE 3033
// begin for i in mpMarkedAreas do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: LD_EXP 18
3013: PUSH
3014: FOR_IN
3015: IFFALSE 3031
// SetAreaMapShow ( i , 0 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 424
3029: GO 3014
3031: POP
3032: POP
// end ; for i := 1 to 8 do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_INT 8
3045: PUSH
3046: FOR_TO
3047: IFFALSE 4506
// begin if not mpSidePositions [ i ] then
3049: LD_EXP 7
3053: PUSH
3054: LD_VAR 0 2
3058: ARRAY
3059: NOT
3060: IFFALSE 3064
// continue ;
3062: GO 3046
// side := i ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3074: LD_ADDR_VAR 0 9
3078: PUSH
3079: LD_EXP 9
3083: PUSH
3084: LD_VAR 0 2
3088: ARRAY
3089: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3090: LD_ADDR_VAR 0 8
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_VAR 0 2
3104: ARRAY
3105: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3106: LD_EXP 12
3110: PPUSH
3111: CALL 13500 0 1
3115: IFFALSE 3192
// begin for j in mpOilDeposits [ pos ] do
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 12
3126: PUSH
3127: LD_VAR 0 8
3131: ARRAY
3132: PUSH
3133: FOR_IN
3134: IFFALSE 3190
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3136: LD_VAR 0 3
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: PPUSH
3145: LD_VAR 0 3
3149: PUSH
3150: LD_INT 2
3152: ARRAY
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3161: LD_VAR 0 3
3165: PUSH
3166: LD_INT 1
3168: ARRAY
3169: PPUSH
3170: LD_VAR 0 3
3174: PUSH
3175: LD_INT 2
3177: ARRAY
3178: PPUSH
3179: LD_VAR 0 7
3183: PPUSH
3184: CALL_OW 441
// end ;
3188: GO 3133
3190: POP
3191: POP
// end ; if Count ( mpSibDeposits ) then
3192: LD_EXP 13
3196: PPUSH
3197: CALL 13500 0 1
3201: IFFALSE 3278
// begin for j in mpSibDeposits [ pos ] do
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: LD_EXP 13
3212: PUSH
3213: LD_VAR 0 8
3217: ARRAY
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3276
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3222: LD_VAR 0 3
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: PPUSH
3231: LD_VAR 0 3
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3247: LD_VAR 0 3
3251: PUSH
3252: LD_INT 1
3254: ARRAY
3255: PPUSH
3256: LD_VAR 0 3
3260: PUSH
3261: LD_INT 2
3263: ARRAY
3264: PPUSH
3265: LD_VAR 0 7
3269: PPUSH
3270: CALL_OW 441
// end ;
3274: GO 3219
3276: POP
3277: POP
// end ; InitBc ;
3278: CALL_OW 21
// InitUc ;
3282: CALL_OW 18
// uc_side := side ;
3286: LD_ADDR_OWVAR 20
3290: PUSH
3291: LD_VAR 0 7
3295: ST_TO_ADDR
// uc_nation := nation ;
3296: LD_ADDR_OWVAR 21
3300: PUSH
3301: LD_VAR 0 9
3305: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3306: LD_EXP 22
3310: PUSH
3311: LD_INT 1
3313: NEG
3314: GREATER
3315: IFFALSE 3474
// begin x := mpStartPos [ pos ] [ 1 ] ;
3317: LD_ADDR_VAR 0 5
3321: PUSH
3322: LD_EXP 21
3326: PUSH
3327: LD_VAR 0 8
3331: ARRAY
3332: PUSH
3333: LD_INT 1
3335: ARRAY
3336: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3337: LD_ADDR_VAR 0 6
3341: PUSH
3342: LD_EXP 21
3346: PUSH
3347: LD_VAR 0 8
3351: ARRAY
3352: PUSH
3353: LD_INT 2
3355: ARRAY
3356: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3357: LD_VAR 0 5
3361: PPUSH
3362: LD_VAR 0 6
3366: PPUSH
3367: LD_INT 12
3369: PPUSH
3370: LD_INT 2
3372: PPUSH
3373: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3377: LD_ADDR_EXP 23
3381: PUSH
3382: LD_EXP 23
3386: PPUSH
3387: LD_VAR 0 7
3391: PPUSH
3392: LD_VAR 0 7
3396: PPUSH
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 100
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 2
3419: PUSH
3420: LD_INT 70
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 3
3429: PUSH
3430: LD_INT 40
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 10
3439: PUSH
3440: LD_INT 25
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 20
3449: PUSH
3450: LD_INT 100
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PPUSH
3464: CALL_OW 418
3468: PPUSH
3469: CALL_OW 1
3473: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3474: LD_EXP 14
3478: PPUSH
3479: CALL 13500 0 1
3483: IFFALSE 3682
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
3485: LD_EXP 3
3489: PUSH
3490: LD_INT 2
3492: PUSH
3493: LD_INT 8
3495: PUSH
3496: LD_INT 6
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: IN
3508: IFFALSE 3528
// begin bc_level := 10 ;
3510: LD_ADDR_OWVAR 43
3514: PUSH
3515: LD_INT 10
3517: ST_TO_ADDR
// bc_type := b_warehouse ;
3518: LD_ADDR_OWVAR 42
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// end else
3526: GO 3544
// begin bc_level := 0 ;
3528: LD_ADDR_OWVAR 43
3532: PUSH
3533: LD_INT 0
3535: ST_TO_ADDR
// bc_type := b_depot ;
3536: LD_ADDR_OWVAR 42
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3544: LD_ADDR_VAR 0 4
3548: PUSH
3549: LD_EXP 14
3553: PUSH
3554: LD_VAR 0 8
3558: ARRAY
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: LD_EXP 14
3568: PUSH
3569: LD_VAR 0 8
3573: ARRAY
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_EXP 14
3583: PUSH
3584: LD_VAR 0 8
3588: ARRAY
3589: PUSH
3590: LD_INT 3
3592: ARRAY
3593: PPUSH
3594: CALL_OW 47
3598: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3599: LD_VAR 0 4
3603: PPUSH
3604: LD_STRING @
3606: PUSH
3607: LD_VAR 0 7
3611: STR
3612: PPUSH
3613: CALL_OW 500
// if Count ( mpStartingResources ) then
3617: LD_EXP 15
3621: PPUSH
3622: CALL 13500 0 1
3626: IFFALSE 3680
// begin for j := 1 to mpStartingResources do
3628: LD_ADDR_VAR 0 3
3632: PUSH
3633: DOUBLE
3634: LD_INT 1
3636: DEC
3637: ST_TO_ADDR
3638: LD_EXP 15
3642: PUSH
3643: FOR_TO
3644: IFFALSE 3678
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3646: LD_VAR 0 4
3650: PPUSH
3651: CALL_OW 274
3655: PPUSH
3656: LD_VAR 0 3
3660: PPUSH
3661: LD_EXP 15
3665: PUSH
3666: LD_VAR 0 3
3670: ARRAY
3671: PPUSH
3672: CALL_OW 277
3676: GO 3643
3678: POP
3679: POP
// end ; end else
3680: GO 3889
// if Count ( mpStartingResources ) then
3682: LD_EXP 15
3686: PPUSH
3687: CALL 13500 0 1
3691: IFFALSE 3889
// begin x := mpStartPos [ pos ] [ 1 ] ;
3693: LD_ADDR_VAR 0 5
3697: PUSH
3698: LD_EXP 21
3702: PUSH
3703: LD_VAR 0 8
3707: ARRAY
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3713: LD_ADDR_VAR 0 6
3717: PUSH
3718: LD_EXP 21
3722: PUSH
3723: LD_VAR 0 8
3727: ARRAY
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: DOUBLE
3739: LD_INT 1
3741: DEC
3742: ST_TO_ADDR
3743: LD_EXP 15
3747: PUSH
3748: FOR_TO
3749: IFFALSE 3887
// begin resources := mpStartingResources [ j ] ;
3751: LD_ADDR_VAR 0 13
3755: PUSH
3756: LD_EXP 15
3760: PUSH
3761: LD_VAR 0 3
3765: ARRAY
3766: ST_TO_ADDR
// if resources = 0 then
3767: LD_VAR 0 13
3771: PUSH
3772: LD_INT 0
3774: EQUAL
3775: IFFALSE 3779
// continue ;
3777: GO 3748
// repeat if resources >= 50 then
3779: LD_VAR 0 13
3783: PUSH
3784: LD_INT 50
3786: GREATEREQUAL
3787: IFFALSE 3833
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3789: LD_VAR 0 3
3793: PPUSH
3794: LD_INT 5
3796: PPUSH
3797: LD_VAR 0 5
3801: PPUSH
3802: LD_VAR 0 6
3806: PPUSH
3807: LD_INT 6
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 60
// resources := resources - 50 ;
3817: LD_ADDR_VAR 0 13
3821: PUSH
3822: LD_VAR 0 13
3826: PUSH
3827: LD_INT 50
3829: MINUS
3830: ST_TO_ADDR
// end else
3831: GO 3875
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3833: LD_VAR 0 3
3837: PPUSH
3838: LD_VAR 0 13
3842: PUSH
3843: LD_INT 10
3845: DIV
3846: PPUSH
3847: LD_VAR 0 5
3851: PPUSH
3852: LD_VAR 0 6
3856: PPUSH
3857: LD_INT 6
3859: PPUSH
3860: LD_INT 0
3862: PPUSH
3863: CALL_OW 60
// resources := 0 ;
3867: LD_ADDR_VAR 0 13
3871: PUSH
3872: LD_INT 0
3874: ST_TO_ADDR
// end ; until resources <= 0 ;
3875: LD_VAR 0 13
3879: PUSH
3880: LD_INT 0
3882: LESSEQUAL
3883: IFFALSE 3779
// end ;
3885: GO 3748
3887: POP
3888: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
3889: LD_EXP 17
3893: PPUSH
3894: CALL 13500 0 1
3898: IFFALSE 3918
3900: PUSH
3901: LD_EXP 3
3905: PUSH
3906: LD_INT 2
3908: PUSH
3909: LD_INT 8
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: IN
3916: NOT
3917: AND
3918: IFFALSE 3996
// begin for j in mpBuildings [ pos ] do
3920: LD_ADDR_VAR 0 3
3924: PUSH
3925: LD_EXP 17
3929: PUSH
3930: LD_VAR 0 8
3934: ARRAY
3935: PUSH
3936: FOR_IN
3937: IFFALSE 3994
// begin bc_level := 0 ;
3939: LD_ADDR_OWVAR 43
3943: PUSH
3944: LD_INT 0
3946: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3947: LD_ADDR_OWVAR 42
3951: PUSH
3952: LD_VAR 0 3
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3961: LD_VAR 0 3
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: LD_VAR 0 3
3974: PUSH
3975: LD_INT 3
3977: ARRAY
3978: PPUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 4
3986: ARRAY
3987: PPUSH
3988: CALL_OW 47
// end ;
3992: GO 3936
3994: POP
3995: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
3996: LD_EXP 26
4000: IFFALSE 4020
4002: PUSH
4003: LD_INT 20
4005: PPUSH
4006: LD_VAR 0 7
4010: PPUSH
4011: CALL_OW 321
4015: PUSH
4016: LD_INT 1
4018: EQUAL
4019: AND
4020: IFFALSE 4037
// SetTech ( tech_SibDet , side , state_researched ) ;
4022: LD_INT 20
4024: PPUSH
4025: LD_VAR 0 7
4029: PPUSH
4030: LD_INT 2
4032: PPUSH
4033: CALL_OW 322
// if not mpArtifacts then
4037: LD_EXP 45
4041: NOT
4042: IFFALSE 4059
// SetTech ( tech_artifact , side , state_disabled ) ;
4044: LD_INT 24
4046: PPUSH
4047: LD_VAR 0 7
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 322
// if mpSibBomb = 1 then
4059: LD_EXP 28
4063: PUSH
4064: LD_INT 1
4066: EQUAL
4067: IFFALSE 4086
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4069: LD_INT 25
4071: PPUSH
4072: LD_VAR 0 7
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: CALL_OW 322
// end else
4084: GO 4101
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4086: LD_INT 25
4088: PPUSH
4089: LD_VAR 0 7
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 322
// end ; if mpVehicles then
4101: LD_EXP 36
4105: IFFALSE 4204
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4107: LD_ADDR_VAR 0 3
4111: PUSH
4112: LD_VAR 0 7
4116: PPUSH
4117: LD_VAR 0 9
4121: PPUSH
4122: LD_EXP 36
4126: PPUSH
4127: CALL 5463 0 3
4131: PUSH
4132: FOR_IN
4133: IFFALSE 4202
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4135: LD_VAR 0 3
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 12
4150: PPUSH
4151: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4155: LD_VAR 0 3
4159: PPUSH
4160: LD_EXP 21
4164: PUSH
4165: LD_VAR 0 8
4169: ARRAY
4170: PUSH
4171: LD_INT 1
4173: ARRAY
4174: PPUSH
4175: LD_EXP 21
4179: PUSH
4180: LD_VAR 0 8
4184: ARRAY
4185: PUSH
4186: LD_INT 2
4188: ARRAY
4189: PPUSH
4190: LD_INT 12
4192: PPUSH
4193: LD_INT 0
4195: PPUSH
4196: CALL_OW 50
// end ;
4200: GO 4132
4202: POP
4203: POP
// end ; uc_nation := nation ;
4204: LD_ADDR_OWVAR 21
4208: PUSH
4209: LD_VAR 0 9
4213: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4214: LD_EXP 3
4218: PUSH
4219: LD_INT 6
4221: PUSH
4222: LD_INT 7
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: IN
4229: IFFALSE 4254
4231: PUSH
4232: LD_EXP 7
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PUSH
4243: LD_INT 1
4245: PUSH
4246: LD_INT 2
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: IN
4253: AND
4254: IFFALSE 4302
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4256: LD_ADDR_VAR 0 11
4260: PUSH
4261: LD_VAR 0 7
4265: PPUSH
4266: LD_VAR 0 9
4270: PPUSH
4271: LD_EXP 24
4275: PUSH
4276: LD_EXP 24
4280: PUSH
4281: LD_INT 2
4283: DIV
4284: PLUS
4285: PPUSH
4286: LD_EXP 25
4290: PUSH
4291: LD_INT 1
4293: PLUS
4294: PPUSH
4295: CALL 4918 0 4
4299: ST_TO_ADDR
4300: GO 4332
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4302: LD_ADDR_VAR 0 11
4306: PUSH
4307: LD_VAR 0 7
4311: PPUSH
4312: LD_VAR 0 9
4316: PPUSH
4317: LD_EXP 24
4321: PPUSH
4322: LD_EXP 25
4326: PPUSH
4327: CALL 4918 0 4
4331: ST_TO_ADDR
// for j in team do
4332: LD_ADDR_VAR 0 3
4336: PUSH
4337: LD_VAR 0 11
4341: PUSH
4342: FOR_IN
4343: IFFALSE 4392
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_EXP 21
4354: PUSH
4355: LD_VAR 0 8
4359: ARRAY
4360: PUSH
4361: LD_INT 1
4363: ARRAY
4364: PPUSH
4365: LD_EXP 21
4369: PUSH
4370: LD_VAR 0 8
4374: ARRAY
4375: PUSH
4376: LD_INT 2
4378: ARRAY
4379: PPUSH
4380: LD_INT 12
4382: PPUSH
4383: LD_INT 0
4385: PPUSH
4386: CALL_OW 50
4390: GO 4342
4392: POP
4393: POP
// if mpApemans then
4394: LD_EXP 30
4398: IFFALSE 4504
// begin for j := 1 to mpApemans do
4400: LD_ADDR_VAR 0 3
4404: PUSH
4405: DOUBLE
4406: LD_INT 1
4408: DEC
4409: ST_TO_ADDR
4410: LD_EXP 30
4414: PUSH
4415: FOR_TO
4416: IFFALSE 4502
// begin PrepareApeman ( - 5 ) ;
4418: LD_INT 5
4420: NEG
4421: PPUSH
4422: CALL 45603 0 1
// ape := CreateHuman ;
4426: LD_ADDR_VAR 0 10
4430: PUSH
4431: CALL_OW 44
4435: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4436: LD_ADDR_EXP 32
4440: PUSH
4441: LD_EXP 32
4445: PPUSH
4446: LD_VAR 0 8
4450: PPUSH
4451: LD_EXP 32
4455: PUSH
4456: LD_VAR 0 8
4460: ARRAY
4461: PPUSH
4462: LD_VAR 0 10
4466: PPUSH
4467: CALL 49476 0 2
4471: PPUSH
4472: CALL_OW 1
4476: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4477: LD_VAR 0 10
4481: PPUSH
4482: LD_EXP 31
4486: PUSH
4487: LD_VAR 0 8
4491: ARRAY
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// end ;
4500: GO 4415
4502: POP
4503: POP
// end ; end ;
4504: GO 3046
4506: POP
4507: POP
// if not mpTeamGame then
4508: LD_EXP 11
4512: NOT
4513: IFFALSE 4611
// begin for i := 1 to 8 do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_INT 8
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4607
// for j := 1 to 8 do
4531: LD_ADDR_VAR 0 3
4535: PUSH
4536: DOUBLE
4537: LD_INT 1
4539: DEC
4540: ST_TO_ADDR
4541: LD_INT 8
4543: PUSH
4544: FOR_TO
4545: IFFALSE 4603
// if i <> j then
4547: LD_VAR 0 2
4551: PUSH
4552: LD_VAR 0 3
4556: NONEQUAL
4557: IFFALSE 4581
// SetAttitude ( i , j , att_neutral , true ) else
4559: LD_VAR 0 2
4563: PPUSH
4564: LD_VAR 0 3
4568: PPUSH
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: CALL_OW 80
4579: GO 4601
// SetAttitude ( i , j , att_friend , true ) ;
4581: LD_VAR 0 2
4585: PPUSH
4586: LD_VAR 0 3
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 80
4601: GO 4544
4603: POP
4604: POP
4605: GO 4528
4607: POP
4608: POP
// end else
4609: GO 4786
// begin if mpSharedVision then
4611: LD_EXP 16
4615: IFFALSE 4680
// begin for i in mpTeams do
4617: LD_ADDR_VAR 0 2
4621: PUSH
4622: LD_EXP 10
4626: PUSH
4627: FOR_IN
4628: IFFALSE 4678
// for j := 2 to i do
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: DOUBLE
4636: LD_INT 2
4638: DEC
4639: ST_TO_ADDR
4640: LD_VAR 0 2
4644: PUSH
4645: FOR_TO
4646: IFFALSE 4674
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4648: LD_VAR 0 2
4652: PUSH
4653: LD_VAR 0 3
4657: ARRAY
4658: PPUSH
4659: LD_VAR 0 2
4663: PUSH
4664: LD_INT 1
4666: ARRAY
4667: PPUSH
4668: CALL_OW 343
4672: GO 4645
4674: POP
4675: POP
4676: GO 4627
4678: POP
4679: POP
// end ; for i := 1 to 8 do
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_INT 8
4692: PUSH
4693: FOR_TO
4694: IFFALSE 4784
// for j := 1 to 8 do
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 8
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4780
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4712: LD_EXP 8
4716: PUSH
4717: LD_VAR 0 2
4721: ARRAY
4722: PUSH
4723: LD_EXP 8
4727: PUSH
4728: LD_VAR 0 3
4732: ARRAY
4733: EQUAL
4734: IFFALSE 4758
// SetAttitude ( i , j , att_friend , true ) else
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_VAR 0 3
4745: PPUSH
4746: LD_INT 1
4748: PPUSH
4749: LD_INT 1
4751: PPUSH
4752: CALL_OW 80
4756: GO 4778
// SetAttitude ( i , j , att_enemy , true ) ;
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_VAR 0 3
4767: PPUSH
4768: LD_INT 2
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 80
4778: GO 4709
4780: POP
4781: POP
4782: GO 4693
4784: POP
4785: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4786: LD_ADDR_OWVAR 71
4790: PUSH
4791: LD_EXP 9
4795: PUSH
4796: LD_OWVAR 2
4800: ARRAY
4801: ST_TO_ADDR
// if IAmSpec then
4802: CALL_OW 531
4806: IFFALSE 4847
// begin FogOff ( true ) ;
4808: LD_INT 1
4810: PPUSH
4811: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4815: LD_EXP 29
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: PUSH
4824: LD_INT 2
4826: DIV
4827: PPUSH
4828: LD_EXP 29
4832: PUSH
4833: LD_INT 2
4835: ARRAY
4836: PUSH
4837: LD_INT 2
4839: DIV
4840: PPUSH
4841: CALL_OW 86
// end else
4845: GO 4893
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4847: LD_EXP 21
4851: PUSH
4852: LD_EXP 7
4856: PUSH
4857: LD_OWVAR 2
4861: ARRAY
4862: ARRAY
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 21
4872: PUSH
4873: LD_EXP 7
4877: PUSH
4878: LD_OWVAR 2
4882: ARRAY
4883: ARRAY
4884: PUSH
4885: LD_INT 2
4887: ARRAY
4888: PPUSH
4889: CALL_OW 86
// end ; BeginBuildUp ;
4893: CALL 5996 0 0
// enable ( mpActive ) ;
4897: LD_INT 100
4899: ENABLE_MARKED
// enable ( mpGameType ) ;
4900: LD_EXP 3
4904: ENABLE_MARKED
// mpGameActive := true ;
4905: LD_ADDR_EXP 39
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// end ;
4913: LD_VAR 0 1
4917: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
4918: LD_INT 0
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
// result := [ ] ;
4925: LD_ADDR_VAR 0 5
4929: PUSH
4930: EMPTY
4931: ST_TO_ADDR
// class := class_soldier ;
4932: LD_ADDR_VAR 0 8
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// uc_side := side ;
4940: LD_ADDR_OWVAR 20
4944: PUSH
4945: LD_VAR 0 1
4949: ST_TO_ADDR
// uc_nation := nation ;
4950: LD_ADDR_OWVAR 21
4954: PUSH
4955: LD_VAR 0 2
4959: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
4960: LD_ADDR_OWVAR 26
4964: PUSH
4965: LD_OWVAR 19
4969: PUSH
4970: LD_VAR 0 1
4974: ARRAY
4975: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
4976: LD_INT 1
4978: PPUSH
4979: LD_INT 2
4981: PPUSH
4982: CALL_OW 12
4986: PPUSH
4987: LD_VAR 0 8
4991: PPUSH
4992: LD_VAR 0 4
4996: PUSH
4997: LD_INT 2
4999: PLUS
5000: PPUSH
5001: CALL_OW 380
// hc_importance := 105 ;
5005: LD_ADDR_OWVAR 32
5009: PUSH
5010: LD_INT 105
5012: ST_TO_ADDR
// if Multiplayer then
5013: LD_OWVAR 4
5017: IFFALSE 5057
// begin hc_gallery := MULTIAVATARS ;
5019: LD_ADDR_OWVAR 33
5023: PUSH
5024: LD_STRING MULTIAVATARS
5026: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5027: LD_ADDR_OWVAR 34
5031: PUSH
5032: LD_VAR 0 1
5036: PPUSH
5037: CALL_OW 525
5041: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5042: LD_ADDR_OWVAR 27
5046: PUSH
5047: LD_VAR 0 1
5051: PPUSH
5052: CALL_OW 526
5056: ST_TO_ADDR
// end ; commander := CreateHuman ;
5057: LD_ADDR_VAR 0 9
5061: PUSH
5062: CALL_OW 44
5066: ST_TO_ADDR
// result := Join ( result , commander ) ;
5067: LD_ADDR_VAR 0 5
5071: PUSH
5072: LD_VAR 0 5
5076: PPUSH
5077: LD_VAR 0 9
5081: PPUSH
5082: CALL 49476 0 2
5086: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5087: LD_ADDR_EXP 41
5091: PUSH
5092: LD_EXP 41
5096: PPUSH
5097: LD_VAR 0 1
5101: PPUSH
5102: LD_VAR 0 9
5106: PPUSH
5107: CALL_OW 1
5111: ST_TO_ADDR
// if mpTeamPreset then
5112: LD_LOC 1
5116: IFFALSE 5212
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5118: LD_LOC 1
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_VAR 0 5
5131: PUSH
5132: LD_VAR 0 5
5136: ARRAY
5137: PPUSH
5138: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5142: LD_VAR 0 5
5146: PUSH
5147: LD_VAR 0 5
5151: ARRAY
5152: PPUSH
5153: LD_INT 1
5155: PPUSH
5156: LD_LOC 1
5160: PUSH
5161: LD_INT 1
5163: ARRAY
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 260
5172: PPUSH
5173: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5177: LD_VAR 0 5
5181: PUSH
5182: LD_VAR 0 5
5186: ARRAY
5187: PPUSH
5188: LD_INT 2
5190: PPUSH
5191: LD_LOC 1
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: CALL_OW 260
5207: PPUSH
5208: CALL_OW 239
// end ; InitHc_All ( ) ;
5212: CALL_OW 584
// class := 2 ;
5216: LD_ADDR_VAR 0 8
5220: PUSH
5221: LD_INT 2
5223: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5224: LD_ADDR_VAR 0 6
5228: PUSH
5229: DOUBLE
5230: LD_INT 1
5232: DEC
5233: ST_TO_ADDR
5234: LD_VAR 0 3
5238: PUSH
5239: LD_INT 1
5241: MINUS
5242: PUSH
5243: FOR_TO
5244: IFFALSE 5439
// begin PrepareHuman ( false , class , skill ) ;
5246: LD_INT 0
5248: PPUSH
5249: LD_VAR 0 8
5253: PPUSH
5254: LD_VAR 0 4
5258: PPUSH
5259: CALL_OW 380
// un := CreateHuman ;
5263: LD_ADDR_VAR 0 7
5267: PUSH
5268: CALL_OW 44
5272: ST_TO_ADDR
// result := Join ( result , un ) ;
5273: LD_ADDR_VAR 0 5
5277: PUSH
5278: LD_VAR 0 5
5282: PPUSH
5283: LD_VAR 0 7
5287: PPUSH
5288: CALL 49476 0 2
5292: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5293: LD_LOC 1
5297: PPUSH
5298: CALL 13500 0 1
5302: PUSH
5303: LD_VAR 0 3
5307: GREATEREQUAL
5308: IFFALSE 5404
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5310: LD_LOC 1
5314: PUSH
5315: LD_VAR 0 6
5319: PUSH
5320: LD_INT 1
5322: PLUS
5323: ARRAY
5324: PPUSH
5325: LD_VAR 0 7
5329: PPUSH
5330: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5334: LD_VAR 0 7
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: LD_LOC 1
5346: PUSH
5347: LD_VAR 0 6
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: ARRAY
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: CALL_OW 260
5364: PPUSH
5365: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5369: LD_VAR 0 7
5373: PPUSH
5374: LD_INT 2
5376: PPUSH
5377: LD_LOC 1
5381: PUSH
5382: LD_VAR 0 6
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 260
5399: PPUSH
5400: CALL_OW 239
// end ; class := Inc ( class ) ;
5404: LD_ADDR_VAR 0 8
5408: PUSH
5409: LD_VAR 0 8
5413: PPUSH
5414: CALL 50849 0 1
5418: ST_TO_ADDR
// if class = 5 then
5419: LD_VAR 0 8
5423: PUSH
5424: LD_INT 5
5426: EQUAL
5427: IFFALSE 5437
// class := 1 ;
5429: LD_ADDR_VAR 0 8
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// end ;
5437: GO 5243
5439: POP
5440: POP
// if not mpTeamPreset then
5441: LD_LOC 1
5445: NOT
5446: IFFALSE 5458
// mpTeamPreset := result ;
5448: LD_ADDR_LOC 1
5452: PUSH
5453: LD_VAR 0 5
5457: ST_TO_ADDR
// end ;
5458: LD_VAR 0 5
5462: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
// result := [ ] ;
5467: LD_ADDR_VAR 0 4
5471: PUSH
5472: EMPTY
5473: ST_TO_ADDR
// if not vehicles then
5474: LD_VAR 0 3
5478: NOT
5479: IFFALSE 5483
// exit ;
5481: GO 5697
// for i := 1 to vehicles [ nation ] do
5483: LD_ADDR_VAR 0 5
5487: PUSH
5488: DOUBLE
5489: LD_INT 1
5491: DEC
5492: ST_TO_ADDR
5493: LD_VAR 0 3
5497: PUSH
5498: LD_VAR 0 2
5502: ARRAY
5503: PUSH
5504: FOR_TO
5505: IFFALSE 5695
// begin uc_side := side ;
5507: LD_ADDR_OWVAR 20
5511: PUSH
5512: LD_VAR 0 1
5516: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5517: LD_VAR 0 3
5521: PUSH
5522: LD_VAR 0 2
5526: ARRAY
5527: PUSH
5528: LD_VAR 0 5
5532: ARRAY
5533: PPUSH
5534: CALL 13500 0 1
5538: PUSH
5539: LD_INT 4
5541: GREATER
5542: IFFALSE 5572
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5544: LD_ADDR_OWVAR 21
5548: PUSH
5549: LD_VAR 0 3
5553: PUSH
5554: LD_VAR 0 2
5558: ARRAY
5559: PUSH
5560: LD_VAR 0 5
5564: ARRAY
5565: PUSH
5566: LD_INT 5
5568: ARRAY
5569: ST_TO_ADDR
5570: GO 5582
// uc_nation := nation ;
5572: LD_ADDR_OWVAR 21
5576: PUSH
5577: LD_VAR 0 2
5581: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5582: LD_VAR 0 3
5586: PUSH
5587: LD_VAR 0 2
5591: ARRAY
5592: PUSH
5593: LD_VAR 0 5
5597: ARRAY
5598: PUSH
5599: LD_INT 1
5601: ARRAY
5602: PPUSH
5603: LD_VAR 0 3
5607: PUSH
5608: LD_VAR 0 2
5612: ARRAY
5613: PUSH
5614: LD_VAR 0 5
5618: ARRAY
5619: PUSH
5620: LD_INT 2
5622: ARRAY
5623: PPUSH
5624: LD_VAR 0 3
5628: PUSH
5629: LD_VAR 0 2
5633: ARRAY
5634: PUSH
5635: LD_VAR 0 5
5639: ARRAY
5640: PUSH
5641: LD_INT 3
5643: ARRAY
5644: PPUSH
5645: LD_VAR 0 3
5649: PUSH
5650: LD_VAR 0 2
5654: ARRAY
5655: PUSH
5656: LD_VAR 0 5
5660: ARRAY
5661: PUSH
5662: LD_INT 4
5664: ARRAY
5665: PPUSH
5666: LD_INT 80
5668: PPUSH
5669: CALL 16296 0 5
// result := Join ( result , CreateVehicle ) ;
5673: LD_ADDR_VAR 0 4
5677: PUSH
5678: LD_VAR 0 4
5682: PPUSH
5683: CALL_OW 45
5687: PPUSH
5688: CALL 49476 0 2
5692: ST_TO_ADDR
// end ;
5693: GO 5504
5695: POP
5696: POP
// end ;
5697: LD_VAR 0 4
5701: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
// for i in mpBattleFlags do
5706: LD_ADDR_VAR 0 3
5710: PUSH
5711: LD_EXP 23
5715: PUSH
5716: FOR_IN
5717: IFFALSE 5794
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PUSH
5727: LD_VAR 0 1
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PUSH
5736: LD_INT 2
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: LD_REAL  7.00000000000000E-0001
5747: MUL
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PUSH
5753: LD_INT 3
5755: PUSH
5756: LD_VAR 0 1
5760: PUSH
5761: LD_REAL  4.00000000000000E-0001
5764: MUL
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 20
5772: PUSH
5773: LD_VAR 0 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PPUSH
5788: CALL_OW 423
5792: GO 5716
5794: POP
5795: POP
// end ;
5796: LD_VAR 0 2
5800: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5801: LD_INT 100
5803: IFFALSE 5898
5805: GO 5807
5807: DISABLE
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
// begin if mpBattleFlag <= 0 then
5812: LD_EXP 22
5816: PUSH
5817: LD_INT 0
5819: LESSEQUAL
5820: IFFALSE 5824
// exit ;
5822: GO 5898
// strength := 100 ;
5824: LD_ADDR_VAR 0 2
5828: PUSH
5829: LD_INT 100
5831: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5832: LD_EXP 22
5836: PPUSH
5837: CALL_OW 67
// strength := Dec ( strength ) ;
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_VAR 0 2
5850: PPUSH
5851: CALL 50871 0 1
5855: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5856: LD_VAR 0 2
5860: PPUSH
5861: CALL 5702 0 1
// until not strength ;
5865: LD_VAR 0 2
5869: NOT
5870: IFFALSE 5832
// for i in mpBattleFlags do
5872: LD_ADDR_VAR 0 1
5876: PUSH
5877: LD_EXP 23
5881: PUSH
5882: FOR_IN
5883: IFFALSE 5896
// KillBattleFlag ( i ) ;
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 419
5894: GO 5882
5896: POP
5897: POP
// end ;
5898: PPOPN 2
5900: END
// every 0 0$1 marked mpActive do var side , tmp ;
5901: GO 5903
5903: DISABLE
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
// begin if mpSibBomb <= 1 then
5908: LD_EXP 28
5912: PUSH
5913: LD_INT 1
5915: LESSEQUAL
5916: IFFALSE 5920
// exit ;
5918: GO 5993
// tmp := mpSibBomb ;
5920: LD_ADDR_VAR 0 2
5924: PUSH
5925: LD_EXP 28
5929: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5930: LD_INT 35
5932: PPUSH
5933: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5937: LD_ADDR_VAR 0 2
5941: PUSH
5942: LD_VAR 0 2
5946: PUSH
5947: LD_INT 35
5949: MINUS
5950: ST_TO_ADDR
// until not tmp ;
5951: LD_VAR 0 2
5955: NOT
5956: IFFALSE 5930
// for side := 1 to 8 do
5958: LD_ADDR_VAR 0 1
5962: PUSH
5963: DOUBLE
5964: LD_INT 1
5966: DEC
5967: ST_TO_ADDR
5968: LD_INT 8
5970: PUSH
5971: FOR_TO
5972: IFFALSE 5991
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5974: LD_INT 25
5976: PPUSH
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_INT 1
5984: PPUSH
5985: CALL_OW 322
5989: GO 5971
5991: POP
5992: POP
// end ;
5993: PPOPN 2
5995: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5996: LD_INT 0
5998: PPUSH
5999: PPUSH
6000: PPUSH
// mpBuildUpTimeDelay := 0 ;
6001: LD_ADDR_EXP 48
6005: PUSH
6006: LD_INT 0
6008: ST_TO_ADDR
// if not mpBuildUpTime then
6009: LD_EXP 20
6013: NOT
6014: IFFALSE 6018
// exit ;
6016: GO 6207
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6018: LD_ADDR_EXP 48
6022: PUSH
6023: LD_INT 8400
6025: PUSH
6026: LD_INT 2100
6028: PUSH
6029: LD_EXP 20
6033: MUL
6034: PLUS
6035: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6036: LD_ADDR_EXP 49
6040: PUSH
6041: LD_INT 1
6043: ST_TO_ADDR
// for i := 1 to 8 do
6044: LD_ADDR_VAR 0 2
6048: PUSH
6049: DOUBLE
6050: LD_INT 1
6052: DEC
6053: ST_TO_ADDR
6054: LD_INT 8
6056: PUSH
6057: FOR_TO
6058: IFFALSE 6205
// if mpSidePositions [ i ] then
6060: LD_EXP 7
6064: PUSH
6065: LD_VAR 0 2
6069: ARRAY
6070: IFFALSE 6203
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6072: LD_EXP 19
6076: PUSH
6077: LD_EXP 7
6081: PUSH
6082: LD_VAR 0 2
6086: ARRAY
6087: ARRAY
6088: PPUSH
6089: LD_INT 5
6091: PPUSH
6092: CALL_OW 424
// for j := 1 to 8 do
6096: LD_ADDR_VAR 0 3
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_INT 8
6108: PUSH
6109: FOR_TO
6110: IFFALSE 6201
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6112: LD_EXP 7
6116: PUSH
6117: LD_VAR 0 3
6121: ARRAY
6122: IFFALSE 6171
6124: PUSH
6125: LD_EXP 8
6129: PUSH
6130: LD_VAR 0 2
6134: ARRAY
6135: PUSH
6136: LD_EXP 8
6140: PUSH
6141: LD_VAR 0 3
6145: ARRAY
6146: NONEQUAL
6147: IFTRUE 6170
6149: PUSH
6150: LD_EXP 11
6154: NOT
6155: IFFALSE 6169
6157: PUSH
6158: LD_VAR 0 2
6162: PUSH
6163: LD_VAR 0 3
6167: NONEQUAL
6168: AND
6169: OR
6170: AND
6171: IFFALSE 6199
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_EXP 19
6182: PUSH
6183: LD_EXP 7
6187: PUSH
6188: LD_VAR 0 2
6192: ARRAY
6193: ARRAY
6194: PPUSH
6195: CALL_OW 333
6199: GO 6109
6201: POP
6202: POP
// end ;
6203: GO 6057
6205: POP
6206: POP
// end ;
6207: LD_VAR 0 1
6211: RET
// function EndBuildUp ; var i , j ; begin
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
6216: PPUSH
// mpBuildUpTimeActive := false ;
6217: LD_ADDR_EXP 49
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// for i := 1 to 8 do
6225: LD_ADDR_VAR 0 2
6229: PUSH
6230: DOUBLE
6231: LD_INT 1
6233: DEC
6234: ST_TO_ADDR
6235: LD_INT 8
6237: PUSH
6238: FOR_TO
6239: IFFALSE 6386
// if mpSidePositions [ i ] then
6241: LD_EXP 7
6245: PUSH
6246: LD_VAR 0 2
6250: ARRAY
6251: IFFALSE 6384
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6253: LD_EXP 19
6257: PUSH
6258: LD_EXP 7
6262: PUSH
6263: LD_VAR 0 2
6267: ARRAY
6268: ARRAY
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 424
// for j := 1 to 8 do
6277: LD_ADDR_VAR 0 3
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 8
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6382
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6293: LD_EXP 7
6297: PUSH
6298: LD_VAR 0 3
6302: ARRAY
6303: IFFALSE 6352
6305: PUSH
6306: LD_EXP 8
6310: PUSH
6311: LD_VAR 0 2
6315: ARRAY
6316: PUSH
6317: LD_EXP 8
6321: PUSH
6322: LD_VAR 0 3
6326: ARRAY
6327: NONEQUAL
6328: IFTRUE 6351
6330: PUSH
6331: LD_EXP 11
6335: NOT
6336: IFFALSE 6350
6338: PUSH
6339: LD_VAR 0 2
6343: PUSH
6344: LD_VAR 0 3
6348: NONEQUAL
6349: AND
6350: OR
6351: AND
6352: IFFALSE 6380
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6354: LD_VAR 0 3
6358: PPUSH
6359: LD_EXP 19
6363: PUSH
6364: LD_EXP 7
6368: PUSH
6369: LD_VAR 0 2
6373: ARRAY
6374: ARRAY
6375: PPUSH
6376: CALL_OW 334
6380: GO 6290
6382: POP
6383: POP
// end ;
6384: GO 6238
6386: POP
6387: POP
// end ;
6388: LD_VAR 0 1
6392: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6393: LD_EXP 49
6397: IFFALSE 6576
6399: GO 6401
6401: DISABLE
6402: LD_INT 0
6404: PPUSH
6405: PPUSH
// begin for i := 1 to 8 do
6406: LD_ADDR_VAR 0 1
6410: PUSH
6411: DOUBLE
6412: LD_INT 1
6414: DEC
6415: ST_TO_ADDR
6416: LD_INT 8
6418: PUSH
6419: FOR_TO
6420: IFFALSE 6573
// if mpSidePositions [ i ] then
6422: LD_EXP 7
6426: PUSH
6427: LD_VAR 0 1
6431: ARRAY
6432: IFFALSE 6571
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_EXP 19
6443: PUSH
6444: LD_EXP 7
6448: PUSH
6449: LD_VAR 0 1
6453: ARRAY
6454: ARRAY
6455: PPUSH
6456: LD_INT 2
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 1
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 21
6471: PUSH
6472: LD_INT 2
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 22
6486: PUSH
6487: LD_OWVAR 2
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PPUSH
6500: CALL_OW 70
6504: PUSH
6505: FOR_IN
6506: IFFALSE 6569
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6508: LD_EXP 8
6512: PUSH
6513: LD_VAR 0 1
6517: ARRAY
6518: PUSH
6519: LD_EXP 8
6523: PUSH
6524: LD_OWVAR 2
6528: ARRAY
6529: NONEQUAL
6530: IFTRUE 6553
6532: PUSH
6533: LD_EXP 11
6537: NOT
6538: IFFALSE 6552
6540: PUSH
6541: LD_VAR 0 1
6545: PUSH
6546: LD_OWVAR 2
6550: NONEQUAL
6551: AND
6552: OR
6553: IFFALSE 6567
// ComMoveToArea ( un , BuildUpEscape ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 26
6562: PPUSH
6563: CALL_OW 113
6567: GO 6505
6569: POP
6570: POP
6571: GO 6419
6573: POP
6574: POP
// enable ;
6575: ENABLE
// end ;
6576: PPOPN 2
6578: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6579: LD_EXP 20
6583: IFFALSE 6633
6585: GO 6587
6587: DISABLE
6588: LD_INT 0
6590: PPUSH
// begin tmp := mpBuildUpTime ;
6591: LD_ADDR_VAR 0 1
6595: PUSH
6596: LD_EXP 20
6600: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6601: LD_INT 35
6603: PPUSH
6604: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6608: LD_ADDR_VAR 0 1
6612: PUSH
6613: LD_VAR 0 1
6617: PUSH
6618: LD_INT 35
6620: MINUS
6621: ST_TO_ADDR
// until not tmp ;
6622: LD_VAR 0 1
6626: NOT
6627: IFFALSE 6601
// EndBuildUp ;
6629: CALL 6212 0 0
// end ;
6633: PPOPN 1
6635: END
// every 0 0$1 trigger mpActive marked mpWin do
6636: LD_INT 100
6638: IFFALSE 6672
6640: GO 6642
6642: DISABLE
// begin if IAmServer then
6643: CALL_OW 518
6647: IFFALSE 6656
// wait ( 0 0$3 ) ;
6649: LD_INT 105
6651: PPUSH
6652: CALL_OW 67
// if Multiplayer then
6656: LD_OWVAR 4
6660: IFFALSE 6668
// YouWinInMultiplayer else
6662: CALL_OW 106
6666: GO 6672
// YouWin ;
6668: CALL_OW 103
// end ;
6672: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6673: LD_INT 0
6675: PPUSH
// result := false ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: DOUBLE
6692: EQUAL
6693: IFTRUE 6715
6695: LD_INT 5
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6715
6701: LD_INT 6
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6715
6707: LD_INT 7
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6788
6715: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_VAR 0 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 2
6735: PUSH
6736: LD_INT 21
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 33
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 33
6758: PUSH
6759: LD_INT 5
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PPUSH
6776: CALL_OW 69
6780: PPUSH
6781: CALL 13500 0 1
6785: ST_TO_ADDR
// end ; GameTypeSurvival :
6786: GO 7184
6788: LD_INT 2
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6926
6796: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: LD_INT 22
6804: PUSH
6805: LD_VAR 0 2
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 2
6816: PUSH
6817: LD_INT 30
6819: PUSH
6820: LD_INT 0
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 30
6829: PUSH
6830: LD_INT 1
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PPUSH
6846: CALL_OW 69
6850: PPUSH
6851: CALL 13500 0 1
6855: IFFALSE 6923
6857: PUSH
6858: LD_INT 22
6860: PUSH
6861: LD_VAR 0 2
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 33
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 33
6895: PUSH
6896: LD_INT 5
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: PPUSH
6918: CALL 13500 0 1
6922: AND
6923: ST_TO_ADDR
// end ; GameTypeSurvivalH :
6924: GO 7184
6926: LD_INT 8
6928: DOUBLE
6929: EQUAL
6930: IFTRUE 6934
6932: GO 7083
6934: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: LD_EXP 41
6944: PUSH
6945: LD_VAR 0 2
6949: ARRAY
6950: PPUSH
6951: CALL_OW 300
6955: IFFALSE 7012
6957: PUSH
6958: LD_INT 22
6960: PUSH
6961: LD_VAR 0 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 30
6975: PUSH
6976: LD_INT 0
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 30
6985: PUSH
6986: LD_INT 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: PPUSH
7007: CALL 13500 0 1
7011: AND
7012: IFFALSE 7080
7014: PUSH
7015: LD_INT 22
7017: PUSH
7018: LD_VAR 0 2
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 2
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 1
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 33
7042: PUSH
7043: LD_INT 3
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 33
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PPUSH
7070: CALL_OW 69
7074: PPUSH
7075: CALL 13500 0 1
7079: AND
7080: ST_TO_ADDR
// end ; GameTypeKing :
7081: GO 7184
7083: LD_INT 3
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7091
7089: GO 7183
7091: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_INT 22
7099: PUSH
7100: LD_VAR 0 2
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 33
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 33
7134: PUSH
7135: LD_INT 5
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PPUSH
7152: CALL_OW 69
7156: PPUSH
7157: CALL 13500 0 1
7161: IFFALSE 7180
7163: PUSH
7164: LD_VAR 0 2
7168: PPUSH
7169: CALL 62488 0 1
7173: PUSH
7174: LD_EXP 35
7178: LESS
7179: AND
7180: ST_TO_ADDR
// end ; end ;
7181: GO 7184
7183: POP
// end ;
7184: LD_VAR 0 3
7188: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7189: LD_INT 100
7191: IFFALSE 7421
7193: GO 7195
7195: DISABLE
7196: LD_INT 0
7198: PPUSH
7199: PPUSH
// begin if Multiplayer then
7200: LD_OWVAR 4
7204: IFFALSE 7212
// SetPlayerSpectator ( ) else
7206: CALL_OW 572
7210: GO 7221
// FogOff ( your_side ) ;
7212: LD_OWVAR 2
7216: PPUSH
7217: CALL_OW 344
// repeat gameIsOn := false ;
7221: LD_ADDR_VAR 0 1
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// for i := 1 to 8 do
7229: LD_ADDR_VAR 0 2
7233: PUSH
7234: DOUBLE
7235: LD_INT 1
7237: DEC
7238: ST_TO_ADDR
7239: LD_INT 8
7241: PUSH
7242: FOR_TO
7243: IFFALSE 7373
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7245: LD_EXP 7
7249: PUSH
7250: LD_VAR 0 2
7254: ARRAY
7255: IFFALSE 7268
7257: PUSH
7258: LD_VAR 0 2
7262: PPUSH
7263: CALL_OW 108
7267: AND
7268: IFFALSE 7282
7270: PUSH
7271: LD_VAR 0 2
7275: PUSH
7276: LD_OWVAR 2
7280: NONEQUAL
7281: AND
7282: IFFALSE 7371
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7284: LD_EXP 8
7288: PUSH
7289: LD_VAR 0 2
7293: ARRAY
7294: NOT
7295: IFTRUE 7343
7297: PUSH
7298: LD_EXP 8
7302: PUSH
7303: LD_VAR 0 2
7307: ARRAY
7308: PUSH
7309: LD_EXP 8
7313: PUSH
7314: LD_OWVAR 2
7318: ARRAY
7319: NONEQUAL
7320: IFFALSE 7342
7322: PUSH
7323: LD_OWVAR 2
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: CALL_OW 81
7337: PUSH
7338: LD_INT 1
7340: NONEQUAL
7341: AND
7342: OR
7343: IFFALSE 7371
// if HasPowerByGameType ( mpGameType , i ) then
7345: LD_EXP 3
7349: PPUSH
7350: LD_VAR 0 2
7354: PPUSH
7355: CALL 6673 0 2
7359: IFFALSE 7371
// begin gameIsOn := true ;
7361: LD_ADDR_VAR 0 1
7365: PUSH
7366: LD_INT 1
7368: ST_TO_ADDR
// break ;
7369: GO 7373
// end ;
7371: GO 7242
7373: POP
7374: POP
// wait ( 100 ) ;
7375: LD_INT 100
7377: PPUSH
7378: CALL_OW 67
// until not gameIsOn ;
7382: LD_VAR 0 1
7386: NOT
7387: IFFALSE 7221
// if IAmServer then
7389: CALL_OW 518
7393: IFFALSE 7402
// wait ( 0 0$3 ) ;
7395: LD_INT 105
7397: PPUSH
7398: CALL_OW 67
// if Multiplayer then
7402: LD_OWVAR 4
7406: IFFALSE 7414
// YouLostInMultiplayer else
7408: CALL_OW 107
7412: GO 7421
// YouLost (  ) ;
7414: LD_STRING 
7416: PPUSH
7417: CALL_OW 104
// end ;
7421: PPOPN 2
7423: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7424: LD_EXP 33
7428: IFFALSE 7812
7430: GO 7432
7432: DISABLE
7433: LD_INT 0
7435: PPUSH
7436: PPUSH
7437: PPUSH
7438: PPUSH
7439: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7440: LD_ADDR_VAR 0 5
7444: PUSH
7445: LD_INT 1
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: LD_INT 4
7456: PUSH
7457: LD_INT 5
7459: PUSH
7460: LD_INT 6
7462: PUSH
7463: LD_INT 7
7465: PUSH
7466: LD_INT 8
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7479: LD_INT 350
7481: PPUSH
7482: CALL_OW 67
// for i := 1 to 8 do
7486: LD_ADDR_VAR 0 1
7490: PUSH
7491: DOUBLE
7492: LD_INT 1
7494: DEC
7495: ST_TO_ADDR
7496: LD_INT 8
7498: PUSH
7499: FOR_TO
7500: IFFALSE 7782
// begin j := sides [ i ] ;
7502: LD_ADDR_VAR 0 2
7506: PUSH
7507: LD_VAR 0 5
7511: PUSH
7512: LD_VAR 0 1
7516: ARRAY
7517: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7518: LD_EXP 40
7522: PUSH
7523: LD_VAR 0 2
7527: ARRAY
7528: PPUSH
7529: CALL 13500 0 1
7533: IFFALSE 7546
7535: PUSH
7536: LD_VAR 0 2
7540: PPUSH
7541: CALL_OW 108
7545: AND
7546: IFFALSE 7564
7548: PUSH
7549: LD_EXP 3
7553: PPUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL 6673 0 2
7563: AND
7564: IFFALSE 7780
// begin wait ( mpRespawn div 2 ) ;
7566: LD_EXP 33
7570: PUSH
7571: LD_INT 2
7573: DIV
7574: PPUSH
7575: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_INT 22
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 50
7598: PUSH
7599: EMPTY
7600: LIST
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: LD_INT 30
7607: PUSH
7608: LD_INT 0
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 30
7617: PUSH
7618: LD_INT 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 69
7639: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7640: LD_VAR 0 3
7644: NOT
7645: IFTRUE 7659
7647: PUSH
7648: LD_VAR 0 2
7652: PPUSH
7653: CALL_OW 108
7657: NOT
7658: OR
7659: IFTRUE 7678
7661: PUSH
7662: LD_EXP 3
7666: PPUSH
7667: LD_VAR 0 2
7671: PPUSH
7672: CALL 6673 0 2
7676: NOT
7677: OR
7678: IFFALSE 7682
// continue ;
7680: GO 7499
// spawn := tmp [ 1 ] ;
7682: LD_ADDR_VAR 0 4
7686: PUSH
7687: LD_VAR 0 3
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7696: LD_EXP 40
7700: PUSH
7701: LD_VAR 0 2
7705: ARRAY
7706: PUSH
7707: LD_INT 1
7709: ARRAY
7710: PPUSH
7711: LD_VAR 0 4
7715: PPUSH
7716: CALL_OW 250
7720: PPUSH
7721: LD_VAR 0 4
7725: PPUSH
7726: CALL_OW 251
7730: PPUSH
7731: LD_INT 32
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7741: LD_ADDR_EXP 40
7745: PUSH
7746: LD_EXP 40
7750: PPUSH
7751: LD_VAR 0 2
7755: PPUSH
7756: LD_EXP 40
7760: PUSH
7761: LD_VAR 0 2
7765: ARRAY
7766: PPUSH
7767: LD_INT 1
7769: PPUSH
7770: CALL_OW 3
7774: PPUSH
7775: CALL_OW 1
7779: ST_TO_ADDR
// end ; end ;
7780: GO 7499
7782: POP
7783: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_VAR 0 5
7793: PPUSH
7794: LD_INT 1
7796: PPUSH
7797: LD_INT 8
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: CALL 15826 0 4
7807: ST_TO_ADDR
// until false ;
7808: LD_INT 0
7810: IFFALSE 7479
// end ;
7812: PPOPN 5
7814: END
// every 0 0$1 marked mpActive do
7815: GO 7817
7817: DISABLE
// begin enable ;
7818: ENABLE
// if not mpDisplayStrings then
7819: LD_EXP 38
7823: NOT
7824: IFFALSE 7835
// begin display_strings := [ ] ;
7826: LD_ADDR_OWVAR 47
7830: PUSH
7831: EMPTY
7832: ST_TO_ADDR
// exit ;
7833: GO 7845
// end ; display_strings := mpDisplayStrings ;
7835: LD_ADDR_OWVAR 47
7839: PUSH
7840: LD_EXP 38
7844: ST_TO_ADDR
// end ; end_of_file
7845: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7846: LD_INT 0
7848: PPUSH
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
// if GetType ( un ) = unit_vehicle then
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 247
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: IFFALSE 7874
// exit ;
7872: GO 8647
// side := GetSide ( un ) ;
7874: LD_ADDR_VAR 0 9
7878: PUSH
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 255
7888: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
7889: LD_EXP 3
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 8
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: IN
7904: IFFALSE 7998
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 266
7915: PUSH
7916: LD_INT 0
7918: PUSH
7919: LD_INT 1
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: IN
7926: IFFALSE 7998
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7928: LD_ADDR_VAR 0 3
7932: PUSH
7933: LD_INT 22
7935: PUSH
7936: LD_VAR 0 9
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 2
7947: PUSH
7948: LD_INT 21
7950: PUSH
7951: LD_INT 1
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 33
7960: PUSH
7961: LD_INT 3
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PPUSH
7977: CALL_OW 69
7981: PUSH
7982: FOR_IN
7983: IFFALSE 7996
// KillUnit ( i ) ;
7985: LD_VAR 0 3
7989: PPUSH
7990: CALL_OW 66
7994: GO 7982
7996: POP
7997: POP
// end ; if mpGameType = GameTypeSurvivalH then
7998: LD_EXP 3
8002: PUSH
8003: LD_INT 8
8005: EQUAL
8006: IFFALSE 8090
// if un in mpCommanders then
8008: LD_VAR 0 1
8012: PUSH
8013: LD_EXP 41
8017: IN
8018: IFFALSE 8090
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8020: LD_ADDR_VAR 0 3
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_VAR 0 9
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 33
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PPUSH
8069: CALL_OW 69
8073: PUSH
8074: FOR_IN
8075: IFFALSE 8088
// KillUnit ( i ) ;
8077: LD_VAR 0 3
8081: PPUSH
8082: CALL_OW 66
8086: GO 8074
8088: POP
8089: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 257
8099: PUSH
8100: LD_INT 12
8102: PUSH
8103: LD_INT 17
8105: PUSH
8106: LD_INT 15
8108: PUSH
8109: LD_INT 16
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: IN
8118: IFTRUE 8135
8120: PUSH
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 263
8130: PUSH
8131: LD_INT 5
8133: EQUAL
8134: OR
8135: IFFALSE 8372
// begin tag := 0 ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_INT 0
8144: ST_TO_ADDR
// for i := 1 to 8 do
8145: LD_ADDR_VAR 0 3
8149: PUSH
8150: DOUBLE
8151: LD_INT 1
8153: DEC
8154: ST_TO_ADDR
8155: LD_INT 8
8157: PUSH
8158: FOR_TO
8159: IFFALSE 8193
// if un in mpApePosIndex [ i ] then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 32
8170: PUSH
8171: LD_VAR 0 3
8175: ARRAY
8176: IN
8177: IFFALSE 8191
// begin tag := i ;
8179: LD_ADDR_VAR 0 5
8183: PUSH
8184: LD_VAR 0 3
8188: ST_TO_ADDR
// break ;
8189: GO 8193
// end ;
8191: GO 8158
8193: POP
8194: POP
// if not tag then
8195: LD_VAR 0 5
8199: NOT
8200: IFFALSE 8204
// exit ;
8202: GO 8647
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8204: LD_ADDR_VAR 0 7
8208: PUSH
8209: LD_EXP 31
8213: PUSH
8214: LD_EXP 7
8218: PUSH
8219: LD_VAR 0 5
8223: ARRAY
8224: ARRAY
8225: ST_TO_ADDR
// if not area then
8226: LD_VAR 0 7
8230: NOT
8231: IFFALSE 8235
// exit ;
8233: GO 8647
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8235: LD_INT 14700
8237: PUSH
8238: LD_VAR 0 1
8242: PUSH
8243: LD_INT 5
8245: MOD
8246: PUSH
8247: LD_INT 1
8249: PLUS
8250: PUSH
8251: LD_INT 700
8253: MUL
8254: PLUS
8255: PPUSH
8256: CALL_OW 67
// repeat wait ( 10 ) ;
8260: LD_INT 10
8262: PPUSH
8263: CALL_OW 67
// until not mpBlockRespThread ;
8267: LD_EXP 47
8271: NOT
8272: IFFALSE 8260
// mpBlockRespThread := true ;
8274: LD_ADDR_EXP 47
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8282: LD_INT 0
8284: PPUSH
8285: CALL 45603 0 1
// ape := CreateHuman ;
8289: LD_ADDR_VAR 0 4
8293: PUSH
8294: CALL_OW 44
8298: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8299: LD_ADDR_EXP 32
8303: PUSH
8304: LD_EXP 32
8308: PPUSH
8309: LD_VAR 0 5
8313: PPUSH
8314: LD_EXP 32
8318: PUSH
8319: LD_VAR 0 5
8323: ARRAY
8324: PPUSH
8325: LD_VAR 0 4
8329: PPUSH
8330: CALL 49476 0 2
8334: PPUSH
8335: CALL_OW 1
8339: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8340: LD_VAR 0 4
8344: PPUSH
8345: LD_VAR 0 7
8349: PPUSH
8350: LD_INT 0
8352: PPUSH
8353: CALL_OW 49
// wait ( 10 ) ;
8357: LD_INT 10
8359: PPUSH
8360: CALL_OW 67
// mpBlockRespThread := false ;
8364: LD_ADDR_EXP 47
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8372: LD_VAR 0 1
8376: PPUSH
8377: CALL_OW 247
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: IFFALSE 8402
8387: PUSH
8388: LD_VAR 0 1
8392: PPUSH
8393: CALL_OW 248
8397: PUSH
8398: LD_INT 0
8400: GREATER
8401: AND
8402: IFFALSE 8647
// begin if not mpRespawn then
8404: LD_EXP 33
8408: NOT
8409: IFFALSE 8413
// exit ;
8411: GO 8647
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8413: LD_VAR 0 9
8417: PPUSH
8418: CALL_OW 108
8422: NOT
8423: IFFALSE 8442
8425: PUSH
8426: LD_EXP 3
8430: PPUSH
8431: LD_VAR 0 9
8435: PPUSH
8436: CALL 6673 0 2
8440: NOT
8441: AND
8442: IFFALSE 8446
// exit ;
8444: GO 8647
// side := GetSide ( un ) ;
8446: LD_ADDR_VAR 0 9
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 255
8460: ST_TO_ADDR
// nation := GetNation ( un ) ;
8461: LD_ADDR_VAR 0 8
8465: PUSH
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 248
8475: ST_TO_ADDR
// class := GetClass ( un ) ;
8476: LD_ADDR_VAR 0 6
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 257
8490: ST_TO_ADDR
// if class > 4 then
8491: LD_VAR 0 6
8495: PUSH
8496: LD_INT 4
8498: GREATER
8499: IFFALSE 8509
// class := 1 ;
8501: LD_ADDR_VAR 0 6
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// repeat wait ( 10 ) ;
8509: LD_INT 10
8511: PPUSH
8512: CALL_OW 67
// until not mpBlockRespThread ;
8516: LD_EXP 47
8520: NOT
8521: IFFALSE 8509
// mpBlockRespThread := true ;
8523: LD_ADDR_EXP 47
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// uc_side := side ;
8531: LD_ADDR_OWVAR 20
8535: PUSH
8536: LD_VAR 0 9
8540: ST_TO_ADDR
// uc_nation := nation ;
8541: LD_ADDR_OWVAR 21
8545: PUSH
8546: LD_VAR 0 8
8550: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8551: LD_INT 0
8553: PPUSH
8554: LD_VAR 0 6
8558: PPUSH
8559: LD_INT 2
8561: PPUSH
8562: CALL_OW 380
// un := CreateHuman ;
8566: LD_ADDR_VAR 0 1
8570: PUSH
8571: CALL_OW 44
8575: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8576: LD_ADDR_EXP 40
8580: PUSH
8581: LD_EXP 40
8585: PPUSH
8586: LD_VAR 0 9
8590: PPUSH
8591: LD_EXP 40
8595: PUSH
8596: LD_VAR 0 9
8600: ARRAY
8601: PPUSH
8602: LD_EXP 40
8606: PUSH
8607: LD_VAR 0 9
8611: ARRAY
8612: PUSH
8613: LD_INT 1
8615: PLUS
8616: PPUSH
8617: LD_VAR 0 1
8621: PPUSH
8622: CALL_OW 1
8626: PPUSH
8627: CALL_OW 1
8631: ST_TO_ADDR
// wait ( 10 ) ;
8632: LD_INT 10
8634: PPUSH
8635: CALL_OW 67
// mpBlockRespThread := false ;
8639: LD_ADDR_EXP 47
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// end ; end ;
8647: LD_VAR 0 2
8651: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
8652: LD_INT 0
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
// tag := 0 ;
8659: LD_ADDR_VAR 0 5
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// for i := 1 to 8 do
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: DOUBLE
8673: LD_INT 1
8675: DEC
8676: ST_TO_ADDR
8677: LD_INT 8
8679: PUSH
8680: FOR_TO
8681: IFFALSE 8715
// if un in mpApePosIndex [ i ] then
8683: LD_VAR 0 2
8687: PUSH
8688: LD_EXP 32
8692: PUSH
8693: LD_VAR 0 4
8697: ARRAY
8698: IN
8699: IFFALSE 8713
// begin tag := i ;
8701: LD_ADDR_VAR 0 5
8705: PUSH
8706: LD_VAR 0 4
8710: ST_TO_ADDR
// break ;
8711: GO 8715
// end ;
8713: GO 8680
8715: POP
8716: POP
// if not tag then
8717: LD_VAR 0 5
8721: NOT
8722: IFFALSE 8726
// exit ;
8724: GO 8894
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8726: LD_ADDR_VAR 0 6
8730: PUSH
8731: LD_EXP 31
8735: PUSH
8736: LD_EXP 7
8740: PUSH
8741: LD_VAR 0 5
8745: ARRAY
8746: ARRAY
8747: ST_TO_ADDR
// if not area then
8748: LD_VAR 0 6
8752: NOT
8753: IFFALSE 8757
// exit ;
8755: GO 8894
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8757: LD_INT 14700
8759: PUSH
8760: LD_VAR 0 2
8764: PUSH
8765: LD_INT 5
8767: MOD
8768: PUSH
8769: LD_INT 1
8771: PLUS
8772: PUSH
8773: LD_INT 700
8775: MUL
8776: PLUS
8777: PPUSH
8778: CALL_OW 67
// repeat wait ( 10 ) ;
8782: LD_INT 10
8784: PPUSH
8785: CALL_OW 67
// until not mpBlockRespThread ;
8789: LD_EXP 47
8793: NOT
8794: IFFALSE 8782
// mpBlockRespThread := true ;
8796: LD_ADDR_EXP 47
8800: PUSH
8801: LD_INT 1
8803: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8804: LD_INT 0
8806: PPUSH
8807: CALL 45603 0 1
// ape := CreateHuman ;
8811: LD_ADDR_VAR 0 7
8815: PUSH
8816: CALL_OW 44
8820: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8821: LD_ADDR_EXP 32
8825: PUSH
8826: LD_EXP 32
8830: PPUSH
8831: LD_VAR 0 5
8835: PPUSH
8836: LD_EXP 32
8840: PUSH
8841: LD_VAR 0 5
8845: ARRAY
8846: PPUSH
8847: LD_VAR 0 7
8851: PPUSH
8852: CALL 49476 0 2
8856: PPUSH
8857: CALL_OW 1
8861: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8862: LD_VAR 0 7
8866: PPUSH
8867: LD_VAR 0 6
8871: PPUSH
8872: LD_INT 0
8874: PPUSH
8875: CALL_OW 49
// wait ( 10 ) ;
8879: LD_INT 10
8881: PPUSH
8882: CALL_OW 67
// mpBlockRespThread := false ;
8886: LD_ADDR_EXP 47
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// end ;
8894: LD_VAR 0 3
8898: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8899: LD_INT 0
8901: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 266
8911: PUSH
8912: LD_INT 0
8914: PUSH
8915: LD_INT 1
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: IN
8922: IFFALSE 8947
// SetBName ( building , @ & GetSide ( building ) ) ;
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_STRING @
8931: PUSH
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 255
8941: STR
8942: PPUSH
8943: CALL_OW 500
// end ;
8947: LD_VAR 0 2
8951: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
8956: LD_EXP 3
8960: PUSH
8961: LD_INT 2
8963: PUSH
8964: LD_INT 8
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: IN
8971: IFFALSE 8995
8973: PUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 266
8983: PUSH
8984: LD_INT 0
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: IN
8994: AND
8995: IFFALSE 9074
// begin SetSide ( building , oldSide ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: CALL_OW 235
// KillUnit ( building ) ;
9011: LD_VAR 0 1
9015: PPUSH
9016: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9020: LD_ADDR_VAR 0 5
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_VAR 0 2
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 21
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9070
// KillUnit ( i ) ;
9059: LD_VAR 0 5
9063: PPUSH
9064: CALL_OW 66
9068: GO 9056
9070: POP
9071: POP
// exit ;
9072: GO 9119
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9074: LD_VAR 0 1
9078: PPUSH
9079: CALL_OW 266
9083: PUSH
9084: LD_INT 0
9086: PUSH
9087: LD_INT 1
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: IN
9094: IFFALSE 9119
// SetBName ( building , @ & GetSide ( building ) ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_STRING @
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 255
9113: STR
9114: PPUSH
9115: CALL_OW 500
// end ;
9119: LD_VAR 0 4
9123: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9124: LD_INT 0
9126: PPUSH
9127: PPUSH
9128: PPUSH
// if mpGameType <> GameTypeFamine then
9129: LD_EXP 3
9133: PUSH
9134: LD_INT 5
9136: NONEQUAL
9137: IFFALSE 9141
// exit ;
9139: GO 9375
// for i := 1 to mpGlobalOilDeposits do
9141: LD_ADDR_VAR 0 6
9145: PUSH
9146: DOUBLE
9147: LD_INT 1
9149: DEC
9150: ST_TO_ADDR
9151: LD_EXP 42
9155: PUSH
9156: FOR_TO
9157: IFFALSE 9373
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9159: LD_EXP 42
9163: PUSH
9164: LD_VAR 0 6
9168: ARRAY
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PPUSH
9174: LD_EXP 42
9178: PUSH
9179: LD_VAR 0 6
9183: ARRAY
9184: PUSH
9185: LD_INT 2
9187: ARRAY
9188: PPUSH
9189: CALL_OW 428
9193: PUSH
9194: LD_VAR 0 1
9198: EQUAL
9199: IFFALSE 9371
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9201: LD_ADDR_VAR 0 7
9205: PUSH
9206: LD_EXP 42
9210: PUSH
9211: LD_VAR 0 6
9215: ARRAY
9216: PUSH
9217: LD_INT 3
9219: ARRAY
9220: ST_TO_ADDR
// value := value - amount ;
9221: LD_ADDR_VAR 0 7
9225: PUSH
9226: LD_VAR 0 7
9230: PUSH
9231: LD_VAR 0 4
9235: MINUS
9236: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9237: LD_ADDR_EXP 42
9241: PUSH
9242: LD_EXP 42
9246: PPUSH
9247: LD_VAR 0 6
9251: PPUSH
9252: LD_EXP 42
9256: PUSH
9257: LD_VAR 0 6
9261: ARRAY
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_VAR 0 7
9270: PPUSH
9271: CALL_OW 1
9275: PPUSH
9276: CALL_OW 1
9280: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9281: LD_VAR 0 2
9285: PUSH
9286: LD_OWVAR 2
9290: PUSH
9291: LD_INT 9
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: IN
9298: IFFALSE 9314
// SetUnitDisplayNumber ( building , value ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: LD_VAR 0 7
9309: PPUSH
9310: CALL_OW 505
// if value <= 0 then
9314: LD_VAR 0 7
9318: PUSH
9319: LD_INT 0
9321: LESSEQUAL
9322: IFFALSE 9371
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9324: LD_EXP 42
9328: PUSH
9329: LD_VAR 0 6
9333: ARRAY
9334: PUSH
9335: LD_INT 1
9337: ARRAY
9338: PPUSH
9339: LD_EXP 42
9343: PUSH
9344: LD_VAR 0 6
9348: ARRAY
9349: PUSH
9350: LD_INT 2
9352: ARRAY
9353: PPUSH
9354: CALL_OW 63
// KillUnit ( building ) ;
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 66
// exit ;
9367: POP
9368: POP
9369: GO 9375
// end ; end ; end ;
9371: GO 9156
9373: POP
9374: POP
// end ;
9375: LD_VAR 0 5
9379: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
// if mpGameType <> GameTypeFamine then
9385: LD_EXP 3
9389: PUSH
9390: LD_INT 5
9392: NONEQUAL
9393: IFFALSE 9397
// exit ;
9395: GO 9631
// for i := 1 to mpGlobalSibDeposits do
9397: LD_ADDR_VAR 0 6
9401: PUSH
9402: DOUBLE
9403: LD_INT 1
9405: DEC
9406: ST_TO_ADDR
9407: LD_EXP 43
9411: PUSH
9412: FOR_TO
9413: IFFALSE 9629
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9415: LD_EXP 43
9419: PUSH
9420: LD_VAR 0 6
9424: ARRAY
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: LD_EXP 43
9434: PUSH
9435: LD_VAR 0 6
9439: ARRAY
9440: PUSH
9441: LD_INT 2
9443: ARRAY
9444: PPUSH
9445: CALL_OW 428
9449: PUSH
9450: LD_VAR 0 1
9454: EQUAL
9455: IFFALSE 9627
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9457: LD_ADDR_VAR 0 7
9461: PUSH
9462: LD_EXP 43
9466: PUSH
9467: LD_VAR 0 6
9471: ARRAY
9472: PUSH
9473: LD_INT 3
9475: ARRAY
9476: ST_TO_ADDR
// value := value - amount ;
9477: LD_ADDR_VAR 0 7
9481: PUSH
9482: LD_VAR 0 7
9486: PUSH
9487: LD_VAR 0 4
9491: MINUS
9492: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9493: LD_ADDR_EXP 43
9497: PUSH
9498: LD_EXP 43
9502: PPUSH
9503: LD_VAR 0 6
9507: PPUSH
9508: LD_EXP 43
9512: PUSH
9513: LD_VAR 0 6
9517: ARRAY
9518: PPUSH
9519: LD_INT 3
9521: PPUSH
9522: LD_VAR 0 7
9526: PPUSH
9527: CALL_OW 1
9531: PPUSH
9532: CALL_OW 1
9536: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9537: LD_VAR 0 2
9541: PUSH
9542: LD_OWVAR 2
9546: PUSH
9547: LD_INT 9
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: IN
9554: IFFALSE 9570
// SetUnitDisplayNumber ( building , value ) ;
9556: LD_VAR 0 1
9560: PPUSH
9561: LD_VAR 0 7
9565: PPUSH
9566: CALL_OW 505
// if value <= 0 then
9570: LD_VAR 0 7
9574: PUSH
9575: LD_INT 0
9577: LESSEQUAL
9578: IFFALSE 9627
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9580: LD_EXP 43
9584: PUSH
9585: LD_VAR 0 6
9589: ARRAY
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: LD_EXP 43
9599: PUSH
9600: LD_VAR 0 6
9604: ARRAY
9605: PUSH
9606: LD_INT 2
9608: ARRAY
9609: PPUSH
9610: CALL_OW 63
// KillUnit ( building ) ;
9614: LD_VAR 0 1
9618: PPUSH
9619: CALL_OW 66
// exit ;
9623: POP
9624: POP
9625: GO 9631
// end ; end ; end ;
9627: GO 9412
9629: POP
9630: POP
// end ;
9631: LD_VAR 0 5
9635: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9636: LD_INT 0
9638: PPUSH
9639: PPUSH
// side := GetSide ( factory ) ;
9640: LD_ADDR_VAR 0 7
9644: PUSH
9645: LD_VAR 0 1
9649: PPUSH
9650: CALL_OW 255
9654: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9655: LD_VAR 0 5
9659: PUSH
9660: LD_INT 81
9662: EQUAL
9663: IFFALSE 9701
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_VAR 0 7
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 34
9680: PUSH
9681: LD_INT 81
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_INT 0
9699: GREATER
9700: AND
9701: IFFALSE 9734
// begin ComCancel ( factory ) ;
9703: LD_VAR 0 1
9707: PPUSH
9708: CALL_OW 127
// if side = your_side then
9712: LD_VAR 0 7
9716: PUSH
9717: LD_OWVAR 2
9721: EQUAL
9722: IFFALSE 9734
// HintSpec ( VehLimit , 2 ) ;
9724: LD_STRING VehLimit
9726: PPUSH
9727: LD_INT 2
9729: PPUSH
9730: CALL_OW 338
// end ; end ;
9734: LD_VAR 0 6
9738: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9739: LD_INT 0
9741: PPUSH
9742: PPUSH
9743: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9744: LD_VAR 0 1
9748: PPUSH
9749: CALL_OW 264
9753: PUSH
9754: LD_INT 81
9756: EQUAL
9757: IFFALSE 9774
9759: PUSH
9760: LD_VAR 0 1
9764: PPUSH
9765: CALL_OW 263
9769: PUSH
9770: LD_INT 1
9772: EQUAL
9773: AND
9774: IFFALSE 10054
// begin for i := 1 to Count ( minersList ) do
9776: LD_ADDR_VAR 0 6
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_EXP 57
9790: PPUSH
9791: CALL 13500 0 1
9795: PUSH
9796: FOR_TO
9797: IFFALSE 9915
// begin if minersList [ i ] = oldId then
9799: LD_EXP 57
9803: PUSH
9804: LD_VAR 0 6
9808: ARRAY
9809: PUSH
9810: LD_VAR 0 2
9814: EQUAL
9815: IFFALSE 9913
// begin for j := 1 to minerMinesList [ i ] do
9817: LD_ADDR_VAR 0 7
9821: PUSH
9822: DOUBLE
9823: LD_INT 1
9825: DEC
9826: ST_TO_ADDR
9827: LD_EXP 58
9831: PUSH
9832: LD_VAR 0 6
9836: ARRAY
9837: PUSH
9838: FOR_TO
9839: IFFALSE 9889
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9841: LD_EXP 58
9845: PUSH
9846: LD_VAR 0 6
9850: ARRAY
9851: PUSH
9852: LD_VAR 0 7
9856: ARRAY
9857: PUSH
9858: LD_INT 1
9860: ARRAY
9861: PPUSH
9862: LD_EXP 58
9866: PUSH
9867: LD_VAR 0 6
9871: ARRAY
9872: PUSH
9873: LD_VAR 0 7
9877: ARRAY
9878: PUSH
9879: LD_INT 2
9881: ARRAY
9882: PPUSH
9883: CALL_OW 612
9887: GO 9838
9889: POP
9890: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9891: LD_ADDR_EXP 58
9895: PUSH
9896: LD_EXP 58
9900: PPUSH
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 3
9910: ST_TO_ADDR
// break ;
9911: GO 9915
// end ; end ;
9913: GO 9796
9915: POP
9916: POP
// minersList := minersList diff oldId ;
9917: LD_ADDR_EXP 57
9921: PUSH
9922: LD_EXP 57
9926: PUSH
9927: LD_VAR 0 2
9931: DIFF
9932: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9933: LD_INT 22
9935: PUSH
9936: LD_VAR 0 4
9940: PPUSH
9941: CALL_OW 255
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 34
9952: PUSH
9953: LD_INT 81
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: PUSH
9969: LD_INT 1
9971: GREATER
9972: IFFALSE 9999
// begin ComExit ( unit ) ;
9974: LD_VAR 0 4
9978: PPUSH
9979: CALL 49874 0 1
// SetSide ( newId , oldSide ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_VAR 0 3
9992: PPUSH
9993: CALL_OW 235
// exit ;
9997: GO 10054
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9999: LD_ADDR_EXP 57
10003: PUSH
10004: LD_EXP 57
10008: PPUSH
10009: LD_EXP 57
10013: PUSH
10014: LD_INT 1
10016: PLUS
10017: PPUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 1
10027: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10028: LD_ADDR_EXP 58
10032: PUSH
10033: LD_EXP 58
10037: PPUSH
10038: LD_EXP 58
10042: PUSH
10043: LD_INT 1
10045: PLUS
10046: PPUSH
10047: EMPTY
10048: PPUSH
10049: CALL_OW 1
10053: ST_TO_ADDR
// end ; end ; end_of_file
10054: LD_VAR 0 5
10058: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10059: LD_EXP 39
10063: IFFALSE 10071
10065: PUSH
10066: CALL 10281 0 0
10070: AND
10071: IFFALSE 10079
10073: PUSH
10074: LD_OWVAR 4
10078: AND
10079: IFFALSE 10278
10081: GO 10083
10083: DISABLE
10084: LD_INT 0
10086: PPUSH
10087: PPUSH
// begin canWin := false ;
10088: LD_ADDR_VAR 0 2
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// if not HasPower ( your_side ) then
10096: LD_OWVAR 2
10100: PPUSH
10101: CALL 10323 0 1
10105: NOT
10106: IFFALSE 10117
// begin Multiplayer_Loose_Message ;
10108: CALL_OW 521
// enable ( mpLose ) ;
10112: LD_INT 102
10114: ENABLE_MARKED
// end else
10115: GO 10278
// begin canWin := true ;
10117: LD_ADDR_VAR 0 2
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// for i := 1 to 8 do
10125: LD_ADDR_VAR 0 1
10129: PUSH
10130: DOUBLE
10131: LD_INT 1
10133: DEC
10134: ST_TO_ADDR
10135: LD_INT 8
10137: PUSH
10138: FOR_TO
10139: IFFALSE 10264
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10141: LD_EXP 7
10145: PUSH
10146: LD_VAR 0 1
10150: ARRAY
10151: IFFALSE 10164
10153: PUSH
10154: LD_VAR 0 1
10158: PPUSH
10159: CALL_OW 108
10163: AND
10164: IFFALSE 10178
10166: PUSH
10167: LD_VAR 0 1
10171: PUSH
10172: LD_OWVAR 2
10176: NONEQUAL
10177: AND
10178: IFFALSE 10262
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10180: LD_EXP 8
10184: PUSH
10185: LD_VAR 0 1
10189: ARRAY
10190: NOT
10191: IFTRUE 10239
10193: PUSH
10194: LD_EXP 8
10198: PUSH
10199: LD_VAR 0 1
10203: ARRAY
10204: PUSH
10205: LD_EXP 8
10209: PUSH
10210: LD_OWVAR 2
10214: ARRAY
10215: NONEQUAL
10216: IFFALSE 10238
10218: PUSH
10219: LD_OWVAR 2
10223: PPUSH
10224: LD_VAR 0 1
10228: PPUSH
10229: CALL_OW 81
10233: PUSH
10234: LD_INT 1
10236: NONEQUAL
10237: AND
10238: OR
10239: IFFALSE 10262
// if HasPower ( i ) then
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL 10323 0 1
10250: IFFALSE 10262
// begin canWin := false ;
10252: LD_ADDR_VAR 0 2
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// break ;
10260: GO 10264
// end ;
10262: GO 10138
10264: POP
10265: POP
// if canWin then
10266: LD_VAR 0 2
10270: IFFALSE 10277
// enable ( mpWin ) else
10272: LD_INT 101
10274: ENABLE_MARKED
10275: GO 10278
// enable ;
10277: ENABLE
// end ; end ;
10278: PPOPN 2
10280: END
// function CanWinLoose ; begin
10281: LD_INT 0
10283: PPUSH
// result := true ;
10284: LD_ADDR_VAR 0 1
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10292: CALL_OW 531
10296: IFFALSE 10308
10298: PUSH
10299: CALL_OW 519
10303: PUSH
10304: LD_INT 1
10306: GREATER
10307: AND
10308: IFFALSE 10318
// result := false ;
10310: LD_ADDR_VAR 0 1
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// end ;
10318: LD_VAR 0 1
10322: RET
// function HasPower ( i ) ; begin
10323: LD_INT 0
10325: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_INT 22
10333: PUSH
10334: LD_VAR 0 1
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 2
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 33
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: LD_INT 5
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: ST_TO_ADDR
// end ; end_of_file
10391: LD_VAR 0 2
10395: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10396: LD_EXP 39
10400: IFFALSE 10443
10402: GO 10404
10404: DISABLE
10405: LD_INT 0
10407: PPUSH
// begin for i := 1 to 8 do
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: DOUBLE
10414: LD_INT 1
10416: DEC
10417: ST_TO_ADDR
10418: LD_INT 8
10420: PUSH
10421: FOR_TO
10422: IFFALSE 10441
// SetRestrict ( b_depot , i , state_disabled ) ;
10424: LD_INT 0
10426: PPUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 0
10434: PPUSH
10435: CALL_OW 324
10439: GO 10421
10441: POP
10442: POP
// end ;
10443: PPOPN 1
10445: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10446: LD_EXP 39
10450: IFFALSE 10458
10452: PUSH
10453: CALL 10668 0 0
10457: AND
10458: IFFALSE 10466
10460: PUSH
10461: LD_OWVAR 4
10465: AND
10466: IFFALSE 10665
10468: GO 10470
10470: DISABLE
10471: LD_INT 0
10473: PPUSH
10474: PPUSH
// begin canWin := false ;
10475: LD_ADDR_VAR 0 2
10479: PUSH
10480: LD_INT 0
10482: ST_TO_ADDR
// if not HasPower ( your_side ) then
10483: LD_OWVAR 2
10487: PPUSH
10488: CALL 10710 0 1
10492: NOT
10493: IFFALSE 10504
// begin Multiplayer_Loose_Message ;
10495: CALL_OW 521
// enable ( mpLose ) ;
10499: LD_INT 102
10501: ENABLE_MARKED
// end else
10502: GO 10665
// begin canWin := true ;
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// for i := 1 to 8 do
10512: LD_ADDR_VAR 0 1
10516: PUSH
10517: DOUBLE
10518: LD_INT 1
10520: DEC
10521: ST_TO_ADDR
10522: LD_INT 8
10524: PUSH
10525: FOR_TO
10526: IFFALSE 10651
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10528: LD_EXP 7
10532: PUSH
10533: LD_VAR 0 1
10537: ARRAY
10538: IFFALSE 10551
10540: PUSH
10541: LD_VAR 0 1
10545: PPUSH
10546: CALL_OW 108
10550: AND
10551: IFFALSE 10565
10553: PUSH
10554: LD_VAR 0 1
10558: PUSH
10559: LD_OWVAR 2
10563: NONEQUAL
10564: AND
10565: IFFALSE 10649
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10567: LD_EXP 8
10571: PUSH
10572: LD_VAR 0 1
10576: ARRAY
10577: NOT
10578: IFTRUE 10626
10580: PUSH
10581: LD_EXP 8
10585: PUSH
10586: LD_VAR 0 1
10590: ARRAY
10591: PUSH
10592: LD_EXP 8
10596: PUSH
10597: LD_OWVAR 2
10601: ARRAY
10602: NONEQUAL
10603: IFFALSE 10625
10605: PUSH
10606: LD_OWVAR 2
10610: PPUSH
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 81
10620: PUSH
10621: LD_INT 1
10623: NONEQUAL
10624: AND
10625: OR
10626: IFFALSE 10649
// if HasPower ( i ) then
10628: LD_VAR 0 1
10632: PPUSH
10633: CALL 10710 0 1
10637: IFFALSE 10649
// begin canWin := false ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_INT 0
10646: ST_TO_ADDR
// break ;
10647: GO 10651
// end ;
10649: GO 10525
10651: POP
10652: POP
// if canWin then
10653: LD_VAR 0 2
10657: IFFALSE 10664
// enable ( mpWin ) else
10659: LD_INT 101
10661: ENABLE_MARKED
10662: GO 10665
// enable ;
10664: ENABLE
// end ; end ;
10665: PPOPN 2
10667: END
// function CanWinLoose ; begin
10668: LD_INT 0
10670: PPUSH
// result := true ;
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 1
10678: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10679: CALL_OW 531
10683: IFFALSE 10695
10685: PUSH
10686: CALL_OW 519
10690: PUSH
10691: LD_INT 1
10693: GREATER
10694: AND
10695: IFFALSE 10705
// result := false ;
10697: LD_ADDR_VAR 0 1
10701: PUSH
10702: LD_INT 0
10704: ST_TO_ADDR
// end ;
10705: LD_VAR 0 1
10709: RET
// function HasPower ( i ) ; begin
10710: LD_INT 0
10712: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10713: LD_INT 22
10715: PUSH
10716: LD_VAR 0 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 30
10730: PUSH
10731: LD_INT 0
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 30
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PPUSH
10757: CALL_OW 69
10761: NOT
10762: IFFALSE 10766
// exit ;
10764: GO 10831
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_VAR 0 1
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 21
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 33
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 33
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: ST_TO_ADDR
// end ; end_of_file
10831: LD_VAR 0 2
10835: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
10836: LD_EXP 39
10840: IFFALSE 10883
10842: GO 10844
10844: DISABLE
10845: LD_INT 0
10847: PPUSH
// begin for i := 1 to 8 do
10848: LD_ADDR_VAR 0 1
10852: PUSH
10853: DOUBLE
10854: LD_INT 1
10856: DEC
10857: ST_TO_ADDR
10858: LD_INT 8
10860: PUSH
10861: FOR_TO
10862: IFFALSE 10881
// SetRestrict ( b_depot , i , state_disabled ) ;
10864: LD_INT 0
10866: PPUSH
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_INT 0
10874: PPUSH
10875: CALL_OW 324
10879: GO 10861
10881: POP
10882: POP
// end ;
10883: PPOPN 1
10885: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
10886: LD_EXP 39
10890: IFFALSE 10898
10892: PUSH
10893: CALL 11108 0 0
10897: AND
10898: IFFALSE 10906
10900: PUSH
10901: LD_OWVAR 4
10905: AND
10906: IFFALSE 11105
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
// begin canWin := false ;
10915: LD_ADDR_VAR 0 2
10919: PUSH
10920: LD_INT 0
10922: ST_TO_ADDR
// if not HasPower ( your_side ) then
10923: LD_OWVAR 2
10927: PPUSH
10928: CALL 11150 0 1
10932: NOT
10933: IFFALSE 10944
// begin Multiplayer_Loose_Message ;
10935: CALL_OW 521
// enable ( mpLose ) ;
10939: LD_INT 102
10941: ENABLE_MARKED
// end else
10942: GO 11105
// begin canWin := true ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// for i := 1 to 8 do
10952: LD_ADDR_VAR 0 1
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_INT 8
10964: PUSH
10965: FOR_TO
10966: IFFALSE 11091
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10968: LD_EXP 7
10972: PUSH
10973: LD_VAR 0 1
10977: ARRAY
10978: IFFALSE 10991
10980: PUSH
10981: LD_VAR 0 1
10985: PPUSH
10986: CALL_OW 108
10990: AND
10991: IFFALSE 11005
10993: PUSH
10994: LD_VAR 0 1
10998: PUSH
10999: LD_OWVAR 2
11003: NONEQUAL
11004: AND
11005: IFFALSE 11089
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11007: LD_EXP 8
11011: PUSH
11012: LD_VAR 0 1
11016: ARRAY
11017: NOT
11018: IFTRUE 11066
11020: PUSH
11021: LD_EXP 8
11025: PUSH
11026: LD_VAR 0 1
11030: ARRAY
11031: PUSH
11032: LD_EXP 8
11036: PUSH
11037: LD_OWVAR 2
11041: ARRAY
11042: NONEQUAL
11043: IFFALSE 11065
11045: PUSH
11046: LD_OWVAR 2
11050: PPUSH
11051: LD_VAR 0 1
11055: PPUSH
11056: CALL_OW 81
11060: PUSH
11061: LD_INT 1
11063: NONEQUAL
11064: AND
11065: OR
11066: IFFALSE 11089
// if HasPower ( i ) then
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL 11150 0 1
11077: IFFALSE 11089
// begin canWin := false ;
11079: LD_ADDR_VAR 0 2
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// break ;
11087: GO 11091
// end ;
11089: GO 10965
11091: POP
11092: POP
// if canWin then
11093: LD_VAR 0 2
11097: IFFALSE 11104
// enable ( mpWin ) else
11099: LD_INT 101
11101: ENABLE_MARKED
11102: GO 11105
// enable ;
11104: ENABLE
// end ; end ;
11105: PPOPN 2
11107: END
// function CanWinLoose ; begin
11108: LD_INT 0
11110: PPUSH
// result := true ;
11111: LD_ADDR_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11119: CALL_OW 531
11123: IFFALSE 11135
11125: PUSH
11126: CALL_OW 519
11130: PUSH
11131: LD_INT 1
11133: GREATER
11134: AND
11135: IFFALSE 11145
// result := false ;
11137: LD_ADDR_VAR 0 1
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// end ;
11145: LD_VAR 0 1
11149: RET
// function HasPower ( i ) ; begin
11150: LD_INT 0
11152: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11153: LD_INT 22
11155: PUSH
11156: LD_VAR 0 1
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: LD_INT 30
11170: PUSH
11171: LD_INT 0
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 30
11180: PUSH
11181: LD_INT 1
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 69
11201: NOT
11202: IFFALSE 11206
// exit ;
11204: GO 11271
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11206: LD_ADDR_VAR 0 2
11210: PUSH
11211: LD_INT 22
11213: PUSH
11214: LD_VAR 0 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 21
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 33
11238: PUSH
11239: LD_INT 3
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 33
11248: PUSH
11249: LD_INT 5
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PPUSH
11266: CALL_OW 69
11270: ST_TO_ADDR
// end ; end_of_file
11271: LD_VAR 0 2
11275: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11276: LD_INT 0
11278: PPUSH
11279: PPUSH
// if exist_mode then
11280: LD_VAR 0 2
11284: IFFALSE 11330
// begin unit := CreateCharacter ( prefix & ident ) ;
11286: LD_ADDR_VAR 0 5
11290: PUSH
11291: LD_VAR 0 3
11295: PUSH
11296: LD_VAR 0 1
11300: STR
11301: PPUSH
11302: CALL_OW 34
11306: ST_TO_ADDR
// if unit then
11307: LD_VAR 0 5
11311: IFFALSE 11328
// DeleteCharacters ( prefix & ident ) ;
11313: LD_VAR 0 3
11317: PUSH
11318: LD_VAR 0 1
11322: STR
11323: PPUSH
11324: CALL_OW 40
// end else
11328: GO 11345
// unit := NewCharacter ( ident ) ;
11330: LD_ADDR_VAR 0 5
11334: PUSH
11335: LD_VAR 0 1
11339: PPUSH
11340: CALL_OW 25
11344: ST_TO_ADDR
// result := unit ;
11345: LD_ADDR_VAR 0 4
11349: PUSH
11350: LD_VAR 0 5
11354: ST_TO_ADDR
// end ;
11355: LD_VAR 0 4
11359: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11360: LD_INT 0
11362: PPUSH
11363: PPUSH
// if exist_mode then
11364: LD_VAR 0 2
11368: IFFALSE 11393
// unit := CreateCharacter ( prefix & ident ) else
11370: LD_ADDR_VAR 0 5
11374: PUSH
11375: LD_VAR 0 3
11379: PUSH
11380: LD_VAR 0 1
11384: STR
11385: PPUSH
11386: CALL_OW 34
11390: ST_TO_ADDR
11391: GO 11408
// unit := NewCharacter ( ident ) ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 25
11407: ST_TO_ADDR
// result := unit ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_VAR 0 5
11417: ST_TO_ADDR
// end ;
11418: LD_VAR 0 4
11422: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11423: LD_INT 0
11425: PPUSH
11426: PPUSH
// if not side or not nation then
11427: LD_VAR 0 1
11431: NOT
11432: IFTRUE 11441
11434: PUSH
11435: LD_VAR 0 2
11439: NOT
11440: OR
11441: IFFALSE 11445
// exit ;
11443: GO 12239
// case nation of nation_american :
11445: LD_VAR 0 2
11449: PUSH
11450: LD_INT 1
11452: DOUBLE
11453: EQUAL
11454: IFTRUE 11458
11456: GO 11680
11458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11459: LD_ADDR_VAR 0 4
11463: PUSH
11464: LD_INT 35
11466: PUSH
11467: LD_INT 45
11469: PUSH
11470: LD_INT 46
11472: PUSH
11473: LD_INT 47
11475: PUSH
11476: LD_INT 82
11478: PUSH
11479: LD_INT 83
11481: PUSH
11482: LD_INT 84
11484: PUSH
11485: LD_INT 85
11487: PUSH
11488: LD_INT 86
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: LD_INT 6
11499: PUSH
11500: LD_INT 15
11502: PUSH
11503: LD_INT 16
11505: PUSH
11506: LD_INT 7
11508: PUSH
11509: LD_INT 12
11511: PUSH
11512: LD_INT 13
11514: PUSH
11515: LD_INT 10
11517: PUSH
11518: LD_INT 14
11520: PUSH
11521: LD_INT 20
11523: PUSH
11524: LD_INT 21
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 32
11535: PUSH
11536: LD_INT 27
11538: PUSH
11539: LD_INT 36
11541: PUSH
11542: LD_INT 69
11544: PUSH
11545: LD_INT 39
11547: PUSH
11548: LD_INT 34
11550: PUSH
11551: LD_INT 40
11553: PUSH
11554: LD_INT 48
11556: PUSH
11557: LD_INT 49
11559: PUSH
11560: LD_INT 50
11562: PUSH
11563: LD_INT 51
11565: PUSH
11566: LD_INT 52
11568: PUSH
11569: LD_INT 53
11571: PUSH
11572: LD_INT 54
11574: PUSH
11575: LD_INT 55
11577: PUSH
11578: LD_INT 56
11580: PUSH
11581: LD_INT 57
11583: PUSH
11584: LD_INT 58
11586: PUSH
11587: LD_INT 59
11589: PUSH
11590: LD_INT 60
11592: PUSH
11593: LD_INT 61
11595: PUSH
11596: LD_INT 62
11598: PUSH
11599: LD_INT 80
11601: PUSH
11602: LD_INT 82
11604: PUSH
11605: LD_INT 83
11607: PUSH
11608: LD_INT 84
11610: PUSH
11611: LD_INT 85
11613: PUSH
11614: LD_INT 86
11616: PUSH
11617: LD_INT 90
11619: PUSH
11620: LD_INT 93
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: ST_TO_ADDR
11678: GO 12161
11680: LD_INT 2
11682: DOUBLE
11683: EQUAL
11684: IFTRUE 11688
11686: GO 11922
11688: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11689: LD_ADDR_VAR 0 4
11693: PUSH
11694: LD_INT 35
11696: PUSH
11697: LD_INT 45
11699: PUSH
11700: LD_INT 46
11702: PUSH
11703: LD_INT 47
11705: PUSH
11706: LD_INT 82
11708: PUSH
11709: LD_INT 83
11711: PUSH
11712: LD_INT 84
11714: PUSH
11715: LD_INT 85
11717: PUSH
11718: LD_INT 87
11720: PUSH
11721: LD_INT 70
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: LD_INT 11
11729: PUSH
11730: LD_INT 3
11732: PUSH
11733: LD_INT 4
11735: PUSH
11736: LD_INT 5
11738: PUSH
11739: LD_INT 6
11741: PUSH
11742: LD_INT 15
11744: PUSH
11745: LD_INT 18
11747: PUSH
11748: LD_INT 7
11750: PUSH
11751: LD_INT 17
11753: PUSH
11754: LD_INT 8
11756: PUSH
11757: LD_INT 20
11759: PUSH
11760: LD_INT 21
11762: PUSH
11763: LD_INT 22
11765: PUSH
11766: LD_INT 72
11768: PUSH
11769: LD_INT 26
11771: PUSH
11772: LD_INT 69
11774: PUSH
11775: LD_INT 39
11777: PUSH
11778: LD_INT 40
11780: PUSH
11781: LD_INT 41
11783: PUSH
11784: LD_INT 42
11786: PUSH
11787: LD_INT 43
11789: PUSH
11790: LD_INT 48
11792: PUSH
11793: LD_INT 49
11795: PUSH
11796: LD_INT 50
11798: PUSH
11799: LD_INT 51
11801: PUSH
11802: LD_INT 52
11804: PUSH
11805: LD_INT 53
11807: PUSH
11808: LD_INT 54
11810: PUSH
11811: LD_INT 55
11813: PUSH
11814: LD_INT 56
11816: PUSH
11817: LD_INT 60
11819: PUSH
11820: LD_INT 61
11822: PUSH
11823: LD_INT 62
11825: PUSH
11826: LD_INT 66
11828: PUSH
11829: LD_INT 67
11831: PUSH
11832: LD_INT 68
11834: PUSH
11835: LD_INT 81
11837: PUSH
11838: LD_INT 82
11840: PUSH
11841: LD_INT 83
11843: PUSH
11844: LD_INT 84
11846: PUSH
11847: LD_INT 85
11849: PUSH
11850: LD_INT 87
11852: PUSH
11853: LD_INT 88
11855: PUSH
11856: LD_INT 92
11858: PUSH
11859: LD_INT 94
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: ST_TO_ADDR
11920: GO 12161
11922: LD_INT 3
11924: DOUBLE
11925: EQUAL
11926: IFTRUE 11930
11928: GO 12160
11930: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11931: LD_ADDR_VAR 0 4
11935: PUSH
11936: LD_INT 46
11938: PUSH
11939: LD_INT 47
11941: PUSH
11942: LD_INT 1
11944: PUSH
11945: LD_INT 2
11947: PUSH
11948: LD_INT 82
11950: PUSH
11951: LD_INT 83
11953: PUSH
11954: LD_INT 84
11956: PUSH
11957: LD_INT 85
11959: PUSH
11960: LD_INT 86
11962: PUSH
11963: LD_INT 11
11965: PUSH
11966: LD_INT 9
11968: PUSH
11969: LD_INT 20
11971: PUSH
11972: LD_INT 19
11974: PUSH
11975: LD_INT 21
11977: PUSH
11978: LD_INT 24
11980: PUSH
11981: LD_INT 22
11983: PUSH
11984: LD_INT 25
11986: PUSH
11987: LD_INT 28
11989: PUSH
11990: LD_INT 29
11992: PUSH
11993: LD_INT 30
11995: PUSH
11996: LD_INT 31
11998: PUSH
11999: LD_INT 37
12001: PUSH
12002: LD_INT 38
12004: PUSH
12005: LD_INT 32
12007: PUSH
12008: LD_INT 27
12010: PUSH
12011: LD_INT 33
12013: PUSH
12014: LD_INT 69
12016: PUSH
12017: LD_INT 39
12019: PUSH
12020: LD_INT 34
12022: PUSH
12023: LD_INT 40
12025: PUSH
12026: LD_INT 71
12028: PUSH
12029: LD_INT 23
12031: PUSH
12032: LD_INT 44
12034: PUSH
12035: LD_INT 48
12037: PUSH
12038: LD_INT 49
12040: PUSH
12041: LD_INT 50
12043: PUSH
12044: LD_INT 51
12046: PUSH
12047: LD_INT 52
12049: PUSH
12050: LD_INT 53
12052: PUSH
12053: LD_INT 54
12055: PUSH
12056: LD_INT 55
12058: PUSH
12059: LD_INT 56
12061: PUSH
12062: LD_INT 57
12064: PUSH
12065: LD_INT 58
12067: PUSH
12068: LD_INT 59
12070: PUSH
12071: LD_INT 63
12073: PUSH
12074: LD_INT 64
12076: PUSH
12077: LD_INT 65
12079: PUSH
12080: LD_INT 82
12082: PUSH
12083: LD_INT 83
12085: PUSH
12086: LD_INT 84
12088: PUSH
12089: LD_INT 85
12091: PUSH
12092: LD_INT 86
12094: PUSH
12095: LD_INT 89
12097: PUSH
12098: LD_INT 91
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: ST_TO_ADDR
12158: GO 12161
12160: POP
// if state > - 1 and state < 3 then
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 1
12168: NEG
12169: GREATER
12170: IFFALSE 12182
12172: PUSH
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 3
12180: LESS
12181: AND
12182: IFFALSE 12239
// for i in result do
12184: LD_ADDR_VAR 0 5
12188: PUSH
12189: LD_VAR 0 4
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12237
// if GetTech ( i , side ) <> state then
12197: LD_VAR 0 5
12201: PPUSH
12202: LD_VAR 0 1
12206: PPUSH
12207: CALL_OW 321
12211: PUSH
12212: LD_VAR 0 3
12216: NONEQUAL
12217: IFFALSE 12235
// result := result diff i ;
12219: LD_ADDR_VAR 0 4
12223: PUSH
12224: LD_VAR 0 4
12228: PUSH
12229: LD_VAR 0 5
12233: DIFF
12234: ST_TO_ADDR
12235: GO 12194
12237: POP
12238: POP
// end ;
12239: LD_VAR 0 4
12243: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12244: LD_INT 0
12246: PPUSH
12247: PPUSH
12248: PPUSH
// result := true ;
12249: LD_ADDR_VAR 0 3
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12257: LD_ADDR_VAR 0 5
12261: PUSH
12262: LD_VAR 0 2
12266: PPUSH
12267: CALL_OW 480
12271: ST_TO_ADDR
// if not tmp then
12272: LD_VAR 0 5
12276: NOT
12277: IFFALSE 12281
// exit ;
12279: GO 12330
// for i in tmp do
12281: LD_ADDR_VAR 0 4
12285: PUSH
12286: LD_VAR 0 5
12290: PUSH
12291: FOR_IN
12292: IFFALSE 12328
// if GetTech ( i , side ) <> state_researched then
12294: LD_VAR 0 4
12298: PPUSH
12299: LD_VAR 0 1
12303: PPUSH
12304: CALL_OW 321
12308: PUSH
12309: LD_INT 2
12311: NONEQUAL
12312: IFFALSE 12326
// begin result := false ;
12314: LD_ADDR_VAR 0 3
12318: PUSH
12319: LD_INT 0
12321: ST_TO_ADDR
// exit ;
12322: POP
12323: POP
12324: GO 12330
// end ;
12326: GO 12291
12328: POP
12329: POP
// end ;
12330: LD_VAR 0 3
12334: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12335: LD_INT 0
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12350: LD_VAR 0 1
12354: NOT
12355: IFTRUE 12372
12357: PUSH
12358: LD_VAR 0 1
12362: PPUSH
12363: CALL_OW 257
12367: PUSH
12368: LD_INT 9
12370: NONEQUAL
12371: OR
12372: IFFALSE 12376
// exit ;
12374: GO 12955
// side := GetSide ( unit ) ;
12376: LD_ADDR_VAR 0 9
12380: PUSH
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL_OW 255
12390: ST_TO_ADDR
// tech_space := tech_spacanom ;
12391: LD_ADDR_VAR 0 12
12395: PUSH
12396: LD_INT 29
12398: ST_TO_ADDR
// tech_time := tech_taurad ;
12399: LD_ADDR_VAR 0 13
12403: PUSH
12404: LD_INT 28
12406: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12407: LD_ADDR_VAR 0 11
12411: PUSH
12412: LD_VAR 0 1
12416: PPUSH
12417: CALL_OW 310
12421: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12422: LD_VAR 0 11
12426: PPUSH
12427: CALL_OW 247
12431: PUSH
12432: LD_INT 2
12434: EQUAL
12435: IFFALSE 12439
// exit ;
12437: GO 12955
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12439: LD_ADDR_VAR 0 8
12443: PUSH
12444: LD_INT 81
12446: PUSH
12447: LD_VAR 0 9
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 3
12458: PUSH
12459: LD_INT 21
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// if not tmp then
12482: LD_VAR 0 8
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12955
// if in_unit then
12491: LD_VAR 0 11
12495: IFFALSE 12519
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12497: LD_ADDR_VAR 0 10
12501: PUSH
12502: LD_VAR 0 8
12506: PPUSH
12507: LD_VAR 0 11
12511: PPUSH
12512: CALL_OW 74
12516: ST_TO_ADDR
12517: GO 12539
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12519: LD_ADDR_VAR 0 10
12523: PUSH
12524: LD_VAR 0 8
12528: PPUSH
12529: LD_VAR 0 1
12533: PPUSH
12534: CALL_OW 74
12538: ST_TO_ADDR
// if not enemy then
12539: LD_VAR 0 10
12543: NOT
12544: IFFALSE 12548
// exit ;
12546: GO 12955
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12548: LD_VAR 0 11
12552: IFFALSE 12574
12554: PUSH
12555: LD_VAR 0 11
12559: PPUSH
12560: LD_VAR 0 10
12564: PPUSH
12565: CALL_OW 296
12569: PUSH
12570: LD_INT 13
12572: GREATER
12573: AND
12574: IFTRUE 12596
12576: PUSH
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_VAR 0 10
12586: PPUSH
12587: CALL_OW 296
12591: PUSH
12592: LD_INT 12
12594: GREATER
12595: OR
12596: IFFALSE 12600
// exit ;
12598: GO 12955
// missile := [ 1 ] ;
12600: LD_ADDR_VAR 0 14
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12611: LD_VAR 0 9
12615: PPUSH
12616: LD_VAR 0 12
12620: PPUSH
12621: CALL_OW 325
12625: IFFALSE 12654
// missile := Replace ( missile , missile + 1 , 2 ) ;
12627: LD_ADDR_VAR 0 14
12631: PUSH
12632: LD_VAR 0 14
12636: PPUSH
12637: LD_VAR 0 14
12641: PUSH
12642: LD_INT 1
12644: PLUS
12645: PPUSH
12646: LD_INT 2
12648: PPUSH
12649: CALL_OW 1
12653: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12654: LD_VAR 0 9
12658: PPUSH
12659: LD_VAR 0 13
12663: PPUSH
12664: CALL_OW 325
12668: IFFALSE 12692
12670: PUSH
12671: LD_VAR 0 10
12675: PPUSH
12676: CALL_OW 255
12680: PPUSH
12681: LD_VAR 0 13
12685: PPUSH
12686: CALL_OW 325
12690: NOT
12691: AND
12692: IFFALSE 12721
// missile := Replace ( missile , missile + 1 , 3 ) ;
12694: LD_ADDR_VAR 0 14
12698: PUSH
12699: LD_VAR 0 14
12703: PPUSH
12704: LD_VAR 0 14
12708: PUSH
12709: LD_INT 1
12711: PLUS
12712: PPUSH
12713: LD_INT 3
12715: PPUSH
12716: CALL_OW 1
12720: ST_TO_ADDR
// if missile < 2 then
12721: LD_VAR 0 14
12725: PUSH
12726: LD_INT 2
12728: LESS
12729: IFFALSE 12733
// exit ;
12731: GO 12955
// x := GetX ( enemy ) ;
12733: LD_ADDR_VAR 0 4
12737: PUSH
12738: LD_VAR 0 10
12742: PPUSH
12743: CALL_OW 250
12747: ST_TO_ADDR
// y := GetY ( enemy ) ;
12748: LD_ADDR_VAR 0 5
12752: PUSH
12753: LD_VAR 0 10
12757: PPUSH
12758: CALL_OW 251
12762: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12763: LD_ADDR_VAR 0 6
12767: PUSH
12768: LD_VAR 0 4
12772: PUSH
12773: LD_INT 1
12775: NEG
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL_OW 12
12784: PLUS
12785: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12786: LD_ADDR_VAR 0 7
12790: PUSH
12791: LD_VAR 0 5
12795: PUSH
12796: LD_INT 1
12798: NEG
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 12
12807: PLUS
12808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12809: LD_VAR 0 6
12813: PPUSH
12814: LD_VAR 0 7
12818: PPUSH
12819: CALL_OW 488
12823: NOT
12824: IFFALSE 12846
// begin _x := x ;
12826: LD_ADDR_VAR 0 6
12830: PUSH
12831: LD_VAR 0 4
12835: ST_TO_ADDR
// _y := y ;
12836: LD_ADDR_VAR 0 7
12840: PUSH
12841: LD_VAR 0 5
12845: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: PPUSH
12854: LD_VAR 0 14
12858: PPUSH
12859: CALL_OW 12
12863: ST_TO_ADDR
// case i of 1 :
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 1
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12894
12877: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12878: LD_VAR 0 1
12882: PPUSH
12883: LD_VAR 0 10
12887: PPUSH
12888: CALL_OW 115
12892: GO 12955
12894: LD_INT 2
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 12924
12902: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12903: LD_VAR 0 1
12907: PPUSH
12908: LD_VAR 0 6
12912: PPUSH
12913: LD_VAR 0 7
12917: PPUSH
12918: CALL_OW 153
12922: GO 12955
12924: LD_INT 3
12926: DOUBLE
12927: EQUAL
12928: IFTRUE 12932
12930: GO 12954
12932: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_VAR 0 6
12942: PPUSH
12943: LD_VAR 0 7
12947: PPUSH
12948: CALL_OW 154
12952: GO 12955
12954: POP
// end ;
12955: LD_VAR 0 2
12959: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
12967: PPUSH
// if not unit or not building then
12968: LD_VAR 0 1
12972: NOT
12973: IFTRUE 12982
12975: PUSH
12976: LD_VAR 0 2
12980: NOT
12981: OR
12982: IFFALSE 12986
// exit ;
12984: GO 13144
// x := GetX ( building ) ;
12986: LD_ADDR_VAR 0 5
12990: PUSH
12991: LD_VAR 0 2
12995: PPUSH
12996: CALL_OW 250
13000: ST_TO_ADDR
// y := GetY ( building ) ;
13001: LD_ADDR_VAR 0 6
13005: PUSH
13006: LD_VAR 0 2
13010: PPUSH
13011: CALL_OW 251
13015: ST_TO_ADDR
// for i := 0 to 5 do
13016: LD_ADDR_VAR 0 4
13020: PUSH
13021: DOUBLE
13022: LD_INT 0
13024: DEC
13025: ST_TO_ADDR
13026: LD_INT 5
13028: PUSH
13029: FOR_TO
13030: IFFALSE 13142
// begin _x := ShiftX ( x , i , 3 ) ;
13032: LD_ADDR_VAR 0 7
13036: PUSH
13037: LD_VAR 0 5
13041: PPUSH
13042: LD_VAR 0 4
13046: PPUSH
13047: LD_INT 3
13049: PPUSH
13050: CALL_OW 272
13054: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13055: LD_ADDR_VAR 0 8
13059: PUSH
13060: LD_VAR 0 6
13064: PPUSH
13065: LD_VAR 0 4
13069: PPUSH
13070: LD_INT 3
13072: PPUSH
13073: CALL_OW 273
13077: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13078: LD_VAR 0 7
13082: PPUSH
13083: LD_VAR 0 8
13087: PPUSH
13088: CALL_OW 488
13092: NOT
13093: IFFALSE 13097
// continue ;
13095: GO 13029
// if HexInfo ( _x , _y ) = 0 then
13097: LD_VAR 0 7
13101: PPUSH
13102: LD_VAR 0 8
13106: PPUSH
13107: CALL_OW 428
13111: PUSH
13112: LD_INT 0
13114: EQUAL
13115: IFFALSE 13140
// begin ComMoveXY ( unit , _x , _y ) ;
13117: LD_VAR 0 1
13121: PPUSH
13122: LD_VAR 0 7
13126: PPUSH
13127: LD_VAR 0 8
13131: PPUSH
13132: CALL_OW 111
// exit ;
13136: POP
13137: POP
13138: GO 13144
// end ; end ;
13140: GO 13029
13142: POP
13143: POP
// end ;
13144: LD_VAR 0 3
13148: RET
// export function ScanBase ( side , base_area ) ; begin
13149: LD_INT 0
13151: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13152: LD_ADDR_VAR 0 3
13156: PUSH
13157: LD_VAR 0 2
13161: PPUSH
13162: LD_INT 81
13164: PUSH
13165: LD_VAR 0 1
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 70
13178: ST_TO_ADDR
// end ;
13179: LD_VAR 0 3
13183: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
13188: PPUSH
13189: PPUSH
// result := false ;
13190: LD_ADDR_VAR 0 2
13194: PUSH
13195: LD_INT 0
13197: ST_TO_ADDR
// side := GetSide ( unit ) ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 1
13207: PPUSH
13208: CALL_OW 255
13212: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13213: LD_ADDR_VAR 0 4
13217: PUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 248
13227: ST_TO_ADDR
// case nat of 1 :
13228: LD_VAR 0 4
13232: PUSH
13233: LD_INT 1
13235: DOUBLE
13236: EQUAL
13237: IFTRUE 13241
13239: GO 13252
13241: POP
// tech := tech_lassight ; 2 :
13242: LD_ADDR_VAR 0 5
13246: PUSH
13247: LD_INT 12
13249: ST_TO_ADDR
13250: GO 13291
13252: LD_INT 2
13254: DOUBLE
13255: EQUAL
13256: IFTRUE 13260
13258: GO 13271
13260: POP
// tech := tech_mortar ; 3 :
13261: LD_ADDR_VAR 0 5
13265: PUSH
13266: LD_INT 41
13268: ST_TO_ADDR
13269: GO 13291
13271: LD_INT 3
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13290
13279: POP
// tech := tech_bazooka ; end ;
13280: LD_ADDR_VAR 0 5
13284: PUSH
13285: LD_INT 44
13287: ST_TO_ADDR
13288: GO 13291
13290: POP
// if Researched ( side , tech ) then
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_VAR 0 5
13300: PPUSH
13301: CALL_OW 325
13305: IFFALSE 13332
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13307: LD_ADDR_VAR 0 2
13311: PUSH
13312: LD_INT 5
13314: PUSH
13315: LD_INT 8
13317: PUSH
13318: LD_INT 9
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: PUSH
13326: LD_VAR 0 4
13330: ARRAY
13331: ST_TO_ADDR
// end ;
13332: LD_VAR 0 2
13336: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13337: LD_INT 0
13339: PPUSH
13340: PPUSH
13341: PPUSH
// if not mines then
13342: LD_VAR 0 2
13346: NOT
13347: IFFALSE 13351
// exit ;
13349: GO 13495
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13351: LD_ADDR_VAR 0 5
13355: PUSH
13356: LD_INT 81
13358: PUSH
13359: LD_VAR 0 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: LD_INT 21
13373: PUSH
13374: LD_INT 3
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: ST_TO_ADDR
// for i in mines do
13394: LD_ADDR_VAR 0 4
13398: PUSH
13399: LD_VAR 0 2
13403: PUSH
13404: FOR_IN
13405: IFFALSE 13493
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13407: LD_VAR 0 4
13411: PUSH
13412: LD_INT 1
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 4
13420: PUSH
13421: LD_INT 2
13423: ARRAY
13424: PPUSH
13425: CALL_OW 458
13429: NOT
13430: IFFALSE 13434
// continue ;
13432: GO 13404
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13434: LD_VAR 0 4
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: LD_VAR 0 4
13447: PUSH
13448: LD_INT 2
13450: ARRAY
13451: PPUSH
13452: CALL_OW 428
13456: PUSH
13457: LD_VAR 0 5
13461: IN
13462: IFFALSE 13491
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13464: LD_VAR 0 4
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_VAR 0 4
13477: PUSH
13478: LD_INT 2
13480: ARRAY
13481: PPUSH
13482: LD_VAR 0 1
13486: PPUSH
13487: CALL_OW 456
// end ;
13491: GO 13404
13493: POP
13494: POP
// end ;
13495: LD_VAR 0 3
13499: RET
// export function Count ( array ) ; begin
13500: LD_INT 0
13502: PPUSH
// result := array + 0 ;
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 0
13515: PLUS
13516: ST_TO_ADDR
// end ;
13517: LD_VAR 0 2
13521: RET
// export function IsEmpty ( building ) ; begin
13522: LD_INT 0
13524: PPUSH
// if not building then
13525: LD_VAR 0 1
13529: NOT
13530: IFFALSE 13534
// exit ;
13532: GO 13577
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 22
13546: PUSH
13547: LD_VAR 0 1
13551: PPUSH
13552: CALL_OW 255
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 58
13563: PUSH
13564: EMPTY
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: IN
13576: ST_TO_ADDR
// end ;
13577: LD_VAR 0 2
13581: RET
// export function IsNotFull ( building ) ; var places ; begin
13582: LD_INT 0
13584: PPUSH
13585: PPUSH
// if not building then
13586: LD_VAR 0 1
13590: NOT
13591: IFFALSE 13595
// exit ;
13593: GO 13623
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: LD_INT 3
13607: PUSH
13608: LD_INT 62
13610: PUSH
13611: EMPTY
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PPUSH
13618: CALL_OW 72
13622: ST_TO_ADDR
// end ;
13623: LD_VAR 0 2
13627: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13628: LD_INT 0
13630: PPUSH
13631: PPUSH
13632: PPUSH
13633: PPUSH
// tmp := [ ] ;
13634: LD_ADDR_VAR 0 3
13638: PUSH
13639: EMPTY
13640: ST_TO_ADDR
// list := [ ] ;
13641: LD_ADDR_VAR 0 5
13645: PUSH
13646: EMPTY
13647: ST_TO_ADDR
// for i = 16 to 25 do
13648: LD_ADDR_VAR 0 4
13652: PUSH
13653: DOUBLE
13654: LD_INT 16
13656: DEC
13657: ST_TO_ADDR
13658: LD_INT 25
13660: PUSH
13661: FOR_TO
13662: IFFALSE 13735
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_VAR 0 1
13681: PPUSH
13682: CALL_OW 255
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 91
13693: PUSH
13694: LD_VAR 0 1
13698: PUSH
13699: LD_INT 6
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 30
13709: PUSH
13710: LD_VAR 0 4
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ADD
13732: ST_TO_ADDR
13733: GO 13661
13735: POP
13736: POP
// for i = 1 to tmp do
13737: LD_ADDR_VAR 0 4
13741: PUSH
13742: DOUBLE
13743: LD_INT 1
13745: DEC
13746: ST_TO_ADDR
13747: LD_VAR 0 3
13751: PUSH
13752: FOR_TO
13753: IFFALSE 13841
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: LD_VAR 0 5
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_VAR 0 4
13774: ARRAY
13775: PPUSH
13776: CALL_OW 266
13780: PUSH
13781: LD_VAR 0 3
13785: PUSH
13786: LD_VAR 0 4
13790: ARRAY
13791: PPUSH
13792: CALL_OW 250
13796: PUSH
13797: LD_VAR 0 3
13801: PUSH
13802: LD_VAR 0 4
13806: ARRAY
13807: PPUSH
13808: CALL_OW 251
13812: PUSH
13813: LD_VAR 0 3
13817: PUSH
13818: LD_VAR 0 4
13822: ARRAY
13823: PPUSH
13824: CALL_OW 254
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: ADD
13838: ST_TO_ADDR
13839: GO 13752
13841: POP
13842: POP
// result := list ;
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_VAR 0 5
13852: ST_TO_ADDR
// end ;
13853: LD_VAR 0 2
13857: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13858: LD_INT 0
13860: PPUSH
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
// if not factory then
13867: LD_VAR 0 1
13871: NOT
13872: IFFALSE 13876
// exit ;
13874: GO 14479
// if control = control_apeman then
13876: LD_VAR 0 4
13880: PUSH
13881: LD_INT 5
13883: EQUAL
13884: IFFALSE 13993
// begin tmp := UnitsInside ( factory ) ;
13886: LD_ADDR_VAR 0 8
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 313
13900: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13901: LD_VAR 0 8
13905: PPUSH
13906: LD_INT 25
13908: PUSH
13909: LD_INT 12
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 72
13920: NOT
13921: IFFALSE 13931
// control := control_manual ;
13923: LD_ADDR_VAR 0 4
13927: PUSH
13928: LD_INT 1
13930: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13931: LD_ADDR_VAR 0 8
13935: PUSH
13936: LD_VAR 0 1
13940: PPUSH
13941: CALL 13628 0 1
13945: ST_TO_ADDR
// if tmp then
13946: LD_VAR 0 8
13950: IFFALSE 13993
// begin for i in tmp do
13952: LD_ADDR_VAR 0 7
13956: PUSH
13957: LD_VAR 0 8
13961: PUSH
13962: FOR_IN
13963: IFFALSE 13991
// if i [ 1 ] = b_ext_radio then
13965: LD_VAR 0 7
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PUSH
13974: LD_INT 22
13976: EQUAL
13977: IFFALSE 13989
// begin control := control_remote ;
13979: LD_ADDR_VAR 0 4
13983: PUSH
13984: LD_INT 2
13986: ST_TO_ADDR
// break ;
13987: GO 13991
// end ;
13989: GO 13962
13991: POP
13992: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13993: LD_VAR 0 1
13997: PPUSH
13998: LD_VAR 0 2
14002: PPUSH
14003: LD_VAR 0 3
14007: PPUSH
14008: LD_VAR 0 4
14012: PPUSH
14013: LD_VAR 0 5
14017: PPUSH
14018: CALL_OW 448
14022: IFFALSE 14057
// begin result := [ chassis , engine , control , weapon ] ;
14024: LD_ADDR_VAR 0 6
14028: PUSH
14029: LD_VAR 0 2
14033: PUSH
14034: LD_VAR 0 3
14038: PUSH
14039: LD_VAR 0 4
14043: PUSH
14044: LD_VAR 0 5
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: ST_TO_ADDR
// exit ;
14055: GO 14479
// end ; _chassis := AvailableChassisList ( factory ) ;
14057: LD_ADDR_VAR 0 9
14061: PUSH
14062: LD_VAR 0 1
14066: PPUSH
14067: CALL_OW 475
14071: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14072: LD_ADDR_VAR 0 11
14076: PUSH
14077: LD_VAR 0 1
14081: PPUSH
14082: CALL_OW 476
14086: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14087: LD_ADDR_VAR 0 12
14091: PUSH
14092: LD_VAR 0 1
14096: PPUSH
14097: CALL_OW 477
14101: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14102: LD_ADDR_VAR 0 10
14106: PUSH
14107: LD_VAR 0 1
14111: PPUSH
14112: CALL_OW 478
14116: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14117: LD_VAR 0 9
14121: NOT
14122: IFTRUE 14131
14124: PUSH
14125: LD_VAR 0 11
14129: NOT
14130: OR
14131: IFTRUE 14140
14133: PUSH
14134: LD_VAR 0 12
14138: NOT
14139: OR
14140: IFTRUE 14149
14142: PUSH
14143: LD_VAR 0 10
14147: NOT
14148: OR
14149: IFFALSE 14184
// begin result := [ chassis , engine , control , weapon ] ;
14151: LD_ADDR_VAR 0 6
14155: PUSH
14156: LD_VAR 0 2
14160: PUSH
14161: LD_VAR 0 3
14165: PUSH
14166: LD_VAR 0 4
14170: PUSH
14171: LD_VAR 0 5
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: ST_TO_ADDR
// exit ;
14182: GO 14479
// end ; if not chassis in _chassis then
14184: LD_VAR 0 2
14188: PUSH
14189: LD_VAR 0 9
14193: IN
14194: NOT
14195: IFFALSE 14221
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_VAR 0 9
14206: PUSH
14207: LD_INT 1
14209: PPUSH
14210: LD_VAR 0 9
14214: PPUSH
14215: CALL_OW 12
14219: ARRAY
14220: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14221: LD_VAR 0 2
14225: PPUSH
14226: LD_VAR 0 3
14230: PPUSH
14231: CALL 14484 0 2
14235: NOT
14236: IFFALSE 14297
// repeat engine := _engine [ 1 ] ;
14238: LD_ADDR_VAR 0 3
14242: PUSH
14243: LD_VAR 0 11
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14252: LD_ADDR_VAR 0 11
14256: PUSH
14257: LD_VAR 0 11
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: CALL_OW 3
14269: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14270: LD_VAR 0 2
14274: PPUSH
14275: LD_VAR 0 3
14279: PPUSH
14280: CALL 14484 0 2
14284: IFTRUE 14295
14286: PUSH
14287: LD_VAR 0 11
14291: PUSH
14292: EMPTY
14293: EQUAL
14294: OR
14295: IFFALSE 14238
// if not control in _control then
14297: LD_VAR 0 4
14301: PUSH
14302: LD_VAR 0 12
14306: IN
14307: NOT
14308: IFFALSE 14334
// control := _control [ rand ( 1 , _control ) ] ;
14310: LD_ADDR_VAR 0 4
14314: PUSH
14315: LD_VAR 0 12
14319: PUSH
14320: LD_INT 1
14322: PPUSH
14323: LD_VAR 0 12
14327: PPUSH
14328: CALL_OW 12
14332: ARRAY
14333: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14334: LD_VAR 0 2
14338: PPUSH
14339: LD_VAR 0 5
14343: PPUSH
14344: CALL 14706 0 2
14348: NOT
14349: IFFALSE 14410
// repeat weapon := _weapon [ 1 ] ;
14351: LD_ADDR_VAR 0 5
14355: PUSH
14356: LD_VAR 0 10
14360: PUSH
14361: LD_INT 1
14363: ARRAY
14364: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14365: LD_ADDR_VAR 0 10
14369: PUSH
14370: LD_VAR 0 10
14374: PPUSH
14375: LD_INT 1
14377: PPUSH
14378: CALL_OW 3
14382: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14383: LD_VAR 0 2
14387: PPUSH
14388: LD_VAR 0 5
14392: PPUSH
14393: CALL 14706 0 2
14397: IFTRUE 14408
14399: PUSH
14400: LD_VAR 0 10
14404: PUSH
14405: EMPTY
14406: EQUAL
14407: OR
14408: IFFALSE 14351
// result := [ ] ;
14410: LD_ADDR_VAR 0 6
14414: PUSH
14415: EMPTY
14416: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14417: LD_VAR 0 1
14421: PPUSH
14422: LD_VAR 0 2
14426: PPUSH
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_VAR 0 4
14436: PPUSH
14437: LD_VAR 0 5
14441: PPUSH
14442: CALL_OW 448
14446: IFFALSE 14479
// result := [ chassis , engine , control , weapon ] ;
14448: LD_ADDR_VAR 0 6
14452: PUSH
14453: LD_VAR 0 2
14457: PUSH
14458: LD_VAR 0 3
14462: PUSH
14463: LD_VAR 0 4
14467: PUSH
14468: LD_VAR 0 5
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: ST_TO_ADDR
// end ;
14479: LD_VAR 0 6
14483: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14484: LD_INT 0
14486: PPUSH
// if not chassis or not engine then
14487: LD_VAR 0 1
14491: NOT
14492: IFTRUE 14501
14494: PUSH
14495: LD_VAR 0 2
14499: NOT
14500: OR
14501: IFFALSE 14505
// exit ;
14503: GO 14701
// case engine of engine_solar :
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 2
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14556
14518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 11
14526: PUSH
14527: LD_INT 12
14529: PUSH
14530: LD_INT 13
14532: PUSH
14533: LD_INT 14
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 3
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: ST_TO_ADDR
14554: GO 14685
14556: LD_INT 1
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14626
14564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_INT 11
14572: PUSH
14573: LD_INT 12
14575: PUSH
14576: LD_INT 13
14578: PUSH
14579: LD_INT 14
14581: PUSH
14582: LD_INT 1
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: LD_INT 3
14590: PUSH
14591: LD_INT 4
14593: PUSH
14594: LD_INT 5
14596: PUSH
14597: LD_INT 21
14599: PUSH
14600: LD_INT 23
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 24
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: ST_TO_ADDR
14624: GO 14685
14626: LD_INT 3
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14684
14634: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14635: LD_ADDR_VAR 0 3
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 14
14645: PUSH
14646: LD_INT 2
14648: PUSH
14649: LD_INT 3
14651: PUSH
14652: LD_INT 4
14654: PUSH
14655: LD_INT 5
14657: PUSH
14658: LD_INT 21
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_INT 23
14666: PUSH
14667: LD_INT 24
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: ST_TO_ADDR
14682: GO 14685
14684: POP
// result := ( chassis in result ) ;
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_VAR 0 1
14694: PUSH
14695: LD_VAR 0 3
14699: IN
14700: ST_TO_ADDR
// end ;
14701: LD_VAR 0 3
14705: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14706: LD_INT 0
14708: PPUSH
// if not chassis or not weapon then
14709: LD_VAR 0 1
14713: NOT
14714: IFTRUE 14723
14716: PUSH
14717: LD_VAR 0 2
14721: NOT
14722: OR
14723: IFFALSE 14727
// exit ;
14725: GO 15821
// case weapon of us_machine_gun :
14727: LD_VAR 0 2
14731: PUSH
14732: LD_INT 2
14734: DOUBLE
14735: EQUAL
14736: IFTRUE 14740
14738: GO 14770
14740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14741: LD_ADDR_VAR 0 3
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: LD_INT 4
14757: PUSH
14758: LD_INT 5
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: ST_TO_ADDR
14768: GO 15805
14770: LD_INT 3
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14808
14778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 3
14792: PUSH
14793: LD_INT 4
14795: PUSH
14796: LD_INT 5
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: ST_TO_ADDR
14806: GO 15805
14808: LD_INT 11
14810: DOUBLE
14811: EQUAL
14812: IFTRUE 14816
14814: GO 14846
14816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14817: LD_ADDR_VAR 0 3
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: LD_INT 2
14827: PUSH
14828: LD_INT 3
14830: PUSH
14831: LD_INT 4
14833: PUSH
14834: LD_INT 5
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: ST_TO_ADDR
14844: GO 15805
14846: LD_INT 4
14848: DOUBLE
14849: EQUAL
14850: IFTRUE 14854
14852: GO 14880
14854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14855: LD_ADDR_VAR 0 3
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 5
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: ST_TO_ADDR
14878: GO 15805
14880: LD_INT 5
14882: DOUBLE
14883: EQUAL
14884: IFTRUE 14888
14886: GO 14914
14888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14889: LD_ADDR_VAR 0 3
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: LD_INT 4
14902: PUSH
14903: LD_INT 5
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: ST_TO_ADDR
14912: GO 15805
14914: LD_INT 9
14916: DOUBLE
14917: EQUAL
14918: IFTRUE 14922
14920: GO 14948
14922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: LD_INT 3
14933: PUSH
14934: LD_INT 4
14936: PUSH
14937: LD_INT 5
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: ST_TO_ADDR
14946: GO 15805
14948: LD_INT 7
14950: DOUBLE
14951: EQUAL
14952: IFTRUE 14956
14954: GO 14982
14956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: LD_INT 3
14967: PUSH
14968: LD_INT 4
14970: PUSH
14971: LD_INT 5
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
14980: GO 15805
14982: LD_INT 12
14984: DOUBLE
14985: EQUAL
14986: IFTRUE 14990
14988: GO 15016
14990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: LD_INT 4
15004: PUSH
15005: LD_INT 5
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: ST_TO_ADDR
15014: GO 15805
15016: LD_INT 13
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15050
15024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15025: LD_ADDR_VAR 0 3
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 3
15035: PUSH
15036: LD_INT 4
15038: PUSH
15039: LD_INT 5
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: ST_TO_ADDR
15048: GO 15805
15050: LD_INT 14
15052: DOUBLE
15053: EQUAL
15054: IFTRUE 15058
15056: GO 15076
15058: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15059: LD_ADDR_VAR 0 3
15063: PUSH
15064: LD_INT 4
15066: PUSH
15067: LD_INT 5
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: ST_TO_ADDR
15074: GO 15805
15076: LD_INT 6
15078: DOUBLE
15079: EQUAL
15080: IFTRUE 15084
15082: GO 15102
15084: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15085: LD_ADDR_VAR 0 3
15089: PUSH
15090: LD_INT 4
15092: PUSH
15093: LD_INT 5
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ST_TO_ADDR
15100: GO 15805
15102: LD_INT 10
15104: DOUBLE
15105: EQUAL
15106: IFTRUE 15110
15108: GO 15128
15110: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15111: LD_ADDR_VAR 0 3
15115: PUSH
15116: LD_INT 4
15118: PUSH
15119: LD_INT 5
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: ST_TO_ADDR
15126: GO 15805
15128: LD_INT 22
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15162
15136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 11
15144: PUSH
15145: LD_INT 12
15147: PUSH
15148: LD_INT 13
15150: PUSH
15151: LD_INT 14
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: ST_TO_ADDR
15160: GO 15805
15162: LD_INT 23
15164: DOUBLE
15165: EQUAL
15166: IFTRUE 15170
15168: GO 15196
15170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15171: LD_ADDR_VAR 0 3
15175: PUSH
15176: LD_INT 11
15178: PUSH
15179: LD_INT 12
15181: PUSH
15182: LD_INT 13
15184: PUSH
15185: LD_INT 14
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: ST_TO_ADDR
15194: GO 15805
15196: LD_INT 24
15198: DOUBLE
15199: EQUAL
15200: IFTRUE 15204
15202: GO 15230
15204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15205: LD_ADDR_VAR 0 3
15209: PUSH
15210: LD_INT 11
15212: PUSH
15213: LD_INT 12
15215: PUSH
15216: LD_INT 13
15218: PUSH
15219: LD_INT 14
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: ST_TO_ADDR
15228: GO 15805
15230: LD_INT 30
15232: DOUBLE
15233: EQUAL
15234: IFTRUE 15238
15236: GO 15264
15238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: LD_INT 11
15246: PUSH
15247: LD_INT 12
15249: PUSH
15250: LD_INT 13
15252: PUSH
15253: LD_INT 14
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: ST_TO_ADDR
15262: GO 15805
15264: LD_INT 25
15266: DOUBLE
15267: EQUAL
15268: IFTRUE 15272
15270: GO 15290
15272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15273: LD_ADDR_VAR 0 3
15277: PUSH
15278: LD_INT 13
15280: PUSH
15281: LD_INT 14
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: ST_TO_ADDR
15288: GO 15805
15290: LD_INT 27
15292: DOUBLE
15293: EQUAL
15294: IFTRUE 15298
15296: GO 15316
15298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15299: LD_ADDR_VAR 0 3
15303: PUSH
15304: LD_INT 13
15306: PUSH
15307: LD_INT 14
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: ST_TO_ADDR
15314: GO 15805
15316: LD_INT 92
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15350
15324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: LD_INT 11
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: LD_INT 13
15338: PUSH
15339: LD_INT 14
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: ST_TO_ADDR
15348: GO 15805
15350: LD_INT 28
15352: DOUBLE
15353: EQUAL
15354: IFTRUE 15358
15356: GO 15376
15358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15359: LD_ADDR_VAR 0 3
15363: PUSH
15364: LD_INT 13
15366: PUSH
15367: LD_INT 14
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: ST_TO_ADDR
15374: GO 15805
15376: LD_INT 29
15378: DOUBLE
15379: EQUAL
15380: IFTRUE 15384
15382: GO 15402
15384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15385: LD_ADDR_VAR 0 3
15389: PUSH
15390: LD_INT 13
15392: PUSH
15393: LD_INT 14
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: ST_TO_ADDR
15400: GO 15805
15402: LD_INT 31
15404: DOUBLE
15405: EQUAL
15406: IFTRUE 15410
15408: GO 15428
15410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15411: LD_ADDR_VAR 0 3
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: ST_TO_ADDR
15426: GO 15805
15428: LD_INT 26
15430: DOUBLE
15431: EQUAL
15432: IFTRUE 15436
15434: GO 15454
15436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15437: LD_ADDR_VAR 0 3
15441: PUSH
15442: LD_INT 13
15444: PUSH
15445: LD_INT 14
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
15452: GO 15805
15454: LD_INT 42
15456: DOUBLE
15457: EQUAL
15458: IFTRUE 15462
15460: GO 15488
15462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15463: LD_ADDR_VAR 0 3
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 22
15473: PUSH
15474: LD_INT 23
15476: PUSH
15477: LD_INT 24
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: ST_TO_ADDR
15486: GO 15805
15488: LD_INT 43
15490: DOUBLE
15491: EQUAL
15492: IFTRUE 15496
15494: GO 15522
15496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15497: LD_ADDR_VAR 0 3
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 22
15507: PUSH
15508: LD_INT 23
15510: PUSH
15511: LD_INT 24
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: ST_TO_ADDR
15520: GO 15805
15522: LD_INT 44
15524: DOUBLE
15525: EQUAL
15526: IFTRUE 15530
15528: GO 15556
15530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 22
15541: PUSH
15542: LD_INT 23
15544: PUSH
15545: LD_INT 24
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: ST_TO_ADDR
15554: GO 15805
15556: LD_INT 45
15558: DOUBLE
15559: EQUAL
15560: IFTRUE 15564
15562: GO 15590
15564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 22
15575: PUSH
15576: LD_INT 23
15578: PUSH
15579: LD_INT 24
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
15588: GO 15805
15590: LD_INT 49
15592: DOUBLE
15593: EQUAL
15594: IFTRUE 15598
15596: GO 15624
15598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15599: LD_ADDR_VAR 0 3
15603: PUSH
15604: LD_INT 21
15606: PUSH
15607: LD_INT 22
15609: PUSH
15610: LD_INT 23
15612: PUSH
15613: LD_INT 24
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: ST_TO_ADDR
15622: GO 15805
15624: LD_INT 51
15626: DOUBLE
15627: EQUAL
15628: IFTRUE 15632
15630: GO 15658
15632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 22
15643: PUSH
15644: LD_INT 23
15646: PUSH
15647: LD_INT 24
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: ST_TO_ADDR
15656: GO 15805
15658: LD_INT 52
15660: DOUBLE
15661: EQUAL
15662: IFTRUE 15666
15664: GO 15692
15666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15667: LD_ADDR_VAR 0 3
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 24
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: ST_TO_ADDR
15690: GO 15805
15692: LD_INT 53
15694: DOUBLE
15695: EQUAL
15696: IFTRUE 15700
15698: GO 15718
15700: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15701: LD_ADDR_VAR 0 3
15705: PUSH
15706: LD_INT 23
15708: PUSH
15709: LD_INT 24
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: ST_TO_ADDR
15716: GO 15805
15718: LD_INT 46
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15744
15726: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15727: LD_ADDR_VAR 0 3
15731: PUSH
15732: LD_INT 23
15734: PUSH
15735: LD_INT 24
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: ST_TO_ADDR
15742: GO 15805
15744: LD_INT 47
15746: DOUBLE
15747: EQUAL
15748: IFTRUE 15752
15750: GO 15770
15752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15753: LD_ADDR_VAR 0 3
15757: PUSH
15758: LD_INT 23
15760: PUSH
15761: LD_INT 24
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: ST_TO_ADDR
15768: GO 15805
15770: LD_INT 98
15772: DOUBLE
15773: EQUAL
15774: IFTRUE 15778
15776: GO 15804
15778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15779: LD_ADDR_VAR 0 3
15783: PUSH
15784: LD_INT 21
15786: PUSH
15787: LD_INT 22
15789: PUSH
15790: LD_INT 23
15792: PUSH
15793: LD_INT 24
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: ST_TO_ADDR
15802: GO 15805
15804: POP
// result := ( chassis in result ) ;
15805: LD_ADDR_VAR 0 3
15809: PUSH
15810: LD_VAR 0 1
15814: PUSH
15815: LD_VAR 0 3
15819: IN
15820: ST_TO_ADDR
// end ;
15821: LD_VAR 0 3
15825: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15826: LD_INT 0
15828: PPUSH
15829: PPUSH
15830: PPUSH
15831: PPUSH
15832: PPUSH
15833: PPUSH
15834: PPUSH
// result := array ;
15835: LD_ADDR_VAR 0 5
15839: PUSH
15840: LD_VAR 0 1
15844: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15845: LD_VAR 0 1
15849: NOT
15850: IFTRUE 15859
15852: PUSH
15853: LD_VAR 0 2
15857: NOT
15858: OR
15859: IFTRUE 15868
15861: PUSH
15862: LD_VAR 0 3
15866: NOT
15867: OR
15868: IFTRUE 15882
15870: PUSH
15871: LD_VAR 0 2
15875: PUSH
15876: LD_VAR 0 1
15880: GREATER
15881: OR
15882: IFTRUE 15896
15884: PUSH
15885: LD_VAR 0 3
15889: PUSH
15890: LD_VAR 0 1
15894: GREATER
15895: OR
15896: IFFALSE 15900
// exit ;
15898: GO 16196
// if direction then
15900: LD_VAR 0 4
15904: IFFALSE 15968
// begin d := 1 ;
15906: LD_ADDR_VAR 0 9
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// if i_from > i_to then
15914: LD_VAR 0 2
15918: PUSH
15919: LD_VAR 0 3
15923: GREATER
15924: IFFALSE 15950
// length := ( array - i_from ) + i_to else
15926: LD_ADDR_VAR 0 11
15930: PUSH
15931: LD_VAR 0 1
15935: PUSH
15936: LD_VAR 0 2
15940: MINUS
15941: PUSH
15942: LD_VAR 0 3
15946: PLUS
15947: ST_TO_ADDR
15948: GO 15966
// length := i_to - i_from ;
15950: LD_ADDR_VAR 0 11
15954: PUSH
15955: LD_VAR 0 3
15959: PUSH
15960: LD_VAR 0 2
15964: MINUS
15965: ST_TO_ADDR
// end else
15966: GO 16029
// begin d := - 1 ;
15968: LD_ADDR_VAR 0 9
15972: PUSH
15973: LD_INT 1
15975: NEG
15976: ST_TO_ADDR
// if i_from > i_to then
15977: LD_VAR 0 2
15981: PUSH
15982: LD_VAR 0 3
15986: GREATER
15987: IFFALSE 16007
// length := i_from - i_to else
15989: LD_ADDR_VAR 0 11
15993: PUSH
15994: LD_VAR 0 2
15998: PUSH
15999: LD_VAR 0 3
16003: MINUS
16004: ST_TO_ADDR
16005: GO 16029
// length := ( array - i_to ) + i_from ;
16007: LD_ADDR_VAR 0 11
16011: PUSH
16012: LD_VAR 0 1
16016: PUSH
16017: LD_VAR 0 3
16021: MINUS
16022: PUSH
16023: LD_VAR 0 2
16027: PLUS
16028: ST_TO_ADDR
// end ; if not length then
16029: LD_VAR 0 11
16033: NOT
16034: IFFALSE 16038
// exit ;
16036: GO 16196
// tmp := array ;
16038: LD_ADDR_VAR 0 10
16042: PUSH
16043: LD_VAR 0 1
16047: ST_TO_ADDR
// for i = 1 to length do
16048: LD_ADDR_VAR 0 6
16052: PUSH
16053: DOUBLE
16054: LD_INT 1
16056: DEC
16057: ST_TO_ADDR
16058: LD_VAR 0 11
16062: PUSH
16063: FOR_TO
16064: IFFALSE 16184
// begin for j = 1 to array do
16066: LD_ADDR_VAR 0 7
16070: PUSH
16071: DOUBLE
16072: LD_INT 1
16074: DEC
16075: ST_TO_ADDR
16076: LD_VAR 0 1
16080: PUSH
16081: FOR_TO
16082: IFFALSE 16170
// begin k := j + d ;
16084: LD_ADDR_VAR 0 8
16088: PUSH
16089: LD_VAR 0 7
16093: PUSH
16094: LD_VAR 0 9
16098: PLUS
16099: ST_TO_ADDR
// if k > array then
16100: LD_VAR 0 8
16104: PUSH
16105: LD_VAR 0 1
16109: GREATER
16110: IFFALSE 16120
// k := 1 ;
16112: LD_ADDR_VAR 0 8
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if not k then
16120: LD_VAR 0 8
16124: NOT
16125: IFFALSE 16137
// k := array ;
16127: LD_ADDR_VAR 0 8
16131: PUSH
16132: LD_VAR 0 1
16136: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16137: LD_ADDR_VAR 0 10
16141: PUSH
16142: LD_VAR 0 10
16146: PPUSH
16147: LD_VAR 0 8
16151: PPUSH
16152: LD_VAR 0 1
16156: PUSH
16157: LD_VAR 0 7
16161: ARRAY
16162: PPUSH
16163: CALL_OW 1
16167: ST_TO_ADDR
// end ;
16168: GO 16081
16170: POP
16171: POP
// array := tmp ;
16172: LD_ADDR_VAR 0 1
16176: PUSH
16177: LD_VAR 0 10
16181: ST_TO_ADDR
// end ;
16182: GO 16063
16184: POP
16185: POP
// result := array ;
16186: LD_ADDR_VAR 0 5
16190: PUSH
16191: LD_VAR 0 1
16195: ST_TO_ADDR
// end ;
16196: LD_VAR 0 5
16200: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
// result := 0 ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_INT 0
16212: ST_TO_ADDR
// if not array or not value in array then
16213: LD_VAR 0 1
16217: NOT
16218: IFTRUE 16233
16220: PUSH
16221: LD_VAR 0 2
16225: PUSH
16226: LD_VAR 0 1
16230: IN
16231: NOT
16232: OR
16233: IFFALSE 16237
// exit ;
16235: GO 16291
// for i = 1 to array do
16237: LD_ADDR_VAR 0 4
16241: PUSH
16242: DOUBLE
16243: LD_INT 1
16245: DEC
16246: ST_TO_ADDR
16247: LD_VAR 0 1
16251: PUSH
16252: FOR_TO
16253: IFFALSE 16289
// if value = array [ i ] then
16255: LD_VAR 0 2
16259: PUSH
16260: LD_VAR 0 1
16264: PUSH
16265: LD_VAR 0 4
16269: ARRAY
16270: EQUAL
16271: IFFALSE 16287
// begin result := i ;
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_VAR 0 4
16282: ST_TO_ADDR
// exit ;
16283: POP
16284: POP
16285: GO 16291
// end ;
16287: GO 16252
16289: POP
16290: POP
// end ;
16291: LD_VAR 0 3
16295: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16296: LD_INT 0
16298: PPUSH
// vc_chassis := chassis ;
16299: LD_ADDR_OWVAR 37
16303: PUSH
16304: LD_VAR 0 1
16308: ST_TO_ADDR
// vc_engine := engine ;
16309: LD_ADDR_OWVAR 39
16313: PUSH
16314: LD_VAR 0 2
16318: ST_TO_ADDR
// vc_control := control ;
16319: LD_ADDR_OWVAR 38
16323: PUSH
16324: LD_VAR 0 3
16328: ST_TO_ADDR
// vc_weapon := weapon ;
16329: LD_ADDR_OWVAR 40
16333: PUSH
16334: LD_VAR 0 4
16338: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16339: LD_ADDR_OWVAR 41
16343: PUSH
16344: LD_VAR 0 5
16348: ST_TO_ADDR
// end ;
16349: LD_VAR 0 6
16353: RET
// export function WantPlant ( unit ) ; var task ; begin
16354: LD_INT 0
16356: PPUSH
16357: PPUSH
// result := false ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 437
16380: ST_TO_ADDR
// if task then
16381: LD_VAR 0 3
16385: IFFALSE 16413
// if task [ 1 ] [ 1 ] = p then
16387: LD_VAR 0 3
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PUSH
16400: LD_STRING p
16402: EQUAL
16403: IFFALSE 16413
// result := true ;
16405: LD_ADDR_VAR 0 2
16409: PUSH
16410: LD_INT 1
16412: ST_TO_ADDR
// end ;
16413: LD_VAR 0 2
16417: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16418: LD_INT 0
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
// if pos < 1 then
16424: LD_VAR 0 2
16428: PUSH
16429: LD_INT 1
16431: LESS
16432: IFFALSE 16436
// exit ;
16434: GO 16739
// if pos = 1 then
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 1
16443: EQUAL
16444: IFFALSE 16477
// result := Replace ( arr , pos [ 1 ] , value ) else
16446: LD_ADDR_VAR 0 4
16450: PUSH
16451: LD_VAR 0 1
16455: PPUSH
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: LD_VAR 0 3
16469: PPUSH
16470: CALL_OW 1
16474: ST_TO_ADDR
16475: GO 16739
// begin tmp := arr ;
16477: LD_ADDR_VAR 0 6
16481: PUSH
16482: LD_VAR 0 1
16486: ST_TO_ADDR
// s_arr := [ tmp ] ;
16487: LD_ADDR_VAR 0 7
16491: PUSH
16492: LD_VAR 0 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: ST_TO_ADDR
// for i = 1 to pos - 1 do
16500: LD_ADDR_VAR 0 5
16504: PUSH
16505: DOUBLE
16506: LD_INT 1
16508: DEC
16509: ST_TO_ADDR
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 1
16517: MINUS
16518: PUSH
16519: FOR_TO
16520: IFFALSE 16565
// begin tmp := tmp [ pos [ i ] ] ;
16522: LD_ADDR_VAR 0 6
16526: PUSH
16527: LD_VAR 0 6
16531: PUSH
16532: LD_VAR 0 2
16536: PUSH
16537: LD_VAR 0 5
16541: ARRAY
16542: ARRAY
16543: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16544: LD_ADDR_VAR 0 7
16548: PUSH
16549: LD_VAR 0 7
16553: PUSH
16554: LD_VAR 0 6
16558: PUSH
16559: EMPTY
16560: LIST
16561: ADD
16562: ST_TO_ADDR
// end ;
16563: GO 16519
16565: POP
16566: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16567: LD_ADDR_VAR 0 6
16571: PUSH
16572: LD_VAR 0 6
16576: PPUSH
16577: LD_VAR 0 2
16581: PUSH
16582: LD_VAR 0 2
16586: ARRAY
16587: PPUSH
16588: LD_VAR 0 3
16592: PPUSH
16593: CALL_OW 1
16597: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16598: LD_ADDR_VAR 0 7
16602: PUSH
16603: LD_VAR 0 7
16607: PPUSH
16608: LD_VAR 0 7
16612: PPUSH
16613: LD_VAR 0 6
16617: PPUSH
16618: CALL_OW 1
16622: ST_TO_ADDR
// for i = s_arr downto 2 do
16623: LD_ADDR_VAR 0 5
16627: PUSH
16628: DOUBLE
16629: LD_VAR 0 7
16633: INC
16634: ST_TO_ADDR
16635: LD_INT 2
16637: PUSH
16638: FOR_DOWNTO
16639: IFFALSE 16723
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16641: LD_ADDR_VAR 0 6
16645: PUSH
16646: LD_VAR 0 7
16650: PUSH
16651: LD_VAR 0 5
16655: PUSH
16656: LD_INT 1
16658: MINUS
16659: ARRAY
16660: PPUSH
16661: LD_VAR 0 2
16665: PUSH
16666: LD_VAR 0 5
16670: PUSH
16671: LD_INT 1
16673: MINUS
16674: ARRAY
16675: PPUSH
16676: LD_VAR 0 7
16680: PUSH
16681: LD_VAR 0 5
16685: ARRAY
16686: PPUSH
16687: CALL_OW 1
16691: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16692: LD_ADDR_VAR 0 7
16696: PUSH
16697: LD_VAR 0 7
16701: PPUSH
16702: LD_VAR 0 5
16706: PUSH
16707: LD_INT 1
16709: MINUS
16710: PPUSH
16711: LD_VAR 0 6
16715: PPUSH
16716: CALL_OW 1
16720: ST_TO_ADDR
// end ;
16721: GO 16638
16723: POP
16724: POP
// result := s_arr [ 1 ] ;
16725: LD_ADDR_VAR 0 4
16729: PUSH
16730: LD_VAR 0 7
16734: PUSH
16735: LD_INT 1
16737: ARRAY
16738: ST_TO_ADDR
// end ; end ;
16739: LD_VAR 0 4
16743: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16744: LD_INT 0
16746: PPUSH
16747: PPUSH
// if not list then
16748: LD_VAR 0 1
16752: NOT
16753: IFFALSE 16757
// exit ;
16755: GO 16848
// i := list [ pos1 ] ;
16757: LD_ADDR_VAR 0 5
16761: PUSH
16762: LD_VAR 0 1
16766: PUSH
16767: LD_VAR 0 2
16771: ARRAY
16772: ST_TO_ADDR
// if not i then
16773: LD_VAR 0 5
16777: NOT
16778: IFFALSE 16782
// exit ;
16780: GO 16848
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16782: LD_ADDR_VAR 0 1
16786: PUSH
16787: LD_VAR 0 1
16791: PPUSH
16792: LD_VAR 0 2
16796: PPUSH
16797: LD_VAR 0 1
16801: PUSH
16802: LD_VAR 0 3
16806: ARRAY
16807: PPUSH
16808: CALL_OW 1
16812: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16813: LD_ADDR_VAR 0 1
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: LD_VAR 0 3
16827: PPUSH
16828: LD_VAR 0 5
16832: PPUSH
16833: CALL_OW 1
16837: ST_TO_ADDR
// result := list ;
16838: LD_ADDR_VAR 0 4
16842: PUSH
16843: LD_VAR 0 1
16847: ST_TO_ADDR
// end ;
16848: LD_VAR 0 4
16852: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16853: LD_INT 0
16855: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16856: LD_ADDR_VAR 0 5
16860: PUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: CALL_OW 250
16870: PPUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 251
16880: PPUSH
16881: LD_VAR 0 2
16885: PPUSH
16886: LD_VAR 0 3
16890: PPUSH
16891: LD_VAR 0 4
16895: PPUSH
16896: CALL 17278 0 5
16900: ST_TO_ADDR
// end ;
16901: LD_VAR 0 5
16905: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16906: LD_INT 0
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
// if not list or not unit then
16912: LD_VAR 0 2
16916: NOT
16917: IFTRUE 16926
16919: PUSH
16920: LD_VAR 0 1
16924: NOT
16925: OR
16926: IFFALSE 16930
// exit ;
16928: GO 17273
// result := [ ] ;
16930: LD_ADDR_VAR 0 5
16934: PUSH
16935: EMPTY
16936: ST_TO_ADDR
// for i in list do
16937: LD_ADDR_VAR 0 6
16941: PUSH
16942: LD_VAR 0 2
16946: PUSH
16947: FOR_IN
16948: IFFALSE 17166
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16950: LD_ADDR_VAR 0 8
16954: PUSH
16955: LD_VAR 0 1
16959: PPUSH
16960: LD_VAR 0 6
16964: PUSH
16965: LD_INT 1
16967: ARRAY
16968: PPUSH
16969: LD_VAR 0 6
16973: PUSH
16974: LD_INT 2
16976: ARRAY
16977: PPUSH
16978: CALL_OW 297
16982: ST_TO_ADDR
// if not Count ( result ) then
16983: LD_VAR 0 5
16987: PPUSH
16988: CALL 13500 0 1
16992: NOT
16993: IFFALSE 17026
// begin result := Join ( result , [ i , tmp ] ) ;
16995: LD_ADDR_VAR 0 5
16999: PUSH
17000: LD_VAR 0 5
17004: PPUSH
17005: LD_VAR 0 6
17009: PUSH
17010: LD_VAR 0 8
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PPUSH
17019: CALL 49476 0 2
17023: ST_TO_ADDR
// continue ;
17024: GO 16947
// end ; if result [ result ] [ 2 ] <= tmp then
17026: LD_VAR 0 5
17030: PUSH
17031: LD_VAR 0 5
17035: ARRAY
17036: PUSH
17037: LD_INT 2
17039: ARRAY
17040: PUSH
17041: LD_VAR 0 8
17045: LESSEQUAL
17046: IFFALSE 17079
// result := Join ( result , [ i , tmp ] ) else
17048: LD_ADDR_VAR 0 5
17052: PUSH
17053: LD_VAR 0 5
17057: PPUSH
17058: LD_VAR 0 6
17062: PUSH
17063: LD_VAR 0 8
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PPUSH
17072: CALL 49476 0 2
17076: ST_TO_ADDR
17077: GO 17164
// begin for j := 1 to Count ( result ) do
17079: LD_ADDR_VAR 0 7
17083: PUSH
17084: DOUBLE
17085: LD_INT 1
17087: DEC
17088: ST_TO_ADDR
17089: LD_VAR 0 5
17093: PPUSH
17094: CALL 13500 0 1
17098: PUSH
17099: FOR_TO
17100: IFFALSE 17162
// begin if tmp < result [ j ] [ 2 ] then
17102: LD_VAR 0 8
17106: PUSH
17107: LD_VAR 0 5
17111: PUSH
17112: LD_VAR 0 7
17116: ARRAY
17117: PUSH
17118: LD_INT 2
17120: ARRAY
17121: LESS
17122: IFFALSE 17160
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17124: LD_ADDR_VAR 0 5
17128: PUSH
17129: LD_VAR 0 5
17133: PPUSH
17134: LD_VAR 0 7
17138: PPUSH
17139: LD_VAR 0 6
17143: PUSH
17144: LD_VAR 0 8
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 2
17157: ST_TO_ADDR
// break ;
17158: GO 17162
// end ; end ;
17160: GO 17099
17162: POP
17163: POP
// end ; end ;
17164: GO 16947
17166: POP
17167: POP
// if result and not asc then
17168: LD_VAR 0 5
17172: IFFALSE 17181
17174: PUSH
17175: LD_VAR 0 3
17179: NOT
17180: AND
17181: IFFALSE 17198
// result := ReverseArray ( result ) ;
17183: LD_ADDR_VAR 0 5
17187: PUSH
17188: LD_VAR 0 5
17192: PPUSH
17193: CALL 44556 0 1
17197: ST_TO_ADDR
// tmp := [ ] ;
17198: LD_ADDR_VAR 0 8
17202: PUSH
17203: EMPTY
17204: ST_TO_ADDR
// if mode then
17205: LD_VAR 0 4
17209: IFFALSE 17273
// begin for i := 1 to result do
17211: LD_ADDR_VAR 0 6
17215: PUSH
17216: DOUBLE
17217: LD_INT 1
17219: DEC
17220: ST_TO_ADDR
17221: LD_VAR 0 5
17225: PUSH
17226: FOR_TO
17227: IFFALSE 17261
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17229: LD_ADDR_VAR 0 8
17233: PUSH
17234: LD_VAR 0 8
17238: PPUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_VAR 0 6
17248: ARRAY
17249: PUSH
17250: LD_INT 1
17252: ARRAY
17253: PPUSH
17254: CALL 49476 0 2
17258: ST_TO_ADDR
17259: GO 17226
17261: POP
17262: POP
// result := tmp ;
17263: LD_ADDR_VAR 0 5
17267: PUSH
17268: LD_VAR 0 8
17272: ST_TO_ADDR
// end ; end ;
17273: LD_VAR 0 5
17277: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
// if not list then
17284: LD_VAR 0 3
17288: NOT
17289: IFFALSE 17293
// exit ;
17291: GO 17683
// result := [ ] ;
17293: LD_ADDR_VAR 0 6
17297: PUSH
17298: EMPTY
17299: ST_TO_ADDR
// for i in list do
17300: LD_ADDR_VAR 0 7
17304: PUSH
17305: LD_VAR 0 3
17309: PUSH
17310: FOR_IN
17311: IFFALSE 17513
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17313: LD_ADDR_VAR 0 9
17317: PUSH
17318: LD_VAR 0 7
17322: PPUSH
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_VAR 0 2
17332: PPUSH
17333: CALL_OW 297
17337: ST_TO_ADDR
// if not result then
17338: LD_VAR 0 6
17342: NOT
17343: IFFALSE 17369
// result := [ [ i , tmp ] ] else
17345: LD_ADDR_VAR 0 6
17349: PUSH
17350: LD_VAR 0 7
17354: PUSH
17355: LD_VAR 0 9
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: ST_TO_ADDR
17367: GO 17511
// begin if result [ result ] [ 2 ] <= tmp then
17369: LD_VAR 0 6
17373: PUSH
17374: LD_VAR 0 6
17378: ARRAY
17379: PUSH
17380: LD_INT 2
17382: ARRAY
17383: PUSH
17384: LD_VAR 0 9
17388: LESSEQUAL
17389: IFFALSE 17431
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17391: LD_ADDR_VAR 0 6
17395: PUSH
17396: LD_VAR 0 6
17400: PPUSH
17401: LD_VAR 0 6
17405: PUSH
17406: LD_INT 1
17408: PLUS
17409: PPUSH
17410: LD_VAR 0 7
17414: PUSH
17415: LD_VAR 0 9
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL_OW 2
17428: ST_TO_ADDR
17429: GO 17511
// for j := 1 to result do
17431: LD_ADDR_VAR 0 8
17435: PUSH
17436: DOUBLE
17437: LD_INT 1
17439: DEC
17440: ST_TO_ADDR
17441: LD_VAR 0 6
17445: PUSH
17446: FOR_TO
17447: IFFALSE 17509
// begin if tmp < result [ j ] [ 2 ] then
17449: LD_VAR 0 9
17453: PUSH
17454: LD_VAR 0 6
17458: PUSH
17459: LD_VAR 0 8
17463: ARRAY
17464: PUSH
17465: LD_INT 2
17467: ARRAY
17468: LESS
17469: IFFALSE 17507
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17471: LD_ADDR_VAR 0 6
17475: PUSH
17476: LD_VAR 0 6
17480: PPUSH
17481: LD_VAR 0 8
17485: PPUSH
17486: LD_VAR 0 7
17490: PUSH
17491: LD_VAR 0 9
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 2
17504: ST_TO_ADDR
// break ;
17505: GO 17509
// end ; end ;
17507: GO 17446
17509: POP
17510: POP
// end ; end ;
17511: GO 17310
17513: POP
17514: POP
// if result and not asc then
17515: LD_VAR 0 6
17519: IFFALSE 17528
17521: PUSH
17522: LD_VAR 0 4
17526: NOT
17527: AND
17528: IFFALSE 17603
// begin tmp := result ;
17530: LD_ADDR_VAR 0 9
17534: PUSH
17535: LD_VAR 0 6
17539: ST_TO_ADDR
// for i = tmp downto 1 do
17540: LD_ADDR_VAR 0 7
17544: PUSH
17545: DOUBLE
17546: LD_VAR 0 9
17550: INC
17551: ST_TO_ADDR
17552: LD_INT 1
17554: PUSH
17555: FOR_DOWNTO
17556: IFFALSE 17601
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17558: LD_ADDR_VAR 0 6
17562: PUSH
17563: LD_VAR 0 6
17567: PPUSH
17568: LD_VAR 0 9
17572: PUSH
17573: LD_VAR 0 7
17577: MINUS
17578: PUSH
17579: LD_INT 1
17581: PLUS
17582: PPUSH
17583: LD_VAR 0 9
17587: PUSH
17588: LD_VAR 0 7
17592: ARRAY
17593: PPUSH
17594: CALL_OW 1
17598: ST_TO_ADDR
17599: GO 17555
17601: POP
17602: POP
// end ; tmp := [ ] ;
17603: LD_ADDR_VAR 0 9
17607: PUSH
17608: EMPTY
17609: ST_TO_ADDR
// if mode then
17610: LD_VAR 0 5
17614: IFFALSE 17683
// begin for i = 1 to result do
17616: LD_ADDR_VAR 0 7
17620: PUSH
17621: DOUBLE
17622: LD_INT 1
17624: DEC
17625: ST_TO_ADDR
17626: LD_VAR 0 6
17630: PUSH
17631: FOR_TO
17632: IFFALSE 17671
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17634: LD_ADDR_VAR 0 9
17638: PUSH
17639: LD_VAR 0 9
17643: PPUSH
17644: LD_VAR 0 7
17648: PPUSH
17649: LD_VAR 0 6
17653: PUSH
17654: LD_VAR 0 7
17658: ARRAY
17659: PUSH
17660: LD_INT 1
17662: ARRAY
17663: PPUSH
17664: CALL_OW 1
17668: ST_TO_ADDR
17669: GO 17631
17671: POP
17672: POP
// result := tmp ;
17673: LD_ADDR_VAR 0 6
17677: PUSH
17678: LD_VAR 0 9
17682: ST_TO_ADDR
// end ; end ;
17683: LD_VAR 0 6
17687: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17688: LD_INT 0
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17696: LD_ADDR_VAR 0 5
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: EMPTY
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: ST_TO_ADDR
// if not x or not y then
17718: LD_VAR 0 2
17722: NOT
17723: IFTRUE 17732
17725: PUSH
17726: LD_VAR 0 3
17730: NOT
17731: OR
17732: IFFALSE 17736
// exit ;
17734: GO 19392
// if not range then
17736: LD_VAR 0 4
17740: NOT
17741: IFFALSE 17751
// range := 10 ;
17743: LD_ADDR_VAR 0 4
17747: PUSH
17748: LD_INT 10
17750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17751: LD_ADDR_VAR 0 8
17755: PUSH
17756: LD_INT 81
17758: PUSH
17759: LD_VAR 0 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 92
17770: PUSH
17771: LD_VAR 0 2
17775: PUSH
17776: LD_VAR 0 3
17780: PUSH
17781: LD_VAR 0 4
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 3
17794: PUSH
17795: LD_INT 21
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: ST_TO_ADDR
// if not tmp then
17819: LD_VAR 0 8
17823: NOT
17824: IFFALSE 17828
// exit ;
17826: GO 19392
// for i in tmp do
17828: LD_ADDR_VAR 0 6
17832: PUSH
17833: LD_VAR 0 8
17837: PUSH
17838: FOR_IN
17839: IFFALSE 19367
// begin points := [ 0 , 0 , 0 ] ;
17841: LD_ADDR_VAR 0 9
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: ST_TO_ADDR
// bpoints := 1 ;
17860: LD_ADDR_VAR 0 10
17864: PUSH
17865: LD_INT 1
17867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17868: LD_VAR 0 6
17872: PPUSH
17873: CALL_OW 247
17877: PUSH
17878: LD_INT 1
17880: DOUBLE
17881: EQUAL
17882: IFTRUE 17886
17884: GO 18468
17886: POP
// begin if GetClass ( i ) = 1 then
17887: LD_VAR 0 6
17891: PPUSH
17892: CALL_OW 257
17896: PUSH
17897: LD_INT 1
17899: EQUAL
17900: IFFALSE 17921
// points := [ 10 , 5 , 3 ] ;
17902: LD_ADDR_VAR 0 9
17906: PUSH
17907: LD_INT 10
17909: PUSH
17910: LD_INT 5
17912: PUSH
17913: LD_INT 3
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17921: LD_VAR 0 6
17925: PPUSH
17926: CALL_OW 257
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 4
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: IN
17945: IFFALSE 17966
// points := [ 3 , 2 , 1 ] ;
17947: LD_ADDR_VAR 0 9
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17966: LD_VAR 0 6
17970: PPUSH
17971: CALL_OW 257
17975: PUSH
17976: LD_INT 5
17978: EQUAL
17979: IFFALSE 18000
// points := [ 130 , 5 , 2 ] ;
17981: LD_ADDR_VAR 0 9
17985: PUSH
17986: LD_INT 130
17988: PUSH
17989: LD_INT 5
17991: PUSH
17992: LD_INT 2
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18000: LD_VAR 0 6
18004: PPUSH
18005: CALL_OW 257
18009: PUSH
18010: LD_INT 8
18012: EQUAL
18013: IFFALSE 18034
// points := [ 35 , 35 , 30 ] ;
18015: LD_ADDR_VAR 0 9
18019: PUSH
18020: LD_INT 35
18022: PUSH
18023: LD_INT 35
18025: PUSH
18026: LD_INT 30
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18034: LD_VAR 0 6
18038: PPUSH
18039: CALL_OW 257
18043: PUSH
18044: LD_INT 9
18046: EQUAL
18047: IFFALSE 18068
// points := [ 20 , 55 , 40 ] ;
18049: LD_ADDR_VAR 0 9
18053: PUSH
18054: LD_INT 20
18056: PUSH
18057: LD_INT 55
18059: PUSH
18060: LD_INT 40
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18068: LD_VAR 0 6
18072: PPUSH
18073: CALL_OW 257
18077: PUSH
18078: LD_INT 12
18080: PUSH
18081: LD_INT 16
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: IN
18088: IFFALSE 18109
// points := [ 5 , 3 , 2 ] ;
18090: LD_ADDR_VAR 0 9
18094: PUSH
18095: LD_INT 5
18097: PUSH
18098: LD_INT 3
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18109: LD_VAR 0 6
18113: PPUSH
18114: CALL_OW 257
18118: PUSH
18119: LD_INT 17
18121: EQUAL
18122: IFFALSE 18143
// points := [ 100 , 50 , 75 ] ;
18124: LD_ADDR_VAR 0 9
18128: PUSH
18129: LD_INT 100
18131: PUSH
18132: LD_INT 50
18134: PUSH
18135: LD_INT 75
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18143: LD_VAR 0 6
18147: PPUSH
18148: CALL_OW 257
18152: PUSH
18153: LD_INT 15
18155: EQUAL
18156: IFFALSE 18177
// points := [ 10 , 5 , 3 ] ;
18158: LD_ADDR_VAR 0 9
18162: PUSH
18163: LD_INT 10
18165: PUSH
18166: LD_INT 5
18168: PUSH
18169: LD_INT 3
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: LIST
18176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18177: LD_VAR 0 6
18181: PPUSH
18182: CALL_OW 257
18186: PUSH
18187: LD_INT 14
18189: EQUAL
18190: IFFALSE 18211
// points := [ 10 , 0 , 0 ] ;
18192: LD_ADDR_VAR 0 9
18196: PUSH
18197: LD_INT 10
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18211: LD_VAR 0 6
18215: PPUSH
18216: CALL_OW 257
18220: PUSH
18221: LD_INT 11
18223: EQUAL
18224: IFFALSE 18245
// points := [ 30 , 10 , 5 ] ;
18226: LD_ADDR_VAR 0 9
18230: PUSH
18231: LD_INT 30
18233: PUSH
18234: LD_INT 10
18236: PUSH
18237: LD_INT 5
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18245: LD_VAR 0 1
18249: PPUSH
18250: LD_INT 5
18252: PPUSH
18253: CALL_OW 321
18257: PUSH
18258: LD_INT 2
18260: EQUAL
18261: IFFALSE 18278
// bpoints := bpoints * 1.8 ;
18263: LD_ADDR_VAR 0 10
18267: PUSH
18268: LD_VAR 0 10
18272: PUSH
18273: LD_REAL  1.80000000000000E+0000
18276: MUL
18277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18278: LD_VAR 0 6
18282: PPUSH
18283: CALL_OW 257
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: LD_INT 3
18296: PUSH
18297: LD_INT 4
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: IN
18306: IFFALSE 18326
18308: PUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: LD_INT 51
18316: PPUSH
18317: CALL_OW 321
18321: PUSH
18322: LD_INT 2
18324: EQUAL
18325: AND
18326: IFFALSE 18343
// bpoints := bpoints * 1.2 ;
18328: LD_ADDR_VAR 0 10
18332: PUSH
18333: LD_VAR 0 10
18337: PUSH
18338: LD_REAL  1.20000000000000E+0000
18341: MUL
18342: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18343: LD_VAR 0 6
18347: PPUSH
18348: CALL_OW 257
18352: PUSH
18353: LD_INT 5
18355: PUSH
18356: LD_INT 7
18358: PUSH
18359: LD_INT 9
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: IN
18367: IFFALSE 18387
18369: PUSH
18370: LD_VAR 0 1
18374: PPUSH
18375: LD_INT 52
18377: PPUSH
18378: CALL_OW 321
18382: PUSH
18383: LD_INT 2
18385: EQUAL
18386: AND
18387: IFFALSE 18404
// bpoints := bpoints * 1.5 ;
18389: LD_ADDR_VAR 0 10
18393: PUSH
18394: LD_VAR 0 10
18398: PUSH
18399: LD_REAL  1.50000000000000E+0000
18402: MUL
18403: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18404: LD_VAR 0 1
18408: PPUSH
18409: LD_INT 66
18411: PPUSH
18412: CALL_OW 321
18416: PUSH
18417: LD_INT 2
18419: EQUAL
18420: IFFALSE 18437
// bpoints := bpoints * 1.1 ;
18422: LD_ADDR_VAR 0 10
18426: PUSH
18427: LD_VAR 0 10
18431: PUSH
18432: LD_REAL  1.10000000000000E+0000
18435: MUL
18436: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18437: LD_ADDR_VAR 0 10
18441: PUSH
18442: LD_VAR 0 10
18446: PUSH
18447: LD_VAR 0 6
18451: PPUSH
18452: LD_INT 1
18454: PPUSH
18455: CALL_OW 259
18459: PUSH
18460: LD_REAL  1.15000000000000E+0000
18463: MUL
18464: MUL
18465: ST_TO_ADDR
// end ; unit_vehicle :
18466: GO 19296
18468: LD_INT 2
18470: DOUBLE
18471: EQUAL
18472: IFTRUE 18476
18474: GO 19284
18476: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18477: LD_VAR 0 6
18481: PPUSH
18482: CALL_OW 264
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 42
18492: PUSH
18493: LD_INT 24
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: IN
18501: IFFALSE 18522
// points := [ 25 , 5 , 3 ] ;
18503: LD_ADDR_VAR 0 9
18507: PUSH
18508: LD_INT 25
18510: PUSH
18511: LD_INT 5
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18522: LD_VAR 0 6
18526: PPUSH
18527: CALL_OW 264
18531: PUSH
18532: LD_INT 4
18534: PUSH
18535: LD_INT 43
18537: PUSH
18538: LD_INT 25
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: IN
18546: IFFALSE 18567
// points := [ 40 , 15 , 5 ] ;
18548: LD_ADDR_VAR 0 9
18552: PUSH
18553: LD_INT 40
18555: PUSH
18556: LD_INT 15
18558: PUSH
18559: LD_INT 5
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18567: LD_VAR 0 6
18571: PPUSH
18572: CALL_OW 264
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: LD_INT 23
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: IN
18587: IFFALSE 18608
// points := [ 7 , 25 , 8 ] ;
18589: LD_ADDR_VAR 0 9
18593: PUSH
18594: LD_INT 7
18596: PUSH
18597: LD_INT 25
18599: PUSH
18600: LD_INT 8
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18608: LD_VAR 0 6
18612: PPUSH
18613: CALL_OW 264
18617: PUSH
18618: LD_INT 5
18620: PUSH
18621: LD_INT 27
18623: PUSH
18624: LD_INT 44
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: IN
18632: IFFALSE 18653
// points := [ 14 , 50 , 16 ] ;
18634: LD_ADDR_VAR 0 9
18638: PUSH
18639: LD_INT 14
18641: PUSH
18642: LD_INT 50
18644: PUSH
18645: LD_INT 16
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18653: LD_VAR 0 6
18657: PPUSH
18658: CALL_OW 264
18662: PUSH
18663: LD_INT 6
18665: PUSH
18666: LD_INT 46
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: IN
18673: IFFALSE 18694
// points := [ 32 , 120 , 70 ] ;
18675: LD_ADDR_VAR 0 9
18679: PUSH
18680: LD_INT 32
18682: PUSH
18683: LD_INT 120
18685: PUSH
18686: LD_INT 70
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: LIST
18693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18694: LD_VAR 0 6
18698: PPUSH
18699: CALL_OW 264
18703: PUSH
18704: LD_INT 7
18706: PUSH
18707: LD_INT 28
18709: PUSH
18710: LD_INT 45
18712: PUSH
18713: LD_INT 92
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: IN
18722: IFFALSE 18743
// points := [ 35 , 20 , 45 ] ;
18724: LD_ADDR_VAR 0 9
18728: PUSH
18729: LD_INT 35
18731: PUSH
18732: LD_INT 20
18734: PUSH
18735: LD_INT 45
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18743: LD_VAR 0 6
18747: PPUSH
18748: CALL_OW 264
18752: PUSH
18753: LD_INT 47
18755: PUSH
18756: EMPTY
18757: LIST
18758: IN
18759: IFFALSE 18780
// points := [ 67 , 45 , 75 ] ;
18761: LD_ADDR_VAR 0 9
18765: PUSH
18766: LD_INT 67
18768: PUSH
18769: LD_INT 45
18771: PUSH
18772: LD_INT 75
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18780: LD_VAR 0 6
18784: PPUSH
18785: CALL_OW 264
18789: PUSH
18790: LD_INT 26
18792: PUSH
18793: EMPTY
18794: LIST
18795: IN
18796: IFFALSE 18817
// points := [ 120 , 30 , 80 ] ;
18798: LD_ADDR_VAR 0 9
18802: PUSH
18803: LD_INT 120
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 80
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18817: LD_VAR 0 6
18821: PPUSH
18822: CALL_OW 264
18826: PUSH
18827: LD_INT 22
18829: PUSH
18830: EMPTY
18831: LIST
18832: IN
18833: IFFALSE 18854
// points := [ 40 , 1 , 1 ] ;
18835: LD_ADDR_VAR 0 9
18839: PUSH
18840: LD_INT 40
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18854: LD_VAR 0 6
18858: PPUSH
18859: CALL_OW 264
18863: PUSH
18864: LD_INT 29
18866: PUSH
18867: EMPTY
18868: LIST
18869: IN
18870: IFFALSE 18891
// points := [ 70 , 200 , 400 ] ;
18872: LD_ADDR_VAR 0 9
18876: PUSH
18877: LD_INT 70
18879: PUSH
18880: LD_INT 200
18882: PUSH
18883: LD_INT 400
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18891: LD_VAR 0 6
18895: PPUSH
18896: CALL_OW 264
18900: PUSH
18901: LD_INT 14
18903: PUSH
18904: LD_INT 53
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: IN
18911: IFFALSE 18932
// points := [ 40 , 10 , 20 ] ;
18913: LD_ADDR_VAR 0 9
18917: PUSH
18918: LD_INT 40
18920: PUSH
18921: LD_INT 10
18923: PUSH
18924: LD_INT 20
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18932: LD_VAR 0 6
18936: PPUSH
18937: CALL_OW 264
18941: PUSH
18942: LD_INT 9
18944: PUSH
18945: EMPTY
18946: LIST
18947: IN
18948: IFFALSE 18969
// points := [ 5 , 70 , 20 ] ;
18950: LD_ADDR_VAR 0 9
18954: PUSH
18955: LD_INT 5
18957: PUSH
18958: LD_INT 70
18960: PUSH
18961: LD_INT 20
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18969: LD_VAR 0 6
18973: PPUSH
18974: CALL_OW 264
18978: PUSH
18979: LD_INT 10
18981: PUSH
18982: EMPTY
18983: LIST
18984: IN
18985: IFFALSE 19006
// points := [ 35 , 110 , 70 ] ;
18987: LD_ADDR_VAR 0 9
18991: PUSH
18992: LD_INT 35
18994: PUSH
18995: LD_INT 110
18997: PUSH
18998: LD_INT 70
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19006: LD_VAR 0 6
19010: PPUSH
19011: CALL_OW 265
19015: PUSH
19016: LD_INT 25
19018: EQUAL
19019: IFFALSE 19040
// points := [ 80 , 65 , 100 ] ;
19021: LD_ADDR_VAR 0 9
19025: PUSH
19026: LD_INT 80
19028: PUSH
19029: LD_INT 65
19031: PUSH
19032: LD_INT 100
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19040: LD_VAR 0 6
19044: PPUSH
19045: CALL_OW 263
19049: PUSH
19050: LD_INT 1
19052: EQUAL
19053: IFFALSE 19088
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19055: LD_ADDR_VAR 0 10
19059: PUSH
19060: LD_VAR 0 10
19064: PUSH
19065: LD_VAR 0 6
19069: PPUSH
19070: CALL_OW 311
19074: PPUSH
19075: LD_INT 3
19077: PPUSH
19078: CALL_OW 259
19082: PUSH
19083: LD_INT 4
19085: MUL
19086: MUL
19087: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19088: LD_VAR 0 6
19092: PPUSH
19093: CALL_OW 263
19097: PUSH
19098: LD_INT 2
19100: EQUAL
19101: IFFALSE 19152
// begin j := IsControledBy ( i ) ;
19103: LD_ADDR_VAR 0 7
19107: PUSH
19108: LD_VAR 0 6
19112: PPUSH
19113: CALL_OW 312
19117: ST_TO_ADDR
// if j then
19118: LD_VAR 0 7
19122: IFFALSE 19152
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19124: LD_ADDR_VAR 0 10
19128: PUSH
19129: LD_VAR 0 10
19133: PUSH
19134: LD_VAR 0 7
19138: PPUSH
19139: LD_INT 3
19141: PPUSH
19142: CALL_OW 259
19146: PUSH
19147: LD_INT 3
19149: MUL
19150: MUL
19151: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19152: LD_VAR 0 6
19156: PPUSH
19157: CALL_OW 264
19161: PUSH
19162: LD_INT 5
19164: PUSH
19165: LD_INT 6
19167: PUSH
19168: LD_INT 46
19170: PUSH
19171: LD_INT 44
19173: PUSH
19174: LD_INT 47
19176: PUSH
19177: LD_INT 45
19179: PUSH
19180: LD_INT 28
19182: PUSH
19183: LD_INT 7
19185: PUSH
19186: LD_INT 27
19188: PUSH
19189: LD_INT 29
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: IN
19204: IFFALSE 19224
19206: PUSH
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_INT 52
19214: PPUSH
19215: CALL_OW 321
19219: PUSH
19220: LD_INT 2
19222: EQUAL
19223: AND
19224: IFFALSE 19241
// bpoints := bpoints * 1.2 ;
19226: LD_ADDR_VAR 0 10
19230: PUSH
19231: LD_VAR 0 10
19235: PUSH
19236: LD_REAL  1.20000000000000E+0000
19239: MUL
19240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19241: LD_VAR 0 6
19245: PPUSH
19246: CALL_OW 264
19250: PUSH
19251: LD_INT 6
19253: PUSH
19254: LD_INT 46
19256: PUSH
19257: LD_INT 47
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: IN
19265: IFFALSE 19282
// bpoints := bpoints * 1.2 ;
19267: LD_ADDR_VAR 0 10
19271: PUSH
19272: LD_VAR 0 10
19276: PUSH
19277: LD_REAL  1.20000000000000E+0000
19280: MUL
19281: ST_TO_ADDR
// end ; unit_building :
19282: GO 19296
19284: LD_INT 3
19286: DOUBLE
19287: EQUAL
19288: IFTRUE 19292
19290: GO 19295
19292: POP
// ; end ;
19293: GO 19296
19295: POP
// for j = 1 to 3 do
19296: LD_ADDR_VAR 0 7
19300: PUSH
19301: DOUBLE
19302: LD_INT 1
19304: DEC
19305: ST_TO_ADDR
19306: LD_INT 3
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19363
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19312: LD_ADDR_VAR 0 5
19316: PUSH
19317: LD_VAR 0 5
19321: PPUSH
19322: LD_VAR 0 7
19326: PPUSH
19327: LD_VAR 0 5
19331: PUSH
19332: LD_VAR 0 7
19336: ARRAY
19337: PUSH
19338: LD_VAR 0 9
19342: PUSH
19343: LD_VAR 0 7
19347: ARRAY
19348: PUSH
19349: LD_VAR 0 10
19353: MUL
19354: PLUS
19355: PPUSH
19356: CALL_OW 1
19360: ST_TO_ADDR
19361: GO 19309
19363: POP
19364: POP
// end ;
19365: GO 17838
19367: POP
19368: POP
// result := Replace ( result , 4 , tmp ) ;
19369: LD_ADDR_VAR 0 5
19373: PUSH
19374: LD_VAR 0 5
19378: PPUSH
19379: LD_INT 4
19381: PPUSH
19382: LD_VAR 0 8
19386: PPUSH
19387: CALL_OW 1
19391: ST_TO_ADDR
// end ;
19392: LD_VAR 0 5
19396: RET
// export function DangerAtRange ( unit , range ) ; begin
19397: LD_INT 0
19399: PPUSH
// if not unit then
19400: LD_VAR 0 1
19404: NOT
19405: IFFALSE 19409
// exit ;
19407: GO 19454
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 255
19423: PPUSH
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 250
19433: PPUSH
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 251
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: CALL 17688 0 4
19453: ST_TO_ADDR
// end ;
19454: LD_VAR 0 3
19458: RET
// export function DangerInArea ( side , area ) ; begin
19459: LD_INT 0
19461: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19462: LD_ADDR_VAR 0 3
19466: PUSH
19467: LD_VAR 0 2
19471: PPUSH
19472: LD_INT 81
19474: PUSH
19475: LD_VAR 0 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 70
19488: ST_TO_ADDR
// end ;
19489: LD_VAR 0 3
19493: RET
// export function IsExtension ( b ) ; begin
19494: LD_INT 0
19496: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19497: LD_ADDR_VAR 0 2
19501: PUSH
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 23
19509: PUSH
19510: LD_INT 20
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_INT 17
19518: PUSH
19519: LD_INT 24
19521: PUSH
19522: LD_INT 21
19524: PUSH
19525: LD_INT 19
19527: PUSH
19528: LD_INT 16
19530: PUSH
19531: LD_INT 25
19533: PUSH
19534: LD_INT 18
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: IN
19549: ST_TO_ADDR
// end ;
19550: LD_VAR 0 2
19554: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19555: LD_INT 0
19557: PPUSH
19558: PPUSH
19559: PPUSH
// result := [ ] ;
19560: LD_ADDR_VAR 0 4
19564: PUSH
19565: EMPTY
19566: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19567: LD_ADDR_VAR 0 5
19571: PUSH
19572: LD_VAR 0 2
19576: PPUSH
19577: LD_INT 21
19579: PUSH
19580: LD_INT 3
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 70
19591: ST_TO_ADDR
// if not tmp then
19592: LD_VAR 0 5
19596: NOT
19597: IFFALSE 19601
// exit ;
19599: GO 19665
// if checkLink then
19601: LD_VAR 0 3
19605: IFFALSE 19655
// begin for i in tmp do
19607: LD_ADDR_VAR 0 6
19611: PUSH
19612: LD_VAR 0 5
19616: PUSH
19617: FOR_IN
19618: IFFALSE 19653
// if GetBase ( i ) <> base then
19620: LD_VAR 0 6
19624: PPUSH
19625: CALL_OW 274
19629: PUSH
19630: LD_VAR 0 1
19634: NONEQUAL
19635: IFFALSE 19651
// ComLinkToBase ( base , i ) ;
19637: LD_VAR 0 1
19641: PPUSH
19642: LD_VAR 0 6
19646: PPUSH
19647: CALL_OW 169
19651: GO 19617
19653: POP
19654: POP
// end ; result := tmp ;
19655: LD_ADDR_VAR 0 4
19659: PUSH
19660: LD_VAR 0 5
19664: ST_TO_ADDR
// end ;
19665: LD_VAR 0 4
19669: RET
// export function ComComplete ( units , b ) ; var i ; begin
19670: LD_INT 0
19672: PPUSH
19673: PPUSH
// if not units then
19674: LD_VAR 0 1
19678: NOT
19679: IFFALSE 19683
// exit ;
19681: GO 19773
// for i in units do
19683: LD_ADDR_VAR 0 4
19687: PUSH
19688: LD_VAR 0 1
19692: PUSH
19693: FOR_IN
19694: IFFALSE 19771
// if BuildingStatus ( b ) = bs_build then
19696: LD_VAR 0 2
19700: PPUSH
19701: CALL_OW 461
19705: PUSH
19706: LD_INT 1
19708: EQUAL
19709: IFFALSE 19769
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19711: LD_VAR 0 4
19715: PPUSH
19716: LD_STRING h
19718: PUSH
19719: LD_VAR 0 2
19723: PPUSH
19724: CALL_OW 250
19728: PUSH
19729: LD_VAR 0 2
19733: PPUSH
19734: CALL_OW 251
19738: PUSH
19739: LD_VAR 0 2
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: LD_INT 0
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: PPUSH
19765: CALL_OW 446
19769: GO 19693
19771: POP
19772: POP
// end ;
19773: LD_VAR 0 3
19777: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19778: LD_INT 0
19780: PPUSH
19781: PPUSH
19782: PPUSH
19783: PPUSH
19784: PPUSH
19785: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19786: LD_VAR 0 1
19790: NOT
19791: IFTRUE 19808
19793: PUSH
19794: LD_VAR 0 1
19798: PPUSH
19799: CALL_OW 263
19803: PUSH
19804: LD_INT 2
19806: NONEQUAL
19807: OR
19808: IFFALSE 19812
// exit ;
19810: GO 20128
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19812: LD_ADDR_VAR 0 6
19816: PUSH
19817: LD_INT 22
19819: PUSH
19820: LD_VAR 0 1
19824: PPUSH
19825: CALL_OW 255
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 30
19839: PUSH
19840: LD_INT 36
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 34
19849: PUSH
19850: LD_INT 31
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 69
19870: ST_TO_ADDR
// if not tmp then
19871: LD_VAR 0 6
19875: NOT
19876: IFFALSE 19880
// exit ;
19878: GO 20128
// result := [ ] ;
19880: LD_ADDR_VAR 0 2
19884: PUSH
19885: EMPTY
19886: ST_TO_ADDR
// for i in tmp do
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_VAR 0 6
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19969
// begin t := UnitsInside ( i ) ;
19900: LD_ADDR_VAR 0 4
19904: PUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: CALL_OW 313
19914: ST_TO_ADDR
// if t then
19915: LD_VAR 0 4
19919: IFFALSE 19967
// for j in t do
19921: LD_ADDR_VAR 0 7
19925: PUSH
19926: LD_VAR 0 4
19930: PUSH
19931: FOR_IN
19932: IFFALSE 19965
// result := Replace ( result , result + 1 , j ) ;
19934: LD_ADDR_VAR 0 2
19938: PUSH
19939: LD_VAR 0 2
19943: PPUSH
19944: LD_VAR 0 2
19948: PUSH
19949: LD_INT 1
19951: PLUS
19952: PPUSH
19953: LD_VAR 0 7
19957: PPUSH
19958: CALL_OW 1
19962: ST_TO_ADDR
19963: GO 19931
19965: POP
19966: POP
// end ;
19967: GO 19897
19969: POP
19970: POP
// if not result then
19971: LD_VAR 0 2
19975: NOT
19976: IFFALSE 19980
// exit ;
19978: GO 20128
// mech := result [ 1 ] ;
19980: LD_ADDR_VAR 0 5
19984: PUSH
19985: LD_VAR 0 2
19989: PUSH
19990: LD_INT 1
19992: ARRAY
19993: ST_TO_ADDR
// if result > 1 then
19994: LD_VAR 0 2
19998: PUSH
19999: LD_INT 1
20001: GREATER
20002: IFFALSE 20114
// begin for i = 2 to result do
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: DOUBLE
20010: LD_INT 2
20012: DEC
20013: ST_TO_ADDR
20014: LD_VAR 0 2
20018: PUSH
20019: FOR_TO
20020: IFFALSE 20112
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20022: LD_ADDR_VAR 0 4
20026: PUSH
20027: LD_VAR 0 2
20031: PUSH
20032: LD_VAR 0 3
20036: ARRAY
20037: PPUSH
20038: LD_INT 3
20040: PPUSH
20041: CALL_OW 259
20045: PUSH
20046: LD_VAR 0 2
20050: PUSH
20051: LD_VAR 0 3
20055: ARRAY
20056: PPUSH
20057: CALL_OW 432
20061: MINUS
20062: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20063: LD_VAR 0 4
20067: PUSH
20068: LD_VAR 0 5
20072: PPUSH
20073: LD_INT 3
20075: PPUSH
20076: CALL_OW 259
20080: PUSH
20081: LD_VAR 0 5
20085: PPUSH
20086: CALL_OW 432
20090: MINUS
20091: GREATEREQUAL
20092: IFFALSE 20110
// mech := result [ i ] ;
20094: LD_ADDR_VAR 0 5
20098: PUSH
20099: LD_VAR 0 2
20103: PUSH
20104: LD_VAR 0 3
20108: ARRAY
20109: ST_TO_ADDR
// end ;
20110: GO 20019
20112: POP
20113: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20114: LD_VAR 0 1
20118: PPUSH
20119: LD_VAR 0 5
20123: PPUSH
20124: CALL_OW 135
// end ;
20128: LD_VAR 0 2
20132: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20133: LD_INT 0
20135: PPUSH
20136: PPUSH
20137: PPUSH
20138: PPUSH
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
20147: PPUSH
// result := [ ] ;
20148: LD_ADDR_VAR 0 7
20152: PUSH
20153: EMPTY
20154: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 266
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: IN
20175: NOT
20176: IFFALSE 20180
// exit ;
20178: GO 21820
// if name then
20180: LD_VAR 0 3
20184: IFFALSE 20200
// SetBName ( base_dep , name ) ;
20186: LD_VAR 0 1
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: CALL_OW 500
// base := GetBase ( base_dep ) ;
20200: LD_ADDR_VAR 0 15
20204: PUSH
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 274
20214: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20215: LD_ADDR_VAR 0 16
20219: PUSH
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 255
20229: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20230: LD_ADDR_VAR 0 17
20234: PUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 248
20244: ST_TO_ADDR
// if sources then
20245: LD_VAR 0 5
20249: IFFALSE 20296
// for i = 1 to 3 do
20251: LD_ADDR_VAR 0 8
20255: PUSH
20256: DOUBLE
20257: LD_INT 1
20259: DEC
20260: ST_TO_ADDR
20261: LD_INT 3
20263: PUSH
20264: FOR_TO
20265: IFFALSE 20294
// AddResourceType ( base , i , sources [ i ] ) ;
20267: LD_VAR 0 15
20271: PPUSH
20272: LD_VAR 0 8
20276: PPUSH
20277: LD_VAR 0 5
20281: PUSH
20282: LD_VAR 0 8
20286: ARRAY
20287: PPUSH
20288: CALL_OW 276
20292: GO 20264
20294: POP
20295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20296: LD_ADDR_VAR 0 18
20300: PUSH
20301: LD_VAR 0 15
20305: PPUSH
20306: LD_VAR 0 2
20310: PPUSH
20311: LD_INT 1
20313: PPUSH
20314: CALL 19555 0 3
20318: ST_TO_ADDR
// InitHc ;
20319: CALL_OW 19
// InitUc ;
20323: CALL_OW 18
// uc_side := side ;
20327: LD_ADDR_OWVAR 20
20331: PUSH
20332: LD_VAR 0 16
20336: ST_TO_ADDR
// uc_nation := nation ;
20337: LD_ADDR_OWVAR 21
20341: PUSH
20342: LD_VAR 0 17
20346: ST_TO_ADDR
// if buildings then
20347: LD_VAR 0 18
20351: IFFALSE 21679
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20353: LD_ADDR_VAR 0 19
20357: PUSH
20358: LD_VAR 0 18
20362: PPUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 30
20368: PUSH
20369: LD_INT 29
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 30
20378: PUSH
20379: LD_INT 30
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: PPUSH
20391: CALL_OW 72
20395: ST_TO_ADDR
// if tmp then
20396: LD_VAR 0 19
20400: IFFALSE 20448
// for i in tmp do
20402: LD_ADDR_VAR 0 8
20406: PUSH
20407: LD_VAR 0 19
20411: PUSH
20412: FOR_IN
20413: IFFALSE 20446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20415: LD_VAR 0 8
20419: PPUSH
20420: CALL_OW 250
20424: PPUSH
20425: LD_VAR 0 8
20429: PPUSH
20430: CALL_OW 251
20434: PPUSH
20435: LD_VAR 0 16
20439: PPUSH
20440: CALL_OW 441
20444: GO 20412
20446: POP
20447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20448: LD_VAR 0 18
20452: PPUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 30
20458: PUSH
20459: LD_INT 32
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 30
20468: PUSH
20469: LD_INT 33
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 72
20485: IFFALSE 20573
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20487: LD_ADDR_VAR 0 8
20491: PUSH
20492: LD_VAR 0 18
20496: PPUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 30
20502: PUSH
20503: LD_INT 32
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 30
20512: PUSH
20513: LD_INT 33
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: PPUSH
20525: CALL_OW 72
20529: PUSH
20530: FOR_IN
20531: IFFALSE 20571
// begin if not GetBWeapon ( i ) then
20533: LD_VAR 0 8
20537: PPUSH
20538: CALL_OW 269
20542: NOT
20543: IFFALSE 20569
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20545: LD_VAR 0 8
20549: PPUSH
20550: LD_VAR 0 8
20554: PPUSH
20555: LD_VAR 0 2
20559: PPUSH
20560: CALL 21825 0 2
20564: PPUSH
20565: CALL_OW 431
// end ;
20569: GO 20530
20571: POP
20572: POP
// end ; for i = 1 to personel do
20573: LD_ADDR_VAR 0 8
20577: PUSH
20578: DOUBLE
20579: LD_INT 1
20581: DEC
20582: ST_TO_ADDR
20583: LD_VAR 0 6
20587: PUSH
20588: FOR_TO
20589: IFFALSE 21659
// begin if i > 4 then
20591: LD_VAR 0 8
20595: PUSH
20596: LD_INT 4
20598: GREATER
20599: IFFALSE 20603
// break ;
20601: GO 21659
// case i of 1 :
20603: LD_VAR 0 8
20607: PUSH
20608: LD_INT 1
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20696
20616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20617: LD_ADDR_VAR 0 12
20621: PUSH
20622: LD_VAR 0 18
20626: PPUSH
20627: LD_INT 22
20629: PUSH
20630: LD_VAR 0 16
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 58
20641: PUSH
20642: EMPTY
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 30
20650: PUSH
20651: LD_INT 32
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 30
20660: PUSH
20661: LD_INT 4
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 30
20670: PUSH
20671: LD_INT 5
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 72
20693: ST_TO_ADDR
20694: GO 20918
20696: LD_INT 2
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20766
20704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20705: LD_ADDR_VAR 0 12
20709: PUSH
20710: LD_VAR 0 18
20714: PPUSH
20715: LD_INT 22
20717: PUSH
20718: LD_VAR 0 16
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: LD_INT 30
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 30
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 72
20763: ST_TO_ADDR
20764: GO 20918
20766: LD_INT 3
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20836
20774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20775: LD_ADDR_VAR 0 12
20779: PUSH
20780: LD_VAR 0 18
20784: PPUSH
20785: LD_INT 22
20787: PUSH
20788: LD_VAR 0 16
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 30
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 30
20812: PUSH
20813: LD_INT 3
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PPUSH
20829: CALL_OW 72
20833: ST_TO_ADDR
20834: GO 20918
20836: LD_INT 4
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20917
20844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20845: LD_ADDR_VAR 0 12
20849: PUSH
20850: LD_VAR 0 18
20854: PPUSH
20855: LD_INT 22
20857: PUSH
20858: LD_VAR 0 16
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: LD_INT 30
20872: PUSH
20873: LD_INT 6
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 30
20882: PUSH
20883: LD_INT 7
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 30
20892: PUSH
20893: LD_INT 8
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: CALL_OW 72
20914: ST_TO_ADDR
20915: GO 20918
20917: POP
// if i = 1 then
20918: LD_VAR 0 8
20922: PUSH
20923: LD_INT 1
20925: EQUAL
20926: IFFALSE 21037
// begin tmp := [ ] ;
20928: LD_ADDR_VAR 0 19
20932: PUSH
20933: EMPTY
20934: ST_TO_ADDR
// for j in f do
20935: LD_ADDR_VAR 0 9
20939: PUSH
20940: LD_VAR 0 12
20944: PUSH
20945: FOR_IN
20946: IFFALSE 21019
// if GetBType ( j ) = b_bunker then
20948: LD_VAR 0 9
20952: PPUSH
20953: CALL_OW 266
20957: PUSH
20958: LD_INT 32
20960: EQUAL
20961: IFFALSE 20988
// tmp := Insert ( tmp , 1 , j ) else
20963: LD_ADDR_VAR 0 19
20967: PUSH
20968: LD_VAR 0 19
20972: PPUSH
20973: LD_INT 1
20975: PPUSH
20976: LD_VAR 0 9
20980: PPUSH
20981: CALL_OW 2
20985: ST_TO_ADDR
20986: GO 21017
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20988: LD_ADDR_VAR 0 19
20992: PUSH
20993: LD_VAR 0 19
20997: PPUSH
20998: LD_VAR 0 19
21002: PUSH
21003: LD_INT 1
21005: PLUS
21006: PPUSH
21007: LD_VAR 0 9
21011: PPUSH
21012: CALL_OW 2
21016: ST_TO_ADDR
21017: GO 20945
21019: POP
21020: POP
// if tmp then
21021: LD_VAR 0 19
21025: IFFALSE 21037
// f := tmp ;
21027: LD_ADDR_VAR 0 12
21031: PUSH
21032: LD_VAR 0 19
21036: ST_TO_ADDR
// end ; x := personel [ i ] ;
21037: LD_ADDR_VAR 0 13
21041: PUSH
21042: LD_VAR 0 6
21046: PUSH
21047: LD_VAR 0 8
21051: ARRAY
21052: ST_TO_ADDR
// if x = - 1 then
21053: LD_VAR 0 13
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: EQUAL
21062: IFFALSE 21273
// begin for j in f do
21064: LD_ADDR_VAR 0 9
21068: PUSH
21069: LD_VAR 0 12
21073: PUSH
21074: FOR_IN
21075: IFFALSE 21269
// repeat InitHc ;
21077: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21081: LD_VAR 0 9
21085: PPUSH
21086: CALL_OW 266
21090: PUSH
21091: LD_INT 5
21093: EQUAL
21094: IFFALSE 21164
// begin if UnitsInside ( j ) < 3 then
21096: LD_VAR 0 9
21100: PPUSH
21101: CALL_OW 313
21105: PUSH
21106: LD_INT 3
21108: LESS
21109: IFFALSE 21145
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21111: LD_INT 0
21113: PPUSH
21114: LD_INT 5
21116: PUSH
21117: LD_INT 8
21119: PUSH
21120: LD_INT 9
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_VAR 0 17
21132: ARRAY
21133: PPUSH
21134: LD_VAR 0 4
21138: PPUSH
21139: CALL_OW 380
21143: GO 21162
// PrepareHuman ( false , i , skill ) ;
21145: LD_INT 0
21147: PPUSH
21148: LD_VAR 0 8
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: CALL_OW 380
// end else
21162: GO 21181
// PrepareHuman ( false , i , skill ) ;
21164: LD_INT 0
21166: PPUSH
21167: LD_VAR 0 8
21171: PPUSH
21172: LD_VAR 0 4
21176: PPUSH
21177: CALL_OW 380
// un := CreateHuman ;
21181: LD_ADDR_VAR 0 14
21185: PUSH
21186: CALL_OW 44
21190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21191: LD_ADDR_VAR 0 7
21195: PUSH
21196: LD_VAR 0 7
21200: PPUSH
21201: LD_INT 1
21203: PPUSH
21204: LD_VAR 0 14
21208: PPUSH
21209: CALL_OW 2
21213: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21214: LD_VAR 0 14
21218: PPUSH
21219: LD_VAR 0 9
21223: PPUSH
21224: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21228: LD_VAR 0 9
21232: PPUSH
21233: CALL_OW 313
21237: PUSH
21238: LD_INT 6
21240: EQUAL
21241: IFTRUE 21265
21243: PUSH
21244: LD_VAR 0 9
21248: PPUSH
21249: CALL_OW 266
21253: PUSH
21254: LD_INT 32
21256: PUSH
21257: LD_INT 31
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: IN
21264: OR
21265: IFFALSE 21077
21267: GO 21074
21269: POP
21270: POP
// end else
21271: GO 21657
// for j = 1 to x do
21273: LD_ADDR_VAR 0 9
21277: PUSH
21278: DOUBLE
21279: LD_INT 1
21281: DEC
21282: ST_TO_ADDR
21283: LD_VAR 0 13
21287: PUSH
21288: FOR_TO
21289: IFFALSE 21655
// begin InitHc ;
21291: CALL_OW 19
// if not f then
21295: LD_VAR 0 12
21299: NOT
21300: IFFALSE 21389
// begin PrepareHuman ( false , i , skill ) ;
21302: LD_INT 0
21304: PPUSH
21305: LD_VAR 0 8
21309: PPUSH
21310: LD_VAR 0 4
21314: PPUSH
21315: CALL_OW 380
// un := CreateHuman ;
21319: LD_ADDR_VAR 0 14
21323: PUSH
21324: CALL_OW 44
21328: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21329: LD_ADDR_VAR 0 7
21333: PUSH
21334: LD_VAR 0 7
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: LD_VAR 0 14
21346: PPUSH
21347: CALL_OW 2
21351: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21352: LD_VAR 0 14
21356: PPUSH
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL_OW 250
21366: PPUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL_OW 251
21376: PPUSH
21377: LD_INT 10
21379: PPUSH
21380: LD_INT 0
21382: PPUSH
21383: CALL_OW 50
// continue ;
21387: GO 21288
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21389: LD_VAR 0 12
21393: PUSH
21394: LD_INT 1
21396: ARRAY
21397: PPUSH
21398: CALL_OW 313
21402: IFFALSE 21430
21404: PUSH
21405: LD_VAR 0 12
21409: PUSH
21410: LD_INT 1
21412: ARRAY
21413: PPUSH
21414: CALL_OW 266
21418: PUSH
21419: LD_INT 32
21421: PUSH
21422: LD_INT 31
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: IN
21429: AND
21430: IFTRUE 21451
21432: PUSH
21433: LD_VAR 0 12
21437: PUSH
21438: LD_INT 1
21440: ARRAY
21441: PPUSH
21442: CALL_OW 313
21446: PUSH
21447: LD_INT 6
21449: EQUAL
21450: OR
21451: IFFALSE 21471
// f := Delete ( f , 1 ) ;
21453: LD_ADDR_VAR 0 12
21457: PUSH
21458: LD_VAR 0 12
21462: PPUSH
21463: LD_INT 1
21465: PPUSH
21466: CALL_OW 3
21470: ST_TO_ADDR
// if not f then
21471: LD_VAR 0 12
21475: NOT
21476: IFFALSE 21494
// begin x := x + 2 ;
21478: LD_ADDR_VAR 0 13
21482: PUSH
21483: LD_VAR 0 13
21487: PUSH
21488: LD_INT 2
21490: PLUS
21491: ST_TO_ADDR
// continue ;
21492: GO 21288
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21494: LD_VAR 0 12
21498: PUSH
21499: LD_INT 1
21501: ARRAY
21502: PPUSH
21503: CALL_OW 266
21507: PUSH
21508: LD_INT 5
21510: EQUAL
21511: IFFALSE 21585
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21513: LD_VAR 0 12
21517: PUSH
21518: LD_INT 1
21520: ARRAY
21521: PPUSH
21522: CALL_OW 313
21526: PUSH
21527: LD_INT 3
21529: LESS
21530: IFFALSE 21566
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21532: LD_INT 0
21534: PPUSH
21535: LD_INT 5
21537: PUSH
21538: LD_INT 8
21540: PUSH
21541: LD_INT 9
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: LIST
21548: PUSH
21549: LD_VAR 0 17
21553: ARRAY
21554: PPUSH
21555: LD_VAR 0 4
21559: PPUSH
21560: CALL_OW 380
21564: GO 21583
// PrepareHuman ( false , i , skill ) ;
21566: LD_INT 0
21568: PPUSH
21569: LD_VAR 0 8
21573: PPUSH
21574: LD_VAR 0 4
21578: PPUSH
21579: CALL_OW 380
// end else
21583: GO 21602
// PrepareHuman ( false , i , skill ) ;
21585: LD_INT 0
21587: PPUSH
21588: LD_VAR 0 8
21592: PPUSH
21593: LD_VAR 0 4
21597: PPUSH
21598: CALL_OW 380
// un := CreateHuman ;
21602: LD_ADDR_VAR 0 14
21606: PUSH
21607: CALL_OW 44
21611: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21612: LD_ADDR_VAR 0 7
21616: PUSH
21617: LD_VAR 0 7
21621: PPUSH
21622: LD_INT 1
21624: PPUSH
21625: LD_VAR 0 14
21629: PPUSH
21630: CALL_OW 2
21634: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21635: LD_VAR 0 14
21639: PPUSH
21640: LD_VAR 0 12
21644: PUSH
21645: LD_INT 1
21647: ARRAY
21648: PPUSH
21649: CALL_OW 52
// end ;
21653: GO 21288
21655: POP
21656: POP
// end ;
21657: GO 20588
21659: POP
21660: POP
// result := result ^ buildings ;
21661: LD_ADDR_VAR 0 7
21665: PUSH
21666: LD_VAR 0 7
21670: PUSH
21671: LD_VAR 0 18
21675: ADD
21676: ST_TO_ADDR
// end else
21677: GO 21820
// begin for i = 1 to personel do
21679: LD_ADDR_VAR 0 8
21683: PUSH
21684: DOUBLE
21685: LD_INT 1
21687: DEC
21688: ST_TO_ADDR
21689: LD_VAR 0 6
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21818
// begin if i > 4 then
21697: LD_VAR 0 8
21701: PUSH
21702: LD_INT 4
21704: GREATER
21705: IFFALSE 21709
// break ;
21707: GO 21818
// x := personel [ i ] ;
21709: LD_ADDR_VAR 0 13
21713: PUSH
21714: LD_VAR 0 6
21718: PUSH
21719: LD_VAR 0 8
21723: ARRAY
21724: ST_TO_ADDR
// if x = - 1 then
21725: LD_VAR 0 13
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: EQUAL
21734: IFFALSE 21738
// continue ;
21736: GO 21694
// PrepareHuman ( false , i , skill ) ;
21738: LD_INT 0
21740: PPUSH
21741: LD_VAR 0 8
21745: PPUSH
21746: LD_VAR 0 4
21750: PPUSH
21751: CALL_OW 380
// un := CreateHuman ;
21755: LD_ADDR_VAR 0 14
21759: PUSH
21760: CALL_OW 44
21764: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21765: LD_VAR 0 14
21769: PPUSH
21770: LD_VAR 0 1
21774: PPUSH
21775: CALL_OW 250
21779: PPUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 251
21789: PPUSH
21790: LD_INT 10
21792: PPUSH
21793: LD_INT 0
21795: PPUSH
21796: CALL_OW 50
// result := result ^ un ;
21800: LD_ADDR_VAR 0 7
21804: PUSH
21805: LD_VAR 0 7
21809: PUSH
21810: LD_VAR 0 14
21814: ADD
21815: ST_TO_ADDR
// end ;
21816: GO 21694
21818: POP
21819: POP
// end ; end ;
21820: LD_VAR 0 7
21824: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
// result := false ;
21843: LD_ADDR_VAR 0 3
21847: PUSH
21848: LD_INT 0
21850: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21851: LD_VAR 0 1
21855: NOT
21856: IFTRUE 21881
21858: PUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 266
21868: PUSH
21869: LD_INT 32
21871: PUSH
21872: LD_INT 33
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: IN
21879: NOT
21880: OR
21881: IFFALSE 21885
// exit ;
21883: GO 23020
// nat := GetNation ( tower ) ;
21885: LD_ADDR_VAR 0 12
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 248
21899: ST_TO_ADDR
// side := GetSide ( tower ) ;
21900: LD_ADDR_VAR 0 16
21904: PUSH
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 255
21914: ST_TO_ADDR
// x := GetX ( tower ) ;
21915: LD_ADDR_VAR 0 10
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: CALL_OW 250
21929: ST_TO_ADDR
// y := GetY ( tower ) ;
21930: LD_ADDR_VAR 0 11
21934: PUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 251
21944: ST_TO_ADDR
// if not x or not y then
21945: LD_VAR 0 10
21949: NOT
21950: IFTRUE 21959
21952: PUSH
21953: LD_VAR 0 11
21957: NOT
21958: OR
21959: IFFALSE 21963
// exit ;
21961: GO 23020
// weapon := 0 ;
21963: LD_ADDR_VAR 0 18
21967: PUSH
21968: LD_INT 0
21970: ST_TO_ADDR
// fac_list := [ ] ;
21971: LD_ADDR_VAR 0 17
21975: PUSH
21976: EMPTY
21977: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21978: LD_ADDR_VAR 0 6
21982: PUSH
21983: LD_VAR 0 1
21987: PPUSH
21988: CALL_OW 274
21992: PPUSH
21993: LD_VAR 0 2
21997: PPUSH
21998: LD_INT 0
22000: PPUSH
22001: CALL 19555 0 3
22005: PPUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 3
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PPUSH
22016: CALL_OW 72
22020: ST_TO_ADDR
// if not factories then
22021: LD_VAR 0 6
22025: NOT
22026: IFFALSE 22030
// exit ;
22028: GO 23020
// for i in factories do
22030: LD_ADDR_VAR 0 8
22034: PUSH
22035: LD_VAR 0 6
22039: PUSH
22040: FOR_IN
22041: IFFALSE 22066
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22043: LD_ADDR_VAR 0 17
22047: PUSH
22048: LD_VAR 0 17
22052: PUSH
22053: LD_VAR 0 8
22057: PPUSH
22058: CALL_OW 478
22062: UNION
22063: ST_TO_ADDR
22064: GO 22040
22066: POP
22067: POP
// if not fac_list then
22068: LD_VAR 0 17
22072: NOT
22073: IFFALSE 22077
// exit ;
22075: GO 23020
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22077: LD_ADDR_VAR 0 5
22081: PUSH
22082: LD_INT 4
22084: PUSH
22085: LD_INT 5
22087: PUSH
22088: LD_INT 9
22090: PUSH
22091: LD_INT 10
22093: PUSH
22094: LD_INT 6
22096: PUSH
22097: LD_INT 7
22099: PUSH
22100: LD_INT 11
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 27
22114: PUSH
22115: LD_INT 28
22117: PUSH
22118: LD_INT 26
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 43
22132: PUSH
22133: LD_INT 44
22135: PUSH
22136: LD_INT 46
22138: PUSH
22139: LD_INT 45
22141: PUSH
22142: LD_INT 47
22144: PUSH
22145: LD_INT 49
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: PUSH
22161: LD_VAR 0 12
22165: ARRAY
22166: ST_TO_ADDR
// list := list isect fac_list ;
22167: LD_ADDR_VAR 0 5
22171: PUSH
22172: LD_VAR 0 5
22176: PUSH
22177: LD_VAR 0 17
22181: ISECT
22182: ST_TO_ADDR
// if not list then
22183: LD_VAR 0 5
22187: NOT
22188: IFFALSE 22192
// exit ;
22190: GO 23020
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22192: LD_VAR 0 12
22196: PUSH
22197: LD_INT 3
22199: EQUAL
22200: IFFALSE 22212
22202: PUSH
22203: LD_INT 49
22205: PUSH
22206: LD_VAR 0 5
22210: IN
22211: AND
22212: IFFALSE 22232
22214: PUSH
22215: LD_INT 31
22217: PPUSH
22218: LD_VAR 0 16
22222: PPUSH
22223: CALL_OW 321
22227: PUSH
22228: LD_INT 2
22230: EQUAL
22231: AND
22232: IFFALSE 22292
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22234: LD_INT 22
22236: PUSH
22237: LD_VAR 0 16
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 35
22248: PUSH
22249: LD_INT 49
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 91
22258: PUSH
22259: LD_VAR 0 1
22263: PUSH
22264: LD_INT 10
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: PPUSH
22277: CALL_OW 69
22281: NOT
22282: IFFALSE 22292
// weapon := ru_time_lapser ;
22284: LD_ADDR_VAR 0 18
22288: PUSH
22289: LD_INT 49
22291: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22292: LD_VAR 0 12
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: IN
22307: IFFALSE 22331
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_VAR 0 5
22317: IN
22318: IFTRUE 22330
22320: PUSH
22321: LD_INT 30
22323: PUSH
22324: LD_VAR 0 5
22328: IN
22329: OR
22330: AND
22331: IFFALSE 22351
22333: PUSH
22334: LD_INT 6
22336: PPUSH
22337: LD_VAR 0 16
22341: PPUSH
22342: CALL_OW 321
22346: PUSH
22347: LD_INT 2
22349: EQUAL
22350: AND
22351: IFFALSE 22518
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22353: LD_INT 22
22355: PUSH
22356: LD_VAR 0 16
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: LD_INT 35
22370: PUSH
22371: LD_INT 11
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 35
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 91
22395: PUSH
22396: LD_VAR 0 1
22400: PUSH
22401: LD_INT 18
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: PPUSH
22414: CALL_OW 69
22418: NOT
22419: IFFALSE 22495
22421: PUSH
22422: LD_INT 22
22424: PUSH
22425: LD_VAR 0 16
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: LD_INT 30
22439: PUSH
22440: LD_INT 32
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 30
22449: PUSH
22450: LD_INT 33
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 91
22464: PUSH
22465: LD_VAR 0 1
22469: PUSH
22470: LD_INT 12
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: PPUSH
22486: CALL_OW 69
22490: PUSH
22491: LD_INT 2
22493: GREATER
22494: AND
22495: IFFALSE 22518
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22497: LD_ADDR_VAR 0 18
22501: PUSH
22502: LD_INT 11
22504: PUSH
22505: LD_INT 30
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_VAR 0 12
22516: ARRAY
22517: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22518: LD_VAR 0 18
22522: NOT
22523: IFFALSE 22543
22525: PUSH
22526: LD_INT 40
22528: PPUSH
22529: LD_VAR 0 16
22533: PPUSH
22534: CALL_OW 321
22538: PUSH
22539: LD_INT 2
22541: EQUAL
22542: AND
22543: IFFALSE 22579
22545: PUSH
22546: LD_INT 7
22548: PUSH
22549: LD_VAR 0 5
22553: IN
22554: IFTRUE 22566
22556: PUSH
22557: LD_INT 28
22559: PUSH
22560: LD_VAR 0 5
22564: IN
22565: OR
22566: IFTRUE 22578
22568: PUSH
22569: LD_INT 45
22571: PUSH
22572: LD_VAR 0 5
22576: IN
22577: OR
22578: AND
22579: IFFALSE 22833
// begin hex := GetHexInfo ( x , y ) ;
22581: LD_ADDR_VAR 0 4
22585: PUSH
22586: LD_VAR 0 10
22590: PPUSH
22591: LD_VAR 0 11
22595: PPUSH
22596: CALL_OW 546
22600: ST_TO_ADDR
// if hex [ 1 ] then
22601: LD_VAR 0 4
22605: PUSH
22606: LD_INT 1
22608: ARRAY
22609: IFFALSE 22613
// exit ;
22611: GO 23020
// height := hex [ 2 ] ;
22613: LD_ADDR_VAR 0 15
22617: PUSH
22618: LD_VAR 0 4
22622: PUSH
22623: LD_INT 2
22625: ARRAY
22626: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22627: LD_ADDR_VAR 0 14
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 5
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: ST_TO_ADDR
// for i in tmp do
22650: LD_ADDR_VAR 0 8
22654: PUSH
22655: LD_VAR 0 14
22659: PUSH
22660: FOR_IN
22661: IFFALSE 22831
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22663: LD_ADDR_VAR 0 9
22667: PUSH
22668: LD_VAR 0 10
22672: PPUSH
22673: LD_VAR 0 8
22677: PPUSH
22678: LD_INT 5
22680: PPUSH
22681: CALL_OW 272
22685: PUSH
22686: LD_VAR 0 11
22690: PPUSH
22691: LD_VAR 0 8
22695: PPUSH
22696: LD_INT 5
22698: PPUSH
22699: CALL_OW 273
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22708: LD_VAR 0 9
22712: PUSH
22713: LD_INT 1
22715: ARRAY
22716: PPUSH
22717: LD_VAR 0 9
22721: PUSH
22722: LD_INT 2
22724: ARRAY
22725: PPUSH
22726: CALL_OW 488
22730: IFFALSE 22829
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22732: LD_ADDR_VAR 0 4
22736: PUSH
22737: LD_VAR 0 9
22741: PUSH
22742: LD_INT 1
22744: ARRAY
22745: PPUSH
22746: LD_VAR 0 9
22750: PUSH
22751: LD_INT 2
22753: ARRAY
22754: PPUSH
22755: CALL_OW 546
22759: ST_TO_ADDR
// if hex [ 1 ] then
22760: LD_VAR 0 4
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: IFFALSE 22772
// continue ;
22770: GO 22660
// h := hex [ 2 ] ;
22772: LD_ADDR_VAR 0 13
22776: PUSH
22777: LD_VAR 0 4
22781: PUSH
22782: LD_INT 2
22784: ARRAY
22785: ST_TO_ADDR
// if h + 7 < height then
22786: LD_VAR 0 13
22790: PUSH
22791: LD_INT 7
22793: PLUS
22794: PUSH
22795: LD_VAR 0 15
22799: LESS
22800: IFFALSE 22829
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22802: LD_ADDR_VAR 0 18
22806: PUSH
22807: LD_INT 7
22809: PUSH
22810: LD_INT 28
22812: PUSH
22813: LD_INT 45
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: PUSH
22821: LD_VAR 0 12
22825: ARRAY
22826: ST_TO_ADDR
// break ;
22827: GO 22831
// end ; end ; end ;
22829: GO 22660
22831: POP
22832: POP
// end ; if not weapon then
22833: LD_VAR 0 18
22837: NOT
22838: IFFALSE 22898
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22840: LD_ADDR_VAR 0 5
22844: PUSH
22845: LD_VAR 0 5
22849: PUSH
22850: LD_INT 11
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 49
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: DIFF
22864: ST_TO_ADDR
// if not list then
22865: LD_VAR 0 5
22869: NOT
22870: IFFALSE 22874
// exit ;
22872: GO 23020
// weapon := list [ rand ( 1 , list ) ] ;
22874: LD_ADDR_VAR 0 18
22878: PUSH
22879: LD_VAR 0 5
22883: PUSH
22884: LD_INT 1
22886: PPUSH
22887: LD_VAR 0 5
22891: PPUSH
22892: CALL_OW 12
22896: ARRAY
22897: ST_TO_ADDR
// end ; if weapon then
22898: LD_VAR 0 18
22902: IFFALSE 23020
// begin tmp := CostOfWeapon ( weapon ) ;
22904: LD_ADDR_VAR 0 14
22908: PUSH
22909: LD_VAR 0 18
22913: PPUSH
22914: CALL_OW 451
22918: ST_TO_ADDR
// j := GetBase ( tower ) ;
22919: LD_ADDR_VAR 0 9
22923: PUSH
22924: LD_VAR 0 1
22928: PPUSH
22929: CALL_OW 274
22933: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22934: LD_VAR 0 9
22938: PPUSH
22939: LD_INT 1
22941: PPUSH
22942: CALL_OW 275
22946: PUSH
22947: LD_VAR 0 14
22951: PUSH
22952: LD_INT 1
22954: ARRAY
22955: GREATEREQUAL
22956: IFFALSE 22982
22958: PUSH
22959: LD_VAR 0 9
22963: PPUSH
22964: LD_INT 2
22966: PPUSH
22967: CALL_OW 275
22971: PUSH
22972: LD_VAR 0 14
22976: PUSH
22977: LD_INT 2
22979: ARRAY
22980: GREATEREQUAL
22981: AND
22982: IFFALSE 23008
22984: PUSH
22985: LD_VAR 0 9
22989: PPUSH
22990: LD_INT 3
22992: PPUSH
22993: CALL_OW 275
22997: PUSH
22998: LD_VAR 0 14
23002: PUSH
23003: LD_INT 3
23005: ARRAY
23006: GREATEREQUAL
23007: AND
23008: IFFALSE 23020
// result := weapon ;
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_VAR 0 18
23019: ST_TO_ADDR
// end ; end ;
23020: LD_VAR 0 3
23024: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
// result := true ;
23029: LD_ADDR_VAR 0 3
23033: PUSH
23034: LD_INT 1
23036: ST_TO_ADDR
// if array1 = array2 then
23037: LD_VAR 0 1
23041: PUSH
23042: LD_VAR 0 2
23046: EQUAL
23047: IFFALSE 23107
// begin for i = 1 to array1 do
23049: LD_ADDR_VAR 0 4
23053: PUSH
23054: DOUBLE
23055: LD_INT 1
23057: DEC
23058: ST_TO_ADDR
23059: LD_VAR 0 1
23063: PUSH
23064: FOR_TO
23065: IFFALSE 23103
// if array1 [ i ] <> array2 [ i ] then
23067: LD_VAR 0 1
23071: PUSH
23072: LD_VAR 0 4
23076: ARRAY
23077: PUSH
23078: LD_VAR 0 2
23082: PUSH
23083: LD_VAR 0 4
23087: ARRAY
23088: NONEQUAL
23089: IFFALSE 23101
// begin result := false ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_INT 0
23098: ST_TO_ADDR
// break ;
23099: GO 23103
// end ;
23101: GO 23064
23103: POP
23104: POP
// end else
23105: GO 23115
// result := false ;
23107: LD_ADDR_VAR 0 3
23111: PUSH
23112: LD_INT 0
23114: ST_TO_ADDR
// end ;
23115: LD_VAR 0 3
23119: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23120: LD_INT 0
23122: PPUSH
23123: PPUSH
// if not array1 or not array2 then
23124: LD_VAR 0 1
23128: NOT
23129: IFTRUE 23138
23131: PUSH
23132: LD_VAR 0 2
23136: NOT
23137: OR
23138: IFFALSE 23142
// exit ;
23140: GO 23206
// result := true ;
23142: LD_ADDR_VAR 0 3
23146: PUSH
23147: LD_INT 1
23149: ST_TO_ADDR
// for i = 1 to array1 do
23150: LD_ADDR_VAR 0 4
23154: PUSH
23155: DOUBLE
23156: LD_INT 1
23158: DEC
23159: ST_TO_ADDR
23160: LD_VAR 0 1
23164: PUSH
23165: FOR_TO
23166: IFFALSE 23204
// if array1 [ i ] <> array2 [ i ] then
23168: LD_VAR 0 1
23172: PUSH
23173: LD_VAR 0 4
23177: ARRAY
23178: PUSH
23179: LD_VAR 0 2
23183: PUSH
23184: LD_VAR 0 4
23188: ARRAY
23189: NONEQUAL
23190: IFFALSE 23202
// begin result := false ;
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_INT 0
23199: ST_TO_ADDR
// break ;
23200: GO 23204
// end ;
23202: GO 23165
23204: POP
23205: POP
// end ;
23206: LD_VAR 0 3
23210: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23211: LD_INT 0
23213: PPUSH
23214: PPUSH
23215: PPUSH
// pom := GetBase ( fac ) ;
23216: LD_ADDR_VAR 0 5
23220: PUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 274
23230: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23231: LD_ADDR_VAR 0 4
23235: PUSH
23236: LD_VAR 0 2
23240: PUSH
23241: LD_INT 1
23243: ARRAY
23244: PPUSH
23245: LD_VAR 0 2
23249: PUSH
23250: LD_INT 2
23252: ARRAY
23253: PPUSH
23254: LD_VAR 0 2
23258: PUSH
23259: LD_INT 3
23261: ARRAY
23262: PPUSH
23263: LD_VAR 0 2
23267: PUSH
23268: LD_INT 4
23270: ARRAY
23271: PPUSH
23272: CALL_OW 449
23276: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23277: LD_ADDR_VAR 0 3
23281: PUSH
23282: LD_VAR 0 5
23286: PPUSH
23287: LD_INT 1
23289: PPUSH
23290: CALL_OW 275
23294: PUSH
23295: LD_VAR 0 4
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: GREATEREQUAL
23304: IFFALSE 23330
23306: PUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: LD_INT 2
23314: PPUSH
23315: CALL_OW 275
23319: PUSH
23320: LD_VAR 0 4
23324: PUSH
23325: LD_INT 2
23327: ARRAY
23328: GREATEREQUAL
23329: AND
23330: IFFALSE 23356
23332: PUSH
23333: LD_VAR 0 5
23337: PPUSH
23338: LD_INT 3
23340: PPUSH
23341: CALL_OW 275
23345: PUSH
23346: LD_VAR 0 4
23350: PUSH
23351: LD_INT 3
23353: ARRAY
23354: GREATEREQUAL
23355: AND
23356: ST_TO_ADDR
// end ;
23357: LD_VAR 0 3
23361: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23362: LD_INT 0
23364: PPUSH
23365: PPUSH
23366: PPUSH
23367: PPUSH
// pom := GetBase ( building ) ;
23368: LD_ADDR_VAR 0 3
23372: PUSH
23373: LD_VAR 0 1
23377: PPUSH
23378: CALL_OW 274
23382: ST_TO_ADDR
// if not pom then
23383: LD_VAR 0 3
23387: NOT
23388: IFFALSE 23392
// exit ;
23390: GO 23566
// btype := GetBType ( building ) ;
23392: LD_ADDR_VAR 0 5
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 266
23406: ST_TO_ADDR
// if btype = b_armoury then
23407: LD_VAR 0 5
23411: PUSH
23412: LD_INT 4
23414: EQUAL
23415: IFFALSE 23425
// btype := b_barracks ;
23417: LD_ADDR_VAR 0 5
23421: PUSH
23422: LD_INT 5
23424: ST_TO_ADDR
// if btype = b_depot then
23425: LD_VAR 0 5
23429: PUSH
23430: LD_INT 0
23432: EQUAL
23433: IFFALSE 23443
// btype := b_warehouse ;
23435: LD_ADDR_VAR 0 5
23439: PUSH
23440: LD_INT 1
23442: ST_TO_ADDR
// if btype = b_workshop then
23443: LD_VAR 0 5
23447: PUSH
23448: LD_INT 2
23450: EQUAL
23451: IFFALSE 23461
// btype := b_factory ;
23453: LD_ADDR_VAR 0 5
23457: PUSH
23458: LD_INT 3
23460: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23461: LD_ADDR_VAR 0 4
23465: PUSH
23466: LD_VAR 0 5
23470: PPUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL_OW 248
23480: PPUSH
23481: CALL_OW 450
23485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_VAR 0 3
23495: PPUSH
23496: LD_INT 1
23498: PPUSH
23499: CALL_OW 275
23503: PUSH
23504: LD_VAR 0 4
23508: PUSH
23509: LD_INT 1
23511: ARRAY
23512: GREATEREQUAL
23513: IFFALSE 23539
23515: PUSH
23516: LD_VAR 0 3
23520: PPUSH
23521: LD_INT 2
23523: PPUSH
23524: CALL_OW 275
23528: PUSH
23529: LD_VAR 0 4
23533: PUSH
23534: LD_INT 2
23536: ARRAY
23537: GREATEREQUAL
23538: AND
23539: IFFALSE 23565
23541: PUSH
23542: LD_VAR 0 3
23546: PPUSH
23547: LD_INT 3
23549: PPUSH
23550: CALL_OW 275
23554: PUSH
23555: LD_VAR 0 4
23559: PUSH
23560: LD_INT 3
23562: ARRAY
23563: GREATEREQUAL
23564: AND
23565: ST_TO_ADDR
// end ;
23566: LD_VAR 0 2
23570: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23571: LD_INT 0
23573: PPUSH
23574: PPUSH
23575: PPUSH
// pom := GetBase ( building ) ;
23576: LD_ADDR_VAR 0 4
23580: PUSH
23581: LD_VAR 0 1
23585: PPUSH
23586: CALL_OW 274
23590: ST_TO_ADDR
// if not pom then
23591: LD_VAR 0 4
23595: NOT
23596: IFFALSE 23600
// exit ;
23598: GO 23705
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23600: LD_ADDR_VAR 0 5
23604: PUSH
23605: LD_VAR 0 2
23609: PPUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL_OW 248
23619: PPUSH
23620: CALL_OW 450
23624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23625: LD_ADDR_VAR 0 3
23629: PUSH
23630: LD_VAR 0 4
23634: PPUSH
23635: LD_INT 1
23637: PPUSH
23638: CALL_OW 275
23642: PUSH
23643: LD_VAR 0 5
23647: PUSH
23648: LD_INT 1
23650: ARRAY
23651: GREATEREQUAL
23652: IFFALSE 23678
23654: PUSH
23655: LD_VAR 0 4
23659: PPUSH
23660: LD_INT 2
23662: PPUSH
23663: CALL_OW 275
23667: PUSH
23668: LD_VAR 0 5
23672: PUSH
23673: LD_INT 2
23675: ARRAY
23676: GREATEREQUAL
23677: AND
23678: IFFALSE 23704
23680: PUSH
23681: LD_VAR 0 4
23685: PPUSH
23686: LD_INT 3
23688: PPUSH
23689: CALL_OW 275
23693: PUSH
23694: LD_VAR 0 5
23698: PUSH
23699: LD_INT 3
23701: ARRAY
23702: GREATEREQUAL
23703: AND
23704: ST_TO_ADDR
// end ;
23705: LD_VAR 0 3
23709: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23710: LD_INT 0
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
// result := false ;
23723: LD_ADDR_VAR 0 8
23727: PUSH
23728: LD_INT 0
23730: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23731: LD_VAR 0 5
23735: NOT
23736: IFTRUE 23745
23738: PUSH
23739: LD_VAR 0 1
23743: NOT
23744: OR
23745: IFTRUE 23754
23747: PUSH
23748: LD_VAR 0 2
23752: NOT
23753: OR
23754: IFTRUE 23763
23756: PUSH
23757: LD_VAR 0 3
23761: NOT
23762: OR
23763: IFFALSE 23767
// exit ;
23765: GO 24593
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23767: LD_ADDR_VAR 0 14
23771: PUSH
23772: LD_VAR 0 1
23776: PPUSH
23777: LD_VAR 0 2
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_VAR 0 4
23791: PPUSH
23792: LD_VAR 0 5
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: CALL_OW 248
23805: PPUSH
23806: LD_INT 0
23808: PPUSH
23809: CALL 25874 0 6
23813: ST_TO_ADDR
// if not hexes then
23814: LD_VAR 0 14
23818: NOT
23819: IFFALSE 23823
// exit ;
23821: GO 24593
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23823: LD_ADDR_VAR 0 17
23827: PUSH
23828: LD_VAR 0 5
23832: PPUSH
23833: LD_INT 22
23835: PUSH
23836: LD_VAR 0 13
23840: PPUSH
23841: CALL_OW 255
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 30
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 72
23886: ST_TO_ADDR
// for i = 1 to hexes do
23887: LD_ADDR_VAR 0 9
23891: PUSH
23892: DOUBLE
23893: LD_INT 1
23895: DEC
23896: ST_TO_ADDR
23897: LD_VAR 0 14
23901: PUSH
23902: FOR_TO
23903: IFFALSE 24591
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23905: LD_ADDR_VAR 0 13
23909: PUSH
23910: LD_VAR 0 14
23914: PUSH
23915: LD_VAR 0 9
23919: ARRAY
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PPUSH
23925: LD_VAR 0 14
23929: PUSH
23930: LD_VAR 0 9
23934: ARRAY
23935: PUSH
23936: LD_INT 2
23938: ARRAY
23939: PPUSH
23940: CALL_OW 428
23944: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23945: LD_VAR 0 14
23949: PUSH
23950: LD_VAR 0 9
23954: ARRAY
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: PPUSH
23960: LD_VAR 0 14
23964: PUSH
23965: LD_VAR 0 9
23969: ARRAY
23970: PUSH
23971: LD_INT 2
23973: ARRAY
23974: PPUSH
23975: CALL_OW 351
23979: IFTRUE 24018
23981: PUSH
23982: LD_VAR 0 14
23986: PUSH
23987: LD_VAR 0 9
23991: ARRAY
23992: PUSH
23993: LD_INT 1
23995: ARRAY
23996: PPUSH
23997: LD_VAR 0 14
24001: PUSH
24002: LD_VAR 0 9
24006: ARRAY
24007: PUSH
24008: LD_INT 2
24010: ARRAY
24011: PPUSH
24012: CALL_OW 488
24016: NOT
24017: OR
24018: IFTRUE 24035
24020: PUSH
24021: LD_VAR 0 13
24025: PPUSH
24026: CALL_OW 247
24030: PUSH
24031: LD_INT 3
24033: EQUAL
24034: OR
24035: IFFALSE 24041
// exit ;
24037: POP
24038: POP
24039: GO 24593
// if not tmp then
24041: LD_VAR 0 13
24045: NOT
24046: IFFALSE 24050
// continue ;
24048: GO 23902
// result := true ;
24050: LD_ADDR_VAR 0 8
24054: PUSH
24055: LD_INT 1
24057: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24058: LD_VAR 0 6
24062: IFFALSE 24079
24064: PUSH
24065: LD_VAR 0 13
24069: PPUSH
24070: CALL_OW 247
24074: PUSH
24075: LD_INT 2
24077: EQUAL
24078: AND
24079: IFFALSE 24096
24081: PUSH
24082: LD_VAR 0 13
24086: PPUSH
24087: CALL_OW 263
24091: PUSH
24092: LD_INT 1
24094: EQUAL
24095: AND
24096: IFFALSE 24260
// begin if IsDrivenBy ( tmp ) then
24098: LD_VAR 0 13
24102: PPUSH
24103: CALL_OW 311
24107: IFFALSE 24111
// continue ;
24109: GO 23902
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24111: LD_VAR 0 6
24115: PPUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 60
24121: PUSH
24122: EMPTY
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 55
24134: PUSH
24135: EMPTY
24136: LIST
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PPUSH
24146: CALL_OW 72
24150: IFFALSE 24258
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24152: LD_ADDR_VAR 0 18
24156: PUSH
24157: LD_VAR 0 6
24161: PPUSH
24162: LD_INT 3
24164: PUSH
24165: LD_INT 60
24167: PUSH
24168: EMPTY
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 3
24177: PUSH
24178: LD_INT 55
24180: PUSH
24181: EMPTY
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PPUSH
24192: CALL_OW 72
24196: PUSH
24197: LD_INT 1
24199: ARRAY
24200: ST_TO_ADDR
// if IsInUnit ( driver ) then
24201: LD_VAR 0 18
24205: PPUSH
24206: CALL_OW 310
24210: IFFALSE 24221
// ComExit ( driver ) ;
24212: LD_VAR 0 18
24216: PPUSH
24217: CALL 49874 0 1
// AddComEnterUnit ( driver , tmp ) ;
24221: LD_VAR 0 18
24225: PPUSH
24226: LD_VAR 0 13
24230: PPUSH
24231: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24235: LD_VAR 0 18
24239: PPUSH
24240: LD_VAR 0 7
24244: PPUSH
24245: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24249: LD_VAR 0 18
24253: PPUSH
24254: CALL_OW 181
// end ; continue ;
24258: GO 23902
// end ; if not cleaners or not tmp in cleaners then
24260: LD_VAR 0 6
24264: NOT
24265: IFTRUE 24280
24267: PUSH
24268: LD_VAR 0 13
24272: PUSH
24273: LD_VAR 0 6
24277: IN
24278: NOT
24279: OR
24280: IFFALSE 24589
// begin if dep then
24282: LD_VAR 0 17
24286: IFFALSE 24422
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24288: LD_ADDR_VAR 0 16
24292: PUSH
24293: LD_VAR 0 17
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PPUSH
24302: CALL_OW 250
24306: PPUSH
24307: LD_VAR 0 17
24311: PUSH
24312: LD_INT 1
24314: ARRAY
24315: PPUSH
24316: CALL_OW 254
24320: PPUSH
24321: LD_INT 5
24323: PPUSH
24324: CALL_OW 272
24328: PUSH
24329: LD_VAR 0 17
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: PPUSH
24338: CALL_OW 251
24342: PPUSH
24343: LD_VAR 0 17
24347: PUSH
24348: LD_INT 1
24350: ARRAY
24351: PPUSH
24352: CALL_OW 254
24356: PPUSH
24357: LD_INT 5
24359: PPUSH
24360: CALL_OW 273
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24369: LD_VAR 0 16
24373: PUSH
24374: LD_INT 1
24376: ARRAY
24377: PPUSH
24378: LD_VAR 0 16
24382: PUSH
24383: LD_INT 2
24385: ARRAY
24386: PPUSH
24387: CALL_OW 488
24391: IFFALSE 24422
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24393: LD_VAR 0 13
24397: PPUSH
24398: LD_VAR 0 16
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: PPUSH
24407: LD_VAR 0 16
24411: PUSH
24412: LD_INT 2
24414: ARRAY
24415: PPUSH
24416: CALL_OW 111
// continue ;
24420: GO 23902
// end ; end ; r := GetDir ( tmp ) ;
24422: LD_ADDR_VAR 0 15
24426: PUSH
24427: LD_VAR 0 13
24431: PPUSH
24432: CALL_OW 254
24436: ST_TO_ADDR
// if r = 5 then
24437: LD_VAR 0 15
24441: PUSH
24442: LD_INT 5
24444: EQUAL
24445: IFFALSE 24455
// r := 0 ;
24447: LD_ADDR_VAR 0 15
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// for j = r to 5 do
24455: LD_ADDR_VAR 0 10
24459: PUSH
24460: DOUBLE
24461: LD_VAR 0 15
24465: DEC
24466: ST_TO_ADDR
24467: LD_INT 5
24469: PUSH
24470: FOR_TO
24471: IFFALSE 24587
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24473: LD_ADDR_VAR 0 11
24477: PUSH
24478: LD_VAR 0 13
24482: PPUSH
24483: CALL_OW 250
24487: PPUSH
24488: LD_VAR 0 10
24492: PPUSH
24493: LD_INT 2
24495: PPUSH
24496: CALL_OW 272
24500: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24501: LD_ADDR_VAR 0 12
24505: PUSH
24506: LD_VAR 0 13
24510: PPUSH
24511: CALL_OW 251
24515: PPUSH
24516: LD_VAR 0 10
24520: PPUSH
24521: LD_INT 2
24523: PPUSH
24524: CALL_OW 273
24528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24529: LD_VAR 0 11
24533: PPUSH
24534: LD_VAR 0 12
24538: PPUSH
24539: CALL_OW 488
24543: IFFALSE 24562
24545: PUSH
24546: LD_VAR 0 11
24550: PPUSH
24551: LD_VAR 0 12
24555: PPUSH
24556: CALL_OW 428
24560: NOT
24561: AND
24562: IFFALSE 24585
// begin ComMoveXY ( tmp , _x , _y ) ;
24564: LD_VAR 0 13
24568: PPUSH
24569: LD_VAR 0 11
24573: PPUSH
24574: LD_VAR 0 12
24578: PPUSH
24579: CALL_OW 111
// break ;
24583: GO 24587
// end ; end ;
24585: GO 24470
24587: POP
24588: POP
// end ; end ;
24589: GO 23902
24591: POP
24592: POP
// end ;
24593: LD_VAR 0 8
24597: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24598: LD_INT 0
24600: PPUSH
// result := true ;
24601: LD_ADDR_VAR 0 3
24605: PUSH
24606: LD_INT 1
24608: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24609: LD_VAR 0 2
24613: PUSH
24614: LD_INT 24
24616: DOUBLE
24617: EQUAL
24618: IFTRUE 24628
24620: LD_INT 33
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24653
24628: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_INT 32
24636: PPUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 321
24646: PUSH
24647: LD_INT 2
24649: EQUAL
24650: ST_TO_ADDR
24651: GO 24969
24653: LD_INT 20
24655: DOUBLE
24656: EQUAL
24657: IFTRUE 24661
24659: GO 24686
24661: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24662: LD_ADDR_VAR 0 3
24666: PUSH
24667: LD_INT 6
24669: PPUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: CALL_OW 321
24679: PUSH
24680: LD_INT 2
24682: EQUAL
24683: ST_TO_ADDR
24684: GO 24969
24686: LD_INT 22
24688: DOUBLE
24689: EQUAL
24690: IFTRUE 24700
24692: LD_INT 36
24694: DOUBLE
24695: EQUAL
24696: IFTRUE 24700
24698: GO 24725
24700: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24701: LD_ADDR_VAR 0 3
24705: PUSH
24706: LD_INT 15
24708: PPUSH
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 321
24718: PUSH
24719: LD_INT 2
24721: EQUAL
24722: ST_TO_ADDR
24723: GO 24969
24725: LD_INT 30
24727: DOUBLE
24728: EQUAL
24729: IFTRUE 24733
24731: GO 24758
24733: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: LD_INT 20
24741: PPUSH
24742: LD_VAR 0 1
24746: PPUSH
24747: CALL_OW 321
24751: PUSH
24752: LD_INT 2
24754: EQUAL
24755: ST_TO_ADDR
24756: GO 24969
24758: LD_INT 28
24760: DOUBLE
24761: EQUAL
24762: IFTRUE 24772
24764: LD_INT 21
24766: DOUBLE
24767: EQUAL
24768: IFTRUE 24772
24770: GO 24797
24772: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24773: LD_ADDR_VAR 0 3
24777: PUSH
24778: LD_INT 21
24780: PPUSH
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 321
24790: PUSH
24791: LD_INT 2
24793: EQUAL
24794: ST_TO_ADDR
24795: GO 24969
24797: LD_INT 16
24799: DOUBLE
24800: EQUAL
24801: IFTRUE 24805
24803: GO 24830
24805: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24806: LD_ADDR_VAR 0 3
24810: PUSH
24811: LD_INT 84
24813: PPUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 321
24823: PUSH
24824: LD_INT 2
24826: EQUAL
24827: ST_TO_ADDR
24828: GO 24969
24830: LD_INT 19
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24844
24836: LD_INT 23
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24869
24844: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24845: LD_ADDR_VAR 0 3
24849: PUSH
24850: LD_INT 83
24852: PPUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 321
24862: PUSH
24863: LD_INT 2
24865: EQUAL
24866: ST_TO_ADDR
24867: GO 24969
24869: LD_INT 17
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24902
24877: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_INT 39
24885: PPUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: CALL_OW 321
24895: PUSH
24896: LD_INT 2
24898: EQUAL
24899: ST_TO_ADDR
24900: GO 24969
24902: LD_INT 18
24904: DOUBLE
24905: EQUAL
24906: IFTRUE 24910
24908: GO 24935
24910: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24911: LD_ADDR_VAR 0 3
24915: PUSH
24916: LD_INT 40
24918: PPUSH
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL_OW 321
24928: PUSH
24929: LD_INT 2
24931: EQUAL
24932: ST_TO_ADDR
24933: GO 24969
24935: LD_INT 27
24937: DOUBLE
24938: EQUAL
24939: IFTRUE 24943
24941: GO 24968
24943: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_INT 35
24951: PPUSH
24952: LD_VAR 0 1
24956: PPUSH
24957: CALL_OW 321
24961: PUSH
24962: LD_INT 2
24964: EQUAL
24965: ST_TO_ADDR
24966: GO 24969
24968: POP
// end ;
24969: LD_VAR 0 3
24973: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24974: LD_INT 0
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
// result := false ;
24987: LD_ADDR_VAR 0 6
24991: PUSH
24992: LD_INT 0
24994: ST_TO_ADDR
// if btype = b_depot then
24995: LD_VAR 0 2
24999: PUSH
25000: LD_INT 0
25002: EQUAL
25003: IFFALSE 25015
// begin result := true ;
25005: LD_ADDR_VAR 0 6
25009: PUSH
25010: LD_INT 1
25012: ST_TO_ADDR
// exit ;
25013: GO 25869
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25015: LD_VAR 0 1
25019: NOT
25020: IFTRUE 25045
25022: PUSH
25023: LD_VAR 0 1
25027: PPUSH
25028: CALL_OW 266
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: IN
25043: NOT
25044: OR
25045: IFTRUE 25054
25047: PUSH
25048: LD_VAR 0 2
25052: NOT
25053: OR
25054: IFTRUE 25090
25056: PUSH
25057: LD_VAR 0 5
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 4
25076: PUSH
25077: LD_INT 5
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: IN
25088: NOT
25089: OR
25090: IFTRUE 25109
25092: PUSH
25093: LD_VAR 0 3
25097: PPUSH
25098: LD_VAR 0 4
25102: PPUSH
25103: CALL_OW 488
25107: NOT
25108: OR
25109: IFFALSE 25113
// exit ;
25111: GO 25869
// side := GetSide ( depot ) ;
25113: LD_ADDR_VAR 0 9
25117: PUSH
25118: LD_VAR 0 1
25122: PPUSH
25123: CALL_OW 255
25127: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25128: LD_VAR 0 9
25132: PPUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: CALL 24598 0 2
25142: NOT
25143: IFFALSE 25147
// exit ;
25145: GO 25869
// pom := GetBase ( depot ) ;
25147: LD_ADDR_VAR 0 10
25151: PUSH
25152: LD_VAR 0 1
25156: PPUSH
25157: CALL_OW 274
25161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25162: LD_ADDR_VAR 0 11
25166: PUSH
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_VAR 0 1
25176: PPUSH
25177: CALL_OW 248
25181: PPUSH
25182: CALL_OW 450
25186: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25187: LD_VAR 0 10
25191: PPUSH
25192: LD_INT 1
25194: PPUSH
25195: CALL_OW 275
25199: PUSH
25200: LD_VAR 0 11
25204: PUSH
25205: LD_INT 1
25207: ARRAY
25208: GREATEREQUAL
25209: IFFALSE 25235
25211: PUSH
25212: LD_VAR 0 10
25216: PPUSH
25217: LD_INT 2
25219: PPUSH
25220: CALL_OW 275
25224: PUSH
25225: LD_VAR 0 11
25229: PUSH
25230: LD_INT 2
25232: ARRAY
25233: GREATEREQUAL
25234: AND
25235: IFFALSE 25261
25237: PUSH
25238: LD_VAR 0 10
25242: PPUSH
25243: LD_INT 3
25245: PPUSH
25246: CALL_OW 275
25250: PUSH
25251: LD_VAR 0 11
25255: PUSH
25256: LD_INT 3
25258: ARRAY
25259: GREATEREQUAL
25260: AND
25261: NOT
25262: IFFALSE 25266
// exit ;
25264: GO 25869
// if GetBType ( depot ) = b_depot then
25266: LD_VAR 0 1
25270: PPUSH
25271: CALL_OW 266
25275: PUSH
25276: LD_INT 0
25278: EQUAL
25279: IFFALSE 25291
// dist := 28 else
25281: LD_ADDR_VAR 0 14
25285: PUSH
25286: LD_INT 28
25288: ST_TO_ADDR
25289: GO 25299
// dist := 36 ;
25291: LD_ADDR_VAR 0 14
25295: PUSH
25296: LD_INT 36
25298: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25299: LD_VAR 0 1
25303: PPUSH
25304: LD_VAR 0 3
25308: PPUSH
25309: LD_VAR 0 4
25313: PPUSH
25314: CALL_OW 297
25318: PUSH
25319: LD_VAR 0 14
25323: GREATER
25324: IFFALSE 25328
// exit ;
25326: GO 25869
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25328: LD_ADDR_VAR 0 12
25332: PUSH
25333: LD_VAR 0 2
25337: PPUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: LD_VAR 0 4
25347: PPUSH
25348: LD_VAR 0 5
25352: PPUSH
25353: LD_VAR 0 1
25357: PPUSH
25358: CALL_OW 248
25362: PPUSH
25363: LD_INT 0
25365: PPUSH
25366: CALL 25874 0 6
25370: ST_TO_ADDR
// if not hexes then
25371: LD_VAR 0 12
25375: NOT
25376: IFFALSE 25380
// exit ;
25378: GO 25869
// hex := GetHexInfo ( x , y ) ;
25380: LD_ADDR_VAR 0 15
25384: PUSH
25385: LD_VAR 0 3
25389: PPUSH
25390: LD_VAR 0 4
25394: PPUSH
25395: CALL_OW 546
25399: ST_TO_ADDR
// if hex [ 1 ] then
25400: LD_VAR 0 15
25404: PUSH
25405: LD_INT 1
25407: ARRAY
25408: IFFALSE 25412
// exit ;
25410: GO 25869
// height := hex [ 2 ] ;
25412: LD_ADDR_VAR 0 13
25416: PUSH
25417: LD_VAR 0 15
25421: PUSH
25422: LD_INT 2
25424: ARRAY
25425: ST_TO_ADDR
// for i = 1 to hexes do
25426: LD_ADDR_VAR 0 7
25430: PUSH
25431: DOUBLE
25432: LD_INT 1
25434: DEC
25435: ST_TO_ADDR
25436: LD_VAR 0 12
25440: PUSH
25441: FOR_TO
25442: IFFALSE 25786
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25444: LD_VAR 0 12
25448: PUSH
25449: LD_VAR 0 7
25453: ARRAY
25454: PUSH
25455: LD_INT 1
25457: ARRAY
25458: PPUSH
25459: LD_VAR 0 12
25463: PUSH
25464: LD_VAR 0 7
25468: ARRAY
25469: PUSH
25470: LD_INT 2
25472: ARRAY
25473: PPUSH
25474: CALL_OW 488
25478: NOT
25479: IFTRUE 25521
25481: PUSH
25482: LD_VAR 0 12
25486: PUSH
25487: LD_VAR 0 7
25491: ARRAY
25492: PUSH
25493: LD_INT 1
25495: ARRAY
25496: PPUSH
25497: LD_VAR 0 12
25501: PUSH
25502: LD_VAR 0 7
25506: ARRAY
25507: PUSH
25508: LD_INT 2
25510: ARRAY
25511: PPUSH
25512: CALL_OW 428
25516: PUSH
25517: LD_INT 0
25519: GREATER
25520: OR
25521: IFTRUE 25559
25523: PUSH
25524: LD_VAR 0 12
25528: PUSH
25529: LD_VAR 0 7
25533: ARRAY
25534: PUSH
25535: LD_INT 1
25537: ARRAY
25538: PPUSH
25539: LD_VAR 0 12
25543: PUSH
25544: LD_VAR 0 7
25548: ARRAY
25549: PUSH
25550: LD_INT 2
25552: ARRAY
25553: PPUSH
25554: CALL_OW 351
25558: OR
25559: IFFALSE 25565
// exit ;
25561: POP
25562: POP
25563: GO 25869
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25565: LD_ADDR_VAR 0 8
25569: PUSH
25570: LD_VAR 0 12
25574: PUSH
25575: LD_VAR 0 7
25579: ARRAY
25580: PUSH
25581: LD_INT 1
25583: ARRAY
25584: PPUSH
25585: LD_VAR 0 12
25589: PUSH
25590: LD_VAR 0 7
25594: ARRAY
25595: PUSH
25596: LD_INT 2
25598: ARRAY
25599: PPUSH
25600: CALL_OW 546
25604: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25605: LD_VAR 0 8
25609: PUSH
25610: LD_INT 1
25612: ARRAY
25613: IFTRUE 25635
25615: PUSH
25616: LD_VAR 0 8
25620: PUSH
25621: LD_INT 2
25623: ARRAY
25624: PUSH
25625: LD_VAR 0 13
25629: PUSH
25630: LD_INT 2
25632: PLUS
25633: GREATER
25634: OR
25635: IFTRUE 25657
25637: PUSH
25638: LD_VAR 0 8
25642: PUSH
25643: LD_INT 2
25645: ARRAY
25646: PUSH
25647: LD_VAR 0 13
25651: PUSH
25652: LD_INT 2
25654: MINUS
25655: LESS
25656: OR
25657: IFTRUE 25725
25659: PUSH
25660: LD_VAR 0 8
25664: PUSH
25665: LD_INT 3
25667: ARRAY
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 8
25674: PUSH
25675: LD_INT 9
25677: PUSH
25678: LD_INT 10
25680: PUSH
25681: LD_INT 11
25683: PUSH
25684: LD_INT 12
25686: PUSH
25687: LD_INT 13
25689: PUSH
25690: LD_INT 16
25692: PUSH
25693: LD_INT 17
25695: PUSH
25696: LD_INT 18
25698: PUSH
25699: LD_INT 19
25701: PUSH
25702: LD_INT 20
25704: PUSH
25705: LD_INT 21
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: IN
25723: NOT
25724: OR
25725: IFTRUE 25738
25727: PUSH
25728: LD_VAR 0 8
25732: PUSH
25733: LD_INT 5
25735: ARRAY
25736: NOT
25737: OR
25738: IFTRUE 25778
25740: PUSH
25741: LD_VAR 0 8
25745: PUSH
25746: LD_INT 6
25748: ARRAY
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 7
25758: PUSH
25759: LD_INT 9
25761: PUSH
25762: LD_INT 10
25764: PUSH
25765: LD_INT 11
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: IN
25776: NOT
25777: OR
25778: IFFALSE 25784
// exit ;
25780: POP
25781: POP
25782: GO 25869
// end ;
25784: GO 25441
25786: POP
25787: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25788: LD_VAR 0 9
25792: PPUSH
25793: LD_VAR 0 3
25797: PPUSH
25798: LD_VAR 0 4
25802: PPUSH
25803: LD_INT 20
25805: PPUSH
25806: CALL 17688 0 4
25810: PUSH
25811: LD_INT 4
25813: ARRAY
25814: IFFALSE 25818
// exit ;
25816: GO 25869
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25818: LD_VAR 0 2
25822: PUSH
25823: LD_INT 29
25825: PUSH
25826: LD_INT 30
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: IN
25833: IFFALSE 25857
25835: PUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: LD_VAR 0 4
25845: PPUSH
25846: LD_VAR 0 9
25850: PPUSH
25851: CALL_OW 440
25855: NOT
25856: AND
25857: IFFALSE 25861
// exit ;
25859: GO 25869
// result := true ;
25861: LD_ADDR_VAR 0 6
25865: PUSH
25866: LD_INT 1
25868: ST_TO_ADDR
// end ;
25869: LD_VAR 0 6
25873: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25874: LD_INT 0
25876: PPUSH
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
25889: PPUSH
25890: PPUSH
25891: PPUSH
25892: PPUSH
25893: PPUSH
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
25903: PPUSH
25904: PPUSH
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
25912: PPUSH
25913: PPUSH
25914: PPUSH
25915: PPUSH
25916: PPUSH
25917: PPUSH
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
// result = [ ] ;
25934: LD_ADDR_VAR 0 7
25938: PUSH
25939: EMPTY
25940: ST_TO_ADDR
// temp_list = [ ] ;
25941: LD_ADDR_VAR 0 9
25945: PUSH
25946: EMPTY
25947: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25948: LD_VAR 0 4
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: LD_INT 3
25964: PUSH
25965: LD_INT 4
25967: PUSH
25968: LD_INT 5
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: IN
25979: NOT
25980: IFTRUE 26023
25982: PUSH
25983: LD_VAR 0 1
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: IN
25998: IFFALSE 26022
26000: PUSH
26001: LD_VAR 0 5
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: LIST
26019: IN
26020: NOT
26021: AND
26022: OR
26023: IFFALSE 26027
// exit ;
26025: GO 44426
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26027: LD_VAR 0 1
26031: PUSH
26032: LD_INT 6
26034: PUSH
26035: LD_INT 7
26037: PUSH
26038: LD_INT 8
26040: PUSH
26041: LD_INT 13
26043: PUSH
26044: LD_INT 12
26046: PUSH
26047: LD_INT 15
26049: PUSH
26050: LD_INT 11
26052: PUSH
26053: LD_INT 14
26055: PUSH
26056: LD_INT 10
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: IN
26070: IFFALSE 26080
// btype = b_lab ;
26072: LD_ADDR_VAR 0 1
26076: PUSH
26077: LD_INT 6
26079: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26080: LD_VAR 0 6
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 2
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: IN
26099: NOT
26100: IFTRUE 26168
26102: PUSH
26103: LD_VAR 0 1
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 3
26119: PUSH
26120: LD_INT 6
26122: PUSH
26123: LD_INT 36
26125: PUSH
26126: LD_INT 4
26128: PUSH
26129: LD_INT 5
26131: PUSH
26132: LD_INT 31
26134: PUSH
26135: LD_INT 32
26137: PUSH
26138: LD_INT 33
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: IN
26154: NOT
26155: IFFALSE 26167
26157: PUSH
26158: LD_VAR 0 6
26162: PUSH
26163: LD_INT 1
26165: EQUAL
26166: AND
26167: OR
26168: IFTRUE 26200
26170: PUSH
26171: LD_VAR 0 1
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: IN
26186: NOT
26187: IFFALSE 26199
26189: PUSH
26190: LD_VAR 0 6
26194: PUSH
26195: LD_INT 2
26197: EQUAL
26198: AND
26199: OR
26200: IFFALSE 26210
// mode = 0 ;
26202: LD_ADDR_VAR 0 6
26206: PUSH
26207: LD_INT 0
26209: ST_TO_ADDR
// case mode of 0 :
26210: LD_VAR 0 6
26214: PUSH
26215: LD_INT 0
26217: DOUBLE
26218: EQUAL
26219: IFTRUE 26223
26221: GO 37676
26223: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26224: LD_ADDR_VAR 0 11
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 3
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 3
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26417: LD_ADDR_VAR 0 12
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: NEG
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 3
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 3
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26613: LD_ADDR_VAR 0 13
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: LD_INT 3
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: NEG
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 3
26784: NEG
26785: PUSH
26786: LD_INT 3
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26812: LD_ADDR_VAR 0 14
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 2
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 3
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 3
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27008: LD_ADDR_VAR 0 15
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: NEG
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 3
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27201: LD_ADDR_VAR 0 16
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: LD_INT 2
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: LD_INT 2
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 3
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: PUSH
27359: LD_INT 3
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: LD_INT 3
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27394: LD_ADDR_VAR 0 17
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 2
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: LD_INT 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27624: LD_ADDR_VAR 0 18
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 2
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 2
27800: NEG
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27854: LD_ADDR_VAR 0 19
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: NEG
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 2
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 2
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 2
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 2
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: LD_INT 2
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28084: LD_ADDR_VAR 0 20
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 2
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28314: LD_ADDR_VAR 0 21
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: NEG
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28544: LD_ADDR_VAR 0 22
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 2
28640: NEG
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28774: LD_ADDR_VAR 0 23
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 2
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: NEG
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: LD_INT 3
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 3
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29054: LD_ADDR_VAR 0 24
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 2
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 1
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 2
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 3
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29330: LD_ADDR_VAR 0 25
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: NEG
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 3
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 2
29561: PUSH
29562: LD_INT 3
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: LD_INT 3
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29604: LD_ADDR_VAR 0 26
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: LD_INT 2
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 2
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: NEG
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: NEG
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: NEG
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 2
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29880: LD_ADDR_VAR 0 27
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 2
30067: NEG
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 2
30079: NEG
30080: PUSH
30081: LD_INT 2
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 3
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30160: LD_ADDR_VAR 0 28
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: NEG
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: LD_INT 2
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: LD_INT 2
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: NEG
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: LD_INT 3
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 3
30395: NEG
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30442: LD_ADDR_VAR 0 29
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 2
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 3
30686: NEG
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30721: LD_ADDR_VAR 0 30
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 2
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: LD_INT 2
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: LD_INT 3
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: LD_INT 3
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30999: LD_ADDR_VAR 0 31
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 3
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 1
31231: NEG
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: NEG
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31277: LD_ADDR_VAR 0 32
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: LD_INT 2
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 2
31443: NEG
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: LD_INT 3
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31555: LD_ADDR_VAR 0 33
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31834: LD_ADDR_VAR 0 34
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 3
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32114: LD_ADDR_VAR 0 35
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32226: LD_ADDR_VAR 0 36
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32338: LD_ADDR_VAR 0 37
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32450: LD_ADDR_VAR 0 38
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32562: LD_ADDR_VAR 0 39
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32674: LD_ADDR_VAR 0 40
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: NEG
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32786: LD_ADDR_VAR 0 41
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: NEG
32977: PUSH
32978: LD_INT 3
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 3
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 3
33060: NEG
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 3
33071: NEG
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: NEG
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: LD_INT 3
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33136: LD_ADDR_VAR 0 42
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: LD_INT 3
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 3
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 3
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: NEG
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: LD_INT 3
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33486: LD_ADDR_VAR 0 43
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: LD_INT 2
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 3
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33834: LD_ADDR_VAR 0 44
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: LD_INT 2
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: NEG
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: LD_INT 3
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 3
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 3
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 3
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 3
34108: NEG
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 3
34119: NEG
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: NEG
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 3
34143: NEG
34144: PUSH
34145: LD_INT 3
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34184: LD_ADDR_VAR 0 45
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: LD_INT 3
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: LD_INT 3
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 3
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 3
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: LD_INT 3
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 2
34440: PUSH
34441: LD_INT 3
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 3
34481: NEG
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: LD_INT 3
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34534: LD_ADDR_VAR 0 46
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: LD_INT 3
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 3
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 3
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 3
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: NEG
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 3
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34882: LD_ADDR_VAR 0 47
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35033: LD_ADDR_VAR 0 48
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 2
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35180: LD_ADDR_VAR 0 49
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35324: LD_ADDR_VAR 0 50
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35468: LD_ADDR_VAR 0 51
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35615: LD_ADDR_VAR 0 52
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35766: LD_ADDR_VAR 0 53
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: NEG
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35996: LD_ADDR_VAR 0 54
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: NEG
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36226: LD_ADDR_VAR 0 55
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 2
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36456: LD_ADDR_VAR 0 56
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: LD_INT 2
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 2
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36686: LD_ADDR_VAR 0 57
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36916: LD_ADDR_VAR 0 58
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37146: LD_ADDR_VAR 0 59
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37234: LD_ADDR_VAR 0 60
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37322: LD_ADDR_VAR 0 61
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37410: LD_ADDR_VAR 0 62
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37498: LD_ADDR_VAR 0 63
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37586: LD_ADDR_VAR 0 64
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// end ; 1 :
37674: GO 43571
37676: LD_INT 1
37678: DOUBLE
37679: EQUAL
37680: IFTRUE 37684
37682: GO 40307
37684: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37685: LD_ADDR_VAR 0 11
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 3
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37729: LD_ADDR_VAR 0 12
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 3
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37770: LD_ADDR_VAR 0 13
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 3
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37810: LD_ADDR_VAR 0 14
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 3
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37851: LD_ADDR_VAR 0 15
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 3
37869: NEG
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 3
37880: NEG
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37895: LD_ADDR_VAR 0 16
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: LD_INT 3
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 3
37914: NEG
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: LD_INT 3
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37941: LD_ADDR_VAR 0 17
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 3
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 3
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37985: LD_ADDR_VAR 0 18
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 3
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38026: LD_ADDR_VAR 0 19
38030: PUSH
38031: LD_INT 3
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: PUSH
38044: LD_INT 3
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38066: LD_ADDR_VAR 0 20
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 3
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 3
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38107: LD_ADDR_VAR 0 21
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38151: LD_ADDR_VAR 0 22
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: LD_INT 3
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: LD_INT 2
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 3
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38197: LD_ADDR_VAR 0 23
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: LD_INT 4
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38241: LD_ADDR_VAR 0 24
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 4
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38282: LD_ADDR_VAR 0 25
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 4
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 3
38309: PUSH
38310: LD_INT 4
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38322: LD_ADDR_VAR 0 26
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 4
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38363: LD_ADDR_VAR 0 27
38367: PUSH
38368: LD_INT 3
38370: NEG
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 3
38381: NEG
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 4
38392: NEG
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38407: LD_ADDR_VAR 0 28
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: LD_INT 3
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: LD_INT 4
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 4
38438: NEG
38439: PUSH
38440: LD_INT 3
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38453: LD_ADDR_VAR 0 29
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 3
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 3
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 4
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 4
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 3
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 5
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 5
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 4
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 6
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 6
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 5
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38608: LD_ADDR_VAR 0 30
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 3
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 4
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 4
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 4
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 5
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 5
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 6
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 6
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38751: LD_ADDR_VAR 0 31
38755: PUSH
38756: LD_INT 3
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 4
38788: PUSH
38789: LD_INT 3
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 4
38798: PUSH
38799: LD_INT 4
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: LD_INT 4
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 5
38818: PUSH
38819: LD_INT 4
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 5
38828: PUSH
38829: LD_INT 5
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 4
38838: PUSH
38839: LD_INT 5
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 6
38848: PUSH
38849: LD_INT 5
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 6
38858: PUSH
38859: LD_INT 6
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 5
38868: PUSH
38869: LD_INT 6
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38890: LD_ADDR_VAR 0 32
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 3
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 4
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 5
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 5
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 4
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 6
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 6
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 5
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39033: LD_ADDR_VAR 0 33
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 3
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 4
39085: NEG
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 4
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 4
39108: NEG
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 5
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 5
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 5
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 6
39153: NEG
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 6
39164: NEG
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39188: LD_ADDR_VAR 0 34
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 3
39219: NEG
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 3
39231: NEG
39232: PUSH
39233: LD_INT 4
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 4
39243: NEG
39244: PUSH
39245: LD_INT 3
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 4
39255: NEG
39256: PUSH
39257: LD_INT 4
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 4
39267: NEG
39268: PUSH
39269: LD_INT 5
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 5
39279: NEG
39280: PUSH
39281: LD_INT 4
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 5
39291: NEG
39292: PUSH
39293: LD_INT 5
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 5
39303: NEG
39304: PUSH
39305: LD_INT 6
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 6
39315: NEG
39316: PUSH
39317: LD_INT 5
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 6
39327: NEG
39328: PUSH
39329: LD_INT 6
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39351: LD_ADDR_VAR 0 41
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: LD_INT 3
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39395: LD_ADDR_VAR 0 42
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39436: LD_ADDR_VAR 0 43
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39476: LD_ADDR_VAR 0 44
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 3
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39517: LD_ADDR_VAR 0 45
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39561: LD_ADDR_VAR 0 46
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: LD_INT 3
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39607: LD_ADDR_VAR 0 47
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 3
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39640: LD_ADDR_VAR 0 48
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39671: LD_ADDR_VAR 0 49
39675: PUSH
39676: LD_INT 3
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39700: LD_ADDR_VAR 0 50
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 3
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39729: LD_ADDR_VAR 0 51
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39760: LD_ADDR_VAR 0 52
39764: PUSH
39765: LD_INT 3
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 3
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39793: LD_ADDR_VAR 0 53
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 3
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39837: LD_ADDR_VAR 0 54
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39878: LD_ADDR_VAR 0 55
39882: PUSH
39883: LD_INT 3
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39918: LD_ADDR_VAR 0 56
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39959: LD_ADDR_VAR 0 57
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 3
39977: NEG
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40003: LD_ADDR_VAR 0 58
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 3
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: NEG
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: NEG
40035: PUSH
40036: LD_INT 3
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40049: LD_ADDR_VAR 0 59
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40093: LD_ADDR_VAR 0 60
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40134: LD_ADDR_VAR 0 61
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40174: LD_ADDR_VAR 0 62
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40215: LD_ADDR_VAR 0 63
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40259: LD_ADDR_VAR 0 64
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: ST_TO_ADDR
// end ; 2 :
40305: GO 43571
40307: LD_INT 2
40309: DOUBLE
40310: EQUAL
40311: IFTRUE 40315
40313: GO 43570
40315: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40316: LD_ADDR_VAR 0 29
40320: PUSH
40321: LD_INT 4
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 4
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 5
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 5
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 4
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 3
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 5
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 3
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 4
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 4
40446: PUSH
40447: LD_INT 4
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 3
40456: PUSH
40457: LD_INT 4
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 4
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 3
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 5
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 5
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 4
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 3
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: LD_INT 5
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 3
40599: NEG
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 3
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 3
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 4
40655: NEG
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 4
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 4
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 4
40701: NEG
40702: PUSH
40703: LD_INT 4
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 4
40713: NEG
40714: PUSH
40715: LD_INT 5
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 3
40725: NEG
40726: PUSH
40727: LD_INT 4
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 3
40737: NEG
40738: PUSH
40739: LD_INT 3
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 4
40749: NEG
40750: PUSH
40751: LD_INT 3
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 5
40761: NEG
40762: PUSH
40763: LD_INT 4
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 5
40773: NEG
40774: PUSH
40775: LD_INT 5
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 3
40785: NEG
40786: PUSH
40787: LD_INT 5
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 5
40797: NEG
40798: PUSH
40799: LD_INT 3
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40854: LD_ADDR_VAR 0 30
40858: PUSH
40859: LD_INT 4
40861: PUSH
40862: LD_INT 4
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 4
40871: PUSH
40872: LD_INT 3
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 5
40881: PUSH
40882: LD_INT 4
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 5
40891: PUSH
40892: LD_INT 5
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 4
40901: PUSH
40902: LD_INT 5
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 3
40921: PUSH
40922: LD_INT 3
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 5
40931: PUSH
40932: LD_INT 3
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: LD_INT 5
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 4
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 4
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 4
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 4
41044: NEG
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 4
41055: NEG
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: NEG
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: NEG
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 4
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 5
41100: NEG
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 5
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 5
41123: NEG
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 3
41135: NEG
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 3
41146: NEG
41147: PUSH
41148: LD_INT 3
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 3
41158: NEG
41159: PUSH
41160: LD_INT 4
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 3
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 3
41194: NEG
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 4
41206: NEG
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 4
41218: NEG
41219: PUSH
41220: LD_INT 4
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: LD_INT 4
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 4
41242: NEG
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 4
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 5
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 4
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 4
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 5
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 3
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 5
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41401: LD_ADDR_VAR 0 31
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 4
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 5
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 5
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 4
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 5
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 3
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 3
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 3
41546: NEG
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 4
41557: NEG
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 4
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 4
41580: NEG
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 4
41603: NEG
41604: PUSH
41605: LD_INT 4
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 4
41615: NEG
41616: PUSH
41617: LD_INT 5
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: LD_INT 4
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 4
41651: NEG
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 5
41663: NEG
41664: PUSH
41665: LD_INT 4
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 5
41675: NEG
41676: PUSH
41677: LD_INT 5
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 3
41687: NEG
41688: PUSH
41689: LD_INT 5
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 5
41699: NEG
41700: PUSH
41701: LD_INT 3
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 4
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 3
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: LD_INT 3
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 4
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 4
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 4
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 4
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 5
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 5
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 5
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41951: LD_ADDR_VAR 0 32
41955: PUSH
41956: LD_INT 4
41958: NEG
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 4
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 3
41981: NEG
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 4
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 5
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 5
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 5
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: NEG
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: NEG
42073: PUSH
42074: LD_INT 4
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 3
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 4
42120: NEG
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 4
42132: NEG
42133: PUSH
42134: LD_INT 4
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 4
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 4
42156: NEG
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 4
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 5
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 4
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 3
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 4
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 5
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: LD_INT 3
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 5
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 3
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 4
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 4
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 4
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: LD_INT 4
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 4
42373: PUSH
42374: LD_INT 3
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 5
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 5
42393: PUSH
42394: LD_INT 5
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 4
42403: PUSH
42404: LD_INT 5
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: LD_INT 4
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 5
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: LD_INT 5
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42498: LD_ADDR_VAR 0 33
42502: PUSH
42503: LD_INT 4
42505: NEG
42506: PUSH
42507: LD_INT 4
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 4
42517: NEG
42518: PUSH
42519: LD_INT 5
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: LD_INT 4
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: NEG
42542: PUSH
42543: LD_INT 3
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 4
42553: NEG
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 5
42565: NEG
42566: PUSH
42567: LD_INT 4
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 5
42577: NEG
42578: PUSH
42579: LD_INT 5
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 3
42589: NEG
42590: PUSH
42591: LD_INT 5
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 5
42601: NEG
42602: PUSH
42603: LD_INT 3
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 3
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 4
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 3
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 3
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 4
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 4
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 4
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 5
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 4
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 5
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: LD_INT 3
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 4
42838: PUSH
42839: LD_INT 4
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 4
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 4
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 4
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 4
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 4
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 5
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 5
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 4
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 3
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 5
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43036: LD_ADDR_VAR 0 34
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 4
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 5
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 4
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 3
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 4
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 5
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 5
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: LD_INT 4
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 5
43258: PUSH
43259: LD_INT 4
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 5
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 4
43278: PUSH
43279: LD_INT 5
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 5
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: LD_INT 5
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 4
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 4
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 3
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 4
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 4
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 4
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 4
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 5
43477: NEG
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 5
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 5
43500: NEG
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 3
43512: NEG
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// end ; end ;
43568: GO 43571
43570: POP
// case btype of b_depot , b_warehouse :
43571: LD_VAR 0 1
43575: PUSH
43576: LD_INT 0
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43590
43582: LD_INT 1
43584: DOUBLE
43585: EQUAL
43586: IFTRUE 43590
43588: GO 43791
43590: POP
// case nation of nation_american :
43591: LD_VAR 0 5
43595: PUSH
43596: LD_INT 1
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43604
43602: GO 43660
43604: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43605: LD_ADDR_VAR 0 9
43609: PUSH
43610: LD_VAR 0 11
43614: PUSH
43615: LD_VAR 0 12
43619: PUSH
43620: LD_VAR 0 13
43624: PUSH
43625: LD_VAR 0 14
43629: PUSH
43630: LD_VAR 0 15
43634: PUSH
43635: LD_VAR 0 16
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: PUSH
43648: LD_VAR 0 4
43652: PUSH
43653: LD_INT 1
43655: PLUS
43656: ARRAY
43657: ST_TO_ADDR
43658: GO 43789
43660: LD_INT 2
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43724
43668: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43669: LD_ADDR_VAR 0 9
43673: PUSH
43674: LD_VAR 0 17
43678: PUSH
43679: LD_VAR 0 18
43683: PUSH
43684: LD_VAR 0 19
43688: PUSH
43689: LD_VAR 0 20
43693: PUSH
43694: LD_VAR 0 21
43698: PUSH
43699: LD_VAR 0 22
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: PUSH
43712: LD_VAR 0 4
43716: PUSH
43717: LD_INT 1
43719: PLUS
43720: ARRAY
43721: ST_TO_ADDR
43722: GO 43789
43724: LD_INT 3
43726: DOUBLE
43727: EQUAL
43728: IFTRUE 43732
43730: GO 43788
43732: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43733: LD_ADDR_VAR 0 9
43737: PUSH
43738: LD_VAR 0 23
43742: PUSH
43743: LD_VAR 0 24
43747: PUSH
43748: LD_VAR 0 25
43752: PUSH
43753: LD_VAR 0 26
43757: PUSH
43758: LD_VAR 0 27
43762: PUSH
43763: LD_VAR 0 28
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: PUSH
43776: LD_VAR 0 4
43780: PUSH
43781: LD_INT 1
43783: PLUS
43784: ARRAY
43785: ST_TO_ADDR
43786: GO 43789
43788: POP
43789: GO 44344
43791: LD_INT 2
43793: DOUBLE
43794: EQUAL
43795: IFTRUE 43805
43797: LD_INT 3
43799: DOUBLE
43800: EQUAL
43801: IFTRUE 43805
43803: GO 43861
43805: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43806: LD_ADDR_VAR 0 9
43810: PUSH
43811: LD_VAR 0 29
43815: PUSH
43816: LD_VAR 0 30
43820: PUSH
43821: LD_VAR 0 31
43825: PUSH
43826: LD_VAR 0 32
43830: PUSH
43831: LD_VAR 0 33
43835: PUSH
43836: LD_VAR 0 34
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: PUSH
43849: LD_VAR 0 4
43853: PUSH
43854: LD_INT 1
43856: PLUS
43857: ARRAY
43858: ST_TO_ADDR
43859: GO 44344
43861: LD_INT 16
43863: DOUBLE
43864: EQUAL
43865: IFTRUE 43923
43867: LD_INT 17
43869: DOUBLE
43870: EQUAL
43871: IFTRUE 43923
43873: LD_INT 18
43875: DOUBLE
43876: EQUAL
43877: IFTRUE 43923
43879: LD_INT 19
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43923
43885: LD_INT 22
43887: DOUBLE
43888: EQUAL
43889: IFTRUE 43923
43891: LD_INT 20
43893: DOUBLE
43894: EQUAL
43895: IFTRUE 43923
43897: LD_INT 21
43899: DOUBLE
43900: EQUAL
43901: IFTRUE 43923
43903: LD_INT 23
43905: DOUBLE
43906: EQUAL
43907: IFTRUE 43923
43909: LD_INT 24
43911: DOUBLE
43912: EQUAL
43913: IFTRUE 43923
43915: LD_INT 25
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 43979
43923: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43924: LD_ADDR_VAR 0 9
43928: PUSH
43929: LD_VAR 0 35
43933: PUSH
43934: LD_VAR 0 36
43938: PUSH
43939: LD_VAR 0 37
43943: PUSH
43944: LD_VAR 0 38
43948: PUSH
43949: LD_VAR 0 39
43953: PUSH
43954: LD_VAR 0 40
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: PUSH
43967: LD_VAR 0 4
43971: PUSH
43972: LD_INT 1
43974: PLUS
43975: ARRAY
43976: ST_TO_ADDR
43977: GO 44344
43979: LD_INT 6
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 44035
43985: LD_INT 7
43987: DOUBLE
43988: EQUAL
43989: IFTRUE 44035
43991: LD_INT 8
43993: DOUBLE
43994: EQUAL
43995: IFTRUE 44035
43997: LD_INT 13
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44035
44003: LD_INT 12
44005: DOUBLE
44006: EQUAL
44007: IFTRUE 44035
44009: LD_INT 15
44011: DOUBLE
44012: EQUAL
44013: IFTRUE 44035
44015: LD_INT 11
44017: DOUBLE
44018: EQUAL
44019: IFTRUE 44035
44021: LD_INT 14
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44035
44027: LD_INT 10
44029: DOUBLE
44030: EQUAL
44031: IFTRUE 44035
44033: GO 44091
44035: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44036: LD_ADDR_VAR 0 9
44040: PUSH
44041: LD_VAR 0 41
44045: PUSH
44046: LD_VAR 0 42
44050: PUSH
44051: LD_VAR 0 43
44055: PUSH
44056: LD_VAR 0 44
44060: PUSH
44061: LD_VAR 0 45
44065: PUSH
44066: LD_VAR 0 46
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: PUSH
44079: LD_VAR 0 4
44083: PUSH
44084: LD_INT 1
44086: PLUS
44087: ARRAY
44088: ST_TO_ADDR
44089: GO 44344
44091: LD_INT 36
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44099
44097: GO 44155
44099: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44100: LD_ADDR_VAR 0 9
44104: PUSH
44105: LD_VAR 0 47
44109: PUSH
44110: LD_VAR 0 48
44114: PUSH
44115: LD_VAR 0 49
44119: PUSH
44120: LD_VAR 0 50
44124: PUSH
44125: LD_VAR 0 51
44129: PUSH
44130: LD_VAR 0 52
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: PUSH
44143: LD_VAR 0 4
44147: PUSH
44148: LD_INT 1
44150: PLUS
44151: ARRAY
44152: ST_TO_ADDR
44153: GO 44344
44155: LD_INT 4
44157: DOUBLE
44158: EQUAL
44159: IFTRUE 44181
44161: LD_INT 5
44163: DOUBLE
44164: EQUAL
44165: IFTRUE 44181
44167: LD_INT 34
44169: DOUBLE
44170: EQUAL
44171: IFTRUE 44181
44173: LD_INT 37
44175: DOUBLE
44176: EQUAL
44177: IFTRUE 44181
44179: GO 44237
44181: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44182: LD_ADDR_VAR 0 9
44186: PUSH
44187: LD_VAR 0 53
44191: PUSH
44192: LD_VAR 0 54
44196: PUSH
44197: LD_VAR 0 55
44201: PUSH
44202: LD_VAR 0 56
44206: PUSH
44207: LD_VAR 0 57
44211: PUSH
44212: LD_VAR 0 58
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: PUSH
44225: LD_VAR 0 4
44229: PUSH
44230: LD_INT 1
44232: PLUS
44233: ARRAY
44234: ST_TO_ADDR
44235: GO 44344
44237: LD_INT 31
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44287
44243: LD_INT 32
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44287
44249: LD_INT 33
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44287
44255: LD_INT 27
44257: DOUBLE
44258: EQUAL
44259: IFTRUE 44287
44261: LD_INT 26
44263: DOUBLE
44264: EQUAL
44265: IFTRUE 44287
44267: LD_INT 28
44269: DOUBLE
44270: EQUAL
44271: IFTRUE 44287
44273: LD_INT 29
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44287
44279: LD_INT 30
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44343
44287: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44288: LD_ADDR_VAR 0 9
44292: PUSH
44293: LD_VAR 0 59
44297: PUSH
44298: LD_VAR 0 60
44302: PUSH
44303: LD_VAR 0 61
44307: PUSH
44308: LD_VAR 0 62
44312: PUSH
44313: LD_VAR 0 63
44317: PUSH
44318: LD_VAR 0 64
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: PUSH
44331: LD_VAR 0 4
44335: PUSH
44336: LD_INT 1
44338: PLUS
44339: ARRAY
44340: ST_TO_ADDR
44341: GO 44344
44343: POP
// temp_list2 = [ ] ;
44344: LD_ADDR_VAR 0 10
44348: PUSH
44349: EMPTY
44350: ST_TO_ADDR
// for i in temp_list do
44351: LD_ADDR_VAR 0 8
44355: PUSH
44356: LD_VAR 0 9
44360: PUSH
44361: FOR_IN
44362: IFFALSE 44414
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44364: LD_ADDR_VAR 0 10
44368: PUSH
44369: LD_VAR 0 10
44373: PUSH
44374: LD_VAR 0 8
44378: PUSH
44379: LD_INT 1
44381: ARRAY
44382: PUSH
44383: LD_VAR 0 2
44387: PLUS
44388: PUSH
44389: LD_VAR 0 8
44393: PUSH
44394: LD_INT 2
44396: ARRAY
44397: PUSH
44398: LD_VAR 0 3
44402: PLUS
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: EMPTY
44409: LIST
44410: ADD
44411: ST_TO_ADDR
44412: GO 44361
44414: POP
44415: POP
// result = temp_list2 ;
44416: LD_ADDR_VAR 0 7
44420: PUSH
44421: LD_VAR 0 10
44425: ST_TO_ADDR
// end ;
44426: LD_VAR 0 7
44430: RET
// export function EnemyInRange ( unit , dist ) ; begin
44431: LD_INT 0
44433: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44434: LD_ADDR_VAR 0 3
44438: PUSH
44439: LD_VAR 0 1
44443: PPUSH
44444: CALL_OW 255
44448: PPUSH
44449: LD_VAR 0 1
44453: PPUSH
44454: CALL_OW 250
44458: PPUSH
44459: LD_VAR 0 1
44463: PPUSH
44464: CALL_OW 251
44468: PPUSH
44469: LD_VAR 0 2
44473: PPUSH
44474: CALL 17688 0 4
44478: PUSH
44479: LD_INT 4
44481: ARRAY
44482: ST_TO_ADDR
// end ;
44483: LD_VAR 0 3
44487: RET
// export function PlayerSeeMe ( unit ) ; begin
44488: LD_INT 0
44490: PPUSH
// result := See ( your_side , unit ) ;
44491: LD_ADDR_VAR 0 2
44495: PUSH
44496: LD_OWVAR 2
44500: PPUSH
44501: LD_VAR 0 1
44505: PPUSH
44506: CALL_OW 292
44510: ST_TO_ADDR
// end ;
44511: LD_VAR 0 2
44515: RET
// export function ReverseDir ( unit ) ; begin
44516: LD_INT 0
44518: PPUSH
// if not unit then
44519: LD_VAR 0 1
44523: NOT
44524: IFFALSE 44528
// exit ;
44526: GO 44551
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44528: LD_ADDR_VAR 0 2
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 254
44542: PUSH
44543: LD_INT 3
44545: PLUS
44546: PUSH
44547: LD_INT 6
44549: MOD
44550: ST_TO_ADDR
// end ;
44551: LD_VAR 0 2
44555: RET
// export function ReverseArray ( array ) ; var i ; begin
44556: LD_INT 0
44558: PPUSH
44559: PPUSH
// if not array then
44560: LD_VAR 0 1
44564: NOT
44565: IFFALSE 44569
// exit ;
44567: GO 44624
// result := [ ] ;
44569: LD_ADDR_VAR 0 2
44573: PUSH
44574: EMPTY
44575: ST_TO_ADDR
// for i := array downto 1 do
44576: LD_ADDR_VAR 0 3
44580: PUSH
44581: DOUBLE
44582: LD_VAR 0 1
44586: INC
44587: ST_TO_ADDR
44588: LD_INT 1
44590: PUSH
44591: FOR_DOWNTO
44592: IFFALSE 44622
// result := Join ( result , array [ i ] ) ;
44594: LD_ADDR_VAR 0 2
44598: PUSH
44599: LD_VAR 0 2
44603: PPUSH
44604: LD_VAR 0 1
44608: PUSH
44609: LD_VAR 0 3
44613: ARRAY
44614: PPUSH
44615: CALL 49476 0 2
44619: ST_TO_ADDR
44620: GO 44591
44622: POP
44623: POP
// end ;
44624: LD_VAR 0 2
44628: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44629: LD_INT 0
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
// if not unit or not hexes then
44637: LD_VAR 0 1
44641: NOT
44642: IFTRUE 44651
44644: PUSH
44645: LD_VAR 0 2
44649: NOT
44650: OR
44651: IFFALSE 44655
// exit ;
44653: GO 44778
// dist := 9999 ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_INT 9999
44662: ST_TO_ADDR
// for i = 1 to hexes do
44663: LD_ADDR_VAR 0 4
44667: PUSH
44668: DOUBLE
44669: LD_INT 1
44671: DEC
44672: ST_TO_ADDR
44673: LD_VAR 0 2
44677: PUSH
44678: FOR_TO
44679: IFFALSE 44766
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44681: LD_ADDR_VAR 0 6
44685: PUSH
44686: LD_VAR 0 1
44690: PPUSH
44691: LD_VAR 0 2
44695: PUSH
44696: LD_VAR 0 4
44700: ARRAY
44701: PUSH
44702: LD_INT 1
44704: ARRAY
44705: PPUSH
44706: LD_VAR 0 2
44710: PUSH
44711: LD_VAR 0 4
44715: ARRAY
44716: PUSH
44717: LD_INT 2
44719: ARRAY
44720: PPUSH
44721: CALL_OW 297
44725: ST_TO_ADDR
// if tdist < dist then
44726: LD_VAR 0 6
44730: PUSH
44731: LD_VAR 0 5
44735: LESS
44736: IFFALSE 44764
// begin hex := hexes [ i ] ;
44738: LD_ADDR_VAR 0 8
44742: PUSH
44743: LD_VAR 0 2
44747: PUSH
44748: LD_VAR 0 4
44752: ARRAY
44753: ST_TO_ADDR
// dist := tdist ;
44754: LD_ADDR_VAR 0 5
44758: PUSH
44759: LD_VAR 0 6
44763: ST_TO_ADDR
// end ; end ;
44764: GO 44678
44766: POP
44767: POP
// result := hex ;
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_VAR 0 8
44777: ST_TO_ADDR
// end ;
44778: LD_VAR 0 3
44782: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44783: LD_INT 0
44785: PPUSH
44786: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44787: LD_VAR 0 1
44791: NOT
44792: IFTRUE 44831
44794: PUSH
44795: LD_VAR 0 1
44799: PUSH
44800: LD_INT 21
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 23
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PPUSH
44824: CALL_OW 69
44828: IN
44829: NOT
44830: OR
44831: IFFALSE 44835
// exit ;
44833: GO 44882
// for i = 1 to 3 do
44835: LD_ADDR_VAR 0 3
44839: PUSH
44840: DOUBLE
44841: LD_INT 1
44843: DEC
44844: ST_TO_ADDR
44845: LD_INT 3
44847: PUSH
44848: FOR_TO
44849: IFFALSE 44880
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44851: LD_VAR 0 1
44855: PPUSH
44856: CALL_OW 250
44860: PPUSH
44861: LD_VAR 0 1
44865: PPUSH
44866: CALL_OW 251
44870: PPUSH
44871: LD_INT 1
44873: PPUSH
44874: CALL_OW 453
44878: GO 44848
44880: POP
44881: POP
// end ;
44882: LD_VAR 0 2
44886: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44887: LD_INT 0
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
// if not unit or not enemy_unit then
44895: LD_VAR 0 1
44899: NOT
44900: IFTRUE 44909
44902: PUSH
44903: LD_VAR 0 2
44907: NOT
44908: OR
44909: IFFALSE 44913
// exit ;
44911: GO 45394
// if GetLives ( i ) < 250 then
44913: LD_VAR 0 4
44917: PPUSH
44918: CALL_OW 256
44922: PUSH
44923: LD_INT 250
44925: LESS
44926: IFFALSE 44939
// begin ComAutodestruct ( i ) ;
44928: LD_VAR 0 4
44932: PPUSH
44933: CALL 44783 0 1
// exit ;
44937: GO 45394
// end ; x := GetX ( enemy_unit ) ;
44939: LD_ADDR_VAR 0 7
44943: PUSH
44944: LD_VAR 0 2
44948: PPUSH
44949: CALL_OW 250
44953: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44954: LD_ADDR_VAR 0 8
44958: PUSH
44959: LD_VAR 0 2
44963: PPUSH
44964: CALL_OW 251
44968: ST_TO_ADDR
// if not x or not y then
44969: LD_VAR 0 7
44973: NOT
44974: IFTRUE 44983
44976: PUSH
44977: LD_VAR 0 8
44981: NOT
44982: OR
44983: IFFALSE 44987
// exit ;
44985: GO 45394
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44987: LD_ADDR_VAR 0 6
44991: PUSH
44992: LD_VAR 0 7
44996: PPUSH
44997: LD_INT 0
44999: PPUSH
45000: LD_INT 4
45002: PPUSH
45003: CALL_OW 272
45007: PUSH
45008: LD_VAR 0 8
45012: PPUSH
45013: LD_INT 0
45015: PPUSH
45016: LD_INT 4
45018: PPUSH
45019: CALL_OW 273
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_VAR 0 7
45032: PPUSH
45033: LD_INT 1
45035: PPUSH
45036: LD_INT 4
45038: PPUSH
45039: CALL_OW 272
45043: PUSH
45044: LD_VAR 0 8
45048: PPUSH
45049: LD_INT 1
45051: PPUSH
45052: LD_INT 4
45054: PPUSH
45055: CALL_OW 273
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_VAR 0 7
45068: PPUSH
45069: LD_INT 2
45071: PPUSH
45072: LD_INT 4
45074: PPUSH
45075: CALL_OW 272
45079: PUSH
45080: LD_VAR 0 8
45084: PPUSH
45085: LD_INT 2
45087: PPUSH
45088: LD_INT 4
45090: PPUSH
45091: CALL_OW 273
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_VAR 0 7
45104: PPUSH
45105: LD_INT 3
45107: PPUSH
45108: LD_INT 4
45110: PPUSH
45111: CALL_OW 272
45115: PUSH
45116: LD_VAR 0 8
45120: PPUSH
45121: LD_INT 3
45123: PPUSH
45124: LD_INT 4
45126: PPUSH
45127: CALL_OW 273
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_VAR 0 7
45140: PPUSH
45141: LD_INT 4
45143: PPUSH
45144: LD_INT 4
45146: PPUSH
45147: CALL_OW 272
45151: PUSH
45152: LD_VAR 0 8
45156: PPUSH
45157: LD_INT 4
45159: PPUSH
45160: LD_INT 4
45162: PPUSH
45163: CALL_OW 273
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_VAR 0 7
45176: PPUSH
45177: LD_INT 5
45179: PPUSH
45180: LD_INT 4
45182: PPUSH
45183: CALL_OW 272
45187: PUSH
45188: LD_VAR 0 8
45192: PPUSH
45193: LD_INT 5
45195: PPUSH
45196: LD_INT 4
45198: PPUSH
45199: CALL_OW 273
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: ST_TO_ADDR
// for i = tmp downto 1 do
45216: LD_ADDR_VAR 0 4
45220: PUSH
45221: DOUBLE
45222: LD_VAR 0 6
45226: INC
45227: ST_TO_ADDR
45228: LD_INT 1
45230: PUSH
45231: FOR_DOWNTO
45232: IFFALSE 45335
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45234: LD_VAR 0 6
45238: PUSH
45239: LD_VAR 0 4
45243: ARRAY
45244: PUSH
45245: LD_INT 1
45247: ARRAY
45248: PPUSH
45249: LD_VAR 0 6
45253: PUSH
45254: LD_VAR 0 4
45258: ARRAY
45259: PUSH
45260: LD_INT 2
45262: ARRAY
45263: PPUSH
45264: CALL_OW 488
45268: NOT
45269: IFTRUE 45311
45271: PUSH
45272: LD_VAR 0 6
45276: PUSH
45277: LD_VAR 0 4
45281: ARRAY
45282: PUSH
45283: LD_INT 1
45285: ARRAY
45286: PPUSH
45287: LD_VAR 0 6
45291: PUSH
45292: LD_VAR 0 4
45296: ARRAY
45297: PUSH
45298: LD_INT 2
45300: ARRAY
45301: PPUSH
45302: CALL_OW 428
45306: PUSH
45307: LD_INT 0
45309: NONEQUAL
45310: OR
45311: IFFALSE 45333
// tmp := Delete ( tmp , i ) ;
45313: LD_ADDR_VAR 0 6
45317: PUSH
45318: LD_VAR 0 6
45322: PPUSH
45323: LD_VAR 0 4
45327: PPUSH
45328: CALL_OW 3
45332: ST_TO_ADDR
45333: GO 45231
45335: POP
45336: POP
// j := GetClosestHex ( unit , tmp ) ;
45337: LD_ADDR_VAR 0 5
45341: PUSH
45342: LD_VAR 0 1
45346: PPUSH
45347: LD_VAR 0 6
45351: PPUSH
45352: CALL 44629 0 2
45356: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45357: LD_VAR 0 1
45361: PPUSH
45362: LD_VAR 0 5
45366: PUSH
45367: LD_INT 1
45369: ARRAY
45370: PPUSH
45371: LD_VAR 0 5
45375: PUSH
45376: LD_INT 2
45378: ARRAY
45379: PPUSH
45380: CALL_OW 111
// result := j ;
45384: LD_ADDR_VAR 0 3
45388: PUSH
45389: LD_VAR 0 5
45393: ST_TO_ADDR
// end ;
45394: LD_VAR 0 3
45398: RET
// export function PrepareApemanSoldier ( ) ; begin
45399: LD_INT 0
45401: PPUSH
// uc_nation := 0 ;
45402: LD_ADDR_OWVAR 21
45406: PUSH
45407: LD_INT 0
45409: ST_TO_ADDR
// hc_sex := sex_male ;
45410: LD_ADDR_OWVAR 27
45414: PUSH
45415: LD_INT 1
45417: ST_TO_ADDR
// hc_name :=  ;
45418: LD_ADDR_OWVAR 26
45422: PUSH
45423: LD_STRING 
45425: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45426: LD_ADDR_OWVAR 28
45430: PUSH
45431: LD_INT 15
45433: ST_TO_ADDR
// hc_gallery :=  ;
45434: LD_ADDR_OWVAR 33
45438: PUSH
45439: LD_STRING 
45441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45442: LD_ADDR_OWVAR 31
45446: PUSH
45447: LD_INT 0
45449: PPUSH
45450: LD_INT 3
45452: PPUSH
45453: CALL_OW 12
45457: PUSH
45458: LD_INT 0
45460: PPUSH
45461: LD_INT 3
45463: PPUSH
45464: CALL_OW 12
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45481: LD_ADDR_OWVAR 29
45485: PUSH
45486: LD_INT 10
45488: PUSH
45489: LD_INT 12
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// end ;
45496: LD_VAR 0 1
45500: RET
// export function PrepareApemanEngineer ( ) ; begin
45501: LD_INT 0
45503: PPUSH
// uc_nation := 0 ;
45504: LD_ADDR_OWVAR 21
45508: PUSH
45509: LD_INT 0
45511: ST_TO_ADDR
// hc_sex := sex_male ;
45512: LD_ADDR_OWVAR 27
45516: PUSH
45517: LD_INT 1
45519: ST_TO_ADDR
// hc_name :=  ;
45520: LD_ADDR_OWVAR 26
45524: PUSH
45525: LD_STRING 
45527: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45528: LD_ADDR_OWVAR 28
45532: PUSH
45533: LD_INT 16
45535: ST_TO_ADDR
// hc_gallery :=  ;
45536: LD_ADDR_OWVAR 33
45540: PUSH
45541: LD_STRING 
45543: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45544: LD_ADDR_OWVAR 31
45548: PUSH
45549: LD_INT 0
45551: PPUSH
45552: LD_INT 3
45554: PPUSH
45555: CALL_OW 12
45559: PUSH
45560: LD_INT 0
45562: PPUSH
45563: LD_INT 3
45565: PPUSH
45566: CALL_OW 12
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45583: LD_ADDR_OWVAR 29
45587: PUSH
45588: LD_INT 10
45590: PUSH
45591: LD_INT 12
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: ST_TO_ADDR
// end ;
45598: LD_VAR 0 1
45602: RET
// export function PrepareApeman ( agressivity ) ; begin
45603: LD_INT 0
45605: PPUSH
// uc_side := 0 ;
45606: LD_ADDR_OWVAR 20
45610: PUSH
45611: LD_INT 0
45613: ST_TO_ADDR
// uc_nation := 0 ;
45614: LD_ADDR_OWVAR 21
45618: PUSH
45619: LD_INT 0
45621: ST_TO_ADDR
// hc_sex := sex_male ;
45622: LD_ADDR_OWVAR 27
45626: PUSH
45627: LD_INT 1
45629: ST_TO_ADDR
// hc_class := class_apeman ;
45630: LD_ADDR_OWVAR 28
45634: PUSH
45635: LD_INT 12
45637: ST_TO_ADDR
// hc_gallery :=  ;
45638: LD_ADDR_OWVAR 33
45642: PUSH
45643: LD_STRING 
45645: ST_TO_ADDR
// hc_name :=  ;
45646: LD_ADDR_OWVAR 26
45650: PUSH
45651: LD_STRING 
45653: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45654: LD_ADDR_OWVAR 29
45658: PUSH
45659: LD_INT 10
45661: PUSH
45662: LD_INT 12
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: ST_TO_ADDR
// if agressivity = 0 then
45669: LD_VAR 0 1
45673: PUSH
45674: LD_INT 0
45676: EQUAL
45677: IFFALSE 45689
// hc_agressivity := 0 else
45679: LD_ADDR_OWVAR 35
45683: PUSH
45684: LD_INT 0
45686: ST_TO_ADDR
45687: GO 45710
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45689: LD_ADDR_OWVAR 35
45693: PUSH
45694: LD_VAR 0 1
45698: NEG
45699: PPUSH
45700: LD_VAR 0 1
45704: PPUSH
45705: CALL_OW 12
45709: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45710: LD_ADDR_OWVAR 31
45714: PUSH
45715: LD_INT 0
45717: PPUSH
45718: LD_INT 3
45720: PPUSH
45721: CALL_OW 12
45725: PUSH
45726: LD_INT 0
45728: PPUSH
45729: LD_INT 3
45731: PPUSH
45732: CALL_OW 12
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// end ;
45749: LD_VAR 0 2
45753: RET
// export function PrepareTiger ( agressivity ) ; begin
45754: LD_INT 0
45756: PPUSH
// uc_side := 0 ;
45757: LD_ADDR_OWVAR 20
45761: PUSH
45762: LD_INT 0
45764: ST_TO_ADDR
// uc_nation := 0 ;
45765: LD_ADDR_OWVAR 21
45769: PUSH
45770: LD_INT 0
45772: ST_TO_ADDR
// InitHc ;
45773: CALL_OW 19
// hc_class := class_tiger ;
45777: LD_ADDR_OWVAR 28
45781: PUSH
45782: LD_INT 14
45784: ST_TO_ADDR
// hc_gallery :=  ;
45785: LD_ADDR_OWVAR 33
45789: PUSH
45790: LD_STRING 
45792: ST_TO_ADDR
// hc_name :=  ;
45793: LD_ADDR_OWVAR 26
45797: PUSH
45798: LD_STRING 
45800: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45801: LD_ADDR_OWVAR 35
45805: PUSH
45806: LD_VAR 0 1
45810: NEG
45811: PPUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 12
45821: ST_TO_ADDR
// end ;
45822: LD_VAR 0 2
45826: RET
// export function PrepareEnchidna ( ) ; begin
45827: LD_INT 0
45829: PPUSH
// uc_side := 0 ;
45830: LD_ADDR_OWVAR 20
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// uc_nation := 0 ;
45838: LD_ADDR_OWVAR 21
45842: PUSH
45843: LD_INT 0
45845: ST_TO_ADDR
// InitHc ;
45846: CALL_OW 19
// hc_class := class_baggie ;
45850: LD_ADDR_OWVAR 28
45854: PUSH
45855: LD_INT 13
45857: ST_TO_ADDR
// hc_gallery :=  ;
45858: LD_ADDR_OWVAR 33
45862: PUSH
45863: LD_STRING 
45865: ST_TO_ADDR
// hc_name :=  ;
45866: LD_ADDR_OWVAR 26
45870: PUSH
45871: LD_STRING 
45873: ST_TO_ADDR
// end ;
45874: LD_VAR 0 1
45878: RET
// export function PrepareFrog ( ) ; begin
45879: LD_INT 0
45881: PPUSH
// uc_side := 0 ;
45882: LD_ADDR_OWVAR 20
45886: PUSH
45887: LD_INT 0
45889: ST_TO_ADDR
// uc_nation := 0 ;
45890: LD_ADDR_OWVAR 21
45894: PUSH
45895: LD_INT 0
45897: ST_TO_ADDR
// InitHc ;
45898: CALL_OW 19
// hc_class := class_frog ;
45902: LD_ADDR_OWVAR 28
45906: PUSH
45907: LD_INT 19
45909: ST_TO_ADDR
// hc_gallery :=  ;
45910: LD_ADDR_OWVAR 33
45914: PUSH
45915: LD_STRING 
45917: ST_TO_ADDR
// hc_name :=  ;
45918: LD_ADDR_OWVAR 26
45922: PUSH
45923: LD_STRING 
45925: ST_TO_ADDR
// end ;
45926: LD_VAR 0 1
45930: RET
// export function PrepareFish ( ) ; begin
45931: LD_INT 0
45933: PPUSH
// uc_side := 0 ;
45934: LD_ADDR_OWVAR 20
45938: PUSH
45939: LD_INT 0
45941: ST_TO_ADDR
// uc_nation := 0 ;
45942: LD_ADDR_OWVAR 21
45946: PUSH
45947: LD_INT 0
45949: ST_TO_ADDR
// InitHc ;
45950: CALL_OW 19
// hc_class := class_fish ;
45954: LD_ADDR_OWVAR 28
45958: PUSH
45959: LD_INT 20
45961: ST_TO_ADDR
// hc_gallery :=  ;
45962: LD_ADDR_OWVAR 33
45966: PUSH
45967: LD_STRING 
45969: ST_TO_ADDR
// hc_name :=  ;
45970: LD_ADDR_OWVAR 26
45974: PUSH
45975: LD_STRING 
45977: ST_TO_ADDR
// end ;
45978: LD_VAR 0 1
45982: RET
// export function PrepareBird ( ) ; begin
45983: LD_INT 0
45985: PPUSH
// uc_side := 0 ;
45986: LD_ADDR_OWVAR 20
45990: PUSH
45991: LD_INT 0
45993: ST_TO_ADDR
// uc_nation := 0 ;
45994: LD_ADDR_OWVAR 21
45998: PUSH
45999: LD_INT 0
46001: ST_TO_ADDR
// InitHc ;
46002: CALL_OW 19
// hc_class := class_phororhacos ;
46006: LD_ADDR_OWVAR 28
46010: PUSH
46011: LD_INT 18
46013: ST_TO_ADDR
// hc_gallery :=  ;
46014: LD_ADDR_OWVAR 33
46018: PUSH
46019: LD_STRING 
46021: ST_TO_ADDR
// hc_name :=  ;
46022: LD_ADDR_OWVAR 26
46026: PUSH
46027: LD_STRING 
46029: ST_TO_ADDR
// end ;
46030: LD_VAR 0 1
46034: RET
// export function PrepareHorse ( ) ; begin
46035: LD_INT 0
46037: PPUSH
// uc_side := 0 ;
46038: LD_ADDR_OWVAR 20
46042: PUSH
46043: LD_INT 0
46045: ST_TO_ADDR
// uc_nation := 0 ;
46046: LD_ADDR_OWVAR 21
46050: PUSH
46051: LD_INT 0
46053: ST_TO_ADDR
// InitHc ;
46054: CALL_OW 19
// hc_class := class_horse ;
46058: LD_ADDR_OWVAR 28
46062: PUSH
46063: LD_INT 21
46065: ST_TO_ADDR
// hc_gallery :=  ;
46066: LD_ADDR_OWVAR 33
46070: PUSH
46071: LD_STRING 
46073: ST_TO_ADDR
// hc_name :=  ;
46074: LD_ADDR_OWVAR 26
46078: PUSH
46079: LD_STRING 
46081: ST_TO_ADDR
// end ;
46082: LD_VAR 0 1
46086: RET
// export function PrepareMastodont ( ) ; begin
46087: LD_INT 0
46089: PPUSH
// uc_side := 0 ;
46090: LD_ADDR_OWVAR 20
46094: PUSH
46095: LD_INT 0
46097: ST_TO_ADDR
// uc_nation := 0 ;
46098: LD_ADDR_OWVAR 21
46102: PUSH
46103: LD_INT 0
46105: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46106: LD_ADDR_OWVAR 37
46110: PUSH
46111: LD_INT 31
46113: ST_TO_ADDR
// vc_control := control_rider ;
46114: LD_ADDR_OWVAR 38
46118: PUSH
46119: LD_INT 4
46121: ST_TO_ADDR
// end ;
46122: LD_VAR 0 1
46126: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46127: LD_INT 0
46129: PPUSH
46130: PPUSH
46131: PPUSH
// uc_side = 0 ;
46132: LD_ADDR_OWVAR 20
46136: PUSH
46137: LD_INT 0
46139: ST_TO_ADDR
// uc_nation = 0 ;
46140: LD_ADDR_OWVAR 21
46144: PUSH
46145: LD_INT 0
46147: ST_TO_ADDR
// InitHc_All ( ) ;
46148: CALL_OW 584
// InitVc ;
46152: CALL_OW 20
// if mastodonts then
46156: LD_VAR 0 6
46160: IFFALSE 46227
// for i = 1 to mastodonts do
46162: LD_ADDR_VAR 0 11
46166: PUSH
46167: DOUBLE
46168: LD_INT 1
46170: DEC
46171: ST_TO_ADDR
46172: LD_VAR 0 6
46176: PUSH
46177: FOR_TO
46178: IFFALSE 46225
// begin vc_chassis := 31 ;
46180: LD_ADDR_OWVAR 37
46184: PUSH
46185: LD_INT 31
46187: ST_TO_ADDR
// vc_control := control_rider ;
46188: LD_ADDR_OWVAR 38
46192: PUSH
46193: LD_INT 4
46195: ST_TO_ADDR
// animal := CreateVehicle ;
46196: LD_ADDR_VAR 0 12
46200: PUSH
46201: CALL_OW 45
46205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46206: LD_VAR 0 12
46210: PPUSH
46211: LD_VAR 0 8
46215: PPUSH
46216: LD_INT 0
46218: PPUSH
46219: CALL 48369 0 3
// end ;
46223: GO 46177
46225: POP
46226: POP
// if horses then
46227: LD_VAR 0 5
46231: IFFALSE 46298
// for i = 1 to horses do
46233: LD_ADDR_VAR 0 11
46237: PUSH
46238: DOUBLE
46239: LD_INT 1
46241: DEC
46242: ST_TO_ADDR
46243: LD_VAR 0 5
46247: PUSH
46248: FOR_TO
46249: IFFALSE 46296
// begin hc_class := 21 ;
46251: LD_ADDR_OWVAR 28
46255: PUSH
46256: LD_INT 21
46258: ST_TO_ADDR
// hc_gallery :=  ;
46259: LD_ADDR_OWVAR 33
46263: PUSH
46264: LD_STRING 
46266: ST_TO_ADDR
// animal := CreateHuman ;
46267: LD_ADDR_VAR 0 12
46271: PUSH
46272: CALL_OW 44
46276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46277: LD_VAR 0 12
46281: PPUSH
46282: LD_VAR 0 8
46286: PPUSH
46287: LD_INT 0
46289: PPUSH
46290: CALL 48369 0 3
// end ;
46294: GO 46248
46296: POP
46297: POP
// if birds then
46298: LD_VAR 0 1
46302: IFFALSE 46369
// for i = 1 to birds do
46304: LD_ADDR_VAR 0 11
46308: PUSH
46309: DOUBLE
46310: LD_INT 1
46312: DEC
46313: ST_TO_ADDR
46314: LD_VAR 0 1
46318: PUSH
46319: FOR_TO
46320: IFFALSE 46367
// begin hc_class := 18 ;
46322: LD_ADDR_OWVAR 28
46326: PUSH
46327: LD_INT 18
46329: ST_TO_ADDR
// hc_gallery =  ;
46330: LD_ADDR_OWVAR 33
46334: PUSH
46335: LD_STRING 
46337: ST_TO_ADDR
// animal := CreateHuman ;
46338: LD_ADDR_VAR 0 12
46342: PUSH
46343: CALL_OW 44
46347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46348: LD_VAR 0 12
46352: PPUSH
46353: LD_VAR 0 8
46357: PPUSH
46358: LD_INT 0
46360: PPUSH
46361: CALL 48369 0 3
// end ;
46365: GO 46319
46367: POP
46368: POP
// if tigers then
46369: LD_VAR 0 2
46373: IFFALSE 46457
// for i = 1 to tigers do
46375: LD_ADDR_VAR 0 11
46379: PUSH
46380: DOUBLE
46381: LD_INT 1
46383: DEC
46384: ST_TO_ADDR
46385: LD_VAR 0 2
46389: PUSH
46390: FOR_TO
46391: IFFALSE 46455
// begin hc_class = class_tiger ;
46393: LD_ADDR_OWVAR 28
46397: PUSH
46398: LD_INT 14
46400: ST_TO_ADDR
// hc_gallery =  ;
46401: LD_ADDR_OWVAR 33
46405: PUSH
46406: LD_STRING 
46408: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46409: LD_ADDR_OWVAR 35
46413: PUSH
46414: LD_INT 7
46416: NEG
46417: PPUSH
46418: LD_INT 7
46420: PPUSH
46421: CALL_OW 12
46425: ST_TO_ADDR
// animal := CreateHuman ;
46426: LD_ADDR_VAR 0 12
46430: PUSH
46431: CALL_OW 44
46435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46436: LD_VAR 0 12
46440: PPUSH
46441: LD_VAR 0 8
46445: PPUSH
46446: LD_INT 0
46448: PPUSH
46449: CALL 48369 0 3
// end ;
46453: GO 46390
46455: POP
46456: POP
// if apemans then
46457: LD_VAR 0 3
46461: IFFALSE 46584
// for i = 1 to apemans do
46463: LD_ADDR_VAR 0 11
46467: PUSH
46468: DOUBLE
46469: LD_INT 1
46471: DEC
46472: ST_TO_ADDR
46473: LD_VAR 0 3
46477: PUSH
46478: FOR_TO
46479: IFFALSE 46582
// begin hc_class = class_apeman ;
46481: LD_ADDR_OWVAR 28
46485: PUSH
46486: LD_INT 12
46488: ST_TO_ADDR
// hc_gallery =  ;
46489: LD_ADDR_OWVAR 33
46493: PUSH
46494: LD_STRING 
46496: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46497: LD_ADDR_OWVAR 35
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PPUSH
46506: LD_INT 2
46508: PPUSH
46509: CALL_OW 12
46513: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46514: LD_ADDR_OWVAR 31
46518: PUSH
46519: LD_INT 1
46521: PPUSH
46522: LD_INT 3
46524: PPUSH
46525: CALL_OW 12
46529: PUSH
46530: LD_INT 1
46532: PPUSH
46533: LD_INT 3
46535: PPUSH
46536: CALL_OW 12
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// animal := CreateHuman ;
46553: LD_ADDR_VAR 0 12
46557: PUSH
46558: CALL_OW 44
46562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46563: LD_VAR 0 12
46567: PPUSH
46568: LD_VAR 0 8
46572: PPUSH
46573: LD_INT 0
46575: PPUSH
46576: CALL 48369 0 3
// end ;
46580: GO 46478
46582: POP
46583: POP
// if enchidnas then
46584: LD_VAR 0 4
46588: IFFALSE 46655
// for i = 1 to enchidnas do
46590: LD_ADDR_VAR 0 11
46594: PUSH
46595: DOUBLE
46596: LD_INT 1
46598: DEC
46599: ST_TO_ADDR
46600: LD_VAR 0 4
46604: PUSH
46605: FOR_TO
46606: IFFALSE 46653
// begin hc_class = 13 ;
46608: LD_ADDR_OWVAR 28
46612: PUSH
46613: LD_INT 13
46615: ST_TO_ADDR
// hc_gallery =  ;
46616: LD_ADDR_OWVAR 33
46620: PUSH
46621: LD_STRING 
46623: ST_TO_ADDR
// animal := CreateHuman ;
46624: LD_ADDR_VAR 0 12
46628: PUSH
46629: CALL_OW 44
46633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46634: LD_VAR 0 12
46638: PPUSH
46639: LD_VAR 0 8
46643: PPUSH
46644: LD_INT 0
46646: PPUSH
46647: CALL 48369 0 3
// end ;
46651: GO 46605
46653: POP
46654: POP
// if fishes then
46655: LD_VAR 0 7
46659: IFFALSE 46726
// for i = 1 to fishes do
46661: LD_ADDR_VAR 0 11
46665: PUSH
46666: DOUBLE
46667: LD_INT 1
46669: DEC
46670: ST_TO_ADDR
46671: LD_VAR 0 7
46675: PUSH
46676: FOR_TO
46677: IFFALSE 46724
// begin hc_class = 20 ;
46679: LD_ADDR_OWVAR 28
46683: PUSH
46684: LD_INT 20
46686: ST_TO_ADDR
// hc_gallery =  ;
46687: LD_ADDR_OWVAR 33
46691: PUSH
46692: LD_STRING 
46694: ST_TO_ADDR
// animal := CreateHuman ;
46695: LD_ADDR_VAR 0 12
46699: PUSH
46700: CALL_OW 44
46704: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46705: LD_VAR 0 12
46709: PPUSH
46710: LD_VAR 0 9
46714: PPUSH
46715: LD_INT 0
46717: PPUSH
46718: CALL 48369 0 3
// end ;
46722: GO 46676
46724: POP
46725: POP
// end ;
46726: LD_VAR 0 10
46730: RET
// export function WantHeal ( sci , unit ) ; begin
46731: LD_INT 0
46733: PPUSH
// if GetTaskList ( sci ) > 0 then
46734: LD_VAR 0 1
46738: PPUSH
46739: CALL_OW 437
46743: PUSH
46744: LD_INT 0
46746: GREATER
46747: IFFALSE 46819
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46749: LD_VAR 0 1
46753: PPUSH
46754: CALL_OW 437
46758: PUSH
46759: LD_INT 1
46761: ARRAY
46762: PUSH
46763: LD_INT 1
46765: ARRAY
46766: PUSH
46767: LD_STRING l
46769: EQUAL
46770: IFFALSE 46797
46772: PUSH
46773: LD_VAR 0 1
46777: PPUSH
46778: CALL_OW 437
46782: PUSH
46783: LD_INT 1
46785: ARRAY
46786: PUSH
46787: LD_INT 4
46789: ARRAY
46790: PUSH
46791: LD_VAR 0 2
46795: EQUAL
46796: AND
46797: IFFALSE 46809
// result := true else
46799: LD_ADDR_VAR 0 3
46803: PUSH
46804: LD_INT 1
46806: ST_TO_ADDR
46807: GO 46817
// result := false ;
46809: LD_ADDR_VAR 0 3
46813: PUSH
46814: LD_INT 0
46816: ST_TO_ADDR
// end else
46817: GO 46827
// result := false ;
46819: LD_ADDR_VAR 0 3
46823: PUSH
46824: LD_INT 0
46826: ST_TO_ADDR
// end ;
46827: LD_VAR 0 3
46831: RET
// export function HealTarget ( sci ) ; begin
46832: LD_INT 0
46834: PPUSH
// if not sci then
46835: LD_VAR 0 1
46839: NOT
46840: IFFALSE 46844
// exit ;
46842: GO 46909
// result := 0 ;
46844: LD_ADDR_VAR 0 2
46848: PUSH
46849: LD_INT 0
46851: ST_TO_ADDR
// if GetTaskList ( sci ) then
46852: LD_VAR 0 1
46856: PPUSH
46857: CALL_OW 437
46861: IFFALSE 46909
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46863: LD_VAR 0 1
46867: PPUSH
46868: CALL_OW 437
46872: PUSH
46873: LD_INT 1
46875: ARRAY
46876: PUSH
46877: LD_INT 1
46879: ARRAY
46880: PUSH
46881: LD_STRING l
46883: EQUAL
46884: IFFALSE 46909
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46886: LD_ADDR_VAR 0 2
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 437
46900: PUSH
46901: LD_INT 1
46903: ARRAY
46904: PUSH
46905: LD_INT 4
46907: ARRAY
46908: ST_TO_ADDR
// end ;
46909: LD_VAR 0 2
46913: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46914: LD_INT 0
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
// if not base_units then
46920: LD_VAR 0 1
46924: NOT
46925: IFFALSE 46929
// exit ;
46927: GO 47016
// result := false ;
46929: LD_ADDR_VAR 0 2
46933: PUSH
46934: LD_INT 0
46936: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46937: LD_ADDR_VAR 0 5
46941: PUSH
46942: LD_VAR 0 1
46946: PPUSH
46947: LD_INT 21
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PPUSH
46957: CALL_OW 72
46961: ST_TO_ADDR
// if not tmp then
46962: LD_VAR 0 5
46966: NOT
46967: IFFALSE 46971
// exit ;
46969: GO 47016
// for i in tmp do
46971: LD_ADDR_VAR 0 3
46975: PUSH
46976: LD_VAR 0 5
46980: PUSH
46981: FOR_IN
46982: IFFALSE 47014
// begin result := EnemyInRange ( i , 22 ) ;
46984: LD_ADDR_VAR 0 2
46988: PUSH
46989: LD_VAR 0 3
46993: PPUSH
46994: LD_INT 22
46996: PPUSH
46997: CALL 44431 0 2
47001: ST_TO_ADDR
// if result then
47002: LD_VAR 0 2
47006: IFFALSE 47012
// exit ;
47008: POP
47009: POP
47010: GO 47016
// end ;
47012: GO 46981
47014: POP
47015: POP
// end ;
47016: LD_VAR 0 2
47020: RET
// export function FilterByTag ( units , tag ) ; begin
47021: LD_INT 0
47023: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47024: LD_ADDR_VAR 0 3
47028: PUSH
47029: LD_VAR 0 1
47033: PPUSH
47034: LD_INT 120
47036: PUSH
47037: LD_VAR 0 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PPUSH
47046: CALL_OW 72
47050: ST_TO_ADDR
// end ;
47051: LD_VAR 0 3
47055: RET
// export function IsDriver ( un ) ; begin
47056: LD_INT 0
47058: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47059: LD_ADDR_VAR 0 2
47063: PUSH
47064: LD_VAR 0 1
47068: PUSH
47069: LD_INT 55
47071: PUSH
47072: EMPTY
47073: LIST
47074: PPUSH
47075: CALL_OW 69
47079: IN
47080: ST_TO_ADDR
// end ;
47081: LD_VAR 0 2
47085: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47086: LD_INT 0
47088: PPUSH
47089: PPUSH
// list := [ ] ;
47090: LD_ADDR_VAR 0 5
47094: PUSH
47095: EMPTY
47096: ST_TO_ADDR
// case d of 0 :
47097: LD_VAR 0 3
47101: PUSH
47102: LD_INT 0
47104: DOUBLE
47105: EQUAL
47106: IFTRUE 47110
47108: GO 47243
47110: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47111: LD_ADDR_VAR 0 5
47115: PUSH
47116: LD_VAR 0 1
47120: PUSH
47121: LD_INT 4
47123: MINUS
47124: PUSH
47125: LD_VAR 0 2
47129: PUSH
47130: LD_INT 4
47132: MINUS
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: LIST
47141: PUSH
47142: LD_VAR 0 1
47146: PUSH
47147: LD_INT 3
47149: MINUS
47150: PUSH
47151: LD_VAR 0 2
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: PUSH
47164: LD_VAR 0 1
47168: PUSH
47169: LD_INT 4
47171: PLUS
47172: PUSH
47173: LD_VAR 0 2
47177: PUSH
47178: LD_INT 4
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: PUSH
47186: LD_VAR 0 1
47190: PUSH
47191: LD_INT 3
47193: PLUS
47194: PUSH
47195: LD_VAR 0 2
47199: PUSH
47200: LD_INT 3
47202: PLUS
47203: PUSH
47204: LD_INT 5
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: PUSH
47212: LD_VAR 0 1
47216: PUSH
47217: LD_VAR 0 2
47221: PUSH
47222: LD_INT 4
47224: PLUS
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: ST_TO_ADDR
// end ; 1 :
47241: GO 47941
47243: LD_INT 1
47245: DOUBLE
47246: EQUAL
47247: IFTRUE 47251
47249: GO 47384
47251: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: LD_VAR 0 1
47261: PUSH
47262: LD_VAR 0 2
47266: PUSH
47267: LD_INT 4
47269: MINUS
47270: PUSH
47271: LD_INT 3
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: PUSH
47279: LD_VAR 0 1
47283: PUSH
47284: LD_INT 3
47286: MINUS
47287: PUSH
47288: LD_VAR 0 2
47292: PUSH
47293: LD_INT 3
47295: MINUS
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: LD_VAR 0 1
47309: PUSH
47310: LD_INT 4
47312: MINUS
47313: PUSH
47314: LD_VAR 0 2
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: LD_VAR 0 1
47331: PUSH
47332: LD_VAR 0 2
47336: PUSH
47337: LD_INT 3
47339: PLUS
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: PUSH
47349: LD_VAR 0 1
47353: PUSH
47354: LD_INT 4
47356: PLUS
47357: PUSH
47358: LD_VAR 0 2
47362: PUSH
47363: LD_INT 4
47365: PLUS
47366: PUSH
47367: LD_INT 5
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// end ; 2 :
47382: GO 47941
47384: LD_INT 2
47386: DOUBLE
47387: EQUAL
47388: IFTRUE 47392
47390: GO 47521
47392: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47393: LD_ADDR_VAR 0 5
47397: PUSH
47398: LD_VAR 0 1
47402: PUSH
47403: LD_VAR 0 2
47407: PUSH
47408: LD_INT 3
47410: MINUS
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: PUSH
47420: LD_VAR 0 1
47424: PUSH
47425: LD_INT 4
47427: PLUS
47428: PUSH
47429: LD_VAR 0 2
47433: PUSH
47434: LD_INT 4
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: PUSH
47442: LD_VAR 0 1
47446: PUSH
47447: LD_VAR 0 2
47451: PUSH
47452: LD_INT 4
47454: PLUS
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: PUSH
47464: LD_VAR 0 1
47468: PUSH
47469: LD_INT 3
47471: MINUS
47472: PUSH
47473: LD_VAR 0 2
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: PUSH
47486: LD_VAR 0 1
47490: PUSH
47491: LD_INT 4
47493: MINUS
47494: PUSH
47495: LD_VAR 0 2
47499: PUSH
47500: LD_INT 4
47502: MINUS
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: ST_TO_ADDR
// end ; 3 :
47519: GO 47941
47521: LD_INT 3
47523: DOUBLE
47524: EQUAL
47525: IFTRUE 47529
47527: GO 47662
47529: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47530: LD_ADDR_VAR 0 5
47534: PUSH
47535: LD_VAR 0 1
47539: PUSH
47540: LD_INT 3
47542: PLUS
47543: PUSH
47544: LD_VAR 0 2
47548: PUSH
47549: LD_INT 4
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: PUSH
47557: LD_VAR 0 1
47561: PUSH
47562: LD_INT 4
47564: PLUS
47565: PUSH
47566: LD_VAR 0 2
47570: PUSH
47571: LD_INT 4
47573: PLUS
47574: PUSH
47575: LD_INT 5
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: PUSH
47583: LD_VAR 0 1
47587: PUSH
47588: LD_INT 4
47590: MINUS
47591: PUSH
47592: LD_VAR 0 2
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: PUSH
47605: LD_VAR 0 1
47609: PUSH
47610: LD_VAR 0 2
47614: PUSH
47615: LD_INT 4
47617: MINUS
47618: PUSH
47619: LD_INT 3
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: PUSH
47627: LD_VAR 0 1
47631: PUSH
47632: LD_INT 3
47634: MINUS
47635: PUSH
47636: LD_VAR 0 2
47640: PUSH
47641: LD_INT 3
47643: MINUS
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// end ; 4 :
47660: GO 47941
47662: LD_INT 4
47664: DOUBLE
47665: EQUAL
47666: IFTRUE 47670
47668: GO 47803
47670: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47671: LD_ADDR_VAR 0 5
47675: PUSH
47676: LD_VAR 0 1
47680: PUSH
47681: LD_VAR 0 2
47685: PUSH
47686: LD_INT 4
47688: PLUS
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: PUSH
47698: LD_VAR 0 1
47702: PUSH
47703: LD_INT 3
47705: PLUS
47706: PUSH
47707: LD_VAR 0 2
47711: PUSH
47712: LD_INT 3
47714: PLUS
47715: PUSH
47716: LD_INT 5
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: PUSH
47724: LD_VAR 0 1
47728: PUSH
47729: LD_INT 4
47731: PLUS
47732: PUSH
47733: LD_VAR 0 2
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: PUSH
47746: LD_VAR 0 1
47750: PUSH
47751: LD_VAR 0 2
47755: PUSH
47756: LD_INT 3
47758: MINUS
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: PUSH
47768: LD_VAR 0 1
47772: PUSH
47773: LD_INT 4
47775: MINUS
47776: PUSH
47777: LD_VAR 0 2
47781: PUSH
47782: LD_INT 4
47784: MINUS
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: ST_TO_ADDR
// end ; 5 :
47801: GO 47941
47803: LD_INT 5
47805: DOUBLE
47806: EQUAL
47807: IFTRUE 47811
47809: GO 47940
47811: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47812: LD_ADDR_VAR 0 5
47816: PUSH
47817: LD_VAR 0 1
47821: PUSH
47822: LD_INT 4
47824: MINUS
47825: PUSH
47826: LD_VAR 0 2
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: PUSH
47839: LD_VAR 0 1
47843: PUSH
47844: LD_VAR 0 2
47848: PUSH
47849: LD_INT 4
47851: MINUS
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: PUSH
47861: LD_VAR 0 1
47865: PUSH
47866: LD_INT 4
47868: PLUS
47869: PUSH
47870: LD_VAR 0 2
47874: PUSH
47875: LD_INT 4
47877: PLUS
47878: PUSH
47879: LD_INT 5
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: PUSH
47887: LD_VAR 0 1
47891: PUSH
47892: LD_INT 3
47894: PLUS
47895: PUSH
47896: LD_VAR 0 2
47900: PUSH
47901: LD_INT 4
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: PUSH
47909: LD_VAR 0 1
47913: PUSH
47914: LD_VAR 0 2
47918: PUSH
47919: LD_INT 3
47921: PLUS
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// end ; end ;
47938: GO 47941
47940: POP
// result := list ;
47941: LD_ADDR_VAR 0 4
47945: PUSH
47946: LD_VAR 0 5
47950: ST_TO_ADDR
// end ;
47951: LD_VAR 0 4
47955: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47956: LD_INT 0
47958: PPUSH
47959: PPUSH
47960: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47961: LD_VAR 0 1
47965: NOT
47966: IFTRUE 47994
47968: PUSH
47969: LD_VAR 0 2
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: LD_INT 4
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: IN
47992: NOT
47993: OR
47994: IFFALSE 47998
// exit ;
47996: GO 48081
// tmp := [ ] ;
47998: LD_ADDR_VAR 0 5
48002: PUSH
48003: EMPTY
48004: ST_TO_ADDR
// for i in units do
48005: LD_ADDR_VAR 0 4
48009: PUSH
48010: LD_VAR 0 1
48014: PUSH
48015: FOR_IN
48016: IFFALSE 48050
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48018: LD_ADDR_VAR 0 5
48022: PUSH
48023: LD_VAR 0 5
48027: PPUSH
48028: LD_VAR 0 4
48032: PPUSH
48033: LD_VAR 0 2
48037: PPUSH
48038: CALL_OW 259
48042: PPUSH
48043: CALL 49476 0 2
48047: ST_TO_ADDR
48048: GO 48015
48050: POP
48051: POP
// if not tmp then
48052: LD_VAR 0 5
48056: NOT
48057: IFFALSE 48061
// exit ;
48059: GO 48081
// result := SortListByListDesc ( units , tmp ) ;
48061: LD_ADDR_VAR 0 3
48065: PUSH
48066: LD_VAR 0 1
48070: PPUSH
48071: LD_VAR 0 5
48075: PPUSH
48076: CALL_OW 77
48080: ST_TO_ADDR
// end ;
48081: LD_VAR 0 3
48085: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48086: LD_INT 0
48088: PPUSH
48089: PPUSH
48090: PPUSH
// result := false ;
48091: LD_ADDR_VAR 0 3
48095: PUSH
48096: LD_INT 0
48098: ST_TO_ADDR
// if not building then
48099: LD_VAR 0 2
48103: NOT
48104: IFFALSE 48108
// exit ;
48106: GO 48252
// x := GetX ( building ) ;
48108: LD_ADDR_VAR 0 4
48112: PUSH
48113: LD_VAR 0 2
48117: PPUSH
48118: CALL_OW 250
48122: ST_TO_ADDR
// y := GetY ( building ) ;
48123: LD_ADDR_VAR 0 5
48127: PUSH
48128: LD_VAR 0 2
48132: PPUSH
48133: CALL_OW 251
48137: ST_TO_ADDR
// if not x or not y then
48138: LD_VAR 0 4
48142: NOT
48143: IFTRUE 48152
48145: PUSH
48146: LD_VAR 0 5
48150: NOT
48151: OR
48152: IFFALSE 48156
// exit ;
48154: GO 48252
// if GetTaskList ( unit ) then
48156: LD_VAR 0 1
48160: PPUSH
48161: CALL_OW 437
48165: IFFALSE 48252
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48167: LD_STRING e
48169: PUSH
48170: LD_VAR 0 1
48174: PPUSH
48175: CALL_OW 437
48179: PUSH
48180: LD_INT 1
48182: ARRAY
48183: PUSH
48184: LD_INT 1
48186: ARRAY
48187: EQUAL
48188: IFFALSE 48215
48190: PUSH
48191: LD_VAR 0 4
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: CALL_OW 437
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: PUSH
48210: LD_INT 2
48212: ARRAY
48213: EQUAL
48214: AND
48215: IFFALSE 48242
48217: PUSH
48218: LD_VAR 0 5
48222: PUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 437
48232: PUSH
48233: LD_INT 1
48235: ARRAY
48236: PUSH
48237: LD_INT 3
48239: ARRAY
48240: EQUAL
48241: AND
48242: IFFALSE 48252
// result := true end ;
48244: LD_ADDR_VAR 0 3
48248: PUSH
48249: LD_INT 1
48251: ST_TO_ADDR
// end ;
48252: LD_VAR 0 3
48256: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48257: LD_INT 0
48259: PPUSH
// result := false ;
48260: LD_ADDR_VAR 0 4
48264: PUSH
48265: LD_INT 0
48267: ST_TO_ADDR
// if GetTaskList ( unit ) then
48268: LD_VAR 0 1
48272: PPUSH
48273: CALL_OW 437
48277: IFFALSE 48364
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48279: LD_STRING M
48281: PUSH
48282: LD_VAR 0 1
48286: PPUSH
48287: CALL_OW 437
48291: PUSH
48292: LD_INT 1
48294: ARRAY
48295: PUSH
48296: LD_INT 1
48298: ARRAY
48299: EQUAL
48300: IFFALSE 48327
48302: PUSH
48303: LD_VAR 0 2
48307: PUSH
48308: LD_VAR 0 1
48312: PPUSH
48313: CALL_OW 437
48317: PUSH
48318: LD_INT 1
48320: ARRAY
48321: PUSH
48322: LD_INT 2
48324: ARRAY
48325: EQUAL
48326: AND
48327: IFFALSE 48354
48329: PUSH
48330: LD_VAR 0 3
48334: PUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: CALL_OW 437
48344: PUSH
48345: LD_INT 1
48347: ARRAY
48348: PUSH
48349: LD_INT 3
48351: ARRAY
48352: EQUAL
48353: AND
48354: IFFALSE 48364
// result := true ;
48356: LD_ADDR_VAR 0 4
48360: PUSH
48361: LD_INT 1
48363: ST_TO_ADDR
// end ; end ;
48364: LD_VAR 0 4
48368: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48369: LD_INT 0
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
// if not unit or not area then
48375: LD_VAR 0 1
48379: NOT
48380: IFTRUE 48389
48382: PUSH
48383: LD_VAR 0 2
48387: NOT
48388: OR
48389: IFFALSE 48393
// exit ;
48391: GO 48569
// tmp := AreaToList ( area , i ) ;
48393: LD_ADDR_VAR 0 6
48397: PUSH
48398: LD_VAR 0 2
48402: PPUSH
48403: LD_VAR 0 5
48407: PPUSH
48408: CALL_OW 517
48412: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48413: LD_ADDR_VAR 0 5
48417: PUSH
48418: DOUBLE
48419: LD_INT 1
48421: DEC
48422: ST_TO_ADDR
48423: LD_VAR 0 6
48427: PUSH
48428: LD_INT 1
48430: ARRAY
48431: PUSH
48432: FOR_TO
48433: IFFALSE 48567
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48435: LD_ADDR_VAR 0 7
48439: PUSH
48440: LD_VAR 0 6
48444: PUSH
48445: LD_INT 1
48447: ARRAY
48448: PUSH
48449: LD_VAR 0 5
48453: ARRAY
48454: PUSH
48455: LD_VAR 0 6
48459: PUSH
48460: LD_INT 2
48462: ARRAY
48463: PUSH
48464: LD_VAR 0 5
48468: ARRAY
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48474: LD_INT 92
48476: PUSH
48477: LD_VAR 0 7
48481: PUSH
48482: LD_INT 1
48484: ARRAY
48485: PUSH
48486: LD_VAR 0 7
48490: PUSH
48491: LD_INT 2
48493: ARRAY
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: PPUSH
48504: CALL_OW 69
48508: PUSH
48509: LD_INT 0
48511: EQUAL
48512: IFFALSE 48565
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48514: LD_VAR 0 1
48518: PPUSH
48519: LD_VAR 0 7
48523: PUSH
48524: LD_INT 1
48526: ARRAY
48527: PPUSH
48528: LD_VAR 0 7
48532: PUSH
48533: LD_INT 2
48535: ARRAY
48536: PPUSH
48537: LD_VAR 0 3
48541: PPUSH
48542: CALL_OW 48
// result := IsPlaced ( unit ) ;
48546: LD_ADDR_VAR 0 4
48550: PUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: CALL_OW 305
48560: ST_TO_ADDR
// exit ;
48561: POP
48562: POP
48563: GO 48569
// end ; end ;
48565: GO 48432
48567: POP
48568: POP
// end ;
48569: LD_VAR 0 4
48573: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48574: LD_INT 0
48576: PPUSH
48577: PPUSH
48578: PPUSH
// if not side or side > 8 then
48579: LD_VAR 0 1
48583: NOT
48584: IFTRUE 48596
48586: PUSH
48587: LD_VAR 0 1
48591: PUSH
48592: LD_INT 8
48594: GREATER
48595: OR
48596: IFFALSE 48600
// exit ;
48598: GO 48787
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48600: LD_ADDR_VAR 0 4
48604: PUSH
48605: LD_INT 22
48607: PUSH
48608: LD_VAR 0 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 21
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PPUSH
48631: CALL_OW 69
48635: ST_TO_ADDR
// if not tmp then
48636: LD_VAR 0 4
48640: NOT
48641: IFFALSE 48645
// exit ;
48643: GO 48787
// enable_addtolog := true ;
48645: LD_ADDR_OWVAR 81
48649: PUSH
48650: LD_INT 1
48652: ST_TO_ADDR
// AddToLog ( [ ) ;
48653: LD_STRING [
48655: PPUSH
48656: CALL_OW 561
// for i in tmp do
48660: LD_ADDR_VAR 0 3
48664: PUSH
48665: LD_VAR 0 4
48669: PUSH
48670: FOR_IN
48671: IFFALSE 48778
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48673: LD_STRING [
48675: PUSH
48676: LD_VAR 0 3
48680: PPUSH
48681: CALL_OW 266
48685: STR
48686: PUSH
48687: LD_STRING , 
48689: STR
48690: PUSH
48691: LD_VAR 0 3
48695: PPUSH
48696: CALL_OW 250
48700: STR
48701: PUSH
48702: LD_STRING , 
48704: STR
48705: PUSH
48706: LD_VAR 0 3
48710: PPUSH
48711: CALL_OW 251
48715: STR
48716: PUSH
48717: LD_STRING , 
48719: STR
48720: PUSH
48721: LD_VAR 0 3
48725: PPUSH
48726: CALL_OW 254
48730: STR
48731: PUSH
48732: LD_STRING , 
48734: STR
48735: PUSH
48736: LD_VAR 0 3
48740: PPUSH
48741: LD_INT 1
48743: PPUSH
48744: CALL_OW 268
48748: STR
48749: PUSH
48750: LD_STRING , 
48752: STR
48753: PUSH
48754: LD_VAR 0 3
48758: PPUSH
48759: LD_INT 2
48761: PPUSH
48762: CALL_OW 268
48766: STR
48767: PUSH
48768: LD_STRING ],
48770: STR
48771: PPUSH
48772: CALL_OW 561
// end ;
48776: GO 48670
48778: POP
48779: POP
// AddToLog ( ]; ) ;
48780: LD_STRING ];
48782: PPUSH
48783: CALL_OW 561
// end ;
48787: LD_VAR 0 2
48791: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48792: LD_INT 0
48794: PPUSH
48795: PPUSH
48796: PPUSH
48797: PPUSH
48798: PPUSH
// if not area or not rate or not max then
48799: LD_VAR 0 1
48803: NOT
48804: IFTRUE 48813
48806: PUSH
48807: LD_VAR 0 2
48811: NOT
48812: OR
48813: IFTRUE 48822
48815: PUSH
48816: LD_VAR 0 4
48820: NOT
48821: OR
48822: IFFALSE 48826
// exit ;
48824: GO 49015
// while 1 do
48826: LD_INT 1
48828: IFFALSE 49015
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48830: LD_ADDR_VAR 0 9
48834: PUSH
48835: LD_VAR 0 1
48839: PPUSH
48840: LD_INT 1
48842: PPUSH
48843: CALL_OW 287
48847: PUSH
48848: LD_INT 10
48850: MUL
48851: ST_TO_ADDR
// r := rate / 10 ;
48852: LD_ADDR_VAR 0 7
48856: PUSH
48857: LD_VAR 0 2
48861: PUSH
48862: LD_INT 10
48864: DIVREAL
48865: ST_TO_ADDR
// time := 1 1$00 ;
48866: LD_ADDR_VAR 0 8
48870: PUSH
48871: LD_INT 2100
48873: ST_TO_ADDR
// if amount < min then
48874: LD_VAR 0 9
48878: PUSH
48879: LD_VAR 0 3
48883: LESS
48884: IFFALSE 48902
// r := r * 2 else
48886: LD_ADDR_VAR 0 7
48890: PUSH
48891: LD_VAR 0 7
48895: PUSH
48896: LD_INT 2
48898: MUL
48899: ST_TO_ADDR
48900: GO 48928
// if amount > max then
48902: LD_VAR 0 9
48906: PUSH
48907: LD_VAR 0 4
48911: GREATER
48912: IFFALSE 48928
// r := r / 2 ;
48914: LD_ADDR_VAR 0 7
48918: PUSH
48919: LD_VAR 0 7
48923: PUSH
48924: LD_INT 2
48926: DIVREAL
48927: ST_TO_ADDR
// time := time / r ;
48928: LD_ADDR_VAR 0 8
48932: PUSH
48933: LD_VAR 0 8
48937: PUSH
48938: LD_VAR 0 7
48942: DIVREAL
48943: ST_TO_ADDR
// if time < 0 then
48944: LD_VAR 0 8
48948: PUSH
48949: LD_INT 0
48951: LESS
48952: IFFALSE 48969
// time := time * - 1 ;
48954: LD_ADDR_VAR 0 8
48958: PUSH
48959: LD_VAR 0 8
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: MUL
48968: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48969: LD_VAR 0 8
48973: PUSH
48974: LD_INT 35
48976: PPUSH
48977: LD_INT 875
48979: PPUSH
48980: CALL_OW 12
48984: PLUS
48985: PPUSH
48986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48990: LD_INT 1
48992: PPUSH
48993: LD_INT 5
48995: PPUSH
48996: CALL_OW 12
49000: PPUSH
49001: LD_VAR 0 1
49005: PPUSH
49006: LD_INT 1
49008: PPUSH
49009: CALL_OW 55
// end ;
49013: GO 48826
// end ;
49015: LD_VAR 0 5
49019: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49020: LD_INT 0
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
// if not turrets or not factories then
49030: LD_VAR 0 1
49034: NOT
49035: IFTRUE 49044
49037: PUSH
49038: LD_VAR 0 2
49042: NOT
49043: OR
49044: IFFALSE 49048
// exit ;
49046: GO 49355
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49048: LD_ADDR_VAR 0 10
49052: PUSH
49053: LD_INT 5
49055: PUSH
49056: LD_INT 6
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 4
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 5
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 24
49090: PUSH
49091: LD_INT 25
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 23
49100: PUSH
49101: LD_INT 27
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 42
49114: PUSH
49115: LD_INT 43
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 44
49124: PUSH
49125: LD_INT 46
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 45
49134: PUSH
49135: LD_INT 47
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// result := [ ] ;
49152: LD_ADDR_VAR 0 3
49156: PUSH
49157: EMPTY
49158: ST_TO_ADDR
// for i in turrets do
49159: LD_ADDR_VAR 0 4
49163: PUSH
49164: LD_VAR 0 1
49168: PUSH
49169: FOR_IN
49170: IFFALSE 49353
// begin nat := GetNation ( i ) ;
49172: LD_ADDR_VAR 0 7
49176: PUSH
49177: LD_VAR 0 4
49181: PPUSH
49182: CALL_OW 248
49186: ST_TO_ADDR
// weapon := 0 ;
49187: LD_ADDR_VAR 0 8
49191: PUSH
49192: LD_INT 0
49194: ST_TO_ADDR
// if not nat then
49195: LD_VAR 0 7
49199: NOT
49200: IFFALSE 49204
// continue ;
49202: GO 49169
// for j in list [ nat ] do
49204: LD_ADDR_VAR 0 5
49208: PUSH
49209: LD_VAR 0 10
49213: PUSH
49214: LD_VAR 0 7
49218: ARRAY
49219: PUSH
49220: FOR_IN
49221: IFFALSE 49262
// if GetBWeapon ( i ) = j [ 1 ] then
49223: LD_VAR 0 4
49227: PPUSH
49228: CALL_OW 269
49232: PUSH
49233: LD_VAR 0 5
49237: PUSH
49238: LD_INT 1
49240: ARRAY
49241: EQUAL
49242: IFFALSE 49260
// begin weapon := j [ 2 ] ;
49244: LD_ADDR_VAR 0 8
49248: PUSH
49249: LD_VAR 0 5
49253: PUSH
49254: LD_INT 2
49256: ARRAY
49257: ST_TO_ADDR
// break ;
49258: GO 49262
// end ;
49260: GO 49220
49262: POP
49263: POP
// if not weapon then
49264: LD_VAR 0 8
49268: NOT
49269: IFFALSE 49273
// continue ;
49271: GO 49169
// for k in factories do
49273: LD_ADDR_VAR 0 6
49277: PUSH
49278: LD_VAR 0 2
49282: PUSH
49283: FOR_IN
49284: IFFALSE 49349
// begin weapons := AvailableWeaponList ( k ) ;
49286: LD_ADDR_VAR 0 9
49290: PUSH
49291: LD_VAR 0 6
49295: PPUSH
49296: CALL_OW 478
49300: ST_TO_ADDR
// if not weapons then
49301: LD_VAR 0 9
49305: NOT
49306: IFFALSE 49310
// continue ;
49308: GO 49283
// if weapon in weapons then
49310: LD_VAR 0 8
49314: PUSH
49315: LD_VAR 0 9
49319: IN
49320: IFFALSE 49347
// begin result := [ i , weapon ] ;
49322: LD_ADDR_VAR 0 3
49326: PUSH
49327: LD_VAR 0 4
49331: PUSH
49332: LD_VAR 0 8
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// exit ;
49341: POP
49342: POP
49343: POP
49344: POP
49345: GO 49355
// end ; end ;
49347: GO 49283
49349: POP
49350: POP
// end ;
49351: GO 49169
49353: POP
49354: POP
// end ;
49355: LD_VAR 0 3
49359: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49360: LD_INT 0
49362: PPUSH
// if not side or side > 8 then
49363: LD_VAR 0 3
49367: NOT
49368: IFTRUE 49380
49370: PUSH
49371: LD_VAR 0 3
49375: PUSH
49376: LD_INT 8
49378: GREATER
49379: OR
49380: IFFALSE 49384
// exit ;
49382: GO 49443
// if not range then
49384: LD_VAR 0 4
49388: NOT
49389: IFFALSE 49400
// range := - 12 ;
49391: LD_ADDR_VAR 0 4
49395: PUSH
49396: LD_INT 12
49398: NEG
49399: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49400: LD_VAR 0 1
49404: PPUSH
49405: LD_VAR 0 2
49409: PPUSH
49410: LD_VAR 0 3
49414: PPUSH
49415: LD_VAR 0 4
49419: PPUSH
49420: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49424: LD_VAR 0 1
49428: PPUSH
49429: LD_VAR 0 2
49433: PPUSH
49434: LD_VAR 0 3
49438: PPUSH
49439: CALL_OW 331
// end ;
49443: LD_VAR 0 5
49447: RET
// export function Video ( mode ) ; begin
49448: LD_INT 0
49450: PPUSH
// ingame_video = mode ;
49451: LD_ADDR_OWVAR 52
49455: PUSH
49456: LD_VAR 0 1
49460: ST_TO_ADDR
// interface_hidden = mode ;
49461: LD_ADDR_OWVAR 54
49465: PUSH
49466: LD_VAR 0 1
49470: ST_TO_ADDR
// end ;
49471: LD_VAR 0 2
49475: RET
// export function Join ( array , element ) ; begin
49476: LD_INT 0
49478: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49479: LD_ADDR_VAR 0 3
49483: PUSH
49484: LD_VAR 0 1
49488: PPUSH
49489: LD_VAR 0 1
49493: PUSH
49494: LD_INT 1
49496: PLUS
49497: PPUSH
49498: LD_VAR 0 2
49502: PPUSH
49503: CALL_OW 1
49507: ST_TO_ADDR
// end ;
49508: LD_VAR 0 3
49512: RET
// export function JoinUnion ( array , element ) ; begin
49513: LD_INT 0
49515: PPUSH
// result := array union element ;
49516: LD_ADDR_VAR 0 3
49520: PUSH
49521: LD_VAR 0 1
49525: PUSH
49526: LD_VAR 0 2
49530: UNION
49531: ST_TO_ADDR
// end ;
49532: LD_VAR 0 3
49536: RET
// export function GetBehemoths ( side ) ; begin
49537: LD_INT 0
49539: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49540: LD_ADDR_VAR 0 2
49544: PUSH
49545: LD_INT 22
49547: PUSH
49548: LD_VAR 0 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 31
49559: PUSH
49560: LD_INT 25
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PPUSH
49571: CALL_OW 69
49575: ST_TO_ADDR
// end ;
49576: LD_VAR 0 2
49580: RET
// export function Shuffle ( array ) ; var i , index ; begin
49581: LD_INT 0
49583: PPUSH
49584: PPUSH
49585: PPUSH
// result := [ ] ;
49586: LD_ADDR_VAR 0 2
49590: PUSH
49591: EMPTY
49592: ST_TO_ADDR
// if not array then
49593: LD_VAR 0 1
49597: NOT
49598: IFFALSE 49602
// exit ;
49600: GO 49701
// Randomize ;
49602: CALL_OW 10
// for i = array downto 1 do
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: DOUBLE
49612: LD_VAR 0 1
49616: INC
49617: ST_TO_ADDR
49618: LD_INT 1
49620: PUSH
49621: FOR_DOWNTO
49622: IFFALSE 49699
// begin index := rand ( 1 , array ) ;
49624: LD_ADDR_VAR 0 4
49628: PUSH
49629: LD_INT 1
49631: PPUSH
49632: LD_VAR 0 1
49636: PPUSH
49637: CALL_OW 12
49641: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49642: LD_ADDR_VAR 0 2
49646: PUSH
49647: LD_VAR 0 2
49651: PPUSH
49652: LD_VAR 0 2
49656: PUSH
49657: LD_INT 1
49659: PLUS
49660: PPUSH
49661: LD_VAR 0 1
49665: PUSH
49666: LD_VAR 0 4
49670: ARRAY
49671: PPUSH
49672: CALL_OW 2
49676: ST_TO_ADDR
// array := Delete ( array , index ) ;
49677: LD_ADDR_VAR 0 1
49681: PUSH
49682: LD_VAR 0 1
49686: PPUSH
49687: LD_VAR 0 4
49691: PPUSH
49692: CALL_OW 3
49696: ST_TO_ADDR
// end ;
49697: GO 49621
49699: POP
49700: POP
// end ;
49701: LD_VAR 0 2
49705: RET
// export function GetBaseMaterials ( base ) ; begin
49706: LD_INT 0
49708: PPUSH
// result := [ 0 , 0 , 0 ] ;
49709: LD_ADDR_VAR 0 2
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// if not base then
49728: LD_VAR 0 1
49732: NOT
49733: IFFALSE 49737
// exit ;
49735: GO 49786
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49737: LD_ADDR_VAR 0 2
49741: PUSH
49742: LD_VAR 0 1
49746: PPUSH
49747: LD_INT 1
49749: PPUSH
49750: CALL_OW 275
49754: PUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: LD_INT 2
49762: PPUSH
49763: CALL_OW 275
49767: PUSH
49768: LD_VAR 0 1
49772: PPUSH
49773: LD_INT 3
49775: PPUSH
49776: CALL_OW 275
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: LIST
49785: ST_TO_ADDR
// end ;
49786: LD_VAR 0 2
49790: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49791: LD_INT 0
49793: PPUSH
49794: PPUSH
// result := array ;
49795: LD_ADDR_VAR 0 3
49799: PUSH
49800: LD_VAR 0 1
49804: ST_TO_ADDR
// if size >= result then
49805: LD_VAR 0 2
49809: PUSH
49810: LD_VAR 0 3
49814: GREATEREQUAL
49815: IFFALSE 49819
// exit ;
49817: GO 49869
// if size then
49819: LD_VAR 0 2
49823: IFFALSE 49869
// for i := array downto size do
49825: LD_ADDR_VAR 0 4
49829: PUSH
49830: DOUBLE
49831: LD_VAR 0 1
49835: INC
49836: ST_TO_ADDR
49837: LD_VAR 0 2
49841: PUSH
49842: FOR_DOWNTO
49843: IFFALSE 49867
// result := Delete ( result , result ) ;
49845: LD_ADDR_VAR 0 3
49849: PUSH
49850: LD_VAR 0 3
49854: PPUSH
49855: LD_VAR 0 3
49859: PPUSH
49860: CALL_OW 3
49864: ST_TO_ADDR
49865: GO 49842
49867: POP
49868: POP
// end ;
49869: LD_VAR 0 3
49873: RET
// export function ComExit ( unit ) ; var tmp ; begin
49874: LD_INT 0
49876: PPUSH
49877: PPUSH
// if not IsInUnit ( unit ) then
49878: LD_VAR 0 1
49882: PPUSH
49883: CALL_OW 310
49887: NOT
49888: IFFALSE 49892
// exit ;
49890: GO 49952
// tmp := IsInUnit ( unit ) ;
49892: LD_ADDR_VAR 0 3
49896: PUSH
49897: LD_VAR 0 1
49901: PPUSH
49902: CALL_OW 310
49906: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49907: LD_VAR 0 3
49911: PPUSH
49912: CALL_OW 247
49916: PUSH
49917: LD_INT 2
49919: EQUAL
49920: IFFALSE 49933
// ComExitVehicle ( unit ) else
49922: LD_VAR 0 1
49926: PPUSH
49927: CALL_OW 121
49931: GO 49942
// ComExitBuilding ( unit ) ;
49933: LD_VAR 0 1
49937: PPUSH
49938: CALL_OW 122
// result := tmp ;
49942: LD_ADDR_VAR 0 2
49946: PUSH
49947: LD_VAR 0 3
49951: ST_TO_ADDR
// end ;
49952: LD_VAR 0 2
49956: RET
// export function ComExitAll ( units ) ; var i ; begin
49957: LD_INT 0
49959: PPUSH
49960: PPUSH
// if not units then
49961: LD_VAR 0 1
49965: NOT
49966: IFFALSE 49970
// exit ;
49968: GO 49996
// for i in units do
49970: LD_ADDR_VAR 0 3
49974: PUSH
49975: LD_VAR 0 1
49979: PUSH
49980: FOR_IN
49981: IFFALSE 49994
// ComExit ( i ) ;
49983: LD_VAR 0 3
49987: PPUSH
49988: CALL 49874 0 1
49992: GO 49980
49994: POP
49995: POP
// end ;
49996: LD_VAR 0 2
50000: RET
// export function ResetHc ; begin
50001: LD_INT 0
50003: PPUSH
// InitHc ;
50004: CALL_OW 19
// hc_importance := 0 ;
50008: LD_ADDR_OWVAR 32
50012: PUSH
50013: LD_INT 0
50015: ST_TO_ADDR
// end ;
50016: LD_VAR 0 1
50020: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50021: LD_INT 0
50023: PPUSH
50024: PPUSH
50025: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50026: LD_ADDR_VAR 0 6
50030: PUSH
50031: LD_VAR 0 1
50035: PUSH
50036: LD_VAR 0 3
50040: PLUS
50041: PUSH
50042: LD_INT 2
50044: DIV
50045: ST_TO_ADDR
// if _x < 0 then
50046: LD_VAR 0 6
50050: PUSH
50051: LD_INT 0
50053: LESS
50054: IFFALSE 50071
// _x := _x * - 1 ;
50056: LD_ADDR_VAR 0 6
50060: PUSH
50061: LD_VAR 0 6
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: MUL
50070: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50071: LD_ADDR_VAR 0 7
50075: PUSH
50076: LD_VAR 0 2
50080: PUSH
50081: LD_VAR 0 4
50085: PLUS
50086: PUSH
50087: LD_INT 2
50089: DIV
50090: ST_TO_ADDR
// if _y < 0 then
50091: LD_VAR 0 7
50095: PUSH
50096: LD_INT 0
50098: LESS
50099: IFFALSE 50116
// _y := _y * - 1 ;
50101: LD_ADDR_VAR 0 7
50105: PUSH
50106: LD_VAR 0 7
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: MUL
50115: ST_TO_ADDR
// result := [ _x , _y ] ;
50116: LD_ADDR_VAR 0 5
50120: PUSH
50121: LD_VAR 0 6
50125: PUSH
50126: LD_VAR 0 7
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: ST_TO_ADDR
// end ;
50135: LD_VAR 0 5
50139: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50140: LD_INT 0
50142: PPUSH
50143: PPUSH
50144: PPUSH
50145: PPUSH
// task := GetTaskList ( unit ) ;
50146: LD_ADDR_VAR 0 7
50150: PUSH
50151: LD_VAR 0 1
50155: PPUSH
50156: CALL_OW 437
50160: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50161: LD_VAR 0 7
50165: NOT
50166: IFFALSE 50185
50168: PUSH
50169: LD_VAR 0 1
50173: PPUSH
50174: LD_VAR 0 2
50178: PPUSH
50179: CALL_OW 308
50183: NOT
50184: AND
50185: IFFALSE 50189
// exit ;
50187: GO 50307
// if IsInArea ( unit , area ) then
50189: LD_VAR 0 1
50193: PPUSH
50194: LD_VAR 0 2
50198: PPUSH
50199: CALL_OW 308
50203: IFFALSE 50221
// begin ComMoveToArea ( unit , goAway ) ;
50205: LD_VAR 0 1
50209: PPUSH
50210: LD_VAR 0 3
50214: PPUSH
50215: CALL_OW 113
// exit ;
50219: GO 50307
// end ; if task [ 1 ] [ 1 ] <> M then
50221: LD_VAR 0 7
50225: PUSH
50226: LD_INT 1
50228: ARRAY
50229: PUSH
50230: LD_INT 1
50232: ARRAY
50233: PUSH
50234: LD_STRING M
50236: NONEQUAL
50237: IFFALSE 50241
// exit ;
50239: GO 50307
// x := task [ 1 ] [ 2 ] ;
50241: LD_ADDR_VAR 0 5
50245: PUSH
50246: LD_VAR 0 7
50250: PUSH
50251: LD_INT 1
50253: ARRAY
50254: PUSH
50255: LD_INT 2
50257: ARRAY
50258: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50259: LD_ADDR_VAR 0 6
50263: PUSH
50264: LD_VAR 0 7
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: PUSH
50273: LD_INT 3
50275: ARRAY
50276: ST_TO_ADDR
// if InArea ( x , y , area ) then
50277: LD_VAR 0 5
50281: PPUSH
50282: LD_VAR 0 6
50286: PPUSH
50287: LD_VAR 0 2
50291: PPUSH
50292: CALL_OW 309
50296: IFFALSE 50307
// ComStop ( unit ) ;
50298: LD_VAR 0 1
50302: PPUSH
50303: CALL_OW 141
// end ;
50307: LD_VAR 0 4
50311: RET
// export function Abs ( value ) ; begin
50312: LD_INT 0
50314: PPUSH
// result := value ;
50315: LD_ADDR_VAR 0 2
50319: PUSH
50320: LD_VAR 0 1
50324: ST_TO_ADDR
// if value < 0 then
50325: LD_VAR 0 1
50329: PUSH
50330: LD_INT 0
50332: LESS
50333: IFFALSE 50350
// result := value * - 1 ;
50335: LD_ADDR_VAR 0 2
50339: PUSH
50340: LD_VAR 0 1
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: MUL
50349: ST_TO_ADDR
// end ;
50350: LD_VAR 0 2
50354: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50355: LD_INT 0
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
50361: PPUSH
50362: PPUSH
50363: PPUSH
50364: PPUSH
// if not unit or not building then
50365: LD_VAR 0 1
50369: NOT
50370: IFTRUE 50379
50372: PUSH
50373: LD_VAR 0 2
50377: NOT
50378: OR
50379: IFFALSE 50383
// exit ;
50381: GO 50611
// x := GetX ( building ) ;
50383: LD_ADDR_VAR 0 4
50387: PUSH
50388: LD_VAR 0 2
50392: PPUSH
50393: CALL_OW 250
50397: ST_TO_ADDR
// y := GetY ( building ) ;
50398: LD_ADDR_VAR 0 6
50402: PUSH
50403: LD_VAR 0 2
50407: PPUSH
50408: CALL_OW 251
50412: ST_TO_ADDR
// d := GetDir ( building ) ;
50413: LD_ADDR_VAR 0 8
50417: PUSH
50418: LD_VAR 0 2
50422: PPUSH
50423: CALL_OW 254
50427: ST_TO_ADDR
// r := 4 ;
50428: LD_ADDR_VAR 0 9
50432: PUSH
50433: LD_INT 4
50435: ST_TO_ADDR
// for i := 1 to 5 do
50436: LD_ADDR_VAR 0 10
50440: PUSH
50441: DOUBLE
50442: LD_INT 1
50444: DEC
50445: ST_TO_ADDR
50446: LD_INT 5
50448: PUSH
50449: FOR_TO
50450: IFFALSE 50609
// begin _x := ShiftX ( x , d , r + i ) ;
50452: LD_ADDR_VAR 0 5
50456: PUSH
50457: LD_VAR 0 4
50461: PPUSH
50462: LD_VAR 0 8
50466: PPUSH
50467: LD_VAR 0 9
50471: PUSH
50472: LD_VAR 0 10
50476: PLUS
50477: PPUSH
50478: CALL_OW 272
50482: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50483: LD_ADDR_VAR 0 7
50487: PUSH
50488: LD_VAR 0 6
50492: PPUSH
50493: LD_VAR 0 8
50497: PPUSH
50498: LD_VAR 0 9
50502: PUSH
50503: LD_VAR 0 10
50507: PLUS
50508: PPUSH
50509: CALL_OW 273
50513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50514: LD_VAR 0 5
50518: PPUSH
50519: LD_VAR 0 7
50523: PPUSH
50524: CALL_OW 488
50528: IFFALSE 50563
50530: PUSH
50531: LD_VAR 0 5
50535: PPUSH
50536: LD_VAR 0 7
50540: PPUSH
50541: CALL_OW 428
50545: PPUSH
50546: CALL_OW 247
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: IN
50561: NOT
50562: AND
50563: IFFALSE 50607
// begin ComMoveXY ( unit , _x , _y ) ;
50565: LD_VAR 0 1
50569: PPUSH
50570: LD_VAR 0 5
50574: PPUSH
50575: LD_VAR 0 7
50579: PPUSH
50580: CALL_OW 111
// result := [ _x , _y ] ;
50584: LD_ADDR_VAR 0 3
50588: PUSH
50589: LD_VAR 0 5
50593: PUSH
50594: LD_VAR 0 7
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// exit ;
50603: POP
50604: POP
50605: GO 50611
// end ; end ;
50607: GO 50449
50609: POP
50610: POP
// end ;
50611: LD_VAR 0 3
50615: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50616: LD_INT 0
50618: PPUSH
50619: PPUSH
50620: PPUSH
// result := 0 ;
50621: LD_ADDR_VAR 0 3
50625: PUSH
50626: LD_INT 0
50628: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50629: LD_VAR 0 1
50633: PUSH
50634: LD_INT 0
50636: LESS
50637: IFTRUE 50649
50639: PUSH
50640: LD_VAR 0 1
50644: PUSH
50645: LD_INT 8
50647: GREATER
50648: OR
50649: IFTRUE 50661
50651: PUSH
50652: LD_VAR 0 2
50656: PUSH
50657: LD_INT 0
50659: LESS
50660: OR
50661: IFTRUE 50673
50663: PUSH
50664: LD_VAR 0 2
50668: PUSH
50669: LD_INT 8
50671: GREATER
50672: OR
50673: IFFALSE 50677
// exit ;
50675: GO 50752
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50677: LD_ADDR_VAR 0 4
50681: PUSH
50682: LD_INT 22
50684: PUSH
50685: LD_VAR 0 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PPUSH
50694: CALL_OW 69
50698: PUSH
50699: FOR_IN
50700: IFFALSE 50750
// begin un := UnitShoot ( i ) ;
50702: LD_ADDR_VAR 0 5
50706: PUSH
50707: LD_VAR 0 4
50711: PPUSH
50712: CALL_OW 504
50716: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50717: LD_VAR 0 5
50721: PPUSH
50722: CALL_OW 255
50726: PUSH
50727: LD_VAR 0 1
50731: EQUAL
50732: IFFALSE 50748
// begin result := un ;
50734: LD_ADDR_VAR 0 3
50738: PUSH
50739: LD_VAR 0 5
50743: ST_TO_ADDR
// exit ;
50744: POP
50745: POP
50746: GO 50752
// end ; end ;
50748: GO 50699
50750: POP
50751: POP
// end ;
50752: LD_VAR 0 3
50756: RET
// export function GetCargoBay ( units ) ; begin
50757: LD_INT 0
50759: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50760: LD_ADDR_VAR 0 2
50764: PUSH
50765: LD_VAR 0 1
50769: PPUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 34
50775: PUSH
50776: LD_INT 12
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 34
50785: PUSH
50786: LD_INT 51
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 34
50795: PUSH
50796: LD_INT 32
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 34
50805: PUSH
50806: LD_INT 89
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: PPUSH
50820: CALL_OW 72
50824: ST_TO_ADDR
// end ;
50825: LD_VAR 0 2
50829: RET
// export function Negate ( value ) ; begin
50830: LD_INT 0
50832: PPUSH
// result := not value ;
50833: LD_ADDR_VAR 0 2
50837: PUSH
50838: LD_VAR 0 1
50842: NOT
50843: ST_TO_ADDR
// end ;
50844: LD_VAR 0 2
50848: RET
// export function Inc ( value ) ; begin
50849: LD_INT 0
50851: PPUSH
// result := value + 1 ;
50852: LD_ADDR_VAR 0 2
50856: PUSH
50857: LD_VAR 0 1
50861: PUSH
50862: LD_INT 1
50864: PLUS
50865: ST_TO_ADDR
// end ;
50866: LD_VAR 0 2
50870: RET
// export function Dec ( value ) ; begin
50871: LD_INT 0
50873: PPUSH
// result := value - 1 ;
50874: LD_ADDR_VAR 0 2
50878: PUSH
50879: LD_VAR 0 1
50883: PUSH
50884: LD_INT 1
50886: MINUS
50887: ST_TO_ADDR
// end ;
50888: LD_VAR 0 2
50892: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50893: LD_INT 0
50895: PPUSH
50896: PPUSH
50897: PPUSH
50898: PPUSH
50899: PPUSH
50900: PPUSH
50901: PPUSH
50902: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50903: LD_VAR 0 1
50907: PPUSH
50908: LD_VAR 0 2
50912: PPUSH
50913: CALL_OW 488
50917: NOT
50918: IFTRUE 50937
50920: PUSH
50921: LD_VAR 0 3
50925: PPUSH
50926: LD_VAR 0 4
50930: PPUSH
50931: CALL_OW 488
50935: NOT
50936: OR
50937: IFFALSE 50950
// begin result := - 1 ;
50939: LD_ADDR_VAR 0 5
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: ST_TO_ADDR
// exit ;
50948: GO 51185
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50950: LD_ADDR_VAR 0 12
50954: PUSH
50955: LD_VAR 0 1
50959: PPUSH
50960: LD_VAR 0 2
50964: PPUSH
50965: LD_VAR 0 3
50969: PPUSH
50970: LD_VAR 0 4
50974: PPUSH
50975: CALL 50021 0 4
50979: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50980: LD_ADDR_VAR 0 11
50984: PUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: LD_VAR 0 2
50994: PPUSH
50995: LD_VAR 0 12
50999: PUSH
51000: LD_INT 1
51002: ARRAY
51003: PPUSH
51004: LD_VAR 0 12
51008: PUSH
51009: LD_INT 2
51011: ARRAY
51012: PPUSH
51013: CALL_OW 298
51017: ST_TO_ADDR
// distance := 9999 ;
51018: LD_ADDR_VAR 0 10
51022: PUSH
51023: LD_INT 9999
51025: ST_TO_ADDR
// for i := 0 to 5 do
51026: LD_ADDR_VAR 0 6
51030: PUSH
51031: DOUBLE
51032: LD_INT 0
51034: DEC
51035: ST_TO_ADDR
51036: LD_INT 5
51038: PUSH
51039: FOR_TO
51040: IFFALSE 51183
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51042: LD_ADDR_VAR 0 7
51046: PUSH
51047: LD_VAR 0 1
51051: PPUSH
51052: LD_VAR 0 6
51056: PPUSH
51057: LD_VAR 0 11
51061: PPUSH
51062: CALL_OW 272
51066: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51067: LD_ADDR_VAR 0 8
51071: PUSH
51072: LD_VAR 0 2
51076: PPUSH
51077: LD_VAR 0 6
51081: PPUSH
51082: LD_VAR 0 11
51086: PPUSH
51087: CALL_OW 273
51091: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51092: LD_VAR 0 7
51096: PPUSH
51097: LD_VAR 0 8
51101: PPUSH
51102: CALL_OW 488
51106: NOT
51107: IFFALSE 51111
// continue ;
51109: GO 51039
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51111: LD_ADDR_VAR 0 9
51115: PUSH
51116: LD_VAR 0 12
51120: PUSH
51121: LD_INT 1
51123: ARRAY
51124: PPUSH
51125: LD_VAR 0 12
51129: PUSH
51130: LD_INT 2
51132: ARRAY
51133: PPUSH
51134: LD_VAR 0 7
51138: PPUSH
51139: LD_VAR 0 8
51143: PPUSH
51144: CALL_OW 298
51148: ST_TO_ADDR
// if tmp < distance then
51149: LD_VAR 0 9
51153: PUSH
51154: LD_VAR 0 10
51158: LESS
51159: IFFALSE 51181
// begin result := i ;
51161: LD_ADDR_VAR 0 5
51165: PUSH
51166: LD_VAR 0 6
51170: ST_TO_ADDR
// distance := tmp ;
51171: LD_ADDR_VAR 0 10
51175: PUSH
51176: LD_VAR 0 9
51180: ST_TO_ADDR
// end ; end ;
51181: GO 51039
51183: POP
51184: POP
// end ;
51185: LD_VAR 0 5
51189: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51190: LD_INT 0
51192: PPUSH
51193: PPUSH
// if not driver or not IsInUnit ( driver ) then
51194: LD_VAR 0 1
51198: NOT
51199: IFTRUE 51213
51201: PUSH
51202: LD_VAR 0 1
51206: PPUSH
51207: CALL_OW 310
51211: NOT
51212: OR
51213: IFFALSE 51217
// exit ;
51215: GO 51307
// vehicle := IsInUnit ( driver ) ;
51217: LD_ADDR_VAR 0 3
51221: PUSH
51222: LD_VAR 0 1
51226: PPUSH
51227: CALL_OW 310
51231: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51232: LD_VAR 0 1
51236: PPUSH
51237: LD_STRING \
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: PUSH
51267: LD_STRING E
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_VAR 0 3
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PPUSH
51303: CALL_OW 446
// end ;
51307: LD_VAR 0 2
51311: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51312: LD_INT 0
51314: PPUSH
51315: PPUSH
// if not driver or not IsInUnit ( driver ) then
51316: LD_VAR 0 1
51320: NOT
51321: IFTRUE 51335
51323: PUSH
51324: LD_VAR 0 1
51328: PPUSH
51329: CALL_OW 310
51333: NOT
51334: OR
51335: IFFALSE 51339
// exit ;
51337: GO 51429
// vehicle := IsInUnit ( driver ) ;
51339: LD_ADDR_VAR 0 3
51343: PUSH
51344: LD_VAR 0 1
51348: PPUSH
51349: CALL_OW 310
51353: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51354: LD_VAR 0 1
51358: PPUSH
51359: LD_STRING \
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: PUSH
51389: LD_STRING E
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_VAR 0 3
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PPUSH
51425: CALL_OW 447
// end ;
51429: LD_VAR 0 2
51433: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51434: LD_INT 0
51436: PPUSH
51437: PPUSH
51438: PPUSH
// tmp := [ ] ;
51439: LD_ADDR_VAR 0 5
51443: PUSH
51444: EMPTY
51445: ST_TO_ADDR
// for i in units do
51446: LD_ADDR_VAR 0 4
51450: PUSH
51451: LD_VAR 0 1
51455: PUSH
51456: FOR_IN
51457: IFFALSE 51495
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51459: LD_ADDR_VAR 0 5
51463: PUSH
51464: LD_VAR 0 5
51468: PPUSH
51469: LD_VAR 0 5
51473: PUSH
51474: LD_INT 1
51476: PLUS
51477: PPUSH
51478: LD_VAR 0 4
51482: PPUSH
51483: CALL_OW 256
51487: PPUSH
51488: CALL_OW 2
51492: ST_TO_ADDR
51493: GO 51456
51495: POP
51496: POP
// if not tmp then
51497: LD_VAR 0 5
51501: NOT
51502: IFFALSE 51506
// exit ;
51504: GO 51554
// if asc then
51506: LD_VAR 0 2
51510: IFFALSE 51534
// result := SortListByListAsc ( units , tmp ) else
51512: LD_ADDR_VAR 0 3
51516: PUSH
51517: LD_VAR 0 1
51521: PPUSH
51522: LD_VAR 0 5
51526: PPUSH
51527: CALL_OW 76
51531: ST_TO_ADDR
51532: GO 51554
// result := SortListByListDesc ( units , tmp ) ;
51534: LD_ADDR_VAR 0 3
51538: PUSH
51539: LD_VAR 0 1
51543: PPUSH
51544: LD_VAR 0 5
51548: PPUSH
51549: CALL_OW 77
51553: ST_TO_ADDR
// end ;
51554: LD_VAR 0 3
51558: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51559: LD_INT 0
51561: PPUSH
51562: PPUSH
// task := GetTaskList ( mech ) ;
51563: LD_ADDR_VAR 0 4
51567: PUSH
51568: LD_VAR 0 1
51572: PPUSH
51573: CALL_OW 437
51577: ST_TO_ADDR
// if not task then
51578: LD_VAR 0 4
51582: NOT
51583: IFFALSE 51587
// exit ;
51585: GO 51631
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51587: LD_ADDR_VAR 0 3
51591: PUSH
51592: LD_VAR 0 4
51596: PUSH
51597: LD_INT 1
51599: ARRAY
51600: PUSH
51601: LD_INT 1
51603: ARRAY
51604: PUSH
51605: LD_STRING r
51607: EQUAL
51608: IFFALSE 51630
51610: PUSH
51611: LD_VAR 0 4
51615: PUSH
51616: LD_INT 1
51618: ARRAY
51619: PUSH
51620: LD_INT 4
51622: ARRAY
51623: PUSH
51624: LD_VAR 0 2
51628: EQUAL
51629: AND
51630: ST_TO_ADDR
// end ;
51631: LD_VAR 0 3
51635: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51636: LD_INT 0
51638: PPUSH
// SetDir ( unit , d ) ;
51639: LD_VAR 0 1
51643: PPUSH
51644: LD_VAR 0 4
51648: PPUSH
51649: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51653: LD_ADDR_VAR 0 6
51657: PUSH
51658: LD_VAR 0 1
51662: PPUSH
51663: LD_VAR 0 2
51667: PPUSH
51668: LD_VAR 0 3
51672: PPUSH
51673: LD_VAR 0 5
51677: PPUSH
51678: CALL_OW 48
51682: ST_TO_ADDR
// end ;
51683: LD_VAR 0 6
51687: RET
// export function ToNaturalNumber ( number ) ; begin
51688: LD_INT 0
51690: PPUSH
// result := number div 1 ;
51691: LD_ADDR_VAR 0 2
51695: PUSH
51696: LD_VAR 0 1
51700: PUSH
51701: LD_INT 1
51703: DIV
51704: ST_TO_ADDR
// if number < 0 then
51705: LD_VAR 0 1
51709: PUSH
51710: LD_INT 0
51712: LESS
51713: IFFALSE 51723
// result := 0 ;
51715: LD_ADDR_VAR 0 2
51719: PUSH
51720: LD_INT 0
51722: ST_TO_ADDR
// end ;
51723: LD_VAR 0 2
51727: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51728: LD_INT 0
51730: PPUSH
51731: PPUSH
51732: PPUSH
// if not buildings then
51733: LD_VAR 0 1
51737: NOT
51738: IFFALSE 51742
// exit ;
51740: GO 51857
// tmp := [ ] ;
51742: LD_ADDR_VAR 0 5
51746: PUSH
51747: EMPTY
51748: ST_TO_ADDR
// for b in buildings do
51749: LD_ADDR_VAR 0 4
51753: PUSH
51754: LD_VAR 0 1
51758: PUSH
51759: FOR_IN
51760: IFFALSE 51798
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51762: LD_ADDR_VAR 0 5
51766: PUSH
51767: LD_VAR 0 5
51771: PPUSH
51772: LD_VAR 0 5
51776: PUSH
51777: LD_INT 1
51779: PLUS
51780: PPUSH
51781: LD_VAR 0 4
51785: PPUSH
51786: CALL_OW 266
51790: PPUSH
51791: CALL_OW 1
51795: ST_TO_ADDR
51796: GO 51759
51798: POP
51799: POP
// if not tmp then
51800: LD_VAR 0 5
51804: NOT
51805: IFFALSE 51809
// exit ;
51807: GO 51857
// if asc then
51809: LD_VAR 0 2
51813: IFFALSE 51837
// result := SortListByListAsc ( buildings , tmp ) else
51815: LD_ADDR_VAR 0 3
51819: PUSH
51820: LD_VAR 0 1
51824: PPUSH
51825: LD_VAR 0 5
51829: PPUSH
51830: CALL_OW 76
51834: ST_TO_ADDR
51835: GO 51857
// result := SortListByListDesc ( buildings , tmp ) ;
51837: LD_ADDR_VAR 0 3
51841: PUSH
51842: LD_VAR 0 1
51846: PPUSH
51847: LD_VAR 0 5
51851: PPUSH
51852: CALL_OW 77
51856: ST_TO_ADDR
// end ;
51857: LD_VAR 0 3
51861: RET
// export function SortByClass ( units , class ) ; var un ; begin
51862: LD_INT 0
51864: PPUSH
51865: PPUSH
// if not units or not class then
51866: LD_VAR 0 1
51870: NOT
51871: IFTRUE 51880
51873: PUSH
51874: LD_VAR 0 2
51878: NOT
51879: OR
51880: IFFALSE 51884
// exit ;
51882: GO 51979
// result := [ ] ;
51884: LD_ADDR_VAR 0 3
51888: PUSH
51889: EMPTY
51890: ST_TO_ADDR
// for un in units do
51891: LD_ADDR_VAR 0 4
51895: PUSH
51896: LD_VAR 0 1
51900: PUSH
51901: FOR_IN
51902: IFFALSE 51977
// if GetClass ( un ) = class then
51904: LD_VAR 0 4
51908: PPUSH
51909: CALL_OW 257
51913: PUSH
51914: LD_VAR 0 2
51918: EQUAL
51919: IFFALSE 51946
// result := Insert ( result , 1 , un ) else
51921: LD_ADDR_VAR 0 3
51925: PUSH
51926: LD_VAR 0 3
51930: PPUSH
51931: LD_INT 1
51933: PPUSH
51934: LD_VAR 0 4
51938: PPUSH
51939: CALL_OW 2
51943: ST_TO_ADDR
51944: GO 51975
// result := Replace ( result , result + 1 , un ) ;
51946: LD_ADDR_VAR 0 3
51950: PUSH
51951: LD_VAR 0 3
51955: PPUSH
51956: LD_VAR 0 3
51960: PUSH
51961: LD_INT 1
51963: PLUS
51964: PPUSH
51965: LD_VAR 0 4
51969: PPUSH
51970: CALL_OW 1
51974: ST_TO_ADDR
51975: GO 51901
51977: POP
51978: POP
// end ;
51979: LD_VAR 0 3
51983: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51984: LD_INT 0
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
51992: PPUSH
// result := [ ] ;
51993: LD_ADDR_VAR 0 4
51997: PUSH
51998: EMPTY
51999: ST_TO_ADDR
// if x - r < 0 then
52000: LD_VAR 0 1
52004: PUSH
52005: LD_VAR 0 3
52009: MINUS
52010: PUSH
52011: LD_INT 0
52013: LESS
52014: IFFALSE 52026
// min_x := 0 else
52016: LD_ADDR_VAR 0 8
52020: PUSH
52021: LD_INT 0
52023: ST_TO_ADDR
52024: GO 52042
// min_x := x - r ;
52026: LD_ADDR_VAR 0 8
52030: PUSH
52031: LD_VAR 0 1
52035: PUSH
52036: LD_VAR 0 3
52040: MINUS
52041: ST_TO_ADDR
// if y - r < 0 then
52042: LD_VAR 0 2
52046: PUSH
52047: LD_VAR 0 3
52051: MINUS
52052: PUSH
52053: LD_INT 0
52055: LESS
52056: IFFALSE 52068
// min_y := 0 else
52058: LD_ADDR_VAR 0 7
52062: PUSH
52063: LD_INT 0
52065: ST_TO_ADDR
52066: GO 52084
// min_y := y - r ;
52068: LD_ADDR_VAR 0 7
52072: PUSH
52073: LD_VAR 0 2
52077: PUSH
52078: LD_VAR 0 3
52082: MINUS
52083: ST_TO_ADDR
// max_x := x + r ;
52084: LD_ADDR_VAR 0 9
52088: PUSH
52089: LD_VAR 0 1
52093: PUSH
52094: LD_VAR 0 3
52098: PLUS
52099: ST_TO_ADDR
// max_y := y + r ;
52100: LD_ADDR_VAR 0 10
52104: PUSH
52105: LD_VAR 0 2
52109: PUSH
52110: LD_VAR 0 3
52114: PLUS
52115: ST_TO_ADDR
// for _x = min_x to max_x do
52116: LD_ADDR_VAR 0 5
52120: PUSH
52121: DOUBLE
52122: LD_VAR 0 8
52126: DEC
52127: ST_TO_ADDR
52128: LD_VAR 0 9
52132: PUSH
52133: FOR_TO
52134: IFFALSE 52235
// for _y = min_y to max_y do
52136: LD_ADDR_VAR 0 6
52140: PUSH
52141: DOUBLE
52142: LD_VAR 0 7
52146: DEC
52147: ST_TO_ADDR
52148: LD_VAR 0 10
52152: PUSH
52153: FOR_TO
52154: IFFALSE 52231
// begin if not ValidHex ( _x , _y ) then
52156: LD_VAR 0 5
52160: PPUSH
52161: LD_VAR 0 6
52165: PPUSH
52166: CALL_OW 488
52170: NOT
52171: IFFALSE 52175
// continue ;
52173: GO 52153
// if GetResourceTypeXY ( _x , _y ) then
52175: LD_VAR 0 5
52179: PPUSH
52180: LD_VAR 0 6
52184: PPUSH
52185: CALL_OW 283
52189: IFFALSE 52229
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52191: LD_ADDR_VAR 0 4
52195: PUSH
52196: LD_VAR 0 4
52200: PPUSH
52201: LD_VAR 0 4
52205: PUSH
52206: LD_INT 1
52208: PLUS
52209: PPUSH
52210: LD_VAR 0 5
52214: PUSH
52215: LD_VAR 0 6
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PPUSH
52224: CALL_OW 1
52228: ST_TO_ADDR
// end ;
52229: GO 52153
52231: POP
52232: POP
52233: GO 52133
52235: POP
52236: POP
// end ;
52237: LD_VAR 0 4
52241: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52242: LD_INT 0
52244: PPUSH
52245: PPUSH
52246: PPUSH
52247: PPUSH
52248: PPUSH
52249: PPUSH
52250: PPUSH
52251: PPUSH
// if not units then
52252: LD_VAR 0 1
52256: NOT
52257: IFFALSE 52261
// exit ;
52259: GO 52793
// result := UnitFilter ( units , [ f_ok ] ) ;
52261: LD_ADDR_VAR 0 3
52265: PUSH
52266: LD_VAR 0 1
52270: PPUSH
52271: LD_INT 50
52273: PUSH
52274: EMPTY
52275: LIST
52276: PPUSH
52277: CALL_OW 72
52281: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52282: LD_ADDR_VAR 0 8
52286: PUSH
52287: LD_VAR 0 1
52291: PUSH
52292: LD_INT 1
52294: ARRAY
52295: PPUSH
52296: CALL_OW 255
52300: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52301: LD_ADDR_VAR 0 10
52305: PUSH
52306: LD_INT 29
52308: PUSH
52309: LD_INT 91
52311: PUSH
52312: LD_INT 49
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: ST_TO_ADDR
// if not result then
52320: LD_VAR 0 3
52324: NOT
52325: IFFALSE 52329
// exit ;
52327: GO 52793
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52329: LD_ADDR_VAR 0 5
52333: PUSH
52334: LD_INT 81
52336: PUSH
52337: LD_VAR 0 8
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PPUSH
52346: CALL_OW 69
52350: ST_TO_ADDR
// for i in result do
52351: LD_ADDR_VAR 0 4
52355: PUSH
52356: LD_VAR 0 3
52360: PUSH
52361: FOR_IN
52362: IFFALSE 52791
// begin tag := GetTag ( i ) + 1 ;
52364: LD_ADDR_VAR 0 9
52368: PUSH
52369: LD_VAR 0 4
52373: PPUSH
52374: CALL_OW 110
52378: PUSH
52379: LD_INT 1
52381: PLUS
52382: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52383: LD_ADDR_VAR 0 7
52387: PUSH
52388: LD_VAR 0 4
52392: PPUSH
52393: CALL_OW 250
52397: PPUSH
52398: LD_VAR 0 4
52402: PPUSH
52403: CALL_OW 251
52407: PPUSH
52408: LD_INT 4
52410: PPUSH
52411: CALL 51984 0 3
52415: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52416: LD_VAR 0 4
52420: PPUSH
52421: CALL_OW 247
52425: PUSH
52426: LD_INT 2
52428: EQUAL
52429: IFFALSE 52441
52431: PUSH
52432: LD_VAR 0 7
52436: PUSH
52437: LD_INT 2
52439: GREATER
52440: AND
52441: IFFALSE 52461
52443: PUSH
52444: LD_VAR 0 4
52448: PPUSH
52449: CALL_OW 264
52453: PUSH
52454: LD_VAR 0 10
52458: IN
52459: NOT
52460: AND
52461: IFFALSE 52500
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52463: LD_VAR 0 4
52467: PPUSH
52468: LD_VAR 0 7
52472: PUSH
52473: LD_INT 1
52475: ARRAY
52476: PUSH
52477: LD_INT 1
52479: ARRAY
52480: PPUSH
52481: LD_VAR 0 7
52485: PUSH
52486: LD_INT 1
52488: ARRAY
52489: PUSH
52490: LD_INT 2
52492: ARRAY
52493: PPUSH
52494: CALL_OW 116
52498: GO 52789
// if path > tag then
52500: LD_VAR 0 2
52504: PUSH
52505: LD_VAR 0 9
52509: GREATER
52510: IFFALSE 52718
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52512: LD_ADDR_VAR 0 6
52516: PUSH
52517: LD_VAR 0 5
52521: PPUSH
52522: LD_INT 91
52524: PUSH
52525: LD_VAR 0 4
52529: PUSH
52530: LD_INT 8
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PPUSH
52538: CALL_OW 72
52542: ST_TO_ADDR
// if nearEnemy then
52543: LD_VAR 0 6
52547: IFFALSE 52616
// begin if GetWeapon ( i ) = ru_time_lapser then
52549: LD_VAR 0 4
52553: PPUSH
52554: CALL_OW 264
52558: PUSH
52559: LD_INT 49
52561: EQUAL
52562: IFFALSE 52590
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52564: LD_VAR 0 4
52568: PPUSH
52569: LD_VAR 0 6
52573: PPUSH
52574: LD_VAR 0 4
52578: PPUSH
52579: CALL_OW 74
52583: PPUSH
52584: CALL_OW 112
52588: GO 52614
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52590: LD_VAR 0 4
52594: PPUSH
52595: LD_VAR 0 6
52599: PPUSH
52600: LD_VAR 0 4
52604: PPUSH
52605: CALL_OW 74
52609: PPUSH
52610: CALL 53874 0 2
// end else
52614: GO 52716
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52616: LD_VAR 0 4
52620: PPUSH
52621: LD_VAR 0 2
52625: PUSH
52626: LD_VAR 0 9
52630: ARRAY
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: PPUSH
52636: LD_VAR 0 2
52640: PUSH
52641: LD_VAR 0 9
52645: ARRAY
52646: PUSH
52647: LD_INT 2
52649: ARRAY
52650: PPUSH
52651: CALL_OW 297
52655: PUSH
52656: LD_INT 6
52658: GREATER
52659: IFFALSE 52702
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52661: LD_VAR 0 4
52665: PPUSH
52666: LD_VAR 0 2
52670: PUSH
52671: LD_VAR 0 9
52675: ARRAY
52676: PUSH
52677: LD_INT 1
52679: ARRAY
52680: PPUSH
52681: LD_VAR 0 2
52685: PUSH
52686: LD_VAR 0 9
52690: ARRAY
52691: PUSH
52692: LD_INT 2
52694: ARRAY
52695: PPUSH
52696: CALL_OW 114
52700: GO 52716
// SetTag ( i , tag ) ;
52702: LD_VAR 0 4
52706: PPUSH
52707: LD_VAR 0 9
52711: PPUSH
52712: CALL_OW 109
// end else
52716: GO 52789
// if enemy then
52718: LD_VAR 0 5
52722: IFFALSE 52789
// begin if GetWeapon ( i ) = ru_time_lapser then
52724: LD_VAR 0 4
52728: PPUSH
52729: CALL_OW 264
52733: PUSH
52734: LD_INT 49
52736: EQUAL
52737: IFFALSE 52765
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52739: LD_VAR 0 4
52743: PPUSH
52744: LD_VAR 0 5
52748: PPUSH
52749: LD_VAR 0 4
52753: PPUSH
52754: CALL_OW 74
52758: PPUSH
52759: CALL_OW 112
52763: GO 52789
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52765: LD_VAR 0 4
52769: PPUSH
52770: LD_VAR 0 5
52774: PPUSH
52775: LD_VAR 0 4
52779: PPUSH
52780: CALL_OW 74
52784: PPUSH
52785: CALL 53874 0 2
// end ; end ;
52789: GO 52361
52791: POP
52792: POP
// end ;
52793: LD_VAR 0 3
52797: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52798: LD_INT 0
52800: PPUSH
52801: PPUSH
52802: PPUSH
// if not unit or IsInUnit ( unit ) then
52803: LD_VAR 0 1
52807: NOT
52808: IFTRUE 52821
52810: PUSH
52811: LD_VAR 0 1
52815: PPUSH
52816: CALL_OW 310
52820: OR
52821: IFFALSE 52825
// exit ;
52823: GO 52916
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52825: LD_ADDR_VAR 0 4
52829: PUSH
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL_OW 250
52839: PPUSH
52840: LD_VAR 0 2
52844: PPUSH
52845: LD_INT 1
52847: PPUSH
52848: CALL_OW 272
52852: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52853: LD_ADDR_VAR 0 5
52857: PUSH
52858: LD_VAR 0 1
52862: PPUSH
52863: CALL_OW 251
52867: PPUSH
52868: LD_VAR 0 2
52872: PPUSH
52873: LD_INT 1
52875: PPUSH
52876: CALL_OW 273
52880: ST_TO_ADDR
// if ValidHex ( x , y ) then
52881: LD_VAR 0 4
52885: PPUSH
52886: LD_VAR 0 5
52890: PPUSH
52891: CALL_OW 488
52895: IFFALSE 52916
// ComTurnXY ( unit , x , y ) ;
52897: LD_VAR 0 1
52901: PPUSH
52902: LD_VAR 0 4
52906: PPUSH
52907: LD_VAR 0 5
52911: PPUSH
52912: CALL_OW 118
// end ;
52916: LD_VAR 0 3
52920: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52921: LD_INT 0
52923: PPUSH
52924: PPUSH
// result := false ;
52925: LD_ADDR_VAR 0 3
52929: PUSH
52930: LD_INT 0
52932: ST_TO_ADDR
// if not units then
52933: LD_VAR 0 2
52937: NOT
52938: IFFALSE 52942
// exit ;
52940: GO 52987
// for i in units do
52942: LD_ADDR_VAR 0 4
52946: PUSH
52947: LD_VAR 0 2
52951: PUSH
52952: FOR_IN
52953: IFFALSE 52985
// if See ( side , i ) then
52955: LD_VAR 0 1
52959: PPUSH
52960: LD_VAR 0 4
52964: PPUSH
52965: CALL_OW 292
52969: IFFALSE 52983
// begin result := true ;
52971: LD_ADDR_VAR 0 3
52975: PUSH
52976: LD_INT 1
52978: ST_TO_ADDR
// exit ;
52979: POP
52980: POP
52981: GO 52987
// end ;
52983: GO 52952
52985: POP
52986: POP
// end ;
52987: LD_VAR 0 3
52991: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52992: LD_INT 0
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
// if not unit or not points then
52998: LD_VAR 0 1
53002: NOT
53003: IFTRUE 53012
53005: PUSH
53006: LD_VAR 0 2
53010: NOT
53011: OR
53012: IFFALSE 53016
// exit ;
53014: GO 53106
// dist := 99999 ;
53016: LD_ADDR_VAR 0 5
53020: PUSH
53021: LD_INT 99999
53023: ST_TO_ADDR
// for i in points do
53024: LD_ADDR_VAR 0 4
53028: PUSH
53029: LD_VAR 0 2
53033: PUSH
53034: FOR_IN
53035: IFFALSE 53104
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53037: LD_ADDR_VAR 0 6
53041: PUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: LD_VAR 0 4
53051: PUSH
53052: LD_INT 1
53054: ARRAY
53055: PPUSH
53056: LD_VAR 0 4
53060: PUSH
53061: LD_INT 2
53063: ARRAY
53064: PPUSH
53065: CALL_OW 297
53069: ST_TO_ADDR
// if tmpDist < dist then
53070: LD_VAR 0 6
53074: PUSH
53075: LD_VAR 0 5
53079: LESS
53080: IFFALSE 53102
// begin result := i ;
53082: LD_ADDR_VAR 0 3
53086: PUSH
53087: LD_VAR 0 4
53091: ST_TO_ADDR
// dist := tmpDist ;
53092: LD_ADDR_VAR 0 5
53096: PUSH
53097: LD_VAR 0 6
53101: ST_TO_ADDR
// end ; end ;
53102: GO 53034
53104: POP
53105: POP
// end ;
53106: LD_VAR 0 3
53110: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53111: LD_INT 0
53113: PPUSH
// uc_side := side ;
53114: LD_ADDR_OWVAR 20
53118: PUSH
53119: LD_VAR 0 1
53123: ST_TO_ADDR
// uc_nation := 3 ;
53124: LD_ADDR_OWVAR 21
53128: PUSH
53129: LD_INT 3
53131: ST_TO_ADDR
// vc_chassis := 25 ;
53132: LD_ADDR_OWVAR 37
53136: PUSH
53137: LD_INT 25
53139: ST_TO_ADDR
// vc_engine := engine_siberite ;
53140: LD_ADDR_OWVAR 39
53144: PUSH
53145: LD_INT 3
53147: ST_TO_ADDR
// vc_control := control_computer ;
53148: LD_ADDR_OWVAR 38
53152: PUSH
53153: LD_INT 3
53155: ST_TO_ADDR
// vc_weapon := 59 ;
53156: LD_ADDR_OWVAR 40
53160: PUSH
53161: LD_INT 59
53163: ST_TO_ADDR
// result := CreateVehicle ;
53164: LD_ADDR_VAR 0 5
53168: PUSH
53169: CALL_OW 45
53173: ST_TO_ADDR
// SetDir ( result , d ) ;
53174: LD_VAR 0 5
53178: PPUSH
53179: LD_VAR 0 4
53183: PPUSH
53184: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53188: LD_VAR 0 5
53192: PPUSH
53193: LD_VAR 0 2
53197: PPUSH
53198: LD_VAR 0 3
53202: PPUSH
53203: LD_INT 0
53205: PPUSH
53206: CALL_OW 48
// end ;
53210: LD_VAR 0 5
53214: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53215: LD_INT 0
53217: PPUSH
53218: PPUSH
53219: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53220: LD_ADDR_VAR 0 2
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53243: LD_VAR 0 1
53247: NOT
53248: IFTRUE 53281
53250: PUSH
53251: LD_VAR 0 1
53255: PPUSH
53256: CALL_OW 264
53260: PUSH
53261: LD_INT 12
53263: PUSH
53264: LD_INT 51
53266: PUSH
53267: LD_INT 32
53269: PUSH
53270: LD_INT 89
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: IN
53279: NOT
53280: OR
53281: IFFALSE 53285
// exit ;
53283: GO 53383
// for i := 1 to 3 do
53285: LD_ADDR_VAR 0 3
53289: PUSH
53290: DOUBLE
53291: LD_INT 1
53293: DEC
53294: ST_TO_ADDR
53295: LD_INT 3
53297: PUSH
53298: FOR_TO
53299: IFFALSE 53381
// begin tmp := GetCargo ( cargo , i ) ;
53301: LD_ADDR_VAR 0 4
53305: PUSH
53306: LD_VAR 0 1
53310: PPUSH
53311: LD_VAR 0 3
53315: PPUSH
53316: CALL_OW 289
53320: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53321: LD_ADDR_VAR 0 2
53325: PUSH
53326: LD_VAR 0 2
53330: PPUSH
53331: LD_VAR 0 3
53335: PPUSH
53336: LD_VAR 0 4
53340: PPUSH
53341: CALL_OW 1
53345: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53346: LD_ADDR_VAR 0 2
53350: PUSH
53351: LD_VAR 0 2
53355: PPUSH
53356: LD_INT 4
53358: PPUSH
53359: LD_VAR 0 2
53363: PUSH
53364: LD_INT 4
53366: ARRAY
53367: PUSH
53368: LD_VAR 0 4
53372: PLUS
53373: PPUSH
53374: CALL_OW 1
53378: ST_TO_ADDR
// end ;
53379: GO 53298
53381: POP
53382: POP
// end ;
53383: LD_VAR 0 2
53387: RET
// export function Length ( array ) ; begin
53388: LD_INT 0
53390: PPUSH
// result := array + 0 ;
53391: LD_ADDR_VAR 0 2
53395: PUSH
53396: LD_VAR 0 1
53400: PUSH
53401: LD_INT 0
53403: PLUS
53404: ST_TO_ADDR
// end ;
53405: LD_VAR 0 2
53409: RET
// export function PrepareArray ( array ) ; begin
53410: LD_INT 0
53412: PPUSH
// result := array diff 0 ;
53413: LD_ADDR_VAR 0 2
53417: PUSH
53418: LD_VAR 0 1
53422: PUSH
53423: LD_INT 0
53425: DIFF
53426: ST_TO_ADDR
// if not result [ 1 ] then
53427: LD_VAR 0 2
53431: PUSH
53432: LD_INT 1
53434: ARRAY
53435: NOT
53436: IFFALSE 53456
// result := Delete ( result , 1 ) ;
53438: LD_ADDR_VAR 0 2
53442: PUSH
53443: LD_VAR 0 2
53447: PPUSH
53448: LD_INT 1
53450: PPUSH
53451: CALL_OW 3
53455: ST_TO_ADDR
// end ;
53456: LD_VAR 0 2
53460: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53461: LD_INT 0
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
// sibRocketRange := 25 ;
53467: LD_ADDR_VAR 0 6
53471: PUSH
53472: LD_INT 25
53474: ST_TO_ADDR
// result := false ;
53475: LD_ADDR_VAR 0 4
53479: PUSH
53480: LD_INT 0
53482: ST_TO_ADDR
// for i := 0 to 5 do
53483: LD_ADDR_VAR 0 5
53487: PUSH
53488: DOUBLE
53489: LD_INT 0
53491: DEC
53492: ST_TO_ADDR
53493: LD_INT 5
53495: PUSH
53496: FOR_TO
53497: IFFALSE 53564
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53499: LD_VAR 0 1
53503: PPUSH
53504: LD_VAR 0 5
53508: PPUSH
53509: LD_VAR 0 6
53513: PPUSH
53514: CALL_OW 272
53518: PPUSH
53519: LD_VAR 0 2
53523: PPUSH
53524: LD_VAR 0 5
53528: PPUSH
53529: LD_VAR 0 6
53533: PPUSH
53534: CALL_OW 273
53538: PPUSH
53539: LD_VAR 0 3
53543: PPUSH
53544: CALL_OW 309
53548: IFFALSE 53562
// begin result := true ;
53550: LD_ADDR_VAR 0 4
53554: PUSH
53555: LD_INT 1
53557: ST_TO_ADDR
// exit ;
53558: POP
53559: POP
53560: GO 53566
// end ;
53562: GO 53496
53564: POP
53565: POP
// end ;
53566: LD_VAR 0 4
53570: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53571: LD_INT 0
53573: PPUSH
53574: PPUSH
53575: PPUSH
// if btype = b_depot then
53576: LD_VAR 0 2
53580: PUSH
53581: LD_INT 0
53583: EQUAL
53584: IFFALSE 53596
// begin result := true ;
53586: LD_ADDR_VAR 0 3
53590: PUSH
53591: LD_INT 1
53593: ST_TO_ADDR
// exit ;
53594: GO 53716
// end ; pom := GetBase ( depot ) ;
53596: LD_ADDR_VAR 0 4
53600: PUSH
53601: LD_VAR 0 1
53605: PPUSH
53606: CALL_OW 274
53610: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53611: LD_ADDR_VAR 0 5
53615: PUSH
53616: LD_VAR 0 2
53620: PPUSH
53621: LD_VAR 0 1
53625: PPUSH
53626: CALL_OW 248
53630: PPUSH
53631: CALL_OW 450
53635: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53636: LD_ADDR_VAR 0 3
53640: PUSH
53641: LD_VAR 0 4
53645: PPUSH
53646: LD_INT 1
53648: PPUSH
53649: CALL_OW 275
53653: PUSH
53654: LD_VAR 0 5
53658: PUSH
53659: LD_INT 1
53661: ARRAY
53662: GREATEREQUAL
53663: IFFALSE 53689
53665: PUSH
53666: LD_VAR 0 4
53670: PPUSH
53671: LD_INT 2
53673: PPUSH
53674: CALL_OW 275
53678: PUSH
53679: LD_VAR 0 5
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: GREATEREQUAL
53688: AND
53689: IFFALSE 53715
53691: PUSH
53692: LD_VAR 0 4
53696: PPUSH
53697: LD_INT 3
53699: PPUSH
53700: CALL_OW 275
53704: PUSH
53705: LD_VAR 0 5
53709: PUSH
53710: LD_INT 3
53712: ARRAY
53713: GREATEREQUAL
53714: AND
53715: ST_TO_ADDR
// end ;
53716: LD_VAR 0 3
53720: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53721: LD_INT 0
53723: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53724: LD_VAR 0 1
53728: PPUSH
53729: LD_VAR 0 2
53733: PPUSH
53734: LD_INT 0
53736: PPUSH
53737: LD_INT 0
53739: PPUSH
53740: LD_INT 1
53742: PPUSH
53743: LD_INT 0
53745: PPUSH
53746: CALL_OW 587
// end ;
53750: LD_VAR 0 3
53754: RET
// export function CenterOnNow ( unit ) ; begin
53755: LD_INT 0
53757: PPUSH
// result := IsInUnit ( unit ) ;
53758: LD_ADDR_VAR 0 2
53762: PUSH
53763: LD_VAR 0 1
53767: PPUSH
53768: CALL_OW 310
53772: ST_TO_ADDR
// if not result then
53773: LD_VAR 0 2
53777: NOT
53778: IFFALSE 53790
// result := unit ;
53780: LD_ADDR_VAR 0 2
53784: PUSH
53785: LD_VAR 0 1
53789: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53790: LD_VAR 0 1
53794: PPUSH
53795: CALL_OW 87
// end ;
53799: LD_VAR 0 2
53803: RET
// export function ComMoveHex ( unit , hex ) ; begin
53804: LD_INT 0
53806: PPUSH
// if not hex then
53807: LD_VAR 0 2
53811: NOT
53812: IFFALSE 53816
// exit ;
53814: GO 53869
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53816: LD_VAR 0 2
53820: PUSH
53821: LD_INT 1
53823: ARRAY
53824: PPUSH
53825: LD_VAR 0 2
53829: PUSH
53830: LD_INT 2
53832: ARRAY
53833: PPUSH
53834: CALL_OW 428
53838: IFFALSE 53842
// exit ;
53840: GO 53869
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53842: LD_VAR 0 1
53846: PPUSH
53847: LD_VAR 0 2
53851: PUSH
53852: LD_INT 1
53854: ARRAY
53855: PPUSH
53856: LD_VAR 0 2
53860: PUSH
53861: LD_INT 2
53863: ARRAY
53864: PPUSH
53865: CALL_OW 111
// end ;
53869: LD_VAR 0 3
53873: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53874: LD_INT 0
53876: PPUSH
53877: PPUSH
53878: PPUSH
// if not unit or not enemy then
53879: LD_VAR 0 1
53883: NOT
53884: IFTRUE 53893
53886: PUSH
53887: LD_VAR 0 2
53891: NOT
53892: OR
53893: IFFALSE 53897
// exit ;
53895: GO 54023
// x := GetX ( enemy ) ;
53897: LD_ADDR_VAR 0 4
53901: PUSH
53902: LD_VAR 0 2
53906: PPUSH
53907: CALL_OW 250
53911: ST_TO_ADDR
// y := GetY ( enemy ) ;
53912: LD_ADDR_VAR 0 5
53916: PUSH
53917: LD_VAR 0 2
53921: PPUSH
53922: CALL_OW 251
53926: ST_TO_ADDR
// if ValidHex ( x , y ) then
53927: LD_VAR 0 4
53931: PPUSH
53932: LD_VAR 0 5
53936: PPUSH
53937: CALL_OW 488
53941: IFFALSE 54023
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53943: LD_VAR 0 2
53947: PPUSH
53948: CALL_OW 247
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: IN
53963: IFTRUE 53986
53965: PUSH
53966: LD_VAR 0 1
53970: PPUSH
53971: CALL_OW 255
53975: PPUSH
53976: LD_VAR 0 2
53980: PPUSH
53981: CALL_OW 292
53985: OR
53986: IFFALSE 54004
// ComAttackUnit ( unit , enemy ) else
53988: LD_VAR 0 1
53992: PPUSH
53993: LD_VAR 0 2
53997: PPUSH
53998: CALL_OW 115
54002: GO 54023
// ComAgressiveMove ( unit , x , y ) ;
54004: LD_VAR 0 1
54008: PPUSH
54009: LD_VAR 0 4
54013: PPUSH
54014: LD_VAR 0 5
54018: PPUSH
54019: CALL_OW 114
// end ;
54023: LD_VAR 0 3
54027: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54028: LD_INT 0
54030: PPUSH
54031: PPUSH
54032: PPUSH
// list := AreaToList ( area , 0 ) ;
54033: LD_ADDR_VAR 0 5
54037: PUSH
54038: LD_VAR 0 1
54042: PPUSH
54043: LD_INT 0
54045: PPUSH
54046: CALL_OW 517
54050: ST_TO_ADDR
// if not list then
54051: LD_VAR 0 5
54055: NOT
54056: IFFALSE 54060
// exit ;
54058: GO 54190
// if all then
54060: LD_VAR 0 2
54064: IFFALSE 54152
// begin for i := 1 to list [ 1 ] do
54066: LD_ADDR_VAR 0 4
54070: PUSH
54071: DOUBLE
54072: LD_INT 1
54074: DEC
54075: ST_TO_ADDR
54076: LD_VAR 0 5
54080: PUSH
54081: LD_INT 1
54083: ARRAY
54084: PUSH
54085: FOR_TO
54086: IFFALSE 54148
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54088: LD_ADDR_VAR 0 3
54092: PUSH
54093: LD_VAR 0 3
54097: PPUSH
54098: LD_VAR 0 3
54102: PUSH
54103: LD_INT 1
54105: PLUS
54106: PPUSH
54107: LD_VAR 0 5
54111: PUSH
54112: LD_INT 1
54114: ARRAY
54115: PUSH
54116: LD_VAR 0 4
54120: ARRAY
54121: PUSH
54122: LD_VAR 0 5
54126: PUSH
54127: LD_INT 2
54129: ARRAY
54130: PUSH
54131: LD_VAR 0 4
54135: ARRAY
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PPUSH
54141: CALL_OW 1
54145: ST_TO_ADDR
54146: GO 54085
54148: POP
54149: POP
// exit ;
54150: GO 54190
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54152: LD_ADDR_VAR 0 3
54156: PUSH
54157: LD_VAR 0 5
54161: PUSH
54162: LD_INT 1
54164: ARRAY
54165: PUSH
54166: LD_INT 1
54168: ARRAY
54169: PUSH
54170: LD_VAR 0 5
54174: PUSH
54175: LD_INT 2
54177: ARRAY
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: ST_TO_ADDR
// end ;
54190: LD_VAR 0 3
54194: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54195: LD_INT 0
54197: PPUSH
54198: PPUSH
// list := AreaToList ( area , 0 ) ;
54199: LD_ADDR_VAR 0 4
54203: PUSH
54204: LD_VAR 0 1
54208: PPUSH
54209: LD_INT 0
54211: PPUSH
54212: CALL_OW 517
54216: ST_TO_ADDR
// if not list then
54217: LD_VAR 0 4
54221: NOT
54222: IFFALSE 54226
// exit ;
54224: GO 54267
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54226: LD_ADDR_VAR 0 3
54230: PUSH
54231: LD_VAR 0 4
54235: PUSH
54236: LD_INT 1
54238: ARRAY
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PUSH
54244: LD_VAR 0 4
54248: PUSH
54249: LD_INT 2
54251: ARRAY
54252: PUSH
54253: LD_INT 1
54255: ARRAY
54256: PUSH
54257: LD_VAR 0 2
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// end ;
54267: LD_VAR 0 3
54271: RET
// export function First ( array ) ; begin
54272: LD_INT 0
54274: PPUSH
// if not array then
54275: LD_VAR 0 1
54279: NOT
54280: IFFALSE 54284
// exit ;
54282: GO 54298
// result := array [ 1 ] ;
54284: LD_ADDR_VAR 0 2
54288: PUSH
54289: LD_VAR 0 1
54293: PUSH
54294: LD_INT 1
54296: ARRAY
54297: ST_TO_ADDR
// end ;
54298: LD_VAR 0 2
54302: RET
// export function Last ( array ) ; begin
54303: LD_INT 0
54305: PPUSH
// if not array then
54306: LD_VAR 0 1
54310: NOT
54311: IFFALSE 54315
// exit ;
54313: GO 54331
// result := array [ array ] ;
54315: LD_ADDR_VAR 0 2
54319: PUSH
54320: LD_VAR 0 1
54324: PUSH
54325: LD_VAR 0 1
54329: ARRAY
54330: ST_TO_ADDR
// end ;
54331: LD_VAR 0 2
54335: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54336: LD_INT 0
54338: PPUSH
54339: PPUSH
// result := [ ] ;
54340: LD_ADDR_VAR 0 5
54344: PUSH
54345: EMPTY
54346: ST_TO_ADDR
// if not array then
54347: LD_VAR 0 1
54351: NOT
54352: IFFALSE 54356
// exit ;
54354: GO 54468
// for i := 1 to array do
54356: LD_ADDR_VAR 0 6
54360: PUSH
54361: DOUBLE
54362: LD_INT 1
54364: DEC
54365: ST_TO_ADDR
54366: LD_VAR 0 1
54370: PUSH
54371: FOR_TO
54372: IFFALSE 54466
// if array [ i ] [ index ] = value then
54374: LD_VAR 0 1
54378: PUSH
54379: LD_VAR 0 6
54383: ARRAY
54384: PUSH
54385: LD_VAR 0 2
54389: ARRAY
54390: PUSH
54391: LD_VAR 0 3
54395: EQUAL
54396: IFFALSE 54464
// begin if indexColumn then
54398: LD_VAR 0 4
54402: IFFALSE 54438
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54404: LD_ADDR_VAR 0 5
54408: PUSH
54409: LD_VAR 0 5
54413: PPUSH
54414: LD_VAR 0 1
54418: PUSH
54419: LD_VAR 0 6
54423: ARRAY
54424: PUSH
54425: LD_VAR 0 4
54429: ARRAY
54430: PPUSH
54431: CALL 49476 0 2
54435: ST_TO_ADDR
54436: GO 54464
// result := Join ( result , array [ i ] ) ;
54438: LD_ADDR_VAR 0 5
54442: PUSH
54443: LD_VAR 0 5
54447: PPUSH
54448: LD_VAR 0 1
54452: PUSH
54453: LD_VAR 0 6
54457: ARRAY
54458: PPUSH
54459: CALL 49476 0 2
54463: ST_TO_ADDR
// end ;
54464: GO 54371
54466: POP
54467: POP
// end ;
54468: LD_VAR 0 5
54472: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54473: LD_INT 0
54475: PPUSH
// if not vehicles or not parkingPoint then
54476: LD_VAR 0 1
54480: NOT
54481: IFTRUE 54490
54483: PUSH
54484: LD_VAR 0 2
54488: NOT
54489: OR
54490: IFFALSE 54494
// exit ;
54492: GO 54592
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54494: LD_ADDR_VAR 0 1
54498: PUSH
54499: LD_VAR 0 1
54503: PPUSH
54504: LD_INT 50
54506: PUSH
54507: EMPTY
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: LD_INT 92
54515: PUSH
54516: LD_VAR 0 2
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PUSH
54525: LD_VAR 0 2
54529: PUSH
54530: LD_INT 2
54532: ARRAY
54533: PUSH
54534: LD_INT 8
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PPUSH
54551: CALL_OW 72
54555: ST_TO_ADDR
// if not vehicles then
54556: LD_VAR 0 1
54560: NOT
54561: IFFALSE 54565
// exit ;
54563: GO 54592
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54565: LD_VAR 0 1
54569: PPUSH
54570: LD_VAR 0 2
54574: PUSH
54575: LD_INT 1
54577: ARRAY
54578: PPUSH
54579: LD_VAR 0 2
54583: PUSH
54584: LD_INT 2
54586: ARRAY
54587: PPUSH
54588: CALL_OW 111
// end ;
54592: LD_VAR 0 3
54596: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54597: LD_INT 0
54599: PPUSH
54600: PPUSH
54601: PPUSH
// if not side or not area then
54602: LD_VAR 0 1
54606: NOT
54607: IFTRUE 54616
54609: PUSH
54610: LD_VAR 0 2
54614: NOT
54615: OR
54616: IFFALSE 54620
// exit ;
54618: GO 54739
// tmp := AreaToList ( area , 0 ) ;
54620: LD_ADDR_VAR 0 5
54624: PUSH
54625: LD_VAR 0 2
54629: PPUSH
54630: LD_INT 0
54632: PPUSH
54633: CALL_OW 517
54637: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54638: LD_ADDR_VAR 0 4
54642: PUSH
54643: DOUBLE
54644: LD_INT 1
54646: DEC
54647: ST_TO_ADDR
54648: LD_VAR 0 5
54652: PUSH
54653: LD_INT 1
54655: ARRAY
54656: PUSH
54657: FOR_TO
54658: IFFALSE 54737
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54660: LD_VAR 0 5
54664: PUSH
54665: LD_INT 1
54667: ARRAY
54668: PUSH
54669: LD_VAR 0 4
54673: ARRAY
54674: PPUSH
54675: LD_VAR 0 5
54679: PUSH
54680: LD_INT 2
54682: ARRAY
54683: PUSH
54684: LD_VAR 0 4
54688: ARRAY
54689: PPUSH
54690: CALL_OW 351
54694: IFFALSE 54735
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54696: LD_VAR 0 5
54700: PUSH
54701: LD_INT 1
54703: ARRAY
54704: PUSH
54705: LD_VAR 0 4
54709: ARRAY
54710: PPUSH
54711: LD_VAR 0 5
54715: PUSH
54716: LD_INT 2
54718: ARRAY
54719: PUSH
54720: LD_VAR 0 4
54724: ARRAY
54725: PPUSH
54726: LD_VAR 0 1
54730: PPUSH
54731: CALL_OW 244
// end ;
54735: GO 54657
54737: POP
54738: POP
// end ;
54739: LD_VAR 0 3
54743: RET
// export function UniqueArray ( array ) ; var i ; begin
54744: LD_INT 0
54746: PPUSH
54747: PPUSH
// result := [ ] ;
54748: LD_ADDR_VAR 0 2
54752: PUSH
54753: EMPTY
54754: ST_TO_ADDR
// if not array then
54755: LD_VAR 0 1
54759: NOT
54760: IFFALSE 54764
// exit ;
54762: GO 54825
// for i := 1 to array do
54764: LD_ADDR_VAR 0 3
54768: PUSH
54769: DOUBLE
54770: LD_INT 1
54772: DEC
54773: ST_TO_ADDR
54774: LD_VAR 0 1
54778: PUSH
54779: FOR_TO
54780: IFFALSE 54823
// if not array [ i ] in result then
54782: LD_VAR 0 1
54786: PUSH
54787: LD_VAR 0 3
54791: ARRAY
54792: PUSH
54793: LD_VAR 0 2
54797: IN
54798: NOT
54799: IFFALSE 54821
// result := Join ( result , i ) ;
54801: LD_ADDR_VAR 0 2
54805: PUSH
54806: LD_VAR 0 2
54810: PPUSH
54811: LD_VAR 0 3
54815: PPUSH
54816: CALL 49476 0 2
54820: ST_TO_ADDR
54821: GO 54779
54823: POP
54824: POP
// end ; end_of_file
54825: LD_VAR 0 2
54829: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54830: LD_VAR 0 1
54834: PUSH
54835: LD_INT 200
54837: DOUBLE
54838: GREATEREQUAL
54839: IFFALSE 54847
54841: LD_INT 299
54843: DOUBLE
54844: LESSEQUAL
54845: IFTRUE 54849
54847: GO 54881
54849: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54850: LD_VAR 0 1
54854: PPUSH
54855: LD_VAR 0 2
54859: PPUSH
54860: LD_VAR 0 3
54864: PPUSH
54865: LD_VAR 0 4
54869: PPUSH
54870: LD_VAR 0 5
54874: PPUSH
54875: CALL 55743 0 5
54879: GO 54958
54881: LD_INT 300
54883: DOUBLE
54884: GREATEREQUAL
54885: IFFALSE 54893
54887: LD_INT 399
54889: DOUBLE
54890: LESSEQUAL
54891: IFTRUE 54895
54893: GO 54957
54895: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54896: LD_VAR 0 1
54900: PPUSH
54901: LD_VAR 0 2
54905: PPUSH
54906: LD_VAR 0 3
54910: PPUSH
54911: LD_VAR 0 4
54915: PPUSH
54916: LD_VAR 0 5
54920: PPUSH
54921: LD_VAR 0 6
54925: PPUSH
54926: LD_VAR 0 7
54930: PPUSH
54931: LD_VAR 0 8
54935: PPUSH
54936: LD_VAR 0 9
54940: PPUSH
54941: LD_VAR 0 10
54945: PPUSH
54946: LD_VAR 0 11
54950: PPUSH
54951: CALL 63845 0 11
54955: GO 54958
54957: POP
// end ;
54958: PPOPN 11
54960: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54961: LD_VAR 0 1
54965: PPUSH
54966: LD_VAR 0 2
54970: PPUSH
54971: LD_VAR 0 3
54975: PPUSH
54976: LD_VAR 0 4
54980: PPUSH
54981: LD_VAR 0 5
54985: PPUSH
54986: CALL 55043 0 5
// end ; end_of_file
54990: PPOPN 5
54992: END
// export function SOS_UnitDestroyed ( un ) ; begin
54993: LD_INT 0
54995: PPUSH
// ComRadiation ( un ) ;
54996: LD_VAR 0 1
55000: PPUSH
55001: CALL 56163 0 1
// end ;
55005: LD_VAR 0 2
55009: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55010: LD_INT 0
55012: PPUSH
// ComRadiation ( un ) ;
55013: LD_VAR 0 1
55017: PPUSH
55018: CALL 56163 0 1
// end ;
55022: LD_VAR 0 2
55026: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55027: LD_INT 0
55029: PPUSH
// end ;
55030: LD_VAR 0 4
55034: RET
// export function SOS_Command ( cmd ) ; begin
55035: LD_INT 0
55037: PPUSH
// end ;
55038: LD_VAR 0 2
55042: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55043: LD_INT 0
55045: PPUSH
// end ;
55046: LD_VAR 0 6
55050: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55051: LD_INT 0
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
// if not vehicle or not factory then
55058: LD_VAR 0 1
55062: NOT
55063: IFTRUE 55072
55065: PUSH
55066: LD_VAR 0 2
55070: NOT
55071: OR
55072: IFFALSE 55076
// exit ;
55074: GO 55738
// weapon := GetWeapon ( vehicle ) ;
55076: LD_ADDR_VAR 0 7
55080: PUSH
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 264
55090: ST_TO_ADDR
// if weapon = ar_miner then
55091: LD_VAR 0 7
55095: PUSH
55096: LD_INT 81
55098: EQUAL
55099: IFFALSE 55156
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55101: LD_ADDR_EXP 57
55105: PUSH
55106: LD_EXP 57
55110: PPUSH
55111: LD_EXP 57
55115: PUSH
55116: LD_INT 1
55118: PLUS
55119: PPUSH
55120: LD_VAR 0 1
55124: PPUSH
55125: CALL_OW 1
55129: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55130: LD_ADDR_EXP 58
55134: PUSH
55135: LD_EXP 58
55139: PPUSH
55140: LD_EXP 58
55144: PUSH
55145: LD_INT 1
55147: PLUS
55148: PPUSH
55149: EMPTY
55150: PPUSH
55151: CALL_OW 1
55155: ST_TO_ADDR
// end ; if not factoryWaypoints then
55156: LD_EXP 61
55160: NOT
55161: IFFALSE 55165
// exit ;
55163: GO 55738
// for i := 1 to Count ( factoryWaypoints ) do
55165: LD_ADDR_VAR 0 4
55169: PUSH
55170: DOUBLE
55171: LD_INT 1
55173: DEC
55174: ST_TO_ADDR
55175: LD_EXP 61
55179: PPUSH
55180: CALL 13500 0 1
55184: PUSH
55185: FOR_TO
55186: IFFALSE 55736
// if factoryWaypoints [ i ] [ 2 ] = factory then
55188: LD_EXP 61
55192: PUSH
55193: LD_VAR 0 4
55197: ARRAY
55198: PUSH
55199: LD_INT 2
55201: ARRAY
55202: PUSH
55203: LD_VAR 0 2
55207: EQUAL
55208: IFFALSE 55734
// begin if GetControl ( vehicle ) = control_manual then
55210: LD_VAR 0 1
55214: PPUSH
55215: CALL_OW 263
55219: PUSH
55220: LD_INT 1
55222: EQUAL
55223: IFFALSE 55587
// begin driver := IsDrivenBy ( vehicle ) ;
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: LD_VAR 0 1
55234: PPUSH
55235: CALL_OW 311
55239: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55240: LD_VAR 0 5
55244: PUSH
55245: LD_EXP 62
55249: IN
55250: IFTRUE 55264
55252: PUSH
55253: LD_VAR 0 1
55257: PUSH
55258: LD_EXP 62
55262: IN
55263: OR
55264: IFFALSE 55270
// exit ;
55266: POP
55267: POP
55268: GO 55738
// if not HasTask ( driver ) then
55270: LD_VAR 0 5
55274: PPUSH
55275: CALL_OW 314
55279: NOT
55280: IFFALSE 55585
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55282: LD_ADDR_EXP 62
55286: PUSH
55287: LD_EXP 62
55291: PPUSH
55292: LD_VAR 0 5
55296: PPUSH
55297: CALL 49476 0 2
55301: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55302: LD_ADDR_EXP 62
55306: PUSH
55307: LD_EXP 62
55311: PPUSH
55312: LD_VAR 0 1
55316: PPUSH
55317: CALL 49476 0 2
55321: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55322: LD_ADDR_VAR 0 6
55326: PUSH
55327: LD_EXP 61
55331: PUSH
55332: LD_VAR 0 4
55336: ARRAY
55337: PUSH
55338: LD_INT 3
55340: ARRAY
55341: PPUSH
55342: LD_EXP 61
55346: PUSH
55347: LD_VAR 0 4
55351: ARRAY
55352: PUSH
55353: LD_INT 4
55355: ARRAY
55356: PPUSH
55357: CALL_OW 428
55361: ST_TO_ADDR
// if hex then
55362: LD_VAR 0 6
55366: IFFALSE 55384
// ComMoveUnit ( driver , hex ) else
55368: LD_VAR 0 5
55372: PPUSH
55373: LD_VAR 0 6
55377: PPUSH
55378: CALL_OW 112
55382: GO 55468
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55384: LD_VAR 0 1
55388: PPUSH
55389: LD_EXP 61
55393: PUSH
55394: LD_VAR 0 4
55398: ARRAY
55399: PUSH
55400: LD_INT 3
55402: ARRAY
55403: PPUSH
55404: LD_EXP 61
55408: PUSH
55409: LD_VAR 0 4
55413: ARRAY
55414: PUSH
55415: LD_INT 4
55417: ARRAY
55418: PPUSH
55419: CALL_OW 297
55423: PUSH
55424: LD_INT 0
55426: GREATER
55427: IFFALSE 55468
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55429: LD_VAR 0 5
55433: PPUSH
55434: LD_EXP 61
55438: PUSH
55439: LD_VAR 0 4
55443: ARRAY
55444: PUSH
55445: LD_INT 3
55447: ARRAY
55448: PPUSH
55449: LD_EXP 61
55453: PUSH
55454: LD_VAR 0 4
55458: ARRAY
55459: PUSH
55460: LD_INT 4
55462: ARRAY
55463: PPUSH
55464: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55468: LD_VAR 0 5
55472: PPUSH
55473: CALL_OW 181
// if Multiplayer then
55477: LD_OWVAR 4
55481: IFFALSE 55530
// begin repeat wait ( 10 ) ;
55483: LD_INT 10
55485: PPUSH
55486: CALL_OW 67
// until not IsInUnit ( driver ) ;
55490: LD_VAR 0 5
55494: PPUSH
55495: CALL_OW 310
55499: NOT
55500: IFFALSE 55483
// if not HasTask ( driver ) then
55502: LD_VAR 0 5
55506: PPUSH
55507: CALL_OW 314
55511: NOT
55512: IFFALSE 55528
// ComEnterUnit ( driver , factory ) ;
55514: LD_VAR 0 5
55518: PPUSH
55519: LD_VAR 0 2
55523: PPUSH
55524: CALL_OW 120
// end else
55528: GO 55544
// AddComEnterUnit ( driver , factory ) ;
55530: LD_VAR 0 5
55534: PPUSH
55535: LD_VAR 0 2
55539: PPUSH
55540: CALL_OW 180
// wait ( 0 0$1 ) ;
55544: LD_INT 35
55546: PPUSH
55547: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55551: LD_ADDR_EXP 62
55555: PUSH
55556: LD_EXP 62
55560: PUSH
55561: LD_VAR 0 5
55565: DIFF
55566: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55567: LD_ADDR_EXP 62
55571: PUSH
55572: LD_EXP 62
55576: PUSH
55577: LD_VAR 0 1
55581: DIFF
55582: ST_TO_ADDR
// break ;
55583: GO 55736
// end ; end else
55585: GO 55734
// if GetControl ( vehicle ) = control_remote then
55587: LD_VAR 0 1
55591: PPUSH
55592: CALL_OW 263
55596: PUSH
55597: LD_INT 2
55599: EQUAL
55600: IFFALSE 55686
// begin wait ( 0 0$2 ) ;
55602: LD_INT 70
55604: PPUSH
55605: CALL_OW 67
// repeat wait ( 10 ) ;
55609: LD_INT 10
55611: PPUSH
55612: CALL_OW 67
// Connect ( vehicle ) ;
55616: LD_VAR 0 1
55620: PPUSH
55621: CALL 19778 0 1
// until IsControledBy ( vehicle ) ;
55625: LD_VAR 0 1
55629: PPUSH
55630: CALL_OW 312
55634: IFFALSE 55609
// wait ( 10 ) ;
55636: LD_INT 10
55638: PPUSH
55639: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55643: LD_VAR 0 1
55647: PPUSH
55648: LD_EXP 61
55652: PUSH
55653: LD_VAR 0 4
55657: ARRAY
55658: PUSH
55659: LD_INT 3
55661: ARRAY
55662: PPUSH
55663: LD_EXP 61
55667: PUSH
55668: LD_VAR 0 4
55672: ARRAY
55673: PUSH
55674: LD_INT 4
55676: ARRAY
55677: PPUSH
55678: CALL_OW 111
// break ;
55682: GO 55736
// end else
55684: GO 55734
// begin wait ( 0 0$3 ) ;
55686: LD_INT 105
55688: PPUSH
55689: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55693: LD_VAR 0 1
55697: PPUSH
55698: LD_EXP 61
55702: PUSH
55703: LD_VAR 0 4
55707: ARRAY
55708: PUSH
55709: LD_INT 3
55711: ARRAY
55712: PPUSH
55713: LD_EXP 61
55717: PUSH
55718: LD_VAR 0 4
55722: ARRAY
55723: PUSH
55724: LD_INT 4
55726: ARRAY
55727: PPUSH
55728: CALL_OW 111
// break ;
55732: GO 55736
// end ; end ;
55734: GO 55185
55736: POP
55737: POP
// end ;
55738: LD_VAR 0 3
55742: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55743: LD_INT 0
55745: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55746: LD_VAR 0 1
55750: PUSH
55751: LD_INT 250
55753: EQUAL
55754: IFFALSE 55771
55756: PUSH
55757: LD_VAR 0 2
55761: PPUSH
55762: CALL_OW 264
55766: PUSH
55767: LD_INT 81
55769: EQUAL
55770: AND
55771: IFFALSE 55792
// MinerPlaceMine ( unit , x , y ) ;
55773: LD_VAR 0 2
55777: PPUSH
55778: LD_VAR 0 4
55782: PPUSH
55783: LD_VAR 0 5
55787: PPUSH
55788: CALL 59138 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55792: LD_VAR 0 1
55796: PUSH
55797: LD_INT 251
55799: EQUAL
55800: IFFALSE 55817
55802: PUSH
55803: LD_VAR 0 2
55807: PPUSH
55808: CALL_OW 264
55812: PUSH
55813: LD_INT 81
55815: EQUAL
55816: AND
55817: IFFALSE 55838
// MinerDetonateMine ( unit , x , y ) ;
55819: LD_VAR 0 2
55823: PPUSH
55824: LD_VAR 0 4
55828: PPUSH
55829: LD_VAR 0 5
55833: PPUSH
55834: CALL 59545 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55838: LD_VAR 0 1
55842: PUSH
55843: LD_INT 252
55845: EQUAL
55846: IFFALSE 55863
55848: PUSH
55849: LD_VAR 0 2
55853: PPUSH
55854: CALL_OW 264
55858: PUSH
55859: LD_INT 81
55861: EQUAL
55862: AND
55863: IFFALSE 55884
// MinerCreateMinefield ( unit , x , y ) ;
55865: LD_VAR 0 2
55869: PPUSH
55870: LD_VAR 0 4
55874: PPUSH
55875: LD_VAR 0 5
55879: PPUSH
55880: CALL 59777 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55884: LD_VAR 0 1
55888: PUSH
55889: LD_INT 253
55891: EQUAL
55892: IFFALSE 55909
55894: PUSH
55895: LD_VAR 0 2
55899: PPUSH
55900: CALL_OW 257
55904: PUSH
55905: LD_INT 5
55907: EQUAL
55908: AND
55909: IFFALSE 55930
// ComBinocular ( unit , x , y ) ;
55911: LD_VAR 0 2
55915: PPUSH
55916: LD_VAR 0 4
55920: PPUSH
55921: LD_VAR 0 5
55925: PPUSH
55926: CALL 60152 0 3
// if selectedUnit then
55930: LD_VAR 0 3
55934: IFFALSE 55994
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55936: LD_VAR 0 1
55940: PUSH
55941: LD_INT 254
55943: EQUAL
55944: IFFALSE 55961
55946: PUSH
55947: LD_VAR 0 2
55951: PPUSH
55952: CALL_OW 264
55956: PUSH
55957: LD_INT 99
55959: EQUAL
55960: AND
55961: IFFALSE 55978
55963: PUSH
55964: LD_VAR 0 3
55968: PPUSH
55969: CALL_OW 263
55973: PUSH
55974: LD_INT 3
55976: EQUAL
55977: AND
55978: IFFALSE 55994
// HackDestroyVehicle ( unit , selectedUnit ) ;
55980: LD_VAR 0 2
55984: PPUSH
55985: LD_VAR 0 3
55989: PPUSH
55990: CALL 58328 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55994: LD_VAR 0 1
55998: PUSH
55999: LD_INT 255
56001: EQUAL
56002: IFFALSE 56026
56004: PUSH
56005: LD_VAR 0 2
56009: PPUSH
56010: CALL_OW 264
56014: PUSH
56015: LD_INT 14
56017: PUSH
56018: LD_INT 53
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: IN
56025: AND
56026: IFFALSE 56044
56028: PUSH
56029: LD_VAR 0 4
56033: PPUSH
56034: LD_VAR 0 5
56038: PPUSH
56039: CALL_OW 488
56043: AND
56044: IFFALSE 56068
// CutTreeXYR ( unit , x , y , 12 ) ;
56046: LD_VAR 0 2
56050: PPUSH
56051: LD_VAR 0 4
56055: PPUSH
56056: LD_VAR 0 5
56060: PPUSH
56061: LD_INT 12
56063: PPUSH
56064: CALL 56259 0 4
// if cmd = 256 then
56068: LD_VAR 0 1
56072: PUSH
56073: LD_INT 256
56075: EQUAL
56076: IFFALSE 56097
// SetFactoryWaypoint ( unit , x , y ) ;
56078: LD_VAR 0 2
56082: PPUSH
56083: LD_VAR 0 4
56087: PPUSH
56088: LD_VAR 0 5
56092: PPUSH
56093: CALL 63853 0 3
// if cmd = 257 then
56097: LD_VAR 0 1
56101: PUSH
56102: LD_INT 257
56104: EQUAL
56105: IFFALSE 56126
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56107: LD_VAR 0 2
56111: PPUSH
56112: LD_VAR 0 4
56116: PPUSH
56117: LD_VAR 0 5
56121: PPUSH
56122: CALL 64349 0 3
// if cmd = 258 then
56126: LD_VAR 0 1
56130: PUSH
56131: LD_INT 258
56133: EQUAL
56134: IFFALSE 56158
// BurnTreeXYR ( unit , x , y , 8 ) ;
56136: LD_VAR 0 2
56140: PPUSH
56141: LD_VAR 0 4
56145: PPUSH
56146: LD_VAR 0 5
56150: PPUSH
56151: LD_INT 8
56153: PPUSH
56154: CALL 56681 0 4
// end ;
56158: LD_VAR 0 6
56162: RET
// export function ComRadiation ( un ) ; var eff ; begin
56163: LD_INT 0
56165: PPUSH
56166: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56167: LD_VAR 0 1
56171: PPUSH
56172: CALL_OW 264
56176: PUSH
56177: LD_INT 91
56179: NONEQUAL
56180: IFFALSE 56184
// exit ;
56182: GO 56254
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56184: LD_INT 68
56186: PPUSH
56187: LD_VAR 0 1
56191: PPUSH
56192: CALL_OW 255
56196: PPUSH
56197: CALL_OW 321
56201: PUSH
56202: LD_INT 2
56204: EQUAL
56205: IFFALSE 56217
// eff := 50 else
56207: LD_ADDR_VAR 0 3
56211: PUSH
56212: LD_INT 50
56214: ST_TO_ADDR
56215: GO 56225
// eff := 25 ;
56217: LD_ADDR_VAR 0 3
56221: PUSH
56222: LD_INT 25
56224: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56225: LD_VAR 0 1
56229: PPUSH
56230: CALL_OW 250
56234: PPUSH
56235: LD_VAR 0 1
56239: PPUSH
56240: CALL_OW 251
56244: PPUSH
56245: LD_VAR 0 3
56249: PPUSH
56250: CALL_OW 495
// end ;
56254: LD_VAR 0 2
56258: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56259: LD_INT 0
56261: PPUSH
56262: PPUSH
56263: PPUSH
56264: PPUSH
56265: PPUSH
56266: PPUSH
56267: PPUSH
56268: PPUSH
56269: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56270: LD_VAR 0 1
56274: PPUSH
56275: CALL_OW 302
56279: NOT
56280: IFTRUE 56299
56282: PUSH
56283: LD_VAR 0 2
56287: PPUSH
56288: LD_VAR 0 3
56292: PPUSH
56293: CALL_OW 488
56297: NOT
56298: OR
56299: IFTRUE 56308
56301: PUSH
56302: LD_VAR 0 4
56306: NOT
56307: OR
56308: IFFALSE 56312
// exit ;
56310: GO 56676
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56312: LD_VAR 0 1
56316: PPUSH
56317: CALL_OW 437
56321: PPUSH
56322: CALL 13500 0 1
56326: PUSH
56327: LD_INT 10
56329: GREATER
56330: IFFALSE 56334
// exit ;
56332: GO 56676
// list := [ ] ;
56334: LD_ADDR_VAR 0 13
56338: PUSH
56339: EMPTY
56340: ST_TO_ADDR
// if x - r < 0 then
56341: LD_VAR 0 2
56345: PUSH
56346: LD_VAR 0 4
56350: MINUS
56351: PUSH
56352: LD_INT 0
56354: LESS
56355: IFFALSE 56367
// min_x := 0 else
56357: LD_ADDR_VAR 0 7
56361: PUSH
56362: LD_INT 0
56364: ST_TO_ADDR
56365: GO 56383
// min_x := x - r ;
56367: LD_ADDR_VAR 0 7
56371: PUSH
56372: LD_VAR 0 2
56376: PUSH
56377: LD_VAR 0 4
56381: MINUS
56382: ST_TO_ADDR
// if y - r < 0 then
56383: LD_VAR 0 3
56387: PUSH
56388: LD_VAR 0 4
56392: MINUS
56393: PUSH
56394: LD_INT 0
56396: LESS
56397: IFFALSE 56409
// min_y := 0 else
56399: LD_ADDR_VAR 0 8
56403: PUSH
56404: LD_INT 0
56406: ST_TO_ADDR
56407: GO 56425
// min_y := y - r ;
56409: LD_ADDR_VAR 0 8
56413: PUSH
56414: LD_VAR 0 3
56418: PUSH
56419: LD_VAR 0 4
56423: MINUS
56424: ST_TO_ADDR
// max_x := x + r ;
56425: LD_ADDR_VAR 0 9
56429: PUSH
56430: LD_VAR 0 2
56434: PUSH
56435: LD_VAR 0 4
56439: PLUS
56440: ST_TO_ADDR
// max_y := y + r ;
56441: LD_ADDR_VAR 0 10
56445: PUSH
56446: LD_VAR 0 3
56450: PUSH
56451: LD_VAR 0 4
56455: PLUS
56456: ST_TO_ADDR
// for _x = min_x to max_x do
56457: LD_ADDR_VAR 0 11
56461: PUSH
56462: DOUBLE
56463: LD_VAR 0 7
56467: DEC
56468: ST_TO_ADDR
56469: LD_VAR 0 9
56473: PUSH
56474: FOR_TO
56475: IFFALSE 56594
// for _y = min_y to max_y do
56477: LD_ADDR_VAR 0 12
56481: PUSH
56482: DOUBLE
56483: LD_VAR 0 8
56487: DEC
56488: ST_TO_ADDR
56489: LD_VAR 0 10
56493: PUSH
56494: FOR_TO
56495: IFFALSE 56590
// begin if not ValidHex ( _x , _y ) then
56497: LD_VAR 0 11
56501: PPUSH
56502: LD_VAR 0 12
56506: PPUSH
56507: CALL_OW 488
56511: NOT
56512: IFFALSE 56516
// continue ;
56514: GO 56494
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56516: LD_VAR 0 11
56520: PPUSH
56521: LD_VAR 0 12
56525: PPUSH
56526: CALL_OW 351
56530: IFFALSE 56548
56532: PUSH
56533: LD_VAR 0 11
56537: PPUSH
56538: LD_VAR 0 12
56542: PPUSH
56543: CALL_OW 554
56547: AND
56548: IFFALSE 56588
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56550: LD_ADDR_VAR 0 13
56554: PUSH
56555: LD_VAR 0 13
56559: PPUSH
56560: LD_VAR 0 13
56564: PUSH
56565: LD_INT 1
56567: PLUS
56568: PPUSH
56569: LD_VAR 0 11
56573: PUSH
56574: LD_VAR 0 12
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PPUSH
56583: CALL_OW 2
56587: ST_TO_ADDR
// end ;
56588: GO 56494
56590: POP
56591: POP
56592: GO 56474
56594: POP
56595: POP
// if not list then
56596: LD_VAR 0 13
56600: NOT
56601: IFFALSE 56605
// exit ;
56603: GO 56676
// for i in list do
56605: LD_ADDR_VAR 0 6
56609: PUSH
56610: LD_VAR 0 13
56614: PUSH
56615: FOR_IN
56616: IFFALSE 56674
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56618: LD_VAR 0 1
56622: PPUSH
56623: LD_STRING M
56625: PUSH
56626: LD_VAR 0 6
56630: PUSH
56631: LD_INT 1
56633: ARRAY
56634: PUSH
56635: LD_VAR 0 6
56639: PUSH
56640: LD_INT 2
56642: ARRAY
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: PPUSH
56668: CALL_OW 447
56672: GO 56615
56674: POP
56675: POP
// end ;
56676: LD_VAR 0 5
56680: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56681: LD_INT 0
56683: PPUSH
56684: PPUSH
56685: PPUSH
56686: PPUSH
56687: PPUSH
56688: PPUSH
56689: PPUSH
56690: PPUSH
56691: PPUSH
56692: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56693: LD_VAR 0 1
56697: PPUSH
56698: CALL_OW 302
56702: NOT
56703: IFTRUE 56722
56705: PUSH
56706: LD_VAR 0 2
56710: PPUSH
56711: LD_VAR 0 3
56715: PPUSH
56716: CALL_OW 488
56720: NOT
56721: OR
56722: IFTRUE 56731
56724: PUSH
56725: LD_VAR 0 4
56729: NOT
56730: OR
56731: IFFALSE 56735
// exit ;
56733: GO 57274
// if Count ( GetTaskList ( flame ) ) > 10 then
56735: LD_VAR 0 1
56739: PPUSH
56740: CALL_OW 437
56744: PPUSH
56745: CALL 13500 0 1
56749: PUSH
56750: LD_INT 10
56752: GREATER
56753: IFFALSE 56757
// exit ;
56755: GO 57274
// list := [ ] ;
56757: LD_ADDR_VAR 0 13
56761: PUSH
56762: EMPTY
56763: ST_TO_ADDR
// if x - r < 0 then
56764: LD_VAR 0 2
56768: PUSH
56769: LD_VAR 0 4
56773: MINUS
56774: PUSH
56775: LD_INT 0
56777: LESS
56778: IFFALSE 56790
// min_x := 0 else
56780: LD_ADDR_VAR 0 7
56784: PUSH
56785: LD_INT 0
56787: ST_TO_ADDR
56788: GO 56806
// min_x := x - r ;
56790: LD_ADDR_VAR 0 7
56794: PUSH
56795: LD_VAR 0 2
56799: PUSH
56800: LD_VAR 0 4
56804: MINUS
56805: ST_TO_ADDR
// if y - r < 0 then
56806: LD_VAR 0 3
56810: PUSH
56811: LD_VAR 0 4
56815: MINUS
56816: PUSH
56817: LD_INT 0
56819: LESS
56820: IFFALSE 56832
// min_y := 0 else
56822: LD_ADDR_VAR 0 8
56826: PUSH
56827: LD_INT 0
56829: ST_TO_ADDR
56830: GO 56848
// min_y := y - r ;
56832: LD_ADDR_VAR 0 8
56836: PUSH
56837: LD_VAR 0 3
56841: PUSH
56842: LD_VAR 0 4
56846: MINUS
56847: ST_TO_ADDR
// max_x := x + r ;
56848: LD_ADDR_VAR 0 9
56852: PUSH
56853: LD_VAR 0 2
56857: PUSH
56858: LD_VAR 0 4
56862: PLUS
56863: ST_TO_ADDR
// max_y := y + r ;
56864: LD_ADDR_VAR 0 10
56868: PUSH
56869: LD_VAR 0 3
56873: PUSH
56874: LD_VAR 0 4
56878: PLUS
56879: ST_TO_ADDR
// for _x = min_x to max_x do
56880: LD_ADDR_VAR 0 11
56884: PUSH
56885: DOUBLE
56886: LD_VAR 0 7
56890: DEC
56891: ST_TO_ADDR
56892: LD_VAR 0 9
56896: PUSH
56897: FOR_TO
56898: IFFALSE 57017
// for _y = min_y to max_y do
56900: LD_ADDR_VAR 0 12
56904: PUSH
56905: DOUBLE
56906: LD_VAR 0 8
56910: DEC
56911: ST_TO_ADDR
56912: LD_VAR 0 10
56916: PUSH
56917: FOR_TO
56918: IFFALSE 57013
// begin if not ValidHex ( _x , _y ) then
56920: LD_VAR 0 11
56924: PPUSH
56925: LD_VAR 0 12
56929: PPUSH
56930: CALL_OW 488
56934: NOT
56935: IFFALSE 56939
// continue ;
56937: GO 56917
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56939: LD_VAR 0 11
56943: PPUSH
56944: LD_VAR 0 12
56948: PPUSH
56949: CALL_OW 351
56953: IFFALSE 56971
56955: PUSH
56956: LD_VAR 0 11
56960: PPUSH
56961: LD_VAR 0 12
56965: PPUSH
56966: CALL_OW 554
56970: AND
56971: IFFALSE 57011
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56973: LD_ADDR_VAR 0 13
56977: PUSH
56978: LD_VAR 0 13
56982: PPUSH
56983: LD_VAR 0 13
56987: PUSH
56988: LD_INT 1
56990: PLUS
56991: PPUSH
56992: LD_VAR 0 11
56996: PUSH
56997: LD_VAR 0 12
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PPUSH
57006: CALL_OW 2
57010: ST_TO_ADDR
// end ;
57011: GO 56917
57013: POP
57014: POP
57015: GO 56897
57017: POP
57018: POP
// if not list then
57019: LD_VAR 0 13
57023: NOT
57024: IFFALSE 57028
// exit ;
57026: GO 57274
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57028: LD_ADDR_VAR 0 13
57032: PUSH
57033: LD_VAR 0 1
57037: PPUSH
57038: LD_VAR 0 13
57042: PPUSH
57043: LD_INT 1
57045: PPUSH
57046: LD_INT 1
57048: PPUSH
57049: CALL 16906 0 4
57053: ST_TO_ADDR
// ComStop ( flame ) ;
57054: LD_VAR 0 1
57058: PPUSH
57059: CALL_OW 141
// for i in list do
57063: LD_ADDR_VAR 0 6
57067: PUSH
57068: LD_VAR 0 13
57072: PUSH
57073: FOR_IN
57074: IFFALSE 57105
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57076: LD_VAR 0 1
57080: PPUSH
57081: LD_VAR 0 6
57085: PUSH
57086: LD_INT 1
57088: ARRAY
57089: PPUSH
57090: LD_VAR 0 6
57094: PUSH
57095: LD_INT 2
57097: ARRAY
57098: PPUSH
57099: CALL_OW 176
57103: GO 57073
57105: POP
57106: POP
// repeat wait ( 0 0$1 ) ;
57107: LD_INT 35
57109: PPUSH
57110: CALL_OW 67
// task := GetTaskList ( flame ) ;
57114: LD_ADDR_VAR 0 14
57118: PUSH
57119: LD_VAR 0 1
57123: PPUSH
57124: CALL_OW 437
57128: ST_TO_ADDR
// if not task then
57129: LD_VAR 0 14
57133: NOT
57134: IFFALSE 57138
// exit ;
57136: GO 57274
// if task [ 1 ] [ 1 ] <> | then
57138: LD_VAR 0 14
57142: PUSH
57143: LD_INT 1
57145: ARRAY
57146: PUSH
57147: LD_INT 1
57149: ARRAY
57150: PUSH
57151: LD_STRING |
57153: NONEQUAL
57154: IFFALSE 57158
// exit ;
57156: GO 57274
// _x := task [ 1 ] [ 2 ] ;
57158: LD_ADDR_VAR 0 11
57162: PUSH
57163: LD_VAR 0 14
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PUSH
57172: LD_INT 2
57174: ARRAY
57175: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57176: LD_ADDR_VAR 0 12
57180: PUSH
57181: LD_VAR 0 14
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PUSH
57190: LD_INT 3
57192: ARRAY
57193: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57194: LD_VAR 0 11
57198: PPUSH
57199: LD_VAR 0 12
57203: PPUSH
57204: CALL_OW 351
57208: NOT
57209: IFTRUE 57228
57211: PUSH
57212: LD_VAR 0 11
57216: PPUSH
57217: LD_VAR 0 12
57221: PPUSH
57222: CALL_OW 554
57226: NOT
57227: OR
57228: IFFALSE 57262
// begin task := Delete ( task , 1 ) ;
57230: LD_ADDR_VAR 0 14
57234: PUSH
57235: LD_VAR 0 14
57239: PPUSH
57240: LD_INT 1
57242: PPUSH
57243: CALL_OW 3
57247: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57248: LD_VAR 0 1
57252: PPUSH
57253: LD_VAR 0 14
57257: PPUSH
57258: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57262: LD_VAR 0 1
57266: PPUSH
57267: CALL_OW 314
57271: NOT
57272: IFFALSE 57107
// end ;
57274: LD_VAR 0 5
57278: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57279: LD_EXP 50
57283: NOT
57284: IFFALSE 57334
57286: GO 57288
57288: DISABLE
// begin initHack := true ;
57289: LD_ADDR_EXP 50
57293: PUSH
57294: LD_INT 1
57296: ST_TO_ADDR
// hackTanks := [ ] ;
57297: LD_ADDR_EXP 51
57301: PUSH
57302: EMPTY
57303: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57304: LD_ADDR_EXP 52
57308: PUSH
57309: EMPTY
57310: ST_TO_ADDR
// hackLimit := 3 ;
57311: LD_ADDR_EXP 53
57315: PUSH
57316: LD_INT 3
57318: ST_TO_ADDR
// hackDist := 12 ;
57319: LD_ADDR_EXP 54
57323: PUSH
57324: LD_INT 12
57326: ST_TO_ADDR
// hackCounter := [ ] ;
57327: LD_ADDR_EXP 55
57331: PUSH
57332: EMPTY
57333: ST_TO_ADDR
// end ;
57334: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57335: LD_EXP 50
57339: IFFALSE 57357
57341: PUSH
57342: LD_INT 34
57344: PUSH
57345: LD_INT 99
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PPUSH
57352: CALL_OW 69
57356: AND
57357: IFFALSE 57610
57359: GO 57361
57361: DISABLE
57362: LD_INT 0
57364: PPUSH
57365: PPUSH
// begin enable ;
57366: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57367: LD_ADDR_VAR 0 1
57371: PUSH
57372: LD_INT 34
57374: PUSH
57375: LD_INT 99
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PPUSH
57382: CALL_OW 69
57386: PUSH
57387: FOR_IN
57388: IFFALSE 57608
// begin if not i in hackTanks then
57390: LD_VAR 0 1
57394: PUSH
57395: LD_EXP 51
57399: IN
57400: NOT
57401: IFFALSE 57484
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57403: LD_ADDR_EXP 51
57407: PUSH
57408: LD_EXP 51
57412: PPUSH
57413: LD_EXP 51
57417: PUSH
57418: LD_INT 1
57420: PLUS
57421: PPUSH
57422: LD_VAR 0 1
57426: PPUSH
57427: CALL_OW 1
57431: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57432: LD_ADDR_EXP 52
57436: PUSH
57437: LD_EXP 52
57441: PPUSH
57442: LD_EXP 52
57446: PUSH
57447: LD_INT 1
57449: PLUS
57450: PPUSH
57451: EMPTY
57452: PPUSH
57453: CALL_OW 1
57457: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57458: LD_ADDR_EXP 55
57462: PUSH
57463: LD_EXP 55
57467: PPUSH
57468: LD_EXP 55
57472: PUSH
57473: LD_INT 1
57475: PLUS
57476: PPUSH
57477: EMPTY
57478: PPUSH
57479: CALL_OW 1
57483: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57484: LD_VAR 0 1
57488: PPUSH
57489: CALL_OW 302
57493: NOT
57494: IFFALSE 57507
// begin HackUnlinkAll ( i ) ;
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL 57613 0 1
// continue ;
57505: GO 57387
// end ; HackCheckCapturedStatus ( i ) ;
57507: LD_VAR 0 1
57511: PPUSH
57512: CALL 58058 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57516: LD_ADDR_VAR 0 2
57520: PUSH
57521: LD_INT 81
57523: PUSH
57524: LD_VAR 0 1
57528: PPUSH
57529: CALL_OW 255
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 33
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 91
57550: PUSH
57551: LD_VAR 0 1
57555: PUSH
57556: LD_EXP 54
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 50
57568: PUSH
57569: EMPTY
57570: LIST
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: PPUSH
57578: CALL_OW 69
57582: ST_TO_ADDR
// if not tmp then
57583: LD_VAR 0 2
57587: NOT
57588: IFFALSE 57592
// continue ;
57590: GO 57387
// HackLink ( i , tmp ) ;
57592: LD_VAR 0 1
57596: PPUSH
57597: LD_VAR 0 2
57601: PPUSH
57602: CALL 57749 0 2
// end ;
57606: GO 57387
57608: POP
57609: POP
// end ;
57610: PPOPN 2
57612: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57613: LD_INT 0
57615: PPUSH
57616: PPUSH
57617: PPUSH
// if not hack in hackTanks then
57618: LD_VAR 0 1
57622: PUSH
57623: LD_EXP 51
57627: IN
57628: NOT
57629: IFFALSE 57633
// exit ;
57631: GO 57744
// index := GetElementIndex ( hackTanks , hack ) ;
57633: LD_ADDR_VAR 0 4
57637: PUSH
57638: LD_EXP 51
57642: PPUSH
57643: LD_VAR 0 1
57647: PPUSH
57648: CALL 16201 0 2
57652: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57653: LD_EXP 52
57657: PUSH
57658: LD_VAR 0 4
57662: ARRAY
57663: IFFALSE 57744
// begin for i in hackTanksCaptured [ index ] do
57665: LD_ADDR_VAR 0 3
57669: PUSH
57670: LD_EXP 52
57674: PUSH
57675: LD_VAR 0 4
57679: ARRAY
57680: PUSH
57681: FOR_IN
57682: IFFALSE 57708
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57684: LD_VAR 0 3
57688: PUSH
57689: LD_INT 1
57691: ARRAY
57692: PPUSH
57693: LD_VAR 0 3
57697: PUSH
57698: LD_INT 2
57700: ARRAY
57701: PPUSH
57702: CALL_OW 235
57706: GO 57681
57708: POP
57709: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57710: LD_ADDR_EXP 52
57714: PUSH
57715: LD_EXP 52
57719: PPUSH
57720: LD_VAR 0 4
57724: PPUSH
57725: EMPTY
57726: PPUSH
57727: CALL_OW 1
57731: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57732: LD_VAR 0 1
57736: PPUSH
57737: LD_INT 0
57739: PPUSH
57740: CALL_OW 505
// end ; end ;
57744: LD_VAR 0 2
57748: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57749: LD_INT 0
57751: PPUSH
57752: PPUSH
57753: PPUSH
// if not hack in hackTanks or not vehicles then
57754: LD_VAR 0 1
57758: PUSH
57759: LD_EXP 51
57763: IN
57764: NOT
57765: IFTRUE 57774
57767: PUSH
57768: LD_VAR 0 2
57772: NOT
57773: OR
57774: IFFALSE 57778
// exit ;
57776: GO 58053
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57778: LD_ADDR_VAR 0 2
57782: PUSH
57783: LD_VAR 0 1
57787: PPUSH
57788: LD_VAR 0 2
57792: PPUSH
57793: LD_INT 1
57795: PPUSH
57796: LD_INT 1
57798: PPUSH
57799: CALL 16853 0 4
57803: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57804: LD_ADDR_VAR 0 5
57808: PUSH
57809: LD_EXP 51
57813: PPUSH
57814: LD_VAR 0 1
57818: PPUSH
57819: CALL 16201 0 2
57823: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57824: LD_EXP 52
57828: PUSH
57829: LD_VAR 0 5
57833: ARRAY
57834: PUSH
57835: LD_EXP 53
57839: LESS
57840: IFFALSE 58029
// begin for i := 1 to vehicles do
57842: LD_ADDR_VAR 0 4
57846: PUSH
57847: DOUBLE
57848: LD_INT 1
57850: DEC
57851: ST_TO_ADDR
57852: LD_VAR 0 2
57856: PUSH
57857: FOR_TO
57858: IFFALSE 58027
// begin if hackTanksCaptured [ index ] = hackLimit then
57860: LD_EXP 52
57864: PUSH
57865: LD_VAR 0 5
57869: ARRAY
57870: PUSH
57871: LD_EXP 53
57875: EQUAL
57876: IFFALSE 57880
// break ;
57878: GO 58027
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57880: LD_ADDR_EXP 55
57884: PUSH
57885: LD_EXP 55
57889: PPUSH
57890: LD_VAR 0 5
57894: PPUSH
57895: LD_EXP 55
57899: PUSH
57900: LD_VAR 0 5
57904: ARRAY
57905: PUSH
57906: LD_INT 1
57908: PLUS
57909: PPUSH
57910: CALL_OW 1
57914: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57915: LD_ADDR_EXP 52
57919: PUSH
57920: LD_EXP 52
57924: PPUSH
57925: LD_VAR 0 5
57929: PUSH
57930: LD_EXP 52
57934: PUSH
57935: LD_VAR 0 5
57939: ARRAY
57940: PUSH
57941: LD_INT 1
57943: PLUS
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PPUSH
57949: LD_VAR 0 2
57953: PUSH
57954: LD_VAR 0 4
57958: ARRAY
57959: PUSH
57960: LD_VAR 0 2
57964: PUSH
57965: LD_VAR 0 4
57969: ARRAY
57970: PPUSH
57971: CALL_OW 255
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PPUSH
57980: CALL 16418 0 3
57984: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57985: LD_VAR 0 2
57989: PUSH
57990: LD_VAR 0 4
57994: ARRAY
57995: PPUSH
57996: LD_VAR 0 1
58000: PPUSH
58001: CALL_OW 255
58005: PPUSH
58006: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58010: LD_VAR 0 2
58014: PUSH
58015: LD_VAR 0 4
58019: ARRAY
58020: PPUSH
58021: CALL_OW 141
// end ;
58025: GO 57857
58027: POP
58028: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58029: LD_VAR 0 1
58033: PPUSH
58034: LD_EXP 52
58038: PUSH
58039: LD_VAR 0 5
58043: ARRAY
58044: PUSH
58045: LD_INT 0
58047: PLUS
58048: PPUSH
58049: CALL_OW 505
// end ;
58053: LD_VAR 0 3
58057: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58058: LD_INT 0
58060: PPUSH
58061: PPUSH
58062: PPUSH
58063: PPUSH
// if not hack in hackTanks then
58064: LD_VAR 0 1
58068: PUSH
58069: LD_EXP 51
58073: IN
58074: NOT
58075: IFFALSE 58079
// exit ;
58077: GO 58323
// index := GetElementIndex ( hackTanks , hack ) ;
58079: LD_ADDR_VAR 0 4
58083: PUSH
58084: LD_EXP 51
58088: PPUSH
58089: LD_VAR 0 1
58093: PPUSH
58094: CALL 16201 0 2
58098: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58099: LD_ADDR_VAR 0 3
58103: PUSH
58104: DOUBLE
58105: LD_EXP 52
58109: PUSH
58110: LD_VAR 0 4
58114: ARRAY
58115: INC
58116: ST_TO_ADDR
58117: LD_INT 1
58119: PUSH
58120: FOR_DOWNTO
58121: IFFALSE 58297
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58123: LD_ADDR_VAR 0 5
58127: PUSH
58128: LD_EXP 52
58132: PUSH
58133: LD_VAR 0 4
58137: ARRAY
58138: PUSH
58139: LD_VAR 0 3
58143: ARRAY
58144: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58145: LD_VAR 0 5
58149: PUSH
58150: LD_INT 1
58152: ARRAY
58153: PPUSH
58154: CALL_OW 302
58158: NOT
58159: IFTRUE 58187
58161: PUSH
58162: LD_VAR 0 5
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PPUSH
58171: CALL_OW 255
58175: PUSH
58176: LD_VAR 0 1
58180: PPUSH
58181: CALL_OW 255
58185: NONEQUAL
58186: OR
58187: IFFALSE 58295
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58189: LD_VAR 0 5
58193: PUSH
58194: LD_INT 1
58196: ARRAY
58197: PPUSH
58198: CALL_OW 305
58202: IFFALSE 58230
58204: PUSH
58205: LD_VAR 0 5
58209: PUSH
58210: LD_INT 1
58212: ARRAY
58213: PPUSH
58214: CALL_OW 255
58218: PUSH
58219: LD_VAR 0 1
58223: PPUSH
58224: CALL_OW 255
58228: EQUAL
58229: AND
58230: IFFALSE 58254
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58232: LD_VAR 0 5
58236: PUSH
58237: LD_INT 1
58239: ARRAY
58240: PPUSH
58241: LD_VAR 0 5
58245: PUSH
58246: LD_INT 2
58248: ARRAY
58249: PPUSH
58250: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58254: LD_ADDR_EXP 52
58258: PUSH
58259: LD_EXP 52
58263: PPUSH
58264: LD_VAR 0 4
58268: PPUSH
58269: LD_EXP 52
58273: PUSH
58274: LD_VAR 0 4
58278: ARRAY
58279: PPUSH
58280: LD_VAR 0 3
58284: PPUSH
58285: CALL_OW 3
58289: PPUSH
58290: CALL_OW 1
58294: ST_TO_ADDR
// end ; end ;
58295: GO 58120
58297: POP
58298: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58299: LD_VAR 0 1
58303: PPUSH
58304: LD_EXP 52
58308: PUSH
58309: LD_VAR 0 4
58313: ARRAY
58314: PUSH
58315: LD_INT 0
58317: PLUS
58318: PPUSH
58319: CALL_OW 505
// end ;
58323: LD_VAR 0 2
58327: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58328: LD_INT 0
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
// if not hack in hackTanks then
58334: LD_VAR 0 1
58338: PUSH
58339: LD_EXP 51
58343: IN
58344: NOT
58345: IFFALSE 58349
// exit ;
58347: GO 58434
// index := GetElementIndex ( hackTanks , hack ) ;
58349: LD_ADDR_VAR 0 5
58353: PUSH
58354: LD_EXP 51
58358: PPUSH
58359: LD_VAR 0 1
58363: PPUSH
58364: CALL 16201 0 2
58368: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58369: LD_ADDR_VAR 0 4
58373: PUSH
58374: DOUBLE
58375: LD_INT 1
58377: DEC
58378: ST_TO_ADDR
58379: LD_EXP 52
58383: PUSH
58384: LD_VAR 0 5
58388: ARRAY
58389: PUSH
58390: FOR_TO
58391: IFFALSE 58432
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58393: LD_EXP 52
58397: PUSH
58398: LD_VAR 0 5
58402: ARRAY
58403: PUSH
58404: LD_VAR 0 4
58408: ARRAY
58409: PUSH
58410: LD_INT 1
58412: ARRAY
58413: PUSH
58414: LD_VAR 0 2
58418: EQUAL
58419: IFFALSE 58430
// KillUnit ( vehicle ) ;
58421: LD_VAR 0 2
58425: PPUSH
58426: CALL_OW 66
58430: GO 58390
58432: POP
58433: POP
// end ;
58434: LD_VAR 0 3
58438: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58439: LD_EXP 56
58443: NOT
58444: IFFALSE 58577
58446: GO 58448
58448: DISABLE
58449: LD_INT 0
58451: PPUSH
// begin initMiner := true ;
58452: LD_ADDR_EXP 56
58456: PUSH
58457: LD_INT 1
58459: ST_TO_ADDR
// minersList := [ ] ;
58460: LD_ADDR_EXP 57
58464: PUSH
58465: EMPTY
58466: ST_TO_ADDR
// minerMinesList := [ ] ;
58467: LD_ADDR_EXP 58
58471: PUSH
58472: EMPTY
58473: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58474: LD_ADDR_EXP 59
58478: PUSH
58479: LD_INT 10
58481: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58482: LD_ADDR_VAR 0 1
58486: PUSH
58487: LD_INT 34
58489: PUSH
58490: LD_INT 81
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PPUSH
58497: CALL_OW 69
58501: PUSH
58502: FOR_IN
58503: IFFALSE 58575
// begin if not i in minersList then
58505: LD_VAR 0 1
58509: PUSH
58510: LD_EXP 57
58514: IN
58515: NOT
58516: IFFALSE 58573
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58518: LD_ADDR_EXP 57
58522: PUSH
58523: LD_EXP 57
58527: PPUSH
58528: LD_EXP 57
58532: PUSH
58533: LD_INT 1
58535: PLUS
58536: PPUSH
58537: LD_VAR 0 1
58541: PPUSH
58542: CALL_OW 1
58546: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58547: LD_ADDR_EXP 58
58551: PUSH
58552: LD_EXP 58
58556: PPUSH
58557: LD_EXP 58
58561: PUSH
58562: LD_INT 1
58564: PLUS
58565: PPUSH
58566: EMPTY
58567: PPUSH
58568: CALL_OW 1
58572: ST_TO_ADDR
// end end ;
58573: GO 58502
58575: POP
58576: POP
// end ;
58577: PPOPN 1
58579: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58580: LD_EXP 56
58584: IFFALSE 58615
58586: PUSH
58587: LD_EXP 58
58591: PPUSH
58592: CALL 13500 0 1
58596: IFTRUE 58614
58598: PUSH
58599: LD_INT 34
58601: PUSH
58602: LD_INT 81
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PPUSH
58609: CALL_OW 69
58613: OR
58614: AND
58615: IFFALSE 59135
58617: GO 58619
58619: DISABLE
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
58624: PPUSH
58625: PPUSH
// begin enable ;
58626: ENABLE
// for i := minerMinesList downto 1 do
58627: LD_ADDR_VAR 0 1
58631: PUSH
58632: DOUBLE
58633: LD_EXP 58
58637: INC
58638: ST_TO_ADDR
58639: LD_INT 1
58641: PUSH
58642: FOR_DOWNTO
58643: IFFALSE 59133
// begin side := GetSide ( minersList [ i ] ) ;
58645: LD_ADDR_VAR 0 3
58649: PUSH
58650: LD_EXP 57
58654: PUSH
58655: LD_VAR 0 1
58659: ARRAY
58660: PPUSH
58661: CALL_OW 255
58665: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58666: LD_EXP 57
58670: PUSH
58671: LD_VAR 0 1
58675: ARRAY
58676: PPUSH
58677: CALL_OW 300
58681: IFFALSE 58702
58683: PUSH
58684: LD_VAR 0 3
58688: PUSH
58689: LD_OWVAR 2
58693: PUSH
58694: LD_INT 9
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: IN
58701: AND
58702: IFFALSE 58735
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58704: LD_EXP 57
58708: PUSH
58709: LD_VAR 0 1
58713: ARRAY
58714: PPUSH
58715: LD_EXP 58
58719: PUSH
58720: LD_VAR 0 1
58724: ARRAY
58725: PPUSH
58726: CALL 13500 0 1
58730: PPUSH
58731: CALL_OW 505
// if not minerMinesList [ i ] then
58735: LD_EXP 58
58739: PUSH
58740: LD_VAR 0 1
58744: ARRAY
58745: NOT
58746: IFFALSE 58750
// continue ;
58748: GO 58642
// for j := minerMinesList [ i ] downto 1 do
58750: LD_ADDR_VAR 0 2
58754: PUSH
58755: DOUBLE
58756: LD_EXP 58
58760: PUSH
58761: LD_VAR 0 1
58765: ARRAY
58766: INC
58767: ST_TO_ADDR
58768: LD_INT 1
58770: PUSH
58771: FOR_DOWNTO
58772: IFFALSE 59129
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58774: LD_EXP 57
58778: PUSH
58779: LD_VAR 0 1
58783: ARRAY
58784: PPUSH
58785: CALL_OW 301
58789: IFTRUE 58809
58791: PUSH
58792: LD_EXP 57
58796: PUSH
58797: LD_VAR 0 1
58801: ARRAY
58802: PPUSH
58803: CALL_OW 305
58807: NOT
58808: OR
58809: IFFALSE 58900
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58811: LD_EXP 58
58815: PUSH
58816: LD_VAR 0 1
58820: ARRAY
58821: PUSH
58822: LD_VAR 0 2
58826: ARRAY
58827: PUSH
58828: LD_INT 1
58830: ARRAY
58831: PPUSH
58832: LD_EXP 58
58836: PUSH
58837: LD_VAR 0 1
58841: ARRAY
58842: PUSH
58843: LD_VAR 0 2
58847: ARRAY
58848: PUSH
58849: LD_INT 2
58851: ARRAY
58852: PPUSH
58853: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58857: LD_ADDR_EXP 58
58861: PUSH
58862: LD_EXP 58
58866: PPUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: LD_EXP 58
58876: PUSH
58877: LD_VAR 0 1
58881: ARRAY
58882: PPUSH
58883: LD_VAR 0 2
58887: PPUSH
58888: CALL_OW 3
58892: PPUSH
58893: CALL_OW 1
58897: ST_TO_ADDR
// continue ;
58898: GO 58771
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58900: LD_ADDR_VAR 0 4
58904: PUSH
58905: LD_EXP 58
58909: PUSH
58910: LD_VAR 0 1
58914: ARRAY
58915: PUSH
58916: LD_VAR 0 2
58920: ARRAY
58921: PUSH
58922: LD_INT 1
58924: ARRAY
58925: PPUSH
58926: LD_EXP 58
58930: PUSH
58931: LD_VAR 0 1
58935: ARRAY
58936: PUSH
58937: LD_VAR 0 2
58941: ARRAY
58942: PUSH
58943: LD_INT 2
58945: ARRAY
58946: PPUSH
58947: CALL_OW 428
58951: ST_TO_ADDR
// if not tmp then
58952: LD_VAR 0 4
58956: NOT
58957: IFFALSE 58961
// continue ;
58959: GO 58771
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58961: LD_VAR 0 4
58965: PUSH
58966: LD_INT 81
58968: PUSH
58969: LD_VAR 0 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PPUSH
58978: CALL_OW 69
58982: IN
58983: IFFALSE 59033
58985: PUSH
58986: LD_EXP 58
58990: PUSH
58991: LD_VAR 0 1
58995: ARRAY
58996: PUSH
58997: LD_VAR 0 2
59001: ARRAY
59002: PUSH
59003: LD_INT 1
59005: ARRAY
59006: PPUSH
59007: LD_EXP 58
59011: PUSH
59012: LD_VAR 0 1
59016: ARRAY
59017: PUSH
59018: LD_VAR 0 2
59022: ARRAY
59023: PUSH
59024: LD_INT 2
59026: ARRAY
59027: PPUSH
59028: CALL_OW 458
59032: AND
59033: IFFALSE 59127
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59035: LD_EXP 58
59039: PUSH
59040: LD_VAR 0 1
59044: ARRAY
59045: PUSH
59046: LD_VAR 0 2
59050: ARRAY
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PPUSH
59056: LD_EXP 58
59060: PUSH
59061: LD_VAR 0 1
59065: ARRAY
59066: PUSH
59067: LD_VAR 0 2
59071: ARRAY
59072: PUSH
59073: LD_INT 2
59075: ARRAY
59076: PPUSH
59077: LD_VAR 0 3
59081: PPUSH
59082: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59086: LD_ADDR_EXP 58
59090: PUSH
59091: LD_EXP 58
59095: PPUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: LD_EXP 58
59105: PUSH
59106: LD_VAR 0 1
59110: ARRAY
59111: PPUSH
59112: LD_VAR 0 2
59116: PPUSH
59117: CALL_OW 3
59121: PPUSH
59122: CALL_OW 1
59126: ST_TO_ADDR
// end ; end ;
59127: GO 58771
59129: POP
59130: POP
// end ;
59131: GO 58642
59133: POP
59134: POP
// end ;
59135: PPOPN 4
59137: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59138: LD_INT 0
59140: PPUSH
59141: PPUSH
59142: PPUSH
59143: PPUSH
// result := false ;
59144: LD_ADDR_VAR 0 4
59148: PUSH
59149: LD_INT 0
59151: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59152: LD_VAR 0 1
59156: PPUSH
59157: CALL_OW 264
59161: PUSH
59162: LD_INT 81
59164: EQUAL
59165: NOT
59166: IFFALSE 59170
// exit ;
59168: GO 59540
// side := GetSide ( unit ) ;
59170: LD_ADDR_VAR 0 6
59174: PUSH
59175: LD_VAR 0 1
59179: PPUSH
59180: CALL_OW 255
59184: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59185: LD_ADDR_VAR 0 5
59189: PUSH
59190: LD_EXP 57
59194: PPUSH
59195: LD_VAR 0 1
59199: PPUSH
59200: CALL 16201 0 2
59204: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59205: LD_EXP 58
59209: PUSH
59210: LD_VAR 0 5
59214: ARRAY
59215: PUSH
59216: LD_EXP 59
59220: GREATEREQUAL
59221: IFFALSE 59225
// exit ;
59223: GO 59540
// ComMoveXY ( unit , x , y ) ;
59225: LD_VAR 0 1
59229: PPUSH
59230: LD_VAR 0 2
59234: PPUSH
59235: LD_VAR 0 3
59239: PPUSH
59240: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59244: LD_INT 35
59246: PPUSH
59247: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59251: LD_VAR 0 1
59255: PPUSH
59256: LD_VAR 0 2
59260: PPUSH
59261: LD_VAR 0 3
59265: PPUSH
59266: CALL 48257 0 3
59270: NOT
59271: IFFALSE 59284
59273: PUSH
59274: LD_VAR 0 1
59278: PPUSH
59279: CALL_OW 314
59283: AND
59284: IFFALSE 59288
// exit ;
59286: GO 59540
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59288: LD_VAR 0 2
59292: PPUSH
59293: LD_VAR 0 3
59297: PPUSH
59298: CALL_OW 428
59302: PUSH
59303: LD_VAR 0 1
59307: EQUAL
59308: IFFALSE 59322
59310: PUSH
59311: LD_VAR 0 1
59315: PPUSH
59316: CALL_OW 314
59320: NOT
59321: AND
59322: IFFALSE 59244
// if MineAtPos ( x , y ) then
59324: LD_VAR 0 2
59328: PPUSH
59329: LD_VAR 0 3
59333: PPUSH
59334: CALL_OW 458
59338: IFFALSE 59342
// exit ;
59340: GO 59540
// if your_side = side then
59342: LD_OWVAR 2
59346: PUSH
59347: LD_VAR 0 6
59351: EQUAL
59352: IFFALSE 59371
// PlaySoundXY ( x , y , PlantMine ) ;
59354: LD_VAR 0 2
59358: PPUSH
59359: LD_VAR 0 3
59363: PPUSH
59364: LD_STRING PlantMine
59366: PPUSH
59367: CALL_OW 366
// repeat wait ( 1 ) ;
59371: LD_INT 1
59373: PPUSH
59374: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59378: LD_VAR 0 2
59382: PPUSH
59383: LD_VAR 0 3
59387: PPUSH
59388: LD_VAR 0 6
59392: PPUSH
59393: LD_INT 0
59395: PPUSH
59396: CALL_OW 454
59400: IFFALSE 59371
// if MineAtPos ( x , y ) then
59402: LD_VAR 0 2
59406: PPUSH
59407: LD_VAR 0 3
59411: PPUSH
59412: CALL_OW 458
59416: IFFALSE 59532
// begin for i in minerMinesList [ index ] do
59418: LD_ADDR_VAR 0 7
59422: PUSH
59423: LD_EXP 58
59427: PUSH
59428: LD_VAR 0 5
59432: ARRAY
59433: PUSH
59434: FOR_IN
59435: IFFALSE 59477
// if i [ 1 ] = x and i [ 2 ] = y then
59437: LD_VAR 0 7
59441: PUSH
59442: LD_INT 1
59444: ARRAY
59445: PUSH
59446: LD_VAR 0 2
59450: EQUAL
59451: IFFALSE 59469
59453: PUSH
59454: LD_VAR 0 7
59458: PUSH
59459: LD_INT 2
59461: ARRAY
59462: PUSH
59463: LD_VAR 0 3
59467: EQUAL
59468: AND
59469: IFFALSE 59475
// exit ;
59471: POP
59472: POP
59473: GO 59540
59475: GO 59434
59477: POP
59478: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59479: LD_ADDR_EXP 58
59483: PUSH
59484: LD_EXP 58
59488: PPUSH
59489: LD_VAR 0 5
59493: PUSH
59494: LD_EXP 58
59498: PUSH
59499: LD_VAR 0 5
59503: ARRAY
59504: PUSH
59505: LD_INT 1
59507: PLUS
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PPUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_VAR 0 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PPUSH
59527: CALL 16418 0 3
59531: ST_TO_ADDR
// end ; result := true ;
59532: LD_ADDR_VAR 0 4
59536: PUSH
59537: LD_INT 1
59539: ST_TO_ADDR
// end ;
59540: LD_VAR 0 4
59544: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59545: LD_INT 0
59547: PPUSH
59548: PPUSH
59549: PPUSH
// if not unit in minersList then
59550: LD_VAR 0 1
59554: PUSH
59555: LD_EXP 57
59559: IN
59560: NOT
59561: IFFALSE 59565
// exit ;
59563: GO 59772
// index := GetElementIndex ( minersList , unit ) ;
59565: LD_ADDR_VAR 0 6
59569: PUSH
59570: LD_EXP 57
59574: PPUSH
59575: LD_VAR 0 1
59579: PPUSH
59580: CALL 16201 0 2
59584: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59585: LD_ADDR_VAR 0 5
59589: PUSH
59590: DOUBLE
59591: LD_EXP 58
59595: PUSH
59596: LD_VAR 0 6
59600: ARRAY
59601: INC
59602: ST_TO_ADDR
59603: LD_INT 1
59605: PUSH
59606: FOR_DOWNTO
59607: IFFALSE 59770
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59609: LD_EXP 58
59613: PUSH
59614: LD_VAR 0 6
59618: ARRAY
59619: PUSH
59620: LD_VAR 0 5
59624: ARRAY
59625: PUSH
59626: LD_INT 1
59628: ARRAY
59629: PPUSH
59630: LD_EXP 58
59634: PUSH
59635: LD_VAR 0 6
59639: ARRAY
59640: PUSH
59641: LD_VAR 0 5
59645: ARRAY
59646: PUSH
59647: LD_INT 2
59649: ARRAY
59650: PPUSH
59651: LD_VAR 0 2
59655: PPUSH
59656: LD_VAR 0 3
59660: PPUSH
59661: CALL_OW 298
59665: PUSH
59666: LD_INT 6
59668: LESS
59669: IFFALSE 59768
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59671: LD_EXP 58
59675: PUSH
59676: LD_VAR 0 6
59680: ARRAY
59681: PUSH
59682: LD_VAR 0 5
59686: ARRAY
59687: PUSH
59688: LD_INT 1
59690: ARRAY
59691: PPUSH
59692: LD_EXP 58
59696: PUSH
59697: LD_VAR 0 6
59701: ARRAY
59702: PUSH
59703: LD_VAR 0 5
59707: ARRAY
59708: PUSH
59709: LD_INT 2
59711: ARRAY
59712: PPUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: CALL_OW 255
59722: PPUSH
59723: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59727: LD_ADDR_EXP 58
59731: PUSH
59732: LD_EXP 58
59736: PPUSH
59737: LD_VAR 0 6
59741: PPUSH
59742: LD_EXP 58
59746: PUSH
59747: LD_VAR 0 6
59751: ARRAY
59752: PPUSH
59753: LD_VAR 0 5
59757: PPUSH
59758: CALL_OW 3
59762: PPUSH
59763: CALL_OW 1
59767: ST_TO_ADDR
// end ; end ;
59768: GO 59606
59770: POP
59771: POP
// end ;
59772: LD_VAR 0 4
59776: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59777: LD_INT 0
59779: PPUSH
59780: PPUSH
59781: PPUSH
59782: PPUSH
59783: PPUSH
59784: PPUSH
59785: PPUSH
59786: PPUSH
59787: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59788: LD_VAR 0 1
59792: PPUSH
59793: CALL_OW 264
59797: PUSH
59798: LD_INT 81
59800: EQUAL
59801: NOT
59802: IFTRUE 59817
59804: PUSH
59805: LD_VAR 0 1
59809: PUSH
59810: LD_EXP 57
59814: IN
59815: NOT
59816: OR
59817: IFFALSE 59821
// exit ;
59819: GO 60147
// index := GetElementIndex ( minersList , unit ) ;
59821: LD_ADDR_VAR 0 6
59825: PUSH
59826: LD_EXP 57
59830: PPUSH
59831: LD_VAR 0 1
59835: PPUSH
59836: CALL 16201 0 2
59840: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59841: LD_ADDR_VAR 0 8
59845: PUSH
59846: LD_EXP 59
59850: PUSH
59851: LD_EXP 58
59855: PUSH
59856: LD_VAR 0 6
59860: ARRAY
59861: MINUS
59862: ST_TO_ADDR
// if not minesFreeAmount then
59863: LD_VAR 0 8
59867: NOT
59868: IFFALSE 59872
// exit ;
59870: GO 60147
// tmp := [ ] ;
59872: LD_ADDR_VAR 0 7
59876: PUSH
59877: EMPTY
59878: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59879: LD_ADDR_VAR 0 5
59883: PUSH
59884: DOUBLE
59885: LD_INT 1
59887: DEC
59888: ST_TO_ADDR
59889: LD_VAR 0 8
59893: PUSH
59894: FOR_TO
59895: IFFALSE 60094
// begin _d := rand ( 0 , 5 ) ;
59897: LD_ADDR_VAR 0 11
59901: PUSH
59902: LD_INT 0
59904: PPUSH
59905: LD_INT 5
59907: PPUSH
59908: CALL_OW 12
59912: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59913: LD_ADDR_VAR 0 12
59917: PUSH
59918: LD_INT 2
59920: PPUSH
59921: LD_INT 6
59923: PPUSH
59924: CALL_OW 12
59928: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59929: LD_ADDR_VAR 0 9
59933: PUSH
59934: LD_VAR 0 2
59938: PPUSH
59939: LD_VAR 0 11
59943: PPUSH
59944: LD_VAR 0 12
59948: PPUSH
59949: CALL_OW 272
59953: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59954: LD_ADDR_VAR 0 10
59958: PUSH
59959: LD_VAR 0 3
59963: PPUSH
59964: LD_VAR 0 11
59968: PPUSH
59969: LD_VAR 0 12
59973: PPUSH
59974: CALL_OW 273
59978: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59979: LD_VAR 0 9
59983: PPUSH
59984: LD_VAR 0 10
59988: PPUSH
59989: CALL_OW 488
59993: IFFALSE 60017
59995: PUSH
59996: LD_VAR 0 9
60000: PUSH
60001: LD_VAR 0 10
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_VAR 0 7
60014: IN
60015: NOT
60016: AND
60017: IFFALSE 60036
60019: PUSH
60020: LD_VAR 0 9
60024: PPUSH
60025: LD_VAR 0 10
60029: PPUSH
60030: CALL_OW 458
60034: NOT
60035: AND
60036: IFFALSE 60078
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60038: LD_ADDR_VAR 0 7
60042: PUSH
60043: LD_VAR 0 7
60047: PPUSH
60048: LD_VAR 0 7
60052: PUSH
60053: LD_INT 1
60055: PLUS
60056: PPUSH
60057: LD_VAR 0 9
60061: PUSH
60062: LD_VAR 0 10
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PPUSH
60071: CALL_OW 1
60075: ST_TO_ADDR
60076: GO 60092
// i := i - 1 ;
60078: LD_ADDR_VAR 0 5
60082: PUSH
60083: LD_VAR 0 5
60087: PUSH
60088: LD_INT 1
60090: MINUS
60091: ST_TO_ADDR
// end ;
60092: GO 59894
60094: POP
60095: POP
// for i in tmp do
60096: LD_ADDR_VAR 0 5
60100: PUSH
60101: LD_VAR 0 7
60105: PUSH
60106: FOR_IN
60107: IFFALSE 60145
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60109: LD_VAR 0 1
60113: PPUSH
60114: LD_VAR 0 5
60118: PUSH
60119: LD_INT 1
60121: ARRAY
60122: PPUSH
60123: LD_VAR 0 5
60127: PUSH
60128: LD_INT 2
60130: ARRAY
60131: PPUSH
60132: CALL 59138 0 3
60136: NOT
60137: IFFALSE 60143
// exit ;
60139: POP
60140: POP
60141: GO 60147
60143: GO 60106
60145: POP
60146: POP
// end ;
60147: LD_VAR 0 4
60151: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60152: LD_INT 0
60154: PPUSH
60155: PPUSH
60156: PPUSH
60157: PPUSH
60158: PPUSH
60159: PPUSH
60160: PPUSH
60161: PPUSH
60162: PPUSH
// if GetClass ( unit ) <> class_sniper then
60163: LD_VAR 0 1
60167: PPUSH
60168: CALL_OW 257
60172: PUSH
60173: LD_INT 5
60175: NONEQUAL
60176: IFFALSE 60180
// exit ;
60178: GO 60650
// dist := 8 ;
60180: LD_ADDR_VAR 0 5
60184: PUSH
60185: LD_INT 8
60187: ST_TO_ADDR
// viewRange := 12 ;
60188: LD_ADDR_VAR 0 8
60192: PUSH
60193: LD_INT 12
60195: ST_TO_ADDR
// side := GetSide ( unit ) ;
60196: LD_ADDR_VAR 0 6
60200: PUSH
60201: LD_VAR 0 1
60205: PPUSH
60206: CALL_OW 255
60210: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60211: LD_INT 61
60213: PPUSH
60214: LD_VAR 0 6
60218: PPUSH
60219: CALL_OW 321
60223: PUSH
60224: LD_INT 2
60226: EQUAL
60227: IFFALSE 60237
// viewRange := 16 ;
60229: LD_ADDR_VAR 0 8
60233: PUSH
60234: LD_INT 16
60236: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60237: LD_VAR 0 1
60241: PPUSH
60242: LD_VAR 0 2
60246: PPUSH
60247: LD_VAR 0 3
60251: PPUSH
60252: CALL_OW 297
60256: PUSH
60257: LD_VAR 0 5
60261: GREATER
60262: IFFALSE 60341
// begin ComMoveXY ( unit , x , y ) ;
60264: LD_VAR 0 1
60268: PPUSH
60269: LD_VAR 0 2
60273: PPUSH
60274: LD_VAR 0 3
60278: PPUSH
60279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60283: LD_INT 35
60285: PPUSH
60286: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60290: LD_VAR 0 1
60294: PPUSH
60295: LD_VAR 0 2
60299: PPUSH
60300: LD_VAR 0 3
60304: PPUSH
60305: CALL 48257 0 3
60309: NOT
60310: IFFALSE 60314
// exit ;
60312: GO 60650
// until GetDistUnitXY ( unit , x , y ) < dist ;
60314: LD_VAR 0 1
60318: PPUSH
60319: LD_VAR 0 2
60323: PPUSH
60324: LD_VAR 0 3
60328: PPUSH
60329: CALL_OW 297
60333: PUSH
60334: LD_VAR 0 5
60338: LESS
60339: IFFALSE 60283
// end ; ComTurnXY ( unit , x , y ) ;
60341: LD_VAR 0 1
60345: PPUSH
60346: LD_VAR 0 2
60350: PPUSH
60351: LD_VAR 0 3
60355: PPUSH
60356: CALL_OW 118
// repeat if Multiplayer then
60360: LD_OWVAR 4
60364: IFFALSE 60375
// wait ( 35 ) else
60366: LD_INT 35
60368: PPUSH
60369: CALL_OW 67
60373: GO 60382
// wait ( 5 ) ;
60375: LD_INT 5
60377: PPUSH
60378: CALL_OW 67
// _d := GetDir ( unit ) ;
60382: LD_ADDR_VAR 0 11
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 254
60396: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60397: LD_ADDR_VAR 0 7
60401: PUSH
60402: LD_VAR 0 1
60406: PPUSH
60407: CALL_OW 250
60411: PPUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 251
60421: PPUSH
60422: LD_VAR 0 2
60426: PPUSH
60427: LD_VAR 0 3
60431: PPUSH
60432: CALL 50893 0 4
60436: ST_TO_ADDR
// until dir = _d ;
60437: LD_VAR 0 7
60441: PUSH
60442: LD_VAR 0 11
60446: EQUAL
60447: IFFALSE 60360
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60449: LD_ADDR_VAR 0 9
60453: PUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 250
60463: PPUSH
60464: LD_VAR 0 7
60468: PPUSH
60469: LD_VAR 0 5
60473: PPUSH
60474: CALL_OW 272
60478: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60479: LD_ADDR_VAR 0 10
60483: PUSH
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 251
60493: PPUSH
60494: LD_VAR 0 7
60498: PPUSH
60499: LD_VAR 0 5
60503: PPUSH
60504: CALL_OW 273
60508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60509: LD_VAR 0 9
60513: PPUSH
60514: LD_VAR 0 10
60518: PPUSH
60519: CALL_OW 488
60523: NOT
60524: IFFALSE 60528
// exit ;
60526: GO 60650
// ComAnimCustom ( unit , 1 ) ;
60528: LD_VAR 0 1
60532: PPUSH
60533: LD_INT 1
60535: PPUSH
60536: CALL_OW 592
// p := 0 ;
60540: LD_ADDR_VAR 0 12
60544: PUSH
60545: LD_INT 0
60547: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60548: LD_VAR 0 9
60552: PPUSH
60553: LD_VAR 0 10
60557: PPUSH
60558: LD_VAR 0 6
60562: PPUSH
60563: LD_VAR 0 8
60567: PPUSH
60568: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60572: LD_INT 35
60574: PPUSH
60575: CALL_OW 67
// p := Inc ( p ) ;
60579: LD_ADDR_VAR 0 12
60583: PUSH
60584: LD_VAR 0 12
60588: PPUSH
60589: CALL 50849 0 1
60593: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60594: LD_VAR 0 12
60598: PUSH
60599: LD_INT 3
60601: EQUAL
60602: IFTRUE 60616
60604: PUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: CALL_OW 302
60614: NOT
60615: OR
60616: IFTRUE 60629
60618: PUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 301
60628: OR
60629: IFFALSE 60572
// RemoveSeeing ( _x , _y , side ) ;
60631: LD_VAR 0 9
60635: PPUSH
60636: LD_VAR 0 10
60640: PPUSH
60641: LD_VAR 0 6
60645: PPUSH
60646: CALL_OW 331
// end ;
60650: LD_VAR 0 4
60654: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60655: LD_INT 0
60657: PPUSH
60658: PPUSH
60659: PPUSH
60660: PPUSH
60661: PPUSH
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
60666: PPUSH
60667: PPUSH
// if not unit then
60668: LD_VAR 0 1
60672: NOT
60673: IFFALSE 60677
// exit ;
60675: GO 60948
// side := GetSide ( unit ) ;
60677: LD_ADDR_VAR 0 3
60681: PUSH
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 255
60691: ST_TO_ADDR
// x := GetX ( unit ) ;
60692: LD_ADDR_VAR 0 5
60696: PUSH
60697: LD_VAR 0 1
60701: PPUSH
60702: CALL_OW 250
60706: ST_TO_ADDR
// y := GetY ( unit ) ;
60707: LD_ADDR_VAR 0 6
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 251
60721: ST_TO_ADDR
// r := 8 ;
60722: LD_ADDR_VAR 0 4
60726: PUSH
60727: LD_INT 8
60729: ST_TO_ADDR
// if x - r < 0 then
60730: LD_VAR 0 5
60734: PUSH
60735: LD_VAR 0 4
60739: MINUS
60740: PUSH
60741: LD_INT 0
60743: LESS
60744: IFFALSE 60756
// min_x := 0 else
60746: LD_ADDR_VAR 0 7
60750: PUSH
60751: LD_INT 0
60753: ST_TO_ADDR
60754: GO 60772
// min_x := x - r ;
60756: LD_ADDR_VAR 0 7
60760: PUSH
60761: LD_VAR 0 5
60765: PUSH
60766: LD_VAR 0 4
60770: MINUS
60771: ST_TO_ADDR
// if y - r < 0 then
60772: LD_VAR 0 6
60776: PUSH
60777: LD_VAR 0 4
60781: MINUS
60782: PUSH
60783: LD_INT 0
60785: LESS
60786: IFFALSE 60798
// min_y := 0 else
60788: LD_ADDR_VAR 0 8
60792: PUSH
60793: LD_INT 0
60795: ST_TO_ADDR
60796: GO 60814
// min_y := y - r ;
60798: LD_ADDR_VAR 0 8
60802: PUSH
60803: LD_VAR 0 6
60807: PUSH
60808: LD_VAR 0 4
60812: MINUS
60813: ST_TO_ADDR
// max_x := x + r ;
60814: LD_ADDR_VAR 0 9
60818: PUSH
60819: LD_VAR 0 5
60823: PUSH
60824: LD_VAR 0 4
60828: PLUS
60829: ST_TO_ADDR
// max_y := y + r ;
60830: LD_ADDR_VAR 0 10
60834: PUSH
60835: LD_VAR 0 6
60839: PUSH
60840: LD_VAR 0 4
60844: PLUS
60845: ST_TO_ADDR
// for _x = min_x to max_x do
60846: LD_ADDR_VAR 0 11
60850: PUSH
60851: DOUBLE
60852: LD_VAR 0 7
60856: DEC
60857: ST_TO_ADDR
60858: LD_VAR 0 9
60862: PUSH
60863: FOR_TO
60864: IFFALSE 60946
// for _y = min_y to max_y do
60866: LD_ADDR_VAR 0 12
60870: PUSH
60871: DOUBLE
60872: LD_VAR 0 8
60876: DEC
60877: ST_TO_ADDR
60878: LD_VAR 0 10
60882: PUSH
60883: FOR_TO
60884: IFFALSE 60942
// begin if not ValidHex ( _x , _y ) then
60886: LD_VAR 0 11
60890: PPUSH
60891: LD_VAR 0 12
60895: PPUSH
60896: CALL_OW 488
60900: NOT
60901: IFFALSE 60905
// continue ;
60903: GO 60883
// if MineAtPos ( _x , _y ) then
60905: LD_VAR 0 11
60909: PPUSH
60910: LD_VAR 0 12
60914: PPUSH
60915: CALL_OW 458
60919: IFFALSE 60940
// ViewMineAtPos ( _x , _y , side ) ;
60921: LD_VAR 0 11
60925: PPUSH
60926: LD_VAR 0 12
60930: PPUSH
60931: LD_VAR 0 3
60935: PPUSH
60936: CALL_OW 457
// end ;
60940: GO 60883
60942: POP
60943: POP
60944: GO 60863
60946: POP
60947: POP
// end ;
60948: LD_VAR 0 2
60952: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
60953: LD_INT 0
60955: PPUSH
60956: PPUSH
60957: PPUSH
60958: PPUSH
60959: PPUSH
60960: PPUSH
60961: PPUSH
// if not units then
60962: LD_VAR 0 1
60966: NOT
60967: IFFALSE 60971
// exit ;
60969: GO 61435
// scaners := [ ] ;
60971: LD_ADDR_VAR 0 6
60975: PUSH
60976: EMPTY
60977: ST_TO_ADDR
// for i in units do
60978: LD_ADDR_VAR 0 3
60982: PUSH
60983: LD_VAR 0 1
60987: PUSH
60988: FOR_IN
60989: IFFALSE 61146
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60991: LD_VAR 0 3
60995: PPUSH
60996: CALL_OW 264
61000: PUSH
61001: LD_INT 11
61003: NONEQUAL
61004: IFTRUE 61018
61006: PUSH
61007: LD_VAR 0 3
61011: PPUSH
61012: CALL_OW 302
61016: NOT
61017: OR
61018: IFTRUE 61035
61020: PUSH
61021: LD_VAR 0 3
61025: PPUSH
61026: CALL_OW 110
61030: PUSH
61031: LD_INT 502
61033: EQUAL
61034: OR
61035: IFFALSE 61039
// continue ;
61037: GO 60988
// ComStop ( i ) ;
61039: LD_VAR 0 3
61043: PPUSH
61044: CALL_OW 141
// x := GetX ( i ) ;
61048: LD_ADDR_VAR 0 4
61052: PUSH
61053: LD_VAR 0 3
61057: PPUSH
61058: CALL_OW 250
61062: ST_TO_ADDR
// y := GetY ( i ) ;
61063: LD_ADDR_VAR 0 5
61067: PUSH
61068: LD_VAR 0 3
61072: PPUSH
61073: CALL_OW 251
61077: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61078: LD_VAR 0 3
61082: PPUSH
61083: CALL_OW 255
61087: PUSH
61088: LD_OWVAR 2
61092: EQUAL
61093: IFFALSE 61112
// PlaySoundXY ( x , y , mineDetector ) ;
61095: LD_VAR 0 4
61099: PPUSH
61100: LD_VAR 0 5
61104: PPUSH
61105: LD_STRING mineDetector
61107: PPUSH
61108: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61112: LD_ADDR_VAR 0 6
61116: PUSH
61117: LD_VAR 0 6
61121: PPUSH
61122: LD_VAR 0 3
61126: PPUSH
61127: CALL 49476 0 2
61131: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61132: LD_VAR 0 3
61136: PPUSH
61137: LD_INT 502
61139: PPUSH
61140: CALL_OW 109
// end ;
61144: GO 60988
61146: POP
61147: POP
// if not scaners then
61148: LD_VAR 0 6
61152: NOT
61153: IFFALSE 61157
// exit ;
61155: GO 61435
// wait ( 3 ) ;
61157: LD_INT 3
61159: PPUSH
61160: CALL_OW 67
// timer := 6 ;
61164: LD_ADDR_VAR 0 7
61168: PUSH
61169: LD_INT 6
61171: ST_TO_ADDR
// repeat for i in scaners do
61172: LD_ADDR_VAR 0 3
61176: PUSH
61177: LD_VAR 0 6
61181: PUSH
61182: FOR_IN
61183: IFFALSE 61333
// begin side := GetSide ( i ) ;
61185: LD_ADDR_VAR 0 8
61189: PUSH
61190: LD_VAR 0 3
61194: PPUSH
61195: CALL_OW 255
61199: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61200: LD_VAR 0 3
61204: PPUSH
61205: CALL_OW 302
61209: NOT
61210: IFTRUE 61223
61212: PUSH
61213: LD_VAR 0 3
61217: PPUSH
61218: CALL_OW 314
61222: OR
61223: IFTRUE 61254
61225: PUSH
61226: LD_VAR 0 3
61230: PPUSH
61231: CALL_OW 263
61235: PUSH
61236: LD_INT 1
61238: EQUAL
61239: IFFALSE 61253
61241: PUSH
61242: LD_VAR 0 3
61246: PPUSH
61247: CALL_OW 311
61251: NOT
61252: AND
61253: OR
61254: IFFALSE 61298
// begin SetUnitDisplayNumber ( i , 0 ) ;
61256: LD_VAR 0 3
61260: PPUSH
61261: LD_INT 0
61263: PPUSH
61264: CALL_OW 505
// SetTag ( i , 0 ) ;
61268: LD_VAR 0 3
61272: PPUSH
61273: LD_INT 0
61275: PPUSH
61276: CALL_OW 109
// scaners := scaners diff i ;
61280: LD_ADDR_VAR 0 6
61284: PUSH
61285: LD_VAR 0 6
61289: PUSH
61290: LD_VAR 0 3
61294: DIFF
61295: ST_TO_ADDR
// continue ;
61296: GO 61182
// end ; if side in [ your_side , 9 ] then
61298: LD_VAR 0 8
61302: PUSH
61303: LD_OWVAR 2
61307: PUSH
61308: LD_INT 9
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: IN
61315: IFFALSE 61331
// SetUnitDisplayNumber ( i , timer ) ;
61317: LD_VAR 0 3
61321: PPUSH
61322: LD_VAR 0 7
61326: PPUSH
61327: CALL_OW 505
// end ;
61331: GO 61182
61333: POP
61334: POP
// if not scaners then
61335: LD_VAR 0 6
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61435
// timer := Dec ( timer ) ;
61344: LD_ADDR_VAR 0 7
61348: PUSH
61349: LD_VAR 0 7
61353: PPUSH
61354: CALL 50871 0 1
61358: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61359: LD_INT 35
61361: PPUSH
61362: CALL_OW 67
// until timer = 0 ;
61366: LD_VAR 0 7
61370: PUSH
61371: LD_INT 0
61373: EQUAL
61374: IFFALSE 61172
// if not scaners then
61376: LD_VAR 0 6
61380: NOT
61381: IFFALSE 61385
// exit ;
61383: GO 61435
// for i in scaners do
61385: LD_ADDR_VAR 0 3
61389: PUSH
61390: LD_VAR 0 6
61394: PUSH
61395: FOR_IN
61396: IFFALSE 61433
// begin SetUnitDisplayNumber ( i , 0 ) ;
61398: LD_VAR 0 3
61402: PPUSH
61403: LD_INT 0
61405: PPUSH
61406: CALL_OW 505
// SetTag ( i , 0 ) ;
61410: LD_VAR 0 3
61414: PPUSH
61415: LD_INT 0
61417: PPUSH
61418: CALL_OW 109
// RevealDetectorMine ( i ) ;
61422: LD_VAR 0 3
61426: PPUSH
61427: CALL 60655 0 1
// end ;
61431: GO 61395
61433: POP
61434: POP
// end ;
61435: LD_VAR 0 2
61439: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61440: LD_INT 0
61442: PPUSH
// if p1 = mine_detector_mode then
61443: LD_VAR 0 2
61447: PUSH
61448: LD_INT 103
61450: EQUAL
61451: IFFALSE 61462
// DetectMine ( units ) ;
61453: LD_VAR 0 1
61457: PPUSH
61458: CALL 60953 0 1
// end ; end_of_file
61462: LD_VAR 0 7
61466: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61467: LD_EXP 39
61471: IFFALSE 61812
61473: GO 61475
61475: DISABLE
61476: LD_INT 0
61478: PPUSH
61479: PPUSH
61480: PPUSH
// begin mpKingPoints := [ ] ;
61481: LD_ADDR_EXP 60
61485: PUSH
61486: EMPTY
61487: ST_TO_ADDR
// if mpTeamGame then
61488: LD_EXP 11
61492: IFFALSE 61546
// begin for i := 1 to Count ( mpTeams ) do
61494: LD_ADDR_VAR 0 1
61498: PUSH
61499: DOUBLE
61500: LD_INT 1
61502: DEC
61503: ST_TO_ADDR
61504: LD_EXP 10
61508: PPUSH
61509: CALL 13500 0 1
61513: PUSH
61514: FOR_TO
61515: IFFALSE 61542
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61517: LD_ADDR_EXP 60
61521: PUSH
61522: LD_EXP 60
61526: PPUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: LD_INT 0
61534: PPUSH
61535: CALL_OW 1
61539: ST_TO_ADDR
61540: GO 61514
61542: POP
61543: POP
// end else
61544: GO 61589
// begin for i := 1 to 8 do
61546: LD_ADDR_VAR 0 1
61550: PUSH
61551: DOUBLE
61552: LD_INT 1
61554: DEC
61555: ST_TO_ADDR
61556: LD_INT 8
61558: PUSH
61559: FOR_TO
61560: IFFALSE 61587
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61562: LD_ADDR_EXP 60
61566: PUSH
61567: LD_EXP 60
61571: PPUSH
61572: LD_VAR 0 1
61576: PPUSH
61577: LD_INT 0
61579: PPUSH
61580: CALL_OW 1
61584: ST_TO_ADDR
61585: GO 61559
61587: POP
61588: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61589: LD_ADDR_VAR 0 3
61593: PUSH
61594: LD_EXP 2
61598: PPUSH
61599: LD_INT 0
61601: PPUSH
61602: CALL_OW 517
61606: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61607: LD_ADDR_VAR 0 1
61611: PUSH
61612: DOUBLE
61613: LD_INT 1
61615: DEC
61616: ST_TO_ADDR
61617: LD_VAR 0 3
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: PUSH
61626: FOR_TO
61627: IFFALSE 61694
// for j := 1 to 8 do
61629: LD_ADDR_VAR 0 2
61633: PUSH
61634: DOUBLE
61635: LD_INT 1
61637: DEC
61638: ST_TO_ADDR
61639: LD_INT 8
61641: PUSH
61642: FOR_TO
61643: IFFALSE 61690
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61645: LD_VAR 0 3
61649: PUSH
61650: LD_INT 1
61652: ARRAY
61653: PUSH
61654: LD_VAR 0 1
61658: ARRAY
61659: PPUSH
61660: LD_VAR 0 3
61664: PUSH
61665: LD_INT 2
61667: ARRAY
61668: PUSH
61669: LD_VAR 0 1
61673: ARRAY
61674: PPUSH
61675: LD_VAR 0 2
61679: PPUSH
61680: LD_INT 12
61682: NEG
61683: PPUSH
61684: CALL_OW 330
61688: GO 61642
61690: POP
61691: POP
61692: GO 61626
61694: POP
61695: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61696: LD_EXP 34
61700: PPUSH
61701: LD_INT 1
61703: PPUSH
61704: CALL_OW 424
// UpdateCounter ;
61708: CALL 62318 0 0
// repeat wait ( 0 0$1 ) ;
61712: LD_INT 35
61714: PPUSH
61715: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61719: LD_ADDR_VAR 0 3
61723: PUSH
61724: LD_EXP 34
61728: PPUSH
61729: LD_INT 3
61731: PUSH
61732: LD_INT 57
61734: PUSH
61735: EMPTY
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 50
61744: PUSH
61745: EMPTY
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 30
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 30
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: PPUSH
61781: CALL_OW 70
61785: ST_TO_ADDR
// if not tmp then
61786: LD_VAR 0 3
61790: NOT
61791: IFFALSE 61795
// continue ;
61793: GO 61712
// AddPoints ( tmp ) ;
61795: LD_VAR 0 3
61799: PPUSH
61800: CALL 61996 0 1
// UpdateCounter ;
61804: CALL 62318 0 0
// until false ;
61808: LD_INT 0
61810: IFFALSE 61712
// end ;
61812: PPOPN 3
61814: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61815: LD_EXP 39
61819: IFFALSE 61827
61821: PUSH
61822: LD_EXP 37
61826: AND
61827: IFFALSE 61993
61829: GO 61831
61831: DISABLE
61832: LD_INT 0
61834: PPUSH
61835: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61836: LD_ADDR_VAR 0 2
61840: PUSH
61841: LD_EXP 2
61845: PPUSH
61846: LD_INT 0
61848: PPUSH
61849: CALL_OW 517
61853: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61854: LD_ADDR_VAR 0 1
61858: PUSH
61859: DOUBLE
61860: LD_INT 1
61862: DEC
61863: ST_TO_ADDR
61864: LD_VAR 0 2
61868: PUSH
61869: LD_INT 1
61871: ARRAY
61872: PUSH
61873: FOR_TO
61874: IFFALSE 61915
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61876: LD_VAR 0 2
61880: PUSH
61881: LD_INT 1
61883: ARRAY
61884: PUSH
61885: LD_VAR 0 1
61889: ARRAY
61890: PPUSH
61891: LD_VAR 0 2
61895: PUSH
61896: LD_INT 2
61898: ARRAY
61899: PUSH
61900: LD_VAR 0 1
61904: ARRAY
61905: PPUSH
61906: LD_INT 125
61908: PPUSH
61909: CALL_OW 495
61913: GO 61873
61915: POP
61916: POP
// repeat wait ( mpEmissions ) ;
61917: LD_EXP 37
61921: PPUSH
61922: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61926: LD_ADDR_VAR 0 1
61930: PUSH
61931: DOUBLE
61932: LD_INT 1
61934: DEC
61935: ST_TO_ADDR
61936: LD_VAR 0 2
61940: PUSH
61941: LD_INT 1
61943: ARRAY
61944: PUSH
61945: FOR_TO
61946: IFFALSE 61987
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61948: LD_VAR 0 2
61952: PUSH
61953: LD_INT 1
61955: ARRAY
61956: PUSH
61957: LD_VAR 0 1
61961: ARRAY
61962: PPUSH
61963: LD_VAR 0 2
61967: PUSH
61968: LD_INT 2
61970: ARRAY
61971: PUSH
61972: LD_VAR 0 1
61976: ARRAY
61977: PPUSH
61978: LD_INT 15
61980: PPUSH
61981: CALL_OW 495
61985: GO 61945
61987: POP
61988: POP
// until false ;
61989: LD_INT 0
61991: IFFALSE 61917
// end ;
61993: PPOPN 2
61995: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61996: LD_INT 0
61998: PPUSH
61999: PPUSH
62000: PPUSH
62001: PPUSH
62002: PPUSH
// if mpTeamGame then
62003: LD_EXP 11
62007: IFFALSE 62204
// begin first := depots [ 1 ] ;
62009: LD_ADDR_VAR 0 4
62013: PUSH
62014: LD_VAR 0 1
62018: PUSH
62019: LD_INT 1
62021: ARRAY
62022: ST_TO_ADDR
// side := GetSide ( first ) ;
62023: LD_ADDR_VAR 0 6
62027: PUSH
62028: LD_VAR 0 4
62032: PPUSH
62033: CALL_OW 255
62037: ST_TO_ADDR
// for i := 1 to mpTeams do
62038: LD_ADDR_VAR 0 3
62042: PUSH
62043: DOUBLE
62044: LD_INT 1
62046: DEC
62047: ST_TO_ADDR
62048: LD_EXP 10
62052: PUSH
62053: FOR_TO
62054: IFFALSE 62088
// if side in mpTeams [ i ] then
62056: LD_VAR 0 6
62060: PUSH
62061: LD_EXP 10
62065: PUSH
62066: LD_VAR 0 3
62070: ARRAY
62071: IN
62072: IFFALSE 62086
// begin team := i ;
62074: LD_ADDR_VAR 0 5
62078: PUSH
62079: LD_VAR 0 3
62083: ST_TO_ADDR
// break ;
62084: GO 62088
// end ;
62086: GO 62053
62088: POP
62089: POP
// if not team then
62090: LD_VAR 0 5
62094: NOT
62095: IFFALSE 62099
// exit ;
62097: GO 62313
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62099: LD_EXP 34
62103: PPUSH
62104: LD_INT 81
62106: PUSH
62107: LD_VAR 0 6
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PPUSH
62116: CALL_OW 70
62120: IFFALSE 62124
// exit ;
62122: GO 62313
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62124: LD_ADDR_EXP 60
62128: PUSH
62129: LD_EXP 60
62133: PPUSH
62134: LD_VAR 0 5
62138: PPUSH
62139: LD_EXP 60
62143: PUSH
62144: LD_VAR 0 5
62148: ARRAY
62149: PUSH
62150: LD_INT 1
62152: PLUS
62153: PPUSH
62154: CALL_OW 1
62158: ST_TO_ADDR
// for i in mpTeams [ team ] do
62159: LD_ADDR_VAR 0 3
62163: PUSH
62164: LD_EXP 10
62168: PUSH
62169: LD_VAR 0 5
62173: ARRAY
62174: PUSH
62175: FOR_IN
62176: IFFALSE 62200
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62178: LD_VAR 0 3
62182: PPUSH
62183: LD_EXP 60
62187: PUSH
62188: LD_VAR 0 5
62192: ARRAY
62193: PPUSH
62194: CALL_OW 506
62198: GO 62175
62200: POP
62201: POP
// end else
62202: GO 62313
// begin first := depots [ 1 ] ;
62204: LD_ADDR_VAR 0 4
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 1
62216: ARRAY
62217: ST_TO_ADDR
// side := GetSide ( first ) ;
62218: LD_ADDR_VAR 0 6
62222: PUSH
62223: LD_VAR 0 4
62227: PPUSH
62228: CALL_OW 255
62232: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62233: LD_EXP 34
62237: PPUSH
62238: LD_INT 81
62240: PUSH
62241: LD_VAR 0 6
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PPUSH
62250: CALL_OW 70
62254: IFFALSE 62258
// exit ;
62256: GO 62313
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62258: LD_ADDR_EXP 60
62262: PUSH
62263: LD_EXP 60
62267: PPUSH
62268: LD_VAR 0 6
62272: PPUSH
62273: LD_EXP 60
62277: PUSH
62278: LD_VAR 0 6
62282: ARRAY
62283: PUSH
62284: LD_INT 1
62286: PLUS
62287: PPUSH
62288: CALL_OW 1
62292: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62293: LD_VAR 0 6
62297: PPUSH
62298: LD_EXP 60
62302: PUSH
62303: LD_VAR 0 6
62307: ARRAY
62308: PPUSH
62309: CALL_OW 506
// end ; end ;
62313: LD_VAR 0 2
62317: RET
// function UpdateCounter ; var i ; begin
62318: LD_INT 0
62320: PPUSH
62321: PPUSH
// result := [ ] ;
62322: LD_ADDR_VAR 0 1
62326: PUSH
62327: EMPTY
62328: ST_TO_ADDR
// if mpTeamGame then
62329: LD_EXP 11
62333: IFFALSE 62400
// begin for i := 1 to mpTeams do
62335: LD_ADDR_VAR 0 2
62339: PUSH
62340: DOUBLE
62341: LD_INT 1
62343: DEC
62344: ST_TO_ADDR
62345: LD_EXP 10
62349: PUSH
62350: FOR_TO
62351: IFFALSE 62396
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62353: LD_ADDR_VAR 0 1
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: LD_STRING #KingoftheHill-Team
62365: PUSH
62366: LD_VAR 0 2
62370: PUSH
62371: LD_EXP 60
62375: PUSH
62376: LD_VAR 0 2
62380: ARRAY
62381: PUSH
62382: LD_EXP 35
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: ADD
62393: ST_TO_ADDR
62394: GO 62350
62396: POP
62397: POP
// end else
62398: GO 62473
// begin for i := 1 to 8 do
62400: LD_ADDR_VAR 0 2
62404: PUSH
62405: DOUBLE
62406: LD_INT 1
62408: DEC
62409: ST_TO_ADDR
62410: LD_INT 8
62412: PUSH
62413: FOR_TO
62414: IFFALSE 62471
// if mpSidePositions [ i ] then
62416: LD_EXP 7
62420: PUSH
62421: LD_VAR 0 2
62425: ARRAY
62426: IFFALSE 62469
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62428: LD_ADDR_VAR 0 1
62432: PUSH
62433: LD_VAR 0 1
62437: PUSH
62438: LD_STRING #KingoftheHill-Player
62440: PUSH
62441: LD_VAR 0 2
62445: PUSH
62446: LD_EXP 60
62450: PUSH
62451: LD_VAR 0 2
62455: ARRAY
62456: PUSH
62457: LD_EXP 35
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: ADD
62468: ST_TO_ADDR
62469: GO 62413
62471: POP
62472: POP
// end ; mpDisplayStrings := result ;
62473: LD_ADDR_EXP 38
62477: PUSH
62478: LD_VAR 0 1
62482: ST_TO_ADDR
// end ;
62483: LD_VAR 0 1
62487: RET
// export function HowMuchPointsKing ( side ) ; begin
62488: LD_INT 0
62490: PPUSH
// result := HowMuchPoints ( side ) ;
62491: LD_ADDR_VAR 0 2
62495: PUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL 62511 0 1
62505: ST_TO_ADDR
// end ;
62506: LD_VAR 0 2
62510: RET
// function HowMuchPoints ( side ) ; var i ; begin
62511: LD_INT 0
62513: PPUSH
62514: PPUSH
// if mpTeamGame then
62515: LD_EXP 11
62519: IFFALSE 62588
// begin for i := 1 to Count ( mpTeams ) do
62521: LD_ADDR_VAR 0 3
62525: PUSH
62526: DOUBLE
62527: LD_INT 1
62529: DEC
62530: ST_TO_ADDR
62531: LD_EXP 10
62535: PPUSH
62536: CALL 13500 0 1
62540: PUSH
62541: FOR_TO
62542: IFFALSE 62584
// begin if side in mpTeams [ i ] then
62544: LD_VAR 0 1
62548: PUSH
62549: LD_EXP 10
62553: PUSH
62554: LD_VAR 0 3
62558: ARRAY
62559: IN
62560: IFFALSE 62582
// begin result := mpKingPoints [ i ] ;
62562: LD_ADDR_VAR 0 2
62566: PUSH
62567: LD_EXP 60
62571: PUSH
62572: LD_VAR 0 3
62576: ARRAY
62577: ST_TO_ADDR
// exit ;
62578: POP
62579: POP
62580: GO 62604
// end ; end ;
62582: GO 62541
62584: POP
62585: POP
// end else
62586: GO 62604
// result := mpKingPoints [ side ] ;
62588: LD_ADDR_VAR 0 2
62592: PUSH
62593: LD_EXP 60
62597: PUSH
62598: LD_VAR 0 1
62602: ARRAY
62603: ST_TO_ADDR
// end ;
62604: LD_VAR 0 2
62608: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62609: LD_EXP 39
62613: IFFALSE 62621
62615: PUSH
62616: CALL 63033 0 0
62620: AND
62621: IFFALSE 62629
62623: PUSH
62624: LD_OWVAR 4
62628: AND
62629: IFFALSE 62882
62631: GO 62633
62633: DISABLE
62634: LD_INT 0
62636: PPUSH
62637: PPUSH
// begin canWin := false ;
62638: LD_ADDR_VAR 0 2
62642: PUSH
62643: LD_INT 0
62645: ST_TO_ADDR
// if not HasPower ( your_side ) then
62646: LD_OWVAR 2
62650: PPUSH
62651: CALL 63075 0 1
62655: NOT
62656: IFFALSE 62667
// begin Multiplayer_Loose_Message ;
62658: CALL_OW 521
// enable ( mpLose ) ;
62662: LD_INT 102
62664: ENABLE_MARKED
// end else
62665: GO 62882
// begin if not EnemiesInGame then
62667: CALL 62885 0 0
62671: NOT
62672: IFFALSE 62679
// begin enable ( mpWin ) ;
62674: LD_INT 101
62676: ENABLE_MARKED
// exit ;
62677: GO 62882
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62679: LD_ADDR_VAR 0 2
62683: PUSH
62684: LD_OWVAR 2
62688: PPUSH
62689: CALL 62511 0 1
62693: PUSH
62694: LD_EXP 35
62698: GREATEREQUAL
62699: IFFALSE 62712
62701: PUSH
62702: LD_OWVAR 2
62706: PPUSH
62707: CALL 63075 0 1
62711: AND
62712: ST_TO_ADDR
// for i := 1 to 8 do
62713: LD_ADDR_VAR 0 1
62717: PUSH
62718: DOUBLE
62719: LD_INT 1
62721: DEC
62722: ST_TO_ADDR
62723: LD_INT 8
62725: PUSH
62726: FOR_TO
62727: IFFALSE 62868
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62729: LD_EXP 7
62733: PUSH
62734: LD_VAR 0 1
62738: ARRAY
62739: IFFALSE 62752
62741: PUSH
62742: LD_VAR 0 1
62746: PPUSH
62747: CALL_OW 108
62751: AND
62752: IFFALSE 62766
62754: PUSH
62755: LD_VAR 0 1
62759: PUSH
62760: LD_OWVAR 2
62764: NONEQUAL
62765: AND
62766: IFFALSE 62866
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62768: LD_EXP 8
62772: PUSH
62773: LD_VAR 0 1
62777: ARRAY
62778: NOT
62779: IFTRUE 62827
62781: PUSH
62782: LD_EXP 8
62786: PUSH
62787: LD_VAR 0 1
62791: ARRAY
62792: PUSH
62793: LD_EXP 8
62797: PUSH
62798: LD_OWVAR 2
62802: ARRAY
62803: NONEQUAL
62804: IFFALSE 62826
62806: PUSH
62807: LD_OWVAR 2
62811: PPUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: CALL_OW 81
62821: PUSH
62822: LD_INT 1
62824: NONEQUAL
62825: AND
62826: OR
62827: IFFALSE 62866
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62829: LD_VAR 0 1
62833: PPUSH
62834: CALL 62511 0 1
62838: PUSH
62839: LD_EXP 35
62843: GREATEREQUAL
62844: IFFALSE 62857
62846: PUSH
62847: LD_VAR 0 1
62851: PPUSH
62852: CALL 63075 0 1
62856: AND
62857: IFFALSE 62866
// begin enable ( mpLose ) ;
62859: LD_INT 102
62861: ENABLE_MARKED
// exit ;
62862: POP
62863: POP
62864: GO 62882
// end ;
62866: GO 62726
62868: POP
62869: POP
// if canWin then
62870: LD_VAR 0 2
62874: IFFALSE 62881
// enable ( mpWin ) else
62876: LD_INT 101
62878: ENABLE_MARKED
62879: GO 62882
// enable ;
62881: ENABLE
// end ; end ;
62882: PPOPN 2
62884: END
// function EnemiesInGame ; var i ; begin
62885: LD_INT 0
62887: PPUSH
62888: PPUSH
// result := false ;
62889: LD_ADDR_VAR 0 1
62893: PUSH
62894: LD_INT 0
62896: ST_TO_ADDR
// for i := 1 to 8 do
62897: LD_ADDR_VAR 0 2
62901: PUSH
62902: DOUBLE
62903: LD_INT 1
62905: DEC
62906: ST_TO_ADDR
62907: LD_INT 8
62909: PUSH
62910: FOR_TO
62911: IFFALSE 63026
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62913: LD_VAR 0 2
62917: PUSH
62918: LD_OWVAR 2
62922: NONEQUAL
62923: IFFALSE 62936
62925: PUSH
62926: LD_VAR 0 2
62930: PPUSH
62931: CALL 63075 0 1
62935: AND
62936: IFFALSE 62949
62938: PUSH
62939: LD_VAR 0 2
62943: PPUSH
62944: CALL_OW 108
62948: AND
62949: IFFALSE 63024
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62951: LD_EXP 8
62955: PUSH
62956: LD_VAR 0 2
62960: ARRAY
62961: NOT
62962: IFTRUE 63010
62964: PUSH
62965: LD_EXP 8
62969: PUSH
62970: LD_VAR 0 2
62974: ARRAY
62975: PUSH
62976: LD_EXP 8
62980: PUSH
62981: LD_OWVAR 2
62985: ARRAY
62986: NONEQUAL
62987: IFFALSE 63009
62989: PUSH
62990: LD_OWVAR 2
62994: PPUSH
62995: LD_VAR 0 2
62999: PPUSH
63000: CALL_OW 81
63004: PUSH
63005: LD_INT 1
63007: NONEQUAL
63008: AND
63009: OR
63010: IFFALSE 63024
// begin result := true ;
63012: LD_ADDR_VAR 0 1
63016: PUSH
63017: LD_INT 1
63019: ST_TO_ADDR
// exit ;
63020: POP
63021: POP
63022: GO 63028
// end ;
63024: GO 62910
63026: POP
63027: POP
// end ;
63028: LD_VAR 0 1
63032: RET
// function CanWinLoose ; begin
63033: LD_INT 0
63035: PPUSH
// result := true ;
63036: LD_ADDR_VAR 0 1
63040: PUSH
63041: LD_INT 1
63043: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63044: CALL_OW 531
63048: IFFALSE 63060
63050: PUSH
63051: CALL_OW 519
63055: PUSH
63056: LD_INT 1
63058: GREATER
63059: AND
63060: IFFALSE 63070
// result := false ;
63062: LD_ADDR_VAR 0 1
63066: PUSH
63067: LD_INT 0
63069: ST_TO_ADDR
// end ;
63070: LD_VAR 0 1
63074: RET
// function HasPower ( i ) ; begin
63075: LD_INT 0
63077: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63078: LD_ADDR_VAR 0 2
63082: PUSH
63083: LD_INT 22
63085: PUSH
63086: LD_VAR 0 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 21
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 33
63110: PUSH
63111: LD_INT 3
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 33
63120: PUSH
63121: LD_INT 5
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PPUSH
63138: CALL_OW 69
63142: ST_TO_ADDR
// end ; end_of_file
63143: LD_VAR 0 2
63147: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63148: PPOPN 6
63150: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63151: LD_INT 0
63153: PPUSH
// begin if not units then
63154: LD_VAR 0 1
63158: NOT
63159: IFFALSE 63163
// exit ;
63161: GO 63197
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63163: LD_VAR 0 1
63167: PPUSH
63168: LD_VAR 0 2
63172: PPUSH
63173: LD_VAR 0 3
63177: PPUSH
63178: LD_VAR 0 4
63182: PPUSH
63183: LD_VAR 0 5
63187: PPUSH
63188: LD_VAR 0 6
63192: PPUSH
63193: CALL 61440 0 6
// end ;
63197: PPOPN 7
63199: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63200: LD_EXP 3
63204: PUSH
63205: LD_INT 4
63207: EQUAL
63208: IFFALSE 63244
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63210: LD_STRING setGameDifficulty(
63212: PUSH
63213: LD_OWVAR 67
63217: STR
63218: PUSH
63219: LD_STRING )
63221: STR
63222: PPUSH
63223: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63227: LD_STRING displayDifficulty(
63229: PUSH
63230: LD_OWVAR 67
63234: STR
63235: PUSH
63236: LD_STRING )
63238: STR
63239: PPUSH
63240: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63244: CALL 63273 0 0
// end ; end_of_file
63248: PPOPN 1
63250: END
// every 0 0$1 do
63251: GO 63253
63253: DISABLE
// begin enable ;
63254: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63255: LD_STRING updateTimer(
63257: PUSH
63258: LD_OWVAR 1
63262: STR
63263: PUSH
63264: LD_STRING );
63266: STR
63267: PPUSH
63268: CALL_OW 559
// end ;
63272: END
// export function SOS_MapStart ( ) ; begin
63273: LD_INT 0
63275: PPUSH
// UpdateFactoryWaypoints ( ) ;
63276: CALL 64207 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63280: CALL 64459 0 0
// ParseMultiDataToLua ( ) ;
63284: CALL 64606 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63288: LD_STRING setSpecLogoNumber(
63290: PUSH
63291: LD_INT 2
63293: STR
63294: PUSH
63295: LD_STRING ,
63297: STR
63298: PUSH
63299: LD_INT 1
63301: STR
63302: PUSH
63303: LD_STRING )
63305: STR
63306: PPUSH
63307: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63311: LD_STRING setSpecLogoNumber(
63313: PUSH
63314: LD_INT 3
63316: STR
63317: PUSH
63318: LD_STRING ,
63320: STR
63321: PUSH
63322: LD_INT 2
63324: STR
63325: PUSH
63326: LD_STRING )
63328: STR
63329: PPUSH
63330: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63334: LD_STRING setSpecLogoNumber(
63336: PUSH
63337: LD_INT 4
63339: STR
63340: PUSH
63341: LD_STRING ,
63343: STR
63344: PUSH
63345: LD_INT 3
63347: STR
63348: PUSH
63349: LD_STRING )
63351: STR
63352: PPUSH
63353: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63357: LD_STRING setSpecLogoNumber(
63359: PUSH
63360: LD_INT 5
63362: STR
63363: PUSH
63364: LD_STRING ,
63366: STR
63367: PUSH
63368: LD_INT 4
63370: STR
63371: PUSH
63372: LD_STRING )
63374: STR
63375: PPUSH
63376: CALL_OW 559
// end ;
63380: LD_VAR 0 1
63384: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63385: LD_INT 0
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
63391: PPUSH
63392: PPUSH
63393: PPUSH
63394: PPUSH
63395: PPUSH
// for i := 1 to 8 do
63396: LD_ADDR_VAR 0 2
63400: PUSH
63401: DOUBLE
63402: LD_INT 1
63404: DEC
63405: ST_TO_ADDR
63406: LD_INT 8
63408: PUSH
63409: FOR_TO
63410: IFFALSE 63795
// begin if mpSidePositions [ i ] then
63412: LD_EXP 7
63416: PUSH
63417: LD_VAR 0 2
63421: ARRAY
63422: IFFALSE 63793
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63424: LD_ADDR_VAR 0 7
63428: PUSH
63429: LD_INT 22
63431: PUSH
63432: LD_VAR 0 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 21
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PPUSH
63455: CALL_OW 69
63459: PPUSH
63460: CALL 13500 0 1
63464: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63465: LD_ADDR_VAR 0 9
63469: PUSH
63470: LD_INT 22
63472: PUSH
63473: LD_VAR 0 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 30
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 30
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: LIST
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PPUSH
63514: CALL_OW 69
63518: ST_TO_ADDR
// crates := 0 ;
63519: LD_ADDR_VAR 0 4
63523: PUSH
63524: LD_INT 0
63526: ST_TO_ADDR
// oil := 0 ;
63527: LD_ADDR_VAR 0 5
63531: PUSH
63532: LD_INT 0
63534: ST_TO_ADDR
// sib := 0 ;
63535: LD_ADDR_VAR 0 6
63539: PUSH
63540: LD_INT 0
63542: ST_TO_ADDR
// if bases then
63543: LD_VAR 0 9
63547: IFFALSE 63653
// begin for j in bases do
63549: LD_ADDR_VAR 0 3
63553: PUSH
63554: LD_VAR 0 9
63558: PUSH
63559: FOR_IN
63560: IFFALSE 63651
// begin base := GetBase ( j ) ;
63562: LD_ADDR_VAR 0 8
63566: PUSH
63567: LD_VAR 0 3
63571: PPUSH
63572: CALL_OW 274
63576: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63577: LD_ADDR_VAR 0 4
63581: PUSH
63582: LD_VAR 0 4
63586: PUSH
63587: LD_VAR 0 8
63591: PPUSH
63592: LD_INT 1
63594: PPUSH
63595: CALL_OW 275
63599: PLUS
63600: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63601: LD_ADDR_VAR 0 5
63605: PUSH
63606: LD_VAR 0 5
63610: PUSH
63611: LD_VAR 0 8
63615: PPUSH
63616: LD_INT 2
63618: PPUSH
63619: CALL_OW 275
63623: PLUS
63624: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63625: LD_ADDR_VAR 0 6
63629: PUSH
63630: LD_VAR 0 6
63634: PUSH
63635: LD_VAR 0 8
63639: PPUSH
63640: LD_INT 3
63642: PPUSH
63643: CALL_OW 275
63647: PLUS
63648: ST_TO_ADDR
// end ;
63649: GO 63559
63651: POP
63652: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63653: LD_STRING setSpecText(
63655: PUSH
63656: LD_VAR 0 2
63660: STR
63661: PUSH
63662: LD_STRING ,
63664: STR
63665: PUSH
63666: LD_INT 2
63668: STR
63669: PUSH
63670: LD_STRING ,
63672: STR
63673: PUSH
63674: LD_VAR 0 4
63678: STR
63679: PUSH
63680: LD_STRING )
63682: STR
63683: PPUSH
63684: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63688: LD_STRING setSpecText(
63690: PUSH
63691: LD_VAR 0 2
63695: STR
63696: PUSH
63697: LD_STRING ,
63699: STR
63700: PUSH
63701: LD_INT 3
63703: STR
63704: PUSH
63705: LD_STRING ,
63707: STR
63708: PUSH
63709: LD_VAR 0 5
63713: STR
63714: PUSH
63715: LD_STRING )
63717: STR
63718: PPUSH
63719: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63723: LD_STRING setSpecText(
63725: PUSH
63726: LD_VAR 0 2
63730: STR
63731: PUSH
63732: LD_STRING ,
63734: STR
63735: PUSH
63736: LD_INT 4
63738: STR
63739: PUSH
63740: LD_STRING ,
63742: STR
63743: PUSH
63744: LD_VAR 0 6
63748: STR
63749: PUSH
63750: LD_STRING )
63752: STR
63753: PPUSH
63754: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63758: LD_STRING setSpecText(
63760: PUSH
63761: LD_VAR 0 2
63765: STR
63766: PUSH
63767: LD_STRING ,
63769: STR
63770: PUSH
63771: LD_INT 5
63773: STR
63774: PUSH
63775: LD_STRING ,
63777: STR
63778: PUSH
63779: LD_VAR 0 7
63783: STR
63784: PUSH
63785: LD_STRING )
63787: STR
63788: PPUSH
63789: CALL_OW 559
// end ; end ;
63793: GO 63409
63795: POP
63796: POP
// end ;
63797: LD_VAR 0 1
63801: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63802: LD_INT 2
63804: PUSH
63805: LD_INT 30
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 30
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: PPUSH
63830: CALL_OW 69
63834: IFFALSE 63844
63836: GO 63838
63838: DISABLE
// begin enable ;
63839: ENABLE
// UpdateSpectatorBar ;
63840: CALL 63385 0 0
// end ;
63844: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63845: LD_INT 0
63847: PPUSH
// end ;
63848: LD_VAR 0 12
63852: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63853: LD_INT 0
63855: PPUSH
63856: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63857: LD_VAR 0 1
63861: NOT
63862: IFTRUE 63881
63864: PUSH
63865: LD_VAR 0 2
63869: PPUSH
63870: LD_VAR 0 3
63874: PPUSH
63875: CALL_OW 488
63879: NOT
63880: OR
63881: IFTRUE 63916
63883: PUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: CALL_OW 266
63893: PUSH
63894: LD_INT 3
63896: NONEQUAL
63897: IFFALSE 63915
63899: PUSH
63900: LD_VAR 0 1
63904: PPUSH
63905: CALL_OW 247
63909: PUSH
63910: LD_INT 1
63912: EQUAL
63913: NOT
63914: AND
63915: OR
63916: IFFALSE 63920
// exit ;
63918: GO 64202
// if GetType ( factory ) = unit_human then
63920: LD_VAR 0 1
63924: PPUSH
63925: CALL_OW 247
63929: PUSH
63930: LD_INT 1
63932: EQUAL
63933: IFFALSE 63950
// factory := IsInUnit ( factory ) ;
63935: LD_ADDR_VAR 0 1
63939: PUSH
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 310
63949: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63950: LD_VAR 0 1
63954: PPUSH
63955: CALL_OW 266
63959: PUSH
63960: LD_INT 3
63962: NONEQUAL
63963: IFFALSE 63967
// exit ;
63965: GO 64202
// for i := 1 to Count ( factoryWaypoints ) do
63967: LD_ADDR_VAR 0 5
63971: PUSH
63972: DOUBLE
63973: LD_INT 1
63975: DEC
63976: ST_TO_ADDR
63977: LD_EXP 61
63981: PPUSH
63982: CALL 13500 0 1
63986: PUSH
63987: FOR_TO
63988: IFFALSE 64150
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63990: LD_VAR 0 2
63994: PPUSH
63995: LD_VAR 0 3
63999: PPUSH
64000: CALL_OW 428
64004: PUSH
64005: LD_EXP 61
64009: PUSH
64010: LD_VAR 0 5
64014: ARRAY
64015: PUSH
64016: LD_INT 2
64018: ARRAY
64019: EQUAL
64020: IFFALSE 64052
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64022: LD_ADDR_EXP 61
64026: PUSH
64027: LD_EXP 61
64031: PPUSH
64032: LD_VAR 0 5
64036: PPUSH
64037: CALL_OW 3
64041: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64042: CALL 64207 0 0
// exit ;
64046: POP
64047: POP
64048: GO 64202
// end else
64050: GO 64148
// if factory = factoryWaypoints [ i ] [ 2 ] then
64052: LD_VAR 0 1
64056: PUSH
64057: LD_EXP 61
64061: PUSH
64062: LD_VAR 0 5
64066: ARRAY
64067: PUSH
64068: LD_INT 2
64070: ARRAY
64071: EQUAL
64072: IFFALSE 64148
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64074: LD_ADDR_EXP 61
64078: PUSH
64079: LD_EXP 61
64083: PPUSH
64084: LD_VAR 0 5
64088: PPUSH
64089: CALL_OW 3
64093: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64094: LD_ADDR_EXP 61
64098: PUSH
64099: LD_EXP 61
64103: PPUSH
64104: LD_VAR 0 1
64108: PPUSH
64109: CALL_OW 255
64113: PUSH
64114: LD_VAR 0 1
64118: PUSH
64119: LD_VAR 0 2
64123: PUSH
64124: LD_VAR 0 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: PPUSH
64135: CALL 49476 0 2
64139: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64140: CALL 64207 0 0
// exit ;
64144: POP
64145: POP
64146: GO 64202
// end ; end ;
64148: GO 63987
64150: POP
64151: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64152: LD_ADDR_EXP 61
64156: PUSH
64157: LD_EXP 61
64161: PPUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: CALL_OW 255
64171: PUSH
64172: LD_VAR 0 1
64176: PUSH
64177: LD_VAR 0 2
64181: PUSH
64182: LD_VAR 0 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: PPUSH
64193: CALL 49476 0 2
64197: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64198: CALL 64207 0 0
// end ;
64202: LD_VAR 0 4
64206: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64207: LD_INT 0
64209: PPUSH
64210: PPUSH
64211: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64212: LD_STRING resetFactoryWaypoint();
64214: PPUSH
64215: CALL_OW 559
// if factoryWaypoints then
64219: LD_EXP 61
64223: IFFALSE 64344
// begin list := factoryWaypoints ;
64225: LD_ADDR_VAR 0 3
64229: PUSH
64230: LD_EXP 61
64234: ST_TO_ADDR
// for i := 1 to list do
64235: LD_ADDR_VAR 0 2
64239: PUSH
64240: DOUBLE
64241: LD_INT 1
64243: DEC
64244: ST_TO_ADDR
64245: LD_VAR 0 3
64249: PUSH
64250: FOR_TO
64251: IFFALSE 64342
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64253: LD_STRING setFactoryWaypointXY(
64255: PUSH
64256: LD_VAR 0 3
64260: PUSH
64261: LD_VAR 0 2
64265: ARRAY
64266: PUSH
64267: LD_INT 1
64269: ARRAY
64270: STR
64271: PUSH
64272: LD_STRING ,
64274: STR
64275: PUSH
64276: LD_VAR 0 3
64280: PUSH
64281: LD_VAR 0 2
64285: ARRAY
64286: PUSH
64287: LD_INT 2
64289: ARRAY
64290: STR
64291: PUSH
64292: LD_STRING ,
64294: STR
64295: PUSH
64296: LD_VAR 0 3
64300: PUSH
64301: LD_VAR 0 2
64305: ARRAY
64306: PUSH
64307: LD_INT 3
64309: ARRAY
64310: STR
64311: PUSH
64312: LD_STRING ,
64314: STR
64315: PUSH
64316: LD_VAR 0 3
64320: PUSH
64321: LD_VAR 0 2
64325: ARRAY
64326: PUSH
64327: LD_INT 4
64329: ARRAY
64330: STR
64331: PUSH
64332: LD_STRING )
64334: STR
64335: PPUSH
64336: CALL_OW 559
64340: GO 64250
64342: POP
64343: POP
// end ; end ;
64344: LD_VAR 0 1
64348: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64349: LD_INT 0
64351: PPUSH
// if HexInfo ( x , y ) = warehouse then
64352: LD_VAR 0 2
64356: PPUSH
64357: LD_VAR 0 3
64361: PPUSH
64362: CALL_OW 428
64366: PUSH
64367: LD_VAR 0 1
64371: EQUAL
64372: IFFALSE 64399
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64374: LD_ADDR_EXP 63
64378: PUSH
64379: LD_EXP 63
64383: PPUSH
64384: LD_VAR 0 1
64388: PPUSH
64389: LD_INT 0
64391: PPUSH
64392: CALL_OW 1
64396: ST_TO_ADDR
64397: GO 64450
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64399: LD_ADDR_EXP 63
64403: PUSH
64404: LD_EXP 63
64408: PPUSH
64409: LD_VAR 0 1
64413: PPUSH
64414: LD_VAR 0 1
64418: PPUSH
64419: CALL_OW 255
64423: PUSH
64424: LD_VAR 0 1
64428: PUSH
64429: LD_VAR 0 2
64433: PUSH
64434: LD_VAR 0 3
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: PPUSH
64445: CALL_OW 1
64449: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64450: CALL 64459 0 0
// end ;
64454: LD_VAR 0 4
64458: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64459: LD_INT 0
64461: PPUSH
64462: PPUSH
64463: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64464: LD_STRING resetWarehouseGatheringPoints();
64466: PPUSH
64467: CALL_OW 559
// if warehouseGatheringPoints then
64471: LD_EXP 63
64475: IFFALSE 64601
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64477: LD_ADDR_VAR 0 3
64481: PUSH
64482: LD_EXP 63
64486: PPUSH
64487: CALL 53410 0 1
64491: ST_TO_ADDR
// for i := 1 to list do
64492: LD_ADDR_VAR 0 2
64496: PUSH
64497: DOUBLE
64498: LD_INT 1
64500: DEC
64501: ST_TO_ADDR
64502: LD_VAR 0 3
64506: PUSH
64507: FOR_TO
64508: IFFALSE 64599
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64510: LD_STRING setWarehouseGatheringPointXY(
64512: PUSH
64513: LD_VAR 0 3
64517: PUSH
64518: LD_VAR 0 2
64522: ARRAY
64523: PUSH
64524: LD_INT 1
64526: ARRAY
64527: STR
64528: PUSH
64529: LD_STRING ,
64531: STR
64532: PUSH
64533: LD_VAR 0 3
64537: PUSH
64538: LD_VAR 0 2
64542: ARRAY
64543: PUSH
64544: LD_INT 2
64546: ARRAY
64547: STR
64548: PUSH
64549: LD_STRING ,
64551: STR
64552: PUSH
64553: LD_VAR 0 3
64557: PUSH
64558: LD_VAR 0 2
64562: ARRAY
64563: PUSH
64564: LD_INT 3
64566: ARRAY
64567: STR
64568: PUSH
64569: LD_STRING ,
64571: STR
64572: PUSH
64573: LD_VAR 0 3
64577: PUSH
64578: LD_VAR 0 2
64582: ARRAY
64583: PUSH
64584: LD_INT 4
64586: ARRAY
64587: STR
64588: PUSH
64589: LD_STRING )
64591: STR
64592: PPUSH
64593: CALL_OW 559
64597: GO 64507
64599: POP
64600: POP
// end ; end ;
64601: LD_VAR 0 1
64605: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64606: LD_INT 0
64608: PPUSH
64609: PPUSH
// if not mpSidePositions then
64610: LD_EXP 7
64614: NOT
64615: IFFALSE 64619
// exit ;
64617: GO 64690
// result :=  ;
64619: LD_ADDR_VAR 0 1
64623: PUSH
64624: LD_STRING 
64626: ST_TO_ADDR
// for i := 1 to 8 do
64627: LD_ADDR_VAR 0 2
64631: PUSH
64632: DOUBLE
64633: LD_INT 1
64635: DEC
64636: ST_TO_ADDR
64637: LD_INT 8
64639: PUSH
64640: FOR_TO
64641: IFFALSE 64671
// begin result := result & mpSidePositions [ i ] & ; ;
64643: LD_ADDR_VAR 0 1
64647: PUSH
64648: LD_VAR 0 1
64652: PUSH
64653: LD_EXP 7
64657: PUSH
64658: LD_VAR 0 2
64662: ARRAY
64663: STR
64664: PUSH
64665: LD_STRING ;
64667: STR
64668: ST_TO_ADDR
// end ;
64669: GO 64640
64671: POP
64672: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64673: LD_STRING setMultiplayerRealPosition("
64675: PUSH
64676: LD_VAR 0 1
64680: STR
64681: PUSH
64682: LD_STRING ");
64684: STR
64685: PPUSH
64686: CALL_OW 559
// end ;
64690: LD_VAR 0 1
64694: RET
