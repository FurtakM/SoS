// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 47296 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 47719 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 8
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 3
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 4
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 2
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 7
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mpTeamGame := true ;
 824: LD_ADDR_EXP 13
 828: PUSH
 829: LD_INT 1
 831: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 832: LD_ADDR_EXP 31
 836: PUSH
 837: LD_INT 200
 839: PUSH
 840: LD_INT 230
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// end ;
 847: LD_VAR 0 1
 851: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 852: LD_INT 0
 854: PPUSH
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
 860: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 861: LD_ADDR_EXP 21
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: LD_INT 5
 880: PUSH
 881: LD_INT 6
 883: PUSH
 884: LD_INT 7
 886: PUSH
 887: LD_INT 8
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 900: LD_ADDR_EXP 20
 904: PUSH
 905: LD_INT 10
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: LD_INT 12
 913: PUSH
 914: LD_INT 13
 916: PUSH
 917: LD_INT 14
 919: PUSH
 920: LD_INT 88
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_EXP 21
 935: UNION
 936: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 937: LD_VAR 0 1
 941: PUSH
 942: LD_INT 2
 944: EQUAL
 945: IFFALSE 957
// baseLevel := 1 else
 947: LD_ADDR_VAR 0 7
 951: PUSH
 952: LD_INT 1
 954: ST_TO_ADDR
 955: GO 971
// baseLevel := mpGameSettings [ 1 ] ;
 957: LD_ADDR_VAR 0 7
 961: PUSH
 962: LD_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ARRAY
 970: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 971: LD_ADDR_EXP 26
 975: PUSH
 976: LD_EXP 8
 980: PUSH
 981: LD_INT 2
 983: ARRAY
 984: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 985: LD_ADDR_EXP 27
 989: PUSH
 990: LD_EXP 8
 994: PUSH
 995: LD_INT 3
 997: ARRAY
 998: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 999: LD_ADDR_EXP 17
1003: PUSH
1004: LD_EXP 8
1008: PUSH
1009: LD_INT 4
1011: ARRAY
1012: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1013: LD_ADDR_EXP 29
1017: PUSH
1018: LD_EXP 8
1022: PUSH
1023: LD_INT 5
1025: ARRAY
1026: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1027: LD_ADDR_VAR 0 5
1031: PUSH
1032: LD_EXP 8
1036: PUSH
1037: LD_INT 6
1039: ARRAY
1040: PUSH
1041: LD_INT 0
1043: GREATER
1044: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1045: LD_ADDR_VAR 0 6
1049: PUSH
1050: LD_EXP 8
1054: PUSH
1055: LD_INT 7
1057: ARRAY
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: ST_TO_ADDR
// kingCamArea := 0 ;
1063: LD_ADDR_EXP 2
1067: PUSH
1068: LD_INT 0
1070: ST_TO_ADDR
// kingArea := 0 ;
1071: LD_ADDR_EXP 1
1075: PUSH
1076: LD_INT 0
1078: ST_TO_ADDR
// if gameType = GameTypeKing then
1079: LD_VAR 0 1
1083: PUSH
1084: LD_INT 3
1086: EQUAL
1087: IFFALSE 1127
// begin mpKingArea := 0 ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_INT 0
1096: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1097: LD_ADDR_EXP 37
1101: PUSH
1102: LD_EXP 8
1106: PUSH
1107: LD_INT 8
1109: ARRAY
1110: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1111: LD_ADDR_EXP 39
1115: PUSH
1116: LD_EXP 8
1120: PUSH
1121: LD_INT 10
1123: ARRAY
1124: ST_TO_ADDR
// end else
1125: GO 1151
// begin mpKingArea := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// mpPoints := 0 ;
1135: LD_ADDR_EXP 37
1139: PUSH
1140: LD_INT 0
1142: ST_TO_ADDR
// mpEmissions := 0 ;
1143: LD_ADDR_EXP 39
1147: PUSH
1148: LD_INT 0
1150: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1151: LD_EXP 8
1155: PUSH
1156: LD_INT 9
1158: ARRAY
1159: IFFALSE 1291
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1161: LD_ADDR_EXP 38
1165: PUSH
1166: LD_INT 1
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 2
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 3
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 12
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: LD_INT 24
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_INT 12
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: LD_INT 23
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 21
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: LD_INT 1
1254: PUSH
1255: LD_INT 42
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 21
1266: PUSH
1267: LD_INT 1
1269: PUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 42
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1291: LD_ADDR_EXP 18
1295: PUSH
1296: LD_EXP 8
1300: PUSH
1301: LD_INT 11
1303: ARRAY
1304: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1305: LD_ADDR_EXP 24
1309: PUSH
1310: LD_EXP 8
1314: PUSH
1315: LD_INT 12
1317: ARRAY
1318: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_EXP 8
1328: PUSH
1329: LD_INT 13
1331: ARRAY
1332: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1333: LD_ADDR_EXP 35
1337: PUSH
1338: LD_EXP 8
1342: PUSH
1343: LD_INT 14
1345: ARRAY
1346: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_EXP 8
1356: PUSH
1357: LD_INT 15
1359: ARRAY
1360: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1361: LD_ADDR_EXP 30
1365: PUSH
1366: LD_EXP 8
1370: PUSH
1371: LD_INT 18
1373: ARRAY
1374: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1375: LD_ADDR_EXP 3
1379: PUSH
1380: LD_EXP 8
1384: PUSH
1385: LD_INT 20
1387: ARRAY
1388: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1389: LD_ADDR_EXP 22
1393: PUSH
1394: LD_EXP 8
1398: PUSH
1399: LD_INT 21
1401: ARRAY
1402: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1403: LD_ADDR_EXP 33
1407: PUSH
1408: LD_INT 15
1410: PUSH
1411: LD_INT 16
1413: PUSH
1414: LD_INT 17
1416: PUSH
1417: LD_INT 18
1419: PUSH
1420: LD_INT 19
1422: PUSH
1423: LD_INT 20
1425: PUSH
1426: LD_INT 21
1428: PUSH
1429: LD_INT 22
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1442: LD_ADDR_VAR 0 8
1446: PUSH
1447: LD_INT 23
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 46661 0 2
1457: PUSH
1458: LD_INT 24
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL 46661 0 2
1468: PUSH
1469: LD_INT 25
1471: PPUSH
1472: LD_INT 3
1474: PPUSH
1475: CALL 46661 0 2
1479: PUSH
1480: LD_INT 26
1482: PPUSH
1483: LD_INT 4
1485: PPUSH
1486: CALL 46661 0 2
1490: PUSH
1491: LD_INT 27
1493: PPUSH
1494: LD_INT 5
1496: PPUSH
1497: CALL 46661 0 2
1501: PUSH
1502: LD_INT 28
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL 46661 0 2
1512: PUSH
1513: LD_INT 29
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL 46661 0 2
1523: PUSH
1524: LD_INT 30
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: CALL 46661 0 2
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1545: LD_ADDR_VAR 0 3
1549: PUSH
1550: DOUBLE
1551: LD_INT 1
1553: DEC
1554: ST_TO_ADDR
1555: LD_VAR 0 8
1559: PPUSH
1560: CALL 5966 0 1
1564: PUSH
1565: FOR_TO
1566: IFFALSE 1670
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1568: LD_ADDR_EXP 23
1572: PUSH
1573: LD_EXP 23
1577: PPUSH
1578: LD_VAR 0 3
1582: PPUSH
1583: LD_VAR 0 8
1587: PUSH
1588: LD_VAR 0 3
1592: ARRAY
1593: PUSH
1594: LD_INT 1
1596: ARRAY
1597: PPUSH
1598: LD_VAR 0 8
1602: PUSH
1603: LD_VAR 0 3
1607: ARRAY
1608: PUSH
1609: LD_INT 3
1611: ARRAY
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: CALL_OW 272
1620: PUSH
1621: LD_VAR 0 8
1625: PUSH
1626: LD_VAR 0 3
1630: ARRAY
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: PPUSH
1636: LD_VAR 0 8
1640: PUSH
1641: LD_VAR 0 3
1645: ARRAY
1646: PUSH
1647: LD_INT 3
1649: ARRAY
1650: PPUSH
1651: LD_INT 10
1653: PPUSH
1654: CALL_OW 273
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 1
1667: ST_TO_ADDR
1668: GO 1565
1670: POP
1671: POP
// if hasOil then
1672: LD_VAR 0 5
1676: IFFALSE 1926
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1678: LD_ADDR_VAR 0 4
1682: PUSH
1683: LD_EXP 8
1687: PUSH
1688: LD_INT 6
1690: ARRAY
1691: PUSH
1692: LD_INT 2
1694: EQUAL
1695: ST_TO_ADDR
// if all then
1696: LD_VAR 0 4
1700: IFFALSE 1823
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_INT 31
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 46494 0 2
1719: PUSH
1720: LD_INT 33
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 46494 0 2
1732: PUSH
1733: LD_INT 35
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 46494 0 2
1745: PUSH
1746: LD_INT 37
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 46494 0 2
1758: PUSH
1759: LD_INT 39
1761: PPUSH
1762: LD_VAR 0 4
1766: PPUSH
1767: CALL 46494 0 2
1771: PUSH
1772: LD_INT 41
1774: PPUSH
1775: LD_VAR 0 4
1779: PPUSH
1780: CALL 46494 0 2
1784: PUSH
1785: LD_INT 43
1787: PPUSH
1788: LD_VAR 0 4
1792: PPUSH
1793: CALL 46494 0 2
1797: PUSH
1798: LD_INT 45
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 46494 0 2
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: ST_TO_ADDR
// end else
1821: GO 1926
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1823: LD_ADDR_EXP 14
1827: PUSH
1828: LD_INT 72
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL 46494 0 2
1838: PUSH
1839: LD_INT 74
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: CALL 46494 0 2
1849: PUSH
1850: LD_INT 76
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL 46494 0 2
1860: PUSH
1861: LD_INT 78
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL 46494 0 2
1871: PUSH
1872: LD_INT 80
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: CALL 46494 0 2
1882: PUSH
1883: LD_INT 82
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: CALL 46494 0 2
1893: PUSH
1894: LD_INT 84
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: CALL 46494 0 2
1904: PUSH
1905: LD_INT 86
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 46494 0 2
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// end ; end ; if hasSib then
1926: LD_VAR 0 6
1930: IFFALSE 2180
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_EXP 8
1941: PUSH
1942: LD_INT 7
1944: ARRAY
1945: PUSH
1946: LD_INT 2
1948: EQUAL
1949: ST_TO_ADDR
// if all then
1950: LD_VAR 0 4
1954: IFFALSE 2077
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1956: LD_ADDR_EXP 15
1960: PUSH
1961: LD_INT 32
1963: PPUSH
1964: LD_VAR 0 4
1968: PPUSH
1969: CALL 46494 0 2
1973: PUSH
1974: LD_INT 34
1976: PPUSH
1977: LD_VAR 0 4
1981: PPUSH
1982: CALL 46494 0 2
1986: PUSH
1987: LD_INT 36
1989: PPUSH
1990: LD_VAR 0 4
1994: PPUSH
1995: CALL 46494 0 2
1999: PUSH
2000: LD_INT 38
2002: PPUSH
2003: LD_VAR 0 4
2007: PPUSH
2008: CALL 46494 0 2
2012: PUSH
2013: LD_INT 40
2015: PPUSH
2016: LD_VAR 0 4
2020: PPUSH
2021: CALL 46494 0 2
2025: PUSH
2026: LD_INT 42
2028: PPUSH
2029: LD_VAR 0 4
2033: PPUSH
2034: CALL 46494 0 2
2038: PUSH
2039: LD_INT 44
2041: PPUSH
2042: LD_VAR 0 4
2046: PPUSH
2047: CALL 46494 0 2
2051: PUSH
2052: LD_INT 46
2054: PPUSH
2055: LD_VAR 0 4
2059: PPUSH
2060: CALL 46494 0 2
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: ST_TO_ADDR
// end else
2075: GO 2180
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2077: LD_ADDR_EXP 15
2081: PUSH
2082: LD_INT 73
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL 46494 0 2
2092: PUSH
2093: LD_INT 75
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL 46494 0 2
2103: PUSH
2104: LD_INT 77
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL 46494 0 2
2114: PUSH
2115: LD_INT 79
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 46494 0 2
2125: PUSH
2126: LD_INT 81
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL 46494 0 2
2136: PUSH
2137: LD_INT 83
2139: PPUSH
2140: LD_INT 1
2142: PPUSH
2143: CALL 46494 0 2
2147: PUSH
2148: LD_INT 85
2150: PPUSH
2151: LD_INT 1
2153: PPUSH
2154: CALL 46494 0 2
2158: PUSH
2159: LD_INT 87
2161: PPUSH
2162: LD_INT 1
2164: PPUSH
2165: CALL 46494 0 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2180: LD_VAR 0 7
2184: PUSH
2185: LD_INT 1
2187: GREATEREQUAL
2188: IFFALSE 2200
// mpDepots := startPos ;
2190: LD_ADDR_EXP 16
2194: PUSH
2195: LD_VAR 0 8
2199: ST_TO_ADDR
// if baseLevel >= 2 then
2200: LD_VAR 0 7
2204: PUSH
2205: LD_INT 2
2207: GREATEREQUAL
2208: IFFALSE 2625
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 5 ) ] ] ;
2210: LD_ADDR_EXP 19
2214: PUSH
2215: LD_INT 31
2217: PUSH
2218: LD_INT 47
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL 46661 0 2
2228: ADD
2229: PUSH
2230: LD_INT 31
2232: PUSH
2233: LD_INT 48
2235: PPUSH
2236: LD_INT 5
2238: PPUSH
2239: CALL 46661 0 2
2243: ADD
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: LD_INT 49
2250: PPUSH
2251: LD_INT 5
2253: PPUSH
2254: CALL 46661 0 2
2258: ADD
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 31
2267: PUSH
2268: LD_INT 50
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL 46661 0 2
2278: ADD
2279: PUSH
2280: LD_INT 31
2282: PUSH
2283: LD_INT 51
2285: PPUSH
2286: LD_INT 2
2288: PPUSH
2289: CALL 46661 0 2
2293: ADD
2294: PUSH
2295: LD_INT 4
2297: PUSH
2298: LD_INT 52
2300: PPUSH
2301: LD_INT 5
2303: PPUSH
2304: CALL 46661 0 2
2308: ADD
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 31
2317: PUSH
2318: LD_INT 53
2320: PPUSH
2321: LD_INT 1
2323: PPUSH
2324: CALL 46661 0 2
2328: ADD
2329: PUSH
2330: LD_INT 31
2332: PUSH
2333: LD_INT 54
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL 46661 0 2
2343: ADD
2344: PUSH
2345: LD_INT 4
2347: PUSH
2348: LD_INT 55
2350: PPUSH
2351: LD_INT 5
2353: PPUSH
2354: CALL 46661 0 2
2358: ADD
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 31
2367: PUSH
2368: LD_INT 56
2370: PPUSH
2371: LD_INT 2
2373: PPUSH
2374: CALL 46661 0 2
2378: ADD
2379: PUSH
2380: LD_INT 31
2382: PUSH
2383: LD_INT 57
2385: PPUSH
2386: LD_INT 0
2388: PPUSH
2389: CALL 46661 0 2
2393: ADD
2394: PUSH
2395: LD_INT 4
2397: PUSH
2398: LD_INT 58
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL 46661 0 2
2408: ADD
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 31
2417: PUSH
2418: LD_INT 59
2420: PPUSH
2421: LD_INT 1
2423: PPUSH
2424: CALL 46661 0 2
2428: ADD
2429: PUSH
2430: LD_INT 31
2432: PUSH
2433: LD_INT 60
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: CALL 46661 0 2
2443: ADD
2444: PUSH
2445: LD_INT 4
2447: PUSH
2448: LD_INT 61
2450: PPUSH
2451: LD_INT 2
2453: PPUSH
2454: CALL 46661 0 2
2458: ADD
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 31
2467: PUSH
2468: LD_INT 62
2470: PPUSH
2471: LD_INT 5
2473: PPUSH
2474: CALL 46661 0 2
2478: ADD
2479: PUSH
2480: LD_INT 31
2482: PUSH
2483: LD_INT 63
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL 46661 0 2
2493: ADD
2494: PUSH
2495: LD_INT 4
2497: PUSH
2498: LD_INT 64
2500: PPUSH
2501: LD_INT 3
2503: PPUSH
2504: CALL 46661 0 2
2508: ADD
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 31
2517: PUSH
2518: LD_INT 65
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL 46661 0 2
2528: ADD
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: LD_INT 66
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL 46661 0 2
2543: ADD
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 2
2553: PPUSH
2554: CALL 46661 0 2
2558: ADD
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 31
2567: PUSH
2568: LD_INT 68
2570: PPUSH
2571: LD_INT 4
2573: PPUSH
2574: CALL 46661 0 2
2578: ADD
2579: PUSH
2580: LD_INT 31
2582: PUSH
2583: LD_INT 69
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: CALL 46661 0 2
2593: ADD
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL 46661 0 2
2608: ADD
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: ST_TO_ADDR
// end ; if mpTree then
2625: LD_EXP 3
2629: IFFALSE 2641
// SetAreaMapShow ( TreeArea , 1 ) ;
2631: LD_INT 71
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: CALL_OW 424
// end ;
2641: LD_VAR 0 2
2645: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2646: GO 2648
2648: DISABLE
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
2655: PPUSH
2656: PPUSH
2657: PPUSH
2658: PPUSH
// begin if not mpShipments then
2659: LD_EXP 29
2663: NOT
2664: IFFALSE 2668
// exit ;
2666: GO 3123
// case mpShipments of 1 :
2668: LD_EXP 29
2672: PUSH
2673: LD_INT 1
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2716
2681: POP
// begin time := 0 0$30 ;
2682: LD_ADDR_VAR 0 5
2686: PUSH
2687: LD_INT 1050
2689: ST_TO_ADDR
// normalTime := 0 0$30 ;
2690: LD_ADDR_VAR 0 6
2694: PUSH
2695: LD_INT 1050
2697: ST_TO_ADDR
// maxTime := 1 1$20 ;
2698: LD_ADDR_VAR 0 8
2702: PUSH
2703: LD_INT 2800
2705: ST_TO_ADDR
// delayTime := 0 0$5 ;
2706: LD_ADDR_VAR 0 7
2710: PUSH
2711: LD_INT 175
2713: ST_TO_ADDR
// end ; 2 :
2714: GO 2846
2716: LD_INT 2
2718: DOUBLE
2719: EQUAL
2720: IFTRUE 2724
2722: GO 2759
2724: POP
// begin time := 0 0$25 ;
2725: LD_ADDR_VAR 0 5
2729: PUSH
2730: LD_INT 875
2732: ST_TO_ADDR
// normalTime := 0 0$25 ;
2733: LD_ADDR_VAR 0 6
2737: PUSH
2738: LD_INT 875
2740: ST_TO_ADDR
// maxTime := 1 1$10 ;
2741: LD_ADDR_VAR 0 8
2745: PUSH
2746: LD_INT 2450
2748: ST_TO_ADDR
// delayTime := 0 0$4 ;
2749: LD_ADDR_VAR 0 7
2753: PUSH
2754: LD_INT 140
2756: ST_TO_ADDR
// end ; 3 :
2757: GO 2846
2759: LD_INT 3
2761: DOUBLE
2762: EQUAL
2763: IFTRUE 2767
2765: GO 2802
2767: POP
// begin time := 0 0$20 ;
2768: LD_ADDR_VAR 0 5
2772: PUSH
2773: LD_INT 700
2775: ST_TO_ADDR
// normalTime := 0 0$20 ;
2776: LD_ADDR_VAR 0 6
2780: PUSH
2781: LD_INT 700
2783: ST_TO_ADDR
// maxTime := 1 1$00 ;
2784: LD_ADDR_VAR 0 8
2788: PUSH
2789: LD_INT 2100
2791: ST_TO_ADDR
// delayTime := 0 0$3 ;
2792: LD_ADDR_VAR 0 7
2796: PUSH
2797: LD_INT 105
2799: ST_TO_ADDR
// end ; 4 :
2800: GO 2846
2802: LD_INT 4
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2845
2810: POP
// begin time := 0 0$15 ;
2811: LD_ADDR_VAR 0 5
2815: PUSH
2816: LD_INT 525
2818: ST_TO_ADDR
// normalTime := 0 0$15 ;
2819: LD_ADDR_VAR 0 6
2823: PUSH
2824: LD_INT 525
2826: ST_TO_ADDR
// maxTime := 0 0$55 ;
2827: LD_ADDR_VAR 0 8
2831: PUSH
2832: LD_INT 1925
2834: ST_TO_ADDR
// delayTime := 0 0$2 ;
2835: LD_ADDR_VAR 0 7
2839: PUSH
2840: LD_INT 70
2842: ST_TO_ADDR
// end ; end ;
2843: GO 2846
2845: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2846: LD_ADDR_VAR 0 4
2850: PUSH
2851: LD_INT 10
2853: PUSH
2854: LD_INT 11
2856: PUSH
2857: LD_INT 12
2859: PUSH
2860: LD_INT 13
2862: PUSH
2863: LD_INT 14
2865: PUSH
2866: LD_INT 88
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2877: LD_ADDR_VAR 0 3
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 4
2893: PUSH
2894: LD_INT 5
2896: PUSH
2897: LD_INT 6
2899: PUSH
2900: LD_INT 7
2902: PUSH
2903: LD_INT 8
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: ST_TO_ADDR
// for i := 1 to 8 do
2916: LD_ADDR_VAR 0 1
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 8
2928: PUSH
2929: FOR_TO
2930: IFFALSE 2977
// begin if not mpSidePositions [ i ] then
2932: LD_EXP 9
2936: PUSH
2937: LD_VAR 0 1
2941: ARRAY
2942: NOT
2943: IFFALSE 2947
// continue ;
2945: GO 2929
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: LD_VAR 0 4
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_EXP 9
2966: PUSH
2967: LD_VAR 0 1
2971: ARRAY
2972: ARRAY
2973: ADD
2974: ST_TO_ADDR
// end ;
2975: GO 2929
2977: POP
2978: POP
// x := 1 ;
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: LD_INT 1
2986: ST_TO_ADDR
// repeat wait ( time ) ;
2987: LD_VAR 0 5
2991: PPUSH
2992: CALL_OW 67
// x := Inc ( x ) ;
2996: LD_ADDR_VAR 0 2
3000: PUSH
3001: LD_VAR 0 2
3005: PPUSH
3006: CALL 43315 0 1
3010: ST_TO_ADDR
// if x > 5 then
3011: LD_VAR 0 2
3015: PUSH
3016: LD_INT 5
3018: GREATER
3019: IFFALSE 3029
// x := 1 ;
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: LD_INT 1
3028: ST_TO_ADDR
// for i in areas do
3029: LD_ADDR_VAR 0 1
3033: PUSH
3034: LD_VAR 0 4
3038: PUSH
3039: FOR_IN
3040: IFFALSE 3079
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 1
3049: PPUSH
3050: CALL_OW 287
3054: PUSH
3055: LD_INT 30
3057: LESS
3058: IFFALSE 3077
// begin CreateCratesArea ( x , i , true ) ;
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_VAR 0 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 55
// end ; end ;
3077: GO 3039
3079: POP
3080: POP
// time := time + delayTime ;
3081: LD_ADDR_VAR 0 5
3085: PUSH
3086: LD_VAR 0 5
3090: PUSH
3091: LD_VAR 0 7
3095: PLUS
3096: ST_TO_ADDR
// if time > maxTime then
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 8
3106: GREATER
3107: IFFALSE 3119
// time := normalTime ;
3109: LD_ADDR_VAR 0 5
3113: PUSH
3114: LD_VAR 0 6
3118: ST_TO_ADDR
// until false ;
3119: LD_INT 0
3121: IFFALSE 2987
// end ;
3123: PPOPN 8
3125: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus , lua ;
3126: LD_EXP 3
3130: IFFALSE 3579
3132: GO 3134
3134: DISABLE
3135: LD_INT 0
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
// begin treeVisited := [ ] ;
3143: LD_ADDR_EXP 4
3147: PUSH
3148: EMPTY
3149: ST_TO_ADDR
// power := 1 ;
3150: LD_ADDR_VAR 0 4
3154: PUSH
3155: LD_INT 1
3157: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3158: LD_INT 35
3160: PPUSH
3161: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
3165: LD_OWVAR 1
3169: PUSH
3170: LD_INT 42000
3172: PUSH
3173: LD_EXP 3
3177: DIV
3178: PPUSH
3179: CALL_OW 574
3183: MOD
3184: PUSH
3185: LD_INT 0
3187: EQUAL
3188: IFFALSE 3205
// power := Inc ( power ) ;
3190: LD_ADDR_VAR 0 4
3194: PUSH
3195: LD_VAR 0 4
3199: PPUSH
3200: CALL 43315 0 1
3204: ST_TO_ADDR
// if power > 10 then
3205: LD_VAR 0 4
3209: PUSH
3210: LD_INT 10
3212: GREATER
3213: IFFALSE 3223
// power := 10 ;
3215: LD_ADDR_VAR 0 4
3219: PUSH
3220: LD_INT 10
3222: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
3223: LD_ADDR_VAR 0 2
3227: PUSH
3228: LD_INT 95
3230: PUSH
3231: LD_INT 71
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 21
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 3
3250: PUSH
3251: LD_INT 23
3253: PUSH
3254: LD_INT 0
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: PUSH
3275: LD_EXP 4
3279: DIFF
3280: ST_TO_ADDR
// if tmp then
3281: LD_VAR 0 2
3285: IFFALSE 3450
// begin for i in tmp do
3287: LD_ADDR_VAR 0 1
3291: PUSH
3292: LD_VAR 0 2
3296: PUSH
3297: FOR_IN
3298: IFFALSE 3448
// begin treeVisited := Join ( treeVisited , i ) ;
3300: LD_ADDR_EXP 4
3304: PUSH
3305: LD_EXP 4
3309: PPUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL 41942 0 2
3319: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
3320: LD_ADDR_VAR 0 5
3324: PUSH
3325: LD_VAR 0 1
3329: PPUSH
3330: LD_VAR 0 1
3334: PUSH
3335: LD_INT 4
3337: MOD
3338: PUSH
3339: LD_INT 1
3341: PLUS
3342: PPUSH
3343: CALL_OW 259
3347: PUSH
3348: LD_VAR 0 4
3352: PLUS
3353: ST_TO_ADDR
// if bonus > 10 then
3354: LD_VAR 0 5
3358: PUSH
3359: LD_INT 10
3361: GREATER
3362: IFFALSE 3372
// bonus := 10 ;
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_INT 10
3371: ST_TO_ADDR
// skill := i mod 4 + 1 ;
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_VAR 0 1
3381: PUSH
3382: LD_INT 4
3384: MOD
3385: PUSH
3386: LD_INT 1
3388: PLUS
3389: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: LD_VAR 0 3
3399: PPUSH
3400: LD_VAR 0 5
3404: PPUSH
3405: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
3409: LD_STRING displayTreeBonusDetails(
3411: PUSH
3412: LD_VAR 0 1
3416: STR
3417: PUSH
3418: LD_STRING ,
3420: STR
3421: PUSH
3422: LD_VAR 0 3
3426: STR
3427: PUSH
3428: LD_STRING ,
3430: STR
3431: PUSH
3432: LD_VAR 0 4
3436: STR
3437: PUSH
3438: LD_STRING )
3440: STR
3441: PPUSH
3442: CALL_OW 559
// end ;
3446: GO 3297
3448: POP
3449: POP
// end ; lua := LFC_UNITS_CUSTOM_ICON = { ;
3450: LD_ADDR_VAR 0 6
3454: PUSH
3455: LD_STRING LFC_UNITS_CUSTOM_ICON = {
3457: ST_TO_ADDR
// for i := 1 to Count ( treeVisited ) do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: DOUBLE
3464: LD_INT 1
3466: DEC
3467: ST_TO_ADDR
3468: LD_EXP 4
3472: PPUSH
3473: CALL 5966 0 1
3477: PUSH
3478: FOR_TO
3479: IFFALSE 3544
// begin lua := lua & { & treeVisited [ i ] & , 13} ;
3481: LD_ADDR_VAR 0 6
3485: PUSH
3486: LD_VAR 0 6
3490: PUSH
3491: LD_STRING {
3493: STR
3494: PUSH
3495: LD_EXP 4
3499: PUSH
3500: LD_VAR 0 1
3504: ARRAY
3505: STR
3506: PUSH
3507: LD_STRING , 13}
3509: STR
3510: ST_TO_ADDR
// if i < Count ( treeVisited ) then
3511: LD_VAR 0 1
3515: PUSH
3516: LD_EXP 4
3520: PPUSH
3521: CALL 5966 0 1
3525: LESS
3526: IFFALSE 3542
// lua := lua & ,  ;
3528: LD_ADDR_VAR 0 6
3532: PUSH
3533: LD_VAR 0 6
3537: PUSH
3538: LD_STRING , 
3540: STR
3541: ST_TO_ADDR
// end ;
3542: GO 3478
3544: POP
3545: POP
// lua := lua & } ;
3546: LD_ADDR_VAR 0 6
3550: PUSH
3551: LD_VAR 0 6
3555: PUSH
3556: LD_STRING }
3558: STR
3559: ST_TO_ADDR
// if treeVisited then
3560: LD_EXP 4
3564: IFFALSE 3575
// ToLua ( lua ) ;
3566: LD_VAR 0 6
3570: PPUSH
3571: CALL_OW 559
// until false ;
3575: LD_INT 0
3577: IFFALSE 3158
// end ; end_of_file
3579: PPOPN 6
3581: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: CALL 57676 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL 52842 0 1
// end ;
3600: PPOPN 1
3602: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3603: LD_VAR 0 1
3607: PPUSH
3608: CALL 57693 0 1
// end ;
3612: PPOPN 1
3614: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3615: LD_VAR 0 1
3619: PPUSH
3620: CALL 53895 0 1
3624: PPOPN 1
3626: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3627: LD_VAR 0 1
3631: PPUSH
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL 57734 0 2
3641: PPOPN 2
3643: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
3644: LD_VAR 0 1
3648: PPUSH
3649: LD_VAR 0 2
3653: PPUSH
3654: CALL 53648 0 2
3658: PPOPN 2
3660: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3661: LD_VAR 0 1
3665: PPUSH
3666: LD_VAR 0 2
3670: PPUSH
3671: LD_VAR 0 3
3675: PPUSH
3676: CALL 53948 0 3
3680: PPOPN 3
3682: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3683: LD_VAR 0 1
3687: PPUSH
3688: LD_VAR 0 2
3692: PPUSH
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_VAR 0 5
3707: PPUSH
3708: CALL 54632 0 5
3712: PPOPN 5
3714: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 3
3729: PPUSH
3730: LD_VAR 0 4
3734: PPUSH
3735: CALL 54735 0 4
3739: PPOPN 4
3741: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3742: LD_INT 0
3744: PPUSH
3745: PPUSH
// if exist_mode then
3746: LD_VAR 0 2
3750: IFFALSE 3796
// begin unit := CreateCharacter ( prefix & ident ) ;
3752: LD_ADDR_VAR 0 5
3756: PUSH
3757: LD_VAR 0 3
3761: PUSH
3762: LD_VAR 0 1
3766: STR
3767: PPUSH
3768: CALL_OW 34
3772: ST_TO_ADDR
// if unit then
3773: LD_VAR 0 5
3777: IFFALSE 3794
// DeleteCharacters ( prefix & ident ) ;
3779: LD_VAR 0 3
3783: PUSH
3784: LD_VAR 0 1
3788: STR
3789: PPUSH
3790: CALL_OW 40
// end else
3794: GO 3811
// unit := NewCharacter ( ident ) ;
3796: LD_ADDR_VAR 0 5
3800: PUSH
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 25
3810: ST_TO_ADDR
// result := unit ;
3811: LD_ADDR_VAR 0 4
3815: PUSH
3816: LD_VAR 0 5
3820: ST_TO_ADDR
// end ;
3821: LD_VAR 0 4
3825: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3826: LD_INT 0
3828: PPUSH
3829: PPUSH
// if exist_mode then
3830: LD_VAR 0 2
3834: IFFALSE 3859
// unit := CreateCharacter ( prefix & ident ) else
3836: LD_ADDR_VAR 0 5
3840: PUSH
3841: LD_VAR 0 3
3845: PUSH
3846: LD_VAR 0 1
3850: STR
3851: PPUSH
3852: CALL_OW 34
3856: ST_TO_ADDR
3857: GO 3874
// unit := NewCharacter ( ident ) ;
3859: LD_ADDR_VAR 0 5
3863: PUSH
3864: LD_VAR 0 1
3868: PPUSH
3869: CALL_OW 25
3873: ST_TO_ADDR
// result := unit ;
3874: LD_ADDR_VAR 0 4
3878: PUSH
3879: LD_VAR 0 5
3883: ST_TO_ADDR
// end ;
3884: LD_VAR 0 4
3888: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3889: LD_INT 0
3891: PPUSH
3892: PPUSH
// if not side or not nation then
3893: LD_VAR 0 1
3897: NOT
3898: IFTRUE 3907
3900: PUSH
3901: LD_VAR 0 2
3905: NOT
3906: OR
3907: IFFALSE 3911
// exit ;
3909: GO 4705
// case nation of nation_american :
3911: LD_VAR 0 2
3915: PUSH
3916: LD_INT 1
3918: DOUBLE
3919: EQUAL
3920: IFTRUE 3924
3922: GO 4146
3924: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3925: LD_ADDR_VAR 0 4
3929: PUSH
3930: LD_INT 35
3932: PUSH
3933: LD_INT 45
3935: PUSH
3936: LD_INT 46
3938: PUSH
3939: LD_INT 47
3941: PUSH
3942: LD_INT 82
3944: PUSH
3945: LD_INT 83
3947: PUSH
3948: LD_INT 84
3950: PUSH
3951: LD_INT 85
3953: PUSH
3954: LD_INT 86
3956: PUSH
3957: LD_INT 1
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 6
3965: PUSH
3966: LD_INT 15
3968: PUSH
3969: LD_INT 16
3971: PUSH
3972: LD_INT 7
3974: PUSH
3975: LD_INT 12
3977: PUSH
3978: LD_INT 13
3980: PUSH
3981: LD_INT 10
3983: PUSH
3984: LD_INT 14
3986: PUSH
3987: LD_INT 20
3989: PUSH
3990: LD_INT 21
3992: PUSH
3993: LD_INT 22
3995: PUSH
3996: LD_INT 25
3998: PUSH
3999: LD_INT 32
4001: PUSH
4002: LD_INT 27
4004: PUSH
4005: LD_INT 36
4007: PUSH
4008: LD_INT 69
4010: PUSH
4011: LD_INT 39
4013: PUSH
4014: LD_INT 34
4016: PUSH
4017: LD_INT 40
4019: PUSH
4020: LD_INT 48
4022: PUSH
4023: LD_INT 49
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: LD_INT 51
4031: PUSH
4032: LD_INT 52
4034: PUSH
4035: LD_INT 53
4037: PUSH
4038: LD_INT 54
4040: PUSH
4041: LD_INT 55
4043: PUSH
4044: LD_INT 56
4046: PUSH
4047: LD_INT 57
4049: PUSH
4050: LD_INT 58
4052: PUSH
4053: LD_INT 59
4055: PUSH
4056: LD_INT 60
4058: PUSH
4059: LD_INT 61
4061: PUSH
4062: LD_INT 62
4064: PUSH
4065: LD_INT 80
4067: PUSH
4068: LD_INT 82
4070: PUSH
4071: LD_INT 83
4073: PUSH
4074: LD_INT 84
4076: PUSH
4077: LD_INT 85
4079: PUSH
4080: LD_INT 86
4082: PUSH
4083: LD_INT 90
4085: PUSH
4086: LD_INT 93
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: ST_TO_ADDR
4144: GO 4627
4146: LD_INT 2
4148: DOUBLE
4149: EQUAL
4150: IFTRUE 4154
4152: GO 4388
4154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
4155: LD_ADDR_VAR 0 4
4159: PUSH
4160: LD_INT 35
4162: PUSH
4163: LD_INT 45
4165: PUSH
4166: LD_INT 46
4168: PUSH
4169: LD_INT 47
4171: PUSH
4172: LD_INT 82
4174: PUSH
4175: LD_INT 83
4177: PUSH
4178: LD_INT 84
4180: PUSH
4181: LD_INT 85
4183: PUSH
4184: LD_INT 87
4186: PUSH
4187: LD_INT 70
4189: PUSH
4190: LD_INT 1
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 3
4198: PUSH
4199: LD_INT 4
4201: PUSH
4202: LD_INT 5
4204: PUSH
4205: LD_INT 6
4207: PUSH
4208: LD_INT 15
4210: PUSH
4211: LD_INT 18
4213: PUSH
4214: LD_INT 7
4216: PUSH
4217: LD_INT 17
4219: PUSH
4220: LD_INT 8
4222: PUSH
4223: LD_INT 20
4225: PUSH
4226: LD_INT 21
4228: PUSH
4229: LD_INT 22
4231: PUSH
4232: LD_INT 72
4234: PUSH
4235: LD_INT 26
4237: PUSH
4238: LD_INT 69
4240: PUSH
4241: LD_INT 39
4243: PUSH
4244: LD_INT 40
4246: PUSH
4247: LD_INT 41
4249: PUSH
4250: LD_INT 42
4252: PUSH
4253: LD_INT 43
4255: PUSH
4256: LD_INT 48
4258: PUSH
4259: LD_INT 49
4261: PUSH
4262: LD_INT 50
4264: PUSH
4265: LD_INT 51
4267: PUSH
4268: LD_INT 52
4270: PUSH
4271: LD_INT 53
4273: PUSH
4274: LD_INT 54
4276: PUSH
4277: LD_INT 55
4279: PUSH
4280: LD_INT 56
4282: PUSH
4283: LD_INT 60
4285: PUSH
4286: LD_INT 61
4288: PUSH
4289: LD_INT 62
4291: PUSH
4292: LD_INT 66
4294: PUSH
4295: LD_INT 67
4297: PUSH
4298: LD_INT 68
4300: PUSH
4301: LD_INT 81
4303: PUSH
4304: LD_INT 82
4306: PUSH
4307: LD_INT 83
4309: PUSH
4310: LD_INT 84
4312: PUSH
4313: LD_INT 85
4315: PUSH
4316: LD_INT 87
4318: PUSH
4319: LD_INT 88
4321: PUSH
4322: LD_INT 92
4324: PUSH
4325: LD_INT 94
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: ST_TO_ADDR
4386: GO 4627
4388: LD_INT 3
4390: DOUBLE
4391: EQUAL
4392: IFTRUE 4396
4394: GO 4626
4396: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
4397: LD_ADDR_VAR 0 4
4401: PUSH
4402: LD_INT 46
4404: PUSH
4405: LD_INT 47
4407: PUSH
4408: LD_INT 1
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: LD_INT 82
4416: PUSH
4417: LD_INT 83
4419: PUSH
4420: LD_INT 84
4422: PUSH
4423: LD_INT 85
4425: PUSH
4426: LD_INT 86
4428: PUSH
4429: LD_INT 11
4431: PUSH
4432: LD_INT 9
4434: PUSH
4435: LD_INT 20
4437: PUSH
4438: LD_INT 19
4440: PUSH
4441: LD_INT 21
4443: PUSH
4444: LD_INT 24
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 28
4455: PUSH
4456: LD_INT 29
4458: PUSH
4459: LD_INT 30
4461: PUSH
4462: LD_INT 31
4464: PUSH
4465: LD_INT 37
4467: PUSH
4468: LD_INT 38
4470: PUSH
4471: LD_INT 32
4473: PUSH
4474: LD_INT 27
4476: PUSH
4477: LD_INT 33
4479: PUSH
4480: LD_INT 69
4482: PUSH
4483: LD_INT 39
4485: PUSH
4486: LD_INT 34
4488: PUSH
4489: LD_INT 40
4491: PUSH
4492: LD_INT 71
4494: PUSH
4495: LD_INT 23
4497: PUSH
4498: LD_INT 44
4500: PUSH
4501: LD_INT 48
4503: PUSH
4504: LD_INT 49
4506: PUSH
4507: LD_INT 50
4509: PUSH
4510: LD_INT 51
4512: PUSH
4513: LD_INT 52
4515: PUSH
4516: LD_INT 53
4518: PUSH
4519: LD_INT 54
4521: PUSH
4522: LD_INT 55
4524: PUSH
4525: LD_INT 56
4527: PUSH
4528: LD_INT 57
4530: PUSH
4531: LD_INT 58
4533: PUSH
4534: LD_INT 59
4536: PUSH
4537: LD_INT 63
4539: PUSH
4540: LD_INT 64
4542: PUSH
4543: LD_INT 65
4545: PUSH
4546: LD_INT 82
4548: PUSH
4549: LD_INT 83
4551: PUSH
4552: LD_INT 84
4554: PUSH
4555: LD_INT 85
4557: PUSH
4558: LD_INT 86
4560: PUSH
4561: LD_INT 89
4563: PUSH
4564: LD_INT 91
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: ST_TO_ADDR
4624: GO 4627
4626: POP
// if state > - 1 and state < 3 then
4627: LD_VAR 0 3
4631: PUSH
4632: LD_INT 1
4634: NEG
4635: GREATER
4636: IFFALSE 4648
4638: PUSH
4639: LD_VAR 0 3
4643: PUSH
4644: LD_INT 3
4646: LESS
4647: AND
4648: IFFALSE 4705
// for i in result do
4650: LD_ADDR_VAR 0 5
4654: PUSH
4655: LD_VAR 0 4
4659: PUSH
4660: FOR_IN
4661: IFFALSE 4703
// if GetTech ( i , side ) <> state then
4663: LD_VAR 0 5
4667: PPUSH
4668: LD_VAR 0 1
4672: PPUSH
4673: CALL_OW 321
4677: PUSH
4678: LD_VAR 0 3
4682: NONEQUAL
4683: IFFALSE 4701
// result := result diff i ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: LD_VAR 0 4
4694: PUSH
4695: LD_VAR 0 5
4699: DIFF
4700: ST_TO_ADDR
4701: GO 4660
4703: POP
4704: POP
// end ;
4705: LD_VAR 0 4
4709: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
// result := true ;
4715: LD_ADDR_VAR 0 3
4719: PUSH
4720: LD_INT 1
4722: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4723: LD_ADDR_VAR 0 5
4727: PUSH
4728: LD_VAR 0 2
4732: PPUSH
4733: CALL_OW 480
4737: ST_TO_ADDR
// if not tmp then
4738: LD_VAR 0 5
4742: NOT
4743: IFFALSE 4747
// exit ;
4745: GO 4796
// for i in tmp do
4747: LD_ADDR_VAR 0 4
4751: PUSH
4752: LD_VAR 0 5
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4794
// if GetTech ( i , side ) <> state_researched then
4760: LD_VAR 0 4
4764: PPUSH
4765: LD_VAR 0 1
4769: PPUSH
4770: CALL_OW 321
4774: PUSH
4775: LD_INT 2
4777: NONEQUAL
4778: IFFALSE 4792
// begin result := false ;
4780: LD_ADDR_VAR 0 3
4784: PUSH
4785: LD_INT 0
4787: ST_TO_ADDR
// exit ;
4788: POP
4789: POP
4790: GO 4796
// end ;
4792: GO 4757
4794: POP
4795: POP
// end ;
4796: LD_VAR 0 3
4800: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4801: LD_INT 0
4803: PPUSH
4804: PPUSH
4805: PPUSH
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4816: LD_VAR 0 1
4820: NOT
4821: IFTRUE 4838
4823: PUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 257
4833: PUSH
4834: LD_INT 9
4836: NONEQUAL
4837: OR
4838: IFFALSE 4842
// exit ;
4840: GO 5421
// side := GetSide ( unit ) ;
4842: LD_ADDR_VAR 0 9
4846: PUSH
4847: LD_VAR 0 1
4851: PPUSH
4852: CALL_OW 255
4856: ST_TO_ADDR
// tech_space := tech_spacanom ;
4857: LD_ADDR_VAR 0 12
4861: PUSH
4862: LD_INT 29
4864: ST_TO_ADDR
// tech_time := tech_taurad ;
4865: LD_ADDR_VAR 0 13
4869: PUSH
4870: LD_INT 28
4872: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4873: LD_ADDR_VAR 0 11
4877: PUSH
4878: LD_VAR 0 1
4882: PPUSH
4883: CALL_OW 310
4887: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4888: LD_VAR 0 11
4892: PPUSH
4893: CALL_OW 247
4897: PUSH
4898: LD_INT 2
4900: EQUAL
4901: IFFALSE 4905
// exit ;
4903: GO 5421
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4905: LD_ADDR_VAR 0 8
4909: PUSH
4910: LD_INT 81
4912: PUSH
4913: LD_VAR 0 9
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 21
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: ST_TO_ADDR
// if not tmp then
4948: LD_VAR 0 8
4952: NOT
4953: IFFALSE 4957
// exit ;
4955: GO 5421
// if in_unit then
4957: LD_VAR 0 11
4961: IFFALSE 4985
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4963: LD_ADDR_VAR 0 10
4967: PUSH
4968: LD_VAR 0 8
4972: PPUSH
4973: LD_VAR 0 11
4977: PPUSH
4978: CALL_OW 74
4982: ST_TO_ADDR
4983: GO 5005
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4985: LD_ADDR_VAR 0 10
4989: PUSH
4990: LD_VAR 0 8
4994: PPUSH
4995: LD_VAR 0 1
4999: PPUSH
5000: CALL_OW 74
5004: ST_TO_ADDR
// if not enemy then
5005: LD_VAR 0 10
5009: NOT
5010: IFFALSE 5014
// exit ;
5012: GO 5421
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5014: LD_VAR 0 11
5018: IFFALSE 5040
5020: PUSH
5021: LD_VAR 0 11
5025: PPUSH
5026: LD_VAR 0 10
5030: PPUSH
5031: CALL_OW 296
5035: PUSH
5036: LD_INT 13
5038: GREATER
5039: AND
5040: IFTRUE 5062
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: LD_VAR 0 10
5052: PPUSH
5053: CALL_OW 296
5057: PUSH
5058: LD_INT 12
5060: GREATER
5061: OR
5062: IFFALSE 5066
// exit ;
5064: GO 5421
// missile := [ 1 ] ;
5066: LD_ADDR_VAR 0 14
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: EMPTY
5075: LIST
5076: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5077: LD_VAR 0 9
5081: PPUSH
5082: LD_VAR 0 12
5086: PPUSH
5087: CALL_OW 325
5091: IFFALSE 5120
// missile := Replace ( missile , missile + 1 , 2 ) ;
5093: LD_ADDR_VAR 0 14
5097: PUSH
5098: LD_VAR 0 14
5102: PPUSH
5103: LD_VAR 0 14
5107: PUSH
5108: LD_INT 1
5110: PLUS
5111: PPUSH
5112: LD_INT 2
5114: PPUSH
5115: CALL_OW 1
5119: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5120: LD_VAR 0 9
5124: PPUSH
5125: LD_VAR 0 13
5129: PPUSH
5130: CALL_OW 325
5134: IFFALSE 5158
5136: PUSH
5137: LD_VAR 0 10
5141: PPUSH
5142: CALL_OW 255
5146: PPUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 325
5156: NOT
5157: AND
5158: IFFALSE 5187
// missile := Replace ( missile , missile + 1 , 3 ) ;
5160: LD_ADDR_VAR 0 14
5164: PUSH
5165: LD_VAR 0 14
5169: PPUSH
5170: LD_VAR 0 14
5174: PUSH
5175: LD_INT 1
5177: PLUS
5178: PPUSH
5179: LD_INT 3
5181: PPUSH
5182: CALL_OW 1
5186: ST_TO_ADDR
// if missile < 2 then
5187: LD_VAR 0 14
5191: PUSH
5192: LD_INT 2
5194: LESS
5195: IFFALSE 5199
// exit ;
5197: GO 5421
// x := GetX ( enemy ) ;
5199: LD_ADDR_VAR 0 4
5203: PUSH
5204: LD_VAR 0 10
5208: PPUSH
5209: CALL_OW 250
5213: ST_TO_ADDR
// y := GetY ( enemy ) ;
5214: LD_ADDR_VAR 0 5
5218: PUSH
5219: LD_VAR 0 10
5223: PPUSH
5224: CALL_OW 251
5228: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5229: LD_ADDR_VAR 0 6
5233: PUSH
5234: LD_VAR 0 4
5238: PUSH
5239: LD_INT 1
5241: NEG
5242: PPUSH
5243: LD_INT 1
5245: PPUSH
5246: CALL_OW 12
5250: PLUS
5251: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5252: LD_ADDR_VAR 0 7
5256: PUSH
5257: LD_VAR 0 5
5261: PUSH
5262: LD_INT 1
5264: NEG
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 12
5273: PLUS
5274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5275: LD_VAR 0 6
5279: PPUSH
5280: LD_VAR 0 7
5284: PPUSH
5285: CALL_OW 488
5289: NOT
5290: IFFALSE 5312
// begin _x := x ;
5292: LD_ADDR_VAR 0 6
5296: PUSH
5297: LD_VAR 0 4
5301: ST_TO_ADDR
// _y := y ;
5302: LD_ADDR_VAR 0 7
5306: PUSH
5307: LD_VAR 0 5
5311: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_VAR 0 14
5324: PPUSH
5325: CALL_OW 12
5329: ST_TO_ADDR
// case i of 1 :
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 1
5337: DOUBLE
5338: EQUAL
5339: IFTRUE 5343
5341: GO 5360
5343: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5344: LD_VAR 0 1
5348: PPUSH
5349: LD_VAR 0 10
5353: PPUSH
5354: CALL_OW 115
5358: GO 5421
5360: LD_INT 2
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5390
5368: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5369: LD_VAR 0 1
5373: PPUSH
5374: LD_VAR 0 6
5378: PPUSH
5379: LD_VAR 0 7
5383: PPUSH
5384: CALL_OW 153
5388: GO 5421
5390: LD_INT 3
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5420
5398: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_VAR 0 6
5408: PPUSH
5409: LD_VAR 0 7
5413: PPUSH
5414: CALL_OW 154
5418: GO 5421
5420: POP
// end ;
5421: LD_VAR 0 2
5425: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
// if not unit or not building then
5434: LD_VAR 0 1
5438: NOT
5439: IFTRUE 5448
5441: PUSH
5442: LD_VAR 0 2
5446: NOT
5447: OR
5448: IFFALSE 5452
// exit ;
5450: GO 5610
// x := GetX ( building ) ;
5452: LD_ADDR_VAR 0 5
5456: PUSH
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 250
5466: ST_TO_ADDR
// y := GetY ( building ) ;
5467: LD_ADDR_VAR 0 6
5471: PUSH
5472: LD_VAR 0 2
5476: PPUSH
5477: CALL_OW 251
5481: ST_TO_ADDR
// for i := 0 to 5 do
5482: LD_ADDR_VAR 0 4
5486: PUSH
5487: DOUBLE
5488: LD_INT 0
5490: DEC
5491: ST_TO_ADDR
5492: LD_INT 5
5494: PUSH
5495: FOR_TO
5496: IFFALSE 5608
// begin _x := ShiftX ( x , i , 3 ) ;
5498: LD_ADDR_VAR 0 7
5502: PUSH
5503: LD_VAR 0 5
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: LD_INT 3
5515: PPUSH
5516: CALL_OW 272
5520: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5521: LD_ADDR_VAR 0 8
5525: PUSH
5526: LD_VAR 0 6
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: LD_INT 3
5538: PPUSH
5539: CALL_OW 273
5543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5544: LD_VAR 0 7
5548: PPUSH
5549: LD_VAR 0 8
5553: PPUSH
5554: CALL_OW 488
5558: NOT
5559: IFFALSE 5563
// continue ;
5561: GO 5495
// if HexInfo ( _x , _y ) = 0 then
5563: LD_VAR 0 7
5567: PPUSH
5568: LD_VAR 0 8
5572: PPUSH
5573: CALL_OW 428
5577: PUSH
5578: LD_INT 0
5580: EQUAL
5581: IFFALSE 5606
// begin ComMoveXY ( unit , _x , _y ) ;
5583: LD_VAR 0 1
5587: PPUSH
5588: LD_VAR 0 7
5592: PPUSH
5593: LD_VAR 0 8
5597: PPUSH
5598: CALL_OW 111
// exit ;
5602: POP
5603: POP
5604: GO 5610
// end ; end ;
5606: GO 5495
5608: POP
5609: POP
// end ;
5610: LD_VAR 0 3
5614: RET
// export function ScanBase ( side , base_area ) ; begin
5615: LD_INT 0
5617: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: LD_INT 81
5630: PUSH
5631: LD_VAR 0 1
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PPUSH
5640: CALL_OW 70
5644: ST_TO_ADDR
// end ;
5645: LD_VAR 0 3
5649: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5650: LD_INT 0
5652: PPUSH
5653: PPUSH
5654: PPUSH
5655: PPUSH
// result := false ;
5656: LD_ADDR_VAR 0 2
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// side := GetSide ( unit ) ;
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 255
5678: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5679: LD_ADDR_VAR 0 4
5683: PUSH
5684: LD_VAR 0 1
5688: PPUSH
5689: CALL_OW 248
5693: ST_TO_ADDR
// case nat of 1 :
5694: LD_VAR 0 4
5698: PUSH
5699: LD_INT 1
5701: DOUBLE
5702: EQUAL
5703: IFTRUE 5707
5705: GO 5718
5707: POP
// tech := tech_lassight ; 2 :
5708: LD_ADDR_VAR 0 5
5712: PUSH
5713: LD_INT 12
5715: ST_TO_ADDR
5716: GO 5757
5718: LD_INT 2
5720: DOUBLE
5721: EQUAL
5722: IFTRUE 5726
5724: GO 5737
5726: POP
// tech := tech_mortar ; 3 :
5727: LD_ADDR_VAR 0 5
5731: PUSH
5732: LD_INT 41
5734: ST_TO_ADDR
5735: GO 5757
5737: LD_INT 3
5739: DOUBLE
5740: EQUAL
5741: IFTRUE 5745
5743: GO 5756
5745: POP
// tech := tech_bazooka ; end ;
5746: LD_ADDR_VAR 0 5
5750: PUSH
5751: LD_INT 44
5753: ST_TO_ADDR
5754: GO 5757
5756: POP
// if Researched ( side , tech ) then
5757: LD_VAR 0 3
5761: PPUSH
5762: LD_VAR 0 5
5766: PPUSH
5767: CALL_OW 325
5771: IFFALSE 5798
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5773: LD_ADDR_VAR 0 2
5777: PUSH
5778: LD_INT 5
5780: PUSH
5781: LD_INT 8
5783: PUSH
5784: LD_INT 9
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PUSH
5792: LD_VAR 0 4
5796: ARRAY
5797: ST_TO_ADDR
// end ;
5798: LD_VAR 0 2
5802: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5803: LD_INT 0
5805: PPUSH
5806: PPUSH
5807: PPUSH
// if not mines then
5808: LD_VAR 0 2
5812: NOT
5813: IFFALSE 5817
// exit ;
5815: GO 5961
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5817: LD_ADDR_VAR 0 5
5821: PUSH
5822: LD_INT 81
5824: PUSH
5825: LD_VAR 0 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 3
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PPUSH
5855: CALL_OW 69
5859: ST_TO_ADDR
// for i in mines do
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 2
5869: PUSH
5870: FOR_IN
5871: IFFALSE 5959
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5873: LD_VAR 0 4
5877: PUSH
5878: LD_INT 1
5880: ARRAY
5881: PPUSH
5882: LD_VAR 0 4
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: PPUSH
5891: CALL_OW 458
5895: NOT
5896: IFFALSE 5900
// continue ;
5898: GO 5870
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5900: LD_VAR 0 4
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: LD_VAR 0 4
5913: PUSH
5914: LD_INT 2
5916: ARRAY
5917: PPUSH
5918: CALL_OW 428
5922: PUSH
5923: LD_VAR 0 5
5927: IN
5928: IFFALSE 5957
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5930: LD_VAR 0 4
5934: PUSH
5935: LD_INT 1
5937: ARRAY
5938: PPUSH
5939: LD_VAR 0 4
5943: PUSH
5944: LD_INT 2
5946: ARRAY
5947: PPUSH
5948: LD_VAR 0 1
5952: PPUSH
5953: CALL_OW 456
// end ;
5957: GO 5870
5959: POP
5960: POP
// end ;
5961: LD_VAR 0 3
5965: RET
// export function Count ( array ) ; begin
5966: LD_INT 0
5968: PPUSH
// result := array + 0 ;
5969: LD_ADDR_VAR 0 2
5973: PUSH
5974: LD_VAR 0 1
5978: PUSH
5979: LD_INT 0
5981: PLUS
5982: ST_TO_ADDR
// end ;
5983: LD_VAR 0 2
5987: RET
// export function IsEmpty ( building ) ; begin
5988: LD_INT 0
5990: PPUSH
// if not building then
5991: LD_VAR 0 1
5995: NOT
5996: IFFALSE 6000
// exit ;
5998: GO 6043
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6000: LD_ADDR_VAR 0 2
6004: PUSH
6005: LD_VAR 0 1
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 255
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 58
6029: PUSH
6030: EMPTY
6031: LIST
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: CALL_OW 69
6041: IN
6042: ST_TO_ADDR
// end ;
6043: LD_VAR 0 2
6047: RET
// export function IsNotFull ( building ) ; var places ; begin
6048: LD_INT 0
6050: PPUSH
6051: PPUSH
// if not building then
6052: LD_VAR 0 1
6056: NOT
6057: IFFALSE 6061
// exit ;
6059: GO 6089
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: LD_VAR 0 1
6070: PPUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 62
6076: PUSH
6077: EMPTY
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PPUSH
6084: CALL_OW 72
6088: ST_TO_ADDR
// end ;
6089: LD_VAR 0 2
6093: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6094: LD_INT 0
6096: PPUSH
6097: PPUSH
6098: PPUSH
6099: PPUSH
// tmp := [ ] ;
6100: LD_ADDR_VAR 0 3
6104: PUSH
6105: EMPTY
6106: ST_TO_ADDR
// list := [ ] ;
6107: LD_ADDR_VAR 0 5
6111: PUSH
6112: EMPTY
6113: ST_TO_ADDR
// for i = 16 to 25 do
6114: LD_ADDR_VAR 0 4
6118: PUSH
6119: DOUBLE
6120: LD_INT 16
6122: DEC
6123: ST_TO_ADDR
6124: LD_INT 25
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6201
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6130: LD_ADDR_VAR 0 3
6134: PUSH
6135: LD_VAR 0 3
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 255
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 91
6159: PUSH
6160: LD_VAR 0 1
6164: PUSH
6165: LD_INT 6
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 30
6175: PUSH
6176: LD_VAR 0 4
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: ADD
6198: ST_TO_ADDR
6199: GO 6127
6201: POP
6202: POP
// for i = 1 to tmp do
6203: LD_ADDR_VAR 0 4
6207: PUSH
6208: DOUBLE
6209: LD_INT 1
6211: DEC
6212: ST_TO_ADDR
6213: LD_VAR 0 3
6217: PUSH
6218: FOR_TO
6219: IFFALSE 6307
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: LD_VAR 0 5
6230: PUSH
6231: LD_VAR 0 3
6235: PUSH
6236: LD_VAR 0 4
6240: ARRAY
6241: PPUSH
6242: CALL_OW 266
6246: PUSH
6247: LD_VAR 0 3
6251: PUSH
6252: LD_VAR 0 4
6256: ARRAY
6257: PPUSH
6258: CALL_OW 250
6262: PUSH
6263: LD_VAR 0 3
6267: PUSH
6268: LD_VAR 0 4
6272: ARRAY
6273: PPUSH
6274: CALL_OW 251
6278: PUSH
6279: LD_VAR 0 3
6283: PUSH
6284: LD_VAR 0 4
6288: ARRAY
6289: PPUSH
6290: CALL_OW 254
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: EMPTY
6302: LIST
6303: ADD
6304: ST_TO_ADDR
6305: GO 6218
6307: POP
6308: POP
// result := list ;
6309: LD_ADDR_VAR 0 2
6313: PUSH
6314: LD_VAR 0 5
6318: ST_TO_ADDR
// end ;
6319: LD_VAR 0 2
6323: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6324: LD_INT 0
6326: PPUSH
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
6331: PPUSH
6332: PPUSH
// if not factory then
6333: LD_VAR 0 1
6337: NOT
6338: IFFALSE 6342
// exit ;
6340: GO 6945
// if control = control_apeman then
6342: LD_VAR 0 4
6346: PUSH
6347: LD_INT 5
6349: EQUAL
6350: IFFALSE 6459
// begin tmp := UnitsInside ( factory ) ;
6352: LD_ADDR_VAR 0 8
6356: PUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 313
6366: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6367: LD_VAR 0 8
6371: PPUSH
6372: LD_INT 25
6374: PUSH
6375: LD_INT 12
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: NOT
6387: IFFALSE 6397
// control := control_manual ;
6389: LD_ADDR_VAR 0 4
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6397: LD_ADDR_VAR 0 8
6401: PUSH
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL 6094 0 1
6411: ST_TO_ADDR
// if tmp then
6412: LD_VAR 0 8
6416: IFFALSE 6459
// begin for i in tmp do
6418: LD_ADDR_VAR 0 7
6422: PUSH
6423: LD_VAR 0 8
6427: PUSH
6428: FOR_IN
6429: IFFALSE 6457
// if i [ 1 ] = b_ext_radio then
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 22
6442: EQUAL
6443: IFFALSE 6455
// begin control := control_remote ;
6445: LD_ADDR_VAR 0 4
6449: PUSH
6450: LD_INT 2
6452: ST_TO_ADDR
// break ;
6453: GO 6457
// end ;
6455: GO 6428
6457: POP
6458: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_VAR 0 2
6468: PPUSH
6469: LD_VAR 0 3
6473: PPUSH
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_VAR 0 5
6483: PPUSH
6484: CALL_OW 448
6488: IFFALSE 6523
// begin result := [ chassis , engine , control , weapon ] ;
6490: LD_ADDR_VAR 0 6
6494: PUSH
6495: LD_VAR 0 2
6499: PUSH
6500: LD_VAR 0 3
6504: PUSH
6505: LD_VAR 0 4
6509: PUSH
6510: LD_VAR 0 5
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: ST_TO_ADDR
// exit ;
6521: GO 6945
// end ; _chassis := AvailableChassisList ( factory ) ;
6523: LD_ADDR_VAR 0 9
6527: PUSH
6528: LD_VAR 0 1
6532: PPUSH
6533: CALL_OW 475
6537: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6538: LD_ADDR_VAR 0 11
6542: PUSH
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 476
6552: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6553: LD_ADDR_VAR 0 12
6557: PUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 477
6567: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6568: LD_ADDR_VAR 0 10
6572: PUSH
6573: LD_VAR 0 1
6577: PPUSH
6578: CALL_OW 478
6582: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6583: LD_VAR 0 9
6587: NOT
6588: IFTRUE 6597
6590: PUSH
6591: LD_VAR 0 11
6595: NOT
6596: OR
6597: IFTRUE 6606
6599: PUSH
6600: LD_VAR 0 12
6604: NOT
6605: OR
6606: IFTRUE 6615
6608: PUSH
6609: LD_VAR 0 10
6613: NOT
6614: OR
6615: IFFALSE 6650
// begin result := [ chassis , engine , control , weapon ] ;
6617: LD_ADDR_VAR 0 6
6621: PUSH
6622: LD_VAR 0 2
6626: PUSH
6627: LD_VAR 0 3
6631: PUSH
6632: LD_VAR 0 4
6636: PUSH
6637: LD_VAR 0 5
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: ST_TO_ADDR
// exit ;
6648: GO 6945
// end ; if not chassis in _chassis then
6650: LD_VAR 0 2
6654: PUSH
6655: LD_VAR 0 9
6659: IN
6660: NOT
6661: IFFALSE 6687
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_VAR 0 9
6672: PUSH
6673: LD_INT 1
6675: PPUSH
6676: LD_VAR 0 9
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_VAR 0 3
6696: PPUSH
6697: CALL 6950 0 2
6701: NOT
6702: IFFALSE 6763
// repeat engine := _engine [ 1 ] ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: LD_VAR 0 11
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6718: LD_ADDR_VAR 0 11
6722: PUSH
6723: LD_VAR 0 11
6727: PPUSH
6728: LD_INT 1
6730: PPUSH
6731: CALL_OW 3
6735: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6736: LD_VAR 0 2
6740: PPUSH
6741: LD_VAR 0 3
6745: PPUSH
6746: CALL 6950 0 2
6750: IFTRUE 6761
6752: PUSH
6753: LD_VAR 0 11
6757: PUSH
6758: EMPTY
6759: EQUAL
6760: OR
6761: IFFALSE 6704
// if not control in _control then
6763: LD_VAR 0 4
6767: PUSH
6768: LD_VAR 0 12
6772: IN
6773: NOT
6774: IFFALSE 6800
// control := _control [ rand ( 1 , _control ) ] ;
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: LD_VAR 0 12
6785: PUSH
6786: LD_INT 1
6788: PPUSH
6789: LD_VAR 0 12
6793: PPUSH
6794: CALL_OW 12
6798: ARRAY
6799: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6800: LD_VAR 0 2
6804: PPUSH
6805: LD_VAR 0 5
6809: PPUSH
6810: CALL 7172 0 2
6814: NOT
6815: IFFALSE 6876
// repeat weapon := _weapon [ 1 ] ;
6817: LD_ADDR_VAR 0 5
6821: PUSH
6822: LD_VAR 0 10
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6831: LD_ADDR_VAR 0 10
6835: PUSH
6836: LD_VAR 0 10
6840: PPUSH
6841: LD_INT 1
6843: PPUSH
6844: CALL_OW 3
6848: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6849: LD_VAR 0 2
6853: PPUSH
6854: LD_VAR 0 5
6858: PPUSH
6859: CALL 7172 0 2
6863: IFTRUE 6874
6865: PUSH
6866: LD_VAR 0 10
6870: PUSH
6871: EMPTY
6872: EQUAL
6873: OR
6874: IFFALSE 6817
// result := [ ] ;
6876: LD_ADDR_VAR 0 6
6880: PUSH
6881: EMPTY
6882: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6883: LD_VAR 0 1
6887: PPUSH
6888: LD_VAR 0 2
6892: PPUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: LD_VAR 0 4
6902: PPUSH
6903: LD_VAR 0 5
6907: PPUSH
6908: CALL_OW 448
6912: IFFALSE 6945
// result := [ chassis , engine , control , weapon ] ;
6914: LD_ADDR_VAR 0 6
6918: PUSH
6919: LD_VAR 0 2
6923: PUSH
6924: LD_VAR 0 3
6928: PUSH
6929: LD_VAR 0 4
6933: PUSH
6934: LD_VAR 0 5
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: ST_TO_ADDR
// end ;
6945: LD_VAR 0 6
6949: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6950: LD_INT 0
6952: PPUSH
// if not chassis or not engine then
6953: LD_VAR 0 1
6957: NOT
6958: IFTRUE 6967
6960: PUSH
6961: LD_VAR 0 2
6965: NOT
6966: OR
6967: IFFALSE 6971
// exit ;
6969: GO 7167
// case engine of engine_solar :
6971: LD_VAR 0 2
6975: PUSH
6976: LD_INT 2
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 7022
6984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6985: LD_ADDR_VAR 0 3
6989: PUSH
6990: LD_INT 11
6992: PUSH
6993: LD_INT 12
6995: PUSH
6996: LD_INT 13
6998: PUSH
6999: LD_INT 14
7001: PUSH
7002: LD_INT 1
7004: PUSH
7005: LD_INT 2
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
7020: GO 7151
7022: LD_INT 1
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7092
7030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: LD_INT 11
7038: PUSH
7039: LD_INT 12
7041: PUSH
7042: LD_INT 13
7044: PUSH
7045: LD_INT 14
7047: PUSH
7048: LD_INT 1
7050: PUSH
7051: LD_INT 2
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: LD_INT 5
7062: PUSH
7063: LD_INT 21
7065: PUSH
7066: LD_INT 23
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7151
7092: LD_INT 3
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7150
7100: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_INT 13
7108: PUSH
7109: LD_INT 14
7111: PUSH
7112: LD_INT 2
7114: PUSH
7115: LD_INT 3
7117: PUSH
7118: LD_INT 4
7120: PUSH
7121: LD_INT 5
7123: PUSH
7124: LD_INT 21
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 23
7132: PUSH
7133: LD_INT 24
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: ST_TO_ADDR
7148: GO 7151
7150: POP
// result := ( chassis in result ) ;
7151: LD_ADDR_VAR 0 3
7155: PUSH
7156: LD_VAR 0 1
7160: PUSH
7161: LD_VAR 0 3
7165: IN
7166: ST_TO_ADDR
// end ;
7167: LD_VAR 0 3
7171: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7172: LD_INT 0
7174: PPUSH
// if not chassis or not weapon then
7175: LD_VAR 0 1
7179: NOT
7180: IFTRUE 7189
7182: PUSH
7183: LD_VAR 0 2
7187: NOT
7188: OR
7189: IFFALSE 7193
// exit ;
7191: GO 8287
// case weapon of us_machine_gun :
7193: LD_VAR 0 2
7197: PUSH
7198: LD_INT 2
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7236
7206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 1
7214: PUSH
7215: LD_INT 2
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 4
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: ST_TO_ADDR
7234: GO 8271
7236: LD_INT 3
7238: DOUBLE
7239: EQUAL
7240: IFTRUE 7244
7242: GO 7274
7244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7245: LD_ADDR_VAR 0 3
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: ST_TO_ADDR
7272: GO 8271
7274: LD_INT 11
7276: DOUBLE
7277: EQUAL
7278: IFTRUE 7282
7280: GO 7312
7282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: LD_INT 2
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: LD_INT 4
7299: PUSH
7300: LD_INT 5
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: ST_TO_ADDR
7310: GO 8271
7312: LD_INT 4
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7346
7320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7321: LD_ADDR_VAR 0 3
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 3
7331: PUSH
7332: LD_INT 4
7334: PUSH
7335: LD_INT 5
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: ST_TO_ADDR
7344: GO 8271
7346: LD_INT 5
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7380
7354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7355: LD_ADDR_VAR 0 3
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 3
7365: PUSH
7366: LD_INT 4
7368: PUSH
7369: LD_INT 5
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: ST_TO_ADDR
7378: GO 8271
7380: LD_INT 9
7382: DOUBLE
7383: EQUAL
7384: IFTRUE 7388
7386: GO 7414
7388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: LD_INT 2
7396: PUSH
7397: LD_INT 3
7399: PUSH
7400: LD_INT 4
7402: PUSH
7403: LD_INT 5
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: ST_TO_ADDR
7412: GO 8271
7414: LD_INT 7
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7448
7422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7423: LD_ADDR_VAR 0 3
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 3
7433: PUSH
7434: LD_INT 4
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: ST_TO_ADDR
7446: GO 8271
7448: LD_INT 12
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7482
7456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7457: LD_ADDR_VAR 0 3
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: LD_INT 4
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 8271
7482: LD_INT 13
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7516
7490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7491: LD_ADDR_VAR 0 3
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 4
7504: PUSH
7505: LD_INT 5
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: ST_TO_ADDR
7514: GO 8271
7516: LD_INT 14
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 7542
7524: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7525: LD_ADDR_VAR 0 3
7529: PUSH
7530: LD_INT 4
7532: PUSH
7533: LD_INT 5
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: ST_TO_ADDR
7540: GO 8271
7542: LD_INT 6
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7568
7550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7551: LD_ADDR_VAR 0 3
7555: PUSH
7556: LD_INT 4
7558: PUSH
7559: LD_INT 5
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: ST_TO_ADDR
7566: GO 8271
7568: LD_INT 10
7570: DOUBLE
7571: EQUAL
7572: IFTRUE 7576
7574: GO 7594
7576: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7577: LD_ADDR_VAR 0 3
7581: PUSH
7582: LD_INT 4
7584: PUSH
7585: LD_INT 5
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: ST_TO_ADDR
7592: GO 8271
7594: LD_INT 22
7596: DOUBLE
7597: EQUAL
7598: IFTRUE 7602
7600: GO 7628
7602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_INT 11
7610: PUSH
7611: LD_INT 12
7613: PUSH
7614: LD_INT 13
7616: PUSH
7617: LD_INT 14
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: ST_TO_ADDR
7626: GO 8271
7628: LD_INT 23
7630: DOUBLE
7631: EQUAL
7632: IFTRUE 7636
7634: GO 7662
7636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7637: LD_ADDR_VAR 0 3
7641: PUSH
7642: LD_INT 11
7644: PUSH
7645: LD_INT 12
7647: PUSH
7648: LD_INT 13
7650: PUSH
7651: LD_INT 14
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: ST_TO_ADDR
7660: GO 8271
7662: LD_INT 24
7664: DOUBLE
7665: EQUAL
7666: IFTRUE 7670
7668: GO 7696
7670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7671: LD_ADDR_VAR 0 3
7675: PUSH
7676: LD_INT 11
7678: PUSH
7679: LD_INT 12
7681: PUSH
7682: LD_INT 13
7684: PUSH
7685: LD_INT 14
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
7694: GO 8271
7696: LD_INT 30
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7730
7704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7705: LD_ADDR_VAR 0 3
7709: PUSH
7710: LD_INT 11
7712: PUSH
7713: LD_INT 12
7715: PUSH
7716: LD_INT 13
7718: PUSH
7719: LD_INT 14
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
7728: GO 8271
7730: LD_INT 25
7732: DOUBLE
7733: EQUAL
7734: IFTRUE 7738
7736: GO 7756
7738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7739: LD_ADDR_VAR 0 3
7743: PUSH
7744: LD_INT 13
7746: PUSH
7747: LD_INT 14
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: ST_TO_ADDR
7754: GO 8271
7756: LD_INT 27
7758: DOUBLE
7759: EQUAL
7760: IFTRUE 7764
7762: GO 7782
7764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: LD_INT 13
7772: PUSH
7773: LD_INT 14
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: ST_TO_ADDR
7780: GO 8271
7782: LD_INT 92
7784: DOUBLE
7785: EQUAL
7786: IFTRUE 7790
7788: GO 7816
7790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_INT 11
7798: PUSH
7799: LD_INT 12
7801: PUSH
7802: LD_INT 13
7804: PUSH
7805: LD_INT 14
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: ST_TO_ADDR
7814: GO 8271
7816: LD_INT 28
7818: DOUBLE
7819: EQUAL
7820: IFTRUE 7824
7822: GO 7842
7824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7825: LD_ADDR_VAR 0 3
7829: PUSH
7830: LD_INT 13
7832: PUSH
7833: LD_INT 14
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: ST_TO_ADDR
7840: GO 8271
7842: LD_INT 29
7844: DOUBLE
7845: EQUAL
7846: IFTRUE 7850
7848: GO 7868
7850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7851: LD_ADDR_VAR 0 3
7855: PUSH
7856: LD_INT 13
7858: PUSH
7859: LD_INT 14
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: ST_TO_ADDR
7866: GO 8271
7868: LD_INT 31
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 7894
7876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7877: LD_ADDR_VAR 0 3
7881: PUSH
7882: LD_INT 13
7884: PUSH
7885: LD_INT 14
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: ST_TO_ADDR
7892: GO 8271
7894: LD_INT 26
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 7920
7902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7903: LD_ADDR_VAR 0 3
7907: PUSH
7908: LD_INT 13
7910: PUSH
7911: LD_INT 14
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: ST_TO_ADDR
7918: GO 8271
7920: LD_INT 42
7922: DOUBLE
7923: EQUAL
7924: IFTRUE 7928
7926: GO 7954
7928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7929: LD_ADDR_VAR 0 3
7933: PUSH
7934: LD_INT 21
7936: PUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 8271
7954: LD_INT 43
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 7988
7962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7963: LD_ADDR_VAR 0 3
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 22
7973: PUSH
7974: LD_INT 23
7976: PUSH
7977: LD_INT 24
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: ST_TO_ADDR
7986: GO 8271
7988: LD_INT 44
7990: DOUBLE
7991: EQUAL
7992: IFTRUE 7996
7994: GO 8022
7996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 21
8004: PUSH
8005: LD_INT 22
8007: PUSH
8008: LD_INT 23
8010: PUSH
8011: LD_INT 24
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: ST_TO_ADDR
8020: GO 8271
8022: LD_INT 45
8024: DOUBLE
8025: EQUAL
8026: IFTRUE 8030
8028: GO 8056
8030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8031: LD_ADDR_VAR 0 3
8035: PUSH
8036: LD_INT 21
8038: PUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 23
8044: PUSH
8045: LD_INT 24
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: ST_TO_ADDR
8054: GO 8271
8056: LD_INT 49
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8090
8064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_INT 21
8072: PUSH
8073: LD_INT 22
8075: PUSH
8076: LD_INT 23
8078: PUSH
8079: LD_INT 24
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
8088: GO 8271
8090: LD_INT 51
8092: DOUBLE
8093: EQUAL
8094: IFTRUE 8098
8096: GO 8124
8098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8099: LD_ADDR_VAR 0 3
8103: PUSH
8104: LD_INT 21
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_INT 23
8112: PUSH
8113: LD_INT 24
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: ST_TO_ADDR
8122: GO 8271
8124: LD_INT 52
8126: DOUBLE
8127: EQUAL
8128: IFTRUE 8132
8130: GO 8158
8132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8133: LD_ADDR_VAR 0 3
8137: PUSH
8138: LD_INT 21
8140: PUSH
8141: LD_INT 22
8143: PUSH
8144: LD_INT 23
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 8271
8158: LD_INT 53
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8184
8166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8167: LD_ADDR_VAR 0 3
8171: PUSH
8172: LD_INT 23
8174: PUSH
8175: LD_INT 24
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 8271
8184: LD_INT 46
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8210
8192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_INT 23
8200: PUSH
8201: LD_INT 24
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: ST_TO_ADDR
8208: GO 8271
8210: LD_INT 47
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8236
8218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
8219: LD_ADDR_VAR 0 3
8223: PUSH
8224: LD_INT 23
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: ST_TO_ADDR
8234: GO 8271
8236: LD_INT 98
8238: DOUBLE
8239: EQUAL
8240: IFTRUE 8244
8242: GO 8270
8244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8245: LD_ADDR_VAR 0 3
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_INT 23
8258: PUSH
8259: LD_INT 24
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: ST_TO_ADDR
8268: GO 8271
8270: POP
// result := ( chassis in result ) ;
8271: LD_ADDR_VAR 0 3
8275: PUSH
8276: LD_VAR 0 1
8280: PUSH
8281: LD_VAR 0 3
8285: IN
8286: ST_TO_ADDR
// end ;
8287: LD_VAR 0 3
8291: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8292: LD_INT 0
8294: PPUSH
8295: PPUSH
8296: PPUSH
8297: PPUSH
8298: PPUSH
8299: PPUSH
8300: PPUSH
// result := array ;
8301: LD_ADDR_VAR 0 5
8305: PUSH
8306: LD_VAR 0 1
8310: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8311: LD_VAR 0 1
8315: NOT
8316: IFTRUE 8325
8318: PUSH
8319: LD_VAR 0 2
8323: NOT
8324: OR
8325: IFTRUE 8334
8327: PUSH
8328: LD_VAR 0 3
8332: NOT
8333: OR
8334: IFTRUE 8348
8336: PUSH
8337: LD_VAR 0 2
8341: PUSH
8342: LD_VAR 0 1
8346: GREATER
8347: OR
8348: IFTRUE 8362
8350: PUSH
8351: LD_VAR 0 3
8355: PUSH
8356: LD_VAR 0 1
8360: GREATER
8361: OR
8362: IFFALSE 8366
// exit ;
8364: GO 8662
// if direction then
8366: LD_VAR 0 4
8370: IFFALSE 8434
// begin d := 1 ;
8372: LD_ADDR_VAR 0 9
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// if i_from > i_to then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_VAR 0 3
8389: GREATER
8390: IFFALSE 8416
// length := ( array - i_from ) + i_to else
8392: LD_ADDR_VAR 0 11
8396: PUSH
8397: LD_VAR 0 1
8401: PUSH
8402: LD_VAR 0 2
8406: MINUS
8407: PUSH
8408: LD_VAR 0 3
8412: PLUS
8413: ST_TO_ADDR
8414: GO 8432
// length := i_to - i_from ;
8416: LD_ADDR_VAR 0 11
8420: PUSH
8421: LD_VAR 0 3
8425: PUSH
8426: LD_VAR 0 2
8430: MINUS
8431: ST_TO_ADDR
// end else
8432: GO 8495
// begin d := - 1 ;
8434: LD_ADDR_VAR 0 9
8438: PUSH
8439: LD_INT 1
8441: NEG
8442: ST_TO_ADDR
// if i_from > i_to then
8443: LD_VAR 0 2
8447: PUSH
8448: LD_VAR 0 3
8452: GREATER
8453: IFFALSE 8473
// length := i_from - i_to else
8455: LD_ADDR_VAR 0 11
8459: PUSH
8460: LD_VAR 0 2
8464: PUSH
8465: LD_VAR 0 3
8469: MINUS
8470: ST_TO_ADDR
8471: GO 8495
// length := ( array - i_to ) + i_from ;
8473: LD_ADDR_VAR 0 11
8477: PUSH
8478: LD_VAR 0 1
8482: PUSH
8483: LD_VAR 0 3
8487: MINUS
8488: PUSH
8489: LD_VAR 0 2
8493: PLUS
8494: ST_TO_ADDR
// end ; if not length then
8495: LD_VAR 0 11
8499: NOT
8500: IFFALSE 8504
// exit ;
8502: GO 8662
// tmp := array ;
8504: LD_ADDR_VAR 0 10
8508: PUSH
8509: LD_VAR 0 1
8513: ST_TO_ADDR
// for i = 1 to length do
8514: LD_ADDR_VAR 0 6
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_VAR 0 11
8528: PUSH
8529: FOR_TO
8530: IFFALSE 8650
// begin for j = 1 to array do
8532: LD_ADDR_VAR 0 7
8536: PUSH
8537: DOUBLE
8538: LD_INT 1
8540: DEC
8541: ST_TO_ADDR
8542: LD_VAR 0 1
8546: PUSH
8547: FOR_TO
8548: IFFALSE 8636
// begin k := j + d ;
8550: LD_ADDR_VAR 0 8
8554: PUSH
8555: LD_VAR 0 7
8559: PUSH
8560: LD_VAR 0 9
8564: PLUS
8565: ST_TO_ADDR
// if k > array then
8566: LD_VAR 0 8
8570: PUSH
8571: LD_VAR 0 1
8575: GREATER
8576: IFFALSE 8586
// k := 1 ;
8578: LD_ADDR_VAR 0 8
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// if not k then
8586: LD_VAR 0 8
8590: NOT
8591: IFFALSE 8603
// k := array ;
8593: LD_ADDR_VAR 0 8
8597: PUSH
8598: LD_VAR 0 1
8602: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8603: LD_ADDR_VAR 0 10
8607: PUSH
8608: LD_VAR 0 10
8612: PPUSH
8613: LD_VAR 0 8
8617: PPUSH
8618: LD_VAR 0 1
8622: PUSH
8623: LD_VAR 0 7
8627: ARRAY
8628: PPUSH
8629: CALL_OW 1
8633: ST_TO_ADDR
// end ;
8634: GO 8547
8636: POP
8637: POP
// array := tmp ;
8638: LD_ADDR_VAR 0 1
8642: PUSH
8643: LD_VAR 0 10
8647: ST_TO_ADDR
// end ;
8648: GO 8529
8650: POP
8651: POP
// result := array ;
8652: LD_ADDR_VAR 0 5
8656: PUSH
8657: LD_VAR 0 1
8661: ST_TO_ADDR
// end ;
8662: LD_VAR 0 5
8666: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8667: LD_INT 0
8669: PPUSH
8670: PPUSH
// result := 0 ;
8671: LD_ADDR_VAR 0 3
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// if not array or not value in array then
8679: LD_VAR 0 1
8683: NOT
8684: IFTRUE 8699
8686: PUSH
8687: LD_VAR 0 2
8691: PUSH
8692: LD_VAR 0 1
8696: IN
8697: NOT
8698: OR
8699: IFFALSE 8703
// exit ;
8701: GO 8757
// for i = 1 to array do
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: DOUBLE
8709: LD_INT 1
8711: DEC
8712: ST_TO_ADDR
8713: LD_VAR 0 1
8717: PUSH
8718: FOR_TO
8719: IFFALSE 8755
// if value = array [ i ] then
8721: LD_VAR 0 2
8725: PUSH
8726: LD_VAR 0 1
8730: PUSH
8731: LD_VAR 0 4
8735: ARRAY
8736: EQUAL
8737: IFFALSE 8753
// begin result := i ;
8739: LD_ADDR_VAR 0 3
8743: PUSH
8744: LD_VAR 0 4
8748: ST_TO_ADDR
// exit ;
8749: POP
8750: POP
8751: GO 8757
// end ;
8753: GO 8718
8755: POP
8756: POP
// end ;
8757: LD_VAR 0 3
8761: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8762: LD_INT 0
8764: PPUSH
// vc_chassis := chassis ;
8765: LD_ADDR_OWVAR 37
8769: PUSH
8770: LD_VAR 0 1
8774: ST_TO_ADDR
// vc_engine := engine ;
8775: LD_ADDR_OWVAR 39
8779: PUSH
8780: LD_VAR 0 2
8784: ST_TO_ADDR
// vc_control := control ;
8785: LD_ADDR_OWVAR 38
8789: PUSH
8790: LD_VAR 0 3
8794: ST_TO_ADDR
// vc_weapon := weapon ;
8795: LD_ADDR_OWVAR 40
8799: PUSH
8800: LD_VAR 0 4
8804: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8805: LD_ADDR_OWVAR 41
8809: PUSH
8810: LD_VAR 0 5
8814: ST_TO_ADDR
// end ;
8815: LD_VAR 0 6
8819: RET
// export function WantPlant ( unit ) ; var task ; begin
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// result := false ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 437
8846: ST_TO_ADDR
// if task then
8847: LD_VAR 0 3
8851: IFFALSE 8879
// if task [ 1 ] [ 1 ] = p then
8853: LD_VAR 0 3
8857: PUSH
8858: LD_INT 1
8860: ARRAY
8861: PUSH
8862: LD_INT 1
8864: ARRAY
8865: PUSH
8866: LD_STRING p
8868: EQUAL
8869: IFFALSE 8879
// result := true ;
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
// end ;
8879: LD_VAR 0 2
8883: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8884: LD_INT 0
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
// if pos < 1 then
8890: LD_VAR 0 2
8894: PUSH
8895: LD_INT 1
8897: LESS
8898: IFFALSE 8902
// exit ;
8900: GO 9205
// if pos = 1 then
8902: LD_VAR 0 2
8906: PUSH
8907: LD_INT 1
8909: EQUAL
8910: IFFALSE 8943
// result := Replace ( arr , pos [ 1 ] , value ) else
8912: LD_ADDR_VAR 0 4
8916: PUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_VAR 0 2
8926: PUSH
8927: LD_INT 1
8929: ARRAY
8930: PPUSH
8931: LD_VAR 0 3
8935: PPUSH
8936: CALL_OW 1
8940: ST_TO_ADDR
8941: GO 9205
// begin tmp := arr ;
8943: LD_ADDR_VAR 0 6
8947: PUSH
8948: LD_VAR 0 1
8952: ST_TO_ADDR
// s_arr := [ tmp ] ;
8953: LD_ADDR_VAR 0 7
8957: PUSH
8958: LD_VAR 0 6
8962: PUSH
8963: EMPTY
8964: LIST
8965: ST_TO_ADDR
// for i = 1 to pos - 1 do
8966: LD_ADDR_VAR 0 5
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 2
8980: PUSH
8981: LD_INT 1
8983: MINUS
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9031
// begin tmp := tmp [ pos [ i ] ] ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_VAR 0 6
8997: PUSH
8998: LD_VAR 0 2
9002: PUSH
9003: LD_VAR 0 5
9007: ARRAY
9008: ARRAY
9009: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9010: LD_ADDR_VAR 0 7
9014: PUSH
9015: LD_VAR 0 7
9019: PUSH
9020: LD_VAR 0 6
9024: PUSH
9025: EMPTY
9026: LIST
9027: ADD
9028: ST_TO_ADDR
// end ;
9029: GO 8985
9031: POP
9032: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9033: LD_ADDR_VAR 0 6
9037: PUSH
9038: LD_VAR 0 6
9042: PPUSH
9043: LD_VAR 0 2
9047: PUSH
9048: LD_VAR 0 2
9052: ARRAY
9053: PPUSH
9054: LD_VAR 0 3
9058: PPUSH
9059: CALL_OW 1
9063: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9064: LD_ADDR_VAR 0 7
9068: PUSH
9069: LD_VAR 0 7
9073: PPUSH
9074: LD_VAR 0 7
9078: PPUSH
9079: LD_VAR 0 6
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
// for i = s_arr downto 2 do
9089: LD_ADDR_VAR 0 5
9093: PUSH
9094: DOUBLE
9095: LD_VAR 0 7
9099: INC
9100: ST_TO_ADDR
9101: LD_INT 2
9103: PUSH
9104: FOR_DOWNTO
9105: IFFALSE 9189
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9107: LD_ADDR_VAR 0 6
9111: PUSH
9112: LD_VAR 0 7
9116: PUSH
9117: LD_VAR 0 5
9121: PUSH
9122: LD_INT 1
9124: MINUS
9125: ARRAY
9126: PPUSH
9127: LD_VAR 0 2
9131: PUSH
9132: LD_VAR 0 5
9136: PUSH
9137: LD_INT 1
9139: MINUS
9140: ARRAY
9141: PPUSH
9142: LD_VAR 0 7
9146: PUSH
9147: LD_VAR 0 5
9151: ARRAY
9152: PPUSH
9153: CALL_OW 1
9157: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9158: LD_ADDR_VAR 0 7
9162: PUSH
9163: LD_VAR 0 7
9167: PPUSH
9168: LD_VAR 0 5
9172: PUSH
9173: LD_INT 1
9175: MINUS
9176: PPUSH
9177: LD_VAR 0 6
9181: PPUSH
9182: CALL_OW 1
9186: ST_TO_ADDR
// end ;
9187: GO 9104
9189: POP
9190: POP
// result := s_arr [ 1 ] ;
9191: LD_ADDR_VAR 0 4
9195: PUSH
9196: LD_VAR 0 7
9200: PUSH
9201: LD_INT 1
9203: ARRAY
9204: ST_TO_ADDR
// end ; end ;
9205: LD_VAR 0 4
9209: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9210: LD_INT 0
9212: PPUSH
9213: PPUSH
// if not list then
9214: LD_VAR 0 1
9218: NOT
9219: IFFALSE 9223
// exit ;
9221: GO 9314
// i := list [ pos1 ] ;
9223: LD_ADDR_VAR 0 5
9227: PUSH
9228: LD_VAR 0 1
9232: PUSH
9233: LD_VAR 0 2
9237: ARRAY
9238: ST_TO_ADDR
// if not i then
9239: LD_VAR 0 5
9243: NOT
9244: IFFALSE 9248
// exit ;
9246: GO 9314
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9248: LD_ADDR_VAR 0 1
9252: PUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: LD_VAR 0 1
9267: PUSH
9268: LD_VAR 0 3
9272: ARRAY
9273: PPUSH
9274: CALL_OW 1
9278: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9279: LD_ADDR_VAR 0 1
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: LD_VAR 0 3
9293: PPUSH
9294: LD_VAR 0 5
9298: PPUSH
9299: CALL_OW 1
9303: ST_TO_ADDR
// result := list ;
9304: LD_ADDR_VAR 0 4
9308: PUSH
9309: LD_VAR 0 1
9313: ST_TO_ADDR
// end ;
9314: LD_VAR 0 4
9318: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9319: LD_INT 0
9321: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9322: LD_ADDR_VAR 0 5
9326: PUSH
9327: LD_VAR 0 1
9331: PPUSH
9332: CALL_OW 250
9336: PPUSH
9337: LD_VAR 0 1
9341: PPUSH
9342: CALL_OW 251
9346: PPUSH
9347: LD_VAR 0 2
9351: PPUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_VAR 0 4
9361: PPUSH
9362: CALL 9744 0 5
9366: ST_TO_ADDR
// end ;
9367: LD_VAR 0 5
9371: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9372: LD_INT 0
9374: PPUSH
9375: PPUSH
9376: PPUSH
9377: PPUSH
// if not list or not unit then
9378: LD_VAR 0 2
9382: NOT
9383: IFTRUE 9392
9385: PUSH
9386: LD_VAR 0 1
9390: NOT
9391: OR
9392: IFFALSE 9396
// exit ;
9394: GO 9739
// result := [ ] ;
9396: LD_ADDR_VAR 0 5
9400: PUSH
9401: EMPTY
9402: ST_TO_ADDR
// for i in list do
9403: LD_ADDR_VAR 0 6
9407: PUSH
9408: LD_VAR 0 2
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9632
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9416: LD_ADDR_VAR 0 8
9420: PUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_VAR 0 6
9430: PUSH
9431: LD_INT 1
9433: ARRAY
9434: PPUSH
9435: LD_VAR 0 6
9439: PUSH
9440: LD_INT 2
9442: ARRAY
9443: PPUSH
9444: CALL_OW 297
9448: ST_TO_ADDR
// if not Count ( result ) then
9449: LD_VAR 0 5
9453: PPUSH
9454: CALL 5966 0 1
9458: NOT
9459: IFFALSE 9492
// begin result := Join ( result , [ i , tmp ] ) ;
9461: LD_ADDR_VAR 0 5
9465: PUSH
9466: LD_VAR 0 5
9470: PPUSH
9471: LD_VAR 0 6
9475: PUSH
9476: LD_VAR 0 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL 41942 0 2
9489: ST_TO_ADDR
// continue ;
9490: GO 9413
// end ; if result [ result ] [ 2 ] <= tmp then
9492: LD_VAR 0 5
9496: PUSH
9497: LD_VAR 0 5
9501: ARRAY
9502: PUSH
9503: LD_INT 2
9505: ARRAY
9506: PUSH
9507: LD_VAR 0 8
9511: LESSEQUAL
9512: IFFALSE 9545
// result := Join ( result , [ i , tmp ] ) else
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 5
9523: PPUSH
9524: LD_VAR 0 6
9528: PUSH
9529: LD_VAR 0 8
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL 41942 0 2
9542: ST_TO_ADDR
9543: GO 9630
// begin for j := 1 to Count ( result ) do
9545: LD_ADDR_VAR 0 7
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_VAR 0 5
9559: PPUSH
9560: CALL 5966 0 1
9564: PUSH
9565: FOR_TO
9566: IFFALSE 9628
// begin if tmp < result [ j ] [ 2 ] then
9568: LD_VAR 0 8
9572: PUSH
9573: LD_VAR 0 5
9577: PUSH
9578: LD_VAR 0 7
9582: ARRAY
9583: PUSH
9584: LD_INT 2
9586: ARRAY
9587: LESS
9588: IFFALSE 9626
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9590: LD_ADDR_VAR 0 5
9594: PUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 7
9604: PPUSH
9605: LD_VAR 0 6
9609: PUSH
9610: LD_VAR 0 8
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 2
9623: ST_TO_ADDR
// break ;
9624: GO 9628
// end ; end ;
9626: GO 9565
9628: POP
9629: POP
// end ; end ;
9630: GO 9413
9632: POP
9633: POP
// if result and not asc then
9634: LD_VAR 0 5
9638: IFFALSE 9647
9640: PUSH
9641: LD_VAR 0 3
9645: NOT
9646: AND
9647: IFFALSE 9664
// result := ReverseArray ( result ) ;
9649: LD_ADDR_VAR 0 5
9653: PUSH
9654: LD_VAR 0 5
9658: PPUSH
9659: CALL 37022 0 1
9663: ST_TO_ADDR
// tmp := [ ] ;
9664: LD_ADDR_VAR 0 8
9668: PUSH
9669: EMPTY
9670: ST_TO_ADDR
// if mode then
9671: LD_VAR 0 4
9675: IFFALSE 9739
// begin for i := 1 to result do
9677: LD_ADDR_VAR 0 6
9681: PUSH
9682: DOUBLE
9683: LD_INT 1
9685: DEC
9686: ST_TO_ADDR
9687: LD_VAR 0 5
9691: PUSH
9692: FOR_TO
9693: IFFALSE 9727
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 8
9704: PPUSH
9705: LD_VAR 0 5
9709: PUSH
9710: LD_VAR 0 6
9714: ARRAY
9715: PUSH
9716: LD_INT 1
9718: ARRAY
9719: PPUSH
9720: CALL 41942 0 2
9724: ST_TO_ADDR
9725: GO 9692
9727: POP
9728: POP
// result := tmp ;
9729: LD_ADDR_VAR 0 5
9733: PUSH
9734: LD_VAR 0 8
9738: ST_TO_ADDR
// end ; end ;
9739: LD_VAR 0 5
9743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9744: LD_INT 0
9746: PPUSH
9747: PPUSH
9748: PPUSH
9749: PPUSH
// if not list then
9750: LD_VAR 0 3
9754: NOT
9755: IFFALSE 9759
// exit ;
9757: GO 10149
// result := [ ] ;
9759: LD_ADDR_VAR 0 6
9763: PUSH
9764: EMPTY
9765: ST_TO_ADDR
// for i in list do
9766: LD_ADDR_VAR 0 7
9770: PUSH
9771: LD_VAR 0 3
9775: PUSH
9776: FOR_IN
9777: IFFALSE 9979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9779: LD_ADDR_VAR 0 9
9783: PUSH
9784: LD_VAR 0 7
9788: PPUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_VAR 0 2
9798: PPUSH
9799: CALL_OW 297
9803: ST_TO_ADDR
// if not result then
9804: LD_VAR 0 6
9808: NOT
9809: IFFALSE 9835
// result := [ [ i , tmp ] ] else
9811: LD_ADDR_VAR 0 6
9815: PUSH
9816: LD_VAR 0 7
9820: PUSH
9821: LD_VAR 0 9
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: EMPTY
9831: LIST
9832: ST_TO_ADDR
9833: GO 9977
// begin if result [ result ] [ 2 ] <= tmp then
9835: LD_VAR 0 6
9839: PUSH
9840: LD_VAR 0 6
9844: ARRAY
9845: PUSH
9846: LD_INT 2
9848: ARRAY
9849: PUSH
9850: LD_VAR 0 9
9854: LESSEQUAL
9855: IFFALSE 9897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9857: LD_ADDR_VAR 0 6
9861: PUSH
9862: LD_VAR 0 6
9866: PPUSH
9867: LD_VAR 0 6
9871: PUSH
9872: LD_INT 1
9874: PLUS
9875: PPUSH
9876: LD_VAR 0 7
9880: PUSH
9881: LD_VAR 0 9
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 2
9894: ST_TO_ADDR
9895: GO 9977
// for j := 1 to result do
9897: LD_ADDR_VAR 0 8
9901: PUSH
9902: DOUBLE
9903: LD_INT 1
9905: DEC
9906: ST_TO_ADDR
9907: LD_VAR 0 6
9911: PUSH
9912: FOR_TO
9913: IFFALSE 9975
// begin if tmp < result [ j ] [ 2 ] then
9915: LD_VAR 0 9
9919: PUSH
9920: LD_VAR 0 6
9924: PUSH
9925: LD_VAR 0 8
9929: ARRAY
9930: PUSH
9931: LD_INT 2
9933: ARRAY
9934: LESS
9935: IFFALSE 9973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9937: LD_ADDR_VAR 0 6
9941: PUSH
9942: LD_VAR 0 6
9946: PPUSH
9947: LD_VAR 0 8
9951: PPUSH
9952: LD_VAR 0 7
9956: PUSH
9957: LD_VAR 0 9
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 2
9970: ST_TO_ADDR
// break ;
9971: GO 9975
// end ; end ;
9973: GO 9912
9975: POP
9976: POP
// end ; end ;
9977: GO 9776
9979: POP
9980: POP
// if result and not asc then
9981: LD_VAR 0 6
9985: IFFALSE 9994
9987: PUSH
9988: LD_VAR 0 4
9992: NOT
9993: AND
9994: IFFALSE 10069
// begin tmp := result ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// for i = tmp downto 1 do
10006: LD_ADDR_VAR 0 7
10010: PUSH
10011: DOUBLE
10012: LD_VAR 0 9
10016: INC
10017: ST_TO_ADDR
10018: LD_INT 1
10020: PUSH
10021: FOR_DOWNTO
10022: IFFALSE 10067
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10024: LD_ADDR_VAR 0 6
10028: PUSH
10029: LD_VAR 0 6
10033: PPUSH
10034: LD_VAR 0 9
10038: PUSH
10039: LD_VAR 0 7
10043: MINUS
10044: PUSH
10045: LD_INT 1
10047: PLUS
10048: PPUSH
10049: LD_VAR 0 9
10053: PUSH
10054: LD_VAR 0 7
10058: ARRAY
10059: PPUSH
10060: CALL_OW 1
10064: ST_TO_ADDR
10065: GO 10021
10067: POP
10068: POP
// end ; tmp := [ ] ;
10069: LD_ADDR_VAR 0 9
10073: PUSH
10074: EMPTY
10075: ST_TO_ADDR
// if mode then
10076: LD_VAR 0 5
10080: IFFALSE 10149
// begin for i = 1 to result do
10082: LD_ADDR_VAR 0 7
10086: PUSH
10087: DOUBLE
10088: LD_INT 1
10090: DEC
10091: ST_TO_ADDR
10092: LD_VAR 0 6
10096: PUSH
10097: FOR_TO
10098: IFFALSE 10137
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10100: LD_ADDR_VAR 0 9
10104: PUSH
10105: LD_VAR 0 9
10109: PPUSH
10110: LD_VAR 0 7
10114: PPUSH
10115: LD_VAR 0 6
10119: PUSH
10120: LD_VAR 0 7
10124: ARRAY
10125: PUSH
10126: LD_INT 1
10128: ARRAY
10129: PPUSH
10130: CALL_OW 1
10134: ST_TO_ADDR
10135: GO 10097
10137: POP
10138: POP
// result := tmp ;
10139: LD_ADDR_VAR 0 6
10143: PUSH
10144: LD_VAR 0 9
10148: ST_TO_ADDR
// end ; end ;
10149: LD_VAR 0 6
10153: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10154: LD_INT 0
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
10161: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10162: LD_ADDR_VAR 0 5
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: LD_INT 0
10172: PUSH
10173: LD_INT 0
10175: PUSH
10176: EMPTY
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: ST_TO_ADDR
// if not x or not y then
10184: LD_VAR 0 2
10188: NOT
10189: IFTRUE 10198
10191: PUSH
10192: LD_VAR 0 3
10196: NOT
10197: OR
10198: IFFALSE 10202
// exit ;
10200: GO 11858
// if not range then
10202: LD_VAR 0 4
10206: NOT
10207: IFFALSE 10217
// range := 10 ;
10209: LD_ADDR_VAR 0 4
10213: PUSH
10214: LD_INT 10
10216: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10217: LD_ADDR_VAR 0 8
10221: PUSH
10222: LD_INT 81
10224: PUSH
10225: LD_VAR 0 1
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 92
10236: PUSH
10237: LD_VAR 0 2
10241: PUSH
10242: LD_VAR 0 3
10246: PUSH
10247: LD_VAR 0 4
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 3
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: PPUSH
10280: CALL_OW 69
10284: ST_TO_ADDR
// if not tmp then
10285: LD_VAR 0 8
10289: NOT
10290: IFFALSE 10294
// exit ;
10292: GO 11858
// for i in tmp do
10294: LD_ADDR_VAR 0 6
10298: PUSH
10299: LD_VAR 0 8
10303: PUSH
10304: FOR_IN
10305: IFFALSE 11833
// begin points := [ 0 , 0 , 0 ] ;
10307: LD_ADDR_VAR 0 9
10311: PUSH
10312: LD_INT 0
10314: PUSH
10315: LD_INT 0
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: ST_TO_ADDR
// bpoints := 1 ;
10326: LD_ADDR_VAR 0 10
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10334: LD_VAR 0 6
10338: PPUSH
10339: CALL_OW 247
10343: PUSH
10344: LD_INT 1
10346: DOUBLE
10347: EQUAL
10348: IFTRUE 10352
10350: GO 10934
10352: POP
// begin if GetClass ( i ) = 1 then
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 257
10362: PUSH
10363: LD_INT 1
10365: EQUAL
10366: IFFALSE 10387
// points := [ 10 , 5 , 3 ] ;
10368: LD_ADDR_VAR 0 9
10372: PUSH
10373: LD_INT 10
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: LIST
10386: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10387: LD_VAR 0 6
10391: PPUSH
10392: CALL_OW 257
10396: PUSH
10397: LD_INT 2
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: LD_INT 4
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: IN
10411: IFFALSE 10432
// points := [ 3 , 2 , 1 ] ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_INT 3
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: LD_INT 1
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10432: LD_VAR 0 6
10436: PPUSH
10437: CALL_OW 257
10441: PUSH
10442: LD_INT 5
10444: EQUAL
10445: IFFALSE 10466
// points := [ 130 , 5 , 2 ] ;
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_INT 130
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 2
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10466: LD_VAR 0 6
10470: PPUSH
10471: CALL_OW 257
10475: PUSH
10476: LD_INT 8
10478: EQUAL
10479: IFFALSE 10500
// points := [ 35 , 35 , 30 ] ;
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: LD_INT 35
10488: PUSH
10489: LD_INT 35
10491: PUSH
10492: LD_INT 30
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10500: LD_VAR 0 6
10504: PPUSH
10505: CALL_OW 257
10509: PUSH
10510: LD_INT 9
10512: EQUAL
10513: IFFALSE 10534
// points := [ 20 , 55 , 40 ] ;
10515: LD_ADDR_VAR 0 9
10519: PUSH
10520: LD_INT 20
10522: PUSH
10523: LD_INT 55
10525: PUSH
10526: LD_INT 40
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10534: LD_VAR 0 6
10538: PPUSH
10539: CALL_OW 257
10543: PUSH
10544: LD_INT 12
10546: PUSH
10547: LD_INT 16
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: IN
10554: IFFALSE 10575
// points := [ 5 , 3 , 2 ] ;
10556: LD_ADDR_VAR 0 9
10560: PUSH
10561: LD_INT 5
10563: PUSH
10564: LD_INT 3
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 257
10584: PUSH
10585: LD_INT 17
10587: EQUAL
10588: IFFALSE 10609
// points := [ 100 , 50 , 75 ] ;
10590: LD_ADDR_VAR 0 9
10594: PUSH
10595: LD_INT 100
10597: PUSH
10598: LD_INT 50
10600: PUSH
10601: LD_INT 75
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10609: LD_VAR 0 6
10613: PPUSH
10614: CALL_OW 257
10618: PUSH
10619: LD_INT 15
10621: EQUAL
10622: IFFALSE 10643
// points := [ 10 , 5 , 3 ] ;
10624: LD_ADDR_VAR 0 9
10628: PUSH
10629: LD_INT 10
10631: PUSH
10632: LD_INT 5
10634: PUSH
10635: LD_INT 3
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10643: LD_VAR 0 6
10647: PPUSH
10648: CALL_OW 257
10652: PUSH
10653: LD_INT 14
10655: EQUAL
10656: IFFALSE 10677
// points := [ 10 , 0 , 0 ] ;
10658: LD_ADDR_VAR 0 9
10662: PUSH
10663: LD_INT 10
10665: PUSH
10666: LD_INT 0
10668: PUSH
10669: LD_INT 0
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10677: LD_VAR 0 6
10681: PPUSH
10682: CALL_OW 257
10686: PUSH
10687: LD_INT 11
10689: EQUAL
10690: IFFALSE 10711
// points := [ 30 , 10 , 5 ] ;
10692: LD_ADDR_VAR 0 9
10696: PUSH
10697: LD_INT 30
10699: PUSH
10700: LD_INT 10
10702: PUSH
10703: LD_INT 5
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10711: LD_VAR 0 1
10715: PPUSH
10716: LD_INT 5
10718: PPUSH
10719: CALL_OW 321
10723: PUSH
10724: LD_INT 2
10726: EQUAL
10727: IFFALSE 10744
// bpoints := bpoints * 1.8 ;
10729: LD_ADDR_VAR 0 10
10733: PUSH
10734: LD_VAR 0 10
10738: PUSH
10739: LD_REAL  1.80000000000000E+0000
10742: MUL
10743: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10744: LD_VAR 0 6
10748: PPUSH
10749: CALL_OW 257
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: LD_INT 4
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: IN
10772: IFFALSE 10792
10774: PUSH
10775: LD_VAR 0 1
10779: PPUSH
10780: LD_INT 51
10782: PPUSH
10783: CALL_OW 321
10787: PUSH
10788: LD_INT 2
10790: EQUAL
10791: AND
10792: IFFALSE 10809
// bpoints := bpoints * 1.2 ;
10794: LD_ADDR_VAR 0 10
10798: PUSH
10799: LD_VAR 0 10
10803: PUSH
10804: LD_REAL  1.20000000000000E+0000
10807: MUL
10808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10809: LD_VAR 0 6
10813: PPUSH
10814: CALL_OW 257
10818: PUSH
10819: LD_INT 5
10821: PUSH
10822: LD_INT 7
10824: PUSH
10825: LD_INT 9
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: IN
10833: IFFALSE 10853
10835: PUSH
10836: LD_VAR 0 1
10840: PPUSH
10841: LD_INT 52
10843: PPUSH
10844: CALL_OW 321
10848: PUSH
10849: LD_INT 2
10851: EQUAL
10852: AND
10853: IFFALSE 10870
// bpoints := bpoints * 1.5 ;
10855: LD_ADDR_VAR 0 10
10859: PUSH
10860: LD_VAR 0 10
10864: PUSH
10865: LD_REAL  1.50000000000000E+0000
10868: MUL
10869: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_INT 66
10877: PPUSH
10878: CALL_OW 321
10882: PUSH
10883: LD_INT 2
10885: EQUAL
10886: IFFALSE 10903
// bpoints := bpoints * 1.1 ;
10888: LD_ADDR_VAR 0 10
10892: PUSH
10893: LD_VAR 0 10
10897: PUSH
10898: LD_REAL  1.10000000000000E+0000
10901: MUL
10902: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10903: LD_ADDR_VAR 0 10
10907: PUSH
10908: LD_VAR 0 10
10912: PUSH
10913: LD_VAR 0 6
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 259
10925: PUSH
10926: LD_REAL  1.15000000000000E+0000
10929: MUL
10930: MUL
10931: ST_TO_ADDR
// end ; unit_vehicle :
10932: GO 11762
10934: LD_INT 2
10936: DOUBLE
10937: EQUAL
10938: IFTRUE 10942
10940: GO 11750
10942: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10943: LD_VAR 0 6
10947: PPUSH
10948: CALL_OW 264
10952: PUSH
10953: LD_INT 2
10955: PUSH
10956: LD_INT 42
10958: PUSH
10959: LD_INT 24
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: IN
10967: IFFALSE 10988
// points := [ 25 , 5 , 3 ] ;
10969: LD_ADDR_VAR 0 9
10973: PUSH
10974: LD_INT 25
10976: PUSH
10977: LD_INT 5
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10988: LD_VAR 0 6
10992: PPUSH
10993: CALL_OW 264
10997: PUSH
10998: LD_INT 4
11000: PUSH
11001: LD_INT 43
11003: PUSH
11004: LD_INT 25
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: IN
11012: IFFALSE 11033
// points := [ 40 , 15 , 5 ] ;
11014: LD_ADDR_VAR 0 9
11018: PUSH
11019: LD_INT 40
11021: PUSH
11022: LD_INT 15
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11033: LD_VAR 0 6
11037: PPUSH
11038: CALL_OW 264
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: LD_INT 23
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: IN
11053: IFFALSE 11074
// points := [ 7 , 25 , 8 ] ;
11055: LD_ADDR_VAR 0 9
11059: PUSH
11060: LD_INT 7
11062: PUSH
11063: LD_INT 25
11065: PUSH
11066: LD_INT 8
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11074: LD_VAR 0 6
11078: PPUSH
11079: CALL_OW 264
11083: PUSH
11084: LD_INT 5
11086: PUSH
11087: LD_INT 27
11089: PUSH
11090: LD_INT 44
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: IN
11098: IFFALSE 11119
// points := [ 14 , 50 , 16 ] ;
11100: LD_ADDR_VAR 0 9
11104: PUSH
11105: LD_INT 14
11107: PUSH
11108: LD_INT 50
11110: PUSH
11111: LD_INT 16
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11119: LD_VAR 0 6
11123: PPUSH
11124: CALL_OW 264
11128: PUSH
11129: LD_INT 6
11131: PUSH
11132: LD_INT 46
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: IN
11139: IFFALSE 11160
// points := [ 32 , 120 , 70 ] ;
11141: LD_ADDR_VAR 0 9
11145: PUSH
11146: LD_INT 32
11148: PUSH
11149: LD_INT 120
11151: PUSH
11152: LD_INT 70
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11160: LD_VAR 0 6
11164: PPUSH
11165: CALL_OW 264
11169: PUSH
11170: LD_INT 7
11172: PUSH
11173: LD_INT 28
11175: PUSH
11176: LD_INT 45
11178: PUSH
11179: LD_INT 92
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: IN
11188: IFFALSE 11209
// points := [ 35 , 20 , 45 ] ;
11190: LD_ADDR_VAR 0 9
11194: PUSH
11195: LD_INT 35
11197: PUSH
11198: LD_INT 20
11200: PUSH
11201: LD_INT 45
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11209: LD_VAR 0 6
11213: PPUSH
11214: CALL_OW 264
11218: PUSH
11219: LD_INT 47
11221: PUSH
11222: EMPTY
11223: LIST
11224: IN
11225: IFFALSE 11246
// points := [ 67 , 45 , 75 ] ;
11227: LD_ADDR_VAR 0 9
11231: PUSH
11232: LD_INT 67
11234: PUSH
11235: LD_INT 45
11237: PUSH
11238: LD_INT 75
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11246: LD_VAR 0 6
11250: PPUSH
11251: CALL_OW 264
11255: PUSH
11256: LD_INT 26
11258: PUSH
11259: EMPTY
11260: LIST
11261: IN
11262: IFFALSE 11283
// points := [ 120 , 30 , 80 ] ;
11264: LD_ADDR_VAR 0 9
11268: PUSH
11269: LD_INT 120
11271: PUSH
11272: LD_INT 30
11274: PUSH
11275: LD_INT 80
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11283: LD_VAR 0 6
11287: PPUSH
11288: CALL_OW 264
11292: PUSH
11293: LD_INT 22
11295: PUSH
11296: EMPTY
11297: LIST
11298: IN
11299: IFFALSE 11320
// points := [ 40 , 1 , 1 ] ;
11301: LD_ADDR_VAR 0 9
11305: PUSH
11306: LD_INT 40
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: LD_INT 1
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11320: LD_VAR 0 6
11324: PPUSH
11325: CALL_OW 264
11329: PUSH
11330: LD_INT 29
11332: PUSH
11333: EMPTY
11334: LIST
11335: IN
11336: IFFALSE 11357
// points := [ 70 , 200 , 400 ] ;
11338: LD_ADDR_VAR 0 9
11342: PUSH
11343: LD_INT 70
11345: PUSH
11346: LD_INT 200
11348: PUSH
11349: LD_INT 400
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11357: LD_VAR 0 6
11361: PPUSH
11362: CALL_OW 264
11366: PUSH
11367: LD_INT 14
11369: PUSH
11370: LD_INT 53
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: IN
11377: IFFALSE 11398
// points := [ 40 , 10 , 20 ] ;
11379: LD_ADDR_VAR 0 9
11383: PUSH
11384: LD_INT 40
11386: PUSH
11387: LD_INT 10
11389: PUSH
11390: LD_INT 20
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11398: LD_VAR 0 6
11402: PPUSH
11403: CALL_OW 264
11407: PUSH
11408: LD_INT 9
11410: PUSH
11411: EMPTY
11412: LIST
11413: IN
11414: IFFALSE 11435
// points := [ 5 , 70 , 20 ] ;
11416: LD_ADDR_VAR 0 9
11420: PUSH
11421: LD_INT 5
11423: PUSH
11424: LD_INT 70
11426: PUSH
11427: LD_INT 20
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11435: LD_VAR 0 6
11439: PPUSH
11440: CALL_OW 264
11444: PUSH
11445: LD_INT 10
11447: PUSH
11448: EMPTY
11449: LIST
11450: IN
11451: IFFALSE 11472
// points := [ 35 , 110 , 70 ] ;
11453: LD_ADDR_VAR 0 9
11457: PUSH
11458: LD_INT 35
11460: PUSH
11461: LD_INT 110
11463: PUSH
11464: LD_INT 70
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11472: LD_VAR 0 6
11476: PPUSH
11477: CALL_OW 265
11481: PUSH
11482: LD_INT 25
11484: EQUAL
11485: IFFALSE 11506
// points := [ 80 , 65 , 100 ] ;
11487: LD_ADDR_VAR 0 9
11491: PUSH
11492: LD_INT 80
11494: PUSH
11495: LD_INT 65
11497: PUSH
11498: LD_INT 100
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11506: LD_VAR 0 6
11510: PPUSH
11511: CALL_OW 263
11515: PUSH
11516: LD_INT 1
11518: EQUAL
11519: IFFALSE 11554
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11521: LD_ADDR_VAR 0 10
11525: PUSH
11526: LD_VAR 0 10
11530: PUSH
11531: LD_VAR 0 6
11535: PPUSH
11536: CALL_OW 311
11540: PPUSH
11541: LD_INT 3
11543: PPUSH
11544: CALL_OW 259
11548: PUSH
11549: LD_INT 4
11551: MUL
11552: MUL
11553: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11554: LD_VAR 0 6
11558: PPUSH
11559: CALL_OW 263
11563: PUSH
11564: LD_INT 2
11566: EQUAL
11567: IFFALSE 11618
// begin j := IsControledBy ( i ) ;
11569: LD_ADDR_VAR 0 7
11573: PUSH
11574: LD_VAR 0 6
11578: PPUSH
11579: CALL_OW 312
11583: ST_TO_ADDR
// if j then
11584: LD_VAR 0 7
11588: IFFALSE 11618
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11590: LD_ADDR_VAR 0 10
11594: PUSH
11595: LD_VAR 0 10
11599: PUSH
11600: LD_VAR 0 7
11604: PPUSH
11605: LD_INT 3
11607: PPUSH
11608: CALL_OW 259
11612: PUSH
11613: LD_INT 3
11615: MUL
11616: MUL
11617: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11618: LD_VAR 0 6
11622: PPUSH
11623: CALL_OW 264
11627: PUSH
11628: LD_INT 5
11630: PUSH
11631: LD_INT 6
11633: PUSH
11634: LD_INT 46
11636: PUSH
11637: LD_INT 44
11639: PUSH
11640: LD_INT 47
11642: PUSH
11643: LD_INT 45
11645: PUSH
11646: LD_INT 28
11648: PUSH
11649: LD_INT 7
11651: PUSH
11652: LD_INT 27
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: IN
11670: IFFALSE 11690
11672: PUSH
11673: LD_VAR 0 1
11677: PPUSH
11678: LD_INT 52
11680: PPUSH
11681: CALL_OW 321
11685: PUSH
11686: LD_INT 2
11688: EQUAL
11689: AND
11690: IFFALSE 11707
// bpoints := bpoints * 1.2 ;
11692: LD_ADDR_VAR 0 10
11696: PUSH
11697: LD_VAR 0 10
11701: PUSH
11702: LD_REAL  1.20000000000000E+0000
11705: MUL
11706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11707: LD_VAR 0 6
11711: PPUSH
11712: CALL_OW 264
11716: PUSH
11717: LD_INT 6
11719: PUSH
11720: LD_INT 46
11722: PUSH
11723: LD_INT 47
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: LIST
11730: IN
11731: IFFALSE 11748
// bpoints := bpoints * 1.2 ;
11733: LD_ADDR_VAR 0 10
11737: PUSH
11738: LD_VAR 0 10
11742: PUSH
11743: LD_REAL  1.20000000000000E+0000
11746: MUL
11747: ST_TO_ADDR
// end ; unit_building :
11748: GO 11762
11750: LD_INT 3
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11761
11758: POP
// ; end ;
11759: GO 11762
11761: POP
// for j = 1 to 3 do
11762: LD_ADDR_VAR 0 7
11766: PUSH
11767: DOUBLE
11768: LD_INT 1
11770: DEC
11771: ST_TO_ADDR
11772: LD_INT 3
11774: PUSH
11775: FOR_TO
11776: IFFALSE 11829
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11778: LD_ADDR_VAR 0 5
11782: PUSH
11783: LD_VAR 0 5
11787: PPUSH
11788: LD_VAR 0 7
11792: PPUSH
11793: LD_VAR 0 5
11797: PUSH
11798: LD_VAR 0 7
11802: ARRAY
11803: PUSH
11804: LD_VAR 0 9
11808: PUSH
11809: LD_VAR 0 7
11813: ARRAY
11814: PUSH
11815: LD_VAR 0 10
11819: MUL
11820: PLUS
11821: PPUSH
11822: CALL_OW 1
11826: ST_TO_ADDR
11827: GO 11775
11829: POP
11830: POP
// end ;
11831: GO 10304
11833: POP
11834: POP
// result := Replace ( result , 4 , tmp ) ;
11835: LD_ADDR_VAR 0 5
11839: PUSH
11840: LD_VAR 0 5
11844: PPUSH
11845: LD_INT 4
11847: PPUSH
11848: LD_VAR 0 8
11852: PPUSH
11853: CALL_OW 1
11857: ST_TO_ADDR
// end ;
11858: LD_VAR 0 5
11862: RET
// export function DangerAtRange ( unit , range ) ; begin
11863: LD_INT 0
11865: PPUSH
// if not unit then
11866: LD_VAR 0 1
11870: NOT
11871: IFFALSE 11875
// exit ;
11873: GO 11920
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11875: LD_ADDR_VAR 0 3
11879: PUSH
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 255
11889: PPUSH
11890: LD_VAR 0 1
11894: PPUSH
11895: CALL_OW 250
11899: PPUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 251
11909: PPUSH
11910: LD_VAR 0 2
11914: PPUSH
11915: CALL 10154 0 4
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 3
11924: RET
// export function DangerInArea ( side , area ) ; begin
11925: LD_INT 0
11927: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: LD_VAR 0 2
11937: PPUSH
11938: LD_INT 81
11940: PUSH
11941: LD_VAR 0 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 70
11954: ST_TO_ADDR
// end ;
11955: LD_VAR 0 3
11959: RET
// export function IsExtension ( b ) ; begin
11960: LD_INT 0
11962: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11963: LD_ADDR_VAR 0 2
11967: PUSH
11968: LD_VAR 0 1
11972: PUSH
11973: LD_INT 23
11975: PUSH
11976: LD_INT 20
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_INT 17
11984: PUSH
11985: LD_INT 24
11987: PUSH
11988: LD_INT 21
11990: PUSH
11991: LD_INT 19
11993: PUSH
11994: LD_INT 16
11996: PUSH
11997: LD_INT 25
11999: PUSH
12000: LD_INT 18
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: IN
12015: ST_TO_ADDR
// end ;
12016: LD_VAR 0 2
12020: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12021: LD_INT 0
12023: PPUSH
12024: PPUSH
12025: PPUSH
// result := [ ] ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: EMPTY
12032: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12033: LD_ADDR_VAR 0 5
12037: PUSH
12038: LD_VAR 0 2
12042: PPUSH
12043: LD_INT 21
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 70
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 5
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12131
// if checkLink then
12067: LD_VAR 0 3
12071: IFFALSE 12121
// begin for i in tmp do
12073: LD_ADDR_VAR 0 6
12077: PUSH
12078: LD_VAR 0 5
12082: PUSH
12083: FOR_IN
12084: IFFALSE 12119
// if GetBase ( i ) <> base then
12086: LD_VAR 0 6
12090: PPUSH
12091: CALL_OW 274
12095: PUSH
12096: LD_VAR 0 1
12100: NONEQUAL
12101: IFFALSE 12117
// ComLinkToBase ( base , i ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_VAR 0 6
12112: PPUSH
12113: CALL_OW 169
12117: GO 12083
12119: POP
12120: POP
// end ; result := tmp ;
12121: LD_ADDR_VAR 0 4
12125: PUSH
12126: LD_VAR 0 5
12130: ST_TO_ADDR
// end ;
12131: LD_VAR 0 4
12135: RET
// export function ComComplete ( units , b ) ; var i ; begin
12136: LD_INT 0
12138: PPUSH
12139: PPUSH
// if not units then
12140: LD_VAR 0 1
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12239
// for i in units do
12149: LD_ADDR_VAR 0 4
12153: PUSH
12154: LD_VAR 0 1
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12237
// if BuildingStatus ( b ) = bs_build then
12162: LD_VAR 0 2
12166: PPUSH
12167: CALL_OW 461
12171: PUSH
12172: LD_INT 1
12174: EQUAL
12175: IFFALSE 12235
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12177: LD_VAR 0 4
12181: PPUSH
12182: LD_STRING h
12184: PUSH
12185: LD_VAR 0 2
12189: PPUSH
12190: CALL_OW 250
12194: PUSH
12195: LD_VAR 0 2
12199: PPUSH
12200: CALL_OW 251
12204: PUSH
12205: LD_VAR 0 2
12209: PUSH
12210: LD_INT 0
12212: PUSH
12213: LD_INT 0
12215: PUSH
12216: LD_INT 0
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: PPUSH
12231: CALL_OW 446
12235: GO 12159
12237: POP
12238: POP
// end ;
12239: LD_VAR 0 3
12243: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12244: LD_INT 0
12246: PPUSH
12247: PPUSH
12248: PPUSH
12249: PPUSH
12250: PPUSH
12251: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12252: LD_VAR 0 1
12256: NOT
12257: IFTRUE 12274
12259: PUSH
12260: LD_VAR 0 1
12264: PPUSH
12265: CALL_OW 263
12269: PUSH
12270: LD_INT 2
12272: NONEQUAL
12273: OR
12274: IFFALSE 12278
// exit ;
12276: GO 12594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12278: LD_ADDR_VAR 0 6
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_VAR 0 1
12290: PPUSH
12291: CALL_OW 255
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 30
12305: PUSH
12306: LD_INT 36
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 34
12315: PUSH
12316: LD_INT 31
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 69
12336: ST_TO_ADDR
// if not tmp then
12337: LD_VAR 0 6
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12594
// result := [ ] ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: EMPTY
12352: ST_TO_ADDR
// for i in tmp do
12353: LD_ADDR_VAR 0 3
12357: PUSH
12358: LD_VAR 0 6
12362: PUSH
12363: FOR_IN
12364: IFFALSE 12435
// begin t := UnitsInside ( i ) ;
12366: LD_ADDR_VAR 0 4
12370: PUSH
12371: LD_VAR 0 3
12375: PPUSH
12376: CALL_OW 313
12380: ST_TO_ADDR
// if t then
12381: LD_VAR 0 4
12385: IFFALSE 12433
// for j in t do
12387: LD_ADDR_VAR 0 7
12391: PUSH
12392: LD_VAR 0 4
12396: PUSH
12397: FOR_IN
12398: IFFALSE 12431
// result := Replace ( result , result + 1 , j ) ;
12400: LD_ADDR_VAR 0 2
12404: PUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 1
12417: PLUS
12418: PPUSH
12419: LD_VAR 0 7
12423: PPUSH
12424: CALL_OW 1
12428: ST_TO_ADDR
12429: GO 12397
12431: POP
12432: POP
// end ;
12433: GO 12363
12435: POP
12436: POP
// if not result then
12437: LD_VAR 0 2
12441: NOT
12442: IFFALSE 12446
// exit ;
12444: GO 12594
// mech := result [ 1 ] ;
12446: LD_ADDR_VAR 0 5
12450: PUSH
12451: LD_VAR 0 2
12455: PUSH
12456: LD_INT 1
12458: ARRAY
12459: ST_TO_ADDR
// if result > 1 then
12460: LD_VAR 0 2
12464: PUSH
12465: LD_INT 1
12467: GREATER
12468: IFFALSE 12580
// begin for i = 2 to result do
12470: LD_ADDR_VAR 0 3
12474: PUSH
12475: DOUBLE
12476: LD_INT 2
12478: DEC
12479: ST_TO_ADDR
12480: LD_VAR 0 2
12484: PUSH
12485: FOR_TO
12486: IFFALSE 12578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12488: LD_ADDR_VAR 0 4
12492: PUSH
12493: LD_VAR 0 2
12497: PUSH
12498: LD_VAR 0 3
12502: ARRAY
12503: PPUSH
12504: LD_INT 3
12506: PPUSH
12507: CALL_OW 259
12511: PUSH
12512: LD_VAR 0 2
12516: PUSH
12517: LD_VAR 0 3
12521: ARRAY
12522: PPUSH
12523: CALL_OW 432
12527: MINUS
12528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12529: LD_VAR 0 4
12533: PUSH
12534: LD_VAR 0 5
12538: PPUSH
12539: LD_INT 3
12541: PPUSH
12542: CALL_OW 259
12546: PUSH
12547: LD_VAR 0 5
12551: PPUSH
12552: CALL_OW 432
12556: MINUS
12557: GREATEREQUAL
12558: IFFALSE 12576
// mech := result [ i ] ;
12560: LD_ADDR_VAR 0 5
12564: PUSH
12565: LD_VAR 0 2
12569: PUSH
12570: LD_VAR 0 3
12574: ARRAY
12575: ST_TO_ADDR
// end ;
12576: GO 12485
12578: POP
12579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12580: LD_VAR 0 1
12584: PPUSH
12585: LD_VAR 0 5
12589: PPUSH
12590: CALL_OW 135
// end ;
12594: LD_VAR 0 2
12598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12599: LD_INT 0
12601: PPUSH
12602: PPUSH
12603: PPUSH
12604: PPUSH
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
// result := [ ] ;
12614: LD_ADDR_VAR 0 7
12618: PUSH
12619: EMPTY
12620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 266
12630: PUSH
12631: LD_INT 0
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: IN
12641: NOT
12642: IFFALSE 12646
// exit ;
12644: GO 14286
// if name then
12646: LD_VAR 0 3
12650: IFFALSE 12666
// SetBName ( base_dep , name ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_VAR 0 3
12661: PPUSH
12662: CALL_OW 500
// base := GetBase ( base_dep ) ;
12666: LD_ADDR_VAR 0 15
12670: PUSH
12671: LD_VAR 0 1
12675: PPUSH
12676: CALL_OW 274
12680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12681: LD_ADDR_VAR 0 16
12685: PUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 255
12695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12696: LD_ADDR_VAR 0 17
12700: PUSH
12701: LD_VAR 0 1
12705: PPUSH
12706: CALL_OW 248
12710: ST_TO_ADDR
// if sources then
12711: LD_VAR 0 5
12715: IFFALSE 12762
// for i = 1 to 3 do
12717: LD_ADDR_VAR 0 8
12721: PUSH
12722: DOUBLE
12723: LD_INT 1
12725: DEC
12726: ST_TO_ADDR
12727: LD_INT 3
12729: PUSH
12730: FOR_TO
12731: IFFALSE 12760
// AddResourceType ( base , i , sources [ i ] ) ;
12733: LD_VAR 0 15
12737: PPUSH
12738: LD_VAR 0 8
12742: PPUSH
12743: LD_VAR 0 5
12747: PUSH
12748: LD_VAR 0 8
12752: ARRAY
12753: PPUSH
12754: CALL_OW 276
12758: GO 12730
12760: POP
12761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12762: LD_ADDR_VAR 0 18
12766: PUSH
12767: LD_VAR 0 15
12771: PPUSH
12772: LD_VAR 0 2
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL 12021 0 3
12784: ST_TO_ADDR
// InitHc ;
12785: CALL_OW 19
// InitUc ;
12789: CALL_OW 18
// uc_side := side ;
12793: LD_ADDR_OWVAR 20
12797: PUSH
12798: LD_VAR 0 16
12802: ST_TO_ADDR
// uc_nation := nation ;
12803: LD_ADDR_OWVAR 21
12807: PUSH
12808: LD_VAR 0 17
12812: ST_TO_ADDR
// if buildings then
12813: LD_VAR 0 18
12817: IFFALSE 14145
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12819: LD_ADDR_VAR 0 19
12823: PUSH
12824: LD_VAR 0 18
12828: PPUSH
12829: LD_INT 2
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_INT 29
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 30
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 72
12861: ST_TO_ADDR
// if tmp then
12862: LD_VAR 0 19
12866: IFFALSE 12914
// for i in tmp do
12868: LD_ADDR_VAR 0 8
12872: PUSH
12873: LD_VAR 0 19
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12881: LD_VAR 0 8
12885: PPUSH
12886: CALL_OW 250
12890: PPUSH
12891: LD_VAR 0 8
12895: PPUSH
12896: CALL_OW 251
12900: PPUSH
12901: LD_VAR 0 16
12905: PPUSH
12906: CALL_OW 441
12910: GO 12878
12912: POP
12913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12914: LD_VAR 0 18
12918: PPUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 30
12924: PUSH
12925: LD_INT 32
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 33
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 72
12951: IFFALSE 13039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12953: LD_ADDR_VAR 0 8
12957: PUSH
12958: LD_VAR 0 18
12962: PPUSH
12963: LD_INT 2
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 32
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 30
12978: PUSH
12979: LD_INT 33
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 72
12995: PUSH
12996: FOR_IN
12997: IFFALSE 13037
// begin if not GetBWeapon ( i ) then
12999: LD_VAR 0 8
13003: PPUSH
13004: CALL_OW 269
13008: NOT
13009: IFFALSE 13035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13011: LD_VAR 0 8
13015: PPUSH
13016: LD_VAR 0 8
13020: PPUSH
13021: LD_VAR 0 2
13025: PPUSH
13026: CALL 14291 0 2
13030: PPUSH
13031: CALL_OW 431
// end ;
13035: GO 12996
13037: POP
13038: POP
// end ; for i = 1 to personel do
13039: LD_ADDR_VAR 0 8
13043: PUSH
13044: DOUBLE
13045: LD_INT 1
13047: DEC
13048: ST_TO_ADDR
13049: LD_VAR 0 6
13053: PUSH
13054: FOR_TO
13055: IFFALSE 14125
// begin if i > 4 then
13057: LD_VAR 0 8
13061: PUSH
13062: LD_INT 4
13064: GREATER
13065: IFFALSE 13069
// break ;
13067: GO 14125
// case i of 1 :
13069: LD_VAR 0 8
13073: PUSH
13074: LD_INT 1
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13162
13082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13083: LD_ADDR_VAR 0 12
13087: PUSH
13088: LD_VAR 0 18
13092: PPUSH
13093: LD_INT 22
13095: PUSH
13096: LD_VAR 0 16
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 58
13107: PUSH
13108: EMPTY
13109: LIST
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 30
13116: PUSH
13117: LD_INT 32
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 30
13126: PUSH
13127: LD_INT 4
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 30
13136: PUSH
13137: LD_INT 5
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 72
13159: ST_TO_ADDR
13160: GO 13384
13162: LD_INT 2
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13232
13170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13171: LD_ADDR_VAR 0 12
13175: PUSH
13176: LD_VAR 0 18
13180: PPUSH
13181: LD_INT 22
13183: PUSH
13184: LD_VAR 0 16
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: LD_INT 30
13198: PUSH
13199: LD_INT 0
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 30
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 72
13229: ST_TO_ADDR
13230: GO 13384
13232: LD_INT 3
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13302
13240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13241: LD_ADDR_VAR 0 12
13245: PUSH
13246: LD_VAR 0 18
13250: PPUSH
13251: LD_INT 22
13253: PUSH
13254: LD_VAR 0 16
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 30
13278: PUSH
13279: LD_INT 3
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PPUSH
13295: CALL_OW 72
13299: ST_TO_ADDR
13300: GO 13384
13302: LD_INT 4
13304: DOUBLE
13305: EQUAL
13306: IFTRUE 13310
13308: GO 13383
13310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13311: LD_ADDR_VAR 0 12
13315: PUSH
13316: LD_VAR 0 18
13320: PPUSH
13321: LD_INT 22
13323: PUSH
13324: LD_VAR 0 16
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: LD_INT 30
13338: PUSH
13339: LD_INT 6
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 30
13348: PUSH
13349: LD_INT 7
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 8
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: ST_TO_ADDR
13381: GO 13384
13383: POP
// if i = 1 then
13384: LD_VAR 0 8
13388: PUSH
13389: LD_INT 1
13391: EQUAL
13392: IFFALSE 13503
// begin tmp := [ ] ;
13394: LD_ADDR_VAR 0 19
13398: PUSH
13399: EMPTY
13400: ST_TO_ADDR
// for j in f do
13401: LD_ADDR_VAR 0 9
13405: PUSH
13406: LD_VAR 0 12
13410: PUSH
13411: FOR_IN
13412: IFFALSE 13485
// if GetBType ( j ) = b_bunker then
13414: LD_VAR 0 9
13418: PPUSH
13419: CALL_OW 266
13423: PUSH
13424: LD_INT 32
13426: EQUAL
13427: IFFALSE 13454
// tmp := Insert ( tmp , 1 , j ) else
13429: LD_ADDR_VAR 0 19
13433: PUSH
13434: LD_VAR 0 19
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: LD_VAR 0 9
13446: PPUSH
13447: CALL_OW 2
13451: ST_TO_ADDR
13452: GO 13483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13454: LD_ADDR_VAR 0 19
13458: PUSH
13459: LD_VAR 0 19
13463: PPUSH
13464: LD_VAR 0 19
13468: PUSH
13469: LD_INT 1
13471: PLUS
13472: PPUSH
13473: LD_VAR 0 9
13477: PPUSH
13478: CALL_OW 2
13482: ST_TO_ADDR
13483: GO 13411
13485: POP
13486: POP
// if tmp then
13487: LD_VAR 0 19
13491: IFFALSE 13503
// f := tmp ;
13493: LD_ADDR_VAR 0 12
13497: PUSH
13498: LD_VAR 0 19
13502: ST_TO_ADDR
// end ; x := personel [ i ] ;
13503: LD_ADDR_VAR 0 13
13507: PUSH
13508: LD_VAR 0 6
13512: PUSH
13513: LD_VAR 0 8
13517: ARRAY
13518: ST_TO_ADDR
// if x = - 1 then
13519: LD_VAR 0 13
13523: PUSH
13524: LD_INT 1
13526: NEG
13527: EQUAL
13528: IFFALSE 13739
// begin for j in f do
13530: LD_ADDR_VAR 0 9
13534: PUSH
13535: LD_VAR 0 12
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13735
// repeat InitHc ;
13543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13547: LD_VAR 0 9
13551: PPUSH
13552: CALL_OW 266
13556: PUSH
13557: LD_INT 5
13559: EQUAL
13560: IFFALSE 13630
// begin if UnitsInside ( j ) < 3 then
13562: LD_VAR 0 9
13566: PPUSH
13567: CALL_OW 313
13571: PUSH
13572: LD_INT 3
13574: LESS
13575: IFFALSE 13611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13577: LD_INT 0
13579: PPUSH
13580: LD_INT 5
13582: PUSH
13583: LD_INT 8
13585: PUSH
13586: LD_INT 9
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_VAR 0 17
13598: ARRAY
13599: PPUSH
13600: LD_VAR 0 4
13604: PPUSH
13605: CALL_OW 380
13609: GO 13628
// PrepareHuman ( false , i , skill ) ;
13611: LD_INT 0
13613: PPUSH
13614: LD_VAR 0 8
13618: PPUSH
13619: LD_VAR 0 4
13623: PPUSH
13624: CALL_OW 380
// end else
13628: GO 13647
// PrepareHuman ( false , i , skill ) ;
13630: LD_INT 0
13632: PPUSH
13633: LD_VAR 0 8
13637: PPUSH
13638: LD_VAR 0 4
13642: PPUSH
13643: CALL_OW 380
// un := CreateHuman ;
13647: LD_ADDR_VAR 0 14
13651: PUSH
13652: CALL_OW 44
13656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13657: LD_ADDR_VAR 0 7
13661: PUSH
13662: LD_VAR 0 7
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: LD_VAR 0 14
13674: PPUSH
13675: CALL_OW 2
13679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13680: LD_VAR 0 14
13684: PPUSH
13685: LD_VAR 0 9
13689: PPUSH
13690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13694: LD_VAR 0 9
13698: PPUSH
13699: CALL_OW 313
13703: PUSH
13704: LD_INT 6
13706: EQUAL
13707: IFTRUE 13731
13709: PUSH
13710: LD_VAR 0 9
13714: PPUSH
13715: CALL_OW 266
13719: PUSH
13720: LD_INT 32
13722: PUSH
13723: LD_INT 31
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: IN
13730: OR
13731: IFFALSE 13543
13733: GO 13540
13735: POP
13736: POP
// end else
13737: GO 14123
// for j = 1 to x do
13739: LD_ADDR_VAR 0 9
13743: PUSH
13744: DOUBLE
13745: LD_INT 1
13747: DEC
13748: ST_TO_ADDR
13749: LD_VAR 0 13
13753: PUSH
13754: FOR_TO
13755: IFFALSE 14121
// begin InitHc ;
13757: CALL_OW 19
// if not f then
13761: LD_VAR 0 12
13765: NOT
13766: IFFALSE 13855
// begin PrepareHuman ( false , i , skill ) ;
13768: LD_INT 0
13770: PPUSH
13771: LD_VAR 0 8
13775: PPUSH
13776: LD_VAR 0 4
13780: PPUSH
13781: CALL_OW 380
// un := CreateHuman ;
13785: LD_ADDR_VAR 0 14
13789: PUSH
13790: CALL_OW 44
13794: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13795: LD_ADDR_VAR 0 7
13799: PUSH
13800: LD_VAR 0 7
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: LD_VAR 0 14
13812: PPUSH
13813: CALL_OW 2
13817: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13818: LD_VAR 0 14
13822: PPUSH
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 250
13832: PPUSH
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 251
13842: PPUSH
13843: LD_INT 10
13845: PPUSH
13846: LD_INT 0
13848: PPUSH
13849: CALL_OW 50
// continue ;
13853: GO 13754
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 1
13862: ARRAY
13863: PPUSH
13864: CALL_OW 313
13868: IFFALSE 13896
13870: PUSH
13871: LD_VAR 0 12
13875: PUSH
13876: LD_INT 1
13878: ARRAY
13879: PPUSH
13880: CALL_OW 266
13884: PUSH
13885: LD_INT 32
13887: PUSH
13888: LD_INT 31
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: IN
13895: AND
13896: IFTRUE 13917
13898: PUSH
13899: LD_VAR 0 12
13903: PUSH
13904: LD_INT 1
13906: ARRAY
13907: PPUSH
13908: CALL_OW 313
13912: PUSH
13913: LD_INT 6
13915: EQUAL
13916: OR
13917: IFFALSE 13937
// f := Delete ( f , 1 ) ;
13919: LD_ADDR_VAR 0 12
13923: PUSH
13924: LD_VAR 0 12
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 3
13936: ST_TO_ADDR
// if not f then
13937: LD_VAR 0 12
13941: NOT
13942: IFFALSE 13960
// begin x := x + 2 ;
13944: LD_ADDR_VAR 0 13
13948: PUSH
13949: LD_VAR 0 13
13953: PUSH
13954: LD_INT 2
13956: PLUS
13957: ST_TO_ADDR
// continue ;
13958: GO 13754
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13960: LD_VAR 0 12
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 266
13973: PUSH
13974: LD_INT 5
13976: EQUAL
13977: IFFALSE 14051
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13979: LD_VAR 0 12
13983: PUSH
13984: LD_INT 1
13986: ARRAY
13987: PPUSH
13988: CALL_OW 313
13992: PUSH
13993: LD_INT 3
13995: LESS
13996: IFFALSE 14032
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 5
14003: PUSH
14004: LD_INT 8
14006: PUSH
14007: LD_INT 9
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: LD_VAR 0 17
14019: ARRAY
14020: PPUSH
14021: LD_VAR 0 4
14025: PPUSH
14026: CALL_OW 380
14030: GO 14049
// PrepareHuman ( false , i , skill ) ;
14032: LD_INT 0
14034: PPUSH
14035: LD_VAR 0 8
14039: PPUSH
14040: LD_VAR 0 4
14044: PPUSH
14045: CALL_OW 380
// end else
14049: GO 14068
// PrepareHuman ( false , i , skill ) ;
14051: LD_INT 0
14053: PPUSH
14054: LD_VAR 0 8
14058: PPUSH
14059: LD_VAR 0 4
14063: PPUSH
14064: CALL_OW 380
// un := CreateHuman ;
14068: LD_ADDR_VAR 0 14
14072: PUSH
14073: CALL_OW 44
14077: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14078: LD_ADDR_VAR 0 7
14082: PUSH
14083: LD_VAR 0 7
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: LD_VAR 0 14
14095: PPUSH
14096: CALL_OW 2
14100: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14101: LD_VAR 0 14
14105: PPUSH
14106: LD_VAR 0 12
14110: PUSH
14111: LD_INT 1
14113: ARRAY
14114: PPUSH
14115: CALL_OW 52
// end ;
14119: GO 13754
14121: POP
14122: POP
// end ;
14123: GO 13054
14125: POP
14126: POP
// result := result ^ buildings ;
14127: LD_ADDR_VAR 0 7
14131: PUSH
14132: LD_VAR 0 7
14136: PUSH
14137: LD_VAR 0 18
14141: ADD
14142: ST_TO_ADDR
// end else
14143: GO 14286
// begin for i = 1 to personel do
14145: LD_ADDR_VAR 0 8
14149: PUSH
14150: DOUBLE
14151: LD_INT 1
14153: DEC
14154: ST_TO_ADDR
14155: LD_VAR 0 6
14159: PUSH
14160: FOR_TO
14161: IFFALSE 14284
// begin if i > 4 then
14163: LD_VAR 0 8
14167: PUSH
14168: LD_INT 4
14170: GREATER
14171: IFFALSE 14175
// break ;
14173: GO 14284
// x := personel [ i ] ;
14175: LD_ADDR_VAR 0 13
14179: PUSH
14180: LD_VAR 0 6
14184: PUSH
14185: LD_VAR 0 8
14189: ARRAY
14190: ST_TO_ADDR
// if x = - 1 then
14191: LD_VAR 0 13
14195: PUSH
14196: LD_INT 1
14198: NEG
14199: EQUAL
14200: IFFALSE 14204
// continue ;
14202: GO 14160
// PrepareHuman ( false , i , skill ) ;
14204: LD_INT 0
14206: PPUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_VAR 0 4
14216: PPUSH
14217: CALL_OW 380
// un := CreateHuman ;
14221: LD_ADDR_VAR 0 14
14225: PUSH
14226: CALL_OW 44
14230: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14231: LD_VAR 0 14
14235: PPUSH
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 250
14245: PPUSH
14246: LD_VAR 0 1
14250: PPUSH
14251: CALL_OW 251
14255: PPUSH
14256: LD_INT 10
14258: PPUSH
14259: LD_INT 0
14261: PPUSH
14262: CALL_OW 50
// result := result ^ un ;
14266: LD_ADDR_VAR 0 7
14270: PUSH
14271: LD_VAR 0 7
14275: PUSH
14276: LD_VAR 0 14
14280: ADD
14281: ST_TO_ADDR
// end ;
14282: GO 14160
14284: POP
14285: POP
// end ; end ;
14286: LD_VAR 0 7
14290: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14291: LD_INT 0
14293: PPUSH
14294: PPUSH
14295: PPUSH
14296: PPUSH
14297: PPUSH
14298: PPUSH
14299: PPUSH
14300: PPUSH
14301: PPUSH
14302: PPUSH
14303: PPUSH
14304: PPUSH
14305: PPUSH
14306: PPUSH
14307: PPUSH
14308: PPUSH
// result := false ;
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14317: LD_VAR 0 1
14321: NOT
14322: IFTRUE 14347
14324: PUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 266
14334: PUSH
14335: LD_INT 32
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: IN
14345: NOT
14346: OR
14347: IFFALSE 14351
// exit ;
14349: GO 15486
// nat := GetNation ( tower ) ;
14351: LD_ADDR_VAR 0 12
14355: PUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 248
14365: ST_TO_ADDR
// side := GetSide ( tower ) ;
14366: LD_ADDR_VAR 0 16
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 255
14380: ST_TO_ADDR
// x := GetX ( tower ) ;
14381: LD_ADDR_VAR 0 10
14385: PUSH
14386: LD_VAR 0 1
14390: PPUSH
14391: CALL_OW 250
14395: ST_TO_ADDR
// y := GetY ( tower ) ;
14396: LD_ADDR_VAR 0 11
14400: PUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 251
14410: ST_TO_ADDR
// if not x or not y then
14411: LD_VAR 0 10
14415: NOT
14416: IFTRUE 14425
14418: PUSH
14419: LD_VAR 0 11
14423: NOT
14424: OR
14425: IFFALSE 14429
// exit ;
14427: GO 15486
// weapon := 0 ;
14429: LD_ADDR_VAR 0 18
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// fac_list := [ ] ;
14437: LD_ADDR_VAR 0 17
14441: PUSH
14442: EMPTY
14443: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14444: LD_ADDR_VAR 0 6
14448: PUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 274
14458: PPUSH
14459: LD_VAR 0 2
14463: PPUSH
14464: LD_INT 0
14466: PPUSH
14467: CALL 12021 0 3
14471: PPUSH
14472: LD_INT 30
14474: PUSH
14475: LD_INT 3
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 72
14486: ST_TO_ADDR
// if not factories then
14487: LD_VAR 0 6
14491: NOT
14492: IFFALSE 14496
// exit ;
14494: GO 15486
// for i in factories do
14496: LD_ADDR_VAR 0 8
14500: PUSH
14501: LD_VAR 0 6
14505: PUSH
14506: FOR_IN
14507: IFFALSE 14532
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14509: LD_ADDR_VAR 0 17
14513: PUSH
14514: LD_VAR 0 17
14518: PUSH
14519: LD_VAR 0 8
14523: PPUSH
14524: CALL_OW 478
14528: UNION
14529: ST_TO_ADDR
14530: GO 14506
14532: POP
14533: POP
// if not fac_list then
14534: LD_VAR 0 17
14538: NOT
14539: IFFALSE 14543
// exit ;
14541: GO 15486
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14543: LD_ADDR_VAR 0 5
14547: PUSH
14548: LD_INT 4
14550: PUSH
14551: LD_INT 5
14553: PUSH
14554: LD_INT 9
14556: PUSH
14557: LD_INT 10
14559: PUSH
14560: LD_INT 6
14562: PUSH
14563: LD_INT 7
14565: PUSH
14566: LD_INT 11
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 27
14580: PUSH
14581: LD_INT 28
14583: PUSH
14584: LD_INT 26
14586: PUSH
14587: LD_INT 30
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 43
14598: PUSH
14599: LD_INT 44
14601: PUSH
14602: LD_INT 46
14604: PUSH
14605: LD_INT 45
14607: PUSH
14608: LD_INT 47
14610: PUSH
14611: LD_INT 49
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: LIST
14626: PUSH
14627: LD_VAR 0 12
14631: ARRAY
14632: ST_TO_ADDR
// list := list isect fac_list ;
14633: LD_ADDR_VAR 0 5
14637: PUSH
14638: LD_VAR 0 5
14642: PUSH
14643: LD_VAR 0 17
14647: ISECT
14648: ST_TO_ADDR
// if not list then
14649: LD_VAR 0 5
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 15486
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14658: LD_VAR 0 12
14662: PUSH
14663: LD_INT 3
14665: EQUAL
14666: IFFALSE 14678
14668: PUSH
14669: LD_INT 49
14671: PUSH
14672: LD_VAR 0 5
14676: IN
14677: AND
14678: IFFALSE 14698
14680: PUSH
14681: LD_INT 31
14683: PPUSH
14684: LD_VAR 0 16
14688: PPUSH
14689: CALL_OW 321
14693: PUSH
14694: LD_INT 2
14696: EQUAL
14697: AND
14698: IFFALSE 14758
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14700: LD_INT 22
14702: PUSH
14703: LD_VAR 0 16
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 35
14714: PUSH
14715: LD_INT 49
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 91
14724: PUSH
14725: LD_VAR 0 1
14729: PUSH
14730: LD_INT 10
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: NOT
14748: IFFALSE 14758
// weapon := ru_time_lapser ;
14750: LD_ADDR_VAR 0 18
14754: PUSH
14755: LD_INT 49
14757: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14758: LD_VAR 0 12
14762: PUSH
14763: LD_INT 1
14765: PUSH
14766: LD_INT 2
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: IN
14773: IFFALSE 14797
14775: PUSH
14776: LD_INT 11
14778: PUSH
14779: LD_VAR 0 5
14783: IN
14784: IFTRUE 14796
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_VAR 0 5
14794: IN
14795: OR
14796: AND
14797: IFFALSE 14817
14799: PUSH
14800: LD_INT 6
14802: PPUSH
14803: LD_VAR 0 16
14807: PPUSH
14808: CALL_OW 321
14812: PUSH
14813: LD_INT 2
14815: EQUAL
14816: AND
14817: IFFALSE 14984
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14819: LD_INT 22
14821: PUSH
14822: LD_VAR 0 16
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 35
14836: PUSH
14837: LD_INT 11
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 35
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 91
14861: PUSH
14862: LD_VAR 0 1
14866: PUSH
14867: LD_INT 18
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: NOT
14885: IFFALSE 14961
14887: PUSH
14888: LD_INT 22
14890: PUSH
14891: LD_VAR 0 16
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 2
14902: PUSH
14903: LD_INT 30
14905: PUSH
14906: LD_INT 32
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 30
14915: PUSH
14916: LD_INT 33
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 91
14930: PUSH
14931: LD_VAR 0 1
14935: PUSH
14936: LD_INT 12
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: PPUSH
14952: CALL_OW 69
14956: PUSH
14957: LD_INT 2
14959: GREATER
14960: AND
14961: IFFALSE 14984
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14963: LD_ADDR_VAR 0 18
14967: PUSH
14968: LD_INT 11
14970: PUSH
14971: LD_INT 30
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_VAR 0 12
14982: ARRAY
14983: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14984: LD_VAR 0 18
14988: NOT
14989: IFFALSE 15009
14991: PUSH
14992: LD_INT 40
14994: PPUSH
14995: LD_VAR 0 16
14999: PPUSH
15000: CALL_OW 321
15004: PUSH
15005: LD_INT 2
15007: EQUAL
15008: AND
15009: IFFALSE 15045
15011: PUSH
15012: LD_INT 7
15014: PUSH
15015: LD_VAR 0 5
15019: IN
15020: IFTRUE 15032
15022: PUSH
15023: LD_INT 28
15025: PUSH
15026: LD_VAR 0 5
15030: IN
15031: OR
15032: IFTRUE 15044
15034: PUSH
15035: LD_INT 45
15037: PUSH
15038: LD_VAR 0 5
15042: IN
15043: OR
15044: AND
15045: IFFALSE 15299
// begin hex := GetHexInfo ( x , y ) ;
15047: LD_ADDR_VAR 0 4
15051: PUSH
15052: LD_VAR 0 10
15056: PPUSH
15057: LD_VAR 0 11
15061: PPUSH
15062: CALL_OW 546
15066: ST_TO_ADDR
// if hex [ 1 ] then
15067: LD_VAR 0 4
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: IFFALSE 15079
// exit ;
15077: GO 15486
// height := hex [ 2 ] ;
15079: LD_ADDR_VAR 0 15
15083: PUSH
15084: LD_VAR 0 4
15088: PUSH
15089: LD_INT 2
15091: ARRAY
15092: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15093: LD_ADDR_VAR 0 14
15097: PUSH
15098: LD_INT 0
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: LD_INT 3
15106: PUSH
15107: LD_INT 5
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: ST_TO_ADDR
// for i in tmp do
15116: LD_ADDR_VAR 0 8
15120: PUSH
15121: LD_VAR 0 14
15125: PUSH
15126: FOR_IN
15127: IFFALSE 15297
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15129: LD_ADDR_VAR 0 9
15133: PUSH
15134: LD_VAR 0 10
15138: PPUSH
15139: LD_VAR 0 8
15143: PPUSH
15144: LD_INT 5
15146: PPUSH
15147: CALL_OW 272
15151: PUSH
15152: LD_VAR 0 11
15156: PPUSH
15157: LD_VAR 0 8
15161: PPUSH
15162: LD_INT 5
15164: PPUSH
15165: CALL_OW 273
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15174: LD_VAR 0 9
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: PPUSH
15183: LD_VAR 0 9
15187: PUSH
15188: LD_INT 2
15190: ARRAY
15191: PPUSH
15192: CALL_OW 488
15196: IFFALSE 15295
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15198: LD_ADDR_VAR 0 4
15202: PUSH
15203: LD_VAR 0 9
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: PPUSH
15212: LD_VAR 0 9
15216: PUSH
15217: LD_INT 2
15219: ARRAY
15220: PPUSH
15221: CALL_OW 546
15225: ST_TO_ADDR
// if hex [ 1 ] then
15226: LD_VAR 0 4
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: IFFALSE 15238
// continue ;
15236: GO 15126
// h := hex [ 2 ] ;
15238: LD_ADDR_VAR 0 13
15242: PUSH
15243: LD_VAR 0 4
15247: PUSH
15248: LD_INT 2
15250: ARRAY
15251: ST_TO_ADDR
// if h + 7 < height then
15252: LD_VAR 0 13
15256: PUSH
15257: LD_INT 7
15259: PLUS
15260: PUSH
15261: LD_VAR 0 15
15265: LESS
15266: IFFALSE 15295
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15268: LD_ADDR_VAR 0 18
15272: PUSH
15273: LD_INT 7
15275: PUSH
15276: LD_INT 28
15278: PUSH
15279: LD_INT 45
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PUSH
15287: LD_VAR 0 12
15291: ARRAY
15292: ST_TO_ADDR
// break ;
15293: GO 15297
// end ; end ; end ;
15295: GO 15126
15297: POP
15298: POP
// end ; if not weapon then
15299: LD_VAR 0 18
15303: NOT
15304: IFFALSE 15364
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: LD_VAR 0 5
15315: PUSH
15316: LD_INT 11
15318: PUSH
15319: LD_INT 30
15321: PUSH
15322: LD_INT 49
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: DIFF
15330: ST_TO_ADDR
// if not list then
15331: LD_VAR 0 5
15335: NOT
15336: IFFALSE 15340
// exit ;
15338: GO 15486
// weapon := list [ rand ( 1 , list ) ] ;
15340: LD_ADDR_VAR 0 18
15344: PUSH
15345: LD_VAR 0 5
15349: PUSH
15350: LD_INT 1
15352: PPUSH
15353: LD_VAR 0 5
15357: PPUSH
15358: CALL_OW 12
15362: ARRAY
15363: ST_TO_ADDR
// end ; if weapon then
15364: LD_VAR 0 18
15368: IFFALSE 15486
// begin tmp := CostOfWeapon ( weapon ) ;
15370: LD_ADDR_VAR 0 14
15374: PUSH
15375: LD_VAR 0 18
15379: PPUSH
15380: CALL_OW 451
15384: ST_TO_ADDR
// j := GetBase ( tower ) ;
15385: LD_ADDR_VAR 0 9
15389: PUSH
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 274
15399: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15400: LD_VAR 0 9
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 275
15412: PUSH
15413: LD_VAR 0 14
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: GREATEREQUAL
15422: IFFALSE 15448
15424: PUSH
15425: LD_VAR 0 9
15429: PPUSH
15430: LD_INT 2
15432: PPUSH
15433: CALL_OW 275
15437: PUSH
15438: LD_VAR 0 14
15442: PUSH
15443: LD_INT 2
15445: ARRAY
15446: GREATEREQUAL
15447: AND
15448: IFFALSE 15474
15450: PUSH
15451: LD_VAR 0 9
15455: PPUSH
15456: LD_INT 3
15458: PPUSH
15459: CALL_OW 275
15463: PUSH
15464: LD_VAR 0 14
15468: PUSH
15469: LD_INT 3
15471: ARRAY
15472: GREATEREQUAL
15473: AND
15474: IFFALSE 15486
// result := weapon ;
15476: LD_ADDR_VAR 0 3
15480: PUSH
15481: LD_VAR 0 18
15485: ST_TO_ADDR
// end ; end ;
15486: LD_VAR 0 3
15490: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15491: LD_INT 0
15493: PPUSH
15494: PPUSH
// result := true ;
15495: LD_ADDR_VAR 0 3
15499: PUSH
15500: LD_INT 1
15502: ST_TO_ADDR
// if array1 = array2 then
15503: LD_VAR 0 1
15507: PUSH
15508: LD_VAR 0 2
15512: EQUAL
15513: IFFALSE 15573
// begin for i = 1 to array1 do
15515: LD_ADDR_VAR 0 4
15519: PUSH
15520: DOUBLE
15521: LD_INT 1
15523: DEC
15524: ST_TO_ADDR
15525: LD_VAR 0 1
15529: PUSH
15530: FOR_TO
15531: IFFALSE 15569
// if array1 [ i ] <> array2 [ i ] then
15533: LD_VAR 0 1
15537: PUSH
15538: LD_VAR 0 4
15542: ARRAY
15543: PUSH
15544: LD_VAR 0 2
15548: PUSH
15549: LD_VAR 0 4
15553: ARRAY
15554: NONEQUAL
15555: IFFALSE 15567
// begin result := false ;
15557: LD_ADDR_VAR 0 3
15561: PUSH
15562: LD_INT 0
15564: ST_TO_ADDR
// break ;
15565: GO 15569
// end ;
15567: GO 15530
15569: POP
15570: POP
// end else
15571: GO 15581
// result := false ;
15573: LD_ADDR_VAR 0 3
15577: PUSH
15578: LD_INT 0
15580: ST_TO_ADDR
// end ;
15581: LD_VAR 0 3
15585: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
// if not array1 or not array2 then
15590: LD_VAR 0 1
15594: NOT
15595: IFTRUE 15604
15597: PUSH
15598: LD_VAR 0 2
15602: NOT
15603: OR
15604: IFFALSE 15608
// exit ;
15606: GO 15672
// result := true ;
15608: LD_ADDR_VAR 0 3
15612: PUSH
15613: LD_INT 1
15615: ST_TO_ADDR
// for i = 1 to array1 do
15616: LD_ADDR_VAR 0 4
15620: PUSH
15621: DOUBLE
15622: LD_INT 1
15624: DEC
15625: ST_TO_ADDR
15626: LD_VAR 0 1
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15670
// if array1 [ i ] <> array2 [ i ] then
15634: LD_VAR 0 1
15638: PUSH
15639: LD_VAR 0 4
15643: ARRAY
15644: PUSH
15645: LD_VAR 0 2
15649: PUSH
15650: LD_VAR 0 4
15654: ARRAY
15655: NONEQUAL
15656: IFFALSE 15668
// begin result := false ;
15658: LD_ADDR_VAR 0 3
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// break ;
15666: GO 15670
// end ;
15668: GO 15631
15670: POP
15671: POP
// end ;
15672: LD_VAR 0 3
15676: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
// pom := GetBase ( fac ) ;
15682: LD_ADDR_VAR 0 5
15686: PUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 274
15696: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15697: LD_ADDR_VAR 0 4
15701: PUSH
15702: LD_VAR 0 2
15706: PUSH
15707: LD_INT 1
15709: ARRAY
15710: PPUSH
15711: LD_VAR 0 2
15715: PUSH
15716: LD_INT 2
15718: ARRAY
15719: PPUSH
15720: LD_VAR 0 2
15724: PUSH
15725: LD_INT 3
15727: ARRAY
15728: PPUSH
15729: LD_VAR 0 2
15733: PUSH
15734: LD_INT 4
15736: ARRAY
15737: PPUSH
15738: CALL_OW 449
15742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15743: LD_ADDR_VAR 0 3
15747: PUSH
15748: LD_VAR 0 5
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 275
15760: PUSH
15761: LD_VAR 0 4
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: GREATEREQUAL
15770: IFFALSE 15796
15772: PUSH
15773: LD_VAR 0 5
15777: PPUSH
15778: LD_INT 2
15780: PPUSH
15781: CALL_OW 275
15785: PUSH
15786: LD_VAR 0 4
15790: PUSH
15791: LD_INT 2
15793: ARRAY
15794: GREATEREQUAL
15795: AND
15796: IFFALSE 15822
15798: PUSH
15799: LD_VAR 0 5
15803: PPUSH
15804: LD_INT 3
15806: PPUSH
15807: CALL_OW 275
15811: PUSH
15812: LD_VAR 0 4
15816: PUSH
15817: LD_INT 3
15819: ARRAY
15820: GREATEREQUAL
15821: AND
15822: ST_TO_ADDR
// end ;
15823: LD_VAR 0 3
15827: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15828: LD_INT 0
15830: PPUSH
15831: PPUSH
15832: PPUSH
15833: PPUSH
// pom := GetBase ( building ) ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 274
15848: ST_TO_ADDR
// if not pom then
15849: LD_VAR 0 3
15853: NOT
15854: IFFALSE 15858
// exit ;
15856: GO 16032
// btype := GetBType ( building ) ;
15858: LD_ADDR_VAR 0 5
15862: PUSH
15863: LD_VAR 0 1
15867: PPUSH
15868: CALL_OW 266
15872: ST_TO_ADDR
// if btype = b_armoury then
15873: LD_VAR 0 5
15877: PUSH
15878: LD_INT 4
15880: EQUAL
15881: IFFALSE 15891
// btype := b_barracks ;
15883: LD_ADDR_VAR 0 5
15887: PUSH
15888: LD_INT 5
15890: ST_TO_ADDR
// if btype = b_depot then
15891: LD_VAR 0 5
15895: PUSH
15896: LD_INT 0
15898: EQUAL
15899: IFFALSE 15909
// btype := b_warehouse ;
15901: LD_ADDR_VAR 0 5
15905: PUSH
15906: LD_INT 1
15908: ST_TO_ADDR
// if btype = b_workshop then
15909: LD_VAR 0 5
15913: PUSH
15914: LD_INT 2
15916: EQUAL
15917: IFFALSE 15927
// btype := b_factory ;
15919: LD_ADDR_VAR 0 5
15923: PUSH
15924: LD_INT 3
15926: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15927: LD_ADDR_VAR 0 4
15931: PUSH
15932: LD_VAR 0 5
15936: PPUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 248
15946: PPUSH
15947: CALL_OW 450
15951: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15952: LD_ADDR_VAR 0 2
15956: PUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 275
15969: PUSH
15970: LD_VAR 0 4
15974: PUSH
15975: LD_INT 1
15977: ARRAY
15978: GREATEREQUAL
15979: IFFALSE 16005
15981: PUSH
15982: LD_VAR 0 3
15986: PPUSH
15987: LD_INT 2
15989: PPUSH
15990: CALL_OW 275
15994: PUSH
15995: LD_VAR 0 4
15999: PUSH
16000: LD_INT 2
16002: ARRAY
16003: GREATEREQUAL
16004: AND
16005: IFFALSE 16031
16007: PUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 3
16015: PPUSH
16016: CALL_OW 275
16020: PUSH
16021: LD_VAR 0 4
16025: PUSH
16026: LD_INT 3
16028: ARRAY
16029: GREATEREQUAL
16030: AND
16031: ST_TO_ADDR
// end ;
16032: LD_VAR 0 2
16036: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16037: LD_INT 0
16039: PPUSH
16040: PPUSH
16041: PPUSH
// pom := GetBase ( building ) ;
16042: LD_ADDR_VAR 0 4
16046: PUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 274
16056: ST_TO_ADDR
// if not pom then
16057: LD_VAR 0 4
16061: NOT
16062: IFFALSE 16066
// exit ;
16064: GO 16171
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16066: LD_ADDR_VAR 0 5
16070: PUSH
16071: LD_VAR 0 2
16075: PPUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 248
16085: PPUSH
16086: CALL_OW 450
16090: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16091: LD_ADDR_VAR 0 3
16095: PUSH
16096: LD_VAR 0 4
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: CALL_OW 275
16108: PUSH
16109: LD_VAR 0 5
16113: PUSH
16114: LD_INT 1
16116: ARRAY
16117: GREATEREQUAL
16118: IFFALSE 16144
16120: PUSH
16121: LD_VAR 0 4
16125: PPUSH
16126: LD_INT 2
16128: PPUSH
16129: CALL_OW 275
16133: PUSH
16134: LD_VAR 0 5
16138: PUSH
16139: LD_INT 2
16141: ARRAY
16142: GREATEREQUAL
16143: AND
16144: IFFALSE 16170
16146: PUSH
16147: LD_VAR 0 4
16151: PPUSH
16152: LD_INT 3
16154: PPUSH
16155: CALL_OW 275
16159: PUSH
16160: LD_VAR 0 5
16164: PUSH
16165: LD_INT 3
16167: ARRAY
16168: GREATEREQUAL
16169: AND
16170: ST_TO_ADDR
// end ;
16171: LD_VAR 0 3
16175: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16176: LD_INT 0
16178: PPUSH
16179: PPUSH
16180: PPUSH
16181: PPUSH
16182: PPUSH
16183: PPUSH
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
// result := false ;
16189: LD_ADDR_VAR 0 8
16193: PUSH
16194: LD_INT 0
16196: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16197: LD_VAR 0 5
16201: NOT
16202: IFTRUE 16211
16204: PUSH
16205: LD_VAR 0 1
16209: NOT
16210: OR
16211: IFTRUE 16220
16213: PUSH
16214: LD_VAR 0 2
16218: NOT
16219: OR
16220: IFTRUE 16229
16222: PUSH
16223: LD_VAR 0 3
16227: NOT
16228: OR
16229: IFFALSE 16233
// exit ;
16231: GO 17059
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16233: LD_ADDR_VAR 0 14
16237: PUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: LD_VAR 0 2
16247: PPUSH
16248: LD_VAR 0 3
16252: PPUSH
16253: LD_VAR 0 4
16257: PPUSH
16258: LD_VAR 0 5
16262: PUSH
16263: LD_INT 1
16265: ARRAY
16266: PPUSH
16267: CALL_OW 248
16271: PPUSH
16272: LD_INT 0
16274: PPUSH
16275: CALL 18340 0 6
16279: ST_TO_ADDR
// if not hexes then
16280: LD_VAR 0 14
16284: NOT
16285: IFFALSE 16289
// exit ;
16287: GO 17059
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16289: LD_ADDR_VAR 0 17
16293: PUSH
16294: LD_VAR 0 5
16298: PPUSH
16299: LD_INT 22
16301: PUSH
16302: LD_VAR 0 13
16306: PPUSH
16307: CALL_OW 255
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 0
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 30
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 72
16352: ST_TO_ADDR
// for i = 1 to hexes do
16353: LD_ADDR_VAR 0 9
16357: PUSH
16358: DOUBLE
16359: LD_INT 1
16361: DEC
16362: ST_TO_ADDR
16363: LD_VAR 0 14
16367: PUSH
16368: FOR_TO
16369: IFFALSE 17057
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16371: LD_ADDR_VAR 0 13
16375: PUSH
16376: LD_VAR 0 14
16380: PUSH
16381: LD_VAR 0 9
16385: ARRAY
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: PPUSH
16391: LD_VAR 0 14
16395: PUSH
16396: LD_VAR 0 9
16400: ARRAY
16401: PUSH
16402: LD_INT 2
16404: ARRAY
16405: PPUSH
16406: CALL_OW 428
16410: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16411: LD_VAR 0 14
16415: PUSH
16416: LD_VAR 0 9
16420: ARRAY
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: LD_VAR 0 14
16430: PUSH
16431: LD_VAR 0 9
16435: ARRAY
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: PPUSH
16441: CALL_OW 351
16445: IFTRUE 16484
16447: PUSH
16448: LD_VAR 0 14
16452: PUSH
16453: LD_VAR 0 9
16457: ARRAY
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 14
16467: PUSH
16468: LD_VAR 0 9
16472: ARRAY
16473: PUSH
16474: LD_INT 2
16476: ARRAY
16477: PPUSH
16478: CALL_OW 488
16482: NOT
16483: OR
16484: IFTRUE 16501
16486: PUSH
16487: LD_VAR 0 13
16491: PPUSH
16492: CALL_OW 247
16496: PUSH
16497: LD_INT 3
16499: EQUAL
16500: OR
16501: IFFALSE 16507
// exit ;
16503: POP
16504: POP
16505: GO 17059
// if not tmp then
16507: LD_VAR 0 13
16511: NOT
16512: IFFALSE 16516
// continue ;
16514: GO 16368
// result := true ;
16516: LD_ADDR_VAR 0 8
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16524: LD_VAR 0 6
16528: IFFALSE 16545
16530: PUSH
16531: LD_VAR 0 13
16535: PPUSH
16536: CALL_OW 247
16540: PUSH
16541: LD_INT 2
16543: EQUAL
16544: AND
16545: IFFALSE 16562
16547: PUSH
16548: LD_VAR 0 13
16552: PPUSH
16553: CALL_OW 263
16557: PUSH
16558: LD_INT 1
16560: EQUAL
16561: AND
16562: IFFALSE 16726
// begin if IsDrivenBy ( tmp ) then
16564: LD_VAR 0 13
16568: PPUSH
16569: CALL_OW 311
16573: IFFALSE 16577
// continue ;
16575: GO 16368
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16577: LD_VAR 0 6
16581: PPUSH
16582: LD_INT 3
16584: PUSH
16585: LD_INT 60
16587: PUSH
16588: EMPTY
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 3
16597: PUSH
16598: LD_INT 55
16600: PUSH
16601: EMPTY
16602: LIST
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 72
16616: IFFALSE 16724
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16618: LD_ADDR_VAR 0 18
16622: PUSH
16623: LD_VAR 0 6
16627: PPUSH
16628: LD_INT 3
16630: PUSH
16631: LD_INT 60
16633: PUSH
16634: EMPTY
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 3
16643: PUSH
16644: LD_INT 55
16646: PUSH
16647: EMPTY
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PPUSH
16658: CALL_OW 72
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: ST_TO_ADDR
// if IsInUnit ( driver ) then
16667: LD_VAR 0 18
16671: PPUSH
16672: CALL_OW 310
16676: IFFALSE 16687
// ComExit ( driver ) ;
16678: LD_VAR 0 18
16682: PPUSH
16683: CALL 42340 0 1
// AddComEnterUnit ( driver , tmp ) ;
16687: LD_VAR 0 18
16691: PPUSH
16692: LD_VAR 0 13
16696: PPUSH
16697: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16701: LD_VAR 0 18
16705: PPUSH
16706: LD_VAR 0 7
16710: PPUSH
16711: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16715: LD_VAR 0 18
16719: PPUSH
16720: CALL_OW 181
// end ; continue ;
16724: GO 16368
// end ; if not cleaners or not tmp in cleaners then
16726: LD_VAR 0 6
16730: NOT
16731: IFTRUE 16746
16733: PUSH
16734: LD_VAR 0 13
16738: PUSH
16739: LD_VAR 0 6
16743: IN
16744: NOT
16745: OR
16746: IFFALSE 17055
// begin if dep then
16748: LD_VAR 0 17
16752: IFFALSE 16888
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16754: LD_ADDR_VAR 0 16
16758: PUSH
16759: LD_VAR 0 17
16763: PUSH
16764: LD_INT 1
16766: ARRAY
16767: PPUSH
16768: CALL_OW 250
16772: PPUSH
16773: LD_VAR 0 17
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PPUSH
16782: CALL_OW 254
16786: PPUSH
16787: LD_INT 5
16789: PPUSH
16790: CALL_OW 272
16794: PUSH
16795: LD_VAR 0 17
16799: PUSH
16800: LD_INT 1
16802: ARRAY
16803: PPUSH
16804: CALL_OW 251
16808: PPUSH
16809: LD_VAR 0 17
16813: PUSH
16814: LD_INT 1
16816: ARRAY
16817: PPUSH
16818: CALL_OW 254
16822: PPUSH
16823: LD_INT 5
16825: PPUSH
16826: CALL_OW 273
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16835: LD_VAR 0 16
16839: PUSH
16840: LD_INT 1
16842: ARRAY
16843: PPUSH
16844: LD_VAR 0 16
16848: PUSH
16849: LD_INT 2
16851: ARRAY
16852: PPUSH
16853: CALL_OW 488
16857: IFFALSE 16888
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16859: LD_VAR 0 13
16863: PPUSH
16864: LD_VAR 0 16
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PPUSH
16873: LD_VAR 0 16
16877: PUSH
16878: LD_INT 2
16880: ARRAY
16881: PPUSH
16882: CALL_OW 111
// continue ;
16886: GO 16368
// end ; end ; r := GetDir ( tmp ) ;
16888: LD_ADDR_VAR 0 15
16892: PUSH
16893: LD_VAR 0 13
16897: PPUSH
16898: CALL_OW 254
16902: ST_TO_ADDR
// if r = 5 then
16903: LD_VAR 0 15
16907: PUSH
16908: LD_INT 5
16910: EQUAL
16911: IFFALSE 16921
// r := 0 ;
16913: LD_ADDR_VAR 0 15
16917: PUSH
16918: LD_INT 0
16920: ST_TO_ADDR
// for j = r to 5 do
16921: LD_ADDR_VAR 0 10
16925: PUSH
16926: DOUBLE
16927: LD_VAR 0 15
16931: DEC
16932: ST_TO_ADDR
16933: LD_INT 5
16935: PUSH
16936: FOR_TO
16937: IFFALSE 17053
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16939: LD_ADDR_VAR 0 11
16943: PUSH
16944: LD_VAR 0 13
16948: PPUSH
16949: CALL_OW 250
16953: PPUSH
16954: LD_VAR 0 10
16958: PPUSH
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 272
16966: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16967: LD_ADDR_VAR 0 12
16971: PUSH
16972: LD_VAR 0 13
16976: PPUSH
16977: CALL_OW 251
16981: PPUSH
16982: LD_VAR 0 10
16986: PPUSH
16987: LD_INT 2
16989: PPUSH
16990: CALL_OW 273
16994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16995: LD_VAR 0 11
16999: PPUSH
17000: LD_VAR 0 12
17004: PPUSH
17005: CALL_OW 488
17009: IFFALSE 17028
17011: PUSH
17012: LD_VAR 0 11
17016: PPUSH
17017: LD_VAR 0 12
17021: PPUSH
17022: CALL_OW 428
17026: NOT
17027: AND
17028: IFFALSE 17051
// begin ComMoveXY ( tmp , _x , _y ) ;
17030: LD_VAR 0 13
17034: PPUSH
17035: LD_VAR 0 11
17039: PPUSH
17040: LD_VAR 0 12
17044: PPUSH
17045: CALL_OW 111
// break ;
17049: GO 17053
// end ; end ;
17051: GO 16936
17053: POP
17054: POP
// end ; end ;
17055: GO 16368
17057: POP
17058: POP
// end ;
17059: LD_VAR 0 8
17063: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17064: LD_INT 0
17066: PPUSH
// result := true ;
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_INT 1
17074: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17075: LD_VAR 0 2
17079: PUSH
17080: LD_INT 24
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17094
17086: LD_INT 33
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17119
17094: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17095: LD_ADDR_VAR 0 3
17099: PUSH
17100: LD_INT 32
17102: PPUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 321
17112: PUSH
17113: LD_INT 2
17115: EQUAL
17116: ST_TO_ADDR
17117: GO 17435
17119: LD_INT 20
17121: DOUBLE
17122: EQUAL
17123: IFTRUE 17127
17125: GO 17152
17127: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17128: LD_ADDR_VAR 0 3
17132: PUSH
17133: LD_INT 6
17135: PPUSH
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 321
17145: PUSH
17146: LD_INT 2
17148: EQUAL
17149: ST_TO_ADDR
17150: GO 17435
17152: LD_INT 22
17154: DOUBLE
17155: EQUAL
17156: IFTRUE 17166
17158: LD_INT 36
17160: DOUBLE
17161: EQUAL
17162: IFTRUE 17166
17164: GO 17191
17166: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17167: LD_ADDR_VAR 0 3
17171: PUSH
17172: LD_INT 15
17174: PPUSH
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 321
17184: PUSH
17185: LD_INT 2
17187: EQUAL
17188: ST_TO_ADDR
17189: GO 17435
17191: LD_INT 30
17193: DOUBLE
17194: EQUAL
17195: IFTRUE 17199
17197: GO 17224
17199: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: LD_INT 20
17207: PPUSH
17208: LD_VAR 0 1
17212: PPUSH
17213: CALL_OW 321
17217: PUSH
17218: LD_INT 2
17220: EQUAL
17221: ST_TO_ADDR
17222: GO 17435
17224: LD_INT 28
17226: DOUBLE
17227: EQUAL
17228: IFTRUE 17238
17230: LD_INT 21
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17263
17238: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: LD_INT 21
17246: PPUSH
17247: LD_VAR 0 1
17251: PPUSH
17252: CALL_OW 321
17256: PUSH
17257: LD_INT 2
17259: EQUAL
17260: ST_TO_ADDR
17261: GO 17435
17263: LD_INT 16
17265: DOUBLE
17266: EQUAL
17267: IFTRUE 17271
17269: GO 17296
17271: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_INT 84
17279: PPUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 321
17289: PUSH
17290: LD_INT 2
17292: EQUAL
17293: ST_TO_ADDR
17294: GO 17435
17296: LD_INT 19
17298: DOUBLE
17299: EQUAL
17300: IFTRUE 17310
17302: LD_INT 23
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17335
17310: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 83
17318: PPUSH
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 321
17328: PUSH
17329: LD_INT 2
17331: EQUAL
17332: ST_TO_ADDR
17333: GO 17435
17335: LD_INT 17
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17368
17343: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17344: LD_ADDR_VAR 0 3
17348: PUSH
17349: LD_INT 39
17351: PPUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 321
17361: PUSH
17362: LD_INT 2
17364: EQUAL
17365: ST_TO_ADDR
17366: GO 17435
17368: LD_INT 18
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17401
17376: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17377: LD_ADDR_VAR 0 3
17381: PUSH
17382: LD_INT 40
17384: PPUSH
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 321
17394: PUSH
17395: LD_INT 2
17397: EQUAL
17398: ST_TO_ADDR
17399: GO 17435
17401: LD_INT 27
17403: DOUBLE
17404: EQUAL
17405: IFTRUE 17409
17407: GO 17434
17409: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17410: LD_ADDR_VAR 0 3
17414: PUSH
17415: LD_INT 35
17417: PPUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 321
17427: PUSH
17428: LD_INT 2
17430: EQUAL
17431: ST_TO_ADDR
17432: GO 17435
17434: POP
// end ;
17435: LD_VAR 0 3
17439: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17440: LD_INT 0
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
17446: PPUSH
17447: PPUSH
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
// result := false ;
17453: LD_ADDR_VAR 0 6
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// if btype = b_depot then
17461: LD_VAR 0 2
17465: PUSH
17466: LD_INT 0
17468: EQUAL
17469: IFFALSE 17481
// begin result := true ;
17471: LD_ADDR_VAR 0 6
17475: PUSH
17476: LD_INT 1
17478: ST_TO_ADDR
// exit ;
17479: GO 18335
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17481: LD_VAR 0 1
17485: NOT
17486: IFTRUE 17511
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 266
17498: PUSH
17499: LD_INT 0
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: IN
17509: NOT
17510: OR
17511: IFTRUE 17520
17513: PUSH
17514: LD_VAR 0 2
17518: NOT
17519: OR
17520: IFTRUE 17556
17522: PUSH
17523: LD_VAR 0 5
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: LD_INT 3
17539: PUSH
17540: LD_INT 4
17542: PUSH
17543: LD_INT 5
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: IN
17554: NOT
17555: OR
17556: IFTRUE 17575
17558: PUSH
17559: LD_VAR 0 3
17563: PPUSH
17564: LD_VAR 0 4
17568: PPUSH
17569: CALL_OW 488
17573: NOT
17574: OR
17575: IFFALSE 17579
// exit ;
17577: GO 18335
// side := GetSide ( depot ) ;
17579: LD_ADDR_VAR 0 9
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 255
17593: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17594: LD_VAR 0 9
17598: PPUSH
17599: LD_VAR 0 2
17603: PPUSH
17604: CALL 17064 0 2
17608: NOT
17609: IFFALSE 17613
// exit ;
17611: GO 18335
// pom := GetBase ( depot ) ;
17613: LD_ADDR_VAR 0 10
17617: PUSH
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 274
17627: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17628: LD_ADDR_VAR 0 11
17632: PUSH
17633: LD_VAR 0 2
17637: PPUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 248
17647: PPUSH
17648: CALL_OW 450
17652: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17653: LD_VAR 0 10
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: CALL_OW 275
17665: PUSH
17666: LD_VAR 0 11
17670: PUSH
17671: LD_INT 1
17673: ARRAY
17674: GREATEREQUAL
17675: IFFALSE 17701
17677: PUSH
17678: LD_VAR 0 10
17682: PPUSH
17683: LD_INT 2
17685: PPUSH
17686: CALL_OW 275
17690: PUSH
17691: LD_VAR 0 11
17695: PUSH
17696: LD_INT 2
17698: ARRAY
17699: GREATEREQUAL
17700: AND
17701: IFFALSE 17727
17703: PUSH
17704: LD_VAR 0 10
17708: PPUSH
17709: LD_INT 3
17711: PPUSH
17712: CALL_OW 275
17716: PUSH
17717: LD_VAR 0 11
17721: PUSH
17722: LD_INT 3
17724: ARRAY
17725: GREATEREQUAL
17726: AND
17727: NOT
17728: IFFALSE 17732
// exit ;
17730: GO 18335
// if GetBType ( depot ) = b_depot then
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 0
17744: EQUAL
17745: IFFALSE 17757
// dist := 28 else
17747: LD_ADDR_VAR 0 14
17751: PUSH
17752: LD_INT 28
17754: ST_TO_ADDR
17755: GO 17765
// dist := 36 ;
17757: LD_ADDR_VAR 0 14
17761: PUSH
17762: LD_INT 36
17764: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17765: LD_VAR 0 1
17769: PPUSH
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_VAR 0 4
17779: PPUSH
17780: CALL_OW 297
17784: PUSH
17785: LD_VAR 0 14
17789: GREATER
17790: IFFALSE 17794
// exit ;
17792: GO 18335
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17794: LD_ADDR_VAR 0 12
17798: PUSH
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_VAR 0 3
17808: PPUSH
17809: LD_VAR 0 4
17813: PPUSH
17814: LD_VAR 0 5
17818: PPUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 248
17828: PPUSH
17829: LD_INT 0
17831: PPUSH
17832: CALL 18340 0 6
17836: ST_TO_ADDR
// if not hexes then
17837: LD_VAR 0 12
17841: NOT
17842: IFFALSE 17846
// exit ;
17844: GO 18335
// hex := GetHexInfo ( x , y ) ;
17846: LD_ADDR_VAR 0 15
17850: PUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_VAR 0 4
17860: PPUSH
17861: CALL_OW 546
17865: ST_TO_ADDR
// if hex [ 1 ] then
17866: LD_VAR 0 15
17870: PUSH
17871: LD_INT 1
17873: ARRAY
17874: IFFALSE 17878
// exit ;
17876: GO 18335
// height := hex [ 2 ] ;
17878: LD_ADDR_VAR 0 13
17882: PUSH
17883: LD_VAR 0 15
17887: PUSH
17888: LD_INT 2
17890: ARRAY
17891: ST_TO_ADDR
// for i = 1 to hexes do
17892: LD_ADDR_VAR 0 7
17896: PUSH
17897: DOUBLE
17898: LD_INT 1
17900: DEC
17901: ST_TO_ADDR
17902: LD_VAR 0 12
17906: PUSH
17907: FOR_TO
17908: IFFALSE 18252
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17910: LD_VAR 0 12
17914: PUSH
17915: LD_VAR 0 7
17919: ARRAY
17920: PUSH
17921: LD_INT 1
17923: ARRAY
17924: PPUSH
17925: LD_VAR 0 12
17929: PUSH
17930: LD_VAR 0 7
17934: ARRAY
17935: PUSH
17936: LD_INT 2
17938: ARRAY
17939: PPUSH
17940: CALL_OW 488
17944: NOT
17945: IFTRUE 17987
17947: PUSH
17948: LD_VAR 0 12
17952: PUSH
17953: LD_VAR 0 7
17957: ARRAY
17958: PUSH
17959: LD_INT 1
17961: ARRAY
17962: PPUSH
17963: LD_VAR 0 12
17967: PUSH
17968: LD_VAR 0 7
17972: ARRAY
17973: PUSH
17974: LD_INT 2
17976: ARRAY
17977: PPUSH
17978: CALL_OW 428
17982: PUSH
17983: LD_INT 0
17985: GREATER
17986: OR
17987: IFTRUE 18025
17989: PUSH
17990: LD_VAR 0 12
17994: PUSH
17995: LD_VAR 0 7
17999: ARRAY
18000: PUSH
18001: LD_INT 1
18003: ARRAY
18004: PPUSH
18005: LD_VAR 0 12
18009: PUSH
18010: LD_VAR 0 7
18014: ARRAY
18015: PUSH
18016: LD_INT 2
18018: ARRAY
18019: PPUSH
18020: CALL_OW 351
18024: OR
18025: IFFALSE 18031
// exit ;
18027: POP
18028: POP
18029: GO 18335
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18031: LD_ADDR_VAR 0 8
18035: PUSH
18036: LD_VAR 0 12
18040: PUSH
18041: LD_VAR 0 7
18045: ARRAY
18046: PUSH
18047: LD_INT 1
18049: ARRAY
18050: PPUSH
18051: LD_VAR 0 12
18055: PUSH
18056: LD_VAR 0 7
18060: ARRAY
18061: PUSH
18062: LD_INT 2
18064: ARRAY
18065: PPUSH
18066: CALL_OW 546
18070: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18071: LD_VAR 0 8
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: IFTRUE 18101
18081: PUSH
18082: LD_VAR 0 8
18086: PUSH
18087: LD_INT 2
18089: ARRAY
18090: PUSH
18091: LD_VAR 0 13
18095: PUSH
18096: LD_INT 2
18098: PLUS
18099: GREATER
18100: OR
18101: IFTRUE 18123
18103: PUSH
18104: LD_VAR 0 8
18108: PUSH
18109: LD_INT 2
18111: ARRAY
18112: PUSH
18113: LD_VAR 0 13
18117: PUSH
18118: LD_INT 2
18120: MINUS
18121: LESS
18122: OR
18123: IFTRUE 18191
18125: PUSH
18126: LD_VAR 0 8
18130: PUSH
18131: LD_INT 3
18133: ARRAY
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 8
18140: PUSH
18141: LD_INT 9
18143: PUSH
18144: LD_INT 10
18146: PUSH
18147: LD_INT 11
18149: PUSH
18150: LD_INT 12
18152: PUSH
18153: LD_INT 13
18155: PUSH
18156: LD_INT 16
18158: PUSH
18159: LD_INT 17
18161: PUSH
18162: LD_INT 18
18164: PUSH
18165: LD_INT 19
18167: PUSH
18168: LD_INT 20
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: IN
18189: NOT
18190: OR
18191: IFTRUE 18204
18193: PUSH
18194: LD_VAR 0 8
18198: PUSH
18199: LD_INT 5
18201: ARRAY
18202: NOT
18203: OR
18204: IFTRUE 18244
18206: PUSH
18207: LD_VAR 0 8
18211: PUSH
18212: LD_INT 6
18214: ARRAY
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: LD_INT 7
18224: PUSH
18225: LD_INT 9
18227: PUSH
18228: LD_INT 10
18230: PUSH
18231: LD_INT 11
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: IN
18242: NOT
18243: OR
18244: IFFALSE 18250
// exit ;
18246: POP
18247: POP
18248: GO 18335
// end ;
18250: GO 17907
18252: POP
18253: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18254: LD_VAR 0 9
18258: PPUSH
18259: LD_VAR 0 3
18263: PPUSH
18264: LD_VAR 0 4
18268: PPUSH
18269: LD_INT 20
18271: PPUSH
18272: CALL 10154 0 4
18276: PUSH
18277: LD_INT 4
18279: ARRAY
18280: IFFALSE 18284
// exit ;
18282: GO 18335
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18284: LD_VAR 0 2
18288: PUSH
18289: LD_INT 29
18291: PUSH
18292: LD_INT 30
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: IN
18299: IFFALSE 18323
18301: PUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: LD_VAR 0 4
18311: PPUSH
18312: LD_VAR 0 9
18316: PPUSH
18317: CALL_OW 440
18321: NOT
18322: AND
18323: IFFALSE 18327
// exit ;
18325: GO 18335
// result := true ;
18327: LD_ADDR_VAR 0 6
18331: PUSH
18332: LD_INT 1
18334: ST_TO_ADDR
// end ;
18335: LD_VAR 0 6
18339: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18340: LD_INT 0
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
18353: PPUSH
18354: PPUSH
18355: PPUSH
18356: PPUSH
18357: PPUSH
18358: PPUSH
18359: PPUSH
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
18386: PPUSH
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
18392: PPUSH
18393: PPUSH
18394: PPUSH
18395: PPUSH
18396: PPUSH
18397: PPUSH
18398: PPUSH
18399: PPUSH
// result = [ ] ;
18400: LD_ADDR_VAR 0 7
18404: PUSH
18405: EMPTY
18406: ST_TO_ADDR
// temp_list = [ ] ;
18407: LD_ADDR_VAR 0 9
18411: PUSH
18412: EMPTY
18413: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18414: LD_VAR 0 4
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 4
18433: PUSH
18434: LD_INT 5
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: IN
18445: NOT
18446: IFTRUE 18489
18448: PUSH
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: IN
18464: IFFALSE 18488
18466: PUSH
18467: LD_VAR 0 5
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: IN
18486: NOT
18487: AND
18488: OR
18489: IFFALSE 18493
// exit ;
18491: GO 36892
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18493: LD_VAR 0 1
18497: PUSH
18498: LD_INT 6
18500: PUSH
18501: LD_INT 7
18503: PUSH
18504: LD_INT 8
18506: PUSH
18507: LD_INT 13
18509: PUSH
18510: LD_INT 12
18512: PUSH
18513: LD_INT 15
18515: PUSH
18516: LD_INT 11
18518: PUSH
18519: LD_INT 14
18521: PUSH
18522: LD_INT 10
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: IN
18536: IFFALSE 18546
// btype = b_lab ;
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: LD_INT 6
18545: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18546: LD_VAR 0 6
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: IN
18565: NOT
18566: IFTRUE 18634
18568: PUSH
18569: LD_VAR 0 1
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 3
18585: PUSH
18586: LD_INT 6
18588: PUSH
18589: LD_INT 36
18591: PUSH
18592: LD_INT 4
18594: PUSH
18595: LD_INT 5
18597: PUSH
18598: LD_INT 31
18600: PUSH
18601: LD_INT 32
18603: PUSH
18604: LD_INT 33
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: IN
18620: NOT
18621: IFFALSE 18633
18623: PUSH
18624: LD_VAR 0 6
18628: PUSH
18629: LD_INT 1
18631: EQUAL
18632: AND
18633: OR
18634: IFTRUE 18666
18636: PUSH
18637: LD_VAR 0 1
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: LD_INT 3
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: IN
18652: NOT
18653: IFFALSE 18665
18655: PUSH
18656: LD_VAR 0 6
18660: PUSH
18661: LD_INT 2
18663: EQUAL
18664: AND
18665: OR
18666: IFFALSE 18676
// mode = 0 ;
18668: LD_ADDR_VAR 0 6
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
// case mode of 0 :
18676: LD_VAR 0 6
18680: PUSH
18681: LD_INT 0
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 30142
18689: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18690: LD_ADDR_VAR 0 11
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 0
18707: PUSH
18708: LD_INT 1
18710: NEG
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 0
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: LD_INT 2
18775: NEG
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: LD_INT 2
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18883: LD_ADDR_VAR 0 12
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 1
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: NEG
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: LD_INT 1
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 3
19040: NEG
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 3
19051: NEG
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19079: LD_ADDR_VAR 0 13
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: LD_INT 1
19152: NEG
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 2
19202: NEG
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 2
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: LD_INT 3
19230: NEG
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 3
19238: NEG
19239: PUSH
19240: LD_INT 2
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 3
19250: NEG
19251: PUSH
19252: LD_INT 3
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19278: LD_ADDR_VAR 0 14
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: NEG
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 3
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 3
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19474: LD_ADDR_VAR 0 15
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: NEG
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 1
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 3
19641: PUSH
19642: LD_INT 1
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19667: LD_ADDR_VAR 0 16
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: LD_INT 2
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: NEG
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 2
19802: NEG
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 3
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 3
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: LD_INT 3
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19860: LD_ADDR_VAR 0 17
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: NEG
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 2
20036: NEG
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: LD_INT 2
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20090: LD_ADDR_VAR 0 18
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 2
20266: NEG
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20320: LD_ADDR_VAR 0 19
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20550: LD_ADDR_VAR 0 20
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20780: LD_ADDR_VAR 0 21
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 2
20956: NEG
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: NEG
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: NEG
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21010: LD_ADDR_VAR 0 22
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 1
21068: NEG
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: NEG
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: LD_INT 2
21106: NEG
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 2
21186: NEG
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: NEG
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: NEG
21210: PUSH
21211: LD_INT 2
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21240: LD_ADDR_VAR 0 23
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: LD_INT 1
21260: NEG
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: NEG
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 2
21325: NEG
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: LD_INT 2
21336: NEG
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 2
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 2
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 2
21416: NEG
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 3
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: LD_INT 3
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: LD_INT 2
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21520: LD_ADDR_VAR 0 24
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 0
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: LD_INT 0
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 1
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 2
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 2
21696: NEG
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 3
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 3
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21796: LD_ADDR_VAR 0 25
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: LD_INT 2
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 2
21972: NEG
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 2
21983: NEG
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 3
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 3
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 3
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 3
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22070: LD_ADDR_VAR 0 26
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: LD_INT 2
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 2
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: NEG
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22346: LD_ADDR_VAR 0 27
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 2
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 2
22522: NEG
22523: PUSH
22524: LD_INT 0
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 3
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: NEG
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22626: LD_ADDR_VAR 0 28
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: NEG
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: LD_INT 3
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: LD_INT 3
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 3
22861: NEG
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 3
22873: NEG
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22908: LD_ADDR_VAR 0 29
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: LD_INT 0
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: NEG
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: LD_INT 3
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 3
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 3
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 3
23152: NEG
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23187: LD_ADDR_VAR 0 30
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 2
23353: NEG
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 3
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 2
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 3
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 3
23430: NEG
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23465: LD_ADDR_VAR 0 31
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: LD_INT 0
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 2
23654: NEG
23655: PUSH
23656: LD_INT 3
23658: NEG
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 3
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 3
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 3
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23743: LD_ADDR_VAR 0 32
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: NEG
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: NEG
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 3
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 3
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: LD_INT 3
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: NEG
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24021: LD_ADDR_VAR 0 33
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: NEG
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: NEG
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 1
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: NEG
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 2
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: LD_INT 3
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 3
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 3
24265: NEG
24266: PUSH
24267: LD_INT 2
24269: NEG
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24300: LD_ADDR_VAR 0 34
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: LD_INT 1
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 1
24358: NEG
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: LD_INT 2
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: LD_INT 2
24396: NEG
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: LD_INT 3
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: LD_INT 2
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 3
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 2
24534: NEG
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 3
24545: NEG
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24580: LD_ADDR_VAR 0 35
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24692: LD_ADDR_VAR 0 36
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: LD_INT 2
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: LD_INT 2
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24804: LD_ADDR_VAR 0 37
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24916: LD_ADDR_VAR 0 38
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25028: LD_ADDR_VAR 0 39
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25140: LD_ADDR_VAR 0 40
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25252: LD_ADDR_VAR 0 41
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: LD_INT 2
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: NEG
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: LD_INT 3
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 3
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: LD_INT 2
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: LD_INT 3
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 3
25526: NEG
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 3
25537: NEG
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 3
25549: NEG
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 3
25561: NEG
25562: PUSH
25563: LD_INT 3
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25602: LD_ADDR_VAR 0 42
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 2
25768: NEG
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: LD_INT 3
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: LD_INT 3
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 3
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 3
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 3
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 3
25899: NEG
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 3
25911: NEG
25912: PUSH
25913: LD_INT 3
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25952: LD_ADDR_VAR 0 43
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: NEG
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 2
26129: NEG
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: LD_INT 3
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 3
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 3
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: LD_INT 3
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 3
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 2
26237: NEG
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 3
26248: NEG
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 3
26259: NEG
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26300: LD_ADDR_VAR 0 44
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: LD_INT 3
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 3
26543: PUSH
26544: LD_INT 3
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 3
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 3
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: NEG
26598: PUSH
26599: LD_INT 2
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 3
26609: NEG
26610: PUSH
26611: LD_INT 3
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26650: LD_ADDR_VAR 0 45
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 2
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: LD_INT 3
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: LD_INT 3
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 3
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 2
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 3
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 3
26896: PUSH
26897: LD_INT 3
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: LD_INT 3
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 3
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 3
26947: NEG
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 3
26959: NEG
26960: PUSH
26961: LD_INT 3
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27000: LD_ADDR_VAR 0 46
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 2
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: LD_INT 3
27193: NEG
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: LD_INT 3
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 3
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 3
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: LD_INT 3
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 3
27296: NEG
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 3
27307: NEG
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27348: LD_ADDR_VAR 0 47
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: LD_INT 2
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: NEG
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27499: LD_ADDR_VAR 0 48
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27646: LD_ADDR_VAR 0 49
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: NEG
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27790: LD_ADDR_VAR 0 50
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 2
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27934: LD_ADDR_VAR 0 51
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: NEG
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28081: LD_ADDR_VAR 0 52
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 2
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: NEG
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: NEG
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28232: LD_ADDR_VAR 0 53
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 2
28408: NEG
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: LD_INT 2
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28462: LD_ADDR_VAR 0 54
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 2
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: NEG
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: NEG
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: LD_INT 2
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28692: LD_ADDR_VAR 0 55
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: LD_INT 2
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 2
28868: NEG
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 2
28879: NEG
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: LD_INT 2
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28922: LD_ADDR_VAR 0 56
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 2
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 2
29098: NEG
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29152: LD_ADDR_VAR 0 57
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 2
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 2
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29382: LD_ADDR_VAR 0 58
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 2
29569: NEG
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29612: LD_ADDR_VAR 0 59
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29700: LD_ADDR_VAR 0 60
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: LD_INT 1
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29788: LD_ADDR_VAR 0 61
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29876: LD_ADDR_VAR 0 62
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29964: LD_ADDR_VAR 0 63
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30052: LD_ADDR_VAR 0 64
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// end ; 1 :
30140: GO 36037
30142: LD_INT 1
30144: DOUBLE
30145: EQUAL
30146: IFTRUE 30150
30148: GO 32773
30150: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30151: LD_ADDR_VAR 0 11
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: LD_INT 3
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 3
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30195: LD_ADDR_VAR 0 12
30199: PUSH
30200: LD_INT 2
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30236: LD_ADDR_VAR 0 13
30240: PUSH
30241: LD_INT 3
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30276: LD_ADDR_VAR 0 14
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30317: LD_ADDR_VAR 0 15
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 3
30335: NEG
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 3
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30361: LD_ADDR_VAR 0 16
30365: PUSH
30366: LD_INT 2
30368: NEG
30369: PUSH
30370: LD_INT 3
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 3
30380: NEG
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30407: LD_ADDR_VAR 0 17
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30451: LD_ADDR_VAR 0 18
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30492: LD_ADDR_VAR 0 19
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30532: LD_ADDR_VAR 0 20
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 3
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: LIST
30572: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30573: LD_ADDR_VAR 0 21
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: NEG
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30617: LD_ADDR_VAR 0 22
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 3
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30663: LD_ADDR_VAR 0 23
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 4
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30707: LD_ADDR_VAR 0 24
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 3
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 4
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30748: LD_ADDR_VAR 0 25
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: LD_INT 3
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: LD_INT 4
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30788: LD_ADDR_VAR 0 26
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: LD_INT 4
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: LD_INT 3
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30829: LD_ADDR_VAR 0 27
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30873: LD_ADDR_VAR 0 28
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: LD_INT 3
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 3
30892: NEG
30893: PUSH
30894: LD_INT 4
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 4
30904: NEG
30905: PUSH
30906: LD_INT 3
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30919: LD_ADDR_VAR 0 29
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 4
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 4
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 3
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: LD_INT 5
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: LD_INT 5
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 4
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: LD_INT 6
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 6
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 5
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31074: LD_ADDR_VAR 0 30
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 3
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 4
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 4
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 4
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 5
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 6
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 6
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31217: LD_ADDR_VAR 0 31
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 3
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: LD_INT 3
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 4
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 4
31264: PUSH
31265: LD_INT 4
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: LD_INT 4
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 5
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: LD_INT 5
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: LD_INT 5
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 6
31314: PUSH
31315: LD_INT 5
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 6
31324: PUSH
31325: LD_INT 6
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 5
31334: PUSH
31335: LD_INT 6
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31356: LD_ADDR_VAR 0 32
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 4
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 4
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 5
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 5
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 4
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 6
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 6
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: LD_INT 5
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31499: LD_ADDR_VAR 0 33
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 3
31517: NEG
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 3
31528: NEG
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 4
31551: NEG
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 4
31562: NEG
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 4
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 5
31585: NEG
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 5
31596: NEG
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 5
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 6
31619: NEG
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 6
31630: NEG
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31654: LD_ADDR_VAR 0 34
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 3
31673: NEG
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 4
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 4
31709: NEG
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 4
31721: NEG
31722: PUSH
31723: LD_INT 4
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: LD_INT 5
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 5
31745: NEG
31746: PUSH
31747: LD_INT 4
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 5
31757: NEG
31758: PUSH
31759: LD_INT 5
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 5
31769: NEG
31770: PUSH
31771: LD_INT 6
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 6
31781: NEG
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 6
31793: NEG
31794: PUSH
31795: LD_INT 6
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31817: LD_ADDR_VAR 0 41
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: LD_INT 2
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31861: LD_ADDR_VAR 0 42
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31902: LD_ADDR_VAR 0 43
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31942: LD_ADDR_VAR 0 44
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31983: LD_ADDR_VAR 0 45
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: LIST
32026: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32027: LD_ADDR_VAR 0 46
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: LD_INT 3
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 3
32058: NEG
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32073: LD_ADDR_VAR 0 47
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: LD_INT 3
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 3
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32106: LD_ADDR_VAR 0 48
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32137: LD_ADDR_VAR 0 49
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32166: LD_ADDR_VAR 0 50
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32195: LD_ADDR_VAR 0 51
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 2
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32226: LD_ADDR_VAR 0 52
32230: PUSH
32231: LD_INT 3
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32259: LD_ADDR_VAR 0 53
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 3
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32303: LD_ADDR_VAR 0 54
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 3
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32344: LD_ADDR_VAR 0 55
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: LD_INT 3
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32384: LD_ADDR_VAR 0 56
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 3
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 3
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32425: LD_ADDR_VAR 0 57
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 3
32443: NEG
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32469: LD_ADDR_VAR 0 58
32473: PUSH
32474: LD_INT 2
32476: NEG
32477: PUSH
32478: LD_INT 3
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 3
32500: NEG
32501: PUSH
32502: LD_INT 3
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32515: LD_ADDR_VAR 0 59
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: LD_INT 2
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32559: LD_ADDR_VAR 0 60
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32600: LD_ADDR_VAR 0 61
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32640: LD_ADDR_VAR 0 62
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32681: LD_ADDR_VAR 0 63
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32725: LD_ADDR_VAR 0 64
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: LD_INT 2
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
// end ; 2 :
32771: GO 36037
32773: LD_INT 2
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32781
32779: GO 36036
32781: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32782: LD_ADDR_VAR 0 29
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 4
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: LD_INT 3
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 4
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 4
32912: PUSH
32913: LD_INT 4
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 4
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 4
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 5
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: LD_INT 4
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 5
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: NEG
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 3
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 3
33110: NEG
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 4
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 4
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 4
33144: NEG
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 4
33167: NEG
33168: PUSH
33169: LD_INT 4
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 4
33179: NEG
33180: PUSH
33181: LD_INT 5
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: LD_INT 4
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 4
33215: NEG
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 5
33227: NEG
33228: PUSH
33229: LD_INT 4
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 5
33239: NEG
33240: PUSH
33241: LD_INT 5
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 5
33263: NEG
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33320: LD_ADDR_VAR 0 30
33324: PUSH
33325: LD_INT 4
33327: PUSH
33328: LD_INT 4
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 4
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 5
33347: PUSH
33348: LD_INT 4
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 5
33357: PUSH
33358: LD_INT 5
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 4
33367: PUSH
33368: LD_INT 5
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 3
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 5
33397: PUSH
33398: LD_INT 3
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 3
33407: PUSH
33408: LD_INT 5
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: LD_INT 4
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: LD_INT 2
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 4
33510: NEG
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 4
33521: NEG
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 3
33544: NEG
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 5
33566: NEG
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 5
33577: NEG
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 5
33589: NEG
33590: PUSH
33591: LD_INT 2
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 3
33601: NEG
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 3
33612: NEG
33613: PUSH
33614: LD_INT 3
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: LD_INT 4
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: LD_INT 3
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 3
33660: NEG
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 4
33672: NEG
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: LD_INT 4
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: NEG
33697: PUSH
33698: LD_INT 4
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: LD_INT 4
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 5
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 4
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: LD_INT 3
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 3
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 4
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 5
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 3
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: NEG
33811: PUSH
33812: LD_INT 5
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33867: LD_ADDR_VAR 0 31
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 4
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 5
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 4
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 5
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 3
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 3
34012: NEG
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 4
34023: NEG
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 4
34034: NEG
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 4
34046: NEG
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 4
34069: NEG
34070: PUSH
34071: LD_INT 4
34073: NEG
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 4
34081: NEG
34082: PUSH
34083: LD_INT 5
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: LD_INT 4
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: LD_INT 3
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 4
34117: NEG
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 5
34129: NEG
34130: PUSH
34131: LD_INT 4
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 5
34141: NEG
34142: PUSH
34143: LD_INT 5
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: LD_INT 5
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 5
34165: NEG
34166: PUSH
34167: LD_INT 3
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: LD_INT 4
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: LD_INT 3
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: LD_INT 4
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: NEG
34268: PUSH
34269: LD_INT 4
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 4
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 4
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 4
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 3
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 5
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34417: LD_ADDR_VAR 0 32
34421: PUSH
34422: LD_INT 4
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 4
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 3
34447: NEG
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 4
34469: NEG
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 5
34480: NEG
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 5
34491: NEG
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 5
34503: NEG
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 3
34515: NEG
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: LD_INT 3
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: LD_INT 4
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: LD_INT 3
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 4
34586: NEG
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 4
34598: NEG
34599: PUSH
34600: LD_INT 4
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 4
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 4
34622: NEG
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 4
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 5
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 4
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 3
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 3
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 4
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 5
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 5
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: LD_INT 4
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 5
34859: PUSH
34860: LD_INT 5
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: LD_INT 5
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 4
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 3
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 5
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34964: LD_ADDR_VAR 0 33
34968: PUSH
34969: LD_INT 4
34971: NEG
34972: PUSH
34973: LD_INT 4
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 4
34983: NEG
34984: PUSH
34985: LD_INT 5
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 3
34995: NEG
34996: PUSH
34997: LD_INT 4
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: LD_INT 3
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 4
35019: NEG
35020: PUSH
35021: LD_INT 3
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 5
35031: NEG
35032: PUSH
35033: LD_INT 4
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 5
35043: NEG
35044: PUSH
35045: LD_INT 5
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: NEG
35056: PUSH
35057: LD_INT 5
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 5
35067: NEG
35068: PUSH
35069: LD_INT 3
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: LD_INT 3
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: LD_INT 4
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: LD_INT 3
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 3
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 4
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 2
35169: NEG
35170: PUSH
35171: LD_INT 4
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 4
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 4
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 5
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 4
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 3
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 5
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 3
35274: PUSH
35275: LD_INT 3
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 4
35294: PUSH
35295: LD_INT 3
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 4
35304: PUSH
35305: LD_INT 4
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: LD_INT 4
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 4
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 4
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 4
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 4
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 5
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 5
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 4
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 3
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 5
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: LD_INT 3
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35502: LD_ADDR_VAR 0 34
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 4
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 5
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 4
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 3
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 3
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 4
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: LD_INT 5
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 3
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 5
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 4
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 4
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 3
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 2
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 4
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 4
35704: PUSH
35705: LD_INT 4
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 4
35714: PUSH
35715: LD_INT 3
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 5
35724: PUSH
35725: LD_INT 4
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 5
35734: PUSH
35735: LD_INT 5
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: PUSH
35745: LD_INT 5
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: PUSH
35755: LD_INT 4
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 3
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 5
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 3
35784: PUSH
35785: LD_INT 5
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: LD_INT 3
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 3
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: LD_INT 4
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 4
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 4
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: NEG
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 4
35887: NEG
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 4
35898: NEG
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 3
35910: NEG
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 4
35932: NEG
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 5
35943: NEG
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 5
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 5
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 3
35978: NEG
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// end ; end ;
36034: GO 36037
36036: POP
// case btype of b_depot , b_warehouse :
36037: LD_VAR 0 1
36041: PUSH
36042: LD_INT 0
36044: DOUBLE
36045: EQUAL
36046: IFTRUE 36056
36048: LD_INT 1
36050: DOUBLE
36051: EQUAL
36052: IFTRUE 36056
36054: GO 36257
36056: POP
// case nation of nation_american :
36057: LD_VAR 0 5
36061: PUSH
36062: LD_INT 1
36064: DOUBLE
36065: EQUAL
36066: IFTRUE 36070
36068: GO 36126
36070: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36071: LD_ADDR_VAR 0 9
36075: PUSH
36076: LD_VAR 0 11
36080: PUSH
36081: LD_VAR 0 12
36085: PUSH
36086: LD_VAR 0 13
36090: PUSH
36091: LD_VAR 0 14
36095: PUSH
36096: LD_VAR 0 15
36100: PUSH
36101: LD_VAR 0 16
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: PUSH
36114: LD_VAR 0 4
36118: PUSH
36119: LD_INT 1
36121: PLUS
36122: ARRAY
36123: ST_TO_ADDR
36124: GO 36255
36126: LD_INT 2
36128: DOUBLE
36129: EQUAL
36130: IFTRUE 36134
36132: GO 36190
36134: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36135: LD_ADDR_VAR 0 9
36139: PUSH
36140: LD_VAR 0 17
36144: PUSH
36145: LD_VAR 0 18
36149: PUSH
36150: LD_VAR 0 19
36154: PUSH
36155: LD_VAR 0 20
36159: PUSH
36160: LD_VAR 0 21
36164: PUSH
36165: LD_VAR 0 22
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: PUSH
36178: LD_VAR 0 4
36182: PUSH
36183: LD_INT 1
36185: PLUS
36186: ARRAY
36187: ST_TO_ADDR
36188: GO 36255
36190: LD_INT 3
36192: DOUBLE
36193: EQUAL
36194: IFTRUE 36198
36196: GO 36254
36198: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36199: LD_ADDR_VAR 0 9
36203: PUSH
36204: LD_VAR 0 23
36208: PUSH
36209: LD_VAR 0 24
36213: PUSH
36214: LD_VAR 0 25
36218: PUSH
36219: LD_VAR 0 26
36223: PUSH
36224: LD_VAR 0 27
36228: PUSH
36229: LD_VAR 0 28
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: PUSH
36242: LD_VAR 0 4
36246: PUSH
36247: LD_INT 1
36249: PLUS
36250: ARRAY
36251: ST_TO_ADDR
36252: GO 36255
36254: POP
36255: GO 36810
36257: LD_INT 2
36259: DOUBLE
36260: EQUAL
36261: IFTRUE 36271
36263: LD_INT 3
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36327
36271: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36272: LD_ADDR_VAR 0 9
36276: PUSH
36277: LD_VAR 0 29
36281: PUSH
36282: LD_VAR 0 30
36286: PUSH
36287: LD_VAR 0 31
36291: PUSH
36292: LD_VAR 0 32
36296: PUSH
36297: LD_VAR 0 33
36301: PUSH
36302: LD_VAR 0 34
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: PUSH
36315: LD_VAR 0 4
36319: PUSH
36320: LD_INT 1
36322: PLUS
36323: ARRAY
36324: ST_TO_ADDR
36325: GO 36810
36327: LD_INT 16
36329: DOUBLE
36330: EQUAL
36331: IFTRUE 36389
36333: LD_INT 17
36335: DOUBLE
36336: EQUAL
36337: IFTRUE 36389
36339: LD_INT 18
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36389
36345: LD_INT 19
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36389
36351: LD_INT 22
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36389
36357: LD_INT 20
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36389
36363: LD_INT 21
36365: DOUBLE
36366: EQUAL
36367: IFTRUE 36389
36369: LD_INT 23
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36389
36375: LD_INT 24
36377: DOUBLE
36378: EQUAL
36379: IFTRUE 36389
36381: LD_INT 25
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36445
36389: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36390: LD_ADDR_VAR 0 9
36394: PUSH
36395: LD_VAR 0 35
36399: PUSH
36400: LD_VAR 0 36
36404: PUSH
36405: LD_VAR 0 37
36409: PUSH
36410: LD_VAR 0 38
36414: PUSH
36415: LD_VAR 0 39
36419: PUSH
36420: LD_VAR 0 40
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 1
36440: PLUS
36441: ARRAY
36442: ST_TO_ADDR
36443: GO 36810
36445: LD_INT 6
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36501
36451: LD_INT 7
36453: DOUBLE
36454: EQUAL
36455: IFTRUE 36501
36457: LD_INT 8
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36501
36463: LD_INT 13
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36501
36469: LD_INT 12
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36501
36475: LD_INT 15
36477: DOUBLE
36478: EQUAL
36479: IFTRUE 36501
36481: LD_INT 11
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36501
36487: LD_INT 14
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36501
36493: LD_INT 10
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36501
36499: GO 36557
36501: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36502: LD_ADDR_VAR 0 9
36506: PUSH
36507: LD_VAR 0 41
36511: PUSH
36512: LD_VAR 0 42
36516: PUSH
36517: LD_VAR 0 43
36521: PUSH
36522: LD_VAR 0 44
36526: PUSH
36527: LD_VAR 0 45
36531: PUSH
36532: LD_VAR 0 46
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: PUSH
36545: LD_VAR 0 4
36549: PUSH
36550: LD_INT 1
36552: PLUS
36553: ARRAY
36554: ST_TO_ADDR
36555: GO 36810
36557: LD_INT 36
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36621
36565: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36566: LD_ADDR_VAR 0 9
36570: PUSH
36571: LD_VAR 0 47
36575: PUSH
36576: LD_VAR 0 48
36580: PUSH
36581: LD_VAR 0 49
36585: PUSH
36586: LD_VAR 0 50
36590: PUSH
36591: LD_VAR 0 51
36595: PUSH
36596: LD_VAR 0 52
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: PUSH
36609: LD_VAR 0 4
36613: PUSH
36614: LD_INT 1
36616: PLUS
36617: ARRAY
36618: ST_TO_ADDR
36619: GO 36810
36621: LD_INT 4
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36647
36627: LD_INT 5
36629: DOUBLE
36630: EQUAL
36631: IFTRUE 36647
36633: LD_INT 34
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36647
36639: LD_INT 37
36641: DOUBLE
36642: EQUAL
36643: IFTRUE 36647
36645: GO 36703
36647: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36648: LD_ADDR_VAR 0 9
36652: PUSH
36653: LD_VAR 0 53
36657: PUSH
36658: LD_VAR 0 54
36662: PUSH
36663: LD_VAR 0 55
36667: PUSH
36668: LD_VAR 0 56
36672: PUSH
36673: LD_VAR 0 57
36677: PUSH
36678: LD_VAR 0 58
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: PUSH
36691: LD_VAR 0 4
36695: PUSH
36696: LD_INT 1
36698: PLUS
36699: ARRAY
36700: ST_TO_ADDR
36701: GO 36810
36703: LD_INT 31
36705: DOUBLE
36706: EQUAL
36707: IFTRUE 36753
36709: LD_INT 32
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36753
36715: LD_INT 33
36717: DOUBLE
36718: EQUAL
36719: IFTRUE 36753
36721: LD_INT 27
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36753
36727: LD_INT 26
36729: DOUBLE
36730: EQUAL
36731: IFTRUE 36753
36733: LD_INT 28
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36753
36739: LD_INT 29
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36753
36745: LD_INT 30
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36753
36751: GO 36809
36753: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36754: LD_ADDR_VAR 0 9
36758: PUSH
36759: LD_VAR 0 59
36763: PUSH
36764: LD_VAR 0 60
36768: PUSH
36769: LD_VAR 0 61
36773: PUSH
36774: LD_VAR 0 62
36778: PUSH
36779: LD_VAR 0 63
36783: PUSH
36784: LD_VAR 0 64
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: PUSH
36797: LD_VAR 0 4
36801: PUSH
36802: LD_INT 1
36804: PLUS
36805: ARRAY
36806: ST_TO_ADDR
36807: GO 36810
36809: POP
// temp_list2 = [ ] ;
36810: LD_ADDR_VAR 0 10
36814: PUSH
36815: EMPTY
36816: ST_TO_ADDR
// for i in temp_list do
36817: LD_ADDR_VAR 0 8
36821: PUSH
36822: LD_VAR 0 9
36826: PUSH
36827: FOR_IN
36828: IFFALSE 36880
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36830: LD_ADDR_VAR 0 10
36834: PUSH
36835: LD_VAR 0 10
36839: PUSH
36840: LD_VAR 0 8
36844: PUSH
36845: LD_INT 1
36847: ARRAY
36848: PUSH
36849: LD_VAR 0 2
36853: PLUS
36854: PUSH
36855: LD_VAR 0 8
36859: PUSH
36860: LD_INT 2
36862: ARRAY
36863: PUSH
36864: LD_VAR 0 3
36868: PLUS
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: ADD
36877: ST_TO_ADDR
36878: GO 36827
36880: POP
36881: POP
// result = temp_list2 ;
36882: LD_ADDR_VAR 0 7
36886: PUSH
36887: LD_VAR 0 10
36891: ST_TO_ADDR
// end ;
36892: LD_VAR 0 7
36896: RET
// export function EnemyInRange ( unit , dist ) ; begin
36897: LD_INT 0
36899: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36900: LD_ADDR_VAR 0 3
36904: PUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 255
36914: PPUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 250
36924: PPUSH
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL_OW 251
36934: PPUSH
36935: LD_VAR 0 2
36939: PPUSH
36940: CALL 10154 0 4
36944: PUSH
36945: LD_INT 4
36947: ARRAY
36948: ST_TO_ADDR
// end ;
36949: LD_VAR 0 3
36953: RET
// export function PlayerSeeMe ( unit ) ; begin
36954: LD_INT 0
36956: PPUSH
// result := See ( your_side , unit ) ;
36957: LD_ADDR_VAR 0 2
36961: PUSH
36962: LD_OWVAR 2
36966: PPUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 292
36976: ST_TO_ADDR
// end ;
36977: LD_VAR 0 2
36981: RET
// export function ReverseDir ( unit ) ; begin
36982: LD_INT 0
36984: PPUSH
// if not unit then
36985: LD_VAR 0 1
36989: NOT
36990: IFFALSE 36994
// exit ;
36992: GO 37017
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36994: LD_ADDR_VAR 0 2
36998: PUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL_OW 254
37008: PUSH
37009: LD_INT 3
37011: PLUS
37012: PUSH
37013: LD_INT 6
37015: MOD
37016: ST_TO_ADDR
// end ;
37017: LD_VAR 0 2
37021: RET
// export function ReverseArray ( array ) ; var i ; begin
37022: LD_INT 0
37024: PPUSH
37025: PPUSH
// if not array then
37026: LD_VAR 0 1
37030: NOT
37031: IFFALSE 37035
// exit ;
37033: GO 37090
// result := [ ] ;
37035: LD_ADDR_VAR 0 2
37039: PUSH
37040: EMPTY
37041: ST_TO_ADDR
// for i := array downto 1 do
37042: LD_ADDR_VAR 0 3
37046: PUSH
37047: DOUBLE
37048: LD_VAR 0 1
37052: INC
37053: ST_TO_ADDR
37054: LD_INT 1
37056: PUSH
37057: FOR_DOWNTO
37058: IFFALSE 37088
// result := Join ( result , array [ i ] ) ;
37060: LD_ADDR_VAR 0 2
37064: PUSH
37065: LD_VAR 0 2
37069: PPUSH
37070: LD_VAR 0 1
37074: PUSH
37075: LD_VAR 0 3
37079: ARRAY
37080: PPUSH
37081: CALL 41942 0 2
37085: ST_TO_ADDR
37086: GO 37057
37088: POP
37089: POP
// end ;
37090: LD_VAR 0 2
37094: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37095: LD_INT 0
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
// if not unit or not hexes then
37103: LD_VAR 0 1
37107: NOT
37108: IFTRUE 37117
37110: PUSH
37111: LD_VAR 0 2
37115: NOT
37116: OR
37117: IFFALSE 37121
// exit ;
37119: GO 37244
// dist := 9999 ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_INT 9999
37128: ST_TO_ADDR
// for i = 1 to hexes do
37129: LD_ADDR_VAR 0 4
37133: PUSH
37134: DOUBLE
37135: LD_INT 1
37137: DEC
37138: ST_TO_ADDR
37139: LD_VAR 0 2
37143: PUSH
37144: FOR_TO
37145: IFFALSE 37232
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37147: LD_ADDR_VAR 0 6
37151: PUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: LD_VAR 0 2
37161: PUSH
37162: LD_VAR 0 4
37166: ARRAY
37167: PUSH
37168: LD_INT 1
37170: ARRAY
37171: PPUSH
37172: LD_VAR 0 2
37176: PUSH
37177: LD_VAR 0 4
37181: ARRAY
37182: PUSH
37183: LD_INT 2
37185: ARRAY
37186: PPUSH
37187: CALL_OW 297
37191: ST_TO_ADDR
// if tdist < dist then
37192: LD_VAR 0 6
37196: PUSH
37197: LD_VAR 0 5
37201: LESS
37202: IFFALSE 37230
// begin hex := hexes [ i ] ;
37204: LD_ADDR_VAR 0 8
37208: PUSH
37209: LD_VAR 0 2
37213: PUSH
37214: LD_VAR 0 4
37218: ARRAY
37219: ST_TO_ADDR
// dist := tdist ;
37220: LD_ADDR_VAR 0 5
37224: PUSH
37225: LD_VAR 0 6
37229: ST_TO_ADDR
// end ; end ;
37230: GO 37144
37232: POP
37233: POP
// result := hex ;
37234: LD_ADDR_VAR 0 3
37238: PUSH
37239: LD_VAR 0 8
37243: ST_TO_ADDR
// end ;
37244: LD_VAR 0 3
37248: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37249: LD_INT 0
37251: PPUSH
37252: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37253: LD_VAR 0 1
37257: NOT
37258: IFTRUE 37297
37260: PUSH
37261: LD_VAR 0 1
37265: PUSH
37266: LD_INT 21
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 23
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 69
37294: IN
37295: NOT
37296: OR
37297: IFFALSE 37301
// exit ;
37299: GO 37348
// for i = 1 to 3 do
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: DOUBLE
37307: LD_INT 1
37309: DEC
37310: ST_TO_ADDR
37311: LD_INT 3
37313: PUSH
37314: FOR_TO
37315: IFFALSE 37346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37317: LD_VAR 0 1
37321: PPUSH
37322: CALL_OW 250
37326: PPUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 251
37336: PPUSH
37337: LD_INT 1
37339: PPUSH
37340: CALL_OW 453
37344: GO 37314
37346: POP
37347: POP
// end ;
37348: LD_VAR 0 2
37352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37353: LD_INT 0
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
37360: PPUSH
// if not unit or not enemy_unit then
37361: LD_VAR 0 1
37365: NOT
37366: IFTRUE 37375
37368: PUSH
37369: LD_VAR 0 2
37373: NOT
37374: OR
37375: IFFALSE 37379
// exit ;
37377: GO 37860
// if GetLives ( i ) < 250 then
37379: LD_VAR 0 4
37383: PPUSH
37384: CALL_OW 256
37388: PUSH
37389: LD_INT 250
37391: LESS
37392: IFFALSE 37405
// begin ComAutodestruct ( i ) ;
37394: LD_VAR 0 4
37398: PPUSH
37399: CALL 37249 0 1
// exit ;
37403: GO 37860
// end ; x := GetX ( enemy_unit ) ;
37405: LD_ADDR_VAR 0 7
37409: PUSH
37410: LD_VAR 0 2
37414: PPUSH
37415: CALL_OW 250
37419: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37420: LD_ADDR_VAR 0 8
37424: PUSH
37425: LD_VAR 0 2
37429: PPUSH
37430: CALL_OW 251
37434: ST_TO_ADDR
// if not x or not y then
37435: LD_VAR 0 7
37439: NOT
37440: IFTRUE 37449
37442: PUSH
37443: LD_VAR 0 8
37447: NOT
37448: OR
37449: IFFALSE 37453
// exit ;
37451: GO 37860
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37453: LD_ADDR_VAR 0 6
37457: PUSH
37458: LD_VAR 0 7
37462: PPUSH
37463: LD_INT 0
37465: PPUSH
37466: LD_INT 4
37468: PPUSH
37469: CALL_OW 272
37473: PUSH
37474: LD_VAR 0 8
37478: PPUSH
37479: LD_INT 0
37481: PPUSH
37482: LD_INT 4
37484: PPUSH
37485: CALL_OW 273
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_VAR 0 7
37498: PPUSH
37499: LD_INT 1
37501: PPUSH
37502: LD_INT 4
37504: PPUSH
37505: CALL_OW 272
37509: PUSH
37510: LD_VAR 0 8
37514: PPUSH
37515: LD_INT 1
37517: PPUSH
37518: LD_INT 4
37520: PPUSH
37521: CALL_OW 273
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_VAR 0 7
37534: PPUSH
37535: LD_INT 2
37537: PPUSH
37538: LD_INT 4
37540: PPUSH
37541: CALL_OW 272
37545: PUSH
37546: LD_VAR 0 8
37550: PPUSH
37551: LD_INT 2
37553: PPUSH
37554: LD_INT 4
37556: PPUSH
37557: CALL_OW 273
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_VAR 0 7
37570: PPUSH
37571: LD_INT 3
37573: PPUSH
37574: LD_INT 4
37576: PPUSH
37577: CALL_OW 272
37581: PUSH
37582: LD_VAR 0 8
37586: PPUSH
37587: LD_INT 3
37589: PPUSH
37590: LD_INT 4
37592: PPUSH
37593: CALL_OW 273
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_VAR 0 7
37606: PPUSH
37607: LD_INT 4
37609: PPUSH
37610: LD_INT 4
37612: PPUSH
37613: CALL_OW 272
37617: PUSH
37618: LD_VAR 0 8
37622: PPUSH
37623: LD_INT 4
37625: PPUSH
37626: LD_INT 4
37628: PPUSH
37629: CALL_OW 273
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_VAR 0 7
37642: PPUSH
37643: LD_INT 5
37645: PPUSH
37646: LD_INT 4
37648: PPUSH
37649: CALL_OW 272
37653: PUSH
37654: LD_VAR 0 8
37658: PPUSH
37659: LD_INT 5
37661: PPUSH
37662: LD_INT 4
37664: PPUSH
37665: CALL_OW 273
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// for i = tmp downto 1 do
37682: LD_ADDR_VAR 0 4
37686: PUSH
37687: DOUBLE
37688: LD_VAR 0 6
37692: INC
37693: ST_TO_ADDR
37694: LD_INT 1
37696: PUSH
37697: FOR_DOWNTO
37698: IFFALSE 37801
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37700: LD_VAR 0 6
37704: PUSH
37705: LD_VAR 0 4
37709: ARRAY
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: PPUSH
37715: LD_VAR 0 6
37719: PUSH
37720: LD_VAR 0 4
37724: ARRAY
37725: PUSH
37726: LD_INT 2
37728: ARRAY
37729: PPUSH
37730: CALL_OW 488
37734: NOT
37735: IFTRUE 37777
37737: PUSH
37738: LD_VAR 0 6
37742: PUSH
37743: LD_VAR 0 4
37747: ARRAY
37748: PUSH
37749: LD_INT 1
37751: ARRAY
37752: PPUSH
37753: LD_VAR 0 6
37757: PUSH
37758: LD_VAR 0 4
37762: ARRAY
37763: PUSH
37764: LD_INT 2
37766: ARRAY
37767: PPUSH
37768: CALL_OW 428
37772: PUSH
37773: LD_INT 0
37775: NONEQUAL
37776: OR
37777: IFFALSE 37799
// tmp := Delete ( tmp , i ) ;
37779: LD_ADDR_VAR 0 6
37783: PUSH
37784: LD_VAR 0 6
37788: PPUSH
37789: LD_VAR 0 4
37793: PPUSH
37794: CALL_OW 3
37798: ST_TO_ADDR
37799: GO 37697
37801: POP
37802: POP
// j := GetClosestHex ( unit , tmp ) ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: LD_VAR 0 6
37817: PPUSH
37818: CALL 37095 0 2
37822: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37823: LD_VAR 0 1
37827: PPUSH
37828: LD_VAR 0 5
37832: PUSH
37833: LD_INT 1
37835: ARRAY
37836: PPUSH
37837: LD_VAR 0 5
37841: PUSH
37842: LD_INT 2
37844: ARRAY
37845: PPUSH
37846: CALL_OW 111
// result := j ;
37850: LD_ADDR_VAR 0 3
37854: PUSH
37855: LD_VAR 0 5
37859: ST_TO_ADDR
// end ;
37860: LD_VAR 0 3
37864: RET
// export function PrepareApemanSoldier ( ) ; begin
37865: LD_INT 0
37867: PPUSH
// uc_nation := 0 ;
37868: LD_ADDR_OWVAR 21
37872: PUSH
37873: LD_INT 0
37875: ST_TO_ADDR
// hc_sex := sex_male ;
37876: LD_ADDR_OWVAR 27
37880: PUSH
37881: LD_INT 1
37883: ST_TO_ADDR
// hc_name :=  ;
37884: LD_ADDR_OWVAR 26
37888: PUSH
37889: LD_STRING 
37891: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37892: LD_ADDR_OWVAR 28
37896: PUSH
37897: LD_INT 15
37899: ST_TO_ADDR
// hc_gallery :=  ;
37900: LD_ADDR_OWVAR 33
37904: PUSH
37905: LD_STRING 
37907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37908: LD_ADDR_OWVAR 31
37912: PUSH
37913: LD_INT 0
37915: PPUSH
37916: LD_INT 3
37918: PPUSH
37919: CALL_OW 12
37923: PUSH
37924: LD_INT 0
37926: PPUSH
37927: LD_INT 3
37929: PPUSH
37930: CALL_OW 12
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37947: LD_ADDR_OWVAR 29
37951: PUSH
37952: LD_INT 10
37954: PUSH
37955: LD_INT 12
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// end ;
37962: LD_VAR 0 1
37966: RET
// export function PrepareApemanEngineer ( ) ; begin
37967: LD_INT 0
37969: PPUSH
// uc_nation := 0 ;
37970: LD_ADDR_OWVAR 21
37974: PUSH
37975: LD_INT 0
37977: ST_TO_ADDR
// hc_sex := sex_male ;
37978: LD_ADDR_OWVAR 27
37982: PUSH
37983: LD_INT 1
37985: ST_TO_ADDR
// hc_name :=  ;
37986: LD_ADDR_OWVAR 26
37990: PUSH
37991: LD_STRING 
37993: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37994: LD_ADDR_OWVAR 28
37998: PUSH
37999: LD_INT 16
38001: ST_TO_ADDR
// hc_gallery :=  ;
38002: LD_ADDR_OWVAR 33
38006: PUSH
38007: LD_STRING 
38009: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38010: LD_ADDR_OWVAR 31
38014: PUSH
38015: LD_INT 0
38017: PPUSH
38018: LD_INT 3
38020: PPUSH
38021: CALL_OW 12
38025: PUSH
38026: LD_INT 0
38028: PPUSH
38029: LD_INT 3
38031: PPUSH
38032: CALL_OW 12
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
38049: LD_ADDR_OWVAR 29
38053: PUSH
38054: LD_INT 10
38056: PUSH
38057: LD_INT 12
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: ST_TO_ADDR
// end ;
38064: LD_VAR 0 1
38068: RET
// export function PrepareApeman ( agressivity ) ; begin
38069: LD_INT 0
38071: PPUSH
// uc_side := 0 ;
38072: LD_ADDR_OWVAR 20
38076: PUSH
38077: LD_INT 0
38079: ST_TO_ADDR
// uc_nation := 0 ;
38080: LD_ADDR_OWVAR 21
38084: PUSH
38085: LD_INT 0
38087: ST_TO_ADDR
// hc_sex := sex_male ;
38088: LD_ADDR_OWVAR 27
38092: PUSH
38093: LD_INT 1
38095: ST_TO_ADDR
// hc_class := class_apeman ;
38096: LD_ADDR_OWVAR 28
38100: PUSH
38101: LD_INT 12
38103: ST_TO_ADDR
// hc_gallery :=  ;
38104: LD_ADDR_OWVAR 33
38108: PUSH
38109: LD_STRING 
38111: ST_TO_ADDR
// hc_name :=  ;
38112: LD_ADDR_OWVAR 26
38116: PUSH
38117: LD_STRING 
38119: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
38120: LD_ADDR_OWVAR 29
38124: PUSH
38125: LD_INT 10
38127: PUSH
38128: LD_INT 12
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if agressivity = 0 then
38135: LD_VAR 0 1
38139: PUSH
38140: LD_INT 0
38142: EQUAL
38143: IFFALSE 38155
// hc_agressivity := 0 else
38145: LD_ADDR_OWVAR 35
38149: PUSH
38150: LD_INT 0
38152: ST_TO_ADDR
38153: GO 38176
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38155: LD_ADDR_OWVAR 35
38159: PUSH
38160: LD_VAR 0 1
38164: NEG
38165: PPUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 12
38175: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38176: LD_ADDR_OWVAR 31
38180: PUSH
38181: LD_INT 0
38183: PPUSH
38184: LD_INT 3
38186: PPUSH
38187: CALL_OW 12
38191: PUSH
38192: LD_INT 0
38194: PPUSH
38195: LD_INT 3
38197: PPUSH
38198: CALL_OW 12
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: ST_TO_ADDR
// end ;
38215: LD_VAR 0 2
38219: RET
// export function PrepareTiger ( agressivity ) ; begin
38220: LD_INT 0
38222: PPUSH
// uc_side := 0 ;
38223: LD_ADDR_OWVAR 20
38227: PUSH
38228: LD_INT 0
38230: ST_TO_ADDR
// uc_nation := 0 ;
38231: LD_ADDR_OWVAR 21
38235: PUSH
38236: LD_INT 0
38238: ST_TO_ADDR
// InitHc ;
38239: CALL_OW 19
// hc_class := class_tiger ;
38243: LD_ADDR_OWVAR 28
38247: PUSH
38248: LD_INT 14
38250: ST_TO_ADDR
// hc_gallery :=  ;
38251: LD_ADDR_OWVAR 33
38255: PUSH
38256: LD_STRING 
38258: ST_TO_ADDR
// hc_name :=  ;
38259: LD_ADDR_OWVAR 26
38263: PUSH
38264: LD_STRING 
38266: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38267: LD_ADDR_OWVAR 35
38271: PUSH
38272: LD_VAR 0 1
38276: NEG
38277: PPUSH
38278: LD_VAR 0 1
38282: PPUSH
38283: CALL_OW 12
38287: ST_TO_ADDR
// end ;
38288: LD_VAR 0 2
38292: RET
// export function PrepareEnchidna ( ) ; begin
38293: LD_INT 0
38295: PPUSH
// uc_side := 0 ;
38296: LD_ADDR_OWVAR 20
38300: PUSH
38301: LD_INT 0
38303: ST_TO_ADDR
// uc_nation := 0 ;
38304: LD_ADDR_OWVAR 21
38308: PUSH
38309: LD_INT 0
38311: ST_TO_ADDR
// InitHc ;
38312: CALL_OW 19
// hc_class := class_baggie ;
38316: LD_ADDR_OWVAR 28
38320: PUSH
38321: LD_INT 13
38323: ST_TO_ADDR
// hc_gallery :=  ;
38324: LD_ADDR_OWVAR 33
38328: PUSH
38329: LD_STRING 
38331: ST_TO_ADDR
// hc_name :=  ;
38332: LD_ADDR_OWVAR 26
38336: PUSH
38337: LD_STRING 
38339: ST_TO_ADDR
// end ;
38340: LD_VAR 0 1
38344: RET
// export function PrepareFrog ( ) ; begin
38345: LD_INT 0
38347: PPUSH
// uc_side := 0 ;
38348: LD_ADDR_OWVAR 20
38352: PUSH
38353: LD_INT 0
38355: ST_TO_ADDR
// uc_nation := 0 ;
38356: LD_ADDR_OWVAR 21
38360: PUSH
38361: LD_INT 0
38363: ST_TO_ADDR
// InitHc ;
38364: CALL_OW 19
// hc_class := class_frog ;
38368: LD_ADDR_OWVAR 28
38372: PUSH
38373: LD_INT 19
38375: ST_TO_ADDR
// hc_gallery :=  ;
38376: LD_ADDR_OWVAR 33
38380: PUSH
38381: LD_STRING 
38383: ST_TO_ADDR
// hc_name :=  ;
38384: LD_ADDR_OWVAR 26
38388: PUSH
38389: LD_STRING 
38391: ST_TO_ADDR
// end ;
38392: LD_VAR 0 1
38396: RET
// export function PrepareFish ( ) ; begin
38397: LD_INT 0
38399: PPUSH
// uc_side := 0 ;
38400: LD_ADDR_OWVAR 20
38404: PUSH
38405: LD_INT 0
38407: ST_TO_ADDR
// uc_nation := 0 ;
38408: LD_ADDR_OWVAR 21
38412: PUSH
38413: LD_INT 0
38415: ST_TO_ADDR
// InitHc ;
38416: CALL_OW 19
// hc_class := class_fish ;
38420: LD_ADDR_OWVAR 28
38424: PUSH
38425: LD_INT 20
38427: ST_TO_ADDR
// hc_gallery :=  ;
38428: LD_ADDR_OWVAR 33
38432: PUSH
38433: LD_STRING 
38435: ST_TO_ADDR
// hc_name :=  ;
38436: LD_ADDR_OWVAR 26
38440: PUSH
38441: LD_STRING 
38443: ST_TO_ADDR
// end ;
38444: LD_VAR 0 1
38448: RET
// export function PrepareBird ( ) ; begin
38449: LD_INT 0
38451: PPUSH
// uc_side := 0 ;
38452: LD_ADDR_OWVAR 20
38456: PUSH
38457: LD_INT 0
38459: ST_TO_ADDR
// uc_nation := 0 ;
38460: LD_ADDR_OWVAR 21
38464: PUSH
38465: LD_INT 0
38467: ST_TO_ADDR
// InitHc ;
38468: CALL_OW 19
// hc_class := class_phororhacos ;
38472: LD_ADDR_OWVAR 28
38476: PUSH
38477: LD_INT 18
38479: ST_TO_ADDR
// hc_gallery :=  ;
38480: LD_ADDR_OWVAR 33
38484: PUSH
38485: LD_STRING 
38487: ST_TO_ADDR
// hc_name :=  ;
38488: LD_ADDR_OWVAR 26
38492: PUSH
38493: LD_STRING 
38495: ST_TO_ADDR
// end ;
38496: LD_VAR 0 1
38500: RET
// export function PrepareHorse ( ) ; begin
38501: LD_INT 0
38503: PPUSH
// uc_side := 0 ;
38504: LD_ADDR_OWVAR 20
38508: PUSH
38509: LD_INT 0
38511: ST_TO_ADDR
// uc_nation := 0 ;
38512: LD_ADDR_OWVAR 21
38516: PUSH
38517: LD_INT 0
38519: ST_TO_ADDR
// InitHc ;
38520: CALL_OW 19
// hc_class := class_horse ;
38524: LD_ADDR_OWVAR 28
38528: PUSH
38529: LD_INT 21
38531: ST_TO_ADDR
// hc_gallery :=  ;
38532: LD_ADDR_OWVAR 33
38536: PUSH
38537: LD_STRING 
38539: ST_TO_ADDR
// hc_name :=  ;
38540: LD_ADDR_OWVAR 26
38544: PUSH
38545: LD_STRING 
38547: ST_TO_ADDR
// end ;
38548: LD_VAR 0 1
38552: RET
// export function PrepareMastodont ( ) ; begin
38553: LD_INT 0
38555: PPUSH
// uc_side := 0 ;
38556: LD_ADDR_OWVAR 20
38560: PUSH
38561: LD_INT 0
38563: ST_TO_ADDR
// uc_nation := 0 ;
38564: LD_ADDR_OWVAR 21
38568: PUSH
38569: LD_INT 0
38571: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38572: LD_ADDR_OWVAR 37
38576: PUSH
38577: LD_INT 31
38579: ST_TO_ADDR
// vc_control := control_rider ;
38580: LD_ADDR_OWVAR 38
38584: PUSH
38585: LD_INT 4
38587: ST_TO_ADDR
// end ;
38588: LD_VAR 0 1
38592: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38593: LD_INT 0
38595: PPUSH
38596: PPUSH
38597: PPUSH
// uc_side = 0 ;
38598: LD_ADDR_OWVAR 20
38602: PUSH
38603: LD_INT 0
38605: ST_TO_ADDR
// uc_nation = 0 ;
38606: LD_ADDR_OWVAR 21
38610: PUSH
38611: LD_INT 0
38613: ST_TO_ADDR
// InitHc_All ( ) ;
38614: CALL_OW 584
// InitVc ;
38618: CALL_OW 20
// if mastodonts then
38622: LD_VAR 0 6
38626: IFFALSE 38693
// for i = 1 to mastodonts do
38628: LD_ADDR_VAR 0 11
38632: PUSH
38633: DOUBLE
38634: LD_INT 1
38636: DEC
38637: ST_TO_ADDR
38638: LD_VAR 0 6
38642: PUSH
38643: FOR_TO
38644: IFFALSE 38691
// begin vc_chassis := 31 ;
38646: LD_ADDR_OWVAR 37
38650: PUSH
38651: LD_INT 31
38653: ST_TO_ADDR
// vc_control := control_rider ;
38654: LD_ADDR_OWVAR 38
38658: PUSH
38659: LD_INT 4
38661: ST_TO_ADDR
// animal := CreateVehicle ;
38662: LD_ADDR_VAR 0 12
38666: PUSH
38667: CALL_OW 45
38671: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38672: LD_VAR 0 12
38676: PPUSH
38677: LD_VAR 0 8
38681: PPUSH
38682: LD_INT 0
38684: PPUSH
38685: CALL 40835 0 3
// end ;
38689: GO 38643
38691: POP
38692: POP
// if horses then
38693: LD_VAR 0 5
38697: IFFALSE 38764
// for i = 1 to horses do
38699: LD_ADDR_VAR 0 11
38703: PUSH
38704: DOUBLE
38705: LD_INT 1
38707: DEC
38708: ST_TO_ADDR
38709: LD_VAR 0 5
38713: PUSH
38714: FOR_TO
38715: IFFALSE 38762
// begin hc_class := 21 ;
38717: LD_ADDR_OWVAR 28
38721: PUSH
38722: LD_INT 21
38724: ST_TO_ADDR
// hc_gallery :=  ;
38725: LD_ADDR_OWVAR 33
38729: PUSH
38730: LD_STRING 
38732: ST_TO_ADDR
// animal := CreateHuman ;
38733: LD_ADDR_VAR 0 12
38737: PUSH
38738: CALL_OW 44
38742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38743: LD_VAR 0 12
38747: PPUSH
38748: LD_VAR 0 8
38752: PPUSH
38753: LD_INT 0
38755: PPUSH
38756: CALL 40835 0 3
// end ;
38760: GO 38714
38762: POP
38763: POP
// if birds then
38764: LD_VAR 0 1
38768: IFFALSE 38835
// for i = 1 to birds do
38770: LD_ADDR_VAR 0 11
38774: PUSH
38775: DOUBLE
38776: LD_INT 1
38778: DEC
38779: ST_TO_ADDR
38780: LD_VAR 0 1
38784: PUSH
38785: FOR_TO
38786: IFFALSE 38833
// begin hc_class := 18 ;
38788: LD_ADDR_OWVAR 28
38792: PUSH
38793: LD_INT 18
38795: ST_TO_ADDR
// hc_gallery =  ;
38796: LD_ADDR_OWVAR 33
38800: PUSH
38801: LD_STRING 
38803: ST_TO_ADDR
// animal := CreateHuman ;
38804: LD_ADDR_VAR 0 12
38808: PUSH
38809: CALL_OW 44
38813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38814: LD_VAR 0 12
38818: PPUSH
38819: LD_VAR 0 8
38823: PPUSH
38824: LD_INT 0
38826: PPUSH
38827: CALL 40835 0 3
// end ;
38831: GO 38785
38833: POP
38834: POP
// if tigers then
38835: LD_VAR 0 2
38839: IFFALSE 38923
// for i = 1 to tigers do
38841: LD_ADDR_VAR 0 11
38845: PUSH
38846: DOUBLE
38847: LD_INT 1
38849: DEC
38850: ST_TO_ADDR
38851: LD_VAR 0 2
38855: PUSH
38856: FOR_TO
38857: IFFALSE 38921
// begin hc_class = class_tiger ;
38859: LD_ADDR_OWVAR 28
38863: PUSH
38864: LD_INT 14
38866: ST_TO_ADDR
// hc_gallery =  ;
38867: LD_ADDR_OWVAR 33
38871: PUSH
38872: LD_STRING 
38874: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38875: LD_ADDR_OWVAR 35
38879: PUSH
38880: LD_INT 7
38882: NEG
38883: PPUSH
38884: LD_INT 7
38886: PPUSH
38887: CALL_OW 12
38891: ST_TO_ADDR
// animal := CreateHuman ;
38892: LD_ADDR_VAR 0 12
38896: PUSH
38897: CALL_OW 44
38901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38902: LD_VAR 0 12
38906: PPUSH
38907: LD_VAR 0 8
38911: PPUSH
38912: LD_INT 0
38914: PPUSH
38915: CALL 40835 0 3
// end ;
38919: GO 38856
38921: POP
38922: POP
// if apemans then
38923: LD_VAR 0 3
38927: IFFALSE 39050
// for i = 1 to apemans do
38929: LD_ADDR_VAR 0 11
38933: PUSH
38934: DOUBLE
38935: LD_INT 1
38937: DEC
38938: ST_TO_ADDR
38939: LD_VAR 0 3
38943: PUSH
38944: FOR_TO
38945: IFFALSE 39048
// begin hc_class = class_apeman ;
38947: LD_ADDR_OWVAR 28
38951: PUSH
38952: LD_INT 12
38954: ST_TO_ADDR
// hc_gallery =  ;
38955: LD_ADDR_OWVAR 33
38959: PUSH
38960: LD_STRING 
38962: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38963: LD_ADDR_OWVAR 35
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PPUSH
38972: LD_INT 2
38974: PPUSH
38975: CALL_OW 12
38979: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38980: LD_ADDR_OWVAR 31
38984: PUSH
38985: LD_INT 1
38987: PPUSH
38988: LD_INT 3
38990: PPUSH
38991: CALL_OW 12
38995: PUSH
38996: LD_INT 1
38998: PPUSH
38999: LD_INT 3
39001: PPUSH
39002: CALL_OW 12
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// animal := CreateHuman ;
39019: LD_ADDR_VAR 0 12
39023: PUSH
39024: CALL_OW 44
39028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39029: LD_VAR 0 12
39033: PPUSH
39034: LD_VAR 0 8
39038: PPUSH
39039: LD_INT 0
39041: PPUSH
39042: CALL 40835 0 3
// end ;
39046: GO 38944
39048: POP
39049: POP
// if enchidnas then
39050: LD_VAR 0 4
39054: IFFALSE 39121
// for i = 1 to enchidnas do
39056: LD_ADDR_VAR 0 11
39060: PUSH
39061: DOUBLE
39062: LD_INT 1
39064: DEC
39065: ST_TO_ADDR
39066: LD_VAR 0 4
39070: PUSH
39071: FOR_TO
39072: IFFALSE 39119
// begin hc_class = 13 ;
39074: LD_ADDR_OWVAR 28
39078: PUSH
39079: LD_INT 13
39081: ST_TO_ADDR
// hc_gallery =  ;
39082: LD_ADDR_OWVAR 33
39086: PUSH
39087: LD_STRING 
39089: ST_TO_ADDR
// animal := CreateHuman ;
39090: LD_ADDR_VAR 0 12
39094: PUSH
39095: CALL_OW 44
39099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39100: LD_VAR 0 12
39104: PPUSH
39105: LD_VAR 0 8
39109: PPUSH
39110: LD_INT 0
39112: PPUSH
39113: CALL 40835 0 3
// end ;
39117: GO 39071
39119: POP
39120: POP
// if fishes then
39121: LD_VAR 0 7
39125: IFFALSE 39192
// for i = 1 to fishes do
39127: LD_ADDR_VAR 0 11
39131: PUSH
39132: DOUBLE
39133: LD_INT 1
39135: DEC
39136: ST_TO_ADDR
39137: LD_VAR 0 7
39141: PUSH
39142: FOR_TO
39143: IFFALSE 39190
// begin hc_class = 20 ;
39145: LD_ADDR_OWVAR 28
39149: PUSH
39150: LD_INT 20
39152: ST_TO_ADDR
// hc_gallery =  ;
39153: LD_ADDR_OWVAR 33
39157: PUSH
39158: LD_STRING 
39160: ST_TO_ADDR
// animal := CreateHuman ;
39161: LD_ADDR_VAR 0 12
39165: PUSH
39166: CALL_OW 44
39170: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39171: LD_VAR 0 12
39175: PPUSH
39176: LD_VAR 0 9
39180: PPUSH
39181: LD_INT 0
39183: PPUSH
39184: CALL 40835 0 3
// end ;
39188: GO 39142
39190: POP
39191: POP
// end ;
39192: LD_VAR 0 10
39196: RET
// export function WantHeal ( sci , unit ) ; begin
39197: LD_INT 0
39199: PPUSH
// if GetTaskList ( sci ) > 0 then
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 437
39209: PUSH
39210: LD_INT 0
39212: GREATER
39213: IFFALSE 39285
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39215: LD_VAR 0 1
39219: PPUSH
39220: CALL_OW 437
39224: PUSH
39225: LD_INT 1
39227: ARRAY
39228: PUSH
39229: LD_INT 1
39231: ARRAY
39232: PUSH
39233: LD_STRING l
39235: EQUAL
39236: IFFALSE 39263
39238: PUSH
39239: LD_VAR 0 1
39243: PPUSH
39244: CALL_OW 437
39248: PUSH
39249: LD_INT 1
39251: ARRAY
39252: PUSH
39253: LD_INT 4
39255: ARRAY
39256: PUSH
39257: LD_VAR 0 2
39261: EQUAL
39262: AND
39263: IFFALSE 39275
// result := true else
39265: LD_ADDR_VAR 0 3
39269: PUSH
39270: LD_INT 1
39272: ST_TO_ADDR
39273: GO 39283
// result := false ;
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: LD_INT 0
39282: ST_TO_ADDR
// end else
39283: GO 39293
// result := false ;
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: LD_INT 0
39292: ST_TO_ADDR
// end ;
39293: LD_VAR 0 3
39297: RET
// export function HealTarget ( sci ) ; begin
39298: LD_INT 0
39300: PPUSH
// if not sci then
39301: LD_VAR 0 1
39305: NOT
39306: IFFALSE 39310
// exit ;
39308: GO 39375
// result := 0 ;
39310: LD_ADDR_VAR 0 2
39314: PUSH
39315: LD_INT 0
39317: ST_TO_ADDR
// if GetTaskList ( sci ) then
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 437
39327: IFFALSE 39375
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39329: LD_VAR 0 1
39333: PPUSH
39334: CALL_OW 437
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PUSH
39347: LD_STRING l
39349: EQUAL
39350: IFFALSE 39375
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39352: LD_ADDR_VAR 0 2
39356: PUSH
39357: LD_VAR 0 1
39361: PPUSH
39362: CALL_OW 437
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PUSH
39371: LD_INT 4
39373: ARRAY
39374: ST_TO_ADDR
// end ;
39375: LD_VAR 0 2
39379: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39380: LD_INT 0
39382: PPUSH
39383: PPUSH
39384: PPUSH
39385: PPUSH
// if not base_units then
39386: LD_VAR 0 1
39390: NOT
39391: IFFALSE 39395
// exit ;
39393: GO 39482
// result := false ;
39395: LD_ADDR_VAR 0 2
39399: PUSH
39400: LD_INT 0
39402: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: LD_INT 21
39415: PUSH
39416: LD_INT 3
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PPUSH
39423: CALL_OW 72
39427: ST_TO_ADDR
// if not tmp then
39428: LD_VAR 0 5
39432: NOT
39433: IFFALSE 39437
// exit ;
39435: GO 39482
// for i in tmp do
39437: LD_ADDR_VAR 0 3
39441: PUSH
39442: LD_VAR 0 5
39446: PUSH
39447: FOR_IN
39448: IFFALSE 39480
// begin result := EnemyInRange ( i , 22 ) ;
39450: LD_ADDR_VAR 0 2
39454: PUSH
39455: LD_VAR 0 3
39459: PPUSH
39460: LD_INT 22
39462: PPUSH
39463: CALL 36897 0 2
39467: ST_TO_ADDR
// if result then
39468: LD_VAR 0 2
39472: IFFALSE 39478
// exit ;
39474: POP
39475: POP
39476: GO 39482
// end ;
39478: GO 39447
39480: POP
39481: POP
// end ;
39482: LD_VAR 0 2
39486: RET
// export function FilterByTag ( units , tag ) ; begin
39487: LD_INT 0
39489: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39490: LD_ADDR_VAR 0 3
39494: PUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: LD_INT 120
39502: PUSH
39503: LD_VAR 0 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PPUSH
39512: CALL_OW 72
39516: ST_TO_ADDR
// end ;
39517: LD_VAR 0 3
39521: RET
// export function IsDriver ( un ) ; begin
39522: LD_INT 0
39524: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39525: LD_ADDR_VAR 0 2
39529: PUSH
39530: LD_VAR 0 1
39534: PUSH
39535: LD_INT 55
39537: PUSH
39538: EMPTY
39539: LIST
39540: PPUSH
39541: CALL_OW 69
39545: IN
39546: ST_TO_ADDR
// end ;
39547: LD_VAR 0 2
39551: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
// list := [ ] ;
39556: LD_ADDR_VAR 0 5
39560: PUSH
39561: EMPTY
39562: ST_TO_ADDR
// case d of 0 :
39563: LD_VAR 0 3
39567: PUSH
39568: LD_INT 0
39570: DOUBLE
39571: EQUAL
39572: IFTRUE 39576
39574: GO 39709
39576: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39577: LD_ADDR_VAR 0 5
39581: PUSH
39582: LD_VAR 0 1
39586: PUSH
39587: LD_INT 4
39589: MINUS
39590: PUSH
39591: LD_VAR 0 2
39595: PUSH
39596: LD_INT 4
39598: MINUS
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PUSH
39608: LD_VAR 0 1
39612: PUSH
39613: LD_INT 3
39615: MINUS
39616: PUSH
39617: LD_VAR 0 2
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: LIST
39629: PUSH
39630: LD_VAR 0 1
39634: PUSH
39635: LD_INT 4
39637: PLUS
39638: PUSH
39639: LD_VAR 0 2
39643: PUSH
39644: LD_INT 4
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: PUSH
39652: LD_VAR 0 1
39656: PUSH
39657: LD_INT 3
39659: PLUS
39660: PUSH
39661: LD_VAR 0 2
39665: PUSH
39666: LD_INT 3
39668: PLUS
39669: PUSH
39670: LD_INT 5
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: PUSH
39678: LD_VAR 0 1
39682: PUSH
39683: LD_VAR 0 2
39687: PUSH
39688: LD_INT 4
39690: PLUS
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// end ; 1 :
39707: GO 40407
39709: LD_INT 1
39711: DOUBLE
39712: EQUAL
39713: IFTRUE 39717
39715: GO 39850
39717: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39718: LD_ADDR_VAR 0 5
39722: PUSH
39723: LD_VAR 0 1
39727: PUSH
39728: LD_VAR 0 2
39732: PUSH
39733: LD_INT 4
39735: MINUS
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: PUSH
39745: LD_VAR 0 1
39749: PUSH
39750: LD_INT 3
39752: MINUS
39753: PUSH
39754: LD_VAR 0 2
39758: PUSH
39759: LD_INT 3
39761: MINUS
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: PUSH
39771: LD_VAR 0 1
39775: PUSH
39776: LD_INT 4
39778: MINUS
39779: PUSH
39780: LD_VAR 0 2
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: PUSH
39793: LD_VAR 0 1
39797: PUSH
39798: LD_VAR 0 2
39802: PUSH
39803: LD_INT 3
39805: PLUS
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: PUSH
39815: LD_VAR 0 1
39819: PUSH
39820: LD_INT 4
39822: PLUS
39823: PUSH
39824: LD_VAR 0 2
39828: PUSH
39829: LD_INT 4
39831: PLUS
39832: PUSH
39833: LD_INT 5
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// end ; 2 :
39848: GO 40407
39850: LD_INT 2
39852: DOUBLE
39853: EQUAL
39854: IFTRUE 39858
39856: GO 39987
39858: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_VAR 0 1
39868: PUSH
39869: LD_VAR 0 2
39873: PUSH
39874: LD_INT 3
39876: MINUS
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: PUSH
39886: LD_VAR 0 1
39890: PUSH
39891: LD_INT 4
39893: PLUS
39894: PUSH
39895: LD_VAR 0 2
39899: PUSH
39900: LD_INT 4
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: PUSH
39908: LD_VAR 0 1
39912: PUSH
39913: LD_VAR 0 2
39917: PUSH
39918: LD_INT 4
39920: PLUS
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: PUSH
39930: LD_VAR 0 1
39934: PUSH
39935: LD_INT 3
39937: MINUS
39938: PUSH
39939: LD_VAR 0 2
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: PUSH
39952: LD_VAR 0 1
39956: PUSH
39957: LD_INT 4
39959: MINUS
39960: PUSH
39961: LD_VAR 0 2
39965: PUSH
39966: LD_INT 4
39968: MINUS
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// end ; 3 :
39985: GO 40407
39987: LD_INT 3
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40128
39995: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39996: LD_ADDR_VAR 0 5
40000: PUSH
40001: LD_VAR 0 1
40005: PUSH
40006: LD_INT 3
40008: PLUS
40009: PUSH
40010: LD_VAR 0 2
40014: PUSH
40015: LD_INT 4
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: PUSH
40023: LD_VAR 0 1
40027: PUSH
40028: LD_INT 4
40030: PLUS
40031: PUSH
40032: LD_VAR 0 2
40036: PUSH
40037: LD_INT 4
40039: PLUS
40040: PUSH
40041: LD_INT 5
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: PUSH
40049: LD_VAR 0 1
40053: PUSH
40054: LD_INT 4
40056: MINUS
40057: PUSH
40058: LD_VAR 0 2
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: PUSH
40071: LD_VAR 0 1
40075: PUSH
40076: LD_VAR 0 2
40080: PUSH
40081: LD_INT 4
40083: MINUS
40084: PUSH
40085: LD_INT 3
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: PUSH
40093: LD_VAR 0 1
40097: PUSH
40098: LD_INT 3
40100: MINUS
40101: PUSH
40102: LD_VAR 0 2
40106: PUSH
40107: LD_INT 3
40109: MINUS
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// end ; 4 :
40126: GO 40407
40128: LD_INT 4
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40269
40136: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40137: LD_ADDR_VAR 0 5
40141: PUSH
40142: LD_VAR 0 1
40146: PUSH
40147: LD_VAR 0 2
40151: PUSH
40152: LD_INT 4
40154: PLUS
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: PUSH
40164: LD_VAR 0 1
40168: PUSH
40169: LD_INT 3
40171: PLUS
40172: PUSH
40173: LD_VAR 0 2
40177: PUSH
40178: LD_INT 3
40180: PLUS
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: PUSH
40190: LD_VAR 0 1
40194: PUSH
40195: LD_INT 4
40197: PLUS
40198: PUSH
40199: LD_VAR 0 2
40203: PUSH
40204: LD_INT 4
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: PUSH
40212: LD_VAR 0 1
40216: PUSH
40217: LD_VAR 0 2
40221: PUSH
40222: LD_INT 3
40224: MINUS
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: PUSH
40234: LD_VAR 0 1
40238: PUSH
40239: LD_INT 4
40241: MINUS
40242: PUSH
40243: LD_VAR 0 2
40247: PUSH
40248: LD_INT 4
40250: MINUS
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
// end ; 5 :
40267: GO 40407
40269: LD_INT 5
40271: DOUBLE
40272: EQUAL
40273: IFTRUE 40277
40275: GO 40406
40277: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40278: LD_ADDR_VAR 0 5
40282: PUSH
40283: LD_VAR 0 1
40287: PUSH
40288: LD_INT 4
40290: MINUS
40291: PUSH
40292: LD_VAR 0 2
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: PUSH
40305: LD_VAR 0 1
40309: PUSH
40310: LD_VAR 0 2
40314: PUSH
40315: LD_INT 4
40317: MINUS
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: PUSH
40327: LD_VAR 0 1
40331: PUSH
40332: LD_INT 4
40334: PLUS
40335: PUSH
40336: LD_VAR 0 2
40340: PUSH
40341: LD_INT 4
40343: PLUS
40344: PUSH
40345: LD_INT 5
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: PUSH
40353: LD_VAR 0 1
40357: PUSH
40358: LD_INT 3
40360: PLUS
40361: PUSH
40362: LD_VAR 0 2
40366: PUSH
40367: LD_INT 4
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: PUSH
40375: LD_VAR 0 1
40379: PUSH
40380: LD_VAR 0 2
40384: PUSH
40385: LD_INT 3
40387: PLUS
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// end ; end ;
40404: GO 40407
40406: POP
// result := list ;
40407: LD_ADDR_VAR 0 4
40411: PUSH
40412: LD_VAR 0 5
40416: ST_TO_ADDR
// end ;
40417: LD_VAR 0 4
40421: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40427: LD_VAR 0 1
40431: NOT
40432: IFTRUE 40460
40434: PUSH
40435: LD_VAR 0 2
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 4
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: IN
40458: NOT
40459: OR
40460: IFFALSE 40464
// exit ;
40462: GO 40547
// tmp := [ ] ;
40464: LD_ADDR_VAR 0 5
40468: PUSH
40469: EMPTY
40470: ST_TO_ADDR
// for i in units do
40471: LD_ADDR_VAR 0 4
40475: PUSH
40476: LD_VAR 0 1
40480: PUSH
40481: FOR_IN
40482: IFFALSE 40516
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40484: LD_ADDR_VAR 0 5
40488: PUSH
40489: LD_VAR 0 5
40493: PPUSH
40494: LD_VAR 0 4
40498: PPUSH
40499: LD_VAR 0 2
40503: PPUSH
40504: CALL_OW 259
40508: PPUSH
40509: CALL 41942 0 2
40513: ST_TO_ADDR
40514: GO 40481
40516: POP
40517: POP
// if not tmp then
40518: LD_VAR 0 5
40522: NOT
40523: IFFALSE 40527
// exit ;
40525: GO 40547
// result := SortListByListDesc ( units , tmp ) ;
40527: LD_ADDR_VAR 0 3
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: LD_VAR 0 5
40541: PPUSH
40542: CALL_OW 77
40546: ST_TO_ADDR
// end ;
40547: LD_VAR 0 3
40551: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40552: LD_INT 0
40554: PPUSH
40555: PPUSH
40556: PPUSH
// result := false ;
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_INT 0
40564: ST_TO_ADDR
// if not building then
40565: LD_VAR 0 2
40569: NOT
40570: IFFALSE 40574
// exit ;
40572: GO 40718
// x := GetX ( building ) ;
40574: LD_ADDR_VAR 0 4
40578: PUSH
40579: LD_VAR 0 2
40583: PPUSH
40584: CALL_OW 250
40588: ST_TO_ADDR
// y := GetY ( building ) ;
40589: LD_ADDR_VAR 0 5
40593: PUSH
40594: LD_VAR 0 2
40598: PPUSH
40599: CALL_OW 251
40603: ST_TO_ADDR
// if not x or not y then
40604: LD_VAR 0 4
40608: NOT
40609: IFTRUE 40618
40611: PUSH
40612: LD_VAR 0 5
40616: NOT
40617: OR
40618: IFFALSE 40622
// exit ;
40620: GO 40718
// if GetTaskList ( unit ) then
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 437
40631: IFFALSE 40718
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40633: LD_STRING e
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 437
40645: PUSH
40646: LD_INT 1
40648: ARRAY
40649: PUSH
40650: LD_INT 1
40652: ARRAY
40653: EQUAL
40654: IFFALSE 40681
40656: PUSH
40657: LD_VAR 0 4
40661: PUSH
40662: LD_VAR 0 1
40666: PPUSH
40667: CALL_OW 437
40671: PUSH
40672: LD_INT 1
40674: ARRAY
40675: PUSH
40676: LD_INT 2
40678: ARRAY
40679: EQUAL
40680: AND
40681: IFFALSE 40708
40683: PUSH
40684: LD_VAR 0 5
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 437
40698: PUSH
40699: LD_INT 1
40701: ARRAY
40702: PUSH
40703: LD_INT 3
40705: ARRAY
40706: EQUAL
40707: AND
40708: IFFALSE 40718
// result := true end ;
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: LD_INT 1
40717: ST_TO_ADDR
// end ;
40718: LD_VAR 0 3
40722: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40723: LD_INT 0
40725: PPUSH
// result := false ;
40726: LD_ADDR_VAR 0 4
40730: PUSH
40731: LD_INT 0
40733: ST_TO_ADDR
// if GetTaskList ( unit ) then
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 437
40743: IFFALSE 40830
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40745: LD_STRING M
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL_OW 437
40757: PUSH
40758: LD_INT 1
40760: ARRAY
40761: PUSH
40762: LD_INT 1
40764: ARRAY
40765: EQUAL
40766: IFFALSE 40793
40768: PUSH
40769: LD_VAR 0 2
40773: PUSH
40774: LD_VAR 0 1
40778: PPUSH
40779: CALL_OW 437
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: PUSH
40788: LD_INT 2
40790: ARRAY
40791: EQUAL
40792: AND
40793: IFFALSE 40820
40795: PUSH
40796: LD_VAR 0 3
40800: PUSH
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL_OW 437
40810: PUSH
40811: LD_INT 1
40813: ARRAY
40814: PUSH
40815: LD_INT 3
40817: ARRAY
40818: EQUAL
40819: AND
40820: IFFALSE 40830
// result := true ;
40822: LD_ADDR_VAR 0 4
40826: PUSH
40827: LD_INT 1
40829: ST_TO_ADDR
// end ; end ;
40830: LD_VAR 0 4
40834: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40835: LD_INT 0
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
// if not unit or not area then
40841: LD_VAR 0 1
40845: NOT
40846: IFTRUE 40855
40848: PUSH
40849: LD_VAR 0 2
40853: NOT
40854: OR
40855: IFFALSE 40859
// exit ;
40857: GO 41035
// tmp := AreaToList ( area , i ) ;
40859: LD_ADDR_VAR 0 6
40863: PUSH
40864: LD_VAR 0 2
40868: PPUSH
40869: LD_VAR 0 5
40873: PPUSH
40874: CALL_OW 517
40878: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40879: LD_ADDR_VAR 0 5
40883: PUSH
40884: DOUBLE
40885: LD_INT 1
40887: DEC
40888: ST_TO_ADDR
40889: LD_VAR 0 6
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PUSH
40898: FOR_TO
40899: IFFALSE 41033
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40901: LD_ADDR_VAR 0 7
40905: PUSH
40906: LD_VAR 0 6
40910: PUSH
40911: LD_INT 1
40913: ARRAY
40914: PUSH
40915: LD_VAR 0 5
40919: ARRAY
40920: PUSH
40921: LD_VAR 0 6
40925: PUSH
40926: LD_INT 2
40928: ARRAY
40929: PUSH
40930: LD_VAR 0 5
40934: ARRAY
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40940: LD_INT 92
40942: PUSH
40943: LD_VAR 0 7
40947: PUSH
40948: LD_INT 1
40950: ARRAY
40951: PUSH
40952: LD_VAR 0 7
40956: PUSH
40957: LD_INT 2
40959: ARRAY
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: PPUSH
40970: CALL_OW 69
40974: PUSH
40975: LD_INT 0
40977: EQUAL
40978: IFFALSE 41031
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40980: LD_VAR 0 1
40984: PPUSH
40985: LD_VAR 0 7
40989: PUSH
40990: LD_INT 1
40992: ARRAY
40993: PPUSH
40994: LD_VAR 0 7
40998: PUSH
40999: LD_INT 2
41001: ARRAY
41002: PPUSH
41003: LD_VAR 0 3
41007: PPUSH
41008: CALL_OW 48
// result := IsPlaced ( unit ) ;
41012: LD_ADDR_VAR 0 4
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 305
41026: ST_TO_ADDR
// exit ;
41027: POP
41028: POP
41029: GO 41035
// end ; end ;
41031: GO 40898
41033: POP
41034: POP
// end ;
41035: LD_VAR 0 4
41039: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41040: LD_INT 0
41042: PPUSH
41043: PPUSH
41044: PPUSH
// if not side or side > 8 then
41045: LD_VAR 0 1
41049: NOT
41050: IFTRUE 41062
41052: PUSH
41053: LD_VAR 0 1
41057: PUSH
41058: LD_INT 8
41060: GREATER
41061: OR
41062: IFFALSE 41066
// exit ;
41064: GO 41253
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41066: LD_ADDR_VAR 0 4
41070: PUSH
41071: LD_INT 22
41073: PUSH
41074: LD_VAR 0 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 21
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PPUSH
41097: CALL_OW 69
41101: ST_TO_ADDR
// if not tmp then
41102: LD_VAR 0 4
41106: NOT
41107: IFFALSE 41111
// exit ;
41109: GO 41253
// enable_addtolog := true ;
41111: LD_ADDR_OWVAR 81
41115: PUSH
41116: LD_INT 1
41118: ST_TO_ADDR
// AddToLog ( [ ) ;
41119: LD_STRING [
41121: PPUSH
41122: CALL_OW 561
// for i in tmp do
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_VAR 0 4
41135: PUSH
41136: FOR_IN
41137: IFFALSE 41244
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41139: LD_STRING [
41141: PUSH
41142: LD_VAR 0 3
41146: PPUSH
41147: CALL_OW 266
41151: STR
41152: PUSH
41153: LD_STRING , 
41155: STR
41156: PUSH
41157: LD_VAR 0 3
41161: PPUSH
41162: CALL_OW 250
41166: STR
41167: PUSH
41168: LD_STRING , 
41170: STR
41171: PUSH
41172: LD_VAR 0 3
41176: PPUSH
41177: CALL_OW 251
41181: STR
41182: PUSH
41183: LD_STRING , 
41185: STR
41186: PUSH
41187: LD_VAR 0 3
41191: PPUSH
41192: CALL_OW 254
41196: STR
41197: PUSH
41198: LD_STRING , 
41200: STR
41201: PUSH
41202: LD_VAR 0 3
41206: PPUSH
41207: LD_INT 1
41209: PPUSH
41210: CALL_OW 268
41214: STR
41215: PUSH
41216: LD_STRING , 
41218: STR
41219: PUSH
41220: LD_VAR 0 3
41224: PPUSH
41225: LD_INT 2
41227: PPUSH
41228: CALL_OW 268
41232: STR
41233: PUSH
41234: LD_STRING ],
41236: STR
41237: PPUSH
41238: CALL_OW 561
// end ;
41242: GO 41136
41244: POP
41245: POP
// AddToLog ( ]; ) ;
41246: LD_STRING ];
41248: PPUSH
41249: CALL_OW 561
// end ;
41253: LD_VAR 0 2
41257: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41258: LD_INT 0
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
// if not area or not rate or not max then
41265: LD_VAR 0 1
41269: NOT
41270: IFTRUE 41279
41272: PUSH
41273: LD_VAR 0 2
41277: NOT
41278: OR
41279: IFTRUE 41288
41281: PUSH
41282: LD_VAR 0 4
41286: NOT
41287: OR
41288: IFFALSE 41292
// exit ;
41290: GO 41481
// while 1 do
41292: LD_INT 1
41294: IFFALSE 41481
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41296: LD_ADDR_VAR 0 9
41300: PUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: LD_INT 1
41308: PPUSH
41309: CALL_OW 287
41313: PUSH
41314: LD_INT 10
41316: MUL
41317: ST_TO_ADDR
// r := rate / 10 ;
41318: LD_ADDR_VAR 0 7
41322: PUSH
41323: LD_VAR 0 2
41327: PUSH
41328: LD_INT 10
41330: DIVREAL
41331: ST_TO_ADDR
// time := 1 1$00 ;
41332: LD_ADDR_VAR 0 8
41336: PUSH
41337: LD_INT 2100
41339: ST_TO_ADDR
// if amount < min then
41340: LD_VAR 0 9
41344: PUSH
41345: LD_VAR 0 3
41349: LESS
41350: IFFALSE 41368
// r := r * 2 else
41352: LD_ADDR_VAR 0 7
41356: PUSH
41357: LD_VAR 0 7
41361: PUSH
41362: LD_INT 2
41364: MUL
41365: ST_TO_ADDR
41366: GO 41394
// if amount > max then
41368: LD_VAR 0 9
41372: PUSH
41373: LD_VAR 0 4
41377: GREATER
41378: IFFALSE 41394
// r := r / 2 ;
41380: LD_ADDR_VAR 0 7
41384: PUSH
41385: LD_VAR 0 7
41389: PUSH
41390: LD_INT 2
41392: DIVREAL
41393: ST_TO_ADDR
// time := time / r ;
41394: LD_ADDR_VAR 0 8
41398: PUSH
41399: LD_VAR 0 8
41403: PUSH
41404: LD_VAR 0 7
41408: DIVREAL
41409: ST_TO_ADDR
// if time < 0 then
41410: LD_VAR 0 8
41414: PUSH
41415: LD_INT 0
41417: LESS
41418: IFFALSE 41435
// time := time * - 1 ;
41420: LD_ADDR_VAR 0 8
41424: PUSH
41425: LD_VAR 0 8
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: MUL
41434: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41435: LD_VAR 0 8
41439: PUSH
41440: LD_INT 35
41442: PPUSH
41443: LD_INT 875
41445: PPUSH
41446: CALL_OW 12
41450: PLUS
41451: PPUSH
41452: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41456: LD_INT 1
41458: PPUSH
41459: LD_INT 5
41461: PPUSH
41462: CALL_OW 12
41466: PPUSH
41467: LD_VAR 0 1
41471: PPUSH
41472: LD_INT 1
41474: PPUSH
41475: CALL_OW 55
// end ;
41479: GO 41292
// end ;
41481: LD_VAR 0 5
41485: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41486: LD_INT 0
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
// if not turrets or not factories then
41496: LD_VAR 0 1
41500: NOT
41501: IFTRUE 41510
41503: PUSH
41504: LD_VAR 0 2
41508: NOT
41509: OR
41510: IFFALSE 41514
// exit ;
41512: GO 41821
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41514: LD_ADDR_VAR 0 10
41518: PUSH
41519: LD_INT 5
41521: PUSH
41522: LD_INT 6
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 4
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 3
41541: PUSH
41542: LD_INT 5
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 24
41556: PUSH
41557: LD_INT 25
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 23
41566: PUSH
41567: LD_INT 27
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 42
41580: PUSH
41581: LD_INT 43
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 44
41590: PUSH
41591: LD_INT 46
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 45
41600: PUSH
41601: LD_INT 47
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: ST_TO_ADDR
// result := [ ] ;
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: EMPTY
41624: ST_TO_ADDR
// for i in turrets do
41625: LD_ADDR_VAR 0 4
41629: PUSH
41630: LD_VAR 0 1
41634: PUSH
41635: FOR_IN
41636: IFFALSE 41819
// begin nat := GetNation ( i ) ;
41638: LD_ADDR_VAR 0 7
41642: PUSH
41643: LD_VAR 0 4
41647: PPUSH
41648: CALL_OW 248
41652: ST_TO_ADDR
// weapon := 0 ;
41653: LD_ADDR_VAR 0 8
41657: PUSH
41658: LD_INT 0
41660: ST_TO_ADDR
// if not nat then
41661: LD_VAR 0 7
41665: NOT
41666: IFFALSE 41670
// continue ;
41668: GO 41635
// for j in list [ nat ] do
41670: LD_ADDR_VAR 0 5
41674: PUSH
41675: LD_VAR 0 10
41679: PUSH
41680: LD_VAR 0 7
41684: ARRAY
41685: PUSH
41686: FOR_IN
41687: IFFALSE 41728
// if GetBWeapon ( i ) = j [ 1 ] then
41689: LD_VAR 0 4
41693: PPUSH
41694: CALL_OW 269
41698: PUSH
41699: LD_VAR 0 5
41703: PUSH
41704: LD_INT 1
41706: ARRAY
41707: EQUAL
41708: IFFALSE 41726
// begin weapon := j [ 2 ] ;
41710: LD_ADDR_VAR 0 8
41714: PUSH
41715: LD_VAR 0 5
41719: PUSH
41720: LD_INT 2
41722: ARRAY
41723: ST_TO_ADDR
// break ;
41724: GO 41728
// end ;
41726: GO 41686
41728: POP
41729: POP
// if not weapon then
41730: LD_VAR 0 8
41734: NOT
41735: IFFALSE 41739
// continue ;
41737: GO 41635
// for k in factories do
41739: LD_ADDR_VAR 0 6
41743: PUSH
41744: LD_VAR 0 2
41748: PUSH
41749: FOR_IN
41750: IFFALSE 41815
// begin weapons := AvailableWeaponList ( k ) ;
41752: LD_ADDR_VAR 0 9
41756: PUSH
41757: LD_VAR 0 6
41761: PPUSH
41762: CALL_OW 478
41766: ST_TO_ADDR
// if not weapons then
41767: LD_VAR 0 9
41771: NOT
41772: IFFALSE 41776
// continue ;
41774: GO 41749
// if weapon in weapons then
41776: LD_VAR 0 8
41780: PUSH
41781: LD_VAR 0 9
41785: IN
41786: IFFALSE 41813
// begin result := [ i , weapon ] ;
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_VAR 0 4
41797: PUSH
41798: LD_VAR 0 8
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: ST_TO_ADDR
// exit ;
41807: POP
41808: POP
41809: POP
41810: POP
41811: GO 41821
// end ; end ;
41813: GO 41749
41815: POP
41816: POP
// end ;
41817: GO 41635
41819: POP
41820: POP
// end ;
41821: LD_VAR 0 3
41825: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41826: LD_INT 0
41828: PPUSH
// if not side or side > 8 then
41829: LD_VAR 0 3
41833: NOT
41834: IFTRUE 41846
41836: PUSH
41837: LD_VAR 0 3
41841: PUSH
41842: LD_INT 8
41844: GREATER
41845: OR
41846: IFFALSE 41850
// exit ;
41848: GO 41909
// if not range then
41850: LD_VAR 0 4
41854: NOT
41855: IFFALSE 41866
// range := - 12 ;
41857: LD_ADDR_VAR 0 4
41861: PUSH
41862: LD_INT 12
41864: NEG
41865: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41866: LD_VAR 0 1
41870: PPUSH
41871: LD_VAR 0 2
41875: PPUSH
41876: LD_VAR 0 3
41880: PPUSH
41881: LD_VAR 0 4
41885: PPUSH
41886: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41890: LD_VAR 0 1
41894: PPUSH
41895: LD_VAR 0 2
41899: PPUSH
41900: LD_VAR 0 3
41904: PPUSH
41905: CALL_OW 331
// end ;
41909: LD_VAR 0 5
41913: RET
// export function Video ( mode ) ; begin
41914: LD_INT 0
41916: PPUSH
// ingame_video = mode ;
41917: LD_ADDR_OWVAR 52
41921: PUSH
41922: LD_VAR 0 1
41926: ST_TO_ADDR
// interface_hidden = mode ;
41927: LD_ADDR_OWVAR 54
41931: PUSH
41932: LD_VAR 0 1
41936: ST_TO_ADDR
// end ;
41937: LD_VAR 0 2
41941: RET
// export function Join ( array , element ) ; begin
41942: LD_INT 0
41944: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41945: LD_ADDR_VAR 0 3
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: LD_VAR 0 1
41959: PUSH
41960: LD_INT 1
41962: PLUS
41963: PPUSH
41964: LD_VAR 0 2
41968: PPUSH
41969: CALL_OW 1
41973: ST_TO_ADDR
// end ;
41974: LD_VAR 0 3
41978: RET
// export function JoinUnion ( array , element ) ; begin
41979: LD_INT 0
41981: PPUSH
// result := array union element ;
41982: LD_ADDR_VAR 0 3
41986: PUSH
41987: LD_VAR 0 1
41991: PUSH
41992: LD_VAR 0 2
41996: UNION
41997: ST_TO_ADDR
// end ;
41998: LD_VAR 0 3
42002: RET
// export function GetBehemoths ( side ) ; begin
42003: LD_INT 0
42005: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42006: LD_ADDR_VAR 0 2
42010: PUSH
42011: LD_INT 22
42013: PUSH
42014: LD_VAR 0 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 31
42025: PUSH
42026: LD_INT 25
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PPUSH
42037: CALL_OW 69
42041: ST_TO_ADDR
// end ;
42042: LD_VAR 0 2
42046: RET
// export function Shuffle ( array ) ; var i , index ; begin
42047: LD_INT 0
42049: PPUSH
42050: PPUSH
42051: PPUSH
// result := [ ] ;
42052: LD_ADDR_VAR 0 2
42056: PUSH
42057: EMPTY
42058: ST_TO_ADDR
// if not array then
42059: LD_VAR 0 1
42063: NOT
42064: IFFALSE 42068
// exit ;
42066: GO 42167
// Randomize ;
42068: CALL_OW 10
// for i = array downto 1 do
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: DOUBLE
42078: LD_VAR 0 1
42082: INC
42083: ST_TO_ADDR
42084: LD_INT 1
42086: PUSH
42087: FOR_DOWNTO
42088: IFFALSE 42165
// begin index := rand ( 1 , array ) ;
42090: LD_ADDR_VAR 0 4
42094: PUSH
42095: LD_INT 1
42097: PPUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 12
42107: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42108: LD_ADDR_VAR 0 2
42112: PUSH
42113: LD_VAR 0 2
42117: PPUSH
42118: LD_VAR 0 2
42122: PUSH
42123: LD_INT 1
42125: PLUS
42126: PPUSH
42127: LD_VAR 0 1
42131: PUSH
42132: LD_VAR 0 4
42136: ARRAY
42137: PPUSH
42138: CALL_OW 2
42142: ST_TO_ADDR
// array := Delete ( array , index ) ;
42143: LD_ADDR_VAR 0 1
42147: PUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_VAR 0 4
42157: PPUSH
42158: CALL_OW 3
42162: ST_TO_ADDR
// end ;
42163: GO 42087
42165: POP
42166: POP
// end ;
42167: LD_VAR 0 2
42171: RET
// export function GetBaseMaterials ( base ) ; begin
42172: LD_INT 0
42174: PPUSH
// result := [ 0 , 0 , 0 ] ;
42175: LD_ADDR_VAR 0 2
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// if not base then
42194: LD_VAR 0 1
42198: NOT
42199: IFFALSE 42203
// exit ;
42201: GO 42252
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42203: LD_ADDR_VAR 0 2
42207: PUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: LD_INT 1
42215: PPUSH
42216: CALL_OW 275
42220: PUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: LD_INT 2
42228: PPUSH
42229: CALL_OW 275
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_INT 3
42241: PPUSH
42242: CALL_OW 275
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// end ;
42252: LD_VAR 0 2
42256: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42257: LD_INT 0
42259: PPUSH
42260: PPUSH
// result := array ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_VAR 0 1
42270: ST_TO_ADDR
// if size >= result then
42271: LD_VAR 0 2
42275: PUSH
42276: LD_VAR 0 3
42280: GREATEREQUAL
42281: IFFALSE 42285
// exit ;
42283: GO 42335
// if size then
42285: LD_VAR 0 2
42289: IFFALSE 42335
// for i := array downto size do
42291: LD_ADDR_VAR 0 4
42295: PUSH
42296: DOUBLE
42297: LD_VAR 0 1
42301: INC
42302: ST_TO_ADDR
42303: LD_VAR 0 2
42307: PUSH
42308: FOR_DOWNTO
42309: IFFALSE 42333
// result := Delete ( result , result ) ;
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_VAR 0 3
42320: PPUSH
42321: LD_VAR 0 3
42325: PPUSH
42326: CALL_OW 3
42330: ST_TO_ADDR
42331: GO 42308
42333: POP
42334: POP
// end ;
42335: LD_VAR 0 3
42339: RET
// export function ComExit ( unit ) ; var tmp ; begin
42340: LD_INT 0
42342: PPUSH
42343: PPUSH
// if not IsInUnit ( unit ) then
42344: LD_VAR 0 1
42348: PPUSH
42349: CALL_OW 310
42353: NOT
42354: IFFALSE 42358
// exit ;
42356: GO 42418
// tmp := IsInUnit ( unit ) ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 310
42372: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42373: LD_VAR 0 3
42377: PPUSH
42378: CALL_OW 247
42382: PUSH
42383: LD_INT 2
42385: EQUAL
42386: IFFALSE 42399
// ComExitVehicle ( unit ) else
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 121
42397: GO 42408
// ComExitBuilding ( unit ) ;
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 122
// result := tmp ;
42408: LD_ADDR_VAR 0 2
42412: PUSH
42413: LD_VAR 0 3
42417: ST_TO_ADDR
// end ;
42418: LD_VAR 0 2
42422: RET
// export function ComExitAll ( units ) ; var i ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
// if not units then
42427: LD_VAR 0 1
42431: NOT
42432: IFFALSE 42436
// exit ;
42434: GO 42462
// for i in units do
42436: LD_ADDR_VAR 0 3
42440: PUSH
42441: LD_VAR 0 1
42445: PUSH
42446: FOR_IN
42447: IFFALSE 42460
// ComExit ( i ) ;
42449: LD_VAR 0 3
42453: PPUSH
42454: CALL 42340 0 1
42458: GO 42446
42460: POP
42461: POP
// end ;
42462: LD_VAR 0 2
42466: RET
// export function ResetHc ; begin
42467: LD_INT 0
42469: PPUSH
// InitHc ;
42470: CALL_OW 19
// hc_importance := 0 ;
42474: LD_ADDR_OWVAR 32
42478: PUSH
42479: LD_INT 0
42481: ST_TO_ADDR
// end ;
42482: LD_VAR 0 1
42486: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42487: LD_INT 0
42489: PPUSH
42490: PPUSH
42491: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42492: LD_ADDR_VAR 0 6
42496: PUSH
42497: LD_VAR 0 1
42501: PUSH
42502: LD_VAR 0 3
42506: PLUS
42507: PUSH
42508: LD_INT 2
42510: DIV
42511: ST_TO_ADDR
// if _x < 0 then
42512: LD_VAR 0 6
42516: PUSH
42517: LD_INT 0
42519: LESS
42520: IFFALSE 42537
// _x := _x * - 1 ;
42522: LD_ADDR_VAR 0 6
42526: PUSH
42527: LD_VAR 0 6
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: MUL
42536: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42537: LD_ADDR_VAR 0 7
42541: PUSH
42542: LD_VAR 0 2
42546: PUSH
42547: LD_VAR 0 4
42551: PLUS
42552: PUSH
42553: LD_INT 2
42555: DIV
42556: ST_TO_ADDR
// if _y < 0 then
42557: LD_VAR 0 7
42561: PUSH
42562: LD_INT 0
42564: LESS
42565: IFFALSE 42582
// _y := _y * - 1 ;
42567: LD_ADDR_VAR 0 7
42571: PUSH
42572: LD_VAR 0 7
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: MUL
42581: ST_TO_ADDR
// result := [ _x , _y ] ;
42582: LD_ADDR_VAR 0 5
42586: PUSH
42587: LD_VAR 0 6
42591: PUSH
42592: LD_VAR 0 7
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// end ;
42601: LD_VAR 0 5
42605: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
// task := GetTaskList ( unit ) ;
42612: LD_ADDR_VAR 0 7
42616: PUSH
42617: LD_VAR 0 1
42621: PPUSH
42622: CALL_OW 437
42626: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42627: LD_VAR 0 7
42631: NOT
42632: IFFALSE 42651
42634: PUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: LD_VAR 0 2
42644: PPUSH
42645: CALL_OW 308
42649: NOT
42650: AND
42651: IFFALSE 42655
// exit ;
42653: GO 42773
// if IsInArea ( unit , area ) then
42655: LD_VAR 0 1
42659: PPUSH
42660: LD_VAR 0 2
42664: PPUSH
42665: CALL_OW 308
42669: IFFALSE 42687
// begin ComMoveToArea ( unit , goAway ) ;
42671: LD_VAR 0 1
42675: PPUSH
42676: LD_VAR 0 3
42680: PPUSH
42681: CALL_OW 113
// exit ;
42685: GO 42773
// end ; if task [ 1 ] [ 1 ] <> M then
42687: LD_VAR 0 7
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: PUSH
42700: LD_STRING M
42702: NONEQUAL
42703: IFFALSE 42707
// exit ;
42705: GO 42773
// x := task [ 1 ] [ 2 ] ;
42707: LD_ADDR_VAR 0 5
42711: PUSH
42712: LD_VAR 0 7
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: PUSH
42721: LD_INT 2
42723: ARRAY
42724: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42725: LD_ADDR_VAR 0 6
42729: PUSH
42730: LD_VAR 0 7
42734: PUSH
42735: LD_INT 1
42737: ARRAY
42738: PUSH
42739: LD_INT 3
42741: ARRAY
42742: ST_TO_ADDR
// if InArea ( x , y , area ) then
42743: LD_VAR 0 5
42747: PPUSH
42748: LD_VAR 0 6
42752: PPUSH
42753: LD_VAR 0 2
42757: PPUSH
42758: CALL_OW 309
42762: IFFALSE 42773
// ComStop ( unit ) ;
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 141
// end ;
42773: LD_VAR 0 4
42777: RET
// export function Abs ( value ) ; begin
42778: LD_INT 0
42780: PPUSH
// result := value ;
42781: LD_ADDR_VAR 0 2
42785: PUSH
42786: LD_VAR 0 1
42790: ST_TO_ADDR
// if value < 0 then
42791: LD_VAR 0 1
42795: PUSH
42796: LD_INT 0
42798: LESS
42799: IFFALSE 42816
// result := value * - 1 ;
42801: LD_ADDR_VAR 0 2
42805: PUSH
42806: LD_VAR 0 1
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: MUL
42815: ST_TO_ADDR
// end ;
42816: LD_VAR 0 2
42820: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42821: LD_INT 0
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
// if not unit or not building then
42831: LD_VAR 0 1
42835: NOT
42836: IFTRUE 42845
42838: PUSH
42839: LD_VAR 0 2
42843: NOT
42844: OR
42845: IFFALSE 42849
// exit ;
42847: GO 43077
// x := GetX ( building ) ;
42849: LD_ADDR_VAR 0 4
42853: PUSH
42854: LD_VAR 0 2
42858: PPUSH
42859: CALL_OW 250
42863: ST_TO_ADDR
// y := GetY ( building ) ;
42864: LD_ADDR_VAR 0 6
42868: PUSH
42869: LD_VAR 0 2
42873: PPUSH
42874: CALL_OW 251
42878: ST_TO_ADDR
// d := GetDir ( building ) ;
42879: LD_ADDR_VAR 0 8
42883: PUSH
42884: LD_VAR 0 2
42888: PPUSH
42889: CALL_OW 254
42893: ST_TO_ADDR
// r := 4 ;
42894: LD_ADDR_VAR 0 9
42898: PUSH
42899: LD_INT 4
42901: ST_TO_ADDR
// for i := 1 to 5 do
42902: LD_ADDR_VAR 0 10
42906: PUSH
42907: DOUBLE
42908: LD_INT 1
42910: DEC
42911: ST_TO_ADDR
42912: LD_INT 5
42914: PUSH
42915: FOR_TO
42916: IFFALSE 43075
// begin _x := ShiftX ( x , d , r + i ) ;
42918: LD_ADDR_VAR 0 5
42922: PUSH
42923: LD_VAR 0 4
42927: PPUSH
42928: LD_VAR 0 8
42932: PPUSH
42933: LD_VAR 0 9
42937: PUSH
42938: LD_VAR 0 10
42942: PLUS
42943: PPUSH
42944: CALL_OW 272
42948: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42949: LD_ADDR_VAR 0 7
42953: PUSH
42954: LD_VAR 0 6
42958: PPUSH
42959: LD_VAR 0 8
42963: PPUSH
42964: LD_VAR 0 9
42968: PUSH
42969: LD_VAR 0 10
42973: PLUS
42974: PPUSH
42975: CALL_OW 273
42979: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42980: LD_VAR 0 5
42984: PPUSH
42985: LD_VAR 0 7
42989: PPUSH
42990: CALL_OW 488
42994: IFFALSE 43029
42996: PUSH
42997: LD_VAR 0 5
43001: PPUSH
43002: LD_VAR 0 7
43006: PPUSH
43007: CALL_OW 428
43011: PPUSH
43012: CALL_OW 247
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: IN
43027: NOT
43028: AND
43029: IFFALSE 43073
// begin ComMoveXY ( unit , _x , _y ) ;
43031: LD_VAR 0 1
43035: PPUSH
43036: LD_VAR 0 5
43040: PPUSH
43041: LD_VAR 0 7
43045: PPUSH
43046: CALL_OW 111
// result := [ _x , _y ] ;
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_VAR 0 5
43059: PUSH
43060: LD_VAR 0 7
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// exit ;
43069: POP
43070: POP
43071: GO 43077
// end ; end ;
43073: GO 42915
43075: POP
43076: POP
// end ;
43077: LD_VAR 0 3
43081: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43082: LD_INT 0
43084: PPUSH
43085: PPUSH
43086: PPUSH
// result := 0 ;
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_INT 0
43094: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43095: LD_VAR 0 1
43099: PUSH
43100: LD_INT 0
43102: LESS
43103: IFTRUE 43115
43105: PUSH
43106: LD_VAR 0 1
43110: PUSH
43111: LD_INT 8
43113: GREATER
43114: OR
43115: IFTRUE 43127
43117: PUSH
43118: LD_VAR 0 2
43122: PUSH
43123: LD_INT 0
43125: LESS
43126: OR
43127: IFTRUE 43139
43129: PUSH
43130: LD_VAR 0 2
43134: PUSH
43135: LD_INT 8
43137: GREATER
43138: OR
43139: IFFALSE 43143
// exit ;
43141: GO 43218
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43143: LD_ADDR_VAR 0 4
43147: PUSH
43148: LD_INT 22
43150: PUSH
43151: LD_VAR 0 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PPUSH
43160: CALL_OW 69
43164: PUSH
43165: FOR_IN
43166: IFFALSE 43216
// begin un := UnitShoot ( i ) ;
43168: LD_ADDR_VAR 0 5
43172: PUSH
43173: LD_VAR 0 4
43177: PPUSH
43178: CALL_OW 504
43182: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43183: LD_VAR 0 5
43187: PPUSH
43188: CALL_OW 255
43192: PUSH
43193: LD_VAR 0 1
43197: EQUAL
43198: IFFALSE 43214
// begin result := un ;
43200: LD_ADDR_VAR 0 3
43204: PUSH
43205: LD_VAR 0 5
43209: ST_TO_ADDR
// exit ;
43210: POP
43211: POP
43212: GO 43218
// end ; end ;
43214: GO 43165
43216: POP
43217: POP
// end ;
43218: LD_VAR 0 3
43222: RET
// export function GetCargoBay ( units ) ; begin
43223: LD_INT 0
43225: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43226: LD_ADDR_VAR 0 2
43230: PUSH
43231: LD_VAR 0 1
43235: PPUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 34
43241: PUSH
43242: LD_INT 12
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 34
43251: PUSH
43252: LD_INT 51
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 34
43261: PUSH
43262: LD_INT 32
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 34
43271: PUSH
43272: LD_INT 89
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: PPUSH
43286: CALL_OW 72
43290: ST_TO_ADDR
// end ;
43291: LD_VAR 0 2
43295: RET
// export function Negate ( value ) ; begin
43296: LD_INT 0
43298: PPUSH
// result := not value ;
43299: LD_ADDR_VAR 0 2
43303: PUSH
43304: LD_VAR 0 1
43308: NOT
43309: ST_TO_ADDR
// end ;
43310: LD_VAR 0 2
43314: RET
// export function Inc ( value ) ; begin
43315: LD_INT 0
43317: PPUSH
// result := value + 1 ;
43318: LD_ADDR_VAR 0 2
43322: PUSH
43323: LD_VAR 0 1
43327: PUSH
43328: LD_INT 1
43330: PLUS
43331: ST_TO_ADDR
// end ;
43332: LD_VAR 0 2
43336: RET
// export function Dec ( value ) ; begin
43337: LD_INT 0
43339: PPUSH
// result := value - 1 ;
43340: LD_ADDR_VAR 0 2
43344: PUSH
43345: LD_VAR 0 1
43349: PUSH
43350: LD_INT 1
43352: MINUS
43353: ST_TO_ADDR
// end ;
43354: LD_VAR 0 2
43358: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43359: LD_INT 0
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43369: LD_VAR 0 1
43373: PPUSH
43374: LD_VAR 0 2
43378: PPUSH
43379: CALL_OW 488
43383: NOT
43384: IFTRUE 43403
43386: PUSH
43387: LD_VAR 0 3
43391: PPUSH
43392: LD_VAR 0 4
43396: PPUSH
43397: CALL_OW 488
43401: NOT
43402: OR
43403: IFFALSE 43416
// begin result := - 1 ;
43405: LD_ADDR_VAR 0 5
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: ST_TO_ADDR
// exit ;
43414: GO 43651
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43416: LD_ADDR_VAR 0 12
43420: PUSH
43421: LD_VAR 0 1
43425: PPUSH
43426: LD_VAR 0 2
43430: PPUSH
43431: LD_VAR 0 3
43435: PPUSH
43436: LD_VAR 0 4
43440: PPUSH
43441: CALL 42487 0 4
43445: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43446: LD_ADDR_VAR 0 11
43450: PUSH
43451: LD_VAR 0 1
43455: PPUSH
43456: LD_VAR 0 2
43460: PPUSH
43461: LD_VAR 0 12
43465: PUSH
43466: LD_INT 1
43468: ARRAY
43469: PPUSH
43470: LD_VAR 0 12
43474: PUSH
43475: LD_INT 2
43477: ARRAY
43478: PPUSH
43479: CALL_OW 298
43483: ST_TO_ADDR
// distance := 9999 ;
43484: LD_ADDR_VAR 0 10
43488: PUSH
43489: LD_INT 9999
43491: ST_TO_ADDR
// for i := 0 to 5 do
43492: LD_ADDR_VAR 0 6
43496: PUSH
43497: DOUBLE
43498: LD_INT 0
43500: DEC
43501: ST_TO_ADDR
43502: LD_INT 5
43504: PUSH
43505: FOR_TO
43506: IFFALSE 43649
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43508: LD_ADDR_VAR 0 7
43512: PUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: LD_VAR 0 6
43522: PPUSH
43523: LD_VAR 0 11
43527: PPUSH
43528: CALL_OW 272
43532: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43533: LD_ADDR_VAR 0 8
43537: PUSH
43538: LD_VAR 0 2
43542: PPUSH
43543: LD_VAR 0 6
43547: PPUSH
43548: LD_VAR 0 11
43552: PPUSH
43553: CALL_OW 273
43557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43558: LD_VAR 0 7
43562: PPUSH
43563: LD_VAR 0 8
43567: PPUSH
43568: CALL_OW 488
43572: NOT
43573: IFFALSE 43577
// continue ;
43575: GO 43505
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43577: LD_ADDR_VAR 0 9
43581: PUSH
43582: LD_VAR 0 12
43586: PUSH
43587: LD_INT 1
43589: ARRAY
43590: PPUSH
43591: LD_VAR 0 12
43595: PUSH
43596: LD_INT 2
43598: ARRAY
43599: PPUSH
43600: LD_VAR 0 7
43604: PPUSH
43605: LD_VAR 0 8
43609: PPUSH
43610: CALL_OW 298
43614: ST_TO_ADDR
// if tmp < distance then
43615: LD_VAR 0 9
43619: PUSH
43620: LD_VAR 0 10
43624: LESS
43625: IFFALSE 43647
// begin result := i ;
43627: LD_ADDR_VAR 0 5
43631: PUSH
43632: LD_VAR 0 6
43636: ST_TO_ADDR
// distance := tmp ;
43637: LD_ADDR_VAR 0 10
43641: PUSH
43642: LD_VAR 0 9
43646: ST_TO_ADDR
// end ; end ;
43647: GO 43505
43649: POP
43650: POP
// end ;
43651: LD_VAR 0 5
43655: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43656: LD_INT 0
43658: PPUSH
43659: PPUSH
// if not driver or not IsInUnit ( driver ) then
43660: LD_VAR 0 1
43664: NOT
43665: IFTRUE 43679
43667: PUSH
43668: LD_VAR 0 1
43672: PPUSH
43673: CALL_OW 310
43677: NOT
43678: OR
43679: IFFALSE 43683
// exit ;
43681: GO 43773
// vehicle := IsInUnit ( driver ) ;
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_VAR 0 1
43692: PPUSH
43693: CALL_OW 310
43697: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43698: LD_VAR 0 1
43702: PPUSH
43703: LD_STRING \
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: PUSH
43733: LD_STRING E
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_VAR 0 3
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PPUSH
43769: CALL_OW 446
// end ;
43773: LD_VAR 0 2
43777: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43778: LD_INT 0
43780: PPUSH
43781: PPUSH
// if not driver or not IsInUnit ( driver ) then
43782: LD_VAR 0 1
43786: NOT
43787: IFTRUE 43801
43789: PUSH
43790: LD_VAR 0 1
43794: PPUSH
43795: CALL_OW 310
43799: NOT
43800: OR
43801: IFFALSE 43805
// exit ;
43803: GO 43895
// vehicle := IsInUnit ( driver ) ;
43805: LD_ADDR_VAR 0 3
43809: PUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: CALL_OW 310
43819: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43820: LD_VAR 0 1
43824: PPUSH
43825: LD_STRING \
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: PUSH
43855: LD_STRING E
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_VAR 0 3
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PPUSH
43891: CALL_OW 447
// end ;
43895: LD_VAR 0 2
43899: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
// tmp := [ ] ;
43905: LD_ADDR_VAR 0 5
43909: PUSH
43910: EMPTY
43911: ST_TO_ADDR
// for i in units do
43912: LD_ADDR_VAR 0 4
43916: PUSH
43917: LD_VAR 0 1
43921: PUSH
43922: FOR_IN
43923: IFFALSE 43961
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43925: LD_ADDR_VAR 0 5
43929: PUSH
43930: LD_VAR 0 5
43934: PPUSH
43935: LD_VAR 0 5
43939: PUSH
43940: LD_INT 1
43942: PLUS
43943: PPUSH
43944: LD_VAR 0 4
43948: PPUSH
43949: CALL_OW 256
43953: PPUSH
43954: CALL_OW 2
43958: ST_TO_ADDR
43959: GO 43922
43961: POP
43962: POP
// if not tmp then
43963: LD_VAR 0 5
43967: NOT
43968: IFFALSE 43972
// exit ;
43970: GO 44020
// if asc then
43972: LD_VAR 0 2
43976: IFFALSE 44000
// result := SortListByListAsc ( units , tmp ) else
43978: LD_ADDR_VAR 0 3
43982: PUSH
43983: LD_VAR 0 1
43987: PPUSH
43988: LD_VAR 0 5
43992: PPUSH
43993: CALL_OW 76
43997: ST_TO_ADDR
43998: GO 44020
// result := SortListByListDesc ( units , tmp ) ;
44000: LD_ADDR_VAR 0 3
44004: PUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: LD_VAR 0 5
44014: PPUSH
44015: CALL_OW 77
44019: ST_TO_ADDR
// end ;
44020: LD_VAR 0 3
44024: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44025: LD_INT 0
44027: PPUSH
44028: PPUSH
// task := GetTaskList ( mech ) ;
44029: LD_ADDR_VAR 0 4
44033: PUSH
44034: LD_VAR 0 1
44038: PPUSH
44039: CALL_OW 437
44043: ST_TO_ADDR
// if not task then
44044: LD_VAR 0 4
44048: NOT
44049: IFFALSE 44053
// exit ;
44051: GO 44097
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44053: LD_ADDR_VAR 0 3
44057: PUSH
44058: LD_VAR 0 4
44062: PUSH
44063: LD_INT 1
44065: ARRAY
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: PUSH
44071: LD_STRING r
44073: EQUAL
44074: IFFALSE 44096
44076: PUSH
44077: LD_VAR 0 4
44081: PUSH
44082: LD_INT 1
44084: ARRAY
44085: PUSH
44086: LD_INT 4
44088: ARRAY
44089: PUSH
44090: LD_VAR 0 2
44094: EQUAL
44095: AND
44096: ST_TO_ADDR
// end ;
44097: LD_VAR 0 3
44101: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44102: LD_INT 0
44104: PPUSH
// SetDir ( unit , d ) ;
44105: LD_VAR 0 1
44109: PPUSH
44110: LD_VAR 0 4
44114: PPUSH
44115: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
44119: LD_ADDR_VAR 0 6
44123: PUSH
44124: LD_VAR 0 1
44128: PPUSH
44129: LD_VAR 0 2
44133: PPUSH
44134: LD_VAR 0 3
44138: PPUSH
44139: LD_VAR 0 5
44143: PPUSH
44144: CALL_OW 48
44148: ST_TO_ADDR
// end ;
44149: LD_VAR 0 6
44153: RET
// export function ToNaturalNumber ( number ) ; begin
44154: LD_INT 0
44156: PPUSH
// result := number div 1 ;
44157: LD_ADDR_VAR 0 2
44161: PUSH
44162: LD_VAR 0 1
44166: PUSH
44167: LD_INT 1
44169: DIV
44170: ST_TO_ADDR
// if number < 0 then
44171: LD_VAR 0 1
44175: PUSH
44176: LD_INT 0
44178: LESS
44179: IFFALSE 44189
// result := 0 ;
44181: LD_ADDR_VAR 0 2
44185: PUSH
44186: LD_INT 0
44188: ST_TO_ADDR
// end ;
44189: LD_VAR 0 2
44193: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
44194: LD_INT 0
44196: PPUSH
44197: PPUSH
44198: PPUSH
// if not buildings then
44199: LD_VAR 0 1
44203: NOT
44204: IFFALSE 44208
// exit ;
44206: GO 44323
// tmp := [ ] ;
44208: LD_ADDR_VAR 0 5
44212: PUSH
44213: EMPTY
44214: ST_TO_ADDR
// for b in buildings do
44215: LD_ADDR_VAR 0 4
44219: PUSH
44220: LD_VAR 0 1
44224: PUSH
44225: FOR_IN
44226: IFFALSE 44264
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
44228: LD_ADDR_VAR 0 5
44232: PUSH
44233: LD_VAR 0 5
44237: PPUSH
44238: LD_VAR 0 5
44242: PUSH
44243: LD_INT 1
44245: PLUS
44246: PPUSH
44247: LD_VAR 0 4
44251: PPUSH
44252: CALL_OW 266
44256: PPUSH
44257: CALL_OW 1
44261: ST_TO_ADDR
44262: GO 44225
44264: POP
44265: POP
// if not tmp then
44266: LD_VAR 0 5
44270: NOT
44271: IFFALSE 44275
// exit ;
44273: GO 44323
// if asc then
44275: LD_VAR 0 2
44279: IFFALSE 44303
// result := SortListByListAsc ( buildings , tmp ) else
44281: LD_ADDR_VAR 0 3
44285: PUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: LD_VAR 0 5
44295: PPUSH
44296: CALL_OW 76
44300: ST_TO_ADDR
44301: GO 44323
// result := SortListByListDesc ( buildings , tmp ) ;
44303: LD_ADDR_VAR 0 3
44307: PUSH
44308: LD_VAR 0 1
44312: PPUSH
44313: LD_VAR 0 5
44317: PPUSH
44318: CALL_OW 77
44322: ST_TO_ADDR
// end ;
44323: LD_VAR 0 3
44327: RET
// export function SortByClass ( units , class ) ; var un ; begin
44328: LD_INT 0
44330: PPUSH
44331: PPUSH
// if not units or not class then
44332: LD_VAR 0 1
44336: NOT
44337: IFTRUE 44346
44339: PUSH
44340: LD_VAR 0 2
44344: NOT
44345: OR
44346: IFFALSE 44350
// exit ;
44348: GO 44445
// result := [ ] ;
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: EMPTY
44356: ST_TO_ADDR
// for un in units do
44357: LD_ADDR_VAR 0 4
44361: PUSH
44362: LD_VAR 0 1
44366: PUSH
44367: FOR_IN
44368: IFFALSE 44443
// if GetClass ( un ) = class then
44370: LD_VAR 0 4
44374: PPUSH
44375: CALL_OW 257
44379: PUSH
44380: LD_VAR 0 2
44384: EQUAL
44385: IFFALSE 44412
// result := Insert ( result , 1 , un ) else
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_VAR 0 3
44396: PPUSH
44397: LD_INT 1
44399: PPUSH
44400: LD_VAR 0 4
44404: PPUSH
44405: CALL_OW 2
44409: ST_TO_ADDR
44410: GO 44441
// result := Replace ( result , result + 1 , un ) ;
44412: LD_ADDR_VAR 0 3
44416: PUSH
44417: LD_VAR 0 3
44421: PPUSH
44422: LD_VAR 0 3
44426: PUSH
44427: LD_INT 1
44429: PLUS
44430: PPUSH
44431: LD_VAR 0 4
44435: PPUSH
44436: CALL_OW 1
44440: ST_TO_ADDR
44441: GO 44367
44443: POP
44444: POP
// end ;
44445: LD_VAR 0 3
44449: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44450: LD_INT 0
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
44456: PPUSH
44457: PPUSH
44458: PPUSH
// result := [ ] ;
44459: LD_ADDR_VAR 0 4
44463: PUSH
44464: EMPTY
44465: ST_TO_ADDR
// if x - r < 0 then
44466: LD_VAR 0 1
44470: PUSH
44471: LD_VAR 0 3
44475: MINUS
44476: PUSH
44477: LD_INT 0
44479: LESS
44480: IFFALSE 44492
// min_x := 0 else
44482: LD_ADDR_VAR 0 8
44486: PUSH
44487: LD_INT 0
44489: ST_TO_ADDR
44490: GO 44508
// min_x := x - r ;
44492: LD_ADDR_VAR 0 8
44496: PUSH
44497: LD_VAR 0 1
44501: PUSH
44502: LD_VAR 0 3
44506: MINUS
44507: ST_TO_ADDR
// if y - r < 0 then
44508: LD_VAR 0 2
44512: PUSH
44513: LD_VAR 0 3
44517: MINUS
44518: PUSH
44519: LD_INT 0
44521: LESS
44522: IFFALSE 44534
// min_y := 0 else
44524: LD_ADDR_VAR 0 7
44528: PUSH
44529: LD_INT 0
44531: ST_TO_ADDR
44532: GO 44550
// min_y := y - r ;
44534: LD_ADDR_VAR 0 7
44538: PUSH
44539: LD_VAR 0 2
44543: PUSH
44544: LD_VAR 0 3
44548: MINUS
44549: ST_TO_ADDR
// max_x := x + r ;
44550: LD_ADDR_VAR 0 9
44554: PUSH
44555: LD_VAR 0 1
44559: PUSH
44560: LD_VAR 0 3
44564: PLUS
44565: ST_TO_ADDR
// max_y := y + r ;
44566: LD_ADDR_VAR 0 10
44570: PUSH
44571: LD_VAR 0 2
44575: PUSH
44576: LD_VAR 0 3
44580: PLUS
44581: ST_TO_ADDR
// for _x = min_x to max_x do
44582: LD_ADDR_VAR 0 5
44586: PUSH
44587: DOUBLE
44588: LD_VAR 0 8
44592: DEC
44593: ST_TO_ADDR
44594: LD_VAR 0 9
44598: PUSH
44599: FOR_TO
44600: IFFALSE 44701
// for _y = min_y to max_y do
44602: LD_ADDR_VAR 0 6
44606: PUSH
44607: DOUBLE
44608: LD_VAR 0 7
44612: DEC
44613: ST_TO_ADDR
44614: LD_VAR 0 10
44618: PUSH
44619: FOR_TO
44620: IFFALSE 44697
// begin if not ValidHex ( _x , _y ) then
44622: LD_VAR 0 5
44626: PPUSH
44627: LD_VAR 0 6
44631: PPUSH
44632: CALL_OW 488
44636: NOT
44637: IFFALSE 44641
// continue ;
44639: GO 44619
// if GetResourceTypeXY ( _x , _y ) then
44641: LD_VAR 0 5
44645: PPUSH
44646: LD_VAR 0 6
44650: PPUSH
44651: CALL_OW 283
44655: IFFALSE 44695
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44657: LD_ADDR_VAR 0 4
44661: PUSH
44662: LD_VAR 0 4
44666: PPUSH
44667: LD_VAR 0 4
44671: PUSH
44672: LD_INT 1
44674: PLUS
44675: PPUSH
44676: LD_VAR 0 5
44680: PUSH
44681: LD_VAR 0 6
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PPUSH
44690: CALL_OW 1
44694: ST_TO_ADDR
// end ;
44695: GO 44619
44697: POP
44698: POP
44699: GO 44599
44701: POP
44702: POP
// end ;
44703: LD_VAR 0 4
44707: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44708: LD_INT 0
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
// if not units then
44718: LD_VAR 0 1
44722: NOT
44723: IFFALSE 44727
// exit ;
44725: GO 45259
// result := UnitFilter ( units , [ f_ok ] ) ;
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: LD_INT 50
44739: PUSH
44740: EMPTY
44741: LIST
44742: PPUSH
44743: CALL_OW 72
44747: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44748: LD_ADDR_VAR 0 8
44752: PUSH
44753: LD_VAR 0 1
44757: PUSH
44758: LD_INT 1
44760: ARRAY
44761: PPUSH
44762: CALL_OW 255
44766: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44767: LD_ADDR_VAR 0 10
44771: PUSH
44772: LD_INT 29
44774: PUSH
44775: LD_INT 91
44777: PUSH
44778: LD_INT 49
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// if not result then
44786: LD_VAR 0 3
44790: NOT
44791: IFFALSE 44795
// exit ;
44793: GO 45259
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44795: LD_ADDR_VAR 0 5
44799: PUSH
44800: LD_INT 81
44802: PUSH
44803: LD_VAR 0 8
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PPUSH
44812: CALL_OW 69
44816: ST_TO_ADDR
// for i in result do
44817: LD_ADDR_VAR 0 4
44821: PUSH
44822: LD_VAR 0 3
44826: PUSH
44827: FOR_IN
44828: IFFALSE 45257
// begin tag := GetTag ( i ) + 1 ;
44830: LD_ADDR_VAR 0 9
44834: PUSH
44835: LD_VAR 0 4
44839: PPUSH
44840: CALL_OW 110
44844: PUSH
44845: LD_INT 1
44847: PLUS
44848: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44849: LD_ADDR_VAR 0 7
44853: PUSH
44854: LD_VAR 0 4
44858: PPUSH
44859: CALL_OW 250
44863: PPUSH
44864: LD_VAR 0 4
44868: PPUSH
44869: CALL_OW 251
44873: PPUSH
44874: LD_INT 4
44876: PPUSH
44877: CALL 44450 0 3
44881: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44882: LD_VAR 0 4
44886: PPUSH
44887: CALL_OW 247
44891: PUSH
44892: LD_INT 2
44894: EQUAL
44895: IFFALSE 44907
44897: PUSH
44898: LD_VAR 0 7
44902: PUSH
44903: LD_INT 2
44905: GREATER
44906: AND
44907: IFFALSE 44927
44909: PUSH
44910: LD_VAR 0 4
44914: PPUSH
44915: CALL_OW 264
44919: PUSH
44920: LD_VAR 0 10
44924: IN
44925: NOT
44926: AND
44927: IFFALSE 44966
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44929: LD_VAR 0 4
44933: PPUSH
44934: LD_VAR 0 7
44938: PUSH
44939: LD_INT 1
44941: ARRAY
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: LD_VAR 0 7
44951: PUSH
44952: LD_INT 1
44954: ARRAY
44955: PUSH
44956: LD_INT 2
44958: ARRAY
44959: PPUSH
44960: CALL_OW 116
44964: GO 45255
// if path > tag then
44966: LD_VAR 0 2
44970: PUSH
44971: LD_VAR 0 9
44975: GREATER
44976: IFFALSE 45184
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44978: LD_ADDR_VAR 0 6
44982: PUSH
44983: LD_VAR 0 5
44987: PPUSH
44988: LD_INT 91
44990: PUSH
44991: LD_VAR 0 4
44995: PUSH
44996: LD_INT 8
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: PPUSH
45004: CALL_OW 72
45008: ST_TO_ADDR
// if nearEnemy then
45009: LD_VAR 0 6
45013: IFFALSE 45082
// begin if GetWeapon ( i ) = ru_time_lapser then
45015: LD_VAR 0 4
45019: PPUSH
45020: CALL_OW 264
45024: PUSH
45025: LD_INT 49
45027: EQUAL
45028: IFFALSE 45056
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45030: LD_VAR 0 4
45034: PPUSH
45035: LD_VAR 0 6
45039: PPUSH
45040: LD_VAR 0 4
45044: PPUSH
45045: CALL_OW 74
45049: PPUSH
45050: CALL_OW 112
45054: GO 45080
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45056: LD_VAR 0 4
45060: PPUSH
45061: LD_VAR 0 6
45065: PPUSH
45066: LD_VAR 0 4
45070: PPUSH
45071: CALL_OW 74
45075: PPUSH
45076: CALL 46340 0 2
// end else
45080: GO 45182
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45082: LD_VAR 0 4
45086: PPUSH
45087: LD_VAR 0 2
45091: PUSH
45092: LD_VAR 0 9
45096: ARRAY
45097: PUSH
45098: LD_INT 1
45100: ARRAY
45101: PPUSH
45102: LD_VAR 0 2
45106: PUSH
45107: LD_VAR 0 9
45111: ARRAY
45112: PUSH
45113: LD_INT 2
45115: ARRAY
45116: PPUSH
45117: CALL_OW 297
45121: PUSH
45122: LD_INT 6
45124: GREATER
45125: IFFALSE 45168
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45127: LD_VAR 0 4
45131: PPUSH
45132: LD_VAR 0 2
45136: PUSH
45137: LD_VAR 0 9
45141: ARRAY
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: PPUSH
45147: LD_VAR 0 2
45151: PUSH
45152: LD_VAR 0 9
45156: ARRAY
45157: PUSH
45158: LD_INT 2
45160: ARRAY
45161: PPUSH
45162: CALL_OW 114
45166: GO 45182
// SetTag ( i , tag ) ;
45168: LD_VAR 0 4
45172: PPUSH
45173: LD_VAR 0 9
45177: PPUSH
45178: CALL_OW 109
// end else
45182: GO 45255
// if enemy then
45184: LD_VAR 0 5
45188: IFFALSE 45255
// begin if GetWeapon ( i ) = ru_time_lapser then
45190: LD_VAR 0 4
45194: PPUSH
45195: CALL_OW 264
45199: PUSH
45200: LD_INT 49
45202: EQUAL
45203: IFFALSE 45231
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45205: LD_VAR 0 4
45209: PPUSH
45210: LD_VAR 0 5
45214: PPUSH
45215: LD_VAR 0 4
45219: PPUSH
45220: CALL_OW 74
45224: PPUSH
45225: CALL_OW 112
45229: GO 45255
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45231: LD_VAR 0 4
45235: PPUSH
45236: LD_VAR 0 5
45240: PPUSH
45241: LD_VAR 0 4
45245: PPUSH
45246: CALL_OW 74
45250: PPUSH
45251: CALL 46340 0 2
// end ; end ;
45255: GO 44827
45257: POP
45258: POP
// end ;
45259: LD_VAR 0 3
45263: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45264: LD_INT 0
45266: PPUSH
45267: PPUSH
45268: PPUSH
// if not unit or IsInUnit ( unit ) then
45269: LD_VAR 0 1
45273: NOT
45274: IFTRUE 45287
45276: PUSH
45277: LD_VAR 0 1
45281: PPUSH
45282: CALL_OW 310
45286: OR
45287: IFFALSE 45291
// exit ;
45289: GO 45382
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45291: LD_ADDR_VAR 0 4
45295: PUSH
45296: LD_VAR 0 1
45300: PPUSH
45301: CALL_OW 250
45305: PPUSH
45306: LD_VAR 0 2
45310: PPUSH
45311: LD_INT 1
45313: PPUSH
45314: CALL_OW 272
45318: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45319: LD_ADDR_VAR 0 5
45323: PUSH
45324: LD_VAR 0 1
45328: PPUSH
45329: CALL_OW 251
45333: PPUSH
45334: LD_VAR 0 2
45338: PPUSH
45339: LD_INT 1
45341: PPUSH
45342: CALL_OW 273
45346: ST_TO_ADDR
// if ValidHex ( x , y ) then
45347: LD_VAR 0 4
45351: PPUSH
45352: LD_VAR 0 5
45356: PPUSH
45357: CALL_OW 488
45361: IFFALSE 45382
// ComTurnXY ( unit , x , y ) ;
45363: LD_VAR 0 1
45367: PPUSH
45368: LD_VAR 0 4
45372: PPUSH
45373: LD_VAR 0 5
45377: PPUSH
45378: CALL_OW 118
// end ;
45382: LD_VAR 0 3
45386: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45387: LD_INT 0
45389: PPUSH
45390: PPUSH
// result := false ;
45391: LD_ADDR_VAR 0 3
45395: PUSH
45396: LD_INT 0
45398: ST_TO_ADDR
// if not units then
45399: LD_VAR 0 2
45403: NOT
45404: IFFALSE 45408
// exit ;
45406: GO 45453
// for i in units do
45408: LD_ADDR_VAR 0 4
45412: PUSH
45413: LD_VAR 0 2
45417: PUSH
45418: FOR_IN
45419: IFFALSE 45451
// if See ( side , i ) then
45421: LD_VAR 0 1
45425: PPUSH
45426: LD_VAR 0 4
45430: PPUSH
45431: CALL_OW 292
45435: IFFALSE 45449
// begin result := true ;
45437: LD_ADDR_VAR 0 3
45441: PUSH
45442: LD_INT 1
45444: ST_TO_ADDR
// exit ;
45445: POP
45446: POP
45447: GO 45453
// end ;
45449: GO 45418
45451: POP
45452: POP
// end ;
45453: LD_VAR 0 3
45457: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45458: LD_INT 0
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
// if not unit or not points then
45464: LD_VAR 0 1
45468: NOT
45469: IFTRUE 45478
45471: PUSH
45472: LD_VAR 0 2
45476: NOT
45477: OR
45478: IFFALSE 45482
// exit ;
45480: GO 45572
// dist := 99999 ;
45482: LD_ADDR_VAR 0 5
45486: PUSH
45487: LD_INT 99999
45489: ST_TO_ADDR
// for i in points do
45490: LD_ADDR_VAR 0 4
45494: PUSH
45495: LD_VAR 0 2
45499: PUSH
45500: FOR_IN
45501: IFFALSE 45570
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45503: LD_ADDR_VAR 0 6
45507: PUSH
45508: LD_VAR 0 1
45512: PPUSH
45513: LD_VAR 0 4
45517: PUSH
45518: LD_INT 1
45520: ARRAY
45521: PPUSH
45522: LD_VAR 0 4
45526: PUSH
45527: LD_INT 2
45529: ARRAY
45530: PPUSH
45531: CALL_OW 297
45535: ST_TO_ADDR
// if tmpDist < dist then
45536: LD_VAR 0 6
45540: PUSH
45541: LD_VAR 0 5
45545: LESS
45546: IFFALSE 45568
// begin result := i ;
45548: LD_ADDR_VAR 0 3
45552: PUSH
45553: LD_VAR 0 4
45557: ST_TO_ADDR
// dist := tmpDist ;
45558: LD_ADDR_VAR 0 5
45562: PUSH
45563: LD_VAR 0 6
45567: ST_TO_ADDR
// end ; end ;
45568: GO 45500
45570: POP
45571: POP
// end ;
45572: LD_VAR 0 3
45576: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45577: LD_INT 0
45579: PPUSH
// uc_side := side ;
45580: LD_ADDR_OWVAR 20
45584: PUSH
45585: LD_VAR 0 1
45589: ST_TO_ADDR
// uc_nation := 3 ;
45590: LD_ADDR_OWVAR 21
45594: PUSH
45595: LD_INT 3
45597: ST_TO_ADDR
// vc_chassis := 25 ;
45598: LD_ADDR_OWVAR 37
45602: PUSH
45603: LD_INT 25
45605: ST_TO_ADDR
// vc_engine := engine_siberite ;
45606: LD_ADDR_OWVAR 39
45610: PUSH
45611: LD_INT 3
45613: ST_TO_ADDR
// vc_control := control_computer ;
45614: LD_ADDR_OWVAR 38
45618: PUSH
45619: LD_INT 3
45621: ST_TO_ADDR
// vc_weapon := 59 ;
45622: LD_ADDR_OWVAR 40
45626: PUSH
45627: LD_INT 59
45629: ST_TO_ADDR
// result := CreateVehicle ;
45630: LD_ADDR_VAR 0 5
45634: PUSH
45635: CALL_OW 45
45639: ST_TO_ADDR
// SetDir ( result , d ) ;
45640: LD_VAR 0 5
45644: PPUSH
45645: LD_VAR 0 4
45649: PPUSH
45650: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45654: LD_VAR 0 5
45658: PPUSH
45659: LD_VAR 0 2
45663: PPUSH
45664: LD_VAR 0 3
45668: PPUSH
45669: LD_INT 0
45671: PPUSH
45672: CALL_OW 48
// end ;
45676: LD_VAR 0 5
45680: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45681: LD_INT 0
45683: PPUSH
45684: PPUSH
45685: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45686: LD_ADDR_VAR 0 2
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45709: LD_VAR 0 1
45713: NOT
45714: IFTRUE 45747
45716: PUSH
45717: LD_VAR 0 1
45721: PPUSH
45722: CALL_OW 264
45726: PUSH
45727: LD_INT 12
45729: PUSH
45730: LD_INT 51
45732: PUSH
45733: LD_INT 32
45735: PUSH
45736: LD_INT 89
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: IN
45745: NOT
45746: OR
45747: IFFALSE 45751
// exit ;
45749: GO 45849
// for i := 1 to 3 do
45751: LD_ADDR_VAR 0 3
45755: PUSH
45756: DOUBLE
45757: LD_INT 1
45759: DEC
45760: ST_TO_ADDR
45761: LD_INT 3
45763: PUSH
45764: FOR_TO
45765: IFFALSE 45847
// begin tmp := GetCargo ( cargo , i ) ;
45767: LD_ADDR_VAR 0 4
45771: PUSH
45772: LD_VAR 0 1
45776: PPUSH
45777: LD_VAR 0 3
45781: PPUSH
45782: CALL_OW 289
45786: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45787: LD_ADDR_VAR 0 2
45791: PUSH
45792: LD_VAR 0 2
45796: PPUSH
45797: LD_VAR 0 3
45801: PPUSH
45802: LD_VAR 0 4
45806: PPUSH
45807: CALL_OW 1
45811: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45812: LD_ADDR_VAR 0 2
45816: PUSH
45817: LD_VAR 0 2
45821: PPUSH
45822: LD_INT 4
45824: PPUSH
45825: LD_VAR 0 2
45829: PUSH
45830: LD_INT 4
45832: ARRAY
45833: PUSH
45834: LD_VAR 0 4
45838: PLUS
45839: PPUSH
45840: CALL_OW 1
45844: ST_TO_ADDR
// end ;
45845: GO 45764
45847: POP
45848: POP
// end ;
45849: LD_VAR 0 2
45853: RET
// export function Length ( array ) ; begin
45854: LD_INT 0
45856: PPUSH
// result := array + 0 ;
45857: LD_ADDR_VAR 0 2
45861: PUSH
45862: LD_VAR 0 1
45866: PUSH
45867: LD_INT 0
45869: PLUS
45870: ST_TO_ADDR
// end ;
45871: LD_VAR 0 2
45875: RET
// export function PrepareArray ( array ) ; begin
45876: LD_INT 0
45878: PPUSH
// result := array diff 0 ;
45879: LD_ADDR_VAR 0 2
45883: PUSH
45884: LD_VAR 0 1
45888: PUSH
45889: LD_INT 0
45891: DIFF
45892: ST_TO_ADDR
// if not result [ 1 ] then
45893: LD_VAR 0 2
45897: PUSH
45898: LD_INT 1
45900: ARRAY
45901: NOT
45902: IFFALSE 45922
// result := Delete ( result , 1 ) ;
45904: LD_ADDR_VAR 0 2
45908: PUSH
45909: LD_VAR 0 2
45913: PPUSH
45914: LD_INT 1
45916: PPUSH
45917: CALL_OW 3
45921: ST_TO_ADDR
// end ;
45922: LD_VAR 0 2
45926: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45927: LD_INT 0
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
// sibRocketRange := 25 ;
45933: LD_ADDR_VAR 0 6
45937: PUSH
45938: LD_INT 25
45940: ST_TO_ADDR
// result := false ;
45941: LD_ADDR_VAR 0 4
45945: PUSH
45946: LD_INT 0
45948: ST_TO_ADDR
// for i := 0 to 5 do
45949: LD_ADDR_VAR 0 5
45953: PUSH
45954: DOUBLE
45955: LD_INT 0
45957: DEC
45958: ST_TO_ADDR
45959: LD_INT 5
45961: PUSH
45962: FOR_TO
45963: IFFALSE 46030
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45965: LD_VAR 0 1
45969: PPUSH
45970: LD_VAR 0 5
45974: PPUSH
45975: LD_VAR 0 6
45979: PPUSH
45980: CALL_OW 272
45984: PPUSH
45985: LD_VAR 0 2
45989: PPUSH
45990: LD_VAR 0 5
45994: PPUSH
45995: LD_VAR 0 6
45999: PPUSH
46000: CALL_OW 273
46004: PPUSH
46005: LD_VAR 0 3
46009: PPUSH
46010: CALL_OW 309
46014: IFFALSE 46028
// begin result := true ;
46016: LD_ADDR_VAR 0 4
46020: PUSH
46021: LD_INT 1
46023: ST_TO_ADDR
// exit ;
46024: POP
46025: POP
46026: GO 46032
// end ;
46028: GO 45962
46030: POP
46031: POP
// end ;
46032: LD_VAR 0 4
46036: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
46037: LD_INT 0
46039: PPUSH
46040: PPUSH
46041: PPUSH
// if btype = b_depot then
46042: LD_VAR 0 2
46046: PUSH
46047: LD_INT 0
46049: EQUAL
46050: IFFALSE 46062
// begin result := true ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_INT 1
46059: ST_TO_ADDR
// exit ;
46060: GO 46182
// end ; pom := GetBase ( depot ) ;
46062: LD_ADDR_VAR 0 4
46066: PUSH
46067: LD_VAR 0 1
46071: PPUSH
46072: CALL_OW 274
46076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46077: LD_ADDR_VAR 0 5
46081: PUSH
46082: LD_VAR 0 2
46086: PPUSH
46087: LD_VAR 0 1
46091: PPUSH
46092: CALL_OW 248
46096: PPUSH
46097: CALL_OW 450
46101: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
46102: LD_ADDR_VAR 0 3
46106: PUSH
46107: LD_VAR 0 4
46111: PPUSH
46112: LD_INT 1
46114: PPUSH
46115: CALL_OW 275
46119: PUSH
46120: LD_VAR 0 5
46124: PUSH
46125: LD_INT 1
46127: ARRAY
46128: GREATEREQUAL
46129: IFFALSE 46155
46131: PUSH
46132: LD_VAR 0 4
46136: PPUSH
46137: LD_INT 2
46139: PPUSH
46140: CALL_OW 275
46144: PUSH
46145: LD_VAR 0 5
46149: PUSH
46150: LD_INT 2
46152: ARRAY
46153: GREATEREQUAL
46154: AND
46155: IFFALSE 46181
46157: PUSH
46158: LD_VAR 0 4
46162: PPUSH
46163: LD_INT 3
46165: PPUSH
46166: CALL_OW 275
46170: PUSH
46171: LD_VAR 0 5
46175: PUSH
46176: LD_INT 3
46178: ARRAY
46179: GREATEREQUAL
46180: AND
46181: ST_TO_ADDR
// end ;
46182: LD_VAR 0 3
46186: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46187: LD_INT 0
46189: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46190: LD_VAR 0 1
46194: PPUSH
46195: LD_VAR 0 2
46199: PPUSH
46200: LD_INT 0
46202: PPUSH
46203: LD_INT 0
46205: PPUSH
46206: LD_INT 1
46208: PPUSH
46209: LD_INT 0
46211: PPUSH
46212: CALL_OW 587
// end ;
46216: LD_VAR 0 3
46220: RET
// export function CenterOnNow ( unit ) ; begin
46221: LD_INT 0
46223: PPUSH
// result := IsInUnit ( unit ) ;
46224: LD_ADDR_VAR 0 2
46228: PUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: CALL_OW 310
46238: ST_TO_ADDR
// if not result then
46239: LD_VAR 0 2
46243: NOT
46244: IFFALSE 46256
// result := unit ;
46246: LD_ADDR_VAR 0 2
46250: PUSH
46251: LD_VAR 0 1
46255: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46256: LD_VAR 0 1
46260: PPUSH
46261: CALL_OW 87
// end ;
46265: LD_VAR 0 2
46269: RET
// export function ComMoveHex ( unit , hex ) ; begin
46270: LD_INT 0
46272: PPUSH
// if not hex then
46273: LD_VAR 0 2
46277: NOT
46278: IFFALSE 46282
// exit ;
46280: GO 46335
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46282: LD_VAR 0 2
46286: PUSH
46287: LD_INT 1
46289: ARRAY
46290: PPUSH
46291: LD_VAR 0 2
46295: PUSH
46296: LD_INT 2
46298: ARRAY
46299: PPUSH
46300: CALL_OW 428
46304: IFFALSE 46308
// exit ;
46306: GO 46335
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46308: LD_VAR 0 1
46312: PPUSH
46313: LD_VAR 0 2
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: LD_VAR 0 2
46326: PUSH
46327: LD_INT 2
46329: ARRAY
46330: PPUSH
46331: CALL_OW 111
// end ;
46335: LD_VAR 0 3
46339: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46340: LD_INT 0
46342: PPUSH
46343: PPUSH
46344: PPUSH
// if not unit or not enemy then
46345: LD_VAR 0 1
46349: NOT
46350: IFTRUE 46359
46352: PUSH
46353: LD_VAR 0 2
46357: NOT
46358: OR
46359: IFFALSE 46363
// exit ;
46361: GO 46489
// x := GetX ( enemy ) ;
46363: LD_ADDR_VAR 0 4
46367: PUSH
46368: LD_VAR 0 2
46372: PPUSH
46373: CALL_OW 250
46377: ST_TO_ADDR
// y := GetY ( enemy ) ;
46378: LD_ADDR_VAR 0 5
46382: PUSH
46383: LD_VAR 0 2
46387: PPUSH
46388: CALL_OW 251
46392: ST_TO_ADDR
// if ValidHex ( x , y ) then
46393: LD_VAR 0 4
46397: PPUSH
46398: LD_VAR 0 5
46402: PPUSH
46403: CALL_OW 488
46407: IFFALSE 46489
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46409: LD_VAR 0 2
46413: PPUSH
46414: CALL_OW 247
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: IN
46429: IFTRUE 46452
46431: PUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: CALL_OW 255
46441: PPUSH
46442: LD_VAR 0 2
46446: PPUSH
46447: CALL_OW 292
46451: OR
46452: IFFALSE 46470
// ComAttackUnit ( unit , enemy ) else
46454: LD_VAR 0 1
46458: PPUSH
46459: LD_VAR 0 2
46463: PPUSH
46464: CALL_OW 115
46468: GO 46489
// ComAgressiveMove ( unit , x , y ) ;
46470: LD_VAR 0 1
46474: PPUSH
46475: LD_VAR 0 4
46479: PPUSH
46480: LD_VAR 0 5
46484: PPUSH
46485: CALL_OW 114
// end ;
46489: LD_VAR 0 3
46493: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46494: LD_INT 0
46496: PPUSH
46497: PPUSH
46498: PPUSH
// list := AreaToList ( area , 0 ) ;
46499: LD_ADDR_VAR 0 5
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: LD_INT 0
46511: PPUSH
46512: CALL_OW 517
46516: ST_TO_ADDR
// if not list then
46517: LD_VAR 0 5
46521: NOT
46522: IFFALSE 46526
// exit ;
46524: GO 46656
// if all then
46526: LD_VAR 0 2
46530: IFFALSE 46618
// begin for i := 1 to list [ 1 ] do
46532: LD_ADDR_VAR 0 4
46536: PUSH
46537: DOUBLE
46538: LD_INT 1
46540: DEC
46541: ST_TO_ADDR
46542: LD_VAR 0 5
46546: PUSH
46547: LD_INT 1
46549: ARRAY
46550: PUSH
46551: FOR_TO
46552: IFFALSE 46614
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46554: LD_ADDR_VAR 0 3
46558: PUSH
46559: LD_VAR 0 3
46563: PPUSH
46564: LD_VAR 0 3
46568: PUSH
46569: LD_INT 1
46571: PLUS
46572: PPUSH
46573: LD_VAR 0 5
46577: PUSH
46578: LD_INT 1
46580: ARRAY
46581: PUSH
46582: LD_VAR 0 4
46586: ARRAY
46587: PUSH
46588: LD_VAR 0 5
46592: PUSH
46593: LD_INT 2
46595: ARRAY
46596: PUSH
46597: LD_VAR 0 4
46601: ARRAY
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PPUSH
46607: CALL_OW 1
46611: ST_TO_ADDR
46612: GO 46551
46614: POP
46615: POP
// exit ;
46616: GO 46656
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46618: LD_ADDR_VAR 0 3
46622: PUSH
46623: LD_VAR 0 5
46627: PUSH
46628: LD_INT 1
46630: ARRAY
46631: PUSH
46632: LD_INT 1
46634: ARRAY
46635: PUSH
46636: LD_VAR 0 5
46640: PUSH
46641: LD_INT 2
46643: ARRAY
46644: PUSH
46645: LD_INT 1
46647: ARRAY
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: ST_TO_ADDR
// end ;
46656: LD_VAR 0 3
46660: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46661: LD_INT 0
46663: PPUSH
46664: PPUSH
// list := AreaToList ( area , 0 ) ;
46665: LD_ADDR_VAR 0 4
46669: PUSH
46670: LD_VAR 0 1
46674: PPUSH
46675: LD_INT 0
46677: PPUSH
46678: CALL_OW 517
46682: ST_TO_ADDR
// if not list then
46683: LD_VAR 0 4
46687: NOT
46688: IFFALSE 46692
// exit ;
46690: GO 46733
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46692: LD_ADDR_VAR 0 3
46696: PUSH
46697: LD_VAR 0 4
46701: PUSH
46702: LD_INT 1
46704: ARRAY
46705: PUSH
46706: LD_INT 1
46708: ARRAY
46709: PUSH
46710: LD_VAR 0 4
46714: PUSH
46715: LD_INT 2
46717: ARRAY
46718: PUSH
46719: LD_INT 1
46721: ARRAY
46722: PUSH
46723: LD_VAR 0 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: ST_TO_ADDR
// end ;
46733: LD_VAR 0 3
46737: RET
// export function First ( array ) ; begin
46738: LD_INT 0
46740: PPUSH
// if not array then
46741: LD_VAR 0 1
46745: NOT
46746: IFFALSE 46750
// exit ;
46748: GO 46764
// result := array [ 1 ] ;
46750: LD_ADDR_VAR 0 2
46754: PUSH
46755: LD_VAR 0 1
46759: PUSH
46760: LD_INT 1
46762: ARRAY
46763: ST_TO_ADDR
// end ;
46764: LD_VAR 0 2
46768: RET
// export function Last ( array ) ; begin
46769: LD_INT 0
46771: PPUSH
// if not array then
46772: LD_VAR 0 1
46776: NOT
46777: IFFALSE 46781
// exit ;
46779: GO 46797
// result := array [ array ] ;
46781: LD_ADDR_VAR 0 2
46785: PUSH
46786: LD_VAR 0 1
46790: PUSH
46791: LD_VAR 0 1
46795: ARRAY
46796: ST_TO_ADDR
// end ;
46797: LD_VAR 0 2
46801: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
// result := [ ] ;
46806: LD_ADDR_VAR 0 5
46810: PUSH
46811: EMPTY
46812: ST_TO_ADDR
// if not array then
46813: LD_VAR 0 1
46817: NOT
46818: IFFALSE 46822
// exit ;
46820: GO 46934
// for i := 1 to array do
46822: LD_ADDR_VAR 0 6
46826: PUSH
46827: DOUBLE
46828: LD_INT 1
46830: DEC
46831: ST_TO_ADDR
46832: LD_VAR 0 1
46836: PUSH
46837: FOR_TO
46838: IFFALSE 46932
// if array [ i ] [ index ] = value then
46840: LD_VAR 0 1
46844: PUSH
46845: LD_VAR 0 6
46849: ARRAY
46850: PUSH
46851: LD_VAR 0 2
46855: ARRAY
46856: PUSH
46857: LD_VAR 0 3
46861: EQUAL
46862: IFFALSE 46930
// begin if indexColumn then
46864: LD_VAR 0 4
46868: IFFALSE 46904
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46870: LD_ADDR_VAR 0 5
46874: PUSH
46875: LD_VAR 0 5
46879: PPUSH
46880: LD_VAR 0 1
46884: PUSH
46885: LD_VAR 0 6
46889: ARRAY
46890: PUSH
46891: LD_VAR 0 4
46895: ARRAY
46896: PPUSH
46897: CALL 41942 0 2
46901: ST_TO_ADDR
46902: GO 46930
// result := Join ( result , array [ i ] ) ;
46904: LD_ADDR_VAR 0 5
46908: PUSH
46909: LD_VAR 0 5
46913: PPUSH
46914: LD_VAR 0 1
46918: PUSH
46919: LD_VAR 0 6
46923: ARRAY
46924: PPUSH
46925: CALL 41942 0 2
46929: ST_TO_ADDR
// end ;
46930: GO 46837
46932: POP
46933: POP
// end ;
46934: LD_VAR 0 5
46938: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46939: LD_INT 0
46941: PPUSH
// if not vehicles or not parkingPoint then
46942: LD_VAR 0 1
46946: NOT
46947: IFTRUE 46956
46949: PUSH
46950: LD_VAR 0 2
46954: NOT
46955: OR
46956: IFFALSE 46960
// exit ;
46958: GO 47058
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46960: LD_ADDR_VAR 0 1
46964: PUSH
46965: LD_VAR 0 1
46969: PPUSH
46970: LD_INT 50
46972: PUSH
46973: EMPTY
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: LD_INT 92
46981: PUSH
46982: LD_VAR 0 2
46986: PUSH
46987: LD_INT 1
46989: ARRAY
46990: PUSH
46991: LD_VAR 0 2
46995: PUSH
46996: LD_INT 2
46998: ARRAY
46999: PUSH
47000: LD_INT 8
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PPUSH
47017: CALL_OW 72
47021: ST_TO_ADDR
// if not vehicles then
47022: LD_VAR 0 1
47026: NOT
47027: IFFALSE 47031
// exit ;
47029: GO 47058
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
47031: LD_VAR 0 1
47035: PPUSH
47036: LD_VAR 0 2
47040: PUSH
47041: LD_INT 1
47043: ARRAY
47044: PPUSH
47045: LD_VAR 0 2
47049: PUSH
47050: LD_INT 2
47052: ARRAY
47053: PPUSH
47054: CALL_OW 111
// end ;
47058: LD_VAR 0 3
47062: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
47063: LD_INT 0
47065: PPUSH
47066: PPUSH
47067: PPUSH
// if not side or not area then
47068: LD_VAR 0 1
47072: NOT
47073: IFTRUE 47082
47075: PUSH
47076: LD_VAR 0 2
47080: NOT
47081: OR
47082: IFFALSE 47086
// exit ;
47084: GO 47205
// tmp := AreaToList ( area , 0 ) ;
47086: LD_ADDR_VAR 0 5
47090: PUSH
47091: LD_VAR 0 2
47095: PPUSH
47096: LD_INT 0
47098: PPUSH
47099: CALL_OW 517
47103: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
47104: LD_ADDR_VAR 0 4
47108: PUSH
47109: DOUBLE
47110: LD_INT 1
47112: DEC
47113: ST_TO_ADDR
47114: LD_VAR 0 5
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PUSH
47123: FOR_TO
47124: IFFALSE 47203
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
47126: LD_VAR 0 5
47130: PUSH
47131: LD_INT 1
47133: ARRAY
47134: PUSH
47135: LD_VAR 0 4
47139: ARRAY
47140: PPUSH
47141: LD_VAR 0 5
47145: PUSH
47146: LD_INT 2
47148: ARRAY
47149: PUSH
47150: LD_VAR 0 4
47154: ARRAY
47155: PPUSH
47156: CALL_OW 351
47160: IFFALSE 47201
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47162: LD_VAR 0 5
47166: PUSH
47167: LD_INT 1
47169: ARRAY
47170: PUSH
47171: LD_VAR 0 4
47175: ARRAY
47176: PPUSH
47177: LD_VAR 0 5
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: PUSH
47186: LD_VAR 0 4
47190: ARRAY
47191: PPUSH
47192: LD_VAR 0 1
47196: PPUSH
47197: CALL_OW 244
// end ;
47201: GO 47123
47203: POP
47204: POP
// end ;
47205: LD_VAR 0 3
47209: RET
// export function UniqueArray ( array ) ; var i ; begin
47210: LD_INT 0
47212: PPUSH
47213: PPUSH
// result := [ ] ;
47214: LD_ADDR_VAR 0 2
47218: PUSH
47219: EMPTY
47220: ST_TO_ADDR
// if not array then
47221: LD_VAR 0 1
47225: NOT
47226: IFFALSE 47230
// exit ;
47228: GO 47291
// for i := 1 to array do
47230: LD_ADDR_VAR 0 3
47234: PUSH
47235: DOUBLE
47236: LD_INT 1
47238: DEC
47239: ST_TO_ADDR
47240: LD_VAR 0 1
47244: PUSH
47245: FOR_TO
47246: IFFALSE 47289
// if not array [ i ] in result then
47248: LD_VAR 0 1
47252: PUSH
47253: LD_VAR 0 3
47257: ARRAY
47258: PUSH
47259: LD_VAR 0 2
47263: IN
47264: NOT
47265: IFFALSE 47287
// result := Join ( result , i ) ;
47267: LD_ADDR_VAR 0 2
47271: PUSH
47272: LD_VAR 0 2
47276: PPUSH
47277: LD_VAR 0 3
47281: PPUSH
47282: CALL 41942 0 2
47286: ST_TO_ADDR
47287: GO 47245
47289: POP
47290: POP
// end ; end_of_file
47291: LD_VAR 0 2
47295: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
47296: LD_INT 0
47298: PPUSH
47299: PPUSH
// disable ( mpActive ) ;
47300: LD_INT 100
47302: DISABLE_MARKED
// disable ( mpWin ) ;
47303: LD_INT 101
47305: DISABLE_MARKED
// disable ( mpLose ) ;
47306: LD_INT 102
47308: DISABLE_MARKED
// mpGameType := 0 ;
47309: LD_ADDR_EXP 5
47313: PUSH
47314: LD_INT 0
47316: ST_TO_ADDR
// mpGameSettings := [ ] ;
47317: LD_ADDR_EXP 8
47321: PUSH
47322: EMPTY
47323: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
47324: LD_ADDR_EXP 6
47328: PUSH
47329: EMPTY
47330: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
47331: LD_ADDR_EXP 7
47335: PUSH
47336: EMPTY
47337: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
47338: LD_ADDR_EXP 31
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: ST_TO_ADDR
// mpOilDeposits := [ ] ;
47353: LD_ADDR_EXP 14
47357: PUSH
47358: EMPTY
47359: ST_TO_ADDR
// mpSibDeposits := [ ] ;
47360: LD_ADDR_EXP 15
47364: PUSH
47365: EMPTY
47366: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
47367: LD_ADDR_EXP 44
47371: PUSH
47372: EMPTY
47373: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
47374: LD_ADDR_EXP 45
47378: PUSH
47379: EMPTY
47380: ST_TO_ADDR
// mpDepots := [ ] ;
47381: LD_ADDR_EXP 16
47385: PUSH
47386: EMPTY
47387: ST_TO_ADDR
// mpBuildings := [ ] ;
47388: LD_ADDR_EXP 19
47392: PUSH
47393: EMPTY
47394: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
47395: LD_ADDR_EXP 20
47399: PUSH
47400: EMPTY
47401: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
47402: LD_ADDR_EXP 21
47406: PUSH
47407: EMPTY
47408: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
47409: LD_ADDR_EXP 22
47413: PUSH
47414: EMPTY
47415: ST_TO_ADDR
// mpStartingResources := [ ] ;
47416: LD_ADDR_EXP 17
47420: PUSH
47421: EMPTY
47422: ST_TO_ADDR
// mpStartPos := [ ] ;
47423: LD_ADDR_EXP 23
47427: PUSH
47428: EMPTY
47429: ST_TO_ADDR
// mpBattleFlag := - 1 ;
47430: LD_ADDR_EXP 24
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: ST_TO_ADDR
// mpBattleFlags := [ ] ;
47439: LD_ADDR_EXP 25
47443: PUSH
47444: EMPTY
47445: ST_TO_ADDR
// mpApemans := [ ] ;
47446: LD_ADDR_EXP 32
47450: PUSH
47451: EMPTY
47452: ST_TO_ADDR
// mpApemansArea := [ ] ;
47453: LD_ADDR_EXP 33
47457: PUSH
47458: EMPTY
47459: ST_TO_ADDR
// mpRespawn := [ ] ;
47460: LD_ADDR_EXP 35
47464: PUSH
47465: EMPTY
47466: ST_TO_ADDR
// mpKingArea := 0 ;
47467: LD_ADDR_EXP 36
47471: PUSH
47472: LD_INT 0
47474: ST_TO_ADDR
// mpPoints := [ ] ;
47475: LD_ADDR_EXP 37
47479: PUSH
47480: EMPTY
47481: ST_TO_ADDR
// mpVehicles := 0 ;
47482: LD_ADDR_EXP 38
47486: PUSH
47487: LD_INT 0
47489: ST_TO_ADDR
// mpShipments := 0 ;
47490: LD_ADDR_EXP 29
47494: PUSH
47495: LD_INT 0
47497: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47498: LD_ADDR_EXP 42
47502: PUSH
47503: EMPTY
47504: PUSH
47505: EMPTY
47506: PUSH
47507: EMPTY
47508: PUSH
47509: EMPTY
47510: PUSH
47511: EMPTY
47512: PUSH
47513: EMPTY
47514: PUSH
47515: EMPTY
47516: PUSH
47517: EMPTY
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47529: LD_ADDR_EXP 34
47533: PUSH
47534: EMPTY
47535: PUSH
47536: EMPTY
47537: PUSH
47538: EMPTY
47539: PUSH
47540: EMPTY
47541: PUSH
47542: EMPTY
47543: PUSH
47544: EMPTY
47545: PUSH
47546: EMPTY
47547: PUSH
47548: EMPTY
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
47560: LD_ADDR_EXP 43
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// mpEmissions := 0 ;
47599: LD_ADDR_EXP 39
47603: PUSH
47604: LD_INT 0
47606: ST_TO_ADDR
// mpTeleports := 0 ;
47607: LD_ADDR_EXP 46
47611: PUSH
47612: LD_INT 0
47614: ST_TO_ADDR
// mpArtifacts := 0 ;
47615: LD_ADDR_EXP 47
47619: PUSH
47620: LD_INT 0
47622: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
47623: LD_ADDR_EXP 48
47627: PUSH
47628: LD_INT 0
47630: ST_TO_ADDR
// mpPeopleSkill := 3 ;
47631: LD_ADDR_EXP 27
47635: PUSH
47636: LD_INT 3
47638: ST_TO_ADDR
// mpPeopleAmount := 15 ;
47639: LD_ADDR_EXP 26
47643: PUSH
47644: LD_INT 15
47646: ST_TO_ADDR
// mpDisplayStrings := 0 ;
47647: LD_ADDR_EXP 40
47651: PUSH
47652: LD_INT 0
47654: ST_TO_ADDR
// mpGameActive := false ;
47655: LD_ADDR_EXP 41
47659: PUSH
47660: LD_INT 0
47662: ST_TO_ADDR
// mpBlockRespThread := false ;
47663: LD_ADDR_EXP 49
47667: PUSH
47668: LD_INT 0
47670: ST_TO_ADDR
// for i := 1 to 32 do
47671: LD_ADDR_VAR 0 2
47675: PUSH
47676: DOUBLE
47677: LD_INT 1
47679: DEC
47680: ST_TO_ADDR
47681: LD_INT 32
47683: PUSH
47684: FOR_TO
47685: IFFALSE 47712
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
47687: LD_ADDR_EXP 8
47691: PUSH
47692: LD_EXP 8
47696: PPUSH
47697: LD_VAR 0 2
47701: PPUSH
47702: LD_INT 0
47704: PPUSH
47705: CALL_OW 1
47709: ST_TO_ADDR
47710: GO 47684
47712: POP
47713: POP
// end ;
47714: LD_VAR 0 1
47718: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
47719: LD_INT 0
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
47725: PPUSH
47726: PPUSH
47727: PPUSH
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
47735: LD_ADDR_VAR 0 14
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 5
47751: PUSH
47752: LD_INT 6
47754: PUSH
47755: LD_INT 7
47757: PUSH
47758: LD_INT 8
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// for i in gameTypes do
47770: LD_ADDR_VAR 0 2
47774: PUSH
47775: LD_VAR 0 14
47779: PUSH
47780: FOR_IN
47781: IFFALSE 47790
// disable ( i ) ;
47783: LD_VAR 0 2
47787: DISABLE_MARKED
47788: GO 47780
47790: POP
47791: POP
// if Multiplayer then
47792: LD_OWVAR 4
47796: IFFALSE 47980
// begin mpGameType := mp_game_type ;
47798: LD_ADDR_EXP 5
47802: PUSH
47803: LD_OWVAR 6
47807: ST_TO_ADDR
// your_side := mp_player_side ;
47808: LD_ADDR_OWVAR 2
47812: PUSH
47813: LD_OWVAR 7
47817: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47818: LD_ADDR_EXP 9
47822: PUSH
47823: LD_OWVAR 17
47827: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47828: LD_ADDR_EXP 10
47832: PUSH
47833: LD_OWVAR 15
47837: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47838: LD_ADDR_EXP 11
47842: PUSH
47843: LD_OWVAR 16
47847: ST_TO_ADDR
// mpTeams := mp_teams ;
47848: LD_ADDR_EXP 12
47852: PUSH
47853: LD_OWVAR 12
47857: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47858: LD_ADDR_VAR 0 2
47862: PUSH
47863: DOUBLE
47864: LD_INT 1
47866: DEC
47867: ST_TO_ADDR
47868: LD_EXP 6
47872: PPUSH
47873: CALL 5966 0 1
47877: PUSH
47878: FOR_TO
47879: IFFALSE 47955
// begin setting := mpGameSettingsKeys [ i ] ;
47881: LD_ADDR_VAR 0 12
47885: PUSH
47886: LD_EXP 6
47890: PUSH
47891: LD_VAR 0 2
47895: ARRAY
47896: ST_TO_ADDR
// if setting then
47897: LD_VAR 0 12
47901: IFFALSE 47953
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47903: LD_ADDR_EXP 8
47907: PUSH
47908: LD_EXP 8
47912: PPUSH
47913: LD_VAR 0 2
47917: PPUSH
47918: LD_EXP 7
47922: PUSH
47923: LD_VAR 0 2
47927: ARRAY
47928: PUSH
47929: LD_VAR 0 2
47933: PUSH
47934: LD_INT 1
47936: MINUS
47937: PPUSH
47938: CALL_OW 426
47942: PUSH
47943: LD_INT 1
47945: PLUS
47946: ARRAY
47947: PPUSH
47948: CALL_OW 1
47952: ST_TO_ADDR
// end ;
47953: GO 47878
47955: POP
47956: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47957: LD_ADDR_EXP 13
47961: PUSH
47962: LD_EXP 10
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: DIFF
47973: PUSH
47974: LD_INT 1
47976: GREATER
47977: ST_TO_ADDR
// end else
47978: GO 47980
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47980: LD_EXP 5
47984: PPUSH
47985: CALL 852 0 1
// if Count ( mpMarkedAreas ) then
47989: LD_EXP 20
47993: PPUSH
47994: CALL 5966 0 1
47998: IFFALSE 48029
// begin for i in mpMarkedAreas do
48000: LD_ADDR_VAR 0 2
48004: PUSH
48005: LD_EXP 20
48009: PUSH
48010: FOR_IN
48011: IFFALSE 48027
// SetAreaMapShow ( i , 0 ) ;
48013: LD_VAR 0 2
48017: PPUSH
48018: LD_INT 0
48020: PPUSH
48021: CALL_OW 424
48025: GO 48010
48027: POP
48028: POP
// end ; for i := 1 to 8 do
48029: LD_ADDR_VAR 0 2
48033: PUSH
48034: DOUBLE
48035: LD_INT 1
48037: DEC
48038: ST_TO_ADDR
48039: LD_INT 8
48041: PUSH
48042: FOR_TO
48043: IFFALSE 49502
// begin if not mpSidePositions [ i ] then
48045: LD_EXP 9
48049: PUSH
48050: LD_VAR 0 2
48054: ARRAY
48055: NOT
48056: IFFALSE 48060
// continue ;
48058: GO 48042
// side := i ;
48060: LD_ADDR_VAR 0 7
48064: PUSH
48065: LD_VAR 0 2
48069: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
48070: LD_ADDR_VAR 0 9
48074: PUSH
48075: LD_EXP 11
48079: PUSH
48080: LD_VAR 0 2
48084: ARRAY
48085: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
48086: LD_ADDR_VAR 0 8
48090: PUSH
48091: LD_EXP 9
48095: PUSH
48096: LD_VAR 0 2
48100: ARRAY
48101: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
48102: LD_EXP 14
48106: PPUSH
48107: CALL 5966 0 1
48111: IFFALSE 48188
// begin for j in mpOilDeposits [ pos ] do
48113: LD_ADDR_VAR 0 3
48117: PUSH
48118: LD_EXP 14
48122: PUSH
48123: LD_VAR 0 8
48127: ARRAY
48128: PUSH
48129: FOR_IN
48130: IFFALSE 48186
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
48132: LD_VAR 0 3
48136: PUSH
48137: LD_INT 1
48139: ARRAY
48140: PPUSH
48141: LD_VAR 0 3
48145: PUSH
48146: LD_INT 2
48148: ARRAY
48149: PPUSH
48150: LD_INT 2
48152: PPUSH
48153: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
48157: LD_VAR 0 3
48161: PUSH
48162: LD_INT 1
48164: ARRAY
48165: PPUSH
48166: LD_VAR 0 3
48170: PUSH
48171: LD_INT 2
48173: ARRAY
48174: PPUSH
48175: LD_VAR 0 7
48179: PPUSH
48180: CALL_OW 441
// end ;
48184: GO 48129
48186: POP
48187: POP
// end ; if Count ( mpSibDeposits ) then
48188: LD_EXP 15
48192: PPUSH
48193: CALL 5966 0 1
48197: IFFALSE 48274
// begin for j in mpSibDeposits [ pos ] do
48199: LD_ADDR_VAR 0 3
48203: PUSH
48204: LD_EXP 15
48208: PUSH
48209: LD_VAR 0 8
48213: ARRAY
48214: PUSH
48215: FOR_IN
48216: IFFALSE 48272
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
48218: LD_VAR 0 3
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PPUSH
48227: LD_VAR 0 3
48231: PUSH
48232: LD_INT 2
48234: ARRAY
48235: PPUSH
48236: LD_INT 3
48238: PPUSH
48239: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
48243: LD_VAR 0 3
48247: PUSH
48248: LD_INT 1
48250: ARRAY
48251: PPUSH
48252: LD_VAR 0 3
48256: PUSH
48257: LD_INT 2
48259: ARRAY
48260: PPUSH
48261: LD_VAR 0 7
48265: PPUSH
48266: CALL_OW 441
// end ;
48270: GO 48215
48272: POP
48273: POP
// end ; InitBc ;
48274: CALL_OW 21
// InitUc ;
48278: CALL_OW 18
// uc_side := side ;
48282: LD_ADDR_OWVAR 20
48286: PUSH
48287: LD_VAR 0 7
48291: ST_TO_ADDR
// uc_nation := nation ;
48292: LD_ADDR_OWVAR 21
48296: PUSH
48297: LD_VAR 0 9
48301: ST_TO_ADDR
// if mpBattleFlag > - 1 then
48302: LD_EXP 24
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: GREATER
48311: IFFALSE 48470
// begin x := mpStartPos [ pos ] [ 1 ] ;
48313: LD_ADDR_VAR 0 5
48317: PUSH
48318: LD_EXP 23
48322: PUSH
48323: LD_VAR 0 8
48327: ARRAY
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48333: LD_ADDR_VAR 0 6
48337: PUSH
48338: LD_EXP 23
48342: PUSH
48343: LD_VAR 0 8
48347: ARRAY
48348: PUSH
48349: LD_INT 2
48351: ARRAY
48352: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
48353: LD_VAR 0 5
48357: PPUSH
48358: LD_VAR 0 6
48362: PPUSH
48363: LD_INT 12
48365: PPUSH
48366: LD_INT 2
48368: PPUSH
48369: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
48373: LD_ADDR_EXP 25
48377: PUSH
48378: LD_EXP 25
48382: PPUSH
48383: LD_VAR 0 7
48387: PPUSH
48388: LD_VAR 0 7
48392: PPUSH
48393: LD_VAR 0 5
48397: PPUSH
48398: LD_VAR 0 6
48402: PPUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 100
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 70
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 40
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 10
48435: PUSH
48436: LD_INT 25
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 20
48445: PUSH
48446: LD_INT 100
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: PPUSH
48460: CALL_OW 418
48464: PPUSH
48465: CALL_OW 1
48469: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
48470: LD_EXP 16
48474: PPUSH
48475: CALL 5966 0 1
48479: IFFALSE 48678
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
48481: LD_EXP 5
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 8
48491: PUSH
48492: LD_INT 6
48494: PUSH
48495: LD_INT 7
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: IN
48504: IFFALSE 48524
// begin bc_level := 10 ;
48506: LD_ADDR_OWVAR 43
48510: PUSH
48511: LD_INT 10
48513: ST_TO_ADDR
// bc_type := b_warehouse ;
48514: LD_ADDR_OWVAR 42
48518: PUSH
48519: LD_INT 1
48521: ST_TO_ADDR
// end else
48522: GO 48540
// begin bc_level := 0 ;
48524: LD_ADDR_OWVAR 43
48528: PUSH
48529: LD_INT 0
48531: ST_TO_ADDR
// bc_type := b_depot ;
48532: LD_ADDR_OWVAR 42
48536: PUSH
48537: LD_INT 0
48539: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
48540: LD_ADDR_VAR 0 4
48544: PUSH
48545: LD_EXP 16
48549: PUSH
48550: LD_VAR 0 8
48554: ARRAY
48555: PUSH
48556: LD_INT 1
48558: ARRAY
48559: PPUSH
48560: LD_EXP 16
48564: PUSH
48565: LD_VAR 0 8
48569: ARRAY
48570: PUSH
48571: LD_INT 2
48573: ARRAY
48574: PPUSH
48575: LD_EXP 16
48579: PUSH
48580: LD_VAR 0 8
48584: ARRAY
48585: PUSH
48586: LD_INT 3
48588: ARRAY
48589: PPUSH
48590: CALL_OW 47
48594: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
48595: LD_VAR 0 4
48599: PPUSH
48600: LD_STRING @
48602: PUSH
48603: LD_VAR 0 7
48607: STR
48608: PPUSH
48609: CALL_OW 500
// if Count ( mpStartingResources ) then
48613: LD_EXP 17
48617: PPUSH
48618: CALL 5966 0 1
48622: IFFALSE 48676
// begin for j := 1 to mpStartingResources do
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: DOUBLE
48630: LD_INT 1
48632: DEC
48633: ST_TO_ADDR
48634: LD_EXP 17
48638: PUSH
48639: FOR_TO
48640: IFFALSE 48674
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
48642: LD_VAR 0 4
48646: PPUSH
48647: CALL_OW 274
48651: PPUSH
48652: LD_VAR 0 3
48656: PPUSH
48657: LD_EXP 17
48661: PUSH
48662: LD_VAR 0 3
48666: ARRAY
48667: PPUSH
48668: CALL_OW 277
48672: GO 48639
48674: POP
48675: POP
// end ; end else
48676: GO 48885
// if Count ( mpStartingResources ) then
48678: LD_EXP 17
48682: PPUSH
48683: CALL 5966 0 1
48687: IFFALSE 48885
// begin x := mpStartPos [ pos ] [ 1 ] ;
48689: LD_ADDR_VAR 0 5
48693: PUSH
48694: LD_EXP 23
48698: PUSH
48699: LD_VAR 0 8
48703: ARRAY
48704: PUSH
48705: LD_INT 1
48707: ARRAY
48708: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48709: LD_ADDR_VAR 0 6
48713: PUSH
48714: LD_EXP 23
48718: PUSH
48719: LD_VAR 0 8
48723: ARRAY
48724: PUSH
48725: LD_INT 2
48727: ARRAY
48728: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48729: LD_ADDR_VAR 0 3
48733: PUSH
48734: DOUBLE
48735: LD_INT 1
48737: DEC
48738: ST_TO_ADDR
48739: LD_EXP 17
48743: PUSH
48744: FOR_TO
48745: IFFALSE 48883
// begin resources := mpStartingResources [ j ] ;
48747: LD_ADDR_VAR 0 13
48751: PUSH
48752: LD_EXP 17
48756: PUSH
48757: LD_VAR 0 3
48761: ARRAY
48762: ST_TO_ADDR
// if resources = 0 then
48763: LD_VAR 0 13
48767: PUSH
48768: LD_INT 0
48770: EQUAL
48771: IFFALSE 48775
// continue ;
48773: GO 48744
// repeat if resources >= 50 then
48775: LD_VAR 0 13
48779: PUSH
48780: LD_INT 50
48782: GREATEREQUAL
48783: IFFALSE 48829
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48785: LD_VAR 0 3
48789: PPUSH
48790: LD_INT 5
48792: PPUSH
48793: LD_VAR 0 5
48797: PPUSH
48798: LD_VAR 0 6
48802: PPUSH
48803: LD_INT 6
48805: PPUSH
48806: LD_INT 0
48808: PPUSH
48809: CALL_OW 60
// resources := resources - 50 ;
48813: LD_ADDR_VAR 0 13
48817: PUSH
48818: LD_VAR 0 13
48822: PUSH
48823: LD_INT 50
48825: MINUS
48826: ST_TO_ADDR
// end else
48827: GO 48871
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48829: LD_VAR 0 3
48833: PPUSH
48834: LD_VAR 0 13
48838: PUSH
48839: LD_INT 10
48841: DIV
48842: PPUSH
48843: LD_VAR 0 5
48847: PPUSH
48848: LD_VAR 0 6
48852: PPUSH
48853: LD_INT 6
48855: PPUSH
48856: LD_INT 0
48858: PPUSH
48859: CALL_OW 60
// resources := 0 ;
48863: LD_ADDR_VAR 0 13
48867: PUSH
48868: LD_INT 0
48870: ST_TO_ADDR
// end ; until resources <= 0 ;
48871: LD_VAR 0 13
48875: PUSH
48876: LD_INT 0
48878: LESSEQUAL
48879: IFFALSE 48775
// end ;
48881: GO 48744
48883: POP
48884: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
48885: LD_EXP 19
48889: PPUSH
48890: CALL 5966 0 1
48894: IFFALSE 48914
48896: PUSH
48897: LD_EXP 5
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 8
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: IN
48912: NOT
48913: AND
48914: IFFALSE 48992
// begin for j in mpBuildings [ pos ] do
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_EXP 19
48925: PUSH
48926: LD_VAR 0 8
48930: ARRAY
48931: PUSH
48932: FOR_IN
48933: IFFALSE 48990
// begin bc_level := 0 ;
48935: LD_ADDR_OWVAR 43
48939: PUSH
48940: LD_INT 0
48942: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48943: LD_ADDR_OWVAR 42
48947: PUSH
48948: LD_VAR 0 3
48952: PUSH
48953: LD_INT 1
48955: ARRAY
48956: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48957: LD_VAR 0 3
48961: PUSH
48962: LD_INT 2
48964: ARRAY
48965: PPUSH
48966: LD_VAR 0 3
48970: PUSH
48971: LD_INT 3
48973: ARRAY
48974: PPUSH
48975: LD_VAR 0 3
48979: PUSH
48980: LD_INT 4
48982: ARRAY
48983: PPUSH
48984: CALL_OW 47
// end ;
48988: GO 48932
48990: POP
48991: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48992: LD_EXP 28
48996: IFFALSE 49016
48998: PUSH
48999: LD_INT 20
49001: PPUSH
49002: LD_VAR 0 7
49006: PPUSH
49007: CALL_OW 321
49011: PUSH
49012: LD_INT 1
49014: EQUAL
49015: AND
49016: IFFALSE 49033
// SetTech ( tech_SibDet , side , state_researched ) ;
49018: LD_INT 20
49020: PPUSH
49021: LD_VAR 0 7
49025: PPUSH
49026: LD_INT 2
49028: PPUSH
49029: CALL_OW 322
// if not mpArtifacts then
49033: LD_EXP 47
49037: NOT
49038: IFFALSE 49055
// SetTech ( tech_artifact , side , state_disabled ) ;
49040: LD_INT 24
49042: PPUSH
49043: LD_VAR 0 7
49047: PPUSH
49048: LD_INT 0
49050: PPUSH
49051: CALL_OW 322
// if mpSibBomb = 1 then
49055: LD_EXP 30
49059: PUSH
49060: LD_INT 1
49062: EQUAL
49063: IFFALSE 49082
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
49065: LD_INT 25
49067: PPUSH
49068: LD_VAR 0 7
49072: PPUSH
49073: LD_INT 1
49075: PPUSH
49076: CALL_OW 322
// end else
49080: GO 49097
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
49082: LD_INT 25
49084: PPUSH
49085: LD_VAR 0 7
49089: PPUSH
49090: LD_INT 0
49092: PPUSH
49093: CALL_OW 322
// end ; if mpVehicles then
49097: LD_EXP 38
49101: IFFALSE 49200
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
49103: LD_ADDR_VAR 0 3
49107: PUSH
49108: LD_VAR 0 7
49112: PPUSH
49113: LD_VAR 0 9
49117: PPUSH
49118: LD_EXP 38
49122: PPUSH
49123: CALL 50459 0 3
49127: PUSH
49128: FOR_IN
49129: IFFALSE 49198
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
49131: LD_VAR 0 3
49135: PPUSH
49136: LD_INT 0
49138: PPUSH
49139: LD_INT 5
49141: PPUSH
49142: CALL_OW 12
49146: PPUSH
49147: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
49151: LD_VAR 0 3
49155: PPUSH
49156: LD_EXP 23
49160: PUSH
49161: LD_VAR 0 8
49165: ARRAY
49166: PUSH
49167: LD_INT 1
49169: ARRAY
49170: PPUSH
49171: LD_EXP 23
49175: PUSH
49176: LD_VAR 0 8
49180: ARRAY
49181: PUSH
49182: LD_INT 2
49184: ARRAY
49185: PPUSH
49186: LD_INT 12
49188: PPUSH
49189: LD_INT 0
49191: PPUSH
49192: CALL_OW 50
// end ;
49196: GO 49128
49198: POP
49199: POP
// end ; uc_nation := nation ;
49200: LD_ADDR_OWVAR 21
49204: PUSH
49205: LD_VAR 0 9
49209: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
49210: LD_EXP 5
49214: PUSH
49215: LD_INT 6
49217: PUSH
49218: LD_INT 7
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: IN
49225: IFFALSE 49250
49227: PUSH
49228: LD_EXP 9
49232: PUSH
49233: LD_VAR 0 2
49237: ARRAY
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: IN
49249: AND
49250: IFFALSE 49298
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
49252: LD_ADDR_VAR 0 11
49256: PUSH
49257: LD_VAR 0 7
49261: PPUSH
49262: LD_VAR 0 9
49266: PPUSH
49267: LD_EXP 26
49271: PUSH
49272: LD_EXP 26
49276: PUSH
49277: LD_INT 2
49279: DIV
49280: PLUS
49281: PPUSH
49282: LD_EXP 27
49286: PUSH
49287: LD_INT 1
49289: PLUS
49290: PPUSH
49291: CALL 49914 0 4
49295: ST_TO_ADDR
49296: GO 49328
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
49298: LD_ADDR_VAR 0 11
49302: PUSH
49303: LD_VAR 0 7
49307: PPUSH
49308: LD_VAR 0 9
49312: PPUSH
49313: LD_EXP 26
49317: PPUSH
49318: LD_EXP 27
49322: PPUSH
49323: CALL 49914 0 4
49327: ST_TO_ADDR
// for j in team do
49328: LD_ADDR_VAR 0 3
49332: PUSH
49333: LD_VAR 0 11
49337: PUSH
49338: FOR_IN
49339: IFFALSE 49388
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
49341: LD_VAR 0 3
49345: PPUSH
49346: LD_EXP 23
49350: PUSH
49351: LD_VAR 0 8
49355: ARRAY
49356: PUSH
49357: LD_INT 1
49359: ARRAY
49360: PPUSH
49361: LD_EXP 23
49365: PUSH
49366: LD_VAR 0 8
49370: ARRAY
49371: PUSH
49372: LD_INT 2
49374: ARRAY
49375: PPUSH
49376: LD_INT 12
49378: PPUSH
49379: LD_INT 0
49381: PPUSH
49382: CALL_OW 50
49386: GO 49338
49388: POP
49389: POP
// if mpApemans then
49390: LD_EXP 32
49394: IFFALSE 49500
// begin for j := 1 to mpApemans do
49396: LD_ADDR_VAR 0 3
49400: PUSH
49401: DOUBLE
49402: LD_INT 1
49404: DEC
49405: ST_TO_ADDR
49406: LD_EXP 32
49410: PUSH
49411: FOR_TO
49412: IFFALSE 49498
// begin PrepareApeman ( - 5 ) ;
49414: LD_INT 5
49416: NEG
49417: PPUSH
49418: CALL 38069 0 1
// ape := CreateHuman ;
49422: LD_ADDR_VAR 0 10
49426: PUSH
49427: CALL_OW 44
49431: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
49432: LD_ADDR_EXP 34
49436: PUSH
49437: LD_EXP 34
49441: PPUSH
49442: LD_VAR 0 8
49446: PPUSH
49447: LD_EXP 34
49451: PUSH
49452: LD_VAR 0 8
49456: ARRAY
49457: PPUSH
49458: LD_VAR 0 10
49462: PPUSH
49463: CALL 41942 0 2
49467: PPUSH
49468: CALL_OW 1
49472: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
49473: LD_VAR 0 10
49477: PPUSH
49478: LD_EXP 33
49482: PUSH
49483: LD_VAR 0 8
49487: ARRAY
49488: PPUSH
49489: LD_INT 0
49491: PPUSH
49492: CALL_OW 49
// end ;
49496: GO 49411
49498: POP
49499: POP
// end ; end ;
49500: GO 48042
49502: POP
49503: POP
// if not mpTeamGame then
49504: LD_EXP 13
49508: NOT
49509: IFFALSE 49607
// begin for i := 1 to 8 do
49511: LD_ADDR_VAR 0 2
49515: PUSH
49516: DOUBLE
49517: LD_INT 1
49519: DEC
49520: ST_TO_ADDR
49521: LD_INT 8
49523: PUSH
49524: FOR_TO
49525: IFFALSE 49603
// for j := 1 to 8 do
49527: LD_ADDR_VAR 0 3
49531: PUSH
49532: DOUBLE
49533: LD_INT 1
49535: DEC
49536: ST_TO_ADDR
49537: LD_INT 8
49539: PUSH
49540: FOR_TO
49541: IFFALSE 49599
// if i <> j then
49543: LD_VAR 0 2
49547: PUSH
49548: LD_VAR 0 3
49552: NONEQUAL
49553: IFFALSE 49577
// SetAttitude ( i , j , att_neutral , true ) else
49555: LD_VAR 0 2
49559: PPUSH
49560: LD_VAR 0 3
49564: PPUSH
49565: LD_INT 0
49567: PPUSH
49568: LD_INT 1
49570: PPUSH
49571: CALL_OW 80
49575: GO 49597
// SetAttitude ( i , j , att_friend , true ) ;
49577: LD_VAR 0 2
49581: PPUSH
49582: LD_VAR 0 3
49586: PPUSH
49587: LD_INT 1
49589: PPUSH
49590: LD_INT 1
49592: PPUSH
49593: CALL_OW 80
49597: GO 49540
49599: POP
49600: POP
49601: GO 49524
49603: POP
49604: POP
// end else
49605: GO 49782
// begin if mpSharedVision then
49607: LD_EXP 18
49611: IFFALSE 49676
// begin for i in mpTeams do
49613: LD_ADDR_VAR 0 2
49617: PUSH
49618: LD_EXP 12
49622: PUSH
49623: FOR_IN
49624: IFFALSE 49674
// for j := 2 to i do
49626: LD_ADDR_VAR 0 3
49630: PUSH
49631: DOUBLE
49632: LD_INT 2
49634: DEC
49635: ST_TO_ADDR
49636: LD_VAR 0 2
49640: PUSH
49641: FOR_TO
49642: IFFALSE 49670
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
49644: LD_VAR 0 2
49648: PUSH
49649: LD_VAR 0 3
49653: ARRAY
49654: PPUSH
49655: LD_VAR 0 2
49659: PUSH
49660: LD_INT 1
49662: ARRAY
49663: PPUSH
49664: CALL_OW 343
49668: GO 49641
49670: POP
49671: POP
49672: GO 49623
49674: POP
49675: POP
// end ; for i := 1 to 8 do
49676: LD_ADDR_VAR 0 2
49680: PUSH
49681: DOUBLE
49682: LD_INT 1
49684: DEC
49685: ST_TO_ADDR
49686: LD_INT 8
49688: PUSH
49689: FOR_TO
49690: IFFALSE 49780
// for j := 1 to 8 do
49692: LD_ADDR_VAR 0 3
49696: PUSH
49697: DOUBLE
49698: LD_INT 1
49700: DEC
49701: ST_TO_ADDR
49702: LD_INT 8
49704: PUSH
49705: FOR_TO
49706: IFFALSE 49776
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
49708: LD_EXP 10
49712: PUSH
49713: LD_VAR 0 2
49717: ARRAY
49718: PUSH
49719: LD_EXP 10
49723: PUSH
49724: LD_VAR 0 3
49728: ARRAY
49729: EQUAL
49730: IFFALSE 49754
// SetAttitude ( i , j , att_friend , true ) else
49732: LD_VAR 0 2
49736: PPUSH
49737: LD_VAR 0 3
49741: PPUSH
49742: LD_INT 1
49744: PPUSH
49745: LD_INT 1
49747: PPUSH
49748: CALL_OW 80
49752: GO 49774
// SetAttitude ( i , j , att_enemy , true ) ;
49754: LD_VAR 0 2
49758: PPUSH
49759: LD_VAR 0 3
49763: PPUSH
49764: LD_INT 2
49766: PPUSH
49767: LD_INT 1
49769: PPUSH
49770: CALL_OW 80
49774: GO 49705
49776: POP
49777: POP
49778: GO 49689
49780: POP
49781: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49782: LD_ADDR_OWVAR 71
49786: PUSH
49787: LD_EXP 11
49791: PUSH
49792: LD_OWVAR 2
49796: ARRAY
49797: ST_TO_ADDR
// if IAmSpec then
49798: CALL_OW 531
49802: IFFALSE 49843
// begin FogOff ( true ) ;
49804: LD_INT 1
49806: PPUSH
49807: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49811: LD_EXP 31
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PUSH
49820: LD_INT 2
49822: DIV
49823: PPUSH
49824: LD_EXP 31
49828: PUSH
49829: LD_INT 2
49831: ARRAY
49832: PUSH
49833: LD_INT 2
49835: DIV
49836: PPUSH
49837: CALL_OW 86
// end else
49841: GO 49889
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49843: LD_EXP 23
49847: PUSH
49848: LD_EXP 9
49852: PUSH
49853: LD_OWVAR 2
49857: ARRAY
49858: ARRAY
49859: PUSH
49860: LD_INT 1
49862: ARRAY
49863: PPUSH
49864: LD_EXP 23
49868: PUSH
49869: LD_EXP 9
49873: PUSH
49874: LD_OWVAR 2
49878: ARRAY
49879: ARRAY
49880: PUSH
49881: LD_INT 2
49883: ARRAY
49884: PPUSH
49885: CALL_OW 86
// end ; BeginBuildUp ;
49889: CALL 50992 0 0
// enable ( mpActive ) ;
49893: LD_INT 100
49895: ENABLE_MARKED
// enable ( mpGameType ) ;
49896: LD_EXP 5
49900: ENABLE_MARKED
// mpGameActive := true ;
49901: LD_ADDR_EXP 41
49905: PUSH
49906: LD_INT 1
49908: ST_TO_ADDR
// end ;
49909: LD_VAR 0 1
49913: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49914: LD_INT 0
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
// result := [ ] ;
49921: LD_ADDR_VAR 0 5
49925: PUSH
49926: EMPTY
49927: ST_TO_ADDR
// class := class_soldier ;
49928: LD_ADDR_VAR 0 8
49932: PUSH
49933: LD_INT 1
49935: ST_TO_ADDR
// uc_side := side ;
49936: LD_ADDR_OWVAR 20
49940: PUSH
49941: LD_VAR 0 1
49945: ST_TO_ADDR
// uc_nation := nation ;
49946: LD_ADDR_OWVAR 21
49950: PUSH
49951: LD_VAR 0 2
49955: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49956: LD_ADDR_OWVAR 26
49960: PUSH
49961: LD_OWVAR 19
49965: PUSH
49966: LD_VAR 0 1
49970: ARRAY
49971: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49972: LD_INT 1
49974: PPUSH
49975: LD_INT 2
49977: PPUSH
49978: CALL_OW 12
49982: PPUSH
49983: LD_VAR 0 8
49987: PPUSH
49988: LD_VAR 0 4
49992: PUSH
49993: LD_INT 2
49995: PLUS
49996: PPUSH
49997: CALL_OW 380
// hc_importance := 105 ;
50001: LD_ADDR_OWVAR 32
50005: PUSH
50006: LD_INT 105
50008: ST_TO_ADDR
// if Multiplayer then
50009: LD_OWVAR 4
50013: IFFALSE 50053
// begin hc_gallery := MULTIAVATARS ;
50015: LD_ADDR_OWVAR 33
50019: PUSH
50020: LD_STRING MULTIAVATARS
50022: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
50023: LD_ADDR_OWVAR 34
50027: PUSH
50028: LD_VAR 0 1
50032: PPUSH
50033: CALL_OW 525
50037: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
50038: LD_ADDR_OWVAR 27
50042: PUSH
50043: LD_VAR 0 1
50047: PPUSH
50048: CALL_OW 526
50052: ST_TO_ADDR
// end ; commander := CreateHuman ;
50053: LD_ADDR_VAR 0 9
50057: PUSH
50058: CALL_OW 44
50062: ST_TO_ADDR
// result := Join ( result , commander ) ;
50063: LD_ADDR_VAR 0 5
50067: PUSH
50068: LD_VAR 0 5
50072: PPUSH
50073: LD_VAR 0 9
50077: PPUSH
50078: CALL 41942 0 2
50082: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
50083: LD_ADDR_EXP 43
50087: PUSH
50088: LD_EXP 43
50092: PPUSH
50093: LD_VAR 0 1
50097: PPUSH
50098: LD_VAR 0 9
50102: PPUSH
50103: CALL_OW 1
50107: ST_TO_ADDR
// if mpTeamPreset then
50108: LD_LOC 1
50112: IFFALSE 50208
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
50114: LD_LOC 1
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: PPUSH
50123: LD_VAR 0 5
50127: PUSH
50128: LD_VAR 0 5
50132: ARRAY
50133: PPUSH
50134: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
50138: LD_VAR 0 5
50142: PUSH
50143: LD_VAR 0 5
50147: ARRAY
50148: PPUSH
50149: LD_INT 1
50151: PPUSH
50152: LD_LOC 1
50156: PUSH
50157: LD_INT 1
50159: ARRAY
50160: PPUSH
50161: LD_INT 1
50163: PPUSH
50164: CALL_OW 260
50168: PPUSH
50169: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
50173: LD_VAR 0 5
50177: PUSH
50178: LD_VAR 0 5
50182: ARRAY
50183: PPUSH
50184: LD_INT 2
50186: PPUSH
50187: LD_LOC 1
50191: PUSH
50192: LD_INT 1
50194: ARRAY
50195: PPUSH
50196: LD_INT 2
50198: PPUSH
50199: CALL_OW 260
50203: PPUSH
50204: CALL_OW 239
// end ; InitHc_All ( ) ;
50208: CALL_OW 584
// class := 2 ;
50212: LD_ADDR_VAR 0 8
50216: PUSH
50217: LD_INT 2
50219: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
50220: LD_ADDR_VAR 0 6
50224: PUSH
50225: DOUBLE
50226: LD_INT 1
50228: DEC
50229: ST_TO_ADDR
50230: LD_VAR 0 3
50234: PUSH
50235: LD_INT 1
50237: MINUS
50238: PUSH
50239: FOR_TO
50240: IFFALSE 50435
// begin PrepareHuman ( false , class , skill ) ;
50242: LD_INT 0
50244: PPUSH
50245: LD_VAR 0 8
50249: PPUSH
50250: LD_VAR 0 4
50254: PPUSH
50255: CALL_OW 380
// un := CreateHuman ;
50259: LD_ADDR_VAR 0 7
50263: PUSH
50264: CALL_OW 44
50268: ST_TO_ADDR
// result := Join ( result , un ) ;
50269: LD_ADDR_VAR 0 5
50273: PUSH
50274: LD_VAR 0 5
50278: PPUSH
50279: LD_VAR 0 7
50283: PPUSH
50284: CALL 41942 0 2
50288: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
50289: LD_LOC 1
50293: PPUSH
50294: CALL 5966 0 1
50298: PUSH
50299: LD_VAR 0 3
50303: GREATEREQUAL
50304: IFFALSE 50400
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
50306: LD_LOC 1
50310: PUSH
50311: LD_VAR 0 6
50315: PUSH
50316: LD_INT 1
50318: PLUS
50319: ARRAY
50320: PPUSH
50321: LD_VAR 0 7
50325: PPUSH
50326: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
50330: LD_VAR 0 7
50334: PPUSH
50335: LD_INT 1
50337: PPUSH
50338: LD_LOC 1
50342: PUSH
50343: LD_VAR 0 6
50347: PUSH
50348: LD_INT 1
50350: PLUS
50351: ARRAY
50352: PPUSH
50353: LD_INT 1
50355: PPUSH
50356: CALL_OW 260
50360: PPUSH
50361: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
50365: LD_VAR 0 7
50369: PPUSH
50370: LD_INT 2
50372: PPUSH
50373: LD_LOC 1
50377: PUSH
50378: LD_VAR 0 6
50382: PUSH
50383: LD_INT 1
50385: PLUS
50386: ARRAY
50387: PPUSH
50388: LD_INT 2
50390: PPUSH
50391: CALL_OW 260
50395: PPUSH
50396: CALL_OW 239
// end ; class := Inc ( class ) ;
50400: LD_ADDR_VAR 0 8
50404: PUSH
50405: LD_VAR 0 8
50409: PPUSH
50410: CALL 43315 0 1
50414: ST_TO_ADDR
// if class = 5 then
50415: LD_VAR 0 8
50419: PUSH
50420: LD_INT 5
50422: EQUAL
50423: IFFALSE 50433
// class := 1 ;
50425: LD_ADDR_VAR 0 8
50429: PUSH
50430: LD_INT 1
50432: ST_TO_ADDR
// end ;
50433: GO 50239
50435: POP
50436: POP
// if not mpTeamPreset then
50437: LD_LOC 1
50441: NOT
50442: IFFALSE 50454
// mpTeamPreset := result ;
50444: LD_ADDR_LOC 1
50448: PUSH
50449: LD_VAR 0 5
50453: ST_TO_ADDR
// end ;
50454: LD_VAR 0 5
50458: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
50459: LD_INT 0
50461: PPUSH
50462: PPUSH
// result := [ ] ;
50463: LD_ADDR_VAR 0 4
50467: PUSH
50468: EMPTY
50469: ST_TO_ADDR
// if not vehicles then
50470: LD_VAR 0 3
50474: NOT
50475: IFFALSE 50479
// exit ;
50477: GO 50693
// for i := 1 to vehicles [ nation ] do
50479: LD_ADDR_VAR 0 5
50483: PUSH
50484: DOUBLE
50485: LD_INT 1
50487: DEC
50488: ST_TO_ADDR
50489: LD_VAR 0 3
50493: PUSH
50494: LD_VAR 0 2
50498: ARRAY
50499: PUSH
50500: FOR_TO
50501: IFFALSE 50691
// begin uc_side := side ;
50503: LD_ADDR_OWVAR 20
50507: PUSH
50508: LD_VAR 0 1
50512: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
50513: LD_VAR 0 3
50517: PUSH
50518: LD_VAR 0 2
50522: ARRAY
50523: PUSH
50524: LD_VAR 0 5
50528: ARRAY
50529: PPUSH
50530: CALL 5966 0 1
50534: PUSH
50535: LD_INT 4
50537: GREATER
50538: IFFALSE 50568
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
50540: LD_ADDR_OWVAR 21
50544: PUSH
50545: LD_VAR 0 3
50549: PUSH
50550: LD_VAR 0 2
50554: ARRAY
50555: PUSH
50556: LD_VAR 0 5
50560: ARRAY
50561: PUSH
50562: LD_INT 5
50564: ARRAY
50565: ST_TO_ADDR
50566: GO 50578
// uc_nation := nation ;
50568: LD_ADDR_OWVAR 21
50572: PUSH
50573: LD_VAR 0 2
50577: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
50578: LD_VAR 0 3
50582: PUSH
50583: LD_VAR 0 2
50587: ARRAY
50588: PUSH
50589: LD_VAR 0 5
50593: ARRAY
50594: PUSH
50595: LD_INT 1
50597: ARRAY
50598: PPUSH
50599: LD_VAR 0 3
50603: PUSH
50604: LD_VAR 0 2
50608: ARRAY
50609: PUSH
50610: LD_VAR 0 5
50614: ARRAY
50615: PUSH
50616: LD_INT 2
50618: ARRAY
50619: PPUSH
50620: LD_VAR 0 3
50624: PUSH
50625: LD_VAR 0 2
50629: ARRAY
50630: PUSH
50631: LD_VAR 0 5
50635: ARRAY
50636: PUSH
50637: LD_INT 3
50639: ARRAY
50640: PPUSH
50641: LD_VAR 0 3
50645: PUSH
50646: LD_VAR 0 2
50650: ARRAY
50651: PUSH
50652: LD_VAR 0 5
50656: ARRAY
50657: PUSH
50658: LD_INT 4
50660: ARRAY
50661: PPUSH
50662: LD_INT 80
50664: PPUSH
50665: CALL 8762 0 5
// result := Join ( result , CreateVehicle ) ;
50669: LD_ADDR_VAR 0 4
50673: PUSH
50674: LD_VAR 0 4
50678: PPUSH
50679: CALL_OW 45
50683: PPUSH
50684: CALL 41942 0 2
50688: ST_TO_ADDR
// end ;
50689: GO 50500
50691: POP
50692: POP
// end ;
50693: LD_VAR 0 4
50697: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
50698: LD_INT 0
50700: PPUSH
50701: PPUSH
// for i in mpBattleFlags do
50702: LD_ADDR_VAR 0 3
50706: PUSH
50707: LD_EXP 25
50711: PUSH
50712: FOR_IN
50713: IFFALSE 50790
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
50715: LD_VAR 0 3
50719: PPUSH
50720: LD_INT 1
50722: PUSH
50723: LD_VAR 0 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_VAR 0 1
50739: PUSH
50740: LD_REAL  7.00000000000000E-0001
50743: MUL
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_VAR 0 1
50756: PUSH
50757: LD_REAL  4.00000000000000E-0001
50760: MUL
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 20
50768: PUSH
50769: LD_VAR 0 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: PPUSH
50784: CALL_OW 423
50788: GO 50712
50790: POP
50791: POP
// end ;
50792: LD_VAR 0 2
50796: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50797: LD_INT 100
50799: IFFALSE 50894
50801: GO 50803
50803: DISABLE
50804: LD_INT 0
50806: PPUSH
50807: PPUSH
// begin if mpBattleFlag <= 0 then
50808: LD_EXP 24
50812: PUSH
50813: LD_INT 0
50815: LESSEQUAL
50816: IFFALSE 50820
// exit ;
50818: GO 50894
// strength := 100 ;
50820: LD_ADDR_VAR 0 2
50824: PUSH
50825: LD_INT 100
50827: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50828: LD_EXP 24
50832: PPUSH
50833: CALL_OW 67
// strength := Dec ( strength ) ;
50837: LD_ADDR_VAR 0 2
50841: PUSH
50842: LD_VAR 0 2
50846: PPUSH
50847: CALL 43337 0 1
50851: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50852: LD_VAR 0 2
50856: PPUSH
50857: CALL 50698 0 1
// until not strength ;
50861: LD_VAR 0 2
50865: NOT
50866: IFFALSE 50828
// for i in mpBattleFlags do
50868: LD_ADDR_VAR 0 1
50872: PUSH
50873: LD_EXP 25
50877: PUSH
50878: FOR_IN
50879: IFFALSE 50892
// KillBattleFlag ( i ) ;
50881: LD_VAR 0 1
50885: PPUSH
50886: CALL_OW 419
50890: GO 50878
50892: POP
50893: POP
// end ;
50894: PPOPN 2
50896: END
// every 0 0$1 marked mpActive do var side , tmp ;
50897: GO 50899
50899: DISABLE
50900: LD_INT 0
50902: PPUSH
50903: PPUSH
// begin if mpSibBomb <= 1 then
50904: LD_EXP 30
50908: PUSH
50909: LD_INT 1
50911: LESSEQUAL
50912: IFFALSE 50916
// exit ;
50914: GO 50989
// tmp := mpSibBomb ;
50916: LD_ADDR_VAR 0 2
50920: PUSH
50921: LD_EXP 30
50925: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50926: LD_INT 35
50928: PPUSH
50929: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50933: LD_ADDR_VAR 0 2
50937: PUSH
50938: LD_VAR 0 2
50942: PUSH
50943: LD_INT 35
50945: MINUS
50946: ST_TO_ADDR
// until not tmp ;
50947: LD_VAR 0 2
50951: NOT
50952: IFFALSE 50926
// for side := 1 to 8 do
50954: LD_ADDR_VAR 0 1
50958: PUSH
50959: DOUBLE
50960: LD_INT 1
50962: DEC
50963: ST_TO_ADDR
50964: LD_INT 8
50966: PUSH
50967: FOR_TO
50968: IFFALSE 50987
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50970: LD_INT 25
50972: PPUSH
50973: LD_VAR 0 1
50977: PPUSH
50978: LD_INT 1
50980: PPUSH
50981: CALL_OW 322
50985: GO 50967
50987: POP
50988: POP
// end ;
50989: PPOPN 2
50991: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50992: LD_INT 0
50994: PPUSH
50995: PPUSH
50996: PPUSH
// mpBuildUpTimeDelay := 0 ;
50997: LD_ADDR_EXP 50
51001: PUSH
51002: LD_INT 0
51004: ST_TO_ADDR
// if not mpBuildUpTime then
51005: LD_EXP 22
51009: NOT
51010: IFFALSE 51014
// exit ;
51012: GO 51203
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
51014: LD_ADDR_EXP 50
51018: PUSH
51019: LD_INT 8400
51021: PUSH
51022: LD_INT 2100
51024: PUSH
51025: LD_EXP 22
51029: MUL
51030: PLUS
51031: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
51032: LD_ADDR_EXP 51
51036: PUSH
51037: LD_INT 1
51039: ST_TO_ADDR
// for i := 1 to 8 do
51040: LD_ADDR_VAR 0 2
51044: PUSH
51045: DOUBLE
51046: LD_INT 1
51048: DEC
51049: ST_TO_ADDR
51050: LD_INT 8
51052: PUSH
51053: FOR_TO
51054: IFFALSE 51201
// if mpSidePositions [ i ] then
51056: LD_EXP 9
51060: PUSH
51061: LD_VAR 0 2
51065: ARRAY
51066: IFFALSE 51199
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
51068: LD_EXP 21
51072: PUSH
51073: LD_EXP 9
51077: PUSH
51078: LD_VAR 0 2
51082: ARRAY
51083: ARRAY
51084: PPUSH
51085: LD_INT 5
51087: PPUSH
51088: CALL_OW 424
// for j := 1 to 8 do
51092: LD_ADDR_VAR 0 3
51096: PUSH
51097: DOUBLE
51098: LD_INT 1
51100: DEC
51101: ST_TO_ADDR
51102: LD_INT 8
51104: PUSH
51105: FOR_TO
51106: IFFALSE 51197
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
51108: LD_EXP 9
51112: PUSH
51113: LD_VAR 0 3
51117: ARRAY
51118: IFFALSE 51167
51120: PUSH
51121: LD_EXP 10
51125: PUSH
51126: LD_VAR 0 2
51130: ARRAY
51131: PUSH
51132: LD_EXP 10
51136: PUSH
51137: LD_VAR 0 3
51141: ARRAY
51142: NONEQUAL
51143: IFTRUE 51166
51145: PUSH
51146: LD_EXP 13
51150: NOT
51151: IFFALSE 51165
51153: PUSH
51154: LD_VAR 0 2
51158: PUSH
51159: LD_VAR 0 3
51163: NONEQUAL
51164: AND
51165: OR
51166: AND
51167: IFFALSE 51195
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
51169: LD_VAR 0 3
51173: PPUSH
51174: LD_EXP 21
51178: PUSH
51179: LD_EXP 9
51183: PUSH
51184: LD_VAR 0 2
51188: ARRAY
51189: ARRAY
51190: PPUSH
51191: CALL_OW 333
51195: GO 51105
51197: POP
51198: POP
// end ;
51199: GO 51053
51201: POP
51202: POP
// end ;
51203: LD_VAR 0 1
51207: RET
// function EndBuildUp ; var i , j ; begin
51208: LD_INT 0
51210: PPUSH
51211: PPUSH
51212: PPUSH
// mpBuildUpTimeActive := false ;
51213: LD_ADDR_EXP 51
51217: PUSH
51218: LD_INT 0
51220: ST_TO_ADDR
// for i := 1 to 8 do
51221: LD_ADDR_VAR 0 2
51225: PUSH
51226: DOUBLE
51227: LD_INT 1
51229: DEC
51230: ST_TO_ADDR
51231: LD_INT 8
51233: PUSH
51234: FOR_TO
51235: IFFALSE 51382
// if mpSidePositions [ i ] then
51237: LD_EXP 9
51241: PUSH
51242: LD_VAR 0 2
51246: ARRAY
51247: IFFALSE 51380
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
51249: LD_EXP 21
51253: PUSH
51254: LD_EXP 9
51258: PUSH
51259: LD_VAR 0 2
51263: ARRAY
51264: ARRAY
51265: PPUSH
51266: LD_INT 0
51268: PPUSH
51269: CALL_OW 424
// for j := 1 to 8 do
51273: LD_ADDR_VAR 0 3
51277: PUSH
51278: DOUBLE
51279: LD_INT 1
51281: DEC
51282: ST_TO_ADDR
51283: LD_INT 8
51285: PUSH
51286: FOR_TO
51287: IFFALSE 51378
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
51289: LD_EXP 9
51293: PUSH
51294: LD_VAR 0 3
51298: ARRAY
51299: IFFALSE 51348
51301: PUSH
51302: LD_EXP 10
51306: PUSH
51307: LD_VAR 0 2
51311: ARRAY
51312: PUSH
51313: LD_EXP 10
51317: PUSH
51318: LD_VAR 0 3
51322: ARRAY
51323: NONEQUAL
51324: IFTRUE 51347
51326: PUSH
51327: LD_EXP 13
51331: NOT
51332: IFFALSE 51346
51334: PUSH
51335: LD_VAR 0 2
51339: PUSH
51340: LD_VAR 0 3
51344: NONEQUAL
51345: AND
51346: OR
51347: AND
51348: IFFALSE 51376
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
51350: LD_VAR 0 3
51354: PPUSH
51355: LD_EXP 21
51359: PUSH
51360: LD_EXP 9
51364: PUSH
51365: LD_VAR 0 2
51369: ARRAY
51370: ARRAY
51371: PPUSH
51372: CALL_OW 334
51376: GO 51286
51378: POP
51379: POP
// end ;
51380: GO 51234
51382: POP
51383: POP
// end ;
51384: LD_VAR 0 1
51388: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
51389: LD_EXP 51
51393: IFFALSE 51572
51395: GO 51397
51397: DISABLE
51398: LD_INT 0
51400: PPUSH
51401: PPUSH
// begin for i := 1 to 8 do
51402: LD_ADDR_VAR 0 1
51406: PUSH
51407: DOUBLE
51408: LD_INT 1
51410: DEC
51411: ST_TO_ADDR
51412: LD_INT 8
51414: PUSH
51415: FOR_TO
51416: IFFALSE 51569
// if mpSidePositions [ i ] then
51418: LD_EXP 9
51422: PUSH
51423: LD_VAR 0 1
51427: ARRAY
51428: IFFALSE 51567
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
51430: LD_ADDR_VAR 0 2
51434: PUSH
51435: LD_EXP 21
51439: PUSH
51440: LD_EXP 9
51444: PUSH
51445: LD_VAR 0 1
51449: ARRAY
51450: ARRAY
51451: PPUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 21
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 21
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 22
51482: PUSH
51483: LD_OWVAR 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PPUSH
51496: CALL_OW 70
51500: PUSH
51501: FOR_IN
51502: IFFALSE 51565
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
51504: LD_EXP 10
51508: PUSH
51509: LD_VAR 0 1
51513: ARRAY
51514: PUSH
51515: LD_EXP 10
51519: PUSH
51520: LD_OWVAR 2
51524: ARRAY
51525: NONEQUAL
51526: IFTRUE 51549
51528: PUSH
51529: LD_EXP 13
51533: NOT
51534: IFFALSE 51548
51536: PUSH
51537: LD_VAR 0 1
51541: PUSH
51542: LD_OWVAR 2
51546: NONEQUAL
51547: AND
51548: OR
51549: IFFALSE 51563
// ComMoveToArea ( un , BuildUpEscape ) ;
51551: LD_VAR 0 2
51555: PPUSH
51556: LD_INT 9
51558: PPUSH
51559: CALL_OW 113
51563: GO 51501
51565: POP
51566: POP
51567: GO 51415
51569: POP
51570: POP
// enable ;
51571: ENABLE
// end ;
51572: PPOPN 2
51574: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
51575: LD_EXP 22
51579: IFFALSE 51629
51581: GO 51583
51583: DISABLE
51584: LD_INT 0
51586: PPUSH
// begin tmp := mpBuildUpTime ;
51587: LD_ADDR_VAR 0 1
51591: PUSH
51592: LD_EXP 22
51596: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51597: LD_INT 35
51599: PPUSH
51600: CALL_OW 67
// tmp := tmp - 0 0$1 ;
51604: LD_ADDR_VAR 0 1
51608: PUSH
51609: LD_VAR 0 1
51613: PUSH
51614: LD_INT 35
51616: MINUS
51617: ST_TO_ADDR
// until not tmp ;
51618: LD_VAR 0 1
51622: NOT
51623: IFFALSE 51597
// EndBuildUp ;
51625: CALL 51208 0 0
// end ;
51629: PPOPN 1
51631: END
// every 0 0$1 trigger mpActive marked mpWin do
51632: LD_INT 100
51634: IFFALSE 51668
51636: GO 51638
51638: DISABLE
// begin if IAmServer then
51639: CALL_OW 518
51643: IFFALSE 51652
// wait ( 0 0$3 ) ;
51645: LD_INT 105
51647: PPUSH
51648: CALL_OW 67
// if Multiplayer then
51652: LD_OWVAR 4
51656: IFFALSE 51664
// YouWinInMultiplayer else
51658: CALL_OW 106
51662: GO 51668
// YouWin ;
51664: CALL_OW 103
// end ;
51668: END
// export function HasPowerByGameType ( gameType , side ) ; begin
51669: LD_INT 0
51671: PPUSH
// result := false ;
51672: LD_ADDR_VAR 0 3
51676: PUSH
51677: LD_INT 0
51679: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
51680: LD_VAR 0 1
51684: PUSH
51685: LD_INT 1
51687: DOUBLE
51688: EQUAL
51689: IFTRUE 51711
51691: LD_INT 5
51693: DOUBLE
51694: EQUAL
51695: IFTRUE 51711
51697: LD_INT 6
51699: DOUBLE
51700: EQUAL
51701: IFTRUE 51711
51703: LD_INT 7
51705: DOUBLE
51706: EQUAL
51707: IFTRUE 51711
51709: GO 51784
51711: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51712: LD_ADDR_VAR 0 3
51716: PUSH
51717: LD_INT 22
51719: PUSH
51720: LD_VAR 0 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 21
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 33
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 33
51754: PUSH
51755: LD_INT 5
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PPUSH
51772: CALL_OW 69
51776: PPUSH
51777: CALL 5966 0 1
51781: ST_TO_ADDR
// end ; GameTypeSurvival :
51782: GO 52180
51784: LD_INT 2
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51792
51790: GO 51922
51792: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51793: LD_ADDR_VAR 0 3
51797: PUSH
51798: LD_INT 22
51800: PUSH
51801: LD_VAR 0 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 30
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 30
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PPUSH
51842: CALL_OW 69
51846: PPUSH
51847: CALL 5966 0 1
51851: IFFALSE 51919
51853: PUSH
51854: LD_INT 22
51856: PUSH
51857: LD_VAR 0 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 21
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 33
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 33
51891: PUSH
51892: LD_INT 5
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PPUSH
51909: CALL_OW 69
51913: PPUSH
51914: CALL 5966 0 1
51918: AND
51919: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
51920: GO 52180
51922: LD_INT 8
51924: DOUBLE
51925: EQUAL
51926: IFTRUE 51930
51928: GO 52079
51930: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51931: LD_ADDR_VAR 0 3
51935: PUSH
51936: LD_EXP 43
51940: PUSH
51941: LD_VAR 0 2
51945: ARRAY
51946: PPUSH
51947: CALL_OW 300
51951: IFFALSE 52008
51953: PUSH
51954: LD_INT 22
51956: PUSH
51957: LD_VAR 0 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 30
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 30
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PPUSH
51998: CALL_OW 69
52002: PPUSH
52003: CALL 5966 0 1
52007: AND
52008: IFFALSE 52076
52010: PUSH
52011: LD_INT 22
52013: PUSH
52014: LD_VAR 0 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 21
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 33
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 33
52048: PUSH
52049: LD_INT 5
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PPUSH
52066: CALL_OW 69
52070: PPUSH
52071: CALL 5966 0 1
52075: AND
52076: ST_TO_ADDR
// end ; GameTypeKing :
52077: GO 52180
52079: LD_INT 3
52081: DOUBLE
52082: EQUAL
52083: IFTRUE 52087
52085: GO 52179
52087: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
52088: LD_ADDR_VAR 0 3
52092: PUSH
52093: LD_INT 22
52095: PUSH
52096: LD_VAR 0 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 21
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 33
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 33
52130: PUSH
52131: LD_INT 5
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PPUSH
52148: CALL_OW 69
52152: PPUSH
52153: CALL 5966 0 1
52157: IFFALSE 52176
52159: PUSH
52160: LD_VAR 0 2
52164: PPUSH
52165: CALL 56853 0 1
52169: PUSH
52170: LD_EXP 37
52174: LESS
52175: AND
52176: ST_TO_ADDR
// end ; end ;
52177: GO 52180
52179: POP
// end ;
52180: LD_VAR 0 3
52184: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
52185: LD_INT 100
52187: IFFALSE 52417
52189: GO 52191
52191: DISABLE
52192: LD_INT 0
52194: PPUSH
52195: PPUSH
// begin if Multiplayer then
52196: LD_OWVAR 4
52200: IFFALSE 52208
// SetPlayerSpectator ( ) else
52202: CALL_OW 572
52206: GO 52217
// FogOff ( your_side ) ;
52208: LD_OWVAR 2
52212: PPUSH
52213: CALL_OW 344
// repeat gameIsOn := false ;
52217: LD_ADDR_VAR 0 1
52221: PUSH
52222: LD_INT 0
52224: ST_TO_ADDR
// for i := 1 to 8 do
52225: LD_ADDR_VAR 0 2
52229: PUSH
52230: DOUBLE
52231: LD_INT 1
52233: DEC
52234: ST_TO_ADDR
52235: LD_INT 8
52237: PUSH
52238: FOR_TO
52239: IFFALSE 52369
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52241: LD_EXP 9
52245: PUSH
52246: LD_VAR 0 2
52250: ARRAY
52251: IFFALSE 52264
52253: PUSH
52254: LD_VAR 0 2
52258: PPUSH
52259: CALL_OW 108
52263: AND
52264: IFFALSE 52278
52266: PUSH
52267: LD_VAR 0 2
52271: PUSH
52272: LD_OWVAR 2
52276: NONEQUAL
52277: AND
52278: IFFALSE 52367
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52280: LD_EXP 10
52284: PUSH
52285: LD_VAR 0 2
52289: ARRAY
52290: NOT
52291: IFTRUE 52339
52293: PUSH
52294: LD_EXP 10
52298: PUSH
52299: LD_VAR 0 2
52303: ARRAY
52304: PUSH
52305: LD_EXP 10
52309: PUSH
52310: LD_OWVAR 2
52314: ARRAY
52315: NONEQUAL
52316: IFFALSE 52338
52318: PUSH
52319: LD_OWVAR 2
52323: PPUSH
52324: LD_VAR 0 2
52328: PPUSH
52329: CALL_OW 81
52333: PUSH
52334: LD_INT 1
52336: NONEQUAL
52337: AND
52338: OR
52339: IFFALSE 52367
// if HasPowerByGameType ( mpGameType , i ) then
52341: LD_EXP 5
52345: PPUSH
52346: LD_VAR 0 2
52350: PPUSH
52351: CALL 51669 0 2
52355: IFFALSE 52367
// begin gameIsOn := true ;
52357: LD_ADDR_VAR 0 1
52361: PUSH
52362: LD_INT 1
52364: ST_TO_ADDR
// break ;
52365: GO 52369
// end ;
52367: GO 52238
52369: POP
52370: POP
// wait ( 100 ) ;
52371: LD_INT 100
52373: PPUSH
52374: CALL_OW 67
// until not gameIsOn ;
52378: LD_VAR 0 1
52382: NOT
52383: IFFALSE 52217
// if IAmServer then
52385: CALL_OW 518
52389: IFFALSE 52398
// wait ( 0 0$3 ) ;
52391: LD_INT 105
52393: PPUSH
52394: CALL_OW 67
// if Multiplayer then
52398: LD_OWVAR 4
52402: IFFALSE 52410
// YouLostInMultiplayer else
52404: CALL_OW 107
52408: GO 52417
// YouLost (  ) ;
52410: LD_STRING 
52412: PPUSH
52413: CALL_OW 104
// end ;
52417: PPOPN 2
52419: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
52420: LD_EXP 35
52424: IFFALSE 52808
52426: GO 52428
52428: DISABLE
52429: LD_INT 0
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
52436: LD_ADDR_VAR 0 5
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: LD_INT 4
52452: PUSH
52453: LD_INT 5
52455: PUSH
52456: LD_INT 6
52458: PUSH
52459: LD_INT 7
52461: PUSH
52462: LD_INT 8
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
52475: LD_INT 350
52477: PPUSH
52478: CALL_OW 67
// for i := 1 to 8 do
52482: LD_ADDR_VAR 0 1
52486: PUSH
52487: DOUBLE
52488: LD_INT 1
52490: DEC
52491: ST_TO_ADDR
52492: LD_INT 8
52494: PUSH
52495: FOR_TO
52496: IFFALSE 52778
// begin j := sides [ i ] ;
52498: LD_ADDR_VAR 0 2
52502: PUSH
52503: LD_VAR 0 5
52507: PUSH
52508: LD_VAR 0 1
52512: ARRAY
52513: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
52514: LD_EXP 42
52518: PUSH
52519: LD_VAR 0 2
52523: ARRAY
52524: PPUSH
52525: CALL 5966 0 1
52529: IFFALSE 52542
52531: PUSH
52532: LD_VAR 0 2
52536: PPUSH
52537: CALL_OW 108
52541: AND
52542: IFFALSE 52560
52544: PUSH
52545: LD_EXP 5
52549: PPUSH
52550: LD_VAR 0 2
52554: PPUSH
52555: CALL 51669 0 2
52559: AND
52560: IFFALSE 52776
// begin wait ( mpRespawn div 2 ) ;
52562: LD_EXP 35
52566: PUSH
52567: LD_INT 2
52569: DIV
52570: PPUSH
52571: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52575: LD_ADDR_VAR 0 3
52579: PUSH
52580: LD_INT 22
52582: PUSH
52583: LD_VAR 0 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 50
52594: PUSH
52595: EMPTY
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 30
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 30
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: PPUSH
52631: CALL_OW 69
52635: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
52636: LD_VAR 0 3
52640: NOT
52641: IFTRUE 52655
52643: PUSH
52644: LD_VAR 0 2
52648: PPUSH
52649: CALL_OW 108
52653: NOT
52654: OR
52655: IFTRUE 52674
52657: PUSH
52658: LD_EXP 5
52662: PPUSH
52663: LD_VAR 0 2
52667: PPUSH
52668: CALL 51669 0 2
52672: NOT
52673: OR
52674: IFFALSE 52678
// continue ;
52676: GO 52495
// spawn := tmp [ 1 ] ;
52678: LD_ADDR_VAR 0 4
52682: PUSH
52683: LD_VAR 0 3
52687: PUSH
52688: LD_INT 1
52690: ARRAY
52691: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
52692: LD_EXP 42
52696: PUSH
52697: LD_VAR 0 2
52701: ARRAY
52702: PUSH
52703: LD_INT 1
52705: ARRAY
52706: PPUSH
52707: LD_VAR 0 4
52711: PPUSH
52712: CALL_OW 250
52716: PPUSH
52717: LD_VAR 0 4
52721: PPUSH
52722: CALL_OW 251
52726: PPUSH
52727: LD_INT 32
52729: PPUSH
52730: LD_INT 1
52732: PPUSH
52733: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52737: LD_ADDR_EXP 42
52741: PUSH
52742: LD_EXP 42
52746: PPUSH
52747: LD_VAR 0 2
52751: PPUSH
52752: LD_EXP 42
52756: PUSH
52757: LD_VAR 0 2
52761: ARRAY
52762: PPUSH
52763: LD_INT 1
52765: PPUSH
52766: CALL_OW 3
52770: PPUSH
52771: CALL_OW 1
52775: ST_TO_ADDR
// end ; end ;
52776: GO 52495
52778: POP
52779: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52780: LD_ADDR_VAR 0 5
52784: PUSH
52785: LD_VAR 0 5
52789: PPUSH
52790: LD_INT 1
52792: PPUSH
52793: LD_INT 8
52795: PPUSH
52796: LD_INT 1
52798: PPUSH
52799: CALL 8292 0 4
52803: ST_TO_ADDR
// until false ;
52804: LD_INT 0
52806: IFFALSE 52475
// end ;
52808: PPOPN 5
52810: END
// every 0 0$1 marked mpActive do
52811: GO 52813
52813: DISABLE
// begin enable ;
52814: ENABLE
// if not mpDisplayStrings then
52815: LD_EXP 40
52819: NOT
52820: IFFALSE 52831
// begin display_strings := [ ] ;
52822: LD_ADDR_OWVAR 47
52826: PUSH
52827: EMPTY
52828: ST_TO_ADDR
// exit ;
52829: GO 52841
// end ; display_strings := mpDisplayStrings ;
52831: LD_ADDR_OWVAR 47
52835: PUSH
52836: LD_EXP 40
52840: ST_TO_ADDR
// end ; end_of_file
52841: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52842: LD_INT 0
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
// if GetType ( un ) = unit_vehicle then
52853: LD_VAR 0 1
52857: PPUSH
52858: CALL_OW 247
52862: PUSH
52863: LD_INT 2
52865: EQUAL
52866: IFFALSE 52870
// exit ;
52868: GO 53643
// side := GetSide ( un ) ;
52870: LD_ADDR_VAR 0 9
52874: PUSH
52875: LD_VAR 0 1
52879: PPUSH
52880: CALL_OW 255
52884: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
52885: LD_EXP 5
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 8
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: IN
52900: IFFALSE 52994
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52902: LD_VAR 0 1
52906: PPUSH
52907: CALL_OW 266
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: IN
52922: IFFALSE 52994
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52924: LD_ADDR_VAR 0 3
52928: PUSH
52929: LD_INT 22
52931: PUSH
52932: LD_VAR 0 9
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 21
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 33
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PPUSH
52973: CALL_OW 69
52977: PUSH
52978: FOR_IN
52979: IFFALSE 52992
// KillUnit ( i ) ;
52981: LD_VAR 0 3
52985: PPUSH
52986: CALL_OW 66
52990: GO 52978
52992: POP
52993: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
52994: LD_EXP 5
52998: PUSH
52999: LD_INT 8
53001: EQUAL
53002: IFFALSE 53086
// if un in mpCommanders then
53004: LD_VAR 0 1
53008: PUSH
53009: LD_EXP 43
53013: IN
53014: IFFALSE 53086
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
53016: LD_ADDR_VAR 0 3
53020: PUSH
53021: LD_INT 22
53023: PUSH
53024: LD_VAR 0 9
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 21
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 33
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PPUSH
53065: CALL_OW 69
53069: PUSH
53070: FOR_IN
53071: IFFALSE 53084
// KillUnit ( i ) ;
53073: LD_VAR 0 3
53077: PPUSH
53078: CALL_OW 66
53082: GO 53070
53084: POP
53085: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
53086: LD_VAR 0 1
53090: PPUSH
53091: CALL_OW 257
53095: PUSH
53096: LD_INT 12
53098: PUSH
53099: LD_INT 17
53101: PUSH
53102: LD_INT 15
53104: PUSH
53105: LD_INT 16
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: IN
53114: IFTRUE 53131
53116: PUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 263
53126: PUSH
53127: LD_INT 5
53129: EQUAL
53130: OR
53131: IFFALSE 53368
// begin tag := 0 ;
53133: LD_ADDR_VAR 0 5
53137: PUSH
53138: LD_INT 0
53140: ST_TO_ADDR
// for i := 1 to 8 do
53141: LD_ADDR_VAR 0 3
53145: PUSH
53146: DOUBLE
53147: LD_INT 1
53149: DEC
53150: ST_TO_ADDR
53151: LD_INT 8
53153: PUSH
53154: FOR_TO
53155: IFFALSE 53189
// if un in mpApePosIndex [ i ] then
53157: LD_VAR 0 1
53161: PUSH
53162: LD_EXP 34
53166: PUSH
53167: LD_VAR 0 3
53171: ARRAY
53172: IN
53173: IFFALSE 53187
// begin tag := i ;
53175: LD_ADDR_VAR 0 5
53179: PUSH
53180: LD_VAR 0 3
53184: ST_TO_ADDR
// break ;
53185: GO 53189
// end ;
53187: GO 53154
53189: POP
53190: POP
// if not tag then
53191: LD_VAR 0 5
53195: NOT
53196: IFFALSE 53200
// exit ;
53198: GO 53643
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
53200: LD_ADDR_VAR 0 7
53204: PUSH
53205: LD_EXP 33
53209: PUSH
53210: LD_EXP 9
53214: PUSH
53215: LD_VAR 0 5
53219: ARRAY
53220: ARRAY
53221: ST_TO_ADDR
// if not area then
53222: LD_VAR 0 7
53226: NOT
53227: IFFALSE 53231
// exit ;
53229: GO 53643
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53231: LD_INT 14700
53233: PUSH
53234: LD_VAR 0 1
53238: PUSH
53239: LD_INT 5
53241: MOD
53242: PUSH
53243: LD_INT 1
53245: PLUS
53246: PUSH
53247: LD_INT 700
53249: MUL
53250: PLUS
53251: PPUSH
53252: CALL_OW 67
// repeat wait ( 10 ) ;
53256: LD_INT 10
53258: PPUSH
53259: CALL_OW 67
// until not mpBlockRespThread ;
53263: LD_EXP 49
53267: NOT
53268: IFFALSE 53256
// mpBlockRespThread := true ;
53270: LD_ADDR_EXP 49
53274: PUSH
53275: LD_INT 1
53277: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53278: LD_INT 0
53280: PPUSH
53281: CALL 38069 0 1
// ape := CreateHuman ;
53285: LD_ADDR_VAR 0 4
53289: PUSH
53290: CALL_OW 44
53294: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53295: LD_ADDR_EXP 34
53299: PUSH
53300: LD_EXP 34
53304: PPUSH
53305: LD_VAR 0 5
53309: PPUSH
53310: LD_EXP 34
53314: PUSH
53315: LD_VAR 0 5
53319: ARRAY
53320: PPUSH
53321: LD_VAR 0 4
53325: PPUSH
53326: CALL 41942 0 2
53330: PPUSH
53331: CALL_OW 1
53335: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53336: LD_VAR 0 4
53340: PPUSH
53341: LD_VAR 0 7
53345: PPUSH
53346: LD_INT 0
53348: PPUSH
53349: CALL_OW 49
// wait ( 10 ) ;
53353: LD_INT 10
53355: PPUSH
53356: CALL_OW 67
// mpBlockRespThread := false ;
53360: LD_ADDR_EXP 49
53364: PUSH
53365: LD_INT 0
53367: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
53368: LD_VAR 0 1
53372: PPUSH
53373: CALL_OW 247
53377: PUSH
53378: LD_INT 1
53380: EQUAL
53381: IFFALSE 53398
53383: PUSH
53384: LD_VAR 0 1
53388: PPUSH
53389: CALL_OW 248
53393: PUSH
53394: LD_INT 0
53396: GREATER
53397: AND
53398: IFFALSE 53643
// begin if not mpRespawn then
53400: LD_EXP 35
53404: NOT
53405: IFFALSE 53409
// exit ;
53407: GO 53643
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
53409: LD_VAR 0 9
53413: PPUSH
53414: CALL_OW 108
53418: NOT
53419: IFFALSE 53438
53421: PUSH
53422: LD_EXP 5
53426: PPUSH
53427: LD_VAR 0 9
53431: PPUSH
53432: CALL 51669 0 2
53436: NOT
53437: AND
53438: IFFALSE 53442
// exit ;
53440: GO 53643
// side := GetSide ( un ) ;
53442: LD_ADDR_VAR 0 9
53446: PUSH
53447: LD_VAR 0 1
53451: PPUSH
53452: CALL_OW 255
53456: ST_TO_ADDR
// nation := GetNation ( un ) ;
53457: LD_ADDR_VAR 0 8
53461: PUSH
53462: LD_VAR 0 1
53466: PPUSH
53467: CALL_OW 248
53471: ST_TO_ADDR
// class := GetClass ( un ) ;
53472: LD_ADDR_VAR 0 6
53476: PUSH
53477: LD_VAR 0 1
53481: PPUSH
53482: CALL_OW 257
53486: ST_TO_ADDR
// if class > 4 then
53487: LD_VAR 0 6
53491: PUSH
53492: LD_INT 4
53494: GREATER
53495: IFFALSE 53505
// class := 1 ;
53497: LD_ADDR_VAR 0 6
53501: PUSH
53502: LD_INT 1
53504: ST_TO_ADDR
// repeat wait ( 10 ) ;
53505: LD_INT 10
53507: PPUSH
53508: CALL_OW 67
// until not mpBlockRespThread ;
53512: LD_EXP 49
53516: NOT
53517: IFFALSE 53505
// mpBlockRespThread := true ;
53519: LD_ADDR_EXP 49
53523: PUSH
53524: LD_INT 1
53526: ST_TO_ADDR
// uc_side := side ;
53527: LD_ADDR_OWVAR 20
53531: PUSH
53532: LD_VAR 0 9
53536: ST_TO_ADDR
// uc_nation := nation ;
53537: LD_ADDR_OWVAR 21
53541: PUSH
53542: LD_VAR 0 8
53546: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
53547: LD_INT 0
53549: PPUSH
53550: LD_VAR 0 6
53554: PPUSH
53555: LD_INT 2
53557: PPUSH
53558: CALL_OW 380
// un := CreateHuman ;
53562: LD_ADDR_VAR 0 1
53566: PUSH
53567: CALL_OW 44
53571: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
53572: LD_ADDR_EXP 42
53576: PUSH
53577: LD_EXP 42
53581: PPUSH
53582: LD_VAR 0 9
53586: PPUSH
53587: LD_EXP 42
53591: PUSH
53592: LD_VAR 0 9
53596: ARRAY
53597: PPUSH
53598: LD_EXP 42
53602: PUSH
53603: LD_VAR 0 9
53607: ARRAY
53608: PUSH
53609: LD_INT 1
53611: PLUS
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL_OW 1
53622: PPUSH
53623: CALL_OW 1
53627: ST_TO_ADDR
// wait ( 10 ) ;
53628: LD_INT 10
53630: PPUSH
53631: CALL_OW 67
// mpBlockRespThread := false ;
53635: LD_ADDR_EXP 49
53639: PUSH
53640: LD_INT 0
53642: ST_TO_ADDR
// end ; end ;
53643: LD_VAR 0 2
53647: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
53648: LD_INT 0
53650: PPUSH
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
// tag := 0 ;
53655: LD_ADDR_VAR 0 5
53659: PUSH
53660: LD_INT 0
53662: ST_TO_ADDR
// for i := 1 to 8 do
53663: LD_ADDR_VAR 0 4
53667: PUSH
53668: DOUBLE
53669: LD_INT 1
53671: DEC
53672: ST_TO_ADDR
53673: LD_INT 8
53675: PUSH
53676: FOR_TO
53677: IFFALSE 53711
// if un in mpApePosIndex [ i ] then
53679: LD_VAR 0 2
53683: PUSH
53684: LD_EXP 34
53688: PUSH
53689: LD_VAR 0 4
53693: ARRAY
53694: IN
53695: IFFALSE 53709
// begin tag := i ;
53697: LD_ADDR_VAR 0 5
53701: PUSH
53702: LD_VAR 0 4
53706: ST_TO_ADDR
// break ;
53707: GO 53711
// end ;
53709: GO 53676
53711: POP
53712: POP
// if not tag then
53713: LD_VAR 0 5
53717: NOT
53718: IFFALSE 53722
// exit ;
53720: GO 53890
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
53722: LD_ADDR_VAR 0 6
53726: PUSH
53727: LD_EXP 33
53731: PUSH
53732: LD_EXP 9
53736: PUSH
53737: LD_VAR 0 5
53741: ARRAY
53742: ARRAY
53743: ST_TO_ADDR
// if not area then
53744: LD_VAR 0 6
53748: NOT
53749: IFFALSE 53753
// exit ;
53751: GO 53890
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53753: LD_INT 14700
53755: PUSH
53756: LD_VAR 0 2
53760: PUSH
53761: LD_INT 5
53763: MOD
53764: PUSH
53765: LD_INT 1
53767: PLUS
53768: PUSH
53769: LD_INT 700
53771: MUL
53772: PLUS
53773: PPUSH
53774: CALL_OW 67
// repeat wait ( 10 ) ;
53778: LD_INT 10
53780: PPUSH
53781: CALL_OW 67
// until not mpBlockRespThread ;
53785: LD_EXP 49
53789: NOT
53790: IFFALSE 53778
// mpBlockRespThread := true ;
53792: LD_ADDR_EXP 49
53796: PUSH
53797: LD_INT 1
53799: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53800: LD_INT 0
53802: PPUSH
53803: CALL 38069 0 1
// ape := CreateHuman ;
53807: LD_ADDR_VAR 0 7
53811: PUSH
53812: CALL_OW 44
53816: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53817: LD_ADDR_EXP 34
53821: PUSH
53822: LD_EXP 34
53826: PPUSH
53827: LD_VAR 0 5
53831: PPUSH
53832: LD_EXP 34
53836: PUSH
53837: LD_VAR 0 5
53841: ARRAY
53842: PPUSH
53843: LD_VAR 0 7
53847: PPUSH
53848: CALL 41942 0 2
53852: PPUSH
53853: CALL_OW 1
53857: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53858: LD_VAR 0 7
53862: PPUSH
53863: LD_VAR 0 6
53867: PPUSH
53868: LD_INT 0
53870: PPUSH
53871: CALL_OW 49
// wait ( 10 ) ;
53875: LD_INT 10
53877: PPUSH
53878: CALL_OW 67
// mpBlockRespThread := false ;
53882: LD_ADDR_EXP 49
53886: PUSH
53887: LD_INT 0
53889: ST_TO_ADDR
// end ;
53890: LD_VAR 0 3
53894: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53895: LD_INT 0
53897: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53898: LD_VAR 0 1
53902: PPUSH
53903: CALL_OW 266
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: IN
53918: IFFALSE 53943
// SetBName ( building , @ & GetSide ( building ) ) ;
53920: LD_VAR 0 1
53924: PPUSH
53925: LD_STRING @
53927: PUSH
53928: LD_VAR 0 1
53932: PPUSH
53933: CALL_OW 255
53937: STR
53938: PPUSH
53939: CALL_OW 500
// end ;
53943: LD_VAR 0 2
53947: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53948: LD_INT 0
53950: PPUSH
53951: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53952: LD_EXP 5
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 8
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: IN
53967: IFFALSE 53991
53969: PUSH
53970: LD_VAR 0 1
53974: PPUSH
53975: CALL_OW 266
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: IN
53990: AND
53991: IFFALSE 54070
// begin SetSide ( building , oldSide ) ;
53993: LD_VAR 0 1
53997: PPUSH
53998: LD_VAR 0 2
54002: PPUSH
54003: CALL_OW 235
// KillUnit ( building ) ;
54007: LD_VAR 0 1
54011: PPUSH
54012: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
54016: LD_ADDR_VAR 0 5
54020: PUSH
54021: LD_INT 22
54023: PUSH
54024: LD_VAR 0 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 21
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PPUSH
54047: CALL_OW 69
54051: PUSH
54052: FOR_IN
54053: IFFALSE 54066
// KillUnit ( i ) ;
54055: LD_VAR 0 5
54059: PPUSH
54060: CALL_OW 66
54064: GO 54052
54066: POP
54067: POP
// exit ;
54068: GO 54115
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
54070: LD_VAR 0 1
54074: PPUSH
54075: CALL_OW 266
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: IN
54090: IFFALSE 54115
// SetBName ( building , @ & GetSide ( building ) ) ;
54092: LD_VAR 0 1
54096: PPUSH
54097: LD_STRING @
54099: PUSH
54100: LD_VAR 0 1
54104: PPUSH
54105: CALL_OW 255
54109: STR
54110: PPUSH
54111: CALL_OW 500
// end ;
54115: LD_VAR 0 4
54119: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
54120: LD_INT 0
54122: PPUSH
54123: PPUSH
54124: PPUSH
// if mpGameType <> GameTypeFamine then
54125: LD_EXP 5
54129: PUSH
54130: LD_INT 5
54132: NONEQUAL
54133: IFFALSE 54137
// exit ;
54135: GO 54371
// for i := 1 to mpGlobalOilDeposits do
54137: LD_ADDR_VAR 0 6
54141: PUSH
54142: DOUBLE
54143: LD_INT 1
54145: DEC
54146: ST_TO_ADDR
54147: LD_EXP 44
54151: PUSH
54152: FOR_TO
54153: IFFALSE 54369
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
54155: LD_EXP 44
54159: PUSH
54160: LD_VAR 0 6
54164: ARRAY
54165: PUSH
54166: LD_INT 1
54168: ARRAY
54169: PPUSH
54170: LD_EXP 44
54174: PUSH
54175: LD_VAR 0 6
54179: ARRAY
54180: PUSH
54181: LD_INT 2
54183: ARRAY
54184: PPUSH
54185: CALL_OW 428
54189: PUSH
54190: LD_VAR 0 1
54194: EQUAL
54195: IFFALSE 54367
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
54197: LD_ADDR_VAR 0 7
54201: PUSH
54202: LD_EXP 44
54206: PUSH
54207: LD_VAR 0 6
54211: ARRAY
54212: PUSH
54213: LD_INT 3
54215: ARRAY
54216: ST_TO_ADDR
// value := value - amount ;
54217: LD_ADDR_VAR 0 7
54221: PUSH
54222: LD_VAR 0 7
54226: PUSH
54227: LD_VAR 0 4
54231: MINUS
54232: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
54233: LD_ADDR_EXP 44
54237: PUSH
54238: LD_EXP 44
54242: PPUSH
54243: LD_VAR 0 6
54247: PPUSH
54248: LD_EXP 44
54252: PUSH
54253: LD_VAR 0 6
54257: ARRAY
54258: PPUSH
54259: LD_INT 3
54261: PPUSH
54262: LD_VAR 0 7
54266: PPUSH
54267: CALL_OW 1
54271: PPUSH
54272: CALL_OW 1
54276: ST_TO_ADDR
// if side in [ your_side , 9 ] then
54277: LD_VAR 0 2
54281: PUSH
54282: LD_OWVAR 2
54286: PUSH
54287: LD_INT 9
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: IN
54294: IFFALSE 54310
// SetUnitDisplayNumber ( building , value ) ;
54296: LD_VAR 0 1
54300: PPUSH
54301: LD_VAR 0 7
54305: PPUSH
54306: CALL_OW 505
// if value <= 0 then
54310: LD_VAR 0 7
54314: PUSH
54315: LD_INT 0
54317: LESSEQUAL
54318: IFFALSE 54367
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
54320: LD_EXP 44
54324: PUSH
54325: LD_VAR 0 6
54329: ARRAY
54330: PUSH
54331: LD_INT 1
54333: ARRAY
54334: PPUSH
54335: LD_EXP 44
54339: PUSH
54340: LD_VAR 0 6
54344: ARRAY
54345: PUSH
54346: LD_INT 2
54348: ARRAY
54349: PPUSH
54350: CALL_OW 63
// KillUnit ( building ) ;
54354: LD_VAR 0 1
54358: PPUSH
54359: CALL_OW 66
// exit ;
54363: POP
54364: POP
54365: GO 54371
// end ; end ; end ;
54367: GO 54152
54369: POP
54370: POP
// end ;
54371: LD_VAR 0 5
54375: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
54376: LD_INT 0
54378: PPUSH
54379: PPUSH
54380: PPUSH
// if mpGameType <> GameTypeFamine then
54381: LD_EXP 5
54385: PUSH
54386: LD_INT 5
54388: NONEQUAL
54389: IFFALSE 54393
// exit ;
54391: GO 54627
// for i := 1 to mpGlobalSibDeposits do
54393: LD_ADDR_VAR 0 6
54397: PUSH
54398: DOUBLE
54399: LD_INT 1
54401: DEC
54402: ST_TO_ADDR
54403: LD_EXP 45
54407: PUSH
54408: FOR_TO
54409: IFFALSE 54625
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
54411: LD_EXP 45
54415: PUSH
54416: LD_VAR 0 6
54420: ARRAY
54421: PUSH
54422: LD_INT 1
54424: ARRAY
54425: PPUSH
54426: LD_EXP 45
54430: PUSH
54431: LD_VAR 0 6
54435: ARRAY
54436: PUSH
54437: LD_INT 2
54439: ARRAY
54440: PPUSH
54441: CALL_OW 428
54445: PUSH
54446: LD_VAR 0 1
54450: EQUAL
54451: IFFALSE 54623
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
54453: LD_ADDR_VAR 0 7
54457: PUSH
54458: LD_EXP 45
54462: PUSH
54463: LD_VAR 0 6
54467: ARRAY
54468: PUSH
54469: LD_INT 3
54471: ARRAY
54472: ST_TO_ADDR
// value := value - amount ;
54473: LD_ADDR_VAR 0 7
54477: PUSH
54478: LD_VAR 0 7
54482: PUSH
54483: LD_VAR 0 4
54487: MINUS
54488: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
54489: LD_ADDR_EXP 45
54493: PUSH
54494: LD_EXP 45
54498: PPUSH
54499: LD_VAR 0 6
54503: PPUSH
54504: LD_EXP 45
54508: PUSH
54509: LD_VAR 0 6
54513: ARRAY
54514: PPUSH
54515: LD_INT 3
54517: PPUSH
54518: LD_VAR 0 7
54522: PPUSH
54523: CALL_OW 1
54527: PPUSH
54528: CALL_OW 1
54532: ST_TO_ADDR
// if side in [ your_side , 9 ] then
54533: LD_VAR 0 2
54537: PUSH
54538: LD_OWVAR 2
54542: PUSH
54543: LD_INT 9
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: IN
54550: IFFALSE 54566
// SetUnitDisplayNumber ( building , value ) ;
54552: LD_VAR 0 1
54556: PPUSH
54557: LD_VAR 0 7
54561: PPUSH
54562: CALL_OW 505
// if value <= 0 then
54566: LD_VAR 0 7
54570: PUSH
54571: LD_INT 0
54573: LESSEQUAL
54574: IFFALSE 54623
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
54576: LD_EXP 45
54580: PUSH
54581: LD_VAR 0 6
54585: ARRAY
54586: PUSH
54587: LD_INT 1
54589: ARRAY
54590: PPUSH
54591: LD_EXP 45
54595: PUSH
54596: LD_VAR 0 6
54600: ARRAY
54601: PUSH
54602: LD_INT 2
54604: ARRAY
54605: PPUSH
54606: CALL_OW 63
// KillUnit ( building ) ;
54610: LD_VAR 0 1
54614: PPUSH
54615: CALL_OW 66
// exit ;
54619: POP
54620: POP
54621: GO 54627
// end ; end ; end ;
54623: GO 54408
54625: POP
54626: POP
// end ;
54627: LD_VAR 0 5
54631: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
54632: LD_INT 0
54634: PPUSH
54635: PPUSH
// side := GetSide ( factory ) ;
54636: LD_ADDR_VAR 0 7
54640: PUSH
54641: LD_VAR 0 1
54645: PPUSH
54646: CALL_OW 255
54650: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
54651: LD_VAR 0 5
54655: PUSH
54656: LD_INT 81
54658: EQUAL
54659: IFFALSE 54697
54661: PUSH
54662: LD_INT 22
54664: PUSH
54665: LD_VAR 0 7
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 34
54676: PUSH
54677: LD_INT 81
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PPUSH
54688: CALL_OW 69
54692: PUSH
54693: LD_INT 0
54695: GREATER
54696: AND
54697: IFFALSE 54730
// begin ComCancel ( factory ) ;
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 127
// if side = your_side then
54708: LD_VAR 0 7
54712: PUSH
54713: LD_OWVAR 2
54717: EQUAL
54718: IFFALSE 54730
// HintSpec ( VehLimit , 2 ) ;
54720: LD_STRING VehLimit
54722: PPUSH
54723: LD_INT 2
54725: PPUSH
54726: CALL_OW 338
// end ; end ;
54730: LD_VAR 0 6
54734: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
54735: LD_INT 0
54737: PPUSH
54738: PPUSH
54739: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 264
54749: PUSH
54750: LD_INT 81
54752: EQUAL
54753: IFFALSE 54770
54755: PUSH
54756: LD_VAR 0 1
54760: PPUSH
54761: CALL_OW 263
54765: PUSH
54766: LD_INT 1
54768: EQUAL
54769: AND
54770: IFFALSE 55050
// begin for i := 1 to Count ( minersList ) do
54772: LD_ADDR_VAR 0 6
54776: PUSH
54777: DOUBLE
54778: LD_INT 1
54780: DEC
54781: ST_TO_ADDR
54782: LD_EXP 60
54786: PPUSH
54787: CALL 5966 0 1
54791: PUSH
54792: FOR_TO
54793: IFFALSE 54911
// begin if minersList [ i ] = oldId then
54795: LD_EXP 60
54799: PUSH
54800: LD_VAR 0 6
54804: ARRAY
54805: PUSH
54806: LD_VAR 0 2
54810: EQUAL
54811: IFFALSE 54909
// begin for j := 1 to minerMinesList [ i ] do
54813: LD_ADDR_VAR 0 7
54817: PUSH
54818: DOUBLE
54819: LD_INT 1
54821: DEC
54822: ST_TO_ADDR
54823: LD_EXP 61
54827: PUSH
54828: LD_VAR 0 6
54832: ARRAY
54833: PUSH
54834: FOR_TO
54835: IFFALSE 54885
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54837: LD_EXP 61
54841: PUSH
54842: LD_VAR 0 6
54846: ARRAY
54847: PUSH
54848: LD_VAR 0 7
54852: ARRAY
54853: PUSH
54854: LD_INT 1
54856: ARRAY
54857: PPUSH
54858: LD_EXP 61
54862: PUSH
54863: LD_VAR 0 6
54867: ARRAY
54868: PUSH
54869: LD_VAR 0 7
54873: ARRAY
54874: PUSH
54875: LD_INT 2
54877: ARRAY
54878: PPUSH
54879: CALL_OW 612
54883: GO 54834
54885: POP
54886: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54887: LD_ADDR_EXP 61
54891: PUSH
54892: LD_EXP 61
54896: PPUSH
54897: LD_VAR 0 6
54901: PPUSH
54902: CALL_OW 3
54906: ST_TO_ADDR
// break ;
54907: GO 54911
// end ; end ;
54909: GO 54792
54911: POP
54912: POP
// minersList := minersList diff oldId ;
54913: LD_ADDR_EXP 60
54917: PUSH
54918: LD_EXP 60
54922: PUSH
54923: LD_VAR 0 2
54927: DIFF
54928: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54929: LD_INT 22
54931: PUSH
54932: LD_VAR 0 4
54936: PPUSH
54937: CALL_OW 255
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 34
54948: PUSH
54949: LD_INT 81
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PPUSH
54960: CALL_OW 69
54964: PUSH
54965: LD_INT 1
54967: GREATER
54968: IFFALSE 54995
// begin ComExit ( unit ) ;
54970: LD_VAR 0 4
54974: PPUSH
54975: CALL 42340 0 1
// SetSide ( newId , oldSide ) ;
54979: LD_VAR 0 1
54983: PPUSH
54984: LD_VAR 0 3
54988: PPUSH
54989: CALL_OW 235
// exit ;
54993: GO 55050
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54995: LD_ADDR_EXP 60
54999: PUSH
55000: LD_EXP 60
55004: PPUSH
55005: LD_EXP 60
55009: PUSH
55010: LD_INT 1
55012: PLUS
55013: PPUSH
55014: LD_VAR 0 1
55018: PPUSH
55019: CALL_OW 1
55023: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55024: LD_ADDR_EXP 61
55028: PUSH
55029: LD_EXP 61
55033: PPUSH
55034: LD_EXP 61
55038: PUSH
55039: LD_INT 1
55041: PLUS
55042: PPUSH
55043: EMPTY
55044: PPUSH
55045: CALL_OW 1
55049: ST_TO_ADDR
// end ; end ; end_of_file
55050: LD_VAR 0 5
55054: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
55055: LD_EXP 41
55059: IFFALSE 55067
55061: PUSH
55062: CALL 55277 0 0
55066: AND
55067: IFFALSE 55075
55069: PUSH
55070: LD_OWVAR 4
55074: AND
55075: IFFALSE 55274
55077: GO 55079
55079: DISABLE
55080: LD_INT 0
55082: PPUSH
55083: PPUSH
// begin canWin := false ;
55084: LD_ADDR_VAR 0 2
55088: PUSH
55089: LD_INT 0
55091: ST_TO_ADDR
// if not HasPower ( your_side ) then
55092: LD_OWVAR 2
55096: PPUSH
55097: CALL 55319 0 1
55101: NOT
55102: IFFALSE 55113
// begin Multiplayer_Loose_Message ;
55104: CALL_OW 521
// enable ( mpLose ) ;
55108: LD_INT 102
55110: ENABLE_MARKED
// end else
55111: GO 55274
// begin canWin := true ;
55113: LD_ADDR_VAR 0 2
55117: PUSH
55118: LD_INT 1
55120: ST_TO_ADDR
// for i := 1 to 8 do
55121: LD_ADDR_VAR 0 1
55125: PUSH
55126: DOUBLE
55127: LD_INT 1
55129: DEC
55130: ST_TO_ADDR
55131: LD_INT 8
55133: PUSH
55134: FOR_TO
55135: IFFALSE 55260
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55137: LD_EXP 9
55141: PUSH
55142: LD_VAR 0 1
55146: ARRAY
55147: IFFALSE 55160
55149: PUSH
55150: LD_VAR 0 1
55154: PPUSH
55155: CALL_OW 108
55159: AND
55160: IFFALSE 55174
55162: PUSH
55163: LD_VAR 0 1
55167: PUSH
55168: LD_OWVAR 2
55172: NONEQUAL
55173: AND
55174: IFFALSE 55258
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55176: LD_EXP 10
55180: PUSH
55181: LD_VAR 0 1
55185: ARRAY
55186: NOT
55187: IFTRUE 55235
55189: PUSH
55190: LD_EXP 10
55194: PUSH
55195: LD_VAR 0 1
55199: ARRAY
55200: PUSH
55201: LD_EXP 10
55205: PUSH
55206: LD_OWVAR 2
55210: ARRAY
55211: NONEQUAL
55212: IFFALSE 55234
55214: PUSH
55215: LD_OWVAR 2
55219: PPUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: CALL_OW 81
55229: PUSH
55230: LD_INT 1
55232: NONEQUAL
55233: AND
55234: OR
55235: IFFALSE 55258
// if HasPower ( i ) then
55237: LD_VAR 0 1
55241: PPUSH
55242: CALL 55319 0 1
55246: IFFALSE 55258
// begin canWin := false ;
55248: LD_ADDR_VAR 0 2
55252: PUSH
55253: LD_INT 0
55255: ST_TO_ADDR
// break ;
55256: GO 55260
// end ;
55258: GO 55134
55260: POP
55261: POP
// if canWin then
55262: LD_VAR 0 2
55266: IFFALSE 55273
// enable ( mpWin ) else
55268: LD_INT 101
55270: ENABLE_MARKED
55271: GO 55274
// enable ;
55273: ENABLE
// end ; end ;
55274: PPOPN 2
55276: END
// function CanWinLoose ; begin
55277: LD_INT 0
55279: PPUSH
// result := true ;
55280: LD_ADDR_VAR 0 1
55284: PUSH
55285: LD_INT 1
55287: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55288: CALL_OW 531
55292: IFFALSE 55304
55294: PUSH
55295: CALL_OW 519
55299: PUSH
55300: LD_INT 1
55302: GREATER
55303: AND
55304: IFFALSE 55314
// result := false ;
55306: LD_ADDR_VAR 0 1
55310: PUSH
55311: LD_INT 0
55313: ST_TO_ADDR
// end ;
55314: LD_VAR 0 1
55318: RET
// function HasPower ( i ) ; begin
55319: LD_INT 0
55321: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55322: LD_ADDR_VAR 0 2
55326: PUSH
55327: LD_INT 22
55329: PUSH
55330: LD_VAR 0 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 21
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 33
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 33
55364: PUSH
55365: LD_INT 5
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PPUSH
55382: CALL_OW 69
55386: ST_TO_ADDR
// end ; end_of_file
55387: LD_VAR 0 2
55391: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
55392: LD_EXP 41
55396: IFFALSE 55439
55398: GO 55400
55400: DISABLE
55401: LD_INT 0
55403: PPUSH
// begin for i := 1 to 8 do
55404: LD_ADDR_VAR 0 1
55408: PUSH
55409: DOUBLE
55410: LD_INT 1
55412: DEC
55413: ST_TO_ADDR
55414: LD_INT 8
55416: PUSH
55417: FOR_TO
55418: IFFALSE 55437
// SetRestrict ( b_depot , i , state_disabled ) ;
55420: LD_INT 0
55422: PPUSH
55423: LD_VAR 0 1
55427: PPUSH
55428: LD_INT 0
55430: PPUSH
55431: CALL_OW 324
55435: GO 55417
55437: POP
55438: POP
// end ;
55439: PPOPN 1
55441: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
55442: LD_EXP 41
55446: IFFALSE 55454
55448: PUSH
55449: CALL 55664 0 0
55453: AND
55454: IFFALSE 55462
55456: PUSH
55457: LD_OWVAR 4
55461: AND
55462: IFFALSE 55661
55464: GO 55466
55466: DISABLE
55467: LD_INT 0
55469: PPUSH
55470: PPUSH
// begin canWin := false ;
55471: LD_ADDR_VAR 0 2
55475: PUSH
55476: LD_INT 0
55478: ST_TO_ADDR
// if not HasPower ( your_side ) then
55479: LD_OWVAR 2
55483: PPUSH
55484: CALL 55706 0 1
55488: NOT
55489: IFFALSE 55500
// begin Multiplayer_Loose_Message ;
55491: CALL_OW 521
// enable ( mpLose ) ;
55495: LD_INT 102
55497: ENABLE_MARKED
// end else
55498: GO 55661
// begin canWin := true ;
55500: LD_ADDR_VAR 0 2
55504: PUSH
55505: LD_INT 1
55507: ST_TO_ADDR
// for i := 1 to 8 do
55508: LD_ADDR_VAR 0 1
55512: PUSH
55513: DOUBLE
55514: LD_INT 1
55516: DEC
55517: ST_TO_ADDR
55518: LD_INT 8
55520: PUSH
55521: FOR_TO
55522: IFFALSE 55647
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55524: LD_EXP 9
55528: PUSH
55529: LD_VAR 0 1
55533: ARRAY
55534: IFFALSE 55547
55536: PUSH
55537: LD_VAR 0 1
55541: PPUSH
55542: CALL_OW 108
55546: AND
55547: IFFALSE 55561
55549: PUSH
55550: LD_VAR 0 1
55554: PUSH
55555: LD_OWVAR 2
55559: NONEQUAL
55560: AND
55561: IFFALSE 55645
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55563: LD_EXP 10
55567: PUSH
55568: LD_VAR 0 1
55572: ARRAY
55573: NOT
55574: IFTRUE 55622
55576: PUSH
55577: LD_EXP 10
55581: PUSH
55582: LD_VAR 0 1
55586: ARRAY
55587: PUSH
55588: LD_EXP 10
55592: PUSH
55593: LD_OWVAR 2
55597: ARRAY
55598: NONEQUAL
55599: IFFALSE 55621
55601: PUSH
55602: LD_OWVAR 2
55606: PPUSH
55607: LD_VAR 0 1
55611: PPUSH
55612: CALL_OW 81
55616: PUSH
55617: LD_INT 1
55619: NONEQUAL
55620: AND
55621: OR
55622: IFFALSE 55645
// if HasPower ( i ) then
55624: LD_VAR 0 1
55628: PPUSH
55629: CALL 55706 0 1
55633: IFFALSE 55645
// begin canWin := false ;
55635: LD_ADDR_VAR 0 2
55639: PUSH
55640: LD_INT 0
55642: ST_TO_ADDR
// break ;
55643: GO 55647
// end ;
55645: GO 55521
55647: POP
55648: POP
// if canWin then
55649: LD_VAR 0 2
55653: IFFALSE 55660
// enable ( mpWin ) else
55655: LD_INT 101
55657: ENABLE_MARKED
55658: GO 55661
// enable ;
55660: ENABLE
// end ; end ;
55661: PPOPN 2
55663: END
// function CanWinLoose ; begin
55664: LD_INT 0
55666: PPUSH
// result := true ;
55667: LD_ADDR_VAR 0 1
55671: PUSH
55672: LD_INT 1
55674: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55675: CALL_OW 531
55679: IFFALSE 55691
55681: PUSH
55682: CALL_OW 519
55686: PUSH
55687: LD_INT 1
55689: GREATER
55690: AND
55691: IFFALSE 55701
// result := false ;
55693: LD_ADDR_VAR 0 1
55697: PUSH
55698: LD_INT 0
55700: ST_TO_ADDR
// end ;
55701: LD_VAR 0 1
55705: RET
// function HasPower ( i ) ; begin
55706: LD_INT 0
55708: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
55709: LD_INT 22
55711: PUSH
55712: LD_VAR 0 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 30
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 30
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PPUSH
55753: CALL_OW 69
55757: NOT
55758: IFFALSE 55762
// exit ;
55760: GO 55827
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55762: LD_ADDR_VAR 0 2
55766: PUSH
55767: LD_INT 22
55769: PUSH
55770: LD_VAR 0 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 21
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 33
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 33
55804: PUSH
55805: LD_INT 5
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PPUSH
55822: CALL_OW 69
55826: ST_TO_ADDR
// end ; end_of_file
55827: LD_VAR 0 2
55831: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55832: LD_EXP 41
55836: IFFALSE 56177
55838: GO 55840
55840: DISABLE
55841: LD_INT 0
55843: PPUSH
55844: PPUSH
55845: PPUSH
// begin mpKingPoints := [ ] ;
55846: LD_ADDR_EXP 52
55850: PUSH
55851: EMPTY
55852: ST_TO_ADDR
// if mpTeamGame then
55853: LD_EXP 13
55857: IFFALSE 55911
// begin for i := 1 to Count ( mpTeams ) do
55859: LD_ADDR_VAR 0 1
55863: PUSH
55864: DOUBLE
55865: LD_INT 1
55867: DEC
55868: ST_TO_ADDR
55869: LD_EXP 12
55873: PPUSH
55874: CALL 5966 0 1
55878: PUSH
55879: FOR_TO
55880: IFFALSE 55907
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55882: LD_ADDR_EXP 52
55886: PUSH
55887: LD_EXP 52
55891: PPUSH
55892: LD_VAR 0 1
55896: PPUSH
55897: LD_INT 0
55899: PPUSH
55900: CALL_OW 1
55904: ST_TO_ADDR
55905: GO 55879
55907: POP
55908: POP
// end else
55909: GO 55954
// begin for i := 1 to 8 do
55911: LD_ADDR_VAR 0 1
55915: PUSH
55916: DOUBLE
55917: LD_INT 1
55919: DEC
55920: ST_TO_ADDR
55921: LD_INT 8
55923: PUSH
55924: FOR_TO
55925: IFFALSE 55952
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55927: LD_ADDR_EXP 52
55931: PUSH
55932: LD_EXP 52
55936: PPUSH
55937: LD_VAR 0 1
55941: PPUSH
55942: LD_INT 0
55944: PPUSH
55945: CALL_OW 1
55949: ST_TO_ADDR
55950: GO 55924
55952: POP
55953: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55954: LD_ADDR_VAR 0 3
55958: PUSH
55959: LD_EXP 2
55963: PPUSH
55964: LD_INT 0
55966: PPUSH
55967: CALL_OW 517
55971: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55972: LD_ADDR_VAR 0 1
55976: PUSH
55977: DOUBLE
55978: LD_INT 1
55980: DEC
55981: ST_TO_ADDR
55982: LD_VAR 0 3
55986: PUSH
55987: LD_INT 1
55989: ARRAY
55990: PUSH
55991: FOR_TO
55992: IFFALSE 56059
// for j := 1 to 8 do
55994: LD_ADDR_VAR 0 2
55998: PUSH
55999: DOUBLE
56000: LD_INT 1
56002: DEC
56003: ST_TO_ADDR
56004: LD_INT 8
56006: PUSH
56007: FOR_TO
56008: IFFALSE 56055
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
56010: LD_VAR 0 3
56014: PUSH
56015: LD_INT 1
56017: ARRAY
56018: PUSH
56019: LD_VAR 0 1
56023: ARRAY
56024: PPUSH
56025: LD_VAR 0 3
56029: PUSH
56030: LD_INT 2
56032: ARRAY
56033: PUSH
56034: LD_VAR 0 1
56038: ARRAY
56039: PPUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: LD_INT 12
56047: NEG
56048: PPUSH
56049: CALL_OW 330
56053: GO 56007
56055: POP
56056: POP
56057: GO 55991
56059: POP
56060: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
56061: LD_EXP 36
56065: PPUSH
56066: LD_INT 1
56068: PPUSH
56069: CALL_OW 424
// UpdateCounter ;
56073: CALL 56683 0 0
// repeat wait ( 0 0$1 ) ;
56077: LD_INT 35
56079: PPUSH
56080: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: LD_EXP 36
56093: PPUSH
56094: LD_INT 3
56096: PUSH
56097: LD_INT 57
56099: PUSH
56100: EMPTY
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 50
56109: PUSH
56110: EMPTY
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 30
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 30
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: PPUSH
56146: CALL_OW 70
56150: ST_TO_ADDR
// if not tmp then
56151: LD_VAR 0 3
56155: NOT
56156: IFFALSE 56160
// continue ;
56158: GO 56077
// AddPoints ( tmp ) ;
56160: LD_VAR 0 3
56164: PPUSH
56165: CALL 56361 0 1
// UpdateCounter ;
56169: CALL 56683 0 0
// until false ;
56173: LD_INT 0
56175: IFFALSE 56077
// end ;
56177: PPOPN 3
56179: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
56180: LD_EXP 41
56184: IFFALSE 56192
56186: PUSH
56187: LD_EXP 39
56191: AND
56192: IFFALSE 56358
56194: GO 56196
56196: DISABLE
56197: LD_INT 0
56199: PPUSH
56200: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
56201: LD_ADDR_VAR 0 2
56205: PUSH
56206: LD_EXP 2
56210: PPUSH
56211: LD_INT 0
56213: PPUSH
56214: CALL_OW 517
56218: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56219: LD_ADDR_VAR 0 1
56223: PUSH
56224: DOUBLE
56225: LD_INT 1
56227: DEC
56228: ST_TO_ADDR
56229: LD_VAR 0 2
56233: PUSH
56234: LD_INT 1
56236: ARRAY
56237: PUSH
56238: FOR_TO
56239: IFFALSE 56280
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
56241: LD_VAR 0 2
56245: PUSH
56246: LD_INT 1
56248: ARRAY
56249: PUSH
56250: LD_VAR 0 1
56254: ARRAY
56255: PPUSH
56256: LD_VAR 0 2
56260: PUSH
56261: LD_INT 2
56263: ARRAY
56264: PUSH
56265: LD_VAR 0 1
56269: ARRAY
56270: PPUSH
56271: LD_INT 125
56273: PPUSH
56274: CALL_OW 495
56278: GO 56238
56280: POP
56281: POP
// repeat wait ( mpEmissions ) ;
56282: LD_EXP 39
56286: PPUSH
56287: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
56291: LD_ADDR_VAR 0 1
56295: PUSH
56296: DOUBLE
56297: LD_INT 1
56299: DEC
56300: ST_TO_ADDR
56301: LD_VAR 0 2
56305: PUSH
56306: LD_INT 1
56308: ARRAY
56309: PUSH
56310: FOR_TO
56311: IFFALSE 56352
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
56313: LD_VAR 0 2
56317: PUSH
56318: LD_INT 1
56320: ARRAY
56321: PUSH
56322: LD_VAR 0 1
56326: ARRAY
56327: PPUSH
56328: LD_VAR 0 2
56332: PUSH
56333: LD_INT 2
56335: ARRAY
56336: PUSH
56337: LD_VAR 0 1
56341: ARRAY
56342: PPUSH
56343: LD_INT 15
56345: PPUSH
56346: CALL_OW 495
56350: GO 56310
56352: POP
56353: POP
// until false ;
56354: LD_INT 0
56356: IFFALSE 56282
// end ;
56358: PPOPN 2
56360: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
56361: LD_INT 0
56363: PPUSH
56364: PPUSH
56365: PPUSH
56366: PPUSH
56367: PPUSH
// if mpTeamGame then
56368: LD_EXP 13
56372: IFFALSE 56569
// begin first := depots [ 1 ] ;
56374: LD_ADDR_VAR 0 4
56378: PUSH
56379: LD_VAR 0 1
56383: PUSH
56384: LD_INT 1
56386: ARRAY
56387: ST_TO_ADDR
// side := GetSide ( first ) ;
56388: LD_ADDR_VAR 0 6
56392: PUSH
56393: LD_VAR 0 4
56397: PPUSH
56398: CALL_OW 255
56402: ST_TO_ADDR
// for i := 1 to mpTeams do
56403: LD_ADDR_VAR 0 3
56407: PUSH
56408: DOUBLE
56409: LD_INT 1
56411: DEC
56412: ST_TO_ADDR
56413: LD_EXP 12
56417: PUSH
56418: FOR_TO
56419: IFFALSE 56453
// if side in mpTeams [ i ] then
56421: LD_VAR 0 6
56425: PUSH
56426: LD_EXP 12
56430: PUSH
56431: LD_VAR 0 3
56435: ARRAY
56436: IN
56437: IFFALSE 56451
// begin team := i ;
56439: LD_ADDR_VAR 0 5
56443: PUSH
56444: LD_VAR 0 3
56448: ST_TO_ADDR
// break ;
56449: GO 56453
// end ;
56451: GO 56418
56453: POP
56454: POP
// if not team then
56455: LD_VAR 0 5
56459: NOT
56460: IFFALSE 56464
// exit ;
56462: GO 56678
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
56464: LD_EXP 36
56468: PPUSH
56469: LD_INT 81
56471: PUSH
56472: LD_VAR 0 6
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PPUSH
56481: CALL_OW 70
56485: IFFALSE 56489
// exit ;
56487: GO 56678
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
56489: LD_ADDR_EXP 52
56493: PUSH
56494: LD_EXP 52
56498: PPUSH
56499: LD_VAR 0 5
56503: PPUSH
56504: LD_EXP 52
56508: PUSH
56509: LD_VAR 0 5
56513: ARRAY
56514: PUSH
56515: LD_INT 1
56517: PLUS
56518: PPUSH
56519: CALL_OW 1
56523: ST_TO_ADDR
// for i in mpTeams [ team ] do
56524: LD_ADDR_VAR 0 3
56528: PUSH
56529: LD_EXP 12
56533: PUSH
56534: LD_VAR 0 5
56538: ARRAY
56539: PUSH
56540: FOR_IN
56541: IFFALSE 56565
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
56543: LD_VAR 0 3
56547: PPUSH
56548: LD_EXP 52
56552: PUSH
56553: LD_VAR 0 5
56557: ARRAY
56558: PPUSH
56559: CALL_OW 506
56563: GO 56540
56565: POP
56566: POP
// end else
56567: GO 56678
// begin first := depots [ 1 ] ;
56569: LD_ADDR_VAR 0 4
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: LD_INT 1
56581: ARRAY
56582: ST_TO_ADDR
// side := GetSide ( first ) ;
56583: LD_ADDR_VAR 0 6
56587: PUSH
56588: LD_VAR 0 4
56592: PPUSH
56593: CALL_OW 255
56597: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
56598: LD_EXP 36
56602: PPUSH
56603: LD_INT 81
56605: PUSH
56606: LD_VAR 0 6
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PPUSH
56615: CALL_OW 70
56619: IFFALSE 56623
// exit ;
56621: GO 56678
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
56623: LD_ADDR_EXP 52
56627: PUSH
56628: LD_EXP 52
56632: PPUSH
56633: LD_VAR 0 6
56637: PPUSH
56638: LD_EXP 52
56642: PUSH
56643: LD_VAR 0 6
56647: ARRAY
56648: PUSH
56649: LD_INT 1
56651: PLUS
56652: PPUSH
56653: CALL_OW 1
56657: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
56658: LD_VAR 0 6
56662: PPUSH
56663: LD_EXP 52
56667: PUSH
56668: LD_VAR 0 6
56672: ARRAY
56673: PPUSH
56674: CALL_OW 506
// end ; end ;
56678: LD_VAR 0 2
56682: RET
// function UpdateCounter ; var i ; begin
56683: LD_INT 0
56685: PPUSH
56686: PPUSH
// result := [ ] ;
56687: LD_ADDR_VAR 0 1
56691: PUSH
56692: EMPTY
56693: ST_TO_ADDR
// if mpTeamGame then
56694: LD_EXP 13
56698: IFFALSE 56765
// begin for i := 1 to mpTeams do
56700: LD_ADDR_VAR 0 2
56704: PUSH
56705: DOUBLE
56706: LD_INT 1
56708: DEC
56709: ST_TO_ADDR
56710: LD_EXP 12
56714: PUSH
56715: FOR_TO
56716: IFFALSE 56761
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
56718: LD_ADDR_VAR 0 1
56722: PUSH
56723: LD_VAR 0 1
56727: PUSH
56728: LD_STRING #KingoftheHill-Team
56730: PUSH
56731: LD_VAR 0 2
56735: PUSH
56736: LD_EXP 52
56740: PUSH
56741: LD_VAR 0 2
56745: ARRAY
56746: PUSH
56747: LD_EXP 37
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: ADD
56758: ST_TO_ADDR
56759: GO 56715
56761: POP
56762: POP
// end else
56763: GO 56838
// begin for i := 1 to 8 do
56765: LD_ADDR_VAR 0 2
56769: PUSH
56770: DOUBLE
56771: LD_INT 1
56773: DEC
56774: ST_TO_ADDR
56775: LD_INT 8
56777: PUSH
56778: FOR_TO
56779: IFFALSE 56836
// if mpSidePositions [ i ] then
56781: LD_EXP 9
56785: PUSH
56786: LD_VAR 0 2
56790: ARRAY
56791: IFFALSE 56834
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56793: LD_ADDR_VAR 0 1
56797: PUSH
56798: LD_VAR 0 1
56802: PUSH
56803: LD_STRING #KingoftheHill-Player
56805: PUSH
56806: LD_VAR 0 2
56810: PUSH
56811: LD_EXP 52
56815: PUSH
56816: LD_VAR 0 2
56820: ARRAY
56821: PUSH
56822: LD_EXP 37
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: ADD
56833: ST_TO_ADDR
56834: GO 56778
56836: POP
56837: POP
// end ; mpDisplayStrings := result ;
56838: LD_ADDR_EXP 40
56842: PUSH
56843: LD_VAR 0 1
56847: ST_TO_ADDR
// end ;
56848: LD_VAR 0 1
56852: RET
// export function HowMuchPointsKing ( side ) ; begin
56853: LD_INT 0
56855: PPUSH
// result := HowMuchPoints ( side ) ;
56856: LD_ADDR_VAR 0 2
56860: PUSH
56861: LD_VAR 0 1
56865: PPUSH
56866: CALL 56876 0 1
56870: ST_TO_ADDR
// end ;
56871: LD_VAR 0 2
56875: RET
// function HowMuchPoints ( side ) ; var i ; begin
56876: LD_INT 0
56878: PPUSH
56879: PPUSH
// if mpTeamGame then
56880: LD_EXP 13
56884: IFFALSE 56953
// begin for i := 1 to Count ( mpTeams ) do
56886: LD_ADDR_VAR 0 3
56890: PUSH
56891: DOUBLE
56892: LD_INT 1
56894: DEC
56895: ST_TO_ADDR
56896: LD_EXP 12
56900: PPUSH
56901: CALL 5966 0 1
56905: PUSH
56906: FOR_TO
56907: IFFALSE 56949
// begin if side in mpTeams [ i ] then
56909: LD_VAR 0 1
56913: PUSH
56914: LD_EXP 12
56918: PUSH
56919: LD_VAR 0 3
56923: ARRAY
56924: IN
56925: IFFALSE 56947
// begin result := mpKingPoints [ i ] ;
56927: LD_ADDR_VAR 0 2
56931: PUSH
56932: LD_EXP 52
56936: PUSH
56937: LD_VAR 0 3
56941: ARRAY
56942: ST_TO_ADDR
// exit ;
56943: POP
56944: POP
56945: GO 56969
// end ; end ;
56947: GO 56906
56949: POP
56950: POP
// end else
56951: GO 56969
// result := mpKingPoints [ side ] ;
56953: LD_ADDR_VAR 0 2
56957: PUSH
56958: LD_EXP 52
56962: PUSH
56963: LD_VAR 0 1
56967: ARRAY
56968: ST_TO_ADDR
// end ;
56969: LD_VAR 0 2
56973: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56974: LD_EXP 41
56978: IFFALSE 56986
56980: PUSH
56981: CALL 57398 0 0
56985: AND
56986: IFFALSE 56994
56988: PUSH
56989: LD_OWVAR 4
56993: AND
56994: IFFALSE 57247
56996: GO 56998
56998: DISABLE
56999: LD_INT 0
57001: PPUSH
57002: PPUSH
// begin canWin := false ;
57003: LD_ADDR_VAR 0 2
57007: PUSH
57008: LD_INT 0
57010: ST_TO_ADDR
// if not HasPower ( your_side ) then
57011: LD_OWVAR 2
57015: PPUSH
57016: CALL 57440 0 1
57020: NOT
57021: IFFALSE 57032
// begin Multiplayer_Loose_Message ;
57023: CALL_OW 521
// enable ( mpLose ) ;
57027: LD_INT 102
57029: ENABLE_MARKED
// end else
57030: GO 57247
// begin if not EnemiesInGame then
57032: CALL 57250 0 0
57036: NOT
57037: IFFALSE 57044
// begin enable ( mpWin ) ;
57039: LD_INT 101
57041: ENABLE_MARKED
// exit ;
57042: GO 57247
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
57044: LD_ADDR_VAR 0 2
57048: PUSH
57049: LD_OWVAR 2
57053: PPUSH
57054: CALL 56876 0 1
57058: PUSH
57059: LD_EXP 37
57063: GREATEREQUAL
57064: IFFALSE 57077
57066: PUSH
57067: LD_OWVAR 2
57071: PPUSH
57072: CALL 57440 0 1
57076: AND
57077: ST_TO_ADDR
// for i := 1 to 8 do
57078: LD_ADDR_VAR 0 1
57082: PUSH
57083: DOUBLE
57084: LD_INT 1
57086: DEC
57087: ST_TO_ADDR
57088: LD_INT 8
57090: PUSH
57091: FOR_TO
57092: IFFALSE 57233
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
57094: LD_EXP 9
57098: PUSH
57099: LD_VAR 0 1
57103: ARRAY
57104: IFFALSE 57117
57106: PUSH
57107: LD_VAR 0 1
57111: PPUSH
57112: CALL_OW 108
57116: AND
57117: IFFALSE 57131
57119: PUSH
57120: LD_VAR 0 1
57124: PUSH
57125: LD_OWVAR 2
57129: NONEQUAL
57130: AND
57131: IFFALSE 57231
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
57133: LD_EXP 10
57137: PUSH
57138: LD_VAR 0 1
57142: ARRAY
57143: NOT
57144: IFTRUE 57192
57146: PUSH
57147: LD_EXP 10
57151: PUSH
57152: LD_VAR 0 1
57156: ARRAY
57157: PUSH
57158: LD_EXP 10
57162: PUSH
57163: LD_OWVAR 2
57167: ARRAY
57168: NONEQUAL
57169: IFFALSE 57191
57171: PUSH
57172: LD_OWVAR 2
57176: PPUSH
57177: LD_VAR 0 1
57181: PPUSH
57182: CALL_OW 81
57186: PUSH
57187: LD_INT 1
57189: NONEQUAL
57190: AND
57191: OR
57192: IFFALSE 57231
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL 56876 0 1
57203: PUSH
57204: LD_EXP 37
57208: GREATEREQUAL
57209: IFFALSE 57222
57211: PUSH
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL 57440 0 1
57221: AND
57222: IFFALSE 57231
// begin enable ( mpLose ) ;
57224: LD_INT 102
57226: ENABLE_MARKED
// exit ;
57227: POP
57228: POP
57229: GO 57247
// end ;
57231: GO 57091
57233: POP
57234: POP
// if canWin then
57235: LD_VAR 0 2
57239: IFFALSE 57246
// enable ( mpWin ) else
57241: LD_INT 101
57243: ENABLE_MARKED
57244: GO 57247
// enable ;
57246: ENABLE
// end ; end ;
57247: PPOPN 2
57249: END
// function EnemiesInGame ; var i ; begin
57250: LD_INT 0
57252: PPUSH
57253: PPUSH
// result := false ;
57254: LD_ADDR_VAR 0 1
57258: PUSH
57259: LD_INT 0
57261: ST_TO_ADDR
// for i := 1 to 8 do
57262: LD_ADDR_VAR 0 2
57266: PUSH
57267: DOUBLE
57268: LD_INT 1
57270: DEC
57271: ST_TO_ADDR
57272: LD_INT 8
57274: PUSH
57275: FOR_TO
57276: IFFALSE 57391
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
57278: LD_VAR 0 2
57282: PUSH
57283: LD_OWVAR 2
57287: NONEQUAL
57288: IFFALSE 57301
57290: PUSH
57291: LD_VAR 0 2
57295: PPUSH
57296: CALL 57440 0 1
57300: AND
57301: IFFALSE 57314
57303: PUSH
57304: LD_VAR 0 2
57308: PPUSH
57309: CALL_OW 108
57313: AND
57314: IFFALSE 57389
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
57316: LD_EXP 10
57320: PUSH
57321: LD_VAR 0 2
57325: ARRAY
57326: NOT
57327: IFTRUE 57375
57329: PUSH
57330: LD_EXP 10
57334: PUSH
57335: LD_VAR 0 2
57339: ARRAY
57340: PUSH
57341: LD_EXP 10
57345: PUSH
57346: LD_OWVAR 2
57350: ARRAY
57351: NONEQUAL
57352: IFFALSE 57374
57354: PUSH
57355: LD_OWVAR 2
57359: PPUSH
57360: LD_VAR 0 2
57364: PPUSH
57365: CALL_OW 81
57369: PUSH
57370: LD_INT 1
57372: NONEQUAL
57373: AND
57374: OR
57375: IFFALSE 57389
// begin result := true ;
57377: LD_ADDR_VAR 0 1
57381: PUSH
57382: LD_INT 1
57384: ST_TO_ADDR
// exit ;
57385: POP
57386: POP
57387: GO 57393
// end ;
57389: GO 57275
57391: POP
57392: POP
// end ;
57393: LD_VAR 0 1
57397: RET
// function CanWinLoose ; begin
57398: LD_INT 0
57400: PPUSH
// result := true ;
57401: LD_ADDR_VAR 0 1
57405: PUSH
57406: LD_INT 1
57408: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
57409: CALL_OW 531
57413: IFFALSE 57425
57415: PUSH
57416: CALL_OW 519
57420: PUSH
57421: LD_INT 1
57423: GREATER
57424: AND
57425: IFFALSE 57435
// result := false ;
57427: LD_ADDR_VAR 0 1
57431: PUSH
57432: LD_INT 0
57434: ST_TO_ADDR
// end ;
57435: LD_VAR 0 1
57439: RET
// function HasPower ( i ) ; begin
57440: LD_INT 0
57442: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
57443: LD_ADDR_VAR 0 2
57447: PUSH
57448: LD_INT 22
57450: PUSH
57451: LD_VAR 0 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 21
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 33
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 33
57485: PUSH
57486: LD_INT 5
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PPUSH
57503: CALL_OW 69
57507: ST_TO_ADDR
// end ; end_of_file end_of_file
57508: LD_VAR 0 2
57512: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57513: LD_VAR 0 1
57517: PUSH
57518: LD_INT 200
57520: DOUBLE
57521: GREATEREQUAL
57522: IFFALSE 57530
57524: LD_INT 299
57526: DOUBLE
57527: LESSEQUAL
57528: IFTRUE 57532
57530: GO 57564
57532: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57533: LD_VAR 0 1
57537: PPUSH
57538: LD_VAR 0 2
57542: PPUSH
57543: LD_VAR 0 3
57547: PPUSH
57548: LD_VAR 0 4
57552: PPUSH
57553: LD_VAR 0 5
57557: PPUSH
57558: CALL 58426 0 5
57562: GO 57641
57564: LD_INT 300
57566: DOUBLE
57567: GREATEREQUAL
57568: IFFALSE 57576
57570: LD_INT 399
57572: DOUBLE
57573: LESSEQUAL
57574: IFTRUE 57578
57576: GO 57640
57578: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57579: LD_VAR 0 1
57583: PPUSH
57584: LD_VAR 0 2
57588: PPUSH
57589: LD_VAR 0 3
57593: PPUSH
57594: LD_VAR 0 4
57598: PPUSH
57599: LD_VAR 0 5
57603: PPUSH
57604: LD_VAR 0 6
57608: PPUSH
57609: LD_VAR 0 7
57613: PPUSH
57614: LD_VAR 0 8
57618: PPUSH
57619: LD_VAR 0 9
57623: PPUSH
57624: LD_VAR 0 10
57628: PPUSH
57629: LD_VAR 0 11
57633: PPUSH
57634: CALL 64854 0 11
57638: GO 57641
57640: POP
// end ;
57641: PPOPN 11
57643: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57644: LD_VAR 0 1
57648: PPUSH
57649: LD_VAR 0 2
57653: PPUSH
57654: LD_VAR 0 3
57658: PPUSH
57659: LD_VAR 0 4
57663: PPUSH
57664: LD_VAR 0 5
57668: PPUSH
57669: CALL 57726 0 5
// end ; end_of_file
57673: PPOPN 5
57675: END
// export function SOS_UnitDestroyed ( un ) ; begin
57676: LD_INT 0
57678: PPUSH
// ComRadiation ( un ) ;
57679: LD_VAR 0 1
57683: PPUSH
57684: CALL 58846 0 1
// end ;
57688: LD_VAR 0 2
57692: RET
// export function SOS_UnitKamikazed ( un ) ; begin
57693: LD_INT 0
57695: PPUSH
// ComRadiation ( un ) ;
57696: LD_VAR 0 1
57700: PPUSH
57701: CALL 58846 0 1
// end ;
57705: LD_VAR 0 2
57709: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57710: LD_INT 0
57712: PPUSH
// end ;
57713: LD_VAR 0 4
57717: RET
// export function SOS_Command ( cmd ) ; begin
57718: LD_INT 0
57720: PPUSH
// end ;
57721: LD_VAR 0 2
57725: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57726: LD_INT 0
57728: PPUSH
// end ;
57729: LD_VAR 0 6
57733: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
57734: LD_INT 0
57736: PPUSH
57737: PPUSH
57738: PPUSH
57739: PPUSH
57740: PPUSH
// if not vehicle or not factory then
57741: LD_VAR 0 1
57745: NOT
57746: IFTRUE 57755
57748: PUSH
57749: LD_VAR 0 2
57753: NOT
57754: OR
57755: IFFALSE 57759
// exit ;
57757: GO 58421
// weapon := GetWeapon ( vehicle ) ;
57759: LD_ADDR_VAR 0 7
57763: PUSH
57764: LD_VAR 0 1
57768: PPUSH
57769: CALL_OW 264
57773: ST_TO_ADDR
// if weapon = ar_miner then
57774: LD_VAR 0 7
57778: PUSH
57779: LD_INT 81
57781: EQUAL
57782: IFFALSE 57839
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57784: LD_ADDR_EXP 60
57788: PUSH
57789: LD_EXP 60
57793: PPUSH
57794: LD_EXP 60
57798: PUSH
57799: LD_INT 1
57801: PLUS
57802: PPUSH
57803: LD_VAR 0 1
57807: PPUSH
57808: CALL_OW 1
57812: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57813: LD_ADDR_EXP 61
57817: PUSH
57818: LD_EXP 61
57822: PPUSH
57823: LD_EXP 61
57827: PUSH
57828: LD_INT 1
57830: PLUS
57831: PPUSH
57832: EMPTY
57833: PPUSH
57834: CALL_OW 1
57838: ST_TO_ADDR
// end ; if not factoryWaypoints then
57839: LD_EXP 63
57843: NOT
57844: IFFALSE 57848
// exit ;
57846: GO 58421
// for i := 1 to Count ( factoryWaypoints ) do
57848: LD_ADDR_VAR 0 4
57852: PUSH
57853: DOUBLE
57854: LD_INT 1
57856: DEC
57857: ST_TO_ADDR
57858: LD_EXP 63
57862: PPUSH
57863: CALL 5966 0 1
57867: PUSH
57868: FOR_TO
57869: IFFALSE 58419
// if factoryWaypoints [ i ] [ 2 ] = factory then
57871: LD_EXP 63
57875: PUSH
57876: LD_VAR 0 4
57880: ARRAY
57881: PUSH
57882: LD_INT 2
57884: ARRAY
57885: PUSH
57886: LD_VAR 0 2
57890: EQUAL
57891: IFFALSE 58417
// begin if GetControl ( vehicle ) = control_manual then
57893: LD_VAR 0 1
57897: PPUSH
57898: CALL_OW 263
57902: PUSH
57903: LD_INT 1
57905: EQUAL
57906: IFFALSE 58270
// begin driver := IsDrivenBy ( vehicle ) ;
57908: LD_ADDR_VAR 0 5
57912: PUSH
57913: LD_VAR 0 1
57917: PPUSH
57918: CALL_OW 311
57922: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57923: LD_VAR 0 5
57927: PUSH
57928: LD_EXP 64
57932: IN
57933: IFTRUE 57947
57935: PUSH
57936: LD_VAR 0 1
57940: PUSH
57941: LD_EXP 64
57945: IN
57946: OR
57947: IFFALSE 57953
// exit ;
57949: POP
57950: POP
57951: GO 58421
// if not HasTask ( driver ) then
57953: LD_VAR 0 5
57957: PPUSH
57958: CALL_OW 314
57962: NOT
57963: IFFALSE 58268
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57965: LD_ADDR_EXP 64
57969: PUSH
57970: LD_EXP 64
57974: PPUSH
57975: LD_VAR 0 5
57979: PPUSH
57980: CALL 41942 0 2
57984: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57985: LD_ADDR_EXP 64
57989: PUSH
57990: LD_EXP 64
57994: PPUSH
57995: LD_VAR 0 1
57999: PPUSH
58000: CALL 41942 0 2
58004: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58005: LD_ADDR_VAR 0 6
58009: PUSH
58010: LD_EXP 63
58014: PUSH
58015: LD_VAR 0 4
58019: ARRAY
58020: PUSH
58021: LD_INT 3
58023: ARRAY
58024: PPUSH
58025: LD_EXP 63
58029: PUSH
58030: LD_VAR 0 4
58034: ARRAY
58035: PUSH
58036: LD_INT 4
58038: ARRAY
58039: PPUSH
58040: CALL_OW 428
58044: ST_TO_ADDR
// if hex then
58045: LD_VAR 0 6
58049: IFFALSE 58067
// ComMoveUnit ( driver , hex ) else
58051: LD_VAR 0 5
58055: PPUSH
58056: LD_VAR 0 6
58060: PPUSH
58061: CALL_OW 112
58065: GO 58151
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
58067: LD_VAR 0 1
58071: PPUSH
58072: LD_EXP 63
58076: PUSH
58077: LD_VAR 0 4
58081: ARRAY
58082: PUSH
58083: LD_INT 3
58085: ARRAY
58086: PPUSH
58087: LD_EXP 63
58091: PUSH
58092: LD_VAR 0 4
58096: ARRAY
58097: PUSH
58098: LD_INT 4
58100: ARRAY
58101: PPUSH
58102: CALL_OW 297
58106: PUSH
58107: LD_INT 0
58109: GREATER
58110: IFFALSE 58151
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58112: LD_VAR 0 5
58116: PPUSH
58117: LD_EXP 63
58121: PUSH
58122: LD_VAR 0 4
58126: ARRAY
58127: PUSH
58128: LD_INT 3
58130: ARRAY
58131: PPUSH
58132: LD_EXP 63
58136: PUSH
58137: LD_VAR 0 4
58141: ARRAY
58142: PUSH
58143: LD_INT 4
58145: ARRAY
58146: PPUSH
58147: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58151: LD_VAR 0 5
58155: PPUSH
58156: CALL_OW 181
// if Multiplayer then
58160: LD_OWVAR 4
58164: IFFALSE 58213
// begin repeat wait ( 10 ) ;
58166: LD_INT 10
58168: PPUSH
58169: CALL_OW 67
// until not IsInUnit ( driver ) ;
58173: LD_VAR 0 5
58177: PPUSH
58178: CALL_OW 310
58182: NOT
58183: IFFALSE 58166
// if not HasTask ( driver ) then
58185: LD_VAR 0 5
58189: PPUSH
58190: CALL_OW 314
58194: NOT
58195: IFFALSE 58211
// ComEnterUnit ( driver , factory ) ;
58197: LD_VAR 0 5
58201: PPUSH
58202: LD_VAR 0 2
58206: PPUSH
58207: CALL_OW 120
// end else
58211: GO 58227
// AddComEnterUnit ( driver , factory ) ;
58213: LD_VAR 0 5
58217: PPUSH
58218: LD_VAR 0 2
58222: PPUSH
58223: CALL_OW 180
// wait ( 0 0$1 ) ;
58227: LD_INT 35
58229: PPUSH
58230: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
58234: LD_ADDR_EXP 64
58238: PUSH
58239: LD_EXP 64
58243: PUSH
58244: LD_VAR 0 5
58248: DIFF
58249: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
58250: LD_ADDR_EXP 64
58254: PUSH
58255: LD_EXP 64
58259: PUSH
58260: LD_VAR 0 1
58264: DIFF
58265: ST_TO_ADDR
// break ;
58266: GO 58419
// end ; end else
58268: GO 58417
// if GetControl ( vehicle ) = control_remote then
58270: LD_VAR 0 1
58274: PPUSH
58275: CALL_OW 263
58279: PUSH
58280: LD_INT 2
58282: EQUAL
58283: IFFALSE 58369
// begin wait ( 0 0$2 ) ;
58285: LD_INT 70
58287: PPUSH
58288: CALL_OW 67
// repeat wait ( 10 ) ;
58292: LD_INT 10
58294: PPUSH
58295: CALL_OW 67
// Connect ( vehicle ) ;
58299: LD_VAR 0 1
58303: PPUSH
58304: CALL 12244 0 1
// until IsControledBy ( vehicle ) ;
58308: LD_VAR 0 1
58312: PPUSH
58313: CALL_OW 312
58317: IFFALSE 58292
// wait ( 10 ) ;
58319: LD_INT 10
58321: PPUSH
58322: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58326: LD_VAR 0 1
58330: PPUSH
58331: LD_EXP 63
58335: PUSH
58336: LD_VAR 0 4
58340: ARRAY
58341: PUSH
58342: LD_INT 3
58344: ARRAY
58345: PPUSH
58346: LD_EXP 63
58350: PUSH
58351: LD_VAR 0 4
58355: ARRAY
58356: PUSH
58357: LD_INT 4
58359: ARRAY
58360: PPUSH
58361: CALL_OW 111
// break ;
58365: GO 58419
// end else
58367: GO 58417
// begin wait ( 0 0$3 ) ;
58369: LD_INT 105
58371: PPUSH
58372: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58376: LD_VAR 0 1
58380: PPUSH
58381: LD_EXP 63
58385: PUSH
58386: LD_VAR 0 4
58390: ARRAY
58391: PUSH
58392: LD_INT 3
58394: ARRAY
58395: PPUSH
58396: LD_EXP 63
58400: PUSH
58401: LD_VAR 0 4
58405: ARRAY
58406: PUSH
58407: LD_INT 4
58409: ARRAY
58410: PPUSH
58411: CALL_OW 111
// break ;
58415: GO 58419
// end ; end ;
58417: GO 57868
58419: POP
58420: POP
// end ;
58421: LD_VAR 0 3
58425: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58426: LD_INT 0
58428: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58429: LD_VAR 0 1
58433: PUSH
58434: LD_INT 250
58436: EQUAL
58437: IFFALSE 58454
58439: PUSH
58440: LD_VAR 0 2
58444: PPUSH
58445: CALL_OW 264
58449: PUSH
58450: LD_INT 81
58452: EQUAL
58453: AND
58454: IFFALSE 58475
// MinerPlaceMine ( unit , x , y ) ;
58456: LD_VAR 0 2
58460: PPUSH
58461: LD_VAR 0 4
58465: PPUSH
58466: LD_VAR 0 5
58470: PPUSH
58471: CALL 61821 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58475: LD_VAR 0 1
58479: PUSH
58480: LD_INT 251
58482: EQUAL
58483: IFFALSE 58500
58485: PUSH
58486: LD_VAR 0 2
58490: PPUSH
58491: CALL_OW 264
58495: PUSH
58496: LD_INT 81
58498: EQUAL
58499: AND
58500: IFFALSE 58521
// MinerDetonateMine ( unit , x , y ) ;
58502: LD_VAR 0 2
58506: PPUSH
58507: LD_VAR 0 4
58511: PPUSH
58512: LD_VAR 0 5
58516: PPUSH
58517: CALL 62228 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58521: LD_VAR 0 1
58525: PUSH
58526: LD_INT 252
58528: EQUAL
58529: IFFALSE 58546
58531: PUSH
58532: LD_VAR 0 2
58536: PPUSH
58537: CALL_OW 264
58541: PUSH
58542: LD_INT 81
58544: EQUAL
58545: AND
58546: IFFALSE 58567
// MinerCreateMinefield ( unit , x , y ) ;
58548: LD_VAR 0 2
58552: PPUSH
58553: LD_VAR 0 4
58557: PPUSH
58558: LD_VAR 0 5
58562: PPUSH
58563: CALL 62460 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58567: LD_VAR 0 1
58571: PUSH
58572: LD_INT 253
58574: EQUAL
58575: IFFALSE 58592
58577: PUSH
58578: LD_VAR 0 2
58582: PPUSH
58583: CALL_OW 257
58587: PUSH
58588: LD_INT 5
58590: EQUAL
58591: AND
58592: IFFALSE 58613
// ComBinocular ( unit , x , y ) ;
58594: LD_VAR 0 2
58598: PPUSH
58599: LD_VAR 0 4
58603: PPUSH
58604: LD_VAR 0 5
58608: PPUSH
58609: CALL 62835 0 3
// if selectedUnit then
58613: LD_VAR 0 3
58617: IFFALSE 58677
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58619: LD_VAR 0 1
58623: PUSH
58624: LD_INT 254
58626: EQUAL
58627: IFFALSE 58644
58629: PUSH
58630: LD_VAR 0 2
58634: PPUSH
58635: CALL_OW 264
58639: PUSH
58640: LD_INT 99
58642: EQUAL
58643: AND
58644: IFFALSE 58661
58646: PUSH
58647: LD_VAR 0 3
58651: PPUSH
58652: CALL_OW 263
58656: PUSH
58657: LD_INT 3
58659: EQUAL
58660: AND
58661: IFFALSE 58677
// HackDestroyVehicle ( unit , selectedUnit ) ;
58663: LD_VAR 0 2
58667: PPUSH
58668: LD_VAR 0 3
58672: PPUSH
58673: CALL 61011 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58677: LD_VAR 0 1
58681: PUSH
58682: LD_INT 255
58684: EQUAL
58685: IFFALSE 58709
58687: PUSH
58688: LD_VAR 0 2
58692: PPUSH
58693: CALL_OW 264
58697: PUSH
58698: LD_INT 14
58700: PUSH
58701: LD_INT 53
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: IN
58708: AND
58709: IFFALSE 58727
58711: PUSH
58712: LD_VAR 0 4
58716: PPUSH
58717: LD_VAR 0 5
58721: PPUSH
58722: CALL_OW 488
58726: AND
58727: IFFALSE 58751
// CutTreeXYR ( unit , x , y , 12 ) ;
58729: LD_VAR 0 2
58733: PPUSH
58734: LD_VAR 0 4
58738: PPUSH
58739: LD_VAR 0 5
58743: PPUSH
58744: LD_INT 12
58746: PPUSH
58747: CALL 58942 0 4
// if cmd = 256 then
58751: LD_VAR 0 1
58755: PUSH
58756: LD_INT 256
58758: EQUAL
58759: IFFALSE 58780
// SetFactoryWaypoint ( unit , x , y ) ;
58761: LD_VAR 0 2
58765: PPUSH
58766: LD_VAR 0 4
58770: PPUSH
58771: LD_VAR 0 5
58775: PPUSH
58776: CALL 64862 0 3
// if cmd = 257 then
58780: LD_VAR 0 1
58784: PUSH
58785: LD_INT 257
58787: EQUAL
58788: IFFALSE 58809
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58790: LD_VAR 0 2
58794: PPUSH
58795: LD_VAR 0 4
58799: PPUSH
58800: LD_VAR 0 5
58804: PPUSH
58805: CALL 65358 0 3
// if cmd = 258 then
58809: LD_VAR 0 1
58813: PUSH
58814: LD_INT 258
58816: EQUAL
58817: IFFALSE 58841
// BurnTreeXYR ( unit , x , y , 8 ) ;
58819: LD_VAR 0 2
58823: PPUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: LD_VAR 0 5
58833: PPUSH
58834: LD_INT 8
58836: PPUSH
58837: CALL 59364 0 4
// end ;
58841: LD_VAR 0 6
58845: RET
// export function ComRadiation ( un ) ; var eff ; begin
58846: LD_INT 0
58848: PPUSH
58849: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58850: LD_VAR 0 1
58854: PPUSH
58855: CALL_OW 264
58859: PUSH
58860: LD_INT 91
58862: NONEQUAL
58863: IFFALSE 58867
// exit ;
58865: GO 58937
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58867: LD_INT 68
58869: PPUSH
58870: LD_VAR 0 1
58874: PPUSH
58875: CALL_OW 255
58879: PPUSH
58880: CALL_OW 321
58884: PUSH
58885: LD_INT 2
58887: EQUAL
58888: IFFALSE 58900
// eff := 50 else
58890: LD_ADDR_VAR 0 3
58894: PUSH
58895: LD_INT 50
58897: ST_TO_ADDR
58898: GO 58908
// eff := 25 ;
58900: LD_ADDR_VAR 0 3
58904: PUSH
58905: LD_INT 25
58907: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58908: LD_VAR 0 1
58912: PPUSH
58913: CALL_OW 250
58917: PPUSH
58918: LD_VAR 0 1
58922: PPUSH
58923: CALL_OW 251
58927: PPUSH
58928: LD_VAR 0 3
58932: PPUSH
58933: CALL_OW 495
// end ;
58937: LD_VAR 0 2
58941: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58942: LD_INT 0
58944: PPUSH
58945: PPUSH
58946: PPUSH
58947: PPUSH
58948: PPUSH
58949: PPUSH
58950: PPUSH
58951: PPUSH
58952: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58953: LD_VAR 0 1
58957: PPUSH
58958: CALL_OW 302
58962: NOT
58963: IFTRUE 58982
58965: PUSH
58966: LD_VAR 0 2
58970: PPUSH
58971: LD_VAR 0 3
58975: PPUSH
58976: CALL_OW 488
58980: NOT
58981: OR
58982: IFTRUE 58991
58984: PUSH
58985: LD_VAR 0 4
58989: NOT
58990: OR
58991: IFFALSE 58995
// exit ;
58993: GO 59359
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58995: LD_VAR 0 1
58999: PPUSH
59000: CALL_OW 437
59004: PPUSH
59005: CALL 5966 0 1
59009: PUSH
59010: LD_INT 10
59012: GREATER
59013: IFFALSE 59017
// exit ;
59015: GO 59359
// list := [ ] ;
59017: LD_ADDR_VAR 0 13
59021: PUSH
59022: EMPTY
59023: ST_TO_ADDR
// if x - r < 0 then
59024: LD_VAR 0 2
59028: PUSH
59029: LD_VAR 0 4
59033: MINUS
59034: PUSH
59035: LD_INT 0
59037: LESS
59038: IFFALSE 59050
// min_x := 0 else
59040: LD_ADDR_VAR 0 7
59044: PUSH
59045: LD_INT 0
59047: ST_TO_ADDR
59048: GO 59066
// min_x := x - r ;
59050: LD_ADDR_VAR 0 7
59054: PUSH
59055: LD_VAR 0 2
59059: PUSH
59060: LD_VAR 0 4
59064: MINUS
59065: ST_TO_ADDR
// if y - r < 0 then
59066: LD_VAR 0 3
59070: PUSH
59071: LD_VAR 0 4
59075: MINUS
59076: PUSH
59077: LD_INT 0
59079: LESS
59080: IFFALSE 59092
// min_y := 0 else
59082: LD_ADDR_VAR 0 8
59086: PUSH
59087: LD_INT 0
59089: ST_TO_ADDR
59090: GO 59108
// min_y := y - r ;
59092: LD_ADDR_VAR 0 8
59096: PUSH
59097: LD_VAR 0 3
59101: PUSH
59102: LD_VAR 0 4
59106: MINUS
59107: ST_TO_ADDR
// max_x := x + r ;
59108: LD_ADDR_VAR 0 9
59112: PUSH
59113: LD_VAR 0 2
59117: PUSH
59118: LD_VAR 0 4
59122: PLUS
59123: ST_TO_ADDR
// max_y := y + r ;
59124: LD_ADDR_VAR 0 10
59128: PUSH
59129: LD_VAR 0 3
59133: PUSH
59134: LD_VAR 0 4
59138: PLUS
59139: ST_TO_ADDR
// for _x = min_x to max_x do
59140: LD_ADDR_VAR 0 11
59144: PUSH
59145: DOUBLE
59146: LD_VAR 0 7
59150: DEC
59151: ST_TO_ADDR
59152: LD_VAR 0 9
59156: PUSH
59157: FOR_TO
59158: IFFALSE 59277
// for _y = min_y to max_y do
59160: LD_ADDR_VAR 0 12
59164: PUSH
59165: DOUBLE
59166: LD_VAR 0 8
59170: DEC
59171: ST_TO_ADDR
59172: LD_VAR 0 10
59176: PUSH
59177: FOR_TO
59178: IFFALSE 59273
// begin if not ValidHex ( _x , _y ) then
59180: LD_VAR 0 11
59184: PPUSH
59185: LD_VAR 0 12
59189: PPUSH
59190: CALL_OW 488
59194: NOT
59195: IFFALSE 59199
// continue ;
59197: GO 59177
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59199: LD_VAR 0 11
59203: PPUSH
59204: LD_VAR 0 12
59208: PPUSH
59209: CALL_OW 351
59213: IFFALSE 59231
59215: PUSH
59216: LD_VAR 0 11
59220: PPUSH
59221: LD_VAR 0 12
59225: PPUSH
59226: CALL_OW 554
59230: AND
59231: IFFALSE 59271
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59233: LD_ADDR_VAR 0 13
59237: PUSH
59238: LD_VAR 0 13
59242: PPUSH
59243: LD_VAR 0 13
59247: PUSH
59248: LD_INT 1
59250: PLUS
59251: PPUSH
59252: LD_VAR 0 11
59256: PUSH
59257: LD_VAR 0 12
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PPUSH
59266: CALL_OW 2
59270: ST_TO_ADDR
// end ;
59271: GO 59177
59273: POP
59274: POP
59275: GO 59157
59277: POP
59278: POP
// if not list then
59279: LD_VAR 0 13
59283: NOT
59284: IFFALSE 59288
// exit ;
59286: GO 59359
// for i in list do
59288: LD_ADDR_VAR 0 6
59292: PUSH
59293: LD_VAR 0 13
59297: PUSH
59298: FOR_IN
59299: IFFALSE 59357
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59301: LD_VAR 0 1
59305: PPUSH
59306: LD_STRING M
59308: PUSH
59309: LD_VAR 0 6
59313: PUSH
59314: LD_INT 1
59316: ARRAY
59317: PUSH
59318: LD_VAR 0 6
59322: PUSH
59323: LD_INT 2
59325: ARRAY
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: PUSH
59348: EMPTY
59349: LIST
59350: PPUSH
59351: CALL_OW 447
59355: GO 59298
59357: POP
59358: POP
// end ;
59359: LD_VAR 0 5
59363: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59364: LD_INT 0
59366: PPUSH
59367: PPUSH
59368: PPUSH
59369: PPUSH
59370: PPUSH
59371: PPUSH
59372: PPUSH
59373: PPUSH
59374: PPUSH
59375: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59376: LD_VAR 0 1
59380: PPUSH
59381: CALL_OW 302
59385: NOT
59386: IFTRUE 59405
59388: PUSH
59389: LD_VAR 0 2
59393: PPUSH
59394: LD_VAR 0 3
59398: PPUSH
59399: CALL_OW 488
59403: NOT
59404: OR
59405: IFTRUE 59414
59407: PUSH
59408: LD_VAR 0 4
59412: NOT
59413: OR
59414: IFFALSE 59418
// exit ;
59416: GO 59957
// if Count ( GetTaskList ( flame ) ) > 10 then
59418: LD_VAR 0 1
59422: PPUSH
59423: CALL_OW 437
59427: PPUSH
59428: CALL 5966 0 1
59432: PUSH
59433: LD_INT 10
59435: GREATER
59436: IFFALSE 59440
// exit ;
59438: GO 59957
// list := [ ] ;
59440: LD_ADDR_VAR 0 13
59444: PUSH
59445: EMPTY
59446: ST_TO_ADDR
// if x - r < 0 then
59447: LD_VAR 0 2
59451: PUSH
59452: LD_VAR 0 4
59456: MINUS
59457: PUSH
59458: LD_INT 0
59460: LESS
59461: IFFALSE 59473
// min_x := 0 else
59463: LD_ADDR_VAR 0 7
59467: PUSH
59468: LD_INT 0
59470: ST_TO_ADDR
59471: GO 59489
// min_x := x - r ;
59473: LD_ADDR_VAR 0 7
59477: PUSH
59478: LD_VAR 0 2
59482: PUSH
59483: LD_VAR 0 4
59487: MINUS
59488: ST_TO_ADDR
// if y - r < 0 then
59489: LD_VAR 0 3
59493: PUSH
59494: LD_VAR 0 4
59498: MINUS
59499: PUSH
59500: LD_INT 0
59502: LESS
59503: IFFALSE 59515
// min_y := 0 else
59505: LD_ADDR_VAR 0 8
59509: PUSH
59510: LD_INT 0
59512: ST_TO_ADDR
59513: GO 59531
// min_y := y - r ;
59515: LD_ADDR_VAR 0 8
59519: PUSH
59520: LD_VAR 0 3
59524: PUSH
59525: LD_VAR 0 4
59529: MINUS
59530: ST_TO_ADDR
// max_x := x + r ;
59531: LD_ADDR_VAR 0 9
59535: PUSH
59536: LD_VAR 0 2
59540: PUSH
59541: LD_VAR 0 4
59545: PLUS
59546: ST_TO_ADDR
// max_y := y + r ;
59547: LD_ADDR_VAR 0 10
59551: PUSH
59552: LD_VAR 0 3
59556: PUSH
59557: LD_VAR 0 4
59561: PLUS
59562: ST_TO_ADDR
// for _x = min_x to max_x do
59563: LD_ADDR_VAR 0 11
59567: PUSH
59568: DOUBLE
59569: LD_VAR 0 7
59573: DEC
59574: ST_TO_ADDR
59575: LD_VAR 0 9
59579: PUSH
59580: FOR_TO
59581: IFFALSE 59700
// for _y = min_y to max_y do
59583: LD_ADDR_VAR 0 12
59587: PUSH
59588: DOUBLE
59589: LD_VAR 0 8
59593: DEC
59594: ST_TO_ADDR
59595: LD_VAR 0 10
59599: PUSH
59600: FOR_TO
59601: IFFALSE 59696
// begin if not ValidHex ( _x , _y ) then
59603: LD_VAR 0 11
59607: PPUSH
59608: LD_VAR 0 12
59612: PPUSH
59613: CALL_OW 488
59617: NOT
59618: IFFALSE 59622
// continue ;
59620: GO 59600
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59622: LD_VAR 0 11
59626: PPUSH
59627: LD_VAR 0 12
59631: PPUSH
59632: CALL_OW 351
59636: IFFALSE 59654
59638: PUSH
59639: LD_VAR 0 11
59643: PPUSH
59644: LD_VAR 0 12
59648: PPUSH
59649: CALL_OW 554
59653: AND
59654: IFFALSE 59694
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59656: LD_ADDR_VAR 0 13
59660: PUSH
59661: LD_VAR 0 13
59665: PPUSH
59666: LD_VAR 0 13
59670: PUSH
59671: LD_INT 1
59673: PLUS
59674: PPUSH
59675: LD_VAR 0 11
59679: PUSH
59680: LD_VAR 0 12
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PPUSH
59689: CALL_OW 2
59693: ST_TO_ADDR
// end ;
59694: GO 59600
59696: POP
59697: POP
59698: GO 59580
59700: POP
59701: POP
// if not list then
59702: LD_VAR 0 13
59706: NOT
59707: IFFALSE 59711
// exit ;
59709: GO 59957
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59711: LD_ADDR_VAR 0 13
59715: PUSH
59716: LD_VAR 0 1
59720: PPUSH
59721: LD_VAR 0 13
59725: PPUSH
59726: LD_INT 1
59728: PPUSH
59729: LD_INT 1
59731: PPUSH
59732: CALL 9372 0 4
59736: ST_TO_ADDR
// ComStop ( flame ) ;
59737: LD_VAR 0 1
59741: PPUSH
59742: CALL_OW 141
// for i in list do
59746: LD_ADDR_VAR 0 6
59750: PUSH
59751: LD_VAR 0 13
59755: PUSH
59756: FOR_IN
59757: IFFALSE 59788
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59759: LD_VAR 0 1
59763: PPUSH
59764: LD_VAR 0 6
59768: PUSH
59769: LD_INT 1
59771: ARRAY
59772: PPUSH
59773: LD_VAR 0 6
59777: PUSH
59778: LD_INT 2
59780: ARRAY
59781: PPUSH
59782: CALL_OW 176
59786: GO 59756
59788: POP
59789: POP
// repeat wait ( 0 0$1 ) ;
59790: LD_INT 35
59792: PPUSH
59793: CALL_OW 67
// task := GetTaskList ( flame ) ;
59797: LD_ADDR_VAR 0 14
59801: PUSH
59802: LD_VAR 0 1
59806: PPUSH
59807: CALL_OW 437
59811: ST_TO_ADDR
// if not task then
59812: LD_VAR 0 14
59816: NOT
59817: IFFALSE 59821
// exit ;
59819: GO 59957
// if task [ 1 ] [ 1 ] <> | then
59821: LD_VAR 0 14
59825: PUSH
59826: LD_INT 1
59828: ARRAY
59829: PUSH
59830: LD_INT 1
59832: ARRAY
59833: PUSH
59834: LD_STRING |
59836: NONEQUAL
59837: IFFALSE 59841
// exit ;
59839: GO 59957
// _x := task [ 1 ] [ 2 ] ;
59841: LD_ADDR_VAR 0 11
59845: PUSH
59846: LD_VAR 0 14
59850: PUSH
59851: LD_INT 1
59853: ARRAY
59854: PUSH
59855: LD_INT 2
59857: ARRAY
59858: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59859: LD_ADDR_VAR 0 12
59863: PUSH
59864: LD_VAR 0 14
59868: PUSH
59869: LD_INT 1
59871: ARRAY
59872: PUSH
59873: LD_INT 3
59875: ARRAY
59876: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59877: LD_VAR 0 11
59881: PPUSH
59882: LD_VAR 0 12
59886: PPUSH
59887: CALL_OW 351
59891: NOT
59892: IFTRUE 59911
59894: PUSH
59895: LD_VAR 0 11
59899: PPUSH
59900: LD_VAR 0 12
59904: PPUSH
59905: CALL_OW 554
59909: NOT
59910: OR
59911: IFFALSE 59945
// begin task := Delete ( task , 1 ) ;
59913: LD_ADDR_VAR 0 14
59917: PUSH
59918: LD_VAR 0 14
59922: PPUSH
59923: LD_INT 1
59925: PPUSH
59926: CALL_OW 3
59930: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59931: LD_VAR 0 1
59935: PPUSH
59936: LD_VAR 0 14
59940: PPUSH
59941: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59945: LD_VAR 0 1
59949: PPUSH
59950: CALL_OW 314
59954: NOT
59955: IFFALSE 59790
// end ;
59957: LD_VAR 0 5
59961: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59962: LD_EXP 53
59966: NOT
59967: IFFALSE 60017
59969: GO 59971
59971: DISABLE
// begin initHack := true ;
59972: LD_ADDR_EXP 53
59976: PUSH
59977: LD_INT 1
59979: ST_TO_ADDR
// hackTanks := [ ] ;
59980: LD_ADDR_EXP 54
59984: PUSH
59985: EMPTY
59986: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59987: LD_ADDR_EXP 55
59991: PUSH
59992: EMPTY
59993: ST_TO_ADDR
// hackLimit := 3 ;
59994: LD_ADDR_EXP 56
59998: PUSH
59999: LD_INT 3
60001: ST_TO_ADDR
// hackDist := 12 ;
60002: LD_ADDR_EXP 57
60006: PUSH
60007: LD_INT 12
60009: ST_TO_ADDR
// hackCounter := [ ] ;
60010: LD_ADDR_EXP 58
60014: PUSH
60015: EMPTY
60016: ST_TO_ADDR
// end ;
60017: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60018: LD_EXP 53
60022: IFFALSE 60040
60024: PUSH
60025: LD_INT 34
60027: PUSH
60028: LD_INT 99
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PPUSH
60035: CALL_OW 69
60039: AND
60040: IFFALSE 60293
60042: GO 60044
60044: DISABLE
60045: LD_INT 0
60047: PPUSH
60048: PPUSH
// begin enable ;
60049: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60050: LD_ADDR_VAR 0 1
60054: PUSH
60055: LD_INT 34
60057: PUSH
60058: LD_INT 99
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PPUSH
60065: CALL_OW 69
60069: PUSH
60070: FOR_IN
60071: IFFALSE 60291
// begin if not i in hackTanks then
60073: LD_VAR 0 1
60077: PUSH
60078: LD_EXP 54
60082: IN
60083: NOT
60084: IFFALSE 60167
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60086: LD_ADDR_EXP 54
60090: PUSH
60091: LD_EXP 54
60095: PPUSH
60096: LD_EXP 54
60100: PUSH
60101: LD_INT 1
60103: PLUS
60104: PPUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 1
60114: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60115: LD_ADDR_EXP 55
60119: PUSH
60120: LD_EXP 55
60124: PPUSH
60125: LD_EXP 55
60129: PUSH
60130: LD_INT 1
60132: PLUS
60133: PPUSH
60134: EMPTY
60135: PPUSH
60136: CALL_OW 1
60140: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60141: LD_ADDR_EXP 58
60145: PUSH
60146: LD_EXP 58
60150: PPUSH
60151: LD_EXP 58
60155: PUSH
60156: LD_INT 1
60158: PLUS
60159: PPUSH
60160: EMPTY
60161: PPUSH
60162: CALL_OW 1
60166: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL_OW 302
60176: NOT
60177: IFFALSE 60190
// begin HackUnlinkAll ( i ) ;
60179: LD_VAR 0 1
60183: PPUSH
60184: CALL 60296 0 1
// continue ;
60188: GO 60070
// end ; HackCheckCapturedStatus ( i ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL 60741 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60199: LD_ADDR_VAR 0 2
60203: PUSH
60204: LD_INT 81
60206: PUSH
60207: LD_VAR 0 1
60211: PPUSH
60212: CALL_OW 255
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 33
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 91
60233: PUSH
60234: LD_VAR 0 1
60238: PUSH
60239: LD_EXP 57
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 50
60251: PUSH
60252: EMPTY
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: PPUSH
60261: CALL_OW 69
60265: ST_TO_ADDR
// if not tmp then
60266: LD_VAR 0 2
60270: NOT
60271: IFFALSE 60275
// continue ;
60273: GO 60070
// HackLink ( i , tmp ) ;
60275: LD_VAR 0 1
60279: PPUSH
60280: LD_VAR 0 2
60284: PPUSH
60285: CALL 60432 0 2
// end ;
60289: GO 60070
60291: POP
60292: POP
// end ;
60293: PPOPN 2
60295: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60296: LD_INT 0
60298: PPUSH
60299: PPUSH
60300: PPUSH
// if not hack in hackTanks then
60301: LD_VAR 0 1
60305: PUSH
60306: LD_EXP 54
60310: IN
60311: NOT
60312: IFFALSE 60316
// exit ;
60314: GO 60427
// index := GetElementIndex ( hackTanks , hack ) ;
60316: LD_ADDR_VAR 0 4
60320: PUSH
60321: LD_EXP 54
60325: PPUSH
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL 8667 0 2
60335: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60336: LD_EXP 55
60340: PUSH
60341: LD_VAR 0 4
60345: ARRAY
60346: IFFALSE 60427
// begin for i in hackTanksCaptured [ index ] do
60348: LD_ADDR_VAR 0 3
60352: PUSH
60353: LD_EXP 55
60357: PUSH
60358: LD_VAR 0 4
60362: ARRAY
60363: PUSH
60364: FOR_IN
60365: IFFALSE 60391
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60367: LD_VAR 0 3
60371: PUSH
60372: LD_INT 1
60374: ARRAY
60375: PPUSH
60376: LD_VAR 0 3
60380: PUSH
60381: LD_INT 2
60383: ARRAY
60384: PPUSH
60385: CALL_OW 235
60389: GO 60364
60391: POP
60392: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60393: LD_ADDR_EXP 55
60397: PUSH
60398: LD_EXP 55
60402: PPUSH
60403: LD_VAR 0 4
60407: PPUSH
60408: EMPTY
60409: PPUSH
60410: CALL_OW 1
60414: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_INT 0
60422: PPUSH
60423: CALL_OW 505
// end ; end ;
60427: LD_VAR 0 2
60431: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60432: LD_INT 0
60434: PPUSH
60435: PPUSH
60436: PPUSH
// if not hack in hackTanks or not vehicles then
60437: LD_VAR 0 1
60441: PUSH
60442: LD_EXP 54
60446: IN
60447: NOT
60448: IFTRUE 60457
60450: PUSH
60451: LD_VAR 0 2
60455: NOT
60456: OR
60457: IFFALSE 60461
// exit ;
60459: GO 60736
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60461: LD_ADDR_VAR 0 2
60465: PUSH
60466: LD_VAR 0 1
60470: PPUSH
60471: LD_VAR 0 2
60475: PPUSH
60476: LD_INT 1
60478: PPUSH
60479: LD_INT 1
60481: PPUSH
60482: CALL 9319 0 4
60486: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60487: LD_ADDR_VAR 0 5
60491: PUSH
60492: LD_EXP 54
60496: PPUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL 8667 0 2
60506: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60507: LD_EXP 55
60511: PUSH
60512: LD_VAR 0 5
60516: ARRAY
60517: PUSH
60518: LD_EXP 56
60522: LESS
60523: IFFALSE 60712
// begin for i := 1 to vehicles do
60525: LD_ADDR_VAR 0 4
60529: PUSH
60530: DOUBLE
60531: LD_INT 1
60533: DEC
60534: ST_TO_ADDR
60535: LD_VAR 0 2
60539: PUSH
60540: FOR_TO
60541: IFFALSE 60710
// begin if hackTanksCaptured [ index ] = hackLimit then
60543: LD_EXP 55
60547: PUSH
60548: LD_VAR 0 5
60552: ARRAY
60553: PUSH
60554: LD_EXP 56
60558: EQUAL
60559: IFFALSE 60563
// break ;
60561: GO 60710
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60563: LD_ADDR_EXP 58
60567: PUSH
60568: LD_EXP 58
60572: PPUSH
60573: LD_VAR 0 5
60577: PPUSH
60578: LD_EXP 58
60582: PUSH
60583: LD_VAR 0 5
60587: ARRAY
60588: PUSH
60589: LD_INT 1
60591: PLUS
60592: PPUSH
60593: CALL_OW 1
60597: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60598: LD_ADDR_EXP 55
60602: PUSH
60603: LD_EXP 55
60607: PPUSH
60608: LD_VAR 0 5
60612: PUSH
60613: LD_EXP 55
60617: PUSH
60618: LD_VAR 0 5
60622: ARRAY
60623: PUSH
60624: LD_INT 1
60626: PLUS
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PPUSH
60632: LD_VAR 0 2
60636: PUSH
60637: LD_VAR 0 4
60641: ARRAY
60642: PUSH
60643: LD_VAR 0 2
60647: PUSH
60648: LD_VAR 0 4
60652: ARRAY
60653: PPUSH
60654: CALL_OW 255
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PPUSH
60663: CALL 8884 0 3
60667: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60668: LD_VAR 0 2
60672: PUSH
60673: LD_VAR 0 4
60677: ARRAY
60678: PPUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 255
60688: PPUSH
60689: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60693: LD_VAR 0 2
60697: PUSH
60698: LD_VAR 0 4
60702: ARRAY
60703: PPUSH
60704: CALL_OW 141
// end ;
60708: GO 60540
60710: POP
60711: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60712: LD_VAR 0 1
60716: PPUSH
60717: LD_EXP 55
60721: PUSH
60722: LD_VAR 0 5
60726: ARRAY
60727: PUSH
60728: LD_INT 0
60730: PLUS
60731: PPUSH
60732: CALL_OW 505
// end ;
60736: LD_VAR 0 3
60740: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60741: LD_INT 0
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
// if not hack in hackTanks then
60747: LD_VAR 0 1
60751: PUSH
60752: LD_EXP 54
60756: IN
60757: NOT
60758: IFFALSE 60762
// exit ;
60760: GO 61006
// index := GetElementIndex ( hackTanks , hack ) ;
60762: LD_ADDR_VAR 0 4
60766: PUSH
60767: LD_EXP 54
60771: PPUSH
60772: LD_VAR 0 1
60776: PPUSH
60777: CALL 8667 0 2
60781: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60782: LD_ADDR_VAR 0 3
60786: PUSH
60787: DOUBLE
60788: LD_EXP 55
60792: PUSH
60793: LD_VAR 0 4
60797: ARRAY
60798: INC
60799: ST_TO_ADDR
60800: LD_INT 1
60802: PUSH
60803: FOR_DOWNTO
60804: IFFALSE 60980
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60806: LD_ADDR_VAR 0 5
60810: PUSH
60811: LD_EXP 55
60815: PUSH
60816: LD_VAR 0 4
60820: ARRAY
60821: PUSH
60822: LD_VAR 0 3
60826: ARRAY
60827: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60828: LD_VAR 0 5
60832: PUSH
60833: LD_INT 1
60835: ARRAY
60836: PPUSH
60837: CALL_OW 302
60841: NOT
60842: IFTRUE 60870
60844: PUSH
60845: LD_VAR 0 5
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: PPUSH
60854: CALL_OW 255
60858: PUSH
60859: LD_VAR 0 1
60863: PPUSH
60864: CALL_OW 255
60868: NONEQUAL
60869: OR
60870: IFFALSE 60978
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60872: LD_VAR 0 5
60876: PUSH
60877: LD_INT 1
60879: ARRAY
60880: PPUSH
60881: CALL_OW 305
60885: IFFALSE 60913
60887: PUSH
60888: LD_VAR 0 5
60892: PUSH
60893: LD_INT 1
60895: ARRAY
60896: PPUSH
60897: CALL_OW 255
60901: PUSH
60902: LD_VAR 0 1
60906: PPUSH
60907: CALL_OW 255
60911: EQUAL
60912: AND
60913: IFFALSE 60937
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60915: LD_VAR 0 5
60919: PUSH
60920: LD_INT 1
60922: ARRAY
60923: PPUSH
60924: LD_VAR 0 5
60928: PUSH
60929: LD_INT 2
60931: ARRAY
60932: PPUSH
60933: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60937: LD_ADDR_EXP 55
60941: PUSH
60942: LD_EXP 55
60946: PPUSH
60947: LD_VAR 0 4
60951: PPUSH
60952: LD_EXP 55
60956: PUSH
60957: LD_VAR 0 4
60961: ARRAY
60962: PPUSH
60963: LD_VAR 0 3
60967: PPUSH
60968: CALL_OW 3
60972: PPUSH
60973: CALL_OW 1
60977: ST_TO_ADDR
// end ; end ;
60978: GO 60803
60980: POP
60981: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60982: LD_VAR 0 1
60986: PPUSH
60987: LD_EXP 55
60991: PUSH
60992: LD_VAR 0 4
60996: ARRAY
60997: PUSH
60998: LD_INT 0
61000: PLUS
61001: PPUSH
61002: CALL_OW 505
// end ;
61006: LD_VAR 0 2
61010: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61011: LD_INT 0
61013: PPUSH
61014: PPUSH
61015: PPUSH
61016: PPUSH
// if not hack in hackTanks then
61017: LD_VAR 0 1
61021: PUSH
61022: LD_EXP 54
61026: IN
61027: NOT
61028: IFFALSE 61032
// exit ;
61030: GO 61117
// index := GetElementIndex ( hackTanks , hack ) ;
61032: LD_ADDR_VAR 0 5
61036: PUSH
61037: LD_EXP 54
61041: PPUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL 8667 0 2
61051: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61052: LD_ADDR_VAR 0 4
61056: PUSH
61057: DOUBLE
61058: LD_INT 1
61060: DEC
61061: ST_TO_ADDR
61062: LD_EXP 55
61066: PUSH
61067: LD_VAR 0 5
61071: ARRAY
61072: PUSH
61073: FOR_TO
61074: IFFALSE 61115
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61076: LD_EXP 55
61080: PUSH
61081: LD_VAR 0 5
61085: ARRAY
61086: PUSH
61087: LD_VAR 0 4
61091: ARRAY
61092: PUSH
61093: LD_INT 1
61095: ARRAY
61096: PUSH
61097: LD_VAR 0 2
61101: EQUAL
61102: IFFALSE 61113
// KillUnit ( vehicle ) ;
61104: LD_VAR 0 2
61108: PPUSH
61109: CALL_OW 66
61113: GO 61073
61115: POP
61116: POP
// end ;
61117: LD_VAR 0 3
61121: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
61122: LD_EXP 59
61126: NOT
61127: IFFALSE 61260
61129: GO 61131
61131: DISABLE
61132: LD_INT 0
61134: PPUSH
// begin initMiner := true ;
61135: LD_ADDR_EXP 59
61139: PUSH
61140: LD_INT 1
61142: ST_TO_ADDR
// minersList := [ ] ;
61143: LD_ADDR_EXP 60
61147: PUSH
61148: EMPTY
61149: ST_TO_ADDR
// minerMinesList := [ ] ;
61150: LD_ADDR_EXP 61
61154: PUSH
61155: EMPTY
61156: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
61157: LD_ADDR_EXP 62
61161: PUSH
61162: LD_INT 10
61164: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61165: LD_ADDR_VAR 0 1
61169: PUSH
61170: LD_INT 34
61172: PUSH
61173: LD_INT 81
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PPUSH
61180: CALL_OW 69
61184: PUSH
61185: FOR_IN
61186: IFFALSE 61258
// begin if not i in minersList then
61188: LD_VAR 0 1
61192: PUSH
61193: LD_EXP 60
61197: IN
61198: NOT
61199: IFFALSE 61256
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61201: LD_ADDR_EXP 60
61205: PUSH
61206: LD_EXP 60
61210: PPUSH
61211: LD_EXP 60
61215: PUSH
61216: LD_INT 1
61218: PLUS
61219: PPUSH
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 1
61229: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61230: LD_ADDR_EXP 61
61234: PUSH
61235: LD_EXP 61
61239: PPUSH
61240: LD_EXP 61
61244: PUSH
61245: LD_INT 1
61247: PLUS
61248: PPUSH
61249: EMPTY
61250: PPUSH
61251: CALL_OW 1
61255: ST_TO_ADDR
// end end ;
61256: GO 61185
61258: POP
61259: POP
// end ;
61260: PPOPN 1
61262: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
61263: LD_EXP 59
61267: IFFALSE 61298
61269: PUSH
61270: LD_EXP 61
61274: PPUSH
61275: CALL 5966 0 1
61279: IFTRUE 61297
61281: PUSH
61282: LD_INT 34
61284: PUSH
61285: LD_INT 81
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PPUSH
61292: CALL_OW 69
61296: OR
61297: AND
61298: IFFALSE 61818
61300: GO 61302
61302: DISABLE
61303: LD_INT 0
61305: PPUSH
61306: PPUSH
61307: PPUSH
61308: PPUSH
// begin enable ;
61309: ENABLE
// for i := minerMinesList downto 1 do
61310: LD_ADDR_VAR 0 1
61314: PUSH
61315: DOUBLE
61316: LD_EXP 61
61320: INC
61321: ST_TO_ADDR
61322: LD_INT 1
61324: PUSH
61325: FOR_DOWNTO
61326: IFFALSE 61816
// begin side := GetSide ( minersList [ i ] ) ;
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: LD_EXP 60
61337: PUSH
61338: LD_VAR 0 1
61342: ARRAY
61343: PPUSH
61344: CALL_OW 255
61348: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
61349: LD_EXP 60
61353: PUSH
61354: LD_VAR 0 1
61358: ARRAY
61359: PPUSH
61360: CALL_OW 300
61364: IFFALSE 61385
61366: PUSH
61367: LD_VAR 0 3
61371: PUSH
61372: LD_OWVAR 2
61376: PUSH
61377: LD_INT 9
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: IN
61384: AND
61385: IFFALSE 61418
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
61387: LD_EXP 60
61391: PUSH
61392: LD_VAR 0 1
61396: ARRAY
61397: PPUSH
61398: LD_EXP 61
61402: PUSH
61403: LD_VAR 0 1
61407: ARRAY
61408: PPUSH
61409: CALL 5966 0 1
61413: PPUSH
61414: CALL_OW 505
// if not minerMinesList [ i ] then
61418: LD_EXP 61
61422: PUSH
61423: LD_VAR 0 1
61427: ARRAY
61428: NOT
61429: IFFALSE 61433
// continue ;
61431: GO 61325
// for j := minerMinesList [ i ] downto 1 do
61433: LD_ADDR_VAR 0 2
61437: PUSH
61438: DOUBLE
61439: LD_EXP 61
61443: PUSH
61444: LD_VAR 0 1
61448: ARRAY
61449: INC
61450: ST_TO_ADDR
61451: LD_INT 1
61453: PUSH
61454: FOR_DOWNTO
61455: IFFALSE 61812
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
61457: LD_EXP 60
61461: PUSH
61462: LD_VAR 0 1
61466: ARRAY
61467: PPUSH
61468: CALL_OW 301
61472: IFTRUE 61492
61474: PUSH
61475: LD_EXP 60
61479: PUSH
61480: LD_VAR 0 1
61484: ARRAY
61485: PPUSH
61486: CALL_OW 305
61490: NOT
61491: OR
61492: IFFALSE 61583
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61494: LD_EXP 61
61498: PUSH
61499: LD_VAR 0 1
61503: ARRAY
61504: PUSH
61505: LD_VAR 0 2
61509: ARRAY
61510: PUSH
61511: LD_INT 1
61513: ARRAY
61514: PPUSH
61515: LD_EXP 61
61519: PUSH
61520: LD_VAR 0 1
61524: ARRAY
61525: PUSH
61526: LD_VAR 0 2
61530: ARRAY
61531: PUSH
61532: LD_INT 2
61534: ARRAY
61535: PPUSH
61536: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61540: LD_ADDR_EXP 61
61544: PUSH
61545: LD_EXP 61
61549: PPUSH
61550: LD_VAR 0 1
61554: PPUSH
61555: LD_EXP 61
61559: PUSH
61560: LD_VAR 0 1
61564: ARRAY
61565: PPUSH
61566: LD_VAR 0 2
61570: PPUSH
61571: CALL_OW 3
61575: PPUSH
61576: CALL_OW 1
61580: ST_TO_ADDR
// continue ;
61581: GO 61454
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61583: LD_ADDR_VAR 0 4
61587: PUSH
61588: LD_EXP 61
61592: PUSH
61593: LD_VAR 0 1
61597: ARRAY
61598: PUSH
61599: LD_VAR 0 2
61603: ARRAY
61604: PUSH
61605: LD_INT 1
61607: ARRAY
61608: PPUSH
61609: LD_EXP 61
61613: PUSH
61614: LD_VAR 0 1
61618: ARRAY
61619: PUSH
61620: LD_VAR 0 2
61624: ARRAY
61625: PUSH
61626: LD_INT 2
61628: ARRAY
61629: PPUSH
61630: CALL_OW 428
61634: ST_TO_ADDR
// if not tmp then
61635: LD_VAR 0 4
61639: NOT
61640: IFFALSE 61644
// continue ;
61642: GO 61454
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61644: LD_VAR 0 4
61648: PUSH
61649: LD_INT 81
61651: PUSH
61652: LD_VAR 0 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PPUSH
61661: CALL_OW 69
61665: IN
61666: IFFALSE 61716
61668: PUSH
61669: LD_EXP 61
61673: PUSH
61674: LD_VAR 0 1
61678: ARRAY
61679: PUSH
61680: LD_VAR 0 2
61684: ARRAY
61685: PUSH
61686: LD_INT 1
61688: ARRAY
61689: PPUSH
61690: LD_EXP 61
61694: PUSH
61695: LD_VAR 0 1
61699: ARRAY
61700: PUSH
61701: LD_VAR 0 2
61705: ARRAY
61706: PUSH
61707: LD_INT 2
61709: ARRAY
61710: PPUSH
61711: CALL_OW 458
61715: AND
61716: IFFALSE 61810
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61718: LD_EXP 61
61722: PUSH
61723: LD_VAR 0 1
61727: ARRAY
61728: PUSH
61729: LD_VAR 0 2
61733: ARRAY
61734: PUSH
61735: LD_INT 1
61737: ARRAY
61738: PPUSH
61739: LD_EXP 61
61743: PUSH
61744: LD_VAR 0 1
61748: ARRAY
61749: PUSH
61750: LD_VAR 0 2
61754: ARRAY
61755: PUSH
61756: LD_INT 2
61758: ARRAY
61759: PPUSH
61760: LD_VAR 0 3
61764: PPUSH
61765: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61769: LD_ADDR_EXP 61
61773: PUSH
61774: LD_EXP 61
61778: PPUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: LD_EXP 61
61788: PUSH
61789: LD_VAR 0 1
61793: ARRAY
61794: PPUSH
61795: LD_VAR 0 2
61799: PPUSH
61800: CALL_OW 3
61804: PPUSH
61805: CALL_OW 1
61809: ST_TO_ADDR
// end ; end ;
61810: GO 61454
61812: POP
61813: POP
// end ;
61814: GO 61325
61816: POP
61817: POP
// end ;
61818: PPOPN 4
61820: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61821: LD_INT 0
61823: PPUSH
61824: PPUSH
61825: PPUSH
61826: PPUSH
// result := false ;
61827: LD_ADDR_VAR 0 4
61831: PUSH
61832: LD_INT 0
61834: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61835: LD_VAR 0 1
61839: PPUSH
61840: CALL_OW 264
61844: PUSH
61845: LD_INT 81
61847: EQUAL
61848: NOT
61849: IFFALSE 61853
// exit ;
61851: GO 62223
// side := GetSide ( unit ) ;
61853: LD_ADDR_VAR 0 6
61857: PUSH
61858: LD_VAR 0 1
61862: PPUSH
61863: CALL_OW 255
61867: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61868: LD_ADDR_VAR 0 5
61872: PUSH
61873: LD_EXP 60
61877: PPUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL 8667 0 2
61887: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61888: LD_EXP 61
61892: PUSH
61893: LD_VAR 0 5
61897: ARRAY
61898: PUSH
61899: LD_EXP 62
61903: GREATEREQUAL
61904: IFFALSE 61908
// exit ;
61906: GO 62223
// ComMoveXY ( unit , x , y ) ;
61908: LD_VAR 0 1
61912: PPUSH
61913: LD_VAR 0 2
61917: PPUSH
61918: LD_VAR 0 3
61922: PPUSH
61923: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61927: LD_INT 35
61929: PPUSH
61930: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61934: LD_VAR 0 1
61938: PPUSH
61939: LD_VAR 0 2
61943: PPUSH
61944: LD_VAR 0 3
61948: PPUSH
61949: CALL 40723 0 3
61953: NOT
61954: IFFALSE 61967
61956: PUSH
61957: LD_VAR 0 1
61961: PPUSH
61962: CALL_OW 314
61966: AND
61967: IFFALSE 61971
// exit ;
61969: GO 62223
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61971: LD_VAR 0 2
61975: PPUSH
61976: LD_VAR 0 3
61980: PPUSH
61981: CALL_OW 428
61985: PUSH
61986: LD_VAR 0 1
61990: EQUAL
61991: IFFALSE 62005
61993: PUSH
61994: LD_VAR 0 1
61998: PPUSH
61999: CALL_OW 314
62003: NOT
62004: AND
62005: IFFALSE 61927
// if MineAtPos ( x , y ) then
62007: LD_VAR 0 2
62011: PPUSH
62012: LD_VAR 0 3
62016: PPUSH
62017: CALL_OW 458
62021: IFFALSE 62025
// exit ;
62023: GO 62223
// if your_side = side then
62025: LD_OWVAR 2
62029: PUSH
62030: LD_VAR 0 6
62034: EQUAL
62035: IFFALSE 62054
// PlaySoundXY ( x , y , PlantMine ) ;
62037: LD_VAR 0 2
62041: PPUSH
62042: LD_VAR 0 3
62046: PPUSH
62047: LD_STRING PlantMine
62049: PPUSH
62050: CALL_OW 366
// repeat wait ( 1 ) ;
62054: LD_INT 1
62056: PPUSH
62057: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
62061: LD_VAR 0 2
62065: PPUSH
62066: LD_VAR 0 3
62070: PPUSH
62071: LD_VAR 0 6
62075: PPUSH
62076: LD_INT 0
62078: PPUSH
62079: CALL_OW 454
62083: IFFALSE 62054
// if MineAtPos ( x , y ) then
62085: LD_VAR 0 2
62089: PPUSH
62090: LD_VAR 0 3
62094: PPUSH
62095: CALL_OW 458
62099: IFFALSE 62215
// begin for i in minerMinesList [ index ] do
62101: LD_ADDR_VAR 0 7
62105: PUSH
62106: LD_EXP 61
62110: PUSH
62111: LD_VAR 0 5
62115: ARRAY
62116: PUSH
62117: FOR_IN
62118: IFFALSE 62160
// if i [ 1 ] = x and i [ 2 ] = y then
62120: LD_VAR 0 7
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: PUSH
62129: LD_VAR 0 2
62133: EQUAL
62134: IFFALSE 62152
62136: PUSH
62137: LD_VAR 0 7
62141: PUSH
62142: LD_INT 2
62144: ARRAY
62145: PUSH
62146: LD_VAR 0 3
62150: EQUAL
62151: AND
62152: IFFALSE 62158
// exit ;
62154: POP
62155: POP
62156: GO 62223
62158: GO 62117
62160: POP
62161: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62162: LD_ADDR_EXP 61
62166: PUSH
62167: LD_EXP 61
62171: PPUSH
62172: LD_VAR 0 5
62176: PUSH
62177: LD_EXP 61
62181: PUSH
62182: LD_VAR 0 5
62186: ARRAY
62187: PUSH
62188: LD_INT 1
62190: PLUS
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PPUSH
62196: LD_VAR 0 2
62200: PUSH
62201: LD_VAR 0 3
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PPUSH
62210: CALL 8884 0 3
62214: ST_TO_ADDR
// end ; result := true ;
62215: LD_ADDR_VAR 0 4
62219: PUSH
62220: LD_INT 1
62222: ST_TO_ADDR
// end ;
62223: LD_VAR 0 4
62227: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62228: LD_INT 0
62230: PPUSH
62231: PPUSH
62232: PPUSH
// if not unit in minersList then
62233: LD_VAR 0 1
62237: PUSH
62238: LD_EXP 60
62242: IN
62243: NOT
62244: IFFALSE 62248
// exit ;
62246: GO 62455
// index := GetElementIndex ( minersList , unit ) ;
62248: LD_ADDR_VAR 0 6
62252: PUSH
62253: LD_EXP 60
62257: PPUSH
62258: LD_VAR 0 1
62262: PPUSH
62263: CALL 8667 0 2
62267: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62268: LD_ADDR_VAR 0 5
62272: PUSH
62273: DOUBLE
62274: LD_EXP 61
62278: PUSH
62279: LD_VAR 0 6
62283: ARRAY
62284: INC
62285: ST_TO_ADDR
62286: LD_INT 1
62288: PUSH
62289: FOR_DOWNTO
62290: IFFALSE 62453
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62292: LD_EXP 61
62296: PUSH
62297: LD_VAR 0 6
62301: ARRAY
62302: PUSH
62303: LD_VAR 0 5
62307: ARRAY
62308: PUSH
62309: LD_INT 1
62311: ARRAY
62312: PPUSH
62313: LD_EXP 61
62317: PUSH
62318: LD_VAR 0 6
62322: ARRAY
62323: PUSH
62324: LD_VAR 0 5
62328: ARRAY
62329: PUSH
62330: LD_INT 2
62332: ARRAY
62333: PPUSH
62334: LD_VAR 0 2
62338: PPUSH
62339: LD_VAR 0 3
62343: PPUSH
62344: CALL_OW 298
62348: PUSH
62349: LD_INT 6
62351: LESS
62352: IFFALSE 62451
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62354: LD_EXP 61
62358: PUSH
62359: LD_VAR 0 6
62363: ARRAY
62364: PUSH
62365: LD_VAR 0 5
62369: ARRAY
62370: PUSH
62371: LD_INT 1
62373: ARRAY
62374: PPUSH
62375: LD_EXP 61
62379: PUSH
62380: LD_VAR 0 6
62384: ARRAY
62385: PUSH
62386: LD_VAR 0 5
62390: ARRAY
62391: PUSH
62392: LD_INT 2
62394: ARRAY
62395: PPUSH
62396: LD_VAR 0 1
62400: PPUSH
62401: CALL_OW 255
62405: PPUSH
62406: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62410: LD_ADDR_EXP 61
62414: PUSH
62415: LD_EXP 61
62419: PPUSH
62420: LD_VAR 0 6
62424: PPUSH
62425: LD_EXP 61
62429: PUSH
62430: LD_VAR 0 6
62434: ARRAY
62435: PPUSH
62436: LD_VAR 0 5
62440: PPUSH
62441: CALL_OW 3
62445: PPUSH
62446: CALL_OW 1
62450: ST_TO_ADDR
// end ; end ;
62451: GO 62289
62453: POP
62454: POP
// end ;
62455: LD_VAR 0 4
62459: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62460: LD_INT 0
62462: PPUSH
62463: PPUSH
62464: PPUSH
62465: PPUSH
62466: PPUSH
62467: PPUSH
62468: PPUSH
62469: PPUSH
62470: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 264
62480: PUSH
62481: LD_INT 81
62483: EQUAL
62484: NOT
62485: IFTRUE 62500
62487: PUSH
62488: LD_VAR 0 1
62492: PUSH
62493: LD_EXP 60
62497: IN
62498: NOT
62499: OR
62500: IFFALSE 62504
// exit ;
62502: GO 62830
// index := GetElementIndex ( minersList , unit ) ;
62504: LD_ADDR_VAR 0 6
62508: PUSH
62509: LD_EXP 60
62513: PPUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: CALL 8667 0 2
62523: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62524: LD_ADDR_VAR 0 8
62528: PUSH
62529: LD_EXP 62
62533: PUSH
62534: LD_EXP 61
62538: PUSH
62539: LD_VAR 0 6
62543: ARRAY
62544: MINUS
62545: ST_TO_ADDR
// if not minesFreeAmount then
62546: LD_VAR 0 8
62550: NOT
62551: IFFALSE 62555
// exit ;
62553: GO 62830
// tmp := [ ] ;
62555: LD_ADDR_VAR 0 7
62559: PUSH
62560: EMPTY
62561: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62562: LD_ADDR_VAR 0 5
62566: PUSH
62567: DOUBLE
62568: LD_INT 1
62570: DEC
62571: ST_TO_ADDR
62572: LD_VAR 0 8
62576: PUSH
62577: FOR_TO
62578: IFFALSE 62777
// begin _d := rand ( 0 , 5 ) ;
62580: LD_ADDR_VAR 0 11
62584: PUSH
62585: LD_INT 0
62587: PPUSH
62588: LD_INT 5
62590: PPUSH
62591: CALL_OW 12
62595: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62596: LD_ADDR_VAR 0 12
62600: PUSH
62601: LD_INT 2
62603: PPUSH
62604: LD_INT 6
62606: PPUSH
62607: CALL_OW 12
62611: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62612: LD_ADDR_VAR 0 9
62616: PUSH
62617: LD_VAR 0 2
62621: PPUSH
62622: LD_VAR 0 11
62626: PPUSH
62627: LD_VAR 0 12
62631: PPUSH
62632: CALL_OW 272
62636: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62637: LD_ADDR_VAR 0 10
62641: PUSH
62642: LD_VAR 0 3
62646: PPUSH
62647: LD_VAR 0 11
62651: PPUSH
62652: LD_VAR 0 12
62656: PPUSH
62657: CALL_OW 273
62661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62662: LD_VAR 0 9
62666: PPUSH
62667: LD_VAR 0 10
62671: PPUSH
62672: CALL_OW 488
62676: IFFALSE 62700
62678: PUSH
62679: LD_VAR 0 9
62683: PUSH
62684: LD_VAR 0 10
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_VAR 0 7
62697: IN
62698: NOT
62699: AND
62700: IFFALSE 62719
62702: PUSH
62703: LD_VAR 0 9
62707: PPUSH
62708: LD_VAR 0 10
62712: PPUSH
62713: CALL_OW 458
62717: NOT
62718: AND
62719: IFFALSE 62761
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62721: LD_ADDR_VAR 0 7
62725: PUSH
62726: LD_VAR 0 7
62730: PPUSH
62731: LD_VAR 0 7
62735: PUSH
62736: LD_INT 1
62738: PLUS
62739: PPUSH
62740: LD_VAR 0 9
62744: PUSH
62745: LD_VAR 0 10
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PPUSH
62754: CALL_OW 1
62758: ST_TO_ADDR
62759: GO 62775
// i := i - 1 ;
62761: LD_ADDR_VAR 0 5
62765: PUSH
62766: LD_VAR 0 5
62770: PUSH
62771: LD_INT 1
62773: MINUS
62774: ST_TO_ADDR
// end ;
62775: GO 62577
62777: POP
62778: POP
// for i in tmp do
62779: LD_ADDR_VAR 0 5
62783: PUSH
62784: LD_VAR 0 7
62788: PUSH
62789: FOR_IN
62790: IFFALSE 62828
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62792: LD_VAR 0 1
62796: PPUSH
62797: LD_VAR 0 5
62801: PUSH
62802: LD_INT 1
62804: ARRAY
62805: PPUSH
62806: LD_VAR 0 5
62810: PUSH
62811: LD_INT 2
62813: ARRAY
62814: PPUSH
62815: CALL 61821 0 3
62819: NOT
62820: IFFALSE 62826
// exit ;
62822: POP
62823: POP
62824: GO 62830
62826: GO 62789
62828: POP
62829: POP
// end ;
62830: LD_VAR 0 4
62834: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62835: LD_INT 0
62837: PPUSH
62838: PPUSH
62839: PPUSH
62840: PPUSH
62841: PPUSH
62842: PPUSH
62843: PPUSH
62844: PPUSH
62845: PPUSH
// if GetClass ( unit ) <> class_sniper then
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 257
62855: PUSH
62856: LD_INT 5
62858: NONEQUAL
62859: IFFALSE 62863
// exit ;
62861: GO 63333
// dist := 8 ;
62863: LD_ADDR_VAR 0 5
62867: PUSH
62868: LD_INT 8
62870: ST_TO_ADDR
// viewRange := 12 ;
62871: LD_ADDR_VAR 0 8
62875: PUSH
62876: LD_INT 12
62878: ST_TO_ADDR
// side := GetSide ( unit ) ;
62879: LD_ADDR_VAR 0 6
62883: PUSH
62884: LD_VAR 0 1
62888: PPUSH
62889: CALL_OW 255
62893: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62894: LD_INT 61
62896: PPUSH
62897: LD_VAR 0 6
62901: PPUSH
62902: CALL_OW 321
62906: PUSH
62907: LD_INT 2
62909: EQUAL
62910: IFFALSE 62920
// viewRange := 16 ;
62912: LD_ADDR_VAR 0 8
62916: PUSH
62917: LD_INT 16
62919: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62920: LD_VAR 0 1
62924: PPUSH
62925: LD_VAR 0 2
62929: PPUSH
62930: LD_VAR 0 3
62934: PPUSH
62935: CALL_OW 297
62939: PUSH
62940: LD_VAR 0 5
62944: GREATER
62945: IFFALSE 63024
// begin ComMoveXY ( unit , x , y ) ;
62947: LD_VAR 0 1
62951: PPUSH
62952: LD_VAR 0 2
62956: PPUSH
62957: LD_VAR 0 3
62961: PPUSH
62962: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62966: LD_INT 35
62968: PPUSH
62969: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62973: LD_VAR 0 1
62977: PPUSH
62978: LD_VAR 0 2
62982: PPUSH
62983: LD_VAR 0 3
62987: PPUSH
62988: CALL 40723 0 3
62992: NOT
62993: IFFALSE 62997
// exit ;
62995: GO 63333
// until GetDistUnitXY ( unit , x , y ) < dist ;
62997: LD_VAR 0 1
63001: PPUSH
63002: LD_VAR 0 2
63006: PPUSH
63007: LD_VAR 0 3
63011: PPUSH
63012: CALL_OW 297
63016: PUSH
63017: LD_VAR 0 5
63021: LESS
63022: IFFALSE 62966
// end ; ComTurnXY ( unit , x , y ) ;
63024: LD_VAR 0 1
63028: PPUSH
63029: LD_VAR 0 2
63033: PPUSH
63034: LD_VAR 0 3
63038: PPUSH
63039: CALL_OW 118
// repeat if Multiplayer then
63043: LD_OWVAR 4
63047: IFFALSE 63058
// wait ( 35 ) else
63049: LD_INT 35
63051: PPUSH
63052: CALL_OW 67
63056: GO 63065
// wait ( 5 ) ;
63058: LD_INT 5
63060: PPUSH
63061: CALL_OW 67
// _d := GetDir ( unit ) ;
63065: LD_ADDR_VAR 0 11
63069: PUSH
63070: LD_VAR 0 1
63074: PPUSH
63075: CALL_OW 254
63079: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
63080: LD_ADDR_VAR 0 7
63084: PUSH
63085: LD_VAR 0 1
63089: PPUSH
63090: CALL_OW 250
63094: PPUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: CALL_OW 251
63104: PPUSH
63105: LD_VAR 0 2
63109: PPUSH
63110: LD_VAR 0 3
63114: PPUSH
63115: CALL 43359 0 4
63119: ST_TO_ADDR
// until dir = _d ;
63120: LD_VAR 0 7
63124: PUSH
63125: LD_VAR 0 11
63129: EQUAL
63130: IFFALSE 63043
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63132: LD_ADDR_VAR 0 9
63136: PUSH
63137: LD_VAR 0 1
63141: PPUSH
63142: CALL_OW 250
63146: PPUSH
63147: LD_VAR 0 7
63151: PPUSH
63152: LD_VAR 0 5
63156: PPUSH
63157: CALL_OW 272
63161: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63162: LD_ADDR_VAR 0 10
63166: PUSH
63167: LD_VAR 0 1
63171: PPUSH
63172: CALL_OW 251
63176: PPUSH
63177: LD_VAR 0 7
63181: PPUSH
63182: LD_VAR 0 5
63186: PPUSH
63187: CALL_OW 273
63191: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63192: LD_VAR 0 9
63196: PPUSH
63197: LD_VAR 0 10
63201: PPUSH
63202: CALL_OW 488
63206: NOT
63207: IFFALSE 63211
// exit ;
63209: GO 63333
// ComAnimCustom ( unit , 1 ) ;
63211: LD_VAR 0 1
63215: PPUSH
63216: LD_INT 1
63218: PPUSH
63219: CALL_OW 592
// p := 0 ;
63223: LD_ADDR_VAR 0 12
63227: PUSH
63228: LD_INT 0
63230: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63231: LD_VAR 0 9
63235: PPUSH
63236: LD_VAR 0 10
63240: PPUSH
63241: LD_VAR 0 6
63245: PPUSH
63246: LD_VAR 0 8
63250: PPUSH
63251: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63255: LD_INT 35
63257: PPUSH
63258: CALL_OW 67
// p := Inc ( p ) ;
63262: LD_ADDR_VAR 0 12
63266: PUSH
63267: LD_VAR 0 12
63271: PPUSH
63272: CALL 43315 0 1
63276: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63277: LD_VAR 0 12
63281: PUSH
63282: LD_INT 3
63284: EQUAL
63285: IFTRUE 63299
63287: PUSH
63288: LD_VAR 0 1
63292: PPUSH
63293: CALL_OW 302
63297: NOT
63298: OR
63299: IFTRUE 63312
63301: PUSH
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 301
63311: OR
63312: IFFALSE 63255
// RemoveSeeing ( _x , _y , side ) ;
63314: LD_VAR 0 9
63318: PPUSH
63319: LD_VAR 0 10
63323: PPUSH
63324: LD_VAR 0 6
63328: PPUSH
63329: CALL_OW 331
// end ;
63333: LD_VAR 0 4
63337: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
63338: LD_INT 0
63340: PPUSH
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
63345: PPUSH
63346: PPUSH
63347: PPUSH
63348: PPUSH
63349: PPUSH
63350: PPUSH
// if not unit then
63351: LD_VAR 0 1
63355: NOT
63356: IFFALSE 63360
// exit ;
63358: GO 63631
// side := GetSide ( unit ) ;
63360: LD_ADDR_VAR 0 3
63364: PUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: CALL_OW 255
63374: ST_TO_ADDR
// x := GetX ( unit ) ;
63375: LD_ADDR_VAR 0 5
63379: PUSH
63380: LD_VAR 0 1
63384: PPUSH
63385: CALL_OW 250
63389: ST_TO_ADDR
// y := GetY ( unit ) ;
63390: LD_ADDR_VAR 0 6
63394: PUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 251
63404: ST_TO_ADDR
// r := 8 ;
63405: LD_ADDR_VAR 0 4
63409: PUSH
63410: LD_INT 8
63412: ST_TO_ADDR
// if x - r < 0 then
63413: LD_VAR 0 5
63417: PUSH
63418: LD_VAR 0 4
63422: MINUS
63423: PUSH
63424: LD_INT 0
63426: LESS
63427: IFFALSE 63439
// min_x := 0 else
63429: LD_ADDR_VAR 0 7
63433: PUSH
63434: LD_INT 0
63436: ST_TO_ADDR
63437: GO 63455
// min_x := x - r ;
63439: LD_ADDR_VAR 0 7
63443: PUSH
63444: LD_VAR 0 5
63448: PUSH
63449: LD_VAR 0 4
63453: MINUS
63454: ST_TO_ADDR
// if y - r < 0 then
63455: LD_VAR 0 6
63459: PUSH
63460: LD_VAR 0 4
63464: MINUS
63465: PUSH
63466: LD_INT 0
63468: LESS
63469: IFFALSE 63481
// min_y := 0 else
63471: LD_ADDR_VAR 0 8
63475: PUSH
63476: LD_INT 0
63478: ST_TO_ADDR
63479: GO 63497
// min_y := y - r ;
63481: LD_ADDR_VAR 0 8
63485: PUSH
63486: LD_VAR 0 6
63490: PUSH
63491: LD_VAR 0 4
63495: MINUS
63496: ST_TO_ADDR
// max_x := x + r ;
63497: LD_ADDR_VAR 0 9
63501: PUSH
63502: LD_VAR 0 5
63506: PUSH
63507: LD_VAR 0 4
63511: PLUS
63512: ST_TO_ADDR
// max_y := y + r ;
63513: LD_ADDR_VAR 0 10
63517: PUSH
63518: LD_VAR 0 6
63522: PUSH
63523: LD_VAR 0 4
63527: PLUS
63528: ST_TO_ADDR
// for _x = min_x to max_x do
63529: LD_ADDR_VAR 0 11
63533: PUSH
63534: DOUBLE
63535: LD_VAR 0 7
63539: DEC
63540: ST_TO_ADDR
63541: LD_VAR 0 9
63545: PUSH
63546: FOR_TO
63547: IFFALSE 63629
// for _y = min_y to max_y do
63549: LD_ADDR_VAR 0 12
63553: PUSH
63554: DOUBLE
63555: LD_VAR 0 8
63559: DEC
63560: ST_TO_ADDR
63561: LD_VAR 0 10
63565: PUSH
63566: FOR_TO
63567: IFFALSE 63625
// begin if not ValidHex ( _x , _y ) then
63569: LD_VAR 0 11
63573: PPUSH
63574: LD_VAR 0 12
63578: PPUSH
63579: CALL_OW 488
63583: NOT
63584: IFFALSE 63588
// continue ;
63586: GO 63566
// if MineAtPos ( _x , _y ) then
63588: LD_VAR 0 11
63592: PPUSH
63593: LD_VAR 0 12
63597: PPUSH
63598: CALL_OW 458
63602: IFFALSE 63623
// ViewMineAtPos ( _x , _y , side ) ;
63604: LD_VAR 0 11
63608: PPUSH
63609: LD_VAR 0 12
63613: PPUSH
63614: LD_VAR 0 3
63618: PPUSH
63619: CALL_OW 457
// end ;
63623: GO 63566
63625: POP
63626: POP
63627: GO 63546
63629: POP
63630: POP
// end ;
63631: LD_VAR 0 2
63635: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
63636: LD_INT 0
63638: PPUSH
63639: PPUSH
63640: PPUSH
63641: PPUSH
63642: PPUSH
63643: PPUSH
63644: PPUSH
// if not units then
63645: LD_VAR 0 1
63649: NOT
63650: IFFALSE 63654
// exit ;
63652: GO 64118
// scaners := [ ] ;
63654: LD_ADDR_VAR 0 6
63658: PUSH
63659: EMPTY
63660: ST_TO_ADDR
// for i in units do
63661: LD_ADDR_VAR 0 3
63665: PUSH
63666: LD_VAR 0 1
63670: PUSH
63671: FOR_IN
63672: IFFALSE 63829
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
63674: LD_VAR 0 3
63678: PPUSH
63679: CALL_OW 264
63683: PUSH
63684: LD_INT 11
63686: NONEQUAL
63687: IFTRUE 63701
63689: PUSH
63690: LD_VAR 0 3
63694: PPUSH
63695: CALL_OW 302
63699: NOT
63700: OR
63701: IFTRUE 63718
63703: PUSH
63704: LD_VAR 0 3
63708: PPUSH
63709: CALL_OW 110
63713: PUSH
63714: LD_INT 502
63716: EQUAL
63717: OR
63718: IFFALSE 63722
// continue ;
63720: GO 63671
// ComStop ( i ) ;
63722: LD_VAR 0 3
63726: PPUSH
63727: CALL_OW 141
// x := GetX ( i ) ;
63731: LD_ADDR_VAR 0 4
63735: PUSH
63736: LD_VAR 0 3
63740: PPUSH
63741: CALL_OW 250
63745: ST_TO_ADDR
// y := GetY ( i ) ;
63746: LD_ADDR_VAR 0 5
63750: PUSH
63751: LD_VAR 0 3
63755: PPUSH
63756: CALL_OW 251
63760: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63761: LD_VAR 0 3
63765: PPUSH
63766: CALL_OW 255
63770: PUSH
63771: LD_OWVAR 2
63775: EQUAL
63776: IFFALSE 63795
// PlaySoundXY ( x , y , mineDetector ) ;
63778: LD_VAR 0 4
63782: PPUSH
63783: LD_VAR 0 5
63787: PPUSH
63788: LD_STRING mineDetector
63790: PPUSH
63791: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63795: LD_ADDR_VAR 0 6
63799: PUSH
63800: LD_VAR 0 6
63804: PPUSH
63805: LD_VAR 0 3
63809: PPUSH
63810: CALL 41942 0 2
63814: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63815: LD_VAR 0 3
63819: PPUSH
63820: LD_INT 502
63822: PPUSH
63823: CALL_OW 109
// end ;
63827: GO 63671
63829: POP
63830: POP
// if not scaners then
63831: LD_VAR 0 6
63835: NOT
63836: IFFALSE 63840
// exit ;
63838: GO 64118
// wait ( 3 ) ;
63840: LD_INT 3
63842: PPUSH
63843: CALL_OW 67
// timer := 6 ;
63847: LD_ADDR_VAR 0 7
63851: PUSH
63852: LD_INT 6
63854: ST_TO_ADDR
// repeat for i in scaners do
63855: LD_ADDR_VAR 0 3
63859: PUSH
63860: LD_VAR 0 6
63864: PUSH
63865: FOR_IN
63866: IFFALSE 64016
// begin side := GetSide ( i ) ;
63868: LD_ADDR_VAR 0 8
63872: PUSH
63873: LD_VAR 0 3
63877: PPUSH
63878: CALL_OW 255
63882: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63883: LD_VAR 0 3
63887: PPUSH
63888: CALL_OW 302
63892: NOT
63893: IFTRUE 63906
63895: PUSH
63896: LD_VAR 0 3
63900: PPUSH
63901: CALL_OW 314
63905: OR
63906: IFTRUE 63937
63908: PUSH
63909: LD_VAR 0 3
63913: PPUSH
63914: CALL_OW 263
63918: PUSH
63919: LD_INT 1
63921: EQUAL
63922: IFFALSE 63936
63924: PUSH
63925: LD_VAR 0 3
63929: PPUSH
63930: CALL_OW 311
63934: NOT
63935: AND
63936: OR
63937: IFFALSE 63981
// begin SetUnitDisplayNumber ( i , 0 ) ;
63939: LD_VAR 0 3
63943: PPUSH
63944: LD_INT 0
63946: PPUSH
63947: CALL_OW 505
// SetTag ( i , 0 ) ;
63951: LD_VAR 0 3
63955: PPUSH
63956: LD_INT 0
63958: PPUSH
63959: CALL_OW 109
// scaners := scaners diff i ;
63963: LD_ADDR_VAR 0 6
63967: PUSH
63968: LD_VAR 0 6
63972: PUSH
63973: LD_VAR 0 3
63977: DIFF
63978: ST_TO_ADDR
// continue ;
63979: GO 63865
// end ; if side in [ your_side , 9 ] then
63981: LD_VAR 0 8
63985: PUSH
63986: LD_OWVAR 2
63990: PUSH
63991: LD_INT 9
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: IN
63998: IFFALSE 64014
// SetUnitDisplayNumber ( i , timer ) ;
64000: LD_VAR 0 3
64004: PPUSH
64005: LD_VAR 0 7
64009: PPUSH
64010: CALL_OW 505
// end ;
64014: GO 63865
64016: POP
64017: POP
// if not scaners then
64018: LD_VAR 0 6
64022: NOT
64023: IFFALSE 64027
// exit ;
64025: GO 64118
// timer := Dec ( timer ) ;
64027: LD_ADDR_VAR 0 7
64031: PUSH
64032: LD_VAR 0 7
64036: PPUSH
64037: CALL 43337 0 1
64041: ST_TO_ADDR
// wait ( 0 0$1 ) ;
64042: LD_INT 35
64044: PPUSH
64045: CALL_OW 67
// until timer = 0 ;
64049: LD_VAR 0 7
64053: PUSH
64054: LD_INT 0
64056: EQUAL
64057: IFFALSE 63855
// if not scaners then
64059: LD_VAR 0 6
64063: NOT
64064: IFFALSE 64068
// exit ;
64066: GO 64118
// for i in scaners do
64068: LD_ADDR_VAR 0 3
64072: PUSH
64073: LD_VAR 0 6
64077: PUSH
64078: FOR_IN
64079: IFFALSE 64116
// begin SetUnitDisplayNumber ( i , 0 ) ;
64081: LD_VAR 0 3
64085: PPUSH
64086: LD_INT 0
64088: PPUSH
64089: CALL_OW 505
// SetTag ( i , 0 ) ;
64093: LD_VAR 0 3
64097: PPUSH
64098: LD_INT 0
64100: PPUSH
64101: CALL_OW 109
// RevealDetectorMine ( i ) ;
64105: LD_VAR 0 3
64109: PPUSH
64110: CALL 63338 0 1
// end ;
64114: GO 64078
64116: POP
64117: POP
// end ;
64118: LD_VAR 0 2
64122: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
64123: LD_INT 0
64125: PPUSH
// if p1 = mine_detector_mode then
64126: LD_VAR 0 2
64130: PUSH
64131: LD_INT 103
64133: EQUAL
64134: IFFALSE 64145
// DetectMine ( units ) ;
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL 63636 0 1
// end ; end_of_file
64145: LD_VAR 0 7
64149: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64150: PPOPN 6
64152: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64153: LD_INT 0
64155: PPUSH
// begin if not units then
64156: LD_VAR 0 1
64160: NOT
64161: IFFALSE 64165
// exit ;
64163: GO 64199
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
64165: LD_VAR 0 1
64169: PPUSH
64170: LD_VAR 0 2
64174: PPUSH
64175: LD_VAR 0 3
64179: PPUSH
64180: LD_VAR 0 4
64184: PPUSH
64185: LD_VAR 0 5
64189: PPUSH
64190: LD_VAR 0 6
64194: PPUSH
64195: CALL 64123 0 6
// end ;
64199: PPOPN 7
64201: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64202: LD_EXP 5
64206: PUSH
64207: LD_INT 4
64209: EQUAL
64210: IFFALSE 64246
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64212: LD_STRING setGameDifficulty(
64214: PUSH
64215: LD_OWVAR 67
64219: STR
64220: PUSH
64221: LD_STRING )
64223: STR
64224: PPUSH
64225: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64229: LD_STRING displayDifficulty(
64231: PUSH
64232: LD_OWVAR 67
64236: STR
64237: PUSH
64238: LD_STRING )
64240: STR
64241: PPUSH
64242: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64246: CALL 64275 0 0
// end ; end_of_file
64250: PPOPN 1
64252: END
// every 0 0$1 do
64253: GO 64255
64255: DISABLE
// begin enable ;
64256: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64257: LD_STRING updateTimer(
64259: PUSH
64260: LD_OWVAR 1
64264: STR
64265: PUSH
64266: LD_STRING );
64268: STR
64269: PPUSH
64270: CALL_OW 559
// end ;
64274: END
// export function SOS_MapStart ( ) ; begin
64275: LD_INT 0
64277: PPUSH
// UpdateFactoryWaypoints ( ) ;
64278: CALL 65216 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64282: CALL 65468 0 0
// ParseMultiDataToLua ( ) ;
64286: CALL 65615 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
64290: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
64292: PPUSH
64293: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
64297: LD_STRING setSpecLogoNumber(
64299: PUSH
64300: LD_INT 2
64302: STR
64303: PUSH
64304: LD_STRING ,
64306: STR
64307: PUSH
64308: LD_INT 1
64310: STR
64311: PUSH
64312: LD_STRING )
64314: STR
64315: PPUSH
64316: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
64320: LD_STRING setSpecLogoNumber(
64322: PUSH
64323: LD_INT 3
64325: STR
64326: PUSH
64327: LD_STRING ,
64329: STR
64330: PUSH
64331: LD_INT 2
64333: STR
64334: PUSH
64335: LD_STRING )
64337: STR
64338: PPUSH
64339: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
64343: LD_STRING setSpecLogoNumber(
64345: PUSH
64346: LD_INT 4
64348: STR
64349: PUSH
64350: LD_STRING ,
64352: STR
64353: PUSH
64354: LD_INT 3
64356: STR
64357: PUSH
64358: LD_STRING )
64360: STR
64361: PPUSH
64362: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
64366: LD_STRING setSpecLogoNumber(
64368: PUSH
64369: LD_INT 5
64371: STR
64372: PUSH
64373: LD_STRING ,
64375: STR
64376: PUSH
64377: LD_INT 4
64379: STR
64380: PUSH
64381: LD_STRING )
64383: STR
64384: PPUSH
64385: CALL_OW 559
// end ;
64389: LD_VAR 0 1
64393: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
64394: LD_INT 0
64396: PPUSH
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
64404: PPUSH
// for i := 1 to 8 do
64405: LD_ADDR_VAR 0 2
64409: PUSH
64410: DOUBLE
64411: LD_INT 1
64413: DEC
64414: ST_TO_ADDR
64415: LD_INT 8
64417: PUSH
64418: FOR_TO
64419: IFFALSE 64804
// begin if mpSidePositions [ i ] then
64421: LD_EXP 9
64425: PUSH
64426: LD_VAR 0 2
64430: ARRAY
64431: IFFALSE 64802
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64433: LD_ADDR_VAR 0 7
64437: PUSH
64438: LD_INT 22
64440: PUSH
64441: LD_VAR 0 2
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 21
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PPUSH
64464: CALL_OW 69
64468: PPUSH
64469: CALL 5966 0 1
64473: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64474: LD_ADDR_VAR 0 9
64478: PUSH
64479: LD_INT 22
64481: PUSH
64482: LD_VAR 0 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 30
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 30
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PPUSH
64523: CALL_OW 69
64527: ST_TO_ADDR
// crates := 0 ;
64528: LD_ADDR_VAR 0 4
64532: PUSH
64533: LD_INT 0
64535: ST_TO_ADDR
// oil := 0 ;
64536: LD_ADDR_VAR 0 5
64540: PUSH
64541: LD_INT 0
64543: ST_TO_ADDR
// sib := 0 ;
64544: LD_ADDR_VAR 0 6
64548: PUSH
64549: LD_INT 0
64551: ST_TO_ADDR
// if bases then
64552: LD_VAR 0 9
64556: IFFALSE 64662
// begin for j in bases do
64558: LD_ADDR_VAR 0 3
64562: PUSH
64563: LD_VAR 0 9
64567: PUSH
64568: FOR_IN
64569: IFFALSE 64660
// begin base := GetBase ( j ) ;
64571: LD_ADDR_VAR 0 8
64575: PUSH
64576: LD_VAR 0 3
64580: PPUSH
64581: CALL_OW 274
64585: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64586: LD_ADDR_VAR 0 4
64590: PUSH
64591: LD_VAR 0 4
64595: PUSH
64596: LD_VAR 0 8
64600: PPUSH
64601: LD_INT 1
64603: PPUSH
64604: CALL_OW 275
64608: PLUS
64609: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64610: LD_ADDR_VAR 0 5
64614: PUSH
64615: LD_VAR 0 5
64619: PUSH
64620: LD_VAR 0 8
64624: PPUSH
64625: LD_INT 2
64627: PPUSH
64628: CALL_OW 275
64632: PLUS
64633: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64634: LD_ADDR_VAR 0 6
64638: PUSH
64639: LD_VAR 0 6
64643: PUSH
64644: LD_VAR 0 8
64648: PPUSH
64649: LD_INT 3
64651: PPUSH
64652: CALL_OW 275
64656: PLUS
64657: ST_TO_ADDR
// end ;
64658: GO 64568
64660: POP
64661: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64662: LD_STRING setSpecText(
64664: PUSH
64665: LD_VAR 0 2
64669: STR
64670: PUSH
64671: LD_STRING ,
64673: STR
64674: PUSH
64675: LD_INT 2
64677: STR
64678: PUSH
64679: LD_STRING ,
64681: STR
64682: PUSH
64683: LD_VAR 0 4
64687: STR
64688: PUSH
64689: LD_STRING )
64691: STR
64692: PPUSH
64693: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64697: LD_STRING setSpecText(
64699: PUSH
64700: LD_VAR 0 2
64704: STR
64705: PUSH
64706: LD_STRING ,
64708: STR
64709: PUSH
64710: LD_INT 3
64712: STR
64713: PUSH
64714: LD_STRING ,
64716: STR
64717: PUSH
64718: LD_VAR 0 5
64722: STR
64723: PUSH
64724: LD_STRING )
64726: STR
64727: PPUSH
64728: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64732: LD_STRING setSpecText(
64734: PUSH
64735: LD_VAR 0 2
64739: STR
64740: PUSH
64741: LD_STRING ,
64743: STR
64744: PUSH
64745: LD_INT 4
64747: STR
64748: PUSH
64749: LD_STRING ,
64751: STR
64752: PUSH
64753: LD_VAR 0 6
64757: STR
64758: PUSH
64759: LD_STRING )
64761: STR
64762: PPUSH
64763: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64767: LD_STRING setSpecText(
64769: PUSH
64770: LD_VAR 0 2
64774: STR
64775: PUSH
64776: LD_STRING ,
64778: STR
64779: PUSH
64780: LD_INT 5
64782: STR
64783: PUSH
64784: LD_STRING ,
64786: STR
64787: PUSH
64788: LD_VAR 0 7
64792: STR
64793: PUSH
64794: LD_STRING )
64796: STR
64797: PPUSH
64798: CALL_OW 559
// end ; end ;
64802: GO 64418
64804: POP
64805: POP
// end ;
64806: LD_VAR 0 1
64810: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64811: LD_INT 2
64813: PUSH
64814: LD_INT 30
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 30
64826: PUSH
64827: LD_INT 1
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: PPUSH
64839: CALL_OW 69
64843: IFFALSE 64853
64845: GO 64847
64847: DISABLE
// begin enable ;
64848: ENABLE
// UpdateSpectatorBar ;
64849: CALL 64394 0 0
// end ;
64853: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64854: LD_INT 0
64856: PPUSH
// end ;
64857: LD_VAR 0 12
64861: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64862: LD_INT 0
64864: PPUSH
64865: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64866: LD_VAR 0 1
64870: NOT
64871: IFTRUE 64890
64873: PUSH
64874: LD_VAR 0 2
64878: PPUSH
64879: LD_VAR 0 3
64883: PPUSH
64884: CALL_OW 488
64888: NOT
64889: OR
64890: IFTRUE 64925
64892: PUSH
64893: LD_VAR 0 1
64897: PPUSH
64898: CALL_OW 266
64902: PUSH
64903: LD_INT 3
64905: NONEQUAL
64906: IFFALSE 64924
64908: PUSH
64909: LD_VAR 0 1
64913: PPUSH
64914: CALL_OW 247
64918: PUSH
64919: LD_INT 1
64921: EQUAL
64922: NOT
64923: AND
64924: OR
64925: IFFALSE 64929
// exit ;
64927: GO 65211
// if GetType ( factory ) = unit_human then
64929: LD_VAR 0 1
64933: PPUSH
64934: CALL_OW 247
64938: PUSH
64939: LD_INT 1
64941: EQUAL
64942: IFFALSE 64959
// factory := IsInUnit ( factory ) ;
64944: LD_ADDR_VAR 0 1
64948: PUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: CALL_OW 310
64958: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64959: LD_VAR 0 1
64963: PPUSH
64964: CALL_OW 266
64968: PUSH
64969: LD_INT 3
64971: NONEQUAL
64972: IFFALSE 64976
// exit ;
64974: GO 65211
// for i := 1 to Count ( factoryWaypoints ) do
64976: LD_ADDR_VAR 0 5
64980: PUSH
64981: DOUBLE
64982: LD_INT 1
64984: DEC
64985: ST_TO_ADDR
64986: LD_EXP 63
64990: PPUSH
64991: CALL 5966 0 1
64995: PUSH
64996: FOR_TO
64997: IFFALSE 65159
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64999: LD_VAR 0 2
65003: PPUSH
65004: LD_VAR 0 3
65008: PPUSH
65009: CALL_OW 428
65013: PUSH
65014: LD_EXP 63
65018: PUSH
65019: LD_VAR 0 5
65023: ARRAY
65024: PUSH
65025: LD_INT 2
65027: ARRAY
65028: EQUAL
65029: IFFALSE 65061
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65031: LD_ADDR_EXP 63
65035: PUSH
65036: LD_EXP 63
65040: PPUSH
65041: LD_VAR 0 5
65045: PPUSH
65046: CALL_OW 3
65050: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65051: CALL 65216 0 0
// exit ;
65055: POP
65056: POP
65057: GO 65211
// end else
65059: GO 65157
// if factory = factoryWaypoints [ i ] [ 2 ] then
65061: LD_VAR 0 1
65065: PUSH
65066: LD_EXP 63
65070: PUSH
65071: LD_VAR 0 5
65075: ARRAY
65076: PUSH
65077: LD_INT 2
65079: ARRAY
65080: EQUAL
65081: IFFALSE 65157
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65083: LD_ADDR_EXP 63
65087: PUSH
65088: LD_EXP 63
65092: PPUSH
65093: LD_VAR 0 5
65097: PPUSH
65098: CALL_OW 3
65102: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65103: LD_ADDR_EXP 63
65107: PUSH
65108: LD_EXP 63
65112: PPUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: CALL_OW 255
65122: PUSH
65123: LD_VAR 0 1
65127: PUSH
65128: LD_VAR 0 2
65132: PUSH
65133: LD_VAR 0 3
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: PPUSH
65144: CALL 41942 0 2
65148: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65149: CALL 65216 0 0
// exit ;
65153: POP
65154: POP
65155: GO 65211
// end ; end ;
65157: GO 64996
65159: POP
65160: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65161: LD_ADDR_EXP 63
65165: PUSH
65166: LD_EXP 63
65170: PPUSH
65171: LD_VAR 0 1
65175: PPUSH
65176: CALL_OW 255
65180: PUSH
65181: LD_VAR 0 1
65185: PUSH
65186: LD_VAR 0 2
65190: PUSH
65191: LD_VAR 0 3
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: PPUSH
65202: CALL 41942 0 2
65206: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65207: CALL 65216 0 0
// end ;
65211: LD_VAR 0 4
65215: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65216: LD_INT 0
65218: PPUSH
65219: PPUSH
65220: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65221: LD_STRING resetFactoryWaypoint();
65223: PPUSH
65224: CALL_OW 559
// if factoryWaypoints then
65228: LD_EXP 63
65232: IFFALSE 65353
// begin list := factoryWaypoints ;
65234: LD_ADDR_VAR 0 3
65238: PUSH
65239: LD_EXP 63
65243: ST_TO_ADDR
// for i := 1 to list do
65244: LD_ADDR_VAR 0 2
65248: PUSH
65249: DOUBLE
65250: LD_INT 1
65252: DEC
65253: ST_TO_ADDR
65254: LD_VAR 0 3
65258: PUSH
65259: FOR_TO
65260: IFFALSE 65351
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65262: LD_STRING setFactoryWaypointXY(
65264: PUSH
65265: LD_VAR 0 3
65269: PUSH
65270: LD_VAR 0 2
65274: ARRAY
65275: PUSH
65276: LD_INT 1
65278: ARRAY
65279: STR
65280: PUSH
65281: LD_STRING ,
65283: STR
65284: PUSH
65285: LD_VAR 0 3
65289: PUSH
65290: LD_VAR 0 2
65294: ARRAY
65295: PUSH
65296: LD_INT 2
65298: ARRAY
65299: STR
65300: PUSH
65301: LD_STRING ,
65303: STR
65304: PUSH
65305: LD_VAR 0 3
65309: PUSH
65310: LD_VAR 0 2
65314: ARRAY
65315: PUSH
65316: LD_INT 3
65318: ARRAY
65319: STR
65320: PUSH
65321: LD_STRING ,
65323: STR
65324: PUSH
65325: LD_VAR 0 3
65329: PUSH
65330: LD_VAR 0 2
65334: ARRAY
65335: PUSH
65336: LD_INT 4
65338: ARRAY
65339: STR
65340: PUSH
65341: LD_STRING )
65343: STR
65344: PPUSH
65345: CALL_OW 559
65349: GO 65259
65351: POP
65352: POP
// end ; end ;
65353: LD_VAR 0 1
65357: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65358: LD_INT 0
65360: PPUSH
// if HexInfo ( x , y ) = warehouse then
65361: LD_VAR 0 2
65365: PPUSH
65366: LD_VAR 0 3
65370: PPUSH
65371: CALL_OW 428
65375: PUSH
65376: LD_VAR 0 1
65380: EQUAL
65381: IFFALSE 65408
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65383: LD_ADDR_EXP 65
65387: PUSH
65388: LD_EXP 65
65392: PPUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: LD_INT 0
65400: PPUSH
65401: CALL_OW 1
65405: ST_TO_ADDR
65406: GO 65459
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65408: LD_ADDR_EXP 65
65412: PUSH
65413: LD_EXP 65
65417: PPUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: LD_VAR 0 1
65427: PPUSH
65428: CALL_OW 255
65432: PUSH
65433: LD_VAR 0 1
65437: PUSH
65438: LD_VAR 0 2
65442: PUSH
65443: LD_VAR 0 3
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: PPUSH
65454: CALL_OW 1
65458: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65459: CALL 65468 0 0
// end ;
65463: LD_VAR 0 4
65467: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65468: LD_INT 0
65470: PPUSH
65471: PPUSH
65472: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65473: LD_STRING resetWarehouseGatheringPoints();
65475: PPUSH
65476: CALL_OW 559
// if warehouseGatheringPoints then
65480: LD_EXP 65
65484: IFFALSE 65610
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65486: LD_ADDR_VAR 0 3
65490: PUSH
65491: LD_EXP 65
65495: PPUSH
65496: CALL 45876 0 1
65500: ST_TO_ADDR
// for i := 1 to list do
65501: LD_ADDR_VAR 0 2
65505: PUSH
65506: DOUBLE
65507: LD_INT 1
65509: DEC
65510: ST_TO_ADDR
65511: LD_VAR 0 3
65515: PUSH
65516: FOR_TO
65517: IFFALSE 65608
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65519: LD_STRING setWarehouseGatheringPointXY(
65521: PUSH
65522: LD_VAR 0 3
65526: PUSH
65527: LD_VAR 0 2
65531: ARRAY
65532: PUSH
65533: LD_INT 1
65535: ARRAY
65536: STR
65537: PUSH
65538: LD_STRING ,
65540: STR
65541: PUSH
65542: LD_VAR 0 3
65546: PUSH
65547: LD_VAR 0 2
65551: ARRAY
65552: PUSH
65553: LD_INT 2
65555: ARRAY
65556: STR
65557: PUSH
65558: LD_STRING ,
65560: STR
65561: PUSH
65562: LD_VAR 0 3
65566: PUSH
65567: LD_VAR 0 2
65571: ARRAY
65572: PUSH
65573: LD_INT 3
65575: ARRAY
65576: STR
65577: PUSH
65578: LD_STRING ,
65580: STR
65581: PUSH
65582: LD_VAR 0 3
65586: PUSH
65587: LD_VAR 0 2
65591: ARRAY
65592: PUSH
65593: LD_INT 4
65595: ARRAY
65596: STR
65597: PUSH
65598: LD_STRING )
65600: STR
65601: PPUSH
65602: CALL_OW 559
65606: GO 65516
65608: POP
65609: POP
// end ; end ;
65610: LD_VAR 0 1
65614: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65615: LD_INT 0
65617: PPUSH
65618: PPUSH
// if not mpSidePositions then
65619: LD_EXP 9
65623: NOT
65624: IFFALSE 65628
// exit ;
65626: GO 65699
// result :=  ;
65628: LD_ADDR_VAR 0 1
65632: PUSH
65633: LD_STRING 
65635: ST_TO_ADDR
// for i := 1 to 8 do
65636: LD_ADDR_VAR 0 2
65640: PUSH
65641: DOUBLE
65642: LD_INT 1
65644: DEC
65645: ST_TO_ADDR
65646: LD_INT 8
65648: PUSH
65649: FOR_TO
65650: IFFALSE 65680
// begin result := result & mpSidePositions [ i ] & ; ;
65652: LD_ADDR_VAR 0 1
65656: PUSH
65657: LD_VAR 0 1
65661: PUSH
65662: LD_EXP 9
65666: PUSH
65667: LD_VAR 0 2
65671: ARRAY
65672: STR
65673: PUSH
65674: LD_STRING ;
65676: STR
65677: ST_TO_ADDR
// end ;
65678: GO 65649
65680: POP
65681: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65682: LD_STRING setMultiplayerRealPosition("
65684: PUSH
65685: LD_VAR 0 1
65689: STR
65690: PUSH
65691: LD_STRING ");
65693: STR
65694: PPUSH
65695: CALL_OW 559
// end ; end_of_file
65699: LD_VAR 0 1
65703: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
65704: LD_EXP 41
65708: IFFALSE 65751
65710: GO 65712
65712: DISABLE
65713: LD_INT 0
65715: PPUSH
// begin for i := 1 to 8 do
65716: LD_ADDR_VAR 0 1
65720: PUSH
65721: DOUBLE
65722: LD_INT 1
65724: DEC
65725: ST_TO_ADDR
65726: LD_INT 8
65728: PUSH
65729: FOR_TO
65730: IFFALSE 65749
// SetRestrict ( b_depot , i , state_disabled ) ;
65732: LD_INT 0
65734: PPUSH
65735: LD_VAR 0 1
65739: PPUSH
65740: LD_INT 0
65742: PPUSH
65743: CALL_OW 324
65747: GO 65729
65749: POP
65750: POP
// end ;
65751: PPOPN 1
65753: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65754: LD_EXP 41
65758: IFFALSE 65766
65760: PUSH
65761: CALL 65976 0 0
65765: AND
65766: IFFALSE 65774
65768: PUSH
65769: LD_OWVAR 4
65773: AND
65774: IFFALSE 65973
65776: GO 65778
65778: DISABLE
65779: LD_INT 0
65781: PPUSH
65782: PPUSH
// begin canWin := false ;
65783: LD_ADDR_VAR 0 2
65787: PUSH
65788: LD_INT 0
65790: ST_TO_ADDR
// if not HasPower ( your_side ) then
65791: LD_OWVAR 2
65795: PPUSH
65796: CALL 66018 0 1
65800: NOT
65801: IFFALSE 65812
// begin Multiplayer_Loose_Message ;
65803: CALL_OW 521
// enable ( mpLose ) ;
65807: LD_INT 102
65809: ENABLE_MARKED
// end else
65810: GO 65973
// begin canWin := true ;
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_INT 1
65819: ST_TO_ADDR
// for i := 1 to 8 do
65820: LD_ADDR_VAR 0 1
65824: PUSH
65825: DOUBLE
65826: LD_INT 1
65828: DEC
65829: ST_TO_ADDR
65830: LD_INT 8
65832: PUSH
65833: FOR_TO
65834: IFFALSE 65959
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65836: LD_EXP 9
65840: PUSH
65841: LD_VAR 0 1
65845: ARRAY
65846: IFFALSE 65859
65848: PUSH
65849: LD_VAR 0 1
65853: PPUSH
65854: CALL_OW 108
65858: AND
65859: IFFALSE 65873
65861: PUSH
65862: LD_VAR 0 1
65866: PUSH
65867: LD_OWVAR 2
65871: NONEQUAL
65872: AND
65873: IFFALSE 65957
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65875: LD_EXP 10
65879: PUSH
65880: LD_VAR 0 1
65884: ARRAY
65885: NOT
65886: IFTRUE 65934
65888: PUSH
65889: LD_EXP 10
65893: PUSH
65894: LD_VAR 0 1
65898: ARRAY
65899: PUSH
65900: LD_EXP 10
65904: PUSH
65905: LD_OWVAR 2
65909: ARRAY
65910: NONEQUAL
65911: IFFALSE 65933
65913: PUSH
65914: LD_OWVAR 2
65918: PPUSH
65919: LD_VAR 0 1
65923: PPUSH
65924: CALL_OW 81
65928: PUSH
65929: LD_INT 1
65931: NONEQUAL
65932: AND
65933: OR
65934: IFFALSE 65957
// if HasPower ( i ) then
65936: LD_VAR 0 1
65940: PPUSH
65941: CALL 66018 0 1
65945: IFFALSE 65957
// begin canWin := false ;
65947: LD_ADDR_VAR 0 2
65951: PUSH
65952: LD_INT 0
65954: ST_TO_ADDR
// break ;
65955: GO 65959
// end ;
65957: GO 65833
65959: POP
65960: POP
// if canWin then
65961: LD_VAR 0 2
65965: IFFALSE 65972
// enable ( mpWin ) else
65967: LD_INT 101
65969: ENABLE_MARKED
65970: GO 65973
// enable ;
65972: ENABLE
// end ; end ;
65973: PPOPN 2
65975: END
// function CanWinLoose ; begin
65976: LD_INT 0
65978: PPUSH
// result := true ;
65979: LD_ADDR_VAR 0 1
65983: PUSH
65984: LD_INT 1
65986: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65987: CALL_OW 531
65991: IFFALSE 66003
65993: PUSH
65994: CALL_OW 519
65998: PUSH
65999: LD_INT 1
66001: GREATER
66002: AND
66003: IFFALSE 66013
// result := false ;
66005: LD_ADDR_VAR 0 1
66009: PUSH
66010: LD_INT 0
66012: ST_TO_ADDR
// end ;
66013: LD_VAR 0 1
66017: RET
// function HasPower ( i ) ; begin
66018: LD_INT 0
66020: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
66021: LD_INT 22
66023: PUSH
66024: LD_VAR 0 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: LD_INT 30
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 30
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PPUSH
66065: CALL_OW 69
66069: NOT
66070: IFFALSE 66074
// exit ;
66072: GO 66139
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
66074: LD_ADDR_VAR 0 2
66078: PUSH
66079: LD_INT 22
66081: PUSH
66082: LD_VAR 0 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: LD_INT 21
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 33
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 33
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PPUSH
66134: CALL_OW 69
66138: ST_TO_ADDR
// end ;
66139: LD_VAR 0 2
66143: RET
