// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 47143 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 47527 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 8
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 3
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 4
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 2
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 7
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mpTeamGame := true ;
 824: LD_ADDR_EXP 13
 828: PUSH
 829: LD_INT 1
 831: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 832: LD_ADDR_EXP 31
 836: PUSH
 837: LD_INT 200
 839: PUSH
 840: LD_INT 230
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// end ;
 847: LD_VAR 0 1
 851: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 852: LD_INT 0
 854: PPUSH
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
 860: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 861: LD_ADDR_EXP 21
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: LD_INT 5
 880: PUSH
 881: LD_INT 6
 883: PUSH
 884: LD_INT 7
 886: PUSH
 887: LD_INT 8
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 900: LD_ADDR_EXP 20
 904: PUSH
 905: LD_INT 10
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: LD_INT 12
 913: PUSH
 914: LD_INT 13
 916: PUSH
 917: LD_INT 14
 919: PUSH
 920: LD_INT 88
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_EXP 21
 935: UNION
 936: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 937: LD_VAR 0 1
 941: PUSH
 942: LD_INT 2
 944: EQUAL
 945: IFFALSE 957
// baseLevel := 1 else
 947: LD_ADDR_VAR 0 7
 951: PUSH
 952: LD_INT 1
 954: ST_TO_ADDR
 955: GO 971
// baseLevel := mpGameSettings [ 1 ] ;
 957: LD_ADDR_VAR 0 7
 961: PUSH
 962: LD_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ARRAY
 970: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 971: LD_ADDR_EXP 26
 975: PUSH
 976: LD_EXP 8
 980: PUSH
 981: LD_INT 2
 983: ARRAY
 984: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 985: LD_ADDR_EXP 27
 989: PUSH
 990: LD_EXP 8
 994: PUSH
 995: LD_INT 3
 997: ARRAY
 998: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 999: LD_ADDR_EXP 17
1003: PUSH
1004: LD_EXP 8
1008: PUSH
1009: LD_INT 4
1011: ARRAY
1012: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1013: LD_ADDR_EXP 29
1017: PUSH
1018: LD_EXP 8
1022: PUSH
1023: LD_INT 5
1025: ARRAY
1026: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1027: LD_ADDR_VAR 0 5
1031: PUSH
1032: LD_EXP 8
1036: PUSH
1037: LD_INT 6
1039: ARRAY
1040: PUSH
1041: LD_INT 0
1043: GREATER
1044: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1045: LD_ADDR_VAR 0 6
1049: PUSH
1050: LD_EXP 8
1054: PUSH
1055: LD_INT 7
1057: ARRAY
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: ST_TO_ADDR
// kingCamArea := 0 ;
1063: LD_ADDR_EXP 2
1067: PUSH
1068: LD_INT 0
1070: ST_TO_ADDR
// kingArea := 0 ;
1071: LD_ADDR_EXP 1
1075: PUSH
1076: LD_INT 0
1078: ST_TO_ADDR
// if gameType = GameTypeKing then
1079: LD_VAR 0 1
1083: PUSH
1084: LD_INT 3
1086: EQUAL
1087: IFFALSE 1127
// begin mpKingArea := 0 ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_INT 0
1096: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1097: LD_ADDR_EXP 37
1101: PUSH
1102: LD_EXP 8
1106: PUSH
1107: LD_INT 8
1109: ARRAY
1110: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1111: LD_ADDR_EXP 39
1115: PUSH
1116: LD_EXP 8
1120: PUSH
1121: LD_INT 10
1123: ARRAY
1124: ST_TO_ADDR
// end else
1125: GO 1151
// begin mpKingArea := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// mpPoints := 0 ;
1135: LD_ADDR_EXP 37
1139: PUSH
1140: LD_INT 0
1142: ST_TO_ADDR
// mpEmissions := 0 ;
1143: LD_ADDR_EXP 39
1147: PUSH
1148: LD_INT 0
1150: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1151: LD_EXP 8
1155: PUSH
1156: LD_INT 9
1158: ARRAY
1159: IFFALSE 1291
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1161: LD_ADDR_EXP 38
1165: PUSH
1166: LD_INT 1
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 2
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 3
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 12
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: LD_INT 24
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_INT 12
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: LD_INT 23
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 21
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: LD_INT 1
1254: PUSH
1255: LD_INT 42
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 21
1266: PUSH
1267: LD_INT 1
1269: PUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 42
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1291: LD_ADDR_EXP 18
1295: PUSH
1296: LD_EXP 8
1300: PUSH
1301: LD_INT 11
1303: ARRAY
1304: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1305: LD_ADDR_EXP 24
1309: PUSH
1310: LD_EXP 8
1314: PUSH
1315: LD_INT 12
1317: ARRAY
1318: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_EXP 8
1328: PUSH
1329: LD_INT 13
1331: ARRAY
1332: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1333: LD_ADDR_EXP 35
1337: PUSH
1338: LD_EXP 8
1342: PUSH
1343: LD_INT 14
1345: ARRAY
1346: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_EXP 8
1356: PUSH
1357: LD_INT 15
1359: ARRAY
1360: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1361: LD_ADDR_EXP 30
1365: PUSH
1366: LD_EXP 8
1370: PUSH
1371: LD_INT 18
1373: ARRAY
1374: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1375: LD_ADDR_EXP 3
1379: PUSH
1380: LD_EXP 8
1384: PUSH
1385: LD_INT 20
1387: ARRAY
1388: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1389: LD_ADDR_EXP 22
1393: PUSH
1394: LD_EXP 8
1398: PUSH
1399: LD_INT 21
1401: ARRAY
1402: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1403: LD_ADDR_EXP 33
1407: PUSH
1408: LD_INT 15
1410: PUSH
1411: LD_INT 16
1413: PUSH
1414: LD_INT 17
1416: PUSH
1417: LD_INT 18
1419: PUSH
1420: LD_INT 19
1422: PUSH
1423: LD_INT 20
1425: PUSH
1426: LD_INT 21
1428: PUSH
1429: LD_INT 22
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1442: LD_ADDR_VAR 0 8
1446: PUSH
1447: LD_INT 23
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 46508 0 2
1457: PUSH
1458: LD_INT 24
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL 46508 0 2
1468: PUSH
1469: LD_INT 25
1471: PPUSH
1472: LD_INT 3
1474: PPUSH
1475: CALL 46508 0 2
1479: PUSH
1480: LD_INT 26
1482: PPUSH
1483: LD_INT 4
1485: PPUSH
1486: CALL 46508 0 2
1490: PUSH
1491: LD_INT 27
1493: PPUSH
1494: LD_INT 5
1496: PPUSH
1497: CALL 46508 0 2
1501: PUSH
1502: LD_INT 28
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL 46508 0 2
1512: PUSH
1513: LD_INT 29
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL 46508 0 2
1523: PUSH
1524: LD_INT 30
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: CALL 46508 0 2
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1545: LD_ADDR_VAR 0 3
1549: PUSH
1550: DOUBLE
1551: LD_INT 1
1553: DEC
1554: ST_TO_ADDR
1555: LD_VAR 0 8
1559: PPUSH
1560: CALL 5823 0 1
1564: PUSH
1565: FOR_TO
1566: IFFALSE 1670
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1568: LD_ADDR_EXP 23
1572: PUSH
1573: LD_EXP 23
1577: PPUSH
1578: LD_VAR 0 3
1582: PPUSH
1583: LD_VAR 0 8
1587: PUSH
1588: LD_VAR 0 3
1592: ARRAY
1593: PUSH
1594: LD_INT 1
1596: ARRAY
1597: PPUSH
1598: LD_VAR 0 8
1602: PUSH
1603: LD_VAR 0 3
1607: ARRAY
1608: PUSH
1609: LD_INT 3
1611: ARRAY
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: CALL_OW 272
1620: PUSH
1621: LD_VAR 0 8
1625: PUSH
1626: LD_VAR 0 3
1630: ARRAY
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: PPUSH
1636: LD_VAR 0 8
1640: PUSH
1641: LD_VAR 0 3
1645: ARRAY
1646: PUSH
1647: LD_INT 3
1649: ARRAY
1650: PPUSH
1651: LD_INT 10
1653: PPUSH
1654: CALL_OW 273
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 1
1667: ST_TO_ADDR
1668: GO 1565
1670: POP
1671: POP
// if hasOil then
1672: LD_VAR 0 5
1676: IFFALSE 1926
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1678: LD_ADDR_VAR 0 4
1682: PUSH
1683: LD_EXP 8
1687: PUSH
1688: LD_INT 6
1690: ARRAY
1691: PUSH
1692: LD_INT 2
1694: EQUAL
1695: ST_TO_ADDR
// if all then
1696: LD_VAR 0 4
1700: IFFALSE 1823
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_INT 31
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 46341 0 2
1719: PUSH
1720: LD_INT 33
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 46341 0 2
1732: PUSH
1733: LD_INT 35
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 46341 0 2
1745: PUSH
1746: LD_INT 37
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 46341 0 2
1758: PUSH
1759: LD_INT 39
1761: PPUSH
1762: LD_VAR 0 4
1766: PPUSH
1767: CALL 46341 0 2
1771: PUSH
1772: LD_INT 41
1774: PPUSH
1775: LD_VAR 0 4
1779: PPUSH
1780: CALL 46341 0 2
1784: PUSH
1785: LD_INT 43
1787: PPUSH
1788: LD_VAR 0 4
1792: PPUSH
1793: CALL 46341 0 2
1797: PUSH
1798: LD_INT 45
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 46341 0 2
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: ST_TO_ADDR
// end else
1821: GO 1926
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1823: LD_ADDR_EXP 14
1827: PUSH
1828: LD_INT 72
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL 46341 0 2
1838: PUSH
1839: LD_INT 74
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: CALL 46341 0 2
1849: PUSH
1850: LD_INT 76
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL 46341 0 2
1860: PUSH
1861: LD_INT 78
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL 46341 0 2
1871: PUSH
1872: LD_INT 80
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: CALL 46341 0 2
1882: PUSH
1883: LD_INT 82
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: CALL 46341 0 2
1893: PUSH
1894: LD_INT 84
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: CALL 46341 0 2
1904: PUSH
1905: LD_INT 86
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 46341 0 2
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// end ; end ; if hasSib then
1926: LD_VAR 0 6
1930: IFFALSE 2180
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_EXP 8
1941: PUSH
1942: LD_INT 7
1944: ARRAY
1945: PUSH
1946: LD_INT 2
1948: EQUAL
1949: ST_TO_ADDR
// if all then
1950: LD_VAR 0 4
1954: IFFALSE 2077
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1956: LD_ADDR_EXP 15
1960: PUSH
1961: LD_INT 32
1963: PPUSH
1964: LD_VAR 0 4
1968: PPUSH
1969: CALL 46341 0 2
1973: PUSH
1974: LD_INT 34
1976: PPUSH
1977: LD_VAR 0 4
1981: PPUSH
1982: CALL 46341 0 2
1986: PUSH
1987: LD_INT 36
1989: PPUSH
1990: LD_VAR 0 4
1994: PPUSH
1995: CALL 46341 0 2
1999: PUSH
2000: LD_INT 38
2002: PPUSH
2003: LD_VAR 0 4
2007: PPUSH
2008: CALL 46341 0 2
2012: PUSH
2013: LD_INT 40
2015: PPUSH
2016: LD_VAR 0 4
2020: PPUSH
2021: CALL 46341 0 2
2025: PUSH
2026: LD_INT 42
2028: PPUSH
2029: LD_VAR 0 4
2033: PPUSH
2034: CALL 46341 0 2
2038: PUSH
2039: LD_INT 44
2041: PPUSH
2042: LD_VAR 0 4
2046: PPUSH
2047: CALL 46341 0 2
2051: PUSH
2052: LD_INT 46
2054: PPUSH
2055: LD_VAR 0 4
2059: PPUSH
2060: CALL 46341 0 2
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: ST_TO_ADDR
// end else
2075: GO 2180
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2077: LD_ADDR_EXP 15
2081: PUSH
2082: LD_INT 73
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL 46341 0 2
2092: PUSH
2093: LD_INT 75
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL 46341 0 2
2103: PUSH
2104: LD_INT 77
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL 46341 0 2
2114: PUSH
2115: LD_INT 79
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 46341 0 2
2125: PUSH
2126: LD_INT 81
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL 46341 0 2
2136: PUSH
2137: LD_INT 83
2139: PPUSH
2140: LD_INT 1
2142: PPUSH
2143: CALL 46341 0 2
2147: PUSH
2148: LD_INT 85
2150: PPUSH
2151: LD_INT 1
2153: PPUSH
2154: CALL 46341 0 2
2158: PUSH
2159: LD_INT 87
2161: PPUSH
2162: LD_INT 1
2164: PPUSH
2165: CALL 46341 0 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2180: LD_VAR 0 7
2184: PUSH
2185: LD_INT 1
2187: GREATEREQUAL
2188: IFFALSE 2200
// mpDepots := startPos ;
2190: LD_ADDR_EXP 16
2194: PUSH
2195: LD_VAR 0 8
2199: ST_TO_ADDR
// if baseLevel >= 2 then
2200: LD_VAR 0 7
2204: PUSH
2205: LD_INT 2
2207: GREATEREQUAL
2208: IFFALSE 2625
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 5 ) ] ] ;
2210: LD_ADDR_EXP 19
2214: PUSH
2215: LD_INT 31
2217: PUSH
2218: LD_INT 47
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL 46508 0 2
2228: ADD
2229: PUSH
2230: LD_INT 31
2232: PUSH
2233: LD_INT 48
2235: PPUSH
2236: LD_INT 5
2238: PPUSH
2239: CALL 46508 0 2
2243: ADD
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: LD_INT 49
2250: PPUSH
2251: LD_INT 5
2253: PPUSH
2254: CALL 46508 0 2
2258: ADD
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 31
2267: PUSH
2268: LD_INT 50
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL 46508 0 2
2278: ADD
2279: PUSH
2280: LD_INT 31
2282: PUSH
2283: LD_INT 51
2285: PPUSH
2286: LD_INT 2
2288: PPUSH
2289: CALL 46508 0 2
2293: ADD
2294: PUSH
2295: LD_INT 4
2297: PUSH
2298: LD_INT 52
2300: PPUSH
2301: LD_INT 5
2303: PPUSH
2304: CALL 46508 0 2
2308: ADD
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 31
2317: PUSH
2318: LD_INT 53
2320: PPUSH
2321: LD_INT 1
2323: PPUSH
2324: CALL 46508 0 2
2328: ADD
2329: PUSH
2330: LD_INT 31
2332: PUSH
2333: LD_INT 54
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL 46508 0 2
2343: ADD
2344: PUSH
2345: LD_INT 4
2347: PUSH
2348: LD_INT 55
2350: PPUSH
2351: LD_INT 5
2353: PPUSH
2354: CALL 46508 0 2
2358: ADD
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 31
2367: PUSH
2368: LD_INT 56
2370: PPUSH
2371: LD_INT 2
2373: PPUSH
2374: CALL 46508 0 2
2378: ADD
2379: PUSH
2380: LD_INT 31
2382: PUSH
2383: LD_INT 57
2385: PPUSH
2386: LD_INT 0
2388: PPUSH
2389: CALL 46508 0 2
2393: ADD
2394: PUSH
2395: LD_INT 4
2397: PUSH
2398: LD_INT 58
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL 46508 0 2
2408: ADD
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 31
2417: PUSH
2418: LD_INT 59
2420: PPUSH
2421: LD_INT 1
2423: PPUSH
2424: CALL 46508 0 2
2428: ADD
2429: PUSH
2430: LD_INT 31
2432: PUSH
2433: LD_INT 60
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: CALL 46508 0 2
2443: ADD
2444: PUSH
2445: LD_INT 4
2447: PUSH
2448: LD_INT 61
2450: PPUSH
2451: LD_INT 2
2453: PPUSH
2454: CALL 46508 0 2
2458: ADD
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 31
2467: PUSH
2468: LD_INT 62
2470: PPUSH
2471: LD_INT 5
2473: PPUSH
2474: CALL 46508 0 2
2478: ADD
2479: PUSH
2480: LD_INT 31
2482: PUSH
2483: LD_INT 63
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL 46508 0 2
2493: ADD
2494: PUSH
2495: LD_INT 4
2497: PUSH
2498: LD_INT 64
2500: PPUSH
2501: LD_INT 3
2503: PPUSH
2504: CALL 46508 0 2
2508: ADD
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 31
2517: PUSH
2518: LD_INT 65
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL 46508 0 2
2528: ADD
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: LD_INT 66
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL 46508 0 2
2543: ADD
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 2
2553: PPUSH
2554: CALL 46508 0 2
2558: ADD
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 31
2567: PUSH
2568: LD_INT 68
2570: PPUSH
2571: LD_INT 4
2573: PPUSH
2574: CALL 46508 0 2
2578: ADD
2579: PUSH
2580: LD_INT 31
2582: PUSH
2583: LD_INT 69
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: CALL 46508 0 2
2593: ADD
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL 46508 0 2
2608: ADD
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: ST_TO_ADDR
// end ; if mpTree then
2625: LD_EXP 3
2629: IFFALSE 2641
// SetAreaMapShow ( TreeArea , 1 ) ;
2631: LD_INT 71
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: CALL_OW 424
// end ;
2641: LD_VAR 0 2
2645: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2646: GO 2648
2648: DISABLE
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
2655: PPUSH
2656: PPUSH
2657: PPUSH
2658: PPUSH
// begin if not mpShipments then
2659: LD_EXP 29
2663: NOT
2664: IFFALSE 2668
// exit ;
2666: GO 3123
// case mpShipments of 1 :
2668: LD_EXP 29
2672: PUSH
2673: LD_INT 1
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2716
2681: POP
// begin time := 0 0$30 ;
2682: LD_ADDR_VAR 0 5
2686: PUSH
2687: LD_INT 1050
2689: ST_TO_ADDR
// normalTime := 0 0$30 ;
2690: LD_ADDR_VAR 0 6
2694: PUSH
2695: LD_INT 1050
2697: ST_TO_ADDR
// maxTime := 1 1$20 ;
2698: LD_ADDR_VAR 0 8
2702: PUSH
2703: LD_INT 2800
2705: ST_TO_ADDR
// delayTime := 0 0$5 ;
2706: LD_ADDR_VAR 0 7
2710: PUSH
2711: LD_INT 175
2713: ST_TO_ADDR
// end ; 2 :
2714: GO 2846
2716: LD_INT 2
2718: DOUBLE
2719: EQUAL
2720: IFTRUE 2724
2722: GO 2759
2724: POP
// begin time := 0 0$25 ;
2725: LD_ADDR_VAR 0 5
2729: PUSH
2730: LD_INT 875
2732: ST_TO_ADDR
// normalTime := 0 0$25 ;
2733: LD_ADDR_VAR 0 6
2737: PUSH
2738: LD_INT 875
2740: ST_TO_ADDR
// maxTime := 1 1$10 ;
2741: LD_ADDR_VAR 0 8
2745: PUSH
2746: LD_INT 2450
2748: ST_TO_ADDR
// delayTime := 0 0$4 ;
2749: LD_ADDR_VAR 0 7
2753: PUSH
2754: LD_INT 140
2756: ST_TO_ADDR
// end ; 3 :
2757: GO 2846
2759: LD_INT 3
2761: DOUBLE
2762: EQUAL
2763: IFTRUE 2767
2765: GO 2802
2767: POP
// begin time := 0 0$20 ;
2768: LD_ADDR_VAR 0 5
2772: PUSH
2773: LD_INT 700
2775: ST_TO_ADDR
// normalTime := 0 0$20 ;
2776: LD_ADDR_VAR 0 6
2780: PUSH
2781: LD_INT 700
2783: ST_TO_ADDR
// maxTime := 1 1$00 ;
2784: LD_ADDR_VAR 0 8
2788: PUSH
2789: LD_INT 2100
2791: ST_TO_ADDR
// delayTime := 0 0$3 ;
2792: LD_ADDR_VAR 0 7
2796: PUSH
2797: LD_INT 105
2799: ST_TO_ADDR
// end ; 4 :
2800: GO 2846
2802: LD_INT 4
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2845
2810: POP
// begin time := 0 0$15 ;
2811: LD_ADDR_VAR 0 5
2815: PUSH
2816: LD_INT 525
2818: ST_TO_ADDR
// normalTime := 0 0$15 ;
2819: LD_ADDR_VAR 0 6
2823: PUSH
2824: LD_INT 525
2826: ST_TO_ADDR
// maxTime := 0 0$55 ;
2827: LD_ADDR_VAR 0 8
2831: PUSH
2832: LD_INT 1925
2834: ST_TO_ADDR
// delayTime := 0 0$2 ;
2835: LD_ADDR_VAR 0 7
2839: PUSH
2840: LD_INT 70
2842: ST_TO_ADDR
// end ; end ;
2843: GO 2846
2845: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2846: LD_ADDR_VAR 0 4
2850: PUSH
2851: LD_INT 10
2853: PUSH
2854: LD_INT 11
2856: PUSH
2857: LD_INT 12
2859: PUSH
2860: LD_INT 13
2862: PUSH
2863: LD_INT 14
2865: PUSH
2866: LD_INT 88
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2877: LD_ADDR_VAR 0 3
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 4
2893: PUSH
2894: LD_INT 5
2896: PUSH
2897: LD_INT 6
2899: PUSH
2900: LD_INT 7
2902: PUSH
2903: LD_INT 8
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: ST_TO_ADDR
// for i := 1 to 8 do
2916: LD_ADDR_VAR 0 1
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 8
2928: PUSH
2929: FOR_TO
2930: IFFALSE 2977
// begin if not mpSidePositions [ i ] then
2932: LD_EXP 9
2936: PUSH
2937: LD_VAR 0 1
2941: ARRAY
2942: NOT
2943: IFFALSE 2947
// continue ;
2945: GO 2929
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: LD_VAR 0 4
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_EXP 9
2966: PUSH
2967: LD_VAR 0 1
2971: ARRAY
2972: ARRAY
2973: ADD
2974: ST_TO_ADDR
// end ;
2975: GO 2929
2977: POP
2978: POP
// x := 1 ;
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: LD_INT 1
2986: ST_TO_ADDR
// repeat wait ( time ) ;
2987: LD_VAR 0 5
2991: PPUSH
2992: CALL_OW 67
// x := Inc ( x ) ;
2996: LD_ADDR_VAR 0 2
3000: PUSH
3001: LD_VAR 0 2
3005: PPUSH
3006: CALL 43162 0 1
3010: ST_TO_ADDR
// if x > 5 then
3011: LD_VAR 0 2
3015: PUSH
3016: LD_INT 5
3018: GREATER
3019: IFFALSE 3029
// x := 1 ;
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: LD_INT 1
3028: ST_TO_ADDR
// for i in areas do
3029: LD_ADDR_VAR 0 1
3033: PUSH
3034: LD_VAR 0 4
3038: PUSH
3039: FOR_IN
3040: IFFALSE 3079
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 1
3049: PPUSH
3050: CALL_OW 287
3054: PUSH
3055: LD_INT 30
3057: LESS
3058: IFFALSE 3077
// begin CreateCratesArea ( x , i , true ) ;
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_VAR 0 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 55
// end ; end ;
3077: GO 3039
3079: POP
3080: POP
// time := time + delayTime ;
3081: LD_ADDR_VAR 0 5
3085: PUSH
3086: LD_VAR 0 5
3090: PUSH
3091: LD_VAR 0 7
3095: PLUS
3096: ST_TO_ADDR
// if time > maxTime then
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 8
3106: GREATER
3107: IFFALSE 3119
// time := normalTime ;
3109: LD_ADDR_VAR 0 5
3113: PUSH
3114: LD_VAR 0 6
3118: ST_TO_ADDR
// until false ;
3119: LD_INT 0
3121: IFFALSE 2987
// end ;
3123: PPOPN 8
3125: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus ;
3126: LD_EXP 3
3130: IFFALSE 3453
3132: GO 3134
3134: DISABLE
3135: LD_INT 0
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
// begin treeVisited := [ ] ;
3142: LD_ADDR_EXP 4
3146: PUSH
3147: EMPTY
3148: ST_TO_ADDR
// power := 1 ;
3149: LD_ADDR_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3157: LD_INT 35
3159: PPUSH
3160: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
3164: LD_OWVAR 1
3168: PUSH
3169: LD_INT 42000
3171: PUSH
3172: LD_EXP 3
3176: DIV
3177: PPUSH
3178: CALL_OW 574
3182: MOD
3183: PUSH
3184: LD_INT 0
3186: EQUAL
3187: IFFALSE 3204
// power := Inc ( power ) ;
3189: LD_ADDR_VAR 0 4
3193: PUSH
3194: LD_VAR 0 4
3198: PPUSH
3199: CALL 43162 0 1
3203: ST_TO_ADDR
// if power > 10 then
3204: LD_VAR 0 4
3208: PUSH
3209: LD_INT 10
3211: GREATER
3212: IFFALSE 3222
// power := 10 ;
3214: LD_ADDR_VAR 0 4
3218: PUSH
3219: LD_INT 10
3221: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: LD_INT 95
3229: PUSH
3230: LD_INT 71
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 21
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 3
3249: PUSH
3250: LD_INT 23
3252: PUSH
3253: LD_INT 0
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: PUSH
3274: LD_EXP 4
3278: DIFF
3279: ST_TO_ADDR
// if tmp then
3280: LD_VAR 0 2
3284: IFFALSE 3449
// begin for i in tmp do
3286: LD_ADDR_VAR 0 1
3290: PUSH
3291: LD_VAR 0 2
3295: PUSH
3296: FOR_IN
3297: IFFALSE 3447
// begin treeVisited := Join ( treeVisited , i ) ;
3299: LD_ADDR_EXP 4
3303: PUSH
3304: LD_EXP 4
3308: PPUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL 41789 0 2
3318: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
3319: LD_ADDR_VAR 0 5
3323: PUSH
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_VAR 0 1
3333: PUSH
3334: LD_INT 4
3336: MOD
3337: PUSH
3338: LD_INT 1
3340: PLUS
3341: PPUSH
3342: CALL_OW 259
3346: PUSH
3347: LD_VAR 0 4
3351: PLUS
3352: ST_TO_ADDR
// if bonus > 10 then
3353: LD_VAR 0 5
3357: PUSH
3358: LD_INT 10
3360: GREATER
3361: IFFALSE 3371
// bonus := 10 ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_INT 10
3370: ST_TO_ADDR
// skill := i mod 4 + 1 ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_VAR 0 1
3380: PUSH
3381: LD_INT 4
3383: MOD
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
3389: LD_VAR 0 1
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: LD_VAR 0 5
3403: PPUSH
3404: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
3408: LD_STRING displayTreeBonusDetails(
3410: PUSH
3411: LD_VAR 0 1
3415: STR
3416: PUSH
3417: LD_STRING ,
3419: STR
3420: PUSH
3421: LD_VAR 0 3
3425: STR
3426: PUSH
3427: LD_STRING ,
3429: STR
3430: PUSH
3431: LD_VAR 0 4
3435: STR
3436: PUSH
3437: LD_STRING )
3439: STR
3440: PPUSH
3441: CALL_OW 559
// end ;
3445: GO 3296
3447: POP
3448: POP
// end ; until false ;
3449: LD_INT 0
3451: IFFALSE 3157
// end ; end_of_file
3453: PPOPN 5
3455: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: CALL 56872 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3465: LD_VAR 0 1
3469: PPUSH
3470: CALL 52429 0 1
// end ;
3474: PPOPN 1
3476: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3477: LD_VAR 0 1
3481: PPUSH
3482: CALL 56889 0 1
// end ;
3486: PPOPN 1
3488: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3489: LD_VAR 0 1
3493: PPUSH
3494: CALL 53136 0 1
3498: PPOPN 1
3500: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_VAR 0 2
3510: PPUSH
3511: CALL 56930 0 2
3515: PPOPN 2
3517: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_VAR 0 2
3527: PPUSH
3528: LD_VAR 0 3
3532: PPUSH
3533: CALL 53189 0 3
3537: PPOPN 3
3539: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_VAR 0 2
3549: PPUSH
3550: LD_VAR 0 3
3554: PPUSH
3555: LD_VAR 0 4
3559: PPUSH
3560: LD_VAR 0 5
3564: PPUSH
3565: CALL 53828 0 5
3569: PPOPN 5
3571: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_VAR 0 2
3581: PPUSH
3582: LD_VAR 0 3
3586: PPUSH
3587: LD_VAR 0 4
3591: PPUSH
3592: CALL 53931 0 4
3596: PPOPN 4
3598: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
// if exist_mode then
3603: LD_VAR 0 2
3607: IFFALSE 3653
// begin unit := CreateCharacter ( prefix & ident ) ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_VAR 0 3
3618: PUSH
3619: LD_VAR 0 1
3623: STR
3624: PPUSH
3625: CALL_OW 34
3629: ST_TO_ADDR
// if unit then
3630: LD_VAR 0 5
3634: IFFALSE 3651
// DeleteCharacters ( prefix & ident ) ;
3636: LD_VAR 0 3
3640: PUSH
3641: LD_VAR 0 1
3645: STR
3646: PPUSH
3647: CALL_OW 40
// end else
3651: GO 3668
// unit := NewCharacter ( ident ) ;
3653: LD_ADDR_VAR 0 5
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: CALL_OW 25
3667: ST_TO_ADDR
// result := unit ;
3668: LD_ADDR_VAR 0 4
3672: PUSH
3673: LD_VAR 0 5
3677: ST_TO_ADDR
// end ;
3678: LD_VAR 0 4
3682: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3683: LD_INT 0
3685: PPUSH
3686: PPUSH
// if exist_mode then
3687: LD_VAR 0 2
3691: IFFALSE 3716
// unit := CreateCharacter ( prefix & ident ) else
3693: LD_ADDR_VAR 0 5
3697: PUSH
3698: LD_VAR 0 3
3702: PUSH
3703: LD_VAR 0 1
3707: STR
3708: PPUSH
3709: CALL_OW 34
3713: ST_TO_ADDR
3714: GO 3731
// unit := NewCharacter ( ident ) ;
3716: LD_ADDR_VAR 0 5
3720: PUSH
3721: LD_VAR 0 1
3725: PPUSH
3726: CALL_OW 25
3730: ST_TO_ADDR
// result := unit ;
3731: LD_ADDR_VAR 0 4
3735: PUSH
3736: LD_VAR 0 5
3740: ST_TO_ADDR
// end ;
3741: LD_VAR 0 4
3745: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3746: LD_INT 0
3748: PPUSH
3749: PPUSH
// if not side or not nation then
3750: LD_VAR 0 1
3754: NOT
3755: IFTRUE 3764
3757: PUSH
3758: LD_VAR 0 2
3762: NOT
3763: OR
3764: IFFALSE 3768
// exit ;
3766: GO 4562
// case nation of nation_american :
3768: LD_VAR 0 2
3772: PUSH
3773: LD_INT 1
3775: DOUBLE
3776: EQUAL
3777: IFTRUE 3781
3779: GO 4003
3781: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_INT 35
3789: PUSH
3790: LD_INT 45
3792: PUSH
3793: LD_INT 46
3795: PUSH
3796: LD_INT 47
3798: PUSH
3799: LD_INT 82
3801: PUSH
3802: LD_INT 83
3804: PUSH
3805: LD_INT 84
3807: PUSH
3808: LD_INT 85
3810: PUSH
3811: LD_INT 86
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: LD_INT 6
3822: PUSH
3823: LD_INT 15
3825: PUSH
3826: LD_INT 16
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: LD_INT 12
3834: PUSH
3835: LD_INT 13
3837: PUSH
3838: LD_INT 10
3840: PUSH
3841: LD_INT 14
3843: PUSH
3844: LD_INT 20
3846: PUSH
3847: LD_INT 21
3849: PUSH
3850: LD_INT 22
3852: PUSH
3853: LD_INT 25
3855: PUSH
3856: LD_INT 32
3858: PUSH
3859: LD_INT 27
3861: PUSH
3862: LD_INT 36
3864: PUSH
3865: LD_INT 69
3867: PUSH
3868: LD_INT 39
3870: PUSH
3871: LD_INT 34
3873: PUSH
3874: LD_INT 40
3876: PUSH
3877: LD_INT 48
3879: PUSH
3880: LD_INT 49
3882: PUSH
3883: LD_INT 50
3885: PUSH
3886: LD_INT 51
3888: PUSH
3889: LD_INT 52
3891: PUSH
3892: LD_INT 53
3894: PUSH
3895: LD_INT 54
3897: PUSH
3898: LD_INT 55
3900: PUSH
3901: LD_INT 56
3903: PUSH
3904: LD_INT 57
3906: PUSH
3907: LD_INT 58
3909: PUSH
3910: LD_INT 59
3912: PUSH
3913: LD_INT 60
3915: PUSH
3916: LD_INT 61
3918: PUSH
3919: LD_INT 62
3921: PUSH
3922: LD_INT 80
3924: PUSH
3925: LD_INT 82
3927: PUSH
3928: LD_INT 83
3930: PUSH
3931: LD_INT 84
3933: PUSH
3934: LD_INT 85
3936: PUSH
3937: LD_INT 86
3939: PUSH
3940: LD_INT 90
3942: PUSH
3943: LD_INT 93
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: ST_TO_ADDR
4001: GO 4484
4003: LD_INT 2
4005: DOUBLE
4006: EQUAL
4007: IFTRUE 4011
4009: GO 4245
4011: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: LD_INT 35
4019: PUSH
4020: LD_INT 45
4022: PUSH
4023: LD_INT 46
4025: PUSH
4026: LD_INT 47
4028: PUSH
4029: LD_INT 82
4031: PUSH
4032: LD_INT 83
4034: PUSH
4035: LD_INT 84
4037: PUSH
4038: LD_INT 85
4040: PUSH
4041: LD_INT 87
4043: PUSH
4044: LD_INT 70
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: LD_INT 11
4052: PUSH
4053: LD_INT 3
4055: PUSH
4056: LD_INT 4
4058: PUSH
4059: LD_INT 5
4061: PUSH
4062: LD_INT 6
4064: PUSH
4065: LD_INT 15
4067: PUSH
4068: LD_INT 18
4070: PUSH
4071: LD_INT 7
4073: PUSH
4074: LD_INT 17
4076: PUSH
4077: LD_INT 8
4079: PUSH
4080: LD_INT 20
4082: PUSH
4083: LD_INT 21
4085: PUSH
4086: LD_INT 22
4088: PUSH
4089: LD_INT 72
4091: PUSH
4092: LD_INT 26
4094: PUSH
4095: LD_INT 69
4097: PUSH
4098: LD_INT 39
4100: PUSH
4101: LD_INT 40
4103: PUSH
4104: LD_INT 41
4106: PUSH
4107: LD_INT 42
4109: PUSH
4110: LD_INT 43
4112: PUSH
4113: LD_INT 48
4115: PUSH
4116: LD_INT 49
4118: PUSH
4119: LD_INT 50
4121: PUSH
4122: LD_INT 51
4124: PUSH
4125: LD_INT 52
4127: PUSH
4128: LD_INT 53
4130: PUSH
4131: LD_INT 54
4133: PUSH
4134: LD_INT 55
4136: PUSH
4137: LD_INT 56
4139: PUSH
4140: LD_INT 60
4142: PUSH
4143: LD_INT 61
4145: PUSH
4146: LD_INT 62
4148: PUSH
4149: LD_INT 66
4151: PUSH
4152: LD_INT 67
4154: PUSH
4155: LD_INT 68
4157: PUSH
4158: LD_INT 81
4160: PUSH
4161: LD_INT 82
4163: PUSH
4164: LD_INT 83
4166: PUSH
4167: LD_INT 84
4169: PUSH
4170: LD_INT 85
4172: PUSH
4173: LD_INT 87
4175: PUSH
4176: LD_INT 88
4178: PUSH
4179: LD_INT 92
4181: PUSH
4182: LD_INT 94
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: ST_TO_ADDR
4243: GO 4484
4245: LD_INT 3
4247: DOUBLE
4248: EQUAL
4249: IFTRUE 4253
4251: GO 4483
4253: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
4254: LD_ADDR_VAR 0 4
4258: PUSH
4259: LD_INT 46
4261: PUSH
4262: LD_INT 47
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: LD_INT 2
4270: PUSH
4271: LD_INT 82
4273: PUSH
4274: LD_INT 83
4276: PUSH
4277: LD_INT 84
4279: PUSH
4280: LD_INT 85
4282: PUSH
4283: LD_INT 86
4285: PUSH
4286: LD_INT 11
4288: PUSH
4289: LD_INT 9
4291: PUSH
4292: LD_INT 20
4294: PUSH
4295: LD_INT 19
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 24
4303: PUSH
4304: LD_INT 22
4306: PUSH
4307: LD_INT 25
4309: PUSH
4310: LD_INT 28
4312: PUSH
4313: LD_INT 29
4315: PUSH
4316: LD_INT 30
4318: PUSH
4319: LD_INT 31
4321: PUSH
4322: LD_INT 37
4324: PUSH
4325: LD_INT 38
4327: PUSH
4328: LD_INT 32
4330: PUSH
4331: LD_INT 27
4333: PUSH
4334: LD_INT 33
4336: PUSH
4337: LD_INT 69
4339: PUSH
4340: LD_INT 39
4342: PUSH
4343: LD_INT 34
4345: PUSH
4346: LD_INT 40
4348: PUSH
4349: LD_INT 71
4351: PUSH
4352: LD_INT 23
4354: PUSH
4355: LD_INT 44
4357: PUSH
4358: LD_INT 48
4360: PUSH
4361: LD_INT 49
4363: PUSH
4364: LD_INT 50
4366: PUSH
4367: LD_INT 51
4369: PUSH
4370: LD_INT 52
4372: PUSH
4373: LD_INT 53
4375: PUSH
4376: LD_INT 54
4378: PUSH
4379: LD_INT 55
4381: PUSH
4382: LD_INT 56
4384: PUSH
4385: LD_INT 57
4387: PUSH
4388: LD_INT 58
4390: PUSH
4391: LD_INT 59
4393: PUSH
4394: LD_INT 63
4396: PUSH
4397: LD_INT 64
4399: PUSH
4400: LD_INT 65
4402: PUSH
4403: LD_INT 82
4405: PUSH
4406: LD_INT 83
4408: PUSH
4409: LD_INT 84
4411: PUSH
4412: LD_INT 85
4414: PUSH
4415: LD_INT 86
4417: PUSH
4418: LD_INT 89
4420: PUSH
4421: LD_INT 91
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
4481: GO 4484
4483: POP
// if state > - 1 and state < 3 then
4484: LD_VAR 0 3
4488: PUSH
4489: LD_INT 1
4491: NEG
4492: GREATER
4493: IFFALSE 4505
4495: PUSH
4496: LD_VAR 0 3
4500: PUSH
4501: LD_INT 3
4503: LESS
4504: AND
4505: IFFALSE 4562
// for i in result do
4507: LD_ADDR_VAR 0 5
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4560
// if GetTech ( i , side ) <> state then
4520: LD_VAR 0 5
4524: PPUSH
4525: LD_VAR 0 1
4529: PPUSH
4530: CALL_OW 321
4534: PUSH
4535: LD_VAR 0 3
4539: NONEQUAL
4540: IFFALSE 4558
// result := result diff i ;
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: LD_VAR 0 4
4551: PUSH
4552: LD_VAR 0 5
4556: DIFF
4557: ST_TO_ADDR
4558: GO 4517
4560: POP
4561: POP
// end ;
4562: LD_VAR 0 4
4566: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4567: LD_INT 0
4569: PPUSH
4570: PPUSH
4571: PPUSH
// result := true ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4580: LD_ADDR_VAR 0 5
4584: PUSH
4585: LD_VAR 0 2
4589: PPUSH
4590: CALL_OW 480
4594: ST_TO_ADDR
// if not tmp then
4595: LD_VAR 0 5
4599: NOT
4600: IFFALSE 4604
// exit ;
4602: GO 4653
// for i in tmp do
4604: LD_ADDR_VAR 0 4
4608: PUSH
4609: LD_VAR 0 5
4613: PUSH
4614: FOR_IN
4615: IFFALSE 4651
// if GetTech ( i , side ) <> state_researched then
4617: LD_VAR 0 4
4621: PPUSH
4622: LD_VAR 0 1
4626: PPUSH
4627: CALL_OW 321
4631: PUSH
4632: LD_INT 2
4634: NONEQUAL
4635: IFFALSE 4649
// begin result := false ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_INT 0
4644: ST_TO_ADDR
// exit ;
4645: POP
4646: POP
4647: GO 4653
// end ;
4649: GO 4614
4651: POP
4652: POP
// end ;
4653: LD_VAR 0 3
4657: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
4662: PPUSH
4663: PPUSH
4664: PPUSH
4665: PPUSH
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
4671: PPUSH
4672: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4673: LD_VAR 0 1
4677: NOT
4678: IFTRUE 4695
4680: PUSH
4681: LD_VAR 0 1
4685: PPUSH
4686: CALL_OW 257
4690: PUSH
4691: LD_INT 9
4693: NONEQUAL
4694: OR
4695: IFFALSE 4699
// exit ;
4697: GO 5278
// side := GetSide ( unit ) ;
4699: LD_ADDR_VAR 0 9
4703: PUSH
4704: LD_VAR 0 1
4708: PPUSH
4709: CALL_OW 255
4713: ST_TO_ADDR
// tech_space := tech_spacanom ;
4714: LD_ADDR_VAR 0 12
4718: PUSH
4719: LD_INT 29
4721: ST_TO_ADDR
// tech_time := tech_taurad ;
4722: LD_ADDR_VAR 0 13
4726: PUSH
4727: LD_INT 28
4729: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4730: LD_ADDR_VAR 0 11
4734: PUSH
4735: LD_VAR 0 1
4739: PPUSH
4740: CALL_OW 310
4744: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4745: LD_VAR 0 11
4749: PPUSH
4750: CALL_OW 247
4754: PUSH
4755: LD_INT 2
4757: EQUAL
4758: IFFALSE 4762
// exit ;
4760: GO 5278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4762: LD_ADDR_VAR 0 8
4766: PUSH
4767: LD_INT 81
4769: PUSH
4770: LD_VAR 0 9
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: LD_INT 21
4784: PUSH
4785: LD_INT 3
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 69
4804: ST_TO_ADDR
// if not tmp then
4805: LD_VAR 0 8
4809: NOT
4810: IFFALSE 4814
// exit ;
4812: GO 5278
// if in_unit then
4814: LD_VAR 0 11
4818: IFFALSE 4842
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4820: LD_ADDR_VAR 0 10
4824: PUSH
4825: LD_VAR 0 8
4829: PPUSH
4830: LD_VAR 0 11
4834: PPUSH
4835: CALL_OW 74
4839: ST_TO_ADDR
4840: GO 4862
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_VAR 0 8
4851: PPUSH
4852: LD_VAR 0 1
4856: PPUSH
4857: CALL_OW 74
4861: ST_TO_ADDR
// if not enemy then
4862: LD_VAR 0 10
4866: NOT
4867: IFFALSE 4871
// exit ;
4869: GO 5278
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4871: LD_VAR 0 11
4875: IFFALSE 4897
4877: PUSH
4878: LD_VAR 0 11
4882: PPUSH
4883: LD_VAR 0 10
4887: PPUSH
4888: CALL_OW 296
4892: PUSH
4893: LD_INT 13
4895: GREATER
4896: AND
4897: IFTRUE 4919
4899: PUSH
4900: LD_VAR 0 1
4904: PPUSH
4905: LD_VAR 0 10
4909: PPUSH
4910: CALL_OW 296
4914: PUSH
4915: LD_INT 12
4917: GREATER
4918: OR
4919: IFFALSE 4923
// exit ;
4921: GO 5278
// missile := [ 1 ] ;
4923: LD_ADDR_VAR 0 14
4927: PUSH
4928: LD_INT 1
4930: PUSH
4931: EMPTY
4932: LIST
4933: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4934: LD_VAR 0 9
4938: PPUSH
4939: LD_VAR 0 12
4943: PPUSH
4944: CALL_OW 325
4948: IFFALSE 4977
// missile := Replace ( missile , missile + 1 , 2 ) ;
4950: LD_ADDR_VAR 0 14
4954: PUSH
4955: LD_VAR 0 14
4959: PPUSH
4960: LD_VAR 0 14
4964: PUSH
4965: LD_INT 1
4967: PLUS
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: CALL_OW 1
4976: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4977: LD_VAR 0 9
4981: PPUSH
4982: LD_VAR 0 13
4986: PPUSH
4987: CALL_OW 325
4991: IFFALSE 5015
4993: PUSH
4994: LD_VAR 0 10
4998: PPUSH
4999: CALL_OW 255
5003: PPUSH
5004: LD_VAR 0 13
5008: PPUSH
5009: CALL_OW 325
5013: NOT
5014: AND
5015: IFFALSE 5044
// missile := Replace ( missile , missile + 1 , 3 ) ;
5017: LD_ADDR_VAR 0 14
5021: PUSH
5022: LD_VAR 0 14
5026: PPUSH
5027: LD_VAR 0 14
5031: PUSH
5032: LD_INT 1
5034: PLUS
5035: PPUSH
5036: LD_INT 3
5038: PPUSH
5039: CALL_OW 1
5043: ST_TO_ADDR
// if missile < 2 then
5044: LD_VAR 0 14
5048: PUSH
5049: LD_INT 2
5051: LESS
5052: IFFALSE 5056
// exit ;
5054: GO 5278
// x := GetX ( enemy ) ;
5056: LD_ADDR_VAR 0 4
5060: PUSH
5061: LD_VAR 0 10
5065: PPUSH
5066: CALL_OW 250
5070: ST_TO_ADDR
// y := GetY ( enemy ) ;
5071: LD_ADDR_VAR 0 5
5075: PUSH
5076: LD_VAR 0 10
5080: PPUSH
5081: CALL_OW 251
5085: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5086: LD_ADDR_VAR 0 6
5090: PUSH
5091: LD_VAR 0 4
5095: PUSH
5096: LD_INT 1
5098: NEG
5099: PPUSH
5100: LD_INT 1
5102: PPUSH
5103: CALL_OW 12
5107: PLUS
5108: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5109: LD_ADDR_VAR 0 7
5113: PUSH
5114: LD_VAR 0 5
5118: PUSH
5119: LD_INT 1
5121: NEG
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL_OW 12
5130: PLUS
5131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5132: LD_VAR 0 6
5136: PPUSH
5137: LD_VAR 0 7
5141: PPUSH
5142: CALL_OW 488
5146: NOT
5147: IFFALSE 5169
// begin _x := x ;
5149: LD_ADDR_VAR 0 6
5153: PUSH
5154: LD_VAR 0 4
5158: ST_TO_ADDR
// _y := y ;
5159: LD_ADDR_VAR 0 7
5163: PUSH
5164: LD_VAR 0 5
5168: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: LD_INT 1
5176: PPUSH
5177: LD_VAR 0 14
5181: PPUSH
5182: CALL_OW 12
5186: ST_TO_ADDR
// case i of 1 :
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 1
5194: DOUBLE
5195: EQUAL
5196: IFTRUE 5200
5198: GO 5217
5200: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5201: LD_VAR 0 1
5205: PPUSH
5206: LD_VAR 0 10
5210: PPUSH
5211: CALL_OW 115
5215: GO 5278
5217: LD_INT 2
5219: DOUBLE
5220: EQUAL
5221: IFTRUE 5225
5223: GO 5247
5225: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5226: LD_VAR 0 1
5230: PPUSH
5231: LD_VAR 0 6
5235: PPUSH
5236: LD_VAR 0 7
5240: PPUSH
5241: CALL_OW 153
5245: GO 5278
5247: LD_INT 3
5249: DOUBLE
5250: EQUAL
5251: IFTRUE 5255
5253: GO 5277
5255: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5256: LD_VAR 0 1
5260: PPUSH
5261: LD_VAR 0 6
5265: PPUSH
5266: LD_VAR 0 7
5270: PPUSH
5271: CALL_OW 154
5275: GO 5278
5277: POP
// end ;
5278: LD_VAR 0 2
5282: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5283: LD_INT 0
5285: PPUSH
5286: PPUSH
5287: PPUSH
5288: PPUSH
5289: PPUSH
5290: PPUSH
// if not unit or not building then
5291: LD_VAR 0 1
5295: NOT
5296: IFTRUE 5305
5298: PUSH
5299: LD_VAR 0 2
5303: NOT
5304: OR
5305: IFFALSE 5309
// exit ;
5307: GO 5467
// x := GetX ( building ) ;
5309: LD_ADDR_VAR 0 5
5313: PUSH
5314: LD_VAR 0 2
5318: PPUSH
5319: CALL_OW 250
5323: ST_TO_ADDR
// y := GetY ( building ) ;
5324: LD_ADDR_VAR 0 6
5328: PUSH
5329: LD_VAR 0 2
5333: PPUSH
5334: CALL_OW 251
5338: ST_TO_ADDR
// for i := 0 to 5 do
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: DOUBLE
5345: LD_INT 0
5347: DEC
5348: ST_TO_ADDR
5349: LD_INT 5
5351: PUSH
5352: FOR_TO
5353: IFFALSE 5465
// begin _x := ShiftX ( x , i , 3 ) ;
5355: LD_ADDR_VAR 0 7
5359: PUSH
5360: LD_VAR 0 5
5364: PPUSH
5365: LD_VAR 0 4
5369: PPUSH
5370: LD_INT 3
5372: PPUSH
5373: CALL_OW 272
5377: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5378: LD_ADDR_VAR 0 8
5382: PUSH
5383: LD_VAR 0 6
5387: PPUSH
5388: LD_VAR 0 4
5392: PPUSH
5393: LD_INT 3
5395: PPUSH
5396: CALL_OW 273
5400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5401: LD_VAR 0 7
5405: PPUSH
5406: LD_VAR 0 8
5410: PPUSH
5411: CALL_OW 488
5415: NOT
5416: IFFALSE 5420
// continue ;
5418: GO 5352
// if HexInfo ( _x , _y ) = 0 then
5420: LD_VAR 0 7
5424: PPUSH
5425: LD_VAR 0 8
5429: PPUSH
5430: CALL_OW 428
5434: PUSH
5435: LD_INT 0
5437: EQUAL
5438: IFFALSE 5463
// begin ComMoveXY ( unit , _x , _y ) ;
5440: LD_VAR 0 1
5444: PPUSH
5445: LD_VAR 0 7
5449: PPUSH
5450: LD_VAR 0 8
5454: PPUSH
5455: CALL_OW 111
// exit ;
5459: POP
5460: POP
5461: GO 5467
// end ; end ;
5463: GO 5352
5465: POP
5466: POP
// end ;
5467: LD_VAR 0 3
5471: RET
// export function ScanBase ( side , base_area ) ; begin
5472: LD_INT 0
5474: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 81
5487: PUSH
5488: LD_VAR 0 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 70
5501: ST_TO_ADDR
// end ;
5502: LD_VAR 0 3
5506: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5507: LD_INT 0
5509: PPUSH
5510: PPUSH
5511: PPUSH
5512: PPUSH
// result := false ;
5513: LD_ADDR_VAR 0 2
5517: PUSH
5518: LD_INT 0
5520: ST_TO_ADDR
// side := GetSide ( unit ) ;
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_VAR 0 1
5530: PPUSH
5531: CALL_OW 255
5535: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 248
5550: ST_TO_ADDR
// case nat of 1 :
5551: LD_VAR 0 4
5555: PUSH
5556: LD_INT 1
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5564
5562: GO 5575
5564: POP
// tech := tech_lassight ; 2 :
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 12
5572: ST_TO_ADDR
5573: GO 5614
5575: LD_INT 2
5577: DOUBLE
5578: EQUAL
5579: IFTRUE 5583
5581: GO 5594
5583: POP
// tech := tech_mortar ; 3 :
5584: LD_ADDR_VAR 0 5
5588: PUSH
5589: LD_INT 41
5591: ST_TO_ADDR
5592: GO 5614
5594: LD_INT 3
5596: DOUBLE
5597: EQUAL
5598: IFTRUE 5602
5600: GO 5613
5602: POP
// tech := tech_bazooka ; end ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: LD_INT 44
5610: ST_TO_ADDR
5611: GO 5614
5613: POP
// if Researched ( side , tech ) then
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PPUSH
5624: CALL_OW 325
5628: IFFALSE 5655
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: LD_INT 5
5637: PUSH
5638: LD_INT 8
5640: PUSH
5641: LD_INT 9
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: LD_VAR 0 4
5653: ARRAY
5654: ST_TO_ADDR
// end ;
5655: LD_VAR 0 2
5659: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
5664: PPUSH
// if not mines then
5665: LD_VAR 0 2
5669: NOT
5670: IFFALSE 5674
// exit ;
5672: GO 5818
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5674: LD_ADDR_VAR 0 5
5678: PUSH
5679: LD_INT 81
5681: PUSH
5682: LD_VAR 0 1
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 3
5693: PUSH
5694: LD_INT 21
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: ST_TO_ADDR
// for i in mines do
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: FOR_IN
5728: IFFALSE 5816
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5730: LD_VAR 0 4
5734: PUSH
5735: LD_INT 1
5737: ARRAY
5738: PPUSH
5739: LD_VAR 0 4
5743: PUSH
5744: LD_INT 2
5746: ARRAY
5747: PPUSH
5748: CALL_OW 458
5752: NOT
5753: IFFALSE 5757
// continue ;
5755: GO 5727
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5757: LD_VAR 0 4
5761: PUSH
5762: LD_INT 1
5764: ARRAY
5765: PPUSH
5766: LD_VAR 0 4
5770: PUSH
5771: LD_INT 2
5773: ARRAY
5774: PPUSH
5775: CALL_OW 428
5779: PUSH
5780: LD_VAR 0 5
5784: IN
5785: IFFALSE 5814
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5787: LD_VAR 0 4
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: LD_VAR 0 4
5800: PUSH
5801: LD_INT 2
5803: ARRAY
5804: PPUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 456
// end ;
5814: GO 5727
5816: POP
5817: POP
// end ;
5818: LD_VAR 0 3
5822: RET
// export function Count ( array ) ; begin
5823: LD_INT 0
5825: PPUSH
// result := array + 0 ;
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_INT 0
5838: PLUS
5839: ST_TO_ADDR
// end ;
5840: LD_VAR 0 2
5844: RET
// export function IsEmpty ( building ) ; begin
5845: LD_INT 0
5847: PPUSH
// if not building then
5848: LD_VAR 0 1
5852: NOT
5853: IFFALSE 5857
// exit ;
5855: GO 5900
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5857: LD_ADDR_VAR 0 2
5861: PUSH
5862: LD_VAR 0 1
5866: PUSH
5867: LD_INT 22
5869: PUSH
5870: LD_VAR 0 1
5874: PPUSH
5875: CALL_OW 255
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PUSH
5884: LD_INT 58
5886: PUSH
5887: EMPTY
5888: LIST
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PPUSH
5894: CALL_OW 69
5898: IN
5899: ST_TO_ADDR
// end ;
5900: LD_VAR 0 2
5904: RET
// export function IsNotFull ( building ) ; var places ; begin
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
// if not building then
5909: LD_VAR 0 1
5913: NOT
5914: IFFALSE 5918
// exit ;
5916: GO 5946
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5918: LD_ADDR_VAR 0 2
5922: PUSH
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 3
5930: PUSH
5931: LD_INT 62
5933: PUSH
5934: EMPTY
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 72
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 2
5950: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
// tmp := [ ] ;
5957: LD_ADDR_VAR 0 3
5961: PUSH
5962: EMPTY
5963: ST_TO_ADDR
// list := [ ] ;
5964: LD_ADDR_VAR 0 5
5968: PUSH
5969: EMPTY
5970: ST_TO_ADDR
// for i = 16 to 25 do
5971: LD_ADDR_VAR 0 4
5975: PUSH
5976: DOUBLE
5977: LD_INT 16
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 25
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6058
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5987: LD_ADDR_VAR 0 3
5991: PUSH
5992: LD_VAR 0 3
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_VAR 0 1
6004: PPUSH
6005: CALL_OW 255
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 91
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: LD_INT 6
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 30
6032: PUSH
6033: LD_VAR 0 4
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: PPUSH
6050: CALL_OW 69
6054: ADD
6055: ST_TO_ADDR
6056: GO 5984
6058: POP
6059: POP
// for i = 1 to tmp do
6060: LD_ADDR_VAR 0 4
6064: PUSH
6065: DOUBLE
6066: LD_INT 1
6068: DEC
6069: ST_TO_ADDR
6070: LD_VAR 0 3
6074: PUSH
6075: FOR_TO
6076: IFFALSE 6164
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6078: LD_ADDR_VAR 0 5
6082: PUSH
6083: LD_VAR 0 5
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 4
6097: ARRAY
6098: PPUSH
6099: CALL_OW 266
6103: PUSH
6104: LD_VAR 0 3
6108: PUSH
6109: LD_VAR 0 4
6113: ARRAY
6114: PPUSH
6115: CALL_OW 250
6119: PUSH
6120: LD_VAR 0 3
6124: PUSH
6125: LD_VAR 0 4
6129: ARRAY
6130: PPUSH
6131: CALL_OW 251
6135: PUSH
6136: LD_VAR 0 3
6140: PUSH
6141: LD_VAR 0 4
6145: ARRAY
6146: PPUSH
6147: CALL_OW 254
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: ADD
6161: ST_TO_ADDR
6162: GO 6075
6164: POP
6165: POP
// result := list ;
6166: LD_ADDR_VAR 0 2
6170: PUSH
6171: LD_VAR 0 5
6175: ST_TO_ADDR
// end ;
6176: LD_VAR 0 2
6180: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
6189: PPUSH
// if not factory then
6190: LD_VAR 0 1
6194: NOT
6195: IFFALSE 6199
// exit ;
6197: GO 6802
// if control = control_apeman then
6199: LD_VAR 0 4
6203: PUSH
6204: LD_INT 5
6206: EQUAL
6207: IFFALSE 6316
// begin tmp := UnitsInside ( factory ) ;
6209: LD_ADDR_VAR 0 8
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 313
6223: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6224: LD_VAR 0 8
6228: PPUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 12
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 72
6243: NOT
6244: IFFALSE 6254
// control := control_manual ;
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: LD_INT 1
6253: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6254: LD_ADDR_VAR 0 8
6258: PUSH
6259: LD_VAR 0 1
6263: PPUSH
6264: CALL 5951 0 1
6268: ST_TO_ADDR
// if tmp then
6269: LD_VAR 0 8
6273: IFFALSE 6316
// begin for i in tmp do
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_VAR 0 8
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6314
// if i [ 1 ] = b_ext_radio then
6288: LD_VAR 0 7
6292: PUSH
6293: LD_INT 1
6295: ARRAY
6296: PUSH
6297: LD_INT 22
6299: EQUAL
6300: IFFALSE 6312
// begin control := control_remote ;
6302: LD_ADDR_VAR 0 4
6306: PUSH
6307: LD_INT 2
6309: ST_TO_ADDR
// break ;
6310: GO 6314
// end ;
6312: GO 6285
6314: POP
6315: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6316: LD_VAR 0 1
6320: PPUSH
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_VAR 0 3
6330: PPUSH
6331: LD_VAR 0 4
6335: PPUSH
6336: LD_VAR 0 5
6340: PPUSH
6341: CALL_OW 448
6345: IFFALSE 6380
// begin result := [ chassis , engine , control , weapon ] ;
6347: LD_ADDR_VAR 0 6
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: LD_VAR 0 3
6361: PUSH
6362: LD_VAR 0 4
6366: PUSH
6367: LD_VAR 0 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: ST_TO_ADDR
// exit ;
6378: GO 6802
// end ; _chassis := AvailableChassisList ( factory ) ;
6380: LD_ADDR_VAR 0 9
6384: PUSH
6385: LD_VAR 0 1
6389: PPUSH
6390: CALL_OW 475
6394: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6395: LD_ADDR_VAR 0 11
6399: PUSH
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 476
6409: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6410: LD_ADDR_VAR 0 12
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 477
6424: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6425: LD_ADDR_VAR 0 10
6429: PUSH
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 478
6439: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6440: LD_VAR 0 9
6444: NOT
6445: IFTRUE 6454
6447: PUSH
6448: LD_VAR 0 11
6452: NOT
6453: OR
6454: IFTRUE 6463
6456: PUSH
6457: LD_VAR 0 12
6461: NOT
6462: OR
6463: IFTRUE 6472
6465: PUSH
6466: LD_VAR 0 10
6470: NOT
6471: OR
6472: IFFALSE 6507
// begin result := [ chassis , engine , control , weapon ] ;
6474: LD_ADDR_VAR 0 6
6478: PUSH
6479: LD_VAR 0 2
6483: PUSH
6484: LD_VAR 0 3
6488: PUSH
6489: LD_VAR 0 4
6493: PUSH
6494: LD_VAR 0 5
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
// exit ;
6505: GO 6802
// end ; if not chassis in _chassis then
6507: LD_VAR 0 2
6511: PUSH
6512: LD_VAR 0 9
6516: IN
6517: NOT
6518: IFFALSE 6544
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: LD_VAR 0 9
6529: PUSH
6530: LD_INT 1
6532: PPUSH
6533: LD_VAR 0 9
6537: PPUSH
6538: CALL_OW 12
6542: ARRAY
6543: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_VAR 0 3
6553: PPUSH
6554: CALL 6807 0 2
6558: NOT
6559: IFFALSE 6620
// repeat engine := _engine [ 1 ] ;
6561: LD_ADDR_VAR 0 3
6565: PUSH
6566: LD_VAR 0 11
6570: PUSH
6571: LD_INT 1
6573: ARRAY
6574: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6575: LD_ADDR_VAR 0 11
6579: PUSH
6580: LD_VAR 0 11
6584: PPUSH
6585: LD_INT 1
6587: PPUSH
6588: CALL_OW 3
6592: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6593: LD_VAR 0 2
6597: PPUSH
6598: LD_VAR 0 3
6602: PPUSH
6603: CALL 6807 0 2
6607: IFTRUE 6618
6609: PUSH
6610: LD_VAR 0 11
6614: PUSH
6615: EMPTY
6616: EQUAL
6617: OR
6618: IFFALSE 6561
// if not control in _control then
6620: LD_VAR 0 4
6624: PUSH
6625: LD_VAR 0 12
6629: IN
6630: NOT
6631: IFFALSE 6657
// control := _control [ rand ( 1 , _control ) ] ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_VAR 0 12
6642: PUSH
6643: LD_INT 1
6645: PPUSH
6646: LD_VAR 0 12
6650: PPUSH
6651: CALL_OW 12
6655: ARRAY
6656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6657: LD_VAR 0 2
6661: PPUSH
6662: LD_VAR 0 5
6666: PPUSH
6667: CALL 7029 0 2
6671: NOT
6672: IFFALSE 6733
// repeat weapon := _weapon [ 1 ] ;
6674: LD_ADDR_VAR 0 5
6678: PUSH
6679: LD_VAR 0 10
6683: PUSH
6684: LD_INT 1
6686: ARRAY
6687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6688: LD_ADDR_VAR 0 10
6692: PUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: LD_INT 1
6700: PPUSH
6701: CALL_OW 3
6705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6706: LD_VAR 0 2
6710: PPUSH
6711: LD_VAR 0 5
6715: PPUSH
6716: CALL 7029 0 2
6720: IFTRUE 6731
6722: PUSH
6723: LD_VAR 0 10
6727: PUSH
6728: EMPTY
6729: EQUAL
6730: OR
6731: IFFALSE 6674
// result := [ ] ;
6733: LD_ADDR_VAR 0 6
6737: PUSH
6738: EMPTY
6739: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6740: LD_VAR 0 1
6744: PPUSH
6745: LD_VAR 0 2
6749: PPUSH
6750: LD_VAR 0 3
6754: PPUSH
6755: LD_VAR 0 4
6759: PPUSH
6760: LD_VAR 0 5
6764: PPUSH
6765: CALL_OW 448
6769: IFFALSE 6802
// result := [ chassis , engine , control , weapon ] ;
6771: LD_ADDR_VAR 0 6
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_VAR 0 3
6785: PUSH
6786: LD_VAR 0 4
6790: PUSH
6791: LD_VAR 0 5
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
// end ;
6802: LD_VAR 0 6
6806: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6807: LD_INT 0
6809: PPUSH
// if not chassis or not engine then
6810: LD_VAR 0 1
6814: NOT
6815: IFTRUE 6824
6817: PUSH
6818: LD_VAR 0 2
6822: NOT
6823: OR
6824: IFFALSE 6828
// exit ;
6826: GO 7024
// case engine of engine_solar :
6828: LD_VAR 0 2
6832: PUSH
6833: LD_INT 2
6835: DOUBLE
6836: EQUAL
6837: IFTRUE 6841
6839: GO 6879
6841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6842: LD_ADDR_VAR 0 3
6846: PUSH
6847: LD_INT 11
6849: PUSH
6850: LD_INT 12
6852: PUSH
6853: LD_INT 13
6855: PUSH
6856: LD_INT 14
6858: PUSH
6859: LD_INT 1
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: LD_INT 3
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 7008
6879: LD_INT 1
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6949
6887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: LD_INT 11
6895: PUSH
6896: LD_INT 12
6898: PUSH
6899: LD_INT 13
6901: PUSH
6902: LD_INT 14
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: LD_INT 2
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 23
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 24
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: ST_TO_ADDR
6947: GO 7008
6949: LD_INT 3
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 7007
6957: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: LD_INT 13
6965: PUSH
6966: LD_INT 14
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: LD_INT 5
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_INT 23
6989: PUSH
6990: LD_INT 24
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: ST_TO_ADDR
7005: GO 7008
7007: POP
// result := ( chassis in result ) ;
7008: LD_ADDR_VAR 0 3
7012: PUSH
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 3
7022: IN
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7029: LD_INT 0
7031: PPUSH
// if not chassis or not weapon then
7032: LD_VAR 0 1
7036: NOT
7037: IFTRUE 7046
7039: PUSH
7040: LD_VAR 0 2
7044: NOT
7045: OR
7046: IFFALSE 7050
// exit ;
7048: GO 8144
// case weapon of us_machine_gun :
7050: LD_VAR 0 2
7054: PUSH
7055: LD_INT 2
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7093
7063: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: LD_INT 2
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
7091: GO 8128
7093: LD_INT 3
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7131
7101: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7102: LD_ADDR_VAR 0 3
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: LD_INT 3
7115: PUSH
7116: LD_INT 4
7118: PUSH
7119: LD_INT 5
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: ST_TO_ADDR
7129: GO 8128
7131: LD_INT 11
7133: DOUBLE
7134: EQUAL
7135: IFTRUE 7139
7137: GO 7169
7139: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7140: LD_ADDR_VAR 0 3
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: LD_INT 2
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: LD_INT 4
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: ST_TO_ADDR
7167: GO 8128
7169: LD_INT 4
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7203
7177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7178: LD_ADDR_VAR 0 3
7182: PUSH
7183: LD_INT 2
7185: PUSH
7186: LD_INT 3
7188: PUSH
7189: LD_INT 4
7191: PUSH
7192: LD_INT 5
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: ST_TO_ADDR
7201: GO 8128
7203: LD_INT 5
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7211
7209: GO 7237
7211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: LD_INT 2
7219: PUSH
7220: LD_INT 3
7222: PUSH
7223: LD_INT 4
7225: PUSH
7226: LD_INT 5
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 8128
7237: LD_INT 9
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7271
7245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: ST_TO_ADDR
7269: GO 8128
7271: LD_INT 7
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7305
7279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7280: LD_ADDR_VAR 0 3
7284: PUSH
7285: LD_INT 2
7287: PUSH
7288: LD_INT 3
7290: PUSH
7291: LD_INT 4
7293: PUSH
7294: LD_INT 5
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: ST_TO_ADDR
7303: GO 8128
7305: LD_INT 12
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7339
7313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: ST_TO_ADDR
7337: GO 8128
7339: LD_INT 13
7341: DOUBLE
7342: EQUAL
7343: IFTRUE 7347
7345: GO 7373
7347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7348: LD_ADDR_VAR 0 3
7352: PUSH
7353: LD_INT 2
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: LD_INT 4
7361: PUSH
7362: LD_INT 5
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: ST_TO_ADDR
7371: GO 8128
7373: LD_INT 14
7375: DOUBLE
7376: EQUAL
7377: IFTRUE 7381
7379: GO 7399
7381: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7382: LD_ADDR_VAR 0 3
7386: PUSH
7387: LD_INT 4
7389: PUSH
7390: LD_INT 5
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: ST_TO_ADDR
7397: GO 8128
7399: LD_INT 6
7401: DOUBLE
7402: EQUAL
7403: IFTRUE 7407
7405: GO 7425
7407: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: ST_TO_ADDR
7423: GO 8128
7425: LD_INT 10
7427: DOUBLE
7428: EQUAL
7429: IFTRUE 7433
7431: GO 7451
7433: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7434: LD_ADDR_VAR 0 3
7438: PUSH
7439: LD_INT 4
7441: PUSH
7442: LD_INT 5
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: ST_TO_ADDR
7449: GO 8128
7451: LD_INT 22
7453: DOUBLE
7454: EQUAL
7455: IFTRUE 7459
7457: GO 7485
7459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7460: LD_ADDR_VAR 0 3
7464: PUSH
7465: LD_INT 11
7467: PUSH
7468: LD_INT 12
7470: PUSH
7471: LD_INT 13
7473: PUSH
7474: LD_INT 14
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: ST_TO_ADDR
7483: GO 8128
7485: LD_INT 23
7487: DOUBLE
7488: EQUAL
7489: IFTRUE 7493
7491: GO 7519
7493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7494: LD_ADDR_VAR 0 3
7498: PUSH
7499: LD_INT 11
7501: PUSH
7502: LD_INT 12
7504: PUSH
7505: LD_INT 13
7507: PUSH
7508: LD_INT 14
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: ST_TO_ADDR
7517: GO 8128
7519: LD_INT 24
7521: DOUBLE
7522: EQUAL
7523: IFTRUE 7527
7525: GO 7553
7527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_INT 11
7535: PUSH
7536: LD_INT 12
7538: PUSH
7539: LD_INT 13
7541: PUSH
7542: LD_INT 14
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
7551: GO 8128
7553: LD_INT 30
7555: DOUBLE
7556: EQUAL
7557: IFTRUE 7561
7559: GO 7587
7561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_INT 11
7569: PUSH
7570: LD_INT 12
7572: PUSH
7573: LD_INT 13
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
7585: GO 8128
7587: LD_INT 25
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7613
7595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_INT 13
7603: PUSH
7604: LD_INT 14
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: ST_TO_ADDR
7611: GO 8128
7613: LD_INT 27
7615: DOUBLE
7616: EQUAL
7617: IFTRUE 7621
7619: GO 7639
7621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7622: LD_ADDR_VAR 0 3
7626: PUSH
7627: LD_INT 13
7629: PUSH
7630: LD_INT 14
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: ST_TO_ADDR
7637: GO 8128
7639: LD_INT 92
7641: DOUBLE
7642: EQUAL
7643: IFTRUE 7647
7645: GO 7673
7647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7648: LD_ADDR_VAR 0 3
7652: PUSH
7653: LD_INT 11
7655: PUSH
7656: LD_INT 12
7658: PUSH
7659: LD_INT 13
7661: PUSH
7662: LD_INT 14
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: ST_TO_ADDR
7671: GO 8128
7673: LD_INT 28
7675: DOUBLE
7676: EQUAL
7677: IFTRUE 7681
7679: GO 7699
7681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_INT 13
7689: PUSH
7690: LD_INT 14
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: ST_TO_ADDR
7697: GO 8128
7699: LD_INT 29
7701: DOUBLE
7702: EQUAL
7703: IFTRUE 7707
7705: GO 7725
7707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 13
7715: PUSH
7716: LD_INT 14
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: ST_TO_ADDR
7723: GO 8128
7725: LD_INT 31
7727: DOUBLE
7728: EQUAL
7729: IFTRUE 7733
7731: GO 7751
7733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7734: LD_ADDR_VAR 0 3
7738: PUSH
7739: LD_INT 13
7741: PUSH
7742: LD_INT 14
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: ST_TO_ADDR
7749: GO 8128
7751: LD_INT 26
7753: DOUBLE
7754: EQUAL
7755: IFTRUE 7759
7757: GO 7777
7759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7760: LD_ADDR_VAR 0 3
7764: PUSH
7765: LD_INT 13
7767: PUSH
7768: LD_INT 14
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: ST_TO_ADDR
7775: GO 8128
7777: LD_INT 42
7779: DOUBLE
7780: EQUAL
7781: IFTRUE 7785
7783: GO 7811
7785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7786: LD_ADDR_VAR 0 3
7790: PUSH
7791: LD_INT 21
7793: PUSH
7794: LD_INT 22
7796: PUSH
7797: LD_INT 23
7799: PUSH
7800: LD_INT 24
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: ST_TO_ADDR
7809: GO 8128
7811: LD_INT 43
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7845
7819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 21
7827: PUSH
7828: LD_INT 22
7830: PUSH
7831: LD_INT 23
7833: PUSH
7834: LD_INT 24
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: ST_TO_ADDR
7843: GO 8128
7845: LD_INT 44
7847: DOUBLE
7848: EQUAL
7849: IFTRUE 7853
7851: GO 7879
7853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7854: LD_ADDR_VAR 0 3
7858: PUSH
7859: LD_INT 21
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_INT 23
7867: PUSH
7868: LD_INT 24
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: ST_TO_ADDR
7877: GO 8128
7879: LD_INT 45
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 7913
7887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7888: LD_ADDR_VAR 0 3
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 22
7898: PUSH
7899: LD_INT 23
7901: PUSH
7902: LD_INT 24
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 8128
7913: LD_INT 49
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7947
7921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7922: LD_ADDR_VAR 0 3
7926: PUSH
7927: LD_INT 21
7929: PUSH
7930: LD_INT 22
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
7945: GO 8128
7947: LD_INT 51
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 7981
7955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_INT 21
7963: PUSH
7964: LD_INT 22
7966: PUSH
7967: LD_INT 23
7969: PUSH
7970: LD_INT 24
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: ST_TO_ADDR
7979: GO 8128
7981: LD_INT 52
7983: DOUBLE
7984: EQUAL
7985: IFTRUE 7989
7987: GO 8015
7989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 21
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 23
8003: PUSH
8004: LD_INT 24
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: ST_TO_ADDR
8013: GO 8128
8015: LD_INT 53
8017: DOUBLE
8018: EQUAL
8019: IFTRUE 8023
8021: GO 8041
8023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8024: LD_ADDR_VAR 0 3
8028: PUSH
8029: LD_INT 23
8031: PUSH
8032: LD_INT 24
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: ST_TO_ADDR
8039: GO 8128
8041: LD_INT 46
8043: DOUBLE
8044: EQUAL
8045: IFTRUE 8049
8047: GO 8067
8049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: LD_INT 23
8057: PUSH
8058: LD_INT 24
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: ST_TO_ADDR
8065: GO 8128
8067: LD_INT 47
8069: DOUBLE
8070: EQUAL
8071: IFTRUE 8075
8073: GO 8093
8075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: LD_INT 23
8083: PUSH
8084: LD_INT 24
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: ST_TO_ADDR
8091: GO 8128
8093: LD_INT 98
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8127
8101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_INT 21
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 24
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: ST_TO_ADDR
8125: GO 8128
8127: POP
// result := ( chassis in result ) ;
8128: LD_ADDR_VAR 0 3
8132: PUSH
8133: LD_VAR 0 1
8137: PUSH
8138: LD_VAR 0 3
8142: IN
8143: ST_TO_ADDR
// end ;
8144: LD_VAR 0 3
8148: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8149: LD_INT 0
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
8157: PPUSH
// result := array ;
8158: LD_ADDR_VAR 0 5
8162: PUSH
8163: LD_VAR 0 1
8167: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8168: LD_VAR 0 1
8172: NOT
8173: IFTRUE 8182
8175: PUSH
8176: LD_VAR 0 2
8180: NOT
8181: OR
8182: IFTRUE 8191
8184: PUSH
8185: LD_VAR 0 3
8189: NOT
8190: OR
8191: IFTRUE 8205
8193: PUSH
8194: LD_VAR 0 2
8198: PUSH
8199: LD_VAR 0 1
8203: GREATER
8204: OR
8205: IFTRUE 8219
8207: PUSH
8208: LD_VAR 0 3
8212: PUSH
8213: LD_VAR 0 1
8217: GREATER
8218: OR
8219: IFFALSE 8223
// exit ;
8221: GO 8519
// if direction then
8223: LD_VAR 0 4
8227: IFFALSE 8291
// begin d := 1 ;
8229: LD_ADDR_VAR 0 9
8233: PUSH
8234: LD_INT 1
8236: ST_TO_ADDR
// if i_from > i_to then
8237: LD_VAR 0 2
8241: PUSH
8242: LD_VAR 0 3
8246: GREATER
8247: IFFALSE 8273
// length := ( array - i_from ) + i_to else
8249: LD_ADDR_VAR 0 11
8253: PUSH
8254: LD_VAR 0 1
8258: PUSH
8259: LD_VAR 0 2
8263: MINUS
8264: PUSH
8265: LD_VAR 0 3
8269: PLUS
8270: ST_TO_ADDR
8271: GO 8289
// length := i_to - i_from ;
8273: LD_ADDR_VAR 0 11
8277: PUSH
8278: LD_VAR 0 3
8282: PUSH
8283: LD_VAR 0 2
8287: MINUS
8288: ST_TO_ADDR
// end else
8289: GO 8352
// begin d := - 1 ;
8291: LD_ADDR_VAR 0 9
8295: PUSH
8296: LD_INT 1
8298: NEG
8299: ST_TO_ADDR
// if i_from > i_to then
8300: LD_VAR 0 2
8304: PUSH
8305: LD_VAR 0 3
8309: GREATER
8310: IFFALSE 8330
// length := i_from - i_to else
8312: LD_ADDR_VAR 0 11
8316: PUSH
8317: LD_VAR 0 2
8321: PUSH
8322: LD_VAR 0 3
8326: MINUS
8327: ST_TO_ADDR
8328: GO 8352
// length := ( array - i_to ) + i_from ;
8330: LD_ADDR_VAR 0 11
8334: PUSH
8335: LD_VAR 0 1
8339: PUSH
8340: LD_VAR 0 3
8344: MINUS
8345: PUSH
8346: LD_VAR 0 2
8350: PLUS
8351: ST_TO_ADDR
// end ; if not length then
8352: LD_VAR 0 11
8356: NOT
8357: IFFALSE 8361
// exit ;
8359: GO 8519
// tmp := array ;
8361: LD_ADDR_VAR 0 10
8365: PUSH
8366: LD_VAR 0 1
8370: ST_TO_ADDR
// for i = 1 to length do
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: DOUBLE
8377: LD_INT 1
8379: DEC
8380: ST_TO_ADDR
8381: LD_VAR 0 11
8385: PUSH
8386: FOR_TO
8387: IFFALSE 8507
// begin for j = 1 to array do
8389: LD_ADDR_VAR 0 7
8393: PUSH
8394: DOUBLE
8395: LD_INT 1
8397: DEC
8398: ST_TO_ADDR
8399: LD_VAR 0 1
8403: PUSH
8404: FOR_TO
8405: IFFALSE 8493
// begin k := j + d ;
8407: LD_ADDR_VAR 0 8
8411: PUSH
8412: LD_VAR 0 7
8416: PUSH
8417: LD_VAR 0 9
8421: PLUS
8422: ST_TO_ADDR
// if k > array then
8423: LD_VAR 0 8
8427: PUSH
8428: LD_VAR 0 1
8432: GREATER
8433: IFFALSE 8443
// k := 1 ;
8435: LD_ADDR_VAR 0 8
8439: PUSH
8440: LD_INT 1
8442: ST_TO_ADDR
// if not k then
8443: LD_VAR 0 8
8447: NOT
8448: IFFALSE 8460
// k := array ;
8450: LD_ADDR_VAR 0 8
8454: PUSH
8455: LD_VAR 0 1
8459: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8460: LD_ADDR_VAR 0 10
8464: PUSH
8465: LD_VAR 0 10
8469: PPUSH
8470: LD_VAR 0 8
8474: PPUSH
8475: LD_VAR 0 1
8479: PUSH
8480: LD_VAR 0 7
8484: ARRAY
8485: PPUSH
8486: CALL_OW 1
8490: ST_TO_ADDR
// end ;
8491: GO 8404
8493: POP
8494: POP
// array := tmp ;
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: LD_VAR 0 10
8504: ST_TO_ADDR
// end ;
8505: GO 8386
8507: POP
8508: POP
// result := array ;
8509: LD_ADDR_VAR 0 5
8513: PUSH
8514: LD_VAR 0 1
8518: ST_TO_ADDR
// end ;
8519: LD_VAR 0 5
8523: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8524: LD_INT 0
8526: PPUSH
8527: PPUSH
// result := 0 ;
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: LD_INT 0
8535: ST_TO_ADDR
// if not array or not value in array then
8536: LD_VAR 0 1
8540: NOT
8541: IFTRUE 8556
8543: PUSH
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 1
8553: IN
8554: NOT
8555: OR
8556: IFFALSE 8560
// exit ;
8558: GO 8614
// for i = 1 to array do
8560: LD_ADDR_VAR 0 4
8564: PUSH
8565: DOUBLE
8566: LD_INT 1
8568: DEC
8569: ST_TO_ADDR
8570: LD_VAR 0 1
8574: PUSH
8575: FOR_TO
8576: IFFALSE 8612
// if value = array [ i ] then
8578: LD_VAR 0 2
8582: PUSH
8583: LD_VAR 0 1
8587: PUSH
8588: LD_VAR 0 4
8592: ARRAY
8593: EQUAL
8594: IFFALSE 8610
// begin result := i ;
8596: LD_ADDR_VAR 0 3
8600: PUSH
8601: LD_VAR 0 4
8605: ST_TO_ADDR
// exit ;
8606: POP
8607: POP
8608: GO 8614
// end ;
8610: GO 8575
8612: POP
8613: POP
// end ;
8614: LD_VAR 0 3
8618: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8619: LD_INT 0
8621: PPUSH
// vc_chassis := chassis ;
8622: LD_ADDR_OWVAR 37
8626: PUSH
8627: LD_VAR 0 1
8631: ST_TO_ADDR
// vc_engine := engine ;
8632: LD_ADDR_OWVAR 39
8636: PUSH
8637: LD_VAR 0 2
8641: ST_TO_ADDR
// vc_control := control ;
8642: LD_ADDR_OWVAR 38
8646: PUSH
8647: LD_VAR 0 3
8651: ST_TO_ADDR
// vc_weapon := weapon ;
8652: LD_ADDR_OWVAR 40
8656: PUSH
8657: LD_VAR 0 4
8661: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8662: LD_ADDR_OWVAR 41
8666: PUSH
8667: LD_VAR 0 5
8671: ST_TO_ADDR
// end ;
8672: LD_VAR 0 6
8676: RET
// export function WantPlant ( unit ) ; var task ; begin
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
// result := false ;
8681: LD_ADDR_VAR 0 2
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8689: LD_ADDR_VAR 0 3
8693: PUSH
8694: LD_VAR 0 1
8698: PPUSH
8699: CALL_OW 437
8703: ST_TO_ADDR
// if task then
8704: LD_VAR 0 3
8708: IFFALSE 8736
// if task [ 1 ] [ 1 ] = p then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 1
8717: ARRAY
8718: PUSH
8719: LD_INT 1
8721: ARRAY
8722: PUSH
8723: LD_STRING p
8725: EQUAL
8726: IFFALSE 8736
// result := true ;
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_INT 1
8735: ST_TO_ADDR
// end ;
8736: LD_VAR 0 2
8740: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
8745: PPUSH
8746: PPUSH
// if pos < 1 then
8747: LD_VAR 0 2
8751: PUSH
8752: LD_INT 1
8754: LESS
8755: IFFALSE 8759
// exit ;
8757: GO 9062
// if pos = 1 then
8759: LD_VAR 0 2
8763: PUSH
8764: LD_INT 1
8766: EQUAL
8767: IFFALSE 8800
// result := Replace ( arr , pos [ 1 ] , value ) else
8769: LD_ADDR_VAR 0 4
8773: PUSH
8774: LD_VAR 0 1
8778: PPUSH
8779: LD_VAR 0 2
8783: PUSH
8784: LD_INT 1
8786: ARRAY
8787: PPUSH
8788: LD_VAR 0 3
8792: PPUSH
8793: CALL_OW 1
8797: ST_TO_ADDR
8798: GO 9062
// begin tmp := arr ;
8800: LD_ADDR_VAR 0 6
8804: PUSH
8805: LD_VAR 0 1
8809: ST_TO_ADDR
// s_arr := [ tmp ] ;
8810: LD_ADDR_VAR 0 7
8814: PUSH
8815: LD_VAR 0 6
8819: PUSH
8820: EMPTY
8821: LIST
8822: ST_TO_ADDR
// for i = 1 to pos - 1 do
8823: LD_ADDR_VAR 0 5
8827: PUSH
8828: DOUBLE
8829: LD_INT 1
8831: DEC
8832: ST_TO_ADDR
8833: LD_VAR 0 2
8837: PUSH
8838: LD_INT 1
8840: MINUS
8841: PUSH
8842: FOR_TO
8843: IFFALSE 8888
// begin tmp := tmp [ pos [ i ] ] ;
8845: LD_ADDR_VAR 0 6
8849: PUSH
8850: LD_VAR 0 6
8854: PUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_VAR 0 5
8864: ARRAY
8865: ARRAY
8866: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8867: LD_ADDR_VAR 0 7
8871: PUSH
8872: LD_VAR 0 7
8876: PUSH
8877: LD_VAR 0 6
8881: PUSH
8882: EMPTY
8883: LIST
8884: ADD
8885: ST_TO_ADDR
// end ;
8886: GO 8842
8888: POP
8889: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8890: LD_ADDR_VAR 0 6
8894: PUSH
8895: LD_VAR 0 6
8899: PPUSH
8900: LD_VAR 0 2
8904: PUSH
8905: LD_VAR 0 2
8909: ARRAY
8910: PPUSH
8911: LD_VAR 0 3
8915: PPUSH
8916: CALL_OW 1
8920: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8921: LD_ADDR_VAR 0 7
8925: PUSH
8926: LD_VAR 0 7
8930: PPUSH
8931: LD_VAR 0 7
8935: PPUSH
8936: LD_VAR 0 6
8940: PPUSH
8941: CALL_OW 1
8945: ST_TO_ADDR
// for i = s_arr downto 2 do
8946: LD_ADDR_VAR 0 5
8950: PUSH
8951: DOUBLE
8952: LD_VAR 0 7
8956: INC
8957: ST_TO_ADDR
8958: LD_INT 2
8960: PUSH
8961: FOR_DOWNTO
8962: IFFALSE 9046
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8964: LD_ADDR_VAR 0 6
8968: PUSH
8969: LD_VAR 0 7
8973: PUSH
8974: LD_VAR 0 5
8978: PUSH
8979: LD_INT 1
8981: MINUS
8982: ARRAY
8983: PPUSH
8984: LD_VAR 0 2
8988: PUSH
8989: LD_VAR 0 5
8993: PUSH
8994: LD_INT 1
8996: MINUS
8997: ARRAY
8998: PPUSH
8999: LD_VAR 0 7
9003: PUSH
9004: LD_VAR 0 5
9008: ARRAY
9009: PPUSH
9010: CALL_OW 1
9014: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9015: LD_ADDR_VAR 0 7
9019: PUSH
9020: LD_VAR 0 7
9024: PPUSH
9025: LD_VAR 0 5
9029: PUSH
9030: LD_INT 1
9032: MINUS
9033: PPUSH
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 1
9043: ST_TO_ADDR
// end ;
9044: GO 8961
9046: POP
9047: POP
// result := s_arr [ 1 ] ;
9048: LD_ADDR_VAR 0 4
9052: PUSH
9053: LD_VAR 0 7
9057: PUSH
9058: LD_INT 1
9060: ARRAY
9061: ST_TO_ADDR
// end ; end ;
9062: LD_VAR 0 4
9066: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9067: LD_INT 0
9069: PPUSH
9070: PPUSH
// if not list then
9071: LD_VAR 0 1
9075: NOT
9076: IFFALSE 9080
// exit ;
9078: GO 9171
// i := list [ pos1 ] ;
9080: LD_ADDR_VAR 0 5
9084: PUSH
9085: LD_VAR 0 1
9089: PUSH
9090: LD_VAR 0 2
9094: ARRAY
9095: ST_TO_ADDR
// if not i then
9096: LD_VAR 0 5
9100: NOT
9101: IFFALSE 9105
// exit ;
9103: GO 9171
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_VAR 0 1
9114: PPUSH
9115: LD_VAR 0 2
9119: PPUSH
9120: LD_VAR 0 1
9124: PUSH
9125: LD_VAR 0 3
9129: ARRAY
9130: PPUSH
9131: CALL_OW 1
9135: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9136: LD_ADDR_VAR 0 1
9140: PUSH
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_VAR 0 5
9155: PPUSH
9156: CALL_OW 1
9160: ST_TO_ADDR
// result := list ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_VAR 0 1
9170: ST_TO_ADDR
// end ;
9171: LD_VAR 0 4
9175: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9176: LD_INT 0
9178: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9179: LD_ADDR_VAR 0 5
9183: PUSH
9184: LD_VAR 0 1
9188: PPUSH
9189: CALL_OW 250
9193: PPUSH
9194: LD_VAR 0 1
9198: PPUSH
9199: CALL_OW 251
9203: PPUSH
9204: LD_VAR 0 2
9208: PPUSH
9209: LD_VAR 0 3
9213: PPUSH
9214: LD_VAR 0 4
9218: PPUSH
9219: CALL 9601 0 5
9223: ST_TO_ADDR
// end ;
9224: LD_VAR 0 5
9228: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9229: LD_INT 0
9231: PPUSH
9232: PPUSH
9233: PPUSH
9234: PPUSH
// if not list or not unit then
9235: LD_VAR 0 2
9239: NOT
9240: IFTRUE 9249
9242: PUSH
9243: LD_VAR 0 1
9247: NOT
9248: OR
9249: IFFALSE 9253
// exit ;
9251: GO 9596
// result := [ ] ;
9253: LD_ADDR_VAR 0 5
9257: PUSH
9258: EMPTY
9259: ST_TO_ADDR
// for i in list do
9260: LD_ADDR_VAR 0 6
9264: PUSH
9265: LD_VAR 0 2
9269: PUSH
9270: FOR_IN
9271: IFFALSE 9489
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9273: LD_ADDR_VAR 0 8
9277: PUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: LD_VAR 0 6
9287: PUSH
9288: LD_INT 1
9290: ARRAY
9291: PPUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 2
9299: ARRAY
9300: PPUSH
9301: CALL_OW 297
9305: ST_TO_ADDR
// if not Count ( result ) then
9306: LD_VAR 0 5
9310: PPUSH
9311: CALL 5823 0 1
9315: NOT
9316: IFFALSE 9349
// begin result := Join ( result , [ i , tmp ] ) ;
9318: LD_ADDR_VAR 0 5
9322: PUSH
9323: LD_VAR 0 5
9327: PPUSH
9328: LD_VAR 0 6
9332: PUSH
9333: LD_VAR 0 8
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PPUSH
9342: CALL 41789 0 2
9346: ST_TO_ADDR
// continue ;
9347: GO 9270
// end ; if result [ result ] [ 2 ] <= tmp then
9349: LD_VAR 0 5
9353: PUSH
9354: LD_VAR 0 5
9358: ARRAY
9359: PUSH
9360: LD_INT 2
9362: ARRAY
9363: PUSH
9364: LD_VAR 0 8
9368: LESSEQUAL
9369: IFFALSE 9402
// result := Join ( result , [ i , tmp ] ) else
9371: LD_ADDR_VAR 0 5
9375: PUSH
9376: LD_VAR 0 5
9380: PPUSH
9381: LD_VAR 0 6
9385: PUSH
9386: LD_VAR 0 8
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL 41789 0 2
9399: ST_TO_ADDR
9400: GO 9487
// begin for j := 1 to Count ( result ) do
9402: LD_ADDR_VAR 0 7
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_VAR 0 5
9416: PPUSH
9417: CALL 5823 0 1
9421: PUSH
9422: FOR_TO
9423: IFFALSE 9485
// begin if tmp < result [ j ] [ 2 ] then
9425: LD_VAR 0 8
9429: PUSH
9430: LD_VAR 0 5
9434: PUSH
9435: LD_VAR 0 7
9439: ARRAY
9440: PUSH
9441: LD_INT 2
9443: ARRAY
9444: LESS
9445: IFFALSE 9483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9447: LD_ADDR_VAR 0 5
9451: PUSH
9452: LD_VAR 0 5
9456: PPUSH
9457: LD_VAR 0 7
9461: PPUSH
9462: LD_VAR 0 6
9466: PUSH
9467: LD_VAR 0 8
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PPUSH
9476: CALL_OW 2
9480: ST_TO_ADDR
// break ;
9481: GO 9485
// end ; end ;
9483: GO 9422
9485: POP
9486: POP
// end ; end ;
9487: GO 9270
9489: POP
9490: POP
// if result and not asc then
9491: LD_VAR 0 5
9495: IFFALSE 9504
9497: PUSH
9498: LD_VAR 0 3
9502: NOT
9503: AND
9504: IFFALSE 9521
// result := ReverseArray ( result ) ;
9506: LD_ADDR_VAR 0 5
9510: PUSH
9511: LD_VAR 0 5
9515: PPUSH
9516: CALL 36879 0 1
9520: ST_TO_ADDR
// tmp := [ ] ;
9521: LD_ADDR_VAR 0 8
9525: PUSH
9526: EMPTY
9527: ST_TO_ADDR
// if mode then
9528: LD_VAR 0 4
9532: IFFALSE 9596
// begin for i := 1 to result do
9534: LD_ADDR_VAR 0 6
9538: PUSH
9539: DOUBLE
9540: LD_INT 1
9542: DEC
9543: ST_TO_ADDR
9544: LD_VAR 0 5
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9584
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9552: LD_ADDR_VAR 0 8
9556: PUSH
9557: LD_VAR 0 8
9561: PPUSH
9562: LD_VAR 0 5
9566: PUSH
9567: LD_VAR 0 6
9571: ARRAY
9572: PUSH
9573: LD_INT 1
9575: ARRAY
9576: PPUSH
9577: CALL 41789 0 2
9581: ST_TO_ADDR
9582: GO 9549
9584: POP
9585: POP
// result := tmp ;
9586: LD_ADDR_VAR 0 5
9590: PUSH
9591: LD_VAR 0 8
9595: ST_TO_ADDR
// end ; end ;
9596: LD_VAR 0 5
9600: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9601: LD_INT 0
9603: PPUSH
9604: PPUSH
9605: PPUSH
9606: PPUSH
// if not list then
9607: LD_VAR 0 3
9611: NOT
9612: IFFALSE 9616
// exit ;
9614: GO 10006
// result := [ ] ;
9616: LD_ADDR_VAR 0 6
9620: PUSH
9621: EMPTY
9622: ST_TO_ADDR
// for i in list do
9623: LD_ADDR_VAR 0 7
9627: PUSH
9628: LD_VAR 0 3
9632: PUSH
9633: FOR_IN
9634: IFFALSE 9836
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_VAR 0 7
9645: PPUSH
9646: LD_VAR 0 1
9650: PPUSH
9651: LD_VAR 0 2
9655: PPUSH
9656: CALL_OW 297
9660: ST_TO_ADDR
// if not result then
9661: LD_VAR 0 6
9665: NOT
9666: IFFALSE 9692
// result := [ [ i , tmp ] ] else
9668: LD_ADDR_VAR 0 6
9672: PUSH
9673: LD_VAR 0 7
9677: PUSH
9678: LD_VAR 0 9
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: EMPTY
9688: LIST
9689: ST_TO_ADDR
9690: GO 9834
// begin if result [ result ] [ 2 ] <= tmp then
9692: LD_VAR 0 6
9696: PUSH
9697: LD_VAR 0 6
9701: ARRAY
9702: PUSH
9703: LD_INT 2
9705: ARRAY
9706: PUSH
9707: LD_VAR 0 9
9711: LESSEQUAL
9712: IFFALSE 9754
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9714: LD_ADDR_VAR 0 6
9718: PUSH
9719: LD_VAR 0 6
9723: PPUSH
9724: LD_VAR 0 6
9728: PUSH
9729: LD_INT 1
9731: PLUS
9732: PPUSH
9733: LD_VAR 0 7
9737: PUSH
9738: LD_VAR 0 9
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 2
9751: ST_TO_ADDR
9752: GO 9834
// for j := 1 to result do
9754: LD_ADDR_VAR 0 8
9758: PUSH
9759: DOUBLE
9760: LD_INT 1
9762: DEC
9763: ST_TO_ADDR
9764: LD_VAR 0 6
9768: PUSH
9769: FOR_TO
9770: IFFALSE 9832
// begin if tmp < result [ j ] [ 2 ] then
9772: LD_VAR 0 9
9776: PUSH
9777: LD_VAR 0 6
9781: PUSH
9782: LD_VAR 0 8
9786: ARRAY
9787: PUSH
9788: LD_INT 2
9790: ARRAY
9791: LESS
9792: IFFALSE 9830
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9794: LD_ADDR_VAR 0 6
9798: PUSH
9799: LD_VAR 0 6
9803: PPUSH
9804: LD_VAR 0 8
9808: PPUSH
9809: LD_VAR 0 7
9813: PUSH
9814: LD_VAR 0 9
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PPUSH
9823: CALL_OW 2
9827: ST_TO_ADDR
// break ;
9828: GO 9832
// end ; end ;
9830: GO 9769
9832: POP
9833: POP
// end ; end ;
9834: GO 9633
9836: POP
9837: POP
// if result and not asc then
9838: LD_VAR 0 6
9842: IFFALSE 9851
9844: PUSH
9845: LD_VAR 0 4
9849: NOT
9850: AND
9851: IFFALSE 9926
// begin tmp := result ;
9853: LD_ADDR_VAR 0 9
9857: PUSH
9858: LD_VAR 0 6
9862: ST_TO_ADDR
// for i = tmp downto 1 do
9863: LD_ADDR_VAR 0 7
9867: PUSH
9868: DOUBLE
9869: LD_VAR 0 9
9873: INC
9874: ST_TO_ADDR
9875: LD_INT 1
9877: PUSH
9878: FOR_DOWNTO
9879: IFFALSE 9924
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9881: LD_ADDR_VAR 0 6
9885: PUSH
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_VAR 0 9
9895: PUSH
9896: LD_VAR 0 7
9900: MINUS
9901: PUSH
9902: LD_INT 1
9904: PLUS
9905: PPUSH
9906: LD_VAR 0 9
9910: PUSH
9911: LD_VAR 0 7
9915: ARRAY
9916: PPUSH
9917: CALL_OW 1
9921: ST_TO_ADDR
9922: GO 9878
9924: POP
9925: POP
// end ; tmp := [ ] ;
9926: LD_ADDR_VAR 0 9
9930: PUSH
9931: EMPTY
9932: ST_TO_ADDR
// if mode then
9933: LD_VAR 0 5
9937: IFFALSE 10006
// begin for i = 1 to result do
9939: LD_ADDR_VAR 0 7
9943: PUSH
9944: DOUBLE
9945: LD_INT 1
9947: DEC
9948: ST_TO_ADDR
9949: LD_VAR 0 6
9953: PUSH
9954: FOR_TO
9955: IFFALSE 9994
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9957: LD_ADDR_VAR 0 9
9961: PUSH
9962: LD_VAR 0 9
9966: PPUSH
9967: LD_VAR 0 7
9971: PPUSH
9972: LD_VAR 0 6
9976: PUSH
9977: LD_VAR 0 7
9981: ARRAY
9982: PUSH
9983: LD_INT 1
9985: ARRAY
9986: PPUSH
9987: CALL_OW 1
9991: ST_TO_ADDR
9992: GO 9954
9994: POP
9995: POP
// result := tmp ;
9996: LD_ADDR_VAR 0 6
10000: PUSH
10001: LD_VAR 0 9
10005: ST_TO_ADDR
// end ; end ;
10006: LD_VAR 0 6
10010: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10011: LD_INT 0
10013: PPUSH
10014: PPUSH
10015: PPUSH
10016: PPUSH
10017: PPUSH
10018: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10019: LD_ADDR_VAR 0 5
10023: PUSH
10024: LD_INT 0
10026: PUSH
10027: LD_INT 0
10029: PUSH
10030: LD_INT 0
10032: PUSH
10033: EMPTY
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if not x or not y then
10041: LD_VAR 0 2
10045: NOT
10046: IFTRUE 10055
10048: PUSH
10049: LD_VAR 0 3
10053: NOT
10054: OR
10055: IFFALSE 10059
// exit ;
10057: GO 11715
// if not range then
10059: LD_VAR 0 4
10063: NOT
10064: IFFALSE 10074
// range := 10 ;
10066: LD_ADDR_VAR 0 4
10070: PUSH
10071: LD_INT 10
10073: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10074: LD_ADDR_VAR 0 8
10078: PUSH
10079: LD_INT 81
10081: PUSH
10082: LD_VAR 0 1
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 92
10093: PUSH
10094: LD_VAR 0 2
10098: PUSH
10099: LD_VAR 0 3
10103: PUSH
10104: LD_VAR 0 4
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 3
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 3
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 69
10141: ST_TO_ADDR
// if not tmp then
10142: LD_VAR 0 8
10146: NOT
10147: IFFALSE 10151
// exit ;
10149: GO 11715
// for i in tmp do
10151: LD_ADDR_VAR 0 6
10155: PUSH
10156: LD_VAR 0 8
10160: PUSH
10161: FOR_IN
10162: IFFALSE 11690
// begin points := [ 0 , 0 , 0 ] ;
10164: LD_ADDR_VAR 0 9
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: LD_INT 0
10174: PUSH
10175: LD_INT 0
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
// bpoints := 1 ;
10183: LD_ADDR_VAR 0 10
10187: PUSH
10188: LD_INT 1
10190: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10191: LD_VAR 0 6
10195: PPUSH
10196: CALL_OW 247
10200: PUSH
10201: LD_INT 1
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 10791
10209: POP
// begin if GetClass ( i ) = 1 then
10210: LD_VAR 0 6
10214: PPUSH
10215: CALL_OW 257
10219: PUSH
10220: LD_INT 1
10222: EQUAL
10223: IFFALSE 10244
// points := [ 10 , 5 , 3 ] ;
10225: LD_ADDR_VAR 0 9
10229: PUSH
10230: LD_INT 10
10232: PUSH
10233: LD_INT 5
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10244: LD_VAR 0 6
10248: PPUSH
10249: CALL_OW 257
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: LD_INT 3
10259: PUSH
10260: LD_INT 4
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: IN
10268: IFFALSE 10289
// points := [ 3 , 2 , 1 ] ;
10270: LD_ADDR_VAR 0 9
10274: PUSH
10275: LD_INT 3
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10289: LD_VAR 0 6
10293: PPUSH
10294: CALL_OW 257
10298: PUSH
10299: LD_INT 5
10301: EQUAL
10302: IFFALSE 10323
// points := [ 130 , 5 , 2 ] ;
10304: LD_ADDR_VAR 0 9
10308: PUSH
10309: LD_INT 130
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10323: LD_VAR 0 6
10327: PPUSH
10328: CALL_OW 257
10332: PUSH
10333: LD_INT 8
10335: EQUAL
10336: IFFALSE 10357
// points := [ 35 , 35 , 30 ] ;
10338: LD_ADDR_VAR 0 9
10342: PUSH
10343: LD_INT 35
10345: PUSH
10346: LD_INT 35
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10357: LD_VAR 0 6
10361: PPUSH
10362: CALL_OW 257
10366: PUSH
10367: LD_INT 9
10369: EQUAL
10370: IFFALSE 10391
// points := [ 20 , 55 , 40 ] ;
10372: LD_ADDR_VAR 0 9
10376: PUSH
10377: LD_INT 20
10379: PUSH
10380: LD_INT 55
10382: PUSH
10383: LD_INT 40
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10391: LD_VAR 0 6
10395: PPUSH
10396: CALL_OW 257
10400: PUSH
10401: LD_INT 12
10403: PUSH
10404: LD_INT 16
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: IN
10411: IFFALSE 10432
// points := [ 5 , 3 , 2 ] ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_INT 5
10420: PUSH
10421: LD_INT 3
10423: PUSH
10424: LD_INT 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10432: LD_VAR 0 6
10436: PPUSH
10437: CALL_OW 257
10441: PUSH
10442: LD_INT 17
10444: EQUAL
10445: IFFALSE 10466
// points := [ 100 , 50 , 75 ] ;
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_INT 100
10454: PUSH
10455: LD_INT 50
10457: PUSH
10458: LD_INT 75
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10466: LD_VAR 0 6
10470: PPUSH
10471: CALL_OW 257
10475: PUSH
10476: LD_INT 15
10478: EQUAL
10479: IFFALSE 10500
// points := [ 10 , 5 , 3 ] ;
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: LD_INT 10
10488: PUSH
10489: LD_INT 5
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10500: LD_VAR 0 6
10504: PPUSH
10505: CALL_OW 257
10509: PUSH
10510: LD_INT 14
10512: EQUAL
10513: IFFALSE 10534
// points := [ 10 , 0 , 0 ] ;
10515: LD_ADDR_VAR 0 9
10519: PUSH
10520: LD_INT 10
10522: PUSH
10523: LD_INT 0
10525: PUSH
10526: LD_INT 0
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10534: LD_VAR 0 6
10538: PPUSH
10539: CALL_OW 257
10543: PUSH
10544: LD_INT 11
10546: EQUAL
10547: IFFALSE 10568
// points := [ 30 , 10 , 5 ] ;
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_INT 30
10556: PUSH
10557: LD_INT 10
10559: PUSH
10560: LD_INT 5
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10568: LD_VAR 0 1
10572: PPUSH
10573: LD_INT 5
10575: PPUSH
10576: CALL_OW 321
10580: PUSH
10581: LD_INT 2
10583: EQUAL
10584: IFFALSE 10601
// bpoints := bpoints * 1.8 ;
10586: LD_ADDR_VAR 0 10
10590: PUSH
10591: LD_VAR 0 10
10595: PUSH
10596: LD_REAL  1.80000000000000E+0000
10599: MUL
10600: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10601: LD_VAR 0 6
10605: PPUSH
10606: CALL_OW 257
10610: PUSH
10611: LD_INT 1
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: LD_INT 3
10619: PUSH
10620: LD_INT 4
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: IN
10629: IFFALSE 10649
10631: PUSH
10632: LD_VAR 0 1
10636: PPUSH
10637: LD_INT 51
10639: PPUSH
10640: CALL_OW 321
10644: PUSH
10645: LD_INT 2
10647: EQUAL
10648: AND
10649: IFFALSE 10666
// bpoints := bpoints * 1.2 ;
10651: LD_ADDR_VAR 0 10
10655: PUSH
10656: LD_VAR 0 10
10660: PUSH
10661: LD_REAL  1.20000000000000E+0000
10664: MUL
10665: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10666: LD_VAR 0 6
10670: PPUSH
10671: CALL_OW 257
10675: PUSH
10676: LD_INT 5
10678: PUSH
10679: LD_INT 7
10681: PUSH
10682: LD_INT 9
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: IN
10690: IFFALSE 10710
10692: PUSH
10693: LD_VAR 0 1
10697: PPUSH
10698: LD_INT 52
10700: PPUSH
10701: CALL_OW 321
10705: PUSH
10706: LD_INT 2
10708: EQUAL
10709: AND
10710: IFFALSE 10727
// bpoints := bpoints * 1.5 ;
10712: LD_ADDR_VAR 0 10
10716: PUSH
10717: LD_VAR 0 10
10721: PUSH
10722: LD_REAL  1.50000000000000E+0000
10725: MUL
10726: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_INT 66
10734: PPUSH
10735: CALL_OW 321
10739: PUSH
10740: LD_INT 2
10742: EQUAL
10743: IFFALSE 10760
// bpoints := bpoints * 1.1 ;
10745: LD_ADDR_VAR 0 10
10749: PUSH
10750: LD_VAR 0 10
10754: PUSH
10755: LD_REAL  1.10000000000000E+0000
10758: MUL
10759: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10760: LD_ADDR_VAR 0 10
10764: PUSH
10765: LD_VAR 0 10
10769: PUSH
10770: LD_VAR 0 6
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 259
10782: PUSH
10783: LD_REAL  1.15000000000000E+0000
10786: MUL
10787: MUL
10788: ST_TO_ADDR
// end ; unit_vehicle :
10789: GO 11619
10791: LD_INT 2
10793: DOUBLE
10794: EQUAL
10795: IFTRUE 10799
10797: GO 11607
10799: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10800: LD_VAR 0 6
10804: PPUSH
10805: CALL_OW 264
10809: PUSH
10810: LD_INT 2
10812: PUSH
10813: LD_INT 42
10815: PUSH
10816: LD_INT 24
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: IN
10824: IFFALSE 10845
// points := [ 25 , 5 , 3 ] ;
10826: LD_ADDR_VAR 0 9
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 5
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10845: LD_VAR 0 6
10849: PPUSH
10850: CALL_OW 264
10854: PUSH
10855: LD_INT 4
10857: PUSH
10858: LD_INT 43
10860: PUSH
10861: LD_INT 25
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: IN
10869: IFFALSE 10890
// points := [ 40 , 15 , 5 ] ;
10871: LD_ADDR_VAR 0 9
10875: PUSH
10876: LD_INT 40
10878: PUSH
10879: LD_INT 15
10881: PUSH
10882: LD_INT 5
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10890: LD_VAR 0 6
10894: PPUSH
10895: CALL_OW 264
10899: PUSH
10900: LD_INT 3
10902: PUSH
10903: LD_INT 23
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: IN
10910: IFFALSE 10931
// points := [ 7 , 25 , 8 ] ;
10912: LD_ADDR_VAR 0 9
10916: PUSH
10917: LD_INT 7
10919: PUSH
10920: LD_INT 25
10922: PUSH
10923: LD_INT 8
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10931: LD_VAR 0 6
10935: PPUSH
10936: CALL_OW 264
10940: PUSH
10941: LD_INT 5
10943: PUSH
10944: LD_INT 27
10946: PUSH
10947: LD_INT 44
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: IN
10955: IFFALSE 10976
// points := [ 14 , 50 , 16 ] ;
10957: LD_ADDR_VAR 0 9
10961: PUSH
10962: LD_INT 14
10964: PUSH
10965: LD_INT 50
10967: PUSH
10968: LD_INT 16
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10976: LD_VAR 0 6
10980: PPUSH
10981: CALL_OW 264
10985: PUSH
10986: LD_INT 6
10988: PUSH
10989: LD_INT 46
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: IN
10996: IFFALSE 11017
// points := [ 32 , 120 , 70 ] ;
10998: LD_ADDR_VAR 0 9
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 120
11008: PUSH
11009: LD_INT 70
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: LIST
11016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11017: LD_VAR 0 6
11021: PPUSH
11022: CALL_OW 264
11026: PUSH
11027: LD_INT 7
11029: PUSH
11030: LD_INT 28
11032: PUSH
11033: LD_INT 45
11035: PUSH
11036: LD_INT 92
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: IN
11045: IFFALSE 11066
// points := [ 35 , 20 , 45 ] ;
11047: LD_ADDR_VAR 0 9
11051: PUSH
11052: LD_INT 35
11054: PUSH
11055: LD_INT 20
11057: PUSH
11058: LD_INT 45
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11066: LD_VAR 0 6
11070: PPUSH
11071: CALL_OW 264
11075: PUSH
11076: LD_INT 47
11078: PUSH
11079: EMPTY
11080: LIST
11081: IN
11082: IFFALSE 11103
// points := [ 67 , 45 , 75 ] ;
11084: LD_ADDR_VAR 0 9
11088: PUSH
11089: LD_INT 67
11091: PUSH
11092: LD_INT 45
11094: PUSH
11095: LD_INT 75
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11103: LD_VAR 0 6
11107: PPUSH
11108: CALL_OW 264
11112: PUSH
11113: LD_INT 26
11115: PUSH
11116: EMPTY
11117: LIST
11118: IN
11119: IFFALSE 11140
// points := [ 120 , 30 , 80 ] ;
11121: LD_ADDR_VAR 0 9
11125: PUSH
11126: LD_INT 120
11128: PUSH
11129: LD_INT 30
11131: PUSH
11132: LD_INT 80
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11140: LD_VAR 0 6
11144: PPUSH
11145: CALL_OW 264
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: EMPTY
11154: LIST
11155: IN
11156: IFFALSE 11177
// points := [ 40 , 1 , 1 ] ;
11158: LD_ADDR_VAR 0 9
11162: PUSH
11163: LD_INT 40
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11177: LD_VAR 0 6
11181: PPUSH
11182: CALL_OW 264
11186: PUSH
11187: LD_INT 29
11189: PUSH
11190: EMPTY
11191: LIST
11192: IN
11193: IFFALSE 11214
// points := [ 70 , 200 , 400 ] ;
11195: LD_ADDR_VAR 0 9
11199: PUSH
11200: LD_INT 70
11202: PUSH
11203: LD_INT 200
11205: PUSH
11206: LD_INT 400
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11214: LD_VAR 0 6
11218: PPUSH
11219: CALL_OW 264
11223: PUSH
11224: LD_INT 14
11226: PUSH
11227: LD_INT 53
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: IN
11234: IFFALSE 11255
// points := [ 40 , 10 , 20 ] ;
11236: LD_ADDR_VAR 0 9
11240: PUSH
11241: LD_INT 40
11243: PUSH
11244: LD_INT 10
11246: PUSH
11247: LD_INT 20
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: LIST
11254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11255: LD_VAR 0 6
11259: PPUSH
11260: CALL_OW 264
11264: PUSH
11265: LD_INT 9
11267: PUSH
11268: EMPTY
11269: LIST
11270: IN
11271: IFFALSE 11292
// points := [ 5 , 70 , 20 ] ;
11273: LD_ADDR_VAR 0 9
11277: PUSH
11278: LD_INT 5
11280: PUSH
11281: LD_INT 70
11283: PUSH
11284: LD_INT 20
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11292: LD_VAR 0 6
11296: PPUSH
11297: CALL_OW 264
11301: PUSH
11302: LD_INT 10
11304: PUSH
11305: EMPTY
11306: LIST
11307: IN
11308: IFFALSE 11329
// points := [ 35 , 110 , 70 ] ;
11310: LD_ADDR_VAR 0 9
11314: PUSH
11315: LD_INT 35
11317: PUSH
11318: LD_INT 110
11320: PUSH
11321: LD_INT 70
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11329: LD_VAR 0 6
11333: PPUSH
11334: CALL_OW 265
11338: PUSH
11339: LD_INT 25
11341: EQUAL
11342: IFFALSE 11363
// points := [ 80 , 65 , 100 ] ;
11344: LD_ADDR_VAR 0 9
11348: PUSH
11349: LD_INT 80
11351: PUSH
11352: LD_INT 65
11354: PUSH
11355: LD_INT 100
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11363: LD_VAR 0 6
11367: PPUSH
11368: CALL_OW 263
11372: PUSH
11373: LD_INT 1
11375: EQUAL
11376: IFFALSE 11411
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11378: LD_ADDR_VAR 0 10
11382: PUSH
11383: LD_VAR 0 10
11387: PUSH
11388: LD_VAR 0 6
11392: PPUSH
11393: CALL_OW 311
11397: PPUSH
11398: LD_INT 3
11400: PPUSH
11401: CALL_OW 259
11405: PUSH
11406: LD_INT 4
11408: MUL
11409: MUL
11410: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11411: LD_VAR 0 6
11415: PPUSH
11416: CALL_OW 263
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: IFFALSE 11475
// begin j := IsControledBy ( i ) ;
11426: LD_ADDR_VAR 0 7
11430: PUSH
11431: LD_VAR 0 6
11435: PPUSH
11436: CALL_OW 312
11440: ST_TO_ADDR
// if j then
11441: LD_VAR 0 7
11445: IFFALSE 11475
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11447: LD_ADDR_VAR 0 10
11451: PUSH
11452: LD_VAR 0 10
11456: PUSH
11457: LD_VAR 0 7
11461: PPUSH
11462: LD_INT 3
11464: PPUSH
11465: CALL_OW 259
11469: PUSH
11470: LD_INT 3
11472: MUL
11473: MUL
11474: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11475: LD_VAR 0 6
11479: PPUSH
11480: CALL_OW 264
11484: PUSH
11485: LD_INT 5
11487: PUSH
11488: LD_INT 6
11490: PUSH
11491: LD_INT 46
11493: PUSH
11494: LD_INT 44
11496: PUSH
11497: LD_INT 47
11499: PUSH
11500: LD_INT 45
11502: PUSH
11503: LD_INT 28
11505: PUSH
11506: LD_INT 7
11508: PUSH
11509: LD_INT 27
11511: PUSH
11512: LD_INT 29
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: IN
11527: IFFALSE 11547
11529: PUSH
11530: LD_VAR 0 1
11534: PPUSH
11535: LD_INT 52
11537: PPUSH
11538: CALL_OW 321
11542: PUSH
11543: LD_INT 2
11545: EQUAL
11546: AND
11547: IFFALSE 11564
// bpoints := bpoints * 1.2 ;
11549: LD_ADDR_VAR 0 10
11553: PUSH
11554: LD_VAR 0 10
11558: PUSH
11559: LD_REAL  1.20000000000000E+0000
11562: MUL
11563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11564: LD_VAR 0 6
11568: PPUSH
11569: CALL_OW 264
11573: PUSH
11574: LD_INT 6
11576: PUSH
11577: LD_INT 46
11579: PUSH
11580: LD_INT 47
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: LIST
11587: IN
11588: IFFALSE 11605
// bpoints := bpoints * 1.2 ;
11590: LD_ADDR_VAR 0 10
11594: PUSH
11595: LD_VAR 0 10
11599: PUSH
11600: LD_REAL  1.20000000000000E+0000
11603: MUL
11604: ST_TO_ADDR
// end ; unit_building :
11605: GO 11619
11607: LD_INT 3
11609: DOUBLE
11610: EQUAL
11611: IFTRUE 11615
11613: GO 11618
11615: POP
// ; end ;
11616: GO 11619
11618: POP
// for j = 1 to 3 do
11619: LD_ADDR_VAR 0 7
11623: PUSH
11624: DOUBLE
11625: LD_INT 1
11627: DEC
11628: ST_TO_ADDR
11629: LD_INT 3
11631: PUSH
11632: FOR_TO
11633: IFFALSE 11686
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11635: LD_ADDR_VAR 0 5
11639: PUSH
11640: LD_VAR 0 5
11644: PPUSH
11645: LD_VAR 0 7
11649: PPUSH
11650: LD_VAR 0 5
11654: PUSH
11655: LD_VAR 0 7
11659: ARRAY
11660: PUSH
11661: LD_VAR 0 9
11665: PUSH
11666: LD_VAR 0 7
11670: ARRAY
11671: PUSH
11672: LD_VAR 0 10
11676: MUL
11677: PLUS
11678: PPUSH
11679: CALL_OW 1
11683: ST_TO_ADDR
11684: GO 11632
11686: POP
11687: POP
// end ;
11688: GO 10161
11690: POP
11691: POP
// result := Replace ( result , 4 , tmp ) ;
11692: LD_ADDR_VAR 0 5
11696: PUSH
11697: LD_VAR 0 5
11701: PPUSH
11702: LD_INT 4
11704: PPUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: CALL_OW 1
11714: ST_TO_ADDR
// end ;
11715: LD_VAR 0 5
11719: RET
// export function DangerAtRange ( unit , range ) ; begin
11720: LD_INT 0
11722: PPUSH
// if not unit then
11723: LD_VAR 0 1
11727: NOT
11728: IFFALSE 11732
// exit ;
11730: GO 11777
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_VAR 0 1
11741: PPUSH
11742: CALL_OW 255
11746: PPUSH
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL_OW 250
11756: PPUSH
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 251
11766: PPUSH
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL 10011 0 4
11776: ST_TO_ADDR
// end ;
11777: LD_VAR 0 3
11781: RET
// export function DangerInArea ( side , area ) ; begin
11782: LD_INT 0
11784: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: LD_INT 81
11797: PUSH
11798: LD_VAR 0 1
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 70
11811: ST_TO_ADDR
// end ;
11812: LD_VAR 0 3
11816: RET
// export function IsExtension ( b ) ; begin
11817: LD_INT 0
11819: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11820: LD_ADDR_VAR 0 2
11824: PUSH
11825: LD_VAR 0 1
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: LD_INT 20
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_INT 17
11841: PUSH
11842: LD_INT 24
11844: PUSH
11845: LD_INT 21
11847: PUSH
11848: LD_INT 19
11850: PUSH
11851: LD_INT 16
11853: PUSH
11854: LD_INT 25
11856: PUSH
11857: LD_INT 18
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: IN
11872: ST_TO_ADDR
// end ;
11873: LD_VAR 0 2
11877: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
11882: PPUSH
// result := [ ] ;
11883: LD_ADDR_VAR 0 4
11887: PUSH
11888: EMPTY
11889: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11890: LD_ADDR_VAR 0 5
11894: PUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 3
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 70
11914: ST_TO_ADDR
// if not tmp then
11915: LD_VAR 0 5
11919: NOT
11920: IFFALSE 11924
// exit ;
11922: GO 11988
// if checkLink then
11924: LD_VAR 0 3
11928: IFFALSE 11978
// begin for i in tmp do
11930: LD_ADDR_VAR 0 6
11934: PUSH
11935: LD_VAR 0 5
11939: PUSH
11940: FOR_IN
11941: IFFALSE 11976
// if GetBase ( i ) <> base then
11943: LD_VAR 0 6
11947: PPUSH
11948: CALL_OW 274
11952: PUSH
11953: LD_VAR 0 1
11957: NONEQUAL
11958: IFFALSE 11974
// ComLinkToBase ( base , i ) ;
11960: LD_VAR 0 1
11964: PPUSH
11965: LD_VAR 0 6
11969: PPUSH
11970: CALL_OW 169
11974: GO 11940
11976: POP
11977: POP
// end ; result := tmp ;
11978: LD_ADDR_VAR 0 4
11982: PUSH
11983: LD_VAR 0 5
11987: ST_TO_ADDR
// end ;
11988: LD_VAR 0 4
11992: RET
// export function ComComplete ( units , b ) ; var i ; begin
11993: LD_INT 0
11995: PPUSH
11996: PPUSH
// if not units then
11997: LD_VAR 0 1
12001: NOT
12002: IFFALSE 12006
// exit ;
12004: GO 12096
// for i in units do
12006: LD_ADDR_VAR 0 4
12010: PUSH
12011: LD_VAR 0 1
12015: PUSH
12016: FOR_IN
12017: IFFALSE 12094
// if BuildingStatus ( b ) = bs_build then
12019: LD_VAR 0 2
12023: PPUSH
12024: CALL_OW 461
12028: PUSH
12029: LD_INT 1
12031: EQUAL
12032: IFFALSE 12092
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12034: LD_VAR 0 4
12038: PPUSH
12039: LD_STRING h
12041: PUSH
12042: LD_VAR 0 2
12046: PPUSH
12047: CALL_OW 250
12051: PUSH
12052: LD_VAR 0 2
12056: PPUSH
12057: CALL_OW 251
12061: PUSH
12062: LD_VAR 0 2
12066: PUSH
12067: LD_INT 0
12069: PUSH
12070: LD_INT 0
12072: PUSH
12073: LD_INT 0
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: PPUSH
12088: CALL_OW 446
12092: GO 12016
12094: POP
12095: POP
// end ;
12096: LD_VAR 0 3
12100: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12101: LD_INT 0
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
12108: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12109: LD_VAR 0 1
12113: NOT
12114: IFTRUE 12131
12116: PUSH
12117: LD_VAR 0 1
12121: PPUSH
12122: CALL_OW 263
12126: PUSH
12127: LD_INT 2
12129: NONEQUAL
12130: OR
12131: IFFALSE 12135
// exit ;
12133: GO 12451
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12135: LD_ADDR_VAR 0 6
12139: PUSH
12140: LD_INT 22
12142: PUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 255
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 2
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 36
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 34
12172: PUSH
12173: LD_INT 31
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 69
12193: ST_TO_ADDR
// if not tmp then
12194: LD_VAR 0 6
12198: NOT
12199: IFFALSE 12203
// exit ;
12201: GO 12451
// result := [ ] ;
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: EMPTY
12209: ST_TO_ADDR
// for i in tmp do
12210: LD_ADDR_VAR 0 3
12214: PUSH
12215: LD_VAR 0 6
12219: PUSH
12220: FOR_IN
12221: IFFALSE 12292
// begin t := UnitsInside ( i ) ;
12223: LD_ADDR_VAR 0 4
12227: PUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: CALL_OW 313
12237: ST_TO_ADDR
// if t then
12238: LD_VAR 0 4
12242: IFFALSE 12290
// for j in t do
12244: LD_ADDR_VAR 0 7
12248: PUSH
12249: LD_VAR 0 4
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12288
// result := Replace ( result , result + 1 , j ) ;
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: LD_VAR 0 2
12266: PPUSH
12267: LD_VAR 0 2
12271: PUSH
12272: LD_INT 1
12274: PLUS
12275: PPUSH
12276: LD_VAR 0 7
12280: PPUSH
12281: CALL_OW 1
12285: ST_TO_ADDR
12286: GO 12254
12288: POP
12289: POP
// end ;
12290: GO 12220
12292: POP
12293: POP
// if not result then
12294: LD_VAR 0 2
12298: NOT
12299: IFFALSE 12303
// exit ;
12301: GO 12451
// mech := result [ 1 ] ;
12303: LD_ADDR_VAR 0 5
12307: PUSH
12308: LD_VAR 0 2
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: ST_TO_ADDR
// if result > 1 then
12317: LD_VAR 0 2
12321: PUSH
12322: LD_INT 1
12324: GREATER
12325: IFFALSE 12437
// begin for i = 2 to result do
12327: LD_ADDR_VAR 0 3
12331: PUSH
12332: DOUBLE
12333: LD_INT 2
12335: DEC
12336: ST_TO_ADDR
12337: LD_VAR 0 2
12341: PUSH
12342: FOR_TO
12343: IFFALSE 12435
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12345: LD_ADDR_VAR 0 4
12349: PUSH
12350: LD_VAR 0 2
12354: PUSH
12355: LD_VAR 0 3
12359: ARRAY
12360: PPUSH
12361: LD_INT 3
12363: PPUSH
12364: CALL_OW 259
12368: PUSH
12369: LD_VAR 0 2
12373: PUSH
12374: LD_VAR 0 3
12378: ARRAY
12379: PPUSH
12380: CALL_OW 432
12384: MINUS
12385: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12386: LD_VAR 0 4
12390: PUSH
12391: LD_VAR 0 5
12395: PPUSH
12396: LD_INT 3
12398: PPUSH
12399: CALL_OW 259
12403: PUSH
12404: LD_VAR 0 5
12408: PPUSH
12409: CALL_OW 432
12413: MINUS
12414: GREATEREQUAL
12415: IFFALSE 12433
// mech := result [ i ] ;
12417: LD_ADDR_VAR 0 5
12421: PUSH
12422: LD_VAR 0 2
12426: PUSH
12427: LD_VAR 0 3
12431: ARRAY
12432: ST_TO_ADDR
// end ;
12433: GO 12342
12435: POP
12436: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12437: LD_VAR 0 1
12441: PPUSH
12442: LD_VAR 0 5
12446: PPUSH
12447: CALL_OW 135
// end ;
12451: LD_VAR 0 2
12455: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12456: LD_INT 0
12458: PPUSH
12459: PPUSH
12460: PPUSH
12461: PPUSH
12462: PPUSH
12463: PPUSH
12464: PPUSH
12465: PPUSH
12466: PPUSH
12467: PPUSH
12468: PPUSH
12469: PPUSH
12470: PPUSH
// result := [ ] ;
12471: LD_ADDR_VAR 0 7
12475: PUSH
12476: EMPTY
12477: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12478: LD_VAR 0 1
12482: PPUSH
12483: CALL_OW 266
12487: PUSH
12488: LD_INT 0
12490: PUSH
12491: LD_INT 1
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: IN
12498: NOT
12499: IFFALSE 12503
// exit ;
12501: GO 14143
// if name then
12503: LD_VAR 0 3
12507: IFFALSE 12523
// SetBName ( base_dep , name ) ;
12509: LD_VAR 0 1
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: CALL_OW 500
// base := GetBase ( base_dep ) ;
12523: LD_ADDR_VAR 0 15
12527: PUSH
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 274
12537: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12538: LD_ADDR_VAR 0 16
12542: PUSH
12543: LD_VAR 0 1
12547: PPUSH
12548: CALL_OW 255
12552: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12553: LD_ADDR_VAR 0 17
12557: PUSH
12558: LD_VAR 0 1
12562: PPUSH
12563: CALL_OW 248
12567: ST_TO_ADDR
// if sources then
12568: LD_VAR 0 5
12572: IFFALSE 12619
// for i = 1 to 3 do
12574: LD_ADDR_VAR 0 8
12578: PUSH
12579: DOUBLE
12580: LD_INT 1
12582: DEC
12583: ST_TO_ADDR
12584: LD_INT 3
12586: PUSH
12587: FOR_TO
12588: IFFALSE 12617
// AddResourceType ( base , i , sources [ i ] ) ;
12590: LD_VAR 0 15
12594: PPUSH
12595: LD_VAR 0 8
12599: PPUSH
12600: LD_VAR 0 5
12604: PUSH
12605: LD_VAR 0 8
12609: ARRAY
12610: PPUSH
12611: CALL_OW 276
12615: GO 12587
12617: POP
12618: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12619: LD_ADDR_VAR 0 18
12623: PUSH
12624: LD_VAR 0 15
12628: PPUSH
12629: LD_VAR 0 2
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL 11878 0 3
12641: ST_TO_ADDR
// InitHc ;
12642: CALL_OW 19
// InitUc ;
12646: CALL_OW 18
// uc_side := side ;
12650: LD_ADDR_OWVAR 20
12654: PUSH
12655: LD_VAR 0 16
12659: ST_TO_ADDR
// uc_nation := nation ;
12660: LD_ADDR_OWVAR 21
12664: PUSH
12665: LD_VAR 0 17
12669: ST_TO_ADDR
// if buildings then
12670: LD_VAR 0 18
12674: IFFALSE 14002
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12676: LD_ADDR_VAR 0 19
12680: PUSH
12681: LD_VAR 0 18
12685: PPUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 30
12691: PUSH
12692: LD_INT 29
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 30
12701: PUSH
12702: LD_INT 30
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 72
12718: ST_TO_ADDR
// if tmp then
12719: LD_VAR 0 19
12723: IFFALSE 12771
// for i in tmp do
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: LD_VAR 0 19
12734: PUSH
12735: FOR_IN
12736: IFFALSE 12769
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12738: LD_VAR 0 8
12742: PPUSH
12743: CALL_OW 250
12747: PPUSH
12748: LD_VAR 0 8
12752: PPUSH
12753: CALL_OW 251
12757: PPUSH
12758: LD_VAR 0 16
12762: PPUSH
12763: CALL_OW 441
12767: GO 12735
12769: POP
12770: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12771: LD_VAR 0 18
12775: PPUSH
12776: LD_INT 2
12778: PUSH
12779: LD_INT 30
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 30
12791: PUSH
12792: LD_INT 33
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: PPUSH
12804: CALL_OW 72
12808: IFFALSE 12896
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12810: LD_ADDR_VAR 0 8
12814: PUSH
12815: LD_VAR 0 18
12819: PPUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 30
12825: PUSH
12826: LD_INT 32
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 30
12835: PUSH
12836: LD_INT 33
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 72
12852: PUSH
12853: FOR_IN
12854: IFFALSE 12894
// begin if not GetBWeapon ( i ) then
12856: LD_VAR 0 8
12860: PPUSH
12861: CALL_OW 269
12865: NOT
12866: IFFALSE 12892
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12868: LD_VAR 0 8
12872: PPUSH
12873: LD_VAR 0 8
12877: PPUSH
12878: LD_VAR 0 2
12882: PPUSH
12883: CALL 14148 0 2
12887: PPUSH
12888: CALL_OW 431
// end ;
12892: GO 12853
12894: POP
12895: POP
// end ; for i = 1 to personel do
12896: LD_ADDR_VAR 0 8
12900: PUSH
12901: DOUBLE
12902: LD_INT 1
12904: DEC
12905: ST_TO_ADDR
12906: LD_VAR 0 6
12910: PUSH
12911: FOR_TO
12912: IFFALSE 13982
// begin if i > 4 then
12914: LD_VAR 0 8
12918: PUSH
12919: LD_INT 4
12921: GREATER
12922: IFFALSE 12926
// break ;
12924: GO 13982
// case i of 1 :
12926: LD_VAR 0 8
12930: PUSH
12931: LD_INT 1
12933: DOUBLE
12934: EQUAL
12935: IFTRUE 12939
12937: GO 13019
12939: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12940: LD_ADDR_VAR 0 12
12944: PUSH
12945: LD_VAR 0 18
12949: PPUSH
12950: LD_INT 22
12952: PUSH
12953: LD_VAR 0 16
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 58
12964: PUSH
12965: EMPTY
12966: LIST
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 30
12973: PUSH
12974: LD_INT 32
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 30
12983: PUSH
12984: LD_INT 4
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 30
12993: PUSH
12994: LD_INT 5
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 72
13016: ST_TO_ADDR
13017: GO 13241
13019: LD_INT 2
13021: DOUBLE
13022: EQUAL
13023: IFTRUE 13027
13025: GO 13089
13027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13028: LD_ADDR_VAR 0 12
13032: PUSH
13033: LD_VAR 0 18
13037: PPUSH
13038: LD_INT 22
13040: PUSH
13041: LD_VAR 0 16
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 30
13055: PUSH
13056: LD_INT 0
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 30
13065: PUSH
13066: LD_INT 1
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 72
13086: ST_TO_ADDR
13087: GO 13241
13089: LD_INT 3
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13159
13097: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13098: LD_ADDR_VAR 0 12
13102: PUSH
13103: LD_VAR 0 18
13107: PPUSH
13108: LD_INT 22
13110: PUSH
13111: LD_VAR 0 16
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 30
13125: PUSH
13126: LD_INT 2
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 30
13135: PUSH
13136: LD_INT 3
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 72
13156: ST_TO_ADDR
13157: GO 13241
13159: LD_INT 4
13161: DOUBLE
13162: EQUAL
13163: IFTRUE 13167
13165: GO 13240
13167: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13168: LD_ADDR_VAR 0 12
13172: PUSH
13173: LD_VAR 0 18
13177: PPUSH
13178: LD_INT 22
13180: PUSH
13181: LD_VAR 0 16
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 2
13192: PUSH
13193: LD_INT 30
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 30
13205: PUSH
13206: LD_INT 7
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 8
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 72
13237: ST_TO_ADDR
13238: GO 13241
13240: POP
// if i = 1 then
13241: LD_VAR 0 8
13245: PUSH
13246: LD_INT 1
13248: EQUAL
13249: IFFALSE 13360
// begin tmp := [ ] ;
13251: LD_ADDR_VAR 0 19
13255: PUSH
13256: EMPTY
13257: ST_TO_ADDR
// for j in f do
13258: LD_ADDR_VAR 0 9
13262: PUSH
13263: LD_VAR 0 12
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13342
// if GetBType ( j ) = b_bunker then
13271: LD_VAR 0 9
13275: PPUSH
13276: CALL_OW 266
13280: PUSH
13281: LD_INT 32
13283: EQUAL
13284: IFFALSE 13311
// tmp := Insert ( tmp , 1 , j ) else
13286: LD_ADDR_VAR 0 19
13290: PUSH
13291: LD_VAR 0 19
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: LD_VAR 0 9
13303: PPUSH
13304: CALL_OW 2
13308: ST_TO_ADDR
13309: GO 13340
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13311: LD_ADDR_VAR 0 19
13315: PUSH
13316: LD_VAR 0 19
13320: PPUSH
13321: LD_VAR 0 19
13325: PUSH
13326: LD_INT 1
13328: PLUS
13329: PPUSH
13330: LD_VAR 0 9
13334: PPUSH
13335: CALL_OW 2
13339: ST_TO_ADDR
13340: GO 13268
13342: POP
13343: POP
// if tmp then
13344: LD_VAR 0 19
13348: IFFALSE 13360
// f := tmp ;
13350: LD_ADDR_VAR 0 12
13354: PUSH
13355: LD_VAR 0 19
13359: ST_TO_ADDR
// end ; x := personel [ i ] ;
13360: LD_ADDR_VAR 0 13
13364: PUSH
13365: LD_VAR 0 6
13369: PUSH
13370: LD_VAR 0 8
13374: ARRAY
13375: ST_TO_ADDR
// if x = - 1 then
13376: LD_VAR 0 13
13380: PUSH
13381: LD_INT 1
13383: NEG
13384: EQUAL
13385: IFFALSE 13596
// begin for j in f do
13387: LD_ADDR_VAR 0 9
13391: PUSH
13392: LD_VAR 0 12
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13592
// repeat InitHc ;
13400: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13404: LD_VAR 0 9
13408: PPUSH
13409: CALL_OW 266
13413: PUSH
13414: LD_INT 5
13416: EQUAL
13417: IFFALSE 13487
// begin if UnitsInside ( j ) < 3 then
13419: LD_VAR 0 9
13423: PPUSH
13424: CALL_OW 313
13428: PUSH
13429: LD_INT 3
13431: LESS
13432: IFFALSE 13468
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13434: LD_INT 0
13436: PPUSH
13437: LD_INT 5
13439: PUSH
13440: LD_INT 8
13442: PUSH
13443: LD_INT 9
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: LD_VAR 0 17
13455: ARRAY
13456: PPUSH
13457: LD_VAR 0 4
13461: PPUSH
13462: CALL_OW 380
13466: GO 13485
// PrepareHuman ( false , i , skill ) ;
13468: LD_INT 0
13470: PPUSH
13471: LD_VAR 0 8
13475: PPUSH
13476: LD_VAR 0 4
13480: PPUSH
13481: CALL_OW 380
// end else
13485: GO 13504
// PrepareHuman ( false , i , skill ) ;
13487: LD_INT 0
13489: PPUSH
13490: LD_VAR 0 8
13494: PPUSH
13495: LD_VAR 0 4
13499: PPUSH
13500: CALL_OW 380
// un := CreateHuman ;
13504: LD_ADDR_VAR 0 14
13508: PUSH
13509: CALL_OW 44
13513: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13514: LD_ADDR_VAR 0 7
13518: PUSH
13519: LD_VAR 0 7
13523: PPUSH
13524: LD_INT 1
13526: PPUSH
13527: LD_VAR 0 14
13531: PPUSH
13532: CALL_OW 2
13536: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13537: LD_VAR 0 14
13541: PPUSH
13542: LD_VAR 0 9
13546: PPUSH
13547: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13551: LD_VAR 0 9
13555: PPUSH
13556: CALL_OW 313
13560: PUSH
13561: LD_INT 6
13563: EQUAL
13564: IFTRUE 13588
13566: PUSH
13567: LD_VAR 0 9
13571: PPUSH
13572: CALL_OW 266
13576: PUSH
13577: LD_INT 32
13579: PUSH
13580: LD_INT 31
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: IN
13587: OR
13588: IFFALSE 13400
13590: GO 13397
13592: POP
13593: POP
// end else
13594: GO 13980
// for j = 1 to x do
13596: LD_ADDR_VAR 0 9
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_VAR 0 13
13610: PUSH
13611: FOR_TO
13612: IFFALSE 13978
// begin InitHc ;
13614: CALL_OW 19
// if not f then
13618: LD_VAR 0 12
13622: NOT
13623: IFFALSE 13712
// begin PrepareHuman ( false , i , skill ) ;
13625: LD_INT 0
13627: PPUSH
13628: LD_VAR 0 8
13632: PPUSH
13633: LD_VAR 0 4
13637: PPUSH
13638: CALL_OW 380
// un := CreateHuman ;
13642: LD_ADDR_VAR 0 14
13646: PUSH
13647: CALL_OW 44
13651: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13652: LD_ADDR_VAR 0 7
13656: PUSH
13657: LD_VAR 0 7
13661: PPUSH
13662: LD_INT 1
13664: PPUSH
13665: LD_VAR 0 14
13669: PPUSH
13670: CALL_OW 2
13674: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13675: LD_VAR 0 14
13679: PPUSH
13680: LD_VAR 0 1
13684: PPUSH
13685: CALL_OW 250
13689: PPUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 251
13699: PPUSH
13700: LD_INT 10
13702: PPUSH
13703: LD_INT 0
13705: PPUSH
13706: CALL_OW 50
// continue ;
13710: GO 13611
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13712: LD_VAR 0 12
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: CALL_OW 313
13725: IFFALSE 13753
13727: PUSH
13728: LD_VAR 0 12
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PPUSH
13737: CALL_OW 266
13741: PUSH
13742: LD_INT 32
13744: PUSH
13745: LD_INT 31
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: IN
13752: AND
13753: IFTRUE 13774
13755: PUSH
13756: LD_VAR 0 12
13760: PUSH
13761: LD_INT 1
13763: ARRAY
13764: PPUSH
13765: CALL_OW 313
13769: PUSH
13770: LD_INT 6
13772: EQUAL
13773: OR
13774: IFFALSE 13794
// f := Delete ( f , 1 ) ;
13776: LD_ADDR_VAR 0 12
13780: PUSH
13781: LD_VAR 0 12
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 3
13793: ST_TO_ADDR
// if not f then
13794: LD_VAR 0 12
13798: NOT
13799: IFFALSE 13817
// begin x := x + 2 ;
13801: LD_ADDR_VAR 0 13
13805: PUSH
13806: LD_VAR 0 13
13810: PUSH
13811: LD_INT 2
13813: PLUS
13814: ST_TO_ADDR
// continue ;
13815: GO 13611
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13817: LD_VAR 0 12
13821: PUSH
13822: LD_INT 1
13824: ARRAY
13825: PPUSH
13826: CALL_OW 266
13830: PUSH
13831: LD_INT 5
13833: EQUAL
13834: IFFALSE 13908
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13836: LD_VAR 0 12
13840: PUSH
13841: LD_INT 1
13843: ARRAY
13844: PPUSH
13845: CALL_OW 313
13849: PUSH
13850: LD_INT 3
13852: LESS
13853: IFFALSE 13889
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13855: LD_INT 0
13857: PPUSH
13858: LD_INT 5
13860: PUSH
13861: LD_INT 8
13863: PUSH
13864: LD_INT 9
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: LD_VAR 0 17
13876: ARRAY
13877: PPUSH
13878: LD_VAR 0 4
13882: PPUSH
13883: CALL_OW 380
13887: GO 13906
// PrepareHuman ( false , i , skill ) ;
13889: LD_INT 0
13891: PPUSH
13892: LD_VAR 0 8
13896: PPUSH
13897: LD_VAR 0 4
13901: PPUSH
13902: CALL_OW 380
// end else
13906: GO 13925
// PrepareHuman ( false , i , skill ) ;
13908: LD_INT 0
13910: PPUSH
13911: LD_VAR 0 8
13915: PPUSH
13916: LD_VAR 0 4
13920: PPUSH
13921: CALL_OW 380
// un := CreateHuman ;
13925: LD_ADDR_VAR 0 14
13929: PUSH
13930: CALL_OW 44
13934: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13935: LD_ADDR_VAR 0 7
13939: PUSH
13940: LD_VAR 0 7
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_VAR 0 14
13952: PPUSH
13953: CALL_OW 2
13957: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13958: LD_VAR 0 14
13962: PPUSH
13963: LD_VAR 0 12
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PPUSH
13972: CALL_OW 52
// end ;
13976: GO 13611
13978: POP
13979: POP
// end ;
13980: GO 12911
13982: POP
13983: POP
// result := result ^ buildings ;
13984: LD_ADDR_VAR 0 7
13988: PUSH
13989: LD_VAR 0 7
13993: PUSH
13994: LD_VAR 0 18
13998: ADD
13999: ST_TO_ADDR
// end else
14000: GO 14143
// begin for i = 1 to personel do
14002: LD_ADDR_VAR 0 8
14006: PUSH
14007: DOUBLE
14008: LD_INT 1
14010: DEC
14011: ST_TO_ADDR
14012: LD_VAR 0 6
14016: PUSH
14017: FOR_TO
14018: IFFALSE 14141
// begin if i > 4 then
14020: LD_VAR 0 8
14024: PUSH
14025: LD_INT 4
14027: GREATER
14028: IFFALSE 14032
// break ;
14030: GO 14141
// x := personel [ i ] ;
14032: LD_ADDR_VAR 0 13
14036: PUSH
14037: LD_VAR 0 6
14041: PUSH
14042: LD_VAR 0 8
14046: ARRAY
14047: ST_TO_ADDR
// if x = - 1 then
14048: LD_VAR 0 13
14052: PUSH
14053: LD_INT 1
14055: NEG
14056: EQUAL
14057: IFFALSE 14061
// continue ;
14059: GO 14017
// PrepareHuman ( false , i , skill ) ;
14061: LD_INT 0
14063: PPUSH
14064: LD_VAR 0 8
14068: PPUSH
14069: LD_VAR 0 4
14073: PPUSH
14074: CALL_OW 380
// un := CreateHuman ;
14078: LD_ADDR_VAR 0 14
14082: PUSH
14083: CALL_OW 44
14087: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14088: LD_VAR 0 14
14092: PPUSH
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 250
14102: PPUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 251
14112: PPUSH
14113: LD_INT 10
14115: PPUSH
14116: LD_INT 0
14118: PPUSH
14119: CALL_OW 50
// result := result ^ un ;
14123: LD_ADDR_VAR 0 7
14127: PUSH
14128: LD_VAR 0 7
14132: PUSH
14133: LD_VAR 0 14
14137: ADD
14138: ST_TO_ADDR
// end ;
14139: GO 14017
14141: POP
14142: POP
// end ; end ;
14143: LD_VAR 0 7
14147: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14148: LD_INT 0
14150: PPUSH
14151: PPUSH
14152: PPUSH
14153: PPUSH
14154: PPUSH
14155: PPUSH
14156: PPUSH
14157: PPUSH
14158: PPUSH
14159: PPUSH
14160: PPUSH
14161: PPUSH
14162: PPUSH
14163: PPUSH
14164: PPUSH
14165: PPUSH
// result := false ;
14166: LD_ADDR_VAR 0 3
14170: PUSH
14171: LD_INT 0
14173: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14174: LD_VAR 0 1
14178: NOT
14179: IFTRUE 14204
14181: PUSH
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 266
14191: PUSH
14192: LD_INT 32
14194: PUSH
14195: LD_INT 33
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: IN
14202: NOT
14203: OR
14204: IFFALSE 14208
// exit ;
14206: GO 15343
// nat := GetNation ( tower ) ;
14208: LD_ADDR_VAR 0 12
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 248
14222: ST_TO_ADDR
// side := GetSide ( tower ) ;
14223: LD_ADDR_VAR 0 16
14227: PUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 255
14237: ST_TO_ADDR
// x := GetX ( tower ) ;
14238: LD_ADDR_VAR 0 10
14242: PUSH
14243: LD_VAR 0 1
14247: PPUSH
14248: CALL_OW 250
14252: ST_TO_ADDR
// y := GetY ( tower ) ;
14253: LD_ADDR_VAR 0 11
14257: PUSH
14258: LD_VAR 0 1
14262: PPUSH
14263: CALL_OW 251
14267: ST_TO_ADDR
// if not x or not y then
14268: LD_VAR 0 10
14272: NOT
14273: IFTRUE 14282
14275: PUSH
14276: LD_VAR 0 11
14280: NOT
14281: OR
14282: IFFALSE 14286
// exit ;
14284: GO 15343
// weapon := 0 ;
14286: LD_ADDR_VAR 0 18
14290: PUSH
14291: LD_INT 0
14293: ST_TO_ADDR
// fac_list := [ ] ;
14294: LD_ADDR_VAR 0 17
14298: PUSH
14299: EMPTY
14300: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14301: LD_ADDR_VAR 0 6
14305: PUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: CALL_OW 274
14315: PPUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_INT 0
14323: PPUSH
14324: CALL 11878 0 3
14328: PPUSH
14329: LD_INT 30
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 72
14343: ST_TO_ADDR
// if not factories then
14344: LD_VAR 0 6
14348: NOT
14349: IFFALSE 14353
// exit ;
14351: GO 15343
// for i in factories do
14353: LD_ADDR_VAR 0 8
14357: PUSH
14358: LD_VAR 0 6
14362: PUSH
14363: FOR_IN
14364: IFFALSE 14389
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14366: LD_ADDR_VAR 0 17
14370: PUSH
14371: LD_VAR 0 17
14375: PUSH
14376: LD_VAR 0 8
14380: PPUSH
14381: CALL_OW 478
14385: UNION
14386: ST_TO_ADDR
14387: GO 14363
14389: POP
14390: POP
// if not fac_list then
14391: LD_VAR 0 17
14395: NOT
14396: IFFALSE 14400
// exit ;
14398: GO 15343
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14400: LD_ADDR_VAR 0 5
14404: PUSH
14405: LD_INT 4
14407: PUSH
14408: LD_INT 5
14410: PUSH
14411: LD_INT 9
14413: PUSH
14414: LD_INT 10
14416: PUSH
14417: LD_INT 6
14419: PUSH
14420: LD_INT 7
14422: PUSH
14423: LD_INT 11
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 27
14437: PUSH
14438: LD_INT 28
14440: PUSH
14441: LD_INT 26
14443: PUSH
14444: LD_INT 30
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 43
14455: PUSH
14456: LD_INT 44
14458: PUSH
14459: LD_INT 46
14461: PUSH
14462: LD_INT 45
14464: PUSH
14465: LD_INT 47
14467: PUSH
14468: LD_INT 49
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: LD_VAR 0 12
14488: ARRAY
14489: ST_TO_ADDR
// list := list isect fac_list ;
14490: LD_ADDR_VAR 0 5
14494: PUSH
14495: LD_VAR 0 5
14499: PUSH
14500: LD_VAR 0 17
14504: ISECT
14505: ST_TO_ADDR
// if not list then
14506: LD_VAR 0 5
14510: NOT
14511: IFFALSE 14515
// exit ;
14513: GO 15343
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14515: LD_VAR 0 12
14519: PUSH
14520: LD_INT 3
14522: EQUAL
14523: IFFALSE 14535
14525: PUSH
14526: LD_INT 49
14528: PUSH
14529: LD_VAR 0 5
14533: IN
14534: AND
14535: IFFALSE 14555
14537: PUSH
14538: LD_INT 31
14540: PPUSH
14541: LD_VAR 0 16
14545: PPUSH
14546: CALL_OW 321
14550: PUSH
14551: LD_INT 2
14553: EQUAL
14554: AND
14555: IFFALSE 14615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14557: LD_INT 22
14559: PUSH
14560: LD_VAR 0 16
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 35
14571: PUSH
14572: LD_INT 49
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 91
14581: PUSH
14582: LD_VAR 0 1
14586: PUSH
14587: LD_INT 10
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 69
14604: NOT
14605: IFFALSE 14615
// weapon := ru_time_lapser ;
14607: LD_ADDR_VAR 0 18
14611: PUSH
14612: LD_INT 49
14614: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14615: LD_VAR 0 12
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: LD_INT 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: IN
14630: IFFALSE 14654
14632: PUSH
14633: LD_INT 11
14635: PUSH
14636: LD_VAR 0 5
14640: IN
14641: IFTRUE 14653
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_VAR 0 5
14651: IN
14652: OR
14653: AND
14654: IFFALSE 14674
14656: PUSH
14657: LD_INT 6
14659: PPUSH
14660: LD_VAR 0 16
14664: PPUSH
14665: CALL_OW 321
14669: PUSH
14670: LD_INT 2
14672: EQUAL
14673: AND
14674: IFFALSE 14841
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14676: LD_INT 22
14678: PUSH
14679: LD_VAR 0 16
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 35
14693: PUSH
14694: LD_INT 11
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 35
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 91
14718: PUSH
14719: LD_VAR 0 1
14723: PUSH
14724: LD_INT 18
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: NOT
14742: IFFALSE 14818
14744: PUSH
14745: LD_INT 22
14747: PUSH
14748: LD_VAR 0 16
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 2
14759: PUSH
14760: LD_INT 30
14762: PUSH
14763: LD_INT 32
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 30
14772: PUSH
14773: LD_INT 33
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 91
14787: PUSH
14788: LD_VAR 0 1
14792: PUSH
14793: LD_INT 12
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: PPUSH
14809: CALL_OW 69
14813: PUSH
14814: LD_INT 2
14816: GREATER
14817: AND
14818: IFFALSE 14841
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14820: LD_ADDR_VAR 0 18
14824: PUSH
14825: LD_INT 11
14827: PUSH
14828: LD_INT 30
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 12
14839: ARRAY
14840: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14841: LD_VAR 0 18
14845: NOT
14846: IFFALSE 14866
14848: PUSH
14849: LD_INT 40
14851: PPUSH
14852: LD_VAR 0 16
14856: PPUSH
14857: CALL_OW 321
14861: PUSH
14862: LD_INT 2
14864: EQUAL
14865: AND
14866: IFFALSE 14902
14868: PUSH
14869: LD_INT 7
14871: PUSH
14872: LD_VAR 0 5
14876: IN
14877: IFTRUE 14889
14879: PUSH
14880: LD_INT 28
14882: PUSH
14883: LD_VAR 0 5
14887: IN
14888: OR
14889: IFTRUE 14901
14891: PUSH
14892: LD_INT 45
14894: PUSH
14895: LD_VAR 0 5
14899: IN
14900: OR
14901: AND
14902: IFFALSE 15156
// begin hex := GetHexInfo ( x , y ) ;
14904: LD_ADDR_VAR 0 4
14908: PUSH
14909: LD_VAR 0 10
14913: PPUSH
14914: LD_VAR 0 11
14918: PPUSH
14919: CALL_OW 546
14923: ST_TO_ADDR
// if hex [ 1 ] then
14924: LD_VAR 0 4
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: IFFALSE 14936
// exit ;
14934: GO 15343
// height := hex [ 2 ] ;
14936: LD_ADDR_VAR 0 15
14940: PUSH
14941: LD_VAR 0 4
14945: PUSH
14946: LD_INT 2
14948: ARRAY
14949: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14950: LD_ADDR_VAR 0 14
14954: PUSH
14955: LD_INT 0
14957: PUSH
14958: LD_INT 2
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: LD_INT 5
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: ST_TO_ADDR
// for i in tmp do
14973: LD_ADDR_VAR 0 8
14977: PUSH
14978: LD_VAR 0 14
14982: PUSH
14983: FOR_IN
14984: IFFALSE 15154
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14986: LD_ADDR_VAR 0 9
14990: PUSH
14991: LD_VAR 0 10
14995: PPUSH
14996: LD_VAR 0 8
15000: PPUSH
15001: LD_INT 5
15003: PPUSH
15004: CALL_OW 272
15008: PUSH
15009: LD_VAR 0 11
15013: PPUSH
15014: LD_VAR 0 8
15018: PPUSH
15019: LD_INT 5
15021: PPUSH
15022: CALL_OW 273
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15031: LD_VAR 0 9
15035: PUSH
15036: LD_INT 1
15038: ARRAY
15039: PPUSH
15040: LD_VAR 0 9
15044: PUSH
15045: LD_INT 2
15047: ARRAY
15048: PPUSH
15049: CALL_OW 488
15053: IFFALSE 15152
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15055: LD_ADDR_VAR 0 4
15059: PUSH
15060: LD_VAR 0 9
15064: PUSH
15065: LD_INT 1
15067: ARRAY
15068: PPUSH
15069: LD_VAR 0 9
15073: PUSH
15074: LD_INT 2
15076: ARRAY
15077: PPUSH
15078: CALL_OW 546
15082: ST_TO_ADDR
// if hex [ 1 ] then
15083: LD_VAR 0 4
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: IFFALSE 15095
// continue ;
15093: GO 14983
// h := hex [ 2 ] ;
15095: LD_ADDR_VAR 0 13
15099: PUSH
15100: LD_VAR 0 4
15104: PUSH
15105: LD_INT 2
15107: ARRAY
15108: ST_TO_ADDR
// if h + 7 < height then
15109: LD_VAR 0 13
15113: PUSH
15114: LD_INT 7
15116: PLUS
15117: PUSH
15118: LD_VAR 0 15
15122: LESS
15123: IFFALSE 15152
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15125: LD_ADDR_VAR 0 18
15129: PUSH
15130: LD_INT 7
15132: PUSH
15133: LD_INT 28
15135: PUSH
15136: LD_INT 45
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: LD_VAR 0 12
15148: ARRAY
15149: ST_TO_ADDR
// break ;
15150: GO 15154
// end ; end ; end ;
15152: GO 14983
15154: POP
15155: POP
// end ; if not weapon then
15156: LD_VAR 0 18
15160: NOT
15161: IFFALSE 15221
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15163: LD_ADDR_VAR 0 5
15167: PUSH
15168: LD_VAR 0 5
15172: PUSH
15173: LD_INT 11
15175: PUSH
15176: LD_INT 30
15178: PUSH
15179: LD_INT 49
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: DIFF
15187: ST_TO_ADDR
// if not list then
15188: LD_VAR 0 5
15192: NOT
15193: IFFALSE 15197
// exit ;
15195: GO 15343
// weapon := list [ rand ( 1 , list ) ] ;
15197: LD_ADDR_VAR 0 18
15201: PUSH
15202: LD_VAR 0 5
15206: PUSH
15207: LD_INT 1
15209: PPUSH
15210: LD_VAR 0 5
15214: PPUSH
15215: CALL_OW 12
15219: ARRAY
15220: ST_TO_ADDR
// end ; if weapon then
15221: LD_VAR 0 18
15225: IFFALSE 15343
// begin tmp := CostOfWeapon ( weapon ) ;
15227: LD_ADDR_VAR 0 14
15231: PUSH
15232: LD_VAR 0 18
15236: PPUSH
15237: CALL_OW 451
15241: ST_TO_ADDR
// j := GetBase ( tower ) ;
15242: LD_ADDR_VAR 0 9
15246: PUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 274
15256: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15257: LD_VAR 0 9
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: CALL_OW 275
15269: PUSH
15270: LD_VAR 0 14
15274: PUSH
15275: LD_INT 1
15277: ARRAY
15278: GREATEREQUAL
15279: IFFALSE 15305
15281: PUSH
15282: LD_VAR 0 9
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 275
15294: PUSH
15295: LD_VAR 0 14
15299: PUSH
15300: LD_INT 2
15302: ARRAY
15303: GREATEREQUAL
15304: AND
15305: IFFALSE 15331
15307: PUSH
15308: LD_VAR 0 9
15312: PPUSH
15313: LD_INT 3
15315: PPUSH
15316: CALL_OW 275
15320: PUSH
15321: LD_VAR 0 14
15325: PUSH
15326: LD_INT 3
15328: ARRAY
15329: GREATEREQUAL
15330: AND
15331: IFFALSE 15343
// result := weapon ;
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_VAR 0 18
15342: ST_TO_ADDR
// end ; end ;
15343: LD_VAR 0 3
15347: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
// result := true ;
15352: LD_ADDR_VAR 0 3
15356: PUSH
15357: LD_INT 1
15359: ST_TO_ADDR
// if array1 = array2 then
15360: LD_VAR 0 1
15364: PUSH
15365: LD_VAR 0 2
15369: EQUAL
15370: IFFALSE 15430
// begin for i = 1 to array1 do
15372: LD_ADDR_VAR 0 4
15376: PUSH
15377: DOUBLE
15378: LD_INT 1
15380: DEC
15381: ST_TO_ADDR
15382: LD_VAR 0 1
15386: PUSH
15387: FOR_TO
15388: IFFALSE 15426
// if array1 [ i ] <> array2 [ i ] then
15390: LD_VAR 0 1
15394: PUSH
15395: LD_VAR 0 4
15399: ARRAY
15400: PUSH
15401: LD_VAR 0 2
15405: PUSH
15406: LD_VAR 0 4
15410: ARRAY
15411: NONEQUAL
15412: IFFALSE 15424
// begin result := false ;
15414: LD_ADDR_VAR 0 3
15418: PUSH
15419: LD_INT 0
15421: ST_TO_ADDR
// break ;
15422: GO 15426
// end ;
15424: GO 15387
15426: POP
15427: POP
// end else
15428: GO 15438
// result := false ;
15430: LD_ADDR_VAR 0 3
15434: PUSH
15435: LD_INT 0
15437: ST_TO_ADDR
// end ;
15438: LD_VAR 0 3
15442: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15443: LD_INT 0
15445: PPUSH
15446: PPUSH
// if not array1 or not array2 then
15447: LD_VAR 0 1
15451: NOT
15452: IFTRUE 15461
15454: PUSH
15455: LD_VAR 0 2
15459: NOT
15460: OR
15461: IFFALSE 15465
// exit ;
15463: GO 15529
// result := true ;
15465: LD_ADDR_VAR 0 3
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// for i = 1 to array1 do
15473: LD_ADDR_VAR 0 4
15477: PUSH
15478: DOUBLE
15479: LD_INT 1
15481: DEC
15482: ST_TO_ADDR
15483: LD_VAR 0 1
15487: PUSH
15488: FOR_TO
15489: IFFALSE 15527
// if array1 [ i ] <> array2 [ i ] then
15491: LD_VAR 0 1
15495: PUSH
15496: LD_VAR 0 4
15500: ARRAY
15501: PUSH
15502: LD_VAR 0 2
15506: PUSH
15507: LD_VAR 0 4
15511: ARRAY
15512: NONEQUAL
15513: IFFALSE 15525
// begin result := false ;
15515: LD_ADDR_VAR 0 3
15519: PUSH
15520: LD_INT 0
15522: ST_TO_ADDR
// break ;
15523: GO 15527
// end ;
15525: GO 15488
15527: POP
15528: POP
// end ;
15529: LD_VAR 0 3
15533: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15534: LD_INT 0
15536: PPUSH
15537: PPUSH
15538: PPUSH
// pom := GetBase ( fac ) ;
15539: LD_ADDR_VAR 0 5
15543: PUSH
15544: LD_VAR 0 1
15548: PPUSH
15549: CALL_OW 274
15553: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15554: LD_ADDR_VAR 0 4
15558: PUSH
15559: LD_VAR 0 2
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: LD_VAR 0 2
15572: PUSH
15573: LD_INT 2
15575: ARRAY
15576: PPUSH
15577: LD_VAR 0 2
15581: PUSH
15582: LD_INT 3
15584: ARRAY
15585: PPUSH
15586: LD_VAR 0 2
15590: PUSH
15591: LD_INT 4
15593: ARRAY
15594: PPUSH
15595: CALL_OW 449
15599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15600: LD_ADDR_VAR 0 3
15604: PUSH
15605: LD_VAR 0 5
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: CALL_OW 275
15617: PUSH
15618: LD_VAR 0 4
15622: PUSH
15623: LD_INT 1
15625: ARRAY
15626: GREATEREQUAL
15627: IFFALSE 15653
15629: PUSH
15630: LD_VAR 0 5
15634: PPUSH
15635: LD_INT 2
15637: PPUSH
15638: CALL_OW 275
15642: PUSH
15643: LD_VAR 0 4
15647: PUSH
15648: LD_INT 2
15650: ARRAY
15651: GREATEREQUAL
15652: AND
15653: IFFALSE 15679
15655: PUSH
15656: LD_VAR 0 5
15660: PPUSH
15661: LD_INT 3
15663: PPUSH
15664: CALL_OW 275
15668: PUSH
15669: LD_VAR 0 4
15673: PUSH
15674: LD_INT 3
15676: ARRAY
15677: GREATEREQUAL
15678: AND
15679: ST_TO_ADDR
// end ;
15680: LD_VAR 0 3
15684: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15685: LD_INT 0
15687: PPUSH
15688: PPUSH
15689: PPUSH
15690: PPUSH
// pom := GetBase ( building ) ;
15691: LD_ADDR_VAR 0 3
15695: PUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 274
15705: ST_TO_ADDR
// if not pom then
15706: LD_VAR 0 3
15710: NOT
15711: IFFALSE 15715
// exit ;
15713: GO 15889
// btype := GetBType ( building ) ;
15715: LD_ADDR_VAR 0 5
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 266
15729: ST_TO_ADDR
// if btype = b_armoury then
15730: LD_VAR 0 5
15734: PUSH
15735: LD_INT 4
15737: EQUAL
15738: IFFALSE 15748
// btype := b_barracks ;
15740: LD_ADDR_VAR 0 5
15744: PUSH
15745: LD_INT 5
15747: ST_TO_ADDR
// if btype = b_depot then
15748: LD_VAR 0 5
15752: PUSH
15753: LD_INT 0
15755: EQUAL
15756: IFFALSE 15766
// btype := b_warehouse ;
15758: LD_ADDR_VAR 0 5
15762: PUSH
15763: LD_INT 1
15765: ST_TO_ADDR
// if btype = b_workshop then
15766: LD_VAR 0 5
15770: PUSH
15771: LD_INT 2
15773: EQUAL
15774: IFFALSE 15784
// btype := b_factory ;
15776: LD_ADDR_VAR 0 5
15780: PUSH
15781: LD_INT 3
15783: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15784: LD_ADDR_VAR 0 4
15788: PUSH
15789: LD_VAR 0 5
15793: PPUSH
15794: LD_VAR 0 1
15798: PPUSH
15799: CALL_OW 248
15803: PPUSH
15804: CALL_OW 450
15808: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15809: LD_ADDR_VAR 0 2
15813: PUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 275
15826: PUSH
15827: LD_VAR 0 4
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: GREATEREQUAL
15836: IFFALSE 15862
15838: PUSH
15839: LD_VAR 0 3
15843: PPUSH
15844: LD_INT 2
15846: PPUSH
15847: CALL_OW 275
15851: PUSH
15852: LD_VAR 0 4
15856: PUSH
15857: LD_INT 2
15859: ARRAY
15860: GREATEREQUAL
15861: AND
15862: IFFALSE 15888
15864: PUSH
15865: LD_VAR 0 3
15869: PPUSH
15870: LD_INT 3
15872: PPUSH
15873: CALL_OW 275
15877: PUSH
15878: LD_VAR 0 4
15882: PUSH
15883: LD_INT 3
15885: ARRAY
15886: GREATEREQUAL
15887: AND
15888: ST_TO_ADDR
// end ;
15889: LD_VAR 0 2
15893: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15894: LD_INT 0
15896: PPUSH
15897: PPUSH
15898: PPUSH
// pom := GetBase ( building ) ;
15899: LD_ADDR_VAR 0 4
15903: PUSH
15904: LD_VAR 0 1
15908: PPUSH
15909: CALL_OW 274
15913: ST_TO_ADDR
// if not pom then
15914: LD_VAR 0 4
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 16028
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15923: LD_ADDR_VAR 0 5
15927: PUSH
15928: LD_VAR 0 2
15932: PPUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 248
15942: PPUSH
15943: CALL_OW 450
15947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15948: LD_ADDR_VAR 0 3
15952: PUSH
15953: LD_VAR 0 4
15957: PPUSH
15958: LD_INT 1
15960: PPUSH
15961: CALL_OW 275
15965: PUSH
15966: LD_VAR 0 5
15970: PUSH
15971: LD_INT 1
15973: ARRAY
15974: GREATEREQUAL
15975: IFFALSE 16001
15977: PUSH
15978: LD_VAR 0 4
15982: PPUSH
15983: LD_INT 2
15985: PPUSH
15986: CALL_OW 275
15990: PUSH
15991: LD_VAR 0 5
15995: PUSH
15996: LD_INT 2
15998: ARRAY
15999: GREATEREQUAL
16000: AND
16001: IFFALSE 16027
16003: PUSH
16004: LD_VAR 0 4
16008: PPUSH
16009: LD_INT 3
16011: PPUSH
16012: CALL_OW 275
16016: PUSH
16017: LD_VAR 0 5
16021: PUSH
16022: LD_INT 3
16024: ARRAY
16025: GREATEREQUAL
16026: AND
16027: ST_TO_ADDR
// end ;
16028: LD_VAR 0 3
16032: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16033: LD_INT 0
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
// result := false ;
16046: LD_ADDR_VAR 0 8
16050: PUSH
16051: LD_INT 0
16053: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16054: LD_VAR 0 5
16058: NOT
16059: IFTRUE 16068
16061: PUSH
16062: LD_VAR 0 1
16066: NOT
16067: OR
16068: IFTRUE 16077
16070: PUSH
16071: LD_VAR 0 2
16075: NOT
16076: OR
16077: IFTRUE 16086
16079: PUSH
16080: LD_VAR 0 3
16084: NOT
16085: OR
16086: IFFALSE 16090
// exit ;
16088: GO 16916
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16090: LD_ADDR_VAR 0 14
16094: PUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: LD_VAR 0 2
16104: PPUSH
16105: LD_VAR 0 3
16109: PPUSH
16110: LD_VAR 0 4
16114: PPUSH
16115: LD_VAR 0 5
16119: PUSH
16120: LD_INT 1
16122: ARRAY
16123: PPUSH
16124: CALL_OW 248
16128: PPUSH
16129: LD_INT 0
16131: PPUSH
16132: CALL 18197 0 6
16136: ST_TO_ADDR
// if not hexes then
16137: LD_VAR 0 14
16141: NOT
16142: IFFALSE 16146
// exit ;
16144: GO 16916
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16146: LD_ADDR_VAR 0 17
16150: PUSH
16151: LD_VAR 0 5
16155: PPUSH
16156: LD_INT 22
16158: PUSH
16159: LD_VAR 0 13
16163: PPUSH
16164: CALL_OW 255
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 2
16175: PUSH
16176: LD_INT 30
16178: PUSH
16179: LD_INT 0
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 30
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PPUSH
16205: CALL_OW 72
16209: ST_TO_ADDR
// for i = 1 to hexes do
16210: LD_ADDR_VAR 0 9
16214: PUSH
16215: DOUBLE
16216: LD_INT 1
16218: DEC
16219: ST_TO_ADDR
16220: LD_VAR 0 14
16224: PUSH
16225: FOR_TO
16226: IFFALSE 16914
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16228: LD_ADDR_VAR 0 13
16232: PUSH
16233: LD_VAR 0 14
16237: PUSH
16238: LD_VAR 0 9
16242: ARRAY
16243: PUSH
16244: LD_INT 1
16246: ARRAY
16247: PPUSH
16248: LD_VAR 0 14
16252: PUSH
16253: LD_VAR 0 9
16257: ARRAY
16258: PUSH
16259: LD_INT 2
16261: ARRAY
16262: PPUSH
16263: CALL_OW 428
16267: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16268: LD_VAR 0 14
16272: PUSH
16273: LD_VAR 0 9
16277: ARRAY
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: LD_VAR 0 14
16287: PUSH
16288: LD_VAR 0 9
16292: ARRAY
16293: PUSH
16294: LD_INT 2
16296: ARRAY
16297: PPUSH
16298: CALL_OW 351
16302: IFTRUE 16341
16304: PUSH
16305: LD_VAR 0 14
16309: PUSH
16310: LD_VAR 0 9
16314: ARRAY
16315: PUSH
16316: LD_INT 1
16318: ARRAY
16319: PPUSH
16320: LD_VAR 0 14
16324: PUSH
16325: LD_VAR 0 9
16329: ARRAY
16330: PUSH
16331: LD_INT 2
16333: ARRAY
16334: PPUSH
16335: CALL_OW 488
16339: NOT
16340: OR
16341: IFTRUE 16358
16343: PUSH
16344: LD_VAR 0 13
16348: PPUSH
16349: CALL_OW 247
16353: PUSH
16354: LD_INT 3
16356: EQUAL
16357: OR
16358: IFFALSE 16364
// exit ;
16360: POP
16361: POP
16362: GO 16916
// if not tmp then
16364: LD_VAR 0 13
16368: NOT
16369: IFFALSE 16373
// continue ;
16371: GO 16225
// result := true ;
16373: LD_ADDR_VAR 0 8
16377: PUSH
16378: LD_INT 1
16380: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16381: LD_VAR 0 6
16385: IFFALSE 16402
16387: PUSH
16388: LD_VAR 0 13
16392: PPUSH
16393: CALL_OW 247
16397: PUSH
16398: LD_INT 2
16400: EQUAL
16401: AND
16402: IFFALSE 16419
16404: PUSH
16405: LD_VAR 0 13
16409: PPUSH
16410: CALL_OW 263
16414: PUSH
16415: LD_INT 1
16417: EQUAL
16418: AND
16419: IFFALSE 16583
// begin if IsDrivenBy ( tmp ) then
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 311
16430: IFFALSE 16434
// continue ;
16432: GO 16225
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16434: LD_VAR 0 6
16438: PPUSH
16439: LD_INT 3
16441: PUSH
16442: LD_INT 60
16444: PUSH
16445: EMPTY
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 3
16454: PUSH
16455: LD_INT 55
16457: PUSH
16458: EMPTY
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 72
16473: IFFALSE 16581
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16475: LD_ADDR_VAR 0 18
16479: PUSH
16480: LD_VAR 0 6
16484: PPUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 60
16490: PUSH
16491: EMPTY
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: LD_INT 55
16503: PUSH
16504: EMPTY
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 72
16519: PUSH
16520: LD_INT 1
16522: ARRAY
16523: ST_TO_ADDR
// if IsInUnit ( driver ) then
16524: LD_VAR 0 18
16528: PPUSH
16529: CALL_OW 310
16533: IFFALSE 16544
// ComExit ( driver ) ;
16535: LD_VAR 0 18
16539: PPUSH
16540: CALL 42187 0 1
// AddComEnterUnit ( driver , tmp ) ;
16544: LD_VAR 0 18
16548: PPUSH
16549: LD_VAR 0 13
16553: PPUSH
16554: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16558: LD_VAR 0 18
16562: PPUSH
16563: LD_VAR 0 7
16567: PPUSH
16568: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16572: LD_VAR 0 18
16576: PPUSH
16577: CALL_OW 181
// end ; continue ;
16581: GO 16225
// end ; if not cleaners or not tmp in cleaners then
16583: LD_VAR 0 6
16587: NOT
16588: IFTRUE 16603
16590: PUSH
16591: LD_VAR 0 13
16595: PUSH
16596: LD_VAR 0 6
16600: IN
16601: NOT
16602: OR
16603: IFFALSE 16912
// begin if dep then
16605: LD_VAR 0 17
16609: IFFALSE 16745
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16611: LD_ADDR_VAR 0 16
16615: PUSH
16616: LD_VAR 0 17
16620: PUSH
16621: LD_INT 1
16623: ARRAY
16624: PPUSH
16625: CALL_OW 250
16629: PPUSH
16630: LD_VAR 0 17
16634: PUSH
16635: LD_INT 1
16637: ARRAY
16638: PPUSH
16639: CALL_OW 254
16643: PPUSH
16644: LD_INT 5
16646: PPUSH
16647: CALL_OW 272
16651: PUSH
16652: LD_VAR 0 17
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: CALL_OW 251
16665: PPUSH
16666: LD_VAR 0 17
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: PPUSH
16675: CALL_OW 254
16679: PPUSH
16680: LD_INT 5
16682: PPUSH
16683: CALL_OW 273
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16692: LD_VAR 0 16
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: LD_VAR 0 16
16705: PUSH
16706: LD_INT 2
16708: ARRAY
16709: PPUSH
16710: CALL_OW 488
16714: IFFALSE 16745
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16716: LD_VAR 0 13
16720: PPUSH
16721: LD_VAR 0 16
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: PPUSH
16730: LD_VAR 0 16
16734: PUSH
16735: LD_INT 2
16737: ARRAY
16738: PPUSH
16739: CALL_OW 111
// continue ;
16743: GO 16225
// end ; end ; r := GetDir ( tmp ) ;
16745: LD_ADDR_VAR 0 15
16749: PUSH
16750: LD_VAR 0 13
16754: PPUSH
16755: CALL_OW 254
16759: ST_TO_ADDR
// if r = 5 then
16760: LD_VAR 0 15
16764: PUSH
16765: LD_INT 5
16767: EQUAL
16768: IFFALSE 16778
// r := 0 ;
16770: LD_ADDR_VAR 0 15
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// for j = r to 5 do
16778: LD_ADDR_VAR 0 10
16782: PUSH
16783: DOUBLE
16784: LD_VAR 0 15
16788: DEC
16789: ST_TO_ADDR
16790: LD_INT 5
16792: PUSH
16793: FOR_TO
16794: IFFALSE 16910
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16796: LD_ADDR_VAR 0 11
16800: PUSH
16801: LD_VAR 0 13
16805: PPUSH
16806: CALL_OW 250
16810: PPUSH
16811: LD_VAR 0 10
16815: PPUSH
16816: LD_INT 2
16818: PPUSH
16819: CALL_OW 272
16823: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16824: LD_ADDR_VAR 0 12
16828: PUSH
16829: LD_VAR 0 13
16833: PPUSH
16834: CALL_OW 251
16838: PPUSH
16839: LD_VAR 0 10
16843: PPUSH
16844: LD_INT 2
16846: PPUSH
16847: CALL_OW 273
16851: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16852: LD_VAR 0 11
16856: PPUSH
16857: LD_VAR 0 12
16861: PPUSH
16862: CALL_OW 488
16866: IFFALSE 16885
16868: PUSH
16869: LD_VAR 0 11
16873: PPUSH
16874: LD_VAR 0 12
16878: PPUSH
16879: CALL_OW 428
16883: NOT
16884: AND
16885: IFFALSE 16908
// begin ComMoveXY ( tmp , _x , _y ) ;
16887: LD_VAR 0 13
16891: PPUSH
16892: LD_VAR 0 11
16896: PPUSH
16897: LD_VAR 0 12
16901: PPUSH
16902: CALL_OW 111
// break ;
16906: GO 16910
// end ; end ;
16908: GO 16793
16910: POP
16911: POP
// end ; end ;
16912: GO 16225
16914: POP
16915: POP
// end ;
16916: LD_VAR 0 8
16920: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16921: LD_INT 0
16923: PPUSH
// result := true ;
16924: LD_ADDR_VAR 0 3
16928: PUSH
16929: LD_INT 1
16931: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16932: LD_VAR 0 2
16936: PUSH
16937: LD_INT 24
16939: DOUBLE
16940: EQUAL
16941: IFTRUE 16951
16943: LD_INT 33
16945: DOUBLE
16946: EQUAL
16947: IFTRUE 16951
16949: GO 16976
16951: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16952: LD_ADDR_VAR 0 3
16956: PUSH
16957: LD_INT 32
16959: PPUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 321
16969: PUSH
16970: LD_INT 2
16972: EQUAL
16973: ST_TO_ADDR
16974: GO 17292
16976: LD_INT 20
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17009
16984: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16985: LD_ADDR_VAR 0 3
16989: PUSH
16990: LD_INT 6
16992: PPUSH
16993: LD_VAR 0 1
16997: PPUSH
16998: CALL_OW 321
17002: PUSH
17003: LD_INT 2
17005: EQUAL
17006: ST_TO_ADDR
17007: GO 17292
17009: LD_INT 22
17011: DOUBLE
17012: EQUAL
17013: IFTRUE 17023
17015: LD_INT 36
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17048
17023: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17024: LD_ADDR_VAR 0 3
17028: PUSH
17029: LD_INT 15
17031: PPUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 321
17041: PUSH
17042: LD_INT 2
17044: EQUAL
17045: ST_TO_ADDR
17046: GO 17292
17048: LD_INT 30
17050: DOUBLE
17051: EQUAL
17052: IFTRUE 17056
17054: GO 17081
17056: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_INT 20
17064: PPUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 321
17074: PUSH
17075: LD_INT 2
17077: EQUAL
17078: ST_TO_ADDR
17079: GO 17292
17081: LD_INT 28
17083: DOUBLE
17084: EQUAL
17085: IFTRUE 17095
17087: LD_INT 21
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17120
17095: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: LD_INT 21
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 321
17113: PUSH
17114: LD_INT 2
17116: EQUAL
17117: ST_TO_ADDR
17118: GO 17292
17120: LD_INT 16
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17153
17128: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17129: LD_ADDR_VAR 0 3
17133: PUSH
17134: LD_INT 84
17136: PPUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 321
17146: PUSH
17147: LD_INT 2
17149: EQUAL
17150: ST_TO_ADDR
17151: GO 17292
17153: LD_INT 19
17155: DOUBLE
17156: EQUAL
17157: IFTRUE 17167
17159: LD_INT 23
17161: DOUBLE
17162: EQUAL
17163: IFTRUE 17167
17165: GO 17192
17167: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17168: LD_ADDR_VAR 0 3
17172: PUSH
17173: LD_INT 83
17175: PPUSH
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 321
17185: PUSH
17186: LD_INT 2
17188: EQUAL
17189: ST_TO_ADDR
17190: GO 17292
17192: LD_INT 17
17194: DOUBLE
17195: EQUAL
17196: IFTRUE 17200
17198: GO 17225
17200: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17201: LD_ADDR_VAR 0 3
17205: PUSH
17206: LD_INT 39
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 321
17218: PUSH
17219: LD_INT 2
17221: EQUAL
17222: ST_TO_ADDR
17223: GO 17292
17225: LD_INT 18
17227: DOUBLE
17228: EQUAL
17229: IFTRUE 17233
17231: GO 17258
17233: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17234: LD_ADDR_VAR 0 3
17238: PUSH
17239: LD_INT 40
17241: PPUSH
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 321
17251: PUSH
17252: LD_INT 2
17254: EQUAL
17255: ST_TO_ADDR
17256: GO 17292
17258: LD_INT 27
17260: DOUBLE
17261: EQUAL
17262: IFTRUE 17266
17264: GO 17291
17266: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17267: LD_ADDR_VAR 0 3
17271: PUSH
17272: LD_INT 35
17274: PPUSH
17275: LD_VAR 0 1
17279: PPUSH
17280: CALL_OW 321
17284: PUSH
17285: LD_INT 2
17287: EQUAL
17288: ST_TO_ADDR
17289: GO 17292
17291: POP
// end ;
17292: LD_VAR 0 3
17296: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17297: LD_INT 0
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
// result := false ;
17310: LD_ADDR_VAR 0 6
17314: PUSH
17315: LD_INT 0
17317: ST_TO_ADDR
// if btype = b_depot then
17318: LD_VAR 0 2
17322: PUSH
17323: LD_INT 0
17325: EQUAL
17326: IFFALSE 17338
// begin result := true ;
17328: LD_ADDR_VAR 0 6
17332: PUSH
17333: LD_INT 1
17335: ST_TO_ADDR
// exit ;
17336: GO 18192
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17338: LD_VAR 0 1
17342: NOT
17343: IFTRUE 17368
17345: PUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 266
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: IN
17366: NOT
17367: OR
17368: IFTRUE 17377
17370: PUSH
17371: LD_VAR 0 2
17375: NOT
17376: OR
17377: IFTRUE 17413
17379: PUSH
17380: LD_VAR 0 5
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 4
17399: PUSH
17400: LD_INT 5
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: IN
17411: NOT
17412: OR
17413: IFTRUE 17432
17415: PUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_VAR 0 4
17425: PPUSH
17426: CALL_OW 488
17430: NOT
17431: OR
17432: IFFALSE 17436
// exit ;
17434: GO 18192
// side := GetSide ( depot ) ;
17436: LD_ADDR_VAR 0 9
17440: PUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 255
17450: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17451: LD_VAR 0 9
17455: PPUSH
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL 16921 0 2
17465: NOT
17466: IFFALSE 17470
// exit ;
17468: GO 18192
// pom := GetBase ( depot ) ;
17470: LD_ADDR_VAR 0 10
17474: PUSH
17475: LD_VAR 0 1
17479: PPUSH
17480: CALL_OW 274
17484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17485: LD_ADDR_VAR 0 11
17489: PUSH
17490: LD_VAR 0 2
17494: PPUSH
17495: LD_VAR 0 1
17499: PPUSH
17500: CALL_OW 248
17504: PPUSH
17505: CALL_OW 450
17509: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17510: LD_VAR 0 10
17514: PPUSH
17515: LD_INT 1
17517: PPUSH
17518: CALL_OW 275
17522: PUSH
17523: LD_VAR 0 11
17527: PUSH
17528: LD_INT 1
17530: ARRAY
17531: GREATEREQUAL
17532: IFFALSE 17558
17534: PUSH
17535: LD_VAR 0 10
17539: PPUSH
17540: LD_INT 2
17542: PPUSH
17543: CALL_OW 275
17547: PUSH
17548: LD_VAR 0 11
17552: PUSH
17553: LD_INT 2
17555: ARRAY
17556: GREATEREQUAL
17557: AND
17558: IFFALSE 17584
17560: PUSH
17561: LD_VAR 0 10
17565: PPUSH
17566: LD_INT 3
17568: PPUSH
17569: CALL_OW 275
17573: PUSH
17574: LD_VAR 0 11
17578: PUSH
17579: LD_INT 3
17581: ARRAY
17582: GREATEREQUAL
17583: AND
17584: NOT
17585: IFFALSE 17589
// exit ;
17587: GO 18192
// if GetBType ( depot ) = b_depot then
17589: LD_VAR 0 1
17593: PPUSH
17594: CALL_OW 266
17598: PUSH
17599: LD_INT 0
17601: EQUAL
17602: IFFALSE 17614
// dist := 28 else
17604: LD_ADDR_VAR 0 14
17608: PUSH
17609: LD_INT 28
17611: ST_TO_ADDR
17612: GO 17622
// dist := 36 ;
17614: LD_ADDR_VAR 0 14
17618: PUSH
17619: LD_INT 36
17621: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17622: LD_VAR 0 1
17626: PPUSH
17627: LD_VAR 0 3
17631: PPUSH
17632: LD_VAR 0 4
17636: PPUSH
17637: CALL_OW 297
17641: PUSH
17642: LD_VAR 0 14
17646: GREATER
17647: IFFALSE 17651
// exit ;
17649: GO 18192
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17651: LD_ADDR_VAR 0 12
17655: PUSH
17656: LD_VAR 0 2
17660: PPUSH
17661: LD_VAR 0 3
17665: PPUSH
17666: LD_VAR 0 4
17670: PPUSH
17671: LD_VAR 0 5
17675: PPUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 248
17685: PPUSH
17686: LD_INT 0
17688: PPUSH
17689: CALL 18197 0 6
17693: ST_TO_ADDR
// if not hexes then
17694: LD_VAR 0 12
17698: NOT
17699: IFFALSE 17703
// exit ;
17701: GO 18192
// hex := GetHexInfo ( x , y ) ;
17703: LD_ADDR_VAR 0 15
17707: PUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: LD_VAR 0 4
17717: PPUSH
17718: CALL_OW 546
17722: ST_TO_ADDR
// if hex [ 1 ] then
17723: LD_VAR 0 15
17727: PUSH
17728: LD_INT 1
17730: ARRAY
17731: IFFALSE 17735
// exit ;
17733: GO 18192
// height := hex [ 2 ] ;
17735: LD_ADDR_VAR 0 13
17739: PUSH
17740: LD_VAR 0 15
17744: PUSH
17745: LD_INT 2
17747: ARRAY
17748: ST_TO_ADDR
// for i = 1 to hexes do
17749: LD_ADDR_VAR 0 7
17753: PUSH
17754: DOUBLE
17755: LD_INT 1
17757: DEC
17758: ST_TO_ADDR
17759: LD_VAR 0 12
17763: PUSH
17764: FOR_TO
17765: IFFALSE 18109
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17767: LD_VAR 0 12
17771: PUSH
17772: LD_VAR 0 7
17776: ARRAY
17777: PUSH
17778: LD_INT 1
17780: ARRAY
17781: PPUSH
17782: LD_VAR 0 12
17786: PUSH
17787: LD_VAR 0 7
17791: ARRAY
17792: PUSH
17793: LD_INT 2
17795: ARRAY
17796: PPUSH
17797: CALL_OW 488
17801: NOT
17802: IFTRUE 17844
17804: PUSH
17805: LD_VAR 0 12
17809: PUSH
17810: LD_VAR 0 7
17814: ARRAY
17815: PUSH
17816: LD_INT 1
17818: ARRAY
17819: PPUSH
17820: LD_VAR 0 12
17824: PUSH
17825: LD_VAR 0 7
17829: ARRAY
17830: PUSH
17831: LD_INT 2
17833: ARRAY
17834: PPUSH
17835: CALL_OW 428
17839: PUSH
17840: LD_INT 0
17842: GREATER
17843: OR
17844: IFTRUE 17882
17846: PUSH
17847: LD_VAR 0 12
17851: PUSH
17852: LD_VAR 0 7
17856: ARRAY
17857: PUSH
17858: LD_INT 1
17860: ARRAY
17861: PPUSH
17862: LD_VAR 0 12
17866: PUSH
17867: LD_VAR 0 7
17871: ARRAY
17872: PUSH
17873: LD_INT 2
17875: ARRAY
17876: PPUSH
17877: CALL_OW 351
17881: OR
17882: IFFALSE 17888
// exit ;
17884: POP
17885: POP
17886: GO 18192
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17888: LD_ADDR_VAR 0 8
17892: PUSH
17893: LD_VAR 0 12
17897: PUSH
17898: LD_VAR 0 7
17902: ARRAY
17903: PUSH
17904: LD_INT 1
17906: ARRAY
17907: PPUSH
17908: LD_VAR 0 12
17912: PUSH
17913: LD_VAR 0 7
17917: ARRAY
17918: PUSH
17919: LD_INT 2
17921: ARRAY
17922: PPUSH
17923: CALL_OW 546
17927: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17928: LD_VAR 0 8
17932: PUSH
17933: LD_INT 1
17935: ARRAY
17936: IFTRUE 17958
17938: PUSH
17939: LD_VAR 0 8
17943: PUSH
17944: LD_INT 2
17946: ARRAY
17947: PUSH
17948: LD_VAR 0 13
17952: PUSH
17953: LD_INT 2
17955: PLUS
17956: GREATER
17957: OR
17958: IFTRUE 17980
17960: PUSH
17961: LD_VAR 0 8
17965: PUSH
17966: LD_INT 2
17968: ARRAY
17969: PUSH
17970: LD_VAR 0 13
17974: PUSH
17975: LD_INT 2
17977: MINUS
17978: LESS
17979: OR
17980: IFTRUE 18048
17982: PUSH
17983: LD_VAR 0 8
17987: PUSH
17988: LD_INT 3
17990: ARRAY
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 8
17997: PUSH
17998: LD_INT 9
18000: PUSH
18001: LD_INT 10
18003: PUSH
18004: LD_INT 11
18006: PUSH
18007: LD_INT 12
18009: PUSH
18010: LD_INT 13
18012: PUSH
18013: LD_INT 16
18015: PUSH
18016: LD_INT 17
18018: PUSH
18019: LD_INT 18
18021: PUSH
18022: LD_INT 19
18024: PUSH
18025: LD_INT 20
18027: PUSH
18028: LD_INT 21
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: IN
18046: NOT
18047: OR
18048: IFTRUE 18061
18050: PUSH
18051: LD_VAR 0 8
18055: PUSH
18056: LD_INT 5
18058: ARRAY
18059: NOT
18060: OR
18061: IFTRUE 18101
18063: PUSH
18064: LD_VAR 0 8
18068: PUSH
18069: LD_INT 6
18071: ARRAY
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: LD_INT 7
18081: PUSH
18082: LD_INT 9
18084: PUSH
18085: LD_INT 10
18087: PUSH
18088: LD_INT 11
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: IN
18099: NOT
18100: OR
18101: IFFALSE 18107
// exit ;
18103: POP
18104: POP
18105: GO 18192
// end ;
18107: GO 17764
18109: POP
18110: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18111: LD_VAR 0 9
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_VAR 0 4
18125: PPUSH
18126: LD_INT 20
18128: PPUSH
18129: CALL 10011 0 4
18133: PUSH
18134: LD_INT 4
18136: ARRAY
18137: IFFALSE 18141
// exit ;
18139: GO 18192
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18141: LD_VAR 0 2
18145: PUSH
18146: LD_INT 29
18148: PUSH
18149: LD_INT 30
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: IN
18156: IFFALSE 18180
18158: PUSH
18159: LD_VAR 0 3
18163: PPUSH
18164: LD_VAR 0 4
18168: PPUSH
18169: LD_VAR 0 9
18173: PPUSH
18174: CALL_OW 440
18178: NOT
18179: AND
18180: IFFALSE 18184
// exit ;
18182: GO 18192
// result := true ;
18184: LD_ADDR_VAR 0 6
18188: PUSH
18189: LD_INT 1
18191: ST_TO_ADDR
// end ;
18192: LD_VAR 0 6
18196: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18197: LD_INT 0
18199: PPUSH
18200: PPUSH
18201: PPUSH
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
18222: PPUSH
18223: PPUSH
18224: PPUSH
18225: PPUSH
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
18231: PPUSH
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
// result = [ ] ;
18257: LD_ADDR_VAR 0 7
18261: PUSH
18262: EMPTY
18263: ST_TO_ADDR
// temp_list = [ ] ;
18264: LD_ADDR_VAR 0 9
18268: PUSH
18269: EMPTY
18270: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18271: LD_VAR 0 4
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 2
18284: PUSH
18285: LD_INT 3
18287: PUSH
18288: LD_INT 4
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: IN
18302: NOT
18303: IFTRUE 18346
18305: PUSH
18306: LD_VAR 0 1
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: IN
18321: IFFALSE 18345
18323: PUSH
18324: LD_VAR 0 5
18328: PUSH
18329: LD_INT 1
18331: PUSH
18332: LD_INT 2
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: IN
18343: NOT
18344: AND
18345: OR
18346: IFFALSE 18350
// exit ;
18348: GO 36749
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_INT 6
18357: PUSH
18358: LD_INT 7
18360: PUSH
18361: LD_INT 8
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: LD_INT 12
18369: PUSH
18370: LD_INT 15
18372: PUSH
18373: LD_INT 11
18375: PUSH
18376: LD_INT 14
18378: PUSH
18379: LD_INT 10
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: IN
18393: IFFALSE 18403
// btype = b_lab ;
18395: LD_ADDR_VAR 0 1
18399: PUSH
18400: LD_INT 6
18402: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18403: LD_VAR 0 6
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: IN
18422: NOT
18423: IFTRUE 18491
18425: PUSH
18426: LD_VAR 0 1
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 3
18442: PUSH
18443: LD_INT 6
18445: PUSH
18446: LD_INT 36
18448: PUSH
18449: LD_INT 4
18451: PUSH
18452: LD_INT 5
18454: PUSH
18455: LD_INT 31
18457: PUSH
18458: LD_INT 32
18460: PUSH
18461: LD_INT 33
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: IN
18477: NOT
18478: IFFALSE 18490
18480: PUSH
18481: LD_VAR 0 6
18485: PUSH
18486: LD_INT 1
18488: EQUAL
18489: AND
18490: OR
18491: IFTRUE 18523
18493: PUSH
18494: LD_VAR 0 1
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 3
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: IN
18509: NOT
18510: IFFALSE 18522
18512: PUSH
18513: LD_VAR 0 6
18517: PUSH
18518: LD_INT 2
18520: EQUAL
18521: AND
18522: OR
18523: IFFALSE 18533
// mode = 0 ;
18525: LD_ADDR_VAR 0 6
18529: PUSH
18530: LD_INT 0
18532: ST_TO_ADDR
// case mode of 0 :
18533: LD_VAR 0 6
18537: PUSH
18538: LD_INT 0
18540: DOUBLE
18541: EQUAL
18542: IFTRUE 18546
18544: GO 29999
18546: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18547: LD_ADDR_VAR 0 11
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: LD_INT 1
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: NEG
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 1
18616: NEG
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: LD_INT 2
18632: NEG
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 2
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: LD_INT 1
18654: NEG
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18740: LD_ADDR_VAR 0 12
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 2
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: NEG
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: NEG
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: NEG
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 3
18897: NEG
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 3
18908: NEG
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18936: LD_ADDR_VAR 0 13
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 2
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 2
19083: NEG
19084: PUSH
19085: LD_INT 3
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 3
19095: NEG
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 3
19107: NEG
19108: PUSH
19109: LD_INT 3
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19135: LD_ADDR_VAR 0 14
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: LD_INT 1
19155: NEG
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 0
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: LD_INT 2
19220: NEG
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: LD_INT 2
19231: NEG
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: NEG
19282: PUSH
19283: LD_INT 3
19285: NEG
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 3
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19331: LD_ADDR_VAR 0 15
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: LD_INT 0
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: NEG
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: LD_INT 1
19404: NEG
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 2
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 3
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 3
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19524: LD_ADDR_VAR 0 16
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 1
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: LD_INT 2
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 2
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: LD_INT 1
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 3
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 3
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19717: LD_ADDR_VAR 0 17
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 2
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 2
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 0
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19947: LD_ADDR_VAR 0 18
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 0
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 2
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: NEG
20135: PUSH
20136: LD_INT 1
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 2
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20177: LD_ADDR_VAR 0 19
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: LD_INT 0
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: LD_INT 2
20262: NEG
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 2
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: LD_INT 0
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20407: LD_ADDR_VAR 0 20
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 0
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: LD_INT 2
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: LD_INT 1
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: LD_INT 2
20610: NEG
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20637: LD_ADDR_VAR 0 21
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 2
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20867: LD_ADDR_VAR 0 22
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 2
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 2
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21097: LD_ADDR_VAR 0 23
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 2
21182: NEG
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: LD_INT 2
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: LD_INT 2
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: LD_INT 3
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: LD_INT 3
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21377: LD_ADDR_VAR 0 24
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: LD_INT 1
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: LD_INT 2
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: LD_INT 2
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: LD_INT 2
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 3
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21653: LD_ADDR_VAR 0 25
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 2
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 2
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 0
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 0
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 2
21829: NEG
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 2
21840: NEG
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: LD_INT 2
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 3
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 3
21874: PUSH
21875: LD_INT 2
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 3
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 3
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21927: LD_ADDR_VAR 0 26
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 2
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 2
22114: NEG
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: LD_INT 2
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: LD_INT 3
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: LD_INT 3
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 2
22169: NEG
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22203: LD_ADDR_VAR 0 27
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 0
22296: PUSH
22297: LD_INT 2
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 2
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 2
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: NEG
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 3
22436: NEG
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 3
22448: NEG
22449: PUSH
22450: LD_INT 2
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22483: LD_ADDR_VAR 0 28
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: LD_INT 2
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 3
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 3
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 3
22718: NEG
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 3
22730: NEG
22731: PUSH
22732: LD_INT 2
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22765: LD_ADDR_VAR 0 29
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 2
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 2
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 3
23009: NEG
23010: PUSH
23011: LD_INT 2
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23044: LD_ADDR_VAR 0 30
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 2
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 2
23221: NEG
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 3
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 3
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 3
23287: NEG
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23322: LD_ADDR_VAR 0 31
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 0
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 2
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: NEG
23500: PUSH
23501: LD_INT 2
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: LD_INT 3
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 3
23565: NEG
23566: PUSH
23567: LD_INT 2
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23600: LD_ADDR_VAR 0 32
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: LD_INT 2
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: LD_INT 2
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: LD_INT 3
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: LD_INT 3
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: NEG
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 3
23843: NEG
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23878: LD_ADDR_VAR 0 33
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 2
23963: NEG
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 2
24033: NEG
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: NEG
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: LD_INT 2
24060: NEG
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: NEG
24069: PUSH
24070: LD_INT 3
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 3
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 3
24122: NEG
24123: PUSH
24124: LD_INT 2
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24157: LD_ADDR_VAR 0 34
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: LD_INT 2
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: NEG
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: LD_INT 3
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 3
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 3
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 3
24402: NEG
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24437: LD_ADDR_VAR 0 35
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: NEG
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24549: LD_ADDR_VAR 0 36
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24661: LD_ADDR_VAR 0 37
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24773: LD_ADDR_VAR 0 38
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 2
24864: NEG
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24885: LD_ADDR_VAR 0 39
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24997: LD_ADDR_VAR 0 40
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25109: LD_ADDR_VAR 0 41
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 2
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: LD_INT 2
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: LD_INT 3
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 3
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 3
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 3
25383: NEG
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 3
25406: NEG
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 3
25418: NEG
25419: PUSH
25420: LD_INT 3
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25459: LD_ADDR_VAR 0 42
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: LD_INT 2
25544: NEG
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: LD_INT 2
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: LD_INT 2
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 2
25649: NEG
25650: PUSH
25651: LD_INT 3
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: LD_INT 3
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: LD_INT 3
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 3
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 3
25705: PUSH
25706: LD_INT 3
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 3
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 3
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 3
25756: NEG
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 3
25768: NEG
25769: PUSH
25770: LD_INT 3
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25809: LD_ADDR_VAR 0 43
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 2
25986: NEG
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 3
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 3
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 3
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 3
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 3
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 3
26105: NEG
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 3
26116: NEG
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26157: LD_ADDR_VAR 0 44
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 2
26242: NEG
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: LD_INT 2
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: LD_INT 3
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 2
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 3
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 3
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: LD_INT 3
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 3
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 2
26420: NEG
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 3
26431: NEG
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 3
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 3
26454: NEG
26455: PUSH
26456: LD_INT 2
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 3
26466: NEG
26467: PUSH
26468: LD_INT 3
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26507: LD_ADDR_VAR 0 45
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 2
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 2
26673: NEG
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 2
26697: NEG
26698: PUSH
26699: LD_INT 3
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: LD_INT 3
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: LD_INT 3
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 3
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 3
26753: PUSH
26754: LD_INT 3
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 3
26804: NEG
26805: PUSH
26806: LD_INT 2
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 3
26816: NEG
26817: PUSH
26818: LD_INT 3
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26857: LD_ADDR_VAR 0 46
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 2
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: LD_INT 2
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: NEG
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: LD_INT 3
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 3
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: LD_INT 2
27072: NEG
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 3
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 3
27153: NEG
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 3
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27205: LD_ADDR_VAR 0 47
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27356: LD_ADDR_VAR 0 48
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: LD_INT 2
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 2
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27503: LD_ADDR_VAR 0 49
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27647: LD_ADDR_VAR 0 50
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27791: LD_ADDR_VAR 0 51
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27938: LD_ADDR_VAR 0 52
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 2
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28089: LD_ADDR_VAR 0 53
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: LD_INT 2
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 2
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: NEG
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28319: LD_ADDR_VAR 0 54
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 2
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 2
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28549: LD_ADDR_VAR 0 55
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 2
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28779: LD_ADDR_VAR 0 56
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: NEG
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 2
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29009: LD_ADDR_VAR 0 57
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29239: LD_ADDR_VAR 0 58
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 2
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29469: LD_ADDR_VAR 0 59
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29557: LD_ADDR_VAR 0 60
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29645: LD_ADDR_VAR 0 61
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29733: LD_ADDR_VAR 0 62
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29821: LD_ADDR_VAR 0 63
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29909: LD_ADDR_VAR 0 64
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// end ; 1 :
29997: GO 35894
29999: LD_INT 1
30001: DOUBLE
30002: EQUAL
30003: IFTRUE 30007
30005: GO 32630
30007: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30008: LD_ADDR_VAR 0 11
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 3
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: LD_INT 2
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30052: LD_ADDR_VAR 0 12
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30093: LD_ADDR_VAR 0 13
30097: PUSH
30098: LD_INT 3
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: LD_INT 3
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30133: LD_ADDR_VAR 0 14
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 3
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: LD_INT 3
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30174: LD_ADDR_VAR 0 15
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: NEG
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: LIST
30217: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30218: LD_ADDR_VAR 0 16
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: NEG
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30264: LD_ADDR_VAR 0 17
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30308: LD_ADDR_VAR 0 18
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30349: LD_ADDR_VAR 0 19
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30389: LD_ADDR_VAR 0 20
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30430: LD_ADDR_VAR 0 21
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30474: LD_ADDR_VAR 0 22
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30520: LD_ADDR_VAR 0 23
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 4
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30564: LD_ADDR_VAR 0 24
30568: PUSH
30569: LD_INT 3
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 4
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30605: LD_ADDR_VAR 0 25
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 4
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30645: LD_ADDR_VAR 0 26
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 4
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30686: LD_ADDR_VAR 0 27
30690: PUSH
30691: LD_INT 3
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 4
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30730: LD_ADDR_VAR 0 28
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: LD_INT 3
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 4
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 4
30761: NEG
30762: PUSH
30763: LD_INT 3
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30776: LD_ADDR_VAR 0 29
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: LD_INT 3
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 4
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: LD_INT 4
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: LD_INT 5
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: LD_INT 5
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: LD_INT 4
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 6
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 6
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 5
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30931: LD_ADDR_VAR 0 30
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 3
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 4
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 5
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 5
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 6
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 6
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31074: LD_ADDR_VAR 0 31
31078: PUSH
31079: LD_INT 3
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: LD_INT 4
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 5
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 5
31151: PUSH
31152: LD_INT 5
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 4
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 6
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 6
31181: PUSH
31182: LD_INT 6
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 5
31191: PUSH
31192: LD_INT 6
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31213: LD_ADDR_VAR 0 32
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 3
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 4
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 4
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 3
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 5
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 5
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: LD_INT 4
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 6
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 6
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 5
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31356: LD_ADDR_VAR 0 33
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 3
31374: NEG
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 4
31408: NEG
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 4
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 4
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 5
31442: NEG
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 5
31453: NEG
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 5
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 6
31476: NEG
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 6
31487: NEG
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31511: LD_ADDR_VAR 0 34
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 3
31530: NEG
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 3
31542: NEG
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: LD_INT 4
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 4
31566: NEG
31567: PUSH
31568: LD_INT 3
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 4
31578: NEG
31579: PUSH
31580: LD_INT 4
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 4
31590: NEG
31591: PUSH
31592: LD_INT 5
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: LD_INT 4
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 5
31614: NEG
31615: PUSH
31616: LD_INT 5
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 5
31626: NEG
31627: PUSH
31628: LD_INT 6
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 6
31638: NEG
31639: PUSH
31640: LD_INT 5
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 6
31650: NEG
31651: PUSH
31652: LD_INT 6
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31674: LD_ADDR_VAR 0 41
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31718: LD_ADDR_VAR 0 42
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31759: LD_ADDR_VAR 0 43
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: LD_INT 3
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31799: LD_ADDR_VAR 0 44
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31840: LD_ADDR_VAR 0 45
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31884: LD_ADDR_VAR 0 46
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31930: LD_ADDR_VAR 0 47
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 3
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 3
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31963: LD_ADDR_VAR 0 48
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: LD_INT 2
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31994: LD_ADDR_VAR 0 49
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32023: LD_ADDR_VAR 0 50
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: LD_INT 3
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32052: LD_ADDR_VAR 0 51
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32083: LD_ADDR_VAR 0 52
32087: PUSH
32088: LD_INT 3
32090: NEG
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 3
32102: NEG
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32116: LD_ADDR_VAR 0 53
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: LD_INT 3
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32160: LD_ADDR_VAR 0 54
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32201: LD_ADDR_VAR 0 55
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32241: LD_ADDR_VAR 0 56
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: LD_INT 3
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32282: LD_ADDR_VAR 0 57
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 3
32311: NEG
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32326: LD_ADDR_VAR 0 58
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: LD_INT 3
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32372: LD_ADDR_VAR 0 59
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32416: LD_ADDR_VAR 0 60
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32457: LD_ADDR_VAR 0 61
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32497: LD_ADDR_VAR 0 62
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32538: LD_ADDR_VAR 0 63
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32582: LD_ADDR_VAR 0 64
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 2
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
// end ; 2 :
32628: GO 35894
32630: LD_INT 2
32632: DOUBLE
32633: EQUAL
32634: IFTRUE 32638
32636: GO 35893
32638: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32639: LD_ADDR_VAR 0 29
32643: PUSH
32644: LD_INT 4
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 5
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 5
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 4
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 5
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: LD_INT 4
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 4
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 4
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 4
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 4
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 5
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: LD_INT 3
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: NEG
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 3
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 4
32978: NEG
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 4
32989: NEG
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 4
33001: NEG
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 4
33024: NEG
33025: PUSH
33026: LD_INT 4
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: LD_INT 5
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: NEG
33049: PUSH
33050: LD_INT 4
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 3
33060: NEG
33061: PUSH
33062: LD_INT 3
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 4
33072: NEG
33073: PUSH
33074: LD_INT 3
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 5
33084: NEG
33085: PUSH
33086: LD_INT 4
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 5
33096: NEG
33097: PUSH
33098: LD_INT 5
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 3
33108: NEG
33109: PUSH
33110: LD_INT 5
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 5
33120: NEG
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33177: LD_ADDR_VAR 0 30
33181: PUSH
33182: LD_INT 4
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 5
33204: PUSH
33205: LD_INT 4
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 5
33214: PUSH
33215: LD_INT 5
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: LD_INT 5
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: LD_INT 3
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 5
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: LD_INT 5
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 3
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 4
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: LD_INT 3
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 4
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 4
33367: NEG
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 4
33378: NEG
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 3
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 4
33412: NEG
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 5
33423: NEG
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 5
33434: NEG
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: LD_INT 2
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 3
33469: NEG
33470: PUSH
33471: LD_INT 3
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: LD_INT 4
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: LD_INT 3
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 3
33517: NEG
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 4
33529: NEG
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 4
33541: NEG
33542: PUSH
33543: LD_INT 4
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: NEG
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 4
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 5
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: LD_INT 4
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 3
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 5
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: NEG
33668: PUSH
33669: LD_INT 5
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33724: LD_ADDR_VAR 0 31
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 4
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 4
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: LD_INT 5
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: LD_INT 5
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 5
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 3
33824: NEG
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 3
33835: NEG
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 4
33880: NEG
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 4
33891: NEG
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 4
33903: NEG
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 4
33926: NEG
33927: PUSH
33928: LD_INT 4
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: LD_INT 5
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 3
33950: NEG
33951: PUSH
33952: LD_INT 4
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 3
33962: NEG
33963: PUSH
33964: LD_INT 3
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 4
33974: NEG
33975: PUSH
33976: LD_INT 3
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 5
33986: NEG
33987: PUSH
33988: LD_INT 4
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 5
33998: NEG
33999: PUSH
34000: LD_INT 5
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: NEG
34011: PUSH
34012: LD_INT 5
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 5
34022: NEG
34023: PUSH
34024: LD_INT 3
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 3
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 4
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 3
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 4
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 4
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 4
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 5
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 4
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 3
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 5
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34274: LD_ADDR_VAR 0 32
34278: PUSH
34279: LD_INT 4
34281: NEG
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 3
34304: NEG
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 3
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 4
34326: NEG
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 5
34337: NEG
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 5
34348: NEG
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 5
34360: NEG
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 3
34372: NEG
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: LD_INT 3
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 3
34395: NEG
34396: PUSH
34397: LD_INT 4
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: NEG
34408: PUSH
34409: LD_INT 3
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 4
34443: NEG
34444: PUSH
34445: LD_INT 3
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 4
34455: NEG
34456: PUSH
34457: LD_INT 4
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 4
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 4
34479: NEG
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 5
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 4
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 3
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 4
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 5
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: LD_INT 5
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 4
34686: PUSH
34687: LD_INT 4
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 5
34716: PUSH
34717: LD_INT 5
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 3
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 5
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: LD_INT 5
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34821: LD_ADDR_VAR 0 33
34825: PUSH
34826: LD_INT 4
34828: NEG
34829: PUSH
34830: LD_INT 4
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 4
34840: NEG
34841: PUSH
34842: LD_INT 5
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 3
34852: NEG
34853: PUSH
34854: LD_INT 4
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: NEG
34865: PUSH
34866: LD_INT 3
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 4
34876: NEG
34877: PUSH
34878: LD_INT 3
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 5
34888: NEG
34889: PUSH
34890: LD_INT 4
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 5
34900: NEG
34901: PUSH
34902: LD_INT 5
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: NEG
34913: PUSH
34914: LD_INT 5
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 5
34924: NEG
34925: PUSH
34926: LD_INT 3
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: LD_INT 3
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 4
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: LD_INT 3
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 3
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 4
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: LD_INT 4
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 4
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 4
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 5
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 5
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 4
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 3
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 3
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 5
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 3
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 4
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 4
35161: PUSH
35162: LD_INT 4
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: LD_INT 4
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 3
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 4
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: LD_INT 4
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 4
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 4
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: LD_INT 5
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 5
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: LD_INT 4
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 5
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35359: LD_ADDR_VAR 0 34
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 4
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 5
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 4
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 3
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 3
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: LD_INT 4
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 5
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: LD_INT 5
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 4
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 4
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 4
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 4
35561: PUSH
35562: LD_INT 4
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 4
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 5
35581: PUSH
35582: LD_INT 4
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 5
35591: PUSH
35592: LD_INT 5
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 4
35601: PUSH
35602: LD_INT 5
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: LD_INT 4
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 5
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 5
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 3
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: LD_INT 4
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 4
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 4
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: NEG
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 4
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 3
35767: NEG
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 3
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 4
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 5
35800: NEG
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 5
35811: NEG
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 5
35823: NEG
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 3
35835: NEG
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
// end ; end ;
35891: GO 35894
35893: POP
// case btype of b_depot , b_warehouse :
35894: LD_VAR 0 1
35898: PUSH
35899: LD_INT 0
35901: DOUBLE
35902: EQUAL
35903: IFTRUE 35913
35905: LD_INT 1
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35913
35911: GO 36114
35913: POP
// case nation of nation_american :
35914: LD_VAR 0 5
35918: PUSH
35919: LD_INT 1
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35927
35925: GO 35983
35927: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35928: LD_ADDR_VAR 0 9
35932: PUSH
35933: LD_VAR 0 11
35937: PUSH
35938: LD_VAR 0 12
35942: PUSH
35943: LD_VAR 0 13
35947: PUSH
35948: LD_VAR 0 14
35952: PUSH
35953: LD_VAR 0 15
35957: PUSH
35958: LD_VAR 0 16
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: PUSH
35971: LD_VAR 0 4
35975: PUSH
35976: LD_INT 1
35978: PLUS
35979: ARRAY
35980: ST_TO_ADDR
35981: GO 36112
35983: LD_INT 2
35985: DOUBLE
35986: EQUAL
35987: IFTRUE 35991
35989: GO 36047
35991: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35992: LD_ADDR_VAR 0 9
35996: PUSH
35997: LD_VAR 0 17
36001: PUSH
36002: LD_VAR 0 18
36006: PUSH
36007: LD_VAR 0 19
36011: PUSH
36012: LD_VAR 0 20
36016: PUSH
36017: LD_VAR 0 21
36021: PUSH
36022: LD_VAR 0 22
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: PUSH
36035: LD_VAR 0 4
36039: PUSH
36040: LD_INT 1
36042: PLUS
36043: ARRAY
36044: ST_TO_ADDR
36045: GO 36112
36047: LD_INT 3
36049: DOUBLE
36050: EQUAL
36051: IFTRUE 36055
36053: GO 36111
36055: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36056: LD_ADDR_VAR 0 9
36060: PUSH
36061: LD_VAR 0 23
36065: PUSH
36066: LD_VAR 0 24
36070: PUSH
36071: LD_VAR 0 25
36075: PUSH
36076: LD_VAR 0 26
36080: PUSH
36081: LD_VAR 0 27
36085: PUSH
36086: LD_VAR 0 28
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: PUSH
36099: LD_VAR 0 4
36103: PUSH
36104: LD_INT 1
36106: PLUS
36107: ARRAY
36108: ST_TO_ADDR
36109: GO 36112
36111: POP
36112: GO 36667
36114: LD_INT 2
36116: DOUBLE
36117: EQUAL
36118: IFTRUE 36128
36120: LD_INT 3
36122: DOUBLE
36123: EQUAL
36124: IFTRUE 36128
36126: GO 36184
36128: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36129: LD_ADDR_VAR 0 9
36133: PUSH
36134: LD_VAR 0 29
36138: PUSH
36139: LD_VAR 0 30
36143: PUSH
36144: LD_VAR 0 31
36148: PUSH
36149: LD_VAR 0 32
36153: PUSH
36154: LD_VAR 0 33
36158: PUSH
36159: LD_VAR 0 34
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: LD_VAR 0 4
36176: PUSH
36177: LD_INT 1
36179: PLUS
36180: ARRAY
36181: ST_TO_ADDR
36182: GO 36667
36184: LD_INT 16
36186: DOUBLE
36187: EQUAL
36188: IFTRUE 36246
36190: LD_INT 17
36192: DOUBLE
36193: EQUAL
36194: IFTRUE 36246
36196: LD_INT 18
36198: DOUBLE
36199: EQUAL
36200: IFTRUE 36246
36202: LD_INT 19
36204: DOUBLE
36205: EQUAL
36206: IFTRUE 36246
36208: LD_INT 22
36210: DOUBLE
36211: EQUAL
36212: IFTRUE 36246
36214: LD_INT 20
36216: DOUBLE
36217: EQUAL
36218: IFTRUE 36246
36220: LD_INT 21
36222: DOUBLE
36223: EQUAL
36224: IFTRUE 36246
36226: LD_INT 23
36228: DOUBLE
36229: EQUAL
36230: IFTRUE 36246
36232: LD_INT 24
36234: DOUBLE
36235: EQUAL
36236: IFTRUE 36246
36238: LD_INT 25
36240: DOUBLE
36241: EQUAL
36242: IFTRUE 36246
36244: GO 36302
36246: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36247: LD_ADDR_VAR 0 9
36251: PUSH
36252: LD_VAR 0 35
36256: PUSH
36257: LD_VAR 0 36
36261: PUSH
36262: LD_VAR 0 37
36266: PUSH
36267: LD_VAR 0 38
36271: PUSH
36272: LD_VAR 0 39
36276: PUSH
36277: LD_VAR 0 40
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: PUSH
36290: LD_VAR 0 4
36294: PUSH
36295: LD_INT 1
36297: PLUS
36298: ARRAY
36299: ST_TO_ADDR
36300: GO 36667
36302: LD_INT 6
36304: DOUBLE
36305: EQUAL
36306: IFTRUE 36358
36308: LD_INT 7
36310: DOUBLE
36311: EQUAL
36312: IFTRUE 36358
36314: LD_INT 8
36316: DOUBLE
36317: EQUAL
36318: IFTRUE 36358
36320: LD_INT 13
36322: DOUBLE
36323: EQUAL
36324: IFTRUE 36358
36326: LD_INT 12
36328: DOUBLE
36329: EQUAL
36330: IFTRUE 36358
36332: LD_INT 15
36334: DOUBLE
36335: EQUAL
36336: IFTRUE 36358
36338: LD_INT 11
36340: DOUBLE
36341: EQUAL
36342: IFTRUE 36358
36344: LD_INT 14
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36358
36350: LD_INT 10
36352: DOUBLE
36353: EQUAL
36354: IFTRUE 36358
36356: GO 36414
36358: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36359: LD_ADDR_VAR 0 9
36363: PUSH
36364: LD_VAR 0 41
36368: PUSH
36369: LD_VAR 0 42
36373: PUSH
36374: LD_VAR 0 43
36378: PUSH
36379: LD_VAR 0 44
36383: PUSH
36384: LD_VAR 0 45
36388: PUSH
36389: LD_VAR 0 46
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: PUSH
36402: LD_VAR 0 4
36406: PUSH
36407: LD_INT 1
36409: PLUS
36410: ARRAY
36411: ST_TO_ADDR
36412: GO 36667
36414: LD_INT 36
36416: DOUBLE
36417: EQUAL
36418: IFTRUE 36422
36420: GO 36478
36422: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36423: LD_ADDR_VAR 0 9
36427: PUSH
36428: LD_VAR 0 47
36432: PUSH
36433: LD_VAR 0 48
36437: PUSH
36438: LD_VAR 0 49
36442: PUSH
36443: LD_VAR 0 50
36447: PUSH
36448: LD_VAR 0 51
36452: PUSH
36453: LD_VAR 0 52
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: LD_VAR 0 4
36470: PUSH
36471: LD_INT 1
36473: PLUS
36474: ARRAY
36475: ST_TO_ADDR
36476: GO 36667
36478: LD_INT 4
36480: DOUBLE
36481: EQUAL
36482: IFTRUE 36504
36484: LD_INT 5
36486: DOUBLE
36487: EQUAL
36488: IFTRUE 36504
36490: LD_INT 34
36492: DOUBLE
36493: EQUAL
36494: IFTRUE 36504
36496: LD_INT 37
36498: DOUBLE
36499: EQUAL
36500: IFTRUE 36504
36502: GO 36560
36504: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36505: LD_ADDR_VAR 0 9
36509: PUSH
36510: LD_VAR 0 53
36514: PUSH
36515: LD_VAR 0 54
36519: PUSH
36520: LD_VAR 0 55
36524: PUSH
36525: LD_VAR 0 56
36529: PUSH
36530: LD_VAR 0 57
36534: PUSH
36535: LD_VAR 0 58
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: PUSH
36548: LD_VAR 0 4
36552: PUSH
36553: LD_INT 1
36555: PLUS
36556: ARRAY
36557: ST_TO_ADDR
36558: GO 36667
36560: LD_INT 31
36562: DOUBLE
36563: EQUAL
36564: IFTRUE 36610
36566: LD_INT 32
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36610
36572: LD_INT 33
36574: DOUBLE
36575: EQUAL
36576: IFTRUE 36610
36578: LD_INT 27
36580: DOUBLE
36581: EQUAL
36582: IFTRUE 36610
36584: LD_INT 26
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36610
36590: LD_INT 28
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36610
36596: LD_INT 29
36598: DOUBLE
36599: EQUAL
36600: IFTRUE 36610
36602: LD_INT 30
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36666
36610: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36611: LD_ADDR_VAR 0 9
36615: PUSH
36616: LD_VAR 0 59
36620: PUSH
36621: LD_VAR 0 60
36625: PUSH
36626: LD_VAR 0 61
36630: PUSH
36631: LD_VAR 0 62
36635: PUSH
36636: LD_VAR 0 63
36640: PUSH
36641: LD_VAR 0 64
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: PUSH
36654: LD_VAR 0 4
36658: PUSH
36659: LD_INT 1
36661: PLUS
36662: ARRAY
36663: ST_TO_ADDR
36664: GO 36667
36666: POP
// temp_list2 = [ ] ;
36667: LD_ADDR_VAR 0 10
36671: PUSH
36672: EMPTY
36673: ST_TO_ADDR
// for i in temp_list do
36674: LD_ADDR_VAR 0 8
36678: PUSH
36679: LD_VAR 0 9
36683: PUSH
36684: FOR_IN
36685: IFFALSE 36737
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36687: LD_ADDR_VAR 0 10
36691: PUSH
36692: LD_VAR 0 10
36696: PUSH
36697: LD_VAR 0 8
36701: PUSH
36702: LD_INT 1
36704: ARRAY
36705: PUSH
36706: LD_VAR 0 2
36710: PLUS
36711: PUSH
36712: LD_VAR 0 8
36716: PUSH
36717: LD_INT 2
36719: ARRAY
36720: PUSH
36721: LD_VAR 0 3
36725: PLUS
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: EMPTY
36732: LIST
36733: ADD
36734: ST_TO_ADDR
36735: GO 36684
36737: POP
36738: POP
// result = temp_list2 ;
36739: LD_ADDR_VAR 0 7
36743: PUSH
36744: LD_VAR 0 10
36748: ST_TO_ADDR
// end ;
36749: LD_VAR 0 7
36753: RET
// export function EnemyInRange ( unit , dist ) ; begin
36754: LD_INT 0
36756: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36757: LD_ADDR_VAR 0 3
36761: PUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 255
36771: PPUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL_OW 250
36781: PPUSH
36782: LD_VAR 0 1
36786: PPUSH
36787: CALL_OW 251
36791: PPUSH
36792: LD_VAR 0 2
36796: PPUSH
36797: CALL 10011 0 4
36801: PUSH
36802: LD_INT 4
36804: ARRAY
36805: ST_TO_ADDR
// end ;
36806: LD_VAR 0 3
36810: RET
// export function PlayerSeeMe ( unit ) ; begin
36811: LD_INT 0
36813: PPUSH
// result := See ( your_side , unit ) ;
36814: LD_ADDR_VAR 0 2
36818: PUSH
36819: LD_OWVAR 2
36823: PPUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 292
36833: ST_TO_ADDR
// end ;
36834: LD_VAR 0 2
36838: RET
// export function ReverseDir ( unit ) ; begin
36839: LD_INT 0
36841: PPUSH
// if not unit then
36842: LD_VAR 0 1
36846: NOT
36847: IFFALSE 36851
// exit ;
36849: GO 36874
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36851: LD_ADDR_VAR 0 2
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 254
36865: PUSH
36866: LD_INT 3
36868: PLUS
36869: PUSH
36870: LD_INT 6
36872: MOD
36873: ST_TO_ADDR
// end ;
36874: LD_VAR 0 2
36878: RET
// export function ReverseArray ( array ) ; var i ; begin
36879: LD_INT 0
36881: PPUSH
36882: PPUSH
// if not array then
36883: LD_VAR 0 1
36887: NOT
36888: IFFALSE 36892
// exit ;
36890: GO 36947
// result := [ ] ;
36892: LD_ADDR_VAR 0 2
36896: PUSH
36897: EMPTY
36898: ST_TO_ADDR
// for i := array downto 1 do
36899: LD_ADDR_VAR 0 3
36903: PUSH
36904: DOUBLE
36905: LD_VAR 0 1
36909: INC
36910: ST_TO_ADDR
36911: LD_INT 1
36913: PUSH
36914: FOR_DOWNTO
36915: IFFALSE 36945
// result := Join ( result , array [ i ] ) ;
36917: LD_ADDR_VAR 0 2
36921: PUSH
36922: LD_VAR 0 2
36926: PPUSH
36927: LD_VAR 0 1
36931: PUSH
36932: LD_VAR 0 3
36936: ARRAY
36937: PPUSH
36938: CALL 41789 0 2
36942: ST_TO_ADDR
36943: GO 36914
36945: POP
36946: POP
// end ;
36947: LD_VAR 0 2
36951: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36952: LD_INT 0
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
// if not unit or not hexes then
36960: LD_VAR 0 1
36964: NOT
36965: IFTRUE 36974
36967: PUSH
36968: LD_VAR 0 2
36972: NOT
36973: OR
36974: IFFALSE 36978
// exit ;
36976: GO 37101
// dist := 9999 ;
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: LD_INT 9999
36985: ST_TO_ADDR
// for i = 1 to hexes do
36986: LD_ADDR_VAR 0 4
36990: PUSH
36991: DOUBLE
36992: LD_INT 1
36994: DEC
36995: ST_TO_ADDR
36996: LD_VAR 0 2
37000: PUSH
37001: FOR_TO
37002: IFFALSE 37089
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37004: LD_ADDR_VAR 0 6
37008: PUSH
37009: LD_VAR 0 1
37013: PPUSH
37014: LD_VAR 0 2
37018: PUSH
37019: LD_VAR 0 4
37023: ARRAY
37024: PUSH
37025: LD_INT 1
37027: ARRAY
37028: PPUSH
37029: LD_VAR 0 2
37033: PUSH
37034: LD_VAR 0 4
37038: ARRAY
37039: PUSH
37040: LD_INT 2
37042: ARRAY
37043: PPUSH
37044: CALL_OW 297
37048: ST_TO_ADDR
// if tdist < dist then
37049: LD_VAR 0 6
37053: PUSH
37054: LD_VAR 0 5
37058: LESS
37059: IFFALSE 37087
// begin hex := hexes [ i ] ;
37061: LD_ADDR_VAR 0 8
37065: PUSH
37066: LD_VAR 0 2
37070: PUSH
37071: LD_VAR 0 4
37075: ARRAY
37076: ST_TO_ADDR
// dist := tdist ;
37077: LD_ADDR_VAR 0 5
37081: PUSH
37082: LD_VAR 0 6
37086: ST_TO_ADDR
// end ; end ;
37087: GO 37001
37089: POP
37090: POP
// result := hex ;
37091: LD_ADDR_VAR 0 3
37095: PUSH
37096: LD_VAR 0 8
37100: ST_TO_ADDR
// end ;
37101: LD_VAR 0 3
37105: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37106: LD_INT 0
37108: PPUSH
37109: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37110: LD_VAR 0 1
37114: NOT
37115: IFTRUE 37154
37117: PUSH
37118: LD_VAR 0 1
37122: PUSH
37123: LD_INT 21
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 23
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PPUSH
37147: CALL_OW 69
37151: IN
37152: NOT
37153: OR
37154: IFFALSE 37158
// exit ;
37156: GO 37205
// for i = 1 to 3 do
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: DOUBLE
37164: LD_INT 1
37166: DEC
37167: ST_TO_ADDR
37168: LD_INT 3
37170: PUSH
37171: FOR_TO
37172: IFFALSE 37203
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37174: LD_VAR 0 1
37178: PPUSH
37179: CALL_OW 250
37183: PPUSH
37184: LD_VAR 0 1
37188: PPUSH
37189: CALL_OW 251
37193: PPUSH
37194: LD_INT 1
37196: PPUSH
37197: CALL_OW 453
37201: GO 37171
37203: POP
37204: POP
// end ;
37205: LD_VAR 0 2
37209: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37210: LD_INT 0
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
// if not unit or not enemy_unit then
37218: LD_VAR 0 1
37222: NOT
37223: IFTRUE 37232
37225: PUSH
37226: LD_VAR 0 2
37230: NOT
37231: OR
37232: IFFALSE 37236
// exit ;
37234: GO 37707
// if GetLives ( i ) < 250 then
37236: LD_VAR 0 4
37240: PPUSH
37241: CALL_OW 256
37245: PUSH
37246: LD_INT 250
37248: LESS
37249: IFFALSE 37262
// begin ComAutodestruct ( i ) ;
37251: LD_VAR 0 4
37255: PPUSH
37256: CALL 37106 0 1
// exit ;
37260: GO 37707
// end ; x := GetX ( enemy_unit ) ;
37262: LD_ADDR_VAR 0 7
37266: PUSH
37267: LD_VAR 0 2
37271: PPUSH
37272: CALL_OW 250
37276: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37277: LD_ADDR_VAR 0 8
37281: PUSH
37282: LD_VAR 0 2
37286: PPUSH
37287: CALL_OW 251
37291: ST_TO_ADDR
// if not x or not y then
37292: LD_VAR 0 7
37296: NOT
37297: IFTRUE 37306
37299: PUSH
37300: LD_VAR 0 8
37304: NOT
37305: OR
37306: IFFALSE 37310
// exit ;
37308: GO 37707
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37310: LD_ADDR_VAR 0 6
37314: PUSH
37315: LD_VAR 0 7
37319: PPUSH
37320: LD_INT 0
37322: PPUSH
37323: LD_INT 4
37325: PPUSH
37326: CALL_OW 272
37330: PUSH
37331: LD_VAR 0 8
37335: PPUSH
37336: LD_INT 0
37338: PPUSH
37339: LD_INT 4
37341: PPUSH
37342: CALL_OW 273
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_VAR 0 7
37355: PPUSH
37356: LD_INT 1
37358: PPUSH
37359: LD_INT 4
37361: PPUSH
37362: CALL_OW 272
37366: PUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_INT 1
37374: PPUSH
37375: LD_INT 4
37377: PPUSH
37378: CALL_OW 273
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_VAR 0 7
37391: PPUSH
37392: LD_INT 2
37394: PPUSH
37395: LD_INT 4
37397: PPUSH
37398: CALL_OW 272
37402: PUSH
37403: LD_VAR 0 8
37407: PPUSH
37408: LD_INT 2
37410: PPUSH
37411: LD_INT 4
37413: PPUSH
37414: CALL_OW 273
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_VAR 0 7
37427: PPUSH
37428: LD_INT 3
37430: PPUSH
37431: LD_INT 4
37433: PPUSH
37434: CALL_OW 272
37438: PUSH
37439: LD_VAR 0 8
37443: PPUSH
37444: LD_INT 3
37446: PPUSH
37447: LD_INT 4
37449: PPUSH
37450: CALL_OW 273
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_VAR 0 7
37463: PPUSH
37464: LD_INT 4
37466: PPUSH
37467: LD_INT 4
37469: PPUSH
37470: CALL_OW 272
37474: PUSH
37475: LD_VAR 0 8
37479: PPUSH
37480: LD_INT 4
37482: PPUSH
37483: LD_INT 4
37485: PPUSH
37486: CALL_OW 273
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_VAR 0 7
37499: PPUSH
37500: LD_INT 5
37502: PPUSH
37503: LD_INT 4
37505: PPUSH
37506: CALL_OW 272
37510: PUSH
37511: LD_VAR 0 8
37515: PPUSH
37516: LD_INT 5
37518: PPUSH
37519: LD_INT 4
37521: PPUSH
37522: CALL_OW 273
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: ST_TO_ADDR
// for i = tmp downto 1 do
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: DOUBLE
37545: LD_VAR 0 6
37549: INC
37550: ST_TO_ADDR
37551: LD_INT 1
37553: PUSH
37554: FOR_DOWNTO
37555: IFFALSE 37658
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37557: LD_VAR 0 6
37561: PUSH
37562: LD_VAR 0 4
37566: ARRAY
37567: PUSH
37568: LD_INT 1
37570: ARRAY
37571: PPUSH
37572: LD_VAR 0 6
37576: PUSH
37577: LD_VAR 0 4
37581: ARRAY
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: CALL_OW 488
37591: NOT
37592: IFTRUE 37634
37594: PUSH
37595: LD_VAR 0 6
37599: PUSH
37600: LD_VAR 0 4
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PPUSH
37610: LD_VAR 0 6
37614: PUSH
37615: LD_VAR 0 4
37619: ARRAY
37620: PUSH
37621: LD_INT 2
37623: ARRAY
37624: PPUSH
37625: CALL_OW 428
37629: PUSH
37630: LD_INT 0
37632: NONEQUAL
37633: OR
37634: IFFALSE 37656
// tmp := Delete ( tmp , i ) ;
37636: LD_ADDR_VAR 0 6
37640: PUSH
37641: LD_VAR 0 6
37645: PPUSH
37646: LD_VAR 0 4
37650: PPUSH
37651: CALL_OW 3
37655: ST_TO_ADDR
37656: GO 37554
37658: POP
37659: POP
// j := GetClosestHex ( unit , tmp ) ;
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: LD_VAR 0 1
37669: PPUSH
37670: LD_VAR 0 6
37674: PPUSH
37675: CALL 36952 0 2
37679: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37680: LD_VAR 0 1
37684: PPUSH
37685: LD_VAR 0 5
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 5
37698: PUSH
37699: LD_INT 2
37701: ARRAY
37702: PPUSH
37703: CALL_OW 111
// end ;
37707: LD_VAR 0 3
37711: RET
// export function PrepareApemanSoldier ( ) ; begin
37712: LD_INT 0
37714: PPUSH
// uc_nation := 0 ;
37715: LD_ADDR_OWVAR 21
37719: PUSH
37720: LD_INT 0
37722: ST_TO_ADDR
// hc_sex := sex_male ;
37723: LD_ADDR_OWVAR 27
37727: PUSH
37728: LD_INT 1
37730: ST_TO_ADDR
// hc_name :=  ;
37731: LD_ADDR_OWVAR 26
37735: PUSH
37736: LD_STRING 
37738: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37739: LD_ADDR_OWVAR 28
37743: PUSH
37744: LD_INT 15
37746: ST_TO_ADDR
// hc_gallery :=  ;
37747: LD_ADDR_OWVAR 33
37751: PUSH
37752: LD_STRING 
37754: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37755: LD_ADDR_OWVAR 31
37759: PUSH
37760: LD_INT 0
37762: PPUSH
37763: LD_INT 3
37765: PPUSH
37766: CALL_OW 12
37770: PUSH
37771: LD_INT 0
37773: PPUSH
37774: LD_INT 3
37776: PPUSH
37777: CALL_OW 12
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37794: LD_ADDR_OWVAR 29
37798: PUSH
37799: LD_INT 12
37801: PUSH
37802: LD_INT 12
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: ST_TO_ADDR
// end ;
37809: LD_VAR 0 1
37813: RET
// export function PrepareApemanEngineer ( ) ; begin
37814: LD_INT 0
37816: PPUSH
// uc_nation := 0 ;
37817: LD_ADDR_OWVAR 21
37821: PUSH
37822: LD_INT 0
37824: ST_TO_ADDR
// hc_sex := sex_male ;
37825: LD_ADDR_OWVAR 27
37829: PUSH
37830: LD_INT 1
37832: ST_TO_ADDR
// hc_name :=  ;
37833: LD_ADDR_OWVAR 26
37837: PUSH
37838: LD_STRING 
37840: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37841: LD_ADDR_OWVAR 28
37845: PUSH
37846: LD_INT 16
37848: ST_TO_ADDR
// hc_gallery :=  ;
37849: LD_ADDR_OWVAR 33
37853: PUSH
37854: LD_STRING 
37856: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37857: LD_ADDR_OWVAR 31
37861: PUSH
37862: LD_INT 0
37864: PPUSH
37865: LD_INT 3
37867: PPUSH
37868: CALL_OW 12
37872: PUSH
37873: LD_INT 0
37875: PPUSH
37876: LD_INT 3
37878: PPUSH
37879: CALL_OW 12
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37896: LD_ADDR_OWVAR 29
37900: PUSH
37901: LD_INT 12
37903: PUSH
37904: LD_INT 12
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: ST_TO_ADDR
// end ;
37911: LD_VAR 0 1
37915: RET
// export function PrepareApeman ( agressivity ) ; begin
37916: LD_INT 0
37918: PPUSH
// uc_side := 0 ;
37919: LD_ADDR_OWVAR 20
37923: PUSH
37924: LD_INT 0
37926: ST_TO_ADDR
// uc_nation := 0 ;
37927: LD_ADDR_OWVAR 21
37931: PUSH
37932: LD_INT 0
37934: ST_TO_ADDR
// hc_sex := sex_male ;
37935: LD_ADDR_OWVAR 27
37939: PUSH
37940: LD_INT 1
37942: ST_TO_ADDR
// hc_class := class_apeman ;
37943: LD_ADDR_OWVAR 28
37947: PUSH
37948: LD_INT 12
37950: ST_TO_ADDR
// hc_gallery :=  ;
37951: LD_ADDR_OWVAR 33
37955: PUSH
37956: LD_STRING 
37958: ST_TO_ADDR
// hc_name :=  ;
37959: LD_ADDR_OWVAR 26
37963: PUSH
37964: LD_STRING 
37966: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37967: LD_ADDR_OWVAR 29
37971: PUSH
37972: LD_INT 12
37974: PUSH
37975: LD_INT 12
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: ST_TO_ADDR
// if agressivity = 0 then
37982: LD_VAR 0 1
37986: PUSH
37987: LD_INT 0
37989: EQUAL
37990: IFFALSE 38002
// hc_agressivity := 0 else
37992: LD_ADDR_OWVAR 35
37996: PUSH
37997: LD_INT 0
37999: ST_TO_ADDR
38000: GO 38023
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38002: LD_ADDR_OWVAR 35
38006: PUSH
38007: LD_VAR 0 1
38011: NEG
38012: PPUSH
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 12
38022: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38023: LD_ADDR_OWVAR 31
38027: PUSH
38028: LD_INT 0
38030: PPUSH
38031: LD_INT 3
38033: PPUSH
38034: CALL_OW 12
38038: PUSH
38039: LD_INT 0
38041: PPUSH
38042: LD_INT 3
38044: PPUSH
38045: CALL_OW 12
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// end ;
38062: LD_VAR 0 2
38066: RET
// export function PrepareTiger ( agressivity ) ; begin
38067: LD_INT 0
38069: PPUSH
// uc_side := 0 ;
38070: LD_ADDR_OWVAR 20
38074: PUSH
38075: LD_INT 0
38077: ST_TO_ADDR
// uc_nation := 0 ;
38078: LD_ADDR_OWVAR 21
38082: PUSH
38083: LD_INT 0
38085: ST_TO_ADDR
// InitHc ;
38086: CALL_OW 19
// hc_class := class_tiger ;
38090: LD_ADDR_OWVAR 28
38094: PUSH
38095: LD_INT 14
38097: ST_TO_ADDR
// hc_gallery :=  ;
38098: LD_ADDR_OWVAR 33
38102: PUSH
38103: LD_STRING 
38105: ST_TO_ADDR
// hc_name :=  ;
38106: LD_ADDR_OWVAR 26
38110: PUSH
38111: LD_STRING 
38113: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38114: LD_ADDR_OWVAR 35
38118: PUSH
38119: LD_VAR 0 1
38123: NEG
38124: PPUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 12
38134: ST_TO_ADDR
// end ;
38135: LD_VAR 0 2
38139: RET
// export function PrepareEnchidna ( ) ; begin
38140: LD_INT 0
38142: PPUSH
// uc_side := 0 ;
38143: LD_ADDR_OWVAR 20
38147: PUSH
38148: LD_INT 0
38150: ST_TO_ADDR
// uc_nation := 0 ;
38151: LD_ADDR_OWVAR 21
38155: PUSH
38156: LD_INT 0
38158: ST_TO_ADDR
// InitHc ;
38159: CALL_OW 19
// hc_class := class_baggie ;
38163: LD_ADDR_OWVAR 28
38167: PUSH
38168: LD_INT 13
38170: ST_TO_ADDR
// hc_gallery :=  ;
38171: LD_ADDR_OWVAR 33
38175: PUSH
38176: LD_STRING 
38178: ST_TO_ADDR
// hc_name :=  ;
38179: LD_ADDR_OWVAR 26
38183: PUSH
38184: LD_STRING 
38186: ST_TO_ADDR
// end ;
38187: LD_VAR 0 1
38191: RET
// export function PrepareFrog ( ) ; begin
38192: LD_INT 0
38194: PPUSH
// uc_side := 0 ;
38195: LD_ADDR_OWVAR 20
38199: PUSH
38200: LD_INT 0
38202: ST_TO_ADDR
// uc_nation := 0 ;
38203: LD_ADDR_OWVAR 21
38207: PUSH
38208: LD_INT 0
38210: ST_TO_ADDR
// InitHc ;
38211: CALL_OW 19
// hc_class := class_frog ;
38215: LD_ADDR_OWVAR 28
38219: PUSH
38220: LD_INT 19
38222: ST_TO_ADDR
// hc_gallery :=  ;
38223: LD_ADDR_OWVAR 33
38227: PUSH
38228: LD_STRING 
38230: ST_TO_ADDR
// hc_name :=  ;
38231: LD_ADDR_OWVAR 26
38235: PUSH
38236: LD_STRING 
38238: ST_TO_ADDR
// end ;
38239: LD_VAR 0 1
38243: RET
// export function PrepareFish ( ) ; begin
38244: LD_INT 0
38246: PPUSH
// uc_side := 0 ;
38247: LD_ADDR_OWVAR 20
38251: PUSH
38252: LD_INT 0
38254: ST_TO_ADDR
// uc_nation := 0 ;
38255: LD_ADDR_OWVAR 21
38259: PUSH
38260: LD_INT 0
38262: ST_TO_ADDR
// InitHc ;
38263: CALL_OW 19
// hc_class := class_fish ;
38267: LD_ADDR_OWVAR 28
38271: PUSH
38272: LD_INT 20
38274: ST_TO_ADDR
// hc_gallery :=  ;
38275: LD_ADDR_OWVAR 33
38279: PUSH
38280: LD_STRING 
38282: ST_TO_ADDR
// hc_name :=  ;
38283: LD_ADDR_OWVAR 26
38287: PUSH
38288: LD_STRING 
38290: ST_TO_ADDR
// end ;
38291: LD_VAR 0 1
38295: RET
// export function PrepareBird ( ) ; begin
38296: LD_INT 0
38298: PPUSH
// uc_side := 0 ;
38299: LD_ADDR_OWVAR 20
38303: PUSH
38304: LD_INT 0
38306: ST_TO_ADDR
// uc_nation := 0 ;
38307: LD_ADDR_OWVAR 21
38311: PUSH
38312: LD_INT 0
38314: ST_TO_ADDR
// InitHc ;
38315: CALL_OW 19
// hc_class := class_phororhacos ;
38319: LD_ADDR_OWVAR 28
38323: PUSH
38324: LD_INT 18
38326: ST_TO_ADDR
// hc_gallery :=  ;
38327: LD_ADDR_OWVAR 33
38331: PUSH
38332: LD_STRING 
38334: ST_TO_ADDR
// hc_name :=  ;
38335: LD_ADDR_OWVAR 26
38339: PUSH
38340: LD_STRING 
38342: ST_TO_ADDR
// end ;
38343: LD_VAR 0 1
38347: RET
// export function PrepareHorse ( ) ; begin
38348: LD_INT 0
38350: PPUSH
// uc_side := 0 ;
38351: LD_ADDR_OWVAR 20
38355: PUSH
38356: LD_INT 0
38358: ST_TO_ADDR
// uc_nation := 0 ;
38359: LD_ADDR_OWVAR 21
38363: PUSH
38364: LD_INT 0
38366: ST_TO_ADDR
// InitHc ;
38367: CALL_OW 19
// hc_class := class_horse ;
38371: LD_ADDR_OWVAR 28
38375: PUSH
38376: LD_INT 21
38378: ST_TO_ADDR
// hc_gallery :=  ;
38379: LD_ADDR_OWVAR 33
38383: PUSH
38384: LD_STRING 
38386: ST_TO_ADDR
// hc_name :=  ;
38387: LD_ADDR_OWVAR 26
38391: PUSH
38392: LD_STRING 
38394: ST_TO_ADDR
// end ;
38395: LD_VAR 0 1
38399: RET
// export function PrepareMastodont ( ) ; begin
38400: LD_INT 0
38402: PPUSH
// uc_side := 0 ;
38403: LD_ADDR_OWVAR 20
38407: PUSH
38408: LD_INT 0
38410: ST_TO_ADDR
// uc_nation := 0 ;
38411: LD_ADDR_OWVAR 21
38415: PUSH
38416: LD_INT 0
38418: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38419: LD_ADDR_OWVAR 37
38423: PUSH
38424: LD_INT 31
38426: ST_TO_ADDR
// vc_control := control_rider ;
38427: LD_ADDR_OWVAR 38
38431: PUSH
38432: LD_INT 4
38434: ST_TO_ADDR
// end ;
38435: LD_VAR 0 1
38439: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38440: LD_INT 0
38442: PPUSH
38443: PPUSH
38444: PPUSH
// uc_side = 0 ;
38445: LD_ADDR_OWVAR 20
38449: PUSH
38450: LD_INT 0
38452: ST_TO_ADDR
// uc_nation = 0 ;
38453: LD_ADDR_OWVAR 21
38457: PUSH
38458: LD_INT 0
38460: ST_TO_ADDR
// InitHc_All ( ) ;
38461: CALL_OW 584
// InitVc ;
38465: CALL_OW 20
// if mastodonts then
38469: LD_VAR 0 6
38473: IFFALSE 38540
// for i = 1 to mastodonts do
38475: LD_ADDR_VAR 0 11
38479: PUSH
38480: DOUBLE
38481: LD_INT 1
38483: DEC
38484: ST_TO_ADDR
38485: LD_VAR 0 6
38489: PUSH
38490: FOR_TO
38491: IFFALSE 38538
// begin vc_chassis := 31 ;
38493: LD_ADDR_OWVAR 37
38497: PUSH
38498: LD_INT 31
38500: ST_TO_ADDR
// vc_control := control_rider ;
38501: LD_ADDR_OWVAR 38
38505: PUSH
38506: LD_INT 4
38508: ST_TO_ADDR
// animal := CreateVehicle ;
38509: LD_ADDR_VAR 0 12
38513: PUSH
38514: CALL_OW 45
38518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38519: LD_VAR 0 12
38523: PPUSH
38524: LD_VAR 0 8
38528: PPUSH
38529: LD_INT 0
38531: PPUSH
38532: CALL 40682 0 3
// end ;
38536: GO 38490
38538: POP
38539: POP
// if horses then
38540: LD_VAR 0 5
38544: IFFALSE 38611
// for i = 1 to horses do
38546: LD_ADDR_VAR 0 11
38550: PUSH
38551: DOUBLE
38552: LD_INT 1
38554: DEC
38555: ST_TO_ADDR
38556: LD_VAR 0 5
38560: PUSH
38561: FOR_TO
38562: IFFALSE 38609
// begin hc_class := 21 ;
38564: LD_ADDR_OWVAR 28
38568: PUSH
38569: LD_INT 21
38571: ST_TO_ADDR
// hc_gallery :=  ;
38572: LD_ADDR_OWVAR 33
38576: PUSH
38577: LD_STRING 
38579: ST_TO_ADDR
// animal := CreateHuman ;
38580: LD_ADDR_VAR 0 12
38584: PUSH
38585: CALL_OW 44
38589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38590: LD_VAR 0 12
38594: PPUSH
38595: LD_VAR 0 8
38599: PPUSH
38600: LD_INT 0
38602: PPUSH
38603: CALL 40682 0 3
// end ;
38607: GO 38561
38609: POP
38610: POP
// if birds then
38611: LD_VAR 0 1
38615: IFFALSE 38682
// for i = 1 to birds do
38617: LD_ADDR_VAR 0 11
38621: PUSH
38622: DOUBLE
38623: LD_INT 1
38625: DEC
38626: ST_TO_ADDR
38627: LD_VAR 0 1
38631: PUSH
38632: FOR_TO
38633: IFFALSE 38680
// begin hc_class := 18 ;
38635: LD_ADDR_OWVAR 28
38639: PUSH
38640: LD_INT 18
38642: ST_TO_ADDR
// hc_gallery =  ;
38643: LD_ADDR_OWVAR 33
38647: PUSH
38648: LD_STRING 
38650: ST_TO_ADDR
// animal := CreateHuman ;
38651: LD_ADDR_VAR 0 12
38655: PUSH
38656: CALL_OW 44
38660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38661: LD_VAR 0 12
38665: PPUSH
38666: LD_VAR 0 8
38670: PPUSH
38671: LD_INT 0
38673: PPUSH
38674: CALL 40682 0 3
// end ;
38678: GO 38632
38680: POP
38681: POP
// if tigers then
38682: LD_VAR 0 2
38686: IFFALSE 38770
// for i = 1 to tigers do
38688: LD_ADDR_VAR 0 11
38692: PUSH
38693: DOUBLE
38694: LD_INT 1
38696: DEC
38697: ST_TO_ADDR
38698: LD_VAR 0 2
38702: PUSH
38703: FOR_TO
38704: IFFALSE 38768
// begin hc_class = class_tiger ;
38706: LD_ADDR_OWVAR 28
38710: PUSH
38711: LD_INT 14
38713: ST_TO_ADDR
// hc_gallery =  ;
38714: LD_ADDR_OWVAR 33
38718: PUSH
38719: LD_STRING 
38721: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38722: LD_ADDR_OWVAR 35
38726: PUSH
38727: LD_INT 7
38729: NEG
38730: PPUSH
38731: LD_INT 7
38733: PPUSH
38734: CALL_OW 12
38738: ST_TO_ADDR
// animal := CreateHuman ;
38739: LD_ADDR_VAR 0 12
38743: PUSH
38744: CALL_OW 44
38748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38749: LD_VAR 0 12
38753: PPUSH
38754: LD_VAR 0 8
38758: PPUSH
38759: LD_INT 0
38761: PPUSH
38762: CALL 40682 0 3
// end ;
38766: GO 38703
38768: POP
38769: POP
// if apemans then
38770: LD_VAR 0 3
38774: IFFALSE 38897
// for i = 1 to apemans do
38776: LD_ADDR_VAR 0 11
38780: PUSH
38781: DOUBLE
38782: LD_INT 1
38784: DEC
38785: ST_TO_ADDR
38786: LD_VAR 0 3
38790: PUSH
38791: FOR_TO
38792: IFFALSE 38895
// begin hc_class = class_apeman ;
38794: LD_ADDR_OWVAR 28
38798: PUSH
38799: LD_INT 12
38801: ST_TO_ADDR
// hc_gallery =  ;
38802: LD_ADDR_OWVAR 33
38806: PUSH
38807: LD_STRING 
38809: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38810: LD_ADDR_OWVAR 35
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PPUSH
38819: LD_INT 2
38821: PPUSH
38822: CALL_OW 12
38826: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38827: LD_ADDR_OWVAR 31
38831: PUSH
38832: LD_INT 1
38834: PPUSH
38835: LD_INT 3
38837: PPUSH
38838: CALL_OW 12
38842: PUSH
38843: LD_INT 1
38845: PPUSH
38846: LD_INT 3
38848: PPUSH
38849: CALL_OW 12
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// animal := CreateHuman ;
38866: LD_ADDR_VAR 0 12
38870: PUSH
38871: CALL_OW 44
38875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38876: LD_VAR 0 12
38880: PPUSH
38881: LD_VAR 0 8
38885: PPUSH
38886: LD_INT 0
38888: PPUSH
38889: CALL 40682 0 3
// end ;
38893: GO 38791
38895: POP
38896: POP
// if enchidnas then
38897: LD_VAR 0 4
38901: IFFALSE 38968
// for i = 1 to enchidnas do
38903: LD_ADDR_VAR 0 11
38907: PUSH
38908: DOUBLE
38909: LD_INT 1
38911: DEC
38912: ST_TO_ADDR
38913: LD_VAR 0 4
38917: PUSH
38918: FOR_TO
38919: IFFALSE 38966
// begin hc_class = 13 ;
38921: LD_ADDR_OWVAR 28
38925: PUSH
38926: LD_INT 13
38928: ST_TO_ADDR
// hc_gallery =  ;
38929: LD_ADDR_OWVAR 33
38933: PUSH
38934: LD_STRING 
38936: ST_TO_ADDR
// animal := CreateHuman ;
38937: LD_ADDR_VAR 0 12
38941: PUSH
38942: CALL_OW 44
38946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38947: LD_VAR 0 12
38951: PPUSH
38952: LD_VAR 0 8
38956: PPUSH
38957: LD_INT 0
38959: PPUSH
38960: CALL 40682 0 3
// end ;
38964: GO 38918
38966: POP
38967: POP
// if fishes then
38968: LD_VAR 0 7
38972: IFFALSE 39039
// for i = 1 to fishes do
38974: LD_ADDR_VAR 0 11
38978: PUSH
38979: DOUBLE
38980: LD_INT 1
38982: DEC
38983: ST_TO_ADDR
38984: LD_VAR 0 7
38988: PUSH
38989: FOR_TO
38990: IFFALSE 39037
// begin hc_class = 20 ;
38992: LD_ADDR_OWVAR 28
38996: PUSH
38997: LD_INT 20
38999: ST_TO_ADDR
// hc_gallery =  ;
39000: LD_ADDR_OWVAR 33
39004: PUSH
39005: LD_STRING 
39007: ST_TO_ADDR
// animal := CreateHuman ;
39008: LD_ADDR_VAR 0 12
39012: PUSH
39013: CALL_OW 44
39017: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39018: LD_VAR 0 12
39022: PPUSH
39023: LD_VAR 0 9
39027: PPUSH
39028: LD_INT 0
39030: PPUSH
39031: CALL 40682 0 3
// end ;
39035: GO 38989
39037: POP
39038: POP
// end ;
39039: LD_VAR 0 10
39043: RET
// export function WantHeal ( sci , unit ) ; begin
39044: LD_INT 0
39046: PPUSH
// if GetTaskList ( sci ) > 0 then
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 437
39056: PUSH
39057: LD_INT 0
39059: GREATER
39060: IFFALSE 39132
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39062: LD_VAR 0 1
39066: PPUSH
39067: CALL_OW 437
39071: PUSH
39072: LD_INT 1
39074: ARRAY
39075: PUSH
39076: LD_INT 1
39078: ARRAY
39079: PUSH
39080: LD_STRING l
39082: EQUAL
39083: IFFALSE 39110
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 437
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PUSH
39100: LD_INT 4
39102: ARRAY
39103: PUSH
39104: LD_VAR 0 2
39108: EQUAL
39109: AND
39110: IFFALSE 39122
// result := true else
39112: LD_ADDR_VAR 0 3
39116: PUSH
39117: LD_INT 1
39119: ST_TO_ADDR
39120: GO 39130
// result := false ;
39122: LD_ADDR_VAR 0 3
39126: PUSH
39127: LD_INT 0
39129: ST_TO_ADDR
// end else
39130: GO 39140
// result := false ;
39132: LD_ADDR_VAR 0 3
39136: PUSH
39137: LD_INT 0
39139: ST_TO_ADDR
// end ;
39140: LD_VAR 0 3
39144: RET
// export function HealTarget ( sci ) ; begin
39145: LD_INT 0
39147: PPUSH
// if not sci then
39148: LD_VAR 0 1
39152: NOT
39153: IFFALSE 39157
// exit ;
39155: GO 39222
// result := 0 ;
39157: LD_ADDR_VAR 0 2
39161: PUSH
39162: LD_INT 0
39164: ST_TO_ADDR
// if GetTaskList ( sci ) then
39165: LD_VAR 0 1
39169: PPUSH
39170: CALL_OW 437
39174: IFFALSE 39222
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 437
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: PUSH
39194: LD_STRING l
39196: EQUAL
39197: IFFALSE 39222
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39199: LD_ADDR_VAR 0 2
39203: PUSH
39204: LD_VAR 0 1
39208: PPUSH
39209: CALL_OW 437
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: PUSH
39218: LD_INT 4
39220: ARRAY
39221: ST_TO_ADDR
// end ;
39222: LD_VAR 0 2
39226: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39227: LD_INT 0
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
// if not base_units then
39233: LD_VAR 0 1
39237: NOT
39238: IFFALSE 39242
// exit ;
39240: GO 39329
// result := false ;
39242: LD_ADDR_VAR 0 2
39246: PUSH
39247: LD_INT 0
39249: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39250: LD_ADDR_VAR 0 5
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: LD_INT 21
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PPUSH
39270: CALL_OW 72
39274: ST_TO_ADDR
// if not tmp then
39275: LD_VAR 0 5
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39329
// for i in tmp do
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_VAR 0 5
39293: PUSH
39294: FOR_IN
39295: IFFALSE 39327
// begin result := EnemyInRange ( i , 22 ) ;
39297: LD_ADDR_VAR 0 2
39301: PUSH
39302: LD_VAR 0 3
39306: PPUSH
39307: LD_INT 22
39309: PPUSH
39310: CALL 36754 0 2
39314: ST_TO_ADDR
// if result then
39315: LD_VAR 0 2
39319: IFFALSE 39325
// exit ;
39321: POP
39322: POP
39323: GO 39329
// end ;
39325: GO 39294
39327: POP
39328: POP
// end ;
39329: LD_VAR 0 2
39333: RET
// export function FilterByTag ( units , tag ) ; begin
39334: LD_INT 0
39336: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_VAR 0 1
39346: PPUSH
39347: LD_INT 120
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PPUSH
39359: CALL_OW 72
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 3
39368: RET
// export function IsDriver ( un ) ; begin
39369: LD_INT 0
39371: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39372: LD_ADDR_VAR 0 2
39376: PUSH
39377: LD_VAR 0 1
39381: PUSH
39382: LD_INT 55
39384: PUSH
39385: EMPTY
39386: LIST
39387: PPUSH
39388: CALL_OW 69
39392: IN
39393: ST_TO_ADDR
// end ;
39394: LD_VAR 0 2
39398: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39399: LD_INT 0
39401: PPUSH
39402: PPUSH
// list := [ ] ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// case d of 0 :
39410: LD_VAR 0 3
39414: PUSH
39415: LD_INT 0
39417: DOUBLE
39418: EQUAL
39419: IFTRUE 39423
39421: GO 39556
39423: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39424: LD_ADDR_VAR 0 5
39428: PUSH
39429: LD_VAR 0 1
39433: PUSH
39434: LD_INT 4
39436: MINUS
39437: PUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_INT 4
39445: MINUS
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: PUSH
39455: LD_VAR 0 1
39459: PUSH
39460: LD_INT 3
39462: MINUS
39463: PUSH
39464: LD_VAR 0 2
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: PUSH
39477: LD_VAR 0 1
39481: PUSH
39482: LD_INT 4
39484: PLUS
39485: PUSH
39486: LD_VAR 0 2
39490: PUSH
39491: LD_INT 4
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: PUSH
39499: LD_VAR 0 1
39503: PUSH
39504: LD_INT 3
39506: PLUS
39507: PUSH
39508: LD_VAR 0 2
39512: PUSH
39513: LD_INT 3
39515: PLUS
39516: PUSH
39517: LD_INT 5
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: PUSH
39525: LD_VAR 0 1
39529: PUSH
39530: LD_VAR 0 2
39534: PUSH
39535: LD_INT 4
39537: PLUS
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: ST_TO_ADDR
// end ; 1 :
39554: GO 40254
39556: LD_INT 1
39558: DOUBLE
39559: EQUAL
39560: IFTRUE 39564
39562: GO 39697
39564: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39565: LD_ADDR_VAR 0 5
39569: PUSH
39570: LD_VAR 0 1
39574: PUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_INT 4
39582: MINUS
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: LD_INT 3
39599: MINUS
39600: PUSH
39601: LD_VAR 0 2
39605: PUSH
39606: LD_INT 3
39608: MINUS
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: PUSH
39618: LD_VAR 0 1
39622: PUSH
39623: LD_INT 4
39625: MINUS
39626: PUSH
39627: LD_VAR 0 2
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: PUSH
39640: LD_VAR 0 1
39644: PUSH
39645: LD_VAR 0 2
39649: PUSH
39650: LD_INT 3
39652: PLUS
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: PUSH
39662: LD_VAR 0 1
39666: PUSH
39667: LD_INT 4
39669: PLUS
39670: PUSH
39671: LD_VAR 0 2
39675: PUSH
39676: LD_INT 4
39678: PLUS
39679: PUSH
39680: LD_INT 5
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// end ; 2 :
39695: GO 40254
39697: LD_INT 2
39699: DOUBLE
39700: EQUAL
39701: IFTRUE 39705
39703: GO 39834
39705: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39706: LD_ADDR_VAR 0 5
39710: PUSH
39711: LD_VAR 0 1
39715: PUSH
39716: LD_VAR 0 2
39720: PUSH
39721: LD_INT 3
39723: MINUS
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: PUSH
39733: LD_VAR 0 1
39737: PUSH
39738: LD_INT 4
39740: PLUS
39741: PUSH
39742: LD_VAR 0 2
39746: PUSH
39747: LD_INT 4
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: PUSH
39755: LD_VAR 0 1
39759: PUSH
39760: LD_VAR 0 2
39764: PUSH
39765: LD_INT 4
39767: PLUS
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: LD_INT 3
39784: MINUS
39785: PUSH
39786: LD_VAR 0 2
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: PUSH
39799: LD_VAR 0 1
39803: PUSH
39804: LD_INT 4
39806: MINUS
39807: PUSH
39808: LD_VAR 0 2
39812: PUSH
39813: LD_INT 4
39815: MINUS
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: ST_TO_ADDR
// end ; 3 :
39832: GO 40254
39834: LD_INT 3
39836: DOUBLE
39837: EQUAL
39838: IFTRUE 39842
39840: GO 39975
39842: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39843: LD_ADDR_VAR 0 5
39847: PUSH
39848: LD_VAR 0 1
39852: PUSH
39853: LD_INT 3
39855: PLUS
39856: PUSH
39857: LD_VAR 0 2
39861: PUSH
39862: LD_INT 4
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: PUSH
39870: LD_VAR 0 1
39874: PUSH
39875: LD_INT 4
39877: PLUS
39878: PUSH
39879: LD_VAR 0 2
39883: PUSH
39884: LD_INT 4
39886: PLUS
39887: PUSH
39888: LD_INT 5
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: PUSH
39896: LD_VAR 0 1
39900: PUSH
39901: LD_INT 4
39903: MINUS
39904: PUSH
39905: LD_VAR 0 2
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: PUSH
39918: LD_VAR 0 1
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: LD_INT 4
39930: MINUS
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: PUSH
39940: LD_VAR 0 1
39944: PUSH
39945: LD_INT 3
39947: MINUS
39948: PUSH
39949: LD_VAR 0 2
39953: PUSH
39954: LD_INT 3
39956: MINUS
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: ST_TO_ADDR
// end ; 4 :
39973: GO 40254
39975: LD_INT 4
39977: DOUBLE
39978: EQUAL
39979: IFTRUE 39983
39981: GO 40116
39983: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39984: LD_ADDR_VAR 0 5
39988: PUSH
39989: LD_VAR 0 1
39993: PUSH
39994: LD_VAR 0 2
39998: PUSH
39999: LD_INT 4
40001: PLUS
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: PUSH
40011: LD_VAR 0 1
40015: PUSH
40016: LD_INT 3
40018: PLUS
40019: PUSH
40020: LD_VAR 0 2
40024: PUSH
40025: LD_INT 3
40027: PLUS
40028: PUSH
40029: LD_INT 5
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: PUSH
40037: LD_VAR 0 1
40041: PUSH
40042: LD_INT 4
40044: PLUS
40045: PUSH
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: PUSH
40059: LD_VAR 0 1
40063: PUSH
40064: LD_VAR 0 2
40068: PUSH
40069: LD_INT 3
40071: MINUS
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: PUSH
40081: LD_VAR 0 1
40085: PUSH
40086: LD_INT 4
40088: MINUS
40089: PUSH
40090: LD_VAR 0 2
40094: PUSH
40095: LD_INT 4
40097: MINUS
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
// end ; 5 :
40114: GO 40254
40116: LD_INT 5
40118: DOUBLE
40119: EQUAL
40120: IFTRUE 40124
40122: GO 40253
40124: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40125: LD_ADDR_VAR 0 5
40129: PUSH
40130: LD_VAR 0 1
40134: PUSH
40135: LD_INT 4
40137: MINUS
40138: PUSH
40139: LD_VAR 0 2
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: LD_VAR 0 2
40161: PUSH
40162: LD_INT 4
40164: MINUS
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_INT 4
40181: PLUS
40182: PUSH
40183: LD_VAR 0 2
40187: PUSH
40188: LD_INT 4
40190: PLUS
40191: PUSH
40192: LD_INT 5
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: PUSH
40200: LD_VAR 0 1
40204: PUSH
40205: LD_INT 3
40207: PLUS
40208: PUSH
40209: LD_VAR 0 2
40213: PUSH
40214: LD_INT 4
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: PUSH
40222: LD_VAR 0 1
40226: PUSH
40227: LD_VAR 0 2
40231: PUSH
40232: LD_INT 3
40234: PLUS
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// end ; end ;
40251: GO 40254
40253: POP
// result := list ;
40254: LD_ADDR_VAR 0 4
40258: PUSH
40259: LD_VAR 0 5
40263: ST_TO_ADDR
// end ;
40264: LD_VAR 0 4
40268: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40274: LD_VAR 0 1
40278: NOT
40279: IFTRUE 40307
40281: PUSH
40282: LD_VAR 0 2
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 3
40295: PUSH
40296: LD_INT 4
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: IN
40305: NOT
40306: OR
40307: IFFALSE 40311
// exit ;
40309: GO 40394
// tmp := [ ] ;
40311: LD_ADDR_VAR 0 5
40315: PUSH
40316: EMPTY
40317: ST_TO_ADDR
// for i in units do
40318: LD_ADDR_VAR 0 4
40322: PUSH
40323: LD_VAR 0 1
40327: PUSH
40328: FOR_IN
40329: IFFALSE 40363
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40331: LD_ADDR_VAR 0 5
40335: PUSH
40336: LD_VAR 0 5
40340: PPUSH
40341: LD_VAR 0 4
40345: PPUSH
40346: LD_VAR 0 2
40350: PPUSH
40351: CALL_OW 259
40355: PPUSH
40356: CALL 41789 0 2
40360: ST_TO_ADDR
40361: GO 40328
40363: POP
40364: POP
// if not tmp then
40365: LD_VAR 0 5
40369: NOT
40370: IFFALSE 40374
// exit ;
40372: GO 40394
// result := SortListByListDesc ( units , tmp ) ;
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: LD_VAR 0 1
40383: PPUSH
40384: LD_VAR 0 5
40388: PPUSH
40389: CALL_OW 77
40393: ST_TO_ADDR
// end ;
40394: LD_VAR 0 3
40398: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40399: LD_INT 0
40401: PPUSH
40402: PPUSH
40403: PPUSH
// result := false ;
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: LD_INT 0
40411: ST_TO_ADDR
// if not building then
40412: LD_VAR 0 2
40416: NOT
40417: IFFALSE 40421
// exit ;
40419: GO 40565
// x := GetX ( building ) ;
40421: LD_ADDR_VAR 0 4
40425: PUSH
40426: LD_VAR 0 2
40430: PPUSH
40431: CALL_OW 250
40435: ST_TO_ADDR
// y := GetY ( building ) ;
40436: LD_ADDR_VAR 0 5
40440: PUSH
40441: LD_VAR 0 2
40445: PPUSH
40446: CALL_OW 251
40450: ST_TO_ADDR
// if not x or not y then
40451: LD_VAR 0 4
40455: NOT
40456: IFTRUE 40465
40458: PUSH
40459: LD_VAR 0 5
40463: NOT
40464: OR
40465: IFFALSE 40469
// exit ;
40467: GO 40565
// if GetTaskList ( unit ) then
40469: LD_VAR 0 1
40473: PPUSH
40474: CALL_OW 437
40478: IFFALSE 40565
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40480: LD_STRING e
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 437
40492: PUSH
40493: LD_INT 1
40495: ARRAY
40496: PUSH
40497: LD_INT 1
40499: ARRAY
40500: EQUAL
40501: IFFALSE 40528
40503: PUSH
40504: LD_VAR 0 4
40508: PUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 437
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: PUSH
40523: LD_INT 2
40525: ARRAY
40526: EQUAL
40527: AND
40528: IFFALSE 40555
40530: PUSH
40531: LD_VAR 0 5
40535: PUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 437
40545: PUSH
40546: LD_INT 1
40548: ARRAY
40549: PUSH
40550: LD_INT 3
40552: ARRAY
40553: EQUAL
40554: AND
40555: IFFALSE 40565
// result := true end ;
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_INT 1
40564: ST_TO_ADDR
// end ;
40565: LD_VAR 0 3
40569: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40570: LD_INT 0
40572: PPUSH
// result := false ;
40573: LD_ADDR_VAR 0 4
40577: PUSH
40578: LD_INT 0
40580: ST_TO_ADDR
// if GetTaskList ( unit ) then
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 437
40590: IFFALSE 40677
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40592: LD_STRING M
40594: PUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 437
40604: PUSH
40605: LD_INT 1
40607: ARRAY
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: EQUAL
40613: IFFALSE 40640
40615: PUSH
40616: LD_VAR 0 2
40620: PUSH
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 437
40630: PUSH
40631: LD_INT 1
40633: ARRAY
40634: PUSH
40635: LD_INT 2
40637: ARRAY
40638: EQUAL
40639: AND
40640: IFFALSE 40667
40642: PUSH
40643: LD_VAR 0 3
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 437
40657: PUSH
40658: LD_INT 1
40660: ARRAY
40661: PUSH
40662: LD_INT 3
40664: ARRAY
40665: EQUAL
40666: AND
40667: IFFALSE 40677
// result := true ;
40669: LD_ADDR_VAR 0 4
40673: PUSH
40674: LD_INT 1
40676: ST_TO_ADDR
// end ; end ;
40677: LD_VAR 0 4
40681: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40682: LD_INT 0
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
// if not unit or not area then
40688: LD_VAR 0 1
40692: NOT
40693: IFTRUE 40702
40695: PUSH
40696: LD_VAR 0 2
40700: NOT
40701: OR
40702: IFFALSE 40706
// exit ;
40704: GO 40882
// tmp := AreaToList ( area , i ) ;
40706: LD_ADDR_VAR 0 6
40710: PUSH
40711: LD_VAR 0 2
40715: PPUSH
40716: LD_VAR 0 5
40720: PPUSH
40721: CALL_OW 517
40725: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40726: LD_ADDR_VAR 0 5
40730: PUSH
40731: DOUBLE
40732: LD_INT 1
40734: DEC
40735: ST_TO_ADDR
40736: LD_VAR 0 6
40740: PUSH
40741: LD_INT 1
40743: ARRAY
40744: PUSH
40745: FOR_TO
40746: IFFALSE 40880
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40748: LD_ADDR_VAR 0 7
40752: PUSH
40753: LD_VAR 0 6
40757: PUSH
40758: LD_INT 1
40760: ARRAY
40761: PUSH
40762: LD_VAR 0 5
40766: ARRAY
40767: PUSH
40768: LD_VAR 0 6
40772: PUSH
40773: LD_INT 2
40775: ARRAY
40776: PUSH
40777: LD_VAR 0 5
40781: ARRAY
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40787: LD_INT 92
40789: PUSH
40790: LD_VAR 0 7
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PUSH
40799: LD_VAR 0 7
40803: PUSH
40804: LD_INT 2
40806: ARRAY
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: PPUSH
40817: CALL_OW 69
40821: PUSH
40822: LD_INT 0
40824: EQUAL
40825: IFFALSE 40878
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40827: LD_VAR 0 1
40831: PPUSH
40832: LD_VAR 0 7
40836: PUSH
40837: LD_INT 1
40839: ARRAY
40840: PPUSH
40841: LD_VAR 0 7
40845: PUSH
40846: LD_INT 2
40848: ARRAY
40849: PPUSH
40850: LD_VAR 0 3
40854: PPUSH
40855: CALL_OW 48
// result := IsPlaced ( unit ) ;
40859: LD_ADDR_VAR 0 4
40863: PUSH
40864: LD_VAR 0 1
40868: PPUSH
40869: CALL_OW 305
40873: ST_TO_ADDR
// exit ;
40874: POP
40875: POP
40876: GO 40882
// end ; end ;
40878: GO 40745
40880: POP
40881: POP
// end ;
40882: LD_VAR 0 4
40886: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40887: LD_INT 0
40889: PPUSH
40890: PPUSH
40891: PPUSH
// if not side or side > 8 then
40892: LD_VAR 0 1
40896: NOT
40897: IFTRUE 40909
40899: PUSH
40900: LD_VAR 0 1
40904: PUSH
40905: LD_INT 8
40907: GREATER
40908: OR
40909: IFFALSE 40913
// exit ;
40911: GO 41100
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40913: LD_ADDR_VAR 0 4
40917: PUSH
40918: LD_INT 22
40920: PUSH
40921: LD_VAR 0 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 21
40932: PUSH
40933: LD_INT 3
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PPUSH
40944: CALL_OW 69
40948: ST_TO_ADDR
// if not tmp then
40949: LD_VAR 0 4
40953: NOT
40954: IFFALSE 40958
// exit ;
40956: GO 41100
// enable_addtolog := true ;
40958: LD_ADDR_OWVAR 81
40962: PUSH
40963: LD_INT 1
40965: ST_TO_ADDR
// AddToLog ( [ ) ;
40966: LD_STRING [
40968: PPUSH
40969: CALL_OW 561
// for i in tmp do
40973: LD_ADDR_VAR 0 3
40977: PUSH
40978: LD_VAR 0 4
40982: PUSH
40983: FOR_IN
40984: IFFALSE 41091
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40986: LD_STRING [
40988: PUSH
40989: LD_VAR 0 3
40993: PPUSH
40994: CALL_OW 266
40998: STR
40999: PUSH
41000: LD_STRING , 
41002: STR
41003: PUSH
41004: LD_VAR 0 3
41008: PPUSH
41009: CALL_OW 250
41013: STR
41014: PUSH
41015: LD_STRING , 
41017: STR
41018: PUSH
41019: LD_VAR 0 3
41023: PPUSH
41024: CALL_OW 251
41028: STR
41029: PUSH
41030: LD_STRING , 
41032: STR
41033: PUSH
41034: LD_VAR 0 3
41038: PPUSH
41039: CALL_OW 254
41043: STR
41044: PUSH
41045: LD_STRING , 
41047: STR
41048: PUSH
41049: LD_VAR 0 3
41053: PPUSH
41054: LD_INT 1
41056: PPUSH
41057: CALL_OW 268
41061: STR
41062: PUSH
41063: LD_STRING , 
41065: STR
41066: PUSH
41067: LD_VAR 0 3
41071: PPUSH
41072: LD_INT 2
41074: PPUSH
41075: CALL_OW 268
41079: STR
41080: PUSH
41081: LD_STRING ],
41083: STR
41084: PPUSH
41085: CALL_OW 561
// end ;
41089: GO 40983
41091: POP
41092: POP
// AddToLog ( ]; ) ;
41093: LD_STRING ];
41095: PPUSH
41096: CALL_OW 561
// end ;
41100: LD_VAR 0 2
41104: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41105: LD_INT 0
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
// if not area or not rate or not max then
41112: LD_VAR 0 1
41116: NOT
41117: IFTRUE 41126
41119: PUSH
41120: LD_VAR 0 2
41124: NOT
41125: OR
41126: IFTRUE 41135
41128: PUSH
41129: LD_VAR 0 4
41133: NOT
41134: OR
41135: IFFALSE 41139
// exit ;
41137: GO 41328
// while 1 do
41139: LD_INT 1
41141: IFFALSE 41328
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41143: LD_ADDR_VAR 0 9
41147: PUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: LD_INT 1
41155: PPUSH
41156: CALL_OW 287
41160: PUSH
41161: LD_INT 10
41163: MUL
41164: ST_TO_ADDR
// r := rate / 10 ;
41165: LD_ADDR_VAR 0 7
41169: PUSH
41170: LD_VAR 0 2
41174: PUSH
41175: LD_INT 10
41177: DIVREAL
41178: ST_TO_ADDR
// time := 1 1$00 ;
41179: LD_ADDR_VAR 0 8
41183: PUSH
41184: LD_INT 2100
41186: ST_TO_ADDR
// if amount < min then
41187: LD_VAR 0 9
41191: PUSH
41192: LD_VAR 0 3
41196: LESS
41197: IFFALSE 41215
// r := r * 2 else
41199: LD_ADDR_VAR 0 7
41203: PUSH
41204: LD_VAR 0 7
41208: PUSH
41209: LD_INT 2
41211: MUL
41212: ST_TO_ADDR
41213: GO 41241
// if amount > max then
41215: LD_VAR 0 9
41219: PUSH
41220: LD_VAR 0 4
41224: GREATER
41225: IFFALSE 41241
// r := r / 2 ;
41227: LD_ADDR_VAR 0 7
41231: PUSH
41232: LD_VAR 0 7
41236: PUSH
41237: LD_INT 2
41239: DIVREAL
41240: ST_TO_ADDR
// time := time / r ;
41241: LD_ADDR_VAR 0 8
41245: PUSH
41246: LD_VAR 0 8
41250: PUSH
41251: LD_VAR 0 7
41255: DIVREAL
41256: ST_TO_ADDR
// if time < 0 then
41257: LD_VAR 0 8
41261: PUSH
41262: LD_INT 0
41264: LESS
41265: IFFALSE 41282
// time := time * - 1 ;
41267: LD_ADDR_VAR 0 8
41271: PUSH
41272: LD_VAR 0 8
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: MUL
41281: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41282: LD_VAR 0 8
41286: PUSH
41287: LD_INT 35
41289: PPUSH
41290: LD_INT 875
41292: PPUSH
41293: CALL_OW 12
41297: PLUS
41298: PPUSH
41299: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41303: LD_INT 1
41305: PPUSH
41306: LD_INT 5
41308: PPUSH
41309: CALL_OW 12
41313: PPUSH
41314: LD_VAR 0 1
41318: PPUSH
41319: LD_INT 1
41321: PPUSH
41322: CALL_OW 55
// end ;
41326: GO 41139
// end ;
41328: LD_VAR 0 5
41332: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
// if not turrets or not factories then
41343: LD_VAR 0 1
41347: NOT
41348: IFTRUE 41357
41350: PUSH
41351: LD_VAR 0 2
41355: NOT
41356: OR
41357: IFFALSE 41361
// exit ;
41359: GO 41668
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41361: LD_ADDR_VAR 0 10
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: LD_INT 6
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 4
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 5
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 24
41403: PUSH
41404: LD_INT 25
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 23
41413: PUSH
41414: LD_INT 27
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 42
41427: PUSH
41428: LD_INT 43
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 44
41437: PUSH
41438: LD_INT 46
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 45
41447: PUSH
41448: LD_INT 47
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
// result := [ ] ;
41465: LD_ADDR_VAR 0 3
41469: PUSH
41470: EMPTY
41471: ST_TO_ADDR
// for i in turrets do
41472: LD_ADDR_VAR 0 4
41476: PUSH
41477: LD_VAR 0 1
41481: PUSH
41482: FOR_IN
41483: IFFALSE 41666
// begin nat := GetNation ( i ) ;
41485: LD_ADDR_VAR 0 7
41489: PUSH
41490: LD_VAR 0 4
41494: PPUSH
41495: CALL_OW 248
41499: ST_TO_ADDR
// weapon := 0 ;
41500: LD_ADDR_VAR 0 8
41504: PUSH
41505: LD_INT 0
41507: ST_TO_ADDR
// if not nat then
41508: LD_VAR 0 7
41512: NOT
41513: IFFALSE 41517
// continue ;
41515: GO 41482
// for j in list [ nat ] do
41517: LD_ADDR_VAR 0 5
41521: PUSH
41522: LD_VAR 0 10
41526: PUSH
41527: LD_VAR 0 7
41531: ARRAY
41532: PUSH
41533: FOR_IN
41534: IFFALSE 41575
// if GetBWeapon ( i ) = j [ 1 ] then
41536: LD_VAR 0 4
41540: PPUSH
41541: CALL_OW 269
41545: PUSH
41546: LD_VAR 0 5
41550: PUSH
41551: LD_INT 1
41553: ARRAY
41554: EQUAL
41555: IFFALSE 41573
// begin weapon := j [ 2 ] ;
41557: LD_ADDR_VAR 0 8
41561: PUSH
41562: LD_VAR 0 5
41566: PUSH
41567: LD_INT 2
41569: ARRAY
41570: ST_TO_ADDR
// break ;
41571: GO 41575
// end ;
41573: GO 41533
41575: POP
41576: POP
// if not weapon then
41577: LD_VAR 0 8
41581: NOT
41582: IFFALSE 41586
// continue ;
41584: GO 41482
// for k in factories do
41586: LD_ADDR_VAR 0 6
41590: PUSH
41591: LD_VAR 0 2
41595: PUSH
41596: FOR_IN
41597: IFFALSE 41662
// begin weapons := AvailableWeaponList ( k ) ;
41599: LD_ADDR_VAR 0 9
41603: PUSH
41604: LD_VAR 0 6
41608: PPUSH
41609: CALL_OW 478
41613: ST_TO_ADDR
// if not weapons then
41614: LD_VAR 0 9
41618: NOT
41619: IFFALSE 41623
// continue ;
41621: GO 41596
// if weapon in weapons then
41623: LD_VAR 0 8
41627: PUSH
41628: LD_VAR 0 9
41632: IN
41633: IFFALSE 41660
// begin result := [ i , weapon ] ;
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_VAR 0 4
41644: PUSH
41645: LD_VAR 0 8
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: ST_TO_ADDR
// exit ;
41654: POP
41655: POP
41656: POP
41657: POP
41658: GO 41668
// end ; end ;
41660: GO 41596
41662: POP
41663: POP
// end ;
41664: GO 41482
41666: POP
41667: POP
// end ;
41668: LD_VAR 0 3
41672: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41673: LD_INT 0
41675: PPUSH
// if not side or side > 8 then
41676: LD_VAR 0 3
41680: NOT
41681: IFTRUE 41693
41683: PUSH
41684: LD_VAR 0 3
41688: PUSH
41689: LD_INT 8
41691: GREATER
41692: OR
41693: IFFALSE 41697
// exit ;
41695: GO 41756
// if not range then
41697: LD_VAR 0 4
41701: NOT
41702: IFFALSE 41713
// range := - 12 ;
41704: LD_ADDR_VAR 0 4
41708: PUSH
41709: LD_INT 12
41711: NEG
41712: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41713: LD_VAR 0 1
41717: PPUSH
41718: LD_VAR 0 2
41722: PPUSH
41723: LD_VAR 0 3
41727: PPUSH
41728: LD_VAR 0 4
41732: PPUSH
41733: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41737: LD_VAR 0 1
41741: PPUSH
41742: LD_VAR 0 2
41746: PPUSH
41747: LD_VAR 0 3
41751: PPUSH
41752: CALL_OW 331
// end ;
41756: LD_VAR 0 5
41760: RET
// export function Video ( mode ) ; begin
41761: LD_INT 0
41763: PPUSH
// ingame_video = mode ;
41764: LD_ADDR_OWVAR 52
41768: PUSH
41769: LD_VAR 0 1
41773: ST_TO_ADDR
// interface_hidden = mode ;
41774: LD_ADDR_OWVAR 54
41778: PUSH
41779: LD_VAR 0 1
41783: ST_TO_ADDR
// end ;
41784: LD_VAR 0 2
41788: RET
// export function Join ( array , element ) ; begin
41789: LD_INT 0
41791: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_VAR 0 1
41806: PUSH
41807: LD_INT 1
41809: PLUS
41810: PPUSH
41811: LD_VAR 0 2
41815: PPUSH
41816: CALL_OW 1
41820: ST_TO_ADDR
// end ;
41821: LD_VAR 0 3
41825: RET
// export function JoinUnion ( array , element ) ; begin
41826: LD_INT 0
41828: PPUSH
// result := array union element ;
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_VAR 0 1
41838: PUSH
41839: LD_VAR 0 2
41843: UNION
41844: ST_TO_ADDR
// end ;
41845: LD_VAR 0 3
41849: RET
// export function GetBehemoths ( side ) ; begin
41850: LD_INT 0
41852: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41853: LD_ADDR_VAR 0 2
41857: PUSH
41858: LD_INT 22
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 31
41872: PUSH
41873: LD_INT 25
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PPUSH
41884: CALL_OW 69
41888: ST_TO_ADDR
// end ;
41889: LD_VAR 0 2
41893: RET
// export function Shuffle ( array ) ; var i , index ; begin
41894: LD_INT 0
41896: PPUSH
41897: PPUSH
41898: PPUSH
// result := [ ] ;
41899: LD_ADDR_VAR 0 2
41903: PUSH
41904: EMPTY
41905: ST_TO_ADDR
// if not array then
41906: LD_VAR 0 1
41910: NOT
41911: IFFALSE 41915
// exit ;
41913: GO 42014
// Randomize ;
41915: CALL_OW 10
// for i = array downto 1 do
41919: LD_ADDR_VAR 0 3
41923: PUSH
41924: DOUBLE
41925: LD_VAR 0 1
41929: INC
41930: ST_TO_ADDR
41931: LD_INT 1
41933: PUSH
41934: FOR_DOWNTO
41935: IFFALSE 42012
// begin index := rand ( 1 , array ) ;
41937: LD_ADDR_VAR 0 4
41941: PUSH
41942: LD_INT 1
41944: PPUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 12
41954: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41955: LD_ADDR_VAR 0 2
41959: PUSH
41960: LD_VAR 0 2
41964: PPUSH
41965: LD_VAR 0 2
41969: PUSH
41970: LD_INT 1
41972: PLUS
41973: PPUSH
41974: LD_VAR 0 1
41978: PUSH
41979: LD_VAR 0 4
41983: ARRAY
41984: PPUSH
41985: CALL_OW 2
41989: ST_TO_ADDR
// array := Delete ( array , index ) ;
41990: LD_ADDR_VAR 0 1
41994: PUSH
41995: LD_VAR 0 1
41999: PPUSH
42000: LD_VAR 0 4
42004: PPUSH
42005: CALL_OW 3
42009: ST_TO_ADDR
// end ;
42010: GO 41934
42012: POP
42013: POP
// end ;
42014: LD_VAR 0 2
42018: RET
// export function GetBaseMaterials ( base ) ; begin
42019: LD_INT 0
42021: PPUSH
// result := [ 0 , 0 , 0 ] ;
42022: LD_ADDR_VAR 0 2
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// if not base then
42041: LD_VAR 0 1
42045: NOT
42046: IFFALSE 42050
// exit ;
42048: GO 42099
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42050: LD_ADDR_VAR 0 2
42054: PUSH
42055: LD_VAR 0 1
42059: PPUSH
42060: LD_INT 1
42062: PPUSH
42063: CALL_OW 275
42067: PUSH
42068: LD_VAR 0 1
42072: PPUSH
42073: LD_INT 2
42075: PPUSH
42076: CALL_OW 275
42080: PUSH
42081: LD_VAR 0 1
42085: PPUSH
42086: LD_INT 3
42088: PPUSH
42089: CALL_OW 275
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
// end ;
42099: LD_VAR 0 2
42103: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42104: LD_INT 0
42106: PPUSH
42107: PPUSH
// result := array ;
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_VAR 0 1
42117: ST_TO_ADDR
// if size >= result then
42118: LD_VAR 0 2
42122: PUSH
42123: LD_VAR 0 3
42127: GREATEREQUAL
42128: IFFALSE 42132
// exit ;
42130: GO 42182
// if size then
42132: LD_VAR 0 2
42136: IFFALSE 42182
// for i := array downto size do
42138: LD_ADDR_VAR 0 4
42142: PUSH
42143: DOUBLE
42144: LD_VAR 0 1
42148: INC
42149: ST_TO_ADDR
42150: LD_VAR 0 2
42154: PUSH
42155: FOR_DOWNTO
42156: IFFALSE 42180
// result := Delete ( result , result ) ;
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_VAR 0 3
42167: PPUSH
42168: LD_VAR 0 3
42172: PPUSH
42173: CALL_OW 3
42177: ST_TO_ADDR
42178: GO 42155
42180: POP
42181: POP
// end ;
42182: LD_VAR 0 3
42186: RET
// export function ComExit ( unit ) ; var tmp ; begin
42187: LD_INT 0
42189: PPUSH
42190: PPUSH
// if not IsInUnit ( unit ) then
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 310
42200: NOT
42201: IFFALSE 42205
// exit ;
42203: GO 42265
// tmp := IsInUnit ( unit ) ;
42205: LD_ADDR_VAR 0 3
42209: PUSH
42210: LD_VAR 0 1
42214: PPUSH
42215: CALL_OW 310
42219: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42220: LD_VAR 0 3
42224: PPUSH
42225: CALL_OW 247
42229: PUSH
42230: LD_INT 2
42232: EQUAL
42233: IFFALSE 42246
// ComExitVehicle ( unit ) else
42235: LD_VAR 0 1
42239: PPUSH
42240: CALL_OW 121
42244: GO 42255
// ComExitBuilding ( unit ) ;
42246: LD_VAR 0 1
42250: PPUSH
42251: CALL_OW 122
// result := tmp ;
42255: LD_ADDR_VAR 0 2
42259: PUSH
42260: LD_VAR 0 3
42264: ST_TO_ADDR
// end ;
42265: LD_VAR 0 2
42269: RET
// export function ComExitAll ( units ) ; var i ; begin
42270: LD_INT 0
42272: PPUSH
42273: PPUSH
// if not units then
42274: LD_VAR 0 1
42278: NOT
42279: IFFALSE 42283
// exit ;
42281: GO 42309
// for i in units do
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_VAR 0 1
42292: PUSH
42293: FOR_IN
42294: IFFALSE 42307
// ComExit ( i ) ;
42296: LD_VAR 0 3
42300: PPUSH
42301: CALL 42187 0 1
42305: GO 42293
42307: POP
42308: POP
// end ;
42309: LD_VAR 0 2
42313: RET
// export function ResetHc ; begin
42314: LD_INT 0
42316: PPUSH
// InitHc ;
42317: CALL_OW 19
// hc_importance := 0 ;
42321: LD_ADDR_OWVAR 32
42325: PUSH
42326: LD_INT 0
42328: ST_TO_ADDR
// end ;
42329: LD_VAR 0 1
42333: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42334: LD_INT 0
42336: PPUSH
42337: PPUSH
42338: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42339: LD_ADDR_VAR 0 6
42343: PUSH
42344: LD_VAR 0 1
42348: PUSH
42349: LD_VAR 0 3
42353: PLUS
42354: PUSH
42355: LD_INT 2
42357: DIV
42358: ST_TO_ADDR
// if _x < 0 then
42359: LD_VAR 0 6
42363: PUSH
42364: LD_INT 0
42366: LESS
42367: IFFALSE 42384
// _x := _x * - 1 ;
42369: LD_ADDR_VAR 0 6
42373: PUSH
42374: LD_VAR 0 6
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: MUL
42383: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42384: LD_ADDR_VAR 0 7
42388: PUSH
42389: LD_VAR 0 2
42393: PUSH
42394: LD_VAR 0 4
42398: PLUS
42399: PUSH
42400: LD_INT 2
42402: DIV
42403: ST_TO_ADDR
// if _y < 0 then
42404: LD_VAR 0 7
42408: PUSH
42409: LD_INT 0
42411: LESS
42412: IFFALSE 42429
// _y := _y * - 1 ;
42414: LD_ADDR_VAR 0 7
42418: PUSH
42419: LD_VAR 0 7
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: MUL
42428: ST_TO_ADDR
// result := [ _x , _y ] ;
42429: LD_ADDR_VAR 0 5
42433: PUSH
42434: LD_VAR 0 6
42438: PUSH
42439: LD_VAR 0 7
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: ST_TO_ADDR
// end ;
42448: LD_VAR 0 5
42452: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
// task := GetTaskList ( unit ) ;
42459: LD_ADDR_VAR 0 7
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 437
42473: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42474: LD_VAR 0 7
42478: NOT
42479: IFFALSE 42498
42481: PUSH
42482: LD_VAR 0 1
42486: PPUSH
42487: LD_VAR 0 2
42491: PPUSH
42492: CALL_OW 308
42496: NOT
42497: AND
42498: IFFALSE 42502
// exit ;
42500: GO 42620
// if IsInArea ( unit , area ) then
42502: LD_VAR 0 1
42506: PPUSH
42507: LD_VAR 0 2
42511: PPUSH
42512: CALL_OW 308
42516: IFFALSE 42534
// begin ComMoveToArea ( unit , goAway ) ;
42518: LD_VAR 0 1
42522: PPUSH
42523: LD_VAR 0 3
42527: PPUSH
42528: CALL_OW 113
// exit ;
42532: GO 42620
// end ; if task [ 1 ] [ 1 ] <> M then
42534: LD_VAR 0 7
42538: PUSH
42539: LD_INT 1
42541: ARRAY
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PUSH
42547: LD_STRING M
42549: NONEQUAL
42550: IFFALSE 42554
// exit ;
42552: GO 42620
// x := task [ 1 ] [ 2 ] ;
42554: LD_ADDR_VAR 0 5
42558: PUSH
42559: LD_VAR 0 7
42563: PUSH
42564: LD_INT 1
42566: ARRAY
42567: PUSH
42568: LD_INT 2
42570: ARRAY
42571: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42572: LD_ADDR_VAR 0 6
42576: PUSH
42577: LD_VAR 0 7
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: PUSH
42586: LD_INT 3
42588: ARRAY
42589: ST_TO_ADDR
// if InArea ( x , y , area ) then
42590: LD_VAR 0 5
42594: PPUSH
42595: LD_VAR 0 6
42599: PPUSH
42600: LD_VAR 0 2
42604: PPUSH
42605: CALL_OW 309
42609: IFFALSE 42620
// ComStop ( unit ) ;
42611: LD_VAR 0 1
42615: PPUSH
42616: CALL_OW 141
// end ;
42620: LD_VAR 0 4
42624: RET
// export function Abs ( value ) ; begin
42625: LD_INT 0
42627: PPUSH
// result := value ;
42628: LD_ADDR_VAR 0 2
42632: PUSH
42633: LD_VAR 0 1
42637: ST_TO_ADDR
// if value < 0 then
42638: LD_VAR 0 1
42642: PUSH
42643: LD_INT 0
42645: LESS
42646: IFFALSE 42663
// result := value * - 1 ;
42648: LD_ADDR_VAR 0 2
42652: PUSH
42653: LD_VAR 0 1
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: MUL
42662: ST_TO_ADDR
// end ;
42663: LD_VAR 0 2
42667: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42668: LD_INT 0
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
// if not unit or not building then
42678: LD_VAR 0 1
42682: NOT
42683: IFTRUE 42692
42685: PUSH
42686: LD_VAR 0 2
42690: NOT
42691: OR
42692: IFFALSE 42696
// exit ;
42694: GO 42924
// x := GetX ( building ) ;
42696: LD_ADDR_VAR 0 4
42700: PUSH
42701: LD_VAR 0 2
42705: PPUSH
42706: CALL_OW 250
42710: ST_TO_ADDR
// y := GetY ( building ) ;
42711: LD_ADDR_VAR 0 6
42715: PUSH
42716: LD_VAR 0 2
42720: PPUSH
42721: CALL_OW 251
42725: ST_TO_ADDR
// d := GetDir ( building ) ;
42726: LD_ADDR_VAR 0 8
42730: PUSH
42731: LD_VAR 0 2
42735: PPUSH
42736: CALL_OW 254
42740: ST_TO_ADDR
// r := 4 ;
42741: LD_ADDR_VAR 0 9
42745: PUSH
42746: LD_INT 4
42748: ST_TO_ADDR
// for i := 1 to 5 do
42749: LD_ADDR_VAR 0 10
42753: PUSH
42754: DOUBLE
42755: LD_INT 1
42757: DEC
42758: ST_TO_ADDR
42759: LD_INT 5
42761: PUSH
42762: FOR_TO
42763: IFFALSE 42922
// begin _x := ShiftX ( x , d , r + i ) ;
42765: LD_ADDR_VAR 0 5
42769: PUSH
42770: LD_VAR 0 4
42774: PPUSH
42775: LD_VAR 0 8
42779: PPUSH
42780: LD_VAR 0 9
42784: PUSH
42785: LD_VAR 0 10
42789: PLUS
42790: PPUSH
42791: CALL_OW 272
42795: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42796: LD_ADDR_VAR 0 7
42800: PUSH
42801: LD_VAR 0 6
42805: PPUSH
42806: LD_VAR 0 8
42810: PPUSH
42811: LD_VAR 0 9
42815: PUSH
42816: LD_VAR 0 10
42820: PLUS
42821: PPUSH
42822: CALL_OW 273
42826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42827: LD_VAR 0 5
42831: PPUSH
42832: LD_VAR 0 7
42836: PPUSH
42837: CALL_OW 488
42841: IFFALSE 42876
42843: PUSH
42844: LD_VAR 0 5
42848: PPUSH
42849: LD_VAR 0 7
42853: PPUSH
42854: CALL_OW 428
42858: PPUSH
42859: CALL_OW 247
42863: PUSH
42864: LD_INT 3
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: IN
42874: NOT
42875: AND
42876: IFFALSE 42920
// begin ComMoveXY ( unit , _x , _y ) ;
42878: LD_VAR 0 1
42882: PPUSH
42883: LD_VAR 0 5
42887: PPUSH
42888: LD_VAR 0 7
42892: PPUSH
42893: CALL_OW 111
// result := [ _x , _y ] ;
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_VAR 0 5
42906: PUSH
42907: LD_VAR 0 7
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: ST_TO_ADDR
// exit ;
42916: POP
42917: POP
42918: GO 42924
// end ; end ;
42920: GO 42762
42922: POP
42923: POP
// end ;
42924: LD_VAR 0 3
42928: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42929: LD_INT 0
42931: PPUSH
42932: PPUSH
42933: PPUSH
// result := 0 ;
42934: LD_ADDR_VAR 0 3
42938: PUSH
42939: LD_INT 0
42941: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42942: LD_VAR 0 1
42946: PUSH
42947: LD_INT 0
42949: LESS
42950: IFTRUE 42962
42952: PUSH
42953: LD_VAR 0 1
42957: PUSH
42958: LD_INT 8
42960: GREATER
42961: OR
42962: IFTRUE 42974
42964: PUSH
42965: LD_VAR 0 2
42969: PUSH
42970: LD_INT 0
42972: LESS
42973: OR
42974: IFTRUE 42986
42976: PUSH
42977: LD_VAR 0 2
42981: PUSH
42982: LD_INT 8
42984: GREATER
42985: OR
42986: IFFALSE 42990
// exit ;
42988: GO 43065
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42990: LD_ADDR_VAR 0 4
42994: PUSH
42995: LD_INT 22
42997: PUSH
42998: LD_VAR 0 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PPUSH
43007: CALL_OW 69
43011: PUSH
43012: FOR_IN
43013: IFFALSE 43063
// begin un := UnitShoot ( i ) ;
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: CALL_OW 504
43029: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43030: LD_VAR 0 5
43034: PPUSH
43035: CALL_OW 255
43039: PUSH
43040: LD_VAR 0 1
43044: EQUAL
43045: IFFALSE 43061
// begin result := un ;
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_VAR 0 5
43056: ST_TO_ADDR
// exit ;
43057: POP
43058: POP
43059: GO 43065
// end ; end ;
43061: GO 43012
43063: POP
43064: POP
// end ;
43065: LD_VAR 0 3
43069: RET
// export function GetCargoBay ( units ) ; begin
43070: LD_INT 0
43072: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43073: LD_ADDR_VAR 0 2
43077: PUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 34
43088: PUSH
43089: LD_INT 12
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 34
43098: PUSH
43099: LD_INT 51
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 34
43108: PUSH
43109: LD_INT 32
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 34
43118: PUSH
43119: LD_INT 89
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: PPUSH
43133: CALL_OW 72
43137: ST_TO_ADDR
// end ;
43138: LD_VAR 0 2
43142: RET
// export function Negate ( value ) ; begin
43143: LD_INT 0
43145: PPUSH
// result := not value ;
43146: LD_ADDR_VAR 0 2
43150: PUSH
43151: LD_VAR 0 1
43155: NOT
43156: ST_TO_ADDR
// end ;
43157: LD_VAR 0 2
43161: RET
// export function Inc ( value ) ; begin
43162: LD_INT 0
43164: PPUSH
// result := value + 1 ;
43165: LD_ADDR_VAR 0 2
43169: PUSH
43170: LD_VAR 0 1
43174: PUSH
43175: LD_INT 1
43177: PLUS
43178: ST_TO_ADDR
// end ;
43179: LD_VAR 0 2
43183: RET
// export function Dec ( value ) ; begin
43184: LD_INT 0
43186: PPUSH
// result := value - 1 ;
43187: LD_ADDR_VAR 0 2
43191: PUSH
43192: LD_VAR 0 1
43196: PUSH
43197: LD_INT 1
43199: MINUS
43200: ST_TO_ADDR
// end ;
43201: LD_VAR 0 2
43205: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43206: LD_INT 0
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43216: LD_VAR 0 1
43220: PPUSH
43221: LD_VAR 0 2
43225: PPUSH
43226: CALL_OW 488
43230: NOT
43231: IFTRUE 43250
43233: PUSH
43234: LD_VAR 0 3
43238: PPUSH
43239: LD_VAR 0 4
43243: PPUSH
43244: CALL_OW 488
43248: NOT
43249: OR
43250: IFFALSE 43263
// begin result := - 1 ;
43252: LD_ADDR_VAR 0 5
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: ST_TO_ADDR
// exit ;
43261: GO 43498
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43263: LD_ADDR_VAR 0 12
43267: PUSH
43268: LD_VAR 0 1
43272: PPUSH
43273: LD_VAR 0 2
43277: PPUSH
43278: LD_VAR 0 3
43282: PPUSH
43283: LD_VAR 0 4
43287: PPUSH
43288: CALL 42334 0 4
43292: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43293: LD_ADDR_VAR 0 11
43297: PUSH
43298: LD_VAR 0 1
43302: PPUSH
43303: LD_VAR 0 2
43307: PPUSH
43308: LD_VAR 0 12
43312: PUSH
43313: LD_INT 1
43315: ARRAY
43316: PPUSH
43317: LD_VAR 0 12
43321: PUSH
43322: LD_INT 2
43324: ARRAY
43325: PPUSH
43326: CALL_OW 298
43330: ST_TO_ADDR
// distance := 9999 ;
43331: LD_ADDR_VAR 0 10
43335: PUSH
43336: LD_INT 9999
43338: ST_TO_ADDR
// for i := 0 to 5 do
43339: LD_ADDR_VAR 0 6
43343: PUSH
43344: DOUBLE
43345: LD_INT 0
43347: DEC
43348: ST_TO_ADDR
43349: LD_INT 5
43351: PUSH
43352: FOR_TO
43353: IFFALSE 43496
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43355: LD_ADDR_VAR 0 7
43359: PUSH
43360: LD_VAR 0 1
43364: PPUSH
43365: LD_VAR 0 6
43369: PPUSH
43370: LD_VAR 0 11
43374: PPUSH
43375: CALL_OW 272
43379: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43380: LD_ADDR_VAR 0 8
43384: PUSH
43385: LD_VAR 0 2
43389: PPUSH
43390: LD_VAR 0 6
43394: PPUSH
43395: LD_VAR 0 11
43399: PPUSH
43400: CALL_OW 273
43404: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43405: LD_VAR 0 7
43409: PPUSH
43410: LD_VAR 0 8
43414: PPUSH
43415: CALL_OW 488
43419: NOT
43420: IFFALSE 43424
// continue ;
43422: GO 43352
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43424: LD_ADDR_VAR 0 9
43428: PUSH
43429: LD_VAR 0 12
43433: PUSH
43434: LD_INT 1
43436: ARRAY
43437: PPUSH
43438: LD_VAR 0 12
43442: PUSH
43443: LD_INT 2
43445: ARRAY
43446: PPUSH
43447: LD_VAR 0 7
43451: PPUSH
43452: LD_VAR 0 8
43456: PPUSH
43457: CALL_OW 298
43461: ST_TO_ADDR
// if tmp < distance then
43462: LD_VAR 0 9
43466: PUSH
43467: LD_VAR 0 10
43471: LESS
43472: IFFALSE 43494
// begin result := i ;
43474: LD_ADDR_VAR 0 5
43478: PUSH
43479: LD_VAR 0 6
43483: ST_TO_ADDR
// distance := tmp ;
43484: LD_ADDR_VAR 0 10
43488: PUSH
43489: LD_VAR 0 9
43493: ST_TO_ADDR
// end ; end ;
43494: GO 43352
43496: POP
43497: POP
// end ;
43498: LD_VAR 0 5
43502: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43503: LD_INT 0
43505: PPUSH
43506: PPUSH
// if not driver or not IsInUnit ( driver ) then
43507: LD_VAR 0 1
43511: NOT
43512: IFTRUE 43526
43514: PUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 310
43524: NOT
43525: OR
43526: IFFALSE 43530
// exit ;
43528: GO 43620
// vehicle := IsInUnit ( driver ) ;
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_VAR 0 1
43539: PPUSH
43540: CALL_OW 310
43544: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43545: LD_VAR 0 1
43549: PPUSH
43550: LD_STRING \
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: PUSH
43580: LD_STRING E
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_VAR 0 3
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PPUSH
43616: CALL_OW 446
// end ;
43620: LD_VAR 0 2
43624: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43625: LD_INT 0
43627: PPUSH
43628: PPUSH
// if not driver or not IsInUnit ( driver ) then
43629: LD_VAR 0 1
43633: NOT
43634: IFTRUE 43648
43636: PUSH
43637: LD_VAR 0 1
43641: PPUSH
43642: CALL_OW 310
43646: NOT
43647: OR
43648: IFFALSE 43652
// exit ;
43650: GO 43742
// vehicle := IsInUnit ( driver ) ;
43652: LD_ADDR_VAR 0 3
43656: PUSH
43657: LD_VAR 0 1
43661: PPUSH
43662: CALL_OW 310
43666: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43667: LD_VAR 0 1
43671: PPUSH
43672: LD_STRING \
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: PUSH
43702: LD_STRING E
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_VAR 0 3
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PPUSH
43738: CALL_OW 447
// end ;
43742: LD_VAR 0 2
43746: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43747: LD_INT 0
43749: PPUSH
43750: PPUSH
43751: PPUSH
// tmp := [ ] ;
43752: LD_ADDR_VAR 0 5
43756: PUSH
43757: EMPTY
43758: ST_TO_ADDR
// for i in units do
43759: LD_ADDR_VAR 0 4
43763: PUSH
43764: LD_VAR 0 1
43768: PUSH
43769: FOR_IN
43770: IFFALSE 43808
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43772: LD_ADDR_VAR 0 5
43776: PUSH
43777: LD_VAR 0 5
43781: PPUSH
43782: LD_VAR 0 5
43786: PUSH
43787: LD_INT 1
43789: PLUS
43790: PPUSH
43791: LD_VAR 0 4
43795: PPUSH
43796: CALL_OW 256
43800: PPUSH
43801: CALL_OW 2
43805: ST_TO_ADDR
43806: GO 43769
43808: POP
43809: POP
// if not tmp then
43810: LD_VAR 0 5
43814: NOT
43815: IFFALSE 43819
// exit ;
43817: GO 43867
// if asc then
43819: LD_VAR 0 2
43823: IFFALSE 43847
// result := SortListByListAsc ( units , tmp ) else
43825: LD_ADDR_VAR 0 3
43829: PUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_VAR 0 5
43839: PPUSH
43840: CALL_OW 76
43844: ST_TO_ADDR
43845: GO 43867
// result := SortListByListDesc ( units , tmp ) ;
43847: LD_ADDR_VAR 0 3
43851: PUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: LD_VAR 0 5
43861: PPUSH
43862: CALL_OW 77
43866: ST_TO_ADDR
// end ;
43867: LD_VAR 0 3
43871: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43872: LD_INT 0
43874: PPUSH
43875: PPUSH
// task := GetTaskList ( mech ) ;
43876: LD_ADDR_VAR 0 4
43880: PUSH
43881: LD_VAR 0 1
43885: PPUSH
43886: CALL_OW 437
43890: ST_TO_ADDR
// if not task then
43891: LD_VAR 0 4
43895: NOT
43896: IFFALSE 43900
// exit ;
43898: GO 43944
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43900: LD_ADDR_VAR 0 3
43904: PUSH
43905: LD_VAR 0 4
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: PUSH
43914: LD_INT 1
43916: ARRAY
43917: PUSH
43918: LD_STRING r
43920: EQUAL
43921: IFFALSE 43943
43923: PUSH
43924: LD_VAR 0 4
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PUSH
43933: LD_INT 4
43935: ARRAY
43936: PUSH
43937: LD_VAR 0 2
43941: EQUAL
43942: AND
43943: ST_TO_ADDR
// end ;
43944: LD_VAR 0 3
43948: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43949: LD_INT 0
43951: PPUSH
// SetDir ( unit , d ) ;
43952: LD_VAR 0 1
43956: PPUSH
43957: LD_VAR 0 4
43961: PPUSH
43962: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43966: LD_ADDR_VAR 0 6
43970: PUSH
43971: LD_VAR 0 1
43975: PPUSH
43976: LD_VAR 0 2
43980: PPUSH
43981: LD_VAR 0 3
43985: PPUSH
43986: LD_VAR 0 5
43990: PPUSH
43991: CALL_OW 48
43995: ST_TO_ADDR
// end ;
43996: LD_VAR 0 6
44000: RET
// export function ToNaturalNumber ( number ) ; begin
44001: LD_INT 0
44003: PPUSH
// result := number div 1 ;
44004: LD_ADDR_VAR 0 2
44008: PUSH
44009: LD_VAR 0 1
44013: PUSH
44014: LD_INT 1
44016: DIV
44017: ST_TO_ADDR
// if number < 0 then
44018: LD_VAR 0 1
44022: PUSH
44023: LD_INT 0
44025: LESS
44026: IFFALSE 44036
// result := 0 ;
44028: LD_ADDR_VAR 0 2
44032: PUSH
44033: LD_INT 0
44035: ST_TO_ADDR
// end ;
44036: LD_VAR 0 2
44040: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
44041: LD_INT 0
44043: PPUSH
44044: PPUSH
44045: PPUSH
// if not buildings then
44046: LD_VAR 0 1
44050: NOT
44051: IFFALSE 44055
// exit ;
44053: GO 44170
// tmp := [ ] ;
44055: LD_ADDR_VAR 0 5
44059: PUSH
44060: EMPTY
44061: ST_TO_ADDR
// for b in buildings do
44062: LD_ADDR_VAR 0 4
44066: PUSH
44067: LD_VAR 0 1
44071: PUSH
44072: FOR_IN
44073: IFFALSE 44111
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
44075: LD_ADDR_VAR 0 5
44079: PUSH
44080: LD_VAR 0 5
44084: PPUSH
44085: LD_VAR 0 5
44089: PUSH
44090: LD_INT 1
44092: PLUS
44093: PPUSH
44094: LD_VAR 0 4
44098: PPUSH
44099: CALL_OW 266
44103: PPUSH
44104: CALL_OW 1
44108: ST_TO_ADDR
44109: GO 44072
44111: POP
44112: POP
// if not tmp then
44113: LD_VAR 0 5
44117: NOT
44118: IFFALSE 44122
// exit ;
44120: GO 44170
// if asc then
44122: LD_VAR 0 2
44126: IFFALSE 44150
// result := SortListByListAsc ( buildings , tmp ) else
44128: LD_ADDR_VAR 0 3
44132: PUSH
44133: LD_VAR 0 1
44137: PPUSH
44138: LD_VAR 0 5
44142: PPUSH
44143: CALL_OW 76
44147: ST_TO_ADDR
44148: GO 44170
// result := SortListByListDesc ( buildings , tmp ) ;
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_VAR 0 1
44159: PPUSH
44160: LD_VAR 0 5
44164: PPUSH
44165: CALL_OW 77
44169: ST_TO_ADDR
// end ;
44170: LD_VAR 0 3
44174: RET
// export function SortByClass ( units , class ) ; var un ; begin
44175: LD_INT 0
44177: PPUSH
44178: PPUSH
// if not units or not class then
44179: LD_VAR 0 1
44183: NOT
44184: IFTRUE 44193
44186: PUSH
44187: LD_VAR 0 2
44191: NOT
44192: OR
44193: IFFALSE 44197
// exit ;
44195: GO 44292
// result := [ ] ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: EMPTY
44203: ST_TO_ADDR
// for un in units do
44204: LD_ADDR_VAR 0 4
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: FOR_IN
44215: IFFALSE 44290
// if GetClass ( un ) = class then
44217: LD_VAR 0 4
44221: PPUSH
44222: CALL_OW 257
44226: PUSH
44227: LD_VAR 0 2
44231: EQUAL
44232: IFFALSE 44259
// result := Insert ( result , 1 , un ) else
44234: LD_ADDR_VAR 0 3
44238: PUSH
44239: LD_VAR 0 3
44243: PPUSH
44244: LD_INT 1
44246: PPUSH
44247: LD_VAR 0 4
44251: PPUSH
44252: CALL_OW 2
44256: ST_TO_ADDR
44257: GO 44288
// result := Replace ( result , result + 1 , un ) ;
44259: LD_ADDR_VAR 0 3
44263: PUSH
44264: LD_VAR 0 3
44268: PPUSH
44269: LD_VAR 0 3
44273: PUSH
44274: LD_INT 1
44276: PLUS
44277: PPUSH
44278: LD_VAR 0 4
44282: PPUSH
44283: CALL_OW 1
44287: ST_TO_ADDR
44288: GO 44214
44290: POP
44291: POP
// end ;
44292: LD_VAR 0 3
44296: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44297: LD_INT 0
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
44305: PPUSH
// result := [ ] ;
44306: LD_ADDR_VAR 0 4
44310: PUSH
44311: EMPTY
44312: ST_TO_ADDR
// if x - r < 0 then
44313: LD_VAR 0 1
44317: PUSH
44318: LD_VAR 0 3
44322: MINUS
44323: PUSH
44324: LD_INT 0
44326: LESS
44327: IFFALSE 44339
// min_x := 0 else
44329: LD_ADDR_VAR 0 8
44333: PUSH
44334: LD_INT 0
44336: ST_TO_ADDR
44337: GO 44355
// min_x := x - r ;
44339: LD_ADDR_VAR 0 8
44343: PUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 3
44353: MINUS
44354: ST_TO_ADDR
// if y - r < 0 then
44355: LD_VAR 0 2
44359: PUSH
44360: LD_VAR 0 3
44364: MINUS
44365: PUSH
44366: LD_INT 0
44368: LESS
44369: IFFALSE 44381
// min_y := 0 else
44371: LD_ADDR_VAR 0 7
44375: PUSH
44376: LD_INT 0
44378: ST_TO_ADDR
44379: GO 44397
// min_y := y - r ;
44381: LD_ADDR_VAR 0 7
44385: PUSH
44386: LD_VAR 0 2
44390: PUSH
44391: LD_VAR 0 3
44395: MINUS
44396: ST_TO_ADDR
// max_x := x + r ;
44397: LD_ADDR_VAR 0 9
44401: PUSH
44402: LD_VAR 0 1
44406: PUSH
44407: LD_VAR 0 3
44411: PLUS
44412: ST_TO_ADDR
// max_y := y + r ;
44413: LD_ADDR_VAR 0 10
44417: PUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_VAR 0 3
44427: PLUS
44428: ST_TO_ADDR
// for _x = min_x to max_x do
44429: LD_ADDR_VAR 0 5
44433: PUSH
44434: DOUBLE
44435: LD_VAR 0 8
44439: DEC
44440: ST_TO_ADDR
44441: LD_VAR 0 9
44445: PUSH
44446: FOR_TO
44447: IFFALSE 44548
// for _y = min_y to max_y do
44449: LD_ADDR_VAR 0 6
44453: PUSH
44454: DOUBLE
44455: LD_VAR 0 7
44459: DEC
44460: ST_TO_ADDR
44461: LD_VAR 0 10
44465: PUSH
44466: FOR_TO
44467: IFFALSE 44544
// begin if not ValidHex ( _x , _y ) then
44469: LD_VAR 0 5
44473: PPUSH
44474: LD_VAR 0 6
44478: PPUSH
44479: CALL_OW 488
44483: NOT
44484: IFFALSE 44488
// continue ;
44486: GO 44466
// if GetResourceTypeXY ( _x , _y ) then
44488: LD_VAR 0 5
44492: PPUSH
44493: LD_VAR 0 6
44497: PPUSH
44498: CALL_OW 283
44502: IFFALSE 44542
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44504: LD_ADDR_VAR 0 4
44508: PUSH
44509: LD_VAR 0 4
44513: PPUSH
44514: LD_VAR 0 4
44518: PUSH
44519: LD_INT 1
44521: PLUS
44522: PPUSH
44523: LD_VAR 0 5
44527: PUSH
44528: LD_VAR 0 6
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PPUSH
44537: CALL_OW 1
44541: ST_TO_ADDR
// end ;
44542: GO 44466
44544: POP
44545: POP
44546: GO 44446
44548: POP
44549: POP
// end ;
44550: LD_VAR 0 4
44554: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44555: LD_INT 0
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
44564: PPUSH
// if not units then
44565: LD_VAR 0 1
44569: NOT
44570: IFFALSE 44574
// exit ;
44572: GO 45106
// result := UnitFilter ( units , [ f_ok ] ) ;
44574: LD_ADDR_VAR 0 3
44578: PUSH
44579: LD_VAR 0 1
44583: PPUSH
44584: LD_INT 50
44586: PUSH
44587: EMPTY
44588: LIST
44589: PPUSH
44590: CALL_OW 72
44594: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44595: LD_ADDR_VAR 0 8
44599: PUSH
44600: LD_VAR 0 1
44604: PUSH
44605: LD_INT 1
44607: ARRAY
44608: PPUSH
44609: CALL_OW 255
44613: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44614: LD_ADDR_VAR 0 10
44618: PUSH
44619: LD_INT 29
44621: PUSH
44622: LD_INT 91
44624: PUSH
44625: LD_INT 49
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// if not result then
44633: LD_VAR 0 3
44637: NOT
44638: IFFALSE 44642
// exit ;
44640: GO 45106
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44642: LD_ADDR_VAR 0 5
44646: PUSH
44647: LD_INT 81
44649: PUSH
44650: LD_VAR 0 8
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PPUSH
44659: CALL_OW 69
44663: ST_TO_ADDR
// for i in result do
44664: LD_ADDR_VAR 0 4
44668: PUSH
44669: LD_VAR 0 3
44673: PUSH
44674: FOR_IN
44675: IFFALSE 45104
// begin tag := GetTag ( i ) + 1 ;
44677: LD_ADDR_VAR 0 9
44681: PUSH
44682: LD_VAR 0 4
44686: PPUSH
44687: CALL_OW 110
44691: PUSH
44692: LD_INT 1
44694: PLUS
44695: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44696: LD_ADDR_VAR 0 7
44700: PUSH
44701: LD_VAR 0 4
44705: PPUSH
44706: CALL_OW 250
44710: PPUSH
44711: LD_VAR 0 4
44715: PPUSH
44716: CALL_OW 251
44720: PPUSH
44721: LD_INT 4
44723: PPUSH
44724: CALL 44297 0 3
44728: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44729: LD_VAR 0 4
44733: PPUSH
44734: CALL_OW 247
44738: PUSH
44739: LD_INT 2
44741: EQUAL
44742: IFFALSE 44754
44744: PUSH
44745: LD_VAR 0 7
44749: PUSH
44750: LD_INT 2
44752: GREATER
44753: AND
44754: IFFALSE 44774
44756: PUSH
44757: LD_VAR 0 4
44761: PPUSH
44762: CALL_OW 264
44766: PUSH
44767: LD_VAR 0 10
44771: IN
44772: NOT
44773: AND
44774: IFFALSE 44813
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44776: LD_VAR 0 4
44780: PPUSH
44781: LD_VAR 0 7
44785: PUSH
44786: LD_INT 1
44788: ARRAY
44789: PUSH
44790: LD_INT 1
44792: ARRAY
44793: PPUSH
44794: LD_VAR 0 7
44798: PUSH
44799: LD_INT 1
44801: ARRAY
44802: PUSH
44803: LD_INT 2
44805: ARRAY
44806: PPUSH
44807: CALL_OW 116
44811: GO 45102
// if path > tag then
44813: LD_VAR 0 2
44817: PUSH
44818: LD_VAR 0 9
44822: GREATER
44823: IFFALSE 45031
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44825: LD_ADDR_VAR 0 6
44829: PUSH
44830: LD_VAR 0 5
44834: PPUSH
44835: LD_INT 91
44837: PUSH
44838: LD_VAR 0 4
44842: PUSH
44843: LD_INT 8
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: PPUSH
44851: CALL_OW 72
44855: ST_TO_ADDR
// if nearEnemy then
44856: LD_VAR 0 6
44860: IFFALSE 44929
// begin if GetWeapon ( i ) = ru_time_lapser then
44862: LD_VAR 0 4
44866: PPUSH
44867: CALL_OW 264
44871: PUSH
44872: LD_INT 49
44874: EQUAL
44875: IFFALSE 44903
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44877: LD_VAR 0 4
44881: PPUSH
44882: LD_VAR 0 6
44886: PPUSH
44887: LD_VAR 0 4
44891: PPUSH
44892: CALL_OW 74
44896: PPUSH
44897: CALL_OW 112
44901: GO 44927
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44903: LD_VAR 0 4
44907: PPUSH
44908: LD_VAR 0 6
44912: PPUSH
44913: LD_VAR 0 4
44917: PPUSH
44918: CALL_OW 74
44922: PPUSH
44923: CALL 46187 0 2
// end else
44927: GO 45029
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44929: LD_VAR 0 4
44933: PPUSH
44934: LD_VAR 0 2
44938: PUSH
44939: LD_VAR 0 9
44943: ARRAY
44944: PUSH
44945: LD_INT 1
44947: ARRAY
44948: PPUSH
44949: LD_VAR 0 2
44953: PUSH
44954: LD_VAR 0 9
44958: ARRAY
44959: PUSH
44960: LD_INT 2
44962: ARRAY
44963: PPUSH
44964: CALL_OW 297
44968: PUSH
44969: LD_INT 6
44971: GREATER
44972: IFFALSE 45015
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44974: LD_VAR 0 4
44978: PPUSH
44979: LD_VAR 0 2
44983: PUSH
44984: LD_VAR 0 9
44988: ARRAY
44989: PUSH
44990: LD_INT 1
44992: ARRAY
44993: PPUSH
44994: LD_VAR 0 2
44998: PUSH
44999: LD_VAR 0 9
45003: ARRAY
45004: PUSH
45005: LD_INT 2
45007: ARRAY
45008: PPUSH
45009: CALL_OW 114
45013: GO 45029
// SetTag ( i , tag ) ;
45015: LD_VAR 0 4
45019: PPUSH
45020: LD_VAR 0 9
45024: PPUSH
45025: CALL_OW 109
// end else
45029: GO 45102
// if enemy then
45031: LD_VAR 0 5
45035: IFFALSE 45102
// begin if GetWeapon ( i ) = ru_time_lapser then
45037: LD_VAR 0 4
45041: PPUSH
45042: CALL_OW 264
45046: PUSH
45047: LD_INT 49
45049: EQUAL
45050: IFFALSE 45078
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45052: LD_VAR 0 4
45056: PPUSH
45057: LD_VAR 0 5
45061: PPUSH
45062: LD_VAR 0 4
45066: PPUSH
45067: CALL_OW 74
45071: PPUSH
45072: CALL_OW 112
45076: GO 45102
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45078: LD_VAR 0 4
45082: PPUSH
45083: LD_VAR 0 5
45087: PPUSH
45088: LD_VAR 0 4
45092: PPUSH
45093: CALL_OW 74
45097: PPUSH
45098: CALL 46187 0 2
// end ; end ;
45102: GO 44674
45104: POP
45105: POP
// end ;
45106: LD_VAR 0 3
45110: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45111: LD_INT 0
45113: PPUSH
45114: PPUSH
45115: PPUSH
// if not unit or IsInUnit ( unit ) then
45116: LD_VAR 0 1
45120: NOT
45121: IFTRUE 45134
45123: PUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 310
45133: OR
45134: IFFALSE 45138
// exit ;
45136: GO 45229
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45138: LD_ADDR_VAR 0 4
45142: PUSH
45143: LD_VAR 0 1
45147: PPUSH
45148: CALL_OW 250
45152: PPUSH
45153: LD_VAR 0 2
45157: PPUSH
45158: LD_INT 1
45160: PPUSH
45161: CALL_OW 272
45165: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45166: LD_ADDR_VAR 0 5
45170: PUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: CALL_OW 251
45180: PPUSH
45181: LD_VAR 0 2
45185: PPUSH
45186: LD_INT 1
45188: PPUSH
45189: CALL_OW 273
45193: ST_TO_ADDR
// if ValidHex ( x , y ) then
45194: LD_VAR 0 4
45198: PPUSH
45199: LD_VAR 0 5
45203: PPUSH
45204: CALL_OW 488
45208: IFFALSE 45229
// ComTurnXY ( unit , x , y ) ;
45210: LD_VAR 0 1
45214: PPUSH
45215: LD_VAR 0 4
45219: PPUSH
45220: LD_VAR 0 5
45224: PPUSH
45225: CALL_OW 118
// end ;
45229: LD_VAR 0 3
45233: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45234: LD_INT 0
45236: PPUSH
45237: PPUSH
// result := false ;
45238: LD_ADDR_VAR 0 3
45242: PUSH
45243: LD_INT 0
45245: ST_TO_ADDR
// if not units then
45246: LD_VAR 0 2
45250: NOT
45251: IFFALSE 45255
// exit ;
45253: GO 45300
// for i in units do
45255: LD_ADDR_VAR 0 4
45259: PUSH
45260: LD_VAR 0 2
45264: PUSH
45265: FOR_IN
45266: IFFALSE 45298
// if See ( side , i ) then
45268: LD_VAR 0 1
45272: PPUSH
45273: LD_VAR 0 4
45277: PPUSH
45278: CALL_OW 292
45282: IFFALSE 45296
// begin result := true ;
45284: LD_ADDR_VAR 0 3
45288: PUSH
45289: LD_INT 1
45291: ST_TO_ADDR
// exit ;
45292: POP
45293: POP
45294: GO 45300
// end ;
45296: GO 45265
45298: POP
45299: POP
// end ;
45300: LD_VAR 0 3
45304: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45305: LD_INT 0
45307: PPUSH
45308: PPUSH
45309: PPUSH
45310: PPUSH
// if not unit or not points then
45311: LD_VAR 0 1
45315: NOT
45316: IFTRUE 45325
45318: PUSH
45319: LD_VAR 0 2
45323: NOT
45324: OR
45325: IFFALSE 45329
// exit ;
45327: GO 45419
// dist := 99999 ;
45329: LD_ADDR_VAR 0 5
45333: PUSH
45334: LD_INT 99999
45336: ST_TO_ADDR
// for i in points do
45337: LD_ADDR_VAR 0 4
45341: PUSH
45342: LD_VAR 0 2
45346: PUSH
45347: FOR_IN
45348: IFFALSE 45417
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45350: LD_ADDR_VAR 0 6
45354: PUSH
45355: LD_VAR 0 1
45359: PPUSH
45360: LD_VAR 0 4
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PPUSH
45369: LD_VAR 0 4
45373: PUSH
45374: LD_INT 2
45376: ARRAY
45377: PPUSH
45378: CALL_OW 297
45382: ST_TO_ADDR
// if tmpDist < dist then
45383: LD_VAR 0 6
45387: PUSH
45388: LD_VAR 0 5
45392: LESS
45393: IFFALSE 45415
// begin result := i ;
45395: LD_ADDR_VAR 0 3
45399: PUSH
45400: LD_VAR 0 4
45404: ST_TO_ADDR
// dist := tmpDist ;
45405: LD_ADDR_VAR 0 5
45409: PUSH
45410: LD_VAR 0 6
45414: ST_TO_ADDR
// end ; end ;
45415: GO 45347
45417: POP
45418: POP
// end ;
45419: LD_VAR 0 3
45423: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45424: LD_INT 0
45426: PPUSH
// uc_side := side ;
45427: LD_ADDR_OWVAR 20
45431: PUSH
45432: LD_VAR 0 1
45436: ST_TO_ADDR
// uc_nation := 3 ;
45437: LD_ADDR_OWVAR 21
45441: PUSH
45442: LD_INT 3
45444: ST_TO_ADDR
// vc_chassis := 25 ;
45445: LD_ADDR_OWVAR 37
45449: PUSH
45450: LD_INT 25
45452: ST_TO_ADDR
// vc_engine := engine_siberite ;
45453: LD_ADDR_OWVAR 39
45457: PUSH
45458: LD_INT 3
45460: ST_TO_ADDR
// vc_control := control_computer ;
45461: LD_ADDR_OWVAR 38
45465: PUSH
45466: LD_INT 3
45468: ST_TO_ADDR
// vc_weapon := 59 ;
45469: LD_ADDR_OWVAR 40
45473: PUSH
45474: LD_INT 59
45476: ST_TO_ADDR
// result := CreateVehicle ;
45477: LD_ADDR_VAR 0 5
45481: PUSH
45482: CALL_OW 45
45486: ST_TO_ADDR
// SetDir ( result , d ) ;
45487: LD_VAR 0 5
45491: PPUSH
45492: LD_VAR 0 4
45496: PPUSH
45497: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45501: LD_VAR 0 5
45505: PPUSH
45506: LD_VAR 0 2
45510: PPUSH
45511: LD_VAR 0 3
45515: PPUSH
45516: LD_INT 0
45518: PPUSH
45519: CALL_OW 48
// end ;
45523: LD_VAR 0 5
45527: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45528: LD_INT 0
45530: PPUSH
45531: PPUSH
45532: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45533: LD_ADDR_VAR 0 2
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45556: LD_VAR 0 1
45560: NOT
45561: IFTRUE 45594
45563: PUSH
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 264
45573: PUSH
45574: LD_INT 12
45576: PUSH
45577: LD_INT 51
45579: PUSH
45580: LD_INT 32
45582: PUSH
45583: LD_INT 89
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: IN
45592: NOT
45593: OR
45594: IFFALSE 45598
// exit ;
45596: GO 45696
// for i := 1 to 3 do
45598: LD_ADDR_VAR 0 3
45602: PUSH
45603: DOUBLE
45604: LD_INT 1
45606: DEC
45607: ST_TO_ADDR
45608: LD_INT 3
45610: PUSH
45611: FOR_TO
45612: IFFALSE 45694
// begin tmp := GetCargo ( cargo , i ) ;
45614: LD_ADDR_VAR 0 4
45618: PUSH
45619: LD_VAR 0 1
45623: PPUSH
45624: LD_VAR 0 3
45628: PPUSH
45629: CALL_OW 289
45633: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45634: LD_ADDR_VAR 0 2
45638: PUSH
45639: LD_VAR 0 2
45643: PPUSH
45644: LD_VAR 0 3
45648: PPUSH
45649: LD_VAR 0 4
45653: PPUSH
45654: CALL_OW 1
45658: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45659: LD_ADDR_VAR 0 2
45663: PUSH
45664: LD_VAR 0 2
45668: PPUSH
45669: LD_INT 4
45671: PPUSH
45672: LD_VAR 0 2
45676: PUSH
45677: LD_INT 4
45679: ARRAY
45680: PUSH
45681: LD_VAR 0 4
45685: PLUS
45686: PPUSH
45687: CALL_OW 1
45691: ST_TO_ADDR
// end ;
45692: GO 45611
45694: POP
45695: POP
// end ;
45696: LD_VAR 0 2
45700: RET
// export function Length ( array ) ; begin
45701: LD_INT 0
45703: PPUSH
// result := array + 0 ;
45704: LD_ADDR_VAR 0 2
45708: PUSH
45709: LD_VAR 0 1
45713: PUSH
45714: LD_INT 0
45716: PLUS
45717: ST_TO_ADDR
// end ;
45718: LD_VAR 0 2
45722: RET
// export function PrepareArray ( array ) ; begin
45723: LD_INT 0
45725: PPUSH
// result := array diff 0 ;
45726: LD_ADDR_VAR 0 2
45730: PUSH
45731: LD_VAR 0 1
45735: PUSH
45736: LD_INT 0
45738: DIFF
45739: ST_TO_ADDR
// if not result [ 1 ] then
45740: LD_VAR 0 2
45744: PUSH
45745: LD_INT 1
45747: ARRAY
45748: NOT
45749: IFFALSE 45769
// result := Delete ( result , 1 ) ;
45751: LD_ADDR_VAR 0 2
45755: PUSH
45756: LD_VAR 0 2
45760: PPUSH
45761: LD_INT 1
45763: PPUSH
45764: CALL_OW 3
45768: ST_TO_ADDR
// end ;
45769: LD_VAR 0 2
45773: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45774: LD_INT 0
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
// sibRocketRange := 25 ;
45780: LD_ADDR_VAR 0 6
45784: PUSH
45785: LD_INT 25
45787: ST_TO_ADDR
// result := false ;
45788: LD_ADDR_VAR 0 4
45792: PUSH
45793: LD_INT 0
45795: ST_TO_ADDR
// for i := 0 to 5 do
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: DOUBLE
45802: LD_INT 0
45804: DEC
45805: ST_TO_ADDR
45806: LD_INT 5
45808: PUSH
45809: FOR_TO
45810: IFFALSE 45877
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45812: LD_VAR 0 1
45816: PPUSH
45817: LD_VAR 0 5
45821: PPUSH
45822: LD_VAR 0 6
45826: PPUSH
45827: CALL_OW 272
45831: PPUSH
45832: LD_VAR 0 2
45836: PPUSH
45837: LD_VAR 0 5
45841: PPUSH
45842: LD_VAR 0 6
45846: PPUSH
45847: CALL_OW 273
45851: PPUSH
45852: LD_VAR 0 3
45856: PPUSH
45857: CALL_OW 309
45861: IFFALSE 45875
// begin result := true ;
45863: LD_ADDR_VAR 0 4
45867: PUSH
45868: LD_INT 1
45870: ST_TO_ADDR
// exit ;
45871: POP
45872: POP
45873: GO 45879
// end ;
45875: GO 45809
45877: POP
45878: POP
// end ;
45879: LD_VAR 0 4
45883: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45884: LD_INT 0
45886: PPUSH
45887: PPUSH
45888: PPUSH
// if btype = b_depot then
45889: LD_VAR 0 2
45893: PUSH
45894: LD_INT 0
45896: EQUAL
45897: IFFALSE 45909
// begin result := true ;
45899: LD_ADDR_VAR 0 3
45903: PUSH
45904: LD_INT 1
45906: ST_TO_ADDR
// exit ;
45907: GO 46029
// end ; pom := GetBase ( depot ) ;
45909: LD_ADDR_VAR 0 4
45913: PUSH
45914: LD_VAR 0 1
45918: PPUSH
45919: CALL_OW 274
45923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45924: LD_ADDR_VAR 0 5
45928: PUSH
45929: LD_VAR 0 2
45933: PPUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: CALL_OW 248
45943: PPUSH
45944: CALL_OW 450
45948: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45949: LD_ADDR_VAR 0 3
45953: PUSH
45954: LD_VAR 0 4
45958: PPUSH
45959: LD_INT 1
45961: PPUSH
45962: CALL_OW 275
45966: PUSH
45967: LD_VAR 0 5
45971: PUSH
45972: LD_INT 1
45974: ARRAY
45975: GREATEREQUAL
45976: IFFALSE 46002
45978: PUSH
45979: LD_VAR 0 4
45983: PPUSH
45984: LD_INT 2
45986: PPUSH
45987: CALL_OW 275
45991: PUSH
45992: LD_VAR 0 5
45996: PUSH
45997: LD_INT 2
45999: ARRAY
46000: GREATEREQUAL
46001: AND
46002: IFFALSE 46028
46004: PUSH
46005: LD_VAR 0 4
46009: PPUSH
46010: LD_INT 3
46012: PPUSH
46013: CALL_OW 275
46017: PUSH
46018: LD_VAR 0 5
46022: PUSH
46023: LD_INT 3
46025: ARRAY
46026: GREATEREQUAL
46027: AND
46028: ST_TO_ADDR
// end ;
46029: LD_VAR 0 3
46033: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46034: LD_INT 0
46036: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46037: LD_VAR 0 1
46041: PPUSH
46042: LD_VAR 0 2
46046: PPUSH
46047: LD_INT 0
46049: PPUSH
46050: LD_INT 0
46052: PPUSH
46053: LD_INT 1
46055: PPUSH
46056: LD_INT 0
46058: PPUSH
46059: CALL_OW 587
// end ;
46063: LD_VAR 0 3
46067: RET
// export function CenterOnNow ( unit ) ; begin
46068: LD_INT 0
46070: PPUSH
// result := IsInUnit ( unit ) ;
46071: LD_ADDR_VAR 0 2
46075: PUSH
46076: LD_VAR 0 1
46080: PPUSH
46081: CALL_OW 310
46085: ST_TO_ADDR
// if not result then
46086: LD_VAR 0 2
46090: NOT
46091: IFFALSE 46103
// result := unit ;
46093: LD_ADDR_VAR 0 2
46097: PUSH
46098: LD_VAR 0 1
46102: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46103: LD_VAR 0 1
46107: PPUSH
46108: CALL_OW 87
// end ;
46112: LD_VAR 0 2
46116: RET
// export function ComMoveHex ( unit , hex ) ; begin
46117: LD_INT 0
46119: PPUSH
// if not hex then
46120: LD_VAR 0 2
46124: NOT
46125: IFFALSE 46129
// exit ;
46127: GO 46182
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46129: LD_VAR 0 2
46133: PUSH
46134: LD_INT 1
46136: ARRAY
46137: PPUSH
46138: LD_VAR 0 2
46142: PUSH
46143: LD_INT 2
46145: ARRAY
46146: PPUSH
46147: CALL_OW 428
46151: IFFALSE 46155
// exit ;
46153: GO 46182
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46155: LD_VAR 0 1
46159: PPUSH
46160: LD_VAR 0 2
46164: PUSH
46165: LD_INT 1
46167: ARRAY
46168: PPUSH
46169: LD_VAR 0 2
46173: PUSH
46174: LD_INT 2
46176: ARRAY
46177: PPUSH
46178: CALL_OW 111
// end ;
46182: LD_VAR 0 3
46186: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46187: LD_INT 0
46189: PPUSH
46190: PPUSH
46191: PPUSH
// if not unit or not enemy then
46192: LD_VAR 0 1
46196: NOT
46197: IFTRUE 46206
46199: PUSH
46200: LD_VAR 0 2
46204: NOT
46205: OR
46206: IFFALSE 46210
// exit ;
46208: GO 46336
// x := GetX ( enemy ) ;
46210: LD_ADDR_VAR 0 4
46214: PUSH
46215: LD_VAR 0 2
46219: PPUSH
46220: CALL_OW 250
46224: ST_TO_ADDR
// y := GetY ( enemy ) ;
46225: LD_ADDR_VAR 0 5
46229: PUSH
46230: LD_VAR 0 2
46234: PPUSH
46235: CALL_OW 251
46239: ST_TO_ADDR
// if ValidHex ( x , y ) then
46240: LD_VAR 0 4
46244: PPUSH
46245: LD_VAR 0 5
46249: PPUSH
46250: CALL_OW 488
46254: IFFALSE 46336
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46256: LD_VAR 0 2
46260: PPUSH
46261: CALL_OW 247
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: IN
46276: IFTRUE 46299
46278: PUSH
46279: LD_VAR 0 1
46283: PPUSH
46284: CALL_OW 255
46288: PPUSH
46289: LD_VAR 0 2
46293: PPUSH
46294: CALL_OW 292
46298: OR
46299: IFFALSE 46317
// ComAttackUnit ( unit , enemy ) else
46301: LD_VAR 0 1
46305: PPUSH
46306: LD_VAR 0 2
46310: PPUSH
46311: CALL_OW 115
46315: GO 46336
// ComAgressiveMove ( unit , x , y ) ;
46317: LD_VAR 0 1
46321: PPUSH
46322: LD_VAR 0 4
46326: PPUSH
46327: LD_VAR 0 5
46331: PPUSH
46332: CALL_OW 114
// end ;
46336: LD_VAR 0 3
46340: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46341: LD_INT 0
46343: PPUSH
46344: PPUSH
46345: PPUSH
// list := AreaToList ( area , 0 ) ;
46346: LD_ADDR_VAR 0 5
46350: PUSH
46351: LD_VAR 0 1
46355: PPUSH
46356: LD_INT 0
46358: PPUSH
46359: CALL_OW 517
46363: ST_TO_ADDR
// if not list then
46364: LD_VAR 0 5
46368: NOT
46369: IFFALSE 46373
// exit ;
46371: GO 46503
// if all then
46373: LD_VAR 0 2
46377: IFFALSE 46465
// begin for i := 1 to list [ 1 ] do
46379: LD_ADDR_VAR 0 4
46383: PUSH
46384: DOUBLE
46385: LD_INT 1
46387: DEC
46388: ST_TO_ADDR
46389: LD_VAR 0 5
46393: PUSH
46394: LD_INT 1
46396: ARRAY
46397: PUSH
46398: FOR_TO
46399: IFFALSE 46461
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46401: LD_ADDR_VAR 0 3
46405: PUSH
46406: LD_VAR 0 3
46410: PPUSH
46411: LD_VAR 0 3
46415: PUSH
46416: LD_INT 1
46418: PLUS
46419: PPUSH
46420: LD_VAR 0 5
46424: PUSH
46425: LD_INT 1
46427: ARRAY
46428: PUSH
46429: LD_VAR 0 4
46433: ARRAY
46434: PUSH
46435: LD_VAR 0 5
46439: PUSH
46440: LD_INT 2
46442: ARRAY
46443: PUSH
46444: LD_VAR 0 4
46448: ARRAY
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PPUSH
46454: CALL_OW 1
46458: ST_TO_ADDR
46459: GO 46398
46461: POP
46462: POP
// exit ;
46463: GO 46503
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_VAR 0 5
46474: PUSH
46475: LD_INT 1
46477: ARRAY
46478: PUSH
46479: LD_INT 1
46481: ARRAY
46482: PUSH
46483: LD_VAR 0 5
46487: PUSH
46488: LD_INT 2
46490: ARRAY
46491: PUSH
46492: LD_INT 1
46494: ARRAY
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: ST_TO_ADDR
// end ;
46503: LD_VAR 0 3
46507: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46508: LD_INT 0
46510: PPUSH
46511: PPUSH
// list := AreaToList ( area , 0 ) ;
46512: LD_ADDR_VAR 0 4
46516: PUSH
46517: LD_VAR 0 1
46521: PPUSH
46522: LD_INT 0
46524: PPUSH
46525: CALL_OW 517
46529: ST_TO_ADDR
// if not list then
46530: LD_VAR 0 4
46534: NOT
46535: IFFALSE 46539
// exit ;
46537: GO 46580
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46539: LD_ADDR_VAR 0 3
46543: PUSH
46544: LD_VAR 0 4
46548: PUSH
46549: LD_INT 1
46551: ARRAY
46552: PUSH
46553: LD_INT 1
46555: ARRAY
46556: PUSH
46557: LD_VAR 0 4
46561: PUSH
46562: LD_INT 2
46564: ARRAY
46565: PUSH
46566: LD_INT 1
46568: ARRAY
46569: PUSH
46570: LD_VAR 0 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// end ;
46580: LD_VAR 0 3
46584: RET
// export function First ( array ) ; begin
46585: LD_INT 0
46587: PPUSH
// if not array then
46588: LD_VAR 0 1
46592: NOT
46593: IFFALSE 46597
// exit ;
46595: GO 46611
// result := array [ 1 ] ;
46597: LD_ADDR_VAR 0 2
46601: PUSH
46602: LD_VAR 0 1
46606: PUSH
46607: LD_INT 1
46609: ARRAY
46610: ST_TO_ADDR
// end ;
46611: LD_VAR 0 2
46615: RET
// export function Last ( array ) ; begin
46616: LD_INT 0
46618: PPUSH
// if not array then
46619: LD_VAR 0 1
46623: NOT
46624: IFFALSE 46628
// exit ;
46626: GO 46644
// result := array [ array ] ;
46628: LD_ADDR_VAR 0 2
46632: PUSH
46633: LD_VAR 0 1
46637: PUSH
46638: LD_VAR 0 1
46642: ARRAY
46643: ST_TO_ADDR
// end ;
46644: LD_VAR 0 2
46648: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46649: LD_INT 0
46651: PPUSH
46652: PPUSH
// result := [ ] ;
46653: LD_ADDR_VAR 0 5
46657: PUSH
46658: EMPTY
46659: ST_TO_ADDR
// if not array then
46660: LD_VAR 0 1
46664: NOT
46665: IFFALSE 46669
// exit ;
46667: GO 46781
// for i := 1 to array do
46669: LD_ADDR_VAR 0 6
46673: PUSH
46674: DOUBLE
46675: LD_INT 1
46677: DEC
46678: ST_TO_ADDR
46679: LD_VAR 0 1
46683: PUSH
46684: FOR_TO
46685: IFFALSE 46779
// if array [ i ] [ index ] = value then
46687: LD_VAR 0 1
46691: PUSH
46692: LD_VAR 0 6
46696: ARRAY
46697: PUSH
46698: LD_VAR 0 2
46702: ARRAY
46703: PUSH
46704: LD_VAR 0 3
46708: EQUAL
46709: IFFALSE 46777
// begin if indexColumn then
46711: LD_VAR 0 4
46715: IFFALSE 46751
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46717: LD_ADDR_VAR 0 5
46721: PUSH
46722: LD_VAR 0 5
46726: PPUSH
46727: LD_VAR 0 1
46731: PUSH
46732: LD_VAR 0 6
46736: ARRAY
46737: PUSH
46738: LD_VAR 0 4
46742: ARRAY
46743: PPUSH
46744: CALL 41789 0 2
46748: ST_TO_ADDR
46749: GO 46777
// result := Join ( result , array [ i ] ) ;
46751: LD_ADDR_VAR 0 5
46755: PUSH
46756: LD_VAR 0 5
46760: PPUSH
46761: LD_VAR 0 1
46765: PUSH
46766: LD_VAR 0 6
46770: ARRAY
46771: PPUSH
46772: CALL 41789 0 2
46776: ST_TO_ADDR
// end ;
46777: GO 46684
46779: POP
46780: POP
// end ;
46781: LD_VAR 0 5
46785: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46786: LD_INT 0
46788: PPUSH
// if not vehicles or not parkingPoint then
46789: LD_VAR 0 1
46793: NOT
46794: IFTRUE 46803
46796: PUSH
46797: LD_VAR 0 2
46801: NOT
46802: OR
46803: IFFALSE 46807
// exit ;
46805: GO 46905
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46807: LD_ADDR_VAR 0 1
46811: PUSH
46812: LD_VAR 0 1
46816: PPUSH
46817: LD_INT 50
46819: PUSH
46820: EMPTY
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: LD_INT 92
46828: PUSH
46829: LD_VAR 0 2
46833: PUSH
46834: LD_INT 1
46836: ARRAY
46837: PUSH
46838: LD_VAR 0 2
46842: PUSH
46843: LD_INT 2
46845: ARRAY
46846: PUSH
46847: LD_INT 8
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PPUSH
46864: CALL_OW 72
46868: ST_TO_ADDR
// if not vehicles then
46869: LD_VAR 0 1
46873: NOT
46874: IFFALSE 46878
// exit ;
46876: GO 46905
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46878: LD_VAR 0 1
46882: PPUSH
46883: LD_VAR 0 2
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PPUSH
46892: LD_VAR 0 2
46896: PUSH
46897: LD_INT 2
46899: ARRAY
46900: PPUSH
46901: CALL_OW 111
// end ;
46905: LD_VAR 0 3
46909: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
46914: PPUSH
// if not side or not area then
46915: LD_VAR 0 1
46919: NOT
46920: IFTRUE 46929
46922: PUSH
46923: LD_VAR 0 2
46927: NOT
46928: OR
46929: IFFALSE 46933
// exit ;
46931: GO 47052
// tmp := AreaToList ( area , 0 ) ;
46933: LD_ADDR_VAR 0 5
46937: PUSH
46938: LD_VAR 0 2
46942: PPUSH
46943: LD_INT 0
46945: PPUSH
46946: CALL_OW 517
46950: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46951: LD_ADDR_VAR 0 4
46955: PUSH
46956: DOUBLE
46957: LD_INT 1
46959: DEC
46960: ST_TO_ADDR
46961: LD_VAR 0 5
46965: PUSH
46966: LD_INT 1
46968: ARRAY
46969: PUSH
46970: FOR_TO
46971: IFFALSE 47050
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46973: LD_VAR 0 5
46977: PUSH
46978: LD_INT 1
46980: ARRAY
46981: PUSH
46982: LD_VAR 0 4
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 5
46992: PUSH
46993: LD_INT 2
46995: ARRAY
46996: PUSH
46997: LD_VAR 0 4
47001: ARRAY
47002: PPUSH
47003: CALL_OW 351
47007: IFFALSE 47048
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47009: LD_VAR 0 5
47013: PUSH
47014: LD_INT 1
47016: ARRAY
47017: PUSH
47018: LD_VAR 0 4
47022: ARRAY
47023: PPUSH
47024: LD_VAR 0 5
47028: PUSH
47029: LD_INT 2
47031: ARRAY
47032: PUSH
47033: LD_VAR 0 4
47037: ARRAY
47038: PPUSH
47039: LD_VAR 0 1
47043: PPUSH
47044: CALL_OW 244
// end ;
47048: GO 46970
47050: POP
47051: POP
// end ;
47052: LD_VAR 0 3
47056: RET
// export function UniqueArray ( array ) ; var i ; begin
47057: LD_INT 0
47059: PPUSH
47060: PPUSH
// result := [ ] ;
47061: LD_ADDR_VAR 0 2
47065: PUSH
47066: EMPTY
47067: ST_TO_ADDR
// if not array then
47068: LD_VAR 0 1
47072: NOT
47073: IFFALSE 47077
// exit ;
47075: GO 47138
// for i := 1 to array do
47077: LD_ADDR_VAR 0 3
47081: PUSH
47082: DOUBLE
47083: LD_INT 1
47085: DEC
47086: ST_TO_ADDR
47087: LD_VAR 0 1
47091: PUSH
47092: FOR_TO
47093: IFFALSE 47136
// if not array [ i ] in result then
47095: LD_VAR 0 1
47099: PUSH
47100: LD_VAR 0 3
47104: ARRAY
47105: PUSH
47106: LD_VAR 0 2
47110: IN
47111: NOT
47112: IFFALSE 47134
// result := Join ( result , i ) ;
47114: LD_ADDR_VAR 0 2
47118: PUSH
47119: LD_VAR 0 2
47123: PPUSH
47124: LD_VAR 0 3
47128: PPUSH
47129: CALL 41789 0 2
47133: ST_TO_ADDR
47134: GO 47092
47136: POP
47137: POP
// end ; end_of_file
47138: LD_VAR 0 2
47142: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
47143: LD_INT 0
47145: PPUSH
47146: PPUSH
// disable ( mpActive ) ;
47147: LD_INT 100
47149: DISABLE_MARKED
// disable ( mpWin ) ;
47150: LD_INT 101
47152: DISABLE_MARKED
// disable ( mpLose ) ;
47153: LD_INT 102
47155: DISABLE_MARKED
// mpGameType := 0 ;
47156: LD_ADDR_EXP 5
47160: PUSH
47161: LD_INT 0
47163: ST_TO_ADDR
// mpGameSettings := [ ] ;
47164: LD_ADDR_EXP 8
47168: PUSH
47169: EMPTY
47170: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
47171: LD_ADDR_EXP 6
47175: PUSH
47176: EMPTY
47177: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
47178: LD_ADDR_EXP 7
47182: PUSH
47183: EMPTY
47184: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
47185: LD_ADDR_EXP 31
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// mpOilDeposits := [ ] ;
47200: LD_ADDR_EXP 14
47204: PUSH
47205: EMPTY
47206: ST_TO_ADDR
// mpSibDeposits := [ ] ;
47207: LD_ADDR_EXP 15
47211: PUSH
47212: EMPTY
47213: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
47214: LD_ADDR_EXP 43
47218: PUSH
47219: EMPTY
47220: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
47221: LD_ADDR_EXP 44
47225: PUSH
47226: EMPTY
47227: ST_TO_ADDR
// mpDepots := [ ] ;
47228: LD_ADDR_EXP 16
47232: PUSH
47233: EMPTY
47234: ST_TO_ADDR
// mpBuildings := [ ] ;
47235: LD_ADDR_EXP 19
47239: PUSH
47240: EMPTY
47241: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
47242: LD_ADDR_EXP 20
47246: PUSH
47247: EMPTY
47248: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
47249: LD_ADDR_EXP 21
47253: PUSH
47254: EMPTY
47255: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
47256: LD_ADDR_EXP 22
47260: PUSH
47261: EMPTY
47262: ST_TO_ADDR
// mpStartingResources := [ ] ;
47263: LD_ADDR_EXP 17
47267: PUSH
47268: EMPTY
47269: ST_TO_ADDR
// mpStartPos := [ ] ;
47270: LD_ADDR_EXP 23
47274: PUSH
47275: EMPTY
47276: ST_TO_ADDR
// mpBattleFlag := - 1 ;
47277: LD_ADDR_EXP 24
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: ST_TO_ADDR
// mpBattleFlags := [ ] ;
47286: LD_ADDR_EXP 25
47290: PUSH
47291: EMPTY
47292: ST_TO_ADDR
// mpApemans := [ ] ;
47293: LD_ADDR_EXP 32
47297: PUSH
47298: EMPTY
47299: ST_TO_ADDR
// mpApemansArea := [ ] ;
47300: LD_ADDR_EXP 33
47304: PUSH
47305: EMPTY
47306: ST_TO_ADDR
// mpRespawn := [ ] ;
47307: LD_ADDR_EXP 35
47311: PUSH
47312: EMPTY
47313: ST_TO_ADDR
// mpKingArea := 0 ;
47314: LD_ADDR_EXP 36
47318: PUSH
47319: LD_INT 0
47321: ST_TO_ADDR
// mpPoints := [ ] ;
47322: LD_ADDR_EXP 37
47326: PUSH
47327: EMPTY
47328: ST_TO_ADDR
// mpVehicles := 0 ;
47329: LD_ADDR_EXP 38
47333: PUSH
47334: LD_INT 0
47336: ST_TO_ADDR
// mpShipments := 0 ;
47337: LD_ADDR_EXP 29
47341: PUSH
47342: LD_INT 0
47344: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47345: LD_ADDR_EXP 42
47349: PUSH
47350: EMPTY
47351: PUSH
47352: EMPTY
47353: PUSH
47354: EMPTY
47355: PUSH
47356: EMPTY
47357: PUSH
47358: EMPTY
47359: PUSH
47360: EMPTY
47361: PUSH
47362: EMPTY
47363: PUSH
47364: EMPTY
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47376: LD_ADDR_EXP 34
47380: PUSH
47381: EMPTY
47382: PUSH
47383: EMPTY
47384: PUSH
47385: EMPTY
47386: PUSH
47387: EMPTY
47388: PUSH
47389: EMPTY
47390: PUSH
47391: EMPTY
47392: PUSH
47393: EMPTY
47394: PUSH
47395: EMPTY
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// mpEmissions := 0 ;
47407: LD_ADDR_EXP 39
47411: PUSH
47412: LD_INT 0
47414: ST_TO_ADDR
// mpTeleports := 0 ;
47415: LD_ADDR_EXP 45
47419: PUSH
47420: LD_INT 0
47422: ST_TO_ADDR
// mpArtifacts := 0 ;
47423: LD_ADDR_EXP 46
47427: PUSH
47428: LD_INT 0
47430: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
47431: LD_ADDR_EXP 47
47435: PUSH
47436: LD_INT 0
47438: ST_TO_ADDR
// mpPeopleSkill := 3 ;
47439: LD_ADDR_EXP 27
47443: PUSH
47444: LD_INT 3
47446: ST_TO_ADDR
// mpPeopleAmount := 15 ;
47447: LD_ADDR_EXP 26
47451: PUSH
47452: LD_INT 15
47454: ST_TO_ADDR
// mpDisplayStrings := 0 ;
47455: LD_ADDR_EXP 40
47459: PUSH
47460: LD_INT 0
47462: ST_TO_ADDR
// mpGameActive := false ;
47463: LD_ADDR_EXP 41
47467: PUSH
47468: LD_INT 0
47470: ST_TO_ADDR
// mpBlockRespThread := false ;
47471: LD_ADDR_EXP 48
47475: PUSH
47476: LD_INT 0
47478: ST_TO_ADDR
// for i := 1 to 32 do
47479: LD_ADDR_VAR 0 2
47483: PUSH
47484: DOUBLE
47485: LD_INT 1
47487: DEC
47488: ST_TO_ADDR
47489: LD_INT 32
47491: PUSH
47492: FOR_TO
47493: IFFALSE 47520
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
47495: LD_ADDR_EXP 8
47499: PUSH
47500: LD_EXP 8
47504: PPUSH
47505: LD_VAR 0 2
47509: PPUSH
47510: LD_INT 0
47512: PPUSH
47513: CALL_OW 1
47517: ST_TO_ADDR
47518: GO 47492
47520: POP
47521: POP
// end ;
47522: LD_VAR 0 1
47526: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
47527: LD_INT 0
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
47543: LD_ADDR_VAR 0 14
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: LD_INT 6
47562: PUSH
47563: LD_INT 7
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: ST_TO_ADDR
// for i in gameTypes do
47574: LD_ADDR_VAR 0 2
47578: PUSH
47579: LD_VAR 0 14
47583: PUSH
47584: FOR_IN
47585: IFFALSE 47594
// disable ( i ) ;
47587: LD_VAR 0 2
47591: DISABLE_MARKED
47592: GO 47584
47594: POP
47595: POP
// if Multiplayer then
47596: LD_OWVAR 4
47600: IFFALSE 47784
// begin mpGameType := mp_game_type ;
47602: LD_ADDR_EXP 5
47606: PUSH
47607: LD_OWVAR 6
47611: ST_TO_ADDR
// your_side := mp_player_side ;
47612: LD_ADDR_OWVAR 2
47616: PUSH
47617: LD_OWVAR 7
47621: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47622: LD_ADDR_EXP 9
47626: PUSH
47627: LD_OWVAR 17
47631: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47632: LD_ADDR_EXP 10
47636: PUSH
47637: LD_OWVAR 15
47641: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47642: LD_ADDR_EXP 11
47646: PUSH
47647: LD_OWVAR 16
47651: ST_TO_ADDR
// mpTeams := mp_teams ;
47652: LD_ADDR_EXP 12
47656: PUSH
47657: LD_OWVAR 12
47661: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47662: LD_ADDR_VAR 0 2
47666: PUSH
47667: DOUBLE
47668: LD_INT 1
47670: DEC
47671: ST_TO_ADDR
47672: LD_EXP 6
47676: PPUSH
47677: CALL 5823 0 1
47681: PUSH
47682: FOR_TO
47683: IFFALSE 47759
// begin setting := mpGameSettingsKeys [ i ] ;
47685: LD_ADDR_VAR 0 12
47689: PUSH
47690: LD_EXP 6
47694: PUSH
47695: LD_VAR 0 2
47699: ARRAY
47700: ST_TO_ADDR
// if setting then
47701: LD_VAR 0 12
47705: IFFALSE 47757
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47707: LD_ADDR_EXP 8
47711: PUSH
47712: LD_EXP 8
47716: PPUSH
47717: LD_VAR 0 2
47721: PPUSH
47722: LD_EXP 7
47726: PUSH
47727: LD_VAR 0 2
47731: ARRAY
47732: PUSH
47733: LD_VAR 0 2
47737: PUSH
47738: LD_INT 1
47740: MINUS
47741: PPUSH
47742: CALL_OW 426
47746: PUSH
47747: LD_INT 1
47749: PLUS
47750: ARRAY
47751: PPUSH
47752: CALL_OW 1
47756: ST_TO_ADDR
// end ;
47757: GO 47682
47759: POP
47760: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47761: LD_ADDR_EXP 13
47765: PUSH
47766: LD_EXP 10
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: DIFF
47777: PUSH
47778: LD_INT 1
47780: GREATER
47781: ST_TO_ADDR
// end else
47782: GO 47784
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47784: LD_EXP 5
47788: PPUSH
47789: CALL 852 0 1
// if Count ( mpMarkedAreas ) then
47793: LD_EXP 20
47797: PPUSH
47798: CALL 5823 0 1
47802: IFFALSE 47833
// begin for i in mpMarkedAreas do
47804: LD_ADDR_VAR 0 2
47808: PUSH
47809: LD_EXP 20
47813: PUSH
47814: FOR_IN
47815: IFFALSE 47831
// SetAreaMapShow ( i , 0 ) ;
47817: LD_VAR 0 2
47821: PPUSH
47822: LD_INT 0
47824: PPUSH
47825: CALL_OW 424
47829: GO 47814
47831: POP
47832: POP
// end ; for i := 1 to 8 do
47833: LD_ADDR_VAR 0 2
47837: PUSH
47838: DOUBLE
47839: LD_INT 1
47841: DEC
47842: ST_TO_ADDR
47843: LD_INT 8
47845: PUSH
47846: FOR_TO
47847: IFFALSE 49282
// begin if not mpSidePositions [ i ] then
47849: LD_EXP 9
47853: PUSH
47854: LD_VAR 0 2
47858: ARRAY
47859: NOT
47860: IFFALSE 47864
// continue ;
47862: GO 47846
// side := i ;
47864: LD_ADDR_VAR 0 7
47868: PUSH
47869: LD_VAR 0 2
47873: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47874: LD_ADDR_VAR 0 9
47878: PUSH
47879: LD_EXP 11
47883: PUSH
47884: LD_VAR 0 2
47888: ARRAY
47889: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47890: LD_ADDR_VAR 0 8
47894: PUSH
47895: LD_EXP 9
47899: PUSH
47900: LD_VAR 0 2
47904: ARRAY
47905: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47906: LD_EXP 14
47910: PPUSH
47911: CALL 5823 0 1
47915: IFFALSE 47992
// begin for j in mpOilDeposits [ pos ] do
47917: LD_ADDR_VAR 0 3
47921: PUSH
47922: LD_EXP 14
47926: PUSH
47927: LD_VAR 0 8
47931: ARRAY
47932: PUSH
47933: FOR_IN
47934: IFFALSE 47990
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47936: LD_VAR 0 3
47940: PUSH
47941: LD_INT 1
47943: ARRAY
47944: PPUSH
47945: LD_VAR 0 3
47949: PUSH
47950: LD_INT 2
47952: ARRAY
47953: PPUSH
47954: LD_INT 2
47956: PPUSH
47957: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47961: LD_VAR 0 3
47965: PUSH
47966: LD_INT 1
47968: ARRAY
47969: PPUSH
47970: LD_VAR 0 3
47974: PUSH
47975: LD_INT 2
47977: ARRAY
47978: PPUSH
47979: LD_VAR 0 7
47983: PPUSH
47984: CALL_OW 441
// end ;
47988: GO 47933
47990: POP
47991: POP
// end ; if Count ( mpSibDeposits ) then
47992: LD_EXP 15
47996: PPUSH
47997: CALL 5823 0 1
48001: IFFALSE 48078
// begin for j in mpSibDeposits [ pos ] do
48003: LD_ADDR_VAR 0 3
48007: PUSH
48008: LD_EXP 15
48012: PUSH
48013: LD_VAR 0 8
48017: ARRAY
48018: PUSH
48019: FOR_IN
48020: IFFALSE 48076
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
48022: LD_VAR 0 3
48026: PUSH
48027: LD_INT 1
48029: ARRAY
48030: PPUSH
48031: LD_VAR 0 3
48035: PUSH
48036: LD_INT 2
48038: ARRAY
48039: PPUSH
48040: LD_INT 3
48042: PPUSH
48043: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
48047: LD_VAR 0 3
48051: PUSH
48052: LD_INT 1
48054: ARRAY
48055: PPUSH
48056: LD_VAR 0 3
48060: PUSH
48061: LD_INT 2
48063: ARRAY
48064: PPUSH
48065: LD_VAR 0 7
48069: PPUSH
48070: CALL_OW 441
// end ;
48074: GO 48019
48076: POP
48077: POP
// end ; InitBc ;
48078: CALL_OW 21
// InitUc ;
48082: CALL_OW 18
// uc_side := side ;
48086: LD_ADDR_OWVAR 20
48090: PUSH
48091: LD_VAR 0 7
48095: ST_TO_ADDR
// uc_nation := nation ;
48096: LD_ADDR_OWVAR 21
48100: PUSH
48101: LD_VAR 0 9
48105: ST_TO_ADDR
// if mpBattleFlag > - 1 then
48106: LD_EXP 24
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: GREATER
48115: IFFALSE 48274
// begin x := mpStartPos [ pos ] [ 1 ] ;
48117: LD_ADDR_VAR 0 5
48121: PUSH
48122: LD_EXP 23
48126: PUSH
48127: LD_VAR 0 8
48131: ARRAY
48132: PUSH
48133: LD_INT 1
48135: ARRAY
48136: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48137: LD_ADDR_VAR 0 6
48141: PUSH
48142: LD_EXP 23
48146: PUSH
48147: LD_VAR 0 8
48151: ARRAY
48152: PUSH
48153: LD_INT 2
48155: ARRAY
48156: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
48157: LD_VAR 0 5
48161: PPUSH
48162: LD_VAR 0 6
48166: PPUSH
48167: LD_INT 12
48169: PPUSH
48170: LD_INT 2
48172: PPUSH
48173: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
48177: LD_ADDR_EXP 25
48181: PUSH
48182: LD_EXP 25
48186: PPUSH
48187: LD_VAR 0 7
48191: PPUSH
48192: LD_VAR 0 7
48196: PPUSH
48197: LD_VAR 0 5
48201: PPUSH
48202: LD_VAR 0 6
48206: PPUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 100
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 70
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: LD_INT 40
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 10
48239: PUSH
48240: LD_INT 25
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 20
48249: PUSH
48250: LD_INT 100
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: PPUSH
48264: CALL_OW 418
48268: PPUSH
48269: CALL_OW 1
48273: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
48274: LD_EXP 16
48278: PPUSH
48279: CALL 5823 0 1
48283: IFFALSE 48478
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
48285: LD_EXP 5
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 6
48295: PUSH
48296: LD_INT 7
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: IN
48304: IFFALSE 48324
// begin bc_level := 10 ;
48306: LD_ADDR_OWVAR 43
48310: PUSH
48311: LD_INT 10
48313: ST_TO_ADDR
// bc_type := b_warehouse ;
48314: LD_ADDR_OWVAR 42
48318: PUSH
48319: LD_INT 1
48321: ST_TO_ADDR
// end else
48322: GO 48340
// begin bc_level := 0 ;
48324: LD_ADDR_OWVAR 43
48328: PUSH
48329: LD_INT 0
48331: ST_TO_ADDR
// bc_type := b_depot ;
48332: LD_ADDR_OWVAR 42
48336: PUSH
48337: LD_INT 0
48339: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
48340: LD_ADDR_VAR 0 4
48344: PUSH
48345: LD_EXP 16
48349: PUSH
48350: LD_VAR 0 8
48354: ARRAY
48355: PUSH
48356: LD_INT 1
48358: ARRAY
48359: PPUSH
48360: LD_EXP 16
48364: PUSH
48365: LD_VAR 0 8
48369: ARRAY
48370: PUSH
48371: LD_INT 2
48373: ARRAY
48374: PPUSH
48375: LD_EXP 16
48379: PUSH
48380: LD_VAR 0 8
48384: ARRAY
48385: PUSH
48386: LD_INT 3
48388: ARRAY
48389: PPUSH
48390: CALL_OW 47
48394: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
48395: LD_VAR 0 4
48399: PPUSH
48400: LD_STRING @
48402: PUSH
48403: LD_VAR 0 7
48407: STR
48408: PPUSH
48409: CALL_OW 500
// if Count ( mpStartingResources ) then
48413: LD_EXP 17
48417: PPUSH
48418: CALL 5823 0 1
48422: IFFALSE 48476
// begin for j := 1 to mpStartingResources do
48424: LD_ADDR_VAR 0 3
48428: PUSH
48429: DOUBLE
48430: LD_INT 1
48432: DEC
48433: ST_TO_ADDR
48434: LD_EXP 17
48438: PUSH
48439: FOR_TO
48440: IFFALSE 48474
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
48442: LD_VAR 0 4
48446: PPUSH
48447: CALL_OW 274
48451: PPUSH
48452: LD_VAR 0 3
48456: PPUSH
48457: LD_EXP 17
48461: PUSH
48462: LD_VAR 0 3
48466: ARRAY
48467: PPUSH
48468: CALL_OW 277
48472: GO 48439
48474: POP
48475: POP
// end ; end else
48476: GO 48685
// if Count ( mpStartingResources ) then
48478: LD_EXP 17
48482: PPUSH
48483: CALL 5823 0 1
48487: IFFALSE 48685
// begin x := mpStartPos [ pos ] [ 1 ] ;
48489: LD_ADDR_VAR 0 5
48493: PUSH
48494: LD_EXP 23
48498: PUSH
48499: LD_VAR 0 8
48503: ARRAY
48504: PUSH
48505: LD_INT 1
48507: ARRAY
48508: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48509: LD_ADDR_VAR 0 6
48513: PUSH
48514: LD_EXP 23
48518: PUSH
48519: LD_VAR 0 8
48523: ARRAY
48524: PUSH
48525: LD_INT 2
48527: ARRAY
48528: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48529: LD_ADDR_VAR 0 3
48533: PUSH
48534: DOUBLE
48535: LD_INT 1
48537: DEC
48538: ST_TO_ADDR
48539: LD_EXP 17
48543: PUSH
48544: FOR_TO
48545: IFFALSE 48683
// begin resources := mpStartingResources [ j ] ;
48547: LD_ADDR_VAR 0 13
48551: PUSH
48552: LD_EXP 17
48556: PUSH
48557: LD_VAR 0 3
48561: ARRAY
48562: ST_TO_ADDR
// if resources = 0 then
48563: LD_VAR 0 13
48567: PUSH
48568: LD_INT 0
48570: EQUAL
48571: IFFALSE 48575
// continue ;
48573: GO 48544
// repeat if resources >= 50 then
48575: LD_VAR 0 13
48579: PUSH
48580: LD_INT 50
48582: GREATEREQUAL
48583: IFFALSE 48629
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48585: LD_VAR 0 3
48589: PPUSH
48590: LD_INT 5
48592: PPUSH
48593: LD_VAR 0 5
48597: PPUSH
48598: LD_VAR 0 6
48602: PPUSH
48603: LD_INT 6
48605: PPUSH
48606: LD_INT 0
48608: PPUSH
48609: CALL_OW 60
// resources := resources - 50 ;
48613: LD_ADDR_VAR 0 13
48617: PUSH
48618: LD_VAR 0 13
48622: PUSH
48623: LD_INT 50
48625: MINUS
48626: ST_TO_ADDR
// end else
48627: GO 48671
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48629: LD_VAR 0 3
48633: PPUSH
48634: LD_VAR 0 13
48638: PUSH
48639: LD_INT 10
48641: DIV
48642: PPUSH
48643: LD_VAR 0 5
48647: PPUSH
48648: LD_VAR 0 6
48652: PPUSH
48653: LD_INT 6
48655: PPUSH
48656: LD_INT 0
48658: PPUSH
48659: CALL_OW 60
// resources := 0 ;
48663: LD_ADDR_VAR 0 13
48667: PUSH
48668: LD_INT 0
48670: ST_TO_ADDR
// end ; until resources <= 0 ;
48671: LD_VAR 0 13
48675: PUSH
48676: LD_INT 0
48678: LESSEQUAL
48679: IFFALSE 48575
// end ;
48681: GO 48544
48683: POP
48684: POP
// end ; if Count ( mpBuildings ) then
48685: LD_EXP 19
48689: PPUSH
48690: CALL 5823 0 1
48694: IFFALSE 48772
// begin for j in mpBuildings [ pos ] do
48696: LD_ADDR_VAR 0 3
48700: PUSH
48701: LD_EXP 19
48705: PUSH
48706: LD_VAR 0 8
48710: ARRAY
48711: PUSH
48712: FOR_IN
48713: IFFALSE 48770
// begin bc_level := 0 ;
48715: LD_ADDR_OWVAR 43
48719: PUSH
48720: LD_INT 0
48722: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48723: LD_ADDR_OWVAR 42
48727: PUSH
48728: LD_VAR 0 3
48732: PUSH
48733: LD_INT 1
48735: ARRAY
48736: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48737: LD_VAR 0 3
48741: PUSH
48742: LD_INT 2
48744: ARRAY
48745: PPUSH
48746: LD_VAR 0 3
48750: PUSH
48751: LD_INT 3
48753: ARRAY
48754: PPUSH
48755: LD_VAR 0 3
48759: PUSH
48760: LD_INT 4
48762: ARRAY
48763: PPUSH
48764: CALL_OW 47
// end ;
48768: GO 48712
48770: POP
48771: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48772: LD_EXP 28
48776: IFFALSE 48796
48778: PUSH
48779: LD_INT 20
48781: PPUSH
48782: LD_VAR 0 7
48786: PPUSH
48787: CALL_OW 321
48791: PUSH
48792: LD_INT 1
48794: EQUAL
48795: AND
48796: IFFALSE 48813
// SetTech ( tech_SibDet , side , state_researched ) ;
48798: LD_INT 20
48800: PPUSH
48801: LD_VAR 0 7
48805: PPUSH
48806: LD_INT 2
48808: PPUSH
48809: CALL_OW 322
// if not mpArtifacts then
48813: LD_EXP 46
48817: NOT
48818: IFFALSE 48835
// SetTech ( tech_artifact , side , state_disabled ) ;
48820: LD_INT 24
48822: PPUSH
48823: LD_VAR 0 7
48827: PPUSH
48828: LD_INT 0
48830: PPUSH
48831: CALL_OW 322
// if mpSibBomb = 1 then
48835: LD_EXP 30
48839: PUSH
48840: LD_INT 1
48842: EQUAL
48843: IFFALSE 48862
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48845: LD_INT 25
48847: PPUSH
48848: LD_VAR 0 7
48852: PPUSH
48853: LD_INT 1
48855: PPUSH
48856: CALL_OW 322
// end else
48860: GO 48877
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48862: LD_INT 25
48864: PPUSH
48865: LD_VAR 0 7
48869: PPUSH
48870: LD_INT 0
48872: PPUSH
48873: CALL_OW 322
// end ; if mpVehicles then
48877: LD_EXP 38
48881: IFFALSE 48980
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48883: LD_ADDR_VAR 0 3
48887: PUSH
48888: LD_VAR 0 7
48892: PPUSH
48893: LD_VAR 0 9
48897: PPUSH
48898: LD_EXP 38
48902: PPUSH
48903: CALL 50203 0 3
48907: PUSH
48908: FOR_IN
48909: IFFALSE 48978
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48911: LD_VAR 0 3
48915: PPUSH
48916: LD_INT 0
48918: PPUSH
48919: LD_INT 5
48921: PPUSH
48922: CALL_OW 12
48926: PPUSH
48927: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48931: LD_VAR 0 3
48935: PPUSH
48936: LD_EXP 23
48940: PUSH
48941: LD_VAR 0 8
48945: ARRAY
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: PPUSH
48951: LD_EXP 23
48955: PUSH
48956: LD_VAR 0 8
48960: ARRAY
48961: PUSH
48962: LD_INT 2
48964: ARRAY
48965: PPUSH
48966: LD_INT 12
48968: PPUSH
48969: LD_INT 0
48971: PPUSH
48972: CALL_OW 50
// end ;
48976: GO 48908
48978: POP
48979: POP
// end ; uc_nation := nation ;
48980: LD_ADDR_OWVAR 21
48984: PUSH
48985: LD_VAR 0 9
48989: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48990: LD_EXP 5
48994: PUSH
48995: LD_INT 6
48997: PUSH
48998: LD_INT 7
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: IN
49005: IFFALSE 49030
49007: PUSH
49008: LD_EXP 9
49012: PUSH
49013: LD_VAR 0 2
49017: ARRAY
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: IN
49029: AND
49030: IFFALSE 49078
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
49032: LD_ADDR_VAR 0 11
49036: PUSH
49037: LD_VAR 0 7
49041: PPUSH
49042: LD_VAR 0 9
49046: PPUSH
49047: LD_EXP 26
49051: PUSH
49052: LD_EXP 26
49056: PUSH
49057: LD_INT 2
49059: DIV
49060: PLUS
49061: PPUSH
49062: LD_EXP 27
49066: PUSH
49067: LD_INT 1
49069: PLUS
49070: PPUSH
49071: CALL 49694 0 4
49075: ST_TO_ADDR
49076: GO 49108
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
49078: LD_ADDR_VAR 0 11
49082: PUSH
49083: LD_VAR 0 7
49087: PPUSH
49088: LD_VAR 0 9
49092: PPUSH
49093: LD_EXP 26
49097: PPUSH
49098: LD_EXP 27
49102: PPUSH
49103: CALL 49694 0 4
49107: ST_TO_ADDR
// for j in team do
49108: LD_ADDR_VAR 0 3
49112: PUSH
49113: LD_VAR 0 11
49117: PUSH
49118: FOR_IN
49119: IFFALSE 49168
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
49121: LD_VAR 0 3
49125: PPUSH
49126: LD_EXP 23
49130: PUSH
49131: LD_VAR 0 8
49135: ARRAY
49136: PUSH
49137: LD_INT 1
49139: ARRAY
49140: PPUSH
49141: LD_EXP 23
49145: PUSH
49146: LD_VAR 0 8
49150: ARRAY
49151: PUSH
49152: LD_INT 2
49154: ARRAY
49155: PPUSH
49156: LD_INT 12
49158: PPUSH
49159: LD_INT 0
49161: PPUSH
49162: CALL_OW 50
49166: GO 49118
49168: POP
49169: POP
// if mpApemans then
49170: LD_EXP 32
49174: IFFALSE 49280
// begin for j := 1 to mpApemans do
49176: LD_ADDR_VAR 0 3
49180: PUSH
49181: DOUBLE
49182: LD_INT 1
49184: DEC
49185: ST_TO_ADDR
49186: LD_EXP 32
49190: PUSH
49191: FOR_TO
49192: IFFALSE 49278
// begin PrepareApeman ( - 5 ) ;
49194: LD_INT 5
49196: NEG
49197: PPUSH
49198: CALL 37916 0 1
// ape := CreateHuman ;
49202: LD_ADDR_VAR 0 10
49206: PUSH
49207: CALL_OW 44
49211: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
49212: LD_ADDR_EXP 34
49216: PUSH
49217: LD_EXP 34
49221: PPUSH
49222: LD_VAR 0 8
49226: PPUSH
49227: LD_EXP 34
49231: PUSH
49232: LD_VAR 0 8
49236: ARRAY
49237: PPUSH
49238: LD_VAR 0 10
49242: PPUSH
49243: CALL 41789 0 2
49247: PPUSH
49248: CALL_OW 1
49252: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
49253: LD_VAR 0 10
49257: PPUSH
49258: LD_EXP 33
49262: PUSH
49263: LD_VAR 0 8
49267: ARRAY
49268: PPUSH
49269: LD_INT 0
49271: PPUSH
49272: CALL_OW 49
// end ;
49276: GO 49191
49278: POP
49279: POP
// end ; end ;
49280: GO 47846
49282: POP
49283: POP
// if not mpTeamGame then
49284: LD_EXP 13
49288: NOT
49289: IFFALSE 49387
// begin for i := 1 to 8 do
49291: LD_ADDR_VAR 0 2
49295: PUSH
49296: DOUBLE
49297: LD_INT 1
49299: DEC
49300: ST_TO_ADDR
49301: LD_INT 8
49303: PUSH
49304: FOR_TO
49305: IFFALSE 49383
// for j := 1 to 8 do
49307: LD_ADDR_VAR 0 3
49311: PUSH
49312: DOUBLE
49313: LD_INT 1
49315: DEC
49316: ST_TO_ADDR
49317: LD_INT 8
49319: PUSH
49320: FOR_TO
49321: IFFALSE 49379
// if i <> j then
49323: LD_VAR 0 2
49327: PUSH
49328: LD_VAR 0 3
49332: NONEQUAL
49333: IFFALSE 49357
// SetAttitude ( i , j , att_neutral , true ) else
49335: LD_VAR 0 2
49339: PPUSH
49340: LD_VAR 0 3
49344: PPUSH
49345: LD_INT 0
49347: PPUSH
49348: LD_INT 1
49350: PPUSH
49351: CALL_OW 80
49355: GO 49377
// SetAttitude ( i , j , att_friend , true ) ;
49357: LD_VAR 0 2
49361: PPUSH
49362: LD_VAR 0 3
49366: PPUSH
49367: LD_INT 1
49369: PPUSH
49370: LD_INT 1
49372: PPUSH
49373: CALL_OW 80
49377: GO 49320
49379: POP
49380: POP
49381: GO 49304
49383: POP
49384: POP
// end else
49385: GO 49562
// begin if mpSharedVision then
49387: LD_EXP 18
49391: IFFALSE 49456
// begin for i in mpTeams do
49393: LD_ADDR_VAR 0 2
49397: PUSH
49398: LD_EXP 12
49402: PUSH
49403: FOR_IN
49404: IFFALSE 49454
// for j := 2 to i do
49406: LD_ADDR_VAR 0 3
49410: PUSH
49411: DOUBLE
49412: LD_INT 2
49414: DEC
49415: ST_TO_ADDR
49416: LD_VAR 0 2
49420: PUSH
49421: FOR_TO
49422: IFFALSE 49450
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
49424: LD_VAR 0 2
49428: PUSH
49429: LD_VAR 0 3
49433: ARRAY
49434: PPUSH
49435: LD_VAR 0 2
49439: PUSH
49440: LD_INT 1
49442: ARRAY
49443: PPUSH
49444: CALL_OW 343
49448: GO 49421
49450: POP
49451: POP
49452: GO 49403
49454: POP
49455: POP
// end ; for i := 1 to 8 do
49456: LD_ADDR_VAR 0 2
49460: PUSH
49461: DOUBLE
49462: LD_INT 1
49464: DEC
49465: ST_TO_ADDR
49466: LD_INT 8
49468: PUSH
49469: FOR_TO
49470: IFFALSE 49560
// for j := 1 to 8 do
49472: LD_ADDR_VAR 0 3
49476: PUSH
49477: DOUBLE
49478: LD_INT 1
49480: DEC
49481: ST_TO_ADDR
49482: LD_INT 8
49484: PUSH
49485: FOR_TO
49486: IFFALSE 49556
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
49488: LD_EXP 10
49492: PUSH
49493: LD_VAR 0 2
49497: ARRAY
49498: PUSH
49499: LD_EXP 10
49503: PUSH
49504: LD_VAR 0 3
49508: ARRAY
49509: EQUAL
49510: IFFALSE 49534
// SetAttitude ( i , j , att_friend , true ) else
49512: LD_VAR 0 2
49516: PPUSH
49517: LD_VAR 0 3
49521: PPUSH
49522: LD_INT 1
49524: PPUSH
49525: LD_INT 1
49527: PPUSH
49528: CALL_OW 80
49532: GO 49554
// SetAttitude ( i , j , att_enemy , true ) ;
49534: LD_VAR 0 2
49538: PPUSH
49539: LD_VAR 0 3
49543: PPUSH
49544: LD_INT 2
49546: PPUSH
49547: LD_INT 1
49549: PPUSH
49550: CALL_OW 80
49554: GO 49485
49556: POP
49557: POP
49558: GO 49469
49560: POP
49561: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49562: LD_ADDR_OWVAR 71
49566: PUSH
49567: LD_EXP 11
49571: PUSH
49572: LD_OWVAR 2
49576: ARRAY
49577: ST_TO_ADDR
// if IAmSpec then
49578: CALL_OW 531
49582: IFFALSE 49623
// begin FogOff ( true ) ;
49584: LD_INT 1
49586: PPUSH
49587: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49591: LD_EXP 31
49595: PUSH
49596: LD_INT 1
49598: ARRAY
49599: PUSH
49600: LD_INT 2
49602: DIV
49603: PPUSH
49604: LD_EXP 31
49608: PUSH
49609: LD_INT 2
49611: ARRAY
49612: PUSH
49613: LD_INT 2
49615: DIV
49616: PPUSH
49617: CALL_OW 86
// end else
49621: GO 49669
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49623: LD_EXP 23
49627: PUSH
49628: LD_EXP 9
49632: PUSH
49633: LD_OWVAR 2
49637: ARRAY
49638: ARRAY
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PPUSH
49644: LD_EXP 23
49648: PUSH
49649: LD_EXP 9
49653: PUSH
49654: LD_OWVAR 2
49658: ARRAY
49659: ARRAY
49660: PUSH
49661: LD_INT 2
49663: ARRAY
49664: PPUSH
49665: CALL_OW 86
// end ; BeginBuildUp ;
49669: CALL 50736 0 0
// enable ( mpActive ) ;
49673: LD_INT 100
49675: ENABLE_MARKED
// enable ( mpGameType ) ;
49676: LD_EXP 5
49680: ENABLE_MARKED
// mpGameActive := true ;
49681: LD_ADDR_EXP 41
49685: PUSH
49686: LD_INT 1
49688: ST_TO_ADDR
// end ;
49689: LD_VAR 0 1
49693: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49694: LD_INT 0
49696: PPUSH
49697: PPUSH
49698: PPUSH
49699: PPUSH
// result := [ ] ;
49700: LD_ADDR_VAR 0 5
49704: PUSH
49705: EMPTY
49706: ST_TO_ADDR
// class := class_soldier ;
49707: LD_ADDR_VAR 0 8
49711: PUSH
49712: LD_INT 1
49714: ST_TO_ADDR
// uc_side := side ;
49715: LD_ADDR_OWVAR 20
49719: PUSH
49720: LD_VAR 0 1
49724: ST_TO_ADDR
// uc_nation := nation ;
49725: LD_ADDR_OWVAR 21
49729: PUSH
49730: LD_VAR 0 2
49734: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49735: LD_ADDR_OWVAR 26
49739: PUSH
49740: LD_OWVAR 19
49744: PUSH
49745: LD_VAR 0 1
49749: ARRAY
49750: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49751: LD_INT 1
49753: PPUSH
49754: LD_INT 2
49756: PPUSH
49757: CALL_OW 12
49761: PPUSH
49762: LD_VAR 0 8
49766: PPUSH
49767: LD_VAR 0 4
49771: PUSH
49772: LD_INT 2
49774: PLUS
49775: PPUSH
49776: CALL_OW 380
// hc_importance := 105 ;
49780: LD_ADDR_OWVAR 32
49784: PUSH
49785: LD_INT 105
49787: ST_TO_ADDR
// if Multiplayer then
49788: LD_OWVAR 4
49792: IFFALSE 49832
// begin hc_gallery := MULTIAVATARS ;
49794: LD_ADDR_OWVAR 33
49798: PUSH
49799: LD_STRING MULTIAVATARS
49801: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49802: LD_ADDR_OWVAR 34
49806: PUSH
49807: LD_VAR 0 1
49811: PPUSH
49812: CALL_OW 525
49816: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49817: LD_ADDR_OWVAR 27
49821: PUSH
49822: LD_VAR 0 1
49826: PPUSH
49827: CALL_OW 526
49831: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49832: LD_ADDR_VAR 0 5
49836: PUSH
49837: LD_VAR 0 5
49841: PPUSH
49842: CALL_OW 44
49846: PPUSH
49847: CALL 41789 0 2
49851: ST_TO_ADDR
// if mpTeamPreset then
49852: LD_LOC 1
49856: IFFALSE 49952
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49858: LD_LOC 1
49862: PUSH
49863: LD_INT 1
49865: ARRAY
49866: PPUSH
49867: LD_VAR 0 5
49871: PUSH
49872: LD_VAR 0 5
49876: ARRAY
49877: PPUSH
49878: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49882: LD_VAR 0 5
49886: PUSH
49887: LD_VAR 0 5
49891: ARRAY
49892: PPUSH
49893: LD_INT 1
49895: PPUSH
49896: LD_LOC 1
49900: PUSH
49901: LD_INT 1
49903: ARRAY
49904: PPUSH
49905: LD_INT 1
49907: PPUSH
49908: CALL_OW 260
49912: PPUSH
49913: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49917: LD_VAR 0 5
49921: PUSH
49922: LD_VAR 0 5
49926: ARRAY
49927: PPUSH
49928: LD_INT 2
49930: PPUSH
49931: LD_LOC 1
49935: PUSH
49936: LD_INT 1
49938: ARRAY
49939: PPUSH
49940: LD_INT 2
49942: PPUSH
49943: CALL_OW 260
49947: PPUSH
49948: CALL_OW 239
// end ; InitHc_All ( ) ;
49952: CALL_OW 584
// class := 2 ;
49956: LD_ADDR_VAR 0 8
49960: PUSH
49961: LD_INT 2
49963: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49964: LD_ADDR_VAR 0 6
49968: PUSH
49969: DOUBLE
49970: LD_INT 1
49972: DEC
49973: ST_TO_ADDR
49974: LD_VAR 0 3
49978: PUSH
49979: LD_INT 1
49981: MINUS
49982: PUSH
49983: FOR_TO
49984: IFFALSE 50179
// begin PrepareHuman ( false , class , skill ) ;
49986: LD_INT 0
49988: PPUSH
49989: LD_VAR 0 8
49993: PPUSH
49994: LD_VAR 0 4
49998: PPUSH
49999: CALL_OW 380
// un := CreateHuman ;
50003: LD_ADDR_VAR 0 7
50007: PUSH
50008: CALL_OW 44
50012: ST_TO_ADDR
// result := Join ( result , un ) ;
50013: LD_ADDR_VAR 0 5
50017: PUSH
50018: LD_VAR 0 5
50022: PPUSH
50023: LD_VAR 0 7
50027: PPUSH
50028: CALL 41789 0 2
50032: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
50033: LD_LOC 1
50037: PPUSH
50038: CALL 5823 0 1
50042: PUSH
50043: LD_VAR 0 3
50047: GREATEREQUAL
50048: IFFALSE 50144
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
50050: LD_LOC 1
50054: PUSH
50055: LD_VAR 0 6
50059: PUSH
50060: LD_INT 1
50062: PLUS
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 7
50069: PPUSH
50070: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
50074: LD_VAR 0 7
50078: PPUSH
50079: LD_INT 1
50081: PPUSH
50082: LD_LOC 1
50086: PUSH
50087: LD_VAR 0 6
50091: PUSH
50092: LD_INT 1
50094: PLUS
50095: ARRAY
50096: PPUSH
50097: LD_INT 1
50099: PPUSH
50100: CALL_OW 260
50104: PPUSH
50105: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
50109: LD_VAR 0 7
50113: PPUSH
50114: LD_INT 2
50116: PPUSH
50117: LD_LOC 1
50121: PUSH
50122: LD_VAR 0 6
50126: PUSH
50127: LD_INT 1
50129: PLUS
50130: ARRAY
50131: PPUSH
50132: LD_INT 2
50134: PPUSH
50135: CALL_OW 260
50139: PPUSH
50140: CALL_OW 239
// end ; class := Inc ( class ) ;
50144: LD_ADDR_VAR 0 8
50148: PUSH
50149: LD_VAR 0 8
50153: PPUSH
50154: CALL 43162 0 1
50158: ST_TO_ADDR
// if class = 5 then
50159: LD_VAR 0 8
50163: PUSH
50164: LD_INT 5
50166: EQUAL
50167: IFFALSE 50177
// class := 1 ;
50169: LD_ADDR_VAR 0 8
50173: PUSH
50174: LD_INT 1
50176: ST_TO_ADDR
// end ;
50177: GO 49983
50179: POP
50180: POP
// if not mpTeamPreset then
50181: LD_LOC 1
50185: NOT
50186: IFFALSE 50198
// mpTeamPreset := result ;
50188: LD_ADDR_LOC 1
50192: PUSH
50193: LD_VAR 0 5
50197: ST_TO_ADDR
// end ;
50198: LD_VAR 0 5
50202: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
50203: LD_INT 0
50205: PPUSH
50206: PPUSH
// result := [ ] ;
50207: LD_ADDR_VAR 0 4
50211: PUSH
50212: EMPTY
50213: ST_TO_ADDR
// if not vehicles then
50214: LD_VAR 0 3
50218: NOT
50219: IFFALSE 50223
// exit ;
50221: GO 50437
// for i := 1 to vehicles [ nation ] do
50223: LD_ADDR_VAR 0 5
50227: PUSH
50228: DOUBLE
50229: LD_INT 1
50231: DEC
50232: ST_TO_ADDR
50233: LD_VAR 0 3
50237: PUSH
50238: LD_VAR 0 2
50242: ARRAY
50243: PUSH
50244: FOR_TO
50245: IFFALSE 50435
// begin uc_side := side ;
50247: LD_ADDR_OWVAR 20
50251: PUSH
50252: LD_VAR 0 1
50256: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
50257: LD_VAR 0 3
50261: PUSH
50262: LD_VAR 0 2
50266: ARRAY
50267: PUSH
50268: LD_VAR 0 5
50272: ARRAY
50273: PPUSH
50274: CALL 5823 0 1
50278: PUSH
50279: LD_INT 4
50281: GREATER
50282: IFFALSE 50312
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
50284: LD_ADDR_OWVAR 21
50288: PUSH
50289: LD_VAR 0 3
50293: PUSH
50294: LD_VAR 0 2
50298: ARRAY
50299: PUSH
50300: LD_VAR 0 5
50304: ARRAY
50305: PUSH
50306: LD_INT 5
50308: ARRAY
50309: ST_TO_ADDR
50310: GO 50322
// uc_nation := nation ;
50312: LD_ADDR_OWVAR 21
50316: PUSH
50317: LD_VAR 0 2
50321: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
50322: LD_VAR 0 3
50326: PUSH
50327: LD_VAR 0 2
50331: ARRAY
50332: PUSH
50333: LD_VAR 0 5
50337: ARRAY
50338: PUSH
50339: LD_INT 1
50341: ARRAY
50342: PPUSH
50343: LD_VAR 0 3
50347: PUSH
50348: LD_VAR 0 2
50352: ARRAY
50353: PUSH
50354: LD_VAR 0 5
50358: ARRAY
50359: PUSH
50360: LD_INT 2
50362: ARRAY
50363: PPUSH
50364: LD_VAR 0 3
50368: PUSH
50369: LD_VAR 0 2
50373: ARRAY
50374: PUSH
50375: LD_VAR 0 5
50379: ARRAY
50380: PUSH
50381: LD_INT 3
50383: ARRAY
50384: PPUSH
50385: LD_VAR 0 3
50389: PUSH
50390: LD_VAR 0 2
50394: ARRAY
50395: PUSH
50396: LD_VAR 0 5
50400: ARRAY
50401: PUSH
50402: LD_INT 4
50404: ARRAY
50405: PPUSH
50406: LD_INT 80
50408: PPUSH
50409: CALL 8619 0 5
// result := Join ( result , CreateVehicle ) ;
50413: LD_ADDR_VAR 0 4
50417: PUSH
50418: LD_VAR 0 4
50422: PPUSH
50423: CALL_OW 45
50427: PPUSH
50428: CALL 41789 0 2
50432: ST_TO_ADDR
// end ;
50433: GO 50244
50435: POP
50436: POP
// end ;
50437: LD_VAR 0 4
50441: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
50442: LD_INT 0
50444: PPUSH
50445: PPUSH
// for i in mpBattleFlags do
50446: LD_ADDR_VAR 0 3
50450: PUSH
50451: LD_EXP 25
50455: PUSH
50456: FOR_IN
50457: IFFALSE 50534
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
50459: LD_VAR 0 3
50463: PPUSH
50464: LD_INT 1
50466: PUSH
50467: LD_VAR 0 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_VAR 0 1
50483: PUSH
50484: LD_REAL  7.00000000000000E-0001
50487: MUL
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_VAR 0 1
50500: PUSH
50501: LD_REAL  4.00000000000000E-0001
50504: MUL
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 20
50512: PUSH
50513: LD_VAR 0 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: PPUSH
50528: CALL_OW 423
50532: GO 50456
50534: POP
50535: POP
// end ;
50536: LD_VAR 0 2
50540: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50541: LD_INT 100
50543: IFFALSE 50638
50545: GO 50547
50547: DISABLE
50548: LD_INT 0
50550: PPUSH
50551: PPUSH
// begin if mpBattleFlag <= 0 then
50552: LD_EXP 24
50556: PUSH
50557: LD_INT 0
50559: LESSEQUAL
50560: IFFALSE 50564
// exit ;
50562: GO 50638
// strength := 100 ;
50564: LD_ADDR_VAR 0 2
50568: PUSH
50569: LD_INT 100
50571: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50572: LD_EXP 24
50576: PPUSH
50577: CALL_OW 67
// strength := Dec ( strength ) ;
50581: LD_ADDR_VAR 0 2
50585: PUSH
50586: LD_VAR 0 2
50590: PPUSH
50591: CALL 43184 0 1
50595: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50596: LD_VAR 0 2
50600: PPUSH
50601: CALL 50442 0 1
// until not strength ;
50605: LD_VAR 0 2
50609: NOT
50610: IFFALSE 50572
// for i in mpBattleFlags do
50612: LD_ADDR_VAR 0 1
50616: PUSH
50617: LD_EXP 25
50621: PUSH
50622: FOR_IN
50623: IFFALSE 50636
// KillBattleFlag ( i ) ;
50625: LD_VAR 0 1
50629: PPUSH
50630: CALL_OW 419
50634: GO 50622
50636: POP
50637: POP
// end ;
50638: PPOPN 2
50640: END
// every 0 0$1 marked mpActive do var side , tmp ;
50641: GO 50643
50643: DISABLE
50644: LD_INT 0
50646: PPUSH
50647: PPUSH
// begin if mpSibBomb <= 1 then
50648: LD_EXP 30
50652: PUSH
50653: LD_INT 1
50655: LESSEQUAL
50656: IFFALSE 50660
// exit ;
50658: GO 50733
// tmp := mpSibBomb ;
50660: LD_ADDR_VAR 0 2
50664: PUSH
50665: LD_EXP 30
50669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50670: LD_INT 35
50672: PPUSH
50673: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50677: LD_ADDR_VAR 0 2
50681: PUSH
50682: LD_VAR 0 2
50686: PUSH
50687: LD_INT 35
50689: MINUS
50690: ST_TO_ADDR
// until not tmp ;
50691: LD_VAR 0 2
50695: NOT
50696: IFFALSE 50670
// for side := 1 to 8 do
50698: LD_ADDR_VAR 0 1
50702: PUSH
50703: DOUBLE
50704: LD_INT 1
50706: DEC
50707: ST_TO_ADDR
50708: LD_INT 8
50710: PUSH
50711: FOR_TO
50712: IFFALSE 50731
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50714: LD_INT 25
50716: PPUSH
50717: LD_VAR 0 1
50721: PPUSH
50722: LD_INT 1
50724: PPUSH
50725: CALL_OW 322
50729: GO 50711
50731: POP
50732: POP
// end ;
50733: PPOPN 2
50735: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50736: LD_INT 0
50738: PPUSH
50739: PPUSH
50740: PPUSH
// mpBuildUpTimeDelay := 0 ;
50741: LD_ADDR_EXP 49
50745: PUSH
50746: LD_INT 0
50748: ST_TO_ADDR
// if not mpBuildUpTime then
50749: LD_EXP 22
50753: NOT
50754: IFFALSE 50758
// exit ;
50756: GO 50947
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50758: LD_ADDR_EXP 49
50762: PUSH
50763: LD_INT 8400
50765: PUSH
50766: LD_INT 2100
50768: PUSH
50769: LD_EXP 22
50773: MUL
50774: PLUS
50775: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50776: LD_ADDR_EXP 50
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// for i := 1 to 8 do
50784: LD_ADDR_VAR 0 2
50788: PUSH
50789: DOUBLE
50790: LD_INT 1
50792: DEC
50793: ST_TO_ADDR
50794: LD_INT 8
50796: PUSH
50797: FOR_TO
50798: IFFALSE 50945
// if mpSidePositions [ i ] then
50800: LD_EXP 9
50804: PUSH
50805: LD_VAR 0 2
50809: ARRAY
50810: IFFALSE 50943
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50812: LD_EXP 21
50816: PUSH
50817: LD_EXP 9
50821: PUSH
50822: LD_VAR 0 2
50826: ARRAY
50827: ARRAY
50828: PPUSH
50829: LD_INT 5
50831: PPUSH
50832: CALL_OW 424
// for j := 1 to 8 do
50836: LD_ADDR_VAR 0 3
50840: PUSH
50841: DOUBLE
50842: LD_INT 1
50844: DEC
50845: ST_TO_ADDR
50846: LD_INT 8
50848: PUSH
50849: FOR_TO
50850: IFFALSE 50941
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50852: LD_EXP 9
50856: PUSH
50857: LD_VAR 0 3
50861: ARRAY
50862: IFFALSE 50911
50864: PUSH
50865: LD_EXP 10
50869: PUSH
50870: LD_VAR 0 2
50874: ARRAY
50875: PUSH
50876: LD_EXP 10
50880: PUSH
50881: LD_VAR 0 3
50885: ARRAY
50886: NONEQUAL
50887: IFTRUE 50910
50889: PUSH
50890: LD_EXP 13
50894: NOT
50895: IFFALSE 50909
50897: PUSH
50898: LD_VAR 0 2
50902: PUSH
50903: LD_VAR 0 3
50907: NONEQUAL
50908: AND
50909: OR
50910: AND
50911: IFFALSE 50939
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50913: LD_VAR 0 3
50917: PPUSH
50918: LD_EXP 21
50922: PUSH
50923: LD_EXP 9
50927: PUSH
50928: LD_VAR 0 2
50932: ARRAY
50933: ARRAY
50934: PPUSH
50935: CALL_OW 333
50939: GO 50849
50941: POP
50942: POP
// end ;
50943: GO 50797
50945: POP
50946: POP
// end ;
50947: LD_VAR 0 1
50951: RET
// function EndBuildUp ; var i , j ; begin
50952: LD_INT 0
50954: PPUSH
50955: PPUSH
50956: PPUSH
// mpBuildUpTimeActive := false ;
50957: LD_ADDR_EXP 50
50961: PUSH
50962: LD_INT 0
50964: ST_TO_ADDR
// for i := 1 to 8 do
50965: LD_ADDR_VAR 0 2
50969: PUSH
50970: DOUBLE
50971: LD_INT 1
50973: DEC
50974: ST_TO_ADDR
50975: LD_INT 8
50977: PUSH
50978: FOR_TO
50979: IFFALSE 51126
// if mpSidePositions [ i ] then
50981: LD_EXP 9
50985: PUSH
50986: LD_VAR 0 2
50990: ARRAY
50991: IFFALSE 51124
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50993: LD_EXP 21
50997: PUSH
50998: LD_EXP 9
51002: PUSH
51003: LD_VAR 0 2
51007: ARRAY
51008: ARRAY
51009: PPUSH
51010: LD_INT 0
51012: PPUSH
51013: CALL_OW 424
// for j := 1 to 8 do
51017: LD_ADDR_VAR 0 3
51021: PUSH
51022: DOUBLE
51023: LD_INT 1
51025: DEC
51026: ST_TO_ADDR
51027: LD_INT 8
51029: PUSH
51030: FOR_TO
51031: IFFALSE 51122
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
51033: LD_EXP 9
51037: PUSH
51038: LD_VAR 0 3
51042: ARRAY
51043: IFFALSE 51092
51045: PUSH
51046: LD_EXP 10
51050: PUSH
51051: LD_VAR 0 2
51055: ARRAY
51056: PUSH
51057: LD_EXP 10
51061: PUSH
51062: LD_VAR 0 3
51066: ARRAY
51067: NONEQUAL
51068: IFTRUE 51091
51070: PUSH
51071: LD_EXP 13
51075: NOT
51076: IFFALSE 51090
51078: PUSH
51079: LD_VAR 0 2
51083: PUSH
51084: LD_VAR 0 3
51088: NONEQUAL
51089: AND
51090: OR
51091: AND
51092: IFFALSE 51120
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
51094: LD_VAR 0 3
51098: PPUSH
51099: LD_EXP 21
51103: PUSH
51104: LD_EXP 9
51108: PUSH
51109: LD_VAR 0 2
51113: ARRAY
51114: ARRAY
51115: PPUSH
51116: CALL_OW 334
51120: GO 51030
51122: POP
51123: POP
// end ;
51124: GO 50978
51126: POP
51127: POP
// end ;
51128: LD_VAR 0 1
51132: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
51133: LD_EXP 50
51137: IFFALSE 51316
51139: GO 51141
51141: DISABLE
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
// begin for i := 1 to 8 do
51146: LD_ADDR_VAR 0 1
51150: PUSH
51151: DOUBLE
51152: LD_INT 1
51154: DEC
51155: ST_TO_ADDR
51156: LD_INT 8
51158: PUSH
51159: FOR_TO
51160: IFFALSE 51313
// if mpSidePositions [ i ] then
51162: LD_EXP 9
51166: PUSH
51167: LD_VAR 0 1
51171: ARRAY
51172: IFFALSE 51311
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
51174: LD_ADDR_VAR 0 2
51178: PUSH
51179: LD_EXP 21
51183: PUSH
51184: LD_EXP 9
51188: PUSH
51189: LD_VAR 0 1
51193: ARRAY
51194: ARRAY
51195: PPUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 21
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 21
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 22
51226: PUSH
51227: LD_OWVAR 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PPUSH
51240: CALL_OW 70
51244: PUSH
51245: FOR_IN
51246: IFFALSE 51309
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
51248: LD_EXP 10
51252: PUSH
51253: LD_VAR 0 1
51257: ARRAY
51258: PUSH
51259: LD_EXP 10
51263: PUSH
51264: LD_OWVAR 2
51268: ARRAY
51269: NONEQUAL
51270: IFTRUE 51293
51272: PUSH
51273: LD_EXP 13
51277: NOT
51278: IFFALSE 51292
51280: PUSH
51281: LD_VAR 0 1
51285: PUSH
51286: LD_OWVAR 2
51290: NONEQUAL
51291: AND
51292: OR
51293: IFFALSE 51307
// ComMoveToArea ( un , BuildUpEscape ) ;
51295: LD_VAR 0 2
51299: PPUSH
51300: LD_INT 9
51302: PPUSH
51303: CALL_OW 113
51307: GO 51245
51309: POP
51310: POP
51311: GO 51159
51313: POP
51314: POP
// enable ;
51315: ENABLE
// end ;
51316: PPOPN 2
51318: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
51319: LD_EXP 22
51323: IFFALSE 51373
51325: GO 51327
51327: DISABLE
51328: LD_INT 0
51330: PPUSH
// begin tmp := mpBuildUpTime ;
51331: LD_ADDR_VAR 0 1
51335: PUSH
51336: LD_EXP 22
51340: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51341: LD_INT 35
51343: PPUSH
51344: CALL_OW 67
// tmp := tmp - 0 0$1 ;
51348: LD_ADDR_VAR 0 1
51352: PUSH
51353: LD_VAR 0 1
51357: PUSH
51358: LD_INT 35
51360: MINUS
51361: ST_TO_ADDR
// until not tmp ;
51362: LD_VAR 0 1
51366: NOT
51367: IFFALSE 51341
// EndBuildUp ;
51369: CALL 50952 0 0
// end ;
51373: PPOPN 1
51375: END
// every 0 0$1 trigger mpActive marked mpWin do
51376: LD_INT 100
51378: IFFALSE 51412
51380: GO 51382
51382: DISABLE
// begin if IAmServer then
51383: CALL_OW 518
51387: IFFALSE 51396
// wait ( 0 0$3 ) ;
51389: LD_INT 105
51391: PPUSH
51392: CALL_OW 67
// if Multiplayer then
51396: LD_OWVAR 4
51400: IFFALSE 51408
// YouWinInMultiplayer else
51402: CALL_OW 106
51406: GO 51412
// YouWin ;
51408: CALL_OW 103
// end ;
51412: END
// export function HasPowerByGameType ( gameType , side ) ; begin
51413: LD_INT 0
51415: PPUSH
// result := false ;
51416: LD_ADDR_VAR 0 3
51420: PUSH
51421: LD_INT 0
51423: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
51424: LD_VAR 0 1
51428: PUSH
51429: LD_INT 1
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51455
51435: LD_INT 5
51437: DOUBLE
51438: EQUAL
51439: IFTRUE 51455
51441: LD_INT 6
51443: DOUBLE
51444: EQUAL
51445: IFTRUE 51455
51447: LD_INT 7
51449: DOUBLE
51450: EQUAL
51451: IFTRUE 51455
51453: GO 51528
51455: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51456: LD_ADDR_VAR 0 3
51460: PUSH
51461: LD_INT 22
51463: PUSH
51464: LD_VAR 0 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: LD_INT 21
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 33
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 33
51498: PUSH
51499: LD_INT 5
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PPUSH
51516: CALL_OW 69
51520: PPUSH
51521: CALL 5823 0 1
51525: ST_TO_ADDR
// end ; GameTypeSurvival :
51526: GO 51767
51528: LD_INT 2
51530: DOUBLE
51531: EQUAL
51532: IFTRUE 51536
51534: GO 51666
51536: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51537: LD_ADDR_VAR 0 3
51541: PUSH
51542: LD_INT 22
51544: PUSH
51545: LD_VAR 0 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 30
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 30
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PPUSH
51586: CALL_OW 69
51590: PPUSH
51591: CALL 5823 0 1
51595: IFFALSE 51663
51597: PUSH
51598: LD_INT 22
51600: PUSH
51601: LD_VAR 0 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 21
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 33
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 33
51635: PUSH
51636: LD_INT 5
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PPUSH
51653: CALL_OW 69
51657: PPUSH
51658: CALL 5823 0 1
51662: AND
51663: ST_TO_ADDR
// end ; GameTypeKing :
51664: GO 51767
51666: LD_INT 3
51668: DOUBLE
51669: EQUAL
51670: IFTRUE 51674
51672: GO 51766
51674: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: LD_INT 22
51682: PUSH
51683: LD_VAR 0 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 21
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 33
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 33
51717: PUSH
51718: LD_INT 5
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PPUSH
51735: CALL_OW 69
51739: PPUSH
51740: CALL 5823 0 1
51744: IFFALSE 51763
51746: PUSH
51747: LD_VAR 0 2
51751: PPUSH
51752: CALL 56049 0 1
51756: PUSH
51757: LD_EXP 37
51761: LESS
51762: AND
51763: ST_TO_ADDR
// end ; end ;
51764: GO 51767
51766: POP
// end ;
51767: LD_VAR 0 3
51771: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51772: LD_INT 100
51774: IFFALSE 52004
51776: GO 51778
51778: DISABLE
51779: LD_INT 0
51781: PPUSH
51782: PPUSH
// begin if Multiplayer then
51783: LD_OWVAR 4
51787: IFFALSE 51795
// SetPlayerSpectator ( ) else
51789: CALL_OW 572
51793: GO 51804
// FogOff ( your_side ) ;
51795: LD_OWVAR 2
51799: PPUSH
51800: CALL_OW 344
// repeat gameIsOn := false ;
51804: LD_ADDR_VAR 0 1
51808: PUSH
51809: LD_INT 0
51811: ST_TO_ADDR
// for i := 1 to 8 do
51812: LD_ADDR_VAR 0 2
51816: PUSH
51817: DOUBLE
51818: LD_INT 1
51820: DEC
51821: ST_TO_ADDR
51822: LD_INT 8
51824: PUSH
51825: FOR_TO
51826: IFFALSE 51956
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51828: LD_EXP 9
51832: PUSH
51833: LD_VAR 0 2
51837: ARRAY
51838: IFFALSE 51851
51840: PUSH
51841: LD_VAR 0 2
51845: PPUSH
51846: CALL_OW 108
51850: AND
51851: IFFALSE 51865
51853: PUSH
51854: LD_VAR 0 2
51858: PUSH
51859: LD_OWVAR 2
51863: NONEQUAL
51864: AND
51865: IFFALSE 51954
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51867: LD_EXP 10
51871: PUSH
51872: LD_VAR 0 2
51876: ARRAY
51877: NOT
51878: IFTRUE 51926
51880: PUSH
51881: LD_EXP 10
51885: PUSH
51886: LD_VAR 0 2
51890: ARRAY
51891: PUSH
51892: LD_EXP 10
51896: PUSH
51897: LD_OWVAR 2
51901: ARRAY
51902: NONEQUAL
51903: IFFALSE 51925
51905: PUSH
51906: LD_OWVAR 2
51910: PPUSH
51911: LD_VAR 0 2
51915: PPUSH
51916: CALL_OW 81
51920: PUSH
51921: LD_INT 1
51923: NONEQUAL
51924: AND
51925: OR
51926: IFFALSE 51954
// if HasPowerByGameType ( mpGameType , i ) then
51928: LD_EXP 5
51932: PPUSH
51933: LD_VAR 0 2
51937: PPUSH
51938: CALL 51413 0 2
51942: IFFALSE 51954
// begin gameIsOn := true ;
51944: LD_ADDR_VAR 0 1
51948: PUSH
51949: LD_INT 1
51951: ST_TO_ADDR
// break ;
51952: GO 51956
// end ;
51954: GO 51825
51956: POP
51957: POP
// wait ( 100 ) ;
51958: LD_INT 100
51960: PPUSH
51961: CALL_OW 67
// until not gameIsOn ;
51965: LD_VAR 0 1
51969: NOT
51970: IFFALSE 51804
// if IAmServer then
51972: CALL_OW 518
51976: IFFALSE 51985
// wait ( 0 0$3 ) ;
51978: LD_INT 105
51980: PPUSH
51981: CALL_OW 67
// if Multiplayer then
51985: LD_OWVAR 4
51989: IFFALSE 51997
// YouLostInMultiplayer else
51991: CALL_OW 107
51995: GO 52004
// YouLost (  ) ;
51997: LD_STRING 
51999: PPUSH
52000: CALL_OW 104
// end ;
52004: PPOPN 2
52006: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
52007: LD_EXP 35
52011: IFFALSE 52395
52013: GO 52015
52015: DISABLE
52016: LD_INT 0
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
52023: LD_ADDR_VAR 0 5
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: LD_INT 4
52039: PUSH
52040: LD_INT 5
52042: PUSH
52043: LD_INT 6
52045: PUSH
52046: LD_INT 7
52048: PUSH
52049: LD_INT 8
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
52062: LD_INT 350
52064: PPUSH
52065: CALL_OW 67
// for i := 1 to 8 do
52069: LD_ADDR_VAR 0 1
52073: PUSH
52074: DOUBLE
52075: LD_INT 1
52077: DEC
52078: ST_TO_ADDR
52079: LD_INT 8
52081: PUSH
52082: FOR_TO
52083: IFFALSE 52365
// begin j := sides [ i ] ;
52085: LD_ADDR_VAR 0 2
52089: PUSH
52090: LD_VAR 0 5
52094: PUSH
52095: LD_VAR 0 1
52099: ARRAY
52100: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
52101: LD_EXP 42
52105: PUSH
52106: LD_VAR 0 2
52110: ARRAY
52111: PPUSH
52112: CALL 5823 0 1
52116: IFFALSE 52129
52118: PUSH
52119: LD_VAR 0 2
52123: PPUSH
52124: CALL_OW 108
52128: AND
52129: IFFALSE 52147
52131: PUSH
52132: LD_EXP 5
52136: PPUSH
52137: LD_VAR 0 2
52141: PPUSH
52142: CALL 51413 0 2
52146: AND
52147: IFFALSE 52363
// begin wait ( mpRespawn div 2 ) ;
52149: LD_EXP 35
52153: PUSH
52154: LD_INT 2
52156: DIV
52157: PPUSH
52158: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52162: LD_ADDR_VAR 0 3
52166: PUSH
52167: LD_INT 22
52169: PUSH
52170: LD_VAR 0 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 50
52181: PUSH
52182: EMPTY
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 30
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 30
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: PPUSH
52218: CALL_OW 69
52222: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
52223: LD_VAR 0 3
52227: NOT
52228: IFTRUE 52242
52230: PUSH
52231: LD_VAR 0 2
52235: PPUSH
52236: CALL_OW 108
52240: NOT
52241: OR
52242: IFTRUE 52261
52244: PUSH
52245: LD_EXP 5
52249: PPUSH
52250: LD_VAR 0 2
52254: PPUSH
52255: CALL 51413 0 2
52259: NOT
52260: OR
52261: IFFALSE 52265
// continue ;
52263: GO 52082
// spawn := tmp [ 1 ] ;
52265: LD_ADDR_VAR 0 4
52269: PUSH
52270: LD_VAR 0 3
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
52279: LD_EXP 42
52283: PUSH
52284: LD_VAR 0 2
52288: ARRAY
52289: PUSH
52290: LD_INT 1
52292: ARRAY
52293: PPUSH
52294: LD_VAR 0 4
52298: PPUSH
52299: CALL_OW 250
52303: PPUSH
52304: LD_VAR 0 4
52308: PPUSH
52309: CALL_OW 251
52313: PPUSH
52314: LD_INT 32
52316: PPUSH
52317: LD_INT 1
52319: PPUSH
52320: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52324: LD_ADDR_EXP 42
52328: PUSH
52329: LD_EXP 42
52333: PPUSH
52334: LD_VAR 0 2
52338: PPUSH
52339: LD_EXP 42
52343: PUSH
52344: LD_VAR 0 2
52348: ARRAY
52349: PPUSH
52350: LD_INT 1
52352: PPUSH
52353: CALL_OW 3
52357: PPUSH
52358: CALL_OW 1
52362: ST_TO_ADDR
// end ; end ;
52363: GO 52082
52365: POP
52366: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52367: LD_ADDR_VAR 0 5
52371: PUSH
52372: LD_VAR 0 5
52376: PPUSH
52377: LD_INT 1
52379: PPUSH
52380: LD_INT 8
52382: PPUSH
52383: LD_INT 1
52385: PPUSH
52386: CALL 8149 0 4
52390: ST_TO_ADDR
// until false ;
52391: LD_INT 0
52393: IFFALSE 52062
// end ;
52395: PPOPN 5
52397: END
// every 0 0$1 marked mpActive do
52398: GO 52400
52400: DISABLE
// begin enable ;
52401: ENABLE
// if not mpDisplayStrings then
52402: LD_EXP 40
52406: NOT
52407: IFFALSE 52418
// begin display_strings := [ ] ;
52409: LD_ADDR_OWVAR 47
52413: PUSH
52414: EMPTY
52415: ST_TO_ADDR
// exit ;
52416: GO 52428
// end ; display_strings := mpDisplayStrings ;
52418: LD_ADDR_OWVAR 47
52422: PUSH
52423: LD_EXP 40
52427: ST_TO_ADDR
// end ; end_of_file
52428: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52429: LD_INT 0
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
// if GetType ( un ) = unit_vehicle then
52440: LD_VAR 0 1
52444: PPUSH
52445: CALL_OW 247
52449: PUSH
52450: LD_INT 2
52452: EQUAL
52453: IFFALSE 52457
// exit ;
52455: GO 53131
// side := GetSide ( un ) ;
52457: LD_ADDR_VAR 0 9
52461: PUSH
52462: LD_VAR 0 1
52466: PPUSH
52467: CALL_OW 255
52471: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
52472: LD_EXP 5
52476: PUSH
52477: LD_INT 2
52479: EQUAL
52480: IFFALSE 52574
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52482: LD_VAR 0 1
52486: PPUSH
52487: CALL_OW 266
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: IN
52502: IFFALSE 52574
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52504: LD_ADDR_VAR 0 3
52508: PUSH
52509: LD_INT 22
52511: PUSH
52512: LD_VAR 0 9
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 21
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 33
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PPUSH
52553: CALL_OW 69
52557: PUSH
52558: FOR_IN
52559: IFFALSE 52572
// KillUnit ( i ) ;
52561: LD_VAR 0 3
52565: PPUSH
52566: CALL_OW 66
52570: GO 52558
52572: POP
52573: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 257
52583: PUSH
52584: LD_INT 12
52586: PUSH
52587: LD_INT 17
52589: PUSH
52590: LD_INT 15
52592: PUSH
52593: LD_INT 16
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: IN
52602: IFTRUE 52619
52604: PUSH
52605: LD_VAR 0 1
52609: PPUSH
52610: CALL_OW 263
52614: PUSH
52615: LD_INT 5
52617: EQUAL
52618: OR
52619: IFFALSE 52856
// begin tag := 0 ;
52621: LD_ADDR_VAR 0 5
52625: PUSH
52626: LD_INT 0
52628: ST_TO_ADDR
// for i := 1 to 8 do
52629: LD_ADDR_VAR 0 3
52633: PUSH
52634: DOUBLE
52635: LD_INT 1
52637: DEC
52638: ST_TO_ADDR
52639: LD_INT 8
52641: PUSH
52642: FOR_TO
52643: IFFALSE 52677
// if un in mpApePosIndex [ i ] then
52645: LD_VAR 0 1
52649: PUSH
52650: LD_EXP 34
52654: PUSH
52655: LD_VAR 0 3
52659: ARRAY
52660: IN
52661: IFFALSE 52675
// begin tag := i ;
52663: LD_ADDR_VAR 0 5
52667: PUSH
52668: LD_VAR 0 3
52672: ST_TO_ADDR
// break ;
52673: GO 52677
// end ;
52675: GO 52642
52677: POP
52678: POP
// if not tag then
52679: LD_VAR 0 5
52683: NOT
52684: IFFALSE 52688
// exit ;
52686: GO 53131
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52688: LD_ADDR_VAR 0 7
52692: PUSH
52693: LD_EXP 33
52697: PUSH
52698: LD_EXP 9
52702: PUSH
52703: LD_VAR 0 5
52707: ARRAY
52708: ARRAY
52709: ST_TO_ADDR
// if not area then
52710: LD_VAR 0 7
52714: NOT
52715: IFFALSE 52719
// exit ;
52717: GO 53131
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52719: LD_INT 14700
52721: PUSH
52722: LD_VAR 0 1
52726: PUSH
52727: LD_INT 5
52729: MOD
52730: PUSH
52731: LD_INT 1
52733: PLUS
52734: PUSH
52735: LD_INT 700
52737: MUL
52738: PLUS
52739: PPUSH
52740: CALL_OW 67
// repeat wait ( 10 ) ;
52744: LD_INT 10
52746: PPUSH
52747: CALL_OW 67
// until not mpBlockRespThread ;
52751: LD_EXP 48
52755: NOT
52756: IFFALSE 52744
// mpBlockRespThread := true ;
52758: LD_ADDR_EXP 48
52762: PUSH
52763: LD_INT 1
52765: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52766: LD_INT 0
52768: PPUSH
52769: CALL 37916 0 1
// ape := CreateHuman ;
52773: LD_ADDR_VAR 0 4
52777: PUSH
52778: CALL_OW 44
52782: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52783: LD_ADDR_EXP 34
52787: PUSH
52788: LD_EXP 34
52792: PPUSH
52793: LD_VAR 0 5
52797: PPUSH
52798: LD_EXP 34
52802: PUSH
52803: LD_VAR 0 5
52807: ARRAY
52808: PPUSH
52809: LD_VAR 0 4
52813: PPUSH
52814: CALL 41789 0 2
52818: PPUSH
52819: CALL_OW 1
52823: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52824: LD_VAR 0 4
52828: PPUSH
52829: LD_VAR 0 7
52833: PPUSH
52834: LD_INT 0
52836: PPUSH
52837: CALL_OW 49
// wait ( 10 ) ;
52841: LD_INT 10
52843: PPUSH
52844: CALL_OW 67
// mpBlockRespThread := false ;
52848: LD_ADDR_EXP 48
52852: PUSH
52853: LD_INT 0
52855: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52856: LD_VAR 0 1
52860: PPUSH
52861: CALL_OW 247
52865: PUSH
52866: LD_INT 1
52868: EQUAL
52869: IFFALSE 52886
52871: PUSH
52872: LD_VAR 0 1
52876: PPUSH
52877: CALL_OW 248
52881: PUSH
52882: LD_INT 0
52884: GREATER
52885: AND
52886: IFFALSE 53131
// begin if not mpRespawn then
52888: LD_EXP 35
52892: NOT
52893: IFFALSE 52897
// exit ;
52895: GO 53131
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52897: LD_VAR 0 9
52901: PPUSH
52902: CALL_OW 108
52906: NOT
52907: IFFALSE 52926
52909: PUSH
52910: LD_EXP 5
52914: PPUSH
52915: LD_VAR 0 9
52919: PPUSH
52920: CALL 51413 0 2
52924: NOT
52925: AND
52926: IFFALSE 52930
// exit ;
52928: GO 53131
// side := GetSide ( un ) ;
52930: LD_ADDR_VAR 0 9
52934: PUSH
52935: LD_VAR 0 1
52939: PPUSH
52940: CALL_OW 255
52944: ST_TO_ADDR
// nation := GetNation ( un ) ;
52945: LD_ADDR_VAR 0 8
52949: PUSH
52950: LD_VAR 0 1
52954: PPUSH
52955: CALL_OW 248
52959: ST_TO_ADDR
// class := GetClass ( un ) ;
52960: LD_ADDR_VAR 0 6
52964: PUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 257
52974: ST_TO_ADDR
// if class > 4 then
52975: LD_VAR 0 6
52979: PUSH
52980: LD_INT 4
52982: GREATER
52983: IFFALSE 52993
// class := 1 ;
52985: LD_ADDR_VAR 0 6
52989: PUSH
52990: LD_INT 1
52992: ST_TO_ADDR
// repeat wait ( 10 ) ;
52993: LD_INT 10
52995: PPUSH
52996: CALL_OW 67
// until not mpBlockRespThread ;
53000: LD_EXP 48
53004: NOT
53005: IFFALSE 52993
// mpBlockRespThread := true ;
53007: LD_ADDR_EXP 48
53011: PUSH
53012: LD_INT 1
53014: ST_TO_ADDR
// uc_side := side ;
53015: LD_ADDR_OWVAR 20
53019: PUSH
53020: LD_VAR 0 9
53024: ST_TO_ADDR
// uc_nation := nation ;
53025: LD_ADDR_OWVAR 21
53029: PUSH
53030: LD_VAR 0 8
53034: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
53035: LD_INT 0
53037: PPUSH
53038: LD_VAR 0 6
53042: PPUSH
53043: LD_INT 2
53045: PPUSH
53046: CALL_OW 380
// un := CreateHuman ;
53050: LD_ADDR_VAR 0 1
53054: PUSH
53055: CALL_OW 44
53059: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
53060: LD_ADDR_EXP 42
53064: PUSH
53065: LD_EXP 42
53069: PPUSH
53070: LD_VAR 0 9
53074: PPUSH
53075: LD_EXP 42
53079: PUSH
53080: LD_VAR 0 9
53084: ARRAY
53085: PPUSH
53086: LD_EXP 42
53090: PUSH
53091: LD_VAR 0 9
53095: ARRAY
53096: PUSH
53097: LD_INT 1
53099: PLUS
53100: PPUSH
53101: LD_VAR 0 1
53105: PPUSH
53106: CALL_OW 1
53110: PPUSH
53111: CALL_OW 1
53115: ST_TO_ADDR
// wait ( 10 ) ;
53116: LD_INT 10
53118: PPUSH
53119: CALL_OW 67
// mpBlockRespThread := false ;
53123: LD_ADDR_EXP 48
53127: PUSH
53128: LD_INT 0
53130: ST_TO_ADDR
// end ; end ;
53131: LD_VAR 0 2
53135: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53136: LD_INT 0
53138: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53139: LD_VAR 0 1
53143: PPUSH
53144: CALL_OW 266
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: IN
53159: IFFALSE 53184
// SetBName ( building , @ & GetSide ( building ) ) ;
53161: LD_VAR 0 1
53165: PPUSH
53166: LD_STRING @
53168: PUSH
53169: LD_VAR 0 1
53173: PPUSH
53174: CALL_OW 255
53178: STR
53179: PPUSH
53180: CALL_OW 500
// end ;
53184: LD_VAR 0 2
53188: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53189: LD_INT 0
53191: PPUSH
53192: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
53193: LD_EXP 5
53197: PUSH
53198: LD_INT 2
53200: EQUAL
53201: IFFALSE 53225
53203: PUSH
53204: LD_VAR 0 1
53208: PPUSH
53209: CALL_OW 266
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: IN
53224: AND
53225: IFFALSE 53304
// begin SetSide ( building , oldSide ) ;
53227: LD_VAR 0 1
53231: PPUSH
53232: LD_VAR 0 2
53236: PPUSH
53237: CALL_OW 235
// KillUnit ( building ) ;
53241: LD_VAR 0 1
53245: PPUSH
53246: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53250: LD_ADDR_VAR 0 5
53254: PUSH
53255: LD_INT 22
53257: PUSH
53258: LD_VAR 0 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 21
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PPUSH
53281: CALL_OW 69
53285: PUSH
53286: FOR_IN
53287: IFFALSE 53300
// KillUnit ( i ) ;
53289: LD_VAR 0 5
53293: PPUSH
53294: CALL_OW 66
53298: GO 53286
53300: POP
53301: POP
// exit ;
53302: GO 53349
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53304: LD_VAR 0 1
53308: PPUSH
53309: CALL_OW 266
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: IN
53324: IFFALSE 53349
// SetBName ( building , @ & GetSide ( building ) ) ;
53326: LD_VAR 0 1
53330: PPUSH
53331: LD_STRING @
53333: PUSH
53334: LD_VAR 0 1
53338: PPUSH
53339: CALL_OW 255
53343: STR
53344: PPUSH
53345: CALL_OW 500
// end ;
53349: LD_VAR 0 4
53353: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53354: LD_INT 0
53356: PPUSH
53357: PPUSH
53358: PPUSH
// if mpGameType <> GameTypeFamine then
53359: LD_EXP 5
53363: PUSH
53364: LD_INT 5
53366: NONEQUAL
53367: IFFALSE 53371
// exit ;
53369: GO 53586
// for i := 1 to mpGlobalOilDeposits do
53371: LD_ADDR_VAR 0 6
53375: PUSH
53376: DOUBLE
53377: LD_INT 1
53379: DEC
53380: ST_TO_ADDR
53381: LD_EXP 43
53385: PUSH
53386: FOR_TO
53387: IFFALSE 53584
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53389: LD_EXP 43
53393: PUSH
53394: LD_VAR 0 6
53398: ARRAY
53399: PUSH
53400: LD_INT 1
53402: ARRAY
53403: PPUSH
53404: LD_EXP 43
53408: PUSH
53409: LD_VAR 0 6
53413: ARRAY
53414: PUSH
53415: LD_INT 2
53417: ARRAY
53418: PPUSH
53419: CALL_OW 428
53423: PUSH
53424: LD_VAR 0 1
53428: EQUAL
53429: IFFALSE 53582
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53431: LD_ADDR_VAR 0 7
53435: PUSH
53436: LD_EXP 43
53440: PUSH
53441: LD_VAR 0 6
53445: ARRAY
53446: PUSH
53447: LD_INT 3
53449: ARRAY
53450: ST_TO_ADDR
// value := value - amount ;
53451: LD_ADDR_VAR 0 7
53455: PUSH
53456: LD_VAR 0 7
53460: PUSH
53461: LD_VAR 0 4
53465: MINUS
53466: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53467: LD_ADDR_EXP 43
53471: PUSH
53472: LD_EXP 43
53476: PPUSH
53477: LD_VAR 0 6
53481: PPUSH
53482: LD_EXP 43
53486: PUSH
53487: LD_VAR 0 6
53491: ARRAY
53492: PPUSH
53493: LD_INT 3
53495: PPUSH
53496: LD_VAR 0 7
53500: PPUSH
53501: CALL_OW 1
53505: PPUSH
53506: CALL_OW 1
53510: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53511: LD_VAR 0 1
53515: PPUSH
53516: LD_VAR 0 7
53520: PPUSH
53521: CALL_OW 505
// if value <= 0 then
53525: LD_VAR 0 7
53529: PUSH
53530: LD_INT 0
53532: LESSEQUAL
53533: IFFALSE 53582
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53535: LD_EXP 43
53539: PUSH
53540: LD_VAR 0 6
53544: ARRAY
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PPUSH
53550: LD_EXP 43
53554: PUSH
53555: LD_VAR 0 6
53559: ARRAY
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: PPUSH
53565: CALL_OW 63
// KillUnit ( building ) ;
53569: LD_VAR 0 1
53573: PPUSH
53574: CALL_OW 66
// exit ;
53578: POP
53579: POP
53580: GO 53586
// end ; end ; end ;
53582: GO 53386
53584: POP
53585: POP
// end ;
53586: LD_VAR 0 5
53590: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53591: LD_INT 0
53593: PPUSH
53594: PPUSH
53595: PPUSH
// if mpGameType <> GameTypeFamine then
53596: LD_EXP 5
53600: PUSH
53601: LD_INT 5
53603: NONEQUAL
53604: IFFALSE 53608
// exit ;
53606: GO 53823
// for i := 1 to mpGlobalSibDeposits do
53608: LD_ADDR_VAR 0 6
53612: PUSH
53613: DOUBLE
53614: LD_INT 1
53616: DEC
53617: ST_TO_ADDR
53618: LD_EXP 44
53622: PUSH
53623: FOR_TO
53624: IFFALSE 53821
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53626: LD_EXP 44
53630: PUSH
53631: LD_VAR 0 6
53635: ARRAY
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PPUSH
53641: LD_EXP 44
53645: PUSH
53646: LD_VAR 0 6
53650: ARRAY
53651: PUSH
53652: LD_INT 2
53654: ARRAY
53655: PPUSH
53656: CALL_OW 428
53660: PUSH
53661: LD_VAR 0 1
53665: EQUAL
53666: IFFALSE 53819
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53668: LD_ADDR_VAR 0 7
53672: PUSH
53673: LD_EXP 44
53677: PUSH
53678: LD_VAR 0 6
53682: ARRAY
53683: PUSH
53684: LD_INT 3
53686: ARRAY
53687: ST_TO_ADDR
// value := value - amount ;
53688: LD_ADDR_VAR 0 7
53692: PUSH
53693: LD_VAR 0 7
53697: PUSH
53698: LD_VAR 0 4
53702: MINUS
53703: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53704: LD_ADDR_EXP 44
53708: PUSH
53709: LD_EXP 44
53713: PPUSH
53714: LD_VAR 0 6
53718: PPUSH
53719: LD_EXP 44
53723: PUSH
53724: LD_VAR 0 6
53728: ARRAY
53729: PPUSH
53730: LD_INT 3
53732: PPUSH
53733: LD_VAR 0 7
53737: PPUSH
53738: CALL_OW 1
53742: PPUSH
53743: CALL_OW 1
53747: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53748: LD_VAR 0 1
53752: PPUSH
53753: LD_VAR 0 7
53757: PPUSH
53758: CALL_OW 505
// if value <= 0 then
53762: LD_VAR 0 7
53766: PUSH
53767: LD_INT 0
53769: LESSEQUAL
53770: IFFALSE 53819
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53772: LD_EXP 44
53776: PUSH
53777: LD_VAR 0 6
53781: ARRAY
53782: PUSH
53783: LD_INT 1
53785: ARRAY
53786: PPUSH
53787: LD_EXP 44
53791: PUSH
53792: LD_VAR 0 6
53796: ARRAY
53797: PUSH
53798: LD_INT 2
53800: ARRAY
53801: PPUSH
53802: CALL_OW 63
// KillUnit ( building ) ;
53806: LD_VAR 0 1
53810: PPUSH
53811: CALL_OW 66
// exit ;
53815: POP
53816: POP
53817: GO 53823
// end ; end ; end ;
53819: GO 53623
53821: POP
53822: POP
// end ;
53823: LD_VAR 0 5
53827: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53828: LD_INT 0
53830: PPUSH
53831: PPUSH
// side := GetSide ( factory ) ;
53832: LD_ADDR_VAR 0 7
53836: PUSH
53837: LD_VAR 0 1
53841: PPUSH
53842: CALL_OW 255
53846: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53847: LD_VAR 0 5
53851: PUSH
53852: LD_INT 81
53854: EQUAL
53855: IFFALSE 53893
53857: PUSH
53858: LD_INT 22
53860: PUSH
53861: LD_VAR 0 7
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 34
53872: PUSH
53873: LD_INT 81
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PPUSH
53884: CALL_OW 69
53888: PUSH
53889: LD_INT 0
53891: GREATER
53892: AND
53893: IFFALSE 53926
// begin ComCancel ( factory ) ;
53895: LD_VAR 0 1
53899: PPUSH
53900: CALL_OW 127
// if side = your_side then
53904: LD_VAR 0 7
53908: PUSH
53909: LD_OWVAR 2
53913: EQUAL
53914: IFFALSE 53926
// HintSpec ( VehLimit , 2 ) ;
53916: LD_STRING VehLimit
53918: PPUSH
53919: LD_INT 2
53921: PPUSH
53922: CALL_OW 338
// end ; end ;
53926: LD_VAR 0 6
53930: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
53935: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53936: LD_VAR 0 1
53940: PPUSH
53941: CALL_OW 264
53945: PUSH
53946: LD_INT 81
53948: EQUAL
53949: IFFALSE 53966
53951: PUSH
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL_OW 263
53961: PUSH
53962: LD_INT 1
53964: EQUAL
53965: AND
53966: IFFALSE 54246
// begin for i := 1 to Count ( minersList ) do
53968: LD_ADDR_VAR 0 6
53972: PUSH
53973: DOUBLE
53974: LD_INT 1
53976: DEC
53977: ST_TO_ADDR
53978: LD_EXP 59
53982: PPUSH
53983: CALL 5823 0 1
53987: PUSH
53988: FOR_TO
53989: IFFALSE 54107
// begin if minersList [ i ] = oldId then
53991: LD_EXP 59
53995: PUSH
53996: LD_VAR 0 6
54000: ARRAY
54001: PUSH
54002: LD_VAR 0 2
54006: EQUAL
54007: IFFALSE 54105
// begin for j := 1 to minerMinesList [ i ] do
54009: LD_ADDR_VAR 0 7
54013: PUSH
54014: DOUBLE
54015: LD_INT 1
54017: DEC
54018: ST_TO_ADDR
54019: LD_EXP 60
54023: PUSH
54024: LD_VAR 0 6
54028: ARRAY
54029: PUSH
54030: FOR_TO
54031: IFFALSE 54081
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54033: LD_EXP 60
54037: PUSH
54038: LD_VAR 0 6
54042: ARRAY
54043: PUSH
54044: LD_VAR 0 7
54048: ARRAY
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: PPUSH
54054: LD_EXP 60
54058: PUSH
54059: LD_VAR 0 6
54063: ARRAY
54064: PUSH
54065: LD_VAR 0 7
54069: ARRAY
54070: PUSH
54071: LD_INT 2
54073: ARRAY
54074: PPUSH
54075: CALL_OW 612
54079: GO 54030
54081: POP
54082: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54083: LD_ADDR_EXP 60
54087: PUSH
54088: LD_EXP 60
54092: PPUSH
54093: LD_VAR 0 6
54097: PPUSH
54098: CALL_OW 3
54102: ST_TO_ADDR
// break ;
54103: GO 54107
// end ; end ;
54105: GO 53988
54107: POP
54108: POP
// minersList := minersList diff oldId ;
54109: LD_ADDR_EXP 59
54113: PUSH
54114: LD_EXP 59
54118: PUSH
54119: LD_VAR 0 2
54123: DIFF
54124: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54125: LD_INT 22
54127: PUSH
54128: LD_VAR 0 4
54132: PPUSH
54133: CALL_OW 255
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 34
54144: PUSH
54145: LD_INT 81
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PPUSH
54156: CALL_OW 69
54160: PUSH
54161: LD_INT 1
54163: GREATER
54164: IFFALSE 54191
// begin ComExit ( unit ) ;
54166: LD_VAR 0 4
54170: PPUSH
54171: CALL 42187 0 1
// SetSide ( newId , oldSide ) ;
54175: LD_VAR 0 1
54179: PPUSH
54180: LD_VAR 0 3
54184: PPUSH
54185: CALL_OW 235
// exit ;
54189: GO 54246
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54191: LD_ADDR_EXP 59
54195: PUSH
54196: LD_EXP 59
54200: PPUSH
54201: LD_EXP 59
54205: PUSH
54206: LD_INT 1
54208: PLUS
54209: PPUSH
54210: LD_VAR 0 1
54214: PPUSH
54215: CALL_OW 1
54219: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54220: LD_ADDR_EXP 60
54224: PUSH
54225: LD_EXP 60
54229: PPUSH
54230: LD_EXP 60
54234: PUSH
54235: LD_INT 1
54237: PLUS
54238: PPUSH
54239: EMPTY
54240: PPUSH
54241: CALL_OW 1
54245: ST_TO_ADDR
// end ; end ; end_of_file
54246: LD_VAR 0 5
54250: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54251: LD_EXP 41
54255: IFFALSE 54263
54257: PUSH
54258: CALL 54473 0 0
54262: AND
54263: IFFALSE 54271
54265: PUSH
54266: LD_OWVAR 4
54270: AND
54271: IFFALSE 54470
54273: GO 54275
54275: DISABLE
54276: LD_INT 0
54278: PPUSH
54279: PPUSH
// begin canWin := false ;
54280: LD_ADDR_VAR 0 2
54284: PUSH
54285: LD_INT 0
54287: ST_TO_ADDR
// if not HasPower ( your_side ) then
54288: LD_OWVAR 2
54292: PPUSH
54293: CALL 54515 0 1
54297: NOT
54298: IFFALSE 54309
// begin Multiplayer_Loose_Message ;
54300: CALL_OW 521
// enable ( mpLose ) ;
54304: LD_INT 102
54306: ENABLE_MARKED
// end else
54307: GO 54470
// begin canWin := true ;
54309: LD_ADDR_VAR 0 2
54313: PUSH
54314: LD_INT 1
54316: ST_TO_ADDR
// for i := 1 to 8 do
54317: LD_ADDR_VAR 0 1
54321: PUSH
54322: DOUBLE
54323: LD_INT 1
54325: DEC
54326: ST_TO_ADDR
54327: LD_INT 8
54329: PUSH
54330: FOR_TO
54331: IFFALSE 54456
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54333: LD_EXP 9
54337: PUSH
54338: LD_VAR 0 1
54342: ARRAY
54343: IFFALSE 54356
54345: PUSH
54346: LD_VAR 0 1
54350: PPUSH
54351: CALL_OW 108
54355: AND
54356: IFFALSE 54370
54358: PUSH
54359: LD_VAR 0 1
54363: PUSH
54364: LD_OWVAR 2
54368: NONEQUAL
54369: AND
54370: IFFALSE 54454
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54372: LD_EXP 10
54376: PUSH
54377: LD_VAR 0 1
54381: ARRAY
54382: NOT
54383: IFTRUE 54431
54385: PUSH
54386: LD_EXP 10
54390: PUSH
54391: LD_VAR 0 1
54395: ARRAY
54396: PUSH
54397: LD_EXP 10
54401: PUSH
54402: LD_OWVAR 2
54406: ARRAY
54407: NONEQUAL
54408: IFFALSE 54430
54410: PUSH
54411: LD_OWVAR 2
54415: PPUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: CALL_OW 81
54425: PUSH
54426: LD_INT 1
54428: NONEQUAL
54429: AND
54430: OR
54431: IFFALSE 54454
// if HasPower ( i ) then
54433: LD_VAR 0 1
54437: PPUSH
54438: CALL 54515 0 1
54442: IFFALSE 54454
// begin canWin := false ;
54444: LD_ADDR_VAR 0 2
54448: PUSH
54449: LD_INT 0
54451: ST_TO_ADDR
// break ;
54452: GO 54456
// end ;
54454: GO 54330
54456: POP
54457: POP
// if canWin then
54458: LD_VAR 0 2
54462: IFFALSE 54469
// enable ( mpWin ) else
54464: LD_INT 101
54466: ENABLE_MARKED
54467: GO 54470
// enable ;
54469: ENABLE
// end ; end ;
54470: PPOPN 2
54472: END
// function CanWinLoose ; begin
54473: LD_INT 0
54475: PPUSH
// result := true ;
54476: LD_ADDR_VAR 0 1
54480: PUSH
54481: LD_INT 1
54483: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54484: CALL_OW 531
54488: IFFALSE 54500
54490: PUSH
54491: CALL_OW 519
54495: PUSH
54496: LD_INT 1
54498: GREATER
54499: AND
54500: IFFALSE 54510
// result := false ;
54502: LD_ADDR_VAR 0 1
54506: PUSH
54507: LD_INT 0
54509: ST_TO_ADDR
// end ;
54510: LD_VAR 0 1
54514: RET
// function HasPower ( i ) ; begin
54515: LD_INT 0
54517: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54518: LD_ADDR_VAR 0 2
54522: PUSH
54523: LD_INT 22
54525: PUSH
54526: LD_VAR 0 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 21
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 33
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 33
54560: PUSH
54561: LD_INT 5
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PPUSH
54578: CALL_OW 69
54582: ST_TO_ADDR
// end ; end_of_file
54583: LD_VAR 0 2
54587: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54588: LD_EXP 41
54592: IFFALSE 54635
54594: GO 54596
54596: DISABLE
54597: LD_INT 0
54599: PPUSH
// begin for i := 1 to 8 do
54600: LD_ADDR_VAR 0 1
54604: PUSH
54605: DOUBLE
54606: LD_INT 1
54608: DEC
54609: ST_TO_ADDR
54610: LD_INT 8
54612: PUSH
54613: FOR_TO
54614: IFFALSE 54633
// SetRestrict ( b_depot , i , state_disabled ) ;
54616: LD_INT 0
54618: PPUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: LD_INT 0
54626: PPUSH
54627: CALL_OW 324
54631: GO 54613
54633: POP
54634: POP
// end ;
54635: PPOPN 1
54637: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54638: LD_EXP 41
54642: IFFALSE 54650
54644: PUSH
54645: CALL 54860 0 0
54649: AND
54650: IFFALSE 54658
54652: PUSH
54653: LD_OWVAR 4
54657: AND
54658: IFFALSE 54857
54660: GO 54662
54662: DISABLE
54663: LD_INT 0
54665: PPUSH
54666: PPUSH
// begin canWin := false ;
54667: LD_ADDR_VAR 0 2
54671: PUSH
54672: LD_INT 0
54674: ST_TO_ADDR
// if not HasPower ( your_side ) then
54675: LD_OWVAR 2
54679: PPUSH
54680: CALL 54902 0 1
54684: NOT
54685: IFFALSE 54696
// begin Multiplayer_Loose_Message ;
54687: CALL_OW 521
// enable ( mpLose ) ;
54691: LD_INT 102
54693: ENABLE_MARKED
// end else
54694: GO 54857
// begin canWin := true ;
54696: LD_ADDR_VAR 0 2
54700: PUSH
54701: LD_INT 1
54703: ST_TO_ADDR
// for i := 1 to 8 do
54704: LD_ADDR_VAR 0 1
54708: PUSH
54709: DOUBLE
54710: LD_INT 1
54712: DEC
54713: ST_TO_ADDR
54714: LD_INT 8
54716: PUSH
54717: FOR_TO
54718: IFFALSE 54843
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54720: LD_EXP 9
54724: PUSH
54725: LD_VAR 0 1
54729: ARRAY
54730: IFFALSE 54743
54732: PUSH
54733: LD_VAR 0 1
54737: PPUSH
54738: CALL_OW 108
54742: AND
54743: IFFALSE 54757
54745: PUSH
54746: LD_VAR 0 1
54750: PUSH
54751: LD_OWVAR 2
54755: NONEQUAL
54756: AND
54757: IFFALSE 54841
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54759: LD_EXP 10
54763: PUSH
54764: LD_VAR 0 1
54768: ARRAY
54769: NOT
54770: IFTRUE 54818
54772: PUSH
54773: LD_EXP 10
54777: PUSH
54778: LD_VAR 0 1
54782: ARRAY
54783: PUSH
54784: LD_EXP 10
54788: PUSH
54789: LD_OWVAR 2
54793: ARRAY
54794: NONEQUAL
54795: IFFALSE 54817
54797: PUSH
54798: LD_OWVAR 2
54802: PPUSH
54803: LD_VAR 0 1
54807: PPUSH
54808: CALL_OW 81
54812: PUSH
54813: LD_INT 1
54815: NONEQUAL
54816: AND
54817: OR
54818: IFFALSE 54841
// if HasPower ( i ) then
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL 54902 0 1
54829: IFFALSE 54841
// begin canWin := false ;
54831: LD_ADDR_VAR 0 2
54835: PUSH
54836: LD_INT 0
54838: ST_TO_ADDR
// break ;
54839: GO 54843
// end ;
54841: GO 54717
54843: POP
54844: POP
// if canWin then
54845: LD_VAR 0 2
54849: IFFALSE 54856
// enable ( mpWin ) else
54851: LD_INT 101
54853: ENABLE_MARKED
54854: GO 54857
// enable ;
54856: ENABLE
// end ; end ;
54857: PPOPN 2
54859: END
// function CanWinLoose ; begin
54860: LD_INT 0
54862: PPUSH
// result := true ;
54863: LD_ADDR_VAR 0 1
54867: PUSH
54868: LD_INT 1
54870: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54871: CALL_OW 531
54875: IFFALSE 54887
54877: PUSH
54878: CALL_OW 519
54882: PUSH
54883: LD_INT 1
54885: GREATER
54886: AND
54887: IFFALSE 54897
// result := false ;
54889: LD_ADDR_VAR 0 1
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// end ;
54897: LD_VAR 0 1
54901: RET
// function HasPower ( i ) ; begin
54902: LD_INT 0
54904: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54905: LD_INT 22
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 30
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 30
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PPUSH
54949: CALL_OW 69
54953: NOT
54954: IFFALSE 54958
// exit ;
54956: GO 55023
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54958: LD_ADDR_VAR 0 2
54962: PUSH
54963: LD_INT 22
54965: PUSH
54966: LD_VAR 0 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 21
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 33
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 33
55000: PUSH
55001: LD_INT 5
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PPUSH
55018: CALL_OW 69
55022: ST_TO_ADDR
// end ; end_of_file
55023: LD_VAR 0 2
55027: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55028: LD_EXP 41
55032: IFFALSE 55373
55034: GO 55036
55036: DISABLE
55037: LD_INT 0
55039: PPUSH
55040: PPUSH
55041: PPUSH
// begin mpKingPoints := [ ] ;
55042: LD_ADDR_EXP 51
55046: PUSH
55047: EMPTY
55048: ST_TO_ADDR
// if mpTeamGame then
55049: LD_EXP 13
55053: IFFALSE 55107
// begin for i := 1 to Count ( mpTeams ) do
55055: LD_ADDR_VAR 0 1
55059: PUSH
55060: DOUBLE
55061: LD_INT 1
55063: DEC
55064: ST_TO_ADDR
55065: LD_EXP 12
55069: PPUSH
55070: CALL 5823 0 1
55074: PUSH
55075: FOR_TO
55076: IFFALSE 55103
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55078: LD_ADDR_EXP 51
55082: PUSH
55083: LD_EXP 51
55087: PPUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: LD_INT 0
55095: PPUSH
55096: CALL_OW 1
55100: ST_TO_ADDR
55101: GO 55075
55103: POP
55104: POP
// end else
55105: GO 55150
// begin for i := 1 to 8 do
55107: LD_ADDR_VAR 0 1
55111: PUSH
55112: DOUBLE
55113: LD_INT 1
55115: DEC
55116: ST_TO_ADDR
55117: LD_INT 8
55119: PUSH
55120: FOR_TO
55121: IFFALSE 55148
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55123: LD_ADDR_EXP 51
55127: PUSH
55128: LD_EXP 51
55132: PPUSH
55133: LD_VAR 0 1
55137: PPUSH
55138: LD_INT 0
55140: PPUSH
55141: CALL_OW 1
55145: ST_TO_ADDR
55146: GO 55120
55148: POP
55149: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55150: LD_ADDR_VAR 0 3
55154: PUSH
55155: LD_EXP 2
55159: PPUSH
55160: LD_INT 0
55162: PPUSH
55163: CALL_OW 517
55167: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55168: LD_ADDR_VAR 0 1
55172: PUSH
55173: DOUBLE
55174: LD_INT 1
55176: DEC
55177: ST_TO_ADDR
55178: LD_VAR 0 3
55182: PUSH
55183: LD_INT 1
55185: ARRAY
55186: PUSH
55187: FOR_TO
55188: IFFALSE 55255
// for j := 1 to 8 do
55190: LD_ADDR_VAR 0 2
55194: PUSH
55195: DOUBLE
55196: LD_INT 1
55198: DEC
55199: ST_TO_ADDR
55200: LD_INT 8
55202: PUSH
55203: FOR_TO
55204: IFFALSE 55251
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55206: LD_VAR 0 3
55210: PUSH
55211: LD_INT 1
55213: ARRAY
55214: PUSH
55215: LD_VAR 0 1
55219: ARRAY
55220: PPUSH
55221: LD_VAR 0 3
55225: PUSH
55226: LD_INT 2
55228: ARRAY
55229: PUSH
55230: LD_VAR 0 1
55234: ARRAY
55235: PPUSH
55236: LD_VAR 0 2
55240: PPUSH
55241: LD_INT 12
55243: NEG
55244: PPUSH
55245: CALL_OW 330
55249: GO 55203
55251: POP
55252: POP
55253: GO 55187
55255: POP
55256: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55257: LD_EXP 36
55261: PPUSH
55262: LD_INT 1
55264: PPUSH
55265: CALL_OW 424
// UpdateCounter ;
55269: CALL 55879 0 0
// repeat wait ( 0 0$1 ) ;
55273: LD_INT 35
55275: PPUSH
55276: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55280: LD_ADDR_VAR 0 3
55284: PUSH
55285: LD_EXP 36
55289: PPUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 57
55295: PUSH
55296: EMPTY
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 50
55305: PUSH
55306: EMPTY
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 30
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 30
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: PPUSH
55342: CALL_OW 70
55346: ST_TO_ADDR
// if not tmp then
55347: LD_VAR 0 3
55351: NOT
55352: IFFALSE 55356
// continue ;
55354: GO 55273
// AddPoints ( tmp ) ;
55356: LD_VAR 0 3
55360: PPUSH
55361: CALL 55557 0 1
// UpdateCounter ;
55365: CALL 55879 0 0
// until false ;
55369: LD_INT 0
55371: IFFALSE 55273
// end ;
55373: PPOPN 3
55375: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55376: LD_EXP 41
55380: IFFALSE 55388
55382: PUSH
55383: LD_EXP 39
55387: AND
55388: IFFALSE 55554
55390: GO 55392
55392: DISABLE
55393: LD_INT 0
55395: PPUSH
55396: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55397: LD_ADDR_VAR 0 2
55401: PUSH
55402: LD_EXP 2
55406: PPUSH
55407: LD_INT 0
55409: PPUSH
55410: CALL_OW 517
55414: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55415: LD_ADDR_VAR 0 1
55419: PUSH
55420: DOUBLE
55421: LD_INT 1
55423: DEC
55424: ST_TO_ADDR
55425: LD_VAR 0 2
55429: PUSH
55430: LD_INT 1
55432: ARRAY
55433: PUSH
55434: FOR_TO
55435: IFFALSE 55476
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55437: LD_VAR 0 2
55441: PUSH
55442: LD_INT 1
55444: ARRAY
55445: PUSH
55446: LD_VAR 0 1
55450: ARRAY
55451: PPUSH
55452: LD_VAR 0 2
55456: PUSH
55457: LD_INT 2
55459: ARRAY
55460: PUSH
55461: LD_VAR 0 1
55465: ARRAY
55466: PPUSH
55467: LD_INT 125
55469: PPUSH
55470: CALL_OW 495
55474: GO 55434
55476: POP
55477: POP
// repeat wait ( mpEmissions ) ;
55478: LD_EXP 39
55482: PPUSH
55483: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55487: LD_ADDR_VAR 0 1
55491: PUSH
55492: DOUBLE
55493: LD_INT 1
55495: DEC
55496: ST_TO_ADDR
55497: LD_VAR 0 2
55501: PUSH
55502: LD_INT 1
55504: ARRAY
55505: PUSH
55506: FOR_TO
55507: IFFALSE 55548
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55509: LD_VAR 0 2
55513: PUSH
55514: LD_INT 1
55516: ARRAY
55517: PUSH
55518: LD_VAR 0 1
55522: ARRAY
55523: PPUSH
55524: LD_VAR 0 2
55528: PUSH
55529: LD_INT 2
55531: ARRAY
55532: PUSH
55533: LD_VAR 0 1
55537: ARRAY
55538: PPUSH
55539: LD_INT 15
55541: PPUSH
55542: CALL_OW 495
55546: GO 55506
55548: POP
55549: POP
// until false ;
55550: LD_INT 0
55552: IFFALSE 55478
// end ;
55554: PPOPN 2
55556: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55557: LD_INT 0
55559: PPUSH
55560: PPUSH
55561: PPUSH
55562: PPUSH
55563: PPUSH
// if mpTeamGame then
55564: LD_EXP 13
55568: IFFALSE 55765
// begin first := depots [ 1 ] ;
55570: LD_ADDR_VAR 0 4
55574: PUSH
55575: LD_VAR 0 1
55579: PUSH
55580: LD_INT 1
55582: ARRAY
55583: ST_TO_ADDR
// side := GetSide ( first ) ;
55584: LD_ADDR_VAR 0 6
55588: PUSH
55589: LD_VAR 0 4
55593: PPUSH
55594: CALL_OW 255
55598: ST_TO_ADDR
// for i := 1 to mpTeams do
55599: LD_ADDR_VAR 0 3
55603: PUSH
55604: DOUBLE
55605: LD_INT 1
55607: DEC
55608: ST_TO_ADDR
55609: LD_EXP 12
55613: PUSH
55614: FOR_TO
55615: IFFALSE 55649
// if side in mpTeams [ i ] then
55617: LD_VAR 0 6
55621: PUSH
55622: LD_EXP 12
55626: PUSH
55627: LD_VAR 0 3
55631: ARRAY
55632: IN
55633: IFFALSE 55647
// begin team := i ;
55635: LD_ADDR_VAR 0 5
55639: PUSH
55640: LD_VAR 0 3
55644: ST_TO_ADDR
// break ;
55645: GO 55649
// end ;
55647: GO 55614
55649: POP
55650: POP
// if not team then
55651: LD_VAR 0 5
55655: NOT
55656: IFFALSE 55660
// exit ;
55658: GO 55874
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55660: LD_EXP 36
55664: PPUSH
55665: LD_INT 81
55667: PUSH
55668: LD_VAR 0 6
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PPUSH
55677: CALL_OW 70
55681: IFFALSE 55685
// exit ;
55683: GO 55874
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55685: LD_ADDR_EXP 51
55689: PUSH
55690: LD_EXP 51
55694: PPUSH
55695: LD_VAR 0 5
55699: PPUSH
55700: LD_EXP 51
55704: PUSH
55705: LD_VAR 0 5
55709: ARRAY
55710: PUSH
55711: LD_INT 1
55713: PLUS
55714: PPUSH
55715: CALL_OW 1
55719: ST_TO_ADDR
// for i in mpTeams [ team ] do
55720: LD_ADDR_VAR 0 3
55724: PUSH
55725: LD_EXP 12
55729: PUSH
55730: LD_VAR 0 5
55734: ARRAY
55735: PUSH
55736: FOR_IN
55737: IFFALSE 55761
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55739: LD_VAR 0 3
55743: PPUSH
55744: LD_EXP 51
55748: PUSH
55749: LD_VAR 0 5
55753: ARRAY
55754: PPUSH
55755: CALL_OW 506
55759: GO 55736
55761: POP
55762: POP
// end else
55763: GO 55874
// begin first := depots [ 1 ] ;
55765: LD_ADDR_VAR 0 4
55769: PUSH
55770: LD_VAR 0 1
55774: PUSH
55775: LD_INT 1
55777: ARRAY
55778: ST_TO_ADDR
// side := GetSide ( first ) ;
55779: LD_ADDR_VAR 0 6
55783: PUSH
55784: LD_VAR 0 4
55788: PPUSH
55789: CALL_OW 255
55793: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55794: LD_EXP 36
55798: PPUSH
55799: LD_INT 81
55801: PUSH
55802: LD_VAR 0 6
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PPUSH
55811: CALL_OW 70
55815: IFFALSE 55819
// exit ;
55817: GO 55874
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55819: LD_ADDR_EXP 51
55823: PUSH
55824: LD_EXP 51
55828: PPUSH
55829: LD_VAR 0 6
55833: PPUSH
55834: LD_EXP 51
55838: PUSH
55839: LD_VAR 0 6
55843: ARRAY
55844: PUSH
55845: LD_INT 1
55847: PLUS
55848: PPUSH
55849: CALL_OW 1
55853: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55854: LD_VAR 0 6
55858: PPUSH
55859: LD_EXP 51
55863: PUSH
55864: LD_VAR 0 6
55868: ARRAY
55869: PPUSH
55870: CALL_OW 506
// end ; end ;
55874: LD_VAR 0 2
55878: RET
// function UpdateCounter ; var i ; begin
55879: LD_INT 0
55881: PPUSH
55882: PPUSH
// result := [ ] ;
55883: LD_ADDR_VAR 0 1
55887: PUSH
55888: EMPTY
55889: ST_TO_ADDR
// if mpTeamGame then
55890: LD_EXP 13
55894: IFFALSE 55961
// begin for i := 1 to mpTeams do
55896: LD_ADDR_VAR 0 2
55900: PUSH
55901: DOUBLE
55902: LD_INT 1
55904: DEC
55905: ST_TO_ADDR
55906: LD_EXP 12
55910: PUSH
55911: FOR_TO
55912: IFFALSE 55957
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55914: LD_ADDR_VAR 0 1
55918: PUSH
55919: LD_VAR 0 1
55923: PUSH
55924: LD_STRING #KingoftheHill-Team
55926: PUSH
55927: LD_VAR 0 2
55931: PUSH
55932: LD_EXP 51
55936: PUSH
55937: LD_VAR 0 2
55941: ARRAY
55942: PUSH
55943: LD_EXP 37
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: ADD
55954: ST_TO_ADDR
55955: GO 55911
55957: POP
55958: POP
// end else
55959: GO 56034
// begin for i := 1 to 8 do
55961: LD_ADDR_VAR 0 2
55965: PUSH
55966: DOUBLE
55967: LD_INT 1
55969: DEC
55970: ST_TO_ADDR
55971: LD_INT 8
55973: PUSH
55974: FOR_TO
55975: IFFALSE 56032
// if mpSidePositions [ i ] then
55977: LD_EXP 9
55981: PUSH
55982: LD_VAR 0 2
55986: ARRAY
55987: IFFALSE 56030
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55989: LD_ADDR_VAR 0 1
55993: PUSH
55994: LD_VAR 0 1
55998: PUSH
55999: LD_STRING #KingoftheHill-Player
56001: PUSH
56002: LD_VAR 0 2
56006: PUSH
56007: LD_EXP 51
56011: PUSH
56012: LD_VAR 0 2
56016: ARRAY
56017: PUSH
56018: LD_EXP 37
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: ADD
56029: ST_TO_ADDR
56030: GO 55974
56032: POP
56033: POP
// end ; mpDisplayStrings := result ;
56034: LD_ADDR_EXP 40
56038: PUSH
56039: LD_VAR 0 1
56043: ST_TO_ADDR
// end ;
56044: LD_VAR 0 1
56048: RET
// export function HowMuchPointsKing ( side ) ; begin
56049: LD_INT 0
56051: PPUSH
// result := HowMuchPoints ( side ) ;
56052: LD_ADDR_VAR 0 2
56056: PUSH
56057: LD_VAR 0 1
56061: PPUSH
56062: CALL 56072 0 1
56066: ST_TO_ADDR
// end ;
56067: LD_VAR 0 2
56071: RET
// function HowMuchPoints ( side ) ; var i ; begin
56072: LD_INT 0
56074: PPUSH
56075: PPUSH
// if mpTeamGame then
56076: LD_EXP 13
56080: IFFALSE 56149
// begin for i := 1 to Count ( mpTeams ) do
56082: LD_ADDR_VAR 0 3
56086: PUSH
56087: DOUBLE
56088: LD_INT 1
56090: DEC
56091: ST_TO_ADDR
56092: LD_EXP 12
56096: PPUSH
56097: CALL 5823 0 1
56101: PUSH
56102: FOR_TO
56103: IFFALSE 56145
// begin if side in mpTeams [ i ] then
56105: LD_VAR 0 1
56109: PUSH
56110: LD_EXP 12
56114: PUSH
56115: LD_VAR 0 3
56119: ARRAY
56120: IN
56121: IFFALSE 56143
// begin result := mpKingPoints [ i ] ;
56123: LD_ADDR_VAR 0 2
56127: PUSH
56128: LD_EXP 51
56132: PUSH
56133: LD_VAR 0 3
56137: ARRAY
56138: ST_TO_ADDR
// exit ;
56139: POP
56140: POP
56141: GO 56165
// end ; end ;
56143: GO 56102
56145: POP
56146: POP
// end else
56147: GO 56165
// result := mpKingPoints [ side ] ;
56149: LD_ADDR_VAR 0 2
56153: PUSH
56154: LD_EXP 51
56158: PUSH
56159: LD_VAR 0 1
56163: ARRAY
56164: ST_TO_ADDR
// end ;
56165: LD_VAR 0 2
56169: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56170: LD_EXP 41
56174: IFFALSE 56182
56176: PUSH
56177: CALL 56594 0 0
56181: AND
56182: IFFALSE 56190
56184: PUSH
56185: LD_OWVAR 4
56189: AND
56190: IFFALSE 56443
56192: GO 56194
56194: DISABLE
56195: LD_INT 0
56197: PPUSH
56198: PPUSH
// begin canWin := false ;
56199: LD_ADDR_VAR 0 2
56203: PUSH
56204: LD_INT 0
56206: ST_TO_ADDR
// if not HasPower ( your_side ) then
56207: LD_OWVAR 2
56211: PPUSH
56212: CALL 56636 0 1
56216: NOT
56217: IFFALSE 56228
// begin Multiplayer_Loose_Message ;
56219: CALL_OW 521
// enable ( mpLose ) ;
56223: LD_INT 102
56225: ENABLE_MARKED
// end else
56226: GO 56443
// begin if not EnemiesInGame then
56228: CALL 56446 0 0
56232: NOT
56233: IFFALSE 56240
// begin enable ( mpWin ) ;
56235: LD_INT 101
56237: ENABLE_MARKED
// exit ;
56238: GO 56443
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56240: LD_ADDR_VAR 0 2
56244: PUSH
56245: LD_OWVAR 2
56249: PPUSH
56250: CALL 56072 0 1
56254: PUSH
56255: LD_EXP 37
56259: GREATEREQUAL
56260: IFFALSE 56273
56262: PUSH
56263: LD_OWVAR 2
56267: PPUSH
56268: CALL 56636 0 1
56272: AND
56273: ST_TO_ADDR
// for i := 1 to 8 do
56274: LD_ADDR_VAR 0 1
56278: PUSH
56279: DOUBLE
56280: LD_INT 1
56282: DEC
56283: ST_TO_ADDR
56284: LD_INT 8
56286: PUSH
56287: FOR_TO
56288: IFFALSE 56429
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56290: LD_EXP 9
56294: PUSH
56295: LD_VAR 0 1
56299: ARRAY
56300: IFFALSE 56313
56302: PUSH
56303: LD_VAR 0 1
56307: PPUSH
56308: CALL_OW 108
56312: AND
56313: IFFALSE 56327
56315: PUSH
56316: LD_VAR 0 1
56320: PUSH
56321: LD_OWVAR 2
56325: NONEQUAL
56326: AND
56327: IFFALSE 56427
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56329: LD_EXP 10
56333: PUSH
56334: LD_VAR 0 1
56338: ARRAY
56339: NOT
56340: IFTRUE 56388
56342: PUSH
56343: LD_EXP 10
56347: PUSH
56348: LD_VAR 0 1
56352: ARRAY
56353: PUSH
56354: LD_EXP 10
56358: PUSH
56359: LD_OWVAR 2
56363: ARRAY
56364: NONEQUAL
56365: IFFALSE 56387
56367: PUSH
56368: LD_OWVAR 2
56372: PPUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: CALL_OW 81
56382: PUSH
56383: LD_INT 1
56385: NONEQUAL
56386: AND
56387: OR
56388: IFFALSE 56427
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56390: LD_VAR 0 1
56394: PPUSH
56395: CALL 56072 0 1
56399: PUSH
56400: LD_EXP 37
56404: GREATEREQUAL
56405: IFFALSE 56418
56407: PUSH
56408: LD_VAR 0 1
56412: PPUSH
56413: CALL 56636 0 1
56417: AND
56418: IFFALSE 56427
// begin enable ( mpLose ) ;
56420: LD_INT 102
56422: ENABLE_MARKED
// exit ;
56423: POP
56424: POP
56425: GO 56443
// end ;
56427: GO 56287
56429: POP
56430: POP
// if canWin then
56431: LD_VAR 0 2
56435: IFFALSE 56442
// enable ( mpWin ) else
56437: LD_INT 101
56439: ENABLE_MARKED
56440: GO 56443
// enable ;
56442: ENABLE
// end ; end ;
56443: PPOPN 2
56445: END
// function EnemiesInGame ; var i ; begin
56446: LD_INT 0
56448: PPUSH
56449: PPUSH
// result := false ;
56450: LD_ADDR_VAR 0 1
56454: PUSH
56455: LD_INT 0
56457: ST_TO_ADDR
// for i := 1 to 8 do
56458: LD_ADDR_VAR 0 2
56462: PUSH
56463: DOUBLE
56464: LD_INT 1
56466: DEC
56467: ST_TO_ADDR
56468: LD_INT 8
56470: PUSH
56471: FOR_TO
56472: IFFALSE 56587
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56474: LD_VAR 0 2
56478: PUSH
56479: LD_OWVAR 2
56483: NONEQUAL
56484: IFFALSE 56497
56486: PUSH
56487: LD_VAR 0 2
56491: PPUSH
56492: CALL 56636 0 1
56496: AND
56497: IFFALSE 56510
56499: PUSH
56500: LD_VAR 0 2
56504: PPUSH
56505: CALL_OW 108
56509: AND
56510: IFFALSE 56585
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56512: LD_EXP 10
56516: PUSH
56517: LD_VAR 0 2
56521: ARRAY
56522: NOT
56523: IFTRUE 56571
56525: PUSH
56526: LD_EXP 10
56530: PUSH
56531: LD_VAR 0 2
56535: ARRAY
56536: PUSH
56537: LD_EXP 10
56541: PUSH
56542: LD_OWVAR 2
56546: ARRAY
56547: NONEQUAL
56548: IFFALSE 56570
56550: PUSH
56551: LD_OWVAR 2
56555: PPUSH
56556: LD_VAR 0 2
56560: PPUSH
56561: CALL_OW 81
56565: PUSH
56566: LD_INT 1
56568: NONEQUAL
56569: AND
56570: OR
56571: IFFALSE 56585
// begin result := true ;
56573: LD_ADDR_VAR 0 1
56577: PUSH
56578: LD_INT 1
56580: ST_TO_ADDR
// exit ;
56581: POP
56582: POP
56583: GO 56589
// end ;
56585: GO 56471
56587: POP
56588: POP
// end ;
56589: LD_VAR 0 1
56593: RET
// function CanWinLoose ; begin
56594: LD_INT 0
56596: PPUSH
// result := true ;
56597: LD_ADDR_VAR 0 1
56601: PUSH
56602: LD_INT 1
56604: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56605: CALL_OW 531
56609: IFFALSE 56621
56611: PUSH
56612: CALL_OW 519
56616: PUSH
56617: LD_INT 1
56619: GREATER
56620: AND
56621: IFFALSE 56631
// result := false ;
56623: LD_ADDR_VAR 0 1
56627: PUSH
56628: LD_INT 0
56630: ST_TO_ADDR
// end ;
56631: LD_VAR 0 1
56635: RET
// function HasPower ( i ) ; begin
56636: LD_INT 0
56638: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56639: LD_ADDR_VAR 0 2
56643: PUSH
56644: LD_INT 22
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 21
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 33
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 33
56681: PUSH
56682: LD_INT 5
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PPUSH
56699: CALL_OW 69
56703: ST_TO_ADDR
// end ; end_of_file end_of_file
56704: LD_VAR 0 2
56708: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56709: LD_VAR 0 1
56713: PUSH
56714: LD_INT 200
56716: DOUBLE
56717: GREATEREQUAL
56718: IFFALSE 56726
56720: LD_INT 299
56722: DOUBLE
56723: LESSEQUAL
56724: IFTRUE 56728
56726: GO 56760
56728: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56729: LD_VAR 0 1
56733: PPUSH
56734: LD_VAR 0 2
56738: PPUSH
56739: LD_VAR 0 3
56743: PPUSH
56744: LD_VAR 0 4
56748: PPUSH
56749: LD_VAR 0 5
56753: PPUSH
56754: CALL 57622 0 5
56758: GO 56837
56760: LD_INT 300
56762: DOUBLE
56763: GREATEREQUAL
56764: IFFALSE 56772
56766: LD_INT 399
56768: DOUBLE
56769: LESSEQUAL
56770: IFTRUE 56774
56772: GO 56836
56774: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56775: LD_VAR 0 1
56779: PPUSH
56780: LD_VAR 0 2
56784: PPUSH
56785: LD_VAR 0 3
56789: PPUSH
56790: LD_VAR 0 4
56794: PPUSH
56795: LD_VAR 0 5
56799: PPUSH
56800: LD_VAR 0 6
56804: PPUSH
56805: LD_VAR 0 7
56809: PPUSH
56810: LD_VAR 0 8
56814: PPUSH
56815: LD_VAR 0 9
56819: PPUSH
56820: LD_VAR 0 10
56824: PPUSH
56825: LD_VAR 0 11
56829: PPUSH
56830: CALL 63943 0 11
56834: GO 56837
56836: POP
// end ;
56837: PPOPN 11
56839: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56840: LD_VAR 0 1
56844: PPUSH
56845: LD_VAR 0 2
56849: PPUSH
56850: LD_VAR 0 3
56854: PPUSH
56855: LD_VAR 0 4
56859: PPUSH
56860: LD_VAR 0 5
56864: PPUSH
56865: CALL 56922 0 5
// end ; end_of_file
56869: PPOPN 5
56871: END
// export function SOS_UnitDestroyed ( un ) ; begin
56872: LD_INT 0
56874: PPUSH
// ComRadiation ( un ) ;
56875: LD_VAR 0 1
56879: PPUSH
56880: CALL 58042 0 1
// end ;
56884: LD_VAR 0 2
56888: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56889: LD_INT 0
56891: PPUSH
// ComRadiation ( un ) ;
56892: LD_VAR 0 1
56896: PPUSH
56897: CALL 58042 0 1
// end ;
56901: LD_VAR 0 2
56905: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56906: LD_INT 0
56908: PPUSH
// end ;
56909: LD_VAR 0 4
56913: RET
// export function SOS_Command ( cmd ) ; begin
56914: LD_INT 0
56916: PPUSH
// end ;
56917: LD_VAR 0 2
56921: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56922: LD_INT 0
56924: PPUSH
// end ;
56925: LD_VAR 0 6
56929: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56930: LD_INT 0
56932: PPUSH
56933: PPUSH
56934: PPUSH
56935: PPUSH
56936: PPUSH
// if not vehicle or not factory then
56937: LD_VAR 0 1
56941: NOT
56942: IFTRUE 56951
56944: PUSH
56945: LD_VAR 0 2
56949: NOT
56950: OR
56951: IFFALSE 56955
// exit ;
56953: GO 57617
// weapon := GetWeapon ( vehicle ) ;
56955: LD_ADDR_VAR 0 7
56959: PUSH
56960: LD_VAR 0 1
56964: PPUSH
56965: CALL_OW 264
56969: ST_TO_ADDR
// if weapon = ar_miner then
56970: LD_VAR 0 7
56974: PUSH
56975: LD_INT 81
56977: EQUAL
56978: IFFALSE 57035
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56980: LD_ADDR_EXP 59
56984: PUSH
56985: LD_EXP 59
56989: PPUSH
56990: LD_EXP 59
56994: PUSH
56995: LD_INT 1
56997: PLUS
56998: PPUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 1
57008: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57009: LD_ADDR_EXP 60
57013: PUSH
57014: LD_EXP 60
57018: PPUSH
57019: LD_EXP 60
57023: PUSH
57024: LD_INT 1
57026: PLUS
57027: PPUSH
57028: EMPTY
57029: PPUSH
57030: CALL_OW 1
57034: ST_TO_ADDR
// end ; if not factoryWaypoints then
57035: LD_EXP 62
57039: NOT
57040: IFFALSE 57044
// exit ;
57042: GO 57617
// for i := 1 to Count ( factoryWaypoints ) do
57044: LD_ADDR_VAR 0 4
57048: PUSH
57049: DOUBLE
57050: LD_INT 1
57052: DEC
57053: ST_TO_ADDR
57054: LD_EXP 62
57058: PPUSH
57059: CALL 5823 0 1
57063: PUSH
57064: FOR_TO
57065: IFFALSE 57615
// if factoryWaypoints [ i ] [ 2 ] = factory then
57067: LD_EXP 62
57071: PUSH
57072: LD_VAR 0 4
57076: ARRAY
57077: PUSH
57078: LD_INT 2
57080: ARRAY
57081: PUSH
57082: LD_VAR 0 2
57086: EQUAL
57087: IFFALSE 57613
// begin if GetControl ( vehicle ) = control_manual then
57089: LD_VAR 0 1
57093: PPUSH
57094: CALL_OW 263
57098: PUSH
57099: LD_INT 1
57101: EQUAL
57102: IFFALSE 57466
// begin driver := IsDrivenBy ( vehicle ) ;
57104: LD_ADDR_VAR 0 5
57108: PUSH
57109: LD_VAR 0 1
57113: PPUSH
57114: CALL_OW 311
57118: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57119: LD_VAR 0 5
57123: PUSH
57124: LD_EXP 63
57128: IN
57129: IFTRUE 57143
57131: PUSH
57132: LD_VAR 0 1
57136: PUSH
57137: LD_EXP 63
57141: IN
57142: OR
57143: IFFALSE 57149
// exit ;
57145: POP
57146: POP
57147: GO 57617
// if not HasTask ( driver ) then
57149: LD_VAR 0 5
57153: PPUSH
57154: CALL_OW 314
57158: NOT
57159: IFFALSE 57464
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57161: LD_ADDR_EXP 63
57165: PUSH
57166: LD_EXP 63
57170: PPUSH
57171: LD_VAR 0 5
57175: PPUSH
57176: CALL 41789 0 2
57180: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57181: LD_ADDR_EXP 63
57185: PUSH
57186: LD_EXP 63
57190: PPUSH
57191: LD_VAR 0 1
57195: PPUSH
57196: CALL 41789 0 2
57200: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57201: LD_ADDR_VAR 0 6
57205: PUSH
57206: LD_EXP 62
57210: PUSH
57211: LD_VAR 0 4
57215: ARRAY
57216: PUSH
57217: LD_INT 3
57219: ARRAY
57220: PPUSH
57221: LD_EXP 62
57225: PUSH
57226: LD_VAR 0 4
57230: ARRAY
57231: PUSH
57232: LD_INT 4
57234: ARRAY
57235: PPUSH
57236: CALL_OW 428
57240: ST_TO_ADDR
// if hex then
57241: LD_VAR 0 6
57245: IFFALSE 57263
// ComMoveUnit ( driver , hex ) else
57247: LD_VAR 0 5
57251: PPUSH
57252: LD_VAR 0 6
57256: PPUSH
57257: CALL_OW 112
57261: GO 57347
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57263: LD_VAR 0 1
57267: PPUSH
57268: LD_EXP 62
57272: PUSH
57273: LD_VAR 0 4
57277: ARRAY
57278: PUSH
57279: LD_INT 3
57281: ARRAY
57282: PPUSH
57283: LD_EXP 62
57287: PUSH
57288: LD_VAR 0 4
57292: ARRAY
57293: PUSH
57294: LD_INT 4
57296: ARRAY
57297: PPUSH
57298: CALL_OW 297
57302: PUSH
57303: LD_INT 0
57305: GREATER
57306: IFFALSE 57347
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57308: LD_VAR 0 5
57312: PPUSH
57313: LD_EXP 62
57317: PUSH
57318: LD_VAR 0 4
57322: ARRAY
57323: PUSH
57324: LD_INT 3
57326: ARRAY
57327: PPUSH
57328: LD_EXP 62
57332: PUSH
57333: LD_VAR 0 4
57337: ARRAY
57338: PUSH
57339: LD_INT 4
57341: ARRAY
57342: PPUSH
57343: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57347: LD_VAR 0 5
57351: PPUSH
57352: CALL_OW 181
// if Multiplayer then
57356: LD_OWVAR 4
57360: IFFALSE 57409
// begin repeat wait ( 10 ) ;
57362: LD_INT 10
57364: PPUSH
57365: CALL_OW 67
// until not IsInUnit ( driver ) ;
57369: LD_VAR 0 5
57373: PPUSH
57374: CALL_OW 310
57378: NOT
57379: IFFALSE 57362
// if not HasTask ( driver ) then
57381: LD_VAR 0 5
57385: PPUSH
57386: CALL_OW 314
57390: NOT
57391: IFFALSE 57407
// ComEnterUnit ( driver , factory ) ;
57393: LD_VAR 0 5
57397: PPUSH
57398: LD_VAR 0 2
57402: PPUSH
57403: CALL_OW 120
// end else
57407: GO 57423
// AddComEnterUnit ( driver , factory ) ;
57409: LD_VAR 0 5
57413: PPUSH
57414: LD_VAR 0 2
57418: PPUSH
57419: CALL_OW 180
// wait ( 0 0$1 ) ;
57423: LD_INT 35
57425: PPUSH
57426: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57430: LD_ADDR_EXP 63
57434: PUSH
57435: LD_EXP 63
57439: PUSH
57440: LD_VAR 0 5
57444: DIFF
57445: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57446: LD_ADDR_EXP 63
57450: PUSH
57451: LD_EXP 63
57455: PUSH
57456: LD_VAR 0 1
57460: DIFF
57461: ST_TO_ADDR
// break ;
57462: GO 57615
// end ; end else
57464: GO 57613
// if GetControl ( vehicle ) = control_remote then
57466: LD_VAR 0 1
57470: PPUSH
57471: CALL_OW 263
57475: PUSH
57476: LD_INT 2
57478: EQUAL
57479: IFFALSE 57565
// begin wait ( 0 0$2 ) ;
57481: LD_INT 70
57483: PPUSH
57484: CALL_OW 67
// repeat wait ( 10 ) ;
57488: LD_INT 10
57490: PPUSH
57491: CALL_OW 67
// Connect ( vehicle ) ;
57495: LD_VAR 0 1
57499: PPUSH
57500: CALL 12101 0 1
// until IsControledBy ( vehicle ) ;
57504: LD_VAR 0 1
57508: PPUSH
57509: CALL_OW 312
57513: IFFALSE 57488
// wait ( 10 ) ;
57515: LD_INT 10
57517: PPUSH
57518: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57522: LD_VAR 0 1
57526: PPUSH
57527: LD_EXP 62
57531: PUSH
57532: LD_VAR 0 4
57536: ARRAY
57537: PUSH
57538: LD_INT 3
57540: ARRAY
57541: PPUSH
57542: LD_EXP 62
57546: PUSH
57547: LD_VAR 0 4
57551: ARRAY
57552: PUSH
57553: LD_INT 4
57555: ARRAY
57556: PPUSH
57557: CALL_OW 111
// break ;
57561: GO 57615
// end else
57563: GO 57613
// begin wait ( 0 0$3 ) ;
57565: LD_INT 105
57567: PPUSH
57568: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57572: LD_VAR 0 1
57576: PPUSH
57577: LD_EXP 62
57581: PUSH
57582: LD_VAR 0 4
57586: ARRAY
57587: PUSH
57588: LD_INT 3
57590: ARRAY
57591: PPUSH
57592: LD_EXP 62
57596: PUSH
57597: LD_VAR 0 4
57601: ARRAY
57602: PUSH
57603: LD_INT 4
57605: ARRAY
57606: PPUSH
57607: CALL_OW 111
// break ;
57611: GO 57615
// end ; end ;
57613: GO 57064
57615: POP
57616: POP
// end ;
57617: LD_VAR 0 3
57621: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57622: LD_INT 0
57624: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57625: LD_VAR 0 1
57629: PUSH
57630: LD_INT 250
57632: EQUAL
57633: IFFALSE 57650
57635: PUSH
57636: LD_VAR 0 2
57640: PPUSH
57641: CALL_OW 264
57645: PUSH
57646: LD_INT 81
57648: EQUAL
57649: AND
57650: IFFALSE 57671
// MinerPlaceMine ( unit , x , y ) ;
57652: LD_VAR 0 2
57656: PPUSH
57657: LD_VAR 0 4
57661: PPUSH
57662: LD_VAR 0 5
57666: PPUSH
57667: CALL 60952 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57671: LD_VAR 0 1
57675: PUSH
57676: LD_INT 251
57678: EQUAL
57679: IFFALSE 57696
57681: PUSH
57682: LD_VAR 0 2
57686: PPUSH
57687: CALL_OW 264
57691: PUSH
57692: LD_INT 81
57694: EQUAL
57695: AND
57696: IFFALSE 57717
// MinerDetonateMine ( unit , x , y ) ;
57698: LD_VAR 0 2
57702: PPUSH
57703: LD_VAR 0 4
57707: PPUSH
57708: LD_VAR 0 5
57712: PPUSH
57713: CALL 61359 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57717: LD_VAR 0 1
57721: PUSH
57722: LD_INT 252
57724: EQUAL
57725: IFFALSE 57742
57727: PUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: CALL_OW 264
57737: PUSH
57738: LD_INT 81
57740: EQUAL
57741: AND
57742: IFFALSE 57763
// MinerCreateMinefield ( unit , x , y ) ;
57744: LD_VAR 0 2
57748: PPUSH
57749: LD_VAR 0 4
57753: PPUSH
57754: LD_VAR 0 5
57758: PPUSH
57759: CALL 61591 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57763: LD_VAR 0 1
57767: PUSH
57768: LD_INT 253
57770: EQUAL
57771: IFFALSE 57788
57773: PUSH
57774: LD_VAR 0 2
57778: PPUSH
57779: CALL_OW 257
57783: PUSH
57784: LD_INT 5
57786: EQUAL
57787: AND
57788: IFFALSE 57809
// ComBinocular ( unit , x , y ) ;
57790: LD_VAR 0 2
57794: PPUSH
57795: LD_VAR 0 4
57799: PPUSH
57800: LD_VAR 0 5
57804: PPUSH
57805: CALL 61966 0 3
// if selectedUnit then
57809: LD_VAR 0 3
57813: IFFALSE 57873
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57815: LD_VAR 0 1
57819: PUSH
57820: LD_INT 254
57822: EQUAL
57823: IFFALSE 57840
57825: PUSH
57826: LD_VAR 0 2
57830: PPUSH
57831: CALL_OW 264
57835: PUSH
57836: LD_INT 99
57838: EQUAL
57839: AND
57840: IFFALSE 57857
57842: PUSH
57843: LD_VAR 0 3
57847: PPUSH
57848: CALL_OW 263
57852: PUSH
57853: LD_INT 3
57855: EQUAL
57856: AND
57857: IFFALSE 57873
// HackDestroyVehicle ( unit , selectedUnit ) ;
57859: LD_VAR 0 2
57863: PPUSH
57864: LD_VAR 0 3
57868: PPUSH
57869: CALL 60163 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57873: LD_VAR 0 1
57877: PUSH
57878: LD_INT 255
57880: EQUAL
57881: IFFALSE 57905
57883: PUSH
57884: LD_VAR 0 2
57888: PPUSH
57889: CALL_OW 264
57893: PUSH
57894: LD_INT 14
57896: PUSH
57897: LD_INT 53
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: IN
57904: AND
57905: IFFALSE 57923
57907: PUSH
57908: LD_VAR 0 4
57912: PPUSH
57913: LD_VAR 0 5
57917: PPUSH
57918: CALL_OW 488
57922: AND
57923: IFFALSE 57947
// CutTreeXYR ( unit , x , y , 12 ) ;
57925: LD_VAR 0 2
57929: PPUSH
57930: LD_VAR 0 4
57934: PPUSH
57935: LD_VAR 0 5
57939: PPUSH
57940: LD_INT 12
57942: PPUSH
57943: CALL 58138 0 4
// if cmd = 256 then
57947: LD_VAR 0 1
57951: PUSH
57952: LD_INT 256
57954: EQUAL
57955: IFFALSE 57976
// SetFactoryWaypoint ( unit , x , y ) ;
57957: LD_VAR 0 2
57961: PPUSH
57962: LD_VAR 0 4
57966: PPUSH
57967: LD_VAR 0 5
57971: PPUSH
57972: CALL 63951 0 3
// if cmd = 257 then
57976: LD_VAR 0 1
57980: PUSH
57981: LD_INT 257
57983: EQUAL
57984: IFFALSE 58005
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57986: LD_VAR 0 2
57990: PPUSH
57991: LD_VAR 0 4
57995: PPUSH
57996: LD_VAR 0 5
58000: PPUSH
58001: CALL 64447 0 3
// if cmd = 258 then
58005: LD_VAR 0 1
58009: PUSH
58010: LD_INT 258
58012: EQUAL
58013: IFFALSE 58037
// BurnTreeXYR ( unit , x , y , 8 ) ;
58015: LD_VAR 0 2
58019: PPUSH
58020: LD_VAR 0 4
58024: PPUSH
58025: LD_VAR 0 5
58029: PPUSH
58030: LD_INT 8
58032: PPUSH
58033: CALL 58538 0 4
// end ;
58037: LD_VAR 0 6
58041: RET
// export function ComRadiation ( un ) ; var eff ; begin
58042: LD_INT 0
58044: PPUSH
58045: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58046: LD_VAR 0 1
58050: PPUSH
58051: CALL_OW 264
58055: PUSH
58056: LD_INT 91
58058: NONEQUAL
58059: IFFALSE 58063
// exit ;
58061: GO 58133
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58063: LD_INT 68
58065: PPUSH
58066: LD_VAR 0 1
58070: PPUSH
58071: CALL_OW 255
58075: PPUSH
58076: CALL_OW 321
58080: PUSH
58081: LD_INT 2
58083: EQUAL
58084: IFFALSE 58096
// eff := 50 else
58086: LD_ADDR_VAR 0 3
58090: PUSH
58091: LD_INT 50
58093: ST_TO_ADDR
58094: GO 58104
// eff := 25 ;
58096: LD_ADDR_VAR 0 3
58100: PUSH
58101: LD_INT 25
58103: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58104: LD_VAR 0 1
58108: PPUSH
58109: CALL_OW 250
58113: PPUSH
58114: LD_VAR 0 1
58118: PPUSH
58119: CALL_OW 251
58123: PPUSH
58124: LD_VAR 0 3
58128: PPUSH
58129: CALL_OW 495
// end ;
58133: LD_VAR 0 2
58137: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58138: LD_INT 0
58140: PPUSH
58141: PPUSH
58142: PPUSH
58143: PPUSH
58144: PPUSH
58145: PPUSH
58146: PPUSH
58147: PPUSH
58148: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58149: LD_VAR 0 1
58153: PPUSH
58154: CALL_OW 302
58158: NOT
58159: IFTRUE 58178
58161: PUSH
58162: LD_VAR 0 2
58166: PPUSH
58167: LD_VAR 0 3
58171: PPUSH
58172: CALL_OW 488
58176: NOT
58177: OR
58178: IFTRUE 58187
58180: PUSH
58181: LD_VAR 0 4
58185: NOT
58186: OR
58187: IFFALSE 58191
// exit ;
58189: GO 58533
// list := [ ] ;
58191: LD_ADDR_VAR 0 13
58195: PUSH
58196: EMPTY
58197: ST_TO_ADDR
// if x - r < 0 then
58198: LD_VAR 0 2
58202: PUSH
58203: LD_VAR 0 4
58207: MINUS
58208: PUSH
58209: LD_INT 0
58211: LESS
58212: IFFALSE 58224
// min_x := 0 else
58214: LD_ADDR_VAR 0 7
58218: PUSH
58219: LD_INT 0
58221: ST_TO_ADDR
58222: GO 58240
// min_x := x - r ;
58224: LD_ADDR_VAR 0 7
58228: PUSH
58229: LD_VAR 0 2
58233: PUSH
58234: LD_VAR 0 4
58238: MINUS
58239: ST_TO_ADDR
// if y - r < 0 then
58240: LD_VAR 0 3
58244: PUSH
58245: LD_VAR 0 4
58249: MINUS
58250: PUSH
58251: LD_INT 0
58253: LESS
58254: IFFALSE 58266
// min_y := 0 else
58256: LD_ADDR_VAR 0 8
58260: PUSH
58261: LD_INT 0
58263: ST_TO_ADDR
58264: GO 58282
// min_y := y - r ;
58266: LD_ADDR_VAR 0 8
58270: PUSH
58271: LD_VAR 0 3
58275: PUSH
58276: LD_VAR 0 4
58280: MINUS
58281: ST_TO_ADDR
// max_x := x + r ;
58282: LD_ADDR_VAR 0 9
58286: PUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_VAR 0 4
58296: PLUS
58297: ST_TO_ADDR
// max_y := y + r ;
58298: LD_ADDR_VAR 0 10
58302: PUSH
58303: LD_VAR 0 3
58307: PUSH
58308: LD_VAR 0 4
58312: PLUS
58313: ST_TO_ADDR
// for _x = min_x to max_x do
58314: LD_ADDR_VAR 0 11
58318: PUSH
58319: DOUBLE
58320: LD_VAR 0 7
58324: DEC
58325: ST_TO_ADDR
58326: LD_VAR 0 9
58330: PUSH
58331: FOR_TO
58332: IFFALSE 58451
// for _y = min_y to max_y do
58334: LD_ADDR_VAR 0 12
58338: PUSH
58339: DOUBLE
58340: LD_VAR 0 8
58344: DEC
58345: ST_TO_ADDR
58346: LD_VAR 0 10
58350: PUSH
58351: FOR_TO
58352: IFFALSE 58447
// begin if not ValidHex ( _x , _y ) then
58354: LD_VAR 0 11
58358: PPUSH
58359: LD_VAR 0 12
58363: PPUSH
58364: CALL_OW 488
58368: NOT
58369: IFFALSE 58373
// continue ;
58371: GO 58351
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58373: LD_VAR 0 11
58377: PPUSH
58378: LD_VAR 0 12
58382: PPUSH
58383: CALL_OW 351
58387: IFFALSE 58405
58389: PUSH
58390: LD_VAR 0 11
58394: PPUSH
58395: LD_VAR 0 12
58399: PPUSH
58400: CALL_OW 554
58404: AND
58405: IFFALSE 58445
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58407: LD_ADDR_VAR 0 13
58411: PUSH
58412: LD_VAR 0 13
58416: PPUSH
58417: LD_VAR 0 13
58421: PUSH
58422: LD_INT 1
58424: PLUS
58425: PPUSH
58426: LD_VAR 0 11
58430: PUSH
58431: LD_VAR 0 12
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PPUSH
58440: CALL_OW 2
58444: ST_TO_ADDR
// end ;
58445: GO 58351
58447: POP
58448: POP
58449: GO 58331
58451: POP
58452: POP
// if not list then
58453: LD_VAR 0 13
58457: NOT
58458: IFFALSE 58462
// exit ;
58460: GO 58533
// for i in list do
58462: LD_ADDR_VAR 0 6
58466: PUSH
58467: LD_VAR 0 13
58471: PUSH
58472: FOR_IN
58473: IFFALSE 58531
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58475: LD_VAR 0 1
58479: PPUSH
58480: LD_STRING M
58482: PUSH
58483: LD_VAR 0 6
58487: PUSH
58488: LD_INT 1
58490: ARRAY
58491: PUSH
58492: LD_VAR 0 6
58496: PUSH
58497: LD_INT 2
58499: ARRAY
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: PPUSH
58525: CALL_OW 447
58529: GO 58472
58531: POP
58532: POP
// end ;
58533: LD_VAR 0 5
58537: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58538: LD_INT 0
58540: PPUSH
58541: PPUSH
58542: PPUSH
58543: PPUSH
58544: PPUSH
58545: PPUSH
58546: PPUSH
58547: PPUSH
58548: PPUSH
58549: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58550: LD_VAR 0 1
58554: PPUSH
58555: CALL_OW 302
58559: NOT
58560: IFTRUE 58579
58562: PUSH
58563: LD_VAR 0 2
58567: PPUSH
58568: LD_VAR 0 3
58572: PPUSH
58573: CALL_OW 488
58577: NOT
58578: OR
58579: IFTRUE 58588
58581: PUSH
58582: LD_VAR 0 4
58586: NOT
58587: OR
58588: IFFALSE 58592
// exit ;
58590: GO 59109
// list := [ ] ;
58592: LD_ADDR_VAR 0 13
58596: PUSH
58597: EMPTY
58598: ST_TO_ADDR
// if x - r < 0 then
58599: LD_VAR 0 2
58603: PUSH
58604: LD_VAR 0 4
58608: MINUS
58609: PUSH
58610: LD_INT 0
58612: LESS
58613: IFFALSE 58625
// min_x := 0 else
58615: LD_ADDR_VAR 0 7
58619: PUSH
58620: LD_INT 0
58622: ST_TO_ADDR
58623: GO 58641
// min_x := x - r ;
58625: LD_ADDR_VAR 0 7
58629: PUSH
58630: LD_VAR 0 2
58634: PUSH
58635: LD_VAR 0 4
58639: MINUS
58640: ST_TO_ADDR
// if y - r < 0 then
58641: LD_VAR 0 3
58645: PUSH
58646: LD_VAR 0 4
58650: MINUS
58651: PUSH
58652: LD_INT 0
58654: LESS
58655: IFFALSE 58667
// min_y := 0 else
58657: LD_ADDR_VAR 0 8
58661: PUSH
58662: LD_INT 0
58664: ST_TO_ADDR
58665: GO 58683
// min_y := y - r ;
58667: LD_ADDR_VAR 0 8
58671: PUSH
58672: LD_VAR 0 3
58676: PUSH
58677: LD_VAR 0 4
58681: MINUS
58682: ST_TO_ADDR
// max_x := x + r ;
58683: LD_ADDR_VAR 0 9
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_VAR 0 4
58697: PLUS
58698: ST_TO_ADDR
// max_y := y + r ;
58699: LD_ADDR_VAR 0 10
58703: PUSH
58704: LD_VAR 0 3
58708: PUSH
58709: LD_VAR 0 4
58713: PLUS
58714: ST_TO_ADDR
// for _x = min_x to max_x do
58715: LD_ADDR_VAR 0 11
58719: PUSH
58720: DOUBLE
58721: LD_VAR 0 7
58725: DEC
58726: ST_TO_ADDR
58727: LD_VAR 0 9
58731: PUSH
58732: FOR_TO
58733: IFFALSE 58852
// for _y = min_y to max_y do
58735: LD_ADDR_VAR 0 12
58739: PUSH
58740: DOUBLE
58741: LD_VAR 0 8
58745: DEC
58746: ST_TO_ADDR
58747: LD_VAR 0 10
58751: PUSH
58752: FOR_TO
58753: IFFALSE 58848
// begin if not ValidHex ( _x , _y ) then
58755: LD_VAR 0 11
58759: PPUSH
58760: LD_VAR 0 12
58764: PPUSH
58765: CALL_OW 488
58769: NOT
58770: IFFALSE 58774
// continue ;
58772: GO 58752
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58774: LD_VAR 0 11
58778: PPUSH
58779: LD_VAR 0 12
58783: PPUSH
58784: CALL_OW 351
58788: IFFALSE 58806
58790: PUSH
58791: LD_VAR 0 11
58795: PPUSH
58796: LD_VAR 0 12
58800: PPUSH
58801: CALL_OW 554
58805: AND
58806: IFFALSE 58846
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58808: LD_ADDR_VAR 0 13
58812: PUSH
58813: LD_VAR 0 13
58817: PPUSH
58818: LD_VAR 0 13
58822: PUSH
58823: LD_INT 1
58825: PLUS
58826: PPUSH
58827: LD_VAR 0 11
58831: PUSH
58832: LD_VAR 0 12
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PPUSH
58841: CALL_OW 2
58845: ST_TO_ADDR
// end ;
58846: GO 58752
58848: POP
58849: POP
58850: GO 58732
58852: POP
58853: POP
// if not list then
58854: LD_VAR 0 13
58858: NOT
58859: IFFALSE 58863
// exit ;
58861: GO 59109
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58863: LD_ADDR_VAR 0 13
58867: PUSH
58868: LD_VAR 0 1
58872: PPUSH
58873: LD_VAR 0 13
58877: PPUSH
58878: LD_INT 1
58880: PPUSH
58881: LD_INT 1
58883: PPUSH
58884: CALL 9229 0 4
58888: ST_TO_ADDR
// ComStop ( flame ) ;
58889: LD_VAR 0 1
58893: PPUSH
58894: CALL_OW 141
// for i in list do
58898: LD_ADDR_VAR 0 6
58902: PUSH
58903: LD_VAR 0 13
58907: PUSH
58908: FOR_IN
58909: IFFALSE 58940
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58911: LD_VAR 0 1
58915: PPUSH
58916: LD_VAR 0 6
58920: PUSH
58921: LD_INT 1
58923: ARRAY
58924: PPUSH
58925: LD_VAR 0 6
58929: PUSH
58930: LD_INT 2
58932: ARRAY
58933: PPUSH
58934: CALL_OW 176
58938: GO 58908
58940: POP
58941: POP
// repeat wait ( 0 0$1 ) ;
58942: LD_INT 35
58944: PPUSH
58945: CALL_OW 67
// task := GetTaskList ( flame ) ;
58949: LD_ADDR_VAR 0 14
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 437
58963: ST_TO_ADDR
// if not task then
58964: LD_VAR 0 14
58968: NOT
58969: IFFALSE 58973
// exit ;
58971: GO 59109
// if task [ 1 ] [ 1 ] <> | then
58973: LD_VAR 0 14
58977: PUSH
58978: LD_INT 1
58980: ARRAY
58981: PUSH
58982: LD_INT 1
58984: ARRAY
58985: PUSH
58986: LD_STRING |
58988: NONEQUAL
58989: IFFALSE 58993
// exit ;
58991: GO 59109
// _x := task [ 1 ] [ 2 ] ;
58993: LD_ADDR_VAR 0 11
58997: PUSH
58998: LD_VAR 0 14
59002: PUSH
59003: LD_INT 1
59005: ARRAY
59006: PUSH
59007: LD_INT 2
59009: ARRAY
59010: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59011: LD_ADDR_VAR 0 12
59015: PUSH
59016: LD_VAR 0 14
59020: PUSH
59021: LD_INT 1
59023: ARRAY
59024: PUSH
59025: LD_INT 3
59027: ARRAY
59028: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59029: LD_VAR 0 11
59033: PPUSH
59034: LD_VAR 0 12
59038: PPUSH
59039: CALL_OW 351
59043: NOT
59044: IFTRUE 59063
59046: PUSH
59047: LD_VAR 0 11
59051: PPUSH
59052: LD_VAR 0 12
59056: PPUSH
59057: CALL_OW 554
59061: NOT
59062: OR
59063: IFFALSE 59097
// begin task := Delete ( task , 1 ) ;
59065: LD_ADDR_VAR 0 14
59069: PUSH
59070: LD_VAR 0 14
59074: PPUSH
59075: LD_INT 1
59077: PPUSH
59078: CALL_OW 3
59082: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59083: LD_VAR 0 1
59087: PPUSH
59088: LD_VAR 0 14
59092: PPUSH
59093: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59097: LD_VAR 0 1
59101: PPUSH
59102: CALL_OW 314
59106: NOT
59107: IFFALSE 58942
// end ;
59109: LD_VAR 0 5
59113: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59114: LD_EXP 52
59118: NOT
59119: IFFALSE 59169
59121: GO 59123
59123: DISABLE
// begin initHack := true ;
59124: LD_ADDR_EXP 52
59128: PUSH
59129: LD_INT 1
59131: ST_TO_ADDR
// hackTanks := [ ] ;
59132: LD_ADDR_EXP 53
59136: PUSH
59137: EMPTY
59138: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59139: LD_ADDR_EXP 54
59143: PUSH
59144: EMPTY
59145: ST_TO_ADDR
// hackLimit := 3 ;
59146: LD_ADDR_EXP 55
59150: PUSH
59151: LD_INT 3
59153: ST_TO_ADDR
// hackDist := 12 ;
59154: LD_ADDR_EXP 56
59158: PUSH
59159: LD_INT 12
59161: ST_TO_ADDR
// hackCounter := [ ] ;
59162: LD_ADDR_EXP 57
59166: PUSH
59167: EMPTY
59168: ST_TO_ADDR
// end ;
59169: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59170: LD_EXP 52
59174: IFFALSE 59192
59176: PUSH
59177: LD_INT 34
59179: PUSH
59180: LD_INT 99
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PPUSH
59187: CALL_OW 69
59191: AND
59192: IFFALSE 59445
59194: GO 59196
59196: DISABLE
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
// begin enable ;
59201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59202: LD_ADDR_VAR 0 1
59206: PUSH
59207: LD_INT 34
59209: PUSH
59210: LD_INT 99
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PPUSH
59217: CALL_OW 69
59221: PUSH
59222: FOR_IN
59223: IFFALSE 59443
// begin if not i in hackTanks then
59225: LD_VAR 0 1
59229: PUSH
59230: LD_EXP 53
59234: IN
59235: NOT
59236: IFFALSE 59319
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59238: LD_ADDR_EXP 53
59242: PUSH
59243: LD_EXP 53
59247: PPUSH
59248: LD_EXP 53
59252: PUSH
59253: LD_INT 1
59255: PLUS
59256: PPUSH
59257: LD_VAR 0 1
59261: PPUSH
59262: CALL_OW 1
59266: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59267: LD_ADDR_EXP 54
59271: PUSH
59272: LD_EXP 54
59276: PPUSH
59277: LD_EXP 54
59281: PUSH
59282: LD_INT 1
59284: PLUS
59285: PPUSH
59286: EMPTY
59287: PPUSH
59288: CALL_OW 1
59292: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59293: LD_ADDR_EXP 57
59297: PUSH
59298: LD_EXP 57
59302: PPUSH
59303: LD_EXP 57
59307: PUSH
59308: LD_INT 1
59310: PLUS
59311: PPUSH
59312: EMPTY
59313: PPUSH
59314: CALL_OW 1
59318: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59319: LD_VAR 0 1
59323: PPUSH
59324: CALL_OW 302
59328: NOT
59329: IFFALSE 59342
// begin HackUnlinkAll ( i ) ;
59331: LD_VAR 0 1
59335: PPUSH
59336: CALL 59448 0 1
// continue ;
59340: GO 59222
// end ; HackCheckCapturedStatus ( i ) ;
59342: LD_VAR 0 1
59346: PPUSH
59347: CALL 59893 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59351: LD_ADDR_VAR 0 2
59355: PUSH
59356: LD_INT 81
59358: PUSH
59359: LD_VAR 0 1
59363: PPUSH
59364: CALL_OW 255
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 33
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 91
59385: PUSH
59386: LD_VAR 0 1
59390: PUSH
59391: LD_EXP 56
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 50
59403: PUSH
59404: EMPTY
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: PPUSH
59413: CALL_OW 69
59417: ST_TO_ADDR
// if not tmp then
59418: LD_VAR 0 2
59422: NOT
59423: IFFALSE 59427
// continue ;
59425: GO 59222
// HackLink ( i , tmp ) ;
59427: LD_VAR 0 1
59431: PPUSH
59432: LD_VAR 0 2
59436: PPUSH
59437: CALL 59584 0 2
// end ;
59441: GO 59222
59443: POP
59444: POP
// end ;
59445: PPOPN 2
59447: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59448: LD_INT 0
59450: PPUSH
59451: PPUSH
59452: PPUSH
// if not hack in hackTanks then
59453: LD_VAR 0 1
59457: PUSH
59458: LD_EXP 53
59462: IN
59463: NOT
59464: IFFALSE 59468
// exit ;
59466: GO 59579
// index := GetElementIndex ( hackTanks , hack ) ;
59468: LD_ADDR_VAR 0 4
59472: PUSH
59473: LD_EXP 53
59477: PPUSH
59478: LD_VAR 0 1
59482: PPUSH
59483: CALL 8524 0 2
59487: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59488: LD_EXP 54
59492: PUSH
59493: LD_VAR 0 4
59497: ARRAY
59498: IFFALSE 59579
// begin for i in hackTanksCaptured [ index ] do
59500: LD_ADDR_VAR 0 3
59504: PUSH
59505: LD_EXP 54
59509: PUSH
59510: LD_VAR 0 4
59514: ARRAY
59515: PUSH
59516: FOR_IN
59517: IFFALSE 59543
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59519: LD_VAR 0 3
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PPUSH
59528: LD_VAR 0 3
59532: PUSH
59533: LD_INT 2
59535: ARRAY
59536: PPUSH
59537: CALL_OW 235
59541: GO 59516
59543: POP
59544: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59545: LD_ADDR_EXP 54
59549: PUSH
59550: LD_EXP 54
59554: PPUSH
59555: LD_VAR 0 4
59559: PPUSH
59560: EMPTY
59561: PPUSH
59562: CALL_OW 1
59566: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59567: LD_VAR 0 1
59571: PPUSH
59572: LD_INT 0
59574: PPUSH
59575: CALL_OW 505
// end ; end ;
59579: LD_VAR 0 2
59583: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59584: LD_INT 0
59586: PPUSH
59587: PPUSH
59588: PPUSH
// if not hack in hackTanks or not vehicles then
59589: LD_VAR 0 1
59593: PUSH
59594: LD_EXP 53
59598: IN
59599: NOT
59600: IFTRUE 59609
59602: PUSH
59603: LD_VAR 0 2
59607: NOT
59608: OR
59609: IFFALSE 59613
// exit ;
59611: GO 59888
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59613: LD_ADDR_VAR 0 2
59617: PUSH
59618: LD_VAR 0 1
59622: PPUSH
59623: LD_VAR 0 2
59627: PPUSH
59628: LD_INT 1
59630: PPUSH
59631: LD_INT 1
59633: PPUSH
59634: CALL 9176 0 4
59638: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59639: LD_ADDR_VAR 0 5
59643: PUSH
59644: LD_EXP 53
59648: PPUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL 8524 0 2
59658: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59659: LD_EXP 54
59663: PUSH
59664: LD_VAR 0 5
59668: ARRAY
59669: PUSH
59670: LD_EXP 55
59674: LESS
59675: IFFALSE 59864
// begin for i := 1 to vehicles do
59677: LD_ADDR_VAR 0 4
59681: PUSH
59682: DOUBLE
59683: LD_INT 1
59685: DEC
59686: ST_TO_ADDR
59687: LD_VAR 0 2
59691: PUSH
59692: FOR_TO
59693: IFFALSE 59862
// begin if hackTanksCaptured [ index ] = hackLimit then
59695: LD_EXP 54
59699: PUSH
59700: LD_VAR 0 5
59704: ARRAY
59705: PUSH
59706: LD_EXP 55
59710: EQUAL
59711: IFFALSE 59715
// break ;
59713: GO 59862
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59715: LD_ADDR_EXP 57
59719: PUSH
59720: LD_EXP 57
59724: PPUSH
59725: LD_VAR 0 5
59729: PPUSH
59730: LD_EXP 57
59734: PUSH
59735: LD_VAR 0 5
59739: ARRAY
59740: PUSH
59741: LD_INT 1
59743: PLUS
59744: PPUSH
59745: CALL_OW 1
59749: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59750: LD_ADDR_EXP 54
59754: PUSH
59755: LD_EXP 54
59759: PPUSH
59760: LD_VAR 0 5
59764: PUSH
59765: LD_EXP 54
59769: PUSH
59770: LD_VAR 0 5
59774: ARRAY
59775: PUSH
59776: LD_INT 1
59778: PLUS
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PPUSH
59784: LD_VAR 0 2
59788: PUSH
59789: LD_VAR 0 4
59793: ARRAY
59794: PUSH
59795: LD_VAR 0 2
59799: PUSH
59800: LD_VAR 0 4
59804: ARRAY
59805: PPUSH
59806: CALL_OW 255
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PPUSH
59815: CALL 8741 0 3
59819: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59820: LD_VAR 0 2
59824: PUSH
59825: LD_VAR 0 4
59829: ARRAY
59830: PPUSH
59831: LD_VAR 0 1
59835: PPUSH
59836: CALL_OW 255
59840: PPUSH
59841: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59845: LD_VAR 0 2
59849: PUSH
59850: LD_VAR 0 4
59854: ARRAY
59855: PPUSH
59856: CALL_OW 141
// end ;
59860: GO 59692
59862: POP
59863: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59864: LD_VAR 0 1
59868: PPUSH
59869: LD_EXP 54
59873: PUSH
59874: LD_VAR 0 5
59878: ARRAY
59879: PUSH
59880: LD_INT 0
59882: PLUS
59883: PPUSH
59884: CALL_OW 505
// end ;
59888: LD_VAR 0 3
59892: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59893: LD_INT 0
59895: PPUSH
59896: PPUSH
59897: PPUSH
59898: PPUSH
// if not hack in hackTanks then
59899: LD_VAR 0 1
59903: PUSH
59904: LD_EXP 53
59908: IN
59909: NOT
59910: IFFALSE 59914
// exit ;
59912: GO 60158
// index := GetElementIndex ( hackTanks , hack ) ;
59914: LD_ADDR_VAR 0 4
59918: PUSH
59919: LD_EXP 53
59923: PPUSH
59924: LD_VAR 0 1
59928: PPUSH
59929: CALL 8524 0 2
59933: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59934: LD_ADDR_VAR 0 3
59938: PUSH
59939: DOUBLE
59940: LD_EXP 54
59944: PUSH
59945: LD_VAR 0 4
59949: ARRAY
59950: INC
59951: ST_TO_ADDR
59952: LD_INT 1
59954: PUSH
59955: FOR_DOWNTO
59956: IFFALSE 60132
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59958: LD_ADDR_VAR 0 5
59962: PUSH
59963: LD_EXP 54
59967: PUSH
59968: LD_VAR 0 4
59972: ARRAY
59973: PUSH
59974: LD_VAR 0 3
59978: ARRAY
59979: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59980: LD_VAR 0 5
59984: PUSH
59985: LD_INT 1
59987: ARRAY
59988: PPUSH
59989: CALL_OW 302
59993: NOT
59994: IFTRUE 60022
59996: PUSH
59997: LD_VAR 0 5
60001: PUSH
60002: LD_INT 1
60004: ARRAY
60005: PPUSH
60006: CALL_OW 255
60010: PUSH
60011: LD_VAR 0 1
60015: PPUSH
60016: CALL_OW 255
60020: NONEQUAL
60021: OR
60022: IFFALSE 60130
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60024: LD_VAR 0 5
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: PPUSH
60033: CALL_OW 305
60037: IFFALSE 60065
60039: PUSH
60040: LD_VAR 0 5
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: CALL_OW 255
60053: PUSH
60054: LD_VAR 0 1
60058: PPUSH
60059: CALL_OW 255
60063: EQUAL
60064: AND
60065: IFFALSE 60089
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60067: LD_VAR 0 5
60071: PUSH
60072: LD_INT 1
60074: ARRAY
60075: PPUSH
60076: LD_VAR 0 5
60080: PUSH
60081: LD_INT 2
60083: ARRAY
60084: PPUSH
60085: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60089: LD_ADDR_EXP 54
60093: PUSH
60094: LD_EXP 54
60098: PPUSH
60099: LD_VAR 0 4
60103: PPUSH
60104: LD_EXP 54
60108: PUSH
60109: LD_VAR 0 4
60113: ARRAY
60114: PPUSH
60115: LD_VAR 0 3
60119: PPUSH
60120: CALL_OW 3
60124: PPUSH
60125: CALL_OW 1
60129: ST_TO_ADDR
// end ; end ;
60130: GO 59955
60132: POP
60133: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60134: LD_VAR 0 1
60138: PPUSH
60139: LD_EXP 54
60143: PUSH
60144: LD_VAR 0 4
60148: ARRAY
60149: PUSH
60150: LD_INT 0
60152: PLUS
60153: PPUSH
60154: CALL_OW 505
// end ;
60158: LD_VAR 0 2
60162: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60163: LD_INT 0
60165: PPUSH
60166: PPUSH
60167: PPUSH
60168: PPUSH
// if not hack in hackTanks then
60169: LD_VAR 0 1
60173: PUSH
60174: LD_EXP 53
60178: IN
60179: NOT
60180: IFFALSE 60184
// exit ;
60182: GO 60269
// index := GetElementIndex ( hackTanks , hack ) ;
60184: LD_ADDR_VAR 0 5
60188: PUSH
60189: LD_EXP 53
60193: PPUSH
60194: LD_VAR 0 1
60198: PPUSH
60199: CALL 8524 0 2
60203: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60204: LD_ADDR_VAR 0 4
60208: PUSH
60209: DOUBLE
60210: LD_INT 1
60212: DEC
60213: ST_TO_ADDR
60214: LD_EXP 54
60218: PUSH
60219: LD_VAR 0 5
60223: ARRAY
60224: PUSH
60225: FOR_TO
60226: IFFALSE 60267
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60228: LD_EXP 54
60232: PUSH
60233: LD_VAR 0 5
60237: ARRAY
60238: PUSH
60239: LD_VAR 0 4
60243: ARRAY
60244: PUSH
60245: LD_INT 1
60247: ARRAY
60248: PUSH
60249: LD_VAR 0 2
60253: EQUAL
60254: IFFALSE 60265
// KillUnit ( vehicle ) ;
60256: LD_VAR 0 2
60260: PPUSH
60261: CALL_OW 66
60265: GO 60225
60267: POP
60268: POP
// end ;
60269: LD_VAR 0 3
60273: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60274: LD_EXP 58
60278: NOT
60279: IFFALSE 60412
60281: GO 60283
60283: DISABLE
60284: LD_INT 0
60286: PPUSH
// begin initMiner := true ;
60287: LD_ADDR_EXP 58
60291: PUSH
60292: LD_INT 1
60294: ST_TO_ADDR
// minersList := [ ] ;
60295: LD_ADDR_EXP 59
60299: PUSH
60300: EMPTY
60301: ST_TO_ADDR
// minerMinesList := [ ] ;
60302: LD_ADDR_EXP 60
60306: PUSH
60307: EMPTY
60308: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
60309: LD_ADDR_EXP 61
60313: PUSH
60314: LD_INT 6
60316: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60317: LD_ADDR_VAR 0 1
60321: PUSH
60322: LD_INT 34
60324: PUSH
60325: LD_INT 81
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PPUSH
60332: CALL_OW 69
60336: PUSH
60337: FOR_IN
60338: IFFALSE 60410
// begin if not i in minersList then
60340: LD_VAR 0 1
60344: PUSH
60345: LD_EXP 59
60349: IN
60350: NOT
60351: IFFALSE 60408
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60353: LD_ADDR_EXP 59
60357: PUSH
60358: LD_EXP 59
60362: PPUSH
60363: LD_EXP 59
60367: PUSH
60368: LD_INT 1
60370: PLUS
60371: PPUSH
60372: LD_VAR 0 1
60376: PPUSH
60377: CALL_OW 1
60381: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60382: LD_ADDR_EXP 60
60386: PUSH
60387: LD_EXP 60
60391: PPUSH
60392: LD_EXP 60
60396: PUSH
60397: LD_INT 1
60399: PLUS
60400: PPUSH
60401: EMPTY
60402: PPUSH
60403: CALL_OW 1
60407: ST_TO_ADDR
// end end ;
60408: GO 60337
60410: POP
60411: POP
// end ;
60412: PPOPN 1
60414: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60415: LD_EXP 58
60419: IFFALSE 60450
60421: PUSH
60422: LD_EXP 60
60426: PPUSH
60427: CALL 5823 0 1
60431: IFTRUE 60449
60433: PUSH
60434: LD_INT 34
60436: PUSH
60437: LD_INT 81
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PPUSH
60444: CALL_OW 69
60448: OR
60449: AND
60450: IFFALSE 60949
60452: GO 60454
60454: DISABLE
60455: LD_INT 0
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
// begin enable ;
60461: ENABLE
// for i := minerMinesList downto 1 do
60462: LD_ADDR_VAR 0 1
60466: PUSH
60467: DOUBLE
60468: LD_EXP 60
60472: INC
60473: ST_TO_ADDR
60474: LD_INT 1
60476: PUSH
60477: FOR_DOWNTO
60478: IFFALSE 60947
// begin if IsLive ( minersList [ i ] ) then
60480: LD_EXP 59
60484: PUSH
60485: LD_VAR 0 1
60489: ARRAY
60490: PPUSH
60491: CALL_OW 300
60495: IFFALSE 60528
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60497: LD_EXP 59
60501: PUSH
60502: LD_VAR 0 1
60506: ARRAY
60507: PPUSH
60508: LD_EXP 60
60512: PUSH
60513: LD_VAR 0 1
60517: ARRAY
60518: PPUSH
60519: CALL 5823 0 1
60523: PPUSH
60524: CALL_OW 505
// if not minerMinesList [ i ] then
60528: LD_EXP 60
60532: PUSH
60533: LD_VAR 0 1
60537: ARRAY
60538: NOT
60539: IFFALSE 60543
// continue ;
60541: GO 60477
// for j := minerMinesList [ i ] downto 1 do
60543: LD_ADDR_VAR 0 2
60547: PUSH
60548: DOUBLE
60549: LD_EXP 60
60553: PUSH
60554: LD_VAR 0 1
60558: ARRAY
60559: INC
60560: ST_TO_ADDR
60561: LD_INT 1
60563: PUSH
60564: FOR_DOWNTO
60565: IFFALSE 60943
// begin side := GetSide ( minersList [ i ] ) ;
60567: LD_ADDR_VAR 0 3
60571: PUSH
60572: LD_EXP 59
60576: PUSH
60577: LD_VAR 0 1
60581: ARRAY
60582: PPUSH
60583: CALL_OW 255
60587: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60588: LD_EXP 59
60592: PUSH
60593: LD_VAR 0 1
60597: ARRAY
60598: PPUSH
60599: CALL_OW 301
60603: IFTRUE 60623
60605: PUSH
60606: LD_EXP 59
60610: PUSH
60611: LD_VAR 0 1
60615: ARRAY
60616: PPUSH
60617: CALL_OW 305
60621: NOT
60622: OR
60623: IFFALSE 60714
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60625: LD_EXP 60
60629: PUSH
60630: LD_VAR 0 1
60634: ARRAY
60635: PUSH
60636: LD_VAR 0 2
60640: ARRAY
60641: PUSH
60642: LD_INT 1
60644: ARRAY
60645: PPUSH
60646: LD_EXP 60
60650: PUSH
60651: LD_VAR 0 1
60655: ARRAY
60656: PUSH
60657: LD_VAR 0 2
60661: ARRAY
60662: PUSH
60663: LD_INT 2
60665: ARRAY
60666: PPUSH
60667: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60671: LD_ADDR_EXP 60
60675: PUSH
60676: LD_EXP 60
60680: PPUSH
60681: LD_VAR 0 1
60685: PPUSH
60686: LD_EXP 60
60690: PUSH
60691: LD_VAR 0 1
60695: ARRAY
60696: PPUSH
60697: LD_VAR 0 2
60701: PPUSH
60702: CALL_OW 3
60706: PPUSH
60707: CALL_OW 1
60711: ST_TO_ADDR
// continue ;
60712: GO 60564
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60714: LD_ADDR_VAR 0 4
60718: PUSH
60719: LD_EXP 60
60723: PUSH
60724: LD_VAR 0 1
60728: ARRAY
60729: PUSH
60730: LD_VAR 0 2
60734: ARRAY
60735: PUSH
60736: LD_INT 1
60738: ARRAY
60739: PPUSH
60740: LD_EXP 60
60744: PUSH
60745: LD_VAR 0 1
60749: ARRAY
60750: PUSH
60751: LD_VAR 0 2
60755: ARRAY
60756: PUSH
60757: LD_INT 2
60759: ARRAY
60760: PPUSH
60761: CALL_OW 428
60765: ST_TO_ADDR
// if not tmp then
60766: LD_VAR 0 4
60770: NOT
60771: IFFALSE 60775
// continue ;
60773: GO 60564
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60775: LD_VAR 0 4
60779: PUSH
60780: LD_INT 81
60782: PUSH
60783: LD_VAR 0 3
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PPUSH
60792: CALL_OW 69
60796: IN
60797: IFFALSE 60847
60799: PUSH
60800: LD_EXP 60
60804: PUSH
60805: LD_VAR 0 1
60809: ARRAY
60810: PUSH
60811: LD_VAR 0 2
60815: ARRAY
60816: PUSH
60817: LD_INT 1
60819: ARRAY
60820: PPUSH
60821: LD_EXP 60
60825: PUSH
60826: LD_VAR 0 1
60830: ARRAY
60831: PUSH
60832: LD_VAR 0 2
60836: ARRAY
60837: PUSH
60838: LD_INT 2
60840: ARRAY
60841: PPUSH
60842: CALL_OW 458
60846: AND
60847: IFFALSE 60941
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60849: LD_EXP 60
60853: PUSH
60854: LD_VAR 0 1
60858: ARRAY
60859: PUSH
60860: LD_VAR 0 2
60864: ARRAY
60865: PUSH
60866: LD_INT 1
60868: ARRAY
60869: PPUSH
60870: LD_EXP 60
60874: PUSH
60875: LD_VAR 0 1
60879: ARRAY
60880: PUSH
60881: LD_VAR 0 2
60885: ARRAY
60886: PUSH
60887: LD_INT 2
60889: ARRAY
60890: PPUSH
60891: LD_VAR 0 3
60895: PPUSH
60896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60900: LD_ADDR_EXP 60
60904: PUSH
60905: LD_EXP 60
60909: PPUSH
60910: LD_VAR 0 1
60914: PPUSH
60915: LD_EXP 60
60919: PUSH
60920: LD_VAR 0 1
60924: ARRAY
60925: PPUSH
60926: LD_VAR 0 2
60930: PPUSH
60931: CALL_OW 3
60935: PPUSH
60936: CALL_OW 1
60940: ST_TO_ADDR
// end ; end ;
60941: GO 60564
60943: POP
60944: POP
// end ;
60945: GO 60477
60947: POP
60948: POP
// end ;
60949: PPOPN 4
60951: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60952: LD_INT 0
60954: PPUSH
60955: PPUSH
60956: PPUSH
60957: PPUSH
// result := false ;
60958: LD_ADDR_VAR 0 4
60962: PUSH
60963: LD_INT 0
60965: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60966: LD_VAR 0 1
60970: PPUSH
60971: CALL_OW 264
60975: PUSH
60976: LD_INT 81
60978: EQUAL
60979: NOT
60980: IFFALSE 60984
// exit ;
60982: GO 61354
// side := GetSide ( unit ) ;
60984: LD_ADDR_VAR 0 6
60988: PUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 255
60998: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60999: LD_ADDR_VAR 0 5
61003: PUSH
61004: LD_EXP 59
61008: PPUSH
61009: LD_VAR 0 1
61013: PPUSH
61014: CALL 8524 0 2
61018: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61019: LD_EXP 60
61023: PUSH
61024: LD_VAR 0 5
61028: ARRAY
61029: PUSH
61030: LD_EXP 61
61034: GREATEREQUAL
61035: IFFALSE 61039
// exit ;
61037: GO 61354
// ComMoveXY ( unit , x , y ) ;
61039: LD_VAR 0 1
61043: PPUSH
61044: LD_VAR 0 2
61048: PPUSH
61049: LD_VAR 0 3
61053: PPUSH
61054: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61058: LD_INT 35
61060: PPUSH
61061: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61065: LD_VAR 0 1
61069: PPUSH
61070: LD_VAR 0 2
61074: PPUSH
61075: LD_VAR 0 3
61079: PPUSH
61080: CALL 40570 0 3
61084: NOT
61085: IFFALSE 61098
61087: PUSH
61088: LD_VAR 0 1
61092: PPUSH
61093: CALL_OW 314
61097: AND
61098: IFFALSE 61102
// exit ;
61100: GO 61354
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61102: LD_VAR 0 2
61106: PPUSH
61107: LD_VAR 0 3
61111: PPUSH
61112: CALL_OW 428
61116: PUSH
61117: LD_VAR 0 1
61121: EQUAL
61122: IFFALSE 61136
61124: PUSH
61125: LD_VAR 0 1
61129: PPUSH
61130: CALL_OW 314
61134: NOT
61135: AND
61136: IFFALSE 61058
// if MineAtPos ( x , y ) then
61138: LD_VAR 0 2
61142: PPUSH
61143: LD_VAR 0 3
61147: PPUSH
61148: CALL_OW 458
61152: IFFALSE 61156
// exit ;
61154: GO 61354
// if your_side = side then
61156: LD_OWVAR 2
61160: PUSH
61161: LD_VAR 0 6
61165: EQUAL
61166: IFFALSE 61185
// PlaySoundXY ( x , y , PlantMine ) ;
61168: LD_VAR 0 2
61172: PPUSH
61173: LD_VAR 0 3
61177: PPUSH
61178: LD_STRING PlantMine
61180: PPUSH
61181: CALL_OW 366
// repeat wait ( 1 ) ;
61185: LD_INT 1
61187: PPUSH
61188: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61192: LD_VAR 0 2
61196: PPUSH
61197: LD_VAR 0 3
61201: PPUSH
61202: LD_VAR 0 6
61206: PPUSH
61207: LD_INT 0
61209: PPUSH
61210: CALL_OW 454
61214: IFFALSE 61185
// if MineAtPos ( x , y ) then
61216: LD_VAR 0 2
61220: PPUSH
61221: LD_VAR 0 3
61225: PPUSH
61226: CALL_OW 458
61230: IFFALSE 61346
// begin for i in minerMinesList [ index ] do
61232: LD_ADDR_VAR 0 7
61236: PUSH
61237: LD_EXP 60
61241: PUSH
61242: LD_VAR 0 5
61246: ARRAY
61247: PUSH
61248: FOR_IN
61249: IFFALSE 61291
// if i [ 1 ] = x and i [ 2 ] = y then
61251: LD_VAR 0 7
61255: PUSH
61256: LD_INT 1
61258: ARRAY
61259: PUSH
61260: LD_VAR 0 2
61264: EQUAL
61265: IFFALSE 61283
61267: PUSH
61268: LD_VAR 0 7
61272: PUSH
61273: LD_INT 2
61275: ARRAY
61276: PUSH
61277: LD_VAR 0 3
61281: EQUAL
61282: AND
61283: IFFALSE 61289
// exit ;
61285: POP
61286: POP
61287: GO 61354
61289: GO 61248
61291: POP
61292: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61293: LD_ADDR_EXP 60
61297: PUSH
61298: LD_EXP 60
61302: PPUSH
61303: LD_VAR 0 5
61307: PUSH
61308: LD_EXP 60
61312: PUSH
61313: LD_VAR 0 5
61317: ARRAY
61318: PUSH
61319: LD_INT 1
61321: PLUS
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PPUSH
61327: LD_VAR 0 2
61331: PUSH
61332: LD_VAR 0 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PPUSH
61341: CALL 8741 0 3
61345: ST_TO_ADDR
// end ; result := true ;
61346: LD_ADDR_VAR 0 4
61350: PUSH
61351: LD_INT 1
61353: ST_TO_ADDR
// end ;
61354: LD_VAR 0 4
61358: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61359: LD_INT 0
61361: PPUSH
61362: PPUSH
61363: PPUSH
// if not unit in minersList then
61364: LD_VAR 0 1
61368: PUSH
61369: LD_EXP 59
61373: IN
61374: NOT
61375: IFFALSE 61379
// exit ;
61377: GO 61586
// index := GetElementIndex ( minersList , unit ) ;
61379: LD_ADDR_VAR 0 6
61383: PUSH
61384: LD_EXP 59
61388: PPUSH
61389: LD_VAR 0 1
61393: PPUSH
61394: CALL 8524 0 2
61398: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61399: LD_ADDR_VAR 0 5
61403: PUSH
61404: DOUBLE
61405: LD_EXP 60
61409: PUSH
61410: LD_VAR 0 6
61414: ARRAY
61415: INC
61416: ST_TO_ADDR
61417: LD_INT 1
61419: PUSH
61420: FOR_DOWNTO
61421: IFFALSE 61584
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61423: LD_EXP 60
61427: PUSH
61428: LD_VAR 0 6
61432: ARRAY
61433: PUSH
61434: LD_VAR 0 5
61438: ARRAY
61439: PUSH
61440: LD_INT 1
61442: ARRAY
61443: PPUSH
61444: LD_EXP 60
61448: PUSH
61449: LD_VAR 0 6
61453: ARRAY
61454: PUSH
61455: LD_VAR 0 5
61459: ARRAY
61460: PUSH
61461: LD_INT 2
61463: ARRAY
61464: PPUSH
61465: LD_VAR 0 2
61469: PPUSH
61470: LD_VAR 0 3
61474: PPUSH
61475: CALL_OW 298
61479: PUSH
61480: LD_INT 6
61482: LESS
61483: IFFALSE 61582
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61485: LD_EXP 60
61489: PUSH
61490: LD_VAR 0 6
61494: ARRAY
61495: PUSH
61496: LD_VAR 0 5
61500: ARRAY
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: PPUSH
61506: LD_EXP 60
61510: PUSH
61511: LD_VAR 0 6
61515: ARRAY
61516: PUSH
61517: LD_VAR 0 5
61521: ARRAY
61522: PUSH
61523: LD_INT 2
61525: ARRAY
61526: PPUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: CALL_OW 255
61536: PPUSH
61537: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61541: LD_ADDR_EXP 60
61545: PUSH
61546: LD_EXP 60
61550: PPUSH
61551: LD_VAR 0 6
61555: PPUSH
61556: LD_EXP 60
61560: PUSH
61561: LD_VAR 0 6
61565: ARRAY
61566: PPUSH
61567: LD_VAR 0 5
61571: PPUSH
61572: CALL_OW 3
61576: PPUSH
61577: CALL_OW 1
61581: ST_TO_ADDR
// end ; end ;
61582: GO 61420
61584: POP
61585: POP
// end ;
61586: LD_VAR 0 4
61590: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61591: LD_INT 0
61593: PPUSH
61594: PPUSH
61595: PPUSH
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
61600: PPUSH
61601: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61602: LD_VAR 0 1
61606: PPUSH
61607: CALL_OW 264
61611: PUSH
61612: LD_INT 81
61614: EQUAL
61615: NOT
61616: IFTRUE 61631
61618: PUSH
61619: LD_VAR 0 1
61623: PUSH
61624: LD_EXP 59
61628: IN
61629: NOT
61630: OR
61631: IFFALSE 61635
// exit ;
61633: GO 61961
// index := GetElementIndex ( minersList , unit ) ;
61635: LD_ADDR_VAR 0 6
61639: PUSH
61640: LD_EXP 59
61644: PPUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: CALL 8524 0 2
61654: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61655: LD_ADDR_VAR 0 8
61659: PUSH
61660: LD_EXP 61
61664: PUSH
61665: LD_EXP 60
61669: PUSH
61670: LD_VAR 0 6
61674: ARRAY
61675: MINUS
61676: ST_TO_ADDR
// if not minesFreeAmount then
61677: LD_VAR 0 8
61681: NOT
61682: IFFALSE 61686
// exit ;
61684: GO 61961
// tmp := [ ] ;
61686: LD_ADDR_VAR 0 7
61690: PUSH
61691: EMPTY
61692: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61693: LD_ADDR_VAR 0 5
61697: PUSH
61698: DOUBLE
61699: LD_INT 1
61701: DEC
61702: ST_TO_ADDR
61703: LD_VAR 0 8
61707: PUSH
61708: FOR_TO
61709: IFFALSE 61908
// begin _d := rand ( 0 , 5 ) ;
61711: LD_ADDR_VAR 0 11
61715: PUSH
61716: LD_INT 0
61718: PPUSH
61719: LD_INT 5
61721: PPUSH
61722: CALL_OW 12
61726: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61727: LD_ADDR_VAR 0 12
61731: PUSH
61732: LD_INT 2
61734: PPUSH
61735: LD_INT 6
61737: PPUSH
61738: CALL_OW 12
61742: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61743: LD_ADDR_VAR 0 9
61747: PUSH
61748: LD_VAR 0 2
61752: PPUSH
61753: LD_VAR 0 11
61757: PPUSH
61758: LD_VAR 0 12
61762: PPUSH
61763: CALL_OW 272
61767: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61768: LD_ADDR_VAR 0 10
61772: PUSH
61773: LD_VAR 0 3
61777: PPUSH
61778: LD_VAR 0 11
61782: PPUSH
61783: LD_VAR 0 12
61787: PPUSH
61788: CALL_OW 273
61792: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61793: LD_VAR 0 9
61797: PPUSH
61798: LD_VAR 0 10
61802: PPUSH
61803: CALL_OW 488
61807: IFFALSE 61831
61809: PUSH
61810: LD_VAR 0 9
61814: PUSH
61815: LD_VAR 0 10
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_VAR 0 7
61828: IN
61829: NOT
61830: AND
61831: IFFALSE 61850
61833: PUSH
61834: LD_VAR 0 9
61838: PPUSH
61839: LD_VAR 0 10
61843: PPUSH
61844: CALL_OW 458
61848: NOT
61849: AND
61850: IFFALSE 61892
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61852: LD_ADDR_VAR 0 7
61856: PUSH
61857: LD_VAR 0 7
61861: PPUSH
61862: LD_VAR 0 7
61866: PUSH
61867: LD_INT 1
61869: PLUS
61870: PPUSH
61871: LD_VAR 0 9
61875: PUSH
61876: LD_VAR 0 10
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PPUSH
61885: CALL_OW 1
61889: ST_TO_ADDR
61890: GO 61906
// i := i - 1 ;
61892: LD_ADDR_VAR 0 5
61896: PUSH
61897: LD_VAR 0 5
61901: PUSH
61902: LD_INT 1
61904: MINUS
61905: ST_TO_ADDR
// end ;
61906: GO 61708
61908: POP
61909: POP
// for i in tmp do
61910: LD_ADDR_VAR 0 5
61914: PUSH
61915: LD_VAR 0 7
61919: PUSH
61920: FOR_IN
61921: IFFALSE 61959
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61923: LD_VAR 0 1
61927: PPUSH
61928: LD_VAR 0 5
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PPUSH
61937: LD_VAR 0 5
61941: PUSH
61942: LD_INT 2
61944: ARRAY
61945: PPUSH
61946: CALL 60952 0 3
61950: NOT
61951: IFFALSE 61957
// exit ;
61953: POP
61954: POP
61955: GO 61961
61957: GO 61920
61959: POP
61960: POP
// end ;
61961: LD_VAR 0 4
61965: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61966: LD_INT 0
61968: PPUSH
61969: PPUSH
61970: PPUSH
61971: PPUSH
61972: PPUSH
61973: PPUSH
61974: PPUSH
61975: PPUSH
61976: PPUSH
// if GetClass ( unit ) <> class_sniper then
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 257
61986: PUSH
61987: LD_INT 5
61989: NONEQUAL
61990: IFFALSE 61994
// exit ;
61992: GO 62464
// dist := 8 ;
61994: LD_ADDR_VAR 0 5
61998: PUSH
61999: LD_INT 8
62001: ST_TO_ADDR
// viewRange := 12 ;
62002: LD_ADDR_VAR 0 8
62006: PUSH
62007: LD_INT 12
62009: ST_TO_ADDR
// side := GetSide ( unit ) ;
62010: LD_ADDR_VAR 0 6
62014: PUSH
62015: LD_VAR 0 1
62019: PPUSH
62020: CALL_OW 255
62024: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62025: LD_INT 61
62027: PPUSH
62028: LD_VAR 0 6
62032: PPUSH
62033: CALL_OW 321
62037: PUSH
62038: LD_INT 2
62040: EQUAL
62041: IFFALSE 62051
// viewRange := 16 ;
62043: LD_ADDR_VAR 0 8
62047: PUSH
62048: LD_INT 16
62050: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62051: LD_VAR 0 1
62055: PPUSH
62056: LD_VAR 0 2
62060: PPUSH
62061: LD_VAR 0 3
62065: PPUSH
62066: CALL_OW 297
62070: PUSH
62071: LD_VAR 0 5
62075: GREATER
62076: IFFALSE 62155
// begin ComMoveXY ( unit , x , y ) ;
62078: LD_VAR 0 1
62082: PPUSH
62083: LD_VAR 0 2
62087: PPUSH
62088: LD_VAR 0 3
62092: PPUSH
62093: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62097: LD_INT 35
62099: PPUSH
62100: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62104: LD_VAR 0 1
62108: PPUSH
62109: LD_VAR 0 2
62113: PPUSH
62114: LD_VAR 0 3
62118: PPUSH
62119: CALL 40570 0 3
62123: NOT
62124: IFFALSE 62128
// exit ;
62126: GO 62464
// until GetDistUnitXY ( unit , x , y ) < dist ;
62128: LD_VAR 0 1
62132: PPUSH
62133: LD_VAR 0 2
62137: PPUSH
62138: LD_VAR 0 3
62142: PPUSH
62143: CALL_OW 297
62147: PUSH
62148: LD_VAR 0 5
62152: LESS
62153: IFFALSE 62097
// end ; ComTurnXY ( unit , x , y ) ;
62155: LD_VAR 0 1
62159: PPUSH
62160: LD_VAR 0 2
62164: PPUSH
62165: LD_VAR 0 3
62169: PPUSH
62170: CALL_OW 118
// repeat if Multiplayer then
62174: LD_OWVAR 4
62178: IFFALSE 62189
// wait ( 35 ) else
62180: LD_INT 35
62182: PPUSH
62183: CALL_OW 67
62187: GO 62196
// wait ( 5 ) ;
62189: LD_INT 5
62191: PPUSH
62192: CALL_OW 67
// _d := GetDir ( unit ) ;
62196: LD_ADDR_VAR 0 11
62200: PUSH
62201: LD_VAR 0 1
62205: PPUSH
62206: CALL_OW 254
62210: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62211: LD_ADDR_VAR 0 7
62215: PUSH
62216: LD_VAR 0 1
62220: PPUSH
62221: CALL_OW 250
62225: PPUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: CALL_OW 251
62235: PPUSH
62236: LD_VAR 0 2
62240: PPUSH
62241: LD_VAR 0 3
62245: PPUSH
62246: CALL 43206 0 4
62250: ST_TO_ADDR
// until dir = _d ;
62251: LD_VAR 0 7
62255: PUSH
62256: LD_VAR 0 11
62260: EQUAL
62261: IFFALSE 62174
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62263: LD_ADDR_VAR 0 9
62267: PUSH
62268: LD_VAR 0 1
62272: PPUSH
62273: CALL_OW 250
62277: PPUSH
62278: LD_VAR 0 7
62282: PPUSH
62283: LD_VAR 0 5
62287: PPUSH
62288: CALL_OW 272
62292: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62293: LD_ADDR_VAR 0 10
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 251
62307: PPUSH
62308: LD_VAR 0 7
62312: PPUSH
62313: LD_VAR 0 5
62317: PPUSH
62318: CALL_OW 273
62322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62323: LD_VAR 0 9
62327: PPUSH
62328: LD_VAR 0 10
62332: PPUSH
62333: CALL_OW 488
62337: NOT
62338: IFFALSE 62342
// exit ;
62340: GO 62464
// ComAnimCustom ( unit , 1 ) ;
62342: LD_VAR 0 1
62346: PPUSH
62347: LD_INT 1
62349: PPUSH
62350: CALL_OW 592
// p := 0 ;
62354: LD_ADDR_VAR 0 12
62358: PUSH
62359: LD_INT 0
62361: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62362: LD_VAR 0 9
62366: PPUSH
62367: LD_VAR 0 10
62371: PPUSH
62372: LD_VAR 0 6
62376: PPUSH
62377: LD_VAR 0 8
62381: PPUSH
62382: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62386: LD_INT 35
62388: PPUSH
62389: CALL_OW 67
// p := Inc ( p ) ;
62393: LD_ADDR_VAR 0 12
62397: PUSH
62398: LD_VAR 0 12
62402: PPUSH
62403: CALL 43162 0 1
62407: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62408: LD_VAR 0 12
62412: PUSH
62413: LD_INT 3
62415: EQUAL
62416: IFTRUE 62430
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: CALL_OW 302
62428: NOT
62429: OR
62430: IFTRUE 62443
62432: PUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: CALL_OW 301
62442: OR
62443: IFFALSE 62386
// RemoveSeeing ( _x , _y , side ) ;
62445: LD_VAR 0 9
62449: PPUSH
62450: LD_VAR 0 10
62454: PPUSH
62455: LD_VAR 0 6
62459: PPUSH
62460: CALL_OW 331
// end ;
62464: LD_VAR 0 4
62468: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62469: LD_INT 0
62471: PPUSH
62472: PPUSH
62473: PPUSH
62474: PPUSH
62475: PPUSH
62476: PPUSH
62477: PPUSH
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
// if not unit then
62482: LD_VAR 0 1
62486: NOT
62487: IFFALSE 62491
// exit ;
62489: GO 62762
// side := GetSide ( unit ) ;
62491: LD_ADDR_VAR 0 3
62495: PUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL_OW 255
62505: ST_TO_ADDR
// x := GetX ( unit ) ;
62506: LD_ADDR_VAR 0 5
62510: PUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: CALL_OW 250
62520: ST_TO_ADDR
// y := GetY ( unit ) ;
62521: LD_ADDR_VAR 0 6
62525: PUSH
62526: LD_VAR 0 1
62530: PPUSH
62531: CALL_OW 251
62535: ST_TO_ADDR
// r := 8 ;
62536: LD_ADDR_VAR 0 4
62540: PUSH
62541: LD_INT 8
62543: ST_TO_ADDR
// if x - r < 0 then
62544: LD_VAR 0 5
62548: PUSH
62549: LD_VAR 0 4
62553: MINUS
62554: PUSH
62555: LD_INT 0
62557: LESS
62558: IFFALSE 62570
// min_x := 0 else
62560: LD_ADDR_VAR 0 7
62564: PUSH
62565: LD_INT 0
62567: ST_TO_ADDR
62568: GO 62586
// min_x := x - r ;
62570: LD_ADDR_VAR 0 7
62574: PUSH
62575: LD_VAR 0 5
62579: PUSH
62580: LD_VAR 0 4
62584: MINUS
62585: ST_TO_ADDR
// if y - r < 0 then
62586: LD_VAR 0 6
62590: PUSH
62591: LD_VAR 0 4
62595: MINUS
62596: PUSH
62597: LD_INT 0
62599: LESS
62600: IFFALSE 62612
// min_y := 0 else
62602: LD_ADDR_VAR 0 8
62606: PUSH
62607: LD_INT 0
62609: ST_TO_ADDR
62610: GO 62628
// min_y := y - r ;
62612: LD_ADDR_VAR 0 8
62616: PUSH
62617: LD_VAR 0 6
62621: PUSH
62622: LD_VAR 0 4
62626: MINUS
62627: ST_TO_ADDR
// max_x := x + r ;
62628: LD_ADDR_VAR 0 9
62632: PUSH
62633: LD_VAR 0 5
62637: PUSH
62638: LD_VAR 0 4
62642: PLUS
62643: ST_TO_ADDR
// max_y := y + r ;
62644: LD_ADDR_VAR 0 10
62648: PUSH
62649: LD_VAR 0 6
62653: PUSH
62654: LD_VAR 0 4
62658: PLUS
62659: ST_TO_ADDR
// for _x = min_x to max_x do
62660: LD_ADDR_VAR 0 11
62664: PUSH
62665: DOUBLE
62666: LD_VAR 0 7
62670: DEC
62671: ST_TO_ADDR
62672: LD_VAR 0 9
62676: PUSH
62677: FOR_TO
62678: IFFALSE 62760
// for _y = min_y to max_y do
62680: LD_ADDR_VAR 0 12
62684: PUSH
62685: DOUBLE
62686: LD_VAR 0 8
62690: DEC
62691: ST_TO_ADDR
62692: LD_VAR 0 10
62696: PUSH
62697: FOR_TO
62698: IFFALSE 62756
// begin if not ValidHex ( _x , _y ) then
62700: LD_VAR 0 11
62704: PPUSH
62705: LD_VAR 0 12
62709: PPUSH
62710: CALL_OW 488
62714: NOT
62715: IFFALSE 62719
// continue ;
62717: GO 62697
// if MineAtPos ( _x , _y ) then
62719: LD_VAR 0 11
62723: PPUSH
62724: LD_VAR 0 12
62728: PPUSH
62729: CALL_OW 458
62733: IFFALSE 62754
// ViewMineAtPos ( _x , _y , side ) ;
62735: LD_VAR 0 11
62739: PPUSH
62740: LD_VAR 0 12
62744: PPUSH
62745: LD_VAR 0 3
62749: PPUSH
62750: CALL_OW 457
// end ;
62754: GO 62697
62756: POP
62757: POP
62758: GO 62677
62760: POP
62761: POP
// end ;
62762: LD_VAR 0 2
62766: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62767: LD_INT 0
62769: PPUSH
62770: PPUSH
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
// if not units then
62775: LD_VAR 0 1
62779: NOT
62780: IFFALSE 62784
// exit ;
62782: GO 63214
// scaners := [ ] ;
62784: LD_ADDR_VAR 0 6
62788: PUSH
62789: EMPTY
62790: ST_TO_ADDR
// for i in units do
62791: LD_ADDR_VAR 0 3
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: FOR_IN
62802: IFFALSE 62959
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62804: LD_VAR 0 3
62808: PPUSH
62809: CALL_OW 264
62813: PUSH
62814: LD_INT 11
62816: NONEQUAL
62817: IFTRUE 62831
62819: PUSH
62820: LD_VAR 0 3
62824: PPUSH
62825: CALL_OW 302
62829: NOT
62830: OR
62831: IFTRUE 62848
62833: PUSH
62834: LD_VAR 0 3
62838: PPUSH
62839: CALL_OW 110
62843: PUSH
62844: LD_INT 502
62846: EQUAL
62847: OR
62848: IFFALSE 62852
// continue ;
62850: GO 62801
// ComStop ( i ) ;
62852: LD_VAR 0 3
62856: PPUSH
62857: CALL_OW 141
// x := GetX ( i ) ;
62861: LD_ADDR_VAR 0 4
62865: PUSH
62866: LD_VAR 0 3
62870: PPUSH
62871: CALL_OW 250
62875: ST_TO_ADDR
// y := GetY ( i ) ;
62876: LD_ADDR_VAR 0 5
62880: PUSH
62881: LD_VAR 0 3
62885: PPUSH
62886: CALL_OW 251
62890: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62891: LD_VAR 0 3
62895: PPUSH
62896: CALL_OW 255
62900: PUSH
62901: LD_OWVAR 2
62905: EQUAL
62906: IFFALSE 62925
// PlaySoundXY ( x , y , mineDetector ) ;
62908: LD_VAR 0 4
62912: PPUSH
62913: LD_VAR 0 5
62917: PPUSH
62918: LD_STRING mineDetector
62920: PPUSH
62921: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62925: LD_ADDR_VAR 0 6
62929: PUSH
62930: LD_VAR 0 6
62934: PPUSH
62935: LD_VAR 0 3
62939: PPUSH
62940: CALL 41789 0 2
62944: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62945: LD_VAR 0 3
62949: PPUSH
62950: LD_INT 502
62952: PPUSH
62953: CALL_OW 109
// end ;
62957: GO 62801
62959: POP
62960: POP
// if not scaners then
62961: LD_VAR 0 6
62965: NOT
62966: IFFALSE 62970
// exit ;
62968: GO 63214
// wait ( 3 ) ;
62970: LD_INT 3
62972: PPUSH
62973: CALL_OW 67
// timer := 6 ;
62977: LD_ADDR_VAR 0 7
62981: PUSH
62982: LD_INT 6
62984: ST_TO_ADDR
// repeat for i in scaners do
62985: LD_ADDR_VAR 0 3
62989: PUSH
62990: LD_VAR 0 6
62994: PUSH
62995: FOR_IN
62996: IFFALSE 63112
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62998: LD_VAR 0 3
63002: PPUSH
63003: CALL_OW 302
63007: NOT
63008: IFTRUE 63021
63010: PUSH
63011: LD_VAR 0 3
63015: PPUSH
63016: CALL_OW 314
63020: OR
63021: IFTRUE 63052
63023: PUSH
63024: LD_VAR 0 3
63028: PPUSH
63029: CALL_OW 263
63033: PUSH
63034: LD_INT 1
63036: EQUAL
63037: IFFALSE 63051
63039: PUSH
63040: LD_VAR 0 3
63044: PPUSH
63045: CALL_OW 311
63049: NOT
63050: AND
63051: OR
63052: IFFALSE 63096
// begin SetUnitDisplayNumber ( i , 0 ) ;
63054: LD_VAR 0 3
63058: PPUSH
63059: LD_INT 0
63061: PPUSH
63062: CALL_OW 505
// SetTag ( i , 0 ) ;
63066: LD_VAR 0 3
63070: PPUSH
63071: LD_INT 0
63073: PPUSH
63074: CALL_OW 109
// scaners := scaners diff i ;
63078: LD_ADDR_VAR 0 6
63082: PUSH
63083: LD_VAR 0 6
63087: PUSH
63088: LD_VAR 0 3
63092: DIFF
63093: ST_TO_ADDR
// continue ;
63094: GO 62995
// end ; SetUnitDisplayNumber ( i , timer ) ;
63096: LD_VAR 0 3
63100: PPUSH
63101: LD_VAR 0 7
63105: PPUSH
63106: CALL_OW 505
// end ;
63110: GO 62995
63112: POP
63113: POP
// if not scaners then
63114: LD_VAR 0 6
63118: NOT
63119: IFFALSE 63123
// exit ;
63121: GO 63214
// timer := Dec ( timer ) ;
63123: LD_ADDR_VAR 0 7
63127: PUSH
63128: LD_VAR 0 7
63132: PPUSH
63133: CALL 43184 0 1
63137: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63138: LD_INT 35
63140: PPUSH
63141: CALL_OW 67
// until timer = 0 ;
63145: LD_VAR 0 7
63149: PUSH
63150: LD_INT 0
63152: EQUAL
63153: IFFALSE 62985
// if not scaners then
63155: LD_VAR 0 6
63159: NOT
63160: IFFALSE 63164
// exit ;
63162: GO 63214
// for i in scaners do
63164: LD_ADDR_VAR 0 3
63168: PUSH
63169: LD_VAR 0 6
63173: PUSH
63174: FOR_IN
63175: IFFALSE 63212
// begin SetUnitDisplayNumber ( i , 0 ) ;
63177: LD_VAR 0 3
63181: PPUSH
63182: LD_INT 0
63184: PPUSH
63185: CALL_OW 505
// SetTag ( i , 0 ) ;
63189: LD_VAR 0 3
63193: PPUSH
63194: LD_INT 0
63196: PPUSH
63197: CALL_OW 109
// RevealDetectorMine ( i ) ;
63201: LD_VAR 0 3
63205: PPUSH
63206: CALL 62469 0 1
// end ;
63210: GO 63174
63212: POP
63213: POP
// end ;
63214: LD_VAR 0 2
63218: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63219: LD_INT 0
63221: PPUSH
// if p1 = mine_detector_mode then
63222: LD_VAR 0 2
63226: PUSH
63227: LD_INT 103
63229: EQUAL
63230: IFFALSE 63241
// DetectMine ( units ) ;
63232: LD_VAR 0 1
63236: PPUSH
63237: CALL 62767 0 1
// end ; end_of_file
63241: LD_VAR 0 7
63245: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63246: PPOPN 6
63248: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63249: LD_INT 0
63251: PPUSH
// begin if not units then
63252: LD_VAR 0 1
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63295
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_VAR 0 2
63270: PPUSH
63271: LD_VAR 0 3
63275: PPUSH
63276: LD_VAR 0 4
63280: PPUSH
63281: LD_VAR 0 5
63285: PPUSH
63286: LD_VAR 0 6
63290: PPUSH
63291: CALL 63219 0 6
// end ;
63295: PPOPN 7
63297: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63298: LD_EXP 5
63302: PUSH
63303: LD_INT 4
63305: EQUAL
63306: IFFALSE 63342
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63308: LD_STRING setGameDifficulty(
63310: PUSH
63311: LD_OWVAR 67
63315: STR
63316: PUSH
63317: LD_STRING )
63319: STR
63320: PPUSH
63321: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63325: LD_STRING displayDifficulty(
63327: PUSH
63328: LD_OWVAR 67
63332: STR
63333: PUSH
63334: LD_STRING )
63336: STR
63337: PPUSH
63338: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63342: CALL 63371 0 0
// end ; end_of_file
63346: PPOPN 1
63348: END
// every 0 0$1 do
63349: GO 63351
63351: DISABLE
// begin enable ;
63352: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63353: LD_STRING updateTimer(
63355: PUSH
63356: LD_OWVAR 1
63360: STR
63361: PUSH
63362: LD_STRING );
63364: STR
63365: PPUSH
63366: CALL_OW 559
// end ;
63370: END
// export function SOS_MapStart ( ) ; begin
63371: LD_INT 0
63373: PPUSH
// UpdateFactoryWaypoints ( ) ;
63374: CALL 64305 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63378: CALL 64557 0 0
// ParseMultiDataToLua ( ) ;
63382: CALL 64704 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63386: LD_STRING setSpecLogoNumber(
63388: PUSH
63389: LD_INT 2
63391: STR
63392: PUSH
63393: LD_STRING ,
63395: STR
63396: PUSH
63397: LD_INT 1
63399: STR
63400: PUSH
63401: LD_STRING )
63403: STR
63404: PPUSH
63405: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63409: LD_STRING setSpecLogoNumber(
63411: PUSH
63412: LD_INT 3
63414: STR
63415: PUSH
63416: LD_STRING ,
63418: STR
63419: PUSH
63420: LD_INT 2
63422: STR
63423: PUSH
63424: LD_STRING )
63426: STR
63427: PPUSH
63428: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63432: LD_STRING setSpecLogoNumber(
63434: PUSH
63435: LD_INT 4
63437: STR
63438: PUSH
63439: LD_STRING ,
63441: STR
63442: PUSH
63443: LD_INT 3
63445: STR
63446: PUSH
63447: LD_STRING )
63449: STR
63450: PPUSH
63451: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63455: LD_STRING setSpecLogoNumber(
63457: PUSH
63458: LD_INT 5
63460: STR
63461: PUSH
63462: LD_STRING ,
63464: STR
63465: PUSH
63466: LD_INT 4
63468: STR
63469: PUSH
63470: LD_STRING )
63472: STR
63473: PPUSH
63474: CALL_OW 559
// end ;
63478: LD_VAR 0 1
63482: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63483: LD_INT 0
63485: PPUSH
63486: PPUSH
63487: PPUSH
63488: PPUSH
63489: PPUSH
63490: PPUSH
63491: PPUSH
63492: PPUSH
63493: PPUSH
// for i := 1 to 8 do
63494: LD_ADDR_VAR 0 2
63498: PUSH
63499: DOUBLE
63500: LD_INT 1
63502: DEC
63503: ST_TO_ADDR
63504: LD_INT 8
63506: PUSH
63507: FOR_TO
63508: IFFALSE 63893
// begin if mpSidePositions [ i ] then
63510: LD_EXP 9
63514: PUSH
63515: LD_VAR 0 2
63519: ARRAY
63520: IFFALSE 63891
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63522: LD_ADDR_VAR 0 7
63526: PUSH
63527: LD_INT 22
63529: PUSH
63530: LD_VAR 0 2
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 21
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PPUSH
63553: CALL_OW 69
63557: PPUSH
63558: CALL 5823 0 1
63562: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63563: LD_ADDR_VAR 0 9
63567: PUSH
63568: LD_INT 22
63570: PUSH
63571: LD_VAR 0 2
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 30
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 30
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PPUSH
63612: CALL_OW 69
63616: ST_TO_ADDR
// crates := 0 ;
63617: LD_ADDR_VAR 0 4
63621: PUSH
63622: LD_INT 0
63624: ST_TO_ADDR
// oil := 0 ;
63625: LD_ADDR_VAR 0 5
63629: PUSH
63630: LD_INT 0
63632: ST_TO_ADDR
// sib := 0 ;
63633: LD_ADDR_VAR 0 6
63637: PUSH
63638: LD_INT 0
63640: ST_TO_ADDR
// if bases then
63641: LD_VAR 0 9
63645: IFFALSE 63751
// begin for j in bases do
63647: LD_ADDR_VAR 0 3
63651: PUSH
63652: LD_VAR 0 9
63656: PUSH
63657: FOR_IN
63658: IFFALSE 63749
// begin base := GetBase ( j ) ;
63660: LD_ADDR_VAR 0 8
63664: PUSH
63665: LD_VAR 0 3
63669: PPUSH
63670: CALL_OW 274
63674: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63675: LD_ADDR_VAR 0 4
63679: PUSH
63680: LD_VAR 0 4
63684: PUSH
63685: LD_VAR 0 8
63689: PPUSH
63690: LD_INT 1
63692: PPUSH
63693: CALL_OW 275
63697: PLUS
63698: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63699: LD_ADDR_VAR 0 5
63703: PUSH
63704: LD_VAR 0 5
63708: PUSH
63709: LD_VAR 0 8
63713: PPUSH
63714: LD_INT 2
63716: PPUSH
63717: CALL_OW 275
63721: PLUS
63722: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63723: LD_ADDR_VAR 0 6
63727: PUSH
63728: LD_VAR 0 6
63732: PUSH
63733: LD_VAR 0 8
63737: PPUSH
63738: LD_INT 3
63740: PPUSH
63741: CALL_OW 275
63745: PLUS
63746: ST_TO_ADDR
// end ;
63747: GO 63657
63749: POP
63750: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63751: LD_STRING setSpecText(
63753: PUSH
63754: LD_VAR 0 2
63758: STR
63759: PUSH
63760: LD_STRING ,
63762: STR
63763: PUSH
63764: LD_INT 2
63766: STR
63767: PUSH
63768: LD_STRING ,
63770: STR
63771: PUSH
63772: LD_VAR 0 4
63776: STR
63777: PUSH
63778: LD_STRING )
63780: STR
63781: PPUSH
63782: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63786: LD_STRING setSpecText(
63788: PUSH
63789: LD_VAR 0 2
63793: STR
63794: PUSH
63795: LD_STRING ,
63797: STR
63798: PUSH
63799: LD_INT 3
63801: STR
63802: PUSH
63803: LD_STRING ,
63805: STR
63806: PUSH
63807: LD_VAR 0 5
63811: STR
63812: PUSH
63813: LD_STRING )
63815: STR
63816: PPUSH
63817: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63821: LD_STRING setSpecText(
63823: PUSH
63824: LD_VAR 0 2
63828: STR
63829: PUSH
63830: LD_STRING ,
63832: STR
63833: PUSH
63834: LD_INT 4
63836: STR
63837: PUSH
63838: LD_STRING ,
63840: STR
63841: PUSH
63842: LD_VAR 0 6
63846: STR
63847: PUSH
63848: LD_STRING )
63850: STR
63851: PPUSH
63852: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63856: LD_STRING setSpecText(
63858: PUSH
63859: LD_VAR 0 2
63863: STR
63864: PUSH
63865: LD_STRING ,
63867: STR
63868: PUSH
63869: LD_INT 5
63871: STR
63872: PUSH
63873: LD_STRING ,
63875: STR
63876: PUSH
63877: LD_VAR 0 7
63881: STR
63882: PUSH
63883: LD_STRING )
63885: STR
63886: PPUSH
63887: CALL_OW 559
// end ; end ;
63891: GO 63507
63893: POP
63894: POP
// end ;
63895: LD_VAR 0 1
63899: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63900: LD_INT 2
63902: PUSH
63903: LD_INT 30
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 30
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: LIST
63927: PPUSH
63928: CALL_OW 69
63932: IFFALSE 63942
63934: GO 63936
63936: DISABLE
// begin enable ;
63937: ENABLE
// UpdateSpectatorBar ;
63938: CALL 63483 0 0
// end ;
63942: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63943: LD_INT 0
63945: PPUSH
// end ;
63946: LD_VAR 0 12
63950: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63951: LD_INT 0
63953: PPUSH
63954: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63955: LD_VAR 0 1
63959: NOT
63960: IFTRUE 63979
63962: PUSH
63963: LD_VAR 0 2
63967: PPUSH
63968: LD_VAR 0 3
63972: PPUSH
63973: CALL_OW 488
63977: NOT
63978: OR
63979: IFTRUE 64014
63981: PUSH
63982: LD_VAR 0 1
63986: PPUSH
63987: CALL_OW 266
63991: PUSH
63992: LD_INT 3
63994: NONEQUAL
63995: IFFALSE 64013
63997: PUSH
63998: LD_VAR 0 1
64002: PPUSH
64003: CALL_OW 247
64007: PUSH
64008: LD_INT 1
64010: EQUAL
64011: NOT
64012: AND
64013: OR
64014: IFFALSE 64018
// exit ;
64016: GO 64300
// if GetType ( factory ) = unit_human then
64018: LD_VAR 0 1
64022: PPUSH
64023: CALL_OW 247
64027: PUSH
64028: LD_INT 1
64030: EQUAL
64031: IFFALSE 64048
// factory := IsInUnit ( factory ) ;
64033: LD_ADDR_VAR 0 1
64037: PUSH
64038: LD_VAR 0 1
64042: PPUSH
64043: CALL_OW 310
64047: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64048: LD_VAR 0 1
64052: PPUSH
64053: CALL_OW 266
64057: PUSH
64058: LD_INT 3
64060: NONEQUAL
64061: IFFALSE 64065
// exit ;
64063: GO 64300
// for i := 1 to Count ( factoryWaypoints ) do
64065: LD_ADDR_VAR 0 5
64069: PUSH
64070: DOUBLE
64071: LD_INT 1
64073: DEC
64074: ST_TO_ADDR
64075: LD_EXP 62
64079: PPUSH
64080: CALL 5823 0 1
64084: PUSH
64085: FOR_TO
64086: IFFALSE 64248
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64088: LD_VAR 0 2
64092: PPUSH
64093: LD_VAR 0 3
64097: PPUSH
64098: CALL_OW 428
64102: PUSH
64103: LD_EXP 62
64107: PUSH
64108: LD_VAR 0 5
64112: ARRAY
64113: PUSH
64114: LD_INT 2
64116: ARRAY
64117: EQUAL
64118: IFFALSE 64150
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64120: LD_ADDR_EXP 62
64124: PUSH
64125: LD_EXP 62
64129: PPUSH
64130: LD_VAR 0 5
64134: PPUSH
64135: CALL_OW 3
64139: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64140: CALL 64305 0 0
// exit ;
64144: POP
64145: POP
64146: GO 64300
// end else
64148: GO 64246
// if factory = factoryWaypoints [ i ] [ 2 ] then
64150: LD_VAR 0 1
64154: PUSH
64155: LD_EXP 62
64159: PUSH
64160: LD_VAR 0 5
64164: ARRAY
64165: PUSH
64166: LD_INT 2
64168: ARRAY
64169: EQUAL
64170: IFFALSE 64246
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64172: LD_ADDR_EXP 62
64176: PUSH
64177: LD_EXP 62
64181: PPUSH
64182: LD_VAR 0 5
64186: PPUSH
64187: CALL_OW 3
64191: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64192: LD_ADDR_EXP 62
64196: PUSH
64197: LD_EXP 62
64201: PPUSH
64202: LD_VAR 0 1
64206: PPUSH
64207: CALL_OW 255
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_VAR 0 3
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: PPUSH
64233: CALL 41789 0 2
64237: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64238: CALL 64305 0 0
// exit ;
64242: POP
64243: POP
64244: GO 64300
// end ; end ;
64246: GO 64085
64248: POP
64249: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64250: LD_ADDR_EXP 62
64254: PUSH
64255: LD_EXP 62
64259: PPUSH
64260: LD_VAR 0 1
64264: PPUSH
64265: CALL_OW 255
64269: PUSH
64270: LD_VAR 0 1
64274: PUSH
64275: LD_VAR 0 2
64279: PUSH
64280: LD_VAR 0 3
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: PPUSH
64291: CALL 41789 0 2
64295: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64296: CALL 64305 0 0
// end ;
64300: LD_VAR 0 4
64304: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64305: LD_INT 0
64307: PPUSH
64308: PPUSH
64309: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64310: LD_STRING resetFactoryWaypoint();
64312: PPUSH
64313: CALL_OW 559
// if factoryWaypoints then
64317: LD_EXP 62
64321: IFFALSE 64442
// begin list := factoryWaypoints ;
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_EXP 62
64332: ST_TO_ADDR
// for i := 1 to list do
64333: LD_ADDR_VAR 0 2
64337: PUSH
64338: DOUBLE
64339: LD_INT 1
64341: DEC
64342: ST_TO_ADDR
64343: LD_VAR 0 3
64347: PUSH
64348: FOR_TO
64349: IFFALSE 64440
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64351: LD_STRING setFactoryWaypointXY(
64353: PUSH
64354: LD_VAR 0 3
64358: PUSH
64359: LD_VAR 0 2
64363: ARRAY
64364: PUSH
64365: LD_INT 1
64367: ARRAY
64368: STR
64369: PUSH
64370: LD_STRING ,
64372: STR
64373: PUSH
64374: LD_VAR 0 3
64378: PUSH
64379: LD_VAR 0 2
64383: ARRAY
64384: PUSH
64385: LD_INT 2
64387: ARRAY
64388: STR
64389: PUSH
64390: LD_STRING ,
64392: STR
64393: PUSH
64394: LD_VAR 0 3
64398: PUSH
64399: LD_VAR 0 2
64403: ARRAY
64404: PUSH
64405: LD_INT 3
64407: ARRAY
64408: STR
64409: PUSH
64410: LD_STRING ,
64412: STR
64413: PUSH
64414: LD_VAR 0 3
64418: PUSH
64419: LD_VAR 0 2
64423: ARRAY
64424: PUSH
64425: LD_INT 4
64427: ARRAY
64428: STR
64429: PUSH
64430: LD_STRING )
64432: STR
64433: PPUSH
64434: CALL_OW 559
64438: GO 64348
64440: POP
64441: POP
// end ; end ;
64442: LD_VAR 0 1
64446: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64447: LD_INT 0
64449: PPUSH
// if HexInfo ( x , y ) = warehouse then
64450: LD_VAR 0 2
64454: PPUSH
64455: LD_VAR 0 3
64459: PPUSH
64460: CALL_OW 428
64464: PUSH
64465: LD_VAR 0 1
64469: EQUAL
64470: IFFALSE 64497
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64472: LD_ADDR_EXP 64
64476: PUSH
64477: LD_EXP 64
64481: PPUSH
64482: LD_VAR 0 1
64486: PPUSH
64487: LD_INT 0
64489: PPUSH
64490: CALL_OW 1
64494: ST_TO_ADDR
64495: GO 64548
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64497: LD_ADDR_EXP 64
64501: PUSH
64502: LD_EXP 64
64506: PPUSH
64507: LD_VAR 0 1
64511: PPUSH
64512: LD_VAR 0 1
64516: PPUSH
64517: CALL_OW 255
64521: PUSH
64522: LD_VAR 0 1
64526: PUSH
64527: LD_VAR 0 2
64531: PUSH
64532: LD_VAR 0 3
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: PPUSH
64543: CALL_OW 1
64547: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64548: CALL 64557 0 0
// end ;
64552: LD_VAR 0 4
64556: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64557: LD_INT 0
64559: PPUSH
64560: PPUSH
64561: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64562: LD_STRING resetWarehouseGatheringPoints();
64564: PPUSH
64565: CALL_OW 559
// if warehouseGatheringPoints then
64569: LD_EXP 64
64573: IFFALSE 64699
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64575: LD_ADDR_VAR 0 3
64579: PUSH
64580: LD_EXP 64
64584: PPUSH
64585: CALL 45723 0 1
64589: ST_TO_ADDR
// for i := 1 to list do
64590: LD_ADDR_VAR 0 2
64594: PUSH
64595: DOUBLE
64596: LD_INT 1
64598: DEC
64599: ST_TO_ADDR
64600: LD_VAR 0 3
64604: PUSH
64605: FOR_TO
64606: IFFALSE 64697
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64608: LD_STRING setWarehouseGatheringPointXY(
64610: PUSH
64611: LD_VAR 0 3
64615: PUSH
64616: LD_VAR 0 2
64620: ARRAY
64621: PUSH
64622: LD_INT 1
64624: ARRAY
64625: STR
64626: PUSH
64627: LD_STRING ,
64629: STR
64630: PUSH
64631: LD_VAR 0 3
64635: PUSH
64636: LD_VAR 0 2
64640: ARRAY
64641: PUSH
64642: LD_INT 2
64644: ARRAY
64645: STR
64646: PUSH
64647: LD_STRING ,
64649: STR
64650: PUSH
64651: LD_VAR 0 3
64655: PUSH
64656: LD_VAR 0 2
64660: ARRAY
64661: PUSH
64662: LD_INT 3
64664: ARRAY
64665: STR
64666: PUSH
64667: LD_STRING ,
64669: STR
64670: PUSH
64671: LD_VAR 0 3
64675: PUSH
64676: LD_VAR 0 2
64680: ARRAY
64681: PUSH
64682: LD_INT 4
64684: ARRAY
64685: STR
64686: PUSH
64687: LD_STRING )
64689: STR
64690: PPUSH
64691: CALL_OW 559
64695: GO 64605
64697: POP
64698: POP
// end ; end ;
64699: LD_VAR 0 1
64703: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64704: LD_INT 0
64706: PPUSH
64707: PPUSH
// if not mpSidePositions then
64708: LD_EXP 9
64712: NOT
64713: IFFALSE 64717
// exit ;
64715: GO 64788
// result :=  ;
64717: LD_ADDR_VAR 0 1
64721: PUSH
64722: LD_STRING 
64724: ST_TO_ADDR
// for i := 1 to 8 do
64725: LD_ADDR_VAR 0 2
64729: PUSH
64730: DOUBLE
64731: LD_INT 1
64733: DEC
64734: ST_TO_ADDR
64735: LD_INT 8
64737: PUSH
64738: FOR_TO
64739: IFFALSE 64769
// begin result := result & mpSidePositions [ i ] & ; ;
64741: LD_ADDR_VAR 0 1
64745: PUSH
64746: LD_VAR 0 1
64750: PUSH
64751: LD_EXP 9
64755: PUSH
64756: LD_VAR 0 2
64760: ARRAY
64761: STR
64762: PUSH
64763: LD_STRING ;
64765: STR
64766: ST_TO_ADDR
// end ;
64767: GO 64738
64769: POP
64770: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64771: LD_STRING setMultiplayerRealPosition("
64773: PUSH
64774: LD_VAR 0 1
64778: STR
64779: PUSH
64780: LD_STRING ");
64782: STR
64783: PPUSH
64784: CALL_OW 559
// end ;
64788: LD_VAR 0 1
64792: RET
