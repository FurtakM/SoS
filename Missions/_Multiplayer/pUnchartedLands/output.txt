// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46748 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 47124 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 8
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 3
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 4
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 2
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 7
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mpTeamGame := true ;
 824: LD_ADDR_EXP 13
 828: PUSH
 829: LD_INT 1
 831: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 832: LD_ADDR_EXP 31
 836: PUSH
 837: LD_INT 200
 839: PUSH
 840: LD_INT 230
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// end ;
 847: LD_VAR 0 1
 851: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 852: LD_INT 0
 854: PPUSH
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
 860: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 861: LD_ADDR_EXP 21
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: LD_INT 5
 880: PUSH
 881: LD_INT 6
 883: PUSH
 884: LD_INT 7
 886: PUSH
 887: LD_INT 8
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 ] union mpBuildUpAreas ;
 900: LD_ADDR_EXP 20
 904: PUSH
 905: LD_INT 10
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: LD_INT 12
 913: PUSH
 914: LD_INT 13
 916: PUSH
 917: LD_INT 14
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_EXP 21
 931: UNION
 932: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 933: LD_VAR 0 1
 937: PUSH
 938: LD_INT 2
 940: EQUAL
 941: IFFALSE 953
// baseLevel := 1 else
 943: LD_ADDR_VAR 0 7
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
 951: GO 967
// baseLevel := mpGameSettings [ 1 ] ;
 953: LD_ADDR_VAR 0 7
 957: PUSH
 958: LD_EXP 8
 962: PUSH
 963: LD_INT 1
 965: ARRAY
 966: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 967: LD_ADDR_EXP 26
 971: PUSH
 972: LD_EXP 8
 976: PUSH
 977: LD_INT 2
 979: ARRAY
 980: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 981: LD_ADDR_EXP 27
 985: PUSH
 986: LD_EXP 8
 990: PUSH
 991: LD_INT 3
 993: ARRAY
 994: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 995: LD_ADDR_EXP 17
 999: PUSH
1000: LD_EXP 8
1004: PUSH
1005: LD_INT 4
1007: ARRAY
1008: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1009: LD_ADDR_EXP 29
1013: PUSH
1014: LD_EXP 8
1018: PUSH
1019: LD_INT 5
1021: ARRAY
1022: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1023: LD_ADDR_VAR 0 5
1027: PUSH
1028: LD_EXP 8
1032: PUSH
1033: LD_INT 6
1035: ARRAY
1036: PUSH
1037: LD_INT 0
1039: GREATER
1040: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1041: LD_ADDR_VAR 0 6
1045: PUSH
1046: LD_EXP 8
1050: PUSH
1051: LD_INT 7
1053: ARRAY
1054: PUSH
1055: LD_INT 0
1057: GREATER
1058: ST_TO_ADDR
// kingCamArea := 0 ;
1059: LD_ADDR_EXP 2
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// kingArea := 0 ;
1067: LD_ADDR_EXP 1
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// if gameType = GameTypeKing then
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 3
1082: EQUAL
1083: IFFALSE 1123
// begin mpKingArea := 0 ;
1085: LD_ADDR_EXP 36
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1093: LD_ADDR_EXP 37
1097: PUSH
1098: LD_EXP 8
1102: PUSH
1103: LD_INT 8
1105: ARRAY
1106: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1107: LD_ADDR_EXP 39
1111: PUSH
1112: LD_EXP 8
1116: PUSH
1117: LD_INT 10
1119: ARRAY
1120: ST_TO_ADDR
// end else
1121: GO 1147
// begin mpKingArea := 0 ;
1123: LD_ADDR_EXP 36
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// mpPoints := 0 ;
1131: LD_ADDR_EXP 37
1135: PUSH
1136: LD_INT 0
1138: ST_TO_ADDR
// mpEmissions := 0 ;
1139: LD_ADDR_EXP 39
1143: PUSH
1144: LD_INT 0
1146: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1147: LD_EXP 8
1151: PUSH
1152: LD_INT 9
1154: ARRAY
1155: IFFALSE 1287
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1157: LD_ADDR_EXP 38
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: LD_INT 3
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 12
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: LD_INT 1
1210: PUSH
1211: LD_INT 24
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 12
1222: PUSH
1223: LD_INT 1
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 23
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 21
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 1
1250: PUSH
1251: LD_INT 42
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 21
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 42
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: LIST
1286: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1287: LD_ADDR_EXP 18
1291: PUSH
1292: LD_EXP 8
1296: PUSH
1297: LD_INT 11
1299: ARRAY
1300: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1301: LD_ADDR_EXP 24
1305: PUSH
1306: LD_EXP 8
1310: PUSH
1311: LD_INT 12
1313: ARRAY
1314: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 8
1324: PUSH
1325: LD_INT 13
1327: ARRAY
1328: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1329: LD_ADDR_EXP 35
1333: PUSH
1334: LD_EXP 8
1338: PUSH
1339: LD_INT 14
1341: ARRAY
1342: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1343: LD_ADDR_EXP 32
1347: PUSH
1348: LD_EXP 8
1352: PUSH
1353: LD_INT 15
1355: ARRAY
1356: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1357: LD_ADDR_EXP 30
1361: PUSH
1362: LD_EXP 8
1366: PUSH
1367: LD_INT 18
1369: ARRAY
1370: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1371: LD_ADDR_EXP 3
1375: PUSH
1376: LD_EXP 8
1380: PUSH
1381: LD_INT 20
1383: ARRAY
1384: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1385: LD_ADDR_EXP 22
1389: PUSH
1390: LD_EXP 8
1394: PUSH
1395: LD_INT 21
1397: ARRAY
1398: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1399: LD_ADDR_EXP 33
1403: PUSH
1404: LD_INT 15
1406: PUSH
1407: LD_INT 16
1409: PUSH
1410: LD_INT 17
1412: PUSH
1413: LD_INT 18
1415: PUSH
1416: LD_INT 19
1418: PUSH
1419: LD_INT 20
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 22
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1438: LD_ADDR_VAR 0 8
1442: PUSH
1443: LD_INT 23
1445: PPUSH
1446: LD_INT 2
1448: PPUSH
1449: CALL 46113 0 2
1453: PUSH
1454: LD_INT 24
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL 46113 0 2
1464: PUSH
1465: LD_INT 25
1467: PPUSH
1468: LD_INT 3
1470: PPUSH
1471: CALL 46113 0 2
1475: PUSH
1476: LD_INT 26
1478: PPUSH
1479: LD_INT 4
1481: PPUSH
1482: CALL 46113 0 2
1486: PUSH
1487: LD_INT 27
1489: PPUSH
1490: LD_INT 5
1492: PPUSH
1493: CALL 46113 0 2
1497: PUSH
1498: LD_INT 28
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL 46113 0 2
1508: PUSH
1509: LD_INT 29
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL 46113 0 2
1519: PUSH
1520: LD_INT 30
1522: PPUSH
1523: LD_INT 1
1525: PPUSH
1526: CALL 46113 0 2
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1541: LD_ADDR_VAR 0 3
1545: PUSH
1546: DOUBLE
1547: LD_INT 1
1549: DEC
1550: ST_TO_ADDR
1551: LD_VAR 0 8
1555: PPUSH
1556: CALL 5462 0 1
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1666
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1564: LD_ADDR_EXP 23
1568: PUSH
1569: LD_EXP 23
1573: PPUSH
1574: LD_VAR 0 3
1578: PPUSH
1579: LD_VAR 0 8
1583: PUSH
1584: LD_VAR 0 3
1588: ARRAY
1589: PUSH
1590: LD_INT 1
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 8
1598: PUSH
1599: LD_VAR 0 3
1603: ARRAY
1604: PUSH
1605: LD_INT 3
1607: ARRAY
1608: PPUSH
1609: LD_INT 10
1611: PPUSH
1612: CALL_OW 272
1616: PUSH
1617: LD_VAR 0 8
1621: PUSH
1622: LD_VAR 0 3
1626: ARRAY
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PPUSH
1632: LD_VAR 0 8
1636: PUSH
1637: LD_VAR 0 3
1641: ARRAY
1642: PUSH
1643: LD_INT 3
1645: ARRAY
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: CALL_OW 273
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PPUSH
1659: CALL_OW 1
1663: ST_TO_ADDR
1664: GO 1561
1666: POP
1667: POP
// if hasOil then
1668: LD_VAR 0 5
1672: IFFALSE 1811
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1674: LD_ADDR_VAR 0 4
1678: PUSH
1679: LD_EXP 8
1683: PUSH
1684: LD_INT 6
1686: ARRAY
1687: PUSH
1688: LD_INT 2
1690: EQUAL
1691: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1692: LD_ADDR_EXP 14
1696: PUSH
1697: LD_INT 31
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45946 0 2
1709: PUSH
1710: LD_INT 33
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45946 0 2
1722: PUSH
1723: LD_INT 35
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45946 0 2
1735: PUSH
1736: LD_INT 37
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45946 0 2
1748: PUSH
1749: LD_INT 39
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45946 0 2
1761: PUSH
1762: LD_INT 41
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45946 0 2
1774: PUSH
1775: LD_INT 43
1777: PPUSH
1778: LD_VAR 0 4
1782: PPUSH
1783: CALL 45946 0 2
1787: PUSH
1788: LD_INT 45
1790: PPUSH
1791: LD_VAR 0 4
1795: PPUSH
1796: CALL 45946 0 2
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// end ; if hasSib then
1811: LD_VAR 0 6
1815: IFFALSE 1954
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1817: LD_ADDR_VAR 0 4
1821: PUSH
1822: LD_EXP 8
1826: PUSH
1827: LD_INT 7
1829: ARRAY
1830: PUSH
1831: LD_INT 2
1833: EQUAL
1834: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1835: LD_ADDR_EXP 15
1839: PUSH
1840: LD_INT 32
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45946 0 2
1852: PUSH
1853: LD_INT 34
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45946 0 2
1865: PUSH
1866: LD_INT 36
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45946 0 2
1878: PUSH
1879: LD_INT 38
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45946 0 2
1891: PUSH
1892: LD_INT 40
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45946 0 2
1904: PUSH
1905: LD_INT 42
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45946 0 2
1917: PUSH
1918: LD_INT 44
1920: PPUSH
1921: LD_VAR 0 4
1925: PPUSH
1926: CALL 45946 0 2
1930: PUSH
1931: LD_INT 46
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: CALL 45946 0 2
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1954: LD_VAR 0 7
1958: PUSH
1959: LD_INT 1
1961: GREATEREQUAL
1962: IFFALSE 1974
// mpDepots := startPos ;
1964: LD_ADDR_EXP 16
1968: PUSH
1969: LD_VAR 0 8
1973: ST_TO_ADDR
// if baseLevel >= 2 then
1974: LD_VAR 0 7
1978: PUSH
1979: LD_INT 2
1981: GREATEREQUAL
1982: IFFALSE 2399
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 5 ) ] ] ;
1984: LD_ADDR_EXP 19
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 47
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL 46113 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 48
2009: PPUSH
2010: LD_INT 5
2012: PPUSH
2013: CALL 46113 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 49
2024: PPUSH
2025: LD_INT 5
2027: PPUSH
2028: CALL 46113 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 50
2044: PPUSH
2045: LD_INT 5
2047: PPUSH
2048: CALL 46113 0 2
2052: ADD
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 51
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL 46113 0 2
2067: ADD
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 52
2074: PPUSH
2075: LD_INT 5
2077: PPUSH
2078: CALL 46113 0 2
2082: ADD
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 31
2091: PUSH
2092: LD_INT 53
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL 46113 0 2
2102: ADD
2103: PUSH
2104: LD_INT 31
2106: PUSH
2107: LD_INT 54
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL 46113 0 2
2117: ADD
2118: PUSH
2119: LD_INT 4
2121: PUSH
2122: LD_INT 55
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 46113 0 2
2132: ADD
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 31
2141: PUSH
2142: LD_INT 56
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: CALL 46113 0 2
2152: ADD
2153: PUSH
2154: LD_INT 31
2156: PUSH
2157: LD_INT 57
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL 46113 0 2
2167: ADD
2168: PUSH
2169: LD_INT 4
2171: PUSH
2172: LD_INT 58
2174: PPUSH
2175: LD_INT 2
2177: PPUSH
2178: CALL 46113 0 2
2182: ADD
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 31
2191: PUSH
2192: LD_INT 59
2194: PPUSH
2195: LD_INT 1
2197: PPUSH
2198: CALL 46113 0 2
2202: ADD
2203: PUSH
2204: LD_INT 31
2206: PUSH
2207: LD_INT 60
2209: PPUSH
2210: LD_INT 2
2212: PPUSH
2213: CALL 46113 0 2
2217: ADD
2218: PUSH
2219: LD_INT 4
2221: PUSH
2222: LD_INT 61
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: CALL 46113 0 2
2232: ADD
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 31
2241: PUSH
2242: LD_INT 62
2244: PPUSH
2245: LD_INT 5
2247: PPUSH
2248: CALL 46113 0 2
2252: ADD
2253: PUSH
2254: LD_INT 31
2256: PUSH
2257: LD_INT 63
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: CALL 46113 0 2
2267: ADD
2268: PUSH
2269: LD_INT 4
2271: PUSH
2272: LD_INT 64
2274: PPUSH
2275: LD_INT 3
2277: PPUSH
2278: CALL 46113 0 2
2282: ADD
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: LD_INT 65
2294: PPUSH
2295: LD_INT 2
2297: PPUSH
2298: CALL 46113 0 2
2302: ADD
2303: PUSH
2304: LD_INT 31
2306: PUSH
2307: LD_INT 66
2309: PPUSH
2310: LD_INT 3
2312: PPUSH
2313: CALL 46113 0 2
2317: ADD
2318: PUSH
2319: LD_INT 4
2321: PUSH
2322: LD_INT 67
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL 46113 0 2
2332: ADD
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 31
2341: PUSH
2342: LD_INT 68
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL 46113 0 2
2352: ADD
2353: PUSH
2354: LD_INT 31
2356: PUSH
2357: LD_INT 69
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: CALL 46113 0 2
2367: ADD
2368: PUSH
2369: LD_INT 4
2371: PUSH
2372: LD_INT 70
2374: PPUSH
2375: LD_INT 5
2377: PPUSH
2378: CALL 46113 0 2
2382: ADD
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: ST_TO_ADDR
// end ; if mpTree then
2399: LD_EXP 3
2403: IFFALSE 2415
// SetAreaMapShow ( TreeArea , 1 ) ;
2405: LD_INT 71
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: CALL_OW 424
// end ;
2415: LD_VAR 0 2
2419: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2420: GO 2422
2422: DISABLE
2423: LD_INT 0
2425: PPUSH
2426: PPUSH
2427: PPUSH
2428: PPUSH
2429: PPUSH
2430: PPUSH
2431: PPUSH
2432: PPUSH
// begin if not mpShipments then
2433: LD_EXP 29
2437: NOT
2438: IFFALSE 2442
// exit ;
2440: GO 2893
// case mpShipments of 1 :
2442: LD_EXP 29
2446: PUSH
2447: LD_INT 1
2449: DOUBLE
2450: EQUAL
2451: IFTRUE 2455
2453: GO 2490
2455: POP
// begin time := 0 0$30 ;
2456: LD_ADDR_VAR 0 5
2460: PUSH
2461: LD_INT 1050
2463: ST_TO_ADDR
// normalTime := 0 0$30 ;
2464: LD_ADDR_VAR 0 6
2468: PUSH
2469: LD_INT 1050
2471: ST_TO_ADDR
// maxTime := 1 1$20 ;
2472: LD_ADDR_VAR 0 8
2476: PUSH
2477: LD_INT 2800
2479: ST_TO_ADDR
// delayTime := 0 0$5 ;
2480: LD_ADDR_VAR 0 7
2484: PUSH
2485: LD_INT 175
2487: ST_TO_ADDR
// end ; 2 :
2488: GO 2620
2490: LD_INT 2
2492: DOUBLE
2493: EQUAL
2494: IFTRUE 2498
2496: GO 2533
2498: POP
// begin time := 0 0$25 ;
2499: LD_ADDR_VAR 0 5
2503: PUSH
2504: LD_INT 875
2506: ST_TO_ADDR
// normalTime := 0 0$25 ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_INT 875
2514: ST_TO_ADDR
// maxTime := 1 1$10 ;
2515: LD_ADDR_VAR 0 8
2519: PUSH
2520: LD_INT 2450
2522: ST_TO_ADDR
// delayTime := 0 0$4 ;
2523: LD_ADDR_VAR 0 7
2527: PUSH
2528: LD_INT 140
2530: ST_TO_ADDR
// end ; 3 :
2531: GO 2620
2533: LD_INT 3
2535: DOUBLE
2536: EQUAL
2537: IFTRUE 2541
2539: GO 2576
2541: POP
// begin time := 0 0$20 ;
2542: LD_ADDR_VAR 0 5
2546: PUSH
2547: LD_INT 700
2549: ST_TO_ADDR
// normalTime := 0 0$20 ;
2550: LD_ADDR_VAR 0 6
2554: PUSH
2555: LD_INT 700
2557: ST_TO_ADDR
// maxTime := 1 1$00 ;
2558: LD_ADDR_VAR 0 8
2562: PUSH
2563: LD_INT 2100
2565: ST_TO_ADDR
// delayTime := 0 0$3 ;
2566: LD_ADDR_VAR 0 7
2570: PUSH
2571: LD_INT 105
2573: ST_TO_ADDR
// end ; 4 :
2574: GO 2620
2576: LD_INT 4
2578: DOUBLE
2579: EQUAL
2580: IFTRUE 2584
2582: GO 2619
2584: POP
// begin time := 0 0$15 ;
2585: LD_ADDR_VAR 0 5
2589: PUSH
2590: LD_INT 525
2592: ST_TO_ADDR
// normalTime := 0 0$15 ;
2593: LD_ADDR_VAR 0 6
2597: PUSH
2598: LD_INT 525
2600: ST_TO_ADDR
// maxTime := 0 0$55 ;
2601: LD_ADDR_VAR 0 8
2605: PUSH
2606: LD_INT 1925
2608: ST_TO_ADDR
// delayTime := 0 0$2 ;
2609: LD_ADDR_VAR 0 7
2613: PUSH
2614: LD_INT 70
2616: ST_TO_ADDR
// end ; end ;
2617: GO 2620
2619: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 ] ;
2620: LD_ADDR_VAR 0 4
2624: PUSH
2625: LD_INT 10
2627: PUSH
2628: LD_INT 11
2630: PUSH
2631: LD_INT 12
2633: PUSH
2634: LD_INT 13
2636: PUSH
2637: LD_INT 14
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2647: LD_ADDR_VAR 0 3
2651: PUSH
2652: LD_INT 1
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: LD_INT 4
2663: PUSH
2664: LD_INT 5
2666: PUSH
2667: LD_INT 6
2669: PUSH
2670: LD_INT 7
2672: PUSH
2673: LD_INT 8
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: ST_TO_ADDR
// for i := 1 to 8 do
2686: LD_ADDR_VAR 0 1
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2747
// begin if not mpSidePositions [ i ] then
2702: LD_EXP 9
2706: PUSH
2707: LD_VAR 0 1
2711: ARRAY
2712: NOT
2713: IFFALSE 2717
// continue ;
2715: GO 2699
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2717: LD_ADDR_VAR 0 4
2721: PUSH
2722: LD_VAR 0 4
2726: PUSH
2727: LD_VAR 0 3
2731: PUSH
2732: LD_EXP 9
2736: PUSH
2737: LD_VAR 0 1
2741: ARRAY
2742: ARRAY
2743: ADD
2744: ST_TO_ADDR
// end ;
2745: GO 2699
2747: POP
2748: POP
// x := 1 ;
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_INT 1
2756: ST_TO_ADDR
// repeat wait ( time ) ;
2757: LD_VAR 0 5
2761: PPUSH
2762: CALL_OW 67
// x := Inc ( x ) ;
2766: LD_ADDR_VAR 0 2
2770: PUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL 42767 0 1
2780: ST_TO_ADDR
// if x > 5 then
2781: LD_VAR 0 2
2785: PUSH
2786: LD_INT 5
2788: GREATER
2789: IFFALSE 2799
// x := 1 ;
2791: LD_ADDR_VAR 0 2
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// for i in areas do
2799: LD_ADDR_VAR 0 1
2803: PUSH
2804: LD_VAR 0 4
2808: PUSH
2809: FOR_IN
2810: IFFALSE 2849
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2812: LD_VAR 0 1
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 287
2824: PUSH
2825: LD_INT 30
2827: LESS
2828: IFFALSE 2847
// begin CreateCratesArea ( x , i , true ) ;
2830: LD_VAR 0 2
2834: PPUSH
2835: LD_VAR 0 1
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: CALL_OW 55
// end ; end ;
2847: GO 2809
2849: POP
2850: POP
// time := time + delayTime ;
2851: LD_ADDR_VAR 0 5
2855: PUSH
2856: LD_VAR 0 5
2860: PUSH
2861: LD_VAR 0 7
2865: PLUS
2866: ST_TO_ADDR
// if time > maxTime then
2867: LD_VAR 0 5
2871: PUSH
2872: LD_VAR 0 8
2876: GREATER
2877: IFFALSE 2889
// time := normalTime ;
2879: LD_ADDR_VAR 0 5
2883: PUSH
2884: LD_VAR 0 6
2888: ST_TO_ADDR
// until false ;
2889: LD_INT 0
2891: IFFALSE 2757
// end ;
2893: PPOPN 8
2895: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , power , bonus ;
2896: LD_EXP 3
2900: IFFALSE 3175
2902: GO 2904
2904: DISABLE
2905: LD_INT 0
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
// begin treeVisited := [ ] ;
2911: LD_ADDR_EXP 4
2915: PUSH
2916: EMPTY
2917: ST_TO_ADDR
// power := 1 ;
2918: LD_ADDR_VAR 0 3
2922: PUSH
2923: LD_INT 1
2925: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2926: LD_INT 35
2928: PPUSH
2929: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2933: LD_OWVAR 1
2937: PUSH
2938: LD_INT 42000
2940: PUSH
2941: LD_EXP 3
2945: DIV
2946: PPUSH
2947: CALL_OW 574
2951: MOD
2952: PUSH
2953: LD_INT 0
2955: EQUAL
2956: IFFALSE 2973
// power := Inc ( power ) ;
2958: LD_ADDR_VAR 0 3
2962: PUSH
2963: LD_VAR 0 3
2967: PPUSH
2968: CALL 42767 0 1
2972: ST_TO_ADDR
// if power > 10 then
2973: LD_VAR 0 3
2977: PUSH
2978: LD_INT 10
2980: GREATER
2981: IFFALSE 2991
// power := 10 ;
2983: LD_ADDR_VAR 0 3
2987: PUSH
2988: LD_INT 10
2990: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_INT 95
2998: PUSH
2999: LD_INT 71
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 23
3021: PUSH
3022: LD_INT 0
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL_OW 69
3042: PUSH
3043: LD_EXP 4
3047: DIFF
3048: ST_TO_ADDR
// if tmp then
3049: LD_VAR 0 2
3053: IFFALSE 3171
// begin for i in tmp do
3055: LD_ADDR_VAR 0 1
3059: PUSH
3060: LD_VAR 0 2
3064: PUSH
3065: FOR_IN
3066: IFFALSE 3169
// begin treeVisited := Join ( treeVisited , i ) ;
3068: LD_ADDR_EXP 4
3072: PUSH
3073: LD_EXP 4
3077: PPUSH
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL 41394 0 2
3087: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
3088: LD_ADDR_VAR 0 4
3092: PUSH
3093: LD_VAR 0 1
3097: PPUSH
3098: LD_VAR 0 1
3102: PUSH
3103: LD_INT 4
3105: MOD
3106: PUSH
3107: LD_INT 1
3109: PLUS
3110: PPUSH
3111: CALL_OW 259
3115: PUSH
3116: LD_VAR 0 3
3120: PLUS
3121: ST_TO_ADDR
// if bonus > 10 then
3122: LD_VAR 0 4
3126: PUSH
3127: LD_INT 10
3129: GREATER
3130: IFFALSE 3140
// bonus := 10 ;
3132: LD_ADDR_VAR 0 4
3136: PUSH
3137: LD_INT 10
3139: ST_TO_ADDR
// SetSkill ( i , i mod 4 + 1 , bonus ) ;
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_VAR 0 1
3149: PUSH
3150: LD_INT 4
3152: MOD
3153: PUSH
3154: LD_INT 1
3156: PLUS
3157: PPUSH
3158: LD_VAR 0 4
3162: PPUSH
3163: CALL_OW 237
// end ;
3167: GO 3065
3169: POP
3170: POP
// end ; until false ;
3171: LD_INT 0
3173: IFFALSE 2926
// end ; end_of_file
3175: PPOPN 4
3177: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL 55787 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3187: LD_VAR 0 1
3191: PPUSH
3192: CALL 51896 0 1
// end ;
3196: PPOPN 1
3198: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3199: LD_VAR 0 1
3203: PPUSH
3204: CALL 55804 0 1
// end ;
3208: PPOPN 1
3210: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3211: LD_VAR 0 1
3215: PPUSH
3216: CALL 52567 0 1
3220: PPOPN 1
3222: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3223: LD_VAR 0 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL 55845 0 2
3237: PPOPN 2
3239: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
3240: LD_VAR 0 1
3244: PPUSH
3245: LD_VAR 0 2
3249: PPUSH
3250: LD_VAR 0 3
3254: PPUSH
3255: CALL 52620 0 3
3259: PPOPN 3
3261: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3262: LD_INT 0
3264: PPUSH
3265: PPUSH
// if exist_mode then
3266: LD_VAR 0 2
3270: IFFALSE 3316
// begin unit := CreateCharacter ( prefix & ident ) ;
3272: LD_ADDR_VAR 0 5
3276: PUSH
3277: LD_VAR 0 3
3281: PUSH
3282: LD_VAR 0 1
3286: STR
3287: PPUSH
3288: CALL_OW 34
3292: ST_TO_ADDR
// if unit then
3293: LD_VAR 0 5
3297: IFFALSE 3314
// DeleteCharacters ( prefix & ident ) ;
3299: LD_VAR 0 3
3303: PUSH
3304: LD_VAR 0 1
3308: STR
3309: PPUSH
3310: CALL_OW 40
// end else
3314: GO 3331
// unit := NewCharacter ( ident ) ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_VAR 0 1
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// result := unit ;
3331: LD_ADDR_VAR 0 4
3335: PUSH
3336: LD_VAR 0 5
3340: ST_TO_ADDR
// end ;
3341: LD_VAR 0 4
3345: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3346: LD_INT 0
3348: PPUSH
3349: PPUSH
// if exist_mode then
3350: LD_VAR 0 2
3354: IFFALSE 3379
// unit := CreateCharacter ( prefix & ident ) else
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: LD_VAR 0 3
3365: PUSH
3366: LD_VAR 0 1
3370: STR
3371: PPUSH
3372: CALL_OW 34
3376: ST_TO_ADDR
3377: GO 3394
// unit := NewCharacter ( ident ) ;
3379: LD_ADDR_VAR 0 5
3383: PUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 25
3393: ST_TO_ADDR
// result := unit ;
3394: LD_ADDR_VAR 0 4
3398: PUSH
3399: LD_VAR 0 5
3403: ST_TO_ADDR
// end ;
3404: LD_VAR 0 4
3408: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3409: LD_INT 0
3411: PPUSH
3412: PPUSH
// if not side or not nation then
3413: LD_VAR 0 1
3417: NOT
3418: IFTRUE 3427
3420: PUSH
3421: LD_VAR 0 2
3425: NOT
3426: OR
3427: IFFALSE 3431
// exit ;
3429: GO 4201
// case nation of nation_american :
3431: LD_VAR 0 2
3435: PUSH
3436: LD_INT 1
3438: DOUBLE
3439: EQUAL
3440: IFTRUE 3444
3442: GO 3658
3444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3445: LD_ADDR_VAR 0 4
3449: PUSH
3450: LD_INT 35
3452: PUSH
3453: LD_INT 45
3455: PUSH
3456: LD_INT 46
3458: PUSH
3459: LD_INT 47
3461: PUSH
3462: LD_INT 82
3464: PUSH
3465: LD_INT 83
3467: PUSH
3468: LD_INT 84
3470: PUSH
3471: LD_INT 85
3473: PUSH
3474: LD_INT 86
3476: PUSH
3477: LD_INT 1
3479: PUSH
3480: LD_INT 2
3482: PUSH
3483: LD_INT 6
3485: PUSH
3486: LD_INT 15
3488: PUSH
3489: LD_INT 16
3491: PUSH
3492: LD_INT 7
3494: PUSH
3495: LD_INT 12
3497: PUSH
3498: LD_INT 13
3500: PUSH
3501: LD_INT 10
3503: PUSH
3504: LD_INT 14
3506: PUSH
3507: LD_INT 20
3509: PUSH
3510: LD_INT 21
3512: PUSH
3513: LD_INT 22
3515: PUSH
3516: LD_INT 25
3518: PUSH
3519: LD_INT 32
3521: PUSH
3522: LD_INT 27
3524: PUSH
3525: LD_INT 36
3527: PUSH
3528: LD_INT 69
3530: PUSH
3531: LD_INT 39
3533: PUSH
3534: LD_INT 34
3536: PUSH
3537: LD_INT 40
3539: PUSH
3540: LD_INT 48
3542: PUSH
3543: LD_INT 49
3545: PUSH
3546: LD_INT 50
3548: PUSH
3549: LD_INT 51
3551: PUSH
3552: LD_INT 52
3554: PUSH
3555: LD_INT 53
3557: PUSH
3558: LD_INT 54
3560: PUSH
3561: LD_INT 55
3563: PUSH
3564: LD_INT 56
3566: PUSH
3567: LD_INT 57
3569: PUSH
3570: LD_INT 58
3572: PUSH
3573: LD_INT 59
3575: PUSH
3576: LD_INT 60
3578: PUSH
3579: LD_INT 61
3581: PUSH
3582: LD_INT 62
3584: PUSH
3585: LD_INT 80
3587: PUSH
3588: LD_INT 82
3590: PUSH
3591: LD_INT 83
3593: PUSH
3594: LD_INT 84
3596: PUSH
3597: LD_INT 85
3599: PUSH
3600: LD_INT 86
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: ST_TO_ADDR
3656: GO 4123
3658: LD_INT 2
3660: DOUBLE
3661: EQUAL
3662: IFTRUE 3666
3664: GO 3892
3666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: LD_INT 35
3674: PUSH
3675: LD_INT 45
3677: PUSH
3678: LD_INT 46
3680: PUSH
3681: LD_INT 47
3683: PUSH
3684: LD_INT 82
3686: PUSH
3687: LD_INT 83
3689: PUSH
3690: LD_INT 84
3692: PUSH
3693: LD_INT 85
3695: PUSH
3696: LD_INT 87
3698: PUSH
3699: LD_INT 70
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 11
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: LD_INT 5
3716: PUSH
3717: LD_INT 6
3719: PUSH
3720: LD_INT 15
3722: PUSH
3723: LD_INT 18
3725: PUSH
3726: LD_INT 7
3728: PUSH
3729: LD_INT 17
3731: PUSH
3732: LD_INT 8
3734: PUSH
3735: LD_INT 20
3737: PUSH
3738: LD_INT 21
3740: PUSH
3741: LD_INT 22
3743: PUSH
3744: LD_INT 72
3746: PUSH
3747: LD_INT 26
3749: PUSH
3750: LD_INT 69
3752: PUSH
3753: LD_INT 39
3755: PUSH
3756: LD_INT 40
3758: PUSH
3759: LD_INT 41
3761: PUSH
3762: LD_INT 42
3764: PUSH
3765: LD_INT 43
3767: PUSH
3768: LD_INT 48
3770: PUSH
3771: LD_INT 49
3773: PUSH
3774: LD_INT 50
3776: PUSH
3777: LD_INT 51
3779: PUSH
3780: LD_INT 52
3782: PUSH
3783: LD_INT 53
3785: PUSH
3786: LD_INT 54
3788: PUSH
3789: LD_INT 55
3791: PUSH
3792: LD_INT 56
3794: PUSH
3795: LD_INT 60
3797: PUSH
3798: LD_INT 61
3800: PUSH
3801: LD_INT 62
3803: PUSH
3804: LD_INT 66
3806: PUSH
3807: LD_INT 67
3809: PUSH
3810: LD_INT 68
3812: PUSH
3813: LD_INT 81
3815: PUSH
3816: LD_INT 82
3818: PUSH
3819: LD_INT 83
3821: PUSH
3822: LD_INT 84
3824: PUSH
3825: LD_INT 85
3827: PUSH
3828: LD_INT 87
3830: PUSH
3831: LD_INT 88
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: ST_TO_ADDR
3890: GO 4123
3892: LD_INT 3
3894: DOUBLE
3895: EQUAL
3896: IFTRUE 3900
3898: GO 4122
3900: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3901: LD_ADDR_VAR 0 4
3905: PUSH
3906: LD_INT 46
3908: PUSH
3909: LD_INT 47
3911: PUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 2
3917: PUSH
3918: LD_INT 82
3920: PUSH
3921: LD_INT 83
3923: PUSH
3924: LD_INT 84
3926: PUSH
3927: LD_INT 85
3929: PUSH
3930: LD_INT 86
3932: PUSH
3933: LD_INT 11
3935: PUSH
3936: LD_INT 9
3938: PUSH
3939: LD_INT 20
3941: PUSH
3942: LD_INT 19
3944: PUSH
3945: LD_INT 21
3947: PUSH
3948: LD_INT 24
3950: PUSH
3951: LD_INT 22
3953: PUSH
3954: LD_INT 25
3956: PUSH
3957: LD_INT 28
3959: PUSH
3960: LD_INT 29
3962: PUSH
3963: LD_INT 30
3965: PUSH
3966: LD_INT 31
3968: PUSH
3969: LD_INT 37
3971: PUSH
3972: LD_INT 38
3974: PUSH
3975: LD_INT 32
3977: PUSH
3978: LD_INT 27
3980: PUSH
3981: LD_INT 33
3983: PUSH
3984: LD_INT 69
3986: PUSH
3987: LD_INT 39
3989: PUSH
3990: LD_INT 34
3992: PUSH
3993: LD_INT 40
3995: PUSH
3996: LD_INT 71
3998: PUSH
3999: LD_INT 23
4001: PUSH
4002: LD_INT 44
4004: PUSH
4005: LD_INT 48
4007: PUSH
4008: LD_INT 49
4010: PUSH
4011: LD_INT 50
4013: PUSH
4014: LD_INT 51
4016: PUSH
4017: LD_INT 52
4019: PUSH
4020: LD_INT 53
4022: PUSH
4023: LD_INT 54
4025: PUSH
4026: LD_INT 55
4028: PUSH
4029: LD_INT 56
4031: PUSH
4032: LD_INT 57
4034: PUSH
4035: LD_INT 58
4037: PUSH
4038: LD_INT 59
4040: PUSH
4041: LD_INT 63
4043: PUSH
4044: LD_INT 64
4046: PUSH
4047: LD_INT 65
4049: PUSH
4050: LD_INT 82
4052: PUSH
4053: LD_INT 83
4055: PUSH
4056: LD_INT 84
4058: PUSH
4059: LD_INT 85
4061: PUSH
4062: LD_INT 86
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: ST_TO_ADDR
4120: GO 4123
4122: POP
// if state > - 1 and state < 3 then
4123: LD_VAR 0 3
4127: PUSH
4128: LD_INT 1
4130: NEG
4131: GREATER
4132: IFFALSE 4144
4134: PUSH
4135: LD_VAR 0 3
4139: PUSH
4140: LD_INT 3
4142: LESS
4143: AND
4144: IFFALSE 4201
// for i in result do
4146: LD_ADDR_VAR 0 5
4150: PUSH
4151: LD_VAR 0 4
4155: PUSH
4156: FOR_IN
4157: IFFALSE 4199
// if GetTech ( i , side ) <> state then
4159: LD_VAR 0 5
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 321
4173: PUSH
4174: LD_VAR 0 3
4178: NONEQUAL
4179: IFFALSE 4197
// result := result diff i ;
4181: LD_ADDR_VAR 0 4
4185: PUSH
4186: LD_VAR 0 4
4190: PUSH
4191: LD_VAR 0 5
4195: DIFF
4196: ST_TO_ADDR
4197: GO 4156
4199: POP
4200: POP
// end ;
4201: LD_VAR 0 4
4205: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4206: LD_INT 0
4208: PPUSH
4209: PPUSH
4210: PPUSH
// result := true ;
4211: LD_ADDR_VAR 0 3
4215: PUSH
4216: LD_INT 1
4218: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 480
4233: ST_TO_ADDR
// if not tmp then
4234: LD_VAR 0 5
4238: NOT
4239: IFFALSE 4243
// exit ;
4241: GO 4292
// for i in tmp do
4243: LD_ADDR_VAR 0 4
4247: PUSH
4248: LD_VAR 0 5
4252: PUSH
4253: FOR_IN
4254: IFFALSE 4290
// if GetTech ( i , side ) <> state_researched then
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL_OW 321
4270: PUSH
4271: LD_INT 2
4273: NONEQUAL
4274: IFFALSE 4288
// begin result := false ;
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: LD_INT 0
4283: ST_TO_ADDR
// exit ;
4284: POP
4285: POP
4286: GO 4292
// end ;
4288: GO 4253
4290: POP
4291: POP
// end ;
4292: LD_VAR 0 3
4296: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4297: LD_INT 0
4299: PPUSH
4300: PPUSH
4301: PPUSH
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
4311: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4312: LD_VAR 0 1
4316: NOT
4317: IFTRUE 4334
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 257
4329: PUSH
4330: LD_INT 9
4332: NONEQUAL
4333: OR
4334: IFFALSE 4338
// exit ;
4336: GO 4917
// side := GetSide ( unit ) ;
4338: LD_ADDR_VAR 0 9
4342: PUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 255
4352: ST_TO_ADDR
// tech_space := tech_spacanom ;
4353: LD_ADDR_VAR 0 12
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// tech_time := tech_taurad ;
4361: LD_ADDR_VAR 0 13
4365: PUSH
4366: LD_INT 28
4368: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4369: LD_ADDR_VAR 0 11
4373: PUSH
4374: LD_VAR 0 1
4378: PPUSH
4379: CALL_OW 310
4383: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4384: LD_VAR 0 11
4388: PPUSH
4389: CALL_OW 247
4393: PUSH
4394: LD_INT 2
4396: EQUAL
4397: IFFALSE 4401
// exit ;
4399: GO 4917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4401: LD_ADDR_VAR 0 8
4405: PUSH
4406: LD_INT 81
4408: PUSH
4409: LD_VAR 0 9
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 3
4420: PUSH
4421: LD_INT 21
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PPUSH
4439: CALL_OW 69
4443: ST_TO_ADDR
// if not tmp then
4444: LD_VAR 0 8
4448: NOT
4449: IFFALSE 4453
// exit ;
4451: GO 4917
// if in_unit then
4453: LD_VAR 0 11
4457: IFFALSE 4481
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4459: LD_ADDR_VAR 0 10
4463: PUSH
4464: LD_VAR 0 8
4468: PPUSH
4469: LD_VAR 0 11
4473: PPUSH
4474: CALL_OW 74
4478: ST_TO_ADDR
4479: GO 4501
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4481: LD_ADDR_VAR 0 10
4485: PUSH
4486: LD_VAR 0 8
4490: PPUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: CALL_OW 74
4500: ST_TO_ADDR
// if not enemy then
4501: LD_VAR 0 10
4505: NOT
4506: IFFALSE 4510
// exit ;
4508: GO 4917
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4510: LD_VAR 0 11
4514: IFFALSE 4536
4516: PUSH
4517: LD_VAR 0 11
4521: PPUSH
4522: LD_VAR 0 10
4526: PPUSH
4527: CALL_OW 296
4531: PUSH
4532: LD_INT 13
4534: GREATER
4535: AND
4536: IFTRUE 4558
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: LD_VAR 0 10
4548: PPUSH
4549: CALL_OW 296
4553: PUSH
4554: LD_INT 12
4556: GREATER
4557: OR
4558: IFFALSE 4562
// exit ;
4560: GO 4917
// missile := [ 1 ] ;
4562: LD_ADDR_VAR 0 14
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: EMPTY
4571: LIST
4572: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4573: LD_VAR 0 9
4577: PPUSH
4578: LD_VAR 0 12
4582: PPUSH
4583: CALL_OW 325
4587: IFFALSE 4616
// missile := Replace ( missile , missile + 1 , 2 ) ;
4589: LD_ADDR_VAR 0 14
4593: PUSH
4594: LD_VAR 0 14
4598: PPUSH
4599: LD_VAR 0 14
4603: PUSH
4604: LD_INT 1
4606: PLUS
4607: PPUSH
4608: LD_INT 2
4610: PPUSH
4611: CALL_OW 1
4615: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4616: LD_VAR 0 9
4620: PPUSH
4621: LD_VAR 0 13
4625: PPUSH
4626: CALL_OW 325
4630: IFFALSE 4654
4632: PUSH
4633: LD_VAR 0 10
4637: PPUSH
4638: CALL_OW 255
4642: PPUSH
4643: LD_VAR 0 13
4647: PPUSH
4648: CALL_OW 325
4652: NOT
4653: AND
4654: IFFALSE 4683
// missile := Replace ( missile , missile + 1 , 3 ) ;
4656: LD_ADDR_VAR 0 14
4660: PUSH
4661: LD_VAR 0 14
4665: PPUSH
4666: LD_VAR 0 14
4670: PUSH
4671: LD_INT 1
4673: PLUS
4674: PPUSH
4675: LD_INT 3
4677: PPUSH
4678: CALL_OW 1
4682: ST_TO_ADDR
// if missile < 2 then
4683: LD_VAR 0 14
4687: PUSH
4688: LD_INT 2
4690: LESS
4691: IFFALSE 4695
// exit ;
4693: GO 4917
// x := GetX ( enemy ) ;
4695: LD_ADDR_VAR 0 4
4699: PUSH
4700: LD_VAR 0 10
4704: PPUSH
4705: CALL_OW 250
4709: ST_TO_ADDR
// y := GetY ( enemy ) ;
4710: LD_ADDR_VAR 0 5
4714: PUSH
4715: LD_VAR 0 10
4719: PPUSH
4720: CALL_OW 251
4724: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4725: LD_ADDR_VAR 0 6
4729: PUSH
4730: LD_VAR 0 4
4734: PUSH
4735: LD_INT 1
4737: NEG
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 12
4746: PLUS
4747: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4748: LD_ADDR_VAR 0 7
4752: PUSH
4753: LD_VAR 0 5
4757: PUSH
4758: LD_INT 1
4760: NEG
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 12
4769: PLUS
4770: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4771: LD_VAR 0 6
4775: PPUSH
4776: LD_VAR 0 7
4780: PPUSH
4781: CALL_OW 488
4785: NOT
4786: IFFALSE 4808
// begin _x := x ;
4788: LD_ADDR_VAR 0 6
4792: PUSH
4793: LD_VAR 0 4
4797: ST_TO_ADDR
// _y := y ;
4798: LD_ADDR_VAR 0 7
4802: PUSH
4803: LD_VAR 0 5
4807: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4808: LD_ADDR_VAR 0 3
4812: PUSH
4813: LD_INT 1
4815: PPUSH
4816: LD_VAR 0 14
4820: PPUSH
4821: CALL_OW 12
4825: ST_TO_ADDR
// case i of 1 :
4826: LD_VAR 0 3
4830: PUSH
4831: LD_INT 1
4833: DOUBLE
4834: EQUAL
4835: IFTRUE 4839
4837: GO 4856
4839: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4840: LD_VAR 0 1
4844: PPUSH
4845: LD_VAR 0 10
4849: PPUSH
4850: CALL_OW 115
4854: GO 4917
4856: LD_INT 2
4858: DOUBLE
4859: EQUAL
4860: IFTRUE 4864
4862: GO 4886
4864: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4865: LD_VAR 0 1
4869: PPUSH
4870: LD_VAR 0 6
4874: PPUSH
4875: LD_VAR 0 7
4879: PPUSH
4880: CALL_OW 153
4884: GO 4917
4886: LD_INT 3
4888: DOUBLE
4889: EQUAL
4890: IFTRUE 4894
4892: GO 4916
4894: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4895: LD_VAR 0 1
4899: PPUSH
4900: LD_VAR 0 6
4904: PPUSH
4905: LD_VAR 0 7
4909: PPUSH
4910: CALL_OW 154
4914: GO 4917
4916: POP
// end ;
4917: LD_VAR 0 2
4921: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
// if not unit or not building then
4930: LD_VAR 0 1
4934: NOT
4935: IFTRUE 4944
4937: PUSH
4938: LD_VAR 0 2
4942: NOT
4943: OR
4944: IFFALSE 4948
// exit ;
4946: GO 5106
// x := GetX ( building ) ;
4948: LD_ADDR_VAR 0 5
4952: PUSH
4953: LD_VAR 0 2
4957: PPUSH
4958: CALL_OW 250
4962: ST_TO_ADDR
// y := GetY ( building ) ;
4963: LD_ADDR_VAR 0 6
4967: PUSH
4968: LD_VAR 0 2
4972: PPUSH
4973: CALL_OW 251
4977: ST_TO_ADDR
// for i := 0 to 5 do
4978: LD_ADDR_VAR 0 4
4982: PUSH
4983: DOUBLE
4984: LD_INT 0
4986: DEC
4987: ST_TO_ADDR
4988: LD_INT 5
4990: PUSH
4991: FOR_TO
4992: IFFALSE 5104
// begin _x := ShiftX ( x , i , 3 ) ;
4994: LD_ADDR_VAR 0 7
4998: PUSH
4999: LD_VAR 0 5
5003: PPUSH
5004: LD_VAR 0 4
5008: PPUSH
5009: LD_INT 3
5011: PPUSH
5012: CALL_OW 272
5016: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5017: LD_ADDR_VAR 0 8
5021: PUSH
5022: LD_VAR 0 6
5026: PPUSH
5027: LD_VAR 0 4
5031: PPUSH
5032: LD_INT 3
5034: PPUSH
5035: CALL_OW 273
5039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5040: LD_VAR 0 7
5044: PPUSH
5045: LD_VAR 0 8
5049: PPUSH
5050: CALL_OW 488
5054: NOT
5055: IFFALSE 5059
// continue ;
5057: GO 4991
// if HexInfo ( _x , _y ) = 0 then
5059: LD_VAR 0 7
5063: PPUSH
5064: LD_VAR 0 8
5068: PPUSH
5069: CALL_OW 428
5073: PUSH
5074: LD_INT 0
5076: EQUAL
5077: IFFALSE 5102
// begin ComMoveXY ( unit , _x , _y ) ;
5079: LD_VAR 0 1
5083: PPUSH
5084: LD_VAR 0 7
5088: PPUSH
5089: LD_VAR 0 8
5093: PPUSH
5094: CALL_OW 111
// exit ;
5098: POP
5099: POP
5100: GO 5106
// end ; end ;
5102: GO 4991
5104: POP
5105: POP
// end ;
5106: LD_VAR 0 3
5110: RET
// export function ScanBase ( side , base_area ) ; begin
5111: LD_INT 0
5113: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: LD_VAR 0 2
5123: PPUSH
5124: LD_INT 81
5126: PUSH
5127: LD_VAR 0 1
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PPUSH
5136: CALL_OW 70
5140: ST_TO_ADDR
// end ;
5141: LD_VAR 0 3
5145: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5146: LD_INT 0
5148: PPUSH
5149: PPUSH
5150: PPUSH
5151: PPUSH
// result := false ;
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: LD_INT 0
5159: ST_TO_ADDR
// side := GetSide ( unit ) ;
5160: LD_ADDR_VAR 0 3
5164: PUSH
5165: LD_VAR 0 1
5169: PPUSH
5170: CALL_OW 255
5174: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5175: LD_ADDR_VAR 0 4
5179: PUSH
5180: LD_VAR 0 1
5184: PPUSH
5185: CALL_OW 248
5189: ST_TO_ADDR
// case nat of 1 :
5190: LD_VAR 0 4
5194: PUSH
5195: LD_INT 1
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5214
5203: POP
// tech := tech_lassight ; 2 :
5204: LD_ADDR_VAR 0 5
5208: PUSH
5209: LD_INT 12
5211: ST_TO_ADDR
5212: GO 5253
5214: LD_INT 2
5216: DOUBLE
5217: EQUAL
5218: IFTRUE 5222
5220: GO 5233
5222: POP
// tech := tech_mortar ; 3 :
5223: LD_ADDR_VAR 0 5
5227: PUSH
5228: LD_INT 41
5230: ST_TO_ADDR
5231: GO 5253
5233: LD_INT 3
5235: DOUBLE
5236: EQUAL
5237: IFTRUE 5241
5239: GO 5252
5241: POP
// tech := tech_bazooka ; end ;
5242: LD_ADDR_VAR 0 5
5246: PUSH
5247: LD_INT 44
5249: ST_TO_ADDR
5250: GO 5253
5252: POP
// if Researched ( side , tech ) then
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_VAR 0 5
5262: PPUSH
5263: CALL_OW 325
5267: IFFALSE 5294
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5269: LD_ADDR_VAR 0 2
5273: PUSH
5274: LD_INT 5
5276: PUSH
5277: LD_INT 8
5279: PUSH
5280: LD_INT 9
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_VAR 0 4
5292: ARRAY
5293: ST_TO_ADDR
// end ;
5294: LD_VAR 0 2
5298: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5299: LD_INT 0
5301: PPUSH
5302: PPUSH
5303: PPUSH
// if not mines then
5304: LD_VAR 0 2
5308: NOT
5309: IFFALSE 5313
// exit ;
5311: GO 5457
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5313: LD_ADDR_VAR 0 5
5317: PUSH
5318: LD_INT 81
5320: PUSH
5321: LD_VAR 0 1
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: PUSH
5330: LD_INT 3
5332: PUSH
5333: LD_INT 21
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PPUSH
5351: CALL_OW 69
5355: ST_TO_ADDR
// for i in mines do
5356: LD_ADDR_VAR 0 4
5360: PUSH
5361: LD_VAR 0 2
5365: PUSH
5366: FOR_IN
5367: IFFALSE 5455
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5369: LD_VAR 0 4
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 2
5385: ARRAY
5386: PPUSH
5387: CALL_OW 458
5391: NOT
5392: IFFALSE 5396
// continue ;
5394: GO 5366
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5396: LD_VAR 0 4
5400: PUSH
5401: LD_INT 1
5403: ARRAY
5404: PPUSH
5405: LD_VAR 0 4
5409: PUSH
5410: LD_INT 2
5412: ARRAY
5413: PPUSH
5414: CALL_OW 428
5418: PUSH
5419: LD_VAR 0 5
5423: IN
5424: IFFALSE 5453
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5426: LD_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: LD_VAR 0 4
5439: PUSH
5440: LD_INT 2
5442: ARRAY
5443: PPUSH
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 456
// end ;
5453: GO 5366
5455: POP
5456: POP
// end ;
5457: LD_VAR 0 3
5461: RET
// export function Count ( array ) ; begin
5462: LD_INT 0
5464: PPUSH
// result := array + 0 ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: LD_VAR 0 1
5474: PUSH
5475: LD_INT 0
5477: PLUS
5478: ST_TO_ADDR
// end ;
5479: LD_VAR 0 2
5483: RET
// export function IsEmpty ( building ) ; begin
5484: LD_INT 0
5486: PPUSH
// if not building then
5487: LD_VAR 0 1
5491: NOT
5492: IFFALSE 5496
// exit ;
5494: GO 5539
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 1
5505: PUSH
5506: LD_INT 22
5508: PUSH
5509: LD_VAR 0 1
5513: PPUSH
5514: CALL_OW 255
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 58
5525: PUSH
5526: EMPTY
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: IN
5538: ST_TO_ADDR
// end ;
5539: LD_VAR 0 2
5543: RET
// export function IsNotFull ( building ) ; var places ; begin
5544: LD_INT 0
5546: PPUSH
5547: PPUSH
// if not building then
5548: LD_VAR 0 1
5552: NOT
5553: IFFALSE 5557
// exit ;
5555: GO 5585
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5557: LD_ADDR_VAR 0 2
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: LD_INT 3
5569: PUSH
5570: LD_INT 62
5572: PUSH
5573: EMPTY
5574: LIST
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PPUSH
5580: CALL_OW 72
5584: ST_TO_ADDR
// end ;
5585: LD_VAR 0 2
5589: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5590: LD_INT 0
5592: PPUSH
5593: PPUSH
5594: PPUSH
5595: PPUSH
// tmp := [ ] ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: EMPTY
5602: ST_TO_ADDR
// list := [ ] ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: EMPTY
5609: ST_TO_ADDR
// for i = 16 to 25 do
5610: LD_ADDR_VAR 0 4
5614: PUSH
5615: DOUBLE
5616: LD_INT 16
5618: DEC
5619: ST_TO_ADDR
5620: LD_INT 25
5622: PUSH
5623: FOR_TO
5624: IFFALSE 5697
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5626: LD_ADDR_VAR 0 3
5630: PUSH
5631: LD_VAR 0 3
5635: PUSH
5636: LD_INT 22
5638: PUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 255
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 91
5655: PUSH
5656: LD_VAR 0 1
5660: PUSH
5661: LD_INT 6
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 30
5671: PUSH
5672: LD_VAR 0 4
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: EMPTY
5687: LIST
5688: PPUSH
5689: CALL_OW 69
5693: ADD
5694: ST_TO_ADDR
5695: GO 5623
5697: POP
5698: POP
// for i = 1 to tmp do
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: DOUBLE
5705: LD_INT 1
5707: DEC
5708: ST_TO_ADDR
5709: LD_VAR 0 3
5713: PUSH
5714: FOR_TO
5715: IFFALSE 5803
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5717: LD_ADDR_VAR 0 5
5721: PUSH
5722: LD_VAR 0 5
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_VAR 0 4
5736: ARRAY
5737: PPUSH
5738: CALL_OW 266
5742: PUSH
5743: LD_VAR 0 3
5747: PUSH
5748: LD_VAR 0 4
5752: ARRAY
5753: PPUSH
5754: CALL_OW 250
5758: PUSH
5759: LD_VAR 0 3
5763: PUSH
5764: LD_VAR 0 4
5768: ARRAY
5769: PPUSH
5770: CALL_OW 251
5774: PUSH
5775: LD_VAR 0 3
5779: PUSH
5780: LD_VAR 0 4
5784: ARRAY
5785: PPUSH
5786: CALL_OW 254
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: PUSH
5797: EMPTY
5798: LIST
5799: ADD
5800: ST_TO_ADDR
5801: GO 5714
5803: POP
5804: POP
// result := list ;
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: LD_VAR 0 5
5814: ST_TO_ADDR
// end ;
5815: LD_VAR 0 2
5819: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5820: LD_INT 0
5822: PPUSH
5823: PPUSH
5824: PPUSH
5825: PPUSH
5826: PPUSH
5827: PPUSH
5828: PPUSH
// if not factory then
5829: LD_VAR 0 1
5833: NOT
5834: IFFALSE 5838
// exit ;
5836: GO 6441
// if control = control_apeman then
5838: LD_VAR 0 4
5842: PUSH
5843: LD_INT 5
5845: EQUAL
5846: IFFALSE 5955
// begin tmp := UnitsInside ( factory ) ;
5848: LD_ADDR_VAR 0 8
5852: PUSH
5853: LD_VAR 0 1
5857: PPUSH
5858: CALL_OW 313
5862: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_INT 25
5870: PUSH
5871: LD_INT 12
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 72
5882: NOT
5883: IFFALSE 5893
// control := control_manual ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5893: LD_ADDR_VAR 0 8
5897: PUSH
5898: LD_VAR 0 1
5902: PPUSH
5903: CALL 5590 0 1
5907: ST_TO_ADDR
// if tmp then
5908: LD_VAR 0 8
5912: IFFALSE 5955
// begin for i in tmp do
5914: LD_ADDR_VAR 0 7
5918: PUSH
5919: LD_VAR 0 8
5923: PUSH
5924: FOR_IN
5925: IFFALSE 5953
// if i [ 1 ] = b_ext_radio then
5927: LD_VAR 0 7
5931: PUSH
5932: LD_INT 1
5934: ARRAY
5935: PUSH
5936: LD_INT 22
5938: EQUAL
5939: IFFALSE 5951
// begin control := control_remote ;
5941: LD_ADDR_VAR 0 4
5945: PUSH
5946: LD_INT 2
5948: ST_TO_ADDR
// break ;
5949: GO 5953
// end ;
5951: GO 5924
5953: POP
5954: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5955: LD_VAR 0 1
5959: PPUSH
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_VAR 0 3
5969: PPUSH
5970: LD_VAR 0 4
5974: PPUSH
5975: LD_VAR 0 5
5979: PPUSH
5980: CALL_OW 448
5984: IFFALSE 6019
// begin result := [ chassis , engine , control , weapon ] ;
5986: LD_ADDR_VAR 0 6
5990: PUSH
5991: LD_VAR 0 2
5995: PUSH
5996: LD_VAR 0 3
6000: PUSH
6001: LD_VAR 0 4
6005: PUSH
6006: LD_VAR 0 5
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: ST_TO_ADDR
// exit ;
6017: GO 6441
// end ; _chassis := AvailableChassisList ( factory ) ;
6019: LD_ADDR_VAR 0 9
6023: PUSH
6024: LD_VAR 0 1
6028: PPUSH
6029: CALL_OW 475
6033: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6034: LD_ADDR_VAR 0 11
6038: PUSH
6039: LD_VAR 0 1
6043: PPUSH
6044: CALL_OW 476
6048: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6049: LD_ADDR_VAR 0 12
6053: PUSH
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 477
6063: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6064: LD_ADDR_VAR 0 10
6068: PUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 478
6078: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6079: LD_VAR 0 9
6083: NOT
6084: IFTRUE 6093
6086: PUSH
6087: LD_VAR 0 11
6091: NOT
6092: OR
6093: IFTRUE 6102
6095: PUSH
6096: LD_VAR 0 12
6100: NOT
6101: OR
6102: IFTRUE 6111
6104: PUSH
6105: LD_VAR 0 10
6109: NOT
6110: OR
6111: IFFALSE 6146
// begin result := [ chassis , engine , control , weapon ] ;
6113: LD_ADDR_VAR 0 6
6117: PUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_VAR 0 4
6132: PUSH
6133: LD_VAR 0 5
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: ST_TO_ADDR
// exit ;
6144: GO 6441
// end ; if not chassis in _chassis then
6146: LD_VAR 0 2
6150: PUSH
6151: LD_VAR 0 9
6155: IN
6156: NOT
6157: IFFALSE 6183
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_VAR 0 9
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_VAR 0 9
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 3
6192: PPUSH
6193: CALL 6446 0 2
6197: NOT
6198: IFFALSE 6259
// repeat engine := _engine [ 1 ] ;
6200: LD_ADDR_VAR 0 3
6204: PUSH
6205: LD_VAR 0 11
6209: PUSH
6210: LD_INT 1
6212: ARRAY
6213: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6214: LD_ADDR_VAR 0 11
6218: PUSH
6219: LD_VAR 0 11
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 3
6231: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6232: LD_VAR 0 2
6236: PPUSH
6237: LD_VAR 0 3
6241: PPUSH
6242: CALL 6446 0 2
6246: IFTRUE 6257
6248: PUSH
6249: LD_VAR 0 11
6253: PUSH
6254: EMPTY
6255: EQUAL
6256: OR
6257: IFFALSE 6200
// if not control in _control then
6259: LD_VAR 0 4
6263: PUSH
6264: LD_VAR 0 12
6268: IN
6269: NOT
6270: IFFALSE 6296
// control := _control [ rand ( 1 , _control ) ] ;
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: LD_VAR 0 12
6281: PUSH
6282: LD_INT 1
6284: PPUSH
6285: LD_VAR 0 12
6289: PPUSH
6290: CALL_OW 12
6294: ARRAY
6295: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6296: LD_VAR 0 2
6300: PPUSH
6301: LD_VAR 0 5
6305: PPUSH
6306: CALL 6668 0 2
6310: NOT
6311: IFFALSE 6372
// repeat weapon := _weapon [ 1 ] ;
6313: LD_ADDR_VAR 0 5
6317: PUSH
6318: LD_VAR 0 10
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6327: LD_ADDR_VAR 0 10
6331: PUSH
6332: LD_VAR 0 10
6336: PPUSH
6337: LD_INT 1
6339: PPUSH
6340: CALL_OW 3
6344: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6345: LD_VAR 0 2
6349: PPUSH
6350: LD_VAR 0 5
6354: PPUSH
6355: CALL 6668 0 2
6359: IFTRUE 6370
6361: PUSH
6362: LD_VAR 0 10
6366: PUSH
6367: EMPTY
6368: EQUAL
6369: OR
6370: IFFALSE 6313
// result := [ ] ;
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: EMPTY
6378: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_VAR 0 2
6388: PPUSH
6389: LD_VAR 0 3
6393: PPUSH
6394: LD_VAR 0 4
6398: PPUSH
6399: LD_VAR 0 5
6403: PPUSH
6404: CALL_OW 448
6408: IFFALSE 6441
// result := [ chassis , engine , control , weapon ] ;
6410: LD_ADDR_VAR 0 6
6414: PUSH
6415: LD_VAR 0 2
6419: PUSH
6420: LD_VAR 0 3
6424: PUSH
6425: LD_VAR 0 4
6429: PUSH
6430: LD_VAR 0 5
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: ST_TO_ADDR
// end ;
6441: LD_VAR 0 6
6445: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6446: LD_INT 0
6448: PPUSH
// if not chassis or not engine then
6449: LD_VAR 0 1
6453: NOT
6454: IFTRUE 6463
6456: PUSH
6457: LD_VAR 0 2
6461: NOT
6462: OR
6463: IFFALSE 6467
// exit ;
6465: GO 6663
// case engine of engine_solar :
6467: LD_VAR 0 2
6471: PUSH
6472: LD_INT 2
6474: DOUBLE
6475: EQUAL
6476: IFTRUE 6480
6478: GO 6518
6480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6481: LD_ADDR_VAR 0 3
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: LD_INT 13
6494: PUSH
6495: LD_INT 14
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: ST_TO_ADDR
6516: GO 6647
6518: LD_INT 1
6520: DOUBLE
6521: EQUAL
6522: IFTRUE 6526
6524: GO 6588
6526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6527: LD_ADDR_VAR 0 3
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: LD_INT 13
6540: PUSH
6541: LD_INT 14
6543: PUSH
6544: LD_INT 1
6546: PUSH
6547: LD_INT 2
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 23
6564: PUSH
6565: LD_INT 22
6567: PUSH
6568: LD_INT 24
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 6647
6588: LD_INT 3
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6646
6596: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_INT 13
6604: PUSH
6605: LD_INT 14
6607: PUSH
6608: LD_INT 2
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 4
6616: PUSH
6617: LD_INT 5
6619: PUSH
6620: LD_INT 21
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_INT 23
6628: PUSH
6629: LD_INT 24
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: ST_TO_ADDR
6644: GO 6647
6646: POP
// result := ( chassis in result ) ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_VAR 0 1
6656: PUSH
6657: LD_VAR 0 3
6661: IN
6662: ST_TO_ADDR
// end ;
6663: LD_VAR 0 3
6667: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6668: LD_INT 0
6670: PPUSH
// if not chassis or not weapon then
6671: LD_VAR 0 1
6675: NOT
6676: IFTRUE 6685
6678: PUSH
6679: LD_VAR 0 2
6683: NOT
6684: OR
6685: IFFALSE 6689
// exit ;
6687: GO 7749
// case weapon of us_machine_gun :
6689: LD_VAR 0 2
6693: PUSH
6694: LD_INT 2
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6702
6700: GO 6732
6702: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6703: LD_ADDR_VAR 0 3
6707: PUSH
6708: LD_INT 1
6710: PUSH
6711: LD_INT 2
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: ST_TO_ADDR
6730: GO 7733
6732: LD_INT 3
6734: DOUBLE
6735: EQUAL
6736: IFTRUE 6740
6738: GO 6770
6740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: LD_INT 1
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: LD_INT 4
6757: PUSH
6758: LD_INT 5
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 7733
6770: LD_INT 11
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6808
6778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6779: LD_ADDR_VAR 0 3
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: LD_INT 3
6792: PUSH
6793: LD_INT 4
6795: PUSH
6796: LD_INT 5
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: ST_TO_ADDR
6806: GO 7733
6808: LD_INT 4
6810: DOUBLE
6811: EQUAL
6812: IFTRUE 6816
6814: GO 6842
6816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_INT 2
6824: PUSH
6825: LD_INT 3
6827: PUSH
6828: LD_INT 4
6830: PUSH
6831: LD_INT 5
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: ST_TO_ADDR
6840: GO 7733
6842: LD_INT 5
6844: DOUBLE
6845: EQUAL
6846: IFTRUE 6850
6848: GO 6876
6850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6851: LD_ADDR_VAR 0 3
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: ST_TO_ADDR
6874: GO 7733
6876: LD_INT 9
6878: DOUBLE
6879: EQUAL
6880: IFTRUE 6884
6882: GO 6910
6884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6885: LD_ADDR_VAR 0 3
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: ST_TO_ADDR
6908: GO 7733
6910: LD_INT 7
6912: DOUBLE
6913: EQUAL
6914: IFTRUE 6918
6916: GO 6944
6918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_INT 2
6926: PUSH
6927: LD_INT 3
6929: PUSH
6930: LD_INT 4
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: ST_TO_ADDR
6942: GO 7733
6944: LD_INT 12
6946: DOUBLE
6947: EQUAL
6948: IFTRUE 6952
6950: GO 6978
6952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6953: LD_ADDR_VAR 0 3
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 3
6963: PUSH
6964: LD_INT 4
6966: PUSH
6967: LD_INT 5
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: ST_TO_ADDR
6976: GO 7733
6978: LD_INT 13
6980: DOUBLE
6981: EQUAL
6982: IFTRUE 6986
6984: GO 7012
6986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6987: LD_ADDR_VAR 0 3
6991: PUSH
6992: LD_INT 2
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: LD_INT 4
7000: PUSH
7001: LD_INT 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7733
7012: LD_INT 14
7014: DOUBLE
7015: EQUAL
7016: IFTRUE 7020
7018: GO 7038
7020: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7021: LD_ADDR_VAR 0 3
7025: PUSH
7026: LD_INT 4
7028: PUSH
7029: LD_INT 5
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: ST_TO_ADDR
7036: GO 7733
7038: LD_INT 6
7040: DOUBLE
7041: EQUAL
7042: IFTRUE 7046
7044: GO 7064
7046: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7047: LD_ADDR_VAR 0 3
7051: PUSH
7052: LD_INT 4
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
7062: GO 7733
7064: LD_INT 10
7066: DOUBLE
7067: EQUAL
7068: IFTRUE 7072
7070: GO 7090
7072: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7073: LD_ADDR_VAR 0 3
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: ST_TO_ADDR
7088: GO 7733
7090: LD_INT 22
7092: DOUBLE
7093: EQUAL
7094: IFTRUE 7098
7096: GO 7124
7098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 11
7106: PUSH
7107: LD_INT 12
7109: PUSH
7110: LD_INT 13
7112: PUSH
7113: LD_INT 14
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: ST_TO_ADDR
7122: GO 7733
7124: LD_INT 23
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7158
7132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_INT 11
7140: PUSH
7141: LD_INT 12
7143: PUSH
7144: LD_INT 13
7146: PUSH
7147: LD_INT 14
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: ST_TO_ADDR
7156: GO 7733
7158: LD_INT 24
7160: DOUBLE
7161: EQUAL
7162: IFTRUE 7166
7164: GO 7192
7166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: LD_INT 11
7174: PUSH
7175: LD_INT 12
7177: PUSH
7178: LD_INT 13
7180: PUSH
7181: LD_INT 14
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: ST_TO_ADDR
7190: GO 7733
7192: LD_INT 30
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7226
7200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7201: LD_ADDR_VAR 0 3
7205: PUSH
7206: LD_INT 11
7208: PUSH
7209: LD_INT 12
7211: PUSH
7212: LD_INT 13
7214: PUSH
7215: LD_INT 14
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: ST_TO_ADDR
7224: GO 7733
7226: LD_INT 25
7228: DOUBLE
7229: EQUAL
7230: IFTRUE 7234
7232: GO 7252
7234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7235: LD_ADDR_VAR 0 3
7239: PUSH
7240: LD_INT 13
7242: PUSH
7243: LD_INT 14
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: ST_TO_ADDR
7250: GO 7733
7252: LD_INT 27
7254: DOUBLE
7255: EQUAL
7256: IFTRUE 7260
7258: GO 7278
7260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: LD_INT 13
7268: PUSH
7269: LD_INT 14
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: ST_TO_ADDR
7276: GO 7733
7278: LD_INT 92
7280: DOUBLE
7281: EQUAL
7282: IFTRUE 7286
7284: GO 7312
7286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_INT 11
7294: PUSH
7295: LD_INT 12
7297: PUSH
7298: LD_INT 13
7300: PUSH
7301: LD_INT 14
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: ST_TO_ADDR
7310: GO 7733
7312: LD_INT 28
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7338
7320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7321: LD_ADDR_VAR 0 3
7325: PUSH
7326: LD_INT 13
7328: PUSH
7329: LD_INT 14
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: ST_TO_ADDR
7336: GO 7733
7338: LD_INT 29
7340: DOUBLE
7341: EQUAL
7342: IFTRUE 7346
7344: GO 7364
7346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7347: LD_ADDR_VAR 0 3
7351: PUSH
7352: LD_INT 13
7354: PUSH
7355: LD_INT 14
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: ST_TO_ADDR
7362: GO 7733
7364: LD_INT 31
7366: DOUBLE
7367: EQUAL
7368: IFTRUE 7372
7370: GO 7390
7372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7373: LD_ADDR_VAR 0 3
7377: PUSH
7378: LD_INT 13
7380: PUSH
7381: LD_INT 14
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: ST_TO_ADDR
7388: GO 7733
7390: LD_INT 26
7392: DOUBLE
7393: EQUAL
7394: IFTRUE 7398
7396: GO 7416
7398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7399: LD_ADDR_VAR 0 3
7403: PUSH
7404: LD_INT 13
7406: PUSH
7407: LD_INT 14
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: ST_TO_ADDR
7414: GO 7733
7416: LD_INT 42
7418: DOUBLE
7419: EQUAL
7420: IFTRUE 7424
7422: GO 7450
7424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7425: LD_ADDR_VAR 0 3
7429: PUSH
7430: LD_INT 21
7432: PUSH
7433: LD_INT 22
7435: PUSH
7436: LD_INT 23
7438: PUSH
7439: LD_INT 24
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: ST_TO_ADDR
7448: GO 7733
7450: LD_INT 43
7452: DOUBLE
7453: EQUAL
7454: IFTRUE 7458
7456: GO 7484
7458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 22
7469: PUSH
7470: LD_INT 23
7472: PUSH
7473: LD_INT 24
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: ST_TO_ADDR
7482: GO 7733
7484: LD_INT 44
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7518
7492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7493: LD_ADDR_VAR 0 3
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 22
7503: PUSH
7504: LD_INT 23
7506: PUSH
7507: LD_INT 24
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: ST_TO_ADDR
7516: GO 7733
7518: LD_INT 45
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7552
7526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7527: LD_ADDR_VAR 0 3
7531: PUSH
7532: LD_INT 21
7534: PUSH
7535: LD_INT 22
7537: PUSH
7538: LD_INT 23
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: ST_TO_ADDR
7550: GO 7733
7552: LD_INT 49
7554: DOUBLE
7555: EQUAL
7556: IFTRUE 7560
7558: GO 7586
7560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7561: LD_ADDR_VAR 0 3
7565: PUSH
7566: LD_INT 21
7568: PUSH
7569: LD_INT 22
7571: PUSH
7572: LD_INT 23
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
7584: GO 7733
7586: LD_INT 51
7588: DOUBLE
7589: EQUAL
7590: IFTRUE 7594
7592: GO 7620
7594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7595: LD_ADDR_VAR 0 3
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_INT 23
7608: PUSH
7609: LD_INT 24
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: ST_TO_ADDR
7618: GO 7733
7620: LD_INT 52
7622: DOUBLE
7623: EQUAL
7624: IFTRUE 7628
7626: GO 7654
7628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 22
7639: PUSH
7640: LD_INT 23
7642: PUSH
7643: LD_INT 24
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: ST_TO_ADDR
7652: GO 7733
7654: LD_INT 53
7656: DOUBLE
7657: EQUAL
7658: IFTRUE 7662
7660: GO 7680
7662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7663: LD_ADDR_VAR 0 3
7667: PUSH
7668: LD_INT 23
7670: PUSH
7671: LD_INT 24
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: ST_TO_ADDR
7678: GO 7733
7680: LD_INT 46
7682: DOUBLE
7683: EQUAL
7684: IFTRUE 7688
7686: GO 7706
7688: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7689: LD_ADDR_VAR 0 3
7693: PUSH
7694: LD_INT 23
7696: PUSH
7697: LD_INT 24
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: ST_TO_ADDR
7704: GO 7733
7706: LD_INT 47
7708: DOUBLE
7709: EQUAL
7710: IFTRUE 7714
7712: GO 7732
7714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7715: LD_ADDR_VAR 0 3
7719: PUSH
7720: LD_INT 23
7722: PUSH
7723: LD_INT 24
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: ST_TO_ADDR
7730: GO 7733
7732: POP
// result := ( chassis in result ) ;
7733: LD_ADDR_VAR 0 3
7737: PUSH
7738: LD_VAR 0 1
7742: PUSH
7743: LD_VAR 0 3
7747: IN
7748: ST_TO_ADDR
// end ;
7749: LD_VAR 0 3
7753: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7754: LD_INT 0
7756: PPUSH
7757: PPUSH
7758: PPUSH
7759: PPUSH
7760: PPUSH
7761: PPUSH
7762: PPUSH
// result := array ;
7763: LD_ADDR_VAR 0 5
7767: PUSH
7768: LD_VAR 0 1
7772: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7773: LD_VAR 0 1
7777: NOT
7778: IFTRUE 7787
7780: PUSH
7781: LD_VAR 0 2
7785: NOT
7786: OR
7787: IFTRUE 7796
7789: PUSH
7790: LD_VAR 0 3
7794: NOT
7795: OR
7796: IFTRUE 7810
7798: PUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: GREATER
7809: OR
7810: IFTRUE 7824
7812: PUSH
7813: LD_VAR 0 3
7817: PUSH
7818: LD_VAR 0 1
7822: GREATER
7823: OR
7824: IFFALSE 7828
// exit ;
7826: GO 8124
// if direction then
7828: LD_VAR 0 4
7832: IFFALSE 7896
// begin d := 1 ;
7834: LD_ADDR_VAR 0 9
7838: PUSH
7839: LD_INT 1
7841: ST_TO_ADDR
// if i_from > i_to then
7842: LD_VAR 0 2
7846: PUSH
7847: LD_VAR 0 3
7851: GREATER
7852: IFFALSE 7878
// length := ( array - i_from ) + i_to else
7854: LD_ADDR_VAR 0 11
7858: PUSH
7859: LD_VAR 0 1
7863: PUSH
7864: LD_VAR 0 2
7868: MINUS
7869: PUSH
7870: LD_VAR 0 3
7874: PLUS
7875: ST_TO_ADDR
7876: GO 7894
// length := i_to - i_from ;
7878: LD_ADDR_VAR 0 11
7882: PUSH
7883: LD_VAR 0 3
7887: PUSH
7888: LD_VAR 0 2
7892: MINUS
7893: ST_TO_ADDR
// end else
7894: GO 7957
// begin d := - 1 ;
7896: LD_ADDR_VAR 0 9
7900: PUSH
7901: LD_INT 1
7903: NEG
7904: ST_TO_ADDR
// if i_from > i_to then
7905: LD_VAR 0 2
7909: PUSH
7910: LD_VAR 0 3
7914: GREATER
7915: IFFALSE 7935
// length := i_from - i_to else
7917: LD_ADDR_VAR 0 11
7921: PUSH
7922: LD_VAR 0 2
7926: PUSH
7927: LD_VAR 0 3
7931: MINUS
7932: ST_TO_ADDR
7933: GO 7957
// length := ( array - i_to ) + i_from ;
7935: LD_ADDR_VAR 0 11
7939: PUSH
7940: LD_VAR 0 1
7944: PUSH
7945: LD_VAR 0 3
7949: MINUS
7950: PUSH
7951: LD_VAR 0 2
7955: PLUS
7956: ST_TO_ADDR
// end ; if not length then
7957: LD_VAR 0 11
7961: NOT
7962: IFFALSE 7966
// exit ;
7964: GO 8124
// tmp := array ;
7966: LD_ADDR_VAR 0 10
7970: PUSH
7971: LD_VAR 0 1
7975: ST_TO_ADDR
// for i = 1 to length do
7976: LD_ADDR_VAR 0 6
7980: PUSH
7981: DOUBLE
7982: LD_INT 1
7984: DEC
7985: ST_TO_ADDR
7986: LD_VAR 0 11
7990: PUSH
7991: FOR_TO
7992: IFFALSE 8112
// begin for j = 1 to array do
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: DOUBLE
8000: LD_INT 1
8002: DEC
8003: ST_TO_ADDR
8004: LD_VAR 0 1
8008: PUSH
8009: FOR_TO
8010: IFFALSE 8098
// begin k := j + d ;
8012: LD_ADDR_VAR 0 8
8016: PUSH
8017: LD_VAR 0 7
8021: PUSH
8022: LD_VAR 0 9
8026: PLUS
8027: ST_TO_ADDR
// if k > array then
8028: LD_VAR 0 8
8032: PUSH
8033: LD_VAR 0 1
8037: GREATER
8038: IFFALSE 8048
// k := 1 ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if not k then
8048: LD_VAR 0 8
8052: NOT
8053: IFFALSE 8065
// k := array ;
8055: LD_ADDR_VAR 0 8
8059: PUSH
8060: LD_VAR 0 1
8064: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8065: LD_ADDR_VAR 0 10
8069: PUSH
8070: LD_VAR 0 10
8074: PPUSH
8075: LD_VAR 0 8
8079: PPUSH
8080: LD_VAR 0 1
8084: PUSH
8085: LD_VAR 0 7
8089: ARRAY
8090: PPUSH
8091: CALL_OW 1
8095: ST_TO_ADDR
// end ;
8096: GO 8009
8098: POP
8099: POP
// array := tmp ;
8100: LD_ADDR_VAR 0 1
8104: PUSH
8105: LD_VAR 0 10
8109: ST_TO_ADDR
// end ;
8110: GO 7991
8112: POP
8113: POP
// result := array ;
8114: LD_ADDR_VAR 0 5
8118: PUSH
8119: LD_VAR 0 1
8123: ST_TO_ADDR
// end ;
8124: LD_VAR 0 5
8128: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
// result := 0 ;
8133: LD_ADDR_VAR 0 3
8137: PUSH
8138: LD_INT 0
8140: ST_TO_ADDR
// if not array or not value in array then
8141: LD_VAR 0 1
8145: NOT
8146: IFTRUE 8161
8148: PUSH
8149: LD_VAR 0 2
8153: PUSH
8154: LD_VAR 0 1
8158: IN
8159: NOT
8160: OR
8161: IFFALSE 8165
// exit ;
8163: GO 8219
// for i = 1 to array do
8165: LD_ADDR_VAR 0 4
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 1
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8217
// if value = array [ i ] then
8183: LD_VAR 0 2
8187: PUSH
8188: LD_VAR 0 1
8192: PUSH
8193: LD_VAR 0 4
8197: ARRAY
8198: EQUAL
8199: IFFALSE 8215
// begin result := i ;
8201: LD_ADDR_VAR 0 3
8205: PUSH
8206: LD_VAR 0 4
8210: ST_TO_ADDR
// exit ;
8211: POP
8212: POP
8213: GO 8219
// end ;
8215: GO 8180
8217: POP
8218: POP
// end ;
8219: LD_VAR 0 3
8223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8224: LD_INT 0
8226: PPUSH
// vc_chassis := chassis ;
8227: LD_ADDR_OWVAR 37
8231: PUSH
8232: LD_VAR 0 1
8236: ST_TO_ADDR
// vc_engine := engine ;
8237: LD_ADDR_OWVAR 39
8241: PUSH
8242: LD_VAR 0 2
8246: ST_TO_ADDR
// vc_control := control ;
8247: LD_ADDR_OWVAR 38
8251: PUSH
8252: LD_VAR 0 3
8256: ST_TO_ADDR
// vc_weapon := weapon ;
8257: LD_ADDR_OWVAR 40
8261: PUSH
8262: LD_VAR 0 4
8266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8267: LD_ADDR_OWVAR 41
8271: PUSH
8272: LD_VAR 0 5
8276: ST_TO_ADDR
// end ;
8277: LD_VAR 0 6
8281: RET
// export function WantPlant ( unit ) ; var task ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
// result := false ;
8286: LD_ADDR_VAR 0 2
8290: PUSH
8291: LD_INT 0
8293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8294: LD_ADDR_VAR 0 3
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 437
8308: ST_TO_ADDR
// if task then
8309: LD_VAR 0 3
8313: IFFALSE 8341
// if task [ 1 ] [ 1 ] = p then
8315: LD_VAR 0 3
8319: PUSH
8320: LD_INT 1
8322: ARRAY
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PUSH
8328: LD_STRING p
8330: EQUAL
8331: IFFALSE 8341
// result := true ;
8333: LD_ADDR_VAR 0 2
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// end ;
8341: LD_VAR 0 2
8345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8346: LD_INT 0
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
// if pos < 1 then
8352: LD_VAR 0 2
8356: PUSH
8357: LD_INT 1
8359: LESS
8360: IFFALSE 8364
// exit ;
8362: GO 8667
// if pos = 1 then
8364: LD_VAR 0 2
8368: PUSH
8369: LD_INT 1
8371: EQUAL
8372: IFFALSE 8405
// result := Replace ( arr , pos [ 1 ] , value ) else
8374: LD_ADDR_VAR 0 4
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_VAR 0 2
8388: PUSH
8389: LD_INT 1
8391: ARRAY
8392: PPUSH
8393: LD_VAR 0 3
8397: PPUSH
8398: CALL_OW 1
8402: ST_TO_ADDR
8403: GO 8667
// begin tmp := arr ;
8405: LD_ADDR_VAR 0 6
8409: PUSH
8410: LD_VAR 0 1
8414: ST_TO_ADDR
// s_arr := [ tmp ] ;
8415: LD_ADDR_VAR 0 7
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: EMPTY
8426: LIST
8427: ST_TO_ADDR
// for i = 1 to pos - 1 do
8428: LD_ADDR_VAR 0 5
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: MINUS
8446: PUSH
8447: FOR_TO
8448: IFFALSE 8493
// begin tmp := tmp [ pos [ i ] ] ;
8450: LD_ADDR_VAR 0 6
8454: PUSH
8455: LD_VAR 0 6
8459: PUSH
8460: LD_VAR 0 2
8464: PUSH
8465: LD_VAR 0 5
8469: ARRAY
8470: ARRAY
8471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8472: LD_ADDR_VAR 0 7
8476: PUSH
8477: LD_VAR 0 7
8481: PUSH
8482: LD_VAR 0 6
8486: PUSH
8487: EMPTY
8488: LIST
8489: ADD
8490: ST_TO_ADDR
// end ;
8491: GO 8447
8493: POP
8494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8495: LD_ADDR_VAR 0 6
8499: PUSH
8500: LD_VAR 0 6
8504: PPUSH
8505: LD_VAR 0 2
8509: PUSH
8510: LD_VAR 0 2
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 3
8520: PPUSH
8521: CALL_OW 1
8525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8526: LD_ADDR_VAR 0 7
8530: PUSH
8531: LD_VAR 0 7
8535: PPUSH
8536: LD_VAR 0 7
8540: PPUSH
8541: LD_VAR 0 6
8545: PPUSH
8546: CALL_OW 1
8550: ST_TO_ADDR
// for i = s_arr downto 2 do
8551: LD_ADDR_VAR 0 5
8555: PUSH
8556: DOUBLE
8557: LD_VAR 0 7
8561: INC
8562: ST_TO_ADDR
8563: LD_INT 2
8565: PUSH
8566: FOR_DOWNTO
8567: IFFALSE 8651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8569: LD_ADDR_VAR 0 6
8573: PUSH
8574: LD_VAR 0 7
8578: PUSH
8579: LD_VAR 0 5
8583: PUSH
8584: LD_INT 1
8586: MINUS
8587: ARRAY
8588: PPUSH
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 5
8598: PUSH
8599: LD_INT 1
8601: MINUS
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_VAR 0 5
8613: ARRAY
8614: PPUSH
8615: CALL_OW 1
8619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8620: LD_ADDR_VAR 0 7
8624: PUSH
8625: LD_VAR 0 7
8629: PPUSH
8630: LD_VAR 0 5
8634: PUSH
8635: LD_INT 1
8637: MINUS
8638: PPUSH
8639: LD_VAR 0 6
8643: PPUSH
8644: CALL_OW 1
8648: ST_TO_ADDR
// end ;
8649: GO 8566
8651: POP
8652: POP
// result := s_arr [ 1 ] ;
8653: LD_ADDR_VAR 0 4
8657: PUSH
8658: LD_VAR 0 7
8662: PUSH
8663: LD_INT 1
8665: ARRAY
8666: ST_TO_ADDR
// end ; end ;
8667: LD_VAR 0 4
8671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8672: LD_INT 0
8674: PPUSH
8675: PPUSH
// if not list then
8676: LD_VAR 0 1
8680: NOT
8681: IFFALSE 8685
// exit ;
8683: GO 8776
// i := list [ pos1 ] ;
8685: LD_ADDR_VAR 0 5
8689: PUSH
8690: LD_VAR 0 1
8694: PUSH
8695: LD_VAR 0 2
8699: ARRAY
8700: ST_TO_ADDR
// if not i then
8701: LD_VAR 0 5
8705: NOT
8706: IFFALSE 8710
// exit ;
8708: GO 8776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_VAR 0 1
8719: PPUSH
8720: LD_VAR 0 2
8724: PPUSH
8725: LD_VAR 0 1
8729: PUSH
8730: LD_VAR 0 3
8734: ARRAY
8735: PPUSH
8736: CALL_OW 1
8740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8741: LD_ADDR_VAR 0 1
8745: PUSH
8746: LD_VAR 0 1
8750: PPUSH
8751: LD_VAR 0 3
8755: PPUSH
8756: LD_VAR 0 5
8760: PPUSH
8761: CALL_OW 1
8765: ST_TO_ADDR
// result := list ;
8766: LD_ADDR_VAR 0 4
8770: PUSH
8771: LD_VAR 0 1
8775: ST_TO_ADDR
// end ;
8776: LD_VAR 0 4
8780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8781: LD_INT 0
8783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8784: LD_ADDR_VAR 0 5
8788: PUSH
8789: LD_VAR 0 1
8793: PPUSH
8794: CALL_OW 250
8798: PPUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 251
8808: PPUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: LD_VAR 0 3
8818: PPUSH
8819: LD_VAR 0 4
8823: PPUSH
8824: CALL 9206 0 5
8828: ST_TO_ADDR
// end ;
8829: LD_VAR 0 5
8833: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
8838: PPUSH
8839: PPUSH
// if not list or not unit then
8840: LD_VAR 0 2
8844: NOT
8845: IFTRUE 8854
8847: PUSH
8848: LD_VAR 0 1
8852: NOT
8853: OR
8854: IFFALSE 8858
// exit ;
8856: GO 9201
// result := [ ] ;
8858: LD_ADDR_VAR 0 5
8862: PUSH
8863: EMPTY
8864: ST_TO_ADDR
// for i in list do
8865: LD_ADDR_VAR 0 6
8869: PUSH
8870: LD_VAR 0 2
8874: PUSH
8875: FOR_IN
8876: IFFALSE 9094
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8878: LD_ADDR_VAR 0 8
8882: PUSH
8883: LD_VAR 0 1
8887: PPUSH
8888: LD_VAR 0 6
8892: PUSH
8893: LD_INT 1
8895: ARRAY
8896: PPUSH
8897: LD_VAR 0 6
8901: PUSH
8902: LD_INT 2
8904: ARRAY
8905: PPUSH
8906: CALL_OW 297
8910: ST_TO_ADDR
// if not Count ( result ) then
8911: LD_VAR 0 5
8915: PPUSH
8916: CALL 5462 0 1
8920: NOT
8921: IFFALSE 8954
// begin result := Join ( result , [ i , tmp ] ) ;
8923: LD_ADDR_VAR 0 5
8927: PUSH
8928: LD_VAR 0 5
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_VAR 0 8
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL 41394 0 2
8951: ST_TO_ADDR
// continue ;
8952: GO 8875
// end ; if result [ result ] [ 2 ] <= tmp then
8954: LD_VAR 0 5
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PUSH
8965: LD_INT 2
8967: ARRAY
8968: PUSH
8969: LD_VAR 0 8
8973: LESSEQUAL
8974: IFFALSE 9007
// result := Join ( result , [ i , tmp ] ) else
8976: LD_ADDR_VAR 0 5
8980: PUSH
8981: LD_VAR 0 5
8985: PPUSH
8986: LD_VAR 0 6
8990: PUSH
8991: LD_VAR 0 8
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PPUSH
9000: CALL 41394 0 2
9004: ST_TO_ADDR
9005: GO 9092
// begin for j := 1 to Count ( result ) do
9007: LD_ADDR_VAR 0 7
9011: PUSH
9012: DOUBLE
9013: LD_INT 1
9015: DEC
9016: ST_TO_ADDR
9017: LD_VAR 0 5
9021: PPUSH
9022: CALL 5462 0 1
9026: PUSH
9027: FOR_TO
9028: IFFALSE 9090
// begin if tmp < result [ j ] [ 2 ] then
9030: LD_VAR 0 8
9034: PUSH
9035: LD_VAR 0 5
9039: PUSH
9040: LD_VAR 0 7
9044: ARRAY
9045: PUSH
9046: LD_INT 2
9048: ARRAY
9049: LESS
9050: IFFALSE 9088
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9052: LD_ADDR_VAR 0 5
9056: PUSH
9057: LD_VAR 0 5
9061: PPUSH
9062: LD_VAR 0 7
9066: PPUSH
9067: LD_VAR 0 6
9071: PUSH
9072: LD_VAR 0 8
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 2
9085: ST_TO_ADDR
// break ;
9086: GO 9090
// end ; end ;
9088: GO 9027
9090: POP
9091: POP
// end ; end ;
9092: GO 8875
9094: POP
9095: POP
// if result and not asc then
9096: LD_VAR 0 5
9100: IFFALSE 9109
9102: PUSH
9103: LD_VAR 0 3
9107: NOT
9108: AND
9109: IFFALSE 9126
// result := ReverseArray ( result ) ;
9111: LD_ADDR_VAR 0 5
9115: PUSH
9116: LD_VAR 0 5
9120: PPUSH
9121: CALL 36484 0 1
9125: ST_TO_ADDR
// tmp := [ ] ;
9126: LD_ADDR_VAR 0 8
9130: PUSH
9131: EMPTY
9132: ST_TO_ADDR
// if mode then
9133: LD_VAR 0 4
9137: IFFALSE 9201
// begin for i := 1 to result do
9139: LD_ADDR_VAR 0 6
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 5
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9189
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9157: LD_ADDR_VAR 0 8
9161: PUSH
9162: LD_VAR 0 8
9166: PPUSH
9167: LD_VAR 0 5
9171: PUSH
9172: LD_VAR 0 6
9176: ARRAY
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: CALL 41394 0 2
9186: ST_TO_ADDR
9187: GO 9154
9189: POP
9190: POP
// result := tmp ;
9191: LD_ADDR_VAR 0 5
9195: PUSH
9196: LD_VAR 0 8
9200: ST_TO_ADDR
// end ; end ;
9201: LD_VAR 0 5
9205: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9206: LD_INT 0
9208: PPUSH
9209: PPUSH
9210: PPUSH
9211: PPUSH
// if not list then
9212: LD_VAR 0 3
9216: NOT
9217: IFFALSE 9221
// exit ;
9219: GO 9611
// result := [ ] ;
9221: LD_ADDR_VAR 0 6
9225: PUSH
9226: EMPTY
9227: ST_TO_ADDR
// for i in list do
9228: LD_ADDR_VAR 0 7
9232: PUSH
9233: LD_VAR 0 3
9237: PUSH
9238: FOR_IN
9239: IFFALSE 9441
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9241: LD_ADDR_VAR 0 9
9245: PUSH
9246: LD_VAR 0 7
9250: PPUSH
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_VAR 0 2
9260: PPUSH
9261: CALL_OW 297
9265: ST_TO_ADDR
// if not result then
9266: LD_VAR 0 6
9270: NOT
9271: IFFALSE 9297
// result := [ [ i , tmp ] ] else
9273: LD_ADDR_VAR 0 6
9277: PUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_VAR 0 9
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: ST_TO_ADDR
9295: GO 9439
// begin if result [ result ] [ 2 ] <= tmp then
9297: LD_VAR 0 6
9301: PUSH
9302: LD_VAR 0 6
9306: ARRAY
9307: PUSH
9308: LD_INT 2
9310: ARRAY
9311: PUSH
9312: LD_VAR 0 9
9316: LESSEQUAL
9317: IFFALSE 9359
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9319: LD_ADDR_VAR 0 6
9323: PUSH
9324: LD_VAR 0 6
9328: PPUSH
9329: LD_VAR 0 6
9333: PUSH
9334: LD_INT 1
9336: PLUS
9337: PPUSH
9338: LD_VAR 0 7
9342: PUSH
9343: LD_VAR 0 9
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 2
9356: ST_TO_ADDR
9357: GO 9439
// for j := 1 to result do
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: DOUBLE
9365: LD_INT 1
9367: DEC
9368: ST_TO_ADDR
9369: LD_VAR 0 6
9373: PUSH
9374: FOR_TO
9375: IFFALSE 9437
// begin if tmp < result [ j ] [ 2 ] then
9377: LD_VAR 0 9
9381: PUSH
9382: LD_VAR 0 6
9386: PUSH
9387: LD_VAR 0 8
9391: ARRAY
9392: PUSH
9393: LD_INT 2
9395: ARRAY
9396: LESS
9397: IFFALSE 9435
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9399: LD_ADDR_VAR 0 6
9403: PUSH
9404: LD_VAR 0 6
9408: PPUSH
9409: LD_VAR 0 8
9413: PPUSH
9414: LD_VAR 0 7
9418: PUSH
9419: LD_VAR 0 9
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 2
9432: ST_TO_ADDR
// break ;
9433: GO 9437
// end ; end ;
9435: GO 9374
9437: POP
9438: POP
// end ; end ;
9439: GO 9238
9441: POP
9442: POP
// if result and not asc then
9443: LD_VAR 0 6
9447: IFFALSE 9456
9449: PUSH
9450: LD_VAR 0 4
9454: NOT
9455: AND
9456: IFFALSE 9531
// begin tmp := result ;
9458: LD_ADDR_VAR 0 9
9462: PUSH
9463: LD_VAR 0 6
9467: ST_TO_ADDR
// for i = tmp downto 1 do
9468: LD_ADDR_VAR 0 7
9472: PUSH
9473: DOUBLE
9474: LD_VAR 0 9
9478: INC
9479: ST_TO_ADDR
9480: LD_INT 1
9482: PUSH
9483: FOR_DOWNTO
9484: IFFALSE 9529
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9486: LD_ADDR_VAR 0 6
9490: PUSH
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_VAR 0 9
9500: PUSH
9501: LD_VAR 0 7
9505: MINUS
9506: PUSH
9507: LD_INT 1
9509: PLUS
9510: PPUSH
9511: LD_VAR 0 9
9515: PUSH
9516: LD_VAR 0 7
9520: ARRAY
9521: PPUSH
9522: CALL_OW 1
9526: ST_TO_ADDR
9527: GO 9483
9529: POP
9530: POP
// end ; tmp := [ ] ;
9531: LD_ADDR_VAR 0 9
9535: PUSH
9536: EMPTY
9537: ST_TO_ADDR
// if mode then
9538: LD_VAR 0 5
9542: IFFALSE 9611
// begin for i = 1 to result do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: DOUBLE
9550: LD_INT 1
9552: DEC
9553: ST_TO_ADDR
9554: LD_VAR 0 6
9558: PUSH
9559: FOR_TO
9560: IFFALSE 9599
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9562: LD_ADDR_VAR 0 9
9566: PUSH
9567: LD_VAR 0 9
9571: PPUSH
9572: LD_VAR 0 7
9576: PPUSH
9577: LD_VAR 0 6
9581: PUSH
9582: LD_VAR 0 7
9586: ARRAY
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: CALL_OW 1
9596: ST_TO_ADDR
9597: GO 9559
9599: POP
9600: POP
// result := tmp ;
9601: LD_ADDR_VAR 0 6
9605: PUSH
9606: LD_VAR 0 9
9610: ST_TO_ADDR
// end ; end ;
9611: LD_VAR 0 6
9615: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9616: LD_INT 0
9618: PPUSH
9619: PPUSH
9620: PPUSH
9621: PPUSH
9622: PPUSH
9623: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9624: LD_ADDR_VAR 0 5
9628: PUSH
9629: LD_INT 0
9631: PUSH
9632: LD_INT 0
9634: PUSH
9635: LD_INT 0
9637: PUSH
9638: EMPTY
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: ST_TO_ADDR
// if not x or not y then
9646: LD_VAR 0 2
9650: NOT
9651: IFTRUE 9660
9653: PUSH
9654: LD_VAR 0 3
9658: NOT
9659: OR
9660: IFFALSE 9664
// exit ;
9662: GO 11320
// if not range then
9664: LD_VAR 0 4
9668: NOT
9669: IFFALSE 9679
// range := 10 ;
9671: LD_ADDR_VAR 0 4
9675: PUSH
9676: LD_INT 10
9678: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9679: LD_ADDR_VAR 0 8
9683: PUSH
9684: LD_INT 81
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 92
9698: PUSH
9699: LD_VAR 0 2
9703: PUSH
9704: LD_VAR 0 3
9708: PUSH
9709: LD_VAR 0 4
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 69
9746: ST_TO_ADDR
// if not tmp then
9747: LD_VAR 0 8
9751: NOT
9752: IFFALSE 9756
// exit ;
9754: GO 11320
// for i in tmp do
9756: LD_ADDR_VAR 0 6
9760: PUSH
9761: LD_VAR 0 8
9765: PUSH
9766: FOR_IN
9767: IFFALSE 11295
// begin points := [ 0 , 0 , 0 ] ;
9769: LD_ADDR_VAR 0 9
9773: PUSH
9774: LD_INT 0
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: LD_INT 0
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: ST_TO_ADDR
// bpoints := 1 ;
9788: LD_ADDR_VAR 0 10
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9796: LD_VAR 0 6
9800: PPUSH
9801: CALL_OW 247
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 10396
9814: POP
// begin if GetClass ( i ) = 1 then
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL_OW 257
9824: PUSH
9825: LD_INT 1
9827: EQUAL
9828: IFFALSE 9849
// points := [ 10 , 5 , 3 ] ;
9830: LD_ADDR_VAR 0 9
9834: PUSH
9835: LD_INT 10
9837: PUSH
9838: LD_INT 5
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9849: LD_VAR 0 6
9853: PPUSH
9854: CALL_OW 257
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 3
9864: PUSH
9865: LD_INT 4
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: IN
9873: IFFALSE 9894
// points := [ 3 , 2 , 1 ] ;
9875: LD_ADDR_VAR 0 9
9879: PUSH
9880: LD_INT 3
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 257
9903: PUSH
9904: LD_INT 5
9906: EQUAL
9907: IFFALSE 9928
// points := [ 130 , 5 , 2 ] ;
9909: LD_ADDR_VAR 0 9
9913: PUSH
9914: LD_INT 130
9916: PUSH
9917: LD_INT 5
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9928: LD_VAR 0 6
9932: PPUSH
9933: CALL_OW 257
9937: PUSH
9938: LD_INT 8
9940: EQUAL
9941: IFFALSE 9962
// points := [ 35 , 35 , 30 ] ;
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: LD_INT 35
9950: PUSH
9951: LD_INT 35
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9962: LD_VAR 0 6
9966: PPUSH
9967: CALL_OW 257
9971: PUSH
9972: LD_INT 9
9974: EQUAL
9975: IFFALSE 9996
// points := [ 20 , 55 , 40 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 20
9984: PUSH
9985: LD_INT 55
9987: PUSH
9988: LD_INT 40
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 257
10005: PUSH
10006: LD_INT 12
10008: PUSH
10009: LD_INT 16
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: IN
10016: IFFALSE 10037
// points := [ 5 , 3 , 2 ] ;
10018: LD_ADDR_VAR 0 9
10022: PUSH
10023: LD_INT 5
10025: PUSH
10026: LD_INT 3
10028: PUSH
10029: LD_INT 2
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10037: LD_VAR 0 6
10041: PPUSH
10042: CALL_OW 257
10046: PUSH
10047: LD_INT 17
10049: EQUAL
10050: IFFALSE 10071
// points := [ 100 , 50 , 75 ] ;
10052: LD_ADDR_VAR 0 9
10056: PUSH
10057: LD_INT 100
10059: PUSH
10060: LD_INT 50
10062: PUSH
10063: LD_INT 75
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10071: LD_VAR 0 6
10075: PPUSH
10076: CALL_OW 257
10080: PUSH
10081: LD_INT 15
10083: EQUAL
10084: IFFALSE 10105
// points := [ 10 , 5 , 3 ] ;
10086: LD_ADDR_VAR 0 9
10090: PUSH
10091: LD_INT 10
10093: PUSH
10094: LD_INT 5
10096: PUSH
10097: LD_INT 3
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10105: LD_VAR 0 6
10109: PPUSH
10110: CALL_OW 257
10114: PUSH
10115: LD_INT 14
10117: EQUAL
10118: IFFALSE 10139
// points := [ 10 , 0 , 0 ] ;
10120: LD_ADDR_VAR 0 9
10124: PUSH
10125: LD_INT 10
10127: PUSH
10128: LD_INT 0
10130: PUSH
10131: LD_INT 0
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10139: LD_VAR 0 6
10143: PPUSH
10144: CALL_OW 257
10148: PUSH
10149: LD_INT 11
10151: EQUAL
10152: IFFALSE 10173
// points := [ 30 , 10 , 5 ] ;
10154: LD_ADDR_VAR 0 9
10158: PUSH
10159: LD_INT 30
10161: PUSH
10162: LD_INT 10
10164: PUSH
10165: LD_INT 5
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 5
10180: PPUSH
10181: CALL_OW 321
10185: PUSH
10186: LD_INT 2
10188: EQUAL
10189: IFFALSE 10206
// bpoints := bpoints * 1.8 ;
10191: LD_ADDR_VAR 0 10
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_REAL  1.80000000000000E+0000
10204: MUL
10205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10206: LD_VAR 0 6
10210: PPUSH
10211: CALL_OW 257
10215: PUSH
10216: LD_INT 1
10218: PUSH
10219: LD_INT 2
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: LD_INT 4
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: IN
10234: IFFALSE 10254
10236: PUSH
10237: LD_VAR 0 1
10241: PPUSH
10242: LD_INT 51
10244: PPUSH
10245: CALL_OW 321
10249: PUSH
10250: LD_INT 2
10252: EQUAL
10253: AND
10254: IFFALSE 10271
// bpoints := bpoints * 1.2 ;
10256: LD_ADDR_VAR 0 10
10260: PUSH
10261: LD_VAR 0 10
10265: PUSH
10266: LD_REAL  1.20000000000000E+0000
10269: MUL
10270: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10271: LD_VAR 0 6
10275: PPUSH
10276: CALL_OW 257
10280: PUSH
10281: LD_INT 5
10283: PUSH
10284: LD_INT 7
10286: PUSH
10287: LD_INT 9
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: IN
10295: IFFALSE 10315
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: LD_INT 52
10305: PPUSH
10306: CALL_OW 321
10310: PUSH
10311: LD_INT 2
10313: EQUAL
10314: AND
10315: IFFALSE 10332
// bpoints := bpoints * 1.5 ;
10317: LD_ADDR_VAR 0 10
10321: PUSH
10322: LD_VAR 0 10
10326: PUSH
10327: LD_REAL  1.50000000000000E+0000
10330: MUL
10331: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10332: LD_VAR 0 1
10336: PPUSH
10337: LD_INT 66
10339: PPUSH
10340: CALL_OW 321
10344: PUSH
10345: LD_INT 2
10347: EQUAL
10348: IFFALSE 10365
// bpoints := bpoints * 1.1 ;
10350: LD_ADDR_VAR 0 10
10354: PUSH
10355: LD_VAR 0 10
10359: PUSH
10360: LD_REAL  1.10000000000000E+0000
10363: MUL
10364: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10365: LD_ADDR_VAR 0 10
10369: PUSH
10370: LD_VAR 0 10
10374: PUSH
10375: LD_VAR 0 6
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 259
10387: PUSH
10388: LD_REAL  1.15000000000000E+0000
10391: MUL
10392: MUL
10393: ST_TO_ADDR
// end ; unit_vehicle :
10394: GO 11224
10396: LD_INT 2
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 11212
10404: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10405: LD_VAR 0 6
10409: PPUSH
10410: CALL_OW 264
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: LD_INT 42
10420: PUSH
10421: LD_INT 24
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: LIST
10428: IN
10429: IFFALSE 10450
// points := [ 25 , 5 , 3 ] ;
10431: LD_ADDR_VAR 0 9
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 5
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10450: LD_VAR 0 6
10454: PPUSH
10455: CALL_OW 264
10459: PUSH
10460: LD_INT 4
10462: PUSH
10463: LD_INT 43
10465: PUSH
10466: LD_INT 25
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: IN
10474: IFFALSE 10495
// points := [ 40 , 15 , 5 ] ;
10476: LD_ADDR_VAR 0 9
10480: PUSH
10481: LD_INT 40
10483: PUSH
10484: LD_INT 15
10486: PUSH
10487: LD_INT 5
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10495: LD_VAR 0 6
10499: PPUSH
10500: CALL_OW 264
10504: PUSH
10505: LD_INT 3
10507: PUSH
10508: LD_INT 23
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: IN
10515: IFFALSE 10536
// points := [ 7 , 25 , 8 ] ;
10517: LD_ADDR_VAR 0 9
10521: PUSH
10522: LD_INT 7
10524: PUSH
10525: LD_INT 25
10527: PUSH
10528: LD_INT 8
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10536: LD_VAR 0 6
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_INT 5
10548: PUSH
10549: LD_INT 27
10551: PUSH
10552: LD_INT 44
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: IN
10560: IFFALSE 10581
// points := [ 14 , 50 , 16 ] ;
10562: LD_ADDR_VAR 0 9
10566: PUSH
10567: LD_INT 14
10569: PUSH
10570: LD_INT 50
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10581: LD_VAR 0 6
10585: PPUSH
10586: CALL_OW 264
10590: PUSH
10591: LD_INT 6
10593: PUSH
10594: LD_INT 46
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: IN
10601: IFFALSE 10622
// points := [ 32 , 120 , 70 ] ;
10603: LD_ADDR_VAR 0 9
10607: PUSH
10608: LD_INT 32
10610: PUSH
10611: LD_INT 120
10613: PUSH
10614: LD_INT 70
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10622: LD_VAR 0 6
10626: PPUSH
10627: CALL_OW 264
10631: PUSH
10632: LD_INT 7
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: LD_INT 45
10640: PUSH
10641: LD_INT 92
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: IN
10650: IFFALSE 10671
// points := [ 35 , 20 , 45 ] ;
10652: LD_ADDR_VAR 0 9
10656: PUSH
10657: LD_INT 35
10659: PUSH
10660: LD_INT 20
10662: PUSH
10663: LD_INT 45
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10671: LD_VAR 0 6
10675: PPUSH
10676: CALL_OW 264
10680: PUSH
10681: LD_INT 47
10683: PUSH
10684: EMPTY
10685: LIST
10686: IN
10687: IFFALSE 10708
// points := [ 67 , 45 , 75 ] ;
10689: LD_ADDR_VAR 0 9
10693: PUSH
10694: LD_INT 67
10696: PUSH
10697: LD_INT 45
10699: PUSH
10700: LD_INT 75
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10708: LD_VAR 0 6
10712: PPUSH
10713: CALL_OW 264
10717: PUSH
10718: LD_INT 26
10720: PUSH
10721: EMPTY
10722: LIST
10723: IN
10724: IFFALSE 10745
// points := [ 120 , 30 , 80 ] ;
10726: LD_ADDR_VAR 0 9
10730: PUSH
10731: LD_INT 120
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 80
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10745: LD_VAR 0 6
10749: PPUSH
10750: CALL_OW 264
10754: PUSH
10755: LD_INT 22
10757: PUSH
10758: EMPTY
10759: LIST
10760: IN
10761: IFFALSE 10782
// points := [ 40 , 1 , 1 ] ;
10763: LD_ADDR_VAR 0 9
10767: PUSH
10768: LD_INT 40
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10782: LD_VAR 0 6
10786: PPUSH
10787: CALL_OW 264
10791: PUSH
10792: LD_INT 29
10794: PUSH
10795: EMPTY
10796: LIST
10797: IN
10798: IFFALSE 10819
// points := [ 70 , 200 , 400 ] ;
10800: LD_ADDR_VAR 0 9
10804: PUSH
10805: LD_INT 70
10807: PUSH
10808: LD_INT 200
10810: PUSH
10811: LD_INT 400
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 264
10828: PUSH
10829: LD_INT 14
10831: PUSH
10832: LD_INT 53
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: IN
10839: IFFALSE 10860
// points := [ 40 , 10 , 20 ] ;
10841: LD_ADDR_VAR 0 9
10845: PUSH
10846: LD_INT 40
10848: PUSH
10849: LD_INT 10
10851: PUSH
10852: LD_INT 20
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10860: LD_VAR 0 6
10864: PPUSH
10865: CALL_OW 264
10869: PUSH
10870: LD_INT 9
10872: PUSH
10873: EMPTY
10874: LIST
10875: IN
10876: IFFALSE 10897
// points := [ 5 , 70 , 20 ] ;
10878: LD_ADDR_VAR 0 9
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: LD_INT 70
10888: PUSH
10889: LD_INT 20
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10897: LD_VAR 0 6
10901: PPUSH
10902: CALL_OW 264
10906: PUSH
10907: LD_INT 10
10909: PUSH
10910: EMPTY
10911: LIST
10912: IN
10913: IFFALSE 10934
// points := [ 35 , 110 , 70 ] ;
10915: LD_ADDR_VAR 0 9
10919: PUSH
10920: LD_INT 35
10922: PUSH
10923: LD_INT 110
10925: PUSH
10926: LD_INT 70
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10934: LD_VAR 0 6
10938: PPUSH
10939: CALL_OW 265
10943: PUSH
10944: LD_INT 25
10946: EQUAL
10947: IFFALSE 10968
// points := [ 80 , 65 , 100 ] ;
10949: LD_ADDR_VAR 0 9
10953: PUSH
10954: LD_INT 80
10956: PUSH
10957: LD_INT 65
10959: PUSH
10960: LD_INT 100
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10968: LD_VAR 0 6
10972: PPUSH
10973: CALL_OW 263
10977: PUSH
10978: LD_INT 1
10980: EQUAL
10981: IFFALSE 11016
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10983: LD_ADDR_VAR 0 10
10987: PUSH
10988: LD_VAR 0 10
10992: PUSH
10993: LD_VAR 0 6
10997: PPUSH
10998: CALL_OW 311
11002: PPUSH
11003: LD_INT 3
11005: PPUSH
11006: CALL_OW 259
11010: PUSH
11011: LD_INT 4
11013: MUL
11014: MUL
11015: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11016: LD_VAR 0 6
11020: PPUSH
11021: CALL_OW 263
11025: PUSH
11026: LD_INT 2
11028: EQUAL
11029: IFFALSE 11080
// begin j := IsControledBy ( i ) ;
11031: LD_ADDR_VAR 0 7
11035: PUSH
11036: LD_VAR 0 6
11040: PPUSH
11041: CALL_OW 312
11045: ST_TO_ADDR
// if j then
11046: LD_VAR 0 7
11050: IFFALSE 11080
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11052: LD_ADDR_VAR 0 10
11056: PUSH
11057: LD_VAR 0 10
11061: PUSH
11062: LD_VAR 0 7
11066: PPUSH
11067: LD_INT 3
11069: PPUSH
11070: CALL_OW 259
11074: PUSH
11075: LD_INT 3
11077: MUL
11078: MUL
11079: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11080: LD_VAR 0 6
11084: PPUSH
11085: CALL_OW 264
11089: PUSH
11090: LD_INT 5
11092: PUSH
11093: LD_INT 6
11095: PUSH
11096: LD_INT 46
11098: PUSH
11099: LD_INT 44
11101: PUSH
11102: LD_INT 47
11104: PUSH
11105: LD_INT 45
11107: PUSH
11108: LD_INT 28
11110: PUSH
11111: LD_INT 7
11113: PUSH
11114: LD_INT 27
11116: PUSH
11117: LD_INT 29
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: IN
11132: IFFALSE 11152
11134: PUSH
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_INT 52
11142: PPUSH
11143: CALL_OW 321
11147: PUSH
11148: LD_INT 2
11150: EQUAL
11151: AND
11152: IFFALSE 11169
// bpoints := bpoints * 1.2 ;
11154: LD_ADDR_VAR 0 10
11158: PUSH
11159: LD_VAR 0 10
11163: PUSH
11164: LD_REAL  1.20000000000000E+0000
11167: MUL
11168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11169: LD_VAR 0 6
11173: PPUSH
11174: CALL_OW 264
11178: PUSH
11179: LD_INT 6
11181: PUSH
11182: LD_INT 46
11184: PUSH
11185: LD_INT 47
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: IN
11193: IFFALSE 11210
// bpoints := bpoints * 1.2 ;
11195: LD_ADDR_VAR 0 10
11199: PUSH
11200: LD_VAR 0 10
11204: PUSH
11205: LD_REAL  1.20000000000000E+0000
11208: MUL
11209: ST_TO_ADDR
// end ; unit_building :
11210: GO 11224
11212: LD_INT 3
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11223
11220: POP
// ; end ;
11221: GO 11224
11223: POP
// for j = 1 to 3 do
11224: LD_ADDR_VAR 0 7
11228: PUSH
11229: DOUBLE
11230: LD_INT 1
11232: DEC
11233: ST_TO_ADDR
11234: LD_INT 3
11236: PUSH
11237: FOR_TO
11238: IFFALSE 11291
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_VAR 0 5
11249: PPUSH
11250: LD_VAR 0 7
11254: PPUSH
11255: LD_VAR 0 5
11259: PUSH
11260: LD_VAR 0 7
11264: ARRAY
11265: PUSH
11266: LD_VAR 0 9
11270: PUSH
11271: LD_VAR 0 7
11275: ARRAY
11276: PUSH
11277: LD_VAR 0 10
11281: MUL
11282: PLUS
11283: PPUSH
11284: CALL_OW 1
11288: ST_TO_ADDR
11289: GO 11237
11291: POP
11292: POP
// end ;
11293: GO 9766
11295: POP
11296: POP
// result := Replace ( result , 4 , tmp ) ;
11297: LD_ADDR_VAR 0 5
11301: PUSH
11302: LD_VAR 0 5
11306: PPUSH
11307: LD_INT 4
11309: PPUSH
11310: LD_VAR 0 8
11314: PPUSH
11315: CALL_OW 1
11319: ST_TO_ADDR
// end ;
11320: LD_VAR 0 5
11324: RET
// export function DangerAtRange ( unit , range ) ; begin
11325: LD_INT 0
11327: PPUSH
// if not unit then
11328: LD_VAR 0 1
11332: NOT
11333: IFFALSE 11337
// exit ;
11335: GO 11382
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11337: LD_ADDR_VAR 0 3
11341: PUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 255
11351: PPUSH
11352: LD_VAR 0 1
11356: PPUSH
11357: CALL_OW 250
11361: PPUSH
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 251
11371: PPUSH
11372: LD_VAR 0 2
11376: PPUSH
11377: CALL 9616 0 4
11381: ST_TO_ADDR
// end ;
11382: LD_VAR 0 3
11386: RET
// export function DangerInArea ( side , area ) ; begin
11387: LD_INT 0
11389: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11390: LD_ADDR_VAR 0 3
11394: PUSH
11395: LD_VAR 0 2
11399: PPUSH
11400: LD_INT 81
11402: PUSH
11403: LD_VAR 0 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PPUSH
11412: CALL_OW 70
11416: ST_TO_ADDR
// end ;
11417: LD_VAR 0 3
11421: RET
// export function IsExtension ( b ) ; begin
11422: LD_INT 0
11424: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: LD_VAR 0 1
11434: PUSH
11435: LD_INT 23
11437: PUSH
11438: LD_INT 20
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_INT 17
11446: PUSH
11447: LD_INT 24
11449: PUSH
11450: LD_INT 21
11452: PUSH
11453: LD_INT 19
11455: PUSH
11456: LD_INT 16
11458: PUSH
11459: LD_INT 25
11461: PUSH
11462: LD_INT 18
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: IN
11477: ST_TO_ADDR
// end ;
11478: LD_VAR 0 2
11482: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11483: LD_INT 0
11485: PPUSH
11486: PPUSH
11487: PPUSH
// result := [ ] ;
11488: LD_ADDR_VAR 0 4
11492: PUSH
11493: EMPTY
11494: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11495: LD_ADDR_VAR 0 5
11499: PUSH
11500: LD_VAR 0 2
11504: PPUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 3
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 70
11519: ST_TO_ADDR
// if not tmp then
11520: LD_VAR 0 5
11524: NOT
11525: IFFALSE 11529
// exit ;
11527: GO 11593
// if checkLink then
11529: LD_VAR 0 3
11533: IFFALSE 11583
// begin for i in tmp do
11535: LD_ADDR_VAR 0 6
11539: PUSH
11540: LD_VAR 0 5
11544: PUSH
11545: FOR_IN
11546: IFFALSE 11581
// if GetBase ( i ) <> base then
11548: LD_VAR 0 6
11552: PPUSH
11553: CALL_OW 274
11557: PUSH
11558: LD_VAR 0 1
11562: NONEQUAL
11563: IFFALSE 11579
// ComLinkToBase ( base , i ) ;
11565: LD_VAR 0 1
11569: PPUSH
11570: LD_VAR 0 6
11574: PPUSH
11575: CALL_OW 169
11579: GO 11545
11581: POP
11582: POP
// end ; result := tmp ;
11583: LD_ADDR_VAR 0 4
11587: PUSH
11588: LD_VAR 0 5
11592: ST_TO_ADDR
// end ;
11593: LD_VAR 0 4
11597: RET
// export function ComComplete ( units , b ) ; var i ; begin
11598: LD_INT 0
11600: PPUSH
11601: PPUSH
// if not units then
11602: LD_VAR 0 1
11606: NOT
11607: IFFALSE 11611
// exit ;
11609: GO 11701
// for i in units do
11611: LD_ADDR_VAR 0 4
11615: PUSH
11616: LD_VAR 0 1
11620: PUSH
11621: FOR_IN
11622: IFFALSE 11699
// if BuildingStatus ( b ) = bs_build then
11624: LD_VAR 0 2
11628: PPUSH
11629: CALL_OW 461
11633: PUSH
11634: LD_INT 1
11636: EQUAL
11637: IFFALSE 11697
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11639: LD_VAR 0 4
11643: PPUSH
11644: LD_STRING h
11646: PUSH
11647: LD_VAR 0 2
11651: PPUSH
11652: CALL_OW 250
11656: PUSH
11657: LD_VAR 0 2
11661: PPUSH
11662: CALL_OW 251
11666: PUSH
11667: LD_VAR 0 2
11671: PUSH
11672: LD_INT 0
11674: PUSH
11675: LD_INT 0
11677: PUSH
11678: LD_INT 0
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: PPUSH
11693: CALL_OW 446
11697: GO 11621
11699: POP
11700: POP
// end ;
11701: LD_VAR 0 3
11705: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11706: LD_INT 0
11708: PPUSH
11709: PPUSH
11710: PPUSH
11711: PPUSH
11712: PPUSH
11713: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11714: LD_VAR 0 1
11718: NOT
11719: IFTRUE 11736
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 263
11731: PUSH
11732: LD_INT 2
11734: NONEQUAL
11735: OR
11736: IFFALSE 11740
// exit ;
11738: GO 12056
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11740: LD_ADDR_VAR 0 6
11744: PUSH
11745: LD_INT 22
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 30
11767: PUSH
11768: LD_INT 36
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 34
11777: PUSH
11778: LD_INT 31
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PPUSH
11794: CALL_OW 69
11798: ST_TO_ADDR
// if not tmp then
11799: LD_VAR 0 6
11803: NOT
11804: IFFALSE 11808
// exit ;
11806: GO 12056
// result := [ ] ;
11808: LD_ADDR_VAR 0 2
11812: PUSH
11813: EMPTY
11814: ST_TO_ADDR
// for i in tmp do
11815: LD_ADDR_VAR 0 3
11819: PUSH
11820: LD_VAR 0 6
11824: PUSH
11825: FOR_IN
11826: IFFALSE 11897
// begin t := UnitsInside ( i ) ;
11828: LD_ADDR_VAR 0 4
11832: PUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: CALL_OW 313
11842: ST_TO_ADDR
// if t then
11843: LD_VAR 0 4
11847: IFFALSE 11895
// for j in t do
11849: LD_ADDR_VAR 0 7
11853: PUSH
11854: LD_VAR 0 4
11858: PUSH
11859: FOR_IN
11860: IFFALSE 11893
// result := Replace ( result , result + 1 , j ) ;
11862: LD_ADDR_VAR 0 2
11866: PUSH
11867: LD_VAR 0 2
11871: PPUSH
11872: LD_VAR 0 2
11876: PUSH
11877: LD_INT 1
11879: PLUS
11880: PPUSH
11881: LD_VAR 0 7
11885: PPUSH
11886: CALL_OW 1
11890: ST_TO_ADDR
11891: GO 11859
11893: POP
11894: POP
// end ;
11895: GO 11825
11897: POP
11898: POP
// if not result then
11899: LD_VAR 0 2
11903: NOT
11904: IFFALSE 11908
// exit ;
11906: GO 12056
// mech := result [ 1 ] ;
11908: LD_ADDR_VAR 0 5
11912: PUSH
11913: LD_VAR 0 2
11917: PUSH
11918: LD_INT 1
11920: ARRAY
11921: ST_TO_ADDR
// if result > 1 then
11922: LD_VAR 0 2
11926: PUSH
11927: LD_INT 1
11929: GREATER
11930: IFFALSE 12042
// begin for i = 2 to result do
11932: LD_ADDR_VAR 0 3
11936: PUSH
11937: DOUBLE
11938: LD_INT 2
11940: DEC
11941: ST_TO_ADDR
11942: LD_VAR 0 2
11946: PUSH
11947: FOR_TO
11948: IFFALSE 12040
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11950: LD_ADDR_VAR 0 4
11954: PUSH
11955: LD_VAR 0 2
11959: PUSH
11960: LD_VAR 0 3
11964: ARRAY
11965: PPUSH
11966: LD_INT 3
11968: PPUSH
11969: CALL_OW 259
11973: PUSH
11974: LD_VAR 0 2
11978: PUSH
11979: LD_VAR 0 3
11983: ARRAY
11984: PPUSH
11985: CALL_OW 432
11989: MINUS
11990: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11991: LD_VAR 0 4
11995: PUSH
11996: LD_VAR 0 5
12000: PPUSH
12001: LD_INT 3
12003: PPUSH
12004: CALL_OW 259
12008: PUSH
12009: LD_VAR 0 5
12013: PPUSH
12014: CALL_OW 432
12018: MINUS
12019: GREATEREQUAL
12020: IFFALSE 12038
// mech := result [ i ] ;
12022: LD_ADDR_VAR 0 5
12026: PUSH
12027: LD_VAR 0 2
12031: PUSH
12032: LD_VAR 0 3
12036: ARRAY
12037: ST_TO_ADDR
// end ;
12038: GO 11947
12040: POP
12041: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: LD_VAR 0 5
12051: PPUSH
12052: CALL_OW 135
// end ;
12056: LD_VAR 0 2
12060: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12061: LD_INT 0
12063: PPUSH
12064: PPUSH
12065: PPUSH
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
// result := [ ] ;
12076: LD_ADDR_VAR 0 7
12080: PUSH
12081: EMPTY
12082: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12083: LD_VAR 0 1
12087: PPUSH
12088: CALL_OW 266
12092: PUSH
12093: LD_INT 0
12095: PUSH
12096: LD_INT 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: IN
12103: NOT
12104: IFFALSE 12108
// exit ;
12106: GO 13748
// if name then
12108: LD_VAR 0 3
12112: IFFALSE 12128
// SetBName ( base_dep , name ) ;
12114: LD_VAR 0 1
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: CALL_OW 500
// base := GetBase ( base_dep ) ;
12128: LD_ADDR_VAR 0 15
12132: PUSH
12133: LD_VAR 0 1
12137: PPUSH
12138: CALL_OW 274
12142: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12143: LD_ADDR_VAR 0 16
12147: PUSH
12148: LD_VAR 0 1
12152: PPUSH
12153: CALL_OW 255
12157: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12158: LD_ADDR_VAR 0 17
12162: PUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL_OW 248
12172: ST_TO_ADDR
// if sources then
12173: LD_VAR 0 5
12177: IFFALSE 12224
// for i = 1 to 3 do
12179: LD_ADDR_VAR 0 8
12183: PUSH
12184: DOUBLE
12185: LD_INT 1
12187: DEC
12188: ST_TO_ADDR
12189: LD_INT 3
12191: PUSH
12192: FOR_TO
12193: IFFALSE 12222
// AddResourceType ( base , i , sources [ i ] ) ;
12195: LD_VAR 0 15
12199: PPUSH
12200: LD_VAR 0 8
12204: PPUSH
12205: LD_VAR 0 5
12209: PUSH
12210: LD_VAR 0 8
12214: ARRAY
12215: PPUSH
12216: CALL_OW 276
12220: GO 12192
12222: POP
12223: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12224: LD_ADDR_VAR 0 18
12228: PUSH
12229: LD_VAR 0 15
12233: PPUSH
12234: LD_VAR 0 2
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL 11483 0 3
12246: ST_TO_ADDR
// InitHc ;
12247: CALL_OW 19
// InitUc ;
12251: CALL_OW 18
// uc_side := side ;
12255: LD_ADDR_OWVAR 20
12259: PUSH
12260: LD_VAR 0 16
12264: ST_TO_ADDR
// uc_nation := nation ;
12265: LD_ADDR_OWVAR 21
12269: PUSH
12270: LD_VAR 0 17
12274: ST_TO_ADDR
// if buildings then
12275: LD_VAR 0 18
12279: IFFALSE 13607
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12281: LD_ADDR_VAR 0 19
12285: PUSH
12286: LD_VAR 0 18
12290: PPUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: LD_INT 29
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 30
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: PPUSH
12319: CALL_OW 72
12323: ST_TO_ADDR
// if tmp then
12324: LD_VAR 0 19
12328: IFFALSE 12376
// for i in tmp do
12330: LD_ADDR_VAR 0 8
12334: PUSH
12335: LD_VAR 0 19
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12374
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12343: LD_VAR 0 8
12347: PPUSH
12348: CALL_OW 250
12352: PPUSH
12353: LD_VAR 0 8
12357: PPUSH
12358: CALL_OW 251
12362: PPUSH
12363: LD_VAR 0 16
12367: PPUSH
12368: CALL_OW 441
12372: GO 12340
12374: POP
12375: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12376: LD_VAR 0 18
12380: PPUSH
12381: LD_INT 2
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: LD_INT 32
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 30
12396: PUSH
12397: LD_INT 33
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 72
12413: IFFALSE 12501
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12415: LD_ADDR_VAR 0 8
12419: PUSH
12420: LD_VAR 0 18
12424: PPUSH
12425: LD_INT 2
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 32
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 30
12440: PUSH
12441: LD_INT 33
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: PUSH
12458: FOR_IN
12459: IFFALSE 12499
// begin if not GetBWeapon ( i ) then
12461: LD_VAR 0 8
12465: PPUSH
12466: CALL_OW 269
12470: NOT
12471: IFFALSE 12497
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12473: LD_VAR 0 8
12477: PPUSH
12478: LD_VAR 0 8
12482: PPUSH
12483: LD_VAR 0 2
12487: PPUSH
12488: CALL 13753 0 2
12492: PPUSH
12493: CALL_OW 431
// end ;
12497: GO 12458
12499: POP
12500: POP
// end ; for i = 1 to personel do
12501: LD_ADDR_VAR 0 8
12505: PUSH
12506: DOUBLE
12507: LD_INT 1
12509: DEC
12510: ST_TO_ADDR
12511: LD_VAR 0 6
12515: PUSH
12516: FOR_TO
12517: IFFALSE 13587
// begin if i > 4 then
12519: LD_VAR 0 8
12523: PUSH
12524: LD_INT 4
12526: GREATER
12527: IFFALSE 12531
// break ;
12529: GO 13587
// case i of 1 :
12531: LD_VAR 0 8
12535: PUSH
12536: LD_INT 1
12538: DOUBLE
12539: EQUAL
12540: IFTRUE 12544
12542: GO 12624
12544: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12545: LD_ADDR_VAR 0 12
12549: PUSH
12550: LD_VAR 0 18
12554: PPUSH
12555: LD_INT 22
12557: PUSH
12558: LD_VAR 0 16
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 58
12569: PUSH
12570: EMPTY
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 32
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 4
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 5
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 72
12621: ST_TO_ADDR
12622: GO 12846
12624: LD_INT 2
12626: DOUBLE
12627: EQUAL
12628: IFTRUE 12632
12630: GO 12694
12632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12633: LD_ADDR_VAR 0 12
12637: PUSH
12638: LD_VAR 0 18
12642: PPUSH
12643: LD_INT 22
12645: PUSH
12646: LD_VAR 0 16
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: LD_INT 30
12660: PUSH
12661: LD_INT 0
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 72
12691: ST_TO_ADDR
12692: GO 12846
12694: LD_INT 3
12696: DOUBLE
12697: EQUAL
12698: IFTRUE 12702
12700: GO 12764
12702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12703: LD_ADDR_VAR 0 12
12707: PUSH
12708: LD_VAR 0 18
12712: PPUSH
12713: LD_INT 22
12715: PUSH
12716: LD_VAR 0 16
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: LD_INT 30
12730: PUSH
12731: LD_INT 2
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 30
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 72
12761: ST_TO_ADDR
12762: GO 12846
12764: LD_INT 4
12766: DOUBLE
12767: EQUAL
12768: IFTRUE 12772
12770: GO 12845
12772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12773: LD_ADDR_VAR 0 12
12777: PUSH
12778: LD_VAR 0 18
12782: PPUSH
12783: LD_INT 22
12785: PUSH
12786: LD_VAR 0 16
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 6
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 30
12810: PUSH
12811: LD_INT 7
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 30
12820: PUSH
12821: LD_INT 8
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: ST_TO_ADDR
12843: GO 12846
12845: POP
// if i = 1 then
12846: LD_VAR 0 8
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12965
// begin tmp := [ ] ;
12856: LD_ADDR_VAR 0 19
12860: PUSH
12861: EMPTY
12862: ST_TO_ADDR
// for j in f do
12863: LD_ADDR_VAR 0 9
12867: PUSH
12868: LD_VAR 0 12
12872: PUSH
12873: FOR_IN
12874: IFFALSE 12947
// if GetBType ( j ) = b_bunker then
12876: LD_VAR 0 9
12880: PPUSH
12881: CALL_OW 266
12885: PUSH
12886: LD_INT 32
12888: EQUAL
12889: IFFALSE 12916
// tmp := Insert ( tmp , 1 , j ) else
12891: LD_ADDR_VAR 0 19
12895: PUSH
12896: LD_VAR 0 19
12900: PPUSH
12901: LD_INT 1
12903: PPUSH
12904: LD_VAR 0 9
12908: PPUSH
12909: CALL_OW 2
12913: ST_TO_ADDR
12914: GO 12945
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12916: LD_ADDR_VAR 0 19
12920: PUSH
12921: LD_VAR 0 19
12925: PPUSH
12926: LD_VAR 0 19
12930: PUSH
12931: LD_INT 1
12933: PLUS
12934: PPUSH
12935: LD_VAR 0 9
12939: PPUSH
12940: CALL_OW 2
12944: ST_TO_ADDR
12945: GO 12873
12947: POP
12948: POP
// if tmp then
12949: LD_VAR 0 19
12953: IFFALSE 12965
// f := tmp ;
12955: LD_ADDR_VAR 0 12
12959: PUSH
12960: LD_VAR 0 19
12964: ST_TO_ADDR
// end ; x := personel [ i ] ;
12965: LD_ADDR_VAR 0 13
12969: PUSH
12970: LD_VAR 0 6
12974: PUSH
12975: LD_VAR 0 8
12979: ARRAY
12980: ST_TO_ADDR
// if x = - 1 then
12981: LD_VAR 0 13
12985: PUSH
12986: LD_INT 1
12988: NEG
12989: EQUAL
12990: IFFALSE 13201
// begin for j in f do
12992: LD_ADDR_VAR 0 9
12996: PUSH
12997: LD_VAR 0 12
13001: PUSH
13002: FOR_IN
13003: IFFALSE 13197
// repeat InitHc ;
13005: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13009: LD_VAR 0 9
13013: PPUSH
13014: CALL_OW 266
13018: PUSH
13019: LD_INT 5
13021: EQUAL
13022: IFFALSE 13092
// begin if UnitsInside ( j ) < 3 then
13024: LD_VAR 0 9
13028: PPUSH
13029: CALL_OW 313
13033: PUSH
13034: LD_INT 3
13036: LESS
13037: IFFALSE 13073
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13039: LD_INT 0
13041: PPUSH
13042: LD_INT 5
13044: PUSH
13045: LD_INT 8
13047: PUSH
13048: LD_INT 9
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PUSH
13056: LD_VAR 0 17
13060: ARRAY
13061: PPUSH
13062: LD_VAR 0 4
13066: PPUSH
13067: CALL_OW 380
13071: GO 13090
// PrepareHuman ( false , i , skill ) ;
13073: LD_INT 0
13075: PPUSH
13076: LD_VAR 0 8
13080: PPUSH
13081: LD_VAR 0 4
13085: PPUSH
13086: CALL_OW 380
// end else
13090: GO 13109
// PrepareHuman ( false , i , skill ) ;
13092: LD_INT 0
13094: PPUSH
13095: LD_VAR 0 8
13099: PPUSH
13100: LD_VAR 0 4
13104: PPUSH
13105: CALL_OW 380
// un := CreateHuman ;
13109: LD_ADDR_VAR 0 14
13113: PUSH
13114: CALL_OW 44
13118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13119: LD_ADDR_VAR 0 7
13123: PUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_VAR 0 14
13136: PPUSH
13137: CALL_OW 2
13141: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13142: LD_VAR 0 14
13146: PPUSH
13147: LD_VAR 0 9
13151: PPUSH
13152: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13156: LD_VAR 0 9
13160: PPUSH
13161: CALL_OW 313
13165: PUSH
13166: LD_INT 6
13168: EQUAL
13169: IFTRUE 13193
13171: PUSH
13172: LD_VAR 0 9
13176: PPUSH
13177: CALL_OW 266
13181: PUSH
13182: LD_INT 32
13184: PUSH
13185: LD_INT 31
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: IN
13192: OR
13193: IFFALSE 13005
13195: GO 13002
13197: POP
13198: POP
// end else
13199: GO 13585
// for j = 1 to x do
13201: LD_ADDR_VAR 0 9
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_VAR 0 13
13215: PUSH
13216: FOR_TO
13217: IFFALSE 13583
// begin InitHc ;
13219: CALL_OW 19
// if not f then
13223: LD_VAR 0 12
13227: NOT
13228: IFFALSE 13317
// begin PrepareHuman ( false , i , skill ) ;
13230: LD_INT 0
13232: PPUSH
13233: LD_VAR 0 8
13237: PPUSH
13238: LD_VAR 0 4
13242: PPUSH
13243: CALL_OW 380
// un := CreateHuman ;
13247: LD_ADDR_VAR 0 14
13251: PUSH
13252: CALL_OW 44
13256: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13257: LD_ADDR_VAR 0 7
13261: PUSH
13262: LD_VAR 0 7
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: LD_VAR 0 14
13274: PPUSH
13275: CALL_OW 2
13279: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13280: LD_VAR 0 14
13284: PPUSH
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 250
13294: PPUSH
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL_OW 251
13304: PPUSH
13305: LD_INT 10
13307: PPUSH
13308: LD_INT 0
13310: PPUSH
13311: CALL_OW 50
// continue ;
13315: GO 13216
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13317: LD_VAR 0 12
13321: PUSH
13322: LD_INT 1
13324: ARRAY
13325: PPUSH
13326: CALL_OW 313
13330: IFFALSE 13358
13332: PUSH
13333: LD_VAR 0 12
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 266
13346: PUSH
13347: LD_INT 32
13349: PUSH
13350: LD_INT 31
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: IN
13357: AND
13358: IFTRUE 13379
13360: PUSH
13361: LD_VAR 0 12
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PPUSH
13370: CALL_OW 313
13374: PUSH
13375: LD_INT 6
13377: EQUAL
13378: OR
13379: IFFALSE 13399
// f := Delete ( f , 1 ) ;
13381: LD_ADDR_VAR 0 12
13385: PUSH
13386: LD_VAR 0 12
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 3
13398: ST_TO_ADDR
// if not f then
13399: LD_VAR 0 12
13403: NOT
13404: IFFALSE 13422
// begin x := x + 2 ;
13406: LD_ADDR_VAR 0 13
13410: PUSH
13411: LD_VAR 0 13
13415: PUSH
13416: LD_INT 2
13418: PLUS
13419: ST_TO_ADDR
// continue ;
13420: GO 13216
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13422: LD_VAR 0 12
13426: PUSH
13427: LD_INT 1
13429: ARRAY
13430: PPUSH
13431: CALL_OW 266
13435: PUSH
13436: LD_INT 5
13438: EQUAL
13439: IFFALSE 13513
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13441: LD_VAR 0 12
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: CALL_OW 313
13454: PUSH
13455: LD_INT 3
13457: LESS
13458: IFFALSE 13494
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13460: LD_INT 0
13462: PPUSH
13463: LD_INT 5
13465: PUSH
13466: LD_INT 8
13468: PUSH
13469: LD_INT 9
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_VAR 0 17
13481: ARRAY
13482: PPUSH
13483: LD_VAR 0 4
13487: PPUSH
13488: CALL_OW 380
13492: GO 13511
// PrepareHuman ( false , i , skill ) ;
13494: LD_INT 0
13496: PPUSH
13497: LD_VAR 0 8
13501: PPUSH
13502: LD_VAR 0 4
13506: PPUSH
13507: CALL_OW 380
// end else
13511: GO 13530
// PrepareHuman ( false , i , skill ) ;
13513: LD_INT 0
13515: PPUSH
13516: LD_VAR 0 8
13520: PPUSH
13521: LD_VAR 0 4
13525: PPUSH
13526: CALL_OW 380
// un := CreateHuman ;
13530: LD_ADDR_VAR 0 14
13534: PUSH
13535: CALL_OW 44
13539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13540: LD_ADDR_VAR 0 7
13544: PUSH
13545: LD_VAR 0 7
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: LD_VAR 0 14
13557: PPUSH
13558: CALL_OW 2
13562: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13563: LD_VAR 0 14
13567: PPUSH
13568: LD_VAR 0 12
13572: PUSH
13573: LD_INT 1
13575: ARRAY
13576: PPUSH
13577: CALL_OW 52
// end ;
13581: GO 13216
13583: POP
13584: POP
// end ;
13585: GO 12516
13587: POP
13588: POP
// result := result ^ buildings ;
13589: LD_ADDR_VAR 0 7
13593: PUSH
13594: LD_VAR 0 7
13598: PUSH
13599: LD_VAR 0 18
13603: ADD
13604: ST_TO_ADDR
// end else
13605: GO 13748
// begin for i = 1 to personel do
13607: LD_ADDR_VAR 0 8
13611: PUSH
13612: DOUBLE
13613: LD_INT 1
13615: DEC
13616: ST_TO_ADDR
13617: LD_VAR 0 6
13621: PUSH
13622: FOR_TO
13623: IFFALSE 13746
// begin if i > 4 then
13625: LD_VAR 0 8
13629: PUSH
13630: LD_INT 4
13632: GREATER
13633: IFFALSE 13637
// break ;
13635: GO 13746
// x := personel [ i ] ;
13637: LD_ADDR_VAR 0 13
13641: PUSH
13642: LD_VAR 0 6
13646: PUSH
13647: LD_VAR 0 8
13651: ARRAY
13652: ST_TO_ADDR
// if x = - 1 then
13653: LD_VAR 0 13
13657: PUSH
13658: LD_INT 1
13660: NEG
13661: EQUAL
13662: IFFALSE 13666
// continue ;
13664: GO 13622
// PrepareHuman ( false , i , skill ) ;
13666: LD_INT 0
13668: PPUSH
13669: LD_VAR 0 8
13673: PPUSH
13674: LD_VAR 0 4
13678: PPUSH
13679: CALL_OW 380
// un := CreateHuman ;
13683: LD_ADDR_VAR 0 14
13687: PUSH
13688: CALL_OW 44
13692: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13693: LD_VAR 0 14
13697: PPUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 250
13707: PPUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 251
13717: PPUSH
13718: LD_INT 10
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 50
// result := result ^ un ;
13728: LD_ADDR_VAR 0 7
13732: PUSH
13733: LD_VAR 0 7
13737: PUSH
13738: LD_VAR 0 14
13742: ADD
13743: ST_TO_ADDR
// end ;
13744: GO 13622
13746: POP
13747: POP
// end ; end ;
13748: LD_VAR 0 7
13752: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13753: LD_INT 0
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
13767: PPUSH
13768: PPUSH
13769: PPUSH
13770: PPUSH
// result := false ;
13771: LD_ADDR_VAR 0 3
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13779: LD_VAR 0 1
13783: NOT
13784: IFTRUE 13809
13786: PUSH
13787: LD_VAR 0 1
13791: PPUSH
13792: CALL_OW 266
13796: PUSH
13797: LD_INT 32
13799: PUSH
13800: LD_INT 33
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: IN
13807: NOT
13808: OR
13809: IFFALSE 13813
// exit ;
13811: GO 14948
// nat := GetNation ( tower ) ;
13813: LD_ADDR_VAR 0 12
13817: PUSH
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 248
13827: ST_TO_ADDR
// side := GetSide ( tower ) ;
13828: LD_ADDR_VAR 0 16
13832: PUSH
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: ST_TO_ADDR
// x := GetX ( tower ) ;
13843: LD_ADDR_VAR 0 10
13847: PUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 250
13857: ST_TO_ADDR
// y := GetY ( tower ) ;
13858: LD_ADDR_VAR 0 11
13862: PUSH
13863: LD_VAR 0 1
13867: PPUSH
13868: CALL_OW 251
13872: ST_TO_ADDR
// if not x or not y then
13873: LD_VAR 0 10
13877: NOT
13878: IFTRUE 13887
13880: PUSH
13881: LD_VAR 0 11
13885: NOT
13886: OR
13887: IFFALSE 13891
// exit ;
13889: GO 14948
// weapon := 0 ;
13891: LD_ADDR_VAR 0 18
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// fac_list := [ ] ;
13899: LD_ADDR_VAR 0 17
13903: PUSH
13904: EMPTY
13905: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 274
13920: PPUSH
13921: LD_VAR 0 2
13925: PPUSH
13926: LD_INT 0
13928: PPUSH
13929: CALL 11483 0 3
13933: PPUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 72
13948: ST_TO_ADDR
// if not factories then
13949: LD_VAR 0 6
13953: NOT
13954: IFFALSE 13958
// exit ;
13956: GO 14948
// for i in factories do
13958: LD_ADDR_VAR 0 8
13962: PUSH
13963: LD_VAR 0 6
13967: PUSH
13968: FOR_IN
13969: IFFALSE 13994
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13971: LD_ADDR_VAR 0 17
13975: PUSH
13976: LD_VAR 0 17
13980: PUSH
13981: LD_VAR 0 8
13985: PPUSH
13986: CALL_OW 478
13990: UNION
13991: ST_TO_ADDR
13992: GO 13968
13994: POP
13995: POP
// if not fac_list then
13996: LD_VAR 0 17
14000: NOT
14001: IFFALSE 14005
// exit ;
14003: GO 14948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14005: LD_ADDR_VAR 0 5
14009: PUSH
14010: LD_INT 4
14012: PUSH
14013: LD_INT 5
14015: PUSH
14016: LD_INT 9
14018: PUSH
14019: LD_INT 10
14021: PUSH
14022: LD_INT 6
14024: PUSH
14025: LD_INT 7
14027: PUSH
14028: LD_INT 11
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 27
14042: PUSH
14043: LD_INT 28
14045: PUSH
14046: LD_INT 26
14048: PUSH
14049: LD_INT 30
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 43
14060: PUSH
14061: LD_INT 44
14063: PUSH
14064: LD_INT 46
14066: PUSH
14067: LD_INT 45
14069: PUSH
14070: LD_INT 47
14072: PUSH
14073: LD_INT 49
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_VAR 0 12
14093: ARRAY
14094: ST_TO_ADDR
// list := list isect fac_list ;
14095: LD_ADDR_VAR 0 5
14099: PUSH
14100: LD_VAR 0 5
14104: PUSH
14105: LD_VAR 0 17
14109: ISECT
14110: ST_TO_ADDR
// if not list then
14111: LD_VAR 0 5
14115: NOT
14116: IFFALSE 14120
// exit ;
14118: GO 14948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14120: LD_VAR 0 12
14124: PUSH
14125: LD_INT 3
14127: EQUAL
14128: IFFALSE 14140
14130: PUSH
14131: LD_INT 49
14133: PUSH
14134: LD_VAR 0 5
14138: IN
14139: AND
14140: IFFALSE 14160
14142: PUSH
14143: LD_INT 31
14145: PPUSH
14146: LD_VAR 0 16
14150: PPUSH
14151: CALL_OW 321
14155: PUSH
14156: LD_INT 2
14158: EQUAL
14159: AND
14160: IFFALSE 14220
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14162: LD_INT 22
14164: PUSH
14165: LD_VAR 0 16
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 35
14176: PUSH
14177: LD_INT 49
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 91
14186: PUSH
14187: LD_VAR 0 1
14191: PUSH
14192: LD_INT 10
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 69
14209: NOT
14210: IFFALSE 14220
// weapon := ru_time_lapser ;
14212: LD_ADDR_VAR 0 18
14216: PUSH
14217: LD_INT 49
14219: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14220: LD_VAR 0 12
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: IN
14235: IFFALSE 14259
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_VAR 0 5
14245: IN
14246: IFTRUE 14258
14248: PUSH
14249: LD_INT 30
14251: PUSH
14252: LD_VAR 0 5
14256: IN
14257: OR
14258: AND
14259: IFFALSE 14279
14261: PUSH
14262: LD_INT 6
14264: PPUSH
14265: LD_VAR 0 16
14269: PPUSH
14270: CALL_OW 321
14274: PUSH
14275: LD_INT 2
14277: EQUAL
14278: AND
14279: IFFALSE 14446
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14281: LD_INT 22
14283: PUSH
14284: LD_VAR 0 16
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 2
14295: PUSH
14296: LD_INT 35
14298: PUSH
14299: LD_INT 11
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 35
14308: PUSH
14309: LD_INT 30
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 91
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: LD_INT 18
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: NOT
14347: IFFALSE 14423
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_VAR 0 16
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 30
14367: PUSH
14368: LD_INT 32
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 30
14377: PUSH
14378: LD_INT 33
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 91
14392: PUSH
14393: LD_VAR 0 1
14397: PUSH
14398: LD_INT 12
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: PUSH
14419: LD_INT 2
14421: GREATER
14422: AND
14423: IFFALSE 14446
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14425: LD_ADDR_VAR 0 18
14429: PUSH
14430: LD_INT 11
14432: PUSH
14433: LD_INT 30
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_VAR 0 12
14444: ARRAY
14445: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14446: LD_VAR 0 18
14450: NOT
14451: IFFALSE 14471
14453: PUSH
14454: LD_INT 40
14456: PPUSH
14457: LD_VAR 0 16
14461: PPUSH
14462: CALL_OW 321
14466: PUSH
14467: LD_INT 2
14469: EQUAL
14470: AND
14471: IFFALSE 14507
14473: PUSH
14474: LD_INT 7
14476: PUSH
14477: LD_VAR 0 5
14481: IN
14482: IFTRUE 14494
14484: PUSH
14485: LD_INT 28
14487: PUSH
14488: LD_VAR 0 5
14492: IN
14493: OR
14494: IFTRUE 14506
14496: PUSH
14497: LD_INT 45
14499: PUSH
14500: LD_VAR 0 5
14504: IN
14505: OR
14506: AND
14507: IFFALSE 14761
// begin hex := GetHexInfo ( x , y ) ;
14509: LD_ADDR_VAR 0 4
14513: PUSH
14514: LD_VAR 0 10
14518: PPUSH
14519: LD_VAR 0 11
14523: PPUSH
14524: CALL_OW 546
14528: ST_TO_ADDR
// if hex [ 1 ] then
14529: LD_VAR 0 4
14533: PUSH
14534: LD_INT 1
14536: ARRAY
14537: IFFALSE 14541
// exit ;
14539: GO 14948
// height := hex [ 2 ] ;
14541: LD_ADDR_VAR 0 15
14545: PUSH
14546: LD_VAR 0 4
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14555: LD_ADDR_VAR 0 14
14559: PUSH
14560: LD_INT 0
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: LD_INT 3
14568: PUSH
14569: LD_INT 5
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: ST_TO_ADDR
// for i in tmp do
14578: LD_ADDR_VAR 0 8
14582: PUSH
14583: LD_VAR 0 14
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14759
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14591: LD_ADDR_VAR 0 9
14595: PUSH
14596: LD_VAR 0 10
14600: PPUSH
14601: LD_VAR 0 8
14605: PPUSH
14606: LD_INT 5
14608: PPUSH
14609: CALL_OW 272
14613: PUSH
14614: LD_VAR 0 11
14618: PPUSH
14619: LD_VAR 0 8
14623: PPUSH
14624: LD_INT 5
14626: PPUSH
14627: CALL_OW 273
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14636: LD_VAR 0 9
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PPUSH
14645: LD_VAR 0 9
14649: PUSH
14650: LD_INT 2
14652: ARRAY
14653: PPUSH
14654: CALL_OW 488
14658: IFFALSE 14757
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14660: LD_ADDR_VAR 0 4
14664: PUSH
14665: LD_VAR 0 9
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PPUSH
14674: LD_VAR 0 9
14678: PUSH
14679: LD_INT 2
14681: ARRAY
14682: PPUSH
14683: CALL_OW 546
14687: ST_TO_ADDR
// if hex [ 1 ] then
14688: LD_VAR 0 4
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: IFFALSE 14700
// continue ;
14698: GO 14588
// h := hex [ 2 ] ;
14700: LD_ADDR_VAR 0 13
14704: PUSH
14705: LD_VAR 0 4
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: ST_TO_ADDR
// if h + 7 < height then
14714: LD_VAR 0 13
14718: PUSH
14719: LD_INT 7
14721: PLUS
14722: PUSH
14723: LD_VAR 0 15
14727: LESS
14728: IFFALSE 14757
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14730: LD_ADDR_VAR 0 18
14734: PUSH
14735: LD_INT 7
14737: PUSH
14738: LD_INT 28
14740: PUSH
14741: LD_INT 45
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: PUSH
14749: LD_VAR 0 12
14753: ARRAY
14754: ST_TO_ADDR
// break ;
14755: GO 14759
// end ; end ; end ;
14757: GO 14588
14759: POP
14760: POP
// end ; if not weapon then
14761: LD_VAR 0 18
14765: NOT
14766: IFFALSE 14826
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14768: LD_ADDR_VAR 0 5
14772: PUSH
14773: LD_VAR 0 5
14777: PUSH
14778: LD_INT 11
14780: PUSH
14781: LD_INT 30
14783: PUSH
14784: LD_INT 49
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: DIFF
14792: ST_TO_ADDR
// if not list then
14793: LD_VAR 0 5
14797: NOT
14798: IFFALSE 14802
// exit ;
14800: GO 14948
// weapon := list [ rand ( 1 , list ) ] ;
14802: LD_ADDR_VAR 0 18
14806: PUSH
14807: LD_VAR 0 5
14811: PUSH
14812: LD_INT 1
14814: PPUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: CALL_OW 12
14824: ARRAY
14825: ST_TO_ADDR
// end ; if weapon then
14826: LD_VAR 0 18
14830: IFFALSE 14948
// begin tmp := CostOfWeapon ( weapon ) ;
14832: LD_ADDR_VAR 0 14
14836: PUSH
14837: LD_VAR 0 18
14841: PPUSH
14842: CALL_OW 451
14846: ST_TO_ADDR
// j := GetBase ( tower ) ;
14847: LD_ADDR_VAR 0 9
14851: PUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 274
14861: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14862: LD_VAR 0 9
14866: PPUSH
14867: LD_INT 1
14869: PPUSH
14870: CALL_OW 275
14874: PUSH
14875: LD_VAR 0 14
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: GREATEREQUAL
14884: IFFALSE 14910
14886: PUSH
14887: LD_VAR 0 9
14891: PPUSH
14892: LD_INT 2
14894: PPUSH
14895: CALL_OW 275
14899: PUSH
14900: LD_VAR 0 14
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: GREATEREQUAL
14909: AND
14910: IFFALSE 14936
14912: PUSH
14913: LD_VAR 0 9
14917: PPUSH
14918: LD_INT 3
14920: PPUSH
14921: CALL_OW 275
14925: PUSH
14926: LD_VAR 0 14
14930: PUSH
14931: LD_INT 3
14933: ARRAY
14934: GREATEREQUAL
14935: AND
14936: IFFALSE 14948
// result := weapon ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: LD_VAR 0 18
14947: ST_TO_ADDR
// end ; end ;
14948: LD_VAR 0 3
14952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
// result := true ;
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: LD_INT 1
14964: ST_TO_ADDR
// if array1 = array2 then
14965: LD_VAR 0 1
14969: PUSH
14970: LD_VAR 0 2
14974: EQUAL
14975: IFFALSE 15035
// begin for i = 1 to array1 do
14977: LD_ADDR_VAR 0 4
14981: PUSH
14982: DOUBLE
14983: LD_INT 1
14985: DEC
14986: ST_TO_ADDR
14987: LD_VAR 0 1
14991: PUSH
14992: FOR_TO
14993: IFFALSE 15031
// if array1 [ i ] <> array2 [ i ] then
14995: LD_VAR 0 1
14999: PUSH
15000: LD_VAR 0 4
15004: ARRAY
15005: PUSH
15006: LD_VAR 0 2
15010: PUSH
15011: LD_VAR 0 4
15015: ARRAY
15016: NONEQUAL
15017: IFFALSE 15029
// begin result := false ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: LD_INT 0
15026: ST_TO_ADDR
// break ;
15027: GO 15031
// end ;
15029: GO 14992
15031: POP
15032: POP
// end else
15033: GO 15043
// result := false ;
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_INT 0
15042: ST_TO_ADDR
// end ;
15043: LD_VAR 0 3
15047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15048: LD_INT 0
15050: PPUSH
15051: PPUSH
// if not array1 or not array2 then
15052: LD_VAR 0 1
15056: NOT
15057: IFTRUE 15066
15059: PUSH
15060: LD_VAR 0 2
15064: NOT
15065: OR
15066: IFFALSE 15070
// exit ;
15068: GO 15134
// result := true ;
15070: LD_ADDR_VAR 0 3
15074: PUSH
15075: LD_INT 1
15077: ST_TO_ADDR
// for i = 1 to array1 do
15078: LD_ADDR_VAR 0 4
15082: PUSH
15083: DOUBLE
15084: LD_INT 1
15086: DEC
15087: ST_TO_ADDR
15088: LD_VAR 0 1
15092: PUSH
15093: FOR_TO
15094: IFFALSE 15132
// if array1 [ i ] <> array2 [ i ] then
15096: LD_VAR 0 1
15100: PUSH
15101: LD_VAR 0 4
15105: ARRAY
15106: PUSH
15107: LD_VAR 0 2
15111: PUSH
15112: LD_VAR 0 4
15116: ARRAY
15117: NONEQUAL
15118: IFFALSE 15130
// begin result := false ;
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_INT 0
15127: ST_TO_ADDR
// break ;
15128: GO 15132
// end ;
15130: GO 15093
15132: POP
15133: POP
// end ;
15134: LD_VAR 0 3
15138: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15139: LD_INT 0
15141: PPUSH
15142: PPUSH
15143: PPUSH
// pom := GetBase ( fac ) ;
15144: LD_ADDR_VAR 0 5
15148: PUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 274
15158: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15159: LD_ADDR_VAR 0 4
15163: PUSH
15164: LD_VAR 0 2
15168: PUSH
15169: LD_INT 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 2
15177: PUSH
15178: LD_INT 2
15180: ARRAY
15181: PPUSH
15182: LD_VAR 0 2
15186: PUSH
15187: LD_INT 3
15189: ARRAY
15190: PPUSH
15191: LD_VAR 0 2
15195: PUSH
15196: LD_INT 4
15198: ARRAY
15199: PPUSH
15200: CALL_OW 449
15204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15205: LD_ADDR_VAR 0 3
15209: PUSH
15210: LD_VAR 0 5
15214: PPUSH
15215: LD_INT 1
15217: PPUSH
15218: CALL_OW 275
15222: PUSH
15223: LD_VAR 0 4
15227: PUSH
15228: LD_INT 1
15230: ARRAY
15231: GREATEREQUAL
15232: IFFALSE 15258
15234: PUSH
15235: LD_VAR 0 5
15239: PPUSH
15240: LD_INT 2
15242: PPUSH
15243: CALL_OW 275
15247: PUSH
15248: LD_VAR 0 4
15252: PUSH
15253: LD_INT 2
15255: ARRAY
15256: GREATEREQUAL
15257: AND
15258: IFFALSE 15284
15260: PUSH
15261: LD_VAR 0 5
15265: PPUSH
15266: LD_INT 3
15268: PPUSH
15269: CALL_OW 275
15273: PUSH
15274: LD_VAR 0 4
15278: PUSH
15279: LD_INT 3
15281: ARRAY
15282: GREATEREQUAL
15283: AND
15284: ST_TO_ADDR
// end ;
15285: LD_VAR 0 3
15289: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15290: LD_INT 0
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
// pom := GetBase ( building ) ;
15296: LD_ADDR_VAR 0 3
15300: PUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 274
15310: ST_TO_ADDR
// if not pom then
15311: LD_VAR 0 3
15315: NOT
15316: IFFALSE 15320
// exit ;
15318: GO 15494
// btype := GetBType ( building ) ;
15320: LD_ADDR_VAR 0 5
15324: PUSH
15325: LD_VAR 0 1
15329: PPUSH
15330: CALL_OW 266
15334: ST_TO_ADDR
// if btype = b_armoury then
15335: LD_VAR 0 5
15339: PUSH
15340: LD_INT 4
15342: EQUAL
15343: IFFALSE 15353
// btype := b_barracks ;
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: LD_INT 5
15352: ST_TO_ADDR
// if btype = b_depot then
15353: LD_VAR 0 5
15357: PUSH
15358: LD_INT 0
15360: EQUAL
15361: IFFALSE 15371
// btype := b_warehouse ;
15363: LD_ADDR_VAR 0 5
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// if btype = b_workshop then
15371: LD_VAR 0 5
15375: PUSH
15376: LD_INT 2
15378: EQUAL
15379: IFFALSE 15389
// btype := b_factory ;
15381: LD_ADDR_VAR 0 5
15385: PUSH
15386: LD_INT 3
15388: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15389: LD_ADDR_VAR 0 4
15393: PUSH
15394: LD_VAR 0 5
15398: PPUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 248
15408: PPUSH
15409: CALL_OW 450
15413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15414: LD_ADDR_VAR 0 2
15418: PUSH
15419: LD_VAR 0 3
15423: PPUSH
15424: LD_INT 1
15426: PPUSH
15427: CALL_OW 275
15431: PUSH
15432: LD_VAR 0 4
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: GREATEREQUAL
15441: IFFALSE 15467
15443: PUSH
15444: LD_VAR 0 3
15448: PPUSH
15449: LD_INT 2
15451: PPUSH
15452: CALL_OW 275
15456: PUSH
15457: LD_VAR 0 4
15461: PUSH
15462: LD_INT 2
15464: ARRAY
15465: GREATEREQUAL
15466: AND
15467: IFFALSE 15493
15469: PUSH
15470: LD_VAR 0 3
15474: PPUSH
15475: LD_INT 3
15477: PPUSH
15478: CALL_OW 275
15482: PUSH
15483: LD_VAR 0 4
15487: PUSH
15488: LD_INT 3
15490: ARRAY
15491: GREATEREQUAL
15492: AND
15493: ST_TO_ADDR
// end ;
15494: LD_VAR 0 2
15498: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
15503: PPUSH
// pom := GetBase ( building ) ;
15504: LD_ADDR_VAR 0 4
15508: PUSH
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 274
15518: ST_TO_ADDR
// if not pom then
15519: LD_VAR 0 4
15523: NOT
15524: IFFALSE 15528
// exit ;
15526: GO 15633
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 248
15547: PPUSH
15548: CALL_OW 450
15552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15553: LD_ADDR_VAR 0 3
15557: PUSH
15558: LD_VAR 0 4
15562: PPUSH
15563: LD_INT 1
15565: PPUSH
15566: CALL_OW 275
15570: PUSH
15571: LD_VAR 0 5
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: GREATEREQUAL
15580: IFFALSE 15606
15582: PUSH
15583: LD_VAR 0 4
15587: PPUSH
15588: LD_INT 2
15590: PPUSH
15591: CALL_OW 275
15595: PUSH
15596: LD_VAR 0 5
15600: PUSH
15601: LD_INT 2
15603: ARRAY
15604: GREATEREQUAL
15605: AND
15606: IFFALSE 15632
15608: PUSH
15609: LD_VAR 0 4
15613: PPUSH
15614: LD_INT 3
15616: PPUSH
15617: CALL_OW 275
15621: PUSH
15622: LD_VAR 0 5
15626: PUSH
15627: LD_INT 3
15629: ARRAY
15630: GREATEREQUAL
15631: AND
15632: ST_TO_ADDR
// end ;
15633: LD_VAR 0 3
15637: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15638: LD_INT 0
15640: PPUSH
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
// result := false ;
15651: LD_ADDR_VAR 0 8
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15659: LD_VAR 0 5
15663: NOT
15664: IFTRUE 15673
15666: PUSH
15667: LD_VAR 0 1
15671: NOT
15672: OR
15673: IFTRUE 15682
15675: PUSH
15676: LD_VAR 0 2
15680: NOT
15681: OR
15682: IFTRUE 15691
15684: PUSH
15685: LD_VAR 0 3
15689: NOT
15690: OR
15691: IFFALSE 15695
// exit ;
15693: GO 16521
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15695: LD_ADDR_VAR 0 14
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: LD_VAR 0 4
15719: PPUSH
15720: LD_VAR 0 5
15724: PUSH
15725: LD_INT 1
15727: ARRAY
15728: PPUSH
15729: CALL_OW 248
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL 17802 0 6
15741: ST_TO_ADDR
// if not hexes then
15742: LD_VAR 0 14
15746: NOT
15747: IFFALSE 15751
// exit ;
15749: GO 16521
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15751: LD_ADDR_VAR 0 17
15755: PUSH
15756: LD_VAR 0 5
15760: PPUSH
15761: LD_INT 22
15763: PUSH
15764: LD_VAR 0 13
15768: PPUSH
15769: CALL_OW 255
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: LD_INT 30
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 30
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 72
15814: ST_TO_ADDR
// for i = 1 to hexes do
15815: LD_ADDR_VAR 0 9
15819: PUSH
15820: DOUBLE
15821: LD_INT 1
15823: DEC
15824: ST_TO_ADDR
15825: LD_VAR 0 14
15829: PUSH
15830: FOR_TO
15831: IFFALSE 16519
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15833: LD_ADDR_VAR 0 13
15837: PUSH
15838: LD_VAR 0 14
15842: PUSH
15843: LD_VAR 0 9
15847: ARRAY
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 14
15857: PUSH
15858: LD_VAR 0 9
15862: ARRAY
15863: PUSH
15864: LD_INT 2
15866: ARRAY
15867: PPUSH
15868: CALL_OW 428
15872: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15873: LD_VAR 0 14
15877: PUSH
15878: LD_VAR 0 9
15882: ARRAY
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: LD_VAR 0 14
15892: PUSH
15893: LD_VAR 0 9
15897: ARRAY
15898: PUSH
15899: LD_INT 2
15901: ARRAY
15902: PPUSH
15903: CALL_OW 351
15907: IFTRUE 15946
15909: PUSH
15910: LD_VAR 0 14
15914: PUSH
15915: LD_VAR 0 9
15919: ARRAY
15920: PUSH
15921: LD_INT 1
15923: ARRAY
15924: PPUSH
15925: LD_VAR 0 14
15929: PUSH
15930: LD_VAR 0 9
15934: ARRAY
15935: PUSH
15936: LD_INT 2
15938: ARRAY
15939: PPUSH
15940: CALL_OW 488
15944: NOT
15945: OR
15946: IFTRUE 15963
15948: PUSH
15949: LD_VAR 0 13
15953: PPUSH
15954: CALL_OW 247
15958: PUSH
15959: LD_INT 3
15961: EQUAL
15962: OR
15963: IFFALSE 15969
// exit ;
15965: POP
15966: POP
15967: GO 16521
// if not tmp then
15969: LD_VAR 0 13
15973: NOT
15974: IFFALSE 15978
// continue ;
15976: GO 15830
// result := true ;
15978: LD_ADDR_VAR 0 8
15982: PUSH
15983: LD_INT 1
15985: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15986: LD_VAR 0 6
15990: IFFALSE 16007
15992: PUSH
15993: LD_VAR 0 13
15997: PPUSH
15998: CALL_OW 247
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: AND
16007: IFFALSE 16024
16009: PUSH
16010: LD_VAR 0 13
16014: PPUSH
16015: CALL_OW 263
16019: PUSH
16020: LD_INT 1
16022: EQUAL
16023: AND
16024: IFFALSE 16188
// begin if IsDrivenBy ( tmp ) then
16026: LD_VAR 0 13
16030: PPUSH
16031: CALL_OW 311
16035: IFFALSE 16039
// continue ;
16037: GO 15830
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16039: LD_VAR 0 6
16043: PPUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 60
16049: PUSH
16050: EMPTY
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 3
16059: PUSH
16060: LD_INT 55
16062: PUSH
16063: EMPTY
16064: LIST
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 72
16078: IFFALSE 16186
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16080: LD_ADDR_VAR 0 18
16084: PUSH
16085: LD_VAR 0 6
16089: PPUSH
16090: LD_INT 3
16092: PUSH
16093: LD_INT 60
16095: PUSH
16096: EMPTY
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 3
16105: PUSH
16106: LD_INT 55
16108: PUSH
16109: EMPTY
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 72
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: ST_TO_ADDR
// if IsInUnit ( driver ) then
16129: LD_VAR 0 18
16133: PPUSH
16134: CALL_OW 310
16138: IFFALSE 16149
// ComExit ( driver ) ;
16140: LD_VAR 0 18
16144: PPUSH
16145: CALL 41792 0 1
// AddComEnterUnit ( driver , tmp ) ;
16149: LD_VAR 0 18
16153: PPUSH
16154: LD_VAR 0 13
16158: PPUSH
16159: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16163: LD_VAR 0 18
16167: PPUSH
16168: LD_VAR 0 7
16172: PPUSH
16173: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16177: LD_VAR 0 18
16181: PPUSH
16182: CALL_OW 181
// end ; continue ;
16186: GO 15830
// end ; if not cleaners or not tmp in cleaners then
16188: LD_VAR 0 6
16192: NOT
16193: IFTRUE 16208
16195: PUSH
16196: LD_VAR 0 13
16200: PUSH
16201: LD_VAR 0 6
16205: IN
16206: NOT
16207: OR
16208: IFFALSE 16517
// begin if dep then
16210: LD_VAR 0 17
16214: IFFALSE 16350
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16216: LD_ADDR_VAR 0 16
16220: PUSH
16221: LD_VAR 0 17
16225: PUSH
16226: LD_INT 1
16228: ARRAY
16229: PPUSH
16230: CALL_OW 250
16234: PPUSH
16235: LD_VAR 0 17
16239: PUSH
16240: LD_INT 1
16242: ARRAY
16243: PPUSH
16244: CALL_OW 254
16248: PPUSH
16249: LD_INT 5
16251: PPUSH
16252: CALL_OW 272
16256: PUSH
16257: LD_VAR 0 17
16261: PUSH
16262: LD_INT 1
16264: ARRAY
16265: PPUSH
16266: CALL_OW 251
16270: PPUSH
16271: LD_VAR 0 17
16275: PUSH
16276: LD_INT 1
16278: ARRAY
16279: PPUSH
16280: CALL_OW 254
16284: PPUSH
16285: LD_INT 5
16287: PPUSH
16288: CALL_OW 273
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16297: LD_VAR 0 16
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PPUSH
16306: LD_VAR 0 16
16310: PUSH
16311: LD_INT 2
16313: ARRAY
16314: PPUSH
16315: CALL_OW 488
16319: IFFALSE 16350
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16321: LD_VAR 0 13
16325: PPUSH
16326: LD_VAR 0 16
16330: PUSH
16331: LD_INT 1
16333: ARRAY
16334: PPUSH
16335: LD_VAR 0 16
16339: PUSH
16340: LD_INT 2
16342: ARRAY
16343: PPUSH
16344: CALL_OW 111
// continue ;
16348: GO 15830
// end ; end ; r := GetDir ( tmp ) ;
16350: LD_ADDR_VAR 0 15
16354: PUSH
16355: LD_VAR 0 13
16359: PPUSH
16360: CALL_OW 254
16364: ST_TO_ADDR
// if r = 5 then
16365: LD_VAR 0 15
16369: PUSH
16370: LD_INT 5
16372: EQUAL
16373: IFFALSE 16383
// r := 0 ;
16375: LD_ADDR_VAR 0 15
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// for j = r to 5 do
16383: LD_ADDR_VAR 0 10
16387: PUSH
16388: DOUBLE
16389: LD_VAR 0 15
16393: DEC
16394: ST_TO_ADDR
16395: LD_INT 5
16397: PUSH
16398: FOR_TO
16399: IFFALSE 16515
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16401: LD_ADDR_VAR 0 11
16405: PUSH
16406: LD_VAR 0 13
16410: PPUSH
16411: CALL_OW 250
16415: PPUSH
16416: LD_VAR 0 10
16420: PPUSH
16421: LD_INT 2
16423: PPUSH
16424: CALL_OW 272
16428: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16429: LD_ADDR_VAR 0 12
16433: PUSH
16434: LD_VAR 0 13
16438: PPUSH
16439: CALL_OW 251
16443: PPUSH
16444: LD_VAR 0 10
16448: PPUSH
16449: LD_INT 2
16451: PPUSH
16452: CALL_OW 273
16456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16457: LD_VAR 0 11
16461: PPUSH
16462: LD_VAR 0 12
16466: PPUSH
16467: CALL_OW 488
16471: IFFALSE 16490
16473: PUSH
16474: LD_VAR 0 11
16478: PPUSH
16479: LD_VAR 0 12
16483: PPUSH
16484: CALL_OW 428
16488: NOT
16489: AND
16490: IFFALSE 16513
// begin ComMoveXY ( tmp , _x , _y ) ;
16492: LD_VAR 0 13
16496: PPUSH
16497: LD_VAR 0 11
16501: PPUSH
16502: LD_VAR 0 12
16506: PPUSH
16507: CALL_OW 111
// break ;
16511: GO 16515
// end ; end ;
16513: GO 16398
16515: POP
16516: POP
// end ; end ;
16517: GO 15830
16519: POP
16520: POP
// end ;
16521: LD_VAR 0 8
16525: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16526: LD_INT 0
16528: PPUSH
// result := true ;
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_INT 1
16536: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16537: LD_VAR 0 2
16541: PUSH
16542: LD_INT 24
16544: DOUBLE
16545: EQUAL
16546: IFTRUE 16556
16548: LD_INT 33
16550: DOUBLE
16551: EQUAL
16552: IFTRUE 16556
16554: GO 16581
16556: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16557: LD_ADDR_VAR 0 3
16561: PUSH
16562: LD_INT 32
16564: PPUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 321
16574: PUSH
16575: LD_INT 2
16577: EQUAL
16578: ST_TO_ADDR
16579: GO 16897
16581: LD_INT 20
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16614
16589: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16590: LD_ADDR_VAR 0 3
16594: PUSH
16595: LD_INT 6
16597: PPUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 321
16607: PUSH
16608: LD_INT 2
16610: EQUAL
16611: ST_TO_ADDR
16612: GO 16897
16614: LD_INT 22
16616: DOUBLE
16617: EQUAL
16618: IFTRUE 16628
16620: LD_INT 36
16622: DOUBLE
16623: EQUAL
16624: IFTRUE 16628
16626: GO 16653
16628: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_INT 15
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 321
16646: PUSH
16647: LD_INT 2
16649: EQUAL
16650: ST_TO_ADDR
16651: GO 16897
16653: LD_INT 30
16655: DOUBLE
16656: EQUAL
16657: IFTRUE 16661
16659: GO 16686
16661: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16662: LD_ADDR_VAR 0 3
16666: PUSH
16667: LD_INT 20
16669: PPUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 321
16679: PUSH
16680: LD_INT 2
16682: EQUAL
16683: ST_TO_ADDR
16684: GO 16897
16686: LD_INT 28
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16700
16692: LD_INT 21
16694: DOUBLE
16695: EQUAL
16696: IFTRUE 16700
16698: GO 16725
16700: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_INT 21
16708: PPUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 321
16718: PUSH
16719: LD_INT 2
16721: EQUAL
16722: ST_TO_ADDR
16723: GO 16897
16725: LD_INT 16
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16758
16733: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16734: LD_ADDR_VAR 0 3
16738: PUSH
16739: LD_INT 84
16741: PPUSH
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 321
16751: PUSH
16752: LD_INT 2
16754: EQUAL
16755: ST_TO_ADDR
16756: GO 16897
16758: LD_INT 19
16760: DOUBLE
16761: EQUAL
16762: IFTRUE 16772
16764: LD_INT 23
16766: DOUBLE
16767: EQUAL
16768: IFTRUE 16772
16770: GO 16797
16772: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16773: LD_ADDR_VAR 0 3
16777: PUSH
16778: LD_INT 83
16780: PPUSH
16781: LD_VAR 0 1
16785: PPUSH
16786: CALL_OW 321
16790: PUSH
16791: LD_INT 2
16793: EQUAL
16794: ST_TO_ADDR
16795: GO 16897
16797: LD_INT 17
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16830
16805: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16806: LD_ADDR_VAR 0 3
16810: PUSH
16811: LD_INT 39
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 321
16823: PUSH
16824: LD_INT 2
16826: EQUAL
16827: ST_TO_ADDR
16828: GO 16897
16830: LD_INT 18
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 16863
16838: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16839: LD_ADDR_VAR 0 3
16843: PUSH
16844: LD_INT 40
16846: PPUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 321
16856: PUSH
16857: LD_INT 2
16859: EQUAL
16860: ST_TO_ADDR
16861: GO 16897
16863: LD_INT 27
16865: DOUBLE
16866: EQUAL
16867: IFTRUE 16871
16869: GO 16896
16871: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16872: LD_ADDR_VAR 0 3
16876: PUSH
16877: LD_INT 35
16879: PPUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: CALL_OW 321
16889: PUSH
16890: LD_INT 2
16892: EQUAL
16893: ST_TO_ADDR
16894: GO 16897
16896: POP
// end ;
16897: LD_VAR 0 3
16901: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16902: LD_INT 0
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
// result := false ;
16915: LD_ADDR_VAR 0 6
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// if btype = b_depot then
16923: LD_VAR 0 2
16927: PUSH
16928: LD_INT 0
16930: EQUAL
16931: IFFALSE 16943
// begin result := true ;
16933: LD_ADDR_VAR 0 6
16937: PUSH
16938: LD_INT 1
16940: ST_TO_ADDR
// exit ;
16941: GO 17797
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16943: LD_VAR 0 1
16947: NOT
16948: IFTRUE 16973
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 266
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: LD_INT 1
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: IN
16971: NOT
16972: OR
16973: IFTRUE 16982
16975: PUSH
16976: LD_VAR 0 2
16980: NOT
16981: OR
16982: IFTRUE 17018
16984: PUSH
16985: LD_VAR 0 5
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: LD_INT 4
17004: PUSH
17005: LD_INT 5
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: IN
17016: NOT
17017: OR
17018: IFTRUE 17037
17020: PUSH
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_VAR 0 4
17030: PPUSH
17031: CALL_OW 488
17035: NOT
17036: OR
17037: IFFALSE 17041
// exit ;
17039: GO 17797
// side := GetSide ( depot ) ;
17041: LD_ADDR_VAR 0 9
17045: PUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 255
17055: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17056: LD_VAR 0 9
17060: PPUSH
17061: LD_VAR 0 2
17065: PPUSH
17066: CALL 16526 0 2
17070: NOT
17071: IFFALSE 17075
// exit ;
17073: GO 17797
// pom := GetBase ( depot ) ;
17075: LD_ADDR_VAR 0 10
17079: PUSH
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 274
17089: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17090: LD_ADDR_VAR 0 11
17094: PUSH
17095: LD_VAR 0 2
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 248
17109: PPUSH
17110: CALL_OW 450
17114: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17115: LD_VAR 0 10
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 275
17127: PUSH
17128: LD_VAR 0 11
17132: PUSH
17133: LD_INT 1
17135: ARRAY
17136: GREATEREQUAL
17137: IFFALSE 17163
17139: PUSH
17140: LD_VAR 0 10
17144: PPUSH
17145: LD_INT 2
17147: PPUSH
17148: CALL_OW 275
17152: PUSH
17153: LD_VAR 0 11
17157: PUSH
17158: LD_INT 2
17160: ARRAY
17161: GREATEREQUAL
17162: AND
17163: IFFALSE 17189
17165: PUSH
17166: LD_VAR 0 10
17170: PPUSH
17171: LD_INT 3
17173: PPUSH
17174: CALL_OW 275
17178: PUSH
17179: LD_VAR 0 11
17183: PUSH
17184: LD_INT 3
17186: ARRAY
17187: GREATEREQUAL
17188: AND
17189: NOT
17190: IFFALSE 17194
// exit ;
17192: GO 17797
// if GetBType ( depot ) = b_depot then
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 266
17203: PUSH
17204: LD_INT 0
17206: EQUAL
17207: IFFALSE 17219
// dist := 28 else
17209: LD_ADDR_VAR 0 14
17213: PUSH
17214: LD_INT 28
17216: ST_TO_ADDR
17217: GO 17227
// dist := 36 ;
17219: LD_ADDR_VAR 0 14
17223: PUSH
17224: LD_INT 36
17226: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17227: LD_VAR 0 1
17231: PPUSH
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_VAR 0 4
17241: PPUSH
17242: CALL_OW 297
17246: PUSH
17247: LD_VAR 0 14
17251: GREATER
17252: IFFALSE 17256
// exit ;
17254: GO 17797
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17256: LD_ADDR_VAR 0 12
17260: PUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_VAR 0 4
17275: PPUSH
17276: LD_VAR 0 5
17280: PPUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 248
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: CALL 17802 0 6
17298: ST_TO_ADDR
// if not hexes then
17299: LD_VAR 0 12
17303: NOT
17304: IFFALSE 17308
// exit ;
17306: GO 17797
// hex := GetHexInfo ( x , y ) ;
17308: LD_ADDR_VAR 0 15
17312: PUSH
17313: LD_VAR 0 3
17317: PPUSH
17318: LD_VAR 0 4
17322: PPUSH
17323: CALL_OW 546
17327: ST_TO_ADDR
// if hex [ 1 ] then
17328: LD_VAR 0 15
17332: PUSH
17333: LD_INT 1
17335: ARRAY
17336: IFFALSE 17340
// exit ;
17338: GO 17797
// height := hex [ 2 ] ;
17340: LD_ADDR_VAR 0 13
17344: PUSH
17345: LD_VAR 0 15
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: ST_TO_ADDR
// for i = 1 to hexes do
17354: LD_ADDR_VAR 0 7
17358: PUSH
17359: DOUBLE
17360: LD_INT 1
17362: DEC
17363: ST_TO_ADDR
17364: LD_VAR 0 12
17368: PUSH
17369: FOR_TO
17370: IFFALSE 17714
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17372: LD_VAR 0 12
17376: PUSH
17377: LD_VAR 0 7
17381: ARRAY
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PPUSH
17387: LD_VAR 0 12
17391: PUSH
17392: LD_VAR 0 7
17396: ARRAY
17397: PUSH
17398: LD_INT 2
17400: ARRAY
17401: PPUSH
17402: CALL_OW 488
17406: NOT
17407: IFTRUE 17449
17409: PUSH
17410: LD_VAR 0 12
17414: PUSH
17415: LD_VAR 0 7
17419: ARRAY
17420: PUSH
17421: LD_INT 1
17423: ARRAY
17424: PPUSH
17425: LD_VAR 0 12
17429: PUSH
17430: LD_VAR 0 7
17434: ARRAY
17435: PUSH
17436: LD_INT 2
17438: ARRAY
17439: PPUSH
17440: CALL_OW 428
17444: PUSH
17445: LD_INT 0
17447: GREATER
17448: OR
17449: IFTRUE 17487
17451: PUSH
17452: LD_VAR 0 12
17456: PUSH
17457: LD_VAR 0 7
17461: ARRAY
17462: PUSH
17463: LD_INT 1
17465: ARRAY
17466: PPUSH
17467: LD_VAR 0 12
17471: PUSH
17472: LD_VAR 0 7
17476: ARRAY
17477: PUSH
17478: LD_INT 2
17480: ARRAY
17481: PPUSH
17482: CALL_OW 351
17486: OR
17487: IFFALSE 17493
// exit ;
17489: POP
17490: POP
17491: GO 17797
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17493: LD_ADDR_VAR 0 8
17497: PUSH
17498: LD_VAR 0 12
17502: PUSH
17503: LD_VAR 0 7
17507: ARRAY
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: LD_VAR 0 12
17517: PUSH
17518: LD_VAR 0 7
17522: ARRAY
17523: PUSH
17524: LD_INT 2
17526: ARRAY
17527: PPUSH
17528: CALL_OW 546
17532: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17533: LD_VAR 0 8
17537: PUSH
17538: LD_INT 1
17540: ARRAY
17541: IFTRUE 17563
17543: PUSH
17544: LD_VAR 0 8
17548: PUSH
17549: LD_INT 2
17551: ARRAY
17552: PUSH
17553: LD_VAR 0 13
17557: PUSH
17558: LD_INT 2
17560: PLUS
17561: GREATER
17562: OR
17563: IFTRUE 17585
17565: PUSH
17566: LD_VAR 0 8
17570: PUSH
17571: LD_INT 2
17573: ARRAY
17574: PUSH
17575: LD_VAR 0 13
17579: PUSH
17580: LD_INT 2
17582: MINUS
17583: LESS
17584: OR
17585: IFTRUE 17653
17587: PUSH
17588: LD_VAR 0 8
17592: PUSH
17593: LD_INT 3
17595: ARRAY
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: LD_INT 8
17602: PUSH
17603: LD_INT 9
17605: PUSH
17606: LD_INT 10
17608: PUSH
17609: LD_INT 11
17611: PUSH
17612: LD_INT 12
17614: PUSH
17615: LD_INT 13
17617: PUSH
17618: LD_INT 16
17620: PUSH
17621: LD_INT 17
17623: PUSH
17624: LD_INT 18
17626: PUSH
17627: LD_INT 19
17629: PUSH
17630: LD_INT 20
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: IN
17651: NOT
17652: OR
17653: IFTRUE 17666
17655: PUSH
17656: LD_VAR 0 8
17660: PUSH
17661: LD_INT 5
17663: ARRAY
17664: NOT
17665: OR
17666: IFTRUE 17706
17668: PUSH
17669: LD_VAR 0 8
17673: PUSH
17674: LD_INT 6
17676: ARRAY
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: LD_INT 2
17683: PUSH
17684: LD_INT 7
17686: PUSH
17687: LD_INT 9
17689: PUSH
17690: LD_INT 10
17692: PUSH
17693: LD_INT 11
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: IN
17704: NOT
17705: OR
17706: IFFALSE 17712
// exit ;
17708: POP
17709: POP
17710: GO 17797
// end ;
17712: GO 17369
17714: POP
17715: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17716: LD_VAR 0 9
17720: PPUSH
17721: LD_VAR 0 3
17725: PPUSH
17726: LD_VAR 0 4
17730: PPUSH
17731: LD_INT 20
17733: PPUSH
17734: CALL 9616 0 4
17738: PUSH
17739: LD_INT 4
17741: ARRAY
17742: IFFALSE 17746
// exit ;
17744: GO 17797
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17746: LD_VAR 0 2
17750: PUSH
17751: LD_INT 29
17753: PUSH
17754: LD_INT 30
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: IN
17761: IFFALSE 17785
17763: PUSH
17764: LD_VAR 0 3
17768: PPUSH
17769: LD_VAR 0 4
17773: PPUSH
17774: LD_VAR 0 9
17778: PPUSH
17779: CALL_OW 440
17783: NOT
17784: AND
17785: IFFALSE 17789
// exit ;
17787: GO 17797
// result := true ;
17789: LD_ADDR_VAR 0 6
17793: PUSH
17794: LD_INT 1
17796: ST_TO_ADDR
// end ;
17797: LD_VAR 0 6
17801: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
17823: PPUSH
17824: PPUSH
17825: PPUSH
17826: PPUSH
17827: PPUSH
17828: PPUSH
17829: PPUSH
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
17853: PPUSH
17854: PPUSH
17855: PPUSH
17856: PPUSH
17857: PPUSH
17858: PPUSH
17859: PPUSH
17860: PPUSH
17861: PPUSH
// result = [ ] ;
17862: LD_ADDR_VAR 0 7
17866: PUSH
17867: EMPTY
17868: ST_TO_ADDR
// temp_list = [ ] ;
17869: LD_ADDR_VAR 0 9
17873: PUSH
17874: EMPTY
17875: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17876: LD_VAR 0 4
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: LD_INT 3
17892: PUSH
17893: LD_INT 4
17895: PUSH
17896: LD_INT 5
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: IN
17907: NOT
17908: IFTRUE 17951
17910: PUSH
17911: LD_VAR 0 1
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: IN
17926: IFFALSE 17950
17928: PUSH
17929: LD_VAR 0 5
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: LD_INT 3
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: LIST
17947: IN
17948: NOT
17949: AND
17950: OR
17951: IFFALSE 17955
// exit ;
17953: GO 36354
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17955: LD_VAR 0 1
17959: PUSH
17960: LD_INT 6
17962: PUSH
17963: LD_INT 7
17965: PUSH
17966: LD_INT 8
17968: PUSH
17969: LD_INT 13
17971: PUSH
17972: LD_INT 12
17974: PUSH
17975: LD_INT 15
17977: PUSH
17978: LD_INT 11
17980: PUSH
17981: LD_INT 14
17983: PUSH
17984: LD_INT 10
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: IN
17998: IFFALSE 18008
// btype = b_lab ;
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_INT 6
18007: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18008: LD_VAR 0 6
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: LD_INT 2
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: IN
18027: NOT
18028: IFTRUE 18096
18030: PUSH
18031: LD_VAR 0 1
18035: PUSH
18036: LD_INT 0
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 2
18044: PUSH
18045: LD_INT 3
18047: PUSH
18048: LD_INT 6
18050: PUSH
18051: LD_INT 36
18053: PUSH
18054: LD_INT 4
18056: PUSH
18057: LD_INT 5
18059: PUSH
18060: LD_INT 31
18062: PUSH
18063: LD_INT 32
18065: PUSH
18066: LD_INT 33
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: IN
18082: NOT
18083: IFFALSE 18095
18085: PUSH
18086: LD_VAR 0 6
18090: PUSH
18091: LD_INT 1
18093: EQUAL
18094: AND
18095: OR
18096: IFTRUE 18128
18098: PUSH
18099: LD_VAR 0 1
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: LD_INT 3
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: IN
18114: NOT
18115: IFFALSE 18127
18117: PUSH
18118: LD_VAR 0 6
18122: PUSH
18123: LD_INT 2
18125: EQUAL
18126: AND
18127: OR
18128: IFFALSE 18138
// mode = 0 ;
18130: LD_ADDR_VAR 0 6
18134: PUSH
18135: LD_INT 0
18137: ST_TO_ADDR
// case mode of 0 :
18138: LD_VAR 0 6
18142: PUSH
18143: LD_INT 0
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 29604
18151: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18152: LD_ADDR_VAR 0 11
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 1
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: LD_INT 2
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 3
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18345: LD_ADDR_VAR 0 12
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: LD_INT 0
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 1
18457: NEG
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 2
18468: NEG
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 3
18502: NEG
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 3
18513: NEG
18514: PUSH
18515: LD_INT 1
18517: NEG
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18541: LD_ADDR_VAR 0 13
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 2
18626: NEG
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: NEG
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 2
18676: NEG
18677: PUSH
18678: LD_INT 2
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: LD_INT 3
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 3
18700: NEG
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 3
18712: NEG
18713: PUSH
18714: LD_INT 3
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18740: LD_ADDR_VAR 0 14
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: LD_INT 2
18825: NEG
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 2
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: LD_INT 3
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: LD_INT 3
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18936: LD_ADDR_VAR 0 15
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: NEG
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 3
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19129: LD_ADDR_VAR 0 16
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 1
19187: NEG
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: LD_INT 1
19202: NEG
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: NEG
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: LD_INT 2
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 3
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 3
19286: PUSH
19287: LD_INT 3
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19322: LD_ADDR_VAR 0 17
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: NEG
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 0
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: NEG
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 2
19509: NEG
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 2
19521: NEG
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19552: LD_ADDR_VAR 0 18
19556: PUSH
19557: LD_INT 0
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 2
19728: NEG
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19782: LD_ADDR_VAR 0 19
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 2
19969: NEG
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 2
19981: NEG
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20012: LD_ADDR_VAR 0 20
20016: PUSH
20017: LD_INT 0
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: LD_INT 2
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 0
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: LD_INT 0
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: NEG
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20242: LD_ADDR_VAR 0 21
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: LD_INT 0
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: LD_INT 2
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: LD_INT 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: NEG
20419: PUSH
20420: LD_INT 0
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: NEG
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 2
20441: NEG
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20472: LD_ADDR_VAR 0 22
20476: PUSH
20477: LD_INT 0
20479: PUSH
20480: LD_INT 0
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: LD_INT 2
20557: NEG
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: LD_INT 2
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: NEG
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20702: LD_ADDR_VAR 0 23
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 0
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 1
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: LD_INT 1
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: LD_INT 2
20787: NEG
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: LD_INT 2
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 2
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: LD_INT 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 2
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: NEG
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: LD_INT 1
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: NEG
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 2
20913: NEG
20914: PUSH
20915: LD_INT 3
20917: NEG
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 3
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 2
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20982: LD_ADDR_VAR 0 24
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 0
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 2
21158: NEG
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: LD_INT 2
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 3
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 3
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21258: LD_ADDR_VAR 0 25
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: LD_INT 2
21343: NEG
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 2
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: NEG
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: NEG
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 2
21457: NEG
21458: PUSH
21459: LD_INT 2
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21532: LD_ADDR_VAR 0 26
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: LD_INT 0
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: LD_INT 2
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 2
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 2
21708: NEG
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: NEG
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 3
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: LD_INT 2
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: NEG
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21808: LD_ADDR_VAR 0 27
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: LD_INT 2
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 2
21904: NEG
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 2
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 3
22041: NEG
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 3
22053: NEG
22054: PUSH
22055: LD_INT 2
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22088: LD_ADDR_VAR 0 28
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: LD_INT 2
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 0
22181: PUSH
22182: LD_INT 2
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 2
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 2
22275: NEG
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 2
22287: NEG
22288: PUSH
22289: LD_INT 2
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: NEG
22300: PUSH
22301: LD_INT 3
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: LD_INT 3
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 3
22323: NEG
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 3
22335: NEG
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22370: LD_ADDR_VAR 0 29
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 0
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: LD_INT 2
22455: NEG
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: LD_INT 2
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 2
22536: NEG
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: NEG
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: NEG
22561: PUSH
22562: LD_INT 3
22564: NEG
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 3
22614: NEG
22615: PUSH
22616: LD_INT 2
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22649: LD_ADDR_VAR 0 30
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: LD_INT 2
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 2
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: NEG
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 2
22815: NEG
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: LD_INT 3
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: NEG
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 3
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22927: LD_ADDR_VAR 0 31
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: LD_INT 2
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 2
23092: NEG
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 2
23104: NEG
23105: PUSH
23106: LD_INT 2
23108: NEG
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: LD_INT 3
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 3
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: NEG
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23205: LD_ADDR_VAR 0 32
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: LD_INT 2
23290: NEG
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 2
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: NEG
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: LD_INT 3
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23483: LD_ADDR_VAR 0 33
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 0
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 2
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: NEG
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: LD_INT 2
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 2
23673: NEG
23674: PUSH
23675: LD_INT 3
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 3
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: LD_INT 3
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 3
23727: NEG
23728: PUSH
23729: LD_INT 2
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23762: LD_ADDR_VAR 0 34
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: NEG
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 2
23918: NEG
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 2
23929: NEG
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 2
23941: NEG
23942: PUSH
23943: LD_INT 2
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 3
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 3
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 2
23996: NEG
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: NEG
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24042: LD_ADDR_VAR 0 35
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24154: LD_ADDR_VAR 0 36
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24266: LD_ADDR_VAR 0 37
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 1
24358: NEG
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24378: LD_ADDR_VAR 0 38
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24490: LD_ADDR_VAR 0 39
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24602: LD_ADDR_VAR 0 40
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24714: LD_ADDR_VAR 0 41
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: NEG
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: LD_INT 3
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 3
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 3
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 3
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 3
24957: PUSH
24958: LD_INT 3
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 3
24988: NEG
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: NEG
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 3
25011: NEG
25012: PUSH
25013: LD_INT 2
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 3
25023: NEG
25024: PUSH
25025: LD_INT 3
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25064: LD_ADDR_VAR 0 42
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 2
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 2
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 2
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 3
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 3
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 3
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 3
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: LD_INT 3
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 3
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: NEG
25362: PUSH
25363: LD_INT 2
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: LD_INT 3
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25414: LD_ADDR_VAR 0 43
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: LD_INT 3
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: LD_INT 3
25618: NEG
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 2
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 3
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 3
25710: NEG
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 3
25721: NEG
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25762: LD_ADDR_VAR 0 44
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 2
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: LD_INT 3
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 3
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 3
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 3
26005: PUSH
26006: LD_INT 3
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: NEG
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 3
26047: NEG
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 3
26059: NEG
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 3
26071: NEG
26072: PUSH
26073: LD_INT 3
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26112: LD_ADDR_VAR 0 45
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 2
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: LD_INT 3
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 3
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 3
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: NEG
26410: PUSH
26411: LD_INT 2
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: LD_INT 3
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26462: LD_ADDR_VAR 0 46
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: LD_INT 2
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: NEG
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 3
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 3
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 3
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 3
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 3
26758: NEG
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 3
26769: NEG
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26810: LD_ADDR_VAR 0 47
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 2
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: NEG
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 2
26937: NEG
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26961: LD_ADDR_VAR 0 48
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27108: LD_ADDR_VAR 0 49
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27252: LD_ADDR_VAR 0 50
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27396: LD_ADDR_VAR 0 51
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 2
27519: NEG
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27543: LD_ADDR_VAR 0 52
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27694: LD_ADDR_VAR 0 53
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 2
27870: NEG
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 2
27881: NEG
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27924: LD_ADDR_VAR 0 54
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28154: LD_ADDR_VAR 0 55
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28384: LD_ADDR_VAR 0 56
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 2
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: NEG
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28614: LD_ADDR_VAR 0 57
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28844: LD_ADDR_VAR 0 58
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29074: LD_ADDR_VAR 0 59
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 1
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: NEG
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29162: LD_ADDR_VAR 0 60
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29250: LD_ADDR_VAR 0 61
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29338: LD_ADDR_VAR 0 62
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29426: LD_ADDR_VAR 0 63
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29514: LD_ADDR_VAR 0 64
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: ST_TO_ADDR
// end ; 1 :
29602: GO 35499
29604: LD_INT 1
29606: DOUBLE
29607: EQUAL
29608: IFTRUE 29612
29610: GO 32235
29612: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29613: LD_ADDR_VAR 0 11
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 3
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 2
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29657: LD_ADDR_VAR 0 12
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 3
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29698: LD_ADDR_VAR 0 13
29702: PUSH
29703: LD_INT 3
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: LIST
29737: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29738: LD_ADDR_VAR 0 14
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29779: LD_ADDR_VAR 0 15
29783: PUSH
29784: LD_INT 2
29786: NEG
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: NEG
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 3
29808: NEG
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29823: LD_ADDR_VAR 0 16
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 3
29842: NEG
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 3
29854: NEG
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29869: LD_ADDR_VAR 0 17
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: LD_INT 3
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 3
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 2
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29913: LD_ADDR_VAR 0 18
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29954: LD_ADDR_VAR 0 19
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 3
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29994: LD_ADDR_VAR 0 20
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 3
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30035: LD_ADDR_VAR 0 21
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 3
30053: NEG
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 3
30064: NEG
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30079: LD_ADDR_VAR 0 22
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: LD_INT 3
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: LD_INT 3
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30125: LD_ADDR_VAR 0 23
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 3
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: NEG
30144: PUSH
30145: LD_INT 4
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 3
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30169: LD_ADDR_VAR 0 24
30173: PUSH
30174: LD_INT 3
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 3
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 4
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30210: LD_ADDR_VAR 0 25
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 3
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 4
30227: PUSH
30228: LD_INT 3
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30250: LD_ADDR_VAR 0 26
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 4
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30291: LD_ADDR_VAR 0 27
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 3
30309: NEG
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 4
30320: NEG
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30335: LD_ADDR_VAR 0 28
30339: PUSH
30340: LD_INT 3
30342: NEG
30343: PUSH
30344: LD_INT 3
30346: NEG
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 3
30354: NEG
30355: PUSH
30356: LD_INT 4
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 4
30366: NEG
30367: PUSH
30368: LD_INT 3
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30381: LD_ADDR_VAR 0 29
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: LD_INT 3
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: LD_INT 4
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: LD_INT 4
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: LD_INT 5
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 5
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 4
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 6
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 6
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 5
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30536: LD_ADDR_VAR 0 30
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 4
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 5
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 6
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 6
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30679: LD_ADDR_VAR 0 31
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 4
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: LD_INT 4
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 5
30746: PUSH
30747: LD_INT 4
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 5
30756: PUSH
30757: LD_INT 5
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 4
30766: PUSH
30767: LD_INT 5
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 6
30776: PUSH
30777: LD_INT 5
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 6
30786: PUSH
30787: LD_INT 6
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 5
30796: PUSH
30797: LD_INT 6
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30818: LD_ADDR_VAR 0 32
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 4
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: LD_INT 4
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 5
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 5
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: LD_INT 4
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 6
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: LD_INT 6
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30961: LD_ADDR_VAR 0 33
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 4
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 4
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 4
31036: NEG
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 5
31047: NEG
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 5
31058: NEG
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 5
31070: NEG
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 6
31081: NEG
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 6
31092: NEG
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31116: LD_ADDR_VAR 0 34
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: LD_INT 4
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 4
31171: NEG
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 4
31183: NEG
31184: PUSH
31185: LD_INT 4
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 4
31195: NEG
31196: PUSH
31197: LD_INT 5
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: LD_INT 4
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 5
31219: NEG
31220: PUSH
31221: LD_INT 5
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 5
31231: NEG
31232: PUSH
31233: LD_INT 6
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 6
31243: NEG
31244: PUSH
31245: LD_INT 5
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 6
31255: NEG
31256: PUSH
31257: LD_INT 6
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31279: LD_ADDR_VAR 0 41
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31323: LD_ADDR_VAR 0 42
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31364: LD_ADDR_VAR 0 43
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31404: LD_ADDR_VAR 0 44
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 3
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31445: LD_ADDR_VAR 0 45
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: NEG
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31489: LD_ADDR_VAR 0 46
31493: PUSH
31494: LD_INT 2
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31535: LD_ADDR_VAR 0 47
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 3
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31568: LD_ADDR_VAR 0 48
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: LD_INT 2
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31599: LD_ADDR_VAR 0 49
31603: PUSH
31604: LD_INT 3
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31628: LD_ADDR_VAR 0 50
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: LD_INT 3
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31657: LD_ADDR_VAR 0 51
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31688: LD_ADDR_VAR 0 52
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31721: LD_ADDR_VAR 0 53
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: LD_INT 3
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 3
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31765: LD_ADDR_VAR 0 54
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31806: LD_ADDR_VAR 0 55
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 3
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31846: LD_ADDR_VAR 0 56
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 3
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 3
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31887: LD_ADDR_VAR 0 57
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 3
31905: NEG
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 3
31916: NEG
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31931: LD_ADDR_VAR 0 58
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: NEG
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 3
31962: NEG
31963: PUSH
31964: LD_INT 3
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31977: LD_ADDR_VAR 0 59
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 2
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32021: LD_ADDR_VAR 0 60
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32062: LD_ADDR_VAR 0 61
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32102: LD_ADDR_VAR 0 62
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32143: LD_ADDR_VAR 0 63
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32187: LD_ADDR_VAR 0 64
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// end ; 2 :
32233: GO 35499
32235: LD_INT 2
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 35498
32243: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32244: LD_ADDR_VAR 0 29
32248: PUSH
32249: LD_INT 4
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 5
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 5
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 5
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 3
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 4
32364: PUSH
32365: LD_INT 3
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 4
32374: PUSH
32375: LD_INT 4
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 3
32384: PUSH
32385: LD_INT 4
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: LD_INT 3
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 4
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 5
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 5
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 4
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 5
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: NEG
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 4
32594: NEG
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 4
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 4
32629: NEG
32630: PUSH
32631: LD_INT 4
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 4
32641: NEG
32642: PUSH
32643: LD_INT 5
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: LD_INT 4
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 3
32665: NEG
32666: PUSH
32667: LD_INT 3
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 4
32677: NEG
32678: PUSH
32679: LD_INT 3
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 5
32689: NEG
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 5
32701: NEG
32702: PUSH
32703: LD_INT 5
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 3
32713: NEG
32714: PUSH
32715: LD_INT 5
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 5
32725: NEG
32726: PUSH
32727: LD_INT 3
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32782: LD_ADDR_VAR 0 30
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 4
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: LD_INT 4
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 5
32819: PUSH
32820: LD_INT 5
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 4
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: LD_INT 4
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: LD_INT 3
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 5
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 4
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 4
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 4
32972: NEG
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 3
32995: NEG
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 4
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 5
33028: NEG
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 5
33051: NEG
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: NEG
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 3
33086: NEG
33087: PUSH
33088: LD_INT 4
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 3
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: NEG
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 4
33134: NEG
33135: PUSH
33136: LD_INT 3
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: LD_INT 4
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 4
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 4
33170: NEG
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 4
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: LD_INT 5
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 4
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 4
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: LD_INT 5
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: NEG
33273: PUSH
33274: LD_INT 5
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33329: LD_ADDR_VAR 0 31
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 4
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 5
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 4
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: NEG
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 4
33485: NEG
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 4
33508: NEG
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: NEG
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 4
33531: NEG
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 4
33543: NEG
33544: PUSH
33545: LD_INT 5
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 3
33555: NEG
33556: PUSH
33557: LD_INT 4
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: NEG
33568: PUSH
33569: LD_INT 3
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 4
33579: NEG
33580: PUSH
33581: LD_INT 3
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 5
33591: NEG
33592: PUSH
33593: LD_INT 4
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 5
33603: NEG
33604: PUSH
33605: LD_INT 5
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: NEG
33616: PUSH
33617: LD_INT 5
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 5
33627: NEG
33628: PUSH
33629: LD_INT 3
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 3
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: LD_INT 4
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 3
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: LD_INT 4
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 4
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 5
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 5
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 4
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 5
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33879: LD_ADDR_VAR 0 32
33883: PUSH
33884: LD_INT 4
33886: NEG
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 5
33942: NEG
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 5
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 5
33965: NEG
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 3
33988: NEG
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 3
34000: NEG
34001: PUSH
34002: LD_INT 4
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: LD_INT 3
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: LD_INT 2
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 4
34048: NEG
34049: PUSH
34050: LD_INT 3
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 4
34060: NEG
34061: PUSH
34062: LD_INT 4
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: NEG
34073: PUSH
34074: LD_INT 4
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 4
34084: NEG
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 4
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: LD_INT 5
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: LD_INT 4
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 3
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 4
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 5
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: LD_INT 3
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: LD_INT 5
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 4
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 4
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 3
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 4
34291: PUSH
34292: LD_INT 4
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 4
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 5
34311: PUSH
34312: LD_INT 4
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 5
34321: PUSH
34322: LD_INT 5
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: LD_INT 5
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 3
34341: PUSH
34342: LD_INT 4
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 5
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: LD_INT 5
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34426: LD_ADDR_VAR 0 33
34430: PUSH
34431: LD_INT 4
34433: NEG
34434: PUSH
34435: LD_INT 4
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 4
34445: NEG
34446: PUSH
34447: LD_INT 5
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 3
34457: NEG
34458: PUSH
34459: LD_INT 4
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 3
34469: NEG
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 4
34481: NEG
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 5
34493: NEG
34494: PUSH
34495: LD_INT 4
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 5
34505: NEG
34506: PUSH
34507: LD_INT 5
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: NEG
34518: PUSH
34519: LD_INT 5
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 5
34529: NEG
34530: PUSH
34531: LD_INT 3
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 3
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 4
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: NEG
34597: PUSH
34598: LD_INT 3
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 4
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 2
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: NEG
34632: PUSH
34633: LD_INT 4
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 4
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 4
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 5
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 5
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 3
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 5
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 4
34766: PUSH
34767: LD_INT 4
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 3
34776: PUSH
34777: LD_INT 4
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 4
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: LD_INT 5
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: LD_INT 5
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: LD_INT 4
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 5
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 2
34908: NEG
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34964: LD_ADDR_VAR 0 34
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 4
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 5
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 4
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 3
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 4
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 5
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: LD_INT 3
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 5
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 4
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 4
35166: PUSH
35167: LD_INT 4
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 4
35176: PUSH
35177: LD_INT 3
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 5
35186: PUSH
35187: LD_INT 4
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 5
35196: PUSH
35197: LD_INT 5
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 4
35206: PUSH
35207: LD_INT 5
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: LD_INT 4
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: LD_INT 3
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 5
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: PUSH
35247: LD_INT 5
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 3
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 3
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: LD_INT 4
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 4
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: LD_INT 4
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 4
35349: NEG
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 4
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: NEG
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 3
35383: NEG
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 4
35394: NEG
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 5
35405: NEG
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 5
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 5
35428: NEG
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: NEG
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: ST_TO_ADDR
// end ; end ;
35496: GO 35499
35498: POP
// case btype of b_depot , b_warehouse :
35499: LD_VAR 0 1
35503: PUSH
35504: LD_INT 0
35506: DOUBLE
35507: EQUAL
35508: IFTRUE 35518
35510: LD_INT 1
35512: DOUBLE
35513: EQUAL
35514: IFTRUE 35518
35516: GO 35719
35518: POP
// case nation of nation_american :
35519: LD_VAR 0 5
35523: PUSH
35524: LD_INT 1
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35532
35530: GO 35588
35532: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35533: LD_ADDR_VAR 0 9
35537: PUSH
35538: LD_VAR 0 11
35542: PUSH
35543: LD_VAR 0 12
35547: PUSH
35548: LD_VAR 0 13
35552: PUSH
35553: LD_VAR 0 14
35557: PUSH
35558: LD_VAR 0 15
35562: PUSH
35563: LD_VAR 0 16
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: LD_VAR 0 4
35580: PUSH
35581: LD_INT 1
35583: PLUS
35584: ARRAY
35585: ST_TO_ADDR
35586: GO 35717
35588: LD_INT 2
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35596
35594: GO 35652
35596: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35597: LD_ADDR_VAR 0 9
35601: PUSH
35602: LD_VAR 0 17
35606: PUSH
35607: LD_VAR 0 18
35611: PUSH
35612: LD_VAR 0 19
35616: PUSH
35617: LD_VAR 0 20
35621: PUSH
35622: LD_VAR 0 21
35626: PUSH
35627: LD_VAR 0 22
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: PUSH
35640: LD_VAR 0 4
35644: PUSH
35645: LD_INT 1
35647: PLUS
35648: ARRAY
35649: ST_TO_ADDR
35650: GO 35717
35652: LD_INT 3
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35716
35660: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35661: LD_ADDR_VAR 0 9
35665: PUSH
35666: LD_VAR 0 23
35670: PUSH
35671: LD_VAR 0 24
35675: PUSH
35676: LD_VAR 0 25
35680: PUSH
35681: LD_VAR 0 26
35685: PUSH
35686: LD_VAR 0 27
35690: PUSH
35691: LD_VAR 0 28
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: PUSH
35704: LD_VAR 0 4
35708: PUSH
35709: LD_INT 1
35711: PLUS
35712: ARRAY
35713: ST_TO_ADDR
35714: GO 35717
35716: POP
35717: GO 36272
35719: LD_INT 2
35721: DOUBLE
35722: EQUAL
35723: IFTRUE 35733
35725: LD_INT 3
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35733
35731: GO 35789
35733: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35734: LD_ADDR_VAR 0 9
35738: PUSH
35739: LD_VAR 0 29
35743: PUSH
35744: LD_VAR 0 30
35748: PUSH
35749: LD_VAR 0 31
35753: PUSH
35754: LD_VAR 0 32
35758: PUSH
35759: LD_VAR 0 33
35763: PUSH
35764: LD_VAR 0 34
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: PUSH
35777: LD_VAR 0 4
35781: PUSH
35782: LD_INT 1
35784: PLUS
35785: ARRAY
35786: ST_TO_ADDR
35787: GO 36272
35789: LD_INT 16
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35851
35795: LD_INT 17
35797: DOUBLE
35798: EQUAL
35799: IFTRUE 35851
35801: LD_INT 18
35803: DOUBLE
35804: EQUAL
35805: IFTRUE 35851
35807: LD_INT 19
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35851
35813: LD_INT 22
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35851
35819: LD_INT 20
35821: DOUBLE
35822: EQUAL
35823: IFTRUE 35851
35825: LD_INT 21
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35851
35831: LD_INT 23
35833: DOUBLE
35834: EQUAL
35835: IFTRUE 35851
35837: LD_INT 24
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35851
35843: LD_INT 25
35845: DOUBLE
35846: EQUAL
35847: IFTRUE 35851
35849: GO 35907
35851: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_VAR 0 35
35861: PUSH
35862: LD_VAR 0 36
35866: PUSH
35867: LD_VAR 0 37
35871: PUSH
35872: LD_VAR 0 38
35876: PUSH
35877: LD_VAR 0 39
35881: PUSH
35882: LD_VAR 0 40
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: PUSH
35895: LD_VAR 0 4
35899: PUSH
35900: LD_INT 1
35902: PLUS
35903: ARRAY
35904: ST_TO_ADDR
35905: GO 36272
35907: LD_INT 6
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35963
35913: LD_INT 7
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35963
35919: LD_INT 8
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35963
35925: LD_INT 13
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35963
35931: LD_INT 12
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35963
35937: LD_INT 15
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35963
35943: LD_INT 11
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35963
35949: LD_INT 14
35951: DOUBLE
35952: EQUAL
35953: IFTRUE 35963
35955: LD_INT 10
35957: DOUBLE
35958: EQUAL
35959: IFTRUE 35963
35961: GO 36019
35963: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35964: LD_ADDR_VAR 0 9
35968: PUSH
35969: LD_VAR 0 41
35973: PUSH
35974: LD_VAR 0 42
35978: PUSH
35979: LD_VAR 0 43
35983: PUSH
35984: LD_VAR 0 44
35988: PUSH
35989: LD_VAR 0 45
35993: PUSH
35994: LD_VAR 0 46
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: PUSH
36007: LD_VAR 0 4
36011: PUSH
36012: LD_INT 1
36014: PLUS
36015: ARRAY
36016: ST_TO_ADDR
36017: GO 36272
36019: LD_INT 36
36021: DOUBLE
36022: EQUAL
36023: IFTRUE 36027
36025: GO 36083
36027: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36028: LD_ADDR_VAR 0 9
36032: PUSH
36033: LD_VAR 0 47
36037: PUSH
36038: LD_VAR 0 48
36042: PUSH
36043: LD_VAR 0 49
36047: PUSH
36048: LD_VAR 0 50
36052: PUSH
36053: LD_VAR 0 51
36057: PUSH
36058: LD_VAR 0 52
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: PUSH
36071: LD_VAR 0 4
36075: PUSH
36076: LD_INT 1
36078: PLUS
36079: ARRAY
36080: ST_TO_ADDR
36081: GO 36272
36083: LD_INT 4
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36109
36089: LD_INT 5
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36109
36095: LD_INT 34
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36109
36101: LD_INT 37
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36109
36107: GO 36165
36109: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36110: LD_ADDR_VAR 0 9
36114: PUSH
36115: LD_VAR 0 53
36119: PUSH
36120: LD_VAR 0 54
36124: PUSH
36125: LD_VAR 0 55
36129: PUSH
36130: LD_VAR 0 56
36134: PUSH
36135: LD_VAR 0 57
36139: PUSH
36140: LD_VAR 0 58
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: PUSH
36153: LD_VAR 0 4
36157: PUSH
36158: LD_INT 1
36160: PLUS
36161: ARRAY
36162: ST_TO_ADDR
36163: GO 36272
36165: LD_INT 31
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36215
36171: LD_INT 32
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36215
36177: LD_INT 33
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36215
36183: LD_INT 27
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36215
36189: LD_INT 26
36191: DOUBLE
36192: EQUAL
36193: IFTRUE 36215
36195: LD_INT 28
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36215
36201: LD_INT 29
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36215
36207: LD_INT 30
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36215
36213: GO 36271
36215: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: LD_VAR 0 59
36225: PUSH
36226: LD_VAR 0 60
36230: PUSH
36231: LD_VAR 0 61
36235: PUSH
36236: LD_VAR 0 62
36240: PUSH
36241: LD_VAR 0 63
36245: PUSH
36246: LD_VAR 0 64
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: PUSH
36259: LD_VAR 0 4
36263: PUSH
36264: LD_INT 1
36266: PLUS
36267: ARRAY
36268: ST_TO_ADDR
36269: GO 36272
36271: POP
// temp_list2 = [ ] ;
36272: LD_ADDR_VAR 0 10
36276: PUSH
36277: EMPTY
36278: ST_TO_ADDR
// for i in temp_list do
36279: LD_ADDR_VAR 0 8
36283: PUSH
36284: LD_VAR 0 9
36288: PUSH
36289: FOR_IN
36290: IFFALSE 36342
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36292: LD_ADDR_VAR 0 10
36296: PUSH
36297: LD_VAR 0 10
36301: PUSH
36302: LD_VAR 0 8
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: PUSH
36311: LD_VAR 0 2
36315: PLUS
36316: PUSH
36317: LD_VAR 0 8
36321: PUSH
36322: LD_INT 2
36324: ARRAY
36325: PUSH
36326: LD_VAR 0 3
36330: PLUS
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: EMPTY
36337: LIST
36338: ADD
36339: ST_TO_ADDR
36340: GO 36289
36342: POP
36343: POP
// result = temp_list2 ;
36344: LD_ADDR_VAR 0 7
36348: PUSH
36349: LD_VAR 0 10
36353: ST_TO_ADDR
// end ;
36354: LD_VAR 0 7
36358: RET
// export function EnemyInRange ( unit , dist ) ; begin
36359: LD_INT 0
36361: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_VAR 0 1
36371: PPUSH
36372: CALL_OW 255
36376: PPUSH
36377: LD_VAR 0 1
36381: PPUSH
36382: CALL_OW 250
36386: PPUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL_OW 251
36396: PPUSH
36397: LD_VAR 0 2
36401: PPUSH
36402: CALL 9616 0 4
36406: PUSH
36407: LD_INT 4
36409: ARRAY
36410: ST_TO_ADDR
// end ;
36411: LD_VAR 0 3
36415: RET
// export function PlayerSeeMe ( unit ) ; begin
36416: LD_INT 0
36418: PPUSH
// result := See ( your_side , unit ) ;
36419: LD_ADDR_VAR 0 2
36423: PUSH
36424: LD_OWVAR 2
36428: PPUSH
36429: LD_VAR 0 1
36433: PPUSH
36434: CALL_OW 292
36438: ST_TO_ADDR
// end ;
36439: LD_VAR 0 2
36443: RET
// export function ReverseDir ( unit ) ; begin
36444: LD_INT 0
36446: PPUSH
// if not unit then
36447: LD_VAR 0 1
36451: NOT
36452: IFFALSE 36456
// exit ;
36454: GO 36479
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36456: LD_ADDR_VAR 0 2
36460: PUSH
36461: LD_VAR 0 1
36465: PPUSH
36466: CALL_OW 254
36470: PUSH
36471: LD_INT 3
36473: PLUS
36474: PUSH
36475: LD_INT 6
36477: MOD
36478: ST_TO_ADDR
// end ;
36479: LD_VAR 0 2
36483: RET
// export function ReverseArray ( array ) ; var i ; begin
36484: LD_INT 0
36486: PPUSH
36487: PPUSH
// if not array then
36488: LD_VAR 0 1
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36552
// result := [ ] ;
36497: LD_ADDR_VAR 0 2
36501: PUSH
36502: EMPTY
36503: ST_TO_ADDR
// for i := array downto 1 do
36504: LD_ADDR_VAR 0 3
36508: PUSH
36509: DOUBLE
36510: LD_VAR 0 1
36514: INC
36515: ST_TO_ADDR
36516: LD_INT 1
36518: PUSH
36519: FOR_DOWNTO
36520: IFFALSE 36550
// result := Join ( result , array [ i ] ) ;
36522: LD_ADDR_VAR 0 2
36526: PUSH
36527: LD_VAR 0 2
36531: PPUSH
36532: LD_VAR 0 1
36536: PUSH
36537: LD_VAR 0 3
36541: ARRAY
36542: PPUSH
36543: CALL 41394 0 2
36547: ST_TO_ADDR
36548: GO 36519
36550: POP
36551: POP
// end ;
36552: LD_VAR 0 2
36556: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36557: LD_INT 0
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
// if not unit or not hexes then
36565: LD_VAR 0 1
36569: NOT
36570: IFTRUE 36579
36572: PUSH
36573: LD_VAR 0 2
36577: NOT
36578: OR
36579: IFFALSE 36583
// exit ;
36581: GO 36706
// dist := 9999 ;
36583: LD_ADDR_VAR 0 5
36587: PUSH
36588: LD_INT 9999
36590: ST_TO_ADDR
// for i = 1 to hexes do
36591: LD_ADDR_VAR 0 4
36595: PUSH
36596: DOUBLE
36597: LD_INT 1
36599: DEC
36600: ST_TO_ADDR
36601: LD_VAR 0 2
36605: PUSH
36606: FOR_TO
36607: IFFALSE 36694
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36609: LD_ADDR_VAR 0 6
36613: PUSH
36614: LD_VAR 0 1
36618: PPUSH
36619: LD_VAR 0 2
36623: PUSH
36624: LD_VAR 0 4
36628: ARRAY
36629: PUSH
36630: LD_INT 1
36632: ARRAY
36633: PPUSH
36634: LD_VAR 0 2
36638: PUSH
36639: LD_VAR 0 4
36643: ARRAY
36644: PUSH
36645: LD_INT 2
36647: ARRAY
36648: PPUSH
36649: CALL_OW 297
36653: ST_TO_ADDR
// if tdist < dist then
36654: LD_VAR 0 6
36658: PUSH
36659: LD_VAR 0 5
36663: LESS
36664: IFFALSE 36692
// begin hex := hexes [ i ] ;
36666: LD_ADDR_VAR 0 8
36670: PUSH
36671: LD_VAR 0 2
36675: PUSH
36676: LD_VAR 0 4
36680: ARRAY
36681: ST_TO_ADDR
// dist := tdist ;
36682: LD_ADDR_VAR 0 5
36686: PUSH
36687: LD_VAR 0 6
36691: ST_TO_ADDR
// end ; end ;
36692: GO 36606
36694: POP
36695: POP
// result := hex ;
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_VAR 0 8
36705: ST_TO_ADDR
// end ;
36706: LD_VAR 0 3
36710: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36715: LD_VAR 0 1
36719: NOT
36720: IFTRUE 36759
36722: PUSH
36723: LD_VAR 0 1
36727: PUSH
36728: LD_INT 21
36730: PUSH
36731: LD_INT 2
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 23
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PPUSH
36752: CALL_OW 69
36756: IN
36757: NOT
36758: OR
36759: IFFALSE 36763
// exit ;
36761: GO 36810
// for i = 1 to 3 do
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: DOUBLE
36769: LD_INT 1
36771: DEC
36772: ST_TO_ADDR
36773: LD_INT 3
36775: PUSH
36776: FOR_TO
36777: IFFALSE 36808
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 250
36788: PPUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 251
36798: PPUSH
36799: LD_INT 1
36801: PPUSH
36802: CALL_OW 453
36806: GO 36776
36808: POP
36809: POP
// end ;
36810: LD_VAR 0 2
36814: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36815: LD_INT 0
36817: PPUSH
36818: PPUSH
36819: PPUSH
36820: PPUSH
36821: PPUSH
36822: PPUSH
// if not unit or not enemy_unit then
36823: LD_VAR 0 1
36827: NOT
36828: IFTRUE 36837
36830: PUSH
36831: LD_VAR 0 2
36835: NOT
36836: OR
36837: IFFALSE 36841
// exit ;
36839: GO 37312
// if GetLives ( i ) < 250 then
36841: LD_VAR 0 4
36845: PPUSH
36846: CALL_OW 256
36850: PUSH
36851: LD_INT 250
36853: LESS
36854: IFFALSE 36867
// begin ComAutodestruct ( i ) ;
36856: LD_VAR 0 4
36860: PPUSH
36861: CALL 36711 0 1
// exit ;
36865: GO 37312
// end ; x := GetX ( enemy_unit ) ;
36867: LD_ADDR_VAR 0 7
36871: PUSH
36872: LD_VAR 0 2
36876: PPUSH
36877: CALL_OW 250
36881: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36882: LD_ADDR_VAR 0 8
36886: PUSH
36887: LD_VAR 0 2
36891: PPUSH
36892: CALL_OW 251
36896: ST_TO_ADDR
// if not x or not y then
36897: LD_VAR 0 7
36901: NOT
36902: IFTRUE 36911
36904: PUSH
36905: LD_VAR 0 8
36909: NOT
36910: OR
36911: IFFALSE 36915
// exit ;
36913: GO 37312
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36915: LD_ADDR_VAR 0 6
36919: PUSH
36920: LD_VAR 0 7
36924: PPUSH
36925: LD_INT 0
36927: PPUSH
36928: LD_INT 4
36930: PPUSH
36931: CALL_OW 272
36935: PUSH
36936: LD_VAR 0 8
36940: PPUSH
36941: LD_INT 0
36943: PPUSH
36944: LD_INT 4
36946: PPUSH
36947: CALL_OW 273
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_VAR 0 7
36960: PPUSH
36961: LD_INT 1
36963: PPUSH
36964: LD_INT 4
36966: PPUSH
36967: CALL_OW 272
36971: PUSH
36972: LD_VAR 0 8
36976: PPUSH
36977: LD_INT 1
36979: PPUSH
36980: LD_INT 4
36982: PPUSH
36983: CALL_OW 273
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_VAR 0 7
36996: PPUSH
36997: LD_INT 2
36999: PPUSH
37000: LD_INT 4
37002: PPUSH
37003: CALL_OW 272
37007: PUSH
37008: LD_VAR 0 8
37012: PPUSH
37013: LD_INT 2
37015: PPUSH
37016: LD_INT 4
37018: PPUSH
37019: CALL_OW 273
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_VAR 0 7
37032: PPUSH
37033: LD_INT 3
37035: PPUSH
37036: LD_INT 4
37038: PPUSH
37039: CALL_OW 272
37043: PUSH
37044: LD_VAR 0 8
37048: PPUSH
37049: LD_INT 3
37051: PPUSH
37052: LD_INT 4
37054: PPUSH
37055: CALL_OW 273
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_VAR 0 7
37068: PPUSH
37069: LD_INT 4
37071: PPUSH
37072: LD_INT 4
37074: PPUSH
37075: CALL_OW 272
37079: PUSH
37080: LD_VAR 0 8
37084: PPUSH
37085: LD_INT 4
37087: PPUSH
37088: LD_INT 4
37090: PPUSH
37091: CALL_OW 273
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_VAR 0 7
37104: PPUSH
37105: LD_INT 5
37107: PPUSH
37108: LD_INT 4
37110: PPUSH
37111: CALL_OW 272
37115: PUSH
37116: LD_VAR 0 8
37120: PPUSH
37121: LD_INT 5
37123: PPUSH
37124: LD_INT 4
37126: PPUSH
37127: CALL_OW 273
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// for i = tmp downto 1 do
37144: LD_ADDR_VAR 0 4
37148: PUSH
37149: DOUBLE
37150: LD_VAR 0 6
37154: INC
37155: ST_TO_ADDR
37156: LD_INT 1
37158: PUSH
37159: FOR_DOWNTO
37160: IFFALSE 37263
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37162: LD_VAR 0 6
37166: PUSH
37167: LD_VAR 0 4
37171: ARRAY
37172: PUSH
37173: LD_INT 1
37175: ARRAY
37176: PPUSH
37177: LD_VAR 0 6
37181: PUSH
37182: LD_VAR 0 4
37186: ARRAY
37187: PUSH
37188: LD_INT 2
37190: ARRAY
37191: PPUSH
37192: CALL_OW 488
37196: NOT
37197: IFTRUE 37239
37199: PUSH
37200: LD_VAR 0 6
37204: PUSH
37205: LD_VAR 0 4
37209: ARRAY
37210: PUSH
37211: LD_INT 1
37213: ARRAY
37214: PPUSH
37215: LD_VAR 0 6
37219: PUSH
37220: LD_VAR 0 4
37224: ARRAY
37225: PUSH
37226: LD_INT 2
37228: ARRAY
37229: PPUSH
37230: CALL_OW 428
37234: PUSH
37235: LD_INT 0
37237: NONEQUAL
37238: OR
37239: IFFALSE 37261
// tmp := Delete ( tmp , i ) ;
37241: LD_ADDR_VAR 0 6
37245: PUSH
37246: LD_VAR 0 6
37250: PPUSH
37251: LD_VAR 0 4
37255: PPUSH
37256: CALL_OW 3
37260: ST_TO_ADDR
37261: GO 37159
37263: POP
37264: POP
// j := GetClosestHex ( unit , tmp ) ;
37265: LD_ADDR_VAR 0 5
37269: PUSH
37270: LD_VAR 0 1
37274: PPUSH
37275: LD_VAR 0 6
37279: PPUSH
37280: CALL 36557 0 2
37284: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37285: LD_VAR 0 1
37289: PPUSH
37290: LD_VAR 0 5
37294: PUSH
37295: LD_INT 1
37297: ARRAY
37298: PPUSH
37299: LD_VAR 0 5
37303: PUSH
37304: LD_INT 2
37306: ARRAY
37307: PPUSH
37308: CALL_OW 111
// end ;
37312: LD_VAR 0 3
37316: RET
// export function PrepareApemanSoldier ( ) ; begin
37317: LD_INT 0
37319: PPUSH
// uc_nation := 0 ;
37320: LD_ADDR_OWVAR 21
37324: PUSH
37325: LD_INT 0
37327: ST_TO_ADDR
// hc_sex := sex_male ;
37328: LD_ADDR_OWVAR 27
37332: PUSH
37333: LD_INT 1
37335: ST_TO_ADDR
// hc_name :=  ;
37336: LD_ADDR_OWVAR 26
37340: PUSH
37341: LD_STRING 
37343: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37344: LD_ADDR_OWVAR 28
37348: PUSH
37349: LD_INT 15
37351: ST_TO_ADDR
// hc_gallery :=  ;
37352: LD_ADDR_OWVAR 33
37356: PUSH
37357: LD_STRING 
37359: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37360: LD_ADDR_OWVAR 31
37364: PUSH
37365: LD_INT 0
37367: PPUSH
37368: LD_INT 3
37370: PPUSH
37371: CALL_OW 12
37375: PUSH
37376: LD_INT 0
37378: PPUSH
37379: LD_INT 3
37381: PPUSH
37382: CALL_OW 12
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37399: LD_ADDR_OWVAR 29
37403: PUSH
37404: LD_INT 12
37406: PUSH
37407: LD_INT 12
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// end ;
37414: LD_VAR 0 1
37418: RET
// export function PrepareApemanEngineer ( ) ; begin
37419: LD_INT 0
37421: PPUSH
// uc_nation := 0 ;
37422: LD_ADDR_OWVAR 21
37426: PUSH
37427: LD_INT 0
37429: ST_TO_ADDR
// hc_sex := sex_male ;
37430: LD_ADDR_OWVAR 27
37434: PUSH
37435: LD_INT 1
37437: ST_TO_ADDR
// hc_name :=  ;
37438: LD_ADDR_OWVAR 26
37442: PUSH
37443: LD_STRING 
37445: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37446: LD_ADDR_OWVAR 28
37450: PUSH
37451: LD_INT 16
37453: ST_TO_ADDR
// hc_gallery :=  ;
37454: LD_ADDR_OWVAR 33
37458: PUSH
37459: LD_STRING 
37461: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37462: LD_ADDR_OWVAR 31
37466: PUSH
37467: LD_INT 0
37469: PPUSH
37470: LD_INT 3
37472: PPUSH
37473: CALL_OW 12
37477: PUSH
37478: LD_INT 0
37480: PPUSH
37481: LD_INT 3
37483: PPUSH
37484: CALL_OW 12
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37501: LD_ADDR_OWVAR 29
37505: PUSH
37506: LD_INT 12
37508: PUSH
37509: LD_INT 12
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 1
37520: RET
// export function PrepareApeman ( agressivity ) ; begin
37521: LD_INT 0
37523: PPUSH
// uc_side := 0 ;
37524: LD_ADDR_OWVAR 20
37528: PUSH
37529: LD_INT 0
37531: ST_TO_ADDR
// uc_nation := 0 ;
37532: LD_ADDR_OWVAR 21
37536: PUSH
37537: LD_INT 0
37539: ST_TO_ADDR
// hc_sex := sex_male ;
37540: LD_ADDR_OWVAR 27
37544: PUSH
37545: LD_INT 1
37547: ST_TO_ADDR
// hc_class := class_apeman ;
37548: LD_ADDR_OWVAR 28
37552: PUSH
37553: LD_INT 12
37555: ST_TO_ADDR
// hc_gallery :=  ;
37556: LD_ADDR_OWVAR 33
37560: PUSH
37561: LD_STRING 
37563: ST_TO_ADDR
// hc_name :=  ;
37564: LD_ADDR_OWVAR 26
37568: PUSH
37569: LD_STRING 
37571: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37572: LD_ADDR_OWVAR 29
37576: PUSH
37577: LD_INT 12
37579: PUSH
37580: LD_INT 12
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// if agressivity = 0 then
37587: LD_VAR 0 1
37591: PUSH
37592: LD_INT 0
37594: EQUAL
37595: IFFALSE 37607
// hc_agressivity := 0 else
37597: LD_ADDR_OWVAR 35
37601: PUSH
37602: LD_INT 0
37604: ST_TO_ADDR
37605: GO 37628
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37607: LD_ADDR_OWVAR 35
37611: PUSH
37612: LD_VAR 0 1
37616: NEG
37617: PPUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 12
37627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37628: LD_ADDR_OWVAR 31
37632: PUSH
37633: LD_INT 0
37635: PPUSH
37636: LD_INT 3
37638: PPUSH
37639: CALL_OW 12
37643: PUSH
37644: LD_INT 0
37646: PPUSH
37647: LD_INT 3
37649: PPUSH
37650: CALL_OW 12
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: ST_TO_ADDR
// end ;
37667: LD_VAR 0 2
37671: RET
// export function PrepareTiger ( agressivity ) ; begin
37672: LD_INT 0
37674: PPUSH
// uc_side := 0 ;
37675: LD_ADDR_OWVAR 20
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
// uc_nation := 0 ;
37683: LD_ADDR_OWVAR 21
37687: PUSH
37688: LD_INT 0
37690: ST_TO_ADDR
// InitHc ;
37691: CALL_OW 19
// hc_class := class_tiger ;
37695: LD_ADDR_OWVAR 28
37699: PUSH
37700: LD_INT 14
37702: ST_TO_ADDR
// hc_gallery :=  ;
37703: LD_ADDR_OWVAR 33
37707: PUSH
37708: LD_STRING 
37710: ST_TO_ADDR
// hc_name :=  ;
37711: LD_ADDR_OWVAR 26
37715: PUSH
37716: LD_STRING 
37718: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37719: LD_ADDR_OWVAR 35
37723: PUSH
37724: LD_VAR 0 1
37728: NEG
37729: PPUSH
37730: LD_VAR 0 1
37734: PPUSH
37735: CALL_OW 12
37739: ST_TO_ADDR
// end ;
37740: LD_VAR 0 2
37744: RET
// export function PrepareEnchidna ( ) ; begin
37745: LD_INT 0
37747: PPUSH
// uc_side := 0 ;
37748: LD_ADDR_OWVAR 20
37752: PUSH
37753: LD_INT 0
37755: ST_TO_ADDR
// uc_nation := 0 ;
37756: LD_ADDR_OWVAR 21
37760: PUSH
37761: LD_INT 0
37763: ST_TO_ADDR
// InitHc ;
37764: CALL_OW 19
// hc_class := class_baggie ;
37768: LD_ADDR_OWVAR 28
37772: PUSH
37773: LD_INT 13
37775: ST_TO_ADDR
// hc_gallery :=  ;
37776: LD_ADDR_OWVAR 33
37780: PUSH
37781: LD_STRING 
37783: ST_TO_ADDR
// hc_name :=  ;
37784: LD_ADDR_OWVAR 26
37788: PUSH
37789: LD_STRING 
37791: ST_TO_ADDR
// end ;
37792: LD_VAR 0 1
37796: RET
// export function PrepareFrog ( ) ; begin
37797: LD_INT 0
37799: PPUSH
// uc_side := 0 ;
37800: LD_ADDR_OWVAR 20
37804: PUSH
37805: LD_INT 0
37807: ST_TO_ADDR
// uc_nation := 0 ;
37808: LD_ADDR_OWVAR 21
37812: PUSH
37813: LD_INT 0
37815: ST_TO_ADDR
// InitHc ;
37816: CALL_OW 19
// hc_class := class_frog ;
37820: LD_ADDR_OWVAR 28
37824: PUSH
37825: LD_INT 19
37827: ST_TO_ADDR
// hc_gallery :=  ;
37828: LD_ADDR_OWVAR 33
37832: PUSH
37833: LD_STRING 
37835: ST_TO_ADDR
// hc_name :=  ;
37836: LD_ADDR_OWVAR 26
37840: PUSH
37841: LD_STRING 
37843: ST_TO_ADDR
// end ;
37844: LD_VAR 0 1
37848: RET
// export function PrepareFish ( ) ; begin
37849: LD_INT 0
37851: PPUSH
// uc_side := 0 ;
37852: LD_ADDR_OWVAR 20
37856: PUSH
37857: LD_INT 0
37859: ST_TO_ADDR
// uc_nation := 0 ;
37860: LD_ADDR_OWVAR 21
37864: PUSH
37865: LD_INT 0
37867: ST_TO_ADDR
// InitHc ;
37868: CALL_OW 19
// hc_class := class_fish ;
37872: LD_ADDR_OWVAR 28
37876: PUSH
37877: LD_INT 20
37879: ST_TO_ADDR
// hc_gallery :=  ;
37880: LD_ADDR_OWVAR 33
37884: PUSH
37885: LD_STRING 
37887: ST_TO_ADDR
// hc_name :=  ;
37888: LD_ADDR_OWVAR 26
37892: PUSH
37893: LD_STRING 
37895: ST_TO_ADDR
// end ;
37896: LD_VAR 0 1
37900: RET
// export function PrepareBird ( ) ; begin
37901: LD_INT 0
37903: PPUSH
// uc_side := 0 ;
37904: LD_ADDR_OWVAR 20
37908: PUSH
37909: LD_INT 0
37911: ST_TO_ADDR
// uc_nation := 0 ;
37912: LD_ADDR_OWVAR 21
37916: PUSH
37917: LD_INT 0
37919: ST_TO_ADDR
// InitHc ;
37920: CALL_OW 19
// hc_class := class_phororhacos ;
37924: LD_ADDR_OWVAR 28
37928: PUSH
37929: LD_INT 18
37931: ST_TO_ADDR
// hc_gallery :=  ;
37932: LD_ADDR_OWVAR 33
37936: PUSH
37937: LD_STRING 
37939: ST_TO_ADDR
// hc_name :=  ;
37940: LD_ADDR_OWVAR 26
37944: PUSH
37945: LD_STRING 
37947: ST_TO_ADDR
// end ;
37948: LD_VAR 0 1
37952: RET
// export function PrepareHorse ( ) ; begin
37953: LD_INT 0
37955: PPUSH
// uc_side := 0 ;
37956: LD_ADDR_OWVAR 20
37960: PUSH
37961: LD_INT 0
37963: ST_TO_ADDR
// uc_nation := 0 ;
37964: LD_ADDR_OWVAR 21
37968: PUSH
37969: LD_INT 0
37971: ST_TO_ADDR
// InitHc ;
37972: CALL_OW 19
// hc_class := class_horse ;
37976: LD_ADDR_OWVAR 28
37980: PUSH
37981: LD_INT 21
37983: ST_TO_ADDR
// hc_gallery :=  ;
37984: LD_ADDR_OWVAR 33
37988: PUSH
37989: LD_STRING 
37991: ST_TO_ADDR
// hc_name :=  ;
37992: LD_ADDR_OWVAR 26
37996: PUSH
37997: LD_STRING 
37999: ST_TO_ADDR
// end ;
38000: LD_VAR 0 1
38004: RET
// export function PrepareMastodont ( ) ; begin
38005: LD_INT 0
38007: PPUSH
// uc_side := 0 ;
38008: LD_ADDR_OWVAR 20
38012: PUSH
38013: LD_INT 0
38015: ST_TO_ADDR
// uc_nation := 0 ;
38016: LD_ADDR_OWVAR 21
38020: PUSH
38021: LD_INT 0
38023: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38024: LD_ADDR_OWVAR 37
38028: PUSH
38029: LD_INT 31
38031: ST_TO_ADDR
// vc_control := control_rider ;
38032: LD_ADDR_OWVAR 38
38036: PUSH
38037: LD_INT 4
38039: ST_TO_ADDR
// end ;
38040: LD_VAR 0 1
38044: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38045: LD_INT 0
38047: PPUSH
38048: PPUSH
38049: PPUSH
// uc_side = 0 ;
38050: LD_ADDR_OWVAR 20
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
// uc_nation = 0 ;
38058: LD_ADDR_OWVAR 21
38062: PUSH
38063: LD_INT 0
38065: ST_TO_ADDR
// InitHc_All ( ) ;
38066: CALL_OW 584
// InitVc ;
38070: CALL_OW 20
// if mastodonts then
38074: LD_VAR 0 6
38078: IFFALSE 38145
// for i = 1 to mastodonts do
38080: LD_ADDR_VAR 0 11
38084: PUSH
38085: DOUBLE
38086: LD_INT 1
38088: DEC
38089: ST_TO_ADDR
38090: LD_VAR 0 6
38094: PUSH
38095: FOR_TO
38096: IFFALSE 38143
// begin vc_chassis := 31 ;
38098: LD_ADDR_OWVAR 37
38102: PUSH
38103: LD_INT 31
38105: ST_TO_ADDR
// vc_control := control_rider ;
38106: LD_ADDR_OWVAR 38
38110: PUSH
38111: LD_INT 4
38113: ST_TO_ADDR
// animal := CreateVehicle ;
38114: LD_ADDR_VAR 0 12
38118: PUSH
38119: CALL_OW 45
38123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38124: LD_VAR 0 12
38128: PPUSH
38129: LD_VAR 0 8
38133: PPUSH
38134: LD_INT 0
38136: PPUSH
38137: CALL 40287 0 3
// end ;
38141: GO 38095
38143: POP
38144: POP
// if horses then
38145: LD_VAR 0 5
38149: IFFALSE 38216
// for i = 1 to horses do
38151: LD_ADDR_VAR 0 11
38155: PUSH
38156: DOUBLE
38157: LD_INT 1
38159: DEC
38160: ST_TO_ADDR
38161: LD_VAR 0 5
38165: PUSH
38166: FOR_TO
38167: IFFALSE 38214
// begin hc_class := 21 ;
38169: LD_ADDR_OWVAR 28
38173: PUSH
38174: LD_INT 21
38176: ST_TO_ADDR
// hc_gallery :=  ;
38177: LD_ADDR_OWVAR 33
38181: PUSH
38182: LD_STRING 
38184: ST_TO_ADDR
// animal := CreateHuman ;
38185: LD_ADDR_VAR 0 12
38189: PUSH
38190: CALL_OW 44
38194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38195: LD_VAR 0 12
38199: PPUSH
38200: LD_VAR 0 8
38204: PPUSH
38205: LD_INT 0
38207: PPUSH
38208: CALL 40287 0 3
// end ;
38212: GO 38166
38214: POP
38215: POP
// if birds then
38216: LD_VAR 0 1
38220: IFFALSE 38287
// for i = 1 to birds do
38222: LD_ADDR_VAR 0 11
38226: PUSH
38227: DOUBLE
38228: LD_INT 1
38230: DEC
38231: ST_TO_ADDR
38232: LD_VAR 0 1
38236: PUSH
38237: FOR_TO
38238: IFFALSE 38285
// begin hc_class := 18 ;
38240: LD_ADDR_OWVAR 28
38244: PUSH
38245: LD_INT 18
38247: ST_TO_ADDR
// hc_gallery =  ;
38248: LD_ADDR_OWVAR 33
38252: PUSH
38253: LD_STRING 
38255: ST_TO_ADDR
// animal := CreateHuman ;
38256: LD_ADDR_VAR 0 12
38260: PUSH
38261: CALL_OW 44
38265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38266: LD_VAR 0 12
38270: PPUSH
38271: LD_VAR 0 8
38275: PPUSH
38276: LD_INT 0
38278: PPUSH
38279: CALL 40287 0 3
// end ;
38283: GO 38237
38285: POP
38286: POP
// if tigers then
38287: LD_VAR 0 2
38291: IFFALSE 38375
// for i = 1 to tigers do
38293: LD_ADDR_VAR 0 11
38297: PUSH
38298: DOUBLE
38299: LD_INT 1
38301: DEC
38302: ST_TO_ADDR
38303: LD_VAR 0 2
38307: PUSH
38308: FOR_TO
38309: IFFALSE 38373
// begin hc_class = class_tiger ;
38311: LD_ADDR_OWVAR 28
38315: PUSH
38316: LD_INT 14
38318: ST_TO_ADDR
// hc_gallery =  ;
38319: LD_ADDR_OWVAR 33
38323: PUSH
38324: LD_STRING 
38326: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38327: LD_ADDR_OWVAR 35
38331: PUSH
38332: LD_INT 7
38334: NEG
38335: PPUSH
38336: LD_INT 7
38338: PPUSH
38339: CALL_OW 12
38343: ST_TO_ADDR
// animal := CreateHuman ;
38344: LD_ADDR_VAR 0 12
38348: PUSH
38349: CALL_OW 44
38353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38354: LD_VAR 0 12
38358: PPUSH
38359: LD_VAR 0 8
38363: PPUSH
38364: LD_INT 0
38366: PPUSH
38367: CALL 40287 0 3
// end ;
38371: GO 38308
38373: POP
38374: POP
// if apemans then
38375: LD_VAR 0 3
38379: IFFALSE 38502
// for i = 1 to apemans do
38381: LD_ADDR_VAR 0 11
38385: PUSH
38386: DOUBLE
38387: LD_INT 1
38389: DEC
38390: ST_TO_ADDR
38391: LD_VAR 0 3
38395: PUSH
38396: FOR_TO
38397: IFFALSE 38500
// begin hc_class = class_apeman ;
38399: LD_ADDR_OWVAR 28
38403: PUSH
38404: LD_INT 12
38406: ST_TO_ADDR
// hc_gallery =  ;
38407: LD_ADDR_OWVAR 33
38411: PUSH
38412: LD_STRING 
38414: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38415: LD_ADDR_OWVAR 35
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PPUSH
38424: LD_INT 2
38426: PPUSH
38427: CALL_OW 12
38431: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38432: LD_ADDR_OWVAR 31
38436: PUSH
38437: LD_INT 1
38439: PPUSH
38440: LD_INT 3
38442: PPUSH
38443: CALL_OW 12
38447: PUSH
38448: LD_INT 1
38450: PPUSH
38451: LD_INT 3
38453: PPUSH
38454: CALL_OW 12
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// animal := CreateHuman ;
38471: LD_ADDR_VAR 0 12
38475: PUSH
38476: CALL_OW 44
38480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38481: LD_VAR 0 12
38485: PPUSH
38486: LD_VAR 0 8
38490: PPUSH
38491: LD_INT 0
38493: PPUSH
38494: CALL 40287 0 3
// end ;
38498: GO 38396
38500: POP
38501: POP
// if enchidnas then
38502: LD_VAR 0 4
38506: IFFALSE 38573
// for i = 1 to enchidnas do
38508: LD_ADDR_VAR 0 11
38512: PUSH
38513: DOUBLE
38514: LD_INT 1
38516: DEC
38517: ST_TO_ADDR
38518: LD_VAR 0 4
38522: PUSH
38523: FOR_TO
38524: IFFALSE 38571
// begin hc_class = 13 ;
38526: LD_ADDR_OWVAR 28
38530: PUSH
38531: LD_INT 13
38533: ST_TO_ADDR
// hc_gallery =  ;
38534: LD_ADDR_OWVAR 33
38538: PUSH
38539: LD_STRING 
38541: ST_TO_ADDR
// animal := CreateHuman ;
38542: LD_ADDR_VAR 0 12
38546: PUSH
38547: CALL_OW 44
38551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38552: LD_VAR 0 12
38556: PPUSH
38557: LD_VAR 0 8
38561: PPUSH
38562: LD_INT 0
38564: PPUSH
38565: CALL 40287 0 3
// end ;
38569: GO 38523
38571: POP
38572: POP
// if fishes then
38573: LD_VAR 0 7
38577: IFFALSE 38644
// for i = 1 to fishes do
38579: LD_ADDR_VAR 0 11
38583: PUSH
38584: DOUBLE
38585: LD_INT 1
38587: DEC
38588: ST_TO_ADDR
38589: LD_VAR 0 7
38593: PUSH
38594: FOR_TO
38595: IFFALSE 38642
// begin hc_class = 20 ;
38597: LD_ADDR_OWVAR 28
38601: PUSH
38602: LD_INT 20
38604: ST_TO_ADDR
// hc_gallery =  ;
38605: LD_ADDR_OWVAR 33
38609: PUSH
38610: LD_STRING 
38612: ST_TO_ADDR
// animal := CreateHuman ;
38613: LD_ADDR_VAR 0 12
38617: PUSH
38618: CALL_OW 44
38622: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38623: LD_VAR 0 12
38627: PPUSH
38628: LD_VAR 0 9
38632: PPUSH
38633: LD_INT 0
38635: PPUSH
38636: CALL 40287 0 3
// end ;
38640: GO 38594
38642: POP
38643: POP
// end ;
38644: LD_VAR 0 10
38648: RET
// export function WantHeal ( sci , unit ) ; begin
38649: LD_INT 0
38651: PPUSH
// if GetTaskList ( sci ) > 0 then
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 437
38661: PUSH
38662: LD_INT 0
38664: GREATER
38665: IFFALSE 38737
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 437
38676: PUSH
38677: LD_INT 1
38679: ARRAY
38680: PUSH
38681: LD_INT 1
38683: ARRAY
38684: PUSH
38685: LD_STRING l
38687: EQUAL
38688: IFFALSE 38715
38690: PUSH
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL_OW 437
38700: PUSH
38701: LD_INT 1
38703: ARRAY
38704: PUSH
38705: LD_INT 4
38707: ARRAY
38708: PUSH
38709: LD_VAR 0 2
38713: EQUAL
38714: AND
38715: IFFALSE 38727
// result := true else
38717: LD_ADDR_VAR 0 3
38721: PUSH
38722: LD_INT 1
38724: ST_TO_ADDR
38725: GO 38735
// result := false ;
38727: LD_ADDR_VAR 0 3
38731: PUSH
38732: LD_INT 0
38734: ST_TO_ADDR
// end else
38735: GO 38745
// result := false ;
38737: LD_ADDR_VAR 0 3
38741: PUSH
38742: LD_INT 0
38744: ST_TO_ADDR
// end ;
38745: LD_VAR 0 3
38749: RET
// export function HealTarget ( sci ) ; begin
38750: LD_INT 0
38752: PPUSH
// if not sci then
38753: LD_VAR 0 1
38757: NOT
38758: IFFALSE 38762
// exit ;
38760: GO 38827
// result := 0 ;
38762: LD_ADDR_VAR 0 2
38766: PUSH
38767: LD_INT 0
38769: ST_TO_ADDR
// if GetTaskList ( sci ) then
38770: LD_VAR 0 1
38774: PPUSH
38775: CALL_OW 437
38779: IFFALSE 38827
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 437
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: PUSH
38799: LD_STRING l
38801: EQUAL
38802: IFFALSE 38827
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38804: LD_ADDR_VAR 0 2
38808: PUSH
38809: LD_VAR 0 1
38813: PPUSH
38814: CALL_OW 437
38818: PUSH
38819: LD_INT 1
38821: ARRAY
38822: PUSH
38823: LD_INT 4
38825: ARRAY
38826: ST_TO_ADDR
// end ;
38827: LD_VAR 0 2
38831: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38832: LD_INT 0
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
// if not base_units then
38838: LD_VAR 0 1
38842: NOT
38843: IFFALSE 38847
// exit ;
38845: GO 38934
// result := false ;
38847: LD_ADDR_VAR 0 2
38851: PUSH
38852: LD_INT 0
38854: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38855: LD_ADDR_VAR 0 5
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: LD_INT 21
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PPUSH
38875: CALL_OW 72
38879: ST_TO_ADDR
// if not tmp then
38880: LD_VAR 0 5
38884: NOT
38885: IFFALSE 38889
// exit ;
38887: GO 38934
// for i in tmp do
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: LD_VAR 0 5
38898: PUSH
38899: FOR_IN
38900: IFFALSE 38932
// begin result := EnemyInRange ( i , 22 ) ;
38902: LD_ADDR_VAR 0 2
38906: PUSH
38907: LD_VAR 0 3
38911: PPUSH
38912: LD_INT 22
38914: PPUSH
38915: CALL 36359 0 2
38919: ST_TO_ADDR
// if result then
38920: LD_VAR 0 2
38924: IFFALSE 38930
// exit ;
38926: POP
38927: POP
38928: GO 38934
// end ;
38930: GO 38899
38932: POP
38933: POP
// end ;
38934: LD_VAR 0 2
38938: RET
// export function FilterByTag ( units , tag ) ; begin
38939: LD_INT 0
38941: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_VAR 0 1
38951: PPUSH
38952: LD_INT 120
38954: PUSH
38955: LD_VAR 0 2
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PPUSH
38964: CALL_OW 72
38968: ST_TO_ADDR
// end ;
38969: LD_VAR 0 3
38973: RET
// export function IsDriver ( un ) ; begin
38974: LD_INT 0
38976: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38977: LD_ADDR_VAR 0 2
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_INT 55
38989: PUSH
38990: EMPTY
38991: LIST
38992: PPUSH
38993: CALL_OW 69
38997: IN
38998: ST_TO_ADDR
// end ;
38999: LD_VAR 0 2
39003: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39004: LD_INT 0
39006: PPUSH
39007: PPUSH
// list := [ ] ;
39008: LD_ADDR_VAR 0 5
39012: PUSH
39013: EMPTY
39014: ST_TO_ADDR
// case d of 0 :
39015: LD_VAR 0 3
39019: PUSH
39020: LD_INT 0
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39028
39026: GO 39161
39028: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39029: LD_ADDR_VAR 0 5
39033: PUSH
39034: LD_VAR 0 1
39038: PUSH
39039: LD_INT 4
39041: MINUS
39042: PUSH
39043: LD_VAR 0 2
39047: PUSH
39048: LD_INT 4
39050: MINUS
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: PUSH
39060: LD_VAR 0 1
39064: PUSH
39065: LD_INT 3
39067: MINUS
39068: PUSH
39069: LD_VAR 0 2
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: PUSH
39082: LD_VAR 0 1
39086: PUSH
39087: LD_INT 4
39089: PLUS
39090: PUSH
39091: LD_VAR 0 2
39095: PUSH
39096: LD_INT 4
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: PUSH
39104: LD_VAR 0 1
39108: PUSH
39109: LD_INT 3
39111: PLUS
39112: PUSH
39113: LD_VAR 0 2
39117: PUSH
39118: LD_INT 3
39120: PLUS
39121: PUSH
39122: LD_INT 5
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: PUSH
39130: LD_VAR 0 1
39134: PUSH
39135: LD_VAR 0 2
39139: PUSH
39140: LD_INT 4
39142: PLUS
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: ST_TO_ADDR
// end ; 1 :
39159: GO 39859
39161: LD_INT 1
39163: DOUBLE
39164: EQUAL
39165: IFTRUE 39169
39167: GO 39302
39169: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39170: LD_ADDR_VAR 0 5
39174: PUSH
39175: LD_VAR 0 1
39179: PUSH
39180: LD_VAR 0 2
39184: PUSH
39185: LD_INT 4
39187: MINUS
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: PUSH
39197: LD_VAR 0 1
39201: PUSH
39202: LD_INT 3
39204: MINUS
39205: PUSH
39206: LD_VAR 0 2
39210: PUSH
39211: LD_INT 3
39213: MINUS
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: PUSH
39223: LD_VAR 0 1
39227: PUSH
39228: LD_INT 4
39230: MINUS
39231: PUSH
39232: LD_VAR 0 2
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: PUSH
39245: LD_VAR 0 1
39249: PUSH
39250: LD_VAR 0 2
39254: PUSH
39255: LD_INT 3
39257: PLUS
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: PUSH
39267: LD_VAR 0 1
39271: PUSH
39272: LD_INT 4
39274: PLUS
39275: PUSH
39276: LD_VAR 0 2
39280: PUSH
39281: LD_INT 4
39283: PLUS
39284: PUSH
39285: LD_INT 5
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// end ; 2 :
39300: GO 39859
39302: LD_INT 2
39304: DOUBLE
39305: EQUAL
39306: IFTRUE 39310
39308: GO 39439
39310: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 1
39320: PUSH
39321: LD_VAR 0 2
39325: PUSH
39326: LD_INT 3
39328: MINUS
39329: PUSH
39330: LD_INT 3
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: PUSH
39338: LD_VAR 0 1
39342: PUSH
39343: LD_INT 4
39345: PLUS
39346: PUSH
39347: LD_VAR 0 2
39351: PUSH
39352: LD_INT 4
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: PUSH
39360: LD_VAR 0 1
39364: PUSH
39365: LD_VAR 0 2
39369: PUSH
39370: LD_INT 4
39372: PLUS
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: PUSH
39382: LD_VAR 0 1
39386: PUSH
39387: LD_INT 3
39389: MINUS
39390: PUSH
39391: LD_VAR 0 2
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_INT 4
39411: MINUS
39412: PUSH
39413: LD_VAR 0 2
39417: PUSH
39418: LD_INT 4
39420: MINUS
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
// end ; 3 :
39437: GO 39859
39439: LD_INT 3
39441: DOUBLE
39442: EQUAL
39443: IFTRUE 39447
39445: GO 39580
39447: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39448: LD_ADDR_VAR 0 5
39452: PUSH
39453: LD_VAR 0 1
39457: PUSH
39458: LD_INT 3
39460: PLUS
39461: PUSH
39462: LD_VAR 0 2
39466: PUSH
39467: LD_INT 4
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: PUSH
39475: LD_VAR 0 1
39479: PUSH
39480: LD_INT 4
39482: PLUS
39483: PUSH
39484: LD_VAR 0 2
39488: PUSH
39489: LD_INT 4
39491: PLUS
39492: PUSH
39493: LD_INT 5
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: PUSH
39501: LD_VAR 0 1
39505: PUSH
39506: LD_INT 4
39508: MINUS
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: PUSH
39523: LD_VAR 0 1
39527: PUSH
39528: LD_VAR 0 2
39532: PUSH
39533: LD_INT 4
39535: MINUS
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: PUSH
39545: LD_VAR 0 1
39549: PUSH
39550: LD_INT 3
39552: MINUS
39553: PUSH
39554: LD_VAR 0 2
39558: PUSH
39559: LD_INT 3
39561: MINUS
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
// end ; 4 :
39578: GO 39859
39580: LD_INT 4
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39588
39586: GO 39721
39588: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_VAR 0 1
39598: PUSH
39599: LD_VAR 0 2
39603: PUSH
39604: LD_INT 4
39606: PLUS
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: PUSH
39616: LD_VAR 0 1
39620: PUSH
39621: LD_INT 3
39623: PLUS
39624: PUSH
39625: LD_VAR 0 2
39629: PUSH
39630: LD_INT 3
39632: PLUS
39633: PUSH
39634: LD_INT 5
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: PUSH
39642: LD_VAR 0 1
39646: PUSH
39647: LD_INT 4
39649: PLUS
39650: PUSH
39651: LD_VAR 0 2
39655: PUSH
39656: LD_INT 4
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: PUSH
39664: LD_VAR 0 1
39668: PUSH
39669: LD_VAR 0 2
39673: PUSH
39674: LD_INT 3
39676: MINUS
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: PUSH
39686: LD_VAR 0 1
39690: PUSH
39691: LD_INT 4
39693: MINUS
39694: PUSH
39695: LD_VAR 0 2
39699: PUSH
39700: LD_INT 4
39702: MINUS
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
// end ; 5 :
39719: GO 39859
39721: LD_INT 5
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39858
39729: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39730: LD_ADDR_VAR 0 5
39734: PUSH
39735: LD_VAR 0 1
39739: PUSH
39740: LD_INT 4
39742: MINUS
39743: PUSH
39744: LD_VAR 0 2
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: PUSH
39757: LD_VAR 0 1
39761: PUSH
39762: LD_VAR 0 2
39766: PUSH
39767: LD_INT 4
39769: MINUS
39770: PUSH
39771: LD_INT 3
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: PUSH
39779: LD_VAR 0 1
39783: PUSH
39784: LD_INT 4
39786: PLUS
39787: PUSH
39788: LD_VAR 0 2
39792: PUSH
39793: LD_INT 4
39795: PLUS
39796: PUSH
39797: LD_INT 5
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: PUSH
39805: LD_VAR 0 1
39809: PUSH
39810: LD_INT 3
39812: PLUS
39813: PUSH
39814: LD_VAR 0 2
39818: PUSH
39819: LD_INT 4
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: PUSH
39827: LD_VAR 0 1
39831: PUSH
39832: LD_VAR 0 2
39836: PUSH
39837: LD_INT 3
39839: PLUS
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// end ; end ;
39856: GO 39859
39858: POP
// result := list ;
39859: LD_ADDR_VAR 0 4
39863: PUSH
39864: LD_VAR 0 5
39868: ST_TO_ADDR
// end ;
39869: LD_VAR 0 4
39873: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39874: LD_INT 0
39876: PPUSH
39877: PPUSH
39878: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39879: LD_VAR 0 1
39883: NOT
39884: IFTRUE 39912
39886: PUSH
39887: LD_VAR 0 2
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: LD_INT 4
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: IN
39910: NOT
39911: OR
39912: IFFALSE 39916
// exit ;
39914: GO 39999
// tmp := [ ] ;
39916: LD_ADDR_VAR 0 5
39920: PUSH
39921: EMPTY
39922: ST_TO_ADDR
// for i in units do
39923: LD_ADDR_VAR 0 4
39927: PUSH
39928: LD_VAR 0 1
39932: PUSH
39933: FOR_IN
39934: IFFALSE 39968
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39936: LD_ADDR_VAR 0 5
39940: PUSH
39941: LD_VAR 0 5
39945: PPUSH
39946: LD_VAR 0 4
39950: PPUSH
39951: LD_VAR 0 2
39955: PPUSH
39956: CALL_OW 259
39960: PPUSH
39961: CALL 41394 0 2
39965: ST_TO_ADDR
39966: GO 39933
39968: POP
39969: POP
// if not tmp then
39970: LD_VAR 0 5
39974: NOT
39975: IFFALSE 39979
// exit ;
39977: GO 39999
// result := SortListByListDesc ( units , tmp ) ;
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: LD_VAR 0 5
39993: PPUSH
39994: CALL_OW 77
39998: ST_TO_ADDR
// end ;
39999: LD_VAR 0 3
40003: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40004: LD_INT 0
40006: PPUSH
40007: PPUSH
40008: PPUSH
// result := false ;
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: LD_INT 0
40016: ST_TO_ADDR
// if not building then
40017: LD_VAR 0 2
40021: NOT
40022: IFFALSE 40026
// exit ;
40024: GO 40170
// x := GetX ( building ) ;
40026: LD_ADDR_VAR 0 4
40030: PUSH
40031: LD_VAR 0 2
40035: PPUSH
40036: CALL_OW 250
40040: ST_TO_ADDR
// y := GetY ( building ) ;
40041: LD_ADDR_VAR 0 5
40045: PUSH
40046: LD_VAR 0 2
40050: PPUSH
40051: CALL_OW 251
40055: ST_TO_ADDR
// if not x or not y then
40056: LD_VAR 0 4
40060: NOT
40061: IFTRUE 40070
40063: PUSH
40064: LD_VAR 0 5
40068: NOT
40069: OR
40070: IFFALSE 40074
// exit ;
40072: GO 40170
// if GetTaskList ( unit ) then
40074: LD_VAR 0 1
40078: PPUSH
40079: CALL_OW 437
40083: IFFALSE 40170
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40085: LD_STRING e
40087: PUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: CALL_OW 437
40097: PUSH
40098: LD_INT 1
40100: ARRAY
40101: PUSH
40102: LD_INT 1
40104: ARRAY
40105: EQUAL
40106: IFFALSE 40133
40108: PUSH
40109: LD_VAR 0 4
40113: PUSH
40114: LD_VAR 0 1
40118: PPUSH
40119: CALL_OW 437
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: PUSH
40128: LD_INT 2
40130: ARRAY
40131: EQUAL
40132: AND
40133: IFFALSE 40160
40135: PUSH
40136: LD_VAR 0 5
40140: PUSH
40141: LD_VAR 0 1
40145: PPUSH
40146: CALL_OW 437
40150: PUSH
40151: LD_INT 1
40153: ARRAY
40154: PUSH
40155: LD_INT 3
40157: ARRAY
40158: EQUAL
40159: AND
40160: IFFALSE 40170
// result := true end ;
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_INT 1
40169: ST_TO_ADDR
// end ;
40170: LD_VAR 0 3
40174: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40175: LD_INT 0
40177: PPUSH
// result := false ;
40178: LD_ADDR_VAR 0 4
40182: PUSH
40183: LD_INT 0
40185: ST_TO_ADDR
// if GetTaskList ( unit ) then
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 437
40195: IFFALSE 40282
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40197: LD_STRING M
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 437
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: EQUAL
40218: IFFALSE 40245
40220: PUSH
40221: LD_VAR 0 2
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 437
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: PUSH
40240: LD_INT 2
40242: ARRAY
40243: EQUAL
40244: AND
40245: IFFALSE 40272
40247: PUSH
40248: LD_VAR 0 3
40252: PUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 437
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PUSH
40267: LD_INT 3
40269: ARRAY
40270: EQUAL
40271: AND
40272: IFFALSE 40282
// result := true ;
40274: LD_ADDR_VAR 0 4
40278: PUSH
40279: LD_INT 1
40281: ST_TO_ADDR
// end ; end ;
40282: LD_VAR 0 4
40286: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40287: LD_INT 0
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
// if not unit or not area then
40293: LD_VAR 0 1
40297: NOT
40298: IFTRUE 40307
40300: PUSH
40301: LD_VAR 0 2
40305: NOT
40306: OR
40307: IFFALSE 40311
// exit ;
40309: GO 40487
// tmp := AreaToList ( area , i ) ;
40311: LD_ADDR_VAR 0 6
40315: PUSH
40316: LD_VAR 0 2
40320: PPUSH
40321: LD_VAR 0 5
40325: PPUSH
40326: CALL_OW 517
40330: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40331: LD_ADDR_VAR 0 5
40335: PUSH
40336: DOUBLE
40337: LD_INT 1
40339: DEC
40340: ST_TO_ADDR
40341: LD_VAR 0 6
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PUSH
40350: FOR_TO
40351: IFFALSE 40485
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40353: LD_ADDR_VAR 0 7
40357: PUSH
40358: LD_VAR 0 6
40362: PUSH
40363: LD_INT 1
40365: ARRAY
40366: PUSH
40367: LD_VAR 0 5
40371: ARRAY
40372: PUSH
40373: LD_VAR 0 6
40377: PUSH
40378: LD_INT 2
40380: ARRAY
40381: PUSH
40382: LD_VAR 0 5
40386: ARRAY
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40392: LD_INT 92
40394: PUSH
40395: LD_VAR 0 7
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: PUSH
40404: LD_VAR 0 7
40408: PUSH
40409: LD_INT 2
40411: ARRAY
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: PPUSH
40422: CALL_OW 69
40426: PUSH
40427: LD_INT 0
40429: EQUAL
40430: IFFALSE 40483
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40432: LD_VAR 0 1
40436: PPUSH
40437: LD_VAR 0 7
40441: PUSH
40442: LD_INT 1
40444: ARRAY
40445: PPUSH
40446: LD_VAR 0 7
40450: PUSH
40451: LD_INT 2
40453: ARRAY
40454: PPUSH
40455: LD_VAR 0 3
40459: PPUSH
40460: CALL_OW 48
// result := IsPlaced ( unit ) ;
40464: LD_ADDR_VAR 0 4
40468: PUSH
40469: LD_VAR 0 1
40473: PPUSH
40474: CALL_OW 305
40478: ST_TO_ADDR
// exit ;
40479: POP
40480: POP
40481: GO 40487
// end ; end ;
40483: GO 40350
40485: POP
40486: POP
// end ;
40487: LD_VAR 0 4
40491: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40492: LD_INT 0
40494: PPUSH
40495: PPUSH
40496: PPUSH
// if not side or side > 8 then
40497: LD_VAR 0 1
40501: NOT
40502: IFTRUE 40514
40504: PUSH
40505: LD_VAR 0 1
40509: PUSH
40510: LD_INT 8
40512: GREATER
40513: OR
40514: IFFALSE 40518
// exit ;
40516: GO 40705
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40518: LD_ADDR_VAR 0 4
40522: PUSH
40523: LD_INT 22
40525: PUSH
40526: LD_VAR 0 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 21
40537: PUSH
40538: LD_INT 3
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PPUSH
40549: CALL_OW 69
40553: ST_TO_ADDR
// if not tmp then
40554: LD_VAR 0 4
40558: NOT
40559: IFFALSE 40563
// exit ;
40561: GO 40705
// enable_addtolog := true ;
40563: LD_ADDR_OWVAR 81
40567: PUSH
40568: LD_INT 1
40570: ST_TO_ADDR
// AddToLog ( [ ) ;
40571: LD_STRING [
40573: PPUSH
40574: CALL_OW 561
// for i in tmp do
40578: LD_ADDR_VAR 0 3
40582: PUSH
40583: LD_VAR 0 4
40587: PUSH
40588: FOR_IN
40589: IFFALSE 40696
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40591: LD_STRING [
40593: PUSH
40594: LD_VAR 0 3
40598: PPUSH
40599: CALL_OW 266
40603: STR
40604: PUSH
40605: LD_STRING , 
40607: STR
40608: PUSH
40609: LD_VAR 0 3
40613: PPUSH
40614: CALL_OW 250
40618: STR
40619: PUSH
40620: LD_STRING , 
40622: STR
40623: PUSH
40624: LD_VAR 0 3
40628: PPUSH
40629: CALL_OW 251
40633: STR
40634: PUSH
40635: LD_STRING , 
40637: STR
40638: PUSH
40639: LD_VAR 0 3
40643: PPUSH
40644: CALL_OW 254
40648: STR
40649: PUSH
40650: LD_STRING , 
40652: STR
40653: PUSH
40654: LD_VAR 0 3
40658: PPUSH
40659: LD_INT 1
40661: PPUSH
40662: CALL_OW 268
40666: STR
40667: PUSH
40668: LD_STRING , 
40670: STR
40671: PUSH
40672: LD_VAR 0 3
40676: PPUSH
40677: LD_INT 2
40679: PPUSH
40680: CALL_OW 268
40684: STR
40685: PUSH
40686: LD_STRING ],
40688: STR
40689: PPUSH
40690: CALL_OW 561
// end ;
40694: GO 40588
40696: POP
40697: POP
// AddToLog ( ]; ) ;
40698: LD_STRING ];
40700: PPUSH
40701: CALL_OW 561
// end ;
40705: LD_VAR 0 2
40709: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40710: LD_INT 0
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
// if not area or not rate or not max then
40717: LD_VAR 0 1
40721: NOT
40722: IFTRUE 40731
40724: PUSH
40725: LD_VAR 0 2
40729: NOT
40730: OR
40731: IFTRUE 40740
40733: PUSH
40734: LD_VAR 0 4
40738: NOT
40739: OR
40740: IFFALSE 40744
// exit ;
40742: GO 40933
// while 1 do
40744: LD_INT 1
40746: IFFALSE 40933
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40748: LD_ADDR_VAR 0 9
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: LD_INT 1
40760: PPUSH
40761: CALL_OW 287
40765: PUSH
40766: LD_INT 10
40768: MUL
40769: ST_TO_ADDR
// r := rate / 10 ;
40770: LD_ADDR_VAR 0 7
40774: PUSH
40775: LD_VAR 0 2
40779: PUSH
40780: LD_INT 10
40782: DIVREAL
40783: ST_TO_ADDR
// time := 1 1$00 ;
40784: LD_ADDR_VAR 0 8
40788: PUSH
40789: LD_INT 2100
40791: ST_TO_ADDR
// if amount < min then
40792: LD_VAR 0 9
40796: PUSH
40797: LD_VAR 0 3
40801: LESS
40802: IFFALSE 40820
// r := r * 2 else
40804: LD_ADDR_VAR 0 7
40808: PUSH
40809: LD_VAR 0 7
40813: PUSH
40814: LD_INT 2
40816: MUL
40817: ST_TO_ADDR
40818: GO 40846
// if amount > max then
40820: LD_VAR 0 9
40824: PUSH
40825: LD_VAR 0 4
40829: GREATER
40830: IFFALSE 40846
// r := r / 2 ;
40832: LD_ADDR_VAR 0 7
40836: PUSH
40837: LD_VAR 0 7
40841: PUSH
40842: LD_INT 2
40844: DIVREAL
40845: ST_TO_ADDR
// time := time / r ;
40846: LD_ADDR_VAR 0 8
40850: PUSH
40851: LD_VAR 0 8
40855: PUSH
40856: LD_VAR 0 7
40860: DIVREAL
40861: ST_TO_ADDR
// if time < 0 then
40862: LD_VAR 0 8
40866: PUSH
40867: LD_INT 0
40869: LESS
40870: IFFALSE 40887
// time := time * - 1 ;
40872: LD_ADDR_VAR 0 8
40876: PUSH
40877: LD_VAR 0 8
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: MUL
40886: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40887: LD_VAR 0 8
40891: PUSH
40892: LD_INT 35
40894: PPUSH
40895: LD_INT 875
40897: PPUSH
40898: CALL_OW 12
40902: PLUS
40903: PPUSH
40904: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40908: LD_INT 1
40910: PPUSH
40911: LD_INT 5
40913: PPUSH
40914: CALL_OW 12
40918: PPUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: LD_INT 1
40926: PPUSH
40927: CALL_OW 55
// end ;
40931: GO 40744
// end ;
40933: LD_VAR 0 5
40937: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40938: LD_INT 0
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
// if not turrets or not factories then
40948: LD_VAR 0 1
40952: NOT
40953: IFTRUE 40962
40955: PUSH
40956: LD_VAR 0 2
40960: NOT
40961: OR
40962: IFFALSE 40966
// exit ;
40964: GO 41273
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40966: LD_ADDR_VAR 0 10
40970: PUSH
40971: LD_INT 5
40973: PUSH
40974: LD_INT 6
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 4
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: LD_INT 5
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 24
41008: PUSH
41009: LD_INT 25
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 23
41018: PUSH
41019: LD_INT 27
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 42
41032: PUSH
41033: LD_INT 43
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 44
41042: PUSH
41043: LD_INT 46
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 45
41052: PUSH
41053: LD_INT 47
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// result := [ ] ;
41070: LD_ADDR_VAR 0 3
41074: PUSH
41075: EMPTY
41076: ST_TO_ADDR
// for i in turrets do
41077: LD_ADDR_VAR 0 4
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: FOR_IN
41088: IFFALSE 41271
// begin nat := GetNation ( i ) ;
41090: LD_ADDR_VAR 0 7
41094: PUSH
41095: LD_VAR 0 4
41099: PPUSH
41100: CALL_OW 248
41104: ST_TO_ADDR
// weapon := 0 ;
41105: LD_ADDR_VAR 0 8
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// if not nat then
41113: LD_VAR 0 7
41117: NOT
41118: IFFALSE 41122
// continue ;
41120: GO 41087
// for j in list [ nat ] do
41122: LD_ADDR_VAR 0 5
41126: PUSH
41127: LD_VAR 0 10
41131: PUSH
41132: LD_VAR 0 7
41136: ARRAY
41137: PUSH
41138: FOR_IN
41139: IFFALSE 41180
// if GetBWeapon ( i ) = j [ 1 ] then
41141: LD_VAR 0 4
41145: PPUSH
41146: CALL_OW 269
41150: PUSH
41151: LD_VAR 0 5
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: EQUAL
41160: IFFALSE 41178
// begin weapon := j [ 2 ] ;
41162: LD_ADDR_VAR 0 8
41166: PUSH
41167: LD_VAR 0 5
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: ST_TO_ADDR
// break ;
41176: GO 41180
// end ;
41178: GO 41138
41180: POP
41181: POP
// if not weapon then
41182: LD_VAR 0 8
41186: NOT
41187: IFFALSE 41191
// continue ;
41189: GO 41087
// for k in factories do
41191: LD_ADDR_VAR 0 6
41195: PUSH
41196: LD_VAR 0 2
41200: PUSH
41201: FOR_IN
41202: IFFALSE 41267
// begin weapons := AvailableWeaponList ( k ) ;
41204: LD_ADDR_VAR 0 9
41208: PUSH
41209: LD_VAR 0 6
41213: PPUSH
41214: CALL_OW 478
41218: ST_TO_ADDR
// if not weapons then
41219: LD_VAR 0 9
41223: NOT
41224: IFFALSE 41228
// continue ;
41226: GO 41201
// if weapon in weapons then
41228: LD_VAR 0 8
41232: PUSH
41233: LD_VAR 0 9
41237: IN
41238: IFFALSE 41265
// begin result := [ i , weapon ] ;
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_VAR 0 4
41249: PUSH
41250: LD_VAR 0 8
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: ST_TO_ADDR
// exit ;
41259: POP
41260: POP
41261: POP
41262: POP
41263: GO 41273
// end ; end ;
41265: GO 41201
41267: POP
41268: POP
// end ;
41269: GO 41087
41271: POP
41272: POP
// end ;
41273: LD_VAR 0 3
41277: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41278: LD_INT 0
41280: PPUSH
// if not side or side > 8 then
41281: LD_VAR 0 3
41285: NOT
41286: IFTRUE 41298
41288: PUSH
41289: LD_VAR 0 3
41293: PUSH
41294: LD_INT 8
41296: GREATER
41297: OR
41298: IFFALSE 41302
// exit ;
41300: GO 41361
// if not range then
41302: LD_VAR 0 4
41306: NOT
41307: IFFALSE 41318
// range := - 12 ;
41309: LD_ADDR_VAR 0 4
41313: PUSH
41314: LD_INT 12
41316: NEG
41317: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41318: LD_VAR 0 1
41322: PPUSH
41323: LD_VAR 0 2
41327: PPUSH
41328: LD_VAR 0 3
41332: PPUSH
41333: LD_VAR 0 4
41337: PPUSH
41338: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41342: LD_VAR 0 1
41346: PPUSH
41347: LD_VAR 0 2
41351: PPUSH
41352: LD_VAR 0 3
41356: PPUSH
41357: CALL_OW 331
// end ;
41361: LD_VAR 0 5
41365: RET
// export function Video ( mode ) ; begin
41366: LD_INT 0
41368: PPUSH
// ingame_video = mode ;
41369: LD_ADDR_OWVAR 52
41373: PUSH
41374: LD_VAR 0 1
41378: ST_TO_ADDR
// interface_hidden = mode ;
41379: LD_ADDR_OWVAR 54
41383: PUSH
41384: LD_VAR 0 1
41388: ST_TO_ADDR
// end ;
41389: LD_VAR 0 2
41393: RET
// export function Join ( array , element ) ; begin
41394: LD_INT 0
41396: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41397: LD_ADDR_VAR 0 3
41401: PUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: LD_VAR 0 1
41411: PUSH
41412: LD_INT 1
41414: PLUS
41415: PPUSH
41416: LD_VAR 0 2
41420: PPUSH
41421: CALL_OW 1
41425: ST_TO_ADDR
// end ;
41426: LD_VAR 0 3
41430: RET
// export function JoinUnion ( array , element ) ; begin
41431: LD_INT 0
41433: PPUSH
// result := array union element ;
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_VAR 0 1
41443: PUSH
41444: LD_VAR 0 2
41448: UNION
41449: ST_TO_ADDR
// end ;
41450: LD_VAR 0 3
41454: RET
// export function GetBehemoths ( side ) ; begin
41455: LD_INT 0
41457: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41458: LD_ADDR_VAR 0 2
41462: PUSH
41463: LD_INT 22
41465: PUSH
41466: LD_VAR 0 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 31
41477: PUSH
41478: LD_INT 25
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PPUSH
41489: CALL_OW 69
41493: ST_TO_ADDR
// end ;
41494: LD_VAR 0 2
41498: RET
// export function Shuffle ( array ) ; var i , index ; begin
41499: LD_INT 0
41501: PPUSH
41502: PPUSH
41503: PPUSH
// result := [ ] ;
41504: LD_ADDR_VAR 0 2
41508: PUSH
41509: EMPTY
41510: ST_TO_ADDR
// if not array then
41511: LD_VAR 0 1
41515: NOT
41516: IFFALSE 41520
// exit ;
41518: GO 41619
// Randomize ;
41520: CALL_OW 10
// for i = array downto 1 do
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: DOUBLE
41530: LD_VAR 0 1
41534: INC
41535: ST_TO_ADDR
41536: LD_INT 1
41538: PUSH
41539: FOR_DOWNTO
41540: IFFALSE 41617
// begin index := rand ( 1 , array ) ;
41542: LD_ADDR_VAR 0 4
41546: PUSH
41547: LD_INT 1
41549: PPUSH
41550: LD_VAR 0 1
41554: PPUSH
41555: CALL_OW 12
41559: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41560: LD_ADDR_VAR 0 2
41564: PUSH
41565: LD_VAR 0 2
41569: PPUSH
41570: LD_VAR 0 2
41574: PUSH
41575: LD_INT 1
41577: PLUS
41578: PPUSH
41579: LD_VAR 0 1
41583: PUSH
41584: LD_VAR 0 4
41588: ARRAY
41589: PPUSH
41590: CALL_OW 2
41594: ST_TO_ADDR
// array := Delete ( array , index ) ;
41595: LD_ADDR_VAR 0 1
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: LD_VAR 0 4
41609: PPUSH
41610: CALL_OW 3
41614: ST_TO_ADDR
// end ;
41615: GO 41539
41617: POP
41618: POP
// end ;
41619: LD_VAR 0 2
41623: RET
// export function GetBaseMaterials ( base ) ; begin
41624: LD_INT 0
41626: PPUSH
// result := [ 0 , 0 , 0 ] ;
41627: LD_ADDR_VAR 0 2
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// if not base then
41646: LD_VAR 0 1
41650: NOT
41651: IFFALSE 41655
// exit ;
41653: GO 41704
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41655: LD_ADDR_VAR 0 2
41659: PUSH
41660: LD_VAR 0 1
41664: PPUSH
41665: LD_INT 1
41667: PPUSH
41668: CALL_OW 275
41672: PUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: LD_INT 2
41680: PPUSH
41681: CALL_OW 275
41685: PUSH
41686: LD_VAR 0 1
41690: PPUSH
41691: LD_INT 3
41693: PPUSH
41694: CALL_OW 275
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// end ;
41704: LD_VAR 0 2
41708: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41709: LD_INT 0
41711: PPUSH
41712: PPUSH
// result := array ;
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_VAR 0 1
41722: ST_TO_ADDR
// if size >= result then
41723: LD_VAR 0 2
41727: PUSH
41728: LD_VAR 0 3
41732: GREATEREQUAL
41733: IFFALSE 41737
// exit ;
41735: GO 41787
// if size then
41737: LD_VAR 0 2
41741: IFFALSE 41787
// for i := array downto size do
41743: LD_ADDR_VAR 0 4
41747: PUSH
41748: DOUBLE
41749: LD_VAR 0 1
41753: INC
41754: ST_TO_ADDR
41755: LD_VAR 0 2
41759: PUSH
41760: FOR_DOWNTO
41761: IFFALSE 41785
// result := Delete ( result , result ) ;
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_VAR 0 3
41772: PPUSH
41773: LD_VAR 0 3
41777: PPUSH
41778: CALL_OW 3
41782: ST_TO_ADDR
41783: GO 41760
41785: POP
41786: POP
// end ;
41787: LD_VAR 0 3
41791: RET
// export function ComExit ( unit ) ; var tmp ; begin
41792: LD_INT 0
41794: PPUSH
41795: PPUSH
// if not IsInUnit ( unit ) then
41796: LD_VAR 0 1
41800: PPUSH
41801: CALL_OW 310
41805: NOT
41806: IFFALSE 41810
// exit ;
41808: GO 41870
// tmp := IsInUnit ( unit ) ;
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_VAR 0 1
41819: PPUSH
41820: CALL_OW 310
41824: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL_OW 247
41834: PUSH
41835: LD_INT 2
41837: EQUAL
41838: IFFALSE 41851
// ComExitVehicle ( unit ) else
41840: LD_VAR 0 1
41844: PPUSH
41845: CALL_OW 121
41849: GO 41860
// ComExitBuilding ( unit ) ;
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 122
// result := tmp ;
41860: LD_ADDR_VAR 0 2
41864: PUSH
41865: LD_VAR 0 3
41869: ST_TO_ADDR
// end ;
41870: LD_VAR 0 2
41874: RET
// export function ComExitAll ( units ) ; var i ; begin
41875: LD_INT 0
41877: PPUSH
41878: PPUSH
// if not units then
41879: LD_VAR 0 1
41883: NOT
41884: IFFALSE 41888
// exit ;
41886: GO 41914
// for i in units do
41888: LD_ADDR_VAR 0 3
41892: PUSH
41893: LD_VAR 0 1
41897: PUSH
41898: FOR_IN
41899: IFFALSE 41912
// ComExit ( i ) ;
41901: LD_VAR 0 3
41905: PPUSH
41906: CALL 41792 0 1
41910: GO 41898
41912: POP
41913: POP
// end ;
41914: LD_VAR 0 2
41918: RET
// export function ResetHc ; begin
41919: LD_INT 0
41921: PPUSH
// InitHc ;
41922: CALL_OW 19
// hc_importance := 0 ;
41926: LD_ADDR_OWVAR 32
41930: PUSH
41931: LD_INT 0
41933: ST_TO_ADDR
// end ;
41934: LD_VAR 0 1
41938: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41939: LD_INT 0
41941: PPUSH
41942: PPUSH
41943: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41944: LD_ADDR_VAR 0 6
41948: PUSH
41949: LD_VAR 0 1
41953: PUSH
41954: LD_VAR 0 3
41958: PLUS
41959: PUSH
41960: LD_INT 2
41962: DIV
41963: ST_TO_ADDR
// if _x < 0 then
41964: LD_VAR 0 6
41968: PUSH
41969: LD_INT 0
41971: LESS
41972: IFFALSE 41989
// _x := _x * - 1 ;
41974: LD_ADDR_VAR 0 6
41978: PUSH
41979: LD_VAR 0 6
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: MUL
41988: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41989: LD_ADDR_VAR 0 7
41993: PUSH
41994: LD_VAR 0 2
41998: PUSH
41999: LD_VAR 0 4
42003: PLUS
42004: PUSH
42005: LD_INT 2
42007: DIV
42008: ST_TO_ADDR
// if _y < 0 then
42009: LD_VAR 0 7
42013: PUSH
42014: LD_INT 0
42016: LESS
42017: IFFALSE 42034
// _y := _y * - 1 ;
42019: LD_ADDR_VAR 0 7
42023: PUSH
42024: LD_VAR 0 7
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: MUL
42033: ST_TO_ADDR
// result := [ _x , _y ] ;
42034: LD_ADDR_VAR 0 5
42038: PUSH
42039: LD_VAR 0 6
42043: PUSH
42044: LD_VAR 0 7
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: ST_TO_ADDR
// end ;
42053: LD_VAR 0 5
42057: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42058: LD_INT 0
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
// task := GetTaskList ( unit ) ;
42064: LD_ADDR_VAR 0 7
42068: PUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 437
42078: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42079: LD_VAR 0 7
42083: NOT
42084: IFFALSE 42103
42086: PUSH
42087: LD_VAR 0 1
42091: PPUSH
42092: LD_VAR 0 2
42096: PPUSH
42097: CALL_OW 308
42101: NOT
42102: AND
42103: IFFALSE 42107
// exit ;
42105: GO 42225
// if IsInArea ( unit , area ) then
42107: LD_VAR 0 1
42111: PPUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: CALL_OW 308
42121: IFFALSE 42139
// begin ComMoveToArea ( unit , goAway ) ;
42123: LD_VAR 0 1
42127: PPUSH
42128: LD_VAR 0 3
42132: PPUSH
42133: CALL_OW 113
// exit ;
42137: GO 42225
// end ; if task [ 1 ] [ 1 ] <> M then
42139: LD_VAR 0 7
42143: PUSH
42144: LD_INT 1
42146: ARRAY
42147: PUSH
42148: LD_INT 1
42150: ARRAY
42151: PUSH
42152: LD_STRING M
42154: NONEQUAL
42155: IFFALSE 42159
// exit ;
42157: GO 42225
// x := task [ 1 ] [ 2 ] ;
42159: LD_ADDR_VAR 0 5
42163: PUSH
42164: LD_VAR 0 7
42168: PUSH
42169: LD_INT 1
42171: ARRAY
42172: PUSH
42173: LD_INT 2
42175: ARRAY
42176: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42177: LD_ADDR_VAR 0 6
42181: PUSH
42182: LD_VAR 0 7
42186: PUSH
42187: LD_INT 1
42189: ARRAY
42190: PUSH
42191: LD_INT 3
42193: ARRAY
42194: ST_TO_ADDR
// if InArea ( x , y , area ) then
42195: LD_VAR 0 5
42199: PPUSH
42200: LD_VAR 0 6
42204: PPUSH
42205: LD_VAR 0 2
42209: PPUSH
42210: CALL_OW 309
42214: IFFALSE 42225
// ComStop ( unit ) ;
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 141
// end ;
42225: LD_VAR 0 4
42229: RET
// export function Abs ( value ) ; begin
42230: LD_INT 0
42232: PPUSH
// result := value ;
42233: LD_ADDR_VAR 0 2
42237: PUSH
42238: LD_VAR 0 1
42242: ST_TO_ADDR
// if value < 0 then
42243: LD_VAR 0 1
42247: PUSH
42248: LD_INT 0
42250: LESS
42251: IFFALSE 42268
// result := value * - 1 ;
42253: LD_ADDR_VAR 0 2
42257: PUSH
42258: LD_VAR 0 1
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: MUL
42267: ST_TO_ADDR
// end ;
42268: LD_VAR 0 2
42272: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42273: LD_INT 0
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
// if not unit or not building then
42283: LD_VAR 0 1
42287: NOT
42288: IFTRUE 42297
42290: PUSH
42291: LD_VAR 0 2
42295: NOT
42296: OR
42297: IFFALSE 42301
// exit ;
42299: GO 42529
// x := GetX ( building ) ;
42301: LD_ADDR_VAR 0 4
42305: PUSH
42306: LD_VAR 0 2
42310: PPUSH
42311: CALL_OW 250
42315: ST_TO_ADDR
// y := GetY ( building ) ;
42316: LD_ADDR_VAR 0 6
42320: PUSH
42321: LD_VAR 0 2
42325: PPUSH
42326: CALL_OW 251
42330: ST_TO_ADDR
// d := GetDir ( building ) ;
42331: LD_ADDR_VAR 0 8
42335: PUSH
42336: LD_VAR 0 2
42340: PPUSH
42341: CALL_OW 254
42345: ST_TO_ADDR
// r := 4 ;
42346: LD_ADDR_VAR 0 9
42350: PUSH
42351: LD_INT 4
42353: ST_TO_ADDR
// for i := 1 to 5 do
42354: LD_ADDR_VAR 0 10
42358: PUSH
42359: DOUBLE
42360: LD_INT 1
42362: DEC
42363: ST_TO_ADDR
42364: LD_INT 5
42366: PUSH
42367: FOR_TO
42368: IFFALSE 42527
// begin _x := ShiftX ( x , d , r + i ) ;
42370: LD_ADDR_VAR 0 5
42374: PUSH
42375: LD_VAR 0 4
42379: PPUSH
42380: LD_VAR 0 8
42384: PPUSH
42385: LD_VAR 0 9
42389: PUSH
42390: LD_VAR 0 10
42394: PLUS
42395: PPUSH
42396: CALL_OW 272
42400: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42401: LD_ADDR_VAR 0 7
42405: PUSH
42406: LD_VAR 0 6
42410: PPUSH
42411: LD_VAR 0 8
42415: PPUSH
42416: LD_VAR 0 9
42420: PUSH
42421: LD_VAR 0 10
42425: PLUS
42426: PPUSH
42427: CALL_OW 273
42431: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42432: LD_VAR 0 5
42436: PPUSH
42437: LD_VAR 0 7
42441: PPUSH
42442: CALL_OW 488
42446: IFFALSE 42481
42448: PUSH
42449: LD_VAR 0 5
42453: PPUSH
42454: LD_VAR 0 7
42458: PPUSH
42459: CALL_OW 428
42463: PPUSH
42464: CALL_OW 247
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: IN
42479: NOT
42480: AND
42481: IFFALSE 42525
// begin ComMoveXY ( unit , _x , _y ) ;
42483: LD_VAR 0 1
42487: PPUSH
42488: LD_VAR 0 5
42492: PPUSH
42493: LD_VAR 0 7
42497: PPUSH
42498: CALL_OW 111
// result := [ _x , _y ] ;
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: LD_VAR 0 5
42511: PUSH
42512: LD_VAR 0 7
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: ST_TO_ADDR
// exit ;
42521: POP
42522: POP
42523: GO 42529
// end ; end ;
42525: GO 42367
42527: POP
42528: POP
// end ;
42529: LD_VAR 0 3
42533: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42534: LD_INT 0
42536: PPUSH
42537: PPUSH
42538: PPUSH
// result := 0 ;
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 0
42546: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42547: LD_VAR 0 1
42551: PUSH
42552: LD_INT 0
42554: LESS
42555: IFTRUE 42567
42557: PUSH
42558: LD_VAR 0 1
42562: PUSH
42563: LD_INT 8
42565: GREATER
42566: OR
42567: IFTRUE 42579
42569: PUSH
42570: LD_VAR 0 2
42574: PUSH
42575: LD_INT 0
42577: LESS
42578: OR
42579: IFTRUE 42591
42581: PUSH
42582: LD_VAR 0 2
42586: PUSH
42587: LD_INT 8
42589: GREATER
42590: OR
42591: IFFALSE 42595
// exit ;
42593: GO 42670
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42595: LD_ADDR_VAR 0 4
42599: PUSH
42600: LD_INT 22
42602: PUSH
42603: LD_VAR 0 2
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PPUSH
42612: CALL_OW 69
42616: PUSH
42617: FOR_IN
42618: IFFALSE 42668
// begin un := UnitShoot ( i ) ;
42620: LD_ADDR_VAR 0 5
42624: PUSH
42625: LD_VAR 0 4
42629: PPUSH
42630: CALL_OW 504
42634: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42635: LD_VAR 0 5
42639: PPUSH
42640: CALL_OW 255
42644: PUSH
42645: LD_VAR 0 1
42649: EQUAL
42650: IFFALSE 42666
// begin result := un ;
42652: LD_ADDR_VAR 0 3
42656: PUSH
42657: LD_VAR 0 5
42661: ST_TO_ADDR
// exit ;
42662: POP
42663: POP
42664: GO 42670
// end ; end ;
42666: GO 42617
42668: POP
42669: POP
// end ;
42670: LD_VAR 0 3
42674: RET
// export function GetCargoBay ( units ) ; begin
42675: LD_INT 0
42677: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42678: LD_ADDR_VAR 0 2
42682: PUSH
42683: LD_VAR 0 1
42687: PPUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 34
42693: PUSH
42694: LD_INT 12
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 34
42703: PUSH
42704: LD_INT 51
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 34
42713: PUSH
42714: LD_INT 32
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 34
42723: PUSH
42724: LD_INT 89
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: PPUSH
42738: CALL_OW 72
42742: ST_TO_ADDR
// end ;
42743: LD_VAR 0 2
42747: RET
// export function Negate ( value ) ; begin
42748: LD_INT 0
42750: PPUSH
// result := not value ;
42751: LD_ADDR_VAR 0 2
42755: PUSH
42756: LD_VAR 0 1
42760: NOT
42761: ST_TO_ADDR
// end ;
42762: LD_VAR 0 2
42766: RET
// export function Inc ( value ) ; begin
42767: LD_INT 0
42769: PPUSH
// result := value + 1 ;
42770: LD_ADDR_VAR 0 2
42774: PUSH
42775: LD_VAR 0 1
42779: PUSH
42780: LD_INT 1
42782: PLUS
42783: ST_TO_ADDR
// end ;
42784: LD_VAR 0 2
42788: RET
// export function Dec ( value ) ; begin
42789: LD_INT 0
42791: PPUSH
// result := value - 1 ;
42792: LD_ADDR_VAR 0 2
42796: PUSH
42797: LD_VAR 0 1
42801: PUSH
42802: LD_INT 1
42804: MINUS
42805: ST_TO_ADDR
// end ;
42806: LD_VAR 0 2
42810: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42811: LD_INT 0
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42821: LD_VAR 0 1
42825: PPUSH
42826: LD_VAR 0 2
42830: PPUSH
42831: CALL_OW 488
42835: NOT
42836: IFTRUE 42855
42838: PUSH
42839: LD_VAR 0 3
42843: PPUSH
42844: LD_VAR 0 4
42848: PPUSH
42849: CALL_OW 488
42853: NOT
42854: OR
42855: IFFALSE 42868
// begin result := - 1 ;
42857: LD_ADDR_VAR 0 5
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: ST_TO_ADDR
// exit ;
42866: GO 43103
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42868: LD_ADDR_VAR 0 12
42872: PUSH
42873: LD_VAR 0 1
42877: PPUSH
42878: LD_VAR 0 2
42882: PPUSH
42883: LD_VAR 0 3
42887: PPUSH
42888: LD_VAR 0 4
42892: PPUSH
42893: CALL 41939 0 4
42897: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42898: LD_ADDR_VAR 0 11
42902: PUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: LD_VAR 0 2
42912: PPUSH
42913: LD_VAR 0 12
42917: PUSH
42918: LD_INT 1
42920: ARRAY
42921: PPUSH
42922: LD_VAR 0 12
42926: PUSH
42927: LD_INT 2
42929: ARRAY
42930: PPUSH
42931: CALL_OW 298
42935: ST_TO_ADDR
// distance := 9999 ;
42936: LD_ADDR_VAR 0 10
42940: PUSH
42941: LD_INT 9999
42943: ST_TO_ADDR
// for i := 0 to 5 do
42944: LD_ADDR_VAR 0 6
42948: PUSH
42949: DOUBLE
42950: LD_INT 0
42952: DEC
42953: ST_TO_ADDR
42954: LD_INT 5
42956: PUSH
42957: FOR_TO
42958: IFFALSE 43101
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42960: LD_ADDR_VAR 0 7
42964: PUSH
42965: LD_VAR 0 1
42969: PPUSH
42970: LD_VAR 0 6
42974: PPUSH
42975: LD_VAR 0 11
42979: PPUSH
42980: CALL_OW 272
42984: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42985: LD_ADDR_VAR 0 8
42989: PUSH
42990: LD_VAR 0 2
42994: PPUSH
42995: LD_VAR 0 6
42999: PPUSH
43000: LD_VAR 0 11
43004: PPUSH
43005: CALL_OW 273
43009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43010: LD_VAR 0 7
43014: PPUSH
43015: LD_VAR 0 8
43019: PPUSH
43020: CALL_OW 488
43024: NOT
43025: IFFALSE 43029
// continue ;
43027: GO 42957
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43029: LD_ADDR_VAR 0 9
43033: PUSH
43034: LD_VAR 0 12
43038: PUSH
43039: LD_INT 1
43041: ARRAY
43042: PPUSH
43043: LD_VAR 0 12
43047: PUSH
43048: LD_INT 2
43050: ARRAY
43051: PPUSH
43052: LD_VAR 0 7
43056: PPUSH
43057: LD_VAR 0 8
43061: PPUSH
43062: CALL_OW 298
43066: ST_TO_ADDR
// if tmp < distance then
43067: LD_VAR 0 9
43071: PUSH
43072: LD_VAR 0 10
43076: LESS
43077: IFFALSE 43099
// begin result := i ;
43079: LD_ADDR_VAR 0 5
43083: PUSH
43084: LD_VAR 0 6
43088: ST_TO_ADDR
// distance := tmp ;
43089: LD_ADDR_VAR 0 10
43093: PUSH
43094: LD_VAR 0 9
43098: ST_TO_ADDR
// end ; end ;
43099: GO 42957
43101: POP
43102: POP
// end ;
43103: LD_VAR 0 5
43107: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43108: LD_INT 0
43110: PPUSH
43111: PPUSH
// if not driver or not IsInUnit ( driver ) then
43112: LD_VAR 0 1
43116: NOT
43117: IFTRUE 43131
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: CALL_OW 310
43129: NOT
43130: OR
43131: IFFALSE 43135
// exit ;
43133: GO 43225
// vehicle := IsInUnit ( driver ) ;
43135: LD_ADDR_VAR 0 3
43139: PUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 310
43149: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43150: LD_VAR 0 1
43154: PPUSH
43155: LD_STRING \
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: PUSH
43185: LD_STRING E
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_VAR 0 3
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PPUSH
43221: CALL_OW 446
// end ;
43225: LD_VAR 0 2
43229: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43230: LD_INT 0
43232: PPUSH
43233: PPUSH
// if not driver or not IsInUnit ( driver ) then
43234: LD_VAR 0 1
43238: NOT
43239: IFTRUE 43253
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 310
43251: NOT
43252: OR
43253: IFFALSE 43257
// exit ;
43255: GO 43347
// vehicle := IsInUnit ( driver ) ;
43257: LD_ADDR_VAR 0 3
43261: PUSH
43262: LD_VAR 0 1
43266: PPUSH
43267: CALL_OW 310
43271: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43272: LD_VAR 0 1
43276: PPUSH
43277: LD_STRING \
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: PUSH
43307: LD_STRING E
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_VAR 0 3
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PPUSH
43343: CALL_OW 447
// end ;
43347: LD_VAR 0 2
43351: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43352: LD_INT 0
43354: PPUSH
43355: PPUSH
43356: PPUSH
// tmp := [ ] ;
43357: LD_ADDR_VAR 0 5
43361: PUSH
43362: EMPTY
43363: ST_TO_ADDR
// for i in units do
43364: LD_ADDR_VAR 0 4
43368: PUSH
43369: LD_VAR 0 1
43373: PUSH
43374: FOR_IN
43375: IFFALSE 43413
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43377: LD_ADDR_VAR 0 5
43381: PUSH
43382: LD_VAR 0 5
43386: PPUSH
43387: LD_VAR 0 5
43391: PUSH
43392: LD_INT 1
43394: PLUS
43395: PPUSH
43396: LD_VAR 0 4
43400: PPUSH
43401: CALL_OW 256
43405: PPUSH
43406: CALL_OW 2
43410: ST_TO_ADDR
43411: GO 43374
43413: POP
43414: POP
// if not tmp then
43415: LD_VAR 0 5
43419: NOT
43420: IFFALSE 43424
// exit ;
43422: GO 43472
// if asc then
43424: LD_VAR 0 2
43428: IFFALSE 43452
// result := SortListByListAsc ( units , tmp ) else
43430: LD_ADDR_VAR 0 3
43434: PUSH
43435: LD_VAR 0 1
43439: PPUSH
43440: LD_VAR 0 5
43444: PPUSH
43445: CALL_OW 76
43449: ST_TO_ADDR
43450: GO 43472
// result := SortListByListDesc ( units , tmp ) ;
43452: LD_ADDR_VAR 0 3
43456: PUSH
43457: LD_VAR 0 1
43461: PPUSH
43462: LD_VAR 0 5
43466: PPUSH
43467: CALL_OW 77
43471: ST_TO_ADDR
// end ;
43472: LD_VAR 0 3
43476: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43477: LD_INT 0
43479: PPUSH
43480: PPUSH
// task := GetTaskList ( mech ) ;
43481: LD_ADDR_VAR 0 4
43485: PUSH
43486: LD_VAR 0 1
43490: PPUSH
43491: CALL_OW 437
43495: ST_TO_ADDR
// if not task then
43496: LD_VAR 0 4
43500: NOT
43501: IFFALSE 43505
// exit ;
43503: GO 43549
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43505: LD_ADDR_VAR 0 3
43509: PUSH
43510: LD_VAR 0 4
43514: PUSH
43515: LD_INT 1
43517: ARRAY
43518: PUSH
43519: LD_INT 1
43521: ARRAY
43522: PUSH
43523: LD_STRING r
43525: EQUAL
43526: IFFALSE 43548
43528: PUSH
43529: LD_VAR 0 4
43533: PUSH
43534: LD_INT 1
43536: ARRAY
43537: PUSH
43538: LD_INT 4
43540: ARRAY
43541: PUSH
43542: LD_VAR 0 2
43546: EQUAL
43547: AND
43548: ST_TO_ADDR
// end ;
43549: LD_VAR 0 3
43553: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43554: LD_INT 0
43556: PPUSH
// SetDir ( unit , d ) ;
43557: LD_VAR 0 1
43561: PPUSH
43562: LD_VAR 0 4
43566: PPUSH
43567: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43571: LD_ADDR_VAR 0 6
43575: PUSH
43576: LD_VAR 0 1
43580: PPUSH
43581: LD_VAR 0 2
43585: PPUSH
43586: LD_VAR 0 3
43590: PPUSH
43591: LD_VAR 0 5
43595: PPUSH
43596: CALL_OW 48
43600: ST_TO_ADDR
// end ;
43601: LD_VAR 0 6
43605: RET
// export function ToNaturalNumber ( number ) ; begin
43606: LD_INT 0
43608: PPUSH
// result := number div 1 ;
43609: LD_ADDR_VAR 0 2
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_INT 1
43621: DIV
43622: ST_TO_ADDR
// if number < 0 then
43623: LD_VAR 0 1
43627: PUSH
43628: LD_INT 0
43630: LESS
43631: IFFALSE 43641
// result := 0 ;
43633: LD_ADDR_VAR 0 2
43637: PUSH
43638: LD_INT 0
43640: ST_TO_ADDR
// end ;
43641: LD_VAR 0 2
43645: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43646: LD_INT 0
43648: PPUSH
43649: PPUSH
43650: PPUSH
// if not buildings then
43651: LD_VAR 0 1
43655: NOT
43656: IFFALSE 43660
// exit ;
43658: GO 43775
// tmp := [ ] ;
43660: LD_ADDR_VAR 0 5
43664: PUSH
43665: EMPTY
43666: ST_TO_ADDR
// for b in buildings do
43667: LD_ADDR_VAR 0 4
43671: PUSH
43672: LD_VAR 0 1
43676: PUSH
43677: FOR_IN
43678: IFFALSE 43716
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43680: LD_ADDR_VAR 0 5
43684: PUSH
43685: LD_VAR 0 5
43689: PPUSH
43690: LD_VAR 0 5
43694: PUSH
43695: LD_INT 1
43697: PLUS
43698: PPUSH
43699: LD_VAR 0 4
43703: PPUSH
43704: CALL_OW 266
43708: PPUSH
43709: CALL_OW 1
43713: ST_TO_ADDR
43714: GO 43677
43716: POP
43717: POP
// if not tmp then
43718: LD_VAR 0 5
43722: NOT
43723: IFFALSE 43727
// exit ;
43725: GO 43775
// if asc then
43727: LD_VAR 0 2
43731: IFFALSE 43755
// result := SortListByListAsc ( buildings , tmp ) else
43733: LD_ADDR_VAR 0 3
43737: PUSH
43738: LD_VAR 0 1
43742: PPUSH
43743: LD_VAR 0 5
43747: PPUSH
43748: CALL_OW 76
43752: ST_TO_ADDR
43753: GO 43775
// result := SortListByListDesc ( buildings , tmp ) ;
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_VAR 0 1
43764: PPUSH
43765: LD_VAR 0 5
43769: PPUSH
43770: CALL_OW 77
43774: ST_TO_ADDR
// end ;
43775: LD_VAR 0 3
43779: RET
// export function SortByClass ( units , class ) ; var un ; begin
43780: LD_INT 0
43782: PPUSH
43783: PPUSH
// if not units or not class then
43784: LD_VAR 0 1
43788: NOT
43789: IFTRUE 43798
43791: PUSH
43792: LD_VAR 0 2
43796: NOT
43797: OR
43798: IFFALSE 43802
// exit ;
43800: GO 43897
// result := [ ] ;
43802: LD_ADDR_VAR 0 3
43806: PUSH
43807: EMPTY
43808: ST_TO_ADDR
// for un in units do
43809: LD_ADDR_VAR 0 4
43813: PUSH
43814: LD_VAR 0 1
43818: PUSH
43819: FOR_IN
43820: IFFALSE 43895
// if GetClass ( un ) = class then
43822: LD_VAR 0 4
43826: PPUSH
43827: CALL_OW 257
43831: PUSH
43832: LD_VAR 0 2
43836: EQUAL
43837: IFFALSE 43864
// result := Insert ( result , 1 , un ) else
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: LD_VAR 0 3
43848: PPUSH
43849: LD_INT 1
43851: PPUSH
43852: LD_VAR 0 4
43856: PPUSH
43857: CALL_OW 2
43861: ST_TO_ADDR
43862: GO 43893
// result := Replace ( result , result + 1 , un ) ;
43864: LD_ADDR_VAR 0 3
43868: PUSH
43869: LD_VAR 0 3
43873: PPUSH
43874: LD_VAR 0 3
43878: PUSH
43879: LD_INT 1
43881: PLUS
43882: PPUSH
43883: LD_VAR 0 4
43887: PPUSH
43888: CALL_OW 1
43892: ST_TO_ADDR
43893: GO 43819
43895: POP
43896: POP
// end ;
43897: LD_VAR 0 3
43901: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43902: LD_INT 0
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
// result := [ ] ;
43911: LD_ADDR_VAR 0 4
43915: PUSH
43916: EMPTY
43917: ST_TO_ADDR
// if x - r < 0 then
43918: LD_VAR 0 1
43922: PUSH
43923: LD_VAR 0 3
43927: MINUS
43928: PUSH
43929: LD_INT 0
43931: LESS
43932: IFFALSE 43944
// min_x := 0 else
43934: LD_ADDR_VAR 0 8
43938: PUSH
43939: LD_INT 0
43941: ST_TO_ADDR
43942: GO 43960
// min_x := x - r ;
43944: LD_ADDR_VAR 0 8
43948: PUSH
43949: LD_VAR 0 1
43953: PUSH
43954: LD_VAR 0 3
43958: MINUS
43959: ST_TO_ADDR
// if y - r < 0 then
43960: LD_VAR 0 2
43964: PUSH
43965: LD_VAR 0 3
43969: MINUS
43970: PUSH
43971: LD_INT 0
43973: LESS
43974: IFFALSE 43986
// min_y := 0 else
43976: LD_ADDR_VAR 0 7
43980: PUSH
43981: LD_INT 0
43983: ST_TO_ADDR
43984: GO 44002
// min_y := y - r ;
43986: LD_ADDR_VAR 0 7
43990: PUSH
43991: LD_VAR 0 2
43995: PUSH
43996: LD_VAR 0 3
44000: MINUS
44001: ST_TO_ADDR
// max_x := x + r ;
44002: LD_ADDR_VAR 0 9
44006: PUSH
44007: LD_VAR 0 1
44011: PUSH
44012: LD_VAR 0 3
44016: PLUS
44017: ST_TO_ADDR
// max_y := y + r ;
44018: LD_ADDR_VAR 0 10
44022: PUSH
44023: LD_VAR 0 2
44027: PUSH
44028: LD_VAR 0 3
44032: PLUS
44033: ST_TO_ADDR
// for _x = min_x to max_x do
44034: LD_ADDR_VAR 0 5
44038: PUSH
44039: DOUBLE
44040: LD_VAR 0 8
44044: DEC
44045: ST_TO_ADDR
44046: LD_VAR 0 9
44050: PUSH
44051: FOR_TO
44052: IFFALSE 44153
// for _y = min_y to max_y do
44054: LD_ADDR_VAR 0 6
44058: PUSH
44059: DOUBLE
44060: LD_VAR 0 7
44064: DEC
44065: ST_TO_ADDR
44066: LD_VAR 0 10
44070: PUSH
44071: FOR_TO
44072: IFFALSE 44149
// begin if not ValidHex ( _x , _y ) then
44074: LD_VAR 0 5
44078: PPUSH
44079: LD_VAR 0 6
44083: PPUSH
44084: CALL_OW 488
44088: NOT
44089: IFFALSE 44093
// continue ;
44091: GO 44071
// if GetResourceTypeXY ( _x , _y ) then
44093: LD_VAR 0 5
44097: PPUSH
44098: LD_VAR 0 6
44102: PPUSH
44103: CALL_OW 283
44107: IFFALSE 44147
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44109: LD_ADDR_VAR 0 4
44113: PUSH
44114: LD_VAR 0 4
44118: PPUSH
44119: LD_VAR 0 4
44123: PUSH
44124: LD_INT 1
44126: PLUS
44127: PPUSH
44128: LD_VAR 0 5
44132: PUSH
44133: LD_VAR 0 6
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PPUSH
44142: CALL_OW 1
44146: ST_TO_ADDR
// end ;
44147: GO 44071
44149: POP
44150: POP
44151: GO 44051
44153: POP
44154: POP
// end ;
44155: LD_VAR 0 4
44159: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44160: LD_INT 0
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
// if not units then
44170: LD_VAR 0 1
44174: NOT
44175: IFFALSE 44179
// exit ;
44177: GO 44711
// result := UnitFilter ( units , [ f_ok ] ) ;
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: LD_VAR 0 1
44188: PPUSH
44189: LD_INT 50
44191: PUSH
44192: EMPTY
44193: LIST
44194: PPUSH
44195: CALL_OW 72
44199: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44200: LD_ADDR_VAR 0 8
44204: PUSH
44205: LD_VAR 0 1
44209: PUSH
44210: LD_INT 1
44212: ARRAY
44213: PPUSH
44214: CALL_OW 255
44218: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44219: LD_ADDR_VAR 0 10
44223: PUSH
44224: LD_INT 29
44226: PUSH
44227: LD_INT 91
44229: PUSH
44230: LD_INT 49
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// if not result then
44238: LD_VAR 0 3
44242: NOT
44243: IFFALSE 44247
// exit ;
44245: GO 44711
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44247: LD_ADDR_VAR 0 5
44251: PUSH
44252: LD_INT 81
44254: PUSH
44255: LD_VAR 0 8
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PPUSH
44264: CALL_OW 69
44268: ST_TO_ADDR
// for i in result do
44269: LD_ADDR_VAR 0 4
44273: PUSH
44274: LD_VAR 0 3
44278: PUSH
44279: FOR_IN
44280: IFFALSE 44709
// begin tag := GetTag ( i ) + 1 ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_VAR 0 4
44291: PPUSH
44292: CALL_OW 110
44296: PUSH
44297: LD_INT 1
44299: PLUS
44300: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44301: LD_ADDR_VAR 0 7
44305: PUSH
44306: LD_VAR 0 4
44310: PPUSH
44311: CALL_OW 250
44315: PPUSH
44316: LD_VAR 0 4
44320: PPUSH
44321: CALL_OW 251
44325: PPUSH
44326: LD_INT 4
44328: PPUSH
44329: CALL 43902 0 3
44333: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44334: LD_VAR 0 4
44338: PPUSH
44339: CALL_OW 247
44343: PUSH
44344: LD_INT 2
44346: EQUAL
44347: IFFALSE 44359
44349: PUSH
44350: LD_VAR 0 7
44354: PUSH
44355: LD_INT 2
44357: GREATER
44358: AND
44359: IFFALSE 44379
44361: PUSH
44362: LD_VAR 0 4
44366: PPUSH
44367: CALL_OW 264
44371: PUSH
44372: LD_VAR 0 10
44376: IN
44377: NOT
44378: AND
44379: IFFALSE 44418
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44381: LD_VAR 0 4
44385: PPUSH
44386: LD_VAR 0 7
44390: PUSH
44391: LD_INT 1
44393: ARRAY
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PPUSH
44399: LD_VAR 0 7
44403: PUSH
44404: LD_INT 1
44406: ARRAY
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: PPUSH
44412: CALL_OW 116
44416: GO 44707
// if path > tag then
44418: LD_VAR 0 2
44422: PUSH
44423: LD_VAR 0 9
44427: GREATER
44428: IFFALSE 44636
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44430: LD_ADDR_VAR 0 6
44434: PUSH
44435: LD_VAR 0 5
44439: PPUSH
44440: LD_INT 91
44442: PUSH
44443: LD_VAR 0 4
44447: PUSH
44448: LD_INT 8
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: PPUSH
44456: CALL_OW 72
44460: ST_TO_ADDR
// if nearEnemy then
44461: LD_VAR 0 6
44465: IFFALSE 44534
// begin if GetWeapon ( i ) = ru_time_lapser then
44467: LD_VAR 0 4
44471: PPUSH
44472: CALL_OW 264
44476: PUSH
44477: LD_INT 49
44479: EQUAL
44480: IFFALSE 44508
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44482: LD_VAR 0 4
44486: PPUSH
44487: LD_VAR 0 6
44491: PPUSH
44492: LD_VAR 0 4
44496: PPUSH
44497: CALL_OW 74
44501: PPUSH
44502: CALL_OW 112
44506: GO 44532
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44508: LD_VAR 0 4
44512: PPUSH
44513: LD_VAR 0 6
44517: PPUSH
44518: LD_VAR 0 4
44522: PPUSH
44523: CALL_OW 74
44527: PPUSH
44528: CALL 45792 0 2
// end else
44532: GO 44634
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44534: LD_VAR 0 4
44538: PPUSH
44539: LD_VAR 0 2
44543: PUSH
44544: LD_VAR 0 9
44548: ARRAY
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: PPUSH
44554: LD_VAR 0 2
44558: PUSH
44559: LD_VAR 0 9
44563: ARRAY
44564: PUSH
44565: LD_INT 2
44567: ARRAY
44568: PPUSH
44569: CALL_OW 297
44573: PUSH
44574: LD_INT 6
44576: GREATER
44577: IFFALSE 44620
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44579: LD_VAR 0 4
44583: PPUSH
44584: LD_VAR 0 2
44588: PUSH
44589: LD_VAR 0 9
44593: ARRAY
44594: PUSH
44595: LD_INT 1
44597: ARRAY
44598: PPUSH
44599: LD_VAR 0 2
44603: PUSH
44604: LD_VAR 0 9
44608: ARRAY
44609: PUSH
44610: LD_INT 2
44612: ARRAY
44613: PPUSH
44614: CALL_OW 114
44618: GO 44634
// SetTag ( i , tag ) ;
44620: LD_VAR 0 4
44624: PPUSH
44625: LD_VAR 0 9
44629: PPUSH
44630: CALL_OW 109
// end else
44634: GO 44707
// if enemy then
44636: LD_VAR 0 5
44640: IFFALSE 44707
// begin if GetWeapon ( i ) = ru_time_lapser then
44642: LD_VAR 0 4
44646: PPUSH
44647: CALL_OW 264
44651: PUSH
44652: LD_INT 49
44654: EQUAL
44655: IFFALSE 44683
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44657: LD_VAR 0 4
44661: PPUSH
44662: LD_VAR 0 5
44666: PPUSH
44667: LD_VAR 0 4
44671: PPUSH
44672: CALL_OW 74
44676: PPUSH
44677: CALL_OW 112
44681: GO 44707
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44683: LD_VAR 0 4
44687: PPUSH
44688: LD_VAR 0 5
44692: PPUSH
44693: LD_VAR 0 4
44697: PPUSH
44698: CALL_OW 74
44702: PPUSH
44703: CALL 45792 0 2
// end ; end ;
44707: GO 44279
44709: POP
44710: POP
// end ;
44711: LD_VAR 0 3
44715: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44716: LD_INT 0
44718: PPUSH
44719: PPUSH
44720: PPUSH
// if not unit or IsInUnit ( unit ) then
44721: LD_VAR 0 1
44725: NOT
44726: IFTRUE 44739
44728: PUSH
44729: LD_VAR 0 1
44733: PPUSH
44734: CALL_OW 310
44738: OR
44739: IFFALSE 44743
// exit ;
44741: GO 44834
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44743: LD_ADDR_VAR 0 4
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: CALL_OW 250
44757: PPUSH
44758: LD_VAR 0 2
44762: PPUSH
44763: LD_INT 1
44765: PPUSH
44766: CALL_OW 272
44770: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44771: LD_ADDR_VAR 0 5
44775: PUSH
44776: LD_VAR 0 1
44780: PPUSH
44781: CALL_OW 251
44785: PPUSH
44786: LD_VAR 0 2
44790: PPUSH
44791: LD_INT 1
44793: PPUSH
44794: CALL_OW 273
44798: ST_TO_ADDR
// if ValidHex ( x , y ) then
44799: LD_VAR 0 4
44803: PPUSH
44804: LD_VAR 0 5
44808: PPUSH
44809: CALL_OW 488
44813: IFFALSE 44834
// ComTurnXY ( unit , x , y ) ;
44815: LD_VAR 0 1
44819: PPUSH
44820: LD_VAR 0 4
44824: PPUSH
44825: LD_VAR 0 5
44829: PPUSH
44830: CALL_OW 118
// end ;
44834: LD_VAR 0 3
44838: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44839: LD_INT 0
44841: PPUSH
44842: PPUSH
// result := false ;
44843: LD_ADDR_VAR 0 3
44847: PUSH
44848: LD_INT 0
44850: ST_TO_ADDR
// if not units then
44851: LD_VAR 0 2
44855: NOT
44856: IFFALSE 44860
// exit ;
44858: GO 44905
// for i in units do
44860: LD_ADDR_VAR 0 4
44864: PUSH
44865: LD_VAR 0 2
44869: PUSH
44870: FOR_IN
44871: IFFALSE 44903
// if See ( side , i ) then
44873: LD_VAR 0 1
44877: PPUSH
44878: LD_VAR 0 4
44882: PPUSH
44883: CALL_OW 292
44887: IFFALSE 44901
// begin result := true ;
44889: LD_ADDR_VAR 0 3
44893: PUSH
44894: LD_INT 1
44896: ST_TO_ADDR
// exit ;
44897: POP
44898: POP
44899: GO 44905
// end ;
44901: GO 44870
44903: POP
44904: POP
// end ;
44905: LD_VAR 0 3
44909: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44910: LD_INT 0
44912: PPUSH
44913: PPUSH
44914: PPUSH
44915: PPUSH
// if not unit or not points then
44916: LD_VAR 0 1
44920: NOT
44921: IFTRUE 44930
44923: PUSH
44924: LD_VAR 0 2
44928: NOT
44929: OR
44930: IFFALSE 44934
// exit ;
44932: GO 45024
// dist := 99999 ;
44934: LD_ADDR_VAR 0 5
44938: PUSH
44939: LD_INT 99999
44941: ST_TO_ADDR
// for i in points do
44942: LD_ADDR_VAR 0 4
44946: PUSH
44947: LD_VAR 0 2
44951: PUSH
44952: FOR_IN
44953: IFFALSE 45022
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44955: LD_ADDR_VAR 0 6
44959: PUSH
44960: LD_VAR 0 1
44964: PPUSH
44965: LD_VAR 0 4
44969: PUSH
44970: LD_INT 1
44972: ARRAY
44973: PPUSH
44974: LD_VAR 0 4
44978: PUSH
44979: LD_INT 2
44981: ARRAY
44982: PPUSH
44983: CALL_OW 297
44987: ST_TO_ADDR
// if tmpDist < dist then
44988: LD_VAR 0 6
44992: PUSH
44993: LD_VAR 0 5
44997: LESS
44998: IFFALSE 45020
// begin result := i ;
45000: LD_ADDR_VAR 0 3
45004: PUSH
45005: LD_VAR 0 4
45009: ST_TO_ADDR
// dist := tmpDist ;
45010: LD_ADDR_VAR 0 5
45014: PUSH
45015: LD_VAR 0 6
45019: ST_TO_ADDR
// end ; end ;
45020: GO 44952
45022: POP
45023: POP
// end ;
45024: LD_VAR 0 3
45028: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45029: LD_INT 0
45031: PPUSH
// uc_side := side ;
45032: LD_ADDR_OWVAR 20
45036: PUSH
45037: LD_VAR 0 1
45041: ST_TO_ADDR
// uc_nation := 3 ;
45042: LD_ADDR_OWVAR 21
45046: PUSH
45047: LD_INT 3
45049: ST_TO_ADDR
// vc_chassis := 25 ;
45050: LD_ADDR_OWVAR 37
45054: PUSH
45055: LD_INT 25
45057: ST_TO_ADDR
// vc_engine := engine_siberite ;
45058: LD_ADDR_OWVAR 39
45062: PUSH
45063: LD_INT 3
45065: ST_TO_ADDR
// vc_control := control_computer ;
45066: LD_ADDR_OWVAR 38
45070: PUSH
45071: LD_INT 3
45073: ST_TO_ADDR
// vc_weapon := 59 ;
45074: LD_ADDR_OWVAR 40
45078: PUSH
45079: LD_INT 59
45081: ST_TO_ADDR
// result := CreateVehicle ;
45082: LD_ADDR_VAR 0 5
45086: PUSH
45087: CALL_OW 45
45091: ST_TO_ADDR
// SetDir ( result , d ) ;
45092: LD_VAR 0 5
45096: PPUSH
45097: LD_VAR 0 4
45101: PPUSH
45102: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45106: LD_VAR 0 5
45110: PPUSH
45111: LD_VAR 0 2
45115: PPUSH
45116: LD_VAR 0 3
45120: PPUSH
45121: LD_INT 0
45123: PPUSH
45124: CALL_OW 48
// end ;
45128: LD_VAR 0 5
45132: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45133: LD_INT 0
45135: PPUSH
45136: PPUSH
45137: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45138: LD_ADDR_VAR 0 2
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45161: LD_VAR 0 1
45165: NOT
45166: IFTRUE 45199
45168: PUSH
45169: LD_VAR 0 1
45173: PPUSH
45174: CALL_OW 264
45178: PUSH
45179: LD_INT 12
45181: PUSH
45182: LD_INT 51
45184: PUSH
45185: LD_INT 32
45187: PUSH
45188: LD_INT 89
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: IN
45197: NOT
45198: OR
45199: IFFALSE 45203
// exit ;
45201: GO 45301
// for i := 1 to 3 do
45203: LD_ADDR_VAR 0 3
45207: PUSH
45208: DOUBLE
45209: LD_INT 1
45211: DEC
45212: ST_TO_ADDR
45213: LD_INT 3
45215: PUSH
45216: FOR_TO
45217: IFFALSE 45299
// begin tmp := GetCargo ( cargo , i ) ;
45219: LD_ADDR_VAR 0 4
45223: PUSH
45224: LD_VAR 0 1
45228: PPUSH
45229: LD_VAR 0 3
45233: PPUSH
45234: CALL_OW 289
45238: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45239: LD_ADDR_VAR 0 2
45243: PUSH
45244: LD_VAR 0 2
45248: PPUSH
45249: LD_VAR 0 3
45253: PPUSH
45254: LD_VAR 0 4
45258: PPUSH
45259: CALL_OW 1
45263: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45264: LD_ADDR_VAR 0 2
45268: PUSH
45269: LD_VAR 0 2
45273: PPUSH
45274: LD_INT 4
45276: PPUSH
45277: LD_VAR 0 2
45281: PUSH
45282: LD_INT 4
45284: ARRAY
45285: PUSH
45286: LD_VAR 0 4
45290: PLUS
45291: PPUSH
45292: CALL_OW 1
45296: ST_TO_ADDR
// end ;
45297: GO 45216
45299: POP
45300: POP
// end ;
45301: LD_VAR 0 2
45305: RET
// export function Length ( array ) ; begin
45306: LD_INT 0
45308: PPUSH
// result := array + 0 ;
45309: LD_ADDR_VAR 0 2
45313: PUSH
45314: LD_VAR 0 1
45318: PUSH
45319: LD_INT 0
45321: PLUS
45322: ST_TO_ADDR
// end ;
45323: LD_VAR 0 2
45327: RET
// export function PrepareArray ( array ) ; begin
45328: LD_INT 0
45330: PPUSH
// result := array diff 0 ;
45331: LD_ADDR_VAR 0 2
45335: PUSH
45336: LD_VAR 0 1
45340: PUSH
45341: LD_INT 0
45343: DIFF
45344: ST_TO_ADDR
// if not result [ 1 ] then
45345: LD_VAR 0 2
45349: PUSH
45350: LD_INT 1
45352: ARRAY
45353: NOT
45354: IFFALSE 45374
// result := Delete ( result , 1 ) ;
45356: LD_ADDR_VAR 0 2
45360: PUSH
45361: LD_VAR 0 2
45365: PPUSH
45366: LD_INT 1
45368: PPUSH
45369: CALL_OW 3
45373: ST_TO_ADDR
// end ;
45374: LD_VAR 0 2
45378: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45379: LD_INT 0
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
// sibRocketRange := 25 ;
45385: LD_ADDR_VAR 0 6
45389: PUSH
45390: LD_INT 25
45392: ST_TO_ADDR
// result := false ;
45393: LD_ADDR_VAR 0 4
45397: PUSH
45398: LD_INT 0
45400: ST_TO_ADDR
// for i := 0 to 5 do
45401: LD_ADDR_VAR 0 5
45405: PUSH
45406: DOUBLE
45407: LD_INT 0
45409: DEC
45410: ST_TO_ADDR
45411: LD_INT 5
45413: PUSH
45414: FOR_TO
45415: IFFALSE 45482
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45417: LD_VAR 0 1
45421: PPUSH
45422: LD_VAR 0 5
45426: PPUSH
45427: LD_VAR 0 6
45431: PPUSH
45432: CALL_OW 272
45436: PPUSH
45437: LD_VAR 0 2
45441: PPUSH
45442: LD_VAR 0 5
45446: PPUSH
45447: LD_VAR 0 6
45451: PPUSH
45452: CALL_OW 273
45456: PPUSH
45457: LD_VAR 0 3
45461: PPUSH
45462: CALL_OW 309
45466: IFFALSE 45480
// begin result := true ;
45468: LD_ADDR_VAR 0 4
45472: PUSH
45473: LD_INT 1
45475: ST_TO_ADDR
// exit ;
45476: POP
45477: POP
45478: GO 45484
// end ;
45480: GO 45414
45482: POP
45483: POP
// end ;
45484: LD_VAR 0 4
45488: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45489: LD_INT 0
45491: PPUSH
45492: PPUSH
45493: PPUSH
// if btype = b_depot then
45494: LD_VAR 0 2
45498: PUSH
45499: LD_INT 0
45501: EQUAL
45502: IFFALSE 45514
// begin result := true ;
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_INT 1
45511: ST_TO_ADDR
// exit ;
45512: GO 45634
// end ; pom := GetBase ( depot ) ;
45514: LD_ADDR_VAR 0 4
45518: PUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 274
45528: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45529: LD_ADDR_VAR 0 5
45533: PUSH
45534: LD_VAR 0 2
45538: PPUSH
45539: LD_VAR 0 1
45543: PPUSH
45544: CALL_OW 248
45548: PPUSH
45549: CALL_OW 450
45553: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45554: LD_ADDR_VAR 0 3
45558: PUSH
45559: LD_VAR 0 4
45563: PPUSH
45564: LD_INT 1
45566: PPUSH
45567: CALL_OW 275
45571: PUSH
45572: LD_VAR 0 5
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: GREATEREQUAL
45581: IFFALSE 45607
45583: PUSH
45584: LD_VAR 0 4
45588: PPUSH
45589: LD_INT 2
45591: PPUSH
45592: CALL_OW 275
45596: PUSH
45597: LD_VAR 0 5
45601: PUSH
45602: LD_INT 2
45604: ARRAY
45605: GREATEREQUAL
45606: AND
45607: IFFALSE 45633
45609: PUSH
45610: LD_VAR 0 4
45614: PPUSH
45615: LD_INT 3
45617: PPUSH
45618: CALL_OW 275
45622: PUSH
45623: LD_VAR 0 5
45627: PUSH
45628: LD_INT 3
45630: ARRAY
45631: GREATEREQUAL
45632: AND
45633: ST_TO_ADDR
// end ;
45634: LD_VAR 0 3
45638: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45639: LD_INT 0
45641: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45642: LD_VAR 0 1
45646: PPUSH
45647: LD_VAR 0 2
45651: PPUSH
45652: LD_INT 0
45654: PPUSH
45655: LD_INT 0
45657: PPUSH
45658: LD_INT 1
45660: PPUSH
45661: LD_INT 0
45663: PPUSH
45664: CALL_OW 587
// end ;
45668: LD_VAR 0 3
45672: RET
// export function CenterOnNow ( unit ) ; begin
45673: LD_INT 0
45675: PPUSH
// result := IsInUnit ( unit ) ;
45676: LD_ADDR_VAR 0 2
45680: PUSH
45681: LD_VAR 0 1
45685: PPUSH
45686: CALL_OW 310
45690: ST_TO_ADDR
// if not result then
45691: LD_VAR 0 2
45695: NOT
45696: IFFALSE 45708
// result := unit ;
45698: LD_ADDR_VAR 0 2
45702: PUSH
45703: LD_VAR 0 1
45707: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45708: LD_VAR 0 1
45712: PPUSH
45713: CALL_OW 87
// end ;
45717: LD_VAR 0 2
45721: RET
// export function ComMoveHex ( unit , hex ) ; begin
45722: LD_INT 0
45724: PPUSH
// if not hex then
45725: LD_VAR 0 2
45729: NOT
45730: IFFALSE 45734
// exit ;
45732: GO 45787
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45734: LD_VAR 0 2
45738: PUSH
45739: LD_INT 1
45741: ARRAY
45742: PPUSH
45743: LD_VAR 0 2
45747: PUSH
45748: LD_INT 2
45750: ARRAY
45751: PPUSH
45752: CALL_OW 428
45756: IFFALSE 45760
// exit ;
45758: GO 45787
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45760: LD_VAR 0 1
45764: PPUSH
45765: LD_VAR 0 2
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PPUSH
45774: LD_VAR 0 2
45778: PUSH
45779: LD_INT 2
45781: ARRAY
45782: PPUSH
45783: CALL_OW 111
// end ;
45787: LD_VAR 0 3
45791: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45792: LD_INT 0
45794: PPUSH
45795: PPUSH
45796: PPUSH
// if not unit or not enemy then
45797: LD_VAR 0 1
45801: NOT
45802: IFTRUE 45811
45804: PUSH
45805: LD_VAR 0 2
45809: NOT
45810: OR
45811: IFFALSE 45815
// exit ;
45813: GO 45941
// x := GetX ( enemy ) ;
45815: LD_ADDR_VAR 0 4
45819: PUSH
45820: LD_VAR 0 2
45824: PPUSH
45825: CALL_OW 250
45829: ST_TO_ADDR
// y := GetY ( enemy ) ;
45830: LD_ADDR_VAR 0 5
45834: PUSH
45835: LD_VAR 0 2
45839: PPUSH
45840: CALL_OW 251
45844: ST_TO_ADDR
// if ValidHex ( x , y ) then
45845: LD_VAR 0 4
45849: PPUSH
45850: LD_VAR 0 5
45854: PPUSH
45855: CALL_OW 488
45859: IFFALSE 45941
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45861: LD_VAR 0 2
45865: PPUSH
45866: CALL_OW 247
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: IN
45881: IFTRUE 45904
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 255
45893: PPUSH
45894: LD_VAR 0 2
45898: PPUSH
45899: CALL_OW 292
45903: OR
45904: IFFALSE 45922
// ComAttackUnit ( unit , enemy ) else
45906: LD_VAR 0 1
45910: PPUSH
45911: LD_VAR 0 2
45915: PPUSH
45916: CALL_OW 115
45920: GO 45941
// ComAgressiveMove ( unit , x , y ) ;
45922: LD_VAR 0 1
45926: PPUSH
45927: LD_VAR 0 4
45931: PPUSH
45932: LD_VAR 0 5
45936: PPUSH
45937: CALL_OW 114
// end ;
45941: LD_VAR 0 3
45945: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45946: LD_INT 0
45948: PPUSH
45949: PPUSH
45950: PPUSH
// list := AreaToList ( area , 0 ) ;
45951: LD_ADDR_VAR 0 5
45955: PUSH
45956: LD_VAR 0 1
45960: PPUSH
45961: LD_INT 0
45963: PPUSH
45964: CALL_OW 517
45968: ST_TO_ADDR
// if not list then
45969: LD_VAR 0 5
45973: NOT
45974: IFFALSE 45978
// exit ;
45976: GO 46108
// if all then
45978: LD_VAR 0 2
45982: IFFALSE 46070
// begin for i := 1 to list [ 1 ] do
45984: LD_ADDR_VAR 0 4
45988: PUSH
45989: DOUBLE
45990: LD_INT 1
45992: DEC
45993: ST_TO_ADDR
45994: LD_VAR 0 5
45998: PUSH
45999: LD_INT 1
46001: ARRAY
46002: PUSH
46003: FOR_TO
46004: IFFALSE 46066
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46006: LD_ADDR_VAR 0 3
46010: PUSH
46011: LD_VAR 0 3
46015: PPUSH
46016: LD_VAR 0 3
46020: PUSH
46021: LD_INT 1
46023: PLUS
46024: PPUSH
46025: LD_VAR 0 5
46029: PUSH
46030: LD_INT 1
46032: ARRAY
46033: PUSH
46034: LD_VAR 0 4
46038: ARRAY
46039: PUSH
46040: LD_VAR 0 5
46044: PUSH
46045: LD_INT 2
46047: ARRAY
46048: PUSH
46049: LD_VAR 0 4
46053: ARRAY
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PPUSH
46059: CALL_OW 1
46063: ST_TO_ADDR
46064: GO 46003
46066: POP
46067: POP
// exit ;
46068: GO 46108
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_VAR 0 5
46079: PUSH
46080: LD_INT 1
46082: ARRAY
46083: PUSH
46084: LD_INT 1
46086: ARRAY
46087: PUSH
46088: LD_VAR 0 5
46092: PUSH
46093: LD_INT 2
46095: ARRAY
46096: PUSH
46097: LD_INT 1
46099: ARRAY
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: ST_TO_ADDR
// end ;
46108: LD_VAR 0 3
46112: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46113: LD_INT 0
46115: PPUSH
46116: PPUSH
// list := AreaToList ( area , 0 ) ;
46117: LD_ADDR_VAR 0 4
46121: PUSH
46122: LD_VAR 0 1
46126: PPUSH
46127: LD_INT 0
46129: PPUSH
46130: CALL_OW 517
46134: ST_TO_ADDR
// if not list then
46135: LD_VAR 0 4
46139: NOT
46140: IFFALSE 46144
// exit ;
46142: GO 46185
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46144: LD_ADDR_VAR 0 3
46148: PUSH
46149: LD_VAR 0 4
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: PUSH
46158: LD_INT 1
46160: ARRAY
46161: PUSH
46162: LD_VAR 0 4
46166: PUSH
46167: LD_INT 2
46169: ARRAY
46170: PUSH
46171: LD_INT 1
46173: ARRAY
46174: PUSH
46175: LD_VAR 0 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: ST_TO_ADDR
// end ;
46185: LD_VAR 0 3
46189: RET
// export function First ( array ) ; begin
46190: LD_INT 0
46192: PPUSH
// if not array then
46193: LD_VAR 0 1
46197: NOT
46198: IFFALSE 46202
// exit ;
46200: GO 46216
// result := array [ 1 ] ;
46202: LD_ADDR_VAR 0 2
46206: PUSH
46207: LD_VAR 0 1
46211: PUSH
46212: LD_INT 1
46214: ARRAY
46215: ST_TO_ADDR
// end ;
46216: LD_VAR 0 2
46220: RET
// export function Last ( array ) ; begin
46221: LD_INT 0
46223: PPUSH
// if not array then
46224: LD_VAR 0 1
46228: NOT
46229: IFFALSE 46233
// exit ;
46231: GO 46249
// result := array [ array ] ;
46233: LD_ADDR_VAR 0 2
46237: PUSH
46238: LD_VAR 0 1
46242: PUSH
46243: LD_VAR 0 1
46247: ARRAY
46248: ST_TO_ADDR
// end ;
46249: LD_VAR 0 2
46253: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46254: LD_INT 0
46256: PPUSH
46257: PPUSH
// result := [ ] ;
46258: LD_ADDR_VAR 0 5
46262: PUSH
46263: EMPTY
46264: ST_TO_ADDR
// if not array then
46265: LD_VAR 0 1
46269: NOT
46270: IFFALSE 46274
// exit ;
46272: GO 46386
// for i := 1 to array do
46274: LD_ADDR_VAR 0 6
46278: PUSH
46279: DOUBLE
46280: LD_INT 1
46282: DEC
46283: ST_TO_ADDR
46284: LD_VAR 0 1
46288: PUSH
46289: FOR_TO
46290: IFFALSE 46384
// if array [ i ] [ index ] = value then
46292: LD_VAR 0 1
46296: PUSH
46297: LD_VAR 0 6
46301: ARRAY
46302: PUSH
46303: LD_VAR 0 2
46307: ARRAY
46308: PUSH
46309: LD_VAR 0 3
46313: EQUAL
46314: IFFALSE 46382
// begin if indexColumn then
46316: LD_VAR 0 4
46320: IFFALSE 46356
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46322: LD_ADDR_VAR 0 5
46326: PUSH
46327: LD_VAR 0 5
46331: PPUSH
46332: LD_VAR 0 1
46336: PUSH
46337: LD_VAR 0 6
46341: ARRAY
46342: PUSH
46343: LD_VAR 0 4
46347: ARRAY
46348: PPUSH
46349: CALL 41394 0 2
46353: ST_TO_ADDR
46354: GO 46382
// result := Join ( result , array [ i ] ) ;
46356: LD_ADDR_VAR 0 5
46360: PUSH
46361: LD_VAR 0 5
46365: PPUSH
46366: LD_VAR 0 1
46370: PUSH
46371: LD_VAR 0 6
46375: ARRAY
46376: PPUSH
46377: CALL 41394 0 2
46381: ST_TO_ADDR
// end ;
46382: GO 46289
46384: POP
46385: POP
// end ;
46386: LD_VAR 0 5
46390: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46391: LD_INT 0
46393: PPUSH
// if not vehicles or not parkingPoint then
46394: LD_VAR 0 1
46398: NOT
46399: IFTRUE 46408
46401: PUSH
46402: LD_VAR 0 2
46406: NOT
46407: OR
46408: IFFALSE 46412
// exit ;
46410: GO 46510
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46412: LD_ADDR_VAR 0 1
46416: PUSH
46417: LD_VAR 0 1
46421: PPUSH
46422: LD_INT 50
46424: PUSH
46425: EMPTY
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: LD_INT 92
46433: PUSH
46434: LD_VAR 0 2
46438: PUSH
46439: LD_INT 1
46441: ARRAY
46442: PUSH
46443: LD_VAR 0 2
46447: PUSH
46448: LD_INT 2
46450: ARRAY
46451: PUSH
46452: LD_INT 8
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PPUSH
46469: CALL_OW 72
46473: ST_TO_ADDR
// if not vehicles then
46474: LD_VAR 0 1
46478: NOT
46479: IFFALSE 46483
// exit ;
46481: GO 46510
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46483: LD_VAR 0 1
46487: PPUSH
46488: LD_VAR 0 2
46492: PUSH
46493: LD_INT 1
46495: ARRAY
46496: PPUSH
46497: LD_VAR 0 2
46501: PUSH
46502: LD_INT 2
46504: ARRAY
46505: PPUSH
46506: CALL_OW 111
// end ;
46510: LD_VAR 0 3
46514: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46515: LD_INT 0
46517: PPUSH
46518: PPUSH
46519: PPUSH
// if not side or not area then
46520: LD_VAR 0 1
46524: NOT
46525: IFTRUE 46534
46527: PUSH
46528: LD_VAR 0 2
46532: NOT
46533: OR
46534: IFFALSE 46538
// exit ;
46536: GO 46657
// tmp := AreaToList ( area , 0 ) ;
46538: LD_ADDR_VAR 0 5
46542: PUSH
46543: LD_VAR 0 2
46547: PPUSH
46548: LD_INT 0
46550: PPUSH
46551: CALL_OW 517
46555: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46556: LD_ADDR_VAR 0 4
46560: PUSH
46561: DOUBLE
46562: LD_INT 1
46564: DEC
46565: ST_TO_ADDR
46566: LD_VAR 0 5
46570: PUSH
46571: LD_INT 1
46573: ARRAY
46574: PUSH
46575: FOR_TO
46576: IFFALSE 46655
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46578: LD_VAR 0 5
46582: PUSH
46583: LD_INT 1
46585: ARRAY
46586: PUSH
46587: LD_VAR 0 4
46591: ARRAY
46592: PPUSH
46593: LD_VAR 0 5
46597: PUSH
46598: LD_INT 2
46600: ARRAY
46601: PUSH
46602: LD_VAR 0 4
46606: ARRAY
46607: PPUSH
46608: CALL_OW 351
46612: IFFALSE 46653
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46614: LD_VAR 0 5
46618: PUSH
46619: LD_INT 1
46621: ARRAY
46622: PUSH
46623: LD_VAR 0 4
46627: ARRAY
46628: PPUSH
46629: LD_VAR 0 5
46633: PUSH
46634: LD_INT 2
46636: ARRAY
46637: PUSH
46638: LD_VAR 0 4
46642: ARRAY
46643: PPUSH
46644: LD_VAR 0 1
46648: PPUSH
46649: CALL_OW 244
// end ;
46653: GO 46575
46655: POP
46656: POP
// end ;
46657: LD_VAR 0 3
46661: RET
// export function UniqueArray ( array ) ; var i ; begin
46662: LD_INT 0
46664: PPUSH
46665: PPUSH
// result := [ ] ;
46666: LD_ADDR_VAR 0 2
46670: PUSH
46671: EMPTY
46672: ST_TO_ADDR
// if not array then
46673: LD_VAR 0 1
46677: NOT
46678: IFFALSE 46682
// exit ;
46680: GO 46743
// for i := 1 to array do
46682: LD_ADDR_VAR 0 3
46686: PUSH
46687: DOUBLE
46688: LD_INT 1
46690: DEC
46691: ST_TO_ADDR
46692: LD_VAR 0 1
46696: PUSH
46697: FOR_TO
46698: IFFALSE 46741
// if not array [ i ] in result then
46700: LD_VAR 0 1
46704: PUSH
46705: LD_VAR 0 3
46709: ARRAY
46710: PUSH
46711: LD_VAR 0 2
46715: IN
46716: NOT
46717: IFFALSE 46739
// result := Join ( result , i ) ;
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_VAR 0 2
46728: PPUSH
46729: LD_VAR 0 3
46733: PPUSH
46734: CALL 41394 0 2
46738: ST_TO_ADDR
46739: GO 46697
46741: POP
46742: POP
// end ; end_of_file
46743: LD_VAR 0 2
46747: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46748: LD_INT 0
46750: PPUSH
46751: PPUSH
// disable ( mpActive ) ;
46752: LD_INT 100
46754: DISABLE_MARKED
// disable ( mpWin ) ;
46755: LD_INT 101
46757: DISABLE_MARKED
// disable ( mpLose ) ;
46758: LD_INT 102
46760: DISABLE_MARKED
// mpGameType := 0 ;
46761: LD_ADDR_EXP 5
46765: PUSH
46766: LD_INT 0
46768: ST_TO_ADDR
// mpGameSettings := [ ] ;
46769: LD_ADDR_EXP 8
46773: PUSH
46774: EMPTY
46775: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46776: LD_ADDR_EXP 6
46780: PUSH
46781: EMPTY
46782: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46783: LD_ADDR_EXP 7
46787: PUSH
46788: EMPTY
46789: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46790: LD_ADDR_EXP 31
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46805: LD_ADDR_EXP 14
46809: PUSH
46810: EMPTY
46811: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46812: LD_ADDR_EXP 15
46816: PUSH
46817: EMPTY
46818: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46819: LD_ADDR_EXP 43
46823: PUSH
46824: EMPTY
46825: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46826: LD_ADDR_EXP 44
46830: PUSH
46831: EMPTY
46832: ST_TO_ADDR
// mpDepots := [ ] ;
46833: LD_ADDR_EXP 16
46837: PUSH
46838: EMPTY
46839: ST_TO_ADDR
// mpBuildings := [ ] ;
46840: LD_ADDR_EXP 19
46844: PUSH
46845: EMPTY
46846: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46847: LD_ADDR_EXP 20
46851: PUSH
46852: EMPTY
46853: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46854: LD_ADDR_EXP 21
46858: PUSH
46859: EMPTY
46860: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46861: LD_ADDR_EXP 22
46865: PUSH
46866: EMPTY
46867: ST_TO_ADDR
// mpStartingResources := [ ] ;
46868: LD_ADDR_EXP 17
46872: PUSH
46873: EMPTY
46874: ST_TO_ADDR
// mpStartPos := [ ] ;
46875: LD_ADDR_EXP 23
46879: PUSH
46880: EMPTY
46881: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46882: LD_ADDR_EXP 24
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46891: LD_ADDR_EXP 25
46895: PUSH
46896: EMPTY
46897: ST_TO_ADDR
// mpApemans := [ ] ;
46898: LD_ADDR_EXP 32
46902: PUSH
46903: EMPTY
46904: ST_TO_ADDR
// mpApemansArea := [ ] ;
46905: LD_ADDR_EXP 33
46909: PUSH
46910: EMPTY
46911: ST_TO_ADDR
// mpRespawn := [ ] ;
46912: LD_ADDR_EXP 35
46916: PUSH
46917: EMPTY
46918: ST_TO_ADDR
// mpKingArea := 0 ;
46919: LD_ADDR_EXP 36
46923: PUSH
46924: LD_INT 0
46926: ST_TO_ADDR
// mpPoints := [ ] ;
46927: LD_ADDR_EXP 37
46931: PUSH
46932: EMPTY
46933: ST_TO_ADDR
// mpVehicles := 0 ;
46934: LD_ADDR_EXP 38
46938: PUSH
46939: LD_INT 0
46941: ST_TO_ADDR
// mpShipments := 0 ;
46942: LD_ADDR_EXP 29
46946: PUSH
46947: LD_INT 0
46949: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46950: LD_ADDR_EXP 42
46954: PUSH
46955: EMPTY
46956: PUSH
46957: EMPTY
46958: PUSH
46959: EMPTY
46960: PUSH
46961: EMPTY
46962: PUSH
46963: EMPTY
46964: PUSH
46965: EMPTY
46966: PUSH
46967: EMPTY
46968: PUSH
46969: EMPTY
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46981: LD_ADDR_EXP 34
46985: PUSH
46986: EMPTY
46987: PUSH
46988: EMPTY
46989: PUSH
46990: EMPTY
46991: PUSH
46992: EMPTY
46993: PUSH
46994: EMPTY
46995: PUSH
46996: EMPTY
46997: PUSH
46998: EMPTY
46999: PUSH
47000: EMPTY
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// mpEmissions := 0 ;
47012: LD_ADDR_EXP 39
47016: PUSH
47017: LD_INT 0
47019: ST_TO_ADDR
// mpTeleports := 0 ;
47020: LD_ADDR_EXP 45
47024: PUSH
47025: LD_INT 0
47027: ST_TO_ADDR
// mpArtifacts := 0 ;
47028: LD_ADDR_EXP 46
47032: PUSH
47033: LD_INT 0
47035: ST_TO_ADDR
// mpPeopleSkill := 3 ;
47036: LD_ADDR_EXP 27
47040: PUSH
47041: LD_INT 3
47043: ST_TO_ADDR
// mpPeopleAmount := 15 ;
47044: LD_ADDR_EXP 26
47048: PUSH
47049: LD_INT 15
47051: ST_TO_ADDR
// mpDisplayStrings := 0 ;
47052: LD_ADDR_EXP 40
47056: PUSH
47057: LD_INT 0
47059: ST_TO_ADDR
// mpGameActive := false ;
47060: LD_ADDR_EXP 41
47064: PUSH
47065: LD_INT 0
47067: ST_TO_ADDR
// mpBlockRespThread := false ;
47068: LD_ADDR_EXP 47
47072: PUSH
47073: LD_INT 0
47075: ST_TO_ADDR
// for i := 1 to 32 do
47076: LD_ADDR_VAR 0 2
47080: PUSH
47081: DOUBLE
47082: LD_INT 1
47084: DEC
47085: ST_TO_ADDR
47086: LD_INT 32
47088: PUSH
47089: FOR_TO
47090: IFFALSE 47117
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
47092: LD_ADDR_EXP 8
47096: PUSH
47097: LD_EXP 8
47101: PPUSH
47102: LD_VAR 0 2
47106: PPUSH
47107: LD_INT 0
47109: PPUSH
47110: CALL_OW 1
47114: ST_TO_ADDR
47115: GO 47089
47117: POP
47118: POP
// end ;
47119: LD_VAR 0 1
47123: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
47124: LD_INT 0
47126: PPUSH
47127: PPUSH
47128: PPUSH
47129: PPUSH
47130: PPUSH
47131: PPUSH
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
47136: PPUSH
47137: PPUSH
47138: PPUSH
47139: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
47140: LD_ADDR_VAR 0 14
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: LD_INT 5
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// for i in gameTypes do
47163: LD_ADDR_VAR 0 2
47167: PUSH
47168: LD_VAR 0 14
47172: PUSH
47173: FOR_IN
47174: IFFALSE 47183
// disable ( i ) ;
47176: LD_VAR 0 2
47180: DISABLE_MARKED
47181: GO 47173
47183: POP
47184: POP
// if Multiplayer then
47185: LD_OWVAR 4
47189: IFFALSE 47373
// begin mpGameType := mp_game_type ;
47191: LD_ADDR_EXP 5
47195: PUSH
47196: LD_OWVAR 6
47200: ST_TO_ADDR
// your_side := mp_player_side ;
47201: LD_ADDR_OWVAR 2
47205: PUSH
47206: LD_OWVAR 7
47210: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47211: LD_ADDR_EXP 9
47215: PUSH
47216: LD_OWVAR 17
47220: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47221: LD_ADDR_EXP 10
47225: PUSH
47226: LD_OWVAR 15
47230: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47231: LD_ADDR_EXP 11
47235: PUSH
47236: LD_OWVAR 16
47240: ST_TO_ADDR
// mpTeams := mp_teams ;
47241: LD_ADDR_EXP 12
47245: PUSH
47246: LD_OWVAR 12
47250: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47251: LD_ADDR_VAR 0 2
47255: PUSH
47256: DOUBLE
47257: LD_INT 1
47259: DEC
47260: ST_TO_ADDR
47261: LD_EXP 6
47265: PPUSH
47266: CALL 5462 0 1
47270: PUSH
47271: FOR_TO
47272: IFFALSE 47348
// begin setting := mpGameSettingsKeys [ i ] ;
47274: LD_ADDR_VAR 0 12
47278: PUSH
47279: LD_EXP 6
47283: PUSH
47284: LD_VAR 0 2
47288: ARRAY
47289: ST_TO_ADDR
// if setting then
47290: LD_VAR 0 12
47294: IFFALSE 47346
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47296: LD_ADDR_EXP 8
47300: PUSH
47301: LD_EXP 8
47305: PPUSH
47306: LD_VAR 0 2
47310: PPUSH
47311: LD_EXP 7
47315: PUSH
47316: LD_VAR 0 2
47320: ARRAY
47321: PUSH
47322: LD_VAR 0 2
47326: PUSH
47327: LD_INT 1
47329: MINUS
47330: PPUSH
47331: CALL_OW 426
47335: PUSH
47336: LD_INT 1
47338: PLUS
47339: ARRAY
47340: PPUSH
47341: CALL_OW 1
47345: ST_TO_ADDR
// end ;
47346: GO 47271
47348: POP
47349: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47350: LD_ADDR_EXP 13
47354: PUSH
47355: LD_EXP 10
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: DIFF
47366: PUSH
47367: LD_INT 1
47369: GREATER
47370: ST_TO_ADDR
// end else
47371: GO 47373
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47373: LD_EXP 5
47377: PPUSH
47378: CALL 852 0 1
// if Count ( mpMarkedAreas ) then
47382: LD_EXP 20
47386: PPUSH
47387: CALL 5462 0 1
47391: IFFALSE 47422
// begin for i in mpMarkedAreas do
47393: LD_ADDR_VAR 0 2
47397: PUSH
47398: LD_EXP 20
47402: PUSH
47403: FOR_IN
47404: IFFALSE 47420
// SetAreaMapShow ( i , 0 ) ;
47406: LD_VAR 0 2
47410: PPUSH
47411: LD_INT 0
47413: PPUSH
47414: CALL_OW 424
47418: GO 47403
47420: POP
47421: POP
// end ; for i := 1 to 8 do
47422: LD_ADDR_VAR 0 2
47426: PUSH
47427: DOUBLE
47428: LD_INT 1
47430: DEC
47431: ST_TO_ADDR
47432: LD_INT 8
47434: PUSH
47435: FOR_TO
47436: IFFALSE 48772
// begin if not mpSidePositions [ i ] then
47438: LD_EXP 9
47442: PUSH
47443: LD_VAR 0 2
47447: ARRAY
47448: NOT
47449: IFFALSE 47453
// continue ;
47451: GO 47435
// side := i ;
47453: LD_ADDR_VAR 0 7
47457: PUSH
47458: LD_VAR 0 2
47462: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47463: LD_ADDR_VAR 0 9
47467: PUSH
47468: LD_EXP 11
47472: PUSH
47473: LD_VAR 0 2
47477: ARRAY
47478: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47479: LD_ADDR_VAR 0 8
47483: PUSH
47484: LD_EXP 9
47488: PUSH
47489: LD_VAR 0 2
47493: ARRAY
47494: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47495: LD_EXP 14
47499: PPUSH
47500: CALL 5462 0 1
47504: IFFALSE 47581
// begin for j in mpOilDeposits [ pos ] do
47506: LD_ADDR_VAR 0 3
47510: PUSH
47511: LD_EXP 14
47515: PUSH
47516: LD_VAR 0 8
47520: ARRAY
47521: PUSH
47522: FOR_IN
47523: IFFALSE 47579
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47525: LD_VAR 0 3
47529: PUSH
47530: LD_INT 1
47532: ARRAY
47533: PPUSH
47534: LD_VAR 0 3
47538: PUSH
47539: LD_INT 2
47541: ARRAY
47542: PPUSH
47543: LD_INT 2
47545: PPUSH
47546: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47550: LD_VAR 0 3
47554: PUSH
47555: LD_INT 1
47557: ARRAY
47558: PPUSH
47559: LD_VAR 0 3
47563: PUSH
47564: LD_INT 2
47566: ARRAY
47567: PPUSH
47568: LD_VAR 0 7
47572: PPUSH
47573: CALL_OW 441
// end ;
47577: GO 47522
47579: POP
47580: POP
// end ; if Count ( mpSibDeposits ) then
47581: LD_EXP 15
47585: PPUSH
47586: CALL 5462 0 1
47590: IFFALSE 47667
// begin for j in mpSibDeposits [ pos ] do
47592: LD_ADDR_VAR 0 3
47596: PUSH
47597: LD_EXP 15
47601: PUSH
47602: LD_VAR 0 8
47606: ARRAY
47607: PUSH
47608: FOR_IN
47609: IFFALSE 47665
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47611: LD_VAR 0 3
47615: PUSH
47616: LD_INT 1
47618: ARRAY
47619: PPUSH
47620: LD_VAR 0 3
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: PPUSH
47629: LD_INT 3
47631: PPUSH
47632: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47636: LD_VAR 0 3
47640: PUSH
47641: LD_INT 1
47643: ARRAY
47644: PPUSH
47645: LD_VAR 0 3
47649: PUSH
47650: LD_INT 2
47652: ARRAY
47653: PPUSH
47654: LD_VAR 0 7
47658: PPUSH
47659: CALL_OW 441
// end ;
47663: GO 47608
47665: POP
47666: POP
// end ; InitBc ;
47667: CALL_OW 21
// InitUc ;
47671: CALL_OW 18
// uc_side := side ;
47675: LD_ADDR_OWVAR 20
47679: PUSH
47680: LD_VAR 0 7
47684: ST_TO_ADDR
// uc_nation := nation ;
47685: LD_ADDR_OWVAR 21
47689: PUSH
47690: LD_VAR 0 9
47694: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47695: LD_EXP 24
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: GREATER
47704: IFFALSE 47863
// begin x := mpStartPos [ pos ] [ 1 ] ;
47706: LD_ADDR_VAR 0 5
47710: PUSH
47711: LD_EXP 23
47715: PUSH
47716: LD_VAR 0 8
47720: ARRAY
47721: PUSH
47722: LD_INT 1
47724: ARRAY
47725: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47726: LD_ADDR_VAR 0 6
47730: PUSH
47731: LD_EXP 23
47735: PUSH
47736: LD_VAR 0 8
47740: ARRAY
47741: PUSH
47742: LD_INT 2
47744: ARRAY
47745: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47746: LD_VAR 0 5
47750: PPUSH
47751: LD_VAR 0 6
47755: PPUSH
47756: LD_INT 12
47758: PPUSH
47759: LD_INT 2
47761: PPUSH
47762: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47766: LD_ADDR_EXP 25
47770: PUSH
47771: LD_EXP 25
47775: PPUSH
47776: LD_VAR 0 7
47780: PPUSH
47781: LD_VAR 0 7
47785: PPUSH
47786: LD_VAR 0 5
47790: PPUSH
47791: LD_VAR 0 6
47795: PPUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 100
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 70
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: LD_INT 40
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 10
47828: PUSH
47829: LD_INT 25
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 20
47838: PUSH
47839: LD_INT 100
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: PPUSH
47853: CALL_OW 418
47857: PPUSH
47858: CALL_OW 1
47862: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47863: LD_EXP 16
47867: PPUSH
47868: CALL 5462 0 1
47872: IFFALSE 48056
// begin if mpGameType = GameTypeSurvival then
47874: LD_EXP 5
47878: PUSH
47879: LD_INT 2
47881: EQUAL
47882: IFFALSE 47902
// begin bc_level := 10 ;
47884: LD_ADDR_OWVAR 43
47888: PUSH
47889: LD_INT 10
47891: ST_TO_ADDR
// bc_type := b_warehouse ;
47892: LD_ADDR_OWVAR 42
47896: PUSH
47897: LD_INT 1
47899: ST_TO_ADDR
// end else
47900: GO 47918
// begin bc_level := 0 ;
47902: LD_ADDR_OWVAR 43
47906: PUSH
47907: LD_INT 0
47909: ST_TO_ADDR
// bc_type := b_depot ;
47910: LD_ADDR_OWVAR 42
47914: PUSH
47915: LD_INT 0
47917: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47918: LD_ADDR_VAR 0 4
47922: PUSH
47923: LD_EXP 16
47927: PUSH
47928: LD_VAR 0 8
47932: ARRAY
47933: PUSH
47934: LD_INT 1
47936: ARRAY
47937: PPUSH
47938: LD_EXP 16
47942: PUSH
47943: LD_VAR 0 8
47947: ARRAY
47948: PUSH
47949: LD_INT 2
47951: ARRAY
47952: PPUSH
47953: LD_EXP 16
47957: PUSH
47958: LD_VAR 0 8
47962: ARRAY
47963: PUSH
47964: LD_INT 3
47966: ARRAY
47967: PPUSH
47968: CALL_OW 47
47972: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47973: LD_VAR 0 4
47977: PPUSH
47978: LD_STRING @
47980: PUSH
47981: LD_VAR 0 7
47985: STR
47986: PPUSH
47987: CALL_OW 500
// if Count ( mpStartingResources ) then
47991: LD_EXP 17
47995: PPUSH
47996: CALL 5462 0 1
48000: IFFALSE 48054
// begin for j := 1 to mpStartingResources do
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: DOUBLE
48008: LD_INT 1
48010: DEC
48011: ST_TO_ADDR
48012: LD_EXP 17
48016: PUSH
48017: FOR_TO
48018: IFFALSE 48052
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
48020: LD_VAR 0 4
48024: PPUSH
48025: CALL_OW 274
48029: PPUSH
48030: LD_VAR 0 3
48034: PPUSH
48035: LD_EXP 17
48039: PUSH
48040: LD_VAR 0 3
48044: ARRAY
48045: PPUSH
48046: CALL_OW 277
48050: GO 48017
48052: POP
48053: POP
// end ; end else
48054: GO 48263
// if Count ( mpStartingResources ) then
48056: LD_EXP 17
48060: PPUSH
48061: CALL 5462 0 1
48065: IFFALSE 48263
// begin x := mpStartPos [ pos ] [ 1 ] ;
48067: LD_ADDR_VAR 0 5
48071: PUSH
48072: LD_EXP 23
48076: PUSH
48077: LD_VAR 0 8
48081: ARRAY
48082: PUSH
48083: LD_INT 1
48085: ARRAY
48086: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48087: LD_ADDR_VAR 0 6
48091: PUSH
48092: LD_EXP 23
48096: PUSH
48097: LD_VAR 0 8
48101: ARRAY
48102: PUSH
48103: LD_INT 2
48105: ARRAY
48106: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48107: LD_ADDR_VAR 0 3
48111: PUSH
48112: DOUBLE
48113: LD_INT 1
48115: DEC
48116: ST_TO_ADDR
48117: LD_EXP 17
48121: PUSH
48122: FOR_TO
48123: IFFALSE 48261
// begin resources := mpStartingResources [ j ] ;
48125: LD_ADDR_VAR 0 13
48129: PUSH
48130: LD_EXP 17
48134: PUSH
48135: LD_VAR 0 3
48139: ARRAY
48140: ST_TO_ADDR
// if resources = 0 then
48141: LD_VAR 0 13
48145: PUSH
48146: LD_INT 0
48148: EQUAL
48149: IFFALSE 48153
// continue ;
48151: GO 48122
// repeat if resources >= 50 then
48153: LD_VAR 0 13
48157: PUSH
48158: LD_INT 50
48160: GREATEREQUAL
48161: IFFALSE 48207
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48163: LD_VAR 0 3
48167: PPUSH
48168: LD_INT 5
48170: PPUSH
48171: LD_VAR 0 5
48175: PPUSH
48176: LD_VAR 0 6
48180: PPUSH
48181: LD_INT 6
48183: PPUSH
48184: LD_INT 0
48186: PPUSH
48187: CALL_OW 60
// resources := resources - 50 ;
48191: LD_ADDR_VAR 0 13
48195: PUSH
48196: LD_VAR 0 13
48200: PUSH
48201: LD_INT 50
48203: MINUS
48204: ST_TO_ADDR
// end else
48205: GO 48249
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48207: LD_VAR 0 3
48211: PPUSH
48212: LD_VAR 0 13
48216: PUSH
48217: LD_INT 10
48219: DIV
48220: PPUSH
48221: LD_VAR 0 5
48225: PPUSH
48226: LD_VAR 0 6
48230: PPUSH
48231: LD_INT 6
48233: PPUSH
48234: LD_INT 0
48236: PPUSH
48237: CALL_OW 60
// resources := 0 ;
48241: LD_ADDR_VAR 0 13
48245: PUSH
48246: LD_INT 0
48248: ST_TO_ADDR
// end ; until resources <= 0 ;
48249: LD_VAR 0 13
48253: PUSH
48254: LD_INT 0
48256: LESSEQUAL
48257: IFFALSE 48153
// end ;
48259: GO 48122
48261: POP
48262: POP
// end ; if Count ( mpBuildings ) then
48263: LD_EXP 19
48267: PPUSH
48268: CALL 5462 0 1
48272: IFFALSE 48350
// begin for j in mpBuildings [ pos ] do
48274: LD_ADDR_VAR 0 3
48278: PUSH
48279: LD_EXP 19
48283: PUSH
48284: LD_VAR 0 8
48288: ARRAY
48289: PUSH
48290: FOR_IN
48291: IFFALSE 48348
// begin bc_level := 0 ;
48293: LD_ADDR_OWVAR 43
48297: PUSH
48298: LD_INT 0
48300: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48301: LD_ADDR_OWVAR 42
48305: PUSH
48306: LD_VAR 0 3
48310: PUSH
48311: LD_INT 1
48313: ARRAY
48314: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48315: LD_VAR 0 3
48319: PUSH
48320: LD_INT 2
48322: ARRAY
48323: PPUSH
48324: LD_VAR 0 3
48328: PUSH
48329: LD_INT 3
48331: ARRAY
48332: PPUSH
48333: LD_VAR 0 3
48337: PUSH
48338: LD_INT 4
48340: ARRAY
48341: PPUSH
48342: CALL_OW 47
// end ;
48346: GO 48290
48348: POP
48349: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48350: LD_EXP 28
48354: IFFALSE 48374
48356: PUSH
48357: LD_INT 20
48359: PPUSH
48360: LD_VAR 0 7
48364: PPUSH
48365: CALL_OW 321
48369: PUSH
48370: LD_INT 1
48372: EQUAL
48373: AND
48374: IFFALSE 48391
// SetTech ( tech_SibDet , side , state_researched ) ;
48376: LD_INT 20
48378: PPUSH
48379: LD_VAR 0 7
48383: PPUSH
48384: LD_INT 2
48386: PPUSH
48387: CALL_OW 322
// if not mpArtifacts then
48391: LD_EXP 46
48395: NOT
48396: IFFALSE 48413
// SetTech ( tech_artifact , side , state_disabled ) ;
48398: LD_INT 24
48400: PPUSH
48401: LD_VAR 0 7
48405: PPUSH
48406: LD_INT 0
48408: PPUSH
48409: CALL_OW 322
// if mpSibBomb = 1 then
48413: LD_EXP 30
48417: PUSH
48418: LD_INT 1
48420: EQUAL
48421: IFFALSE 48440
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48423: LD_INT 25
48425: PPUSH
48426: LD_VAR 0 7
48430: PPUSH
48431: LD_INT 1
48433: PPUSH
48434: CALL_OW 322
// end else
48438: GO 48455
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48440: LD_INT 25
48442: PPUSH
48443: LD_VAR 0 7
48447: PPUSH
48448: LD_INT 0
48450: PPUSH
48451: CALL_OW 322
// end ; if mpVehicles then
48455: LD_EXP 38
48459: IFFALSE 48558
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48461: LD_ADDR_VAR 0 3
48465: PUSH
48466: LD_VAR 0 7
48470: PPUSH
48471: LD_VAR 0 9
48475: PPUSH
48476: LD_EXP 38
48480: PPUSH
48481: CALL 49682 0 3
48485: PUSH
48486: FOR_IN
48487: IFFALSE 48556
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48489: LD_VAR 0 3
48493: PPUSH
48494: LD_INT 0
48496: PPUSH
48497: LD_INT 5
48499: PPUSH
48500: CALL_OW 12
48504: PPUSH
48505: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48509: LD_VAR 0 3
48513: PPUSH
48514: LD_EXP 23
48518: PUSH
48519: LD_VAR 0 8
48523: ARRAY
48524: PUSH
48525: LD_INT 1
48527: ARRAY
48528: PPUSH
48529: LD_EXP 23
48533: PUSH
48534: LD_VAR 0 8
48538: ARRAY
48539: PUSH
48540: LD_INT 2
48542: ARRAY
48543: PPUSH
48544: LD_INT 12
48546: PPUSH
48547: LD_INT 0
48549: PPUSH
48550: CALL_OW 50
// end ;
48554: GO 48486
48556: POP
48557: POP
// end ; uc_nation := nation ;
48558: LD_ADDR_OWVAR 21
48562: PUSH
48563: LD_VAR 0 9
48567: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48568: LD_ADDR_VAR 0 11
48572: PUSH
48573: LD_VAR 0 7
48577: PPUSH
48578: LD_VAR 0 9
48582: PPUSH
48583: LD_EXP 26
48587: PPUSH
48588: LD_EXP 27
48592: PPUSH
48593: CALL 49184 0 4
48597: ST_TO_ADDR
// for j in team do
48598: LD_ADDR_VAR 0 3
48602: PUSH
48603: LD_VAR 0 11
48607: PUSH
48608: FOR_IN
48609: IFFALSE 48658
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48611: LD_VAR 0 3
48615: PPUSH
48616: LD_EXP 23
48620: PUSH
48621: LD_VAR 0 8
48625: ARRAY
48626: PUSH
48627: LD_INT 1
48629: ARRAY
48630: PPUSH
48631: LD_EXP 23
48635: PUSH
48636: LD_VAR 0 8
48640: ARRAY
48641: PUSH
48642: LD_INT 2
48644: ARRAY
48645: PPUSH
48646: LD_INT 12
48648: PPUSH
48649: LD_INT 0
48651: PPUSH
48652: CALL_OW 50
48656: GO 48608
48658: POP
48659: POP
// if mpApemans then
48660: LD_EXP 32
48664: IFFALSE 48770
// begin for j := 1 to mpApemans do
48666: LD_ADDR_VAR 0 3
48670: PUSH
48671: DOUBLE
48672: LD_INT 1
48674: DEC
48675: ST_TO_ADDR
48676: LD_EXP 32
48680: PUSH
48681: FOR_TO
48682: IFFALSE 48768
// begin PrepareApeman ( - 5 ) ;
48684: LD_INT 5
48686: NEG
48687: PPUSH
48688: CALL 37521 0 1
// ape := CreateHuman ;
48692: LD_ADDR_VAR 0 10
48696: PUSH
48697: CALL_OW 44
48701: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48702: LD_ADDR_EXP 34
48706: PUSH
48707: LD_EXP 34
48711: PPUSH
48712: LD_VAR 0 8
48716: PPUSH
48717: LD_EXP 34
48721: PUSH
48722: LD_VAR 0 8
48726: ARRAY
48727: PPUSH
48728: LD_VAR 0 10
48732: PPUSH
48733: CALL 41394 0 2
48737: PPUSH
48738: CALL_OW 1
48742: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48743: LD_VAR 0 10
48747: PPUSH
48748: LD_EXP 33
48752: PUSH
48753: LD_VAR 0 8
48757: ARRAY
48758: PPUSH
48759: LD_INT 0
48761: PPUSH
48762: CALL_OW 49
// end ;
48766: GO 48681
48768: POP
48769: POP
// end ; end ;
48770: GO 47435
48772: POP
48773: POP
// if not mpTeamGame then
48774: LD_EXP 13
48778: NOT
48779: IFFALSE 48877
// begin for i := 1 to 8 do
48781: LD_ADDR_VAR 0 2
48785: PUSH
48786: DOUBLE
48787: LD_INT 1
48789: DEC
48790: ST_TO_ADDR
48791: LD_INT 8
48793: PUSH
48794: FOR_TO
48795: IFFALSE 48873
// for j := 1 to 8 do
48797: LD_ADDR_VAR 0 3
48801: PUSH
48802: DOUBLE
48803: LD_INT 1
48805: DEC
48806: ST_TO_ADDR
48807: LD_INT 8
48809: PUSH
48810: FOR_TO
48811: IFFALSE 48869
// if i <> j then
48813: LD_VAR 0 2
48817: PUSH
48818: LD_VAR 0 3
48822: NONEQUAL
48823: IFFALSE 48847
// SetAttitude ( i , j , att_neutral , true ) else
48825: LD_VAR 0 2
48829: PPUSH
48830: LD_VAR 0 3
48834: PPUSH
48835: LD_INT 0
48837: PPUSH
48838: LD_INT 1
48840: PPUSH
48841: CALL_OW 80
48845: GO 48867
// SetAttitude ( i , j , att_friend , true ) ;
48847: LD_VAR 0 2
48851: PPUSH
48852: LD_VAR 0 3
48856: PPUSH
48857: LD_INT 1
48859: PPUSH
48860: LD_INT 1
48862: PPUSH
48863: CALL_OW 80
48867: GO 48810
48869: POP
48870: POP
48871: GO 48794
48873: POP
48874: POP
// end else
48875: GO 49052
// begin if mpSharedVision then
48877: LD_EXP 18
48881: IFFALSE 48946
// begin for i in mpTeams do
48883: LD_ADDR_VAR 0 2
48887: PUSH
48888: LD_EXP 12
48892: PUSH
48893: FOR_IN
48894: IFFALSE 48944
// for j := 2 to i do
48896: LD_ADDR_VAR 0 3
48900: PUSH
48901: DOUBLE
48902: LD_INT 2
48904: DEC
48905: ST_TO_ADDR
48906: LD_VAR 0 2
48910: PUSH
48911: FOR_TO
48912: IFFALSE 48940
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48914: LD_VAR 0 2
48918: PUSH
48919: LD_VAR 0 3
48923: ARRAY
48924: PPUSH
48925: LD_VAR 0 2
48929: PUSH
48930: LD_INT 1
48932: ARRAY
48933: PPUSH
48934: CALL_OW 343
48938: GO 48911
48940: POP
48941: POP
48942: GO 48893
48944: POP
48945: POP
// end ; for i := 1 to 8 do
48946: LD_ADDR_VAR 0 2
48950: PUSH
48951: DOUBLE
48952: LD_INT 1
48954: DEC
48955: ST_TO_ADDR
48956: LD_INT 8
48958: PUSH
48959: FOR_TO
48960: IFFALSE 49050
// for j := 1 to 8 do
48962: LD_ADDR_VAR 0 3
48966: PUSH
48967: DOUBLE
48968: LD_INT 1
48970: DEC
48971: ST_TO_ADDR
48972: LD_INT 8
48974: PUSH
48975: FOR_TO
48976: IFFALSE 49046
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48978: LD_EXP 10
48982: PUSH
48983: LD_VAR 0 2
48987: ARRAY
48988: PUSH
48989: LD_EXP 10
48993: PUSH
48994: LD_VAR 0 3
48998: ARRAY
48999: EQUAL
49000: IFFALSE 49024
// SetAttitude ( i , j , att_friend , true ) else
49002: LD_VAR 0 2
49006: PPUSH
49007: LD_VAR 0 3
49011: PPUSH
49012: LD_INT 1
49014: PPUSH
49015: LD_INT 1
49017: PPUSH
49018: CALL_OW 80
49022: GO 49044
// SetAttitude ( i , j , att_enemy , true ) ;
49024: LD_VAR 0 2
49028: PPUSH
49029: LD_VAR 0 3
49033: PPUSH
49034: LD_INT 2
49036: PPUSH
49037: LD_INT 1
49039: PPUSH
49040: CALL_OW 80
49044: GO 48975
49046: POP
49047: POP
49048: GO 48959
49050: POP
49051: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49052: LD_ADDR_OWVAR 71
49056: PUSH
49057: LD_EXP 11
49061: PUSH
49062: LD_OWVAR 2
49066: ARRAY
49067: ST_TO_ADDR
// if IAmSpec then
49068: CALL_OW 531
49072: IFFALSE 49113
// begin FogOff ( true ) ;
49074: LD_INT 1
49076: PPUSH
49077: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49081: LD_EXP 31
49085: PUSH
49086: LD_INT 1
49088: ARRAY
49089: PUSH
49090: LD_INT 2
49092: DIV
49093: PPUSH
49094: LD_EXP 31
49098: PUSH
49099: LD_INT 2
49101: ARRAY
49102: PUSH
49103: LD_INT 2
49105: DIV
49106: PPUSH
49107: CALL_OW 86
// end else
49111: GO 49159
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49113: LD_EXP 23
49117: PUSH
49118: LD_EXP 9
49122: PUSH
49123: LD_OWVAR 2
49127: ARRAY
49128: ARRAY
49129: PUSH
49130: LD_INT 1
49132: ARRAY
49133: PPUSH
49134: LD_EXP 23
49138: PUSH
49139: LD_EXP 9
49143: PUSH
49144: LD_OWVAR 2
49148: ARRAY
49149: ARRAY
49150: PUSH
49151: LD_INT 2
49153: ARRAY
49154: PPUSH
49155: CALL_OW 86
// end ; BeginBuildUp ;
49159: CALL 50215 0 0
// enable ( mpActive ) ;
49163: LD_INT 100
49165: ENABLE_MARKED
// enable ( mpGameType ) ;
49166: LD_EXP 5
49170: ENABLE_MARKED
// mpGameActive := true ;
49171: LD_ADDR_EXP 41
49175: PUSH
49176: LD_INT 1
49178: ST_TO_ADDR
// end ;
49179: LD_VAR 0 1
49183: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49184: LD_INT 0
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
// result := [ ] ;
49190: LD_ADDR_VAR 0 5
49194: PUSH
49195: EMPTY
49196: ST_TO_ADDR
// class := class_soldier ;
49197: LD_ADDR_VAR 0 8
49201: PUSH
49202: LD_INT 1
49204: ST_TO_ADDR
// uc_side := side ;
49205: LD_ADDR_OWVAR 20
49209: PUSH
49210: LD_VAR 0 1
49214: ST_TO_ADDR
// uc_nation := nation ;
49215: LD_ADDR_OWVAR 21
49219: PUSH
49220: LD_VAR 0 2
49224: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49225: LD_ADDR_OWVAR 26
49229: PUSH
49230: LD_OWVAR 19
49234: PUSH
49235: LD_VAR 0 1
49239: ARRAY
49240: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49241: LD_INT 1
49243: PPUSH
49244: LD_INT 2
49246: PPUSH
49247: CALL_OW 12
49251: PPUSH
49252: LD_VAR 0 8
49256: PPUSH
49257: LD_VAR 0 4
49261: PUSH
49262: LD_INT 2
49264: PLUS
49265: PPUSH
49266: CALL_OW 380
// hc_importance := 105 ;
49270: LD_ADDR_OWVAR 32
49274: PUSH
49275: LD_INT 105
49277: ST_TO_ADDR
// if Multiplayer then
49278: LD_OWVAR 4
49282: IFFALSE 49322
// begin hc_gallery := MULTIAVATARS ;
49284: LD_ADDR_OWVAR 33
49288: PUSH
49289: LD_STRING MULTIAVATARS
49291: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49292: LD_ADDR_OWVAR 34
49296: PUSH
49297: LD_VAR 0 1
49301: PPUSH
49302: CALL_OW 525
49306: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49307: LD_ADDR_OWVAR 27
49311: PUSH
49312: LD_VAR 0 1
49316: PPUSH
49317: CALL_OW 526
49321: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49322: LD_ADDR_VAR 0 5
49326: PUSH
49327: LD_VAR 0 5
49331: PPUSH
49332: CALL_OW 44
49336: PPUSH
49337: CALL 41394 0 2
49341: ST_TO_ADDR
// if mpTeamPreset then
49342: LD_LOC 1
49346: IFFALSE 49442
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49348: LD_LOC 1
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: PPUSH
49357: LD_VAR 0 5
49361: PUSH
49362: LD_VAR 0 5
49366: ARRAY
49367: PPUSH
49368: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49372: LD_VAR 0 5
49376: PUSH
49377: LD_VAR 0 5
49381: ARRAY
49382: PPUSH
49383: LD_INT 1
49385: PPUSH
49386: LD_LOC 1
49390: PUSH
49391: LD_INT 1
49393: ARRAY
49394: PPUSH
49395: LD_INT 1
49397: PPUSH
49398: CALL_OW 260
49402: PPUSH
49403: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49407: LD_VAR 0 5
49411: PUSH
49412: LD_VAR 0 5
49416: ARRAY
49417: PPUSH
49418: LD_INT 2
49420: PPUSH
49421: LD_LOC 1
49425: PUSH
49426: LD_INT 1
49428: ARRAY
49429: PPUSH
49430: LD_INT 2
49432: PPUSH
49433: CALL_OW 260
49437: PPUSH
49438: CALL_OW 239
// end ; InitHc_All ( ) ;
49442: CALL_OW 584
// class := 2 ;
49446: LD_ADDR_VAR 0 8
49450: PUSH
49451: LD_INT 2
49453: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49454: LD_ADDR_VAR 0 6
49458: PUSH
49459: DOUBLE
49460: LD_INT 1
49462: DEC
49463: ST_TO_ADDR
49464: LD_VAR 0 3
49468: PUSH
49469: LD_INT 1
49471: MINUS
49472: PUSH
49473: FOR_TO
49474: IFFALSE 49658
// begin PrepareHuman ( false , class , skill ) ;
49476: LD_INT 0
49478: PPUSH
49479: LD_VAR 0 8
49483: PPUSH
49484: LD_VAR 0 4
49488: PPUSH
49489: CALL_OW 380
// un := CreateHuman ;
49493: LD_ADDR_VAR 0 7
49497: PUSH
49498: CALL_OW 44
49502: ST_TO_ADDR
// result := Join ( result , un ) ;
49503: LD_ADDR_VAR 0 5
49507: PUSH
49508: LD_VAR 0 5
49512: PPUSH
49513: LD_VAR 0 7
49517: PPUSH
49518: CALL 41394 0 2
49522: ST_TO_ADDR
// if mpTeamPreset then
49523: LD_LOC 1
49527: IFFALSE 49623
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49529: LD_LOC 1
49533: PUSH
49534: LD_VAR 0 6
49538: PUSH
49539: LD_INT 1
49541: PLUS
49542: ARRAY
49543: PPUSH
49544: LD_VAR 0 7
49548: PPUSH
49549: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49553: LD_VAR 0 7
49557: PPUSH
49558: LD_INT 1
49560: PPUSH
49561: LD_LOC 1
49565: PUSH
49566: LD_VAR 0 6
49570: PUSH
49571: LD_INT 1
49573: PLUS
49574: ARRAY
49575: PPUSH
49576: LD_INT 1
49578: PPUSH
49579: CALL_OW 260
49583: PPUSH
49584: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49588: LD_VAR 0 7
49592: PPUSH
49593: LD_INT 2
49595: PPUSH
49596: LD_LOC 1
49600: PUSH
49601: LD_VAR 0 6
49605: PUSH
49606: LD_INT 1
49608: PLUS
49609: ARRAY
49610: PPUSH
49611: LD_INT 2
49613: PPUSH
49614: CALL_OW 260
49618: PPUSH
49619: CALL_OW 239
// end ; class := Inc ( class ) ;
49623: LD_ADDR_VAR 0 8
49627: PUSH
49628: LD_VAR 0 8
49632: PPUSH
49633: CALL 42767 0 1
49637: ST_TO_ADDR
// if class = 5 then
49638: LD_VAR 0 8
49642: PUSH
49643: LD_INT 5
49645: EQUAL
49646: IFFALSE 49656
// class := 1 ;
49648: LD_ADDR_VAR 0 8
49652: PUSH
49653: LD_INT 1
49655: ST_TO_ADDR
// end ;
49656: GO 49473
49658: POP
49659: POP
// if not mpTeamPreset then
49660: LD_LOC 1
49664: NOT
49665: IFFALSE 49677
// mpTeamPreset := result ;
49667: LD_ADDR_LOC 1
49671: PUSH
49672: LD_VAR 0 5
49676: ST_TO_ADDR
// end ;
49677: LD_VAR 0 5
49681: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49682: LD_INT 0
49684: PPUSH
49685: PPUSH
// result := [ ] ;
49686: LD_ADDR_VAR 0 4
49690: PUSH
49691: EMPTY
49692: ST_TO_ADDR
// if not vehicles then
49693: LD_VAR 0 3
49697: NOT
49698: IFFALSE 49702
// exit ;
49700: GO 49916
// for i := 1 to vehicles [ nation ] do
49702: LD_ADDR_VAR 0 5
49706: PUSH
49707: DOUBLE
49708: LD_INT 1
49710: DEC
49711: ST_TO_ADDR
49712: LD_VAR 0 3
49716: PUSH
49717: LD_VAR 0 2
49721: ARRAY
49722: PUSH
49723: FOR_TO
49724: IFFALSE 49914
// begin uc_side := side ;
49726: LD_ADDR_OWVAR 20
49730: PUSH
49731: LD_VAR 0 1
49735: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49736: LD_VAR 0 3
49740: PUSH
49741: LD_VAR 0 2
49745: ARRAY
49746: PUSH
49747: LD_VAR 0 5
49751: ARRAY
49752: PPUSH
49753: CALL 5462 0 1
49757: PUSH
49758: LD_INT 4
49760: GREATER
49761: IFFALSE 49791
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49763: LD_ADDR_OWVAR 21
49767: PUSH
49768: LD_VAR 0 3
49772: PUSH
49773: LD_VAR 0 2
49777: ARRAY
49778: PUSH
49779: LD_VAR 0 5
49783: ARRAY
49784: PUSH
49785: LD_INT 5
49787: ARRAY
49788: ST_TO_ADDR
49789: GO 49801
// uc_nation := nation ;
49791: LD_ADDR_OWVAR 21
49795: PUSH
49796: LD_VAR 0 2
49800: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49801: LD_VAR 0 3
49805: PUSH
49806: LD_VAR 0 2
49810: ARRAY
49811: PUSH
49812: LD_VAR 0 5
49816: ARRAY
49817: PUSH
49818: LD_INT 1
49820: ARRAY
49821: PPUSH
49822: LD_VAR 0 3
49826: PUSH
49827: LD_VAR 0 2
49831: ARRAY
49832: PUSH
49833: LD_VAR 0 5
49837: ARRAY
49838: PUSH
49839: LD_INT 2
49841: ARRAY
49842: PPUSH
49843: LD_VAR 0 3
49847: PUSH
49848: LD_VAR 0 2
49852: ARRAY
49853: PUSH
49854: LD_VAR 0 5
49858: ARRAY
49859: PUSH
49860: LD_INT 3
49862: ARRAY
49863: PPUSH
49864: LD_VAR 0 3
49868: PUSH
49869: LD_VAR 0 2
49873: ARRAY
49874: PUSH
49875: LD_VAR 0 5
49879: ARRAY
49880: PUSH
49881: LD_INT 4
49883: ARRAY
49884: PPUSH
49885: LD_INT 80
49887: PPUSH
49888: CALL 8224 0 5
// result := Join ( result , CreateVehicle ) ;
49892: LD_ADDR_VAR 0 4
49896: PUSH
49897: LD_VAR 0 4
49901: PPUSH
49902: CALL_OW 45
49906: PPUSH
49907: CALL 41394 0 2
49911: ST_TO_ADDR
// end ;
49912: GO 49723
49914: POP
49915: POP
// end ;
49916: LD_VAR 0 4
49920: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49921: LD_INT 0
49923: PPUSH
49924: PPUSH
// for i in mpBattleFlags do
49925: LD_ADDR_VAR 0 3
49929: PUSH
49930: LD_EXP 25
49934: PUSH
49935: FOR_IN
49936: IFFALSE 50013
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49938: LD_VAR 0 3
49942: PPUSH
49943: LD_INT 1
49945: PUSH
49946: LD_VAR 0 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_VAR 0 1
49962: PUSH
49963: LD_REAL  7.00000000000000E-0001
49966: MUL
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: LD_VAR 0 1
49979: PUSH
49980: LD_REAL  4.00000000000000E-0001
49983: MUL
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 20
49991: PUSH
49992: LD_VAR 0 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: PPUSH
50007: CALL_OW 423
50011: GO 49935
50013: POP
50014: POP
// end ;
50015: LD_VAR 0 2
50019: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50020: LD_INT 100
50022: IFFALSE 50117
50024: GO 50026
50026: DISABLE
50027: LD_INT 0
50029: PPUSH
50030: PPUSH
// begin if mpBattleFlag <= 0 then
50031: LD_EXP 24
50035: PUSH
50036: LD_INT 0
50038: LESSEQUAL
50039: IFFALSE 50043
// exit ;
50041: GO 50117
// strength := 100 ;
50043: LD_ADDR_VAR 0 2
50047: PUSH
50048: LD_INT 100
50050: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50051: LD_EXP 24
50055: PPUSH
50056: CALL_OW 67
// strength := Dec ( strength ) ;
50060: LD_ADDR_VAR 0 2
50064: PUSH
50065: LD_VAR 0 2
50069: PPUSH
50070: CALL 42789 0 1
50074: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50075: LD_VAR 0 2
50079: PPUSH
50080: CALL 49921 0 1
// until not strength ;
50084: LD_VAR 0 2
50088: NOT
50089: IFFALSE 50051
// for i in mpBattleFlags do
50091: LD_ADDR_VAR 0 1
50095: PUSH
50096: LD_EXP 25
50100: PUSH
50101: FOR_IN
50102: IFFALSE 50115
// KillBattleFlag ( i ) ;
50104: LD_VAR 0 1
50108: PPUSH
50109: CALL_OW 419
50113: GO 50101
50115: POP
50116: POP
// end ;
50117: PPOPN 2
50119: END
// every 0 0$1 marked mpActive do var side , tmp ;
50120: GO 50122
50122: DISABLE
50123: LD_INT 0
50125: PPUSH
50126: PPUSH
// begin if mpSibBomb <= 1 then
50127: LD_EXP 30
50131: PUSH
50132: LD_INT 1
50134: LESSEQUAL
50135: IFFALSE 50139
// exit ;
50137: GO 50212
// tmp := mpSibBomb ;
50139: LD_ADDR_VAR 0 2
50143: PUSH
50144: LD_EXP 30
50148: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50149: LD_INT 35
50151: PPUSH
50152: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50156: LD_ADDR_VAR 0 2
50160: PUSH
50161: LD_VAR 0 2
50165: PUSH
50166: LD_INT 35
50168: MINUS
50169: ST_TO_ADDR
// until not tmp ;
50170: LD_VAR 0 2
50174: NOT
50175: IFFALSE 50149
// for side := 1 to 8 do
50177: LD_ADDR_VAR 0 1
50181: PUSH
50182: DOUBLE
50183: LD_INT 1
50185: DEC
50186: ST_TO_ADDR
50187: LD_INT 8
50189: PUSH
50190: FOR_TO
50191: IFFALSE 50210
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50193: LD_INT 25
50195: PPUSH
50196: LD_VAR 0 1
50200: PPUSH
50201: LD_INT 1
50203: PPUSH
50204: CALL_OW 322
50208: GO 50190
50210: POP
50211: POP
// end ;
50212: PPOPN 2
50214: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50215: LD_INT 0
50217: PPUSH
50218: PPUSH
50219: PPUSH
// mpBuildUpTimeDelay := 0 ;
50220: LD_ADDR_EXP 48
50224: PUSH
50225: LD_INT 0
50227: ST_TO_ADDR
// if not mpBuildUpTime then
50228: LD_EXP 22
50232: NOT
50233: IFFALSE 50237
// exit ;
50235: GO 50426
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50237: LD_ADDR_EXP 48
50241: PUSH
50242: LD_INT 8400
50244: PUSH
50245: LD_INT 2100
50247: PUSH
50248: LD_EXP 22
50252: MUL
50253: PLUS
50254: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50255: LD_ADDR_EXP 49
50259: PUSH
50260: LD_INT 1
50262: ST_TO_ADDR
// for i := 1 to 8 do
50263: LD_ADDR_VAR 0 2
50267: PUSH
50268: DOUBLE
50269: LD_INT 1
50271: DEC
50272: ST_TO_ADDR
50273: LD_INT 8
50275: PUSH
50276: FOR_TO
50277: IFFALSE 50424
// if mpSidePositions [ i ] then
50279: LD_EXP 9
50283: PUSH
50284: LD_VAR 0 2
50288: ARRAY
50289: IFFALSE 50422
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50291: LD_EXP 21
50295: PUSH
50296: LD_EXP 9
50300: PUSH
50301: LD_VAR 0 2
50305: ARRAY
50306: ARRAY
50307: PPUSH
50308: LD_INT 5
50310: PPUSH
50311: CALL_OW 424
// for j := 1 to 8 do
50315: LD_ADDR_VAR 0 3
50319: PUSH
50320: DOUBLE
50321: LD_INT 1
50323: DEC
50324: ST_TO_ADDR
50325: LD_INT 8
50327: PUSH
50328: FOR_TO
50329: IFFALSE 50420
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50331: LD_EXP 9
50335: PUSH
50336: LD_VAR 0 3
50340: ARRAY
50341: IFFALSE 50390
50343: PUSH
50344: LD_EXP 10
50348: PUSH
50349: LD_VAR 0 2
50353: ARRAY
50354: PUSH
50355: LD_EXP 10
50359: PUSH
50360: LD_VAR 0 3
50364: ARRAY
50365: NONEQUAL
50366: IFTRUE 50389
50368: PUSH
50369: LD_EXP 13
50373: NOT
50374: IFFALSE 50388
50376: PUSH
50377: LD_VAR 0 2
50381: PUSH
50382: LD_VAR 0 3
50386: NONEQUAL
50387: AND
50388: OR
50389: AND
50390: IFFALSE 50418
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50392: LD_VAR 0 3
50396: PPUSH
50397: LD_EXP 21
50401: PUSH
50402: LD_EXP 9
50406: PUSH
50407: LD_VAR 0 2
50411: ARRAY
50412: ARRAY
50413: PPUSH
50414: CALL_OW 333
50418: GO 50328
50420: POP
50421: POP
// end ;
50422: GO 50276
50424: POP
50425: POP
// end ;
50426: LD_VAR 0 1
50430: RET
// function EndBuildUp ; var i , j ; begin
50431: LD_INT 0
50433: PPUSH
50434: PPUSH
50435: PPUSH
// mpBuildUpTimeActive := false ;
50436: LD_ADDR_EXP 49
50440: PUSH
50441: LD_INT 0
50443: ST_TO_ADDR
// for i := 1 to 8 do
50444: LD_ADDR_VAR 0 2
50448: PUSH
50449: DOUBLE
50450: LD_INT 1
50452: DEC
50453: ST_TO_ADDR
50454: LD_INT 8
50456: PUSH
50457: FOR_TO
50458: IFFALSE 50605
// if mpSidePositions [ i ] then
50460: LD_EXP 9
50464: PUSH
50465: LD_VAR 0 2
50469: ARRAY
50470: IFFALSE 50603
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50472: LD_EXP 21
50476: PUSH
50477: LD_EXP 9
50481: PUSH
50482: LD_VAR 0 2
50486: ARRAY
50487: ARRAY
50488: PPUSH
50489: LD_INT 0
50491: PPUSH
50492: CALL_OW 424
// for j := 1 to 8 do
50496: LD_ADDR_VAR 0 3
50500: PUSH
50501: DOUBLE
50502: LD_INT 1
50504: DEC
50505: ST_TO_ADDR
50506: LD_INT 8
50508: PUSH
50509: FOR_TO
50510: IFFALSE 50601
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50512: LD_EXP 9
50516: PUSH
50517: LD_VAR 0 3
50521: ARRAY
50522: IFFALSE 50571
50524: PUSH
50525: LD_EXP 10
50529: PUSH
50530: LD_VAR 0 2
50534: ARRAY
50535: PUSH
50536: LD_EXP 10
50540: PUSH
50541: LD_VAR 0 3
50545: ARRAY
50546: NONEQUAL
50547: IFTRUE 50570
50549: PUSH
50550: LD_EXP 13
50554: NOT
50555: IFFALSE 50569
50557: PUSH
50558: LD_VAR 0 2
50562: PUSH
50563: LD_VAR 0 3
50567: NONEQUAL
50568: AND
50569: OR
50570: AND
50571: IFFALSE 50599
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50573: LD_VAR 0 3
50577: PPUSH
50578: LD_EXP 21
50582: PUSH
50583: LD_EXP 9
50587: PUSH
50588: LD_VAR 0 2
50592: ARRAY
50593: ARRAY
50594: PPUSH
50595: CALL_OW 334
50599: GO 50509
50601: POP
50602: POP
// end ;
50603: GO 50457
50605: POP
50606: POP
// end ;
50607: LD_VAR 0 1
50611: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50612: LD_EXP 49
50616: IFFALSE 50795
50618: GO 50620
50620: DISABLE
50621: LD_INT 0
50623: PPUSH
50624: PPUSH
// begin for i := 1 to 8 do
50625: LD_ADDR_VAR 0 1
50629: PUSH
50630: DOUBLE
50631: LD_INT 1
50633: DEC
50634: ST_TO_ADDR
50635: LD_INT 8
50637: PUSH
50638: FOR_TO
50639: IFFALSE 50792
// if mpSidePositions [ i ] then
50641: LD_EXP 9
50645: PUSH
50646: LD_VAR 0 1
50650: ARRAY
50651: IFFALSE 50790
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50653: LD_ADDR_VAR 0 2
50657: PUSH
50658: LD_EXP 21
50662: PUSH
50663: LD_EXP 9
50667: PUSH
50668: LD_VAR 0 1
50672: ARRAY
50673: ARRAY
50674: PPUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 21
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 21
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 22
50705: PUSH
50706: LD_OWVAR 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PPUSH
50719: CALL_OW 70
50723: PUSH
50724: FOR_IN
50725: IFFALSE 50788
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50727: LD_EXP 10
50731: PUSH
50732: LD_VAR 0 1
50736: ARRAY
50737: PUSH
50738: LD_EXP 10
50742: PUSH
50743: LD_OWVAR 2
50747: ARRAY
50748: NONEQUAL
50749: IFTRUE 50772
50751: PUSH
50752: LD_EXP 13
50756: NOT
50757: IFFALSE 50771
50759: PUSH
50760: LD_VAR 0 1
50764: PUSH
50765: LD_OWVAR 2
50769: NONEQUAL
50770: AND
50771: OR
50772: IFFALSE 50786
// ComMoveToArea ( un , BuildUpEscape ) ;
50774: LD_VAR 0 2
50778: PPUSH
50779: LD_INT 9
50781: PPUSH
50782: CALL_OW 113
50786: GO 50724
50788: POP
50789: POP
50790: GO 50638
50792: POP
50793: POP
// enable ;
50794: ENABLE
// end ;
50795: PPOPN 2
50797: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50798: LD_EXP 22
50802: IFFALSE 50852
50804: GO 50806
50806: DISABLE
50807: LD_INT 0
50809: PPUSH
// begin tmp := mpBuildUpTime ;
50810: LD_ADDR_VAR 0 1
50814: PUSH
50815: LD_EXP 22
50819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50820: LD_INT 35
50822: PPUSH
50823: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50827: LD_ADDR_VAR 0 1
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_INT 35
50839: MINUS
50840: ST_TO_ADDR
// until not tmp ;
50841: LD_VAR 0 1
50845: NOT
50846: IFFALSE 50820
// EndBuildUp ;
50848: CALL 50431 0 0
// end ;
50852: PPOPN 1
50854: END
// every 0 0$1 trigger mpActive marked mpWin do
50855: LD_INT 100
50857: IFFALSE 50891
50859: GO 50861
50861: DISABLE
// begin if IAmServer then
50862: CALL_OW 518
50866: IFFALSE 50875
// wait ( 0 0$3 ) ;
50868: LD_INT 105
50870: PPUSH
50871: CALL_OW 67
// if Multiplayer then
50875: LD_OWVAR 4
50879: IFFALSE 50887
// YouWinInMultiplayer else
50881: CALL_OW 106
50885: GO 50891
// YouWin ;
50887: CALL_OW 103
// end ;
50891: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50892: LD_INT 0
50894: PPUSH
// result := false ;
50895: LD_ADDR_VAR 0 3
50899: PUSH
50900: LD_INT 0
50902: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50903: LD_VAR 0 1
50907: PUSH
50908: LD_INT 1
50910: DOUBLE
50911: EQUAL
50912: IFTRUE 50922
50914: LD_INT 5
50916: DOUBLE
50917: EQUAL
50918: IFTRUE 50922
50920: GO 50995
50922: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50923: LD_ADDR_VAR 0 3
50927: PUSH
50928: LD_INT 22
50930: PUSH
50931: LD_VAR 0 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 21
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 33
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 33
50965: PUSH
50966: LD_INT 5
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PPUSH
50983: CALL_OW 69
50987: PPUSH
50988: CALL 5462 0 1
50992: ST_TO_ADDR
// end ; GameTypeSurvival :
50993: GO 51234
50995: LD_INT 2
50997: DOUBLE
50998: EQUAL
50999: IFTRUE 51003
51001: GO 51133
51003: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_INT 22
51011: PUSH
51012: LD_VAR 0 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 30
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 30
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PPUSH
51053: CALL_OW 69
51057: PPUSH
51058: CALL 5462 0 1
51062: IFFALSE 51130
51064: PUSH
51065: LD_INT 22
51067: PUSH
51068: LD_VAR 0 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 21
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 33
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 33
51102: PUSH
51103: LD_INT 5
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PPUSH
51120: CALL_OW 69
51124: PPUSH
51125: CALL 5462 0 1
51129: AND
51130: ST_TO_ADDR
// end ; GameTypeKing :
51131: GO 51234
51133: LD_INT 3
51135: DOUBLE
51136: EQUAL
51137: IFTRUE 51141
51139: GO 51233
51141: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51142: LD_ADDR_VAR 0 3
51146: PUSH
51147: LD_INT 22
51149: PUSH
51150: LD_VAR 0 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 21
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 33
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 33
51184: PUSH
51185: LD_INT 5
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PPUSH
51202: CALL_OW 69
51206: PPUSH
51207: CALL 5462 0 1
51211: IFFALSE 51230
51213: PUSH
51214: LD_VAR 0 2
51218: PPUSH
51219: CALL 55041 0 1
51223: PUSH
51224: LD_EXP 37
51228: LESS
51229: AND
51230: ST_TO_ADDR
// end ; end ;
51231: GO 51234
51233: POP
// end ;
51234: LD_VAR 0 3
51238: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51239: LD_INT 100
51241: IFFALSE 51471
51243: GO 51245
51245: DISABLE
51246: LD_INT 0
51248: PPUSH
51249: PPUSH
// begin if Multiplayer then
51250: LD_OWVAR 4
51254: IFFALSE 51262
// SetPlayerSpectator ( ) else
51256: CALL_OW 572
51260: GO 51271
// FogOff ( your_side ) ;
51262: LD_OWVAR 2
51266: PPUSH
51267: CALL_OW 344
// repeat gameIsOn := false ;
51271: LD_ADDR_VAR 0 1
51275: PUSH
51276: LD_INT 0
51278: ST_TO_ADDR
// for i := 1 to 8 do
51279: LD_ADDR_VAR 0 2
51283: PUSH
51284: DOUBLE
51285: LD_INT 1
51287: DEC
51288: ST_TO_ADDR
51289: LD_INT 8
51291: PUSH
51292: FOR_TO
51293: IFFALSE 51423
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51295: LD_EXP 9
51299: PUSH
51300: LD_VAR 0 2
51304: ARRAY
51305: IFFALSE 51318
51307: PUSH
51308: LD_VAR 0 2
51312: PPUSH
51313: CALL_OW 108
51317: AND
51318: IFFALSE 51332
51320: PUSH
51321: LD_VAR 0 2
51325: PUSH
51326: LD_OWVAR 2
51330: NONEQUAL
51331: AND
51332: IFFALSE 51421
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51334: LD_EXP 10
51338: PUSH
51339: LD_VAR 0 2
51343: ARRAY
51344: NOT
51345: IFTRUE 51393
51347: PUSH
51348: LD_EXP 10
51352: PUSH
51353: LD_VAR 0 2
51357: ARRAY
51358: PUSH
51359: LD_EXP 10
51363: PUSH
51364: LD_OWVAR 2
51368: ARRAY
51369: NONEQUAL
51370: IFFALSE 51392
51372: PUSH
51373: LD_OWVAR 2
51377: PPUSH
51378: LD_VAR 0 2
51382: PPUSH
51383: CALL_OW 81
51387: PUSH
51388: LD_INT 1
51390: NONEQUAL
51391: AND
51392: OR
51393: IFFALSE 51421
// if HasPowerByGameType ( mpGameType , i ) then
51395: LD_EXP 5
51399: PPUSH
51400: LD_VAR 0 2
51404: PPUSH
51405: CALL 50892 0 2
51409: IFFALSE 51421
// begin gameIsOn := true ;
51411: LD_ADDR_VAR 0 1
51415: PUSH
51416: LD_INT 1
51418: ST_TO_ADDR
// break ;
51419: GO 51423
// end ;
51421: GO 51292
51423: POP
51424: POP
// wait ( 100 ) ;
51425: LD_INT 100
51427: PPUSH
51428: CALL_OW 67
// until not gameIsOn ;
51432: LD_VAR 0 1
51436: NOT
51437: IFFALSE 51271
// if IAmServer then
51439: CALL_OW 518
51443: IFFALSE 51452
// wait ( 0 0$3 ) ;
51445: LD_INT 105
51447: PPUSH
51448: CALL_OW 67
// if Multiplayer then
51452: LD_OWVAR 4
51456: IFFALSE 51464
// YouLostInMultiplayer else
51458: CALL_OW 107
51462: GO 51471
// YouLost (  ) ;
51464: LD_STRING 
51466: PPUSH
51467: CALL_OW 104
// end ;
51471: PPOPN 2
51473: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51474: LD_EXP 35
51478: IFFALSE 51862
51480: GO 51482
51482: DISABLE
51483: LD_INT 0
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51490: LD_ADDR_VAR 0 5
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: LD_INT 4
51506: PUSH
51507: LD_INT 5
51509: PUSH
51510: LD_INT 6
51512: PUSH
51513: LD_INT 7
51515: PUSH
51516: LD_INT 8
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51529: LD_INT 350
51531: PPUSH
51532: CALL_OW 67
// for i := 1 to 8 do
51536: LD_ADDR_VAR 0 1
51540: PUSH
51541: DOUBLE
51542: LD_INT 1
51544: DEC
51545: ST_TO_ADDR
51546: LD_INT 8
51548: PUSH
51549: FOR_TO
51550: IFFALSE 51832
// begin j := sides [ i ] ;
51552: LD_ADDR_VAR 0 2
51556: PUSH
51557: LD_VAR 0 5
51561: PUSH
51562: LD_VAR 0 1
51566: ARRAY
51567: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51568: LD_EXP 42
51572: PUSH
51573: LD_VAR 0 2
51577: ARRAY
51578: PPUSH
51579: CALL 5462 0 1
51583: IFFALSE 51596
51585: PUSH
51586: LD_VAR 0 2
51590: PPUSH
51591: CALL_OW 108
51595: AND
51596: IFFALSE 51614
51598: PUSH
51599: LD_EXP 5
51603: PPUSH
51604: LD_VAR 0 2
51608: PPUSH
51609: CALL 50892 0 2
51613: AND
51614: IFFALSE 51830
// begin wait ( mpRespawn div 3 ) ;
51616: LD_EXP 35
51620: PUSH
51621: LD_INT 3
51623: DIV
51624: PPUSH
51625: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51629: LD_ADDR_VAR 0 3
51633: PUSH
51634: LD_INT 22
51636: PUSH
51637: LD_VAR 0 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 50
51648: PUSH
51649: EMPTY
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 30
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 30
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: PPUSH
51685: CALL_OW 69
51689: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51690: LD_VAR 0 3
51694: NOT
51695: IFTRUE 51709
51697: PUSH
51698: LD_VAR 0 2
51702: PPUSH
51703: CALL_OW 108
51707: NOT
51708: OR
51709: IFTRUE 51728
51711: PUSH
51712: LD_EXP 5
51716: PPUSH
51717: LD_VAR 0 2
51721: PPUSH
51722: CALL 50892 0 2
51726: NOT
51727: OR
51728: IFFALSE 51732
// continue ;
51730: GO 51549
// spawn := tmp [ 1 ] ;
51732: LD_ADDR_VAR 0 4
51736: PUSH
51737: LD_VAR 0 3
51741: PUSH
51742: LD_INT 1
51744: ARRAY
51745: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51746: LD_EXP 42
51750: PUSH
51751: LD_VAR 0 2
51755: ARRAY
51756: PUSH
51757: LD_INT 1
51759: ARRAY
51760: PPUSH
51761: LD_VAR 0 4
51765: PPUSH
51766: CALL_OW 250
51770: PPUSH
51771: LD_VAR 0 4
51775: PPUSH
51776: CALL_OW 251
51780: PPUSH
51781: LD_INT 32
51783: PPUSH
51784: LD_INT 1
51786: PPUSH
51787: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51791: LD_ADDR_EXP 42
51795: PUSH
51796: LD_EXP 42
51800: PPUSH
51801: LD_VAR 0 2
51805: PPUSH
51806: LD_EXP 42
51810: PUSH
51811: LD_VAR 0 2
51815: ARRAY
51816: PPUSH
51817: LD_INT 1
51819: PPUSH
51820: CALL_OW 3
51824: PPUSH
51825: CALL_OW 1
51829: ST_TO_ADDR
// end ; end ;
51830: GO 51549
51832: POP
51833: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51834: LD_ADDR_VAR 0 5
51838: PUSH
51839: LD_VAR 0 5
51843: PPUSH
51844: LD_INT 1
51846: PPUSH
51847: LD_INT 8
51849: PPUSH
51850: LD_INT 1
51852: PPUSH
51853: CALL 7754 0 4
51857: ST_TO_ADDR
// until false ;
51858: LD_INT 0
51860: IFFALSE 51529
// end ;
51862: PPOPN 5
51864: END
// every 0 0$1 marked mpActive do
51865: GO 51867
51867: DISABLE
// begin enable ;
51868: ENABLE
// if not mpDisplayStrings then
51869: LD_EXP 40
51873: NOT
51874: IFFALSE 51885
// begin display_strings := [ ] ;
51876: LD_ADDR_OWVAR 47
51880: PUSH
51881: EMPTY
51882: ST_TO_ADDR
// exit ;
51883: GO 51895
// end ; display_strings := mpDisplayStrings ;
51885: LD_ADDR_OWVAR 47
51889: PUSH
51890: LD_EXP 40
51894: ST_TO_ADDR
// end ; end_of_file
51895: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51896: LD_INT 0
51898: PPUSH
51899: PPUSH
51900: PPUSH
51901: PPUSH
51902: PPUSH
51903: PPUSH
51904: PPUSH
51905: PPUSH
51906: PPUSH
// if GetType ( un ) = unit_vehicle then
51907: LD_VAR 0 1
51911: PPUSH
51912: CALL_OW 247
51916: PUSH
51917: LD_INT 2
51919: EQUAL
51920: IFFALSE 51924
// exit ;
51922: GO 52562
// side := GetSide ( un ) ;
51924: LD_ADDR_VAR 0 9
51928: PUSH
51929: LD_VAR 0 1
51933: PPUSH
51934: CALL_OW 255
51938: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51939: LD_EXP 5
51943: PUSH
51944: LD_INT 2
51946: EQUAL
51947: IFFALSE 52023
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51949: LD_VAR 0 1
51953: PPUSH
51954: CALL_OW 266
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: IN
51969: IFFALSE 52023
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
51971: LD_ADDR_VAR 0 3
51975: PUSH
51976: LD_INT 22
51978: PUSH
51979: LD_VAR 0 9
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 21
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PPUSH
52002: CALL_OW 69
52006: PUSH
52007: FOR_IN
52008: IFFALSE 52021
// KillUnit ( i ) ;
52010: LD_VAR 0 3
52014: PPUSH
52015: CALL_OW 66
52019: GO 52007
52021: POP
52022: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52023: LD_VAR 0 1
52027: PPUSH
52028: CALL_OW 257
52032: PUSH
52033: LD_INT 12
52035: PUSH
52036: LD_INT 17
52038: PUSH
52039: LD_INT 15
52041: PUSH
52042: LD_INT 16
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: IN
52051: IFTRUE 52068
52053: PUSH
52054: LD_VAR 0 1
52058: PPUSH
52059: CALL_OW 263
52063: PUSH
52064: LD_INT 5
52066: EQUAL
52067: OR
52068: IFFALSE 52287
// begin tag := 0 ;
52070: LD_ADDR_VAR 0 5
52074: PUSH
52075: LD_INT 0
52077: ST_TO_ADDR
// for i := 1 to 8 do
52078: LD_ADDR_VAR 0 3
52082: PUSH
52083: DOUBLE
52084: LD_INT 1
52086: DEC
52087: ST_TO_ADDR
52088: LD_INT 8
52090: PUSH
52091: FOR_TO
52092: IFFALSE 52126
// if un in mpApePosIndex [ i ] then
52094: LD_VAR 0 1
52098: PUSH
52099: LD_EXP 34
52103: PUSH
52104: LD_VAR 0 3
52108: ARRAY
52109: IN
52110: IFFALSE 52124
// begin tag := i ;
52112: LD_ADDR_VAR 0 5
52116: PUSH
52117: LD_VAR 0 3
52121: ST_TO_ADDR
// break ;
52122: GO 52126
// end ;
52124: GO 52091
52126: POP
52127: POP
// if not tag then
52128: LD_VAR 0 5
52132: NOT
52133: IFFALSE 52137
// exit ;
52135: GO 52562
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52137: LD_ADDR_VAR 0 7
52141: PUSH
52142: LD_EXP 33
52146: PUSH
52147: LD_EXP 9
52151: PUSH
52152: LD_VAR 0 5
52156: ARRAY
52157: ARRAY
52158: ST_TO_ADDR
// if not area then
52159: LD_VAR 0 7
52163: NOT
52164: IFFALSE 52168
// exit ;
52166: GO 52562
// wait ( 4 4$00 ) ;
52168: LD_INT 8400
52170: PPUSH
52171: CALL_OW 67
// repeat wait ( 10 ) ;
52175: LD_INT 10
52177: PPUSH
52178: CALL_OW 67
// until not mpBlockRespThread ;
52182: LD_EXP 47
52186: NOT
52187: IFFALSE 52175
// mpBlockRespThread := true ;
52189: LD_ADDR_EXP 47
52193: PUSH
52194: LD_INT 1
52196: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52197: LD_INT 0
52199: PPUSH
52200: CALL 37521 0 1
// ape := CreateHuman ;
52204: LD_ADDR_VAR 0 4
52208: PUSH
52209: CALL_OW 44
52213: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52214: LD_ADDR_EXP 34
52218: PUSH
52219: LD_EXP 34
52223: PPUSH
52224: LD_VAR 0 5
52228: PPUSH
52229: LD_EXP 34
52233: PUSH
52234: LD_VAR 0 5
52238: ARRAY
52239: PPUSH
52240: LD_VAR 0 4
52244: PPUSH
52245: CALL 41394 0 2
52249: PPUSH
52250: CALL_OW 1
52254: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52255: LD_VAR 0 4
52259: PPUSH
52260: LD_VAR 0 7
52264: PPUSH
52265: LD_INT 0
52267: PPUSH
52268: CALL_OW 49
// wait ( 10 ) ;
52272: LD_INT 10
52274: PPUSH
52275: CALL_OW 67
// mpBlockRespThread := false ;
52279: LD_ADDR_EXP 47
52283: PUSH
52284: LD_INT 0
52286: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52287: LD_VAR 0 1
52291: PPUSH
52292: CALL_OW 247
52296: PUSH
52297: LD_INT 1
52299: EQUAL
52300: IFFALSE 52317
52302: PUSH
52303: LD_VAR 0 1
52307: PPUSH
52308: CALL_OW 248
52312: PUSH
52313: LD_INT 0
52315: GREATER
52316: AND
52317: IFFALSE 52562
// begin if not mpRespawn then
52319: LD_EXP 35
52323: NOT
52324: IFFALSE 52328
// exit ;
52326: GO 52562
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52328: LD_VAR 0 9
52332: PPUSH
52333: CALL_OW 108
52337: NOT
52338: IFFALSE 52357
52340: PUSH
52341: LD_EXP 5
52345: PPUSH
52346: LD_VAR 0 9
52350: PPUSH
52351: CALL 50892 0 2
52355: NOT
52356: AND
52357: IFFALSE 52361
// exit ;
52359: GO 52562
// side := GetSide ( un ) ;
52361: LD_ADDR_VAR 0 9
52365: PUSH
52366: LD_VAR 0 1
52370: PPUSH
52371: CALL_OW 255
52375: ST_TO_ADDR
// nation := GetNation ( un ) ;
52376: LD_ADDR_VAR 0 8
52380: PUSH
52381: LD_VAR 0 1
52385: PPUSH
52386: CALL_OW 248
52390: ST_TO_ADDR
// class := GetClass ( un ) ;
52391: LD_ADDR_VAR 0 6
52395: PUSH
52396: LD_VAR 0 1
52400: PPUSH
52401: CALL_OW 257
52405: ST_TO_ADDR
// if class > 4 then
52406: LD_VAR 0 6
52410: PUSH
52411: LD_INT 4
52413: GREATER
52414: IFFALSE 52424
// class := 1 ;
52416: LD_ADDR_VAR 0 6
52420: PUSH
52421: LD_INT 1
52423: ST_TO_ADDR
// repeat wait ( 10 ) ;
52424: LD_INT 10
52426: PPUSH
52427: CALL_OW 67
// until not mpBlockRespThread ;
52431: LD_EXP 47
52435: NOT
52436: IFFALSE 52424
// mpBlockRespThread := true ;
52438: LD_ADDR_EXP 47
52442: PUSH
52443: LD_INT 1
52445: ST_TO_ADDR
// uc_side := side ;
52446: LD_ADDR_OWVAR 20
52450: PUSH
52451: LD_VAR 0 9
52455: ST_TO_ADDR
// uc_nation := nation ;
52456: LD_ADDR_OWVAR 21
52460: PUSH
52461: LD_VAR 0 8
52465: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52466: LD_INT 0
52468: PPUSH
52469: LD_VAR 0 6
52473: PPUSH
52474: LD_INT 2
52476: PPUSH
52477: CALL_OW 380
// un := CreateHuman ;
52481: LD_ADDR_VAR 0 1
52485: PUSH
52486: CALL_OW 44
52490: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52491: LD_ADDR_EXP 42
52495: PUSH
52496: LD_EXP 42
52500: PPUSH
52501: LD_VAR 0 9
52505: PPUSH
52506: LD_EXP 42
52510: PUSH
52511: LD_VAR 0 9
52515: ARRAY
52516: PPUSH
52517: LD_EXP 42
52521: PUSH
52522: LD_VAR 0 9
52526: ARRAY
52527: PUSH
52528: LD_INT 1
52530: PLUS
52531: PPUSH
52532: LD_VAR 0 1
52536: PPUSH
52537: CALL_OW 1
52541: PPUSH
52542: CALL_OW 1
52546: ST_TO_ADDR
// wait ( 10 ) ;
52547: LD_INT 10
52549: PPUSH
52550: CALL_OW 67
// mpBlockRespThread := false ;
52554: LD_ADDR_EXP 47
52558: PUSH
52559: LD_INT 0
52561: ST_TO_ADDR
// end ; end ;
52562: LD_VAR 0 2
52566: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52567: LD_INT 0
52569: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 266
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: IN
52590: IFFALSE 52615
// SetBName ( building , @ & GetSide ( building ) ) ;
52592: LD_VAR 0 1
52596: PPUSH
52597: LD_STRING @
52599: PUSH
52600: LD_VAR 0 1
52604: PPUSH
52605: CALL_OW 255
52609: STR
52610: PPUSH
52611: CALL_OW 500
// end ;
52615: LD_VAR 0 2
52619: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52620: LD_INT 0
52622: PPUSH
52623: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52624: LD_EXP 5
52628: PUSH
52629: LD_INT 2
52631: EQUAL
52632: IFFALSE 52656
52634: PUSH
52635: LD_VAR 0 1
52639: PPUSH
52640: CALL_OW 266
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: IN
52655: AND
52656: IFFALSE 52721
// begin KillUnit ( building ) ;
52658: LD_VAR 0 1
52662: PPUSH
52663: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52667: LD_ADDR_VAR 0 5
52671: PUSH
52672: LD_INT 22
52674: PUSH
52675: LD_VAR 0 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 21
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PPUSH
52698: CALL_OW 69
52702: PUSH
52703: FOR_IN
52704: IFFALSE 52717
// KillUnit ( i ) ;
52706: LD_VAR 0 5
52710: PPUSH
52711: CALL_OW 66
52715: GO 52703
52717: POP
52718: POP
// exit ;
52719: GO 52766
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52721: LD_VAR 0 1
52725: PPUSH
52726: CALL_OW 266
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: IN
52741: IFFALSE 52766
// SetBName ( building , @ & GetSide ( building ) ) ;
52743: LD_VAR 0 1
52747: PPUSH
52748: LD_STRING @
52750: PUSH
52751: LD_VAR 0 1
52755: PPUSH
52756: CALL_OW 255
52760: STR
52761: PPUSH
52762: CALL_OW 500
// end ;
52766: LD_VAR 0 4
52770: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52771: LD_INT 0
52773: PPUSH
52774: PPUSH
52775: PPUSH
// if mpGameType <> GameTypeFamine then
52776: LD_EXP 5
52780: PUSH
52781: LD_INT 5
52783: NONEQUAL
52784: IFFALSE 52788
// exit ;
52786: GO 53002
// for i := 1 to mpGlobalOilDeposits do
52788: LD_ADDR_VAR 0 6
52792: PUSH
52793: DOUBLE
52794: LD_INT 1
52796: DEC
52797: ST_TO_ADDR
52798: LD_EXP 43
52802: PUSH
52803: FOR_TO
52804: IFFALSE 53000
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52806: LD_EXP 43
52810: PUSH
52811: LD_VAR 0 6
52815: ARRAY
52816: PUSH
52817: LD_INT 1
52819: ARRAY
52820: PPUSH
52821: LD_EXP 43
52825: PUSH
52826: LD_VAR 0 6
52830: ARRAY
52831: PUSH
52832: LD_INT 2
52834: ARRAY
52835: PPUSH
52836: CALL_OW 428
52840: PUSH
52841: LD_VAR 0 1
52845: EQUAL
52846: IFFALSE 52998
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52848: LD_ADDR_VAR 0 7
52852: PUSH
52853: LD_EXP 43
52857: PUSH
52858: LD_VAR 0 6
52862: ARRAY
52863: PUSH
52864: LD_INT 3
52866: ARRAY
52867: ST_TO_ADDR
// value := Dec ( value ) ;
52868: LD_ADDR_VAR 0 7
52872: PUSH
52873: LD_VAR 0 7
52877: PPUSH
52878: CALL 42789 0 1
52882: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52883: LD_ADDR_EXP 43
52887: PUSH
52888: LD_EXP 43
52892: PPUSH
52893: LD_VAR 0 6
52897: PPUSH
52898: LD_EXP 43
52902: PUSH
52903: LD_VAR 0 6
52907: ARRAY
52908: PPUSH
52909: LD_INT 3
52911: PPUSH
52912: LD_VAR 0 7
52916: PPUSH
52917: CALL_OW 1
52921: PPUSH
52922: CALL_OW 1
52926: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52927: LD_VAR 0 1
52931: PPUSH
52932: LD_VAR 0 7
52936: PPUSH
52937: CALL_OW 505
// if value = 0 then
52941: LD_VAR 0 7
52945: PUSH
52946: LD_INT 0
52948: EQUAL
52949: IFFALSE 52998
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52951: LD_EXP 43
52955: PUSH
52956: LD_VAR 0 6
52960: ARRAY
52961: PUSH
52962: LD_INT 1
52964: ARRAY
52965: PPUSH
52966: LD_EXP 43
52970: PUSH
52971: LD_VAR 0 6
52975: ARRAY
52976: PUSH
52977: LD_INT 2
52979: ARRAY
52980: PPUSH
52981: CALL_OW 63
// KillUnit ( building ) ;
52985: LD_VAR 0 1
52989: PPUSH
52990: CALL_OW 66
// exit ;
52994: POP
52995: POP
52996: GO 53002
// end ; end ; end ;
52998: GO 52803
53000: POP
53001: POP
// end ;
53002: LD_VAR 0 5
53006: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53007: LD_INT 0
53009: PPUSH
53010: PPUSH
53011: PPUSH
// if mpGameType <> GameTypeFamine then
53012: LD_EXP 5
53016: PUSH
53017: LD_INT 5
53019: NONEQUAL
53020: IFFALSE 53024
// exit ;
53022: GO 53238
// for i := 1 to mpGlobalSibDeposits do
53024: LD_ADDR_VAR 0 6
53028: PUSH
53029: DOUBLE
53030: LD_INT 1
53032: DEC
53033: ST_TO_ADDR
53034: LD_EXP 44
53038: PUSH
53039: FOR_TO
53040: IFFALSE 53236
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53042: LD_EXP 44
53046: PUSH
53047: LD_VAR 0 6
53051: ARRAY
53052: PUSH
53053: LD_INT 1
53055: ARRAY
53056: PPUSH
53057: LD_EXP 44
53061: PUSH
53062: LD_VAR 0 6
53066: ARRAY
53067: PUSH
53068: LD_INT 2
53070: ARRAY
53071: PPUSH
53072: CALL_OW 428
53076: PUSH
53077: LD_VAR 0 1
53081: EQUAL
53082: IFFALSE 53234
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53084: LD_ADDR_VAR 0 7
53088: PUSH
53089: LD_EXP 44
53093: PUSH
53094: LD_VAR 0 6
53098: ARRAY
53099: PUSH
53100: LD_INT 3
53102: ARRAY
53103: ST_TO_ADDR
// value := Dec ( value ) ;
53104: LD_ADDR_VAR 0 7
53108: PUSH
53109: LD_VAR 0 7
53113: PPUSH
53114: CALL 42789 0 1
53118: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53119: LD_ADDR_EXP 44
53123: PUSH
53124: LD_EXP 44
53128: PPUSH
53129: LD_VAR 0 6
53133: PPUSH
53134: LD_EXP 44
53138: PUSH
53139: LD_VAR 0 6
53143: ARRAY
53144: PPUSH
53145: LD_INT 3
53147: PPUSH
53148: LD_VAR 0 7
53152: PPUSH
53153: CALL_OW 1
53157: PPUSH
53158: CALL_OW 1
53162: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53163: LD_VAR 0 1
53167: PPUSH
53168: LD_VAR 0 7
53172: PPUSH
53173: CALL_OW 505
// if value = 0 then
53177: LD_VAR 0 7
53181: PUSH
53182: LD_INT 0
53184: EQUAL
53185: IFFALSE 53234
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53187: LD_EXP 44
53191: PUSH
53192: LD_VAR 0 6
53196: ARRAY
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: PPUSH
53202: LD_EXP 44
53206: PUSH
53207: LD_VAR 0 6
53211: ARRAY
53212: PUSH
53213: LD_INT 2
53215: ARRAY
53216: PPUSH
53217: CALL_OW 63
// KillUnit ( building ) ;
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 66
// exit ;
53230: POP
53231: POP
53232: GO 53238
// end ; end ; end ;
53234: GO 53039
53236: POP
53237: POP
// end ; end_of_file
53238: LD_VAR 0 5
53242: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53243: LD_EXP 41
53247: IFFALSE 53255
53249: PUSH
53250: CALL 53465 0 0
53254: AND
53255: IFFALSE 53263
53257: PUSH
53258: LD_OWVAR 4
53262: AND
53263: IFFALSE 53462
53265: GO 53267
53267: DISABLE
53268: LD_INT 0
53270: PPUSH
53271: PPUSH
// begin canWin := false ;
53272: LD_ADDR_VAR 0 2
53276: PUSH
53277: LD_INT 0
53279: ST_TO_ADDR
// if not HasPower ( your_side ) then
53280: LD_OWVAR 2
53284: PPUSH
53285: CALL 53507 0 1
53289: NOT
53290: IFFALSE 53301
// begin Multiplayer_Loose_Message ;
53292: CALL_OW 521
// enable ( mpLose ) ;
53296: LD_INT 102
53298: ENABLE_MARKED
// end else
53299: GO 53462
// begin canWin := true ;
53301: LD_ADDR_VAR 0 2
53305: PUSH
53306: LD_INT 1
53308: ST_TO_ADDR
// for i := 1 to 8 do
53309: LD_ADDR_VAR 0 1
53313: PUSH
53314: DOUBLE
53315: LD_INT 1
53317: DEC
53318: ST_TO_ADDR
53319: LD_INT 8
53321: PUSH
53322: FOR_TO
53323: IFFALSE 53448
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53325: LD_EXP 9
53329: PUSH
53330: LD_VAR 0 1
53334: ARRAY
53335: IFFALSE 53348
53337: PUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL_OW 108
53347: AND
53348: IFFALSE 53362
53350: PUSH
53351: LD_VAR 0 1
53355: PUSH
53356: LD_OWVAR 2
53360: NONEQUAL
53361: AND
53362: IFFALSE 53446
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53364: LD_EXP 10
53368: PUSH
53369: LD_VAR 0 1
53373: ARRAY
53374: NOT
53375: IFTRUE 53423
53377: PUSH
53378: LD_EXP 10
53382: PUSH
53383: LD_VAR 0 1
53387: ARRAY
53388: PUSH
53389: LD_EXP 10
53393: PUSH
53394: LD_OWVAR 2
53398: ARRAY
53399: NONEQUAL
53400: IFFALSE 53422
53402: PUSH
53403: LD_OWVAR 2
53407: PPUSH
53408: LD_VAR 0 1
53412: PPUSH
53413: CALL_OW 81
53417: PUSH
53418: LD_INT 1
53420: NONEQUAL
53421: AND
53422: OR
53423: IFFALSE 53446
// if HasPower ( i ) then
53425: LD_VAR 0 1
53429: PPUSH
53430: CALL 53507 0 1
53434: IFFALSE 53446
// begin canWin := false ;
53436: LD_ADDR_VAR 0 2
53440: PUSH
53441: LD_INT 0
53443: ST_TO_ADDR
// break ;
53444: GO 53448
// end ;
53446: GO 53322
53448: POP
53449: POP
// if canWin then
53450: LD_VAR 0 2
53454: IFFALSE 53461
// enable ( mpWin ) else
53456: LD_INT 101
53458: ENABLE_MARKED
53459: GO 53462
// enable ;
53461: ENABLE
// end ; end ;
53462: PPOPN 2
53464: END
// function CanWinLoose ; begin
53465: LD_INT 0
53467: PPUSH
// result := true ;
53468: LD_ADDR_VAR 0 1
53472: PUSH
53473: LD_INT 1
53475: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53476: CALL_OW 531
53480: IFFALSE 53492
53482: PUSH
53483: CALL_OW 519
53487: PUSH
53488: LD_INT 1
53490: GREATER
53491: AND
53492: IFFALSE 53502
// result := false ;
53494: LD_ADDR_VAR 0 1
53498: PUSH
53499: LD_INT 0
53501: ST_TO_ADDR
// end ;
53502: LD_VAR 0 1
53506: RET
// function HasPower ( i ) ; begin
53507: LD_INT 0
53509: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53510: LD_ADDR_VAR 0 2
53514: PUSH
53515: LD_INT 22
53517: PUSH
53518: LD_VAR 0 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: LD_INT 21
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 33
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 33
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PPUSH
53570: CALL_OW 69
53574: ST_TO_ADDR
// end ; end_of_file
53575: LD_VAR 0 2
53579: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53580: LD_EXP 41
53584: IFFALSE 53627
53586: GO 53588
53588: DISABLE
53589: LD_INT 0
53591: PPUSH
// begin for i := 1 to 8 do
53592: LD_ADDR_VAR 0 1
53596: PUSH
53597: DOUBLE
53598: LD_INT 1
53600: DEC
53601: ST_TO_ADDR
53602: LD_INT 8
53604: PUSH
53605: FOR_TO
53606: IFFALSE 53625
// SetRestrict ( b_depot , i , state_disabled ) ;
53608: LD_INT 0
53610: PPUSH
53611: LD_VAR 0 1
53615: PPUSH
53616: LD_INT 0
53618: PPUSH
53619: CALL_OW 324
53623: GO 53605
53625: POP
53626: POP
// end ;
53627: PPOPN 1
53629: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53630: LD_EXP 41
53634: IFFALSE 53642
53636: PUSH
53637: CALL 53852 0 0
53641: AND
53642: IFFALSE 53650
53644: PUSH
53645: LD_OWVAR 4
53649: AND
53650: IFFALSE 53849
53652: GO 53654
53654: DISABLE
53655: LD_INT 0
53657: PPUSH
53658: PPUSH
// begin canWin := false ;
53659: LD_ADDR_VAR 0 2
53663: PUSH
53664: LD_INT 0
53666: ST_TO_ADDR
// if not HasPower ( your_side ) then
53667: LD_OWVAR 2
53671: PPUSH
53672: CALL 53894 0 1
53676: NOT
53677: IFFALSE 53688
// begin Multiplayer_Loose_Message ;
53679: CALL_OW 521
// enable ( mpLose ) ;
53683: LD_INT 102
53685: ENABLE_MARKED
// end else
53686: GO 53849
// begin canWin := true ;
53688: LD_ADDR_VAR 0 2
53692: PUSH
53693: LD_INT 1
53695: ST_TO_ADDR
// for i := 1 to 8 do
53696: LD_ADDR_VAR 0 1
53700: PUSH
53701: DOUBLE
53702: LD_INT 1
53704: DEC
53705: ST_TO_ADDR
53706: LD_INT 8
53708: PUSH
53709: FOR_TO
53710: IFFALSE 53835
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53712: LD_EXP 9
53716: PUSH
53717: LD_VAR 0 1
53721: ARRAY
53722: IFFALSE 53735
53724: PUSH
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 108
53734: AND
53735: IFFALSE 53749
53737: PUSH
53738: LD_VAR 0 1
53742: PUSH
53743: LD_OWVAR 2
53747: NONEQUAL
53748: AND
53749: IFFALSE 53833
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53751: LD_EXP 10
53755: PUSH
53756: LD_VAR 0 1
53760: ARRAY
53761: NOT
53762: IFTRUE 53810
53764: PUSH
53765: LD_EXP 10
53769: PUSH
53770: LD_VAR 0 1
53774: ARRAY
53775: PUSH
53776: LD_EXP 10
53780: PUSH
53781: LD_OWVAR 2
53785: ARRAY
53786: NONEQUAL
53787: IFFALSE 53809
53789: PUSH
53790: LD_OWVAR 2
53794: PPUSH
53795: LD_VAR 0 1
53799: PPUSH
53800: CALL_OW 81
53804: PUSH
53805: LD_INT 1
53807: NONEQUAL
53808: AND
53809: OR
53810: IFFALSE 53833
// if HasPower ( i ) then
53812: LD_VAR 0 1
53816: PPUSH
53817: CALL 53894 0 1
53821: IFFALSE 53833
// begin canWin := false ;
53823: LD_ADDR_VAR 0 2
53827: PUSH
53828: LD_INT 0
53830: ST_TO_ADDR
// break ;
53831: GO 53835
// end ;
53833: GO 53709
53835: POP
53836: POP
// if canWin then
53837: LD_VAR 0 2
53841: IFFALSE 53848
// enable ( mpWin ) else
53843: LD_INT 101
53845: ENABLE_MARKED
53846: GO 53849
// enable ;
53848: ENABLE
// end ; end ;
53849: PPOPN 2
53851: END
// function CanWinLoose ; begin
53852: LD_INT 0
53854: PPUSH
// result := true ;
53855: LD_ADDR_VAR 0 1
53859: PUSH
53860: LD_INT 1
53862: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53863: CALL_OW 531
53867: IFFALSE 53879
53869: PUSH
53870: CALL_OW 519
53874: PUSH
53875: LD_INT 1
53877: GREATER
53878: AND
53879: IFFALSE 53889
// result := false ;
53881: LD_ADDR_VAR 0 1
53885: PUSH
53886: LD_INT 0
53888: ST_TO_ADDR
// end ;
53889: LD_VAR 0 1
53893: RET
// function HasPower ( i ) ; begin
53894: LD_INT 0
53896: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53897: LD_INT 22
53899: PUSH
53900: LD_VAR 0 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 30
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 30
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PPUSH
53941: CALL_OW 69
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 54015
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53950: LD_ADDR_VAR 0 2
53954: PUSH
53955: LD_INT 22
53957: PUSH
53958: LD_VAR 0 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 21
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 33
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 33
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PPUSH
54010: CALL_OW 69
54014: ST_TO_ADDR
// end ; end_of_file
54015: LD_VAR 0 2
54019: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54020: LD_EXP 41
54024: IFFALSE 54365
54026: GO 54028
54028: DISABLE
54029: LD_INT 0
54031: PPUSH
54032: PPUSH
54033: PPUSH
// begin mpKingPoints := [ ] ;
54034: LD_ADDR_EXP 50
54038: PUSH
54039: EMPTY
54040: ST_TO_ADDR
// if mpTeamGame then
54041: LD_EXP 13
54045: IFFALSE 54099
// begin for i := 1 to Count ( mpTeams ) do
54047: LD_ADDR_VAR 0 1
54051: PUSH
54052: DOUBLE
54053: LD_INT 1
54055: DEC
54056: ST_TO_ADDR
54057: LD_EXP 12
54061: PPUSH
54062: CALL 5462 0 1
54066: PUSH
54067: FOR_TO
54068: IFFALSE 54095
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54070: LD_ADDR_EXP 50
54074: PUSH
54075: LD_EXP 50
54079: PPUSH
54080: LD_VAR 0 1
54084: PPUSH
54085: LD_INT 0
54087: PPUSH
54088: CALL_OW 1
54092: ST_TO_ADDR
54093: GO 54067
54095: POP
54096: POP
// end else
54097: GO 54142
// begin for i := 1 to 8 do
54099: LD_ADDR_VAR 0 1
54103: PUSH
54104: DOUBLE
54105: LD_INT 1
54107: DEC
54108: ST_TO_ADDR
54109: LD_INT 8
54111: PUSH
54112: FOR_TO
54113: IFFALSE 54140
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54115: LD_ADDR_EXP 50
54119: PUSH
54120: LD_EXP 50
54124: PPUSH
54125: LD_VAR 0 1
54129: PPUSH
54130: LD_INT 0
54132: PPUSH
54133: CALL_OW 1
54137: ST_TO_ADDR
54138: GO 54112
54140: POP
54141: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54142: LD_ADDR_VAR 0 3
54146: PUSH
54147: LD_EXP 2
54151: PPUSH
54152: LD_INT 0
54154: PPUSH
54155: CALL_OW 517
54159: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54160: LD_ADDR_VAR 0 1
54164: PUSH
54165: DOUBLE
54166: LD_INT 1
54168: DEC
54169: ST_TO_ADDR
54170: LD_VAR 0 3
54174: PUSH
54175: LD_INT 1
54177: ARRAY
54178: PUSH
54179: FOR_TO
54180: IFFALSE 54247
// for j := 1 to 8 do
54182: LD_ADDR_VAR 0 2
54186: PUSH
54187: DOUBLE
54188: LD_INT 1
54190: DEC
54191: ST_TO_ADDR
54192: LD_INT 8
54194: PUSH
54195: FOR_TO
54196: IFFALSE 54243
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54198: LD_VAR 0 3
54202: PUSH
54203: LD_INT 1
54205: ARRAY
54206: PUSH
54207: LD_VAR 0 1
54211: ARRAY
54212: PPUSH
54213: LD_VAR 0 3
54217: PUSH
54218: LD_INT 2
54220: ARRAY
54221: PUSH
54222: LD_VAR 0 1
54226: ARRAY
54227: PPUSH
54228: LD_VAR 0 2
54232: PPUSH
54233: LD_INT 12
54235: NEG
54236: PPUSH
54237: CALL_OW 330
54241: GO 54195
54243: POP
54244: POP
54245: GO 54179
54247: POP
54248: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54249: LD_EXP 36
54253: PPUSH
54254: LD_INT 1
54256: PPUSH
54257: CALL_OW 424
// UpdateCounter ;
54261: CALL 54871 0 0
// repeat wait ( 0 0$1 ) ;
54265: LD_INT 35
54267: PPUSH
54268: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54272: LD_ADDR_VAR 0 3
54276: PUSH
54277: LD_EXP 36
54281: PPUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 57
54287: PUSH
54288: EMPTY
54289: LIST
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 50
54297: PUSH
54298: EMPTY
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 30
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 30
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: PPUSH
54334: CALL_OW 70
54338: ST_TO_ADDR
// if not tmp then
54339: LD_VAR 0 3
54343: NOT
54344: IFFALSE 54348
// continue ;
54346: GO 54265
// AddPoints ( tmp ) ;
54348: LD_VAR 0 3
54352: PPUSH
54353: CALL 54549 0 1
// UpdateCounter ;
54357: CALL 54871 0 0
// until false ;
54361: LD_INT 0
54363: IFFALSE 54265
// end ;
54365: PPOPN 3
54367: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54368: LD_EXP 41
54372: IFFALSE 54380
54374: PUSH
54375: LD_EXP 39
54379: AND
54380: IFFALSE 54546
54382: GO 54384
54384: DISABLE
54385: LD_INT 0
54387: PPUSH
54388: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54389: LD_ADDR_VAR 0 2
54393: PUSH
54394: LD_EXP 2
54398: PPUSH
54399: LD_INT 0
54401: PPUSH
54402: CALL_OW 517
54406: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54407: LD_ADDR_VAR 0 1
54411: PUSH
54412: DOUBLE
54413: LD_INT 1
54415: DEC
54416: ST_TO_ADDR
54417: LD_VAR 0 2
54421: PUSH
54422: LD_INT 1
54424: ARRAY
54425: PUSH
54426: FOR_TO
54427: IFFALSE 54468
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54429: LD_VAR 0 2
54433: PUSH
54434: LD_INT 1
54436: ARRAY
54437: PUSH
54438: LD_VAR 0 1
54442: ARRAY
54443: PPUSH
54444: LD_VAR 0 2
54448: PUSH
54449: LD_INT 2
54451: ARRAY
54452: PUSH
54453: LD_VAR 0 1
54457: ARRAY
54458: PPUSH
54459: LD_INT 125
54461: PPUSH
54462: CALL_OW 495
54466: GO 54426
54468: POP
54469: POP
// repeat wait ( mpEmissions ) ;
54470: LD_EXP 39
54474: PPUSH
54475: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54479: LD_ADDR_VAR 0 1
54483: PUSH
54484: DOUBLE
54485: LD_INT 1
54487: DEC
54488: ST_TO_ADDR
54489: LD_VAR 0 2
54493: PUSH
54494: LD_INT 1
54496: ARRAY
54497: PUSH
54498: FOR_TO
54499: IFFALSE 54540
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54501: LD_VAR 0 2
54505: PUSH
54506: LD_INT 1
54508: ARRAY
54509: PUSH
54510: LD_VAR 0 1
54514: ARRAY
54515: PPUSH
54516: LD_VAR 0 2
54520: PUSH
54521: LD_INT 2
54523: ARRAY
54524: PUSH
54525: LD_VAR 0 1
54529: ARRAY
54530: PPUSH
54531: LD_INT 15
54533: PPUSH
54534: CALL_OW 495
54538: GO 54498
54540: POP
54541: POP
// until false ;
54542: LD_INT 0
54544: IFFALSE 54470
// end ;
54546: PPOPN 2
54548: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54549: LD_INT 0
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
// if mpTeamGame then
54556: LD_EXP 13
54560: IFFALSE 54757
// begin first := depots [ 1 ] ;
54562: LD_ADDR_VAR 0 4
54566: PUSH
54567: LD_VAR 0 1
54571: PUSH
54572: LD_INT 1
54574: ARRAY
54575: ST_TO_ADDR
// side := GetSide ( first ) ;
54576: LD_ADDR_VAR 0 6
54580: PUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: CALL_OW 255
54590: ST_TO_ADDR
// for i := 1 to mpTeams do
54591: LD_ADDR_VAR 0 3
54595: PUSH
54596: DOUBLE
54597: LD_INT 1
54599: DEC
54600: ST_TO_ADDR
54601: LD_EXP 12
54605: PUSH
54606: FOR_TO
54607: IFFALSE 54641
// if side in mpTeams [ i ] then
54609: LD_VAR 0 6
54613: PUSH
54614: LD_EXP 12
54618: PUSH
54619: LD_VAR 0 3
54623: ARRAY
54624: IN
54625: IFFALSE 54639
// begin team := i ;
54627: LD_ADDR_VAR 0 5
54631: PUSH
54632: LD_VAR 0 3
54636: ST_TO_ADDR
// break ;
54637: GO 54641
// end ;
54639: GO 54606
54641: POP
54642: POP
// if not team then
54643: LD_VAR 0 5
54647: NOT
54648: IFFALSE 54652
// exit ;
54650: GO 54866
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54652: LD_EXP 36
54656: PPUSH
54657: LD_INT 81
54659: PUSH
54660: LD_VAR 0 6
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PPUSH
54669: CALL_OW 70
54673: IFFALSE 54677
// exit ;
54675: GO 54866
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54677: LD_ADDR_EXP 50
54681: PUSH
54682: LD_EXP 50
54686: PPUSH
54687: LD_VAR 0 5
54691: PPUSH
54692: LD_EXP 50
54696: PUSH
54697: LD_VAR 0 5
54701: ARRAY
54702: PUSH
54703: LD_INT 1
54705: PLUS
54706: PPUSH
54707: CALL_OW 1
54711: ST_TO_ADDR
// for i in mpTeams [ team ] do
54712: LD_ADDR_VAR 0 3
54716: PUSH
54717: LD_EXP 12
54721: PUSH
54722: LD_VAR 0 5
54726: ARRAY
54727: PUSH
54728: FOR_IN
54729: IFFALSE 54753
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54731: LD_VAR 0 3
54735: PPUSH
54736: LD_EXP 50
54740: PUSH
54741: LD_VAR 0 5
54745: ARRAY
54746: PPUSH
54747: CALL_OW 506
54751: GO 54728
54753: POP
54754: POP
// end else
54755: GO 54866
// begin first := depots [ 1 ] ;
54757: LD_ADDR_VAR 0 4
54761: PUSH
54762: LD_VAR 0 1
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: ST_TO_ADDR
// side := GetSide ( first ) ;
54771: LD_ADDR_VAR 0 6
54775: PUSH
54776: LD_VAR 0 4
54780: PPUSH
54781: CALL_OW 255
54785: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54786: LD_EXP 36
54790: PPUSH
54791: LD_INT 81
54793: PUSH
54794: LD_VAR 0 6
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PPUSH
54803: CALL_OW 70
54807: IFFALSE 54811
// exit ;
54809: GO 54866
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54811: LD_ADDR_EXP 50
54815: PUSH
54816: LD_EXP 50
54820: PPUSH
54821: LD_VAR 0 6
54825: PPUSH
54826: LD_EXP 50
54830: PUSH
54831: LD_VAR 0 6
54835: ARRAY
54836: PUSH
54837: LD_INT 1
54839: PLUS
54840: PPUSH
54841: CALL_OW 1
54845: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54846: LD_VAR 0 6
54850: PPUSH
54851: LD_EXP 50
54855: PUSH
54856: LD_VAR 0 6
54860: ARRAY
54861: PPUSH
54862: CALL_OW 506
// end ; end ;
54866: LD_VAR 0 2
54870: RET
// function UpdateCounter ; var i ; begin
54871: LD_INT 0
54873: PPUSH
54874: PPUSH
// result := [ ] ;
54875: LD_ADDR_VAR 0 1
54879: PUSH
54880: EMPTY
54881: ST_TO_ADDR
// if mpTeamGame then
54882: LD_EXP 13
54886: IFFALSE 54953
// begin for i := 1 to mpTeams do
54888: LD_ADDR_VAR 0 2
54892: PUSH
54893: DOUBLE
54894: LD_INT 1
54896: DEC
54897: ST_TO_ADDR
54898: LD_EXP 12
54902: PUSH
54903: FOR_TO
54904: IFFALSE 54949
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54906: LD_ADDR_VAR 0 1
54910: PUSH
54911: LD_VAR 0 1
54915: PUSH
54916: LD_STRING #KingoftheHill-Team
54918: PUSH
54919: LD_VAR 0 2
54923: PUSH
54924: LD_EXP 50
54928: PUSH
54929: LD_VAR 0 2
54933: ARRAY
54934: PUSH
54935: LD_EXP 37
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: ADD
54946: ST_TO_ADDR
54947: GO 54903
54949: POP
54950: POP
// end else
54951: GO 55026
// begin for i := 1 to 8 do
54953: LD_ADDR_VAR 0 2
54957: PUSH
54958: DOUBLE
54959: LD_INT 1
54961: DEC
54962: ST_TO_ADDR
54963: LD_INT 8
54965: PUSH
54966: FOR_TO
54967: IFFALSE 55024
// if mpSidePositions [ i ] then
54969: LD_EXP 9
54973: PUSH
54974: LD_VAR 0 2
54978: ARRAY
54979: IFFALSE 55022
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54981: LD_ADDR_VAR 0 1
54985: PUSH
54986: LD_VAR 0 1
54990: PUSH
54991: LD_STRING #KingoftheHill-Player
54993: PUSH
54994: LD_VAR 0 2
54998: PUSH
54999: LD_EXP 50
55003: PUSH
55004: LD_VAR 0 2
55008: ARRAY
55009: PUSH
55010: LD_EXP 37
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: ADD
55021: ST_TO_ADDR
55022: GO 54966
55024: POP
55025: POP
// end ; mpDisplayStrings := result ;
55026: LD_ADDR_EXP 40
55030: PUSH
55031: LD_VAR 0 1
55035: ST_TO_ADDR
// end ;
55036: LD_VAR 0 1
55040: RET
// export function HowMuchPointsKing ( side ) ; begin
55041: LD_INT 0
55043: PPUSH
// result := HowMuchPoints ( side ) ;
55044: LD_ADDR_VAR 0 2
55048: PUSH
55049: LD_VAR 0 1
55053: PPUSH
55054: CALL 55064 0 1
55058: ST_TO_ADDR
// end ;
55059: LD_VAR 0 2
55063: RET
// function HowMuchPoints ( side ) ; var i ; begin
55064: LD_INT 0
55066: PPUSH
55067: PPUSH
// if mpTeamGame then
55068: LD_EXP 13
55072: IFFALSE 55141
// begin for i := 1 to Count ( mpTeams ) do
55074: LD_ADDR_VAR 0 3
55078: PUSH
55079: DOUBLE
55080: LD_INT 1
55082: DEC
55083: ST_TO_ADDR
55084: LD_EXP 12
55088: PPUSH
55089: CALL 5462 0 1
55093: PUSH
55094: FOR_TO
55095: IFFALSE 55137
// begin if side in mpTeams [ i ] then
55097: LD_VAR 0 1
55101: PUSH
55102: LD_EXP 12
55106: PUSH
55107: LD_VAR 0 3
55111: ARRAY
55112: IN
55113: IFFALSE 55135
// begin result := mpKingPoints [ i ] ;
55115: LD_ADDR_VAR 0 2
55119: PUSH
55120: LD_EXP 50
55124: PUSH
55125: LD_VAR 0 3
55129: ARRAY
55130: ST_TO_ADDR
// exit ;
55131: POP
55132: POP
55133: GO 55157
// end ; end ;
55135: GO 55094
55137: POP
55138: POP
// end else
55139: GO 55157
// result := mpKingPoints [ side ] ;
55141: LD_ADDR_VAR 0 2
55145: PUSH
55146: LD_EXP 50
55150: PUSH
55151: LD_VAR 0 1
55155: ARRAY
55156: ST_TO_ADDR
// end ;
55157: LD_VAR 0 2
55161: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55162: LD_EXP 41
55166: IFFALSE 55174
55168: PUSH
55169: CALL 55509 0 0
55173: AND
55174: IFFALSE 55182
55176: PUSH
55177: LD_OWVAR 4
55181: AND
55182: IFFALSE 55432
55184: GO 55186
55186: DISABLE
55187: LD_INT 0
55189: PPUSH
55190: PPUSH
// begin canWin := false ;
55191: LD_ADDR_VAR 0 2
55195: PUSH
55196: LD_INT 0
55198: ST_TO_ADDR
// if not HasPower ( your_side ) then
55199: LD_OWVAR 2
55203: PPUSH
55204: CALL 55551 0 1
55208: NOT
55209: IFFALSE 55220
// begin Multiplayer_Loose_Message ;
55211: CALL_OW 521
// enable ( mpLose ) ;
55215: LD_INT 102
55217: ENABLE_MARKED
// end else
55218: GO 55432
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
55220: LD_ADDR_VAR 0 2
55224: PUSH
55225: LD_OWVAR 2
55229: PPUSH
55230: CALL 55064 0 1
55234: PUSH
55235: LD_EXP 37
55239: GREATEREQUAL
55240: IFFALSE 55253
55242: PUSH
55243: LD_OWVAR 2
55247: PPUSH
55248: CALL 55551 0 1
55252: AND
55253: IFTRUE 55262
55255: PUSH
55256: CALL 55435 0 0
55260: NOT
55261: OR
55262: ST_TO_ADDR
// for i := 1 to 8 do
55263: LD_ADDR_VAR 0 1
55267: PUSH
55268: DOUBLE
55269: LD_INT 1
55271: DEC
55272: ST_TO_ADDR
55273: LD_INT 8
55275: PUSH
55276: FOR_TO
55277: IFFALSE 55418
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55279: LD_EXP 9
55283: PUSH
55284: LD_VAR 0 1
55288: ARRAY
55289: IFFALSE 55302
55291: PUSH
55292: LD_VAR 0 1
55296: PPUSH
55297: CALL_OW 108
55301: AND
55302: IFFALSE 55316
55304: PUSH
55305: LD_VAR 0 1
55309: PUSH
55310: LD_OWVAR 2
55314: NONEQUAL
55315: AND
55316: IFFALSE 55416
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55318: LD_EXP 10
55322: PUSH
55323: LD_VAR 0 1
55327: ARRAY
55328: NOT
55329: IFTRUE 55377
55331: PUSH
55332: LD_EXP 10
55336: PUSH
55337: LD_VAR 0 1
55341: ARRAY
55342: PUSH
55343: LD_EXP 10
55347: PUSH
55348: LD_OWVAR 2
55352: ARRAY
55353: NONEQUAL
55354: IFFALSE 55376
55356: PUSH
55357: LD_OWVAR 2
55361: PPUSH
55362: LD_VAR 0 1
55366: PPUSH
55367: CALL_OW 81
55371: PUSH
55372: LD_INT 1
55374: NONEQUAL
55375: AND
55376: OR
55377: IFFALSE 55416
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55379: LD_VAR 0 1
55383: PPUSH
55384: CALL 55064 0 1
55388: PUSH
55389: LD_EXP 37
55393: GREATEREQUAL
55394: IFFALSE 55407
55396: PUSH
55397: LD_VAR 0 1
55401: PPUSH
55402: CALL 55551 0 1
55406: AND
55407: IFFALSE 55416
// begin enable ( mpLose ) ;
55409: LD_INT 102
55411: ENABLE_MARKED
// exit ;
55412: POP
55413: POP
55414: GO 55432
// end ;
55416: GO 55276
55418: POP
55419: POP
// if canWin then
55420: LD_VAR 0 2
55424: IFFALSE 55431
// enable ( mpWin ) else
55426: LD_INT 101
55428: ENABLE_MARKED
55429: GO 55432
// enable ;
55431: ENABLE
// end ; end ;
55432: PPOPN 2
55434: END
// function EnemiesInGame ; var i ; begin
55435: LD_INT 0
55437: PPUSH
55438: PPUSH
// result := false ;
55439: LD_ADDR_VAR 0 1
55443: PUSH
55444: LD_INT 0
55446: ST_TO_ADDR
// for i := 1 to 8 do
55447: LD_ADDR_VAR 0 2
55451: PUSH
55452: DOUBLE
55453: LD_INT 1
55455: DEC
55456: ST_TO_ADDR
55457: LD_INT 8
55459: PUSH
55460: FOR_TO
55461: IFFALSE 55502
// if i <> your_side and HasPower ( i ) then
55463: LD_VAR 0 2
55467: PUSH
55468: LD_OWVAR 2
55472: NONEQUAL
55473: IFFALSE 55486
55475: PUSH
55476: LD_VAR 0 2
55480: PPUSH
55481: CALL 55551 0 1
55485: AND
55486: IFFALSE 55500
// begin result := true ;
55488: LD_ADDR_VAR 0 1
55492: PUSH
55493: LD_INT 1
55495: ST_TO_ADDR
// exit ;
55496: POP
55497: POP
55498: GO 55504
// end ;
55500: GO 55460
55502: POP
55503: POP
// end ;
55504: LD_VAR 0 1
55508: RET
// function CanWinLoose ; begin
55509: LD_INT 0
55511: PPUSH
// result := true ;
55512: LD_ADDR_VAR 0 1
55516: PUSH
55517: LD_INT 1
55519: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55520: CALL_OW 531
55524: IFFALSE 55536
55526: PUSH
55527: CALL_OW 519
55531: PUSH
55532: LD_INT 1
55534: GREATER
55535: AND
55536: IFFALSE 55546
// result := false ;
55538: LD_ADDR_VAR 0 1
55542: PUSH
55543: LD_INT 0
55545: ST_TO_ADDR
// end ;
55546: LD_VAR 0 1
55550: RET
// function HasPower ( i ) ; begin
55551: LD_INT 0
55553: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55554: LD_ADDR_VAR 0 2
55558: PUSH
55559: LD_INT 22
55561: PUSH
55562: LD_VAR 0 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 21
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 33
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 33
55596: PUSH
55597: LD_INT 5
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PPUSH
55614: CALL_OW 69
55618: ST_TO_ADDR
// end ; end_of_file end_of_file
55619: LD_VAR 0 2
55623: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55624: LD_VAR 0 1
55628: PUSH
55629: LD_INT 200
55631: DOUBLE
55632: GREATEREQUAL
55633: IFFALSE 55641
55635: LD_INT 299
55637: DOUBLE
55638: LESSEQUAL
55639: IFTRUE 55643
55641: GO 55675
55643: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55644: LD_VAR 0 1
55648: PPUSH
55649: LD_VAR 0 2
55653: PPUSH
55654: LD_VAR 0 3
55658: PPUSH
55659: LD_VAR 0 4
55663: PPUSH
55664: LD_VAR 0 5
55668: PPUSH
55669: CALL 56456 0 5
55673: GO 55752
55675: LD_INT 300
55677: DOUBLE
55678: GREATEREQUAL
55679: IFFALSE 55687
55681: LD_INT 399
55683: DOUBLE
55684: LESSEQUAL
55685: IFTRUE 55689
55687: GO 55751
55689: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55690: LD_VAR 0 1
55694: PPUSH
55695: LD_VAR 0 2
55699: PPUSH
55700: LD_VAR 0 3
55704: PPUSH
55705: LD_VAR 0 4
55709: PPUSH
55710: LD_VAR 0 5
55714: PPUSH
55715: LD_VAR 0 6
55719: PPUSH
55720: LD_VAR 0 7
55724: PPUSH
55725: LD_VAR 0 8
55729: PPUSH
55730: LD_VAR 0 9
55734: PPUSH
55735: LD_VAR 0 10
55739: PPUSH
55740: LD_VAR 0 11
55744: PPUSH
55745: CALL 61861 0 11
55749: GO 55752
55751: POP
// end ;
55752: PPOPN 11
55754: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55755: LD_VAR 0 1
55759: PPUSH
55760: LD_VAR 0 2
55764: PPUSH
55765: LD_VAR 0 3
55769: PPUSH
55770: LD_VAR 0 4
55774: PPUSH
55775: LD_VAR 0 5
55779: PPUSH
55780: CALL 55837 0 5
// end ; end_of_file
55784: PPOPN 5
55786: END
// export function SOS_UnitDestroyed ( un ) ; begin
55787: LD_INT 0
55789: PPUSH
// ComRadiation ( un ) ;
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL 56876 0 1
// end ;
55799: LD_VAR 0 2
55803: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55804: LD_INT 0
55806: PPUSH
// ComRadiation ( un ) ;
55807: LD_VAR 0 1
55811: PPUSH
55812: CALL 56876 0 1
// end ;
55816: LD_VAR 0 2
55820: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55821: LD_INT 0
55823: PPUSH
// end ;
55824: LD_VAR 0 4
55828: RET
// export function SOS_Command ( cmd ) ; begin
55829: LD_INT 0
55831: PPUSH
// end ;
55832: LD_VAR 0 2
55836: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55837: LD_INT 0
55839: PPUSH
// end ;
55840: LD_VAR 0 6
55844: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
55849: PPUSH
55850: PPUSH
// if not vehicle or not factory then
55851: LD_VAR 0 1
55855: NOT
55856: IFTRUE 55865
55858: PUSH
55859: LD_VAR 0 2
55863: NOT
55864: OR
55865: IFFALSE 55869
// exit ;
55867: GO 56451
// if not factoryWaypoints then
55869: LD_EXP 61
55873: NOT
55874: IFFALSE 55878
// exit ;
55876: GO 56451
// for i := 1 to Count ( factoryWaypoints ) do
55878: LD_ADDR_VAR 0 4
55882: PUSH
55883: DOUBLE
55884: LD_INT 1
55886: DEC
55887: ST_TO_ADDR
55888: LD_EXP 61
55892: PPUSH
55893: CALL 5462 0 1
55897: PUSH
55898: FOR_TO
55899: IFFALSE 56449
// if factoryWaypoints [ i ] [ 2 ] = factory then
55901: LD_EXP 61
55905: PUSH
55906: LD_VAR 0 4
55910: ARRAY
55911: PUSH
55912: LD_INT 2
55914: ARRAY
55915: PUSH
55916: LD_VAR 0 2
55920: EQUAL
55921: IFFALSE 56447
// begin if GetControl ( vehicle ) = control_manual then
55923: LD_VAR 0 1
55927: PPUSH
55928: CALL_OW 263
55932: PUSH
55933: LD_INT 1
55935: EQUAL
55936: IFFALSE 56300
// begin driver := IsDrivenBy ( vehicle ) ;
55938: LD_ADDR_VAR 0 5
55942: PUSH
55943: LD_VAR 0 1
55947: PPUSH
55948: CALL_OW 311
55952: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55953: LD_VAR 0 5
55957: PUSH
55958: LD_EXP 62
55962: IN
55963: IFTRUE 55977
55965: PUSH
55966: LD_VAR 0 1
55970: PUSH
55971: LD_EXP 62
55975: IN
55976: OR
55977: IFFALSE 55983
// exit ;
55979: POP
55980: POP
55981: GO 56451
// if not HasTask ( driver ) then
55983: LD_VAR 0 5
55987: PPUSH
55988: CALL_OW 314
55992: NOT
55993: IFFALSE 56298
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55995: LD_ADDR_EXP 62
55999: PUSH
56000: LD_EXP 62
56004: PPUSH
56005: LD_VAR 0 5
56009: PPUSH
56010: CALL 41394 0 2
56014: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56015: LD_ADDR_EXP 62
56019: PUSH
56020: LD_EXP 62
56024: PPUSH
56025: LD_VAR 0 1
56029: PPUSH
56030: CALL 41394 0 2
56034: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56035: LD_ADDR_VAR 0 6
56039: PUSH
56040: LD_EXP 61
56044: PUSH
56045: LD_VAR 0 4
56049: ARRAY
56050: PUSH
56051: LD_INT 3
56053: ARRAY
56054: PPUSH
56055: LD_EXP 61
56059: PUSH
56060: LD_VAR 0 4
56064: ARRAY
56065: PUSH
56066: LD_INT 4
56068: ARRAY
56069: PPUSH
56070: CALL_OW 428
56074: ST_TO_ADDR
// if hex then
56075: LD_VAR 0 6
56079: IFFALSE 56097
// ComMoveUnit ( driver , hex ) else
56081: LD_VAR 0 5
56085: PPUSH
56086: LD_VAR 0 6
56090: PPUSH
56091: CALL_OW 112
56095: GO 56181
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56097: LD_VAR 0 1
56101: PPUSH
56102: LD_EXP 61
56106: PUSH
56107: LD_VAR 0 4
56111: ARRAY
56112: PUSH
56113: LD_INT 3
56115: ARRAY
56116: PPUSH
56117: LD_EXP 61
56121: PUSH
56122: LD_VAR 0 4
56126: ARRAY
56127: PUSH
56128: LD_INT 4
56130: ARRAY
56131: PPUSH
56132: CALL_OW 297
56136: PUSH
56137: LD_INT 0
56139: GREATER
56140: IFFALSE 56181
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56142: LD_VAR 0 5
56146: PPUSH
56147: LD_EXP 61
56151: PUSH
56152: LD_VAR 0 4
56156: ARRAY
56157: PUSH
56158: LD_INT 3
56160: ARRAY
56161: PPUSH
56162: LD_EXP 61
56166: PUSH
56167: LD_VAR 0 4
56171: ARRAY
56172: PUSH
56173: LD_INT 4
56175: ARRAY
56176: PPUSH
56177: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56181: LD_VAR 0 5
56185: PPUSH
56186: CALL_OW 181
// if Multiplayer then
56190: LD_OWVAR 4
56194: IFFALSE 56243
// begin repeat wait ( 10 ) ;
56196: LD_INT 10
56198: PPUSH
56199: CALL_OW 67
// until not IsInUnit ( driver ) ;
56203: LD_VAR 0 5
56207: PPUSH
56208: CALL_OW 310
56212: NOT
56213: IFFALSE 56196
// if not HasTask ( driver ) then
56215: LD_VAR 0 5
56219: PPUSH
56220: CALL_OW 314
56224: NOT
56225: IFFALSE 56241
// ComEnterUnit ( driver , factory ) ;
56227: LD_VAR 0 5
56231: PPUSH
56232: LD_VAR 0 2
56236: PPUSH
56237: CALL_OW 120
// end else
56241: GO 56257
// AddComEnterUnit ( driver , factory ) ;
56243: LD_VAR 0 5
56247: PPUSH
56248: LD_VAR 0 2
56252: PPUSH
56253: CALL_OW 180
// wait ( 0 0$1 ) ;
56257: LD_INT 35
56259: PPUSH
56260: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56264: LD_ADDR_EXP 62
56268: PUSH
56269: LD_EXP 62
56273: PUSH
56274: LD_VAR 0 5
56278: DIFF
56279: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56280: LD_ADDR_EXP 62
56284: PUSH
56285: LD_EXP 62
56289: PUSH
56290: LD_VAR 0 1
56294: DIFF
56295: ST_TO_ADDR
// break ;
56296: GO 56449
// end ; end else
56298: GO 56447
// if GetControl ( vehicle ) = control_remote then
56300: LD_VAR 0 1
56304: PPUSH
56305: CALL_OW 263
56309: PUSH
56310: LD_INT 2
56312: EQUAL
56313: IFFALSE 56399
// begin wait ( 0 0$2 ) ;
56315: LD_INT 70
56317: PPUSH
56318: CALL_OW 67
// repeat wait ( 10 ) ;
56322: LD_INT 10
56324: PPUSH
56325: CALL_OW 67
// Connect ( vehicle ) ;
56329: LD_VAR 0 1
56333: PPUSH
56334: CALL 11706 0 1
// until IsControledBy ( vehicle ) ;
56338: LD_VAR 0 1
56342: PPUSH
56343: CALL_OW 312
56347: IFFALSE 56322
// wait ( 10 ) ;
56349: LD_INT 10
56351: PPUSH
56352: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56356: LD_VAR 0 1
56360: PPUSH
56361: LD_EXP 61
56365: PUSH
56366: LD_VAR 0 4
56370: ARRAY
56371: PUSH
56372: LD_INT 3
56374: ARRAY
56375: PPUSH
56376: LD_EXP 61
56380: PUSH
56381: LD_VAR 0 4
56385: ARRAY
56386: PUSH
56387: LD_INT 4
56389: ARRAY
56390: PPUSH
56391: CALL_OW 111
// break ;
56395: GO 56449
// end else
56397: GO 56447
// begin wait ( 0 0$3 ) ;
56399: LD_INT 105
56401: PPUSH
56402: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56406: LD_VAR 0 1
56410: PPUSH
56411: LD_EXP 61
56415: PUSH
56416: LD_VAR 0 4
56420: ARRAY
56421: PUSH
56422: LD_INT 3
56424: ARRAY
56425: PPUSH
56426: LD_EXP 61
56430: PUSH
56431: LD_VAR 0 4
56435: ARRAY
56436: PUSH
56437: LD_INT 4
56439: ARRAY
56440: PPUSH
56441: CALL_OW 111
// break ;
56445: GO 56449
// end ; end ;
56447: GO 55898
56449: POP
56450: POP
// end ;
56451: LD_VAR 0 3
56455: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56456: LD_INT 0
56458: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56459: LD_VAR 0 1
56463: PUSH
56464: LD_INT 250
56466: EQUAL
56467: IFFALSE 56484
56469: PUSH
56470: LD_VAR 0 2
56474: PPUSH
56475: CALL_OW 264
56479: PUSH
56480: LD_INT 81
56482: EQUAL
56483: AND
56484: IFFALSE 56505
// MinerPlaceMine ( unit , x , y ) ;
56486: LD_VAR 0 2
56490: PPUSH
56491: LD_VAR 0 4
56495: PPUSH
56496: LD_VAR 0 5
56500: PPUSH
56501: CALL 59637 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56505: LD_VAR 0 1
56509: PUSH
56510: LD_INT 251
56512: EQUAL
56513: IFFALSE 56530
56515: PUSH
56516: LD_VAR 0 2
56520: PPUSH
56521: CALL_OW 264
56525: PUSH
56526: LD_INT 81
56528: EQUAL
56529: AND
56530: IFFALSE 56551
// MinerDetonateMine ( unit , x , y ) ;
56532: LD_VAR 0 2
56536: PPUSH
56537: LD_VAR 0 4
56541: PPUSH
56542: LD_VAR 0 5
56546: PPUSH
56547: CALL 59916 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56551: LD_VAR 0 1
56555: PUSH
56556: LD_INT 252
56558: EQUAL
56559: IFFALSE 56576
56561: PUSH
56562: LD_VAR 0 2
56566: PPUSH
56567: CALL_OW 264
56571: PUSH
56572: LD_INT 81
56574: EQUAL
56575: AND
56576: IFFALSE 56597
// MinerCreateMinefield ( unit , x , y ) ;
56578: LD_VAR 0 2
56582: PPUSH
56583: LD_VAR 0 4
56587: PPUSH
56588: LD_VAR 0 5
56592: PPUSH
56593: CALL 60335 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56597: LD_VAR 0 1
56601: PUSH
56602: LD_INT 253
56604: EQUAL
56605: IFFALSE 56622
56607: PUSH
56608: LD_VAR 0 2
56612: PPUSH
56613: CALL_OW 257
56617: PUSH
56618: LD_INT 5
56620: EQUAL
56621: AND
56622: IFFALSE 56643
// ComBinocular ( unit , x , y ) ;
56624: LD_VAR 0 2
56628: PPUSH
56629: LD_VAR 0 4
56633: PPUSH
56634: LD_VAR 0 5
56638: PPUSH
56639: CALL 60710 0 3
// if selectedUnit then
56643: LD_VAR 0 3
56647: IFFALSE 56707
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56649: LD_VAR 0 1
56653: PUSH
56654: LD_INT 254
56656: EQUAL
56657: IFFALSE 56674
56659: PUSH
56660: LD_VAR 0 2
56664: PPUSH
56665: CALL_OW 264
56669: PUSH
56670: LD_INT 99
56672: EQUAL
56673: AND
56674: IFFALSE 56691
56676: PUSH
56677: LD_VAR 0 3
56681: PPUSH
56682: CALL_OW 263
56686: PUSH
56687: LD_INT 3
56689: EQUAL
56690: AND
56691: IFFALSE 56707
// HackDestroyVehicle ( unit , selectedUnit ) ;
56693: LD_VAR 0 2
56697: PPUSH
56698: LD_VAR 0 3
56702: PPUSH
56703: CALL 58997 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56707: LD_VAR 0 1
56711: PUSH
56712: LD_INT 255
56714: EQUAL
56715: IFFALSE 56739
56717: PUSH
56718: LD_VAR 0 2
56722: PPUSH
56723: CALL_OW 264
56727: PUSH
56728: LD_INT 14
56730: PUSH
56731: LD_INT 53
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: IN
56738: AND
56739: IFFALSE 56757
56741: PUSH
56742: LD_VAR 0 4
56746: PPUSH
56747: LD_VAR 0 5
56751: PPUSH
56752: CALL_OW 488
56756: AND
56757: IFFALSE 56781
// CutTreeXYR ( unit , x , y , 12 ) ;
56759: LD_VAR 0 2
56763: PPUSH
56764: LD_VAR 0 4
56768: PPUSH
56769: LD_VAR 0 5
56773: PPUSH
56774: LD_INT 12
56776: PPUSH
56777: CALL 56972 0 4
// if cmd = 256 then
56781: LD_VAR 0 1
56785: PUSH
56786: LD_INT 256
56788: EQUAL
56789: IFFALSE 56810
// SetFactoryWaypoint ( unit , x , y ) ;
56791: LD_VAR 0 2
56795: PPUSH
56796: LD_VAR 0 4
56800: PPUSH
56801: LD_VAR 0 5
56805: PPUSH
56806: CALL 61869 0 3
// if cmd = 257 then
56810: LD_VAR 0 1
56814: PUSH
56815: LD_INT 257
56817: EQUAL
56818: IFFALSE 56839
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56820: LD_VAR 0 2
56824: PPUSH
56825: LD_VAR 0 4
56829: PPUSH
56830: LD_VAR 0 5
56834: PPUSH
56835: CALL 62365 0 3
// if cmd = 258 then
56839: LD_VAR 0 1
56843: PUSH
56844: LD_INT 258
56846: EQUAL
56847: IFFALSE 56871
// BurnTreeXYR ( unit , x , y , 8 ) ;
56849: LD_VAR 0 2
56853: PPUSH
56854: LD_VAR 0 4
56858: PPUSH
56859: LD_VAR 0 5
56863: PPUSH
56864: LD_INT 8
56866: PPUSH
56867: CALL 57372 0 4
// end ;
56871: LD_VAR 0 6
56875: RET
// export function ComRadiation ( un ) ; var eff ; begin
56876: LD_INT 0
56878: PPUSH
56879: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56880: LD_VAR 0 1
56884: PPUSH
56885: CALL_OW 264
56889: PUSH
56890: LD_INT 91
56892: NONEQUAL
56893: IFFALSE 56897
// exit ;
56895: GO 56967
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56897: LD_INT 68
56899: PPUSH
56900: LD_VAR 0 1
56904: PPUSH
56905: CALL_OW 255
56909: PPUSH
56910: CALL_OW 321
56914: PUSH
56915: LD_INT 2
56917: EQUAL
56918: IFFALSE 56930
// eff := 50 else
56920: LD_ADDR_VAR 0 3
56924: PUSH
56925: LD_INT 50
56927: ST_TO_ADDR
56928: GO 56938
// eff := 25 ;
56930: LD_ADDR_VAR 0 3
56934: PUSH
56935: LD_INT 25
56937: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56938: LD_VAR 0 1
56942: PPUSH
56943: CALL_OW 250
56947: PPUSH
56948: LD_VAR 0 1
56952: PPUSH
56953: CALL_OW 251
56957: PPUSH
56958: LD_VAR 0 3
56962: PPUSH
56963: CALL_OW 495
// end ;
56967: LD_VAR 0 2
56971: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56972: LD_INT 0
56974: PPUSH
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
56979: PPUSH
56980: PPUSH
56981: PPUSH
56982: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56983: LD_VAR 0 1
56987: PPUSH
56988: CALL_OW 302
56992: NOT
56993: IFTRUE 57012
56995: PUSH
56996: LD_VAR 0 2
57000: PPUSH
57001: LD_VAR 0 3
57005: PPUSH
57006: CALL_OW 488
57010: NOT
57011: OR
57012: IFTRUE 57021
57014: PUSH
57015: LD_VAR 0 4
57019: NOT
57020: OR
57021: IFFALSE 57025
// exit ;
57023: GO 57367
// list := [ ] ;
57025: LD_ADDR_VAR 0 13
57029: PUSH
57030: EMPTY
57031: ST_TO_ADDR
// if x - r < 0 then
57032: LD_VAR 0 2
57036: PUSH
57037: LD_VAR 0 4
57041: MINUS
57042: PUSH
57043: LD_INT 0
57045: LESS
57046: IFFALSE 57058
// min_x := 0 else
57048: LD_ADDR_VAR 0 7
57052: PUSH
57053: LD_INT 0
57055: ST_TO_ADDR
57056: GO 57074
// min_x := x - r ;
57058: LD_ADDR_VAR 0 7
57062: PUSH
57063: LD_VAR 0 2
57067: PUSH
57068: LD_VAR 0 4
57072: MINUS
57073: ST_TO_ADDR
// if y - r < 0 then
57074: LD_VAR 0 3
57078: PUSH
57079: LD_VAR 0 4
57083: MINUS
57084: PUSH
57085: LD_INT 0
57087: LESS
57088: IFFALSE 57100
// min_y := 0 else
57090: LD_ADDR_VAR 0 8
57094: PUSH
57095: LD_INT 0
57097: ST_TO_ADDR
57098: GO 57116
// min_y := y - r ;
57100: LD_ADDR_VAR 0 8
57104: PUSH
57105: LD_VAR 0 3
57109: PUSH
57110: LD_VAR 0 4
57114: MINUS
57115: ST_TO_ADDR
// max_x := x + r ;
57116: LD_ADDR_VAR 0 9
57120: PUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_VAR 0 4
57130: PLUS
57131: ST_TO_ADDR
// max_y := y + r ;
57132: LD_ADDR_VAR 0 10
57136: PUSH
57137: LD_VAR 0 3
57141: PUSH
57142: LD_VAR 0 4
57146: PLUS
57147: ST_TO_ADDR
// for _x = min_x to max_x do
57148: LD_ADDR_VAR 0 11
57152: PUSH
57153: DOUBLE
57154: LD_VAR 0 7
57158: DEC
57159: ST_TO_ADDR
57160: LD_VAR 0 9
57164: PUSH
57165: FOR_TO
57166: IFFALSE 57285
// for _y = min_y to max_y do
57168: LD_ADDR_VAR 0 12
57172: PUSH
57173: DOUBLE
57174: LD_VAR 0 8
57178: DEC
57179: ST_TO_ADDR
57180: LD_VAR 0 10
57184: PUSH
57185: FOR_TO
57186: IFFALSE 57281
// begin if not ValidHex ( _x , _y ) then
57188: LD_VAR 0 11
57192: PPUSH
57193: LD_VAR 0 12
57197: PPUSH
57198: CALL_OW 488
57202: NOT
57203: IFFALSE 57207
// continue ;
57205: GO 57185
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57207: LD_VAR 0 11
57211: PPUSH
57212: LD_VAR 0 12
57216: PPUSH
57217: CALL_OW 351
57221: IFFALSE 57239
57223: PUSH
57224: LD_VAR 0 11
57228: PPUSH
57229: LD_VAR 0 12
57233: PPUSH
57234: CALL_OW 554
57238: AND
57239: IFFALSE 57279
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57241: LD_ADDR_VAR 0 13
57245: PUSH
57246: LD_VAR 0 13
57250: PPUSH
57251: LD_VAR 0 13
57255: PUSH
57256: LD_INT 1
57258: PLUS
57259: PPUSH
57260: LD_VAR 0 11
57264: PUSH
57265: LD_VAR 0 12
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PPUSH
57274: CALL_OW 2
57278: ST_TO_ADDR
// end ;
57279: GO 57185
57281: POP
57282: POP
57283: GO 57165
57285: POP
57286: POP
// if not list then
57287: LD_VAR 0 13
57291: NOT
57292: IFFALSE 57296
// exit ;
57294: GO 57367
// for i in list do
57296: LD_ADDR_VAR 0 6
57300: PUSH
57301: LD_VAR 0 13
57305: PUSH
57306: FOR_IN
57307: IFFALSE 57365
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57309: LD_VAR 0 1
57313: PPUSH
57314: LD_STRING M
57316: PUSH
57317: LD_VAR 0 6
57321: PUSH
57322: LD_INT 1
57324: ARRAY
57325: PUSH
57326: LD_VAR 0 6
57330: PUSH
57331: LD_INT 2
57333: ARRAY
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: PUSH
57356: EMPTY
57357: LIST
57358: PPUSH
57359: CALL_OW 447
57363: GO 57306
57365: POP
57366: POP
// end ;
57367: LD_VAR 0 5
57371: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57372: LD_INT 0
57374: PPUSH
57375: PPUSH
57376: PPUSH
57377: PPUSH
57378: PPUSH
57379: PPUSH
57380: PPUSH
57381: PPUSH
57382: PPUSH
57383: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57384: LD_VAR 0 1
57388: PPUSH
57389: CALL_OW 302
57393: NOT
57394: IFTRUE 57413
57396: PUSH
57397: LD_VAR 0 2
57401: PPUSH
57402: LD_VAR 0 3
57406: PPUSH
57407: CALL_OW 488
57411: NOT
57412: OR
57413: IFTRUE 57422
57415: PUSH
57416: LD_VAR 0 4
57420: NOT
57421: OR
57422: IFFALSE 57426
// exit ;
57424: GO 57943
// list := [ ] ;
57426: LD_ADDR_VAR 0 13
57430: PUSH
57431: EMPTY
57432: ST_TO_ADDR
// if x - r < 0 then
57433: LD_VAR 0 2
57437: PUSH
57438: LD_VAR 0 4
57442: MINUS
57443: PUSH
57444: LD_INT 0
57446: LESS
57447: IFFALSE 57459
// min_x := 0 else
57449: LD_ADDR_VAR 0 7
57453: PUSH
57454: LD_INT 0
57456: ST_TO_ADDR
57457: GO 57475
// min_x := x - r ;
57459: LD_ADDR_VAR 0 7
57463: PUSH
57464: LD_VAR 0 2
57468: PUSH
57469: LD_VAR 0 4
57473: MINUS
57474: ST_TO_ADDR
// if y - r < 0 then
57475: LD_VAR 0 3
57479: PUSH
57480: LD_VAR 0 4
57484: MINUS
57485: PUSH
57486: LD_INT 0
57488: LESS
57489: IFFALSE 57501
// min_y := 0 else
57491: LD_ADDR_VAR 0 8
57495: PUSH
57496: LD_INT 0
57498: ST_TO_ADDR
57499: GO 57517
// min_y := y - r ;
57501: LD_ADDR_VAR 0 8
57505: PUSH
57506: LD_VAR 0 3
57510: PUSH
57511: LD_VAR 0 4
57515: MINUS
57516: ST_TO_ADDR
// max_x := x + r ;
57517: LD_ADDR_VAR 0 9
57521: PUSH
57522: LD_VAR 0 2
57526: PUSH
57527: LD_VAR 0 4
57531: PLUS
57532: ST_TO_ADDR
// max_y := y + r ;
57533: LD_ADDR_VAR 0 10
57537: PUSH
57538: LD_VAR 0 3
57542: PUSH
57543: LD_VAR 0 4
57547: PLUS
57548: ST_TO_ADDR
// for _x = min_x to max_x do
57549: LD_ADDR_VAR 0 11
57553: PUSH
57554: DOUBLE
57555: LD_VAR 0 7
57559: DEC
57560: ST_TO_ADDR
57561: LD_VAR 0 9
57565: PUSH
57566: FOR_TO
57567: IFFALSE 57686
// for _y = min_y to max_y do
57569: LD_ADDR_VAR 0 12
57573: PUSH
57574: DOUBLE
57575: LD_VAR 0 8
57579: DEC
57580: ST_TO_ADDR
57581: LD_VAR 0 10
57585: PUSH
57586: FOR_TO
57587: IFFALSE 57682
// begin if not ValidHex ( _x , _y ) then
57589: LD_VAR 0 11
57593: PPUSH
57594: LD_VAR 0 12
57598: PPUSH
57599: CALL_OW 488
57603: NOT
57604: IFFALSE 57608
// continue ;
57606: GO 57586
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57608: LD_VAR 0 11
57612: PPUSH
57613: LD_VAR 0 12
57617: PPUSH
57618: CALL_OW 351
57622: IFFALSE 57640
57624: PUSH
57625: LD_VAR 0 11
57629: PPUSH
57630: LD_VAR 0 12
57634: PPUSH
57635: CALL_OW 554
57639: AND
57640: IFFALSE 57680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57642: LD_ADDR_VAR 0 13
57646: PUSH
57647: LD_VAR 0 13
57651: PPUSH
57652: LD_VAR 0 13
57656: PUSH
57657: LD_INT 1
57659: PLUS
57660: PPUSH
57661: LD_VAR 0 11
57665: PUSH
57666: LD_VAR 0 12
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PPUSH
57675: CALL_OW 2
57679: ST_TO_ADDR
// end ;
57680: GO 57586
57682: POP
57683: POP
57684: GO 57566
57686: POP
57687: POP
// if not list then
57688: LD_VAR 0 13
57692: NOT
57693: IFFALSE 57697
// exit ;
57695: GO 57943
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57697: LD_ADDR_VAR 0 13
57701: PUSH
57702: LD_VAR 0 1
57706: PPUSH
57707: LD_VAR 0 13
57711: PPUSH
57712: LD_INT 1
57714: PPUSH
57715: LD_INT 1
57717: PPUSH
57718: CALL 8834 0 4
57722: ST_TO_ADDR
// ComStop ( flame ) ;
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 141
// for i in list do
57732: LD_ADDR_VAR 0 6
57736: PUSH
57737: LD_VAR 0 13
57741: PUSH
57742: FOR_IN
57743: IFFALSE 57774
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57745: LD_VAR 0 1
57749: PPUSH
57750: LD_VAR 0 6
57754: PUSH
57755: LD_INT 1
57757: ARRAY
57758: PPUSH
57759: LD_VAR 0 6
57763: PUSH
57764: LD_INT 2
57766: ARRAY
57767: PPUSH
57768: CALL_OW 176
57772: GO 57742
57774: POP
57775: POP
// repeat wait ( 0 0$1 ) ;
57776: LD_INT 35
57778: PPUSH
57779: CALL_OW 67
// task := GetTaskList ( flame ) ;
57783: LD_ADDR_VAR 0 14
57787: PUSH
57788: LD_VAR 0 1
57792: PPUSH
57793: CALL_OW 437
57797: ST_TO_ADDR
// if not task then
57798: LD_VAR 0 14
57802: NOT
57803: IFFALSE 57807
// exit ;
57805: GO 57943
// if task [ 1 ] [ 1 ] <> | then
57807: LD_VAR 0 14
57811: PUSH
57812: LD_INT 1
57814: ARRAY
57815: PUSH
57816: LD_INT 1
57818: ARRAY
57819: PUSH
57820: LD_STRING |
57822: NONEQUAL
57823: IFFALSE 57827
// exit ;
57825: GO 57943
// _x := task [ 1 ] [ 2 ] ;
57827: LD_ADDR_VAR 0 11
57831: PUSH
57832: LD_VAR 0 14
57836: PUSH
57837: LD_INT 1
57839: ARRAY
57840: PUSH
57841: LD_INT 2
57843: ARRAY
57844: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57845: LD_ADDR_VAR 0 12
57849: PUSH
57850: LD_VAR 0 14
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: PUSH
57859: LD_INT 3
57861: ARRAY
57862: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57863: LD_VAR 0 11
57867: PPUSH
57868: LD_VAR 0 12
57872: PPUSH
57873: CALL_OW 351
57877: NOT
57878: IFTRUE 57897
57880: PUSH
57881: LD_VAR 0 11
57885: PPUSH
57886: LD_VAR 0 12
57890: PPUSH
57891: CALL_OW 554
57895: NOT
57896: OR
57897: IFFALSE 57931
// begin task := Delete ( task , 1 ) ;
57899: LD_ADDR_VAR 0 14
57903: PUSH
57904: LD_VAR 0 14
57908: PPUSH
57909: LD_INT 1
57911: PPUSH
57912: CALL_OW 3
57916: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57917: LD_VAR 0 1
57921: PPUSH
57922: LD_VAR 0 14
57926: PPUSH
57927: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57931: LD_VAR 0 1
57935: PPUSH
57936: CALL_OW 314
57940: NOT
57941: IFFALSE 57776
// end ;
57943: LD_VAR 0 5
57947: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57948: LD_EXP 51
57952: NOT
57953: IFFALSE 58003
57955: GO 57957
57957: DISABLE
// begin initHack := true ;
57958: LD_ADDR_EXP 51
57962: PUSH
57963: LD_INT 1
57965: ST_TO_ADDR
// hackTanks := [ ] ;
57966: LD_ADDR_EXP 52
57970: PUSH
57971: EMPTY
57972: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57973: LD_ADDR_EXP 53
57977: PUSH
57978: EMPTY
57979: ST_TO_ADDR
// hackLimit := 3 ;
57980: LD_ADDR_EXP 54
57984: PUSH
57985: LD_INT 3
57987: ST_TO_ADDR
// hackDist := 12 ;
57988: LD_ADDR_EXP 55
57992: PUSH
57993: LD_INT 12
57995: ST_TO_ADDR
// hackCounter := [ ] ;
57996: LD_ADDR_EXP 56
58000: PUSH
58001: EMPTY
58002: ST_TO_ADDR
// end ;
58003: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58004: LD_EXP 51
58008: IFFALSE 58026
58010: PUSH
58011: LD_INT 34
58013: PUSH
58014: LD_INT 99
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PPUSH
58021: CALL_OW 69
58025: AND
58026: IFFALSE 58279
58028: GO 58030
58030: DISABLE
58031: LD_INT 0
58033: PPUSH
58034: PPUSH
// begin enable ;
58035: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58036: LD_ADDR_VAR 0 1
58040: PUSH
58041: LD_INT 34
58043: PUSH
58044: LD_INT 99
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PPUSH
58051: CALL_OW 69
58055: PUSH
58056: FOR_IN
58057: IFFALSE 58277
// begin if not i in hackTanks then
58059: LD_VAR 0 1
58063: PUSH
58064: LD_EXP 52
58068: IN
58069: NOT
58070: IFFALSE 58153
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58072: LD_ADDR_EXP 52
58076: PUSH
58077: LD_EXP 52
58081: PPUSH
58082: LD_EXP 52
58086: PUSH
58087: LD_INT 1
58089: PLUS
58090: PPUSH
58091: LD_VAR 0 1
58095: PPUSH
58096: CALL_OW 1
58100: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58101: LD_ADDR_EXP 53
58105: PUSH
58106: LD_EXP 53
58110: PPUSH
58111: LD_EXP 53
58115: PUSH
58116: LD_INT 1
58118: PLUS
58119: PPUSH
58120: EMPTY
58121: PPUSH
58122: CALL_OW 1
58126: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58127: LD_ADDR_EXP 56
58131: PUSH
58132: LD_EXP 56
58136: PPUSH
58137: LD_EXP 56
58141: PUSH
58142: LD_INT 1
58144: PLUS
58145: PPUSH
58146: EMPTY
58147: PPUSH
58148: CALL_OW 1
58152: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58153: LD_VAR 0 1
58157: PPUSH
58158: CALL_OW 302
58162: NOT
58163: IFFALSE 58176
// begin HackUnlinkAll ( i ) ;
58165: LD_VAR 0 1
58169: PPUSH
58170: CALL 58282 0 1
// continue ;
58174: GO 58056
// end ; HackCheckCapturedStatus ( i ) ;
58176: LD_VAR 0 1
58180: PPUSH
58181: CALL 58727 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58185: LD_ADDR_VAR 0 2
58189: PUSH
58190: LD_INT 81
58192: PUSH
58193: LD_VAR 0 1
58197: PPUSH
58198: CALL_OW 255
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 33
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 91
58219: PUSH
58220: LD_VAR 0 1
58224: PUSH
58225: LD_EXP 55
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 50
58237: PUSH
58238: EMPTY
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: PPUSH
58247: CALL_OW 69
58251: ST_TO_ADDR
// if not tmp then
58252: LD_VAR 0 2
58256: NOT
58257: IFFALSE 58261
// continue ;
58259: GO 58056
// HackLink ( i , tmp ) ;
58261: LD_VAR 0 1
58265: PPUSH
58266: LD_VAR 0 2
58270: PPUSH
58271: CALL 58418 0 2
// end ;
58275: GO 58056
58277: POP
58278: POP
// end ;
58279: PPOPN 2
58281: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58282: LD_INT 0
58284: PPUSH
58285: PPUSH
58286: PPUSH
// if not hack in hackTanks then
58287: LD_VAR 0 1
58291: PUSH
58292: LD_EXP 52
58296: IN
58297: NOT
58298: IFFALSE 58302
// exit ;
58300: GO 58413
// index := GetElementIndex ( hackTanks , hack ) ;
58302: LD_ADDR_VAR 0 4
58306: PUSH
58307: LD_EXP 52
58311: PPUSH
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL 8129 0 2
58321: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58322: LD_EXP 53
58326: PUSH
58327: LD_VAR 0 4
58331: ARRAY
58332: IFFALSE 58413
// begin for i in hackTanksCaptured [ index ] do
58334: LD_ADDR_VAR 0 3
58338: PUSH
58339: LD_EXP 53
58343: PUSH
58344: LD_VAR 0 4
58348: ARRAY
58349: PUSH
58350: FOR_IN
58351: IFFALSE 58377
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58353: LD_VAR 0 3
58357: PUSH
58358: LD_INT 1
58360: ARRAY
58361: PPUSH
58362: LD_VAR 0 3
58366: PUSH
58367: LD_INT 2
58369: ARRAY
58370: PPUSH
58371: CALL_OW 235
58375: GO 58350
58377: POP
58378: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58379: LD_ADDR_EXP 53
58383: PUSH
58384: LD_EXP 53
58388: PPUSH
58389: LD_VAR 0 4
58393: PPUSH
58394: EMPTY
58395: PPUSH
58396: CALL_OW 1
58400: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58401: LD_VAR 0 1
58405: PPUSH
58406: LD_INT 0
58408: PPUSH
58409: CALL_OW 505
// end ; end ;
58413: LD_VAR 0 2
58417: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58418: LD_INT 0
58420: PPUSH
58421: PPUSH
58422: PPUSH
// if not hack in hackTanks or not vehicles then
58423: LD_VAR 0 1
58427: PUSH
58428: LD_EXP 52
58432: IN
58433: NOT
58434: IFTRUE 58443
58436: PUSH
58437: LD_VAR 0 2
58441: NOT
58442: OR
58443: IFFALSE 58447
// exit ;
58445: GO 58722
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58447: LD_ADDR_VAR 0 2
58451: PUSH
58452: LD_VAR 0 1
58456: PPUSH
58457: LD_VAR 0 2
58461: PPUSH
58462: LD_INT 1
58464: PPUSH
58465: LD_INT 1
58467: PPUSH
58468: CALL 8781 0 4
58472: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58473: LD_ADDR_VAR 0 5
58477: PUSH
58478: LD_EXP 52
58482: PPUSH
58483: LD_VAR 0 1
58487: PPUSH
58488: CALL 8129 0 2
58492: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58493: LD_EXP 53
58497: PUSH
58498: LD_VAR 0 5
58502: ARRAY
58503: PUSH
58504: LD_EXP 54
58508: LESS
58509: IFFALSE 58698
// begin for i := 1 to vehicles do
58511: LD_ADDR_VAR 0 4
58515: PUSH
58516: DOUBLE
58517: LD_INT 1
58519: DEC
58520: ST_TO_ADDR
58521: LD_VAR 0 2
58525: PUSH
58526: FOR_TO
58527: IFFALSE 58696
// begin if hackTanksCaptured [ index ] = hackLimit then
58529: LD_EXP 53
58533: PUSH
58534: LD_VAR 0 5
58538: ARRAY
58539: PUSH
58540: LD_EXP 54
58544: EQUAL
58545: IFFALSE 58549
// break ;
58547: GO 58696
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58549: LD_ADDR_EXP 56
58553: PUSH
58554: LD_EXP 56
58558: PPUSH
58559: LD_VAR 0 5
58563: PPUSH
58564: LD_EXP 56
58568: PUSH
58569: LD_VAR 0 5
58573: ARRAY
58574: PUSH
58575: LD_INT 1
58577: PLUS
58578: PPUSH
58579: CALL_OW 1
58583: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58584: LD_ADDR_EXP 53
58588: PUSH
58589: LD_EXP 53
58593: PPUSH
58594: LD_VAR 0 5
58598: PUSH
58599: LD_EXP 53
58603: PUSH
58604: LD_VAR 0 5
58608: ARRAY
58609: PUSH
58610: LD_INT 1
58612: PLUS
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PPUSH
58618: LD_VAR 0 2
58622: PUSH
58623: LD_VAR 0 4
58627: ARRAY
58628: PUSH
58629: LD_VAR 0 2
58633: PUSH
58634: LD_VAR 0 4
58638: ARRAY
58639: PPUSH
58640: CALL_OW 255
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PPUSH
58649: CALL 8346 0 3
58653: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58654: LD_VAR 0 2
58658: PUSH
58659: LD_VAR 0 4
58663: ARRAY
58664: PPUSH
58665: LD_VAR 0 1
58669: PPUSH
58670: CALL_OW 255
58674: PPUSH
58675: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58679: LD_VAR 0 2
58683: PUSH
58684: LD_VAR 0 4
58688: ARRAY
58689: PPUSH
58690: CALL_OW 141
// end ;
58694: GO 58526
58696: POP
58697: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58698: LD_VAR 0 1
58702: PPUSH
58703: LD_EXP 53
58707: PUSH
58708: LD_VAR 0 5
58712: ARRAY
58713: PUSH
58714: LD_INT 0
58716: PLUS
58717: PPUSH
58718: CALL_OW 505
// end ;
58722: LD_VAR 0 3
58726: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58727: LD_INT 0
58729: PPUSH
58730: PPUSH
58731: PPUSH
58732: PPUSH
// if not hack in hackTanks then
58733: LD_VAR 0 1
58737: PUSH
58738: LD_EXP 52
58742: IN
58743: NOT
58744: IFFALSE 58748
// exit ;
58746: GO 58992
// index := GetElementIndex ( hackTanks , hack ) ;
58748: LD_ADDR_VAR 0 4
58752: PUSH
58753: LD_EXP 52
58757: PPUSH
58758: LD_VAR 0 1
58762: PPUSH
58763: CALL 8129 0 2
58767: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58768: LD_ADDR_VAR 0 3
58772: PUSH
58773: DOUBLE
58774: LD_EXP 53
58778: PUSH
58779: LD_VAR 0 4
58783: ARRAY
58784: INC
58785: ST_TO_ADDR
58786: LD_INT 1
58788: PUSH
58789: FOR_DOWNTO
58790: IFFALSE 58966
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58792: LD_ADDR_VAR 0 5
58796: PUSH
58797: LD_EXP 53
58801: PUSH
58802: LD_VAR 0 4
58806: ARRAY
58807: PUSH
58808: LD_VAR 0 3
58812: ARRAY
58813: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58814: LD_VAR 0 5
58818: PUSH
58819: LD_INT 1
58821: ARRAY
58822: PPUSH
58823: CALL_OW 302
58827: NOT
58828: IFTRUE 58856
58830: PUSH
58831: LD_VAR 0 5
58835: PUSH
58836: LD_INT 1
58838: ARRAY
58839: PPUSH
58840: CALL_OW 255
58844: PUSH
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 255
58854: NONEQUAL
58855: OR
58856: IFFALSE 58964
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58858: LD_VAR 0 5
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PPUSH
58867: CALL_OW 305
58871: IFFALSE 58899
58873: PUSH
58874: LD_VAR 0 5
58878: PUSH
58879: LD_INT 1
58881: ARRAY
58882: PPUSH
58883: CALL_OW 255
58887: PUSH
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL_OW 255
58897: EQUAL
58898: AND
58899: IFFALSE 58923
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58901: LD_VAR 0 5
58905: PUSH
58906: LD_INT 1
58908: ARRAY
58909: PPUSH
58910: LD_VAR 0 5
58914: PUSH
58915: LD_INT 2
58917: ARRAY
58918: PPUSH
58919: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58923: LD_ADDR_EXP 53
58927: PUSH
58928: LD_EXP 53
58932: PPUSH
58933: LD_VAR 0 4
58937: PPUSH
58938: LD_EXP 53
58942: PUSH
58943: LD_VAR 0 4
58947: ARRAY
58948: PPUSH
58949: LD_VAR 0 3
58953: PPUSH
58954: CALL_OW 3
58958: PPUSH
58959: CALL_OW 1
58963: ST_TO_ADDR
// end ; end ;
58964: GO 58789
58966: POP
58967: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58968: LD_VAR 0 1
58972: PPUSH
58973: LD_EXP 53
58977: PUSH
58978: LD_VAR 0 4
58982: ARRAY
58983: PUSH
58984: LD_INT 0
58986: PLUS
58987: PPUSH
58988: CALL_OW 505
// end ;
58992: LD_VAR 0 2
58996: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58997: LD_INT 0
58999: PPUSH
59000: PPUSH
59001: PPUSH
59002: PPUSH
// if not hack in hackTanks then
59003: LD_VAR 0 1
59007: PUSH
59008: LD_EXP 52
59012: IN
59013: NOT
59014: IFFALSE 59018
// exit ;
59016: GO 59103
// index := GetElementIndex ( hackTanks , hack ) ;
59018: LD_ADDR_VAR 0 5
59022: PUSH
59023: LD_EXP 52
59027: PPUSH
59028: LD_VAR 0 1
59032: PPUSH
59033: CALL 8129 0 2
59037: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59038: LD_ADDR_VAR 0 4
59042: PUSH
59043: DOUBLE
59044: LD_INT 1
59046: DEC
59047: ST_TO_ADDR
59048: LD_EXP 53
59052: PUSH
59053: LD_VAR 0 5
59057: ARRAY
59058: PUSH
59059: FOR_TO
59060: IFFALSE 59101
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59062: LD_EXP 53
59066: PUSH
59067: LD_VAR 0 5
59071: ARRAY
59072: PUSH
59073: LD_VAR 0 4
59077: ARRAY
59078: PUSH
59079: LD_INT 1
59081: ARRAY
59082: PUSH
59083: LD_VAR 0 2
59087: EQUAL
59088: IFFALSE 59099
// KillUnit ( vehicle ) ;
59090: LD_VAR 0 2
59094: PPUSH
59095: CALL_OW 66
59099: GO 59059
59101: POP
59102: POP
// end ;
59103: LD_VAR 0 3
59107: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59108: LD_EXP 57
59112: NOT
59113: IFFALSE 59148
59115: GO 59117
59117: DISABLE
// begin initMiner := true ;
59118: LD_ADDR_EXP 57
59122: PUSH
59123: LD_INT 1
59125: ST_TO_ADDR
// minersList := [ ] ;
59126: LD_ADDR_EXP 58
59130: PUSH
59131: EMPTY
59132: ST_TO_ADDR
// minerMinesList := [ ] ;
59133: LD_ADDR_EXP 59
59137: PUSH
59138: EMPTY
59139: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59140: LD_ADDR_EXP 60
59144: PUSH
59145: LD_INT 5
59147: ST_TO_ADDR
// end ;
59148: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59149: LD_EXP 57
59153: IFFALSE 59171
59155: PUSH
59156: LD_INT 34
59158: PUSH
59159: LD_INT 81
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PPUSH
59166: CALL_OW 69
59170: AND
59171: IFFALSE 59634
59173: GO 59175
59175: DISABLE
59176: LD_INT 0
59178: PPUSH
59179: PPUSH
59180: PPUSH
59181: PPUSH
// begin enable ;
59182: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59183: LD_ADDR_VAR 0 1
59187: PUSH
59188: LD_INT 34
59190: PUSH
59191: LD_INT 81
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PPUSH
59198: CALL_OW 69
59202: PUSH
59203: FOR_IN
59204: IFFALSE 59276
// begin if not i in minersList then
59206: LD_VAR 0 1
59210: PUSH
59211: LD_EXP 58
59215: IN
59216: NOT
59217: IFFALSE 59274
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59219: LD_ADDR_EXP 58
59223: PUSH
59224: LD_EXP 58
59228: PPUSH
59229: LD_EXP 58
59233: PUSH
59234: LD_INT 1
59236: PLUS
59237: PPUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL_OW 1
59247: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59248: LD_ADDR_EXP 59
59252: PUSH
59253: LD_EXP 59
59257: PPUSH
59258: LD_EXP 59
59262: PUSH
59263: LD_INT 1
59265: PLUS
59266: PPUSH
59267: EMPTY
59268: PPUSH
59269: CALL_OW 1
59273: ST_TO_ADDR
// end end ;
59274: GO 59203
59276: POP
59277: POP
// for i := minerMinesList downto 1 do
59278: LD_ADDR_VAR 0 1
59282: PUSH
59283: DOUBLE
59284: LD_EXP 59
59288: INC
59289: ST_TO_ADDR
59290: LD_INT 1
59292: PUSH
59293: FOR_DOWNTO
59294: IFFALSE 59632
// begin if IsLive ( minersList [ i ] ) then
59296: LD_EXP 58
59300: PUSH
59301: LD_VAR 0 1
59305: ARRAY
59306: PPUSH
59307: CALL_OW 300
59311: IFFALSE 59339
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59313: LD_EXP 58
59317: PUSH
59318: LD_VAR 0 1
59322: ARRAY
59323: PPUSH
59324: LD_EXP 59
59328: PUSH
59329: LD_VAR 0 1
59333: ARRAY
59334: PPUSH
59335: CALL_OW 505
// if not minerMinesList [ i ] then
59339: LD_EXP 59
59343: PUSH
59344: LD_VAR 0 1
59348: ARRAY
59349: NOT
59350: IFFALSE 59354
// continue ;
59352: GO 59293
// for j := minerMinesList [ i ] downto 1 do
59354: LD_ADDR_VAR 0 2
59358: PUSH
59359: DOUBLE
59360: LD_EXP 59
59364: PUSH
59365: LD_VAR 0 1
59369: ARRAY
59370: INC
59371: ST_TO_ADDR
59372: LD_INT 1
59374: PUSH
59375: FOR_DOWNTO
59376: IFFALSE 59628
// begin side := GetSide ( minersList [ i ] ) ;
59378: LD_ADDR_VAR 0 3
59382: PUSH
59383: LD_EXP 58
59387: PUSH
59388: LD_VAR 0 1
59392: ARRAY
59393: PPUSH
59394: CALL_OW 255
59398: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59399: LD_ADDR_VAR 0 4
59403: PUSH
59404: LD_EXP 59
59408: PUSH
59409: LD_VAR 0 1
59413: ARRAY
59414: PUSH
59415: LD_VAR 0 2
59419: ARRAY
59420: PUSH
59421: LD_INT 1
59423: ARRAY
59424: PPUSH
59425: LD_EXP 59
59429: PUSH
59430: LD_VAR 0 1
59434: ARRAY
59435: PUSH
59436: LD_VAR 0 2
59440: ARRAY
59441: PUSH
59442: LD_INT 2
59444: ARRAY
59445: PPUSH
59446: CALL_OW 428
59450: ST_TO_ADDR
// if not tmp then
59451: LD_VAR 0 4
59455: NOT
59456: IFFALSE 59460
// continue ;
59458: GO 59375
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59460: LD_VAR 0 4
59464: PUSH
59465: LD_INT 81
59467: PUSH
59468: LD_VAR 0 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PPUSH
59477: CALL_OW 69
59481: IN
59482: IFFALSE 59532
59484: PUSH
59485: LD_EXP 59
59489: PUSH
59490: LD_VAR 0 1
59494: ARRAY
59495: PUSH
59496: LD_VAR 0 2
59500: ARRAY
59501: PUSH
59502: LD_INT 1
59504: ARRAY
59505: PPUSH
59506: LD_EXP 59
59510: PUSH
59511: LD_VAR 0 1
59515: ARRAY
59516: PUSH
59517: LD_VAR 0 2
59521: ARRAY
59522: PUSH
59523: LD_INT 2
59525: ARRAY
59526: PPUSH
59527: CALL_OW 458
59531: AND
59532: IFFALSE 59626
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59534: LD_EXP 59
59538: PUSH
59539: LD_VAR 0 1
59543: ARRAY
59544: PUSH
59545: LD_VAR 0 2
59549: ARRAY
59550: PUSH
59551: LD_INT 1
59553: ARRAY
59554: PPUSH
59555: LD_EXP 59
59559: PUSH
59560: LD_VAR 0 1
59564: ARRAY
59565: PUSH
59566: LD_VAR 0 2
59570: ARRAY
59571: PUSH
59572: LD_INT 2
59574: ARRAY
59575: PPUSH
59576: LD_VAR 0 3
59580: PPUSH
59581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59585: LD_ADDR_EXP 59
59589: PUSH
59590: LD_EXP 59
59594: PPUSH
59595: LD_VAR 0 1
59599: PPUSH
59600: LD_EXP 59
59604: PUSH
59605: LD_VAR 0 1
59609: ARRAY
59610: PPUSH
59611: LD_VAR 0 2
59615: PPUSH
59616: CALL_OW 3
59620: PPUSH
59621: CALL_OW 1
59625: ST_TO_ADDR
// end ; end ;
59626: GO 59375
59628: POP
59629: POP
// end ;
59630: GO 59293
59632: POP
59633: POP
// end ;
59634: PPOPN 4
59636: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59637: LD_INT 0
59639: PPUSH
59640: PPUSH
// result := false ;
59641: LD_ADDR_VAR 0 4
59645: PUSH
59646: LD_INT 0
59648: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL_OW 264
59658: PUSH
59659: LD_INT 81
59661: EQUAL
59662: NOT
59663: IFFALSE 59667
// exit ;
59665: GO 59911
// index := GetElementIndex ( minersList , unit ) ;
59667: LD_ADDR_VAR 0 5
59671: PUSH
59672: LD_EXP 58
59676: PPUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL 8129 0 2
59686: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59687: LD_EXP 59
59691: PUSH
59692: LD_VAR 0 5
59696: ARRAY
59697: PUSH
59698: LD_EXP 60
59702: GREATEREQUAL
59703: IFFALSE 59707
// exit ;
59705: GO 59911
// ComMoveXY ( unit , x , y ) ;
59707: LD_VAR 0 1
59711: PPUSH
59712: LD_VAR 0 2
59716: PPUSH
59717: LD_VAR 0 3
59721: PPUSH
59722: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59726: LD_INT 35
59728: PPUSH
59729: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59733: LD_VAR 0 1
59737: PPUSH
59738: LD_VAR 0 2
59742: PPUSH
59743: LD_VAR 0 3
59747: PPUSH
59748: CALL 40175 0 3
59752: NOT
59753: IFFALSE 59766
59755: PUSH
59756: LD_VAR 0 1
59760: PPUSH
59761: CALL_OW 314
59765: AND
59766: IFFALSE 59770
// exit ;
59768: GO 59911
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59770: LD_VAR 0 2
59774: PPUSH
59775: LD_VAR 0 3
59779: PPUSH
59780: CALL_OW 428
59784: PUSH
59785: LD_VAR 0 1
59789: EQUAL
59790: IFFALSE 59804
59792: PUSH
59793: LD_VAR 0 1
59797: PPUSH
59798: CALL_OW 314
59802: NOT
59803: AND
59804: IFFALSE 59726
// PlaySoundXY ( x , y , PlantMine ) ;
59806: LD_VAR 0 2
59810: PPUSH
59811: LD_VAR 0 3
59815: PPUSH
59816: LD_STRING PlantMine
59818: PPUSH
59819: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59823: LD_VAR 0 2
59827: PPUSH
59828: LD_VAR 0 3
59832: PPUSH
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 255
59842: PPUSH
59843: LD_INT 0
59845: PPUSH
59846: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59850: LD_ADDR_EXP 59
59854: PUSH
59855: LD_EXP 59
59859: PPUSH
59860: LD_VAR 0 5
59864: PUSH
59865: LD_EXP 59
59869: PUSH
59870: LD_VAR 0 5
59874: ARRAY
59875: PUSH
59876: LD_INT 1
59878: PLUS
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PPUSH
59884: LD_VAR 0 2
59888: PUSH
59889: LD_VAR 0 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PPUSH
59898: CALL 8346 0 3
59902: ST_TO_ADDR
// result := true ;
59903: LD_ADDR_VAR 0 4
59907: PUSH
59908: LD_INT 1
59910: ST_TO_ADDR
// end ;
59911: LD_VAR 0 4
59915: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59916: LD_INT 0
59918: PPUSH
59919: PPUSH
59920: PPUSH
// if not unit in minersList then
59921: LD_VAR 0 1
59925: PUSH
59926: LD_EXP 58
59930: IN
59931: NOT
59932: IFFALSE 59936
// exit ;
59934: GO 60330
// index := GetElementIndex ( minersList , unit ) ;
59936: LD_ADDR_VAR 0 6
59940: PUSH
59941: LD_EXP 58
59945: PPUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL 8129 0 2
59955: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59956: LD_ADDR_VAR 0 5
59960: PUSH
59961: DOUBLE
59962: LD_EXP 59
59966: PUSH
59967: LD_VAR 0 6
59971: ARRAY
59972: INC
59973: ST_TO_ADDR
59974: LD_INT 1
59976: PUSH
59977: FOR_DOWNTO
59978: IFFALSE 60141
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59980: LD_EXP 59
59984: PUSH
59985: LD_VAR 0 6
59989: ARRAY
59990: PUSH
59991: LD_VAR 0 5
59995: ARRAY
59996: PUSH
59997: LD_INT 1
59999: ARRAY
60000: PUSH
60001: LD_VAR 0 2
60005: EQUAL
60006: IFFALSE 60036
60008: PUSH
60009: LD_EXP 59
60013: PUSH
60014: LD_VAR 0 6
60018: ARRAY
60019: PUSH
60020: LD_VAR 0 5
60024: ARRAY
60025: PUSH
60026: LD_INT 2
60028: ARRAY
60029: PUSH
60030: LD_VAR 0 3
60034: EQUAL
60035: AND
60036: IFFALSE 60139
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60038: LD_EXP 59
60042: PUSH
60043: LD_VAR 0 6
60047: ARRAY
60048: PUSH
60049: LD_VAR 0 5
60053: ARRAY
60054: PUSH
60055: LD_INT 1
60057: ARRAY
60058: PPUSH
60059: LD_EXP 59
60063: PUSH
60064: LD_VAR 0 6
60068: ARRAY
60069: PUSH
60070: LD_VAR 0 5
60074: ARRAY
60075: PUSH
60076: LD_INT 2
60078: ARRAY
60079: PPUSH
60080: LD_VAR 0 1
60084: PPUSH
60085: CALL_OW 255
60089: PPUSH
60090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60094: LD_ADDR_EXP 59
60098: PUSH
60099: LD_EXP 59
60103: PPUSH
60104: LD_VAR 0 6
60108: PPUSH
60109: LD_EXP 59
60113: PUSH
60114: LD_VAR 0 6
60118: ARRAY
60119: PPUSH
60120: LD_VAR 0 5
60124: PPUSH
60125: CALL_OW 3
60129: PPUSH
60130: CALL_OW 1
60134: ST_TO_ADDR
// exit ;
60135: POP
60136: POP
60137: GO 60330
// end ; end ;
60139: GO 59977
60141: POP
60142: POP
// for i := minerMinesList [ index ] downto 1 do
60143: LD_ADDR_VAR 0 5
60147: PUSH
60148: DOUBLE
60149: LD_EXP 59
60153: PUSH
60154: LD_VAR 0 6
60158: ARRAY
60159: INC
60160: ST_TO_ADDR
60161: LD_INT 1
60163: PUSH
60164: FOR_DOWNTO
60165: IFFALSE 60328
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60167: LD_EXP 59
60171: PUSH
60172: LD_VAR 0 6
60176: ARRAY
60177: PUSH
60178: LD_VAR 0 5
60182: ARRAY
60183: PUSH
60184: LD_INT 1
60186: ARRAY
60187: PPUSH
60188: LD_EXP 59
60192: PUSH
60193: LD_VAR 0 6
60197: ARRAY
60198: PUSH
60199: LD_VAR 0 5
60203: ARRAY
60204: PUSH
60205: LD_INT 2
60207: ARRAY
60208: PPUSH
60209: LD_VAR 0 2
60213: PPUSH
60214: LD_VAR 0 3
60218: PPUSH
60219: CALL_OW 298
60223: PUSH
60224: LD_INT 6
60226: LESS
60227: IFFALSE 60326
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60229: LD_EXP 59
60233: PUSH
60234: LD_VAR 0 6
60238: ARRAY
60239: PUSH
60240: LD_VAR 0 5
60244: ARRAY
60245: PUSH
60246: LD_INT 1
60248: ARRAY
60249: PPUSH
60250: LD_EXP 59
60254: PUSH
60255: LD_VAR 0 6
60259: ARRAY
60260: PUSH
60261: LD_VAR 0 5
60265: ARRAY
60266: PUSH
60267: LD_INT 2
60269: ARRAY
60270: PPUSH
60271: LD_VAR 0 1
60275: PPUSH
60276: CALL_OW 255
60280: PPUSH
60281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60285: LD_ADDR_EXP 59
60289: PUSH
60290: LD_EXP 59
60294: PPUSH
60295: LD_VAR 0 6
60299: PPUSH
60300: LD_EXP 59
60304: PUSH
60305: LD_VAR 0 6
60309: ARRAY
60310: PPUSH
60311: LD_VAR 0 5
60315: PPUSH
60316: CALL_OW 3
60320: PPUSH
60321: CALL_OW 1
60325: ST_TO_ADDR
// end ; end ;
60326: GO 60164
60328: POP
60329: POP
// end ;
60330: LD_VAR 0 4
60334: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
60339: PPUSH
60340: PPUSH
60341: PPUSH
60342: PPUSH
60343: PPUSH
60344: PPUSH
60345: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60346: LD_VAR 0 1
60350: PPUSH
60351: CALL_OW 264
60355: PUSH
60356: LD_INT 81
60358: EQUAL
60359: NOT
60360: IFTRUE 60375
60362: PUSH
60363: LD_VAR 0 1
60367: PUSH
60368: LD_EXP 58
60372: IN
60373: NOT
60374: OR
60375: IFFALSE 60379
// exit ;
60377: GO 60705
// index := GetElementIndex ( minersList , unit ) ;
60379: LD_ADDR_VAR 0 6
60383: PUSH
60384: LD_EXP 58
60388: PPUSH
60389: LD_VAR 0 1
60393: PPUSH
60394: CALL 8129 0 2
60398: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60399: LD_ADDR_VAR 0 8
60403: PUSH
60404: LD_EXP 60
60408: PUSH
60409: LD_EXP 59
60413: PUSH
60414: LD_VAR 0 6
60418: ARRAY
60419: MINUS
60420: ST_TO_ADDR
// if not minesFreeAmount then
60421: LD_VAR 0 8
60425: NOT
60426: IFFALSE 60430
// exit ;
60428: GO 60705
// tmp := [ ] ;
60430: LD_ADDR_VAR 0 7
60434: PUSH
60435: EMPTY
60436: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60437: LD_ADDR_VAR 0 5
60441: PUSH
60442: DOUBLE
60443: LD_INT 1
60445: DEC
60446: ST_TO_ADDR
60447: LD_VAR 0 8
60451: PUSH
60452: FOR_TO
60453: IFFALSE 60652
// begin _d := rand ( 0 , 5 ) ;
60455: LD_ADDR_VAR 0 11
60459: PUSH
60460: LD_INT 0
60462: PPUSH
60463: LD_INT 5
60465: PPUSH
60466: CALL_OW 12
60470: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60471: LD_ADDR_VAR 0 12
60475: PUSH
60476: LD_INT 2
60478: PPUSH
60479: LD_INT 6
60481: PPUSH
60482: CALL_OW 12
60486: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60487: LD_ADDR_VAR 0 9
60491: PUSH
60492: LD_VAR 0 2
60496: PPUSH
60497: LD_VAR 0 11
60501: PPUSH
60502: LD_VAR 0 12
60506: PPUSH
60507: CALL_OW 272
60511: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60512: LD_ADDR_VAR 0 10
60516: PUSH
60517: LD_VAR 0 3
60521: PPUSH
60522: LD_VAR 0 11
60526: PPUSH
60527: LD_VAR 0 12
60531: PPUSH
60532: CALL_OW 273
60536: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60537: LD_VAR 0 9
60541: PPUSH
60542: LD_VAR 0 10
60546: PPUSH
60547: CALL_OW 488
60551: IFFALSE 60575
60553: PUSH
60554: LD_VAR 0 9
60558: PUSH
60559: LD_VAR 0 10
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_VAR 0 7
60572: IN
60573: NOT
60574: AND
60575: IFFALSE 60594
60577: PUSH
60578: LD_VAR 0 9
60582: PPUSH
60583: LD_VAR 0 10
60587: PPUSH
60588: CALL_OW 458
60592: NOT
60593: AND
60594: IFFALSE 60636
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60596: LD_ADDR_VAR 0 7
60600: PUSH
60601: LD_VAR 0 7
60605: PPUSH
60606: LD_VAR 0 7
60610: PUSH
60611: LD_INT 1
60613: PLUS
60614: PPUSH
60615: LD_VAR 0 9
60619: PUSH
60620: LD_VAR 0 10
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PPUSH
60629: CALL_OW 1
60633: ST_TO_ADDR
60634: GO 60650
// i := i - 1 ;
60636: LD_ADDR_VAR 0 5
60640: PUSH
60641: LD_VAR 0 5
60645: PUSH
60646: LD_INT 1
60648: MINUS
60649: ST_TO_ADDR
// end ;
60650: GO 60452
60652: POP
60653: POP
// for i in tmp do
60654: LD_ADDR_VAR 0 5
60658: PUSH
60659: LD_VAR 0 7
60663: PUSH
60664: FOR_IN
60665: IFFALSE 60703
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60667: LD_VAR 0 1
60671: PPUSH
60672: LD_VAR 0 5
60676: PUSH
60677: LD_INT 1
60679: ARRAY
60680: PPUSH
60681: LD_VAR 0 5
60685: PUSH
60686: LD_INT 2
60688: ARRAY
60689: PPUSH
60690: CALL 59637 0 3
60694: NOT
60695: IFFALSE 60701
// exit ;
60697: POP
60698: POP
60699: GO 60705
60701: GO 60664
60703: POP
60704: POP
// end ;
60705: LD_VAR 0 4
60709: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60710: LD_INT 0
60712: PPUSH
60713: PPUSH
60714: PPUSH
60715: PPUSH
60716: PPUSH
60717: PPUSH
60718: PPUSH
60719: PPUSH
60720: PPUSH
// if GetClass ( unit ) <> class_sniper then
60721: LD_VAR 0 1
60725: PPUSH
60726: CALL_OW 257
60730: PUSH
60731: LD_INT 5
60733: NONEQUAL
60734: IFFALSE 60738
// exit ;
60736: GO 61208
// dist := 8 ;
60738: LD_ADDR_VAR 0 5
60742: PUSH
60743: LD_INT 8
60745: ST_TO_ADDR
// viewRange := 12 ;
60746: LD_ADDR_VAR 0 8
60750: PUSH
60751: LD_INT 12
60753: ST_TO_ADDR
// side := GetSide ( unit ) ;
60754: LD_ADDR_VAR 0 6
60758: PUSH
60759: LD_VAR 0 1
60763: PPUSH
60764: CALL_OW 255
60768: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60769: LD_INT 61
60771: PPUSH
60772: LD_VAR 0 6
60776: PPUSH
60777: CALL_OW 321
60781: PUSH
60782: LD_INT 2
60784: EQUAL
60785: IFFALSE 60795
// viewRange := 16 ;
60787: LD_ADDR_VAR 0 8
60791: PUSH
60792: LD_INT 16
60794: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60795: LD_VAR 0 1
60799: PPUSH
60800: LD_VAR 0 2
60804: PPUSH
60805: LD_VAR 0 3
60809: PPUSH
60810: CALL_OW 297
60814: PUSH
60815: LD_VAR 0 5
60819: GREATER
60820: IFFALSE 60899
// begin ComMoveXY ( unit , x , y ) ;
60822: LD_VAR 0 1
60826: PPUSH
60827: LD_VAR 0 2
60831: PPUSH
60832: LD_VAR 0 3
60836: PPUSH
60837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60841: LD_INT 35
60843: PPUSH
60844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60848: LD_VAR 0 1
60852: PPUSH
60853: LD_VAR 0 2
60857: PPUSH
60858: LD_VAR 0 3
60862: PPUSH
60863: CALL 40175 0 3
60867: NOT
60868: IFFALSE 60872
// exit ;
60870: GO 61208
// until GetDistUnitXY ( unit , x , y ) < dist ;
60872: LD_VAR 0 1
60876: PPUSH
60877: LD_VAR 0 2
60881: PPUSH
60882: LD_VAR 0 3
60886: PPUSH
60887: CALL_OW 297
60891: PUSH
60892: LD_VAR 0 5
60896: LESS
60897: IFFALSE 60841
// end ; ComTurnXY ( unit , x , y ) ;
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_VAR 0 2
60908: PPUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 118
// repeat if Multiplayer then
60918: LD_OWVAR 4
60922: IFFALSE 60933
// wait ( 35 ) else
60924: LD_INT 35
60926: PPUSH
60927: CALL_OW 67
60931: GO 60940
// wait ( 5 ) ;
60933: LD_INT 5
60935: PPUSH
60936: CALL_OW 67
// _d := GetDir ( unit ) ;
60940: LD_ADDR_VAR 0 11
60944: PUSH
60945: LD_VAR 0 1
60949: PPUSH
60950: CALL_OW 254
60954: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60955: LD_ADDR_VAR 0 7
60959: PUSH
60960: LD_VAR 0 1
60964: PPUSH
60965: CALL_OW 250
60969: PPUSH
60970: LD_VAR 0 1
60974: PPUSH
60975: CALL_OW 251
60979: PPUSH
60980: LD_VAR 0 2
60984: PPUSH
60985: LD_VAR 0 3
60989: PPUSH
60990: CALL 42811 0 4
60994: ST_TO_ADDR
// until dir = _d ;
60995: LD_VAR 0 7
60999: PUSH
61000: LD_VAR 0 11
61004: EQUAL
61005: IFFALSE 60918
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61007: LD_ADDR_VAR 0 9
61011: PUSH
61012: LD_VAR 0 1
61016: PPUSH
61017: CALL_OW 250
61021: PPUSH
61022: LD_VAR 0 7
61026: PPUSH
61027: LD_VAR 0 5
61031: PPUSH
61032: CALL_OW 272
61036: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61037: LD_ADDR_VAR 0 10
61041: PUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL_OW 251
61051: PPUSH
61052: LD_VAR 0 7
61056: PPUSH
61057: LD_VAR 0 5
61061: PPUSH
61062: CALL_OW 273
61066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61067: LD_VAR 0 9
61071: PPUSH
61072: LD_VAR 0 10
61076: PPUSH
61077: CALL_OW 488
61081: NOT
61082: IFFALSE 61086
// exit ;
61084: GO 61208
// ComAnimCustom ( unit , 1 ) ;
61086: LD_VAR 0 1
61090: PPUSH
61091: LD_INT 1
61093: PPUSH
61094: CALL_OW 592
// p := 0 ;
61098: LD_ADDR_VAR 0 12
61102: PUSH
61103: LD_INT 0
61105: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61106: LD_VAR 0 9
61110: PPUSH
61111: LD_VAR 0 10
61115: PPUSH
61116: LD_VAR 0 6
61120: PPUSH
61121: LD_VAR 0 8
61125: PPUSH
61126: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61130: LD_INT 35
61132: PPUSH
61133: CALL_OW 67
// p := Inc ( p ) ;
61137: LD_ADDR_VAR 0 12
61141: PUSH
61142: LD_VAR 0 12
61146: PPUSH
61147: CALL 42767 0 1
61151: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61152: LD_VAR 0 12
61156: PUSH
61157: LD_INT 3
61159: EQUAL
61160: IFTRUE 61174
61162: PUSH
61163: LD_VAR 0 1
61167: PPUSH
61168: CALL_OW 302
61172: NOT
61173: OR
61174: IFTRUE 61187
61176: PUSH
61177: LD_VAR 0 1
61181: PPUSH
61182: CALL_OW 301
61186: OR
61187: IFFALSE 61130
// RemoveSeeing ( _x , _y , side ) ;
61189: LD_VAR 0 9
61193: PPUSH
61194: LD_VAR 0 10
61198: PPUSH
61199: LD_VAR 0 6
61203: PPUSH
61204: CALL_OW 331
// end ; end_of_file
61208: LD_VAR 0 4
61212: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61213: PPOPN 6
61215: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61216: LD_EXP 5
61220: PUSH
61221: LD_INT 4
61223: EQUAL
61224: IFFALSE 61260
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61226: LD_STRING setGameDifficulty(
61228: PUSH
61229: LD_OWVAR 67
61233: STR
61234: PUSH
61235: LD_STRING )
61237: STR
61238: PPUSH
61239: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61243: LD_STRING displayDifficulty(
61245: PUSH
61246: LD_OWVAR 67
61250: STR
61251: PUSH
61252: LD_STRING )
61254: STR
61255: PPUSH
61256: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61260: CALL 61289 0 0
// end ; end_of_file
61264: PPOPN 1
61266: END
// every 0 0$1 do
61267: GO 61269
61269: DISABLE
// begin enable ;
61270: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61271: LD_STRING updateTimer(
61273: PUSH
61274: LD_OWVAR 1
61278: STR
61279: PUSH
61280: LD_STRING );
61282: STR
61283: PPUSH
61284: CALL_OW 559
// end ;
61288: END
// export function SOS_MapStart ( ) ; begin
61289: LD_INT 0
61291: PPUSH
// UpdateFactoryWaypoints ( ) ;
61292: CALL 62223 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61296: CALL 62475 0 0
// ParseMultiDataToLua ( ) ;
61300: CALL 62622 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61304: LD_STRING setSpecLogoNumber(
61306: PUSH
61307: LD_INT 2
61309: STR
61310: PUSH
61311: LD_STRING ,
61313: STR
61314: PUSH
61315: LD_INT 1
61317: STR
61318: PUSH
61319: LD_STRING )
61321: STR
61322: PPUSH
61323: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61327: LD_STRING setSpecLogoNumber(
61329: PUSH
61330: LD_INT 3
61332: STR
61333: PUSH
61334: LD_STRING ,
61336: STR
61337: PUSH
61338: LD_INT 2
61340: STR
61341: PUSH
61342: LD_STRING )
61344: STR
61345: PPUSH
61346: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61350: LD_STRING setSpecLogoNumber(
61352: PUSH
61353: LD_INT 4
61355: STR
61356: PUSH
61357: LD_STRING ,
61359: STR
61360: PUSH
61361: LD_INT 3
61363: STR
61364: PUSH
61365: LD_STRING )
61367: STR
61368: PPUSH
61369: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61373: LD_STRING setSpecLogoNumber(
61375: PUSH
61376: LD_INT 5
61378: STR
61379: PUSH
61380: LD_STRING ,
61382: STR
61383: PUSH
61384: LD_INT 4
61386: STR
61387: PUSH
61388: LD_STRING )
61390: STR
61391: PPUSH
61392: CALL_OW 559
// end ;
61396: LD_VAR 0 1
61400: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61401: LD_INT 0
61403: PPUSH
61404: PPUSH
61405: PPUSH
61406: PPUSH
61407: PPUSH
61408: PPUSH
61409: PPUSH
61410: PPUSH
61411: PPUSH
// for i := 1 to 8 do
61412: LD_ADDR_VAR 0 2
61416: PUSH
61417: DOUBLE
61418: LD_INT 1
61420: DEC
61421: ST_TO_ADDR
61422: LD_INT 8
61424: PUSH
61425: FOR_TO
61426: IFFALSE 61811
// begin if mpSidePositions [ i ] then
61428: LD_EXP 9
61432: PUSH
61433: LD_VAR 0 2
61437: ARRAY
61438: IFFALSE 61809
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61440: LD_ADDR_VAR 0 7
61444: PUSH
61445: LD_INT 22
61447: PUSH
61448: LD_VAR 0 2
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 21
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PPUSH
61471: CALL_OW 69
61475: PPUSH
61476: CALL 5462 0 1
61480: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61481: LD_ADDR_VAR 0 9
61485: PUSH
61486: LD_INT 22
61488: PUSH
61489: LD_VAR 0 2
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 30
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 30
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PPUSH
61530: CALL_OW 69
61534: ST_TO_ADDR
// crates := 0 ;
61535: LD_ADDR_VAR 0 4
61539: PUSH
61540: LD_INT 0
61542: ST_TO_ADDR
// oil := 0 ;
61543: LD_ADDR_VAR 0 5
61547: PUSH
61548: LD_INT 0
61550: ST_TO_ADDR
// sib := 0 ;
61551: LD_ADDR_VAR 0 6
61555: PUSH
61556: LD_INT 0
61558: ST_TO_ADDR
// if bases then
61559: LD_VAR 0 9
61563: IFFALSE 61669
// begin for j in bases do
61565: LD_ADDR_VAR 0 3
61569: PUSH
61570: LD_VAR 0 9
61574: PUSH
61575: FOR_IN
61576: IFFALSE 61667
// begin base := GetBase ( j ) ;
61578: LD_ADDR_VAR 0 8
61582: PUSH
61583: LD_VAR 0 3
61587: PPUSH
61588: CALL_OW 274
61592: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61593: LD_ADDR_VAR 0 4
61597: PUSH
61598: LD_VAR 0 4
61602: PUSH
61603: LD_VAR 0 8
61607: PPUSH
61608: LD_INT 1
61610: PPUSH
61611: CALL_OW 275
61615: PLUS
61616: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61617: LD_ADDR_VAR 0 5
61621: PUSH
61622: LD_VAR 0 5
61626: PUSH
61627: LD_VAR 0 8
61631: PPUSH
61632: LD_INT 2
61634: PPUSH
61635: CALL_OW 275
61639: PLUS
61640: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61641: LD_ADDR_VAR 0 6
61645: PUSH
61646: LD_VAR 0 6
61650: PUSH
61651: LD_VAR 0 8
61655: PPUSH
61656: LD_INT 3
61658: PPUSH
61659: CALL_OW 275
61663: PLUS
61664: ST_TO_ADDR
// end ;
61665: GO 61575
61667: POP
61668: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61669: LD_STRING setSpecText(
61671: PUSH
61672: LD_VAR 0 2
61676: STR
61677: PUSH
61678: LD_STRING ,
61680: STR
61681: PUSH
61682: LD_INT 2
61684: STR
61685: PUSH
61686: LD_STRING ,
61688: STR
61689: PUSH
61690: LD_VAR 0 4
61694: STR
61695: PUSH
61696: LD_STRING )
61698: STR
61699: PPUSH
61700: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61704: LD_STRING setSpecText(
61706: PUSH
61707: LD_VAR 0 2
61711: STR
61712: PUSH
61713: LD_STRING ,
61715: STR
61716: PUSH
61717: LD_INT 3
61719: STR
61720: PUSH
61721: LD_STRING ,
61723: STR
61724: PUSH
61725: LD_VAR 0 5
61729: STR
61730: PUSH
61731: LD_STRING )
61733: STR
61734: PPUSH
61735: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61739: LD_STRING setSpecText(
61741: PUSH
61742: LD_VAR 0 2
61746: STR
61747: PUSH
61748: LD_STRING ,
61750: STR
61751: PUSH
61752: LD_INT 4
61754: STR
61755: PUSH
61756: LD_STRING ,
61758: STR
61759: PUSH
61760: LD_VAR 0 6
61764: STR
61765: PUSH
61766: LD_STRING )
61768: STR
61769: PPUSH
61770: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61774: LD_STRING setSpecText(
61776: PUSH
61777: LD_VAR 0 2
61781: STR
61782: PUSH
61783: LD_STRING ,
61785: STR
61786: PUSH
61787: LD_INT 5
61789: STR
61790: PUSH
61791: LD_STRING ,
61793: STR
61794: PUSH
61795: LD_VAR 0 7
61799: STR
61800: PUSH
61801: LD_STRING )
61803: STR
61804: PPUSH
61805: CALL_OW 559
// end ; end ;
61809: GO 61425
61811: POP
61812: POP
// end ;
61813: LD_VAR 0 1
61817: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61818: LD_INT 2
61820: PUSH
61821: LD_INT 30
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 30
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PPUSH
61846: CALL_OW 69
61850: IFFALSE 61860
61852: GO 61854
61854: DISABLE
// begin enable ;
61855: ENABLE
// UpdateSpectatorBar ;
61856: CALL 61401 0 0
// end ;
61860: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61861: LD_INT 0
61863: PPUSH
// end ;
61864: LD_VAR 0 12
61868: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61869: LD_INT 0
61871: PPUSH
61872: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61873: LD_VAR 0 1
61877: NOT
61878: IFTRUE 61897
61880: PUSH
61881: LD_VAR 0 2
61885: PPUSH
61886: LD_VAR 0 3
61890: PPUSH
61891: CALL_OW 488
61895: NOT
61896: OR
61897: IFTRUE 61932
61899: PUSH
61900: LD_VAR 0 1
61904: PPUSH
61905: CALL_OW 266
61909: PUSH
61910: LD_INT 3
61912: NONEQUAL
61913: IFFALSE 61931
61915: PUSH
61916: LD_VAR 0 1
61920: PPUSH
61921: CALL_OW 247
61925: PUSH
61926: LD_INT 1
61928: EQUAL
61929: NOT
61930: AND
61931: OR
61932: IFFALSE 61936
// exit ;
61934: GO 62218
// if GetType ( factory ) = unit_human then
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 247
61945: PUSH
61946: LD_INT 1
61948: EQUAL
61949: IFFALSE 61966
// factory := IsInUnit ( factory ) ;
61951: LD_ADDR_VAR 0 1
61955: PUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: CALL_OW 310
61965: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61966: LD_VAR 0 1
61970: PPUSH
61971: CALL_OW 266
61975: PUSH
61976: LD_INT 3
61978: NONEQUAL
61979: IFFALSE 61983
// exit ;
61981: GO 62218
// for i := 1 to Count ( factoryWaypoints ) do
61983: LD_ADDR_VAR 0 5
61987: PUSH
61988: DOUBLE
61989: LD_INT 1
61991: DEC
61992: ST_TO_ADDR
61993: LD_EXP 61
61997: PPUSH
61998: CALL 5462 0 1
62002: PUSH
62003: FOR_TO
62004: IFFALSE 62166
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62006: LD_VAR 0 2
62010: PPUSH
62011: LD_VAR 0 3
62015: PPUSH
62016: CALL_OW 428
62020: PUSH
62021: LD_EXP 61
62025: PUSH
62026: LD_VAR 0 5
62030: ARRAY
62031: PUSH
62032: LD_INT 2
62034: ARRAY
62035: EQUAL
62036: IFFALSE 62068
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62038: LD_ADDR_EXP 61
62042: PUSH
62043: LD_EXP 61
62047: PPUSH
62048: LD_VAR 0 5
62052: PPUSH
62053: CALL_OW 3
62057: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62058: CALL 62223 0 0
// exit ;
62062: POP
62063: POP
62064: GO 62218
// end else
62066: GO 62164
// if factory = factoryWaypoints [ i ] [ 2 ] then
62068: LD_VAR 0 1
62072: PUSH
62073: LD_EXP 61
62077: PUSH
62078: LD_VAR 0 5
62082: ARRAY
62083: PUSH
62084: LD_INT 2
62086: ARRAY
62087: EQUAL
62088: IFFALSE 62164
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62090: LD_ADDR_EXP 61
62094: PUSH
62095: LD_EXP 61
62099: PPUSH
62100: LD_VAR 0 5
62104: PPUSH
62105: CALL_OW 3
62109: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62110: LD_ADDR_EXP 61
62114: PUSH
62115: LD_EXP 61
62119: PPUSH
62120: LD_VAR 0 1
62124: PPUSH
62125: CALL_OW 255
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: LD_VAR 0 2
62139: PUSH
62140: LD_VAR 0 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: PPUSH
62151: CALL 41394 0 2
62155: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62156: CALL 62223 0 0
// exit ;
62160: POP
62161: POP
62162: GO 62218
// end ; end ;
62164: GO 62003
62166: POP
62167: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62168: LD_ADDR_EXP 61
62172: PUSH
62173: LD_EXP 61
62177: PPUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: CALL_OW 255
62187: PUSH
62188: LD_VAR 0 1
62192: PUSH
62193: LD_VAR 0 2
62197: PUSH
62198: LD_VAR 0 3
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: PPUSH
62209: CALL 41394 0 2
62213: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62214: CALL 62223 0 0
// end ;
62218: LD_VAR 0 4
62222: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
62227: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62228: LD_STRING resetFactoryWaypoint();
62230: PPUSH
62231: CALL_OW 559
// if factoryWaypoints then
62235: LD_EXP 61
62239: IFFALSE 62360
// begin list := factoryWaypoints ;
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: LD_EXP 61
62250: ST_TO_ADDR
// for i := 1 to list do
62251: LD_ADDR_VAR 0 2
62255: PUSH
62256: DOUBLE
62257: LD_INT 1
62259: DEC
62260: ST_TO_ADDR
62261: LD_VAR 0 3
62265: PUSH
62266: FOR_TO
62267: IFFALSE 62358
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62269: LD_STRING setFactoryWaypointXY(
62271: PUSH
62272: LD_VAR 0 3
62276: PUSH
62277: LD_VAR 0 2
62281: ARRAY
62282: PUSH
62283: LD_INT 1
62285: ARRAY
62286: STR
62287: PUSH
62288: LD_STRING ,
62290: STR
62291: PUSH
62292: LD_VAR 0 3
62296: PUSH
62297: LD_VAR 0 2
62301: ARRAY
62302: PUSH
62303: LD_INT 2
62305: ARRAY
62306: STR
62307: PUSH
62308: LD_STRING ,
62310: STR
62311: PUSH
62312: LD_VAR 0 3
62316: PUSH
62317: LD_VAR 0 2
62321: ARRAY
62322: PUSH
62323: LD_INT 3
62325: ARRAY
62326: STR
62327: PUSH
62328: LD_STRING ,
62330: STR
62331: PUSH
62332: LD_VAR 0 3
62336: PUSH
62337: LD_VAR 0 2
62341: ARRAY
62342: PUSH
62343: LD_INT 4
62345: ARRAY
62346: STR
62347: PUSH
62348: LD_STRING )
62350: STR
62351: PPUSH
62352: CALL_OW 559
62356: GO 62266
62358: POP
62359: POP
// end ; end ;
62360: LD_VAR 0 1
62364: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62365: LD_INT 0
62367: PPUSH
// if HexInfo ( x , y ) = warehouse then
62368: LD_VAR 0 2
62372: PPUSH
62373: LD_VAR 0 3
62377: PPUSH
62378: CALL_OW 428
62382: PUSH
62383: LD_VAR 0 1
62387: EQUAL
62388: IFFALSE 62415
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62390: LD_ADDR_EXP 63
62394: PUSH
62395: LD_EXP 63
62399: PPUSH
62400: LD_VAR 0 1
62404: PPUSH
62405: LD_INT 0
62407: PPUSH
62408: CALL_OW 1
62412: ST_TO_ADDR
62413: GO 62466
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62415: LD_ADDR_EXP 63
62419: PUSH
62420: LD_EXP 63
62424: PPUSH
62425: LD_VAR 0 1
62429: PPUSH
62430: LD_VAR 0 1
62434: PPUSH
62435: CALL_OW 255
62439: PUSH
62440: LD_VAR 0 1
62444: PUSH
62445: LD_VAR 0 2
62449: PUSH
62450: LD_VAR 0 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: PPUSH
62461: CALL_OW 1
62465: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62466: CALL 62475 0 0
// end ;
62470: LD_VAR 0 4
62474: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62475: LD_INT 0
62477: PPUSH
62478: PPUSH
62479: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62480: LD_STRING resetWarehouseGatheringPoints();
62482: PPUSH
62483: CALL_OW 559
// if warehouseGatheringPoints then
62487: LD_EXP 63
62491: IFFALSE 62617
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62493: LD_ADDR_VAR 0 3
62497: PUSH
62498: LD_EXP 63
62502: PPUSH
62503: CALL 45328 0 1
62507: ST_TO_ADDR
// for i := 1 to list do
62508: LD_ADDR_VAR 0 2
62512: PUSH
62513: DOUBLE
62514: LD_INT 1
62516: DEC
62517: ST_TO_ADDR
62518: LD_VAR 0 3
62522: PUSH
62523: FOR_TO
62524: IFFALSE 62615
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62526: LD_STRING setWarehouseGatheringPointXY(
62528: PUSH
62529: LD_VAR 0 3
62533: PUSH
62534: LD_VAR 0 2
62538: ARRAY
62539: PUSH
62540: LD_INT 1
62542: ARRAY
62543: STR
62544: PUSH
62545: LD_STRING ,
62547: STR
62548: PUSH
62549: LD_VAR 0 3
62553: PUSH
62554: LD_VAR 0 2
62558: ARRAY
62559: PUSH
62560: LD_INT 2
62562: ARRAY
62563: STR
62564: PUSH
62565: LD_STRING ,
62567: STR
62568: PUSH
62569: LD_VAR 0 3
62573: PUSH
62574: LD_VAR 0 2
62578: ARRAY
62579: PUSH
62580: LD_INT 3
62582: ARRAY
62583: STR
62584: PUSH
62585: LD_STRING ,
62587: STR
62588: PUSH
62589: LD_VAR 0 3
62593: PUSH
62594: LD_VAR 0 2
62598: ARRAY
62599: PUSH
62600: LD_INT 4
62602: ARRAY
62603: STR
62604: PUSH
62605: LD_STRING )
62607: STR
62608: PPUSH
62609: CALL_OW 559
62613: GO 62523
62615: POP
62616: POP
// end ; end ;
62617: LD_VAR 0 1
62621: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62622: LD_INT 0
62624: PPUSH
62625: PPUSH
// if not mpSidePositions then
62626: LD_EXP 9
62630: NOT
62631: IFFALSE 62635
// exit ;
62633: GO 62706
// result :=  ;
62635: LD_ADDR_VAR 0 1
62639: PUSH
62640: LD_STRING 
62642: ST_TO_ADDR
// for i := 1 to 8 do
62643: LD_ADDR_VAR 0 2
62647: PUSH
62648: DOUBLE
62649: LD_INT 1
62651: DEC
62652: ST_TO_ADDR
62653: LD_INT 8
62655: PUSH
62656: FOR_TO
62657: IFFALSE 62687
// begin result := result & mpSidePositions [ i ] & ; ;
62659: LD_ADDR_VAR 0 1
62663: PUSH
62664: LD_VAR 0 1
62668: PUSH
62669: LD_EXP 9
62673: PUSH
62674: LD_VAR 0 2
62678: ARRAY
62679: STR
62680: PUSH
62681: LD_STRING ;
62683: STR
62684: ST_TO_ADDR
// end ;
62685: GO 62656
62687: POP
62688: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62689: LD_STRING setMultiplayerRealPosition("
62691: PUSH
62692: LD_VAR 0 1
62696: STR
62697: PUSH
62698: LD_STRING ");
62700: STR
62701: PPUSH
62702: CALL_OW 559
// end ;
62706: LD_VAR 0 1
62710: RET
