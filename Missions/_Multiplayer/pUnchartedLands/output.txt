// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 47170 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 47593 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 8
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 3
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 4
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 2
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 7
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mpTeamGame := true ;
 824: LD_ADDR_EXP 13
 828: PUSH
 829: LD_INT 1
 831: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 832: LD_ADDR_EXP 31
 836: PUSH
 837: LD_INT 200
 839: PUSH
 840: LD_INT 230
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// end ;
 847: LD_VAR 0 1
 851: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 852: LD_INT 0
 854: PPUSH
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
 860: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 861: LD_ADDR_EXP 21
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: LD_INT 5
 880: PUSH
 881: LD_INT 6
 883: PUSH
 884: LD_INT 7
 886: PUSH
 887: LD_INT 8
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 900: LD_ADDR_EXP 20
 904: PUSH
 905: LD_INT 10
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: LD_INT 12
 913: PUSH
 914: LD_INT 13
 916: PUSH
 917: LD_INT 14
 919: PUSH
 920: LD_INT 88
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_EXP 21
 935: UNION
 936: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 937: LD_VAR 0 1
 941: PUSH
 942: LD_INT 2
 944: EQUAL
 945: IFFALSE 957
// baseLevel := 1 else
 947: LD_ADDR_VAR 0 7
 951: PUSH
 952: LD_INT 1
 954: ST_TO_ADDR
 955: GO 971
// baseLevel := mpGameSettings [ 1 ] ;
 957: LD_ADDR_VAR 0 7
 961: PUSH
 962: LD_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ARRAY
 970: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 971: LD_ADDR_EXP 26
 975: PUSH
 976: LD_EXP 8
 980: PUSH
 981: LD_INT 2
 983: ARRAY
 984: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 985: LD_ADDR_EXP 27
 989: PUSH
 990: LD_EXP 8
 994: PUSH
 995: LD_INT 3
 997: ARRAY
 998: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 999: LD_ADDR_EXP 17
1003: PUSH
1004: LD_EXP 8
1008: PUSH
1009: LD_INT 4
1011: ARRAY
1012: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1013: LD_ADDR_EXP 29
1017: PUSH
1018: LD_EXP 8
1022: PUSH
1023: LD_INT 5
1025: ARRAY
1026: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1027: LD_ADDR_VAR 0 5
1031: PUSH
1032: LD_EXP 8
1036: PUSH
1037: LD_INT 6
1039: ARRAY
1040: PUSH
1041: LD_INT 0
1043: GREATER
1044: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1045: LD_ADDR_VAR 0 6
1049: PUSH
1050: LD_EXP 8
1054: PUSH
1055: LD_INT 7
1057: ARRAY
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: ST_TO_ADDR
// kingCamArea := 0 ;
1063: LD_ADDR_EXP 2
1067: PUSH
1068: LD_INT 0
1070: ST_TO_ADDR
// kingArea := 0 ;
1071: LD_ADDR_EXP 1
1075: PUSH
1076: LD_INT 0
1078: ST_TO_ADDR
// if gameType = GameTypeKing then
1079: LD_VAR 0 1
1083: PUSH
1084: LD_INT 3
1086: EQUAL
1087: IFFALSE 1127
// begin mpKingArea := 0 ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_INT 0
1096: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1097: LD_ADDR_EXP 37
1101: PUSH
1102: LD_EXP 8
1106: PUSH
1107: LD_INT 8
1109: ARRAY
1110: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1111: LD_ADDR_EXP 39
1115: PUSH
1116: LD_EXP 8
1120: PUSH
1121: LD_INT 10
1123: ARRAY
1124: ST_TO_ADDR
// end else
1125: GO 1151
// begin mpKingArea := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// mpPoints := 0 ;
1135: LD_ADDR_EXP 37
1139: PUSH
1140: LD_INT 0
1142: ST_TO_ADDR
// mpEmissions := 0 ;
1143: LD_ADDR_EXP 39
1147: PUSH
1148: LD_INT 0
1150: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1151: LD_EXP 8
1155: PUSH
1156: LD_INT 9
1158: ARRAY
1159: IFFALSE 1291
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1161: LD_ADDR_EXP 38
1165: PUSH
1166: LD_INT 1
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 2
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 3
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 12
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: LD_INT 24
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_INT 12
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: LD_INT 23
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 21
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: LD_INT 1
1254: PUSH
1255: LD_INT 42
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 21
1266: PUSH
1267: LD_INT 1
1269: PUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 42
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1291: LD_ADDR_EXP 18
1295: PUSH
1296: LD_EXP 8
1300: PUSH
1301: LD_INT 11
1303: ARRAY
1304: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1305: LD_ADDR_EXP 24
1309: PUSH
1310: LD_EXP 8
1314: PUSH
1315: LD_INT 12
1317: ARRAY
1318: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_EXP 8
1328: PUSH
1329: LD_INT 13
1331: ARRAY
1332: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1333: LD_ADDR_EXP 35
1337: PUSH
1338: LD_EXP 8
1342: PUSH
1343: LD_INT 14
1345: ARRAY
1346: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_EXP 8
1356: PUSH
1357: LD_INT 15
1359: ARRAY
1360: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1361: LD_ADDR_EXP 30
1365: PUSH
1366: LD_EXP 8
1370: PUSH
1371: LD_INT 18
1373: ARRAY
1374: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1375: LD_ADDR_EXP 3
1379: PUSH
1380: LD_EXP 8
1384: PUSH
1385: LD_INT 20
1387: ARRAY
1388: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1389: LD_ADDR_EXP 22
1393: PUSH
1394: LD_EXP 8
1398: PUSH
1399: LD_INT 21
1401: ARRAY
1402: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1403: LD_ADDR_EXP 33
1407: PUSH
1408: LD_INT 15
1410: PUSH
1411: LD_INT 16
1413: PUSH
1414: LD_INT 17
1416: PUSH
1417: LD_INT 18
1419: PUSH
1420: LD_INT 19
1422: PUSH
1423: LD_INT 20
1425: PUSH
1426: LD_INT 21
1428: PUSH
1429: LD_INT 22
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1442: LD_ADDR_VAR 0 8
1446: PUSH
1447: LD_INT 23
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 46535 0 2
1457: PUSH
1458: LD_INT 24
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL 46535 0 2
1468: PUSH
1469: LD_INT 25
1471: PPUSH
1472: LD_INT 3
1474: PPUSH
1475: CALL 46535 0 2
1479: PUSH
1480: LD_INT 26
1482: PPUSH
1483: LD_INT 4
1485: PPUSH
1486: CALL 46535 0 2
1490: PUSH
1491: LD_INT 27
1493: PPUSH
1494: LD_INT 5
1496: PPUSH
1497: CALL 46535 0 2
1501: PUSH
1502: LD_INT 28
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL 46535 0 2
1512: PUSH
1513: LD_INT 29
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL 46535 0 2
1523: PUSH
1524: LD_INT 30
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: CALL 46535 0 2
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1545: LD_ADDR_VAR 0 3
1549: PUSH
1550: DOUBLE
1551: LD_INT 1
1553: DEC
1554: ST_TO_ADDR
1555: LD_VAR 0 8
1559: PPUSH
1560: CALL 5840 0 1
1564: PUSH
1565: FOR_TO
1566: IFFALSE 1670
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1568: LD_ADDR_EXP 23
1572: PUSH
1573: LD_EXP 23
1577: PPUSH
1578: LD_VAR 0 3
1582: PPUSH
1583: LD_VAR 0 8
1587: PUSH
1588: LD_VAR 0 3
1592: ARRAY
1593: PUSH
1594: LD_INT 1
1596: ARRAY
1597: PPUSH
1598: LD_VAR 0 8
1602: PUSH
1603: LD_VAR 0 3
1607: ARRAY
1608: PUSH
1609: LD_INT 3
1611: ARRAY
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: CALL_OW 272
1620: PUSH
1621: LD_VAR 0 8
1625: PUSH
1626: LD_VAR 0 3
1630: ARRAY
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: PPUSH
1636: LD_VAR 0 8
1640: PUSH
1641: LD_VAR 0 3
1645: ARRAY
1646: PUSH
1647: LD_INT 3
1649: ARRAY
1650: PPUSH
1651: LD_INT 10
1653: PPUSH
1654: CALL_OW 273
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 1
1667: ST_TO_ADDR
1668: GO 1565
1670: POP
1671: POP
// if hasOil then
1672: LD_VAR 0 5
1676: IFFALSE 1926
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1678: LD_ADDR_VAR 0 4
1682: PUSH
1683: LD_EXP 8
1687: PUSH
1688: LD_INT 6
1690: ARRAY
1691: PUSH
1692: LD_INT 2
1694: EQUAL
1695: ST_TO_ADDR
// if all then
1696: LD_VAR 0 4
1700: IFFALSE 1823
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_INT 31
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 46368 0 2
1719: PUSH
1720: LD_INT 33
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 46368 0 2
1732: PUSH
1733: LD_INT 35
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 46368 0 2
1745: PUSH
1746: LD_INT 37
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 46368 0 2
1758: PUSH
1759: LD_INT 39
1761: PPUSH
1762: LD_VAR 0 4
1766: PPUSH
1767: CALL 46368 0 2
1771: PUSH
1772: LD_INT 41
1774: PPUSH
1775: LD_VAR 0 4
1779: PPUSH
1780: CALL 46368 0 2
1784: PUSH
1785: LD_INT 43
1787: PPUSH
1788: LD_VAR 0 4
1792: PPUSH
1793: CALL 46368 0 2
1797: PUSH
1798: LD_INT 45
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 46368 0 2
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: ST_TO_ADDR
// end else
1821: GO 1926
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1823: LD_ADDR_EXP 14
1827: PUSH
1828: LD_INT 72
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL 46368 0 2
1838: PUSH
1839: LD_INT 74
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: CALL 46368 0 2
1849: PUSH
1850: LD_INT 76
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL 46368 0 2
1860: PUSH
1861: LD_INT 78
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL 46368 0 2
1871: PUSH
1872: LD_INT 80
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: CALL 46368 0 2
1882: PUSH
1883: LD_INT 82
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: CALL 46368 0 2
1893: PUSH
1894: LD_INT 84
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: CALL 46368 0 2
1904: PUSH
1905: LD_INT 86
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 46368 0 2
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// end ; end ; if hasSib then
1926: LD_VAR 0 6
1930: IFFALSE 2180
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_EXP 8
1941: PUSH
1942: LD_INT 7
1944: ARRAY
1945: PUSH
1946: LD_INT 2
1948: EQUAL
1949: ST_TO_ADDR
// if all then
1950: LD_VAR 0 4
1954: IFFALSE 2077
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1956: LD_ADDR_EXP 15
1960: PUSH
1961: LD_INT 32
1963: PPUSH
1964: LD_VAR 0 4
1968: PPUSH
1969: CALL 46368 0 2
1973: PUSH
1974: LD_INT 34
1976: PPUSH
1977: LD_VAR 0 4
1981: PPUSH
1982: CALL 46368 0 2
1986: PUSH
1987: LD_INT 36
1989: PPUSH
1990: LD_VAR 0 4
1994: PPUSH
1995: CALL 46368 0 2
1999: PUSH
2000: LD_INT 38
2002: PPUSH
2003: LD_VAR 0 4
2007: PPUSH
2008: CALL 46368 0 2
2012: PUSH
2013: LD_INT 40
2015: PPUSH
2016: LD_VAR 0 4
2020: PPUSH
2021: CALL 46368 0 2
2025: PUSH
2026: LD_INT 42
2028: PPUSH
2029: LD_VAR 0 4
2033: PPUSH
2034: CALL 46368 0 2
2038: PUSH
2039: LD_INT 44
2041: PPUSH
2042: LD_VAR 0 4
2046: PPUSH
2047: CALL 46368 0 2
2051: PUSH
2052: LD_INT 46
2054: PPUSH
2055: LD_VAR 0 4
2059: PPUSH
2060: CALL 46368 0 2
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: ST_TO_ADDR
// end else
2075: GO 2180
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2077: LD_ADDR_EXP 15
2081: PUSH
2082: LD_INT 73
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL 46368 0 2
2092: PUSH
2093: LD_INT 75
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL 46368 0 2
2103: PUSH
2104: LD_INT 77
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL 46368 0 2
2114: PUSH
2115: LD_INT 79
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 46368 0 2
2125: PUSH
2126: LD_INT 81
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL 46368 0 2
2136: PUSH
2137: LD_INT 83
2139: PPUSH
2140: LD_INT 1
2142: PPUSH
2143: CALL 46368 0 2
2147: PUSH
2148: LD_INT 85
2150: PPUSH
2151: LD_INT 1
2153: PPUSH
2154: CALL 46368 0 2
2158: PUSH
2159: LD_INT 87
2161: PPUSH
2162: LD_INT 1
2164: PPUSH
2165: CALL 46368 0 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2180: LD_VAR 0 7
2184: PUSH
2185: LD_INT 1
2187: GREATEREQUAL
2188: IFFALSE 2200
// mpDepots := startPos ;
2190: LD_ADDR_EXP 16
2194: PUSH
2195: LD_VAR 0 8
2199: ST_TO_ADDR
// if baseLevel >= 2 then
2200: LD_VAR 0 7
2204: PUSH
2205: LD_INT 2
2207: GREATEREQUAL
2208: IFFALSE 2625
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 5 ) ] ] ;
2210: LD_ADDR_EXP 19
2214: PUSH
2215: LD_INT 31
2217: PUSH
2218: LD_INT 47
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL 46535 0 2
2228: ADD
2229: PUSH
2230: LD_INT 31
2232: PUSH
2233: LD_INT 48
2235: PPUSH
2236: LD_INT 5
2238: PPUSH
2239: CALL 46535 0 2
2243: ADD
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: LD_INT 49
2250: PPUSH
2251: LD_INT 5
2253: PPUSH
2254: CALL 46535 0 2
2258: ADD
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 31
2267: PUSH
2268: LD_INT 50
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL 46535 0 2
2278: ADD
2279: PUSH
2280: LD_INT 31
2282: PUSH
2283: LD_INT 51
2285: PPUSH
2286: LD_INT 2
2288: PPUSH
2289: CALL 46535 0 2
2293: ADD
2294: PUSH
2295: LD_INT 4
2297: PUSH
2298: LD_INT 52
2300: PPUSH
2301: LD_INT 5
2303: PPUSH
2304: CALL 46535 0 2
2308: ADD
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 31
2317: PUSH
2318: LD_INT 53
2320: PPUSH
2321: LD_INT 1
2323: PPUSH
2324: CALL 46535 0 2
2328: ADD
2329: PUSH
2330: LD_INT 31
2332: PUSH
2333: LD_INT 54
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL 46535 0 2
2343: ADD
2344: PUSH
2345: LD_INT 4
2347: PUSH
2348: LD_INT 55
2350: PPUSH
2351: LD_INT 5
2353: PPUSH
2354: CALL 46535 0 2
2358: ADD
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 31
2367: PUSH
2368: LD_INT 56
2370: PPUSH
2371: LD_INT 2
2373: PPUSH
2374: CALL 46535 0 2
2378: ADD
2379: PUSH
2380: LD_INT 31
2382: PUSH
2383: LD_INT 57
2385: PPUSH
2386: LD_INT 0
2388: PPUSH
2389: CALL 46535 0 2
2393: ADD
2394: PUSH
2395: LD_INT 4
2397: PUSH
2398: LD_INT 58
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL 46535 0 2
2408: ADD
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 31
2417: PUSH
2418: LD_INT 59
2420: PPUSH
2421: LD_INT 1
2423: PPUSH
2424: CALL 46535 0 2
2428: ADD
2429: PUSH
2430: LD_INT 31
2432: PUSH
2433: LD_INT 60
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: CALL 46535 0 2
2443: ADD
2444: PUSH
2445: LD_INT 4
2447: PUSH
2448: LD_INT 61
2450: PPUSH
2451: LD_INT 2
2453: PPUSH
2454: CALL 46535 0 2
2458: ADD
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 31
2467: PUSH
2468: LD_INT 62
2470: PPUSH
2471: LD_INT 5
2473: PPUSH
2474: CALL 46535 0 2
2478: ADD
2479: PUSH
2480: LD_INT 31
2482: PUSH
2483: LD_INT 63
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL 46535 0 2
2493: ADD
2494: PUSH
2495: LD_INT 4
2497: PUSH
2498: LD_INT 64
2500: PPUSH
2501: LD_INT 3
2503: PPUSH
2504: CALL 46535 0 2
2508: ADD
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 31
2517: PUSH
2518: LD_INT 65
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL 46535 0 2
2528: ADD
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: LD_INT 66
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL 46535 0 2
2543: ADD
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 2
2553: PPUSH
2554: CALL 46535 0 2
2558: ADD
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 31
2567: PUSH
2568: LD_INT 68
2570: PPUSH
2571: LD_INT 4
2573: PPUSH
2574: CALL 46535 0 2
2578: ADD
2579: PUSH
2580: LD_INT 31
2582: PUSH
2583: LD_INT 69
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: CALL 46535 0 2
2593: ADD
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL 46535 0 2
2608: ADD
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: ST_TO_ADDR
// end ; if mpTree then
2625: LD_EXP 3
2629: IFFALSE 2641
// SetAreaMapShow ( TreeArea , 1 ) ;
2631: LD_INT 71
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: CALL_OW 424
// end ;
2641: LD_VAR 0 2
2645: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2646: GO 2648
2648: DISABLE
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
2655: PPUSH
2656: PPUSH
2657: PPUSH
2658: PPUSH
// begin if not mpShipments then
2659: LD_EXP 29
2663: NOT
2664: IFFALSE 2668
// exit ;
2666: GO 3123
// case mpShipments of 1 :
2668: LD_EXP 29
2672: PUSH
2673: LD_INT 1
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2716
2681: POP
// begin time := 0 0$30 ;
2682: LD_ADDR_VAR 0 5
2686: PUSH
2687: LD_INT 1050
2689: ST_TO_ADDR
// normalTime := 0 0$30 ;
2690: LD_ADDR_VAR 0 6
2694: PUSH
2695: LD_INT 1050
2697: ST_TO_ADDR
// maxTime := 1 1$20 ;
2698: LD_ADDR_VAR 0 8
2702: PUSH
2703: LD_INT 2800
2705: ST_TO_ADDR
// delayTime := 0 0$5 ;
2706: LD_ADDR_VAR 0 7
2710: PUSH
2711: LD_INT 175
2713: ST_TO_ADDR
// end ; 2 :
2714: GO 2846
2716: LD_INT 2
2718: DOUBLE
2719: EQUAL
2720: IFTRUE 2724
2722: GO 2759
2724: POP
// begin time := 0 0$25 ;
2725: LD_ADDR_VAR 0 5
2729: PUSH
2730: LD_INT 875
2732: ST_TO_ADDR
// normalTime := 0 0$25 ;
2733: LD_ADDR_VAR 0 6
2737: PUSH
2738: LD_INT 875
2740: ST_TO_ADDR
// maxTime := 1 1$10 ;
2741: LD_ADDR_VAR 0 8
2745: PUSH
2746: LD_INT 2450
2748: ST_TO_ADDR
// delayTime := 0 0$4 ;
2749: LD_ADDR_VAR 0 7
2753: PUSH
2754: LD_INT 140
2756: ST_TO_ADDR
// end ; 3 :
2757: GO 2846
2759: LD_INT 3
2761: DOUBLE
2762: EQUAL
2763: IFTRUE 2767
2765: GO 2802
2767: POP
// begin time := 0 0$20 ;
2768: LD_ADDR_VAR 0 5
2772: PUSH
2773: LD_INT 700
2775: ST_TO_ADDR
// normalTime := 0 0$20 ;
2776: LD_ADDR_VAR 0 6
2780: PUSH
2781: LD_INT 700
2783: ST_TO_ADDR
// maxTime := 1 1$00 ;
2784: LD_ADDR_VAR 0 8
2788: PUSH
2789: LD_INT 2100
2791: ST_TO_ADDR
// delayTime := 0 0$3 ;
2792: LD_ADDR_VAR 0 7
2796: PUSH
2797: LD_INT 105
2799: ST_TO_ADDR
// end ; 4 :
2800: GO 2846
2802: LD_INT 4
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2845
2810: POP
// begin time := 0 0$15 ;
2811: LD_ADDR_VAR 0 5
2815: PUSH
2816: LD_INT 525
2818: ST_TO_ADDR
// normalTime := 0 0$15 ;
2819: LD_ADDR_VAR 0 6
2823: PUSH
2824: LD_INT 525
2826: ST_TO_ADDR
// maxTime := 0 0$55 ;
2827: LD_ADDR_VAR 0 8
2831: PUSH
2832: LD_INT 1925
2834: ST_TO_ADDR
// delayTime := 0 0$2 ;
2835: LD_ADDR_VAR 0 7
2839: PUSH
2840: LD_INT 70
2842: ST_TO_ADDR
// end ; end ;
2843: GO 2846
2845: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2846: LD_ADDR_VAR 0 4
2850: PUSH
2851: LD_INT 10
2853: PUSH
2854: LD_INT 11
2856: PUSH
2857: LD_INT 12
2859: PUSH
2860: LD_INT 13
2862: PUSH
2863: LD_INT 14
2865: PUSH
2866: LD_INT 88
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2877: LD_ADDR_VAR 0 3
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 4
2893: PUSH
2894: LD_INT 5
2896: PUSH
2897: LD_INT 6
2899: PUSH
2900: LD_INT 7
2902: PUSH
2903: LD_INT 8
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: ST_TO_ADDR
// for i := 1 to 8 do
2916: LD_ADDR_VAR 0 1
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 8
2928: PUSH
2929: FOR_TO
2930: IFFALSE 2977
// begin if not mpSidePositions [ i ] then
2932: LD_EXP 9
2936: PUSH
2937: LD_VAR 0 1
2941: ARRAY
2942: NOT
2943: IFFALSE 2947
// continue ;
2945: GO 2929
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: LD_VAR 0 4
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_EXP 9
2966: PUSH
2967: LD_VAR 0 1
2971: ARRAY
2972: ARRAY
2973: ADD
2974: ST_TO_ADDR
// end ;
2975: GO 2929
2977: POP
2978: POP
// x := 1 ;
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: LD_INT 1
2986: ST_TO_ADDR
// repeat wait ( time ) ;
2987: LD_VAR 0 5
2991: PPUSH
2992: CALL_OW 67
// x := Inc ( x ) ;
2996: LD_ADDR_VAR 0 2
3000: PUSH
3001: LD_VAR 0 2
3005: PPUSH
3006: CALL 43189 0 1
3010: ST_TO_ADDR
// if x > 5 then
3011: LD_VAR 0 2
3015: PUSH
3016: LD_INT 5
3018: GREATER
3019: IFFALSE 3029
// x := 1 ;
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: LD_INT 1
3028: ST_TO_ADDR
// for i in areas do
3029: LD_ADDR_VAR 0 1
3033: PUSH
3034: LD_VAR 0 4
3038: PUSH
3039: FOR_IN
3040: IFFALSE 3079
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 1
3049: PPUSH
3050: CALL_OW 287
3054: PUSH
3055: LD_INT 30
3057: LESS
3058: IFFALSE 3077
// begin CreateCratesArea ( x , i , true ) ;
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_VAR 0 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 55
// end ; end ;
3077: GO 3039
3079: POP
3080: POP
// time := time + delayTime ;
3081: LD_ADDR_VAR 0 5
3085: PUSH
3086: LD_VAR 0 5
3090: PUSH
3091: LD_VAR 0 7
3095: PLUS
3096: ST_TO_ADDR
// if time > maxTime then
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 8
3106: GREATER
3107: IFFALSE 3119
// time := normalTime ;
3109: LD_ADDR_VAR 0 5
3113: PUSH
3114: LD_VAR 0 6
3118: ST_TO_ADDR
// until false ;
3119: LD_INT 0
3121: IFFALSE 2987
// end ;
3123: PPOPN 8
3125: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus ;
3126: LD_EXP 3
3130: IFFALSE 3453
3132: GO 3134
3134: DISABLE
3135: LD_INT 0
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
// begin treeVisited := [ ] ;
3142: LD_ADDR_EXP 4
3146: PUSH
3147: EMPTY
3148: ST_TO_ADDR
// power := 1 ;
3149: LD_ADDR_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3157: LD_INT 35
3159: PPUSH
3160: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
3164: LD_OWVAR 1
3168: PUSH
3169: LD_INT 42000
3171: PUSH
3172: LD_EXP 3
3176: DIV
3177: PPUSH
3178: CALL_OW 574
3182: MOD
3183: PUSH
3184: LD_INT 0
3186: EQUAL
3187: IFFALSE 3204
// power := Inc ( power ) ;
3189: LD_ADDR_VAR 0 4
3193: PUSH
3194: LD_VAR 0 4
3198: PPUSH
3199: CALL 43189 0 1
3203: ST_TO_ADDR
// if power > 10 then
3204: LD_VAR 0 4
3208: PUSH
3209: LD_INT 10
3211: GREATER
3212: IFFALSE 3222
// power := 10 ;
3214: LD_ADDR_VAR 0 4
3218: PUSH
3219: LD_INT 10
3221: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: LD_INT 95
3229: PUSH
3230: LD_INT 71
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 21
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 3
3249: PUSH
3250: LD_INT 23
3252: PUSH
3253: LD_INT 0
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: PUSH
3274: LD_EXP 4
3278: DIFF
3279: ST_TO_ADDR
// if tmp then
3280: LD_VAR 0 2
3284: IFFALSE 3449
// begin for i in tmp do
3286: LD_ADDR_VAR 0 1
3290: PUSH
3291: LD_VAR 0 2
3295: PUSH
3296: FOR_IN
3297: IFFALSE 3447
// begin treeVisited := Join ( treeVisited , i ) ;
3299: LD_ADDR_EXP 4
3303: PUSH
3304: LD_EXP 4
3308: PPUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL 41816 0 2
3318: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
3319: LD_ADDR_VAR 0 5
3323: PUSH
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_VAR 0 1
3333: PUSH
3334: LD_INT 4
3336: MOD
3337: PUSH
3338: LD_INT 1
3340: PLUS
3341: PPUSH
3342: CALL_OW 259
3346: PUSH
3347: LD_VAR 0 4
3351: PLUS
3352: ST_TO_ADDR
// if bonus > 10 then
3353: LD_VAR 0 5
3357: PUSH
3358: LD_INT 10
3360: GREATER
3361: IFFALSE 3371
// bonus := 10 ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_INT 10
3370: ST_TO_ADDR
// skill := i mod 4 + 1 ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_VAR 0 1
3380: PUSH
3381: LD_INT 4
3383: MOD
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
3389: LD_VAR 0 1
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: LD_VAR 0 5
3403: PPUSH
3404: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
3408: LD_STRING displayTreeBonusDetails(
3410: PUSH
3411: LD_VAR 0 1
3415: STR
3416: PUSH
3417: LD_STRING ,
3419: STR
3420: PUSH
3421: LD_VAR 0 3
3425: STR
3426: PUSH
3427: LD_STRING ,
3429: STR
3430: PUSH
3431: LD_VAR 0 4
3435: STR
3436: PUSH
3437: LD_STRING )
3439: STR
3440: PPUSH
3441: CALL_OW 559
// end ;
3445: GO 3296
3447: POP
3448: POP
// end ; until false ;
3449: LD_INT 0
3451: IFFALSE 3157
// end ; end_of_file
3453: PPOPN 5
3455: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: CALL 57550 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3465: LD_VAR 0 1
3469: PPUSH
3470: CALL 52716 0 1
// end ;
3474: PPOPN 1
3476: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3477: LD_VAR 0 1
3481: PPUSH
3482: CALL 57567 0 1
// end ;
3486: PPOPN 1
3488: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3489: LD_VAR 0 1
3493: PPUSH
3494: CALL 53769 0 1
3498: PPOPN 1
3500: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_VAR 0 2
3510: PPUSH
3511: CALL 57608 0 2
3515: PPOPN 2
3517: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_VAR 0 2
3527: PPUSH
3528: CALL 53522 0 2
3532: PPOPN 2
3534: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3535: LD_VAR 0 1
3539: PPUSH
3540: LD_VAR 0 2
3544: PPUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: CALL 53822 0 3
3554: PPOPN 3
3556: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3557: LD_VAR 0 1
3561: PPUSH
3562: LD_VAR 0 2
3566: PPUSH
3567: LD_VAR 0 3
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: CALL 54506 0 5
3586: PPOPN 5
3588: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3589: LD_VAR 0 1
3593: PPUSH
3594: LD_VAR 0 2
3598: PPUSH
3599: LD_VAR 0 3
3603: PPUSH
3604: LD_VAR 0 4
3608: PPUSH
3609: CALL 54609 0 4
3613: PPOPN 4
3615: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3616: LD_INT 0
3618: PPUSH
3619: PPUSH
// if exist_mode then
3620: LD_VAR 0 2
3624: IFFALSE 3670
// begin unit := CreateCharacter ( prefix & ident ) ;
3626: LD_ADDR_VAR 0 5
3630: PUSH
3631: LD_VAR 0 3
3635: PUSH
3636: LD_VAR 0 1
3640: STR
3641: PPUSH
3642: CALL_OW 34
3646: ST_TO_ADDR
// if unit then
3647: LD_VAR 0 5
3651: IFFALSE 3668
// DeleteCharacters ( prefix & ident ) ;
3653: LD_VAR 0 3
3657: PUSH
3658: LD_VAR 0 1
3662: STR
3663: PPUSH
3664: CALL_OW 40
// end else
3668: GO 3685
// unit := NewCharacter ( ident ) ;
3670: LD_ADDR_VAR 0 5
3674: PUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: CALL_OW 25
3684: ST_TO_ADDR
// result := unit ;
3685: LD_ADDR_VAR 0 4
3689: PUSH
3690: LD_VAR 0 5
3694: ST_TO_ADDR
// end ;
3695: LD_VAR 0 4
3699: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
// if exist_mode then
3704: LD_VAR 0 2
3708: IFFALSE 3733
// unit := CreateCharacter ( prefix & ident ) else
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 3
3719: PUSH
3720: LD_VAR 0 1
3724: STR
3725: PPUSH
3726: CALL_OW 34
3730: ST_TO_ADDR
3731: GO 3748
// unit := NewCharacter ( ident ) ;
3733: LD_ADDR_VAR 0 5
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 25
3747: ST_TO_ADDR
// result := unit ;
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_VAR 0 5
3757: ST_TO_ADDR
// end ;
3758: LD_VAR 0 4
3762: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3763: LD_INT 0
3765: PPUSH
3766: PPUSH
// if not side or not nation then
3767: LD_VAR 0 1
3771: NOT
3772: IFTRUE 3781
3774: PUSH
3775: LD_VAR 0 2
3779: NOT
3780: OR
3781: IFFALSE 3785
// exit ;
3783: GO 4579
// case nation of nation_american :
3785: LD_VAR 0 2
3789: PUSH
3790: LD_INT 1
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 4020
3798: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3799: LD_ADDR_VAR 0 4
3803: PUSH
3804: LD_INT 35
3806: PUSH
3807: LD_INT 45
3809: PUSH
3810: LD_INT 46
3812: PUSH
3813: LD_INT 47
3815: PUSH
3816: LD_INT 82
3818: PUSH
3819: LD_INT 83
3821: PUSH
3822: LD_INT 84
3824: PUSH
3825: LD_INT 85
3827: PUSH
3828: LD_INT 86
3830: PUSH
3831: LD_INT 1
3833: PUSH
3834: LD_INT 2
3836: PUSH
3837: LD_INT 6
3839: PUSH
3840: LD_INT 15
3842: PUSH
3843: LD_INT 16
3845: PUSH
3846: LD_INT 7
3848: PUSH
3849: LD_INT 12
3851: PUSH
3852: LD_INT 13
3854: PUSH
3855: LD_INT 10
3857: PUSH
3858: LD_INT 14
3860: PUSH
3861: LD_INT 20
3863: PUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 25
3872: PUSH
3873: LD_INT 32
3875: PUSH
3876: LD_INT 27
3878: PUSH
3879: LD_INT 36
3881: PUSH
3882: LD_INT 69
3884: PUSH
3885: LD_INT 39
3887: PUSH
3888: LD_INT 34
3890: PUSH
3891: LD_INT 40
3893: PUSH
3894: LD_INT 48
3896: PUSH
3897: LD_INT 49
3899: PUSH
3900: LD_INT 50
3902: PUSH
3903: LD_INT 51
3905: PUSH
3906: LD_INT 52
3908: PUSH
3909: LD_INT 53
3911: PUSH
3912: LD_INT 54
3914: PUSH
3915: LD_INT 55
3917: PUSH
3918: LD_INT 56
3920: PUSH
3921: LD_INT 57
3923: PUSH
3924: LD_INT 58
3926: PUSH
3927: LD_INT 59
3929: PUSH
3930: LD_INT 60
3932: PUSH
3933: LD_INT 61
3935: PUSH
3936: LD_INT 62
3938: PUSH
3939: LD_INT 80
3941: PUSH
3942: LD_INT 82
3944: PUSH
3945: LD_INT 83
3947: PUSH
3948: LD_INT 84
3950: PUSH
3951: LD_INT 85
3953: PUSH
3954: LD_INT 86
3956: PUSH
3957: LD_INT 90
3959: PUSH
3960: LD_INT 93
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: ST_TO_ADDR
4018: GO 4501
4020: LD_INT 2
4022: DOUBLE
4023: EQUAL
4024: IFTRUE 4028
4026: GO 4262
4028: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
4029: LD_ADDR_VAR 0 4
4033: PUSH
4034: LD_INT 35
4036: PUSH
4037: LD_INT 45
4039: PUSH
4040: LD_INT 46
4042: PUSH
4043: LD_INT 47
4045: PUSH
4046: LD_INT 82
4048: PUSH
4049: LD_INT 83
4051: PUSH
4052: LD_INT 84
4054: PUSH
4055: LD_INT 85
4057: PUSH
4058: LD_INT 87
4060: PUSH
4061: LD_INT 70
4063: PUSH
4064: LD_INT 1
4066: PUSH
4067: LD_INT 11
4069: PUSH
4070: LD_INT 3
4072: PUSH
4073: LD_INT 4
4075: PUSH
4076: LD_INT 5
4078: PUSH
4079: LD_INT 6
4081: PUSH
4082: LD_INT 15
4084: PUSH
4085: LD_INT 18
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: LD_INT 17
4093: PUSH
4094: LD_INT 8
4096: PUSH
4097: LD_INT 20
4099: PUSH
4100: LD_INT 21
4102: PUSH
4103: LD_INT 22
4105: PUSH
4106: LD_INT 72
4108: PUSH
4109: LD_INT 26
4111: PUSH
4112: LD_INT 69
4114: PUSH
4115: LD_INT 39
4117: PUSH
4118: LD_INT 40
4120: PUSH
4121: LD_INT 41
4123: PUSH
4124: LD_INT 42
4126: PUSH
4127: LD_INT 43
4129: PUSH
4130: LD_INT 48
4132: PUSH
4133: LD_INT 49
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: LD_INT 51
4141: PUSH
4142: LD_INT 52
4144: PUSH
4145: LD_INT 53
4147: PUSH
4148: LD_INT 54
4150: PUSH
4151: LD_INT 55
4153: PUSH
4154: LD_INT 56
4156: PUSH
4157: LD_INT 60
4159: PUSH
4160: LD_INT 61
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 66
4168: PUSH
4169: LD_INT 67
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 81
4177: PUSH
4178: LD_INT 82
4180: PUSH
4181: LD_INT 83
4183: PUSH
4184: LD_INT 84
4186: PUSH
4187: LD_INT 85
4189: PUSH
4190: LD_INT 87
4192: PUSH
4193: LD_INT 88
4195: PUSH
4196: LD_INT 92
4198: PUSH
4199: LD_INT 94
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: ST_TO_ADDR
4260: GO 4501
4262: LD_INT 3
4264: DOUBLE
4265: EQUAL
4266: IFTRUE 4270
4268: GO 4500
4270: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
4271: LD_ADDR_VAR 0 4
4275: PUSH
4276: LD_INT 46
4278: PUSH
4279: LD_INT 47
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 82
4290: PUSH
4291: LD_INT 83
4293: PUSH
4294: LD_INT 84
4296: PUSH
4297: LD_INT 85
4299: PUSH
4300: LD_INT 86
4302: PUSH
4303: LD_INT 11
4305: PUSH
4306: LD_INT 9
4308: PUSH
4309: LD_INT 20
4311: PUSH
4312: LD_INT 19
4314: PUSH
4315: LD_INT 21
4317: PUSH
4318: LD_INT 24
4320: PUSH
4321: LD_INT 22
4323: PUSH
4324: LD_INT 25
4326: PUSH
4327: LD_INT 28
4329: PUSH
4330: LD_INT 29
4332: PUSH
4333: LD_INT 30
4335: PUSH
4336: LD_INT 31
4338: PUSH
4339: LD_INT 37
4341: PUSH
4342: LD_INT 38
4344: PUSH
4345: LD_INT 32
4347: PUSH
4348: LD_INT 27
4350: PUSH
4351: LD_INT 33
4353: PUSH
4354: LD_INT 69
4356: PUSH
4357: LD_INT 39
4359: PUSH
4360: LD_INT 34
4362: PUSH
4363: LD_INT 40
4365: PUSH
4366: LD_INT 71
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 44
4374: PUSH
4375: LD_INT 48
4377: PUSH
4378: LD_INT 49
4380: PUSH
4381: LD_INT 50
4383: PUSH
4384: LD_INT 51
4386: PUSH
4387: LD_INT 52
4389: PUSH
4390: LD_INT 53
4392: PUSH
4393: LD_INT 54
4395: PUSH
4396: LD_INT 55
4398: PUSH
4399: LD_INT 56
4401: PUSH
4402: LD_INT 57
4404: PUSH
4405: LD_INT 58
4407: PUSH
4408: LD_INT 59
4410: PUSH
4411: LD_INT 63
4413: PUSH
4414: LD_INT 64
4416: PUSH
4417: LD_INT 65
4419: PUSH
4420: LD_INT 82
4422: PUSH
4423: LD_INT 83
4425: PUSH
4426: LD_INT 84
4428: PUSH
4429: LD_INT 85
4431: PUSH
4432: LD_INT 86
4434: PUSH
4435: LD_INT 89
4437: PUSH
4438: LD_INT 91
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: ST_TO_ADDR
4498: GO 4501
4500: POP
// if state > - 1 and state < 3 then
4501: LD_VAR 0 3
4505: PUSH
4506: LD_INT 1
4508: NEG
4509: GREATER
4510: IFFALSE 4522
4512: PUSH
4513: LD_VAR 0 3
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: AND
4522: IFFALSE 4579
// for i in result do
4524: LD_ADDR_VAR 0 5
4528: PUSH
4529: LD_VAR 0 4
4533: PUSH
4534: FOR_IN
4535: IFFALSE 4577
// if GetTech ( i , side ) <> state then
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_VAR 0 1
4546: PPUSH
4547: CALL_OW 321
4551: PUSH
4552: LD_VAR 0 3
4556: NONEQUAL
4557: IFFALSE 4575
// result := result diff i ;
4559: LD_ADDR_VAR 0 4
4563: PUSH
4564: LD_VAR 0 4
4568: PUSH
4569: LD_VAR 0 5
4573: DIFF
4574: ST_TO_ADDR
4575: GO 4534
4577: POP
4578: POP
// end ;
4579: LD_VAR 0 4
4583: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4584: LD_INT 0
4586: PPUSH
4587: PPUSH
4588: PPUSH
// result := true ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_INT 1
4596: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4597: LD_ADDR_VAR 0 5
4601: PUSH
4602: LD_VAR 0 2
4606: PPUSH
4607: CALL_OW 480
4611: ST_TO_ADDR
// if not tmp then
4612: LD_VAR 0 5
4616: NOT
4617: IFFALSE 4621
// exit ;
4619: GO 4670
// for i in tmp do
4621: LD_ADDR_VAR 0 4
4625: PUSH
4626: LD_VAR 0 5
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4668
// if GetTech ( i , side ) <> state_researched then
4634: LD_VAR 0 4
4638: PPUSH
4639: LD_VAR 0 1
4643: PPUSH
4644: CALL_OW 321
4648: PUSH
4649: LD_INT 2
4651: NONEQUAL
4652: IFFALSE 4666
// begin result := false ;
4654: LD_ADDR_VAR 0 3
4658: PUSH
4659: LD_INT 0
4661: ST_TO_ADDR
// exit ;
4662: POP
4663: POP
4664: GO 4670
// end ;
4666: GO 4631
4668: POP
4669: POP
// end ;
4670: LD_VAR 0 3
4674: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4675: LD_INT 0
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4690: LD_VAR 0 1
4694: NOT
4695: IFTRUE 4712
4697: PUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: CALL_OW 257
4707: PUSH
4708: LD_INT 9
4710: NONEQUAL
4711: OR
4712: IFFALSE 4716
// exit ;
4714: GO 5295
// side := GetSide ( unit ) ;
4716: LD_ADDR_VAR 0 9
4720: PUSH
4721: LD_VAR 0 1
4725: PPUSH
4726: CALL_OW 255
4730: ST_TO_ADDR
// tech_space := tech_spacanom ;
4731: LD_ADDR_VAR 0 12
4735: PUSH
4736: LD_INT 29
4738: ST_TO_ADDR
// tech_time := tech_taurad ;
4739: LD_ADDR_VAR 0 13
4743: PUSH
4744: LD_INT 28
4746: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4747: LD_ADDR_VAR 0 11
4751: PUSH
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL_OW 310
4761: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4762: LD_VAR 0 11
4766: PPUSH
4767: CALL_OW 247
4771: PUSH
4772: LD_INT 2
4774: EQUAL
4775: IFFALSE 4779
// exit ;
4777: GO 5295
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4779: LD_ADDR_VAR 0 8
4783: PUSH
4784: LD_INT 81
4786: PUSH
4787: LD_VAR 0 9
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 21
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PPUSH
4817: CALL_OW 69
4821: ST_TO_ADDR
// if not tmp then
4822: LD_VAR 0 8
4826: NOT
4827: IFFALSE 4831
// exit ;
4829: GO 5295
// if in_unit then
4831: LD_VAR 0 11
4835: IFFALSE 4859
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4837: LD_ADDR_VAR 0 10
4841: PUSH
4842: LD_VAR 0 8
4846: PPUSH
4847: LD_VAR 0 11
4851: PPUSH
4852: CALL_OW 74
4856: ST_TO_ADDR
4857: GO 4879
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4859: LD_ADDR_VAR 0 10
4863: PUSH
4864: LD_VAR 0 8
4868: PPUSH
4869: LD_VAR 0 1
4873: PPUSH
4874: CALL_OW 74
4878: ST_TO_ADDR
// if not enemy then
4879: LD_VAR 0 10
4883: NOT
4884: IFFALSE 4888
// exit ;
4886: GO 5295
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4888: LD_VAR 0 11
4892: IFFALSE 4914
4894: PUSH
4895: LD_VAR 0 11
4899: PPUSH
4900: LD_VAR 0 10
4904: PPUSH
4905: CALL_OW 296
4909: PUSH
4910: LD_INT 13
4912: GREATER
4913: AND
4914: IFTRUE 4936
4916: PUSH
4917: LD_VAR 0 1
4921: PPUSH
4922: LD_VAR 0 10
4926: PPUSH
4927: CALL_OW 296
4931: PUSH
4932: LD_INT 12
4934: GREATER
4935: OR
4936: IFFALSE 4940
// exit ;
4938: GO 5295
// missile := [ 1 ] ;
4940: LD_ADDR_VAR 0 14
4944: PUSH
4945: LD_INT 1
4947: PUSH
4948: EMPTY
4949: LIST
4950: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4951: LD_VAR 0 9
4955: PPUSH
4956: LD_VAR 0 12
4960: PPUSH
4961: CALL_OW 325
4965: IFFALSE 4994
// missile := Replace ( missile , missile + 1 , 2 ) ;
4967: LD_ADDR_VAR 0 14
4971: PUSH
4972: LD_VAR 0 14
4976: PPUSH
4977: LD_VAR 0 14
4981: PUSH
4982: LD_INT 1
4984: PLUS
4985: PPUSH
4986: LD_INT 2
4988: PPUSH
4989: CALL_OW 1
4993: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4994: LD_VAR 0 9
4998: PPUSH
4999: LD_VAR 0 13
5003: PPUSH
5004: CALL_OW 325
5008: IFFALSE 5032
5010: PUSH
5011: LD_VAR 0 10
5015: PPUSH
5016: CALL_OW 255
5020: PPUSH
5021: LD_VAR 0 13
5025: PPUSH
5026: CALL_OW 325
5030: NOT
5031: AND
5032: IFFALSE 5061
// missile := Replace ( missile , missile + 1 , 3 ) ;
5034: LD_ADDR_VAR 0 14
5038: PUSH
5039: LD_VAR 0 14
5043: PPUSH
5044: LD_VAR 0 14
5048: PUSH
5049: LD_INT 1
5051: PLUS
5052: PPUSH
5053: LD_INT 3
5055: PPUSH
5056: CALL_OW 1
5060: ST_TO_ADDR
// if missile < 2 then
5061: LD_VAR 0 14
5065: PUSH
5066: LD_INT 2
5068: LESS
5069: IFFALSE 5073
// exit ;
5071: GO 5295
// x := GetX ( enemy ) ;
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: LD_VAR 0 10
5082: PPUSH
5083: CALL_OW 250
5087: ST_TO_ADDR
// y := GetY ( enemy ) ;
5088: LD_ADDR_VAR 0 5
5092: PUSH
5093: LD_VAR 0 10
5097: PPUSH
5098: CALL_OW 251
5102: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5103: LD_ADDR_VAR 0 6
5107: PUSH
5108: LD_VAR 0 4
5112: PUSH
5113: LD_INT 1
5115: NEG
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 12
5124: PLUS
5125: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5126: LD_ADDR_VAR 0 7
5130: PUSH
5131: LD_VAR 0 5
5135: PUSH
5136: LD_INT 1
5138: NEG
5139: PPUSH
5140: LD_INT 1
5142: PPUSH
5143: CALL_OW 12
5147: PLUS
5148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5149: LD_VAR 0 6
5153: PPUSH
5154: LD_VAR 0 7
5158: PPUSH
5159: CALL_OW 488
5163: NOT
5164: IFFALSE 5186
// begin _x := x ;
5166: LD_ADDR_VAR 0 6
5170: PUSH
5171: LD_VAR 0 4
5175: ST_TO_ADDR
// _y := y ;
5176: LD_ADDR_VAR 0 7
5180: PUSH
5181: LD_VAR 0 5
5185: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_VAR 0 14
5198: PPUSH
5199: CALL_OW 12
5203: ST_TO_ADDR
// case i of 1 :
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 1
5211: DOUBLE
5212: EQUAL
5213: IFTRUE 5217
5215: GO 5234
5217: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 10
5227: PPUSH
5228: CALL_OW 115
5232: GO 5295
5234: LD_INT 2
5236: DOUBLE
5237: EQUAL
5238: IFTRUE 5242
5240: GO 5264
5242: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5243: LD_VAR 0 1
5247: PPUSH
5248: LD_VAR 0 6
5252: PPUSH
5253: LD_VAR 0 7
5257: PPUSH
5258: CALL_OW 153
5262: GO 5295
5264: LD_INT 3
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5294
5272: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5273: LD_VAR 0 1
5277: PPUSH
5278: LD_VAR 0 6
5282: PPUSH
5283: LD_VAR 0 7
5287: PPUSH
5288: CALL_OW 154
5292: GO 5295
5294: POP
// end ;
5295: LD_VAR 0 2
5299: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5300: LD_INT 0
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
5306: PPUSH
5307: PPUSH
// if not unit or not building then
5308: LD_VAR 0 1
5312: NOT
5313: IFTRUE 5322
5315: PUSH
5316: LD_VAR 0 2
5320: NOT
5321: OR
5322: IFFALSE 5326
// exit ;
5324: GO 5484
// x := GetX ( building ) ;
5326: LD_ADDR_VAR 0 5
5330: PUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 250
5340: ST_TO_ADDR
// y := GetY ( building ) ;
5341: LD_ADDR_VAR 0 6
5345: PUSH
5346: LD_VAR 0 2
5350: PPUSH
5351: CALL_OW 251
5355: ST_TO_ADDR
// for i := 0 to 5 do
5356: LD_ADDR_VAR 0 4
5360: PUSH
5361: DOUBLE
5362: LD_INT 0
5364: DEC
5365: ST_TO_ADDR
5366: LD_INT 5
5368: PUSH
5369: FOR_TO
5370: IFFALSE 5482
// begin _x := ShiftX ( x , i , 3 ) ;
5372: LD_ADDR_VAR 0 7
5376: PUSH
5377: LD_VAR 0 5
5381: PPUSH
5382: LD_VAR 0 4
5386: PPUSH
5387: LD_INT 3
5389: PPUSH
5390: CALL_OW 272
5394: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5395: LD_ADDR_VAR 0 8
5399: PUSH
5400: LD_VAR 0 6
5404: PPUSH
5405: LD_VAR 0 4
5409: PPUSH
5410: LD_INT 3
5412: PPUSH
5413: CALL_OW 273
5417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5418: LD_VAR 0 7
5422: PPUSH
5423: LD_VAR 0 8
5427: PPUSH
5428: CALL_OW 488
5432: NOT
5433: IFFALSE 5437
// continue ;
5435: GO 5369
// if HexInfo ( _x , _y ) = 0 then
5437: LD_VAR 0 7
5441: PPUSH
5442: LD_VAR 0 8
5446: PPUSH
5447: CALL_OW 428
5451: PUSH
5452: LD_INT 0
5454: EQUAL
5455: IFFALSE 5480
// begin ComMoveXY ( unit , _x , _y ) ;
5457: LD_VAR 0 1
5461: PPUSH
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_VAR 0 8
5471: PPUSH
5472: CALL_OW 111
// exit ;
5476: POP
5477: POP
5478: GO 5484
// end ; end ;
5480: GO 5369
5482: POP
5483: POP
// end ;
5484: LD_VAR 0 3
5488: RET
// export function ScanBase ( side , base_area ) ; begin
5489: LD_INT 0
5491: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5492: LD_ADDR_VAR 0 3
5496: PUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 81
5504: PUSH
5505: LD_VAR 0 1
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL_OW 70
5518: ST_TO_ADDR
// end ;
5519: LD_VAR 0 3
5523: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
// result := false ;
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: LD_INT 0
5537: ST_TO_ADDR
// side := GetSide ( unit ) ;
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: LD_VAR 0 1
5547: PPUSH
5548: CALL_OW 255
5552: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 248
5567: ST_TO_ADDR
// case nat of 1 :
5568: LD_VAR 0 4
5572: PUSH
5573: LD_INT 1
5575: DOUBLE
5576: EQUAL
5577: IFTRUE 5581
5579: GO 5592
5581: POP
// tech := tech_lassight ; 2 :
5582: LD_ADDR_VAR 0 5
5586: PUSH
5587: LD_INT 12
5589: ST_TO_ADDR
5590: GO 5631
5592: LD_INT 2
5594: DOUBLE
5595: EQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// tech := tech_mortar ; 3 :
5601: LD_ADDR_VAR 0 5
5605: PUSH
5606: LD_INT 41
5608: ST_TO_ADDR
5609: GO 5631
5611: LD_INT 3
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5619
5617: GO 5630
5619: POP
// tech := tech_bazooka ; end ;
5620: LD_ADDR_VAR 0 5
5624: PUSH
5625: LD_INT 44
5627: ST_TO_ADDR
5628: GO 5631
5630: POP
// if Researched ( side , tech ) then
5631: LD_VAR 0 3
5635: PPUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: CALL_OW 325
5645: IFFALSE 5672
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: LD_INT 5
5654: PUSH
5655: LD_INT 8
5657: PUSH
5658: LD_INT 9
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: PUSH
5666: LD_VAR 0 4
5670: ARRAY
5671: ST_TO_ADDR
// end ;
5672: LD_VAR 0 2
5676: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5677: LD_INT 0
5679: PPUSH
5680: PPUSH
5681: PPUSH
// if not mines then
5682: LD_VAR 0 2
5686: NOT
5687: IFFALSE 5691
// exit ;
5689: GO 5835
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5691: LD_ADDR_VAR 0 5
5695: PUSH
5696: LD_INT 81
5698: PUSH
5699: LD_VAR 0 1
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PUSH
5708: LD_INT 3
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 3
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 69
5733: ST_TO_ADDR
// for i in mines do
5734: LD_ADDR_VAR 0 4
5738: PUSH
5739: LD_VAR 0 2
5743: PUSH
5744: FOR_IN
5745: IFFALSE 5833
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5747: LD_VAR 0 4
5751: PUSH
5752: LD_INT 1
5754: ARRAY
5755: PPUSH
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 2
5763: ARRAY
5764: PPUSH
5765: CALL_OW 458
5769: NOT
5770: IFFALSE 5774
// continue ;
5772: GO 5744
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5774: LD_VAR 0 4
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: LD_VAR 0 4
5787: PUSH
5788: LD_INT 2
5790: ARRAY
5791: PPUSH
5792: CALL_OW 428
5796: PUSH
5797: LD_VAR 0 5
5801: IN
5802: IFFALSE 5831
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5804: LD_VAR 0 4
5808: PUSH
5809: LD_INT 1
5811: ARRAY
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 456
// end ;
5831: GO 5744
5833: POP
5834: POP
// end ;
5835: LD_VAR 0 3
5839: RET
// export function Count ( array ) ; begin
5840: LD_INT 0
5842: PPUSH
// result := array + 0 ;
5843: LD_ADDR_VAR 0 2
5847: PUSH
5848: LD_VAR 0 1
5852: PUSH
5853: LD_INT 0
5855: PLUS
5856: ST_TO_ADDR
// end ;
5857: LD_VAR 0 2
5861: RET
// export function IsEmpty ( building ) ; begin
5862: LD_INT 0
5864: PPUSH
// if not building then
5865: LD_VAR 0 1
5869: NOT
5870: IFFALSE 5874
// exit ;
5872: GO 5917
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5874: LD_ADDR_VAR 0 2
5878: PUSH
5879: LD_VAR 0 1
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 255
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 58
5903: PUSH
5904: EMPTY
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: IN
5916: ST_TO_ADDR
// end ;
5917: LD_VAR 0 2
5921: RET
// export function IsNotFull ( building ) ; var places ; begin
5922: LD_INT 0
5924: PPUSH
5925: PPUSH
// if not building then
5926: LD_VAR 0 1
5930: NOT
5931: IFFALSE 5935
// exit ;
5933: GO 5963
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5935: LD_ADDR_VAR 0 2
5939: PUSH
5940: LD_VAR 0 1
5944: PPUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 62
5950: PUSH
5951: EMPTY
5952: LIST
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PPUSH
5958: CALL_OW 72
5962: ST_TO_ADDR
// end ;
5963: LD_VAR 0 2
5967: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5968: LD_INT 0
5970: PPUSH
5971: PPUSH
5972: PPUSH
5973: PPUSH
// tmp := [ ] ;
5974: LD_ADDR_VAR 0 3
5978: PUSH
5979: EMPTY
5980: ST_TO_ADDR
// list := [ ] ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: EMPTY
5987: ST_TO_ADDR
// for i = 16 to 25 do
5988: LD_ADDR_VAR 0 4
5992: PUSH
5993: DOUBLE
5994: LD_INT 16
5996: DEC
5997: ST_TO_ADDR
5998: LD_INT 25
6000: PUSH
6001: FOR_TO
6002: IFFALSE 6075
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_VAR 0 3
6013: PUSH
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PPUSH
6022: CALL_OW 255
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 91
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 6
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 30
6049: PUSH
6050: LD_VAR 0 4
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: EMPTY
6065: LIST
6066: PPUSH
6067: CALL_OW 69
6071: ADD
6072: ST_TO_ADDR
6073: GO 6001
6075: POP
6076: POP
// for i = 1 to tmp do
6077: LD_ADDR_VAR 0 4
6081: PUSH
6082: DOUBLE
6083: LD_INT 1
6085: DEC
6086: ST_TO_ADDR
6087: LD_VAR 0 3
6091: PUSH
6092: FOR_TO
6093: IFFALSE 6181
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6095: LD_ADDR_VAR 0 5
6099: PUSH
6100: LD_VAR 0 5
6104: PUSH
6105: LD_VAR 0 3
6109: PUSH
6110: LD_VAR 0 4
6114: ARRAY
6115: PPUSH
6116: CALL_OW 266
6120: PUSH
6121: LD_VAR 0 3
6125: PUSH
6126: LD_VAR 0 4
6130: ARRAY
6131: PPUSH
6132: CALL_OW 250
6136: PUSH
6137: LD_VAR 0 3
6141: PUSH
6142: LD_VAR 0 4
6146: ARRAY
6147: PPUSH
6148: CALL_OW 251
6152: PUSH
6153: LD_VAR 0 3
6157: PUSH
6158: LD_VAR 0 4
6162: ARRAY
6163: PPUSH
6164: CALL_OW 254
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: ADD
6178: ST_TO_ADDR
6179: GO 6092
6181: POP
6182: POP
// result := list ;
6183: LD_ADDR_VAR 0 2
6187: PUSH
6188: LD_VAR 0 5
6192: ST_TO_ADDR
// end ;
6193: LD_VAR 0 2
6197: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6198: LD_INT 0
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// if not factory then
6207: LD_VAR 0 1
6211: NOT
6212: IFFALSE 6216
// exit ;
6214: GO 6819
// if control = control_apeman then
6216: LD_VAR 0 4
6220: PUSH
6221: LD_INT 5
6223: EQUAL
6224: IFFALSE 6333
// begin tmp := UnitsInside ( factory ) ;
6226: LD_ADDR_VAR 0 8
6230: PUSH
6231: LD_VAR 0 1
6235: PPUSH
6236: CALL_OW 313
6240: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6241: LD_VAR 0 8
6245: PPUSH
6246: LD_INT 25
6248: PUSH
6249: LD_INT 12
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: NOT
6261: IFFALSE 6271
// control := control_manual ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6271: LD_ADDR_VAR 0 8
6275: PUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: CALL 5968 0 1
6285: ST_TO_ADDR
// if tmp then
6286: LD_VAR 0 8
6290: IFFALSE 6333
// begin for i in tmp do
6292: LD_ADDR_VAR 0 7
6296: PUSH
6297: LD_VAR 0 8
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6331
// if i [ 1 ] = b_ext_radio then
6305: LD_VAR 0 7
6309: PUSH
6310: LD_INT 1
6312: ARRAY
6313: PUSH
6314: LD_INT 22
6316: EQUAL
6317: IFFALSE 6329
// begin control := control_remote ;
6319: LD_ADDR_VAR 0 4
6323: PUSH
6324: LD_INT 2
6326: ST_TO_ADDR
// break ;
6327: GO 6331
// end ;
6329: GO 6302
6331: POP
6332: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6333: LD_VAR 0 1
6337: PPUSH
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_VAR 0 3
6347: PPUSH
6348: LD_VAR 0 4
6352: PPUSH
6353: LD_VAR 0 5
6357: PPUSH
6358: CALL_OW 448
6362: IFFALSE 6397
// begin result := [ chassis , engine , control , weapon ] ;
6364: LD_ADDR_VAR 0 6
6368: PUSH
6369: LD_VAR 0 2
6373: PUSH
6374: LD_VAR 0 3
6378: PUSH
6379: LD_VAR 0 4
6383: PUSH
6384: LD_VAR 0 5
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: ST_TO_ADDR
// exit ;
6395: GO 6819
// end ; _chassis := AvailableChassisList ( factory ) ;
6397: LD_ADDR_VAR 0 9
6401: PUSH
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL_OW 475
6411: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6412: LD_ADDR_VAR 0 11
6416: PUSH
6417: LD_VAR 0 1
6421: PPUSH
6422: CALL_OW 476
6426: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6427: LD_ADDR_VAR 0 12
6431: PUSH
6432: LD_VAR 0 1
6436: PPUSH
6437: CALL_OW 477
6441: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6442: LD_ADDR_VAR 0 10
6446: PUSH
6447: LD_VAR 0 1
6451: PPUSH
6452: CALL_OW 478
6456: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6457: LD_VAR 0 9
6461: NOT
6462: IFTRUE 6471
6464: PUSH
6465: LD_VAR 0 11
6469: NOT
6470: OR
6471: IFTRUE 6480
6473: PUSH
6474: LD_VAR 0 12
6478: NOT
6479: OR
6480: IFTRUE 6489
6482: PUSH
6483: LD_VAR 0 10
6487: NOT
6488: OR
6489: IFFALSE 6524
// begin result := [ chassis , engine , control , weapon ] ;
6491: LD_ADDR_VAR 0 6
6495: PUSH
6496: LD_VAR 0 2
6500: PUSH
6501: LD_VAR 0 3
6505: PUSH
6506: LD_VAR 0 4
6510: PUSH
6511: LD_VAR 0 5
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: ST_TO_ADDR
// exit ;
6522: GO 6819
// end ; if not chassis in _chassis then
6524: LD_VAR 0 2
6528: PUSH
6529: LD_VAR 0 9
6533: IN
6534: NOT
6535: IFFALSE 6561
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6537: LD_ADDR_VAR 0 2
6541: PUSH
6542: LD_VAR 0 9
6546: PUSH
6547: LD_INT 1
6549: PPUSH
6550: LD_VAR 0 9
6554: PPUSH
6555: CALL_OW 12
6559: ARRAY
6560: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6561: LD_VAR 0 2
6565: PPUSH
6566: LD_VAR 0 3
6570: PPUSH
6571: CALL 6824 0 2
6575: NOT
6576: IFFALSE 6637
// repeat engine := _engine [ 1 ] ;
6578: LD_ADDR_VAR 0 3
6582: PUSH
6583: LD_VAR 0 11
6587: PUSH
6588: LD_INT 1
6590: ARRAY
6591: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6592: LD_ADDR_VAR 0 11
6596: PUSH
6597: LD_VAR 0 11
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: CALL_OW 3
6609: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6610: LD_VAR 0 2
6614: PPUSH
6615: LD_VAR 0 3
6619: PPUSH
6620: CALL 6824 0 2
6624: IFTRUE 6635
6626: PUSH
6627: LD_VAR 0 11
6631: PUSH
6632: EMPTY
6633: EQUAL
6634: OR
6635: IFFALSE 6578
// if not control in _control then
6637: LD_VAR 0 4
6641: PUSH
6642: LD_VAR 0 12
6646: IN
6647: NOT
6648: IFFALSE 6674
// control := _control [ rand ( 1 , _control ) ] ;
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 12
6659: PUSH
6660: LD_INT 1
6662: PPUSH
6663: LD_VAR 0 12
6667: PPUSH
6668: CALL_OW 12
6672: ARRAY
6673: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6674: LD_VAR 0 2
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL 7046 0 2
6688: NOT
6689: IFFALSE 6750
// repeat weapon := _weapon [ 1 ] ;
6691: LD_ADDR_VAR 0 5
6695: PUSH
6696: LD_VAR 0 10
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6705: LD_ADDR_VAR 0 10
6709: PUSH
6710: LD_VAR 0 10
6714: PPUSH
6715: LD_INT 1
6717: PPUSH
6718: CALL_OW 3
6722: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6723: LD_VAR 0 2
6727: PPUSH
6728: LD_VAR 0 5
6732: PPUSH
6733: CALL 7046 0 2
6737: IFTRUE 6748
6739: PUSH
6740: LD_VAR 0 10
6744: PUSH
6745: EMPTY
6746: EQUAL
6747: OR
6748: IFFALSE 6691
// result := [ ] ;
6750: LD_ADDR_VAR 0 6
6754: PUSH
6755: EMPTY
6756: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6757: LD_VAR 0 1
6761: PPUSH
6762: LD_VAR 0 2
6766: PPUSH
6767: LD_VAR 0 3
6771: PPUSH
6772: LD_VAR 0 4
6776: PPUSH
6777: LD_VAR 0 5
6781: PPUSH
6782: CALL_OW 448
6786: IFFALSE 6819
// result := [ chassis , engine , control , weapon ] ;
6788: LD_ADDR_VAR 0 6
6792: PUSH
6793: LD_VAR 0 2
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: LD_VAR 0 4
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: ST_TO_ADDR
// end ;
6819: LD_VAR 0 6
6823: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6824: LD_INT 0
6826: PPUSH
// if not chassis or not engine then
6827: LD_VAR 0 1
6831: NOT
6832: IFTRUE 6841
6834: PUSH
6835: LD_VAR 0 2
6839: NOT
6840: OR
6841: IFFALSE 6845
// exit ;
6843: GO 7041
// case engine of engine_solar :
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6896
6858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: LD_INT 11
6866: PUSH
6867: LD_INT 12
6869: PUSH
6870: LD_INT 13
6872: PUSH
6873: LD_INT 14
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: LD_INT 2
6881: PUSH
6882: LD_INT 3
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: ST_TO_ADDR
6894: GO 7025
6896: LD_INT 1
6898: DOUBLE
6899: EQUAL
6900: IFTRUE 6904
6902: GO 6966
6904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: LD_INT 11
6912: PUSH
6913: LD_INT 12
6915: PUSH
6916: LD_INT 13
6918: PUSH
6919: LD_INT 14
6921: PUSH
6922: LD_INT 1
6924: PUSH
6925: LD_INT 2
6927: PUSH
6928: LD_INT 3
6930: PUSH
6931: LD_INT 4
6933: PUSH
6934: LD_INT 5
6936: PUSH
6937: LD_INT 21
6939: PUSH
6940: LD_INT 23
6942: PUSH
6943: LD_INT 22
6945: PUSH
6946: LD_INT 24
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: ST_TO_ADDR
6964: GO 7025
6966: LD_INT 3
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 7024
6974: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: LD_INT 13
6982: PUSH
6983: LD_INT 14
6985: PUSH
6986: LD_INT 2
6988: PUSH
6989: LD_INT 3
6991: PUSH
6992: LD_INT 4
6994: PUSH
6995: LD_INT 5
6997: PUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 22
7003: PUSH
7004: LD_INT 23
7006: PUSH
7007: LD_INT 24
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: ST_TO_ADDR
7022: GO 7025
7024: POP
// result := ( chassis in result ) ;
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_VAR 0 1
7034: PUSH
7035: LD_VAR 0 3
7039: IN
7040: ST_TO_ADDR
// end ;
7041: LD_VAR 0 3
7045: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7046: LD_INT 0
7048: PPUSH
// if not chassis or not weapon then
7049: LD_VAR 0 1
7053: NOT
7054: IFTRUE 7063
7056: PUSH
7057: LD_VAR 0 2
7061: NOT
7062: OR
7063: IFFALSE 7067
// exit ;
7065: GO 8161
// case weapon of us_machine_gun :
7067: LD_VAR 0 2
7071: PUSH
7072: LD_INT 2
7074: DOUBLE
7075: EQUAL
7076: IFTRUE 7080
7078: GO 7110
7080: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7081: LD_ADDR_VAR 0 3
7085: PUSH
7086: LD_INT 1
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 3
7094: PUSH
7095: LD_INT 4
7097: PUSH
7098: LD_INT 5
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: ST_TO_ADDR
7108: GO 8145
7110: LD_INT 3
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7148
7118: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 1
7126: PUSH
7127: LD_INT 2
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: LD_INT 4
7135: PUSH
7136: LD_INT 5
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: ST_TO_ADDR
7146: GO 8145
7148: LD_INT 11
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7156
7154: GO 7186
7156: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: LD_INT 3
7170: PUSH
7171: LD_INT 4
7173: PUSH
7174: LD_INT 5
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 8145
7186: LD_INT 4
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7220
7194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: LD_INT 5
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 8145
7220: LD_INT 5
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7254
7228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
7252: GO 8145
7254: LD_INT 9
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7288
7262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: ST_TO_ADDR
7286: GO 8145
7288: LD_INT 7
7290: DOUBLE
7291: EQUAL
7292: IFTRUE 7296
7294: GO 7322
7296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_INT 2
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: LD_INT 4
7310: PUSH
7311: LD_INT 5
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: ST_TO_ADDR
7320: GO 8145
7322: LD_INT 12
7324: DOUBLE
7325: EQUAL
7326: IFTRUE 7330
7328: GO 7356
7330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 2
7338: PUSH
7339: LD_INT 3
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
7354: GO 8145
7356: LD_INT 13
7358: DOUBLE
7359: EQUAL
7360: IFTRUE 7364
7362: GO 7390
7364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: LD_INT 2
7372: PUSH
7373: LD_INT 3
7375: PUSH
7376: LD_INT 4
7378: PUSH
7379: LD_INT 5
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: ST_TO_ADDR
7388: GO 8145
7390: LD_INT 14
7392: DOUBLE
7393: EQUAL
7394: IFTRUE 7398
7396: GO 7416
7398: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7399: LD_ADDR_VAR 0 3
7403: PUSH
7404: LD_INT 4
7406: PUSH
7407: LD_INT 5
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: ST_TO_ADDR
7414: GO 8145
7416: LD_INT 6
7418: DOUBLE
7419: EQUAL
7420: IFTRUE 7424
7422: GO 7442
7424: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7425: LD_ADDR_VAR 0 3
7429: PUSH
7430: LD_INT 4
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: ST_TO_ADDR
7440: GO 8145
7442: LD_INT 10
7444: DOUBLE
7445: EQUAL
7446: IFTRUE 7450
7448: GO 7468
7450: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7451: LD_ADDR_VAR 0 3
7455: PUSH
7456: LD_INT 4
7458: PUSH
7459: LD_INT 5
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: ST_TO_ADDR
7466: GO 8145
7468: LD_INT 22
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7502
7476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
7500: GO 8145
7502: LD_INT 23
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7536
7510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 11
7518: PUSH
7519: LD_INT 12
7521: PUSH
7522: LD_INT 13
7524: PUSH
7525: LD_INT 14
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: ST_TO_ADDR
7534: GO 8145
7536: LD_INT 24
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7570
7544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7545: LD_ADDR_VAR 0 3
7549: PUSH
7550: LD_INT 11
7552: PUSH
7553: LD_INT 12
7555: PUSH
7556: LD_INT 13
7558: PUSH
7559: LD_INT 14
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
7568: GO 8145
7570: LD_INT 30
7572: DOUBLE
7573: EQUAL
7574: IFTRUE 7578
7576: GO 7604
7578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: LD_INT 12
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 14
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: ST_TO_ADDR
7602: GO 8145
7604: LD_INT 25
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7630
7612: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7613: LD_ADDR_VAR 0 3
7617: PUSH
7618: LD_INT 13
7620: PUSH
7621: LD_INT 14
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: ST_TO_ADDR
7628: GO 8145
7630: LD_INT 27
7632: DOUBLE
7633: EQUAL
7634: IFTRUE 7638
7636: GO 7656
7638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7639: LD_ADDR_VAR 0 3
7643: PUSH
7644: LD_INT 13
7646: PUSH
7647: LD_INT 14
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: ST_TO_ADDR
7654: GO 8145
7656: LD_INT 92
7658: DOUBLE
7659: EQUAL
7660: IFTRUE 7664
7662: GO 7690
7664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7665: LD_ADDR_VAR 0 3
7669: PUSH
7670: LD_INT 11
7672: PUSH
7673: LD_INT 12
7675: PUSH
7676: LD_INT 13
7678: PUSH
7679: LD_INT 14
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: ST_TO_ADDR
7688: GO 8145
7690: LD_INT 28
7692: DOUBLE
7693: EQUAL
7694: IFTRUE 7698
7696: GO 7716
7698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_INT 13
7706: PUSH
7707: LD_INT 14
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: ST_TO_ADDR
7714: GO 8145
7716: LD_INT 29
7718: DOUBLE
7719: EQUAL
7720: IFTRUE 7724
7722: GO 7742
7724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7725: LD_ADDR_VAR 0 3
7729: PUSH
7730: LD_INT 13
7732: PUSH
7733: LD_INT 14
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: ST_TO_ADDR
7740: GO 8145
7742: LD_INT 31
7744: DOUBLE
7745: EQUAL
7746: IFTRUE 7750
7748: GO 7768
7750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_INT 13
7758: PUSH
7759: LD_INT 14
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: ST_TO_ADDR
7766: GO 8145
7768: LD_INT 26
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7794
7776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7777: LD_ADDR_VAR 0 3
7781: PUSH
7782: LD_INT 13
7784: PUSH
7785: LD_INT 14
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
7792: GO 8145
7794: LD_INT 42
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7828
7802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 23
7816: PUSH
7817: LD_INT 24
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
7826: GO 8145
7828: LD_INT 43
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 7862
7836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 21
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_INT 23
7850: PUSH
7851: LD_INT 24
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 8145
7862: LD_INT 44
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7896
7870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 8145
7896: LD_INT 45
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 7930
7904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7905: LD_ADDR_VAR 0 3
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: ST_TO_ADDR
7928: GO 8145
7930: LD_INT 49
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7964
7938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 21
7946: PUSH
7947: LD_INT 22
7949: PUSH
7950: LD_INT 23
7952: PUSH
7953: LD_INT 24
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: ST_TO_ADDR
7962: GO 8145
7964: LD_INT 51
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 7998
7972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 24
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ST_TO_ADDR
7996: GO 8145
7998: LD_INT 52
8000: DOUBLE
8001: EQUAL
8002: IFTRUE 8006
8004: GO 8032
8006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8007: LD_ADDR_VAR 0 3
8011: PUSH
8012: LD_INT 21
8014: PUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 23
8020: PUSH
8021: LD_INT 24
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: ST_TO_ADDR
8030: GO 8145
8032: LD_INT 53
8034: DOUBLE
8035: EQUAL
8036: IFTRUE 8040
8038: GO 8058
8040: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8041: LD_ADDR_VAR 0 3
8045: PUSH
8046: LD_INT 23
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: ST_TO_ADDR
8056: GO 8145
8058: LD_INT 46
8060: DOUBLE
8061: EQUAL
8062: IFTRUE 8066
8064: GO 8084
8066: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8067: LD_ADDR_VAR 0 3
8071: PUSH
8072: LD_INT 23
8074: PUSH
8075: LD_INT 24
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: ST_TO_ADDR
8082: GO 8145
8084: LD_INT 47
8086: DOUBLE
8087: EQUAL
8088: IFTRUE 8092
8090: GO 8110
8092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
8093: LD_ADDR_VAR 0 3
8097: PUSH
8098: LD_INT 23
8100: PUSH
8101: LD_INT 24
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: ST_TO_ADDR
8108: GO 8145
8110: LD_INT 98
8112: DOUBLE
8113: EQUAL
8114: IFTRUE 8118
8116: GO 8144
8118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_INT 21
8126: PUSH
8127: LD_INT 22
8129: PUSH
8130: LD_INT 23
8132: PUSH
8133: LD_INT 24
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: ST_TO_ADDR
8142: GO 8145
8144: POP
// result := ( chassis in result ) ;
8145: LD_ADDR_VAR 0 3
8149: PUSH
8150: LD_VAR 0 1
8154: PUSH
8155: LD_VAR 0 3
8159: IN
8160: ST_TO_ADDR
// end ;
8161: LD_VAR 0 3
8165: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
// result := array ;
8175: LD_ADDR_VAR 0 5
8179: PUSH
8180: LD_VAR 0 1
8184: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8185: LD_VAR 0 1
8189: NOT
8190: IFTRUE 8199
8192: PUSH
8193: LD_VAR 0 2
8197: NOT
8198: OR
8199: IFTRUE 8208
8201: PUSH
8202: LD_VAR 0 3
8206: NOT
8207: OR
8208: IFTRUE 8222
8210: PUSH
8211: LD_VAR 0 2
8215: PUSH
8216: LD_VAR 0 1
8220: GREATER
8221: OR
8222: IFTRUE 8236
8224: PUSH
8225: LD_VAR 0 3
8229: PUSH
8230: LD_VAR 0 1
8234: GREATER
8235: OR
8236: IFFALSE 8240
// exit ;
8238: GO 8536
// if direction then
8240: LD_VAR 0 4
8244: IFFALSE 8308
// begin d := 1 ;
8246: LD_ADDR_VAR 0 9
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// if i_from > i_to then
8254: LD_VAR 0 2
8258: PUSH
8259: LD_VAR 0 3
8263: GREATER
8264: IFFALSE 8290
// length := ( array - i_from ) + i_to else
8266: LD_ADDR_VAR 0 11
8270: PUSH
8271: LD_VAR 0 1
8275: PUSH
8276: LD_VAR 0 2
8280: MINUS
8281: PUSH
8282: LD_VAR 0 3
8286: PLUS
8287: ST_TO_ADDR
8288: GO 8306
// length := i_to - i_from ;
8290: LD_ADDR_VAR 0 11
8294: PUSH
8295: LD_VAR 0 3
8299: PUSH
8300: LD_VAR 0 2
8304: MINUS
8305: ST_TO_ADDR
// end else
8306: GO 8369
// begin d := - 1 ;
8308: LD_ADDR_VAR 0 9
8312: PUSH
8313: LD_INT 1
8315: NEG
8316: ST_TO_ADDR
// if i_from > i_to then
8317: LD_VAR 0 2
8321: PUSH
8322: LD_VAR 0 3
8326: GREATER
8327: IFFALSE 8347
// length := i_from - i_to else
8329: LD_ADDR_VAR 0 11
8333: PUSH
8334: LD_VAR 0 2
8338: PUSH
8339: LD_VAR 0 3
8343: MINUS
8344: ST_TO_ADDR
8345: GO 8369
// length := ( array - i_to ) + i_from ;
8347: LD_ADDR_VAR 0 11
8351: PUSH
8352: LD_VAR 0 1
8356: PUSH
8357: LD_VAR 0 3
8361: MINUS
8362: PUSH
8363: LD_VAR 0 2
8367: PLUS
8368: ST_TO_ADDR
// end ; if not length then
8369: LD_VAR 0 11
8373: NOT
8374: IFFALSE 8378
// exit ;
8376: GO 8536
// tmp := array ;
8378: LD_ADDR_VAR 0 10
8382: PUSH
8383: LD_VAR 0 1
8387: ST_TO_ADDR
// for i = 1 to length do
8388: LD_ADDR_VAR 0 6
8392: PUSH
8393: DOUBLE
8394: LD_INT 1
8396: DEC
8397: ST_TO_ADDR
8398: LD_VAR 0 11
8402: PUSH
8403: FOR_TO
8404: IFFALSE 8524
// begin for j = 1 to array do
8406: LD_ADDR_VAR 0 7
8410: PUSH
8411: DOUBLE
8412: LD_INT 1
8414: DEC
8415: ST_TO_ADDR
8416: LD_VAR 0 1
8420: PUSH
8421: FOR_TO
8422: IFFALSE 8510
// begin k := j + d ;
8424: LD_ADDR_VAR 0 8
8428: PUSH
8429: LD_VAR 0 7
8433: PUSH
8434: LD_VAR 0 9
8438: PLUS
8439: ST_TO_ADDR
// if k > array then
8440: LD_VAR 0 8
8444: PUSH
8445: LD_VAR 0 1
8449: GREATER
8450: IFFALSE 8460
// k := 1 ;
8452: LD_ADDR_VAR 0 8
8456: PUSH
8457: LD_INT 1
8459: ST_TO_ADDR
// if not k then
8460: LD_VAR 0 8
8464: NOT
8465: IFFALSE 8477
// k := array ;
8467: LD_ADDR_VAR 0 8
8471: PUSH
8472: LD_VAR 0 1
8476: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8477: LD_ADDR_VAR 0 10
8481: PUSH
8482: LD_VAR 0 10
8486: PPUSH
8487: LD_VAR 0 8
8491: PPUSH
8492: LD_VAR 0 1
8496: PUSH
8497: LD_VAR 0 7
8501: ARRAY
8502: PPUSH
8503: CALL_OW 1
8507: ST_TO_ADDR
// end ;
8508: GO 8421
8510: POP
8511: POP
// array := tmp ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: LD_VAR 0 10
8521: ST_TO_ADDR
// end ;
8522: GO 8403
8524: POP
8525: POP
// result := array ;
8526: LD_ADDR_VAR 0 5
8530: PUSH
8531: LD_VAR 0 1
8535: ST_TO_ADDR
// end ;
8536: LD_VAR 0 5
8540: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
// result := 0 ;
8545: LD_ADDR_VAR 0 3
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// if not array or not value in array then
8553: LD_VAR 0 1
8557: NOT
8558: IFTRUE 8573
8560: PUSH
8561: LD_VAR 0 2
8565: PUSH
8566: LD_VAR 0 1
8570: IN
8571: NOT
8572: OR
8573: IFFALSE 8577
// exit ;
8575: GO 8631
// for i = 1 to array do
8577: LD_ADDR_VAR 0 4
8581: PUSH
8582: DOUBLE
8583: LD_INT 1
8585: DEC
8586: ST_TO_ADDR
8587: LD_VAR 0 1
8591: PUSH
8592: FOR_TO
8593: IFFALSE 8629
// if value = array [ i ] then
8595: LD_VAR 0 2
8599: PUSH
8600: LD_VAR 0 1
8604: PUSH
8605: LD_VAR 0 4
8609: ARRAY
8610: EQUAL
8611: IFFALSE 8627
// begin result := i ;
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_VAR 0 4
8622: ST_TO_ADDR
// exit ;
8623: POP
8624: POP
8625: GO 8631
// end ;
8627: GO 8592
8629: POP
8630: POP
// end ;
8631: LD_VAR 0 3
8635: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8636: LD_INT 0
8638: PPUSH
// vc_chassis := chassis ;
8639: LD_ADDR_OWVAR 37
8643: PUSH
8644: LD_VAR 0 1
8648: ST_TO_ADDR
// vc_engine := engine ;
8649: LD_ADDR_OWVAR 39
8653: PUSH
8654: LD_VAR 0 2
8658: ST_TO_ADDR
// vc_control := control ;
8659: LD_ADDR_OWVAR 38
8663: PUSH
8664: LD_VAR 0 3
8668: ST_TO_ADDR
// vc_weapon := weapon ;
8669: LD_ADDR_OWVAR 40
8673: PUSH
8674: LD_VAR 0 4
8678: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8679: LD_ADDR_OWVAR 41
8683: PUSH
8684: LD_VAR 0 5
8688: ST_TO_ADDR
// end ;
8689: LD_VAR 0 6
8693: RET
// export function WantPlant ( unit ) ; var task ; begin
8694: LD_INT 0
8696: PPUSH
8697: PPUSH
// result := false ;
8698: LD_ADDR_VAR 0 2
8702: PUSH
8703: LD_INT 0
8705: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8706: LD_ADDR_VAR 0 3
8710: PUSH
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL_OW 437
8720: ST_TO_ADDR
// if task then
8721: LD_VAR 0 3
8725: IFFALSE 8753
// if task [ 1 ] [ 1 ] = p then
8727: LD_VAR 0 3
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PUSH
8740: LD_STRING p
8742: EQUAL
8743: IFFALSE 8753
// result := true ;
8745: LD_ADDR_VAR 0 2
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// end ;
8753: LD_VAR 0 2
8757: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
// if pos < 1 then
8764: LD_VAR 0 2
8768: PUSH
8769: LD_INT 1
8771: LESS
8772: IFFALSE 8776
// exit ;
8774: GO 9079
// if pos = 1 then
8776: LD_VAR 0 2
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: IFFALSE 8817
// result := Replace ( arr , pos [ 1 ] , value ) else
8786: LD_ADDR_VAR 0 4
8790: PUSH
8791: LD_VAR 0 1
8795: PPUSH
8796: LD_VAR 0 2
8800: PUSH
8801: LD_INT 1
8803: ARRAY
8804: PPUSH
8805: LD_VAR 0 3
8809: PPUSH
8810: CALL_OW 1
8814: ST_TO_ADDR
8815: GO 9079
// begin tmp := arr ;
8817: LD_ADDR_VAR 0 6
8821: PUSH
8822: LD_VAR 0 1
8826: ST_TO_ADDR
// s_arr := [ tmp ] ;
8827: LD_ADDR_VAR 0 7
8831: PUSH
8832: LD_VAR 0 6
8836: PUSH
8837: EMPTY
8838: LIST
8839: ST_TO_ADDR
// for i = 1 to pos - 1 do
8840: LD_ADDR_VAR 0 5
8844: PUSH
8845: DOUBLE
8846: LD_INT 1
8848: DEC
8849: ST_TO_ADDR
8850: LD_VAR 0 2
8854: PUSH
8855: LD_INT 1
8857: MINUS
8858: PUSH
8859: FOR_TO
8860: IFFALSE 8905
// begin tmp := tmp [ pos [ i ] ] ;
8862: LD_ADDR_VAR 0 6
8866: PUSH
8867: LD_VAR 0 6
8871: PUSH
8872: LD_VAR 0 2
8876: PUSH
8877: LD_VAR 0 5
8881: ARRAY
8882: ARRAY
8883: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8884: LD_ADDR_VAR 0 7
8888: PUSH
8889: LD_VAR 0 7
8893: PUSH
8894: LD_VAR 0 6
8898: PUSH
8899: EMPTY
8900: LIST
8901: ADD
8902: ST_TO_ADDR
// end ;
8903: GO 8859
8905: POP
8906: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8907: LD_ADDR_VAR 0 6
8911: PUSH
8912: LD_VAR 0 6
8916: PPUSH
8917: LD_VAR 0 2
8921: PUSH
8922: LD_VAR 0 2
8926: ARRAY
8927: PPUSH
8928: LD_VAR 0 3
8932: PPUSH
8933: CALL_OW 1
8937: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8938: LD_ADDR_VAR 0 7
8942: PUSH
8943: LD_VAR 0 7
8947: PPUSH
8948: LD_VAR 0 7
8952: PPUSH
8953: LD_VAR 0 6
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// for i = s_arr downto 2 do
8963: LD_ADDR_VAR 0 5
8967: PUSH
8968: DOUBLE
8969: LD_VAR 0 7
8973: INC
8974: ST_TO_ADDR
8975: LD_INT 2
8977: PUSH
8978: FOR_DOWNTO
8979: IFFALSE 9063
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8981: LD_ADDR_VAR 0 6
8985: PUSH
8986: LD_VAR 0 7
8990: PUSH
8991: LD_VAR 0 5
8995: PUSH
8996: LD_INT 1
8998: MINUS
8999: ARRAY
9000: PPUSH
9001: LD_VAR 0 2
9005: PUSH
9006: LD_VAR 0 5
9010: PUSH
9011: LD_INT 1
9013: MINUS
9014: ARRAY
9015: PPUSH
9016: LD_VAR 0 7
9020: PUSH
9021: LD_VAR 0 5
9025: ARRAY
9026: PPUSH
9027: CALL_OW 1
9031: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9032: LD_ADDR_VAR 0 7
9036: PUSH
9037: LD_VAR 0 7
9041: PPUSH
9042: LD_VAR 0 5
9046: PUSH
9047: LD_INT 1
9049: MINUS
9050: PPUSH
9051: LD_VAR 0 6
9055: PPUSH
9056: CALL_OW 1
9060: ST_TO_ADDR
// end ;
9061: GO 8978
9063: POP
9064: POP
// result := s_arr [ 1 ] ;
9065: LD_ADDR_VAR 0 4
9069: PUSH
9070: LD_VAR 0 7
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: ST_TO_ADDR
// end ; end ;
9079: LD_VAR 0 4
9083: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
// if not list then
9088: LD_VAR 0 1
9092: NOT
9093: IFFALSE 9097
// exit ;
9095: GO 9188
// i := list [ pos1 ] ;
9097: LD_ADDR_VAR 0 5
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: LD_VAR 0 2
9111: ARRAY
9112: ST_TO_ADDR
// if not i then
9113: LD_VAR 0 5
9117: NOT
9118: IFFALSE 9122
// exit ;
9120: GO 9188
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9122: LD_ADDR_VAR 0 1
9126: PUSH
9127: LD_VAR 0 1
9131: PPUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: LD_VAR 0 1
9141: PUSH
9142: LD_VAR 0 3
9146: ARRAY
9147: PPUSH
9148: CALL_OW 1
9152: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9153: LD_ADDR_VAR 0 1
9157: PUSH
9158: LD_VAR 0 1
9162: PPUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: LD_VAR 0 5
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// result := list ;
9178: LD_ADDR_VAR 0 4
9182: PUSH
9183: LD_VAR 0 1
9187: ST_TO_ADDR
// end ;
9188: LD_VAR 0 4
9192: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9193: LD_INT 0
9195: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9196: LD_ADDR_VAR 0 5
9200: PUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: CALL_OW 250
9210: PPUSH
9211: LD_VAR 0 1
9215: PPUSH
9216: CALL_OW 251
9220: PPUSH
9221: LD_VAR 0 2
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_VAR 0 4
9235: PPUSH
9236: CALL 9618 0 5
9240: ST_TO_ADDR
// end ;
9241: LD_VAR 0 5
9245: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
9251: PPUSH
// if not list or not unit then
9252: LD_VAR 0 2
9256: NOT
9257: IFTRUE 9266
9259: PUSH
9260: LD_VAR 0 1
9264: NOT
9265: OR
9266: IFFALSE 9270
// exit ;
9268: GO 9613
// result := [ ] ;
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// for i in list do
9277: LD_ADDR_VAR 0 6
9281: PUSH
9282: LD_VAR 0 2
9286: PUSH
9287: FOR_IN
9288: IFFALSE 9506
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9290: LD_ADDR_VAR 0 8
9294: PUSH
9295: LD_VAR 0 1
9299: PPUSH
9300: LD_VAR 0 6
9304: PUSH
9305: LD_INT 1
9307: ARRAY
9308: PPUSH
9309: LD_VAR 0 6
9313: PUSH
9314: LD_INT 2
9316: ARRAY
9317: PPUSH
9318: CALL_OW 297
9322: ST_TO_ADDR
// if not Count ( result ) then
9323: LD_VAR 0 5
9327: PPUSH
9328: CALL 5840 0 1
9332: NOT
9333: IFFALSE 9366
// begin result := Join ( result , [ i , tmp ] ) ;
9335: LD_ADDR_VAR 0 5
9339: PUSH
9340: LD_VAR 0 5
9344: PPUSH
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 8
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PPUSH
9359: CALL 41816 0 2
9363: ST_TO_ADDR
// continue ;
9364: GO 9287
// end ; if result [ result ] [ 2 ] <= tmp then
9366: LD_VAR 0 5
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PUSH
9377: LD_INT 2
9379: ARRAY
9380: PUSH
9381: LD_VAR 0 8
9385: LESSEQUAL
9386: IFFALSE 9419
// result := Join ( result , [ i , tmp ] ) else
9388: LD_ADDR_VAR 0 5
9392: PUSH
9393: LD_VAR 0 5
9397: PPUSH
9398: LD_VAR 0 6
9402: PUSH
9403: LD_VAR 0 8
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL 41816 0 2
9416: ST_TO_ADDR
9417: GO 9504
// begin for j := 1 to Count ( result ) do
9419: LD_ADDR_VAR 0 7
9423: PUSH
9424: DOUBLE
9425: LD_INT 1
9427: DEC
9428: ST_TO_ADDR
9429: LD_VAR 0 5
9433: PPUSH
9434: CALL 5840 0 1
9438: PUSH
9439: FOR_TO
9440: IFFALSE 9502
// begin if tmp < result [ j ] [ 2 ] then
9442: LD_VAR 0 8
9446: PUSH
9447: LD_VAR 0 5
9451: PUSH
9452: LD_VAR 0 7
9456: ARRAY
9457: PUSH
9458: LD_INT 2
9460: ARRAY
9461: LESS
9462: IFFALSE 9500
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9464: LD_ADDR_VAR 0 5
9468: PUSH
9469: LD_VAR 0 5
9473: PPUSH
9474: LD_VAR 0 7
9478: PPUSH
9479: LD_VAR 0 6
9483: PUSH
9484: LD_VAR 0 8
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 2
9497: ST_TO_ADDR
// break ;
9498: GO 9502
// end ; end ;
9500: GO 9439
9502: POP
9503: POP
// end ; end ;
9504: GO 9287
9506: POP
9507: POP
// if result and not asc then
9508: LD_VAR 0 5
9512: IFFALSE 9521
9514: PUSH
9515: LD_VAR 0 3
9519: NOT
9520: AND
9521: IFFALSE 9538
// result := ReverseArray ( result ) ;
9523: LD_ADDR_VAR 0 5
9527: PUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: CALL 36896 0 1
9537: ST_TO_ADDR
// tmp := [ ] ;
9538: LD_ADDR_VAR 0 8
9542: PUSH
9543: EMPTY
9544: ST_TO_ADDR
// if mode then
9545: LD_VAR 0 4
9549: IFFALSE 9613
// begin for i := 1 to result do
9551: LD_ADDR_VAR 0 6
9555: PUSH
9556: DOUBLE
9557: LD_INT 1
9559: DEC
9560: ST_TO_ADDR
9561: LD_VAR 0 5
9565: PUSH
9566: FOR_TO
9567: IFFALSE 9601
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9569: LD_ADDR_VAR 0 8
9573: PUSH
9574: LD_VAR 0 8
9578: PPUSH
9579: LD_VAR 0 5
9583: PUSH
9584: LD_VAR 0 6
9588: ARRAY
9589: PUSH
9590: LD_INT 1
9592: ARRAY
9593: PPUSH
9594: CALL 41816 0 2
9598: ST_TO_ADDR
9599: GO 9566
9601: POP
9602: POP
// result := tmp ;
9603: LD_ADDR_VAR 0 5
9607: PUSH
9608: LD_VAR 0 8
9612: ST_TO_ADDR
// end ; end ;
9613: LD_VAR 0 5
9617: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9618: LD_INT 0
9620: PPUSH
9621: PPUSH
9622: PPUSH
9623: PPUSH
// if not list then
9624: LD_VAR 0 3
9628: NOT
9629: IFFALSE 9633
// exit ;
9631: GO 10023
// result := [ ] ;
9633: LD_ADDR_VAR 0 6
9637: PUSH
9638: EMPTY
9639: ST_TO_ADDR
// for i in list do
9640: LD_ADDR_VAR 0 7
9644: PUSH
9645: LD_VAR 0 3
9649: PUSH
9650: FOR_IN
9651: IFFALSE 9853
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9653: LD_ADDR_VAR 0 9
9657: PUSH
9658: LD_VAR 0 7
9662: PPUSH
9663: LD_VAR 0 1
9667: PPUSH
9668: LD_VAR 0 2
9672: PPUSH
9673: CALL_OW 297
9677: ST_TO_ADDR
// if not result then
9678: LD_VAR 0 6
9682: NOT
9683: IFFALSE 9709
// result := [ [ i , tmp ] ] else
9685: LD_ADDR_VAR 0 6
9689: PUSH
9690: LD_VAR 0 7
9694: PUSH
9695: LD_VAR 0 9
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: ST_TO_ADDR
9707: GO 9851
// begin if result [ result ] [ 2 ] <= tmp then
9709: LD_VAR 0 6
9713: PUSH
9714: LD_VAR 0 6
9718: ARRAY
9719: PUSH
9720: LD_INT 2
9722: ARRAY
9723: PUSH
9724: LD_VAR 0 9
9728: LESSEQUAL
9729: IFFALSE 9771
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9731: LD_ADDR_VAR 0 6
9735: PUSH
9736: LD_VAR 0 6
9740: PPUSH
9741: LD_VAR 0 6
9745: PUSH
9746: LD_INT 1
9748: PLUS
9749: PPUSH
9750: LD_VAR 0 7
9754: PUSH
9755: LD_VAR 0 9
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 2
9768: ST_TO_ADDR
9769: GO 9851
// for j := 1 to result do
9771: LD_ADDR_VAR 0 8
9775: PUSH
9776: DOUBLE
9777: LD_INT 1
9779: DEC
9780: ST_TO_ADDR
9781: LD_VAR 0 6
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9849
// begin if tmp < result [ j ] [ 2 ] then
9789: LD_VAR 0 9
9793: PUSH
9794: LD_VAR 0 6
9798: PUSH
9799: LD_VAR 0 8
9803: ARRAY
9804: PUSH
9805: LD_INT 2
9807: ARRAY
9808: LESS
9809: IFFALSE 9847
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9811: LD_ADDR_VAR 0 6
9815: PUSH
9816: LD_VAR 0 6
9820: PPUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_VAR 0 7
9830: PUSH
9831: LD_VAR 0 9
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 2
9844: ST_TO_ADDR
// break ;
9845: GO 9849
// end ; end ;
9847: GO 9786
9849: POP
9850: POP
// end ; end ;
9851: GO 9650
9853: POP
9854: POP
// if result and not asc then
9855: LD_VAR 0 6
9859: IFFALSE 9868
9861: PUSH
9862: LD_VAR 0 4
9866: NOT
9867: AND
9868: IFFALSE 9943
// begin tmp := result ;
9870: LD_ADDR_VAR 0 9
9874: PUSH
9875: LD_VAR 0 6
9879: ST_TO_ADDR
// for i = tmp downto 1 do
9880: LD_ADDR_VAR 0 7
9884: PUSH
9885: DOUBLE
9886: LD_VAR 0 9
9890: INC
9891: ST_TO_ADDR
9892: LD_INT 1
9894: PUSH
9895: FOR_DOWNTO
9896: IFFALSE 9941
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9898: LD_ADDR_VAR 0 6
9902: PUSH
9903: LD_VAR 0 6
9907: PPUSH
9908: LD_VAR 0 9
9912: PUSH
9913: LD_VAR 0 7
9917: MINUS
9918: PUSH
9919: LD_INT 1
9921: PLUS
9922: PPUSH
9923: LD_VAR 0 9
9927: PUSH
9928: LD_VAR 0 7
9932: ARRAY
9933: PPUSH
9934: CALL_OW 1
9938: ST_TO_ADDR
9939: GO 9895
9941: POP
9942: POP
// end ; tmp := [ ] ;
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: EMPTY
9949: ST_TO_ADDR
// if mode then
9950: LD_VAR 0 5
9954: IFFALSE 10023
// begin for i = 1 to result do
9956: LD_ADDR_VAR 0 7
9960: PUSH
9961: DOUBLE
9962: LD_INT 1
9964: DEC
9965: ST_TO_ADDR
9966: LD_VAR 0 6
9970: PUSH
9971: FOR_TO
9972: IFFALSE 10011
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9974: LD_ADDR_VAR 0 9
9978: PUSH
9979: LD_VAR 0 9
9983: PPUSH
9984: LD_VAR 0 7
9988: PPUSH
9989: LD_VAR 0 6
9993: PUSH
9994: LD_VAR 0 7
9998: ARRAY
9999: PUSH
10000: LD_INT 1
10002: ARRAY
10003: PPUSH
10004: CALL_OW 1
10008: ST_TO_ADDR
10009: GO 9971
10011: POP
10012: POP
// result := tmp ;
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_VAR 0 9
10022: ST_TO_ADDR
// end ; end ;
10023: LD_VAR 0 6
10027: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10028: LD_INT 0
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
10035: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10036: LD_ADDR_VAR 0 5
10040: PUSH
10041: LD_INT 0
10043: PUSH
10044: LD_INT 0
10046: PUSH
10047: LD_INT 0
10049: PUSH
10050: EMPTY
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: ST_TO_ADDR
// if not x or not y then
10058: LD_VAR 0 2
10062: NOT
10063: IFTRUE 10072
10065: PUSH
10066: LD_VAR 0 3
10070: NOT
10071: OR
10072: IFFALSE 10076
// exit ;
10074: GO 11732
// if not range then
10076: LD_VAR 0 4
10080: NOT
10081: IFFALSE 10091
// range := 10 ;
10083: LD_ADDR_VAR 0 4
10087: PUSH
10088: LD_INT 10
10090: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10091: LD_ADDR_VAR 0 8
10095: PUSH
10096: LD_INT 81
10098: PUSH
10099: LD_VAR 0 1
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 92
10110: PUSH
10111: LD_VAR 0 2
10115: PUSH
10116: LD_VAR 0 3
10120: PUSH
10121: LD_VAR 0 4
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: LD_INT 21
10137: PUSH
10138: LD_INT 3
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: ST_TO_ADDR
// if not tmp then
10159: LD_VAR 0 8
10163: NOT
10164: IFFALSE 10168
// exit ;
10166: GO 11732
// for i in tmp do
10168: LD_ADDR_VAR 0 6
10172: PUSH
10173: LD_VAR 0 8
10177: PUSH
10178: FOR_IN
10179: IFFALSE 11707
// begin points := [ 0 , 0 , 0 ] ;
10181: LD_ADDR_VAR 0 9
10185: PUSH
10186: LD_INT 0
10188: PUSH
10189: LD_INT 0
10191: PUSH
10192: LD_INT 0
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: ST_TO_ADDR
// bpoints := 1 ;
10200: LD_ADDR_VAR 0 10
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10208: LD_VAR 0 6
10212: PPUSH
10213: CALL_OW 247
10217: PUSH
10218: LD_INT 1
10220: DOUBLE
10221: EQUAL
10222: IFTRUE 10226
10224: GO 10808
10226: POP
// begin if GetClass ( i ) = 1 then
10227: LD_VAR 0 6
10231: PPUSH
10232: CALL_OW 257
10236: PUSH
10237: LD_INT 1
10239: EQUAL
10240: IFFALSE 10261
// points := [ 10 , 5 , 3 ] ;
10242: LD_ADDR_VAR 0 9
10246: PUSH
10247: LD_INT 10
10249: PUSH
10250: LD_INT 5
10252: PUSH
10253: LD_INT 3
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10261: LD_VAR 0 6
10265: PPUSH
10266: CALL_OW 257
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: IN
10285: IFFALSE 10306
// points := [ 3 , 2 , 1 ] ;
10287: LD_ADDR_VAR 0 9
10291: PUSH
10292: LD_INT 3
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 257
10315: PUSH
10316: LD_INT 5
10318: EQUAL
10319: IFFALSE 10340
// points := [ 130 , 5 , 2 ] ;
10321: LD_ADDR_VAR 0 9
10325: PUSH
10326: LD_INT 130
10328: PUSH
10329: LD_INT 5
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10340: LD_VAR 0 6
10344: PPUSH
10345: CALL_OW 257
10349: PUSH
10350: LD_INT 8
10352: EQUAL
10353: IFFALSE 10374
// points := [ 35 , 35 , 30 ] ;
10355: LD_ADDR_VAR 0 9
10359: PUSH
10360: LD_INT 35
10362: PUSH
10363: LD_INT 35
10365: PUSH
10366: LD_INT 30
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10374: LD_VAR 0 6
10378: PPUSH
10379: CALL_OW 257
10383: PUSH
10384: LD_INT 9
10386: EQUAL
10387: IFFALSE 10408
// points := [ 20 , 55 , 40 ] ;
10389: LD_ADDR_VAR 0 9
10393: PUSH
10394: LD_INT 20
10396: PUSH
10397: LD_INT 55
10399: PUSH
10400: LD_INT 40
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10408: LD_VAR 0 6
10412: PPUSH
10413: CALL_OW 257
10417: PUSH
10418: LD_INT 12
10420: PUSH
10421: LD_INT 16
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: IN
10428: IFFALSE 10449
// points := [ 5 , 3 , 2 ] ;
10430: LD_ADDR_VAR 0 9
10434: PUSH
10435: LD_INT 5
10437: PUSH
10438: LD_INT 3
10440: PUSH
10441: LD_INT 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: LIST
10448: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10449: LD_VAR 0 6
10453: PPUSH
10454: CALL_OW 257
10458: PUSH
10459: LD_INT 17
10461: EQUAL
10462: IFFALSE 10483
// points := [ 100 , 50 , 75 ] ;
10464: LD_ADDR_VAR 0 9
10468: PUSH
10469: LD_INT 100
10471: PUSH
10472: LD_INT 50
10474: PUSH
10475: LD_INT 75
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10483: LD_VAR 0 6
10487: PPUSH
10488: CALL_OW 257
10492: PUSH
10493: LD_INT 15
10495: EQUAL
10496: IFFALSE 10517
// points := [ 10 , 5 , 3 ] ;
10498: LD_ADDR_VAR 0 9
10502: PUSH
10503: LD_INT 10
10505: PUSH
10506: LD_INT 5
10508: PUSH
10509: LD_INT 3
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: LIST
10516: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10517: LD_VAR 0 6
10521: PPUSH
10522: CALL_OW 257
10526: PUSH
10527: LD_INT 14
10529: EQUAL
10530: IFFALSE 10551
// points := [ 10 , 0 , 0 ] ;
10532: LD_ADDR_VAR 0 9
10536: PUSH
10537: LD_INT 10
10539: PUSH
10540: LD_INT 0
10542: PUSH
10543: LD_INT 0
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10551: LD_VAR 0 6
10555: PPUSH
10556: CALL_OW 257
10560: PUSH
10561: LD_INT 11
10563: EQUAL
10564: IFFALSE 10585
// points := [ 30 , 10 , 5 ] ;
10566: LD_ADDR_VAR 0 9
10570: PUSH
10571: LD_INT 30
10573: PUSH
10574: LD_INT 10
10576: PUSH
10577: LD_INT 5
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10585: LD_VAR 0 1
10589: PPUSH
10590: LD_INT 5
10592: PPUSH
10593: CALL_OW 321
10597: PUSH
10598: LD_INT 2
10600: EQUAL
10601: IFFALSE 10618
// bpoints := bpoints * 1.8 ;
10603: LD_ADDR_VAR 0 10
10607: PUSH
10608: LD_VAR 0 10
10612: PUSH
10613: LD_REAL  1.80000000000000E+0000
10616: MUL
10617: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10618: LD_VAR 0 6
10622: PPUSH
10623: CALL_OW 257
10627: PUSH
10628: LD_INT 1
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: LD_INT 3
10636: PUSH
10637: LD_INT 4
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: IN
10646: IFFALSE 10666
10648: PUSH
10649: LD_VAR 0 1
10653: PPUSH
10654: LD_INT 51
10656: PPUSH
10657: CALL_OW 321
10661: PUSH
10662: LD_INT 2
10664: EQUAL
10665: AND
10666: IFFALSE 10683
// bpoints := bpoints * 1.2 ;
10668: LD_ADDR_VAR 0 10
10672: PUSH
10673: LD_VAR 0 10
10677: PUSH
10678: LD_REAL  1.20000000000000E+0000
10681: MUL
10682: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10683: LD_VAR 0 6
10687: PPUSH
10688: CALL_OW 257
10692: PUSH
10693: LD_INT 5
10695: PUSH
10696: LD_INT 7
10698: PUSH
10699: LD_INT 9
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: IN
10707: IFFALSE 10727
10709: PUSH
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_INT 52
10717: PPUSH
10718: CALL_OW 321
10722: PUSH
10723: LD_INT 2
10725: EQUAL
10726: AND
10727: IFFALSE 10744
// bpoints := bpoints * 1.5 ;
10729: LD_ADDR_VAR 0 10
10733: PUSH
10734: LD_VAR 0 10
10738: PUSH
10739: LD_REAL  1.50000000000000E+0000
10742: MUL
10743: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10744: LD_VAR 0 1
10748: PPUSH
10749: LD_INT 66
10751: PPUSH
10752: CALL_OW 321
10756: PUSH
10757: LD_INT 2
10759: EQUAL
10760: IFFALSE 10777
// bpoints := bpoints * 1.1 ;
10762: LD_ADDR_VAR 0 10
10766: PUSH
10767: LD_VAR 0 10
10771: PUSH
10772: LD_REAL  1.10000000000000E+0000
10775: MUL
10776: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10777: LD_ADDR_VAR 0 10
10781: PUSH
10782: LD_VAR 0 10
10786: PUSH
10787: LD_VAR 0 6
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 259
10799: PUSH
10800: LD_REAL  1.15000000000000E+0000
10803: MUL
10804: MUL
10805: ST_TO_ADDR
// end ; unit_vehicle :
10806: GO 11636
10808: LD_INT 2
10810: DOUBLE
10811: EQUAL
10812: IFTRUE 10816
10814: GO 11624
10816: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10817: LD_VAR 0 6
10821: PPUSH
10822: CALL_OW 264
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: LD_INT 42
10832: PUSH
10833: LD_INT 24
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: IN
10841: IFFALSE 10862
// points := [ 25 , 5 , 3 ] ;
10843: LD_ADDR_VAR 0 9
10847: PUSH
10848: LD_INT 25
10850: PUSH
10851: LD_INT 5
10853: PUSH
10854: LD_INT 3
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10862: LD_VAR 0 6
10866: PPUSH
10867: CALL_OW 264
10871: PUSH
10872: LD_INT 4
10874: PUSH
10875: LD_INT 43
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: IN
10886: IFFALSE 10907
// points := [ 40 , 15 , 5 ] ;
10888: LD_ADDR_VAR 0 9
10892: PUSH
10893: LD_INT 40
10895: PUSH
10896: LD_INT 15
10898: PUSH
10899: LD_INT 5
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10907: LD_VAR 0 6
10911: PPUSH
10912: CALL_OW 264
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: LD_INT 23
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: IN
10927: IFFALSE 10948
// points := [ 7 , 25 , 8 ] ;
10929: LD_ADDR_VAR 0 9
10933: PUSH
10934: LD_INT 7
10936: PUSH
10937: LD_INT 25
10939: PUSH
10940: LD_INT 8
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10948: LD_VAR 0 6
10952: PPUSH
10953: CALL_OW 264
10957: PUSH
10958: LD_INT 5
10960: PUSH
10961: LD_INT 27
10963: PUSH
10964: LD_INT 44
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: IN
10972: IFFALSE 10993
// points := [ 14 , 50 , 16 ] ;
10974: LD_ADDR_VAR 0 9
10978: PUSH
10979: LD_INT 14
10981: PUSH
10982: LD_INT 50
10984: PUSH
10985: LD_INT 16
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10993: LD_VAR 0 6
10997: PPUSH
10998: CALL_OW 264
11002: PUSH
11003: LD_INT 6
11005: PUSH
11006: LD_INT 46
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: IN
11013: IFFALSE 11034
// points := [ 32 , 120 , 70 ] ;
11015: LD_ADDR_VAR 0 9
11019: PUSH
11020: LD_INT 32
11022: PUSH
11023: LD_INT 120
11025: PUSH
11026: LD_INT 70
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11034: LD_VAR 0 6
11038: PPUSH
11039: CALL_OW 264
11043: PUSH
11044: LD_INT 7
11046: PUSH
11047: LD_INT 28
11049: PUSH
11050: LD_INT 45
11052: PUSH
11053: LD_INT 92
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: IN
11062: IFFALSE 11083
// points := [ 35 , 20 , 45 ] ;
11064: LD_ADDR_VAR 0 9
11068: PUSH
11069: LD_INT 35
11071: PUSH
11072: LD_INT 20
11074: PUSH
11075: LD_INT 45
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: LIST
11082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11083: LD_VAR 0 6
11087: PPUSH
11088: CALL_OW 264
11092: PUSH
11093: LD_INT 47
11095: PUSH
11096: EMPTY
11097: LIST
11098: IN
11099: IFFALSE 11120
// points := [ 67 , 45 , 75 ] ;
11101: LD_ADDR_VAR 0 9
11105: PUSH
11106: LD_INT 67
11108: PUSH
11109: LD_INT 45
11111: PUSH
11112: LD_INT 75
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11120: LD_VAR 0 6
11124: PPUSH
11125: CALL_OW 264
11129: PUSH
11130: LD_INT 26
11132: PUSH
11133: EMPTY
11134: LIST
11135: IN
11136: IFFALSE 11157
// points := [ 120 , 30 , 80 ] ;
11138: LD_ADDR_VAR 0 9
11142: PUSH
11143: LD_INT 120
11145: PUSH
11146: LD_INT 30
11148: PUSH
11149: LD_INT 80
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11157: LD_VAR 0 6
11161: PPUSH
11162: CALL_OW 264
11166: PUSH
11167: LD_INT 22
11169: PUSH
11170: EMPTY
11171: LIST
11172: IN
11173: IFFALSE 11194
// points := [ 40 , 1 , 1 ] ;
11175: LD_ADDR_VAR 0 9
11179: PUSH
11180: LD_INT 40
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11194: LD_VAR 0 6
11198: PPUSH
11199: CALL_OW 264
11203: PUSH
11204: LD_INT 29
11206: PUSH
11207: EMPTY
11208: LIST
11209: IN
11210: IFFALSE 11231
// points := [ 70 , 200 , 400 ] ;
11212: LD_ADDR_VAR 0 9
11216: PUSH
11217: LD_INT 70
11219: PUSH
11220: LD_INT 200
11222: PUSH
11223: LD_INT 400
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11231: LD_VAR 0 6
11235: PPUSH
11236: CALL_OW 264
11240: PUSH
11241: LD_INT 14
11243: PUSH
11244: LD_INT 53
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: IN
11251: IFFALSE 11272
// points := [ 40 , 10 , 20 ] ;
11253: LD_ADDR_VAR 0 9
11257: PUSH
11258: LD_INT 40
11260: PUSH
11261: LD_INT 10
11263: PUSH
11264: LD_INT 20
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11272: LD_VAR 0 6
11276: PPUSH
11277: CALL_OW 264
11281: PUSH
11282: LD_INT 9
11284: PUSH
11285: EMPTY
11286: LIST
11287: IN
11288: IFFALSE 11309
// points := [ 5 , 70 , 20 ] ;
11290: LD_ADDR_VAR 0 9
11294: PUSH
11295: LD_INT 5
11297: PUSH
11298: LD_INT 70
11300: PUSH
11301: LD_INT 20
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11309: LD_VAR 0 6
11313: PPUSH
11314: CALL_OW 264
11318: PUSH
11319: LD_INT 10
11321: PUSH
11322: EMPTY
11323: LIST
11324: IN
11325: IFFALSE 11346
// points := [ 35 , 110 , 70 ] ;
11327: LD_ADDR_VAR 0 9
11331: PUSH
11332: LD_INT 35
11334: PUSH
11335: LD_INT 110
11337: PUSH
11338: LD_INT 70
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11346: LD_VAR 0 6
11350: PPUSH
11351: CALL_OW 265
11355: PUSH
11356: LD_INT 25
11358: EQUAL
11359: IFFALSE 11380
// points := [ 80 , 65 , 100 ] ;
11361: LD_ADDR_VAR 0 9
11365: PUSH
11366: LD_INT 80
11368: PUSH
11369: LD_INT 65
11371: PUSH
11372: LD_INT 100
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11380: LD_VAR 0 6
11384: PPUSH
11385: CALL_OW 263
11389: PUSH
11390: LD_INT 1
11392: EQUAL
11393: IFFALSE 11428
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11395: LD_ADDR_VAR 0 10
11399: PUSH
11400: LD_VAR 0 10
11404: PUSH
11405: LD_VAR 0 6
11409: PPUSH
11410: CALL_OW 311
11414: PPUSH
11415: LD_INT 3
11417: PPUSH
11418: CALL_OW 259
11422: PUSH
11423: LD_INT 4
11425: MUL
11426: MUL
11427: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11428: LD_VAR 0 6
11432: PPUSH
11433: CALL_OW 263
11437: PUSH
11438: LD_INT 2
11440: EQUAL
11441: IFFALSE 11492
// begin j := IsControledBy ( i ) ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_VAR 0 6
11452: PPUSH
11453: CALL_OW 312
11457: ST_TO_ADDR
// if j then
11458: LD_VAR 0 7
11462: IFFALSE 11492
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11464: LD_ADDR_VAR 0 10
11468: PUSH
11469: LD_VAR 0 10
11473: PUSH
11474: LD_VAR 0 7
11478: PPUSH
11479: LD_INT 3
11481: PPUSH
11482: CALL_OW 259
11486: PUSH
11487: LD_INT 3
11489: MUL
11490: MUL
11491: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11492: LD_VAR 0 6
11496: PPUSH
11497: CALL_OW 264
11501: PUSH
11502: LD_INT 5
11504: PUSH
11505: LD_INT 6
11507: PUSH
11508: LD_INT 46
11510: PUSH
11511: LD_INT 44
11513: PUSH
11514: LD_INT 47
11516: PUSH
11517: LD_INT 45
11519: PUSH
11520: LD_INT 28
11522: PUSH
11523: LD_INT 7
11525: PUSH
11526: LD_INT 27
11528: PUSH
11529: LD_INT 29
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: IN
11544: IFFALSE 11564
11546: PUSH
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 52
11554: PPUSH
11555: CALL_OW 321
11559: PUSH
11560: LD_INT 2
11562: EQUAL
11563: AND
11564: IFFALSE 11581
// bpoints := bpoints * 1.2 ;
11566: LD_ADDR_VAR 0 10
11570: PUSH
11571: LD_VAR 0 10
11575: PUSH
11576: LD_REAL  1.20000000000000E+0000
11579: MUL
11580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11581: LD_VAR 0 6
11585: PPUSH
11586: CALL_OW 264
11590: PUSH
11591: LD_INT 6
11593: PUSH
11594: LD_INT 46
11596: PUSH
11597: LD_INT 47
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: IN
11605: IFFALSE 11622
// bpoints := bpoints * 1.2 ;
11607: LD_ADDR_VAR 0 10
11611: PUSH
11612: LD_VAR 0 10
11616: PUSH
11617: LD_REAL  1.20000000000000E+0000
11620: MUL
11621: ST_TO_ADDR
// end ; unit_building :
11622: GO 11636
11624: LD_INT 3
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11635
11632: POP
// ; end ;
11633: GO 11636
11635: POP
// for j = 1 to 3 do
11636: LD_ADDR_VAR 0 7
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 3
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11703
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11652: LD_ADDR_VAR 0 5
11656: PUSH
11657: LD_VAR 0 5
11661: PPUSH
11662: LD_VAR 0 7
11666: PPUSH
11667: LD_VAR 0 5
11671: PUSH
11672: LD_VAR 0 7
11676: ARRAY
11677: PUSH
11678: LD_VAR 0 9
11682: PUSH
11683: LD_VAR 0 7
11687: ARRAY
11688: PUSH
11689: LD_VAR 0 10
11693: MUL
11694: PLUS
11695: PPUSH
11696: CALL_OW 1
11700: ST_TO_ADDR
11701: GO 11649
11703: POP
11704: POP
// end ;
11705: GO 10178
11707: POP
11708: POP
// result := Replace ( result , 4 , tmp ) ;
11709: LD_ADDR_VAR 0 5
11713: PUSH
11714: LD_VAR 0 5
11718: PPUSH
11719: LD_INT 4
11721: PPUSH
11722: LD_VAR 0 8
11726: PPUSH
11727: CALL_OW 1
11731: ST_TO_ADDR
// end ;
11732: LD_VAR 0 5
11736: RET
// export function DangerAtRange ( unit , range ) ; begin
11737: LD_INT 0
11739: PPUSH
// if not unit then
11740: LD_VAR 0 1
11744: NOT
11745: IFFALSE 11749
// exit ;
11747: GO 11794
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11749: LD_ADDR_VAR 0 3
11753: PUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL_OW 255
11763: PPUSH
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 250
11773: PPUSH
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 251
11783: PPUSH
11784: LD_VAR 0 2
11788: PPUSH
11789: CALL 10028 0 4
11793: ST_TO_ADDR
// end ;
11794: LD_VAR 0 3
11798: RET
// export function DangerInArea ( side , area ) ; begin
11799: LD_INT 0
11801: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11802: LD_ADDR_VAR 0 3
11806: PUSH
11807: LD_VAR 0 2
11811: PPUSH
11812: LD_INT 81
11814: PUSH
11815: LD_VAR 0 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PPUSH
11824: CALL_OW 70
11828: ST_TO_ADDR
// end ;
11829: LD_VAR 0 3
11833: RET
// export function IsExtension ( b ) ; begin
11834: LD_INT 0
11836: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11837: LD_ADDR_VAR 0 2
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 23
11849: PUSH
11850: LD_INT 20
11852: PUSH
11853: LD_INT 22
11855: PUSH
11856: LD_INT 17
11858: PUSH
11859: LD_INT 24
11861: PUSH
11862: LD_INT 21
11864: PUSH
11865: LD_INT 19
11867: PUSH
11868: LD_INT 16
11870: PUSH
11871: LD_INT 25
11873: PUSH
11874: LD_INT 18
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: IN
11889: ST_TO_ADDR
// end ;
11890: LD_VAR 0 2
11894: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11895: LD_INT 0
11897: PPUSH
11898: PPUSH
11899: PPUSH
// result := [ ] ;
11900: LD_ADDR_VAR 0 4
11904: PUSH
11905: EMPTY
11906: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11907: LD_ADDR_VAR 0 5
11911: PUSH
11912: LD_VAR 0 2
11916: PPUSH
11917: LD_INT 21
11919: PUSH
11920: LD_INT 3
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL_OW 70
11931: ST_TO_ADDR
// if not tmp then
11932: LD_VAR 0 5
11936: NOT
11937: IFFALSE 11941
// exit ;
11939: GO 12005
// if checkLink then
11941: LD_VAR 0 3
11945: IFFALSE 11995
// begin for i in tmp do
11947: LD_ADDR_VAR 0 6
11951: PUSH
11952: LD_VAR 0 5
11956: PUSH
11957: FOR_IN
11958: IFFALSE 11993
// if GetBase ( i ) <> base then
11960: LD_VAR 0 6
11964: PPUSH
11965: CALL_OW 274
11969: PUSH
11970: LD_VAR 0 1
11974: NONEQUAL
11975: IFFALSE 11991
// ComLinkToBase ( base , i ) ;
11977: LD_VAR 0 1
11981: PPUSH
11982: LD_VAR 0 6
11986: PPUSH
11987: CALL_OW 169
11991: GO 11957
11993: POP
11994: POP
// end ; result := tmp ;
11995: LD_ADDR_VAR 0 4
11999: PUSH
12000: LD_VAR 0 5
12004: ST_TO_ADDR
// end ;
12005: LD_VAR 0 4
12009: RET
// export function ComComplete ( units , b ) ; var i ; begin
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
// if not units then
12014: LD_VAR 0 1
12018: NOT
12019: IFFALSE 12023
// exit ;
12021: GO 12113
// for i in units do
12023: LD_ADDR_VAR 0 4
12027: PUSH
12028: LD_VAR 0 1
12032: PUSH
12033: FOR_IN
12034: IFFALSE 12111
// if BuildingStatus ( b ) = bs_build then
12036: LD_VAR 0 2
12040: PPUSH
12041: CALL_OW 461
12045: PUSH
12046: LD_INT 1
12048: EQUAL
12049: IFFALSE 12109
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12051: LD_VAR 0 4
12055: PPUSH
12056: LD_STRING h
12058: PUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: CALL_OW 250
12068: PUSH
12069: LD_VAR 0 2
12073: PPUSH
12074: CALL_OW 251
12078: PUSH
12079: LD_VAR 0 2
12083: PUSH
12084: LD_INT 0
12086: PUSH
12087: LD_INT 0
12089: PUSH
12090: LD_INT 0
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: PPUSH
12105: CALL_OW 446
12109: GO 12033
12111: POP
12112: POP
// end ;
12113: LD_VAR 0 3
12117: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12118: LD_INT 0
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12126: LD_VAR 0 1
12130: NOT
12131: IFTRUE 12148
12133: PUSH
12134: LD_VAR 0 1
12138: PPUSH
12139: CALL_OW 263
12143: PUSH
12144: LD_INT 2
12146: NONEQUAL
12147: OR
12148: IFFALSE 12152
// exit ;
12150: GO 12468
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12152: LD_ADDR_VAR 0 6
12156: PUSH
12157: LD_INT 22
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 255
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 36
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 34
12189: PUSH
12190: LD_INT 31
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: ST_TO_ADDR
// if not tmp then
12211: LD_VAR 0 6
12215: NOT
12216: IFFALSE 12220
// exit ;
12218: GO 12468
// result := [ ] ;
12220: LD_ADDR_VAR 0 2
12224: PUSH
12225: EMPTY
12226: ST_TO_ADDR
// for i in tmp do
12227: LD_ADDR_VAR 0 3
12231: PUSH
12232: LD_VAR 0 6
12236: PUSH
12237: FOR_IN
12238: IFFALSE 12309
// begin t := UnitsInside ( i ) ;
12240: LD_ADDR_VAR 0 4
12244: PUSH
12245: LD_VAR 0 3
12249: PPUSH
12250: CALL_OW 313
12254: ST_TO_ADDR
// if t then
12255: LD_VAR 0 4
12259: IFFALSE 12307
// for j in t do
12261: LD_ADDR_VAR 0 7
12265: PUSH
12266: LD_VAR 0 4
12270: PUSH
12271: FOR_IN
12272: IFFALSE 12305
// result := Replace ( result , result + 1 , j ) ;
12274: LD_ADDR_VAR 0 2
12278: PUSH
12279: LD_VAR 0 2
12283: PPUSH
12284: LD_VAR 0 2
12288: PUSH
12289: LD_INT 1
12291: PLUS
12292: PPUSH
12293: LD_VAR 0 7
12297: PPUSH
12298: CALL_OW 1
12302: ST_TO_ADDR
12303: GO 12271
12305: POP
12306: POP
// end ;
12307: GO 12237
12309: POP
12310: POP
// if not result then
12311: LD_VAR 0 2
12315: NOT
12316: IFFALSE 12320
// exit ;
12318: GO 12468
// mech := result [ 1 ] ;
12320: LD_ADDR_VAR 0 5
12324: PUSH
12325: LD_VAR 0 2
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: ST_TO_ADDR
// if result > 1 then
12334: LD_VAR 0 2
12338: PUSH
12339: LD_INT 1
12341: GREATER
12342: IFFALSE 12454
// begin for i = 2 to result do
12344: LD_ADDR_VAR 0 3
12348: PUSH
12349: DOUBLE
12350: LD_INT 2
12352: DEC
12353: ST_TO_ADDR
12354: LD_VAR 0 2
12358: PUSH
12359: FOR_TO
12360: IFFALSE 12452
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12362: LD_ADDR_VAR 0 4
12366: PUSH
12367: LD_VAR 0 2
12371: PUSH
12372: LD_VAR 0 3
12376: ARRAY
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: CALL_OW 259
12385: PUSH
12386: LD_VAR 0 2
12390: PUSH
12391: LD_VAR 0 3
12395: ARRAY
12396: PPUSH
12397: CALL_OW 432
12401: MINUS
12402: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12403: LD_VAR 0 4
12407: PUSH
12408: LD_VAR 0 5
12412: PPUSH
12413: LD_INT 3
12415: PPUSH
12416: CALL_OW 259
12420: PUSH
12421: LD_VAR 0 5
12425: PPUSH
12426: CALL_OW 432
12430: MINUS
12431: GREATEREQUAL
12432: IFFALSE 12450
// mech := result [ i ] ;
12434: LD_ADDR_VAR 0 5
12438: PUSH
12439: LD_VAR 0 2
12443: PUSH
12444: LD_VAR 0 3
12448: ARRAY
12449: ST_TO_ADDR
// end ;
12450: GO 12359
12452: POP
12453: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12454: LD_VAR 0 1
12458: PPUSH
12459: LD_VAR 0 5
12463: PPUSH
12464: CALL_OW 135
// end ;
12468: LD_VAR 0 2
12472: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12473: LD_INT 0
12475: PPUSH
12476: PPUSH
12477: PPUSH
12478: PPUSH
12479: PPUSH
12480: PPUSH
12481: PPUSH
12482: PPUSH
12483: PPUSH
12484: PPUSH
12485: PPUSH
12486: PPUSH
12487: PPUSH
// result := [ ] ;
12488: LD_ADDR_VAR 0 7
12492: PUSH
12493: EMPTY
12494: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 266
12504: PUSH
12505: LD_INT 0
12507: PUSH
12508: LD_INT 1
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: IN
12515: NOT
12516: IFFALSE 12520
// exit ;
12518: GO 14160
// if name then
12520: LD_VAR 0 3
12524: IFFALSE 12540
// SetBName ( base_dep , name ) ;
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: CALL_OW 500
// base := GetBase ( base_dep ) ;
12540: LD_ADDR_VAR 0 15
12544: PUSH
12545: LD_VAR 0 1
12549: PPUSH
12550: CALL_OW 274
12554: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12555: LD_ADDR_VAR 0 16
12559: PUSH
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 255
12569: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12570: LD_ADDR_VAR 0 17
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: CALL_OW 248
12584: ST_TO_ADDR
// if sources then
12585: LD_VAR 0 5
12589: IFFALSE 12636
// for i = 1 to 3 do
12591: LD_ADDR_VAR 0 8
12595: PUSH
12596: DOUBLE
12597: LD_INT 1
12599: DEC
12600: ST_TO_ADDR
12601: LD_INT 3
12603: PUSH
12604: FOR_TO
12605: IFFALSE 12634
// AddResourceType ( base , i , sources [ i ] ) ;
12607: LD_VAR 0 15
12611: PPUSH
12612: LD_VAR 0 8
12616: PPUSH
12617: LD_VAR 0 5
12621: PUSH
12622: LD_VAR 0 8
12626: ARRAY
12627: PPUSH
12628: CALL_OW 276
12632: GO 12604
12634: POP
12635: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12636: LD_ADDR_VAR 0 18
12640: PUSH
12641: LD_VAR 0 15
12645: PPUSH
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL 11895 0 3
12658: ST_TO_ADDR
// InitHc ;
12659: CALL_OW 19
// InitUc ;
12663: CALL_OW 18
// uc_side := side ;
12667: LD_ADDR_OWVAR 20
12671: PUSH
12672: LD_VAR 0 16
12676: ST_TO_ADDR
// uc_nation := nation ;
12677: LD_ADDR_OWVAR 21
12681: PUSH
12682: LD_VAR 0 17
12686: ST_TO_ADDR
// if buildings then
12687: LD_VAR 0 18
12691: IFFALSE 14019
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12693: LD_ADDR_VAR 0 19
12697: PUSH
12698: LD_VAR 0 18
12702: PPUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 30
12708: PUSH
12709: LD_INT 29
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 30
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 72
12735: ST_TO_ADDR
// if tmp then
12736: LD_VAR 0 19
12740: IFFALSE 12788
// for i in tmp do
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_VAR 0 19
12751: PUSH
12752: FOR_IN
12753: IFFALSE 12786
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12755: LD_VAR 0 8
12759: PPUSH
12760: CALL_OW 250
12764: PPUSH
12765: LD_VAR 0 8
12769: PPUSH
12770: CALL_OW 251
12774: PPUSH
12775: LD_VAR 0 16
12779: PPUSH
12780: CALL_OW 441
12784: GO 12752
12786: POP
12787: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12788: LD_VAR 0 18
12792: PPUSH
12793: LD_INT 2
12795: PUSH
12796: LD_INT 30
12798: PUSH
12799: LD_INT 32
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 30
12808: PUSH
12809: LD_INT 33
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: PPUSH
12821: CALL_OW 72
12825: IFFALSE 12913
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12827: LD_ADDR_VAR 0 8
12831: PUSH
12832: LD_VAR 0 18
12836: PPUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 30
12842: PUSH
12843: LD_INT 32
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 30
12852: PUSH
12853: LD_INT 33
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 72
12869: PUSH
12870: FOR_IN
12871: IFFALSE 12911
// begin if not GetBWeapon ( i ) then
12873: LD_VAR 0 8
12877: PPUSH
12878: CALL_OW 269
12882: NOT
12883: IFFALSE 12909
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12885: LD_VAR 0 8
12889: PPUSH
12890: LD_VAR 0 8
12894: PPUSH
12895: LD_VAR 0 2
12899: PPUSH
12900: CALL 14165 0 2
12904: PPUSH
12905: CALL_OW 431
// end ;
12909: GO 12870
12911: POP
12912: POP
// end ; for i = 1 to personel do
12913: LD_ADDR_VAR 0 8
12917: PUSH
12918: DOUBLE
12919: LD_INT 1
12921: DEC
12922: ST_TO_ADDR
12923: LD_VAR 0 6
12927: PUSH
12928: FOR_TO
12929: IFFALSE 13999
// begin if i > 4 then
12931: LD_VAR 0 8
12935: PUSH
12936: LD_INT 4
12938: GREATER
12939: IFFALSE 12943
// break ;
12941: GO 13999
// case i of 1 :
12943: LD_VAR 0 8
12947: PUSH
12948: LD_INT 1
12950: DOUBLE
12951: EQUAL
12952: IFTRUE 12956
12954: GO 13036
12956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12957: LD_ADDR_VAR 0 12
12961: PUSH
12962: LD_VAR 0 18
12966: PPUSH
12967: LD_INT 22
12969: PUSH
12970: LD_VAR 0 16
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 58
12981: PUSH
12982: EMPTY
12983: LIST
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: LD_INT 30
12990: PUSH
12991: LD_INT 32
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 30
13000: PUSH
13001: LD_INT 4
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 5
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: ST_TO_ADDR
13034: GO 13258
13036: LD_INT 2
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13106
13044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13045: LD_ADDR_VAR 0 12
13049: PUSH
13050: LD_VAR 0 18
13054: PPUSH
13055: LD_INT 22
13057: PUSH
13058: LD_VAR 0 16
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: LD_INT 30
13072: PUSH
13073: LD_INT 0
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 30
13082: PUSH
13083: LD_INT 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 72
13103: ST_TO_ADDR
13104: GO 13258
13106: LD_INT 3
13108: DOUBLE
13109: EQUAL
13110: IFTRUE 13114
13112: GO 13176
13114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13115: LD_ADDR_VAR 0 12
13119: PUSH
13120: LD_VAR 0 18
13124: PPUSH
13125: LD_INT 22
13127: PUSH
13128: LD_VAR 0 16
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 2
13139: PUSH
13140: LD_INT 30
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 30
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 72
13173: ST_TO_ADDR
13174: GO 13258
13176: LD_INT 4
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13257
13184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13185: LD_ADDR_VAR 0 12
13189: PUSH
13190: LD_VAR 0 18
13194: PPUSH
13195: LD_INT 22
13197: PUSH
13198: LD_VAR 0 16
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 2
13209: PUSH
13210: LD_INT 30
13212: PUSH
13213: LD_INT 6
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 30
13222: PUSH
13223: LD_INT 7
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 30
13232: PUSH
13233: LD_INT 8
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PPUSH
13250: CALL_OW 72
13254: ST_TO_ADDR
13255: GO 13258
13257: POP
// if i = 1 then
13258: LD_VAR 0 8
13262: PUSH
13263: LD_INT 1
13265: EQUAL
13266: IFFALSE 13377
// begin tmp := [ ] ;
13268: LD_ADDR_VAR 0 19
13272: PUSH
13273: EMPTY
13274: ST_TO_ADDR
// for j in f do
13275: LD_ADDR_VAR 0 9
13279: PUSH
13280: LD_VAR 0 12
13284: PUSH
13285: FOR_IN
13286: IFFALSE 13359
// if GetBType ( j ) = b_bunker then
13288: LD_VAR 0 9
13292: PPUSH
13293: CALL_OW 266
13297: PUSH
13298: LD_INT 32
13300: EQUAL
13301: IFFALSE 13328
// tmp := Insert ( tmp , 1 , j ) else
13303: LD_ADDR_VAR 0 19
13307: PUSH
13308: LD_VAR 0 19
13312: PPUSH
13313: LD_INT 1
13315: PPUSH
13316: LD_VAR 0 9
13320: PPUSH
13321: CALL_OW 2
13325: ST_TO_ADDR
13326: GO 13357
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13328: LD_ADDR_VAR 0 19
13332: PUSH
13333: LD_VAR 0 19
13337: PPUSH
13338: LD_VAR 0 19
13342: PUSH
13343: LD_INT 1
13345: PLUS
13346: PPUSH
13347: LD_VAR 0 9
13351: PPUSH
13352: CALL_OW 2
13356: ST_TO_ADDR
13357: GO 13285
13359: POP
13360: POP
// if tmp then
13361: LD_VAR 0 19
13365: IFFALSE 13377
// f := tmp ;
13367: LD_ADDR_VAR 0 12
13371: PUSH
13372: LD_VAR 0 19
13376: ST_TO_ADDR
// end ; x := personel [ i ] ;
13377: LD_ADDR_VAR 0 13
13381: PUSH
13382: LD_VAR 0 6
13386: PUSH
13387: LD_VAR 0 8
13391: ARRAY
13392: ST_TO_ADDR
// if x = - 1 then
13393: LD_VAR 0 13
13397: PUSH
13398: LD_INT 1
13400: NEG
13401: EQUAL
13402: IFFALSE 13613
// begin for j in f do
13404: LD_ADDR_VAR 0 9
13408: PUSH
13409: LD_VAR 0 12
13413: PUSH
13414: FOR_IN
13415: IFFALSE 13609
// repeat InitHc ;
13417: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13421: LD_VAR 0 9
13425: PPUSH
13426: CALL_OW 266
13430: PUSH
13431: LD_INT 5
13433: EQUAL
13434: IFFALSE 13504
// begin if UnitsInside ( j ) < 3 then
13436: LD_VAR 0 9
13440: PPUSH
13441: CALL_OW 313
13445: PUSH
13446: LD_INT 3
13448: LESS
13449: IFFALSE 13485
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13451: LD_INT 0
13453: PPUSH
13454: LD_INT 5
13456: PUSH
13457: LD_INT 8
13459: PUSH
13460: LD_INT 9
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: LD_VAR 0 17
13472: ARRAY
13473: PPUSH
13474: LD_VAR 0 4
13478: PPUSH
13479: CALL_OW 380
13483: GO 13502
// PrepareHuman ( false , i , skill ) ;
13485: LD_INT 0
13487: PPUSH
13488: LD_VAR 0 8
13492: PPUSH
13493: LD_VAR 0 4
13497: PPUSH
13498: CALL_OW 380
// end else
13502: GO 13521
// PrepareHuman ( false , i , skill ) ;
13504: LD_INT 0
13506: PPUSH
13507: LD_VAR 0 8
13511: PPUSH
13512: LD_VAR 0 4
13516: PPUSH
13517: CALL_OW 380
// un := CreateHuman ;
13521: LD_ADDR_VAR 0 14
13525: PUSH
13526: CALL_OW 44
13530: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13531: LD_ADDR_VAR 0 7
13535: PUSH
13536: LD_VAR 0 7
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: LD_VAR 0 14
13548: PPUSH
13549: CALL_OW 2
13553: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13554: LD_VAR 0 14
13558: PPUSH
13559: LD_VAR 0 9
13563: PPUSH
13564: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13568: LD_VAR 0 9
13572: PPUSH
13573: CALL_OW 313
13577: PUSH
13578: LD_INT 6
13580: EQUAL
13581: IFTRUE 13605
13583: PUSH
13584: LD_VAR 0 9
13588: PPUSH
13589: CALL_OW 266
13593: PUSH
13594: LD_INT 32
13596: PUSH
13597: LD_INT 31
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: IN
13604: OR
13605: IFFALSE 13417
13607: GO 13414
13609: POP
13610: POP
// end else
13611: GO 13997
// for j = 1 to x do
13613: LD_ADDR_VAR 0 9
13617: PUSH
13618: DOUBLE
13619: LD_INT 1
13621: DEC
13622: ST_TO_ADDR
13623: LD_VAR 0 13
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13995
// begin InitHc ;
13631: CALL_OW 19
// if not f then
13635: LD_VAR 0 12
13639: NOT
13640: IFFALSE 13729
// begin PrepareHuman ( false , i , skill ) ;
13642: LD_INT 0
13644: PPUSH
13645: LD_VAR 0 8
13649: PPUSH
13650: LD_VAR 0 4
13654: PPUSH
13655: CALL_OW 380
// un := CreateHuman ;
13659: LD_ADDR_VAR 0 14
13663: PUSH
13664: CALL_OW 44
13668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13669: LD_ADDR_VAR 0 7
13673: PUSH
13674: LD_VAR 0 7
13678: PPUSH
13679: LD_INT 1
13681: PPUSH
13682: LD_VAR 0 14
13686: PPUSH
13687: CALL_OW 2
13691: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13692: LD_VAR 0 14
13696: PPUSH
13697: LD_VAR 0 1
13701: PPUSH
13702: CALL_OW 250
13706: PPUSH
13707: LD_VAR 0 1
13711: PPUSH
13712: CALL_OW 251
13716: PPUSH
13717: LD_INT 10
13719: PPUSH
13720: LD_INT 0
13722: PPUSH
13723: CALL_OW 50
// continue ;
13727: GO 13628
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13729: LD_VAR 0 12
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PPUSH
13738: CALL_OW 313
13742: IFFALSE 13770
13744: PUSH
13745: LD_VAR 0 12
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 266
13758: PUSH
13759: LD_INT 32
13761: PUSH
13762: LD_INT 31
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: IN
13769: AND
13770: IFTRUE 13791
13772: PUSH
13773: LD_VAR 0 12
13777: PUSH
13778: LD_INT 1
13780: ARRAY
13781: PPUSH
13782: CALL_OW 313
13786: PUSH
13787: LD_INT 6
13789: EQUAL
13790: OR
13791: IFFALSE 13811
// f := Delete ( f , 1 ) ;
13793: LD_ADDR_VAR 0 12
13797: PUSH
13798: LD_VAR 0 12
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 3
13810: ST_TO_ADDR
// if not f then
13811: LD_VAR 0 12
13815: NOT
13816: IFFALSE 13834
// begin x := x + 2 ;
13818: LD_ADDR_VAR 0 13
13822: PUSH
13823: LD_VAR 0 13
13827: PUSH
13828: LD_INT 2
13830: PLUS
13831: ST_TO_ADDR
// continue ;
13832: GO 13628
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13834: LD_VAR 0 12
13838: PUSH
13839: LD_INT 1
13841: ARRAY
13842: PPUSH
13843: CALL_OW 266
13847: PUSH
13848: LD_INT 5
13850: EQUAL
13851: IFFALSE 13925
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13853: LD_VAR 0 12
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: CALL_OW 313
13866: PUSH
13867: LD_INT 3
13869: LESS
13870: IFFALSE 13906
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13872: LD_INT 0
13874: PPUSH
13875: LD_INT 5
13877: PUSH
13878: LD_INT 8
13880: PUSH
13881: LD_INT 9
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_VAR 0 17
13893: ARRAY
13894: PPUSH
13895: LD_VAR 0 4
13899: PPUSH
13900: CALL_OW 380
13904: GO 13923
// PrepareHuman ( false , i , skill ) ;
13906: LD_INT 0
13908: PPUSH
13909: LD_VAR 0 8
13913: PPUSH
13914: LD_VAR 0 4
13918: PPUSH
13919: CALL_OW 380
// end else
13923: GO 13942
// PrepareHuman ( false , i , skill ) ;
13925: LD_INT 0
13927: PPUSH
13928: LD_VAR 0 8
13932: PPUSH
13933: LD_VAR 0 4
13937: PPUSH
13938: CALL_OW 380
// un := CreateHuman ;
13942: LD_ADDR_VAR 0 14
13946: PUSH
13947: CALL_OW 44
13951: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13952: LD_ADDR_VAR 0 7
13956: PUSH
13957: LD_VAR 0 7
13961: PPUSH
13962: LD_INT 1
13964: PPUSH
13965: LD_VAR 0 14
13969: PPUSH
13970: CALL_OW 2
13974: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13975: LD_VAR 0 14
13979: PPUSH
13980: LD_VAR 0 12
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: CALL_OW 52
// end ;
13993: GO 13628
13995: POP
13996: POP
// end ;
13997: GO 12928
13999: POP
14000: POP
// result := result ^ buildings ;
14001: LD_ADDR_VAR 0 7
14005: PUSH
14006: LD_VAR 0 7
14010: PUSH
14011: LD_VAR 0 18
14015: ADD
14016: ST_TO_ADDR
// end else
14017: GO 14160
// begin for i = 1 to personel do
14019: LD_ADDR_VAR 0 8
14023: PUSH
14024: DOUBLE
14025: LD_INT 1
14027: DEC
14028: ST_TO_ADDR
14029: LD_VAR 0 6
14033: PUSH
14034: FOR_TO
14035: IFFALSE 14158
// begin if i > 4 then
14037: LD_VAR 0 8
14041: PUSH
14042: LD_INT 4
14044: GREATER
14045: IFFALSE 14049
// break ;
14047: GO 14158
// x := personel [ i ] ;
14049: LD_ADDR_VAR 0 13
14053: PUSH
14054: LD_VAR 0 6
14058: PUSH
14059: LD_VAR 0 8
14063: ARRAY
14064: ST_TO_ADDR
// if x = - 1 then
14065: LD_VAR 0 13
14069: PUSH
14070: LD_INT 1
14072: NEG
14073: EQUAL
14074: IFFALSE 14078
// continue ;
14076: GO 14034
// PrepareHuman ( false , i , skill ) ;
14078: LD_INT 0
14080: PPUSH
14081: LD_VAR 0 8
14085: PPUSH
14086: LD_VAR 0 4
14090: PPUSH
14091: CALL_OW 380
// un := CreateHuman ;
14095: LD_ADDR_VAR 0 14
14099: PUSH
14100: CALL_OW 44
14104: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14105: LD_VAR 0 14
14109: PPUSH
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 250
14119: PPUSH
14120: LD_VAR 0 1
14124: PPUSH
14125: CALL_OW 251
14129: PPUSH
14130: LD_INT 10
14132: PPUSH
14133: LD_INT 0
14135: PPUSH
14136: CALL_OW 50
// result := result ^ un ;
14140: LD_ADDR_VAR 0 7
14144: PUSH
14145: LD_VAR 0 7
14149: PUSH
14150: LD_VAR 0 14
14154: ADD
14155: ST_TO_ADDR
// end ;
14156: GO 14034
14158: POP
14159: POP
// end ; end ;
14160: LD_VAR 0 7
14164: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14165: LD_INT 0
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
14171: PPUSH
14172: PPUSH
14173: PPUSH
14174: PPUSH
14175: PPUSH
14176: PPUSH
14177: PPUSH
14178: PPUSH
14179: PPUSH
14180: PPUSH
14181: PPUSH
14182: PPUSH
// result := false ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_INT 0
14190: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14191: LD_VAR 0 1
14195: NOT
14196: IFTRUE 14221
14198: PUSH
14199: LD_VAR 0 1
14203: PPUSH
14204: CALL_OW 266
14208: PUSH
14209: LD_INT 32
14211: PUSH
14212: LD_INT 33
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: IN
14219: NOT
14220: OR
14221: IFFALSE 14225
// exit ;
14223: GO 15360
// nat := GetNation ( tower ) ;
14225: LD_ADDR_VAR 0 12
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 248
14239: ST_TO_ADDR
// side := GetSide ( tower ) ;
14240: LD_ADDR_VAR 0 16
14244: PUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 255
14254: ST_TO_ADDR
// x := GetX ( tower ) ;
14255: LD_ADDR_VAR 0 10
14259: PUSH
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 250
14269: ST_TO_ADDR
// y := GetY ( tower ) ;
14270: LD_ADDR_VAR 0 11
14274: PUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 251
14284: ST_TO_ADDR
// if not x or not y then
14285: LD_VAR 0 10
14289: NOT
14290: IFTRUE 14299
14292: PUSH
14293: LD_VAR 0 11
14297: NOT
14298: OR
14299: IFFALSE 14303
// exit ;
14301: GO 15360
// weapon := 0 ;
14303: LD_ADDR_VAR 0 18
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// fac_list := [ ] ;
14311: LD_ADDR_VAR 0 17
14315: PUSH
14316: EMPTY
14317: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14318: LD_ADDR_VAR 0 6
14322: PUSH
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 274
14332: PPUSH
14333: LD_VAR 0 2
14337: PPUSH
14338: LD_INT 0
14340: PPUSH
14341: CALL 11895 0 3
14345: PPUSH
14346: LD_INT 30
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 72
14360: ST_TO_ADDR
// if not factories then
14361: LD_VAR 0 6
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 15360
// for i in factories do
14370: LD_ADDR_VAR 0 8
14374: PUSH
14375: LD_VAR 0 6
14379: PUSH
14380: FOR_IN
14381: IFFALSE 14406
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14383: LD_ADDR_VAR 0 17
14387: PUSH
14388: LD_VAR 0 17
14392: PUSH
14393: LD_VAR 0 8
14397: PPUSH
14398: CALL_OW 478
14402: UNION
14403: ST_TO_ADDR
14404: GO 14380
14406: POP
14407: POP
// if not fac_list then
14408: LD_VAR 0 17
14412: NOT
14413: IFFALSE 14417
// exit ;
14415: GO 15360
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14417: LD_ADDR_VAR 0 5
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: LD_INT 5
14427: PUSH
14428: LD_INT 9
14430: PUSH
14431: LD_INT 10
14433: PUSH
14434: LD_INT 6
14436: PUSH
14437: LD_INT 7
14439: PUSH
14440: LD_INT 11
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 27
14454: PUSH
14455: LD_INT 28
14457: PUSH
14458: LD_INT 26
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 43
14472: PUSH
14473: LD_INT 44
14475: PUSH
14476: LD_INT 46
14478: PUSH
14479: LD_INT 45
14481: PUSH
14482: LD_INT 47
14484: PUSH
14485: LD_INT 49
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: LD_VAR 0 12
14505: ARRAY
14506: ST_TO_ADDR
// list := list isect fac_list ;
14507: LD_ADDR_VAR 0 5
14511: PUSH
14512: LD_VAR 0 5
14516: PUSH
14517: LD_VAR 0 17
14521: ISECT
14522: ST_TO_ADDR
// if not list then
14523: LD_VAR 0 5
14527: NOT
14528: IFFALSE 14532
// exit ;
14530: GO 15360
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14532: LD_VAR 0 12
14536: PUSH
14537: LD_INT 3
14539: EQUAL
14540: IFFALSE 14552
14542: PUSH
14543: LD_INT 49
14545: PUSH
14546: LD_VAR 0 5
14550: IN
14551: AND
14552: IFFALSE 14572
14554: PUSH
14555: LD_INT 31
14557: PPUSH
14558: LD_VAR 0 16
14562: PPUSH
14563: CALL_OW 321
14567: PUSH
14568: LD_INT 2
14570: EQUAL
14571: AND
14572: IFFALSE 14632
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14574: LD_INT 22
14576: PUSH
14577: LD_VAR 0 16
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 35
14588: PUSH
14589: LD_INT 49
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 91
14598: PUSH
14599: LD_VAR 0 1
14603: PUSH
14604: LD_INT 10
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PPUSH
14617: CALL_OW 69
14621: NOT
14622: IFFALSE 14632
// weapon := ru_time_lapser ;
14624: LD_ADDR_VAR 0 18
14628: PUSH
14629: LD_INT 49
14631: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14632: LD_VAR 0 12
14636: PUSH
14637: LD_INT 1
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: IN
14647: IFFALSE 14671
14649: PUSH
14650: LD_INT 11
14652: PUSH
14653: LD_VAR 0 5
14657: IN
14658: IFTRUE 14670
14660: PUSH
14661: LD_INT 30
14663: PUSH
14664: LD_VAR 0 5
14668: IN
14669: OR
14670: AND
14671: IFFALSE 14691
14673: PUSH
14674: LD_INT 6
14676: PPUSH
14677: LD_VAR 0 16
14681: PPUSH
14682: CALL_OW 321
14686: PUSH
14687: LD_INT 2
14689: EQUAL
14690: AND
14691: IFFALSE 14858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14693: LD_INT 22
14695: PUSH
14696: LD_VAR 0 16
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: LD_INT 35
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 35
14720: PUSH
14721: LD_INT 30
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 91
14735: PUSH
14736: LD_VAR 0 1
14740: PUSH
14741: LD_INT 18
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: NOT
14759: IFFALSE 14835
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_VAR 0 16
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: LD_INT 30
14779: PUSH
14780: LD_INT 32
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 33
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 91
14804: PUSH
14805: LD_VAR 0 1
14809: PUSH
14810: LD_INT 12
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: PPUSH
14826: CALL_OW 69
14830: PUSH
14831: LD_INT 2
14833: GREATER
14834: AND
14835: IFFALSE 14858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14837: LD_ADDR_VAR 0 18
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_VAR 0 12
14856: ARRAY
14857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14858: LD_VAR 0 18
14862: NOT
14863: IFFALSE 14883
14865: PUSH
14866: LD_INT 40
14868: PPUSH
14869: LD_VAR 0 16
14873: PPUSH
14874: CALL_OW 321
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: AND
14883: IFFALSE 14919
14885: PUSH
14886: LD_INT 7
14888: PUSH
14889: LD_VAR 0 5
14893: IN
14894: IFTRUE 14906
14896: PUSH
14897: LD_INT 28
14899: PUSH
14900: LD_VAR 0 5
14904: IN
14905: OR
14906: IFTRUE 14918
14908: PUSH
14909: LD_INT 45
14911: PUSH
14912: LD_VAR 0 5
14916: IN
14917: OR
14918: AND
14919: IFFALSE 15173
// begin hex := GetHexInfo ( x , y ) ;
14921: LD_ADDR_VAR 0 4
14925: PUSH
14926: LD_VAR 0 10
14930: PPUSH
14931: LD_VAR 0 11
14935: PPUSH
14936: CALL_OW 546
14940: ST_TO_ADDR
// if hex [ 1 ] then
14941: LD_VAR 0 4
14945: PUSH
14946: LD_INT 1
14948: ARRAY
14949: IFFALSE 14953
// exit ;
14951: GO 15360
// height := hex [ 2 ] ;
14953: LD_ADDR_VAR 0 15
14957: PUSH
14958: LD_VAR 0 4
14962: PUSH
14963: LD_INT 2
14965: ARRAY
14966: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14967: LD_ADDR_VAR 0 14
14971: PUSH
14972: LD_INT 0
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 3
14980: PUSH
14981: LD_INT 5
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: ST_TO_ADDR
// for i in tmp do
14990: LD_ADDR_VAR 0 8
14994: PUSH
14995: LD_VAR 0 14
14999: PUSH
15000: FOR_IN
15001: IFFALSE 15171
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15003: LD_ADDR_VAR 0 9
15007: PUSH
15008: LD_VAR 0 10
15012: PPUSH
15013: LD_VAR 0 8
15017: PPUSH
15018: LD_INT 5
15020: PPUSH
15021: CALL_OW 272
15025: PUSH
15026: LD_VAR 0 11
15030: PPUSH
15031: LD_VAR 0 8
15035: PPUSH
15036: LD_INT 5
15038: PPUSH
15039: CALL_OW 273
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15048: LD_VAR 0 9
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PPUSH
15057: LD_VAR 0 9
15061: PUSH
15062: LD_INT 2
15064: ARRAY
15065: PPUSH
15066: CALL_OW 488
15070: IFFALSE 15169
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15072: LD_ADDR_VAR 0 4
15076: PUSH
15077: LD_VAR 0 9
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PPUSH
15086: LD_VAR 0 9
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: PPUSH
15095: CALL_OW 546
15099: ST_TO_ADDR
// if hex [ 1 ] then
15100: LD_VAR 0 4
15104: PUSH
15105: LD_INT 1
15107: ARRAY
15108: IFFALSE 15112
// continue ;
15110: GO 15000
// h := hex [ 2 ] ;
15112: LD_ADDR_VAR 0 13
15116: PUSH
15117: LD_VAR 0 4
15121: PUSH
15122: LD_INT 2
15124: ARRAY
15125: ST_TO_ADDR
// if h + 7 < height then
15126: LD_VAR 0 13
15130: PUSH
15131: LD_INT 7
15133: PLUS
15134: PUSH
15135: LD_VAR 0 15
15139: LESS
15140: IFFALSE 15169
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15142: LD_ADDR_VAR 0 18
15146: PUSH
15147: LD_INT 7
15149: PUSH
15150: LD_INT 28
15152: PUSH
15153: LD_INT 45
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: LD_VAR 0 12
15165: ARRAY
15166: ST_TO_ADDR
// break ;
15167: GO 15171
// end ; end ; end ;
15169: GO 15000
15171: POP
15172: POP
// end ; if not weapon then
15173: LD_VAR 0 18
15177: NOT
15178: IFFALSE 15238
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15180: LD_ADDR_VAR 0 5
15184: PUSH
15185: LD_VAR 0 5
15189: PUSH
15190: LD_INT 11
15192: PUSH
15193: LD_INT 30
15195: PUSH
15196: LD_INT 49
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: DIFF
15204: ST_TO_ADDR
// if not list then
15205: LD_VAR 0 5
15209: NOT
15210: IFFALSE 15214
// exit ;
15212: GO 15360
// weapon := list [ rand ( 1 , list ) ] ;
15214: LD_ADDR_VAR 0 18
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 1
15226: PPUSH
15227: LD_VAR 0 5
15231: PPUSH
15232: CALL_OW 12
15236: ARRAY
15237: ST_TO_ADDR
// end ; if weapon then
15238: LD_VAR 0 18
15242: IFFALSE 15360
// begin tmp := CostOfWeapon ( weapon ) ;
15244: LD_ADDR_VAR 0 14
15248: PUSH
15249: LD_VAR 0 18
15253: PPUSH
15254: CALL_OW 451
15258: ST_TO_ADDR
// j := GetBase ( tower ) ;
15259: LD_ADDR_VAR 0 9
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 274
15273: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15274: LD_VAR 0 9
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: CALL_OW 275
15286: PUSH
15287: LD_VAR 0 14
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: GREATEREQUAL
15296: IFFALSE 15322
15298: PUSH
15299: LD_VAR 0 9
15303: PPUSH
15304: LD_INT 2
15306: PPUSH
15307: CALL_OW 275
15311: PUSH
15312: LD_VAR 0 14
15316: PUSH
15317: LD_INT 2
15319: ARRAY
15320: GREATEREQUAL
15321: AND
15322: IFFALSE 15348
15324: PUSH
15325: LD_VAR 0 9
15329: PPUSH
15330: LD_INT 3
15332: PPUSH
15333: CALL_OW 275
15337: PUSH
15338: LD_VAR 0 14
15342: PUSH
15343: LD_INT 3
15345: ARRAY
15346: GREATEREQUAL
15347: AND
15348: IFFALSE 15360
// result := weapon ;
15350: LD_ADDR_VAR 0 3
15354: PUSH
15355: LD_VAR 0 18
15359: ST_TO_ADDR
// end ; end ;
15360: LD_VAR 0 3
15364: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15365: LD_INT 0
15367: PPUSH
15368: PPUSH
// result := true ;
15369: LD_ADDR_VAR 0 3
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// if array1 = array2 then
15377: LD_VAR 0 1
15381: PUSH
15382: LD_VAR 0 2
15386: EQUAL
15387: IFFALSE 15447
// begin for i = 1 to array1 do
15389: LD_ADDR_VAR 0 4
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_VAR 0 1
15403: PUSH
15404: FOR_TO
15405: IFFALSE 15443
// if array1 [ i ] <> array2 [ i ] then
15407: LD_VAR 0 1
15411: PUSH
15412: LD_VAR 0 4
15416: ARRAY
15417: PUSH
15418: LD_VAR 0 2
15422: PUSH
15423: LD_VAR 0 4
15427: ARRAY
15428: NONEQUAL
15429: IFFALSE 15441
// begin result := false ;
15431: LD_ADDR_VAR 0 3
15435: PUSH
15436: LD_INT 0
15438: ST_TO_ADDR
// break ;
15439: GO 15443
// end ;
15441: GO 15404
15443: POP
15444: POP
// end else
15445: GO 15455
// result := false ;
15447: LD_ADDR_VAR 0 3
15451: PUSH
15452: LD_INT 0
15454: ST_TO_ADDR
// end ;
15455: LD_VAR 0 3
15459: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
// if not array1 or not array2 then
15464: LD_VAR 0 1
15468: NOT
15469: IFTRUE 15478
15471: PUSH
15472: LD_VAR 0 2
15476: NOT
15477: OR
15478: IFFALSE 15482
// exit ;
15480: GO 15546
// result := true ;
15482: LD_ADDR_VAR 0 3
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// for i = 1 to array1 do
15490: LD_ADDR_VAR 0 4
15494: PUSH
15495: DOUBLE
15496: LD_INT 1
15498: DEC
15499: ST_TO_ADDR
15500: LD_VAR 0 1
15504: PUSH
15505: FOR_TO
15506: IFFALSE 15544
// if array1 [ i ] <> array2 [ i ] then
15508: LD_VAR 0 1
15512: PUSH
15513: LD_VAR 0 4
15517: ARRAY
15518: PUSH
15519: LD_VAR 0 2
15523: PUSH
15524: LD_VAR 0 4
15528: ARRAY
15529: NONEQUAL
15530: IFFALSE 15542
// begin result := false ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_INT 0
15539: ST_TO_ADDR
// break ;
15540: GO 15544
// end ;
15542: GO 15505
15544: POP
15545: POP
// end ;
15546: LD_VAR 0 3
15550: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
// pom := GetBase ( fac ) ;
15556: LD_ADDR_VAR 0 5
15560: PUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 274
15570: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15571: LD_ADDR_VAR 0 4
15575: PUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: LD_VAR 0 2
15589: PUSH
15590: LD_INT 2
15592: ARRAY
15593: PPUSH
15594: LD_VAR 0 2
15598: PUSH
15599: LD_INT 3
15601: ARRAY
15602: PPUSH
15603: LD_VAR 0 2
15607: PUSH
15608: LD_INT 4
15610: ARRAY
15611: PPUSH
15612: CALL_OW 449
15616: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: LD_VAR 0 5
15626: PPUSH
15627: LD_INT 1
15629: PPUSH
15630: CALL_OW 275
15634: PUSH
15635: LD_VAR 0 4
15639: PUSH
15640: LD_INT 1
15642: ARRAY
15643: GREATEREQUAL
15644: IFFALSE 15670
15646: PUSH
15647: LD_VAR 0 5
15651: PPUSH
15652: LD_INT 2
15654: PPUSH
15655: CALL_OW 275
15659: PUSH
15660: LD_VAR 0 4
15664: PUSH
15665: LD_INT 2
15667: ARRAY
15668: GREATEREQUAL
15669: AND
15670: IFFALSE 15696
15672: PUSH
15673: LD_VAR 0 5
15677: PPUSH
15678: LD_INT 3
15680: PPUSH
15681: CALL_OW 275
15685: PUSH
15686: LD_VAR 0 4
15690: PUSH
15691: LD_INT 3
15693: ARRAY
15694: GREATEREQUAL
15695: AND
15696: ST_TO_ADDR
// end ;
15697: LD_VAR 0 3
15701: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
// pom := GetBase ( building ) ;
15708: LD_ADDR_VAR 0 3
15712: PUSH
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 274
15722: ST_TO_ADDR
// if not pom then
15723: LD_VAR 0 3
15727: NOT
15728: IFFALSE 15732
// exit ;
15730: GO 15906
// btype := GetBType ( building ) ;
15732: LD_ADDR_VAR 0 5
15736: PUSH
15737: LD_VAR 0 1
15741: PPUSH
15742: CALL_OW 266
15746: ST_TO_ADDR
// if btype = b_armoury then
15747: LD_VAR 0 5
15751: PUSH
15752: LD_INT 4
15754: EQUAL
15755: IFFALSE 15765
// btype := b_barracks ;
15757: LD_ADDR_VAR 0 5
15761: PUSH
15762: LD_INT 5
15764: ST_TO_ADDR
// if btype = b_depot then
15765: LD_VAR 0 5
15769: PUSH
15770: LD_INT 0
15772: EQUAL
15773: IFFALSE 15783
// btype := b_warehouse ;
15775: LD_ADDR_VAR 0 5
15779: PUSH
15780: LD_INT 1
15782: ST_TO_ADDR
// if btype = b_workshop then
15783: LD_VAR 0 5
15787: PUSH
15788: LD_INT 2
15790: EQUAL
15791: IFFALSE 15801
// btype := b_factory ;
15793: LD_ADDR_VAR 0 5
15797: PUSH
15798: LD_INT 3
15800: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15801: LD_ADDR_VAR 0 4
15805: PUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 248
15820: PPUSH
15821: CALL_OW 450
15825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15826: LD_ADDR_VAR 0 2
15830: PUSH
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 275
15843: PUSH
15844: LD_VAR 0 4
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: GREATEREQUAL
15853: IFFALSE 15879
15855: PUSH
15856: LD_VAR 0 3
15860: PPUSH
15861: LD_INT 2
15863: PPUSH
15864: CALL_OW 275
15868: PUSH
15869: LD_VAR 0 4
15873: PUSH
15874: LD_INT 2
15876: ARRAY
15877: GREATEREQUAL
15878: AND
15879: IFFALSE 15905
15881: PUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 3
15889: PPUSH
15890: CALL_OW 275
15894: PUSH
15895: LD_VAR 0 4
15899: PUSH
15900: LD_INT 3
15902: ARRAY
15903: GREATEREQUAL
15904: AND
15905: ST_TO_ADDR
// end ;
15906: LD_VAR 0 2
15910: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15911: LD_INT 0
15913: PPUSH
15914: PPUSH
15915: PPUSH
// pom := GetBase ( building ) ;
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 274
15930: ST_TO_ADDR
// if not pom then
15931: LD_VAR 0 4
15935: NOT
15936: IFFALSE 15940
// exit ;
15938: GO 16045
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15940: LD_ADDR_VAR 0 5
15944: PUSH
15945: LD_VAR 0 2
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 248
15959: PPUSH
15960: CALL_OW 450
15964: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15965: LD_ADDR_VAR 0 3
15969: PUSH
15970: LD_VAR 0 4
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: CALL_OW 275
15982: PUSH
15983: LD_VAR 0 5
15987: PUSH
15988: LD_INT 1
15990: ARRAY
15991: GREATEREQUAL
15992: IFFALSE 16018
15994: PUSH
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_INT 2
16002: PPUSH
16003: CALL_OW 275
16007: PUSH
16008: LD_VAR 0 5
16012: PUSH
16013: LD_INT 2
16015: ARRAY
16016: GREATEREQUAL
16017: AND
16018: IFFALSE 16044
16020: PUSH
16021: LD_VAR 0 4
16025: PPUSH
16026: LD_INT 3
16028: PPUSH
16029: CALL_OW 275
16033: PUSH
16034: LD_VAR 0 5
16038: PUSH
16039: LD_INT 3
16041: ARRAY
16042: GREATEREQUAL
16043: AND
16044: ST_TO_ADDR
// end ;
16045: LD_VAR 0 3
16049: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16050: LD_INT 0
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
// result := false ;
16063: LD_ADDR_VAR 0 8
16067: PUSH
16068: LD_INT 0
16070: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16071: LD_VAR 0 5
16075: NOT
16076: IFTRUE 16085
16078: PUSH
16079: LD_VAR 0 1
16083: NOT
16084: OR
16085: IFTRUE 16094
16087: PUSH
16088: LD_VAR 0 2
16092: NOT
16093: OR
16094: IFTRUE 16103
16096: PUSH
16097: LD_VAR 0 3
16101: NOT
16102: OR
16103: IFFALSE 16107
// exit ;
16105: GO 16933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16107: LD_ADDR_VAR 0 14
16111: PUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: LD_VAR 0 5
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: PPUSH
16141: CALL_OW 248
16145: PPUSH
16146: LD_INT 0
16148: PPUSH
16149: CALL 18214 0 6
16153: ST_TO_ADDR
// if not hexes then
16154: LD_VAR 0 14
16158: NOT
16159: IFFALSE 16163
// exit ;
16161: GO 16933
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16163: LD_ADDR_VAR 0 17
16167: PUSH
16168: LD_VAR 0 5
16172: PPUSH
16173: LD_INT 22
16175: PUSH
16176: LD_VAR 0 13
16180: PPUSH
16181: CALL_OW 255
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: LD_INT 30
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 30
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 72
16226: ST_TO_ADDR
// for i = 1 to hexes do
16227: LD_ADDR_VAR 0 9
16231: PUSH
16232: DOUBLE
16233: LD_INT 1
16235: DEC
16236: ST_TO_ADDR
16237: LD_VAR 0 14
16241: PUSH
16242: FOR_TO
16243: IFFALSE 16931
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16245: LD_ADDR_VAR 0 13
16249: PUSH
16250: LD_VAR 0 14
16254: PUSH
16255: LD_VAR 0 9
16259: ARRAY
16260: PUSH
16261: LD_INT 1
16263: ARRAY
16264: PPUSH
16265: LD_VAR 0 14
16269: PUSH
16270: LD_VAR 0 9
16274: ARRAY
16275: PUSH
16276: LD_INT 2
16278: ARRAY
16279: PPUSH
16280: CALL_OW 428
16284: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16285: LD_VAR 0 14
16289: PUSH
16290: LD_VAR 0 9
16294: ARRAY
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: PPUSH
16300: LD_VAR 0 14
16304: PUSH
16305: LD_VAR 0 9
16309: ARRAY
16310: PUSH
16311: LD_INT 2
16313: ARRAY
16314: PPUSH
16315: CALL_OW 351
16319: IFTRUE 16358
16321: PUSH
16322: LD_VAR 0 14
16326: PUSH
16327: LD_VAR 0 9
16331: ARRAY
16332: PUSH
16333: LD_INT 1
16335: ARRAY
16336: PPUSH
16337: LD_VAR 0 14
16341: PUSH
16342: LD_VAR 0 9
16346: ARRAY
16347: PUSH
16348: LD_INT 2
16350: ARRAY
16351: PPUSH
16352: CALL_OW 488
16356: NOT
16357: OR
16358: IFTRUE 16375
16360: PUSH
16361: LD_VAR 0 13
16365: PPUSH
16366: CALL_OW 247
16370: PUSH
16371: LD_INT 3
16373: EQUAL
16374: OR
16375: IFFALSE 16381
// exit ;
16377: POP
16378: POP
16379: GO 16933
// if not tmp then
16381: LD_VAR 0 13
16385: NOT
16386: IFFALSE 16390
// continue ;
16388: GO 16242
// result := true ;
16390: LD_ADDR_VAR 0 8
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16398: LD_VAR 0 6
16402: IFFALSE 16419
16404: PUSH
16405: LD_VAR 0 13
16409: PPUSH
16410: CALL_OW 247
16414: PUSH
16415: LD_INT 2
16417: EQUAL
16418: AND
16419: IFFALSE 16436
16421: PUSH
16422: LD_VAR 0 13
16426: PPUSH
16427: CALL_OW 263
16431: PUSH
16432: LD_INT 1
16434: EQUAL
16435: AND
16436: IFFALSE 16600
// begin if IsDrivenBy ( tmp ) then
16438: LD_VAR 0 13
16442: PPUSH
16443: CALL_OW 311
16447: IFFALSE 16451
// continue ;
16449: GO 16242
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16451: LD_VAR 0 6
16455: PPUSH
16456: LD_INT 3
16458: PUSH
16459: LD_INT 60
16461: PUSH
16462: EMPTY
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 55
16474: PUSH
16475: EMPTY
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 72
16490: IFFALSE 16598
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16492: LD_ADDR_VAR 0 18
16496: PUSH
16497: LD_VAR 0 6
16501: PPUSH
16502: LD_INT 3
16504: PUSH
16505: LD_INT 60
16507: PUSH
16508: EMPTY
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: LD_INT 55
16520: PUSH
16521: EMPTY
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 72
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: ST_TO_ADDR
// if IsInUnit ( driver ) then
16541: LD_VAR 0 18
16545: PPUSH
16546: CALL_OW 310
16550: IFFALSE 16561
// ComExit ( driver ) ;
16552: LD_VAR 0 18
16556: PPUSH
16557: CALL 42214 0 1
// AddComEnterUnit ( driver , tmp ) ;
16561: LD_VAR 0 18
16565: PPUSH
16566: LD_VAR 0 13
16570: PPUSH
16571: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16575: LD_VAR 0 18
16579: PPUSH
16580: LD_VAR 0 7
16584: PPUSH
16585: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16589: LD_VAR 0 18
16593: PPUSH
16594: CALL_OW 181
// end ; continue ;
16598: GO 16242
// end ; if not cleaners or not tmp in cleaners then
16600: LD_VAR 0 6
16604: NOT
16605: IFTRUE 16620
16607: PUSH
16608: LD_VAR 0 13
16612: PUSH
16613: LD_VAR 0 6
16617: IN
16618: NOT
16619: OR
16620: IFFALSE 16929
// begin if dep then
16622: LD_VAR 0 17
16626: IFFALSE 16762
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16628: LD_ADDR_VAR 0 16
16632: PUSH
16633: LD_VAR 0 17
16637: PUSH
16638: LD_INT 1
16640: ARRAY
16641: PPUSH
16642: CALL_OW 250
16646: PPUSH
16647: LD_VAR 0 17
16651: PUSH
16652: LD_INT 1
16654: ARRAY
16655: PPUSH
16656: CALL_OW 254
16660: PPUSH
16661: LD_INT 5
16663: PPUSH
16664: CALL_OW 272
16668: PUSH
16669: LD_VAR 0 17
16673: PUSH
16674: LD_INT 1
16676: ARRAY
16677: PPUSH
16678: CALL_OW 251
16682: PPUSH
16683: LD_VAR 0 17
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: PPUSH
16692: CALL_OW 254
16696: PPUSH
16697: LD_INT 5
16699: PPUSH
16700: CALL_OW 273
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16709: LD_VAR 0 16
16713: PUSH
16714: LD_INT 1
16716: ARRAY
16717: PPUSH
16718: LD_VAR 0 16
16722: PUSH
16723: LD_INT 2
16725: ARRAY
16726: PPUSH
16727: CALL_OW 488
16731: IFFALSE 16762
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16733: LD_VAR 0 13
16737: PPUSH
16738: LD_VAR 0 16
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: LD_VAR 0 16
16751: PUSH
16752: LD_INT 2
16754: ARRAY
16755: PPUSH
16756: CALL_OW 111
// continue ;
16760: GO 16242
// end ; end ; r := GetDir ( tmp ) ;
16762: LD_ADDR_VAR 0 15
16766: PUSH
16767: LD_VAR 0 13
16771: PPUSH
16772: CALL_OW 254
16776: ST_TO_ADDR
// if r = 5 then
16777: LD_VAR 0 15
16781: PUSH
16782: LD_INT 5
16784: EQUAL
16785: IFFALSE 16795
// r := 0 ;
16787: LD_ADDR_VAR 0 15
16791: PUSH
16792: LD_INT 0
16794: ST_TO_ADDR
// for j = r to 5 do
16795: LD_ADDR_VAR 0 10
16799: PUSH
16800: DOUBLE
16801: LD_VAR 0 15
16805: DEC
16806: ST_TO_ADDR
16807: LD_INT 5
16809: PUSH
16810: FOR_TO
16811: IFFALSE 16927
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16813: LD_ADDR_VAR 0 11
16817: PUSH
16818: LD_VAR 0 13
16822: PPUSH
16823: CALL_OW 250
16827: PPUSH
16828: LD_VAR 0 10
16832: PPUSH
16833: LD_INT 2
16835: PPUSH
16836: CALL_OW 272
16840: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16841: LD_ADDR_VAR 0 12
16845: PUSH
16846: LD_VAR 0 13
16850: PPUSH
16851: CALL_OW 251
16855: PPUSH
16856: LD_VAR 0 10
16860: PPUSH
16861: LD_INT 2
16863: PPUSH
16864: CALL_OW 273
16868: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16869: LD_VAR 0 11
16873: PPUSH
16874: LD_VAR 0 12
16878: PPUSH
16879: CALL_OW 488
16883: IFFALSE 16902
16885: PUSH
16886: LD_VAR 0 11
16890: PPUSH
16891: LD_VAR 0 12
16895: PPUSH
16896: CALL_OW 428
16900: NOT
16901: AND
16902: IFFALSE 16925
// begin ComMoveXY ( tmp , _x , _y ) ;
16904: LD_VAR 0 13
16908: PPUSH
16909: LD_VAR 0 11
16913: PPUSH
16914: LD_VAR 0 12
16918: PPUSH
16919: CALL_OW 111
// break ;
16923: GO 16927
// end ; end ;
16925: GO 16810
16927: POP
16928: POP
// end ; end ;
16929: GO 16242
16931: POP
16932: POP
// end ;
16933: LD_VAR 0 8
16937: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16938: LD_INT 0
16940: PPUSH
// result := true ;
16941: LD_ADDR_VAR 0 3
16945: PUSH
16946: LD_INT 1
16948: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16949: LD_VAR 0 2
16953: PUSH
16954: LD_INT 24
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16968
16960: LD_INT 33
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16993
16968: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_INT 32
16976: PPUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 321
16986: PUSH
16987: LD_INT 2
16989: EQUAL
16990: ST_TO_ADDR
16991: GO 17309
16993: LD_INT 20
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17026
17001: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: LD_INT 6
17009: PPUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 321
17019: PUSH
17020: LD_INT 2
17022: EQUAL
17023: ST_TO_ADDR
17024: GO 17309
17026: LD_INT 22
17028: DOUBLE
17029: EQUAL
17030: IFTRUE 17040
17032: LD_INT 36
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17065
17040: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17041: LD_ADDR_VAR 0 3
17045: PUSH
17046: LD_INT 15
17048: PPUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: CALL_OW 321
17058: PUSH
17059: LD_INT 2
17061: EQUAL
17062: ST_TO_ADDR
17063: GO 17309
17065: LD_INT 30
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17098
17073: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17074: LD_ADDR_VAR 0 3
17078: PUSH
17079: LD_INT 20
17081: PPUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 321
17091: PUSH
17092: LD_INT 2
17094: EQUAL
17095: ST_TO_ADDR
17096: GO 17309
17098: LD_INT 28
17100: DOUBLE
17101: EQUAL
17102: IFTRUE 17112
17104: LD_INT 21
17106: DOUBLE
17107: EQUAL
17108: IFTRUE 17112
17110: GO 17137
17112: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_INT 21
17120: PPUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: CALL_OW 321
17130: PUSH
17131: LD_INT 2
17133: EQUAL
17134: ST_TO_ADDR
17135: GO 17309
17137: LD_INT 16
17139: DOUBLE
17140: EQUAL
17141: IFTRUE 17145
17143: GO 17170
17145: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17146: LD_ADDR_VAR 0 3
17150: PUSH
17151: LD_INT 84
17153: PPUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 321
17163: PUSH
17164: LD_INT 2
17166: EQUAL
17167: ST_TO_ADDR
17168: GO 17309
17170: LD_INT 19
17172: DOUBLE
17173: EQUAL
17174: IFTRUE 17184
17176: LD_INT 23
17178: DOUBLE
17179: EQUAL
17180: IFTRUE 17184
17182: GO 17209
17184: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17185: LD_ADDR_VAR 0 3
17189: PUSH
17190: LD_INT 83
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 321
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: ST_TO_ADDR
17207: GO 17309
17209: LD_INT 17
17211: DOUBLE
17212: EQUAL
17213: IFTRUE 17217
17215: GO 17242
17217: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17218: LD_ADDR_VAR 0 3
17222: PUSH
17223: LD_INT 39
17225: PPUSH
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 321
17235: PUSH
17236: LD_INT 2
17238: EQUAL
17239: ST_TO_ADDR
17240: GO 17309
17242: LD_INT 18
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17275
17250: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_INT 40
17258: PPUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 321
17268: PUSH
17269: LD_INT 2
17271: EQUAL
17272: ST_TO_ADDR
17273: GO 17309
17275: LD_INT 27
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17308
17283: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_INT 35
17291: PPUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 321
17301: PUSH
17302: LD_INT 2
17304: EQUAL
17305: ST_TO_ADDR
17306: GO 17309
17308: POP
// end ;
17309: LD_VAR 0 3
17313: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
// result := false ;
17327: LD_ADDR_VAR 0 6
17331: PUSH
17332: LD_INT 0
17334: ST_TO_ADDR
// if btype = b_depot then
17335: LD_VAR 0 2
17339: PUSH
17340: LD_INT 0
17342: EQUAL
17343: IFFALSE 17355
// begin result := true ;
17345: LD_ADDR_VAR 0 6
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// exit ;
17353: GO 18209
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17355: LD_VAR 0 1
17359: NOT
17360: IFTRUE 17385
17362: PUSH
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 266
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: IN
17383: NOT
17384: OR
17385: IFTRUE 17394
17387: PUSH
17388: LD_VAR 0 2
17392: NOT
17393: OR
17394: IFTRUE 17430
17396: PUSH
17397: LD_VAR 0 5
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: LD_INT 3
17413: PUSH
17414: LD_INT 4
17416: PUSH
17417: LD_INT 5
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: IN
17428: NOT
17429: OR
17430: IFTRUE 17449
17432: PUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: LD_VAR 0 4
17442: PPUSH
17443: CALL_OW 488
17447: NOT
17448: OR
17449: IFFALSE 17453
// exit ;
17451: GO 18209
// side := GetSide ( depot ) ;
17453: LD_ADDR_VAR 0 9
17457: PUSH
17458: LD_VAR 0 1
17462: PPUSH
17463: CALL_OW 255
17467: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17468: LD_VAR 0 9
17472: PPUSH
17473: LD_VAR 0 2
17477: PPUSH
17478: CALL 16938 0 2
17482: NOT
17483: IFFALSE 17487
// exit ;
17485: GO 18209
// pom := GetBase ( depot ) ;
17487: LD_ADDR_VAR 0 10
17491: PUSH
17492: LD_VAR 0 1
17496: PPUSH
17497: CALL_OW 274
17501: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17502: LD_ADDR_VAR 0 11
17506: PUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: LD_VAR 0 1
17516: PPUSH
17517: CALL_OW 248
17521: PPUSH
17522: CALL_OW 450
17526: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17527: LD_VAR 0 10
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: CALL_OW 275
17539: PUSH
17540: LD_VAR 0 11
17544: PUSH
17545: LD_INT 1
17547: ARRAY
17548: GREATEREQUAL
17549: IFFALSE 17575
17551: PUSH
17552: LD_VAR 0 10
17556: PPUSH
17557: LD_INT 2
17559: PPUSH
17560: CALL_OW 275
17564: PUSH
17565: LD_VAR 0 11
17569: PUSH
17570: LD_INT 2
17572: ARRAY
17573: GREATEREQUAL
17574: AND
17575: IFFALSE 17601
17577: PUSH
17578: LD_VAR 0 10
17582: PPUSH
17583: LD_INT 3
17585: PPUSH
17586: CALL_OW 275
17590: PUSH
17591: LD_VAR 0 11
17595: PUSH
17596: LD_INT 3
17598: ARRAY
17599: GREATEREQUAL
17600: AND
17601: NOT
17602: IFFALSE 17606
// exit ;
17604: GO 18209
// if GetBType ( depot ) = b_depot then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 266
17615: PUSH
17616: LD_INT 0
17618: EQUAL
17619: IFFALSE 17631
// dist := 28 else
17621: LD_ADDR_VAR 0 14
17625: PUSH
17626: LD_INT 28
17628: ST_TO_ADDR
17629: GO 17639
// dist := 36 ;
17631: LD_ADDR_VAR 0 14
17635: PUSH
17636: LD_INT 36
17638: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_VAR 0 3
17648: PPUSH
17649: LD_VAR 0 4
17653: PPUSH
17654: CALL_OW 297
17658: PUSH
17659: LD_VAR 0 14
17663: GREATER
17664: IFFALSE 17668
// exit ;
17666: GO 18209
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17668: LD_ADDR_VAR 0 12
17672: PUSH
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_VAR 0 4
17687: PPUSH
17688: LD_VAR 0 5
17692: PPUSH
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 248
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL 18214 0 6
17710: ST_TO_ADDR
// if not hexes then
17711: LD_VAR 0 12
17715: NOT
17716: IFFALSE 17720
// exit ;
17718: GO 18209
// hex := GetHexInfo ( x , y ) ;
17720: LD_ADDR_VAR 0 15
17724: PUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_VAR 0 4
17734: PPUSH
17735: CALL_OW 546
17739: ST_TO_ADDR
// if hex [ 1 ] then
17740: LD_VAR 0 15
17744: PUSH
17745: LD_INT 1
17747: ARRAY
17748: IFFALSE 17752
// exit ;
17750: GO 18209
// height := hex [ 2 ] ;
17752: LD_ADDR_VAR 0 13
17756: PUSH
17757: LD_VAR 0 15
17761: PUSH
17762: LD_INT 2
17764: ARRAY
17765: ST_TO_ADDR
// for i = 1 to hexes do
17766: LD_ADDR_VAR 0 7
17770: PUSH
17771: DOUBLE
17772: LD_INT 1
17774: DEC
17775: ST_TO_ADDR
17776: LD_VAR 0 12
17780: PUSH
17781: FOR_TO
17782: IFFALSE 18126
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17784: LD_VAR 0 12
17788: PUSH
17789: LD_VAR 0 7
17793: ARRAY
17794: PUSH
17795: LD_INT 1
17797: ARRAY
17798: PPUSH
17799: LD_VAR 0 12
17803: PUSH
17804: LD_VAR 0 7
17808: ARRAY
17809: PUSH
17810: LD_INT 2
17812: ARRAY
17813: PPUSH
17814: CALL_OW 488
17818: NOT
17819: IFTRUE 17861
17821: PUSH
17822: LD_VAR 0 12
17826: PUSH
17827: LD_VAR 0 7
17831: ARRAY
17832: PUSH
17833: LD_INT 1
17835: ARRAY
17836: PPUSH
17837: LD_VAR 0 12
17841: PUSH
17842: LD_VAR 0 7
17846: ARRAY
17847: PUSH
17848: LD_INT 2
17850: ARRAY
17851: PPUSH
17852: CALL_OW 428
17856: PUSH
17857: LD_INT 0
17859: GREATER
17860: OR
17861: IFTRUE 17899
17863: PUSH
17864: LD_VAR 0 12
17868: PUSH
17869: LD_VAR 0 7
17873: ARRAY
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: PPUSH
17879: LD_VAR 0 12
17883: PUSH
17884: LD_VAR 0 7
17888: ARRAY
17889: PUSH
17890: LD_INT 2
17892: ARRAY
17893: PPUSH
17894: CALL_OW 351
17898: OR
17899: IFFALSE 17905
// exit ;
17901: POP
17902: POP
17903: GO 18209
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17905: LD_ADDR_VAR 0 8
17909: PUSH
17910: LD_VAR 0 12
17914: PUSH
17915: LD_VAR 0 7
17919: ARRAY
17920: PUSH
17921: LD_INT 1
17923: ARRAY
17924: PPUSH
17925: LD_VAR 0 12
17929: PUSH
17930: LD_VAR 0 7
17934: ARRAY
17935: PUSH
17936: LD_INT 2
17938: ARRAY
17939: PPUSH
17940: CALL_OW 546
17944: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17945: LD_VAR 0 8
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: IFTRUE 17975
17955: PUSH
17956: LD_VAR 0 8
17960: PUSH
17961: LD_INT 2
17963: ARRAY
17964: PUSH
17965: LD_VAR 0 13
17969: PUSH
17970: LD_INT 2
17972: PLUS
17973: GREATER
17974: OR
17975: IFTRUE 17997
17977: PUSH
17978: LD_VAR 0 8
17982: PUSH
17983: LD_INT 2
17985: ARRAY
17986: PUSH
17987: LD_VAR 0 13
17991: PUSH
17992: LD_INT 2
17994: MINUS
17995: LESS
17996: OR
17997: IFTRUE 18065
17999: PUSH
18000: LD_VAR 0 8
18004: PUSH
18005: LD_INT 3
18007: ARRAY
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 8
18014: PUSH
18015: LD_INT 9
18017: PUSH
18018: LD_INT 10
18020: PUSH
18021: LD_INT 11
18023: PUSH
18024: LD_INT 12
18026: PUSH
18027: LD_INT 13
18029: PUSH
18030: LD_INT 16
18032: PUSH
18033: LD_INT 17
18035: PUSH
18036: LD_INT 18
18038: PUSH
18039: LD_INT 19
18041: PUSH
18042: LD_INT 20
18044: PUSH
18045: LD_INT 21
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: IN
18063: NOT
18064: OR
18065: IFTRUE 18078
18067: PUSH
18068: LD_VAR 0 8
18072: PUSH
18073: LD_INT 5
18075: ARRAY
18076: NOT
18077: OR
18078: IFTRUE 18118
18080: PUSH
18081: LD_VAR 0 8
18085: PUSH
18086: LD_INT 6
18088: ARRAY
18089: PUSH
18090: LD_INT 1
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: LD_INT 7
18098: PUSH
18099: LD_INT 9
18101: PUSH
18102: LD_INT 10
18104: PUSH
18105: LD_INT 11
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: IN
18116: NOT
18117: OR
18118: IFFALSE 18124
// exit ;
18120: POP
18121: POP
18122: GO 18209
// end ;
18124: GO 17781
18126: POP
18127: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18128: LD_VAR 0 9
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: LD_VAR 0 4
18142: PPUSH
18143: LD_INT 20
18145: PPUSH
18146: CALL 10028 0 4
18150: PUSH
18151: LD_INT 4
18153: ARRAY
18154: IFFALSE 18158
// exit ;
18156: GO 18209
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18158: LD_VAR 0 2
18162: PUSH
18163: LD_INT 29
18165: PUSH
18166: LD_INT 30
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: IN
18173: IFFALSE 18197
18175: PUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: LD_VAR 0 4
18185: PPUSH
18186: LD_VAR 0 9
18190: PPUSH
18191: CALL_OW 440
18195: NOT
18196: AND
18197: IFFALSE 18201
// exit ;
18199: GO 18209
// result := true ;
18201: LD_ADDR_VAR 0 6
18205: PUSH
18206: LD_INT 1
18208: ST_TO_ADDR
// end ;
18209: LD_VAR 0 6
18213: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18214: LD_INT 0
18216: PPUSH
18217: PPUSH
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
18222: PPUSH
18223: PPUSH
18224: PPUSH
18225: PPUSH
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
18231: PPUSH
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
18273: PPUSH
// result = [ ] ;
18274: LD_ADDR_VAR 0 7
18278: PUSH
18279: EMPTY
18280: ST_TO_ADDR
// temp_list = [ ] ;
18281: LD_ADDR_VAR 0 9
18285: PUSH
18286: EMPTY
18287: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18288: LD_VAR 0 4
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 3
18304: PUSH
18305: LD_INT 4
18307: PUSH
18308: LD_INT 5
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: IN
18319: NOT
18320: IFTRUE 18363
18322: PUSH
18323: LD_VAR 0 1
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: IN
18338: IFFALSE 18362
18340: PUSH
18341: LD_VAR 0 5
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 3
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: LIST
18359: IN
18360: NOT
18361: AND
18362: OR
18363: IFFALSE 18367
// exit ;
18365: GO 36766
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18367: LD_VAR 0 1
18371: PUSH
18372: LD_INT 6
18374: PUSH
18375: LD_INT 7
18377: PUSH
18378: LD_INT 8
18380: PUSH
18381: LD_INT 13
18383: PUSH
18384: LD_INT 12
18386: PUSH
18387: LD_INT 15
18389: PUSH
18390: LD_INT 11
18392: PUSH
18393: LD_INT 14
18395: PUSH
18396: LD_INT 10
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: IN
18410: IFFALSE 18420
// btype = b_lab ;
18412: LD_ADDR_VAR 0 1
18416: PUSH
18417: LD_INT 6
18419: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18420: LD_VAR 0 6
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: LD_INT 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: IN
18439: NOT
18440: IFTRUE 18508
18442: PUSH
18443: LD_VAR 0 1
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: LD_INT 6
18462: PUSH
18463: LD_INT 36
18465: PUSH
18466: LD_INT 4
18468: PUSH
18469: LD_INT 5
18471: PUSH
18472: LD_INT 31
18474: PUSH
18475: LD_INT 32
18477: PUSH
18478: LD_INT 33
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: IN
18494: NOT
18495: IFFALSE 18507
18497: PUSH
18498: LD_VAR 0 6
18502: PUSH
18503: LD_INT 1
18505: EQUAL
18506: AND
18507: OR
18508: IFTRUE 18540
18510: PUSH
18511: LD_VAR 0 1
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: IN
18526: NOT
18527: IFFALSE 18539
18529: PUSH
18530: LD_VAR 0 6
18534: PUSH
18535: LD_INT 2
18537: EQUAL
18538: AND
18539: OR
18540: IFFALSE 18550
// mode = 0 ;
18542: LD_ADDR_VAR 0 6
18546: PUSH
18547: LD_INT 0
18549: ST_TO_ADDR
// case mode of 0 :
18550: LD_VAR 0 6
18554: PUSH
18555: LD_INT 0
18557: DOUBLE
18558: EQUAL
18559: IFTRUE 18563
18561: GO 30016
18563: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18564: LD_ADDR_VAR 0 11
18568: PUSH
18569: LD_INT 0
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 1
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: NEG
18634: PUSH
18635: LD_INT 1
18637: NEG
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: LD_INT 2
18649: NEG
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: LD_INT 2
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: LD_INT 1
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: LD_INT 3
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 0
18720: PUSH
18721: LD_INT 3
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: NEG
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18757: LD_ADDR_VAR 0 12
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 2
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 2
18880: NEG
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 2
18891: NEG
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: NEG
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 3
18914: NEG
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 3
18925: NEG
18926: PUSH
18927: LD_INT 1
18929: NEG
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18953: LD_ADDR_VAR 0 13
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: NEG
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: NEG
19077: PUSH
19078: LD_INT 1
19080: NEG
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 2
19088: NEG
19089: PUSH
19090: LD_INT 2
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: NEG
19101: PUSH
19102: LD_INT 3
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 3
19112: NEG
19113: PUSH
19114: LD_INT 2
19116: NEG
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 3
19124: NEG
19125: PUSH
19126: LD_INT 3
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19152: LD_ADDR_VAR 0 14
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: LD_INT 1
19172: NEG
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: LD_INT 2
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 1
19259: NEG
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 3
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 0
19310: PUSH
19311: LD_INT 3
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: LD_INT 2
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19348: LD_ADDR_VAR 0 15
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: LD_INT 1
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: NEG
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 1
19432: NEG
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 2
19482: NEG
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 3
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 3
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19541: LD_ADDR_VAR 0 16
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 0
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: NEG
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 2
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 2
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 3
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 3
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19734: LD_ADDR_VAR 0 17
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: LD_INT 2
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 2
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 2
19910: NEG
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 2
19921: NEG
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19964: LD_ADDR_VAR 0 18
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: LD_INT 1
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: LD_INT 2
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: LD_INT 2
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 2
20140: NEG
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: NEG
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20194: LD_ADDR_VAR 0 19
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 1
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: LD_INT 2
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: LD_INT 2
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 2
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: NEG
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20424: LD_ADDR_VAR 0 20
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 2
20600: NEG
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: NEG
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20654: LD_ADDR_VAR 0 21
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: LD_INT 0
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 1
20712: NEG
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: LD_INT 2
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 2
20750: NEG
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: LD_INT 1
20761: NEG
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 2
20830: NEG
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: NEG
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20884: LD_ADDR_VAR 0 22
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: LD_INT 1
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 1
20942: NEG
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 1
20965: NEG
20966: PUSH
20967: LD_INT 2
20969: NEG
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 2
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: NEG
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: NEG
21084: PUSH
21085: LD_INT 2
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21114: LD_ADDR_VAR 0 23
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 1
21172: NEG
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 2
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: LD_INT 2
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 2
21325: NEG
21326: PUSH
21327: LD_INT 3
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: LD_INT 3
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: LD_INT 2
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21394: LD_ADDR_VAR 0 24
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 1
21452: NEG
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 2
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: LD_INT 2
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 3
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 3
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21670: LD_ADDR_VAR 0 25
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: LD_INT 2
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 2
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 1
21835: NEG
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 2
21846: NEG
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 2
21857: NEG
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: NEG
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 3
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 3
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21944: LD_ADDR_VAR 0 26
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: LD_INT 2
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 2
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: NEG
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 2
22143: NEG
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22220: LD_ADDR_VAR 0 27
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: NEG
22397: PUSH
22398: LD_INT 0
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 2
22407: NEG
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 1
22431: NEG
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 3
22453: NEG
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 3
22465: NEG
22466: PUSH
22467: LD_INT 2
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22500: LD_ADDR_VAR 0 28
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: LD_INT 2
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: LD_INT 2
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: NEG
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: NEG
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: NEG
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: LD_INT 3
22715: NEG
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: LD_INT 3
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 3
22735: NEG
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 3
22747: NEG
22748: PUSH
22749: LD_INT 2
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22782: LD_ADDR_VAR 0 29
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: NEG
22961: PUSH
22962: LD_INT 2
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: LD_INT 3
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 3
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 3
23026: NEG
23027: PUSH
23028: LD_INT 2
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23061: LD_ADDR_VAR 0 30
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 2
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 2
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 2
23227: NEG
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 2
23238: NEG
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 3
23254: NEG
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: LD_INT 2
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 3
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 3
23304: NEG
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23339: LD_ADDR_VAR 0 31
23343: PUSH
23344: LD_INT 0
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: LD_INT 2
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: NEG
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 3
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: LD_INT 3
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 3
23582: NEG
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23617: LD_ADDR_VAR 0 32
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 2
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 2
23794: NEG
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: LD_INT 3
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: LD_INT 2
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: NEG
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 3
23860: NEG
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23895: LD_ADDR_VAR 0 33
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: LD_INT 2
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: NEG
24086: PUSH
24087: LD_INT 3
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 3
24139: NEG
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24174: LD_ADDR_VAR 0 34
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 2
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 2
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 2
24330: NEG
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 2
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: LD_INT 3
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: LD_INT 3
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: NEG
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24454: LD_ADDR_VAR 0 35
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: NEG
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 2
24545: NEG
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24566: LD_ADDR_VAR 0 36
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24678: LD_ADDR_VAR 0 37
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24790: LD_ADDR_VAR 0 38
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: NEG
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24902: LD_ADDR_VAR 0 39
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25014: LD_ADDR_VAR 0 40
25018: PUSH
25019: LD_INT 0
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: NEG
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25126: LD_ADDR_VAR 0 41
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: LD_INT 2
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 2
25281: NEG
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 3
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: LD_INT 3
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 3
25400: NEG
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 3
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 3
25435: NEG
25436: PUSH
25437: LD_INT 3
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25476: LD_ADDR_VAR 0 42
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 2
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 2
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: LD_INT 2
25658: NEG
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: NEG
25667: PUSH
25668: LD_INT 3
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: LD_INT 3
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 3
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 2
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: LD_INT 3
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 2
25732: PUSH
25733: LD_INT 3
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: LD_INT 3
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 3
25773: NEG
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 3
25785: NEG
25786: PUSH
25787: LD_INT 3
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25826: LD_ADDR_VAR 0 43
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 2
25992: NEG
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 3
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 3
26030: NEG
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 1
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: LD_INT 3
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 3
26122: NEG
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 3
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26174: LD_ADDR_VAR 0 44
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: NEG
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 2
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 3
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 3
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 3
26448: NEG
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 3
26459: NEG
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: LD_INT 2
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 3
26483: NEG
26484: PUSH
26485: LD_INT 3
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26524: LD_ADDR_VAR 0 45
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: NEG
26715: PUSH
26716: LD_INT 3
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: LD_INT 3
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 3
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 3
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 3
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 3
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 3
26821: NEG
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 3
26833: NEG
26834: PUSH
26835: LD_INT 3
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26874: LD_ADDR_VAR 0 46
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 2
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: LD_INT 2
26970: NEG
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: LD_INT 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 2
27040: NEG
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 3
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: LD_INT 3
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 3
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 3
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 3
27170: NEG
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 3
27181: NEG
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27222: LD_ADDR_VAR 0 47
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: NEG
27350: PUSH
27351: LD_INT 2
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27373: LD_ADDR_VAR 0 48
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27520: LD_ADDR_VAR 0 49
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27664: LD_ADDR_VAR 0 50
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 1
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27808: LD_ADDR_VAR 0 51
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: LD_INT 1
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27955: LD_ADDR_VAR 0 52
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: LD_INT 2
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 2
28059: NEG
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 2
28070: NEG
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28106: LD_ADDR_VAR 0 53
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 2
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 2
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 2
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 2
28293: NEG
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28336: LD_ADDR_VAR 0 54
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 2
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: NEG
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: LD_INT 2
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28566: LD_ADDR_VAR 0 55
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: NEG
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: NEG
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28796: LD_ADDR_VAR 0 56
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: LD_INT 2
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 2
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 2
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: NEG
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: NEG
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: NEG
28996: PUSH
28997: LD_INT 2
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29026: LD_ADDR_VAR 0 57
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29256: LD_ADDR_VAR 0 58
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: LD_INT 2
29341: NEG
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 2
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: NEG
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 2
29443: NEG
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: NEG
29456: PUSH
29457: LD_INT 2
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29486: LD_ADDR_VAR 0 59
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 1
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29574: LD_ADDR_VAR 0 60
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29662: LD_ADDR_VAR 0 61
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29750: LD_ADDR_VAR 0 62
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29838: LD_ADDR_VAR 0 63
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29926: LD_ADDR_VAR 0 64
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
// end ; 1 :
30014: GO 35911
30016: LD_INT 1
30018: DOUBLE
30019: EQUAL
30020: IFTRUE 30024
30022: GO 32647
30024: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30025: LD_ADDR_VAR 0 11
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: LD_INT 3
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 3
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30069: LD_ADDR_VAR 0 12
30073: PUSH
30074: LD_INT 2
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 3
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30110: LD_ADDR_VAR 0 13
30114: PUSH
30115: LD_INT 3
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30150: LD_ADDR_VAR 0 14
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30191: LD_ADDR_VAR 0 15
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 3
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30235: LD_ADDR_VAR 0 16
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 2
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: NEG
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30281: LD_ADDR_VAR 0 17
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30325: LD_ADDR_VAR 0 18
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 3
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30366: LD_ADDR_VAR 0 19
30370: PUSH
30371: LD_INT 3
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30406: LD_ADDR_VAR 0 20
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30447: LD_ADDR_VAR 0 21
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30491: LD_ADDR_VAR 0 22
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30537: LD_ADDR_VAR 0 23
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 4
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 3
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30581: LD_ADDR_VAR 0 24
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30622: LD_ADDR_VAR 0 25
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: LD_INT 3
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30662: LD_ADDR_VAR 0 26
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 4
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30703: LD_ADDR_VAR 0 27
30707: PUSH
30708: LD_INT 3
30710: NEG
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 4
30732: NEG
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30747: LD_ADDR_VAR 0 28
30751: PUSH
30752: LD_INT 3
30754: NEG
30755: PUSH
30756: LD_INT 3
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: LD_INT 4
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 4
30778: NEG
30779: PUSH
30780: LD_INT 3
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30793: LD_ADDR_VAR 0 29
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: LD_INT 3
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: LD_INT 4
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 4
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 5
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 5
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 4
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 6
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 6
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 5
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30948: LD_ADDR_VAR 0 30
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 3
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 4
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 4
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 4
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 5
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 5
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 6
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 6
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31091: LD_ADDR_VAR 0 31
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 4
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 4
31138: PUSH
31139: LD_INT 4
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: LD_INT 4
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 5
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 4
31178: PUSH
31179: LD_INT 5
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 6
31188: PUSH
31189: LD_INT 5
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 6
31198: PUSH
31199: LD_INT 6
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 5
31208: PUSH
31209: LD_INT 6
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31230: LD_ADDR_VAR 0 32
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 4
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 5
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 5
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: LD_INT 4
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 6
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 6
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 5
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31373: LD_ADDR_VAR 0 33
31377: PUSH
31378: LD_INT 2
31380: NEG
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 4
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 4
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 4
31448: NEG
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 5
31459: NEG
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 5
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 5
31482: NEG
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 6
31493: NEG
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 6
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31528: LD_ADDR_VAR 0 34
31532: PUSH
31533: LD_INT 2
31535: NEG
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 3
31547: NEG
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 3
31559: NEG
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: LD_INT 4
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 4
31583: NEG
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 4
31595: NEG
31596: PUSH
31597: LD_INT 4
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 4
31607: NEG
31608: PUSH
31609: LD_INT 5
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 5
31619: NEG
31620: PUSH
31621: LD_INT 4
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 5
31631: NEG
31632: PUSH
31633: LD_INT 5
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 5
31643: NEG
31644: PUSH
31645: LD_INT 6
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 6
31655: NEG
31656: PUSH
31657: LD_INT 5
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 6
31667: NEG
31668: PUSH
31669: LD_INT 6
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31691: LD_ADDR_VAR 0 41
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 2
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31735: LD_ADDR_VAR 0 42
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31776: LD_ADDR_VAR 0 43
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31816: LD_ADDR_VAR 0 44
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 3
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31857: LD_ADDR_VAR 0 45
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 3
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31901: LD_ADDR_VAR 0 46
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 3
31932: NEG
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31947: LD_ADDR_VAR 0 47
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 3
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31980: LD_ADDR_VAR 0 48
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32011: LD_ADDR_VAR 0 49
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32040: LD_ADDR_VAR 0 50
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32069: LD_ADDR_VAR 0 51
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32100: LD_ADDR_VAR 0 52
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 3
32119: NEG
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32133: LD_ADDR_VAR 0 53
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: LD_INT 3
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 2
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32177: LD_ADDR_VAR 0 54
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32218: LD_ADDR_VAR 0 55
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32258: LD_ADDR_VAR 0 56
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: LIST
32298: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32299: LD_ADDR_VAR 0 57
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 3
32317: NEG
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32343: LD_ADDR_VAR 0 58
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 3
32362: NEG
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: LD_INT 3
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32389: LD_ADDR_VAR 0 59
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32433: LD_ADDR_VAR 0 60
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32474: LD_ADDR_VAR 0 61
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32514: LD_ADDR_VAR 0 62
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32555: LD_ADDR_VAR 0 63
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32599: LD_ADDR_VAR 0 64
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: ST_TO_ADDR
// end ; 2 :
32645: GO 35911
32647: LD_INT 2
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 35910
32655: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32656: LD_ADDR_VAR 0 29
32660: PUSH
32661: LD_INT 4
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 4
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 4
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 5
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 3
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 4
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 4
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: LD_INT 4
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 4
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 3
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 5
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: LD_INT 3
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: LD_INT 5
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 3
32984: NEG
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 4
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 4
33018: NEG
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 4
33041: NEG
33042: PUSH
33043: LD_INT 4
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 4
33053: NEG
33054: PUSH
33055: LD_INT 5
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: NEG
33066: PUSH
33067: LD_INT 4
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 4
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 5
33101: NEG
33102: PUSH
33103: LD_INT 4
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 5
33113: NEG
33114: PUSH
33115: LD_INT 5
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: NEG
33126: PUSH
33127: LD_INT 5
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 5
33137: NEG
33138: PUSH
33139: LD_INT 3
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33194: LD_ADDR_VAR 0 30
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 5
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 5
33231: PUSH
33232: LD_INT 5
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: LD_INT 4
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 3
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 5
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 3
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 4
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 4
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 4
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 4
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 5
33440: NEG
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 5
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 5
33463: NEG
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 3
33475: NEG
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: LD_INT 3
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 3
33498: NEG
33499: PUSH
33500: LD_INT 4
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 4
33546: NEG
33547: PUSH
33548: LD_INT 3
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 4
33558: NEG
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 4
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 4
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 4
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 5
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 4
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: LD_INT 3
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 3
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 4
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: LD_INT 5
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: LD_INT 5
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33741: LD_ADDR_VAR 0 31
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: LD_INT 5
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: LD_INT 4
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 5
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 3
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 4
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 4
33920: NEG
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: LD_INT 4
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 4
33955: NEG
33956: PUSH
33957: LD_INT 5
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: LD_INT 4
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: NEG
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 4
33991: NEG
33992: PUSH
33993: LD_INT 3
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 5
34003: NEG
34004: PUSH
34005: LD_INT 4
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 5
34015: NEG
34016: PUSH
34017: LD_INT 5
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: NEG
34028: PUSH
34029: LD_INT 5
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 5
34039: NEG
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 3
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 4
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 3
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 4
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: LD_INT 4
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 4
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 4
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 5
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 5
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 4
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: LD_INT 2
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 5
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34291: LD_ADDR_VAR 0 32
34295: PUSH
34296: LD_INT 4
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 4
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: NEG
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 4
34343: NEG
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 5
34354: NEG
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 5
34365: NEG
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 5
34377: NEG
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 3
34400: NEG
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 3
34412: NEG
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 3
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 4
34460: NEG
34461: PUSH
34462: LD_INT 3
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 4
34472: NEG
34473: PUSH
34474: LD_INT 4
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: NEG
34485: PUSH
34486: LD_INT 4
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 4
34496: NEG
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 4
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 5
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 4
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: LD_INT 3
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 4
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: LD_INT 5
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: LD_INT 5
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 3
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 4
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 4
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 3
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 4
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 4
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 4
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 5
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 5
34733: PUSH
34734: LD_INT 5
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 4
34743: PUSH
34744: LD_INT 5
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 5
34773: PUSH
34774: LD_INT 3
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34838: LD_ADDR_VAR 0 33
34842: PUSH
34843: LD_INT 4
34845: NEG
34846: PUSH
34847: LD_INT 4
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 4
34857: NEG
34858: PUSH
34859: LD_INT 5
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 3
34869: NEG
34870: PUSH
34871: LD_INT 4
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 3
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 4
34893: NEG
34894: PUSH
34895: LD_INT 3
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 5
34905: NEG
34906: PUSH
34907: LD_INT 4
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 5
34917: NEG
34918: PUSH
34919: LD_INT 5
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: NEG
34930: PUSH
34931: LD_INT 5
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 5
34941: NEG
34942: PUSH
34943: LD_INT 3
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 3
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 4
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: LD_INT 3
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: LD_INT 3
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 4
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: LD_INT 2
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: LD_INT 4
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 4
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 4
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 5
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 5
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: LD_INT 3
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 3
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 4
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 4
35178: PUSH
35179: LD_INT 4
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 3
35188: PUSH
35189: LD_INT 4
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: LD_INT 3
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 4
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 4
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 4
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 3
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 1
35258: PUSH
35259: LD_INT 4
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: LD_INT 5
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 5
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 5
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35376: LD_ADDR_VAR 0 34
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 4
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 5
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 4
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 3
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 3
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 4
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 5
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: LD_INT 5
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 4
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 4
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 4
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 4
35578: PUSH
35579: LD_INT 4
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: LD_INT 3
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: LD_INT 4
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 5
35608: PUSH
35609: LD_INT 5
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 4
35618: PUSH
35619: LD_INT 5
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 3
35628: PUSH
35629: LD_INT 4
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 3
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 5
35648: PUSH
35649: LD_INT 3
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: LD_INT 5
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 4
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 4
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 4
35761: NEG
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 4
35772: NEG
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 3
35784: NEG
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 4
35806: NEG
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 5
35817: NEG
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 5
35828: NEG
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 5
35840: NEG
35841: PUSH
35842: LD_INT 2
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 3
35852: NEG
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: ST_TO_ADDR
// end ; end ;
35908: GO 35911
35910: POP
// case btype of b_depot , b_warehouse :
35911: LD_VAR 0 1
35915: PUSH
35916: LD_INT 0
35918: DOUBLE
35919: EQUAL
35920: IFTRUE 35930
35922: LD_INT 1
35924: DOUBLE
35925: EQUAL
35926: IFTRUE 35930
35928: GO 36131
35930: POP
// case nation of nation_american :
35931: LD_VAR 0 5
35935: PUSH
35936: LD_INT 1
35938: DOUBLE
35939: EQUAL
35940: IFTRUE 35944
35942: GO 36000
35944: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35945: LD_ADDR_VAR 0 9
35949: PUSH
35950: LD_VAR 0 11
35954: PUSH
35955: LD_VAR 0 12
35959: PUSH
35960: LD_VAR 0 13
35964: PUSH
35965: LD_VAR 0 14
35969: PUSH
35970: LD_VAR 0 15
35974: PUSH
35975: LD_VAR 0 16
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: PUSH
35988: LD_VAR 0 4
35992: PUSH
35993: LD_INT 1
35995: PLUS
35996: ARRAY
35997: ST_TO_ADDR
35998: GO 36129
36000: LD_INT 2
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36064
36008: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36009: LD_ADDR_VAR 0 9
36013: PUSH
36014: LD_VAR 0 17
36018: PUSH
36019: LD_VAR 0 18
36023: PUSH
36024: LD_VAR 0 19
36028: PUSH
36029: LD_VAR 0 20
36033: PUSH
36034: LD_VAR 0 21
36038: PUSH
36039: LD_VAR 0 22
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: PUSH
36052: LD_VAR 0 4
36056: PUSH
36057: LD_INT 1
36059: PLUS
36060: ARRAY
36061: ST_TO_ADDR
36062: GO 36129
36064: LD_INT 3
36066: DOUBLE
36067: EQUAL
36068: IFTRUE 36072
36070: GO 36128
36072: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_VAR 0 23
36082: PUSH
36083: LD_VAR 0 24
36087: PUSH
36088: LD_VAR 0 25
36092: PUSH
36093: LD_VAR 0 26
36097: PUSH
36098: LD_VAR 0 27
36102: PUSH
36103: LD_VAR 0 28
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: PUSH
36116: LD_VAR 0 4
36120: PUSH
36121: LD_INT 1
36123: PLUS
36124: ARRAY
36125: ST_TO_ADDR
36126: GO 36129
36128: POP
36129: GO 36684
36131: LD_INT 2
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36145
36137: LD_INT 3
36139: DOUBLE
36140: EQUAL
36141: IFTRUE 36145
36143: GO 36201
36145: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36146: LD_ADDR_VAR 0 9
36150: PUSH
36151: LD_VAR 0 29
36155: PUSH
36156: LD_VAR 0 30
36160: PUSH
36161: LD_VAR 0 31
36165: PUSH
36166: LD_VAR 0 32
36170: PUSH
36171: LD_VAR 0 33
36175: PUSH
36176: LD_VAR 0 34
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: PUSH
36189: LD_VAR 0 4
36193: PUSH
36194: LD_INT 1
36196: PLUS
36197: ARRAY
36198: ST_TO_ADDR
36199: GO 36684
36201: LD_INT 16
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36263
36207: LD_INT 17
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36263
36213: LD_INT 18
36215: DOUBLE
36216: EQUAL
36217: IFTRUE 36263
36219: LD_INT 19
36221: DOUBLE
36222: EQUAL
36223: IFTRUE 36263
36225: LD_INT 22
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36263
36231: LD_INT 20
36233: DOUBLE
36234: EQUAL
36235: IFTRUE 36263
36237: LD_INT 21
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36263
36243: LD_INT 23
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36263
36249: LD_INT 24
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36263
36255: LD_INT 25
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 36319
36263: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36264: LD_ADDR_VAR 0 9
36268: PUSH
36269: LD_VAR 0 35
36273: PUSH
36274: LD_VAR 0 36
36278: PUSH
36279: LD_VAR 0 37
36283: PUSH
36284: LD_VAR 0 38
36288: PUSH
36289: LD_VAR 0 39
36293: PUSH
36294: LD_VAR 0 40
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: PUSH
36307: LD_VAR 0 4
36311: PUSH
36312: LD_INT 1
36314: PLUS
36315: ARRAY
36316: ST_TO_ADDR
36317: GO 36684
36319: LD_INT 6
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36375
36325: LD_INT 7
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36375
36331: LD_INT 8
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36375
36337: LD_INT 13
36339: DOUBLE
36340: EQUAL
36341: IFTRUE 36375
36343: LD_INT 12
36345: DOUBLE
36346: EQUAL
36347: IFTRUE 36375
36349: LD_INT 15
36351: DOUBLE
36352: EQUAL
36353: IFTRUE 36375
36355: LD_INT 11
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36375
36361: LD_INT 14
36363: DOUBLE
36364: EQUAL
36365: IFTRUE 36375
36367: LD_INT 10
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36375
36373: GO 36431
36375: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36376: LD_ADDR_VAR 0 9
36380: PUSH
36381: LD_VAR 0 41
36385: PUSH
36386: LD_VAR 0 42
36390: PUSH
36391: LD_VAR 0 43
36395: PUSH
36396: LD_VAR 0 44
36400: PUSH
36401: LD_VAR 0 45
36405: PUSH
36406: LD_VAR 0 46
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: PUSH
36419: LD_VAR 0 4
36423: PUSH
36424: LD_INT 1
36426: PLUS
36427: ARRAY
36428: ST_TO_ADDR
36429: GO 36684
36431: LD_INT 36
36433: DOUBLE
36434: EQUAL
36435: IFTRUE 36439
36437: GO 36495
36439: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36440: LD_ADDR_VAR 0 9
36444: PUSH
36445: LD_VAR 0 47
36449: PUSH
36450: LD_VAR 0 48
36454: PUSH
36455: LD_VAR 0 49
36459: PUSH
36460: LD_VAR 0 50
36464: PUSH
36465: LD_VAR 0 51
36469: PUSH
36470: LD_VAR 0 52
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: PUSH
36483: LD_VAR 0 4
36487: PUSH
36488: LD_INT 1
36490: PLUS
36491: ARRAY
36492: ST_TO_ADDR
36493: GO 36684
36495: LD_INT 4
36497: DOUBLE
36498: EQUAL
36499: IFTRUE 36521
36501: LD_INT 5
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36521
36507: LD_INT 34
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36521
36513: LD_INT 37
36515: DOUBLE
36516: EQUAL
36517: IFTRUE 36521
36519: GO 36577
36521: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36522: LD_ADDR_VAR 0 9
36526: PUSH
36527: LD_VAR 0 53
36531: PUSH
36532: LD_VAR 0 54
36536: PUSH
36537: LD_VAR 0 55
36541: PUSH
36542: LD_VAR 0 56
36546: PUSH
36547: LD_VAR 0 57
36551: PUSH
36552: LD_VAR 0 58
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: PUSH
36565: LD_VAR 0 4
36569: PUSH
36570: LD_INT 1
36572: PLUS
36573: ARRAY
36574: ST_TO_ADDR
36575: GO 36684
36577: LD_INT 31
36579: DOUBLE
36580: EQUAL
36581: IFTRUE 36627
36583: LD_INT 32
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36627
36589: LD_INT 33
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36627
36595: LD_INT 27
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36627
36601: LD_INT 26
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36627
36607: LD_INT 28
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36627
36613: LD_INT 29
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36627
36619: LD_INT 30
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36683
36627: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36628: LD_ADDR_VAR 0 9
36632: PUSH
36633: LD_VAR 0 59
36637: PUSH
36638: LD_VAR 0 60
36642: PUSH
36643: LD_VAR 0 61
36647: PUSH
36648: LD_VAR 0 62
36652: PUSH
36653: LD_VAR 0 63
36657: PUSH
36658: LD_VAR 0 64
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: PUSH
36671: LD_VAR 0 4
36675: PUSH
36676: LD_INT 1
36678: PLUS
36679: ARRAY
36680: ST_TO_ADDR
36681: GO 36684
36683: POP
// temp_list2 = [ ] ;
36684: LD_ADDR_VAR 0 10
36688: PUSH
36689: EMPTY
36690: ST_TO_ADDR
// for i in temp_list do
36691: LD_ADDR_VAR 0 8
36695: PUSH
36696: LD_VAR 0 9
36700: PUSH
36701: FOR_IN
36702: IFFALSE 36754
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36704: LD_ADDR_VAR 0 10
36708: PUSH
36709: LD_VAR 0 10
36713: PUSH
36714: LD_VAR 0 8
36718: PUSH
36719: LD_INT 1
36721: ARRAY
36722: PUSH
36723: LD_VAR 0 2
36727: PLUS
36728: PUSH
36729: LD_VAR 0 8
36733: PUSH
36734: LD_INT 2
36736: ARRAY
36737: PUSH
36738: LD_VAR 0 3
36742: PLUS
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: ADD
36751: ST_TO_ADDR
36752: GO 36701
36754: POP
36755: POP
// result = temp_list2 ;
36756: LD_ADDR_VAR 0 7
36760: PUSH
36761: LD_VAR 0 10
36765: ST_TO_ADDR
// end ;
36766: LD_VAR 0 7
36770: RET
// export function EnemyInRange ( unit , dist ) ; begin
36771: LD_INT 0
36773: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 255
36788: PPUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 250
36798: PPUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL_OW 251
36808: PPUSH
36809: LD_VAR 0 2
36813: PPUSH
36814: CALL 10028 0 4
36818: PUSH
36819: LD_INT 4
36821: ARRAY
36822: ST_TO_ADDR
// end ;
36823: LD_VAR 0 3
36827: RET
// export function PlayerSeeMe ( unit ) ; begin
36828: LD_INT 0
36830: PPUSH
// result := See ( your_side , unit ) ;
36831: LD_ADDR_VAR 0 2
36835: PUSH
36836: LD_OWVAR 2
36840: PPUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 292
36850: ST_TO_ADDR
// end ;
36851: LD_VAR 0 2
36855: RET
// export function ReverseDir ( unit ) ; begin
36856: LD_INT 0
36858: PPUSH
// if not unit then
36859: LD_VAR 0 1
36863: NOT
36864: IFFALSE 36868
// exit ;
36866: GO 36891
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36868: LD_ADDR_VAR 0 2
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 254
36882: PUSH
36883: LD_INT 3
36885: PLUS
36886: PUSH
36887: LD_INT 6
36889: MOD
36890: ST_TO_ADDR
// end ;
36891: LD_VAR 0 2
36895: RET
// export function ReverseArray ( array ) ; var i ; begin
36896: LD_INT 0
36898: PPUSH
36899: PPUSH
// if not array then
36900: LD_VAR 0 1
36904: NOT
36905: IFFALSE 36909
// exit ;
36907: GO 36964
// result := [ ] ;
36909: LD_ADDR_VAR 0 2
36913: PUSH
36914: EMPTY
36915: ST_TO_ADDR
// for i := array downto 1 do
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: DOUBLE
36922: LD_VAR 0 1
36926: INC
36927: ST_TO_ADDR
36928: LD_INT 1
36930: PUSH
36931: FOR_DOWNTO
36932: IFFALSE 36962
// result := Join ( result , array [ i ] ) ;
36934: LD_ADDR_VAR 0 2
36938: PUSH
36939: LD_VAR 0 2
36943: PPUSH
36944: LD_VAR 0 1
36948: PUSH
36949: LD_VAR 0 3
36953: ARRAY
36954: PPUSH
36955: CALL 41816 0 2
36959: ST_TO_ADDR
36960: GO 36931
36962: POP
36963: POP
// end ;
36964: LD_VAR 0 2
36968: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36969: LD_INT 0
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
36976: PPUSH
// if not unit or not hexes then
36977: LD_VAR 0 1
36981: NOT
36982: IFTRUE 36991
36984: PUSH
36985: LD_VAR 0 2
36989: NOT
36990: OR
36991: IFFALSE 36995
// exit ;
36993: GO 37118
// dist := 9999 ;
36995: LD_ADDR_VAR 0 5
36999: PUSH
37000: LD_INT 9999
37002: ST_TO_ADDR
// for i = 1 to hexes do
37003: LD_ADDR_VAR 0 4
37007: PUSH
37008: DOUBLE
37009: LD_INT 1
37011: DEC
37012: ST_TO_ADDR
37013: LD_VAR 0 2
37017: PUSH
37018: FOR_TO
37019: IFFALSE 37106
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37021: LD_ADDR_VAR 0 6
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_VAR 0 4
37040: ARRAY
37041: PUSH
37042: LD_INT 1
37044: ARRAY
37045: PPUSH
37046: LD_VAR 0 2
37050: PUSH
37051: LD_VAR 0 4
37055: ARRAY
37056: PUSH
37057: LD_INT 2
37059: ARRAY
37060: PPUSH
37061: CALL_OW 297
37065: ST_TO_ADDR
// if tdist < dist then
37066: LD_VAR 0 6
37070: PUSH
37071: LD_VAR 0 5
37075: LESS
37076: IFFALSE 37104
// begin hex := hexes [ i ] ;
37078: LD_ADDR_VAR 0 8
37082: PUSH
37083: LD_VAR 0 2
37087: PUSH
37088: LD_VAR 0 4
37092: ARRAY
37093: ST_TO_ADDR
// dist := tdist ;
37094: LD_ADDR_VAR 0 5
37098: PUSH
37099: LD_VAR 0 6
37103: ST_TO_ADDR
// end ; end ;
37104: GO 37018
37106: POP
37107: POP
// result := hex ;
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_VAR 0 8
37117: ST_TO_ADDR
// end ;
37118: LD_VAR 0 3
37122: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37123: LD_INT 0
37125: PPUSH
37126: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37127: LD_VAR 0 1
37131: NOT
37132: IFTRUE 37171
37134: PUSH
37135: LD_VAR 0 1
37139: PUSH
37140: LD_INT 21
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 23
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PPUSH
37164: CALL_OW 69
37168: IN
37169: NOT
37170: OR
37171: IFFALSE 37175
// exit ;
37173: GO 37222
// for i = 1 to 3 do
37175: LD_ADDR_VAR 0 3
37179: PUSH
37180: DOUBLE
37181: LD_INT 1
37183: DEC
37184: ST_TO_ADDR
37185: LD_INT 3
37187: PUSH
37188: FOR_TO
37189: IFFALSE 37220
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL_OW 250
37200: PPUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 251
37210: PPUSH
37211: LD_INT 1
37213: PPUSH
37214: CALL_OW 453
37218: GO 37188
37220: POP
37221: POP
// end ;
37222: LD_VAR 0 2
37226: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37227: LD_INT 0
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
// if not unit or not enemy_unit then
37235: LD_VAR 0 1
37239: NOT
37240: IFTRUE 37249
37242: PUSH
37243: LD_VAR 0 2
37247: NOT
37248: OR
37249: IFFALSE 37253
// exit ;
37251: GO 37734
// if GetLives ( i ) < 250 then
37253: LD_VAR 0 4
37257: PPUSH
37258: CALL_OW 256
37262: PUSH
37263: LD_INT 250
37265: LESS
37266: IFFALSE 37279
// begin ComAutodestruct ( i ) ;
37268: LD_VAR 0 4
37272: PPUSH
37273: CALL 37123 0 1
// exit ;
37277: GO 37734
// end ; x := GetX ( enemy_unit ) ;
37279: LD_ADDR_VAR 0 7
37283: PUSH
37284: LD_VAR 0 2
37288: PPUSH
37289: CALL_OW 250
37293: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37294: LD_ADDR_VAR 0 8
37298: PUSH
37299: LD_VAR 0 2
37303: PPUSH
37304: CALL_OW 251
37308: ST_TO_ADDR
// if not x or not y then
37309: LD_VAR 0 7
37313: NOT
37314: IFTRUE 37323
37316: PUSH
37317: LD_VAR 0 8
37321: NOT
37322: OR
37323: IFFALSE 37327
// exit ;
37325: GO 37734
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37327: LD_ADDR_VAR 0 6
37331: PUSH
37332: LD_VAR 0 7
37336: PPUSH
37337: LD_INT 0
37339: PPUSH
37340: LD_INT 4
37342: PPUSH
37343: CALL_OW 272
37347: PUSH
37348: LD_VAR 0 8
37352: PPUSH
37353: LD_INT 0
37355: PPUSH
37356: LD_INT 4
37358: PPUSH
37359: CALL_OW 273
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_VAR 0 7
37372: PPUSH
37373: LD_INT 1
37375: PPUSH
37376: LD_INT 4
37378: PPUSH
37379: CALL_OW 272
37383: PUSH
37384: LD_VAR 0 8
37388: PPUSH
37389: LD_INT 1
37391: PPUSH
37392: LD_INT 4
37394: PPUSH
37395: CALL_OW 273
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_VAR 0 7
37408: PPUSH
37409: LD_INT 2
37411: PPUSH
37412: LD_INT 4
37414: PPUSH
37415: CALL_OW 272
37419: PUSH
37420: LD_VAR 0 8
37424: PPUSH
37425: LD_INT 2
37427: PPUSH
37428: LD_INT 4
37430: PPUSH
37431: CALL_OW 273
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_VAR 0 7
37444: PPUSH
37445: LD_INT 3
37447: PPUSH
37448: LD_INT 4
37450: PPUSH
37451: CALL_OW 272
37455: PUSH
37456: LD_VAR 0 8
37460: PPUSH
37461: LD_INT 3
37463: PPUSH
37464: LD_INT 4
37466: PPUSH
37467: CALL_OW 273
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_VAR 0 7
37480: PPUSH
37481: LD_INT 4
37483: PPUSH
37484: LD_INT 4
37486: PPUSH
37487: CALL_OW 272
37491: PUSH
37492: LD_VAR 0 8
37496: PPUSH
37497: LD_INT 4
37499: PPUSH
37500: LD_INT 4
37502: PPUSH
37503: CALL_OW 273
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_VAR 0 7
37516: PPUSH
37517: LD_INT 5
37519: PPUSH
37520: LD_INT 4
37522: PPUSH
37523: CALL_OW 272
37527: PUSH
37528: LD_VAR 0 8
37532: PPUSH
37533: LD_INT 5
37535: PPUSH
37536: LD_INT 4
37538: PPUSH
37539: CALL_OW 273
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// for i = tmp downto 1 do
37556: LD_ADDR_VAR 0 4
37560: PUSH
37561: DOUBLE
37562: LD_VAR 0 6
37566: INC
37567: ST_TO_ADDR
37568: LD_INT 1
37570: PUSH
37571: FOR_DOWNTO
37572: IFFALSE 37675
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37574: LD_VAR 0 6
37578: PUSH
37579: LD_VAR 0 4
37583: ARRAY
37584: PUSH
37585: LD_INT 1
37587: ARRAY
37588: PPUSH
37589: LD_VAR 0 6
37593: PUSH
37594: LD_VAR 0 4
37598: ARRAY
37599: PUSH
37600: LD_INT 2
37602: ARRAY
37603: PPUSH
37604: CALL_OW 488
37608: NOT
37609: IFTRUE 37651
37611: PUSH
37612: LD_VAR 0 6
37616: PUSH
37617: LD_VAR 0 4
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: PPUSH
37627: LD_VAR 0 6
37631: PUSH
37632: LD_VAR 0 4
37636: ARRAY
37637: PUSH
37638: LD_INT 2
37640: ARRAY
37641: PPUSH
37642: CALL_OW 428
37646: PUSH
37647: LD_INT 0
37649: NONEQUAL
37650: OR
37651: IFFALSE 37673
// tmp := Delete ( tmp , i ) ;
37653: LD_ADDR_VAR 0 6
37657: PUSH
37658: LD_VAR 0 6
37662: PPUSH
37663: LD_VAR 0 4
37667: PPUSH
37668: CALL_OW 3
37672: ST_TO_ADDR
37673: GO 37571
37675: POP
37676: POP
// j := GetClosestHex ( unit , tmp ) ;
37677: LD_ADDR_VAR 0 5
37681: PUSH
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_VAR 0 6
37691: PPUSH
37692: CALL 36969 0 2
37696: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37697: LD_VAR 0 1
37701: PPUSH
37702: LD_VAR 0 5
37706: PUSH
37707: LD_INT 1
37709: ARRAY
37710: PPUSH
37711: LD_VAR 0 5
37715: PUSH
37716: LD_INT 2
37718: ARRAY
37719: PPUSH
37720: CALL_OW 111
// result := j ;
37724: LD_ADDR_VAR 0 3
37728: PUSH
37729: LD_VAR 0 5
37733: ST_TO_ADDR
// end ;
37734: LD_VAR 0 3
37738: RET
// export function PrepareApemanSoldier ( ) ; begin
37739: LD_INT 0
37741: PPUSH
// uc_nation := 0 ;
37742: LD_ADDR_OWVAR 21
37746: PUSH
37747: LD_INT 0
37749: ST_TO_ADDR
// hc_sex := sex_male ;
37750: LD_ADDR_OWVAR 27
37754: PUSH
37755: LD_INT 1
37757: ST_TO_ADDR
// hc_name :=  ;
37758: LD_ADDR_OWVAR 26
37762: PUSH
37763: LD_STRING 
37765: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37766: LD_ADDR_OWVAR 28
37770: PUSH
37771: LD_INT 15
37773: ST_TO_ADDR
// hc_gallery :=  ;
37774: LD_ADDR_OWVAR 33
37778: PUSH
37779: LD_STRING 
37781: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37782: LD_ADDR_OWVAR 31
37786: PUSH
37787: LD_INT 0
37789: PPUSH
37790: LD_INT 3
37792: PPUSH
37793: CALL_OW 12
37797: PUSH
37798: LD_INT 0
37800: PPUSH
37801: LD_INT 3
37803: PPUSH
37804: CALL_OW 12
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37821: LD_ADDR_OWVAR 29
37825: PUSH
37826: LD_INT 10
37828: PUSH
37829: LD_INT 12
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: ST_TO_ADDR
// end ;
37836: LD_VAR 0 1
37840: RET
// export function PrepareApemanEngineer ( ) ; begin
37841: LD_INT 0
37843: PPUSH
// uc_nation := 0 ;
37844: LD_ADDR_OWVAR 21
37848: PUSH
37849: LD_INT 0
37851: ST_TO_ADDR
// hc_sex := sex_male ;
37852: LD_ADDR_OWVAR 27
37856: PUSH
37857: LD_INT 1
37859: ST_TO_ADDR
// hc_name :=  ;
37860: LD_ADDR_OWVAR 26
37864: PUSH
37865: LD_STRING 
37867: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37868: LD_ADDR_OWVAR 28
37872: PUSH
37873: LD_INT 16
37875: ST_TO_ADDR
// hc_gallery :=  ;
37876: LD_ADDR_OWVAR 33
37880: PUSH
37881: LD_STRING 
37883: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37884: LD_ADDR_OWVAR 31
37888: PUSH
37889: LD_INT 0
37891: PPUSH
37892: LD_INT 3
37894: PPUSH
37895: CALL_OW 12
37899: PUSH
37900: LD_INT 0
37902: PPUSH
37903: LD_INT 3
37905: PPUSH
37906: CALL_OW 12
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37923: LD_ADDR_OWVAR 29
37927: PUSH
37928: LD_INT 10
37930: PUSH
37931: LD_INT 12
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// end ;
37938: LD_VAR 0 1
37942: RET
// export function PrepareApeman ( agressivity ) ; begin
37943: LD_INT 0
37945: PPUSH
// uc_side := 0 ;
37946: LD_ADDR_OWVAR 20
37950: PUSH
37951: LD_INT 0
37953: ST_TO_ADDR
// uc_nation := 0 ;
37954: LD_ADDR_OWVAR 21
37958: PUSH
37959: LD_INT 0
37961: ST_TO_ADDR
// hc_sex := sex_male ;
37962: LD_ADDR_OWVAR 27
37966: PUSH
37967: LD_INT 1
37969: ST_TO_ADDR
// hc_class := class_apeman ;
37970: LD_ADDR_OWVAR 28
37974: PUSH
37975: LD_INT 12
37977: ST_TO_ADDR
// hc_gallery :=  ;
37978: LD_ADDR_OWVAR 33
37982: PUSH
37983: LD_STRING 
37985: ST_TO_ADDR
// hc_name :=  ;
37986: LD_ADDR_OWVAR 26
37990: PUSH
37991: LD_STRING 
37993: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37994: LD_ADDR_OWVAR 29
37998: PUSH
37999: LD_INT 10
38001: PUSH
38002: LD_INT 12
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// if agressivity = 0 then
38009: LD_VAR 0 1
38013: PUSH
38014: LD_INT 0
38016: EQUAL
38017: IFFALSE 38029
// hc_agressivity := 0 else
38019: LD_ADDR_OWVAR 35
38023: PUSH
38024: LD_INT 0
38026: ST_TO_ADDR
38027: GO 38050
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38029: LD_ADDR_OWVAR 35
38033: PUSH
38034: LD_VAR 0 1
38038: NEG
38039: PPUSH
38040: LD_VAR 0 1
38044: PPUSH
38045: CALL_OW 12
38049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38050: LD_ADDR_OWVAR 31
38054: PUSH
38055: LD_INT 0
38057: PPUSH
38058: LD_INT 3
38060: PPUSH
38061: CALL_OW 12
38065: PUSH
38066: LD_INT 0
38068: PPUSH
38069: LD_INT 3
38071: PPUSH
38072: CALL_OW 12
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: ST_TO_ADDR
// end ;
38089: LD_VAR 0 2
38093: RET
// export function PrepareTiger ( agressivity ) ; begin
38094: LD_INT 0
38096: PPUSH
// uc_side := 0 ;
38097: LD_ADDR_OWVAR 20
38101: PUSH
38102: LD_INT 0
38104: ST_TO_ADDR
// uc_nation := 0 ;
38105: LD_ADDR_OWVAR 21
38109: PUSH
38110: LD_INT 0
38112: ST_TO_ADDR
// InitHc ;
38113: CALL_OW 19
// hc_class := class_tiger ;
38117: LD_ADDR_OWVAR 28
38121: PUSH
38122: LD_INT 14
38124: ST_TO_ADDR
// hc_gallery :=  ;
38125: LD_ADDR_OWVAR 33
38129: PUSH
38130: LD_STRING 
38132: ST_TO_ADDR
// hc_name :=  ;
38133: LD_ADDR_OWVAR 26
38137: PUSH
38138: LD_STRING 
38140: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38141: LD_ADDR_OWVAR 35
38145: PUSH
38146: LD_VAR 0 1
38150: NEG
38151: PPUSH
38152: LD_VAR 0 1
38156: PPUSH
38157: CALL_OW 12
38161: ST_TO_ADDR
// end ;
38162: LD_VAR 0 2
38166: RET
// export function PrepareEnchidna ( ) ; begin
38167: LD_INT 0
38169: PPUSH
// uc_side := 0 ;
38170: LD_ADDR_OWVAR 20
38174: PUSH
38175: LD_INT 0
38177: ST_TO_ADDR
// uc_nation := 0 ;
38178: LD_ADDR_OWVAR 21
38182: PUSH
38183: LD_INT 0
38185: ST_TO_ADDR
// InitHc ;
38186: CALL_OW 19
// hc_class := class_baggie ;
38190: LD_ADDR_OWVAR 28
38194: PUSH
38195: LD_INT 13
38197: ST_TO_ADDR
// hc_gallery :=  ;
38198: LD_ADDR_OWVAR 33
38202: PUSH
38203: LD_STRING 
38205: ST_TO_ADDR
// hc_name :=  ;
38206: LD_ADDR_OWVAR 26
38210: PUSH
38211: LD_STRING 
38213: ST_TO_ADDR
// end ;
38214: LD_VAR 0 1
38218: RET
// export function PrepareFrog ( ) ; begin
38219: LD_INT 0
38221: PPUSH
// uc_side := 0 ;
38222: LD_ADDR_OWVAR 20
38226: PUSH
38227: LD_INT 0
38229: ST_TO_ADDR
// uc_nation := 0 ;
38230: LD_ADDR_OWVAR 21
38234: PUSH
38235: LD_INT 0
38237: ST_TO_ADDR
// InitHc ;
38238: CALL_OW 19
// hc_class := class_frog ;
38242: LD_ADDR_OWVAR 28
38246: PUSH
38247: LD_INT 19
38249: ST_TO_ADDR
// hc_gallery :=  ;
38250: LD_ADDR_OWVAR 33
38254: PUSH
38255: LD_STRING 
38257: ST_TO_ADDR
// hc_name :=  ;
38258: LD_ADDR_OWVAR 26
38262: PUSH
38263: LD_STRING 
38265: ST_TO_ADDR
// end ;
38266: LD_VAR 0 1
38270: RET
// export function PrepareFish ( ) ; begin
38271: LD_INT 0
38273: PPUSH
// uc_side := 0 ;
38274: LD_ADDR_OWVAR 20
38278: PUSH
38279: LD_INT 0
38281: ST_TO_ADDR
// uc_nation := 0 ;
38282: LD_ADDR_OWVAR 21
38286: PUSH
38287: LD_INT 0
38289: ST_TO_ADDR
// InitHc ;
38290: CALL_OW 19
// hc_class := class_fish ;
38294: LD_ADDR_OWVAR 28
38298: PUSH
38299: LD_INT 20
38301: ST_TO_ADDR
// hc_gallery :=  ;
38302: LD_ADDR_OWVAR 33
38306: PUSH
38307: LD_STRING 
38309: ST_TO_ADDR
// hc_name :=  ;
38310: LD_ADDR_OWVAR 26
38314: PUSH
38315: LD_STRING 
38317: ST_TO_ADDR
// end ;
38318: LD_VAR 0 1
38322: RET
// export function PrepareBird ( ) ; begin
38323: LD_INT 0
38325: PPUSH
// uc_side := 0 ;
38326: LD_ADDR_OWVAR 20
38330: PUSH
38331: LD_INT 0
38333: ST_TO_ADDR
// uc_nation := 0 ;
38334: LD_ADDR_OWVAR 21
38338: PUSH
38339: LD_INT 0
38341: ST_TO_ADDR
// InitHc ;
38342: CALL_OW 19
// hc_class := class_phororhacos ;
38346: LD_ADDR_OWVAR 28
38350: PUSH
38351: LD_INT 18
38353: ST_TO_ADDR
// hc_gallery :=  ;
38354: LD_ADDR_OWVAR 33
38358: PUSH
38359: LD_STRING 
38361: ST_TO_ADDR
// hc_name :=  ;
38362: LD_ADDR_OWVAR 26
38366: PUSH
38367: LD_STRING 
38369: ST_TO_ADDR
// end ;
38370: LD_VAR 0 1
38374: RET
// export function PrepareHorse ( ) ; begin
38375: LD_INT 0
38377: PPUSH
// uc_side := 0 ;
38378: LD_ADDR_OWVAR 20
38382: PUSH
38383: LD_INT 0
38385: ST_TO_ADDR
// uc_nation := 0 ;
38386: LD_ADDR_OWVAR 21
38390: PUSH
38391: LD_INT 0
38393: ST_TO_ADDR
// InitHc ;
38394: CALL_OW 19
// hc_class := class_horse ;
38398: LD_ADDR_OWVAR 28
38402: PUSH
38403: LD_INT 21
38405: ST_TO_ADDR
// hc_gallery :=  ;
38406: LD_ADDR_OWVAR 33
38410: PUSH
38411: LD_STRING 
38413: ST_TO_ADDR
// hc_name :=  ;
38414: LD_ADDR_OWVAR 26
38418: PUSH
38419: LD_STRING 
38421: ST_TO_ADDR
// end ;
38422: LD_VAR 0 1
38426: RET
// export function PrepareMastodont ( ) ; begin
38427: LD_INT 0
38429: PPUSH
// uc_side := 0 ;
38430: LD_ADDR_OWVAR 20
38434: PUSH
38435: LD_INT 0
38437: ST_TO_ADDR
// uc_nation := 0 ;
38438: LD_ADDR_OWVAR 21
38442: PUSH
38443: LD_INT 0
38445: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38446: LD_ADDR_OWVAR 37
38450: PUSH
38451: LD_INT 31
38453: ST_TO_ADDR
// vc_control := control_rider ;
38454: LD_ADDR_OWVAR 38
38458: PUSH
38459: LD_INT 4
38461: ST_TO_ADDR
// end ;
38462: LD_VAR 0 1
38466: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38467: LD_INT 0
38469: PPUSH
38470: PPUSH
38471: PPUSH
// uc_side = 0 ;
38472: LD_ADDR_OWVAR 20
38476: PUSH
38477: LD_INT 0
38479: ST_TO_ADDR
// uc_nation = 0 ;
38480: LD_ADDR_OWVAR 21
38484: PUSH
38485: LD_INT 0
38487: ST_TO_ADDR
// InitHc_All ( ) ;
38488: CALL_OW 584
// InitVc ;
38492: CALL_OW 20
// if mastodonts then
38496: LD_VAR 0 6
38500: IFFALSE 38567
// for i = 1 to mastodonts do
38502: LD_ADDR_VAR 0 11
38506: PUSH
38507: DOUBLE
38508: LD_INT 1
38510: DEC
38511: ST_TO_ADDR
38512: LD_VAR 0 6
38516: PUSH
38517: FOR_TO
38518: IFFALSE 38565
// begin vc_chassis := 31 ;
38520: LD_ADDR_OWVAR 37
38524: PUSH
38525: LD_INT 31
38527: ST_TO_ADDR
// vc_control := control_rider ;
38528: LD_ADDR_OWVAR 38
38532: PUSH
38533: LD_INT 4
38535: ST_TO_ADDR
// animal := CreateVehicle ;
38536: LD_ADDR_VAR 0 12
38540: PUSH
38541: CALL_OW 45
38545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38546: LD_VAR 0 12
38550: PPUSH
38551: LD_VAR 0 8
38555: PPUSH
38556: LD_INT 0
38558: PPUSH
38559: CALL 40709 0 3
// end ;
38563: GO 38517
38565: POP
38566: POP
// if horses then
38567: LD_VAR 0 5
38571: IFFALSE 38638
// for i = 1 to horses do
38573: LD_ADDR_VAR 0 11
38577: PUSH
38578: DOUBLE
38579: LD_INT 1
38581: DEC
38582: ST_TO_ADDR
38583: LD_VAR 0 5
38587: PUSH
38588: FOR_TO
38589: IFFALSE 38636
// begin hc_class := 21 ;
38591: LD_ADDR_OWVAR 28
38595: PUSH
38596: LD_INT 21
38598: ST_TO_ADDR
// hc_gallery :=  ;
38599: LD_ADDR_OWVAR 33
38603: PUSH
38604: LD_STRING 
38606: ST_TO_ADDR
// animal := CreateHuman ;
38607: LD_ADDR_VAR 0 12
38611: PUSH
38612: CALL_OW 44
38616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38617: LD_VAR 0 12
38621: PPUSH
38622: LD_VAR 0 8
38626: PPUSH
38627: LD_INT 0
38629: PPUSH
38630: CALL 40709 0 3
// end ;
38634: GO 38588
38636: POP
38637: POP
// if birds then
38638: LD_VAR 0 1
38642: IFFALSE 38709
// for i = 1 to birds do
38644: LD_ADDR_VAR 0 11
38648: PUSH
38649: DOUBLE
38650: LD_INT 1
38652: DEC
38653: ST_TO_ADDR
38654: LD_VAR 0 1
38658: PUSH
38659: FOR_TO
38660: IFFALSE 38707
// begin hc_class := 18 ;
38662: LD_ADDR_OWVAR 28
38666: PUSH
38667: LD_INT 18
38669: ST_TO_ADDR
// hc_gallery =  ;
38670: LD_ADDR_OWVAR 33
38674: PUSH
38675: LD_STRING 
38677: ST_TO_ADDR
// animal := CreateHuman ;
38678: LD_ADDR_VAR 0 12
38682: PUSH
38683: CALL_OW 44
38687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38688: LD_VAR 0 12
38692: PPUSH
38693: LD_VAR 0 8
38697: PPUSH
38698: LD_INT 0
38700: PPUSH
38701: CALL 40709 0 3
// end ;
38705: GO 38659
38707: POP
38708: POP
// if tigers then
38709: LD_VAR 0 2
38713: IFFALSE 38797
// for i = 1 to tigers do
38715: LD_ADDR_VAR 0 11
38719: PUSH
38720: DOUBLE
38721: LD_INT 1
38723: DEC
38724: ST_TO_ADDR
38725: LD_VAR 0 2
38729: PUSH
38730: FOR_TO
38731: IFFALSE 38795
// begin hc_class = class_tiger ;
38733: LD_ADDR_OWVAR 28
38737: PUSH
38738: LD_INT 14
38740: ST_TO_ADDR
// hc_gallery =  ;
38741: LD_ADDR_OWVAR 33
38745: PUSH
38746: LD_STRING 
38748: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38749: LD_ADDR_OWVAR 35
38753: PUSH
38754: LD_INT 7
38756: NEG
38757: PPUSH
38758: LD_INT 7
38760: PPUSH
38761: CALL_OW 12
38765: ST_TO_ADDR
// animal := CreateHuman ;
38766: LD_ADDR_VAR 0 12
38770: PUSH
38771: CALL_OW 44
38775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38776: LD_VAR 0 12
38780: PPUSH
38781: LD_VAR 0 8
38785: PPUSH
38786: LD_INT 0
38788: PPUSH
38789: CALL 40709 0 3
// end ;
38793: GO 38730
38795: POP
38796: POP
// if apemans then
38797: LD_VAR 0 3
38801: IFFALSE 38924
// for i = 1 to apemans do
38803: LD_ADDR_VAR 0 11
38807: PUSH
38808: DOUBLE
38809: LD_INT 1
38811: DEC
38812: ST_TO_ADDR
38813: LD_VAR 0 3
38817: PUSH
38818: FOR_TO
38819: IFFALSE 38922
// begin hc_class = class_apeman ;
38821: LD_ADDR_OWVAR 28
38825: PUSH
38826: LD_INT 12
38828: ST_TO_ADDR
// hc_gallery =  ;
38829: LD_ADDR_OWVAR 33
38833: PUSH
38834: LD_STRING 
38836: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38837: LD_ADDR_OWVAR 35
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PPUSH
38846: LD_INT 2
38848: PPUSH
38849: CALL_OW 12
38853: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38854: LD_ADDR_OWVAR 31
38858: PUSH
38859: LD_INT 1
38861: PPUSH
38862: LD_INT 3
38864: PPUSH
38865: CALL_OW 12
38869: PUSH
38870: LD_INT 1
38872: PPUSH
38873: LD_INT 3
38875: PPUSH
38876: CALL_OW 12
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// animal := CreateHuman ;
38893: LD_ADDR_VAR 0 12
38897: PUSH
38898: CALL_OW 44
38902: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38903: LD_VAR 0 12
38907: PPUSH
38908: LD_VAR 0 8
38912: PPUSH
38913: LD_INT 0
38915: PPUSH
38916: CALL 40709 0 3
// end ;
38920: GO 38818
38922: POP
38923: POP
// if enchidnas then
38924: LD_VAR 0 4
38928: IFFALSE 38995
// for i = 1 to enchidnas do
38930: LD_ADDR_VAR 0 11
38934: PUSH
38935: DOUBLE
38936: LD_INT 1
38938: DEC
38939: ST_TO_ADDR
38940: LD_VAR 0 4
38944: PUSH
38945: FOR_TO
38946: IFFALSE 38993
// begin hc_class = 13 ;
38948: LD_ADDR_OWVAR 28
38952: PUSH
38953: LD_INT 13
38955: ST_TO_ADDR
// hc_gallery =  ;
38956: LD_ADDR_OWVAR 33
38960: PUSH
38961: LD_STRING 
38963: ST_TO_ADDR
// animal := CreateHuman ;
38964: LD_ADDR_VAR 0 12
38968: PUSH
38969: CALL_OW 44
38973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38974: LD_VAR 0 12
38978: PPUSH
38979: LD_VAR 0 8
38983: PPUSH
38984: LD_INT 0
38986: PPUSH
38987: CALL 40709 0 3
// end ;
38991: GO 38945
38993: POP
38994: POP
// if fishes then
38995: LD_VAR 0 7
38999: IFFALSE 39066
// for i = 1 to fishes do
39001: LD_ADDR_VAR 0 11
39005: PUSH
39006: DOUBLE
39007: LD_INT 1
39009: DEC
39010: ST_TO_ADDR
39011: LD_VAR 0 7
39015: PUSH
39016: FOR_TO
39017: IFFALSE 39064
// begin hc_class = 20 ;
39019: LD_ADDR_OWVAR 28
39023: PUSH
39024: LD_INT 20
39026: ST_TO_ADDR
// hc_gallery =  ;
39027: LD_ADDR_OWVAR 33
39031: PUSH
39032: LD_STRING 
39034: ST_TO_ADDR
// animal := CreateHuman ;
39035: LD_ADDR_VAR 0 12
39039: PUSH
39040: CALL_OW 44
39044: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39045: LD_VAR 0 12
39049: PPUSH
39050: LD_VAR 0 9
39054: PPUSH
39055: LD_INT 0
39057: PPUSH
39058: CALL 40709 0 3
// end ;
39062: GO 39016
39064: POP
39065: POP
// end ;
39066: LD_VAR 0 10
39070: RET
// export function WantHeal ( sci , unit ) ; begin
39071: LD_INT 0
39073: PPUSH
// if GetTaskList ( sci ) > 0 then
39074: LD_VAR 0 1
39078: PPUSH
39079: CALL_OW 437
39083: PUSH
39084: LD_INT 0
39086: GREATER
39087: IFFALSE 39159
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39089: LD_VAR 0 1
39093: PPUSH
39094: CALL_OW 437
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: PUSH
39107: LD_STRING l
39109: EQUAL
39110: IFFALSE 39137
39112: PUSH
39113: LD_VAR 0 1
39117: PPUSH
39118: CALL_OW 437
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PUSH
39127: LD_INT 4
39129: ARRAY
39130: PUSH
39131: LD_VAR 0 2
39135: EQUAL
39136: AND
39137: IFFALSE 39149
// result := true else
39139: LD_ADDR_VAR 0 3
39143: PUSH
39144: LD_INT 1
39146: ST_TO_ADDR
39147: GO 39157
// result := false ;
39149: LD_ADDR_VAR 0 3
39153: PUSH
39154: LD_INT 0
39156: ST_TO_ADDR
// end else
39157: GO 39167
// result := false ;
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: LD_INT 0
39166: ST_TO_ADDR
// end ;
39167: LD_VAR 0 3
39171: RET
// export function HealTarget ( sci ) ; begin
39172: LD_INT 0
39174: PPUSH
// if not sci then
39175: LD_VAR 0 1
39179: NOT
39180: IFFALSE 39184
// exit ;
39182: GO 39249
// result := 0 ;
39184: LD_ADDR_VAR 0 2
39188: PUSH
39189: LD_INT 0
39191: ST_TO_ADDR
// if GetTaskList ( sci ) then
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 437
39201: IFFALSE 39249
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 437
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: PUSH
39221: LD_STRING l
39223: EQUAL
39224: IFFALSE 39249
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39226: LD_ADDR_VAR 0 2
39230: PUSH
39231: LD_VAR 0 1
39235: PPUSH
39236: CALL_OW 437
39240: PUSH
39241: LD_INT 1
39243: ARRAY
39244: PUSH
39245: LD_INT 4
39247: ARRAY
39248: ST_TO_ADDR
// end ;
39249: LD_VAR 0 2
39253: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39254: LD_INT 0
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
// if not base_units then
39260: LD_VAR 0 1
39264: NOT
39265: IFFALSE 39269
// exit ;
39267: GO 39356
// result := false ;
39269: LD_ADDR_VAR 0 2
39273: PUSH
39274: LD_INT 0
39276: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39277: LD_ADDR_VAR 0 5
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: LD_INT 21
39289: PUSH
39290: LD_INT 3
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PPUSH
39297: CALL_OW 72
39301: ST_TO_ADDR
// if not tmp then
39302: LD_VAR 0 5
39306: NOT
39307: IFFALSE 39311
// exit ;
39309: GO 39356
// for i in tmp do
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: LD_VAR 0 5
39320: PUSH
39321: FOR_IN
39322: IFFALSE 39354
// begin result := EnemyInRange ( i , 22 ) ;
39324: LD_ADDR_VAR 0 2
39328: PUSH
39329: LD_VAR 0 3
39333: PPUSH
39334: LD_INT 22
39336: PPUSH
39337: CALL 36771 0 2
39341: ST_TO_ADDR
// if result then
39342: LD_VAR 0 2
39346: IFFALSE 39352
// exit ;
39348: POP
39349: POP
39350: GO 39356
// end ;
39352: GO 39321
39354: POP
39355: POP
// end ;
39356: LD_VAR 0 2
39360: RET
// export function FilterByTag ( units , tag ) ; begin
39361: LD_INT 0
39363: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39364: LD_ADDR_VAR 0 3
39368: PUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: LD_INT 120
39376: PUSH
39377: LD_VAR 0 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PPUSH
39386: CALL_OW 72
39390: ST_TO_ADDR
// end ;
39391: LD_VAR 0 3
39395: RET
// export function IsDriver ( un ) ; begin
39396: LD_INT 0
39398: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39399: LD_ADDR_VAR 0 2
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_INT 55
39411: PUSH
39412: EMPTY
39413: LIST
39414: PPUSH
39415: CALL_OW 69
39419: IN
39420: ST_TO_ADDR
// end ;
39421: LD_VAR 0 2
39425: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39426: LD_INT 0
39428: PPUSH
39429: PPUSH
// list := [ ] ;
39430: LD_ADDR_VAR 0 5
39434: PUSH
39435: EMPTY
39436: ST_TO_ADDR
// case d of 0 :
39437: LD_VAR 0 3
39441: PUSH
39442: LD_INT 0
39444: DOUBLE
39445: EQUAL
39446: IFTRUE 39450
39448: GO 39583
39450: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39451: LD_ADDR_VAR 0 5
39455: PUSH
39456: LD_VAR 0 1
39460: PUSH
39461: LD_INT 4
39463: MINUS
39464: PUSH
39465: LD_VAR 0 2
39469: PUSH
39470: LD_INT 4
39472: MINUS
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: PUSH
39482: LD_VAR 0 1
39486: PUSH
39487: LD_INT 3
39489: MINUS
39490: PUSH
39491: LD_VAR 0 2
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: PUSH
39504: LD_VAR 0 1
39508: PUSH
39509: LD_INT 4
39511: PLUS
39512: PUSH
39513: LD_VAR 0 2
39517: PUSH
39518: LD_INT 4
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: PUSH
39526: LD_VAR 0 1
39530: PUSH
39531: LD_INT 3
39533: PLUS
39534: PUSH
39535: LD_VAR 0 2
39539: PUSH
39540: LD_INT 3
39542: PLUS
39543: PUSH
39544: LD_INT 5
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: PUSH
39552: LD_VAR 0 1
39556: PUSH
39557: LD_VAR 0 2
39561: PUSH
39562: LD_INT 4
39564: PLUS
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: ST_TO_ADDR
// end ; 1 :
39581: GO 40281
39583: LD_INT 1
39585: DOUBLE
39586: EQUAL
39587: IFTRUE 39591
39589: GO 39724
39591: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39592: LD_ADDR_VAR 0 5
39596: PUSH
39597: LD_VAR 0 1
39601: PUSH
39602: LD_VAR 0 2
39606: PUSH
39607: LD_INT 4
39609: MINUS
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: PUSH
39619: LD_VAR 0 1
39623: PUSH
39624: LD_INT 3
39626: MINUS
39627: PUSH
39628: LD_VAR 0 2
39632: PUSH
39633: LD_INT 3
39635: MINUS
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: PUSH
39645: LD_VAR 0 1
39649: PUSH
39650: LD_INT 4
39652: MINUS
39653: PUSH
39654: LD_VAR 0 2
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: PUSH
39667: LD_VAR 0 1
39671: PUSH
39672: LD_VAR 0 2
39676: PUSH
39677: LD_INT 3
39679: PLUS
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: PUSH
39689: LD_VAR 0 1
39693: PUSH
39694: LD_INT 4
39696: PLUS
39697: PUSH
39698: LD_VAR 0 2
39702: PUSH
39703: LD_INT 4
39705: PLUS
39706: PUSH
39707: LD_INT 5
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: LIST
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// end ; 2 :
39722: GO 40281
39724: LD_INT 2
39726: DOUBLE
39727: EQUAL
39728: IFTRUE 39732
39730: GO 39861
39732: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39733: LD_ADDR_VAR 0 5
39737: PUSH
39738: LD_VAR 0 1
39742: PUSH
39743: LD_VAR 0 2
39747: PUSH
39748: LD_INT 3
39750: MINUS
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: PUSH
39760: LD_VAR 0 1
39764: PUSH
39765: LD_INT 4
39767: PLUS
39768: PUSH
39769: LD_VAR 0 2
39773: PUSH
39774: LD_INT 4
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: PUSH
39782: LD_VAR 0 1
39786: PUSH
39787: LD_VAR 0 2
39791: PUSH
39792: LD_INT 4
39794: PLUS
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: PUSH
39804: LD_VAR 0 1
39808: PUSH
39809: LD_INT 3
39811: MINUS
39812: PUSH
39813: LD_VAR 0 2
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: PUSH
39826: LD_VAR 0 1
39830: PUSH
39831: LD_INT 4
39833: MINUS
39834: PUSH
39835: LD_VAR 0 2
39839: PUSH
39840: LD_INT 4
39842: MINUS
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// end ; 3 :
39859: GO 40281
39861: LD_INT 3
39863: DOUBLE
39864: EQUAL
39865: IFTRUE 39869
39867: GO 40002
39869: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39870: LD_ADDR_VAR 0 5
39874: PUSH
39875: LD_VAR 0 1
39879: PUSH
39880: LD_INT 3
39882: PLUS
39883: PUSH
39884: LD_VAR 0 2
39888: PUSH
39889: LD_INT 4
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: PUSH
39897: LD_VAR 0 1
39901: PUSH
39902: LD_INT 4
39904: PLUS
39905: PUSH
39906: LD_VAR 0 2
39910: PUSH
39911: LD_INT 4
39913: PLUS
39914: PUSH
39915: LD_INT 5
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: PUSH
39923: LD_VAR 0 1
39927: PUSH
39928: LD_INT 4
39930: MINUS
39931: PUSH
39932: LD_VAR 0 2
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: PUSH
39945: LD_VAR 0 1
39949: PUSH
39950: LD_VAR 0 2
39954: PUSH
39955: LD_INT 4
39957: MINUS
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: PUSH
39967: LD_VAR 0 1
39971: PUSH
39972: LD_INT 3
39974: MINUS
39975: PUSH
39976: LD_VAR 0 2
39980: PUSH
39981: LD_INT 3
39983: MINUS
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// end ; 4 :
40000: GO 40281
40002: LD_INT 4
40004: DOUBLE
40005: EQUAL
40006: IFTRUE 40010
40008: GO 40143
40010: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40011: LD_ADDR_VAR 0 5
40015: PUSH
40016: LD_VAR 0 1
40020: PUSH
40021: LD_VAR 0 2
40025: PUSH
40026: LD_INT 4
40028: PLUS
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: PUSH
40038: LD_VAR 0 1
40042: PUSH
40043: LD_INT 3
40045: PLUS
40046: PUSH
40047: LD_VAR 0 2
40051: PUSH
40052: LD_INT 3
40054: PLUS
40055: PUSH
40056: LD_INT 5
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: PUSH
40064: LD_VAR 0 1
40068: PUSH
40069: LD_INT 4
40071: PLUS
40072: PUSH
40073: LD_VAR 0 2
40077: PUSH
40078: LD_INT 4
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: PUSH
40086: LD_VAR 0 1
40090: PUSH
40091: LD_VAR 0 2
40095: PUSH
40096: LD_INT 3
40098: MINUS
40099: PUSH
40100: LD_INT 3
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: PUSH
40108: LD_VAR 0 1
40112: PUSH
40113: LD_INT 4
40115: MINUS
40116: PUSH
40117: LD_VAR 0 2
40121: PUSH
40122: LD_INT 4
40124: MINUS
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// end ; 5 :
40141: GO 40281
40143: LD_INT 5
40145: DOUBLE
40146: EQUAL
40147: IFTRUE 40151
40149: GO 40280
40151: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40152: LD_ADDR_VAR 0 5
40156: PUSH
40157: LD_VAR 0 1
40161: PUSH
40162: LD_INT 4
40164: MINUS
40165: PUSH
40166: LD_VAR 0 2
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: PUSH
40179: LD_VAR 0 1
40183: PUSH
40184: LD_VAR 0 2
40188: PUSH
40189: LD_INT 4
40191: MINUS
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: PUSH
40201: LD_VAR 0 1
40205: PUSH
40206: LD_INT 4
40208: PLUS
40209: PUSH
40210: LD_VAR 0 2
40214: PUSH
40215: LD_INT 4
40217: PLUS
40218: PUSH
40219: LD_INT 5
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: PUSH
40227: LD_VAR 0 1
40231: PUSH
40232: LD_INT 3
40234: PLUS
40235: PUSH
40236: LD_VAR 0 2
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: PUSH
40249: LD_VAR 0 1
40253: PUSH
40254: LD_VAR 0 2
40258: PUSH
40259: LD_INT 3
40261: PLUS
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: ST_TO_ADDR
// end ; end ;
40278: GO 40281
40280: POP
// result := list ;
40281: LD_ADDR_VAR 0 4
40285: PUSH
40286: LD_VAR 0 5
40290: ST_TO_ADDR
// end ;
40291: LD_VAR 0 4
40295: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40296: LD_INT 0
40298: PPUSH
40299: PPUSH
40300: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40301: LD_VAR 0 1
40305: NOT
40306: IFTRUE 40334
40308: PUSH
40309: LD_VAR 0 2
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 4
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: IN
40332: NOT
40333: OR
40334: IFFALSE 40338
// exit ;
40336: GO 40421
// tmp := [ ] ;
40338: LD_ADDR_VAR 0 5
40342: PUSH
40343: EMPTY
40344: ST_TO_ADDR
// for i in units do
40345: LD_ADDR_VAR 0 4
40349: PUSH
40350: LD_VAR 0 1
40354: PUSH
40355: FOR_IN
40356: IFFALSE 40390
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40358: LD_ADDR_VAR 0 5
40362: PUSH
40363: LD_VAR 0 5
40367: PPUSH
40368: LD_VAR 0 4
40372: PPUSH
40373: LD_VAR 0 2
40377: PPUSH
40378: CALL_OW 259
40382: PPUSH
40383: CALL 41816 0 2
40387: ST_TO_ADDR
40388: GO 40355
40390: POP
40391: POP
// if not tmp then
40392: LD_VAR 0 5
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40421
// result := SortListByListDesc ( units , tmp ) ;
40401: LD_ADDR_VAR 0 3
40405: PUSH
40406: LD_VAR 0 1
40410: PPUSH
40411: LD_VAR 0 5
40415: PPUSH
40416: CALL_OW 77
40420: ST_TO_ADDR
// end ;
40421: LD_VAR 0 3
40425: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40426: LD_INT 0
40428: PPUSH
40429: PPUSH
40430: PPUSH
// result := false ;
40431: LD_ADDR_VAR 0 3
40435: PUSH
40436: LD_INT 0
40438: ST_TO_ADDR
// if not building then
40439: LD_VAR 0 2
40443: NOT
40444: IFFALSE 40448
// exit ;
40446: GO 40592
// x := GetX ( building ) ;
40448: LD_ADDR_VAR 0 4
40452: PUSH
40453: LD_VAR 0 2
40457: PPUSH
40458: CALL_OW 250
40462: ST_TO_ADDR
// y := GetY ( building ) ;
40463: LD_ADDR_VAR 0 5
40467: PUSH
40468: LD_VAR 0 2
40472: PPUSH
40473: CALL_OW 251
40477: ST_TO_ADDR
// if not x or not y then
40478: LD_VAR 0 4
40482: NOT
40483: IFTRUE 40492
40485: PUSH
40486: LD_VAR 0 5
40490: NOT
40491: OR
40492: IFFALSE 40496
// exit ;
40494: GO 40592
// if GetTaskList ( unit ) then
40496: LD_VAR 0 1
40500: PPUSH
40501: CALL_OW 437
40505: IFFALSE 40592
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40507: LD_STRING e
40509: PUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL_OW 437
40519: PUSH
40520: LD_INT 1
40522: ARRAY
40523: PUSH
40524: LD_INT 1
40526: ARRAY
40527: EQUAL
40528: IFFALSE 40555
40530: PUSH
40531: LD_VAR 0 4
40535: PUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 437
40545: PUSH
40546: LD_INT 1
40548: ARRAY
40549: PUSH
40550: LD_INT 2
40552: ARRAY
40553: EQUAL
40554: AND
40555: IFFALSE 40582
40557: PUSH
40558: LD_VAR 0 5
40562: PUSH
40563: LD_VAR 0 1
40567: PPUSH
40568: CALL_OW 437
40572: PUSH
40573: LD_INT 1
40575: ARRAY
40576: PUSH
40577: LD_INT 3
40579: ARRAY
40580: EQUAL
40581: AND
40582: IFFALSE 40592
// result := true end ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_INT 1
40591: ST_TO_ADDR
// end ;
40592: LD_VAR 0 3
40596: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40597: LD_INT 0
40599: PPUSH
// result := false ;
40600: LD_ADDR_VAR 0 4
40604: PUSH
40605: LD_INT 0
40607: ST_TO_ADDR
// if GetTaskList ( unit ) then
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 437
40617: IFFALSE 40704
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40619: LD_STRING M
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 437
40631: PUSH
40632: LD_INT 1
40634: ARRAY
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: EQUAL
40640: IFFALSE 40667
40642: PUSH
40643: LD_VAR 0 2
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 437
40657: PUSH
40658: LD_INT 1
40660: ARRAY
40661: PUSH
40662: LD_INT 2
40664: ARRAY
40665: EQUAL
40666: AND
40667: IFFALSE 40694
40669: PUSH
40670: LD_VAR 0 3
40674: PUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 437
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PUSH
40689: LD_INT 3
40691: ARRAY
40692: EQUAL
40693: AND
40694: IFFALSE 40704
// result := true ;
40696: LD_ADDR_VAR 0 4
40700: PUSH
40701: LD_INT 1
40703: ST_TO_ADDR
// end ; end ;
40704: LD_VAR 0 4
40708: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40709: LD_INT 0
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
// if not unit or not area then
40715: LD_VAR 0 1
40719: NOT
40720: IFTRUE 40729
40722: PUSH
40723: LD_VAR 0 2
40727: NOT
40728: OR
40729: IFFALSE 40733
// exit ;
40731: GO 40909
// tmp := AreaToList ( area , i ) ;
40733: LD_ADDR_VAR 0 6
40737: PUSH
40738: LD_VAR 0 2
40742: PPUSH
40743: LD_VAR 0 5
40747: PPUSH
40748: CALL_OW 517
40752: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40753: LD_ADDR_VAR 0 5
40757: PUSH
40758: DOUBLE
40759: LD_INT 1
40761: DEC
40762: ST_TO_ADDR
40763: LD_VAR 0 6
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PUSH
40772: FOR_TO
40773: IFFALSE 40907
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40775: LD_ADDR_VAR 0 7
40779: PUSH
40780: LD_VAR 0 6
40784: PUSH
40785: LD_INT 1
40787: ARRAY
40788: PUSH
40789: LD_VAR 0 5
40793: ARRAY
40794: PUSH
40795: LD_VAR 0 6
40799: PUSH
40800: LD_INT 2
40802: ARRAY
40803: PUSH
40804: LD_VAR 0 5
40808: ARRAY
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40814: LD_INT 92
40816: PUSH
40817: LD_VAR 0 7
40821: PUSH
40822: LD_INT 1
40824: ARRAY
40825: PUSH
40826: LD_VAR 0 7
40830: PUSH
40831: LD_INT 2
40833: ARRAY
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: PPUSH
40844: CALL_OW 69
40848: PUSH
40849: LD_INT 0
40851: EQUAL
40852: IFFALSE 40905
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40854: LD_VAR 0 1
40858: PPUSH
40859: LD_VAR 0 7
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PPUSH
40868: LD_VAR 0 7
40872: PUSH
40873: LD_INT 2
40875: ARRAY
40876: PPUSH
40877: LD_VAR 0 3
40881: PPUSH
40882: CALL_OW 48
// result := IsPlaced ( unit ) ;
40886: LD_ADDR_VAR 0 4
40890: PUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL_OW 305
40900: ST_TO_ADDR
// exit ;
40901: POP
40902: POP
40903: GO 40909
// end ; end ;
40905: GO 40772
40907: POP
40908: POP
// end ;
40909: LD_VAR 0 4
40913: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40914: LD_INT 0
40916: PPUSH
40917: PPUSH
40918: PPUSH
// if not side or side > 8 then
40919: LD_VAR 0 1
40923: NOT
40924: IFTRUE 40936
40926: PUSH
40927: LD_VAR 0 1
40931: PUSH
40932: LD_INT 8
40934: GREATER
40935: OR
40936: IFFALSE 40940
// exit ;
40938: GO 41127
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40940: LD_ADDR_VAR 0 4
40944: PUSH
40945: LD_INT 22
40947: PUSH
40948: LD_VAR 0 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 21
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PPUSH
40971: CALL_OW 69
40975: ST_TO_ADDR
// if not tmp then
40976: LD_VAR 0 4
40980: NOT
40981: IFFALSE 40985
// exit ;
40983: GO 41127
// enable_addtolog := true ;
40985: LD_ADDR_OWVAR 81
40989: PUSH
40990: LD_INT 1
40992: ST_TO_ADDR
// AddToLog ( [ ) ;
40993: LD_STRING [
40995: PPUSH
40996: CALL_OW 561
// for i in tmp do
41000: LD_ADDR_VAR 0 3
41004: PUSH
41005: LD_VAR 0 4
41009: PUSH
41010: FOR_IN
41011: IFFALSE 41118
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41013: LD_STRING [
41015: PUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: CALL_OW 266
41025: STR
41026: PUSH
41027: LD_STRING , 
41029: STR
41030: PUSH
41031: LD_VAR 0 3
41035: PPUSH
41036: CALL_OW 250
41040: STR
41041: PUSH
41042: LD_STRING , 
41044: STR
41045: PUSH
41046: LD_VAR 0 3
41050: PPUSH
41051: CALL_OW 251
41055: STR
41056: PUSH
41057: LD_STRING , 
41059: STR
41060: PUSH
41061: LD_VAR 0 3
41065: PPUSH
41066: CALL_OW 254
41070: STR
41071: PUSH
41072: LD_STRING , 
41074: STR
41075: PUSH
41076: LD_VAR 0 3
41080: PPUSH
41081: LD_INT 1
41083: PPUSH
41084: CALL_OW 268
41088: STR
41089: PUSH
41090: LD_STRING , 
41092: STR
41093: PUSH
41094: LD_VAR 0 3
41098: PPUSH
41099: LD_INT 2
41101: PPUSH
41102: CALL_OW 268
41106: STR
41107: PUSH
41108: LD_STRING ],
41110: STR
41111: PPUSH
41112: CALL_OW 561
// end ;
41116: GO 41010
41118: POP
41119: POP
// AddToLog ( ]; ) ;
41120: LD_STRING ];
41122: PPUSH
41123: CALL_OW 561
// end ;
41127: LD_VAR 0 2
41131: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
// if not area or not rate or not max then
41139: LD_VAR 0 1
41143: NOT
41144: IFTRUE 41153
41146: PUSH
41147: LD_VAR 0 2
41151: NOT
41152: OR
41153: IFTRUE 41162
41155: PUSH
41156: LD_VAR 0 4
41160: NOT
41161: OR
41162: IFFALSE 41166
// exit ;
41164: GO 41355
// while 1 do
41166: LD_INT 1
41168: IFFALSE 41355
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41170: LD_ADDR_VAR 0 9
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: LD_INT 1
41182: PPUSH
41183: CALL_OW 287
41187: PUSH
41188: LD_INT 10
41190: MUL
41191: ST_TO_ADDR
// r := rate / 10 ;
41192: LD_ADDR_VAR 0 7
41196: PUSH
41197: LD_VAR 0 2
41201: PUSH
41202: LD_INT 10
41204: DIVREAL
41205: ST_TO_ADDR
// time := 1 1$00 ;
41206: LD_ADDR_VAR 0 8
41210: PUSH
41211: LD_INT 2100
41213: ST_TO_ADDR
// if amount < min then
41214: LD_VAR 0 9
41218: PUSH
41219: LD_VAR 0 3
41223: LESS
41224: IFFALSE 41242
// r := r * 2 else
41226: LD_ADDR_VAR 0 7
41230: PUSH
41231: LD_VAR 0 7
41235: PUSH
41236: LD_INT 2
41238: MUL
41239: ST_TO_ADDR
41240: GO 41268
// if amount > max then
41242: LD_VAR 0 9
41246: PUSH
41247: LD_VAR 0 4
41251: GREATER
41252: IFFALSE 41268
// r := r / 2 ;
41254: LD_ADDR_VAR 0 7
41258: PUSH
41259: LD_VAR 0 7
41263: PUSH
41264: LD_INT 2
41266: DIVREAL
41267: ST_TO_ADDR
// time := time / r ;
41268: LD_ADDR_VAR 0 8
41272: PUSH
41273: LD_VAR 0 8
41277: PUSH
41278: LD_VAR 0 7
41282: DIVREAL
41283: ST_TO_ADDR
// if time < 0 then
41284: LD_VAR 0 8
41288: PUSH
41289: LD_INT 0
41291: LESS
41292: IFFALSE 41309
// time := time * - 1 ;
41294: LD_ADDR_VAR 0 8
41298: PUSH
41299: LD_VAR 0 8
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: MUL
41308: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41309: LD_VAR 0 8
41313: PUSH
41314: LD_INT 35
41316: PPUSH
41317: LD_INT 875
41319: PPUSH
41320: CALL_OW 12
41324: PLUS
41325: PPUSH
41326: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41330: LD_INT 1
41332: PPUSH
41333: LD_INT 5
41335: PPUSH
41336: CALL_OW 12
41340: PPUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: LD_INT 1
41348: PPUSH
41349: CALL_OW 55
// end ;
41353: GO 41166
// end ;
41355: LD_VAR 0 5
41359: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41360: LD_INT 0
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
// if not turrets or not factories then
41370: LD_VAR 0 1
41374: NOT
41375: IFTRUE 41384
41377: PUSH
41378: LD_VAR 0 2
41382: NOT
41383: OR
41384: IFFALSE 41388
// exit ;
41386: GO 41695
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41388: LD_ADDR_VAR 0 10
41392: PUSH
41393: LD_INT 5
41395: PUSH
41396: LD_INT 6
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: LD_INT 4
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 3
41415: PUSH
41416: LD_INT 5
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 24
41430: PUSH
41431: LD_INT 25
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 23
41440: PUSH
41441: LD_INT 27
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 42
41454: PUSH
41455: LD_INT 43
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 44
41464: PUSH
41465: LD_INT 46
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 45
41474: PUSH
41475: LD_INT 47
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: ST_TO_ADDR
// result := [ ] ;
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: EMPTY
41498: ST_TO_ADDR
// for i in turrets do
41499: LD_ADDR_VAR 0 4
41503: PUSH
41504: LD_VAR 0 1
41508: PUSH
41509: FOR_IN
41510: IFFALSE 41693
// begin nat := GetNation ( i ) ;
41512: LD_ADDR_VAR 0 7
41516: PUSH
41517: LD_VAR 0 4
41521: PPUSH
41522: CALL_OW 248
41526: ST_TO_ADDR
// weapon := 0 ;
41527: LD_ADDR_VAR 0 8
41531: PUSH
41532: LD_INT 0
41534: ST_TO_ADDR
// if not nat then
41535: LD_VAR 0 7
41539: NOT
41540: IFFALSE 41544
// continue ;
41542: GO 41509
// for j in list [ nat ] do
41544: LD_ADDR_VAR 0 5
41548: PUSH
41549: LD_VAR 0 10
41553: PUSH
41554: LD_VAR 0 7
41558: ARRAY
41559: PUSH
41560: FOR_IN
41561: IFFALSE 41602
// if GetBWeapon ( i ) = j [ 1 ] then
41563: LD_VAR 0 4
41567: PPUSH
41568: CALL_OW 269
41572: PUSH
41573: LD_VAR 0 5
41577: PUSH
41578: LD_INT 1
41580: ARRAY
41581: EQUAL
41582: IFFALSE 41600
// begin weapon := j [ 2 ] ;
41584: LD_ADDR_VAR 0 8
41588: PUSH
41589: LD_VAR 0 5
41593: PUSH
41594: LD_INT 2
41596: ARRAY
41597: ST_TO_ADDR
// break ;
41598: GO 41602
// end ;
41600: GO 41560
41602: POP
41603: POP
// if not weapon then
41604: LD_VAR 0 8
41608: NOT
41609: IFFALSE 41613
// continue ;
41611: GO 41509
// for k in factories do
41613: LD_ADDR_VAR 0 6
41617: PUSH
41618: LD_VAR 0 2
41622: PUSH
41623: FOR_IN
41624: IFFALSE 41689
// begin weapons := AvailableWeaponList ( k ) ;
41626: LD_ADDR_VAR 0 9
41630: PUSH
41631: LD_VAR 0 6
41635: PPUSH
41636: CALL_OW 478
41640: ST_TO_ADDR
// if not weapons then
41641: LD_VAR 0 9
41645: NOT
41646: IFFALSE 41650
// continue ;
41648: GO 41623
// if weapon in weapons then
41650: LD_VAR 0 8
41654: PUSH
41655: LD_VAR 0 9
41659: IN
41660: IFFALSE 41687
// begin result := [ i , weapon ] ;
41662: LD_ADDR_VAR 0 3
41666: PUSH
41667: LD_VAR 0 4
41671: PUSH
41672: LD_VAR 0 8
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// exit ;
41681: POP
41682: POP
41683: POP
41684: POP
41685: GO 41695
// end ; end ;
41687: GO 41623
41689: POP
41690: POP
// end ;
41691: GO 41509
41693: POP
41694: POP
// end ;
41695: LD_VAR 0 3
41699: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41700: LD_INT 0
41702: PPUSH
// if not side or side > 8 then
41703: LD_VAR 0 3
41707: NOT
41708: IFTRUE 41720
41710: PUSH
41711: LD_VAR 0 3
41715: PUSH
41716: LD_INT 8
41718: GREATER
41719: OR
41720: IFFALSE 41724
// exit ;
41722: GO 41783
// if not range then
41724: LD_VAR 0 4
41728: NOT
41729: IFFALSE 41740
// range := - 12 ;
41731: LD_ADDR_VAR 0 4
41735: PUSH
41736: LD_INT 12
41738: NEG
41739: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41740: LD_VAR 0 1
41744: PPUSH
41745: LD_VAR 0 2
41749: PPUSH
41750: LD_VAR 0 3
41754: PPUSH
41755: LD_VAR 0 4
41759: PPUSH
41760: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41764: LD_VAR 0 1
41768: PPUSH
41769: LD_VAR 0 2
41773: PPUSH
41774: LD_VAR 0 3
41778: PPUSH
41779: CALL_OW 331
// end ;
41783: LD_VAR 0 5
41787: RET
// export function Video ( mode ) ; begin
41788: LD_INT 0
41790: PPUSH
// ingame_video = mode ;
41791: LD_ADDR_OWVAR 52
41795: PUSH
41796: LD_VAR 0 1
41800: ST_TO_ADDR
// interface_hidden = mode ;
41801: LD_ADDR_OWVAR 54
41805: PUSH
41806: LD_VAR 0 1
41810: ST_TO_ADDR
// end ;
41811: LD_VAR 0 2
41815: RET
// export function Join ( array , element ) ; begin
41816: LD_INT 0
41818: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: LD_VAR 0 1
41833: PUSH
41834: LD_INT 1
41836: PLUS
41837: PPUSH
41838: LD_VAR 0 2
41842: PPUSH
41843: CALL_OW 1
41847: ST_TO_ADDR
// end ;
41848: LD_VAR 0 3
41852: RET
// export function JoinUnion ( array , element ) ; begin
41853: LD_INT 0
41855: PPUSH
// result := array union element ;
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: LD_VAR 0 2
41870: UNION
41871: ST_TO_ADDR
// end ;
41872: LD_VAR 0 3
41876: RET
// export function GetBehemoths ( side ) ; begin
41877: LD_INT 0
41879: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41880: LD_ADDR_VAR 0 2
41884: PUSH
41885: LD_INT 22
41887: PUSH
41888: LD_VAR 0 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 31
41899: PUSH
41900: LD_INT 25
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PPUSH
41911: CALL_OW 69
41915: ST_TO_ADDR
// end ;
41916: LD_VAR 0 2
41920: RET
// export function Shuffle ( array ) ; var i , index ; begin
41921: LD_INT 0
41923: PPUSH
41924: PPUSH
41925: PPUSH
// result := [ ] ;
41926: LD_ADDR_VAR 0 2
41930: PUSH
41931: EMPTY
41932: ST_TO_ADDR
// if not array then
41933: LD_VAR 0 1
41937: NOT
41938: IFFALSE 41942
// exit ;
41940: GO 42041
// Randomize ;
41942: CALL_OW 10
// for i = array downto 1 do
41946: LD_ADDR_VAR 0 3
41950: PUSH
41951: DOUBLE
41952: LD_VAR 0 1
41956: INC
41957: ST_TO_ADDR
41958: LD_INT 1
41960: PUSH
41961: FOR_DOWNTO
41962: IFFALSE 42039
// begin index := rand ( 1 , array ) ;
41964: LD_ADDR_VAR 0 4
41968: PUSH
41969: LD_INT 1
41971: PPUSH
41972: LD_VAR 0 1
41976: PPUSH
41977: CALL_OW 12
41981: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41982: LD_ADDR_VAR 0 2
41986: PUSH
41987: LD_VAR 0 2
41991: PPUSH
41992: LD_VAR 0 2
41996: PUSH
41997: LD_INT 1
41999: PLUS
42000: PPUSH
42001: LD_VAR 0 1
42005: PUSH
42006: LD_VAR 0 4
42010: ARRAY
42011: PPUSH
42012: CALL_OW 2
42016: ST_TO_ADDR
// array := Delete ( array , index ) ;
42017: LD_ADDR_VAR 0 1
42021: PUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: LD_VAR 0 4
42031: PPUSH
42032: CALL_OW 3
42036: ST_TO_ADDR
// end ;
42037: GO 41961
42039: POP
42040: POP
// end ;
42041: LD_VAR 0 2
42045: RET
// export function GetBaseMaterials ( base ) ; begin
42046: LD_INT 0
42048: PPUSH
// result := [ 0 , 0 , 0 ] ;
42049: LD_ADDR_VAR 0 2
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// if not base then
42068: LD_VAR 0 1
42072: NOT
42073: IFFALSE 42077
// exit ;
42075: GO 42126
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42077: LD_ADDR_VAR 0 2
42081: PUSH
42082: LD_VAR 0 1
42086: PPUSH
42087: LD_INT 1
42089: PPUSH
42090: CALL_OW 275
42094: PUSH
42095: LD_VAR 0 1
42099: PPUSH
42100: LD_INT 2
42102: PPUSH
42103: CALL_OW 275
42107: PUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: LD_INT 3
42115: PPUSH
42116: CALL_OW 275
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// end ;
42126: LD_VAR 0 2
42130: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
// result := array ;
42135: LD_ADDR_VAR 0 3
42139: PUSH
42140: LD_VAR 0 1
42144: ST_TO_ADDR
// if size >= result then
42145: LD_VAR 0 2
42149: PUSH
42150: LD_VAR 0 3
42154: GREATEREQUAL
42155: IFFALSE 42159
// exit ;
42157: GO 42209
// if size then
42159: LD_VAR 0 2
42163: IFFALSE 42209
// for i := array downto size do
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: DOUBLE
42171: LD_VAR 0 1
42175: INC
42176: ST_TO_ADDR
42177: LD_VAR 0 2
42181: PUSH
42182: FOR_DOWNTO
42183: IFFALSE 42207
// result := Delete ( result , result ) ;
42185: LD_ADDR_VAR 0 3
42189: PUSH
42190: LD_VAR 0 3
42194: PPUSH
42195: LD_VAR 0 3
42199: PPUSH
42200: CALL_OW 3
42204: ST_TO_ADDR
42205: GO 42182
42207: POP
42208: POP
// end ;
42209: LD_VAR 0 3
42213: RET
// export function ComExit ( unit ) ; var tmp ; begin
42214: LD_INT 0
42216: PPUSH
42217: PPUSH
// if not IsInUnit ( unit ) then
42218: LD_VAR 0 1
42222: PPUSH
42223: CALL_OW 310
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42292
// tmp := IsInUnit ( unit ) ;
42232: LD_ADDR_VAR 0 3
42236: PUSH
42237: LD_VAR 0 1
42241: PPUSH
42242: CALL_OW 310
42246: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42247: LD_VAR 0 3
42251: PPUSH
42252: CALL_OW 247
42256: PUSH
42257: LD_INT 2
42259: EQUAL
42260: IFFALSE 42273
// ComExitVehicle ( unit ) else
42262: LD_VAR 0 1
42266: PPUSH
42267: CALL_OW 121
42271: GO 42282
// ComExitBuilding ( unit ) ;
42273: LD_VAR 0 1
42277: PPUSH
42278: CALL_OW 122
// result := tmp ;
42282: LD_ADDR_VAR 0 2
42286: PUSH
42287: LD_VAR 0 3
42291: ST_TO_ADDR
// end ;
42292: LD_VAR 0 2
42296: RET
// export function ComExitAll ( units ) ; var i ; begin
42297: LD_INT 0
42299: PPUSH
42300: PPUSH
// if not units then
42301: LD_VAR 0 1
42305: NOT
42306: IFFALSE 42310
// exit ;
42308: GO 42336
// for i in units do
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_VAR 0 1
42319: PUSH
42320: FOR_IN
42321: IFFALSE 42334
// ComExit ( i ) ;
42323: LD_VAR 0 3
42327: PPUSH
42328: CALL 42214 0 1
42332: GO 42320
42334: POP
42335: POP
// end ;
42336: LD_VAR 0 2
42340: RET
// export function ResetHc ; begin
42341: LD_INT 0
42343: PPUSH
// InitHc ;
42344: CALL_OW 19
// hc_importance := 0 ;
42348: LD_ADDR_OWVAR 32
42352: PUSH
42353: LD_INT 0
42355: ST_TO_ADDR
// end ;
42356: LD_VAR 0 1
42360: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42361: LD_INT 0
42363: PPUSH
42364: PPUSH
42365: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42366: LD_ADDR_VAR 0 6
42370: PUSH
42371: LD_VAR 0 1
42375: PUSH
42376: LD_VAR 0 3
42380: PLUS
42381: PUSH
42382: LD_INT 2
42384: DIV
42385: ST_TO_ADDR
// if _x < 0 then
42386: LD_VAR 0 6
42390: PUSH
42391: LD_INT 0
42393: LESS
42394: IFFALSE 42411
// _x := _x * - 1 ;
42396: LD_ADDR_VAR 0 6
42400: PUSH
42401: LD_VAR 0 6
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: MUL
42410: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42411: LD_ADDR_VAR 0 7
42415: PUSH
42416: LD_VAR 0 2
42420: PUSH
42421: LD_VAR 0 4
42425: PLUS
42426: PUSH
42427: LD_INT 2
42429: DIV
42430: ST_TO_ADDR
// if _y < 0 then
42431: LD_VAR 0 7
42435: PUSH
42436: LD_INT 0
42438: LESS
42439: IFFALSE 42456
// _y := _y * - 1 ;
42441: LD_ADDR_VAR 0 7
42445: PUSH
42446: LD_VAR 0 7
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: MUL
42455: ST_TO_ADDR
// result := [ _x , _y ] ;
42456: LD_ADDR_VAR 0 5
42460: PUSH
42461: LD_VAR 0 6
42465: PUSH
42466: LD_VAR 0 7
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// end ;
42475: LD_VAR 0 5
42479: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42480: LD_INT 0
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
// task := GetTaskList ( unit ) ;
42486: LD_ADDR_VAR 0 7
42490: PUSH
42491: LD_VAR 0 1
42495: PPUSH
42496: CALL_OW 437
42500: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42501: LD_VAR 0 7
42505: NOT
42506: IFFALSE 42525
42508: PUSH
42509: LD_VAR 0 1
42513: PPUSH
42514: LD_VAR 0 2
42518: PPUSH
42519: CALL_OW 308
42523: NOT
42524: AND
42525: IFFALSE 42529
// exit ;
42527: GO 42647
// if IsInArea ( unit , area ) then
42529: LD_VAR 0 1
42533: PPUSH
42534: LD_VAR 0 2
42538: PPUSH
42539: CALL_OW 308
42543: IFFALSE 42561
// begin ComMoveToArea ( unit , goAway ) ;
42545: LD_VAR 0 1
42549: PPUSH
42550: LD_VAR 0 3
42554: PPUSH
42555: CALL_OW 113
// exit ;
42559: GO 42647
// end ; if task [ 1 ] [ 1 ] <> M then
42561: LD_VAR 0 7
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PUSH
42570: LD_INT 1
42572: ARRAY
42573: PUSH
42574: LD_STRING M
42576: NONEQUAL
42577: IFFALSE 42581
// exit ;
42579: GO 42647
// x := task [ 1 ] [ 2 ] ;
42581: LD_ADDR_VAR 0 5
42585: PUSH
42586: LD_VAR 0 7
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PUSH
42595: LD_INT 2
42597: ARRAY
42598: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42599: LD_ADDR_VAR 0 6
42603: PUSH
42604: LD_VAR 0 7
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: PUSH
42613: LD_INT 3
42615: ARRAY
42616: ST_TO_ADDR
// if InArea ( x , y , area ) then
42617: LD_VAR 0 5
42621: PPUSH
42622: LD_VAR 0 6
42626: PPUSH
42627: LD_VAR 0 2
42631: PPUSH
42632: CALL_OW 309
42636: IFFALSE 42647
// ComStop ( unit ) ;
42638: LD_VAR 0 1
42642: PPUSH
42643: CALL_OW 141
// end ;
42647: LD_VAR 0 4
42651: RET
// export function Abs ( value ) ; begin
42652: LD_INT 0
42654: PPUSH
// result := value ;
42655: LD_ADDR_VAR 0 2
42659: PUSH
42660: LD_VAR 0 1
42664: ST_TO_ADDR
// if value < 0 then
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 0
42672: LESS
42673: IFFALSE 42690
// result := value * - 1 ;
42675: LD_ADDR_VAR 0 2
42679: PUSH
42680: LD_VAR 0 1
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: MUL
42689: ST_TO_ADDR
// end ;
42690: LD_VAR 0 2
42694: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42695: LD_INT 0
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
42703: PPUSH
42704: PPUSH
// if not unit or not building then
42705: LD_VAR 0 1
42709: NOT
42710: IFTRUE 42719
42712: PUSH
42713: LD_VAR 0 2
42717: NOT
42718: OR
42719: IFFALSE 42723
// exit ;
42721: GO 42951
// x := GetX ( building ) ;
42723: LD_ADDR_VAR 0 4
42727: PUSH
42728: LD_VAR 0 2
42732: PPUSH
42733: CALL_OW 250
42737: ST_TO_ADDR
// y := GetY ( building ) ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_VAR 0 2
42747: PPUSH
42748: CALL_OW 251
42752: ST_TO_ADDR
// d := GetDir ( building ) ;
42753: LD_ADDR_VAR 0 8
42757: PUSH
42758: LD_VAR 0 2
42762: PPUSH
42763: CALL_OW 254
42767: ST_TO_ADDR
// r := 4 ;
42768: LD_ADDR_VAR 0 9
42772: PUSH
42773: LD_INT 4
42775: ST_TO_ADDR
// for i := 1 to 5 do
42776: LD_ADDR_VAR 0 10
42780: PUSH
42781: DOUBLE
42782: LD_INT 1
42784: DEC
42785: ST_TO_ADDR
42786: LD_INT 5
42788: PUSH
42789: FOR_TO
42790: IFFALSE 42949
// begin _x := ShiftX ( x , d , r + i ) ;
42792: LD_ADDR_VAR 0 5
42796: PUSH
42797: LD_VAR 0 4
42801: PPUSH
42802: LD_VAR 0 8
42806: PPUSH
42807: LD_VAR 0 9
42811: PUSH
42812: LD_VAR 0 10
42816: PLUS
42817: PPUSH
42818: CALL_OW 272
42822: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42823: LD_ADDR_VAR 0 7
42827: PUSH
42828: LD_VAR 0 6
42832: PPUSH
42833: LD_VAR 0 8
42837: PPUSH
42838: LD_VAR 0 9
42842: PUSH
42843: LD_VAR 0 10
42847: PLUS
42848: PPUSH
42849: CALL_OW 273
42853: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42854: LD_VAR 0 5
42858: PPUSH
42859: LD_VAR 0 7
42863: PPUSH
42864: CALL_OW 488
42868: IFFALSE 42903
42870: PUSH
42871: LD_VAR 0 5
42875: PPUSH
42876: LD_VAR 0 7
42880: PPUSH
42881: CALL_OW 428
42885: PPUSH
42886: CALL_OW 247
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: IN
42901: NOT
42902: AND
42903: IFFALSE 42947
// begin ComMoveXY ( unit , _x , _y ) ;
42905: LD_VAR 0 1
42909: PPUSH
42910: LD_VAR 0 5
42914: PPUSH
42915: LD_VAR 0 7
42919: PPUSH
42920: CALL_OW 111
// result := [ _x , _y ] ;
42924: LD_ADDR_VAR 0 3
42928: PUSH
42929: LD_VAR 0 5
42933: PUSH
42934: LD_VAR 0 7
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// exit ;
42943: POP
42944: POP
42945: GO 42951
// end ; end ;
42947: GO 42789
42949: POP
42950: POP
// end ;
42951: LD_VAR 0 3
42955: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42956: LD_INT 0
42958: PPUSH
42959: PPUSH
42960: PPUSH
// result := 0 ;
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 0
42968: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42969: LD_VAR 0 1
42973: PUSH
42974: LD_INT 0
42976: LESS
42977: IFTRUE 42989
42979: PUSH
42980: LD_VAR 0 1
42984: PUSH
42985: LD_INT 8
42987: GREATER
42988: OR
42989: IFTRUE 43001
42991: PUSH
42992: LD_VAR 0 2
42996: PUSH
42997: LD_INT 0
42999: LESS
43000: OR
43001: IFTRUE 43013
43003: PUSH
43004: LD_VAR 0 2
43008: PUSH
43009: LD_INT 8
43011: GREATER
43012: OR
43013: IFFALSE 43017
// exit ;
43015: GO 43092
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43017: LD_ADDR_VAR 0 4
43021: PUSH
43022: LD_INT 22
43024: PUSH
43025: LD_VAR 0 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PPUSH
43034: CALL_OW 69
43038: PUSH
43039: FOR_IN
43040: IFFALSE 43090
// begin un := UnitShoot ( i ) ;
43042: LD_ADDR_VAR 0 5
43046: PUSH
43047: LD_VAR 0 4
43051: PPUSH
43052: CALL_OW 504
43056: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43057: LD_VAR 0 5
43061: PPUSH
43062: CALL_OW 255
43066: PUSH
43067: LD_VAR 0 1
43071: EQUAL
43072: IFFALSE 43088
// begin result := un ;
43074: LD_ADDR_VAR 0 3
43078: PUSH
43079: LD_VAR 0 5
43083: ST_TO_ADDR
// exit ;
43084: POP
43085: POP
43086: GO 43092
// end ; end ;
43088: GO 43039
43090: POP
43091: POP
// end ;
43092: LD_VAR 0 3
43096: RET
// export function GetCargoBay ( units ) ; begin
43097: LD_INT 0
43099: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43100: LD_ADDR_VAR 0 2
43104: PUSH
43105: LD_VAR 0 1
43109: PPUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 34
43115: PUSH
43116: LD_INT 12
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 34
43125: PUSH
43126: LD_INT 51
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 34
43135: PUSH
43136: LD_INT 32
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 34
43145: PUSH
43146: LD_INT 89
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: PPUSH
43160: CALL_OW 72
43164: ST_TO_ADDR
// end ;
43165: LD_VAR 0 2
43169: RET
// export function Negate ( value ) ; begin
43170: LD_INT 0
43172: PPUSH
// result := not value ;
43173: LD_ADDR_VAR 0 2
43177: PUSH
43178: LD_VAR 0 1
43182: NOT
43183: ST_TO_ADDR
// end ;
43184: LD_VAR 0 2
43188: RET
// export function Inc ( value ) ; begin
43189: LD_INT 0
43191: PPUSH
// result := value + 1 ;
43192: LD_ADDR_VAR 0 2
43196: PUSH
43197: LD_VAR 0 1
43201: PUSH
43202: LD_INT 1
43204: PLUS
43205: ST_TO_ADDR
// end ;
43206: LD_VAR 0 2
43210: RET
// export function Dec ( value ) ; begin
43211: LD_INT 0
43213: PPUSH
// result := value - 1 ;
43214: LD_ADDR_VAR 0 2
43218: PUSH
43219: LD_VAR 0 1
43223: PUSH
43224: LD_INT 1
43226: MINUS
43227: ST_TO_ADDR
// end ;
43228: LD_VAR 0 2
43232: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43233: LD_INT 0
43235: PPUSH
43236: PPUSH
43237: PPUSH
43238: PPUSH
43239: PPUSH
43240: PPUSH
43241: PPUSH
43242: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43243: LD_VAR 0 1
43247: PPUSH
43248: LD_VAR 0 2
43252: PPUSH
43253: CALL_OW 488
43257: NOT
43258: IFTRUE 43277
43260: PUSH
43261: LD_VAR 0 3
43265: PPUSH
43266: LD_VAR 0 4
43270: PPUSH
43271: CALL_OW 488
43275: NOT
43276: OR
43277: IFFALSE 43290
// begin result := - 1 ;
43279: LD_ADDR_VAR 0 5
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: ST_TO_ADDR
// exit ;
43288: GO 43525
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43290: LD_ADDR_VAR 0 12
43294: PUSH
43295: LD_VAR 0 1
43299: PPUSH
43300: LD_VAR 0 2
43304: PPUSH
43305: LD_VAR 0 3
43309: PPUSH
43310: LD_VAR 0 4
43314: PPUSH
43315: CALL 42361 0 4
43319: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43320: LD_ADDR_VAR 0 11
43324: PUSH
43325: LD_VAR 0 1
43329: PPUSH
43330: LD_VAR 0 2
43334: PPUSH
43335: LD_VAR 0 12
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: PPUSH
43344: LD_VAR 0 12
43348: PUSH
43349: LD_INT 2
43351: ARRAY
43352: PPUSH
43353: CALL_OW 298
43357: ST_TO_ADDR
// distance := 9999 ;
43358: LD_ADDR_VAR 0 10
43362: PUSH
43363: LD_INT 9999
43365: ST_TO_ADDR
// for i := 0 to 5 do
43366: LD_ADDR_VAR 0 6
43370: PUSH
43371: DOUBLE
43372: LD_INT 0
43374: DEC
43375: ST_TO_ADDR
43376: LD_INT 5
43378: PUSH
43379: FOR_TO
43380: IFFALSE 43523
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43382: LD_ADDR_VAR 0 7
43386: PUSH
43387: LD_VAR 0 1
43391: PPUSH
43392: LD_VAR 0 6
43396: PPUSH
43397: LD_VAR 0 11
43401: PPUSH
43402: CALL_OW 272
43406: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43407: LD_ADDR_VAR 0 8
43411: PUSH
43412: LD_VAR 0 2
43416: PPUSH
43417: LD_VAR 0 6
43421: PPUSH
43422: LD_VAR 0 11
43426: PPUSH
43427: CALL_OW 273
43431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43432: LD_VAR 0 7
43436: PPUSH
43437: LD_VAR 0 8
43441: PPUSH
43442: CALL_OW 488
43446: NOT
43447: IFFALSE 43451
// continue ;
43449: GO 43379
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43451: LD_ADDR_VAR 0 9
43455: PUSH
43456: LD_VAR 0 12
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PPUSH
43465: LD_VAR 0 12
43469: PUSH
43470: LD_INT 2
43472: ARRAY
43473: PPUSH
43474: LD_VAR 0 7
43478: PPUSH
43479: LD_VAR 0 8
43483: PPUSH
43484: CALL_OW 298
43488: ST_TO_ADDR
// if tmp < distance then
43489: LD_VAR 0 9
43493: PUSH
43494: LD_VAR 0 10
43498: LESS
43499: IFFALSE 43521
// begin result := i ;
43501: LD_ADDR_VAR 0 5
43505: PUSH
43506: LD_VAR 0 6
43510: ST_TO_ADDR
// distance := tmp ;
43511: LD_ADDR_VAR 0 10
43515: PUSH
43516: LD_VAR 0 9
43520: ST_TO_ADDR
// end ; end ;
43521: GO 43379
43523: POP
43524: POP
// end ;
43525: LD_VAR 0 5
43529: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43530: LD_INT 0
43532: PPUSH
43533: PPUSH
// if not driver or not IsInUnit ( driver ) then
43534: LD_VAR 0 1
43538: NOT
43539: IFTRUE 43553
43541: PUSH
43542: LD_VAR 0 1
43546: PPUSH
43547: CALL_OW 310
43551: NOT
43552: OR
43553: IFFALSE 43557
// exit ;
43555: GO 43647
// vehicle := IsInUnit ( driver ) ;
43557: LD_ADDR_VAR 0 3
43561: PUSH
43562: LD_VAR 0 1
43566: PPUSH
43567: CALL_OW 310
43571: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43572: LD_VAR 0 1
43576: PPUSH
43577: LD_STRING \
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: PUSH
43607: LD_STRING E
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_VAR 0 3
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PPUSH
43643: CALL_OW 446
// end ;
43647: LD_VAR 0 2
43651: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43652: LD_INT 0
43654: PPUSH
43655: PPUSH
// if not driver or not IsInUnit ( driver ) then
43656: LD_VAR 0 1
43660: NOT
43661: IFTRUE 43675
43663: PUSH
43664: LD_VAR 0 1
43668: PPUSH
43669: CALL_OW 310
43673: NOT
43674: OR
43675: IFFALSE 43679
// exit ;
43677: GO 43769
// vehicle := IsInUnit ( driver ) ;
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_VAR 0 1
43688: PPUSH
43689: CALL_OW 310
43693: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43694: LD_VAR 0 1
43698: PPUSH
43699: LD_STRING \
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: PUSH
43729: LD_STRING E
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_VAR 0 3
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PPUSH
43765: CALL_OW 447
// end ;
43769: LD_VAR 0 2
43773: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43774: LD_INT 0
43776: PPUSH
43777: PPUSH
43778: PPUSH
// tmp := [ ] ;
43779: LD_ADDR_VAR 0 5
43783: PUSH
43784: EMPTY
43785: ST_TO_ADDR
// for i in units do
43786: LD_ADDR_VAR 0 4
43790: PUSH
43791: LD_VAR 0 1
43795: PUSH
43796: FOR_IN
43797: IFFALSE 43835
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43799: LD_ADDR_VAR 0 5
43803: PUSH
43804: LD_VAR 0 5
43808: PPUSH
43809: LD_VAR 0 5
43813: PUSH
43814: LD_INT 1
43816: PLUS
43817: PPUSH
43818: LD_VAR 0 4
43822: PPUSH
43823: CALL_OW 256
43827: PPUSH
43828: CALL_OW 2
43832: ST_TO_ADDR
43833: GO 43796
43835: POP
43836: POP
// if not tmp then
43837: LD_VAR 0 5
43841: NOT
43842: IFFALSE 43846
// exit ;
43844: GO 43894
// if asc then
43846: LD_VAR 0 2
43850: IFFALSE 43874
// result := SortListByListAsc ( units , tmp ) else
43852: LD_ADDR_VAR 0 3
43856: PUSH
43857: LD_VAR 0 1
43861: PPUSH
43862: LD_VAR 0 5
43866: PPUSH
43867: CALL_OW 76
43871: ST_TO_ADDR
43872: GO 43894
// result := SortListByListDesc ( units , tmp ) ;
43874: LD_ADDR_VAR 0 3
43878: PUSH
43879: LD_VAR 0 1
43883: PPUSH
43884: LD_VAR 0 5
43888: PPUSH
43889: CALL_OW 77
43893: ST_TO_ADDR
// end ;
43894: LD_VAR 0 3
43898: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43899: LD_INT 0
43901: PPUSH
43902: PPUSH
// task := GetTaskList ( mech ) ;
43903: LD_ADDR_VAR 0 4
43907: PUSH
43908: LD_VAR 0 1
43912: PPUSH
43913: CALL_OW 437
43917: ST_TO_ADDR
// if not task then
43918: LD_VAR 0 4
43922: NOT
43923: IFFALSE 43927
// exit ;
43925: GO 43971
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43927: LD_ADDR_VAR 0 3
43931: PUSH
43932: LD_VAR 0 4
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PUSH
43941: LD_INT 1
43943: ARRAY
43944: PUSH
43945: LD_STRING r
43947: EQUAL
43948: IFFALSE 43970
43950: PUSH
43951: LD_VAR 0 4
43955: PUSH
43956: LD_INT 1
43958: ARRAY
43959: PUSH
43960: LD_INT 4
43962: ARRAY
43963: PUSH
43964: LD_VAR 0 2
43968: EQUAL
43969: AND
43970: ST_TO_ADDR
// end ;
43971: LD_VAR 0 3
43975: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43976: LD_INT 0
43978: PPUSH
// SetDir ( unit , d ) ;
43979: LD_VAR 0 1
43983: PPUSH
43984: LD_VAR 0 4
43988: PPUSH
43989: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43993: LD_ADDR_VAR 0 6
43997: PUSH
43998: LD_VAR 0 1
44002: PPUSH
44003: LD_VAR 0 2
44007: PPUSH
44008: LD_VAR 0 3
44012: PPUSH
44013: LD_VAR 0 5
44017: PPUSH
44018: CALL_OW 48
44022: ST_TO_ADDR
// end ;
44023: LD_VAR 0 6
44027: RET
// export function ToNaturalNumber ( number ) ; begin
44028: LD_INT 0
44030: PPUSH
// result := number div 1 ;
44031: LD_ADDR_VAR 0 2
44035: PUSH
44036: LD_VAR 0 1
44040: PUSH
44041: LD_INT 1
44043: DIV
44044: ST_TO_ADDR
// if number < 0 then
44045: LD_VAR 0 1
44049: PUSH
44050: LD_INT 0
44052: LESS
44053: IFFALSE 44063
// result := 0 ;
44055: LD_ADDR_VAR 0 2
44059: PUSH
44060: LD_INT 0
44062: ST_TO_ADDR
// end ;
44063: LD_VAR 0 2
44067: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
44068: LD_INT 0
44070: PPUSH
44071: PPUSH
44072: PPUSH
// if not buildings then
44073: LD_VAR 0 1
44077: NOT
44078: IFFALSE 44082
// exit ;
44080: GO 44197
// tmp := [ ] ;
44082: LD_ADDR_VAR 0 5
44086: PUSH
44087: EMPTY
44088: ST_TO_ADDR
// for b in buildings do
44089: LD_ADDR_VAR 0 4
44093: PUSH
44094: LD_VAR 0 1
44098: PUSH
44099: FOR_IN
44100: IFFALSE 44138
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
44102: LD_ADDR_VAR 0 5
44106: PUSH
44107: LD_VAR 0 5
44111: PPUSH
44112: LD_VAR 0 5
44116: PUSH
44117: LD_INT 1
44119: PLUS
44120: PPUSH
44121: LD_VAR 0 4
44125: PPUSH
44126: CALL_OW 266
44130: PPUSH
44131: CALL_OW 1
44135: ST_TO_ADDR
44136: GO 44099
44138: POP
44139: POP
// if not tmp then
44140: LD_VAR 0 5
44144: NOT
44145: IFFALSE 44149
// exit ;
44147: GO 44197
// if asc then
44149: LD_VAR 0 2
44153: IFFALSE 44177
// result := SortListByListAsc ( buildings , tmp ) else
44155: LD_ADDR_VAR 0 3
44159: PUSH
44160: LD_VAR 0 1
44164: PPUSH
44165: LD_VAR 0 5
44169: PPUSH
44170: CALL_OW 76
44174: ST_TO_ADDR
44175: GO 44197
// result := SortListByListDesc ( buildings , tmp ) ;
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_VAR 0 1
44186: PPUSH
44187: LD_VAR 0 5
44191: PPUSH
44192: CALL_OW 77
44196: ST_TO_ADDR
// end ;
44197: LD_VAR 0 3
44201: RET
// export function SortByClass ( units , class ) ; var un ; begin
44202: LD_INT 0
44204: PPUSH
44205: PPUSH
// if not units or not class then
44206: LD_VAR 0 1
44210: NOT
44211: IFTRUE 44220
44213: PUSH
44214: LD_VAR 0 2
44218: NOT
44219: OR
44220: IFFALSE 44224
// exit ;
44222: GO 44319
// result := [ ] ;
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: EMPTY
44230: ST_TO_ADDR
// for un in units do
44231: LD_ADDR_VAR 0 4
44235: PUSH
44236: LD_VAR 0 1
44240: PUSH
44241: FOR_IN
44242: IFFALSE 44317
// if GetClass ( un ) = class then
44244: LD_VAR 0 4
44248: PPUSH
44249: CALL_OW 257
44253: PUSH
44254: LD_VAR 0 2
44258: EQUAL
44259: IFFALSE 44286
// result := Insert ( result , 1 , un ) else
44261: LD_ADDR_VAR 0 3
44265: PUSH
44266: LD_VAR 0 3
44270: PPUSH
44271: LD_INT 1
44273: PPUSH
44274: LD_VAR 0 4
44278: PPUSH
44279: CALL_OW 2
44283: ST_TO_ADDR
44284: GO 44315
// result := Replace ( result , result + 1 , un ) ;
44286: LD_ADDR_VAR 0 3
44290: PUSH
44291: LD_VAR 0 3
44295: PPUSH
44296: LD_VAR 0 3
44300: PUSH
44301: LD_INT 1
44303: PLUS
44304: PPUSH
44305: LD_VAR 0 4
44309: PPUSH
44310: CALL_OW 1
44314: ST_TO_ADDR
44315: GO 44241
44317: POP
44318: POP
// end ;
44319: LD_VAR 0 3
44323: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44324: LD_INT 0
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
// result := [ ] ;
44333: LD_ADDR_VAR 0 4
44337: PUSH
44338: EMPTY
44339: ST_TO_ADDR
// if x - r < 0 then
44340: LD_VAR 0 1
44344: PUSH
44345: LD_VAR 0 3
44349: MINUS
44350: PUSH
44351: LD_INT 0
44353: LESS
44354: IFFALSE 44366
// min_x := 0 else
44356: LD_ADDR_VAR 0 8
44360: PUSH
44361: LD_INT 0
44363: ST_TO_ADDR
44364: GO 44382
// min_x := x - r ;
44366: LD_ADDR_VAR 0 8
44370: PUSH
44371: LD_VAR 0 1
44375: PUSH
44376: LD_VAR 0 3
44380: MINUS
44381: ST_TO_ADDR
// if y - r < 0 then
44382: LD_VAR 0 2
44386: PUSH
44387: LD_VAR 0 3
44391: MINUS
44392: PUSH
44393: LD_INT 0
44395: LESS
44396: IFFALSE 44408
// min_y := 0 else
44398: LD_ADDR_VAR 0 7
44402: PUSH
44403: LD_INT 0
44405: ST_TO_ADDR
44406: GO 44424
// min_y := y - r ;
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: LD_VAR 0 2
44417: PUSH
44418: LD_VAR 0 3
44422: MINUS
44423: ST_TO_ADDR
// max_x := x + r ;
44424: LD_ADDR_VAR 0 9
44428: PUSH
44429: LD_VAR 0 1
44433: PUSH
44434: LD_VAR 0 3
44438: PLUS
44439: ST_TO_ADDR
// max_y := y + r ;
44440: LD_ADDR_VAR 0 10
44444: PUSH
44445: LD_VAR 0 2
44449: PUSH
44450: LD_VAR 0 3
44454: PLUS
44455: ST_TO_ADDR
// for _x = min_x to max_x do
44456: LD_ADDR_VAR 0 5
44460: PUSH
44461: DOUBLE
44462: LD_VAR 0 8
44466: DEC
44467: ST_TO_ADDR
44468: LD_VAR 0 9
44472: PUSH
44473: FOR_TO
44474: IFFALSE 44575
// for _y = min_y to max_y do
44476: LD_ADDR_VAR 0 6
44480: PUSH
44481: DOUBLE
44482: LD_VAR 0 7
44486: DEC
44487: ST_TO_ADDR
44488: LD_VAR 0 10
44492: PUSH
44493: FOR_TO
44494: IFFALSE 44571
// begin if not ValidHex ( _x , _y ) then
44496: LD_VAR 0 5
44500: PPUSH
44501: LD_VAR 0 6
44505: PPUSH
44506: CALL_OW 488
44510: NOT
44511: IFFALSE 44515
// continue ;
44513: GO 44493
// if GetResourceTypeXY ( _x , _y ) then
44515: LD_VAR 0 5
44519: PPUSH
44520: LD_VAR 0 6
44524: PPUSH
44525: CALL_OW 283
44529: IFFALSE 44569
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44531: LD_ADDR_VAR 0 4
44535: PUSH
44536: LD_VAR 0 4
44540: PPUSH
44541: LD_VAR 0 4
44545: PUSH
44546: LD_INT 1
44548: PLUS
44549: PPUSH
44550: LD_VAR 0 5
44554: PUSH
44555: LD_VAR 0 6
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PPUSH
44564: CALL_OW 1
44568: ST_TO_ADDR
// end ;
44569: GO 44493
44571: POP
44572: POP
44573: GO 44473
44575: POP
44576: POP
// end ;
44577: LD_VAR 0 4
44581: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44582: LD_INT 0
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
// if not units then
44592: LD_VAR 0 1
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 45133
// result := UnitFilter ( units , [ f_ok ] ) ;
44601: LD_ADDR_VAR 0 3
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: LD_INT 50
44613: PUSH
44614: EMPTY
44615: LIST
44616: PPUSH
44617: CALL_OW 72
44621: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44622: LD_ADDR_VAR 0 8
44626: PUSH
44627: LD_VAR 0 1
44631: PUSH
44632: LD_INT 1
44634: ARRAY
44635: PPUSH
44636: CALL_OW 255
44640: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44641: LD_ADDR_VAR 0 10
44645: PUSH
44646: LD_INT 29
44648: PUSH
44649: LD_INT 91
44651: PUSH
44652: LD_INT 49
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// if not result then
44660: LD_VAR 0 3
44664: NOT
44665: IFFALSE 44669
// exit ;
44667: GO 45133
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44669: LD_ADDR_VAR 0 5
44673: PUSH
44674: LD_INT 81
44676: PUSH
44677: LD_VAR 0 8
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PPUSH
44686: CALL_OW 69
44690: ST_TO_ADDR
// for i in result do
44691: LD_ADDR_VAR 0 4
44695: PUSH
44696: LD_VAR 0 3
44700: PUSH
44701: FOR_IN
44702: IFFALSE 45131
// begin tag := GetTag ( i ) + 1 ;
44704: LD_ADDR_VAR 0 9
44708: PUSH
44709: LD_VAR 0 4
44713: PPUSH
44714: CALL_OW 110
44718: PUSH
44719: LD_INT 1
44721: PLUS
44722: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44723: LD_ADDR_VAR 0 7
44727: PUSH
44728: LD_VAR 0 4
44732: PPUSH
44733: CALL_OW 250
44737: PPUSH
44738: LD_VAR 0 4
44742: PPUSH
44743: CALL_OW 251
44747: PPUSH
44748: LD_INT 4
44750: PPUSH
44751: CALL 44324 0 3
44755: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44756: LD_VAR 0 4
44760: PPUSH
44761: CALL_OW 247
44765: PUSH
44766: LD_INT 2
44768: EQUAL
44769: IFFALSE 44781
44771: PUSH
44772: LD_VAR 0 7
44776: PUSH
44777: LD_INT 2
44779: GREATER
44780: AND
44781: IFFALSE 44801
44783: PUSH
44784: LD_VAR 0 4
44788: PPUSH
44789: CALL_OW 264
44793: PUSH
44794: LD_VAR 0 10
44798: IN
44799: NOT
44800: AND
44801: IFFALSE 44840
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44803: LD_VAR 0 4
44807: PPUSH
44808: LD_VAR 0 7
44812: PUSH
44813: LD_INT 1
44815: ARRAY
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PPUSH
44821: LD_VAR 0 7
44825: PUSH
44826: LD_INT 1
44828: ARRAY
44829: PUSH
44830: LD_INT 2
44832: ARRAY
44833: PPUSH
44834: CALL_OW 116
44838: GO 45129
// if path > tag then
44840: LD_VAR 0 2
44844: PUSH
44845: LD_VAR 0 9
44849: GREATER
44850: IFFALSE 45058
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44852: LD_ADDR_VAR 0 6
44856: PUSH
44857: LD_VAR 0 5
44861: PPUSH
44862: LD_INT 91
44864: PUSH
44865: LD_VAR 0 4
44869: PUSH
44870: LD_INT 8
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: PPUSH
44878: CALL_OW 72
44882: ST_TO_ADDR
// if nearEnemy then
44883: LD_VAR 0 6
44887: IFFALSE 44956
// begin if GetWeapon ( i ) = ru_time_lapser then
44889: LD_VAR 0 4
44893: PPUSH
44894: CALL_OW 264
44898: PUSH
44899: LD_INT 49
44901: EQUAL
44902: IFFALSE 44930
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44904: LD_VAR 0 4
44908: PPUSH
44909: LD_VAR 0 6
44913: PPUSH
44914: LD_VAR 0 4
44918: PPUSH
44919: CALL_OW 74
44923: PPUSH
44924: CALL_OW 112
44928: GO 44954
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44930: LD_VAR 0 4
44934: PPUSH
44935: LD_VAR 0 6
44939: PPUSH
44940: LD_VAR 0 4
44944: PPUSH
44945: CALL_OW 74
44949: PPUSH
44950: CALL 46214 0 2
// end else
44954: GO 45056
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44956: LD_VAR 0 4
44960: PPUSH
44961: LD_VAR 0 2
44965: PUSH
44966: LD_VAR 0 9
44970: ARRAY
44971: PUSH
44972: LD_INT 1
44974: ARRAY
44975: PPUSH
44976: LD_VAR 0 2
44980: PUSH
44981: LD_VAR 0 9
44985: ARRAY
44986: PUSH
44987: LD_INT 2
44989: ARRAY
44990: PPUSH
44991: CALL_OW 297
44995: PUSH
44996: LD_INT 6
44998: GREATER
44999: IFFALSE 45042
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45001: LD_VAR 0 4
45005: PPUSH
45006: LD_VAR 0 2
45010: PUSH
45011: LD_VAR 0 9
45015: ARRAY
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PPUSH
45021: LD_VAR 0 2
45025: PUSH
45026: LD_VAR 0 9
45030: ARRAY
45031: PUSH
45032: LD_INT 2
45034: ARRAY
45035: PPUSH
45036: CALL_OW 114
45040: GO 45056
// SetTag ( i , tag ) ;
45042: LD_VAR 0 4
45046: PPUSH
45047: LD_VAR 0 9
45051: PPUSH
45052: CALL_OW 109
// end else
45056: GO 45129
// if enemy then
45058: LD_VAR 0 5
45062: IFFALSE 45129
// begin if GetWeapon ( i ) = ru_time_lapser then
45064: LD_VAR 0 4
45068: PPUSH
45069: CALL_OW 264
45073: PUSH
45074: LD_INT 49
45076: EQUAL
45077: IFFALSE 45105
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45079: LD_VAR 0 4
45083: PPUSH
45084: LD_VAR 0 5
45088: PPUSH
45089: LD_VAR 0 4
45093: PPUSH
45094: CALL_OW 74
45098: PPUSH
45099: CALL_OW 112
45103: GO 45129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45105: LD_VAR 0 4
45109: PPUSH
45110: LD_VAR 0 5
45114: PPUSH
45115: LD_VAR 0 4
45119: PPUSH
45120: CALL_OW 74
45124: PPUSH
45125: CALL 46214 0 2
// end ; end ;
45129: GO 44701
45131: POP
45132: POP
// end ;
45133: LD_VAR 0 3
45137: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45138: LD_INT 0
45140: PPUSH
45141: PPUSH
45142: PPUSH
// if not unit or IsInUnit ( unit ) then
45143: LD_VAR 0 1
45147: NOT
45148: IFTRUE 45161
45150: PUSH
45151: LD_VAR 0 1
45155: PPUSH
45156: CALL_OW 310
45160: OR
45161: IFFALSE 45165
// exit ;
45163: GO 45256
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45165: LD_ADDR_VAR 0 4
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 250
45179: PPUSH
45180: LD_VAR 0 2
45184: PPUSH
45185: LD_INT 1
45187: PPUSH
45188: CALL_OW 272
45192: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45193: LD_ADDR_VAR 0 5
45197: PUSH
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 251
45207: PPUSH
45208: LD_VAR 0 2
45212: PPUSH
45213: LD_INT 1
45215: PPUSH
45216: CALL_OW 273
45220: ST_TO_ADDR
// if ValidHex ( x , y ) then
45221: LD_VAR 0 4
45225: PPUSH
45226: LD_VAR 0 5
45230: PPUSH
45231: CALL_OW 488
45235: IFFALSE 45256
// ComTurnXY ( unit , x , y ) ;
45237: LD_VAR 0 1
45241: PPUSH
45242: LD_VAR 0 4
45246: PPUSH
45247: LD_VAR 0 5
45251: PPUSH
45252: CALL_OW 118
// end ;
45256: LD_VAR 0 3
45260: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45261: LD_INT 0
45263: PPUSH
45264: PPUSH
// result := false ;
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_INT 0
45272: ST_TO_ADDR
// if not units then
45273: LD_VAR 0 2
45277: NOT
45278: IFFALSE 45282
// exit ;
45280: GO 45327
// for i in units do
45282: LD_ADDR_VAR 0 4
45286: PUSH
45287: LD_VAR 0 2
45291: PUSH
45292: FOR_IN
45293: IFFALSE 45325
// if See ( side , i ) then
45295: LD_VAR 0 1
45299: PPUSH
45300: LD_VAR 0 4
45304: PPUSH
45305: CALL_OW 292
45309: IFFALSE 45323
// begin result := true ;
45311: LD_ADDR_VAR 0 3
45315: PUSH
45316: LD_INT 1
45318: ST_TO_ADDR
// exit ;
45319: POP
45320: POP
45321: GO 45327
// end ;
45323: GO 45292
45325: POP
45326: POP
// end ;
45327: LD_VAR 0 3
45331: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45332: LD_INT 0
45334: PPUSH
45335: PPUSH
45336: PPUSH
45337: PPUSH
// if not unit or not points then
45338: LD_VAR 0 1
45342: NOT
45343: IFTRUE 45352
45345: PUSH
45346: LD_VAR 0 2
45350: NOT
45351: OR
45352: IFFALSE 45356
// exit ;
45354: GO 45446
// dist := 99999 ;
45356: LD_ADDR_VAR 0 5
45360: PUSH
45361: LD_INT 99999
45363: ST_TO_ADDR
// for i in points do
45364: LD_ADDR_VAR 0 4
45368: PUSH
45369: LD_VAR 0 2
45373: PUSH
45374: FOR_IN
45375: IFFALSE 45444
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45377: LD_ADDR_VAR 0 6
45381: PUSH
45382: LD_VAR 0 1
45386: PPUSH
45387: LD_VAR 0 4
45391: PUSH
45392: LD_INT 1
45394: ARRAY
45395: PPUSH
45396: LD_VAR 0 4
45400: PUSH
45401: LD_INT 2
45403: ARRAY
45404: PPUSH
45405: CALL_OW 297
45409: ST_TO_ADDR
// if tmpDist < dist then
45410: LD_VAR 0 6
45414: PUSH
45415: LD_VAR 0 5
45419: LESS
45420: IFFALSE 45442
// begin result := i ;
45422: LD_ADDR_VAR 0 3
45426: PUSH
45427: LD_VAR 0 4
45431: ST_TO_ADDR
// dist := tmpDist ;
45432: LD_ADDR_VAR 0 5
45436: PUSH
45437: LD_VAR 0 6
45441: ST_TO_ADDR
// end ; end ;
45442: GO 45374
45444: POP
45445: POP
// end ;
45446: LD_VAR 0 3
45450: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45451: LD_INT 0
45453: PPUSH
// uc_side := side ;
45454: LD_ADDR_OWVAR 20
45458: PUSH
45459: LD_VAR 0 1
45463: ST_TO_ADDR
// uc_nation := 3 ;
45464: LD_ADDR_OWVAR 21
45468: PUSH
45469: LD_INT 3
45471: ST_TO_ADDR
// vc_chassis := 25 ;
45472: LD_ADDR_OWVAR 37
45476: PUSH
45477: LD_INT 25
45479: ST_TO_ADDR
// vc_engine := engine_siberite ;
45480: LD_ADDR_OWVAR 39
45484: PUSH
45485: LD_INT 3
45487: ST_TO_ADDR
// vc_control := control_computer ;
45488: LD_ADDR_OWVAR 38
45492: PUSH
45493: LD_INT 3
45495: ST_TO_ADDR
// vc_weapon := 59 ;
45496: LD_ADDR_OWVAR 40
45500: PUSH
45501: LD_INT 59
45503: ST_TO_ADDR
// result := CreateVehicle ;
45504: LD_ADDR_VAR 0 5
45508: PUSH
45509: CALL_OW 45
45513: ST_TO_ADDR
// SetDir ( result , d ) ;
45514: LD_VAR 0 5
45518: PPUSH
45519: LD_VAR 0 4
45523: PPUSH
45524: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45528: LD_VAR 0 5
45532: PPUSH
45533: LD_VAR 0 2
45537: PPUSH
45538: LD_VAR 0 3
45542: PPUSH
45543: LD_INT 0
45545: PPUSH
45546: CALL_OW 48
// end ;
45550: LD_VAR 0 5
45554: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45555: LD_INT 0
45557: PPUSH
45558: PPUSH
45559: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45560: LD_ADDR_VAR 0 2
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45583: LD_VAR 0 1
45587: NOT
45588: IFTRUE 45621
45590: PUSH
45591: LD_VAR 0 1
45595: PPUSH
45596: CALL_OW 264
45600: PUSH
45601: LD_INT 12
45603: PUSH
45604: LD_INT 51
45606: PUSH
45607: LD_INT 32
45609: PUSH
45610: LD_INT 89
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: IN
45619: NOT
45620: OR
45621: IFFALSE 45625
// exit ;
45623: GO 45723
// for i := 1 to 3 do
45625: LD_ADDR_VAR 0 3
45629: PUSH
45630: DOUBLE
45631: LD_INT 1
45633: DEC
45634: ST_TO_ADDR
45635: LD_INT 3
45637: PUSH
45638: FOR_TO
45639: IFFALSE 45721
// begin tmp := GetCargo ( cargo , i ) ;
45641: LD_ADDR_VAR 0 4
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: LD_VAR 0 3
45655: PPUSH
45656: CALL_OW 289
45660: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45661: LD_ADDR_VAR 0 2
45665: PUSH
45666: LD_VAR 0 2
45670: PPUSH
45671: LD_VAR 0 3
45675: PPUSH
45676: LD_VAR 0 4
45680: PPUSH
45681: CALL_OW 1
45685: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45686: LD_ADDR_VAR 0 2
45690: PUSH
45691: LD_VAR 0 2
45695: PPUSH
45696: LD_INT 4
45698: PPUSH
45699: LD_VAR 0 2
45703: PUSH
45704: LD_INT 4
45706: ARRAY
45707: PUSH
45708: LD_VAR 0 4
45712: PLUS
45713: PPUSH
45714: CALL_OW 1
45718: ST_TO_ADDR
// end ;
45719: GO 45638
45721: POP
45722: POP
// end ;
45723: LD_VAR 0 2
45727: RET
// export function Length ( array ) ; begin
45728: LD_INT 0
45730: PPUSH
// result := array + 0 ;
45731: LD_ADDR_VAR 0 2
45735: PUSH
45736: LD_VAR 0 1
45740: PUSH
45741: LD_INT 0
45743: PLUS
45744: ST_TO_ADDR
// end ;
45745: LD_VAR 0 2
45749: RET
// export function PrepareArray ( array ) ; begin
45750: LD_INT 0
45752: PPUSH
// result := array diff 0 ;
45753: LD_ADDR_VAR 0 2
45757: PUSH
45758: LD_VAR 0 1
45762: PUSH
45763: LD_INT 0
45765: DIFF
45766: ST_TO_ADDR
// if not result [ 1 ] then
45767: LD_VAR 0 2
45771: PUSH
45772: LD_INT 1
45774: ARRAY
45775: NOT
45776: IFFALSE 45796
// result := Delete ( result , 1 ) ;
45778: LD_ADDR_VAR 0 2
45782: PUSH
45783: LD_VAR 0 2
45787: PPUSH
45788: LD_INT 1
45790: PPUSH
45791: CALL_OW 3
45795: ST_TO_ADDR
// end ;
45796: LD_VAR 0 2
45800: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45801: LD_INT 0
45803: PPUSH
45804: PPUSH
45805: PPUSH
45806: PPUSH
// sibRocketRange := 25 ;
45807: LD_ADDR_VAR 0 6
45811: PUSH
45812: LD_INT 25
45814: ST_TO_ADDR
// result := false ;
45815: LD_ADDR_VAR 0 4
45819: PUSH
45820: LD_INT 0
45822: ST_TO_ADDR
// for i := 0 to 5 do
45823: LD_ADDR_VAR 0 5
45827: PUSH
45828: DOUBLE
45829: LD_INT 0
45831: DEC
45832: ST_TO_ADDR
45833: LD_INT 5
45835: PUSH
45836: FOR_TO
45837: IFFALSE 45904
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45839: LD_VAR 0 1
45843: PPUSH
45844: LD_VAR 0 5
45848: PPUSH
45849: LD_VAR 0 6
45853: PPUSH
45854: CALL_OW 272
45858: PPUSH
45859: LD_VAR 0 2
45863: PPUSH
45864: LD_VAR 0 5
45868: PPUSH
45869: LD_VAR 0 6
45873: PPUSH
45874: CALL_OW 273
45878: PPUSH
45879: LD_VAR 0 3
45883: PPUSH
45884: CALL_OW 309
45888: IFFALSE 45902
// begin result := true ;
45890: LD_ADDR_VAR 0 4
45894: PUSH
45895: LD_INT 1
45897: ST_TO_ADDR
// exit ;
45898: POP
45899: POP
45900: GO 45906
// end ;
45902: GO 45836
45904: POP
45905: POP
// end ;
45906: LD_VAR 0 4
45910: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45911: LD_INT 0
45913: PPUSH
45914: PPUSH
45915: PPUSH
// if btype = b_depot then
45916: LD_VAR 0 2
45920: PUSH
45921: LD_INT 0
45923: EQUAL
45924: IFFALSE 45936
// begin result := true ;
45926: LD_ADDR_VAR 0 3
45930: PUSH
45931: LD_INT 1
45933: ST_TO_ADDR
// exit ;
45934: GO 46056
// end ; pom := GetBase ( depot ) ;
45936: LD_ADDR_VAR 0 4
45940: PUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 274
45950: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45951: LD_ADDR_VAR 0 5
45955: PUSH
45956: LD_VAR 0 2
45960: PPUSH
45961: LD_VAR 0 1
45965: PPUSH
45966: CALL_OW 248
45970: PPUSH
45971: CALL_OW 450
45975: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_VAR 0 4
45985: PPUSH
45986: LD_INT 1
45988: PPUSH
45989: CALL_OW 275
45993: PUSH
45994: LD_VAR 0 5
45998: PUSH
45999: LD_INT 1
46001: ARRAY
46002: GREATEREQUAL
46003: IFFALSE 46029
46005: PUSH
46006: LD_VAR 0 4
46010: PPUSH
46011: LD_INT 2
46013: PPUSH
46014: CALL_OW 275
46018: PUSH
46019: LD_VAR 0 5
46023: PUSH
46024: LD_INT 2
46026: ARRAY
46027: GREATEREQUAL
46028: AND
46029: IFFALSE 46055
46031: PUSH
46032: LD_VAR 0 4
46036: PPUSH
46037: LD_INT 3
46039: PPUSH
46040: CALL_OW 275
46044: PUSH
46045: LD_VAR 0 5
46049: PUSH
46050: LD_INT 3
46052: ARRAY
46053: GREATEREQUAL
46054: AND
46055: ST_TO_ADDR
// end ;
46056: LD_VAR 0 3
46060: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46061: LD_INT 0
46063: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46064: LD_VAR 0 1
46068: PPUSH
46069: LD_VAR 0 2
46073: PPUSH
46074: LD_INT 0
46076: PPUSH
46077: LD_INT 0
46079: PPUSH
46080: LD_INT 1
46082: PPUSH
46083: LD_INT 0
46085: PPUSH
46086: CALL_OW 587
// end ;
46090: LD_VAR 0 3
46094: RET
// export function CenterOnNow ( unit ) ; begin
46095: LD_INT 0
46097: PPUSH
// result := IsInUnit ( unit ) ;
46098: LD_ADDR_VAR 0 2
46102: PUSH
46103: LD_VAR 0 1
46107: PPUSH
46108: CALL_OW 310
46112: ST_TO_ADDR
// if not result then
46113: LD_VAR 0 2
46117: NOT
46118: IFFALSE 46130
// result := unit ;
46120: LD_ADDR_VAR 0 2
46124: PUSH
46125: LD_VAR 0 1
46129: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46130: LD_VAR 0 1
46134: PPUSH
46135: CALL_OW 87
// end ;
46139: LD_VAR 0 2
46143: RET
// export function ComMoveHex ( unit , hex ) ; begin
46144: LD_INT 0
46146: PPUSH
// if not hex then
46147: LD_VAR 0 2
46151: NOT
46152: IFFALSE 46156
// exit ;
46154: GO 46209
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46156: LD_VAR 0 2
46160: PUSH
46161: LD_INT 1
46163: ARRAY
46164: PPUSH
46165: LD_VAR 0 2
46169: PUSH
46170: LD_INT 2
46172: ARRAY
46173: PPUSH
46174: CALL_OW 428
46178: IFFALSE 46182
// exit ;
46180: GO 46209
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46182: LD_VAR 0 1
46186: PPUSH
46187: LD_VAR 0 2
46191: PUSH
46192: LD_INT 1
46194: ARRAY
46195: PPUSH
46196: LD_VAR 0 2
46200: PUSH
46201: LD_INT 2
46203: ARRAY
46204: PPUSH
46205: CALL_OW 111
// end ;
46209: LD_VAR 0 3
46213: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46214: LD_INT 0
46216: PPUSH
46217: PPUSH
46218: PPUSH
// if not unit or not enemy then
46219: LD_VAR 0 1
46223: NOT
46224: IFTRUE 46233
46226: PUSH
46227: LD_VAR 0 2
46231: NOT
46232: OR
46233: IFFALSE 46237
// exit ;
46235: GO 46363
// x := GetX ( enemy ) ;
46237: LD_ADDR_VAR 0 4
46241: PUSH
46242: LD_VAR 0 2
46246: PPUSH
46247: CALL_OW 250
46251: ST_TO_ADDR
// y := GetY ( enemy ) ;
46252: LD_ADDR_VAR 0 5
46256: PUSH
46257: LD_VAR 0 2
46261: PPUSH
46262: CALL_OW 251
46266: ST_TO_ADDR
// if ValidHex ( x , y ) then
46267: LD_VAR 0 4
46271: PPUSH
46272: LD_VAR 0 5
46276: PPUSH
46277: CALL_OW 488
46281: IFFALSE 46363
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46283: LD_VAR 0 2
46287: PPUSH
46288: CALL_OW 247
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: IN
46303: IFTRUE 46326
46305: PUSH
46306: LD_VAR 0 1
46310: PPUSH
46311: CALL_OW 255
46315: PPUSH
46316: LD_VAR 0 2
46320: PPUSH
46321: CALL_OW 292
46325: OR
46326: IFFALSE 46344
// ComAttackUnit ( unit , enemy ) else
46328: LD_VAR 0 1
46332: PPUSH
46333: LD_VAR 0 2
46337: PPUSH
46338: CALL_OW 115
46342: GO 46363
// ComAgressiveMove ( unit , x , y ) ;
46344: LD_VAR 0 1
46348: PPUSH
46349: LD_VAR 0 4
46353: PPUSH
46354: LD_VAR 0 5
46358: PPUSH
46359: CALL_OW 114
// end ;
46363: LD_VAR 0 3
46367: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46368: LD_INT 0
46370: PPUSH
46371: PPUSH
46372: PPUSH
// list := AreaToList ( area , 0 ) ;
46373: LD_ADDR_VAR 0 5
46377: PUSH
46378: LD_VAR 0 1
46382: PPUSH
46383: LD_INT 0
46385: PPUSH
46386: CALL_OW 517
46390: ST_TO_ADDR
// if not list then
46391: LD_VAR 0 5
46395: NOT
46396: IFFALSE 46400
// exit ;
46398: GO 46530
// if all then
46400: LD_VAR 0 2
46404: IFFALSE 46492
// begin for i := 1 to list [ 1 ] do
46406: LD_ADDR_VAR 0 4
46410: PUSH
46411: DOUBLE
46412: LD_INT 1
46414: DEC
46415: ST_TO_ADDR
46416: LD_VAR 0 5
46420: PUSH
46421: LD_INT 1
46423: ARRAY
46424: PUSH
46425: FOR_TO
46426: IFFALSE 46488
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46428: LD_ADDR_VAR 0 3
46432: PUSH
46433: LD_VAR 0 3
46437: PPUSH
46438: LD_VAR 0 3
46442: PUSH
46443: LD_INT 1
46445: PLUS
46446: PPUSH
46447: LD_VAR 0 5
46451: PUSH
46452: LD_INT 1
46454: ARRAY
46455: PUSH
46456: LD_VAR 0 4
46460: ARRAY
46461: PUSH
46462: LD_VAR 0 5
46466: PUSH
46467: LD_INT 2
46469: ARRAY
46470: PUSH
46471: LD_VAR 0 4
46475: ARRAY
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PPUSH
46481: CALL_OW 1
46485: ST_TO_ADDR
46486: GO 46425
46488: POP
46489: POP
// exit ;
46490: GO 46530
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46492: LD_ADDR_VAR 0 3
46496: PUSH
46497: LD_VAR 0 5
46501: PUSH
46502: LD_INT 1
46504: ARRAY
46505: PUSH
46506: LD_INT 1
46508: ARRAY
46509: PUSH
46510: LD_VAR 0 5
46514: PUSH
46515: LD_INT 2
46517: ARRAY
46518: PUSH
46519: LD_INT 1
46521: ARRAY
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: ST_TO_ADDR
// end ;
46530: LD_VAR 0 3
46534: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46535: LD_INT 0
46537: PPUSH
46538: PPUSH
// list := AreaToList ( area , 0 ) ;
46539: LD_ADDR_VAR 0 4
46543: PUSH
46544: LD_VAR 0 1
46548: PPUSH
46549: LD_INT 0
46551: PPUSH
46552: CALL_OW 517
46556: ST_TO_ADDR
// if not list then
46557: LD_VAR 0 4
46561: NOT
46562: IFFALSE 46566
// exit ;
46564: GO 46607
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46566: LD_ADDR_VAR 0 3
46570: PUSH
46571: LD_VAR 0 4
46575: PUSH
46576: LD_INT 1
46578: ARRAY
46579: PUSH
46580: LD_INT 1
46582: ARRAY
46583: PUSH
46584: LD_VAR 0 4
46588: PUSH
46589: LD_INT 2
46591: ARRAY
46592: PUSH
46593: LD_INT 1
46595: ARRAY
46596: PUSH
46597: LD_VAR 0 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
// end ;
46607: LD_VAR 0 3
46611: RET
// export function First ( array ) ; begin
46612: LD_INT 0
46614: PPUSH
// if not array then
46615: LD_VAR 0 1
46619: NOT
46620: IFFALSE 46624
// exit ;
46622: GO 46638
// result := array [ 1 ] ;
46624: LD_ADDR_VAR 0 2
46628: PUSH
46629: LD_VAR 0 1
46633: PUSH
46634: LD_INT 1
46636: ARRAY
46637: ST_TO_ADDR
// end ;
46638: LD_VAR 0 2
46642: RET
// export function Last ( array ) ; begin
46643: LD_INT 0
46645: PPUSH
// if not array then
46646: LD_VAR 0 1
46650: NOT
46651: IFFALSE 46655
// exit ;
46653: GO 46671
// result := array [ array ] ;
46655: LD_ADDR_VAR 0 2
46659: PUSH
46660: LD_VAR 0 1
46664: PUSH
46665: LD_VAR 0 1
46669: ARRAY
46670: ST_TO_ADDR
// end ;
46671: LD_VAR 0 2
46675: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46676: LD_INT 0
46678: PPUSH
46679: PPUSH
// result := [ ] ;
46680: LD_ADDR_VAR 0 5
46684: PUSH
46685: EMPTY
46686: ST_TO_ADDR
// if not array then
46687: LD_VAR 0 1
46691: NOT
46692: IFFALSE 46696
// exit ;
46694: GO 46808
// for i := 1 to array do
46696: LD_ADDR_VAR 0 6
46700: PUSH
46701: DOUBLE
46702: LD_INT 1
46704: DEC
46705: ST_TO_ADDR
46706: LD_VAR 0 1
46710: PUSH
46711: FOR_TO
46712: IFFALSE 46806
// if array [ i ] [ index ] = value then
46714: LD_VAR 0 1
46718: PUSH
46719: LD_VAR 0 6
46723: ARRAY
46724: PUSH
46725: LD_VAR 0 2
46729: ARRAY
46730: PUSH
46731: LD_VAR 0 3
46735: EQUAL
46736: IFFALSE 46804
// begin if indexColumn then
46738: LD_VAR 0 4
46742: IFFALSE 46778
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46744: LD_ADDR_VAR 0 5
46748: PUSH
46749: LD_VAR 0 5
46753: PPUSH
46754: LD_VAR 0 1
46758: PUSH
46759: LD_VAR 0 6
46763: ARRAY
46764: PUSH
46765: LD_VAR 0 4
46769: ARRAY
46770: PPUSH
46771: CALL 41816 0 2
46775: ST_TO_ADDR
46776: GO 46804
// result := Join ( result , array [ i ] ) ;
46778: LD_ADDR_VAR 0 5
46782: PUSH
46783: LD_VAR 0 5
46787: PPUSH
46788: LD_VAR 0 1
46792: PUSH
46793: LD_VAR 0 6
46797: ARRAY
46798: PPUSH
46799: CALL 41816 0 2
46803: ST_TO_ADDR
// end ;
46804: GO 46711
46806: POP
46807: POP
// end ;
46808: LD_VAR 0 5
46812: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46813: LD_INT 0
46815: PPUSH
// if not vehicles or not parkingPoint then
46816: LD_VAR 0 1
46820: NOT
46821: IFTRUE 46830
46823: PUSH
46824: LD_VAR 0 2
46828: NOT
46829: OR
46830: IFFALSE 46834
// exit ;
46832: GO 46932
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46834: LD_ADDR_VAR 0 1
46838: PUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: LD_INT 50
46846: PUSH
46847: EMPTY
46848: LIST
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: LD_INT 92
46855: PUSH
46856: LD_VAR 0 2
46860: PUSH
46861: LD_INT 1
46863: ARRAY
46864: PUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_INT 2
46872: ARRAY
46873: PUSH
46874: LD_INT 8
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PPUSH
46891: CALL_OW 72
46895: ST_TO_ADDR
// if not vehicles then
46896: LD_VAR 0 1
46900: NOT
46901: IFFALSE 46905
// exit ;
46903: GO 46932
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46905: LD_VAR 0 1
46909: PPUSH
46910: LD_VAR 0 2
46914: PUSH
46915: LD_INT 1
46917: ARRAY
46918: PPUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 2
46926: ARRAY
46927: PPUSH
46928: CALL_OW 111
// end ;
46932: LD_VAR 0 3
46936: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46937: LD_INT 0
46939: PPUSH
46940: PPUSH
46941: PPUSH
// if not side or not area then
46942: LD_VAR 0 1
46946: NOT
46947: IFTRUE 46956
46949: PUSH
46950: LD_VAR 0 2
46954: NOT
46955: OR
46956: IFFALSE 46960
// exit ;
46958: GO 47079
// tmp := AreaToList ( area , 0 ) ;
46960: LD_ADDR_VAR 0 5
46964: PUSH
46965: LD_VAR 0 2
46969: PPUSH
46970: LD_INT 0
46972: PPUSH
46973: CALL_OW 517
46977: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46978: LD_ADDR_VAR 0 4
46982: PUSH
46983: DOUBLE
46984: LD_INT 1
46986: DEC
46987: ST_TO_ADDR
46988: LD_VAR 0 5
46992: PUSH
46993: LD_INT 1
46995: ARRAY
46996: PUSH
46997: FOR_TO
46998: IFFALSE 47077
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
47000: LD_VAR 0 5
47004: PUSH
47005: LD_INT 1
47007: ARRAY
47008: PUSH
47009: LD_VAR 0 4
47013: ARRAY
47014: PPUSH
47015: LD_VAR 0 5
47019: PUSH
47020: LD_INT 2
47022: ARRAY
47023: PUSH
47024: LD_VAR 0 4
47028: ARRAY
47029: PPUSH
47030: CALL_OW 351
47034: IFFALSE 47075
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47036: LD_VAR 0 5
47040: PUSH
47041: LD_INT 1
47043: ARRAY
47044: PUSH
47045: LD_VAR 0 4
47049: ARRAY
47050: PPUSH
47051: LD_VAR 0 5
47055: PUSH
47056: LD_INT 2
47058: ARRAY
47059: PUSH
47060: LD_VAR 0 4
47064: ARRAY
47065: PPUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 244
// end ;
47075: GO 46997
47077: POP
47078: POP
// end ;
47079: LD_VAR 0 3
47083: RET
// export function UniqueArray ( array ) ; var i ; begin
47084: LD_INT 0
47086: PPUSH
47087: PPUSH
// result := [ ] ;
47088: LD_ADDR_VAR 0 2
47092: PUSH
47093: EMPTY
47094: ST_TO_ADDR
// if not array then
47095: LD_VAR 0 1
47099: NOT
47100: IFFALSE 47104
// exit ;
47102: GO 47165
// for i := 1 to array do
47104: LD_ADDR_VAR 0 3
47108: PUSH
47109: DOUBLE
47110: LD_INT 1
47112: DEC
47113: ST_TO_ADDR
47114: LD_VAR 0 1
47118: PUSH
47119: FOR_TO
47120: IFFALSE 47163
// if not array [ i ] in result then
47122: LD_VAR 0 1
47126: PUSH
47127: LD_VAR 0 3
47131: ARRAY
47132: PUSH
47133: LD_VAR 0 2
47137: IN
47138: NOT
47139: IFFALSE 47161
// result := Join ( result , i ) ;
47141: LD_ADDR_VAR 0 2
47145: PUSH
47146: LD_VAR 0 2
47150: PPUSH
47151: LD_VAR 0 3
47155: PPUSH
47156: CALL 41816 0 2
47160: ST_TO_ADDR
47161: GO 47119
47163: POP
47164: POP
// end ; end_of_file
47165: LD_VAR 0 2
47169: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
47170: LD_INT 0
47172: PPUSH
47173: PPUSH
// disable ( mpActive ) ;
47174: LD_INT 100
47176: DISABLE_MARKED
// disable ( mpWin ) ;
47177: LD_INT 101
47179: DISABLE_MARKED
// disable ( mpLose ) ;
47180: LD_INT 102
47182: DISABLE_MARKED
// mpGameType := 0 ;
47183: LD_ADDR_EXP 5
47187: PUSH
47188: LD_INT 0
47190: ST_TO_ADDR
// mpGameSettings := [ ] ;
47191: LD_ADDR_EXP 8
47195: PUSH
47196: EMPTY
47197: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
47198: LD_ADDR_EXP 6
47202: PUSH
47203: EMPTY
47204: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
47205: LD_ADDR_EXP 7
47209: PUSH
47210: EMPTY
47211: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
47212: LD_ADDR_EXP 31
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// mpOilDeposits := [ ] ;
47227: LD_ADDR_EXP 14
47231: PUSH
47232: EMPTY
47233: ST_TO_ADDR
// mpSibDeposits := [ ] ;
47234: LD_ADDR_EXP 15
47238: PUSH
47239: EMPTY
47240: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
47241: LD_ADDR_EXP 44
47245: PUSH
47246: EMPTY
47247: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
47248: LD_ADDR_EXP 45
47252: PUSH
47253: EMPTY
47254: ST_TO_ADDR
// mpDepots := [ ] ;
47255: LD_ADDR_EXP 16
47259: PUSH
47260: EMPTY
47261: ST_TO_ADDR
// mpBuildings := [ ] ;
47262: LD_ADDR_EXP 19
47266: PUSH
47267: EMPTY
47268: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
47269: LD_ADDR_EXP 20
47273: PUSH
47274: EMPTY
47275: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
47276: LD_ADDR_EXP 21
47280: PUSH
47281: EMPTY
47282: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
47283: LD_ADDR_EXP 22
47287: PUSH
47288: EMPTY
47289: ST_TO_ADDR
// mpStartingResources := [ ] ;
47290: LD_ADDR_EXP 17
47294: PUSH
47295: EMPTY
47296: ST_TO_ADDR
// mpStartPos := [ ] ;
47297: LD_ADDR_EXP 23
47301: PUSH
47302: EMPTY
47303: ST_TO_ADDR
// mpBattleFlag := - 1 ;
47304: LD_ADDR_EXP 24
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: ST_TO_ADDR
// mpBattleFlags := [ ] ;
47313: LD_ADDR_EXP 25
47317: PUSH
47318: EMPTY
47319: ST_TO_ADDR
// mpApemans := [ ] ;
47320: LD_ADDR_EXP 32
47324: PUSH
47325: EMPTY
47326: ST_TO_ADDR
// mpApemansArea := [ ] ;
47327: LD_ADDR_EXP 33
47331: PUSH
47332: EMPTY
47333: ST_TO_ADDR
// mpRespawn := [ ] ;
47334: LD_ADDR_EXP 35
47338: PUSH
47339: EMPTY
47340: ST_TO_ADDR
// mpKingArea := 0 ;
47341: LD_ADDR_EXP 36
47345: PUSH
47346: LD_INT 0
47348: ST_TO_ADDR
// mpPoints := [ ] ;
47349: LD_ADDR_EXP 37
47353: PUSH
47354: EMPTY
47355: ST_TO_ADDR
// mpVehicles := 0 ;
47356: LD_ADDR_EXP 38
47360: PUSH
47361: LD_INT 0
47363: ST_TO_ADDR
// mpShipments := 0 ;
47364: LD_ADDR_EXP 29
47368: PUSH
47369: LD_INT 0
47371: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47372: LD_ADDR_EXP 42
47376: PUSH
47377: EMPTY
47378: PUSH
47379: EMPTY
47380: PUSH
47381: EMPTY
47382: PUSH
47383: EMPTY
47384: PUSH
47385: EMPTY
47386: PUSH
47387: EMPTY
47388: PUSH
47389: EMPTY
47390: PUSH
47391: EMPTY
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47403: LD_ADDR_EXP 34
47407: PUSH
47408: EMPTY
47409: PUSH
47410: EMPTY
47411: PUSH
47412: EMPTY
47413: PUSH
47414: EMPTY
47415: PUSH
47416: EMPTY
47417: PUSH
47418: EMPTY
47419: PUSH
47420: EMPTY
47421: PUSH
47422: EMPTY
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
47434: LD_ADDR_EXP 43
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// mpEmissions := 0 ;
47473: LD_ADDR_EXP 39
47477: PUSH
47478: LD_INT 0
47480: ST_TO_ADDR
// mpTeleports := 0 ;
47481: LD_ADDR_EXP 46
47485: PUSH
47486: LD_INT 0
47488: ST_TO_ADDR
// mpArtifacts := 0 ;
47489: LD_ADDR_EXP 47
47493: PUSH
47494: LD_INT 0
47496: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
47497: LD_ADDR_EXP 48
47501: PUSH
47502: LD_INT 0
47504: ST_TO_ADDR
// mpPeopleSkill := 3 ;
47505: LD_ADDR_EXP 27
47509: PUSH
47510: LD_INT 3
47512: ST_TO_ADDR
// mpPeopleAmount := 15 ;
47513: LD_ADDR_EXP 26
47517: PUSH
47518: LD_INT 15
47520: ST_TO_ADDR
// mpDisplayStrings := 0 ;
47521: LD_ADDR_EXP 40
47525: PUSH
47526: LD_INT 0
47528: ST_TO_ADDR
// mpGameActive := false ;
47529: LD_ADDR_EXP 41
47533: PUSH
47534: LD_INT 0
47536: ST_TO_ADDR
// mpBlockRespThread := false ;
47537: LD_ADDR_EXP 49
47541: PUSH
47542: LD_INT 0
47544: ST_TO_ADDR
// for i := 1 to 32 do
47545: LD_ADDR_VAR 0 2
47549: PUSH
47550: DOUBLE
47551: LD_INT 1
47553: DEC
47554: ST_TO_ADDR
47555: LD_INT 32
47557: PUSH
47558: FOR_TO
47559: IFFALSE 47586
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
47561: LD_ADDR_EXP 8
47565: PUSH
47566: LD_EXP 8
47570: PPUSH
47571: LD_VAR 0 2
47575: PPUSH
47576: LD_INT 0
47578: PPUSH
47579: CALL_OW 1
47583: ST_TO_ADDR
47584: GO 47558
47586: POP
47587: POP
// end ;
47588: LD_VAR 0 1
47592: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
47593: LD_INT 0
47595: PPUSH
47596: PPUSH
47597: PPUSH
47598: PPUSH
47599: PPUSH
47600: PPUSH
47601: PPUSH
47602: PPUSH
47603: PPUSH
47604: PPUSH
47605: PPUSH
47606: PPUSH
47607: PPUSH
47608: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
47609: LD_ADDR_VAR 0 14
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 5
47625: PUSH
47626: LD_INT 6
47628: PUSH
47629: LD_INT 7
47631: PUSH
47632: LD_INT 8
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: ST_TO_ADDR
// for i in gameTypes do
47644: LD_ADDR_VAR 0 2
47648: PUSH
47649: LD_VAR 0 14
47653: PUSH
47654: FOR_IN
47655: IFFALSE 47664
// disable ( i ) ;
47657: LD_VAR 0 2
47661: DISABLE_MARKED
47662: GO 47654
47664: POP
47665: POP
// if Multiplayer then
47666: LD_OWVAR 4
47670: IFFALSE 47854
// begin mpGameType := mp_game_type ;
47672: LD_ADDR_EXP 5
47676: PUSH
47677: LD_OWVAR 6
47681: ST_TO_ADDR
// your_side := mp_player_side ;
47682: LD_ADDR_OWVAR 2
47686: PUSH
47687: LD_OWVAR 7
47691: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47692: LD_ADDR_EXP 9
47696: PUSH
47697: LD_OWVAR 17
47701: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47702: LD_ADDR_EXP 10
47706: PUSH
47707: LD_OWVAR 15
47711: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47712: LD_ADDR_EXP 11
47716: PUSH
47717: LD_OWVAR 16
47721: ST_TO_ADDR
// mpTeams := mp_teams ;
47722: LD_ADDR_EXP 12
47726: PUSH
47727: LD_OWVAR 12
47731: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47732: LD_ADDR_VAR 0 2
47736: PUSH
47737: DOUBLE
47738: LD_INT 1
47740: DEC
47741: ST_TO_ADDR
47742: LD_EXP 6
47746: PPUSH
47747: CALL 5840 0 1
47751: PUSH
47752: FOR_TO
47753: IFFALSE 47829
// begin setting := mpGameSettingsKeys [ i ] ;
47755: LD_ADDR_VAR 0 12
47759: PUSH
47760: LD_EXP 6
47764: PUSH
47765: LD_VAR 0 2
47769: ARRAY
47770: ST_TO_ADDR
// if setting then
47771: LD_VAR 0 12
47775: IFFALSE 47827
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47777: LD_ADDR_EXP 8
47781: PUSH
47782: LD_EXP 8
47786: PPUSH
47787: LD_VAR 0 2
47791: PPUSH
47792: LD_EXP 7
47796: PUSH
47797: LD_VAR 0 2
47801: ARRAY
47802: PUSH
47803: LD_VAR 0 2
47807: PUSH
47808: LD_INT 1
47810: MINUS
47811: PPUSH
47812: CALL_OW 426
47816: PUSH
47817: LD_INT 1
47819: PLUS
47820: ARRAY
47821: PPUSH
47822: CALL_OW 1
47826: ST_TO_ADDR
// end ;
47827: GO 47752
47829: POP
47830: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47831: LD_ADDR_EXP 13
47835: PUSH
47836: LD_EXP 10
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: DIFF
47847: PUSH
47848: LD_INT 1
47850: GREATER
47851: ST_TO_ADDR
// end else
47852: GO 47854
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47854: LD_EXP 5
47858: PPUSH
47859: CALL 852 0 1
// if Count ( mpMarkedAreas ) then
47863: LD_EXP 20
47867: PPUSH
47868: CALL 5840 0 1
47872: IFFALSE 47903
// begin for i in mpMarkedAreas do
47874: LD_ADDR_VAR 0 2
47878: PUSH
47879: LD_EXP 20
47883: PUSH
47884: FOR_IN
47885: IFFALSE 47901
// SetAreaMapShow ( i , 0 ) ;
47887: LD_VAR 0 2
47891: PPUSH
47892: LD_INT 0
47894: PPUSH
47895: CALL_OW 424
47899: GO 47884
47901: POP
47902: POP
// end ; for i := 1 to 8 do
47903: LD_ADDR_VAR 0 2
47907: PUSH
47908: DOUBLE
47909: LD_INT 1
47911: DEC
47912: ST_TO_ADDR
47913: LD_INT 8
47915: PUSH
47916: FOR_TO
47917: IFFALSE 49376
// begin if not mpSidePositions [ i ] then
47919: LD_EXP 9
47923: PUSH
47924: LD_VAR 0 2
47928: ARRAY
47929: NOT
47930: IFFALSE 47934
// continue ;
47932: GO 47916
// side := i ;
47934: LD_ADDR_VAR 0 7
47938: PUSH
47939: LD_VAR 0 2
47943: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47944: LD_ADDR_VAR 0 9
47948: PUSH
47949: LD_EXP 11
47953: PUSH
47954: LD_VAR 0 2
47958: ARRAY
47959: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47960: LD_ADDR_VAR 0 8
47964: PUSH
47965: LD_EXP 9
47969: PUSH
47970: LD_VAR 0 2
47974: ARRAY
47975: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47976: LD_EXP 14
47980: PPUSH
47981: CALL 5840 0 1
47985: IFFALSE 48062
// begin for j in mpOilDeposits [ pos ] do
47987: LD_ADDR_VAR 0 3
47991: PUSH
47992: LD_EXP 14
47996: PUSH
47997: LD_VAR 0 8
48001: ARRAY
48002: PUSH
48003: FOR_IN
48004: IFFALSE 48060
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
48006: LD_VAR 0 3
48010: PUSH
48011: LD_INT 1
48013: ARRAY
48014: PPUSH
48015: LD_VAR 0 3
48019: PUSH
48020: LD_INT 2
48022: ARRAY
48023: PPUSH
48024: LD_INT 2
48026: PPUSH
48027: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
48031: LD_VAR 0 3
48035: PUSH
48036: LD_INT 1
48038: ARRAY
48039: PPUSH
48040: LD_VAR 0 3
48044: PUSH
48045: LD_INT 2
48047: ARRAY
48048: PPUSH
48049: LD_VAR 0 7
48053: PPUSH
48054: CALL_OW 441
// end ;
48058: GO 48003
48060: POP
48061: POP
// end ; if Count ( mpSibDeposits ) then
48062: LD_EXP 15
48066: PPUSH
48067: CALL 5840 0 1
48071: IFFALSE 48148
// begin for j in mpSibDeposits [ pos ] do
48073: LD_ADDR_VAR 0 3
48077: PUSH
48078: LD_EXP 15
48082: PUSH
48083: LD_VAR 0 8
48087: ARRAY
48088: PUSH
48089: FOR_IN
48090: IFFALSE 48146
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
48092: LD_VAR 0 3
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: PPUSH
48101: LD_VAR 0 3
48105: PUSH
48106: LD_INT 2
48108: ARRAY
48109: PPUSH
48110: LD_INT 3
48112: PPUSH
48113: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
48117: LD_VAR 0 3
48121: PUSH
48122: LD_INT 1
48124: ARRAY
48125: PPUSH
48126: LD_VAR 0 3
48130: PUSH
48131: LD_INT 2
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 7
48139: PPUSH
48140: CALL_OW 441
// end ;
48144: GO 48089
48146: POP
48147: POP
// end ; InitBc ;
48148: CALL_OW 21
// InitUc ;
48152: CALL_OW 18
// uc_side := side ;
48156: LD_ADDR_OWVAR 20
48160: PUSH
48161: LD_VAR 0 7
48165: ST_TO_ADDR
// uc_nation := nation ;
48166: LD_ADDR_OWVAR 21
48170: PUSH
48171: LD_VAR 0 9
48175: ST_TO_ADDR
// if mpBattleFlag > - 1 then
48176: LD_EXP 24
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: GREATER
48185: IFFALSE 48344
// begin x := mpStartPos [ pos ] [ 1 ] ;
48187: LD_ADDR_VAR 0 5
48191: PUSH
48192: LD_EXP 23
48196: PUSH
48197: LD_VAR 0 8
48201: ARRAY
48202: PUSH
48203: LD_INT 1
48205: ARRAY
48206: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48207: LD_ADDR_VAR 0 6
48211: PUSH
48212: LD_EXP 23
48216: PUSH
48217: LD_VAR 0 8
48221: ARRAY
48222: PUSH
48223: LD_INT 2
48225: ARRAY
48226: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
48227: LD_VAR 0 5
48231: PPUSH
48232: LD_VAR 0 6
48236: PPUSH
48237: LD_INT 12
48239: PPUSH
48240: LD_INT 2
48242: PPUSH
48243: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
48247: LD_ADDR_EXP 25
48251: PUSH
48252: LD_EXP 25
48256: PPUSH
48257: LD_VAR 0 7
48261: PPUSH
48262: LD_VAR 0 7
48266: PPUSH
48267: LD_VAR 0 5
48271: PPUSH
48272: LD_VAR 0 6
48276: PPUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 100
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 70
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: PUSH
48300: LD_INT 40
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 10
48309: PUSH
48310: LD_INT 25
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 20
48319: PUSH
48320: LD_INT 100
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: PPUSH
48334: CALL_OW 418
48338: PPUSH
48339: CALL_OW 1
48343: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
48344: LD_EXP 16
48348: PPUSH
48349: CALL 5840 0 1
48353: IFFALSE 48552
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
48355: LD_EXP 5
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 8
48365: PUSH
48366: LD_INT 6
48368: PUSH
48369: LD_INT 7
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: IN
48378: IFFALSE 48398
// begin bc_level := 10 ;
48380: LD_ADDR_OWVAR 43
48384: PUSH
48385: LD_INT 10
48387: ST_TO_ADDR
// bc_type := b_warehouse ;
48388: LD_ADDR_OWVAR 42
48392: PUSH
48393: LD_INT 1
48395: ST_TO_ADDR
// end else
48396: GO 48414
// begin bc_level := 0 ;
48398: LD_ADDR_OWVAR 43
48402: PUSH
48403: LD_INT 0
48405: ST_TO_ADDR
// bc_type := b_depot ;
48406: LD_ADDR_OWVAR 42
48410: PUSH
48411: LD_INT 0
48413: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
48414: LD_ADDR_VAR 0 4
48418: PUSH
48419: LD_EXP 16
48423: PUSH
48424: LD_VAR 0 8
48428: ARRAY
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: PPUSH
48434: LD_EXP 16
48438: PUSH
48439: LD_VAR 0 8
48443: ARRAY
48444: PUSH
48445: LD_INT 2
48447: ARRAY
48448: PPUSH
48449: LD_EXP 16
48453: PUSH
48454: LD_VAR 0 8
48458: ARRAY
48459: PUSH
48460: LD_INT 3
48462: ARRAY
48463: PPUSH
48464: CALL_OW 47
48468: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
48469: LD_VAR 0 4
48473: PPUSH
48474: LD_STRING @
48476: PUSH
48477: LD_VAR 0 7
48481: STR
48482: PPUSH
48483: CALL_OW 500
// if Count ( mpStartingResources ) then
48487: LD_EXP 17
48491: PPUSH
48492: CALL 5840 0 1
48496: IFFALSE 48550
// begin for j := 1 to mpStartingResources do
48498: LD_ADDR_VAR 0 3
48502: PUSH
48503: DOUBLE
48504: LD_INT 1
48506: DEC
48507: ST_TO_ADDR
48508: LD_EXP 17
48512: PUSH
48513: FOR_TO
48514: IFFALSE 48548
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
48516: LD_VAR 0 4
48520: PPUSH
48521: CALL_OW 274
48525: PPUSH
48526: LD_VAR 0 3
48530: PPUSH
48531: LD_EXP 17
48535: PUSH
48536: LD_VAR 0 3
48540: ARRAY
48541: PPUSH
48542: CALL_OW 277
48546: GO 48513
48548: POP
48549: POP
// end ; end else
48550: GO 48759
// if Count ( mpStartingResources ) then
48552: LD_EXP 17
48556: PPUSH
48557: CALL 5840 0 1
48561: IFFALSE 48759
// begin x := mpStartPos [ pos ] [ 1 ] ;
48563: LD_ADDR_VAR 0 5
48567: PUSH
48568: LD_EXP 23
48572: PUSH
48573: LD_VAR 0 8
48577: ARRAY
48578: PUSH
48579: LD_INT 1
48581: ARRAY
48582: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48583: LD_ADDR_VAR 0 6
48587: PUSH
48588: LD_EXP 23
48592: PUSH
48593: LD_VAR 0 8
48597: ARRAY
48598: PUSH
48599: LD_INT 2
48601: ARRAY
48602: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: DOUBLE
48609: LD_INT 1
48611: DEC
48612: ST_TO_ADDR
48613: LD_EXP 17
48617: PUSH
48618: FOR_TO
48619: IFFALSE 48757
// begin resources := mpStartingResources [ j ] ;
48621: LD_ADDR_VAR 0 13
48625: PUSH
48626: LD_EXP 17
48630: PUSH
48631: LD_VAR 0 3
48635: ARRAY
48636: ST_TO_ADDR
// if resources = 0 then
48637: LD_VAR 0 13
48641: PUSH
48642: LD_INT 0
48644: EQUAL
48645: IFFALSE 48649
// continue ;
48647: GO 48618
// repeat if resources >= 50 then
48649: LD_VAR 0 13
48653: PUSH
48654: LD_INT 50
48656: GREATEREQUAL
48657: IFFALSE 48703
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48659: LD_VAR 0 3
48663: PPUSH
48664: LD_INT 5
48666: PPUSH
48667: LD_VAR 0 5
48671: PPUSH
48672: LD_VAR 0 6
48676: PPUSH
48677: LD_INT 6
48679: PPUSH
48680: LD_INT 0
48682: PPUSH
48683: CALL_OW 60
// resources := resources - 50 ;
48687: LD_ADDR_VAR 0 13
48691: PUSH
48692: LD_VAR 0 13
48696: PUSH
48697: LD_INT 50
48699: MINUS
48700: ST_TO_ADDR
// end else
48701: GO 48745
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48703: LD_VAR 0 3
48707: PPUSH
48708: LD_VAR 0 13
48712: PUSH
48713: LD_INT 10
48715: DIV
48716: PPUSH
48717: LD_VAR 0 5
48721: PPUSH
48722: LD_VAR 0 6
48726: PPUSH
48727: LD_INT 6
48729: PPUSH
48730: LD_INT 0
48732: PPUSH
48733: CALL_OW 60
// resources := 0 ;
48737: LD_ADDR_VAR 0 13
48741: PUSH
48742: LD_INT 0
48744: ST_TO_ADDR
// end ; until resources <= 0 ;
48745: LD_VAR 0 13
48749: PUSH
48750: LD_INT 0
48752: LESSEQUAL
48753: IFFALSE 48649
// end ;
48755: GO 48618
48757: POP
48758: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
48759: LD_EXP 19
48763: PPUSH
48764: CALL 5840 0 1
48768: IFFALSE 48788
48770: PUSH
48771: LD_EXP 5
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 8
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: IN
48786: NOT
48787: AND
48788: IFFALSE 48866
// begin for j in mpBuildings [ pos ] do
48790: LD_ADDR_VAR 0 3
48794: PUSH
48795: LD_EXP 19
48799: PUSH
48800: LD_VAR 0 8
48804: ARRAY
48805: PUSH
48806: FOR_IN
48807: IFFALSE 48864
// begin bc_level := 0 ;
48809: LD_ADDR_OWVAR 43
48813: PUSH
48814: LD_INT 0
48816: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48817: LD_ADDR_OWVAR 42
48821: PUSH
48822: LD_VAR 0 3
48826: PUSH
48827: LD_INT 1
48829: ARRAY
48830: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48831: LD_VAR 0 3
48835: PUSH
48836: LD_INT 2
48838: ARRAY
48839: PPUSH
48840: LD_VAR 0 3
48844: PUSH
48845: LD_INT 3
48847: ARRAY
48848: PPUSH
48849: LD_VAR 0 3
48853: PUSH
48854: LD_INT 4
48856: ARRAY
48857: PPUSH
48858: CALL_OW 47
// end ;
48862: GO 48806
48864: POP
48865: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48866: LD_EXP 28
48870: IFFALSE 48890
48872: PUSH
48873: LD_INT 20
48875: PPUSH
48876: LD_VAR 0 7
48880: PPUSH
48881: CALL_OW 321
48885: PUSH
48886: LD_INT 1
48888: EQUAL
48889: AND
48890: IFFALSE 48907
// SetTech ( tech_SibDet , side , state_researched ) ;
48892: LD_INT 20
48894: PPUSH
48895: LD_VAR 0 7
48899: PPUSH
48900: LD_INT 2
48902: PPUSH
48903: CALL_OW 322
// if not mpArtifacts then
48907: LD_EXP 47
48911: NOT
48912: IFFALSE 48929
// SetTech ( tech_artifact , side , state_disabled ) ;
48914: LD_INT 24
48916: PPUSH
48917: LD_VAR 0 7
48921: PPUSH
48922: LD_INT 0
48924: PPUSH
48925: CALL_OW 322
// if mpSibBomb = 1 then
48929: LD_EXP 30
48933: PUSH
48934: LD_INT 1
48936: EQUAL
48937: IFFALSE 48956
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48939: LD_INT 25
48941: PPUSH
48942: LD_VAR 0 7
48946: PPUSH
48947: LD_INT 1
48949: PPUSH
48950: CALL_OW 322
// end else
48954: GO 48971
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48956: LD_INT 25
48958: PPUSH
48959: LD_VAR 0 7
48963: PPUSH
48964: LD_INT 0
48966: PPUSH
48967: CALL_OW 322
// end ; if mpVehicles then
48971: LD_EXP 38
48975: IFFALSE 49074
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48977: LD_ADDR_VAR 0 3
48981: PUSH
48982: LD_VAR 0 7
48986: PPUSH
48987: LD_VAR 0 9
48991: PPUSH
48992: LD_EXP 38
48996: PPUSH
48997: CALL 50333 0 3
49001: PUSH
49002: FOR_IN
49003: IFFALSE 49072
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
49005: LD_VAR 0 3
49009: PPUSH
49010: LD_INT 0
49012: PPUSH
49013: LD_INT 5
49015: PPUSH
49016: CALL_OW 12
49020: PPUSH
49021: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
49025: LD_VAR 0 3
49029: PPUSH
49030: LD_EXP 23
49034: PUSH
49035: LD_VAR 0 8
49039: ARRAY
49040: PUSH
49041: LD_INT 1
49043: ARRAY
49044: PPUSH
49045: LD_EXP 23
49049: PUSH
49050: LD_VAR 0 8
49054: ARRAY
49055: PUSH
49056: LD_INT 2
49058: ARRAY
49059: PPUSH
49060: LD_INT 12
49062: PPUSH
49063: LD_INT 0
49065: PPUSH
49066: CALL_OW 50
// end ;
49070: GO 49002
49072: POP
49073: POP
// end ; uc_nation := nation ;
49074: LD_ADDR_OWVAR 21
49078: PUSH
49079: LD_VAR 0 9
49083: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
49084: LD_EXP 5
49088: PUSH
49089: LD_INT 6
49091: PUSH
49092: LD_INT 7
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: IN
49099: IFFALSE 49124
49101: PUSH
49102: LD_EXP 9
49106: PUSH
49107: LD_VAR 0 2
49111: ARRAY
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: IN
49123: AND
49124: IFFALSE 49172
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
49126: LD_ADDR_VAR 0 11
49130: PUSH
49131: LD_VAR 0 7
49135: PPUSH
49136: LD_VAR 0 9
49140: PPUSH
49141: LD_EXP 26
49145: PUSH
49146: LD_EXP 26
49150: PUSH
49151: LD_INT 2
49153: DIV
49154: PLUS
49155: PPUSH
49156: LD_EXP 27
49160: PUSH
49161: LD_INT 1
49163: PLUS
49164: PPUSH
49165: CALL 49788 0 4
49169: ST_TO_ADDR
49170: GO 49202
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
49172: LD_ADDR_VAR 0 11
49176: PUSH
49177: LD_VAR 0 7
49181: PPUSH
49182: LD_VAR 0 9
49186: PPUSH
49187: LD_EXP 26
49191: PPUSH
49192: LD_EXP 27
49196: PPUSH
49197: CALL 49788 0 4
49201: ST_TO_ADDR
// for j in team do
49202: LD_ADDR_VAR 0 3
49206: PUSH
49207: LD_VAR 0 11
49211: PUSH
49212: FOR_IN
49213: IFFALSE 49262
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
49215: LD_VAR 0 3
49219: PPUSH
49220: LD_EXP 23
49224: PUSH
49225: LD_VAR 0 8
49229: ARRAY
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PPUSH
49235: LD_EXP 23
49239: PUSH
49240: LD_VAR 0 8
49244: ARRAY
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: PPUSH
49250: LD_INT 12
49252: PPUSH
49253: LD_INT 0
49255: PPUSH
49256: CALL_OW 50
49260: GO 49212
49262: POP
49263: POP
// if mpApemans then
49264: LD_EXP 32
49268: IFFALSE 49374
// begin for j := 1 to mpApemans do
49270: LD_ADDR_VAR 0 3
49274: PUSH
49275: DOUBLE
49276: LD_INT 1
49278: DEC
49279: ST_TO_ADDR
49280: LD_EXP 32
49284: PUSH
49285: FOR_TO
49286: IFFALSE 49372
// begin PrepareApeman ( - 5 ) ;
49288: LD_INT 5
49290: NEG
49291: PPUSH
49292: CALL 37943 0 1
// ape := CreateHuman ;
49296: LD_ADDR_VAR 0 10
49300: PUSH
49301: CALL_OW 44
49305: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
49306: LD_ADDR_EXP 34
49310: PUSH
49311: LD_EXP 34
49315: PPUSH
49316: LD_VAR 0 8
49320: PPUSH
49321: LD_EXP 34
49325: PUSH
49326: LD_VAR 0 8
49330: ARRAY
49331: PPUSH
49332: LD_VAR 0 10
49336: PPUSH
49337: CALL 41816 0 2
49341: PPUSH
49342: CALL_OW 1
49346: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
49347: LD_VAR 0 10
49351: PPUSH
49352: LD_EXP 33
49356: PUSH
49357: LD_VAR 0 8
49361: ARRAY
49362: PPUSH
49363: LD_INT 0
49365: PPUSH
49366: CALL_OW 49
// end ;
49370: GO 49285
49372: POP
49373: POP
// end ; end ;
49374: GO 47916
49376: POP
49377: POP
// if not mpTeamGame then
49378: LD_EXP 13
49382: NOT
49383: IFFALSE 49481
// begin for i := 1 to 8 do
49385: LD_ADDR_VAR 0 2
49389: PUSH
49390: DOUBLE
49391: LD_INT 1
49393: DEC
49394: ST_TO_ADDR
49395: LD_INT 8
49397: PUSH
49398: FOR_TO
49399: IFFALSE 49477
// for j := 1 to 8 do
49401: LD_ADDR_VAR 0 3
49405: PUSH
49406: DOUBLE
49407: LD_INT 1
49409: DEC
49410: ST_TO_ADDR
49411: LD_INT 8
49413: PUSH
49414: FOR_TO
49415: IFFALSE 49473
// if i <> j then
49417: LD_VAR 0 2
49421: PUSH
49422: LD_VAR 0 3
49426: NONEQUAL
49427: IFFALSE 49451
// SetAttitude ( i , j , att_neutral , true ) else
49429: LD_VAR 0 2
49433: PPUSH
49434: LD_VAR 0 3
49438: PPUSH
49439: LD_INT 0
49441: PPUSH
49442: LD_INT 1
49444: PPUSH
49445: CALL_OW 80
49449: GO 49471
// SetAttitude ( i , j , att_friend , true ) ;
49451: LD_VAR 0 2
49455: PPUSH
49456: LD_VAR 0 3
49460: PPUSH
49461: LD_INT 1
49463: PPUSH
49464: LD_INT 1
49466: PPUSH
49467: CALL_OW 80
49471: GO 49414
49473: POP
49474: POP
49475: GO 49398
49477: POP
49478: POP
// end else
49479: GO 49656
// begin if mpSharedVision then
49481: LD_EXP 18
49485: IFFALSE 49550
// begin for i in mpTeams do
49487: LD_ADDR_VAR 0 2
49491: PUSH
49492: LD_EXP 12
49496: PUSH
49497: FOR_IN
49498: IFFALSE 49548
// for j := 2 to i do
49500: LD_ADDR_VAR 0 3
49504: PUSH
49505: DOUBLE
49506: LD_INT 2
49508: DEC
49509: ST_TO_ADDR
49510: LD_VAR 0 2
49514: PUSH
49515: FOR_TO
49516: IFFALSE 49544
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
49518: LD_VAR 0 2
49522: PUSH
49523: LD_VAR 0 3
49527: ARRAY
49528: PPUSH
49529: LD_VAR 0 2
49533: PUSH
49534: LD_INT 1
49536: ARRAY
49537: PPUSH
49538: CALL_OW 343
49542: GO 49515
49544: POP
49545: POP
49546: GO 49497
49548: POP
49549: POP
// end ; for i := 1 to 8 do
49550: LD_ADDR_VAR 0 2
49554: PUSH
49555: DOUBLE
49556: LD_INT 1
49558: DEC
49559: ST_TO_ADDR
49560: LD_INT 8
49562: PUSH
49563: FOR_TO
49564: IFFALSE 49654
// for j := 1 to 8 do
49566: LD_ADDR_VAR 0 3
49570: PUSH
49571: DOUBLE
49572: LD_INT 1
49574: DEC
49575: ST_TO_ADDR
49576: LD_INT 8
49578: PUSH
49579: FOR_TO
49580: IFFALSE 49650
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
49582: LD_EXP 10
49586: PUSH
49587: LD_VAR 0 2
49591: ARRAY
49592: PUSH
49593: LD_EXP 10
49597: PUSH
49598: LD_VAR 0 3
49602: ARRAY
49603: EQUAL
49604: IFFALSE 49628
// SetAttitude ( i , j , att_friend , true ) else
49606: LD_VAR 0 2
49610: PPUSH
49611: LD_VAR 0 3
49615: PPUSH
49616: LD_INT 1
49618: PPUSH
49619: LD_INT 1
49621: PPUSH
49622: CALL_OW 80
49626: GO 49648
// SetAttitude ( i , j , att_enemy , true ) ;
49628: LD_VAR 0 2
49632: PPUSH
49633: LD_VAR 0 3
49637: PPUSH
49638: LD_INT 2
49640: PPUSH
49641: LD_INT 1
49643: PPUSH
49644: CALL_OW 80
49648: GO 49579
49650: POP
49651: POP
49652: GO 49563
49654: POP
49655: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49656: LD_ADDR_OWVAR 71
49660: PUSH
49661: LD_EXP 11
49665: PUSH
49666: LD_OWVAR 2
49670: ARRAY
49671: ST_TO_ADDR
// if IAmSpec then
49672: CALL_OW 531
49676: IFFALSE 49717
// begin FogOff ( true ) ;
49678: LD_INT 1
49680: PPUSH
49681: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49685: LD_EXP 31
49689: PUSH
49690: LD_INT 1
49692: ARRAY
49693: PUSH
49694: LD_INT 2
49696: DIV
49697: PPUSH
49698: LD_EXP 31
49702: PUSH
49703: LD_INT 2
49705: ARRAY
49706: PUSH
49707: LD_INT 2
49709: DIV
49710: PPUSH
49711: CALL_OW 86
// end else
49715: GO 49763
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49717: LD_EXP 23
49721: PUSH
49722: LD_EXP 9
49726: PUSH
49727: LD_OWVAR 2
49731: ARRAY
49732: ARRAY
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: PPUSH
49738: LD_EXP 23
49742: PUSH
49743: LD_EXP 9
49747: PUSH
49748: LD_OWVAR 2
49752: ARRAY
49753: ARRAY
49754: PUSH
49755: LD_INT 2
49757: ARRAY
49758: PPUSH
49759: CALL_OW 86
// end ; BeginBuildUp ;
49763: CALL 50866 0 0
// enable ( mpActive ) ;
49767: LD_INT 100
49769: ENABLE_MARKED
// enable ( mpGameType ) ;
49770: LD_EXP 5
49774: ENABLE_MARKED
// mpGameActive := true ;
49775: LD_ADDR_EXP 41
49779: PUSH
49780: LD_INT 1
49782: ST_TO_ADDR
// end ;
49783: LD_VAR 0 1
49787: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49788: LD_INT 0
49790: PPUSH
49791: PPUSH
49792: PPUSH
49793: PPUSH
49794: PPUSH
// result := [ ] ;
49795: LD_ADDR_VAR 0 5
49799: PUSH
49800: EMPTY
49801: ST_TO_ADDR
// class := class_soldier ;
49802: LD_ADDR_VAR 0 8
49806: PUSH
49807: LD_INT 1
49809: ST_TO_ADDR
// uc_side := side ;
49810: LD_ADDR_OWVAR 20
49814: PUSH
49815: LD_VAR 0 1
49819: ST_TO_ADDR
// uc_nation := nation ;
49820: LD_ADDR_OWVAR 21
49824: PUSH
49825: LD_VAR 0 2
49829: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49830: LD_ADDR_OWVAR 26
49834: PUSH
49835: LD_OWVAR 19
49839: PUSH
49840: LD_VAR 0 1
49844: ARRAY
49845: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49846: LD_INT 1
49848: PPUSH
49849: LD_INT 2
49851: PPUSH
49852: CALL_OW 12
49856: PPUSH
49857: LD_VAR 0 8
49861: PPUSH
49862: LD_VAR 0 4
49866: PUSH
49867: LD_INT 2
49869: PLUS
49870: PPUSH
49871: CALL_OW 380
// hc_importance := 105 ;
49875: LD_ADDR_OWVAR 32
49879: PUSH
49880: LD_INT 105
49882: ST_TO_ADDR
// if Multiplayer then
49883: LD_OWVAR 4
49887: IFFALSE 49927
// begin hc_gallery := MULTIAVATARS ;
49889: LD_ADDR_OWVAR 33
49893: PUSH
49894: LD_STRING MULTIAVATARS
49896: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49897: LD_ADDR_OWVAR 34
49901: PUSH
49902: LD_VAR 0 1
49906: PPUSH
49907: CALL_OW 525
49911: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49912: LD_ADDR_OWVAR 27
49916: PUSH
49917: LD_VAR 0 1
49921: PPUSH
49922: CALL_OW 526
49926: ST_TO_ADDR
// end ; commander := CreateHuman ;
49927: LD_ADDR_VAR 0 9
49931: PUSH
49932: CALL_OW 44
49936: ST_TO_ADDR
// result := Join ( result , commander ) ;
49937: LD_ADDR_VAR 0 5
49941: PUSH
49942: LD_VAR 0 5
49946: PPUSH
49947: LD_VAR 0 9
49951: PPUSH
49952: CALL 41816 0 2
49956: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49957: LD_ADDR_EXP 43
49961: PUSH
49962: LD_EXP 43
49966: PPUSH
49967: LD_VAR 0 1
49971: PPUSH
49972: LD_VAR 0 9
49976: PPUSH
49977: CALL_OW 1
49981: ST_TO_ADDR
// if mpTeamPreset then
49982: LD_LOC 1
49986: IFFALSE 50082
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49988: LD_LOC 1
49992: PUSH
49993: LD_INT 1
49995: ARRAY
49996: PPUSH
49997: LD_VAR 0 5
50001: PUSH
50002: LD_VAR 0 5
50006: ARRAY
50007: PPUSH
50008: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
50012: LD_VAR 0 5
50016: PUSH
50017: LD_VAR 0 5
50021: ARRAY
50022: PPUSH
50023: LD_INT 1
50025: PPUSH
50026: LD_LOC 1
50030: PUSH
50031: LD_INT 1
50033: ARRAY
50034: PPUSH
50035: LD_INT 1
50037: PPUSH
50038: CALL_OW 260
50042: PPUSH
50043: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
50047: LD_VAR 0 5
50051: PUSH
50052: LD_VAR 0 5
50056: ARRAY
50057: PPUSH
50058: LD_INT 2
50060: PPUSH
50061: LD_LOC 1
50065: PUSH
50066: LD_INT 1
50068: ARRAY
50069: PPUSH
50070: LD_INT 2
50072: PPUSH
50073: CALL_OW 260
50077: PPUSH
50078: CALL_OW 239
// end ; InitHc_All ( ) ;
50082: CALL_OW 584
// class := 2 ;
50086: LD_ADDR_VAR 0 8
50090: PUSH
50091: LD_INT 2
50093: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
50094: LD_ADDR_VAR 0 6
50098: PUSH
50099: DOUBLE
50100: LD_INT 1
50102: DEC
50103: ST_TO_ADDR
50104: LD_VAR 0 3
50108: PUSH
50109: LD_INT 1
50111: MINUS
50112: PUSH
50113: FOR_TO
50114: IFFALSE 50309
// begin PrepareHuman ( false , class , skill ) ;
50116: LD_INT 0
50118: PPUSH
50119: LD_VAR 0 8
50123: PPUSH
50124: LD_VAR 0 4
50128: PPUSH
50129: CALL_OW 380
// un := CreateHuman ;
50133: LD_ADDR_VAR 0 7
50137: PUSH
50138: CALL_OW 44
50142: ST_TO_ADDR
// result := Join ( result , un ) ;
50143: LD_ADDR_VAR 0 5
50147: PUSH
50148: LD_VAR 0 5
50152: PPUSH
50153: LD_VAR 0 7
50157: PPUSH
50158: CALL 41816 0 2
50162: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
50163: LD_LOC 1
50167: PPUSH
50168: CALL 5840 0 1
50172: PUSH
50173: LD_VAR 0 3
50177: GREATEREQUAL
50178: IFFALSE 50274
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
50180: LD_LOC 1
50184: PUSH
50185: LD_VAR 0 6
50189: PUSH
50190: LD_INT 1
50192: PLUS
50193: ARRAY
50194: PPUSH
50195: LD_VAR 0 7
50199: PPUSH
50200: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
50204: LD_VAR 0 7
50208: PPUSH
50209: LD_INT 1
50211: PPUSH
50212: LD_LOC 1
50216: PUSH
50217: LD_VAR 0 6
50221: PUSH
50222: LD_INT 1
50224: PLUS
50225: ARRAY
50226: PPUSH
50227: LD_INT 1
50229: PPUSH
50230: CALL_OW 260
50234: PPUSH
50235: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
50239: LD_VAR 0 7
50243: PPUSH
50244: LD_INT 2
50246: PPUSH
50247: LD_LOC 1
50251: PUSH
50252: LD_VAR 0 6
50256: PUSH
50257: LD_INT 1
50259: PLUS
50260: ARRAY
50261: PPUSH
50262: LD_INT 2
50264: PPUSH
50265: CALL_OW 260
50269: PPUSH
50270: CALL_OW 239
// end ; class := Inc ( class ) ;
50274: LD_ADDR_VAR 0 8
50278: PUSH
50279: LD_VAR 0 8
50283: PPUSH
50284: CALL 43189 0 1
50288: ST_TO_ADDR
// if class = 5 then
50289: LD_VAR 0 8
50293: PUSH
50294: LD_INT 5
50296: EQUAL
50297: IFFALSE 50307
// class := 1 ;
50299: LD_ADDR_VAR 0 8
50303: PUSH
50304: LD_INT 1
50306: ST_TO_ADDR
// end ;
50307: GO 50113
50309: POP
50310: POP
// if not mpTeamPreset then
50311: LD_LOC 1
50315: NOT
50316: IFFALSE 50328
// mpTeamPreset := result ;
50318: LD_ADDR_LOC 1
50322: PUSH
50323: LD_VAR 0 5
50327: ST_TO_ADDR
// end ;
50328: LD_VAR 0 5
50332: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
50333: LD_INT 0
50335: PPUSH
50336: PPUSH
// result := [ ] ;
50337: LD_ADDR_VAR 0 4
50341: PUSH
50342: EMPTY
50343: ST_TO_ADDR
// if not vehicles then
50344: LD_VAR 0 3
50348: NOT
50349: IFFALSE 50353
// exit ;
50351: GO 50567
// for i := 1 to vehicles [ nation ] do
50353: LD_ADDR_VAR 0 5
50357: PUSH
50358: DOUBLE
50359: LD_INT 1
50361: DEC
50362: ST_TO_ADDR
50363: LD_VAR 0 3
50367: PUSH
50368: LD_VAR 0 2
50372: ARRAY
50373: PUSH
50374: FOR_TO
50375: IFFALSE 50565
// begin uc_side := side ;
50377: LD_ADDR_OWVAR 20
50381: PUSH
50382: LD_VAR 0 1
50386: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
50387: LD_VAR 0 3
50391: PUSH
50392: LD_VAR 0 2
50396: ARRAY
50397: PUSH
50398: LD_VAR 0 5
50402: ARRAY
50403: PPUSH
50404: CALL 5840 0 1
50408: PUSH
50409: LD_INT 4
50411: GREATER
50412: IFFALSE 50442
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
50414: LD_ADDR_OWVAR 21
50418: PUSH
50419: LD_VAR 0 3
50423: PUSH
50424: LD_VAR 0 2
50428: ARRAY
50429: PUSH
50430: LD_VAR 0 5
50434: ARRAY
50435: PUSH
50436: LD_INT 5
50438: ARRAY
50439: ST_TO_ADDR
50440: GO 50452
// uc_nation := nation ;
50442: LD_ADDR_OWVAR 21
50446: PUSH
50447: LD_VAR 0 2
50451: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
50452: LD_VAR 0 3
50456: PUSH
50457: LD_VAR 0 2
50461: ARRAY
50462: PUSH
50463: LD_VAR 0 5
50467: ARRAY
50468: PUSH
50469: LD_INT 1
50471: ARRAY
50472: PPUSH
50473: LD_VAR 0 3
50477: PUSH
50478: LD_VAR 0 2
50482: ARRAY
50483: PUSH
50484: LD_VAR 0 5
50488: ARRAY
50489: PUSH
50490: LD_INT 2
50492: ARRAY
50493: PPUSH
50494: LD_VAR 0 3
50498: PUSH
50499: LD_VAR 0 2
50503: ARRAY
50504: PUSH
50505: LD_VAR 0 5
50509: ARRAY
50510: PUSH
50511: LD_INT 3
50513: ARRAY
50514: PPUSH
50515: LD_VAR 0 3
50519: PUSH
50520: LD_VAR 0 2
50524: ARRAY
50525: PUSH
50526: LD_VAR 0 5
50530: ARRAY
50531: PUSH
50532: LD_INT 4
50534: ARRAY
50535: PPUSH
50536: LD_INT 80
50538: PPUSH
50539: CALL 8636 0 5
// result := Join ( result , CreateVehicle ) ;
50543: LD_ADDR_VAR 0 4
50547: PUSH
50548: LD_VAR 0 4
50552: PPUSH
50553: CALL_OW 45
50557: PPUSH
50558: CALL 41816 0 2
50562: ST_TO_ADDR
// end ;
50563: GO 50374
50565: POP
50566: POP
// end ;
50567: LD_VAR 0 4
50571: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
50572: LD_INT 0
50574: PPUSH
50575: PPUSH
// for i in mpBattleFlags do
50576: LD_ADDR_VAR 0 3
50580: PUSH
50581: LD_EXP 25
50585: PUSH
50586: FOR_IN
50587: IFFALSE 50664
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
50589: LD_VAR 0 3
50593: PPUSH
50594: LD_INT 1
50596: PUSH
50597: LD_VAR 0 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_VAR 0 1
50613: PUSH
50614: LD_REAL  7.00000000000000E-0001
50617: MUL
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: LD_VAR 0 1
50630: PUSH
50631: LD_REAL  4.00000000000000E-0001
50634: MUL
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 20
50642: PUSH
50643: LD_VAR 0 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: PPUSH
50658: CALL_OW 423
50662: GO 50586
50664: POP
50665: POP
// end ;
50666: LD_VAR 0 2
50670: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50671: LD_INT 100
50673: IFFALSE 50768
50675: GO 50677
50677: DISABLE
50678: LD_INT 0
50680: PPUSH
50681: PPUSH
// begin if mpBattleFlag <= 0 then
50682: LD_EXP 24
50686: PUSH
50687: LD_INT 0
50689: LESSEQUAL
50690: IFFALSE 50694
// exit ;
50692: GO 50768
// strength := 100 ;
50694: LD_ADDR_VAR 0 2
50698: PUSH
50699: LD_INT 100
50701: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50702: LD_EXP 24
50706: PPUSH
50707: CALL_OW 67
// strength := Dec ( strength ) ;
50711: LD_ADDR_VAR 0 2
50715: PUSH
50716: LD_VAR 0 2
50720: PPUSH
50721: CALL 43211 0 1
50725: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50726: LD_VAR 0 2
50730: PPUSH
50731: CALL 50572 0 1
// until not strength ;
50735: LD_VAR 0 2
50739: NOT
50740: IFFALSE 50702
// for i in mpBattleFlags do
50742: LD_ADDR_VAR 0 1
50746: PUSH
50747: LD_EXP 25
50751: PUSH
50752: FOR_IN
50753: IFFALSE 50766
// KillBattleFlag ( i ) ;
50755: LD_VAR 0 1
50759: PPUSH
50760: CALL_OW 419
50764: GO 50752
50766: POP
50767: POP
// end ;
50768: PPOPN 2
50770: END
// every 0 0$1 marked mpActive do var side , tmp ;
50771: GO 50773
50773: DISABLE
50774: LD_INT 0
50776: PPUSH
50777: PPUSH
// begin if mpSibBomb <= 1 then
50778: LD_EXP 30
50782: PUSH
50783: LD_INT 1
50785: LESSEQUAL
50786: IFFALSE 50790
// exit ;
50788: GO 50863
// tmp := mpSibBomb ;
50790: LD_ADDR_VAR 0 2
50794: PUSH
50795: LD_EXP 30
50799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50800: LD_INT 35
50802: PPUSH
50803: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50807: LD_ADDR_VAR 0 2
50811: PUSH
50812: LD_VAR 0 2
50816: PUSH
50817: LD_INT 35
50819: MINUS
50820: ST_TO_ADDR
// until not tmp ;
50821: LD_VAR 0 2
50825: NOT
50826: IFFALSE 50800
// for side := 1 to 8 do
50828: LD_ADDR_VAR 0 1
50832: PUSH
50833: DOUBLE
50834: LD_INT 1
50836: DEC
50837: ST_TO_ADDR
50838: LD_INT 8
50840: PUSH
50841: FOR_TO
50842: IFFALSE 50861
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50844: LD_INT 25
50846: PPUSH
50847: LD_VAR 0 1
50851: PPUSH
50852: LD_INT 1
50854: PPUSH
50855: CALL_OW 322
50859: GO 50841
50861: POP
50862: POP
// end ;
50863: PPOPN 2
50865: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50866: LD_INT 0
50868: PPUSH
50869: PPUSH
50870: PPUSH
// mpBuildUpTimeDelay := 0 ;
50871: LD_ADDR_EXP 50
50875: PUSH
50876: LD_INT 0
50878: ST_TO_ADDR
// if not mpBuildUpTime then
50879: LD_EXP 22
50883: NOT
50884: IFFALSE 50888
// exit ;
50886: GO 51077
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50888: LD_ADDR_EXP 50
50892: PUSH
50893: LD_INT 8400
50895: PUSH
50896: LD_INT 2100
50898: PUSH
50899: LD_EXP 22
50903: MUL
50904: PLUS
50905: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50906: LD_ADDR_EXP 51
50910: PUSH
50911: LD_INT 1
50913: ST_TO_ADDR
// for i := 1 to 8 do
50914: LD_ADDR_VAR 0 2
50918: PUSH
50919: DOUBLE
50920: LD_INT 1
50922: DEC
50923: ST_TO_ADDR
50924: LD_INT 8
50926: PUSH
50927: FOR_TO
50928: IFFALSE 51075
// if mpSidePositions [ i ] then
50930: LD_EXP 9
50934: PUSH
50935: LD_VAR 0 2
50939: ARRAY
50940: IFFALSE 51073
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50942: LD_EXP 21
50946: PUSH
50947: LD_EXP 9
50951: PUSH
50952: LD_VAR 0 2
50956: ARRAY
50957: ARRAY
50958: PPUSH
50959: LD_INT 5
50961: PPUSH
50962: CALL_OW 424
// for j := 1 to 8 do
50966: LD_ADDR_VAR 0 3
50970: PUSH
50971: DOUBLE
50972: LD_INT 1
50974: DEC
50975: ST_TO_ADDR
50976: LD_INT 8
50978: PUSH
50979: FOR_TO
50980: IFFALSE 51071
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50982: LD_EXP 9
50986: PUSH
50987: LD_VAR 0 3
50991: ARRAY
50992: IFFALSE 51041
50994: PUSH
50995: LD_EXP 10
50999: PUSH
51000: LD_VAR 0 2
51004: ARRAY
51005: PUSH
51006: LD_EXP 10
51010: PUSH
51011: LD_VAR 0 3
51015: ARRAY
51016: NONEQUAL
51017: IFTRUE 51040
51019: PUSH
51020: LD_EXP 13
51024: NOT
51025: IFFALSE 51039
51027: PUSH
51028: LD_VAR 0 2
51032: PUSH
51033: LD_VAR 0 3
51037: NONEQUAL
51038: AND
51039: OR
51040: AND
51041: IFFALSE 51069
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
51043: LD_VAR 0 3
51047: PPUSH
51048: LD_EXP 21
51052: PUSH
51053: LD_EXP 9
51057: PUSH
51058: LD_VAR 0 2
51062: ARRAY
51063: ARRAY
51064: PPUSH
51065: CALL_OW 333
51069: GO 50979
51071: POP
51072: POP
// end ;
51073: GO 50927
51075: POP
51076: POP
// end ;
51077: LD_VAR 0 1
51081: RET
// function EndBuildUp ; var i , j ; begin
51082: LD_INT 0
51084: PPUSH
51085: PPUSH
51086: PPUSH
// mpBuildUpTimeActive := false ;
51087: LD_ADDR_EXP 51
51091: PUSH
51092: LD_INT 0
51094: ST_TO_ADDR
// for i := 1 to 8 do
51095: LD_ADDR_VAR 0 2
51099: PUSH
51100: DOUBLE
51101: LD_INT 1
51103: DEC
51104: ST_TO_ADDR
51105: LD_INT 8
51107: PUSH
51108: FOR_TO
51109: IFFALSE 51256
// if mpSidePositions [ i ] then
51111: LD_EXP 9
51115: PUSH
51116: LD_VAR 0 2
51120: ARRAY
51121: IFFALSE 51254
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
51123: LD_EXP 21
51127: PUSH
51128: LD_EXP 9
51132: PUSH
51133: LD_VAR 0 2
51137: ARRAY
51138: ARRAY
51139: PPUSH
51140: LD_INT 0
51142: PPUSH
51143: CALL_OW 424
// for j := 1 to 8 do
51147: LD_ADDR_VAR 0 3
51151: PUSH
51152: DOUBLE
51153: LD_INT 1
51155: DEC
51156: ST_TO_ADDR
51157: LD_INT 8
51159: PUSH
51160: FOR_TO
51161: IFFALSE 51252
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
51163: LD_EXP 9
51167: PUSH
51168: LD_VAR 0 3
51172: ARRAY
51173: IFFALSE 51222
51175: PUSH
51176: LD_EXP 10
51180: PUSH
51181: LD_VAR 0 2
51185: ARRAY
51186: PUSH
51187: LD_EXP 10
51191: PUSH
51192: LD_VAR 0 3
51196: ARRAY
51197: NONEQUAL
51198: IFTRUE 51221
51200: PUSH
51201: LD_EXP 13
51205: NOT
51206: IFFALSE 51220
51208: PUSH
51209: LD_VAR 0 2
51213: PUSH
51214: LD_VAR 0 3
51218: NONEQUAL
51219: AND
51220: OR
51221: AND
51222: IFFALSE 51250
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
51224: LD_VAR 0 3
51228: PPUSH
51229: LD_EXP 21
51233: PUSH
51234: LD_EXP 9
51238: PUSH
51239: LD_VAR 0 2
51243: ARRAY
51244: ARRAY
51245: PPUSH
51246: CALL_OW 334
51250: GO 51160
51252: POP
51253: POP
// end ;
51254: GO 51108
51256: POP
51257: POP
// end ;
51258: LD_VAR 0 1
51262: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
51263: LD_EXP 51
51267: IFFALSE 51446
51269: GO 51271
51271: DISABLE
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
// begin for i := 1 to 8 do
51276: LD_ADDR_VAR 0 1
51280: PUSH
51281: DOUBLE
51282: LD_INT 1
51284: DEC
51285: ST_TO_ADDR
51286: LD_INT 8
51288: PUSH
51289: FOR_TO
51290: IFFALSE 51443
// if mpSidePositions [ i ] then
51292: LD_EXP 9
51296: PUSH
51297: LD_VAR 0 1
51301: ARRAY
51302: IFFALSE 51441
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
51304: LD_ADDR_VAR 0 2
51308: PUSH
51309: LD_EXP 21
51313: PUSH
51314: LD_EXP 9
51318: PUSH
51319: LD_VAR 0 1
51323: ARRAY
51324: ARRAY
51325: PPUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 21
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 21
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 22
51356: PUSH
51357: LD_OWVAR 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PPUSH
51370: CALL_OW 70
51374: PUSH
51375: FOR_IN
51376: IFFALSE 51439
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
51378: LD_EXP 10
51382: PUSH
51383: LD_VAR 0 1
51387: ARRAY
51388: PUSH
51389: LD_EXP 10
51393: PUSH
51394: LD_OWVAR 2
51398: ARRAY
51399: NONEQUAL
51400: IFTRUE 51423
51402: PUSH
51403: LD_EXP 13
51407: NOT
51408: IFFALSE 51422
51410: PUSH
51411: LD_VAR 0 1
51415: PUSH
51416: LD_OWVAR 2
51420: NONEQUAL
51421: AND
51422: OR
51423: IFFALSE 51437
// ComMoveToArea ( un , BuildUpEscape ) ;
51425: LD_VAR 0 2
51429: PPUSH
51430: LD_INT 9
51432: PPUSH
51433: CALL_OW 113
51437: GO 51375
51439: POP
51440: POP
51441: GO 51289
51443: POP
51444: POP
// enable ;
51445: ENABLE
// end ;
51446: PPOPN 2
51448: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
51449: LD_EXP 22
51453: IFFALSE 51503
51455: GO 51457
51457: DISABLE
51458: LD_INT 0
51460: PPUSH
// begin tmp := mpBuildUpTime ;
51461: LD_ADDR_VAR 0 1
51465: PUSH
51466: LD_EXP 22
51470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51471: LD_INT 35
51473: PPUSH
51474: CALL_OW 67
// tmp := tmp - 0 0$1 ;
51478: LD_ADDR_VAR 0 1
51482: PUSH
51483: LD_VAR 0 1
51487: PUSH
51488: LD_INT 35
51490: MINUS
51491: ST_TO_ADDR
// until not tmp ;
51492: LD_VAR 0 1
51496: NOT
51497: IFFALSE 51471
// EndBuildUp ;
51499: CALL 51082 0 0
// end ;
51503: PPOPN 1
51505: END
// every 0 0$1 trigger mpActive marked mpWin do
51506: LD_INT 100
51508: IFFALSE 51542
51510: GO 51512
51512: DISABLE
// begin if IAmServer then
51513: CALL_OW 518
51517: IFFALSE 51526
// wait ( 0 0$3 ) ;
51519: LD_INT 105
51521: PPUSH
51522: CALL_OW 67
// if Multiplayer then
51526: LD_OWVAR 4
51530: IFFALSE 51538
// YouWinInMultiplayer else
51532: CALL_OW 106
51536: GO 51542
// YouWin ;
51538: CALL_OW 103
// end ;
51542: END
// export function HasPowerByGameType ( gameType , side ) ; begin
51543: LD_INT 0
51545: PPUSH
// result := false ;
51546: LD_ADDR_VAR 0 3
51550: PUSH
51551: LD_INT 0
51553: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
51554: LD_VAR 0 1
51558: PUSH
51559: LD_INT 1
51561: DOUBLE
51562: EQUAL
51563: IFTRUE 51585
51565: LD_INT 5
51567: DOUBLE
51568: EQUAL
51569: IFTRUE 51585
51571: LD_INT 6
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51585
51577: LD_INT 7
51579: DOUBLE
51580: EQUAL
51581: IFTRUE 51585
51583: GO 51658
51585: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51586: LD_ADDR_VAR 0 3
51590: PUSH
51591: LD_INT 22
51593: PUSH
51594: LD_VAR 0 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 21
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 33
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 33
51628: PUSH
51629: LD_INT 5
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PPUSH
51646: CALL_OW 69
51650: PPUSH
51651: CALL 5840 0 1
51655: ST_TO_ADDR
// end ; GameTypeSurvival :
51656: GO 52054
51658: LD_INT 2
51660: DOUBLE
51661: EQUAL
51662: IFTRUE 51666
51664: GO 51796
51666: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51667: LD_ADDR_VAR 0 3
51671: PUSH
51672: LD_INT 22
51674: PUSH
51675: LD_VAR 0 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 30
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 30
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PPUSH
51716: CALL_OW 69
51720: PPUSH
51721: CALL 5840 0 1
51725: IFFALSE 51793
51727: PUSH
51728: LD_INT 22
51730: PUSH
51731: LD_VAR 0 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 21
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 33
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 33
51765: PUSH
51766: LD_INT 5
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PPUSH
51783: CALL_OW 69
51787: PPUSH
51788: CALL 5840 0 1
51792: AND
51793: ST_TO_ADDR
// end ; GameTypeSurvivalH :
51794: GO 52054
51796: LD_INT 8
51798: DOUBLE
51799: EQUAL
51800: IFTRUE 51804
51802: GO 51953
51804: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51805: LD_ADDR_VAR 0 3
51809: PUSH
51810: LD_EXP 43
51814: PUSH
51815: LD_VAR 0 2
51819: ARRAY
51820: PPUSH
51821: CALL_OW 300
51825: IFFALSE 51882
51827: PUSH
51828: LD_INT 22
51830: PUSH
51831: LD_VAR 0 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 30
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 30
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PPUSH
51872: CALL_OW 69
51876: PPUSH
51877: CALL 5840 0 1
51881: AND
51882: IFFALSE 51950
51884: PUSH
51885: LD_INT 22
51887: PUSH
51888: LD_VAR 0 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 21
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 33
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 33
51922: PUSH
51923: LD_INT 5
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PPUSH
51940: CALL_OW 69
51944: PPUSH
51945: CALL 5840 0 1
51949: AND
51950: ST_TO_ADDR
// end ; GameTypeKing :
51951: GO 52054
51953: LD_INT 3
51955: DOUBLE
51956: EQUAL
51957: IFTRUE 51961
51959: GO 52053
51961: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51962: LD_ADDR_VAR 0 3
51966: PUSH
51967: LD_INT 22
51969: PUSH
51970: LD_VAR 0 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 21
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 33
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 33
52004: PUSH
52005: LD_INT 5
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PPUSH
52022: CALL_OW 69
52026: PPUSH
52027: CALL 5840 0 1
52031: IFFALSE 52050
52033: PUSH
52034: LD_VAR 0 2
52038: PPUSH
52039: CALL 56727 0 1
52043: PUSH
52044: LD_EXP 37
52048: LESS
52049: AND
52050: ST_TO_ADDR
// end ; end ;
52051: GO 52054
52053: POP
// end ;
52054: LD_VAR 0 3
52058: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
52059: LD_INT 100
52061: IFFALSE 52291
52063: GO 52065
52065: DISABLE
52066: LD_INT 0
52068: PPUSH
52069: PPUSH
// begin if Multiplayer then
52070: LD_OWVAR 4
52074: IFFALSE 52082
// SetPlayerSpectator ( ) else
52076: CALL_OW 572
52080: GO 52091
// FogOff ( your_side ) ;
52082: LD_OWVAR 2
52086: PPUSH
52087: CALL_OW 344
// repeat gameIsOn := false ;
52091: LD_ADDR_VAR 0 1
52095: PUSH
52096: LD_INT 0
52098: ST_TO_ADDR
// for i := 1 to 8 do
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: DOUBLE
52105: LD_INT 1
52107: DEC
52108: ST_TO_ADDR
52109: LD_INT 8
52111: PUSH
52112: FOR_TO
52113: IFFALSE 52243
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52115: LD_EXP 9
52119: PUSH
52120: LD_VAR 0 2
52124: ARRAY
52125: IFFALSE 52138
52127: PUSH
52128: LD_VAR 0 2
52132: PPUSH
52133: CALL_OW 108
52137: AND
52138: IFFALSE 52152
52140: PUSH
52141: LD_VAR 0 2
52145: PUSH
52146: LD_OWVAR 2
52150: NONEQUAL
52151: AND
52152: IFFALSE 52241
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52154: LD_EXP 10
52158: PUSH
52159: LD_VAR 0 2
52163: ARRAY
52164: NOT
52165: IFTRUE 52213
52167: PUSH
52168: LD_EXP 10
52172: PUSH
52173: LD_VAR 0 2
52177: ARRAY
52178: PUSH
52179: LD_EXP 10
52183: PUSH
52184: LD_OWVAR 2
52188: ARRAY
52189: NONEQUAL
52190: IFFALSE 52212
52192: PUSH
52193: LD_OWVAR 2
52197: PPUSH
52198: LD_VAR 0 2
52202: PPUSH
52203: CALL_OW 81
52207: PUSH
52208: LD_INT 1
52210: NONEQUAL
52211: AND
52212: OR
52213: IFFALSE 52241
// if HasPowerByGameType ( mpGameType , i ) then
52215: LD_EXP 5
52219: PPUSH
52220: LD_VAR 0 2
52224: PPUSH
52225: CALL 51543 0 2
52229: IFFALSE 52241
// begin gameIsOn := true ;
52231: LD_ADDR_VAR 0 1
52235: PUSH
52236: LD_INT 1
52238: ST_TO_ADDR
// break ;
52239: GO 52243
// end ;
52241: GO 52112
52243: POP
52244: POP
// wait ( 100 ) ;
52245: LD_INT 100
52247: PPUSH
52248: CALL_OW 67
// until not gameIsOn ;
52252: LD_VAR 0 1
52256: NOT
52257: IFFALSE 52091
// if IAmServer then
52259: CALL_OW 518
52263: IFFALSE 52272
// wait ( 0 0$3 ) ;
52265: LD_INT 105
52267: PPUSH
52268: CALL_OW 67
// if Multiplayer then
52272: LD_OWVAR 4
52276: IFFALSE 52284
// YouLostInMultiplayer else
52278: CALL_OW 107
52282: GO 52291
// YouLost (  ) ;
52284: LD_STRING 
52286: PPUSH
52287: CALL_OW 104
// end ;
52291: PPOPN 2
52293: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
52294: LD_EXP 35
52298: IFFALSE 52682
52300: GO 52302
52302: DISABLE
52303: LD_INT 0
52305: PPUSH
52306: PPUSH
52307: PPUSH
52308: PPUSH
52309: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
52310: LD_ADDR_VAR 0 5
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: LD_INT 5
52329: PUSH
52330: LD_INT 6
52332: PUSH
52333: LD_INT 7
52335: PUSH
52336: LD_INT 8
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
52349: LD_INT 350
52351: PPUSH
52352: CALL_OW 67
// for i := 1 to 8 do
52356: LD_ADDR_VAR 0 1
52360: PUSH
52361: DOUBLE
52362: LD_INT 1
52364: DEC
52365: ST_TO_ADDR
52366: LD_INT 8
52368: PUSH
52369: FOR_TO
52370: IFFALSE 52652
// begin j := sides [ i ] ;
52372: LD_ADDR_VAR 0 2
52376: PUSH
52377: LD_VAR 0 5
52381: PUSH
52382: LD_VAR 0 1
52386: ARRAY
52387: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
52388: LD_EXP 42
52392: PUSH
52393: LD_VAR 0 2
52397: ARRAY
52398: PPUSH
52399: CALL 5840 0 1
52403: IFFALSE 52416
52405: PUSH
52406: LD_VAR 0 2
52410: PPUSH
52411: CALL_OW 108
52415: AND
52416: IFFALSE 52434
52418: PUSH
52419: LD_EXP 5
52423: PPUSH
52424: LD_VAR 0 2
52428: PPUSH
52429: CALL 51543 0 2
52433: AND
52434: IFFALSE 52650
// begin wait ( mpRespawn div 2 ) ;
52436: LD_EXP 35
52440: PUSH
52441: LD_INT 2
52443: DIV
52444: PPUSH
52445: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52449: LD_ADDR_VAR 0 3
52453: PUSH
52454: LD_INT 22
52456: PUSH
52457: LD_VAR 0 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 50
52468: PUSH
52469: EMPTY
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 30
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 30
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: PPUSH
52505: CALL_OW 69
52509: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
52510: LD_VAR 0 3
52514: NOT
52515: IFTRUE 52529
52517: PUSH
52518: LD_VAR 0 2
52522: PPUSH
52523: CALL_OW 108
52527: NOT
52528: OR
52529: IFTRUE 52548
52531: PUSH
52532: LD_EXP 5
52536: PPUSH
52537: LD_VAR 0 2
52541: PPUSH
52542: CALL 51543 0 2
52546: NOT
52547: OR
52548: IFFALSE 52552
// continue ;
52550: GO 52369
// spawn := tmp [ 1 ] ;
52552: LD_ADDR_VAR 0 4
52556: PUSH
52557: LD_VAR 0 3
52561: PUSH
52562: LD_INT 1
52564: ARRAY
52565: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
52566: LD_EXP 42
52570: PUSH
52571: LD_VAR 0 2
52575: ARRAY
52576: PUSH
52577: LD_INT 1
52579: ARRAY
52580: PPUSH
52581: LD_VAR 0 4
52585: PPUSH
52586: CALL_OW 250
52590: PPUSH
52591: LD_VAR 0 4
52595: PPUSH
52596: CALL_OW 251
52600: PPUSH
52601: LD_INT 32
52603: PPUSH
52604: LD_INT 1
52606: PPUSH
52607: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52611: LD_ADDR_EXP 42
52615: PUSH
52616: LD_EXP 42
52620: PPUSH
52621: LD_VAR 0 2
52625: PPUSH
52626: LD_EXP 42
52630: PUSH
52631: LD_VAR 0 2
52635: ARRAY
52636: PPUSH
52637: LD_INT 1
52639: PPUSH
52640: CALL_OW 3
52644: PPUSH
52645: CALL_OW 1
52649: ST_TO_ADDR
// end ; end ;
52650: GO 52369
52652: POP
52653: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52654: LD_ADDR_VAR 0 5
52658: PUSH
52659: LD_VAR 0 5
52663: PPUSH
52664: LD_INT 1
52666: PPUSH
52667: LD_INT 8
52669: PPUSH
52670: LD_INT 1
52672: PPUSH
52673: CALL 8166 0 4
52677: ST_TO_ADDR
// until false ;
52678: LD_INT 0
52680: IFFALSE 52349
// end ;
52682: PPOPN 5
52684: END
// every 0 0$1 marked mpActive do
52685: GO 52687
52687: DISABLE
// begin enable ;
52688: ENABLE
// if not mpDisplayStrings then
52689: LD_EXP 40
52693: NOT
52694: IFFALSE 52705
// begin display_strings := [ ] ;
52696: LD_ADDR_OWVAR 47
52700: PUSH
52701: EMPTY
52702: ST_TO_ADDR
// exit ;
52703: GO 52715
// end ; display_strings := mpDisplayStrings ;
52705: LD_ADDR_OWVAR 47
52709: PUSH
52710: LD_EXP 40
52714: ST_TO_ADDR
// end ; end_of_file
52715: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
// if GetType ( un ) = unit_vehicle then
52727: LD_VAR 0 1
52731: PPUSH
52732: CALL_OW 247
52736: PUSH
52737: LD_INT 2
52739: EQUAL
52740: IFFALSE 52744
// exit ;
52742: GO 53517
// side := GetSide ( un ) ;
52744: LD_ADDR_VAR 0 9
52748: PUSH
52749: LD_VAR 0 1
52753: PPUSH
52754: CALL_OW 255
52758: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
52759: LD_EXP 5
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 8
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: IN
52774: IFFALSE 52868
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52776: LD_VAR 0 1
52780: PPUSH
52781: CALL_OW 266
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: IN
52796: IFFALSE 52868
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52798: LD_ADDR_VAR 0 3
52802: PUSH
52803: LD_INT 22
52805: PUSH
52806: LD_VAR 0 9
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 21
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 33
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PPUSH
52847: CALL_OW 69
52851: PUSH
52852: FOR_IN
52853: IFFALSE 52866
// KillUnit ( i ) ;
52855: LD_VAR 0 3
52859: PPUSH
52860: CALL_OW 66
52864: GO 52852
52866: POP
52867: POP
// end ; if mpGameType = GameTypeSurvivalH then
52868: LD_EXP 5
52872: PUSH
52873: LD_INT 8
52875: EQUAL
52876: IFFALSE 52960
// if un in mpCommanders then
52878: LD_VAR 0 1
52882: PUSH
52883: LD_EXP 43
52887: IN
52888: IFFALSE 52960
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52890: LD_ADDR_VAR 0 3
52894: PUSH
52895: LD_INT 22
52897: PUSH
52898: LD_VAR 0 9
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 21
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 33
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PPUSH
52939: CALL_OW 69
52943: PUSH
52944: FOR_IN
52945: IFFALSE 52958
// KillUnit ( i ) ;
52947: LD_VAR 0 3
52951: PPUSH
52952: CALL_OW 66
52956: GO 52944
52958: POP
52959: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52960: LD_VAR 0 1
52964: PPUSH
52965: CALL_OW 257
52969: PUSH
52970: LD_INT 12
52972: PUSH
52973: LD_INT 17
52975: PUSH
52976: LD_INT 15
52978: PUSH
52979: LD_INT 16
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: IN
52988: IFTRUE 53005
52990: PUSH
52991: LD_VAR 0 1
52995: PPUSH
52996: CALL_OW 263
53000: PUSH
53001: LD_INT 5
53003: EQUAL
53004: OR
53005: IFFALSE 53242
// begin tag := 0 ;
53007: LD_ADDR_VAR 0 5
53011: PUSH
53012: LD_INT 0
53014: ST_TO_ADDR
// for i := 1 to 8 do
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: DOUBLE
53021: LD_INT 1
53023: DEC
53024: ST_TO_ADDR
53025: LD_INT 8
53027: PUSH
53028: FOR_TO
53029: IFFALSE 53063
// if un in mpApePosIndex [ i ] then
53031: LD_VAR 0 1
53035: PUSH
53036: LD_EXP 34
53040: PUSH
53041: LD_VAR 0 3
53045: ARRAY
53046: IN
53047: IFFALSE 53061
// begin tag := i ;
53049: LD_ADDR_VAR 0 5
53053: PUSH
53054: LD_VAR 0 3
53058: ST_TO_ADDR
// break ;
53059: GO 53063
// end ;
53061: GO 53028
53063: POP
53064: POP
// if not tag then
53065: LD_VAR 0 5
53069: NOT
53070: IFFALSE 53074
// exit ;
53072: GO 53517
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
53074: LD_ADDR_VAR 0 7
53078: PUSH
53079: LD_EXP 33
53083: PUSH
53084: LD_EXP 9
53088: PUSH
53089: LD_VAR 0 5
53093: ARRAY
53094: ARRAY
53095: ST_TO_ADDR
// if not area then
53096: LD_VAR 0 7
53100: NOT
53101: IFFALSE 53105
// exit ;
53103: GO 53517
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53105: LD_INT 14700
53107: PUSH
53108: LD_VAR 0 1
53112: PUSH
53113: LD_INT 5
53115: MOD
53116: PUSH
53117: LD_INT 1
53119: PLUS
53120: PUSH
53121: LD_INT 700
53123: MUL
53124: PLUS
53125: PPUSH
53126: CALL_OW 67
// repeat wait ( 10 ) ;
53130: LD_INT 10
53132: PPUSH
53133: CALL_OW 67
// until not mpBlockRespThread ;
53137: LD_EXP 49
53141: NOT
53142: IFFALSE 53130
// mpBlockRespThread := true ;
53144: LD_ADDR_EXP 49
53148: PUSH
53149: LD_INT 1
53151: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53152: LD_INT 0
53154: PPUSH
53155: CALL 37943 0 1
// ape := CreateHuman ;
53159: LD_ADDR_VAR 0 4
53163: PUSH
53164: CALL_OW 44
53168: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53169: LD_ADDR_EXP 34
53173: PUSH
53174: LD_EXP 34
53178: PPUSH
53179: LD_VAR 0 5
53183: PPUSH
53184: LD_EXP 34
53188: PUSH
53189: LD_VAR 0 5
53193: ARRAY
53194: PPUSH
53195: LD_VAR 0 4
53199: PPUSH
53200: CALL 41816 0 2
53204: PPUSH
53205: CALL_OW 1
53209: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53210: LD_VAR 0 4
53214: PPUSH
53215: LD_VAR 0 7
53219: PPUSH
53220: LD_INT 0
53222: PPUSH
53223: CALL_OW 49
// wait ( 10 ) ;
53227: LD_INT 10
53229: PPUSH
53230: CALL_OW 67
// mpBlockRespThread := false ;
53234: LD_ADDR_EXP 49
53238: PUSH
53239: LD_INT 0
53241: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
53242: LD_VAR 0 1
53246: PPUSH
53247: CALL_OW 247
53251: PUSH
53252: LD_INT 1
53254: EQUAL
53255: IFFALSE 53272
53257: PUSH
53258: LD_VAR 0 1
53262: PPUSH
53263: CALL_OW 248
53267: PUSH
53268: LD_INT 0
53270: GREATER
53271: AND
53272: IFFALSE 53517
// begin if not mpRespawn then
53274: LD_EXP 35
53278: NOT
53279: IFFALSE 53283
// exit ;
53281: GO 53517
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
53283: LD_VAR 0 9
53287: PPUSH
53288: CALL_OW 108
53292: NOT
53293: IFFALSE 53312
53295: PUSH
53296: LD_EXP 5
53300: PPUSH
53301: LD_VAR 0 9
53305: PPUSH
53306: CALL 51543 0 2
53310: NOT
53311: AND
53312: IFFALSE 53316
// exit ;
53314: GO 53517
// side := GetSide ( un ) ;
53316: LD_ADDR_VAR 0 9
53320: PUSH
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 255
53330: ST_TO_ADDR
// nation := GetNation ( un ) ;
53331: LD_ADDR_VAR 0 8
53335: PUSH
53336: LD_VAR 0 1
53340: PPUSH
53341: CALL_OW 248
53345: ST_TO_ADDR
// class := GetClass ( un ) ;
53346: LD_ADDR_VAR 0 6
53350: PUSH
53351: LD_VAR 0 1
53355: PPUSH
53356: CALL_OW 257
53360: ST_TO_ADDR
// if class > 4 then
53361: LD_VAR 0 6
53365: PUSH
53366: LD_INT 4
53368: GREATER
53369: IFFALSE 53379
// class := 1 ;
53371: LD_ADDR_VAR 0 6
53375: PUSH
53376: LD_INT 1
53378: ST_TO_ADDR
// repeat wait ( 10 ) ;
53379: LD_INT 10
53381: PPUSH
53382: CALL_OW 67
// until not mpBlockRespThread ;
53386: LD_EXP 49
53390: NOT
53391: IFFALSE 53379
// mpBlockRespThread := true ;
53393: LD_ADDR_EXP 49
53397: PUSH
53398: LD_INT 1
53400: ST_TO_ADDR
// uc_side := side ;
53401: LD_ADDR_OWVAR 20
53405: PUSH
53406: LD_VAR 0 9
53410: ST_TO_ADDR
// uc_nation := nation ;
53411: LD_ADDR_OWVAR 21
53415: PUSH
53416: LD_VAR 0 8
53420: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
53421: LD_INT 0
53423: PPUSH
53424: LD_VAR 0 6
53428: PPUSH
53429: LD_INT 2
53431: PPUSH
53432: CALL_OW 380
// un := CreateHuman ;
53436: LD_ADDR_VAR 0 1
53440: PUSH
53441: CALL_OW 44
53445: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
53446: LD_ADDR_EXP 42
53450: PUSH
53451: LD_EXP 42
53455: PPUSH
53456: LD_VAR 0 9
53460: PPUSH
53461: LD_EXP 42
53465: PUSH
53466: LD_VAR 0 9
53470: ARRAY
53471: PPUSH
53472: LD_EXP 42
53476: PUSH
53477: LD_VAR 0 9
53481: ARRAY
53482: PUSH
53483: LD_INT 1
53485: PLUS
53486: PPUSH
53487: LD_VAR 0 1
53491: PPUSH
53492: CALL_OW 1
53496: PPUSH
53497: CALL_OW 1
53501: ST_TO_ADDR
// wait ( 10 ) ;
53502: LD_INT 10
53504: PPUSH
53505: CALL_OW 67
// mpBlockRespThread := false ;
53509: LD_ADDR_EXP 49
53513: PUSH
53514: LD_INT 0
53516: ST_TO_ADDR
// end ; end ;
53517: LD_VAR 0 2
53521: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
53522: LD_INT 0
53524: PPUSH
53525: PPUSH
53526: PPUSH
53527: PPUSH
53528: PPUSH
// tag := 0 ;
53529: LD_ADDR_VAR 0 5
53533: PUSH
53534: LD_INT 0
53536: ST_TO_ADDR
// for i := 1 to 8 do
53537: LD_ADDR_VAR 0 4
53541: PUSH
53542: DOUBLE
53543: LD_INT 1
53545: DEC
53546: ST_TO_ADDR
53547: LD_INT 8
53549: PUSH
53550: FOR_TO
53551: IFFALSE 53585
// if un in mpApePosIndex [ i ] then
53553: LD_VAR 0 2
53557: PUSH
53558: LD_EXP 34
53562: PUSH
53563: LD_VAR 0 4
53567: ARRAY
53568: IN
53569: IFFALSE 53583
// begin tag := i ;
53571: LD_ADDR_VAR 0 5
53575: PUSH
53576: LD_VAR 0 4
53580: ST_TO_ADDR
// break ;
53581: GO 53585
// end ;
53583: GO 53550
53585: POP
53586: POP
// if not tag then
53587: LD_VAR 0 5
53591: NOT
53592: IFFALSE 53596
// exit ;
53594: GO 53764
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
53596: LD_ADDR_VAR 0 6
53600: PUSH
53601: LD_EXP 33
53605: PUSH
53606: LD_EXP 9
53610: PUSH
53611: LD_VAR 0 5
53615: ARRAY
53616: ARRAY
53617: ST_TO_ADDR
// if not area then
53618: LD_VAR 0 6
53622: NOT
53623: IFFALSE 53627
// exit ;
53625: GO 53764
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53627: LD_INT 14700
53629: PUSH
53630: LD_VAR 0 2
53634: PUSH
53635: LD_INT 5
53637: MOD
53638: PUSH
53639: LD_INT 1
53641: PLUS
53642: PUSH
53643: LD_INT 700
53645: MUL
53646: PLUS
53647: PPUSH
53648: CALL_OW 67
// repeat wait ( 10 ) ;
53652: LD_INT 10
53654: PPUSH
53655: CALL_OW 67
// until not mpBlockRespThread ;
53659: LD_EXP 49
53663: NOT
53664: IFFALSE 53652
// mpBlockRespThread := true ;
53666: LD_ADDR_EXP 49
53670: PUSH
53671: LD_INT 1
53673: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53674: LD_INT 0
53676: PPUSH
53677: CALL 37943 0 1
// ape := CreateHuman ;
53681: LD_ADDR_VAR 0 7
53685: PUSH
53686: CALL_OW 44
53690: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53691: LD_ADDR_EXP 34
53695: PUSH
53696: LD_EXP 34
53700: PPUSH
53701: LD_VAR 0 5
53705: PPUSH
53706: LD_EXP 34
53710: PUSH
53711: LD_VAR 0 5
53715: ARRAY
53716: PPUSH
53717: LD_VAR 0 7
53721: PPUSH
53722: CALL 41816 0 2
53726: PPUSH
53727: CALL_OW 1
53731: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53732: LD_VAR 0 7
53736: PPUSH
53737: LD_VAR 0 6
53741: PPUSH
53742: LD_INT 0
53744: PPUSH
53745: CALL_OW 49
// wait ( 10 ) ;
53749: LD_INT 10
53751: PPUSH
53752: CALL_OW 67
// mpBlockRespThread := false ;
53756: LD_ADDR_EXP 49
53760: PUSH
53761: LD_INT 0
53763: ST_TO_ADDR
// end ;
53764: LD_VAR 0 3
53768: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53769: LD_INT 0
53771: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53772: LD_VAR 0 1
53776: PPUSH
53777: CALL_OW 266
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: IN
53792: IFFALSE 53817
// SetBName ( building , @ & GetSide ( building ) ) ;
53794: LD_VAR 0 1
53798: PPUSH
53799: LD_STRING @
53801: PUSH
53802: LD_VAR 0 1
53806: PPUSH
53807: CALL_OW 255
53811: STR
53812: PPUSH
53813: CALL_OW 500
// end ;
53817: LD_VAR 0 2
53821: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53822: LD_INT 0
53824: PPUSH
53825: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53826: LD_EXP 5
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 8
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: IN
53841: IFFALSE 53865
53843: PUSH
53844: LD_VAR 0 1
53848: PPUSH
53849: CALL_OW 266
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: IN
53864: AND
53865: IFFALSE 53944
// begin SetSide ( building , oldSide ) ;
53867: LD_VAR 0 1
53871: PPUSH
53872: LD_VAR 0 2
53876: PPUSH
53877: CALL_OW 235
// KillUnit ( building ) ;
53881: LD_VAR 0 1
53885: PPUSH
53886: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53890: LD_ADDR_VAR 0 5
53894: PUSH
53895: LD_INT 22
53897: PUSH
53898: LD_VAR 0 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 21
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PPUSH
53921: CALL_OW 69
53925: PUSH
53926: FOR_IN
53927: IFFALSE 53940
// KillUnit ( i ) ;
53929: LD_VAR 0 5
53933: PPUSH
53934: CALL_OW 66
53938: GO 53926
53940: POP
53941: POP
// exit ;
53942: GO 53989
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53944: LD_VAR 0 1
53948: PPUSH
53949: CALL_OW 266
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: IN
53964: IFFALSE 53989
// SetBName ( building , @ & GetSide ( building ) ) ;
53966: LD_VAR 0 1
53970: PPUSH
53971: LD_STRING @
53973: PUSH
53974: LD_VAR 0 1
53978: PPUSH
53979: CALL_OW 255
53983: STR
53984: PPUSH
53985: CALL_OW 500
// end ;
53989: LD_VAR 0 4
53993: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53994: LD_INT 0
53996: PPUSH
53997: PPUSH
53998: PPUSH
// if mpGameType <> GameTypeFamine then
53999: LD_EXP 5
54003: PUSH
54004: LD_INT 5
54006: NONEQUAL
54007: IFFALSE 54011
// exit ;
54009: GO 54245
// for i := 1 to mpGlobalOilDeposits do
54011: LD_ADDR_VAR 0 6
54015: PUSH
54016: DOUBLE
54017: LD_INT 1
54019: DEC
54020: ST_TO_ADDR
54021: LD_EXP 44
54025: PUSH
54026: FOR_TO
54027: IFFALSE 54243
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
54029: LD_EXP 44
54033: PUSH
54034: LD_VAR 0 6
54038: ARRAY
54039: PUSH
54040: LD_INT 1
54042: ARRAY
54043: PPUSH
54044: LD_EXP 44
54048: PUSH
54049: LD_VAR 0 6
54053: ARRAY
54054: PUSH
54055: LD_INT 2
54057: ARRAY
54058: PPUSH
54059: CALL_OW 428
54063: PUSH
54064: LD_VAR 0 1
54068: EQUAL
54069: IFFALSE 54241
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
54071: LD_ADDR_VAR 0 7
54075: PUSH
54076: LD_EXP 44
54080: PUSH
54081: LD_VAR 0 6
54085: ARRAY
54086: PUSH
54087: LD_INT 3
54089: ARRAY
54090: ST_TO_ADDR
// value := value - amount ;
54091: LD_ADDR_VAR 0 7
54095: PUSH
54096: LD_VAR 0 7
54100: PUSH
54101: LD_VAR 0 4
54105: MINUS
54106: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
54107: LD_ADDR_EXP 44
54111: PUSH
54112: LD_EXP 44
54116: PPUSH
54117: LD_VAR 0 6
54121: PPUSH
54122: LD_EXP 44
54126: PUSH
54127: LD_VAR 0 6
54131: ARRAY
54132: PPUSH
54133: LD_INT 3
54135: PPUSH
54136: LD_VAR 0 7
54140: PPUSH
54141: CALL_OW 1
54145: PPUSH
54146: CALL_OW 1
54150: ST_TO_ADDR
// if side in [ your_side , 9 ] then
54151: LD_VAR 0 2
54155: PUSH
54156: LD_OWVAR 2
54160: PUSH
54161: LD_INT 9
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: IN
54168: IFFALSE 54184
// SetUnitDisplayNumber ( building , value ) ;
54170: LD_VAR 0 1
54174: PPUSH
54175: LD_VAR 0 7
54179: PPUSH
54180: CALL_OW 505
// if value <= 0 then
54184: LD_VAR 0 7
54188: PUSH
54189: LD_INT 0
54191: LESSEQUAL
54192: IFFALSE 54241
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
54194: LD_EXP 44
54198: PUSH
54199: LD_VAR 0 6
54203: ARRAY
54204: PUSH
54205: LD_INT 1
54207: ARRAY
54208: PPUSH
54209: LD_EXP 44
54213: PUSH
54214: LD_VAR 0 6
54218: ARRAY
54219: PUSH
54220: LD_INT 2
54222: ARRAY
54223: PPUSH
54224: CALL_OW 63
// KillUnit ( building ) ;
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 66
// exit ;
54237: POP
54238: POP
54239: GO 54245
// end ; end ; end ;
54241: GO 54026
54243: POP
54244: POP
// end ;
54245: LD_VAR 0 5
54249: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
54250: LD_INT 0
54252: PPUSH
54253: PPUSH
54254: PPUSH
// if mpGameType <> GameTypeFamine then
54255: LD_EXP 5
54259: PUSH
54260: LD_INT 5
54262: NONEQUAL
54263: IFFALSE 54267
// exit ;
54265: GO 54501
// for i := 1 to mpGlobalSibDeposits do
54267: LD_ADDR_VAR 0 6
54271: PUSH
54272: DOUBLE
54273: LD_INT 1
54275: DEC
54276: ST_TO_ADDR
54277: LD_EXP 45
54281: PUSH
54282: FOR_TO
54283: IFFALSE 54499
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
54285: LD_EXP 45
54289: PUSH
54290: LD_VAR 0 6
54294: ARRAY
54295: PUSH
54296: LD_INT 1
54298: ARRAY
54299: PPUSH
54300: LD_EXP 45
54304: PUSH
54305: LD_VAR 0 6
54309: ARRAY
54310: PUSH
54311: LD_INT 2
54313: ARRAY
54314: PPUSH
54315: CALL_OW 428
54319: PUSH
54320: LD_VAR 0 1
54324: EQUAL
54325: IFFALSE 54497
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
54327: LD_ADDR_VAR 0 7
54331: PUSH
54332: LD_EXP 45
54336: PUSH
54337: LD_VAR 0 6
54341: ARRAY
54342: PUSH
54343: LD_INT 3
54345: ARRAY
54346: ST_TO_ADDR
// value := value - amount ;
54347: LD_ADDR_VAR 0 7
54351: PUSH
54352: LD_VAR 0 7
54356: PUSH
54357: LD_VAR 0 4
54361: MINUS
54362: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
54363: LD_ADDR_EXP 45
54367: PUSH
54368: LD_EXP 45
54372: PPUSH
54373: LD_VAR 0 6
54377: PPUSH
54378: LD_EXP 45
54382: PUSH
54383: LD_VAR 0 6
54387: ARRAY
54388: PPUSH
54389: LD_INT 3
54391: PPUSH
54392: LD_VAR 0 7
54396: PPUSH
54397: CALL_OW 1
54401: PPUSH
54402: CALL_OW 1
54406: ST_TO_ADDR
// if side in [ your_side , 9 ] then
54407: LD_VAR 0 2
54411: PUSH
54412: LD_OWVAR 2
54416: PUSH
54417: LD_INT 9
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: IN
54424: IFFALSE 54440
// SetUnitDisplayNumber ( building , value ) ;
54426: LD_VAR 0 1
54430: PPUSH
54431: LD_VAR 0 7
54435: PPUSH
54436: CALL_OW 505
// if value <= 0 then
54440: LD_VAR 0 7
54444: PUSH
54445: LD_INT 0
54447: LESSEQUAL
54448: IFFALSE 54497
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
54450: LD_EXP 45
54454: PUSH
54455: LD_VAR 0 6
54459: ARRAY
54460: PUSH
54461: LD_INT 1
54463: ARRAY
54464: PPUSH
54465: LD_EXP 45
54469: PUSH
54470: LD_VAR 0 6
54474: ARRAY
54475: PUSH
54476: LD_INT 2
54478: ARRAY
54479: PPUSH
54480: CALL_OW 63
// KillUnit ( building ) ;
54484: LD_VAR 0 1
54488: PPUSH
54489: CALL_OW 66
// exit ;
54493: POP
54494: POP
54495: GO 54501
// end ; end ; end ;
54497: GO 54282
54499: POP
54500: POP
// end ;
54501: LD_VAR 0 5
54505: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
54506: LD_INT 0
54508: PPUSH
54509: PPUSH
// side := GetSide ( factory ) ;
54510: LD_ADDR_VAR 0 7
54514: PUSH
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 255
54524: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
54525: LD_VAR 0 5
54529: PUSH
54530: LD_INT 81
54532: EQUAL
54533: IFFALSE 54571
54535: PUSH
54536: LD_INT 22
54538: PUSH
54539: LD_VAR 0 7
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 34
54550: PUSH
54551: LD_INT 81
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PPUSH
54562: CALL_OW 69
54566: PUSH
54567: LD_INT 0
54569: GREATER
54570: AND
54571: IFFALSE 54604
// begin ComCancel ( factory ) ;
54573: LD_VAR 0 1
54577: PPUSH
54578: CALL_OW 127
// if side = your_side then
54582: LD_VAR 0 7
54586: PUSH
54587: LD_OWVAR 2
54591: EQUAL
54592: IFFALSE 54604
// HintSpec ( VehLimit , 2 ) ;
54594: LD_STRING VehLimit
54596: PPUSH
54597: LD_INT 2
54599: PPUSH
54600: CALL_OW 338
// end ; end ;
54604: LD_VAR 0 6
54608: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
54609: LD_INT 0
54611: PPUSH
54612: PPUSH
54613: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
54614: LD_VAR 0 1
54618: PPUSH
54619: CALL_OW 264
54623: PUSH
54624: LD_INT 81
54626: EQUAL
54627: IFFALSE 54644
54629: PUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: CALL_OW 263
54639: PUSH
54640: LD_INT 1
54642: EQUAL
54643: AND
54644: IFFALSE 54924
// begin for i := 1 to Count ( minersList ) do
54646: LD_ADDR_VAR 0 6
54650: PUSH
54651: DOUBLE
54652: LD_INT 1
54654: DEC
54655: ST_TO_ADDR
54656: LD_EXP 60
54660: PPUSH
54661: CALL 5840 0 1
54665: PUSH
54666: FOR_TO
54667: IFFALSE 54785
// begin if minersList [ i ] = oldId then
54669: LD_EXP 60
54673: PUSH
54674: LD_VAR 0 6
54678: ARRAY
54679: PUSH
54680: LD_VAR 0 2
54684: EQUAL
54685: IFFALSE 54783
// begin for j := 1 to minerMinesList [ i ] do
54687: LD_ADDR_VAR 0 7
54691: PUSH
54692: DOUBLE
54693: LD_INT 1
54695: DEC
54696: ST_TO_ADDR
54697: LD_EXP 61
54701: PUSH
54702: LD_VAR 0 6
54706: ARRAY
54707: PUSH
54708: FOR_TO
54709: IFFALSE 54759
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54711: LD_EXP 61
54715: PUSH
54716: LD_VAR 0 6
54720: ARRAY
54721: PUSH
54722: LD_VAR 0 7
54726: ARRAY
54727: PUSH
54728: LD_INT 1
54730: ARRAY
54731: PPUSH
54732: LD_EXP 61
54736: PUSH
54737: LD_VAR 0 6
54741: ARRAY
54742: PUSH
54743: LD_VAR 0 7
54747: ARRAY
54748: PUSH
54749: LD_INT 2
54751: ARRAY
54752: PPUSH
54753: CALL_OW 612
54757: GO 54708
54759: POP
54760: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54761: LD_ADDR_EXP 61
54765: PUSH
54766: LD_EXP 61
54770: PPUSH
54771: LD_VAR 0 6
54775: PPUSH
54776: CALL_OW 3
54780: ST_TO_ADDR
// break ;
54781: GO 54785
// end ; end ;
54783: GO 54666
54785: POP
54786: POP
// minersList := minersList diff oldId ;
54787: LD_ADDR_EXP 60
54791: PUSH
54792: LD_EXP 60
54796: PUSH
54797: LD_VAR 0 2
54801: DIFF
54802: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54803: LD_INT 22
54805: PUSH
54806: LD_VAR 0 4
54810: PPUSH
54811: CALL_OW 255
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 34
54822: PUSH
54823: LD_INT 81
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PPUSH
54834: CALL_OW 69
54838: PUSH
54839: LD_INT 1
54841: GREATER
54842: IFFALSE 54869
// begin ComExit ( unit ) ;
54844: LD_VAR 0 4
54848: PPUSH
54849: CALL 42214 0 1
// SetSide ( newId , oldSide ) ;
54853: LD_VAR 0 1
54857: PPUSH
54858: LD_VAR 0 3
54862: PPUSH
54863: CALL_OW 235
// exit ;
54867: GO 54924
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54869: LD_ADDR_EXP 60
54873: PUSH
54874: LD_EXP 60
54878: PPUSH
54879: LD_EXP 60
54883: PUSH
54884: LD_INT 1
54886: PLUS
54887: PPUSH
54888: LD_VAR 0 1
54892: PPUSH
54893: CALL_OW 1
54897: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54898: LD_ADDR_EXP 61
54902: PUSH
54903: LD_EXP 61
54907: PPUSH
54908: LD_EXP 61
54912: PUSH
54913: LD_INT 1
54915: PLUS
54916: PPUSH
54917: EMPTY
54918: PPUSH
54919: CALL_OW 1
54923: ST_TO_ADDR
// end ; end ; end_of_file
54924: LD_VAR 0 5
54928: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54929: LD_EXP 41
54933: IFFALSE 54941
54935: PUSH
54936: CALL 55151 0 0
54940: AND
54941: IFFALSE 54949
54943: PUSH
54944: LD_OWVAR 4
54948: AND
54949: IFFALSE 55148
54951: GO 54953
54953: DISABLE
54954: LD_INT 0
54956: PPUSH
54957: PPUSH
// begin canWin := false ;
54958: LD_ADDR_VAR 0 2
54962: PUSH
54963: LD_INT 0
54965: ST_TO_ADDR
// if not HasPower ( your_side ) then
54966: LD_OWVAR 2
54970: PPUSH
54971: CALL 55193 0 1
54975: NOT
54976: IFFALSE 54987
// begin Multiplayer_Loose_Message ;
54978: CALL_OW 521
// enable ( mpLose ) ;
54982: LD_INT 102
54984: ENABLE_MARKED
// end else
54985: GO 55148
// begin canWin := true ;
54987: LD_ADDR_VAR 0 2
54991: PUSH
54992: LD_INT 1
54994: ST_TO_ADDR
// for i := 1 to 8 do
54995: LD_ADDR_VAR 0 1
54999: PUSH
55000: DOUBLE
55001: LD_INT 1
55003: DEC
55004: ST_TO_ADDR
55005: LD_INT 8
55007: PUSH
55008: FOR_TO
55009: IFFALSE 55134
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55011: LD_EXP 9
55015: PUSH
55016: LD_VAR 0 1
55020: ARRAY
55021: IFFALSE 55034
55023: PUSH
55024: LD_VAR 0 1
55028: PPUSH
55029: CALL_OW 108
55033: AND
55034: IFFALSE 55048
55036: PUSH
55037: LD_VAR 0 1
55041: PUSH
55042: LD_OWVAR 2
55046: NONEQUAL
55047: AND
55048: IFFALSE 55132
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55050: LD_EXP 10
55054: PUSH
55055: LD_VAR 0 1
55059: ARRAY
55060: NOT
55061: IFTRUE 55109
55063: PUSH
55064: LD_EXP 10
55068: PUSH
55069: LD_VAR 0 1
55073: ARRAY
55074: PUSH
55075: LD_EXP 10
55079: PUSH
55080: LD_OWVAR 2
55084: ARRAY
55085: NONEQUAL
55086: IFFALSE 55108
55088: PUSH
55089: LD_OWVAR 2
55093: PPUSH
55094: LD_VAR 0 1
55098: PPUSH
55099: CALL_OW 81
55103: PUSH
55104: LD_INT 1
55106: NONEQUAL
55107: AND
55108: OR
55109: IFFALSE 55132
// if HasPower ( i ) then
55111: LD_VAR 0 1
55115: PPUSH
55116: CALL 55193 0 1
55120: IFFALSE 55132
// begin canWin := false ;
55122: LD_ADDR_VAR 0 2
55126: PUSH
55127: LD_INT 0
55129: ST_TO_ADDR
// break ;
55130: GO 55134
// end ;
55132: GO 55008
55134: POP
55135: POP
// if canWin then
55136: LD_VAR 0 2
55140: IFFALSE 55147
// enable ( mpWin ) else
55142: LD_INT 101
55144: ENABLE_MARKED
55145: GO 55148
// enable ;
55147: ENABLE
// end ; end ;
55148: PPOPN 2
55150: END
// function CanWinLoose ; begin
55151: LD_INT 0
55153: PPUSH
// result := true ;
55154: LD_ADDR_VAR 0 1
55158: PUSH
55159: LD_INT 1
55161: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55162: CALL_OW 531
55166: IFFALSE 55178
55168: PUSH
55169: CALL_OW 519
55173: PUSH
55174: LD_INT 1
55176: GREATER
55177: AND
55178: IFFALSE 55188
// result := false ;
55180: LD_ADDR_VAR 0 1
55184: PUSH
55185: LD_INT 0
55187: ST_TO_ADDR
// end ;
55188: LD_VAR 0 1
55192: RET
// function HasPower ( i ) ; begin
55193: LD_INT 0
55195: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55196: LD_ADDR_VAR 0 2
55200: PUSH
55201: LD_INT 22
55203: PUSH
55204: LD_VAR 0 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: LD_INT 21
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 33
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 33
55238: PUSH
55239: LD_INT 5
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PPUSH
55256: CALL_OW 69
55260: ST_TO_ADDR
// end ; end_of_file
55261: LD_VAR 0 2
55265: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
55266: LD_EXP 41
55270: IFFALSE 55313
55272: GO 55274
55274: DISABLE
55275: LD_INT 0
55277: PPUSH
// begin for i := 1 to 8 do
55278: LD_ADDR_VAR 0 1
55282: PUSH
55283: DOUBLE
55284: LD_INT 1
55286: DEC
55287: ST_TO_ADDR
55288: LD_INT 8
55290: PUSH
55291: FOR_TO
55292: IFFALSE 55311
// SetRestrict ( b_depot , i , state_disabled ) ;
55294: LD_INT 0
55296: PPUSH
55297: LD_VAR 0 1
55301: PPUSH
55302: LD_INT 0
55304: PPUSH
55305: CALL_OW 324
55309: GO 55291
55311: POP
55312: POP
// end ;
55313: PPOPN 1
55315: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
55316: LD_EXP 41
55320: IFFALSE 55328
55322: PUSH
55323: CALL 55538 0 0
55327: AND
55328: IFFALSE 55336
55330: PUSH
55331: LD_OWVAR 4
55335: AND
55336: IFFALSE 55535
55338: GO 55340
55340: DISABLE
55341: LD_INT 0
55343: PPUSH
55344: PPUSH
// begin canWin := false ;
55345: LD_ADDR_VAR 0 2
55349: PUSH
55350: LD_INT 0
55352: ST_TO_ADDR
// if not HasPower ( your_side ) then
55353: LD_OWVAR 2
55357: PPUSH
55358: CALL 55580 0 1
55362: NOT
55363: IFFALSE 55374
// begin Multiplayer_Loose_Message ;
55365: CALL_OW 521
// enable ( mpLose ) ;
55369: LD_INT 102
55371: ENABLE_MARKED
// end else
55372: GO 55535
// begin canWin := true ;
55374: LD_ADDR_VAR 0 2
55378: PUSH
55379: LD_INT 1
55381: ST_TO_ADDR
// for i := 1 to 8 do
55382: LD_ADDR_VAR 0 1
55386: PUSH
55387: DOUBLE
55388: LD_INT 1
55390: DEC
55391: ST_TO_ADDR
55392: LD_INT 8
55394: PUSH
55395: FOR_TO
55396: IFFALSE 55521
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55398: LD_EXP 9
55402: PUSH
55403: LD_VAR 0 1
55407: ARRAY
55408: IFFALSE 55421
55410: PUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: CALL_OW 108
55420: AND
55421: IFFALSE 55435
55423: PUSH
55424: LD_VAR 0 1
55428: PUSH
55429: LD_OWVAR 2
55433: NONEQUAL
55434: AND
55435: IFFALSE 55519
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55437: LD_EXP 10
55441: PUSH
55442: LD_VAR 0 1
55446: ARRAY
55447: NOT
55448: IFTRUE 55496
55450: PUSH
55451: LD_EXP 10
55455: PUSH
55456: LD_VAR 0 1
55460: ARRAY
55461: PUSH
55462: LD_EXP 10
55466: PUSH
55467: LD_OWVAR 2
55471: ARRAY
55472: NONEQUAL
55473: IFFALSE 55495
55475: PUSH
55476: LD_OWVAR 2
55480: PPUSH
55481: LD_VAR 0 1
55485: PPUSH
55486: CALL_OW 81
55490: PUSH
55491: LD_INT 1
55493: NONEQUAL
55494: AND
55495: OR
55496: IFFALSE 55519
// if HasPower ( i ) then
55498: LD_VAR 0 1
55502: PPUSH
55503: CALL 55580 0 1
55507: IFFALSE 55519
// begin canWin := false ;
55509: LD_ADDR_VAR 0 2
55513: PUSH
55514: LD_INT 0
55516: ST_TO_ADDR
// break ;
55517: GO 55521
// end ;
55519: GO 55395
55521: POP
55522: POP
// if canWin then
55523: LD_VAR 0 2
55527: IFFALSE 55534
// enable ( mpWin ) else
55529: LD_INT 101
55531: ENABLE_MARKED
55532: GO 55535
// enable ;
55534: ENABLE
// end ; end ;
55535: PPOPN 2
55537: END
// function CanWinLoose ; begin
55538: LD_INT 0
55540: PPUSH
// result := true ;
55541: LD_ADDR_VAR 0 1
55545: PUSH
55546: LD_INT 1
55548: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55549: CALL_OW 531
55553: IFFALSE 55565
55555: PUSH
55556: CALL_OW 519
55560: PUSH
55561: LD_INT 1
55563: GREATER
55564: AND
55565: IFFALSE 55575
// result := false ;
55567: LD_ADDR_VAR 0 1
55571: PUSH
55572: LD_INT 0
55574: ST_TO_ADDR
// end ;
55575: LD_VAR 0 1
55579: RET
// function HasPower ( i ) ; begin
55580: LD_INT 0
55582: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
55583: LD_INT 22
55585: PUSH
55586: LD_VAR 0 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 30
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 30
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PPUSH
55627: CALL_OW 69
55631: NOT
55632: IFFALSE 55636
// exit ;
55634: GO 55701
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55636: LD_ADDR_VAR 0 2
55640: PUSH
55641: LD_INT 22
55643: PUSH
55644: LD_VAR 0 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 21
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 33
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 33
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PPUSH
55696: CALL_OW 69
55700: ST_TO_ADDR
// end ; end_of_file
55701: LD_VAR 0 2
55705: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55706: LD_EXP 41
55710: IFFALSE 56051
55712: GO 55714
55714: DISABLE
55715: LD_INT 0
55717: PPUSH
55718: PPUSH
55719: PPUSH
// begin mpKingPoints := [ ] ;
55720: LD_ADDR_EXP 52
55724: PUSH
55725: EMPTY
55726: ST_TO_ADDR
// if mpTeamGame then
55727: LD_EXP 13
55731: IFFALSE 55785
// begin for i := 1 to Count ( mpTeams ) do
55733: LD_ADDR_VAR 0 1
55737: PUSH
55738: DOUBLE
55739: LD_INT 1
55741: DEC
55742: ST_TO_ADDR
55743: LD_EXP 12
55747: PPUSH
55748: CALL 5840 0 1
55752: PUSH
55753: FOR_TO
55754: IFFALSE 55781
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55756: LD_ADDR_EXP 52
55760: PUSH
55761: LD_EXP 52
55765: PPUSH
55766: LD_VAR 0 1
55770: PPUSH
55771: LD_INT 0
55773: PPUSH
55774: CALL_OW 1
55778: ST_TO_ADDR
55779: GO 55753
55781: POP
55782: POP
// end else
55783: GO 55828
// begin for i := 1 to 8 do
55785: LD_ADDR_VAR 0 1
55789: PUSH
55790: DOUBLE
55791: LD_INT 1
55793: DEC
55794: ST_TO_ADDR
55795: LD_INT 8
55797: PUSH
55798: FOR_TO
55799: IFFALSE 55826
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55801: LD_ADDR_EXP 52
55805: PUSH
55806: LD_EXP 52
55810: PPUSH
55811: LD_VAR 0 1
55815: PPUSH
55816: LD_INT 0
55818: PPUSH
55819: CALL_OW 1
55823: ST_TO_ADDR
55824: GO 55798
55826: POP
55827: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55828: LD_ADDR_VAR 0 3
55832: PUSH
55833: LD_EXP 2
55837: PPUSH
55838: LD_INT 0
55840: PPUSH
55841: CALL_OW 517
55845: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55846: LD_ADDR_VAR 0 1
55850: PUSH
55851: DOUBLE
55852: LD_INT 1
55854: DEC
55855: ST_TO_ADDR
55856: LD_VAR 0 3
55860: PUSH
55861: LD_INT 1
55863: ARRAY
55864: PUSH
55865: FOR_TO
55866: IFFALSE 55933
// for j := 1 to 8 do
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: DOUBLE
55874: LD_INT 1
55876: DEC
55877: ST_TO_ADDR
55878: LD_INT 8
55880: PUSH
55881: FOR_TO
55882: IFFALSE 55929
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55884: LD_VAR 0 3
55888: PUSH
55889: LD_INT 1
55891: ARRAY
55892: PUSH
55893: LD_VAR 0 1
55897: ARRAY
55898: PPUSH
55899: LD_VAR 0 3
55903: PUSH
55904: LD_INT 2
55906: ARRAY
55907: PUSH
55908: LD_VAR 0 1
55912: ARRAY
55913: PPUSH
55914: LD_VAR 0 2
55918: PPUSH
55919: LD_INT 12
55921: NEG
55922: PPUSH
55923: CALL_OW 330
55927: GO 55881
55929: POP
55930: POP
55931: GO 55865
55933: POP
55934: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55935: LD_EXP 36
55939: PPUSH
55940: LD_INT 1
55942: PPUSH
55943: CALL_OW 424
// UpdateCounter ;
55947: CALL 56557 0 0
// repeat wait ( 0 0$1 ) ;
55951: LD_INT 35
55953: PPUSH
55954: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55958: LD_ADDR_VAR 0 3
55962: PUSH
55963: LD_EXP 36
55967: PPUSH
55968: LD_INT 3
55970: PUSH
55971: LD_INT 57
55973: PUSH
55974: EMPTY
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 50
55983: PUSH
55984: EMPTY
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 30
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 30
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: PPUSH
56020: CALL_OW 70
56024: ST_TO_ADDR
// if not tmp then
56025: LD_VAR 0 3
56029: NOT
56030: IFFALSE 56034
// continue ;
56032: GO 55951
// AddPoints ( tmp ) ;
56034: LD_VAR 0 3
56038: PPUSH
56039: CALL 56235 0 1
// UpdateCounter ;
56043: CALL 56557 0 0
// until false ;
56047: LD_INT 0
56049: IFFALSE 55951
// end ;
56051: PPOPN 3
56053: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
56054: LD_EXP 41
56058: IFFALSE 56066
56060: PUSH
56061: LD_EXP 39
56065: AND
56066: IFFALSE 56232
56068: GO 56070
56070: DISABLE
56071: LD_INT 0
56073: PPUSH
56074: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
56075: LD_ADDR_VAR 0 2
56079: PUSH
56080: LD_EXP 2
56084: PPUSH
56085: LD_INT 0
56087: PPUSH
56088: CALL_OW 517
56092: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56093: LD_ADDR_VAR 0 1
56097: PUSH
56098: DOUBLE
56099: LD_INT 1
56101: DEC
56102: ST_TO_ADDR
56103: LD_VAR 0 2
56107: PUSH
56108: LD_INT 1
56110: ARRAY
56111: PUSH
56112: FOR_TO
56113: IFFALSE 56154
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
56115: LD_VAR 0 2
56119: PUSH
56120: LD_INT 1
56122: ARRAY
56123: PUSH
56124: LD_VAR 0 1
56128: ARRAY
56129: PPUSH
56130: LD_VAR 0 2
56134: PUSH
56135: LD_INT 2
56137: ARRAY
56138: PUSH
56139: LD_VAR 0 1
56143: ARRAY
56144: PPUSH
56145: LD_INT 125
56147: PPUSH
56148: CALL_OW 495
56152: GO 56112
56154: POP
56155: POP
// repeat wait ( mpEmissions ) ;
56156: LD_EXP 39
56160: PPUSH
56161: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
56165: LD_ADDR_VAR 0 1
56169: PUSH
56170: DOUBLE
56171: LD_INT 1
56173: DEC
56174: ST_TO_ADDR
56175: LD_VAR 0 2
56179: PUSH
56180: LD_INT 1
56182: ARRAY
56183: PUSH
56184: FOR_TO
56185: IFFALSE 56226
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
56187: LD_VAR 0 2
56191: PUSH
56192: LD_INT 1
56194: ARRAY
56195: PUSH
56196: LD_VAR 0 1
56200: ARRAY
56201: PPUSH
56202: LD_VAR 0 2
56206: PUSH
56207: LD_INT 2
56209: ARRAY
56210: PUSH
56211: LD_VAR 0 1
56215: ARRAY
56216: PPUSH
56217: LD_INT 15
56219: PPUSH
56220: CALL_OW 495
56224: GO 56184
56226: POP
56227: POP
// until false ;
56228: LD_INT 0
56230: IFFALSE 56156
// end ;
56232: PPOPN 2
56234: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
56235: LD_INT 0
56237: PPUSH
56238: PPUSH
56239: PPUSH
56240: PPUSH
56241: PPUSH
// if mpTeamGame then
56242: LD_EXP 13
56246: IFFALSE 56443
// begin first := depots [ 1 ] ;
56248: LD_ADDR_VAR 0 4
56252: PUSH
56253: LD_VAR 0 1
56257: PUSH
56258: LD_INT 1
56260: ARRAY
56261: ST_TO_ADDR
// side := GetSide ( first ) ;
56262: LD_ADDR_VAR 0 6
56266: PUSH
56267: LD_VAR 0 4
56271: PPUSH
56272: CALL_OW 255
56276: ST_TO_ADDR
// for i := 1 to mpTeams do
56277: LD_ADDR_VAR 0 3
56281: PUSH
56282: DOUBLE
56283: LD_INT 1
56285: DEC
56286: ST_TO_ADDR
56287: LD_EXP 12
56291: PUSH
56292: FOR_TO
56293: IFFALSE 56327
// if side in mpTeams [ i ] then
56295: LD_VAR 0 6
56299: PUSH
56300: LD_EXP 12
56304: PUSH
56305: LD_VAR 0 3
56309: ARRAY
56310: IN
56311: IFFALSE 56325
// begin team := i ;
56313: LD_ADDR_VAR 0 5
56317: PUSH
56318: LD_VAR 0 3
56322: ST_TO_ADDR
// break ;
56323: GO 56327
// end ;
56325: GO 56292
56327: POP
56328: POP
// if not team then
56329: LD_VAR 0 5
56333: NOT
56334: IFFALSE 56338
// exit ;
56336: GO 56552
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
56338: LD_EXP 36
56342: PPUSH
56343: LD_INT 81
56345: PUSH
56346: LD_VAR 0 6
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PPUSH
56355: CALL_OW 70
56359: IFFALSE 56363
// exit ;
56361: GO 56552
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
56363: LD_ADDR_EXP 52
56367: PUSH
56368: LD_EXP 52
56372: PPUSH
56373: LD_VAR 0 5
56377: PPUSH
56378: LD_EXP 52
56382: PUSH
56383: LD_VAR 0 5
56387: ARRAY
56388: PUSH
56389: LD_INT 1
56391: PLUS
56392: PPUSH
56393: CALL_OW 1
56397: ST_TO_ADDR
// for i in mpTeams [ team ] do
56398: LD_ADDR_VAR 0 3
56402: PUSH
56403: LD_EXP 12
56407: PUSH
56408: LD_VAR 0 5
56412: ARRAY
56413: PUSH
56414: FOR_IN
56415: IFFALSE 56439
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
56417: LD_VAR 0 3
56421: PPUSH
56422: LD_EXP 52
56426: PUSH
56427: LD_VAR 0 5
56431: ARRAY
56432: PPUSH
56433: CALL_OW 506
56437: GO 56414
56439: POP
56440: POP
// end else
56441: GO 56552
// begin first := depots [ 1 ] ;
56443: LD_ADDR_VAR 0 4
56447: PUSH
56448: LD_VAR 0 1
56452: PUSH
56453: LD_INT 1
56455: ARRAY
56456: ST_TO_ADDR
// side := GetSide ( first ) ;
56457: LD_ADDR_VAR 0 6
56461: PUSH
56462: LD_VAR 0 4
56466: PPUSH
56467: CALL_OW 255
56471: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
56472: LD_EXP 36
56476: PPUSH
56477: LD_INT 81
56479: PUSH
56480: LD_VAR 0 6
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PPUSH
56489: CALL_OW 70
56493: IFFALSE 56497
// exit ;
56495: GO 56552
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
56497: LD_ADDR_EXP 52
56501: PUSH
56502: LD_EXP 52
56506: PPUSH
56507: LD_VAR 0 6
56511: PPUSH
56512: LD_EXP 52
56516: PUSH
56517: LD_VAR 0 6
56521: ARRAY
56522: PUSH
56523: LD_INT 1
56525: PLUS
56526: PPUSH
56527: CALL_OW 1
56531: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
56532: LD_VAR 0 6
56536: PPUSH
56537: LD_EXP 52
56541: PUSH
56542: LD_VAR 0 6
56546: ARRAY
56547: PPUSH
56548: CALL_OW 506
// end ; end ;
56552: LD_VAR 0 2
56556: RET
// function UpdateCounter ; var i ; begin
56557: LD_INT 0
56559: PPUSH
56560: PPUSH
// result := [ ] ;
56561: LD_ADDR_VAR 0 1
56565: PUSH
56566: EMPTY
56567: ST_TO_ADDR
// if mpTeamGame then
56568: LD_EXP 13
56572: IFFALSE 56639
// begin for i := 1 to mpTeams do
56574: LD_ADDR_VAR 0 2
56578: PUSH
56579: DOUBLE
56580: LD_INT 1
56582: DEC
56583: ST_TO_ADDR
56584: LD_EXP 12
56588: PUSH
56589: FOR_TO
56590: IFFALSE 56635
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
56592: LD_ADDR_VAR 0 1
56596: PUSH
56597: LD_VAR 0 1
56601: PUSH
56602: LD_STRING #KingoftheHill-Team
56604: PUSH
56605: LD_VAR 0 2
56609: PUSH
56610: LD_EXP 52
56614: PUSH
56615: LD_VAR 0 2
56619: ARRAY
56620: PUSH
56621: LD_EXP 37
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ADD
56632: ST_TO_ADDR
56633: GO 56589
56635: POP
56636: POP
// end else
56637: GO 56712
// begin for i := 1 to 8 do
56639: LD_ADDR_VAR 0 2
56643: PUSH
56644: DOUBLE
56645: LD_INT 1
56647: DEC
56648: ST_TO_ADDR
56649: LD_INT 8
56651: PUSH
56652: FOR_TO
56653: IFFALSE 56710
// if mpSidePositions [ i ] then
56655: LD_EXP 9
56659: PUSH
56660: LD_VAR 0 2
56664: ARRAY
56665: IFFALSE 56708
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56667: LD_ADDR_VAR 0 1
56671: PUSH
56672: LD_VAR 0 1
56676: PUSH
56677: LD_STRING #KingoftheHill-Player
56679: PUSH
56680: LD_VAR 0 2
56684: PUSH
56685: LD_EXP 52
56689: PUSH
56690: LD_VAR 0 2
56694: ARRAY
56695: PUSH
56696: LD_EXP 37
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: ADD
56707: ST_TO_ADDR
56708: GO 56652
56710: POP
56711: POP
// end ; mpDisplayStrings := result ;
56712: LD_ADDR_EXP 40
56716: PUSH
56717: LD_VAR 0 1
56721: ST_TO_ADDR
// end ;
56722: LD_VAR 0 1
56726: RET
// export function HowMuchPointsKing ( side ) ; begin
56727: LD_INT 0
56729: PPUSH
// result := HowMuchPoints ( side ) ;
56730: LD_ADDR_VAR 0 2
56734: PUSH
56735: LD_VAR 0 1
56739: PPUSH
56740: CALL 56750 0 1
56744: ST_TO_ADDR
// end ;
56745: LD_VAR 0 2
56749: RET
// function HowMuchPoints ( side ) ; var i ; begin
56750: LD_INT 0
56752: PPUSH
56753: PPUSH
// if mpTeamGame then
56754: LD_EXP 13
56758: IFFALSE 56827
// begin for i := 1 to Count ( mpTeams ) do
56760: LD_ADDR_VAR 0 3
56764: PUSH
56765: DOUBLE
56766: LD_INT 1
56768: DEC
56769: ST_TO_ADDR
56770: LD_EXP 12
56774: PPUSH
56775: CALL 5840 0 1
56779: PUSH
56780: FOR_TO
56781: IFFALSE 56823
// begin if side in mpTeams [ i ] then
56783: LD_VAR 0 1
56787: PUSH
56788: LD_EXP 12
56792: PUSH
56793: LD_VAR 0 3
56797: ARRAY
56798: IN
56799: IFFALSE 56821
// begin result := mpKingPoints [ i ] ;
56801: LD_ADDR_VAR 0 2
56805: PUSH
56806: LD_EXP 52
56810: PUSH
56811: LD_VAR 0 3
56815: ARRAY
56816: ST_TO_ADDR
// exit ;
56817: POP
56818: POP
56819: GO 56843
// end ; end ;
56821: GO 56780
56823: POP
56824: POP
// end else
56825: GO 56843
// result := mpKingPoints [ side ] ;
56827: LD_ADDR_VAR 0 2
56831: PUSH
56832: LD_EXP 52
56836: PUSH
56837: LD_VAR 0 1
56841: ARRAY
56842: ST_TO_ADDR
// end ;
56843: LD_VAR 0 2
56847: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56848: LD_EXP 41
56852: IFFALSE 56860
56854: PUSH
56855: CALL 57272 0 0
56859: AND
56860: IFFALSE 56868
56862: PUSH
56863: LD_OWVAR 4
56867: AND
56868: IFFALSE 57121
56870: GO 56872
56872: DISABLE
56873: LD_INT 0
56875: PPUSH
56876: PPUSH
// begin canWin := false ;
56877: LD_ADDR_VAR 0 2
56881: PUSH
56882: LD_INT 0
56884: ST_TO_ADDR
// if not HasPower ( your_side ) then
56885: LD_OWVAR 2
56889: PPUSH
56890: CALL 57314 0 1
56894: NOT
56895: IFFALSE 56906
// begin Multiplayer_Loose_Message ;
56897: CALL_OW 521
// enable ( mpLose ) ;
56901: LD_INT 102
56903: ENABLE_MARKED
// end else
56904: GO 57121
// begin if not EnemiesInGame then
56906: CALL 57124 0 0
56910: NOT
56911: IFFALSE 56918
// begin enable ( mpWin ) ;
56913: LD_INT 101
56915: ENABLE_MARKED
// exit ;
56916: GO 57121
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56918: LD_ADDR_VAR 0 2
56922: PUSH
56923: LD_OWVAR 2
56927: PPUSH
56928: CALL 56750 0 1
56932: PUSH
56933: LD_EXP 37
56937: GREATEREQUAL
56938: IFFALSE 56951
56940: PUSH
56941: LD_OWVAR 2
56945: PPUSH
56946: CALL 57314 0 1
56950: AND
56951: ST_TO_ADDR
// for i := 1 to 8 do
56952: LD_ADDR_VAR 0 1
56956: PUSH
56957: DOUBLE
56958: LD_INT 1
56960: DEC
56961: ST_TO_ADDR
56962: LD_INT 8
56964: PUSH
56965: FOR_TO
56966: IFFALSE 57107
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56968: LD_EXP 9
56972: PUSH
56973: LD_VAR 0 1
56977: ARRAY
56978: IFFALSE 56991
56980: PUSH
56981: LD_VAR 0 1
56985: PPUSH
56986: CALL_OW 108
56990: AND
56991: IFFALSE 57005
56993: PUSH
56994: LD_VAR 0 1
56998: PUSH
56999: LD_OWVAR 2
57003: NONEQUAL
57004: AND
57005: IFFALSE 57105
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
57007: LD_EXP 10
57011: PUSH
57012: LD_VAR 0 1
57016: ARRAY
57017: NOT
57018: IFTRUE 57066
57020: PUSH
57021: LD_EXP 10
57025: PUSH
57026: LD_VAR 0 1
57030: ARRAY
57031: PUSH
57032: LD_EXP 10
57036: PUSH
57037: LD_OWVAR 2
57041: ARRAY
57042: NONEQUAL
57043: IFFALSE 57065
57045: PUSH
57046: LD_OWVAR 2
57050: PPUSH
57051: LD_VAR 0 1
57055: PPUSH
57056: CALL_OW 81
57060: PUSH
57061: LD_INT 1
57063: NONEQUAL
57064: AND
57065: OR
57066: IFFALSE 57105
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
57068: LD_VAR 0 1
57072: PPUSH
57073: CALL 56750 0 1
57077: PUSH
57078: LD_EXP 37
57082: GREATEREQUAL
57083: IFFALSE 57096
57085: PUSH
57086: LD_VAR 0 1
57090: PPUSH
57091: CALL 57314 0 1
57095: AND
57096: IFFALSE 57105
// begin enable ( mpLose ) ;
57098: LD_INT 102
57100: ENABLE_MARKED
// exit ;
57101: POP
57102: POP
57103: GO 57121
// end ;
57105: GO 56965
57107: POP
57108: POP
// if canWin then
57109: LD_VAR 0 2
57113: IFFALSE 57120
// enable ( mpWin ) else
57115: LD_INT 101
57117: ENABLE_MARKED
57118: GO 57121
// enable ;
57120: ENABLE
// end ; end ;
57121: PPOPN 2
57123: END
// function EnemiesInGame ; var i ; begin
57124: LD_INT 0
57126: PPUSH
57127: PPUSH
// result := false ;
57128: LD_ADDR_VAR 0 1
57132: PUSH
57133: LD_INT 0
57135: ST_TO_ADDR
// for i := 1 to 8 do
57136: LD_ADDR_VAR 0 2
57140: PUSH
57141: DOUBLE
57142: LD_INT 1
57144: DEC
57145: ST_TO_ADDR
57146: LD_INT 8
57148: PUSH
57149: FOR_TO
57150: IFFALSE 57265
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
57152: LD_VAR 0 2
57156: PUSH
57157: LD_OWVAR 2
57161: NONEQUAL
57162: IFFALSE 57175
57164: PUSH
57165: LD_VAR 0 2
57169: PPUSH
57170: CALL 57314 0 1
57174: AND
57175: IFFALSE 57188
57177: PUSH
57178: LD_VAR 0 2
57182: PPUSH
57183: CALL_OW 108
57187: AND
57188: IFFALSE 57263
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
57190: LD_EXP 10
57194: PUSH
57195: LD_VAR 0 2
57199: ARRAY
57200: NOT
57201: IFTRUE 57249
57203: PUSH
57204: LD_EXP 10
57208: PUSH
57209: LD_VAR 0 2
57213: ARRAY
57214: PUSH
57215: LD_EXP 10
57219: PUSH
57220: LD_OWVAR 2
57224: ARRAY
57225: NONEQUAL
57226: IFFALSE 57248
57228: PUSH
57229: LD_OWVAR 2
57233: PPUSH
57234: LD_VAR 0 2
57238: PPUSH
57239: CALL_OW 81
57243: PUSH
57244: LD_INT 1
57246: NONEQUAL
57247: AND
57248: OR
57249: IFFALSE 57263
// begin result := true ;
57251: LD_ADDR_VAR 0 1
57255: PUSH
57256: LD_INT 1
57258: ST_TO_ADDR
// exit ;
57259: POP
57260: POP
57261: GO 57267
// end ;
57263: GO 57149
57265: POP
57266: POP
// end ;
57267: LD_VAR 0 1
57271: RET
// function CanWinLoose ; begin
57272: LD_INT 0
57274: PPUSH
// result := true ;
57275: LD_ADDR_VAR 0 1
57279: PUSH
57280: LD_INT 1
57282: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
57283: CALL_OW 531
57287: IFFALSE 57299
57289: PUSH
57290: CALL_OW 519
57294: PUSH
57295: LD_INT 1
57297: GREATER
57298: AND
57299: IFFALSE 57309
// result := false ;
57301: LD_ADDR_VAR 0 1
57305: PUSH
57306: LD_INT 0
57308: ST_TO_ADDR
// end ;
57309: LD_VAR 0 1
57313: RET
// function HasPower ( i ) ; begin
57314: LD_INT 0
57316: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
57317: LD_ADDR_VAR 0 2
57321: PUSH
57322: LD_INT 22
57324: PUSH
57325: LD_VAR 0 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 21
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 33
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 33
57359: PUSH
57360: LD_INT 5
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PPUSH
57377: CALL_OW 69
57381: ST_TO_ADDR
// end ; end_of_file end_of_file
57382: LD_VAR 0 2
57386: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57387: LD_VAR 0 1
57391: PUSH
57392: LD_INT 200
57394: DOUBLE
57395: GREATEREQUAL
57396: IFFALSE 57404
57398: LD_INT 299
57400: DOUBLE
57401: LESSEQUAL
57402: IFTRUE 57406
57404: GO 57438
57406: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57407: LD_VAR 0 1
57411: PPUSH
57412: LD_VAR 0 2
57416: PPUSH
57417: LD_VAR 0 3
57421: PPUSH
57422: LD_VAR 0 4
57426: PPUSH
57427: LD_VAR 0 5
57431: PPUSH
57432: CALL 58300 0 5
57436: GO 57515
57438: LD_INT 300
57440: DOUBLE
57441: GREATEREQUAL
57442: IFFALSE 57450
57444: LD_INT 399
57446: DOUBLE
57447: LESSEQUAL
57448: IFTRUE 57452
57450: GO 57514
57452: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57453: LD_VAR 0 1
57457: PPUSH
57458: LD_VAR 0 2
57462: PPUSH
57463: LD_VAR 0 3
57467: PPUSH
57468: LD_VAR 0 4
57472: PPUSH
57473: LD_VAR 0 5
57477: PPUSH
57478: LD_VAR 0 6
57482: PPUSH
57483: LD_VAR 0 7
57487: PPUSH
57488: LD_VAR 0 8
57492: PPUSH
57493: LD_VAR 0 9
57497: PPUSH
57498: LD_VAR 0 10
57502: PPUSH
57503: LD_VAR 0 11
57507: PPUSH
57508: CALL 64721 0 11
57512: GO 57515
57514: POP
// end ;
57515: PPOPN 11
57517: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57518: LD_VAR 0 1
57522: PPUSH
57523: LD_VAR 0 2
57527: PPUSH
57528: LD_VAR 0 3
57532: PPUSH
57533: LD_VAR 0 4
57537: PPUSH
57538: LD_VAR 0 5
57542: PPUSH
57543: CALL 57600 0 5
// end ; end_of_file
57547: PPOPN 5
57549: END
// export function SOS_UnitDestroyed ( un ) ; begin
57550: LD_INT 0
57552: PPUSH
// ComRadiation ( un ) ;
57553: LD_VAR 0 1
57557: PPUSH
57558: CALL 58720 0 1
// end ;
57562: LD_VAR 0 2
57566: RET
// export function SOS_UnitKamikazed ( un ) ; begin
57567: LD_INT 0
57569: PPUSH
// ComRadiation ( un ) ;
57570: LD_VAR 0 1
57574: PPUSH
57575: CALL 58720 0 1
// end ;
57579: LD_VAR 0 2
57583: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57584: LD_INT 0
57586: PPUSH
// end ;
57587: LD_VAR 0 4
57591: RET
// export function SOS_Command ( cmd ) ; begin
57592: LD_INT 0
57594: PPUSH
// end ;
57595: LD_VAR 0 2
57599: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57600: LD_INT 0
57602: PPUSH
// end ;
57603: LD_VAR 0 6
57607: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
57608: LD_INT 0
57610: PPUSH
57611: PPUSH
57612: PPUSH
57613: PPUSH
57614: PPUSH
// if not vehicle or not factory then
57615: LD_VAR 0 1
57619: NOT
57620: IFTRUE 57629
57622: PUSH
57623: LD_VAR 0 2
57627: NOT
57628: OR
57629: IFFALSE 57633
// exit ;
57631: GO 58295
// weapon := GetWeapon ( vehicle ) ;
57633: LD_ADDR_VAR 0 7
57637: PUSH
57638: LD_VAR 0 1
57642: PPUSH
57643: CALL_OW 264
57647: ST_TO_ADDR
// if weapon = ar_miner then
57648: LD_VAR 0 7
57652: PUSH
57653: LD_INT 81
57655: EQUAL
57656: IFFALSE 57713
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57658: LD_ADDR_EXP 60
57662: PUSH
57663: LD_EXP 60
57667: PPUSH
57668: LD_EXP 60
57672: PUSH
57673: LD_INT 1
57675: PLUS
57676: PPUSH
57677: LD_VAR 0 1
57681: PPUSH
57682: CALL_OW 1
57686: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57687: LD_ADDR_EXP 61
57691: PUSH
57692: LD_EXP 61
57696: PPUSH
57697: LD_EXP 61
57701: PUSH
57702: LD_INT 1
57704: PLUS
57705: PPUSH
57706: EMPTY
57707: PPUSH
57708: CALL_OW 1
57712: ST_TO_ADDR
// end ; if not factoryWaypoints then
57713: LD_EXP 63
57717: NOT
57718: IFFALSE 57722
// exit ;
57720: GO 58295
// for i := 1 to Count ( factoryWaypoints ) do
57722: LD_ADDR_VAR 0 4
57726: PUSH
57727: DOUBLE
57728: LD_INT 1
57730: DEC
57731: ST_TO_ADDR
57732: LD_EXP 63
57736: PPUSH
57737: CALL 5840 0 1
57741: PUSH
57742: FOR_TO
57743: IFFALSE 58293
// if factoryWaypoints [ i ] [ 2 ] = factory then
57745: LD_EXP 63
57749: PUSH
57750: LD_VAR 0 4
57754: ARRAY
57755: PUSH
57756: LD_INT 2
57758: ARRAY
57759: PUSH
57760: LD_VAR 0 2
57764: EQUAL
57765: IFFALSE 58291
// begin if GetControl ( vehicle ) = control_manual then
57767: LD_VAR 0 1
57771: PPUSH
57772: CALL_OW 263
57776: PUSH
57777: LD_INT 1
57779: EQUAL
57780: IFFALSE 58144
// begin driver := IsDrivenBy ( vehicle ) ;
57782: LD_ADDR_VAR 0 5
57786: PUSH
57787: LD_VAR 0 1
57791: PPUSH
57792: CALL_OW 311
57796: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57797: LD_VAR 0 5
57801: PUSH
57802: LD_EXP 64
57806: IN
57807: IFTRUE 57821
57809: PUSH
57810: LD_VAR 0 1
57814: PUSH
57815: LD_EXP 64
57819: IN
57820: OR
57821: IFFALSE 57827
// exit ;
57823: POP
57824: POP
57825: GO 58295
// if not HasTask ( driver ) then
57827: LD_VAR 0 5
57831: PPUSH
57832: CALL_OW 314
57836: NOT
57837: IFFALSE 58142
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57839: LD_ADDR_EXP 64
57843: PUSH
57844: LD_EXP 64
57848: PPUSH
57849: LD_VAR 0 5
57853: PPUSH
57854: CALL 41816 0 2
57858: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57859: LD_ADDR_EXP 64
57863: PUSH
57864: LD_EXP 64
57868: PPUSH
57869: LD_VAR 0 1
57873: PPUSH
57874: CALL 41816 0 2
57878: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57879: LD_ADDR_VAR 0 6
57883: PUSH
57884: LD_EXP 63
57888: PUSH
57889: LD_VAR 0 4
57893: ARRAY
57894: PUSH
57895: LD_INT 3
57897: ARRAY
57898: PPUSH
57899: LD_EXP 63
57903: PUSH
57904: LD_VAR 0 4
57908: ARRAY
57909: PUSH
57910: LD_INT 4
57912: ARRAY
57913: PPUSH
57914: CALL_OW 428
57918: ST_TO_ADDR
// if hex then
57919: LD_VAR 0 6
57923: IFFALSE 57941
// ComMoveUnit ( driver , hex ) else
57925: LD_VAR 0 5
57929: PPUSH
57930: LD_VAR 0 6
57934: PPUSH
57935: CALL_OW 112
57939: GO 58025
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57941: LD_VAR 0 1
57945: PPUSH
57946: LD_EXP 63
57950: PUSH
57951: LD_VAR 0 4
57955: ARRAY
57956: PUSH
57957: LD_INT 3
57959: ARRAY
57960: PPUSH
57961: LD_EXP 63
57965: PUSH
57966: LD_VAR 0 4
57970: ARRAY
57971: PUSH
57972: LD_INT 4
57974: ARRAY
57975: PPUSH
57976: CALL_OW 297
57980: PUSH
57981: LD_INT 0
57983: GREATER
57984: IFFALSE 58025
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57986: LD_VAR 0 5
57990: PPUSH
57991: LD_EXP 63
57995: PUSH
57996: LD_VAR 0 4
58000: ARRAY
58001: PUSH
58002: LD_INT 3
58004: ARRAY
58005: PPUSH
58006: LD_EXP 63
58010: PUSH
58011: LD_VAR 0 4
58015: ARRAY
58016: PUSH
58017: LD_INT 4
58019: ARRAY
58020: PPUSH
58021: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58025: LD_VAR 0 5
58029: PPUSH
58030: CALL_OW 181
// if Multiplayer then
58034: LD_OWVAR 4
58038: IFFALSE 58087
// begin repeat wait ( 10 ) ;
58040: LD_INT 10
58042: PPUSH
58043: CALL_OW 67
// until not IsInUnit ( driver ) ;
58047: LD_VAR 0 5
58051: PPUSH
58052: CALL_OW 310
58056: NOT
58057: IFFALSE 58040
// if not HasTask ( driver ) then
58059: LD_VAR 0 5
58063: PPUSH
58064: CALL_OW 314
58068: NOT
58069: IFFALSE 58085
// ComEnterUnit ( driver , factory ) ;
58071: LD_VAR 0 5
58075: PPUSH
58076: LD_VAR 0 2
58080: PPUSH
58081: CALL_OW 120
// end else
58085: GO 58101
// AddComEnterUnit ( driver , factory ) ;
58087: LD_VAR 0 5
58091: PPUSH
58092: LD_VAR 0 2
58096: PPUSH
58097: CALL_OW 180
// wait ( 0 0$1 ) ;
58101: LD_INT 35
58103: PPUSH
58104: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
58108: LD_ADDR_EXP 64
58112: PUSH
58113: LD_EXP 64
58117: PUSH
58118: LD_VAR 0 5
58122: DIFF
58123: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
58124: LD_ADDR_EXP 64
58128: PUSH
58129: LD_EXP 64
58133: PUSH
58134: LD_VAR 0 1
58138: DIFF
58139: ST_TO_ADDR
// break ;
58140: GO 58293
// end ; end else
58142: GO 58291
// if GetControl ( vehicle ) = control_remote then
58144: LD_VAR 0 1
58148: PPUSH
58149: CALL_OW 263
58153: PUSH
58154: LD_INT 2
58156: EQUAL
58157: IFFALSE 58243
// begin wait ( 0 0$2 ) ;
58159: LD_INT 70
58161: PPUSH
58162: CALL_OW 67
// repeat wait ( 10 ) ;
58166: LD_INT 10
58168: PPUSH
58169: CALL_OW 67
// Connect ( vehicle ) ;
58173: LD_VAR 0 1
58177: PPUSH
58178: CALL 12118 0 1
// until IsControledBy ( vehicle ) ;
58182: LD_VAR 0 1
58186: PPUSH
58187: CALL_OW 312
58191: IFFALSE 58166
// wait ( 10 ) ;
58193: LD_INT 10
58195: PPUSH
58196: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58200: LD_VAR 0 1
58204: PPUSH
58205: LD_EXP 63
58209: PUSH
58210: LD_VAR 0 4
58214: ARRAY
58215: PUSH
58216: LD_INT 3
58218: ARRAY
58219: PPUSH
58220: LD_EXP 63
58224: PUSH
58225: LD_VAR 0 4
58229: ARRAY
58230: PUSH
58231: LD_INT 4
58233: ARRAY
58234: PPUSH
58235: CALL_OW 111
// break ;
58239: GO 58293
// end else
58241: GO 58291
// begin wait ( 0 0$3 ) ;
58243: LD_INT 105
58245: PPUSH
58246: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58250: LD_VAR 0 1
58254: PPUSH
58255: LD_EXP 63
58259: PUSH
58260: LD_VAR 0 4
58264: ARRAY
58265: PUSH
58266: LD_INT 3
58268: ARRAY
58269: PPUSH
58270: LD_EXP 63
58274: PUSH
58275: LD_VAR 0 4
58279: ARRAY
58280: PUSH
58281: LD_INT 4
58283: ARRAY
58284: PPUSH
58285: CALL_OW 111
// break ;
58289: GO 58293
// end ; end ;
58291: GO 57742
58293: POP
58294: POP
// end ;
58295: LD_VAR 0 3
58299: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58300: LD_INT 0
58302: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58303: LD_VAR 0 1
58307: PUSH
58308: LD_INT 250
58310: EQUAL
58311: IFFALSE 58328
58313: PUSH
58314: LD_VAR 0 2
58318: PPUSH
58319: CALL_OW 264
58323: PUSH
58324: LD_INT 81
58326: EQUAL
58327: AND
58328: IFFALSE 58349
// MinerPlaceMine ( unit , x , y ) ;
58330: LD_VAR 0 2
58334: PPUSH
58335: LD_VAR 0 4
58339: PPUSH
58340: LD_VAR 0 5
58344: PPUSH
58345: CALL 61695 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58349: LD_VAR 0 1
58353: PUSH
58354: LD_INT 251
58356: EQUAL
58357: IFFALSE 58374
58359: PUSH
58360: LD_VAR 0 2
58364: PPUSH
58365: CALL_OW 264
58369: PUSH
58370: LD_INT 81
58372: EQUAL
58373: AND
58374: IFFALSE 58395
// MinerDetonateMine ( unit , x , y ) ;
58376: LD_VAR 0 2
58380: PPUSH
58381: LD_VAR 0 4
58385: PPUSH
58386: LD_VAR 0 5
58390: PPUSH
58391: CALL 62102 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58395: LD_VAR 0 1
58399: PUSH
58400: LD_INT 252
58402: EQUAL
58403: IFFALSE 58420
58405: PUSH
58406: LD_VAR 0 2
58410: PPUSH
58411: CALL_OW 264
58415: PUSH
58416: LD_INT 81
58418: EQUAL
58419: AND
58420: IFFALSE 58441
// MinerCreateMinefield ( unit , x , y ) ;
58422: LD_VAR 0 2
58426: PPUSH
58427: LD_VAR 0 4
58431: PPUSH
58432: LD_VAR 0 5
58436: PPUSH
58437: CALL 62334 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58441: LD_VAR 0 1
58445: PUSH
58446: LD_INT 253
58448: EQUAL
58449: IFFALSE 58466
58451: PUSH
58452: LD_VAR 0 2
58456: PPUSH
58457: CALL_OW 257
58461: PUSH
58462: LD_INT 5
58464: EQUAL
58465: AND
58466: IFFALSE 58487
// ComBinocular ( unit , x , y ) ;
58468: LD_VAR 0 2
58472: PPUSH
58473: LD_VAR 0 4
58477: PPUSH
58478: LD_VAR 0 5
58482: PPUSH
58483: CALL 62709 0 3
// if selectedUnit then
58487: LD_VAR 0 3
58491: IFFALSE 58551
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58493: LD_VAR 0 1
58497: PUSH
58498: LD_INT 254
58500: EQUAL
58501: IFFALSE 58518
58503: PUSH
58504: LD_VAR 0 2
58508: PPUSH
58509: CALL_OW 264
58513: PUSH
58514: LD_INT 99
58516: EQUAL
58517: AND
58518: IFFALSE 58535
58520: PUSH
58521: LD_VAR 0 3
58525: PPUSH
58526: CALL_OW 263
58530: PUSH
58531: LD_INT 3
58533: EQUAL
58534: AND
58535: IFFALSE 58551
// HackDestroyVehicle ( unit , selectedUnit ) ;
58537: LD_VAR 0 2
58541: PPUSH
58542: LD_VAR 0 3
58546: PPUSH
58547: CALL 60885 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58551: LD_VAR 0 1
58555: PUSH
58556: LD_INT 255
58558: EQUAL
58559: IFFALSE 58583
58561: PUSH
58562: LD_VAR 0 2
58566: PPUSH
58567: CALL_OW 264
58571: PUSH
58572: LD_INT 14
58574: PUSH
58575: LD_INT 53
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: IN
58582: AND
58583: IFFALSE 58601
58585: PUSH
58586: LD_VAR 0 4
58590: PPUSH
58591: LD_VAR 0 5
58595: PPUSH
58596: CALL_OW 488
58600: AND
58601: IFFALSE 58625
// CutTreeXYR ( unit , x , y , 12 ) ;
58603: LD_VAR 0 2
58607: PPUSH
58608: LD_VAR 0 4
58612: PPUSH
58613: LD_VAR 0 5
58617: PPUSH
58618: LD_INT 12
58620: PPUSH
58621: CALL 58816 0 4
// if cmd = 256 then
58625: LD_VAR 0 1
58629: PUSH
58630: LD_INT 256
58632: EQUAL
58633: IFFALSE 58654
// SetFactoryWaypoint ( unit , x , y ) ;
58635: LD_VAR 0 2
58639: PPUSH
58640: LD_VAR 0 4
58644: PPUSH
58645: LD_VAR 0 5
58649: PPUSH
58650: CALL 64729 0 3
// if cmd = 257 then
58654: LD_VAR 0 1
58658: PUSH
58659: LD_INT 257
58661: EQUAL
58662: IFFALSE 58683
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58664: LD_VAR 0 2
58668: PPUSH
58669: LD_VAR 0 4
58673: PPUSH
58674: LD_VAR 0 5
58678: PPUSH
58679: CALL 65225 0 3
// if cmd = 258 then
58683: LD_VAR 0 1
58687: PUSH
58688: LD_INT 258
58690: EQUAL
58691: IFFALSE 58715
// BurnTreeXYR ( unit , x , y , 8 ) ;
58693: LD_VAR 0 2
58697: PPUSH
58698: LD_VAR 0 4
58702: PPUSH
58703: LD_VAR 0 5
58707: PPUSH
58708: LD_INT 8
58710: PPUSH
58711: CALL 59238 0 4
// end ;
58715: LD_VAR 0 6
58719: RET
// export function ComRadiation ( un ) ; var eff ; begin
58720: LD_INT 0
58722: PPUSH
58723: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL_OW 264
58733: PUSH
58734: LD_INT 91
58736: NONEQUAL
58737: IFFALSE 58741
// exit ;
58739: GO 58811
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58741: LD_INT 68
58743: PPUSH
58744: LD_VAR 0 1
58748: PPUSH
58749: CALL_OW 255
58753: PPUSH
58754: CALL_OW 321
58758: PUSH
58759: LD_INT 2
58761: EQUAL
58762: IFFALSE 58774
// eff := 50 else
58764: LD_ADDR_VAR 0 3
58768: PUSH
58769: LD_INT 50
58771: ST_TO_ADDR
58772: GO 58782
// eff := 25 ;
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: LD_INT 25
58781: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58782: LD_VAR 0 1
58786: PPUSH
58787: CALL_OW 250
58791: PPUSH
58792: LD_VAR 0 1
58796: PPUSH
58797: CALL_OW 251
58801: PPUSH
58802: LD_VAR 0 3
58806: PPUSH
58807: CALL_OW 495
// end ;
58811: LD_VAR 0 2
58815: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58816: LD_INT 0
58818: PPUSH
58819: PPUSH
58820: PPUSH
58821: PPUSH
58822: PPUSH
58823: PPUSH
58824: PPUSH
58825: PPUSH
58826: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58827: LD_VAR 0 1
58831: PPUSH
58832: CALL_OW 302
58836: NOT
58837: IFTRUE 58856
58839: PUSH
58840: LD_VAR 0 2
58844: PPUSH
58845: LD_VAR 0 3
58849: PPUSH
58850: CALL_OW 488
58854: NOT
58855: OR
58856: IFTRUE 58865
58858: PUSH
58859: LD_VAR 0 4
58863: NOT
58864: OR
58865: IFFALSE 58869
// exit ;
58867: GO 59233
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58869: LD_VAR 0 1
58873: PPUSH
58874: CALL_OW 437
58878: PPUSH
58879: CALL 5840 0 1
58883: PUSH
58884: LD_INT 10
58886: GREATER
58887: IFFALSE 58891
// exit ;
58889: GO 59233
// list := [ ] ;
58891: LD_ADDR_VAR 0 13
58895: PUSH
58896: EMPTY
58897: ST_TO_ADDR
// if x - r < 0 then
58898: LD_VAR 0 2
58902: PUSH
58903: LD_VAR 0 4
58907: MINUS
58908: PUSH
58909: LD_INT 0
58911: LESS
58912: IFFALSE 58924
// min_x := 0 else
58914: LD_ADDR_VAR 0 7
58918: PUSH
58919: LD_INT 0
58921: ST_TO_ADDR
58922: GO 58940
// min_x := x - r ;
58924: LD_ADDR_VAR 0 7
58928: PUSH
58929: LD_VAR 0 2
58933: PUSH
58934: LD_VAR 0 4
58938: MINUS
58939: ST_TO_ADDR
// if y - r < 0 then
58940: LD_VAR 0 3
58944: PUSH
58945: LD_VAR 0 4
58949: MINUS
58950: PUSH
58951: LD_INT 0
58953: LESS
58954: IFFALSE 58966
// min_y := 0 else
58956: LD_ADDR_VAR 0 8
58960: PUSH
58961: LD_INT 0
58963: ST_TO_ADDR
58964: GO 58982
// min_y := y - r ;
58966: LD_ADDR_VAR 0 8
58970: PUSH
58971: LD_VAR 0 3
58975: PUSH
58976: LD_VAR 0 4
58980: MINUS
58981: ST_TO_ADDR
// max_x := x + r ;
58982: LD_ADDR_VAR 0 9
58986: PUSH
58987: LD_VAR 0 2
58991: PUSH
58992: LD_VAR 0 4
58996: PLUS
58997: ST_TO_ADDR
// max_y := y + r ;
58998: LD_ADDR_VAR 0 10
59002: PUSH
59003: LD_VAR 0 3
59007: PUSH
59008: LD_VAR 0 4
59012: PLUS
59013: ST_TO_ADDR
// for _x = min_x to max_x do
59014: LD_ADDR_VAR 0 11
59018: PUSH
59019: DOUBLE
59020: LD_VAR 0 7
59024: DEC
59025: ST_TO_ADDR
59026: LD_VAR 0 9
59030: PUSH
59031: FOR_TO
59032: IFFALSE 59151
// for _y = min_y to max_y do
59034: LD_ADDR_VAR 0 12
59038: PUSH
59039: DOUBLE
59040: LD_VAR 0 8
59044: DEC
59045: ST_TO_ADDR
59046: LD_VAR 0 10
59050: PUSH
59051: FOR_TO
59052: IFFALSE 59147
// begin if not ValidHex ( _x , _y ) then
59054: LD_VAR 0 11
59058: PPUSH
59059: LD_VAR 0 12
59063: PPUSH
59064: CALL_OW 488
59068: NOT
59069: IFFALSE 59073
// continue ;
59071: GO 59051
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59073: LD_VAR 0 11
59077: PPUSH
59078: LD_VAR 0 12
59082: PPUSH
59083: CALL_OW 351
59087: IFFALSE 59105
59089: PUSH
59090: LD_VAR 0 11
59094: PPUSH
59095: LD_VAR 0 12
59099: PPUSH
59100: CALL_OW 554
59104: AND
59105: IFFALSE 59145
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59107: LD_ADDR_VAR 0 13
59111: PUSH
59112: LD_VAR 0 13
59116: PPUSH
59117: LD_VAR 0 13
59121: PUSH
59122: LD_INT 1
59124: PLUS
59125: PPUSH
59126: LD_VAR 0 11
59130: PUSH
59131: LD_VAR 0 12
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PPUSH
59140: CALL_OW 2
59144: ST_TO_ADDR
// end ;
59145: GO 59051
59147: POP
59148: POP
59149: GO 59031
59151: POP
59152: POP
// if not list then
59153: LD_VAR 0 13
59157: NOT
59158: IFFALSE 59162
// exit ;
59160: GO 59233
// for i in list do
59162: LD_ADDR_VAR 0 6
59166: PUSH
59167: LD_VAR 0 13
59171: PUSH
59172: FOR_IN
59173: IFFALSE 59231
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59175: LD_VAR 0 1
59179: PPUSH
59180: LD_STRING M
59182: PUSH
59183: LD_VAR 0 6
59187: PUSH
59188: LD_INT 1
59190: ARRAY
59191: PUSH
59192: LD_VAR 0 6
59196: PUSH
59197: LD_INT 2
59199: ARRAY
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: PUSH
59222: EMPTY
59223: LIST
59224: PPUSH
59225: CALL_OW 447
59229: GO 59172
59231: POP
59232: POP
// end ;
59233: LD_VAR 0 5
59237: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59238: LD_INT 0
59240: PPUSH
59241: PPUSH
59242: PPUSH
59243: PPUSH
59244: PPUSH
59245: PPUSH
59246: PPUSH
59247: PPUSH
59248: PPUSH
59249: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59250: LD_VAR 0 1
59254: PPUSH
59255: CALL_OW 302
59259: NOT
59260: IFTRUE 59279
59262: PUSH
59263: LD_VAR 0 2
59267: PPUSH
59268: LD_VAR 0 3
59272: PPUSH
59273: CALL_OW 488
59277: NOT
59278: OR
59279: IFTRUE 59288
59281: PUSH
59282: LD_VAR 0 4
59286: NOT
59287: OR
59288: IFFALSE 59292
// exit ;
59290: GO 59831
// if Count ( GetTaskList ( flame ) ) > 10 then
59292: LD_VAR 0 1
59296: PPUSH
59297: CALL_OW 437
59301: PPUSH
59302: CALL 5840 0 1
59306: PUSH
59307: LD_INT 10
59309: GREATER
59310: IFFALSE 59314
// exit ;
59312: GO 59831
// list := [ ] ;
59314: LD_ADDR_VAR 0 13
59318: PUSH
59319: EMPTY
59320: ST_TO_ADDR
// if x - r < 0 then
59321: LD_VAR 0 2
59325: PUSH
59326: LD_VAR 0 4
59330: MINUS
59331: PUSH
59332: LD_INT 0
59334: LESS
59335: IFFALSE 59347
// min_x := 0 else
59337: LD_ADDR_VAR 0 7
59341: PUSH
59342: LD_INT 0
59344: ST_TO_ADDR
59345: GO 59363
// min_x := x - r ;
59347: LD_ADDR_VAR 0 7
59351: PUSH
59352: LD_VAR 0 2
59356: PUSH
59357: LD_VAR 0 4
59361: MINUS
59362: ST_TO_ADDR
// if y - r < 0 then
59363: LD_VAR 0 3
59367: PUSH
59368: LD_VAR 0 4
59372: MINUS
59373: PUSH
59374: LD_INT 0
59376: LESS
59377: IFFALSE 59389
// min_y := 0 else
59379: LD_ADDR_VAR 0 8
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
59387: GO 59405
// min_y := y - r ;
59389: LD_ADDR_VAR 0 8
59393: PUSH
59394: LD_VAR 0 3
59398: PUSH
59399: LD_VAR 0 4
59403: MINUS
59404: ST_TO_ADDR
// max_x := x + r ;
59405: LD_ADDR_VAR 0 9
59409: PUSH
59410: LD_VAR 0 2
59414: PUSH
59415: LD_VAR 0 4
59419: PLUS
59420: ST_TO_ADDR
// max_y := y + r ;
59421: LD_ADDR_VAR 0 10
59425: PUSH
59426: LD_VAR 0 3
59430: PUSH
59431: LD_VAR 0 4
59435: PLUS
59436: ST_TO_ADDR
// for _x = min_x to max_x do
59437: LD_ADDR_VAR 0 11
59441: PUSH
59442: DOUBLE
59443: LD_VAR 0 7
59447: DEC
59448: ST_TO_ADDR
59449: LD_VAR 0 9
59453: PUSH
59454: FOR_TO
59455: IFFALSE 59574
// for _y = min_y to max_y do
59457: LD_ADDR_VAR 0 12
59461: PUSH
59462: DOUBLE
59463: LD_VAR 0 8
59467: DEC
59468: ST_TO_ADDR
59469: LD_VAR 0 10
59473: PUSH
59474: FOR_TO
59475: IFFALSE 59570
// begin if not ValidHex ( _x , _y ) then
59477: LD_VAR 0 11
59481: PPUSH
59482: LD_VAR 0 12
59486: PPUSH
59487: CALL_OW 488
59491: NOT
59492: IFFALSE 59496
// continue ;
59494: GO 59474
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59496: LD_VAR 0 11
59500: PPUSH
59501: LD_VAR 0 12
59505: PPUSH
59506: CALL_OW 351
59510: IFFALSE 59528
59512: PUSH
59513: LD_VAR 0 11
59517: PPUSH
59518: LD_VAR 0 12
59522: PPUSH
59523: CALL_OW 554
59527: AND
59528: IFFALSE 59568
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59530: LD_ADDR_VAR 0 13
59534: PUSH
59535: LD_VAR 0 13
59539: PPUSH
59540: LD_VAR 0 13
59544: PUSH
59545: LD_INT 1
59547: PLUS
59548: PPUSH
59549: LD_VAR 0 11
59553: PUSH
59554: LD_VAR 0 12
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PPUSH
59563: CALL_OW 2
59567: ST_TO_ADDR
// end ;
59568: GO 59474
59570: POP
59571: POP
59572: GO 59454
59574: POP
59575: POP
// if not list then
59576: LD_VAR 0 13
59580: NOT
59581: IFFALSE 59585
// exit ;
59583: GO 59831
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59585: LD_ADDR_VAR 0 13
59589: PUSH
59590: LD_VAR 0 1
59594: PPUSH
59595: LD_VAR 0 13
59599: PPUSH
59600: LD_INT 1
59602: PPUSH
59603: LD_INT 1
59605: PPUSH
59606: CALL 9246 0 4
59610: ST_TO_ADDR
// ComStop ( flame ) ;
59611: LD_VAR 0 1
59615: PPUSH
59616: CALL_OW 141
// for i in list do
59620: LD_ADDR_VAR 0 6
59624: PUSH
59625: LD_VAR 0 13
59629: PUSH
59630: FOR_IN
59631: IFFALSE 59662
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59633: LD_VAR 0 1
59637: PPUSH
59638: LD_VAR 0 6
59642: PUSH
59643: LD_INT 1
59645: ARRAY
59646: PPUSH
59647: LD_VAR 0 6
59651: PUSH
59652: LD_INT 2
59654: ARRAY
59655: PPUSH
59656: CALL_OW 176
59660: GO 59630
59662: POP
59663: POP
// repeat wait ( 0 0$1 ) ;
59664: LD_INT 35
59666: PPUSH
59667: CALL_OW 67
// task := GetTaskList ( flame ) ;
59671: LD_ADDR_VAR 0 14
59675: PUSH
59676: LD_VAR 0 1
59680: PPUSH
59681: CALL_OW 437
59685: ST_TO_ADDR
// if not task then
59686: LD_VAR 0 14
59690: NOT
59691: IFFALSE 59695
// exit ;
59693: GO 59831
// if task [ 1 ] [ 1 ] <> | then
59695: LD_VAR 0 14
59699: PUSH
59700: LD_INT 1
59702: ARRAY
59703: PUSH
59704: LD_INT 1
59706: ARRAY
59707: PUSH
59708: LD_STRING |
59710: NONEQUAL
59711: IFFALSE 59715
// exit ;
59713: GO 59831
// _x := task [ 1 ] [ 2 ] ;
59715: LD_ADDR_VAR 0 11
59719: PUSH
59720: LD_VAR 0 14
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: PUSH
59729: LD_INT 2
59731: ARRAY
59732: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59733: LD_ADDR_VAR 0 12
59737: PUSH
59738: LD_VAR 0 14
59742: PUSH
59743: LD_INT 1
59745: ARRAY
59746: PUSH
59747: LD_INT 3
59749: ARRAY
59750: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59751: LD_VAR 0 11
59755: PPUSH
59756: LD_VAR 0 12
59760: PPUSH
59761: CALL_OW 351
59765: NOT
59766: IFTRUE 59785
59768: PUSH
59769: LD_VAR 0 11
59773: PPUSH
59774: LD_VAR 0 12
59778: PPUSH
59779: CALL_OW 554
59783: NOT
59784: OR
59785: IFFALSE 59819
// begin task := Delete ( task , 1 ) ;
59787: LD_ADDR_VAR 0 14
59791: PUSH
59792: LD_VAR 0 14
59796: PPUSH
59797: LD_INT 1
59799: PPUSH
59800: CALL_OW 3
59804: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59805: LD_VAR 0 1
59809: PPUSH
59810: LD_VAR 0 14
59814: PPUSH
59815: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59819: LD_VAR 0 1
59823: PPUSH
59824: CALL_OW 314
59828: NOT
59829: IFFALSE 59664
// end ;
59831: LD_VAR 0 5
59835: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59836: LD_EXP 53
59840: NOT
59841: IFFALSE 59891
59843: GO 59845
59845: DISABLE
// begin initHack := true ;
59846: LD_ADDR_EXP 53
59850: PUSH
59851: LD_INT 1
59853: ST_TO_ADDR
// hackTanks := [ ] ;
59854: LD_ADDR_EXP 54
59858: PUSH
59859: EMPTY
59860: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59861: LD_ADDR_EXP 55
59865: PUSH
59866: EMPTY
59867: ST_TO_ADDR
// hackLimit := 3 ;
59868: LD_ADDR_EXP 56
59872: PUSH
59873: LD_INT 3
59875: ST_TO_ADDR
// hackDist := 12 ;
59876: LD_ADDR_EXP 57
59880: PUSH
59881: LD_INT 12
59883: ST_TO_ADDR
// hackCounter := [ ] ;
59884: LD_ADDR_EXP 58
59888: PUSH
59889: EMPTY
59890: ST_TO_ADDR
// end ;
59891: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59892: LD_EXP 53
59896: IFFALSE 59914
59898: PUSH
59899: LD_INT 34
59901: PUSH
59902: LD_INT 99
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PPUSH
59909: CALL_OW 69
59913: AND
59914: IFFALSE 60167
59916: GO 59918
59918: DISABLE
59919: LD_INT 0
59921: PPUSH
59922: PPUSH
// begin enable ;
59923: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59924: LD_ADDR_VAR 0 1
59928: PUSH
59929: LD_INT 34
59931: PUSH
59932: LD_INT 99
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PPUSH
59939: CALL_OW 69
59943: PUSH
59944: FOR_IN
59945: IFFALSE 60165
// begin if not i in hackTanks then
59947: LD_VAR 0 1
59951: PUSH
59952: LD_EXP 54
59956: IN
59957: NOT
59958: IFFALSE 60041
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59960: LD_ADDR_EXP 54
59964: PUSH
59965: LD_EXP 54
59969: PPUSH
59970: LD_EXP 54
59974: PUSH
59975: LD_INT 1
59977: PLUS
59978: PPUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: CALL_OW 1
59988: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59989: LD_ADDR_EXP 55
59993: PUSH
59994: LD_EXP 55
59998: PPUSH
59999: LD_EXP 55
60003: PUSH
60004: LD_INT 1
60006: PLUS
60007: PPUSH
60008: EMPTY
60009: PPUSH
60010: CALL_OW 1
60014: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60015: LD_ADDR_EXP 58
60019: PUSH
60020: LD_EXP 58
60024: PPUSH
60025: LD_EXP 58
60029: PUSH
60030: LD_INT 1
60032: PLUS
60033: PPUSH
60034: EMPTY
60035: PPUSH
60036: CALL_OW 1
60040: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60041: LD_VAR 0 1
60045: PPUSH
60046: CALL_OW 302
60050: NOT
60051: IFFALSE 60064
// begin HackUnlinkAll ( i ) ;
60053: LD_VAR 0 1
60057: PPUSH
60058: CALL 60170 0 1
// continue ;
60062: GO 59944
// end ; HackCheckCapturedStatus ( i ) ;
60064: LD_VAR 0 1
60068: PPUSH
60069: CALL 60615 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60073: LD_ADDR_VAR 0 2
60077: PUSH
60078: LD_INT 81
60080: PUSH
60081: LD_VAR 0 1
60085: PPUSH
60086: CALL_OW 255
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 33
60097: PUSH
60098: LD_INT 3
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 91
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_EXP 57
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 50
60125: PUSH
60126: EMPTY
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: PPUSH
60135: CALL_OW 69
60139: ST_TO_ADDR
// if not tmp then
60140: LD_VAR 0 2
60144: NOT
60145: IFFALSE 60149
// continue ;
60147: GO 59944
// HackLink ( i , tmp ) ;
60149: LD_VAR 0 1
60153: PPUSH
60154: LD_VAR 0 2
60158: PPUSH
60159: CALL 60306 0 2
// end ;
60163: GO 59944
60165: POP
60166: POP
// end ;
60167: PPOPN 2
60169: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60170: LD_INT 0
60172: PPUSH
60173: PPUSH
60174: PPUSH
// if not hack in hackTanks then
60175: LD_VAR 0 1
60179: PUSH
60180: LD_EXP 54
60184: IN
60185: NOT
60186: IFFALSE 60190
// exit ;
60188: GO 60301
// index := GetElementIndex ( hackTanks , hack ) ;
60190: LD_ADDR_VAR 0 4
60194: PUSH
60195: LD_EXP 54
60199: PPUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: CALL 8541 0 2
60209: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60210: LD_EXP 55
60214: PUSH
60215: LD_VAR 0 4
60219: ARRAY
60220: IFFALSE 60301
// begin for i in hackTanksCaptured [ index ] do
60222: LD_ADDR_VAR 0 3
60226: PUSH
60227: LD_EXP 55
60231: PUSH
60232: LD_VAR 0 4
60236: ARRAY
60237: PUSH
60238: FOR_IN
60239: IFFALSE 60265
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60241: LD_VAR 0 3
60245: PUSH
60246: LD_INT 1
60248: ARRAY
60249: PPUSH
60250: LD_VAR 0 3
60254: PUSH
60255: LD_INT 2
60257: ARRAY
60258: PPUSH
60259: CALL_OW 235
60263: GO 60238
60265: POP
60266: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60267: LD_ADDR_EXP 55
60271: PUSH
60272: LD_EXP 55
60276: PPUSH
60277: LD_VAR 0 4
60281: PPUSH
60282: EMPTY
60283: PPUSH
60284: CALL_OW 1
60288: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60289: LD_VAR 0 1
60293: PPUSH
60294: LD_INT 0
60296: PPUSH
60297: CALL_OW 505
// end ; end ;
60301: LD_VAR 0 2
60305: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60306: LD_INT 0
60308: PPUSH
60309: PPUSH
60310: PPUSH
// if not hack in hackTanks or not vehicles then
60311: LD_VAR 0 1
60315: PUSH
60316: LD_EXP 54
60320: IN
60321: NOT
60322: IFTRUE 60331
60324: PUSH
60325: LD_VAR 0 2
60329: NOT
60330: OR
60331: IFFALSE 60335
// exit ;
60333: GO 60610
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60335: LD_ADDR_VAR 0 2
60339: PUSH
60340: LD_VAR 0 1
60344: PPUSH
60345: LD_VAR 0 2
60349: PPUSH
60350: LD_INT 1
60352: PPUSH
60353: LD_INT 1
60355: PPUSH
60356: CALL 9193 0 4
60360: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60361: LD_ADDR_VAR 0 5
60365: PUSH
60366: LD_EXP 54
60370: PPUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: CALL 8541 0 2
60380: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60381: LD_EXP 55
60385: PUSH
60386: LD_VAR 0 5
60390: ARRAY
60391: PUSH
60392: LD_EXP 56
60396: LESS
60397: IFFALSE 60586
// begin for i := 1 to vehicles do
60399: LD_ADDR_VAR 0 4
60403: PUSH
60404: DOUBLE
60405: LD_INT 1
60407: DEC
60408: ST_TO_ADDR
60409: LD_VAR 0 2
60413: PUSH
60414: FOR_TO
60415: IFFALSE 60584
// begin if hackTanksCaptured [ index ] = hackLimit then
60417: LD_EXP 55
60421: PUSH
60422: LD_VAR 0 5
60426: ARRAY
60427: PUSH
60428: LD_EXP 56
60432: EQUAL
60433: IFFALSE 60437
// break ;
60435: GO 60584
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60437: LD_ADDR_EXP 58
60441: PUSH
60442: LD_EXP 58
60446: PPUSH
60447: LD_VAR 0 5
60451: PPUSH
60452: LD_EXP 58
60456: PUSH
60457: LD_VAR 0 5
60461: ARRAY
60462: PUSH
60463: LD_INT 1
60465: PLUS
60466: PPUSH
60467: CALL_OW 1
60471: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60472: LD_ADDR_EXP 55
60476: PUSH
60477: LD_EXP 55
60481: PPUSH
60482: LD_VAR 0 5
60486: PUSH
60487: LD_EXP 55
60491: PUSH
60492: LD_VAR 0 5
60496: ARRAY
60497: PUSH
60498: LD_INT 1
60500: PLUS
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PPUSH
60506: LD_VAR 0 2
60510: PUSH
60511: LD_VAR 0 4
60515: ARRAY
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_VAR 0 4
60526: ARRAY
60527: PPUSH
60528: CALL_OW 255
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PPUSH
60537: CALL 8758 0 3
60541: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60542: LD_VAR 0 2
60546: PUSH
60547: LD_VAR 0 4
60551: ARRAY
60552: PPUSH
60553: LD_VAR 0 1
60557: PPUSH
60558: CALL_OW 255
60562: PPUSH
60563: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60567: LD_VAR 0 2
60571: PUSH
60572: LD_VAR 0 4
60576: ARRAY
60577: PPUSH
60578: CALL_OW 141
// end ;
60582: GO 60414
60584: POP
60585: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60586: LD_VAR 0 1
60590: PPUSH
60591: LD_EXP 55
60595: PUSH
60596: LD_VAR 0 5
60600: ARRAY
60601: PUSH
60602: LD_INT 0
60604: PLUS
60605: PPUSH
60606: CALL_OW 505
// end ;
60610: LD_VAR 0 3
60614: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60615: LD_INT 0
60617: PPUSH
60618: PPUSH
60619: PPUSH
60620: PPUSH
// if not hack in hackTanks then
60621: LD_VAR 0 1
60625: PUSH
60626: LD_EXP 54
60630: IN
60631: NOT
60632: IFFALSE 60636
// exit ;
60634: GO 60880
// index := GetElementIndex ( hackTanks , hack ) ;
60636: LD_ADDR_VAR 0 4
60640: PUSH
60641: LD_EXP 54
60645: PPUSH
60646: LD_VAR 0 1
60650: PPUSH
60651: CALL 8541 0 2
60655: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60656: LD_ADDR_VAR 0 3
60660: PUSH
60661: DOUBLE
60662: LD_EXP 55
60666: PUSH
60667: LD_VAR 0 4
60671: ARRAY
60672: INC
60673: ST_TO_ADDR
60674: LD_INT 1
60676: PUSH
60677: FOR_DOWNTO
60678: IFFALSE 60854
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60680: LD_ADDR_VAR 0 5
60684: PUSH
60685: LD_EXP 55
60689: PUSH
60690: LD_VAR 0 4
60694: ARRAY
60695: PUSH
60696: LD_VAR 0 3
60700: ARRAY
60701: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60702: LD_VAR 0 5
60706: PUSH
60707: LD_INT 1
60709: ARRAY
60710: PPUSH
60711: CALL_OW 302
60715: NOT
60716: IFTRUE 60744
60718: PUSH
60719: LD_VAR 0 5
60723: PUSH
60724: LD_INT 1
60726: ARRAY
60727: PPUSH
60728: CALL_OW 255
60732: PUSH
60733: LD_VAR 0 1
60737: PPUSH
60738: CALL_OW 255
60742: NONEQUAL
60743: OR
60744: IFFALSE 60852
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60746: LD_VAR 0 5
60750: PUSH
60751: LD_INT 1
60753: ARRAY
60754: PPUSH
60755: CALL_OW 305
60759: IFFALSE 60787
60761: PUSH
60762: LD_VAR 0 5
60766: PUSH
60767: LD_INT 1
60769: ARRAY
60770: PPUSH
60771: CALL_OW 255
60775: PUSH
60776: LD_VAR 0 1
60780: PPUSH
60781: CALL_OW 255
60785: EQUAL
60786: AND
60787: IFFALSE 60811
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60789: LD_VAR 0 5
60793: PUSH
60794: LD_INT 1
60796: ARRAY
60797: PPUSH
60798: LD_VAR 0 5
60802: PUSH
60803: LD_INT 2
60805: ARRAY
60806: PPUSH
60807: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60811: LD_ADDR_EXP 55
60815: PUSH
60816: LD_EXP 55
60820: PPUSH
60821: LD_VAR 0 4
60825: PPUSH
60826: LD_EXP 55
60830: PUSH
60831: LD_VAR 0 4
60835: ARRAY
60836: PPUSH
60837: LD_VAR 0 3
60841: PPUSH
60842: CALL_OW 3
60846: PPUSH
60847: CALL_OW 1
60851: ST_TO_ADDR
// end ; end ;
60852: GO 60677
60854: POP
60855: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60856: LD_VAR 0 1
60860: PPUSH
60861: LD_EXP 55
60865: PUSH
60866: LD_VAR 0 4
60870: ARRAY
60871: PUSH
60872: LD_INT 0
60874: PLUS
60875: PPUSH
60876: CALL_OW 505
// end ;
60880: LD_VAR 0 2
60884: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60885: LD_INT 0
60887: PPUSH
60888: PPUSH
60889: PPUSH
60890: PPUSH
// if not hack in hackTanks then
60891: LD_VAR 0 1
60895: PUSH
60896: LD_EXP 54
60900: IN
60901: NOT
60902: IFFALSE 60906
// exit ;
60904: GO 60991
// index := GetElementIndex ( hackTanks , hack ) ;
60906: LD_ADDR_VAR 0 5
60910: PUSH
60911: LD_EXP 54
60915: PPUSH
60916: LD_VAR 0 1
60920: PPUSH
60921: CALL 8541 0 2
60925: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60926: LD_ADDR_VAR 0 4
60930: PUSH
60931: DOUBLE
60932: LD_INT 1
60934: DEC
60935: ST_TO_ADDR
60936: LD_EXP 55
60940: PUSH
60941: LD_VAR 0 5
60945: ARRAY
60946: PUSH
60947: FOR_TO
60948: IFFALSE 60989
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60950: LD_EXP 55
60954: PUSH
60955: LD_VAR 0 5
60959: ARRAY
60960: PUSH
60961: LD_VAR 0 4
60965: ARRAY
60966: PUSH
60967: LD_INT 1
60969: ARRAY
60970: PUSH
60971: LD_VAR 0 2
60975: EQUAL
60976: IFFALSE 60987
// KillUnit ( vehicle ) ;
60978: LD_VAR 0 2
60982: PPUSH
60983: CALL_OW 66
60987: GO 60947
60989: POP
60990: POP
// end ;
60991: LD_VAR 0 3
60995: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60996: LD_EXP 59
61000: NOT
61001: IFFALSE 61134
61003: GO 61005
61005: DISABLE
61006: LD_INT 0
61008: PPUSH
// begin initMiner := true ;
61009: LD_ADDR_EXP 59
61013: PUSH
61014: LD_INT 1
61016: ST_TO_ADDR
// minersList := [ ] ;
61017: LD_ADDR_EXP 60
61021: PUSH
61022: EMPTY
61023: ST_TO_ADDR
// minerMinesList := [ ] ;
61024: LD_ADDR_EXP 61
61028: PUSH
61029: EMPTY
61030: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
61031: LD_ADDR_EXP 62
61035: PUSH
61036: LD_INT 10
61038: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61039: LD_ADDR_VAR 0 1
61043: PUSH
61044: LD_INT 34
61046: PUSH
61047: LD_INT 81
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PPUSH
61054: CALL_OW 69
61058: PUSH
61059: FOR_IN
61060: IFFALSE 61132
// begin if not i in minersList then
61062: LD_VAR 0 1
61066: PUSH
61067: LD_EXP 60
61071: IN
61072: NOT
61073: IFFALSE 61130
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61075: LD_ADDR_EXP 60
61079: PUSH
61080: LD_EXP 60
61084: PPUSH
61085: LD_EXP 60
61089: PUSH
61090: LD_INT 1
61092: PLUS
61093: PPUSH
61094: LD_VAR 0 1
61098: PPUSH
61099: CALL_OW 1
61103: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61104: LD_ADDR_EXP 61
61108: PUSH
61109: LD_EXP 61
61113: PPUSH
61114: LD_EXP 61
61118: PUSH
61119: LD_INT 1
61121: PLUS
61122: PPUSH
61123: EMPTY
61124: PPUSH
61125: CALL_OW 1
61129: ST_TO_ADDR
// end end ;
61130: GO 61059
61132: POP
61133: POP
// end ;
61134: PPOPN 1
61136: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
61137: LD_EXP 59
61141: IFFALSE 61172
61143: PUSH
61144: LD_EXP 61
61148: PPUSH
61149: CALL 5840 0 1
61153: IFTRUE 61171
61155: PUSH
61156: LD_INT 34
61158: PUSH
61159: LD_INT 81
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PPUSH
61166: CALL_OW 69
61170: OR
61171: AND
61172: IFFALSE 61692
61174: GO 61176
61176: DISABLE
61177: LD_INT 0
61179: PPUSH
61180: PPUSH
61181: PPUSH
61182: PPUSH
// begin enable ;
61183: ENABLE
// for i := minerMinesList downto 1 do
61184: LD_ADDR_VAR 0 1
61188: PUSH
61189: DOUBLE
61190: LD_EXP 61
61194: INC
61195: ST_TO_ADDR
61196: LD_INT 1
61198: PUSH
61199: FOR_DOWNTO
61200: IFFALSE 61690
// begin side := GetSide ( minersList [ i ] ) ;
61202: LD_ADDR_VAR 0 3
61206: PUSH
61207: LD_EXP 60
61211: PUSH
61212: LD_VAR 0 1
61216: ARRAY
61217: PPUSH
61218: CALL_OW 255
61222: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
61223: LD_EXP 60
61227: PUSH
61228: LD_VAR 0 1
61232: ARRAY
61233: PPUSH
61234: CALL_OW 300
61238: IFFALSE 61259
61240: PUSH
61241: LD_VAR 0 3
61245: PUSH
61246: LD_OWVAR 2
61250: PUSH
61251: LD_INT 9
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: IN
61258: AND
61259: IFFALSE 61292
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
61261: LD_EXP 60
61265: PUSH
61266: LD_VAR 0 1
61270: ARRAY
61271: PPUSH
61272: LD_EXP 61
61276: PUSH
61277: LD_VAR 0 1
61281: ARRAY
61282: PPUSH
61283: CALL 5840 0 1
61287: PPUSH
61288: CALL_OW 505
// if not minerMinesList [ i ] then
61292: LD_EXP 61
61296: PUSH
61297: LD_VAR 0 1
61301: ARRAY
61302: NOT
61303: IFFALSE 61307
// continue ;
61305: GO 61199
// for j := minerMinesList [ i ] downto 1 do
61307: LD_ADDR_VAR 0 2
61311: PUSH
61312: DOUBLE
61313: LD_EXP 61
61317: PUSH
61318: LD_VAR 0 1
61322: ARRAY
61323: INC
61324: ST_TO_ADDR
61325: LD_INT 1
61327: PUSH
61328: FOR_DOWNTO
61329: IFFALSE 61686
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
61331: LD_EXP 60
61335: PUSH
61336: LD_VAR 0 1
61340: ARRAY
61341: PPUSH
61342: CALL_OW 301
61346: IFTRUE 61366
61348: PUSH
61349: LD_EXP 60
61353: PUSH
61354: LD_VAR 0 1
61358: ARRAY
61359: PPUSH
61360: CALL_OW 305
61364: NOT
61365: OR
61366: IFFALSE 61457
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61368: LD_EXP 61
61372: PUSH
61373: LD_VAR 0 1
61377: ARRAY
61378: PUSH
61379: LD_VAR 0 2
61383: ARRAY
61384: PUSH
61385: LD_INT 1
61387: ARRAY
61388: PPUSH
61389: LD_EXP 61
61393: PUSH
61394: LD_VAR 0 1
61398: ARRAY
61399: PUSH
61400: LD_VAR 0 2
61404: ARRAY
61405: PUSH
61406: LD_INT 2
61408: ARRAY
61409: PPUSH
61410: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61414: LD_ADDR_EXP 61
61418: PUSH
61419: LD_EXP 61
61423: PPUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: LD_EXP 61
61433: PUSH
61434: LD_VAR 0 1
61438: ARRAY
61439: PPUSH
61440: LD_VAR 0 2
61444: PPUSH
61445: CALL_OW 3
61449: PPUSH
61450: CALL_OW 1
61454: ST_TO_ADDR
// continue ;
61455: GO 61328
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61457: LD_ADDR_VAR 0 4
61461: PUSH
61462: LD_EXP 61
61466: PUSH
61467: LD_VAR 0 1
61471: ARRAY
61472: PUSH
61473: LD_VAR 0 2
61477: ARRAY
61478: PUSH
61479: LD_INT 1
61481: ARRAY
61482: PPUSH
61483: LD_EXP 61
61487: PUSH
61488: LD_VAR 0 1
61492: ARRAY
61493: PUSH
61494: LD_VAR 0 2
61498: ARRAY
61499: PUSH
61500: LD_INT 2
61502: ARRAY
61503: PPUSH
61504: CALL_OW 428
61508: ST_TO_ADDR
// if not tmp then
61509: LD_VAR 0 4
61513: NOT
61514: IFFALSE 61518
// continue ;
61516: GO 61328
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61518: LD_VAR 0 4
61522: PUSH
61523: LD_INT 81
61525: PUSH
61526: LD_VAR 0 3
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PPUSH
61535: CALL_OW 69
61539: IN
61540: IFFALSE 61590
61542: PUSH
61543: LD_EXP 61
61547: PUSH
61548: LD_VAR 0 1
61552: ARRAY
61553: PUSH
61554: LD_VAR 0 2
61558: ARRAY
61559: PUSH
61560: LD_INT 1
61562: ARRAY
61563: PPUSH
61564: LD_EXP 61
61568: PUSH
61569: LD_VAR 0 1
61573: ARRAY
61574: PUSH
61575: LD_VAR 0 2
61579: ARRAY
61580: PUSH
61581: LD_INT 2
61583: ARRAY
61584: PPUSH
61585: CALL_OW 458
61589: AND
61590: IFFALSE 61684
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61592: LD_EXP 61
61596: PUSH
61597: LD_VAR 0 1
61601: ARRAY
61602: PUSH
61603: LD_VAR 0 2
61607: ARRAY
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PPUSH
61613: LD_EXP 61
61617: PUSH
61618: LD_VAR 0 1
61622: ARRAY
61623: PUSH
61624: LD_VAR 0 2
61628: ARRAY
61629: PUSH
61630: LD_INT 2
61632: ARRAY
61633: PPUSH
61634: LD_VAR 0 3
61638: PPUSH
61639: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61643: LD_ADDR_EXP 61
61647: PUSH
61648: LD_EXP 61
61652: PPUSH
61653: LD_VAR 0 1
61657: PPUSH
61658: LD_EXP 61
61662: PUSH
61663: LD_VAR 0 1
61667: ARRAY
61668: PPUSH
61669: LD_VAR 0 2
61673: PPUSH
61674: CALL_OW 3
61678: PPUSH
61679: CALL_OW 1
61683: ST_TO_ADDR
// end ; end ;
61684: GO 61328
61686: POP
61687: POP
// end ;
61688: GO 61199
61690: POP
61691: POP
// end ;
61692: PPOPN 4
61694: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61695: LD_INT 0
61697: PPUSH
61698: PPUSH
61699: PPUSH
61700: PPUSH
// result := false ;
61701: LD_ADDR_VAR 0 4
61705: PUSH
61706: LD_INT 0
61708: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61709: LD_VAR 0 1
61713: PPUSH
61714: CALL_OW 264
61718: PUSH
61719: LD_INT 81
61721: EQUAL
61722: NOT
61723: IFFALSE 61727
// exit ;
61725: GO 62097
// side := GetSide ( unit ) ;
61727: LD_ADDR_VAR 0 6
61731: PUSH
61732: LD_VAR 0 1
61736: PPUSH
61737: CALL_OW 255
61741: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: LD_EXP 60
61751: PPUSH
61752: LD_VAR 0 1
61756: PPUSH
61757: CALL 8541 0 2
61761: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61762: LD_EXP 61
61766: PUSH
61767: LD_VAR 0 5
61771: ARRAY
61772: PUSH
61773: LD_EXP 62
61777: GREATEREQUAL
61778: IFFALSE 61782
// exit ;
61780: GO 62097
// ComMoveXY ( unit , x , y ) ;
61782: LD_VAR 0 1
61786: PPUSH
61787: LD_VAR 0 2
61791: PPUSH
61792: LD_VAR 0 3
61796: PPUSH
61797: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61801: LD_INT 35
61803: PPUSH
61804: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61808: LD_VAR 0 1
61812: PPUSH
61813: LD_VAR 0 2
61817: PPUSH
61818: LD_VAR 0 3
61822: PPUSH
61823: CALL 40597 0 3
61827: NOT
61828: IFFALSE 61841
61830: PUSH
61831: LD_VAR 0 1
61835: PPUSH
61836: CALL_OW 314
61840: AND
61841: IFFALSE 61845
// exit ;
61843: GO 62097
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61845: LD_VAR 0 2
61849: PPUSH
61850: LD_VAR 0 3
61854: PPUSH
61855: CALL_OW 428
61859: PUSH
61860: LD_VAR 0 1
61864: EQUAL
61865: IFFALSE 61879
61867: PUSH
61868: LD_VAR 0 1
61872: PPUSH
61873: CALL_OW 314
61877: NOT
61878: AND
61879: IFFALSE 61801
// if MineAtPos ( x , y ) then
61881: LD_VAR 0 2
61885: PPUSH
61886: LD_VAR 0 3
61890: PPUSH
61891: CALL_OW 458
61895: IFFALSE 61899
// exit ;
61897: GO 62097
// if your_side = side then
61899: LD_OWVAR 2
61903: PUSH
61904: LD_VAR 0 6
61908: EQUAL
61909: IFFALSE 61928
// PlaySoundXY ( x , y , PlantMine ) ;
61911: LD_VAR 0 2
61915: PPUSH
61916: LD_VAR 0 3
61920: PPUSH
61921: LD_STRING PlantMine
61923: PPUSH
61924: CALL_OW 366
// repeat wait ( 1 ) ;
61928: LD_INT 1
61930: PPUSH
61931: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61935: LD_VAR 0 2
61939: PPUSH
61940: LD_VAR 0 3
61944: PPUSH
61945: LD_VAR 0 6
61949: PPUSH
61950: LD_INT 0
61952: PPUSH
61953: CALL_OW 454
61957: IFFALSE 61928
// if MineAtPos ( x , y ) then
61959: LD_VAR 0 2
61963: PPUSH
61964: LD_VAR 0 3
61968: PPUSH
61969: CALL_OW 458
61973: IFFALSE 62089
// begin for i in minerMinesList [ index ] do
61975: LD_ADDR_VAR 0 7
61979: PUSH
61980: LD_EXP 61
61984: PUSH
61985: LD_VAR 0 5
61989: ARRAY
61990: PUSH
61991: FOR_IN
61992: IFFALSE 62034
// if i [ 1 ] = x and i [ 2 ] = y then
61994: LD_VAR 0 7
61998: PUSH
61999: LD_INT 1
62001: ARRAY
62002: PUSH
62003: LD_VAR 0 2
62007: EQUAL
62008: IFFALSE 62026
62010: PUSH
62011: LD_VAR 0 7
62015: PUSH
62016: LD_INT 2
62018: ARRAY
62019: PUSH
62020: LD_VAR 0 3
62024: EQUAL
62025: AND
62026: IFFALSE 62032
// exit ;
62028: POP
62029: POP
62030: GO 62097
62032: GO 61991
62034: POP
62035: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62036: LD_ADDR_EXP 61
62040: PUSH
62041: LD_EXP 61
62045: PPUSH
62046: LD_VAR 0 5
62050: PUSH
62051: LD_EXP 61
62055: PUSH
62056: LD_VAR 0 5
62060: ARRAY
62061: PUSH
62062: LD_INT 1
62064: PLUS
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PPUSH
62070: LD_VAR 0 2
62074: PUSH
62075: LD_VAR 0 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PPUSH
62084: CALL 8758 0 3
62088: ST_TO_ADDR
// end ; result := true ;
62089: LD_ADDR_VAR 0 4
62093: PUSH
62094: LD_INT 1
62096: ST_TO_ADDR
// end ;
62097: LD_VAR 0 4
62101: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62102: LD_INT 0
62104: PPUSH
62105: PPUSH
62106: PPUSH
// if not unit in minersList then
62107: LD_VAR 0 1
62111: PUSH
62112: LD_EXP 60
62116: IN
62117: NOT
62118: IFFALSE 62122
// exit ;
62120: GO 62329
// index := GetElementIndex ( minersList , unit ) ;
62122: LD_ADDR_VAR 0 6
62126: PUSH
62127: LD_EXP 60
62131: PPUSH
62132: LD_VAR 0 1
62136: PPUSH
62137: CALL 8541 0 2
62141: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62142: LD_ADDR_VAR 0 5
62146: PUSH
62147: DOUBLE
62148: LD_EXP 61
62152: PUSH
62153: LD_VAR 0 6
62157: ARRAY
62158: INC
62159: ST_TO_ADDR
62160: LD_INT 1
62162: PUSH
62163: FOR_DOWNTO
62164: IFFALSE 62327
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62166: LD_EXP 61
62170: PUSH
62171: LD_VAR 0 6
62175: ARRAY
62176: PUSH
62177: LD_VAR 0 5
62181: ARRAY
62182: PUSH
62183: LD_INT 1
62185: ARRAY
62186: PPUSH
62187: LD_EXP 61
62191: PUSH
62192: LD_VAR 0 6
62196: ARRAY
62197: PUSH
62198: LD_VAR 0 5
62202: ARRAY
62203: PUSH
62204: LD_INT 2
62206: ARRAY
62207: PPUSH
62208: LD_VAR 0 2
62212: PPUSH
62213: LD_VAR 0 3
62217: PPUSH
62218: CALL_OW 298
62222: PUSH
62223: LD_INT 6
62225: LESS
62226: IFFALSE 62325
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62228: LD_EXP 61
62232: PUSH
62233: LD_VAR 0 6
62237: ARRAY
62238: PUSH
62239: LD_VAR 0 5
62243: ARRAY
62244: PUSH
62245: LD_INT 1
62247: ARRAY
62248: PPUSH
62249: LD_EXP 61
62253: PUSH
62254: LD_VAR 0 6
62258: ARRAY
62259: PUSH
62260: LD_VAR 0 5
62264: ARRAY
62265: PUSH
62266: LD_INT 2
62268: ARRAY
62269: PPUSH
62270: LD_VAR 0 1
62274: PPUSH
62275: CALL_OW 255
62279: PPUSH
62280: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62284: LD_ADDR_EXP 61
62288: PUSH
62289: LD_EXP 61
62293: PPUSH
62294: LD_VAR 0 6
62298: PPUSH
62299: LD_EXP 61
62303: PUSH
62304: LD_VAR 0 6
62308: ARRAY
62309: PPUSH
62310: LD_VAR 0 5
62314: PPUSH
62315: CALL_OW 3
62319: PPUSH
62320: CALL_OW 1
62324: ST_TO_ADDR
// end ; end ;
62325: GO 62163
62327: POP
62328: POP
// end ;
62329: LD_VAR 0 4
62333: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62334: LD_INT 0
62336: PPUSH
62337: PPUSH
62338: PPUSH
62339: PPUSH
62340: PPUSH
62341: PPUSH
62342: PPUSH
62343: PPUSH
62344: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62345: LD_VAR 0 1
62349: PPUSH
62350: CALL_OW 264
62354: PUSH
62355: LD_INT 81
62357: EQUAL
62358: NOT
62359: IFTRUE 62374
62361: PUSH
62362: LD_VAR 0 1
62366: PUSH
62367: LD_EXP 60
62371: IN
62372: NOT
62373: OR
62374: IFFALSE 62378
// exit ;
62376: GO 62704
// index := GetElementIndex ( minersList , unit ) ;
62378: LD_ADDR_VAR 0 6
62382: PUSH
62383: LD_EXP 60
62387: PPUSH
62388: LD_VAR 0 1
62392: PPUSH
62393: CALL 8541 0 2
62397: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62398: LD_ADDR_VAR 0 8
62402: PUSH
62403: LD_EXP 62
62407: PUSH
62408: LD_EXP 61
62412: PUSH
62413: LD_VAR 0 6
62417: ARRAY
62418: MINUS
62419: ST_TO_ADDR
// if not minesFreeAmount then
62420: LD_VAR 0 8
62424: NOT
62425: IFFALSE 62429
// exit ;
62427: GO 62704
// tmp := [ ] ;
62429: LD_ADDR_VAR 0 7
62433: PUSH
62434: EMPTY
62435: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62436: LD_ADDR_VAR 0 5
62440: PUSH
62441: DOUBLE
62442: LD_INT 1
62444: DEC
62445: ST_TO_ADDR
62446: LD_VAR 0 8
62450: PUSH
62451: FOR_TO
62452: IFFALSE 62651
// begin _d := rand ( 0 , 5 ) ;
62454: LD_ADDR_VAR 0 11
62458: PUSH
62459: LD_INT 0
62461: PPUSH
62462: LD_INT 5
62464: PPUSH
62465: CALL_OW 12
62469: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62470: LD_ADDR_VAR 0 12
62474: PUSH
62475: LD_INT 2
62477: PPUSH
62478: LD_INT 6
62480: PPUSH
62481: CALL_OW 12
62485: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62486: LD_ADDR_VAR 0 9
62490: PUSH
62491: LD_VAR 0 2
62495: PPUSH
62496: LD_VAR 0 11
62500: PPUSH
62501: LD_VAR 0 12
62505: PPUSH
62506: CALL_OW 272
62510: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62511: LD_ADDR_VAR 0 10
62515: PUSH
62516: LD_VAR 0 3
62520: PPUSH
62521: LD_VAR 0 11
62525: PPUSH
62526: LD_VAR 0 12
62530: PPUSH
62531: CALL_OW 273
62535: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62536: LD_VAR 0 9
62540: PPUSH
62541: LD_VAR 0 10
62545: PPUSH
62546: CALL_OW 488
62550: IFFALSE 62574
62552: PUSH
62553: LD_VAR 0 9
62557: PUSH
62558: LD_VAR 0 10
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_VAR 0 7
62571: IN
62572: NOT
62573: AND
62574: IFFALSE 62593
62576: PUSH
62577: LD_VAR 0 9
62581: PPUSH
62582: LD_VAR 0 10
62586: PPUSH
62587: CALL_OW 458
62591: NOT
62592: AND
62593: IFFALSE 62635
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62595: LD_ADDR_VAR 0 7
62599: PUSH
62600: LD_VAR 0 7
62604: PPUSH
62605: LD_VAR 0 7
62609: PUSH
62610: LD_INT 1
62612: PLUS
62613: PPUSH
62614: LD_VAR 0 9
62618: PUSH
62619: LD_VAR 0 10
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PPUSH
62628: CALL_OW 1
62632: ST_TO_ADDR
62633: GO 62649
// i := i - 1 ;
62635: LD_ADDR_VAR 0 5
62639: PUSH
62640: LD_VAR 0 5
62644: PUSH
62645: LD_INT 1
62647: MINUS
62648: ST_TO_ADDR
// end ;
62649: GO 62451
62651: POP
62652: POP
// for i in tmp do
62653: LD_ADDR_VAR 0 5
62657: PUSH
62658: LD_VAR 0 7
62662: PUSH
62663: FOR_IN
62664: IFFALSE 62702
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62666: LD_VAR 0 1
62670: PPUSH
62671: LD_VAR 0 5
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PPUSH
62680: LD_VAR 0 5
62684: PUSH
62685: LD_INT 2
62687: ARRAY
62688: PPUSH
62689: CALL 61695 0 3
62693: NOT
62694: IFFALSE 62700
// exit ;
62696: POP
62697: POP
62698: GO 62704
62700: GO 62663
62702: POP
62703: POP
// end ;
62704: LD_VAR 0 4
62708: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62709: LD_INT 0
62711: PPUSH
62712: PPUSH
62713: PPUSH
62714: PPUSH
62715: PPUSH
62716: PPUSH
62717: PPUSH
62718: PPUSH
62719: PPUSH
// if GetClass ( unit ) <> class_sniper then
62720: LD_VAR 0 1
62724: PPUSH
62725: CALL_OW 257
62729: PUSH
62730: LD_INT 5
62732: NONEQUAL
62733: IFFALSE 62737
// exit ;
62735: GO 63207
// dist := 8 ;
62737: LD_ADDR_VAR 0 5
62741: PUSH
62742: LD_INT 8
62744: ST_TO_ADDR
// viewRange := 12 ;
62745: LD_ADDR_VAR 0 8
62749: PUSH
62750: LD_INT 12
62752: ST_TO_ADDR
// side := GetSide ( unit ) ;
62753: LD_ADDR_VAR 0 6
62757: PUSH
62758: LD_VAR 0 1
62762: PPUSH
62763: CALL_OW 255
62767: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62768: LD_INT 61
62770: PPUSH
62771: LD_VAR 0 6
62775: PPUSH
62776: CALL_OW 321
62780: PUSH
62781: LD_INT 2
62783: EQUAL
62784: IFFALSE 62794
// viewRange := 16 ;
62786: LD_ADDR_VAR 0 8
62790: PUSH
62791: LD_INT 16
62793: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62794: LD_VAR 0 1
62798: PPUSH
62799: LD_VAR 0 2
62803: PPUSH
62804: LD_VAR 0 3
62808: PPUSH
62809: CALL_OW 297
62813: PUSH
62814: LD_VAR 0 5
62818: GREATER
62819: IFFALSE 62898
// begin ComMoveXY ( unit , x , y ) ;
62821: LD_VAR 0 1
62825: PPUSH
62826: LD_VAR 0 2
62830: PPUSH
62831: LD_VAR 0 3
62835: PPUSH
62836: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62840: LD_INT 35
62842: PPUSH
62843: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62847: LD_VAR 0 1
62851: PPUSH
62852: LD_VAR 0 2
62856: PPUSH
62857: LD_VAR 0 3
62861: PPUSH
62862: CALL 40597 0 3
62866: NOT
62867: IFFALSE 62871
// exit ;
62869: GO 63207
// until GetDistUnitXY ( unit , x , y ) < dist ;
62871: LD_VAR 0 1
62875: PPUSH
62876: LD_VAR 0 2
62880: PPUSH
62881: LD_VAR 0 3
62885: PPUSH
62886: CALL_OW 297
62890: PUSH
62891: LD_VAR 0 5
62895: LESS
62896: IFFALSE 62840
// end ; ComTurnXY ( unit , x , y ) ;
62898: LD_VAR 0 1
62902: PPUSH
62903: LD_VAR 0 2
62907: PPUSH
62908: LD_VAR 0 3
62912: PPUSH
62913: CALL_OW 118
// repeat if Multiplayer then
62917: LD_OWVAR 4
62921: IFFALSE 62932
// wait ( 35 ) else
62923: LD_INT 35
62925: PPUSH
62926: CALL_OW 67
62930: GO 62939
// wait ( 5 ) ;
62932: LD_INT 5
62934: PPUSH
62935: CALL_OW 67
// _d := GetDir ( unit ) ;
62939: LD_ADDR_VAR 0 11
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: CALL_OW 254
62953: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62954: LD_ADDR_VAR 0 7
62958: PUSH
62959: LD_VAR 0 1
62963: PPUSH
62964: CALL_OW 250
62968: PPUSH
62969: LD_VAR 0 1
62973: PPUSH
62974: CALL_OW 251
62978: PPUSH
62979: LD_VAR 0 2
62983: PPUSH
62984: LD_VAR 0 3
62988: PPUSH
62989: CALL 43233 0 4
62993: ST_TO_ADDR
// until dir = _d ;
62994: LD_VAR 0 7
62998: PUSH
62999: LD_VAR 0 11
63003: EQUAL
63004: IFFALSE 62917
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63006: LD_ADDR_VAR 0 9
63010: PUSH
63011: LD_VAR 0 1
63015: PPUSH
63016: CALL_OW 250
63020: PPUSH
63021: LD_VAR 0 7
63025: PPUSH
63026: LD_VAR 0 5
63030: PPUSH
63031: CALL_OW 272
63035: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63036: LD_ADDR_VAR 0 10
63040: PUSH
63041: LD_VAR 0 1
63045: PPUSH
63046: CALL_OW 251
63050: PPUSH
63051: LD_VAR 0 7
63055: PPUSH
63056: LD_VAR 0 5
63060: PPUSH
63061: CALL_OW 273
63065: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63066: LD_VAR 0 9
63070: PPUSH
63071: LD_VAR 0 10
63075: PPUSH
63076: CALL_OW 488
63080: NOT
63081: IFFALSE 63085
// exit ;
63083: GO 63207
// ComAnimCustom ( unit , 1 ) ;
63085: LD_VAR 0 1
63089: PPUSH
63090: LD_INT 1
63092: PPUSH
63093: CALL_OW 592
// p := 0 ;
63097: LD_ADDR_VAR 0 12
63101: PUSH
63102: LD_INT 0
63104: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63105: LD_VAR 0 9
63109: PPUSH
63110: LD_VAR 0 10
63114: PPUSH
63115: LD_VAR 0 6
63119: PPUSH
63120: LD_VAR 0 8
63124: PPUSH
63125: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63129: LD_INT 35
63131: PPUSH
63132: CALL_OW 67
// p := Inc ( p ) ;
63136: LD_ADDR_VAR 0 12
63140: PUSH
63141: LD_VAR 0 12
63145: PPUSH
63146: CALL 43189 0 1
63150: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63151: LD_VAR 0 12
63155: PUSH
63156: LD_INT 3
63158: EQUAL
63159: IFTRUE 63173
63161: PUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: CALL_OW 302
63171: NOT
63172: OR
63173: IFTRUE 63186
63175: PUSH
63176: LD_VAR 0 1
63180: PPUSH
63181: CALL_OW 301
63185: OR
63186: IFFALSE 63129
// RemoveSeeing ( _x , _y , side ) ;
63188: LD_VAR 0 9
63192: PPUSH
63193: LD_VAR 0 10
63197: PPUSH
63198: LD_VAR 0 6
63202: PPUSH
63203: CALL_OW 331
// end ;
63207: LD_VAR 0 4
63211: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
63212: LD_INT 0
63214: PPUSH
63215: PPUSH
63216: PPUSH
63217: PPUSH
63218: PPUSH
63219: PPUSH
63220: PPUSH
63221: PPUSH
63222: PPUSH
63223: PPUSH
63224: PPUSH
// if not unit then
63225: LD_VAR 0 1
63229: NOT
63230: IFFALSE 63234
// exit ;
63232: GO 63505
// side := GetSide ( unit ) ;
63234: LD_ADDR_VAR 0 3
63238: PUSH
63239: LD_VAR 0 1
63243: PPUSH
63244: CALL_OW 255
63248: ST_TO_ADDR
// x := GetX ( unit ) ;
63249: LD_ADDR_VAR 0 5
63253: PUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: CALL_OW 250
63263: ST_TO_ADDR
// y := GetY ( unit ) ;
63264: LD_ADDR_VAR 0 6
63268: PUSH
63269: LD_VAR 0 1
63273: PPUSH
63274: CALL_OW 251
63278: ST_TO_ADDR
// r := 8 ;
63279: LD_ADDR_VAR 0 4
63283: PUSH
63284: LD_INT 8
63286: ST_TO_ADDR
// if x - r < 0 then
63287: LD_VAR 0 5
63291: PUSH
63292: LD_VAR 0 4
63296: MINUS
63297: PUSH
63298: LD_INT 0
63300: LESS
63301: IFFALSE 63313
// min_x := 0 else
63303: LD_ADDR_VAR 0 7
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
63311: GO 63329
// min_x := x - r ;
63313: LD_ADDR_VAR 0 7
63317: PUSH
63318: LD_VAR 0 5
63322: PUSH
63323: LD_VAR 0 4
63327: MINUS
63328: ST_TO_ADDR
// if y - r < 0 then
63329: LD_VAR 0 6
63333: PUSH
63334: LD_VAR 0 4
63338: MINUS
63339: PUSH
63340: LD_INT 0
63342: LESS
63343: IFFALSE 63355
// min_y := 0 else
63345: LD_ADDR_VAR 0 8
63349: PUSH
63350: LD_INT 0
63352: ST_TO_ADDR
63353: GO 63371
// min_y := y - r ;
63355: LD_ADDR_VAR 0 8
63359: PUSH
63360: LD_VAR 0 6
63364: PUSH
63365: LD_VAR 0 4
63369: MINUS
63370: ST_TO_ADDR
// max_x := x + r ;
63371: LD_ADDR_VAR 0 9
63375: PUSH
63376: LD_VAR 0 5
63380: PUSH
63381: LD_VAR 0 4
63385: PLUS
63386: ST_TO_ADDR
// max_y := y + r ;
63387: LD_ADDR_VAR 0 10
63391: PUSH
63392: LD_VAR 0 6
63396: PUSH
63397: LD_VAR 0 4
63401: PLUS
63402: ST_TO_ADDR
// for _x = min_x to max_x do
63403: LD_ADDR_VAR 0 11
63407: PUSH
63408: DOUBLE
63409: LD_VAR 0 7
63413: DEC
63414: ST_TO_ADDR
63415: LD_VAR 0 9
63419: PUSH
63420: FOR_TO
63421: IFFALSE 63503
// for _y = min_y to max_y do
63423: LD_ADDR_VAR 0 12
63427: PUSH
63428: DOUBLE
63429: LD_VAR 0 8
63433: DEC
63434: ST_TO_ADDR
63435: LD_VAR 0 10
63439: PUSH
63440: FOR_TO
63441: IFFALSE 63499
// begin if not ValidHex ( _x , _y ) then
63443: LD_VAR 0 11
63447: PPUSH
63448: LD_VAR 0 12
63452: PPUSH
63453: CALL_OW 488
63457: NOT
63458: IFFALSE 63462
// continue ;
63460: GO 63440
// if MineAtPos ( _x , _y ) then
63462: LD_VAR 0 11
63466: PPUSH
63467: LD_VAR 0 12
63471: PPUSH
63472: CALL_OW 458
63476: IFFALSE 63497
// ViewMineAtPos ( _x , _y , side ) ;
63478: LD_VAR 0 11
63482: PPUSH
63483: LD_VAR 0 12
63487: PPUSH
63488: LD_VAR 0 3
63492: PPUSH
63493: CALL_OW 457
// end ;
63497: GO 63440
63499: POP
63500: POP
63501: GO 63420
63503: POP
63504: POP
// end ;
63505: LD_VAR 0 2
63509: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
63510: LD_INT 0
63512: PPUSH
63513: PPUSH
63514: PPUSH
63515: PPUSH
63516: PPUSH
63517: PPUSH
63518: PPUSH
// if not units then
63519: LD_VAR 0 1
63523: NOT
63524: IFFALSE 63528
// exit ;
63526: GO 63992
// scaners := [ ] ;
63528: LD_ADDR_VAR 0 6
63532: PUSH
63533: EMPTY
63534: ST_TO_ADDR
// for i in units do
63535: LD_ADDR_VAR 0 3
63539: PUSH
63540: LD_VAR 0 1
63544: PUSH
63545: FOR_IN
63546: IFFALSE 63703
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
63548: LD_VAR 0 3
63552: PPUSH
63553: CALL_OW 264
63557: PUSH
63558: LD_INT 11
63560: NONEQUAL
63561: IFTRUE 63575
63563: PUSH
63564: LD_VAR 0 3
63568: PPUSH
63569: CALL_OW 302
63573: NOT
63574: OR
63575: IFTRUE 63592
63577: PUSH
63578: LD_VAR 0 3
63582: PPUSH
63583: CALL_OW 110
63587: PUSH
63588: LD_INT 502
63590: EQUAL
63591: OR
63592: IFFALSE 63596
// continue ;
63594: GO 63545
// ComStop ( i ) ;
63596: LD_VAR 0 3
63600: PPUSH
63601: CALL_OW 141
// x := GetX ( i ) ;
63605: LD_ADDR_VAR 0 4
63609: PUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL_OW 250
63619: ST_TO_ADDR
// y := GetY ( i ) ;
63620: LD_ADDR_VAR 0 5
63624: PUSH
63625: LD_VAR 0 3
63629: PPUSH
63630: CALL_OW 251
63634: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63635: LD_VAR 0 3
63639: PPUSH
63640: CALL_OW 255
63644: PUSH
63645: LD_OWVAR 2
63649: EQUAL
63650: IFFALSE 63669
// PlaySoundXY ( x , y , mineDetector ) ;
63652: LD_VAR 0 4
63656: PPUSH
63657: LD_VAR 0 5
63661: PPUSH
63662: LD_STRING mineDetector
63664: PPUSH
63665: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63669: LD_ADDR_VAR 0 6
63673: PUSH
63674: LD_VAR 0 6
63678: PPUSH
63679: LD_VAR 0 3
63683: PPUSH
63684: CALL 41816 0 2
63688: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63689: LD_VAR 0 3
63693: PPUSH
63694: LD_INT 502
63696: PPUSH
63697: CALL_OW 109
// end ;
63701: GO 63545
63703: POP
63704: POP
// if not scaners then
63705: LD_VAR 0 6
63709: NOT
63710: IFFALSE 63714
// exit ;
63712: GO 63992
// wait ( 3 ) ;
63714: LD_INT 3
63716: PPUSH
63717: CALL_OW 67
// timer := 6 ;
63721: LD_ADDR_VAR 0 7
63725: PUSH
63726: LD_INT 6
63728: ST_TO_ADDR
// repeat for i in scaners do
63729: LD_ADDR_VAR 0 3
63733: PUSH
63734: LD_VAR 0 6
63738: PUSH
63739: FOR_IN
63740: IFFALSE 63890
// begin side := GetSide ( i ) ;
63742: LD_ADDR_VAR 0 8
63746: PUSH
63747: LD_VAR 0 3
63751: PPUSH
63752: CALL_OW 255
63756: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63757: LD_VAR 0 3
63761: PPUSH
63762: CALL_OW 302
63766: NOT
63767: IFTRUE 63780
63769: PUSH
63770: LD_VAR 0 3
63774: PPUSH
63775: CALL_OW 314
63779: OR
63780: IFTRUE 63811
63782: PUSH
63783: LD_VAR 0 3
63787: PPUSH
63788: CALL_OW 263
63792: PUSH
63793: LD_INT 1
63795: EQUAL
63796: IFFALSE 63810
63798: PUSH
63799: LD_VAR 0 3
63803: PPUSH
63804: CALL_OW 311
63808: NOT
63809: AND
63810: OR
63811: IFFALSE 63855
// begin SetUnitDisplayNumber ( i , 0 ) ;
63813: LD_VAR 0 3
63817: PPUSH
63818: LD_INT 0
63820: PPUSH
63821: CALL_OW 505
// SetTag ( i , 0 ) ;
63825: LD_VAR 0 3
63829: PPUSH
63830: LD_INT 0
63832: PPUSH
63833: CALL_OW 109
// scaners := scaners diff i ;
63837: LD_ADDR_VAR 0 6
63841: PUSH
63842: LD_VAR 0 6
63846: PUSH
63847: LD_VAR 0 3
63851: DIFF
63852: ST_TO_ADDR
// continue ;
63853: GO 63739
// end ; if side in [ your_side , 9 ] then
63855: LD_VAR 0 8
63859: PUSH
63860: LD_OWVAR 2
63864: PUSH
63865: LD_INT 9
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: IN
63872: IFFALSE 63888
// SetUnitDisplayNumber ( i , timer ) ;
63874: LD_VAR 0 3
63878: PPUSH
63879: LD_VAR 0 7
63883: PPUSH
63884: CALL_OW 505
// end ;
63888: GO 63739
63890: POP
63891: POP
// if not scaners then
63892: LD_VAR 0 6
63896: NOT
63897: IFFALSE 63901
// exit ;
63899: GO 63992
// timer := Dec ( timer ) ;
63901: LD_ADDR_VAR 0 7
63905: PUSH
63906: LD_VAR 0 7
63910: PPUSH
63911: CALL 43211 0 1
63915: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63916: LD_INT 35
63918: PPUSH
63919: CALL_OW 67
// until timer = 0 ;
63923: LD_VAR 0 7
63927: PUSH
63928: LD_INT 0
63930: EQUAL
63931: IFFALSE 63729
// if not scaners then
63933: LD_VAR 0 6
63937: NOT
63938: IFFALSE 63942
// exit ;
63940: GO 63992
// for i in scaners do
63942: LD_ADDR_VAR 0 3
63946: PUSH
63947: LD_VAR 0 6
63951: PUSH
63952: FOR_IN
63953: IFFALSE 63990
// begin SetUnitDisplayNumber ( i , 0 ) ;
63955: LD_VAR 0 3
63959: PPUSH
63960: LD_INT 0
63962: PPUSH
63963: CALL_OW 505
// SetTag ( i , 0 ) ;
63967: LD_VAR 0 3
63971: PPUSH
63972: LD_INT 0
63974: PPUSH
63975: CALL_OW 109
// RevealDetectorMine ( i ) ;
63979: LD_VAR 0 3
63983: PPUSH
63984: CALL 63212 0 1
// end ;
63988: GO 63952
63990: POP
63991: POP
// end ;
63992: LD_VAR 0 2
63996: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63997: LD_INT 0
63999: PPUSH
// if p1 = mine_detector_mode then
64000: LD_VAR 0 2
64004: PUSH
64005: LD_INT 103
64007: EQUAL
64008: IFFALSE 64019
// DetectMine ( units ) ;
64010: LD_VAR 0 1
64014: PPUSH
64015: CALL 63510 0 1
// end ; end_of_file
64019: LD_VAR 0 7
64023: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64024: PPOPN 6
64026: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64027: LD_INT 0
64029: PPUSH
// begin if not units then
64030: LD_VAR 0 1
64034: NOT
64035: IFFALSE 64039
// exit ;
64037: GO 64073
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
64039: LD_VAR 0 1
64043: PPUSH
64044: LD_VAR 0 2
64048: PPUSH
64049: LD_VAR 0 3
64053: PPUSH
64054: LD_VAR 0 4
64058: PPUSH
64059: LD_VAR 0 5
64063: PPUSH
64064: LD_VAR 0 6
64068: PPUSH
64069: CALL 63997 0 6
// end ;
64073: PPOPN 7
64075: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64076: LD_EXP 5
64080: PUSH
64081: LD_INT 4
64083: EQUAL
64084: IFFALSE 64120
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64086: LD_STRING setGameDifficulty(
64088: PUSH
64089: LD_OWVAR 67
64093: STR
64094: PUSH
64095: LD_STRING )
64097: STR
64098: PPUSH
64099: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64103: LD_STRING displayDifficulty(
64105: PUSH
64106: LD_OWVAR 67
64110: STR
64111: PUSH
64112: LD_STRING )
64114: STR
64115: PPUSH
64116: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64120: CALL 64149 0 0
// end ; end_of_file
64124: PPOPN 1
64126: END
// every 0 0$1 do
64127: GO 64129
64129: DISABLE
// begin enable ;
64130: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64131: LD_STRING updateTimer(
64133: PUSH
64134: LD_OWVAR 1
64138: STR
64139: PUSH
64140: LD_STRING );
64142: STR
64143: PPUSH
64144: CALL_OW 559
// end ;
64148: END
// export function SOS_MapStart ( ) ; begin
64149: LD_INT 0
64151: PPUSH
// UpdateFactoryWaypoints ( ) ;
64152: CALL 65083 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64156: CALL 65335 0 0
// ParseMultiDataToLua ( ) ;
64160: CALL 65482 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
64164: LD_STRING setSpecLogoNumber(
64166: PUSH
64167: LD_INT 2
64169: STR
64170: PUSH
64171: LD_STRING ,
64173: STR
64174: PUSH
64175: LD_INT 1
64177: STR
64178: PUSH
64179: LD_STRING )
64181: STR
64182: PPUSH
64183: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
64187: LD_STRING setSpecLogoNumber(
64189: PUSH
64190: LD_INT 3
64192: STR
64193: PUSH
64194: LD_STRING ,
64196: STR
64197: PUSH
64198: LD_INT 2
64200: STR
64201: PUSH
64202: LD_STRING )
64204: STR
64205: PPUSH
64206: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
64210: LD_STRING setSpecLogoNumber(
64212: PUSH
64213: LD_INT 4
64215: STR
64216: PUSH
64217: LD_STRING ,
64219: STR
64220: PUSH
64221: LD_INT 3
64223: STR
64224: PUSH
64225: LD_STRING )
64227: STR
64228: PPUSH
64229: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
64233: LD_STRING setSpecLogoNumber(
64235: PUSH
64236: LD_INT 5
64238: STR
64239: PUSH
64240: LD_STRING ,
64242: STR
64243: PUSH
64244: LD_INT 4
64246: STR
64247: PUSH
64248: LD_STRING )
64250: STR
64251: PPUSH
64252: CALL_OW 559
// end ;
64256: LD_VAR 0 1
64260: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
64261: LD_INT 0
64263: PPUSH
64264: PPUSH
64265: PPUSH
64266: PPUSH
64267: PPUSH
64268: PPUSH
64269: PPUSH
64270: PPUSH
64271: PPUSH
// for i := 1 to 8 do
64272: LD_ADDR_VAR 0 2
64276: PUSH
64277: DOUBLE
64278: LD_INT 1
64280: DEC
64281: ST_TO_ADDR
64282: LD_INT 8
64284: PUSH
64285: FOR_TO
64286: IFFALSE 64671
// begin if mpSidePositions [ i ] then
64288: LD_EXP 9
64292: PUSH
64293: LD_VAR 0 2
64297: ARRAY
64298: IFFALSE 64669
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64300: LD_ADDR_VAR 0 7
64304: PUSH
64305: LD_INT 22
64307: PUSH
64308: LD_VAR 0 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 21
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PPUSH
64331: CALL_OW 69
64335: PPUSH
64336: CALL 5840 0 1
64340: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64341: LD_ADDR_VAR 0 9
64345: PUSH
64346: LD_INT 22
64348: PUSH
64349: LD_VAR 0 2
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 2
64360: PUSH
64361: LD_INT 30
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 30
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PPUSH
64390: CALL_OW 69
64394: ST_TO_ADDR
// crates := 0 ;
64395: LD_ADDR_VAR 0 4
64399: PUSH
64400: LD_INT 0
64402: ST_TO_ADDR
// oil := 0 ;
64403: LD_ADDR_VAR 0 5
64407: PUSH
64408: LD_INT 0
64410: ST_TO_ADDR
// sib := 0 ;
64411: LD_ADDR_VAR 0 6
64415: PUSH
64416: LD_INT 0
64418: ST_TO_ADDR
// if bases then
64419: LD_VAR 0 9
64423: IFFALSE 64529
// begin for j in bases do
64425: LD_ADDR_VAR 0 3
64429: PUSH
64430: LD_VAR 0 9
64434: PUSH
64435: FOR_IN
64436: IFFALSE 64527
// begin base := GetBase ( j ) ;
64438: LD_ADDR_VAR 0 8
64442: PUSH
64443: LD_VAR 0 3
64447: PPUSH
64448: CALL_OW 274
64452: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64453: LD_ADDR_VAR 0 4
64457: PUSH
64458: LD_VAR 0 4
64462: PUSH
64463: LD_VAR 0 8
64467: PPUSH
64468: LD_INT 1
64470: PPUSH
64471: CALL_OW 275
64475: PLUS
64476: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64477: LD_ADDR_VAR 0 5
64481: PUSH
64482: LD_VAR 0 5
64486: PUSH
64487: LD_VAR 0 8
64491: PPUSH
64492: LD_INT 2
64494: PPUSH
64495: CALL_OW 275
64499: PLUS
64500: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64501: LD_ADDR_VAR 0 6
64505: PUSH
64506: LD_VAR 0 6
64510: PUSH
64511: LD_VAR 0 8
64515: PPUSH
64516: LD_INT 3
64518: PPUSH
64519: CALL_OW 275
64523: PLUS
64524: ST_TO_ADDR
// end ;
64525: GO 64435
64527: POP
64528: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64529: LD_STRING setSpecText(
64531: PUSH
64532: LD_VAR 0 2
64536: STR
64537: PUSH
64538: LD_STRING ,
64540: STR
64541: PUSH
64542: LD_INT 2
64544: STR
64545: PUSH
64546: LD_STRING ,
64548: STR
64549: PUSH
64550: LD_VAR 0 4
64554: STR
64555: PUSH
64556: LD_STRING )
64558: STR
64559: PPUSH
64560: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64564: LD_STRING setSpecText(
64566: PUSH
64567: LD_VAR 0 2
64571: STR
64572: PUSH
64573: LD_STRING ,
64575: STR
64576: PUSH
64577: LD_INT 3
64579: STR
64580: PUSH
64581: LD_STRING ,
64583: STR
64584: PUSH
64585: LD_VAR 0 5
64589: STR
64590: PUSH
64591: LD_STRING )
64593: STR
64594: PPUSH
64595: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64599: LD_STRING setSpecText(
64601: PUSH
64602: LD_VAR 0 2
64606: STR
64607: PUSH
64608: LD_STRING ,
64610: STR
64611: PUSH
64612: LD_INT 4
64614: STR
64615: PUSH
64616: LD_STRING ,
64618: STR
64619: PUSH
64620: LD_VAR 0 6
64624: STR
64625: PUSH
64626: LD_STRING )
64628: STR
64629: PPUSH
64630: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64634: LD_STRING setSpecText(
64636: PUSH
64637: LD_VAR 0 2
64641: STR
64642: PUSH
64643: LD_STRING ,
64645: STR
64646: PUSH
64647: LD_INT 5
64649: STR
64650: PUSH
64651: LD_STRING ,
64653: STR
64654: PUSH
64655: LD_VAR 0 7
64659: STR
64660: PUSH
64661: LD_STRING )
64663: STR
64664: PPUSH
64665: CALL_OW 559
// end ; end ;
64669: GO 64285
64671: POP
64672: POP
// end ;
64673: LD_VAR 0 1
64677: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64678: LD_INT 2
64680: PUSH
64681: LD_INT 30
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 30
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: PPUSH
64706: CALL_OW 69
64710: IFFALSE 64720
64712: GO 64714
64714: DISABLE
// begin enable ;
64715: ENABLE
// UpdateSpectatorBar ;
64716: CALL 64261 0 0
// end ;
64720: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64721: LD_INT 0
64723: PPUSH
// end ;
64724: LD_VAR 0 12
64728: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64729: LD_INT 0
64731: PPUSH
64732: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64733: LD_VAR 0 1
64737: NOT
64738: IFTRUE 64757
64740: PUSH
64741: LD_VAR 0 2
64745: PPUSH
64746: LD_VAR 0 3
64750: PPUSH
64751: CALL_OW 488
64755: NOT
64756: OR
64757: IFTRUE 64792
64759: PUSH
64760: LD_VAR 0 1
64764: PPUSH
64765: CALL_OW 266
64769: PUSH
64770: LD_INT 3
64772: NONEQUAL
64773: IFFALSE 64791
64775: PUSH
64776: LD_VAR 0 1
64780: PPUSH
64781: CALL_OW 247
64785: PUSH
64786: LD_INT 1
64788: EQUAL
64789: NOT
64790: AND
64791: OR
64792: IFFALSE 64796
// exit ;
64794: GO 65078
// if GetType ( factory ) = unit_human then
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL_OW 247
64805: PUSH
64806: LD_INT 1
64808: EQUAL
64809: IFFALSE 64826
// factory := IsInUnit ( factory ) ;
64811: LD_ADDR_VAR 0 1
64815: PUSH
64816: LD_VAR 0 1
64820: PPUSH
64821: CALL_OW 310
64825: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 266
64835: PUSH
64836: LD_INT 3
64838: NONEQUAL
64839: IFFALSE 64843
// exit ;
64841: GO 65078
// for i := 1 to Count ( factoryWaypoints ) do
64843: LD_ADDR_VAR 0 5
64847: PUSH
64848: DOUBLE
64849: LD_INT 1
64851: DEC
64852: ST_TO_ADDR
64853: LD_EXP 63
64857: PPUSH
64858: CALL 5840 0 1
64862: PUSH
64863: FOR_TO
64864: IFFALSE 65026
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64866: LD_VAR 0 2
64870: PPUSH
64871: LD_VAR 0 3
64875: PPUSH
64876: CALL_OW 428
64880: PUSH
64881: LD_EXP 63
64885: PUSH
64886: LD_VAR 0 5
64890: ARRAY
64891: PUSH
64892: LD_INT 2
64894: ARRAY
64895: EQUAL
64896: IFFALSE 64928
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64898: LD_ADDR_EXP 63
64902: PUSH
64903: LD_EXP 63
64907: PPUSH
64908: LD_VAR 0 5
64912: PPUSH
64913: CALL_OW 3
64917: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64918: CALL 65083 0 0
// exit ;
64922: POP
64923: POP
64924: GO 65078
// end else
64926: GO 65024
// if factory = factoryWaypoints [ i ] [ 2 ] then
64928: LD_VAR 0 1
64932: PUSH
64933: LD_EXP 63
64937: PUSH
64938: LD_VAR 0 5
64942: ARRAY
64943: PUSH
64944: LD_INT 2
64946: ARRAY
64947: EQUAL
64948: IFFALSE 65024
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64950: LD_ADDR_EXP 63
64954: PUSH
64955: LD_EXP 63
64959: PPUSH
64960: LD_VAR 0 5
64964: PPUSH
64965: CALL_OW 3
64969: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64970: LD_ADDR_EXP 63
64974: PUSH
64975: LD_EXP 63
64979: PPUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: CALL_OW 255
64989: PUSH
64990: LD_VAR 0 1
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_VAR 0 3
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: PPUSH
65011: CALL 41816 0 2
65015: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65016: CALL 65083 0 0
// exit ;
65020: POP
65021: POP
65022: GO 65078
// end ; end ;
65024: GO 64863
65026: POP
65027: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65028: LD_ADDR_EXP 63
65032: PUSH
65033: LD_EXP 63
65037: PPUSH
65038: LD_VAR 0 1
65042: PPUSH
65043: CALL_OW 255
65047: PUSH
65048: LD_VAR 0 1
65052: PUSH
65053: LD_VAR 0 2
65057: PUSH
65058: LD_VAR 0 3
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: PPUSH
65069: CALL 41816 0 2
65073: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65074: CALL 65083 0 0
// end ;
65078: LD_VAR 0 4
65082: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65083: LD_INT 0
65085: PPUSH
65086: PPUSH
65087: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65088: LD_STRING resetFactoryWaypoint();
65090: PPUSH
65091: CALL_OW 559
// if factoryWaypoints then
65095: LD_EXP 63
65099: IFFALSE 65220
// begin list := factoryWaypoints ;
65101: LD_ADDR_VAR 0 3
65105: PUSH
65106: LD_EXP 63
65110: ST_TO_ADDR
// for i := 1 to list do
65111: LD_ADDR_VAR 0 2
65115: PUSH
65116: DOUBLE
65117: LD_INT 1
65119: DEC
65120: ST_TO_ADDR
65121: LD_VAR 0 3
65125: PUSH
65126: FOR_TO
65127: IFFALSE 65218
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65129: LD_STRING setFactoryWaypointXY(
65131: PUSH
65132: LD_VAR 0 3
65136: PUSH
65137: LD_VAR 0 2
65141: ARRAY
65142: PUSH
65143: LD_INT 1
65145: ARRAY
65146: STR
65147: PUSH
65148: LD_STRING ,
65150: STR
65151: PUSH
65152: LD_VAR 0 3
65156: PUSH
65157: LD_VAR 0 2
65161: ARRAY
65162: PUSH
65163: LD_INT 2
65165: ARRAY
65166: STR
65167: PUSH
65168: LD_STRING ,
65170: STR
65171: PUSH
65172: LD_VAR 0 3
65176: PUSH
65177: LD_VAR 0 2
65181: ARRAY
65182: PUSH
65183: LD_INT 3
65185: ARRAY
65186: STR
65187: PUSH
65188: LD_STRING ,
65190: STR
65191: PUSH
65192: LD_VAR 0 3
65196: PUSH
65197: LD_VAR 0 2
65201: ARRAY
65202: PUSH
65203: LD_INT 4
65205: ARRAY
65206: STR
65207: PUSH
65208: LD_STRING )
65210: STR
65211: PPUSH
65212: CALL_OW 559
65216: GO 65126
65218: POP
65219: POP
// end ; end ;
65220: LD_VAR 0 1
65224: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65225: LD_INT 0
65227: PPUSH
// if HexInfo ( x , y ) = warehouse then
65228: LD_VAR 0 2
65232: PPUSH
65233: LD_VAR 0 3
65237: PPUSH
65238: CALL_OW 428
65242: PUSH
65243: LD_VAR 0 1
65247: EQUAL
65248: IFFALSE 65275
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65250: LD_ADDR_EXP 65
65254: PUSH
65255: LD_EXP 65
65259: PPUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: LD_INT 0
65267: PPUSH
65268: CALL_OW 1
65272: ST_TO_ADDR
65273: GO 65326
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65275: LD_ADDR_EXP 65
65279: PUSH
65280: LD_EXP 65
65284: PPUSH
65285: LD_VAR 0 1
65289: PPUSH
65290: LD_VAR 0 1
65294: PPUSH
65295: CALL_OW 255
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: LD_VAR 0 2
65309: PUSH
65310: LD_VAR 0 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: PPUSH
65321: CALL_OW 1
65325: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65326: CALL 65335 0 0
// end ;
65330: LD_VAR 0 4
65334: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65335: LD_INT 0
65337: PPUSH
65338: PPUSH
65339: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65340: LD_STRING resetWarehouseGatheringPoints();
65342: PPUSH
65343: CALL_OW 559
// if warehouseGatheringPoints then
65347: LD_EXP 65
65351: IFFALSE 65477
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65353: LD_ADDR_VAR 0 3
65357: PUSH
65358: LD_EXP 65
65362: PPUSH
65363: CALL 45750 0 1
65367: ST_TO_ADDR
// for i := 1 to list do
65368: LD_ADDR_VAR 0 2
65372: PUSH
65373: DOUBLE
65374: LD_INT 1
65376: DEC
65377: ST_TO_ADDR
65378: LD_VAR 0 3
65382: PUSH
65383: FOR_TO
65384: IFFALSE 65475
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65386: LD_STRING setWarehouseGatheringPointXY(
65388: PUSH
65389: LD_VAR 0 3
65393: PUSH
65394: LD_VAR 0 2
65398: ARRAY
65399: PUSH
65400: LD_INT 1
65402: ARRAY
65403: STR
65404: PUSH
65405: LD_STRING ,
65407: STR
65408: PUSH
65409: LD_VAR 0 3
65413: PUSH
65414: LD_VAR 0 2
65418: ARRAY
65419: PUSH
65420: LD_INT 2
65422: ARRAY
65423: STR
65424: PUSH
65425: LD_STRING ,
65427: STR
65428: PUSH
65429: LD_VAR 0 3
65433: PUSH
65434: LD_VAR 0 2
65438: ARRAY
65439: PUSH
65440: LD_INT 3
65442: ARRAY
65443: STR
65444: PUSH
65445: LD_STRING ,
65447: STR
65448: PUSH
65449: LD_VAR 0 3
65453: PUSH
65454: LD_VAR 0 2
65458: ARRAY
65459: PUSH
65460: LD_INT 4
65462: ARRAY
65463: STR
65464: PUSH
65465: LD_STRING )
65467: STR
65468: PPUSH
65469: CALL_OW 559
65473: GO 65383
65475: POP
65476: POP
// end ; end ;
65477: LD_VAR 0 1
65481: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65482: LD_INT 0
65484: PPUSH
65485: PPUSH
// if not mpSidePositions then
65486: LD_EXP 9
65490: NOT
65491: IFFALSE 65495
// exit ;
65493: GO 65566
// result :=  ;
65495: LD_ADDR_VAR 0 1
65499: PUSH
65500: LD_STRING 
65502: ST_TO_ADDR
// for i := 1 to 8 do
65503: LD_ADDR_VAR 0 2
65507: PUSH
65508: DOUBLE
65509: LD_INT 1
65511: DEC
65512: ST_TO_ADDR
65513: LD_INT 8
65515: PUSH
65516: FOR_TO
65517: IFFALSE 65547
// begin result := result & mpSidePositions [ i ] & ; ;
65519: LD_ADDR_VAR 0 1
65523: PUSH
65524: LD_VAR 0 1
65528: PUSH
65529: LD_EXP 9
65533: PUSH
65534: LD_VAR 0 2
65538: ARRAY
65539: STR
65540: PUSH
65541: LD_STRING ;
65543: STR
65544: ST_TO_ADDR
// end ;
65545: GO 65516
65547: POP
65548: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65549: LD_STRING setMultiplayerRealPosition("
65551: PUSH
65552: LD_VAR 0 1
65556: STR
65557: PUSH
65558: LD_STRING ");
65560: STR
65561: PPUSH
65562: CALL_OW 559
// end ; end_of_file
65566: LD_VAR 0 1
65570: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
65571: LD_EXP 41
65575: IFFALSE 65618
65577: GO 65579
65579: DISABLE
65580: LD_INT 0
65582: PPUSH
// begin for i := 1 to 8 do
65583: LD_ADDR_VAR 0 1
65587: PUSH
65588: DOUBLE
65589: LD_INT 1
65591: DEC
65592: ST_TO_ADDR
65593: LD_INT 8
65595: PUSH
65596: FOR_TO
65597: IFFALSE 65616
// SetRestrict ( b_depot , i , state_disabled ) ;
65599: LD_INT 0
65601: PPUSH
65602: LD_VAR 0 1
65606: PPUSH
65607: LD_INT 0
65609: PPUSH
65610: CALL_OW 324
65614: GO 65596
65616: POP
65617: POP
// end ;
65618: PPOPN 1
65620: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
65621: LD_EXP 41
65625: IFFALSE 65633
65627: PUSH
65628: CALL 65843 0 0
65632: AND
65633: IFFALSE 65641
65635: PUSH
65636: LD_OWVAR 4
65640: AND
65641: IFFALSE 65840
65643: GO 65645
65645: DISABLE
65646: LD_INT 0
65648: PPUSH
65649: PPUSH
// begin canWin := false ;
65650: LD_ADDR_VAR 0 2
65654: PUSH
65655: LD_INT 0
65657: ST_TO_ADDR
// if not HasPower ( your_side ) then
65658: LD_OWVAR 2
65662: PPUSH
65663: CALL 65885 0 1
65667: NOT
65668: IFFALSE 65679
// begin Multiplayer_Loose_Message ;
65670: CALL_OW 521
// enable ( mpLose ) ;
65674: LD_INT 102
65676: ENABLE_MARKED
// end else
65677: GO 65840
// begin canWin := true ;
65679: LD_ADDR_VAR 0 2
65683: PUSH
65684: LD_INT 1
65686: ST_TO_ADDR
// for i := 1 to 8 do
65687: LD_ADDR_VAR 0 1
65691: PUSH
65692: DOUBLE
65693: LD_INT 1
65695: DEC
65696: ST_TO_ADDR
65697: LD_INT 8
65699: PUSH
65700: FOR_TO
65701: IFFALSE 65826
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65703: LD_EXP 9
65707: PUSH
65708: LD_VAR 0 1
65712: ARRAY
65713: IFFALSE 65726
65715: PUSH
65716: LD_VAR 0 1
65720: PPUSH
65721: CALL_OW 108
65725: AND
65726: IFFALSE 65740
65728: PUSH
65729: LD_VAR 0 1
65733: PUSH
65734: LD_OWVAR 2
65738: NONEQUAL
65739: AND
65740: IFFALSE 65824
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65742: LD_EXP 10
65746: PUSH
65747: LD_VAR 0 1
65751: ARRAY
65752: NOT
65753: IFTRUE 65801
65755: PUSH
65756: LD_EXP 10
65760: PUSH
65761: LD_VAR 0 1
65765: ARRAY
65766: PUSH
65767: LD_EXP 10
65771: PUSH
65772: LD_OWVAR 2
65776: ARRAY
65777: NONEQUAL
65778: IFFALSE 65800
65780: PUSH
65781: LD_OWVAR 2
65785: PPUSH
65786: LD_VAR 0 1
65790: PPUSH
65791: CALL_OW 81
65795: PUSH
65796: LD_INT 1
65798: NONEQUAL
65799: AND
65800: OR
65801: IFFALSE 65824
// if HasPower ( i ) then
65803: LD_VAR 0 1
65807: PPUSH
65808: CALL 65885 0 1
65812: IFFALSE 65824
// begin canWin := false ;
65814: LD_ADDR_VAR 0 2
65818: PUSH
65819: LD_INT 0
65821: ST_TO_ADDR
// break ;
65822: GO 65826
// end ;
65824: GO 65700
65826: POP
65827: POP
// if canWin then
65828: LD_VAR 0 2
65832: IFFALSE 65839
// enable ( mpWin ) else
65834: LD_INT 101
65836: ENABLE_MARKED
65837: GO 65840
// enable ;
65839: ENABLE
// end ; end ;
65840: PPOPN 2
65842: END
// function CanWinLoose ; begin
65843: LD_INT 0
65845: PPUSH
// result := true ;
65846: LD_ADDR_VAR 0 1
65850: PUSH
65851: LD_INT 1
65853: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65854: CALL_OW 531
65858: IFFALSE 65870
65860: PUSH
65861: CALL_OW 519
65865: PUSH
65866: LD_INT 1
65868: GREATER
65869: AND
65870: IFFALSE 65880
// result := false ;
65872: LD_ADDR_VAR 0 1
65876: PUSH
65877: LD_INT 0
65879: ST_TO_ADDR
// end ;
65880: LD_VAR 0 1
65884: RET
// function HasPower ( i ) ; begin
65885: LD_INT 0
65887: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65888: LD_INT 22
65890: PUSH
65891: LD_VAR 0 1
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 30
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 30
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PPUSH
65932: CALL_OW 69
65936: NOT
65937: IFFALSE 65941
// exit ;
65939: GO 66006
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65941: LD_ADDR_VAR 0 2
65945: PUSH
65946: LD_INT 22
65948: PUSH
65949: LD_VAR 0 1
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: LD_INT 21
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 33
65973: PUSH
65974: LD_INT 3
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 33
65983: PUSH
65984: LD_INT 5
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 69
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 2
66010: RET
