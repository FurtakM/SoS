// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 47018 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 47394 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 8
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 3
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 4
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: LD_INT 2
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 7
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mpTeamGame := true ;
 824: LD_ADDR_EXP 13
 828: PUSH
 829: LD_INT 1
 831: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 832: LD_ADDR_EXP 31
 836: PUSH
 837: LD_INT 200
 839: PUSH
 840: LD_INT 230
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// end ;
 847: LD_VAR 0 1
 851: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 852: LD_INT 0
 854: PPUSH
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
 860: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 861: LD_ADDR_EXP 21
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: LD_INT 5
 880: PUSH
 881: LD_INT 6
 883: PUSH
 884: LD_INT 7
 886: PUSH
 887: LD_INT 8
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 ] union mpBuildUpAreas ;
 900: LD_ADDR_EXP 20
 904: PUSH
 905: LD_INT 10
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: LD_INT 12
 913: PUSH
 914: LD_INT 13
 916: PUSH
 917: LD_INT 14
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_EXP 21
 931: UNION
 932: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 933: LD_VAR 0 1
 937: PUSH
 938: LD_INT 2
 940: EQUAL
 941: IFFALSE 953
// baseLevel := 1 else
 943: LD_ADDR_VAR 0 7
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
 951: GO 967
// baseLevel := mpGameSettings [ 1 ] ;
 953: LD_ADDR_VAR 0 7
 957: PUSH
 958: LD_EXP 8
 962: PUSH
 963: LD_INT 1
 965: ARRAY
 966: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 967: LD_ADDR_EXP 26
 971: PUSH
 972: LD_EXP 8
 976: PUSH
 977: LD_INT 2
 979: ARRAY
 980: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 981: LD_ADDR_EXP 27
 985: PUSH
 986: LD_EXP 8
 990: PUSH
 991: LD_INT 3
 993: ARRAY
 994: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 995: LD_ADDR_EXP 17
 999: PUSH
1000: LD_EXP 8
1004: PUSH
1005: LD_INT 4
1007: ARRAY
1008: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1009: LD_ADDR_EXP 29
1013: PUSH
1014: LD_EXP 8
1018: PUSH
1019: LD_INT 5
1021: ARRAY
1022: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1023: LD_ADDR_VAR 0 5
1027: PUSH
1028: LD_EXP 8
1032: PUSH
1033: LD_INT 6
1035: ARRAY
1036: PUSH
1037: LD_INT 0
1039: GREATER
1040: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1041: LD_ADDR_VAR 0 6
1045: PUSH
1046: LD_EXP 8
1050: PUSH
1051: LD_INT 7
1053: ARRAY
1054: PUSH
1055: LD_INT 0
1057: GREATER
1058: ST_TO_ADDR
// kingCamArea := 0 ;
1059: LD_ADDR_EXP 2
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// kingArea := 0 ;
1067: LD_ADDR_EXP 1
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// if gameType = GameTypeKing then
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 3
1082: EQUAL
1083: IFFALSE 1123
// begin mpKingArea := 0 ;
1085: LD_ADDR_EXP 36
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1093: LD_ADDR_EXP 37
1097: PUSH
1098: LD_EXP 8
1102: PUSH
1103: LD_INT 8
1105: ARRAY
1106: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1107: LD_ADDR_EXP 39
1111: PUSH
1112: LD_EXP 8
1116: PUSH
1117: LD_INT 10
1119: ARRAY
1120: ST_TO_ADDR
// end else
1121: GO 1147
// begin mpKingArea := 0 ;
1123: LD_ADDR_EXP 36
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// mpPoints := 0 ;
1131: LD_ADDR_EXP 37
1135: PUSH
1136: LD_INT 0
1138: ST_TO_ADDR
// mpEmissions := 0 ;
1139: LD_ADDR_EXP 39
1143: PUSH
1144: LD_INT 0
1146: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1147: LD_EXP 8
1151: PUSH
1152: LD_INT 9
1154: ARRAY
1155: IFFALSE 1287
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1157: LD_ADDR_EXP 38
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: LD_INT 3
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 12
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: LD_INT 1
1210: PUSH
1211: LD_INT 24
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 12
1222: PUSH
1223: LD_INT 1
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 23
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 21
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 1
1250: PUSH
1251: LD_INT 42
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 21
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 42
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: LIST
1286: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1287: LD_ADDR_EXP 18
1291: PUSH
1292: LD_EXP 8
1296: PUSH
1297: LD_INT 11
1299: ARRAY
1300: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1301: LD_ADDR_EXP 24
1305: PUSH
1306: LD_EXP 8
1310: PUSH
1311: LD_INT 12
1313: ARRAY
1314: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 8
1324: PUSH
1325: LD_INT 13
1327: ARRAY
1328: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1329: LD_ADDR_EXP 35
1333: PUSH
1334: LD_EXP 8
1338: PUSH
1339: LD_INT 14
1341: ARRAY
1342: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1343: LD_ADDR_EXP 32
1347: PUSH
1348: LD_EXP 8
1352: PUSH
1353: LD_INT 15
1355: ARRAY
1356: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1357: LD_ADDR_EXP 30
1361: PUSH
1362: LD_EXP 8
1366: PUSH
1367: LD_INT 18
1369: ARRAY
1370: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1371: LD_ADDR_EXP 3
1375: PUSH
1376: LD_EXP 8
1380: PUSH
1381: LD_INT 20
1383: ARRAY
1384: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1385: LD_ADDR_EXP 22
1389: PUSH
1390: LD_EXP 8
1394: PUSH
1395: LD_INT 21
1397: ARRAY
1398: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1399: LD_ADDR_EXP 33
1403: PUSH
1404: LD_INT 15
1406: PUSH
1407: LD_INT 16
1409: PUSH
1410: LD_INT 17
1412: PUSH
1413: LD_INT 18
1415: PUSH
1416: LD_INT 19
1418: PUSH
1419: LD_INT 20
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 22
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1438: LD_ADDR_VAR 0 8
1442: PUSH
1443: LD_INT 23
1445: PPUSH
1446: LD_INT 2
1448: PPUSH
1449: CALL 46383 0 2
1453: PUSH
1454: LD_INT 24
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL 46383 0 2
1464: PUSH
1465: LD_INT 25
1467: PPUSH
1468: LD_INT 3
1470: PPUSH
1471: CALL 46383 0 2
1475: PUSH
1476: LD_INT 26
1478: PPUSH
1479: LD_INT 4
1481: PPUSH
1482: CALL 46383 0 2
1486: PUSH
1487: LD_INT 27
1489: PPUSH
1490: LD_INT 5
1492: PPUSH
1493: CALL 46383 0 2
1497: PUSH
1498: LD_INT 28
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL 46383 0 2
1508: PUSH
1509: LD_INT 29
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL 46383 0 2
1519: PUSH
1520: LD_INT 30
1522: PPUSH
1523: LD_INT 1
1525: PPUSH
1526: CALL 46383 0 2
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1541: LD_ADDR_VAR 0 3
1545: PUSH
1546: DOUBLE
1547: LD_INT 1
1549: DEC
1550: ST_TO_ADDR
1551: LD_VAR 0 8
1555: PPUSH
1556: CALL 5732 0 1
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1666
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1564: LD_ADDR_EXP 23
1568: PUSH
1569: LD_EXP 23
1573: PPUSH
1574: LD_VAR 0 3
1578: PPUSH
1579: LD_VAR 0 8
1583: PUSH
1584: LD_VAR 0 3
1588: ARRAY
1589: PUSH
1590: LD_INT 1
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 8
1598: PUSH
1599: LD_VAR 0 3
1603: ARRAY
1604: PUSH
1605: LD_INT 3
1607: ARRAY
1608: PPUSH
1609: LD_INT 10
1611: PPUSH
1612: CALL_OW 272
1616: PUSH
1617: LD_VAR 0 8
1621: PUSH
1622: LD_VAR 0 3
1626: ARRAY
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PPUSH
1632: LD_VAR 0 8
1636: PUSH
1637: LD_VAR 0 3
1641: ARRAY
1642: PUSH
1643: LD_INT 3
1645: ARRAY
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: CALL_OW 273
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PPUSH
1659: CALL_OW 1
1663: ST_TO_ADDR
1664: GO 1561
1666: POP
1667: POP
// if hasOil then
1668: LD_VAR 0 5
1672: IFFALSE 1922
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1674: LD_ADDR_VAR 0 4
1678: PUSH
1679: LD_EXP 8
1683: PUSH
1684: LD_INT 6
1686: ARRAY
1687: PUSH
1688: LD_INT 2
1690: EQUAL
1691: ST_TO_ADDR
// if all then
1692: LD_VAR 0 4
1696: IFFALSE 1819
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1698: LD_ADDR_EXP 14
1702: PUSH
1703: LD_INT 31
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 46216 0 2
1715: PUSH
1716: LD_INT 33
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 46216 0 2
1728: PUSH
1729: LD_INT 35
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 46216 0 2
1741: PUSH
1742: LD_INT 37
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL 46216 0 2
1754: PUSH
1755: LD_INT 39
1757: PPUSH
1758: LD_VAR 0 4
1762: PPUSH
1763: CALL 46216 0 2
1767: PUSH
1768: LD_INT 41
1770: PPUSH
1771: LD_VAR 0 4
1775: PPUSH
1776: CALL 46216 0 2
1780: PUSH
1781: LD_INT 43
1783: PPUSH
1784: LD_VAR 0 4
1788: PPUSH
1789: CALL 46216 0 2
1793: PUSH
1794: LD_INT 45
1796: PPUSH
1797: LD_VAR 0 4
1801: PPUSH
1802: CALL 46216 0 2
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1922
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1819: LD_ADDR_EXP 14
1823: PUSH
1824: LD_INT 72
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: CALL 46216 0 2
1834: PUSH
1835: LD_INT 74
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: CALL 46216 0 2
1845: PUSH
1846: LD_INT 76
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 46216 0 2
1856: PUSH
1857: LD_INT 78
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL 46216 0 2
1867: PUSH
1868: LD_INT 80
1870: PPUSH
1871: LD_INT 1
1873: PPUSH
1874: CALL 46216 0 2
1878: PUSH
1879: LD_INT 82
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: CALL 46216 0 2
1889: PUSH
1890: LD_INT 84
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: CALL 46216 0 2
1900: PUSH
1901: LD_INT 86
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: CALL 46216 0 2
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: ST_TO_ADDR
// end ; end ; if hasSib then
1922: LD_VAR 0 6
1926: IFFALSE 2176
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1928: LD_ADDR_VAR 0 4
1932: PUSH
1933: LD_EXP 8
1937: PUSH
1938: LD_INT 7
1940: ARRAY
1941: PUSH
1942: LD_INT 2
1944: EQUAL
1945: ST_TO_ADDR
// if all then
1946: LD_VAR 0 4
1950: IFFALSE 2073
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1952: LD_ADDR_EXP 15
1956: PUSH
1957: LD_INT 32
1959: PPUSH
1960: LD_VAR 0 4
1964: PPUSH
1965: CALL 46216 0 2
1969: PUSH
1970: LD_INT 34
1972: PPUSH
1973: LD_VAR 0 4
1977: PPUSH
1978: CALL 46216 0 2
1982: PUSH
1983: LD_INT 36
1985: PPUSH
1986: LD_VAR 0 4
1990: PPUSH
1991: CALL 46216 0 2
1995: PUSH
1996: LD_INT 38
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 46216 0 2
2008: PUSH
2009: LD_INT 40
2011: PPUSH
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL 46216 0 2
2021: PUSH
2022: LD_INT 42
2024: PPUSH
2025: LD_VAR 0 4
2029: PPUSH
2030: CALL 46216 0 2
2034: PUSH
2035: LD_INT 44
2037: PPUSH
2038: LD_VAR 0 4
2042: PPUSH
2043: CALL 46216 0 2
2047: PUSH
2048: LD_INT 46
2050: PPUSH
2051: LD_VAR 0 4
2055: PPUSH
2056: CALL 46216 0 2
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// end else
2071: GO 2176
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2073: LD_ADDR_EXP 15
2077: PUSH
2078: LD_INT 73
2080: PPUSH
2081: LD_INT 1
2083: PPUSH
2084: CALL 46216 0 2
2088: PUSH
2089: LD_INT 75
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL 46216 0 2
2099: PUSH
2100: LD_INT 77
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 46216 0 2
2110: PUSH
2111: LD_INT 79
2113: PPUSH
2114: LD_INT 1
2116: PPUSH
2117: CALL 46216 0 2
2121: PUSH
2122: LD_INT 81
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL 46216 0 2
2132: PUSH
2133: LD_INT 83
2135: PPUSH
2136: LD_INT 1
2138: PPUSH
2139: CALL 46216 0 2
2143: PUSH
2144: LD_INT 85
2146: PPUSH
2147: LD_INT 1
2149: PPUSH
2150: CALL 46216 0 2
2154: PUSH
2155: LD_INT 87
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL 46216 0 2
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2176: LD_VAR 0 7
2180: PUSH
2181: LD_INT 1
2183: GREATEREQUAL
2184: IFFALSE 2196
// mpDepots := startPos ;
2186: LD_ADDR_EXP 16
2190: PUSH
2191: LD_VAR 0 8
2195: ST_TO_ADDR
// if baseLevel >= 2 then
2196: LD_VAR 0 7
2200: PUSH
2201: LD_INT 2
2203: GREATEREQUAL
2204: IFFALSE 2621
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 5 ) ] ] ;
2206: LD_ADDR_EXP 19
2210: PUSH
2211: LD_INT 31
2213: PUSH
2214: LD_INT 47
2216: PPUSH
2217: LD_INT 0
2219: PPUSH
2220: CALL 46383 0 2
2224: ADD
2225: PUSH
2226: LD_INT 31
2228: PUSH
2229: LD_INT 48
2231: PPUSH
2232: LD_INT 5
2234: PPUSH
2235: CALL 46383 0 2
2239: ADD
2240: PUSH
2241: LD_INT 4
2243: PUSH
2244: LD_INT 49
2246: PPUSH
2247: LD_INT 5
2249: PPUSH
2250: CALL 46383 0 2
2254: ADD
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 31
2263: PUSH
2264: LD_INT 50
2266: PPUSH
2267: LD_INT 5
2269: PPUSH
2270: CALL 46383 0 2
2274: ADD
2275: PUSH
2276: LD_INT 31
2278: PUSH
2279: LD_INT 51
2281: PPUSH
2282: LD_INT 2
2284: PPUSH
2285: CALL 46383 0 2
2289: ADD
2290: PUSH
2291: LD_INT 4
2293: PUSH
2294: LD_INT 52
2296: PPUSH
2297: LD_INT 5
2299: PPUSH
2300: CALL 46383 0 2
2304: ADD
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 31
2313: PUSH
2314: LD_INT 53
2316: PPUSH
2317: LD_INT 1
2319: PPUSH
2320: CALL 46383 0 2
2324: ADD
2325: PUSH
2326: LD_INT 31
2328: PUSH
2329: LD_INT 54
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL 46383 0 2
2339: ADD
2340: PUSH
2341: LD_INT 4
2343: PUSH
2344: LD_INT 55
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL 46383 0 2
2354: ADD
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 31
2363: PUSH
2364: LD_INT 56
2366: PPUSH
2367: LD_INT 2
2369: PPUSH
2370: CALL 46383 0 2
2374: ADD
2375: PUSH
2376: LD_INT 31
2378: PUSH
2379: LD_INT 57
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: CALL 46383 0 2
2389: ADD
2390: PUSH
2391: LD_INT 4
2393: PUSH
2394: LD_INT 58
2396: PPUSH
2397: LD_INT 2
2399: PPUSH
2400: CALL 46383 0 2
2404: ADD
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 31
2413: PUSH
2414: LD_INT 59
2416: PPUSH
2417: LD_INT 1
2419: PPUSH
2420: CALL 46383 0 2
2424: ADD
2425: PUSH
2426: LD_INT 31
2428: PUSH
2429: LD_INT 60
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL 46383 0 2
2439: ADD
2440: PUSH
2441: LD_INT 4
2443: PUSH
2444: LD_INT 61
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: CALL 46383 0 2
2454: ADD
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 31
2463: PUSH
2464: LD_INT 62
2466: PPUSH
2467: LD_INT 5
2469: PPUSH
2470: CALL 46383 0 2
2474: ADD
2475: PUSH
2476: LD_INT 31
2478: PUSH
2479: LD_INT 63
2481: PPUSH
2482: LD_INT 2
2484: PPUSH
2485: CALL 46383 0 2
2489: ADD
2490: PUSH
2491: LD_INT 4
2493: PUSH
2494: LD_INT 64
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL 46383 0 2
2504: ADD
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 31
2513: PUSH
2514: LD_INT 65
2516: PPUSH
2517: LD_INT 2
2519: PPUSH
2520: CALL 46383 0 2
2524: ADD
2525: PUSH
2526: LD_INT 31
2528: PUSH
2529: LD_INT 66
2531: PPUSH
2532: LD_INT 3
2534: PPUSH
2535: CALL 46383 0 2
2539: ADD
2540: PUSH
2541: LD_INT 4
2543: PUSH
2544: LD_INT 67
2546: PPUSH
2547: LD_INT 2
2549: PPUSH
2550: CALL 46383 0 2
2554: ADD
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 31
2563: PUSH
2564: LD_INT 68
2566: PPUSH
2567: LD_INT 4
2569: PPUSH
2570: CALL 46383 0 2
2574: ADD
2575: PUSH
2576: LD_INT 31
2578: PUSH
2579: LD_INT 69
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: CALL 46383 0 2
2589: ADD
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 70
2596: PPUSH
2597: LD_INT 5
2599: PPUSH
2600: CALL 46383 0 2
2604: ADD
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: ST_TO_ADDR
// end ; if mpTree then
2621: LD_EXP 3
2625: IFFALSE 2637
// SetAreaMapShow ( TreeArea , 1 ) ;
2627: LD_INT 71
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: CALL_OW 424
// end ;
2637: LD_VAR 0 2
2641: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2642: GO 2644
2644: DISABLE
2645: LD_INT 0
2647: PPUSH
2648: PPUSH
2649: PPUSH
2650: PPUSH
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
// begin if not mpShipments then
2655: LD_EXP 29
2659: NOT
2660: IFFALSE 2664
// exit ;
2662: GO 3115
// case mpShipments of 1 :
2664: LD_EXP 29
2668: PUSH
2669: LD_INT 1
2671: DOUBLE
2672: EQUAL
2673: IFTRUE 2677
2675: GO 2712
2677: POP
// begin time := 0 0$30 ;
2678: LD_ADDR_VAR 0 5
2682: PUSH
2683: LD_INT 1050
2685: ST_TO_ADDR
// normalTime := 0 0$30 ;
2686: LD_ADDR_VAR 0 6
2690: PUSH
2691: LD_INT 1050
2693: ST_TO_ADDR
// maxTime := 1 1$20 ;
2694: LD_ADDR_VAR 0 8
2698: PUSH
2699: LD_INT 2800
2701: ST_TO_ADDR
// delayTime := 0 0$5 ;
2702: LD_ADDR_VAR 0 7
2706: PUSH
2707: LD_INT 175
2709: ST_TO_ADDR
// end ; 2 :
2710: GO 2842
2712: LD_INT 2
2714: DOUBLE
2715: EQUAL
2716: IFTRUE 2720
2718: GO 2755
2720: POP
// begin time := 0 0$25 ;
2721: LD_ADDR_VAR 0 5
2725: PUSH
2726: LD_INT 875
2728: ST_TO_ADDR
// normalTime := 0 0$25 ;
2729: LD_ADDR_VAR 0 6
2733: PUSH
2734: LD_INT 875
2736: ST_TO_ADDR
// maxTime := 1 1$10 ;
2737: LD_ADDR_VAR 0 8
2741: PUSH
2742: LD_INT 2450
2744: ST_TO_ADDR
// delayTime := 0 0$4 ;
2745: LD_ADDR_VAR 0 7
2749: PUSH
2750: LD_INT 140
2752: ST_TO_ADDR
// end ; 3 :
2753: GO 2842
2755: LD_INT 3
2757: DOUBLE
2758: EQUAL
2759: IFTRUE 2763
2761: GO 2798
2763: POP
// begin time := 0 0$20 ;
2764: LD_ADDR_VAR 0 5
2768: PUSH
2769: LD_INT 700
2771: ST_TO_ADDR
// normalTime := 0 0$20 ;
2772: LD_ADDR_VAR 0 6
2776: PUSH
2777: LD_INT 700
2779: ST_TO_ADDR
// maxTime := 1 1$00 ;
2780: LD_ADDR_VAR 0 8
2784: PUSH
2785: LD_INT 2100
2787: ST_TO_ADDR
// delayTime := 0 0$3 ;
2788: LD_ADDR_VAR 0 7
2792: PUSH
2793: LD_INT 105
2795: ST_TO_ADDR
// end ; 4 :
2796: GO 2842
2798: LD_INT 4
2800: DOUBLE
2801: EQUAL
2802: IFTRUE 2806
2804: GO 2841
2806: POP
// begin time := 0 0$15 ;
2807: LD_ADDR_VAR 0 5
2811: PUSH
2812: LD_INT 525
2814: ST_TO_ADDR
// normalTime := 0 0$15 ;
2815: LD_ADDR_VAR 0 6
2819: PUSH
2820: LD_INT 525
2822: ST_TO_ADDR
// maxTime := 0 0$55 ;
2823: LD_ADDR_VAR 0 8
2827: PUSH
2828: LD_INT 1925
2830: ST_TO_ADDR
// delayTime := 0 0$2 ;
2831: LD_ADDR_VAR 0 7
2835: PUSH
2836: LD_INT 70
2838: ST_TO_ADDR
// end ; end ;
2839: GO 2842
2841: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 ] ;
2842: LD_ADDR_VAR 0 4
2846: PUSH
2847: LD_INT 10
2849: PUSH
2850: LD_INT 11
2852: PUSH
2853: LD_INT 12
2855: PUSH
2856: LD_INT 13
2858: PUSH
2859: LD_INT 14
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: LD_INT 3
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 5
2888: PUSH
2889: LD_INT 6
2891: PUSH
2892: LD_INT 7
2894: PUSH
2895: LD_INT 8
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: ST_TO_ADDR
// for i := 1 to 8 do
2908: LD_ADDR_VAR 0 1
2912: PUSH
2913: DOUBLE
2914: LD_INT 1
2916: DEC
2917: ST_TO_ADDR
2918: LD_INT 8
2920: PUSH
2921: FOR_TO
2922: IFFALSE 2969
// begin if not mpSidePositions [ i ] then
2924: LD_EXP 9
2928: PUSH
2929: LD_VAR 0 1
2933: ARRAY
2934: NOT
2935: IFFALSE 2939
// continue ;
2937: GO 2921
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_VAR 0 3
2953: PUSH
2954: LD_EXP 9
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ARRAY
2965: ADD
2966: ST_TO_ADDR
// end ;
2967: GO 2921
2969: POP
2970: POP
// x := 1 ;
2971: LD_ADDR_VAR 0 2
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// repeat wait ( time ) ;
2979: LD_VAR 0 5
2983: PPUSH
2984: CALL_OW 67
// x := Inc ( x ) ;
2988: LD_ADDR_VAR 0 2
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL 43037 0 1
3002: ST_TO_ADDR
// if x > 5 then
3003: LD_VAR 0 2
3007: PUSH
3008: LD_INT 5
3010: GREATER
3011: IFFALSE 3021
// x := 1 ;
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: LD_INT 1
3020: ST_TO_ADDR
// for i in areas do
3021: LD_ADDR_VAR 0 1
3025: PUSH
3026: LD_VAR 0 4
3030: PUSH
3031: FOR_IN
3032: IFFALSE 3071
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3034: LD_VAR 0 1
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: CALL_OW 287
3046: PUSH
3047: LD_INT 30
3049: LESS
3050: IFFALSE 3069
// begin CreateCratesArea ( x , i , true ) ;
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: CALL_OW 55
// end ; end ;
3069: GO 3031
3071: POP
3072: POP
// time := time + delayTime ;
3073: LD_ADDR_VAR 0 5
3077: PUSH
3078: LD_VAR 0 5
3082: PUSH
3083: LD_VAR 0 7
3087: PLUS
3088: ST_TO_ADDR
// if time > maxTime then
3089: LD_VAR 0 5
3093: PUSH
3094: LD_VAR 0 8
3098: GREATER
3099: IFFALSE 3111
// time := normalTime ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_VAR 0 6
3110: ST_TO_ADDR
// until false ;
3111: LD_INT 0
3113: IFFALSE 2979
// end ;
3115: PPOPN 8
3117: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus ;
3118: LD_EXP 3
3122: IFFALSE 3445
3124: GO 3126
3126: DISABLE
3127: LD_INT 0
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
// begin treeVisited := [ ] ;
3134: LD_ADDR_EXP 4
3138: PUSH
3139: EMPTY
3140: ST_TO_ADDR
// power := 1 ;
3141: LD_ADDR_VAR 0 4
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3149: LD_INT 35
3151: PPUSH
3152: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
3156: LD_OWVAR 1
3160: PUSH
3161: LD_INT 42000
3163: PUSH
3164: LD_EXP 3
3168: DIV
3169: PPUSH
3170: CALL_OW 574
3174: MOD
3175: PUSH
3176: LD_INT 0
3178: EQUAL
3179: IFFALSE 3196
// power := Inc ( power ) ;
3181: LD_ADDR_VAR 0 4
3185: PUSH
3186: LD_VAR 0 4
3190: PPUSH
3191: CALL 43037 0 1
3195: ST_TO_ADDR
// if power > 10 then
3196: LD_VAR 0 4
3200: PUSH
3201: LD_INT 10
3203: GREATER
3204: IFFALSE 3214
// power := 10 ;
3206: LD_ADDR_VAR 0 4
3210: PUSH
3211: LD_INT 10
3213: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: LD_INT 95
3221: PUSH
3222: LD_INT 71
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 21
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 23
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 69
3265: PUSH
3266: LD_EXP 4
3270: DIFF
3271: ST_TO_ADDR
// if tmp then
3272: LD_VAR 0 2
3276: IFFALSE 3441
// begin for i in tmp do
3278: LD_ADDR_VAR 0 1
3282: PUSH
3283: LD_VAR 0 2
3287: PUSH
3288: FOR_IN
3289: IFFALSE 3439
// begin treeVisited := Join ( treeVisited , i ) ;
3291: LD_ADDR_EXP 4
3295: PUSH
3296: LD_EXP 4
3300: PPUSH
3301: LD_VAR 0 1
3305: PPUSH
3306: CALL 41664 0 2
3310: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
3311: LD_ADDR_VAR 0 5
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: LD_VAR 0 1
3325: PUSH
3326: LD_INT 4
3328: MOD
3329: PUSH
3330: LD_INT 1
3332: PLUS
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 4
3343: PLUS
3344: ST_TO_ADDR
// if bonus > 10 then
3345: LD_VAR 0 5
3349: PUSH
3350: LD_INT 10
3352: GREATER
3353: IFFALSE 3363
// bonus := 10 ;
3355: LD_ADDR_VAR 0 5
3359: PUSH
3360: LD_INT 10
3362: ST_TO_ADDR
// skill := i mod 4 + 1 ;
3363: LD_ADDR_VAR 0 3
3367: PUSH
3368: LD_VAR 0 1
3372: PUSH
3373: LD_INT 4
3375: MOD
3376: PUSH
3377: LD_INT 1
3379: PLUS
3380: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: LD_VAR 0 3
3390: PPUSH
3391: LD_VAR 0 5
3395: PPUSH
3396: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
3400: LD_STRING displayTreeBonusDetails(
3402: PUSH
3403: LD_VAR 0 1
3407: STR
3408: PUSH
3409: LD_STRING ,
3411: STR
3412: PUSH
3413: LD_VAR 0 3
3417: STR
3418: PUSH
3419: LD_STRING ,
3421: STR
3422: PUSH
3423: LD_VAR 0 4
3427: STR
3428: PUSH
3429: LD_STRING )
3431: STR
3432: PPUSH
3433: CALL_OW 559
// end ;
3437: GO 3288
3439: POP
3440: POP
// end ; until false ;
3441: LD_INT 0
3443: IFFALSE 3149
// end ; end_of_file
3445: PPOPN 5
3447: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL 56184 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3457: LD_VAR 0 1
3461: PPUSH
3462: CALL 52166 0 1
// end ;
3466: PPOPN 1
3468: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL 56201 0 1
// end ;
3478: PPOPN 1
3480: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3481: LD_VAR 0 1
3485: PPUSH
3486: CALL 52873 0 1
3490: PPOPN 1
3492: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3493: LD_VAR 0 1
3497: PPUSH
3498: LD_VAR 0 2
3502: PPUSH
3503: CALL 56242 0 2
3507: PPOPN 2
3509: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_VAR 0 3
3524: PPUSH
3525: CALL 52926 0 3
3529: PPOPN 3
3531: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
// if exist_mode then
3536: LD_VAR 0 2
3540: IFFALSE 3586
// begin unit := CreateCharacter ( prefix & ident ) ;
3542: LD_ADDR_VAR 0 5
3546: PUSH
3547: LD_VAR 0 3
3551: PUSH
3552: LD_VAR 0 1
3556: STR
3557: PPUSH
3558: CALL_OW 34
3562: ST_TO_ADDR
// if unit then
3563: LD_VAR 0 5
3567: IFFALSE 3584
// DeleteCharacters ( prefix & ident ) ;
3569: LD_VAR 0 3
3573: PUSH
3574: LD_VAR 0 1
3578: STR
3579: PPUSH
3580: CALL_OW 40
// end else
3584: GO 3601
// unit := NewCharacter ( ident ) ;
3586: LD_ADDR_VAR 0 5
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 25
3600: ST_TO_ADDR
// result := unit ;
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: LD_VAR 0 5
3610: ST_TO_ADDR
// end ;
3611: LD_VAR 0 4
3615: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3616: LD_INT 0
3618: PPUSH
3619: PPUSH
// if exist_mode then
3620: LD_VAR 0 2
3624: IFFALSE 3649
// unit := CreateCharacter ( prefix & ident ) else
3626: LD_ADDR_VAR 0 5
3630: PUSH
3631: LD_VAR 0 3
3635: PUSH
3636: LD_VAR 0 1
3640: STR
3641: PPUSH
3642: CALL_OW 34
3646: ST_TO_ADDR
3647: GO 3664
// unit := NewCharacter ( ident ) ;
3649: LD_ADDR_VAR 0 5
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 25
3663: ST_TO_ADDR
// result := unit ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_VAR 0 5
3673: ST_TO_ADDR
// end ;
3674: LD_VAR 0 4
3678: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3679: LD_INT 0
3681: PPUSH
3682: PPUSH
// if not side or not nation then
3683: LD_VAR 0 1
3687: NOT
3688: IFTRUE 3697
3690: PUSH
3691: LD_VAR 0 2
3695: NOT
3696: OR
3697: IFFALSE 3701
// exit ;
3699: GO 4471
// case nation of nation_american :
3701: LD_VAR 0 2
3705: PUSH
3706: LD_INT 1
3708: DOUBLE
3709: EQUAL
3710: IFTRUE 3714
3712: GO 3928
3714: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3715: LD_ADDR_VAR 0 4
3719: PUSH
3720: LD_INT 35
3722: PUSH
3723: LD_INT 45
3725: PUSH
3726: LD_INT 46
3728: PUSH
3729: LD_INT 47
3731: PUSH
3732: LD_INT 82
3734: PUSH
3735: LD_INT 83
3737: PUSH
3738: LD_INT 84
3740: PUSH
3741: LD_INT 85
3743: PUSH
3744: LD_INT 86
3746: PUSH
3747: LD_INT 1
3749: PUSH
3750: LD_INT 2
3752: PUSH
3753: LD_INT 6
3755: PUSH
3756: LD_INT 15
3758: PUSH
3759: LD_INT 16
3761: PUSH
3762: LD_INT 7
3764: PUSH
3765: LD_INT 12
3767: PUSH
3768: LD_INT 13
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 14
3776: PUSH
3777: LD_INT 20
3779: PUSH
3780: LD_INT 21
3782: PUSH
3783: LD_INT 22
3785: PUSH
3786: LD_INT 25
3788: PUSH
3789: LD_INT 32
3791: PUSH
3792: LD_INT 27
3794: PUSH
3795: LD_INT 36
3797: PUSH
3798: LD_INT 69
3800: PUSH
3801: LD_INT 39
3803: PUSH
3804: LD_INT 34
3806: PUSH
3807: LD_INT 40
3809: PUSH
3810: LD_INT 48
3812: PUSH
3813: LD_INT 49
3815: PUSH
3816: LD_INT 50
3818: PUSH
3819: LD_INT 51
3821: PUSH
3822: LD_INT 52
3824: PUSH
3825: LD_INT 53
3827: PUSH
3828: LD_INT 54
3830: PUSH
3831: LD_INT 55
3833: PUSH
3834: LD_INT 56
3836: PUSH
3837: LD_INT 57
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: LD_INT 59
3845: PUSH
3846: LD_INT 60
3848: PUSH
3849: LD_INT 61
3851: PUSH
3852: LD_INT 62
3854: PUSH
3855: LD_INT 80
3857: PUSH
3858: LD_INT 82
3860: PUSH
3861: LD_INT 83
3863: PUSH
3864: LD_INT 84
3866: PUSH
3867: LD_INT 85
3869: PUSH
3870: LD_INT 86
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: ST_TO_ADDR
3926: GO 4393
3928: LD_INT 2
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 4162
3936: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3937: LD_ADDR_VAR 0 4
3941: PUSH
3942: LD_INT 35
3944: PUSH
3945: LD_INT 45
3947: PUSH
3948: LD_INT 46
3950: PUSH
3951: LD_INT 47
3953: PUSH
3954: LD_INT 82
3956: PUSH
3957: LD_INT 83
3959: PUSH
3960: LD_INT 84
3962: PUSH
3963: LD_INT 85
3965: PUSH
3966: LD_INT 87
3968: PUSH
3969: LD_INT 70
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: LD_INT 11
3977: PUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 4
3983: PUSH
3984: LD_INT 5
3986: PUSH
3987: LD_INT 6
3989: PUSH
3990: LD_INT 15
3992: PUSH
3993: LD_INT 18
3995: PUSH
3996: LD_INT 7
3998: PUSH
3999: LD_INT 17
4001: PUSH
4002: LD_INT 8
4004: PUSH
4005: LD_INT 20
4007: PUSH
4008: LD_INT 21
4010: PUSH
4011: LD_INT 22
4013: PUSH
4014: LD_INT 72
4016: PUSH
4017: LD_INT 26
4019: PUSH
4020: LD_INT 69
4022: PUSH
4023: LD_INT 39
4025: PUSH
4026: LD_INT 40
4028: PUSH
4029: LD_INT 41
4031: PUSH
4032: LD_INT 42
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: LD_INT 48
4040: PUSH
4041: LD_INT 49
4043: PUSH
4044: LD_INT 50
4046: PUSH
4047: LD_INT 51
4049: PUSH
4050: LD_INT 52
4052: PUSH
4053: LD_INT 53
4055: PUSH
4056: LD_INT 54
4058: PUSH
4059: LD_INT 55
4061: PUSH
4062: LD_INT 56
4064: PUSH
4065: LD_INT 60
4067: PUSH
4068: LD_INT 61
4070: PUSH
4071: LD_INT 62
4073: PUSH
4074: LD_INT 66
4076: PUSH
4077: LD_INT 67
4079: PUSH
4080: LD_INT 68
4082: PUSH
4083: LD_INT 81
4085: PUSH
4086: LD_INT 82
4088: PUSH
4089: LD_INT 83
4091: PUSH
4092: LD_INT 84
4094: PUSH
4095: LD_INT 85
4097: PUSH
4098: LD_INT 87
4100: PUSH
4101: LD_INT 88
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: ST_TO_ADDR
4160: GO 4393
4162: LD_INT 3
4164: DOUBLE
4165: EQUAL
4166: IFTRUE 4170
4168: GO 4392
4170: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4171: LD_ADDR_VAR 0 4
4175: PUSH
4176: LD_INT 46
4178: PUSH
4179: LD_INT 47
4181: PUSH
4182: LD_INT 1
4184: PUSH
4185: LD_INT 2
4187: PUSH
4188: LD_INT 82
4190: PUSH
4191: LD_INT 83
4193: PUSH
4194: LD_INT 84
4196: PUSH
4197: LD_INT 85
4199: PUSH
4200: LD_INT 86
4202: PUSH
4203: LD_INT 11
4205: PUSH
4206: LD_INT 9
4208: PUSH
4209: LD_INT 20
4211: PUSH
4212: LD_INT 19
4214: PUSH
4215: LD_INT 21
4217: PUSH
4218: LD_INT 24
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_INT 25
4226: PUSH
4227: LD_INT 28
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 30
4235: PUSH
4236: LD_INT 31
4238: PUSH
4239: LD_INT 37
4241: PUSH
4242: LD_INT 38
4244: PUSH
4245: LD_INT 32
4247: PUSH
4248: LD_INT 27
4250: PUSH
4251: LD_INT 33
4253: PUSH
4254: LD_INT 69
4256: PUSH
4257: LD_INT 39
4259: PUSH
4260: LD_INT 34
4262: PUSH
4263: LD_INT 40
4265: PUSH
4266: LD_INT 71
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 44
4274: PUSH
4275: LD_INT 48
4277: PUSH
4278: LD_INT 49
4280: PUSH
4281: LD_INT 50
4283: PUSH
4284: LD_INT 51
4286: PUSH
4287: LD_INT 52
4289: PUSH
4290: LD_INT 53
4292: PUSH
4293: LD_INT 54
4295: PUSH
4296: LD_INT 55
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 57
4304: PUSH
4305: LD_INT 58
4307: PUSH
4308: LD_INT 59
4310: PUSH
4311: LD_INT 63
4313: PUSH
4314: LD_INT 64
4316: PUSH
4317: LD_INT 65
4319: PUSH
4320: LD_INT 82
4322: PUSH
4323: LD_INT 83
4325: PUSH
4326: LD_INT 84
4328: PUSH
4329: LD_INT 85
4331: PUSH
4332: LD_INT 86
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: ST_TO_ADDR
4390: GO 4393
4392: POP
// if state > - 1 and state < 3 then
4393: LD_VAR 0 3
4397: PUSH
4398: LD_INT 1
4400: NEG
4401: GREATER
4402: IFFALSE 4414
4404: PUSH
4405: LD_VAR 0 3
4409: PUSH
4410: LD_INT 3
4412: LESS
4413: AND
4414: IFFALSE 4471
// for i in result do
4416: LD_ADDR_VAR 0 5
4420: PUSH
4421: LD_VAR 0 4
4425: PUSH
4426: FOR_IN
4427: IFFALSE 4469
// if GetTech ( i , side ) <> state then
4429: LD_VAR 0 5
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 321
4443: PUSH
4444: LD_VAR 0 3
4448: NONEQUAL
4449: IFFALSE 4467
// result := result diff i ;
4451: LD_ADDR_VAR 0 4
4455: PUSH
4456: LD_VAR 0 4
4460: PUSH
4461: LD_VAR 0 5
4465: DIFF
4466: ST_TO_ADDR
4467: GO 4426
4469: POP
4470: POP
// end ;
4471: LD_VAR 0 4
4475: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4476: LD_INT 0
4478: PPUSH
4479: PPUSH
4480: PPUSH
// result := true ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_INT 1
4488: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 480
4503: ST_TO_ADDR
// if not tmp then
4504: LD_VAR 0 5
4508: NOT
4509: IFFALSE 4513
// exit ;
4511: GO 4562
// for i in tmp do
4513: LD_ADDR_VAR 0 4
4517: PUSH
4518: LD_VAR 0 5
4522: PUSH
4523: FOR_IN
4524: IFFALSE 4560
// if GetTech ( i , side ) <> state_researched then
4526: LD_VAR 0 4
4530: PPUSH
4531: LD_VAR 0 1
4535: PPUSH
4536: CALL_OW 321
4540: PUSH
4541: LD_INT 2
4543: NONEQUAL
4544: IFFALSE 4558
// begin result := false ;
4546: LD_ADDR_VAR 0 3
4550: PUSH
4551: LD_INT 0
4553: ST_TO_ADDR
// exit ;
4554: POP
4555: POP
4556: GO 4562
// end ;
4558: GO 4523
4560: POP
4561: POP
// end ;
4562: LD_VAR 0 3
4566: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4567: LD_INT 0
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
4577: PPUSH
4578: PPUSH
4579: PPUSH
4580: PPUSH
4581: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4582: LD_VAR 0 1
4586: NOT
4587: IFTRUE 4604
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 257
4599: PUSH
4600: LD_INT 9
4602: NONEQUAL
4603: OR
4604: IFFALSE 4608
// exit ;
4606: GO 5187
// side := GetSide ( unit ) ;
4608: LD_ADDR_VAR 0 9
4612: PUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: CALL_OW 255
4622: ST_TO_ADDR
// tech_space := tech_spacanom ;
4623: LD_ADDR_VAR 0 12
4627: PUSH
4628: LD_INT 29
4630: ST_TO_ADDR
// tech_time := tech_taurad ;
4631: LD_ADDR_VAR 0 13
4635: PUSH
4636: LD_INT 28
4638: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4639: LD_ADDR_VAR 0 11
4643: PUSH
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 310
4653: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4654: LD_VAR 0 11
4658: PPUSH
4659: CALL_OW 247
4663: PUSH
4664: LD_INT 2
4666: EQUAL
4667: IFFALSE 4671
// exit ;
4669: GO 5187
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4671: LD_ADDR_VAR 0 8
4675: PUSH
4676: LD_INT 81
4678: PUSH
4679: LD_VAR 0 9
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 3
4690: PUSH
4691: LD_INT 21
4693: PUSH
4694: LD_INT 3
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: ST_TO_ADDR
// if not tmp then
4714: LD_VAR 0 8
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 5187
// if in_unit then
4723: LD_VAR 0 11
4727: IFFALSE 4751
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4729: LD_ADDR_VAR 0 10
4733: PUSH
4734: LD_VAR 0 8
4738: PPUSH
4739: LD_VAR 0 11
4743: PPUSH
4744: CALL_OW 74
4748: ST_TO_ADDR
4749: GO 4771
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4751: LD_ADDR_VAR 0 10
4755: PUSH
4756: LD_VAR 0 8
4760: PPUSH
4761: LD_VAR 0 1
4765: PPUSH
4766: CALL_OW 74
4770: ST_TO_ADDR
// if not enemy then
4771: LD_VAR 0 10
4775: NOT
4776: IFFALSE 4780
// exit ;
4778: GO 5187
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4780: LD_VAR 0 11
4784: IFFALSE 4806
4786: PUSH
4787: LD_VAR 0 11
4791: PPUSH
4792: LD_VAR 0 10
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 13
4804: GREATER
4805: AND
4806: IFTRUE 4828
4808: PUSH
4809: LD_VAR 0 1
4813: PPUSH
4814: LD_VAR 0 10
4818: PPUSH
4819: CALL_OW 296
4823: PUSH
4824: LD_INT 12
4826: GREATER
4827: OR
4828: IFFALSE 4832
// exit ;
4830: GO 5187
// missile := [ 1 ] ;
4832: LD_ADDR_VAR 0 14
4836: PUSH
4837: LD_INT 1
4839: PUSH
4840: EMPTY
4841: LIST
4842: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4843: LD_VAR 0 9
4847: PPUSH
4848: LD_VAR 0 12
4852: PPUSH
4853: CALL_OW 325
4857: IFFALSE 4886
// missile := Replace ( missile , missile + 1 , 2 ) ;
4859: LD_ADDR_VAR 0 14
4863: PUSH
4864: LD_VAR 0 14
4868: PPUSH
4869: LD_VAR 0 14
4873: PUSH
4874: LD_INT 1
4876: PLUS
4877: PPUSH
4878: LD_INT 2
4880: PPUSH
4881: CALL_OW 1
4885: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4886: LD_VAR 0 9
4890: PPUSH
4891: LD_VAR 0 13
4895: PPUSH
4896: CALL_OW 325
4900: IFFALSE 4924
4902: PUSH
4903: LD_VAR 0 10
4907: PPUSH
4908: CALL_OW 255
4912: PPUSH
4913: LD_VAR 0 13
4917: PPUSH
4918: CALL_OW 325
4922: NOT
4923: AND
4924: IFFALSE 4953
// missile := Replace ( missile , missile + 1 , 3 ) ;
4926: LD_ADDR_VAR 0 14
4930: PUSH
4931: LD_VAR 0 14
4935: PPUSH
4936: LD_VAR 0 14
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: PPUSH
4945: LD_INT 3
4947: PPUSH
4948: CALL_OW 1
4952: ST_TO_ADDR
// if missile < 2 then
4953: LD_VAR 0 14
4957: PUSH
4958: LD_INT 2
4960: LESS
4961: IFFALSE 4965
// exit ;
4963: GO 5187
// x := GetX ( enemy ) ;
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: LD_VAR 0 10
4974: PPUSH
4975: CALL_OW 250
4979: ST_TO_ADDR
// y := GetY ( enemy ) ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_VAR 0 10
4989: PPUSH
4990: CALL_OW 251
4994: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4995: LD_ADDR_VAR 0 6
4999: PUSH
5000: LD_VAR 0 4
5004: PUSH
5005: LD_INT 1
5007: NEG
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 12
5016: PLUS
5017: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5018: LD_ADDR_VAR 0 7
5022: PUSH
5023: LD_VAR 0 5
5027: PUSH
5028: LD_INT 1
5030: NEG
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL_OW 12
5039: PLUS
5040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5041: LD_VAR 0 6
5045: PPUSH
5046: LD_VAR 0 7
5050: PPUSH
5051: CALL_OW 488
5055: NOT
5056: IFFALSE 5078
// begin _x := x ;
5058: LD_ADDR_VAR 0 6
5062: PUSH
5063: LD_VAR 0 4
5067: ST_TO_ADDR
// _y := y ;
5068: LD_ADDR_VAR 0 7
5072: PUSH
5073: LD_VAR 0 5
5077: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_INT 1
5085: PPUSH
5086: LD_VAR 0 14
5090: PPUSH
5091: CALL_OW 12
5095: ST_TO_ADDR
// case i of 1 :
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 1
5103: DOUBLE
5104: EQUAL
5105: IFTRUE 5109
5107: GO 5126
5109: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5110: LD_VAR 0 1
5114: PPUSH
5115: LD_VAR 0 10
5119: PPUSH
5120: CALL_OW 115
5124: GO 5187
5126: LD_INT 2
5128: DOUBLE
5129: EQUAL
5130: IFTRUE 5134
5132: GO 5156
5134: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5135: LD_VAR 0 1
5139: PPUSH
5140: LD_VAR 0 6
5144: PPUSH
5145: LD_VAR 0 7
5149: PPUSH
5150: CALL_OW 153
5154: GO 5187
5156: LD_INT 3
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5186
5164: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5165: LD_VAR 0 1
5169: PPUSH
5170: LD_VAR 0 6
5174: PPUSH
5175: LD_VAR 0 7
5179: PPUSH
5180: CALL_OW 154
5184: GO 5187
5186: POP
// end ;
5187: LD_VAR 0 2
5191: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5192: LD_INT 0
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
5198: PPUSH
5199: PPUSH
// if not unit or not building then
5200: LD_VAR 0 1
5204: NOT
5205: IFTRUE 5214
5207: PUSH
5208: LD_VAR 0 2
5212: NOT
5213: OR
5214: IFFALSE 5218
// exit ;
5216: GO 5376
// x := GetX ( building ) ;
5218: LD_ADDR_VAR 0 5
5222: PUSH
5223: LD_VAR 0 2
5227: PPUSH
5228: CALL_OW 250
5232: ST_TO_ADDR
// y := GetY ( building ) ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_VAR 0 2
5242: PPUSH
5243: CALL_OW 251
5247: ST_TO_ADDR
// for i := 0 to 5 do
5248: LD_ADDR_VAR 0 4
5252: PUSH
5253: DOUBLE
5254: LD_INT 0
5256: DEC
5257: ST_TO_ADDR
5258: LD_INT 5
5260: PUSH
5261: FOR_TO
5262: IFFALSE 5374
// begin _x := ShiftX ( x , i , 3 ) ;
5264: LD_ADDR_VAR 0 7
5268: PUSH
5269: LD_VAR 0 5
5273: PPUSH
5274: LD_VAR 0 4
5278: PPUSH
5279: LD_INT 3
5281: PPUSH
5282: CALL_OW 272
5286: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5287: LD_ADDR_VAR 0 8
5291: PUSH
5292: LD_VAR 0 6
5296: PPUSH
5297: LD_VAR 0 4
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: CALL_OW 273
5309: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5310: LD_VAR 0 7
5314: PPUSH
5315: LD_VAR 0 8
5319: PPUSH
5320: CALL_OW 488
5324: NOT
5325: IFFALSE 5329
// continue ;
5327: GO 5261
// if HexInfo ( _x , _y ) = 0 then
5329: LD_VAR 0 7
5333: PPUSH
5334: LD_VAR 0 8
5338: PPUSH
5339: CALL_OW 428
5343: PUSH
5344: LD_INT 0
5346: EQUAL
5347: IFFALSE 5372
// begin ComMoveXY ( unit , _x , _y ) ;
5349: LD_VAR 0 1
5353: PPUSH
5354: LD_VAR 0 7
5358: PPUSH
5359: LD_VAR 0 8
5363: PPUSH
5364: CALL_OW 111
// exit ;
5368: POP
5369: POP
5370: GO 5376
// end ; end ;
5372: GO 5261
5374: POP
5375: POP
// end ;
5376: LD_VAR 0 3
5380: RET
// export function ScanBase ( side , base_area ) ; begin
5381: LD_INT 0
5383: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: LD_INT 81
5396: PUSH
5397: LD_VAR 0 1
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 70
5410: ST_TO_ADDR
// end ;
5411: LD_VAR 0 3
5415: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
// result := false ;
5422: LD_ADDR_VAR 0 2
5426: PUSH
5427: LD_INT 0
5429: ST_TO_ADDR
// side := GetSide ( unit ) ;
5430: LD_ADDR_VAR 0 3
5434: PUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 255
5444: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5445: LD_ADDR_VAR 0 4
5449: PUSH
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 248
5459: ST_TO_ADDR
// case nat of 1 :
5460: LD_VAR 0 4
5464: PUSH
5465: LD_INT 1
5467: DOUBLE
5468: EQUAL
5469: IFTRUE 5473
5471: GO 5484
5473: POP
// tech := tech_lassight ; 2 :
5474: LD_ADDR_VAR 0 5
5478: PUSH
5479: LD_INT 12
5481: ST_TO_ADDR
5482: GO 5523
5484: LD_INT 2
5486: DOUBLE
5487: EQUAL
5488: IFTRUE 5492
5490: GO 5503
5492: POP
// tech := tech_mortar ; 3 :
5493: LD_ADDR_VAR 0 5
5497: PUSH
5498: LD_INT 41
5500: ST_TO_ADDR
5501: GO 5523
5503: LD_INT 3
5505: DOUBLE
5506: EQUAL
5507: IFTRUE 5511
5509: GO 5522
5511: POP
// tech := tech_bazooka ; end ;
5512: LD_ADDR_VAR 0 5
5516: PUSH
5517: LD_INT 44
5519: ST_TO_ADDR
5520: GO 5523
5522: POP
// if Researched ( side , tech ) then
5523: LD_VAR 0 3
5527: PPUSH
5528: LD_VAR 0 5
5532: PPUSH
5533: CALL_OW 325
5537: IFFALSE 5564
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: LD_INT 5
5546: PUSH
5547: LD_INT 8
5549: PUSH
5550: LD_INT 9
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: PUSH
5558: LD_VAR 0 4
5562: ARRAY
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 2
5568: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
5573: PPUSH
// if not mines then
5574: LD_VAR 0 2
5578: NOT
5579: IFFALSE 5583
// exit ;
5581: GO 5727
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5583: LD_ADDR_VAR 0 5
5587: PUSH
5588: LD_INT 81
5590: PUSH
5591: LD_VAR 0 1
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: LD_INT 21
5605: PUSH
5606: LD_INT 3
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PPUSH
5621: CALL_OW 69
5625: ST_TO_ADDR
// for i in mines do
5626: LD_ADDR_VAR 0 4
5630: PUSH
5631: LD_VAR 0 2
5635: PUSH
5636: FOR_IN
5637: IFFALSE 5725
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5639: LD_VAR 0 4
5643: PUSH
5644: LD_INT 1
5646: ARRAY
5647: PPUSH
5648: LD_VAR 0 4
5652: PUSH
5653: LD_INT 2
5655: ARRAY
5656: PPUSH
5657: CALL_OW 458
5661: NOT
5662: IFFALSE 5666
// continue ;
5664: GO 5636
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5666: LD_VAR 0 4
5670: PUSH
5671: LD_INT 1
5673: ARRAY
5674: PPUSH
5675: LD_VAR 0 4
5679: PUSH
5680: LD_INT 2
5682: ARRAY
5683: PPUSH
5684: CALL_OW 428
5688: PUSH
5689: LD_VAR 0 5
5693: IN
5694: IFFALSE 5723
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5696: LD_VAR 0 4
5700: PUSH
5701: LD_INT 1
5703: ARRAY
5704: PPUSH
5705: LD_VAR 0 4
5709: PUSH
5710: LD_INT 2
5712: ARRAY
5713: PPUSH
5714: LD_VAR 0 1
5718: PPUSH
5719: CALL_OW 456
// end ;
5723: GO 5636
5725: POP
5726: POP
// end ;
5727: LD_VAR 0 3
5731: RET
// export function Count ( array ) ; begin
5732: LD_INT 0
5734: PPUSH
// result := array + 0 ;
5735: LD_ADDR_VAR 0 2
5739: PUSH
5740: LD_VAR 0 1
5744: PUSH
5745: LD_INT 0
5747: PLUS
5748: ST_TO_ADDR
// end ;
5749: LD_VAR 0 2
5753: RET
// export function IsEmpty ( building ) ; begin
5754: LD_INT 0
5756: PPUSH
// if not building then
5757: LD_VAR 0 1
5761: NOT
5762: IFFALSE 5766
// exit ;
5764: GO 5809
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: LD_VAR 0 1
5775: PUSH
5776: LD_INT 22
5778: PUSH
5779: LD_VAR 0 1
5783: PPUSH
5784: CALL_OW 255
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 58
5795: PUSH
5796: EMPTY
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PPUSH
5803: CALL_OW 69
5807: IN
5808: ST_TO_ADDR
// end ;
5809: LD_VAR 0 2
5813: RET
// export function IsNotFull ( building ) ; var places ; begin
5814: LD_INT 0
5816: PPUSH
5817: PPUSH
// if not building then
5818: LD_VAR 0 1
5822: NOT
5823: IFFALSE 5827
// exit ;
5825: GO 5855
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: LD_VAR 0 1
5836: PPUSH
5837: LD_INT 3
5839: PUSH
5840: LD_INT 62
5842: PUSH
5843: EMPTY
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 72
5854: ST_TO_ADDR
// end ;
5855: LD_VAR 0 2
5859: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5860: LD_INT 0
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
// tmp := [ ] ;
5866: LD_ADDR_VAR 0 3
5870: PUSH
5871: EMPTY
5872: ST_TO_ADDR
// list := [ ] ;
5873: LD_ADDR_VAR 0 5
5877: PUSH
5878: EMPTY
5879: ST_TO_ADDR
// for i = 16 to 25 do
5880: LD_ADDR_VAR 0 4
5884: PUSH
5885: DOUBLE
5886: LD_INT 16
5888: DEC
5889: ST_TO_ADDR
5890: LD_INT 25
5892: PUSH
5893: FOR_TO
5894: IFFALSE 5967
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5896: LD_ADDR_VAR 0 3
5900: PUSH
5901: LD_VAR 0 3
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 255
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: LD_INT 91
5925: PUSH
5926: LD_VAR 0 1
5930: PUSH
5931: LD_INT 6
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: PUSH
5939: LD_INT 30
5941: PUSH
5942: LD_VAR 0 4
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: PPUSH
5959: CALL_OW 69
5963: ADD
5964: ST_TO_ADDR
5965: GO 5893
5967: POP
5968: POP
// for i = 1 to tmp do
5969: LD_ADDR_VAR 0 4
5973: PUSH
5974: DOUBLE
5975: LD_INT 1
5977: DEC
5978: ST_TO_ADDR
5979: LD_VAR 0 3
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6073
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5987: LD_ADDR_VAR 0 5
5991: PUSH
5992: LD_VAR 0 5
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: LD_VAR 0 4
6006: ARRAY
6007: PPUSH
6008: CALL_OW 266
6012: PUSH
6013: LD_VAR 0 3
6017: PUSH
6018: LD_VAR 0 4
6022: ARRAY
6023: PPUSH
6024: CALL_OW 250
6028: PUSH
6029: LD_VAR 0 3
6033: PUSH
6034: LD_VAR 0 4
6038: ARRAY
6039: PPUSH
6040: CALL_OW 251
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: LD_VAR 0 4
6054: ARRAY
6055: PPUSH
6056: CALL_OW 254
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: ADD
6070: ST_TO_ADDR
6071: GO 5984
6073: POP
6074: POP
// result := list ;
6075: LD_ADDR_VAR 0 2
6079: PUSH
6080: LD_VAR 0 5
6084: ST_TO_ADDR
// end ;
6085: LD_VAR 0 2
6089: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6090: LD_INT 0
6092: PPUSH
6093: PPUSH
6094: PPUSH
6095: PPUSH
6096: PPUSH
6097: PPUSH
6098: PPUSH
// if not factory then
6099: LD_VAR 0 1
6103: NOT
6104: IFFALSE 6108
// exit ;
6106: GO 6711
// if control = control_apeman then
6108: LD_VAR 0 4
6112: PUSH
6113: LD_INT 5
6115: EQUAL
6116: IFFALSE 6225
// begin tmp := UnitsInside ( factory ) ;
6118: LD_ADDR_VAR 0 8
6122: PUSH
6123: LD_VAR 0 1
6127: PPUSH
6128: CALL_OW 313
6132: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6133: LD_VAR 0 8
6137: PPUSH
6138: LD_INT 25
6140: PUSH
6141: LD_INT 12
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 72
6152: NOT
6153: IFFALSE 6163
// control := control_manual ;
6155: LD_ADDR_VAR 0 4
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6163: LD_ADDR_VAR 0 8
6167: PUSH
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL 5860 0 1
6177: ST_TO_ADDR
// if tmp then
6178: LD_VAR 0 8
6182: IFFALSE 6225
// begin for i in tmp do
6184: LD_ADDR_VAR 0 7
6188: PUSH
6189: LD_VAR 0 8
6193: PUSH
6194: FOR_IN
6195: IFFALSE 6223
// if i [ 1 ] = b_ext_radio then
6197: LD_VAR 0 7
6201: PUSH
6202: LD_INT 1
6204: ARRAY
6205: PUSH
6206: LD_INT 22
6208: EQUAL
6209: IFFALSE 6221
// begin control := control_remote ;
6211: LD_ADDR_VAR 0 4
6215: PUSH
6216: LD_INT 2
6218: ST_TO_ADDR
// break ;
6219: GO 6223
// end ;
6221: GO 6194
6223: POP
6224: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6225: LD_VAR 0 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PPUSH
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_VAR 0 4
6244: PPUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: CALL_OW 448
6254: IFFALSE 6289
// begin result := [ chassis , engine , control , weapon ] ;
6256: LD_ADDR_VAR 0 6
6260: PUSH
6261: LD_VAR 0 2
6265: PUSH
6266: LD_VAR 0 3
6270: PUSH
6271: LD_VAR 0 4
6275: PUSH
6276: LD_VAR 0 5
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: ST_TO_ADDR
// exit ;
6287: GO 6711
// end ; _chassis := AvailableChassisList ( factory ) ;
6289: LD_ADDR_VAR 0 9
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 475
6303: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6304: LD_ADDR_VAR 0 11
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 476
6318: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6319: LD_ADDR_VAR 0 12
6323: PUSH
6324: LD_VAR 0 1
6328: PPUSH
6329: CALL_OW 477
6333: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6334: LD_ADDR_VAR 0 10
6338: PUSH
6339: LD_VAR 0 1
6343: PPUSH
6344: CALL_OW 478
6348: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6349: LD_VAR 0 9
6353: NOT
6354: IFTRUE 6363
6356: PUSH
6357: LD_VAR 0 11
6361: NOT
6362: OR
6363: IFTRUE 6372
6365: PUSH
6366: LD_VAR 0 12
6370: NOT
6371: OR
6372: IFTRUE 6381
6374: PUSH
6375: LD_VAR 0 10
6379: NOT
6380: OR
6381: IFFALSE 6416
// begin result := [ chassis , engine , control , weapon ] ;
6383: LD_ADDR_VAR 0 6
6387: PUSH
6388: LD_VAR 0 2
6392: PUSH
6393: LD_VAR 0 3
6397: PUSH
6398: LD_VAR 0 4
6402: PUSH
6403: LD_VAR 0 5
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: ST_TO_ADDR
// exit ;
6414: GO 6711
// end ; if not chassis in _chassis then
6416: LD_VAR 0 2
6420: PUSH
6421: LD_VAR 0 9
6425: IN
6426: NOT
6427: IFFALSE 6453
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_VAR 0 9
6438: PUSH
6439: LD_INT 1
6441: PPUSH
6442: LD_VAR 0 9
6446: PPUSH
6447: CALL_OW 12
6451: ARRAY
6452: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6453: LD_VAR 0 2
6457: PPUSH
6458: LD_VAR 0 3
6462: PPUSH
6463: CALL 6716 0 2
6467: NOT
6468: IFFALSE 6529
// repeat engine := _engine [ 1 ] ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_VAR 0 11
6479: PUSH
6480: LD_INT 1
6482: ARRAY
6483: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6484: LD_ADDR_VAR 0 11
6488: PUSH
6489: LD_VAR 0 11
6493: PPUSH
6494: LD_INT 1
6496: PPUSH
6497: CALL_OW 3
6501: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6502: LD_VAR 0 2
6506: PPUSH
6507: LD_VAR 0 3
6511: PPUSH
6512: CALL 6716 0 2
6516: IFTRUE 6527
6518: PUSH
6519: LD_VAR 0 11
6523: PUSH
6524: EMPTY
6525: EQUAL
6526: OR
6527: IFFALSE 6470
// if not control in _control then
6529: LD_VAR 0 4
6533: PUSH
6534: LD_VAR 0 12
6538: IN
6539: NOT
6540: IFFALSE 6566
// control := _control [ rand ( 1 , _control ) ] ;
6542: LD_ADDR_VAR 0 4
6546: PUSH
6547: LD_VAR 0 12
6551: PUSH
6552: LD_INT 1
6554: PPUSH
6555: LD_VAR 0 12
6559: PPUSH
6560: CALL_OW 12
6564: ARRAY
6565: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6566: LD_VAR 0 2
6570: PPUSH
6571: LD_VAR 0 5
6575: PPUSH
6576: CALL 6938 0 2
6580: NOT
6581: IFFALSE 6642
// repeat weapon := _weapon [ 1 ] ;
6583: LD_ADDR_VAR 0 5
6587: PUSH
6588: LD_VAR 0 10
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6597: LD_ADDR_VAR 0 10
6601: PUSH
6602: LD_VAR 0 10
6606: PPUSH
6607: LD_INT 1
6609: PPUSH
6610: CALL_OW 3
6614: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6615: LD_VAR 0 2
6619: PPUSH
6620: LD_VAR 0 5
6624: PPUSH
6625: CALL 6938 0 2
6629: IFTRUE 6640
6631: PUSH
6632: LD_VAR 0 10
6636: PUSH
6637: EMPTY
6638: EQUAL
6639: OR
6640: IFFALSE 6583
// result := [ ] ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: EMPTY
6648: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: LD_VAR 0 4
6668: PPUSH
6669: LD_VAR 0 5
6673: PPUSH
6674: CALL_OW 448
6678: IFFALSE 6711
// result := [ chassis , engine , control , weapon ] ;
6680: LD_ADDR_VAR 0 6
6684: PUSH
6685: LD_VAR 0 2
6689: PUSH
6690: LD_VAR 0 3
6694: PUSH
6695: LD_VAR 0 4
6699: PUSH
6700: LD_VAR 0 5
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: ST_TO_ADDR
// end ;
6711: LD_VAR 0 6
6715: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6716: LD_INT 0
6718: PPUSH
// if not chassis or not engine then
6719: LD_VAR 0 1
6723: NOT
6724: IFTRUE 6733
6726: PUSH
6727: LD_VAR 0 2
6731: NOT
6732: OR
6733: IFFALSE 6737
// exit ;
6735: GO 6933
// case engine of engine_solar :
6737: LD_VAR 0 2
6741: PUSH
6742: LD_INT 2
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6750
6748: GO 6788
6750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6751: LD_ADDR_VAR 0 3
6755: PUSH
6756: LD_INT 11
6758: PUSH
6759: LD_INT 12
6761: PUSH
6762: LD_INT 13
6764: PUSH
6765: LD_INT 14
6767: PUSH
6768: LD_INT 1
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: ST_TO_ADDR
6786: GO 6917
6788: LD_INT 1
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6858
6796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: LD_INT 11
6804: PUSH
6805: LD_INT 12
6807: PUSH
6808: LD_INT 13
6810: PUSH
6811: LD_INT 14
6813: PUSH
6814: LD_INT 1
6816: PUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: LD_INT 21
6831: PUSH
6832: LD_INT 23
6834: PUSH
6835: LD_INT 22
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: ST_TO_ADDR
6856: GO 6917
6858: LD_INT 3
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6916
6866: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_INT 13
6874: PUSH
6875: LD_INT 14
6877: PUSH
6878: LD_INT 2
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: LD_INT 4
6886: PUSH
6887: LD_INT 5
6889: PUSH
6890: LD_INT 21
6892: PUSH
6893: LD_INT 22
6895: PUSH
6896: LD_INT 23
6898: PUSH
6899: LD_INT 24
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: ST_TO_ADDR
6914: GO 6917
6916: POP
// result := ( chassis in result ) ;
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: IN
6932: ST_TO_ADDR
// end ;
6933: LD_VAR 0 3
6937: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6938: LD_INT 0
6940: PPUSH
// if not chassis or not weapon then
6941: LD_VAR 0 1
6945: NOT
6946: IFTRUE 6955
6948: PUSH
6949: LD_VAR 0 2
6953: NOT
6954: OR
6955: IFFALSE 6959
// exit ;
6957: GO 8019
// case weapon of us_machine_gun :
6959: LD_VAR 0 2
6963: PUSH
6964: LD_INT 2
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 7002
6972: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 4
6989: PUSH
6990: LD_INT 5
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 8003
7002: LD_INT 3
7004: DOUBLE
7005: EQUAL
7006: IFTRUE 7010
7008: GO 7040
7010: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 1
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 3
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: LD_INT 5
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: ST_TO_ADDR
7038: GO 8003
7040: LD_INT 11
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7078
7048: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7049: LD_ADDR_VAR 0 3
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: LD_INT 4
7065: PUSH
7066: LD_INT 5
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: ST_TO_ADDR
7076: GO 8003
7078: LD_INT 4
7080: DOUBLE
7081: EQUAL
7082: IFTRUE 7086
7084: GO 7112
7086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_INT 2
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 4
7100: PUSH
7101: LD_INT 5
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: ST_TO_ADDR
7110: GO 8003
7112: LD_INT 5
7114: DOUBLE
7115: EQUAL
7116: IFTRUE 7120
7118: GO 7146
7120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: LD_INT 2
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: LD_INT 4
7134: PUSH
7135: LD_INT 5
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: ST_TO_ADDR
7144: GO 8003
7146: LD_INT 9
7148: DOUBLE
7149: EQUAL
7150: IFTRUE 7154
7152: GO 7180
7154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: LD_INT 2
7162: PUSH
7163: LD_INT 3
7165: PUSH
7166: LD_INT 4
7168: PUSH
7169: LD_INT 5
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: ST_TO_ADDR
7178: GO 8003
7180: LD_INT 7
7182: DOUBLE
7183: EQUAL
7184: IFTRUE 7188
7186: GO 7214
7188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7189: LD_ADDR_VAR 0 3
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 3
7199: PUSH
7200: LD_INT 4
7202: PUSH
7203: LD_INT 5
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 8003
7214: LD_INT 12
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7248
7222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: LD_INT 3
7233: PUSH
7234: LD_INT 4
7236: PUSH
7237: LD_INT 5
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 8003
7248: LD_INT 13
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7282
7256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 8003
7282: LD_INT 14
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7308
7290: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 4
7298: PUSH
7299: LD_INT 5
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: ST_TO_ADDR
7306: GO 8003
7308: LD_INT 6
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7334
7316: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_INT 4
7324: PUSH
7325: LD_INT 5
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: ST_TO_ADDR
7332: GO 8003
7334: LD_INT 10
7336: DOUBLE
7337: EQUAL
7338: IFTRUE 7342
7340: GO 7360
7342: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7343: LD_ADDR_VAR 0 3
7347: PUSH
7348: LD_INT 4
7350: PUSH
7351: LD_INT 5
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: ST_TO_ADDR
7358: GO 8003
7360: LD_INT 22
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7368
7366: GO 7394
7368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7369: LD_ADDR_VAR 0 3
7373: PUSH
7374: LD_INT 11
7376: PUSH
7377: LD_INT 12
7379: PUSH
7380: LD_INT 13
7382: PUSH
7383: LD_INT 14
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: ST_TO_ADDR
7392: GO 8003
7394: LD_INT 23
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7428
7402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7403: LD_ADDR_VAR 0 3
7407: PUSH
7408: LD_INT 11
7410: PUSH
7411: LD_INT 12
7413: PUSH
7414: LD_INT 13
7416: PUSH
7417: LD_INT 14
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: ST_TO_ADDR
7426: GO 8003
7428: LD_INT 24
7430: DOUBLE
7431: EQUAL
7432: IFTRUE 7436
7434: GO 7462
7436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: LD_INT 11
7444: PUSH
7445: LD_INT 12
7447: PUSH
7448: LD_INT 13
7450: PUSH
7451: LD_INT 14
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: ST_TO_ADDR
7460: GO 8003
7462: LD_INT 30
7464: DOUBLE
7465: EQUAL
7466: IFTRUE 7470
7468: GO 7496
7470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: LD_INT 11
7478: PUSH
7479: LD_INT 12
7481: PUSH
7482: LD_INT 13
7484: PUSH
7485: LD_INT 14
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 8003
7496: LD_INT 25
7498: DOUBLE
7499: EQUAL
7500: IFTRUE 7504
7502: GO 7522
7504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7505: LD_ADDR_VAR 0 3
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: ST_TO_ADDR
7520: GO 8003
7522: LD_INT 27
7524: DOUBLE
7525: EQUAL
7526: IFTRUE 7530
7528: GO 7548
7530: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7531: LD_ADDR_VAR 0 3
7535: PUSH
7536: LD_INT 13
7538: PUSH
7539: LD_INT 14
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: ST_TO_ADDR
7546: GO 8003
7548: LD_INT 92
7550: DOUBLE
7551: EQUAL
7552: IFTRUE 7556
7554: GO 7582
7556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7557: LD_ADDR_VAR 0 3
7561: PUSH
7562: LD_INT 11
7564: PUSH
7565: LD_INT 12
7567: PUSH
7568: LD_INT 13
7570: PUSH
7571: LD_INT 14
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: ST_TO_ADDR
7580: GO 8003
7582: LD_INT 28
7584: DOUBLE
7585: EQUAL
7586: IFTRUE 7590
7588: GO 7608
7590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7591: LD_ADDR_VAR 0 3
7595: PUSH
7596: LD_INT 13
7598: PUSH
7599: LD_INT 14
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: ST_TO_ADDR
7606: GO 8003
7608: LD_INT 29
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7634
7616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7617: LD_ADDR_VAR 0 3
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 14
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: ST_TO_ADDR
7632: GO 8003
7634: LD_INT 31
7636: DOUBLE
7637: EQUAL
7638: IFTRUE 7642
7640: GO 7660
7642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7643: LD_ADDR_VAR 0 3
7647: PUSH
7648: LD_INT 13
7650: PUSH
7651: LD_INT 14
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: ST_TO_ADDR
7658: GO 8003
7660: LD_INT 26
7662: DOUBLE
7663: EQUAL
7664: IFTRUE 7668
7666: GO 7686
7668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7669: LD_ADDR_VAR 0 3
7673: PUSH
7674: LD_INT 13
7676: PUSH
7677: LD_INT 14
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: ST_TO_ADDR
7684: GO 8003
7686: LD_INT 42
7688: DOUBLE
7689: EQUAL
7690: IFTRUE 7694
7692: GO 7720
7694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7695: LD_ADDR_VAR 0 3
7699: PUSH
7700: LD_INT 21
7702: PUSH
7703: LD_INT 22
7705: PUSH
7706: LD_INT 23
7708: PUSH
7709: LD_INT 24
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: ST_TO_ADDR
7718: GO 8003
7720: LD_INT 43
7722: DOUBLE
7723: EQUAL
7724: IFTRUE 7728
7726: GO 7754
7728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7729: LD_ADDR_VAR 0 3
7733: PUSH
7734: LD_INT 21
7736: PUSH
7737: LD_INT 22
7739: PUSH
7740: LD_INT 23
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: ST_TO_ADDR
7752: GO 8003
7754: LD_INT 44
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7788
7762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7763: LD_ADDR_VAR 0 3
7767: PUSH
7768: LD_INT 21
7770: PUSH
7771: LD_INT 22
7773: PUSH
7774: LD_INT 23
7776: PUSH
7777: LD_INT 24
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: ST_TO_ADDR
7786: GO 8003
7788: LD_INT 45
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7822
7796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 21
7804: PUSH
7805: LD_INT 22
7807: PUSH
7808: LD_INT 23
7810: PUSH
7811: LD_INT 24
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
7820: GO 8003
7822: LD_INT 49
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7856
7830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_INT 21
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_INT 23
7844: PUSH
7845: LD_INT 24
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: ST_TO_ADDR
7854: GO 8003
7856: LD_INT 51
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 7890
7864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 22
7875: PUSH
7876: LD_INT 23
7878: PUSH
7879: LD_INT 24
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: ST_TO_ADDR
7888: GO 8003
7890: LD_INT 52
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7924
7898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_INT 23
7912: PUSH
7913: LD_INT 24
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: ST_TO_ADDR
7922: GO 8003
7924: LD_INT 53
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7950
7932: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: LD_INT 23
7940: PUSH
7941: LD_INT 24
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: ST_TO_ADDR
7948: GO 8003
7950: LD_INT 46
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 7976
7958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7959: LD_ADDR_VAR 0 3
7963: PUSH
7964: LD_INT 23
7966: PUSH
7967: LD_INT 24
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: ST_TO_ADDR
7974: GO 8003
7976: LD_INT 47
7978: DOUBLE
7979: EQUAL
7980: IFTRUE 7984
7982: GO 8002
7984: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: LD_INT 23
7992: PUSH
7993: LD_INT 24
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: ST_TO_ADDR
8000: GO 8003
8002: POP
// result := ( chassis in result ) ;
8003: LD_ADDR_VAR 0 3
8007: PUSH
8008: LD_VAR 0 1
8012: PUSH
8013: LD_VAR 0 3
8017: IN
8018: ST_TO_ADDR
// end ;
8019: LD_VAR 0 3
8023: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8024: LD_INT 0
8026: PPUSH
8027: PPUSH
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
8032: PPUSH
// result := array ;
8033: LD_ADDR_VAR 0 5
8037: PUSH
8038: LD_VAR 0 1
8042: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8043: LD_VAR 0 1
8047: NOT
8048: IFTRUE 8057
8050: PUSH
8051: LD_VAR 0 2
8055: NOT
8056: OR
8057: IFTRUE 8066
8059: PUSH
8060: LD_VAR 0 3
8064: NOT
8065: OR
8066: IFTRUE 8080
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 1
8078: GREATER
8079: OR
8080: IFTRUE 8094
8082: PUSH
8083: LD_VAR 0 3
8087: PUSH
8088: LD_VAR 0 1
8092: GREATER
8093: OR
8094: IFFALSE 8098
// exit ;
8096: GO 8394
// if direction then
8098: LD_VAR 0 4
8102: IFFALSE 8166
// begin d := 1 ;
8104: LD_ADDR_VAR 0 9
8108: PUSH
8109: LD_INT 1
8111: ST_TO_ADDR
// if i_from > i_to then
8112: LD_VAR 0 2
8116: PUSH
8117: LD_VAR 0 3
8121: GREATER
8122: IFFALSE 8148
// length := ( array - i_from ) + i_to else
8124: LD_ADDR_VAR 0 11
8128: PUSH
8129: LD_VAR 0 1
8133: PUSH
8134: LD_VAR 0 2
8138: MINUS
8139: PUSH
8140: LD_VAR 0 3
8144: PLUS
8145: ST_TO_ADDR
8146: GO 8164
// length := i_to - i_from ;
8148: LD_ADDR_VAR 0 11
8152: PUSH
8153: LD_VAR 0 3
8157: PUSH
8158: LD_VAR 0 2
8162: MINUS
8163: ST_TO_ADDR
// end else
8164: GO 8227
// begin d := - 1 ;
8166: LD_ADDR_VAR 0 9
8170: PUSH
8171: LD_INT 1
8173: NEG
8174: ST_TO_ADDR
// if i_from > i_to then
8175: LD_VAR 0 2
8179: PUSH
8180: LD_VAR 0 3
8184: GREATER
8185: IFFALSE 8205
// length := i_from - i_to else
8187: LD_ADDR_VAR 0 11
8191: PUSH
8192: LD_VAR 0 2
8196: PUSH
8197: LD_VAR 0 3
8201: MINUS
8202: ST_TO_ADDR
8203: GO 8227
// length := ( array - i_to ) + i_from ;
8205: LD_ADDR_VAR 0 11
8209: PUSH
8210: LD_VAR 0 1
8214: PUSH
8215: LD_VAR 0 3
8219: MINUS
8220: PUSH
8221: LD_VAR 0 2
8225: PLUS
8226: ST_TO_ADDR
// end ; if not length then
8227: LD_VAR 0 11
8231: NOT
8232: IFFALSE 8236
// exit ;
8234: GO 8394
// tmp := array ;
8236: LD_ADDR_VAR 0 10
8240: PUSH
8241: LD_VAR 0 1
8245: ST_TO_ADDR
// for i = 1 to length do
8246: LD_ADDR_VAR 0 6
8250: PUSH
8251: DOUBLE
8252: LD_INT 1
8254: DEC
8255: ST_TO_ADDR
8256: LD_VAR 0 11
8260: PUSH
8261: FOR_TO
8262: IFFALSE 8382
// begin for j = 1 to array do
8264: LD_ADDR_VAR 0 7
8268: PUSH
8269: DOUBLE
8270: LD_INT 1
8272: DEC
8273: ST_TO_ADDR
8274: LD_VAR 0 1
8278: PUSH
8279: FOR_TO
8280: IFFALSE 8368
// begin k := j + d ;
8282: LD_ADDR_VAR 0 8
8286: PUSH
8287: LD_VAR 0 7
8291: PUSH
8292: LD_VAR 0 9
8296: PLUS
8297: ST_TO_ADDR
// if k > array then
8298: LD_VAR 0 8
8302: PUSH
8303: LD_VAR 0 1
8307: GREATER
8308: IFFALSE 8318
// k := 1 ;
8310: LD_ADDR_VAR 0 8
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if not k then
8318: LD_VAR 0 8
8322: NOT
8323: IFFALSE 8335
// k := array ;
8325: LD_ADDR_VAR 0 8
8329: PUSH
8330: LD_VAR 0 1
8334: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8335: LD_ADDR_VAR 0 10
8339: PUSH
8340: LD_VAR 0 10
8344: PPUSH
8345: LD_VAR 0 8
8349: PPUSH
8350: LD_VAR 0 1
8354: PUSH
8355: LD_VAR 0 7
8359: ARRAY
8360: PPUSH
8361: CALL_OW 1
8365: ST_TO_ADDR
// end ;
8366: GO 8279
8368: POP
8369: POP
// array := tmp ;
8370: LD_ADDR_VAR 0 1
8374: PUSH
8375: LD_VAR 0 10
8379: ST_TO_ADDR
// end ;
8380: GO 8261
8382: POP
8383: POP
// result := array ;
8384: LD_ADDR_VAR 0 5
8388: PUSH
8389: LD_VAR 0 1
8393: ST_TO_ADDR
// end ;
8394: LD_VAR 0 5
8398: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8399: LD_INT 0
8401: PPUSH
8402: PPUSH
// result := 0 ;
8403: LD_ADDR_VAR 0 3
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// if not array or not value in array then
8411: LD_VAR 0 1
8415: NOT
8416: IFTRUE 8431
8418: PUSH
8419: LD_VAR 0 2
8423: PUSH
8424: LD_VAR 0 1
8428: IN
8429: NOT
8430: OR
8431: IFFALSE 8435
// exit ;
8433: GO 8489
// for i = 1 to array do
8435: LD_ADDR_VAR 0 4
8439: PUSH
8440: DOUBLE
8441: LD_INT 1
8443: DEC
8444: ST_TO_ADDR
8445: LD_VAR 0 1
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8487
// if value = array [ i ] then
8453: LD_VAR 0 2
8457: PUSH
8458: LD_VAR 0 1
8462: PUSH
8463: LD_VAR 0 4
8467: ARRAY
8468: EQUAL
8469: IFFALSE 8485
// begin result := i ;
8471: LD_ADDR_VAR 0 3
8475: PUSH
8476: LD_VAR 0 4
8480: ST_TO_ADDR
// exit ;
8481: POP
8482: POP
8483: GO 8489
// end ;
8485: GO 8450
8487: POP
8488: POP
// end ;
8489: LD_VAR 0 3
8493: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8494: LD_INT 0
8496: PPUSH
// vc_chassis := chassis ;
8497: LD_ADDR_OWVAR 37
8501: PUSH
8502: LD_VAR 0 1
8506: ST_TO_ADDR
// vc_engine := engine ;
8507: LD_ADDR_OWVAR 39
8511: PUSH
8512: LD_VAR 0 2
8516: ST_TO_ADDR
// vc_control := control ;
8517: LD_ADDR_OWVAR 38
8521: PUSH
8522: LD_VAR 0 3
8526: ST_TO_ADDR
// vc_weapon := weapon ;
8527: LD_ADDR_OWVAR 40
8531: PUSH
8532: LD_VAR 0 4
8536: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8537: LD_ADDR_OWVAR 41
8541: PUSH
8542: LD_VAR 0 5
8546: ST_TO_ADDR
// end ;
8547: LD_VAR 0 6
8551: RET
// export function WantPlant ( unit ) ; var task ; begin
8552: LD_INT 0
8554: PPUSH
8555: PPUSH
// result := false ;
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8564: LD_ADDR_VAR 0 3
8568: PUSH
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 437
8578: ST_TO_ADDR
// if task then
8579: LD_VAR 0 3
8583: IFFALSE 8611
// if task [ 1 ] [ 1 ] = p then
8585: LD_VAR 0 3
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PUSH
8594: LD_INT 1
8596: ARRAY
8597: PUSH
8598: LD_STRING p
8600: EQUAL
8601: IFFALSE 8611
// result := true ;
8603: LD_ADDR_VAR 0 2
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// end ;
8611: LD_VAR 0 2
8615: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8616: LD_INT 0
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// if pos < 1 then
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 1
8629: LESS
8630: IFFALSE 8634
// exit ;
8632: GO 8937
// if pos = 1 then
8634: LD_VAR 0 2
8638: PUSH
8639: LD_INT 1
8641: EQUAL
8642: IFFALSE 8675
// result := Replace ( arr , pos [ 1 ] , value ) else
8644: LD_ADDR_VAR 0 4
8648: PUSH
8649: LD_VAR 0 1
8653: PPUSH
8654: LD_VAR 0 2
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 3
8667: PPUSH
8668: CALL_OW 1
8672: ST_TO_ADDR
8673: GO 8937
// begin tmp := arr ;
8675: LD_ADDR_VAR 0 6
8679: PUSH
8680: LD_VAR 0 1
8684: ST_TO_ADDR
// s_arr := [ tmp ] ;
8685: LD_ADDR_VAR 0 7
8689: PUSH
8690: LD_VAR 0 6
8694: PUSH
8695: EMPTY
8696: LIST
8697: ST_TO_ADDR
// for i = 1 to pos - 1 do
8698: LD_ADDR_VAR 0 5
8702: PUSH
8703: DOUBLE
8704: LD_INT 1
8706: DEC
8707: ST_TO_ADDR
8708: LD_VAR 0 2
8712: PUSH
8713: LD_INT 1
8715: MINUS
8716: PUSH
8717: FOR_TO
8718: IFFALSE 8763
// begin tmp := tmp [ pos [ i ] ] ;
8720: LD_ADDR_VAR 0 6
8724: PUSH
8725: LD_VAR 0 6
8729: PUSH
8730: LD_VAR 0 2
8734: PUSH
8735: LD_VAR 0 5
8739: ARRAY
8740: ARRAY
8741: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8742: LD_ADDR_VAR 0 7
8746: PUSH
8747: LD_VAR 0 7
8751: PUSH
8752: LD_VAR 0 6
8756: PUSH
8757: EMPTY
8758: LIST
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8717
8763: POP
8764: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8765: LD_ADDR_VAR 0 6
8769: PUSH
8770: LD_VAR 0 6
8774: PPUSH
8775: LD_VAR 0 2
8779: PUSH
8780: LD_VAR 0 2
8784: ARRAY
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 1
8795: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8796: LD_ADDR_VAR 0 7
8800: PUSH
8801: LD_VAR 0 7
8805: PPUSH
8806: LD_VAR 0 7
8810: PPUSH
8811: LD_VAR 0 6
8815: PPUSH
8816: CALL_OW 1
8820: ST_TO_ADDR
// for i = s_arr downto 2 do
8821: LD_ADDR_VAR 0 5
8825: PUSH
8826: DOUBLE
8827: LD_VAR 0 7
8831: INC
8832: ST_TO_ADDR
8833: LD_INT 2
8835: PUSH
8836: FOR_DOWNTO
8837: IFFALSE 8921
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8839: LD_ADDR_VAR 0 6
8843: PUSH
8844: LD_VAR 0 7
8848: PUSH
8849: LD_VAR 0 5
8853: PUSH
8854: LD_INT 1
8856: MINUS
8857: ARRAY
8858: PPUSH
8859: LD_VAR 0 2
8863: PUSH
8864: LD_VAR 0 5
8868: PUSH
8869: LD_INT 1
8871: MINUS
8872: ARRAY
8873: PPUSH
8874: LD_VAR 0 7
8878: PUSH
8879: LD_VAR 0 5
8883: ARRAY
8884: PPUSH
8885: CALL_OW 1
8889: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8890: LD_ADDR_VAR 0 7
8894: PUSH
8895: LD_VAR 0 7
8899: PPUSH
8900: LD_VAR 0 5
8904: PUSH
8905: LD_INT 1
8907: MINUS
8908: PPUSH
8909: LD_VAR 0 6
8913: PPUSH
8914: CALL_OW 1
8918: ST_TO_ADDR
// end ;
8919: GO 8836
8921: POP
8922: POP
// result := s_arr [ 1 ] ;
8923: LD_ADDR_VAR 0 4
8927: PUSH
8928: LD_VAR 0 7
8932: PUSH
8933: LD_INT 1
8935: ARRAY
8936: ST_TO_ADDR
// end ; end ;
8937: LD_VAR 0 4
8941: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8942: LD_INT 0
8944: PPUSH
8945: PPUSH
// if not list then
8946: LD_VAR 0 1
8950: NOT
8951: IFFALSE 8955
// exit ;
8953: GO 9046
// i := list [ pos1 ] ;
8955: LD_ADDR_VAR 0 5
8959: PUSH
8960: LD_VAR 0 1
8964: PUSH
8965: LD_VAR 0 2
8969: ARRAY
8970: ST_TO_ADDR
// if not i then
8971: LD_VAR 0 5
8975: NOT
8976: IFFALSE 8980
// exit ;
8978: GO 9046
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8980: LD_ADDR_VAR 0 1
8984: PUSH
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: LD_VAR 0 1
8999: PUSH
9000: LD_VAR 0 3
9004: ARRAY
9005: PPUSH
9006: CALL_OW 1
9010: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9011: LD_ADDR_VAR 0 1
9015: PUSH
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_VAR 0 3
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: CALL_OW 1
9035: ST_TO_ADDR
// result := list ;
9036: LD_ADDR_VAR 0 4
9040: PUSH
9041: LD_VAR 0 1
9045: ST_TO_ADDR
// end ;
9046: LD_VAR 0 4
9050: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9051: LD_INT 0
9053: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9054: LD_ADDR_VAR 0 5
9058: PUSH
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 250
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 251
9078: PPUSH
9079: LD_VAR 0 2
9083: PPUSH
9084: LD_VAR 0 3
9088: PPUSH
9089: LD_VAR 0 4
9093: PPUSH
9094: CALL 9476 0 5
9098: ST_TO_ADDR
// end ;
9099: LD_VAR 0 5
9103: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
9108: PPUSH
9109: PPUSH
// if not list or not unit then
9110: LD_VAR 0 2
9114: NOT
9115: IFTRUE 9124
9117: PUSH
9118: LD_VAR 0 1
9122: NOT
9123: OR
9124: IFFALSE 9128
// exit ;
9126: GO 9471
// result := [ ] ;
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: EMPTY
9134: ST_TO_ADDR
// for i in list do
9135: LD_ADDR_VAR 0 6
9139: PUSH
9140: LD_VAR 0 2
9144: PUSH
9145: FOR_IN
9146: IFFALSE 9364
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9148: LD_ADDR_VAR 0 8
9152: PUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_VAR 0 6
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PPUSH
9167: LD_VAR 0 6
9171: PUSH
9172: LD_INT 2
9174: ARRAY
9175: PPUSH
9176: CALL_OW 297
9180: ST_TO_ADDR
// if not Count ( result ) then
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL 5732 0 1
9190: NOT
9191: IFFALSE 9224
// begin result := Join ( result , [ i , tmp ] ) ;
9193: LD_ADDR_VAR 0 5
9197: PUSH
9198: LD_VAR 0 5
9202: PPUSH
9203: LD_VAR 0 6
9207: PUSH
9208: LD_VAR 0 8
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL 41664 0 2
9221: ST_TO_ADDR
// continue ;
9222: GO 9145
// end ; if result [ result ] [ 2 ] <= tmp then
9224: LD_VAR 0 5
9228: PUSH
9229: LD_VAR 0 5
9233: ARRAY
9234: PUSH
9235: LD_INT 2
9237: ARRAY
9238: PUSH
9239: LD_VAR 0 8
9243: LESSEQUAL
9244: IFFALSE 9277
// result := Join ( result , [ i , tmp ] ) else
9246: LD_ADDR_VAR 0 5
9250: PUSH
9251: LD_VAR 0 5
9255: PPUSH
9256: LD_VAR 0 6
9260: PUSH
9261: LD_VAR 0 8
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL 41664 0 2
9274: ST_TO_ADDR
9275: GO 9362
// begin for j := 1 to Count ( result ) do
9277: LD_ADDR_VAR 0 7
9281: PUSH
9282: DOUBLE
9283: LD_INT 1
9285: DEC
9286: ST_TO_ADDR
9287: LD_VAR 0 5
9291: PPUSH
9292: CALL 5732 0 1
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9360
// begin if tmp < result [ j ] [ 2 ] then
9300: LD_VAR 0 8
9304: PUSH
9305: LD_VAR 0 5
9309: PUSH
9310: LD_VAR 0 7
9314: ARRAY
9315: PUSH
9316: LD_INT 2
9318: ARRAY
9319: LESS
9320: IFFALSE 9358
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9322: LD_ADDR_VAR 0 5
9326: PUSH
9327: LD_VAR 0 5
9331: PPUSH
9332: LD_VAR 0 7
9336: PPUSH
9337: LD_VAR 0 6
9341: PUSH
9342: LD_VAR 0 8
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 2
9355: ST_TO_ADDR
// break ;
9356: GO 9360
// end ; end ;
9358: GO 9297
9360: POP
9361: POP
// end ; end ;
9362: GO 9145
9364: POP
9365: POP
// if result and not asc then
9366: LD_VAR 0 5
9370: IFFALSE 9379
9372: PUSH
9373: LD_VAR 0 3
9377: NOT
9378: AND
9379: IFFALSE 9396
// result := ReverseArray ( result ) ;
9381: LD_ADDR_VAR 0 5
9385: PUSH
9386: LD_VAR 0 5
9390: PPUSH
9391: CALL 36754 0 1
9395: ST_TO_ADDR
// tmp := [ ] ;
9396: LD_ADDR_VAR 0 8
9400: PUSH
9401: EMPTY
9402: ST_TO_ADDR
// if mode then
9403: LD_VAR 0 4
9407: IFFALSE 9471
// begin for i := 1 to result do
9409: LD_ADDR_VAR 0 6
9413: PUSH
9414: DOUBLE
9415: LD_INT 1
9417: DEC
9418: ST_TO_ADDR
9419: LD_VAR 0 5
9423: PUSH
9424: FOR_TO
9425: IFFALSE 9459
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9427: LD_ADDR_VAR 0 8
9431: PUSH
9432: LD_VAR 0 8
9436: PPUSH
9437: LD_VAR 0 5
9441: PUSH
9442: LD_VAR 0 6
9446: ARRAY
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL 41664 0 2
9456: ST_TO_ADDR
9457: GO 9424
9459: POP
9460: POP
// result := tmp ;
9461: LD_ADDR_VAR 0 5
9465: PUSH
9466: LD_VAR 0 8
9470: ST_TO_ADDR
// end ; end ;
9471: LD_VAR 0 5
9475: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
9480: PPUSH
9481: PPUSH
// if not list then
9482: LD_VAR 0 3
9486: NOT
9487: IFFALSE 9491
// exit ;
9489: GO 9881
// result := [ ] ;
9491: LD_ADDR_VAR 0 6
9495: PUSH
9496: EMPTY
9497: ST_TO_ADDR
// for i in list do
9498: LD_ADDR_VAR 0 7
9502: PUSH
9503: LD_VAR 0 3
9507: PUSH
9508: FOR_IN
9509: IFFALSE 9711
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9511: LD_ADDR_VAR 0 9
9515: PUSH
9516: LD_VAR 0 7
9520: PPUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_VAR 0 2
9530: PPUSH
9531: CALL_OW 297
9535: ST_TO_ADDR
// if not result then
9536: LD_VAR 0 6
9540: NOT
9541: IFFALSE 9567
// result := [ [ i , tmp ] ] else
9543: LD_ADDR_VAR 0 6
9547: PUSH
9548: LD_VAR 0 7
9552: PUSH
9553: LD_VAR 0 9
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: ST_TO_ADDR
9565: GO 9709
// begin if result [ result ] [ 2 ] <= tmp then
9567: LD_VAR 0 6
9571: PUSH
9572: LD_VAR 0 6
9576: ARRAY
9577: PUSH
9578: LD_INT 2
9580: ARRAY
9581: PUSH
9582: LD_VAR 0 9
9586: LESSEQUAL
9587: IFFALSE 9629
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9589: LD_ADDR_VAR 0 6
9593: PUSH
9594: LD_VAR 0 6
9598: PPUSH
9599: LD_VAR 0 6
9603: PUSH
9604: LD_INT 1
9606: PLUS
9607: PPUSH
9608: LD_VAR 0 7
9612: PUSH
9613: LD_VAR 0 9
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL_OW 2
9626: ST_TO_ADDR
9627: GO 9709
// for j := 1 to result do
9629: LD_ADDR_VAR 0 8
9633: PUSH
9634: DOUBLE
9635: LD_INT 1
9637: DEC
9638: ST_TO_ADDR
9639: LD_VAR 0 6
9643: PUSH
9644: FOR_TO
9645: IFFALSE 9707
// begin if tmp < result [ j ] [ 2 ] then
9647: LD_VAR 0 9
9651: PUSH
9652: LD_VAR 0 6
9656: PUSH
9657: LD_VAR 0 8
9661: ARRAY
9662: PUSH
9663: LD_INT 2
9665: ARRAY
9666: LESS
9667: IFFALSE 9705
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9669: LD_ADDR_VAR 0 6
9673: PUSH
9674: LD_VAR 0 6
9678: PPUSH
9679: LD_VAR 0 8
9683: PPUSH
9684: LD_VAR 0 7
9688: PUSH
9689: LD_VAR 0 9
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 2
9702: ST_TO_ADDR
// break ;
9703: GO 9707
// end ; end ;
9705: GO 9644
9707: POP
9708: POP
// end ; end ;
9709: GO 9508
9711: POP
9712: POP
// if result and not asc then
9713: LD_VAR 0 6
9717: IFFALSE 9726
9719: PUSH
9720: LD_VAR 0 4
9724: NOT
9725: AND
9726: IFFALSE 9801
// begin tmp := result ;
9728: LD_ADDR_VAR 0 9
9732: PUSH
9733: LD_VAR 0 6
9737: ST_TO_ADDR
// for i = tmp downto 1 do
9738: LD_ADDR_VAR 0 7
9742: PUSH
9743: DOUBLE
9744: LD_VAR 0 9
9748: INC
9749: ST_TO_ADDR
9750: LD_INT 1
9752: PUSH
9753: FOR_DOWNTO
9754: IFFALSE 9799
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9756: LD_ADDR_VAR 0 6
9760: PUSH
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_VAR 0 9
9770: PUSH
9771: LD_VAR 0 7
9775: MINUS
9776: PUSH
9777: LD_INT 1
9779: PLUS
9780: PPUSH
9781: LD_VAR 0 9
9785: PUSH
9786: LD_VAR 0 7
9790: ARRAY
9791: PPUSH
9792: CALL_OW 1
9796: ST_TO_ADDR
9797: GO 9753
9799: POP
9800: POP
// end ; tmp := [ ] ;
9801: LD_ADDR_VAR 0 9
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// if mode then
9808: LD_VAR 0 5
9812: IFFALSE 9881
// begin for i = 1 to result do
9814: LD_ADDR_VAR 0 7
9818: PUSH
9819: DOUBLE
9820: LD_INT 1
9822: DEC
9823: ST_TO_ADDR
9824: LD_VAR 0 6
9828: PUSH
9829: FOR_TO
9830: IFFALSE 9869
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9832: LD_ADDR_VAR 0 9
9836: PUSH
9837: LD_VAR 0 9
9841: PPUSH
9842: LD_VAR 0 7
9846: PPUSH
9847: LD_VAR 0 6
9851: PUSH
9852: LD_VAR 0 7
9856: ARRAY
9857: PUSH
9858: LD_INT 1
9860: ARRAY
9861: PPUSH
9862: CALL_OW 1
9866: ST_TO_ADDR
9867: GO 9829
9869: POP
9870: POP
// result := tmp ;
9871: LD_ADDR_VAR 0 6
9875: PUSH
9876: LD_VAR 0 9
9880: ST_TO_ADDR
// end ; end ;
9881: LD_VAR 0 6
9885: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9894: LD_ADDR_VAR 0 5
9898: PUSH
9899: LD_INT 0
9901: PUSH
9902: LD_INT 0
9904: PUSH
9905: LD_INT 0
9907: PUSH
9908: EMPTY
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: ST_TO_ADDR
// if not x or not y then
9916: LD_VAR 0 2
9920: NOT
9921: IFTRUE 9930
9923: PUSH
9924: LD_VAR 0 3
9928: NOT
9929: OR
9930: IFFALSE 9934
// exit ;
9932: GO 11590
// if not range then
9934: LD_VAR 0 4
9938: NOT
9939: IFFALSE 9949
// range := 10 ;
9941: LD_ADDR_VAR 0 4
9945: PUSH
9946: LD_INT 10
9948: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9949: LD_ADDR_VAR 0 8
9953: PUSH
9954: LD_INT 81
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 92
9968: PUSH
9969: LD_VAR 0 2
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 3
9992: PUSH
9993: LD_INT 21
9995: PUSH
9996: LD_INT 3
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: PPUSH
10012: CALL_OW 69
10016: ST_TO_ADDR
// if not tmp then
10017: LD_VAR 0 8
10021: NOT
10022: IFFALSE 10026
// exit ;
10024: GO 11590
// for i in tmp do
10026: LD_ADDR_VAR 0 6
10030: PUSH
10031: LD_VAR 0 8
10035: PUSH
10036: FOR_IN
10037: IFFALSE 11565
// begin points := [ 0 , 0 , 0 ] ;
10039: LD_ADDR_VAR 0 9
10043: PUSH
10044: LD_INT 0
10046: PUSH
10047: LD_INT 0
10049: PUSH
10050: LD_INT 0
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: ST_TO_ADDR
// bpoints := 1 ;
10058: LD_ADDR_VAR 0 10
10062: PUSH
10063: LD_INT 1
10065: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10066: LD_VAR 0 6
10070: PPUSH
10071: CALL_OW 247
10075: PUSH
10076: LD_INT 1
10078: DOUBLE
10079: EQUAL
10080: IFTRUE 10084
10082: GO 10666
10084: POP
// begin if GetClass ( i ) = 1 then
10085: LD_VAR 0 6
10089: PPUSH
10090: CALL_OW 257
10094: PUSH
10095: LD_INT 1
10097: EQUAL
10098: IFFALSE 10119
// points := [ 10 , 5 , 3 ] ;
10100: LD_ADDR_VAR 0 9
10104: PUSH
10105: LD_INT 10
10107: PUSH
10108: LD_INT 5
10110: PUSH
10111: LD_INT 3
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10119: LD_VAR 0 6
10123: PPUSH
10124: CALL_OW 257
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: LD_INT 4
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: IN
10143: IFFALSE 10164
// points := [ 3 , 2 , 1 ] ;
10145: LD_ADDR_VAR 0 9
10149: PUSH
10150: LD_INT 3
10152: PUSH
10153: LD_INT 2
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10164: LD_VAR 0 6
10168: PPUSH
10169: CALL_OW 257
10173: PUSH
10174: LD_INT 5
10176: EQUAL
10177: IFFALSE 10198
// points := [ 130 , 5 , 2 ] ;
10179: LD_ADDR_VAR 0 9
10183: PUSH
10184: LD_INT 130
10186: PUSH
10187: LD_INT 5
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10198: LD_VAR 0 6
10202: PPUSH
10203: CALL_OW 257
10207: PUSH
10208: LD_INT 8
10210: EQUAL
10211: IFFALSE 10232
// points := [ 35 , 35 , 30 ] ;
10213: LD_ADDR_VAR 0 9
10217: PUSH
10218: LD_INT 35
10220: PUSH
10221: LD_INT 35
10223: PUSH
10224: LD_INT 30
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10232: LD_VAR 0 6
10236: PPUSH
10237: CALL_OW 257
10241: PUSH
10242: LD_INT 9
10244: EQUAL
10245: IFFALSE 10266
// points := [ 20 , 55 , 40 ] ;
10247: LD_ADDR_VAR 0 9
10251: PUSH
10252: LD_INT 20
10254: PUSH
10255: LD_INT 55
10257: PUSH
10258: LD_INT 40
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10266: LD_VAR 0 6
10270: PPUSH
10271: CALL_OW 257
10275: PUSH
10276: LD_INT 12
10278: PUSH
10279: LD_INT 16
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: IN
10286: IFFALSE 10307
// points := [ 5 , 3 , 2 ] ;
10288: LD_ADDR_VAR 0 9
10292: PUSH
10293: LD_INT 5
10295: PUSH
10296: LD_INT 3
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10307: LD_VAR 0 6
10311: PPUSH
10312: CALL_OW 257
10316: PUSH
10317: LD_INT 17
10319: EQUAL
10320: IFFALSE 10341
// points := [ 100 , 50 , 75 ] ;
10322: LD_ADDR_VAR 0 9
10326: PUSH
10327: LD_INT 100
10329: PUSH
10330: LD_INT 50
10332: PUSH
10333: LD_INT 75
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10341: LD_VAR 0 6
10345: PPUSH
10346: CALL_OW 257
10350: PUSH
10351: LD_INT 15
10353: EQUAL
10354: IFFALSE 10375
// points := [ 10 , 5 , 3 ] ;
10356: LD_ADDR_VAR 0 9
10360: PUSH
10361: LD_INT 10
10363: PUSH
10364: LD_INT 5
10366: PUSH
10367: LD_INT 3
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10375: LD_VAR 0 6
10379: PPUSH
10380: CALL_OW 257
10384: PUSH
10385: LD_INT 14
10387: EQUAL
10388: IFFALSE 10409
// points := [ 10 , 0 , 0 ] ;
10390: LD_ADDR_VAR 0 9
10394: PUSH
10395: LD_INT 10
10397: PUSH
10398: LD_INT 0
10400: PUSH
10401: LD_INT 0
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10409: LD_VAR 0 6
10413: PPUSH
10414: CALL_OW 257
10418: PUSH
10419: LD_INT 11
10421: EQUAL
10422: IFFALSE 10443
// points := [ 30 , 10 , 5 ] ;
10424: LD_ADDR_VAR 0 9
10428: PUSH
10429: LD_INT 30
10431: PUSH
10432: LD_INT 10
10434: PUSH
10435: LD_INT 5
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10443: LD_VAR 0 1
10447: PPUSH
10448: LD_INT 5
10450: PPUSH
10451: CALL_OW 321
10455: PUSH
10456: LD_INT 2
10458: EQUAL
10459: IFFALSE 10476
// bpoints := bpoints * 1.8 ;
10461: LD_ADDR_VAR 0 10
10465: PUSH
10466: LD_VAR 0 10
10470: PUSH
10471: LD_REAL  1.80000000000000E+0000
10474: MUL
10475: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10476: LD_VAR 0 6
10480: PPUSH
10481: CALL_OW 257
10485: PUSH
10486: LD_INT 1
10488: PUSH
10489: LD_INT 2
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 4
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: IN
10504: IFFALSE 10524
10506: PUSH
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_INT 51
10514: PPUSH
10515: CALL_OW 321
10519: PUSH
10520: LD_INT 2
10522: EQUAL
10523: AND
10524: IFFALSE 10541
// bpoints := bpoints * 1.2 ;
10526: LD_ADDR_VAR 0 10
10530: PUSH
10531: LD_VAR 0 10
10535: PUSH
10536: LD_REAL  1.20000000000000E+0000
10539: MUL
10540: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10541: LD_VAR 0 6
10545: PPUSH
10546: CALL_OW 257
10550: PUSH
10551: LD_INT 5
10553: PUSH
10554: LD_INT 7
10556: PUSH
10557: LD_INT 9
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: IN
10565: IFFALSE 10585
10567: PUSH
10568: LD_VAR 0 1
10572: PPUSH
10573: LD_INT 52
10575: PPUSH
10576: CALL_OW 321
10580: PUSH
10581: LD_INT 2
10583: EQUAL
10584: AND
10585: IFFALSE 10602
// bpoints := bpoints * 1.5 ;
10587: LD_ADDR_VAR 0 10
10591: PUSH
10592: LD_VAR 0 10
10596: PUSH
10597: LD_REAL  1.50000000000000E+0000
10600: MUL
10601: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10602: LD_VAR 0 1
10606: PPUSH
10607: LD_INT 66
10609: PPUSH
10610: CALL_OW 321
10614: PUSH
10615: LD_INT 2
10617: EQUAL
10618: IFFALSE 10635
// bpoints := bpoints * 1.1 ;
10620: LD_ADDR_VAR 0 10
10624: PUSH
10625: LD_VAR 0 10
10629: PUSH
10630: LD_REAL  1.10000000000000E+0000
10633: MUL
10634: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10635: LD_ADDR_VAR 0 10
10639: PUSH
10640: LD_VAR 0 10
10644: PUSH
10645: LD_VAR 0 6
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 259
10657: PUSH
10658: LD_REAL  1.15000000000000E+0000
10661: MUL
10662: MUL
10663: ST_TO_ADDR
// end ; unit_vehicle :
10664: GO 11494
10666: LD_INT 2
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 11482
10674: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10675: LD_VAR 0 6
10679: PPUSH
10680: CALL_OW 264
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 42
10690: PUSH
10691: LD_INT 24
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: IN
10699: IFFALSE 10720
// points := [ 25 , 5 , 3 ] ;
10701: LD_ADDR_VAR 0 9
10705: PUSH
10706: LD_INT 25
10708: PUSH
10709: LD_INT 5
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10720: LD_VAR 0 6
10724: PPUSH
10725: CALL_OW 264
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: LD_INT 43
10735: PUSH
10736: LD_INT 25
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: IN
10744: IFFALSE 10765
// points := [ 40 , 15 , 5 ] ;
10746: LD_ADDR_VAR 0 9
10750: PUSH
10751: LD_INT 40
10753: PUSH
10754: LD_INT 15
10756: PUSH
10757: LD_INT 5
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10765: LD_VAR 0 6
10769: PPUSH
10770: CALL_OW 264
10774: PUSH
10775: LD_INT 3
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: IN
10785: IFFALSE 10806
// points := [ 7 , 25 , 8 ] ;
10787: LD_ADDR_VAR 0 9
10791: PUSH
10792: LD_INT 7
10794: PUSH
10795: LD_INT 25
10797: PUSH
10798: LD_INT 8
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10806: LD_VAR 0 6
10810: PPUSH
10811: CALL_OW 264
10815: PUSH
10816: LD_INT 5
10818: PUSH
10819: LD_INT 27
10821: PUSH
10822: LD_INT 44
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: IN
10830: IFFALSE 10851
// points := [ 14 , 50 , 16 ] ;
10832: LD_ADDR_VAR 0 9
10836: PUSH
10837: LD_INT 14
10839: PUSH
10840: LD_INT 50
10842: PUSH
10843: LD_INT 16
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10851: LD_VAR 0 6
10855: PPUSH
10856: CALL_OW 264
10860: PUSH
10861: LD_INT 6
10863: PUSH
10864: LD_INT 46
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: IN
10871: IFFALSE 10892
// points := [ 32 , 120 , 70 ] ;
10873: LD_ADDR_VAR 0 9
10877: PUSH
10878: LD_INT 32
10880: PUSH
10881: LD_INT 120
10883: PUSH
10884: LD_INT 70
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10892: LD_VAR 0 6
10896: PPUSH
10897: CALL_OW 264
10901: PUSH
10902: LD_INT 7
10904: PUSH
10905: LD_INT 28
10907: PUSH
10908: LD_INT 45
10910: PUSH
10911: LD_INT 92
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: IN
10920: IFFALSE 10941
// points := [ 35 , 20 , 45 ] ;
10922: LD_ADDR_VAR 0 9
10926: PUSH
10927: LD_INT 35
10929: PUSH
10930: LD_INT 20
10932: PUSH
10933: LD_INT 45
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10941: LD_VAR 0 6
10945: PPUSH
10946: CALL_OW 264
10950: PUSH
10951: LD_INT 47
10953: PUSH
10954: EMPTY
10955: LIST
10956: IN
10957: IFFALSE 10978
// points := [ 67 , 45 , 75 ] ;
10959: LD_ADDR_VAR 0 9
10963: PUSH
10964: LD_INT 67
10966: PUSH
10967: LD_INT 45
10969: PUSH
10970: LD_INT 75
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10978: LD_VAR 0 6
10982: PPUSH
10983: CALL_OW 264
10987: PUSH
10988: LD_INT 26
10990: PUSH
10991: EMPTY
10992: LIST
10993: IN
10994: IFFALSE 11015
// points := [ 120 , 30 , 80 ] ;
10996: LD_ADDR_VAR 0 9
11000: PUSH
11001: LD_INT 120
11003: PUSH
11004: LD_INT 30
11006: PUSH
11007: LD_INT 80
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11015: LD_VAR 0 6
11019: PPUSH
11020: CALL_OW 264
11024: PUSH
11025: LD_INT 22
11027: PUSH
11028: EMPTY
11029: LIST
11030: IN
11031: IFFALSE 11052
// points := [ 40 , 1 , 1 ] ;
11033: LD_ADDR_VAR 0 9
11037: PUSH
11038: LD_INT 40
11040: PUSH
11041: LD_INT 1
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11052: LD_VAR 0 6
11056: PPUSH
11057: CALL_OW 264
11061: PUSH
11062: LD_INT 29
11064: PUSH
11065: EMPTY
11066: LIST
11067: IN
11068: IFFALSE 11089
// points := [ 70 , 200 , 400 ] ;
11070: LD_ADDR_VAR 0 9
11074: PUSH
11075: LD_INT 70
11077: PUSH
11078: LD_INT 200
11080: PUSH
11081: LD_INT 400
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11089: LD_VAR 0 6
11093: PPUSH
11094: CALL_OW 264
11098: PUSH
11099: LD_INT 14
11101: PUSH
11102: LD_INT 53
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: IN
11109: IFFALSE 11130
// points := [ 40 , 10 , 20 ] ;
11111: LD_ADDR_VAR 0 9
11115: PUSH
11116: LD_INT 40
11118: PUSH
11119: LD_INT 10
11121: PUSH
11122: LD_INT 20
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11130: LD_VAR 0 6
11134: PPUSH
11135: CALL_OW 264
11139: PUSH
11140: LD_INT 9
11142: PUSH
11143: EMPTY
11144: LIST
11145: IN
11146: IFFALSE 11167
// points := [ 5 , 70 , 20 ] ;
11148: LD_ADDR_VAR 0 9
11152: PUSH
11153: LD_INT 5
11155: PUSH
11156: LD_INT 70
11158: PUSH
11159: LD_INT 20
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11167: LD_VAR 0 6
11171: PPUSH
11172: CALL_OW 264
11176: PUSH
11177: LD_INT 10
11179: PUSH
11180: EMPTY
11181: LIST
11182: IN
11183: IFFALSE 11204
// points := [ 35 , 110 , 70 ] ;
11185: LD_ADDR_VAR 0 9
11189: PUSH
11190: LD_INT 35
11192: PUSH
11193: LD_INT 110
11195: PUSH
11196: LD_INT 70
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11204: LD_VAR 0 6
11208: PPUSH
11209: CALL_OW 265
11213: PUSH
11214: LD_INT 25
11216: EQUAL
11217: IFFALSE 11238
// points := [ 80 , 65 , 100 ] ;
11219: LD_ADDR_VAR 0 9
11223: PUSH
11224: LD_INT 80
11226: PUSH
11227: LD_INT 65
11229: PUSH
11230: LD_INT 100
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11238: LD_VAR 0 6
11242: PPUSH
11243: CALL_OW 263
11247: PUSH
11248: LD_INT 1
11250: EQUAL
11251: IFFALSE 11286
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11253: LD_ADDR_VAR 0 10
11257: PUSH
11258: LD_VAR 0 10
11262: PUSH
11263: LD_VAR 0 6
11267: PPUSH
11268: CALL_OW 311
11272: PPUSH
11273: LD_INT 3
11275: PPUSH
11276: CALL_OW 259
11280: PUSH
11281: LD_INT 4
11283: MUL
11284: MUL
11285: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11286: LD_VAR 0 6
11290: PPUSH
11291: CALL_OW 263
11295: PUSH
11296: LD_INT 2
11298: EQUAL
11299: IFFALSE 11350
// begin j := IsControledBy ( i ) ;
11301: LD_ADDR_VAR 0 7
11305: PUSH
11306: LD_VAR 0 6
11310: PPUSH
11311: CALL_OW 312
11315: ST_TO_ADDR
// if j then
11316: LD_VAR 0 7
11320: IFFALSE 11350
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11322: LD_ADDR_VAR 0 10
11326: PUSH
11327: LD_VAR 0 10
11331: PUSH
11332: LD_VAR 0 7
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: CALL_OW 259
11344: PUSH
11345: LD_INT 3
11347: MUL
11348: MUL
11349: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11350: LD_VAR 0 6
11354: PPUSH
11355: CALL_OW 264
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: LD_INT 46
11368: PUSH
11369: LD_INT 44
11371: PUSH
11372: LD_INT 47
11374: PUSH
11375: LD_INT 45
11377: PUSH
11378: LD_INT 28
11380: PUSH
11381: LD_INT 7
11383: PUSH
11384: LD_INT 27
11386: PUSH
11387: LD_INT 29
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: IN
11402: IFFALSE 11422
11404: PUSH
11405: LD_VAR 0 1
11409: PPUSH
11410: LD_INT 52
11412: PPUSH
11413: CALL_OW 321
11417: PUSH
11418: LD_INT 2
11420: EQUAL
11421: AND
11422: IFFALSE 11439
// bpoints := bpoints * 1.2 ;
11424: LD_ADDR_VAR 0 10
11428: PUSH
11429: LD_VAR 0 10
11433: PUSH
11434: LD_REAL  1.20000000000000E+0000
11437: MUL
11438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11439: LD_VAR 0 6
11443: PPUSH
11444: CALL_OW 264
11448: PUSH
11449: LD_INT 6
11451: PUSH
11452: LD_INT 46
11454: PUSH
11455: LD_INT 47
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: IN
11463: IFFALSE 11480
// bpoints := bpoints * 1.2 ;
11465: LD_ADDR_VAR 0 10
11469: PUSH
11470: LD_VAR 0 10
11474: PUSH
11475: LD_REAL  1.20000000000000E+0000
11478: MUL
11479: ST_TO_ADDR
// end ; unit_building :
11480: GO 11494
11482: LD_INT 3
11484: DOUBLE
11485: EQUAL
11486: IFTRUE 11490
11488: GO 11493
11490: POP
// ; end ;
11491: GO 11494
11493: POP
// for j = 1 to 3 do
11494: LD_ADDR_VAR 0 7
11498: PUSH
11499: DOUBLE
11500: LD_INT 1
11502: DEC
11503: ST_TO_ADDR
11504: LD_INT 3
11506: PUSH
11507: FOR_TO
11508: IFFALSE 11561
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11510: LD_ADDR_VAR 0 5
11514: PUSH
11515: LD_VAR 0 5
11519: PPUSH
11520: LD_VAR 0 7
11524: PPUSH
11525: LD_VAR 0 5
11529: PUSH
11530: LD_VAR 0 7
11534: ARRAY
11535: PUSH
11536: LD_VAR 0 9
11540: PUSH
11541: LD_VAR 0 7
11545: ARRAY
11546: PUSH
11547: LD_VAR 0 10
11551: MUL
11552: PLUS
11553: PPUSH
11554: CALL_OW 1
11558: ST_TO_ADDR
11559: GO 11507
11561: POP
11562: POP
// end ;
11563: GO 10036
11565: POP
11566: POP
// result := Replace ( result , 4 , tmp ) ;
11567: LD_ADDR_VAR 0 5
11571: PUSH
11572: LD_VAR 0 5
11576: PPUSH
11577: LD_INT 4
11579: PPUSH
11580: LD_VAR 0 8
11584: PPUSH
11585: CALL_OW 1
11589: ST_TO_ADDR
// end ;
11590: LD_VAR 0 5
11594: RET
// export function DangerAtRange ( unit , range ) ; begin
11595: LD_INT 0
11597: PPUSH
// if not unit then
11598: LD_VAR 0 1
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11652
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 255
11621: PPUSH
11622: LD_VAR 0 1
11626: PPUSH
11627: CALL_OW 250
11631: PPUSH
11632: LD_VAR 0 1
11636: PPUSH
11637: CALL_OW 251
11641: PPUSH
11642: LD_VAR 0 2
11646: PPUSH
11647: CALL 9886 0 4
11651: ST_TO_ADDR
// end ;
11652: LD_VAR 0 3
11656: RET
// export function DangerInArea ( side , area ) ; begin
11657: LD_INT 0
11659: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11660: LD_ADDR_VAR 0 3
11664: PUSH
11665: LD_VAR 0 2
11669: PPUSH
11670: LD_INT 81
11672: PUSH
11673: LD_VAR 0 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 70
11686: ST_TO_ADDR
// end ;
11687: LD_VAR 0 3
11691: RET
// export function IsExtension ( b ) ; begin
11692: LD_INT 0
11694: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11695: LD_ADDR_VAR 0 2
11699: PUSH
11700: LD_VAR 0 1
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 20
11710: PUSH
11711: LD_INT 22
11713: PUSH
11714: LD_INT 17
11716: PUSH
11717: LD_INT 24
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 19
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 25
11731: PUSH
11732: LD_INT 18
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: IN
11747: ST_TO_ADDR
// end ;
11748: LD_VAR 0 2
11752: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
11757: PPUSH
// result := [ ] ;
11758: LD_ADDR_VAR 0 4
11762: PUSH
11763: EMPTY
11764: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11765: LD_ADDR_VAR 0 5
11769: PUSH
11770: LD_VAR 0 2
11774: PPUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 70
11789: ST_TO_ADDR
// if not tmp then
11790: LD_VAR 0 5
11794: NOT
11795: IFFALSE 11799
// exit ;
11797: GO 11863
// if checkLink then
11799: LD_VAR 0 3
11803: IFFALSE 11853
// begin for i in tmp do
11805: LD_ADDR_VAR 0 6
11809: PUSH
11810: LD_VAR 0 5
11814: PUSH
11815: FOR_IN
11816: IFFALSE 11851
// if GetBase ( i ) <> base then
11818: LD_VAR 0 6
11822: PPUSH
11823: CALL_OW 274
11827: PUSH
11828: LD_VAR 0 1
11832: NONEQUAL
11833: IFFALSE 11849
// ComLinkToBase ( base , i ) ;
11835: LD_VAR 0 1
11839: PPUSH
11840: LD_VAR 0 6
11844: PPUSH
11845: CALL_OW 169
11849: GO 11815
11851: POP
11852: POP
// end ; result := tmp ;
11853: LD_ADDR_VAR 0 4
11857: PUSH
11858: LD_VAR 0 5
11862: ST_TO_ADDR
// end ;
11863: LD_VAR 0 4
11867: RET
// export function ComComplete ( units , b ) ; var i ; begin
11868: LD_INT 0
11870: PPUSH
11871: PPUSH
// if not units then
11872: LD_VAR 0 1
11876: NOT
11877: IFFALSE 11881
// exit ;
11879: GO 11971
// for i in units do
11881: LD_ADDR_VAR 0 4
11885: PUSH
11886: LD_VAR 0 1
11890: PUSH
11891: FOR_IN
11892: IFFALSE 11969
// if BuildingStatus ( b ) = bs_build then
11894: LD_VAR 0 2
11898: PPUSH
11899: CALL_OW 461
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 11967
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11909: LD_VAR 0 4
11913: PPUSH
11914: LD_STRING h
11916: PUSH
11917: LD_VAR 0 2
11921: PPUSH
11922: CALL_OW 250
11926: PUSH
11927: LD_VAR 0 2
11931: PPUSH
11932: CALL_OW 251
11936: PUSH
11937: LD_VAR 0 2
11941: PUSH
11942: LD_INT 0
11944: PUSH
11945: LD_INT 0
11947: PUSH
11948: LD_INT 0
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: PPUSH
11963: CALL_OW 446
11967: GO 11891
11969: POP
11970: POP
// end ;
11971: LD_VAR 0 3
11975: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11976: LD_INT 0
11978: PPUSH
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11984: LD_VAR 0 1
11988: NOT
11989: IFTRUE 12006
11991: PUSH
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 263
12001: PUSH
12002: LD_INT 2
12004: NONEQUAL
12005: OR
12006: IFFALSE 12010
// exit ;
12008: GO 12326
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12010: LD_ADDR_VAR 0 6
12014: PUSH
12015: LD_INT 22
12017: PUSH
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 255
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 2
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 36
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 34
12047: PUSH
12048: LD_INT 31
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PPUSH
12064: CALL_OW 69
12068: ST_TO_ADDR
// if not tmp then
12069: LD_VAR 0 6
12073: NOT
12074: IFFALSE 12078
// exit ;
12076: GO 12326
// result := [ ] ;
12078: LD_ADDR_VAR 0 2
12082: PUSH
12083: EMPTY
12084: ST_TO_ADDR
// for i in tmp do
12085: LD_ADDR_VAR 0 3
12089: PUSH
12090: LD_VAR 0 6
12094: PUSH
12095: FOR_IN
12096: IFFALSE 12167
// begin t := UnitsInside ( i ) ;
12098: LD_ADDR_VAR 0 4
12102: PUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: CALL_OW 313
12112: ST_TO_ADDR
// if t then
12113: LD_VAR 0 4
12117: IFFALSE 12165
// for j in t do
12119: LD_ADDR_VAR 0 7
12123: PUSH
12124: LD_VAR 0 4
12128: PUSH
12129: FOR_IN
12130: IFFALSE 12163
// result := Replace ( result , result + 1 , j ) ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_VAR 0 2
12141: PPUSH
12142: LD_VAR 0 2
12146: PUSH
12147: LD_INT 1
12149: PLUS
12150: PPUSH
12151: LD_VAR 0 7
12155: PPUSH
12156: CALL_OW 1
12160: ST_TO_ADDR
12161: GO 12129
12163: POP
12164: POP
// end ;
12165: GO 12095
12167: POP
12168: POP
// if not result then
12169: LD_VAR 0 2
12173: NOT
12174: IFFALSE 12178
// exit ;
12176: GO 12326
// mech := result [ 1 ] ;
12178: LD_ADDR_VAR 0 5
12182: PUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: ST_TO_ADDR
// if result > 1 then
12192: LD_VAR 0 2
12196: PUSH
12197: LD_INT 1
12199: GREATER
12200: IFFALSE 12312
// begin for i = 2 to result do
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: DOUBLE
12208: LD_INT 2
12210: DEC
12211: ST_TO_ADDR
12212: LD_VAR 0 2
12216: PUSH
12217: FOR_TO
12218: IFFALSE 12310
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12220: LD_ADDR_VAR 0 4
12224: PUSH
12225: LD_VAR 0 2
12229: PUSH
12230: LD_VAR 0 3
12234: ARRAY
12235: PPUSH
12236: LD_INT 3
12238: PPUSH
12239: CALL_OW 259
12243: PUSH
12244: LD_VAR 0 2
12248: PUSH
12249: LD_VAR 0 3
12253: ARRAY
12254: PPUSH
12255: CALL_OW 432
12259: MINUS
12260: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12261: LD_VAR 0 4
12265: PUSH
12266: LD_VAR 0 5
12270: PPUSH
12271: LD_INT 3
12273: PPUSH
12274: CALL_OW 259
12278: PUSH
12279: LD_VAR 0 5
12283: PPUSH
12284: CALL_OW 432
12288: MINUS
12289: GREATEREQUAL
12290: IFFALSE 12308
// mech := result [ i ] ;
12292: LD_ADDR_VAR 0 5
12296: PUSH
12297: LD_VAR 0 2
12301: PUSH
12302: LD_VAR 0 3
12306: ARRAY
12307: ST_TO_ADDR
// end ;
12308: GO 12217
12310: POP
12311: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12312: LD_VAR 0 1
12316: PPUSH
12317: LD_VAR 0 5
12321: PPUSH
12322: CALL_OW 135
// end ;
12326: LD_VAR 0 2
12330: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12331: LD_INT 0
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
// result := [ ] ;
12346: LD_ADDR_VAR 0 7
12350: PUSH
12351: EMPTY
12352: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL_OW 266
12362: PUSH
12363: LD_INT 0
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: IN
12373: NOT
12374: IFFALSE 12378
// exit ;
12376: GO 14018
// if name then
12378: LD_VAR 0 3
12382: IFFALSE 12398
// SetBName ( base_dep , name ) ;
12384: LD_VAR 0 1
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: CALL_OW 500
// base := GetBase ( base_dep ) ;
12398: LD_ADDR_VAR 0 15
12402: PUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 274
12412: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12413: LD_ADDR_VAR 0 16
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 255
12427: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12428: LD_ADDR_VAR 0 17
12432: PUSH
12433: LD_VAR 0 1
12437: PPUSH
12438: CALL_OW 248
12442: ST_TO_ADDR
// if sources then
12443: LD_VAR 0 5
12447: IFFALSE 12494
// for i = 1 to 3 do
12449: LD_ADDR_VAR 0 8
12453: PUSH
12454: DOUBLE
12455: LD_INT 1
12457: DEC
12458: ST_TO_ADDR
12459: LD_INT 3
12461: PUSH
12462: FOR_TO
12463: IFFALSE 12492
// AddResourceType ( base , i , sources [ i ] ) ;
12465: LD_VAR 0 15
12469: PPUSH
12470: LD_VAR 0 8
12474: PPUSH
12475: LD_VAR 0 5
12479: PUSH
12480: LD_VAR 0 8
12484: ARRAY
12485: PPUSH
12486: CALL_OW 276
12490: GO 12462
12492: POP
12493: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12494: LD_ADDR_VAR 0 18
12498: PUSH
12499: LD_VAR 0 15
12503: PPUSH
12504: LD_VAR 0 2
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL 11753 0 3
12516: ST_TO_ADDR
// InitHc ;
12517: CALL_OW 19
// InitUc ;
12521: CALL_OW 18
// uc_side := side ;
12525: LD_ADDR_OWVAR 20
12529: PUSH
12530: LD_VAR 0 16
12534: ST_TO_ADDR
// uc_nation := nation ;
12535: LD_ADDR_OWVAR 21
12539: PUSH
12540: LD_VAR 0 17
12544: ST_TO_ADDR
// if buildings then
12545: LD_VAR 0 18
12549: IFFALSE 13877
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12551: LD_ADDR_VAR 0 19
12555: PUSH
12556: LD_VAR 0 18
12560: PPUSH
12561: LD_INT 2
12563: PUSH
12564: LD_INT 30
12566: PUSH
12567: LD_INT 29
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 30
12576: PUSH
12577: LD_INT 30
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 72
12593: ST_TO_ADDR
// if tmp then
12594: LD_VAR 0 19
12598: IFFALSE 12646
// for i in tmp do
12600: LD_ADDR_VAR 0 8
12604: PUSH
12605: LD_VAR 0 19
12609: PUSH
12610: FOR_IN
12611: IFFALSE 12644
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12613: LD_VAR 0 8
12617: PPUSH
12618: CALL_OW 250
12622: PPUSH
12623: LD_VAR 0 8
12627: PPUSH
12628: CALL_OW 251
12632: PPUSH
12633: LD_VAR 0 16
12637: PPUSH
12638: CALL_OW 441
12642: GO 12610
12644: POP
12645: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12646: LD_VAR 0 18
12650: PPUSH
12651: LD_INT 2
12653: PUSH
12654: LD_INT 30
12656: PUSH
12657: LD_INT 32
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: LD_INT 30
12666: PUSH
12667: LD_INT 33
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 72
12683: IFFALSE 12771
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12685: LD_ADDR_VAR 0 8
12689: PUSH
12690: LD_VAR 0 18
12694: PPUSH
12695: LD_INT 2
12697: PUSH
12698: LD_INT 30
12700: PUSH
12701: LD_INT 32
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 30
12710: PUSH
12711: LD_INT 33
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 72
12727: PUSH
12728: FOR_IN
12729: IFFALSE 12769
// begin if not GetBWeapon ( i ) then
12731: LD_VAR 0 8
12735: PPUSH
12736: CALL_OW 269
12740: NOT
12741: IFFALSE 12767
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12743: LD_VAR 0 8
12747: PPUSH
12748: LD_VAR 0 8
12752: PPUSH
12753: LD_VAR 0 2
12757: PPUSH
12758: CALL 14023 0 2
12762: PPUSH
12763: CALL_OW 431
// end ;
12767: GO 12728
12769: POP
12770: POP
// end ; for i = 1 to personel do
12771: LD_ADDR_VAR 0 8
12775: PUSH
12776: DOUBLE
12777: LD_INT 1
12779: DEC
12780: ST_TO_ADDR
12781: LD_VAR 0 6
12785: PUSH
12786: FOR_TO
12787: IFFALSE 13857
// begin if i > 4 then
12789: LD_VAR 0 8
12793: PUSH
12794: LD_INT 4
12796: GREATER
12797: IFFALSE 12801
// break ;
12799: GO 13857
// case i of 1 :
12801: LD_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12894
12814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12815: LD_ADDR_VAR 0 12
12819: PUSH
12820: LD_VAR 0 18
12824: PPUSH
12825: LD_INT 22
12827: PUSH
12828: LD_VAR 0 16
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 58
12839: PUSH
12840: EMPTY
12841: LIST
12842: PUSH
12843: LD_INT 2
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 32
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 30
12858: PUSH
12859: LD_INT 4
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 30
12868: PUSH
12869: LD_INT 5
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: PPUSH
12887: CALL_OW 72
12891: ST_TO_ADDR
12892: GO 13116
12894: LD_INT 2
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 12964
12902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12903: LD_ADDR_VAR 0 12
12907: PUSH
12908: LD_VAR 0 18
12912: PPUSH
12913: LD_INT 22
12915: PUSH
12916: LD_VAR 0 16
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: LD_INT 30
12930: PUSH
12931: LD_INT 0
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 30
12940: PUSH
12941: LD_INT 1
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 72
12961: ST_TO_ADDR
12962: GO 13116
12964: LD_INT 3
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 13034
12972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12973: LD_ADDR_VAR 0 12
12977: PUSH
12978: LD_VAR 0 18
12982: PPUSH
12983: LD_INT 22
12985: PUSH
12986: LD_VAR 0 16
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: LD_INT 30
13000: PUSH
13001: LD_INT 2
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 3
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PPUSH
13027: CALL_OW 72
13031: ST_TO_ADDR
13032: GO 13116
13034: LD_INT 4
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13115
13042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13043: LD_ADDR_VAR 0 12
13047: PUSH
13048: LD_VAR 0 18
13052: PPUSH
13053: LD_INT 22
13055: PUSH
13056: LD_VAR 0 16
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 6
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 30
13080: PUSH
13081: LD_INT 7
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 30
13090: PUSH
13091: LD_INT 8
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PPUSH
13108: CALL_OW 72
13112: ST_TO_ADDR
13113: GO 13116
13115: POP
// if i = 1 then
13116: LD_VAR 0 8
13120: PUSH
13121: LD_INT 1
13123: EQUAL
13124: IFFALSE 13235
// begin tmp := [ ] ;
13126: LD_ADDR_VAR 0 19
13130: PUSH
13131: EMPTY
13132: ST_TO_ADDR
// for j in f do
13133: LD_ADDR_VAR 0 9
13137: PUSH
13138: LD_VAR 0 12
13142: PUSH
13143: FOR_IN
13144: IFFALSE 13217
// if GetBType ( j ) = b_bunker then
13146: LD_VAR 0 9
13150: PPUSH
13151: CALL_OW 266
13155: PUSH
13156: LD_INT 32
13158: EQUAL
13159: IFFALSE 13186
// tmp := Insert ( tmp , 1 , j ) else
13161: LD_ADDR_VAR 0 19
13165: PUSH
13166: LD_VAR 0 19
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: LD_VAR 0 9
13178: PPUSH
13179: CALL_OW 2
13183: ST_TO_ADDR
13184: GO 13215
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13186: LD_ADDR_VAR 0 19
13190: PUSH
13191: LD_VAR 0 19
13195: PPUSH
13196: LD_VAR 0 19
13200: PUSH
13201: LD_INT 1
13203: PLUS
13204: PPUSH
13205: LD_VAR 0 9
13209: PPUSH
13210: CALL_OW 2
13214: ST_TO_ADDR
13215: GO 13143
13217: POP
13218: POP
// if tmp then
13219: LD_VAR 0 19
13223: IFFALSE 13235
// f := tmp ;
13225: LD_ADDR_VAR 0 12
13229: PUSH
13230: LD_VAR 0 19
13234: ST_TO_ADDR
// end ; x := personel [ i ] ;
13235: LD_ADDR_VAR 0 13
13239: PUSH
13240: LD_VAR 0 6
13244: PUSH
13245: LD_VAR 0 8
13249: ARRAY
13250: ST_TO_ADDR
// if x = - 1 then
13251: LD_VAR 0 13
13255: PUSH
13256: LD_INT 1
13258: NEG
13259: EQUAL
13260: IFFALSE 13471
// begin for j in f do
13262: LD_ADDR_VAR 0 9
13266: PUSH
13267: LD_VAR 0 12
13271: PUSH
13272: FOR_IN
13273: IFFALSE 13467
// repeat InitHc ;
13275: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13279: LD_VAR 0 9
13283: PPUSH
13284: CALL_OW 266
13288: PUSH
13289: LD_INT 5
13291: EQUAL
13292: IFFALSE 13362
// begin if UnitsInside ( j ) < 3 then
13294: LD_VAR 0 9
13298: PPUSH
13299: CALL_OW 313
13303: PUSH
13304: LD_INT 3
13306: LESS
13307: IFFALSE 13343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13309: LD_INT 0
13311: PPUSH
13312: LD_INT 5
13314: PUSH
13315: LD_INT 8
13317: PUSH
13318: LD_INT 9
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: PUSH
13326: LD_VAR 0 17
13330: ARRAY
13331: PPUSH
13332: LD_VAR 0 4
13336: PPUSH
13337: CALL_OW 380
13341: GO 13360
// PrepareHuman ( false , i , skill ) ;
13343: LD_INT 0
13345: PPUSH
13346: LD_VAR 0 8
13350: PPUSH
13351: LD_VAR 0 4
13355: PPUSH
13356: CALL_OW 380
// end else
13360: GO 13379
// PrepareHuman ( false , i , skill ) ;
13362: LD_INT 0
13364: PPUSH
13365: LD_VAR 0 8
13369: PPUSH
13370: LD_VAR 0 4
13374: PPUSH
13375: CALL_OW 380
// un := CreateHuman ;
13379: LD_ADDR_VAR 0 14
13383: PUSH
13384: CALL_OW 44
13388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13389: LD_ADDR_VAR 0 7
13393: PUSH
13394: LD_VAR 0 7
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: LD_VAR 0 14
13406: PPUSH
13407: CALL_OW 2
13411: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13412: LD_VAR 0 14
13416: PPUSH
13417: LD_VAR 0 9
13421: PPUSH
13422: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13426: LD_VAR 0 9
13430: PPUSH
13431: CALL_OW 313
13435: PUSH
13436: LD_INT 6
13438: EQUAL
13439: IFTRUE 13463
13441: PUSH
13442: LD_VAR 0 9
13446: PPUSH
13447: CALL_OW 266
13451: PUSH
13452: LD_INT 32
13454: PUSH
13455: LD_INT 31
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: IN
13462: OR
13463: IFFALSE 13275
13465: GO 13272
13467: POP
13468: POP
// end else
13469: GO 13855
// for j = 1 to x do
13471: LD_ADDR_VAR 0 9
13475: PUSH
13476: DOUBLE
13477: LD_INT 1
13479: DEC
13480: ST_TO_ADDR
13481: LD_VAR 0 13
13485: PUSH
13486: FOR_TO
13487: IFFALSE 13853
// begin InitHc ;
13489: CALL_OW 19
// if not f then
13493: LD_VAR 0 12
13497: NOT
13498: IFFALSE 13587
// begin PrepareHuman ( false , i , skill ) ;
13500: LD_INT 0
13502: PPUSH
13503: LD_VAR 0 8
13507: PPUSH
13508: LD_VAR 0 4
13512: PPUSH
13513: CALL_OW 380
// un := CreateHuman ;
13517: LD_ADDR_VAR 0 14
13521: PUSH
13522: CALL_OW 44
13526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13527: LD_ADDR_VAR 0 7
13531: PUSH
13532: LD_VAR 0 7
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: LD_VAR 0 14
13544: PPUSH
13545: CALL_OW 2
13549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13550: LD_VAR 0 14
13554: PPUSH
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 250
13564: PPUSH
13565: LD_VAR 0 1
13569: PPUSH
13570: CALL_OW 251
13574: PPUSH
13575: LD_INT 10
13577: PPUSH
13578: LD_INT 0
13580: PPUSH
13581: CALL_OW 50
// continue ;
13585: GO 13486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13587: LD_VAR 0 12
13591: PUSH
13592: LD_INT 1
13594: ARRAY
13595: PPUSH
13596: CALL_OW 313
13600: IFFALSE 13628
13602: PUSH
13603: LD_VAR 0 12
13607: PUSH
13608: LD_INT 1
13610: ARRAY
13611: PPUSH
13612: CALL_OW 266
13616: PUSH
13617: LD_INT 32
13619: PUSH
13620: LD_INT 31
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: IN
13627: AND
13628: IFTRUE 13649
13630: PUSH
13631: LD_VAR 0 12
13635: PUSH
13636: LD_INT 1
13638: ARRAY
13639: PPUSH
13640: CALL_OW 313
13644: PUSH
13645: LD_INT 6
13647: EQUAL
13648: OR
13649: IFFALSE 13669
// f := Delete ( f , 1 ) ;
13651: LD_ADDR_VAR 0 12
13655: PUSH
13656: LD_VAR 0 12
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 3
13668: ST_TO_ADDR
// if not f then
13669: LD_VAR 0 12
13673: NOT
13674: IFFALSE 13692
// begin x := x + 2 ;
13676: LD_ADDR_VAR 0 13
13680: PUSH
13681: LD_VAR 0 13
13685: PUSH
13686: LD_INT 2
13688: PLUS
13689: ST_TO_ADDR
// continue ;
13690: GO 13486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13692: LD_VAR 0 12
13696: PUSH
13697: LD_INT 1
13699: ARRAY
13700: PPUSH
13701: CALL_OW 266
13705: PUSH
13706: LD_INT 5
13708: EQUAL
13709: IFFALSE 13783
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13711: LD_VAR 0 12
13715: PUSH
13716: LD_INT 1
13718: ARRAY
13719: PPUSH
13720: CALL_OW 313
13724: PUSH
13725: LD_INT 3
13727: LESS
13728: IFFALSE 13764
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13730: LD_INT 0
13732: PPUSH
13733: LD_INT 5
13735: PUSH
13736: LD_INT 8
13738: PUSH
13739: LD_INT 9
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_VAR 0 17
13751: ARRAY
13752: PPUSH
13753: LD_VAR 0 4
13757: PPUSH
13758: CALL_OW 380
13762: GO 13781
// PrepareHuman ( false , i , skill ) ;
13764: LD_INT 0
13766: PPUSH
13767: LD_VAR 0 8
13771: PPUSH
13772: LD_VAR 0 4
13776: PPUSH
13777: CALL_OW 380
// end else
13781: GO 13800
// PrepareHuman ( false , i , skill ) ;
13783: LD_INT 0
13785: PPUSH
13786: LD_VAR 0 8
13790: PPUSH
13791: LD_VAR 0 4
13795: PPUSH
13796: CALL_OW 380
// un := CreateHuman ;
13800: LD_ADDR_VAR 0 14
13804: PUSH
13805: CALL_OW 44
13809: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13810: LD_ADDR_VAR 0 7
13814: PUSH
13815: LD_VAR 0 7
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_VAR 0 14
13827: PPUSH
13828: CALL_OW 2
13832: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13833: LD_VAR 0 14
13837: PPUSH
13838: LD_VAR 0 12
13842: PUSH
13843: LD_INT 1
13845: ARRAY
13846: PPUSH
13847: CALL_OW 52
// end ;
13851: GO 13486
13853: POP
13854: POP
// end ;
13855: GO 12786
13857: POP
13858: POP
// result := result ^ buildings ;
13859: LD_ADDR_VAR 0 7
13863: PUSH
13864: LD_VAR 0 7
13868: PUSH
13869: LD_VAR 0 18
13873: ADD
13874: ST_TO_ADDR
// end else
13875: GO 14018
// begin for i = 1 to personel do
13877: LD_ADDR_VAR 0 8
13881: PUSH
13882: DOUBLE
13883: LD_INT 1
13885: DEC
13886: ST_TO_ADDR
13887: LD_VAR 0 6
13891: PUSH
13892: FOR_TO
13893: IFFALSE 14016
// begin if i > 4 then
13895: LD_VAR 0 8
13899: PUSH
13900: LD_INT 4
13902: GREATER
13903: IFFALSE 13907
// break ;
13905: GO 14016
// x := personel [ i ] ;
13907: LD_ADDR_VAR 0 13
13911: PUSH
13912: LD_VAR 0 6
13916: PUSH
13917: LD_VAR 0 8
13921: ARRAY
13922: ST_TO_ADDR
// if x = - 1 then
13923: LD_VAR 0 13
13927: PUSH
13928: LD_INT 1
13930: NEG
13931: EQUAL
13932: IFFALSE 13936
// continue ;
13934: GO 13892
// PrepareHuman ( false , i , skill ) ;
13936: LD_INT 0
13938: PPUSH
13939: LD_VAR 0 8
13943: PPUSH
13944: LD_VAR 0 4
13948: PPUSH
13949: CALL_OW 380
// un := CreateHuman ;
13953: LD_ADDR_VAR 0 14
13957: PUSH
13958: CALL_OW 44
13962: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13963: LD_VAR 0 14
13967: PPUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 250
13977: PPUSH
13978: LD_VAR 0 1
13982: PPUSH
13983: CALL_OW 251
13987: PPUSH
13988: LD_INT 10
13990: PPUSH
13991: LD_INT 0
13993: PPUSH
13994: CALL_OW 50
// result := result ^ un ;
13998: LD_ADDR_VAR 0 7
14002: PUSH
14003: LD_VAR 0 7
14007: PUSH
14008: LD_VAR 0 14
14012: ADD
14013: ST_TO_ADDR
// end ;
14014: GO 13892
14016: POP
14017: POP
// end ; end ;
14018: LD_VAR 0 7
14022: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14023: LD_INT 0
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
14037: PPUSH
14038: PPUSH
14039: PPUSH
14040: PPUSH
// result := false ;
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_INT 0
14048: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14049: LD_VAR 0 1
14053: NOT
14054: IFTRUE 14079
14056: PUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 266
14066: PUSH
14067: LD_INT 32
14069: PUSH
14070: LD_INT 33
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: IN
14077: NOT
14078: OR
14079: IFFALSE 14083
// exit ;
14081: GO 15218
// nat := GetNation ( tower ) ;
14083: LD_ADDR_VAR 0 12
14087: PUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 248
14097: ST_TO_ADDR
// side := GetSide ( tower ) ;
14098: LD_ADDR_VAR 0 16
14102: PUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 255
14112: ST_TO_ADDR
// x := GetX ( tower ) ;
14113: LD_ADDR_VAR 0 10
14117: PUSH
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 250
14127: ST_TO_ADDR
// y := GetY ( tower ) ;
14128: LD_ADDR_VAR 0 11
14132: PUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 251
14142: ST_TO_ADDR
// if not x or not y then
14143: LD_VAR 0 10
14147: NOT
14148: IFTRUE 14157
14150: PUSH
14151: LD_VAR 0 11
14155: NOT
14156: OR
14157: IFFALSE 14161
// exit ;
14159: GO 15218
// weapon := 0 ;
14161: LD_ADDR_VAR 0 18
14165: PUSH
14166: LD_INT 0
14168: ST_TO_ADDR
// fac_list := [ ] ;
14169: LD_ADDR_VAR 0 17
14173: PUSH
14174: EMPTY
14175: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14176: LD_ADDR_VAR 0 6
14180: PUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 274
14190: PPUSH
14191: LD_VAR 0 2
14195: PPUSH
14196: LD_INT 0
14198: PPUSH
14199: CALL 11753 0 3
14203: PPUSH
14204: LD_INT 30
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PPUSH
14214: CALL_OW 72
14218: ST_TO_ADDR
// if not factories then
14219: LD_VAR 0 6
14223: NOT
14224: IFFALSE 14228
// exit ;
14226: GO 15218
// for i in factories do
14228: LD_ADDR_VAR 0 8
14232: PUSH
14233: LD_VAR 0 6
14237: PUSH
14238: FOR_IN
14239: IFFALSE 14264
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14241: LD_ADDR_VAR 0 17
14245: PUSH
14246: LD_VAR 0 17
14250: PUSH
14251: LD_VAR 0 8
14255: PPUSH
14256: CALL_OW 478
14260: UNION
14261: ST_TO_ADDR
14262: GO 14238
14264: POP
14265: POP
// if not fac_list then
14266: LD_VAR 0 17
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 15218
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14275: LD_ADDR_VAR 0 5
14279: PUSH
14280: LD_INT 4
14282: PUSH
14283: LD_INT 5
14285: PUSH
14286: LD_INT 9
14288: PUSH
14289: LD_INT 10
14291: PUSH
14292: LD_INT 6
14294: PUSH
14295: LD_INT 7
14297: PUSH
14298: LD_INT 11
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 27
14312: PUSH
14313: LD_INT 28
14315: PUSH
14316: LD_INT 26
14318: PUSH
14319: LD_INT 30
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 43
14330: PUSH
14331: LD_INT 44
14333: PUSH
14334: LD_INT 46
14336: PUSH
14337: LD_INT 45
14339: PUSH
14340: LD_INT 47
14342: PUSH
14343: LD_INT 49
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_VAR 0 12
14363: ARRAY
14364: ST_TO_ADDR
// list := list isect fac_list ;
14365: LD_ADDR_VAR 0 5
14369: PUSH
14370: LD_VAR 0 5
14374: PUSH
14375: LD_VAR 0 17
14379: ISECT
14380: ST_TO_ADDR
// if not list then
14381: LD_VAR 0 5
14385: NOT
14386: IFFALSE 14390
// exit ;
14388: GO 15218
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14390: LD_VAR 0 12
14394: PUSH
14395: LD_INT 3
14397: EQUAL
14398: IFFALSE 14410
14400: PUSH
14401: LD_INT 49
14403: PUSH
14404: LD_VAR 0 5
14408: IN
14409: AND
14410: IFFALSE 14430
14412: PUSH
14413: LD_INT 31
14415: PPUSH
14416: LD_VAR 0 16
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: AND
14430: IFFALSE 14490
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14432: LD_INT 22
14434: PUSH
14435: LD_VAR 0 16
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 35
14446: PUSH
14447: LD_INT 49
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 91
14456: PUSH
14457: LD_VAR 0 1
14461: PUSH
14462: LD_INT 10
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: NOT
14480: IFFALSE 14490
// weapon := ru_time_lapser ;
14482: LD_ADDR_VAR 0 18
14486: PUSH
14487: LD_INT 49
14489: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14490: LD_VAR 0 12
14494: PUSH
14495: LD_INT 1
14497: PUSH
14498: LD_INT 2
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: IN
14505: IFFALSE 14529
14507: PUSH
14508: LD_INT 11
14510: PUSH
14511: LD_VAR 0 5
14515: IN
14516: IFTRUE 14528
14518: PUSH
14519: LD_INT 30
14521: PUSH
14522: LD_VAR 0 5
14526: IN
14527: OR
14528: AND
14529: IFFALSE 14549
14531: PUSH
14532: LD_INT 6
14534: PPUSH
14535: LD_VAR 0 16
14539: PPUSH
14540: CALL_OW 321
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: AND
14549: IFFALSE 14716
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14551: LD_INT 22
14553: PUSH
14554: LD_VAR 0 16
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: LD_INT 35
14568: PUSH
14569: LD_INT 11
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 35
14578: PUSH
14579: LD_INT 30
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 91
14593: PUSH
14594: LD_VAR 0 1
14598: PUSH
14599: LD_INT 18
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 69
14616: NOT
14617: IFFALSE 14693
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_VAR 0 16
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 30
14637: PUSH
14638: LD_INT 32
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 30
14647: PUSH
14648: LD_INT 33
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 91
14662: PUSH
14663: LD_VAR 0 1
14667: PUSH
14668: LD_INT 12
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: PPUSH
14684: CALL_OW 69
14688: PUSH
14689: LD_INT 2
14691: GREATER
14692: AND
14693: IFFALSE 14716
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14695: LD_ADDR_VAR 0 18
14699: PUSH
14700: LD_INT 11
14702: PUSH
14703: LD_INT 30
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_VAR 0 12
14714: ARRAY
14715: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14716: LD_VAR 0 18
14720: NOT
14721: IFFALSE 14741
14723: PUSH
14724: LD_INT 40
14726: PPUSH
14727: LD_VAR 0 16
14731: PPUSH
14732: CALL_OW 321
14736: PUSH
14737: LD_INT 2
14739: EQUAL
14740: AND
14741: IFFALSE 14777
14743: PUSH
14744: LD_INT 7
14746: PUSH
14747: LD_VAR 0 5
14751: IN
14752: IFTRUE 14764
14754: PUSH
14755: LD_INT 28
14757: PUSH
14758: LD_VAR 0 5
14762: IN
14763: OR
14764: IFTRUE 14776
14766: PUSH
14767: LD_INT 45
14769: PUSH
14770: LD_VAR 0 5
14774: IN
14775: OR
14776: AND
14777: IFFALSE 15031
// begin hex := GetHexInfo ( x , y ) ;
14779: LD_ADDR_VAR 0 4
14783: PUSH
14784: LD_VAR 0 10
14788: PPUSH
14789: LD_VAR 0 11
14793: PPUSH
14794: CALL_OW 546
14798: ST_TO_ADDR
// if hex [ 1 ] then
14799: LD_VAR 0 4
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: IFFALSE 14811
// exit ;
14809: GO 15218
// height := hex [ 2 ] ;
14811: LD_ADDR_VAR 0 15
14815: PUSH
14816: LD_VAR 0 4
14820: PUSH
14821: LD_INT 2
14823: ARRAY
14824: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14825: LD_ADDR_VAR 0 14
14829: PUSH
14830: LD_INT 0
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: LD_INT 5
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: ST_TO_ADDR
// for i in tmp do
14848: LD_ADDR_VAR 0 8
14852: PUSH
14853: LD_VAR 0 14
14857: PUSH
14858: FOR_IN
14859: IFFALSE 15029
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14861: LD_ADDR_VAR 0 9
14865: PUSH
14866: LD_VAR 0 10
14870: PPUSH
14871: LD_VAR 0 8
14875: PPUSH
14876: LD_INT 5
14878: PPUSH
14879: CALL_OW 272
14883: PUSH
14884: LD_VAR 0 11
14888: PPUSH
14889: LD_VAR 0 8
14893: PPUSH
14894: LD_INT 5
14896: PPUSH
14897: CALL_OW 273
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14906: LD_VAR 0 9
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 9
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PPUSH
14924: CALL_OW 488
14928: IFFALSE 15027
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14930: LD_ADDR_VAR 0 4
14934: PUSH
14935: LD_VAR 0 9
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 9
14948: PUSH
14949: LD_INT 2
14951: ARRAY
14952: PPUSH
14953: CALL_OW 546
14957: ST_TO_ADDR
// if hex [ 1 ] then
14958: LD_VAR 0 4
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: IFFALSE 14970
// continue ;
14968: GO 14858
// h := hex [ 2 ] ;
14970: LD_ADDR_VAR 0 13
14974: PUSH
14975: LD_VAR 0 4
14979: PUSH
14980: LD_INT 2
14982: ARRAY
14983: ST_TO_ADDR
// if h + 7 < height then
14984: LD_VAR 0 13
14988: PUSH
14989: LD_INT 7
14991: PLUS
14992: PUSH
14993: LD_VAR 0 15
14997: LESS
14998: IFFALSE 15027
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15000: LD_ADDR_VAR 0 18
15004: PUSH
15005: LD_INT 7
15007: PUSH
15008: LD_INT 28
15010: PUSH
15011: LD_INT 45
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: PUSH
15019: LD_VAR 0 12
15023: ARRAY
15024: ST_TO_ADDR
// break ;
15025: GO 15029
// end ; end ; end ;
15027: GO 14858
15029: POP
15030: POP
// end ; if not weapon then
15031: LD_VAR 0 18
15035: NOT
15036: IFFALSE 15096
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15038: LD_ADDR_VAR 0 5
15042: PUSH
15043: LD_VAR 0 5
15047: PUSH
15048: LD_INT 11
15050: PUSH
15051: LD_INT 30
15053: PUSH
15054: LD_INT 49
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: DIFF
15062: ST_TO_ADDR
// if not list then
15063: LD_VAR 0 5
15067: NOT
15068: IFFALSE 15072
// exit ;
15070: GO 15218
// weapon := list [ rand ( 1 , list ) ] ;
15072: LD_ADDR_VAR 0 18
15076: PUSH
15077: LD_VAR 0 5
15081: PUSH
15082: LD_INT 1
15084: PPUSH
15085: LD_VAR 0 5
15089: PPUSH
15090: CALL_OW 12
15094: ARRAY
15095: ST_TO_ADDR
// end ; if weapon then
15096: LD_VAR 0 18
15100: IFFALSE 15218
// begin tmp := CostOfWeapon ( weapon ) ;
15102: LD_ADDR_VAR 0 14
15106: PUSH
15107: LD_VAR 0 18
15111: PPUSH
15112: CALL_OW 451
15116: ST_TO_ADDR
// j := GetBase ( tower ) ;
15117: LD_ADDR_VAR 0 9
15121: PUSH
15122: LD_VAR 0 1
15126: PPUSH
15127: CALL_OW 274
15131: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15132: LD_VAR 0 9
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 275
15144: PUSH
15145: LD_VAR 0 14
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: GREATEREQUAL
15154: IFFALSE 15180
15156: PUSH
15157: LD_VAR 0 9
15161: PPUSH
15162: LD_INT 2
15164: PPUSH
15165: CALL_OW 275
15169: PUSH
15170: LD_VAR 0 14
15174: PUSH
15175: LD_INT 2
15177: ARRAY
15178: GREATEREQUAL
15179: AND
15180: IFFALSE 15206
15182: PUSH
15183: LD_VAR 0 9
15187: PPUSH
15188: LD_INT 3
15190: PPUSH
15191: CALL_OW 275
15195: PUSH
15196: LD_VAR 0 14
15200: PUSH
15201: LD_INT 3
15203: ARRAY
15204: GREATEREQUAL
15205: AND
15206: IFFALSE 15218
// result := weapon ;
15208: LD_ADDR_VAR 0 3
15212: PUSH
15213: LD_VAR 0 18
15217: ST_TO_ADDR
// end ; end ;
15218: LD_VAR 0 3
15222: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15223: LD_INT 0
15225: PPUSH
15226: PPUSH
// result := true ;
15227: LD_ADDR_VAR 0 3
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if array1 = array2 then
15235: LD_VAR 0 1
15239: PUSH
15240: LD_VAR 0 2
15244: EQUAL
15245: IFFALSE 15305
// begin for i = 1 to array1 do
15247: LD_ADDR_VAR 0 4
15251: PUSH
15252: DOUBLE
15253: LD_INT 1
15255: DEC
15256: ST_TO_ADDR
15257: LD_VAR 0 1
15261: PUSH
15262: FOR_TO
15263: IFFALSE 15301
// if array1 [ i ] <> array2 [ i ] then
15265: LD_VAR 0 1
15269: PUSH
15270: LD_VAR 0 4
15274: ARRAY
15275: PUSH
15276: LD_VAR 0 2
15280: PUSH
15281: LD_VAR 0 4
15285: ARRAY
15286: NONEQUAL
15287: IFFALSE 15299
// begin result := false ;
15289: LD_ADDR_VAR 0 3
15293: PUSH
15294: LD_INT 0
15296: ST_TO_ADDR
// break ;
15297: GO 15301
// end ;
15299: GO 15262
15301: POP
15302: POP
// end else
15303: GO 15313
// result := false ;
15305: LD_ADDR_VAR 0 3
15309: PUSH
15310: LD_INT 0
15312: ST_TO_ADDR
// end ;
15313: LD_VAR 0 3
15317: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
// if not array1 or not array2 then
15322: LD_VAR 0 1
15326: NOT
15327: IFTRUE 15336
15329: PUSH
15330: LD_VAR 0 2
15334: NOT
15335: OR
15336: IFFALSE 15340
// exit ;
15338: GO 15404
// result := true ;
15340: LD_ADDR_VAR 0 3
15344: PUSH
15345: LD_INT 1
15347: ST_TO_ADDR
// for i = 1 to array1 do
15348: LD_ADDR_VAR 0 4
15352: PUSH
15353: DOUBLE
15354: LD_INT 1
15356: DEC
15357: ST_TO_ADDR
15358: LD_VAR 0 1
15362: PUSH
15363: FOR_TO
15364: IFFALSE 15402
// if array1 [ i ] <> array2 [ i ] then
15366: LD_VAR 0 1
15370: PUSH
15371: LD_VAR 0 4
15375: ARRAY
15376: PUSH
15377: LD_VAR 0 2
15381: PUSH
15382: LD_VAR 0 4
15386: ARRAY
15387: NONEQUAL
15388: IFFALSE 15400
// begin result := false ;
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_INT 0
15397: ST_TO_ADDR
// break ;
15398: GO 15402
// end ;
15400: GO 15363
15402: POP
15403: POP
// end ;
15404: LD_VAR 0 3
15408: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// pom := GetBase ( fac ) ;
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 274
15428: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15429: LD_ADDR_VAR 0 4
15433: PUSH
15434: LD_VAR 0 2
15438: PUSH
15439: LD_INT 1
15441: ARRAY
15442: PPUSH
15443: LD_VAR 0 2
15447: PUSH
15448: LD_INT 2
15450: ARRAY
15451: PPUSH
15452: LD_VAR 0 2
15456: PUSH
15457: LD_INT 3
15459: ARRAY
15460: PPUSH
15461: LD_VAR 0 2
15465: PUSH
15466: LD_INT 4
15468: ARRAY
15469: PPUSH
15470: CALL_OW 449
15474: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15475: LD_ADDR_VAR 0 3
15479: PUSH
15480: LD_VAR 0 5
15484: PPUSH
15485: LD_INT 1
15487: PPUSH
15488: CALL_OW 275
15492: PUSH
15493: LD_VAR 0 4
15497: PUSH
15498: LD_INT 1
15500: ARRAY
15501: GREATEREQUAL
15502: IFFALSE 15528
15504: PUSH
15505: LD_VAR 0 5
15509: PPUSH
15510: LD_INT 2
15512: PPUSH
15513: CALL_OW 275
15517: PUSH
15518: LD_VAR 0 4
15522: PUSH
15523: LD_INT 2
15525: ARRAY
15526: GREATEREQUAL
15527: AND
15528: IFFALSE 15554
15530: PUSH
15531: LD_VAR 0 5
15535: PPUSH
15536: LD_INT 3
15538: PPUSH
15539: CALL_OW 275
15543: PUSH
15544: LD_VAR 0 4
15548: PUSH
15549: LD_INT 3
15551: ARRAY
15552: GREATEREQUAL
15553: AND
15554: ST_TO_ADDR
// end ;
15555: LD_VAR 0 3
15559: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15560: LD_INT 0
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
// pom := GetBase ( building ) ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_VAR 0 1
15575: PPUSH
15576: CALL_OW 274
15580: ST_TO_ADDR
// if not pom then
15581: LD_VAR 0 3
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15764
// btype := GetBType ( building ) ;
15590: LD_ADDR_VAR 0 5
15594: PUSH
15595: LD_VAR 0 1
15599: PPUSH
15600: CALL_OW 266
15604: ST_TO_ADDR
// if btype = b_armoury then
15605: LD_VAR 0 5
15609: PUSH
15610: LD_INT 4
15612: EQUAL
15613: IFFALSE 15623
// btype := b_barracks ;
15615: LD_ADDR_VAR 0 5
15619: PUSH
15620: LD_INT 5
15622: ST_TO_ADDR
// if btype = b_depot then
15623: LD_VAR 0 5
15627: PUSH
15628: LD_INT 0
15630: EQUAL
15631: IFFALSE 15641
// btype := b_warehouse ;
15633: LD_ADDR_VAR 0 5
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// if btype = b_workshop then
15641: LD_VAR 0 5
15645: PUSH
15646: LD_INT 2
15648: EQUAL
15649: IFFALSE 15659
// btype := b_factory ;
15651: LD_ADDR_VAR 0 5
15655: PUSH
15656: LD_INT 3
15658: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15659: LD_ADDR_VAR 0 4
15663: PUSH
15664: LD_VAR 0 5
15668: PPUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: CALL_OW 248
15678: PPUSH
15679: CALL_OW 450
15683: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_VAR 0 3
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 275
15701: PUSH
15702: LD_VAR 0 4
15706: PUSH
15707: LD_INT 1
15709: ARRAY
15710: GREATEREQUAL
15711: IFFALSE 15737
15713: PUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 2
15721: PPUSH
15722: CALL_OW 275
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_INT 2
15734: ARRAY
15735: GREATEREQUAL
15736: AND
15737: IFFALSE 15763
15739: PUSH
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_INT 3
15747: PPUSH
15748: CALL_OW 275
15752: PUSH
15753: LD_VAR 0 4
15757: PUSH
15758: LD_INT 3
15760: ARRAY
15761: GREATEREQUAL
15762: AND
15763: ST_TO_ADDR
// end ;
15764: LD_VAR 0 2
15768: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15769: LD_INT 0
15771: PPUSH
15772: PPUSH
15773: PPUSH
// pom := GetBase ( building ) ;
15774: LD_ADDR_VAR 0 4
15778: PUSH
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL_OW 274
15788: ST_TO_ADDR
// if not pom then
15789: LD_VAR 0 4
15793: NOT
15794: IFFALSE 15798
// exit ;
15796: GO 15903
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15798: LD_ADDR_VAR 0 5
15802: PUSH
15803: LD_VAR 0 2
15807: PPUSH
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL_OW 248
15817: PPUSH
15818: CALL_OW 450
15822: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15823: LD_ADDR_VAR 0 3
15827: PUSH
15828: LD_VAR 0 4
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 275
15840: PUSH
15841: LD_VAR 0 5
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: GREATEREQUAL
15850: IFFALSE 15876
15852: PUSH
15853: LD_VAR 0 4
15857: PPUSH
15858: LD_INT 2
15860: PPUSH
15861: CALL_OW 275
15865: PUSH
15866: LD_VAR 0 5
15870: PUSH
15871: LD_INT 2
15873: ARRAY
15874: GREATEREQUAL
15875: AND
15876: IFFALSE 15902
15878: PUSH
15879: LD_VAR 0 4
15883: PPUSH
15884: LD_INT 3
15886: PPUSH
15887: CALL_OW 275
15891: PUSH
15892: LD_VAR 0 5
15896: PUSH
15897: LD_INT 3
15899: ARRAY
15900: GREATEREQUAL
15901: AND
15902: ST_TO_ADDR
// end ;
15903: LD_VAR 0 3
15907: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15908: LD_INT 0
15910: PPUSH
15911: PPUSH
15912: PPUSH
15913: PPUSH
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
15918: PPUSH
15919: PPUSH
15920: PPUSH
// result := false ;
15921: LD_ADDR_VAR 0 8
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15929: LD_VAR 0 5
15933: NOT
15934: IFTRUE 15943
15936: PUSH
15937: LD_VAR 0 1
15941: NOT
15942: OR
15943: IFTRUE 15952
15945: PUSH
15946: LD_VAR 0 2
15950: NOT
15951: OR
15952: IFTRUE 15961
15954: PUSH
15955: LD_VAR 0 3
15959: NOT
15960: OR
15961: IFFALSE 15965
// exit ;
15963: GO 16791
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15965: LD_ADDR_VAR 0 14
15969: PUSH
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: LD_VAR 0 4
15989: PPUSH
15990: LD_VAR 0 5
15994: PUSH
15995: LD_INT 1
15997: ARRAY
15998: PPUSH
15999: CALL_OW 248
16003: PPUSH
16004: LD_INT 0
16006: PPUSH
16007: CALL 18072 0 6
16011: ST_TO_ADDR
// if not hexes then
16012: LD_VAR 0 14
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16791
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16021: LD_ADDR_VAR 0 17
16025: PUSH
16026: LD_VAR 0 5
16030: PPUSH
16031: LD_INT 22
16033: PUSH
16034: LD_VAR 0 13
16038: PPUSH
16039: CALL_OW 255
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 30
16053: PUSH
16054: LD_INT 0
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 30
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 72
16084: ST_TO_ADDR
// for i = 1 to hexes do
16085: LD_ADDR_VAR 0 9
16089: PUSH
16090: DOUBLE
16091: LD_INT 1
16093: DEC
16094: ST_TO_ADDR
16095: LD_VAR 0 14
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16789
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16103: LD_ADDR_VAR 0 13
16107: PUSH
16108: LD_VAR 0 14
16112: PUSH
16113: LD_VAR 0 9
16117: ARRAY
16118: PUSH
16119: LD_INT 1
16121: ARRAY
16122: PPUSH
16123: LD_VAR 0 14
16127: PUSH
16128: LD_VAR 0 9
16132: ARRAY
16133: PUSH
16134: LD_INT 2
16136: ARRAY
16137: PPUSH
16138: CALL_OW 428
16142: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16143: LD_VAR 0 14
16147: PUSH
16148: LD_VAR 0 9
16152: ARRAY
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PPUSH
16158: LD_VAR 0 14
16162: PUSH
16163: LD_VAR 0 9
16167: ARRAY
16168: PUSH
16169: LD_INT 2
16171: ARRAY
16172: PPUSH
16173: CALL_OW 351
16177: IFTRUE 16216
16179: PUSH
16180: LD_VAR 0 14
16184: PUSH
16185: LD_VAR 0 9
16189: ARRAY
16190: PUSH
16191: LD_INT 1
16193: ARRAY
16194: PPUSH
16195: LD_VAR 0 14
16199: PUSH
16200: LD_VAR 0 9
16204: ARRAY
16205: PUSH
16206: LD_INT 2
16208: ARRAY
16209: PPUSH
16210: CALL_OW 488
16214: NOT
16215: OR
16216: IFTRUE 16233
16218: PUSH
16219: LD_VAR 0 13
16223: PPUSH
16224: CALL_OW 247
16228: PUSH
16229: LD_INT 3
16231: EQUAL
16232: OR
16233: IFFALSE 16239
// exit ;
16235: POP
16236: POP
16237: GO 16791
// if not tmp then
16239: LD_VAR 0 13
16243: NOT
16244: IFFALSE 16248
// continue ;
16246: GO 16100
// result := true ;
16248: LD_ADDR_VAR 0 8
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16256: LD_VAR 0 6
16260: IFFALSE 16277
16262: PUSH
16263: LD_VAR 0 13
16267: PPUSH
16268: CALL_OW 247
16272: PUSH
16273: LD_INT 2
16275: EQUAL
16276: AND
16277: IFFALSE 16294
16279: PUSH
16280: LD_VAR 0 13
16284: PPUSH
16285: CALL_OW 263
16289: PUSH
16290: LD_INT 1
16292: EQUAL
16293: AND
16294: IFFALSE 16458
// begin if IsDrivenBy ( tmp ) then
16296: LD_VAR 0 13
16300: PPUSH
16301: CALL_OW 311
16305: IFFALSE 16309
// continue ;
16307: GO 16100
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16309: LD_VAR 0 6
16313: PPUSH
16314: LD_INT 3
16316: PUSH
16317: LD_INT 60
16319: PUSH
16320: EMPTY
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 3
16329: PUSH
16330: LD_INT 55
16332: PUSH
16333: EMPTY
16334: LIST
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 72
16348: IFFALSE 16456
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16350: LD_ADDR_VAR 0 18
16354: PUSH
16355: LD_VAR 0 6
16359: PPUSH
16360: LD_INT 3
16362: PUSH
16363: LD_INT 60
16365: PUSH
16366: EMPTY
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 3
16375: PUSH
16376: LD_INT 55
16378: PUSH
16379: EMPTY
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 72
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: ST_TO_ADDR
// if IsInUnit ( driver ) then
16399: LD_VAR 0 18
16403: PPUSH
16404: CALL_OW 310
16408: IFFALSE 16419
// ComExit ( driver ) ;
16410: LD_VAR 0 18
16414: PPUSH
16415: CALL 42062 0 1
// AddComEnterUnit ( driver , tmp ) ;
16419: LD_VAR 0 18
16423: PPUSH
16424: LD_VAR 0 13
16428: PPUSH
16429: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16433: LD_VAR 0 18
16437: PPUSH
16438: LD_VAR 0 7
16442: PPUSH
16443: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16447: LD_VAR 0 18
16451: PPUSH
16452: CALL_OW 181
// end ; continue ;
16456: GO 16100
// end ; if not cleaners or not tmp in cleaners then
16458: LD_VAR 0 6
16462: NOT
16463: IFTRUE 16478
16465: PUSH
16466: LD_VAR 0 13
16470: PUSH
16471: LD_VAR 0 6
16475: IN
16476: NOT
16477: OR
16478: IFFALSE 16787
// begin if dep then
16480: LD_VAR 0 17
16484: IFFALSE 16620
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16486: LD_ADDR_VAR 0 16
16490: PUSH
16491: LD_VAR 0 17
16495: PUSH
16496: LD_INT 1
16498: ARRAY
16499: PPUSH
16500: CALL_OW 250
16504: PPUSH
16505: LD_VAR 0 17
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: CALL_OW 254
16518: PPUSH
16519: LD_INT 5
16521: PPUSH
16522: CALL_OW 272
16526: PUSH
16527: LD_VAR 0 17
16531: PUSH
16532: LD_INT 1
16534: ARRAY
16535: PPUSH
16536: CALL_OW 251
16540: PPUSH
16541: LD_VAR 0 17
16545: PUSH
16546: LD_INT 1
16548: ARRAY
16549: PPUSH
16550: CALL_OW 254
16554: PPUSH
16555: LD_INT 5
16557: PPUSH
16558: CALL_OW 273
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16567: LD_VAR 0 16
16571: PUSH
16572: LD_INT 1
16574: ARRAY
16575: PPUSH
16576: LD_VAR 0 16
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: PPUSH
16585: CALL_OW 488
16589: IFFALSE 16620
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16591: LD_VAR 0 13
16595: PPUSH
16596: LD_VAR 0 16
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: PPUSH
16605: LD_VAR 0 16
16609: PUSH
16610: LD_INT 2
16612: ARRAY
16613: PPUSH
16614: CALL_OW 111
// continue ;
16618: GO 16100
// end ; end ; r := GetDir ( tmp ) ;
16620: LD_ADDR_VAR 0 15
16624: PUSH
16625: LD_VAR 0 13
16629: PPUSH
16630: CALL_OW 254
16634: ST_TO_ADDR
// if r = 5 then
16635: LD_VAR 0 15
16639: PUSH
16640: LD_INT 5
16642: EQUAL
16643: IFFALSE 16653
// r := 0 ;
16645: LD_ADDR_VAR 0 15
16649: PUSH
16650: LD_INT 0
16652: ST_TO_ADDR
// for j = r to 5 do
16653: LD_ADDR_VAR 0 10
16657: PUSH
16658: DOUBLE
16659: LD_VAR 0 15
16663: DEC
16664: ST_TO_ADDR
16665: LD_INT 5
16667: PUSH
16668: FOR_TO
16669: IFFALSE 16785
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16671: LD_ADDR_VAR 0 11
16675: PUSH
16676: LD_VAR 0 13
16680: PPUSH
16681: CALL_OW 250
16685: PPUSH
16686: LD_VAR 0 10
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 272
16698: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16699: LD_ADDR_VAR 0 12
16703: PUSH
16704: LD_VAR 0 13
16708: PPUSH
16709: CALL_OW 251
16713: PPUSH
16714: LD_VAR 0 10
16718: PPUSH
16719: LD_INT 2
16721: PPUSH
16722: CALL_OW 273
16726: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16727: LD_VAR 0 11
16731: PPUSH
16732: LD_VAR 0 12
16736: PPUSH
16737: CALL_OW 488
16741: IFFALSE 16760
16743: PUSH
16744: LD_VAR 0 11
16748: PPUSH
16749: LD_VAR 0 12
16753: PPUSH
16754: CALL_OW 428
16758: NOT
16759: AND
16760: IFFALSE 16783
// begin ComMoveXY ( tmp , _x , _y ) ;
16762: LD_VAR 0 13
16766: PPUSH
16767: LD_VAR 0 11
16771: PPUSH
16772: LD_VAR 0 12
16776: PPUSH
16777: CALL_OW 111
// break ;
16781: GO 16785
// end ; end ;
16783: GO 16668
16785: POP
16786: POP
// end ; end ;
16787: GO 16100
16789: POP
16790: POP
// end ;
16791: LD_VAR 0 8
16795: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16796: LD_INT 0
16798: PPUSH
// result := true ;
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_INT 1
16806: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16807: LD_VAR 0 2
16811: PUSH
16812: LD_INT 24
16814: DOUBLE
16815: EQUAL
16816: IFTRUE 16826
16818: LD_INT 33
16820: DOUBLE
16821: EQUAL
16822: IFTRUE 16826
16824: GO 16851
16826: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16827: LD_ADDR_VAR 0 3
16831: PUSH
16832: LD_INT 32
16834: PPUSH
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 321
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: ST_TO_ADDR
16849: GO 17167
16851: LD_INT 20
16853: DOUBLE
16854: EQUAL
16855: IFTRUE 16859
16857: GO 16884
16859: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16860: LD_ADDR_VAR 0 3
16864: PUSH
16865: LD_INT 6
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 321
16877: PUSH
16878: LD_INT 2
16880: EQUAL
16881: ST_TO_ADDR
16882: GO 17167
16884: LD_INT 22
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16898
16890: LD_INT 36
16892: DOUBLE
16893: EQUAL
16894: IFTRUE 16898
16896: GO 16923
16898: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16899: LD_ADDR_VAR 0 3
16903: PUSH
16904: LD_INT 15
16906: PPUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 321
16916: PUSH
16917: LD_INT 2
16919: EQUAL
16920: ST_TO_ADDR
16921: GO 17167
16923: LD_INT 30
16925: DOUBLE
16926: EQUAL
16927: IFTRUE 16931
16929: GO 16956
16931: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16932: LD_ADDR_VAR 0 3
16936: PUSH
16937: LD_INT 20
16939: PPUSH
16940: LD_VAR 0 1
16944: PPUSH
16945: CALL_OW 321
16949: PUSH
16950: LD_INT 2
16952: EQUAL
16953: ST_TO_ADDR
16954: GO 17167
16956: LD_INT 28
16958: DOUBLE
16959: EQUAL
16960: IFTRUE 16970
16962: LD_INT 21
16964: DOUBLE
16965: EQUAL
16966: IFTRUE 16970
16968: GO 16995
16970: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16971: LD_ADDR_VAR 0 3
16975: PUSH
16976: LD_INT 21
16978: PPUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 321
16988: PUSH
16989: LD_INT 2
16991: EQUAL
16992: ST_TO_ADDR
16993: GO 17167
16995: LD_INT 16
16997: DOUBLE
16998: EQUAL
16999: IFTRUE 17003
17001: GO 17028
17003: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17004: LD_ADDR_VAR 0 3
17008: PUSH
17009: LD_INT 84
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 321
17021: PUSH
17022: LD_INT 2
17024: EQUAL
17025: ST_TO_ADDR
17026: GO 17167
17028: LD_INT 19
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17042
17034: LD_INT 23
17036: DOUBLE
17037: EQUAL
17038: IFTRUE 17042
17040: GO 17067
17042: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17043: LD_ADDR_VAR 0 3
17047: PUSH
17048: LD_INT 83
17050: PPUSH
17051: LD_VAR 0 1
17055: PPUSH
17056: CALL_OW 321
17060: PUSH
17061: LD_INT 2
17063: EQUAL
17064: ST_TO_ADDR
17065: GO 17167
17067: LD_INT 17
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17100
17075: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_INT 39
17083: PPUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 321
17093: PUSH
17094: LD_INT 2
17096: EQUAL
17097: ST_TO_ADDR
17098: GO 17167
17100: LD_INT 18
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17133
17108: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 40
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 321
17126: PUSH
17127: LD_INT 2
17129: EQUAL
17130: ST_TO_ADDR
17131: GO 17167
17133: LD_INT 27
17135: DOUBLE
17136: EQUAL
17137: IFTRUE 17141
17139: GO 17166
17141: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_INT 35
17149: PPUSH
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 321
17159: PUSH
17160: LD_INT 2
17162: EQUAL
17163: ST_TO_ADDR
17164: GO 17167
17166: POP
// end ;
17167: LD_VAR 0 3
17171: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17172: LD_INT 0
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
// result := false ;
17185: LD_ADDR_VAR 0 6
17189: PUSH
17190: LD_INT 0
17192: ST_TO_ADDR
// if btype = b_depot then
17193: LD_VAR 0 2
17197: PUSH
17198: LD_INT 0
17200: EQUAL
17201: IFFALSE 17213
// begin result := true ;
17203: LD_ADDR_VAR 0 6
17207: PUSH
17208: LD_INT 1
17210: ST_TO_ADDR
// exit ;
17211: GO 18067
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17213: LD_VAR 0 1
17217: NOT
17218: IFTRUE 17243
17220: PUSH
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 266
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: IN
17241: NOT
17242: OR
17243: IFTRUE 17252
17245: PUSH
17246: LD_VAR 0 2
17250: NOT
17251: OR
17252: IFTRUE 17288
17254: PUSH
17255: LD_VAR 0 5
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: LD_INT 2
17268: PUSH
17269: LD_INT 3
17271: PUSH
17272: LD_INT 4
17274: PUSH
17275: LD_INT 5
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: IN
17286: NOT
17287: OR
17288: IFTRUE 17307
17290: PUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_VAR 0 4
17300: PPUSH
17301: CALL_OW 488
17305: NOT
17306: OR
17307: IFFALSE 17311
// exit ;
17309: GO 18067
// side := GetSide ( depot ) ;
17311: LD_ADDR_VAR 0 9
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 255
17325: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17326: LD_VAR 0 9
17330: PPUSH
17331: LD_VAR 0 2
17335: PPUSH
17336: CALL 16796 0 2
17340: NOT
17341: IFFALSE 17345
// exit ;
17343: GO 18067
// pom := GetBase ( depot ) ;
17345: LD_ADDR_VAR 0 10
17349: PUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 274
17359: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17360: LD_ADDR_VAR 0 11
17364: PUSH
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 248
17379: PPUSH
17380: CALL_OW 450
17384: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17385: LD_VAR 0 10
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 275
17397: PUSH
17398: LD_VAR 0 11
17402: PUSH
17403: LD_INT 1
17405: ARRAY
17406: GREATEREQUAL
17407: IFFALSE 17433
17409: PUSH
17410: LD_VAR 0 10
17414: PPUSH
17415: LD_INT 2
17417: PPUSH
17418: CALL_OW 275
17422: PUSH
17423: LD_VAR 0 11
17427: PUSH
17428: LD_INT 2
17430: ARRAY
17431: GREATEREQUAL
17432: AND
17433: IFFALSE 17459
17435: PUSH
17436: LD_VAR 0 10
17440: PPUSH
17441: LD_INT 3
17443: PPUSH
17444: CALL_OW 275
17448: PUSH
17449: LD_VAR 0 11
17453: PUSH
17454: LD_INT 3
17456: ARRAY
17457: GREATEREQUAL
17458: AND
17459: NOT
17460: IFFALSE 17464
// exit ;
17462: GO 18067
// if GetBType ( depot ) = b_depot then
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 266
17473: PUSH
17474: LD_INT 0
17476: EQUAL
17477: IFFALSE 17489
// dist := 28 else
17479: LD_ADDR_VAR 0 14
17483: PUSH
17484: LD_INT 28
17486: ST_TO_ADDR
17487: GO 17497
// dist := 36 ;
17489: LD_ADDR_VAR 0 14
17493: PUSH
17494: LD_INT 36
17496: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17497: LD_VAR 0 1
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_VAR 0 4
17511: PPUSH
17512: CALL_OW 297
17516: PUSH
17517: LD_VAR 0 14
17521: GREATER
17522: IFFALSE 17526
// exit ;
17524: GO 18067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17526: LD_ADDR_VAR 0 12
17530: PUSH
17531: LD_VAR 0 2
17535: PPUSH
17536: LD_VAR 0 3
17540: PPUSH
17541: LD_VAR 0 4
17545: PPUSH
17546: LD_VAR 0 5
17550: PPUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 248
17560: PPUSH
17561: LD_INT 0
17563: PPUSH
17564: CALL 18072 0 6
17568: ST_TO_ADDR
// if not hexes then
17569: LD_VAR 0 12
17573: NOT
17574: IFFALSE 17578
// exit ;
17576: GO 18067
// hex := GetHexInfo ( x , y ) ;
17578: LD_ADDR_VAR 0 15
17582: PUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: CALL_OW 546
17597: ST_TO_ADDR
// if hex [ 1 ] then
17598: LD_VAR 0 15
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: IFFALSE 17610
// exit ;
17608: GO 18067
// height := hex [ 2 ] ;
17610: LD_ADDR_VAR 0 13
17614: PUSH
17615: LD_VAR 0 15
17619: PUSH
17620: LD_INT 2
17622: ARRAY
17623: ST_TO_ADDR
// for i = 1 to hexes do
17624: LD_ADDR_VAR 0 7
17628: PUSH
17629: DOUBLE
17630: LD_INT 1
17632: DEC
17633: ST_TO_ADDR
17634: LD_VAR 0 12
17638: PUSH
17639: FOR_TO
17640: IFFALSE 17984
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17642: LD_VAR 0 12
17646: PUSH
17647: LD_VAR 0 7
17651: ARRAY
17652: PUSH
17653: LD_INT 1
17655: ARRAY
17656: PPUSH
17657: LD_VAR 0 12
17661: PUSH
17662: LD_VAR 0 7
17666: ARRAY
17667: PUSH
17668: LD_INT 2
17670: ARRAY
17671: PPUSH
17672: CALL_OW 488
17676: NOT
17677: IFTRUE 17719
17679: PUSH
17680: LD_VAR 0 12
17684: PUSH
17685: LD_VAR 0 7
17689: ARRAY
17690: PUSH
17691: LD_INT 1
17693: ARRAY
17694: PPUSH
17695: LD_VAR 0 12
17699: PUSH
17700: LD_VAR 0 7
17704: ARRAY
17705: PUSH
17706: LD_INT 2
17708: ARRAY
17709: PPUSH
17710: CALL_OW 428
17714: PUSH
17715: LD_INT 0
17717: GREATER
17718: OR
17719: IFTRUE 17757
17721: PUSH
17722: LD_VAR 0 12
17726: PUSH
17727: LD_VAR 0 7
17731: ARRAY
17732: PUSH
17733: LD_INT 1
17735: ARRAY
17736: PPUSH
17737: LD_VAR 0 12
17741: PUSH
17742: LD_VAR 0 7
17746: ARRAY
17747: PUSH
17748: LD_INT 2
17750: ARRAY
17751: PPUSH
17752: CALL_OW 351
17756: OR
17757: IFFALSE 17763
// exit ;
17759: POP
17760: POP
17761: GO 18067
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17763: LD_ADDR_VAR 0 8
17767: PUSH
17768: LD_VAR 0 12
17772: PUSH
17773: LD_VAR 0 7
17777: ARRAY
17778: PUSH
17779: LD_INT 1
17781: ARRAY
17782: PPUSH
17783: LD_VAR 0 12
17787: PUSH
17788: LD_VAR 0 7
17792: ARRAY
17793: PUSH
17794: LD_INT 2
17796: ARRAY
17797: PPUSH
17798: CALL_OW 546
17802: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17803: LD_VAR 0 8
17807: PUSH
17808: LD_INT 1
17810: ARRAY
17811: IFTRUE 17833
17813: PUSH
17814: LD_VAR 0 8
17818: PUSH
17819: LD_INT 2
17821: ARRAY
17822: PUSH
17823: LD_VAR 0 13
17827: PUSH
17828: LD_INT 2
17830: PLUS
17831: GREATER
17832: OR
17833: IFTRUE 17855
17835: PUSH
17836: LD_VAR 0 8
17840: PUSH
17841: LD_INT 2
17843: ARRAY
17844: PUSH
17845: LD_VAR 0 13
17849: PUSH
17850: LD_INT 2
17852: MINUS
17853: LESS
17854: OR
17855: IFTRUE 17923
17857: PUSH
17858: LD_VAR 0 8
17862: PUSH
17863: LD_INT 3
17865: ARRAY
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: LD_INT 8
17872: PUSH
17873: LD_INT 9
17875: PUSH
17876: LD_INT 10
17878: PUSH
17879: LD_INT 11
17881: PUSH
17882: LD_INT 12
17884: PUSH
17885: LD_INT 13
17887: PUSH
17888: LD_INT 16
17890: PUSH
17891: LD_INT 17
17893: PUSH
17894: LD_INT 18
17896: PUSH
17897: LD_INT 19
17899: PUSH
17900: LD_INT 20
17902: PUSH
17903: LD_INT 21
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: IN
17921: NOT
17922: OR
17923: IFTRUE 17936
17925: PUSH
17926: LD_VAR 0 8
17930: PUSH
17931: LD_INT 5
17933: ARRAY
17934: NOT
17935: OR
17936: IFTRUE 17976
17938: PUSH
17939: LD_VAR 0 8
17943: PUSH
17944: LD_INT 6
17946: ARRAY
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: LD_INT 7
17956: PUSH
17957: LD_INT 9
17959: PUSH
17960: LD_INT 10
17962: PUSH
17963: LD_INT 11
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: IN
17974: NOT
17975: OR
17976: IFFALSE 17982
// exit ;
17978: POP
17979: POP
17980: GO 18067
// end ;
17982: GO 17639
17984: POP
17985: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17986: LD_VAR 0 9
17990: PPUSH
17991: LD_VAR 0 3
17995: PPUSH
17996: LD_VAR 0 4
18000: PPUSH
18001: LD_INT 20
18003: PPUSH
18004: CALL 9886 0 4
18008: PUSH
18009: LD_INT 4
18011: ARRAY
18012: IFFALSE 18016
// exit ;
18014: GO 18067
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18016: LD_VAR 0 2
18020: PUSH
18021: LD_INT 29
18023: PUSH
18024: LD_INT 30
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: IN
18031: IFFALSE 18055
18033: PUSH
18034: LD_VAR 0 3
18038: PPUSH
18039: LD_VAR 0 4
18043: PPUSH
18044: LD_VAR 0 9
18048: PPUSH
18049: CALL_OW 440
18053: NOT
18054: AND
18055: IFFALSE 18059
// exit ;
18057: GO 18067
// result := true ;
18059: LD_ADDR_VAR 0 6
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// end ;
18067: LD_VAR 0 6
18071: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18072: LD_INT 0
18074: PPUSH
18075: PPUSH
18076: PPUSH
18077: PPUSH
18078: PPUSH
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
18110: PPUSH
18111: PPUSH
18112: PPUSH
18113: PPUSH
18114: PPUSH
18115: PPUSH
18116: PPUSH
18117: PPUSH
18118: PPUSH
18119: PPUSH
18120: PPUSH
18121: PPUSH
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
18129: PPUSH
18130: PPUSH
18131: PPUSH
// result = [ ] ;
18132: LD_ADDR_VAR 0 7
18136: PUSH
18137: EMPTY
18138: ST_TO_ADDR
// temp_list = [ ] ;
18139: LD_ADDR_VAR 0 9
18143: PUSH
18144: EMPTY
18145: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18146: LD_VAR 0 4
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 3
18162: PUSH
18163: LD_INT 4
18165: PUSH
18166: LD_INT 5
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: IN
18177: NOT
18178: IFTRUE 18221
18180: PUSH
18181: LD_VAR 0 1
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: IN
18196: IFFALSE 18220
18198: PUSH
18199: LD_VAR 0 5
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: LD_INT 3
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: IN
18218: NOT
18219: AND
18220: OR
18221: IFFALSE 18225
// exit ;
18223: GO 36624
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18225: LD_VAR 0 1
18229: PUSH
18230: LD_INT 6
18232: PUSH
18233: LD_INT 7
18235: PUSH
18236: LD_INT 8
18238: PUSH
18239: LD_INT 13
18241: PUSH
18242: LD_INT 12
18244: PUSH
18245: LD_INT 15
18247: PUSH
18248: LD_INT 11
18250: PUSH
18251: LD_INT 14
18253: PUSH
18254: LD_INT 10
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: IN
18268: IFFALSE 18278
// btype = b_lab ;
18270: LD_ADDR_VAR 0 1
18274: PUSH
18275: LD_INT 6
18277: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18278: LD_VAR 0 6
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 1
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: IN
18297: NOT
18298: IFTRUE 18366
18300: PUSH
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: LD_INT 6
18320: PUSH
18321: LD_INT 36
18323: PUSH
18324: LD_INT 4
18326: PUSH
18327: LD_INT 5
18329: PUSH
18330: LD_INT 31
18332: PUSH
18333: LD_INT 32
18335: PUSH
18336: LD_INT 33
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: IN
18352: NOT
18353: IFFALSE 18365
18355: PUSH
18356: LD_VAR 0 6
18360: PUSH
18361: LD_INT 1
18363: EQUAL
18364: AND
18365: OR
18366: IFTRUE 18398
18368: PUSH
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 3
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: IN
18384: NOT
18385: IFFALSE 18397
18387: PUSH
18388: LD_VAR 0 6
18392: PUSH
18393: LD_INT 2
18395: EQUAL
18396: AND
18397: OR
18398: IFFALSE 18408
// mode = 0 ;
18400: LD_ADDR_VAR 0 6
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// case mode of 0 :
18408: LD_VAR 0 6
18412: PUSH
18413: LD_INT 0
18415: DOUBLE
18416: EQUAL
18417: IFTRUE 18421
18419: GO 29874
18421: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18422: LD_ADDR_VAR 0 11
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: LD_INT 0
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 1
18491: NEG
18492: PUSH
18493: LD_INT 1
18495: NEG
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 1
18503: NEG
18504: PUSH
18505: LD_INT 2
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 0
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: NEG
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: LD_INT 3
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 3
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18615: LD_ADDR_VAR 0 12
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: LD_INT 1
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 2
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 1
18727: NEG
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 2
18738: NEG
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 2
18761: NEG
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 3
18772: NEG
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 3
18783: NEG
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18811: LD_ADDR_VAR 0 13
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 1
18880: NEG
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: LD_INT 2
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 2
18946: NEG
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 2
18958: NEG
18959: PUSH
18960: LD_INT 3
18962: NEG
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 3
18970: NEG
18971: PUSH
18972: LD_INT 2
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 3
18982: NEG
18983: PUSH
18984: LD_INT 3
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19010: LD_ADDR_VAR 0 14
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: LD_INT 2
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 0
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 3
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 3
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 2
19182: NEG
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19206: LD_ADDR_VAR 0 15
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 1
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: NEG
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 3
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 3
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19399: LD_ADDR_VAR 0 16
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: NEG
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 3
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 3
19556: PUSH
19557: LD_INT 3
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: LD_INT 3
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19592: LD_ADDR_VAR 0 17
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: LD_INT 2
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: LD_INT 2
19688: NEG
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 2
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 2
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: LD_INT 2
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 2
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: NEG
19792: PUSH
19793: LD_INT 2
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19822: LD_ADDR_VAR 0 18
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 0
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 1
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: NEG
19904: PUSH
19905: LD_INT 2
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 2
19918: NEG
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: NEG
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 2
20021: NEG
20022: PUSH
20023: LD_INT 2
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20052: LD_ADDR_VAR 0 19
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: PUSH
20135: LD_INT 2
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: LD_INT 2
20148: NEG
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 1
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 1
20217: NEG
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: NEG
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: NEG
20252: PUSH
20253: LD_INT 2
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20282: LD_ADDR_VAR 0 20
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: LD_INT 2
20367: NEG
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 2
20378: NEG
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: LD_INT 0
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: NEG
20470: PUSH
20471: LD_INT 1
20473: NEG
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: LD_INT 2
20485: NEG
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20512: LD_ADDR_VAR 0 21
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: LD_INT 1
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 2
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: LD_INT 2
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: NEG
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: NEG
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20742: LD_ADDR_VAR 0 22
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: LD_INT 1
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: NEG
20824: PUSH
20825: LD_INT 2
20827: NEG
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: LD_INT 2
20838: NEG
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: NEG
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: LD_INT 2
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20972: LD_ADDR_VAR 0 23
20976: PUSH
20977: LD_INT 0
20979: PUSH
20980: LD_INT 0
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 1
20992: NEG
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: LD_INT 1
21045: NEG
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 2
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: LD_INT 2
21068: NEG
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: LD_INT 1
21079: NEG
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 2
21159: NEG
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: LD_INT 2
21175: NEG
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: LD_INT 3
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 3
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21252: LD_ADDR_VAR 0 24
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: LD_INT 2
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 3
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21528: LD_ADDR_VAR 0 25
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 0
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: LD_INT 2
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: LD_INT 0
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: LD_INT 2
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 2
21704: NEG
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 2
21715: NEG
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 2
21727: NEG
21728: PUSH
21729: LD_INT 2
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 3
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 3
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: LD_INT 3
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21802: LD_ADDR_VAR 0 26
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: LD_INT 0
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: LD_INT 1
21822: NEG
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 0
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: NEG
22002: PUSH
22003: LD_INT 2
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: LD_INT 3
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: LD_INT 3
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 2
22044: NEG
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22078: LD_ADDR_VAR 0 27
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 0
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 1
22136: NEG
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: LD_INT 2
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: PUSH
22194: LD_INT 0
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 2
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: NEG
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 2
22254: NEG
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 2
22265: NEG
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: NEG
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 3
22311: NEG
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 3
22323: NEG
22324: PUSH
22325: LD_INT 2
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22358: LD_ADDR_VAR 0 28
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 0
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 1
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: LD_INT 2
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: LD_INT 3
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: LD_INT 3
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 3
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 3
22605: NEG
22606: PUSH
22607: LD_INT 2
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22640: LD_ADDR_VAR 0 29
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 1
22668: PUSH
22669: LD_INT 0
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: PUSH
22723: LD_INT 2
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 2
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 2
22806: NEG
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: NEG
22819: PUSH
22820: LD_INT 2
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 2
22830: NEG
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 3
22884: NEG
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22919: LD_ADDR_VAR 0 30
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: LD_INT 2
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: LD_INT 3
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 2
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 3
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 2
23151: NEG
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 3
23162: NEG
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23197: LD_ADDR_VAR 0 31
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 2
23374: NEG
23375: PUSH
23376: LD_INT 2
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 3
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 3
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 3
23440: NEG
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23475: LD_ADDR_VAR 0 32
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 2
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 2
23600: PUSH
23601: LD_INT 2
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: NEG
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: LD_INT 3
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 3
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 3
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: NEG
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 3
23718: NEG
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23753: LD_ADDR_VAR 0 33
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 2
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: NEG
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: NEG
23932: PUSH
23933: LD_INT 2
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 2
23943: NEG
23944: PUSH
23945: LD_INT 3
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 3
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: NEG
23998: PUSH
23999: LD_INT 2
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24032: LD_ADDR_VAR 0 34
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: NEG
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 2
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 3
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 3
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 3
24277: NEG
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24312: LD_ADDR_VAR 0 35
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24424: LD_ADDR_VAR 0 36
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 2
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24536: LD_ADDR_VAR 0 37
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24648: LD_ADDR_VAR 0 38
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 2
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: NEG
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24760: LD_ADDR_VAR 0 39
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24872: LD_ADDR_VAR 0 40
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24984: LD_ADDR_VAR 0 41
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: LD_INT 2
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 2
25139: NEG
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: LD_INT 2
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: LD_INT 3
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 3
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 3
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 3
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: LD_INT 3
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 3
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 2
25247: NEG
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 3
25258: NEG
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 3
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 3
25281: NEG
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 3
25293: NEG
25294: PUSH
25295: LD_INT 3
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25334: LD_ADDR_VAR 0 42
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 2
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 2
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: NEG
25525: PUSH
25526: LD_INT 3
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 3
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 3
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 2
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: LD_INT 3
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: LD_INT 3
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 3
25643: NEG
25644: PUSH
25645: LD_INT 3
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25684: LD_ADDR_VAR 0 43
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 2
25850: NEG
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 2
25861: NEG
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 3
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 3
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 2
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 3
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 3
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: NEG
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 3
25991: NEG
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26032: LD_ADDR_VAR 0 44
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 1
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: NEG
26211: PUSH
26212: LD_INT 2
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 3
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 3
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: LD_INT 3
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: LD_INT 3
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 3
26317: NEG
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 3
26329: NEG
26330: PUSH
26331: LD_INT 2
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 3
26341: NEG
26342: PUSH
26343: LD_INT 3
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26382: LD_ADDR_VAR 0 45
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: LD_INT 2
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: LD_INT 3
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 3
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 3
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: LD_INT 2
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: LD_INT 3
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: LD_INT 3
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 3
26679: NEG
26680: PUSH
26681: LD_INT 2
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 3
26691: NEG
26692: PUSH
26693: LD_INT 3
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26732: LD_ADDR_VAR 0 46
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 3
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 3
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 2
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 3
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 3
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 3
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 3
27028: NEG
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 3
27039: NEG
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27080: LD_ADDR_VAR 0 47
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27231: LD_ADDR_VAR 0 48
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27378: LD_ADDR_VAR 0 49
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 0
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: NEG
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 2
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27522: LD_ADDR_VAR 0 50
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27666: LD_ADDR_VAR 0 51
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: NEG
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27813: LD_ADDR_VAR 0 52
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: NEG
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27964: LD_ADDR_VAR 0 53
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 2
28060: NEG
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 2
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28194: LD_ADDR_VAR 0 54
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 2
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: LD_INT 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: LD_INT 2
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28424: LD_ADDR_VAR 0 55
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 2
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: LD_INT 2
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28654: LD_ADDR_VAR 0 56
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 1
28674: NEG
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: LD_INT 2
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28884: LD_ADDR_VAR 0 57
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: LD_INT 2
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: NEG
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29114: LD_ADDR_VAR 0 58
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 2
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: LD_INT 2
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29344: LD_ADDR_VAR 0 59
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29432: LD_ADDR_VAR 0 60
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29520: LD_ADDR_VAR 0 61
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: NEG
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29608: LD_ADDR_VAR 0 62
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29696: LD_ADDR_VAR 0 63
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29784: LD_ADDR_VAR 0 64
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// end ; 1 :
29872: GO 35769
29874: LD_INT 1
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 32505
29882: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29883: LD_ADDR_VAR 0 11
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 3
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 2
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29927: LD_ADDR_VAR 0 12
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 3
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29968: LD_ADDR_VAR 0 13
29972: PUSH
29973: LD_INT 3
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 3
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30008: LD_ADDR_VAR 0 14
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30049: LD_ADDR_VAR 0 15
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: NEG
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: NEG
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30093: LD_ADDR_VAR 0 16
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: LD_INT 3
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: LD_INT 2
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 3
30124: NEG
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30139: LD_ADDR_VAR 0 17
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30183: LD_ADDR_VAR 0 18
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30224: LD_ADDR_VAR 0 19
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 3
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30264: LD_ADDR_VAR 0 20
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30305: LD_ADDR_VAR 0 21
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 3
30323: NEG
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 3
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30349: LD_ADDR_VAR 0 22
30353: PUSH
30354: LD_INT 2
30356: NEG
30357: PUSH
30358: LD_INT 3
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 3
30380: NEG
30381: PUSH
30382: LD_INT 3
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30395: LD_ADDR_VAR 0 23
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 4
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: LD_INT 3
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30439: LD_ADDR_VAR 0 24
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 4
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30480: LD_ADDR_VAR 0 25
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 4
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: LD_INT 4
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30520: LD_ADDR_VAR 0 26
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 4
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30561: LD_ADDR_VAR 0 27
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 4
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30605: LD_ADDR_VAR 0 28
30609: PUSH
30610: LD_INT 3
30612: NEG
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 4
30636: NEG
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30651: LD_ADDR_VAR 0 29
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: LD_INT 3
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 4
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 4
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 3
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 5
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 5
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 4
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 6
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: LD_INT 6
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 5
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30806: LD_ADDR_VAR 0 30
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 3
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 4
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 4
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 5
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 5
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 5
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 6
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 6
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30949: LD_ADDR_VAR 0 31
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: LD_INT 3
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: LD_INT 3
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 4
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 4
30996: PUSH
30997: LD_INT 4
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: LD_INT 4
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 5
31016: PUSH
31017: LD_INT 4
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 5
31026: PUSH
31027: LD_INT 5
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 4
31036: PUSH
31037: LD_INT 5
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 6
31046: PUSH
31047: LD_INT 5
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 6
31056: PUSH
31057: LD_INT 6
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 5
31066: PUSH
31067: LD_INT 6
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31088: LD_ADDR_VAR 0 32
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: LD_INT 4
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: LD_INT 3
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: LD_INT 5
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: LD_INT 5
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: LD_INT 4
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: LD_INT 6
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 6
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 5
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31231: LD_ADDR_VAR 0 33
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: NEG
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 3
31272: NEG
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 4
31283: NEG
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 4
31294: NEG
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 4
31306: NEG
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 5
31317: NEG
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 5
31328: NEG
31329: PUSH
31330: LD_INT 1
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 5
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 6
31351: NEG
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 6
31362: NEG
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31386: LD_ADDR_VAR 0 34
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 3
31405: NEG
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: LD_INT 3
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 3
31429: NEG
31430: PUSH
31431: LD_INT 4
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 4
31441: NEG
31442: PUSH
31443: LD_INT 3
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 4
31453: NEG
31454: PUSH
31455: LD_INT 4
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 4
31465: NEG
31466: PUSH
31467: LD_INT 5
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 5
31477: NEG
31478: PUSH
31479: LD_INT 4
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 5
31489: NEG
31490: PUSH
31491: LD_INT 5
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 5
31501: NEG
31502: PUSH
31503: LD_INT 6
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 6
31513: NEG
31514: PUSH
31515: LD_INT 5
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 6
31525: NEG
31526: PUSH
31527: LD_INT 6
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31549: LD_ADDR_VAR 0 41
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31593: LD_ADDR_VAR 0 42
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31634: LD_ADDR_VAR 0 43
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 3
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31674: LD_ADDR_VAR 0 44
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31715: LD_ADDR_VAR 0 45
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31759: LD_ADDR_VAR 0 46
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: NEG
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31805: LD_ADDR_VAR 0 47
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: LD_INT 3
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: LD_INT 3
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31838: LD_ADDR_VAR 0 48
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31869: LD_ADDR_VAR 0 49
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31898: LD_ADDR_VAR 0 50
31902: PUSH
31903: LD_INT 2
31905: PUSH
31906: LD_INT 3
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 3
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31927: LD_ADDR_VAR 0 51
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31958: LD_ADDR_VAR 0 52
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: NEG
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31991: LD_ADDR_VAR 0 53
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: LD_INT 3
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32035: LD_ADDR_VAR 0 54
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32076: LD_ADDR_VAR 0 55
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32116: LD_ADDR_VAR 0 56
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: LD_INT 3
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: LIST
32156: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32157: LD_ADDR_VAR 0 57
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 3
32175: NEG
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 3
32186: NEG
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32201: LD_ADDR_VAR 0 58
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: LD_INT 3
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 3
32220: NEG
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 3
32232: NEG
32233: PUSH
32234: LD_INT 3
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32247: LD_ADDR_VAR 0 59
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32291: LD_ADDR_VAR 0 60
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32332: LD_ADDR_VAR 0 61
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32372: LD_ADDR_VAR 0 62
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32413: LD_ADDR_VAR 0 63
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32457: LD_ADDR_VAR 0 64
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 2
32476: NEG
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: ST_TO_ADDR
// end ; 2 :
32503: GO 35769
32505: LD_INT 2
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 35768
32513: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32514: LD_ADDR_VAR 0 29
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 5
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 5
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 4
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 5
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 4
32644: PUSH
32645: LD_INT 4
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 4
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 4
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 4
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 4
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 5
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 5
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: LD_INT 5
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 3
32797: NEG
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 3
32808: NEG
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: LD_INT 1
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 4
32853: NEG
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 4
32864: NEG
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 4
32876: NEG
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 4
32899: NEG
32900: PUSH
32901: LD_INT 4
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 4
32911: NEG
32912: PUSH
32913: LD_INT 5
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 3
32923: NEG
32924: PUSH
32925: LD_INT 4
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 4
32947: NEG
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 5
32959: NEG
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 5
32971: NEG
32972: PUSH
32973: LD_INT 5
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: LD_INT 5
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33052: LD_ADDR_VAR 0 30
33056: PUSH
33057: LD_INT 4
33059: PUSH
33060: LD_INT 4
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 4
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 5
33079: PUSH
33080: LD_INT 4
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: LD_INT 5
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 4
33099: PUSH
33100: LD_INT 5
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 3
33109: PUSH
33110: LD_INT 4
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: LD_INT 3
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 5
33129: PUSH
33130: LD_INT 3
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: LD_INT 5
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 3
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: LD_INT 3
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 4
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: NEG
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 4
33242: NEG
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 4
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 3
33276: NEG
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 4
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 5
33298: NEG
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 5
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 5
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 3
33344: NEG
33345: PUSH
33346: LD_INT 3
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: LD_INT 4
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: LD_INT 3
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 3
33392: NEG
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 4
33404: NEG
33405: PUSH
33406: LD_INT 3
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 4
33416: NEG
33417: PUSH
33418: LD_INT 4
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: LD_INT 4
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 4
33440: NEG
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: LD_INT 4
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 5
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: LD_INT 4
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 3
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 4
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: LD_INT 5
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 2
33542: NEG
33543: PUSH
33544: LD_INT 5
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33599: LD_ADDR_VAR 0 31
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 4
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 4
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 5
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 3
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 5
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 3
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: NEG
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: NEG
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: NEG
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 4
33755: NEG
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 4
33766: NEG
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 4
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: NEG
33802: PUSH
33803: LD_INT 4
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 4
33813: NEG
33814: PUSH
33815: LD_INT 5
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: NEG
33826: PUSH
33827: LD_INT 4
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 3
33837: NEG
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 4
33849: NEG
33850: PUSH
33851: LD_INT 3
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 5
33861: NEG
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 5
33873: NEG
33874: PUSH
33875: LD_INT 5
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 3
33885: NEG
33886: PUSH
33887: LD_INT 5
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 5
33897: NEG
33898: PUSH
33899: LD_INT 3
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 3
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 4
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 3
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 4
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: LD_INT 4
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 4
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 5
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 5
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 5
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34149: LD_ADDR_VAR 0 32
34153: PUSH
34154: LD_INT 4
34156: NEG
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 4
34167: NEG
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 3
34179: NEG
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 4
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 5
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 5
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 5
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 3
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: NEG
34259: PUSH
34260: LD_INT 3
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: LD_INT 4
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 2
34282: NEG
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: LD_INT 2
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: LD_INT 2
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 4
34318: NEG
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 4
34330: NEG
34331: PUSH
34332: LD_INT 4
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: LD_INT 4
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 4
34354: NEG
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 4
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 5
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: LD_INT 4
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 3
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 3
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 4
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 5
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: LD_INT 5
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 4
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 4
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 4
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 4
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 5
34581: PUSH
34582: LD_INT 4
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 5
34591: PUSH
34592: LD_INT 5
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: LD_INT 5
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 5
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 5
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34696: LD_ADDR_VAR 0 33
34700: PUSH
34701: LD_INT 4
34703: NEG
34704: PUSH
34705: LD_INT 4
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 4
34715: NEG
34716: PUSH
34717: LD_INT 5
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 3
34727: NEG
34728: PUSH
34729: LD_INT 4
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 3
34739: NEG
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 4
34751: NEG
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 5
34763: NEG
34764: PUSH
34765: LD_INT 4
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 5
34775: NEG
34776: PUSH
34777: LD_INT 5
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 3
34787: NEG
34788: PUSH
34789: LD_INT 5
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 5
34799: NEG
34800: PUSH
34801: LD_INT 3
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 3
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 4
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 3
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 4
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: LD_INT 4
34905: NEG
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 5
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 5
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 4
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: LD_INT 3
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 4
35026: PUSH
35027: LD_INT 3
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: LD_INT 4
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: LD_INT 4
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 4
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 4
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 4
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 5
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 4
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: LD_INT 3
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 5
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35234: LD_ADDR_VAR 0 34
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 4
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 5
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 4
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: LD_INT 3
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 3
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: LD_INT 4
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 5
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 3
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 5
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 4
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 4
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 4
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 4
35436: PUSH
35437: LD_INT 4
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 4
35446: PUSH
35447: LD_INT 3
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 5
35456: PUSH
35457: LD_INT 4
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 5
35466: PUSH
35467: LD_INT 5
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 4
35476: PUSH
35477: LD_INT 5
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 3
35486: PUSH
35487: LD_INT 4
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: LD_INT 3
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 5
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: LD_INT 5
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: LD_INT 4
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 4
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 4
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 4
35619: NEG
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 4
35630: NEG
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 3
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 4
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 5
35675: NEG
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 5
35686: NEG
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 5
35698: NEG
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 3
35710: NEG
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: ST_TO_ADDR
// end ; end ;
35766: GO 35769
35768: POP
// case btype of b_depot , b_warehouse :
35769: LD_VAR 0 1
35773: PUSH
35774: LD_INT 0
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35788
35780: LD_INT 1
35782: DOUBLE
35783: EQUAL
35784: IFTRUE 35788
35786: GO 35989
35788: POP
// case nation of nation_american :
35789: LD_VAR 0 5
35793: PUSH
35794: LD_INT 1
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35858
35802: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35803: LD_ADDR_VAR 0 9
35807: PUSH
35808: LD_VAR 0 11
35812: PUSH
35813: LD_VAR 0 12
35817: PUSH
35818: LD_VAR 0 13
35822: PUSH
35823: LD_VAR 0 14
35827: PUSH
35828: LD_VAR 0 15
35832: PUSH
35833: LD_VAR 0 16
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: LD_VAR 0 4
35850: PUSH
35851: LD_INT 1
35853: PLUS
35854: ARRAY
35855: ST_TO_ADDR
35856: GO 35987
35858: LD_INT 2
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35866
35864: GO 35922
35866: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35867: LD_ADDR_VAR 0 9
35871: PUSH
35872: LD_VAR 0 17
35876: PUSH
35877: LD_VAR 0 18
35881: PUSH
35882: LD_VAR 0 19
35886: PUSH
35887: LD_VAR 0 20
35891: PUSH
35892: LD_VAR 0 21
35896: PUSH
35897: LD_VAR 0 22
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: LD_VAR 0 4
35914: PUSH
35915: LD_INT 1
35917: PLUS
35918: ARRAY
35919: ST_TO_ADDR
35920: GO 35987
35922: LD_INT 3
35924: DOUBLE
35925: EQUAL
35926: IFTRUE 35930
35928: GO 35986
35930: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35931: LD_ADDR_VAR 0 9
35935: PUSH
35936: LD_VAR 0 23
35940: PUSH
35941: LD_VAR 0 24
35945: PUSH
35946: LD_VAR 0 25
35950: PUSH
35951: LD_VAR 0 26
35955: PUSH
35956: LD_VAR 0 27
35960: PUSH
35961: LD_VAR 0 28
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: PUSH
35974: LD_VAR 0 4
35978: PUSH
35979: LD_INT 1
35981: PLUS
35982: ARRAY
35983: ST_TO_ADDR
35984: GO 35987
35986: POP
35987: GO 36542
35989: LD_INT 2
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 36003
35995: LD_INT 3
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36003
36001: GO 36059
36003: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_VAR 0 29
36013: PUSH
36014: LD_VAR 0 30
36018: PUSH
36019: LD_VAR 0 31
36023: PUSH
36024: LD_VAR 0 32
36028: PUSH
36029: LD_VAR 0 33
36033: PUSH
36034: LD_VAR 0 34
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: LD_VAR 0 4
36051: PUSH
36052: LD_INT 1
36054: PLUS
36055: ARRAY
36056: ST_TO_ADDR
36057: GO 36542
36059: LD_INT 16
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36121
36065: LD_INT 17
36067: DOUBLE
36068: EQUAL
36069: IFTRUE 36121
36071: LD_INT 18
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36121
36077: LD_INT 19
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36121
36083: LD_INT 22
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36121
36089: LD_INT 20
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36121
36095: LD_INT 21
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36121
36101: LD_INT 23
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36121
36107: LD_INT 24
36109: DOUBLE
36110: EQUAL
36111: IFTRUE 36121
36113: LD_INT 25
36115: DOUBLE
36116: EQUAL
36117: IFTRUE 36121
36119: GO 36177
36121: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36122: LD_ADDR_VAR 0 9
36126: PUSH
36127: LD_VAR 0 35
36131: PUSH
36132: LD_VAR 0 36
36136: PUSH
36137: LD_VAR 0 37
36141: PUSH
36142: LD_VAR 0 38
36146: PUSH
36147: LD_VAR 0 39
36151: PUSH
36152: LD_VAR 0 40
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: LD_VAR 0 4
36169: PUSH
36170: LD_INT 1
36172: PLUS
36173: ARRAY
36174: ST_TO_ADDR
36175: GO 36542
36177: LD_INT 6
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36233
36183: LD_INT 7
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36233
36189: LD_INT 8
36191: DOUBLE
36192: EQUAL
36193: IFTRUE 36233
36195: LD_INT 13
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36233
36201: LD_INT 12
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36233
36207: LD_INT 15
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36233
36213: LD_INT 11
36215: DOUBLE
36216: EQUAL
36217: IFTRUE 36233
36219: LD_INT 14
36221: DOUBLE
36222: EQUAL
36223: IFTRUE 36233
36225: LD_INT 10
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36289
36233: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36234: LD_ADDR_VAR 0 9
36238: PUSH
36239: LD_VAR 0 41
36243: PUSH
36244: LD_VAR 0 42
36248: PUSH
36249: LD_VAR 0 43
36253: PUSH
36254: LD_VAR 0 44
36258: PUSH
36259: LD_VAR 0 45
36263: PUSH
36264: LD_VAR 0 46
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: PUSH
36277: LD_VAR 0 4
36281: PUSH
36282: LD_INT 1
36284: PLUS
36285: ARRAY
36286: ST_TO_ADDR
36287: GO 36542
36289: LD_INT 36
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36353
36297: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36298: LD_ADDR_VAR 0 9
36302: PUSH
36303: LD_VAR 0 47
36307: PUSH
36308: LD_VAR 0 48
36312: PUSH
36313: LD_VAR 0 49
36317: PUSH
36318: LD_VAR 0 50
36322: PUSH
36323: LD_VAR 0 51
36327: PUSH
36328: LD_VAR 0 52
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: PUSH
36341: LD_VAR 0 4
36345: PUSH
36346: LD_INT 1
36348: PLUS
36349: ARRAY
36350: ST_TO_ADDR
36351: GO 36542
36353: LD_INT 4
36355: DOUBLE
36356: EQUAL
36357: IFTRUE 36379
36359: LD_INT 5
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36379
36365: LD_INT 34
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36379
36371: LD_INT 37
36373: DOUBLE
36374: EQUAL
36375: IFTRUE 36379
36377: GO 36435
36379: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_VAR 0 53
36389: PUSH
36390: LD_VAR 0 54
36394: PUSH
36395: LD_VAR 0 55
36399: PUSH
36400: LD_VAR 0 56
36404: PUSH
36405: LD_VAR 0 57
36409: PUSH
36410: LD_VAR 0 58
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: PUSH
36423: LD_VAR 0 4
36427: PUSH
36428: LD_INT 1
36430: PLUS
36431: ARRAY
36432: ST_TO_ADDR
36433: GO 36542
36435: LD_INT 31
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36485
36441: LD_INT 32
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36485
36447: LD_INT 33
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36485
36453: LD_INT 27
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36485
36459: LD_INT 26
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36485
36465: LD_INT 28
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36485
36471: LD_INT 29
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36485
36477: LD_INT 30
36479: DOUBLE
36480: EQUAL
36481: IFTRUE 36485
36483: GO 36541
36485: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36486: LD_ADDR_VAR 0 9
36490: PUSH
36491: LD_VAR 0 59
36495: PUSH
36496: LD_VAR 0 60
36500: PUSH
36501: LD_VAR 0 61
36505: PUSH
36506: LD_VAR 0 62
36510: PUSH
36511: LD_VAR 0 63
36515: PUSH
36516: LD_VAR 0 64
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: PUSH
36529: LD_VAR 0 4
36533: PUSH
36534: LD_INT 1
36536: PLUS
36537: ARRAY
36538: ST_TO_ADDR
36539: GO 36542
36541: POP
// temp_list2 = [ ] ;
36542: LD_ADDR_VAR 0 10
36546: PUSH
36547: EMPTY
36548: ST_TO_ADDR
// for i in temp_list do
36549: LD_ADDR_VAR 0 8
36553: PUSH
36554: LD_VAR 0 9
36558: PUSH
36559: FOR_IN
36560: IFFALSE 36612
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36562: LD_ADDR_VAR 0 10
36566: PUSH
36567: LD_VAR 0 10
36571: PUSH
36572: LD_VAR 0 8
36576: PUSH
36577: LD_INT 1
36579: ARRAY
36580: PUSH
36581: LD_VAR 0 2
36585: PLUS
36586: PUSH
36587: LD_VAR 0 8
36591: PUSH
36592: LD_INT 2
36594: ARRAY
36595: PUSH
36596: LD_VAR 0 3
36600: PLUS
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: ADD
36609: ST_TO_ADDR
36610: GO 36559
36612: POP
36613: POP
// result = temp_list2 ;
36614: LD_ADDR_VAR 0 7
36618: PUSH
36619: LD_VAR 0 10
36623: ST_TO_ADDR
// end ;
36624: LD_VAR 0 7
36628: RET
// export function EnemyInRange ( unit , dist ) ; begin
36629: LD_INT 0
36631: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36632: LD_ADDR_VAR 0 3
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 255
36646: PPUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL_OW 250
36656: PPUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 251
36666: PPUSH
36667: LD_VAR 0 2
36671: PPUSH
36672: CALL 9886 0 4
36676: PUSH
36677: LD_INT 4
36679: ARRAY
36680: ST_TO_ADDR
// end ;
36681: LD_VAR 0 3
36685: RET
// export function PlayerSeeMe ( unit ) ; begin
36686: LD_INT 0
36688: PPUSH
// result := See ( your_side , unit ) ;
36689: LD_ADDR_VAR 0 2
36693: PUSH
36694: LD_OWVAR 2
36698: PPUSH
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL_OW 292
36708: ST_TO_ADDR
// end ;
36709: LD_VAR 0 2
36713: RET
// export function ReverseDir ( unit ) ; begin
36714: LD_INT 0
36716: PPUSH
// if not unit then
36717: LD_VAR 0 1
36721: NOT
36722: IFFALSE 36726
// exit ;
36724: GO 36749
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36726: LD_ADDR_VAR 0 2
36730: PUSH
36731: LD_VAR 0 1
36735: PPUSH
36736: CALL_OW 254
36740: PUSH
36741: LD_INT 3
36743: PLUS
36744: PUSH
36745: LD_INT 6
36747: MOD
36748: ST_TO_ADDR
// end ;
36749: LD_VAR 0 2
36753: RET
// export function ReverseArray ( array ) ; var i ; begin
36754: LD_INT 0
36756: PPUSH
36757: PPUSH
// if not array then
36758: LD_VAR 0 1
36762: NOT
36763: IFFALSE 36767
// exit ;
36765: GO 36822
// result := [ ] ;
36767: LD_ADDR_VAR 0 2
36771: PUSH
36772: EMPTY
36773: ST_TO_ADDR
// for i := array downto 1 do
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: DOUBLE
36780: LD_VAR 0 1
36784: INC
36785: ST_TO_ADDR
36786: LD_INT 1
36788: PUSH
36789: FOR_DOWNTO
36790: IFFALSE 36820
// result := Join ( result , array [ i ] ) ;
36792: LD_ADDR_VAR 0 2
36796: PUSH
36797: LD_VAR 0 2
36801: PPUSH
36802: LD_VAR 0 1
36806: PUSH
36807: LD_VAR 0 3
36811: ARRAY
36812: PPUSH
36813: CALL 41664 0 2
36817: ST_TO_ADDR
36818: GO 36789
36820: POP
36821: POP
// end ;
36822: LD_VAR 0 2
36826: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36827: LD_INT 0
36829: PPUSH
36830: PPUSH
36831: PPUSH
36832: PPUSH
36833: PPUSH
36834: PPUSH
// if not unit or not hexes then
36835: LD_VAR 0 1
36839: NOT
36840: IFTRUE 36849
36842: PUSH
36843: LD_VAR 0 2
36847: NOT
36848: OR
36849: IFFALSE 36853
// exit ;
36851: GO 36976
// dist := 9999 ;
36853: LD_ADDR_VAR 0 5
36857: PUSH
36858: LD_INT 9999
36860: ST_TO_ADDR
// for i = 1 to hexes do
36861: LD_ADDR_VAR 0 4
36865: PUSH
36866: DOUBLE
36867: LD_INT 1
36869: DEC
36870: ST_TO_ADDR
36871: LD_VAR 0 2
36875: PUSH
36876: FOR_TO
36877: IFFALSE 36964
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36879: LD_ADDR_VAR 0 6
36883: PUSH
36884: LD_VAR 0 1
36888: PPUSH
36889: LD_VAR 0 2
36893: PUSH
36894: LD_VAR 0 4
36898: ARRAY
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PPUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_VAR 0 4
36913: ARRAY
36914: PUSH
36915: LD_INT 2
36917: ARRAY
36918: PPUSH
36919: CALL_OW 297
36923: ST_TO_ADDR
// if tdist < dist then
36924: LD_VAR 0 6
36928: PUSH
36929: LD_VAR 0 5
36933: LESS
36934: IFFALSE 36962
// begin hex := hexes [ i ] ;
36936: LD_ADDR_VAR 0 8
36940: PUSH
36941: LD_VAR 0 2
36945: PUSH
36946: LD_VAR 0 4
36950: ARRAY
36951: ST_TO_ADDR
// dist := tdist ;
36952: LD_ADDR_VAR 0 5
36956: PUSH
36957: LD_VAR 0 6
36961: ST_TO_ADDR
// end ; end ;
36962: GO 36876
36964: POP
36965: POP
// result := hex ;
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: LD_VAR 0 8
36975: ST_TO_ADDR
// end ;
36976: LD_VAR 0 3
36980: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36981: LD_INT 0
36983: PPUSH
36984: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36985: LD_VAR 0 1
36989: NOT
36990: IFTRUE 37029
36992: PUSH
36993: LD_VAR 0 1
36997: PUSH
36998: LD_INT 21
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 23
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PPUSH
37022: CALL_OW 69
37026: IN
37027: NOT
37028: OR
37029: IFFALSE 37033
// exit ;
37031: GO 37080
// for i = 1 to 3 do
37033: LD_ADDR_VAR 0 3
37037: PUSH
37038: DOUBLE
37039: LD_INT 1
37041: DEC
37042: ST_TO_ADDR
37043: LD_INT 3
37045: PUSH
37046: FOR_TO
37047: IFFALSE 37078
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 250
37058: PPUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 251
37068: PPUSH
37069: LD_INT 1
37071: PPUSH
37072: CALL_OW 453
37076: GO 37046
37078: POP
37079: POP
// end ;
37080: LD_VAR 0 2
37084: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37085: LD_INT 0
37087: PPUSH
37088: PPUSH
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
// if not unit or not enemy_unit then
37093: LD_VAR 0 1
37097: NOT
37098: IFTRUE 37107
37100: PUSH
37101: LD_VAR 0 2
37105: NOT
37106: OR
37107: IFFALSE 37111
// exit ;
37109: GO 37582
// if GetLives ( i ) < 250 then
37111: LD_VAR 0 4
37115: PPUSH
37116: CALL_OW 256
37120: PUSH
37121: LD_INT 250
37123: LESS
37124: IFFALSE 37137
// begin ComAutodestruct ( i ) ;
37126: LD_VAR 0 4
37130: PPUSH
37131: CALL 36981 0 1
// exit ;
37135: GO 37582
// end ; x := GetX ( enemy_unit ) ;
37137: LD_ADDR_VAR 0 7
37141: PUSH
37142: LD_VAR 0 2
37146: PPUSH
37147: CALL_OW 250
37151: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37152: LD_ADDR_VAR 0 8
37156: PUSH
37157: LD_VAR 0 2
37161: PPUSH
37162: CALL_OW 251
37166: ST_TO_ADDR
// if not x or not y then
37167: LD_VAR 0 7
37171: NOT
37172: IFTRUE 37181
37174: PUSH
37175: LD_VAR 0 8
37179: NOT
37180: OR
37181: IFFALSE 37185
// exit ;
37183: GO 37582
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37185: LD_ADDR_VAR 0 6
37189: PUSH
37190: LD_VAR 0 7
37194: PPUSH
37195: LD_INT 0
37197: PPUSH
37198: LD_INT 4
37200: PPUSH
37201: CALL_OW 272
37205: PUSH
37206: LD_VAR 0 8
37210: PPUSH
37211: LD_INT 0
37213: PPUSH
37214: LD_INT 4
37216: PPUSH
37217: CALL_OW 273
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_VAR 0 7
37230: PPUSH
37231: LD_INT 1
37233: PPUSH
37234: LD_INT 4
37236: PPUSH
37237: CALL_OW 272
37241: PUSH
37242: LD_VAR 0 8
37246: PPUSH
37247: LD_INT 1
37249: PPUSH
37250: LD_INT 4
37252: PPUSH
37253: CALL_OW 273
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_VAR 0 7
37266: PPUSH
37267: LD_INT 2
37269: PPUSH
37270: LD_INT 4
37272: PPUSH
37273: CALL_OW 272
37277: PUSH
37278: LD_VAR 0 8
37282: PPUSH
37283: LD_INT 2
37285: PPUSH
37286: LD_INT 4
37288: PPUSH
37289: CALL_OW 273
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_VAR 0 7
37302: PPUSH
37303: LD_INT 3
37305: PPUSH
37306: LD_INT 4
37308: PPUSH
37309: CALL_OW 272
37313: PUSH
37314: LD_VAR 0 8
37318: PPUSH
37319: LD_INT 3
37321: PPUSH
37322: LD_INT 4
37324: PPUSH
37325: CALL_OW 273
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_VAR 0 7
37338: PPUSH
37339: LD_INT 4
37341: PPUSH
37342: LD_INT 4
37344: PPUSH
37345: CALL_OW 272
37349: PUSH
37350: LD_VAR 0 8
37354: PPUSH
37355: LD_INT 4
37357: PPUSH
37358: LD_INT 4
37360: PPUSH
37361: CALL_OW 273
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_VAR 0 7
37374: PPUSH
37375: LD_INT 5
37377: PPUSH
37378: LD_INT 4
37380: PPUSH
37381: CALL_OW 272
37385: PUSH
37386: LD_VAR 0 8
37390: PPUSH
37391: LD_INT 5
37393: PPUSH
37394: LD_INT 4
37396: PPUSH
37397: CALL_OW 273
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// for i = tmp downto 1 do
37414: LD_ADDR_VAR 0 4
37418: PUSH
37419: DOUBLE
37420: LD_VAR 0 6
37424: INC
37425: ST_TO_ADDR
37426: LD_INT 1
37428: PUSH
37429: FOR_DOWNTO
37430: IFFALSE 37533
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37432: LD_VAR 0 6
37436: PUSH
37437: LD_VAR 0 4
37441: ARRAY
37442: PUSH
37443: LD_INT 1
37445: ARRAY
37446: PPUSH
37447: LD_VAR 0 6
37451: PUSH
37452: LD_VAR 0 4
37456: ARRAY
37457: PUSH
37458: LD_INT 2
37460: ARRAY
37461: PPUSH
37462: CALL_OW 488
37466: NOT
37467: IFTRUE 37509
37469: PUSH
37470: LD_VAR 0 6
37474: PUSH
37475: LD_VAR 0 4
37479: ARRAY
37480: PUSH
37481: LD_INT 1
37483: ARRAY
37484: PPUSH
37485: LD_VAR 0 6
37489: PUSH
37490: LD_VAR 0 4
37494: ARRAY
37495: PUSH
37496: LD_INT 2
37498: ARRAY
37499: PPUSH
37500: CALL_OW 428
37504: PUSH
37505: LD_INT 0
37507: NONEQUAL
37508: OR
37509: IFFALSE 37531
// tmp := Delete ( tmp , i ) ;
37511: LD_ADDR_VAR 0 6
37515: PUSH
37516: LD_VAR 0 6
37520: PPUSH
37521: LD_VAR 0 4
37525: PPUSH
37526: CALL_OW 3
37530: ST_TO_ADDR
37531: GO 37429
37533: POP
37534: POP
// j := GetClosestHex ( unit , tmp ) ;
37535: LD_ADDR_VAR 0 5
37539: PUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: LD_VAR 0 6
37549: PPUSH
37550: CALL 36827 0 2
37554: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37555: LD_VAR 0 1
37559: PPUSH
37560: LD_VAR 0 5
37564: PUSH
37565: LD_INT 1
37567: ARRAY
37568: PPUSH
37569: LD_VAR 0 5
37573: PUSH
37574: LD_INT 2
37576: ARRAY
37577: PPUSH
37578: CALL_OW 111
// end ;
37582: LD_VAR 0 3
37586: RET
// export function PrepareApemanSoldier ( ) ; begin
37587: LD_INT 0
37589: PPUSH
// uc_nation := 0 ;
37590: LD_ADDR_OWVAR 21
37594: PUSH
37595: LD_INT 0
37597: ST_TO_ADDR
// hc_sex := sex_male ;
37598: LD_ADDR_OWVAR 27
37602: PUSH
37603: LD_INT 1
37605: ST_TO_ADDR
// hc_name :=  ;
37606: LD_ADDR_OWVAR 26
37610: PUSH
37611: LD_STRING 
37613: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37614: LD_ADDR_OWVAR 28
37618: PUSH
37619: LD_INT 15
37621: ST_TO_ADDR
// hc_gallery :=  ;
37622: LD_ADDR_OWVAR 33
37626: PUSH
37627: LD_STRING 
37629: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37630: LD_ADDR_OWVAR 31
37634: PUSH
37635: LD_INT 0
37637: PPUSH
37638: LD_INT 3
37640: PPUSH
37641: CALL_OW 12
37645: PUSH
37646: LD_INT 0
37648: PPUSH
37649: LD_INT 3
37651: PPUSH
37652: CALL_OW 12
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37669: LD_ADDR_OWVAR 29
37673: PUSH
37674: LD_INT 12
37676: PUSH
37677: LD_INT 12
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// end ;
37684: LD_VAR 0 1
37688: RET
// export function PrepareApemanEngineer ( ) ; begin
37689: LD_INT 0
37691: PPUSH
// uc_nation := 0 ;
37692: LD_ADDR_OWVAR 21
37696: PUSH
37697: LD_INT 0
37699: ST_TO_ADDR
// hc_sex := sex_male ;
37700: LD_ADDR_OWVAR 27
37704: PUSH
37705: LD_INT 1
37707: ST_TO_ADDR
// hc_name :=  ;
37708: LD_ADDR_OWVAR 26
37712: PUSH
37713: LD_STRING 
37715: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37716: LD_ADDR_OWVAR 28
37720: PUSH
37721: LD_INT 16
37723: ST_TO_ADDR
// hc_gallery :=  ;
37724: LD_ADDR_OWVAR 33
37728: PUSH
37729: LD_STRING 
37731: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37732: LD_ADDR_OWVAR 31
37736: PUSH
37737: LD_INT 0
37739: PPUSH
37740: LD_INT 3
37742: PPUSH
37743: CALL_OW 12
37747: PUSH
37748: LD_INT 0
37750: PPUSH
37751: LD_INT 3
37753: PPUSH
37754: CALL_OW 12
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37771: LD_ADDR_OWVAR 29
37775: PUSH
37776: LD_INT 12
37778: PUSH
37779: LD_INT 12
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// end ;
37786: LD_VAR 0 1
37790: RET
// export function PrepareApeman ( agressivity ) ; begin
37791: LD_INT 0
37793: PPUSH
// uc_side := 0 ;
37794: LD_ADDR_OWVAR 20
37798: PUSH
37799: LD_INT 0
37801: ST_TO_ADDR
// uc_nation := 0 ;
37802: LD_ADDR_OWVAR 21
37806: PUSH
37807: LD_INT 0
37809: ST_TO_ADDR
// hc_sex := sex_male ;
37810: LD_ADDR_OWVAR 27
37814: PUSH
37815: LD_INT 1
37817: ST_TO_ADDR
// hc_class := class_apeman ;
37818: LD_ADDR_OWVAR 28
37822: PUSH
37823: LD_INT 12
37825: ST_TO_ADDR
// hc_gallery :=  ;
37826: LD_ADDR_OWVAR 33
37830: PUSH
37831: LD_STRING 
37833: ST_TO_ADDR
// hc_name :=  ;
37834: LD_ADDR_OWVAR 26
37838: PUSH
37839: LD_STRING 
37841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37842: LD_ADDR_OWVAR 29
37846: PUSH
37847: LD_INT 12
37849: PUSH
37850: LD_INT 12
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// if agressivity = 0 then
37857: LD_VAR 0 1
37861: PUSH
37862: LD_INT 0
37864: EQUAL
37865: IFFALSE 37877
// hc_agressivity := 0 else
37867: LD_ADDR_OWVAR 35
37871: PUSH
37872: LD_INT 0
37874: ST_TO_ADDR
37875: GO 37898
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37877: LD_ADDR_OWVAR 35
37881: PUSH
37882: LD_VAR 0 1
37886: NEG
37887: PPUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 12
37897: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37898: LD_ADDR_OWVAR 31
37902: PUSH
37903: LD_INT 0
37905: PPUSH
37906: LD_INT 3
37908: PPUSH
37909: CALL_OW 12
37913: PUSH
37914: LD_INT 0
37916: PPUSH
37917: LD_INT 3
37919: PPUSH
37920: CALL_OW 12
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// end ;
37937: LD_VAR 0 2
37941: RET
// export function PrepareTiger ( agressivity ) ; begin
37942: LD_INT 0
37944: PPUSH
// uc_side := 0 ;
37945: LD_ADDR_OWVAR 20
37949: PUSH
37950: LD_INT 0
37952: ST_TO_ADDR
// uc_nation := 0 ;
37953: LD_ADDR_OWVAR 21
37957: PUSH
37958: LD_INT 0
37960: ST_TO_ADDR
// InitHc ;
37961: CALL_OW 19
// hc_class := class_tiger ;
37965: LD_ADDR_OWVAR 28
37969: PUSH
37970: LD_INT 14
37972: ST_TO_ADDR
// hc_gallery :=  ;
37973: LD_ADDR_OWVAR 33
37977: PUSH
37978: LD_STRING 
37980: ST_TO_ADDR
// hc_name :=  ;
37981: LD_ADDR_OWVAR 26
37985: PUSH
37986: LD_STRING 
37988: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37989: LD_ADDR_OWVAR 35
37993: PUSH
37994: LD_VAR 0 1
37998: NEG
37999: PPUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 12
38009: ST_TO_ADDR
// end ;
38010: LD_VAR 0 2
38014: RET
// export function PrepareEnchidna ( ) ; begin
38015: LD_INT 0
38017: PPUSH
// uc_side := 0 ;
38018: LD_ADDR_OWVAR 20
38022: PUSH
38023: LD_INT 0
38025: ST_TO_ADDR
// uc_nation := 0 ;
38026: LD_ADDR_OWVAR 21
38030: PUSH
38031: LD_INT 0
38033: ST_TO_ADDR
// InitHc ;
38034: CALL_OW 19
// hc_class := class_baggie ;
38038: LD_ADDR_OWVAR 28
38042: PUSH
38043: LD_INT 13
38045: ST_TO_ADDR
// hc_gallery :=  ;
38046: LD_ADDR_OWVAR 33
38050: PUSH
38051: LD_STRING 
38053: ST_TO_ADDR
// hc_name :=  ;
38054: LD_ADDR_OWVAR 26
38058: PUSH
38059: LD_STRING 
38061: ST_TO_ADDR
// end ;
38062: LD_VAR 0 1
38066: RET
// export function PrepareFrog ( ) ; begin
38067: LD_INT 0
38069: PPUSH
// uc_side := 0 ;
38070: LD_ADDR_OWVAR 20
38074: PUSH
38075: LD_INT 0
38077: ST_TO_ADDR
// uc_nation := 0 ;
38078: LD_ADDR_OWVAR 21
38082: PUSH
38083: LD_INT 0
38085: ST_TO_ADDR
// InitHc ;
38086: CALL_OW 19
// hc_class := class_frog ;
38090: LD_ADDR_OWVAR 28
38094: PUSH
38095: LD_INT 19
38097: ST_TO_ADDR
// hc_gallery :=  ;
38098: LD_ADDR_OWVAR 33
38102: PUSH
38103: LD_STRING 
38105: ST_TO_ADDR
// hc_name :=  ;
38106: LD_ADDR_OWVAR 26
38110: PUSH
38111: LD_STRING 
38113: ST_TO_ADDR
// end ;
38114: LD_VAR 0 1
38118: RET
// export function PrepareFish ( ) ; begin
38119: LD_INT 0
38121: PPUSH
// uc_side := 0 ;
38122: LD_ADDR_OWVAR 20
38126: PUSH
38127: LD_INT 0
38129: ST_TO_ADDR
// uc_nation := 0 ;
38130: LD_ADDR_OWVAR 21
38134: PUSH
38135: LD_INT 0
38137: ST_TO_ADDR
// InitHc ;
38138: CALL_OW 19
// hc_class := class_fish ;
38142: LD_ADDR_OWVAR 28
38146: PUSH
38147: LD_INT 20
38149: ST_TO_ADDR
// hc_gallery :=  ;
38150: LD_ADDR_OWVAR 33
38154: PUSH
38155: LD_STRING 
38157: ST_TO_ADDR
// hc_name :=  ;
38158: LD_ADDR_OWVAR 26
38162: PUSH
38163: LD_STRING 
38165: ST_TO_ADDR
// end ;
38166: LD_VAR 0 1
38170: RET
// export function PrepareBird ( ) ; begin
38171: LD_INT 0
38173: PPUSH
// uc_side := 0 ;
38174: LD_ADDR_OWVAR 20
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// uc_nation := 0 ;
38182: LD_ADDR_OWVAR 21
38186: PUSH
38187: LD_INT 0
38189: ST_TO_ADDR
// InitHc ;
38190: CALL_OW 19
// hc_class := class_phororhacos ;
38194: LD_ADDR_OWVAR 28
38198: PUSH
38199: LD_INT 18
38201: ST_TO_ADDR
// hc_gallery :=  ;
38202: LD_ADDR_OWVAR 33
38206: PUSH
38207: LD_STRING 
38209: ST_TO_ADDR
// hc_name :=  ;
38210: LD_ADDR_OWVAR 26
38214: PUSH
38215: LD_STRING 
38217: ST_TO_ADDR
// end ;
38218: LD_VAR 0 1
38222: RET
// export function PrepareHorse ( ) ; begin
38223: LD_INT 0
38225: PPUSH
// uc_side := 0 ;
38226: LD_ADDR_OWVAR 20
38230: PUSH
38231: LD_INT 0
38233: ST_TO_ADDR
// uc_nation := 0 ;
38234: LD_ADDR_OWVAR 21
38238: PUSH
38239: LD_INT 0
38241: ST_TO_ADDR
// InitHc ;
38242: CALL_OW 19
// hc_class := class_horse ;
38246: LD_ADDR_OWVAR 28
38250: PUSH
38251: LD_INT 21
38253: ST_TO_ADDR
// hc_gallery :=  ;
38254: LD_ADDR_OWVAR 33
38258: PUSH
38259: LD_STRING 
38261: ST_TO_ADDR
// hc_name :=  ;
38262: LD_ADDR_OWVAR 26
38266: PUSH
38267: LD_STRING 
38269: ST_TO_ADDR
// end ;
38270: LD_VAR 0 1
38274: RET
// export function PrepareMastodont ( ) ; begin
38275: LD_INT 0
38277: PPUSH
// uc_side := 0 ;
38278: LD_ADDR_OWVAR 20
38282: PUSH
38283: LD_INT 0
38285: ST_TO_ADDR
// uc_nation := 0 ;
38286: LD_ADDR_OWVAR 21
38290: PUSH
38291: LD_INT 0
38293: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38294: LD_ADDR_OWVAR 37
38298: PUSH
38299: LD_INT 31
38301: ST_TO_ADDR
// vc_control := control_rider ;
38302: LD_ADDR_OWVAR 38
38306: PUSH
38307: LD_INT 4
38309: ST_TO_ADDR
// end ;
38310: LD_VAR 0 1
38314: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38315: LD_INT 0
38317: PPUSH
38318: PPUSH
38319: PPUSH
// uc_side = 0 ;
38320: LD_ADDR_OWVAR 20
38324: PUSH
38325: LD_INT 0
38327: ST_TO_ADDR
// uc_nation = 0 ;
38328: LD_ADDR_OWVAR 21
38332: PUSH
38333: LD_INT 0
38335: ST_TO_ADDR
// InitHc_All ( ) ;
38336: CALL_OW 584
// InitVc ;
38340: CALL_OW 20
// if mastodonts then
38344: LD_VAR 0 6
38348: IFFALSE 38415
// for i = 1 to mastodonts do
38350: LD_ADDR_VAR 0 11
38354: PUSH
38355: DOUBLE
38356: LD_INT 1
38358: DEC
38359: ST_TO_ADDR
38360: LD_VAR 0 6
38364: PUSH
38365: FOR_TO
38366: IFFALSE 38413
// begin vc_chassis := 31 ;
38368: LD_ADDR_OWVAR 37
38372: PUSH
38373: LD_INT 31
38375: ST_TO_ADDR
// vc_control := control_rider ;
38376: LD_ADDR_OWVAR 38
38380: PUSH
38381: LD_INT 4
38383: ST_TO_ADDR
// animal := CreateVehicle ;
38384: LD_ADDR_VAR 0 12
38388: PUSH
38389: CALL_OW 45
38393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38394: LD_VAR 0 12
38398: PPUSH
38399: LD_VAR 0 8
38403: PPUSH
38404: LD_INT 0
38406: PPUSH
38407: CALL 40557 0 3
// end ;
38411: GO 38365
38413: POP
38414: POP
// if horses then
38415: LD_VAR 0 5
38419: IFFALSE 38486
// for i = 1 to horses do
38421: LD_ADDR_VAR 0 11
38425: PUSH
38426: DOUBLE
38427: LD_INT 1
38429: DEC
38430: ST_TO_ADDR
38431: LD_VAR 0 5
38435: PUSH
38436: FOR_TO
38437: IFFALSE 38484
// begin hc_class := 21 ;
38439: LD_ADDR_OWVAR 28
38443: PUSH
38444: LD_INT 21
38446: ST_TO_ADDR
// hc_gallery :=  ;
38447: LD_ADDR_OWVAR 33
38451: PUSH
38452: LD_STRING 
38454: ST_TO_ADDR
// animal := CreateHuman ;
38455: LD_ADDR_VAR 0 12
38459: PUSH
38460: CALL_OW 44
38464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38465: LD_VAR 0 12
38469: PPUSH
38470: LD_VAR 0 8
38474: PPUSH
38475: LD_INT 0
38477: PPUSH
38478: CALL 40557 0 3
// end ;
38482: GO 38436
38484: POP
38485: POP
// if birds then
38486: LD_VAR 0 1
38490: IFFALSE 38557
// for i = 1 to birds do
38492: LD_ADDR_VAR 0 11
38496: PUSH
38497: DOUBLE
38498: LD_INT 1
38500: DEC
38501: ST_TO_ADDR
38502: LD_VAR 0 1
38506: PUSH
38507: FOR_TO
38508: IFFALSE 38555
// begin hc_class := 18 ;
38510: LD_ADDR_OWVAR 28
38514: PUSH
38515: LD_INT 18
38517: ST_TO_ADDR
// hc_gallery =  ;
38518: LD_ADDR_OWVAR 33
38522: PUSH
38523: LD_STRING 
38525: ST_TO_ADDR
// animal := CreateHuman ;
38526: LD_ADDR_VAR 0 12
38530: PUSH
38531: CALL_OW 44
38535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38536: LD_VAR 0 12
38540: PPUSH
38541: LD_VAR 0 8
38545: PPUSH
38546: LD_INT 0
38548: PPUSH
38549: CALL 40557 0 3
// end ;
38553: GO 38507
38555: POP
38556: POP
// if tigers then
38557: LD_VAR 0 2
38561: IFFALSE 38645
// for i = 1 to tigers do
38563: LD_ADDR_VAR 0 11
38567: PUSH
38568: DOUBLE
38569: LD_INT 1
38571: DEC
38572: ST_TO_ADDR
38573: LD_VAR 0 2
38577: PUSH
38578: FOR_TO
38579: IFFALSE 38643
// begin hc_class = class_tiger ;
38581: LD_ADDR_OWVAR 28
38585: PUSH
38586: LD_INT 14
38588: ST_TO_ADDR
// hc_gallery =  ;
38589: LD_ADDR_OWVAR 33
38593: PUSH
38594: LD_STRING 
38596: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38597: LD_ADDR_OWVAR 35
38601: PUSH
38602: LD_INT 7
38604: NEG
38605: PPUSH
38606: LD_INT 7
38608: PPUSH
38609: CALL_OW 12
38613: ST_TO_ADDR
// animal := CreateHuman ;
38614: LD_ADDR_VAR 0 12
38618: PUSH
38619: CALL_OW 44
38623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38624: LD_VAR 0 12
38628: PPUSH
38629: LD_VAR 0 8
38633: PPUSH
38634: LD_INT 0
38636: PPUSH
38637: CALL 40557 0 3
// end ;
38641: GO 38578
38643: POP
38644: POP
// if apemans then
38645: LD_VAR 0 3
38649: IFFALSE 38772
// for i = 1 to apemans do
38651: LD_ADDR_VAR 0 11
38655: PUSH
38656: DOUBLE
38657: LD_INT 1
38659: DEC
38660: ST_TO_ADDR
38661: LD_VAR 0 3
38665: PUSH
38666: FOR_TO
38667: IFFALSE 38770
// begin hc_class = class_apeman ;
38669: LD_ADDR_OWVAR 28
38673: PUSH
38674: LD_INT 12
38676: ST_TO_ADDR
// hc_gallery =  ;
38677: LD_ADDR_OWVAR 33
38681: PUSH
38682: LD_STRING 
38684: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38685: LD_ADDR_OWVAR 35
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PPUSH
38694: LD_INT 2
38696: PPUSH
38697: CALL_OW 12
38701: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38702: LD_ADDR_OWVAR 31
38706: PUSH
38707: LD_INT 1
38709: PPUSH
38710: LD_INT 3
38712: PPUSH
38713: CALL_OW 12
38717: PUSH
38718: LD_INT 1
38720: PPUSH
38721: LD_INT 3
38723: PPUSH
38724: CALL_OW 12
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: ST_TO_ADDR
// animal := CreateHuman ;
38741: LD_ADDR_VAR 0 12
38745: PUSH
38746: CALL_OW 44
38750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38751: LD_VAR 0 12
38755: PPUSH
38756: LD_VAR 0 8
38760: PPUSH
38761: LD_INT 0
38763: PPUSH
38764: CALL 40557 0 3
// end ;
38768: GO 38666
38770: POP
38771: POP
// if enchidnas then
38772: LD_VAR 0 4
38776: IFFALSE 38843
// for i = 1 to enchidnas do
38778: LD_ADDR_VAR 0 11
38782: PUSH
38783: DOUBLE
38784: LD_INT 1
38786: DEC
38787: ST_TO_ADDR
38788: LD_VAR 0 4
38792: PUSH
38793: FOR_TO
38794: IFFALSE 38841
// begin hc_class = 13 ;
38796: LD_ADDR_OWVAR 28
38800: PUSH
38801: LD_INT 13
38803: ST_TO_ADDR
// hc_gallery =  ;
38804: LD_ADDR_OWVAR 33
38808: PUSH
38809: LD_STRING 
38811: ST_TO_ADDR
// animal := CreateHuman ;
38812: LD_ADDR_VAR 0 12
38816: PUSH
38817: CALL_OW 44
38821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38822: LD_VAR 0 12
38826: PPUSH
38827: LD_VAR 0 8
38831: PPUSH
38832: LD_INT 0
38834: PPUSH
38835: CALL 40557 0 3
// end ;
38839: GO 38793
38841: POP
38842: POP
// if fishes then
38843: LD_VAR 0 7
38847: IFFALSE 38914
// for i = 1 to fishes do
38849: LD_ADDR_VAR 0 11
38853: PUSH
38854: DOUBLE
38855: LD_INT 1
38857: DEC
38858: ST_TO_ADDR
38859: LD_VAR 0 7
38863: PUSH
38864: FOR_TO
38865: IFFALSE 38912
// begin hc_class = 20 ;
38867: LD_ADDR_OWVAR 28
38871: PUSH
38872: LD_INT 20
38874: ST_TO_ADDR
// hc_gallery =  ;
38875: LD_ADDR_OWVAR 33
38879: PUSH
38880: LD_STRING 
38882: ST_TO_ADDR
// animal := CreateHuman ;
38883: LD_ADDR_VAR 0 12
38887: PUSH
38888: CALL_OW 44
38892: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38893: LD_VAR 0 12
38897: PPUSH
38898: LD_VAR 0 9
38902: PPUSH
38903: LD_INT 0
38905: PPUSH
38906: CALL 40557 0 3
// end ;
38910: GO 38864
38912: POP
38913: POP
// end ;
38914: LD_VAR 0 10
38918: RET
// export function WantHeal ( sci , unit ) ; begin
38919: LD_INT 0
38921: PPUSH
// if GetTaskList ( sci ) > 0 then
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 437
38931: PUSH
38932: LD_INT 0
38934: GREATER
38935: IFFALSE 39007
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 437
38946: PUSH
38947: LD_INT 1
38949: ARRAY
38950: PUSH
38951: LD_INT 1
38953: ARRAY
38954: PUSH
38955: LD_STRING l
38957: EQUAL
38958: IFFALSE 38985
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 437
38970: PUSH
38971: LD_INT 1
38973: ARRAY
38974: PUSH
38975: LD_INT 4
38977: ARRAY
38978: PUSH
38979: LD_VAR 0 2
38983: EQUAL
38984: AND
38985: IFFALSE 38997
// result := true else
38987: LD_ADDR_VAR 0 3
38991: PUSH
38992: LD_INT 1
38994: ST_TO_ADDR
38995: GO 39005
// result := false ;
38997: LD_ADDR_VAR 0 3
39001: PUSH
39002: LD_INT 0
39004: ST_TO_ADDR
// end else
39005: GO 39015
// result := false ;
39007: LD_ADDR_VAR 0 3
39011: PUSH
39012: LD_INT 0
39014: ST_TO_ADDR
// end ;
39015: LD_VAR 0 3
39019: RET
// export function HealTarget ( sci ) ; begin
39020: LD_INT 0
39022: PPUSH
// if not sci then
39023: LD_VAR 0 1
39027: NOT
39028: IFFALSE 39032
// exit ;
39030: GO 39097
// result := 0 ;
39032: LD_ADDR_VAR 0 2
39036: PUSH
39037: LD_INT 0
39039: ST_TO_ADDR
// if GetTaskList ( sci ) then
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 437
39049: IFFALSE 39097
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 437
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: PUSH
39065: LD_INT 1
39067: ARRAY
39068: PUSH
39069: LD_STRING l
39071: EQUAL
39072: IFFALSE 39097
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39074: LD_ADDR_VAR 0 2
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 437
39088: PUSH
39089: LD_INT 1
39091: ARRAY
39092: PUSH
39093: LD_INT 4
39095: ARRAY
39096: ST_TO_ADDR
// end ;
39097: LD_VAR 0 2
39101: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39102: LD_INT 0
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
// if not base_units then
39108: LD_VAR 0 1
39112: NOT
39113: IFFALSE 39117
// exit ;
39115: GO 39204
// result := false ;
39117: LD_ADDR_VAR 0 2
39121: PUSH
39122: LD_INT 0
39124: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39125: LD_ADDR_VAR 0 5
39129: PUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: LD_INT 21
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PPUSH
39145: CALL_OW 72
39149: ST_TO_ADDR
// if not tmp then
39150: LD_VAR 0 5
39154: NOT
39155: IFFALSE 39159
// exit ;
39157: GO 39204
// for i in tmp do
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: LD_VAR 0 5
39168: PUSH
39169: FOR_IN
39170: IFFALSE 39202
// begin result := EnemyInRange ( i , 22 ) ;
39172: LD_ADDR_VAR 0 2
39176: PUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: LD_INT 22
39184: PPUSH
39185: CALL 36629 0 2
39189: ST_TO_ADDR
// if result then
39190: LD_VAR 0 2
39194: IFFALSE 39200
// exit ;
39196: POP
39197: POP
39198: GO 39204
// end ;
39200: GO 39169
39202: POP
39203: POP
// end ;
39204: LD_VAR 0 2
39208: RET
// export function FilterByTag ( units , tag ) ; begin
39209: LD_INT 0
39211: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39212: LD_ADDR_VAR 0 3
39216: PUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_INT 120
39224: PUSH
39225: LD_VAR 0 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PPUSH
39234: CALL_OW 72
39238: ST_TO_ADDR
// end ;
39239: LD_VAR 0 3
39243: RET
// export function IsDriver ( un ) ; begin
39244: LD_INT 0
39246: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39247: LD_ADDR_VAR 0 2
39251: PUSH
39252: LD_VAR 0 1
39256: PUSH
39257: LD_INT 55
39259: PUSH
39260: EMPTY
39261: LIST
39262: PPUSH
39263: CALL_OW 69
39267: IN
39268: ST_TO_ADDR
// end ;
39269: LD_VAR 0 2
39273: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39274: LD_INT 0
39276: PPUSH
39277: PPUSH
// list := [ ] ;
39278: LD_ADDR_VAR 0 5
39282: PUSH
39283: EMPTY
39284: ST_TO_ADDR
// case d of 0 :
39285: LD_VAR 0 3
39289: PUSH
39290: LD_INT 0
39292: DOUBLE
39293: EQUAL
39294: IFTRUE 39298
39296: GO 39431
39298: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39299: LD_ADDR_VAR 0 5
39303: PUSH
39304: LD_VAR 0 1
39308: PUSH
39309: LD_INT 4
39311: MINUS
39312: PUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_INT 4
39320: MINUS
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: PUSH
39330: LD_VAR 0 1
39334: PUSH
39335: LD_INT 3
39337: MINUS
39338: PUSH
39339: LD_VAR 0 2
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: PUSH
39352: LD_VAR 0 1
39356: PUSH
39357: LD_INT 4
39359: PLUS
39360: PUSH
39361: LD_VAR 0 2
39365: PUSH
39366: LD_INT 4
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: PUSH
39374: LD_VAR 0 1
39378: PUSH
39379: LD_INT 3
39381: PLUS
39382: PUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 3
39390: PLUS
39391: PUSH
39392: LD_INT 5
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: PUSH
39400: LD_VAR 0 1
39404: PUSH
39405: LD_VAR 0 2
39409: PUSH
39410: LD_INT 4
39412: PLUS
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// end ; 1 :
39429: GO 40129
39431: LD_INT 1
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39439
39437: GO 39572
39439: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39440: LD_ADDR_VAR 0 5
39444: PUSH
39445: LD_VAR 0 1
39449: PUSH
39450: LD_VAR 0 2
39454: PUSH
39455: LD_INT 4
39457: MINUS
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: PUSH
39467: LD_VAR 0 1
39471: PUSH
39472: LD_INT 3
39474: MINUS
39475: PUSH
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 3
39483: MINUS
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: PUSH
39493: LD_VAR 0 1
39497: PUSH
39498: LD_INT 4
39500: MINUS
39501: PUSH
39502: LD_VAR 0 2
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: PUSH
39515: LD_VAR 0 1
39519: PUSH
39520: LD_VAR 0 2
39524: PUSH
39525: LD_INT 3
39527: PLUS
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: LIST
39536: PUSH
39537: LD_VAR 0 1
39541: PUSH
39542: LD_INT 4
39544: PLUS
39545: PUSH
39546: LD_VAR 0 2
39550: PUSH
39551: LD_INT 4
39553: PLUS
39554: PUSH
39555: LD_INT 5
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
// end ; 2 :
39570: GO 40129
39572: LD_INT 2
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39709
39580: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39581: LD_ADDR_VAR 0 5
39585: PUSH
39586: LD_VAR 0 1
39590: PUSH
39591: LD_VAR 0 2
39595: PUSH
39596: LD_INT 3
39598: MINUS
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PUSH
39608: LD_VAR 0 1
39612: PUSH
39613: LD_INT 4
39615: PLUS
39616: PUSH
39617: LD_VAR 0 2
39621: PUSH
39622: LD_INT 4
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: LIST
39629: PUSH
39630: LD_VAR 0 1
39634: PUSH
39635: LD_VAR 0 2
39639: PUSH
39640: LD_INT 4
39642: PLUS
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: PUSH
39652: LD_VAR 0 1
39656: PUSH
39657: LD_INT 3
39659: MINUS
39660: PUSH
39661: LD_VAR 0 2
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: LIST
39673: PUSH
39674: LD_VAR 0 1
39678: PUSH
39679: LD_INT 4
39681: MINUS
39682: PUSH
39683: LD_VAR 0 2
39687: PUSH
39688: LD_INT 4
39690: MINUS
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// end ; 3 :
39707: GO 40129
39709: LD_INT 3
39711: DOUBLE
39712: EQUAL
39713: IFTRUE 39717
39715: GO 39850
39717: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39718: LD_ADDR_VAR 0 5
39722: PUSH
39723: LD_VAR 0 1
39727: PUSH
39728: LD_INT 3
39730: PLUS
39731: PUSH
39732: LD_VAR 0 2
39736: PUSH
39737: LD_INT 4
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: PUSH
39745: LD_VAR 0 1
39749: PUSH
39750: LD_INT 4
39752: PLUS
39753: PUSH
39754: LD_VAR 0 2
39758: PUSH
39759: LD_INT 4
39761: PLUS
39762: PUSH
39763: LD_INT 5
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: PUSH
39771: LD_VAR 0 1
39775: PUSH
39776: LD_INT 4
39778: MINUS
39779: PUSH
39780: LD_VAR 0 2
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: PUSH
39793: LD_VAR 0 1
39797: PUSH
39798: LD_VAR 0 2
39802: PUSH
39803: LD_INT 4
39805: MINUS
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: PUSH
39815: LD_VAR 0 1
39819: PUSH
39820: LD_INT 3
39822: MINUS
39823: PUSH
39824: LD_VAR 0 2
39828: PUSH
39829: LD_INT 3
39831: MINUS
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// end ; 4 :
39848: GO 40129
39850: LD_INT 4
39852: DOUBLE
39853: EQUAL
39854: IFTRUE 39858
39856: GO 39991
39858: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_VAR 0 1
39868: PUSH
39869: LD_VAR 0 2
39873: PUSH
39874: LD_INT 4
39876: PLUS
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: PUSH
39886: LD_VAR 0 1
39890: PUSH
39891: LD_INT 3
39893: PLUS
39894: PUSH
39895: LD_VAR 0 2
39899: PUSH
39900: LD_INT 3
39902: PLUS
39903: PUSH
39904: LD_INT 5
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: PUSH
39912: LD_VAR 0 1
39916: PUSH
39917: LD_INT 4
39919: PLUS
39920: PUSH
39921: LD_VAR 0 2
39925: PUSH
39926: LD_INT 4
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_VAR 0 1
39938: PUSH
39939: LD_VAR 0 2
39943: PUSH
39944: LD_INT 3
39946: MINUS
39947: PUSH
39948: LD_INT 3
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: PUSH
39956: LD_VAR 0 1
39960: PUSH
39961: LD_INT 4
39963: MINUS
39964: PUSH
39965: LD_VAR 0 2
39969: PUSH
39970: LD_INT 4
39972: MINUS
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// end ; 5 :
39989: GO 40129
39991: LD_INT 5
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40128
39999: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40000: LD_ADDR_VAR 0 5
40004: PUSH
40005: LD_VAR 0 1
40009: PUSH
40010: LD_INT 4
40012: MINUS
40013: PUSH
40014: LD_VAR 0 2
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: PUSH
40027: LD_VAR 0 1
40031: PUSH
40032: LD_VAR 0 2
40036: PUSH
40037: LD_INT 4
40039: MINUS
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: PUSH
40049: LD_VAR 0 1
40053: PUSH
40054: LD_INT 4
40056: PLUS
40057: PUSH
40058: LD_VAR 0 2
40062: PUSH
40063: LD_INT 4
40065: PLUS
40066: PUSH
40067: LD_INT 5
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: PUSH
40075: LD_VAR 0 1
40079: PUSH
40080: LD_INT 3
40082: PLUS
40083: PUSH
40084: LD_VAR 0 2
40088: PUSH
40089: LD_INT 4
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: PUSH
40097: LD_VAR 0 1
40101: PUSH
40102: LD_VAR 0 2
40106: PUSH
40107: LD_INT 3
40109: PLUS
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// end ; end ;
40126: GO 40129
40128: POP
// result := list ;
40129: LD_ADDR_VAR 0 4
40133: PUSH
40134: LD_VAR 0 5
40138: ST_TO_ADDR
// end ;
40139: LD_VAR 0 4
40143: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40144: LD_INT 0
40146: PPUSH
40147: PPUSH
40148: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40149: LD_VAR 0 1
40153: NOT
40154: IFTRUE 40182
40156: PUSH
40157: LD_VAR 0 2
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: LD_INT 4
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: IN
40180: NOT
40181: OR
40182: IFFALSE 40186
// exit ;
40184: GO 40269
// tmp := [ ] ;
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: EMPTY
40192: ST_TO_ADDR
// for i in units do
40193: LD_ADDR_VAR 0 4
40197: PUSH
40198: LD_VAR 0 1
40202: PUSH
40203: FOR_IN
40204: IFFALSE 40238
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40206: LD_ADDR_VAR 0 5
40210: PUSH
40211: LD_VAR 0 5
40215: PPUSH
40216: LD_VAR 0 4
40220: PPUSH
40221: LD_VAR 0 2
40225: PPUSH
40226: CALL_OW 259
40230: PPUSH
40231: CALL 41664 0 2
40235: ST_TO_ADDR
40236: GO 40203
40238: POP
40239: POP
// if not tmp then
40240: LD_VAR 0 5
40244: NOT
40245: IFFALSE 40249
// exit ;
40247: GO 40269
// result := SortListByListDesc ( units , tmp ) ;
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: LD_VAR 0 5
40263: PPUSH
40264: CALL_OW 77
40268: ST_TO_ADDR
// end ;
40269: LD_VAR 0 3
40273: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40274: LD_INT 0
40276: PPUSH
40277: PPUSH
40278: PPUSH
// result := false ;
40279: LD_ADDR_VAR 0 3
40283: PUSH
40284: LD_INT 0
40286: ST_TO_ADDR
// if not building then
40287: LD_VAR 0 2
40291: NOT
40292: IFFALSE 40296
// exit ;
40294: GO 40440
// x := GetX ( building ) ;
40296: LD_ADDR_VAR 0 4
40300: PUSH
40301: LD_VAR 0 2
40305: PPUSH
40306: CALL_OW 250
40310: ST_TO_ADDR
// y := GetY ( building ) ;
40311: LD_ADDR_VAR 0 5
40315: PUSH
40316: LD_VAR 0 2
40320: PPUSH
40321: CALL_OW 251
40325: ST_TO_ADDR
// if not x or not y then
40326: LD_VAR 0 4
40330: NOT
40331: IFTRUE 40340
40333: PUSH
40334: LD_VAR 0 5
40338: NOT
40339: OR
40340: IFFALSE 40344
// exit ;
40342: GO 40440
// if GetTaskList ( unit ) then
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL_OW 437
40353: IFFALSE 40440
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40355: LD_STRING e
40357: PUSH
40358: LD_VAR 0 1
40362: PPUSH
40363: CALL_OW 437
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: EQUAL
40376: IFFALSE 40403
40378: PUSH
40379: LD_VAR 0 4
40383: PUSH
40384: LD_VAR 0 1
40388: PPUSH
40389: CALL_OW 437
40393: PUSH
40394: LD_INT 1
40396: ARRAY
40397: PUSH
40398: LD_INT 2
40400: ARRAY
40401: EQUAL
40402: AND
40403: IFFALSE 40430
40405: PUSH
40406: LD_VAR 0 5
40410: PUSH
40411: LD_VAR 0 1
40415: PPUSH
40416: CALL_OW 437
40420: PUSH
40421: LD_INT 1
40423: ARRAY
40424: PUSH
40425: LD_INT 3
40427: ARRAY
40428: EQUAL
40429: AND
40430: IFFALSE 40440
// result := true end ;
40432: LD_ADDR_VAR 0 3
40436: PUSH
40437: LD_INT 1
40439: ST_TO_ADDR
// end ;
40440: LD_VAR 0 3
40444: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40445: LD_INT 0
40447: PPUSH
// result := false ;
40448: LD_ADDR_VAR 0 4
40452: PUSH
40453: LD_INT 0
40455: ST_TO_ADDR
// if GetTaskList ( unit ) then
40456: LD_VAR 0 1
40460: PPUSH
40461: CALL_OW 437
40465: IFFALSE 40552
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40467: LD_STRING M
40469: PUSH
40470: LD_VAR 0 1
40474: PPUSH
40475: CALL_OW 437
40479: PUSH
40480: LD_INT 1
40482: ARRAY
40483: PUSH
40484: LD_INT 1
40486: ARRAY
40487: EQUAL
40488: IFFALSE 40515
40490: PUSH
40491: LD_VAR 0 2
40495: PUSH
40496: LD_VAR 0 1
40500: PPUSH
40501: CALL_OW 437
40505: PUSH
40506: LD_INT 1
40508: ARRAY
40509: PUSH
40510: LD_INT 2
40512: ARRAY
40513: EQUAL
40514: AND
40515: IFFALSE 40542
40517: PUSH
40518: LD_VAR 0 3
40522: PUSH
40523: LD_VAR 0 1
40527: PPUSH
40528: CALL_OW 437
40532: PUSH
40533: LD_INT 1
40535: ARRAY
40536: PUSH
40537: LD_INT 3
40539: ARRAY
40540: EQUAL
40541: AND
40542: IFFALSE 40552
// result := true ;
40544: LD_ADDR_VAR 0 4
40548: PUSH
40549: LD_INT 1
40551: ST_TO_ADDR
// end ; end ;
40552: LD_VAR 0 4
40556: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40557: LD_INT 0
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
// if not unit or not area then
40563: LD_VAR 0 1
40567: NOT
40568: IFTRUE 40577
40570: PUSH
40571: LD_VAR 0 2
40575: NOT
40576: OR
40577: IFFALSE 40581
// exit ;
40579: GO 40757
// tmp := AreaToList ( area , i ) ;
40581: LD_ADDR_VAR 0 6
40585: PUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: LD_VAR 0 5
40595: PPUSH
40596: CALL_OW 517
40600: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40601: LD_ADDR_VAR 0 5
40605: PUSH
40606: DOUBLE
40607: LD_INT 1
40609: DEC
40610: ST_TO_ADDR
40611: LD_VAR 0 6
40615: PUSH
40616: LD_INT 1
40618: ARRAY
40619: PUSH
40620: FOR_TO
40621: IFFALSE 40755
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40623: LD_ADDR_VAR 0 7
40627: PUSH
40628: LD_VAR 0 6
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PUSH
40637: LD_VAR 0 5
40641: ARRAY
40642: PUSH
40643: LD_VAR 0 6
40647: PUSH
40648: LD_INT 2
40650: ARRAY
40651: PUSH
40652: LD_VAR 0 5
40656: ARRAY
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40662: LD_INT 92
40664: PUSH
40665: LD_VAR 0 7
40669: PUSH
40670: LD_INT 1
40672: ARRAY
40673: PUSH
40674: LD_VAR 0 7
40678: PUSH
40679: LD_INT 2
40681: ARRAY
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: PPUSH
40692: CALL_OW 69
40696: PUSH
40697: LD_INT 0
40699: EQUAL
40700: IFFALSE 40753
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40702: LD_VAR 0 1
40706: PPUSH
40707: LD_VAR 0 7
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 7
40720: PUSH
40721: LD_INT 2
40723: ARRAY
40724: PPUSH
40725: LD_VAR 0 3
40729: PPUSH
40730: CALL_OW 48
// result := IsPlaced ( unit ) ;
40734: LD_ADDR_VAR 0 4
40738: PUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 305
40748: ST_TO_ADDR
// exit ;
40749: POP
40750: POP
40751: GO 40757
// end ; end ;
40753: GO 40620
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 4
40761: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
// if not side or side > 8 then
40767: LD_VAR 0 1
40771: NOT
40772: IFTRUE 40784
40774: PUSH
40775: LD_VAR 0 1
40779: PUSH
40780: LD_INT 8
40782: GREATER
40783: OR
40784: IFFALSE 40788
// exit ;
40786: GO 40975
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40788: LD_ADDR_VAR 0 4
40792: PUSH
40793: LD_INT 22
40795: PUSH
40796: LD_VAR 0 1
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 21
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: CALL_OW 69
40823: ST_TO_ADDR
// if not tmp then
40824: LD_VAR 0 4
40828: NOT
40829: IFFALSE 40833
// exit ;
40831: GO 40975
// enable_addtolog := true ;
40833: LD_ADDR_OWVAR 81
40837: PUSH
40838: LD_INT 1
40840: ST_TO_ADDR
// AddToLog ( [ ) ;
40841: LD_STRING [
40843: PPUSH
40844: CALL_OW 561
// for i in tmp do
40848: LD_ADDR_VAR 0 3
40852: PUSH
40853: LD_VAR 0 4
40857: PUSH
40858: FOR_IN
40859: IFFALSE 40966
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40861: LD_STRING [
40863: PUSH
40864: LD_VAR 0 3
40868: PPUSH
40869: CALL_OW 266
40873: STR
40874: PUSH
40875: LD_STRING , 
40877: STR
40878: PUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: CALL_OW 250
40888: STR
40889: PUSH
40890: LD_STRING , 
40892: STR
40893: PUSH
40894: LD_VAR 0 3
40898: PPUSH
40899: CALL_OW 251
40903: STR
40904: PUSH
40905: LD_STRING , 
40907: STR
40908: PUSH
40909: LD_VAR 0 3
40913: PPUSH
40914: CALL_OW 254
40918: STR
40919: PUSH
40920: LD_STRING , 
40922: STR
40923: PUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: LD_INT 1
40931: PPUSH
40932: CALL_OW 268
40936: STR
40937: PUSH
40938: LD_STRING , 
40940: STR
40941: PUSH
40942: LD_VAR 0 3
40946: PPUSH
40947: LD_INT 2
40949: PPUSH
40950: CALL_OW 268
40954: STR
40955: PUSH
40956: LD_STRING ],
40958: STR
40959: PPUSH
40960: CALL_OW 561
// end ;
40964: GO 40858
40966: POP
40967: POP
// AddToLog ( ]; ) ;
40968: LD_STRING ];
40970: PPUSH
40971: CALL_OW 561
// end ;
40975: LD_VAR 0 2
40979: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
// if not area or not rate or not max then
40987: LD_VAR 0 1
40991: NOT
40992: IFTRUE 41001
40994: PUSH
40995: LD_VAR 0 2
40999: NOT
41000: OR
41001: IFTRUE 41010
41003: PUSH
41004: LD_VAR 0 4
41008: NOT
41009: OR
41010: IFFALSE 41014
// exit ;
41012: GO 41203
// while 1 do
41014: LD_INT 1
41016: IFFALSE 41203
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41018: LD_ADDR_VAR 0 9
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: LD_INT 1
41030: PPUSH
41031: CALL_OW 287
41035: PUSH
41036: LD_INT 10
41038: MUL
41039: ST_TO_ADDR
// r := rate / 10 ;
41040: LD_ADDR_VAR 0 7
41044: PUSH
41045: LD_VAR 0 2
41049: PUSH
41050: LD_INT 10
41052: DIVREAL
41053: ST_TO_ADDR
// time := 1 1$00 ;
41054: LD_ADDR_VAR 0 8
41058: PUSH
41059: LD_INT 2100
41061: ST_TO_ADDR
// if amount < min then
41062: LD_VAR 0 9
41066: PUSH
41067: LD_VAR 0 3
41071: LESS
41072: IFFALSE 41090
// r := r * 2 else
41074: LD_ADDR_VAR 0 7
41078: PUSH
41079: LD_VAR 0 7
41083: PUSH
41084: LD_INT 2
41086: MUL
41087: ST_TO_ADDR
41088: GO 41116
// if amount > max then
41090: LD_VAR 0 9
41094: PUSH
41095: LD_VAR 0 4
41099: GREATER
41100: IFFALSE 41116
// r := r / 2 ;
41102: LD_ADDR_VAR 0 7
41106: PUSH
41107: LD_VAR 0 7
41111: PUSH
41112: LD_INT 2
41114: DIVREAL
41115: ST_TO_ADDR
// time := time / r ;
41116: LD_ADDR_VAR 0 8
41120: PUSH
41121: LD_VAR 0 8
41125: PUSH
41126: LD_VAR 0 7
41130: DIVREAL
41131: ST_TO_ADDR
// if time < 0 then
41132: LD_VAR 0 8
41136: PUSH
41137: LD_INT 0
41139: LESS
41140: IFFALSE 41157
// time := time * - 1 ;
41142: LD_ADDR_VAR 0 8
41146: PUSH
41147: LD_VAR 0 8
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: MUL
41156: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41157: LD_VAR 0 8
41161: PUSH
41162: LD_INT 35
41164: PPUSH
41165: LD_INT 875
41167: PPUSH
41168: CALL_OW 12
41172: PLUS
41173: PPUSH
41174: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41178: LD_INT 1
41180: PPUSH
41181: LD_INT 5
41183: PPUSH
41184: CALL_OW 12
41188: PPUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: LD_INT 1
41196: PPUSH
41197: CALL_OW 55
// end ;
41201: GO 41014
// end ;
41203: LD_VAR 0 5
41207: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
// if not turrets or not factories then
41218: LD_VAR 0 1
41222: NOT
41223: IFTRUE 41232
41225: PUSH
41226: LD_VAR 0 2
41230: NOT
41231: OR
41232: IFFALSE 41236
// exit ;
41234: GO 41543
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41236: LD_ADDR_VAR 0 10
41240: PUSH
41241: LD_INT 5
41243: PUSH
41244: LD_INT 6
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: LD_INT 4
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: LD_INT 5
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 24
41278: PUSH
41279: LD_INT 25
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 23
41288: PUSH
41289: LD_INT 27
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 42
41302: PUSH
41303: LD_INT 43
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 44
41312: PUSH
41313: LD_INT 46
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 45
41322: PUSH
41323: LD_INT 47
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// result := [ ] ;
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: EMPTY
41346: ST_TO_ADDR
// for i in turrets do
41347: LD_ADDR_VAR 0 4
41351: PUSH
41352: LD_VAR 0 1
41356: PUSH
41357: FOR_IN
41358: IFFALSE 41541
// begin nat := GetNation ( i ) ;
41360: LD_ADDR_VAR 0 7
41364: PUSH
41365: LD_VAR 0 4
41369: PPUSH
41370: CALL_OW 248
41374: ST_TO_ADDR
// weapon := 0 ;
41375: LD_ADDR_VAR 0 8
41379: PUSH
41380: LD_INT 0
41382: ST_TO_ADDR
// if not nat then
41383: LD_VAR 0 7
41387: NOT
41388: IFFALSE 41392
// continue ;
41390: GO 41357
// for j in list [ nat ] do
41392: LD_ADDR_VAR 0 5
41396: PUSH
41397: LD_VAR 0 10
41401: PUSH
41402: LD_VAR 0 7
41406: ARRAY
41407: PUSH
41408: FOR_IN
41409: IFFALSE 41450
// if GetBWeapon ( i ) = j [ 1 ] then
41411: LD_VAR 0 4
41415: PPUSH
41416: CALL_OW 269
41420: PUSH
41421: LD_VAR 0 5
41425: PUSH
41426: LD_INT 1
41428: ARRAY
41429: EQUAL
41430: IFFALSE 41448
// begin weapon := j [ 2 ] ;
41432: LD_ADDR_VAR 0 8
41436: PUSH
41437: LD_VAR 0 5
41441: PUSH
41442: LD_INT 2
41444: ARRAY
41445: ST_TO_ADDR
// break ;
41446: GO 41450
// end ;
41448: GO 41408
41450: POP
41451: POP
// if not weapon then
41452: LD_VAR 0 8
41456: NOT
41457: IFFALSE 41461
// continue ;
41459: GO 41357
// for k in factories do
41461: LD_ADDR_VAR 0 6
41465: PUSH
41466: LD_VAR 0 2
41470: PUSH
41471: FOR_IN
41472: IFFALSE 41537
// begin weapons := AvailableWeaponList ( k ) ;
41474: LD_ADDR_VAR 0 9
41478: PUSH
41479: LD_VAR 0 6
41483: PPUSH
41484: CALL_OW 478
41488: ST_TO_ADDR
// if not weapons then
41489: LD_VAR 0 9
41493: NOT
41494: IFFALSE 41498
// continue ;
41496: GO 41471
// if weapon in weapons then
41498: LD_VAR 0 8
41502: PUSH
41503: LD_VAR 0 9
41507: IN
41508: IFFALSE 41535
// begin result := [ i , weapon ] ;
41510: LD_ADDR_VAR 0 3
41514: PUSH
41515: LD_VAR 0 4
41519: PUSH
41520: LD_VAR 0 8
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: ST_TO_ADDR
// exit ;
41529: POP
41530: POP
41531: POP
41532: POP
41533: GO 41543
// end ; end ;
41535: GO 41471
41537: POP
41538: POP
// end ;
41539: GO 41357
41541: POP
41542: POP
// end ;
41543: LD_VAR 0 3
41547: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41548: LD_INT 0
41550: PPUSH
// if not side or side > 8 then
41551: LD_VAR 0 3
41555: NOT
41556: IFTRUE 41568
41558: PUSH
41559: LD_VAR 0 3
41563: PUSH
41564: LD_INT 8
41566: GREATER
41567: OR
41568: IFFALSE 41572
// exit ;
41570: GO 41631
// if not range then
41572: LD_VAR 0 4
41576: NOT
41577: IFFALSE 41588
// range := - 12 ;
41579: LD_ADDR_VAR 0 4
41583: PUSH
41584: LD_INT 12
41586: NEG
41587: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41588: LD_VAR 0 1
41592: PPUSH
41593: LD_VAR 0 2
41597: PPUSH
41598: LD_VAR 0 3
41602: PPUSH
41603: LD_VAR 0 4
41607: PPUSH
41608: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41612: LD_VAR 0 1
41616: PPUSH
41617: LD_VAR 0 2
41621: PPUSH
41622: LD_VAR 0 3
41626: PPUSH
41627: CALL_OW 331
// end ;
41631: LD_VAR 0 5
41635: RET
// export function Video ( mode ) ; begin
41636: LD_INT 0
41638: PPUSH
// ingame_video = mode ;
41639: LD_ADDR_OWVAR 52
41643: PUSH
41644: LD_VAR 0 1
41648: ST_TO_ADDR
// interface_hidden = mode ;
41649: LD_ADDR_OWVAR 54
41653: PUSH
41654: LD_VAR 0 1
41658: ST_TO_ADDR
// end ;
41659: LD_VAR 0 2
41663: RET
// export function Join ( array , element ) ; begin
41664: LD_INT 0
41666: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41667: LD_ADDR_VAR 0 3
41671: PUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: LD_VAR 0 1
41681: PUSH
41682: LD_INT 1
41684: PLUS
41685: PPUSH
41686: LD_VAR 0 2
41690: PPUSH
41691: CALL_OW 1
41695: ST_TO_ADDR
// end ;
41696: LD_VAR 0 3
41700: RET
// export function JoinUnion ( array , element ) ; begin
41701: LD_INT 0
41703: PPUSH
// result := array union element ;
41704: LD_ADDR_VAR 0 3
41708: PUSH
41709: LD_VAR 0 1
41713: PUSH
41714: LD_VAR 0 2
41718: UNION
41719: ST_TO_ADDR
// end ;
41720: LD_VAR 0 3
41724: RET
// export function GetBehemoths ( side ) ; begin
41725: LD_INT 0
41727: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41728: LD_ADDR_VAR 0 2
41732: PUSH
41733: LD_INT 22
41735: PUSH
41736: LD_VAR 0 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 31
41747: PUSH
41748: LD_INT 25
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PPUSH
41759: CALL_OW 69
41763: ST_TO_ADDR
// end ;
41764: LD_VAR 0 2
41768: RET
// export function Shuffle ( array ) ; var i , index ; begin
41769: LD_INT 0
41771: PPUSH
41772: PPUSH
41773: PPUSH
// result := [ ] ;
41774: LD_ADDR_VAR 0 2
41778: PUSH
41779: EMPTY
41780: ST_TO_ADDR
// if not array then
41781: LD_VAR 0 1
41785: NOT
41786: IFFALSE 41790
// exit ;
41788: GO 41889
// Randomize ;
41790: CALL_OW 10
// for i = array downto 1 do
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: DOUBLE
41800: LD_VAR 0 1
41804: INC
41805: ST_TO_ADDR
41806: LD_INT 1
41808: PUSH
41809: FOR_DOWNTO
41810: IFFALSE 41887
// begin index := rand ( 1 , array ) ;
41812: LD_ADDR_VAR 0 4
41816: PUSH
41817: LD_INT 1
41819: PPUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: CALL_OW 12
41829: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41830: LD_ADDR_VAR 0 2
41834: PUSH
41835: LD_VAR 0 2
41839: PPUSH
41840: LD_VAR 0 2
41844: PUSH
41845: LD_INT 1
41847: PLUS
41848: PPUSH
41849: LD_VAR 0 1
41853: PUSH
41854: LD_VAR 0 4
41858: ARRAY
41859: PPUSH
41860: CALL_OW 2
41864: ST_TO_ADDR
// array := Delete ( array , index ) ;
41865: LD_ADDR_VAR 0 1
41869: PUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: LD_VAR 0 4
41879: PPUSH
41880: CALL_OW 3
41884: ST_TO_ADDR
// end ;
41885: GO 41809
41887: POP
41888: POP
// end ;
41889: LD_VAR 0 2
41893: RET
// export function GetBaseMaterials ( base ) ; begin
41894: LD_INT 0
41896: PPUSH
// result := [ 0 , 0 , 0 ] ;
41897: LD_ADDR_VAR 0 2
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// if not base then
41916: LD_VAR 0 1
41920: NOT
41921: IFFALSE 41925
// exit ;
41923: GO 41974
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41925: LD_ADDR_VAR 0 2
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: LD_INT 1
41937: PPUSH
41938: CALL_OW 275
41942: PUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: LD_INT 2
41950: PPUSH
41951: CALL_OW 275
41955: PUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_INT 3
41963: PPUSH
41964: CALL_OW 275
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: LIST
41973: ST_TO_ADDR
// end ;
41974: LD_VAR 0 2
41978: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41979: LD_INT 0
41981: PPUSH
41982: PPUSH
// result := array ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_VAR 0 1
41992: ST_TO_ADDR
// if size >= result then
41993: LD_VAR 0 2
41997: PUSH
41998: LD_VAR 0 3
42002: GREATEREQUAL
42003: IFFALSE 42007
// exit ;
42005: GO 42057
// if size then
42007: LD_VAR 0 2
42011: IFFALSE 42057
// for i := array downto size do
42013: LD_ADDR_VAR 0 4
42017: PUSH
42018: DOUBLE
42019: LD_VAR 0 1
42023: INC
42024: ST_TO_ADDR
42025: LD_VAR 0 2
42029: PUSH
42030: FOR_DOWNTO
42031: IFFALSE 42055
// result := Delete ( result , result ) ;
42033: LD_ADDR_VAR 0 3
42037: PUSH
42038: LD_VAR 0 3
42042: PPUSH
42043: LD_VAR 0 3
42047: PPUSH
42048: CALL_OW 3
42052: ST_TO_ADDR
42053: GO 42030
42055: POP
42056: POP
// end ;
42057: LD_VAR 0 3
42061: RET
// export function ComExit ( unit ) ; var tmp ; begin
42062: LD_INT 0
42064: PPUSH
42065: PPUSH
// if not IsInUnit ( unit ) then
42066: LD_VAR 0 1
42070: PPUSH
42071: CALL_OW 310
42075: NOT
42076: IFFALSE 42080
// exit ;
42078: GO 42140
// tmp := IsInUnit ( unit ) ;
42080: LD_ADDR_VAR 0 3
42084: PUSH
42085: LD_VAR 0 1
42089: PPUSH
42090: CALL_OW 310
42094: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42095: LD_VAR 0 3
42099: PPUSH
42100: CALL_OW 247
42104: PUSH
42105: LD_INT 2
42107: EQUAL
42108: IFFALSE 42121
// ComExitVehicle ( unit ) else
42110: LD_VAR 0 1
42114: PPUSH
42115: CALL_OW 121
42119: GO 42130
// ComExitBuilding ( unit ) ;
42121: LD_VAR 0 1
42125: PPUSH
42126: CALL_OW 122
// result := tmp ;
42130: LD_ADDR_VAR 0 2
42134: PUSH
42135: LD_VAR 0 3
42139: ST_TO_ADDR
// end ;
42140: LD_VAR 0 2
42144: RET
// export function ComExitAll ( units ) ; var i ; begin
42145: LD_INT 0
42147: PPUSH
42148: PPUSH
// if not units then
42149: LD_VAR 0 1
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42184
// for i in units do
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_VAR 0 1
42167: PUSH
42168: FOR_IN
42169: IFFALSE 42182
// ComExit ( i ) ;
42171: LD_VAR 0 3
42175: PPUSH
42176: CALL 42062 0 1
42180: GO 42168
42182: POP
42183: POP
// end ;
42184: LD_VAR 0 2
42188: RET
// export function ResetHc ; begin
42189: LD_INT 0
42191: PPUSH
// InitHc ;
42192: CALL_OW 19
// hc_importance := 0 ;
42196: LD_ADDR_OWVAR 32
42200: PUSH
42201: LD_INT 0
42203: ST_TO_ADDR
// end ;
42204: LD_VAR 0 1
42208: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42209: LD_INT 0
42211: PPUSH
42212: PPUSH
42213: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42214: LD_ADDR_VAR 0 6
42218: PUSH
42219: LD_VAR 0 1
42223: PUSH
42224: LD_VAR 0 3
42228: PLUS
42229: PUSH
42230: LD_INT 2
42232: DIV
42233: ST_TO_ADDR
// if _x < 0 then
42234: LD_VAR 0 6
42238: PUSH
42239: LD_INT 0
42241: LESS
42242: IFFALSE 42259
// _x := _x * - 1 ;
42244: LD_ADDR_VAR 0 6
42248: PUSH
42249: LD_VAR 0 6
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: MUL
42258: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42259: LD_ADDR_VAR 0 7
42263: PUSH
42264: LD_VAR 0 2
42268: PUSH
42269: LD_VAR 0 4
42273: PLUS
42274: PUSH
42275: LD_INT 2
42277: DIV
42278: ST_TO_ADDR
// if _y < 0 then
42279: LD_VAR 0 7
42283: PUSH
42284: LD_INT 0
42286: LESS
42287: IFFALSE 42304
// _y := _y * - 1 ;
42289: LD_ADDR_VAR 0 7
42293: PUSH
42294: LD_VAR 0 7
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: MUL
42303: ST_TO_ADDR
// result := [ _x , _y ] ;
42304: LD_ADDR_VAR 0 5
42308: PUSH
42309: LD_VAR 0 6
42313: PUSH
42314: LD_VAR 0 7
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: ST_TO_ADDR
// end ;
42323: LD_VAR 0 5
42327: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42328: LD_INT 0
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
// task := GetTaskList ( unit ) ;
42334: LD_ADDR_VAR 0 7
42338: PUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 437
42348: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42349: LD_VAR 0 7
42353: NOT
42354: IFFALSE 42373
42356: PUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_VAR 0 2
42366: PPUSH
42367: CALL_OW 308
42371: NOT
42372: AND
42373: IFFALSE 42377
// exit ;
42375: GO 42495
// if IsInArea ( unit , area ) then
42377: LD_VAR 0 1
42381: PPUSH
42382: LD_VAR 0 2
42386: PPUSH
42387: CALL_OW 308
42391: IFFALSE 42409
// begin ComMoveToArea ( unit , goAway ) ;
42393: LD_VAR 0 1
42397: PPUSH
42398: LD_VAR 0 3
42402: PPUSH
42403: CALL_OW 113
// exit ;
42407: GO 42495
// end ; if task [ 1 ] [ 1 ] <> M then
42409: LD_VAR 0 7
42413: PUSH
42414: LD_INT 1
42416: ARRAY
42417: PUSH
42418: LD_INT 1
42420: ARRAY
42421: PUSH
42422: LD_STRING M
42424: NONEQUAL
42425: IFFALSE 42429
// exit ;
42427: GO 42495
// x := task [ 1 ] [ 2 ] ;
42429: LD_ADDR_VAR 0 5
42433: PUSH
42434: LD_VAR 0 7
42438: PUSH
42439: LD_INT 1
42441: ARRAY
42442: PUSH
42443: LD_INT 2
42445: ARRAY
42446: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42447: LD_ADDR_VAR 0 6
42451: PUSH
42452: LD_VAR 0 7
42456: PUSH
42457: LD_INT 1
42459: ARRAY
42460: PUSH
42461: LD_INT 3
42463: ARRAY
42464: ST_TO_ADDR
// if InArea ( x , y , area ) then
42465: LD_VAR 0 5
42469: PPUSH
42470: LD_VAR 0 6
42474: PPUSH
42475: LD_VAR 0 2
42479: PPUSH
42480: CALL_OW 309
42484: IFFALSE 42495
// ComStop ( unit ) ;
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 141
// end ;
42495: LD_VAR 0 4
42499: RET
// export function Abs ( value ) ; begin
42500: LD_INT 0
42502: PPUSH
// result := value ;
42503: LD_ADDR_VAR 0 2
42507: PUSH
42508: LD_VAR 0 1
42512: ST_TO_ADDR
// if value < 0 then
42513: LD_VAR 0 1
42517: PUSH
42518: LD_INT 0
42520: LESS
42521: IFFALSE 42538
// result := value * - 1 ;
42523: LD_ADDR_VAR 0 2
42527: PUSH
42528: LD_VAR 0 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: MUL
42537: ST_TO_ADDR
// end ;
42538: LD_VAR 0 2
42542: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42543: LD_INT 0
42545: PPUSH
42546: PPUSH
42547: PPUSH
42548: PPUSH
42549: PPUSH
42550: PPUSH
42551: PPUSH
42552: PPUSH
// if not unit or not building then
42553: LD_VAR 0 1
42557: NOT
42558: IFTRUE 42567
42560: PUSH
42561: LD_VAR 0 2
42565: NOT
42566: OR
42567: IFFALSE 42571
// exit ;
42569: GO 42799
// x := GetX ( building ) ;
42571: LD_ADDR_VAR 0 4
42575: PUSH
42576: LD_VAR 0 2
42580: PPUSH
42581: CALL_OW 250
42585: ST_TO_ADDR
// y := GetY ( building ) ;
42586: LD_ADDR_VAR 0 6
42590: PUSH
42591: LD_VAR 0 2
42595: PPUSH
42596: CALL_OW 251
42600: ST_TO_ADDR
// d := GetDir ( building ) ;
42601: LD_ADDR_VAR 0 8
42605: PUSH
42606: LD_VAR 0 2
42610: PPUSH
42611: CALL_OW 254
42615: ST_TO_ADDR
// r := 4 ;
42616: LD_ADDR_VAR 0 9
42620: PUSH
42621: LD_INT 4
42623: ST_TO_ADDR
// for i := 1 to 5 do
42624: LD_ADDR_VAR 0 10
42628: PUSH
42629: DOUBLE
42630: LD_INT 1
42632: DEC
42633: ST_TO_ADDR
42634: LD_INT 5
42636: PUSH
42637: FOR_TO
42638: IFFALSE 42797
// begin _x := ShiftX ( x , d , r + i ) ;
42640: LD_ADDR_VAR 0 5
42644: PUSH
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_VAR 0 8
42654: PPUSH
42655: LD_VAR 0 9
42659: PUSH
42660: LD_VAR 0 10
42664: PLUS
42665: PPUSH
42666: CALL_OW 272
42670: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42671: LD_ADDR_VAR 0 7
42675: PUSH
42676: LD_VAR 0 6
42680: PPUSH
42681: LD_VAR 0 8
42685: PPUSH
42686: LD_VAR 0 9
42690: PUSH
42691: LD_VAR 0 10
42695: PLUS
42696: PPUSH
42697: CALL_OW 273
42701: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42702: LD_VAR 0 5
42706: PPUSH
42707: LD_VAR 0 7
42711: PPUSH
42712: CALL_OW 488
42716: IFFALSE 42751
42718: PUSH
42719: LD_VAR 0 5
42723: PPUSH
42724: LD_VAR 0 7
42728: PPUSH
42729: CALL_OW 428
42733: PPUSH
42734: CALL_OW 247
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: IN
42749: NOT
42750: AND
42751: IFFALSE 42795
// begin ComMoveXY ( unit , _x , _y ) ;
42753: LD_VAR 0 1
42757: PPUSH
42758: LD_VAR 0 5
42762: PPUSH
42763: LD_VAR 0 7
42767: PPUSH
42768: CALL_OW 111
// result := [ _x , _y ] ;
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_VAR 0 5
42781: PUSH
42782: LD_VAR 0 7
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: ST_TO_ADDR
// exit ;
42791: POP
42792: POP
42793: GO 42799
// end ; end ;
42795: GO 42637
42797: POP
42798: POP
// end ;
42799: LD_VAR 0 3
42803: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42804: LD_INT 0
42806: PPUSH
42807: PPUSH
42808: PPUSH
// result := 0 ;
42809: LD_ADDR_VAR 0 3
42813: PUSH
42814: LD_INT 0
42816: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42817: LD_VAR 0 1
42821: PUSH
42822: LD_INT 0
42824: LESS
42825: IFTRUE 42837
42827: PUSH
42828: LD_VAR 0 1
42832: PUSH
42833: LD_INT 8
42835: GREATER
42836: OR
42837: IFTRUE 42849
42839: PUSH
42840: LD_VAR 0 2
42844: PUSH
42845: LD_INT 0
42847: LESS
42848: OR
42849: IFTRUE 42861
42851: PUSH
42852: LD_VAR 0 2
42856: PUSH
42857: LD_INT 8
42859: GREATER
42860: OR
42861: IFFALSE 42865
// exit ;
42863: GO 42940
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42865: LD_ADDR_VAR 0 4
42869: PUSH
42870: LD_INT 22
42872: PUSH
42873: LD_VAR 0 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PPUSH
42882: CALL_OW 69
42886: PUSH
42887: FOR_IN
42888: IFFALSE 42938
// begin un := UnitShoot ( i ) ;
42890: LD_ADDR_VAR 0 5
42894: PUSH
42895: LD_VAR 0 4
42899: PPUSH
42900: CALL_OW 504
42904: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42905: LD_VAR 0 5
42909: PPUSH
42910: CALL_OW 255
42914: PUSH
42915: LD_VAR 0 1
42919: EQUAL
42920: IFFALSE 42936
// begin result := un ;
42922: LD_ADDR_VAR 0 3
42926: PUSH
42927: LD_VAR 0 5
42931: ST_TO_ADDR
// exit ;
42932: POP
42933: POP
42934: GO 42940
// end ; end ;
42936: GO 42887
42938: POP
42939: POP
// end ;
42940: LD_VAR 0 3
42944: RET
// export function GetCargoBay ( units ) ; begin
42945: LD_INT 0
42947: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42948: LD_ADDR_VAR 0 2
42952: PUSH
42953: LD_VAR 0 1
42957: PPUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 34
42963: PUSH
42964: LD_INT 12
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 34
42973: PUSH
42974: LD_INT 51
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 34
42983: PUSH
42984: LD_INT 32
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 34
42993: PUSH
42994: LD_INT 89
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: PPUSH
43008: CALL_OW 72
43012: ST_TO_ADDR
// end ;
43013: LD_VAR 0 2
43017: RET
// export function Negate ( value ) ; begin
43018: LD_INT 0
43020: PPUSH
// result := not value ;
43021: LD_ADDR_VAR 0 2
43025: PUSH
43026: LD_VAR 0 1
43030: NOT
43031: ST_TO_ADDR
// end ;
43032: LD_VAR 0 2
43036: RET
// export function Inc ( value ) ; begin
43037: LD_INT 0
43039: PPUSH
// result := value + 1 ;
43040: LD_ADDR_VAR 0 2
43044: PUSH
43045: LD_VAR 0 1
43049: PUSH
43050: LD_INT 1
43052: PLUS
43053: ST_TO_ADDR
// end ;
43054: LD_VAR 0 2
43058: RET
// export function Dec ( value ) ; begin
43059: LD_INT 0
43061: PPUSH
// result := value - 1 ;
43062: LD_ADDR_VAR 0 2
43066: PUSH
43067: LD_VAR 0 1
43071: PUSH
43072: LD_INT 1
43074: MINUS
43075: ST_TO_ADDR
// end ;
43076: LD_VAR 0 2
43080: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43081: LD_INT 0
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43091: LD_VAR 0 1
43095: PPUSH
43096: LD_VAR 0 2
43100: PPUSH
43101: CALL_OW 488
43105: NOT
43106: IFTRUE 43125
43108: PUSH
43109: LD_VAR 0 3
43113: PPUSH
43114: LD_VAR 0 4
43118: PPUSH
43119: CALL_OW 488
43123: NOT
43124: OR
43125: IFFALSE 43138
// begin result := - 1 ;
43127: LD_ADDR_VAR 0 5
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: ST_TO_ADDR
// exit ;
43136: GO 43373
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43138: LD_ADDR_VAR 0 12
43142: PUSH
43143: LD_VAR 0 1
43147: PPUSH
43148: LD_VAR 0 2
43152: PPUSH
43153: LD_VAR 0 3
43157: PPUSH
43158: LD_VAR 0 4
43162: PPUSH
43163: CALL 42209 0 4
43167: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43168: LD_ADDR_VAR 0 11
43172: PUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: LD_VAR 0 2
43182: PPUSH
43183: LD_VAR 0 12
43187: PUSH
43188: LD_INT 1
43190: ARRAY
43191: PPUSH
43192: LD_VAR 0 12
43196: PUSH
43197: LD_INT 2
43199: ARRAY
43200: PPUSH
43201: CALL_OW 298
43205: ST_TO_ADDR
// distance := 9999 ;
43206: LD_ADDR_VAR 0 10
43210: PUSH
43211: LD_INT 9999
43213: ST_TO_ADDR
// for i := 0 to 5 do
43214: LD_ADDR_VAR 0 6
43218: PUSH
43219: DOUBLE
43220: LD_INT 0
43222: DEC
43223: ST_TO_ADDR
43224: LD_INT 5
43226: PUSH
43227: FOR_TO
43228: IFFALSE 43371
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43230: LD_ADDR_VAR 0 7
43234: PUSH
43235: LD_VAR 0 1
43239: PPUSH
43240: LD_VAR 0 6
43244: PPUSH
43245: LD_VAR 0 11
43249: PPUSH
43250: CALL_OW 272
43254: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43255: LD_ADDR_VAR 0 8
43259: PUSH
43260: LD_VAR 0 2
43264: PPUSH
43265: LD_VAR 0 6
43269: PPUSH
43270: LD_VAR 0 11
43274: PPUSH
43275: CALL_OW 273
43279: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43280: LD_VAR 0 7
43284: PPUSH
43285: LD_VAR 0 8
43289: PPUSH
43290: CALL_OW 488
43294: NOT
43295: IFFALSE 43299
// continue ;
43297: GO 43227
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43299: LD_ADDR_VAR 0 9
43303: PUSH
43304: LD_VAR 0 12
43308: PUSH
43309: LD_INT 1
43311: ARRAY
43312: PPUSH
43313: LD_VAR 0 12
43317: PUSH
43318: LD_INT 2
43320: ARRAY
43321: PPUSH
43322: LD_VAR 0 7
43326: PPUSH
43327: LD_VAR 0 8
43331: PPUSH
43332: CALL_OW 298
43336: ST_TO_ADDR
// if tmp < distance then
43337: LD_VAR 0 9
43341: PUSH
43342: LD_VAR 0 10
43346: LESS
43347: IFFALSE 43369
// begin result := i ;
43349: LD_ADDR_VAR 0 5
43353: PUSH
43354: LD_VAR 0 6
43358: ST_TO_ADDR
// distance := tmp ;
43359: LD_ADDR_VAR 0 10
43363: PUSH
43364: LD_VAR 0 9
43368: ST_TO_ADDR
// end ; end ;
43369: GO 43227
43371: POP
43372: POP
// end ;
43373: LD_VAR 0 5
43377: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43378: LD_INT 0
43380: PPUSH
43381: PPUSH
// if not driver or not IsInUnit ( driver ) then
43382: LD_VAR 0 1
43386: NOT
43387: IFTRUE 43401
43389: PUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: CALL_OW 310
43399: NOT
43400: OR
43401: IFFALSE 43405
// exit ;
43403: GO 43495
// vehicle := IsInUnit ( driver ) ;
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 310
43419: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_STRING \
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: PUSH
43455: LD_STRING E
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_VAR 0 3
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PPUSH
43491: CALL_OW 446
// end ;
43495: LD_VAR 0 2
43499: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43500: LD_INT 0
43502: PPUSH
43503: PPUSH
// if not driver or not IsInUnit ( driver ) then
43504: LD_VAR 0 1
43508: NOT
43509: IFTRUE 43523
43511: PUSH
43512: LD_VAR 0 1
43516: PPUSH
43517: CALL_OW 310
43521: NOT
43522: OR
43523: IFFALSE 43527
// exit ;
43525: GO 43617
// vehicle := IsInUnit ( driver ) ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: CALL_OW 310
43541: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43542: LD_VAR 0 1
43546: PPUSH
43547: LD_STRING \
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: PUSH
43577: LD_STRING E
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_VAR 0 3
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PPUSH
43613: CALL_OW 447
// end ;
43617: LD_VAR 0 2
43621: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43622: LD_INT 0
43624: PPUSH
43625: PPUSH
43626: PPUSH
// tmp := [ ] ;
43627: LD_ADDR_VAR 0 5
43631: PUSH
43632: EMPTY
43633: ST_TO_ADDR
// for i in units do
43634: LD_ADDR_VAR 0 4
43638: PUSH
43639: LD_VAR 0 1
43643: PUSH
43644: FOR_IN
43645: IFFALSE 43683
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43647: LD_ADDR_VAR 0 5
43651: PUSH
43652: LD_VAR 0 5
43656: PPUSH
43657: LD_VAR 0 5
43661: PUSH
43662: LD_INT 1
43664: PLUS
43665: PPUSH
43666: LD_VAR 0 4
43670: PPUSH
43671: CALL_OW 256
43675: PPUSH
43676: CALL_OW 2
43680: ST_TO_ADDR
43681: GO 43644
43683: POP
43684: POP
// if not tmp then
43685: LD_VAR 0 5
43689: NOT
43690: IFFALSE 43694
// exit ;
43692: GO 43742
// if asc then
43694: LD_VAR 0 2
43698: IFFALSE 43722
// result := SortListByListAsc ( units , tmp ) else
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: LD_VAR 0 1
43709: PPUSH
43710: LD_VAR 0 5
43714: PPUSH
43715: CALL_OW 76
43719: ST_TO_ADDR
43720: GO 43742
// result := SortListByListDesc ( units , tmp ) ;
43722: LD_ADDR_VAR 0 3
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: LD_VAR 0 5
43736: PPUSH
43737: CALL_OW 77
43741: ST_TO_ADDR
// end ;
43742: LD_VAR 0 3
43746: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43747: LD_INT 0
43749: PPUSH
43750: PPUSH
// task := GetTaskList ( mech ) ;
43751: LD_ADDR_VAR 0 4
43755: PUSH
43756: LD_VAR 0 1
43760: PPUSH
43761: CALL_OW 437
43765: ST_TO_ADDR
// if not task then
43766: LD_VAR 0 4
43770: NOT
43771: IFFALSE 43775
// exit ;
43773: GO 43819
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43775: LD_ADDR_VAR 0 3
43779: PUSH
43780: LD_VAR 0 4
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PUSH
43789: LD_INT 1
43791: ARRAY
43792: PUSH
43793: LD_STRING r
43795: EQUAL
43796: IFFALSE 43818
43798: PUSH
43799: LD_VAR 0 4
43803: PUSH
43804: LD_INT 1
43806: ARRAY
43807: PUSH
43808: LD_INT 4
43810: ARRAY
43811: PUSH
43812: LD_VAR 0 2
43816: EQUAL
43817: AND
43818: ST_TO_ADDR
// end ;
43819: LD_VAR 0 3
43823: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43824: LD_INT 0
43826: PPUSH
// SetDir ( unit , d ) ;
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_VAR 0 4
43836: PPUSH
43837: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43841: LD_ADDR_VAR 0 6
43845: PUSH
43846: LD_VAR 0 1
43850: PPUSH
43851: LD_VAR 0 2
43855: PPUSH
43856: LD_VAR 0 3
43860: PPUSH
43861: LD_VAR 0 5
43865: PPUSH
43866: CALL_OW 48
43870: ST_TO_ADDR
// end ;
43871: LD_VAR 0 6
43875: RET
// export function ToNaturalNumber ( number ) ; begin
43876: LD_INT 0
43878: PPUSH
// result := number div 1 ;
43879: LD_ADDR_VAR 0 2
43883: PUSH
43884: LD_VAR 0 1
43888: PUSH
43889: LD_INT 1
43891: DIV
43892: ST_TO_ADDR
// if number < 0 then
43893: LD_VAR 0 1
43897: PUSH
43898: LD_INT 0
43900: LESS
43901: IFFALSE 43911
// result := 0 ;
43903: LD_ADDR_VAR 0 2
43907: PUSH
43908: LD_INT 0
43910: ST_TO_ADDR
// end ;
43911: LD_VAR 0 2
43915: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43916: LD_INT 0
43918: PPUSH
43919: PPUSH
43920: PPUSH
// if not buildings then
43921: LD_VAR 0 1
43925: NOT
43926: IFFALSE 43930
// exit ;
43928: GO 44045
// tmp := [ ] ;
43930: LD_ADDR_VAR 0 5
43934: PUSH
43935: EMPTY
43936: ST_TO_ADDR
// for b in buildings do
43937: LD_ADDR_VAR 0 4
43941: PUSH
43942: LD_VAR 0 1
43946: PUSH
43947: FOR_IN
43948: IFFALSE 43986
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43950: LD_ADDR_VAR 0 5
43954: PUSH
43955: LD_VAR 0 5
43959: PPUSH
43960: LD_VAR 0 5
43964: PUSH
43965: LD_INT 1
43967: PLUS
43968: PPUSH
43969: LD_VAR 0 4
43973: PPUSH
43974: CALL_OW 266
43978: PPUSH
43979: CALL_OW 1
43983: ST_TO_ADDR
43984: GO 43947
43986: POP
43987: POP
// if not tmp then
43988: LD_VAR 0 5
43992: NOT
43993: IFFALSE 43997
// exit ;
43995: GO 44045
// if asc then
43997: LD_VAR 0 2
44001: IFFALSE 44025
// result := SortListByListAsc ( buildings , tmp ) else
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: LD_VAR 0 5
44017: PPUSH
44018: CALL_OW 76
44022: ST_TO_ADDR
44023: GO 44045
// result := SortListByListDesc ( buildings , tmp ) ;
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: LD_VAR 0 5
44039: PPUSH
44040: CALL_OW 77
44044: ST_TO_ADDR
// end ;
44045: LD_VAR 0 3
44049: RET
// export function SortByClass ( units , class ) ; var un ; begin
44050: LD_INT 0
44052: PPUSH
44053: PPUSH
// if not units or not class then
44054: LD_VAR 0 1
44058: NOT
44059: IFTRUE 44068
44061: PUSH
44062: LD_VAR 0 2
44066: NOT
44067: OR
44068: IFFALSE 44072
// exit ;
44070: GO 44167
// result := [ ] ;
44072: LD_ADDR_VAR 0 3
44076: PUSH
44077: EMPTY
44078: ST_TO_ADDR
// for un in units do
44079: LD_ADDR_VAR 0 4
44083: PUSH
44084: LD_VAR 0 1
44088: PUSH
44089: FOR_IN
44090: IFFALSE 44165
// if GetClass ( un ) = class then
44092: LD_VAR 0 4
44096: PPUSH
44097: CALL_OW 257
44101: PUSH
44102: LD_VAR 0 2
44106: EQUAL
44107: IFFALSE 44134
// result := Insert ( result , 1 , un ) else
44109: LD_ADDR_VAR 0 3
44113: PUSH
44114: LD_VAR 0 3
44118: PPUSH
44119: LD_INT 1
44121: PPUSH
44122: LD_VAR 0 4
44126: PPUSH
44127: CALL_OW 2
44131: ST_TO_ADDR
44132: GO 44163
// result := Replace ( result , result + 1 , un ) ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_VAR 0 3
44143: PPUSH
44144: LD_VAR 0 3
44148: PUSH
44149: LD_INT 1
44151: PLUS
44152: PPUSH
44153: LD_VAR 0 4
44157: PPUSH
44158: CALL_OW 1
44162: ST_TO_ADDR
44163: GO 44089
44165: POP
44166: POP
// end ;
44167: LD_VAR 0 3
44171: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
// result := [ ] ;
44181: LD_ADDR_VAR 0 4
44185: PUSH
44186: EMPTY
44187: ST_TO_ADDR
// if x - r < 0 then
44188: LD_VAR 0 1
44192: PUSH
44193: LD_VAR 0 3
44197: MINUS
44198: PUSH
44199: LD_INT 0
44201: LESS
44202: IFFALSE 44214
// min_x := 0 else
44204: LD_ADDR_VAR 0 8
44208: PUSH
44209: LD_INT 0
44211: ST_TO_ADDR
44212: GO 44230
// min_x := x - r ;
44214: LD_ADDR_VAR 0 8
44218: PUSH
44219: LD_VAR 0 1
44223: PUSH
44224: LD_VAR 0 3
44228: MINUS
44229: ST_TO_ADDR
// if y - r < 0 then
44230: LD_VAR 0 2
44234: PUSH
44235: LD_VAR 0 3
44239: MINUS
44240: PUSH
44241: LD_INT 0
44243: LESS
44244: IFFALSE 44256
// min_y := 0 else
44246: LD_ADDR_VAR 0 7
44250: PUSH
44251: LD_INT 0
44253: ST_TO_ADDR
44254: GO 44272
// min_y := y - r ;
44256: LD_ADDR_VAR 0 7
44260: PUSH
44261: LD_VAR 0 2
44265: PUSH
44266: LD_VAR 0 3
44270: MINUS
44271: ST_TO_ADDR
// max_x := x + r ;
44272: LD_ADDR_VAR 0 9
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_VAR 0 3
44286: PLUS
44287: ST_TO_ADDR
// max_y := y + r ;
44288: LD_ADDR_VAR 0 10
44292: PUSH
44293: LD_VAR 0 2
44297: PUSH
44298: LD_VAR 0 3
44302: PLUS
44303: ST_TO_ADDR
// for _x = min_x to max_x do
44304: LD_ADDR_VAR 0 5
44308: PUSH
44309: DOUBLE
44310: LD_VAR 0 8
44314: DEC
44315: ST_TO_ADDR
44316: LD_VAR 0 9
44320: PUSH
44321: FOR_TO
44322: IFFALSE 44423
// for _y = min_y to max_y do
44324: LD_ADDR_VAR 0 6
44328: PUSH
44329: DOUBLE
44330: LD_VAR 0 7
44334: DEC
44335: ST_TO_ADDR
44336: LD_VAR 0 10
44340: PUSH
44341: FOR_TO
44342: IFFALSE 44419
// begin if not ValidHex ( _x , _y ) then
44344: LD_VAR 0 5
44348: PPUSH
44349: LD_VAR 0 6
44353: PPUSH
44354: CALL_OW 488
44358: NOT
44359: IFFALSE 44363
// continue ;
44361: GO 44341
// if GetResourceTypeXY ( _x , _y ) then
44363: LD_VAR 0 5
44367: PPUSH
44368: LD_VAR 0 6
44372: PPUSH
44373: CALL_OW 283
44377: IFFALSE 44417
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44379: LD_ADDR_VAR 0 4
44383: PUSH
44384: LD_VAR 0 4
44388: PPUSH
44389: LD_VAR 0 4
44393: PUSH
44394: LD_INT 1
44396: PLUS
44397: PPUSH
44398: LD_VAR 0 5
44402: PUSH
44403: LD_VAR 0 6
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PPUSH
44412: CALL_OW 1
44416: ST_TO_ADDR
// end ;
44417: GO 44341
44419: POP
44420: POP
44421: GO 44321
44423: POP
44424: POP
// end ;
44425: LD_VAR 0 4
44429: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44430: LD_INT 0
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
// if not units then
44440: LD_VAR 0 1
44444: NOT
44445: IFFALSE 44449
// exit ;
44447: GO 44981
// result := UnitFilter ( units , [ f_ok ] ) ;
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_VAR 0 1
44458: PPUSH
44459: LD_INT 50
44461: PUSH
44462: EMPTY
44463: LIST
44464: PPUSH
44465: CALL_OW 72
44469: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44470: LD_ADDR_VAR 0 8
44474: PUSH
44475: LD_VAR 0 1
44479: PUSH
44480: LD_INT 1
44482: ARRAY
44483: PPUSH
44484: CALL_OW 255
44488: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44489: LD_ADDR_VAR 0 10
44493: PUSH
44494: LD_INT 29
44496: PUSH
44497: LD_INT 91
44499: PUSH
44500: LD_INT 49
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: ST_TO_ADDR
// if not result then
44508: LD_VAR 0 3
44512: NOT
44513: IFFALSE 44517
// exit ;
44515: GO 44981
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44517: LD_ADDR_VAR 0 5
44521: PUSH
44522: LD_INT 81
44524: PUSH
44525: LD_VAR 0 8
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PPUSH
44534: CALL_OW 69
44538: ST_TO_ADDR
// for i in result do
44539: LD_ADDR_VAR 0 4
44543: PUSH
44544: LD_VAR 0 3
44548: PUSH
44549: FOR_IN
44550: IFFALSE 44979
// begin tag := GetTag ( i ) + 1 ;
44552: LD_ADDR_VAR 0 9
44556: PUSH
44557: LD_VAR 0 4
44561: PPUSH
44562: CALL_OW 110
44566: PUSH
44567: LD_INT 1
44569: PLUS
44570: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44571: LD_ADDR_VAR 0 7
44575: PUSH
44576: LD_VAR 0 4
44580: PPUSH
44581: CALL_OW 250
44585: PPUSH
44586: LD_VAR 0 4
44590: PPUSH
44591: CALL_OW 251
44595: PPUSH
44596: LD_INT 4
44598: PPUSH
44599: CALL 44172 0 3
44603: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44604: LD_VAR 0 4
44608: PPUSH
44609: CALL_OW 247
44613: PUSH
44614: LD_INT 2
44616: EQUAL
44617: IFFALSE 44629
44619: PUSH
44620: LD_VAR 0 7
44624: PUSH
44625: LD_INT 2
44627: GREATER
44628: AND
44629: IFFALSE 44649
44631: PUSH
44632: LD_VAR 0 4
44636: PPUSH
44637: CALL_OW 264
44641: PUSH
44642: LD_VAR 0 10
44646: IN
44647: NOT
44648: AND
44649: IFFALSE 44688
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44651: LD_VAR 0 4
44655: PPUSH
44656: LD_VAR 0 7
44660: PUSH
44661: LD_INT 1
44663: ARRAY
44664: PUSH
44665: LD_INT 1
44667: ARRAY
44668: PPUSH
44669: LD_VAR 0 7
44673: PUSH
44674: LD_INT 1
44676: ARRAY
44677: PUSH
44678: LD_INT 2
44680: ARRAY
44681: PPUSH
44682: CALL_OW 116
44686: GO 44977
// if path > tag then
44688: LD_VAR 0 2
44692: PUSH
44693: LD_VAR 0 9
44697: GREATER
44698: IFFALSE 44906
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44700: LD_ADDR_VAR 0 6
44704: PUSH
44705: LD_VAR 0 5
44709: PPUSH
44710: LD_INT 91
44712: PUSH
44713: LD_VAR 0 4
44717: PUSH
44718: LD_INT 8
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: PPUSH
44726: CALL_OW 72
44730: ST_TO_ADDR
// if nearEnemy then
44731: LD_VAR 0 6
44735: IFFALSE 44804
// begin if GetWeapon ( i ) = ru_time_lapser then
44737: LD_VAR 0 4
44741: PPUSH
44742: CALL_OW 264
44746: PUSH
44747: LD_INT 49
44749: EQUAL
44750: IFFALSE 44778
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44752: LD_VAR 0 4
44756: PPUSH
44757: LD_VAR 0 6
44761: PPUSH
44762: LD_VAR 0 4
44766: PPUSH
44767: CALL_OW 74
44771: PPUSH
44772: CALL_OW 112
44776: GO 44802
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44778: LD_VAR 0 4
44782: PPUSH
44783: LD_VAR 0 6
44787: PPUSH
44788: LD_VAR 0 4
44792: PPUSH
44793: CALL_OW 74
44797: PPUSH
44798: CALL 46062 0 2
// end else
44802: GO 44904
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44804: LD_VAR 0 4
44808: PPUSH
44809: LD_VAR 0 2
44813: PUSH
44814: LD_VAR 0 9
44818: ARRAY
44819: PUSH
44820: LD_INT 1
44822: ARRAY
44823: PPUSH
44824: LD_VAR 0 2
44828: PUSH
44829: LD_VAR 0 9
44833: ARRAY
44834: PUSH
44835: LD_INT 2
44837: ARRAY
44838: PPUSH
44839: CALL_OW 297
44843: PUSH
44844: LD_INT 6
44846: GREATER
44847: IFFALSE 44890
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44849: LD_VAR 0 4
44853: PPUSH
44854: LD_VAR 0 2
44858: PUSH
44859: LD_VAR 0 9
44863: ARRAY
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: PPUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_VAR 0 9
44878: ARRAY
44879: PUSH
44880: LD_INT 2
44882: ARRAY
44883: PPUSH
44884: CALL_OW 114
44888: GO 44904
// SetTag ( i , tag ) ;
44890: LD_VAR 0 4
44894: PPUSH
44895: LD_VAR 0 9
44899: PPUSH
44900: CALL_OW 109
// end else
44904: GO 44977
// if enemy then
44906: LD_VAR 0 5
44910: IFFALSE 44977
// begin if GetWeapon ( i ) = ru_time_lapser then
44912: LD_VAR 0 4
44916: PPUSH
44917: CALL_OW 264
44921: PUSH
44922: LD_INT 49
44924: EQUAL
44925: IFFALSE 44953
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44927: LD_VAR 0 4
44931: PPUSH
44932: LD_VAR 0 5
44936: PPUSH
44937: LD_VAR 0 4
44941: PPUSH
44942: CALL_OW 74
44946: PPUSH
44947: CALL_OW 112
44951: GO 44977
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44953: LD_VAR 0 4
44957: PPUSH
44958: LD_VAR 0 5
44962: PPUSH
44963: LD_VAR 0 4
44967: PPUSH
44968: CALL_OW 74
44972: PPUSH
44973: CALL 46062 0 2
// end ; end ;
44977: GO 44549
44979: POP
44980: POP
// end ;
44981: LD_VAR 0 3
44985: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44986: LD_INT 0
44988: PPUSH
44989: PPUSH
44990: PPUSH
// if not unit or IsInUnit ( unit ) then
44991: LD_VAR 0 1
44995: NOT
44996: IFTRUE 45009
44998: PUSH
44999: LD_VAR 0 1
45003: PPUSH
45004: CALL_OW 310
45008: OR
45009: IFFALSE 45013
// exit ;
45011: GO 45104
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45013: LD_ADDR_VAR 0 4
45017: PUSH
45018: LD_VAR 0 1
45022: PPUSH
45023: CALL_OW 250
45027: PPUSH
45028: LD_VAR 0 2
45032: PPUSH
45033: LD_INT 1
45035: PPUSH
45036: CALL_OW 272
45040: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45041: LD_ADDR_VAR 0 5
45045: PUSH
45046: LD_VAR 0 1
45050: PPUSH
45051: CALL_OW 251
45055: PPUSH
45056: LD_VAR 0 2
45060: PPUSH
45061: LD_INT 1
45063: PPUSH
45064: CALL_OW 273
45068: ST_TO_ADDR
// if ValidHex ( x , y ) then
45069: LD_VAR 0 4
45073: PPUSH
45074: LD_VAR 0 5
45078: PPUSH
45079: CALL_OW 488
45083: IFFALSE 45104
// ComTurnXY ( unit , x , y ) ;
45085: LD_VAR 0 1
45089: PPUSH
45090: LD_VAR 0 4
45094: PPUSH
45095: LD_VAR 0 5
45099: PPUSH
45100: CALL_OW 118
// end ;
45104: LD_VAR 0 3
45108: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45109: LD_INT 0
45111: PPUSH
45112: PPUSH
// result := false ;
45113: LD_ADDR_VAR 0 3
45117: PUSH
45118: LD_INT 0
45120: ST_TO_ADDR
// if not units then
45121: LD_VAR 0 2
45125: NOT
45126: IFFALSE 45130
// exit ;
45128: GO 45175
// for i in units do
45130: LD_ADDR_VAR 0 4
45134: PUSH
45135: LD_VAR 0 2
45139: PUSH
45140: FOR_IN
45141: IFFALSE 45173
// if See ( side , i ) then
45143: LD_VAR 0 1
45147: PPUSH
45148: LD_VAR 0 4
45152: PPUSH
45153: CALL_OW 292
45157: IFFALSE 45171
// begin result := true ;
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_INT 1
45166: ST_TO_ADDR
// exit ;
45167: POP
45168: POP
45169: GO 45175
// end ;
45171: GO 45140
45173: POP
45174: POP
// end ;
45175: LD_VAR 0 3
45179: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45180: LD_INT 0
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
// if not unit or not points then
45186: LD_VAR 0 1
45190: NOT
45191: IFTRUE 45200
45193: PUSH
45194: LD_VAR 0 2
45198: NOT
45199: OR
45200: IFFALSE 45204
// exit ;
45202: GO 45294
// dist := 99999 ;
45204: LD_ADDR_VAR 0 5
45208: PUSH
45209: LD_INT 99999
45211: ST_TO_ADDR
// for i in points do
45212: LD_ADDR_VAR 0 4
45216: PUSH
45217: LD_VAR 0 2
45221: PUSH
45222: FOR_IN
45223: IFFALSE 45292
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45225: LD_ADDR_VAR 0 6
45229: PUSH
45230: LD_VAR 0 1
45234: PPUSH
45235: LD_VAR 0 4
45239: PUSH
45240: LD_INT 1
45242: ARRAY
45243: PPUSH
45244: LD_VAR 0 4
45248: PUSH
45249: LD_INT 2
45251: ARRAY
45252: PPUSH
45253: CALL_OW 297
45257: ST_TO_ADDR
// if tmpDist < dist then
45258: LD_VAR 0 6
45262: PUSH
45263: LD_VAR 0 5
45267: LESS
45268: IFFALSE 45290
// begin result := i ;
45270: LD_ADDR_VAR 0 3
45274: PUSH
45275: LD_VAR 0 4
45279: ST_TO_ADDR
// dist := tmpDist ;
45280: LD_ADDR_VAR 0 5
45284: PUSH
45285: LD_VAR 0 6
45289: ST_TO_ADDR
// end ; end ;
45290: GO 45222
45292: POP
45293: POP
// end ;
45294: LD_VAR 0 3
45298: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45299: LD_INT 0
45301: PPUSH
// uc_side := side ;
45302: LD_ADDR_OWVAR 20
45306: PUSH
45307: LD_VAR 0 1
45311: ST_TO_ADDR
// uc_nation := 3 ;
45312: LD_ADDR_OWVAR 21
45316: PUSH
45317: LD_INT 3
45319: ST_TO_ADDR
// vc_chassis := 25 ;
45320: LD_ADDR_OWVAR 37
45324: PUSH
45325: LD_INT 25
45327: ST_TO_ADDR
// vc_engine := engine_siberite ;
45328: LD_ADDR_OWVAR 39
45332: PUSH
45333: LD_INT 3
45335: ST_TO_ADDR
// vc_control := control_computer ;
45336: LD_ADDR_OWVAR 38
45340: PUSH
45341: LD_INT 3
45343: ST_TO_ADDR
// vc_weapon := 59 ;
45344: LD_ADDR_OWVAR 40
45348: PUSH
45349: LD_INT 59
45351: ST_TO_ADDR
// result := CreateVehicle ;
45352: LD_ADDR_VAR 0 5
45356: PUSH
45357: CALL_OW 45
45361: ST_TO_ADDR
// SetDir ( result , d ) ;
45362: LD_VAR 0 5
45366: PPUSH
45367: LD_VAR 0 4
45371: PPUSH
45372: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45376: LD_VAR 0 5
45380: PPUSH
45381: LD_VAR 0 2
45385: PPUSH
45386: LD_VAR 0 3
45390: PPUSH
45391: LD_INT 0
45393: PPUSH
45394: CALL_OW 48
// end ;
45398: LD_VAR 0 5
45402: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45403: LD_INT 0
45405: PPUSH
45406: PPUSH
45407: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45408: LD_ADDR_VAR 0 2
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45431: LD_VAR 0 1
45435: NOT
45436: IFTRUE 45469
45438: PUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: CALL_OW 264
45448: PUSH
45449: LD_INT 12
45451: PUSH
45452: LD_INT 51
45454: PUSH
45455: LD_INT 32
45457: PUSH
45458: LD_INT 89
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: IN
45467: NOT
45468: OR
45469: IFFALSE 45473
// exit ;
45471: GO 45571
// for i := 1 to 3 do
45473: LD_ADDR_VAR 0 3
45477: PUSH
45478: DOUBLE
45479: LD_INT 1
45481: DEC
45482: ST_TO_ADDR
45483: LD_INT 3
45485: PUSH
45486: FOR_TO
45487: IFFALSE 45569
// begin tmp := GetCargo ( cargo , i ) ;
45489: LD_ADDR_VAR 0 4
45493: PUSH
45494: LD_VAR 0 1
45498: PPUSH
45499: LD_VAR 0 3
45503: PPUSH
45504: CALL_OW 289
45508: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45509: LD_ADDR_VAR 0 2
45513: PUSH
45514: LD_VAR 0 2
45518: PPUSH
45519: LD_VAR 0 3
45523: PPUSH
45524: LD_VAR 0 4
45528: PPUSH
45529: CALL_OW 1
45533: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45534: LD_ADDR_VAR 0 2
45538: PUSH
45539: LD_VAR 0 2
45543: PPUSH
45544: LD_INT 4
45546: PPUSH
45547: LD_VAR 0 2
45551: PUSH
45552: LD_INT 4
45554: ARRAY
45555: PUSH
45556: LD_VAR 0 4
45560: PLUS
45561: PPUSH
45562: CALL_OW 1
45566: ST_TO_ADDR
// end ;
45567: GO 45486
45569: POP
45570: POP
// end ;
45571: LD_VAR 0 2
45575: RET
// export function Length ( array ) ; begin
45576: LD_INT 0
45578: PPUSH
// result := array + 0 ;
45579: LD_ADDR_VAR 0 2
45583: PUSH
45584: LD_VAR 0 1
45588: PUSH
45589: LD_INT 0
45591: PLUS
45592: ST_TO_ADDR
// end ;
45593: LD_VAR 0 2
45597: RET
// export function PrepareArray ( array ) ; begin
45598: LD_INT 0
45600: PPUSH
// result := array diff 0 ;
45601: LD_ADDR_VAR 0 2
45605: PUSH
45606: LD_VAR 0 1
45610: PUSH
45611: LD_INT 0
45613: DIFF
45614: ST_TO_ADDR
// if not result [ 1 ] then
45615: LD_VAR 0 2
45619: PUSH
45620: LD_INT 1
45622: ARRAY
45623: NOT
45624: IFFALSE 45644
// result := Delete ( result , 1 ) ;
45626: LD_ADDR_VAR 0 2
45630: PUSH
45631: LD_VAR 0 2
45635: PPUSH
45636: LD_INT 1
45638: PPUSH
45639: CALL_OW 3
45643: ST_TO_ADDR
// end ;
45644: LD_VAR 0 2
45648: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45649: LD_INT 0
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
// sibRocketRange := 25 ;
45655: LD_ADDR_VAR 0 6
45659: PUSH
45660: LD_INT 25
45662: ST_TO_ADDR
// result := false ;
45663: LD_ADDR_VAR 0 4
45667: PUSH
45668: LD_INT 0
45670: ST_TO_ADDR
// for i := 0 to 5 do
45671: LD_ADDR_VAR 0 5
45675: PUSH
45676: DOUBLE
45677: LD_INT 0
45679: DEC
45680: ST_TO_ADDR
45681: LD_INT 5
45683: PUSH
45684: FOR_TO
45685: IFFALSE 45752
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45687: LD_VAR 0 1
45691: PPUSH
45692: LD_VAR 0 5
45696: PPUSH
45697: LD_VAR 0 6
45701: PPUSH
45702: CALL_OW 272
45706: PPUSH
45707: LD_VAR 0 2
45711: PPUSH
45712: LD_VAR 0 5
45716: PPUSH
45717: LD_VAR 0 6
45721: PPUSH
45722: CALL_OW 273
45726: PPUSH
45727: LD_VAR 0 3
45731: PPUSH
45732: CALL_OW 309
45736: IFFALSE 45750
// begin result := true ;
45738: LD_ADDR_VAR 0 4
45742: PUSH
45743: LD_INT 1
45745: ST_TO_ADDR
// exit ;
45746: POP
45747: POP
45748: GO 45754
// end ;
45750: GO 45684
45752: POP
45753: POP
// end ;
45754: LD_VAR 0 4
45758: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45759: LD_INT 0
45761: PPUSH
45762: PPUSH
45763: PPUSH
// if btype = b_depot then
45764: LD_VAR 0 2
45768: PUSH
45769: LD_INT 0
45771: EQUAL
45772: IFFALSE 45784
// begin result := true ;
45774: LD_ADDR_VAR 0 3
45778: PUSH
45779: LD_INT 1
45781: ST_TO_ADDR
// exit ;
45782: GO 45904
// end ; pom := GetBase ( depot ) ;
45784: LD_ADDR_VAR 0 4
45788: PUSH
45789: LD_VAR 0 1
45793: PPUSH
45794: CALL_OW 274
45798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45799: LD_ADDR_VAR 0 5
45803: PUSH
45804: LD_VAR 0 2
45808: PPUSH
45809: LD_VAR 0 1
45813: PPUSH
45814: CALL_OW 248
45818: PPUSH
45819: CALL_OW 450
45823: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45824: LD_ADDR_VAR 0 3
45828: PUSH
45829: LD_VAR 0 4
45833: PPUSH
45834: LD_INT 1
45836: PPUSH
45837: CALL_OW 275
45841: PUSH
45842: LD_VAR 0 5
45846: PUSH
45847: LD_INT 1
45849: ARRAY
45850: GREATEREQUAL
45851: IFFALSE 45877
45853: PUSH
45854: LD_VAR 0 4
45858: PPUSH
45859: LD_INT 2
45861: PPUSH
45862: CALL_OW 275
45866: PUSH
45867: LD_VAR 0 5
45871: PUSH
45872: LD_INT 2
45874: ARRAY
45875: GREATEREQUAL
45876: AND
45877: IFFALSE 45903
45879: PUSH
45880: LD_VAR 0 4
45884: PPUSH
45885: LD_INT 3
45887: PPUSH
45888: CALL_OW 275
45892: PUSH
45893: LD_VAR 0 5
45897: PUSH
45898: LD_INT 3
45900: ARRAY
45901: GREATEREQUAL
45902: AND
45903: ST_TO_ADDR
// end ;
45904: LD_VAR 0 3
45908: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45909: LD_INT 0
45911: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45912: LD_VAR 0 1
45916: PPUSH
45917: LD_VAR 0 2
45921: PPUSH
45922: LD_INT 0
45924: PPUSH
45925: LD_INT 0
45927: PPUSH
45928: LD_INT 1
45930: PPUSH
45931: LD_INT 0
45933: PPUSH
45934: CALL_OW 587
// end ;
45938: LD_VAR 0 3
45942: RET
// export function CenterOnNow ( unit ) ; begin
45943: LD_INT 0
45945: PPUSH
// result := IsInUnit ( unit ) ;
45946: LD_ADDR_VAR 0 2
45950: PUSH
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 310
45960: ST_TO_ADDR
// if not result then
45961: LD_VAR 0 2
45965: NOT
45966: IFFALSE 45978
// result := unit ;
45968: LD_ADDR_VAR 0 2
45972: PUSH
45973: LD_VAR 0 1
45977: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45978: LD_VAR 0 1
45982: PPUSH
45983: CALL_OW 87
// end ;
45987: LD_VAR 0 2
45991: RET
// export function ComMoveHex ( unit , hex ) ; begin
45992: LD_INT 0
45994: PPUSH
// if not hex then
45995: LD_VAR 0 2
45999: NOT
46000: IFFALSE 46004
// exit ;
46002: GO 46057
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46004: LD_VAR 0 2
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: PPUSH
46013: LD_VAR 0 2
46017: PUSH
46018: LD_INT 2
46020: ARRAY
46021: PPUSH
46022: CALL_OW 428
46026: IFFALSE 46030
// exit ;
46028: GO 46057
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46030: LD_VAR 0 1
46034: PPUSH
46035: LD_VAR 0 2
46039: PUSH
46040: LD_INT 1
46042: ARRAY
46043: PPUSH
46044: LD_VAR 0 2
46048: PUSH
46049: LD_INT 2
46051: ARRAY
46052: PPUSH
46053: CALL_OW 111
// end ;
46057: LD_VAR 0 3
46061: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46062: LD_INT 0
46064: PPUSH
46065: PPUSH
46066: PPUSH
// if not unit or not enemy then
46067: LD_VAR 0 1
46071: NOT
46072: IFTRUE 46081
46074: PUSH
46075: LD_VAR 0 2
46079: NOT
46080: OR
46081: IFFALSE 46085
// exit ;
46083: GO 46211
// x := GetX ( enemy ) ;
46085: LD_ADDR_VAR 0 4
46089: PUSH
46090: LD_VAR 0 2
46094: PPUSH
46095: CALL_OW 250
46099: ST_TO_ADDR
// y := GetY ( enemy ) ;
46100: LD_ADDR_VAR 0 5
46104: PUSH
46105: LD_VAR 0 2
46109: PPUSH
46110: CALL_OW 251
46114: ST_TO_ADDR
// if ValidHex ( x , y ) then
46115: LD_VAR 0 4
46119: PPUSH
46120: LD_VAR 0 5
46124: PPUSH
46125: CALL_OW 488
46129: IFFALSE 46211
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46131: LD_VAR 0 2
46135: PPUSH
46136: CALL_OW 247
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: IN
46151: IFTRUE 46174
46153: PUSH
46154: LD_VAR 0 1
46158: PPUSH
46159: CALL_OW 255
46163: PPUSH
46164: LD_VAR 0 2
46168: PPUSH
46169: CALL_OW 292
46173: OR
46174: IFFALSE 46192
// ComAttackUnit ( unit , enemy ) else
46176: LD_VAR 0 1
46180: PPUSH
46181: LD_VAR 0 2
46185: PPUSH
46186: CALL_OW 115
46190: GO 46211
// ComAgressiveMove ( unit , x , y ) ;
46192: LD_VAR 0 1
46196: PPUSH
46197: LD_VAR 0 4
46201: PPUSH
46202: LD_VAR 0 5
46206: PPUSH
46207: CALL_OW 114
// end ;
46211: LD_VAR 0 3
46215: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46216: LD_INT 0
46218: PPUSH
46219: PPUSH
46220: PPUSH
// list := AreaToList ( area , 0 ) ;
46221: LD_ADDR_VAR 0 5
46225: PUSH
46226: LD_VAR 0 1
46230: PPUSH
46231: LD_INT 0
46233: PPUSH
46234: CALL_OW 517
46238: ST_TO_ADDR
// if not list then
46239: LD_VAR 0 5
46243: NOT
46244: IFFALSE 46248
// exit ;
46246: GO 46378
// if all then
46248: LD_VAR 0 2
46252: IFFALSE 46340
// begin for i := 1 to list [ 1 ] do
46254: LD_ADDR_VAR 0 4
46258: PUSH
46259: DOUBLE
46260: LD_INT 1
46262: DEC
46263: ST_TO_ADDR
46264: LD_VAR 0 5
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: PUSH
46273: FOR_TO
46274: IFFALSE 46336
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46276: LD_ADDR_VAR 0 3
46280: PUSH
46281: LD_VAR 0 3
46285: PPUSH
46286: LD_VAR 0 3
46290: PUSH
46291: LD_INT 1
46293: PLUS
46294: PPUSH
46295: LD_VAR 0 5
46299: PUSH
46300: LD_INT 1
46302: ARRAY
46303: PUSH
46304: LD_VAR 0 4
46308: ARRAY
46309: PUSH
46310: LD_VAR 0 5
46314: PUSH
46315: LD_INT 2
46317: ARRAY
46318: PUSH
46319: LD_VAR 0 4
46323: ARRAY
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PPUSH
46329: CALL_OW 1
46333: ST_TO_ADDR
46334: GO 46273
46336: POP
46337: POP
// exit ;
46338: GO 46378
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46340: LD_ADDR_VAR 0 3
46344: PUSH
46345: LD_VAR 0 5
46349: PUSH
46350: LD_INT 1
46352: ARRAY
46353: PUSH
46354: LD_INT 1
46356: ARRAY
46357: PUSH
46358: LD_VAR 0 5
46362: PUSH
46363: LD_INT 2
46365: ARRAY
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: ST_TO_ADDR
// end ;
46378: LD_VAR 0 3
46382: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46383: LD_INT 0
46385: PPUSH
46386: PPUSH
// list := AreaToList ( area , 0 ) ;
46387: LD_ADDR_VAR 0 4
46391: PUSH
46392: LD_VAR 0 1
46396: PPUSH
46397: LD_INT 0
46399: PPUSH
46400: CALL_OW 517
46404: ST_TO_ADDR
// if not list then
46405: LD_VAR 0 4
46409: NOT
46410: IFFALSE 46414
// exit ;
46412: GO 46455
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46414: LD_ADDR_VAR 0 3
46418: PUSH
46419: LD_VAR 0 4
46423: PUSH
46424: LD_INT 1
46426: ARRAY
46427: PUSH
46428: LD_INT 1
46430: ARRAY
46431: PUSH
46432: LD_VAR 0 4
46436: PUSH
46437: LD_INT 2
46439: ARRAY
46440: PUSH
46441: LD_INT 1
46443: ARRAY
46444: PUSH
46445: LD_VAR 0 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// end ;
46455: LD_VAR 0 3
46459: RET
// export function First ( array ) ; begin
46460: LD_INT 0
46462: PPUSH
// if not array then
46463: LD_VAR 0 1
46467: NOT
46468: IFFALSE 46472
// exit ;
46470: GO 46486
// result := array [ 1 ] ;
46472: LD_ADDR_VAR 0 2
46476: PUSH
46477: LD_VAR 0 1
46481: PUSH
46482: LD_INT 1
46484: ARRAY
46485: ST_TO_ADDR
// end ;
46486: LD_VAR 0 2
46490: RET
// export function Last ( array ) ; begin
46491: LD_INT 0
46493: PPUSH
// if not array then
46494: LD_VAR 0 1
46498: NOT
46499: IFFALSE 46503
// exit ;
46501: GO 46519
// result := array [ array ] ;
46503: LD_ADDR_VAR 0 2
46507: PUSH
46508: LD_VAR 0 1
46512: PUSH
46513: LD_VAR 0 1
46517: ARRAY
46518: ST_TO_ADDR
// end ;
46519: LD_VAR 0 2
46523: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46524: LD_INT 0
46526: PPUSH
46527: PPUSH
// result := [ ] ;
46528: LD_ADDR_VAR 0 5
46532: PUSH
46533: EMPTY
46534: ST_TO_ADDR
// if not array then
46535: LD_VAR 0 1
46539: NOT
46540: IFFALSE 46544
// exit ;
46542: GO 46656
// for i := 1 to array do
46544: LD_ADDR_VAR 0 6
46548: PUSH
46549: DOUBLE
46550: LD_INT 1
46552: DEC
46553: ST_TO_ADDR
46554: LD_VAR 0 1
46558: PUSH
46559: FOR_TO
46560: IFFALSE 46654
// if array [ i ] [ index ] = value then
46562: LD_VAR 0 1
46566: PUSH
46567: LD_VAR 0 6
46571: ARRAY
46572: PUSH
46573: LD_VAR 0 2
46577: ARRAY
46578: PUSH
46579: LD_VAR 0 3
46583: EQUAL
46584: IFFALSE 46652
// begin if indexColumn then
46586: LD_VAR 0 4
46590: IFFALSE 46626
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46592: LD_ADDR_VAR 0 5
46596: PUSH
46597: LD_VAR 0 5
46601: PPUSH
46602: LD_VAR 0 1
46606: PUSH
46607: LD_VAR 0 6
46611: ARRAY
46612: PUSH
46613: LD_VAR 0 4
46617: ARRAY
46618: PPUSH
46619: CALL 41664 0 2
46623: ST_TO_ADDR
46624: GO 46652
// result := Join ( result , array [ i ] ) ;
46626: LD_ADDR_VAR 0 5
46630: PUSH
46631: LD_VAR 0 5
46635: PPUSH
46636: LD_VAR 0 1
46640: PUSH
46641: LD_VAR 0 6
46645: ARRAY
46646: PPUSH
46647: CALL 41664 0 2
46651: ST_TO_ADDR
// end ;
46652: GO 46559
46654: POP
46655: POP
// end ;
46656: LD_VAR 0 5
46660: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46661: LD_INT 0
46663: PPUSH
// if not vehicles or not parkingPoint then
46664: LD_VAR 0 1
46668: NOT
46669: IFTRUE 46678
46671: PUSH
46672: LD_VAR 0 2
46676: NOT
46677: OR
46678: IFFALSE 46682
// exit ;
46680: GO 46780
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46682: LD_ADDR_VAR 0 1
46686: PUSH
46687: LD_VAR 0 1
46691: PPUSH
46692: LD_INT 50
46694: PUSH
46695: EMPTY
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 92
46703: PUSH
46704: LD_VAR 0 2
46708: PUSH
46709: LD_INT 1
46711: ARRAY
46712: PUSH
46713: LD_VAR 0 2
46717: PUSH
46718: LD_INT 2
46720: ARRAY
46721: PUSH
46722: LD_INT 8
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PPUSH
46739: CALL_OW 72
46743: ST_TO_ADDR
// if not vehicles then
46744: LD_VAR 0 1
46748: NOT
46749: IFFALSE 46753
// exit ;
46751: GO 46780
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46753: LD_VAR 0 1
46757: PPUSH
46758: LD_VAR 0 2
46762: PUSH
46763: LD_INT 1
46765: ARRAY
46766: PPUSH
46767: LD_VAR 0 2
46771: PUSH
46772: LD_INT 2
46774: ARRAY
46775: PPUSH
46776: CALL_OW 111
// end ;
46780: LD_VAR 0 3
46784: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46785: LD_INT 0
46787: PPUSH
46788: PPUSH
46789: PPUSH
// if not side or not area then
46790: LD_VAR 0 1
46794: NOT
46795: IFTRUE 46804
46797: PUSH
46798: LD_VAR 0 2
46802: NOT
46803: OR
46804: IFFALSE 46808
// exit ;
46806: GO 46927
// tmp := AreaToList ( area , 0 ) ;
46808: LD_ADDR_VAR 0 5
46812: PUSH
46813: LD_VAR 0 2
46817: PPUSH
46818: LD_INT 0
46820: PPUSH
46821: CALL_OW 517
46825: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46826: LD_ADDR_VAR 0 4
46830: PUSH
46831: DOUBLE
46832: LD_INT 1
46834: DEC
46835: ST_TO_ADDR
46836: LD_VAR 0 5
46840: PUSH
46841: LD_INT 1
46843: ARRAY
46844: PUSH
46845: FOR_TO
46846: IFFALSE 46925
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46848: LD_VAR 0 5
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: PUSH
46857: LD_VAR 0 4
46861: ARRAY
46862: PPUSH
46863: LD_VAR 0 5
46867: PUSH
46868: LD_INT 2
46870: ARRAY
46871: PUSH
46872: LD_VAR 0 4
46876: ARRAY
46877: PPUSH
46878: CALL_OW 351
46882: IFFALSE 46923
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46884: LD_VAR 0 5
46888: PUSH
46889: LD_INT 1
46891: ARRAY
46892: PUSH
46893: LD_VAR 0 4
46897: ARRAY
46898: PPUSH
46899: LD_VAR 0 5
46903: PUSH
46904: LD_INT 2
46906: ARRAY
46907: PUSH
46908: LD_VAR 0 4
46912: ARRAY
46913: PPUSH
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 244
// end ;
46923: GO 46845
46925: POP
46926: POP
// end ;
46927: LD_VAR 0 3
46931: RET
// export function UniqueArray ( array ) ; var i ; begin
46932: LD_INT 0
46934: PPUSH
46935: PPUSH
// result := [ ] ;
46936: LD_ADDR_VAR 0 2
46940: PUSH
46941: EMPTY
46942: ST_TO_ADDR
// if not array then
46943: LD_VAR 0 1
46947: NOT
46948: IFFALSE 46952
// exit ;
46950: GO 47013
// for i := 1 to array do
46952: LD_ADDR_VAR 0 3
46956: PUSH
46957: DOUBLE
46958: LD_INT 1
46960: DEC
46961: ST_TO_ADDR
46962: LD_VAR 0 1
46966: PUSH
46967: FOR_TO
46968: IFFALSE 47011
// if not array [ i ] in result then
46970: LD_VAR 0 1
46974: PUSH
46975: LD_VAR 0 3
46979: ARRAY
46980: PUSH
46981: LD_VAR 0 2
46985: IN
46986: NOT
46987: IFFALSE 47009
// result := Join ( result , i ) ;
46989: LD_ADDR_VAR 0 2
46993: PUSH
46994: LD_VAR 0 2
46998: PPUSH
46999: LD_VAR 0 3
47003: PPUSH
47004: CALL 41664 0 2
47008: ST_TO_ADDR
47009: GO 46967
47011: POP
47012: POP
// end ; end_of_file
47013: LD_VAR 0 2
47017: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
47018: LD_INT 0
47020: PPUSH
47021: PPUSH
// disable ( mpActive ) ;
47022: LD_INT 100
47024: DISABLE_MARKED
// disable ( mpWin ) ;
47025: LD_INT 101
47027: DISABLE_MARKED
// disable ( mpLose ) ;
47028: LD_INT 102
47030: DISABLE_MARKED
// mpGameType := 0 ;
47031: LD_ADDR_EXP 5
47035: PUSH
47036: LD_INT 0
47038: ST_TO_ADDR
// mpGameSettings := [ ] ;
47039: LD_ADDR_EXP 8
47043: PUSH
47044: EMPTY
47045: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
47046: LD_ADDR_EXP 6
47050: PUSH
47051: EMPTY
47052: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
47053: LD_ADDR_EXP 7
47057: PUSH
47058: EMPTY
47059: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
47060: LD_ADDR_EXP 31
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: ST_TO_ADDR
// mpOilDeposits := [ ] ;
47075: LD_ADDR_EXP 14
47079: PUSH
47080: EMPTY
47081: ST_TO_ADDR
// mpSibDeposits := [ ] ;
47082: LD_ADDR_EXP 15
47086: PUSH
47087: EMPTY
47088: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
47089: LD_ADDR_EXP 43
47093: PUSH
47094: EMPTY
47095: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
47096: LD_ADDR_EXP 44
47100: PUSH
47101: EMPTY
47102: ST_TO_ADDR
// mpDepots := [ ] ;
47103: LD_ADDR_EXP 16
47107: PUSH
47108: EMPTY
47109: ST_TO_ADDR
// mpBuildings := [ ] ;
47110: LD_ADDR_EXP 19
47114: PUSH
47115: EMPTY
47116: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
47117: LD_ADDR_EXP 20
47121: PUSH
47122: EMPTY
47123: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
47124: LD_ADDR_EXP 21
47128: PUSH
47129: EMPTY
47130: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
47131: LD_ADDR_EXP 22
47135: PUSH
47136: EMPTY
47137: ST_TO_ADDR
// mpStartingResources := [ ] ;
47138: LD_ADDR_EXP 17
47142: PUSH
47143: EMPTY
47144: ST_TO_ADDR
// mpStartPos := [ ] ;
47145: LD_ADDR_EXP 23
47149: PUSH
47150: EMPTY
47151: ST_TO_ADDR
// mpBattleFlag := - 1 ;
47152: LD_ADDR_EXP 24
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: ST_TO_ADDR
// mpBattleFlags := [ ] ;
47161: LD_ADDR_EXP 25
47165: PUSH
47166: EMPTY
47167: ST_TO_ADDR
// mpApemans := [ ] ;
47168: LD_ADDR_EXP 32
47172: PUSH
47173: EMPTY
47174: ST_TO_ADDR
// mpApemansArea := [ ] ;
47175: LD_ADDR_EXP 33
47179: PUSH
47180: EMPTY
47181: ST_TO_ADDR
// mpRespawn := [ ] ;
47182: LD_ADDR_EXP 35
47186: PUSH
47187: EMPTY
47188: ST_TO_ADDR
// mpKingArea := 0 ;
47189: LD_ADDR_EXP 36
47193: PUSH
47194: LD_INT 0
47196: ST_TO_ADDR
// mpPoints := [ ] ;
47197: LD_ADDR_EXP 37
47201: PUSH
47202: EMPTY
47203: ST_TO_ADDR
// mpVehicles := 0 ;
47204: LD_ADDR_EXP 38
47208: PUSH
47209: LD_INT 0
47211: ST_TO_ADDR
// mpShipments := 0 ;
47212: LD_ADDR_EXP 29
47216: PUSH
47217: LD_INT 0
47219: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47220: LD_ADDR_EXP 42
47224: PUSH
47225: EMPTY
47226: PUSH
47227: EMPTY
47228: PUSH
47229: EMPTY
47230: PUSH
47231: EMPTY
47232: PUSH
47233: EMPTY
47234: PUSH
47235: EMPTY
47236: PUSH
47237: EMPTY
47238: PUSH
47239: EMPTY
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
47251: LD_ADDR_EXP 34
47255: PUSH
47256: EMPTY
47257: PUSH
47258: EMPTY
47259: PUSH
47260: EMPTY
47261: PUSH
47262: EMPTY
47263: PUSH
47264: EMPTY
47265: PUSH
47266: EMPTY
47267: PUSH
47268: EMPTY
47269: PUSH
47270: EMPTY
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// mpEmissions := 0 ;
47282: LD_ADDR_EXP 39
47286: PUSH
47287: LD_INT 0
47289: ST_TO_ADDR
// mpTeleports := 0 ;
47290: LD_ADDR_EXP 45
47294: PUSH
47295: LD_INT 0
47297: ST_TO_ADDR
// mpArtifacts := 0 ;
47298: LD_ADDR_EXP 46
47302: PUSH
47303: LD_INT 0
47305: ST_TO_ADDR
// mpPeopleSkill := 3 ;
47306: LD_ADDR_EXP 27
47310: PUSH
47311: LD_INT 3
47313: ST_TO_ADDR
// mpPeopleAmount := 15 ;
47314: LD_ADDR_EXP 26
47318: PUSH
47319: LD_INT 15
47321: ST_TO_ADDR
// mpDisplayStrings := 0 ;
47322: LD_ADDR_EXP 40
47326: PUSH
47327: LD_INT 0
47329: ST_TO_ADDR
// mpGameActive := false ;
47330: LD_ADDR_EXP 41
47334: PUSH
47335: LD_INT 0
47337: ST_TO_ADDR
// mpBlockRespThread := false ;
47338: LD_ADDR_EXP 47
47342: PUSH
47343: LD_INT 0
47345: ST_TO_ADDR
// for i := 1 to 32 do
47346: LD_ADDR_VAR 0 2
47350: PUSH
47351: DOUBLE
47352: LD_INT 1
47354: DEC
47355: ST_TO_ADDR
47356: LD_INT 32
47358: PUSH
47359: FOR_TO
47360: IFFALSE 47387
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
47362: LD_ADDR_EXP 8
47366: PUSH
47367: LD_EXP 8
47371: PPUSH
47372: LD_VAR 0 2
47376: PPUSH
47377: LD_INT 0
47379: PPUSH
47380: CALL_OW 1
47384: ST_TO_ADDR
47385: GO 47359
47387: POP
47388: POP
// end ;
47389: LD_VAR 0 1
47393: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
47394: LD_INT 0
47396: PPUSH
47397: PPUSH
47398: PPUSH
47399: PPUSH
47400: PPUSH
47401: PPUSH
47402: PPUSH
47403: PPUSH
47404: PPUSH
47405: PPUSH
47406: PPUSH
47407: PPUSH
47408: PPUSH
47409: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
47410: LD_ADDR_VAR 0 14
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: LD_INT 5
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// for i in gameTypes do
47433: LD_ADDR_VAR 0 2
47437: PUSH
47438: LD_VAR 0 14
47442: PUSH
47443: FOR_IN
47444: IFFALSE 47453
// disable ( i ) ;
47446: LD_VAR 0 2
47450: DISABLE_MARKED
47451: GO 47443
47453: POP
47454: POP
// if Multiplayer then
47455: LD_OWVAR 4
47459: IFFALSE 47643
// begin mpGameType := mp_game_type ;
47461: LD_ADDR_EXP 5
47465: PUSH
47466: LD_OWVAR 6
47470: ST_TO_ADDR
// your_side := mp_player_side ;
47471: LD_ADDR_OWVAR 2
47475: PUSH
47476: LD_OWVAR 7
47480: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47481: LD_ADDR_EXP 9
47485: PUSH
47486: LD_OWVAR 17
47490: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47491: LD_ADDR_EXP 10
47495: PUSH
47496: LD_OWVAR 15
47500: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47501: LD_ADDR_EXP 11
47505: PUSH
47506: LD_OWVAR 16
47510: ST_TO_ADDR
// mpTeams := mp_teams ;
47511: LD_ADDR_EXP 12
47515: PUSH
47516: LD_OWVAR 12
47520: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47521: LD_ADDR_VAR 0 2
47525: PUSH
47526: DOUBLE
47527: LD_INT 1
47529: DEC
47530: ST_TO_ADDR
47531: LD_EXP 6
47535: PPUSH
47536: CALL 5732 0 1
47540: PUSH
47541: FOR_TO
47542: IFFALSE 47618
// begin setting := mpGameSettingsKeys [ i ] ;
47544: LD_ADDR_VAR 0 12
47548: PUSH
47549: LD_EXP 6
47553: PUSH
47554: LD_VAR 0 2
47558: ARRAY
47559: ST_TO_ADDR
// if setting then
47560: LD_VAR 0 12
47564: IFFALSE 47616
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47566: LD_ADDR_EXP 8
47570: PUSH
47571: LD_EXP 8
47575: PPUSH
47576: LD_VAR 0 2
47580: PPUSH
47581: LD_EXP 7
47585: PUSH
47586: LD_VAR 0 2
47590: ARRAY
47591: PUSH
47592: LD_VAR 0 2
47596: PUSH
47597: LD_INT 1
47599: MINUS
47600: PPUSH
47601: CALL_OW 426
47605: PUSH
47606: LD_INT 1
47608: PLUS
47609: ARRAY
47610: PPUSH
47611: CALL_OW 1
47615: ST_TO_ADDR
// end ;
47616: GO 47541
47618: POP
47619: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47620: LD_ADDR_EXP 13
47624: PUSH
47625: LD_EXP 10
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: DIFF
47636: PUSH
47637: LD_INT 1
47639: GREATER
47640: ST_TO_ADDR
// end else
47641: GO 47643
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47643: LD_EXP 5
47647: PPUSH
47648: CALL 852 0 1
// if Count ( mpMarkedAreas ) then
47652: LD_EXP 20
47656: PPUSH
47657: CALL 5732 0 1
47661: IFFALSE 47692
// begin for i in mpMarkedAreas do
47663: LD_ADDR_VAR 0 2
47667: PUSH
47668: LD_EXP 20
47672: PUSH
47673: FOR_IN
47674: IFFALSE 47690
// SetAreaMapShow ( i , 0 ) ;
47676: LD_VAR 0 2
47680: PPUSH
47681: LD_INT 0
47683: PPUSH
47684: CALL_OW 424
47688: GO 47673
47690: POP
47691: POP
// end ; for i := 1 to 8 do
47692: LD_ADDR_VAR 0 2
47696: PUSH
47697: DOUBLE
47698: LD_INT 1
47700: DEC
47701: ST_TO_ADDR
47702: LD_INT 8
47704: PUSH
47705: FOR_TO
47706: IFFALSE 49042
// begin if not mpSidePositions [ i ] then
47708: LD_EXP 9
47712: PUSH
47713: LD_VAR 0 2
47717: ARRAY
47718: NOT
47719: IFFALSE 47723
// continue ;
47721: GO 47705
// side := i ;
47723: LD_ADDR_VAR 0 7
47727: PUSH
47728: LD_VAR 0 2
47732: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47733: LD_ADDR_VAR 0 9
47737: PUSH
47738: LD_EXP 11
47742: PUSH
47743: LD_VAR 0 2
47747: ARRAY
47748: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47749: LD_ADDR_VAR 0 8
47753: PUSH
47754: LD_EXP 9
47758: PUSH
47759: LD_VAR 0 2
47763: ARRAY
47764: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47765: LD_EXP 14
47769: PPUSH
47770: CALL 5732 0 1
47774: IFFALSE 47851
// begin for j in mpOilDeposits [ pos ] do
47776: LD_ADDR_VAR 0 3
47780: PUSH
47781: LD_EXP 14
47785: PUSH
47786: LD_VAR 0 8
47790: ARRAY
47791: PUSH
47792: FOR_IN
47793: IFFALSE 47849
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47795: LD_VAR 0 3
47799: PUSH
47800: LD_INT 1
47802: ARRAY
47803: PPUSH
47804: LD_VAR 0 3
47808: PUSH
47809: LD_INT 2
47811: ARRAY
47812: PPUSH
47813: LD_INT 2
47815: PPUSH
47816: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47820: LD_VAR 0 3
47824: PUSH
47825: LD_INT 1
47827: ARRAY
47828: PPUSH
47829: LD_VAR 0 3
47833: PUSH
47834: LD_INT 2
47836: ARRAY
47837: PPUSH
47838: LD_VAR 0 7
47842: PPUSH
47843: CALL_OW 441
// end ;
47847: GO 47792
47849: POP
47850: POP
// end ; if Count ( mpSibDeposits ) then
47851: LD_EXP 15
47855: PPUSH
47856: CALL 5732 0 1
47860: IFFALSE 47937
// begin for j in mpSibDeposits [ pos ] do
47862: LD_ADDR_VAR 0 3
47866: PUSH
47867: LD_EXP 15
47871: PUSH
47872: LD_VAR 0 8
47876: ARRAY
47877: PUSH
47878: FOR_IN
47879: IFFALSE 47935
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47881: LD_VAR 0 3
47885: PUSH
47886: LD_INT 1
47888: ARRAY
47889: PPUSH
47890: LD_VAR 0 3
47894: PUSH
47895: LD_INT 2
47897: ARRAY
47898: PPUSH
47899: LD_INT 3
47901: PPUSH
47902: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47906: LD_VAR 0 3
47910: PUSH
47911: LD_INT 1
47913: ARRAY
47914: PPUSH
47915: LD_VAR 0 3
47919: PUSH
47920: LD_INT 2
47922: ARRAY
47923: PPUSH
47924: LD_VAR 0 7
47928: PPUSH
47929: CALL_OW 441
// end ;
47933: GO 47878
47935: POP
47936: POP
// end ; InitBc ;
47937: CALL_OW 21
// InitUc ;
47941: CALL_OW 18
// uc_side := side ;
47945: LD_ADDR_OWVAR 20
47949: PUSH
47950: LD_VAR 0 7
47954: ST_TO_ADDR
// uc_nation := nation ;
47955: LD_ADDR_OWVAR 21
47959: PUSH
47960: LD_VAR 0 9
47964: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47965: LD_EXP 24
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: GREATER
47974: IFFALSE 48133
// begin x := mpStartPos [ pos ] [ 1 ] ;
47976: LD_ADDR_VAR 0 5
47980: PUSH
47981: LD_EXP 23
47985: PUSH
47986: LD_VAR 0 8
47990: ARRAY
47991: PUSH
47992: LD_INT 1
47994: ARRAY
47995: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47996: LD_ADDR_VAR 0 6
48000: PUSH
48001: LD_EXP 23
48005: PUSH
48006: LD_VAR 0 8
48010: ARRAY
48011: PUSH
48012: LD_INT 2
48014: ARRAY
48015: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
48016: LD_VAR 0 5
48020: PPUSH
48021: LD_VAR 0 6
48025: PPUSH
48026: LD_INT 12
48028: PPUSH
48029: LD_INT 2
48031: PPUSH
48032: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
48036: LD_ADDR_EXP 25
48040: PUSH
48041: LD_EXP 25
48045: PPUSH
48046: LD_VAR 0 7
48050: PPUSH
48051: LD_VAR 0 7
48055: PPUSH
48056: LD_VAR 0 5
48060: PPUSH
48061: LD_VAR 0 6
48065: PPUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 100
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 70
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: LD_INT 40
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 10
48098: PUSH
48099: LD_INT 25
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 20
48108: PUSH
48109: LD_INT 100
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: PPUSH
48123: CALL_OW 418
48127: PPUSH
48128: CALL_OW 1
48132: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
48133: LD_EXP 16
48137: PPUSH
48138: CALL 5732 0 1
48142: IFFALSE 48326
// begin if mpGameType = GameTypeSurvival then
48144: LD_EXP 5
48148: PUSH
48149: LD_INT 2
48151: EQUAL
48152: IFFALSE 48172
// begin bc_level := 10 ;
48154: LD_ADDR_OWVAR 43
48158: PUSH
48159: LD_INT 10
48161: ST_TO_ADDR
// bc_type := b_warehouse ;
48162: LD_ADDR_OWVAR 42
48166: PUSH
48167: LD_INT 1
48169: ST_TO_ADDR
// end else
48170: GO 48188
// begin bc_level := 0 ;
48172: LD_ADDR_OWVAR 43
48176: PUSH
48177: LD_INT 0
48179: ST_TO_ADDR
// bc_type := b_depot ;
48180: LD_ADDR_OWVAR 42
48184: PUSH
48185: LD_INT 0
48187: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
48188: LD_ADDR_VAR 0 4
48192: PUSH
48193: LD_EXP 16
48197: PUSH
48198: LD_VAR 0 8
48202: ARRAY
48203: PUSH
48204: LD_INT 1
48206: ARRAY
48207: PPUSH
48208: LD_EXP 16
48212: PUSH
48213: LD_VAR 0 8
48217: ARRAY
48218: PUSH
48219: LD_INT 2
48221: ARRAY
48222: PPUSH
48223: LD_EXP 16
48227: PUSH
48228: LD_VAR 0 8
48232: ARRAY
48233: PUSH
48234: LD_INT 3
48236: ARRAY
48237: PPUSH
48238: CALL_OW 47
48242: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
48243: LD_VAR 0 4
48247: PPUSH
48248: LD_STRING @
48250: PUSH
48251: LD_VAR 0 7
48255: STR
48256: PPUSH
48257: CALL_OW 500
// if Count ( mpStartingResources ) then
48261: LD_EXP 17
48265: PPUSH
48266: CALL 5732 0 1
48270: IFFALSE 48324
// begin for j := 1 to mpStartingResources do
48272: LD_ADDR_VAR 0 3
48276: PUSH
48277: DOUBLE
48278: LD_INT 1
48280: DEC
48281: ST_TO_ADDR
48282: LD_EXP 17
48286: PUSH
48287: FOR_TO
48288: IFFALSE 48322
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
48290: LD_VAR 0 4
48294: PPUSH
48295: CALL_OW 274
48299: PPUSH
48300: LD_VAR 0 3
48304: PPUSH
48305: LD_EXP 17
48309: PUSH
48310: LD_VAR 0 3
48314: ARRAY
48315: PPUSH
48316: CALL_OW 277
48320: GO 48287
48322: POP
48323: POP
// end ; end else
48324: GO 48533
// if Count ( mpStartingResources ) then
48326: LD_EXP 17
48330: PPUSH
48331: CALL 5732 0 1
48335: IFFALSE 48533
// begin x := mpStartPos [ pos ] [ 1 ] ;
48337: LD_ADDR_VAR 0 5
48341: PUSH
48342: LD_EXP 23
48346: PUSH
48347: LD_VAR 0 8
48351: ARRAY
48352: PUSH
48353: LD_INT 1
48355: ARRAY
48356: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
48357: LD_ADDR_VAR 0 6
48361: PUSH
48362: LD_EXP 23
48366: PUSH
48367: LD_VAR 0 8
48371: ARRAY
48372: PUSH
48373: LD_INT 2
48375: ARRAY
48376: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48377: LD_ADDR_VAR 0 3
48381: PUSH
48382: DOUBLE
48383: LD_INT 1
48385: DEC
48386: ST_TO_ADDR
48387: LD_EXP 17
48391: PUSH
48392: FOR_TO
48393: IFFALSE 48531
// begin resources := mpStartingResources [ j ] ;
48395: LD_ADDR_VAR 0 13
48399: PUSH
48400: LD_EXP 17
48404: PUSH
48405: LD_VAR 0 3
48409: ARRAY
48410: ST_TO_ADDR
// if resources = 0 then
48411: LD_VAR 0 13
48415: PUSH
48416: LD_INT 0
48418: EQUAL
48419: IFFALSE 48423
// continue ;
48421: GO 48392
// repeat if resources >= 50 then
48423: LD_VAR 0 13
48427: PUSH
48428: LD_INT 50
48430: GREATEREQUAL
48431: IFFALSE 48477
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48433: LD_VAR 0 3
48437: PPUSH
48438: LD_INT 5
48440: PPUSH
48441: LD_VAR 0 5
48445: PPUSH
48446: LD_VAR 0 6
48450: PPUSH
48451: LD_INT 6
48453: PPUSH
48454: LD_INT 0
48456: PPUSH
48457: CALL_OW 60
// resources := resources - 50 ;
48461: LD_ADDR_VAR 0 13
48465: PUSH
48466: LD_VAR 0 13
48470: PUSH
48471: LD_INT 50
48473: MINUS
48474: ST_TO_ADDR
// end else
48475: GO 48519
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48477: LD_VAR 0 3
48481: PPUSH
48482: LD_VAR 0 13
48486: PUSH
48487: LD_INT 10
48489: DIV
48490: PPUSH
48491: LD_VAR 0 5
48495: PPUSH
48496: LD_VAR 0 6
48500: PPUSH
48501: LD_INT 6
48503: PPUSH
48504: LD_INT 0
48506: PPUSH
48507: CALL_OW 60
// resources := 0 ;
48511: LD_ADDR_VAR 0 13
48515: PUSH
48516: LD_INT 0
48518: ST_TO_ADDR
// end ; until resources <= 0 ;
48519: LD_VAR 0 13
48523: PUSH
48524: LD_INT 0
48526: LESSEQUAL
48527: IFFALSE 48423
// end ;
48529: GO 48392
48531: POP
48532: POP
// end ; if Count ( mpBuildings ) then
48533: LD_EXP 19
48537: PPUSH
48538: CALL 5732 0 1
48542: IFFALSE 48620
// begin for j in mpBuildings [ pos ] do
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: LD_EXP 19
48553: PUSH
48554: LD_VAR 0 8
48558: ARRAY
48559: PUSH
48560: FOR_IN
48561: IFFALSE 48618
// begin bc_level := 0 ;
48563: LD_ADDR_OWVAR 43
48567: PUSH
48568: LD_INT 0
48570: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48571: LD_ADDR_OWVAR 42
48575: PUSH
48576: LD_VAR 0 3
48580: PUSH
48581: LD_INT 1
48583: ARRAY
48584: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48585: LD_VAR 0 3
48589: PUSH
48590: LD_INT 2
48592: ARRAY
48593: PPUSH
48594: LD_VAR 0 3
48598: PUSH
48599: LD_INT 3
48601: ARRAY
48602: PPUSH
48603: LD_VAR 0 3
48607: PUSH
48608: LD_INT 4
48610: ARRAY
48611: PPUSH
48612: CALL_OW 47
// end ;
48616: GO 48560
48618: POP
48619: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48620: LD_EXP 28
48624: IFFALSE 48644
48626: PUSH
48627: LD_INT 20
48629: PPUSH
48630: LD_VAR 0 7
48634: PPUSH
48635: CALL_OW 321
48639: PUSH
48640: LD_INT 1
48642: EQUAL
48643: AND
48644: IFFALSE 48661
// SetTech ( tech_SibDet , side , state_researched ) ;
48646: LD_INT 20
48648: PPUSH
48649: LD_VAR 0 7
48653: PPUSH
48654: LD_INT 2
48656: PPUSH
48657: CALL_OW 322
// if not mpArtifacts then
48661: LD_EXP 46
48665: NOT
48666: IFFALSE 48683
// SetTech ( tech_artifact , side , state_disabled ) ;
48668: LD_INT 24
48670: PPUSH
48671: LD_VAR 0 7
48675: PPUSH
48676: LD_INT 0
48678: PPUSH
48679: CALL_OW 322
// if mpSibBomb = 1 then
48683: LD_EXP 30
48687: PUSH
48688: LD_INT 1
48690: EQUAL
48691: IFFALSE 48710
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48693: LD_INT 25
48695: PPUSH
48696: LD_VAR 0 7
48700: PPUSH
48701: LD_INT 1
48703: PPUSH
48704: CALL_OW 322
// end else
48708: GO 48725
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48710: LD_INT 25
48712: PPUSH
48713: LD_VAR 0 7
48717: PPUSH
48718: LD_INT 0
48720: PPUSH
48721: CALL_OW 322
// end ; if mpVehicles then
48725: LD_EXP 38
48729: IFFALSE 48828
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48731: LD_ADDR_VAR 0 3
48735: PUSH
48736: LD_VAR 0 7
48740: PPUSH
48741: LD_VAR 0 9
48745: PPUSH
48746: LD_EXP 38
48750: PPUSH
48751: CALL 49952 0 3
48755: PUSH
48756: FOR_IN
48757: IFFALSE 48826
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48759: LD_VAR 0 3
48763: PPUSH
48764: LD_INT 0
48766: PPUSH
48767: LD_INT 5
48769: PPUSH
48770: CALL_OW 12
48774: PPUSH
48775: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48779: LD_VAR 0 3
48783: PPUSH
48784: LD_EXP 23
48788: PUSH
48789: LD_VAR 0 8
48793: ARRAY
48794: PUSH
48795: LD_INT 1
48797: ARRAY
48798: PPUSH
48799: LD_EXP 23
48803: PUSH
48804: LD_VAR 0 8
48808: ARRAY
48809: PUSH
48810: LD_INT 2
48812: ARRAY
48813: PPUSH
48814: LD_INT 12
48816: PPUSH
48817: LD_INT 0
48819: PPUSH
48820: CALL_OW 50
// end ;
48824: GO 48756
48826: POP
48827: POP
// end ; uc_nation := nation ;
48828: LD_ADDR_OWVAR 21
48832: PUSH
48833: LD_VAR 0 9
48837: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48838: LD_ADDR_VAR 0 11
48842: PUSH
48843: LD_VAR 0 7
48847: PPUSH
48848: LD_VAR 0 9
48852: PPUSH
48853: LD_EXP 26
48857: PPUSH
48858: LD_EXP 27
48862: PPUSH
48863: CALL 49454 0 4
48867: ST_TO_ADDR
// for j in team do
48868: LD_ADDR_VAR 0 3
48872: PUSH
48873: LD_VAR 0 11
48877: PUSH
48878: FOR_IN
48879: IFFALSE 48928
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48881: LD_VAR 0 3
48885: PPUSH
48886: LD_EXP 23
48890: PUSH
48891: LD_VAR 0 8
48895: ARRAY
48896: PUSH
48897: LD_INT 1
48899: ARRAY
48900: PPUSH
48901: LD_EXP 23
48905: PUSH
48906: LD_VAR 0 8
48910: ARRAY
48911: PUSH
48912: LD_INT 2
48914: ARRAY
48915: PPUSH
48916: LD_INT 12
48918: PPUSH
48919: LD_INT 0
48921: PPUSH
48922: CALL_OW 50
48926: GO 48878
48928: POP
48929: POP
// if mpApemans then
48930: LD_EXP 32
48934: IFFALSE 49040
// begin for j := 1 to mpApemans do
48936: LD_ADDR_VAR 0 3
48940: PUSH
48941: DOUBLE
48942: LD_INT 1
48944: DEC
48945: ST_TO_ADDR
48946: LD_EXP 32
48950: PUSH
48951: FOR_TO
48952: IFFALSE 49038
// begin PrepareApeman ( - 5 ) ;
48954: LD_INT 5
48956: NEG
48957: PPUSH
48958: CALL 37791 0 1
// ape := CreateHuman ;
48962: LD_ADDR_VAR 0 10
48966: PUSH
48967: CALL_OW 44
48971: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48972: LD_ADDR_EXP 34
48976: PUSH
48977: LD_EXP 34
48981: PPUSH
48982: LD_VAR 0 8
48986: PPUSH
48987: LD_EXP 34
48991: PUSH
48992: LD_VAR 0 8
48996: ARRAY
48997: PPUSH
48998: LD_VAR 0 10
49002: PPUSH
49003: CALL 41664 0 2
49007: PPUSH
49008: CALL_OW 1
49012: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
49013: LD_VAR 0 10
49017: PPUSH
49018: LD_EXP 33
49022: PUSH
49023: LD_VAR 0 8
49027: ARRAY
49028: PPUSH
49029: LD_INT 0
49031: PPUSH
49032: CALL_OW 49
// end ;
49036: GO 48951
49038: POP
49039: POP
// end ; end ;
49040: GO 47705
49042: POP
49043: POP
// if not mpTeamGame then
49044: LD_EXP 13
49048: NOT
49049: IFFALSE 49147
// begin for i := 1 to 8 do
49051: LD_ADDR_VAR 0 2
49055: PUSH
49056: DOUBLE
49057: LD_INT 1
49059: DEC
49060: ST_TO_ADDR
49061: LD_INT 8
49063: PUSH
49064: FOR_TO
49065: IFFALSE 49143
// for j := 1 to 8 do
49067: LD_ADDR_VAR 0 3
49071: PUSH
49072: DOUBLE
49073: LD_INT 1
49075: DEC
49076: ST_TO_ADDR
49077: LD_INT 8
49079: PUSH
49080: FOR_TO
49081: IFFALSE 49139
// if i <> j then
49083: LD_VAR 0 2
49087: PUSH
49088: LD_VAR 0 3
49092: NONEQUAL
49093: IFFALSE 49117
// SetAttitude ( i , j , att_neutral , true ) else
49095: LD_VAR 0 2
49099: PPUSH
49100: LD_VAR 0 3
49104: PPUSH
49105: LD_INT 0
49107: PPUSH
49108: LD_INT 1
49110: PPUSH
49111: CALL_OW 80
49115: GO 49137
// SetAttitude ( i , j , att_friend , true ) ;
49117: LD_VAR 0 2
49121: PPUSH
49122: LD_VAR 0 3
49126: PPUSH
49127: LD_INT 1
49129: PPUSH
49130: LD_INT 1
49132: PPUSH
49133: CALL_OW 80
49137: GO 49080
49139: POP
49140: POP
49141: GO 49064
49143: POP
49144: POP
// end else
49145: GO 49322
// begin if mpSharedVision then
49147: LD_EXP 18
49151: IFFALSE 49216
// begin for i in mpTeams do
49153: LD_ADDR_VAR 0 2
49157: PUSH
49158: LD_EXP 12
49162: PUSH
49163: FOR_IN
49164: IFFALSE 49214
// for j := 2 to i do
49166: LD_ADDR_VAR 0 3
49170: PUSH
49171: DOUBLE
49172: LD_INT 2
49174: DEC
49175: ST_TO_ADDR
49176: LD_VAR 0 2
49180: PUSH
49181: FOR_TO
49182: IFFALSE 49210
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
49184: LD_VAR 0 2
49188: PUSH
49189: LD_VAR 0 3
49193: ARRAY
49194: PPUSH
49195: LD_VAR 0 2
49199: PUSH
49200: LD_INT 1
49202: ARRAY
49203: PPUSH
49204: CALL_OW 343
49208: GO 49181
49210: POP
49211: POP
49212: GO 49163
49214: POP
49215: POP
// end ; for i := 1 to 8 do
49216: LD_ADDR_VAR 0 2
49220: PUSH
49221: DOUBLE
49222: LD_INT 1
49224: DEC
49225: ST_TO_ADDR
49226: LD_INT 8
49228: PUSH
49229: FOR_TO
49230: IFFALSE 49320
// for j := 1 to 8 do
49232: LD_ADDR_VAR 0 3
49236: PUSH
49237: DOUBLE
49238: LD_INT 1
49240: DEC
49241: ST_TO_ADDR
49242: LD_INT 8
49244: PUSH
49245: FOR_TO
49246: IFFALSE 49316
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
49248: LD_EXP 10
49252: PUSH
49253: LD_VAR 0 2
49257: ARRAY
49258: PUSH
49259: LD_EXP 10
49263: PUSH
49264: LD_VAR 0 3
49268: ARRAY
49269: EQUAL
49270: IFFALSE 49294
// SetAttitude ( i , j , att_friend , true ) else
49272: LD_VAR 0 2
49276: PPUSH
49277: LD_VAR 0 3
49281: PPUSH
49282: LD_INT 1
49284: PPUSH
49285: LD_INT 1
49287: PPUSH
49288: CALL_OW 80
49292: GO 49314
// SetAttitude ( i , j , att_enemy , true ) ;
49294: LD_VAR 0 2
49298: PPUSH
49299: LD_VAR 0 3
49303: PPUSH
49304: LD_INT 2
49306: PPUSH
49307: LD_INT 1
49309: PPUSH
49310: CALL_OW 80
49314: GO 49245
49316: POP
49317: POP
49318: GO 49229
49320: POP
49321: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49322: LD_ADDR_OWVAR 71
49326: PUSH
49327: LD_EXP 11
49331: PUSH
49332: LD_OWVAR 2
49336: ARRAY
49337: ST_TO_ADDR
// if IAmSpec then
49338: CALL_OW 531
49342: IFFALSE 49383
// begin FogOff ( true ) ;
49344: LD_INT 1
49346: PPUSH
49347: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49351: LD_EXP 31
49355: PUSH
49356: LD_INT 1
49358: ARRAY
49359: PUSH
49360: LD_INT 2
49362: DIV
49363: PPUSH
49364: LD_EXP 31
49368: PUSH
49369: LD_INT 2
49371: ARRAY
49372: PUSH
49373: LD_INT 2
49375: DIV
49376: PPUSH
49377: CALL_OW 86
// end else
49381: GO 49429
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49383: LD_EXP 23
49387: PUSH
49388: LD_EXP 9
49392: PUSH
49393: LD_OWVAR 2
49397: ARRAY
49398: ARRAY
49399: PUSH
49400: LD_INT 1
49402: ARRAY
49403: PPUSH
49404: LD_EXP 23
49408: PUSH
49409: LD_EXP 9
49413: PUSH
49414: LD_OWVAR 2
49418: ARRAY
49419: ARRAY
49420: PUSH
49421: LD_INT 2
49423: ARRAY
49424: PPUSH
49425: CALL_OW 86
// end ; BeginBuildUp ;
49429: CALL 50485 0 0
// enable ( mpActive ) ;
49433: LD_INT 100
49435: ENABLE_MARKED
// enable ( mpGameType ) ;
49436: LD_EXP 5
49440: ENABLE_MARKED
// mpGameActive := true ;
49441: LD_ADDR_EXP 41
49445: PUSH
49446: LD_INT 1
49448: ST_TO_ADDR
// end ;
49449: LD_VAR 0 1
49453: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49454: LD_INT 0
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
// result := [ ] ;
49460: LD_ADDR_VAR 0 5
49464: PUSH
49465: EMPTY
49466: ST_TO_ADDR
// class := class_soldier ;
49467: LD_ADDR_VAR 0 8
49471: PUSH
49472: LD_INT 1
49474: ST_TO_ADDR
// uc_side := side ;
49475: LD_ADDR_OWVAR 20
49479: PUSH
49480: LD_VAR 0 1
49484: ST_TO_ADDR
// uc_nation := nation ;
49485: LD_ADDR_OWVAR 21
49489: PUSH
49490: LD_VAR 0 2
49494: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49495: LD_ADDR_OWVAR 26
49499: PUSH
49500: LD_OWVAR 19
49504: PUSH
49505: LD_VAR 0 1
49509: ARRAY
49510: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49511: LD_INT 1
49513: PPUSH
49514: LD_INT 2
49516: PPUSH
49517: CALL_OW 12
49521: PPUSH
49522: LD_VAR 0 8
49526: PPUSH
49527: LD_VAR 0 4
49531: PUSH
49532: LD_INT 2
49534: PLUS
49535: PPUSH
49536: CALL_OW 380
// hc_importance := 105 ;
49540: LD_ADDR_OWVAR 32
49544: PUSH
49545: LD_INT 105
49547: ST_TO_ADDR
// if Multiplayer then
49548: LD_OWVAR 4
49552: IFFALSE 49592
// begin hc_gallery := MULTIAVATARS ;
49554: LD_ADDR_OWVAR 33
49558: PUSH
49559: LD_STRING MULTIAVATARS
49561: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49562: LD_ADDR_OWVAR 34
49566: PUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: CALL_OW 525
49576: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49577: LD_ADDR_OWVAR 27
49581: PUSH
49582: LD_VAR 0 1
49586: PPUSH
49587: CALL_OW 526
49591: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49592: LD_ADDR_VAR 0 5
49596: PUSH
49597: LD_VAR 0 5
49601: PPUSH
49602: CALL_OW 44
49606: PPUSH
49607: CALL 41664 0 2
49611: ST_TO_ADDR
// if mpTeamPreset then
49612: LD_LOC 1
49616: IFFALSE 49712
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49618: LD_LOC 1
49622: PUSH
49623: LD_INT 1
49625: ARRAY
49626: PPUSH
49627: LD_VAR 0 5
49631: PUSH
49632: LD_VAR 0 5
49636: ARRAY
49637: PPUSH
49638: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49642: LD_VAR 0 5
49646: PUSH
49647: LD_VAR 0 5
49651: ARRAY
49652: PPUSH
49653: LD_INT 1
49655: PPUSH
49656: LD_LOC 1
49660: PUSH
49661: LD_INT 1
49663: ARRAY
49664: PPUSH
49665: LD_INT 1
49667: PPUSH
49668: CALL_OW 260
49672: PPUSH
49673: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49677: LD_VAR 0 5
49681: PUSH
49682: LD_VAR 0 5
49686: ARRAY
49687: PPUSH
49688: LD_INT 2
49690: PPUSH
49691: LD_LOC 1
49695: PUSH
49696: LD_INT 1
49698: ARRAY
49699: PPUSH
49700: LD_INT 2
49702: PPUSH
49703: CALL_OW 260
49707: PPUSH
49708: CALL_OW 239
// end ; InitHc_All ( ) ;
49712: CALL_OW 584
// class := 2 ;
49716: LD_ADDR_VAR 0 8
49720: PUSH
49721: LD_INT 2
49723: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49724: LD_ADDR_VAR 0 6
49728: PUSH
49729: DOUBLE
49730: LD_INT 1
49732: DEC
49733: ST_TO_ADDR
49734: LD_VAR 0 3
49738: PUSH
49739: LD_INT 1
49741: MINUS
49742: PUSH
49743: FOR_TO
49744: IFFALSE 49928
// begin PrepareHuman ( false , class , skill ) ;
49746: LD_INT 0
49748: PPUSH
49749: LD_VAR 0 8
49753: PPUSH
49754: LD_VAR 0 4
49758: PPUSH
49759: CALL_OW 380
// un := CreateHuman ;
49763: LD_ADDR_VAR 0 7
49767: PUSH
49768: CALL_OW 44
49772: ST_TO_ADDR
// result := Join ( result , un ) ;
49773: LD_ADDR_VAR 0 5
49777: PUSH
49778: LD_VAR 0 5
49782: PPUSH
49783: LD_VAR 0 7
49787: PPUSH
49788: CALL 41664 0 2
49792: ST_TO_ADDR
// if mpTeamPreset then
49793: LD_LOC 1
49797: IFFALSE 49893
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49799: LD_LOC 1
49803: PUSH
49804: LD_VAR 0 6
49808: PUSH
49809: LD_INT 1
49811: PLUS
49812: ARRAY
49813: PPUSH
49814: LD_VAR 0 7
49818: PPUSH
49819: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49823: LD_VAR 0 7
49827: PPUSH
49828: LD_INT 1
49830: PPUSH
49831: LD_LOC 1
49835: PUSH
49836: LD_VAR 0 6
49840: PUSH
49841: LD_INT 1
49843: PLUS
49844: ARRAY
49845: PPUSH
49846: LD_INT 1
49848: PPUSH
49849: CALL_OW 260
49853: PPUSH
49854: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49858: LD_VAR 0 7
49862: PPUSH
49863: LD_INT 2
49865: PPUSH
49866: LD_LOC 1
49870: PUSH
49871: LD_VAR 0 6
49875: PUSH
49876: LD_INT 1
49878: PLUS
49879: ARRAY
49880: PPUSH
49881: LD_INT 2
49883: PPUSH
49884: CALL_OW 260
49888: PPUSH
49889: CALL_OW 239
// end ; class := Inc ( class ) ;
49893: LD_ADDR_VAR 0 8
49897: PUSH
49898: LD_VAR 0 8
49902: PPUSH
49903: CALL 43037 0 1
49907: ST_TO_ADDR
// if class = 5 then
49908: LD_VAR 0 8
49912: PUSH
49913: LD_INT 5
49915: EQUAL
49916: IFFALSE 49926
// class := 1 ;
49918: LD_ADDR_VAR 0 8
49922: PUSH
49923: LD_INT 1
49925: ST_TO_ADDR
// end ;
49926: GO 49743
49928: POP
49929: POP
// if not mpTeamPreset then
49930: LD_LOC 1
49934: NOT
49935: IFFALSE 49947
// mpTeamPreset := result ;
49937: LD_ADDR_LOC 1
49941: PUSH
49942: LD_VAR 0 5
49946: ST_TO_ADDR
// end ;
49947: LD_VAR 0 5
49951: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49952: LD_INT 0
49954: PPUSH
49955: PPUSH
// result := [ ] ;
49956: LD_ADDR_VAR 0 4
49960: PUSH
49961: EMPTY
49962: ST_TO_ADDR
// if not vehicles then
49963: LD_VAR 0 3
49967: NOT
49968: IFFALSE 49972
// exit ;
49970: GO 50186
// for i := 1 to vehicles [ nation ] do
49972: LD_ADDR_VAR 0 5
49976: PUSH
49977: DOUBLE
49978: LD_INT 1
49980: DEC
49981: ST_TO_ADDR
49982: LD_VAR 0 3
49986: PUSH
49987: LD_VAR 0 2
49991: ARRAY
49992: PUSH
49993: FOR_TO
49994: IFFALSE 50184
// begin uc_side := side ;
49996: LD_ADDR_OWVAR 20
50000: PUSH
50001: LD_VAR 0 1
50005: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
50006: LD_VAR 0 3
50010: PUSH
50011: LD_VAR 0 2
50015: ARRAY
50016: PUSH
50017: LD_VAR 0 5
50021: ARRAY
50022: PPUSH
50023: CALL 5732 0 1
50027: PUSH
50028: LD_INT 4
50030: GREATER
50031: IFFALSE 50061
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
50033: LD_ADDR_OWVAR 21
50037: PUSH
50038: LD_VAR 0 3
50042: PUSH
50043: LD_VAR 0 2
50047: ARRAY
50048: PUSH
50049: LD_VAR 0 5
50053: ARRAY
50054: PUSH
50055: LD_INT 5
50057: ARRAY
50058: ST_TO_ADDR
50059: GO 50071
// uc_nation := nation ;
50061: LD_ADDR_OWVAR 21
50065: PUSH
50066: LD_VAR 0 2
50070: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
50071: LD_VAR 0 3
50075: PUSH
50076: LD_VAR 0 2
50080: ARRAY
50081: PUSH
50082: LD_VAR 0 5
50086: ARRAY
50087: PUSH
50088: LD_INT 1
50090: ARRAY
50091: PPUSH
50092: LD_VAR 0 3
50096: PUSH
50097: LD_VAR 0 2
50101: ARRAY
50102: PUSH
50103: LD_VAR 0 5
50107: ARRAY
50108: PUSH
50109: LD_INT 2
50111: ARRAY
50112: PPUSH
50113: LD_VAR 0 3
50117: PUSH
50118: LD_VAR 0 2
50122: ARRAY
50123: PUSH
50124: LD_VAR 0 5
50128: ARRAY
50129: PUSH
50130: LD_INT 3
50132: ARRAY
50133: PPUSH
50134: LD_VAR 0 3
50138: PUSH
50139: LD_VAR 0 2
50143: ARRAY
50144: PUSH
50145: LD_VAR 0 5
50149: ARRAY
50150: PUSH
50151: LD_INT 4
50153: ARRAY
50154: PPUSH
50155: LD_INT 80
50157: PPUSH
50158: CALL 8494 0 5
// result := Join ( result , CreateVehicle ) ;
50162: LD_ADDR_VAR 0 4
50166: PUSH
50167: LD_VAR 0 4
50171: PPUSH
50172: CALL_OW 45
50176: PPUSH
50177: CALL 41664 0 2
50181: ST_TO_ADDR
// end ;
50182: GO 49993
50184: POP
50185: POP
// end ;
50186: LD_VAR 0 4
50190: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
50191: LD_INT 0
50193: PPUSH
50194: PPUSH
// for i in mpBattleFlags do
50195: LD_ADDR_VAR 0 3
50199: PUSH
50200: LD_EXP 25
50204: PUSH
50205: FOR_IN
50206: IFFALSE 50283
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
50208: LD_VAR 0 3
50212: PPUSH
50213: LD_INT 1
50215: PUSH
50216: LD_VAR 0 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_VAR 0 1
50232: PUSH
50233: LD_REAL  7.00000000000000E-0001
50236: MUL
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: LD_VAR 0 1
50249: PUSH
50250: LD_REAL  4.00000000000000E-0001
50253: MUL
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 20
50261: PUSH
50262: LD_VAR 0 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: PPUSH
50277: CALL_OW 423
50281: GO 50205
50283: POP
50284: POP
// end ;
50285: LD_VAR 0 2
50289: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50290: LD_INT 100
50292: IFFALSE 50387
50294: GO 50296
50296: DISABLE
50297: LD_INT 0
50299: PPUSH
50300: PPUSH
// begin if mpBattleFlag <= 0 then
50301: LD_EXP 24
50305: PUSH
50306: LD_INT 0
50308: LESSEQUAL
50309: IFFALSE 50313
// exit ;
50311: GO 50387
// strength := 100 ;
50313: LD_ADDR_VAR 0 2
50317: PUSH
50318: LD_INT 100
50320: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50321: LD_EXP 24
50325: PPUSH
50326: CALL_OW 67
// strength := Dec ( strength ) ;
50330: LD_ADDR_VAR 0 2
50334: PUSH
50335: LD_VAR 0 2
50339: PPUSH
50340: CALL 43059 0 1
50344: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50345: LD_VAR 0 2
50349: PPUSH
50350: CALL 50191 0 1
// until not strength ;
50354: LD_VAR 0 2
50358: NOT
50359: IFFALSE 50321
// for i in mpBattleFlags do
50361: LD_ADDR_VAR 0 1
50365: PUSH
50366: LD_EXP 25
50370: PUSH
50371: FOR_IN
50372: IFFALSE 50385
// KillBattleFlag ( i ) ;
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 419
50383: GO 50371
50385: POP
50386: POP
// end ;
50387: PPOPN 2
50389: END
// every 0 0$1 marked mpActive do var side , tmp ;
50390: GO 50392
50392: DISABLE
50393: LD_INT 0
50395: PPUSH
50396: PPUSH
// begin if mpSibBomb <= 1 then
50397: LD_EXP 30
50401: PUSH
50402: LD_INT 1
50404: LESSEQUAL
50405: IFFALSE 50409
// exit ;
50407: GO 50482
// tmp := mpSibBomb ;
50409: LD_ADDR_VAR 0 2
50413: PUSH
50414: LD_EXP 30
50418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50419: LD_INT 35
50421: PPUSH
50422: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50426: LD_ADDR_VAR 0 2
50430: PUSH
50431: LD_VAR 0 2
50435: PUSH
50436: LD_INT 35
50438: MINUS
50439: ST_TO_ADDR
// until not tmp ;
50440: LD_VAR 0 2
50444: NOT
50445: IFFALSE 50419
// for side := 1 to 8 do
50447: LD_ADDR_VAR 0 1
50451: PUSH
50452: DOUBLE
50453: LD_INT 1
50455: DEC
50456: ST_TO_ADDR
50457: LD_INT 8
50459: PUSH
50460: FOR_TO
50461: IFFALSE 50480
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50463: LD_INT 25
50465: PPUSH
50466: LD_VAR 0 1
50470: PPUSH
50471: LD_INT 1
50473: PPUSH
50474: CALL_OW 322
50478: GO 50460
50480: POP
50481: POP
// end ;
50482: PPOPN 2
50484: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50485: LD_INT 0
50487: PPUSH
50488: PPUSH
50489: PPUSH
// mpBuildUpTimeDelay := 0 ;
50490: LD_ADDR_EXP 48
50494: PUSH
50495: LD_INT 0
50497: ST_TO_ADDR
// if not mpBuildUpTime then
50498: LD_EXP 22
50502: NOT
50503: IFFALSE 50507
// exit ;
50505: GO 50696
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50507: LD_ADDR_EXP 48
50511: PUSH
50512: LD_INT 8400
50514: PUSH
50515: LD_INT 2100
50517: PUSH
50518: LD_EXP 22
50522: MUL
50523: PLUS
50524: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50525: LD_ADDR_EXP 49
50529: PUSH
50530: LD_INT 1
50532: ST_TO_ADDR
// for i := 1 to 8 do
50533: LD_ADDR_VAR 0 2
50537: PUSH
50538: DOUBLE
50539: LD_INT 1
50541: DEC
50542: ST_TO_ADDR
50543: LD_INT 8
50545: PUSH
50546: FOR_TO
50547: IFFALSE 50694
// if mpSidePositions [ i ] then
50549: LD_EXP 9
50553: PUSH
50554: LD_VAR 0 2
50558: ARRAY
50559: IFFALSE 50692
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50561: LD_EXP 21
50565: PUSH
50566: LD_EXP 9
50570: PUSH
50571: LD_VAR 0 2
50575: ARRAY
50576: ARRAY
50577: PPUSH
50578: LD_INT 5
50580: PPUSH
50581: CALL_OW 424
// for j := 1 to 8 do
50585: LD_ADDR_VAR 0 3
50589: PUSH
50590: DOUBLE
50591: LD_INT 1
50593: DEC
50594: ST_TO_ADDR
50595: LD_INT 8
50597: PUSH
50598: FOR_TO
50599: IFFALSE 50690
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50601: LD_EXP 9
50605: PUSH
50606: LD_VAR 0 3
50610: ARRAY
50611: IFFALSE 50660
50613: PUSH
50614: LD_EXP 10
50618: PUSH
50619: LD_VAR 0 2
50623: ARRAY
50624: PUSH
50625: LD_EXP 10
50629: PUSH
50630: LD_VAR 0 3
50634: ARRAY
50635: NONEQUAL
50636: IFTRUE 50659
50638: PUSH
50639: LD_EXP 13
50643: NOT
50644: IFFALSE 50658
50646: PUSH
50647: LD_VAR 0 2
50651: PUSH
50652: LD_VAR 0 3
50656: NONEQUAL
50657: AND
50658: OR
50659: AND
50660: IFFALSE 50688
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50662: LD_VAR 0 3
50666: PPUSH
50667: LD_EXP 21
50671: PUSH
50672: LD_EXP 9
50676: PUSH
50677: LD_VAR 0 2
50681: ARRAY
50682: ARRAY
50683: PPUSH
50684: CALL_OW 333
50688: GO 50598
50690: POP
50691: POP
// end ;
50692: GO 50546
50694: POP
50695: POP
// end ;
50696: LD_VAR 0 1
50700: RET
// function EndBuildUp ; var i , j ; begin
50701: LD_INT 0
50703: PPUSH
50704: PPUSH
50705: PPUSH
// mpBuildUpTimeActive := false ;
50706: LD_ADDR_EXP 49
50710: PUSH
50711: LD_INT 0
50713: ST_TO_ADDR
// for i := 1 to 8 do
50714: LD_ADDR_VAR 0 2
50718: PUSH
50719: DOUBLE
50720: LD_INT 1
50722: DEC
50723: ST_TO_ADDR
50724: LD_INT 8
50726: PUSH
50727: FOR_TO
50728: IFFALSE 50875
// if mpSidePositions [ i ] then
50730: LD_EXP 9
50734: PUSH
50735: LD_VAR 0 2
50739: ARRAY
50740: IFFALSE 50873
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50742: LD_EXP 21
50746: PUSH
50747: LD_EXP 9
50751: PUSH
50752: LD_VAR 0 2
50756: ARRAY
50757: ARRAY
50758: PPUSH
50759: LD_INT 0
50761: PPUSH
50762: CALL_OW 424
// for j := 1 to 8 do
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: DOUBLE
50772: LD_INT 1
50774: DEC
50775: ST_TO_ADDR
50776: LD_INT 8
50778: PUSH
50779: FOR_TO
50780: IFFALSE 50871
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50782: LD_EXP 9
50786: PUSH
50787: LD_VAR 0 3
50791: ARRAY
50792: IFFALSE 50841
50794: PUSH
50795: LD_EXP 10
50799: PUSH
50800: LD_VAR 0 2
50804: ARRAY
50805: PUSH
50806: LD_EXP 10
50810: PUSH
50811: LD_VAR 0 3
50815: ARRAY
50816: NONEQUAL
50817: IFTRUE 50840
50819: PUSH
50820: LD_EXP 13
50824: NOT
50825: IFFALSE 50839
50827: PUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_VAR 0 3
50837: NONEQUAL
50838: AND
50839: OR
50840: AND
50841: IFFALSE 50869
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50843: LD_VAR 0 3
50847: PPUSH
50848: LD_EXP 21
50852: PUSH
50853: LD_EXP 9
50857: PUSH
50858: LD_VAR 0 2
50862: ARRAY
50863: ARRAY
50864: PPUSH
50865: CALL_OW 334
50869: GO 50779
50871: POP
50872: POP
// end ;
50873: GO 50727
50875: POP
50876: POP
// end ;
50877: LD_VAR 0 1
50881: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50882: LD_EXP 49
50886: IFFALSE 51065
50888: GO 50890
50890: DISABLE
50891: LD_INT 0
50893: PPUSH
50894: PPUSH
// begin for i := 1 to 8 do
50895: LD_ADDR_VAR 0 1
50899: PUSH
50900: DOUBLE
50901: LD_INT 1
50903: DEC
50904: ST_TO_ADDR
50905: LD_INT 8
50907: PUSH
50908: FOR_TO
50909: IFFALSE 51062
// if mpSidePositions [ i ] then
50911: LD_EXP 9
50915: PUSH
50916: LD_VAR 0 1
50920: ARRAY
50921: IFFALSE 51060
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50923: LD_ADDR_VAR 0 2
50927: PUSH
50928: LD_EXP 21
50932: PUSH
50933: LD_EXP 9
50937: PUSH
50938: LD_VAR 0 1
50942: ARRAY
50943: ARRAY
50944: PPUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 21
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 21
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 22
50975: PUSH
50976: LD_OWVAR 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PPUSH
50989: CALL_OW 70
50993: PUSH
50994: FOR_IN
50995: IFFALSE 51058
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50997: LD_EXP 10
51001: PUSH
51002: LD_VAR 0 1
51006: ARRAY
51007: PUSH
51008: LD_EXP 10
51012: PUSH
51013: LD_OWVAR 2
51017: ARRAY
51018: NONEQUAL
51019: IFTRUE 51042
51021: PUSH
51022: LD_EXP 13
51026: NOT
51027: IFFALSE 51041
51029: PUSH
51030: LD_VAR 0 1
51034: PUSH
51035: LD_OWVAR 2
51039: NONEQUAL
51040: AND
51041: OR
51042: IFFALSE 51056
// ComMoveToArea ( un , BuildUpEscape ) ;
51044: LD_VAR 0 2
51048: PPUSH
51049: LD_INT 9
51051: PPUSH
51052: CALL_OW 113
51056: GO 50994
51058: POP
51059: POP
51060: GO 50908
51062: POP
51063: POP
// enable ;
51064: ENABLE
// end ;
51065: PPOPN 2
51067: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
51068: LD_EXP 22
51072: IFFALSE 51122
51074: GO 51076
51076: DISABLE
51077: LD_INT 0
51079: PPUSH
// begin tmp := mpBuildUpTime ;
51080: LD_ADDR_VAR 0 1
51084: PUSH
51085: LD_EXP 22
51089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51090: LD_INT 35
51092: PPUSH
51093: CALL_OW 67
// tmp := tmp - 0 0$1 ;
51097: LD_ADDR_VAR 0 1
51101: PUSH
51102: LD_VAR 0 1
51106: PUSH
51107: LD_INT 35
51109: MINUS
51110: ST_TO_ADDR
// until not tmp ;
51111: LD_VAR 0 1
51115: NOT
51116: IFFALSE 51090
// EndBuildUp ;
51118: CALL 50701 0 0
// end ;
51122: PPOPN 1
51124: END
// every 0 0$1 trigger mpActive marked mpWin do
51125: LD_INT 100
51127: IFFALSE 51161
51129: GO 51131
51131: DISABLE
// begin if IAmServer then
51132: CALL_OW 518
51136: IFFALSE 51145
// wait ( 0 0$3 ) ;
51138: LD_INT 105
51140: PPUSH
51141: CALL_OW 67
// if Multiplayer then
51145: LD_OWVAR 4
51149: IFFALSE 51157
// YouWinInMultiplayer else
51151: CALL_OW 106
51155: GO 51161
// YouWin ;
51157: CALL_OW 103
// end ;
51161: END
// export function HasPowerByGameType ( gameType , side ) ; begin
51162: LD_INT 0
51164: PPUSH
// result := false ;
51165: LD_ADDR_VAR 0 3
51169: PUSH
51170: LD_INT 0
51172: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
51173: LD_VAR 0 1
51177: PUSH
51178: LD_INT 1
51180: DOUBLE
51181: EQUAL
51182: IFTRUE 51192
51184: LD_INT 5
51186: DOUBLE
51187: EQUAL
51188: IFTRUE 51192
51190: GO 51265
51192: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51193: LD_ADDR_VAR 0 3
51197: PUSH
51198: LD_INT 22
51200: PUSH
51201: LD_VAR 0 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 21
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 33
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 33
51235: PUSH
51236: LD_INT 5
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PPUSH
51253: CALL_OW 69
51257: PPUSH
51258: CALL 5732 0 1
51262: ST_TO_ADDR
// end ; GameTypeSurvival :
51263: GO 51504
51265: LD_INT 2
51267: DOUBLE
51268: EQUAL
51269: IFTRUE 51273
51271: GO 51403
51273: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51274: LD_ADDR_VAR 0 3
51278: PUSH
51279: LD_INT 22
51281: PUSH
51282: LD_VAR 0 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: LD_INT 30
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 30
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PPUSH
51323: CALL_OW 69
51327: PPUSH
51328: CALL 5732 0 1
51332: IFFALSE 51400
51334: PUSH
51335: LD_INT 22
51337: PUSH
51338: LD_VAR 0 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 21
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 33
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 33
51372: PUSH
51373: LD_INT 5
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PPUSH
51390: CALL_OW 69
51394: PPUSH
51395: CALL 5732 0 1
51399: AND
51400: ST_TO_ADDR
// end ; GameTypeKing :
51401: GO 51504
51403: LD_INT 3
51405: DOUBLE
51406: EQUAL
51407: IFTRUE 51411
51409: GO 51503
51411: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 22
51419: PUSH
51420: LD_VAR 0 2
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 21
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 33
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 33
51454: PUSH
51455: LD_INT 5
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PPUSH
51472: CALL_OW 69
51476: PPUSH
51477: CALL 5732 0 1
51481: IFFALSE 51500
51483: PUSH
51484: LD_VAR 0 2
51488: PPUSH
51489: CALL 55361 0 1
51493: PUSH
51494: LD_EXP 37
51498: LESS
51499: AND
51500: ST_TO_ADDR
// end ; end ;
51501: GO 51504
51503: POP
// end ;
51504: LD_VAR 0 3
51508: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51509: LD_INT 100
51511: IFFALSE 51741
51513: GO 51515
51515: DISABLE
51516: LD_INT 0
51518: PPUSH
51519: PPUSH
// begin if Multiplayer then
51520: LD_OWVAR 4
51524: IFFALSE 51532
// SetPlayerSpectator ( ) else
51526: CALL_OW 572
51530: GO 51541
// FogOff ( your_side ) ;
51532: LD_OWVAR 2
51536: PPUSH
51537: CALL_OW 344
// repeat gameIsOn := false ;
51541: LD_ADDR_VAR 0 1
51545: PUSH
51546: LD_INT 0
51548: ST_TO_ADDR
// for i := 1 to 8 do
51549: LD_ADDR_VAR 0 2
51553: PUSH
51554: DOUBLE
51555: LD_INT 1
51557: DEC
51558: ST_TO_ADDR
51559: LD_INT 8
51561: PUSH
51562: FOR_TO
51563: IFFALSE 51693
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51565: LD_EXP 9
51569: PUSH
51570: LD_VAR 0 2
51574: ARRAY
51575: IFFALSE 51588
51577: PUSH
51578: LD_VAR 0 2
51582: PPUSH
51583: CALL_OW 108
51587: AND
51588: IFFALSE 51602
51590: PUSH
51591: LD_VAR 0 2
51595: PUSH
51596: LD_OWVAR 2
51600: NONEQUAL
51601: AND
51602: IFFALSE 51691
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51604: LD_EXP 10
51608: PUSH
51609: LD_VAR 0 2
51613: ARRAY
51614: NOT
51615: IFTRUE 51663
51617: PUSH
51618: LD_EXP 10
51622: PUSH
51623: LD_VAR 0 2
51627: ARRAY
51628: PUSH
51629: LD_EXP 10
51633: PUSH
51634: LD_OWVAR 2
51638: ARRAY
51639: NONEQUAL
51640: IFFALSE 51662
51642: PUSH
51643: LD_OWVAR 2
51647: PPUSH
51648: LD_VAR 0 2
51652: PPUSH
51653: CALL_OW 81
51657: PUSH
51658: LD_INT 1
51660: NONEQUAL
51661: AND
51662: OR
51663: IFFALSE 51691
// if HasPowerByGameType ( mpGameType , i ) then
51665: LD_EXP 5
51669: PPUSH
51670: LD_VAR 0 2
51674: PPUSH
51675: CALL 51162 0 2
51679: IFFALSE 51691
// begin gameIsOn := true ;
51681: LD_ADDR_VAR 0 1
51685: PUSH
51686: LD_INT 1
51688: ST_TO_ADDR
// break ;
51689: GO 51693
// end ;
51691: GO 51562
51693: POP
51694: POP
// wait ( 100 ) ;
51695: LD_INT 100
51697: PPUSH
51698: CALL_OW 67
// until not gameIsOn ;
51702: LD_VAR 0 1
51706: NOT
51707: IFFALSE 51541
// if IAmServer then
51709: CALL_OW 518
51713: IFFALSE 51722
// wait ( 0 0$3 ) ;
51715: LD_INT 105
51717: PPUSH
51718: CALL_OW 67
// if Multiplayer then
51722: LD_OWVAR 4
51726: IFFALSE 51734
// YouLostInMultiplayer else
51728: CALL_OW 107
51732: GO 51741
// YouLost (  ) ;
51734: LD_STRING 
51736: PPUSH
51737: CALL_OW 104
// end ;
51741: PPOPN 2
51743: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51744: LD_EXP 35
51748: IFFALSE 52132
51750: GO 51752
51752: DISABLE
51753: LD_INT 0
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51760: LD_ADDR_VAR 0 5
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: LD_INT 4
51776: PUSH
51777: LD_INT 5
51779: PUSH
51780: LD_INT 6
51782: PUSH
51783: LD_INT 7
51785: PUSH
51786: LD_INT 8
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51799: LD_INT 350
51801: PPUSH
51802: CALL_OW 67
// for i := 1 to 8 do
51806: LD_ADDR_VAR 0 1
51810: PUSH
51811: DOUBLE
51812: LD_INT 1
51814: DEC
51815: ST_TO_ADDR
51816: LD_INT 8
51818: PUSH
51819: FOR_TO
51820: IFFALSE 52102
// begin j := sides [ i ] ;
51822: LD_ADDR_VAR 0 2
51826: PUSH
51827: LD_VAR 0 5
51831: PUSH
51832: LD_VAR 0 1
51836: ARRAY
51837: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51838: LD_EXP 42
51842: PUSH
51843: LD_VAR 0 2
51847: ARRAY
51848: PPUSH
51849: CALL 5732 0 1
51853: IFFALSE 51866
51855: PUSH
51856: LD_VAR 0 2
51860: PPUSH
51861: CALL_OW 108
51865: AND
51866: IFFALSE 51884
51868: PUSH
51869: LD_EXP 5
51873: PPUSH
51874: LD_VAR 0 2
51878: PPUSH
51879: CALL 51162 0 2
51883: AND
51884: IFFALSE 52100
// begin wait ( mpRespawn div 2 ) ;
51886: LD_EXP 35
51890: PUSH
51891: LD_INT 2
51893: DIV
51894: PPUSH
51895: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51899: LD_ADDR_VAR 0 3
51903: PUSH
51904: LD_INT 22
51906: PUSH
51907: LD_VAR 0 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 50
51918: PUSH
51919: EMPTY
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 30
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 30
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: PPUSH
51955: CALL_OW 69
51959: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51960: LD_VAR 0 3
51964: NOT
51965: IFTRUE 51979
51967: PUSH
51968: LD_VAR 0 2
51972: PPUSH
51973: CALL_OW 108
51977: NOT
51978: OR
51979: IFTRUE 51998
51981: PUSH
51982: LD_EXP 5
51986: PPUSH
51987: LD_VAR 0 2
51991: PPUSH
51992: CALL 51162 0 2
51996: NOT
51997: OR
51998: IFFALSE 52002
// continue ;
52000: GO 51819
// spawn := tmp [ 1 ] ;
52002: LD_ADDR_VAR 0 4
52006: PUSH
52007: LD_VAR 0 3
52011: PUSH
52012: LD_INT 1
52014: ARRAY
52015: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
52016: LD_EXP 42
52020: PUSH
52021: LD_VAR 0 2
52025: ARRAY
52026: PUSH
52027: LD_INT 1
52029: ARRAY
52030: PPUSH
52031: LD_VAR 0 4
52035: PPUSH
52036: CALL_OW 250
52040: PPUSH
52041: LD_VAR 0 4
52045: PPUSH
52046: CALL_OW 251
52050: PPUSH
52051: LD_INT 32
52053: PPUSH
52054: LD_INT 1
52056: PPUSH
52057: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52061: LD_ADDR_EXP 42
52065: PUSH
52066: LD_EXP 42
52070: PPUSH
52071: LD_VAR 0 2
52075: PPUSH
52076: LD_EXP 42
52080: PUSH
52081: LD_VAR 0 2
52085: ARRAY
52086: PPUSH
52087: LD_INT 1
52089: PPUSH
52090: CALL_OW 3
52094: PPUSH
52095: CALL_OW 1
52099: ST_TO_ADDR
// end ; end ;
52100: GO 51819
52102: POP
52103: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52104: LD_ADDR_VAR 0 5
52108: PUSH
52109: LD_VAR 0 5
52113: PPUSH
52114: LD_INT 1
52116: PPUSH
52117: LD_INT 8
52119: PPUSH
52120: LD_INT 1
52122: PPUSH
52123: CALL 8024 0 4
52127: ST_TO_ADDR
// until false ;
52128: LD_INT 0
52130: IFFALSE 51799
// end ;
52132: PPOPN 5
52134: END
// every 0 0$1 marked mpActive do
52135: GO 52137
52137: DISABLE
// begin enable ;
52138: ENABLE
// if not mpDisplayStrings then
52139: LD_EXP 40
52143: NOT
52144: IFFALSE 52155
// begin display_strings := [ ] ;
52146: LD_ADDR_OWVAR 47
52150: PUSH
52151: EMPTY
52152: ST_TO_ADDR
// exit ;
52153: GO 52165
// end ; display_strings := mpDisplayStrings ;
52155: LD_ADDR_OWVAR 47
52159: PUSH
52160: LD_EXP 40
52164: ST_TO_ADDR
// end ; end_of_file
52165: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52166: LD_INT 0
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
// if GetType ( un ) = unit_vehicle then
52177: LD_VAR 0 1
52181: PPUSH
52182: CALL_OW 247
52186: PUSH
52187: LD_INT 2
52189: EQUAL
52190: IFFALSE 52194
// exit ;
52192: GO 52868
// side := GetSide ( un ) ;
52194: LD_ADDR_VAR 0 9
52198: PUSH
52199: LD_VAR 0 1
52203: PPUSH
52204: CALL_OW 255
52208: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
52209: LD_EXP 5
52213: PUSH
52214: LD_INT 2
52216: EQUAL
52217: IFFALSE 52311
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52219: LD_VAR 0 1
52223: PPUSH
52224: CALL_OW 266
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: IN
52239: IFFALSE 52311
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52241: LD_ADDR_VAR 0 3
52245: PUSH
52246: LD_INT 22
52248: PUSH
52249: LD_VAR 0 9
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 21
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 33
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PPUSH
52290: CALL_OW 69
52294: PUSH
52295: FOR_IN
52296: IFFALSE 52309
// KillUnit ( i ) ;
52298: LD_VAR 0 3
52302: PPUSH
52303: CALL_OW 66
52307: GO 52295
52309: POP
52310: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52311: LD_VAR 0 1
52315: PPUSH
52316: CALL_OW 257
52320: PUSH
52321: LD_INT 12
52323: PUSH
52324: LD_INT 17
52326: PUSH
52327: LD_INT 15
52329: PUSH
52330: LD_INT 16
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: IN
52339: IFTRUE 52356
52341: PUSH
52342: LD_VAR 0 1
52346: PPUSH
52347: CALL_OW 263
52351: PUSH
52352: LD_INT 5
52354: EQUAL
52355: OR
52356: IFFALSE 52593
// begin tag := 0 ;
52358: LD_ADDR_VAR 0 5
52362: PUSH
52363: LD_INT 0
52365: ST_TO_ADDR
// for i := 1 to 8 do
52366: LD_ADDR_VAR 0 3
52370: PUSH
52371: DOUBLE
52372: LD_INT 1
52374: DEC
52375: ST_TO_ADDR
52376: LD_INT 8
52378: PUSH
52379: FOR_TO
52380: IFFALSE 52414
// if un in mpApePosIndex [ i ] then
52382: LD_VAR 0 1
52386: PUSH
52387: LD_EXP 34
52391: PUSH
52392: LD_VAR 0 3
52396: ARRAY
52397: IN
52398: IFFALSE 52412
// begin tag := i ;
52400: LD_ADDR_VAR 0 5
52404: PUSH
52405: LD_VAR 0 3
52409: ST_TO_ADDR
// break ;
52410: GO 52414
// end ;
52412: GO 52379
52414: POP
52415: POP
// if not tag then
52416: LD_VAR 0 5
52420: NOT
52421: IFFALSE 52425
// exit ;
52423: GO 52868
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52425: LD_ADDR_VAR 0 7
52429: PUSH
52430: LD_EXP 33
52434: PUSH
52435: LD_EXP 9
52439: PUSH
52440: LD_VAR 0 5
52444: ARRAY
52445: ARRAY
52446: ST_TO_ADDR
// if not area then
52447: LD_VAR 0 7
52451: NOT
52452: IFFALSE 52456
// exit ;
52454: GO 52868
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52456: LD_INT 14700
52458: PUSH
52459: LD_VAR 0 1
52463: PUSH
52464: LD_INT 5
52466: MOD
52467: PUSH
52468: LD_INT 1
52470: PLUS
52471: PUSH
52472: LD_INT 700
52474: MUL
52475: PLUS
52476: PPUSH
52477: CALL_OW 67
// repeat wait ( 10 ) ;
52481: LD_INT 10
52483: PPUSH
52484: CALL_OW 67
// until not mpBlockRespThread ;
52488: LD_EXP 47
52492: NOT
52493: IFFALSE 52481
// mpBlockRespThread := true ;
52495: LD_ADDR_EXP 47
52499: PUSH
52500: LD_INT 1
52502: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52503: LD_INT 0
52505: PPUSH
52506: CALL 37791 0 1
// ape := CreateHuman ;
52510: LD_ADDR_VAR 0 4
52514: PUSH
52515: CALL_OW 44
52519: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52520: LD_ADDR_EXP 34
52524: PUSH
52525: LD_EXP 34
52529: PPUSH
52530: LD_VAR 0 5
52534: PPUSH
52535: LD_EXP 34
52539: PUSH
52540: LD_VAR 0 5
52544: ARRAY
52545: PPUSH
52546: LD_VAR 0 4
52550: PPUSH
52551: CALL 41664 0 2
52555: PPUSH
52556: CALL_OW 1
52560: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52561: LD_VAR 0 4
52565: PPUSH
52566: LD_VAR 0 7
52570: PPUSH
52571: LD_INT 0
52573: PPUSH
52574: CALL_OW 49
// wait ( 10 ) ;
52578: LD_INT 10
52580: PPUSH
52581: CALL_OW 67
// mpBlockRespThread := false ;
52585: LD_ADDR_EXP 47
52589: PUSH
52590: LD_INT 0
52592: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52593: LD_VAR 0 1
52597: PPUSH
52598: CALL_OW 247
52602: PUSH
52603: LD_INT 1
52605: EQUAL
52606: IFFALSE 52623
52608: PUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 248
52618: PUSH
52619: LD_INT 0
52621: GREATER
52622: AND
52623: IFFALSE 52868
// begin if not mpRespawn then
52625: LD_EXP 35
52629: NOT
52630: IFFALSE 52634
// exit ;
52632: GO 52868
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52634: LD_VAR 0 9
52638: PPUSH
52639: CALL_OW 108
52643: NOT
52644: IFFALSE 52663
52646: PUSH
52647: LD_EXP 5
52651: PPUSH
52652: LD_VAR 0 9
52656: PPUSH
52657: CALL 51162 0 2
52661: NOT
52662: AND
52663: IFFALSE 52667
// exit ;
52665: GO 52868
// side := GetSide ( un ) ;
52667: LD_ADDR_VAR 0 9
52671: PUSH
52672: LD_VAR 0 1
52676: PPUSH
52677: CALL_OW 255
52681: ST_TO_ADDR
// nation := GetNation ( un ) ;
52682: LD_ADDR_VAR 0 8
52686: PUSH
52687: LD_VAR 0 1
52691: PPUSH
52692: CALL_OW 248
52696: ST_TO_ADDR
// class := GetClass ( un ) ;
52697: LD_ADDR_VAR 0 6
52701: PUSH
52702: LD_VAR 0 1
52706: PPUSH
52707: CALL_OW 257
52711: ST_TO_ADDR
// if class > 4 then
52712: LD_VAR 0 6
52716: PUSH
52717: LD_INT 4
52719: GREATER
52720: IFFALSE 52730
// class := 1 ;
52722: LD_ADDR_VAR 0 6
52726: PUSH
52727: LD_INT 1
52729: ST_TO_ADDR
// repeat wait ( 10 ) ;
52730: LD_INT 10
52732: PPUSH
52733: CALL_OW 67
// until not mpBlockRespThread ;
52737: LD_EXP 47
52741: NOT
52742: IFFALSE 52730
// mpBlockRespThread := true ;
52744: LD_ADDR_EXP 47
52748: PUSH
52749: LD_INT 1
52751: ST_TO_ADDR
// uc_side := side ;
52752: LD_ADDR_OWVAR 20
52756: PUSH
52757: LD_VAR 0 9
52761: ST_TO_ADDR
// uc_nation := nation ;
52762: LD_ADDR_OWVAR 21
52766: PUSH
52767: LD_VAR 0 8
52771: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52772: LD_INT 0
52774: PPUSH
52775: LD_VAR 0 6
52779: PPUSH
52780: LD_INT 2
52782: PPUSH
52783: CALL_OW 380
// un := CreateHuman ;
52787: LD_ADDR_VAR 0 1
52791: PUSH
52792: CALL_OW 44
52796: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52797: LD_ADDR_EXP 42
52801: PUSH
52802: LD_EXP 42
52806: PPUSH
52807: LD_VAR 0 9
52811: PPUSH
52812: LD_EXP 42
52816: PUSH
52817: LD_VAR 0 9
52821: ARRAY
52822: PPUSH
52823: LD_EXP 42
52827: PUSH
52828: LD_VAR 0 9
52832: ARRAY
52833: PUSH
52834: LD_INT 1
52836: PLUS
52837: PPUSH
52838: LD_VAR 0 1
52842: PPUSH
52843: CALL_OW 1
52847: PPUSH
52848: CALL_OW 1
52852: ST_TO_ADDR
// wait ( 10 ) ;
52853: LD_INT 10
52855: PPUSH
52856: CALL_OW 67
// mpBlockRespThread := false ;
52860: LD_ADDR_EXP 47
52864: PUSH
52865: LD_INT 0
52867: ST_TO_ADDR
// end ; end ;
52868: LD_VAR 0 2
52872: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52873: LD_INT 0
52875: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52876: LD_VAR 0 1
52880: PPUSH
52881: CALL_OW 266
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: IN
52896: IFFALSE 52921
// SetBName ( building , @ & GetSide ( building ) ) ;
52898: LD_VAR 0 1
52902: PPUSH
52903: LD_STRING @
52905: PUSH
52906: LD_VAR 0 1
52910: PPUSH
52911: CALL_OW 255
52915: STR
52916: PPUSH
52917: CALL_OW 500
// end ;
52921: LD_VAR 0 2
52925: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52926: LD_INT 0
52928: PPUSH
52929: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52930: LD_EXP 5
52934: PUSH
52935: LD_INT 2
52937: EQUAL
52938: IFFALSE 52962
52940: PUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: CALL_OW 266
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: IN
52961: AND
52962: IFFALSE 53041
// begin SetSide ( building , oldSide ) ;
52964: LD_VAR 0 1
52968: PPUSH
52969: LD_VAR 0 2
52973: PPUSH
52974: CALL_OW 235
// KillUnit ( building ) ;
52978: LD_VAR 0 1
52982: PPUSH
52983: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52987: LD_ADDR_VAR 0 5
52991: PUSH
52992: LD_INT 22
52994: PUSH
52995: LD_VAR 0 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 21
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PPUSH
53018: CALL_OW 69
53022: PUSH
53023: FOR_IN
53024: IFFALSE 53037
// KillUnit ( i ) ;
53026: LD_VAR 0 5
53030: PPUSH
53031: CALL_OW 66
53035: GO 53023
53037: POP
53038: POP
// exit ;
53039: GO 53086
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53041: LD_VAR 0 1
53045: PPUSH
53046: CALL_OW 266
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: IN
53061: IFFALSE 53086
// SetBName ( building , @ & GetSide ( building ) ) ;
53063: LD_VAR 0 1
53067: PPUSH
53068: LD_STRING @
53070: PUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: CALL_OW 255
53080: STR
53081: PPUSH
53082: CALL_OW 500
// end ;
53086: LD_VAR 0 4
53090: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53091: LD_INT 0
53093: PPUSH
53094: PPUSH
53095: PPUSH
// if mpGameType <> GameTypeFamine then
53096: LD_EXP 5
53100: PUSH
53101: LD_INT 5
53103: NONEQUAL
53104: IFFALSE 53108
// exit ;
53106: GO 53322
// for i := 1 to mpGlobalOilDeposits do
53108: LD_ADDR_VAR 0 6
53112: PUSH
53113: DOUBLE
53114: LD_INT 1
53116: DEC
53117: ST_TO_ADDR
53118: LD_EXP 43
53122: PUSH
53123: FOR_TO
53124: IFFALSE 53320
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53126: LD_EXP 43
53130: PUSH
53131: LD_VAR 0 6
53135: ARRAY
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: PPUSH
53141: LD_EXP 43
53145: PUSH
53146: LD_VAR 0 6
53150: ARRAY
53151: PUSH
53152: LD_INT 2
53154: ARRAY
53155: PPUSH
53156: CALL_OW 428
53160: PUSH
53161: LD_VAR 0 1
53165: EQUAL
53166: IFFALSE 53318
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53168: LD_ADDR_VAR 0 7
53172: PUSH
53173: LD_EXP 43
53177: PUSH
53178: LD_VAR 0 6
53182: ARRAY
53183: PUSH
53184: LD_INT 3
53186: ARRAY
53187: ST_TO_ADDR
// value := Dec ( value ) ;
53188: LD_ADDR_VAR 0 7
53192: PUSH
53193: LD_VAR 0 7
53197: PPUSH
53198: CALL 43059 0 1
53202: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53203: LD_ADDR_EXP 43
53207: PUSH
53208: LD_EXP 43
53212: PPUSH
53213: LD_VAR 0 6
53217: PPUSH
53218: LD_EXP 43
53222: PUSH
53223: LD_VAR 0 6
53227: ARRAY
53228: PPUSH
53229: LD_INT 3
53231: PPUSH
53232: LD_VAR 0 7
53236: PPUSH
53237: CALL_OW 1
53241: PPUSH
53242: CALL_OW 1
53246: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53247: LD_VAR 0 1
53251: PPUSH
53252: LD_VAR 0 7
53256: PPUSH
53257: CALL_OW 505
// if value = 0 then
53261: LD_VAR 0 7
53265: PUSH
53266: LD_INT 0
53268: EQUAL
53269: IFFALSE 53318
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53271: LD_EXP 43
53275: PUSH
53276: LD_VAR 0 6
53280: ARRAY
53281: PUSH
53282: LD_INT 1
53284: ARRAY
53285: PPUSH
53286: LD_EXP 43
53290: PUSH
53291: LD_VAR 0 6
53295: ARRAY
53296: PUSH
53297: LD_INT 2
53299: ARRAY
53300: PPUSH
53301: CALL_OW 63
// KillUnit ( building ) ;
53305: LD_VAR 0 1
53309: PPUSH
53310: CALL_OW 66
// exit ;
53314: POP
53315: POP
53316: GO 53322
// end ; end ; end ;
53318: GO 53123
53320: POP
53321: POP
// end ;
53322: LD_VAR 0 5
53326: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53327: LD_INT 0
53329: PPUSH
53330: PPUSH
53331: PPUSH
// if mpGameType <> GameTypeFamine then
53332: LD_EXP 5
53336: PUSH
53337: LD_INT 5
53339: NONEQUAL
53340: IFFALSE 53344
// exit ;
53342: GO 53558
// for i := 1 to mpGlobalSibDeposits do
53344: LD_ADDR_VAR 0 6
53348: PUSH
53349: DOUBLE
53350: LD_INT 1
53352: DEC
53353: ST_TO_ADDR
53354: LD_EXP 44
53358: PUSH
53359: FOR_TO
53360: IFFALSE 53556
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53362: LD_EXP 44
53366: PUSH
53367: LD_VAR 0 6
53371: ARRAY
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PPUSH
53377: LD_EXP 44
53381: PUSH
53382: LD_VAR 0 6
53386: ARRAY
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: PPUSH
53392: CALL_OW 428
53396: PUSH
53397: LD_VAR 0 1
53401: EQUAL
53402: IFFALSE 53554
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53404: LD_ADDR_VAR 0 7
53408: PUSH
53409: LD_EXP 44
53413: PUSH
53414: LD_VAR 0 6
53418: ARRAY
53419: PUSH
53420: LD_INT 3
53422: ARRAY
53423: ST_TO_ADDR
// value := Dec ( value ) ;
53424: LD_ADDR_VAR 0 7
53428: PUSH
53429: LD_VAR 0 7
53433: PPUSH
53434: CALL 43059 0 1
53438: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53439: LD_ADDR_EXP 44
53443: PUSH
53444: LD_EXP 44
53448: PPUSH
53449: LD_VAR 0 6
53453: PPUSH
53454: LD_EXP 44
53458: PUSH
53459: LD_VAR 0 6
53463: ARRAY
53464: PPUSH
53465: LD_INT 3
53467: PPUSH
53468: LD_VAR 0 7
53472: PPUSH
53473: CALL_OW 1
53477: PPUSH
53478: CALL_OW 1
53482: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53483: LD_VAR 0 1
53487: PPUSH
53488: LD_VAR 0 7
53492: PPUSH
53493: CALL_OW 505
// if value = 0 then
53497: LD_VAR 0 7
53501: PUSH
53502: LD_INT 0
53504: EQUAL
53505: IFFALSE 53554
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53507: LD_EXP 44
53511: PUSH
53512: LD_VAR 0 6
53516: ARRAY
53517: PUSH
53518: LD_INT 1
53520: ARRAY
53521: PPUSH
53522: LD_EXP 44
53526: PUSH
53527: LD_VAR 0 6
53531: ARRAY
53532: PUSH
53533: LD_INT 2
53535: ARRAY
53536: PPUSH
53537: CALL_OW 63
// KillUnit ( building ) ;
53541: LD_VAR 0 1
53545: PPUSH
53546: CALL_OW 66
// exit ;
53550: POP
53551: POP
53552: GO 53558
// end ; end ; end ;
53554: GO 53359
53556: POP
53557: POP
// end ; end_of_file
53558: LD_VAR 0 5
53562: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53563: LD_EXP 41
53567: IFFALSE 53575
53569: PUSH
53570: CALL 53785 0 0
53574: AND
53575: IFFALSE 53583
53577: PUSH
53578: LD_OWVAR 4
53582: AND
53583: IFFALSE 53782
53585: GO 53587
53587: DISABLE
53588: LD_INT 0
53590: PPUSH
53591: PPUSH
// begin canWin := false ;
53592: LD_ADDR_VAR 0 2
53596: PUSH
53597: LD_INT 0
53599: ST_TO_ADDR
// if not HasPower ( your_side ) then
53600: LD_OWVAR 2
53604: PPUSH
53605: CALL 53827 0 1
53609: NOT
53610: IFFALSE 53621
// begin Multiplayer_Loose_Message ;
53612: CALL_OW 521
// enable ( mpLose ) ;
53616: LD_INT 102
53618: ENABLE_MARKED
// end else
53619: GO 53782
// begin canWin := true ;
53621: LD_ADDR_VAR 0 2
53625: PUSH
53626: LD_INT 1
53628: ST_TO_ADDR
// for i := 1 to 8 do
53629: LD_ADDR_VAR 0 1
53633: PUSH
53634: DOUBLE
53635: LD_INT 1
53637: DEC
53638: ST_TO_ADDR
53639: LD_INT 8
53641: PUSH
53642: FOR_TO
53643: IFFALSE 53768
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53645: LD_EXP 9
53649: PUSH
53650: LD_VAR 0 1
53654: ARRAY
53655: IFFALSE 53668
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 108
53667: AND
53668: IFFALSE 53682
53670: PUSH
53671: LD_VAR 0 1
53675: PUSH
53676: LD_OWVAR 2
53680: NONEQUAL
53681: AND
53682: IFFALSE 53766
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53684: LD_EXP 10
53688: PUSH
53689: LD_VAR 0 1
53693: ARRAY
53694: NOT
53695: IFTRUE 53743
53697: PUSH
53698: LD_EXP 10
53702: PUSH
53703: LD_VAR 0 1
53707: ARRAY
53708: PUSH
53709: LD_EXP 10
53713: PUSH
53714: LD_OWVAR 2
53718: ARRAY
53719: NONEQUAL
53720: IFFALSE 53742
53722: PUSH
53723: LD_OWVAR 2
53727: PPUSH
53728: LD_VAR 0 1
53732: PPUSH
53733: CALL_OW 81
53737: PUSH
53738: LD_INT 1
53740: NONEQUAL
53741: AND
53742: OR
53743: IFFALSE 53766
// if HasPower ( i ) then
53745: LD_VAR 0 1
53749: PPUSH
53750: CALL 53827 0 1
53754: IFFALSE 53766
// begin canWin := false ;
53756: LD_ADDR_VAR 0 2
53760: PUSH
53761: LD_INT 0
53763: ST_TO_ADDR
// break ;
53764: GO 53768
// end ;
53766: GO 53642
53768: POP
53769: POP
// if canWin then
53770: LD_VAR 0 2
53774: IFFALSE 53781
// enable ( mpWin ) else
53776: LD_INT 101
53778: ENABLE_MARKED
53779: GO 53782
// enable ;
53781: ENABLE
// end ; end ;
53782: PPOPN 2
53784: END
// function CanWinLoose ; begin
53785: LD_INT 0
53787: PPUSH
// result := true ;
53788: LD_ADDR_VAR 0 1
53792: PUSH
53793: LD_INT 1
53795: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53796: CALL_OW 531
53800: IFFALSE 53812
53802: PUSH
53803: CALL_OW 519
53807: PUSH
53808: LD_INT 1
53810: GREATER
53811: AND
53812: IFFALSE 53822
// result := false ;
53814: LD_ADDR_VAR 0 1
53818: PUSH
53819: LD_INT 0
53821: ST_TO_ADDR
// end ;
53822: LD_VAR 0 1
53826: RET
// function HasPower ( i ) ; begin
53827: LD_INT 0
53829: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53830: LD_ADDR_VAR 0 2
53834: PUSH
53835: LD_INT 22
53837: PUSH
53838: LD_VAR 0 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 21
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 33
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 33
53872: PUSH
53873: LD_INT 5
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PPUSH
53890: CALL_OW 69
53894: ST_TO_ADDR
// end ; end_of_file
53895: LD_VAR 0 2
53899: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53900: LD_EXP 41
53904: IFFALSE 53947
53906: GO 53908
53908: DISABLE
53909: LD_INT 0
53911: PPUSH
// begin for i := 1 to 8 do
53912: LD_ADDR_VAR 0 1
53916: PUSH
53917: DOUBLE
53918: LD_INT 1
53920: DEC
53921: ST_TO_ADDR
53922: LD_INT 8
53924: PUSH
53925: FOR_TO
53926: IFFALSE 53945
// SetRestrict ( b_depot , i , state_disabled ) ;
53928: LD_INT 0
53930: PPUSH
53931: LD_VAR 0 1
53935: PPUSH
53936: LD_INT 0
53938: PPUSH
53939: CALL_OW 324
53943: GO 53925
53945: POP
53946: POP
// end ;
53947: PPOPN 1
53949: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53950: LD_EXP 41
53954: IFFALSE 53962
53956: PUSH
53957: CALL 54172 0 0
53961: AND
53962: IFFALSE 53970
53964: PUSH
53965: LD_OWVAR 4
53969: AND
53970: IFFALSE 54169
53972: GO 53974
53974: DISABLE
53975: LD_INT 0
53977: PPUSH
53978: PPUSH
// begin canWin := false ;
53979: LD_ADDR_VAR 0 2
53983: PUSH
53984: LD_INT 0
53986: ST_TO_ADDR
// if not HasPower ( your_side ) then
53987: LD_OWVAR 2
53991: PPUSH
53992: CALL 54214 0 1
53996: NOT
53997: IFFALSE 54008
// begin Multiplayer_Loose_Message ;
53999: CALL_OW 521
// enable ( mpLose ) ;
54003: LD_INT 102
54005: ENABLE_MARKED
// end else
54006: GO 54169
// begin canWin := true ;
54008: LD_ADDR_VAR 0 2
54012: PUSH
54013: LD_INT 1
54015: ST_TO_ADDR
// for i := 1 to 8 do
54016: LD_ADDR_VAR 0 1
54020: PUSH
54021: DOUBLE
54022: LD_INT 1
54024: DEC
54025: ST_TO_ADDR
54026: LD_INT 8
54028: PUSH
54029: FOR_TO
54030: IFFALSE 54155
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54032: LD_EXP 9
54036: PUSH
54037: LD_VAR 0 1
54041: ARRAY
54042: IFFALSE 54055
54044: PUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: CALL_OW 108
54054: AND
54055: IFFALSE 54069
54057: PUSH
54058: LD_VAR 0 1
54062: PUSH
54063: LD_OWVAR 2
54067: NONEQUAL
54068: AND
54069: IFFALSE 54153
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54071: LD_EXP 10
54075: PUSH
54076: LD_VAR 0 1
54080: ARRAY
54081: NOT
54082: IFTRUE 54130
54084: PUSH
54085: LD_EXP 10
54089: PUSH
54090: LD_VAR 0 1
54094: ARRAY
54095: PUSH
54096: LD_EXP 10
54100: PUSH
54101: LD_OWVAR 2
54105: ARRAY
54106: NONEQUAL
54107: IFFALSE 54129
54109: PUSH
54110: LD_OWVAR 2
54114: PPUSH
54115: LD_VAR 0 1
54119: PPUSH
54120: CALL_OW 81
54124: PUSH
54125: LD_INT 1
54127: NONEQUAL
54128: AND
54129: OR
54130: IFFALSE 54153
// if HasPower ( i ) then
54132: LD_VAR 0 1
54136: PPUSH
54137: CALL 54214 0 1
54141: IFFALSE 54153
// begin canWin := false ;
54143: LD_ADDR_VAR 0 2
54147: PUSH
54148: LD_INT 0
54150: ST_TO_ADDR
// break ;
54151: GO 54155
// end ;
54153: GO 54029
54155: POP
54156: POP
// if canWin then
54157: LD_VAR 0 2
54161: IFFALSE 54168
// enable ( mpWin ) else
54163: LD_INT 101
54165: ENABLE_MARKED
54166: GO 54169
// enable ;
54168: ENABLE
// end ; end ;
54169: PPOPN 2
54171: END
// function CanWinLoose ; begin
54172: LD_INT 0
54174: PPUSH
// result := true ;
54175: LD_ADDR_VAR 0 1
54179: PUSH
54180: LD_INT 1
54182: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54183: CALL_OW 531
54187: IFFALSE 54199
54189: PUSH
54190: CALL_OW 519
54194: PUSH
54195: LD_INT 1
54197: GREATER
54198: AND
54199: IFFALSE 54209
// result := false ;
54201: LD_ADDR_VAR 0 1
54205: PUSH
54206: LD_INT 0
54208: ST_TO_ADDR
// end ;
54209: LD_VAR 0 1
54213: RET
// function HasPower ( i ) ; begin
54214: LD_INT 0
54216: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54217: LD_INT 22
54219: PUSH
54220: LD_VAR 0 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 30
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 30
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PPUSH
54261: CALL_OW 69
54265: NOT
54266: IFFALSE 54270
// exit ;
54268: GO 54335
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54270: LD_ADDR_VAR 0 2
54274: PUSH
54275: LD_INT 22
54277: PUSH
54278: LD_VAR 0 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 21
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 33
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 33
54312: PUSH
54313: LD_INT 5
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PPUSH
54330: CALL_OW 69
54334: ST_TO_ADDR
// end ; end_of_file
54335: LD_VAR 0 2
54339: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54340: LD_EXP 41
54344: IFFALSE 54685
54346: GO 54348
54348: DISABLE
54349: LD_INT 0
54351: PPUSH
54352: PPUSH
54353: PPUSH
// begin mpKingPoints := [ ] ;
54354: LD_ADDR_EXP 50
54358: PUSH
54359: EMPTY
54360: ST_TO_ADDR
// if mpTeamGame then
54361: LD_EXP 13
54365: IFFALSE 54419
// begin for i := 1 to Count ( mpTeams ) do
54367: LD_ADDR_VAR 0 1
54371: PUSH
54372: DOUBLE
54373: LD_INT 1
54375: DEC
54376: ST_TO_ADDR
54377: LD_EXP 12
54381: PPUSH
54382: CALL 5732 0 1
54386: PUSH
54387: FOR_TO
54388: IFFALSE 54415
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54390: LD_ADDR_EXP 50
54394: PUSH
54395: LD_EXP 50
54399: PPUSH
54400: LD_VAR 0 1
54404: PPUSH
54405: LD_INT 0
54407: PPUSH
54408: CALL_OW 1
54412: ST_TO_ADDR
54413: GO 54387
54415: POP
54416: POP
// end else
54417: GO 54462
// begin for i := 1 to 8 do
54419: LD_ADDR_VAR 0 1
54423: PUSH
54424: DOUBLE
54425: LD_INT 1
54427: DEC
54428: ST_TO_ADDR
54429: LD_INT 8
54431: PUSH
54432: FOR_TO
54433: IFFALSE 54460
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54435: LD_ADDR_EXP 50
54439: PUSH
54440: LD_EXP 50
54444: PPUSH
54445: LD_VAR 0 1
54449: PPUSH
54450: LD_INT 0
54452: PPUSH
54453: CALL_OW 1
54457: ST_TO_ADDR
54458: GO 54432
54460: POP
54461: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54462: LD_ADDR_VAR 0 3
54466: PUSH
54467: LD_EXP 2
54471: PPUSH
54472: LD_INT 0
54474: PPUSH
54475: CALL_OW 517
54479: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54480: LD_ADDR_VAR 0 1
54484: PUSH
54485: DOUBLE
54486: LD_INT 1
54488: DEC
54489: ST_TO_ADDR
54490: LD_VAR 0 3
54494: PUSH
54495: LD_INT 1
54497: ARRAY
54498: PUSH
54499: FOR_TO
54500: IFFALSE 54567
// for j := 1 to 8 do
54502: LD_ADDR_VAR 0 2
54506: PUSH
54507: DOUBLE
54508: LD_INT 1
54510: DEC
54511: ST_TO_ADDR
54512: LD_INT 8
54514: PUSH
54515: FOR_TO
54516: IFFALSE 54563
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54518: LD_VAR 0 3
54522: PUSH
54523: LD_INT 1
54525: ARRAY
54526: PUSH
54527: LD_VAR 0 1
54531: ARRAY
54532: PPUSH
54533: LD_VAR 0 3
54537: PUSH
54538: LD_INT 2
54540: ARRAY
54541: PUSH
54542: LD_VAR 0 1
54546: ARRAY
54547: PPUSH
54548: LD_VAR 0 2
54552: PPUSH
54553: LD_INT 12
54555: NEG
54556: PPUSH
54557: CALL_OW 330
54561: GO 54515
54563: POP
54564: POP
54565: GO 54499
54567: POP
54568: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54569: LD_EXP 36
54573: PPUSH
54574: LD_INT 1
54576: PPUSH
54577: CALL_OW 424
// UpdateCounter ;
54581: CALL 55191 0 0
// repeat wait ( 0 0$1 ) ;
54585: LD_INT 35
54587: PPUSH
54588: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54592: LD_ADDR_VAR 0 3
54596: PUSH
54597: LD_EXP 36
54601: PPUSH
54602: LD_INT 3
54604: PUSH
54605: LD_INT 57
54607: PUSH
54608: EMPTY
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 50
54617: PUSH
54618: EMPTY
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 30
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 30
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: PPUSH
54654: CALL_OW 70
54658: ST_TO_ADDR
// if not tmp then
54659: LD_VAR 0 3
54663: NOT
54664: IFFALSE 54668
// continue ;
54666: GO 54585
// AddPoints ( tmp ) ;
54668: LD_VAR 0 3
54672: PPUSH
54673: CALL 54869 0 1
// UpdateCounter ;
54677: CALL 55191 0 0
// until false ;
54681: LD_INT 0
54683: IFFALSE 54585
// end ;
54685: PPOPN 3
54687: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54688: LD_EXP 41
54692: IFFALSE 54700
54694: PUSH
54695: LD_EXP 39
54699: AND
54700: IFFALSE 54866
54702: GO 54704
54704: DISABLE
54705: LD_INT 0
54707: PPUSH
54708: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54709: LD_ADDR_VAR 0 2
54713: PUSH
54714: LD_EXP 2
54718: PPUSH
54719: LD_INT 0
54721: PPUSH
54722: CALL_OW 517
54726: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54727: LD_ADDR_VAR 0 1
54731: PUSH
54732: DOUBLE
54733: LD_INT 1
54735: DEC
54736: ST_TO_ADDR
54737: LD_VAR 0 2
54741: PUSH
54742: LD_INT 1
54744: ARRAY
54745: PUSH
54746: FOR_TO
54747: IFFALSE 54788
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54749: LD_VAR 0 2
54753: PUSH
54754: LD_INT 1
54756: ARRAY
54757: PUSH
54758: LD_VAR 0 1
54762: ARRAY
54763: PPUSH
54764: LD_VAR 0 2
54768: PUSH
54769: LD_INT 2
54771: ARRAY
54772: PUSH
54773: LD_VAR 0 1
54777: ARRAY
54778: PPUSH
54779: LD_INT 125
54781: PPUSH
54782: CALL_OW 495
54786: GO 54746
54788: POP
54789: POP
// repeat wait ( mpEmissions ) ;
54790: LD_EXP 39
54794: PPUSH
54795: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54799: LD_ADDR_VAR 0 1
54803: PUSH
54804: DOUBLE
54805: LD_INT 1
54807: DEC
54808: ST_TO_ADDR
54809: LD_VAR 0 2
54813: PUSH
54814: LD_INT 1
54816: ARRAY
54817: PUSH
54818: FOR_TO
54819: IFFALSE 54860
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54821: LD_VAR 0 2
54825: PUSH
54826: LD_INT 1
54828: ARRAY
54829: PUSH
54830: LD_VAR 0 1
54834: ARRAY
54835: PPUSH
54836: LD_VAR 0 2
54840: PUSH
54841: LD_INT 2
54843: ARRAY
54844: PUSH
54845: LD_VAR 0 1
54849: ARRAY
54850: PPUSH
54851: LD_INT 15
54853: PPUSH
54854: CALL_OW 495
54858: GO 54818
54860: POP
54861: POP
// until false ;
54862: LD_INT 0
54864: IFFALSE 54790
// end ;
54866: PPOPN 2
54868: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54869: LD_INT 0
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
54875: PPUSH
// if mpTeamGame then
54876: LD_EXP 13
54880: IFFALSE 55077
// begin first := depots [ 1 ] ;
54882: LD_ADDR_VAR 0 4
54886: PUSH
54887: LD_VAR 0 1
54891: PUSH
54892: LD_INT 1
54894: ARRAY
54895: ST_TO_ADDR
// side := GetSide ( first ) ;
54896: LD_ADDR_VAR 0 6
54900: PUSH
54901: LD_VAR 0 4
54905: PPUSH
54906: CALL_OW 255
54910: ST_TO_ADDR
// for i := 1 to mpTeams do
54911: LD_ADDR_VAR 0 3
54915: PUSH
54916: DOUBLE
54917: LD_INT 1
54919: DEC
54920: ST_TO_ADDR
54921: LD_EXP 12
54925: PUSH
54926: FOR_TO
54927: IFFALSE 54961
// if side in mpTeams [ i ] then
54929: LD_VAR 0 6
54933: PUSH
54934: LD_EXP 12
54938: PUSH
54939: LD_VAR 0 3
54943: ARRAY
54944: IN
54945: IFFALSE 54959
// begin team := i ;
54947: LD_ADDR_VAR 0 5
54951: PUSH
54952: LD_VAR 0 3
54956: ST_TO_ADDR
// break ;
54957: GO 54961
// end ;
54959: GO 54926
54961: POP
54962: POP
// if not team then
54963: LD_VAR 0 5
54967: NOT
54968: IFFALSE 54972
// exit ;
54970: GO 55186
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54972: LD_EXP 36
54976: PPUSH
54977: LD_INT 81
54979: PUSH
54980: LD_VAR 0 6
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PPUSH
54989: CALL_OW 70
54993: IFFALSE 54997
// exit ;
54995: GO 55186
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54997: LD_ADDR_EXP 50
55001: PUSH
55002: LD_EXP 50
55006: PPUSH
55007: LD_VAR 0 5
55011: PPUSH
55012: LD_EXP 50
55016: PUSH
55017: LD_VAR 0 5
55021: ARRAY
55022: PUSH
55023: LD_INT 1
55025: PLUS
55026: PPUSH
55027: CALL_OW 1
55031: ST_TO_ADDR
// for i in mpTeams [ team ] do
55032: LD_ADDR_VAR 0 3
55036: PUSH
55037: LD_EXP 12
55041: PUSH
55042: LD_VAR 0 5
55046: ARRAY
55047: PUSH
55048: FOR_IN
55049: IFFALSE 55073
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55051: LD_VAR 0 3
55055: PPUSH
55056: LD_EXP 50
55060: PUSH
55061: LD_VAR 0 5
55065: ARRAY
55066: PPUSH
55067: CALL_OW 506
55071: GO 55048
55073: POP
55074: POP
// end else
55075: GO 55186
// begin first := depots [ 1 ] ;
55077: LD_ADDR_VAR 0 4
55081: PUSH
55082: LD_VAR 0 1
55086: PUSH
55087: LD_INT 1
55089: ARRAY
55090: ST_TO_ADDR
// side := GetSide ( first ) ;
55091: LD_ADDR_VAR 0 6
55095: PUSH
55096: LD_VAR 0 4
55100: PPUSH
55101: CALL_OW 255
55105: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55106: LD_EXP 36
55110: PPUSH
55111: LD_INT 81
55113: PUSH
55114: LD_VAR 0 6
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PPUSH
55123: CALL_OW 70
55127: IFFALSE 55131
// exit ;
55129: GO 55186
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55131: LD_ADDR_EXP 50
55135: PUSH
55136: LD_EXP 50
55140: PPUSH
55141: LD_VAR 0 6
55145: PPUSH
55146: LD_EXP 50
55150: PUSH
55151: LD_VAR 0 6
55155: ARRAY
55156: PUSH
55157: LD_INT 1
55159: PLUS
55160: PPUSH
55161: CALL_OW 1
55165: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55166: LD_VAR 0 6
55170: PPUSH
55171: LD_EXP 50
55175: PUSH
55176: LD_VAR 0 6
55180: ARRAY
55181: PPUSH
55182: CALL_OW 506
// end ; end ;
55186: LD_VAR 0 2
55190: RET
// function UpdateCounter ; var i ; begin
55191: LD_INT 0
55193: PPUSH
55194: PPUSH
// result := [ ] ;
55195: LD_ADDR_VAR 0 1
55199: PUSH
55200: EMPTY
55201: ST_TO_ADDR
// if mpTeamGame then
55202: LD_EXP 13
55206: IFFALSE 55273
// begin for i := 1 to mpTeams do
55208: LD_ADDR_VAR 0 2
55212: PUSH
55213: DOUBLE
55214: LD_INT 1
55216: DEC
55217: ST_TO_ADDR
55218: LD_EXP 12
55222: PUSH
55223: FOR_TO
55224: IFFALSE 55269
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55226: LD_ADDR_VAR 0 1
55230: PUSH
55231: LD_VAR 0 1
55235: PUSH
55236: LD_STRING #KingoftheHill-Team
55238: PUSH
55239: LD_VAR 0 2
55243: PUSH
55244: LD_EXP 50
55248: PUSH
55249: LD_VAR 0 2
55253: ARRAY
55254: PUSH
55255: LD_EXP 37
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: ADD
55266: ST_TO_ADDR
55267: GO 55223
55269: POP
55270: POP
// end else
55271: GO 55346
// begin for i := 1 to 8 do
55273: LD_ADDR_VAR 0 2
55277: PUSH
55278: DOUBLE
55279: LD_INT 1
55281: DEC
55282: ST_TO_ADDR
55283: LD_INT 8
55285: PUSH
55286: FOR_TO
55287: IFFALSE 55344
// if mpSidePositions [ i ] then
55289: LD_EXP 9
55293: PUSH
55294: LD_VAR 0 2
55298: ARRAY
55299: IFFALSE 55342
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55301: LD_ADDR_VAR 0 1
55305: PUSH
55306: LD_VAR 0 1
55310: PUSH
55311: LD_STRING #KingoftheHill-Player
55313: PUSH
55314: LD_VAR 0 2
55318: PUSH
55319: LD_EXP 50
55323: PUSH
55324: LD_VAR 0 2
55328: ARRAY
55329: PUSH
55330: LD_EXP 37
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: ADD
55341: ST_TO_ADDR
55342: GO 55286
55344: POP
55345: POP
// end ; mpDisplayStrings := result ;
55346: LD_ADDR_EXP 40
55350: PUSH
55351: LD_VAR 0 1
55355: ST_TO_ADDR
// end ;
55356: LD_VAR 0 1
55360: RET
// export function HowMuchPointsKing ( side ) ; begin
55361: LD_INT 0
55363: PPUSH
// result := HowMuchPoints ( side ) ;
55364: LD_ADDR_VAR 0 2
55368: PUSH
55369: LD_VAR 0 1
55373: PPUSH
55374: CALL 55384 0 1
55378: ST_TO_ADDR
// end ;
55379: LD_VAR 0 2
55383: RET
// function HowMuchPoints ( side ) ; var i ; begin
55384: LD_INT 0
55386: PPUSH
55387: PPUSH
// if mpTeamGame then
55388: LD_EXP 13
55392: IFFALSE 55461
// begin for i := 1 to Count ( mpTeams ) do
55394: LD_ADDR_VAR 0 3
55398: PUSH
55399: DOUBLE
55400: LD_INT 1
55402: DEC
55403: ST_TO_ADDR
55404: LD_EXP 12
55408: PPUSH
55409: CALL 5732 0 1
55413: PUSH
55414: FOR_TO
55415: IFFALSE 55457
// begin if side in mpTeams [ i ] then
55417: LD_VAR 0 1
55421: PUSH
55422: LD_EXP 12
55426: PUSH
55427: LD_VAR 0 3
55431: ARRAY
55432: IN
55433: IFFALSE 55455
// begin result := mpKingPoints [ i ] ;
55435: LD_ADDR_VAR 0 2
55439: PUSH
55440: LD_EXP 50
55444: PUSH
55445: LD_VAR 0 3
55449: ARRAY
55450: ST_TO_ADDR
// exit ;
55451: POP
55452: POP
55453: GO 55477
// end ; end ;
55455: GO 55414
55457: POP
55458: POP
// end else
55459: GO 55477
// result := mpKingPoints [ side ] ;
55461: LD_ADDR_VAR 0 2
55465: PUSH
55466: LD_EXP 50
55470: PUSH
55471: LD_VAR 0 1
55475: ARRAY
55476: ST_TO_ADDR
// end ;
55477: LD_VAR 0 2
55481: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55482: LD_EXP 41
55486: IFFALSE 55494
55488: PUSH
55489: CALL 55906 0 0
55493: AND
55494: IFFALSE 55502
55496: PUSH
55497: LD_OWVAR 4
55501: AND
55502: IFFALSE 55755
55504: GO 55506
55506: DISABLE
55507: LD_INT 0
55509: PPUSH
55510: PPUSH
// begin canWin := false ;
55511: LD_ADDR_VAR 0 2
55515: PUSH
55516: LD_INT 0
55518: ST_TO_ADDR
// if not HasPower ( your_side ) then
55519: LD_OWVAR 2
55523: PPUSH
55524: CALL 55948 0 1
55528: NOT
55529: IFFALSE 55540
// begin Multiplayer_Loose_Message ;
55531: CALL_OW 521
// enable ( mpLose ) ;
55535: LD_INT 102
55537: ENABLE_MARKED
// end else
55538: GO 55755
// begin if not EnemiesInGame then
55540: CALL 55758 0 0
55544: NOT
55545: IFFALSE 55552
// begin enable ( mpWin ) ;
55547: LD_INT 101
55549: ENABLE_MARKED
// exit ;
55550: GO 55755
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55552: LD_ADDR_VAR 0 2
55556: PUSH
55557: LD_OWVAR 2
55561: PPUSH
55562: CALL 55384 0 1
55566: PUSH
55567: LD_EXP 37
55571: GREATEREQUAL
55572: IFFALSE 55585
55574: PUSH
55575: LD_OWVAR 2
55579: PPUSH
55580: CALL 55948 0 1
55584: AND
55585: ST_TO_ADDR
// for i := 1 to 8 do
55586: LD_ADDR_VAR 0 1
55590: PUSH
55591: DOUBLE
55592: LD_INT 1
55594: DEC
55595: ST_TO_ADDR
55596: LD_INT 8
55598: PUSH
55599: FOR_TO
55600: IFFALSE 55741
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55602: LD_EXP 9
55606: PUSH
55607: LD_VAR 0 1
55611: ARRAY
55612: IFFALSE 55625
55614: PUSH
55615: LD_VAR 0 1
55619: PPUSH
55620: CALL_OW 108
55624: AND
55625: IFFALSE 55639
55627: PUSH
55628: LD_VAR 0 1
55632: PUSH
55633: LD_OWVAR 2
55637: NONEQUAL
55638: AND
55639: IFFALSE 55739
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55641: LD_EXP 10
55645: PUSH
55646: LD_VAR 0 1
55650: ARRAY
55651: NOT
55652: IFTRUE 55700
55654: PUSH
55655: LD_EXP 10
55659: PUSH
55660: LD_VAR 0 1
55664: ARRAY
55665: PUSH
55666: LD_EXP 10
55670: PUSH
55671: LD_OWVAR 2
55675: ARRAY
55676: NONEQUAL
55677: IFFALSE 55699
55679: PUSH
55680: LD_OWVAR 2
55684: PPUSH
55685: LD_VAR 0 1
55689: PPUSH
55690: CALL_OW 81
55694: PUSH
55695: LD_INT 1
55697: NONEQUAL
55698: AND
55699: OR
55700: IFFALSE 55739
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL 55384 0 1
55711: PUSH
55712: LD_EXP 37
55716: GREATEREQUAL
55717: IFFALSE 55730
55719: PUSH
55720: LD_VAR 0 1
55724: PPUSH
55725: CALL 55948 0 1
55729: AND
55730: IFFALSE 55739
// begin enable ( mpLose ) ;
55732: LD_INT 102
55734: ENABLE_MARKED
// exit ;
55735: POP
55736: POP
55737: GO 55755
// end ;
55739: GO 55599
55741: POP
55742: POP
// if canWin then
55743: LD_VAR 0 2
55747: IFFALSE 55754
// enable ( mpWin ) else
55749: LD_INT 101
55751: ENABLE_MARKED
55752: GO 55755
// enable ;
55754: ENABLE
// end ; end ;
55755: PPOPN 2
55757: END
// function EnemiesInGame ; var i ; begin
55758: LD_INT 0
55760: PPUSH
55761: PPUSH
// result := false ;
55762: LD_ADDR_VAR 0 1
55766: PUSH
55767: LD_INT 0
55769: ST_TO_ADDR
// for i := 1 to 8 do
55770: LD_ADDR_VAR 0 2
55774: PUSH
55775: DOUBLE
55776: LD_INT 1
55778: DEC
55779: ST_TO_ADDR
55780: LD_INT 8
55782: PUSH
55783: FOR_TO
55784: IFFALSE 55899
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55786: LD_VAR 0 2
55790: PUSH
55791: LD_OWVAR 2
55795: NONEQUAL
55796: IFFALSE 55809
55798: PUSH
55799: LD_VAR 0 2
55803: PPUSH
55804: CALL 55948 0 1
55808: AND
55809: IFFALSE 55822
55811: PUSH
55812: LD_VAR 0 2
55816: PPUSH
55817: CALL_OW 108
55821: AND
55822: IFFALSE 55897
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55824: LD_EXP 10
55828: PUSH
55829: LD_VAR 0 2
55833: ARRAY
55834: NOT
55835: IFTRUE 55883
55837: PUSH
55838: LD_EXP 10
55842: PUSH
55843: LD_VAR 0 2
55847: ARRAY
55848: PUSH
55849: LD_EXP 10
55853: PUSH
55854: LD_OWVAR 2
55858: ARRAY
55859: NONEQUAL
55860: IFFALSE 55882
55862: PUSH
55863: LD_OWVAR 2
55867: PPUSH
55868: LD_VAR 0 2
55872: PPUSH
55873: CALL_OW 81
55877: PUSH
55878: LD_INT 1
55880: NONEQUAL
55881: AND
55882: OR
55883: IFFALSE 55897
// begin result := true ;
55885: LD_ADDR_VAR 0 1
55889: PUSH
55890: LD_INT 1
55892: ST_TO_ADDR
// exit ;
55893: POP
55894: POP
55895: GO 55901
// end ;
55897: GO 55783
55899: POP
55900: POP
// end ;
55901: LD_VAR 0 1
55905: RET
// function CanWinLoose ; begin
55906: LD_INT 0
55908: PPUSH
// result := true ;
55909: LD_ADDR_VAR 0 1
55913: PUSH
55914: LD_INT 1
55916: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55917: CALL_OW 531
55921: IFFALSE 55933
55923: PUSH
55924: CALL_OW 519
55928: PUSH
55929: LD_INT 1
55931: GREATER
55932: AND
55933: IFFALSE 55943
// result := false ;
55935: LD_ADDR_VAR 0 1
55939: PUSH
55940: LD_INT 0
55942: ST_TO_ADDR
// end ;
55943: LD_VAR 0 1
55947: RET
// function HasPower ( i ) ; begin
55948: LD_INT 0
55950: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55951: LD_ADDR_VAR 0 2
55955: PUSH
55956: LD_INT 22
55958: PUSH
55959: LD_VAR 0 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 21
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 33
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 33
55993: PUSH
55994: LD_INT 5
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PPUSH
56011: CALL_OW 69
56015: ST_TO_ADDR
// end ; end_of_file end_of_file
56016: LD_VAR 0 2
56020: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56021: LD_VAR 0 1
56025: PUSH
56026: LD_INT 200
56028: DOUBLE
56029: GREATEREQUAL
56030: IFFALSE 56038
56032: LD_INT 299
56034: DOUBLE
56035: LESSEQUAL
56036: IFTRUE 56040
56038: GO 56072
56040: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56041: LD_VAR 0 1
56045: PPUSH
56046: LD_VAR 0 2
56050: PPUSH
56051: LD_VAR 0 3
56055: PPUSH
56056: LD_VAR 0 4
56060: PPUSH
56061: LD_VAR 0 5
56065: PPUSH
56066: CALL 56853 0 5
56070: GO 56149
56072: LD_INT 300
56074: DOUBLE
56075: GREATEREQUAL
56076: IFFALSE 56084
56078: LD_INT 399
56080: DOUBLE
56081: LESSEQUAL
56082: IFTRUE 56086
56084: GO 56148
56086: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56087: LD_VAR 0 1
56091: PPUSH
56092: LD_VAR 0 2
56096: PPUSH
56097: LD_VAR 0 3
56101: PPUSH
56102: LD_VAR 0 4
56106: PPUSH
56107: LD_VAR 0 5
56111: PPUSH
56112: LD_VAR 0 6
56116: PPUSH
56117: LD_VAR 0 7
56121: PPUSH
56122: LD_VAR 0 8
56126: PPUSH
56127: LD_VAR 0 9
56131: PPUSH
56132: LD_VAR 0 10
56136: PPUSH
56137: LD_VAR 0 11
56141: PPUSH
56142: CALL 62258 0 11
56146: GO 56149
56148: POP
// end ;
56149: PPOPN 11
56151: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56152: LD_VAR 0 1
56156: PPUSH
56157: LD_VAR 0 2
56161: PPUSH
56162: LD_VAR 0 3
56166: PPUSH
56167: LD_VAR 0 4
56171: PPUSH
56172: LD_VAR 0 5
56176: PPUSH
56177: CALL 56234 0 5
// end ; end_of_file
56181: PPOPN 5
56183: END
// export function SOS_UnitDestroyed ( un ) ; begin
56184: LD_INT 0
56186: PPUSH
// ComRadiation ( un ) ;
56187: LD_VAR 0 1
56191: PPUSH
56192: CALL 57273 0 1
// end ;
56196: LD_VAR 0 2
56200: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56201: LD_INT 0
56203: PPUSH
// ComRadiation ( un ) ;
56204: LD_VAR 0 1
56208: PPUSH
56209: CALL 57273 0 1
// end ;
56213: LD_VAR 0 2
56217: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56218: LD_INT 0
56220: PPUSH
// end ;
56221: LD_VAR 0 4
56225: RET
// export function SOS_Command ( cmd ) ; begin
56226: LD_INT 0
56228: PPUSH
// end ;
56229: LD_VAR 0 2
56233: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56234: LD_INT 0
56236: PPUSH
// end ;
56237: LD_VAR 0 6
56241: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
56242: LD_INT 0
56244: PPUSH
56245: PPUSH
56246: PPUSH
56247: PPUSH
// if not vehicle or not factory then
56248: LD_VAR 0 1
56252: NOT
56253: IFTRUE 56262
56255: PUSH
56256: LD_VAR 0 2
56260: NOT
56261: OR
56262: IFFALSE 56266
// exit ;
56264: GO 56848
// if not factoryWaypoints then
56266: LD_EXP 61
56270: NOT
56271: IFFALSE 56275
// exit ;
56273: GO 56848
// for i := 1 to Count ( factoryWaypoints ) do
56275: LD_ADDR_VAR 0 4
56279: PUSH
56280: DOUBLE
56281: LD_INT 1
56283: DEC
56284: ST_TO_ADDR
56285: LD_EXP 61
56289: PPUSH
56290: CALL 5732 0 1
56294: PUSH
56295: FOR_TO
56296: IFFALSE 56846
// if factoryWaypoints [ i ] [ 2 ] = factory then
56298: LD_EXP 61
56302: PUSH
56303: LD_VAR 0 4
56307: ARRAY
56308: PUSH
56309: LD_INT 2
56311: ARRAY
56312: PUSH
56313: LD_VAR 0 2
56317: EQUAL
56318: IFFALSE 56844
// begin if GetControl ( vehicle ) = control_manual then
56320: LD_VAR 0 1
56324: PPUSH
56325: CALL_OW 263
56329: PUSH
56330: LD_INT 1
56332: EQUAL
56333: IFFALSE 56697
// begin driver := IsDrivenBy ( vehicle ) ;
56335: LD_ADDR_VAR 0 5
56339: PUSH
56340: LD_VAR 0 1
56344: PPUSH
56345: CALL_OW 311
56349: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56350: LD_VAR 0 5
56354: PUSH
56355: LD_EXP 62
56359: IN
56360: IFTRUE 56374
56362: PUSH
56363: LD_VAR 0 1
56367: PUSH
56368: LD_EXP 62
56372: IN
56373: OR
56374: IFFALSE 56380
// exit ;
56376: POP
56377: POP
56378: GO 56848
// if not HasTask ( driver ) then
56380: LD_VAR 0 5
56384: PPUSH
56385: CALL_OW 314
56389: NOT
56390: IFFALSE 56695
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56392: LD_ADDR_EXP 62
56396: PUSH
56397: LD_EXP 62
56401: PPUSH
56402: LD_VAR 0 5
56406: PPUSH
56407: CALL 41664 0 2
56411: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56412: LD_ADDR_EXP 62
56416: PUSH
56417: LD_EXP 62
56421: PPUSH
56422: LD_VAR 0 1
56426: PPUSH
56427: CALL 41664 0 2
56431: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56432: LD_ADDR_VAR 0 6
56436: PUSH
56437: LD_EXP 61
56441: PUSH
56442: LD_VAR 0 4
56446: ARRAY
56447: PUSH
56448: LD_INT 3
56450: ARRAY
56451: PPUSH
56452: LD_EXP 61
56456: PUSH
56457: LD_VAR 0 4
56461: ARRAY
56462: PUSH
56463: LD_INT 4
56465: ARRAY
56466: PPUSH
56467: CALL_OW 428
56471: ST_TO_ADDR
// if hex then
56472: LD_VAR 0 6
56476: IFFALSE 56494
// ComMoveUnit ( driver , hex ) else
56478: LD_VAR 0 5
56482: PPUSH
56483: LD_VAR 0 6
56487: PPUSH
56488: CALL_OW 112
56492: GO 56578
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56494: LD_VAR 0 1
56498: PPUSH
56499: LD_EXP 61
56503: PUSH
56504: LD_VAR 0 4
56508: ARRAY
56509: PUSH
56510: LD_INT 3
56512: ARRAY
56513: PPUSH
56514: LD_EXP 61
56518: PUSH
56519: LD_VAR 0 4
56523: ARRAY
56524: PUSH
56525: LD_INT 4
56527: ARRAY
56528: PPUSH
56529: CALL_OW 297
56533: PUSH
56534: LD_INT 0
56536: GREATER
56537: IFFALSE 56578
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56539: LD_VAR 0 5
56543: PPUSH
56544: LD_EXP 61
56548: PUSH
56549: LD_VAR 0 4
56553: ARRAY
56554: PUSH
56555: LD_INT 3
56557: ARRAY
56558: PPUSH
56559: LD_EXP 61
56563: PUSH
56564: LD_VAR 0 4
56568: ARRAY
56569: PUSH
56570: LD_INT 4
56572: ARRAY
56573: PPUSH
56574: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56578: LD_VAR 0 5
56582: PPUSH
56583: CALL_OW 181
// if Multiplayer then
56587: LD_OWVAR 4
56591: IFFALSE 56640
// begin repeat wait ( 10 ) ;
56593: LD_INT 10
56595: PPUSH
56596: CALL_OW 67
// until not IsInUnit ( driver ) ;
56600: LD_VAR 0 5
56604: PPUSH
56605: CALL_OW 310
56609: NOT
56610: IFFALSE 56593
// if not HasTask ( driver ) then
56612: LD_VAR 0 5
56616: PPUSH
56617: CALL_OW 314
56621: NOT
56622: IFFALSE 56638
// ComEnterUnit ( driver , factory ) ;
56624: LD_VAR 0 5
56628: PPUSH
56629: LD_VAR 0 2
56633: PPUSH
56634: CALL_OW 120
// end else
56638: GO 56654
// AddComEnterUnit ( driver , factory ) ;
56640: LD_VAR 0 5
56644: PPUSH
56645: LD_VAR 0 2
56649: PPUSH
56650: CALL_OW 180
// wait ( 0 0$1 ) ;
56654: LD_INT 35
56656: PPUSH
56657: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56661: LD_ADDR_EXP 62
56665: PUSH
56666: LD_EXP 62
56670: PUSH
56671: LD_VAR 0 5
56675: DIFF
56676: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56677: LD_ADDR_EXP 62
56681: PUSH
56682: LD_EXP 62
56686: PUSH
56687: LD_VAR 0 1
56691: DIFF
56692: ST_TO_ADDR
// break ;
56693: GO 56846
// end ; end else
56695: GO 56844
// if GetControl ( vehicle ) = control_remote then
56697: LD_VAR 0 1
56701: PPUSH
56702: CALL_OW 263
56706: PUSH
56707: LD_INT 2
56709: EQUAL
56710: IFFALSE 56796
// begin wait ( 0 0$2 ) ;
56712: LD_INT 70
56714: PPUSH
56715: CALL_OW 67
// repeat wait ( 10 ) ;
56719: LD_INT 10
56721: PPUSH
56722: CALL_OW 67
// Connect ( vehicle ) ;
56726: LD_VAR 0 1
56730: PPUSH
56731: CALL 11976 0 1
// until IsControledBy ( vehicle ) ;
56735: LD_VAR 0 1
56739: PPUSH
56740: CALL_OW 312
56744: IFFALSE 56719
// wait ( 10 ) ;
56746: LD_INT 10
56748: PPUSH
56749: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56753: LD_VAR 0 1
56757: PPUSH
56758: LD_EXP 61
56762: PUSH
56763: LD_VAR 0 4
56767: ARRAY
56768: PUSH
56769: LD_INT 3
56771: ARRAY
56772: PPUSH
56773: LD_EXP 61
56777: PUSH
56778: LD_VAR 0 4
56782: ARRAY
56783: PUSH
56784: LD_INT 4
56786: ARRAY
56787: PPUSH
56788: CALL_OW 111
// break ;
56792: GO 56846
// end else
56794: GO 56844
// begin wait ( 0 0$3 ) ;
56796: LD_INT 105
56798: PPUSH
56799: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56803: LD_VAR 0 1
56807: PPUSH
56808: LD_EXP 61
56812: PUSH
56813: LD_VAR 0 4
56817: ARRAY
56818: PUSH
56819: LD_INT 3
56821: ARRAY
56822: PPUSH
56823: LD_EXP 61
56827: PUSH
56828: LD_VAR 0 4
56832: ARRAY
56833: PUSH
56834: LD_INT 4
56836: ARRAY
56837: PPUSH
56838: CALL_OW 111
// break ;
56842: GO 56846
// end ; end ;
56844: GO 56295
56846: POP
56847: POP
// end ;
56848: LD_VAR 0 3
56852: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56853: LD_INT 0
56855: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56856: LD_VAR 0 1
56860: PUSH
56861: LD_INT 250
56863: EQUAL
56864: IFFALSE 56881
56866: PUSH
56867: LD_VAR 0 2
56871: PPUSH
56872: CALL_OW 264
56876: PUSH
56877: LD_INT 81
56879: EQUAL
56880: AND
56881: IFFALSE 56902
// MinerPlaceMine ( unit , x , y ) ;
56883: LD_VAR 0 2
56887: PPUSH
56888: LD_VAR 0 4
56892: PPUSH
56893: LD_VAR 0 5
56897: PPUSH
56898: CALL 60034 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56902: LD_VAR 0 1
56906: PUSH
56907: LD_INT 251
56909: EQUAL
56910: IFFALSE 56927
56912: PUSH
56913: LD_VAR 0 2
56917: PPUSH
56918: CALL_OW 264
56922: PUSH
56923: LD_INT 81
56925: EQUAL
56926: AND
56927: IFFALSE 56948
// MinerDetonateMine ( unit , x , y ) ;
56929: LD_VAR 0 2
56933: PPUSH
56934: LD_VAR 0 4
56938: PPUSH
56939: LD_VAR 0 5
56943: PPUSH
56944: CALL 60313 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56948: LD_VAR 0 1
56952: PUSH
56953: LD_INT 252
56955: EQUAL
56956: IFFALSE 56973
56958: PUSH
56959: LD_VAR 0 2
56963: PPUSH
56964: CALL_OW 264
56968: PUSH
56969: LD_INT 81
56971: EQUAL
56972: AND
56973: IFFALSE 56994
// MinerCreateMinefield ( unit , x , y ) ;
56975: LD_VAR 0 2
56979: PPUSH
56980: LD_VAR 0 4
56984: PPUSH
56985: LD_VAR 0 5
56989: PPUSH
56990: CALL 60732 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56994: LD_VAR 0 1
56998: PUSH
56999: LD_INT 253
57001: EQUAL
57002: IFFALSE 57019
57004: PUSH
57005: LD_VAR 0 2
57009: PPUSH
57010: CALL_OW 257
57014: PUSH
57015: LD_INT 5
57017: EQUAL
57018: AND
57019: IFFALSE 57040
// ComBinocular ( unit , x , y ) ;
57021: LD_VAR 0 2
57025: PPUSH
57026: LD_VAR 0 4
57030: PPUSH
57031: LD_VAR 0 5
57035: PPUSH
57036: CALL 61107 0 3
// if selectedUnit then
57040: LD_VAR 0 3
57044: IFFALSE 57104
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57046: LD_VAR 0 1
57050: PUSH
57051: LD_INT 254
57053: EQUAL
57054: IFFALSE 57071
57056: PUSH
57057: LD_VAR 0 2
57061: PPUSH
57062: CALL_OW 264
57066: PUSH
57067: LD_INT 99
57069: EQUAL
57070: AND
57071: IFFALSE 57088
57073: PUSH
57074: LD_VAR 0 3
57078: PPUSH
57079: CALL_OW 263
57083: PUSH
57084: LD_INT 3
57086: EQUAL
57087: AND
57088: IFFALSE 57104
// HackDestroyVehicle ( unit , selectedUnit ) ;
57090: LD_VAR 0 2
57094: PPUSH
57095: LD_VAR 0 3
57099: PPUSH
57100: CALL 59394 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57104: LD_VAR 0 1
57108: PUSH
57109: LD_INT 255
57111: EQUAL
57112: IFFALSE 57136
57114: PUSH
57115: LD_VAR 0 2
57119: PPUSH
57120: CALL_OW 264
57124: PUSH
57125: LD_INT 14
57127: PUSH
57128: LD_INT 53
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: IN
57135: AND
57136: IFFALSE 57154
57138: PUSH
57139: LD_VAR 0 4
57143: PPUSH
57144: LD_VAR 0 5
57148: PPUSH
57149: CALL_OW 488
57153: AND
57154: IFFALSE 57178
// CutTreeXYR ( unit , x , y , 12 ) ;
57156: LD_VAR 0 2
57160: PPUSH
57161: LD_VAR 0 4
57165: PPUSH
57166: LD_VAR 0 5
57170: PPUSH
57171: LD_INT 12
57173: PPUSH
57174: CALL 57369 0 4
// if cmd = 256 then
57178: LD_VAR 0 1
57182: PUSH
57183: LD_INT 256
57185: EQUAL
57186: IFFALSE 57207
// SetFactoryWaypoint ( unit , x , y ) ;
57188: LD_VAR 0 2
57192: PPUSH
57193: LD_VAR 0 4
57197: PPUSH
57198: LD_VAR 0 5
57202: PPUSH
57203: CALL 62266 0 3
// if cmd = 257 then
57207: LD_VAR 0 1
57211: PUSH
57212: LD_INT 257
57214: EQUAL
57215: IFFALSE 57236
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57217: LD_VAR 0 2
57221: PPUSH
57222: LD_VAR 0 4
57226: PPUSH
57227: LD_VAR 0 5
57231: PPUSH
57232: CALL 62762 0 3
// if cmd = 258 then
57236: LD_VAR 0 1
57240: PUSH
57241: LD_INT 258
57243: EQUAL
57244: IFFALSE 57268
// BurnTreeXYR ( unit , x , y , 8 ) ;
57246: LD_VAR 0 2
57250: PPUSH
57251: LD_VAR 0 4
57255: PPUSH
57256: LD_VAR 0 5
57260: PPUSH
57261: LD_INT 8
57263: PPUSH
57264: CALL 57769 0 4
// end ;
57268: LD_VAR 0 6
57272: RET
// export function ComRadiation ( un ) ; var eff ; begin
57273: LD_INT 0
57275: PPUSH
57276: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 264
57286: PUSH
57287: LD_INT 91
57289: NONEQUAL
57290: IFFALSE 57294
// exit ;
57292: GO 57364
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57294: LD_INT 68
57296: PPUSH
57297: LD_VAR 0 1
57301: PPUSH
57302: CALL_OW 255
57306: PPUSH
57307: CALL_OW 321
57311: PUSH
57312: LD_INT 2
57314: EQUAL
57315: IFFALSE 57327
// eff := 50 else
57317: LD_ADDR_VAR 0 3
57321: PUSH
57322: LD_INT 50
57324: ST_TO_ADDR
57325: GO 57335
// eff := 25 ;
57327: LD_ADDR_VAR 0 3
57331: PUSH
57332: LD_INT 25
57334: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57335: LD_VAR 0 1
57339: PPUSH
57340: CALL_OW 250
57344: PPUSH
57345: LD_VAR 0 1
57349: PPUSH
57350: CALL_OW 251
57354: PPUSH
57355: LD_VAR 0 3
57359: PPUSH
57360: CALL_OW 495
// end ;
57364: LD_VAR 0 2
57368: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57369: LD_INT 0
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
57375: PPUSH
57376: PPUSH
57377: PPUSH
57378: PPUSH
57379: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57380: LD_VAR 0 1
57384: PPUSH
57385: CALL_OW 302
57389: NOT
57390: IFTRUE 57409
57392: PUSH
57393: LD_VAR 0 2
57397: PPUSH
57398: LD_VAR 0 3
57402: PPUSH
57403: CALL_OW 488
57407: NOT
57408: OR
57409: IFTRUE 57418
57411: PUSH
57412: LD_VAR 0 4
57416: NOT
57417: OR
57418: IFFALSE 57422
// exit ;
57420: GO 57764
// list := [ ] ;
57422: LD_ADDR_VAR 0 13
57426: PUSH
57427: EMPTY
57428: ST_TO_ADDR
// if x - r < 0 then
57429: LD_VAR 0 2
57433: PUSH
57434: LD_VAR 0 4
57438: MINUS
57439: PUSH
57440: LD_INT 0
57442: LESS
57443: IFFALSE 57455
// min_x := 0 else
57445: LD_ADDR_VAR 0 7
57449: PUSH
57450: LD_INT 0
57452: ST_TO_ADDR
57453: GO 57471
// min_x := x - r ;
57455: LD_ADDR_VAR 0 7
57459: PUSH
57460: LD_VAR 0 2
57464: PUSH
57465: LD_VAR 0 4
57469: MINUS
57470: ST_TO_ADDR
// if y - r < 0 then
57471: LD_VAR 0 3
57475: PUSH
57476: LD_VAR 0 4
57480: MINUS
57481: PUSH
57482: LD_INT 0
57484: LESS
57485: IFFALSE 57497
// min_y := 0 else
57487: LD_ADDR_VAR 0 8
57491: PUSH
57492: LD_INT 0
57494: ST_TO_ADDR
57495: GO 57513
// min_y := y - r ;
57497: LD_ADDR_VAR 0 8
57501: PUSH
57502: LD_VAR 0 3
57506: PUSH
57507: LD_VAR 0 4
57511: MINUS
57512: ST_TO_ADDR
// max_x := x + r ;
57513: LD_ADDR_VAR 0 9
57517: PUSH
57518: LD_VAR 0 2
57522: PUSH
57523: LD_VAR 0 4
57527: PLUS
57528: ST_TO_ADDR
// max_y := y + r ;
57529: LD_ADDR_VAR 0 10
57533: PUSH
57534: LD_VAR 0 3
57538: PUSH
57539: LD_VAR 0 4
57543: PLUS
57544: ST_TO_ADDR
// for _x = min_x to max_x do
57545: LD_ADDR_VAR 0 11
57549: PUSH
57550: DOUBLE
57551: LD_VAR 0 7
57555: DEC
57556: ST_TO_ADDR
57557: LD_VAR 0 9
57561: PUSH
57562: FOR_TO
57563: IFFALSE 57682
// for _y = min_y to max_y do
57565: LD_ADDR_VAR 0 12
57569: PUSH
57570: DOUBLE
57571: LD_VAR 0 8
57575: DEC
57576: ST_TO_ADDR
57577: LD_VAR 0 10
57581: PUSH
57582: FOR_TO
57583: IFFALSE 57678
// begin if not ValidHex ( _x , _y ) then
57585: LD_VAR 0 11
57589: PPUSH
57590: LD_VAR 0 12
57594: PPUSH
57595: CALL_OW 488
57599: NOT
57600: IFFALSE 57604
// continue ;
57602: GO 57582
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57604: LD_VAR 0 11
57608: PPUSH
57609: LD_VAR 0 12
57613: PPUSH
57614: CALL_OW 351
57618: IFFALSE 57636
57620: PUSH
57621: LD_VAR 0 11
57625: PPUSH
57626: LD_VAR 0 12
57630: PPUSH
57631: CALL_OW 554
57635: AND
57636: IFFALSE 57676
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57638: LD_ADDR_VAR 0 13
57642: PUSH
57643: LD_VAR 0 13
57647: PPUSH
57648: LD_VAR 0 13
57652: PUSH
57653: LD_INT 1
57655: PLUS
57656: PPUSH
57657: LD_VAR 0 11
57661: PUSH
57662: LD_VAR 0 12
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PPUSH
57671: CALL_OW 2
57675: ST_TO_ADDR
// end ;
57676: GO 57582
57678: POP
57679: POP
57680: GO 57562
57682: POP
57683: POP
// if not list then
57684: LD_VAR 0 13
57688: NOT
57689: IFFALSE 57693
// exit ;
57691: GO 57764
// for i in list do
57693: LD_ADDR_VAR 0 6
57697: PUSH
57698: LD_VAR 0 13
57702: PUSH
57703: FOR_IN
57704: IFFALSE 57762
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57706: LD_VAR 0 1
57710: PPUSH
57711: LD_STRING M
57713: PUSH
57714: LD_VAR 0 6
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: PUSH
57723: LD_VAR 0 6
57727: PUSH
57728: LD_INT 2
57730: ARRAY
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: PPUSH
57756: CALL_OW 447
57760: GO 57703
57762: POP
57763: POP
// end ;
57764: LD_VAR 0 5
57768: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57769: LD_INT 0
57771: PPUSH
57772: PPUSH
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
57777: PPUSH
57778: PPUSH
57779: PPUSH
57780: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57781: LD_VAR 0 1
57785: PPUSH
57786: CALL_OW 302
57790: NOT
57791: IFTRUE 57810
57793: PUSH
57794: LD_VAR 0 2
57798: PPUSH
57799: LD_VAR 0 3
57803: PPUSH
57804: CALL_OW 488
57808: NOT
57809: OR
57810: IFTRUE 57819
57812: PUSH
57813: LD_VAR 0 4
57817: NOT
57818: OR
57819: IFFALSE 57823
// exit ;
57821: GO 58340
// list := [ ] ;
57823: LD_ADDR_VAR 0 13
57827: PUSH
57828: EMPTY
57829: ST_TO_ADDR
// if x - r < 0 then
57830: LD_VAR 0 2
57834: PUSH
57835: LD_VAR 0 4
57839: MINUS
57840: PUSH
57841: LD_INT 0
57843: LESS
57844: IFFALSE 57856
// min_x := 0 else
57846: LD_ADDR_VAR 0 7
57850: PUSH
57851: LD_INT 0
57853: ST_TO_ADDR
57854: GO 57872
// min_x := x - r ;
57856: LD_ADDR_VAR 0 7
57860: PUSH
57861: LD_VAR 0 2
57865: PUSH
57866: LD_VAR 0 4
57870: MINUS
57871: ST_TO_ADDR
// if y - r < 0 then
57872: LD_VAR 0 3
57876: PUSH
57877: LD_VAR 0 4
57881: MINUS
57882: PUSH
57883: LD_INT 0
57885: LESS
57886: IFFALSE 57898
// min_y := 0 else
57888: LD_ADDR_VAR 0 8
57892: PUSH
57893: LD_INT 0
57895: ST_TO_ADDR
57896: GO 57914
// min_y := y - r ;
57898: LD_ADDR_VAR 0 8
57902: PUSH
57903: LD_VAR 0 3
57907: PUSH
57908: LD_VAR 0 4
57912: MINUS
57913: ST_TO_ADDR
// max_x := x + r ;
57914: LD_ADDR_VAR 0 9
57918: PUSH
57919: LD_VAR 0 2
57923: PUSH
57924: LD_VAR 0 4
57928: PLUS
57929: ST_TO_ADDR
// max_y := y + r ;
57930: LD_ADDR_VAR 0 10
57934: PUSH
57935: LD_VAR 0 3
57939: PUSH
57940: LD_VAR 0 4
57944: PLUS
57945: ST_TO_ADDR
// for _x = min_x to max_x do
57946: LD_ADDR_VAR 0 11
57950: PUSH
57951: DOUBLE
57952: LD_VAR 0 7
57956: DEC
57957: ST_TO_ADDR
57958: LD_VAR 0 9
57962: PUSH
57963: FOR_TO
57964: IFFALSE 58083
// for _y = min_y to max_y do
57966: LD_ADDR_VAR 0 12
57970: PUSH
57971: DOUBLE
57972: LD_VAR 0 8
57976: DEC
57977: ST_TO_ADDR
57978: LD_VAR 0 10
57982: PUSH
57983: FOR_TO
57984: IFFALSE 58079
// begin if not ValidHex ( _x , _y ) then
57986: LD_VAR 0 11
57990: PPUSH
57991: LD_VAR 0 12
57995: PPUSH
57996: CALL_OW 488
58000: NOT
58001: IFFALSE 58005
// continue ;
58003: GO 57983
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58005: LD_VAR 0 11
58009: PPUSH
58010: LD_VAR 0 12
58014: PPUSH
58015: CALL_OW 351
58019: IFFALSE 58037
58021: PUSH
58022: LD_VAR 0 11
58026: PPUSH
58027: LD_VAR 0 12
58031: PPUSH
58032: CALL_OW 554
58036: AND
58037: IFFALSE 58077
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58039: LD_ADDR_VAR 0 13
58043: PUSH
58044: LD_VAR 0 13
58048: PPUSH
58049: LD_VAR 0 13
58053: PUSH
58054: LD_INT 1
58056: PLUS
58057: PPUSH
58058: LD_VAR 0 11
58062: PUSH
58063: LD_VAR 0 12
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PPUSH
58072: CALL_OW 2
58076: ST_TO_ADDR
// end ;
58077: GO 57983
58079: POP
58080: POP
58081: GO 57963
58083: POP
58084: POP
// if not list then
58085: LD_VAR 0 13
58089: NOT
58090: IFFALSE 58094
// exit ;
58092: GO 58340
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58094: LD_ADDR_VAR 0 13
58098: PUSH
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_VAR 0 13
58108: PPUSH
58109: LD_INT 1
58111: PPUSH
58112: LD_INT 1
58114: PPUSH
58115: CALL 9104 0 4
58119: ST_TO_ADDR
// ComStop ( flame ) ;
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 141
// for i in list do
58129: LD_ADDR_VAR 0 6
58133: PUSH
58134: LD_VAR 0 13
58138: PUSH
58139: FOR_IN
58140: IFFALSE 58171
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58142: LD_VAR 0 1
58146: PPUSH
58147: LD_VAR 0 6
58151: PUSH
58152: LD_INT 1
58154: ARRAY
58155: PPUSH
58156: LD_VAR 0 6
58160: PUSH
58161: LD_INT 2
58163: ARRAY
58164: PPUSH
58165: CALL_OW 176
58169: GO 58139
58171: POP
58172: POP
// repeat wait ( 0 0$1 ) ;
58173: LD_INT 35
58175: PPUSH
58176: CALL_OW 67
// task := GetTaskList ( flame ) ;
58180: LD_ADDR_VAR 0 14
58184: PUSH
58185: LD_VAR 0 1
58189: PPUSH
58190: CALL_OW 437
58194: ST_TO_ADDR
// if not task then
58195: LD_VAR 0 14
58199: NOT
58200: IFFALSE 58204
// exit ;
58202: GO 58340
// if task [ 1 ] [ 1 ] <> | then
58204: LD_VAR 0 14
58208: PUSH
58209: LD_INT 1
58211: ARRAY
58212: PUSH
58213: LD_INT 1
58215: ARRAY
58216: PUSH
58217: LD_STRING |
58219: NONEQUAL
58220: IFFALSE 58224
// exit ;
58222: GO 58340
// _x := task [ 1 ] [ 2 ] ;
58224: LD_ADDR_VAR 0 11
58228: PUSH
58229: LD_VAR 0 14
58233: PUSH
58234: LD_INT 1
58236: ARRAY
58237: PUSH
58238: LD_INT 2
58240: ARRAY
58241: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58242: LD_ADDR_VAR 0 12
58246: PUSH
58247: LD_VAR 0 14
58251: PUSH
58252: LD_INT 1
58254: ARRAY
58255: PUSH
58256: LD_INT 3
58258: ARRAY
58259: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58260: LD_VAR 0 11
58264: PPUSH
58265: LD_VAR 0 12
58269: PPUSH
58270: CALL_OW 351
58274: NOT
58275: IFTRUE 58294
58277: PUSH
58278: LD_VAR 0 11
58282: PPUSH
58283: LD_VAR 0 12
58287: PPUSH
58288: CALL_OW 554
58292: NOT
58293: OR
58294: IFFALSE 58328
// begin task := Delete ( task , 1 ) ;
58296: LD_ADDR_VAR 0 14
58300: PUSH
58301: LD_VAR 0 14
58305: PPUSH
58306: LD_INT 1
58308: PPUSH
58309: CALL_OW 3
58313: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58314: LD_VAR 0 1
58318: PPUSH
58319: LD_VAR 0 14
58323: PPUSH
58324: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58328: LD_VAR 0 1
58332: PPUSH
58333: CALL_OW 314
58337: NOT
58338: IFFALSE 58173
// end ;
58340: LD_VAR 0 5
58344: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58345: LD_EXP 51
58349: NOT
58350: IFFALSE 58400
58352: GO 58354
58354: DISABLE
// begin initHack := true ;
58355: LD_ADDR_EXP 51
58359: PUSH
58360: LD_INT 1
58362: ST_TO_ADDR
// hackTanks := [ ] ;
58363: LD_ADDR_EXP 52
58367: PUSH
58368: EMPTY
58369: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58370: LD_ADDR_EXP 53
58374: PUSH
58375: EMPTY
58376: ST_TO_ADDR
// hackLimit := 3 ;
58377: LD_ADDR_EXP 54
58381: PUSH
58382: LD_INT 3
58384: ST_TO_ADDR
// hackDist := 12 ;
58385: LD_ADDR_EXP 55
58389: PUSH
58390: LD_INT 12
58392: ST_TO_ADDR
// hackCounter := [ ] ;
58393: LD_ADDR_EXP 56
58397: PUSH
58398: EMPTY
58399: ST_TO_ADDR
// end ;
58400: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58401: LD_EXP 51
58405: IFFALSE 58423
58407: PUSH
58408: LD_INT 34
58410: PUSH
58411: LD_INT 99
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PPUSH
58418: CALL_OW 69
58422: AND
58423: IFFALSE 58676
58425: GO 58427
58427: DISABLE
58428: LD_INT 0
58430: PPUSH
58431: PPUSH
// begin enable ;
58432: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58433: LD_ADDR_VAR 0 1
58437: PUSH
58438: LD_INT 34
58440: PUSH
58441: LD_INT 99
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PPUSH
58448: CALL_OW 69
58452: PUSH
58453: FOR_IN
58454: IFFALSE 58674
// begin if not i in hackTanks then
58456: LD_VAR 0 1
58460: PUSH
58461: LD_EXP 52
58465: IN
58466: NOT
58467: IFFALSE 58550
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58469: LD_ADDR_EXP 52
58473: PUSH
58474: LD_EXP 52
58478: PPUSH
58479: LD_EXP 52
58483: PUSH
58484: LD_INT 1
58486: PLUS
58487: PPUSH
58488: LD_VAR 0 1
58492: PPUSH
58493: CALL_OW 1
58497: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58498: LD_ADDR_EXP 53
58502: PUSH
58503: LD_EXP 53
58507: PPUSH
58508: LD_EXP 53
58512: PUSH
58513: LD_INT 1
58515: PLUS
58516: PPUSH
58517: EMPTY
58518: PPUSH
58519: CALL_OW 1
58523: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58524: LD_ADDR_EXP 56
58528: PUSH
58529: LD_EXP 56
58533: PPUSH
58534: LD_EXP 56
58538: PUSH
58539: LD_INT 1
58541: PLUS
58542: PPUSH
58543: EMPTY
58544: PPUSH
58545: CALL_OW 1
58549: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58550: LD_VAR 0 1
58554: PPUSH
58555: CALL_OW 302
58559: NOT
58560: IFFALSE 58573
// begin HackUnlinkAll ( i ) ;
58562: LD_VAR 0 1
58566: PPUSH
58567: CALL 58679 0 1
// continue ;
58571: GO 58453
// end ; HackCheckCapturedStatus ( i ) ;
58573: LD_VAR 0 1
58577: PPUSH
58578: CALL 59124 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58582: LD_ADDR_VAR 0 2
58586: PUSH
58587: LD_INT 81
58589: PUSH
58590: LD_VAR 0 1
58594: PPUSH
58595: CALL_OW 255
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 33
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 91
58616: PUSH
58617: LD_VAR 0 1
58621: PUSH
58622: LD_EXP 55
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 50
58634: PUSH
58635: EMPTY
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: PPUSH
58644: CALL_OW 69
58648: ST_TO_ADDR
// if not tmp then
58649: LD_VAR 0 2
58653: NOT
58654: IFFALSE 58658
// continue ;
58656: GO 58453
// HackLink ( i , tmp ) ;
58658: LD_VAR 0 1
58662: PPUSH
58663: LD_VAR 0 2
58667: PPUSH
58668: CALL 58815 0 2
// end ;
58672: GO 58453
58674: POP
58675: POP
// end ;
58676: PPOPN 2
58678: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58679: LD_INT 0
58681: PPUSH
58682: PPUSH
58683: PPUSH
// if not hack in hackTanks then
58684: LD_VAR 0 1
58688: PUSH
58689: LD_EXP 52
58693: IN
58694: NOT
58695: IFFALSE 58699
// exit ;
58697: GO 58810
// index := GetElementIndex ( hackTanks , hack ) ;
58699: LD_ADDR_VAR 0 4
58703: PUSH
58704: LD_EXP 52
58708: PPUSH
58709: LD_VAR 0 1
58713: PPUSH
58714: CALL 8399 0 2
58718: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58719: LD_EXP 53
58723: PUSH
58724: LD_VAR 0 4
58728: ARRAY
58729: IFFALSE 58810
// begin for i in hackTanksCaptured [ index ] do
58731: LD_ADDR_VAR 0 3
58735: PUSH
58736: LD_EXP 53
58740: PUSH
58741: LD_VAR 0 4
58745: ARRAY
58746: PUSH
58747: FOR_IN
58748: IFFALSE 58774
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58750: LD_VAR 0 3
58754: PUSH
58755: LD_INT 1
58757: ARRAY
58758: PPUSH
58759: LD_VAR 0 3
58763: PUSH
58764: LD_INT 2
58766: ARRAY
58767: PPUSH
58768: CALL_OW 235
58772: GO 58747
58774: POP
58775: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58776: LD_ADDR_EXP 53
58780: PUSH
58781: LD_EXP 53
58785: PPUSH
58786: LD_VAR 0 4
58790: PPUSH
58791: EMPTY
58792: PPUSH
58793: CALL_OW 1
58797: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58798: LD_VAR 0 1
58802: PPUSH
58803: LD_INT 0
58805: PPUSH
58806: CALL_OW 505
// end ; end ;
58810: LD_VAR 0 2
58814: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58815: LD_INT 0
58817: PPUSH
58818: PPUSH
58819: PPUSH
// if not hack in hackTanks or not vehicles then
58820: LD_VAR 0 1
58824: PUSH
58825: LD_EXP 52
58829: IN
58830: NOT
58831: IFTRUE 58840
58833: PUSH
58834: LD_VAR 0 2
58838: NOT
58839: OR
58840: IFFALSE 58844
// exit ;
58842: GO 59119
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58844: LD_ADDR_VAR 0 2
58848: PUSH
58849: LD_VAR 0 1
58853: PPUSH
58854: LD_VAR 0 2
58858: PPUSH
58859: LD_INT 1
58861: PPUSH
58862: LD_INT 1
58864: PPUSH
58865: CALL 9051 0 4
58869: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58870: LD_ADDR_VAR 0 5
58874: PUSH
58875: LD_EXP 52
58879: PPUSH
58880: LD_VAR 0 1
58884: PPUSH
58885: CALL 8399 0 2
58889: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58890: LD_EXP 53
58894: PUSH
58895: LD_VAR 0 5
58899: ARRAY
58900: PUSH
58901: LD_EXP 54
58905: LESS
58906: IFFALSE 59095
// begin for i := 1 to vehicles do
58908: LD_ADDR_VAR 0 4
58912: PUSH
58913: DOUBLE
58914: LD_INT 1
58916: DEC
58917: ST_TO_ADDR
58918: LD_VAR 0 2
58922: PUSH
58923: FOR_TO
58924: IFFALSE 59093
// begin if hackTanksCaptured [ index ] = hackLimit then
58926: LD_EXP 53
58930: PUSH
58931: LD_VAR 0 5
58935: ARRAY
58936: PUSH
58937: LD_EXP 54
58941: EQUAL
58942: IFFALSE 58946
// break ;
58944: GO 59093
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58946: LD_ADDR_EXP 56
58950: PUSH
58951: LD_EXP 56
58955: PPUSH
58956: LD_VAR 0 5
58960: PPUSH
58961: LD_EXP 56
58965: PUSH
58966: LD_VAR 0 5
58970: ARRAY
58971: PUSH
58972: LD_INT 1
58974: PLUS
58975: PPUSH
58976: CALL_OW 1
58980: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58981: LD_ADDR_EXP 53
58985: PUSH
58986: LD_EXP 53
58990: PPUSH
58991: LD_VAR 0 5
58995: PUSH
58996: LD_EXP 53
59000: PUSH
59001: LD_VAR 0 5
59005: ARRAY
59006: PUSH
59007: LD_INT 1
59009: PLUS
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PPUSH
59015: LD_VAR 0 2
59019: PUSH
59020: LD_VAR 0 4
59024: ARRAY
59025: PUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_VAR 0 4
59035: ARRAY
59036: PPUSH
59037: CALL_OW 255
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PPUSH
59046: CALL 8616 0 3
59050: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59051: LD_VAR 0 2
59055: PUSH
59056: LD_VAR 0 4
59060: ARRAY
59061: PPUSH
59062: LD_VAR 0 1
59066: PPUSH
59067: CALL_OW 255
59071: PPUSH
59072: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59076: LD_VAR 0 2
59080: PUSH
59081: LD_VAR 0 4
59085: ARRAY
59086: PPUSH
59087: CALL_OW 141
// end ;
59091: GO 58923
59093: POP
59094: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59095: LD_VAR 0 1
59099: PPUSH
59100: LD_EXP 53
59104: PUSH
59105: LD_VAR 0 5
59109: ARRAY
59110: PUSH
59111: LD_INT 0
59113: PLUS
59114: PPUSH
59115: CALL_OW 505
// end ;
59119: LD_VAR 0 3
59123: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59124: LD_INT 0
59126: PPUSH
59127: PPUSH
59128: PPUSH
59129: PPUSH
// if not hack in hackTanks then
59130: LD_VAR 0 1
59134: PUSH
59135: LD_EXP 52
59139: IN
59140: NOT
59141: IFFALSE 59145
// exit ;
59143: GO 59389
// index := GetElementIndex ( hackTanks , hack ) ;
59145: LD_ADDR_VAR 0 4
59149: PUSH
59150: LD_EXP 52
59154: PPUSH
59155: LD_VAR 0 1
59159: PPUSH
59160: CALL 8399 0 2
59164: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59165: LD_ADDR_VAR 0 3
59169: PUSH
59170: DOUBLE
59171: LD_EXP 53
59175: PUSH
59176: LD_VAR 0 4
59180: ARRAY
59181: INC
59182: ST_TO_ADDR
59183: LD_INT 1
59185: PUSH
59186: FOR_DOWNTO
59187: IFFALSE 59363
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59189: LD_ADDR_VAR 0 5
59193: PUSH
59194: LD_EXP 53
59198: PUSH
59199: LD_VAR 0 4
59203: ARRAY
59204: PUSH
59205: LD_VAR 0 3
59209: ARRAY
59210: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59211: LD_VAR 0 5
59215: PUSH
59216: LD_INT 1
59218: ARRAY
59219: PPUSH
59220: CALL_OW 302
59224: NOT
59225: IFTRUE 59253
59227: PUSH
59228: LD_VAR 0 5
59232: PUSH
59233: LD_INT 1
59235: ARRAY
59236: PPUSH
59237: CALL_OW 255
59241: PUSH
59242: LD_VAR 0 1
59246: PPUSH
59247: CALL_OW 255
59251: NONEQUAL
59252: OR
59253: IFFALSE 59361
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59255: LD_VAR 0 5
59259: PUSH
59260: LD_INT 1
59262: ARRAY
59263: PPUSH
59264: CALL_OW 305
59268: IFFALSE 59296
59270: PUSH
59271: LD_VAR 0 5
59275: PUSH
59276: LD_INT 1
59278: ARRAY
59279: PPUSH
59280: CALL_OW 255
59284: PUSH
59285: LD_VAR 0 1
59289: PPUSH
59290: CALL_OW 255
59294: EQUAL
59295: AND
59296: IFFALSE 59320
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59298: LD_VAR 0 5
59302: PUSH
59303: LD_INT 1
59305: ARRAY
59306: PPUSH
59307: LD_VAR 0 5
59311: PUSH
59312: LD_INT 2
59314: ARRAY
59315: PPUSH
59316: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59320: LD_ADDR_EXP 53
59324: PUSH
59325: LD_EXP 53
59329: PPUSH
59330: LD_VAR 0 4
59334: PPUSH
59335: LD_EXP 53
59339: PUSH
59340: LD_VAR 0 4
59344: ARRAY
59345: PPUSH
59346: LD_VAR 0 3
59350: PPUSH
59351: CALL_OW 3
59355: PPUSH
59356: CALL_OW 1
59360: ST_TO_ADDR
// end ; end ;
59361: GO 59186
59363: POP
59364: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59365: LD_VAR 0 1
59369: PPUSH
59370: LD_EXP 53
59374: PUSH
59375: LD_VAR 0 4
59379: ARRAY
59380: PUSH
59381: LD_INT 0
59383: PLUS
59384: PPUSH
59385: CALL_OW 505
// end ;
59389: LD_VAR 0 2
59393: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59394: LD_INT 0
59396: PPUSH
59397: PPUSH
59398: PPUSH
59399: PPUSH
// if not hack in hackTanks then
59400: LD_VAR 0 1
59404: PUSH
59405: LD_EXP 52
59409: IN
59410: NOT
59411: IFFALSE 59415
// exit ;
59413: GO 59500
// index := GetElementIndex ( hackTanks , hack ) ;
59415: LD_ADDR_VAR 0 5
59419: PUSH
59420: LD_EXP 52
59424: PPUSH
59425: LD_VAR 0 1
59429: PPUSH
59430: CALL 8399 0 2
59434: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59435: LD_ADDR_VAR 0 4
59439: PUSH
59440: DOUBLE
59441: LD_INT 1
59443: DEC
59444: ST_TO_ADDR
59445: LD_EXP 53
59449: PUSH
59450: LD_VAR 0 5
59454: ARRAY
59455: PUSH
59456: FOR_TO
59457: IFFALSE 59498
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59459: LD_EXP 53
59463: PUSH
59464: LD_VAR 0 5
59468: ARRAY
59469: PUSH
59470: LD_VAR 0 4
59474: ARRAY
59475: PUSH
59476: LD_INT 1
59478: ARRAY
59479: PUSH
59480: LD_VAR 0 2
59484: EQUAL
59485: IFFALSE 59496
// KillUnit ( vehicle ) ;
59487: LD_VAR 0 2
59491: PPUSH
59492: CALL_OW 66
59496: GO 59456
59498: POP
59499: POP
// end ;
59500: LD_VAR 0 3
59504: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59505: LD_EXP 57
59509: NOT
59510: IFFALSE 59545
59512: GO 59514
59514: DISABLE
// begin initMiner := true ;
59515: LD_ADDR_EXP 57
59519: PUSH
59520: LD_INT 1
59522: ST_TO_ADDR
// minersList := [ ] ;
59523: LD_ADDR_EXP 58
59527: PUSH
59528: EMPTY
59529: ST_TO_ADDR
// minerMinesList := [ ] ;
59530: LD_ADDR_EXP 59
59534: PUSH
59535: EMPTY
59536: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59537: LD_ADDR_EXP 60
59541: PUSH
59542: LD_INT 5
59544: ST_TO_ADDR
// end ;
59545: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59546: LD_EXP 57
59550: IFFALSE 59568
59552: PUSH
59553: LD_INT 34
59555: PUSH
59556: LD_INT 81
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PPUSH
59563: CALL_OW 69
59567: AND
59568: IFFALSE 60031
59570: GO 59572
59572: DISABLE
59573: LD_INT 0
59575: PPUSH
59576: PPUSH
59577: PPUSH
59578: PPUSH
// begin enable ;
59579: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59580: LD_ADDR_VAR 0 1
59584: PUSH
59585: LD_INT 34
59587: PUSH
59588: LD_INT 81
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PPUSH
59595: CALL_OW 69
59599: PUSH
59600: FOR_IN
59601: IFFALSE 59673
// begin if not i in minersList then
59603: LD_VAR 0 1
59607: PUSH
59608: LD_EXP 58
59612: IN
59613: NOT
59614: IFFALSE 59671
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59616: LD_ADDR_EXP 58
59620: PUSH
59621: LD_EXP 58
59625: PPUSH
59626: LD_EXP 58
59630: PUSH
59631: LD_INT 1
59633: PLUS
59634: PPUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: CALL_OW 1
59644: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59645: LD_ADDR_EXP 59
59649: PUSH
59650: LD_EXP 59
59654: PPUSH
59655: LD_EXP 59
59659: PUSH
59660: LD_INT 1
59662: PLUS
59663: PPUSH
59664: EMPTY
59665: PPUSH
59666: CALL_OW 1
59670: ST_TO_ADDR
// end end ;
59671: GO 59600
59673: POP
59674: POP
// for i := minerMinesList downto 1 do
59675: LD_ADDR_VAR 0 1
59679: PUSH
59680: DOUBLE
59681: LD_EXP 59
59685: INC
59686: ST_TO_ADDR
59687: LD_INT 1
59689: PUSH
59690: FOR_DOWNTO
59691: IFFALSE 60029
// begin if IsLive ( minersList [ i ] ) then
59693: LD_EXP 58
59697: PUSH
59698: LD_VAR 0 1
59702: ARRAY
59703: PPUSH
59704: CALL_OW 300
59708: IFFALSE 59736
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59710: LD_EXP 58
59714: PUSH
59715: LD_VAR 0 1
59719: ARRAY
59720: PPUSH
59721: LD_EXP 59
59725: PUSH
59726: LD_VAR 0 1
59730: ARRAY
59731: PPUSH
59732: CALL_OW 505
// if not minerMinesList [ i ] then
59736: LD_EXP 59
59740: PUSH
59741: LD_VAR 0 1
59745: ARRAY
59746: NOT
59747: IFFALSE 59751
// continue ;
59749: GO 59690
// for j := minerMinesList [ i ] downto 1 do
59751: LD_ADDR_VAR 0 2
59755: PUSH
59756: DOUBLE
59757: LD_EXP 59
59761: PUSH
59762: LD_VAR 0 1
59766: ARRAY
59767: INC
59768: ST_TO_ADDR
59769: LD_INT 1
59771: PUSH
59772: FOR_DOWNTO
59773: IFFALSE 60025
// begin side := GetSide ( minersList [ i ] ) ;
59775: LD_ADDR_VAR 0 3
59779: PUSH
59780: LD_EXP 58
59784: PUSH
59785: LD_VAR 0 1
59789: ARRAY
59790: PPUSH
59791: CALL_OW 255
59795: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59796: LD_ADDR_VAR 0 4
59800: PUSH
59801: LD_EXP 59
59805: PUSH
59806: LD_VAR 0 1
59810: ARRAY
59811: PUSH
59812: LD_VAR 0 2
59816: ARRAY
59817: PUSH
59818: LD_INT 1
59820: ARRAY
59821: PPUSH
59822: LD_EXP 59
59826: PUSH
59827: LD_VAR 0 1
59831: ARRAY
59832: PUSH
59833: LD_VAR 0 2
59837: ARRAY
59838: PUSH
59839: LD_INT 2
59841: ARRAY
59842: PPUSH
59843: CALL_OW 428
59847: ST_TO_ADDR
// if not tmp then
59848: LD_VAR 0 4
59852: NOT
59853: IFFALSE 59857
// continue ;
59855: GO 59772
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59857: LD_VAR 0 4
59861: PUSH
59862: LD_INT 81
59864: PUSH
59865: LD_VAR 0 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PPUSH
59874: CALL_OW 69
59878: IN
59879: IFFALSE 59929
59881: PUSH
59882: LD_EXP 59
59886: PUSH
59887: LD_VAR 0 1
59891: ARRAY
59892: PUSH
59893: LD_VAR 0 2
59897: ARRAY
59898: PUSH
59899: LD_INT 1
59901: ARRAY
59902: PPUSH
59903: LD_EXP 59
59907: PUSH
59908: LD_VAR 0 1
59912: ARRAY
59913: PUSH
59914: LD_VAR 0 2
59918: ARRAY
59919: PUSH
59920: LD_INT 2
59922: ARRAY
59923: PPUSH
59924: CALL_OW 458
59928: AND
59929: IFFALSE 60023
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59931: LD_EXP 59
59935: PUSH
59936: LD_VAR 0 1
59940: ARRAY
59941: PUSH
59942: LD_VAR 0 2
59946: ARRAY
59947: PUSH
59948: LD_INT 1
59950: ARRAY
59951: PPUSH
59952: LD_EXP 59
59956: PUSH
59957: LD_VAR 0 1
59961: ARRAY
59962: PUSH
59963: LD_VAR 0 2
59967: ARRAY
59968: PUSH
59969: LD_INT 2
59971: ARRAY
59972: PPUSH
59973: LD_VAR 0 3
59977: PPUSH
59978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59982: LD_ADDR_EXP 59
59986: PUSH
59987: LD_EXP 59
59991: PPUSH
59992: LD_VAR 0 1
59996: PPUSH
59997: LD_EXP 59
60001: PUSH
60002: LD_VAR 0 1
60006: ARRAY
60007: PPUSH
60008: LD_VAR 0 2
60012: PPUSH
60013: CALL_OW 3
60017: PPUSH
60018: CALL_OW 1
60022: ST_TO_ADDR
// end ; end ;
60023: GO 59772
60025: POP
60026: POP
// end ;
60027: GO 59690
60029: POP
60030: POP
// end ;
60031: PPOPN 4
60033: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60034: LD_INT 0
60036: PPUSH
60037: PPUSH
// result := false ;
60038: LD_ADDR_VAR 0 4
60042: PUSH
60043: LD_INT 0
60045: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60046: LD_VAR 0 1
60050: PPUSH
60051: CALL_OW 264
60055: PUSH
60056: LD_INT 81
60058: EQUAL
60059: NOT
60060: IFFALSE 60064
// exit ;
60062: GO 60308
// index := GetElementIndex ( minersList , unit ) ;
60064: LD_ADDR_VAR 0 5
60068: PUSH
60069: LD_EXP 58
60073: PPUSH
60074: LD_VAR 0 1
60078: PPUSH
60079: CALL 8399 0 2
60083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60084: LD_EXP 59
60088: PUSH
60089: LD_VAR 0 5
60093: ARRAY
60094: PUSH
60095: LD_EXP 60
60099: GREATEREQUAL
60100: IFFALSE 60104
// exit ;
60102: GO 60308
// ComMoveXY ( unit , x , y ) ;
60104: LD_VAR 0 1
60108: PPUSH
60109: LD_VAR 0 2
60113: PPUSH
60114: LD_VAR 0 3
60118: PPUSH
60119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60123: LD_INT 35
60125: PPUSH
60126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60130: LD_VAR 0 1
60134: PPUSH
60135: LD_VAR 0 2
60139: PPUSH
60140: LD_VAR 0 3
60144: PPUSH
60145: CALL 40445 0 3
60149: NOT
60150: IFFALSE 60163
60152: PUSH
60153: LD_VAR 0 1
60157: PPUSH
60158: CALL_OW 314
60162: AND
60163: IFFALSE 60167
// exit ;
60165: GO 60308
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60167: LD_VAR 0 2
60171: PPUSH
60172: LD_VAR 0 3
60176: PPUSH
60177: CALL_OW 428
60181: PUSH
60182: LD_VAR 0 1
60186: EQUAL
60187: IFFALSE 60201
60189: PUSH
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL_OW 314
60199: NOT
60200: AND
60201: IFFALSE 60123
// PlaySoundXY ( x , y , PlantMine ) ;
60203: LD_VAR 0 2
60207: PPUSH
60208: LD_VAR 0 3
60212: PPUSH
60213: LD_STRING PlantMine
60215: PPUSH
60216: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60220: LD_VAR 0 2
60224: PPUSH
60225: LD_VAR 0 3
60229: PPUSH
60230: LD_VAR 0 1
60234: PPUSH
60235: CALL_OW 255
60239: PPUSH
60240: LD_INT 0
60242: PPUSH
60243: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60247: LD_ADDR_EXP 59
60251: PUSH
60252: LD_EXP 59
60256: PPUSH
60257: LD_VAR 0 5
60261: PUSH
60262: LD_EXP 59
60266: PUSH
60267: LD_VAR 0 5
60271: ARRAY
60272: PUSH
60273: LD_INT 1
60275: PLUS
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PPUSH
60281: LD_VAR 0 2
60285: PUSH
60286: LD_VAR 0 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PPUSH
60295: CALL 8616 0 3
60299: ST_TO_ADDR
// result := true ;
60300: LD_ADDR_VAR 0 4
60304: PUSH
60305: LD_INT 1
60307: ST_TO_ADDR
// end ;
60308: LD_VAR 0 4
60312: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60313: LD_INT 0
60315: PPUSH
60316: PPUSH
60317: PPUSH
// if not unit in minersList then
60318: LD_VAR 0 1
60322: PUSH
60323: LD_EXP 58
60327: IN
60328: NOT
60329: IFFALSE 60333
// exit ;
60331: GO 60727
// index := GetElementIndex ( minersList , unit ) ;
60333: LD_ADDR_VAR 0 6
60337: PUSH
60338: LD_EXP 58
60342: PPUSH
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL 8399 0 2
60352: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60353: LD_ADDR_VAR 0 5
60357: PUSH
60358: DOUBLE
60359: LD_EXP 59
60363: PUSH
60364: LD_VAR 0 6
60368: ARRAY
60369: INC
60370: ST_TO_ADDR
60371: LD_INT 1
60373: PUSH
60374: FOR_DOWNTO
60375: IFFALSE 60538
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60377: LD_EXP 59
60381: PUSH
60382: LD_VAR 0 6
60386: ARRAY
60387: PUSH
60388: LD_VAR 0 5
60392: ARRAY
60393: PUSH
60394: LD_INT 1
60396: ARRAY
60397: PUSH
60398: LD_VAR 0 2
60402: EQUAL
60403: IFFALSE 60433
60405: PUSH
60406: LD_EXP 59
60410: PUSH
60411: LD_VAR 0 6
60415: ARRAY
60416: PUSH
60417: LD_VAR 0 5
60421: ARRAY
60422: PUSH
60423: LD_INT 2
60425: ARRAY
60426: PUSH
60427: LD_VAR 0 3
60431: EQUAL
60432: AND
60433: IFFALSE 60536
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60435: LD_EXP 59
60439: PUSH
60440: LD_VAR 0 6
60444: ARRAY
60445: PUSH
60446: LD_VAR 0 5
60450: ARRAY
60451: PUSH
60452: LD_INT 1
60454: ARRAY
60455: PPUSH
60456: LD_EXP 59
60460: PUSH
60461: LD_VAR 0 6
60465: ARRAY
60466: PUSH
60467: LD_VAR 0 5
60471: ARRAY
60472: PUSH
60473: LD_INT 2
60475: ARRAY
60476: PPUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 255
60486: PPUSH
60487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60491: LD_ADDR_EXP 59
60495: PUSH
60496: LD_EXP 59
60500: PPUSH
60501: LD_VAR 0 6
60505: PPUSH
60506: LD_EXP 59
60510: PUSH
60511: LD_VAR 0 6
60515: ARRAY
60516: PPUSH
60517: LD_VAR 0 5
60521: PPUSH
60522: CALL_OW 3
60526: PPUSH
60527: CALL_OW 1
60531: ST_TO_ADDR
// exit ;
60532: POP
60533: POP
60534: GO 60727
// end ; end ;
60536: GO 60374
60538: POP
60539: POP
// for i := minerMinesList [ index ] downto 1 do
60540: LD_ADDR_VAR 0 5
60544: PUSH
60545: DOUBLE
60546: LD_EXP 59
60550: PUSH
60551: LD_VAR 0 6
60555: ARRAY
60556: INC
60557: ST_TO_ADDR
60558: LD_INT 1
60560: PUSH
60561: FOR_DOWNTO
60562: IFFALSE 60725
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60564: LD_EXP 59
60568: PUSH
60569: LD_VAR 0 6
60573: ARRAY
60574: PUSH
60575: LD_VAR 0 5
60579: ARRAY
60580: PUSH
60581: LD_INT 1
60583: ARRAY
60584: PPUSH
60585: LD_EXP 59
60589: PUSH
60590: LD_VAR 0 6
60594: ARRAY
60595: PUSH
60596: LD_VAR 0 5
60600: ARRAY
60601: PUSH
60602: LD_INT 2
60604: ARRAY
60605: PPUSH
60606: LD_VAR 0 2
60610: PPUSH
60611: LD_VAR 0 3
60615: PPUSH
60616: CALL_OW 298
60620: PUSH
60621: LD_INT 6
60623: LESS
60624: IFFALSE 60723
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60626: LD_EXP 59
60630: PUSH
60631: LD_VAR 0 6
60635: ARRAY
60636: PUSH
60637: LD_VAR 0 5
60641: ARRAY
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PPUSH
60647: LD_EXP 59
60651: PUSH
60652: LD_VAR 0 6
60656: ARRAY
60657: PUSH
60658: LD_VAR 0 5
60662: ARRAY
60663: PUSH
60664: LD_INT 2
60666: ARRAY
60667: PPUSH
60668: LD_VAR 0 1
60672: PPUSH
60673: CALL_OW 255
60677: PPUSH
60678: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60682: LD_ADDR_EXP 59
60686: PUSH
60687: LD_EXP 59
60691: PPUSH
60692: LD_VAR 0 6
60696: PPUSH
60697: LD_EXP 59
60701: PUSH
60702: LD_VAR 0 6
60706: ARRAY
60707: PPUSH
60708: LD_VAR 0 5
60712: PPUSH
60713: CALL_OW 3
60717: PPUSH
60718: CALL_OW 1
60722: ST_TO_ADDR
// end ; end ;
60723: GO 60561
60725: POP
60726: POP
// end ;
60727: LD_VAR 0 4
60731: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60732: LD_INT 0
60734: PPUSH
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
60739: PPUSH
60740: PPUSH
60741: PPUSH
60742: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 264
60752: PUSH
60753: LD_INT 81
60755: EQUAL
60756: NOT
60757: IFTRUE 60772
60759: PUSH
60760: LD_VAR 0 1
60764: PUSH
60765: LD_EXP 58
60769: IN
60770: NOT
60771: OR
60772: IFFALSE 60776
// exit ;
60774: GO 61102
// index := GetElementIndex ( minersList , unit ) ;
60776: LD_ADDR_VAR 0 6
60780: PUSH
60781: LD_EXP 58
60785: PPUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL 8399 0 2
60795: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60796: LD_ADDR_VAR 0 8
60800: PUSH
60801: LD_EXP 60
60805: PUSH
60806: LD_EXP 59
60810: PUSH
60811: LD_VAR 0 6
60815: ARRAY
60816: MINUS
60817: ST_TO_ADDR
// if not minesFreeAmount then
60818: LD_VAR 0 8
60822: NOT
60823: IFFALSE 60827
// exit ;
60825: GO 61102
// tmp := [ ] ;
60827: LD_ADDR_VAR 0 7
60831: PUSH
60832: EMPTY
60833: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60834: LD_ADDR_VAR 0 5
60838: PUSH
60839: DOUBLE
60840: LD_INT 1
60842: DEC
60843: ST_TO_ADDR
60844: LD_VAR 0 8
60848: PUSH
60849: FOR_TO
60850: IFFALSE 61049
// begin _d := rand ( 0 , 5 ) ;
60852: LD_ADDR_VAR 0 11
60856: PUSH
60857: LD_INT 0
60859: PPUSH
60860: LD_INT 5
60862: PPUSH
60863: CALL_OW 12
60867: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60868: LD_ADDR_VAR 0 12
60872: PUSH
60873: LD_INT 2
60875: PPUSH
60876: LD_INT 6
60878: PPUSH
60879: CALL_OW 12
60883: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60884: LD_ADDR_VAR 0 9
60888: PUSH
60889: LD_VAR 0 2
60893: PPUSH
60894: LD_VAR 0 11
60898: PPUSH
60899: LD_VAR 0 12
60903: PPUSH
60904: CALL_OW 272
60908: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60909: LD_ADDR_VAR 0 10
60913: PUSH
60914: LD_VAR 0 3
60918: PPUSH
60919: LD_VAR 0 11
60923: PPUSH
60924: LD_VAR 0 12
60928: PPUSH
60929: CALL_OW 273
60933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60934: LD_VAR 0 9
60938: PPUSH
60939: LD_VAR 0 10
60943: PPUSH
60944: CALL_OW 488
60948: IFFALSE 60972
60950: PUSH
60951: LD_VAR 0 9
60955: PUSH
60956: LD_VAR 0 10
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_VAR 0 7
60969: IN
60970: NOT
60971: AND
60972: IFFALSE 60991
60974: PUSH
60975: LD_VAR 0 9
60979: PPUSH
60980: LD_VAR 0 10
60984: PPUSH
60985: CALL_OW 458
60989: NOT
60990: AND
60991: IFFALSE 61033
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60993: LD_ADDR_VAR 0 7
60997: PUSH
60998: LD_VAR 0 7
61002: PPUSH
61003: LD_VAR 0 7
61007: PUSH
61008: LD_INT 1
61010: PLUS
61011: PPUSH
61012: LD_VAR 0 9
61016: PUSH
61017: LD_VAR 0 10
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PPUSH
61026: CALL_OW 1
61030: ST_TO_ADDR
61031: GO 61047
// i := i - 1 ;
61033: LD_ADDR_VAR 0 5
61037: PUSH
61038: LD_VAR 0 5
61042: PUSH
61043: LD_INT 1
61045: MINUS
61046: ST_TO_ADDR
// end ;
61047: GO 60849
61049: POP
61050: POP
// for i in tmp do
61051: LD_ADDR_VAR 0 5
61055: PUSH
61056: LD_VAR 0 7
61060: PUSH
61061: FOR_IN
61062: IFFALSE 61100
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61064: LD_VAR 0 1
61068: PPUSH
61069: LD_VAR 0 5
61073: PUSH
61074: LD_INT 1
61076: ARRAY
61077: PPUSH
61078: LD_VAR 0 5
61082: PUSH
61083: LD_INT 2
61085: ARRAY
61086: PPUSH
61087: CALL 60034 0 3
61091: NOT
61092: IFFALSE 61098
// exit ;
61094: POP
61095: POP
61096: GO 61102
61098: GO 61061
61100: POP
61101: POP
// end ;
61102: LD_VAR 0 4
61106: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61107: LD_INT 0
61109: PPUSH
61110: PPUSH
61111: PPUSH
61112: PPUSH
61113: PPUSH
61114: PPUSH
61115: PPUSH
61116: PPUSH
61117: PPUSH
// if GetClass ( unit ) <> class_sniper then
61118: LD_VAR 0 1
61122: PPUSH
61123: CALL_OW 257
61127: PUSH
61128: LD_INT 5
61130: NONEQUAL
61131: IFFALSE 61135
// exit ;
61133: GO 61605
// dist := 8 ;
61135: LD_ADDR_VAR 0 5
61139: PUSH
61140: LD_INT 8
61142: ST_TO_ADDR
// viewRange := 12 ;
61143: LD_ADDR_VAR 0 8
61147: PUSH
61148: LD_INT 12
61150: ST_TO_ADDR
// side := GetSide ( unit ) ;
61151: LD_ADDR_VAR 0 6
61155: PUSH
61156: LD_VAR 0 1
61160: PPUSH
61161: CALL_OW 255
61165: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61166: LD_INT 61
61168: PPUSH
61169: LD_VAR 0 6
61173: PPUSH
61174: CALL_OW 321
61178: PUSH
61179: LD_INT 2
61181: EQUAL
61182: IFFALSE 61192
// viewRange := 16 ;
61184: LD_ADDR_VAR 0 8
61188: PUSH
61189: LD_INT 16
61191: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61192: LD_VAR 0 1
61196: PPUSH
61197: LD_VAR 0 2
61201: PPUSH
61202: LD_VAR 0 3
61206: PPUSH
61207: CALL_OW 297
61211: PUSH
61212: LD_VAR 0 5
61216: GREATER
61217: IFFALSE 61296
// begin ComMoveXY ( unit , x , y ) ;
61219: LD_VAR 0 1
61223: PPUSH
61224: LD_VAR 0 2
61228: PPUSH
61229: LD_VAR 0 3
61233: PPUSH
61234: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61238: LD_INT 35
61240: PPUSH
61241: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61245: LD_VAR 0 1
61249: PPUSH
61250: LD_VAR 0 2
61254: PPUSH
61255: LD_VAR 0 3
61259: PPUSH
61260: CALL 40445 0 3
61264: NOT
61265: IFFALSE 61269
// exit ;
61267: GO 61605
// until GetDistUnitXY ( unit , x , y ) < dist ;
61269: LD_VAR 0 1
61273: PPUSH
61274: LD_VAR 0 2
61278: PPUSH
61279: LD_VAR 0 3
61283: PPUSH
61284: CALL_OW 297
61288: PUSH
61289: LD_VAR 0 5
61293: LESS
61294: IFFALSE 61238
// end ; ComTurnXY ( unit , x , y ) ;
61296: LD_VAR 0 1
61300: PPUSH
61301: LD_VAR 0 2
61305: PPUSH
61306: LD_VAR 0 3
61310: PPUSH
61311: CALL_OW 118
// repeat if Multiplayer then
61315: LD_OWVAR 4
61319: IFFALSE 61330
// wait ( 35 ) else
61321: LD_INT 35
61323: PPUSH
61324: CALL_OW 67
61328: GO 61337
// wait ( 5 ) ;
61330: LD_INT 5
61332: PPUSH
61333: CALL_OW 67
// _d := GetDir ( unit ) ;
61337: LD_ADDR_VAR 0 11
61341: PUSH
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 254
61351: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61352: LD_ADDR_VAR 0 7
61356: PUSH
61357: LD_VAR 0 1
61361: PPUSH
61362: CALL_OW 250
61366: PPUSH
61367: LD_VAR 0 1
61371: PPUSH
61372: CALL_OW 251
61376: PPUSH
61377: LD_VAR 0 2
61381: PPUSH
61382: LD_VAR 0 3
61386: PPUSH
61387: CALL 43081 0 4
61391: ST_TO_ADDR
// until dir = _d ;
61392: LD_VAR 0 7
61396: PUSH
61397: LD_VAR 0 11
61401: EQUAL
61402: IFFALSE 61315
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61404: LD_ADDR_VAR 0 9
61408: PUSH
61409: LD_VAR 0 1
61413: PPUSH
61414: CALL_OW 250
61418: PPUSH
61419: LD_VAR 0 7
61423: PPUSH
61424: LD_VAR 0 5
61428: PPUSH
61429: CALL_OW 272
61433: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61434: LD_ADDR_VAR 0 10
61438: PUSH
61439: LD_VAR 0 1
61443: PPUSH
61444: CALL_OW 251
61448: PPUSH
61449: LD_VAR 0 7
61453: PPUSH
61454: LD_VAR 0 5
61458: PPUSH
61459: CALL_OW 273
61463: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61464: LD_VAR 0 9
61468: PPUSH
61469: LD_VAR 0 10
61473: PPUSH
61474: CALL_OW 488
61478: NOT
61479: IFFALSE 61483
// exit ;
61481: GO 61605
// ComAnimCustom ( unit , 1 ) ;
61483: LD_VAR 0 1
61487: PPUSH
61488: LD_INT 1
61490: PPUSH
61491: CALL_OW 592
// p := 0 ;
61495: LD_ADDR_VAR 0 12
61499: PUSH
61500: LD_INT 0
61502: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61503: LD_VAR 0 9
61507: PPUSH
61508: LD_VAR 0 10
61512: PPUSH
61513: LD_VAR 0 6
61517: PPUSH
61518: LD_VAR 0 8
61522: PPUSH
61523: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61527: LD_INT 35
61529: PPUSH
61530: CALL_OW 67
// p := Inc ( p ) ;
61534: LD_ADDR_VAR 0 12
61538: PUSH
61539: LD_VAR 0 12
61543: PPUSH
61544: CALL 43037 0 1
61548: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61549: LD_VAR 0 12
61553: PUSH
61554: LD_INT 3
61556: EQUAL
61557: IFTRUE 61571
61559: PUSH
61560: LD_VAR 0 1
61564: PPUSH
61565: CALL_OW 302
61569: NOT
61570: OR
61571: IFTRUE 61584
61573: PUSH
61574: LD_VAR 0 1
61578: PPUSH
61579: CALL_OW 301
61583: OR
61584: IFFALSE 61527
// RemoveSeeing ( _x , _y , side ) ;
61586: LD_VAR 0 9
61590: PPUSH
61591: LD_VAR 0 10
61595: PPUSH
61596: LD_VAR 0 6
61600: PPUSH
61601: CALL_OW 331
// end ; end_of_file
61605: LD_VAR 0 4
61609: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61610: PPOPN 6
61612: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61613: LD_EXP 5
61617: PUSH
61618: LD_INT 4
61620: EQUAL
61621: IFFALSE 61657
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61623: LD_STRING setGameDifficulty(
61625: PUSH
61626: LD_OWVAR 67
61630: STR
61631: PUSH
61632: LD_STRING )
61634: STR
61635: PPUSH
61636: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61640: LD_STRING displayDifficulty(
61642: PUSH
61643: LD_OWVAR 67
61647: STR
61648: PUSH
61649: LD_STRING )
61651: STR
61652: PPUSH
61653: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61657: CALL 61686 0 0
// end ; end_of_file
61661: PPOPN 1
61663: END
// every 0 0$1 do
61664: GO 61666
61666: DISABLE
// begin enable ;
61667: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61668: LD_STRING updateTimer(
61670: PUSH
61671: LD_OWVAR 1
61675: STR
61676: PUSH
61677: LD_STRING );
61679: STR
61680: PPUSH
61681: CALL_OW 559
// end ;
61685: END
// export function SOS_MapStart ( ) ; begin
61686: LD_INT 0
61688: PPUSH
// UpdateFactoryWaypoints ( ) ;
61689: CALL 62620 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61693: CALL 62872 0 0
// ParseMultiDataToLua ( ) ;
61697: CALL 63019 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61701: LD_STRING setSpecLogoNumber(
61703: PUSH
61704: LD_INT 2
61706: STR
61707: PUSH
61708: LD_STRING ,
61710: STR
61711: PUSH
61712: LD_INT 1
61714: STR
61715: PUSH
61716: LD_STRING )
61718: STR
61719: PPUSH
61720: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61724: LD_STRING setSpecLogoNumber(
61726: PUSH
61727: LD_INT 3
61729: STR
61730: PUSH
61731: LD_STRING ,
61733: STR
61734: PUSH
61735: LD_INT 2
61737: STR
61738: PUSH
61739: LD_STRING )
61741: STR
61742: PPUSH
61743: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61747: LD_STRING setSpecLogoNumber(
61749: PUSH
61750: LD_INT 4
61752: STR
61753: PUSH
61754: LD_STRING ,
61756: STR
61757: PUSH
61758: LD_INT 3
61760: STR
61761: PUSH
61762: LD_STRING )
61764: STR
61765: PPUSH
61766: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61770: LD_STRING setSpecLogoNumber(
61772: PUSH
61773: LD_INT 5
61775: STR
61776: PUSH
61777: LD_STRING ,
61779: STR
61780: PUSH
61781: LD_INT 4
61783: STR
61784: PUSH
61785: LD_STRING )
61787: STR
61788: PPUSH
61789: CALL_OW 559
// end ;
61793: LD_VAR 0 1
61797: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61798: LD_INT 0
61800: PPUSH
61801: PPUSH
61802: PPUSH
61803: PPUSH
61804: PPUSH
61805: PPUSH
61806: PPUSH
61807: PPUSH
61808: PPUSH
// for i := 1 to 8 do
61809: LD_ADDR_VAR 0 2
61813: PUSH
61814: DOUBLE
61815: LD_INT 1
61817: DEC
61818: ST_TO_ADDR
61819: LD_INT 8
61821: PUSH
61822: FOR_TO
61823: IFFALSE 62208
// begin if mpSidePositions [ i ] then
61825: LD_EXP 9
61829: PUSH
61830: LD_VAR 0 2
61834: ARRAY
61835: IFFALSE 62206
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61837: LD_ADDR_VAR 0 7
61841: PUSH
61842: LD_INT 22
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 21
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PPUSH
61868: CALL_OW 69
61872: PPUSH
61873: CALL 5732 0 1
61877: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61878: LD_ADDR_VAR 0 9
61882: PUSH
61883: LD_INT 22
61885: PUSH
61886: LD_VAR 0 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 30
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 30
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PPUSH
61927: CALL_OW 69
61931: ST_TO_ADDR
// crates := 0 ;
61932: LD_ADDR_VAR 0 4
61936: PUSH
61937: LD_INT 0
61939: ST_TO_ADDR
// oil := 0 ;
61940: LD_ADDR_VAR 0 5
61944: PUSH
61945: LD_INT 0
61947: ST_TO_ADDR
// sib := 0 ;
61948: LD_ADDR_VAR 0 6
61952: PUSH
61953: LD_INT 0
61955: ST_TO_ADDR
// if bases then
61956: LD_VAR 0 9
61960: IFFALSE 62066
// begin for j in bases do
61962: LD_ADDR_VAR 0 3
61966: PUSH
61967: LD_VAR 0 9
61971: PUSH
61972: FOR_IN
61973: IFFALSE 62064
// begin base := GetBase ( j ) ;
61975: LD_ADDR_VAR 0 8
61979: PUSH
61980: LD_VAR 0 3
61984: PPUSH
61985: CALL_OW 274
61989: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61990: LD_ADDR_VAR 0 4
61994: PUSH
61995: LD_VAR 0 4
61999: PUSH
62000: LD_VAR 0 8
62004: PPUSH
62005: LD_INT 1
62007: PPUSH
62008: CALL_OW 275
62012: PLUS
62013: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62014: LD_ADDR_VAR 0 5
62018: PUSH
62019: LD_VAR 0 5
62023: PUSH
62024: LD_VAR 0 8
62028: PPUSH
62029: LD_INT 2
62031: PPUSH
62032: CALL_OW 275
62036: PLUS
62037: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62038: LD_ADDR_VAR 0 6
62042: PUSH
62043: LD_VAR 0 6
62047: PUSH
62048: LD_VAR 0 8
62052: PPUSH
62053: LD_INT 3
62055: PPUSH
62056: CALL_OW 275
62060: PLUS
62061: ST_TO_ADDR
// end ;
62062: GO 61972
62064: POP
62065: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62066: LD_STRING setSpecText(
62068: PUSH
62069: LD_VAR 0 2
62073: STR
62074: PUSH
62075: LD_STRING ,
62077: STR
62078: PUSH
62079: LD_INT 2
62081: STR
62082: PUSH
62083: LD_STRING ,
62085: STR
62086: PUSH
62087: LD_VAR 0 4
62091: STR
62092: PUSH
62093: LD_STRING )
62095: STR
62096: PPUSH
62097: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62101: LD_STRING setSpecText(
62103: PUSH
62104: LD_VAR 0 2
62108: STR
62109: PUSH
62110: LD_STRING ,
62112: STR
62113: PUSH
62114: LD_INT 3
62116: STR
62117: PUSH
62118: LD_STRING ,
62120: STR
62121: PUSH
62122: LD_VAR 0 5
62126: STR
62127: PUSH
62128: LD_STRING )
62130: STR
62131: PPUSH
62132: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
62136: LD_STRING setSpecText(
62138: PUSH
62139: LD_VAR 0 2
62143: STR
62144: PUSH
62145: LD_STRING ,
62147: STR
62148: PUSH
62149: LD_INT 4
62151: STR
62152: PUSH
62153: LD_STRING ,
62155: STR
62156: PUSH
62157: LD_VAR 0 6
62161: STR
62162: PUSH
62163: LD_STRING )
62165: STR
62166: PPUSH
62167: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
62171: LD_STRING setSpecText(
62173: PUSH
62174: LD_VAR 0 2
62178: STR
62179: PUSH
62180: LD_STRING ,
62182: STR
62183: PUSH
62184: LD_INT 5
62186: STR
62187: PUSH
62188: LD_STRING ,
62190: STR
62191: PUSH
62192: LD_VAR 0 7
62196: STR
62197: PUSH
62198: LD_STRING )
62200: STR
62201: PPUSH
62202: CALL_OW 559
// end ; end ;
62206: GO 61822
62208: POP
62209: POP
// end ;
62210: LD_VAR 0 1
62214: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
62215: LD_INT 2
62217: PUSH
62218: LD_INT 30
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 30
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: PPUSH
62243: CALL_OW 69
62247: IFFALSE 62257
62249: GO 62251
62251: DISABLE
// begin enable ;
62252: ENABLE
// UpdateSpectatorBar ;
62253: CALL 61798 0 0
// end ;
62257: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62258: LD_INT 0
62260: PPUSH
// end ;
62261: LD_VAR 0 12
62265: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62266: LD_INT 0
62268: PPUSH
62269: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62270: LD_VAR 0 1
62274: NOT
62275: IFTRUE 62294
62277: PUSH
62278: LD_VAR 0 2
62282: PPUSH
62283: LD_VAR 0 3
62287: PPUSH
62288: CALL_OW 488
62292: NOT
62293: OR
62294: IFTRUE 62329
62296: PUSH
62297: LD_VAR 0 1
62301: PPUSH
62302: CALL_OW 266
62306: PUSH
62307: LD_INT 3
62309: NONEQUAL
62310: IFFALSE 62328
62312: PUSH
62313: LD_VAR 0 1
62317: PPUSH
62318: CALL_OW 247
62322: PUSH
62323: LD_INT 1
62325: EQUAL
62326: NOT
62327: AND
62328: OR
62329: IFFALSE 62333
// exit ;
62331: GO 62615
// if GetType ( factory ) = unit_human then
62333: LD_VAR 0 1
62337: PPUSH
62338: CALL_OW 247
62342: PUSH
62343: LD_INT 1
62345: EQUAL
62346: IFFALSE 62363
// factory := IsInUnit ( factory ) ;
62348: LD_ADDR_VAR 0 1
62352: PUSH
62353: LD_VAR 0 1
62357: PPUSH
62358: CALL_OW 310
62362: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62363: LD_VAR 0 1
62367: PPUSH
62368: CALL_OW 266
62372: PUSH
62373: LD_INT 3
62375: NONEQUAL
62376: IFFALSE 62380
// exit ;
62378: GO 62615
// for i := 1 to Count ( factoryWaypoints ) do
62380: LD_ADDR_VAR 0 5
62384: PUSH
62385: DOUBLE
62386: LD_INT 1
62388: DEC
62389: ST_TO_ADDR
62390: LD_EXP 61
62394: PPUSH
62395: CALL 5732 0 1
62399: PUSH
62400: FOR_TO
62401: IFFALSE 62563
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62403: LD_VAR 0 2
62407: PPUSH
62408: LD_VAR 0 3
62412: PPUSH
62413: CALL_OW 428
62417: PUSH
62418: LD_EXP 61
62422: PUSH
62423: LD_VAR 0 5
62427: ARRAY
62428: PUSH
62429: LD_INT 2
62431: ARRAY
62432: EQUAL
62433: IFFALSE 62465
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62435: LD_ADDR_EXP 61
62439: PUSH
62440: LD_EXP 61
62444: PPUSH
62445: LD_VAR 0 5
62449: PPUSH
62450: CALL_OW 3
62454: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62455: CALL 62620 0 0
// exit ;
62459: POP
62460: POP
62461: GO 62615
// end else
62463: GO 62561
// if factory = factoryWaypoints [ i ] [ 2 ] then
62465: LD_VAR 0 1
62469: PUSH
62470: LD_EXP 61
62474: PUSH
62475: LD_VAR 0 5
62479: ARRAY
62480: PUSH
62481: LD_INT 2
62483: ARRAY
62484: EQUAL
62485: IFFALSE 62561
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62487: LD_ADDR_EXP 61
62491: PUSH
62492: LD_EXP 61
62496: PPUSH
62497: LD_VAR 0 5
62501: PPUSH
62502: CALL_OW 3
62506: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62507: LD_ADDR_EXP 61
62511: PUSH
62512: LD_EXP 61
62516: PPUSH
62517: LD_VAR 0 1
62521: PPUSH
62522: CALL_OW 255
62526: PUSH
62527: LD_VAR 0 1
62531: PUSH
62532: LD_VAR 0 2
62536: PUSH
62537: LD_VAR 0 3
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: PPUSH
62548: CALL 41664 0 2
62552: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62553: CALL 62620 0 0
// exit ;
62557: POP
62558: POP
62559: GO 62615
// end ; end ;
62561: GO 62400
62563: POP
62564: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62565: LD_ADDR_EXP 61
62569: PUSH
62570: LD_EXP 61
62574: PPUSH
62575: LD_VAR 0 1
62579: PPUSH
62580: CALL_OW 255
62584: PUSH
62585: LD_VAR 0 1
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_VAR 0 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: PPUSH
62606: CALL 41664 0 2
62610: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62611: CALL 62620 0 0
// end ;
62615: LD_VAR 0 4
62619: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62620: LD_INT 0
62622: PPUSH
62623: PPUSH
62624: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62625: LD_STRING resetFactoryWaypoint();
62627: PPUSH
62628: CALL_OW 559
// if factoryWaypoints then
62632: LD_EXP 61
62636: IFFALSE 62757
// begin list := factoryWaypoints ;
62638: LD_ADDR_VAR 0 3
62642: PUSH
62643: LD_EXP 61
62647: ST_TO_ADDR
// for i := 1 to list do
62648: LD_ADDR_VAR 0 2
62652: PUSH
62653: DOUBLE
62654: LD_INT 1
62656: DEC
62657: ST_TO_ADDR
62658: LD_VAR 0 3
62662: PUSH
62663: FOR_TO
62664: IFFALSE 62755
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62666: LD_STRING setFactoryWaypointXY(
62668: PUSH
62669: LD_VAR 0 3
62673: PUSH
62674: LD_VAR 0 2
62678: ARRAY
62679: PUSH
62680: LD_INT 1
62682: ARRAY
62683: STR
62684: PUSH
62685: LD_STRING ,
62687: STR
62688: PUSH
62689: LD_VAR 0 3
62693: PUSH
62694: LD_VAR 0 2
62698: ARRAY
62699: PUSH
62700: LD_INT 2
62702: ARRAY
62703: STR
62704: PUSH
62705: LD_STRING ,
62707: STR
62708: PUSH
62709: LD_VAR 0 3
62713: PUSH
62714: LD_VAR 0 2
62718: ARRAY
62719: PUSH
62720: LD_INT 3
62722: ARRAY
62723: STR
62724: PUSH
62725: LD_STRING ,
62727: STR
62728: PUSH
62729: LD_VAR 0 3
62733: PUSH
62734: LD_VAR 0 2
62738: ARRAY
62739: PUSH
62740: LD_INT 4
62742: ARRAY
62743: STR
62744: PUSH
62745: LD_STRING )
62747: STR
62748: PPUSH
62749: CALL_OW 559
62753: GO 62663
62755: POP
62756: POP
// end ; end ;
62757: LD_VAR 0 1
62761: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62762: LD_INT 0
62764: PPUSH
// if HexInfo ( x , y ) = warehouse then
62765: LD_VAR 0 2
62769: PPUSH
62770: LD_VAR 0 3
62774: PPUSH
62775: CALL_OW 428
62779: PUSH
62780: LD_VAR 0 1
62784: EQUAL
62785: IFFALSE 62812
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62787: LD_ADDR_EXP 63
62791: PUSH
62792: LD_EXP 63
62796: PPUSH
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_INT 0
62804: PPUSH
62805: CALL_OW 1
62809: ST_TO_ADDR
62810: GO 62863
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62812: LD_ADDR_EXP 63
62816: PUSH
62817: LD_EXP 63
62821: PPUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: LD_VAR 0 1
62831: PPUSH
62832: CALL_OW 255
62836: PUSH
62837: LD_VAR 0 1
62841: PUSH
62842: LD_VAR 0 2
62846: PUSH
62847: LD_VAR 0 3
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: PPUSH
62858: CALL_OW 1
62862: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62863: CALL 62872 0 0
// end ;
62867: LD_VAR 0 4
62871: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62872: LD_INT 0
62874: PPUSH
62875: PPUSH
62876: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62877: LD_STRING resetWarehouseGatheringPoints();
62879: PPUSH
62880: CALL_OW 559
// if warehouseGatheringPoints then
62884: LD_EXP 63
62888: IFFALSE 63014
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62890: LD_ADDR_VAR 0 3
62894: PUSH
62895: LD_EXP 63
62899: PPUSH
62900: CALL 45598 0 1
62904: ST_TO_ADDR
// for i := 1 to list do
62905: LD_ADDR_VAR 0 2
62909: PUSH
62910: DOUBLE
62911: LD_INT 1
62913: DEC
62914: ST_TO_ADDR
62915: LD_VAR 0 3
62919: PUSH
62920: FOR_TO
62921: IFFALSE 63012
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62923: LD_STRING setWarehouseGatheringPointXY(
62925: PUSH
62926: LD_VAR 0 3
62930: PUSH
62931: LD_VAR 0 2
62935: ARRAY
62936: PUSH
62937: LD_INT 1
62939: ARRAY
62940: STR
62941: PUSH
62942: LD_STRING ,
62944: STR
62945: PUSH
62946: LD_VAR 0 3
62950: PUSH
62951: LD_VAR 0 2
62955: ARRAY
62956: PUSH
62957: LD_INT 2
62959: ARRAY
62960: STR
62961: PUSH
62962: LD_STRING ,
62964: STR
62965: PUSH
62966: LD_VAR 0 3
62970: PUSH
62971: LD_VAR 0 2
62975: ARRAY
62976: PUSH
62977: LD_INT 3
62979: ARRAY
62980: STR
62981: PUSH
62982: LD_STRING ,
62984: STR
62985: PUSH
62986: LD_VAR 0 3
62990: PUSH
62991: LD_VAR 0 2
62995: ARRAY
62996: PUSH
62997: LD_INT 4
62999: ARRAY
63000: STR
63001: PUSH
63002: LD_STRING )
63004: STR
63005: PPUSH
63006: CALL_OW 559
63010: GO 62920
63012: POP
63013: POP
// end ; end ;
63014: LD_VAR 0 1
63018: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63019: LD_INT 0
63021: PPUSH
63022: PPUSH
// if not mpSidePositions then
63023: LD_EXP 9
63027: NOT
63028: IFFALSE 63032
// exit ;
63030: GO 63103
// result :=  ;
63032: LD_ADDR_VAR 0 1
63036: PUSH
63037: LD_STRING 
63039: ST_TO_ADDR
// for i := 1 to 8 do
63040: LD_ADDR_VAR 0 2
63044: PUSH
63045: DOUBLE
63046: LD_INT 1
63048: DEC
63049: ST_TO_ADDR
63050: LD_INT 8
63052: PUSH
63053: FOR_TO
63054: IFFALSE 63084
// begin result := result & mpSidePositions [ i ] & ; ;
63056: LD_ADDR_VAR 0 1
63060: PUSH
63061: LD_VAR 0 1
63065: PUSH
63066: LD_EXP 9
63070: PUSH
63071: LD_VAR 0 2
63075: ARRAY
63076: STR
63077: PUSH
63078: LD_STRING ;
63080: STR
63081: ST_TO_ADDR
// end ;
63082: GO 63053
63084: POP
63085: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63086: LD_STRING setMultiplayerRealPosition("
63088: PUSH
63089: LD_VAR 0 1
63093: STR
63094: PUSH
63095: LD_STRING ");
63097: STR
63098: PPUSH
63099: CALL_OW 559
// end ;
63103: LD_VAR 0 1
63107: RET
