// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime , def_game_rules , def_sheik , def_mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules , heroes , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 21
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 293
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 21
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 38
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: LD_INT 0
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 244: LD_ADDR_EXP 36
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: EMPTY
 253: LIST
 254: PUSH
 255: LD_INT 2
 257: PUSH
 258: EMPTY
 259: LIST
 260: PUSH
 261: LD_INT 3
 263: PUSH
 264: EMPTY
 265: LIST
 266: PUSH
 267: LD_INT 4
 269: PUSH
 270: EMPTY
 271: LIST
 272: PUSH
 273: LD_INT 5
 275: PUSH
 276: EMPTY
 277: LIST
 278: PUSH
 279: LD_INT 6
 281: PUSH
 282: EMPTY
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 293: LD_ADDR_EXP 40
 297: PUSH
 298: LD_EXP 35
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: PUSH
 310: LD_INT 1
 312: GREATER
 313: ST_TO_ADDR
// if Multiplayer then
 314: LD_OWVAR 4
 318: IFFALSE 564
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 320: LD_ADDR_EXP 1
 324: PUSH
 325: LD_INT 0
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 346: LD_ADDR_EXP 3
 350: PUSH
 351: LD_INT 2
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 359: LD_ADDR_EXP 4
 363: PUSH
 364: LD_INT 3
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 372: LD_ADDR_EXP 5
 376: PUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 385: LD_ADDR_EXP 6
 389: PUSH
 390: LD_INT 5
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 398: LD_ADDR_EXP 7
 402: PUSH
 403: LD_INT 6
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 8
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 9
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 10
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 11
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 12
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 476: LD_ADDR_EXP 13
 480: PUSH
 481: LD_INT 15
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 489: LD_ADDR_EXP 14
 493: PUSH
 494: LD_INT 16
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 502: LD_ADDR_EXP 15
 506: PUSH
 507: LD_INT 17
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 515: LD_ADDR_EXP 16
 519: PUSH
 520: LD_INT 20
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_game_rules := 0 ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 536: LD_ADDR_EXP 18
 540: PUSH
 541: LD_INT 22
 543: PPUSH
 544: CALL_OW 426
 548: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 549: LD_ADDR_EXP 19
 553: PUSH
 554: LD_INT 23
 556: PPUSH
 557: CALL_OW 426
 561: ST_TO_ADDR
// end else
 562: GO 720
// begin Randomize ;
 564: CALL_OW 10
// def_base_level := 2 ;
 568: LD_ADDR_EXP 1
 572: PUSH
 573: LD_INT 2
 575: ST_TO_ADDR
// def_amount_of_people := 0 ;
 576: LD_ADDR_EXP 2
 580: PUSH
 581: LD_INT 0
 583: ST_TO_ADDR
// def_skill_level := 1 ;
 584: LD_ADDR_EXP 3
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// def_starting_resources := 2 ;
 592: LD_ADDR_EXP 4
 596: PUSH
 597: LD_INT 2
 599: ST_TO_ADDR
// def_shipments_density := 1 ;
 600: LD_ADDR_EXP 5
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 608: LD_ADDR_EXP 6
 612: PUSH
 613: LD_INT 1
 615: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 616: LD_ADDR_EXP 7
 620: PUSH
 621: LD_INT 2
 623: ST_TO_ADDR
// def_shared_vision := 1 ;
 624: LD_ADDR_EXP 8
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// def_morale_flags := 1 ;
 632: LD_ADDR_EXP 9
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// def_siberite_detection := 1 ;
 640: LD_ADDR_EXP 10
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// def_people_respawning := 2 ;
 648: LD_ADDR_EXP 11
 652: PUSH
 653: LD_INT 2
 655: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 656: LD_ADDR_EXP 12
 660: PUSH
 661: LD_INT 3
 663: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 664: LD_ADDR_EXP 13
 668: PUSH
 669: LD_INT 0
 671: ST_TO_ADDR
// def_public_score := 0 ;
 672: LD_ADDR_EXP 14
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 680: LD_ADDR_EXP 15
 684: PUSH
 685: LD_INT 0
 687: ST_TO_ADDR
// def_builduptime := 1 ;
 688: LD_ADDR_EXP 16
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_game_rules := 0 ;
 696: LD_ADDR_EXP 17
 700: PUSH
 701: LD_INT 0
 703: ST_TO_ADDR
// def_sheik := 0 ;
 704: LD_ADDR_EXP 18
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// def_mastodont := 0 ;
 712: LD_ADDR_EXP 19
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// end ; if isSGUI then
 720: LD_OWVAR 83
 724: IFFALSE 730
// setMpTechs ( ) ;
 726: CALL 9320 0 0
// if ( Game_Type = 5 ) then
 730: LD_EXP 21
 734: PUSH
 735: LD_INT 5
 737: EQUAL
 738: IFFALSE 767
// begin def_base_level := 1 ;
 740: LD_ADDR_EXP 1
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 748: LD_ADDR_EXP 6
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 756: LD_ADDR_EXP 7
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// disable ( 10 ) ;
 764: LD_INT 10
 766: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 767: LD_ADDR_EXP 22
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 1
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 796: LD_ADDR_EXP 23
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: PUSH
 815: LD_EXP 1
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_INT 9
 832: PUSH
 833: LD_INT 12
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 24
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_EXP 2
 852: PUSH
 853: LD_INT 1
 855: PLUS
 856: ARRAY
 857: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
 858: LD_ADDR_EXP 25
 862: PUSH
 863: LD_INT 2
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: LD_INT 5
 874: PUSH
 875: LD_INT 8
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: ARRAY
 894: ST_TO_ADDR
// if ( Game_Type = 5 ) then
 895: LD_EXP 21
 899: PUSH
 900: LD_INT 5
 902: EQUAL
 903: IFFALSE 1021
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
 905: LD_ADDR_EXP 27
 909: PUSH
 910: LD_INT 1000
 912: PUSH
 913: LD_INT 100
 915: PUSH
 916: LD_INT 100
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 2000
 926: PUSH
 927: LD_INT 200
 929: PUSH
 930: LD_INT 200
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 5000
 940: PUSH
 941: LD_INT 500
 943: PUSH
 944: LD_INT 500
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 10000
 954: PUSH
 955: LD_INT 1000
 957: PUSH
 958: LD_INT 1000
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 25000
 968: PUSH
 969: LD_INT 2500
 971: PUSH
 972: LD_INT 2500
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50000
 982: PUSH
 983: LD_INT 5000
 985: PUSH
 986: LD_INT 5000
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 1
1009: PLUS
1010: ARRAY
1011: ST_TO_ADDR
// starting_crates := [ ] ;
1012: LD_ADDR_EXP 26
1016: PUSH
1017: EMPTY
1018: ST_TO_ADDR
// end else
1019: GO 1167
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 0
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 50
1056: PUSH
1057: LD_INT 20
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 80
1070: PUSH
1071: LD_INT 40
1073: PUSH
1074: LD_INT 20
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1098: LD_ADDR_EXP 26
1102: PUSH
1103: LD_INT 10
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 7
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 6
1121: PUSH
1122: LD_INT 12
1124: PUSH
1125: LD_INT 18
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 5
1135: PUSH
1136: LD_INT 10
1138: PUSH
1139: LD_INT 15
1141: PUSH
1142: LD_INT 20
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 4
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1167: LD_ADDR_EXP 28
1171: PUSH
1172: LD_INT 150
1174: PUSH
1175: LD_INT 125
1177: PUSH
1178: LD_INT 100
1180: PUSH
1181: LD_INT 50
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: LD_EXP 5
1194: PUSH
1195: LD_INT 1
1197: PLUS
1198: ARRAY
1199: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1200: LD_ADDR_EXP 32
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 10500
1210: PUSH
1211: LD_INT 6300
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_EXP 11
1223: PUSH
1224: LD_INT 1
1226: PLUS
1227: ARRAY
1228: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1229: LD_ADDR_EXP 33
1233: PUSH
1234: LD_INT 0
1236: PUSH
1237: LD_INT 31500
1239: PUSH
1240: LD_INT 10500
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_EXP 11
1252: PUSH
1253: LD_INT 1
1255: PLUS
1256: ARRAY
1257: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1258: LD_ADDR_EXP 30
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 2
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_EXP 12
1285: PUSH
1286: LD_INT 1
1288: PLUS
1289: ARRAY
1290: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 50
1301: PUSH
1302: LD_INT 80
1304: PUSH
1305: LD_INT 100
1307: PUSH
1308: LD_INT 130
1310: PUSH
1311: LD_INT 150
1313: PUSH
1314: LD_INT 200
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: LD_EXP 13
1330: PUSH
1331: LD_INT 1
1333: PLUS
1334: ARRAY
1335: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1336: LD_ADDR_EXP 29
1340: PUSH
1341: LD_INT 1
1343: NEG
1344: PUSH
1345: LD_INT 350
1347: PUSH
1348: LD_INT 700
1350: PUSH
1351: LD_INT 1400
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_EXP 9
1368: PUSH
1369: LD_INT 1
1371: PLUS
1372: ARRAY
1373: ST_TO_ADDR
// battle_flags_id := [ ] ;
1374: LD_ADDR_EXP 48
1378: PUSH
1379: EMPTY
1380: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1381: LD_ADDR_EXP 34
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 63000
1394: PUSH
1395: LD_INT 126000
1397: PUSH
1398: LD_INT 189000
1400: PUSH
1401: LD_INT 252000
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 15
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1422: LD_EXP 21
1426: PUSH
1427: LD_INT 12
1429: EQUAL
1430: IFFALSE 1488
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1432: LD_ADDR_EXP 51
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_EXP 18
1451: PUSH
1452: LD_INT 1
1454: PLUS
1455: ARRAY
1456: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1457: LD_ADDR_EXP 52
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: PUSH
1476: LD_EXP 19
1480: PUSH
1481: LD_INT 1
1483: PLUS
1484: ARRAY
1485: ST_TO_ADDR
1486: GO 1504
// begin sheik := 0 ;
1488: LD_ADDR_EXP 51
1492: PUSH
1493: LD_INT 0
1495: ST_TO_ADDR
// mastodont := 0 ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_INT 0
1503: ST_TO_ADDR
// end ; end ;
1504: LD_VAR 0 1
1508: RET
// function init_map ; var i , j ; begin
1509: LD_INT 0
1511: PPUSH
1512: PPUSH
1513: PPUSH
// normal_oil_deposits_locations := [ [ 101 , 187 ] , [ 18 , 26 ] , [ 50 , 89 ] , [ 123 , 3 ] , [ 182 , 69 ] , [ 231 , 174 ] ] ;
1514: LD_ADDR_EXP 44
1518: PUSH
1519: LD_INT 101
1521: PUSH
1522: LD_INT 187
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 18
1531: PUSH
1532: LD_INT 26
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 50
1541: PUSH
1542: LD_INT 89
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 123
1551: PUSH
1552: LD_INT 3
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 182
1561: PUSH
1562: LD_INT 69
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 231
1571: PUSH
1572: LD_INT 174
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 101 , 187 ] , [ 108 , 183 ] ] , [ [ 18 , 26 ] , [ 7 , 8 ] ] , [ [ 50 , 89 ] , [ 62 , 99 ] ] , [ [ 123 , 3 ] , [ 149 , 18 ] ] , [ [ 182 , 69 ] , [ 202 , 90 ] ] , [ [ 231 , 174 ] , [ 239 , 164 ] ] ] ;
1587: LD_ADDR_EXP 45
1591: PUSH
1592: LD_INT 101
1594: PUSH
1595: LD_INT 187
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 108
1604: PUSH
1605: LD_INT 183
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 18
1618: PUSH
1619: LD_INT 26
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 7
1628: PUSH
1629: LD_INT 8
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 50
1642: PUSH
1643: LD_INT 89
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 62
1652: PUSH
1653: LD_INT 99
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 123
1666: PUSH
1667: LD_INT 3
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 149
1676: PUSH
1677: LD_INT 18
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 182
1690: PUSH
1691: LD_INT 69
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 202
1700: PUSH
1701: LD_INT 90
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 231
1714: PUSH
1715: LD_INT 174
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 239
1724: PUSH
1725: LD_INT 164
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 96 , 185 ] , [ 21 , 29 ] , [ 50 , 85 ] , [ 128 , 2 ] , [ 186 , 72 ] , [ 234 , 174 ] ] ;
1744: LD_ADDR_EXP 46
1748: PUSH
1749: LD_INT 96
1751: PUSH
1752: LD_INT 185
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 21
1761: PUSH
1762: LD_INT 29
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 50
1771: PUSH
1772: LD_INT 85
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 128
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 186
1791: PUSH
1792: LD_INT 72
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 234
1801: PUSH
1802: LD_INT 174
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 96 , 185 ] , [ 109 , 179 ] ] , [ [ 21 , 29 ] , [ 9 , 5 ] ] , [ [ 50 , 85 ] , [ 66 , 102 ] ] , [ [ 128 , 2 ] , [ 152 , 15 ] ] , [ [ 186 , 72 ] , [ 200 , 86 ] ] , [ [ 234 , 174 ] , [ 237 , 160 ] ] ] ;
1817: LD_ADDR_EXP 47
1821: PUSH
1822: LD_INT 96
1824: PUSH
1825: LD_INT 185
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 109
1834: PUSH
1835: LD_INT 179
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 21
1848: PUSH
1849: LD_INT 29
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 9
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 50
1872: PUSH
1873: LD_INT 85
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 66
1882: PUSH
1883: LD_INT 102
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 128
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 152
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 186
1920: PUSH
1921: LD_INT 72
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 200
1930: PUSH
1931: LD_INT 86
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 234
1944: PUSH
1945: LD_INT 174
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 237
1954: PUSH
1955: LD_INT 160
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 65 , 90 , 2 ] , [ 132 , 11 , 1 ] , [ 190 , 82 , 4 ] , [ 230 , 164 , 4 ] ] ;
1974: LD_ADDR_EXP 41
1978: PUSH
1979: LD_INT 100
1981: PUSH
1982: LD_INT 179
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 21
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 65
2009: PUSH
2010: LD_INT 90
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 132
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 190
2037: PUSH
2038: LD_INT 82
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 230
2051: PUSH
2052: LD_INT 164
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// for i in depot_def do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_EXP 41
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2156
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2084: LD_ADDR_EXP 43
2088: PUSH
2089: LD_EXP 43
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: ARRAY
2111: PPUSH
2112: LD_INT 10
2114: PPUSH
2115: CALL_OW 272
2119: PUSH
2120: LD_VAR 0 2
2124: PUSH
2125: LD_INT 2
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 2
2133: PUSH
2134: LD_INT 3
2136: ARRAY
2137: PPUSH
2138: LD_INT 10
2140: PPUSH
2141: CALL_OW 273
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: ADD
2153: ST_TO_ADDR
2154: GO 2081
2156: POP
2157: POP
// breastworks_def := [ [ [ 88 , 154 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 40 , 24 , 4 ] ] , [ [ 78 , 102 , 5 ] , [ 74 , 84 , 3 ] ] , [ [ 128 , 20 , 0 ] , [ 122 , 6 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 175 , 73 , 1 ] ] , [ [ 219 , 171 , 1 ] , [ 219 , 151 , 2 ] ] ] ;
2158: LD_ADDR_EXP 42
2162: PUSH
2163: LD_INT 88
2165: PUSH
2166: LD_INT 154
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 105
2179: PUSH
2180: LD_INT 167
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 27
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 5
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 40
2211: PUSH
2212: LD_INT 24
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 78
2229: PUSH
2230: LD_INT 102
2232: PUSH
2233: LD_INT 5
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 74
2243: PUSH
2244: LD_INT 84
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 128
2261: PUSH
2262: LD_INT 20
2264: PUSH
2265: LD_INT 0
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 122
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 185
2293: PUSH
2294: LD_INT 92
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 175
2307: PUSH
2308: LD_INT 73
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 219
2325: PUSH
2326: LD_INT 171
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 219
2339: PUSH
2340: LD_INT 151
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: ST_TO_ADDR
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 38
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2509
// begin if not Side_Positions [ i ] then
2381: LD_EXP 38
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// if def_extra_oil_deposits then
2396: LD_EXP 6
2400: IFFALSE 2458
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2402: LD_ADDR_VAR 0 3
2406: PUSH
2407: LD_EXP 45
2411: PUSH
2412: LD_EXP 38
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ARRAY
2423: PUSH
2424: FOR_IN
2425: IFFALSE 2454
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: LD_VAR 0 3
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
2452: GO 2424
2454: POP
2455: POP
2456: GO 2507
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2458: LD_EXP 44
2462: PUSH
2463: LD_EXP 38
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: ARRAY
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 38
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_INT 2
2502: PPUSH
2503: CALL_OW 62
// end ;
2507: GO 2378
2509: POP
2510: POP
// if def_extra_sib_deposits then
2511: LD_EXP 7
2515: IFFALSE 2669
// for i = 1 to Side_Positions do
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: DOUBLE
2523: LD_INT 1
2525: DEC
2526: ST_TO_ADDR
2527: LD_EXP 38
2531: PUSH
2532: FOR_TO
2533: IFFALSE 2667
// begin if not Side_Positions [ i ] then
2535: LD_EXP 38
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: NOT
2546: IFFALSE 2550
// continue ;
2548: GO 2532
// if def_extra_sib_deposits = 2 then
2550: LD_EXP 7
2554: PUSH
2555: LD_INT 2
2557: EQUAL
2558: IFFALSE 2616
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 47
2569: PUSH
2570: LD_EXP 38
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: ARRAY
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2612
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 3
2598: PUSH
2599: LD_INT 2
2601: ARRAY
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 62
2610: GO 2582
2612: POP
2613: POP
2614: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2616: LD_EXP 46
2620: PUSH
2621: LD_EXP 38
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: ARRAY
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: LD_EXP 46
2641: PUSH
2642: LD_EXP 38
2646: PUSH
2647: LD_VAR 0 2
2651: ARRAY
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
// end ;
2665: GO 2532
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 40
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 8
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 36
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 35
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 35
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3441
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3154
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 25
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3152
// begin if sheik then
3082: LD_EXP 51
3086: IFFALSE 3114
// begin hc_gallery :=  ;
3088: LD_ADDR_OWVAR 33
3092: PUSH
3093: LD_STRING 
3095: ST_TO_ADDR
// hc_class := class_desert_warior ;
3096: LD_ADDR_OWVAR 28
3100: PUSH
3101: LD_INT 11
3103: ST_TO_ADDR
// hc_sex := sex_male ;
3104: LD_ADDR_OWVAR 27
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end else
3112: GO 3152
// begin hc_gallery := MULTIAVATARS ;
3114: LD_ADDR_OWVAR 33
3118: PUSH
3119: LD_STRING MULTIAVATARS
3121: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3122: LD_ADDR_OWVAR 34
3126: PUSH
3127: LD_OWVAR 20
3131: PPUSH
3132: CALL_OW 525
3136: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3137: LD_ADDR_OWVAR 27
3141: PUSH
3142: LD_OWVAR 20
3146: PPUSH
3147: CALL_OW 526
3151: ST_TO_ADDR
// end ; end ; end else
3152: GO 3217
// begin hc_name :=  ;
3154: LD_ADDR_OWVAR 26
3158: PUSH
3159: LD_STRING 
3161: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 12
3172: PPUSH
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_EXP 25
3182: PPUSH
3183: CALL_OW 380
// hc_importance := 0 ;
3187: LD_ADDR_OWVAR 32
3191: PUSH
3192: LD_INT 0
3194: ST_TO_ADDR
// if Multiplayer then
3195: LD_OWVAR 4
3199: IFFALSE 3217
// begin hc_gallery :=  ;
3201: LD_ADDR_OWVAR 33
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// hc_face_number := 0 ;
3209: LD_ADDR_OWVAR 34
3213: PUSH
3214: LD_INT 0
3216: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3217: LD_ADDR_VAR 0 10
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// if global_defined then
3227: LD_LOC 3
3231: IFFALSE 3371
// begin if ( cl = class_soldier ) then
3233: LD_VAR 0 2
3237: PUSH
3238: LD_INT 1
3240: EQUAL
3241: IFFALSE 3261
// j := i + soldiers_created else
3243: LD_ADDR_VAR 0 9
3247: PUSH
3248: LD_VAR 0 8
3252: PUSH
3253: LD_LOC 4
3257: PLUS
3258: ST_TO_ADDR
3259: GO 3271
// j := i ;
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: LD_VAR 0 8
3270: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3271: LD_LOC 2
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_VAR 0 9
3286: ARRAY
3287: PPUSH
3288: LD_VAR 0 10
3292: PPUSH
3293: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3297: LD_VAR 0 10
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: LD_LOC 2
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_VAR 0 9
3320: ARRAY
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: CALL_OW 260
3329: PPUSH
3330: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3334: LD_VAR 0 10
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_LOC 2
3346: PUSH
3347: LD_VAR 0 2
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 9
3357: ARRAY
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 260
3366: PPUSH
3367: CALL_OW 239
// end ; if building then
3371: LD_VAR 0 6
3375: IFFALSE 3393
// PlaceHumanInUnit ( un , building ) else
3377: LD_VAR 0 10
3381: PPUSH
3382: LD_VAR 0 6
3386: PPUSH
3387: CALL_OW 52
3391: GO 3420
// PlaceUnitXYR ( un , x , y , r , false ) ;
3393: LD_VAR 0 10
3397: PPUSH
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_VAR 0 5
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 50
// result := result ^ [ un ] ;
3420: LD_ADDR_VAR 0 7
3424: PUSH
3425: LD_VAR 0 7
3429: PUSH
3430: LD_VAR 0 10
3434: PUSH
3435: EMPTY
3436: LIST
3437: ADD
3438: ST_TO_ADDR
// end ;
3439: GO 2990
3441: POP
3442: POP
// if not global_defined then
3443: LD_LOC 3
3447: NOT
3448: IFFALSE 3526
// if ( global_units >= cl ) then
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: GREATEREQUAL
3460: IFFALSE 3501
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3462: LD_ADDR_LOC 2
3466: PUSH
3467: LD_LOC 2
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: LD_LOC 2
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_VAR 0 7
3492: ADD
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
3499: GO 3526
// global_units := Replace ( global_units , cl , result ) ;
3501: LD_ADDR_LOC 2
3505: PUSH
3506: LD_LOC 2
3510: PPUSH
3511: LD_VAR 0 2
3515: PPUSH
3516: LD_VAR 0 7
3520: PPUSH
3521: CALL_OW 1
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 7
3530: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// uc_side := 0 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// uc_nation := 0 ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// vc_chassis := 31 ;
3551: LD_ADDR_OWVAR 37
3555: PUSH
3556: LD_INT 31
3558: ST_TO_ADDR
// vc_control := control_rider ;
3559: LD_ADDR_OWVAR 38
3563: PUSH
3564: LD_INT 4
3566: ST_TO_ADDR
// for i = 1 to n do
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 1
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3602
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3585: CALL_OW 45
3589: PPUSH
3590: LD_INT 15
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
3600: GO 3582
3602: POP
3603: POP
// end ;
3604: LD_VAR 0 2
3608: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3609: LD_INT 0
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// if side in [ 0 , 9 ] then
3620: LD_VAR 0 1
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 9
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: IN
3635: IFFALSE 3639
// exit ;
3637: GO 4656
// pos := Side_Positions [ side ] ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_EXP 38
3648: PUSH
3649: LD_VAR 0 1
3653: ARRAY
3654: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_EXP 39
3664: PUSH
3665: LD_VAR 0 1
3669: ARRAY
3670: ST_TO_ADDR
// uc_side := side ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_VAR 0 1
3680: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: LD_EXP 41
3690: PUSH
3691: LD_VAR 0 3
3695: ARRAY
3696: PUSH
3697: LD_INT 1
3699: ARRAY
3700: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_EXP 41
3710: PUSH
3711: LD_VAR 0 3
3715: ARRAY
3716: PUSH
3717: LD_INT 2
3719: ARRAY
3720: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3721: LD_ADDR_VAR 0 6
3725: PUSH
3726: LD_EXP 41
3730: PUSH
3731: LD_VAR 0 3
3735: ARRAY
3736: PUSH
3737: LD_INT 3
3739: ARRAY
3740: ST_TO_ADDR
// if is_depot then
3741: LD_EXP 22
3745: IFFALSE 3878
// begin bc_type = b_depot ;
3747: LD_ADDR_OWVAR 42
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3755: LD_ADDR_VAR 0 10
3759: PUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: LD_VAR 0 5
3769: PPUSH
3770: LD_VAR 0 6
3774: PPUSH
3775: CALL_OW 47
3779: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3780: LD_VAR 0 10
3784: PPUSH
3785: LD_STRING @
3787: PUSH
3788: LD_VAR 0 1
3792: STR
3793: PPUSH
3794: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_INT 1
3810: PPUSH
3811: LD_EXP 27
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3824: LD_VAR 0 10
3828: PPUSH
3829: CALL_OW 274
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: LD_EXP 27
3841: PUSH
3842: LD_INT 2
3844: ARRAY
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3850: LD_VAR 0 10
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 3
3862: PPUSH
3863: LD_EXP 27
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: CALL_OW 277
// end else
3876: GO 4022
// begin for i := 1 to 3 do
3878: LD_ADDR_VAR 0 7
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 3
3890: PUSH
3891: FOR_TO
3892: IFFALSE 4020
// begin r := starting_resources [ i ] ;
3894: LD_ADDR_VAR 0 8
3898: PUSH
3899: LD_EXP 27
3903: PUSH
3904: LD_VAR 0 7
3908: ARRAY
3909: ST_TO_ADDR
// while r >= 10 do
3910: LD_VAR 0 8
3914: PUSH
3915: LD_INT 10
3917: GREATEREQUAL
3918: IFFALSE 4018
// if r > 50 then
3920: LD_VAR 0 8
3924: PUSH
3925: LD_INT 50
3927: GREATER
3928: IFFALSE 3974
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3930: LD_VAR 0 7
3934: PPUSH
3935: LD_INT 5
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_VAR 0 5
3947: PPUSH
3948: LD_INT 4
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 60
// r := r - 50 ;
3958: LD_ADDR_VAR 0 8
3962: PUSH
3963: LD_VAR 0 8
3967: PUSH
3968: LD_INT 50
3970: MINUS
3971: ST_TO_ADDR
// end else
3972: GO 4016
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3974: LD_VAR 0 7
3978: PPUSH
3979: LD_VAR 0 8
3983: PUSH
3984: LD_INT 10
3986: DIV
3987: PPUSH
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 4
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 60
// r := 0 ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_INT 0
4015: ST_TO_ADDR
// end ;
4016: GO 3910
// end ;
4018: GO 3891
4020: POP
4021: POP
// end ; for r in starting_crates do
4022: LD_ADDR_VAR 0 8
4026: PUSH
4027: LD_EXP 26
4031: PUSH
4032: FOR_IN
4033: IFFALSE 4065
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_VAR 0 8
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 60
4063: GO 4032
4065: POP
4066: POP
// if def_morale_flags then
4067: LD_EXP 9
4071: IFFALSE 4210
// begin x := start_def [ pos ] [ 1 ] ;
4073: LD_ADDR_VAR 0 4
4077: PUSH
4078: LD_EXP 43
4082: PUSH
4083: LD_VAR 0 3
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4093: LD_ADDR_VAR 0 5
4097: PUSH
4098: LD_EXP 43
4102: PUSH
4103: LD_VAR 0 3
4107: ARRAY
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4133: LD_ADDR_EXP 48
4137: PUSH
4138: LD_EXP 48
4142: PUSH
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_INT 1
4160: PUSH
4161: LD_INT 100
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 50
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 20
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 20
4190: PUSH
4191: LD_INT 100
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 418
4208: ADD
4209: ST_TO_ADDR
// end ; commander := true ;
4210: LD_ADDR_LOC 1
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// soldiers_created := 0 ;
4218: LD_ADDR_LOC 4
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4226: LD_ADDR_VAR 0 7
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 23
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4395
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_EXP 42
4253: PUSH
4254: LD_VAR 0 3
4258: ARRAY
4259: PUSH
4260: LD_VAR 0 7
4264: ARRAY
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_EXP 42
4279: PUSH
4280: LD_VAR 0 3
4284: ARRAY
4285: PUSH
4286: LD_VAR 0 7
4290: ARRAY
4291: PUSH
4292: LD_INT 2
4294: ARRAY
4295: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4296: LD_ADDR_VAR 0 6
4300: PUSH
4301: LD_EXP 42
4305: PUSH
4306: LD_VAR 0 3
4310: ARRAY
4311: PUSH
4312: LD_VAR 0 7
4316: ARRAY
4317: PUSH
4318: LD_INT 3
4320: ARRAY
4321: ST_TO_ADDR
// bc_type := b_breastwork ;
4322: LD_ADDR_OWVAR 42
4326: PUSH
4327: LD_INT 31
4329: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4330: LD_ADDR_VAR 0 9
4334: PUSH
4335: LD_VAR 0 4
4339: PPUSH
4340: LD_VAR 0 5
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: CALL_OW 47
4354: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4355: LD_INT 1
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: LD_VAR 0 9
4374: PPUSH
4375: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4379: LD_ADDR_LOC 4
4383: PUSH
4384: LD_LOC 4
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: ST_TO_ADDR
// end ;
4393: GO 4241
4395: POP
4396: POP
// x := start_def [ pos ] [ 1 ] ;
4397: LD_ADDR_VAR 0 4
4401: PUSH
4402: LD_EXP 43
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_INT 1
4415: ARRAY
4416: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4417: LD_ADDR_VAR 0 5
4421: PUSH
4422: LD_EXP 43
4426: PUSH
4427: LD_VAR 0 3
4431: ARRAY
4432: PUSH
4433: LD_INT 2
4435: ARRAY
4436: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4437: LD_LOC 8
4441: PUSH
4442: LD_EXP 23
4446: MINUS
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_VAR 0 4
4455: PPUSH
4456: LD_VAR 0 5
4460: PPUSH
4461: LD_INT 5
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4471: LD_LOC 5
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4499: LD_LOC 7
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: LD_VAR 0 4
4511: PPUSH
4512: LD_VAR 0 5
4516: PPUSH
4517: LD_INT 5
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4527: LD_LOC 6
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_VAR 0 5
4544: PPUSH
4545: LD_INT 5
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL 2962 0 6
// if def_siberite_detection then
4555: LD_EXP 10
4559: IFFALSE 4576
// SetTech ( tech_SibDet , side , state_researched ) ;
4561: LD_INT 20
4563: PPUSH
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_INT 2
4571: PPUSH
4572: CALL_OW 322
// if def_siberite_bomb = 1 then
4576: LD_EXP 15
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: IFFALSE 4618
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4586: LD_INT 25
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4601: LD_INT 73
4603: PPUSH
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 322
// end else
4616: GO 4648
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4618: LD_INT 25
4620: PPUSH
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4633: LD_INT 73
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 322
// end ; global_defined := true ;
4648: LD_ADDR_LOC 3
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// end ;
4656: LD_VAR 0 2
4660: RET
// every 0 0$1 do
4661: GO 4663
4663: DISABLE
// if ( def_siberite_bomb > 1 ) then
4664: LD_EXP 15
4668: PUSH
4669: LD_INT 1
4671: GREATER
4672: IFFALSE 4687
// begin wait ( siberite_bomb_Delay ) ;
4674: LD_EXP 34
4678: PPUSH
4679: CALL_OW 67
// EnableSibFiss ;
4683: CALL 4688 0 0
// end ;
4687: END
// function EnableSibFiss ; var i ; begin
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
// for i := 1 to 8 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 8
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4752
// if Side_Positions [ i ] then
4708: LD_EXP 38
4712: PUSH
4713: LD_VAR 0 2
4717: ARRAY
4718: IFFALSE 4750
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4720: LD_INT 25
4722: PPUSH
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4735: LD_INT 73
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: LD_INT 1
4745: PPUSH
4746: CALL_OW 322
// end ;
4750: GO 4705
4752: POP
4753: POP
// end ;
4754: LD_VAR 0 1
4758: RET
// function prepare_sides ; var i ; begin
4759: LD_INT 0
4761: PPUSH
4762: PPUSH
// global_units := [ ] ;
4763: LD_ADDR_LOC 2
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// global_defined := false ;
4770: LD_ADDR_LOC 3
4774: PUSH
4775: LD_INT 0
4777: ST_TO_ADDR
// CountClassMembers ;
4778: CALL 4857 0 0
// for i := 1 to 8 do
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 8
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4850
// if Side_Positions [ i ] then
4798: LD_EXP 38
4802: PUSH
4803: LD_VAR 0 2
4807: ARRAY
4808: IFFALSE 4848
// begin prepare_side ( i ) ;
4810: LD_VAR 0 2
4814: PPUSH
4815: CALL 3609 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4819: LD_EXP 21
4823: PUSH
4824: LD_INT 12
4826: EQUAL
4827: PUSH
4828: LD_EXP 52
4832: PUSH
4833: LD_INT 0
4835: GREATER
4836: AND
4837: IFFALSE 4848
// prepare_mastodonts ( mastodont ) ;
4839: LD_EXP 52
4843: PPUSH
4844: CALL 3531 0 1
// end ;
4848: GO 4795
4850: POP
4851: POP
// end ;
4852: LD_VAR 0 1
4856: RET
// function CountClassMembers ; var Mode ; begin
4857: LD_INT 0
4859: PPUSH
4860: PPUSH
// if No_Mechs then
4861: LD_EXP 20
4865: IFFALSE 4877
// Mode := 2 else
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 2
4874: ST_TO_ADDR
4875: GO 4885
// Mode := 1 ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// neng := number_of_people ;
4885: LD_ADDR_LOC 5
4889: PUSH
4890: LD_EXP 24
4894: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4895: LD_ADDR_LOC 8
4899: PUSH
4900: LD_LOC 5
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: DIV
4921: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4922: LD_LOC 8
4926: PUSH
4927: LD_EXP 23
4931: LESS
4932: IFFALSE 4944
// nsol := number_of_breastworks ;
4934: LD_ADDR_LOC 8
4938: PUSH
4939: LD_EXP 23
4943: ST_TO_ADDR
// neng := neng - nsol ;
4944: LD_ADDR_LOC 5
4948: PUSH
4949: LD_LOC 5
4953: PUSH
4954: LD_LOC 8
4958: MINUS
4959: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4960: LD_ADDR_LOC 6
4964: PUSH
4965: LD_LOC 5
4969: PUSH
4970: LD_INT 3
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: DIV
4986: ST_TO_ADDR
// if ( nsci < 1 ) then
4987: LD_LOC 6
4991: PUSH
4992: LD_INT 1
4994: LESS
4995: IFFALSE 5005
// nsci := 1 ;
4997: LD_ADDR_LOC 6
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// neng := neng - nsci ;
5005: LD_ADDR_LOC 5
5009: PUSH
5010: LD_LOC 5
5014: PUSH
5015: LD_LOC 6
5019: MINUS
5020: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5021: LD_ADDR_LOC 7
5025: PUSH
5026: LD_LOC 5
5030: PUSH
5031: LD_INT 2
5033: DIV
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_VAR 0 2
5046: ARRAY
5047: ST_TO_ADDR
// neng := neng - nmech ;
5048: LD_ADDR_LOC 5
5052: PUSH
5053: LD_LOC 5
5057: PUSH
5058: LD_LOC 7
5062: MINUS
5063: ST_TO_ADDR
// if ( neng < 1 ) then
5064: LD_LOC 5
5068: PUSH
5069: LD_INT 1
5071: LESS
5072: IFFALSE 5082
// neng := 1 ;
5074: LD_ADDR_LOC 5
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 1
5086: RET
// starting begin disable ( 98 ) ;
5087: LD_INT 98
5089: DISABLE_MARKED
// disable ( 99 ) ;
5090: LD_INT 99
5092: DISABLE_MARKED
// disable ( 100 ) ;
5093: LD_INT 100
5095: DISABLE_MARKED
// disable ( 200 ) ;
5096: LD_INT 200
5098: DISABLE_MARKED
// disable ( 400 ) ;
5099: LD_INT 400
5101: DISABLE_MARKED
// disable ( 401 ) ;
5102: LD_INT 401
5104: DISABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5113: CALL 0 0 0
// init_map ;
5117: CALL 1509 0 0
// init_respawning ;
5121: CALL 14044 0 0
// set_shared_visions_and_alliances ;
5125: CALL 2674 0 0
// prepare_sides ;
5129: CALL 4759 0 0
// Init_Win_Condition ;
5133: CALL 15136 0 0
// ShowTimer ;
5137: CALL 8920 0 0
// if ( Game_Type = 4 ) then
5141: LD_EXP 21
5145: PUSH
5146: LD_INT 4
5148: EQUAL
5149: IFFALSE 5155
// InitBloodGods ;
5151: CALL 8685 0 0
// music_nat := Side_Nations [ your_side ] ;
5155: LD_ADDR_OWVAR 71
5159: PUSH
5160: LD_EXP 39
5164: PUSH
5165: LD_OWVAR 2
5169: ARRAY
5170: ST_TO_ADDR
// if IAmSpec then
5171: CALL_OW 531
5175: IFFALSE 5211
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5177: LD_INT 0
5179: PPUSH
5180: LD_INT 0
5182: PPUSH
5183: LD_OWVAR 2
5187: PPUSH
5188: LD_INT 32767
5190: NEG
5191: PPUSH
5192: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5196: LD_INT 104
5198: PPUSH
5199: LD_INT 69
5201: PPUSH
5202: CALL_OW 86
// enable ( 400 ) ;
5206: LD_INT 400
5208: ENABLE_MARKED
// end else
5209: GO 5265
// begin ResetFog ;
5211: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5215: LD_EXP 43
5219: PUSH
5220: LD_EXP 38
5224: PUSH
5225: LD_OWVAR 2
5229: ARRAY
5230: ARRAY
5231: PUSH
5232: LD_INT 1
5234: ARRAY
5235: PPUSH
5236: LD_EXP 43
5240: PUSH
5241: LD_EXP 38
5245: PUSH
5246: LD_OWVAR 2
5250: ARRAY
5251: ARRAY
5252: PUSH
5253: LD_INT 2
5255: ARRAY
5256: PPUSH
5257: CALL_OW 86
// Init_Win_Condition ;
5261: CALL 15136 0 0
// end ; AnimateTrees ( true ) ;
5265: LD_INT 1
5267: PPUSH
5268: CALL_OW 573
// InitApeman ;
5272: CALL 6047 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5276: LD_ADDR_EXP 62
5280: PUSH
5281: LD_INT 9
5283: PUSH
5284: LD_INT 10
5286: PUSH
5287: LD_INT 11
5289: PUSH
5290: LD_INT 12
5292: PUSH
5293: LD_INT 13
5295: PUSH
5296: LD_INT 14
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// BeginBuildUp ;
5307: CALL 14538 0 0
// end ; end_of_file
5311: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5312: GO 5314
5314: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5315: LD_INT 4
5317: PPUSH
5318: LD_INT 5
5320: PPUSH
5321: CALL_OW 12
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 57
// enable ;
5333: ENABLE
// end ;
5334: END
// every 1 1$0 marked 10 do
5335: GO 5337
5337: DISABLE
// begin repeat wait ( shipments_density / 100 * rand ( 0 0$50 , 1 1$00 ) ) ;
5338: LD_EXP 28
5342: PUSH
5343: LD_INT 100
5345: DIVREAL
5346: PUSH
5347: LD_INT 1750
5349: PPUSH
5350: LD_INT 2100
5352: PPUSH
5353: CALL_OW 12
5357: MUL
5358: PPUSH
5359: CALL_OW 67
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 60 then
5363: LD_INT 17
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 287
5373: PUSH
5374: LD_INT 60
5376: LESS
5377: IFFALSE 5400
// CreateCratesArea ( Rand ( 3 , 5 ) , MZSpecialArea , true ) ;
5379: LD_INT 3
5381: PPUSH
5382: LD_INT 5
5384: PPUSH
5385: CALL_OW 12
5389: PPUSH
5390: LD_INT 17
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 55
// until tick >= 300 300$00 ;
5400: LD_OWVAR 1
5404: PUSH
5405: LD_INT 630000
5407: GREATEREQUAL
5408: IFFALSE 5338
// end ;
5410: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5411: GO 5413
5413: DISABLE
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
// begin case tick of 1 .. 1 1$0 :
5418: LD_OWVAR 1
5422: PUSH
5423: LD_INT 1
5425: DOUBLE
5426: GREATEREQUAL
5427: IFFALSE 5435
5429: LD_INT 2100
5431: DOUBLE
5432: LESSEQUAL
5433: IFTRUE 5437
5435: GO 5465
5437: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5438: LD_EXP 28
5442: PUSH
5443: LD_INT 100
5445: DIVREAL
5446: PUSH
5447: LD_INT 525
5449: PPUSH
5450: LD_INT 1050
5452: PPUSH
5453: CALL_OW 12
5457: MUL
5458: PPUSH
5459: CALL_OW 67
5463: GO 5767
5465: LD_INT 2100
5467: PUSH
5468: LD_INT 1
5470: PLUS
5471: DOUBLE
5472: GREATEREQUAL
5473: IFFALSE 5481
5475: LD_INT 10500
5477: DOUBLE
5478: LESSEQUAL
5479: IFTRUE 5483
5481: GO 5511
5483: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5484: LD_EXP 28
5488: PUSH
5489: LD_INT 100
5491: DIVREAL
5492: PUSH
5493: LD_INT 1050
5495: PPUSH
5496: LD_INT 1750
5498: PPUSH
5499: CALL_OW 12
5503: MUL
5504: PPUSH
5505: CALL_OW 67
5509: GO 5767
5511: LD_INT 10500
5513: PUSH
5514: LD_INT 1
5516: PLUS
5517: DOUBLE
5518: GREATEREQUAL
5519: IFFALSE 5527
5521: LD_INT 21000
5523: DOUBLE
5524: LESSEQUAL
5525: IFTRUE 5529
5527: GO 5557
5529: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5530: LD_EXP 28
5534: PUSH
5535: LD_INT 100
5537: DIVREAL
5538: PUSH
5539: LD_INT 1750
5541: PPUSH
5542: LD_INT 2100
5544: PPUSH
5545: CALL_OW 12
5549: MUL
5550: PPUSH
5551: CALL_OW 67
5555: GO 5767
5557: LD_INT 21000
5559: PUSH
5560: LD_INT 1
5562: PLUS
5563: DOUBLE
5564: GREATEREQUAL
5565: IFFALSE 5573
5567: LD_INT 42000
5569: DOUBLE
5570: LESSEQUAL
5571: IFTRUE 5575
5573: GO 5603
5575: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5576: LD_EXP 28
5580: PUSH
5581: LD_INT 100
5583: DIVREAL
5584: PUSH
5585: LD_INT 2100
5587: PPUSH
5588: LD_INT 2275
5590: PPUSH
5591: CALL_OW 12
5595: MUL
5596: PPUSH
5597: CALL_OW 67
5601: GO 5767
5603: LD_INT 42000
5605: PUSH
5606: LD_INT 1
5608: PLUS
5609: DOUBLE
5610: GREATEREQUAL
5611: IFFALSE 5619
5613: LD_INT 63000
5615: DOUBLE
5616: LESSEQUAL
5617: IFTRUE 5621
5619: GO 5649
5621: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5622: LD_EXP 28
5626: PUSH
5627: LD_INT 100
5629: DIVREAL
5630: PUSH
5631: LD_INT 2275
5633: PPUSH
5634: LD_INT 2450
5636: PPUSH
5637: CALL_OW 12
5641: MUL
5642: PPUSH
5643: CALL_OW 67
5647: GO 5767
5649: LD_INT 63000
5651: PUSH
5652: LD_INT 1
5654: PLUS
5655: DOUBLE
5656: GREATEREQUAL
5657: IFFALSE 5665
5659: LD_INT 105000
5661: DOUBLE
5662: LESSEQUAL
5663: IFTRUE 5667
5665: GO 5695
5667: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5668: LD_EXP 28
5672: PUSH
5673: LD_INT 100
5675: DIVREAL
5676: PUSH
5677: LD_INT 2450
5679: PPUSH
5680: LD_INT 2800
5682: PPUSH
5683: CALL_OW 12
5687: MUL
5688: PPUSH
5689: CALL_OW 67
5693: GO 5767
5695: LD_INT 105000
5697: PUSH
5698: LD_INT 1
5700: PLUS
5701: DOUBLE
5702: GREATEREQUAL
5703: IFFALSE 5711
5705: LD_INT 630000
5707: DOUBLE
5708: LESSEQUAL
5709: IFTRUE 5713
5711: GO 5741
5713: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5714: LD_EXP 28
5718: PUSH
5719: LD_INT 100
5721: DIVREAL
5722: PUSH
5723: LD_INT 2800
5725: PPUSH
5726: LD_INT 3500
5728: PPUSH
5729: CALL_OW 12
5733: MUL
5734: PPUSH
5735: CALL_OW 67
5739: GO 5767
5741: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5742: LD_EXP 28
5746: PUSH
5747: LD_INT 100
5749: DIVREAL
5750: PUSH
5751: LD_INT 3500
5753: PPUSH
5754: LD_INT 3850
5756: PPUSH
5757: CALL_OW 12
5761: MUL
5762: PPUSH
5763: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5767: LD_ADDR_VAR 0 2
5771: PUSH
5772: LD_INT 3
5774: PPUSH
5775: LD_INT 5
5777: PPUSH
5778: CALL_OW 12
5782: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5783: LD_ADDR_VAR 0 1
5787: PUSH
5788: LD_EXP 38
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: EMPTY
5797: LIST
5798: DIFF
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5850
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5803: LD_VAR 0 2
5807: PPUSH
5808: LD_EXP 43
5812: PUSH
5813: LD_VAR 0 1
5817: ARRAY
5818: PUSH
5819: LD_INT 1
5821: ARRAY
5822: PPUSH
5823: LD_EXP 43
5827: PUSH
5828: LD_VAR 0 1
5832: ARRAY
5833: PUSH
5834: LD_INT 2
5836: ARRAY
5837: PPUSH
5838: LD_INT 20
5840: PPUSH
5841: LD_INT 1
5843: PPUSH
5844: CALL_OW 56
5848: GO 5800
5850: POP
5851: POP
// enable ;
5852: ENABLE
// end ; end_of_file
5853: PPOPN 2
5855: END
// every 20 20$00 trigger apemanNumber do
5856: LD_EXP 53
5860: IFFALSE 5893
5862: GO 5864
5864: DISABLE
// begin enable ;
5865: ENABLE
// if apeLevel >= 8 then
5866: LD_EXP 58
5870: PUSH
5871: LD_INT 8
5873: GREATEREQUAL
5874: IFFALSE 5879
// disable else
5876: DISABLE
5877: GO 5893
// apeLevel := apeLevel + 1 ;
5879: LD_ADDR_EXP 58
5883: PUSH
5884: LD_EXP 58
5888: PUSH
5889: LD_INT 1
5891: PLUS
5892: ST_TO_ADDR
// end ;
5893: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5894: LD_EXP 53
5898: PUSH
5899: LD_EXP 54
5903: LESS
5904: IFFALSE 6044
5906: GO 5908
5908: DISABLE
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
// begin enable ;
5915: ENABLE
// for i := 1 to apemanPos do
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: DOUBLE
5922: LD_INT 1
5924: DEC
5925: ST_TO_ADDR
5926: LD_EXP 56
5930: PUSH
5931: FOR_TO
5932: IFFALSE 6042
// begin if apemanPlayerCount [ i ] then
5934: LD_EXP 57
5938: PUSH
5939: LD_VAR 0 1
5943: ARRAY
5944: IFFALSE 6040
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5946: LD_EXP 57
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: PUSH
5957: LD_EXP 56
5961: PUSH
5962: LD_VAR 0 1
5966: ARRAY
5967: GREATER
5968: IFFALSE 6040
// begin ape := PrepareApeman ;
5970: LD_ADDR_VAR 0 2
5974: PUSH
5975: CALL 6555 0 0
5979: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5980: LD_VAR 0 2
5984: PPUSH
5985: LD_EXP 59
5989: PUSH
5990: LD_VAR 0 1
5994: ARRAY
5995: PPUSH
5996: LD_INT 0
5998: PPUSH
5999: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6003: LD_ADDR_EXP 56
6007: PUSH
6008: LD_EXP 56
6012: PPUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_EXP 56
6022: PUSH
6023: LD_VAR 0 1
6027: ARRAY
6028: PUSH
6029: LD_VAR 0 2
6033: UNION
6034: PPUSH
6035: CALL_OW 1
6039: ST_TO_ADDR
// end ; end ; end ;
6040: GO 5931
6042: POP
6043: POP
// end ;
6044: PPOPN 4
6046: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6047: LD_INT 0
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
6055: PPUSH
// playersAmount := 0 ;
6056: LD_ADDR_VAR 0 3
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 1
6071: PUSH
6072: LD_INT 2
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: LD_INT 4
6080: PUSH
6081: LD_INT 5
6083: PUSH
6084: LD_INT 6
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6095: LD_ADDR_EXP 59
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: LD_INT 0
6108: PUSH
6109: LD_INT 0
6111: PUSH
6112: LD_INT 0
6114: PUSH
6115: LD_INT 0
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: ST_TO_ADDR
// for j = 1 to Side_Positions do
6134: LD_ADDR_VAR 0 4
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_EXP 38
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6217
// if Side_Positions [ j ] then
6152: LD_EXP 38
6156: PUSH
6157: LD_VAR 0 4
6161: ARRAY
6162: IFFALSE 6215
// begin playersAmount := playersAmount + 1 ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 1
6176: PLUS
6177: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6178: LD_ADDR_EXP 59
6182: PUSH
6183: LD_EXP 59
6187: PPUSH
6188: LD_VAR 0 4
6192: PPUSH
6193: LD_VAR 0 7
6197: PUSH
6198: LD_EXP 38
6202: PUSH
6203: LD_VAR 0 4
6207: ARRAY
6208: ARRAY
6209: PPUSH
6210: CALL_OW 1
6214: ST_TO_ADDR
// end ;
6215: GO 6149
6217: POP
6218: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6219: LD_ADDR_EXP 55
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: LD_EXP 30
6231: MUL
6232: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6233: LD_ADDR_EXP 53
6237: PUSH
6238: LD_VAR 0 3
6242: PUSH
6243: LD_EXP 55
6247: MUL
6248: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6249: LD_ADDR_EXP 54
6253: PUSH
6254: LD_EXP 53
6258: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6259: LD_ADDR_EXP 56
6263: PUSH
6264: LD_INT 0
6266: PUSH
6267: LD_INT 0
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: LD_INT 0
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6298: LD_ADDR_EXP 57
6302: PUSH
6303: LD_INT 0
6305: PUSH
6306: LD_INT 0
6308: PUSH
6309: LD_INT 0
6311: PUSH
6312: LD_INT 0
6314: PUSH
6315: LD_INT 0
6317: PUSH
6318: LD_INT 0
6320: PUSH
6321: LD_INT 0
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: ST_TO_ADDR
// apeLevel := 1 ;
6337: LD_ADDR_EXP 58
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// if not apemanNumber then
6345: LD_EXP 53
6349: NOT
6350: IFFALSE 6354
// exit ;
6352: GO 6550
// for i := 1 to apemanPerPlayer do
6354: LD_ADDR_VAR 0 2
6358: PUSH
6359: DOUBLE
6360: LD_INT 1
6362: DEC
6363: ST_TO_ADDR
6364: LD_EXP 55
6368: PUSH
6369: FOR_TO
6370: IFFALSE 6548
// begin for j := 1 to Side_Positions do
6372: LD_ADDR_VAR 0 4
6376: PUSH
6377: DOUBLE
6378: LD_INT 1
6380: DEC
6381: ST_TO_ADDR
6382: LD_EXP 38
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6544
// if Side_Positions [ j ] then
6390: LD_EXP 38
6394: PUSH
6395: LD_VAR 0 4
6399: ARRAY
6400: IFFALSE 6542
// begin pos := Side_Positions [ j ] ;
6402: LD_ADDR_VAR 0 6
6406: PUSH
6407: LD_EXP 38
6411: PUSH
6412: LD_VAR 0 4
6416: ARRAY
6417: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6418: LD_ADDR_EXP 57
6422: PUSH
6423: LD_EXP 57
6427: PPUSH
6428: LD_VAR 0 4
6432: PPUSH
6433: LD_EXP 57
6437: PUSH
6438: LD_VAR 0 4
6442: ARRAY
6443: PUSH
6444: LD_INT 1
6446: PLUS
6447: PPUSH
6448: CALL_OW 1
6452: ST_TO_ADDR
// ape := PrepareApeman ;
6453: LD_ADDR_VAR 0 5
6457: PUSH
6458: CALL 6555 0 0
6462: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6463: LD_ADDR_EXP 56
6467: PUSH
6468: LD_EXP 56
6472: PPUSH
6473: LD_VAR 0 4
6477: PPUSH
6478: LD_EXP 56
6482: PUSH
6483: LD_VAR 0 4
6487: ARRAY
6488: PPUSH
6489: LD_EXP 56
6493: PUSH
6494: LD_VAR 0 4
6498: ARRAY
6499: PUSH
6500: LD_INT 1
6502: PLUS
6503: PPUSH
6504: LD_VAR 0 5
6508: PPUSH
6509: CALL_OW 1
6513: PPUSH
6514: CALL_OW 1
6518: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6519: LD_VAR 0 5
6523: PPUSH
6524: LD_EXP 59
6528: PUSH
6529: LD_VAR 0 4
6533: ARRAY
6534: PPUSH
6535: LD_INT 0
6537: PPUSH
6538: CALL_OW 49
// end ;
6542: GO 6387
6544: POP
6545: POP
// end ;
6546: GO 6369
6548: POP
6549: POP
// end ;
6550: LD_VAR 0 1
6554: RET
// export function PrepareApeman ; var bonus ; begin
6555: LD_INT 0
6557: PPUSH
6558: PPUSH
// uc_side := 0 ;
6559: LD_ADDR_OWVAR 20
6563: PUSH
6564: LD_INT 0
6566: ST_TO_ADDR
// uc_nation := 0 ;
6567: LD_ADDR_OWVAR 21
6571: PUSH
6572: LD_INT 0
6574: ST_TO_ADDR
// InitHc ;
6575: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: LD_INT 1
6586: NEG
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 1
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 25
6601: PUSH
6602: LD_INT 12
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 69
6613: PUSH
6614: LD_INT 3
6616: MOD
6617: PUSH
6618: LD_INT 1
6620: PLUS
6621: ARRAY
6622: ST_TO_ADDR
// hc_class := class_apeman ;
6623: LD_ADDR_OWVAR 28
6627: PUSH
6628: LD_INT 12
6630: ST_TO_ADDR
// hc_gallery :=  ;
6631: LD_ADDR_OWVAR 33
6635: PUSH
6636: LD_STRING 
6638: ST_TO_ADDR
// hc_name :=  ;
6639: LD_ADDR_OWVAR 26
6643: PUSH
6644: LD_STRING 
6646: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6647: LD_ADDR_OWVAR 31
6651: PUSH
6652: LD_EXP 58
6656: PUSH
6657: LD_VAR 0 2
6661: PLUS
6662: PUSH
6663: LD_EXP 58
6667: PUSH
6668: LD_VAR 0 2
6672: PLUS
6673: PUSH
6674: LD_EXP 58
6678: PUSH
6679: LD_VAR 0 2
6683: PLUS
6684: PUSH
6685: LD_EXP 58
6689: PUSH
6690: LD_VAR 0 2
6694: PLUS
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6702: LD_ADDR_OWVAR 35
6706: PUSH
6707: LD_INT 10
6709: PUSH
6710: LD_VAR 0 2
6714: MUL
6715: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6716: LD_ADDR_OWVAR 29
6720: PUSH
6721: LD_INT 12
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: ST_TO_ADDR
// result := CreateHuman ;
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: CALL_OW 44
6740: ST_TO_ADDR
// end ;
6741: LD_VAR 0 1
6745: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6746: LD_INT 0
6748: PPUSH
6749: PPUSH
6750: PPUSH
// if not ape then
6751: LD_VAR 0 1
6755: NOT
6756: IFFALSE 6760
// exit ;
6758: GO 6863
// for i = 1 to apemanPos do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_EXP 56
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6810
// if ape in apemanPos [ i ] then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_EXP 56
6787: PUSH
6788: LD_VAR 0 4
6792: ARRAY
6793: IN
6794: IFFALSE 6808
// begin s := i ;
6796: LD_ADDR_VAR 0 3
6800: PUSH
6801: LD_VAR 0 4
6805: ST_TO_ADDR
// break ;
6806: GO 6810
// end ;
6808: GO 6775
6810: POP
6811: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6812: LD_ADDR_EXP 56
6816: PUSH
6817: LD_EXP 56
6821: PPUSH
6822: LD_VAR 0 3
6826: PPUSH
6827: LD_EXP 56
6831: PUSH
6832: LD_VAR 0 3
6836: ARRAY
6837: PUSH
6838: LD_VAR 0 1
6842: DIFF
6843: PPUSH
6844: CALL_OW 1
6848: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6849: LD_ADDR_EXP 53
6853: PUSH
6854: LD_EXP 53
6858: PUSH
6859: LD_INT 1
6861: MINUS
6862: ST_TO_ADDR
// end ; end_of_file
6863: LD_VAR 0 2
6867: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6868: LD_VAR 0 1
6872: PPUSH
6873: CALL_OW 266
6877: PUSH
6878: LD_INT 0
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: IN
6888: IFFALSE 6913
// SetBName ( b , @ & GetSide ( b ) ) ;
6890: LD_VAR 0 1
6894: PPUSH
6895: LD_STRING @
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 255
6907: STR
6908: PPUSH
6909: CALL_OW 500
// end ;
6913: PPOPN 2
6915: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6916: LD_VAR 0 1
6920: PPUSH
6921: CALL_OW 266
6925: PUSH
6926: LD_INT 0
6928: PUSH
6929: LD_INT 1
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: IN
6936: IFFALSE 6961
// SetBName ( b , @ & GetSide ( b ) ) ;
6938: LD_VAR 0 1
6942: PPUSH
6943: LD_STRING @
6945: PUSH
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL_OW 255
6955: STR
6956: PPUSH
6957: CALL_OW 500
// end ;
6961: PPOPN 3
6963: END
// on VehicleConstructed ( veh , fac ) do var side ;
6964: LD_INT 0
6966: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6967: LD_VAR 0 1
6971: PPUSH
6972: CALL_OW 263
6976: PUSH
6977: LD_INT 5
6979: EQUAL
6980: IFFALSE 7122
// begin side := GetSide ( veh ) ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL_OW 255
6996: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6997: LD_ADDR_EXP 56
7001: PUSH
7002: LD_EXP 56
7006: PPUSH
7007: LD_VAR 0 3
7011: PPUSH
7012: LD_EXP 56
7016: PUSH
7017: LD_VAR 0 3
7021: ARRAY
7022: PPUSH
7023: LD_INT 52
7025: PUSH
7026: EMPTY
7027: LIST
7028: PPUSH
7029: CALL_OW 72
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_VAR 0 3
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 2
7048: PUSH
7049: LD_INT 33
7051: PUSH
7052: LD_INT 5
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 12
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 25
7071: PUSH
7072: LD_INT 15
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 25
7081: PUSH
7082: LD_INT 16
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 25
7091: PUSH
7092: LD_INT 17
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PPUSH
7111: CALL_OW 69
7115: UNION
7116: PPUSH
7117: CALL_OW 1
7121: ST_TO_ADDR
// end ; end ;
7122: PPOPN 3
7124: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7125: LD_INT 0
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 257
7140: PUSH
7141: LD_INT 12
7143: PUSH
7144: LD_INT 15
7146: PUSH
7147: LD_INT 17
7149: PUSH
7150: LD_INT 16
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: IN
7159: PUSH
7160: LD_VAR 0 1
7164: PPUSH
7165: CALL_OW 263
7169: PUSH
7170: LD_INT 5
7172: EQUAL
7173: OR
7174: IFFALSE 7185
// ApeKilled ( j ) ;
7176: LD_VAR 0 1
7180: PPUSH
7181: CALL 6746 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7185: LD_VAR 0 1
7189: PPUSH
7190: CALL_OW 266
7194: PUSH
7195: LD_INT 0
7197: PUSH
7198: LD_INT 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: IN
7205: IFFALSE 7287
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7207: LD_ADDR_VAR 0 4
7211: PUSH
7212: LD_EXP 38
7216: PUSH
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 255
7226: ARRAY
7227: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7228: LD_ADDR_VAR 0 2
7232: PUSH
7233: LD_EXP 43
7237: PUSH
7238: LD_VAR 0 4
7242: ARRAY
7243: PUSH
7244: LD_INT 1
7246: ARRAY
7247: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7248: LD_ADDR_VAR 0 3
7252: PUSH
7253: LD_EXP 43
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 2
7266: ARRAY
7267: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_VAR 0 3
7277: PPUSH
7278: CALL_OW 420
7282: PPUSH
7283: CALL_OW 419
// end ; end ;
7287: PPOPN 5
7289: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7290: LD_VAR 0 1
7294: PPUSH
7295: LD_VAR 0 2
7299: PPUSH
7300: LD_VAR 0 3
7304: PPUSH
7305: LD_OWVAR 2
7309: PPUSH
7310: CALL 9081 0 4
7314: PPOPN 3
7316: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7317: GO 7319
7319: DISABLE
7320: LD_INT 0
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
7326: PPUSH
// begin sib_mined := [ ] ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: EMPTY
7333: ST_TO_ADDR
// for i := 1 to 8 do
7334: LD_ADDR_VAR 0 1
7338: PUSH
7339: DOUBLE
7340: LD_INT 1
7342: DEC
7343: ST_TO_ADDR
7344: LD_INT 8
7346: PUSH
7347: FOR_TO
7348: IFFALSE 7504
// if Side_Positions [ i ] then
7350: LD_EXP 38
7354: PUSH
7355: LD_VAR 0 1
7359: ARRAY
7360: IFFALSE 7488
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7362: LD_ADDR_VAR 0 4
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 2
7381: PUSH
7382: LD_INT 30
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 30
7394: PUSH
7395: LD_INT 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// pom := 0 ;
7416: LD_ADDR_VAR 0 3
7420: PUSH
7421: LD_INT 0
7423: ST_TO_ADDR
// for base in filter do
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: LD_VAR 0 4
7433: PUSH
7434: FOR_IN
7435: IFFALSE 7468
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: LD_VAR 0 3
7446: PUSH
7447: LD_VAR 0 2
7451: PPUSH
7452: CALL_OW 274
7456: PPUSH
7457: LD_INT 3
7459: PPUSH
7460: CALL_OW 275
7464: PLUS
7465: ST_TO_ADDR
7466: GO 7434
7468: POP
7469: POP
// sib_mined := sib_mined ^ pom ;
7470: LD_ADDR_VAR 0 5
7474: PUSH
7475: LD_VAR 0 5
7479: PUSH
7480: LD_VAR 0 3
7484: ADD
7485: ST_TO_ADDR
// end else
7486: GO 7502
// sib_mined := sib_mined ^ 0 ;
7488: LD_ADDR_VAR 0 5
7492: PUSH
7493: LD_VAR 0 5
7497: PUSH
7498: LD_INT 0
7500: ADD
7501: ST_TO_ADDR
7502: GO 7347
7504: POP
7505: POP
// if not def_public_score then
7506: LD_EXP 14
7510: NOT
7511: IFFALSE 7601
// begin ExtraStrings := [ ] ;
7513: LD_ADDR_EXP 60
7517: PUSH
7518: EMPTY
7519: ST_TO_ADDR
// for i := 1 to 8 do
7520: LD_ADDR_VAR 0 1
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_INT 8
7532: PUSH
7533: FOR_TO
7534: IFFALSE 7597
// if Side_Positions [ i ] then
7536: LD_EXP 38
7540: PUSH
7541: LD_VAR 0 1
7545: ARRAY
7546: IFFALSE 7595
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7548: LD_ADDR_EXP 60
7552: PUSH
7553: LD_EXP 60
7557: PUSH
7558: LD_STRING #AlienBase-MinedPublic
7560: PUSH
7561: LD_VAR 0 1
7565: PUSH
7566: LD_VAR 0 1
7570: PUSH
7571: LD_VAR 0 5
7575: PUSH
7576: LD_VAR 0 1
7580: ARRAY
7581: PUSH
7582: LD_EXP 31
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: ADD
7594: ST_TO_ADDR
7595: GO 7533
7597: POP
7598: POP
// end else
7599: GO 7630
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7601: LD_ADDR_EXP 60
7605: PUSH
7606: LD_STRING #AlienBase-Mined
7608: PUSH
7609: LD_VAR 0 5
7613: PUSH
7614: LD_OWVAR 2
7618: ARRAY
7619: PUSH
7620: LD_EXP 31
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: ST_TO_ADDR
// for i := 1 to 8 do
7630: LD_ADDR_VAR 0 1
7634: PUSH
7635: DOUBLE
7636: LD_INT 1
7638: DEC
7639: ST_TO_ADDR
7640: LD_INT 8
7642: PUSH
7643: FOR_TO
7644: IFFALSE 7701
// if sib_mined [ i ] >= amount_of_siberit then
7646: LD_VAR 0 5
7650: PUSH
7651: LD_VAR 0 1
7655: ARRAY
7656: PUSH
7657: LD_EXP 31
7661: GREATEREQUAL
7662: IFFALSE 7699
// begin wait ( 0 0$1 ) ;
7664: LD_INT 35
7666: PPUSH
7667: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
7671: LD_VAR 0 5
7675: PUSH
7676: LD_OWVAR 2
7680: ARRAY
7681: PUSH
7682: LD_EXP 31
7686: GREATEREQUAL
7687: IFFALSE 7695
// YouWinInMultiplayer else
7689: CALL_OW 106
7693: GO 7699
// YouLostInMultiplayer ;
7695: CALL_OW 107
// end ;
7699: GO 7643
7701: POP
7702: POP
// enable ;
7703: ENABLE
// end ; end_of_file
7704: PPOPN 5
7706: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
// for un in battle_flags_id do
7711: LD_ADDR_VAR 0 2
7715: PUSH
7716: LD_EXP 48
7720: PUSH
7721: FOR_IN
7722: IFFALSE 7797
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7724: LD_VAR 0 2
7728: PPUSH
7729: LD_INT 1
7731: PUSH
7732: LD_LOC 9
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 2
7743: PUSH
7744: LD_LOC 9
7748: PUSH
7749: LD_INT 2
7751: DIV
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: LD_LOC 9
7764: PUSH
7765: LD_INT 5
7767: DIV
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 20
7775: PUSH
7776: LD_LOC 9
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 423
7795: GO 7721
7797: POP
7798: POP
// end ;
7799: LD_VAR 0 1
7803: RET
// every 1 do var un ;
7804: GO 7806
7806: DISABLE
7807: LD_INT 0
7809: PPUSH
// begin if not def_morale_flags then
7810: LD_EXP 9
7814: NOT
7815: IFFALSE 7819
// exit ;
7817: GO 7896
// if not morale_decreasing_time then
7819: LD_EXP 29
7823: NOT
7824: IFFALSE 7828
// exit ;
7826: GO 7896
// strength = 100 ;
7828: LD_ADDR_LOC 9
7832: PUSH
7833: LD_INT 100
7835: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7836: LD_EXP 29
7840: PPUSH
7841: CALL_OW 67
// strength := strength - 1 ;
7845: LD_ADDR_LOC 9
7849: PUSH
7850: LD_LOC 9
7854: PUSH
7855: LD_INT 1
7857: MINUS
7858: ST_TO_ADDR
// Update_Flags ;
7859: CALL 7707 0 0
// until not strength ;
7863: LD_LOC 9
7867: NOT
7868: IFFALSE 7836
// for un in battle_flags_id do
7870: LD_ADDR_VAR 0 1
7874: PUSH
7875: LD_EXP 48
7879: PUSH
7880: FOR_IN
7881: IFFALSE 7894
// KillBattleFlag ( un ) ;
7883: LD_VAR 0 1
7887: PPUSH
7888: CALL_OW 419
7892: GO 7880
7894: POP
7895: POP
// end ; end_of_file
7896: PPOPN 1
7898: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
7899: GO 7901
7901: DISABLE
7902: LD_INT 0
7904: PPUSH
// begin enable ;
7905: ENABLE
// for x := 1 to 8 do
7906: LD_ADDR_VAR 0 1
7910: PUSH
7911: DOUBLE
7912: LD_INT 1
7914: DEC
7915: ST_TO_ADDR
7916: LD_INT 8
7918: PUSH
7919: FOR_TO
7920: IFFALSE 8004
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
7922: LD_LOC 16
7926: PUSH
7927: LD_VAR 0 1
7931: ARRAY
7932: PUSH
7933: LD_INT 5
7935: GREATER
7936: PUSH
7937: LD_LOC 14
7941: PUSH
7942: LD_VAR 0 1
7946: ARRAY
7947: PUSH
7948: LD_INT 1
7950: NEG
7951: EQUAL
7952: AND
7953: IFFALSE 8002
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
7955: LD_ADDR_LOC 15
7959: PUSH
7960: LD_LOC 15
7964: PPUSH
7965: LD_VAR 0 1
7969: PPUSH
7970: LD_LOC 15
7974: PUSH
7975: LD_VAR 0 1
7979: ARRAY
7980: PUSH
7981: LD_INT 6
7983: PLUS
7984: PPUSH
7985: CALL_OW 1
7989: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_INT 0
7997: PPUSH
7998: CALL 8176 0 2
// end ;
8002: GO 7919
8004: POP
8005: POP
// end ;
8006: PPOPN 1
8008: END
// every 0 0$1 marked 200 do var BGL , x ;
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
// begin enable ;
8016: ENABLE
// for x := 1 to 8 do
8017: LD_ADDR_VAR 0 2
8021: PUSH
8022: DOUBLE
8023: LD_INT 1
8025: DEC
8026: ST_TO_ADDR
8027: LD_INT 8
8029: PUSH
8030: FOR_TO
8031: IFFALSE 8162
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8033: LD_LOC 14
8037: PUSH
8038: LD_VAR 0 2
8042: ARRAY
8043: PUSH
8044: LD_INT 1
8046: NEG
8047: GREATER
8048: PUSH
8049: LD_LOC 14
8053: PUSH
8054: LD_VAR 0 2
8058: ARRAY
8059: PPUSH
8060: CALL_OW 300
8064: AND
8065: IFFALSE 8160
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8067: LD_ADDR_VAR 0 1
8071: PUSH
8072: LD_LOC 14
8076: PUSH
8077: LD_VAR 0 2
8081: ARRAY
8082: PPUSH
8083: CALL_OW 256
8087: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 1000
8095: LESS
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 100
8104: GREATER
8105: AND
8106: IFFALSE 8160
// begin BGL := BGL + 10 ;
8108: LD_ADDR_VAR 0 1
8112: PUSH
8113: LD_VAR 0 1
8117: PUSH
8118: LD_INT 10
8120: PLUS
8121: ST_TO_ADDR
// if BGL > 1000 then
8122: LD_VAR 0 1
8126: PUSH
8127: LD_INT 1000
8129: GREATER
8130: IFFALSE 8140
// BGL := 1000 ;
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_INT 1000
8139: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8140: LD_LOC 14
8144: PUSH
8145: LD_VAR 0 2
8149: ARRAY
8150: PPUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 234
// end ; end ;
8160: GO 8030
8162: POP
8163: POP
// end ;
8164: PPOPN 2
8166: END
// every 0 0$1 marked 200 do
8167: GO 8169
8169: DISABLE
// begin DisplayTimeWithKills ;
8170: CALL 8417 0 0
// enable ;
8174: ENABLE
// end ;
8175: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8176: LD_INT 0
8178: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8179: LD_ADDR_OWVAR 24
8183: PUSH
8184: LD_INT 0
8186: PPUSH
8187: LD_INT 5
8189: PPUSH
8190: CALL_OW 12
8194: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 1
8200: PPUSH
8201: LD_INT 15
8203: PPUSH
8204: CALL_OW 380
// hc_importance := 106 ;
8208: LD_ADDR_OWVAR 32
8212: PUSH
8213: LD_INT 106
8215: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8216: LD_ADDR_OWVAR 26
8220: PUSH
8221: LD_STRING Blood God of 
8223: PUSH
8224: LD_OWVAR 19
8228: PUSH
8229: LD_VAR 0 1
8233: ARRAY
8234: STR
8235: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8236: LD_ADDR_OWVAR 21
8240: PUSH
8241: LD_EXP 39
8245: PUSH
8246: LD_VAR 0 1
8250: ARRAY
8251: ST_TO_ADDR
// uc_side := side ;
8252: LD_ADDR_OWVAR 20
8256: PUSH
8257: LD_VAR 0 1
8261: ST_TO_ADDR
// hc_noskilllimit := true ;
8262: LD_ADDR_OWVAR 76
8266: PUSH
8267: LD_INT 1
8269: ST_TO_ADDR
// hc_agressivity := 50 ;
8270: LD_ADDR_OWVAR 35
8274: PUSH
8275: LD_INT 50
8277: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8278: LD_ADDR_LOC 14
8282: PUSH
8283: LD_LOC 14
8287: PPUSH
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 44
8297: PPUSH
8298: CALL_OW 1
8302: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8303: LD_LOC 14
8307: PUSH
8308: LD_VAR 0 1
8312: ARRAY
8313: PPUSH
8314: LD_LOC 17
8318: PUSH
8319: LD_EXP 38
8323: PUSH
8324: LD_VAR 0 1
8328: ARRAY
8329: ARRAY
8330: PUSH
8331: LD_INT 1
8333: ARRAY
8334: PPUSH
8335: LD_LOC 17
8339: PUSH
8340: LD_EXP 38
8344: PUSH
8345: LD_VAR 0 1
8349: ARRAY
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PPUSH
8356: LD_INT 10
8358: PPUSH
8359: LD_INT 0
8361: PPUSH
8362: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8366: LD_LOC 14
8370: PUSH
8371: LD_VAR 0 1
8375: ARRAY
8376: PPUSH
8377: LD_INT 1
8379: PPUSH
8380: LD_INT 300
8382: PPUSH
8383: CALL_OW 239
// if not NoDialog then
8387: LD_VAR 0 2
8391: NOT
8392: IFFALSE 8412
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8394: LD_LOC 14
8398: PUSH
8399: LD_VAR 0 1
8403: ARRAY
8404: PPUSH
8405: LD_STRING DLAwaken
8407: PPUSH
8408: CALL_OW 94
// end ;
8412: LD_VAR 0 3
8416: RET
// function DisplayTimeWithKills ; var x ; begin
8417: LD_INT 0
8419: PPUSH
8420: PPUSH
// ExtraStrings :=  ;
8421: LD_ADDR_EXP 60
8425: PUSH
8426: LD_STRING 
8428: ST_TO_ADDR
// for x = 1 to Side_Positions do
8429: LD_ADDR_VAR 0 2
8433: PUSH
8434: DOUBLE
8435: LD_INT 1
8437: DEC
8438: ST_TO_ADDR
8439: LD_EXP 38
8443: PUSH
8444: FOR_TO
8445: IFFALSE 8678
// if Side_Positions [ x ] then
8447: LD_EXP 38
8451: PUSH
8452: LD_VAR 0 2
8456: ARRAY
8457: IFFALSE 8676
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8459: LD_ADDR_LOC 16
8463: PUSH
8464: LD_LOC 16
8468: PPUSH
8469: LD_VAR 0 2
8473: PPUSH
8474: LD_VAR 0 2
8478: PPUSH
8479: CALL_OW 515
8483: PUSH
8484: LD_LOC 15
8488: PUSH
8489: LD_VAR 0 2
8493: ARRAY
8494: MINUS
8495: PPUSH
8496: CALL_OW 1
8500: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8501: LD_LOC 14
8505: PUSH
8506: LD_VAR 0 2
8510: ARRAY
8511: PUSH
8512: LD_INT 1
8514: NEG
8515: GREATER
8516: PUSH
8517: LD_LOC 14
8521: PUSH
8522: LD_VAR 0 2
8526: ARRAY
8527: PPUSH
8528: CALL_OW 300
8532: AND
8533: IFFALSE 8566
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8535: LD_ADDR_EXP 60
8539: PUSH
8540: LD_EXP 60
8544: PUSH
8545: LD_STRING #godawoken
8547: PUSH
8548: LD_VAR 0 2
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: ADD
8563: ST_TO_ADDR
8564: GO 8676
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8566: LD_LOC 14
8570: PUSH
8571: LD_VAR 0 2
8575: ARRAY
8576: PUSH
8577: LD_INT 1
8579: NEG
8580: GREATER
8581: PUSH
8582: LD_LOC 14
8586: PUSH
8587: LD_VAR 0 2
8591: ARRAY
8592: PPUSH
8593: CALL_OW 301
8597: AND
8598: IFFALSE 8631
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8600: LD_ADDR_EXP 60
8604: PUSH
8605: LD_EXP 60
8609: PUSH
8610: LD_STRING #goddied
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: ADD
8628: ST_TO_ADDR
8629: GO 8676
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8631: LD_ADDR_EXP 60
8635: PUSH
8636: LD_EXP 60
8640: PUSH
8641: LD_STRING #godssacrifise
8643: PUSH
8644: LD_VAR 0 2
8648: PUSH
8649: LD_VAR 0 2
8653: PUSH
8654: LD_LOC 16
8658: PUSH
8659: LD_VAR 0 2
8663: ARRAY
8664: PUSH
8665: LD_INT 6
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: ADD
8675: ST_TO_ADDR
8676: GO 8444
8678: POP
8679: POP
// end ;
8680: LD_VAR 0 1
8684: RET
// export function InitBloodGods ; begin
8685: LD_INT 0
8687: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
8688: LD_ADDR_LOC 14
8692: PUSH
8693: LD_INT 1
8695: NEG
8696: PUSH
8697: LD_INT 1
8699: NEG
8700: PUSH
8701: LD_INT 1
8703: NEG
8704: PUSH
8705: LD_INT 1
8707: NEG
8708: PUSH
8709: LD_INT 1
8711: NEG
8712: PUSH
8713: LD_INT 1
8715: NEG
8716: PUSH
8717: LD_INT 1
8719: NEG
8720: PUSH
8721: LD_INT 1
8723: NEG
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8735: LD_ADDR_LOC 15
8739: PUSH
8740: LD_INT 0
8742: PUSH
8743: LD_INT 0
8745: PUSH
8746: LD_INT 0
8748: PUSH
8749: LD_INT 0
8751: PUSH
8752: LD_INT 0
8754: PUSH
8755: LD_INT 0
8757: PUSH
8758: LD_INT 0
8760: PUSH
8761: LD_INT 0
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8774: LD_ADDR_LOC 16
8778: PUSH
8779: LD_INT 0
8781: PUSH
8782: LD_INT 0
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: LD_INT 0
8790: PUSH
8791: LD_INT 0
8793: PUSH
8794: LD_INT 0
8796: PUSH
8797: LD_INT 0
8799: PUSH
8800: LD_INT 0
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
8813: LD_ADDR_LOC 17
8817: PUSH
8818: LD_INT 60
8820: PUSH
8821: LD_INT 47
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 82
8830: PUSH
8831: LD_INT 26
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 124
8840: PUSH
8841: LD_INT 45
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 147
8850: PUSH
8851: LD_INT 90
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 126
8860: PUSH
8861: LD_INT 112
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 84
8870: PUSH
8871: LD_INT 92
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 106
8880: PUSH
8881: LD_INT 73
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 106
8890: PUSH
8891: LD_INT 73
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: ST_TO_ADDR
// ClearHumansKilled ;
8908: CALL_OW 516
// enable ( 200 ) ;
8912: LD_INT 200
8914: ENABLE_MARKED
// end ; end_of_file
8915: LD_VAR 0 1
8919: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: LD_STRING #Multi1x1-Time
8931: PUSH
8932: LD_OWVAR 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8941: LD_INT 0
8943: PUSH
8944: LD_EXP 34
8948: PUSH
8949: LD_OWVAR 1
8953: MINUS
8954: LESSEQUAL
8955: IFFALSE 8986
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8957: LD_ADDR_VAR 0 2
8961: PUSH
8962: LD_VAR 0 2
8966: PUSH
8967: LD_STRING #allowedsibbomb
8969: PUSH
8970: LD_EXP 34
8974: PUSH
8975: LD_OWVAR 1
8979: MINUS
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: ADD
8985: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8986: LD_INT 0
8988: PUSH
8989: LD_EXP 64
8993: PUSH
8994: LD_OWVAR 1
8998: MINUS
8999: LESSEQUAL
9000: IFFALSE 9031
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
9002: LD_ADDR_VAR 0 2
9006: PUSH
9007: LD_VAR 0 2
9011: PUSH
9012: LD_STRING #builduptime
9014: PUSH
9015: LD_EXP 64
9019: PUSH
9020: LD_OWVAR 1
9024: MINUS
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: ADD
9030: ST_TO_ADDR
// if ( ExtraStrings ) then
9031: LD_EXP 60
9035: IFFALSE 9057
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9037: LD_ADDR_VAR 0 2
9041: PUSH
9042: LD_VAR 0 2
9046: PUSH
9047: LD_STRING 
9049: ADD
9050: PUSH
9051: LD_EXP 60
9055: ADD
9056: ST_TO_ADDR
// Display_Strings := AllStrings ;
9057: LD_ADDR_OWVAR 47
9061: PUSH
9062: LD_VAR 0 2
9066: ST_TO_ADDR
// end ;
9067: LD_VAR 0 1
9071: RET
// every 0 0$1 do
9072: GO 9074
9074: DISABLE
// begin ShowTimer ;
9075: CALL 8920 0 0
// enable ;
9079: ENABLE
// end ; end_of_file
9080: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9081: LD_INT 0
9083: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_VAR 0 4
9098: EQUAL
9099: IFFALSE 9118
// begin SetAchievement ( ACH_RAD ) ;
9101: LD_STRING ACH_RAD
9103: PPUSH
9104: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9108: LD_STRING ACH_NL
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 564
// end end ;
9118: LD_VAR 0 5
9122: RET
// export function SA_Win ( side ) ; begin
9123: LD_INT 0
9125: PPUSH
// case side of 1 :
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 1
9133: DOUBLE
9134: EQUAL
9135: IFTRUE 9139
9137: GO 9152
9139: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9140: LD_STRING ACH_AH
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 564
9150: GO 9315
9152: LD_INT 2
9154: DOUBLE
9155: EQUAL
9156: IFTRUE 9160
9158: GO 9173
9160: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9161: LD_STRING ACH_E
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 564
9171: GO 9315
9173: LD_INT 3
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9194
9181: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9182: LD_STRING ACH_OOL
9184: PPUSH
9185: LD_INT 1
9187: PPUSH
9188: CALL_OW 564
9192: GO 9315
9194: LD_INT 1
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: DOUBLE
9204: EQUAL
9205: IFTRUE 9209
9207: GO 9234
9209: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9210: LD_STRING ACH_AH
9212: PPUSH
9213: LD_REAL  5.00000000000000E-0001
9216: PPUSH
9217: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9221: LD_STRING ACH_E
9223: PPUSH
9224: LD_REAL  5.00000000000000E-0001
9227: PPUSH
9228: CALL_OW 564
// end ; [ 2 , 3 ] :
9232: GO 9315
9234: LD_INT 2
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: DOUBLE
9244: EQUAL
9245: IFTRUE 9249
9247: GO 9274
9249: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9250: LD_STRING ACH_OOL
9252: PPUSH
9253: LD_REAL  5.00000000000000E-0001
9256: PPUSH
9257: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9261: LD_STRING ACH_E
9263: PPUSH
9264: LD_REAL  5.00000000000000E-0001
9267: PPUSH
9268: CALL_OW 564
// end ; [ 3 , 1 ] :
9272: GO 9315
9274: LD_INT 3
9276: PUSH
9277: LD_INT 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: DOUBLE
9284: EQUAL
9285: IFTRUE 9289
9287: GO 9314
9289: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9290: LD_STRING ACH_AH
9292: PPUSH
9293: LD_REAL  5.00000000000000E-0001
9296: PPUSH
9297: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9301: LD_STRING ACH_OOL
9303: PPUSH
9304: LD_REAL  5.00000000000000E-0001
9307: PPUSH
9308: CALL_OW 564
// end ; end ;
9312: GO 9315
9314: POP
// end ; end_of_file
9315: LD_VAR 0 2
9319: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9320: LD_INT 0
9322: PPUSH
9323: PPUSH
9324: PPUSH
// for side = 1 to 8 do
9325: LD_ADDR_VAR 0 2
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_INT 8
9337: PUSH
9338: FOR_TO
9339: IFFALSE 9460
// begin for i = 1 to 72 do
9341: LD_ADDR_VAR 0 3
9345: PUSH
9346: DOUBLE
9347: LD_INT 1
9349: DEC
9350: ST_TO_ADDR
9351: LD_INT 72
9353: PUSH
9354: FOR_TO
9355: IFFALSE 9386
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_VAR 0 2
9366: PPUSH
9367: LD_INT 0
9369: PPUSH
9370: LD_VAR 0 3
9374: PPUSH
9375: CALL_OW 565
9379: PPUSH
9380: CALL_OW 322
9384: GO 9354
9386: POP
9387: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9388: LD_INT 73
9390: PPUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: LD_INT 0
9398: PPUSH
9399: LD_INT 25
9401: PPUSH
9402: CALL_OW 565
9406: PPUSH
9407: CALL_OW 322
// for i = 0 to 40 do
9411: LD_ADDR_VAR 0 3
9415: PUSH
9416: DOUBLE
9417: LD_INT 0
9419: DEC
9420: ST_TO_ADDR
9421: LD_INT 40
9423: PUSH
9424: FOR_TO
9425: IFFALSE 9456
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9427: LD_VAR 0 3
9431: PPUSH
9432: LD_VAR 0 2
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: CALL_OW 565
9449: PPUSH
9450: CALL_OW 324
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: GO 9338
9460: POP
9461: POP
// end ;
9462: LD_VAR 0 1
9466: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9467: LD_INT 0
9469: PPUSH
9470: PPUSH
9471: PPUSH
// for side = 1 to 8 do
9472: LD_ADDR_VAR 0 3
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 8
9484: PUSH
9485: FOR_TO
9486: IFFALSE 13482
// begin for i = 1 to 73 do
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: DOUBLE
9494: LD_INT 1
9496: DEC
9497: ST_TO_ADDR
9498: LD_INT 73
9500: PUSH
9501: FOR_TO
9502: IFFALSE 9523
// SetTech ( i , side , state_disabled ) ;
9504: LD_VAR 0 4
9508: PPUSH
9509: LD_VAR 0 3
9513: PPUSH
9514: LD_INT 0
9516: PPUSH
9517: CALL_OW 322
9521: GO 9501
9523: POP
9524: POP
// for i = 0 to 40 do
9525: LD_ADDR_VAR 0 4
9529: PUSH
9530: DOUBLE
9531: LD_INT 0
9533: DEC
9534: ST_TO_ADDR
9535: LD_INT 40
9537: PUSH
9538: FOR_TO
9539: IFFALSE 9560
// SetRestrict ( i , side , false ) ;
9541: LD_VAR 0 4
9545: PPUSH
9546: LD_VAR 0 3
9550: PPUSH
9551: LD_INT 0
9553: PPUSH
9554: CALL_OW 324
9558: GO 9538
9560: POP
9561: POP
// case level of 1 :
9562: LD_VAR 0 1
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9728
9575: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9576: LD_INT 35
9578: PPUSH
9579: LD_VAR 0 3
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9591: LD_INT 45
9593: PPUSH
9594: LD_VAR 0 3
9598: PPUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9606: LD_INT 46
9608: PPUSH
9609: LD_VAR 0 3
9613: PPUSH
9614: LD_INT 1
9616: PPUSH
9617: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9621: LD_INT 47
9623: PPUSH
9624: LD_VAR 0 3
9628: PPUSH
9629: LD_INT 1
9631: PPUSH
9632: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9636: LD_INT 0
9638: PPUSH
9639: LD_VAR 0 3
9643: PPUSH
9644: LD_INT 1
9646: PPUSH
9647: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9651: LD_INT 2
9653: PPUSH
9654: LD_VAR 0 3
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9666: LD_INT 4
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: LD_INT 1
9676: PPUSH
9677: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9681: LD_INT 6
9683: PPUSH
9684: LD_VAR 0 3
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9696: LD_INT 29
9698: PPUSH
9699: LD_VAR 0 3
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9711: LD_INT 31
9713: PPUSH
9714: LD_VAR 0 3
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: CALL_OW 324
// end ; 2 :
9726: GO 13480
9728: LD_INT 2
9730: DOUBLE
9731: EQUAL
9732: IFTRUE 9736
9734: GO 9934
9736: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9737: LD_INT 35
9739: PPUSH
9740: LD_VAR 0 3
9744: PPUSH
9745: LD_INT 1
9747: PPUSH
9748: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9752: LD_INT 45
9754: PPUSH
9755: LD_VAR 0 3
9759: PPUSH
9760: LD_INT 1
9762: PPUSH
9763: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9767: LD_INT 46
9769: PPUSH
9770: LD_VAR 0 3
9774: PPUSH
9775: LD_INT 1
9777: PPUSH
9778: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9782: LD_INT 47
9784: PPUSH
9785: LD_VAR 0 3
9789: PPUSH
9790: LD_INT 1
9792: PPUSH
9793: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9797: LD_INT 1
9799: PPUSH
9800: LD_VAR 0 3
9804: PPUSH
9805: LD_INT 1
9807: PPUSH
9808: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9812: LD_INT 2
9814: PPUSH
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 1
9822: PPUSH
9823: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9827: LD_INT 11
9829: PPUSH
9830: LD_VAR 0 3
9834: PPUSH
9835: LD_INT 1
9837: PPUSH
9838: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9842: LD_INT 0
9844: PPUSH
9845: LD_VAR 0 3
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9857: LD_INT 2
9859: PPUSH
9860: LD_VAR 0 3
9864: PPUSH
9865: LD_INT 1
9867: PPUSH
9868: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9872: LD_INT 4
9874: PPUSH
9875: LD_VAR 0 3
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9887: LD_INT 6
9889: PPUSH
9890: LD_VAR 0 3
9894: PPUSH
9895: LD_INT 1
9897: PPUSH
9898: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9902: LD_INT 29
9904: PPUSH
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9917: LD_INT 31
9919: PPUSH
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 324
// end ; 3 :
9932: GO 13480
9934: LD_INT 3
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 10395
9942: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9943: LD_INT 35
9945: PPUSH
9946: LD_VAR 0 3
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9958: LD_INT 45
9960: PPUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: LD_INT 1
9968: PPUSH
9969: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9973: LD_INT 46
9975: PPUSH
9976: LD_VAR 0 3
9980: PPUSH
9981: LD_INT 1
9983: PPUSH
9984: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9988: LD_INT 47
9990: PPUSH
9991: LD_VAR 0 3
9995: PPUSH
9996: LD_INT 1
9998: PPUSH
9999: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10003: LD_INT 1
10005: PPUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10018: LD_INT 2
10020: PPUSH
10021: LD_VAR 0 3
10025: PPUSH
10026: LD_INT 1
10028: PPUSH
10029: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10033: LD_INT 11
10035: PPUSH
10036: LD_VAR 0 3
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10048: LD_INT 48
10050: PPUSH
10051: LD_VAR 0 3
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10063: LD_INT 69
10065: PPUSH
10066: LD_VAR 0 3
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10078: LD_INT 39
10080: PPUSH
10081: LD_VAR 0 3
10085: PPUSH
10086: LD_INT 1
10088: PPUSH
10089: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10093: LD_INT 43
10095: PPUSH
10096: LD_VAR 0 3
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10108: LD_INT 51
10110: PPUSH
10111: LD_VAR 0 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10123: LD_INT 6
10125: PPUSH
10126: LD_VAR 0 3
10130: PPUSH
10131: LD_INT 1
10133: PPUSH
10134: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10138: LD_INT 0
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10153: LD_INT 2
10155: PPUSH
10156: LD_VAR 0 3
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10168: LD_INT 3
10170: PPUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: LD_INT 1
10178: PPUSH
10179: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10183: LD_INT 4
10185: PPUSH
10186: LD_VAR 0 3
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10198: LD_INT 6
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10213: LD_INT 7
10215: PPUSH
10216: LD_VAR 0 3
10220: PPUSH
10221: LD_INT 1
10223: PPUSH
10224: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10228: LD_INT 8
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10243: LD_INT 10
10245: PPUSH
10246: LD_VAR 0 3
10250: PPUSH
10251: LD_INT 1
10253: PPUSH
10254: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10258: LD_INT 15
10260: PPUSH
10261: LD_VAR 0 3
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10273: LD_INT 16
10275: PPUSH
10276: LD_VAR 0 3
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10288: LD_INT 17
10290: PPUSH
10291: LD_VAR 0 3
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10303: LD_INT 20
10305: PPUSH
10306: LD_VAR 0 3
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10318: LD_INT 26
10320: PPUSH
10321: LD_VAR 0 3
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10333: LD_INT 27
10335: PPUSH
10336: LD_VAR 0 3
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10348: LD_INT 29
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10363: LD_INT 31
10365: PPUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10378: LD_INT 32
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 324
// end ; 4 :
10393: GO 13480
10395: LD_INT 4
10397: DOUBLE
10398: EQUAL
10399: IFTRUE 10403
10401: GO 11351
10403: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10404: LD_INT 35
10406: PPUSH
10407: LD_VAR 0 3
10411: PPUSH
10412: LD_INT 1
10414: PPUSH
10415: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10419: LD_INT 45
10421: PPUSH
10422: LD_VAR 0 3
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10434: LD_INT 46
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10449: LD_INT 47
10451: PPUSH
10452: LD_VAR 0 3
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10464: LD_INT 1
10466: PPUSH
10467: LD_VAR 0 3
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10479: LD_INT 2
10481: PPUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10494: LD_INT 11
10496: PPUSH
10497: LD_VAR 0 3
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10509: LD_INT 20
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10524: LD_INT 48
10526: PPUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10539: LD_INT 49
10541: PPUSH
10542: LD_VAR 0 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10554: LD_INT 69
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10569: LD_INT 39
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10584: LD_INT 34
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10599: LD_INT 42
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10614: LD_INT 44
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10629: LD_INT 41
10631: PPUSH
10632: LD_VAR 0 3
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10644: LD_INT 43
10646: PPUSH
10647: LD_VAR 0 3
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10659: LD_INT 70
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10674: LD_INT 51
10676: PPUSH
10677: LD_VAR 0 3
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10689: LD_INT 52
10691: PPUSH
10692: LD_VAR 0 3
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10704: LD_INT 6
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10719: LD_INT 15
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10734: LD_INT 7
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10749: LD_INT 12
10751: PPUSH
10752: LD_VAR 0 3
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10764: LD_INT 18
10766: PPUSH
10767: LD_VAR 0 3
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10779: LD_INT 60
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10794: LD_INT 9
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10809: LD_INT 30
10811: PPUSH
10812: LD_VAR 0 3
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10824: LD_INT 37
10826: PPUSH
10827: LD_VAR 0 3
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10839: LD_INT 5
10841: PPUSH
10842: LD_VAR 0 3
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10854: LD_INT 66
10856: PPUSH
10857: LD_VAR 0 3
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10869: LD_INT 21
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_INT 1
10879: PPUSH
10880: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10884: LD_INT 22
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10899: LD_INT 54
10901: PPUSH
10902: LD_VAR 0 3
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10914: LD_INT 0
10916: PPUSH
10917: LD_VAR 0 3
10921: PPUSH
10922: LD_INT 1
10924: PPUSH
10925: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10929: LD_INT 1
10931: PPUSH
10932: LD_VAR 0 3
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10944: LD_INT 2
10946: PPUSH
10947: LD_VAR 0 3
10951: PPUSH
10952: LD_INT 1
10954: PPUSH
10955: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10959: LD_INT 3
10961: PPUSH
10962: LD_VAR 0 3
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10974: LD_INT 4
10976: PPUSH
10977: LD_VAR 0 3
10981: PPUSH
10982: LD_INT 1
10984: PPUSH
10985: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10989: LD_INT 5
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11004: LD_INT 6
11006: PPUSH
11007: LD_VAR 0 3
11011: PPUSH
11012: LD_INT 1
11014: PPUSH
11015: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11019: LD_INT 7
11021: PPUSH
11022: LD_VAR 0 3
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11034: LD_INT 8
11036: PPUSH
11037: LD_VAR 0 3
11041: PPUSH
11042: LD_INT 1
11044: PPUSH
11045: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11049: LD_INT 10
11051: PPUSH
11052: LD_VAR 0 3
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11064: LD_INT 11
11066: PPUSH
11067: LD_VAR 0 3
11071: PPUSH
11072: LD_INT 1
11074: PPUSH
11075: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11079: LD_INT 12
11081: PPUSH
11082: LD_VAR 0 3
11086: PPUSH
11087: LD_INT 1
11089: PPUSH
11090: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11094: LD_INT 13
11096: PPUSH
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11109: LD_INT 14
11111: PPUSH
11112: LD_VAR 0 3
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11124: LD_INT 15
11126: PPUSH
11127: LD_VAR 0 3
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11139: LD_INT 16
11141: PPUSH
11142: LD_VAR 0 3
11146: PPUSH
11147: LD_INT 1
11149: PPUSH
11150: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11154: LD_INT 17
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11169: LD_INT 19
11171: PPUSH
11172: LD_VAR 0 3
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11184: LD_INT 20
11186: PPUSH
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 1
11194: PPUSH
11195: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11199: LD_INT 21
11201: PPUSH
11202: LD_VAR 0 3
11206: PPUSH
11207: LD_INT 1
11209: PPUSH
11210: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11214: LD_INT 23
11216: PPUSH
11217: LD_VAR 0 3
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11229: LD_INT 26
11231: PPUSH
11232: LD_VAR 0 3
11236: PPUSH
11237: LD_INT 1
11239: PPUSH
11240: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11244: LD_INT 27
11246: PPUSH
11247: LD_VAR 0 3
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11259: LD_INT 28
11261: PPUSH
11262: LD_VAR 0 3
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11274: LD_INT 29
11276: PPUSH
11277: LD_VAR 0 3
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11289: LD_INT 30
11291: PPUSH
11292: LD_VAR 0 3
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11304: LD_INT 31
11306: PPUSH
11307: LD_VAR 0 3
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11319: LD_INT 32
11321: PPUSH
11322: LD_VAR 0 3
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11334: LD_INT 36
11336: PPUSH
11337: LD_VAR 0 3
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 324
// end ; 5 :
11349: GO 13480
11351: LD_INT 5
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 12472
11359: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11360: LD_INT 35
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11375: LD_INT 45
11377: PPUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11390: LD_INT 46
11392: PPUSH
11393: LD_VAR 0 3
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11405: LD_INT 47
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11420: LD_INT 1
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11435: LD_INT 2
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11450: LD_INT 11
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11465: LD_INT 20
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11480: LD_INT 48
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11495: LD_INT 49
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11510: LD_INT 69
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11525: LD_INT 39
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11540: LD_INT 34
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11555: LD_INT 42
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11570: LD_INT 44
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11585: LD_INT 41
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11600: LD_INT 40
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11615: LD_INT 43
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11630: LD_INT 70
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11645: LD_INT 51
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11660: LD_INT 52
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11675: LD_INT 6
11677: PPUSH
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11690: LD_INT 15
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11705: LD_INT 7
11707: PPUSH
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11720: LD_INT 12
11722: PPUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11735: LD_INT 17
11737: PPUSH
11738: LD_VAR 0 3
11742: PPUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11750: LD_INT 18
11752: PPUSH
11753: LD_VAR 0 3
11757: PPUSH
11758: LD_INT 1
11760: PPUSH
11761: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11765: LD_INT 60
11767: PPUSH
11768: LD_VAR 0 3
11772: PPUSH
11773: LD_INT 1
11775: PPUSH
11776: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11780: LD_INT 32
11782: PPUSH
11783: LD_VAR 0 3
11787: PPUSH
11788: LD_INT 1
11790: PPUSH
11791: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11795: LD_INT 9
11797: PPUSH
11798: LD_VAR 0 3
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11810: LD_INT 57
11812: PPUSH
11813: LD_VAR 0 3
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11825: LD_INT 30
11827: PPUSH
11828: LD_VAR 0 3
11832: PPUSH
11833: LD_INT 1
11835: PPUSH
11836: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11840: LD_INT 37
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11855: LD_INT 63
11857: PPUSH
11858: LD_VAR 0 3
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11870: LD_INT 3
11872: PPUSH
11873: LD_VAR 0 3
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11885: LD_INT 4
11887: PPUSH
11888: LD_VAR 0 3
11892: PPUSH
11893: LD_INT 1
11895: PPUSH
11896: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11900: LD_INT 5
11902: PPUSH
11903: LD_VAR 0 3
11907: PPUSH
11908: LD_INT 1
11910: PPUSH
11911: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11915: LD_INT 66
11917: PPUSH
11918: LD_VAR 0 3
11922: PPUSH
11923: LD_INT 1
11925: PPUSH
11926: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11930: LD_INT 21
11932: PPUSH
11933: LD_VAR 0 3
11937: PPUSH
11938: LD_INT 1
11940: PPUSH
11941: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11945: LD_INT 22
11947: PPUSH
11948: LD_VAR 0 3
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11960: LD_INT 19
11962: PPUSH
11963: LD_VAR 0 3
11967: PPUSH
11968: LD_INT 1
11970: PPUSH
11971: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11975: LD_INT 54
11977: PPUSH
11978: LD_VAR 0 3
11982: PPUSH
11983: LD_INT 1
11985: PPUSH
11986: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11990: LD_INT 55
11992: PPUSH
11993: LD_VAR 0 3
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12005: LD_INT 0
12007: PPUSH
12008: LD_VAR 0 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12020: LD_INT 1
12022: PPUSH
12023: LD_VAR 0 3
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12035: LD_INT 2
12037: PPUSH
12038: LD_VAR 0 3
12042: PPUSH
12043: LD_INT 1
12045: PPUSH
12046: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12050: LD_INT 3
12052: PPUSH
12053: LD_VAR 0 3
12057: PPUSH
12058: LD_INT 1
12060: PPUSH
12061: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12065: LD_INT 4
12067: PPUSH
12068: LD_VAR 0 3
12072: PPUSH
12073: LD_INT 1
12075: PPUSH
12076: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12080: LD_INT 5
12082: PPUSH
12083: LD_VAR 0 3
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12095: LD_INT 6
12097: PPUSH
12098: LD_VAR 0 3
12102: PPUSH
12103: LD_INT 1
12105: PPUSH
12106: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12110: LD_INT 7
12112: PPUSH
12113: LD_VAR 0 3
12117: PPUSH
12118: LD_INT 1
12120: PPUSH
12121: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12125: LD_INT 8
12127: PPUSH
12128: LD_VAR 0 3
12132: PPUSH
12133: LD_INT 1
12135: PPUSH
12136: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12140: LD_INT 10
12142: PPUSH
12143: LD_VAR 0 3
12147: PPUSH
12148: LD_INT 1
12150: PPUSH
12151: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12155: LD_INT 11
12157: PPUSH
12158: LD_VAR 0 3
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12170: LD_INT 12
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12185: LD_INT 13
12187: PPUSH
12188: LD_VAR 0 3
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12200: LD_INT 14
12202: PPUSH
12203: LD_VAR 0 3
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12215: LD_INT 15
12217: PPUSH
12218: LD_VAR 0 3
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12230: LD_INT 16
12232: PPUSH
12233: LD_VAR 0 3
12237: PPUSH
12238: LD_INT 1
12240: PPUSH
12241: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12245: LD_INT 17
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: LD_INT 1
12255: PPUSH
12256: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12260: LD_INT 18
12262: PPUSH
12263: LD_VAR 0 3
12267: PPUSH
12268: LD_INT 1
12270: PPUSH
12271: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12275: LD_INT 19
12277: PPUSH
12278: LD_VAR 0 3
12282: PPUSH
12283: LD_INT 1
12285: PPUSH
12286: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12290: LD_INT 20
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: LD_INT 1
12300: PPUSH
12301: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12305: LD_INT 21
12307: PPUSH
12308: LD_VAR 0 3
12312: PPUSH
12313: LD_INT 1
12315: PPUSH
12316: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12320: LD_INT 23
12322: PPUSH
12323: LD_VAR 0 3
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12335: LD_INT 26
12337: PPUSH
12338: LD_VAR 0 3
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12350: LD_INT 27
12352: PPUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: LD_INT 1
12360: PPUSH
12361: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12365: LD_INT 28
12367: PPUSH
12368: LD_VAR 0 3
12372: PPUSH
12373: LD_INT 1
12375: PPUSH
12376: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12380: LD_INT 29
12382: PPUSH
12383: LD_VAR 0 3
12387: PPUSH
12388: LD_INT 1
12390: PPUSH
12391: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12395: LD_INT 30
12397: PPUSH
12398: LD_VAR 0 3
12402: PPUSH
12403: LD_INT 1
12405: PPUSH
12406: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12410: LD_INT 31
12412: PPUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12425: LD_INT 32
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_INT 1
12435: PPUSH
12436: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12440: LD_INT 33
12442: PPUSH
12443: LD_VAR 0 3
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12455: LD_INT 36
12457: PPUSH
12458: LD_VAR 0 3
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 324
// end ; 6 :
12470: GO 13480
12472: LD_INT 6
12474: DOUBLE
12475: EQUAL
12476: IFTRUE 12480
12478: GO 13405
12480: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12481: LD_INT 35
12483: PPUSH
12484: LD_VAR 0 3
12488: PPUSH
12489: LD_INT 1
12491: PPUSH
12492: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12496: LD_INT 45
12498: PPUSH
12499: LD_VAR 0 3
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12511: LD_INT 46
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12526: LD_INT 47
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12541: LD_INT 1
12543: PPUSH
12544: LD_VAR 0 3
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12556: LD_INT 2
12558: PPUSH
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 1
12566: PPUSH
12567: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12571: LD_INT 11
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12586: LD_INT 20
12588: PPUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12601: LD_INT 48
12603: PPUSH
12604: LD_VAR 0 3
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12616: LD_INT 49
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12631: LD_INT 50
12633: PPUSH
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12646: LD_INT 69
12648: PPUSH
12649: LD_VAR 0 3
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12661: LD_INT 39
12663: PPUSH
12664: LD_VAR 0 3
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12676: LD_INT 34
12678: PPUSH
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12691: LD_INT 42
12693: PPUSH
12694: LD_VAR 0 3
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12706: LD_INT 44
12708: PPUSH
12709: LD_VAR 0 3
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12721: LD_INT 41
12723: PPUSH
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12736: LD_INT 13
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12751: LD_INT 40
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: LD_INT 1
12761: PPUSH
12762: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12766: LD_INT 43
12768: PPUSH
12769: LD_VAR 0 3
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12781: LD_INT 70
12783: PPUSH
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12796: LD_INT 23
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12811: LD_INT 51
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12826: LD_INT 52
12828: PPUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12841: LD_INT 6
12843: PPUSH
12844: LD_VAR 0 3
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12856: LD_INT 15
12858: PPUSH
12859: LD_VAR 0 3
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12871: LD_INT 7
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12886: LD_INT 12
12888: PPUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12901: LD_INT 10
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: LD_INT 1
12911: PPUSH
12912: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12916: LD_INT 17
12918: PPUSH
12919: LD_VAR 0 3
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12931: LD_INT 18
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12946: LD_INT 60
12948: PPUSH
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12961: LD_INT 61
12963: PPUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12976: LD_INT 32
12978: PPUSH
12979: LD_VAR 0 3
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12991: LD_INT 27
12993: PPUSH
12994: LD_VAR 0 3
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13006: LD_INT 36
13008: PPUSH
13009: LD_VAR 0 3
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13021: LD_INT 33
13023: PPUSH
13024: LD_VAR 0 3
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13036: LD_INT 9
13038: PPUSH
13039: LD_VAR 0 3
13043: PPUSH
13044: LD_INT 1
13046: PPUSH
13047: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13051: LD_INT 38
13053: PPUSH
13054: LD_VAR 0 3
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13066: LD_INT 57
13068: PPUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: LD_INT 1
13076: PPUSH
13077: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13081: LD_INT 58
13083: PPUSH
13084: LD_VAR 0 3
13088: PPUSH
13089: LD_INT 1
13091: PPUSH
13092: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13096: LD_INT 28
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13111: LD_INT 29
13113: PPUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13126: LD_INT 30
13128: PPUSH
13129: LD_VAR 0 3
13133: PPUSH
13134: LD_INT 1
13136: PPUSH
13137: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13141: LD_INT 37
13143: PPUSH
13144: LD_VAR 0 3
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13156: LD_INT 63
13158: PPUSH
13159: LD_VAR 0 3
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13171: LD_INT 64
13173: PPUSH
13174: LD_VAR 0 3
13178: PPUSH
13179: LD_INT 1
13181: PPUSH
13182: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13186: LD_INT 3
13188: PPUSH
13189: LD_VAR 0 3
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13201: LD_INT 4
13203: PPUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13216: LD_INT 5
13218: PPUSH
13219: LD_VAR 0 3
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13231: LD_INT 8
13233: PPUSH
13234: LD_VAR 0 3
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13246: LD_INT 66
13248: PPUSH
13249: LD_VAR 0 3
13253: PPUSH
13254: LD_INT 1
13256: PPUSH
13257: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13261: LD_INT 67
13263: PPUSH
13264: LD_VAR 0 3
13268: PPUSH
13269: LD_INT 1
13271: PPUSH
13272: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13276: LD_INT 21
13278: PPUSH
13279: LD_VAR 0 3
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13291: LD_INT 22
13293: PPUSH
13294: LD_VAR 0 3
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13306: LD_INT 19
13308: PPUSH
13309: LD_VAR 0 3
13313: PPUSH
13314: LD_INT 1
13316: PPUSH
13317: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13321: LD_INT 26
13323: PPUSH
13324: LD_VAR 0 3
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13336: LD_INT 54
13338: PPUSH
13339: LD_VAR 0 3
13343: PPUSH
13344: LD_INT 1
13346: PPUSH
13347: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13351: LD_INT 55
13353: PPUSH
13354: LD_VAR 0 3
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 322
// for i = 0 to 39 do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 0
13374: DEC
13375: ST_TO_ADDR
13376: LD_INT 39
13378: PUSH
13379: FOR_TO
13380: IFFALSE 13401
// SetRestrict ( i , side , true ) ;
13382: LD_VAR 0 4
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: LD_INT 1
13394: PPUSH
13395: CALL_OW 324
13399: GO 13379
13401: POP
13402: POP
// end ; else
13403: GO 13480
13405: POP
// begin for i = 1 to 73 do
13406: LD_ADDR_VAR 0 4
13410: PUSH
13411: DOUBLE
13412: LD_INT 1
13414: DEC
13415: ST_TO_ADDR
13416: LD_INT 73
13418: PUSH
13419: FOR_TO
13420: IFFALSE 13441
// SetTech ( i , side , state_enabled ) ;
13422: LD_VAR 0 4
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
13439: GO 13419
13441: POP
13442: POP
// for i = 0 to 39 do
13443: LD_ADDR_VAR 0 4
13447: PUSH
13448: DOUBLE
13449: LD_INT 0
13451: DEC
13452: ST_TO_ADDR
13453: LD_INT 39
13455: PUSH
13456: FOR_TO
13457: IFFALSE 13478
// SetRestrict ( i , side , true ) ;
13459: LD_VAR 0 4
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 324
13476: GO 13456
13478: POP
13479: POP
// end ; end ; end ;
13480: GO 9485
13482: POP
13483: POP
// end ; end_of_file
13484: LD_VAR 0 2
13488: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13489: LD_INT 0
13491: PPUSH
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
// for i := 1 to 8 do
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: DOUBLE
13506: LD_INT 1
13508: DEC
13509: ST_TO_ADDR
13510: LD_INT 8
13512: PUSH
13513: FOR_TO
13514: IFFALSE 13898
// begin if Side_Positions [ i ] then
13516: LD_EXP 38
13520: PUSH
13521: LD_VAR 0 2
13525: ARRAY
13526: IFFALSE 13896
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13528: LD_ADDR_VAR 0 7
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_VAR 0 2
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 21
13547: PUSH
13548: LD_INT 1
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PPUSH
13559: CALL_OW 69
13563: PUSH
13564: LD_INT 0
13566: PLUS
13567: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13568: LD_ADDR_VAR 0 9
13572: PUSH
13573: LD_INT 22
13575: PUSH
13576: LD_VAR 0 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: LD_INT 30
13590: PUSH
13591: LD_INT 0
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 30
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PPUSH
13617: CALL_OW 69
13621: ST_TO_ADDR
// crates := 0 ;
13622: LD_ADDR_VAR 0 4
13626: PUSH
13627: LD_INT 0
13629: ST_TO_ADDR
// oil := 0 ;
13630: LD_ADDR_VAR 0 5
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// sib := 0 ;
13638: LD_ADDR_VAR 0 6
13642: PUSH
13643: LD_INT 0
13645: ST_TO_ADDR
// if bases then
13646: LD_VAR 0 9
13650: IFFALSE 13756
// begin for j in bases do
13652: LD_ADDR_VAR 0 3
13656: PUSH
13657: LD_VAR 0 9
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13754
// begin base := GetBase ( j ) ;
13665: LD_ADDR_VAR 0 8
13669: PUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: CALL_OW 274
13679: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13680: LD_ADDR_VAR 0 4
13684: PUSH
13685: LD_VAR 0 4
13689: PUSH
13690: LD_VAR 0 8
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL_OW 275
13702: PLUS
13703: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13704: LD_ADDR_VAR 0 5
13708: PUSH
13709: LD_VAR 0 5
13713: PUSH
13714: LD_VAR 0 8
13718: PPUSH
13719: LD_INT 2
13721: PPUSH
13722: CALL_OW 275
13726: PLUS
13727: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13728: LD_ADDR_VAR 0 6
13732: PUSH
13733: LD_VAR 0 6
13737: PUSH
13738: LD_VAR 0 8
13742: PPUSH
13743: LD_INT 3
13745: PPUSH
13746: CALL_OW 275
13750: PLUS
13751: ST_TO_ADDR
// end ;
13752: GO 13662
13754: POP
13755: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13756: LD_STRING setSpecText(
13758: PUSH
13759: LD_VAR 0 2
13763: STR
13764: PUSH
13765: LD_STRING ,
13767: STR
13768: PUSH
13769: LD_INT 2
13771: STR
13772: PUSH
13773: LD_STRING ,
13775: STR
13776: PUSH
13777: LD_VAR 0 4
13781: STR
13782: PUSH
13783: LD_STRING )
13785: STR
13786: PPUSH
13787: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13791: LD_STRING setSpecText(
13793: PUSH
13794: LD_VAR 0 2
13798: STR
13799: PUSH
13800: LD_STRING ,
13802: STR
13803: PUSH
13804: LD_INT 3
13806: STR
13807: PUSH
13808: LD_STRING ,
13810: STR
13811: PUSH
13812: LD_VAR 0 5
13816: STR
13817: PUSH
13818: LD_STRING )
13820: STR
13821: PPUSH
13822: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13826: LD_STRING setSpecText(
13828: PUSH
13829: LD_VAR 0 2
13833: STR
13834: PUSH
13835: LD_STRING ,
13837: STR
13838: PUSH
13839: LD_INT 4
13841: STR
13842: PUSH
13843: LD_STRING ,
13845: STR
13846: PUSH
13847: LD_VAR 0 6
13851: STR
13852: PUSH
13853: LD_STRING )
13855: STR
13856: PPUSH
13857: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13861: LD_STRING setSpecText(
13863: PUSH
13864: LD_VAR 0 2
13868: STR
13869: PUSH
13870: LD_STRING ,
13872: STR
13873: PUSH
13874: LD_INT 5
13876: STR
13877: PUSH
13878: LD_STRING ,
13880: STR
13881: PUSH
13882: LD_VAR 0 7
13886: STR
13887: PUSH
13888: LD_STRING )
13890: STR
13891: PPUSH
13892: CALL_OW 559
// end ; end ;
13896: GO 13513
13898: POP
13899: POP
// end ;
13900: LD_VAR 0 1
13904: RET
// every 0 0$1 do
13905: GO 13907
13907: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13908: LD_STRING setSpecLogoNumber(
13910: PUSH
13911: LD_INT 2
13913: STR
13914: PUSH
13915: LD_STRING ,
13917: STR
13918: PUSH
13919: LD_INT 1
13921: STR
13922: PUSH
13923: LD_STRING )
13925: STR
13926: PPUSH
13927: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13931: LD_STRING setSpecLogoNumber(
13933: PUSH
13934: LD_INT 3
13936: STR
13937: PUSH
13938: LD_STRING ,
13940: STR
13941: PUSH
13942: LD_INT 2
13944: STR
13945: PUSH
13946: LD_STRING )
13948: STR
13949: PPUSH
13950: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13954: LD_STRING setSpecLogoNumber(
13956: PUSH
13957: LD_INT 4
13959: STR
13960: PUSH
13961: LD_STRING ,
13963: STR
13964: PUSH
13965: LD_INT 3
13967: STR
13968: PUSH
13969: LD_STRING )
13971: STR
13972: PPUSH
13973: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13977: LD_STRING setSpecLogoNumber(
13979: PUSH
13980: LD_INT 5
13982: STR
13983: PUSH
13984: LD_STRING ,
13986: STR
13987: PUSH
13988: LD_INT 4
13990: STR
13991: PUSH
13992: LD_STRING )
13994: STR
13995: PPUSH
13996: CALL_OW 559
// end ;
14000: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14001: LD_INT 2
14003: PUSH
14004: LD_INT 30
14006: PUSH
14007: LD_INT 0
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 30
14016: PUSH
14017: LD_INT 1
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: IFFALSE 14043
14035: GO 14037
14037: DISABLE
// begin enable ;
14038: ENABLE
// UpdateSpectatorBar ;
14039: CALL 13489 0 0
// end ; end_of_file
14043: END
// var respawn , inqueue ; export function init_respawning ; begin
14044: LD_INT 0
14046: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14047: LD_ADDR_LOC 18
14051: PUSH
14052: LD_INT 1
14054: PPUSH
14055: LD_INT 8
14057: PPUSH
14058: CALL_OW 12
14062: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14063: LD_ADDR_LOC 19
14067: PUSH
14068: LD_INT 0
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: LD_INT 0
14076: PUSH
14077: LD_INT 0
14079: PUSH
14080: LD_INT 0
14082: PUSH
14083: LD_INT 0
14085: PUSH
14086: LD_INT 0
14088: PUSH
14089: LD_INT 0
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: ST_TO_ADDR
// end ;
14102: LD_VAR 0 1
14106: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14107: GO 14109
14109: DISABLE
14110: LD_INT 0
14112: PPUSH
14113: PPUSH
14114: PPUSH
// begin if respawning_time_max = 0 then
14115: LD_EXP 33
14119: PUSH
14120: LD_INT 0
14122: EQUAL
14123: IFFALSE 14127
// exit ;
14125: GO 14535
// if respawn = 8 then
14127: LD_LOC 18
14131: PUSH
14132: LD_INT 8
14134: EQUAL
14135: IFFALSE 14147
// respawn := 1 else
14137: LD_ADDR_LOC 18
14141: PUSH
14142: LD_INT 1
14144: ST_TO_ADDR
14145: GO 14161
// respawn := respawn + 1 ;
14147: LD_ADDR_LOC 18
14151: PUSH
14152: LD_LOC 18
14156: PUSH
14157: LD_INT 1
14159: PLUS
14160: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14161: LD_EXP 38
14165: PUSH
14166: LD_LOC 18
14170: ARRAY
14171: PUSH
14172: LD_LOC 19
14176: PUSH
14177: LD_LOC 18
14181: ARRAY
14182: NOT
14183: AND
14184: IFFALSE 14534
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: LD_INT 21
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 22
14203: PUSH
14204: LD_LOC 18
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: LD_INT 23
14218: PUSH
14219: LD_INT 0
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: PPUSH
14232: CALL_OW 69
14236: ST_TO_ADDR
// if n < number_of_people then
14237: LD_VAR 0 1
14241: PUSH
14242: LD_EXP 24
14246: LESS
14247: IFFALSE 14531
// begin aktresp := respawn ;
14249: LD_ADDR_VAR 0 3
14253: PUSH
14254: LD_LOC 18
14258: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14259: LD_ADDR_LOC 19
14263: PUSH
14264: LD_LOC 19
14268: PPUSH
14269: LD_VAR 0 3
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 1
14281: ST_TO_ADDR
// enable ;
14282: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14283: LD_EXP 32
14287: PPUSH
14288: LD_EXP 33
14292: PPUSH
14293: CALL_OW 12
14297: PPUSH
14298: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14302: LD_ADDR_LOC 19
14306: PUSH
14307: LD_LOC 19
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 0
14319: PPUSH
14320: CALL_OW 1
14324: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14325: LD_ADDR_VAR 0 2
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 30
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 50
14370: PUSH
14371: EMPTY
14372: LIST
14373: PUSH
14374: LD_INT 22
14376: PUSH
14377: LD_VAR 0 3
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: PPUSH
14392: CALL_OW 69
14396: ST_TO_ADDR
// if dep = 0 then
14397: LD_VAR 0 2
14401: PUSH
14402: LD_INT 0
14404: EQUAL
14405: IFFALSE 14409
// exit ;
14407: GO 14535
// hc_name :=  ;
14409: LD_ADDR_OWVAR 26
14413: PUSH
14414: LD_STRING 
14416: ST_TO_ADDR
// hc_importance := 0 ;
14417: LD_ADDR_OWVAR 32
14421: PUSH
14422: LD_INT 0
14424: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14425: LD_INT 0
14427: PPUSH
14428: LD_INT 0
14430: PPUSH
14431: LD_EXP 25
14435: PUSH
14436: LD_INT 2
14438: DIV
14439: PPUSH
14440: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14444: LD_ADDR_OWVAR 21
14448: PUSH
14449: LD_EXP 39
14453: PUSH
14454: LD_VAR 0 3
14458: ARRAY
14459: ST_TO_ADDR
// uc_side := aktresp ;
14460: LD_ADDR_OWVAR 20
14464: PUSH
14465: LD_VAR 0 3
14469: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14470: LD_ADDR_VAR 0 2
14474: PUSH
14475: LD_VAR 0 2
14479: PUSH
14480: LD_INT 1
14482: PPUSH
14483: LD_VAR 0 2
14487: PPUSH
14488: CALL_OW 12
14492: ARRAY
14493: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14494: CALL_OW 44
14498: PPUSH
14499: LD_VAR 0 2
14503: PPUSH
14504: CALL_OW 250
14508: PPUSH
14509: LD_VAR 0 2
14513: PPUSH
14514: CALL_OW 251
14518: PPUSH
14519: LD_INT 7
14521: PPUSH
14522: LD_INT 1
14524: PPUSH
14525: CALL_OW 50
// end else
14529: GO 14532
// enable ;
14531: ENABLE
// end else
14532: GO 14535
// enable ;
14534: ENABLE
// end ; end_of_file
14535: PPOPN 3
14537: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14538: LD_INT 0
14540: PPUSH
14541: PPUSH
14542: PPUSH
// BuildUpTime_Delay = 0 ;
14543: LD_ADDR_EXP 64
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// if not def_builduptime then
14551: LD_EXP 16
14555: NOT
14556: IFFALSE 14560
// exit ;
14558: GO 14743
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14560: LD_ADDR_EXP 64
14564: PUSH
14565: LD_INT 8400
14567: PUSH
14568: LD_INT 2100
14570: PUSH
14571: LD_EXP 16
14575: MUL
14576: PLUS
14577: ST_TO_ADDR
// BuildUpTimeActive := true ;
14578: LD_ADDR_EXP 63
14582: PUSH
14583: LD_INT 1
14585: ST_TO_ADDR
// for i := 1 to 8 do
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: DOUBLE
14592: LD_INT 1
14594: DEC
14595: ST_TO_ADDR
14596: LD_INT 8
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14741
// if Side_Positions [ i ] then
14602: LD_EXP 38
14606: PUSH
14607: LD_VAR 0 2
14611: ARRAY
14612: IFFALSE 14739
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14614: LD_EXP 62
14618: PUSH
14619: LD_EXP 38
14623: PUSH
14624: LD_VAR 0 2
14628: ARRAY
14629: ARRAY
14630: PPUSH
14631: LD_INT 5
14633: PPUSH
14634: CALL_OW 424
// for j := 1 to 8 do
14638: LD_ADDR_VAR 0 3
14642: PUSH
14643: DOUBLE
14644: LD_INT 1
14646: DEC
14647: ST_TO_ADDR
14648: LD_INT 8
14650: PUSH
14651: FOR_TO
14652: IFFALSE 14737
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14654: LD_EXP 38
14658: PUSH
14659: LD_VAR 0 3
14663: ARRAY
14664: PUSH
14665: LD_EXP 35
14669: PUSH
14670: LD_VAR 0 2
14674: ARRAY
14675: PUSH
14676: LD_EXP 35
14680: PUSH
14681: LD_VAR 0 3
14685: ARRAY
14686: NONEQUAL
14687: PUSH
14688: LD_EXP 40
14692: NOT
14693: PUSH
14694: LD_VAR 0 2
14698: PUSH
14699: LD_VAR 0 3
14703: NONEQUAL
14704: AND
14705: OR
14706: AND
14707: IFFALSE 14735
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14709: LD_VAR 0 3
14713: PPUSH
14714: LD_EXP 62
14718: PUSH
14719: LD_EXP 38
14723: PUSH
14724: LD_VAR 0 2
14728: ARRAY
14729: ARRAY
14730: PPUSH
14731: CALL_OW 333
14735: GO 14651
14737: POP
14738: POP
// end ;
14739: GO 14599
14741: POP
14742: POP
// end ;
14743: LD_VAR 0 1
14747: RET
// export function EndBuildUp ; var i , j ; begin
14748: LD_INT 0
14750: PPUSH
14751: PPUSH
14752: PPUSH
// BuildUpTimeActive := false ;
14753: LD_ADDR_EXP 63
14757: PUSH
14758: LD_INT 0
14760: ST_TO_ADDR
// for i := 1 to 8 do
14761: LD_ADDR_VAR 0 2
14765: PUSH
14766: DOUBLE
14767: LD_INT 1
14769: DEC
14770: ST_TO_ADDR
14771: LD_INT 8
14773: PUSH
14774: FOR_TO
14775: IFFALSE 14916
// if Side_Positions [ i ] then
14777: LD_EXP 38
14781: PUSH
14782: LD_VAR 0 2
14786: ARRAY
14787: IFFALSE 14914
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14789: LD_EXP 62
14793: PUSH
14794: LD_EXP 38
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ARRAY
14805: PPUSH
14806: LD_INT 0
14808: PPUSH
14809: CALL_OW 424
// for j := 1 to 8 do
14813: LD_ADDR_VAR 0 3
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_INT 8
14825: PUSH
14826: FOR_TO
14827: IFFALSE 14912
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14829: LD_EXP 38
14833: PUSH
14834: LD_VAR 0 3
14838: ARRAY
14839: PUSH
14840: LD_EXP 35
14844: PUSH
14845: LD_VAR 0 2
14849: ARRAY
14850: PUSH
14851: LD_EXP 35
14855: PUSH
14856: LD_VAR 0 3
14860: ARRAY
14861: NONEQUAL
14862: PUSH
14863: LD_EXP 40
14867: NOT
14868: PUSH
14869: LD_VAR 0 2
14873: PUSH
14874: LD_VAR 0 3
14878: NONEQUAL
14879: AND
14880: OR
14881: AND
14882: IFFALSE 14910
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_EXP 62
14893: PUSH
14894: LD_EXP 38
14898: PUSH
14899: LD_VAR 0 2
14903: ARRAY
14904: ARRAY
14905: PPUSH
14906: CALL_OW 334
14910: GO 14826
14912: POP
14913: POP
// end ;
14914: GO 14774
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 1
14922: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14923: LD_EXP 63
14927: IFFALSE 15102
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
// begin for i := 1 to 8 do
14936: LD_ADDR_VAR 0 1
14940: PUSH
14941: DOUBLE
14942: LD_INT 1
14944: DEC
14945: ST_TO_ADDR
14946: LD_INT 8
14948: PUSH
14949: FOR_TO
14950: IFFALSE 15099
// if Side_Positions [ i ] then
14952: LD_EXP 38
14956: PUSH
14957: LD_VAR 0 1
14961: ARRAY
14962: IFFALSE 15097
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_EXP 62
14973: PUSH
14974: LD_EXP 38
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: ARRAY
14985: PPUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 22
15016: PUSH
15017: LD_OWVAR 2
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 70
15034: PUSH
15035: FOR_IN
15036: IFFALSE 15095
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15038: LD_EXP 35
15042: PUSH
15043: LD_VAR 0 1
15047: ARRAY
15048: PUSH
15049: LD_EXP 35
15053: PUSH
15054: LD_OWVAR 2
15058: ARRAY
15059: NONEQUAL
15060: PUSH
15061: LD_EXP 40
15065: NOT
15066: PUSH
15067: LD_VAR 0 1
15071: PUSH
15072: LD_OWVAR 2
15076: NONEQUAL
15077: AND
15078: OR
15079: IFFALSE 15093
// ComMoveToArea ( un , BuildUpEscape ) ;
15081: LD_VAR 0 2
15085: PPUSH
15086: LD_INT 16
15088: PPUSH
15089: CALL_OW 113
15093: GO 15035
15095: POP
15096: POP
15097: GO 14949
15099: POP
15100: POP
// enable ;
15101: ENABLE
// end ;
15102: PPOPN 2
15104: END
// every 0 0$1 trigger def_builduptime do
15105: LD_EXP 16
15109: IFFALSE 15135
15111: GO 15113
15113: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15114: LD_INT 8400
15116: PUSH
15117: LD_EXP 16
15121: PUSH
15122: LD_INT 2100
15124: MUL
15125: PLUS
15126: PPUSH
15127: CALL_OW 67
// EndBuildUp ;
15131: CALL 14748 0 0
// end ; end_of_file
15135: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// enable ( 98 ) ;
15140: LD_INT 98
15142: ENABLE_MARKED
// GameEnded = false ;
15143: LD_ADDR_LOC 21
15147: PUSH
15148: LD_INT 0
15150: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15151: LD_ADDR_LOC 20
15155: PUSH
15156: LD_INT 0
15158: PUSH
15159: LD_INT 0
15161: PUSH
15162: LD_INT 0
15164: PUSH
15165: LD_INT 0
15167: PUSH
15168: LD_INT 0
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: ST_TO_ADDR
// unfoged = false ;
15190: LD_ADDR_LOC 22
15194: PUSH
15195: LD_INT 0
15197: ST_TO_ADDR
// defeated_specs := [ ] ;
15198: LD_ADDR_LOC 23
15202: PUSH
15203: EMPTY
15204: ST_TO_ADDR
// for i = 1 to side_positions do
15205: LD_ADDR_VAR 0 2
15209: PUSH
15210: DOUBLE
15211: LD_INT 1
15213: DEC
15214: ST_TO_ADDR
15215: LD_EXP 38
15219: PUSH
15220: FOR_TO
15221: IFFALSE 15261
// if not side_positions [ i ] then
15223: LD_EXP 38
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: NOT
15234: IFFALSE 15259
// defeated = replace ( defeated , i , true ) ;
15236: LD_ADDR_LOC 20
15240: PUSH
15241: LD_LOC 20
15245: PPUSH
15246: LD_VAR 0 2
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 1
15258: ST_TO_ADDR
15259: GO 15220
15261: POP
15262: POP
// end ;
15263: LD_VAR 0 1
15267: RET
// function CanWinLoose ; begin
15268: LD_INT 0
15270: PPUSH
// Result := true ;
15271: LD_ADDR_VAR 0 1
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15279: CALL_OW 518
15283: PUSH
15284: CALL_OW 519
15288: PUSH
15289: LD_INT 0
15291: GREATER
15292: AND
15293: IFFALSE 15303
// Result := false ;
15295: LD_ADDR_VAR 0 1
15299: PUSH
15300: LD_INT 0
15302: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15303: CALL_OW 531
15307: PUSH
15308: CALL_OW 519
15312: PUSH
15313: LD_INT 1
15315: GREATER
15316: AND
15317: IFFALSE 15327
// Result := false ;
15319: LD_ADDR_VAR 0 1
15323: PUSH
15324: LD_INT 0
15326: ST_TO_ADDR
// end ;
15327: LD_VAR 0 1
15331: RET
// export function HasPower ( i ) ; var k , h ; begin
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
15336: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 108
15346: NOT
15347: PUSH
15348: LD_EXP 37
15352: PUSH
15353: LD_VAR 0 1
15357: ARRAY
15358: NOT
15359: AND
15360: PUSH
15361: LD_OWVAR 4
15365: AND
15366: IFFALSE 15378
// begin result = false ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_INT 0
15375: ST_TO_ADDR
// end else
15376: GO 15673
// case def_win_rules of 0 :
15378: LD_EXP 49
15382: PUSH
15383: LD_INT 0
15385: DOUBLE
15386: EQUAL
15387: IFTRUE 15391
15389: GO 15554
15391: POP
// if def_people_respawning then
15392: LD_EXP 11
15396: IFFALSE 15487
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_VAR 0 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 33
15430: PUSH
15431: LD_INT 3
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 33
15440: PUSH
15441: LD_INT 5
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 30
15450: PUSH
15451: LD_INT 0
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 30
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PPUSH
15480: CALL_OW 69
15484: ST_TO_ADDR
15485: GO 15552
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15487: LD_ADDR_VAR 0 2
15491: PUSH
15492: LD_INT 22
15494: PUSH
15495: LD_VAR 0 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 2
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 33
15519: PUSH
15520: LD_INT 3
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 33
15529: PUSH
15530: LD_INT 5
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 69
15551: ST_TO_ADDR
15552: GO 15673
15554: LD_INT 1
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 15601
15562: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: LD_INT 22
15570: PUSH
15571: LD_VAR 0 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PPUSH
15594: CALL_OW 69
15598: ST_TO_ADDR
15599: GO 15673
15601: LD_INT 2
15603: DOUBLE
15604: EQUAL
15605: IFTRUE 15609
15607: GO 15672
15609: POP
// begin h = false ;
15610: LD_ADDR_VAR 0 4
15614: PUSH
15615: LD_INT 0
15617: ST_TO_ADDR
// for k in heroes [ i ] do
15618: LD_ADDR_VAR 0 3
15622: PUSH
15623: LD_EXP 50
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: PUSH
15634: FOR_IN
15635: IFFALSE 15658
// if IsLive ( k ) then
15637: LD_VAR 0 3
15641: PPUSH
15642: CALL_OW 300
15646: IFFALSE 15656
// h = true ;
15648: LD_ADDR_VAR 0 4
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
15656: GO 15634
15658: POP
15659: POP
// Result := h ;
15660: LD_ADDR_VAR 0 2
15664: PUSH
15665: LD_VAR 0 4
15669: ST_TO_ADDR
// end ; end ;
15670: GO 15673
15672: POP
// end ;
15673: LD_VAR 0 2
15677: RET
// function AlliedSides ( i , j ) ; begin
15678: LD_INT 0
15680: PPUSH
// Result := false ;
15681: LD_ADDR_VAR 0 3
15685: PUSH
15686: LD_INT 0
15688: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_VAR 0 2
15698: PPUSH
15699: CALL_OW 81
15703: PUSH
15704: LD_INT 1
15706: EQUAL
15707: PUSH
15708: LD_VAR 0 2
15712: PPUSH
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 81
15722: PUSH
15723: LD_INT 1
15725: EQUAL
15726: AND
15727: PUSH
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 83
15737: AND
15738: PUSH
15739: LD_VAR 0 2
15743: PPUSH
15744: CALL_OW 83
15748: AND
15749: IFFALSE 15759
// Result := true ;
15751: LD_ADDR_VAR 0 3
15755: PUSH
15756: LD_INT 1
15758: ST_TO_ADDR
// end ;
15759: LD_VAR 0 3
15763: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15764: CALL 15268 0 0
15768: PUSH
15769: LD_LOC 21
15773: NOT
15774: AND
15775: IFFALSE 15791
15777: GO 15779
15779: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15780: LD_ADDR_EXP 61
15784: PUSH
15785: LD_STRING #Player-Ended
15787: PUSH
15788: EMPTY
15789: LIST
15790: ST_TO_ADDR
15791: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15792: CALL 15268 0 0
15796: PUSH
15797: LD_LOC 21
15801: AND
15802: IFFALSE 15811
15804: GO 15806
15806: DISABLE
// YouLostInMultiplayer ;
15807: CALL_OW 107
15811: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
15812: CALL 15268 0 0
15816: NOT
15817: PUSH
15818: CALL_OW 531
15822: NOT
15823: AND
15824: IFFALSE 15840
15826: GO 15828
15828: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15829: LD_ADDR_EXP 61
15833: PUSH
15834: LD_STRING #server-wait
15836: PUSH
15837: EMPTY
15838: LIST
15839: ST_TO_ADDR
15840: END
// every 100 trigger IAmSpec do
15841: CALL_OW 531
15845: IFFALSE 15861
15847: GO 15849
15849: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15850: LD_ADDR_EXP 61
15854: PUSH
15855: LD_STRING #Player-IAmSpec
15857: PUSH
15858: EMPTY
15859: LIST
15860: ST_TO_ADDR
15861: END
// every 100 trigger GameEnded and IAmSpec do
15862: LD_LOC 21
15866: PUSH
15867: CALL_OW 531
15871: AND
15872: IFFALSE 15881
15874: GO 15876
15876: DISABLE
// YouLostInMultiplayer ;
15877: CALL_OW 107
15881: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15882: CALL 15268 0 0
15886: PUSH
15887: LD_LOC 21
15891: NOT
15892: AND
15893: IFFALSE 15909
15895: GO 15897
15897: DISABLE
// WaitServerStrings = [ $player-win ] ;
15898: LD_ADDR_EXP 61
15902: PUSH
15903: LD_STRING $player-win
15905: PUSH
15906: EMPTY
15907: LIST
15908: ST_TO_ADDR
15909: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15910: CALL 15268 0 0
15914: PUSH
15915: LD_LOC 21
15919: AND
15920: IFFALSE 15944
15922: GO 15924
15924: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
15925: LD_EXP 39
15929: PUSH
15930: LD_OWVAR 7
15934: ARRAY
15935: PPUSH
15936: CALL 9123 0 1
// YouWinInMultiplayer ;
15940: CALL_OW 106
// end ;
15944: END
// every 100 trigger isEditor marked 401 do
15945: LD_OWVAR 84
15949: IFFALSE 15965
15951: GO 15953
15953: DISABLE
// Debug_Strings = [ You won ] ;
15954: LD_ADDR_OWVAR 48
15958: PUSH
15959: LD_STRING You won
15961: PUSH
15962: EMPTY
15963: LIST
15964: ST_TO_ADDR
15965: END
// every 100 trigger isEditor marked 400 do
15966: LD_OWVAR 84
15970: IFFALSE 15986
15972: GO 15974
15974: DISABLE
// Debug_Strings = [ You loss ] ;
15975: LD_ADDR_OWVAR 48
15979: PUSH
15980: LD_STRING You loss
15982: PUSH
15983: EMPTY
15984: LIST
15985: ST_TO_ADDR
15986: END
// every 100 marked 98 do var i , un ;
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
// begin for i = 1 to side_positions do
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: DOUBLE
16000: LD_INT 1
16002: DEC
16003: ST_TO_ADDR
16004: LD_EXP 38
16008: PUSH
16009: FOR_TO
16010: IFFALSE 16097
// begin if side_positions [ i ] then
16012: LD_EXP 38
16016: PUSH
16017: LD_VAR 0 1
16021: ARRAY
16022: IFFALSE 16095
// if not HasPower ( i ) and not defeated [ i ] then
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL 15332 0 1
16033: NOT
16034: PUSH
16035: LD_LOC 20
16039: PUSH
16040: LD_VAR 0 1
16044: ARRAY
16045: NOT
16046: AND
16047: IFFALSE 16095
// begin defeated = replace ( defeated , i , true ) ;
16049: LD_ADDR_LOC 20
16053: PUSH
16054: LD_LOC 20
16058: PPUSH
16059: LD_VAR 0 1
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 1
16071: ST_TO_ADDR
// if i = mp_player_side then
16072: LD_VAR 0 1
16076: PUSH
16077: LD_OWVAR 7
16081: EQUAL
16082: IFFALSE 16095
// begin Multiplayer_Loose_Message ;
16084: CALL_OW 521
// SetPlayerSpectator ( ) ;
16088: CALL_OW 572
// enable ( 400 ) ;
16092: LD_INT 400
16094: ENABLE_MARKED
// end ; end ; end ;
16095: GO 16009
16097: POP
16098: POP
// DidGameEnd ;
16099: CALL 16114 0 0
// if not GameEnded then
16103: LD_LOC 21
16107: NOT
16108: IFFALSE 16111
// enable ;
16110: ENABLE
// end ;
16111: PPOPN 2
16113: END
// function DidGameEnd ; var i , k , enemy ; begin
16114: LD_INT 0
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
// enemy = [ ] ;
16120: LD_ADDR_VAR 0 4
16124: PUSH
16125: EMPTY
16126: ST_TO_ADDR
// for i = 1 to side_positions do
16127: LD_ADDR_VAR 0 2
16131: PUSH
16132: DOUBLE
16133: LD_INT 1
16135: DEC
16136: ST_TO_ADDR
16137: LD_EXP 38
16141: PUSH
16142: FOR_TO
16143: IFFALSE 16237
// if not defeated [ i ] then
16145: LD_LOC 20
16149: PUSH
16150: LD_VAR 0 2
16154: ARRAY
16155: NOT
16156: IFFALSE 16235
// for k = 1 to side_positions do
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: DOUBLE
16164: LD_INT 1
16166: DEC
16167: ST_TO_ADDR
16168: LD_EXP 38
16172: PUSH
16173: FOR_TO
16174: IFFALSE 16233
// if not defeated [ k ] then
16176: LD_LOC 20
16180: PUSH
16181: LD_VAR 0 3
16185: ARRAY
16186: NOT
16187: IFFALSE 16231
// if not AlliedSides ( i , k ) then
16189: LD_VAR 0 2
16193: PPUSH
16194: LD_VAR 0 3
16198: PPUSH
16199: CALL 15678 0 2
16203: NOT
16204: IFFALSE 16231
// enemy = enemy ^ [ i , k ] ;
16206: LD_ADDR_VAR 0 4
16210: PUSH
16211: LD_VAR 0 4
16215: PUSH
16216: LD_VAR 0 2
16220: PUSH
16221: LD_VAR 0 3
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: ADD
16230: ST_TO_ADDR
16231: GO 16173
16233: POP
16234: POP
16235: GO 16142
16237: POP
16238: POP
// if not enemy then
16239: LD_VAR 0 4
16243: NOT
16244: IFFALSE 16270
// begin GameEnded = true ;
16246: LD_ADDR_LOC 21
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16254: LD_LOC 20
16258: PUSH
16259: LD_OWVAR 7
16263: ARRAY
16264: NOT
16265: IFFALSE 16270
// enable ( 401 ) ;
16267: LD_INT 401
16269: ENABLE_MARKED
// end ; end ;
16270: LD_VAR 0 1
16274: RET
// function unfog ; var k , friends ; begin
16275: LD_INT 0
16277: PPUSH
16278: PPUSH
16279: PPUSH
// for k = 1 to side_positions do
16280: LD_ADDR_VAR 0 2
16284: PUSH
16285: DOUBLE
16286: LD_INT 1
16288: DEC
16289: ST_TO_ADDR
16290: LD_EXP 38
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16352
// if not defeated [ k ] then
16298: LD_LOC 20
16302: PUSH
16303: LD_VAR 0 2
16307: ARRAY
16308: NOT
16309: IFFALSE 16350
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16311: LD_OWVAR 7
16315: PPUSH
16316: LD_VAR 0 2
16320: PPUSH
16321: CALL_OW 81
16325: PUSH
16326: LD_INT 1
16328: PUSH
16329: EMPTY
16330: LIST
16331: IN
16332: IFFALSE 16350
// friends = friends ^ k ;
16334: LD_ADDR_VAR 0 3
16338: PUSH
16339: LD_VAR 0 3
16343: PUSH
16344: LD_VAR 0 2
16348: ADD
16349: ST_TO_ADDR
16350: GO 16295
16352: POP
16353: POP
// if not friends then
16354: LD_VAR 0 3
16358: NOT
16359: IFFALSE 16373
// begin SetPlayerSpectator ( ) ;
16361: CALL_OW 572
// unfoged = true ;
16365: LD_ADDR_LOC 22
16369: PUSH
16370: LD_INT 1
16372: ST_TO_ADDR
// end ; end ;
16373: LD_VAR 0 1
16377: RET
// export function MakeGameEnd ; begin
16378: LD_INT 0
16380: PPUSH
// SetPlayerSpectator ( ) ;
16381: CALL_OW 572
// unfoged = true ;
16385: LD_ADDR_LOC 22
16389: PUSH
16390: LD_INT 1
16392: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16393: LD_INT 175
16395: PPUSH
16396: CALL_OW 67
// GameEnded = true ;
16400: LD_ADDR_LOC 21
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// end ;
16408: LD_VAR 0 1
16412: RET
// export function GetGameEnded ; begin
16413: LD_INT 0
16415: PPUSH
// result = GameEnded ;
16416: LD_ADDR_VAR 0 1
16420: PUSH
16421: LD_LOC 21
16425: ST_TO_ADDR
// end ;
16426: LD_VAR 0 1
16430: RET
