// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , sheik , mastodont ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 32
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 17
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 15
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 18
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 16
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 32
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 17
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 15
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 18
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 16
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 17
 285: PUSH
 286: LD_EXP 17
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 16
 308: PUSH
 309: LD_EXP 16
 313: PPUSH
 314: LD_EXP 15
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 16
 329: PUSH
 330: LD_EXP 15
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 20
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 17
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 20
 420: PUSH
 421: LD_EXP 20
 425: PPUSH
 426: LD_EXP 17
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := Side_Teams [ your_side ] ;
 451: LD_ADDR_EXP 19
 455: PUSH
 456: LD_EXP 15
 460: PUSH
 461: LD_OWVAR 2
 465: ARRAY
 466: ST_TO_ADDR
// if Multiplayer then
 467: LD_OWVAR 4
 471: IFFALSE 717
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 473: LD_ADDR_EXP 34
 477: PUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 486: LD_ADDR_EXP 35
 490: PUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 499: LD_ADDR_EXP 36
 503: PUSH
 504: LD_INT 2
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 512: LD_ADDR_EXP 37
 516: PUSH
 517: LD_INT 3
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 525: LD_ADDR_EXP 38
 529: PUSH
 530: LD_INT 4
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 538: LD_ADDR_EXP 39
 542: PUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 551: LD_ADDR_EXP 40
 555: PUSH
 556: LD_INT 6
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 564: LD_ADDR_EXP 41
 568: PUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 577: LD_ADDR_EXP 42
 581: PUSH
 582: LD_INT 11
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 590: LD_ADDR_EXP 43
 594: PUSH
 595: LD_INT 12
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 603: LD_ADDR_EXP 44
 607: PUSH
 608: LD_INT 13
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 616: LD_ADDR_EXP 45
 620: PUSH
 621: LD_INT 14
 623: PPUSH
 624: CALL_OW 426
 628: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 629: LD_ADDR_EXP 1
 633: PUSH
 634: LD_INT 15
 636: PPUSH
 637: CALL_OW 426
 641: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 16
 649: PPUSH
 650: CALL_OW 426
 654: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 655: LD_ADDR_EXP 46
 659: PUSH
 660: LD_INT 17
 662: PPUSH
 663: CALL_OW 426
 667: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 668: LD_ADDR_EXP 47
 672: PUSH
 673: LD_INT 20
 675: PPUSH
 676: CALL_OW 426
 680: ST_TO_ADDR
// def_game_rules := 0 ;
 681: LD_ADDR_EXP 33
 685: PUSH
 686: LD_INT 0
 688: ST_TO_ADDR
// def_sheik := GetMultiplayerSetting ( 22 ) ;
 689: LD_ADDR_EXP 48
 693: PUSH
 694: LD_INT 22
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 702: LD_ADDR_EXP 49
 706: PUSH
 707: LD_INT 23
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// end else
 715: GO 873
// begin Randomize ;
 717: CALL_OW 10
// def_base_level := 1 ;
 721: LD_ADDR_EXP 34
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_people := 0 ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_skill_level := 1 ;
 737: LD_ADDR_EXP 36
 741: PUSH
 742: LD_INT 1
 744: ST_TO_ADDR
// def_starting_resources := 2 ;
 745: LD_ADDR_EXP 37
 749: PUSH
 750: LD_INT 2
 752: ST_TO_ADDR
// def_shipments_density := 1 ;
 753: LD_ADDR_EXP 38
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 761: LD_ADDR_EXP 39
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 769: LD_ADDR_EXP 40
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_shared_vision := 1 ;
 777: LD_ADDR_EXP 41
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_morale_flags := 1 ;
 785: LD_ADDR_EXP 42
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_siberite_detection := 1 ;
 793: LD_ADDR_EXP 43
 797: PUSH
 798: LD_INT 1
 800: ST_TO_ADDR
// def_people_respawning := 2 ;
 801: LD_ADDR_EXP 44
 805: PUSH
 806: LD_INT 2
 808: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 809: LD_ADDR_EXP 45
 813: PUSH
 814: LD_INT 3
 816: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 817: LD_ADDR_EXP 1
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// def_public_score := 0 ;
 825: LD_ADDR_EXP 2
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 833: LD_ADDR_EXP 46
 837: PUSH
 838: LD_INT 0
 840: ST_TO_ADDR
// def_builduptime := 0 ;
 841: LD_ADDR_EXP 47
 845: PUSH
 846: LD_INT 0
 848: ST_TO_ADDR
// def_game_rules := 0 ;
 849: LD_ADDR_EXP 33
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// def_sheik := 0 ;
 857: LD_ADDR_EXP 48
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// def_mastodont := 0 ;
 865: LD_ADDR_EXP 49
 869: PUSH
 870: LD_INT 0
 872: ST_TO_ADDR
// end ; InitGameRules ;
 873: CALL 10043 0 0
// if ( Game_Type = 5 ) then
 877: LD_EXP 32
 881: PUSH
 882: LD_INT 5
 884: EQUAL
 885: IFFALSE 914
// begin def_base_level := 1 ;
 887: LD_ADDR_EXP 34
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_INT 0
 902: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 903: LD_ADDR_EXP 40
 907: PUSH
 908: LD_INT 0
 910: ST_TO_ADDR
// disable ( 10 ) ;
 911: LD_INT 10
 913: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 914: LD_ADDR_EXP 3
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: LIST
 932: PUSH
 933: LD_EXP 34
 937: PUSH
 938: LD_INT 1
 940: PLUS
 941: ARRAY
 942: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 943: LD_ADDR_EXP 4
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: LD_INT 2
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_EXP 34
 966: PUSH
 967: LD_INT 1
 969: PLUS
 970: ARRAY
 971: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 972: LD_ADDR_EXP 5
 976: PUSH
 977: LD_INT 9
 979: PUSH
 980: LD_INT 12
 982: PUSH
 983: LD_INT 15
 985: PUSH
 986: LD_INT 24
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: PUSH
 995: LD_EXP 35
 999: PUSH
1000: LD_INT 1
1002: PLUS
1003: ARRAY
1004: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 , 8 ] [ def_skill_level + 1 ] ;
1005: LD_ADDR_EXP 6
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: LD_INT 3
1015: PUSH
1016: LD_INT 4
1018: PUSH
1019: LD_INT 5
1021: PUSH
1022: LD_INT 8
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_EXP 36
1036: PUSH
1037: LD_INT 1
1039: PLUS
1040: ARRAY
1041: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1042: LD_EXP 32
1046: PUSH
1047: LD_INT 5
1049: EQUAL
1050: IFFALSE 1168
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1052: LD_ADDR_EXP 8
1056: PUSH
1057: LD_INT 1000
1059: PUSH
1060: LD_INT 100
1062: PUSH
1063: LD_INT 100
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 2000
1073: PUSH
1074: LD_INT 200
1076: PUSH
1077: LD_INT 200
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: PUSH
1085: LD_INT 5000
1087: PUSH
1088: LD_INT 500
1090: PUSH
1091: LD_INT 500
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 10000
1101: PUSH
1102: LD_INT 1000
1104: PUSH
1105: LD_INT 1000
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 25000
1115: PUSH
1116: LD_INT 2500
1118: PUSH
1119: LD_INT 2500
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 50000
1129: PUSH
1130: LD_INT 5000
1132: PUSH
1133: LD_INT 5000
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: PUSH
1149: LD_EXP 37
1153: PUSH
1154: LD_INT 1
1156: PLUS
1157: ARRAY
1158: ST_TO_ADDR
// starting_crates := [ ] ;
1159: LD_ADDR_EXP 7
1163: PUSH
1164: EMPTY
1165: ST_TO_ADDR
// end else
1166: GO 1314
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1168: LD_ADDR_EXP 8
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 0
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 30
1189: PUSH
1190: LD_INT 0
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 50
1203: PUSH
1204: LD_INT 20
1206: PUSH
1207: LD_INT 0
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 80
1217: PUSH
1218: LD_INT 40
1220: PUSH
1221: LD_INT 20
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_EXP 37
1239: PUSH
1240: LD_INT 1
1242: PLUS
1243: ARRAY
1244: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1245: LD_ADDR_EXP 7
1249: PUSH
1250: LD_INT 10
1252: PUSH
1253: EMPTY
1254: LIST
1255: PUSH
1256: LD_INT 7
1258: PUSH
1259: LD_INT 14
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 6
1268: PUSH
1269: LD_INT 12
1271: PUSH
1272: LD_INT 18
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 5
1282: PUSH
1283: LD_INT 10
1285: PUSH
1286: LD_INT 15
1288: PUSH
1289: LD_INT 20
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_EXP 37
1308: PUSH
1309: LD_INT 1
1311: PLUS
1312: ARRAY
1313: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1314: LD_ADDR_EXP 9
1318: PUSH
1319: LD_INT 150
1321: PUSH
1322: LD_INT 125
1324: PUSH
1325: LD_INT 100
1327: PUSH
1328: LD_INT 50
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_EXP 38
1341: PUSH
1342: LD_INT 1
1344: PLUS
1345: ARRAY
1346: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1347: LD_ADDR_EXP 13
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 10500
1357: PUSH
1358: LD_INT 6300
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_EXP 44
1370: PUSH
1371: LD_INT 1
1373: PLUS
1374: ARRAY
1375: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1376: LD_ADDR_EXP 14
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 31500
1386: PUSH
1387: LD_INT 10500
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: LIST
1394: PUSH
1395: LD_EXP 44
1399: PUSH
1400: LD_INT 1
1402: PLUS
1403: ARRAY
1404: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1405: LD_ADDR_EXP 11
1409: PUSH
1410: LD_INT 0
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 6
1418: PUSH
1419: LD_INT 9
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_EXP 45
1432: PUSH
1433: LD_INT 1
1435: PLUS
1436: ARRAY
1437: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1438: LD_ADDR_EXP 12
1442: PUSH
1443: LD_INT 30
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 80
1451: PUSH
1452: LD_INT 100
1454: PUSH
1455: LD_INT 130
1457: PUSH
1458: LD_INT 150
1460: PUSH
1461: LD_INT 200
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_EXP 1
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: ARRAY
1482: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1483: LD_ADDR_EXP 10
1487: PUSH
1488: LD_INT 1
1490: NEG
1491: PUSH
1492: LD_INT 350
1494: PUSH
1495: LD_INT 700
1497: PUSH
1498: LD_INT 1400
1500: PUSH
1501: LD_INT 0
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: PUSH
1511: LD_EXP 42
1515: PUSH
1516: LD_INT 1
1518: PLUS
1519: ARRAY
1520: ST_TO_ADDR
// battle_flags_id := [ ] ;
1521: LD_ADDR_EXP 28
1525: PUSH
1526: EMPTY
1527: ST_TO_ADDR
// if ( Game_Type = 12 ) then
1528: LD_EXP 32
1532: PUSH
1533: LD_INT 12
1535: EQUAL
1536: IFFALSE 1594
// begin sheik := [ 0 , 1 ] [ def_sheik + 1 ] ;
1538: LD_ADDR_EXP 29
1542: PUSH
1543: LD_INT 0
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_EXP 48
1557: PUSH
1558: LD_INT 1
1560: PLUS
1561: ARRAY
1562: ST_TO_ADDR
// mastodont := [ 0 , 1 , 2 ] [ def_mastodont + 1 ] end else
1563: LD_ADDR_EXP 30
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: LD_INT 2
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 49
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
1592: GO 1610
// begin sheik := 0 ;
1594: LD_ADDR_EXP 29
1598: PUSH
1599: LD_INT 0
1601: ST_TO_ADDR
// mastodont := 0 ;
1602: LD_ADDR_EXP 30
1606: PUSH
1607: LD_INT 0
1609: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1610: LD_ADDR_EXP 31
1614: PUSH
1615: LD_INT 9
1617: PUSH
1618: LD_INT 10
1620: PUSH
1621: LD_INT 11
1623: PUSH
1624: LD_INT 12
1626: PUSH
1627: LD_INT 13
1629: PUSH
1630: LD_INT 14
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// end ;
1641: LD_VAR 0 1
1645: RET
// function init_map ; var i , j ; begin
1646: LD_INT 0
1648: PPUSH
1649: PPUSH
1650: PPUSH
// normal_oil_deposits_locations := [ [ 90 , 175 ] , [ 17 , 10 ] , [ 87 , 72 ] , [ 146 , 19 ] , [ 183 , 90 ] , [ 215 , 163 ] ] ;
1651: LD_ADDR_EXP 24
1655: PUSH
1656: LD_INT 90
1658: PUSH
1659: LD_INT 175
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 17
1668: PUSH
1669: LD_INT 10
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 87
1678: PUSH
1679: LD_INT 72
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 146
1688: PUSH
1689: LD_INT 19
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 183
1698: PUSH
1699: LD_INT 90
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 215
1708: PUSH
1709: LD_INT 163
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 90 , 175 ] , [ 82 , 158 ] ] , [ [ 17 , 10 ] , [ 15 , 21 ] ] , [ [ 87 , 72 ] , [ 85 , 63 ] ] , [ [ 146 , 19 ] , [ 123 , 3 ] ] , [ [ 183 , 90 ] , [ 181 , 76 ] ] , [ [ 215 , 163 ] , [ 231 , 174 ] ] ] ;
1724: LD_ADDR_EXP 25
1728: PUSH
1729: LD_INT 90
1731: PUSH
1732: LD_INT 175
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 82
1741: PUSH
1742: LD_INT 158
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 17
1755: PUSH
1756: LD_INT 10
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 15
1765: PUSH
1766: LD_INT 21
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 87
1779: PUSH
1780: LD_INT 72
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 85
1789: PUSH
1790: LD_INT 63
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 146
1803: PUSH
1804: LD_INT 19
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 123
1813: PUSH
1814: LD_INT 3
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 183
1827: PUSH
1828: LD_INT 90
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 181
1837: PUSH
1838: LD_INT 76
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 215
1851: PUSH
1852: LD_INT 163
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 231
1861: PUSH
1862: LD_INT 174
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 87 , 169 ] , [ 21 , 29 ] , [ 100 , 64 ] , [ 151 , 13 ] , [ 184 , 70 ] , [ 219 , 165 ] ] ;
1881: LD_ADDR_EXP 26
1885: PUSH
1886: LD_INT 87
1888: PUSH
1889: LD_INT 169
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 29
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 100
1908: PUSH
1909: LD_INT 64
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 151
1918: PUSH
1919: LD_INT 13
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: LD_INT 184
1928: PUSH
1929: LD_INT 70
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 219
1938: PUSH
1939: LD_INT 165
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 87 , 169 ] , [ 123 , 184 ] ] , [ [ 21 , 29 ] , [ 33 , 18 ] ] , [ [ 100 , 64 ] , [ 100 , 85 ] ] , [ [ 151 , 13 ] , [ 125 , 13 ] ] , [ [ 184 , 70 ] , [ 176 , 81 ] ] , [ [ 239 , 189 ] , [ 233 , 154 ] ] ] ;
1954: LD_ADDR_EXP 27
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 169
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 123
1971: PUSH
1972: LD_INT 184
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 21
1985: PUSH
1986: LD_INT 29
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 33
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 100
2009: PUSH
2010: LD_INT 64
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 100
2019: PUSH
2020: LD_INT 85
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 151
2033: PUSH
2034: LD_INT 13
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 125
2043: PUSH
2044: LD_INT 13
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 184
2057: PUSH
2058: LD_INT 70
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 176
2067: PUSH
2068: LD_INT 81
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 239
2081: PUSH
2082: LD_INT 189
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 233
2091: PUSH
2092: LD_INT 154
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: ST_TO_ADDR
// depot_def := [ [ 100 , 179 , 0 ] , [ 21 , 18 , 2 ] , [ 94 , 71 , 2 ] , [ 132 , 11 , 1 ] , [ 191 , 86 , 2 ] , [ 230 , 164 , 4 ] ] ;
2111: LD_ADDR_EXP 21
2115: PUSH
2116: LD_INT 100
2118: PUSH
2119: LD_INT 179
2121: PUSH
2122: LD_INT 0
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 21
2132: PUSH
2133: LD_INT 18
2135: PUSH
2136: LD_INT 2
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 94
2146: PUSH
2147: LD_INT 71
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 132
2160: PUSH
2161: LD_INT 11
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 191
2174: PUSH
2175: LD_INT 86
2177: PUSH
2178: LD_INT 2
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 230
2188: PUSH
2189: LD_INT 164
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: ST_TO_ADDR
// for i in depot_def do
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_EXP 21
2217: PUSH
2218: FOR_IN
2219: IFFALSE 2293
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2221: LD_ADDR_EXP 23
2225: PUSH
2226: LD_EXP 23
2230: PUSH
2231: LD_VAR 0 2
2235: PUSH
2236: LD_INT 1
2238: ARRAY
2239: PPUSH
2240: LD_VAR 0 2
2244: PUSH
2245: LD_INT 3
2247: ARRAY
2248: PPUSH
2249: LD_INT 10
2251: PPUSH
2252: CALL_OW 272
2256: PUSH
2257: LD_VAR 0 2
2261: PUSH
2262: LD_INT 2
2264: ARRAY
2265: PPUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_INT 3
2273: ARRAY
2274: PPUSH
2275: LD_INT 10
2277: PPUSH
2278: CALL_OW 273
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: ADD
2290: ST_TO_ADDR
2291: GO 2218
2293: POP
2294: POP
// breastworks_def := [ [ [ 93 , 156 , 3 ] , [ 105 , 167 , 4 ] ] , [ [ 27 , 32 , 5 ] , [ 36 , 30 , 4 ] ] , [ [ 93 , 61 , 3 ] , [ 111 , 88 , 5 ] ] , [ [ 139 , 18 , 0 ] , [ 130 , 7 , 1 ] ] , [ [ 185 , 92 , 0 ] , [ 201 , 94 , 5 ] ] , [ [ 213 , 163 , 1 ] , [ 224 , 156 , 2 ] ] ] ;
2295: LD_ADDR_EXP 22
2299: PUSH
2300: LD_INT 93
2302: PUSH
2303: LD_INT 156
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 105
2316: PUSH
2317: LD_INT 167
2319: PUSH
2320: LD_INT 4
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 27
2334: PUSH
2335: LD_INT 32
2337: PUSH
2338: LD_INT 5
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 36
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 4
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 93
2366: PUSH
2367: LD_INT 61
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 111
2380: PUSH
2381: LD_INT 88
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 139
2398: PUSH
2399: LD_INT 18
2401: PUSH
2402: LD_INT 0
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 130
2412: PUSH
2413: LD_INT 7
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 185
2430: PUSH
2431: LD_INT 92
2433: PUSH
2434: LD_INT 0
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 201
2444: PUSH
2445: LD_INT 94
2447: PUSH
2448: LD_INT 5
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 213
2462: PUSH
2463: LD_INT 163
2465: PUSH
2466: LD_INT 1
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 224
2476: PUSH
2477: LD_INT 156
2479: PUSH
2480: LD_INT 2
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: LD_EXP 17
2509: PUSH
2510: LD_INT 0
2512: PUSH
2513: EMPTY
2514: LIST
2515: DIFF
2516: PUSH
2517: FOR_IN
2518: IFFALSE 2615
// if def_extra_oil_deposits then
2520: LD_EXP 39
2524: IFFALSE 2576
// for j in extra_oil_deposits_locations [ i ] do
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_EXP 25
2535: PUSH
2536: LD_VAR 0 2
2540: ARRAY
2541: PUSH
2542: FOR_IN
2543: IFFALSE 2572
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 1
2552: ARRAY
2553: PPUSH
2554: LD_VAR 0 3
2558: PUSH
2559: LD_INT 2
2561: ARRAY
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 62
2570: GO 2542
2572: POP
2573: POP
2574: GO 2613
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2576: LD_EXP 24
2580: PUSH
2581: LD_VAR 0 2
2585: ARRAY
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: LD_EXP 24
2595: PUSH
2596: LD_VAR 0 2
2600: ARRAY
2601: PUSH
2602: LD_INT 2
2604: ARRAY
2605: PPUSH
2606: LD_INT 2
2608: PPUSH
2609: CALL_OW 62
2613: GO 2517
2615: POP
2616: POP
// if def_extra_sib_deposits then
2617: LD_EXP 40
2621: IFFALSE 2744
// for i in ( Side_Positions diff [ 0 ] ) do
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: LD_EXP 17
2632: PUSH
2633: LD_INT 0
2635: PUSH
2636: EMPTY
2637: LIST
2638: DIFF
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2742
// if def_extra_sib_deposits = 2 then
2643: LD_EXP 40
2647: PUSH
2648: LD_INT 2
2650: EQUAL
2651: IFFALSE 2703
// for j in extra_sib_deposits_locations [ i ] do
2653: LD_ADDR_VAR 0 3
2657: PUSH
2658: LD_EXP 27
2662: PUSH
2663: LD_VAR 0 2
2667: ARRAY
2668: PUSH
2669: FOR_IN
2670: IFFALSE 2699
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2672: LD_VAR 0 3
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 3
2685: PUSH
2686: LD_INT 2
2688: ARRAY
2689: PPUSH
2690: LD_INT 3
2692: PPUSH
2693: CALL_OW 62
2697: GO 2669
2699: POP
2700: POP
2701: GO 2740
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2703: LD_EXP 26
2707: PUSH
2708: LD_VAR 0 2
2712: ARRAY
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_EXP 26
2722: PUSH
2723: LD_VAR 0 2
2727: ARRAY
2728: PUSH
2729: LD_INT 2
2731: ARRAY
2732: PPUSH
2733: LD_INT 3
2735: PPUSH
2736: CALL_OW 62
2740: GO 2640
2742: POP
2743: POP
// end ;
2744: LD_VAR 0 1
2748: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2749: LD_INT 0
2751: PPUSH
2752: PPUSH
2753: PPUSH
// if not Team_Game then
2754: LD_EXP 19
2758: NOT
2759: IFFALSE 2857
// begin for i = 1 to 8 do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: DOUBLE
2767: LD_INT 1
2769: DEC
2770: ST_TO_ADDR
2771: LD_INT 8
2773: PUSH
2774: FOR_TO
2775: IFFALSE 2853
// for j = 1 to 8 do
2777: LD_ADDR_VAR 0 3
2781: PUSH
2782: DOUBLE
2783: LD_INT 1
2785: DEC
2786: ST_TO_ADDR
2787: LD_INT 8
2789: PUSH
2790: FOR_TO
2791: IFFALSE 2849
// if i <> j then
2793: LD_VAR 0 2
2797: PUSH
2798: LD_VAR 0 3
2802: NONEQUAL
2803: IFFALSE 2827
// SetAttitude ( i , j , att_neutral , true ) else
2805: LD_VAR 0 2
2809: PPUSH
2810: LD_VAR 0 3
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 80
2825: GO 2847
// SetAttitude ( i , j , att_friend , true ) ;
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_VAR 0 3
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: CALL_OW 80
2847: GO 2790
2849: POP
2850: POP
2851: GO 2774
2853: POP
2854: POP
// end else
2855: GO 3032
// begin if def_shared_vision then
2857: LD_EXP 41
2861: IFFALSE 2926
// begin for i in Teams do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: LD_EXP 16
2872: PUSH
2873: FOR_IN
2874: IFFALSE 2924
// for j = 2 to i do
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: DOUBLE
2882: LD_INT 2
2884: DEC
2885: ST_TO_ADDR
2886: LD_VAR 0 2
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2920
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2894: LD_VAR 0 2
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: PPUSH
2905: LD_VAR 0 2
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: CALL_OW 343
2918: GO 2891
2920: POP
2921: POP
2922: GO 2873
2924: POP
2925: POP
// end ; for i = 1 to 8 do
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: DOUBLE
2932: LD_INT 1
2934: DEC
2935: ST_TO_ADDR
2936: LD_INT 8
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3030
// for j = 1 to 8 do
2942: LD_ADDR_VAR 0 3
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_INT 8
2954: PUSH
2955: FOR_TO
2956: IFFALSE 3026
// if Side_Teams [ i ] = Side_Teams [ j ] then
2958: LD_EXP 15
2962: PUSH
2963: LD_VAR 0 2
2967: ARRAY
2968: PUSH
2969: LD_EXP 15
2973: PUSH
2974: LD_VAR 0 3
2978: ARRAY
2979: EQUAL
2980: IFFALSE 3004
// SetAttitude ( i , j , att_friend , true ) else
2982: LD_VAR 0 2
2986: PPUSH
2987: LD_VAR 0 3
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 1
2997: PPUSH
2998: CALL_OW 80
3002: GO 3024
// SetAttitude ( i , j , att_enemy , true ) ;
3004: LD_VAR 0 2
3008: PPUSH
3009: LD_VAR 0 3
3013: PPUSH
3014: LD_INT 2
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: CALL_OW 80
3024: GO 2955
3026: POP
3027: POP
3028: GO 2939
3030: POP
3031: POP
// end ; end ;
3032: LD_VAR 0 1
3036: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3037: LD_INT 0
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
// result := [ ] ;
3043: LD_ADDR_VAR 0 7
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// for i := 1 to count do
3050: LD_ADDR_VAR 0 8
3054: PUSH
3055: DOUBLE
3056: LD_INT 1
3058: DEC
3059: ST_TO_ADDR
3060: LD_VAR 0 1
3064: PUSH
3065: FOR_TO
3066: IFFALSE 3516
// begin uc_direction := Rand ( 0 , 5 ) ;
3068: LD_ADDR_OWVAR 24
3072: PUSH
3073: LD_INT 0
3075: PPUSH
3076: LD_INT 5
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// if commander then
3084: LD_LOC 1
3088: IFFALSE 3229
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_OWVAR 19
3099: PUSH
3100: LD_OWVAR 20
3104: ARRAY
3105: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: CALL_OW 12
3116: PPUSH
3117: LD_VAR 0 2
3121: PPUSH
3122: LD_EXP 6
3126: PUSH
3127: LD_INT 2
3129: PLUS
3130: PPUSH
3131: CALL_OW 380
// hc_importance := 105 ;
3135: LD_ADDR_OWVAR 32
3139: PUSH
3140: LD_INT 105
3142: ST_TO_ADDR
// commander := false ;
3143: LD_ADDR_LOC 1
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// if Multiplayer then
3151: LD_OWVAR 4
3155: IFFALSE 3227
// begin if sheik then
3157: LD_EXP 29
3161: IFFALSE 3189
// begin hc_gallery :=  ;
3163: LD_ADDR_OWVAR 33
3167: PUSH
3168: LD_STRING 
3170: ST_TO_ADDR
// hc_class := class_desert_warior ;
3171: LD_ADDR_OWVAR 28
3175: PUSH
3176: LD_INT 11
3178: ST_TO_ADDR
// hc_sex := sex_male ;
3179: LD_ADDR_OWVAR 27
3183: PUSH
3184: LD_INT 1
3186: ST_TO_ADDR
// end else
3187: GO 3227
// begin hc_gallery := MULTIAVATARS ;
3189: LD_ADDR_OWVAR 33
3193: PUSH
3194: LD_STRING MULTIAVATARS
3196: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3197: LD_ADDR_OWVAR 34
3201: PUSH
3202: LD_OWVAR 20
3206: PPUSH
3207: CALL_OW 525
3211: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3212: LD_ADDR_OWVAR 27
3216: PUSH
3217: LD_OWVAR 20
3221: PPUSH
3222: CALL_OW 526
3226: ST_TO_ADDR
// end ; end ; end else
3227: GO 3292
// begin hc_name :=  ;
3229: LD_ADDR_OWVAR 26
3233: PUSH
3234: LD_STRING 
3236: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3237: LD_INT 1
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 12
3247: PPUSH
3248: LD_VAR 0 2
3252: PPUSH
3253: LD_EXP 6
3257: PPUSH
3258: CALL_OW 380
// hc_importance := 0 ;
3262: LD_ADDR_OWVAR 32
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// if Multiplayer then
3270: LD_OWVAR 4
3274: IFFALSE 3292
// begin hc_gallery :=  ;
3276: LD_ADDR_OWVAR 33
3280: PUSH
3281: LD_STRING 
3283: ST_TO_ADDR
// hc_face_number := 0 ;
3284: LD_ADDR_OWVAR 34
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3292: LD_ADDR_VAR 0 10
3296: PUSH
3297: CALL_OW 44
3301: ST_TO_ADDR
// if global_defined then
3302: LD_LOC 3
3306: IFFALSE 3446
// begin if ( cl = class_soldier ) then
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 1
3315: EQUAL
3316: IFFALSE 3336
// j := i + soldiers_created else
3318: LD_ADDR_VAR 0 9
3322: PUSH
3323: LD_VAR 0 8
3327: PUSH
3328: LD_LOC 4
3332: PLUS
3333: ST_TO_ADDR
3334: GO 3346
// j := i ;
3336: LD_ADDR_VAR 0 9
3340: PUSH
3341: LD_VAR 0 8
3345: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3346: LD_LOC 2
3350: PUSH
3351: LD_VAR 0 2
3355: ARRAY
3356: PUSH
3357: LD_VAR 0 9
3361: ARRAY
3362: PPUSH
3363: LD_VAR 0 10
3367: PPUSH
3368: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3372: LD_VAR 0 10
3376: PPUSH
3377: LD_INT 2
3379: PPUSH
3380: LD_LOC 2
3384: PUSH
3385: LD_VAR 0 2
3389: ARRAY
3390: PUSH
3391: LD_VAR 0 9
3395: ARRAY
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: CALL_OW 260
3404: PPUSH
3405: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3409: LD_VAR 0 10
3413: PPUSH
3414: LD_INT 1
3416: PPUSH
3417: LD_LOC 2
3421: PUSH
3422: LD_VAR 0 2
3426: ARRAY
3427: PUSH
3428: LD_VAR 0 9
3432: ARRAY
3433: PPUSH
3434: LD_INT 1
3436: PPUSH
3437: CALL_OW 260
3441: PPUSH
3442: CALL_OW 239
// end ; if building then
3446: LD_VAR 0 6
3450: IFFALSE 3468
// PlaceHumanInUnit ( un , building ) else
3452: LD_VAR 0 10
3456: PPUSH
3457: LD_VAR 0 6
3461: PPUSH
3462: CALL_OW 52
3466: GO 3495
// PlaceUnitXYR ( un , x , y , r , false ) ;
3468: LD_VAR 0 10
3472: PPUSH
3473: LD_VAR 0 3
3477: PPUSH
3478: LD_VAR 0 4
3482: PPUSH
3483: LD_VAR 0 5
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: CALL_OW 50
// result := result ^ [ un ] ;
3495: LD_ADDR_VAR 0 7
3499: PUSH
3500: LD_VAR 0 7
3504: PUSH
3505: LD_VAR 0 10
3509: PUSH
3510: EMPTY
3511: LIST
3512: ADD
3513: ST_TO_ADDR
// end ;
3514: GO 3065
3516: POP
3517: POP
// if not global_defined then
3518: LD_LOC 3
3522: NOT
3523: IFFALSE 3601
// if ( global_units >= cl ) then
3525: LD_LOC 2
3529: PUSH
3530: LD_VAR 0 2
3534: GREATEREQUAL
3535: IFFALSE 3576
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3537: LD_ADDR_LOC 2
3541: PUSH
3542: LD_LOC 2
3546: PPUSH
3547: LD_VAR 0 2
3551: PPUSH
3552: LD_LOC 2
3556: PUSH
3557: LD_VAR 0 2
3561: ARRAY
3562: PUSH
3563: LD_VAR 0 7
3567: ADD
3568: PPUSH
3569: CALL_OW 1
3573: ST_TO_ADDR
3574: GO 3601
// global_units := Replace ( global_units , cl , result ) ;
3576: LD_ADDR_LOC 2
3580: PUSH
3581: LD_LOC 2
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: LD_VAR 0 7
3595: PPUSH
3596: CALL_OW 1
3600: ST_TO_ADDR
// end ;
3601: LD_VAR 0 7
3605: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
// uc_side := 0 ;
3610: LD_ADDR_OWVAR 20
3614: PUSH
3615: LD_INT 0
3617: ST_TO_ADDR
// uc_nation := 0 ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_INT 0
3625: ST_TO_ADDR
// vc_chassis := 31 ;
3626: LD_ADDR_OWVAR 37
3630: PUSH
3631: LD_INT 31
3633: ST_TO_ADDR
// vc_control := control_rider ;
3634: LD_ADDR_OWVAR 38
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// for i = 1 to n do
3642: LD_ADDR_VAR 0 3
3646: PUSH
3647: DOUBLE
3648: LD_INT 1
3650: DEC
3651: ST_TO_ADDR
3652: LD_VAR 0 1
3656: PUSH
3657: FOR_TO
3658: IFFALSE 3677
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3660: CALL_OW 45
3664: PPUSH
3665: LD_INT 15
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
3675: GO 3657
3677: POP
3678: POP
// end ;
3679: LD_VAR 0 2
3683: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3684: LD_INT 0
3686: PPUSH
3687: PPUSH
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// pos := Side_Positions [ side ] ;
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: LD_EXP 17
3704: PUSH
3705: LD_VAR 0 1
3709: ARRAY
3710: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3711: LD_ADDR_OWVAR 21
3715: PUSH
3716: LD_EXP 18
3720: PUSH
3721: LD_VAR 0 1
3725: ARRAY
3726: ST_TO_ADDR
// uc_side := side ;
3727: LD_ADDR_OWVAR 20
3731: PUSH
3732: LD_VAR 0 1
3736: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3737: LD_ADDR_VAR 0 4
3741: PUSH
3742: LD_EXP 21
3746: PUSH
3747: LD_VAR 0 3
3751: ARRAY
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3757: LD_ADDR_VAR 0 5
3761: PUSH
3762: LD_EXP 21
3766: PUSH
3767: LD_VAR 0 3
3771: ARRAY
3772: PUSH
3773: LD_INT 2
3775: ARRAY
3776: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_EXP 21
3786: PUSH
3787: LD_VAR 0 3
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: ST_TO_ADDR
// if is_depot then
3797: LD_EXP 3
3801: IFFALSE 3934
// begin bc_type = b_depot ;
3803: LD_ADDR_OWVAR 42
3807: PUSH
3808: LD_INT 0
3810: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3811: LD_ADDR_VAR 0 10
3815: PUSH
3816: LD_VAR 0 4
3820: PPUSH
3821: LD_VAR 0 5
3825: PPUSH
3826: LD_VAR 0 6
3830: PPUSH
3831: CALL_OW 47
3835: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3836: LD_VAR 0 10
3840: PPUSH
3841: LD_STRING @
3843: PUSH
3844: LD_VAR 0 1
3848: STR
3849: PPUSH
3850: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3854: LD_VAR 0 10
3858: PPUSH
3859: CALL_OW 274
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_EXP 8
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: PPUSH
3876: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3880: LD_VAR 0 10
3884: PPUSH
3885: CALL_OW 274
3889: PPUSH
3890: LD_INT 2
3892: PPUSH
3893: LD_EXP 8
3897: PUSH
3898: LD_INT 2
3900: ARRAY
3901: PPUSH
3902: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3906: LD_VAR 0 10
3910: PPUSH
3911: CALL_OW 274
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: LD_EXP 8
3923: PUSH
3924: LD_INT 3
3926: ARRAY
3927: PPUSH
3928: CALL_OW 277
// end else
3932: GO 4078
// begin for i := 1 to 3 do
3934: LD_ADDR_VAR 0 7
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_INT 3
3946: PUSH
3947: FOR_TO
3948: IFFALSE 4076
// begin r := starting_resources [ i ] ;
3950: LD_ADDR_VAR 0 8
3954: PUSH
3955: LD_EXP 8
3959: PUSH
3960: LD_VAR 0 7
3964: ARRAY
3965: ST_TO_ADDR
// while r >= 10 do
3966: LD_VAR 0 8
3970: PUSH
3971: LD_INT 10
3973: GREATEREQUAL
3974: IFFALSE 4074
// if r > 50 then
3976: LD_VAR 0 8
3980: PUSH
3981: LD_INT 50
3983: GREATER
3984: IFFALSE 4030
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3986: LD_VAR 0 7
3990: PPUSH
3991: LD_INT 5
3993: PPUSH
3994: LD_VAR 0 4
3998: PPUSH
3999: LD_VAR 0 5
4003: PPUSH
4004: LD_INT 4
4006: PPUSH
4007: LD_INT 0
4009: PPUSH
4010: CALL_OW 60
// r := r - 50 ;
4014: LD_ADDR_VAR 0 8
4018: PUSH
4019: LD_VAR 0 8
4023: PUSH
4024: LD_INT 50
4026: MINUS
4027: ST_TO_ADDR
// end else
4028: GO 4072
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4030: LD_VAR 0 7
4034: PPUSH
4035: LD_VAR 0 8
4039: PUSH
4040: LD_INT 10
4042: DIV
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: LD_VAR 0 5
4053: PPUSH
4054: LD_INT 4
4056: PPUSH
4057: LD_INT 0
4059: PPUSH
4060: CALL_OW 60
// r := 0 ;
4064: LD_ADDR_VAR 0 8
4068: PUSH
4069: LD_INT 0
4071: ST_TO_ADDR
// end ;
4072: GO 3966
// end ;
4074: GO 3947
4076: POP
4077: POP
// end ; for r in starting_crates do
4078: LD_ADDR_VAR 0 8
4082: PUSH
4083: LD_EXP 7
4087: PUSH
4088: FOR_IN
4089: IFFALSE 4121
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4091: LD_INT 1
4093: PPUSH
4094: LD_INT 5
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: LD_VAR 0 8
4111: PPUSH
4112: LD_INT 0
4114: PPUSH
4115: CALL_OW 60
4119: GO 4088
4121: POP
4122: POP
// if def_morale_flags then
4123: LD_EXP 42
4127: IFFALSE 4266
// begin x := start_def [ pos ] [ 1 ] ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_EXP 23
4138: PUSH
4139: LD_VAR 0 3
4143: ARRAY
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4149: LD_ADDR_VAR 0 5
4153: PUSH
4154: LD_EXP 23
4158: PUSH
4159: LD_VAR 0 3
4163: ARRAY
4164: PUSH
4165: LD_INT 2
4167: ARRAY
4168: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4169: LD_VAR 0 4
4173: PPUSH
4174: LD_VAR 0 5
4178: PPUSH
4179: LD_INT 12
4181: PPUSH
4182: LD_INT 2
4184: PPUSH
4185: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4189: LD_ADDR_EXP 28
4193: PUSH
4194: LD_EXP 28
4198: PUSH
4199: LD_VAR 0 1
4203: PPUSH
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: LD_INT 1
4216: PUSH
4217: LD_INT 100
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 2
4226: PUSH
4227: LD_INT 50
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 3
4236: PUSH
4237: LD_INT 20
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 20
4246: PUSH
4247: LD_INT 100
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 418
4264: ADD
4265: ST_TO_ADDR
// end ; commander := true ;
4266: LD_ADDR_LOC 1
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// soldiers_created := 0 ;
4274: LD_ADDR_LOC 4
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4282: LD_ADDR_VAR 0 7
4286: PUSH
4287: DOUBLE
4288: LD_INT 1
4290: DEC
4291: ST_TO_ADDR
4292: LD_EXP 4
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4451
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4300: LD_ADDR_VAR 0 4
4304: PUSH
4305: LD_EXP 22
4309: PUSH
4310: LD_VAR 0 3
4314: ARRAY
4315: PUSH
4316: LD_VAR 0 7
4320: ARRAY
4321: PUSH
4322: LD_INT 1
4324: ARRAY
4325: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4326: LD_ADDR_VAR 0 5
4330: PUSH
4331: LD_EXP 22
4335: PUSH
4336: LD_VAR 0 3
4340: ARRAY
4341: PUSH
4342: LD_VAR 0 7
4346: ARRAY
4347: PUSH
4348: LD_INT 2
4350: ARRAY
4351: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4352: LD_ADDR_VAR 0 6
4356: PUSH
4357: LD_EXP 22
4361: PUSH
4362: LD_VAR 0 3
4366: ARRAY
4367: PUSH
4368: LD_VAR 0 7
4372: ARRAY
4373: PUSH
4374: LD_INT 3
4376: ARRAY
4377: ST_TO_ADDR
// bc_type := b_breastwork ;
4378: LD_ADDR_OWVAR 42
4382: PUSH
4383: LD_INT 31
4385: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4386: LD_ADDR_VAR 0 9
4390: PUSH
4391: LD_VAR 0 4
4395: PPUSH
4396: LD_VAR 0 5
4400: PPUSH
4401: LD_VAR 0 6
4405: PPUSH
4406: CALL_OW 47
4410: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4411: LD_INT 1
4413: PPUSH
4414: LD_INT 1
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: LD_VAR 0 9
4430: PPUSH
4431: CALL 3037 0 6
// soldiers_created := soldiers_created + 1 ;
4435: LD_ADDR_LOC 4
4439: PUSH
4440: LD_LOC 4
4444: PUSH
4445: LD_INT 1
4447: PLUS
4448: ST_TO_ADDR
// end ;
4449: GO 4297
4451: POP
4452: POP
// x := start_def [ pos ] [ 1 ] ;
4453: LD_ADDR_VAR 0 4
4457: PUSH
4458: LD_EXP 23
4462: PUSH
4463: LD_VAR 0 3
4467: ARRAY
4468: PUSH
4469: LD_INT 1
4471: ARRAY
4472: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: LD_EXP 23
4482: PUSH
4483: LD_VAR 0 3
4487: ARRAY
4488: PUSH
4489: LD_INT 2
4491: ARRAY
4492: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4493: LD_LOC 8
4497: PUSH
4498: LD_EXP 4
4502: MINUS
4503: PPUSH
4504: LD_INT 1
4506: PPUSH
4507: LD_VAR 0 4
4511: PPUSH
4512: LD_VAR 0 5
4516: PPUSH
4517: LD_INT 5
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 3037 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4527: LD_LOC 5
4531: PPUSH
4532: LD_INT 2
4534: PPUSH
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_VAR 0 5
4544: PPUSH
4545: LD_INT 5
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL 3037 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4555: LD_LOC 7
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_VAR 0 4
4567: PPUSH
4568: LD_VAR 0 5
4572: PPUSH
4573: LD_INT 5
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL 3037 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4583: LD_LOC 6
4587: PPUSH
4588: LD_INT 4
4590: PPUSH
4591: LD_VAR 0 4
4595: PPUSH
4596: LD_VAR 0 5
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: LD_INT 0
4606: PPUSH
4607: CALL 3037 0 6
// if def_siberite_detection then
4611: LD_EXP 43
4615: IFFALSE 4632
// SetTech ( tech_SibDet , side , state_researched ) ;
4617: LD_INT 20
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: CALL_OW 322
// if def_siberite_bomb <> 1 then
4632: LD_EXP 46
4636: PUSH
4637: LD_INT 1
4639: NONEQUAL
4640: IFFALSE 4657
// SetTech ( tech_SibFiss , side , state_disabled ) ;
4642: LD_INT 25
4644: PPUSH
4645: LD_VAR 0 1
4649: PPUSH
4650: LD_INT 0
4652: PPUSH
4653: CALL_OW 322
// global_defined := true ;
4657: LD_ADDR_LOC 3
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// end ;
4665: LD_VAR 0 2
4669: RET
// function EnableSibFiss ; var i ; begin
4670: LD_INT 0
4672: PPUSH
4673: PPUSH
// for i := 1 to 8 do
4674: LD_ADDR_VAR 0 2
4678: PUSH
4679: DOUBLE
4680: LD_INT 1
4682: DEC
4683: ST_TO_ADDR
4684: LD_INT 8
4686: PUSH
4687: FOR_TO
4688: IFFALSE 4719
// if Side_Positions [ i ] then
4690: LD_EXP 17
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: IFFALSE 4717
// SetTech ( tech_SibFiss , i , state_enabled ) ;
4702: LD_INT 25
4704: PPUSH
4705: LD_VAR 0 2
4709: PPUSH
4710: LD_INT 1
4712: PPUSH
4713: CALL_OW 322
4717: GO 4687
4719: POP
4720: POP
// end ;
4721: LD_VAR 0 1
4725: RET
// every 30 30$0 do
4726: GO 4728
4728: DISABLE
// if ( def_siberite_bomb = 2 ) then
4729: LD_EXP 46
4733: PUSH
4734: LD_INT 2
4736: EQUAL
4737: IFFALSE 4743
// EnableSibFiss ;
4739: CALL 4670 0 0
4743: END
// every 60 60$0 do
4744: GO 4746
4746: DISABLE
// if ( def_siberite_bomb = 3 ) then
4747: LD_EXP 46
4751: PUSH
4752: LD_INT 3
4754: EQUAL
4755: IFFALSE 4761
// EnableSibFiss ;
4757: CALL 4670 0 0
4761: END
// every 90 90$0 do
4762: GO 4764
4764: DISABLE
// if ( def_siberite_bomb = 4 ) then
4765: LD_EXP 46
4769: PUSH
4770: LD_INT 4
4772: EQUAL
4773: IFFALSE 4779
// EnableSibFiss ;
4775: CALL 4670 0 0
4779: END
// every 120 120$0 do
4780: GO 4782
4782: DISABLE
// if ( def_siberite_bomb = 5 ) then
4783: LD_EXP 46
4787: PUSH
4788: LD_INT 5
4790: EQUAL
4791: IFFALSE 4797
// EnableSibFiss ;
4793: CALL 4670 0 0
4797: END
// function prepare_sides ; var i ; begin
4798: LD_INT 0
4800: PPUSH
4801: PPUSH
// global_units := [ ] ;
4802: LD_ADDR_LOC 2
4806: PUSH
4807: EMPTY
4808: ST_TO_ADDR
// global_defined := false ;
4809: LD_ADDR_LOC 3
4813: PUSH
4814: LD_INT 0
4816: ST_TO_ADDR
// CountClassMembers ;
4817: CALL 4896 0 0
// for i := 1 to 8 do
4821: LD_ADDR_VAR 0 2
4825: PUSH
4826: DOUBLE
4827: LD_INT 1
4829: DEC
4830: ST_TO_ADDR
4831: LD_INT 8
4833: PUSH
4834: FOR_TO
4835: IFFALSE 4889
// if Side_Positions [ i ] then
4837: LD_EXP 17
4841: PUSH
4842: LD_VAR 0 2
4846: ARRAY
4847: IFFALSE 4887
// begin prepare_side ( i ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: CALL 3684 0 1
// if ( Game_Type = 12 ) and mastodont > 0 then
4858: LD_EXP 32
4862: PUSH
4863: LD_INT 12
4865: EQUAL
4866: PUSH
4867: LD_EXP 30
4871: PUSH
4872: LD_INT 0
4874: GREATER
4875: AND
4876: IFFALSE 4887
// prepare_mastodonts ( mastodont ) ;
4878: LD_EXP 30
4882: PPUSH
4883: CALL 3606 0 1
// end ;
4887: GO 4834
4889: POP
4890: POP
// end ;
4891: LD_VAR 0 1
4895: RET
// function CountClassMembers ; var Mode ; begin
4896: LD_INT 0
4898: PPUSH
4899: PPUSH
// if No_Mechs then
4900: LD_EXP 50
4904: IFFALSE 4916
// Mode := 2 else
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: LD_INT 2
4913: ST_TO_ADDR
4914: GO 4924
// Mode := 1 ;
4916: LD_ADDR_VAR 0 2
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// neng := number_of_people ;
4924: LD_ADDR_LOC 5
4928: PUSH
4929: LD_EXP 5
4933: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4934: LD_ADDR_LOC 8
4938: PUSH
4939: LD_LOC 5
4943: PUSH
4944: LD_INT 4
4946: PUSH
4947: LD_INT 3
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_VAR 0 2
4958: ARRAY
4959: DIV
4960: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4961: LD_LOC 8
4965: PUSH
4966: LD_EXP 4
4970: LESS
4971: IFFALSE 4983
// nsol := number_of_breastworks ;
4973: LD_ADDR_LOC 8
4977: PUSH
4978: LD_EXP 4
4982: ST_TO_ADDR
// neng := neng - nsol ;
4983: LD_ADDR_LOC 5
4987: PUSH
4988: LD_LOC 5
4992: PUSH
4993: LD_LOC 8
4997: MINUS
4998: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4999: LD_ADDR_LOC 6
5003: PUSH
5004: LD_LOC 5
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: LD_INT 2
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_VAR 0 2
5023: ARRAY
5024: DIV
5025: ST_TO_ADDR
// if ( nsci < 1 ) then
5026: LD_LOC 6
5030: PUSH
5031: LD_INT 1
5033: LESS
5034: IFFALSE 5044
// nsci := 1 ;
5036: LD_ADDR_LOC 6
5040: PUSH
5041: LD_INT 1
5043: ST_TO_ADDR
// neng := neng - nsci ;
5044: LD_ADDR_LOC 5
5048: PUSH
5049: LD_LOC 5
5053: PUSH
5054: LD_LOC 6
5058: MINUS
5059: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5060: LD_ADDR_LOC 7
5064: PUSH
5065: LD_LOC 5
5069: PUSH
5070: LD_INT 2
5072: DIV
5073: PUSH
5074: LD_INT 0
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_VAR 0 2
5085: ARRAY
5086: ST_TO_ADDR
// neng := neng - nmech ;
5087: LD_ADDR_LOC 5
5091: PUSH
5092: LD_LOC 5
5096: PUSH
5097: LD_LOC 7
5101: MINUS
5102: ST_TO_ADDR
// if ( neng < 1 ) then
5103: LD_LOC 5
5107: PUSH
5108: LD_INT 1
5110: LESS
5111: IFFALSE 5121
// neng := 1 ;
5113: LD_ADDR_LOC 5
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// end ;
5121: LD_VAR 0 1
5125: RET
// function Init_Win_Condition ; begin
5126: LD_INT 0
5128: PPUSH
// if Team_Game then
5129: LD_EXP 19
5133: IFFALSE 5140
// enable ( 98 ) else
5135: LD_INT 98
5137: ENABLE_MARKED
5138: GO 5143
// enable ( 99 ) ;
5140: LD_INT 99
5142: ENABLE_MARKED
// case Game_Type of 3 :
5143: LD_EXP 32
5147: PUSH
5148: LD_INT 3
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5162
5156: POP
// enable ( 100 ) ; end ;
5157: LD_INT 100
5159: ENABLE_MARKED
5160: GO 5163
5162: POP
// end ;
5163: LD_VAR 0 1
5167: RET
// starting begin disable ( 98 ) ;
5168: LD_INT 98
5170: DISABLE_MARKED
// disable ( 99 ) ;
5171: LD_INT 99
5173: DISABLE_MARKED
// disable ( 100 ) ;
5174: LD_INT 100
5176: DISABLE_MARKED
// disable ( 200 ) ;
5177: LD_INT 200
5179: DISABLE_MARKED
// disable ( 400 ) ;
5180: LD_INT 400
5182: DISABLE_MARKED
// disable ( 401 ) ;
5183: LD_INT 401
5185: DISABLE_MARKED
// disable ( 600 ) ;
5186: LD_INT 600
5188: DISABLE_MARKED
// mp_selectmsg := true ;
5189: LD_ADDR_OWVAR 13
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5197: CALL 0 0 0
// init_map ;
5201: CALL 1646 0 0
// init_respawning ;
5205: CALL 6146 0 0
// set_shared_visions_and_alliances ;
5209: CALL 2749 0 0
// prepare_sides ;
5213: CALL 4798 0 0
// InitLimits ;
5217: CALL 12175 0 0
// ShowTimer ;
5221: CALL 13112 0 0
// if ( Game_Type = 4 ) then
5225: LD_EXP 32
5229: PUSH
5230: LD_INT 4
5232: EQUAL
5233: IFFALSE 5239
// InitBloodGods ;
5235: CALL 9717 0 0
// music_nat := Side_Nations [ your_side ] ;
5239: LD_ADDR_OWVAR 71
5243: PUSH
5244: LD_EXP 18
5248: PUSH
5249: LD_OWVAR 2
5253: ARRAY
5254: ST_TO_ADDR
// if IAmSpec then
5255: CALL_OW 531
5259: IFFALSE 5295
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5261: LD_INT 0
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: LD_OWVAR 2
5271: PPUSH
5272: LD_INT 32767
5274: NEG
5275: PPUSH
5276: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5280: LD_INT 104
5282: PPUSH
5283: LD_INT 69
5285: PPUSH
5286: CALL_OW 86
// enable ( 400 ) ;
5290: LD_INT 400
5292: ENABLE_MARKED
// end else
5293: GO 5349
// begin ResetFog ;
5295: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5299: LD_EXP 23
5303: PUSH
5304: LD_EXP 17
5308: PUSH
5309: LD_OWVAR 2
5313: ARRAY
5314: ARRAY
5315: PUSH
5316: LD_INT 1
5318: ARRAY
5319: PPUSH
5320: LD_EXP 23
5324: PUSH
5325: LD_EXP 17
5329: PUSH
5330: LD_OWVAR 2
5334: ARRAY
5335: ARRAY
5336: PUSH
5337: LD_INT 2
5339: ARRAY
5340: PPUSH
5341: CALL_OW 86
// Init_Win_Condition ;
5345: CALL 5126 0 0
// end ; if def_builduptime then
5349: LD_EXP 47
5353: IFFALSE 5359
// BeginBuildUp ;
5355: CALL 8321 0 0
// end ; end_of_file
5359: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5360: GO 5362
5362: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5363: LD_INT 4
5365: PPUSH
5366: LD_INT 5
5368: PPUSH
5369: CALL_OW 12
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 57
// enable ;
5381: ENABLE
// end ;
5382: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5383: GO 5385
5385: DISABLE
5386: LD_INT 0
5388: PPUSH
5389: PPUSH
// begin case tick of 1 .. 1 1$0 :
5390: LD_OWVAR 1
5394: PUSH
5395: LD_INT 1
5397: DOUBLE
5398: GREATEREQUAL
5399: IFFALSE 5407
5401: LD_INT 2100
5403: DOUBLE
5404: LESSEQUAL
5405: IFTRUE 5409
5407: GO 5437
5409: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5410: LD_EXP 9
5414: PUSH
5415: LD_INT 100
5417: DIVREAL
5418: PUSH
5419: LD_INT 350
5421: PPUSH
5422: LD_INT 1050
5424: PPUSH
5425: CALL_OW 12
5429: MUL
5430: PPUSH
5431: CALL_OW 67
5435: GO 5739
5437: LD_INT 2100
5439: PUSH
5440: LD_INT 1
5442: PLUS
5443: DOUBLE
5444: GREATEREQUAL
5445: IFFALSE 5453
5447: LD_INT 10500
5449: DOUBLE
5450: LESSEQUAL
5451: IFTRUE 5455
5453: GO 5483
5455: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5456: LD_EXP 9
5460: PUSH
5461: LD_INT 100
5463: DIVREAL
5464: PUSH
5465: LD_INT 1050
5467: PPUSH
5468: LD_INT 1575
5470: PPUSH
5471: CALL_OW 12
5475: MUL
5476: PPUSH
5477: CALL_OW 67
5481: GO 5739
5483: LD_INT 10500
5485: PUSH
5486: LD_INT 1
5488: PLUS
5489: DOUBLE
5490: GREATEREQUAL
5491: IFFALSE 5499
5493: LD_INT 21000
5495: DOUBLE
5496: LESSEQUAL
5497: IFTRUE 5501
5499: GO 5529
5501: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5502: LD_EXP 9
5506: PUSH
5507: LD_INT 100
5509: DIVREAL
5510: PUSH
5511: LD_INT 1575
5513: PPUSH
5514: LD_INT 2100
5516: PPUSH
5517: CALL_OW 12
5521: MUL
5522: PPUSH
5523: CALL_OW 67
5527: GO 5739
5529: LD_INT 21000
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: DOUBLE
5536: GREATEREQUAL
5537: IFFALSE 5545
5539: LD_INT 42000
5541: DOUBLE
5542: LESSEQUAL
5543: IFTRUE 5547
5545: GO 5575
5547: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5548: LD_EXP 9
5552: PUSH
5553: LD_INT 100
5555: DIVREAL
5556: PUSH
5557: LD_INT 2100
5559: PPUSH
5560: LD_INT 2625
5562: PPUSH
5563: CALL_OW 12
5567: MUL
5568: PPUSH
5569: CALL_OW 67
5573: GO 5739
5575: LD_INT 42000
5577: PUSH
5578: LD_INT 1
5580: PLUS
5581: DOUBLE
5582: GREATEREQUAL
5583: IFFALSE 5591
5585: LD_INT 63000
5587: DOUBLE
5588: LESSEQUAL
5589: IFTRUE 5593
5591: GO 5621
5593: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5594: LD_EXP 9
5598: PUSH
5599: LD_INT 100
5601: DIVREAL
5602: PUSH
5603: LD_INT 2625
5605: PPUSH
5606: LD_INT 3150
5608: PPUSH
5609: CALL_OW 12
5613: MUL
5614: PPUSH
5615: CALL_OW 67
5619: GO 5739
5621: LD_INT 63000
5623: PUSH
5624: LD_INT 1
5626: PLUS
5627: DOUBLE
5628: GREATEREQUAL
5629: IFFALSE 5637
5631: LD_INT 105000
5633: DOUBLE
5634: LESSEQUAL
5635: IFTRUE 5639
5637: GO 5667
5639: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5640: LD_EXP 9
5644: PUSH
5645: LD_INT 100
5647: DIVREAL
5648: PUSH
5649: LD_INT 3150
5651: PPUSH
5652: LD_INT 3675
5654: PPUSH
5655: CALL_OW 12
5659: MUL
5660: PPUSH
5661: CALL_OW 67
5665: GO 5739
5667: LD_INT 105000
5669: PUSH
5670: LD_INT 1
5672: PLUS
5673: DOUBLE
5674: GREATEREQUAL
5675: IFFALSE 5683
5677: LD_INT 630000
5679: DOUBLE
5680: LESSEQUAL
5681: IFTRUE 5685
5683: GO 5713
5685: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5686: LD_EXP 9
5690: PUSH
5691: LD_INT 100
5693: DIVREAL
5694: PUSH
5695: LD_INT 3675
5697: PPUSH
5698: LD_INT 4200
5700: PPUSH
5701: CALL_OW 12
5705: MUL
5706: PPUSH
5707: CALL_OW 67
5711: GO 5739
5713: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5714: LD_EXP 9
5718: PUSH
5719: LD_INT 100
5721: DIVREAL
5722: PUSH
5723: LD_INT 4200
5725: PPUSH
5726: LD_INT 5250
5728: PPUSH
5729: CALL_OW 12
5733: MUL
5734: PPUSH
5735: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_INT 5
5749: PPUSH
5750: CALL_OW 12
5754: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5755: LD_ADDR_VAR 0 1
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_INT 0
5767: PUSH
5768: EMPTY
5769: LIST
5770: DIFF
5771: PUSH
5772: FOR_IN
5773: IFFALSE 5822
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_EXP 23
5784: PUSH
5785: LD_VAR 0 1
5789: ARRAY
5790: PUSH
5791: LD_INT 1
5793: ARRAY
5794: PPUSH
5795: LD_EXP 23
5799: PUSH
5800: LD_VAR 0 1
5804: ARRAY
5805: PUSH
5806: LD_INT 2
5808: ARRAY
5809: PPUSH
5810: LD_INT 20
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 56
5820: GO 5772
5822: POP
5823: POP
// enable ;
5824: ENABLE
// end ; end_of_file
5825: PPOPN 2
5827: END
// function apeman_init ; begin
5828: LD_INT 0
5830: PPUSH
// uc_side := 0 ;
5831: LD_ADDR_OWVAR 20
5835: PUSH
5836: LD_INT 0
5838: ST_TO_ADDR
// uc_nation := nation_nature ;
5839: LD_ADDR_OWVAR 21
5843: PUSH
5844: LD_INT 0
5846: ST_TO_ADDR
// hc_class := class_apeman ;
5847: LD_ADDR_OWVAR 28
5851: PUSH
5852: LD_INT 12
5854: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 1 , 1 ] ;
5855: LD_ADDR_OWVAR 30
5859: PUSH
5860: LD_INT 1
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: LD_INT 1
5868: PUSH
5869: LD_INT 1
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
5878: LD_ADDR_OWVAR 31
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: LD_INT 1
5888: PUSH
5889: LD_INT 1
5891: PUSH
5892: LD_INT 1
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5901: LD_ADDR_OWVAR 29
5905: PUSH
5906: LD_INT 10
5908: PUSH
5909: LD_INT 12
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: ST_TO_ADDR
// hc_sex := sex_male ;
5916: LD_ADDR_OWVAR 27
5920: PUSH
5921: LD_INT 1
5923: ST_TO_ADDR
// hc_importance := 0 ;
5924: LD_ADDR_OWVAR 32
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5932: LD_ADDR_OWVAR 35
5936: PUSH
5937: LD_INT 20
5939: NEG
5940: PPUSH
5941: LD_INT 20
5943: PPUSH
5944: CALL_OW 12
5948: ST_TO_ADDR
// end ;
5949: LD_VAR 0 1
5953: RET
// function prepare_apemen ; var i , j , un , ape , first , d1 , d2 ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
5963: PPUSH
// if not amount_of_apemen then
5964: LD_EXP 11
5968: NOT
5969: IFFALSE 5973
// exit ;
5971: GO 6133
// ape := 0 ;
5973: LD_ADDR_VAR 0 5
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// repeat Wait ( ( ape + 1 ) * Rand ( 0 0$10 , 1 1$0 ) ) ;
5981: LD_VAR 0 5
5985: PUSH
5986: LD_INT 1
5988: PLUS
5989: PUSH
5990: LD_INT 350
5992: PPUSH
5993: LD_INT 2100
5995: PPUSH
5996: CALL_OW 12
6000: MUL
6001: PPUSH
6002: CALL_OW 67
// apeman_init ;
6006: CALL 5828 0 0
// PlaceUnitArea ( CreateHuman , Base1ApeArea , false ) ;
6010: CALL_OW 44
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_INT 0
6020: PPUSH
6021: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base2ApeArea , false ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 2
6032: PPUSH
6033: LD_INT 0
6035: PPUSH
6036: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base3ApeArea , false ) ;
6040: CALL_OW 44
6044: PPUSH
6045: LD_INT 3
6047: PPUSH
6048: LD_INT 0
6050: PPUSH
6051: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base4ApeArea , false ) ;
6055: CALL_OW 44
6059: PPUSH
6060: LD_INT 4
6062: PPUSH
6063: LD_INT 0
6065: PPUSH
6066: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base5ApeArea , false ) ;
6070: CALL_OW 44
6074: PPUSH
6075: LD_INT 5
6077: PPUSH
6078: LD_INT 0
6080: PPUSH
6081: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base6ApeArea , false ) ;
6085: CALL_OW 44
6089: PPUSH
6090: LD_INT 6
6092: PPUSH
6093: LD_INT 0
6095: PPUSH
6096: CALL_OW 49
// Wait ( 3 ) ;
6100: LD_INT 3
6102: PPUSH
6103: CALL_OW 67
// ape := ape + 1 ;
6107: LD_ADDR_VAR 0 5
6111: PUSH
6112: LD_VAR 0 5
6116: PUSH
6117: LD_INT 1
6119: PLUS
6120: ST_TO_ADDR
// until ape >= amount_of_apemen ;
6121: LD_VAR 0 5
6125: PUSH
6126: LD_EXP 11
6130: GREATEREQUAL
6131: IFFALSE 5981
// end ;
6133: LD_VAR 0 1
6137: RET
// every 0 0$15 do
6138: GO 6140
6140: DISABLE
// begin prepare_apemen ;
6141: CALL 5954 0 0
// end ; end_of_file
6145: END
// var respawn , inqueue ; export function init_respawning ; begin
6146: LD_INT 0
6148: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6149: LD_ADDR_LOC 9
6153: PUSH
6154: LD_INT 1
6156: PPUSH
6157: LD_INT 8
6159: PPUSH
6160: CALL_OW 12
6164: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6165: LD_ADDR_LOC 10
6169: PUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 0
6175: PUSH
6176: LD_INT 0
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: LD_INT 0
6190: PUSH
6191: LD_INT 0
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 1
6208: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6209: GO 6211
6211: DISABLE
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
6216: PPUSH
// begin if respawning_time_max = 0 then
6217: LD_EXP 14
6221: PUSH
6222: LD_INT 0
6224: EQUAL
6225: IFFALSE 6229
// exit ;
6227: GO 6634
// if respawn = 8 then
6229: LD_LOC 9
6233: PUSH
6234: LD_INT 8
6236: EQUAL
6237: IFFALSE 6249
// respawn := 1 else
6239: LD_ADDR_LOC 9
6243: PUSH
6244: LD_INT 1
6246: ST_TO_ADDR
6247: GO 6263
// respawn := respawn + 1 ;
6249: LD_ADDR_LOC 9
6253: PUSH
6254: LD_LOC 9
6258: PUSH
6259: LD_INT 1
6261: PLUS
6262: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6263: LD_EXP 17
6267: PUSH
6268: LD_LOC 9
6272: ARRAY
6273: PUSH
6274: LD_LOC 10
6278: PUSH
6279: LD_LOC 9
6283: ARRAY
6284: NOT
6285: AND
6286: IFFALSE 6633
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6288: LD_ADDR_VAR 0 1
6292: PUSH
6293: LD_INT 21
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 22
6305: PUSH
6306: LD_LOC 9
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 3
6317: PUSH
6318: LD_INT 23
6320: PUSH
6321: LD_INT 0
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PPUSH
6334: CALL_OW 69
6338: ST_TO_ADDR
// if n < number_of_people then
6339: LD_VAR 0 1
6343: PUSH
6344: LD_EXP 5
6348: LESS
6349: IFFALSE 6630
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_INT 21
6358: PUSH
6359: LD_INT 3
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 2
6368: PUSH
6369: LD_INT 30
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 30
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 50
6396: PUSH
6397: EMPTY
6398: LIST
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_LOC 9
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: ST_TO_ADDR
// if dep then
6423: LD_VAR 0 2
6427: IFFALSE 6627
// begin aktresp := respawn ;
6429: LD_ADDR_VAR 0 3
6433: PUSH
6434: LD_LOC 9
6438: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6439: LD_ADDR_LOC 10
6443: PUSH
6444: LD_LOC 10
6448: PPUSH
6449: LD_VAR 0 3
6453: PPUSH
6454: LD_INT 1
6456: PPUSH
6457: CALL_OW 1
6461: ST_TO_ADDR
// enable ;
6462: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6463: LD_EXP 13
6467: PPUSH
6468: LD_EXP 14
6472: PPUSH
6473: CALL_OW 12
6477: PPUSH
6478: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6482: LD_ADDR_LOC 10
6486: PUSH
6487: LD_LOC 10
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL_OW 1
6504: ST_TO_ADDR
// hc_name :=  ;
6505: LD_ADDR_OWVAR 26
6509: PUSH
6510: LD_STRING 
6512: ST_TO_ADDR
// hc_importance := 0 ;
6513: LD_ADDR_OWVAR 32
6517: PUSH
6518: LD_INT 0
6520: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 0
6526: PPUSH
6527: LD_EXP 6
6531: PUSH
6532: LD_INT 2
6534: DIV
6535: PPUSH
6536: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6540: LD_ADDR_OWVAR 21
6544: PUSH
6545: LD_EXP 18
6549: PUSH
6550: LD_VAR 0 3
6554: ARRAY
6555: ST_TO_ADDR
// uc_side := aktresp ;
6556: LD_ADDR_OWVAR 20
6560: PUSH
6561: LD_VAR 0 3
6565: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: LD_VAR 0 2
6575: PUSH
6576: LD_INT 1
6578: PPUSH
6579: LD_VAR 0 2
6583: PPUSH
6584: CALL_OW 12
6588: ARRAY
6589: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
6590: CALL_OW 44
6594: PPUSH
6595: LD_VAR 0 2
6599: PPUSH
6600: CALL_OW 250
6604: PPUSH
6605: LD_VAR 0 2
6609: PPUSH
6610: CALL_OW 251
6614: PPUSH
6615: LD_INT 7
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: CALL_OW 50
// end else
6625: GO 6628
// enable ;
6627: ENABLE
// end else
6628: GO 6631
// enable ;
6630: ENABLE
// end else
6631: GO 6634
// enable ;
6633: ENABLE
// end ; end_of_file
6634: PPOPN 3
6636: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 266
6646: PUSH
6647: LD_INT 0
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: IN
6657: IFFALSE 6682
// SetBName ( b , @ & GetSide ( b ) ) ;
6659: LD_VAR 0 1
6663: PPUSH
6664: LD_STRING @
6666: PUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 255
6676: STR
6677: PPUSH
6678: CALL_OW 500
// if def_game_rules then
6682: LD_EXP 33
6686: IFFALSE 6723
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6688: LD_VAR 0 1
6692: PPUSH
6693: LD_VAR 0 1
6697: PPUSH
6698: CALL_OW 266
6702: PPUSH
6703: LD_VAR 0 1
6707: PPUSH
6708: CALL_OW 255
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: LD_INT 1
6718: PPUSH
6719: CALL 12576 0 5
// end ;
6723: PPOPN 2
6725: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6726: LD_VAR 0 1
6730: PPUSH
6731: CALL_OW 266
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: IN
6746: IFFALSE 6771
// SetBName ( b , @ & GetSide ( b ) ) ;
6748: LD_VAR 0 1
6752: PPUSH
6753: LD_STRING @
6755: PUSH
6756: LD_VAR 0 1
6760: PPUSH
6761: CALL_OW 255
6765: STR
6766: PPUSH
6767: CALL_OW 500
// if def_game_rules then
6771: LD_EXP 33
6775: IFFALSE 6814
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6777: LD_VAR 0 1
6781: PPUSH
6782: LD_VAR 0 1
6786: PPUSH
6787: CALL_OW 266
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 255
6801: PPUSH
6802: LD_VAR 0 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: CALL 12576 0 5
// end ;
6814: PPOPN 3
6816: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6817: LD_INT 0
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
// begin if GetBType ( j ) in [ b_depot , b_warehouse ] then
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 266
6832: PUSH
6833: LD_INT 0
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: IN
6843: IFFALSE 6925
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6845: LD_ADDR_VAR 0 4
6849: PUSH
6850: LD_EXP 17
6854: PUSH
6855: LD_VAR 0 1
6859: PPUSH
6860: CALL_OW 255
6864: ARRAY
6865: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_EXP 23
6875: PUSH
6876: LD_VAR 0 4
6880: ARRAY
6881: PUSH
6882: LD_INT 1
6884: ARRAY
6885: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6886: LD_ADDR_VAR 0 3
6890: PUSH
6891: LD_EXP 23
6895: PUSH
6896: LD_VAR 0 4
6900: ARRAY
6901: PUSH
6902: LD_INT 2
6904: ARRAY
6905: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6906: LD_VAR 0 2
6910: PPUSH
6911: LD_VAR 0 3
6915: PPUSH
6916: CALL_OW 420
6920: PPUSH
6921: CALL_OW 419
// end ; if def_game_rules then
6925: LD_EXP 33
6929: IFFALSE 7028
// if ( GetType ( j ) = 3 ) then
6931: LD_VAR 0 1
6935: PPUSH
6936: CALL_OW 247
6940: PUSH
6941: LD_INT 3
6943: EQUAL
6944: IFFALSE 6984
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6946: LD_VAR 0 1
6950: PPUSH
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 266
6960: PPUSH
6961: LD_VAR 0 1
6965: PPUSH
6966: CALL_OW 255
6970: PPUSH
6971: LD_INT 0
6973: PPUSH
6974: LD_INT 1
6976: NEG
6977: PPUSH
6978: CALL 12576 0 5
6982: GO 7028
// if ( GetChassis ( j ) = 25 ) then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 265
6993: PUSH
6994: LD_INT 25
6996: EQUAL
6997: IFFALSE 7028
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6999: LD_VAR 0 1
7003: PPUSH
7004: LD_INT 37
7006: PPUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 255
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: LD_INT 1
7022: NEG
7023: PPUSH
7024: CALL 12576 0 5
// end ;
7028: PPOPN 5
7030: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7031: LD_EXP 33
7035: PUSH
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 265
7045: PUSH
7046: LD_INT 25
7048: EQUAL
7049: AND
7050: IFFALSE 7082
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_INT 37
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 255
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: LD_INT 1
7077: PPUSH
7078: CALL 12576 0 5
// end ; end_of_file
7082: PPOPN 4
7084: END
// function CanWinLoose ; begin
7085: LD_INT 0
7087: PPUSH
// Result := true ;
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_INT 1
7095: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7096: CALL_OW 518
7100: PUSH
7101: CALL_OW 519
7105: PUSH
7106: LD_INT 0
7108: GREATER
7109: AND
7110: IFFALSE 7120
// Result := false ;
7112: LD_ADDR_VAR 0 1
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7120: CALL_OW 531
7124: PUSH
7125: CALL_OW 519
7129: PUSH
7130: LD_INT 1
7132: GREATER
7133: AND
7134: IFFALSE 7144
// Result := false ;
7136: LD_ADDR_VAR 0 1
7140: PUSH
7141: LD_INT 0
7143: ST_TO_ADDR
// end ;
7144: LD_VAR 0 1
7148: RET
// function HasPower ( i ) ; begin
7149: LD_INT 0
7151: PPUSH
// if def_people_respawning then
7152: LD_EXP 44
7156: IFFALSE 7247
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7158: LD_ADDR_VAR 0 2
7162: PUSH
7163: LD_INT 22
7165: PUSH
7166: LD_VAR 0 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 1
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 33
7190: PUSH
7191: LD_INT 3
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 33
7200: PUSH
7201: LD_INT 5
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 30
7210: PUSH
7211: LD_INT 0
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 30
7220: PUSH
7221: LD_INT 1
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: ST_TO_ADDR
7245: GO 7312
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7247: LD_ADDR_VAR 0 2
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_VAR 0 1
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 33
7279: PUSH
7280: LD_INT 3
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 33
7289: PUSH
7290: LD_INT 5
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 69
7311: ST_TO_ADDR
// end ;
7312: LD_VAR 0 2
7316: RET
// function AlliedSides ( i , j ) ; begin
7317: LD_INT 0
7319: PPUSH
// Result := false ;
7320: LD_ADDR_VAR 0 3
7324: PUSH
7325: LD_INT 0
7327: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7328: LD_VAR 0 1
7332: PPUSH
7333: LD_VAR 0 2
7337: PPUSH
7338: CALL_OW 81
7342: PUSH
7343: LD_INT 1
7345: EQUAL
7346: PUSH
7347: LD_VAR 0 2
7351: PPUSH
7352: LD_VAR 0 1
7356: PPUSH
7357: CALL_OW 81
7361: PUSH
7362: LD_INT 1
7364: EQUAL
7365: AND
7366: PUSH
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 83
7376: AND
7377: PUSH
7378: LD_VAR 0 2
7382: PPUSH
7383: CALL_OW 83
7387: AND
7388: IFFALSE 7398
// Result := true ;
7390: LD_ADDR_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7403: CALL 7085 0 0
7407: IFFALSE 7416
7409: GO 7411
7411: DISABLE
// YouLostInMultiplayer ;
7412: CALL_OW 107
7416: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7417: CALL 7085 0 0
7421: IFFALSE 7430
7423: GO 7425
7425: DISABLE
// YouWinInMultiplayer ;
7426: CALL_OW 106
7430: END
// every 0 0$3 marked 98 do var i , CanWin ;
7431: GO 7433
7433: DISABLE
7434: LD_INT 0
7436: PPUSH
7437: PPUSH
// begin if not HasPower ( your_side ) then
7438: LD_OWVAR 2
7442: PPUSH
7443: CALL 7149 0 1
7447: NOT
7448: IFFALSE 7459
// begin Multiplayer_Loose_Message ;
7450: CALL_OW 521
// enable ( 400 ) ;
7454: LD_INT 400
7456: ENABLE_MARKED
// end else
7457: GO 7592
// begin CanWin := true ;
7459: LD_ADDR_VAR 0 2
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// for i := 1 to 8 do
7467: LD_ADDR_VAR 0 1
7471: PUSH
7472: DOUBLE
7473: LD_INT 1
7475: DEC
7476: ST_TO_ADDR
7477: LD_INT 8
7479: PUSH
7480: FOR_TO
7481: IFFALSE 7578
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7483: LD_EXP 17
7487: PUSH
7488: LD_VAR 0 1
7492: ARRAY
7493: PUSH
7494: LD_VAR 0 1
7498: PPUSH
7499: CALL_OW 108
7503: AND
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: LD_OWVAR 2
7514: NONEQUAL
7515: AND
7516: IFFALSE 7576
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7518: LD_EXP 15
7522: PUSH
7523: LD_VAR 0 1
7527: ARRAY
7528: NOT
7529: PUSH
7530: LD_EXP 15
7534: PUSH
7535: LD_VAR 0 1
7539: ARRAY
7540: PUSH
7541: LD_EXP 15
7545: PUSH
7546: LD_OWVAR 2
7550: ARRAY
7551: NONEQUAL
7552: OR
7553: IFFALSE 7576
// if HasPower ( i ) then
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL 7149 0 1
7564: IFFALSE 7576
// begin CanWin := false ;
7566: LD_ADDR_VAR 0 2
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// break ;
7574: GO 7578
// end ;
7576: GO 7480
7578: POP
7579: POP
// if CanWin then
7580: LD_VAR 0 2
7584: IFFALSE 7591
// enable ( 401 ) else
7586: LD_INT 401
7588: ENABLE_MARKED
7589: GO 7592
// enable ;
7591: ENABLE
// end ; end ;
7592: PPOPN 2
7594: END
// every 0 0$3 marked 99 do var i , CanWin ;
7595: GO 7597
7597: DISABLE
7598: LD_INT 0
7600: PPUSH
7601: PPUSH
// begin if not HasPower ( your_side ) then
7602: LD_OWVAR 2
7606: PPUSH
7607: CALL 7149 0 1
7611: NOT
7612: IFFALSE 7623
// begin Multiplayer_Loose_Message ;
7614: CALL_OW 521
// enable ( 400 ) ;
7618: LD_INT 400
7620: ENABLE_MARKED
// end else
7621: GO 7736
// begin CanWin := true ;
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 1
7630: ST_TO_ADDR
// for i := 1 to 8 do
7631: LD_ADDR_VAR 0 1
7635: PUSH
7636: DOUBLE
7637: LD_INT 1
7639: DEC
7640: ST_TO_ADDR
7641: LD_INT 8
7643: PUSH
7644: FOR_TO
7645: IFFALSE 7722
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7647: LD_EXP 17
7651: PUSH
7652: LD_VAR 0 1
7656: ARRAY
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 108
7667: AND
7668: PUSH
7669: LD_VAR 0 1
7673: PUSH
7674: LD_OWVAR 2
7678: NONEQUAL
7679: AND
7680: IFFALSE 7720
// if not AlliedSides ( i , your_side ) then
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_OWVAR 2
7691: PPUSH
7692: CALL 7317 0 2
7696: NOT
7697: IFFALSE 7720
// if HasPower ( i ) then
7699: LD_VAR 0 1
7703: PPUSH
7704: CALL 7149 0 1
7708: IFFALSE 7720
// begin CanWin := false ;
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// break ;
7718: GO 7722
// end ;
7720: GO 7644
7722: POP
7723: POP
// if CanWin then
7724: LD_VAR 0 2
7728: IFFALSE 7735
// enable ( 401 ) else
7730: LD_INT 401
7732: ENABLE_MARKED
7733: GO 7736
// enable ;
7735: ENABLE
// end ; end ; end_of_file
7736: PPOPN 2
7738: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7739: GO 7741
7741: DISABLE
7742: LD_INT 0
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// begin sib_mined := [ ] ;
7749: LD_ADDR_VAR 0 5
7753: PUSH
7754: EMPTY
7755: ST_TO_ADDR
// for i := 1 to 8 do
7756: LD_ADDR_VAR 0 1
7760: PUSH
7761: DOUBLE
7762: LD_INT 1
7764: DEC
7765: ST_TO_ADDR
7766: LD_INT 8
7768: PUSH
7769: FOR_TO
7770: IFFALSE 7926
// if Side_Positions [ i ] then
7772: LD_EXP 17
7776: PUSH
7777: LD_VAR 0 1
7781: ARRAY
7782: IFFALSE 7910
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7784: LD_ADDR_VAR 0 4
7788: PUSH
7789: LD_INT 22
7791: PUSH
7792: LD_VAR 0 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 2
7803: PUSH
7804: LD_INT 30
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 30
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 69
7837: ST_TO_ADDR
// pom := 0 ;
7838: LD_ADDR_VAR 0 3
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// for base in filter do
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_VAR 0 4
7855: PUSH
7856: FOR_IN
7857: IFFALSE 7890
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7859: LD_ADDR_VAR 0 3
7863: PUSH
7864: LD_VAR 0 3
7868: PUSH
7869: LD_VAR 0 2
7873: PPUSH
7874: CALL_OW 274
7878: PPUSH
7879: LD_INT 3
7881: PPUSH
7882: CALL_OW 275
7886: PLUS
7887: ST_TO_ADDR
7888: GO 7856
7890: POP
7891: POP
// sib_mined := sib_mined ^ pom ;
7892: LD_ADDR_VAR 0 5
7896: PUSH
7897: LD_VAR 0 5
7901: PUSH
7902: LD_VAR 0 3
7906: ADD
7907: ST_TO_ADDR
// end else
7908: GO 7924
// sib_mined := sib_mined ^ 0 ;
7910: LD_ADDR_VAR 0 5
7914: PUSH
7915: LD_VAR 0 5
7919: PUSH
7920: LD_INT 0
7922: ADD
7923: ST_TO_ADDR
7924: GO 7769
7926: POP
7927: POP
// if not def_public_score then
7928: LD_EXP 2
7932: NOT
7933: IFFALSE 8023
// begin ExtraStrings := [ ] ;
7935: LD_ADDR_EXP 51
7939: PUSH
7940: EMPTY
7941: ST_TO_ADDR
// for i := 1 to 8 do
7942: LD_ADDR_VAR 0 1
7946: PUSH
7947: DOUBLE
7948: LD_INT 1
7950: DEC
7951: ST_TO_ADDR
7952: LD_INT 8
7954: PUSH
7955: FOR_TO
7956: IFFALSE 8019
// if Side_Positions [ i ] then
7958: LD_EXP 17
7962: PUSH
7963: LD_VAR 0 1
7967: ARRAY
7968: IFFALSE 8017
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7970: LD_ADDR_EXP 51
7974: PUSH
7975: LD_EXP 51
7979: PUSH
7980: LD_STRING #AlienBase-MinedPublic
7982: PUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 1
7992: PUSH
7993: LD_VAR 0 5
7997: PUSH
7998: LD_VAR 0 1
8002: ARRAY
8003: PUSH
8004: LD_EXP 12
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: ADD
8016: ST_TO_ADDR
8017: GO 7955
8019: POP
8020: POP
// end else
8021: GO 8052
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8023: LD_ADDR_EXP 51
8027: PUSH
8028: LD_STRING #AlienBase-Mined
8030: PUSH
8031: LD_VAR 0 5
8035: PUSH
8036: LD_OWVAR 2
8040: ARRAY
8041: PUSH
8042: LD_EXP 12
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: ST_TO_ADDR
// for i := 1 to 8 do
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: DOUBLE
8058: LD_INT 1
8060: DEC
8061: ST_TO_ADDR
8062: LD_INT 8
8064: PUSH
8065: FOR_TO
8066: IFFALSE 8123
// if sib_mined [ i ] >= amount_of_siberit then
8068: LD_VAR 0 5
8072: PUSH
8073: LD_VAR 0 1
8077: ARRAY
8078: PUSH
8079: LD_EXP 12
8083: GREATEREQUAL
8084: IFFALSE 8121
// begin wait ( 0 0$1 ) ;
8086: LD_INT 35
8088: PPUSH
8089: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8093: LD_VAR 0 5
8097: PUSH
8098: LD_OWVAR 2
8102: ARRAY
8103: PUSH
8104: LD_EXP 12
8108: GREATEREQUAL
8109: IFFALSE 8117
// YouWinInMultiplayer else
8111: CALL_OW 106
8115: GO 8121
// YouLostInMultiplayer ;
8117: CALL_OW 107
// end ;
8121: GO 8065
8123: POP
8124: POP
// enable ;
8125: ENABLE
// end ; end_of_file
8126: PPOPN 5
8128: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
// for un in battle_flags_id do
8133: LD_ADDR_VAR 0 2
8137: PUSH
8138: LD_EXP 28
8142: PUSH
8143: FOR_IN
8144: IFFALSE 8219
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8146: LD_VAR 0 2
8150: PPUSH
8151: LD_INT 1
8153: PUSH
8154: LD_LOC 11
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: LD_LOC 11
8170: PUSH
8171: LD_INT 2
8173: DIV
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 3
8181: PUSH
8182: LD_LOC 11
8186: PUSH
8187: LD_INT 5
8189: DIV
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 20
8197: PUSH
8198: LD_LOC 11
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 423
8217: GO 8143
8219: POP
8220: POP
// end ;
8221: LD_VAR 0 1
8225: RET
// every 1 do var un ;
8226: GO 8228
8228: DISABLE
8229: LD_INT 0
8231: PPUSH
// begin if not def_morale_flags then
8232: LD_EXP 42
8236: NOT
8237: IFFALSE 8241
// exit ;
8239: GO 8318
// if not morale_decreasing_time then
8241: LD_EXP 10
8245: NOT
8246: IFFALSE 8250
// exit ;
8248: GO 8318
// strength = 100 ;
8250: LD_ADDR_LOC 11
8254: PUSH
8255: LD_INT 100
8257: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8258: LD_EXP 10
8262: PPUSH
8263: CALL_OW 67
// strength := strength - 1 ;
8267: LD_ADDR_LOC 11
8271: PUSH
8272: LD_LOC 11
8276: PUSH
8277: LD_INT 1
8279: MINUS
8280: ST_TO_ADDR
// Update_Flags ;
8281: CALL 8129 0 0
// until not strength ;
8285: LD_LOC 11
8289: NOT
8290: IFFALSE 8258
// for un in battle_flags_id do
8292: LD_ADDR_VAR 0 1
8296: PUSH
8297: LD_EXP 28
8301: PUSH
8302: FOR_IN
8303: IFFALSE 8316
// KillBattleFlag ( un ) ;
8305: LD_VAR 0 1
8309: PPUSH
8310: CALL_OW 419
8314: GO 8302
8316: POP
8317: POP
// end ; end_of_file
8318: PPOPN 1
8320: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8321: LD_INT 0
8323: PPUSH
8324: PPUSH
8325: PPUSH
// enable ( 600 ) ;
8326: LD_INT 600
8328: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8329: LD_ADDR_VAR 0 2
8333: PUSH
8334: DOUBLE
8335: LD_INT 1
8337: DEC
8338: ST_TO_ADDR
8339: LD_EXP 31
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8500
// if Position_Sides [ i ] then
8347: LD_EXP 20
8351: PUSH
8352: LD_VAR 0 2
8356: ARRAY
8357: IFFALSE 8498
// for j := 1 to 8 do
8359: LD_ADDR_VAR 0 3
8363: PUSH
8364: DOUBLE
8365: LD_INT 1
8367: DEC
8368: ST_TO_ADDR
8369: LD_INT 8
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8496
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8375: LD_EXP 17
8379: PUSH
8380: LD_VAR 0 3
8384: ARRAY
8385: PUSH
8386: LD_EXP 15
8390: PUSH
8391: LD_EXP 20
8395: PUSH
8396: LD_VAR 0 2
8400: ARRAY
8401: ARRAY
8402: PUSH
8403: LD_EXP 15
8407: PUSH
8408: LD_VAR 0 3
8412: ARRAY
8413: NONEQUAL
8414: PUSH
8415: LD_EXP 19
8419: NOT
8420: PUSH
8421: LD_EXP 20
8425: PUSH
8426: LD_VAR 0 2
8430: ARRAY
8431: PUSH
8432: LD_VAR 0 3
8436: NONEQUAL
8437: AND
8438: OR
8439: AND
8440: IFFALSE 8464
// HideArea ( j , BuildUpAreas [ i ] ) else
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_EXP 31
8451: PUSH
8452: LD_VAR 0 2
8456: ARRAY
8457: PPUSH
8458: CALL_OW 333
8462: GO 8494
// if ( j = your_side ) then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_OWVAR 2
8473: EQUAL
8474: IFFALSE 8494
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8476: LD_EXP 31
8480: PUSH
8481: LD_VAR 0 2
8485: ARRAY
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 424
8494: GO 8372
8496: POP
8497: POP
8498: GO 8344
8500: POP
8501: POP
// end ;
8502: LD_VAR 0 1
8506: RET
// export function EndBuildUp ; var i , j ; begin
8507: LD_INT 0
8509: PPUSH
8510: PPUSH
8511: PPUSH
// disable ( 600 ) ;
8512: LD_INT 600
8514: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8515: LD_ADDR_VAR 0 2
8519: PUSH
8520: DOUBLE
8521: LD_INT 1
8523: DEC
8524: ST_TO_ADDR
8525: LD_EXP 31
8529: PUSH
8530: FOR_TO
8531: IFFALSE 8686
// if Position_Sides [ i ] then
8533: LD_EXP 20
8537: PUSH
8538: LD_VAR 0 2
8542: ARRAY
8543: IFFALSE 8684
// for j := 1 to 8 do
8545: LD_ADDR_VAR 0 3
8549: PUSH
8550: DOUBLE
8551: LD_INT 1
8553: DEC
8554: ST_TO_ADDR
8555: LD_INT 8
8557: PUSH
8558: FOR_TO
8559: IFFALSE 8682
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8561: LD_EXP 17
8565: PUSH
8566: LD_VAR 0 3
8570: ARRAY
8571: PUSH
8572: LD_EXP 15
8576: PUSH
8577: LD_EXP 20
8581: PUSH
8582: LD_VAR 0 2
8586: ARRAY
8587: ARRAY
8588: PUSH
8589: LD_EXP 15
8593: PUSH
8594: LD_VAR 0 3
8598: ARRAY
8599: NONEQUAL
8600: PUSH
8601: LD_EXP 19
8605: NOT
8606: PUSH
8607: LD_EXP 20
8611: PUSH
8612: LD_VAR 0 2
8616: ARRAY
8617: PUSH
8618: LD_VAR 0 3
8622: NONEQUAL
8623: AND
8624: OR
8625: AND
8626: IFFALSE 8650
// ShowArea ( j , BuildUpAreas [ i ] ) else
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_EXP 31
8637: PUSH
8638: LD_VAR 0 2
8642: ARRAY
8643: PPUSH
8644: CALL_OW 334
8648: GO 8680
// if ( j = your_side ) then
8650: LD_VAR 0 3
8654: PUSH
8655: LD_OWVAR 2
8659: EQUAL
8660: IFFALSE 8680
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8662: LD_EXP 31
8666: PUSH
8667: LD_VAR 0 2
8671: ARRAY
8672: PPUSH
8673: LD_INT 0
8675: PPUSH
8676: CALL_OW 424
8680: GO 8558
8682: POP
8683: POP
8684: GO 8530
8686: POP
8687: POP
// end ;
8688: LD_VAR 0 1
8692: RET
// every 5 marked 600 do var i , un ;
8693: GO 8695
8695: DISABLE
8696: LD_INT 0
8698: PPUSH
8699: PPUSH
// begin for i := 1 to BuildUpAreas do
8700: LD_ADDR_VAR 0 1
8704: PUSH
8705: DOUBLE
8706: LD_INT 1
8708: DEC
8709: ST_TO_ADDR
8710: LD_EXP 31
8714: PUSH
8715: FOR_TO
8716: IFFALSE 8871
// if Position_Sides [ i ] then
8718: LD_EXP 20
8722: PUSH
8723: LD_VAR 0 1
8727: ARRAY
8728: IFFALSE 8869
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8730: LD_ADDR_VAR 0 2
8734: PUSH
8735: LD_EXP 31
8739: PUSH
8740: LD_VAR 0 1
8744: ARRAY
8745: PPUSH
8746: LD_INT 2
8748: PUSH
8749: LD_INT 21
8751: PUSH
8752: LD_INT 1
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 21
8761: PUSH
8762: LD_INT 2
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_OWVAR 2
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PPUSH
8790: CALL_OW 70
8794: PUSH
8795: FOR_IN
8796: IFFALSE 8867
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8798: LD_EXP 15
8802: PUSH
8803: LD_EXP 20
8807: PUSH
8808: LD_VAR 0 1
8812: ARRAY
8813: ARRAY
8814: PUSH
8815: LD_EXP 15
8819: PUSH
8820: LD_OWVAR 2
8824: ARRAY
8825: NONEQUAL
8826: PUSH
8827: LD_EXP 19
8831: NOT
8832: PUSH
8833: LD_EXP 20
8837: PUSH
8838: LD_VAR 0 1
8842: ARRAY
8843: PUSH
8844: LD_OWVAR 2
8848: NONEQUAL
8849: AND
8850: OR
8851: IFFALSE 8865
// ComMoveToArea ( un , BuildUpEscape ) ;
8853: LD_VAR 0 2
8857: PPUSH
8858: LD_INT 16
8860: PPUSH
8861: CALL_OW 113
8865: GO 8795
8867: POP
8868: POP
8869: GO 8715
8871: POP
8872: POP
// enable ;
8873: ENABLE
// end ;
8874: PPOPN 2
8876: END
// every 5 5$00 do
8877: GO 8879
8879: DISABLE
// if ( def_builduptime = 1 ) then
8880: LD_EXP 47
8884: PUSH
8885: LD_INT 1
8887: EQUAL
8888: IFFALSE 8894
// EndBuildUp ;
8890: CALL 8507 0 0
8894: END
// every 10 10$00 do
8895: GO 8897
8897: DISABLE
// if ( def_builduptime = 2 ) then
8898: LD_EXP 47
8902: PUSH
8903: LD_INT 2
8905: EQUAL
8906: IFFALSE 8912
// EndBuildUp ;
8908: CALL 8507 0 0
8912: END
// every 15 15$00 do
8913: GO 8915
8915: DISABLE
// if ( def_builduptime = 3 ) then
8916: LD_EXP 47
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: IFFALSE 8930
// EndBuildUp ; end_of_file
8926: CALL 8507 0 0
8930: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8931: GO 8933
8933: DISABLE
8934: LD_INT 0
8936: PPUSH
// begin enable ;
8937: ENABLE
// for x := 1 to 8 do
8938: LD_ADDR_VAR 0 1
8942: PUSH
8943: DOUBLE
8944: LD_INT 1
8946: DEC
8947: ST_TO_ADDR
8948: LD_INT 8
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9036
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8954: LD_LOC 18
8958: PUSH
8959: LD_VAR 0 1
8963: ARRAY
8964: PUSH
8965: LD_INT 5
8967: GREATER
8968: PUSH
8969: LD_LOC 16
8973: PUSH
8974: LD_VAR 0 1
8978: ARRAY
8979: PUSH
8980: LD_INT 1
8982: NEG
8983: EQUAL
8984: AND
8985: IFFALSE 9034
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8987: LD_ADDR_LOC 17
8991: PUSH
8992: LD_LOC 17
8996: PPUSH
8997: LD_VAR 0 1
9001: PPUSH
9002: LD_LOC 17
9006: PUSH
9007: LD_VAR 0 1
9011: ARRAY
9012: PUSH
9013: LD_INT 6
9015: PLUS
9016: PPUSH
9017: CALL_OW 1
9021: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9022: LD_VAR 0 1
9026: PPUSH
9027: LD_INT 0
9029: PPUSH
9030: CALL 9208 0 2
// end ;
9034: GO 8951
9036: POP
9037: POP
// end ;
9038: PPOPN 1
9040: END
// every 0 0$1 marked 200 do var BGL , x ;
9041: GO 9043
9043: DISABLE
9044: LD_INT 0
9046: PPUSH
9047: PPUSH
// begin enable ;
9048: ENABLE
// for x := 1 to 8 do
9049: LD_ADDR_VAR 0 2
9053: PUSH
9054: DOUBLE
9055: LD_INT 1
9057: DEC
9058: ST_TO_ADDR
9059: LD_INT 8
9061: PUSH
9062: FOR_TO
9063: IFFALSE 9194
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9065: LD_LOC 16
9069: PUSH
9070: LD_VAR 0 2
9074: ARRAY
9075: PUSH
9076: LD_INT 1
9078: NEG
9079: GREATER
9080: PUSH
9081: LD_LOC 16
9085: PUSH
9086: LD_VAR 0 2
9090: ARRAY
9091: PPUSH
9092: CALL_OW 300
9096: AND
9097: IFFALSE 9192
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9099: LD_ADDR_VAR 0 1
9103: PUSH
9104: LD_LOC 16
9108: PUSH
9109: LD_VAR 0 2
9113: ARRAY
9114: PPUSH
9115: CALL_OW 256
9119: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9120: LD_VAR 0 1
9124: PUSH
9125: LD_INT 1000
9127: LESS
9128: PUSH
9129: LD_VAR 0 1
9133: PUSH
9134: LD_INT 100
9136: GREATER
9137: AND
9138: IFFALSE 9192
// begin BGL := BGL + 10 ;
9140: LD_ADDR_VAR 0 1
9144: PUSH
9145: LD_VAR 0 1
9149: PUSH
9150: LD_INT 10
9152: PLUS
9153: ST_TO_ADDR
// if BGL > 1000 then
9154: LD_VAR 0 1
9158: PUSH
9159: LD_INT 1000
9161: GREATER
9162: IFFALSE 9172
// BGL := 1000 ;
9164: LD_ADDR_VAR 0 1
9168: PUSH
9169: LD_INT 1000
9171: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9172: LD_LOC 16
9176: PUSH
9177: LD_VAR 0 2
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 1
9187: PPUSH
9188: CALL_OW 234
// end ; end ;
9192: GO 9062
9194: POP
9195: POP
// end ;
9196: PPOPN 2
9198: END
// every 0 0$1 marked 200 do
9199: GO 9201
9201: DISABLE
// begin DisplayTimeWithKills ;
9202: CALL 9449 0 0
// enable ;
9206: ENABLE
// end ;
9207: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9208: LD_INT 0
9210: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9211: LD_ADDR_OWVAR 24
9215: PUSH
9216: LD_INT 0
9218: PPUSH
9219: LD_INT 5
9221: PPUSH
9222: CALL_OW 12
9226: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9227: LD_INT 1
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: LD_INT 15
9235: PPUSH
9236: CALL_OW 380
// hc_importance := 106 ;
9240: LD_ADDR_OWVAR 32
9244: PUSH
9245: LD_INT 106
9247: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9248: LD_ADDR_OWVAR 26
9252: PUSH
9253: LD_STRING Blood God of 
9255: PUSH
9256: LD_OWVAR 19
9260: PUSH
9261: LD_VAR 0 1
9265: ARRAY
9266: STR
9267: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9268: LD_ADDR_OWVAR 21
9272: PUSH
9273: LD_EXP 18
9277: PUSH
9278: LD_VAR 0 1
9282: ARRAY
9283: ST_TO_ADDR
// uc_side := side ;
9284: LD_ADDR_OWVAR 20
9288: PUSH
9289: LD_VAR 0 1
9293: ST_TO_ADDR
// hc_noskilllimit := true ;
9294: LD_ADDR_OWVAR 76
9298: PUSH
9299: LD_INT 1
9301: ST_TO_ADDR
// hc_agressivity := 50 ;
9302: LD_ADDR_OWVAR 35
9306: PUSH
9307: LD_INT 50
9309: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9310: LD_ADDR_LOC 16
9314: PUSH
9315: LD_LOC 16
9319: PPUSH
9320: LD_VAR 0 1
9324: PPUSH
9325: CALL_OW 44
9329: PPUSH
9330: CALL_OW 1
9334: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9335: LD_LOC 16
9339: PUSH
9340: LD_VAR 0 1
9344: ARRAY
9345: PPUSH
9346: LD_LOC 19
9350: PUSH
9351: LD_EXP 17
9355: PUSH
9356: LD_VAR 0 1
9360: ARRAY
9361: ARRAY
9362: PUSH
9363: LD_INT 1
9365: ARRAY
9366: PPUSH
9367: LD_LOC 19
9371: PUSH
9372: LD_EXP 17
9376: PUSH
9377: LD_VAR 0 1
9381: ARRAY
9382: ARRAY
9383: PUSH
9384: LD_INT 2
9386: ARRAY
9387: PPUSH
9388: LD_INT 10
9390: PPUSH
9391: LD_INT 0
9393: PPUSH
9394: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9398: LD_LOC 16
9402: PUSH
9403: LD_VAR 0 1
9407: ARRAY
9408: PPUSH
9409: LD_INT 1
9411: PPUSH
9412: LD_INT 300
9414: PPUSH
9415: CALL_OW 239
// if not NoDialog then
9419: LD_VAR 0 2
9423: NOT
9424: IFFALSE 9444
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9426: LD_LOC 16
9430: PUSH
9431: LD_VAR 0 1
9435: ARRAY
9436: PPUSH
9437: LD_STRING DLAwaken
9439: PPUSH
9440: CALL_OW 94
// end ;
9444: LD_VAR 0 3
9448: RET
// function DisplayTimeWithKills ; var x ; begin
9449: LD_INT 0
9451: PPUSH
9452: PPUSH
// ExtraStrings :=  ;
9453: LD_ADDR_EXP 51
9457: PUSH
9458: LD_STRING 
9460: ST_TO_ADDR
// for x = 1 to Side_Positions do
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: DOUBLE
9467: LD_INT 1
9469: DEC
9470: ST_TO_ADDR
9471: LD_EXP 17
9475: PUSH
9476: FOR_TO
9477: IFFALSE 9710
// if Side_Positions [ x ] then
9479: LD_EXP 17
9483: PUSH
9484: LD_VAR 0 2
9488: ARRAY
9489: IFFALSE 9708
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9491: LD_ADDR_LOC 18
9495: PUSH
9496: LD_LOC 18
9500: PPUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: LD_VAR 0 2
9510: PPUSH
9511: CALL_OW 515
9515: PUSH
9516: LD_LOC 17
9520: PUSH
9521: LD_VAR 0 2
9525: ARRAY
9526: MINUS
9527: PPUSH
9528: CALL_OW 1
9532: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9533: LD_LOC 16
9537: PUSH
9538: LD_VAR 0 2
9542: ARRAY
9543: PUSH
9544: LD_INT 1
9546: NEG
9547: GREATER
9548: PUSH
9549: LD_LOC 16
9553: PUSH
9554: LD_VAR 0 2
9558: ARRAY
9559: PPUSH
9560: CALL_OW 300
9564: AND
9565: IFFALSE 9598
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9567: LD_ADDR_EXP 51
9571: PUSH
9572: LD_EXP 51
9576: PUSH
9577: LD_STRING #godawoken
9579: PUSH
9580: LD_VAR 0 2
9584: PUSH
9585: LD_VAR 0 2
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: LIST
9594: ADD
9595: ST_TO_ADDR
9596: GO 9708
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9598: LD_LOC 16
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: NEG
9612: GREATER
9613: PUSH
9614: LD_LOC 16
9618: PUSH
9619: LD_VAR 0 2
9623: ARRAY
9624: PPUSH
9625: CALL_OW 301
9629: AND
9630: IFFALSE 9663
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9632: LD_ADDR_EXP 51
9636: PUSH
9637: LD_EXP 51
9641: PUSH
9642: LD_STRING #goddied
9644: PUSH
9645: LD_VAR 0 2
9649: PUSH
9650: LD_VAR 0 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: LIST
9659: ADD
9660: ST_TO_ADDR
9661: GO 9708
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9663: LD_ADDR_EXP 51
9667: PUSH
9668: LD_EXP 51
9672: PUSH
9673: LD_STRING #godssacrifise
9675: PUSH
9676: LD_VAR 0 2
9680: PUSH
9681: LD_VAR 0 2
9685: PUSH
9686: LD_LOC 18
9690: PUSH
9691: LD_VAR 0 2
9695: ARRAY
9696: PUSH
9697: LD_INT 6
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: ADD
9707: ST_TO_ADDR
9708: GO 9476
9710: POP
9711: POP
// end ;
9712: LD_VAR 0 1
9716: RET
// export function InitBloodGods ; begin
9717: LD_INT 0
9719: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9720: LD_ADDR_LOC 16
9724: PUSH
9725: LD_INT 1
9727: NEG
9728: PUSH
9729: LD_INT 1
9731: NEG
9732: PUSH
9733: LD_INT 1
9735: NEG
9736: PUSH
9737: LD_INT 1
9739: NEG
9740: PUSH
9741: LD_INT 1
9743: NEG
9744: PUSH
9745: LD_INT 1
9747: NEG
9748: PUSH
9749: LD_INT 1
9751: NEG
9752: PUSH
9753: LD_INT 1
9755: NEG
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9767: LD_ADDR_LOC 17
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: LD_INT 0
9777: PUSH
9778: LD_INT 0
9780: PUSH
9781: LD_INT 0
9783: PUSH
9784: LD_INT 0
9786: PUSH
9787: LD_INT 0
9789: PUSH
9790: LD_INT 0
9792: PUSH
9793: LD_INT 0
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9806: LD_ADDR_LOC 18
9810: PUSH
9811: LD_INT 0
9813: PUSH
9814: LD_INT 0
9816: PUSH
9817: LD_INT 0
9819: PUSH
9820: LD_INT 0
9822: PUSH
9823: LD_INT 0
9825: PUSH
9826: LD_INT 0
9828: PUSH
9829: LD_INT 0
9831: PUSH
9832: LD_INT 0
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9845: LD_ADDR_LOC 19
9849: PUSH
9850: LD_INT 60
9852: PUSH
9853: LD_INT 47
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 82
9862: PUSH
9863: LD_INT 26
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 124
9872: PUSH
9873: LD_INT 45
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 147
9882: PUSH
9883: LD_INT 90
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 126
9892: PUSH
9893: LD_INT 112
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 84
9902: PUSH
9903: LD_INT 92
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 106
9912: PUSH
9913: LD_INT 73
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 106
9922: PUSH
9923: LD_INT 73
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: ST_TO_ADDR
// ClearHumansKilled ;
9940: CALL_OW 516
// enable ( 200 ) ;
9944: LD_INT 200
9946: ENABLE_MARKED
// end ; end_of_file
9947: LD_VAR 0 1
9951: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_sheik , def_mastodont ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9952: LD_INT 0
9954: PPUSH
9955: PPUSH
// if ( not IAmSpec ) then
9956: CALL_OW 531
9960: NOT
9961: IFFALSE 9977
// Result := Limits_Info ^  ;
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_LOC 27
9972: PUSH
9973: LD_STRING 
9975: ADD
9976: ST_TO_ADDR
// for i := 1 to 8 do
9977: LD_ADDR_VAR 0 2
9981: PUSH
9982: DOUBLE
9983: LD_INT 1
9985: DEC
9986: ST_TO_ADDR
9987: LD_INT 8
9989: PUSH
9990: FOR_TO
9991: IFFALSE 10036
// if Cheaters [ i ] then
9993: LD_LOC 28
9997: PUSH
9998: LD_VAR 0 2
10002: ARRAY
10003: IFFALSE 10034
// Result := Result ^ [ #Cheater , i , i ] ;
10005: LD_ADDR_VAR 0 1
10009: PUSH
10010: LD_VAR 0 1
10014: PUSH
10015: LD_STRING #Cheater
10017: PUSH
10018: LD_VAR 0 2
10022: PUSH
10023: LD_VAR 0 2
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: ADD
10033: ST_TO_ADDR
10034: GO 9990
10036: POP
10037: POP
// end ;
10038: LD_VAR 0 1
10042: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10043: LD_INT 0
10045: PPUSH
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
// case Game_Type of 10 :
10050: LD_EXP 32
10054: PUSH
10055: LD_INT 10
10057: DOUBLE
10058: EQUAL
10059: IFTRUE 10063
10061: GO 10074
10063: POP
// def_game_rules := 1 ; 11 :
10064: LD_ADDR_EXP 33
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
10072: GO 10094
10074: LD_INT 11
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10093
10082: POP
// def_game_rules := 3 ; end ;
10083: LD_ADDR_EXP 33
10087: PUSH
10088: LD_INT 3
10090: ST_TO_ADDR
10091: GO 10094
10093: POP
// case def_game_rules of 0 :
10094: LD_EXP 33
10098: PUSH
10099: LD_INT 0
10101: DOUBLE
10102: EQUAL
10103: IFTRUE 10107
10105: GO 10112
10107: POP
// exit ; 1 :
10108: GO 12170
10110: GO 12070
10112: LD_INT 1
10114: DOUBLE
10115: EQUAL
10116: IFTRUE 10120
10118: GO 10336
10120: POP
// begin def_base_level := 2 ;
10121: LD_ADDR_EXP 34
10125: PUSH
10126: LD_INT 2
10128: ST_TO_ADDR
// def_amount_of_people := 2 ;
10129: LD_ADDR_EXP 35
10133: PUSH
10134: LD_INT 2
10136: ST_TO_ADDR
// def_skill_level := 1 ;
10137: LD_ADDR_EXP 36
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// def_starting_resources := 2 ;
10145: LD_ADDR_EXP 37
10149: PUSH
10150: LD_INT 2
10152: ST_TO_ADDR
// def_shipments_density := 1 ;
10153: LD_ADDR_EXP 38
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10161: LD_ADDR_EXP 39
10165: PUSH
10166: LD_INT 0
10168: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10169: LD_ADDR_EXP 40
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
// def_shared_vision := 1 ;
10177: LD_ADDR_EXP 41
10181: PUSH
10182: LD_INT 1
10184: ST_TO_ADDR
// def_morale_flags := 3 ;
10185: LD_ADDR_EXP 42
10189: PUSH
10190: LD_INT 3
10192: ST_TO_ADDR
// def_siberite_detection := 1 ;
10193: LD_ADDR_EXP 43
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// def_people_respawning := 1 ;
10201: LD_ADDR_EXP 44
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10209: LD_ADDR_EXP 45
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10217: LD_ADDR_EXP 46
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// def_builduptime := 2 ;
10225: LD_ADDR_EXP 47
10229: PUSH
10230: LD_INT 2
10232: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10233: LD_ADDR_VAR 0 2
10237: PUSH
10238: EMPTY
10239: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10240: LD_ADDR_VAR 0 3
10244: PUSH
10245: EMPTY
10246: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10247: LD_ADDR_LOC 22
10251: PUSH
10252: EMPTY
10253: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10254: LD_ADDR_LOC 23
10258: PUSH
10259: EMPTY
10260: ST_TO_ADDR
// Banned_Controls := [ ] ;
10261: LD_ADDR_LOC 24
10265: PUSH
10266: EMPTY
10267: ST_TO_ADDR
// Banned_Engines := [ ] ;
10268: LD_ADDR_LOC 25
10272: PUSH
10273: EMPTY
10274: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10275: LD_ADDR_LOC 20
10279: PUSH
10280: LD_INT 37
10282: PUSH
10283: EMPTY
10284: LIST
10285: PUSH
10286: LD_INT 4
10288: PUSH
10289: LD_INT 5
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 31
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 33
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10315: LD_ADDR_LOC 21
10319: PUSH
10320: LD_INT 2
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 4
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: ST_TO_ADDR
// end ; 2 :
10334: GO 12070
10336: LD_INT 2
10338: DOUBLE
10339: EQUAL
10340: IFTRUE 10344
10342: GO 10553
10344: POP
// begin def_base_level := 1 ;
10345: LD_ADDR_EXP 34
10349: PUSH
10350: LD_INT 1
10352: ST_TO_ADDR
// def_amount_of_people := 2 ;
10353: LD_ADDR_EXP 35
10357: PUSH
10358: LD_INT 2
10360: ST_TO_ADDR
// def_skill_level := 3 ;
10361: LD_ADDR_EXP 36
10365: PUSH
10366: LD_INT 3
10368: ST_TO_ADDR
// def_starting_resources := 3 ;
10369: LD_ADDR_EXP 37
10373: PUSH
10374: LD_INT 3
10376: ST_TO_ADDR
// def_shipments_density := 2 ;
10377: LD_ADDR_EXP 38
10381: PUSH
10382: LD_INT 2
10384: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10385: LD_ADDR_EXP 39
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10393: LD_ADDR_EXP 40
10397: PUSH
10398: LD_INT 2
10400: ST_TO_ADDR
// def_shared_vision := 1 ;
10401: LD_ADDR_EXP 41
10405: PUSH
10406: LD_INT 1
10408: ST_TO_ADDR
// def_morale_flags := 0 ;
10409: LD_ADDR_EXP 42
10413: PUSH
10414: LD_INT 0
10416: ST_TO_ADDR
// def_siberite_detection := 1 ;
10417: LD_ADDR_EXP 43
10421: PUSH
10422: LD_INT 1
10424: ST_TO_ADDR
// def_people_respawning := 0 ;
10425: LD_ADDR_EXP 44
10429: PUSH
10430: LD_INT 0
10432: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10433: LD_ADDR_EXP 45
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10441: LD_ADDR_EXP 46
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
// def_builduptime := 2 ;
10449: LD_ADDR_EXP 47
10453: PUSH
10454: LD_INT 2
10456: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10468: LD_ADDR_VAR 0 3
10472: PUSH
10473: EMPTY
10474: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10475: LD_ADDR_LOC 22
10479: PUSH
10480: EMPTY
10481: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10482: LD_ADDR_LOC 23
10486: PUSH
10487: EMPTY
10488: ST_TO_ADDR
// Banned_Controls := [ ] ;
10489: LD_ADDR_LOC 24
10493: PUSH
10494: EMPTY
10495: ST_TO_ADDR
// Banned_Engines := [ ] ;
10496: LD_ADDR_LOC 25
10500: PUSH
10501: EMPTY
10502: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10503: LD_ADDR_LOC 20
10507: PUSH
10508: LD_INT 4
10510: PUSH
10511: LD_INT 5
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 31
10520: PUSH
10521: LD_INT 32
10523: PUSH
10524: LD_INT 33
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
10536: LD_ADDR_LOC 21
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: ST_TO_ADDR
// end ; 3 :
10551: GO 12070
10553: LD_INT 3
10555: DOUBLE
10556: EQUAL
10557: IFTRUE 10561
10559: GO 10804
10561: POP
// begin def_base_level := 1 ;
10562: LD_ADDR_EXP 34
10566: PUSH
10567: LD_INT 1
10569: ST_TO_ADDR
// def_amount_of_people := 2 ;
10570: LD_ADDR_EXP 35
10574: PUSH
10575: LD_INT 2
10577: ST_TO_ADDR
// def_skill_level := 3 ;
10578: LD_ADDR_EXP 36
10582: PUSH
10583: LD_INT 3
10585: ST_TO_ADDR
// def_starting_resources := 3 ;
10586: LD_ADDR_EXP 37
10590: PUSH
10591: LD_INT 3
10593: ST_TO_ADDR
// def_shipments_density := 1 ;
10594: LD_ADDR_EXP 38
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10602: LD_ADDR_EXP 39
10606: PUSH
10607: LD_INT 0
10609: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10610: LD_ADDR_EXP 40
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// def_shared_vision := 1 ;
10618: LD_ADDR_EXP 41
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// def_morale_flags := 0 ;
10626: LD_ADDR_EXP 42
10630: PUSH
10631: LD_INT 0
10633: ST_TO_ADDR
// def_siberite_detection := 1 ;
10634: LD_ADDR_EXP 43
10638: PUSH
10639: LD_INT 1
10641: ST_TO_ADDR
// def_people_respawning := 0 ;
10642: LD_ADDR_EXP 44
10646: PUSH
10647: LD_INT 0
10649: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10650: LD_ADDR_EXP 45
10654: PUSH
10655: LD_INT 2
10657: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10658: LD_ADDR_EXP 46
10662: PUSH
10663: LD_INT 0
10665: ST_TO_ADDR
// def_builduptime := 1 ;
10666: LD_ADDR_EXP 47
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_INT 23
10681: PUSH
10682: EMPTY
10683: LIST
10684: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10685: LD_ADDR_VAR 0 3
10689: PUSH
10690: LD_INT 2
10692: PUSH
10693: LD_INT 37
10695: PUSH
10696: LD_INT 32
10698: PUSH
10699: LD_INT 33
10701: PUSH
10702: LD_INT 36
10704: PUSH
10705: LD_INT 16
10707: PUSH
10708: LD_INT 23
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 18
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_INT 20
10722: PUSH
10723: LD_INT 19
10725: PUSH
10726: LD_INT 25
10728: PUSH
10729: LD_INT 17
10731: PUSH
10732: LD_INT 24
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10752: LD_ADDR_LOC 22
10756: PUSH
10757: EMPTY
10758: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10759: LD_ADDR_LOC 23
10763: PUSH
10764: EMPTY
10765: ST_TO_ADDR
// Banned_Controls := [ ] ;
10766: LD_ADDR_LOC 24
10770: PUSH
10771: EMPTY
10772: ST_TO_ADDR
// Banned_Engines := [ ] ;
10773: LD_ADDR_LOC 25
10777: PUSH
10778: EMPTY
10779: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10780: LD_ADDR_LOC 20
10784: PUSH
10785: EMPTY
10786: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10787: LD_ADDR_LOC 21
10791: PUSH
10792: EMPTY
10793: ST_TO_ADDR
// No_Mechs := true ;
10794: LD_ADDR_EXP 50
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// end ; 4 :
10802: GO 12070
10804: LD_INT 4
10806: DOUBLE
10807: EQUAL
10808: IFTRUE 10812
10810: GO 10987
10812: POP
// begin def_base_level := 1 ;
10813: LD_ADDR_EXP 34
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// def_amount_of_people := 2 ;
10821: LD_ADDR_EXP 35
10825: PUSH
10826: LD_INT 2
10828: ST_TO_ADDR
// def_skill_level := 3 ;
10829: LD_ADDR_EXP 36
10833: PUSH
10834: LD_INT 3
10836: ST_TO_ADDR
// def_starting_resources := 3 ;
10837: LD_ADDR_EXP 37
10841: PUSH
10842: LD_INT 3
10844: ST_TO_ADDR
// def_shipments_density := 2 ;
10845: LD_ADDR_EXP 38
10849: PUSH
10850: LD_INT 2
10852: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10853: LD_ADDR_EXP 39
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10861: LD_ADDR_EXP 40
10865: PUSH
10866: LD_INT 2
10868: ST_TO_ADDR
// def_shared_vision := 1 ;
10869: LD_ADDR_EXP 41
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// def_morale_flags := 0 ;
10877: LD_ADDR_EXP 42
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// def_siberite_detection := 1 ;
10885: LD_ADDR_EXP 43
10889: PUSH
10890: LD_INT 1
10892: ST_TO_ADDR
// def_people_respawning := 0 ;
10893: LD_ADDR_EXP 44
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10901: LD_ADDR_EXP 45
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10909: LD_ADDR_EXP 46
10913: PUSH
10914: LD_INT 1
10916: ST_TO_ADDR
// def_builduptime := 3 ;
10917: LD_ADDR_EXP 47
10921: PUSH
10922: LD_INT 3
10924: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10925: LD_ADDR_VAR 0 2
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: EMPTY
10942: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10943: LD_ADDR_LOC 22
10947: PUSH
10948: EMPTY
10949: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10950: LD_ADDR_LOC 23
10954: PUSH
10955: EMPTY
10956: ST_TO_ADDR
// Banned_Controls := [ ] ;
10957: LD_ADDR_LOC 24
10961: PUSH
10962: EMPTY
10963: ST_TO_ADDR
// Banned_Engines := [ ] ;
10964: LD_ADDR_LOC 25
10968: PUSH
10969: EMPTY
10970: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10971: LD_ADDR_LOC 20
10975: PUSH
10976: EMPTY
10977: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10978: LD_ADDR_LOC 21
10982: PUSH
10983: EMPTY
10984: ST_TO_ADDR
// end ; 5 :
10985: GO 12070
10987: LD_INT 5
10989: DOUBLE
10990: EQUAL
10991: IFTRUE 10995
10993: GO 11244
10995: POP
// begin def_base_level := 0 ;
10996: LD_ADDR_EXP 34
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// def_amount_of_people := 0 ;
11004: LD_ADDR_EXP 35
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// def_skill_level := 0 ;
11012: LD_ADDR_EXP 36
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// def_starting_resources := 0 ;
11020: LD_ADDR_EXP 37
11024: PUSH
11025: LD_INT 0
11027: ST_TO_ADDR
// def_shipments_density := 0 ;
11028: LD_ADDR_EXP 38
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11036: LD_ADDR_EXP 39
11040: PUSH
11041: LD_INT 0
11043: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11044: LD_ADDR_EXP 40
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// def_shared_vision := 1 ;
11052: LD_ADDR_EXP 41
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// def_morale_flags := 0 ;
11060: LD_ADDR_EXP 42
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// def_siberite_detection := 0 ;
11068: LD_ADDR_EXP 43
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// def_people_respawning := 1 ;
11076: LD_ADDR_EXP 44
11080: PUSH
11081: LD_INT 1
11083: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11084: LD_ADDR_EXP 45
11088: PUSH
11089: LD_INT 1
11091: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11092: LD_ADDR_EXP 46
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// def_builduptime := 0 ;
11100: LD_ADDR_EXP 47
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11108: LD_ADDR_VAR 0 2
11112: PUSH
11113: LD_INT 10
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11123: LD_ADDR_VAR 0 3
11127: PUSH
11128: LD_INT 12
11130: PUSH
11131: LD_INT 11
11133: PUSH
11134: LD_INT 14
11136: PUSH
11137: LD_INT 13
11139: PUSH
11140: LD_INT 5
11142: PUSH
11143: LD_INT 24
11145: PUSH
11146: LD_INT 21
11148: PUSH
11149: LD_INT 33
11151: PUSH
11152: LD_INT 36
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11166: LD_ADDR_LOC 22
11170: PUSH
11171: LD_INT 31
11173: PUSH
11174: EMPTY
11175: LIST
11176: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11177: LD_ADDR_LOC 23
11181: PUSH
11182: EMPTY
11183: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11184: LD_ADDR_LOC 24
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: ST_TO_ADDR
// Banned_Engines := [ ] ;
11195: LD_ADDR_LOC 25
11199: PUSH
11200: EMPTY
11201: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11202: LD_ADDR_LOC 20
11206: PUSH
11207: LD_INT 4
11209: PUSH
11210: EMPTY
11211: LIST
11212: PUSH
11213: LD_INT 31
11215: PUSH
11216: LD_INT 32
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11227: LD_ADDR_LOC 21
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: LD_INT 1
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: ST_TO_ADDR
// end ; 6 :
11242: GO 12070
11244: LD_INT 6
11246: DOUBLE
11247: EQUAL
11248: IFTRUE 11252
11250: GO 11455
11252: POP
// begin def_base_level := 1 ;
11253: LD_ADDR_EXP 34
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// def_amount_of_people := 2 ;
11261: LD_ADDR_EXP 35
11265: PUSH
11266: LD_INT 2
11268: ST_TO_ADDR
// def_skill_level := 3 ;
11269: LD_ADDR_EXP 36
11273: PUSH
11274: LD_INT 3
11276: ST_TO_ADDR
// def_starting_resources := 3 ;
11277: LD_ADDR_EXP 37
11281: PUSH
11282: LD_INT 3
11284: ST_TO_ADDR
// def_shipments_density := 1 ;
11285: LD_ADDR_EXP 38
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11293: LD_ADDR_EXP 39
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11301: LD_ADDR_EXP 40
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// def_shared_vision := 1 ;
11309: LD_ADDR_EXP 41
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
// def_morale_flags := 0 ;
11317: LD_ADDR_EXP 42
11321: PUSH
11322: LD_INT 0
11324: ST_TO_ADDR
// def_siberite_detection := 1 ;
11325: LD_ADDR_EXP 43
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// def_people_respawning := 2 ;
11333: LD_ADDR_EXP 44
11337: PUSH
11338: LD_INT 2
11340: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11341: LD_ADDR_EXP 45
11345: PUSH
11346: LD_INT 1
11348: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11349: LD_ADDR_EXP 46
11353: PUSH
11354: LD_INT 0
11356: ST_TO_ADDR
// def_builduptime := 1 ;
11357: LD_ADDR_EXP 47
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_INT 23
11372: PUSH
11373: EMPTY
11374: LIST
11375: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11376: LD_ADDR_VAR 0 3
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 37
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11403: LD_ADDR_LOC 22
11407: PUSH
11408: EMPTY
11409: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11410: LD_ADDR_LOC 23
11414: PUSH
11415: EMPTY
11416: ST_TO_ADDR
// Banned_Controls := [ ] ;
11417: LD_ADDR_LOC 24
11421: PUSH
11422: EMPTY
11423: ST_TO_ADDR
// Banned_Engines := [ ] ;
11424: LD_ADDR_LOC 25
11428: PUSH
11429: EMPTY
11430: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11431: LD_ADDR_LOC 20
11435: PUSH
11436: EMPTY
11437: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11438: LD_ADDR_LOC 21
11442: PUSH
11443: EMPTY
11444: ST_TO_ADDR
// No_Mechs := true ;
11445: LD_ADDR_EXP 50
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// end ; 7 :
11453: GO 12070
11455: LD_INT 7
11457: DOUBLE
11458: EQUAL
11459: IFTRUE 11463
11461: GO 11661
11463: POP
// begin def_base_level := 1 ;
11464: LD_ADDR_EXP 34
11468: PUSH
11469: LD_INT 1
11471: ST_TO_ADDR
// def_amount_of_people := 2 ;
11472: LD_ADDR_EXP 35
11476: PUSH
11477: LD_INT 2
11479: ST_TO_ADDR
// def_skill_level := 3 ;
11480: LD_ADDR_EXP 36
11484: PUSH
11485: LD_INT 3
11487: ST_TO_ADDR
// def_starting_resources := 3 ;
11488: LD_ADDR_EXP 37
11492: PUSH
11493: LD_INT 3
11495: ST_TO_ADDR
// def_shipments_density := 1 ;
11496: LD_ADDR_EXP 38
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11504: LD_ADDR_EXP 39
11508: PUSH
11509: LD_INT 1
11511: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11512: LD_ADDR_EXP 40
11516: PUSH
11517: LD_INT 2
11519: ST_TO_ADDR
// def_shared_vision := 1 ;
11520: LD_ADDR_EXP 41
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// def_morale_flags := 0 ;
11528: LD_ADDR_EXP 42
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// def_siberite_detection := 1 ;
11536: LD_ADDR_EXP 43
11540: PUSH
11541: LD_INT 1
11543: ST_TO_ADDR
// def_people_respawning := 0 ;
11544: LD_ADDR_EXP 44
11548: PUSH
11549: LD_INT 0
11551: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11552: LD_ADDR_EXP 45
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11560: LD_ADDR_EXP 46
11564: PUSH
11565: LD_INT 0
11567: ST_TO_ADDR
// def_builduptime := 3 ;
11568: LD_ADDR_EXP 47
11572: PUSH
11573: LD_INT 3
11575: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11576: LD_ADDR_VAR 0 2
11580: PUSH
11581: LD_INT 23
11583: PUSH
11584: EMPTY
11585: LIST
11586: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11587: LD_ADDR_VAR 0 3
11591: PUSH
11592: LD_INT 37
11594: PUSH
11595: EMPTY
11596: LIST
11597: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11598: LD_ADDR_LOC 22
11602: PUSH
11603: EMPTY
11604: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11605: LD_ADDR_LOC 23
11609: PUSH
11610: EMPTY
11611: ST_TO_ADDR
// Banned_Controls := [ ] ;
11612: LD_ADDR_LOC 24
11616: PUSH
11617: EMPTY
11618: ST_TO_ADDR
// Banned_Engines := [ ] ;
11619: LD_ADDR_LOC 25
11623: PUSH
11624: EMPTY
11625: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11626: LD_ADDR_LOC 20
11630: PUSH
11631: LD_INT 31
11633: PUSH
11634: LD_INT 32
11636: PUSH
11637: LD_INT 33
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11648: LD_ADDR_LOC 21
11652: PUSH
11653: LD_INT 10
11655: PUSH
11656: EMPTY
11657: LIST
11658: ST_TO_ADDR
// end ; 8 :
11659: GO 12070
11661: LD_INT 8
11663: DOUBLE
11664: EQUAL
11665: IFTRUE 11669
11667: GO 12069
11669: POP
// begin def_base_level := 0 ;
11670: LD_ADDR_EXP 34
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
11678: LD_ADDR_EXP 35
11682: PUSH
11683: LD_INT 0
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 12
11693: ST_TO_ADDR
// def_skill_level := 0 ;
11694: LD_ADDR_EXP 36
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// def_starting_resources := 2 ;
11702: LD_ADDR_EXP 37
11706: PUSH
11707: LD_INT 2
11709: ST_TO_ADDR
// def_shipments_density := 1 ;
11710: LD_ADDR_EXP 38
11714: PUSH
11715: LD_INT 1
11717: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11718: LD_ADDR_EXP 39
11722: PUSH
11723: LD_INT 0
11725: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11726: LD_ADDR_EXP 40
11730: PUSH
11731: LD_INT 0
11733: ST_TO_ADDR
// def_shared_vision := 1 ;
11734: LD_ADDR_EXP 41
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11742: LD_ADDR_EXP 42
11746: PUSH
11747: LD_INT 0
11749: PPUSH
11750: LD_INT 2
11752: PPUSH
11753: CALL_OW 12
11757: ST_TO_ADDR
// def_siberite_detection := 0 ;
11758: LD_ADDR_EXP 43
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// def_people_respawning := 0 ;
11766: LD_ADDR_EXP 44
11770: PUSH
11771: LD_INT 0
11773: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11774: LD_ADDR_EXP 45
11778: PUSH
11779: LD_INT 2
11781: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11782: LD_ADDR_EXP 46
11786: PUSH
11787: LD_INT 0
11789: ST_TO_ADDR
// def_builduptime := 0 ;
11790: LD_ADDR_EXP 47
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_INT 23
11805: PUSH
11806: LD_INT 20
11808: PUSH
11809: LD_INT 40
11811: PUSH
11812: LD_INT 47
11814: PUSH
11815: LD_INT 46
11817: PUSH
11818: LD_INT 39
11820: PUSH
11821: LD_INT 71
11823: PUSH
11824: LD_INT 34
11826: PUSH
11827: LD_INT 41
11829: PUSH
11830: LD_INT 44
11832: PUSH
11833: LD_INT 17
11835: PUSH
11836: LD_INT 16
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11853: LD_ADDR_VAR 0 3
11857: PUSH
11858: LD_INT 37
11860: PUSH
11861: LD_INT 5
11863: PUSH
11864: LD_INT 13
11866: PUSH
11867: LD_INT 34
11869: PUSH
11870: LD_INT 12
11872: PUSH
11873: LD_INT 15
11875: PUSH
11876: LD_INT 11
11878: PUSH
11879: LD_INT 14
11881: PUSH
11882: LD_INT 29
11884: PUSH
11885: LD_INT 30
11887: PUSH
11888: LD_INT 28
11890: PUSH
11891: LD_INT 24
11893: PUSH
11894: LD_INT 25
11896: PUSH
11897: LD_INT 20
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 22
11905: PUSH
11906: LD_INT 36
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11928: LD_ADDR_LOC 22
11932: PUSH
11933: EMPTY
11934: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11935: LD_ADDR_LOC 23
11939: PUSH
11940: LD_INT 14
11942: PUSH
11943: EMPTY
11944: LIST
11945: ST_TO_ADDR
// Banned_Controls := [ ] ;
11946: LD_ADDR_LOC 24
11950: PUSH
11951: EMPTY
11952: ST_TO_ADDR
// Banned_Engines := [ ] ;
11953: LD_ADDR_LOC 25
11957: PUSH
11958: EMPTY
11959: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11960: LD_ADDR_LOC 20
11964: PUSH
11965: LD_INT 31
11967: PUSH
11968: LD_INT 32
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11985: LD_ADDR_LOC 21
11989: PUSH
11990: LD_INT 2
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: ST_TO_ADDR
// for i := 1 to 8 do
12000: LD_ADDR_VAR 0 4
12004: PUSH
12005: DOUBLE
12006: LD_INT 1
12008: DEC
12009: ST_TO_ADDR
12010: LD_INT 8
12012: PUSH
12013: FOR_TO
12014: IFFALSE 12065
// if ( Side_Nations [ i ] = 3 ) then
12016: LD_EXP 18
12020: PUSH
12021: LD_VAR 0 4
12025: ARRAY
12026: PUSH
12027: LD_INT 3
12029: EQUAL
12030: IFFALSE 12063
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12032: LD_ADDR_EXP 18
12036: PUSH
12037: LD_EXP 18
12041: PPUSH
12042: LD_VAR 0 4
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 2
12052: PPUSH
12053: CALL_OW 12
12057: PPUSH
12058: CALL_OW 1
12062: ST_TO_ADDR
12063: GO 12013
12065: POP
12066: POP
// end ; end ;
12067: GO 12070
12069: POP
// for i := 1 to 8 do
12070: LD_ADDR_VAR 0 4
12074: PUSH
12075: DOUBLE
12076: LD_INT 1
12078: DEC
12079: ST_TO_ADDR
12080: LD_INT 8
12082: PUSH
12083: FOR_TO
12084: IFFALSE 12168
// if Side_Positions [ i ] then
12086: LD_EXP 17
12090: PUSH
12091: LD_VAR 0 4
12095: ARRAY
12096: IFFALSE 12166
// begin for j in Unavailable_Techs do
12098: LD_ADDR_VAR 0 5
12102: PUSH
12103: LD_VAR 0 2
12107: PUSH
12108: FOR_IN
12109: IFFALSE 12130
// SetTech ( j , i , 0 ) ;
12111: LD_VAR 0 5
12115: PPUSH
12116: LD_VAR 0 4
12120: PPUSH
12121: LD_INT 0
12123: PPUSH
12124: CALL_OW 322
12128: GO 12108
12130: POP
12131: POP
// for j in Unavailable_Builds do
12132: LD_ADDR_VAR 0 5
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: FOR_IN
12143: IFFALSE 12164
// SetRestrict ( j , i , 0 ) ;
12145: LD_VAR 0 5
12149: PPUSH
12150: LD_VAR 0 4
12154: PPUSH
12155: LD_INT 0
12157: PPUSH
12158: CALL_OW 324
12162: GO 12142
12164: POP
12165: POP
// end ;
12166: GO 12083
12168: POP
12169: POP
// end ;
12170: LD_VAR 0 1
12174: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12175: LD_INT 0
12177: PPUSH
12178: PPUSH
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
// for i := 1 to Restricted_Builds do
12184: LD_ADDR_VAR 0 2
12188: PUSH
12189: DOUBLE
12190: LD_INT 1
12192: DEC
12193: ST_TO_ADDR
12194: LD_LOC 20
12198: PUSH
12199: FOR_TO
12200: IFFALSE 12510
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12202: LD_LOC 20
12206: PUSH
12207: LD_VAR 0 2
12211: ARRAY
12212: PUSH
12213: LD_INT 1
12215: ARRAY
12216: PUSH
12217: LD_INT 31
12219: DOUBLE
12220: EQUAL
12221: IFTRUE 12237
12223: LD_INT 32
12225: DOUBLE
12226: EQUAL
12227: IFTRUE 12237
12229: LD_INT 33
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12248
12237: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12238: LD_ADDR_VAR 0 6
12242: PUSH
12243: LD_STRING #Turrets
12245: ST_TO_ADDR
12246: GO 12293
12248: LD_INT 4
12250: DOUBLE
12251: EQUAL
12252: IFTRUE 12262
12254: LD_INT 5
12256: DOUBLE
12257: EQUAL
12258: IFTRUE 12262
12260: GO 12273
12262: POP
// btype := #Armouries ; b_Behemoth :
12263: LD_ADDR_VAR 0 6
12267: PUSH
12268: LD_STRING #Armouries
12270: ST_TO_ADDR
12271: GO 12293
12273: LD_INT 37
12275: DOUBLE
12276: EQUAL
12277: IFTRUE 12281
12279: GO 12292
12281: POP
// btype := #Behemoths ; end ;
12282: LD_ADDR_VAR 0 6
12286: PUSH
12287: LD_STRING #Behemoths
12289: ST_TO_ADDR
12290: GO 12293
12292: POP
// list := [ ] ;
12293: LD_ADDR_VAR 0 7
12297: PUSH
12298: EMPTY
12299: ST_TO_ADDR
// for j := 1 to 8 do
12300: LD_ADDR_VAR 0 3
12304: PUSH
12305: DOUBLE
12306: LD_INT 1
12308: DEC
12309: ST_TO_ADDR
12310: LD_INT 8
12312: PUSH
12313: FOR_TO
12314: IFFALSE 12407
// if Side_Positions [ j ] then
12316: LD_EXP 17
12320: PUSH
12321: LD_VAR 0 3
12325: ARRAY
12326: IFFALSE 12405
// begin amount := 0 ;
12328: LD_ADDR_VAR 0 5
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12336: LD_ADDR_VAR 0 4
12340: PUSH
12341: LD_LOC 20
12345: PUSH
12346: LD_VAR 0 2
12350: ARRAY
12351: PUSH
12352: FOR_IN
12353: IFFALSE 12401
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 5
12364: PUSH
12365: LD_INT 22
12367: PUSH
12368: LD_VAR 0 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_VAR 0 4
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PPUSH
12393: CALL_OW 69
12397: PLUS
12398: ST_TO_ADDR
12399: GO 12352
12401: POP
12402: POP
// break ;
12403: GO 12407
// end ;
12405: GO 12313
12407: POP
12408: POP
// list := [ ] ;
12409: LD_ADDR_VAR 0 7
12413: PUSH
12414: EMPTY
12415: ST_TO_ADDR
// for j := 1 to 8 do
12416: LD_ADDR_VAR 0 3
12420: PUSH
12421: DOUBLE
12422: LD_INT 1
12424: DEC
12425: ST_TO_ADDR
12426: LD_INT 8
12428: PUSH
12429: FOR_TO
12430: IFFALSE 12450
// list := list ^ amount ;
12432: LD_ADDR_VAR 0 7
12436: PUSH
12437: LD_VAR 0 7
12441: PUSH
12442: LD_VAR 0 5
12446: ADD
12447: ST_TO_ADDR
12448: GO 12429
12450: POP
12451: POP
// Already_Built := Already_Built ^ [ list ] ;
12452: LD_ADDR_LOC 26
12456: PUSH
12457: LD_LOC 26
12461: PUSH
12462: LD_VAR 0 7
12466: PUSH
12467: EMPTY
12468: LIST
12469: ADD
12470: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
12471: LD_ADDR_LOC 27
12475: PUSH
12476: LD_LOC 27
12480: PUSH
12481: LD_VAR 0 6
12485: PUSH
12486: LD_VAR 0 5
12490: PUSH
12491: LD_LOC 21
12495: PUSH
12496: LD_VAR 0 2
12500: ARRAY
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: ADD
12507: ST_TO_ADDR
// end ;
12508: GO 12199
12510: POP
12511: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12512: LD_ADDR_LOC 28
12516: PUSH
12517: LD_INT 0
12519: PUSH
12520: LD_INT 0
12522: PUSH
12523: LD_INT 0
12525: PUSH
12526: LD_INT 0
12528: PUSH
12529: LD_INT 0
12531: PUSH
12532: LD_INT 0
12534: PUSH
12535: LD_INT 0
12537: PUSH
12538: LD_INT 0
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// if Limits_Info then
12551: LD_LOC 27
12555: IFFALSE 12571
// Limits_Info := #Limits ^ Limits_Info ;
12557: LD_ADDR_LOC 27
12561: PUSH
12562: LD_STRING #Limits
12564: PUSH
12565: LD_LOC 27
12569: ADD
12570: ST_TO_ADDR
// end ;
12571: LD_VAR 0 1
12575: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12576: LD_INT 0
12578: PPUSH
12579: PPUSH
12580: PPUSH
12581: PPUSH
// for i := 1 to Restricted_Builds do
12582: LD_ADDR_VAR 0 7
12586: PUSH
12587: DOUBLE
12588: LD_INT 1
12590: DEC
12591: ST_TO_ADDR
12592: LD_LOC 20
12596: PUSH
12597: FOR_TO
12598: IFFALSE 13021
// if BType in Restricted_Builds [ i ] then
12600: LD_VAR 0 2
12604: PUSH
12605: LD_LOC 20
12609: PUSH
12610: LD_VAR 0 7
12614: ARRAY
12615: IN
12616: IFFALSE 13019
// begin if old_side then
12618: LD_VAR 0 4
12622: IFFALSE 12748
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12624: LD_LOC 26
12628: PUSH
12629: LD_VAR 0 7
12633: ARRAY
12634: PUSH
12635: LD_VAR 0 3
12639: ARRAY
12640: PUSH
12641: LD_VAR 0 5
12645: PLUS
12646: PUSH
12647: LD_LOC 21
12651: PUSH
12652: LD_VAR 0 7
12656: ARRAY
12657: GREATER
12658: IFFALSE 12684
// begin SetSide ( un , old_side ) ;
12660: LD_VAR 0 1
12664: PPUSH
12665: LD_VAR 0 4
12669: PPUSH
12670: CALL_OW 235
// count := 0 ;
12674: LD_ADDR_VAR 0 5
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// end else
12682: GO 12748
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12684: LD_ADDR_LOC 26
12688: PUSH
12689: LD_LOC 26
12693: PPUSH
12694: LD_VAR 0 7
12698: PPUSH
12699: LD_LOC 26
12703: PUSH
12704: LD_VAR 0 7
12708: ARRAY
12709: PPUSH
12710: LD_VAR 0 4
12714: PPUSH
12715: LD_LOC 26
12719: PUSH
12720: LD_VAR 0 7
12724: ARRAY
12725: PUSH
12726: LD_VAR 0 4
12730: ARRAY
12731: PUSH
12732: LD_VAR 0 5
12736: MINUS
12737: PPUSH
12738: CALL_OW 1
12742: PPUSH
12743: CALL_OW 1
12747: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12748: LD_ADDR_LOC 26
12752: PUSH
12753: LD_LOC 26
12757: PPUSH
12758: LD_VAR 0 7
12762: PPUSH
12763: LD_LOC 26
12767: PUSH
12768: LD_VAR 0 7
12772: ARRAY
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_LOC 26
12783: PUSH
12784: LD_VAR 0 7
12788: ARRAY
12789: PUSH
12790: LD_VAR 0 3
12794: ARRAY
12795: PUSH
12796: LD_VAR 0 5
12800: PLUS
12801: PPUSH
12802: CALL_OW 1
12806: PPUSH
12807: CALL_OW 1
12811: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12812: LD_VAR 0 5
12816: PUSH
12817: LD_INT 0
12819: NONEQUAL
12820: PUSH
12821: LD_VAR 0 3
12825: PUSH
12826: LD_OWVAR 2
12830: EQUAL
12831: AND
12832: IFFALSE 12875
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12834: LD_ADDR_LOC 27
12838: PUSH
12839: LD_LOC 27
12843: PPUSH
12844: LD_INT 3
12846: PUSH
12847: LD_VAR 0 7
12851: MUL
12852: PPUSH
12853: LD_LOC 26
12857: PUSH
12858: LD_VAR 0 7
12862: ARRAY
12863: PUSH
12864: LD_VAR 0 3
12868: ARRAY
12869: PPUSH
12870: CALL_OW 1
12874: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12875: LD_LOC 26
12879: PUSH
12880: LD_VAR 0 7
12884: ARRAY
12885: PUSH
12886: LD_VAR 0 3
12890: ARRAY
12891: PUSH
12892: LD_LOC 21
12896: PUSH
12897: LD_VAR 0 7
12901: ARRAY
12902: GREATER
12903: IFFALSE 12930
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12905: LD_ADDR_LOC 28
12909: PUSH
12910: LD_LOC 28
12914: PPUSH
12915: LD_VAR 0 3
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: CALL_OW 1
12927: ST_TO_ADDR
// end else
12928: GO 13017
// begin for j := 1 to Restricted_Builds do
12930: LD_ADDR_VAR 0 8
12934: PUSH
12935: DOUBLE
12936: LD_INT 1
12938: DEC
12939: ST_TO_ADDR
12940: LD_LOC 20
12944: PUSH
12945: FOR_TO
12946: IFFALSE 12990
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12948: LD_LOC 26
12952: PUSH
12953: LD_VAR 0 8
12957: ARRAY
12958: PUSH
12959: LD_VAR 0 3
12963: ARRAY
12964: PUSH
12965: LD_LOC 21
12969: PUSH
12970: LD_VAR 0 8
12974: ARRAY
12975: GREATER
12976: IFFALSE 12988
// begin Is_Cheater := true ;
12978: LD_ADDR_VAR 0 9
12982: PUSH
12983: LD_INT 1
12985: ST_TO_ADDR
// break ;
12986: GO 12990
// end ;
12988: GO 12945
12990: POP
12991: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12992: LD_ADDR_LOC 28
12996: PUSH
12997: LD_LOC 28
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_VAR 0 9
13011: PPUSH
13012: CALL_OW 1
13016: ST_TO_ADDR
// end ; break ;
13017: GO 13021
// end ;
13019: GO 12597
13021: POP
13022: POP
// end ;
13023: LD_VAR 0 6
13027: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13028: LD_VAR 0 5
13032: PUSH
13033: LD_LOC 22
13037: IN
13038: PUSH
13039: LD_VAR 0 2
13043: PUSH
13044: LD_LOC 23
13048: IN
13049: OR
13050: PUSH
13051: LD_VAR 0 4
13055: PUSH
13056: LD_LOC 24
13060: IN
13061: OR
13062: PUSH
13063: LD_VAR 0 3
13067: PUSH
13068: LD_LOC 25
13072: IN
13073: OR
13074: IFFALSE 13085
// ComCancel ( factory ) ;
13076: LD_VAR 0 1
13080: PPUSH
13081: CALL_OW 127
// end ;
13085: PPOPN 5
13087: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13088: LD_VAR 0 2
13092: PUSH
13093: LD_LOC 22
13097: IN
13098: IFFALSE 13109
// ComCancel ( building ) ;
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 127
// end ; end_of_file
13109: PPOPN 2
13111: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13116: LD_ADDR_VAR 0 2
13120: PUSH
13121: LD_STRING #Multi1x1-Time
13123: PUSH
13124: LD_OWVAR 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: ST_TO_ADDR
// if ( ExtraStrings ) then
13133: LD_EXP 51
13137: IFFALSE 13159
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_VAR 0 2
13148: PUSH
13149: LD_STRING 
13151: ADD
13152: PUSH
13153: LD_EXP 51
13157: ADD
13158: ST_TO_ADDR
// if ( LimitsStrings ) then
13159: CALL 9952 0 0
13163: IFFALSE 13185
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_VAR 0 2
13174: PUSH
13175: LD_STRING 
13177: ADD
13178: PUSH
13179: CALL 9952 0 0
13183: ADD
13184: ST_TO_ADDR
// Display_Strings := AllStrings ;
13185: LD_ADDR_OWVAR 47
13189: PUSH
13190: LD_VAR 0 2
13194: ST_TO_ADDR
// end ;
13195: LD_VAR 0 1
13199: RET
// every 0 0$1 do
13200: GO 13202
13202: DISABLE
// begin ShowTimer ;
13203: CALL 13112 0 0
// enable ;
13207: ENABLE
// end ;
13208: END
