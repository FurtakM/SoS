// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2405 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2828 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 3
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 4
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 5
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 2
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 6
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 7
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 8
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 9
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 10
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 28
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 18
 835: PUSH
 836: LD_INT 4
 838: PUSH
 839: LD_INT 5
 841: PUSH
 842: LD_INT 6
 844: PUSH
 845: LD_INT 7
 847: PUSH
 848: LD_INT 8
 850: PUSH
 851: LD_INT 9
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 17
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 18
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 5
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 23
 913: PUSH
 914: LD_EXP 5
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_EXP 5
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 14
 941: PUSH
 942: LD_EXP 5
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 26
 955: PUSH
 956: LD_EXP 5
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 5
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 5
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 9
1008: ARRAY
1009: IFFALSE 1141
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1011: LD_ADDR_EXP 35
1015: PUSH
1016: LD_INT 1
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: LD_INT 2
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 1
1036: PUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 1
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 12
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 24
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 12
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 23
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 42
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 21
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 42
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_EXP 5
1150: PUSH
1151: LD_INT 11
1153: ARRAY
1154: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1155: LD_ADDR_EXP 21
1159: PUSH
1160: LD_EXP 5
1164: PUSH
1165: LD_INT 12
1167: ARRAY
1168: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1169: LD_ADDR_EXP 25
1173: PUSH
1174: LD_EXP 5
1178: PUSH
1179: LD_INT 13
1181: ARRAY
1182: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1183: LD_ADDR_EXP 32
1187: PUSH
1188: LD_EXP 5
1192: PUSH
1193: LD_INT 14
1195: ARRAY
1196: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 5
1206: PUSH
1207: LD_INT 15
1209: ARRAY
1210: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1211: LD_ADDR_EXP 27
1215: PUSH
1216: LD_EXP 5
1220: PUSH
1221: LD_INT 18
1223: ARRAY
1224: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1225: LD_ADDR_EXP 19
1229: PUSH
1230: LD_EXP 5
1234: PUSH
1235: LD_INT 21
1237: ARRAY
1238: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1239: LD_ADDR_EXP 30
1243: PUSH
1244: LD_INT 10
1246: PUSH
1247: LD_INT 11
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: LD_INT 13
1255: PUSH
1256: LD_INT 14
1258: PUSH
1259: LD_INT 15
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1270: LD_ADDR_VAR 0 8
1274: PUSH
1275: LD_INT 16
1277: PPUSH
1278: LD_INT 3
1280: PPUSH
1281: CALL 60271 0 2
1285: PUSH
1286: LD_INT 17
1288: PPUSH
1289: LD_INT 2
1291: PPUSH
1292: CALL 60271 0 2
1296: PUSH
1297: LD_INT 18
1299: PPUSH
1300: LD_INT 2
1302: PPUSH
1303: CALL 60271 0 2
1307: PUSH
1308: LD_INT 19
1310: PPUSH
1311: LD_INT 5
1313: PPUSH
1314: CALL 60271 0 2
1318: PUSH
1319: LD_INT 20
1321: PPUSH
1322: LD_INT 5
1324: PPUSH
1325: CALL 60271 0 2
1329: PUSH
1330: LD_INT 21
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL 60271 0 2
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_VAR 0 8
1363: PPUSH
1364: CALL 19576 0 1
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1474
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1372: LD_ADDR_EXP 20
1376: PUSH
1377: LD_EXP 20
1381: PPUSH
1382: LD_VAR 0 3
1386: PPUSH
1387: LD_VAR 0 8
1391: PUSH
1392: LD_VAR 0 3
1396: ARRAY
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PPUSH
1402: LD_VAR 0 8
1406: PUSH
1407: LD_VAR 0 3
1411: ARRAY
1412: PUSH
1413: LD_INT 3
1415: ARRAY
1416: PPUSH
1417: LD_INT 10
1419: PPUSH
1420: CALL_OW 272
1424: PUSH
1425: LD_VAR 0 8
1429: PUSH
1430: LD_VAR 0 3
1434: ARRAY
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_VAR 0 8
1444: PUSH
1445: LD_VAR 0 3
1449: ARRAY
1450: PUSH
1451: LD_INT 3
1453: ARRAY
1454: PPUSH
1455: LD_INT 10
1457: PPUSH
1458: CALL_OW 273
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 1
1471: ST_TO_ADDR
1472: GO 1369
1474: POP
1475: POP
// if hasOil then
1476: LD_VAR 0 5
1480: IFFALSE 1591
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_EXP 5
1491: PUSH
1492: LD_INT 6
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: EQUAL
1499: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1500: LD_ADDR_EXP 11
1504: PUSH
1505: LD_INT 22
1507: PPUSH
1508: LD_VAR 0 4
1512: PPUSH
1513: CALL 60104 0 2
1517: PUSH
1518: LD_INT 24
1520: PPUSH
1521: LD_VAR 0 4
1525: PPUSH
1526: CALL 60104 0 2
1530: PUSH
1531: LD_INT 26
1533: PPUSH
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL 60104 0 2
1543: PUSH
1544: LD_INT 28
1546: PPUSH
1547: LD_VAR 0 4
1551: PPUSH
1552: CALL 60104 0 2
1556: PUSH
1557: LD_INT 30
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 60104 0 2
1569: PUSH
1570: LD_INT 32
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 60104 0 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: ST_TO_ADDR
// end ; if hasSib then
1591: LD_VAR 0 6
1595: IFFALSE 1706
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1597: LD_ADDR_VAR 0 4
1601: PUSH
1602: LD_EXP 5
1606: PUSH
1607: LD_INT 7
1609: ARRAY
1610: PUSH
1611: LD_INT 2
1613: EQUAL
1614: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1615: LD_ADDR_EXP 12
1619: PUSH
1620: LD_INT 23
1622: PPUSH
1623: LD_VAR 0 4
1627: PPUSH
1628: CALL 60104 0 2
1632: PUSH
1633: LD_INT 25
1635: PPUSH
1636: LD_VAR 0 4
1640: PPUSH
1641: CALL 60104 0 2
1645: PUSH
1646: LD_INT 27
1648: PPUSH
1649: LD_VAR 0 4
1653: PPUSH
1654: CALL 60104 0 2
1658: PUSH
1659: LD_INT 29
1661: PPUSH
1662: LD_VAR 0 4
1666: PPUSH
1667: CALL 60104 0 2
1671: PUSH
1672: LD_INT 31
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 60104 0 2
1684: PUSH
1685: LD_INT 33
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 60104 0 2
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1706: LD_VAR 0 7
1710: PUSH
1711: LD_INT 1
1713: GREATEREQUAL
1714: IFFALSE 1726
// mpDepots := startPos ;
1716: LD_ADDR_EXP 13
1720: PUSH
1721: LD_VAR 0 8
1725: ST_TO_ADDR
// end ;
1726: LD_VAR 0 2
1730: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1731: GO 1733
1733: DISABLE
1734: LD_INT 0
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
1740: PPUSH
1741: PPUSH
1742: PPUSH
1743: PPUSH
// begin if not mpShipments then
1744: LD_EXP 26
1748: NOT
1749: IFFALSE 1753
// exit ;
1751: GO 2242
// case mpShipments of 1 :
1753: LD_EXP 26
1757: PUSH
1758: LD_INT 1
1760: DOUBLE
1761: EQUAL
1762: IFTRUE 1766
1764: GO 1801
1766: POP
// begin time := 0 0$30 ;
1767: LD_ADDR_VAR 0 4
1771: PUSH
1772: LD_INT 1050
1774: ST_TO_ADDR
// normalTime := 0 0$30 ;
1775: LD_ADDR_VAR 0 6
1779: PUSH
1780: LD_INT 1050
1782: ST_TO_ADDR
// maxTime := 1 1$20 ;
1783: LD_ADDR_VAR 0 8
1787: PUSH
1788: LD_INT 2800
1790: ST_TO_ADDR
// delayTime := 0 0$5 ;
1791: LD_ADDR_VAR 0 7
1795: PUSH
1796: LD_INT 175
1798: ST_TO_ADDR
// end ; 2 :
1799: GO 1931
1801: LD_INT 2
1803: DOUBLE
1804: EQUAL
1805: IFTRUE 1809
1807: GO 1844
1809: POP
// begin time := 0 0$25 ;
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: LD_INT 875
1817: ST_TO_ADDR
// normalTime := 0 0$25 ;
1818: LD_ADDR_VAR 0 6
1822: PUSH
1823: LD_INT 875
1825: ST_TO_ADDR
// maxTime := 1 1$10 ;
1826: LD_ADDR_VAR 0 8
1830: PUSH
1831: LD_INT 2450
1833: ST_TO_ADDR
// delayTime := 0 0$4 ;
1834: LD_ADDR_VAR 0 7
1838: PUSH
1839: LD_INT 140
1841: ST_TO_ADDR
// end ; 3 :
1842: GO 1931
1844: LD_INT 3
1846: DOUBLE
1847: EQUAL
1848: IFTRUE 1852
1850: GO 1887
1852: POP
// begin time := 0 0$20 ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: LD_INT 700
1860: ST_TO_ADDR
// normalTime := 0 0$20 ;
1861: LD_ADDR_VAR 0 6
1865: PUSH
1866: LD_INT 700
1868: ST_TO_ADDR
// maxTime := 1 1$00 ;
1869: LD_ADDR_VAR 0 8
1873: PUSH
1874: LD_INT 2100
1876: ST_TO_ADDR
// delayTime := 0 0$3 ;
1877: LD_ADDR_VAR 0 7
1881: PUSH
1882: LD_INT 105
1884: ST_TO_ADDR
// end ; 4 :
1885: GO 1931
1887: LD_INT 4
1889: DOUBLE
1890: EQUAL
1891: IFTRUE 1895
1893: GO 1930
1895: POP
// begin time := 0 0$15 ;
1896: LD_ADDR_VAR 0 4
1900: PUSH
1901: LD_INT 525
1903: ST_TO_ADDR
// normalTime := 0 0$15 ;
1904: LD_ADDR_VAR 0 6
1908: PUSH
1909: LD_INT 525
1911: ST_TO_ADDR
// maxTime := 0 0$55 ;
1912: LD_ADDR_VAR 0 8
1916: PUSH
1917: LD_INT 1925
1919: ST_TO_ADDR
// delayTime := 0 0$2 ;
1920: LD_ADDR_VAR 0 7
1924: PUSH
1925: LD_INT 70
1927: ST_TO_ADDR
// end ; end ;
1928: GO 1931
1930: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: LD_INT 4
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: LD_INT 6
1944: PUSH
1945: LD_INT 7
1947: PUSH
1948: LD_INT 8
1950: PUSH
1951: LD_INT 9
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: ST_TO_ADDR
// areas := [ eastIsleArea , westIsleArea ] ;
1962: LD_ADDR_VAR 0 5
1966: PUSH
1967: LD_INT 1
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// for i := 1 to 8 do
1977: LD_ADDR_VAR 0 1
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 8
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2038
// begin if not mpSidePositions [ i ] then
1993: LD_EXP 6
1997: PUSH
1998: LD_VAR 0 1
2002: ARRAY
2003: NOT
2004: IFFALSE 2008
// continue ;
2006: GO 1990
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2008: LD_ADDR_VAR 0 5
2012: PUSH
2013: LD_VAR 0 5
2017: PUSH
2018: LD_VAR 0 3
2022: PUSH
2023: LD_EXP 6
2027: PUSH
2028: LD_VAR 0 1
2032: ARRAY
2033: ARRAY
2034: ADD
2035: ST_TO_ADDR
// end ;
2036: GO 1990
2038: POP
2039: POP
// x := 1 ;
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// repeat wait ( time ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: CALL_OW 67
// x := Inc ( x ) ;
2057: LD_ADDR_VAR 0 2
2061: PUSH
2062: LD_VAR 0 2
2066: PPUSH
2067: CALL 56925 0 1
2071: ST_TO_ADDR
// if x > 5 then
2072: LD_VAR 0 2
2076: PUSH
2077: LD_INT 5
2079: GREATER
2080: IFFALSE 2090
// x := 1 ;
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_INT 1
2089: ST_TO_ADDR
// for i in areas do
2090: LD_ADDR_VAR 0 1
2094: PUSH
2095: LD_VAR 0 5
2099: PUSH
2100: FOR_IN
2101: IFFALSE 2140
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2103: LD_VAR 0 1
2107: PPUSH
2108: LD_INT 1
2110: PPUSH
2111: CALL_OW 287
2115: PUSH
2116: LD_INT 20
2118: LESS
2119: IFFALSE 2138
// begin CreateCratesArea ( x , i , true ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_VAR 0 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 55
// end ; end ;
2138: GO 2100
2140: POP
2141: POP
// if GetResourceArea ( nearRiverArea , mat_cans ) < 400 then
2142: LD_INT 3
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 287
2152: PUSH
2153: LD_INT 400
2155: LESS
2156: IFFALSE 2200
// for i := 1 to Count ( areas ) do
2158: LD_ADDR_VAR 0 1
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_VAR 0 5
2172: PPUSH
2173: CALL 19576 0 1
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2198
// CreateCratesArea ( x , nearRiverArea , true ) ;
2181: LD_VAR 0 2
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: CALL_OW 55
2196: GO 2178
2198: POP
2199: POP
// time := time + delayTime ;
2200: LD_ADDR_VAR 0 4
2204: PUSH
2205: LD_VAR 0 4
2209: PUSH
2210: LD_VAR 0 7
2214: PLUS
2215: ST_TO_ADDR
// if time > maxTime then
2216: LD_VAR 0 4
2220: PUSH
2221: LD_VAR 0 8
2225: GREATER
2226: IFFALSE 2238
// time := normalTime ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_VAR 0 6
2237: ST_TO_ADDR
// until false ;
2238: LD_INT 0
2240: IFFALSE 2048
// end ; end_of_file
2242: PPOPN 8
2244: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2245: LD_VAR 0 1
2249: PPUSH
2250: CALL 9331 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: CALL 60906 0 1
// end ;
2263: PPOPN 1
2265: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL 9348 0 1
// end ;
2275: PPOPN 1
2277: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL 61959 0 1
2287: PPOPN 1
2289: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2290: LD_VAR 0 1
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL 9389 0 2
2304: PPOPN 2
2306: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2307: LD_VAR 0 1
2311: PPUSH
2312: LD_VAR 0 2
2316: PPUSH
2317: CALL 61712 0 2
2321: PPOPN 2
2323: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2324: LD_VAR 0 1
2328: PPUSH
2329: LD_VAR 0 2
2333: PPUSH
2334: LD_VAR 0 3
2338: PPUSH
2339: CALL 62012 0 3
2343: PPOPN 3
2345: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2346: LD_VAR 0 1
2350: PPUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: LD_VAR 0 3
2360: PPUSH
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_VAR 0 5
2370: PPUSH
2371: CALL 62696 0 5
2375: PPOPN 5
2377: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_VAR 0 2
2387: PPUSH
2388: LD_VAR 0 3
2392: PPUSH
2393: LD_VAR 0 4
2397: PPUSH
2398: CALL 62799 0 4
2402: PPOPN 4
2404: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
// disable ( mpActive ) ;
2409: LD_INT 100
2411: DISABLE_MARKED
// disable ( mpWin ) ;
2412: LD_INT 101
2414: DISABLE_MARKED
// disable ( mpLose ) ;
2415: LD_INT 102
2417: DISABLE_MARKED
// mpGameType := 0 ;
2418: LD_ADDR_EXP 2
2422: PUSH
2423: LD_INT 0
2425: ST_TO_ADDR
// mpGameSettings := [ ] ;
2426: LD_ADDR_EXP 5
2430: PUSH
2431: EMPTY
2432: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2433: LD_ADDR_EXP 3
2437: PUSH
2438: EMPTY
2439: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2440: LD_ADDR_EXP 4
2444: PUSH
2445: EMPTY
2446: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2447: LD_ADDR_EXP 28
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2462: LD_ADDR_EXP 11
2466: PUSH
2467: EMPTY
2468: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2469: LD_ADDR_EXP 12
2473: PUSH
2474: EMPTY
2475: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2476: LD_ADDR_EXP 41
2480: PUSH
2481: EMPTY
2482: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2483: LD_ADDR_EXP 42
2487: PUSH
2488: EMPTY
2489: ST_TO_ADDR
// mpDepots := [ ] ;
2490: LD_ADDR_EXP 13
2494: PUSH
2495: EMPTY
2496: ST_TO_ADDR
// mpBuildings := [ ] ;
2497: LD_ADDR_EXP 16
2501: PUSH
2502: EMPTY
2503: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2504: LD_ADDR_EXP 17
2508: PUSH
2509: EMPTY
2510: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2511: LD_ADDR_EXP 18
2515: PUSH
2516: EMPTY
2517: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2518: LD_ADDR_EXP 19
2522: PUSH
2523: EMPTY
2524: ST_TO_ADDR
// mpStartingResources := [ ] ;
2525: LD_ADDR_EXP 14
2529: PUSH
2530: EMPTY
2531: ST_TO_ADDR
// mpStartPos := [ ] ;
2532: LD_ADDR_EXP 20
2536: PUSH
2537: EMPTY
2538: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2539: LD_ADDR_EXP 21
2543: PUSH
2544: LD_INT 1
2546: NEG
2547: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2548: LD_ADDR_EXP 22
2552: PUSH
2553: EMPTY
2554: ST_TO_ADDR
// mpApemans := [ ] ;
2555: LD_ADDR_EXP 29
2559: PUSH
2560: EMPTY
2561: ST_TO_ADDR
// mpApemansArea := [ ] ;
2562: LD_ADDR_EXP 30
2566: PUSH
2567: EMPTY
2568: ST_TO_ADDR
// mpRespawn := [ ] ;
2569: LD_ADDR_EXP 32
2573: PUSH
2574: EMPTY
2575: ST_TO_ADDR
// mpKingArea := 0 ;
2576: LD_ADDR_EXP 33
2580: PUSH
2581: LD_INT 0
2583: ST_TO_ADDR
// mpPoints := [ ] ;
2584: LD_ADDR_EXP 34
2588: PUSH
2589: EMPTY
2590: ST_TO_ADDR
// mpVehicles := 0 ;
2591: LD_ADDR_EXP 35
2595: PUSH
2596: LD_INT 0
2598: ST_TO_ADDR
// mpShipments := 0 ;
2599: LD_ADDR_EXP 26
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2607: LD_ADDR_EXP 39
2611: PUSH
2612: EMPTY
2613: PUSH
2614: EMPTY
2615: PUSH
2616: EMPTY
2617: PUSH
2618: EMPTY
2619: PUSH
2620: EMPTY
2621: PUSH
2622: EMPTY
2623: PUSH
2624: EMPTY
2625: PUSH
2626: EMPTY
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: EMPTY
2644: PUSH
2645: EMPTY
2646: PUSH
2647: EMPTY
2648: PUSH
2649: EMPTY
2650: PUSH
2651: EMPTY
2652: PUSH
2653: EMPTY
2654: PUSH
2655: EMPTY
2656: PUSH
2657: EMPTY
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2669: LD_ADDR_EXP 40
2673: PUSH
2674: LD_INT 0
2676: PUSH
2677: LD_INT 0
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: LD_INT 0
2685: PUSH
2686: LD_INT 0
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: LD_INT 0
2694: PUSH
2695: LD_INT 0
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ST_TO_ADDR
// mpEmissions := 0 ;
2708: LD_ADDR_EXP 36
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// mpTeleports := 0 ;
2716: LD_ADDR_EXP 43
2720: PUSH
2721: LD_INT 0
2723: ST_TO_ADDR
// mpArtifacts := 0 ;
2724: LD_ADDR_EXP 44
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2732: LD_ADDR_EXP 45
2736: PUSH
2737: LD_INT 0
2739: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2740: LD_ADDR_EXP 24
2744: PUSH
2745: LD_INT 3
2747: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2748: LD_ADDR_EXP 23
2752: PUSH
2753: LD_INT 15
2755: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2756: LD_ADDR_EXP 37
2760: PUSH
2761: LD_INT 0
2763: ST_TO_ADDR
// mpGameActive := false ;
2764: LD_ADDR_EXP 38
2768: PUSH
2769: LD_INT 0
2771: ST_TO_ADDR
// mpBlockRespThread := false ;
2772: LD_ADDR_EXP 46
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// for i := 1 to 32 do
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: DOUBLE
2786: LD_INT 1
2788: DEC
2789: ST_TO_ADDR
2790: LD_INT 32
2792: PUSH
2793: FOR_TO
2794: IFFALSE 2821
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2796: LD_ADDR_EXP 5
2800: PUSH
2801: LD_EXP 5
2805: PPUSH
2806: LD_VAR 0 2
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 1
2818: ST_TO_ADDR
2819: GO 2793
2821: POP
2822: POP
// end ;
2823: LD_VAR 0 1
2827: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2828: LD_INT 0
2830: PPUSH
2831: PPUSH
2832: PPUSH
2833: PPUSH
2834: PPUSH
2835: PPUSH
2836: PPUSH
2837: PPUSH
2838: PPUSH
2839: PPUSH
2840: PPUSH
2841: PPUSH
2842: PPUSH
2843: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
2844: LD_ADDR_VAR 0 14
2848: PUSH
2849: LD_INT 1
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 3
2857: PUSH
2858: LD_INT 5
2860: PUSH
2861: LD_INT 6
2863: PUSH
2864: LD_INT 7
2866: PUSH
2867: LD_INT 8
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: ST_TO_ADDR
// for i in gameTypes do
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_VAR 0 14
2888: PUSH
2889: FOR_IN
2890: IFFALSE 2899
// disable ( i ) ;
2892: LD_VAR 0 2
2896: DISABLE_MARKED
2897: GO 2889
2899: POP
2900: POP
// if Multiplayer then
2901: LD_OWVAR 4
2905: IFFALSE 3089
// begin mpGameType := mp_game_type ;
2907: LD_ADDR_EXP 2
2911: PUSH
2912: LD_OWVAR 6
2916: ST_TO_ADDR
// your_side := mp_player_side ;
2917: LD_ADDR_OWVAR 2
2921: PUSH
2922: LD_OWVAR 7
2926: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2927: LD_ADDR_EXP 6
2931: PUSH
2932: LD_OWVAR 17
2936: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2937: LD_ADDR_EXP 7
2941: PUSH
2942: LD_OWVAR 15
2946: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2947: LD_ADDR_EXP 8
2951: PUSH
2952: LD_OWVAR 16
2956: ST_TO_ADDR
// mpTeams := mp_teams ;
2957: LD_ADDR_EXP 9
2961: PUSH
2962: LD_OWVAR 12
2966: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2967: LD_ADDR_VAR 0 2
2971: PUSH
2972: DOUBLE
2973: LD_INT 1
2975: DEC
2976: ST_TO_ADDR
2977: LD_EXP 3
2981: PPUSH
2982: CALL 19576 0 1
2986: PUSH
2987: FOR_TO
2988: IFFALSE 3064
// begin setting := mpGameSettingsKeys [ i ] ;
2990: LD_ADDR_VAR 0 12
2994: PUSH
2995: LD_EXP 3
2999: PUSH
3000: LD_VAR 0 2
3004: ARRAY
3005: ST_TO_ADDR
// if setting then
3006: LD_VAR 0 12
3010: IFFALSE 3062
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3012: LD_ADDR_EXP 5
3016: PUSH
3017: LD_EXP 5
3021: PPUSH
3022: LD_VAR 0 2
3026: PPUSH
3027: LD_EXP 4
3031: PUSH
3032: LD_VAR 0 2
3036: ARRAY
3037: PUSH
3038: LD_VAR 0 2
3042: PUSH
3043: LD_INT 1
3045: MINUS
3046: PPUSH
3047: CALL_OW 426
3051: PUSH
3052: LD_INT 1
3054: PLUS
3055: ARRAY
3056: PPUSH
3057: CALL_OW 1
3061: ST_TO_ADDR
// end ;
3062: GO 2987
3064: POP
3065: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3066: LD_ADDR_EXP 10
3070: PUSH
3071: LD_EXP 7
3075: PUSH
3076: LD_INT 0
3078: PUSH
3079: EMPTY
3080: LIST
3081: DIFF
3082: PUSH
3083: LD_INT 1
3085: GREATER
3086: ST_TO_ADDR
// end else
3087: GO 3089
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3089: LD_EXP 2
3093: PPUSH
3094: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3098: LD_EXP 17
3102: PPUSH
3103: CALL 19576 0 1
3107: IFFALSE 3138
// begin for i in mpMarkedAreas do
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_EXP 17
3118: PUSH
3119: FOR_IN
3120: IFFALSE 3136
// SetAreaMapShow ( i , 0 ) ;
3122: LD_VAR 0 2
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 424
3134: GO 3119
3136: POP
3137: POP
// end ; for i := 1 to 8 do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_INT 8
3150: PUSH
3151: FOR_TO
3152: IFFALSE 4611
// begin if not mpSidePositions [ i ] then
3154: LD_EXP 6
3158: PUSH
3159: LD_VAR 0 2
3163: ARRAY
3164: NOT
3165: IFFALSE 3169
// continue ;
3167: GO 3151
// side := i ;
3169: LD_ADDR_VAR 0 7
3173: PUSH
3174: LD_VAR 0 2
3178: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3179: LD_ADDR_VAR 0 9
3183: PUSH
3184: LD_EXP 8
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3195: LD_ADDR_VAR 0 8
3199: PUSH
3200: LD_EXP 6
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3211: LD_EXP 11
3215: PPUSH
3216: CALL 19576 0 1
3220: IFFALSE 3297
// begin for j in mpOilDeposits [ pos ] do
3222: LD_ADDR_VAR 0 3
3226: PUSH
3227: LD_EXP 11
3231: PUSH
3232: LD_VAR 0 8
3236: ARRAY
3237: PUSH
3238: FOR_IN
3239: IFFALSE 3295
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3241: LD_VAR 0 3
3245: PUSH
3246: LD_INT 1
3248: ARRAY
3249: PPUSH
3250: LD_VAR 0 3
3254: PUSH
3255: LD_INT 2
3257: ARRAY
3258: PPUSH
3259: LD_INT 2
3261: PPUSH
3262: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3266: LD_VAR 0 3
3270: PUSH
3271: LD_INT 1
3273: ARRAY
3274: PPUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 2
3282: ARRAY
3283: PPUSH
3284: LD_VAR 0 7
3288: PPUSH
3289: CALL_OW 441
// end ;
3293: GO 3238
3295: POP
3296: POP
// end ; if Count ( mpSibDeposits ) then
3297: LD_EXP 12
3301: PPUSH
3302: CALL 19576 0 1
3306: IFFALSE 3383
// begin for j in mpSibDeposits [ pos ] do
3308: LD_ADDR_VAR 0 3
3312: PUSH
3313: LD_EXP 12
3317: PUSH
3318: LD_VAR 0 8
3322: ARRAY
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3381
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: LD_INT 3
3347: PPUSH
3348: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3352: LD_VAR 0 3
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: PPUSH
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 2
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 7
3374: PPUSH
3375: CALL_OW 441
// end ;
3379: GO 3324
3381: POP
3382: POP
// end ; InitBc ;
3383: CALL_OW 21
// InitUc ;
3387: CALL_OW 18
// uc_side := side ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_VAR 0 7
3400: ST_TO_ADDR
// uc_nation := nation ;
3401: LD_ADDR_OWVAR 21
3405: PUSH
3406: LD_VAR 0 9
3410: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3411: LD_EXP 21
3415: PUSH
3416: LD_INT 1
3418: NEG
3419: GREATER
3420: IFFALSE 3579
// begin x := mpStartPos [ pos ] [ 1 ] ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_EXP 20
3431: PUSH
3432: LD_VAR 0 8
3436: ARRAY
3437: PUSH
3438: LD_INT 1
3440: ARRAY
3441: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3442: LD_ADDR_VAR 0 6
3446: PUSH
3447: LD_EXP 20
3451: PUSH
3452: LD_VAR 0 8
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3462: LD_VAR 0 5
3466: PPUSH
3467: LD_VAR 0 6
3471: PPUSH
3472: LD_INT 12
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3482: LD_ADDR_EXP 22
3486: PUSH
3487: LD_EXP 22
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_VAR 0 7
3501: PPUSH
3502: LD_VAR 0 5
3506: PPUSH
3507: LD_VAR 0 6
3511: PPUSH
3512: LD_INT 1
3514: PUSH
3515: LD_INT 100
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: LD_INT 2
3524: PUSH
3525: LD_INT 70
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PUSH
3532: LD_INT 3
3534: PUSH
3535: LD_INT 40
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 10
3544: PUSH
3545: LD_INT 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 20
3554: PUSH
3555: LD_INT 100
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 418
3573: PPUSH
3574: CALL_OW 1
3578: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3579: LD_EXP 13
3583: PPUSH
3584: CALL 19576 0 1
3588: IFFALSE 3787
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
3590: LD_EXP 2
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: LD_INT 8
3600: PUSH
3601: LD_INT 6
3603: PUSH
3604: LD_INT 7
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: IN
3613: IFFALSE 3633
// begin bc_level := 10 ;
3615: LD_ADDR_OWVAR 43
3619: PUSH
3620: LD_INT 10
3622: ST_TO_ADDR
// bc_type := b_warehouse ;
3623: LD_ADDR_OWVAR 42
3627: PUSH
3628: LD_INT 1
3630: ST_TO_ADDR
// end else
3631: GO 3649
// begin bc_level := 0 ;
3633: LD_ADDR_OWVAR 43
3637: PUSH
3638: LD_INT 0
3640: ST_TO_ADDR
// bc_type := b_depot ;
3641: LD_ADDR_OWVAR 42
3645: PUSH
3646: LD_INT 0
3648: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_EXP 13
3658: PUSH
3659: LD_VAR 0 8
3663: ARRAY
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: LD_EXP 13
3673: PUSH
3674: LD_VAR 0 8
3678: ARRAY
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: LD_EXP 13
3688: PUSH
3689: LD_VAR 0 8
3693: ARRAY
3694: PUSH
3695: LD_INT 3
3697: ARRAY
3698: PPUSH
3699: CALL_OW 47
3703: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3704: LD_VAR 0 4
3708: PPUSH
3709: LD_STRING @
3711: PUSH
3712: LD_VAR 0 7
3716: STR
3717: PPUSH
3718: CALL_OW 500
// if Count ( mpStartingResources ) then
3722: LD_EXP 14
3726: PPUSH
3727: CALL 19576 0 1
3731: IFFALSE 3785
// begin for j := 1 to mpStartingResources do
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: DOUBLE
3739: LD_INT 1
3741: DEC
3742: ST_TO_ADDR
3743: LD_EXP 14
3747: PUSH
3748: FOR_TO
3749: IFFALSE 3783
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3751: LD_VAR 0 4
3755: PPUSH
3756: CALL_OW 274
3760: PPUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_EXP 14
3770: PUSH
3771: LD_VAR 0 3
3775: ARRAY
3776: PPUSH
3777: CALL_OW 277
3781: GO 3748
3783: POP
3784: POP
// end ; end else
3785: GO 3994
// if Count ( mpStartingResources ) then
3787: LD_EXP 14
3791: PPUSH
3792: CALL 19576 0 1
3796: IFFALSE 3994
// begin x := mpStartPos [ pos ] [ 1 ] ;
3798: LD_ADDR_VAR 0 5
3802: PUSH
3803: LD_EXP 20
3807: PUSH
3808: LD_VAR 0 8
3812: ARRAY
3813: PUSH
3814: LD_INT 1
3816: ARRAY
3817: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3818: LD_ADDR_VAR 0 6
3822: PUSH
3823: LD_EXP 20
3827: PUSH
3828: LD_VAR 0 8
3832: ARRAY
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3838: LD_ADDR_VAR 0 3
3842: PUSH
3843: DOUBLE
3844: LD_INT 1
3846: DEC
3847: ST_TO_ADDR
3848: LD_EXP 14
3852: PUSH
3853: FOR_TO
3854: IFFALSE 3992
// begin resources := mpStartingResources [ j ] ;
3856: LD_ADDR_VAR 0 13
3860: PUSH
3861: LD_EXP 14
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: ST_TO_ADDR
// if resources = 0 then
3872: LD_VAR 0 13
3876: PUSH
3877: LD_INT 0
3879: EQUAL
3880: IFFALSE 3884
// continue ;
3882: GO 3853
// repeat if resources >= 50 then
3884: LD_VAR 0 13
3888: PUSH
3889: LD_INT 50
3891: GREATEREQUAL
3892: IFFALSE 3938
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: LD_INT 5
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_VAR 0 6
3911: PPUSH
3912: LD_INT 6
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 60
// resources := resources - 50 ;
3922: LD_ADDR_VAR 0 13
3926: PUSH
3927: LD_VAR 0 13
3931: PUSH
3932: LD_INT 50
3934: MINUS
3935: ST_TO_ADDR
// end else
3936: GO 3980
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3938: LD_VAR 0 3
3942: PPUSH
3943: LD_VAR 0 13
3947: PUSH
3948: LD_INT 10
3950: DIV
3951: PPUSH
3952: LD_VAR 0 5
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: LD_INT 6
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 60
// resources := 0 ;
3972: LD_ADDR_VAR 0 13
3976: PUSH
3977: LD_INT 0
3979: ST_TO_ADDR
// end ; until resources <= 0 ;
3980: LD_VAR 0 13
3984: PUSH
3985: LD_INT 0
3987: LESSEQUAL
3988: IFFALSE 3884
// end ;
3990: GO 3853
3992: POP
3993: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
3994: LD_EXP 16
3998: PPUSH
3999: CALL 19576 0 1
4003: IFFALSE 4023
4005: PUSH
4006: LD_EXP 2
4010: PUSH
4011: LD_INT 2
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: IN
4021: NOT
4022: AND
4023: IFFALSE 4101
// begin for j in mpBuildings [ pos ] do
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_EXP 16
4034: PUSH
4035: LD_VAR 0 8
4039: ARRAY
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4099
// begin bc_level := 0 ;
4044: LD_ADDR_OWVAR 43
4048: PUSH
4049: LD_INT 0
4051: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4052: LD_ADDR_OWVAR 42
4056: PUSH
4057: LD_VAR 0 3
4061: PUSH
4062: LD_INT 1
4064: ARRAY
4065: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4066: LD_VAR 0 3
4070: PUSH
4071: LD_INT 2
4073: ARRAY
4074: PPUSH
4075: LD_VAR 0 3
4079: PUSH
4080: LD_INT 3
4082: ARRAY
4083: PPUSH
4084: LD_VAR 0 3
4088: PUSH
4089: LD_INT 4
4091: ARRAY
4092: PPUSH
4093: CALL_OW 47
// end ;
4097: GO 4041
4099: POP
4100: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4101: LD_EXP 25
4105: IFFALSE 4125
4107: PUSH
4108: LD_INT 20
4110: PPUSH
4111: LD_VAR 0 7
4115: PPUSH
4116: CALL_OW 321
4120: PUSH
4121: LD_INT 1
4123: EQUAL
4124: AND
4125: IFFALSE 4142
// SetTech ( tech_SibDet , side , state_researched ) ;
4127: LD_INT 20
4129: PPUSH
4130: LD_VAR 0 7
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: CALL_OW 322
// if not mpArtifacts then
4142: LD_EXP 44
4146: NOT
4147: IFFALSE 4164
// SetTech ( tech_artifact , side , state_disabled ) ;
4149: LD_INT 24
4151: PPUSH
4152: LD_VAR 0 7
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 322
// if mpSibBomb = 1 then
4164: LD_EXP 27
4168: PUSH
4169: LD_INT 1
4171: EQUAL
4172: IFFALSE 4191
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4174: LD_INT 25
4176: PPUSH
4177: LD_VAR 0 7
4181: PPUSH
4182: LD_INT 1
4184: PPUSH
4185: CALL_OW 322
// end else
4189: GO 4206
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4191: LD_INT 25
4193: PPUSH
4194: LD_VAR 0 7
4198: PPUSH
4199: LD_INT 0
4201: PPUSH
4202: CALL_OW 322
// end ; if mpVehicles then
4206: LD_EXP 35
4210: IFFALSE 4309
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: LD_VAR 0 7
4221: PPUSH
4222: LD_VAR 0 9
4226: PPUSH
4227: LD_EXP 35
4231: PPUSH
4232: CALL 5568 0 3
4236: PUSH
4237: FOR_IN
4238: IFFALSE 4307
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 5
4250: PPUSH
4251: CALL_OW 12
4255: PPUSH
4256: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4260: LD_VAR 0 3
4264: PPUSH
4265: LD_EXP 20
4269: PUSH
4270: LD_VAR 0 8
4274: ARRAY
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: PPUSH
4280: LD_EXP 20
4284: PUSH
4285: LD_VAR 0 8
4289: ARRAY
4290: PUSH
4291: LD_INT 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 12
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 50
// end ;
4305: GO 4237
4307: POP
4308: POP
// end ; uc_nation := nation ;
4309: LD_ADDR_OWVAR 21
4313: PUSH
4314: LD_VAR 0 9
4318: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4319: LD_EXP 2
4323: PUSH
4324: LD_INT 6
4326: PUSH
4327: LD_INT 7
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: IN
4334: IFFALSE 4359
4336: PUSH
4337: LD_EXP 6
4341: PUSH
4342: LD_VAR 0 2
4346: ARRAY
4347: PUSH
4348: LD_INT 1
4350: PUSH
4351: LD_INT 2
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: IN
4358: AND
4359: IFFALSE 4407
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4361: LD_ADDR_VAR 0 11
4365: PUSH
4366: LD_VAR 0 7
4370: PPUSH
4371: LD_VAR 0 9
4375: PPUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 23
4385: PUSH
4386: LD_INT 2
4388: DIV
4389: PLUS
4390: PPUSH
4391: LD_EXP 24
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: PPUSH
4400: CALL 5023 0 4
4404: ST_TO_ADDR
4405: GO 4437
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4407: LD_ADDR_VAR 0 11
4411: PUSH
4412: LD_VAR 0 7
4416: PPUSH
4417: LD_VAR 0 9
4421: PPUSH
4422: LD_EXP 23
4426: PPUSH
4427: LD_EXP 24
4431: PPUSH
4432: CALL 5023 0 4
4436: ST_TO_ADDR
// for j in team do
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: LD_VAR 0 11
4446: PUSH
4447: FOR_IN
4448: IFFALSE 4497
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4450: LD_VAR 0 3
4454: PPUSH
4455: LD_EXP 20
4459: PUSH
4460: LD_VAR 0 8
4464: ARRAY
4465: PUSH
4466: LD_INT 1
4468: ARRAY
4469: PPUSH
4470: LD_EXP 20
4474: PUSH
4475: LD_VAR 0 8
4479: ARRAY
4480: PUSH
4481: LD_INT 2
4483: ARRAY
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 50
4495: GO 4447
4497: POP
4498: POP
// if mpApemans then
4499: LD_EXP 29
4503: IFFALSE 4609
// begin for j := 1 to mpApemans do
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_EXP 29
4519: PUSH
4520: FOR_TO
4521: IFFALSE 4607
// begin PrepareApeman ( - 5 ) ;
4523: LD_INT 5
4525: NEG
4526: PPUSH
4527: CALL 51679 0 1
// ape := CreateHuman ;
4531: LD_ADDR_VAR 0 10
4535: PUSH
4536: CALL_OW 44
4540: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4541: LD_ADDR_EXP 31
4545: PUSH
4546: LD_EXP 31
4550: PPUSH
4551: LD_VAR 0 8
4555: PPUSH
4556: LD_EXP 31
4560: PUSH
4561: LD_VAR 0 8
4565: ARRAY
4566: PPUSH
4567: LD_VAR 0 10
4571: PPUSH
4572: CALL 55552 0 2
4576: PPUSH
4577: CALL_OW 1
4581: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4582: LD_VAR 0 10
4586: PPUSH
4587: LD_EXP 30
4591: PUSH
4592: LD_VAR 0 8
4596: ARRAY
4597: PPUSH
4598: LD_INT 0
4600: PPUSH
4601: CALL_OW 49
// end ;
4605: GO 4520
4607: POP
4608: POP
// end ; end ;
4609: GO 3151
4611: POP
4612: POP
// if not mpTeamGame then
4613: LD_EXP 10
4617: NOT
4618: IFFALSE 4716
// begin for i := 1 to 8 do
4620: LD_ADDR_VAR 0 2
4624: PUSH
4625: DOUBLE
4626: LD_INT 1
4628: DEC
4629: ST_TO_ADDR
4630: LD_INT 8
4632: PUSH
4633: FOR_TO
4634: IFFALSE 4712
// for j := 1 to 8 do
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: DOUBLE
4642: LD_INT 1
4644: DEC
4645: ST_TO_ADDR
4646: LD_INT 8
4648: PUSH
4649: FOR_TO
4650: IFFALSE 4708
// if i <> j then
4652: LD_VAR 0 2
4656: PUSH
4657: LD_VAR 0 3
4661: NONEQUAL
4662: IFFALSE 4686
// SetAttitude ( i , j , att_neutral , true ) else
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 0
4676: PPUSH
4677: LD_INT 1
4679: PPUSH
4680: CALL_OW 80
4684: GO 4706
// SetAttitude ( i , j , att_friend , true ) ;
4686: LD_VAR 0 2
4690: PPUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: LD_INT 1
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 80
4706: GO 4649
4708: POP
4709: POP
4710: GO 4633
4712: POP
4713: POP
// end else
4714: GO 4891
// begin if mpSharedVision then
4716: LD_EXP 15
4720: IFFALSE 4785
// begin for i in mpTeams do
4722: LD_ADDR_VAR 0 2
4726: PUSH
4727: LD_EXP 9
4731: PUSH
4732: FOR_IN
4733: IFFALSE 4783
// for j := 2 to i do
4735: LD_ADDR_VAR 0 3
4739: PUSH
4740: DOUBLE
4741: LD_INT 2
4743: DEC
4744: ST_TO_ADDR
4745: LD_VAR 0 2
4749: PUSH
4750: FOR_TO
4751: IFFALSE 4779
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4753: LD_VAR 0 2
4757: PUSH
4758: LD_VAR 0 3
4762: ARRAY
4763: PPUSH
4764: LD_VAR 0 2
4768: PUSH
4769: LD_INT 1
4771: ARRAY
4772: PPUSH
4773: CALL_OW 343
4777: GO 4750
4779: POP
4780: POP
4781: GO 4732
4783: POP
4784: POP
// end ; for i := 1 to 8 do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: DOUBLE
4791: LD_INT 1
4793: DEC
4794: ST_TO_ADDR
4795: LD_INT 8
4797: PUSH
4798: FOR_TO
4799: IFFALSE 4889
// for j := 1 to 8 do
4801: LD_ADDR_VAR 0 3
4805: PUSH
4806: DOUBLE
4807: LD_INT 1
4809: DEC
4810: ST_TO_ADDR
4811: LD_INT 8
4813: PUSH
4814: FOR_TO
4815: IFFALSE 4885
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4817: LD_EXP 7
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: PUSH
4828: LD_EXP 7
4832: PUSH
4833: LD_VAR 0 3
4837: ARRAY
4838: EQUAL
4839: IFFALSE 4863
// SetAttitude ( i , j , att_friend , true ) else
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_VAR 0 3
4850: PPUSH
4851: LD_INT 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 80
4861: GO 4883
// SetAttitude ( i , j , att_enemy , true ) ;
4863: LD_VAR 0 2
4867: PPUSH
4868: LD_VAR 0 3
4872: PPUSH
4873: LD_INT 2
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 80
4883: GO 4814
4885: POP
4886: POP
4887: GO 4798
4889: POP
4890: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4891: LD_ADDR_OWVAR 71
4895: PUSH
4896: LD_EXP 8
4900: PUSH
4901: LD_OWVAR 2
4905: ARRAY
4906: ST_TO_ADDR
// if IAmSpec then
4907: CALL_OW 531
4911: IFFALSE 4952
// begin FogOff ( true ) ;
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4920: LD_EXP 28
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PUSH
4929: LD_INT 2
4931: DIV
4932: PPUSH
4933: LD_EXP 28
4937: PUSH
4938: LD_INT 2
4940: ARRAY
4941: PUSH
4942: LD_INT 2
4944: DIV
4945: PPUSH
4946: CALL_OW 86
// end else
4950: GO 4998
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4952: LD_EXP 20
4956: PUSH
4957: LD_EXP 6
4961: PUSH
4962: LD_OWVAR 2
4966: ARRAY
4967: ARRAY
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: PPUSH
4973: LD_EXP 20
4977: PUSH
4978: LD_EXP 6
4982: PUSH
4983: LD_OWVAR 2
4987: ARRAY
4988: ARRAY
4989: PUSH
4990: LD_INT 2
4992: ARRAY
4993: PPUSH
4994: CALL_OW 86
// end ; BeginBuildUp ;
4998: CALL 6101 0 0
// enable ( mpActive ) ;
5002: LD_INT 100
5004: ENABLE_MARKED
// enable ( mpGameType ) ;
5005: LD_EXP 2
5009: ENABLE_MARKED
// mpGameActive := true ;
5010: LD_ADDR_EXP 38
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// end ;
5018: LD_VAR 0 1
5022: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5023: LD_INT 0
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
// result := [ ] ;
5030: LD_ADDR_VAR 0 5
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// class := class_soldier ;
5037: LD_ADDR_VAR 0 8
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// uc_side := side ;
5045: LD_ADDR_OWVAR 20
5049: PUSH
5050: LD_VAR 0 1
5054: ST_TO_ADDR
// uc_nation := nation ;
5055: LD_ADDR_OWVAR 21
5059: PUSH
5060: LD_VAR 0 2
5064: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5065: LD_ADDR_OWVAR 26
5069: PUSH
5070: LD_OWVAR 19
5074: PUSH
5075: LD_VAR 0 1
5079: ARRAY
5080: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5081: LD_INT 1
5083: PPUSH
5084: LD_INT 2
5086: PPUSH
5087: CALL_OW 12
5091: PPUSH
5092: LD_VAR 0 8
5096: PPUSH
5097: LD_VAR 0 4
5101: PUSH
5102: LD_INT 2
5104: PLUS
5105: PPUSH
5106: CALL_OW 380
// hc_importance := 105 ;
5110: LD_ADDR_OWVAR 32
5114: PUSH
5115: LD_INT 105
5117: ST_TO_ADDR
// if Multiplayer then
5118: LD_OWVAR 4
5122: IFFALSE 5162
// begin hc_gallery := MULTIAVATARS ;
5124: LD_ADDR_OWVAR 33
5128: PUSH
5129: LD_STRING MULTIAVATARS
5131: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5132: LD_ADDR_OWVAR 34
5136: PUSH
5137: LD_VAR 0 1
5141: PPUSH
5142: CALL_OW 525
5146: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5147: LD_ADDR_OWVAR 27
5151: PUSH
5152: LD_VAR 0 1
5156: PPUSH
5157: CALL_OW 526
5161: ST_TO_ADDR
// end ; commander := CreateHuman ;
5162: LD_ADDR_VAR 0 9
5166: PUSH
5167: CALL_OW 44
5171: ST_TO_ADDR
// result := Join ( result , commander ) ;
5172: LD_ADDR_VAR 0 5
5176: PUSH
5177: LD_VAR 0 5
5181: PPUSH
5182: LD_VAR 0 9
5186: PPUSH
5187: CALL 55552 0 2
5191: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5192: LD_ADDR_EXP 40
5196: PUSH
5197: LD_EXP 40
5201: PPUSH
5202: LD_VAR 0 1
5206: PPUSH
5207: LD_VAR 0 9
5211: PPUSH
5212: CALL_OW 1
5216: ST_TO_ADDR
// if mpTeamPreset then
5217: LD_LOC 1
5221: IFFALSE 5317
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5223: LD_LOC 1
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PPUSH
5232: LD_VAR 0 5
5236: PUSH
5237: LD_VAR 0 5
5241: ARRAY
5242: PPUSH
5243: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5247: LD_VAR 0 5
5251: PUSH
5252: LD_VAR 0 5
5256: ARRAY
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_LOC 1
5265: PUSH
5266: LD_INT 1
5268: ARRAY
5269: PPUSH
5270: LD_INT 1
5272: PPUSH
5273: CALL_OW 260
5277: PPUSH
5278: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5282: LD_VAR 0 5
5286: PUSH
5287: LD_VAR 0 5
5291: ARRAY
5292: PPUSH
5293: LD_INT 2
5295: PPUSH
5296: LD_LOC 1
5300: PUSH
5301: LD_INT 1
5303: ARRAY
5304: PPUSH
5305: LD_INT 2
5307: PPUSH
5308: CALL_OW 260
5312: PPUSH
5313: CALL_OW 239
// end ; InitHc_All ( ) ;
5317: CALL_OW 584
// class := 2 ;
5321: LD_ADDR_VAR 0 8
5325: PUSH
5326: LD_INT 2
5328: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5329: LD_ADDR_VAR 0 6
5333: PUSH
5334: DOUBLE
5335: LD_INT 1
5337: DEC
5338: ST_TO_ADDR
5339: LD_VAR 0 3
5343: PUSH
5344: LD_INT 1
5346: MINUS
5347: PUSH
5348: FOR_TO
5349: IFFALSE 5544
// begin PrepareHuman ( false , class , skill ) ;
5351: LD_INT 0
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: LD_VAR 0 4
5363: PPUSH
5364: CALL_OW 380
// un := CreateHuman ;
5368: LD_ADDR_VAR 0 7
5372: PUSH
5373: CALL_OW 44
5377: ST_TO_ADDR
// result := Join ( result , un ) ;
5378: LD_ADDR_VAR 0 5
5382: PUSH
5383: LD_VAR 0 5
5387: PPUSH
5388: LD_VAR 0 7
5392: PPUSH
5393: CALL 55552 0 2
5397: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5398: LD_LOC 1
5402: PPUSH
5403: CALL 19576 0 1
5407: PUSH
5408: LD_VAR 0 3
5412: GREATEREQUAL
5413: IFFALSE 5509
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5415: LD_LOC 1
5419: PUSH
5420: LD_VAR 0 6
5424: PUSH
5425: LD_INT 1
5427: PLUS
5428: ARRAY
5429: PPUSH
5430: LD_VAR 0 7
5434: PPUSH
5435: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5439: LD_VAR 0 7
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_LOC 1
5451: PUSH
5452: LD_VAR 0 6
5456: PUSH
5457: LD_INT 1
5459: PLUS
5460: ARRAY
5461: PPUSH
5462: LD_INT 1
5464: PPUSH
5465: CALL_OW 260
5469: PPUSH
5470: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5474: LD_VAR 0 7
5478: PPUSH
5479: LD_INT 2
5481: PPUSH
5482: LD_LOC 1
5486: PUSH
5487: LD_VAR 0 6
5491: PUSH
5492: LD_INT 1
5494: PLUS
5495: ARRAY
5496: PPUSH
5497: LD_INT 2
5499: PPUSH
5500: CALL_OW 260
5504: PPUSH
5505: CALL_OW 239
// end ; class := Inc ( class ) ;
5509: LD_ADDR_VAR 0 8
5513: PUSH
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL 56925 0 1
5523: ST_TO_ADDR
// if class = 5 then
5524: LD_VAR 0 8
5528: PUSH
5529: LD_INT 5
5531: EQUAL
5532: IFFALSE 5542
// class := 1 ;
5534: LD_ADDR_VAR 0 8
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// end ;
5542: GO 5348
5544: POP
5545: POP
// if not mpTeamPreset then
5546: LD_LOC 1
5550: NOT
5551: IFFALSE 5563
// mpTeamPreset := result ;
5553: LD_ADDR_LOC 1
5557: PUSH
5558: LD_VAR 0 5
5562: ST_TO_ADDR
// end ;
5563: LD_VAR 0 5
5567: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5568: LD_INT 0
5570: PPUSH
5571: PPUSH
// result := [ ] ;
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: EMPTY
5578: ST_TO_ADDR
// if not vehicles then
5579: LD_VAR 0 3
5583: NOT
5584: IFFALSE 5588
// exit ;
5586: GO 5802
// for i := 1 to vehicles [ nation ] do
5588: LD_ADDR_VAR 0 5
5592: PUSH
5593: DOUBLE
5594: LD_INT 1
5596: DEC
5597: ST_TO_ADDR
5598: LD_VAR 0 3
5602: PUSH
5603: LD_VAR 0 2
5607: ARRAY
5608: PUSH
5609: FOR_TO
5610: IFFALSE 5800
// begin uc_side := side ;
5612: LD_ADDR_OWVAR 20
5616: PUSH
5617: LD_VAR 0 1
5621: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5622: LD_VAR 0 3
5626: PUSH
5627: LD_VAR 0 2
5631: ARRAY
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL 19576 0 1
5643: PUSH
5644: LD_INT 4
5646: GREATER
5647: IFFALSE 5677
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5649: LD_ADDR_OWVAR 21
5653: PUSH
5654: LD_VAR 0 3
5658: PUSH
5659: LD_VAR 0 2
5663: ARRAY
5664: PUSH
5665: LD_VAR 0 5
5669: ARRAY
5670: PUSH
5671: LD_INT 5
5673: ARRAY
5674: ST_TO_ADDR
5675: GO 5687
// uc_nation := nation ;
5677: LD_ADDR_OWVAR 21
5681: PUSH
5682: LD_VAR 0 2
5686: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5687: LD_VAR 0 3
5691: PUSH
5692: LD_VAR 0 2
5696: ARRAY
5697: PUSH
5698: LD_VAR 0 5
5702: ARRAY
5703: PUSH
5704: LD_INT 1
5706: ARRAY
5707: PPUSH
5708: LD_VAR 0 3
5712: PUSH
5713: LD_VAR 0 2
5717: ARRAY
5718: PUSH
5719: LD_VAR 0 5
5723: ARRAY
5724: PUSH
5725: LD_INT 2
5727: ARRAY
5728: PPUSH
5729: LD_VAR 0 3
5733: PUSH
5734: LD_VAR 0 2
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 5
5744: ARRAY
5745: PUSH
5746: LD_INT 3
5748: ARRAY
5749: PPUSH
5750: LD_VAR 0 3
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 5
5765: ARRAY
5766: PUSH
5767: LD_INT 4
5769: ARRAY
5770: PPUSH
5771: LD_INT 80
5773: PPUSH
5774: CALL 22372 0 5
// result := Join ( result , CreateVehicle ) ;
5778: LD_ADDR_VAR 0 4
5782: PUSH
5783: LD_VAR 0 4
5787: PPUSH
5788: CALL_OW 45
5792: PPUSH
5793: CALL 55552 0 2
5797: ST_TO_ADDR
// end ;
5798: GO 5609
5800: POP
5801: POP
// end ;
5802: LD_VAR 0 4
5806: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
// for i in mpBattleFlags do
5811: LD_ADDR_VAR 0 3
5815: PUSH
5816: LD_EXP 22
5820: PUSH
5821: FOR_IN
5822: IFFALSE 5899
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5824: LD_VAR 0 3
5828: PPUSH
5829: LD_INT 1
5831: PUSH
5832: LD_VAR 0 1
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 2
5843: PUSH
5844: LD_VAR 0 1
5848: PUSH
5849: LD_REAL  7.00000000000000E-0001
5852: MUL
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 3
5860: PUSH
5861: LD_VAR 0 1
5865: PUSH
5866: LD_REAL  4.00000000000000E-0001
5869: MUL
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 20
5877: PUSH
5878: LD_VAR 0 1
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL_OW 423
5897: GO 5821
5899: POP
5900: POP
// end ;
5901: LD_VAR 0 2
5905: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5906: LD_INT 100
5908: IFFALSE 6003
5910: GO 5912
5912: DISABLE
5913: LD_INT 0
5915: PPUSH
5916: PPUSH
// begin if mpBattleFlag <= 0 then
5917: LD_EXP 21
5921: PUSH
5922: LD_INT 0
5924: LESSEQUAL
5925: IFFALSE 5929
// exit ;
5927: GO 6003
// strength := 100 ;
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_INT 100
5936: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5937: LD_EXP 21
5941: PPUSH
5942: CALL_OW 67
// strength := Dec ( strength ) ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL 56947 0 1
5960: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: CALL 5807 0 1
// until not strength ;
5970: LD_VAR 0 2
5974: NOT
5975: IFFALSE 5937
// for i in mpBattleFlags do
5977: LD_ADDR_VAR 0 1
5981: PUSH
5982: LD_EXP 22
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6001
// KillBattleFlag ( i ) ;
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 419
5999: GO 5987
6001: POP
6002: POP
// end ;
6003: PPOPN 2
6005: END
// every 0 0$1 marked mpActive do var side , tmp ;
6006: GO 6008
6008: DISABLE
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
// begin if mpSibBomb <= 1 then
6013: LD_EXP 27
6017: PUSH
6018: LD_INT 1
6020: LESSEQUAL
6021: IFFALSE 6025
// exit ;
6023: GO 6098
// tmp := mpSibBomb ;
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_EXP 27
6034: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6035: LD_INT 35
6037: PPUSH
6038: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6042: LD_ADDR_VAR 0 2
6046: PUSH
6047: LD_VAR 0 2
6051: PUSH
6052: LD_INT 35
6054: MINUS
6055: ST_TO_ADDR
// until not tmp ;
6056: LD_VAR 0 2
6060: NOT
6061: IFFALSE 6035
// for side := 1 to 8 do
6063: LD_ADDR_VAR 0 1
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_INT 8
6075: PUSH
6076: FOR_TO
6077: IFFALSE 6096
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6079: LD_INT 25
6081: PPUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: LD_INT 1
6089: PPUSH
6090: CALL_OW 322
6094: GO 6076
6096: POP
6097: POP
// end ;
6098: PPOPN 2
6100: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
6105: PPUSH
// mpBuildUpTimeDelay := 0 ;
6106: LD_ADDR_EXP 47
6110: PUSH
6111: LD_INT 0
6113: ST_TO_ADDR
// if not mpBuildUpTime then
6114: LD_EXP 19
6118: NOT
6119: IFFALSE 6123
// exit ;
6121: GO 6312
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6123: LD_ADDR_EXP 47
6127: PUSH
6128: LD_INT 8400
6130: PUSH
6131: LD_INT 2100
6133: PUSH
6134: LD_EXP 19
6138: MUL
6139: PLUS
6140: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6141: LD_ADDR_EXP 48
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// for i := 1 to 8 do
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: DOUBLE
6155: LD_INT 1
6157: DEC
6158: ST_TO_ADDR
6159: LD_INT 8
6161: PUSH
6162: FOR_TO
6163: IFFALSE 6310
// if mpSidePositions [ i ] then
6165: LD_EXP 6
6169: PUSH
6170: LD_VAR 0 2
6174: ARRAY
6175: IFFALSE 6308
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6177: LD_EXP 18
6181: PUSH
6182: LD_EXP 6
6186: PUSH
6187: LD_VAR 0 2
6191: ARRAY
6192: ARRAY
6193: PPUSH
6194: LD_INT 5
6196: PPUSH
6197: CALL_OW 424
// for j := 1 to 8 do
6201: LD_ADDR_VAR 0 3
6205: PUSH
6206: DOUBLE
6207: LD_INT 1
6209: DEC
6210: ST_TO_ADDR
6211: LD_INT 8
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6306
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6217: LD_EXP 6
6221: PUSH
6222: LD_VAR 0 3
6226: ARRAY
6227: IFFALSE 6276
6229: PUSH
6230: LD_EXP 7
6234: PUSH
6235: LD_VAR 0 2
6239: ARRAY
6240: PUSH
6241: LD_EXP 7
6245: PUSH
6246: LD_VAR 0 3
6250: ARRAY
6251: NONEQUAL
6252: IFTRUE 6275
6254: PUSH
6255: LD_EXP 10
6259: NOT
6260: IFFALSE 6274
6262: PUSH
6263: LD_VAR 0 2
6267: PUSH
6268: LD_VAR 0 3
6272: NONEQUAL
6273: AND
6274: OR
6275: AND
6276: IFFALSE 6304
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6278: LD_VAR 0 3
6282: PPUSH
6283: LD_EXP 18
6287: PUSH
6288: LD_EXP 6
6292: PUSH
6293: LD_VAR 0 2
6297: ARRAY
6298: ARRAY
6299: PPUSH
6300: CALL_OW 333
6304: GO 6214
6306: POP
6307: POP
// end ;
6308: GO 6162
6310: POP
6311: POP
// end ;
6312: LD_VAR 0 1
6316: RET
// function EndBuildUp ; var i , j ; begin
6317: LD_INT 0
6319: PPUSH
6320: PPUSH
6321: PPUSH
// mpBuildUpTimeActive := false ;
6322: LD_ADDR_EXP 48
6326: PUSH
6327: LD_INT 0
6329: ST_TO_ADDR
// for i := 1 to 8 do
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_INT 8
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6491
// if mpSidePositions [ i ] then
6346: LD_EXP 6
6350: PUSH
6351: LD_VAR 0 2
6355: ARRAY
6356: IFFALSE 6489
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6358: LD_EXP 18
6362: PUSH
6363: LD_EXP 6
6367: PUSH
6368: LD_VAR 0 2
6372: ARRAY
6373: ARRAY
6374: PPUSH
6375: LD_INT 0
6377: PPUSH
6378: CALL_OW 424
// for j := 1 to 8 do
6382: LD_ADDR_VAR 0 3
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_INT 8
6394: PUSH
6395: FOR_TO
6396: IFFALSE 6487
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6398: LD_EXP 6
6402: PUSH
6403: LD_VAR 0 3
6407: ARRAY
6408: IFFALSE 6457
6410: PUSH
6411: LD_EXP 7
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: PUSH
6422: LD_EXP 7
6426: PUSH
6427: LD_VAR 0 3
6431: ARRAY
6432: NONEQUAL
6433: IFTRUE 6456
6435: PUSH
6436: LD_EXP 10
6440: NOT
6441: IFFALSE 6455
6443: PUSH
6444: LD_VAR 0 2
6448: PUSH
6449: LD_VAR 0 3
6453: NONEQUAL
6454: AND
6455: OR
6456: AND
6457: IFFALSE 6485
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6459: LD_VAR 0 3
6463: PPUSH
6464: LD_EXP 18
6468: PUSH
6469: LD_EXP 6
6473: PUSH
6474: LD_VAR 0 2
6478: ARRAY
6479: ARRAY
6480: PPUSH
6481: CALL_OW 334
6485: GO 6395
6487: POP
6488: POP
// end ;
6489: GO 6343
6491: POP
6492: POP
// end ;
6493: LD_VAR 0 1
6497: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6498: LD_EXP 48
6502: IFFALSE 6681
6504: GO 6506
6506: DISABLE
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
// begin for i := 1 to 8 do
6511: LD_ADDR_VAR 0 1
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_INT 8
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6678
// if mpSidePositions [ i ] then
6527: LD_EXP 6
6531: PUSH
6532: LD_VAR 0 1
6536: ARRAY
6537: IFFALSE 6676
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6539: LD_ADDR_VAR 0 2
6543: PUSH
6544: LD_EXP 18
6548: PUSH
6549: LD_EXP 6
6553: PUSH
6554: LD_VAR 0 1
6558: ARRAY
6559: ARRAY
6560: PPUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 21
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 21
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_OWVAR 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PPUSH
6605: CALL_OW 70
6609: PUSH
6610: FOR_IN
6611: IFFALSE 6674
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6613: LD_EXP 7
6617: PUSH
6618: LD_VAR 0 1
6622: ARRAY
6623: PUSH
6624: LD_EXP 7
6628: PUSH
6629: LD_OWVAR 2
6633: ARRAY
6634: NONEQUAL
6635: IFTRUE 6658
6637: PUSH
6638: LD_EXP 10
6642: NOT
6643: IFFALSE 6657
6645: PUSH
6646: LD_VAR 0 1
6650: PUSH
6651: LD_OWVAR 2
6655: NONEQUAL
6656: AND
6657: OR
6658: IFFALSE 6672
// ComMoveToArea ( un , BuildUpEscape ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_INT 34
6667: PPUSH
6668: CALL_OW 113
6672: GO 6610
6674: POP
6675: POP
6676: GO 6524
6678: POP
6679: POP
// enable ;
6680: ENABLE
// end ;
6681: PPOPN 2
6683: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6684: LD_EXP 19
6688: IFFALSE 6738
6690: GO 6692
6692: DISABLE
6693: LD_INT 0
6695: PPUSH
// begin tmp := mpBuildUpTime ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 19
6705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6706: LD_INT 35
6708: PPUSH
6709: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_VAR 0 1
6722: PUSH
6723: LD_INT 35
6725: MINUS
6726: ST_TO_ADDR
// until not tmp ;
6727: LD_VAR 0 1
6731: NOT
6732: IFFALSE 6706
// EndBuildUp ;
6734: CALL 6317 0 0
// end ;
6738: PPOPN 1
6740: END
// every 0 0$1 trigger mpActive marked mpWin do
6741: LD_INT 100
6743: IFFALSE 6777
6745: GO 6747
6747: DISABLE
// begin if IAmServer then
6748: CALL_OW 518
6752: IFFALSE 6761
// wait ( 0 0$3 ) ;
6754: LD_INT 105
6756: PPUSH
6757: CALL_OW 67
// if Multiplayer then
6761: LD_OWVAR 4
6765: IFFALSE 6773
// YouWinInMultiplayer else
6767: CALL_OW 106
6771: GO 6777
// YouWin ;
6773: CALL_OW 103
// end ;
6777: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6778: LD_INT 0
6780: PPUSH
// result := false ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_INT 0
6788: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6789: LD_VAR 0 1
6793: PUSH
6794: LD_INT 1
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6820
6800: LD_INT 5
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6820
6806: LD_INT 6
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6820
6812: LD_INT 7
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6893
6820: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_VAR 0 2
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 33
6853: PUSH
6854: LD_INT 3
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 33
6863: PUSH
6864: LD_INT 5
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PPUSH
6886: CALL 19576 0 1
6890: ST_TO_ADDR
// end ; GameTypeSurvival :
6891: GO 7289
6893: LD_INT 2
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 7031
6901: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_VAR 0 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 30
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 30
6934: PUSH
6935: LD_INT 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 69
6955: PPUSH
6956: CALL 19576 0 1
6960: IFFALSE 7028
6962: PUSH
6963: LD_INT 22
6965: PUSH
6966: LD_VAR 0 2
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 21
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 33
6990: PUSH
6991: LD_INT 3
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 33
7000: PUSH
7001: LD_INT 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PPUSH
7018: CALL_OW 69
7022: PPUSH
7023: CALL 19576 0 1
7027: AND
7028: ST_TO_ADDR
// end ; GameTypeSurvivalH :
7029: GO 7289
7031: LD_INT 8
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7188
7039: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: LD_EXP 40
7049: PUSH
7050: LD_VAR 0 2
7054: ARRAY
7055: PPUSH
7056: CALL_OW 300
7060: IFFALSE 7117
7062: PUSH
7063: LD_INT 22
7065: PUSH
7066: LD_VAR 0 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 2
7077: PUSH
7078: LD_INT 30
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 30
7090: PUSH
7091: LD_INT 1
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 69
7111: PPUSH
7112: CALL 19576 0 1
7116: AND
7117: IFFALSE 7185
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_VAR 0 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 21
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 33
7147: PUSH
7148: LD_INT 3
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 33
7157: PUSH
7158: LD_INT 5
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 69
7179: PPUSH
7180: CALL 19576 0 1
7184: AND
7185: ST_TO_ADDR
// end ; GameTypeKing :
7186: GO 7289
7188: LD_INT 3
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7288
7196: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 22
7204: PUSH
7205: LD_VAR 0 2
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 2
7216: PUSH
7217: LD_INT 21
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 33
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 33
7239: PUSH
7240: LD_INT 5
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PPUSH
7262: CALL 19576 0 1
7266: IFFALSE 7285
7268: PUSH
7269: LD_VAR 0 2
7273: PPUSH
7274: CALL 64140 0 1
7278: PUSH
7279: LD_EXP 34
7283: LESS
7284: AND
7285: ST_TO_ADDR
// end ; end ;
7286: GO 7289
7288: POP
// end ;
7289: LD_VAR 0 3
7293: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7294: LD_INT 100
7296: IFFALSE 7526
7298: GO 7300
7300: DISABLE
7301: LD_INT 0
7303: PPUSH
7304: PPUSH
// begin if Multiplayer then
7305: LD_OWVAR 4
7309: IFFALSE 7317
// SetPlayerSpectator ( ) else
7311: CALL_OW 572
7315: GO 7326
// FogOff ( your_side ) ;
7317: LD_OWVAR 2
7321: PPUSH
7322: CALL_OW 344
// repeat gameIsOn := false ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// for i := 1 to 8 do
7334: LD_ADDR_VAR 0 2
7338: PUSH
7339: DOUBLE
7340: LD_INT 1
7342: DEC
7343: ST_TO_ADDR
7344: LD_INT 8
7346: PUSH
7347: FOR_TO
7348: IFFALSE 7478
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7350: LD_EXP 6
7354: PUSH
7355: LD_VAR 0 2
7359: ARRAY
7360: IFFALSE 7373
7362: PUSH
7363: LD_VAR 0 2
7367: PPUSH
7368: CALL_OW 108
7372: AND
7373: IFFALSE 7387
7375: PUSH
7376: LD_VAR 0 2
7380: PUSH
7381: LD_OWVAR 2
7385: NONEQUAL
7386: AND
7387: IFFALSE 7476
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7389: LD_EXP 7
7393: PUSH
7394: LD_VAR 0 2
7398: ARRAY
7399: NOT
7400: IFTRUE 7448
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_VAR 0 2
7412: ARRAY
7413: PUSH
7414: LD_EXP 7
7418: PUSH
7419: LD_OWVAR 2
7423: ARRAY
7424: NONEQUAL
7425: IFFALSE 7447
7427: PUSH
7428: LD_OWVAR 2
7432: PPUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: CALL_OW 81
7442: PUSH
7443: LD_INT 1
7445: NONEQUAL
7446: AND
7447: OR
7448: IFFALSE 7476
// if HasPowerByGameType ( mpGameType , i ) then
7450: LD_EXP 2
7454: PPUSH
7455: LD_VAR 0 2
7459: PPUSH
7460: CALL 6778 0 2
7464: IFFALSE 7476
// begin gameIsOn := true ;
7466: LD_ADDR_VAR 0 1
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// break ;
7474: GO 7478
// end ;
7476: GO 7347
7478: POP
7479: POP
// wait ( 100 ) ;
7480: LD_INT 100
7482: PPUSH
7483: CALL_OW 67
// until not gameIsOn ;
7487: LD_VAR 0 1
7491: NOT
7492: IFFALSE 7326
// if IAmServer then
7494: CALL_OW 518
7498: IFFALSE 7507
// wait ( 0 0$3 ) ;
7500: LD_INT 105
7502: PPUSH
7503: CALL_OW 67
// if Multiplayer then
7507: LD_OWVAR 4
7511: IFFALSE 7519
// YouLostInMultiplayer else
7513: CALL_OW 107
7517: GO 7526
// YouLost (  ) ;
7519: LD_STRING 
7521: PPUSH
7522: CALL_OW 104
// end ;
7526: PPOPN 2
7528: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7529: LD_EXP 32
7533: IFFALSE 7917
7535: GO 7537
7537: DISABLE
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7545: LD_ADDR_VAR 0 5
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: LD_INT 4
7561: PUSH
7562: LD_INT 5
7564: PUSH
7565: LD_INT 6
7567: PUSH
7568: LD_INT 7
7570: PUSH
7571: LD_INT 8
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7584: LD_INT 350
7586: PPUSH
7587: CALL_OW 67
// for i := 1 to 8 do
7591: LD_ADDR_VAR 0 1
7595: PUSH
7596: DOUBLE
7597: LD_INT 1
7599: DEC
7600: ST_TO_ADDR
7601: LD_INT 8
7603: PUSH
7604: FOR_TO
7605: IFFALSE 7887
// begin j := sides [ i ] ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_VAR 0 5
7616: PUSH
7617: LD_VAR 0 1
7621: ARRAY
7622: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7623: LD_EXP 39
7627: PUSH
7628: LD_VAR 0 2
7632: ARRAY
7633: PPUSH
7634: CALL 19576 0 1
7638: IFFALSE 7651
7640: PUSH
7641: LD_VAR 0 2
7645: PPUSH
7646: CALL_OW 108
7650: AND
7651: IFFALSE 7669
7653: PUSH
7654: LD_EXP 2
7658: PPUSH
7659: LD_VAR 0 2
7663: PPUSH
7664: CALL 6778 0 2
7668: AND
7669: IFFALSE 7885
// begin wait ( mpRespawn div 2 ) ;
7671: LD_EXP 32
7675: PUSH
7676: LD_INT 2
7678: DIV
7679: PPUSH
7680: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7684: LD_ADDR_VAR 0 3
7688: PUSH
7689: LD_INT 22
7691: PUSH
7692: LD_VAR 0 2
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 50
7703: PUSH
7704: EMPTY
7705: LIST
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 30
7712: PUSH
7713: LD_INT 0
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 30
7722: PUSH
7723: LD_INT 1
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL_OW 69
7744: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7745: LD_VAR 0 3
7749: NOT
7750: IFTRUE 7764
7752: PUSH
7753: LD_VAR 0 2
7757: PPUSH
7758: CALL_OW 108
7762: NOT
7763: OR
7764: IFTRUE 7783
7766: PUSH
7767: LD_EXP 2
7771: PPUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL 6778 0 2
7781: NOT
7782: OR
7783: IFFALSE 7787
// continue ;
7785: GO 7604
// spawn := tmp [ 1 ] ;
7787: LD_ADDR_VAR 0 4
7791: PUSH
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 1
7799: ARRAY
7800: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7801: LD_EXP 39
7805: PUSH
7806: LD_VAR 0 2
7810: ARRAY
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: PPUSH
7816: LD_VAR 0 4
7820: PPUSH
7821: CALL_OW 250
7825: PPUSH
7826: LD_VAR 0 4
7830: PPUSH
7831: CALL_OW 251
7835: PPUSH
7836: LD_INT 32
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7846: LD_ADDR_EXP 39
7850: PUSH
7851: LD_EXP 39
7855: PPUSH
7856: LD_VAR 0 2
7860: PPUSH
7861: LD_EXP 39
7865: PUSH
7866: LD_VAR 0 2
7870: ARRAY
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 3
7879: PPUSH
7880: CALL_OW 1
7884: ST_TO_ADDR
// end ; end ;
7885: GO 7604
7887: POP
7888: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7889: LD_ADDR_VAR 0 5
7893: PUSH
7894: LD_VAR 0 5
7898: PPUSH
7899: LD_INT 1
7901: PPUSH
7902: LD_INT 8
7904: PPUSH
7905: LD_INT 1
7907: PPUSH
7908: CALL 21902 0 4
7912: ST_TO_ADDR
// until false ;
7913: LD_INT 0
7915: IFFALSE 7584
// end ;
7917: PPOPN 5
7919: END
// every 0 0$1 marked mpActive do
7920: GO 7922
7922: DISABLE
// begin enable ;
7923: ENABLE
// if not mpDisplayStrings then
7924: LD_EXP 37
7928: NOT
7929: IFFALSE 7940
// begin display_strings := [ ] ;
7931: LD_ADDR_OWVAR 47
7935: PUSH
7936: EMPTY
7937: ST_TO_ADDR
// exit ;
7938: GO 7950
// end ; display_strings := mpDisplayStrings ;
7940: LD_ADDR_OWVAR 47
7944: PUSH
7945: LD_EXP 37
7949: ST_TO_ADDR
// end ; end_of_file
7950: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
7951: LD_EXP 38
7955: IFFALSE 7963
7957: PUSH
7958: CALL 8173 0 0
7962: AND
7963: IFFALSE 7971
7965: PUSH
7966: LD_OWVAR 4
7970: AND
7971: IFFALSE 8170
7973: GO 7975
7975: DISABLE
7976: LD_INT 0
7978: PPUSH
7979: PPUSH
// begin canWin := false ;
7980: LD_ADDR_VAR 0 2
7984: PUSH
7985: LD_INT 0
7987: ST_TO_ADDR
// if not HasPower ( your_side ) then
7988: LD_OWVAR 2
7992: PPUSH
7993: CALL 8215 0 1
7997: NOT
7998: IFFALSE 8009
// begin Multiplayer_Loose_Message ;
8000: CALL_OW 521
// enable ( mpLose ) ;
8004: LD_INT 102
8006: ENABLE_MARKED
// end else
8007: GO 8170
// begin canWin := true ;
8009: LD_ADDR_VAR 0 2
8013: PUSH
8014: LD_INT 1
8016: ST_TO_ADDR
// for i := 1 to 8 do
8017: LD_ADDR_VAR 0 1
8021: PUSH
8022: DOUBLE
8023: LD_INT 1
8025: DEC
8026: ST_TO_ADDR
8027: LD_INT 8
8029: PUSH
8030: FOR_TO
8031: IFFALSE 8156
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8033: LD_EXP 6
8037: PUSH
8038: LD_VAR 0 1
8042: ARRAY
8043: IFFALSE 8056
8045: PUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 108
8055: AND
8056: IFFALSE 8070
8058: PUSH
8059: LD_VAR 0 1
8063: PUSH
8064: LD_OWVAR 2
8068: NONEQUAL
8069: AND
8070: IFFALSE 8154
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8072: LD_EXP 7
8076: PUSH
8077: LD_VAR 0 1
8081: ARRAY
8082: NOT
8083: IFTRUE 8131
8085: PUSH
8086: LD_EXP 7
8090: PUSH
8091: LD_VAR 0 1
8095: ARRAY
8096: PUSH
8097: LD_EXP 7
8101: PUSH
8102: LD_OWVAR 2
8106: ARRAY
8107: NONEQUAL
8108: IFFALSE 8130
8110: PUSH
8111: LD_OWVAR 2
8115: PPUSH
8116: LD_VAR 0 1
8120: PPUSH
8121: CALL_OW 81
8125: PUSH
8126: LD_INT 1
8128: NONEQUAL
8129: AND
8130: OR
8131: IFFALSE 8154
// if HasPower ( i ) then
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL 8215 0 1
8142: IFFALSE 8154
// begin canWin := false ;
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// break ;
8152: GO 8156
// end ;
8154: GO 8030
8156: POP
8157: POP
// if canWin then
8158: LD_VAR 0 2
8162: IFFALSE 8169
// enable ( mpWin ) else
8164: LD_INT 101
8166: ENABLE_MARKED
8167: GO 8170
// enable ;
8169: ENABLE
// end ; end ;
8170: PPOPN 2
8172: END
// function CanWinLoose ; begin
8173: LD_INT 0
8175: PPUSH
// result := true ;
8176: LD_ADDR_VAR 0 1
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8184: CALL_OW 531
8188: IFFALSE 8200
8190: PUSH
8191: CALL_OW 519
8195: PUSH
8196: LD_INT 1
8198: GREATER
8199: AND
8200: IFFALSE 8210
// result := false ;
8202: LD_ADDR_VAR 0 1
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// end ;
8210: LD_VAR 0 1
8214: RET
// function HasPower ( i ) ; begin
8215: LD_INT 0
8217: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8218: LD_ADDR_VAR 0 2
8222: PUSH
8223: LD_INT 22
8225: PUSH
8226: LD_VAR 0 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 2
8237: PUSH
8238: LD_INT 21
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 33
8250: PUSH
8251: LD_INT 3
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 33
8260: PUSH
8261: LD_INT 5
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// end ; end_of_file
8283: LD_VAR 0 2
8287: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8288: LD_EXP 38
8292: IFFALSE 8335
8294: GO 8296
8296: DISABLE
8297: LD_INT 0
8299: PPUSH
// begin for i := 1 to 8 do
8300: LD_ADDR_VAR 0 1
8304: PUSH
8305: DOUBLE
8306: LD_INT 1
8308: DEC
8309: ST_TO_ADDR
8310: LD_INT 8
8312: PUSH
8313: FOR_TO
8314: IFFALSE 8333
// SetRestrict ( b_depot , i , state_disabled ) ;
8316: LD_INT 0
8318: PPUSH
8319: LD_VAR 0 1
8323: PPUSH
8324: LD_INT 0
8326: PPUSH
8327: CALL_OW 324
8331: GO 8313
8333: POP
8334: POP
// end ;
8335: PPOPN 1
8337: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8338: LD_EXP 38
8342: IFFALSE 8350
8344: PUSH
8345: CALL 8560 0 0
8349: AND
8350: IFFALSE 8358
8352: PUSH
8353: LD_OWVAR 4
8357: AND
8358: IFFALSE 8557
8360: GO 8362
8362: DISABLE
8363: LD_INT 0
8365: PPUSH
8366: PPUSH
// begin canWin := false ;
8367: LD_ADDR_VAR 0 2
8371: PUSH
8372: LD_INT 0
8374: ST_TO_ADDR
// if not HasPower ( your_side ) then
8375: LD_OWVAR 2
8379: PPUSH
8380: CALL 8602 0 1
8384: NOT
8385: IFFALSE 8396
// begin Multiplayer_Loose_Message ;
8387: CALL_OW 521
// enable ( mpLose ) ;
8391: LD_INT 102
8393: ENABLE_MARKED
// end else
8394: GO 8557
// begin canWin := true ;
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// for i := 1 to 8 do
8404: LD_ADDR_VAR 0 1
8408: PUSH
8409: DOUBLE
8410: LD_INT 1
8412: DEC
8413: ST_TO_ADDR
8414: LD_INT 8
8416: PUSH
8417: FOR_TO
8418: IFFALSE 8543
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8420: LD_EXP 6
8424: PUSH
8425: LD_VAR 0 1
8429: ARRAY
8430: IFFALSE 8443
8432: PUSH
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL_OW 108
8442: AND
8443: IFFALSE 8457
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: LD_OWVAR 2
8455: NONEQUAL
8456: AND
8457: IFFALSE 8541
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8459: LD_EXP 7
8463: PUSH
8464: LD_VAR 0 1
8468: ARRAY
8469: NOT
8470: IFTRUE 8518
8472: PUSH
8473: LD_EXP 7
8477: PUSH
8478: LD_VAR 0 1
8482: ARRAY
8483: PUSH
8484: LD_EXP 7
8488: PUSH
8489: LD_OWVAR 2
8493: ARRAY
8494: NONEQUAL
8495: IFFALSE 8517
8497: PUSH
8498: LD_OWVAR 2
8502: PPUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 81
8512: PUSH
8513: LD_INT 1
8515: NONEQUAL
8516: AND
8517: OR
8518: IFFALSE 8541
// if HasPower ( i ) then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL 8602 0 1
8529: IFFALSE 8541
// begin canWin := false ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// break ;
8539: GO 8543
// end ;
8541: GO 8417
8543: POP
8544: POP
// if canWin then
8545: LD_VAR 0 2
8549: IFFALSE 8556
// enable ( mpWin ) else
8551: LD_INT 101
8553: ENABLE_MARKED
8554: GO 8557
// enable ;
8556: ENABLE
// end ; end ;
8557: PPOPN 2
8559: END
// function CanWinLoose ; begin
8560: LD_INT 0
8562: PPUSH
// result := true ;
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: LD_INT 1
8570: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8571: CALL_OW 531
8575: IFFALSE 8587
8577: PUSH
8578: CALL_OW 519
8582: PUSH
8583: LD_INT 1
8585: GREATER
8586: AND
8587: IFFALSE 8597
// result := false ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_INT 0
8596: ST_TO_ADDR
// end ;
8597: LD_VAR 0 1
8601: RET
// function HasPower ( i ) ; begin
8602: LD_INT 0
8604: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8605: LD_INT 22
8607: PUSH
8608: LD_VAR 0 1
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 2
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 0
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 30
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PPUSH
8649: CALL_OW 69
8653: NOT
8654: IFFALSE 8658
// exit ;
8656: GO 8723
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8658: LD_ADDR_VAR 0 2
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_VAR 0 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 21
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 33
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 33
8700: PUSH
8701: LD_INT 5
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PPUSH
8718: CALL_OW 69
8722: ST_TO_ADDR
// end ; end_of_file
8723: LD_VAR 0 2
8727: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
8728: LD_EXP 38
8732: IFFALSE 8775
8734: GO 8736
8736: DISABLE
8737: LD_INT 0
8739: PPUSH
// begin for i := 1 to 8 do
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_INT 8
8752: PUSH
8753: FOR_TO
8754: IFFALSE 8773
// SetRestrict ( b_depot , i , state_disabled ) ;
8756: LD_INT 0
8758: PPUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_INT 0
8766: PPUSH
8767: CALL_OW 324
8771: GO 8753
8773: POP
8774: POP
// end ;
8775: PPOPN 1
8777: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
8778: LD_EXP 38
8782: IFFALSE 8790
8784: PUSH
8785: CALL 9000 0 0
8789: AND
8790: IFFALSE 8798
8792: PUSH
8793: LD_OWVAR 4
8797: AND
8798: IFFALSE 8997
8800: GO 8802
8802: DISABLE
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
// begin canWin := false ;
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// if not HasPower ( your_side ) then
8815: LD_OWVAR 2
8819: PPUSH
8820: CALL 9042 0 1
8824: NOT
8825: IFFALSE 8836
// begin Multiplayer_Loose_Message ;
8827: CALL_OW 521
// enable ( mpLose ) ;
8831: LD_INT 102
8833: ENABLE_MARKED
// end else
8834: GO 8997
// begin canWin := true ;
8836: LD_ADDR_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: ST_TO_ADDR
// for i := 1 to 8 do
8844: LD_ADDR_VAR 0 1
8848: PUSH
8849: DOUBLE
8850: LD_INT 1
8852: DEC
8853: ST_TO_ADDR
8854: LD_INT 8
8856: PUSH
8857: FOR_TO
8858: IFFALSE 8983
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8860: LD_EXP 6
8864: PUSH
8865: LD_VAR 0 1
8869: ARRAY
8870: IFFALSE 8883
8872: PUSH
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 108
8882: AND
8883: IFFALSE 8897
8885: PUSH
8886: LD_VAR 0 1
8890: PUSH
8891: LD_OWVAR 2
8895: NONEQUAL
8896: AND
8897: IFFALSE 8981
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8899: LD_EXP 7
8903: PUSH
8904: LD_VAR 0 1
8908: ARRAY
8909: NOT
8910: IFTRUE 8958
8912: PUSH
8913: LD_EXP 7
8917: PUSH
8918: LD_VAR 0 1
8922: ARRAY
8923: PUSH
8924: LD_EXP 7
8928: PUSH
8929: LD_OWVAR 2
8933: ARRAY
8934: NONEQUAL
8935: IFFALSE 8957
8937: PUSH
8938: LD_OWVAR 2
8942: PPUSH
8943: LD_VAR 0 1
8947: PPUSH
8948: CALL_OW 81
8952: PUSH
8953: LD_INT 1
8955: NONEQUAL
8956: AND
8957: OR
8958: IFFALSE 8981
// if HasPower ( i ) then
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL 9042 0 1
8969: IFFALSE 8981
// begin canWin := false ;
8971: LD_ADDR_VAR 0 2
8975: PUSH
8976: LD_INT 0
8978: ST_TO_ADDR
// break ;
8979: GO 8983
// end ;
8981: GO 8857
8983: POP
8984: POP
// if canWin then
8985: LD_VAR 0 2
8989: IFFALSE 8996
// enable ( mpWin ) else
8991: LD_INT 101
8993: ENABLE_MARKED
8994: GO 8997
// enable ;
8996: ENABLE
// end ; end ;
8997: PPOPN 2
8999: END
// function CanWinLoose ; begin
9000: LD_INT 0
9002: PPUSH
// result := true ;
9003: LD_ADDR_VAR 0 1
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9011: CALL_OW 531
9015: IFFALSE 9027
9017: PUSH
9018: CALL_OW 519
9022: PUSH
9023: LD_INT 1
9025: GREATER
9026: AND
9027: IFFALSE 9037
// result := false ;
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_INT 0
9036: ST_TO_ADDR
// end ;
9037: LD_VAR 0 1
9041: RET
// function HasPower ( i ) ; begin
9042: LD_INT 0
9044: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9045: LD_INT 22
9047: PUSH
9048: LD_VAR 0 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 2
9059: PUSH
9060: LD_INT 30
9062: PUSH
9063: LD_INT 0
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 30
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: NOT
9094: IFFALSE 9098
// exit ;
9096: GO 9163
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: LD_INT 22
9105: PUSH
9106: LD_VAR 0 1
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 2
9117: PUSH
9118: LD_INT 21
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 33
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 33
9140: PUSH
9141: LD_INT 5
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 69
9162: ST_TO_ADDR
// end ; end_of_file
9163: LD_VAR 0 2
9167: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
9168: LD_VAR 0 1
9172: PUSH
9173: LD_INT 200
9175: DOUBLE
9176: GREATEREQUAL
9177: IFFALSE 9185
9179: LD_INT 299
9181: DOUBLE
9182: LESSEQUAL
9183: IFTRUE 9187
9185: GO 9219
9187: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
9188: LD_VAR 0 1
9192: PPUSH
9193: LD_VAR 0 2
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: LD_VAR 0 4
9207: PPUSH
9208: LD_VAR 0 5
9212: PPUSH
9213: CALL 10081 0 5
9217: GO 9296
9219: LD_INT 300
9221: DOUBLE
9222: GREATEREQUAL
9223: IFFALSE 9231
9225: LD_INT 399
9227: DOUBLE
9228: LESSEQUAL
9229: IFTRUE 9233
9231: GO 9295
9233: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
9234: LD_VAR 0 1
9238: PPUSH
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_VAR 0 3
9248: PPUSH
9249: LD_VAR 0 4
9253: PPUSH
9254: LD_VAR 0 5
9258: PPUSH
9259: LD_VAR 0 6
9263: PPUSH
9264: LD_VAR 0 7
9268: PPUSH
9269: LD_VAR 0 8
9273: PPUSH
9274: LD_VAR 0 9
9278: PPUSH
9279: LD_VAR 0 10
9283: PPUSH
9284: LD_VAR 0 11
9288: PPUSH
9289: CALL 16502 0 11
9293: GO 9296
9295: POP
// end ;
9296: PPOPN 11
9298: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
9299: LD_VAR 0 1
9303: PPUSH
9304: LD_VAR 0 2
9308: PPUSH
9309: LD_VAR 0 3
9313: PPUSH
9314: LD_VAR 0 4
9318: PPUSH
9319: LD_VAR 0 5
9323: PPUSH
9324: CALL 9381 0 5
// end ; end_of_file
9328: PPOPN 5
9330: END
// export function SOS_UnitDestroyed ( un ) ; begin
9331: LD_INT 0
9333: PPUSH
// ComRadiation ( un ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL 10501 0 1
// end ;
9343: LD_VAR 0 2
9347: RET
// export function SOS_UnitKamikazed ( un ) ; begin
9348: LD_INT 0
9350: PPUSH
// ComRadiation ( un ) ;
9351: LD_VAR 0 1
9355: PPUSH
9356: CALL 10501 0 1
// end ;
9360: LD_VAR 0 2
9364: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9365: LD_INT 0
9367: PPUSH
// end ;
9368: LD_VAR 0 4
9372: RET
// export function SOS_Command ( cmd ) ; begin
9373: LD_INT 0
9375: PPUSH
// end ;
9376: LD_VAR 0 2
9380: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9381: LD_INT 0
9383: PPUSH
// end ;
9384: LD_VAR 0 6
9388: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
9395: PPUSH
// if not vehicle or not factory then
9396: LD_VAR 0 1
9400: NOT
9401: IFTRUE 9410
9403: PUSH
9404: LD_VAR 0 2
9408: NOT
9409: OR
9410: IFFALSE 9414
// exit ;
9412: GO 10076
// weapon := GetWeapon ( vehicle ) ;
9414: LD_ADDR_VAR 0 7
9418: PUSH
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL_OW 264
9428: ST_TO_ADDR
// if weapon = ar_miner then
9429: LD_VAR 0 7
9433: PUSH
9434: LD_INT 81
9436: EQUAL
9437: IFFALSE 9494
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
9439: LD_ADDR_EXP 56
9443: PUSH
9444: LD_EXP 56
9448: PPUSH
9449: LD_EXP 56
9453: PUSH
9454: LD_INT 1
9456: PLUS
9457: PPUSH
9458: LD_VAR 0 1
9462: PPUSH
9463: CALL_OW 1
9467: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9468: LD_ADDR_EXP 57
9472: PUSH
9473: LD_EXP 57
9477: PPUSH
9478: LD_EXP 57
9482: PUSH
9483: LD_INT 1
9485: PLUS
9486: PPUSH
9487: EMPTY
9488: PPUSH
9489: CALL_OW 1
9493: ST_TO_ADDR
// end ; if not factoryWaypoints then
9494: LD_EXP 59
9498: NOT
9499: IFFALSE 9503
// exit ;
9501: GO 10076
// for i := 1 to Count ( factoryWaypoints ) do
9503: LD_ADDR_VAR 0 4
9507: PUSH
9508: DOUBLE
9509: LD_INT 1
9511: DEC
9512: ST_TO_ADDR
9513: LD_EXP 59
9517: PPUSH
9518: CALL 19576 0 1
9522: PUSH
9523: FOR_TO
9524: IFFALSE 10074
// if factoryWaypoints [ i ] [ 2 ] = factory then
9526: LD_EXP 59
9530: PUSH
9531: LD_VAR 0 4
9535: ARRAY
9536: PUSH
9537: LD_INT 2
9539: ARRAY
9540: PUSH
9541: LD_VAR 0 2
9545: EQUAL
9546: IFFALSE 10072
// begin if GetControl ( vehicle ) = control_manual then
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 263
9557: PUSH
9558: LD_INT 1
9560: EQUAL
9561: IFFALSE 9925
// begin driver := IsDrivenBy ( vehicle ) ;
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: LD_VAR 0 1
9572: PPUSH
9573: CALL_OW 311
9577: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
9578: LD_VAR 0 5
9582: PUSH
9583: LD_EXP 60
9587: IN
9588: IFTRUE 9602
9590: PUSH
9591: LD_VAR 0 1
9595: PUSH
9596: LD_EXP 60
9600: IN
9601: OR
9602: IFFALSE 9608
// exit ;
9604: POP
9605: POP
9606: GO 10076
// if not HasTask ( driver ) then
9608: LD_VAR 0 5
9612: PPUSH
9613: CALL_OW 314
9617: NOT
9618: IFFALSE 9923
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
9620: LD_ADDR_EXP 60
9624: PUSH
9625: LD_EXP 60
9629: PPUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: CALL 55552 0 2
9639: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
9640: LD_ADDR_EXP 60
9644: PUSH
9645: LD_EXP 60
9649: PPUSH
9650: LD_VAR 0 1
9654: PPUSH
9655: CALL 55552 0 2
9659: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9660: LD_ADDR_VAR 0 6
9664: PUSH
9665: LD_EXP 59
9669: PUSH
9670: LD_VAR 0 4
9674: ARRAY
9675: PUSH
9676: LD_INT 3
9678: ARRAY
9679: PPUSH
9680: LD_EXP 59
9684: PUSH
9685: LD_VAR 0 4
9689: ARRAY
9690: PUSH
9691: LD_INT 4
9693: ARRAY
9694: PPUSH
9695: CALL_OW 428
9699: ST_TO_ADDR
// if hex then
9700: LD_VAR 0 6
9704: IFFALSE 9722
// ComMoveUnit ( driver , hex ) else
9706: LD_VAR 0 5
9710: PPUSH
9711: LD_VAR 0 6
9715: PPUSH
9716: CALL_OW 112
9720: GO 9806
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
9722: LD_VAR 0 1
9726: PPUSH
9727: LD_EXP 59
9731: PUSH
9732: LD_VAR 0 4
9736: ARRAY
9737: PUSH
9738: LD_INT 3
9740: ARRAY
9741: PPUSH
9742: LD_EXP 59
9746: PUSH
9747: LD_VAR 0 4
9751: ARRAY
9752: PUSH
9753: LD_INT 4
9755: ARRAY
9756: PPUSH
9757: CALL_OW 297
9761: PUSH
9762: LD_INT 0
9764: GREATER
9765: IFFALSE 9806
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9767: LD_VAR 0 5
9771: PPUSH
9772: LD_EXP 59
9776: PUSH
9777: LD_VAR 0 4
9781: ARRAY
9782: PUSH
9783: LD_INT 3
9785: ARRAY
9786: PPUSH
9787: LD_EXP 59
9791: PUSH
9792: LD_VAR 0 4
9796: ARRAY
9797: PUSH
9798: LD_INT 4
9800: ARRAY
9801: PPUSH
9802: CALL_OW 111
// AddComExitVehicle ( driver ) ;
9806: LD_VAR 0 5
9810: PPUSH
9811: CALL_OW 181
// if Multiplayer then
9815: LD_OWVAR 4
9819: IFFALSE 9868
// begin repeat wait ( 10 ) ;
9821: LD_INT 10
9823: PPUSH
9824: CALL_OW 67
// until not IsInUnit ( driver ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: CALL_OW 310
9837: NOT
9838: IFFALSE 9821
// if not HasTask ( driver ) then
9840: LD_VAR 0 5
9844: PPUSH
9845: CALL_OW 314
9849: NOT
9850: IFFALSE 9866
// ComEnterUnit ( driver , factory ) ;
9852: LD_VAR 0 5
9856: PPUSH
9857: LD_VAR 0 2
9861: PPUSH
9862: CALL_OW 120
// end else
9866: GO 9882
// AddComEnterUnit ( driver , factory ) ;
9868: LD_VAR 0 5
9872: PPUSH
9873: LD_VAR 0 2
9877: PPUSH
9878: CALL_OW 180
// wait ( 0 0$1 ) ;
9882: LD_INT 35
9884: PPUSH
9885: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
9889: LD_ADDR_EXP 60
9893: PUSH
9894: LD_EXP 60
9898: PUSH
9899: LD_VAR 0 5
9903: DIFF
9904: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
9905: LD_ADDR_EXP 60
9909: PUSH
9910: LD_EXP 60
9914: PUSH
9915: LD_VAR 0 1
9919: DIFF
9920: ST_TO_ADDR
// break ;
9921: GO 10074
// end ; end else
9923: GO 10072
// if GetControl ( vehicle ) = control_remote then
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL_OW 263
9934: PUSH
9935: LD_INT 2
9937: EQUAL
9938: IFFALSE 10024
// begin wait ( 0 0$2 ) ;
9940: LD_INT 70
9942: PPUSH
9943: CALL_OW 67
// repeat wait ( 10 ) ;
9947: LD_INT 10
9949: PPUSH
9950: CALL_OW 67
// Connect ( vehicle ) ;
9954: LD_VAR 0 1
9958: PPUSH
9959: CALL 25854 0 1
// until IsControledBy ( vehicle ) ;
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 312
9972: IFFALSE 9947
// wait ( 10 ) ;
9974: LD_INT 10
9976: PPUSH
9977: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9981: LD_VAR 0 1
9985: PPUSH
9986: LD_EXP 59
9990: PUSH
9991: LD_VAR 0 4
9995: ARRAY
9996: PUSH
9997: LD_INT 3
9999: ARRAY
10000: PPUSH
10001: LD_EXP 59
10005: PUSH
10006: LD_VAR 0 4
10010: ARRAY
10011: PUSH
10012: LD_INT 4
10014: ARRAY
10015: PPUSH
10016: CALL_OW 111
// break ;
10020: GO 10074
// end else
10022: GO 10072
// begin wait ( 0 0$3 ) ;
10024: LD_INT 105
10026: PPUSH
10027: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: LD_EXP 59
10040: PUSH
10041: LD_VAR 0 4
10045: ARRAY
10046: PUSH
10047: LD_INT 3
10049: ARRAY
10050: PPUSH
10051: LD_EXP 59
10055: PUSH
10056: LD_VAR 0 4
10060: ARRAY
10061: PUSH
10062: LD_INT 4
10064: ARRAY
10065: PPUSH
10066: CALL_OW 111
// break ;
10070: GO 10074
// end ; end ;
10072: GO 9523
10074: POP
10075: POP
// end ;
10076: LD_VAR 0 3
10080: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10081: LD_INT 0
10083: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10084: LD_VAR 0 1
10088: PUSH
10089: LD_INT 250
10091: EQUAL
10092: IFFALSE 10109
10094: PUSH
10095: LD_VAR 0 2
10099: PPUSH
10100: CALL_OW 264
10104: PUSH
10105: LD_INT 81
10107: EQUAL
10108: AND
10109: IFFALSE 10130
// MinerPlaceMine ( unit , x , y ) ;
10111: LD_VAR 0 2
10115: PPUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: LD_VAR 0 5
10125: PPUSH
10126: CALL 13476 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10130: LD_VAR 0 1
10134: PUSH
10135: LD_INT 251
10137: EQUAL
10138: IFFALSE 10155
10140: PUSH
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 264
10150: PUSH
10151: LD_INT 81
10153: EQUAL
10154: AND
10155: IFFALSE 10176
// MinerDetonateMine ( unit , x , y ) ;
10157: LD_VAR 0 2
10161: PPUSH
10162: LD_VAR 0 4
10166: PPUSH
10167: LD_VAR 0 5
10171: PPUSH
10172: CALL 13883 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10176: LD_VAR 0 1
10180: PUSH
10181: LD_INT 252
10183: EQUAL
10184: IFFALSE 10201
10186: PUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: CALL_OW 264
10196: PUSH
10197: LD_INT 81
10199: EQUAL
10200: AND
10201: IFFALSE 10222
// MinerCreateMinefield ( unit , x , y ) ;
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: LD_VAR 0 5
10217: PPUSH
10218: CALL 14115 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10222: LD_VAR 0 1
10226: PUSH
10227: LD_INT 253
10229: EQUAL
10230: IFFALSE 10247
10232: PUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 257
10242: PUSH
10243: LD_INT 5
10245: EQUAL
10246: AND
10247: IFFALSE 10268
// ComBinocular ( unit , x , y ) ;
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_VAR 0 4
10258: PPUSH
10259: LD_VAR 0 5
10263: PPUSH
10264: CALL 14490 0 3
// if selectedUnit then
10268: LD_VAR 0 3
10272: IFFALSE 10332
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10274: LD_VAR 0 1
10278: PUSH
10279: LD_INT 254
10281: EQUAL
10282: IFFALSE 10299
10284: PUSH
10285: LD_VAR 0 2
10289: PPUSH
10290: CALL_OW 264
10294: PUSH
10295: LD_INT 99
10297: EQUAL
10298: AND
10299: IFFALSE 10316
10301: PUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 263
10311: PUSH
10312: LD_INT 3
10314: EQUAL
10315: AND
10316: IFFALSE 10332
// HackDestroyVehicle ( unit , selectedUnit ) ;
10318: LD_VAR 0 2
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: CALL 12666 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10332: LD_VAR 0 1
10336: PUSH
10337: LD_INT 255
10339: EQUAL
10340: IFFALSE 10364
10342: PUSH
10343: LD_VAR 0 2
10347: PPUSH
10348: CALL_OW 264
10352: PUSH
10353: LD_INT 14
10355: PUSH
10356: LD_INT 53
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: IN
10363: AND
10364: IFFALSE 10382
10366: PUSH
10367: LD_VAR 0 4
10371: PPUSH
10372: LD_VAR 0 5
10376: PPUSH
10377: CALL_OW 488
10381: AND
10382: IFFALSE 10406
// CutTreeXYR ( unit , x , y , 12 ) ;
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 4
10393: PPUSH
10394: LD_VAR 0 5
10398: PPUSH
10399: LD_INT 12
10401: PPUSH
10402: CALL 10597 0 4
// if cmd = 256 then
10406: LD_VAR 0 1
10410: PUSH
10411: LD_INT 256
10413: EQUAL
10414: IFFALSE 10435
// SetFactoryWaypoint ( unit , x , y ) ;
10416: LD_VAR 0 2
10420: PPUSH
10421: LD_VAR 0 4
10425: PPUSH
10426: LD_VAR 0 5
10430: PPUSH
10431: CALL 16510 0 3
// if cmd = 257 then
10435: LD_VAR 0 1
10439: PUSH
10440: LD_INT 257
10442: EQUAL
10443: IFFALSE 10464
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10445: LD_VAR 0 2
10449: PPUSH
10450: LD_VAR 0 4
10454: PPUSH
10455: LD_VAR 0 5
10459: PPUSH
10460: CALL 17006 0 3
// if cmd = 258 then
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 258
10471: EQUAL
10472: IFFALSE 10496
// BurnTreeXYR ( unit , x , y , 8 ) ;
10474: LD_VAR 0 2
10478: PPUSH
10479: LD_VAR 0 4
10483: PPUSH
10484: LD_VAR 0 5
10488: PPUSH
10489: LD_INT 8
10491: PPUSH
10492: CALL 11019 0 4
// end ;
10496: LD_VAR 0 6
10500: RET
// export function ComRadiation ( un ) ; var eff ; begin
10501: LD_INT 0
10503: PPUSH
10504: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 264
10514: PUSH
10515: LD_INT 91
10517: NONEQUAL
10518: IFFALSE 10522
// exit ;
10520: GO 10592
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10522: LD_INT 68
10524: PPUSH
10525: LD_VAR 0 1
10529: PPUSH
10530: CALL_OW 255
10534: PPUSH
10535: CALL_OW 321
10539: PUSH
10540: LD_INT 2
10542: EQUAL
10543: IFFALSE 10555
// eff := 50 else
10545: LD_ADDR_VAR 0 3
10549: PUSH
10550: LD_INT 50
10552: ST_TO_ADDR
10553: GO 10563
// eff := 25 ;
10555: LD_ADDR_VAR 0 3
10559: PUSH
10560: LD_INT 25
10562: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10563: LD_VAR 0 1
10567: PPUSH
10568: CALL_OW 250
10572: PPUSH
10573: LD_VAR 0 1
10577: PPUSH
10578: CALL_OW 251
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: CALL_OW 495
// end ;
10592: LD_VAR 0 2
10596: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10597: LD_INT 0
10599: PPUSH
10600: PPUSH
10601: PPUSH
10602: PPUSH
10603: PPUSH
10604: PPUSH
10605: PPUSH
10606: PPUSH
10607: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
10608: LD_VAR 0 1
10612: PPUSH
10613: CALL_OW 302
10617: NOT
10618: IFTRUE 10637
10620: PUSH
10621: LD_VAR 0 2
10625: PPUSH
10626: LD_VAR 0 3
10630: PPUSH
10631: CALL_OW 488
10635: NOT
10636: OR
10637: IFTRUE 10646
10639: PUSH
10640: LD_VAR 0 4
10644: NOT
10645: OR
10646: IFFALSE 10650
// exit ;
10648: GO 11014
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 437
10659: PPUSH
10660: CALL 19576 0 1
10664: PUSH
10665: LD_INT 10
10667: GREATER
10668: IFFALSE 10672
// exit ;
10670: GO 11014
// list := [ ] ;
10672: LD_ADDR_VAR 0 13
10676: PUSH
10677: EMPTY
10678: ST_TO_ADDR
// if x - r < 0 then
10679: LD_VAR 0 2
10683: PUSH
10684: LD_VAR 0 4
10688: MINUS
10689: PUSH
10690: LD_INT 0
10692: LESS
10693: IFFALSE 10705
// min_x := 0 else
10695: LD_ADDR_VAR 0 7
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
10703: GO 10721
// min_x := x - r ;
10705: LD_ADDR_VAR 0 7
10709: PUSH
10710: LD_VAR 0 2
10714: PUSH
10715: LD_VAR 0 4
10719: MINUS
10720: ST_TO_ADDR
// if y - r < 0 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_VAR 0 4
10730: MINUS
10731: PUSH
10732: LD_INT 0
10734: LESS
10735: IFFALSE 10747
// min_y := 0 else
10737: LD_ADDR_VAR 0 8
10741: PUSH
10742: LD_INT 0
10744: ST_TO_ADDR
10745: GO 10763
// min_y := y - r ;
10747: LD_ADDR_VAR 0 8
10751: PUSH
10752: LD_VAR 0 3
10756: PUSH
10757: LD_VAR 0 4
10761: MINUS
10762: ST_TO_ADDR
// max_x := x + r ;
10763: LD_ADDR_VAR 0 9
10767: PUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_VAR 0 4
10777: PLUS
10778: ST_TO_ADDR
// max_y := y + r ;
10779: LD_ADDR_VAR 0 10
10783: PUSH
10784: LD_VAR 0 3
10788: PUSH
10789: LD_VAR 0 4
10793: PLUS
10794: ST_TO_ADDR
// for _x = min_x to max_x do
10795: LD_ADDR_VAR 0 11
10799: PUSH
10800: DOUBLE
10801: LD_VAR 0 7
10805: DEC
10806: ST_TO_ADDR
10807: LD_VAR 0 9
10811: PUSH
10812: FOR_TO
10813: IFFALSE 10932
// for _y = min_y to max_y do
10815: LD_ADDR_VAR 0 12
10819: PUSH
10820: DOUBLE
10821: LD_VAR 0 8
10825: DEC
10826: ST_TO_ADDR
10827: LD_VAR 0 10
10831: PUSH
10832: FOR_TO
10833: IFFALSE 10928
// begin if not ValidHex ( _x , _y ) then
10835: LD_VAR 0 11
10839: PPUSH
10840: LD_VAR 0 12
10844: PPUSH
10845: CALL_OW 488
10849: NOT
10850: IFFALSE 10854
// continue ;
10852: GO 10832
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10854: LD_VAR 0 11
10858: PPUSH
10859: LD_VAR 0 12
10863: PPUSH
10864: CALL_OW 351
10868: IFFALSE 10886
10870: PUSH
10871: LD_VAR 0 11
10875: PPUSH
10876: LD_VAR 0 12
10880: PPUSH
10881: CALL_OW 554
10885: AND
10886: IFFALSE 10926
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10888: LD_ADDR_VAR 0 13
10892: PUSH
10893: LD_VAR 0 13
10897: PPUSH
10898: LD_VAR 0 13
10902: PUSH
10903: LD_INT 1
10905: PLUS
10906: PPUSH
10907: LD_VAR 0 11
10911: PUSH
10912: LD_VAR 0 12
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 2
10925: ST_TO_ADDR
// end ;
10926: GO 10832
10928: POP
10929: POP
10930: GO 10812
10932: POP
10933: POP
// if not list then
10934: LD_VAR 0 13
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 11014
// for i in list do
10943: LD_ADDR_VAR 0 6
10947: PUSH
10948: LD_VAR 0 13
10952: PUSH
10953: FOR_IN
10954: IFFALSE 11012
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10956: LD_VAR 0 1
10960: PPUSH
10961: LD_STRING M
10963: PUSH
10964: LD_VAR 0 6
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PUSH
10973: LD_VAR 0 6
10977: PUSH
10978: LD_INT 2
10980: ARRAY
10981: PUSH
10982: LD_INT 0
10984: PUSH
10985: LD_INT 0
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 0
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: PPUSH
11006: CALL_OW 447
11010: GO 10953
11012: POP
11013: POP
// end ;
11014: LD_VAR 0 5
11018: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
11023: PPUSH
11024: PPUSH
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL_OW 302
11040: NOT
11041: IFTRUE 11060
11043: PUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: CALL_OW 488
11058: NOT
11059: OR
11060: IFTRUE 11069
11062: PUSH
11063: LD_VAR 0 4
11067: NOT
11068: OR
11069: IFFALSE 11073
// exit ;
11071: GO 11612
// if Count ( GetTaskList ( flame ) ) > 10 then
11073: LD_VAR 0 1
11077: PPUSH
11078: CALL_OW 437
11082: PPUSH
11083: CALL 19576 0 1
11087: PUSH
11088: LD_INT 10
11090: GREATER
11091: IFFALSE 11095
// exit ;
11093: GO 11612
// list := [ ] ;
11095: LD_ADDR_VAR 0 13
11099: PUSH
11100: EMPTY
11101: ST_TO_ADDR
// if x - r < 0 then
11102: LD_VAR 0 2
11106: PUSH
11107: LD_VAR 0 4
11111: MINUS
11112: PUSH
11113: LD_INT 0
11115: LESS
11116: IFFALSE 11128
// min_x := 0 else
11118: LD_ADDR_VAR 0 7
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
11126: GO 11144
// min_x := x - r ;
11128: LD_ADDR_VAR 0 7
11132: PUSH
11133: LD_VAR 0 2
11137: PUSH
11138: LD_VAR 0 4
11142: MINUS
11143: ST_TO_ADDR
// if y - r < 0 then
11144: LD_VAR 0 3
11148: PUSH
11149: LD_VAR 0 4
11153: MINUS
11154: PUSH
11155: LD_INT 0
11157: LESS
11158: IFFALSE 11170
// min_y := 0 else
11160: LD_ADDR_VAR 0 8
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
11168: GO 11186
// min_y := y - r ;
11170: LD_ADDR_VAR 0 8
11174: PUSH
11175: LD_VAR 0 3
11179: PUSH
11180: LD_VAR 0 4
11184: MINUS
11185: ST_TO_ADDR
// max_x := x + r ;
11186: LD_ADDR_VAR 0 9
11190: PUSH
11191: LD_VAR 0 2
11195: PUSH
11196: LD_VAR 0 4
11200: PLUS
11201: ST_TO_ADDR
// max_y := y + r ;
11202: LD_ADDR_VAR 0 10
11206: PUSH
11207: LD_VAR 0 3
11211: PUSH
11212: LD_VAR 0 4
11216: PLUS
11217: ST_TO_ADDR
// for _x = min_x to max_x do
11218: LD_ADDR_VAR 0 11
11222: PUSH
11223: DOUBLE
11224: LD_VAR 0 7
11228: DEC
11229: ST_TO_ADDR
11230: LD_VAR 0 9
11234: PUSH
11235: FOR_TO
11236: IFFALSE 11355
// for _y = min_y to max_y do
11238: LD_ADDR_VAR 0 12
11242: PUSH
11243: DOUBLE
11244: LD_VAR 0 8
11248: DEC
11249: ST_TO_ADDR
11250: LD_VAR 0 10
11254: PUSH
11255: FOR_TO
11256: IFFALSE 11351
// begin if not ValidHex ( _x , _y ) then
11258: LD_VAR 0 11
11262: PPUSH
11263: LD_VAR 0 12
11267: PPUSH
11268: CALL_OW 488
11272: NOT
11273: IFFALSE 11277
// continue ;
11275: GO 11255
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11277: LD_VAR 0 11
11281: PPUSH
11282: LD_VAR 0 12
11286: PPUSH
11287: CALL_OW 351
11291: IFFALSE 11309
11293: PUSH
11294: LD_VAR 0 11
11298: PPUSH
11299: LD_VAR 0 12
11303: PPUSH
11304: CALL_OW 554
11308: AND
11309: IFFALSE 11349
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11311: LD_ADDR_VAR 0 13
11315: PUSH
11316: LD_VAR 0 13
11320: PPUSH
11321: LD_VAR 0 13
11325: PUSH
11326: LD_INT 1
11328: PLUS
11329: PPUSH
11330: LD_VAR 0 11
11334: PUSH
11335: LD_VAR 0 12
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 2
11348: ST_TO_ADDR
// end ;
11349: GO 11255
11351: POP
11352: POP
11353: GO 11235
11355: POP
11356: POP
// if not list then
11357: LD_VAR 0 13
11361: NOT
11362: IFFALSE 11366
// exit ;
11364: GO 11612
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
11366: LD_ADDR_VAR 0 13
11370: PUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: LD_VAR 0 13
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL 22982 0 4
11391: ST_TO_ADDR
// ComStop ( flame ) ;
11392: LD_VAR 0 1
11396: PPUSH
11397: CALL_OW 141
// for i in list do
11401: LD_ADDR_VAR 0 6
11405: PUSH
11406: LD_VAR 0 13
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11443
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_VAR 0 6
11423: PUSH
11424: LD_INT 1
11426: ARRAY
11427: PPUSH
11428: LD_VAR 0 6
11432: PUSH
11433: LD_INT 2
11435: ARRAY
11436: PPUSH
11437: CALL_OW 176
11441: GO 11411
11443: POP
11444: POP
// repeat wait ( 0 0$1 ) ;
11445: LD_INT 35
11447: PPUSH
11448: CALL_OW 67
// task := GetTaskList ( flame ) ;
11452: LD_ADDR_VAR 0 14
11456: PUSH
11457: LD_VAR 0 1
11461: PPUSH
11462: CALL_OW 437
11466: ST_TO_ADDR
// if not task then
11467: LD_VAR 0 14
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 11612
// if task [ 1 ] [ 1 ] <> | then
11476: LD_VAR 0 14
11480: PUSH
11481: LD_INT 1
11483: ARRAY
11484: PUSH
11485: LD_INT 1
11487: ARRAY
11488: PUSH
11489: LD_STRING |
11491: NONEQUAL
11492: IFFALSE 11496
// exit ;
11494: GO 11612
// _x := task [ 1 ] [ 2 ] ;
11496: LD_ADDR_VAR 0 11
11500: PUSH
11501: LD_VAR 0 14
11505: PUSH
11506: LD_INT 1
11508: ARRAY
11509: PUSH
11510: LD_INT 2
11512: ARRAY
11513: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
11514: LD_ADDR_VAR 0 12
11518: PUSH
11519: LD_VAR 0 14
11523: PUSH
11524: LD_INT 1
11526: ARRAY
11527: PUSH
11528: LD_INT 3
11530: ARRAY
11531: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
11532: LD_VAR 0 11
11536: PPUSH
11537: LD_VAR 0 12
11541: PPUSH
11542: CALL_OW 351
11546: NOT
11547: IFTRUE 11566
11549: PUSH
11550: LD_VAR 0 11
11554: PPUSH
11555: LD_VAR 0 12
11559: PPUSH
11560: CALL_OW 554
11564: NOT
11565: OR
11566: IFFALSE 11600
// begin task := Delete ( task , 1 ) ;
11568: LD_ADDR_VAR 0 14
11572: PUSH
11573: LD_VAR 0 14
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 3
11585: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_VAR 0 14
11595: PPUSH
11596: CALL_OW 446
// end ; until not HasTask ( flame ) ;
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 314
11609: NOT
11610: IFFALSE 11445
// end ;
11612: LD_VAR 0 5
11616: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11617: LD_EXP 49
11621: NOT
11622: IFFALSE 11672
11624: GO 11626
11626: DISABLE
// begin initHack := true ;
11627: LD_ADDR_EXP 49
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// hackTanks := [ ] ;
11635: LD_ADDR_EXP 50
11639: PUSH
11640: EMPTY
11641: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11642: LD_ADDR_EXP 51
11646: PUSH
11647: EMPTY
11648: ST_TO_ADDR
// hackLimit := 3 ;
11649: LD_ADDR_EXP 52
11653: PUSH
11654: LD_INT 3
11656: ST_TO_ADDR
// hackDist := 12 ;
11657: LD_ADDR_EXP 53
11661: PUSH
11662: LD_INT 12
11664: ST_TO_ADDR
// hackCounter := [ ] ;
11665: LD_ADDR_EXP 54
11669: PUSH
11670: EMPTY
11671: ST_TO_ADDR
// end ;
11672: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11673: LD_EXP 49
11677: IFFALSE 11695
11679: PUSH
11680: LD_INT 34
11682: PUSH
11683: LD_INT 99
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: AND
11695: IFFALSE 11948
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
// begin enable ;
11704: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 34
11712: PUSH
11713: LD_INT 99
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: PUSH
11725: FOR_IN
11726: IFFALSE 11946
// begin if not i in hackTanks then
11728: LD_VAR 0 1
11732: PUSH
11733: LD_EXP 50
11737: IN
11738: NOT
11739: IFFALSE 11822
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11741: LD_ADDR_EXP 50
11745: PUSH
11746: LD_EXP 50
11750: PPUSH
11751: LD_EXP 50
11755: PUSH
11756: LD_INT 1
11758: PLUS
11759: PPUSH
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 1
11769: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11770: LD_ADDR_EXP 51
11774: PUSH
11775: LD_EXP 51
11779: PPUSH
11780: LD_EXP 51
11784: PUSH
11785: LD_INT 1
11787: PLUS
11788: PPUSH
11789: EMPTY
11790: PPUSH
11791: CALL_OW 1
11795: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11796: LD_ADDR_EXP 54
11800: PUSH
11801: LD_EXP 54
11805: PPUSH
11806: LD_EXP 54
11810: PUSH
11811: LD_INT 1
11813: PLUS
11814: PPUSH
11815: EMPTY
11816: PPUSH
11817: CALL_OW 1
11821: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 302
11831: NOT
11832: IFFALSE 11845
// begin HackUnlinkAll ( i ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL 11951 0 1
// continue ;
11843: GO 11725
// end ; HackCheckCapturedStatus ( i ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL 12396 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_INT 81
11861: PUSH
11862: LD_VAR 0 1
11866: PPUSH
11867: CALL_OW 255
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 33
11878: PUSH
11879: LD_INT 3
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 91
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 53
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 50
11906: PUSH
11907: EMPTY
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL_OW 69
11920: ST_TO_ADDR
// if not tmp then
11921: LD_VAR 0 2
11925: NOT
11926: IFFALSE 11930
// continue ;
11928: GO 11725
// HackLink ( i , tmp ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: LD_VAR 0 2
11939: PPUSH
11940: CALL 12087 0 2
// end ;
11944: GO 11725
11946: POP
11947: POP
// end ;
11948: PPOPN 2
11950: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11951: LD_INT 0
11953: PPUSH
11954: PPUSH
11955: PPUSH
// if not hack in hackTanks then
11956: LD_VAR 0 1
11960: PUSH
11961: LD_EXP 50
11965: IN
11966: NOT
11967: IFFALSE 11971
// exit ;
11969: GO 12082
// index := GetElementIndex ( hackTanks , hack ) ;
11971: LD_ADDR_VAR 0 4
11975: PUSH
11976: LD_EXP 50
11980: PPUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL 22277 0 2
11990: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11991: LD_EXP 51
11995: PUSH
11996: LD_VAR 0 4
12000: ARRAY
12001: IFFALSE 12082
// begin for i in hackTanksCaptured [ index ] do
12003: LD_ADDR_VAR 0 3
12007: PUSH
12008: LD_EXP 51
12012: PUSH
12013: LD_VAR 0 4
12017: ARRAY
12018: PUSH
12019: FOR_IN
12020: IFFALSE 12046
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 2
12038: ARRAY
12039: PPUSH
12040: CALL_OW 235
12044: GO 12019
12046: POP
12047: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12048: LD_ADDR_EXP 51
12052: PUSH
12053: LD_EXP 51
12057: PPUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: EMPTY
12064: PPUSH
12065: CALL_OW 1
12069: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 0
12077: PPUSH
12078: CALL_OW 505
// end ; end ;
12082: LD_VAR 0 2
12086: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
12091: PPUSH
// if not hack in hackTanks or not vehicles then
12092: LD_VAR 0 1
12096: PUSH
12097: LD_EXP 50
12101: IN
12102: NOT
12103: IFTRUE 12112
12105: PUSH
12106: LD_VAR 0 2
12110: NOT
12111: OR
12112: IFFALSE 12116
// exit ;
12114: GO 12391
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12116: LD_ADDR_VAR 0 2
12120: PUSH
12121: LD_VAR 0 1
12125: PPUSH
12126: LD_VAR 0 2
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL 22929 0 4
12141: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12142: LD_ADDR_VAR 0 5
12146: PUSH
12147: LD_EXP 50
12151: PPUSH
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL 22277 0 2
12161: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12162: LD_EXP 51
12166: PUSH
12167: LD_VAR 0 5
12171: ARRAY
12172: PUSH
12173: LD_EXP 52
12177: LESS
12178: IFFALSE 12367
// begin for i := 1 to vehicles do
12180: LD_ADDR_VAR 0 4
12184: PUSH
12185: DOUBLE
12186: LD_INT 1
12188: DEC
12189: ST_TO_ADDR
12190: LD_VAR 0 2
12194: PUSH
12195: FOR_TO
12196: IFFALSE 12365
// begin if hackTanksCaptured [ index ] = hackLimit then
12198: LD_EXP 51
12202: PUSH
12203: LD_VAR 0 5
12207: ARRAY
12208: PUSH
12209: LD_EXP 52
12213: EQUAL
12214: IFFALSE 12218
// break ;
12216: GO 12365
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12218: LD_ADDR_EXP 54
12222: PUSH
12223: LD_EXP 54
12227: PPUSH
12228: LD_VAR 0 5
12232: PPUSH
12233: LD_EXP 54
12237: PUSH
12238: LD_VAR 0 5
12242: ARRAY
12243: PUSH
12244: LD_INT 1
12246: PLUS
12247: PPUSH
12248: CALL_OW 1
12252: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12253: LD_ADDR_EXP 51
12257: PUSH
12258: LD_EXP 51
12262: PPUSH
12263: LD_VAR 0 5
12267: PUSH
12268: LD_EXP 51
12272: PUSH
12273: LD_VAR 0 5
12277: ARRAY
12278: PUSH
12279: LD_INT 1
12281: PLUS
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: LD_VAR 0 2
12291: PUSH
12292: LD_VAR 0 4
12296: ARRAY
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: LD_VAR 0 4
12307: ARRAY
12308: PPUSH
12309: CALL_OW 255
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PPUSH
12318: CALL 22494 0 3
12322: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12323: LD_VAR 0 2
12327: PUSH
12328: LD_VAR 0 4
12332: ARRAY
12333: PPUSH
12334: LD_VAR 0 1
12338: PPUSH
12339: CALL_OW 255
12343: PPUSH
12344: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12348: LD_VAR 0 2
12352: PUSH
12353: LD_VAR 0 4
12357: ARRAY
12358: PPUSH
12359: CALL_OW 141
// end ;
12363: GO 12195
12365: POP
12366: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12367: LD_VAR 0 1
12371: PPUSH
12372: LD_EXP 51
12376: PUSH
12377: LD_VAR 0 5
12381: ARRAY
12382: PUSH
12383: LD_INT 0
12385: PLUS
12386: PPUSH
12387: CALL_OW 505
// end ;
12391: LD_VAR 0 3
12395: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
// if not hack in hackTanks then
12402: LD_VAR 0 1
12406: PUSH
12407: LD_EXP 50
12411: IN
12412: NOT
12413: IFFALSE 12417
// exit ;
12415: GO 12661
// index := GetElementIndex ( hackTanks , hack ) ;
12417: LD_ADDR_VAR 0 4
12421: PUSH
12422: LD_EXP 50
12426: PPUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL 22277 0 2
12436: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12437: LD_ADDR_VAR 0 3
12441: PUSH
12442: DOUBLE
12443: LD_EXP 51
12447: PUSH
12448: LD_VAR 0 4
12452: ARRAY
12453: INC
12454: ST_TO_ADDR
12455: LD_INT 1
12457: PUSH
12458: FOR_DOWNTO
12459: IFFALSE 12635
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12461: LD_ADDR_VAR 0 5
12465: PUSH
12466: LD_EXP 51
12470: PUSH
12471: LD_VAR 0 4
12475: ARRAY
12476: PUSH
12477: LD_VAR 0 3
12481: ARRAY
12482: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12483: LD_VAR 0 5
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: PPUSH
12492: CALL_OW 302
12496: NOT
12497: IFTRUE 12525
12499: PUSH
12500: LD_VAR 0 5
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 255
12513: PUSH
12514: LD_VAR 0 1
12518: PPUSH
12519: CALL_OW 255
12523: NONEQUAL
12524: OR
12525: IFFALSE 12633
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12527: LD_VAR 0 5
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: CALL_OW 305
12540: IFFALSE 12568
12542: PUSH
12543: LD_VAR 0 5
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: CALL_OW 255
12556: PUSH
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 255
12566: EQUAL
12567: AND
12568: IFFALSE 12592
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12570: LD_VAR 0 5
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PPUSH
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 2
12586: ARRAY
12587: PPUSH
12588: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12592: LD_ADDR_EXP 51
12596: PUSH
12597: LD_EXP 51
12601: PPUSH
12602: LD_VAR 0 4
12606: PPUSH
12607: LD_EXP 51
12611: PUSH
12612: LD_VAR 0 4
12616: ARRAY
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: CALL_OW 3
12627: PPUSH
12628: CALL_OW 1
12632: ST_TO_ADDR
// end ; end ;
12633: GO 12458
12635: POP
12636: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12637: LD_VAR 0 1
12641: PPUSH
12642: LD_EXP 51
12646: PUSH
12647: LD_VAR 0 4
12651: ARRAY
12652: PUSH
12653: LD_INT 0
12655: PLUS
12656: PPUSH
12657: CALL_OW 505
// end ;
12661: LD_VAR 0 2
12665: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12666: LD_INT 0
12668: PPUSH
12669: PPUSH
12670: PPUSH
12671: PPUSH
// if not hack in hackTanks then
12672: LD_VAR 0 1
12676: PUSH
12677: LD_EXP 50
12681: IN
12682: NOT
12683: IFFALSE 12687
// exit ;
12685: GO 12772
// index := GetElementIndex ( hackTanks , hack ) ;
12687: LD_ADDR_VAR 0 5
12691: PUSH
12692: LD_EXP 50
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL 22277 0 2
12706: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12707: LD_ADDR_VAR 0 4
12711: PUSH
12712: DOUBLE
12713: LD_INT 1
12715: DEC
12716: ST_TO_ADDR
12717: LD_EXP 51
12721: PUSH
12722: LD_VAR 0 5
12726: ARRAY
12727: PUSH
12728: FOR_TO
12729: IFFALSE 12770
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12731: LD_EXP 51
12735: PUSH
12736: LD_VAR 0 5
12740: ARRAY
12741: PUSH
12742: LD_VAR 0 4
12746: ARRAY
12747: PUSH
12748: LD_INT 1
12750: ARRAY
12751: PUSH
12752: LD_VAR 0 2
12756: EQUAL
12757: IFFALSE 12768
// KillUnit ( vehicle ) ;
12759: LD_VAR 0 2
12763: PPUSH
12764: CALL_OW 66
12768: GO 12728
12770: POP
12771: POP
// end ;
12772: LD_VAR 0 3
12776: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
12777: LD_EXP 55
12781: NOT
12782: IFFALSE 12915
12784: GO 12786
12786: DISABLE
12787: LD_INT 0
12789: PPUSH
// begin initMiner := true ;
12790: LD_ADDR_EXP 55
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// minersList := [ ] ;
12798: LD_ADDR_EXP 56
12802: PUSH
12803: EMPTY
12804: ST_TO_ADDR
// minerMinesList := [ ] ;
12805: LD_ADDR_EXP 57
12809: PUSH
12810: EMPTY
12811: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
12812: LD_ADDR_EXP 58
12816: PUSH
12817: LD_INT 10
12819: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_INT 34
12827: PUSH
12828: LD_INT 81
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: PUSH
12840: FOR_IN
12841: IFFALSE 12913
// begin if not i in minersList then
12843: LD_VAR 0 1
12847: PUSH
12848: LD_EXP 56
12852: IN
12853: NOT
12854: IFFALSE 12911
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12856: LD_ADDR_EXP 56
12860: PUSH
12861: LD_EXP 56
12865: PPUSH
12866: LD_EXP 56
12870: PUSH
12871: LD_INT 1
12873: PLUS
12874: PPUSH
12875: LD_VAR 0 1
12879: PPUSH
12880: CALL_OW 1
12884: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12885: LD_ADDR_EXP 57
12889: PUSH
12890: LD_EXP 57
12894: PPUSH
12895: LD_EXP 57
12899: PUSH
12900: LD_INT 1
12902: PLUS
12903: PPUSH
12904: EMPTY
12905: PPUSH
12906: CALL_OW 1
12910: ST_TO_ADDR
// end end ;
12911: GO 12840
12913: POP
12914: POP
// end ;
12915: PPOPN 1
12917: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
12918: LD_EXP 55
12922: IFFALSE 12953
12924: PUSH
12925: LD_EXP 57
12929: PPUSH
12930: CALL 19576 0 1
12934: IFTRUE 12952
12936: PUSH
12937: LD_INT 34
12939: PUSH
12940: LD_INT 81
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: OR
12952: AND
12953: IFFALSE 13473
12955: GO 12957
12957: DISABLE
12958: LD_INT 0
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
// begin enable ;
12964: ENABLE
// for i := minerMinesList downto 1 do
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: DOUBLE
12971: LD_EXP 57
12975: INC
12976: ST_TO_ADDR
12977: LD_INT 1
12979: PUSH
12980: FOR_DOWNTO
12981: IFFALSE 13471
// begin side := GetSide ( minersList [ i ] ) ;
12983: LD_ADDR_VAR 0 3
12987: PUSH
12988: LD_EXP 56
12992: PUSH
12993: LD_VAR 0 1
12997: ARRAY
12998: PPUSH
12999: CALL_OW 255
13003: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
13004: LD_EXP 56
13008: PUSH
13009: LD_VAR 0 1
13013: ARRAY
13014: PPUSH
13015: CALL_OW 300
13019: IFFALSE 13040
13021: PUSH
13022: LD_VAR 0 3
13026: PUSH
13027: LD_OWVAR 2
13031: PUSH
13032: LD_INT 9
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: IN
13039: AND
13040: IFFALSE 13073
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
13042: LD_EXP 56
13046: PUSH
13047: LD_VAR 0 1
13051: ARRAY
13052: PPUSH
13053: LD_EXP 57
13057: PUSH
13058: LD_VAR 0 1
13062: ARRAY
13063: PPUSH
13064: CALL 19576 0 1
13068: PPUSH
13069: CALL_OW 505
// if not minerMinesList [ i ] then
13073: LD_EXP 57
13077: PUSH
13078: LD_VAR 0 1
13082: ARRAY
13083: NOT
13084: IFFALSE 13088
// continue ;
13086: GO 12980
// for j := minerMinesList [ i ] downto 1 do
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: DOUBLE
13094: LD_EXP 57
13098: PUSH
13099: LD_VAR 0 1
13103: ARRAY
13104: INC
13105: ST_TO_ADDR
13106: LD_INT 1
13108: PUSH
13109: FOR_DOWNTO
13110: IFFALSE 13467
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
13112: LD_EXP 56
13116: PUSH
13117: LD_VAR 0 1
13121: ARRAY
13122: PPUSH
13123: CALL_OW 301
13127: IFTRUE 13147
13129: PUSH
13130: LD_EXP 56
13134: PUSH
13135: LD_VAR 0 1
13139: ARRAY
13140: PPUSH
13141: CALL_OW 305
13145: NOT
13146: OR
13147: IFFALSE 13238
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13149: LD_EXP 57
13153: PUSH
13154: LD_VAR 0 1
13158: ARRAY
13159: PUSH
13160: LD_VAR 0 2
13164: ARRAY
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PPUSH
13170: LD_EXP 57
13174: PUSH
13175: LD_VAR 0 1
13179: ARRAY
13180: PUSH
13181: LD_VAR 0 2
13185: ARRAY
13186: PUSH
13187: LD_INT 2
13189: ARRAY
13190: PPUSH
13191: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13195: LD_ADDR_EXP 57
13199: PUSH
13200: LD_EXP 57
13204: PPUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: LD_EXP 57
13214: PUSH
13215: LD_VAR 0 1
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 2
13225: PPUSH
13226: CALL_OW 3
13230: PPUSH
13231: CALL_OW 1
13235: ST_TO_ADDR
// continue ;
13236: GO 13109
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13238: LD_ADDR_VAR 0 4
13242: PUSH
13243: LD_EXP 57
13247: PUSH
13248: LD_VAR 0 1
13252: ARRAY
13253: PUSH
13254: LD_VAR 0 2
13258: ARRAY
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_EXP 57
13268: PUSH
13269: LD_VAR 0 1
13273: ARRAY
13274: PUSH
13275: LD_VAR 0 2
13279: ARRAY
13280: PUSH
13281: LD_INT 2
13283: ARRAY
13284: PPUSH
13285: CALL_OW 428
13289: ST_TO_ADDR
// if not tmp then
13290: LD_VAR 0 4
13294: NOT
13295: IFFALSE 13299
// continue ;
13297: GO 13109
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13299: LD_VAR 0 4
13303: PUSH
13304: LD_INT 81
13306: PUSH
13307: LD_VAR 0 3
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: IN
13321: IFFALSE 13371
13323: PUSH
13324: LD_EXP 57
13328: PUSH
13329: LD_VAR 0 1
13333: ARRAY
13334: PUSH
13335: LD_VAR 0 2
13339: ARRAY
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_EXP 57
13349: PUSH
13350: LD_VAR 0 1
13354: ARRAY
13355: PUSH
13356: LD_VAR 0 2
13360: ARRAY
13361: PUSH
13362: LD_INT 2
13364: ARRAY
13365: PPUSH
13366: CALL_OW 458
13370: AND
13371: IFFALSE 13465
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13373: LD_EXP 57
13377: PUSH
13378: LD_VAR 0 1
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 2
13388: ARRAY
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: LD_EXP 57
13398: PUSH
13399: LD_VAR 0 1
13403: ARRAY
13404: PUSH
13405: LD_VAR 0 2
13409: ARRAY
13410: PUSH
13411: LD_INT 2
13413: ARRAY
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13424: LD_ADDR_EXP 57
13428: PUSH
13429: LD_EXP 57
13433: PPUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_EXP 57
13443: PUSH
13444: LD_VAR 0 1
13448: ARRAY
13449: PPUSH
13450: LD_VAR 0 2
13454: PPUSH
13455: CALL_OW 3
13459: PPUSH
13460: CALL_OW 1
13464: ST_TO_ADDR
// end ; end ;
13465: GO 13109
13467: POP
13468: POP
// end ;
13469: GO 12980
13471: POP
13472: POP
// end ;
13473: PPOPN 4
13475: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
13476: LD_INT 0
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
// result := false ;
13482: LD_ADDR_VAR 0 4
13486: PUSH
13487: LD_INT 0
13489: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 264
13499: PUSH
13500: LD_INT 81
13502: EQUAL
13503: NOT
13504: IFFALSE 13508
// exit ;
13506: GO 13878
// side := GetSide ( unit ) ;
13508: LD_ADDR_VAR 0 6
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 255
13522: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
13523: LD_ADDR_VAR 0 5
13527: PUSH
13528: LD_EXP 56
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL 22277 0 2
13542: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13543: LD_EXP 57
13547: PUSH
13548: LD_VAR 0 5
13552: ARRAY
13553: PUSH
13554: LD_EXP 58
13558: GREATEREQUAL
13559: IFFALSE 13563
// exit ;
13561: GO 13878
// ComMoveXY ( unit , x , y ) ;
13563: LD_VAR 0 1
13567: PPUSH
13568: LD_VAR 0 2
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL 54333 0 3
13608: NOT
13609: IFFALSE 13622
13611: PUSH
13612: LD_VAR 0 1
13616: PPUSH
13617: CALL_OW 314
13621: AND
13622: IFFALSE 13626
// exit ;
13624: GO 13878
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 428
13640: PUSH
13641: LD_VAR 0 1
13645: EQUAL
13646: IFFALSE 13660
13648: PUSH
13649: LD_VAR 0 1
13653: PPUSH
13654: CALL_OW 314
13658: NOT
13659: AND
13660: IFFALSE 13582
// if MineAtPos ( x , y ) then
13662: LD_VAR 0 2
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: CALL_OW 458
13676: IFFALSE 13680
// exit ;
13678: GO 13878
// if your_side = side then
13680: LD_OWVAR 2
13684: PUSH
13685: LD_VAR 0 6
13689: EQUAL
13690: IFFALSE 13709
// PlaySoundXY ( x , y , PlantMine ) ;
13692: LD_VAR 0 2
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_STRING PlantMine
13704: PPUSH
13705: CALL_OW 366
// repeat wait ( 1 ) ;
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
13716: LD_VAR 0 2
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_VAR 0 6
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL_OW 454
13738: IFFALSE 13709
// if MineAtPos ( x , y ) then
13740: LD_VAR 0 2
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: CALL_OW 458
13754: IFFALSE 13870
// begin for i in minerMinesList [ index ] do
13756: LD_ADDR_VAR 0 7
13760: PUSH
13761: LD_EXP 57
13765: PUSH
13766: LD_VAR 0 5
13770: ARRAY
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13815
// if i [ 1 ] = x and i [ 2 ] = y then
13775: LD_VAR 0 7
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PUSH
13784: LD_VAR 0 2
13788: EQUAL
13789: IFFALSE 13807
13791: PUSH
13792: LD_VAR 0 7
13796: PUSH
13797: LD_INT 2
13799: ARRAY
13800: PUSH
13801: LD_VAR 0 3
13805: EQUAL
13806: AND
13807: IFFALSE 13813
// exit ;
13809: POP
13810: POP
13811: GO 13878
13813: GO 13772
13815: POP
13816: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13817: LD_ADDR_EXP 57
13821: PUSH
13822: LD_EXP 57
13826: PPUSH
13827: LD_VAR 0 5
13831: PUSH
13832: LD_EXP 57
13836: PUSH
13837: LD_VAR 0 5
13841: ARRAY
13842: PUSH
13843: LD_INT 1
13845: PLUS
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PPUSH
13851: LD_VAR 0 2
13855: PUSH
13856: LD_VAR 0 3
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL 22494 0 3
13869: ST_TO_ADDR
// end ; result := true ;
13870: LD_ADDR_VAR 0 4
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
// end ;
13878: LD_VAR 0 4
13882: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13883: LD_INT 0
13885: PPUSH
13886: PPUSH
13887: PPUSH
// if not unit in minersList then
13888: LD_VAR 0 1
13892: PUSH
13893: LD_EXP 56
13897: IN
13898: NOT
13899: IFFALSE 13903
// exit ;
13901: GO 14110
// index := GetElementIndex ( minersList , unit ) ;
13903: LD_ADDR_VAR 0 6
13907: PUSH
13908: LD_EXP 56
13912: PPUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL 22277 0 2
13922: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13923: LD_ADDR_VAR 0 5
13927: PUSH
13928: DOUBLE
13929: LD_EXP 57
13933: PUSH
13934: LD_VAR 0 6
13938: ARRAY
13939: INC
13940: ST_TO_ADDR
13941: LD_INT 1
13943: PUSH
13944: FOR_DOWNTO
13945: IFFALSE 14108
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13947: LD_EXP 57
13951: PUSH
13952: LD_VAR 0 6
13956: ARRAY
13957: PUSH
13958: LD_VAR 0 5
13962: ARRAY
13963: PUSH
13964: LD_INT 1
13966: ARRAY
13967: PPUSH
13968: LD_EXP 57
13972: PUSH
13973: LD_VAR 0 6
13977: ARRAY
13978: PUSH
13979: LD_VAR 0 5
13983: ARRAY
13984: PUSH
13985: LD_INT 2
13987: ARRAY
13988: PPUSH
13989: LD_VAR 0 2
13993: PPUSH
13994: LD_VAR 0 3
13998: PPUSH
13999: CALL_OW 298
14003: PUSH
14004: LD_INT 6
14006: LESS
14007: IFFALSE 14106
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14009: LD_EXP 57
14013: PUSH
14014: LD_VAR 0 6
14018: ARRAY
14019: PUSH
14020: LD_VAR 0 5
14024: ARRAY
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: LD_EXP 57
14034: PUSH
14035: LD_VAR 0 6
14039: ARRAY
14040: PUSH
14041: LD_VAR 0 5
14045: ARRAY
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: PPUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 255
14060: PPUSH
14061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14065: LD_ADDR_EXP 57
14069: PUSH
14070: LD_EXP 57
14074: PPUSH
14075: LD_VAR 0 6
14079: PPUSH
14080: LD_EXP 57
14084: PUSH
14085: LD_VAR 0 6
14089: ARRAY
14090: PPUSH
14091: LD_VAR 0 5
14095: PPUSH
14096: CALL_OW 3
14100: PPUSH
14101: CALL_OW 1
14105: ST_TO_ADDR
// end ; end ;
14106: GO 13944
14108: POP
14109: POP
// end ;
14110: LD_VAR 0 4
14114: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
14123: PPUSH
14124: PPUSH
14125: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 264
14135: PUSH
14136: LD_INT 81
14138: EQUAL
14139: NOT
14140: IFTRUE 14155
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: LD_EXP 56
14152: IN
14153: NOT
14154: OR
14155: IFFALSE 14159
// exit ;
14157: GO 14485
// index := GetElementIndex ( minersList , unit ) ;
14159: LD_ADDR_VAR 0 6
14163: PUSH
14164: LD_EXP 56
14168: PPUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL 22277 0 2
14178: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14179: LD_ADDR_VAR 0 8
14183: PUSH
14184: LD_EXP 58
14188: PUSH
14189: LD_EXP 57
14193: PUSH
14194: LD_VAR 0 6
14198: ARRAY
14199: MINUS
14200: ST_TO_ADDR
// if not minesFreeAmount then
14201: LD_VAR 0 8
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14485
// tmp := [ ] ;
14210: LD_ADDR_VAR 0 7
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14217: LD_ADDR_VAR 0 5
14221: PUSH
14222: DOUBLE
14223: LD_INT 1
14225: DEC
14226: ST_TO_ADDR
14227: LD_VAR 0 8
14231: PUSH
14232: FOR_TO
14233: IFFALSE 14432
// begin _d := rand ( 0 , 5 ) ;
14235: LD_ADDR_VAR 0 11
14239: PUSH
14240: LD_INT 0
14242: PPUSH
14243: LD_INT 5
14245: PPUSH
14246: CALL_OW 12
14250: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14251: LD_ADDR_VAR 0 12
14255: PUSH
14256: LD_INT 2
14258: PPUSH
14259: LD_INT 6
14261: PPUSH
14262: CALL_OW 12
14266: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14267: LD_ADDR_VAR 0 9
14271: PUSH
14272: LD_VAR 0 2
14276: PPUSH
14277: LD_VAR 0 11
14281: PPUSH
14282: LD_VAR 0 12
14286: PPUSH
14287: CALL_OW 272
14291: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14292: LD_ADDR_VAR 0 10
14296: PUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_VAR 0 11
14306: PPUSH
14307: LD_VAR 0 12
14311: PPUSH
14312: CALL_OW 273
14316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14317: LD_VAR 0 9
14321: PPUSH
14322: LD_VAR 0 10
14326: PPUSH
14327: CALL_OW 488
14331: IFFALSE 14355
14333: PUSH
14334: LD_VAR 0 9
14338: PUSH
14339: LD_VAR 0 10
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_VAR 0 7
14352: IN
14353: NOT
14354: AND
14355: IFFALSE 14374
14357: PUSH
14358: LD_VAR 0 9
14362: PPUSH
14363: LD_VAR 0 10
14367: PPUSH
14368: CALL_OW 458
14372: NOT
14373: AND
14374: IFFALSE 14416
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14376: LD_ADDR_VAR 0 7
14380: PUSH
14381: LD_VAR 0 7
14385: PPUSH
14386: LD_VAR 0 7
14390: PUSH
14391: LD_INT 1
14393: PLUS
14394: PPUSH
14395: LD_VAR 0 9
14399: PUSH
14400: LD_VAR 0 10
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PPUSH
14409: CALL_OW 1
14413: ST_TO_ADDR
14414: GO 14430
// i := i - 1 ;
14416: LD_ADDR_VAR 0 5
14420: PUSH
14421: LD_VAR 0 5
14425: PUSH
14426: LD_INT 1
14428: MINUS
14429: ST_TO_ADDR
// end ;
14430: GO 14232
14432: POP
14433: POP
// for i in tmp do
14434: LD_ADDR_VAR 0 5
14438: PUSH
14439: LD_VAR 0 7
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14483
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14447: LD_VAR 0 1
14451: PPUSH
14452: LD_VAR 0 5
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: LD_VAR 0 5
14465: PUSH
14466: LD_INT 2
14468: ARRAY
14469: PPUSH
14470: CALL 13476 0 3
14474: NOT
14475: IFFALSE 14481
// exit ;
14477: POP
14478: POP
14479: GO 14485
14481: GO 14444
14483: POP
14484: POP
// end ;
14485: LD_VAR 0 4
14489: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
14490: LD_INT 0
14492: PPUSH
14493: PPUSH
14494: PPUSH
14495: PPUSH
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// if GetClass ( unit ) <> class_sniper then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 257
14510: PUSH
14511: LD_INT 5
14513: NONEQUAL
14514: IFFALSE 14518
// exit ;
14516: GO 14988
// dist := 8 ;
14518: LD_ADDR_VAR 0 5
14522: PUSH
14523: LD_INT 8
14525: ST_TO_ADDR
// viewRange := 12 ;
14526: LD_ADDR_VAR 0 8
14530: PUSH
14531: LD_INT 12
14533: ST_TO_ADDR
// side := GetSide ( unit ) ;
14534: LD_ADDR_VAR 0 6
14538: PUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 255
14548: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14549: LD_INT 61
14551: PPUSH
14552: LD_VAR 0 6
14556: PPUSH
14557: CALL_OW 321
14561: PUSH
14562: LD_INT 2
14564: EQUAL
14565: IFFALSE 14575
// viewRange := 16 ;
14567: LD_ADDR_VAR 0 8
14571: PUSH
14572: LD_INT 16
14574: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14575: LD_VAR 0 1
14579: PPUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: CALL_OW 297
14594: PUSH
14595: LD_VAR 0 5
14599: GREATER
14600: IFFALSE 14679
// begin ComMoveXY ( unit , x , y ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14621: LD_INT 35
14623: PPUSH
14624: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14628: LD_VAR 0 1
14632: PPUSH
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 3
14642: PPUSH
14643: CALL 54333 0 3
14647: NOT
14648: IFFALSE 14652
// exit ;
14650: GO 14988
// until GetDistUnitXY ( unit , x , y ) < dist ;
14652: LD_VAR 0 1
14656: PPUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 297
14671: PUSH
14672: LD_VAR 0 5
14676: LESS
14677: IFFALSE 14621
// end ; ComTurnXY ( unit , x , y ) ;
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_VAR 0 2
14688: PPUSH
14689: LD_VAR 0 3
14693: PPUSH
14694: CALL_OW 118
// repeat if Multiplayer then
14698: LD_OWVAR 4
14702: IFFALSE 14713
// wait ( 35 ) else
14704: LD_INT 35
14706: PPUSH
14707: CALL_OW 67
14711: GO 14720
// wait ( 5 ) ;
14713: LD_INT 5
14715: PPUSH
14716: CALL_OW 67
// _d := GetDir ( unit ) ;
14720: LD_ADDR_VAR 0 11
14724: PUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 254
14734: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
14735: LD_ADDR_VAR 0 7
14739: PUSH
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 250
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 251
14759: PPUSH
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 3
14769: PPUSH
14770: CALL 56969 0 4
14774: ST_TO_ADDR
// until dir = _d ;
14775: LD_VAR 0 7
14779: PUSH
14780: LD_VAR 0 11
14784: EQUAL
14785: IFFALSE 14698
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
14787: LD_ADDR_VAR 0 9
14791: PUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 250
14801: PPUSH
14802: LD_VAR 0 7
14806: PPUSH
14807: LD_VAR 0 5
14811: PPUSH
14812: CALL_OW 272
14816: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
14817: LD_ADDR_VAR 0 10
14821: PUSH
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 251
14831: PPUSH
14832: LD_VAR 0 7
14836: PPUSH
14837: LD_VAR 0 5
14841: PPUSH
14842: CALL_OW 273
14846: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14847: LD_VAR 0 9
14851: PPUSH
14852: LD_VAR 0 10
14856: PPUSH
14857: CALL_OW 488
14861: NOT
14862: IFFALSE 14866
// exit ;
14864: GO 14988
// ComAnimCustom ( unit , 1 ) ;
14866: LD_VAR 0 1
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 592
// p := 0 ;
14878: LD_ADDR_VAR 0 12
14882: PUSH
14883: LD_INT 0
14885: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14886: LD_VAR 0 9
14890: PPUSH
14891: LD_VAR 0 10
14895: PPUSH
14896: LD_VAR 0 6
14900: PPUSH
14901: LD_VAR 0 8
14905: PPUSH
14906: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
14910: LD_INT 35
14912: PPUSH
14913: CALL_OW 67
// p := Inc ( p ) ;
14917: LD_ADDR_VAR 0 12
14921: PUSH
14922: LD_VAR 0 12
14926: PPUSH
14927: CALL 56925 0 1
14931: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
14932: LD_VAR 0 12
14936: PUSH
14937: LD_INT 3
14939: EQUAL
14940: IFTRUE 14954
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 302
14952: NOT
14953: OR
14954: IFTRUE 14967
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 301
14966: OR
14967: IFFALSE 14910
// RemoveSeeing ( _x , _y , side ) ;
14969: LD_VAR 0 9
14973: PPUSH
14974: LD_VAR 0 10
14978: PPUSH
14979: LD_VAR 0 6
14983: PPUSH
14984: CALL_OW 331
// end ;
14988: LD_VAR 0 4
14992: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
14993: LD_INT 0
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
// if not unit then
15006: LD_VAR 0 1
15010: NOT
15011: IFFALSE 15015
// exit ;
15013: GO 15286
// side := GetSide ( unit ) ;
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 255
15029: ST_TO_ADDR
// x := GetX ( unit ) ;
15030: LD_ADDR_VAR 0 5
15034: PUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 250
15044: ST_TO_ADDR
// y := GetY ( unit ) ;
15045: LD_ADDR_VAR 0 6
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 251
15059: ST_TO_ADDR
// r := 8 ;
15060: LD_ADDR_VAR 0 4
15064: PUSH
15065: LD_INT 8
15067: ST_TO_ADDR
// if x - r < 0 then
15068: LD_VAR 0 5
15072: PUSH
15073: LD_VAR 0 4
15077: MINUS
15078: PUSH
15079: LD_INT 0
15081: LESS
15082: IFFALSE 15094
// min_x := 0 else
15084: LD_ADDR_VAR 0 7
15088: PUSH
15089: LD_INT 0
15091: ST_TO_ADDR
15092: GO 15110
// min_x := x - r ;
15094: LD_ADDR_VAR 0 7
15098: PUSH
15099: LD_VAR 0 5
15103: PUSH
15104: LD_VAR 0 4
15108: MINUS
15109: ST_TO_ADDR
// if y - r < 0 then
15110: LD_VAR 0 6
15114: PUSH
15115: LD_VAR 0 4
15119: MINUS
15120: PUSH
15121: LD_INT 0
15123: LESS
15124: IFFALSE 15136
// min_y := 0 else
15126: LD_ADDR_VAR 0 8
15130: PUSH
15131: LD_INT 0
15133: ST_TO_ADDR
15134: GO 15152
// min_y := y - r ;
15136: LD_ADDR_VAR 0 8
15140: PUSH
15141: LD_VAR 0 6
15145: PUSH
15146: LD_VAR 0 4
15150: MINUS
15151: ST_TO_ADDR
// max_x := x + r ;
15152: LD_ADDR_VAR 0 9
15156: PUSH
15157: LD_VAR 0 5
15161: PUSH
15162: LD_VAR 0 4
15166: PLUS
15167: ST_TO_ADDR
// max_y := y + r ;
15168: LD_ADDR_VAR 0 10
15172: PUSH
15173: LD_VAR 0 6
15177: PUSH
15178: LD_VAR 0 4
15182: PLUS
15183: ST_TO_ADDR
// for _x = min_x to max_x do
15184: LD_ADDR_VAR 0 11
15188: PUSH
15189: DOUBLE
15190: LD_VAR 0 7
15194: DEC
15195: ST_TO_ADDR
15196: LD_VAR 0 9
15200: PUSH
15201: FOR_TO
15202: IFFALSE 15284
// for _y = min_y to max_y do
15204: LD_ADDR_VAR 0 12
15208: PUSH
15209: DOUBLE
15210: LD_VAR 0 8
15214: DEC
15215: ST_TO_ADDR
15216: LD_VAR 0 10
15220: PUSH
15221: FOR_TO
15222: IFFALSE 15280
// begin if not ValidHex ( _x , _y ) then
15224: LD_VAR 0 11
15228: PPUSH
15229: LD_VAR 0 12
15233: PPUSH
15234: CALL_OW 488
15238: NOT
15239: IFFALSE 15243
// continue ;
15241: GO 15221
// if MineAtPos ( _x , _y ) then
15243: LD_VAR 0 11
15247: PPUSH
15248: LD_VAR 0 12
15252: PPUSH
15253: CALL_OW 458
15257: IFFALSE 15278
// ViewMineAtPos ( _x , _y , side ) ;
15259: LD_VAR 0 11
15263: PPUSH
15264: LD_VAR 0 12
15268: PPUSH
15269: LD_VAR 0 3
15273: PPUSH
15274: CALL_OW 457
// end ;
15278: GO 15221
15280: POP
15281: POP
15282: GO 15201
15284: POP
15285: POP
// end ;
15286: LD_VAR 0 2
15290: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
15291: LD_INT 0
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
// if not units then
15300: LD_VAR 0 1
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 15773
// scaners := [ ] ;
15309: LD_ADDR_VAR 0 6
15313: PUSH
15314: EMPTY
15315: ST_TO_ADDR
// for i in units do
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_VAR 0 1
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15484
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
15329: LD_VAR 0 3
15333: PPUSH
15334: CALL_OW 264
15338: PUSH
15339: LD_INT 11
15341: NONEQUAL
15342: IFTRUE 15356
15344: PUSH
15345: LD_VAR 0 3
15349: PPUSH
15350: CALL_OW 302
15354: NOT
15355: OR
15356: IFTRUE 15373
15358: PUSH
15359: LD_VAR 0 3
15363: PPUSH
15364: CALL_OW 110
15368: PUSH
15369: LD_INT 502
15371: EQUAL
15372: OR
15373: IFFALSE 15377
// continue ;
15375: GO 15326
// ComStop ( i ) ;
15377: LD_VAR 0 3
15381: PPUSH
15382: CALL_OW 141
// x := GetX ( i ) ;
15386: LD_ADDR_VAR 0 4
15390: PUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: CALL_OW 250
15400: ST_TO_ADDR
// y := GetY ( i ) ;
15401: LD_ADDR_VAR 0 5
15405: PUSH
15406: LD_VAR 0 3
15410: PPUSH
15411: CALL_OW 251
15415: ST_TO_ADDR
// if GetSide ( i ) = your_side then
15416: LD_VAR 0 3
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_OWVAR 2
15430: EQUAL
15431: IFFALSE 15450
// PlaySoundXY ( x , y , mineDetector ) ;
15433: LD_VAR 0 4
15437: PPUSH
15438: LD_VAR 0 5
15442: PPUSH
15443: LD_STRING mineDetector
15445: PPUSH
15446: CALL_OW 366
// scaners := Join ( scaners , i ) ;
15450: LD_ADDR_VAR 0 6
15454: PUSH
15455: LD_VAR 0 6
15459: PPUSH
15460: LD_VAR 0 3
15464: PPUSH
15465: CALL 55552 0 2
15469: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
15470: LD_VAR 0 3
15474: PPUSH
15475: LD_INT 502
15477: PPUSH
15478: CALL_OW 109
// end ;
15482: GO 15326
15484: POP
15485: POP
// if not scaners then
15486: LD_VAR 0 6
15490: NOT
15491: IFFALSE 15495
// exit ;
15493: GO 15773
// wait ( 3 ) ;
15495: LD_INT 3
15497: PPUSH
15498: CALL_OW 67
// timer := 6 ;
15502: LD_ADDR_VAR 0 7
15506: PUSH
15507: LD_INT 6
15509: ST_TO_ADDR
// repeat for i in scaners do
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_VAR 0 6
15519: PUSH
15520: FOR_IN
15521: IFFALSE 15671
// begin side := GetSide ( i ) ;
15523: LD_ADDR_VAR 0 8
15527: PUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: CALL_OW 255
15537: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
15538: LD_VAR 0 3
15542: PPUSH
15543: CALL_OW 302
15547: NOT
15548: IFTRUE 15561
15550: PUSH
15551: LD_VAR 0 3
15555: PPUSH
15556: CALL_OW 314
15560: OR
15561: IFTRUE 15592
15563: PUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: CALL_OW 263
15573: PUSH
15574: LD_INT 1
15576: EQUAL
15577: IFFALSE 15591
15579: PUSH
15580: LD_VAR 0 3
15584: PPUSH
15585: CALL_OW 311
15589: NOT
15590: AND
15591: OR
15592: IFFALSE 15636
// begin SetUnitDisplayNumber ( i , 0 ) ;
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 505
// SetTag ( i , 0 ) ;
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_INT 0
15613: PPUSH
15614: CALL_OW 109
// scaners := scaners diff i ;
15618: LD_ADDR_VAR 0 6
15622: PUSH
15623: LD_VAR 0 6
15627: PUSH
15628: LD_VAR 0 3
15632: DIFF
15633: ST_TO_ADDR
// continue ;
15634: GO 15520
// end ; if side in [ your_side , 9 ] then
15636: LD_VAR 0 8
15640: PUSH
15641: LD_OWVAR 2
15645: PUSH
15646: LD_INT 9
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: IN
15653: IFFALSE 15669
// SetUnitDisplayNumber ( i , timer ) ;
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_VAR 0 7
15664: PPUSH
15665: CALL_OW 505
// end ;
15669: GO 15520
15671: POP
15672: POP
// if not scaners then
15673: LD_VAR 0 6
15677: NOT
15678: IFFALSE 15682
// exit ;
15680: GO 15773
// timer := Dec ( timer ) ;
15682: LD_ADDR_VAR 0 7
15686: PUSH
15687: LD_VAR 0 7
15691: PPUSH
15692: CALL 56947 0 1
15696: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15697: LD_INT 35
15699: PPUSH
15700: CALL_OW 67
// until timer = 0 ;
15704: LD_VAR 0 7
15708: PUSH
15709: LD_INT 0
15711: EQUAL
15712: IFFALSE 15510
// if not scaners then
15714: LD_VAR 0 6
15718: NOT
15719: IFFALSE 15723
// exit ;
15721: GO 15773
// for i in scaners do
15723: LD_ADDR_VAR 0 3
15727: PUSH
15728: LD_VAR 0 6
15732: PUSH
15733: FOR_IN
15734: IFFALSE 15771
// begin SetUnitDisplayNumber ( i , 0 ) ;
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL_OW 505
// SetTag ( i , 0 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 0
15755: PPUSH
15756: CALL_OW 109
// RevealDetectorMine ( i ) ;
15760: LD_VAR 0 3
15764: PPUSH
15765: CALL 14993 0 1
// end ;
15769: GO 15733
15771: POP
15772: POP
// end ;
15773: LD_VAR 0 2
15777: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
15778: LD_INT 0
15780: PPUSH
// if p1 = mine_detector_mode then
15781: LD_VAR 0 2
15785: PUSH
15786: LD_INT 103
15788: EQUAL
15789: IFFALSE 15800
// DetectMine ( units ) ;
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL 15291 0 1
// end ; end_of_file
15800: LD_VAR 0 7
15804: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
15805: PPOPN 6
15807: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
15808: LD_INT 0
15810: PPUSH
// begin if not units then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15854
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
15820: LD_VAR 0 1
15824: PPUSH
15825: LD_VAR 0 2
15829: PPUSH
15830: LD_VAR 0 3
15834: PPUSH
15835: LD_VAR 0 4
15839: PPUSH
15840: LD_VAR 0 5
15844: PPUSH
15845: LD_VAR 0 6
15849: PPUSH
15850: CALL 15778 0 6
// end ;
15854: PPOPN 7
15856: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
15857: LD_EXP 2
15861: PUSH
15862: LD_INT 4
15864: EQUAL
15865: IFFALSE 15901
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15867: LD_STRING setGameDifficulty(
15869: PUSH
15870: LD_OWVAR 67
15874: STR
15875: PUSH
15876: LD_STRING )
15878: STR
15879: PPUSH
15880: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15884: LD_STRING displayDifficulty(
15886: PUSH
15887: LD_OWVAR 67
15891: STR
15892: PUSH
15893: LD_STRING )
15895: STR
15896: PPUSH
15897: CALL_OW 559
// end ; SOS_MapStart ( ) ;
15901: CALL 15930 0 0
// end ; end_of_file
15905: PPOPN 1
15907: END
// every 0 0$1 do
15908: GO 15910
15910: DISABLE
// begin enable ;
15911: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15912: LD_STRING updateTimer(
15914: PUSH
15915: LD_OWVAR 1
15919: STR
15920: PUSH
15921: LD_STRING );
15923: STR
15924: PPUSH
15925: CALL_OW 559
// end ;
15929: END
// export function SOS_MapStart ( ) ; begin
15930: LD_INT 0
15932: PPUSH
// UpdateFactoryWaypoints ( ) ;
15933: CALL 16864 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15937: CALL 17116 0 0
// ParseMultiDataToLua ( ) ;
15941: CALL 17263 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
15945: LD_STRING setSpecLogoNumber(
15947: PUSH
15948: LD_INT 2
15950: STR
15951: PUSH
15952: LD_STRING ,
15954: STR
15955: PUSH
15956: LD_INT 1
15958: STR
15959: PUSH
15960: LD_STRING )
15962: STR
15963: PPUSH
15964: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
15968: LD_STRING setSpecLogoNumber(
15970: PUSH
15971: LD_INT 3
15973: STR
15974: PUSH
15975: LD_STRING ,
15977: STR
15978: PUSH
15979: LD_INT 2
15981: STR
15982: PUSH
15983: LD_STRING )
15985: STR
15986: PPUSH
15987: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
15991: LD_STRING setSpecLogoNumber(
15993: PUSH
15994: LD_INT 4
15996: STR
15997: PUSH
15998: LD_STRING ,
16000: STR
16001: PUSH
16002: LD_INT 3
16004: STR
16005: PUSH
16006: LD_STRING )
16008: STR
16009: PPUSH
16010: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
16014: LD_STRING setSpecLogoNumber(
16016: PUSH
16017: LD_INT 5
16019: STR
16020: PUSH
16021: LD_STRING ,
16023: STR
16024: PUSH
16025: LD_INT 4
16027: STR
16028: PUSH
16029: LD_STRING )
16031: STR
16032: PPUSH
16033: CALL_OW 559
// end ;
16037: LD_VAR 0 1
16041: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
// for i := 1 to 8 do
16053: LD_ADDR_VAR 0 2
16057: PUSH
16058: DOUBLE
16059: LD_INT 1
16061: DEC
16062: ST_TO_ADDR
16063: LD_INT 8
16065: PUSH
16066: FOR_TO
16067: IFFALSE 16452
// begin if mpSidePositions [ i ] then
16069: LD_EXP 6
16073: PUSH
16074: LD_VAR 0 2
16078: ARRAY
16079: IFFALSE 16450
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
16081: LD_ADDR_VAR 0 7
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_VAR 0 2
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: PPUSH
16117: CALL 19576 0 1
16121: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16122: LD_ADDR_VAR 0 9
16126: PUSH
16127: LD_INT 22
16129: PUSH
16130: LD_VAR 0 2
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 30
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 30
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: ST_TO_ADDR
// crates := 0 ;
16176: LD_ADDR_VAR 0 4
16180: PUSH
16181: LD_INT 0
16183: ST_TO_ADDR
// oil := 0 ;
16184: LD_ADDR_VAR 0 5
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// sib := 0 ;
16192: LD_ADDR_VAR 0 6
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
// if bases then
16200: LD_VAR 0 9
16204: IFFALSE 16310
// begin for j in bases do
16206: LD_ADDR_VAR 0 3
16210: PUSH
16211: LD_VAR 0 9
16215: PUSH
16216: FOR_IN
16217: IFFALSE 16308
// begin base := GetBase ( j ) ;
16219: LD_ADDR_VAR 0 8
16223: PUSH
16224: LD_VAR 0 3
16228: PPUSH
16229: CALL_OW 274
16233: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16234: LD_ADDR_VAR 0 4
16238: PUSH
16239: LD_VAR 0 4
16243: PUSH
16244: LD_VAR 0 8
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 275
16256: PLUS
16257: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16258: LD_ADDR_VAR 0 5
16262: PUSH
16263: LD_VAR 0 5
16267: PUSH
16268: LD_VAR 0 8
16272: PPUSH
16273: LD_INT 2
16275: PPUSH
16276: CALL_OW 275
16280: PLUS
16281: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16282: LD_ADDR_VAR 0 6
16286: PUSH
16287: LD_VAR 0 6
16291: PUSH
16292: LD_VAR 0 8
16296: PPUSH
16297: LD_INT 3
16299: PPUSH
16300: CALL_OW 275
16304: PLUS
16305: ST_TO_ADDR
// end ;
16306: GO 16216
16308: POP
16309: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16310: LD_STRING setSpecText(
16312: PUSH
16313: LD_VAR 0 2
16317: STR
16318: PUSH
16319: LD_STRING ,
16321: STR
16322: PUSH
16323: LD_INT 2
16325: STR
16326: PUSH
16327: LD_STRING ,
16329: STR
16330: PUSH
16331: LD_VAR 0 4
16335: STR
16336: PUSH
16337: LD_STRING )
16339: STR
16340: PPUSH
16341: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16345: LD_STRING setSpecText(
16347: PUSH
16348: LD_VAR 0 2
16352: STR
16353: PUSH
16354: LD_STRING ,
16356: STR
16357: PUSH
16358: LD_INT 3
16360: STR
16361: PUSH
16362: LD_STRING ,
16364: STR
16365: PUSH
16366: LD_VAR 0 5
16370: STR
16371: PUSH
16372: LD_STRING )
16374: STR
16375: PPUSH
16376: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16380: LD_STRING setSpecText(
16382: PUSH
16383: LD_VAR 0 2
16387: STR
16388: PUSH
16389: LD_STRING ,
16391: STR
16392: PUSH
16393: LD_INT 4
16395: STR
16396: PUSH
16397: LD_STRING ,
16399: STR
16400: PUSH
16401: LD_VAR 0 6
16405: STR
16406: PUSH
16407: LD_STRING )
16409: STR
16410: PPUSH
16411: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16415: LD_STRING setSpecText(
16417: PUSH
16418: LD_VAR 0 2
16422: STR
16423: PUSH
16424: LD_STRING ,
16426: STR
16427: PUSH
16428: LD_INT 5
16430: STR
16431: PUSH
16432: LD_STRING ,
16434: STR
16435: PUSH
16436: LD_VAR 0 7
16440: STR
16441: PUSH
16442: LD_STRING )
16444: STR
16445: PPUSH
16446: CALL_OW 559
// end ; end ;
16450: GO 16066
16452: POP
16453: POP
// end ;
16454: LD_VAR 0 1
16458: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16459: LD_INT 2
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: PPUSH
16487: CALL_OW 69
16491: IFFALSE 16501
16493: GO 16495
16495: DISABLE
// begin enable ;
16496: ENABLE
// UpdateSpectatorBar ;
16497: CALL 16042 0 0
// end ;
16501: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16502: LD_INT 0
16504: PPUSH
// end ;
16505: LD_VAR 0 12
16509: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16510: LD_INT 0
16512: PPUSH
16513: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16514: LD_VAR 0 1
16518: NOT
16519: IFTRUE 16538
16521: PUSH
16522: LD_VAR 0 2
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: CALL_OW 488
16536: NOT
16537: OR
16538: IFTRUE 16573
16540: PUSH
16541: LD_VAR 0 1
16545: PPUSH
16546: CALL_OW 266
16550: PUSH
16551: LD_INT 3
16553: NONEQUAL
16554: IFFALSE 16572
16556: PUSH
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 247
16566: PUSH
16567: LD_INT 1
16569: EQUAL
16570: NOT
16571: AND
16572: OR
16573: IFFALSE 16577
// exit ;
16575: GO 16859
// if GetType ( factory ) = unit_human then
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 247
16586: PUSH
16587: LD_INT 1
16589: EQUAL
16590: IFFALSE 16607
// factory := IsInUnit ( factory ) ;
16592: LD_ADDR_VAR 0 1
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 310
16606: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 266
16616: PUSH
16617: LD_INT 3
16619: NONEQUAL
16620: IFFALSE 16624
// exit ;
16622: GO 16859
// for i := 1 to Count ( factoryWaypoints ) do
16624: LD_ADDR_VAR 0 5
16628: PUSH
16629: DOUBLE
16630: LD_INT 1
16632: DEC
16633: ST_TO_ADDR
16634: LD_EXP 59
16638: PPUSH
16639: CALL 19576 0 1
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16807
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16647: LD_VAR 0 2
16651: PPUSH
16652: LD_VAR 0 3
16656: PPUSH
16657: CALL_OW 428
16661: PUSH
16662: LD_EXP 59
16666: PUSH
16667: LD_VAR 0 5
16671: ARRAY
16672: PUSH
16673: LD_INT 2
16675: ARRAY
16676: EQUAL
16677: IFFALSE 16709
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16679: LD_ADDR_EXP 59
16683: PUSH
16684: LD_EXP 59
16688: PPUSH
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 3
16698: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16699: CALL 16864 0 0
// exit ;
16703: POP
16704: POP
16705: GO 16859
// end else
16707: GO 16805
// if factory = factoryWaypoints [ i ] [ 2 ] then
16709: LD_VAR 0 1
16713: PUSH
16714: LD_EXP 59
16718: PUSH
16719: LD_VAR 0 5
16723: ARRAY
16724: PUSH
16725: LD_INT 2
16727: ARRAY
16728: EQUAL
16729: IFFALSE 16805
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16731: LD_ADDR_EXP 59
16735: PUSH
16736: LD_EXP 59
16740: PPUSH
16741: LD_VAR 0 5
16745: PPUSH
16746: CALL_OW 3
16750: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16751: LD_ADDR_EXP 59
16755: PUSH
16756: LD_EXP 59
16760: PPUSH
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL_OW 255
16770: PUSH
16771: LD_VAR 0 1
16775: PUSH
16776: LD_VAR 0 2
16780: PUSH
16781: LD_VAR 0 3
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL 55552 0 2
16796: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16797: CALL 16864 0 0
// exit ;
16801: POP
16802: POP
16803: GO 16859
// end ; end ;
16805: GO 16644
16807: POP
16808: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16809: LD_ADDR_EXP 59
16813: PUSH
16814: LD_EXP 59
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 255
16828: PUSH
16829: LD_VAR 0 1
16833: PUSH
16834: LD_VAR 0 2
16838: PUSH
16839: LD_VAR 0 3
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL 55552 0 2
16854: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16855: CALL 16864 0 0
// end ;
16859: LD_VAR 0 4
16863: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16864: LD_INT 0
16866: PPUSH
16867: PPUSH
16868: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16869: LD_STRING resetFactoryWaypoint();
16871: PPUSH
16872: CALL_OW 559
// if factoryWaypoints then
16876: LD_EXP 59
16880: IFFALSE 17001
// begin list := factoryWaypoints ;
16882: LD_ADDR_VAR 0 3
16886: PUSH
16887: LD_EXP 59
16891: ST_TO_ADDR
// for i := 1 to list do
16892: LD_ADDR_VAR 0 2
16896: PUSH
16897: DOUBLE
16898: LD_INT 1
16900: DEC
16901: ST_TO_ADDR
16902: LD_VAR 0 3
16906: PUSH
16907: FOR_TO
16908: IFFALSE 16999
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16910: LD_STRING setFactoryWaypointXY(
16912: PUSH
16913: LD_VAR 0 3
16917: PUSH
16918: LD_VAR 0 2
16922: ARRAY
16923: PUSH
16924: LD_INT 1
16926: ARRAY
16927: STR
16928: PUSH
16929: LD_STRING ,
16931: STR
16932: PUSH
16933: LD_VAR 0 3
16937: PUSH
16938: LD_VAR 0 2
16942: ARRAY
16943: PUSH
16944: LD_INT 2
16946: ARRAY
16947: STR
16948: PUSH
16949: LD_STRING ,
16951: STR
16952: PUSH
16953: LD_VAR 0 3
16957: PUSH
16958: LD_VAR 0 2
16962: ARRAY
16963: PUSH
16964: LD_INT 3
16966: ARRAY
16967: STR
16968: PUSH
16969: LD_STRING ,
16971: STR
16972: PUSH
16973: LD_VAR 0 3
16977: PUSH
16978: LD_VAR 0 2
16982: ARRAY
16983: PUSH
16984: LD_INT 4
16986: ARRAY
16987: STR
16988: PUSH
16989: LD_STRING )
16991: STR
16992: PPUSH
16993: CALL_OW 559
16997: GO 16907
16999: POP
17000: POP
// end ; end ;
17001: LD_VAR 0 1
17005: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
17006: LD_INT 0
17008: PPUSH
// if HexInfo ( x , y ) = warehouse then
17009: LD_VAR 0 2
17013: PPUSH
17014: LD_VAR 0 3
17018: PPUSH
17019: CALL_OW 428
17023: PUSH
17024: LD_VAR 0 1
17028: EQUAL
17029: IFFALSE 17056
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17031: LD_ADDR_EXP 61
17035: PUSH
17036: LD_EXP 61
17040: PPUSH
17041: LD_VAR 0 1
17045: PPUSH
17046: LD_INT 0
17048: PPUSH
17049: CALL_OW 1
17053: ST_TO_ADDR
17054: GO 17107
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17056: LD_ADDR_EXP 61
17060: PUSH
17061: LD_EXP 61
17065: PPUSH
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 255
17080: PUSH
17081: LD_VAR 0 1
17085: PUSH
17086: LD_VAR 0 2
17090: PUSH
17091: LD_VAR 0 3
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 1
17106: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17107: CALL 17116 0 0
// end ;
17111: LD_VAR 0 4
17115: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17116: LD_INT 0
17118: PPUSH
17119: PPUSH
17120: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17121: LD_STRING resetWarehouseGatheringPoints();
17123: PPUSH
17124: CALL_OW 559
// if warehouseGatheringPoints then
17128: LD_EXP 61
17132: IFFALSE 17258
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_EXP 61
17143: PPUSH
17144: CALL 59486 0 1
17148: ST_TO_ADDR
// for i := 1 to list do
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: DOUBLE
17155: LD_INT 1
17157: DEC
17158: ST_TO_ADDR
17159: LD_VAR 0 3
17163: PUSH
17164: FOR_TO
17165: IFFALSE 17256
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17167: LD_STRING setWarehouseGatheringPointXY(
17169: PUSH
17170: LD_VAR 0 3
17174: PUSH
17175: LD_VAR 0 2
17179: ARRAY
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: STR
17185: PUSH
17186: LD_STRING ,
17188: STR
17189: PUSH
17190: LD_VAR 0 3
17194: PUSH
17195: LD_VAR 0 2
17199: ARRAY
17200: PUSH
17201: LD_INT 2
17203: ARRAY
17204: STR
17205: PUSH
17206: LD_STRING ,
17208: STR
17209: PUSH
17210: LD_VAR 0 3
17214: PUSH
17215: LD_VAR 0 2
17219: ARRAY
17220: PUSH
17221: LD_INT 3
17223: ARRAY
17224: STR
17225: PUSH
17226: LD_STRING ,
17228: STR
17229: PUSH
17230: LD_VAR 0 3
17234: PUSH
17235: LD_VAR 0 2
17239: ARRAY
17240: PUSH
17241: LD_INT 4
17243: ARRAY
17244: STR
17245: PUSH
17246: LD_STRING )
17248: STR
17249: PPUSH
17250: CALL_OW 559
17254: GO 17164
17256: POP
17257: POP
// end ; end ;
17258: LD_VAR 0 1
17262: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
17263: LD_INT 0
17265: PPUSH
17266: PPUSH
// if not mpSidePositions then
17267: LD_EXP 6
17271: NOT
17272: IFFALSE 17276
// exit ;
17274: GO 17347
// result :=  ;
17276: LD_ADDR_VAR 0 1
17280: PUSH
17281: LD_STRING 
17283: ST_TO_ADDR
// for i := 1 to 8 do
17284: LD_ADDR_VAR 0 2
17288: PUSH
17289: DOUBLE
17290: LD_INT 1
17292: DEC
17293: ST_TO_ADDR
17294: LD_INT 8
17296: PUSH
17297: FOR_TO
17298: IFFALSE 17328
// begin result := result & mpSidePositions [ i ] & ; ;
17300: LD_ADDR_VAR 0 1
17304: PUSH
17305: LD_VAR 0 1
17309: PUSH
17310: LD_EXP 6
17314: PUSH
17315: LD_VAR 0 2
17319: ARRAY
17320: STR
17321: PUSH
17322: LD_STRING ;
17324: STR
17325: ST_TO_ADDR
// end ;
17326: GO 17297
17328: POP
17329: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
17330: LD_STRING setMultiplayerRealPosition("
17332: PUSH
17333: LD_VAR 0 1
17337: STR
17338: PUSH
17339: LD_STRING ");
17341: STR
17342: PPUSH
17343: CALL_OW 559
// end ; end_of_file end_of_file
17347: LD_VAR 0 1
17351: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
// if exist_mode then
17356: LD_VAR 0 2
17360: IFFALSE 17406
// begin unit := CreateCharacter ( prefix & ident ) ;
17362: LD_ADDR_VAR 0 5
17366: PUSH
17367: LD_VAR 0 3
17371: PUSH
17372: LD_VAR 0 1
17376: STR
17377: PPUSH
17378: CALL_OW 34
17382: ST_TO_ADDR
// if unit then
17383: LD_VAR 0 5
17387: IFFALSE 17404
// DeleteCharacters ( prefix & ident ) ;
17389: LD_VAR 0 3
17393: PUSH
17394: LD_VAR 0 1
17398: STR
17399: PPUSH
17400: CALL_OW 40
// end else
17404: GO 17421
// unit := NewCharacter ( ident ) ;
17406: LD_ADDR_VAR 0 5
17410: PUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 25
17420: ST_TO_ADDR
// result := unit ;
17421: LD_ADDR_VAR 0 4
17425: PUSH
17426: LD_VAR 0 5
17430: ST_TO_ADDR
// end ;
17431: LD_VAR 0 4
17435: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17436: LD_INT 0
17438: PPUSH
17439: PPUSH
// if exist_mode then
17440: LD_VAR 0 2
17444: IFFALSE 17469
// unit := CreateCharacter ( prefix & ident ) else
17446: LD_ADDR_VAR 0 5
17450: PUSH
17451: LD_VAR 0 3
17455: PUSH
17456: LD_VAR 0 1
17460: STR
17461: PPUSH
17462: CALL_OW 34
17466: ST_TO_ADDR
17467: GO 17484
// unit := NewCharacter ( ident ) ;
17469: LD_ADDR_VAR 0 5
17473: PUSH
17474: LD_VAR 0 1
17478: PPUSH
17479: CALL_OW 25
17483: ST_TO_ADDR
// result := unit ;
17484: LD_ADDR_VAR 0 4
17488: PUSH
17489: LD_VAR 0 5
17493: ST_TO_ADDR
// end ;
17494: LD_VAR 0 4
17498: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
// if not side or not nation then
17503: LD_VAR 0 1
17507: NOT
17508: IFTRUE 17517
17510: PUSH
17511: LD_VAR 0 2
17515: NOT
17516: OR
17517: IFFALSE 17521
// exit ;
17519: GO 18315
// case nation of nation_american :
17521: LD_VAR 0 2
17525: PUSH
17526: LD_INT 1
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17756
17534: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17535: LD_ADDR_VAR 0 4
17539: PUSH
17540: LD_INT 35
17542: PUSH
17543: LD_INT 45
17545: PUSH
17546: LD_INT 46
17548: PUSH
17549: LD_INT 47
17551: PUSH
17552: LD_INT 82
17554: PUSH
17555: LD_INT 83
17557: PUSH
17558: LD_INT 84
17560: PUSH
17561: LD_INT 85
17563: PUSH
17564: LD_INT 86
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 6
17575: PUSH
17576: LD_INT 15
17578: PUSH
17579: LD_INT 16
17581: PUSH
17582: LD_INT 7
17584: PUSH
17585: LD_INT 12
17587: PUSH
17588: LD_INT 13
17590: PUSH
17591: LD_INT 10
17593: PUSH
17594: LD_INT 14
17596: PUSH
17597: LD_INT 20
17599: PUSH
17600: LD_INT 21
17602: PUSH
17603: LD_INT 22
17605: PUSH
17606: LD_INT 25
17608: PUSH
17609: LD_INT 32
17611: PUSH
17612: LD_INT 27
17614: PUSH
17615: LD_INT 36
17617: PUSH
17618: LD_INT 69
17620: PUSH
17621: LD_INT 39
17623: PUSH
17624: LD_INT 34
17626: PUSH
17627: LD_INT 40
17629: PUSH
17630: LD_INT 48
17632: PUSH
17633: LD_INT 49
17635: PUSH
17636: LD_INT 50
17638: PUSH
17639: LD_INT 51
17641: PUSH
17642: LD_INT 52
17644: PUSH
17645: LD_INT 53
17647: PUSH
17648: LD_INT 54
17650: PUSH
17651: LD_INT 55
17653: PUSH
17654: LD_INT 56
17656: PUSH
17657: LD_INT 57
17659: PUSH
17660: LD_INT 58
17662: PUSH
17663: LD_INT 59
17665: PUSH
17666: LD_INT 60
17668: PUSH
17669: LD_INT 61
17671: PUSH
17672: LD_INT 62
17674: PUSH
17675: LD_INT 80
17677: PUSH
17678: LD_INT 82
17680: PUSH
17681: LD_INT 83
17683: PUSH
17684: LD_INT 84
17686: PUSH
17687: LD_INT 85
17689: PUSH
17690: LD_INT 86
17692: PUSH
17693: LD_INT 90
17695: PUSH
17696: LD_INT 93
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: ST_TO_ADDR
17754: GO 18237
17756: LD_INT 2
17758: DOUBLE
17759: EQUAL
17760: IFTRUE 17764
17762: GO 17998
17764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
17765: LD_ADDR_VAR 0 4
17769: PUSH
17770: LD_INT 35
17772: PUSH
17773: LD_INT 45
17775: PUSH
17776: LD_INT 46
17778: PUSH
17779: LD_INT 47
17781: PUSH
17782: LD_INT 82
17784: PUSH
17785: LD_INT 83
17787: PUSH
17788: LD_INT 84
17790: PUSH
17791: LD_INT 85
17793: PUSH
17794: LD_INT 87
17796: PUSH
17797: LD_INT 70
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 11
17805: PUSH
17806: LD_INT 3
17808: PUSH
17809: LD_INT 4
17811: PUSH
17812: LD_INT 5
17814: PUSH
17815: LD_INT 6
17817: PUSH
17818: LD_INT 15
17820: PUSH
17821: LD_INT 18
17823: PUSH
17824: LD_INT 7
17826: PUSH
17827: LD_INT 17
17829: PUSH
17830: LD_INT 8
17832: PUSH
17833: LD_INT 20
17835: PUSH
17836: LD_INT 21
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 72
17844: PUSH
17845: LD_INT 26
17847: PUSH
17848: LD_INT 69
17850: PUSH
17851: LD_INT 39
17853: PUSH
17854: LD_INT 40
17856: PUSH
17857: LD_INT 41
17859: PUSH
17860: LD_INT 42
17862: PUSH
17863: LD_INT 43
17865: PUSH
17866: LD_INT 48
17868: PUSH
17869: LD_INT 49
17871: PUSH
17872: LD_INT 50
17874: PUSH
17875: LD_INT 51
17877: PUSH
17878: LD_INT 52
17880: PUSH
17881: LD_INT 53
17883: PUSH
17884: LD_INT 54
17886: PUSH
17887: LD_INT 55
17889: PUSH
17890: LD_INT 56
17892: PUSH
17893: LD_INT 60
17895: PUSH
17896: LD_INT 61
17898: PUSH
17899: LD_INT 62
17901: PUSH
17902: LD_INT 66
17904: PUSH
17905: LD_INT 67
17907: PUSH
17908: LD_INT 68
17910: PUSH
17911: LD_INT 81
17913: PUSH
17914: LD_INT 82
17916: PUSH
17917: LD_INT 83
17919: PUSH
17920: LD_INT 84
17922: PUSH
17923: LD_INT 85
17925: PUSH
17926: LD_INT 87
17928: PUSH
17929: LD_INT 88
17931: PUSH
17932: LD_INT 92
17934: PUSH
17935: LD_INT 94
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: ST_TO_ADDR
17996: GO 18237
17998: LD_INT 3
18000: DOUBLE
18001: EQUAL
18002: IFTRUE 18006
18004: GO 18236
18006: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
18007: LD_ADDR_VAR 0 4
18011: PUSH
18012: LD_INT 46
18014: PUSH
18015: LD_INT 47
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: LD_INT 82
18026: PUSH
18027: LD_INT 83
18029: PUSH
18030: LD_INT 84
18032: PUSH
18033: LD_INT 85
18035: PUSH
18036: LD_INT 86
18038: PUSH
18039: LD_INT 11
18041: PUSH
18042: LD_INT 9
18044: PUSH
18045: LD_INT 20
18047: PUSH
18048: LD_INT 19
18050: PUSH
18051: LD_INT 21
18053: PUSH
18054: LD_INT 24
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 28
18065: PUSH
18066: LD_INT 29
18068: PUSH
18069: LD_INT 30
18071: PUSH
18072: LD_INT 31
18074: PUSH
18075: LD_INT 37
18077: PUSH
18078: LD_INT 38
18080: PUSH
18081: LD_INT 32
18083: PUSH
18084: LD_INT 27
18086: PUSH
18087: LD_INT 33
18089: PUSH
18090: LD_INT 69
18092: PUSH
18093: LD_INT 39
18095: PUSH
18096: LD_INT 34
18098: PUSH
18099: LD_INT 40
18101: PUSH
18102: LD_INT 71
18104: PUSH
18105: LD_INT 23
18107: PUSH
18108: LD_INT 44
18110: PUSH
18111: LD_INT 48
18113: PUSH
18114: LD_INT 49
18116: PUSH
18117: LD_INT 50
18119: PUSH
18120: LD_INT 51
18122: PUSH
18123: LD_INT 52
18125: PUSH
18126: LD_INT 53
18128: PUSH
18129: LD_INT 54
18131: PUSH
18132: LD_INT 55
18134: PUSH
18135: LD_INT 56
18137: PUSH
18138: LD_INT 57
18140: PUSH
18141: LD_INT 58
18143: PUSH
18144: LD_INT 59
18146: PUSH
18147: LD_INT 63
18149: PUSH
18150: LD_INT 64
18152: PUSH
18153: LD_INT 65
18155: PUSH
18156: LD_INT 82
18158: PUSH
18159: LD_INT 83
18161: PUSH
18162: LD_INT 84
18164: PUSH
18165: LD_INT 85
18167: PUSH
18168: LD_INT 86
18170: PUSH
18171: LD_INT 89
18173: PUSH
18174: LD_INT 91
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: ST_TO_ADDR
18234: GO 18237
18236: POP
// if state > - 1 and state < 3 then
18237: LD_VAR 0 3
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: GREATER
18246: IFFALSE 18258
18248: PUSH
18249: LD_VAR 0 3
18253: PUSH
18254: LD_INT 3
18256: LESS
18257: AND
18258: IFFALSE 18315
// for i in result do
18260: LD_ADDR_VAR 0 5
18264: PUSH
18265: LD_VAR 0 4
18269: PUSH
18270: FOR_IN
18271: IFFALSE 18313
// if GetTech ( i , side ) <> state then
18273: LD_VAR 0 5
18277: PPUSH
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 321
18287: PUSH
18288: LD_VAR 0 3
18292: NONEQUAL
18293: IFFALSE 18311
// result := result diff i ;
18295: LD_ADDR_VAR 0 4
18299: PUSH
18300: LD_VAR 0 4
18304: PUSH
18305: LD_VAR 0 5
18309: DIFF
18310: ST_TO_ADDR
18311: GO 18270
18313: POP
18314: POP
// end ;
18315: LD_VAR 0 4
18319: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18320: LD_INT 0
18322: PPUSH
18323: PPUSH
18324: PPUSH
// result := true ;
18325: LD_ADDR_VAR 0 3
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18333: LD_ADDR_VAR 0 5
18337: PUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: CALL_OW 480
18347: ST_TO_ADDR
// if not tmp then
18348: LD_VAR 0 5
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18406
// for i in tmp do
18357: LD_ADDR_VAR 0 4
18361: PUSH
18362: LD_VAR 0 5
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18404
// if GetTech ( i , side ) <> state_researched then
18370: LD_VAR 0 4
18374: PPUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 321
18384: PUSH
18385: LD_INT 2
18387: NONEQUAL
18388: IFFALSE 18402
// begin result := false ;
18390: LD_ADDR_VAR 0 3
18394: PUSH
18395: LD_INT 0
18397: ST_TO_ADDR
// exit ;
18398: POP
18399: POP
18400: GO 18406
// end ;
18402: GO 18367
18404: POP
18405: POP
// end ;
18406: LD_VAR 0 3
18410: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18411: LD_INT 0
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18426: LD_VAR 0 1
18430: NOT
18431: IFTRUE 18448
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 257
18443: PUSH
18444: LD_INT 9
18446: NONEQUAL
18447: OR
18448: IFFALSE 18452
// exit ;
18450: GO 19031
// side := GetSide ( unit ) ;
18452: LD_ADDR_VAR 0 9
18456: PUSH
18457: LD_VAR 0 1
18461: PPUSH
18462: CALL_OW 255
18466: ST_TO_ADDR
// tech_space := tech_spacanom ;
18467: LD_ADDR_VAR 0 12
18471: PUSH
18472: LD_INT 29
18474: ST_TO_ADDR
// tech_time := tech_taurad ;
18475: LD_ADDR_VAR 0 13
18479: PUSH
18480: LD_INT 28
18482: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18483: LD_ADDR_VAR 0 11
18487: PUSH
18488: LD_VAR 0 1
18492: PPUSH
18493: CALL_OW 310
18497: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18498: LD_VAR 0 11
18502: PPUSH
18503: CALL_OW 247
18507: PUSH
18508: LD_INT 2
18510: EQUAL
18511: IFFALSE 18515
// exit ;
18513: GO 19031
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18515: LD_ADDR_VAR 0 8
18519: PUSH
18520: LD_INT 81
18522: PUSH
18523: LD_VAR 0 9
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: LD_INT 21
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PPUSH
18553: CALL_OW 69
18557: ST_TO_ADDR
// if not tmp then
18558: LD_VAR 0 8
18562: NOT
18563: IFFALSE 18567
// exit ;
18565: GO 19031
// if in_unit then
18567: LD_VAR 0 11
18571: IFFALSE 18595
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18573: LD_ADDR_VAR 0 10
18577: PUSH
18578: LD_VAR 0 8
18582: PPUSH
18583: LD_VAR 0 11
18587: PPUSH
18588: CALL_OW 74
18592: ST_TO_ADDR
18593: GO 18615
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18595: LD_ADDR_VAR 0 10
18599: PUSH
18600: LD_VAR 0 8
18604: PPUSH
18605: LD_VAR 0 1
18609: PPUSH
18610: CALL_OW 74
18614: ST_TO_ADDR
// if not enemy then
18615: LD_VAR 0 10
18619: NOT
18620: IFFALSE 18624
// exit ;
18622: GO 19031
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18624: LD_VAR 0 11
18628: IFFALSE 18650
18630: PUSH
18631: LD_VAR 0 11
18635: PPUSH
18636: LD_VAR 0 10
18640: PPUSH
18641: CALL_OW 296
18645: PUSH
18646: LD_INT 13
18648: GREATER
18649: AND
18650: IFTRUE 18672
18652: PUSH
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_VAR 0 10
18662: PPUSH
18663: CALL_OW 296
18667: PUSH
18668: LD_INT 12
18670: GREATER
18671: OR
18672: IFFALSE 18676
// exit ;
18674: GO 19031
// missile := [ 1 ] ;
18676: LD_ADDR_VAR 0 14
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18687: LD_VAR 0 9
18691: PPUSH
18692: LD_VAR 0 12
18696: PPUSH
18697: CALL_OW 325
18701: IFFALSE 18730
// missile := Replace ( missile , missile + 1 , 2 ) ;
18703: LD_ADDR_VAR 0 14
18707: PUSH
18708: LD_VAR 0 14
18712: PPUSH
18713: LD_VAR 0 14
18717: PUSH
18718: LD_INT 1
18720: PLUS
18721: PPUSH
18722: LD_INT 2
18724: PPUSH
18725: CALL_OW 1
18729: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18730: LD_VAR 0 9
18734: PPUSH
18735: LD_VAR 0 13
18739: PPUSH
18740: CALL_OW 325
18744: IFFALSE 18768
18746: PUSH
18747: LD_VAR 0 10
18751: PPUSH
18752: CALL_OW 255
18756: PPUSH
18757: LD_VAR 0 13
18761: PPUSH
18762: CALL_OW 325
18766: NOT
18767: AND
18768: IFFALSE 18797
// missile := Replace ( missile , missile + 1 , 3 ) ;
18770: LD_ADDR_VAR 0 14
18774: PUSH
18775: LD_VAR 0 14
18779: PPUSH
18780: LD_VAR 0 14
18784: PUSH
18785: LD_INT 1
18787: PLUS
18788: PPUSH
18789: LD_INT 3
18791: PPUSH
18792: CALL_OW 1
18796: ST_TO_ADDR
// if missile < 2 then
18797: LD_VAR 0 14
18801: PUSH
18802: LD_INT 2
18804: LESS
18805: IFFALSE 18809
// exit ;
18807: GO 19031
// x := GetX ( enemy ) ;
18809: LD_ADDR_VAR 0 4
18813: PUSH
18814: LD_VAR 0 10
18818: PPUSH
18819: CALL_OW 250
18823: ST_TO_ADDR
// y := GetY ( enemy ) ;
18824: LD_ADDR_VAR 0 5
18828: PUSH
18829: LD_VAR 0 10
18833: PPUSH
18834: CALL_OW 251
18838: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18839: LD_ADDR_VAR 0 6
18843: PUSH
18844: LD_VAR 0 4
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: CALL_OW 12
18860: PLUS
18861: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18862: LD_ADDR_VAR 0 7
18866: PUSH
18867: LD_VAR 0 5
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PPUSH
18876: LD_INT 1
18878: PPUSH
18879: CALL_OW 12
18883: PLUS
18884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18885: LD_VAR 0 6
18889: PPUSH
18890: LD_VAR 0 7
18894: PPUSH
18895: CALL_OW 488
18899: NOT
18900: IFFALSE 18922
// begin _x := x ;
18902: LD_ADDR_VAR 0 6
18906: PUSH
18907: LD_VAR 0 4
18911: ST_TO_ADDR
// _y := y ;
18912: LD_ADDR_VAR 0 7
18916: PUSH
18917: LD_VAR 0 5
18921: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18922: LD_ADDR_VAR 0 3
18926: PUSH
18927: LD_INT 1
18929: PPUSH
18930: LD_VAR 0 14
18934: PPUSH
18935: CALL_OW 12
18939: ST_TO_ADDR
// case i of 1 :
18940: LD_VAR 0 3
18944: PUSH
18945: LD_INT 1
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18970
18953: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18954: LD_VAR 0 1
18958: PPUSH
18959: LD_VAR 0 10
18963: PPUSH
18964: CALL_OW 115
18968: GO 19031
18970: LD_INT 2
18972: DOUBLE
18973: EQUAL
18974: IFTRUE 18978
18976: GO 19000
18978: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18979: LD_VAR 0 1
18983: PPUSH
18984: LD_VAR 0 6
18988: PPUSH
18989: LD_VAR 0 7
18993: PPUSH
18994: CALL_OW 153
18998: GO 19031
19000: LD_INT 3
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19030
19008: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19009: LD_VAR 0 1
19013: PPUSH
19014: LD_VAR 0 6
19018: PPUSH
19019: LD_VAR 0 7
19023: PPUSH
19024: CALL_OW 154
19028: GO 19031
19030: POP
// end ;
19031: LD_VAR 0 2
19035: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19036: LD_INT 0
19038: PPUSH
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
19043: PPUSH
// if not unit or not building then
19044: LD_VAR 0 1
19048: NOT
19049: IFTRUE 19058
19051: PUSH
19052: LD_VAR 0 2
19056: NOT
19057: OR
19058: IFFALSE 19062
// exit ;
19060: GO 19220
// x := GetX ( building ) ;
19062: LD_ADDR_VAR 0 5
19066: PUSH
19067: LD_VAR 0 2
19071: PPUSH
19072: CALL_OW 250
19076: ST_TO_ADDR
// y := GetY ( building ) ;
19077: LD_ADDR_VAR 0 6
19081: PUSH
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 251
19091: ST_TO_ADDR
// for i := 0 to 5 do
19092: LD_ADDR_VAR 0 4
19096: PUSH
19097: DOUBLE
19098: LD_INT 0
19100: DEC
19101: ST_TO_ADDR
19102: LD_INT 5
19104: PUSH
19105: FOR_TO
19106: IFFALSE 19218
// begin _x := ShiftX ( x , i , 3 ) ;
19108: LD_ADDR_VAR 0 7
19112: PUSH
19113: LD_VAR 0 5
19117: PPUSH
19118: LD_VAR 0 4
19122: PPUSH
19123: LD_INT 3
19125: PPUSH
19126: CALL_OW 272
19130: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19131: LD_ADDR_VAR 0 8
19135: PUSH
19136: LD_VAR 0 6
19140: PPUSH
19141: LD_VAR 0 4
19145: PPUSH
19146: LD_INT 3
19148: PPUSH
19149: CALL_OW 273
19153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19154: LD_VAR 0 7
19158: PPUSH
19159: LD_VAR 0 8
19163: PPUSH
19164: CALL_OW 488
19168: NOT
19169: IFFALSE 19173
// continue ;
19171: GO 19105
// if HexInfo ( _x , _y ) = 0 then
19173: LD_VAR 0 7
19177: PPUSH
19178: LD_VAR 0 8
19182: PPUSH
19183: CALL_OW 428
19187: PUSH
19188: LD_INT 0
19190: EQUAL
19191: IFFALSE 19216
// begin ComMoveXY ( unit , _x , _y ) ;
19193: LD_VAR 0 1
19197: PPUSH
19198: LD_VAR 0 7
19202: PPUSH
19203: LD_VAR 0 8
19207: PPUSH
19208: CALL_OW 111
// exit ;
19212: POP
19213: POP
19214: GO 19220
// end ; end ;
19216: GO 19105
19218: POP
19219: POP
// end ;
19220: LD_VAR 0 3
19224: RET
// export function ScanBase ( side , base_area ) ; begin
19225: LD_INT 0
19227: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19228: LD_ADDR_VAR 0 3
19232: PUSH
19233: LD_VAR 0 2
19237: PPUSH
19238: LD_INT 81
19240: PUSH
19241: LD_VAR 0 1
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 70
19254: ST_TO_ADDR
// end ;
19255: LD_VAR 0 3
19259: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
19264: PPUSH
19265: PPUSH
// result := false ;
19266: LD_ADDR_VAR 0 2
19270: PUSH
19271: LD_INT 0
19273: ST_TO_ADDR
// side := GetSide ( unit ) ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_VAR 0 1
19283: PPUSH
19284: CALL_OW 255
19288: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19289: LD_ADDR_VAR 0 4
19293: PUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 248
19303: ST_TO_ADDR
// case nat of 1 :
19304: LD_VAR 0 4
19308: PUSH
19309: LD_INT 1
19311: DOUBLE
19312: EQUAL
19313: IFTRUE 19317
19315: GO 19328
19317: POP
// tech := tech_lassight ; 2 :
19318: LD_ADDR_VAR 0 5
19322: PUSH
19323: LD_INT 12
19325: ST_TO_ADDR
19326: GO 19367
19328: LD_INT 2
19330: DOUBLE
19331: EQUAL
19332: IFTRUE 19336
19334: GO 19347
19336: POP
// tech := tech_mortar ; 3 :
19337: LD_ADDR_VAR 0 5
19341: PUSH
19342: LD_INT 41
19344: ST_TO_ADDR
19345: GO 19367
19347: LD_INT 3
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19366
19355: POP
// tech := tech_bazooka ; end ;
19356: LD_ADDR_VAR 0 5
19360: PUSH
19361: LD_INT 44
19363: ST_TO_ADDR
19364: GO 19367
19366: POP
// if Researched ( side , tech ) then
19367: LD_VAR 0 3
19371: PPUSH
19372: LD_VAR 0 5
19376: PPUSH
19377: CALL_OW 325
19381: IFFALSE 19408
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19383: LD_ADDR_VAR 0 2
19387: PUSH
19388: LD_INT 5
19390: PUSH
19391: LD_INT 8
19393: PUSH
19394: LD_INT 9
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_VAR 0 4
19406: ARRAY
19407: ST_TO_ADDR
// end ;
19408: LD_VAR 0 2
19412: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
19417: PPUSH
// if not mines then
19418: LD_VAR 0 2
19422: NOT
19423: IFFALSE 19427
// exit ;
19425: GO 19571
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19427: LD_ADDR_VAR 0 5
19431: PUSH
19432: LD_INT 81
19434: PUSH
19435: LD_VAR 0 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 3
19446: PUSH
19447: LD_INT 21
19449: PUSH
19450: LD_INT 3
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PPUSH
19465: CALL_OW 69
19469: ST_TO_ADDR
// for i in mines do
19470: LD_ADDR_VAR 0 4
19474: PUSH
19475: LD_VAR 0 2
19479: PUSH
19480: FOR_IN
19481: IFFALSE 19569
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19483: LD_VAR 0 4
19487: PUSH
19488: LD_INT 1
19490: ARRAY
19491: PPUSH
19492: LD_VAR 0 4
19496: PUSH
19497: LD_INT 2
19499: ARRAY
19500: PPUSH
19501: CALL_OW 458
19505: NOT
19506: IFFALSE 19510
// continue ;
19508: GO 19480
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19510: LD_VAR 0 4
19514: PUSH
19515: LD_INT 1
19517: ARRAY
19518: PPUSH
19519: LD_VAR 0 4
19523: PUSH
19524: LD_INT 2
19526: ARRAY
19527: PPUSH
19528: CALL_OW 428
19532: PUSH
19533: LD_VAR 0 5
19537: IN
19538: IFFALSE 19567
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19540: LD_VAR 0 4
19544: PUSH
19545: LD_INT 1
19547: ARRAY
19548: PPUSH
19549: LD_VAR 0 4
19553: PUSH
19554: LD_INT 2
19556: ARRAY
19557: PPUSH
19558: LD_VAR 0 1
19562: PPUSH
19563: CALL_OW 456
// end ;
19567: GO 19480
19569: POP
19570: POP
// end ;
19571: LD_VAR 0 3
19575: RET
// export function Count ( array ) ; begin
19576: LD_INT 0
19578: PPUSH
// result := array + 0 ;
19579: LD_ADDR_VAR 0 2
19583: PUSH
19584: LD_VAR 0 1
19588: PUSH
19589: LD_INT 0
19591: PLUS
19592: ST_TO_ADDR
// end ;
19593: LD_VAR 0 2
19597: RET
// export function IsEmpty ( building ) ; begin
19598: LD_INT 0
19600: PPUSH
// if not building then
19601: LD_VAR 0 1
19605: NOT
19606: IFFALSE 19610
// exit ;
19608: GO 19653
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: LD_VAR 0 1
19619: PUSH
19620: LD_INT 22
19622: PUSH
19623: LD_VAR 0 1
19627: PPUSH
19628: CALL_OW 255
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 58
19639: PUSH
19640: EMPTY
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: IN
19652: ST_TO_ADDR
// end ;
19653: LD_VAR 0 2
19657: RET
// export function IsNotFull ( building ) ; var places ; begin
19658: LD_INT 0
19660: PPUSH
19661: PPUSH
// if not building then
19662: LD_VAR 0 1
19666: NOT
19667: IFFALSE 19671
// exit ;
19669: GO 19699
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19671: LD_ADDR_VAR 0 2
19675: PUSH
19676: LD_VAR 0 1
19680: PPUSH
19681: LD_INT 3
19683: PUSH
19684: LD_INT 62
19686: PUSH
19687: EMPTY
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PPUSH
19694: CALL_OW 72
19698: ST_TO_ADDR
// end ;
19699: LD_VAR 0 2
19703: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19704: LD_INT 0
19706: PPUSH
19707: PPUSH
19708: PPUSH
19709: PPUSH
// tmp := [ ] ;
19710: LD_ADDR_VAR 0 3
19714: PUSH
19715: EMPTY
19716: ST_TO_ADDR
// list := [ ] ;
19717: LD_ADDR_VAR 0 5
19721: PUSH
19722: EMPTY
19723: ST_TO_ADDR
// for i = 16 to 25 do
19724: LD_ADDR_VAR 0 4
19728: PUSH
19729: DOUBLE
19730: LD_INT 16
19732: DEC
19733: ST_TO_ADDR
19734: LD_INT 25
19736: PUSH
19737: FOR_TO
19738: IFFALSE 19811
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19740: LD_ADDR_VAR 0 3
19744: PUSH
19745: LD_VAR 0 3
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 255
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 91
19769: PUSH
19770: LD_VAR 0 1
19774: PUSH
19775: LD_INT 6
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 30
19785: PUSH
19786: LD_VAR 0 4
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: PPUSH
19803: CALL_OW 69
19807: ADD
19808: ST_TO_ADDR
19809: GO 19737
19811: POP
19812: POP
// for i = 1 to tmp do
19813: LD_ADDR_VAR 0 4
19817: PUSH
19818: DOUBLE
19819: LD_INT 1
19821: DEC
19822: ST_TO_ADDR
19823: LD_VAR 0 3
19827: PUSH
19828: FOR_TO
19829: IFFALSE 19917
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19831: LD_ADDR_VAR 0 5
19835: PUSH
19836: LD_VAR 0 5
19840: PUSH
19841: LD_VAR 0 3
19845: PUSH
19846: LD_VAR 0 4
19850: ARRAY
19851: PPUSH
19852: CALL_OW 266
19856: PUSH
19857: LD_VAR 0 3
19861: PUSH
19862: LD_VAR 0 4
19866: ARRAY
19867: PPUSH
19868: CALL_OW 250
19872: PUSH
19873: LD_VAR 0 3
19877: PUSH
19878: LD_VAR 0 4
19882: ARRAY
19883: PPUSH
19884: CALL_OW 251
19888: PUSH
19889: LD_VAR 0 3
19893: PUSH
19894: LD_VAR 0 4
19898: ARRAY
19899: PPUSH
19900: CALL_OW 254
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: ADD
19914: ST_TO_ADDR
19915: GO 19828
19917: POP
19918: POP
// result := list ;
19919: LD_ADDR_VAR 0 2
19923: PUSH
19924: LD_VAR 0 5
19928: ST_TO_ADDR
// end ;
19929: LD_VAR 0 2
19933: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19934: LD_INT 0
19936: PPUSH
19937: PPUSH
19938: PPUSH
19939: PPUSH
19940: PPUSH
19941: PPUSH
19942: PPUSH
// if not factory then
19943: LD_VAR 0 1
19947: NOT
19948: IFFALSE 19952
// exit ;
19950: GO 20555
// if control = control_apeman then
19952: LD_VAR 0 4
19956: PUSH
19957: LD_INT 5
19959: EQUAL
19960: IFFALSE 20069
// begin tmp := UnitsInside ( factory ) ;
19962: LD_ADDR_VAR 0 8
19966: PUSH
19967: LD_VAR 0 1
19971: PPUSH
19972: CALL_OW 313
19976: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19977: LD_VAR 0 8
19981: PPUSH
19982: LD_INT 25
19984: PUSH
19985: LD_INT 12
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 72
19996: NOT
19997: IFFALSE 20007
// control := control_manual ;
19999: LD_ADDR_VAR 0 4
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20007: LD_ADDR_VAR 0 8
20011: PUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL 19704 0 1
20021: ST_TO_ADDR
// if tmp then
20022: LD_VAR 0 8
20026: IFFALSE 20069
// begin for i in tmp do
20028: LD_ADDR_VAR 0 7
20032: PUSH
20033: LD_VAR 0 8
20037: PUSH
20038: FOR_IN
20039: IFFALSE 20067
// if i [ 1 ] = b_ext_radio then
20041: LD_VAR 0 7
20045: PUSH
20046: LD_INT 1
20048: ARRAY
20049: PUSH
20050: LD_INT 22
20052: EQUAL
20053: IFFALSE 20065
// begin control := control_remote ;
20055: LD_ADDR_VAR 0 4
20059: PUSH
20060: LD_INT 2
20062: ST_TO_ADDR
// break ;
20063: GO 20067
// end ;
20065: GO 20038
20067: POP
20068: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20069: LD_VAR 0 1
20073: PPUSH
20074: LD_VAR 0 2
20078: PPUSH
20079: LD_VAR 0 3
20083: PPUSH
20084: LD_VAR 0 4
20088: PPUSH
20089: LD_VAR 0 5
20093: PPUSH
20094: CALL_OW 448
20098: IFFALSE 20133
// begin result := [ chassis , engine , control , weapon ] ;
20100: LD_ADDR_VAR 0 6
20104: PUSH
20105: LD_VAR 0 2
20109: PUSH
20110: LD_VAR 0 3
20114: PUSH
20115: LD_VAR 0 4
20119: PUSH
20120: LD_VAR 0 5
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: ST_TO_ADDR
// exit ;
20131: GO 20555
// end ; _chassis := AvailableChassisList ( factory ) ;
20133: LD_ADDR_VAR 0 9
20137: PUSH
20138: LD_VAR 0 1
20142: PPUSH
20143: CALL_OW 475
20147: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20148: LD_ADDR_VAR 0 11
20152: PUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 476
20162: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20163: LD_ADDR_VAR 0 12
20167: PUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 477
20177: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20178: LD_ADDR_VAR 0 10
20182: PUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 478
20192: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20193: LD_VAR 0 9
20197: NOT
20198: IFTRUE 20207
20200: PUSH
20201: LD_VAR 0 11
20205: NOT
20206: OR
20207: IFTRUE 20216
20209: PUSH
20210: LD_VAR 0 12
20214: NOT
20215: OR
20216: IFTRUE 20225
20218: PUSH
20219: LD_VAR 0 10
20223: NOT
20224: OR
20225: IFFALSE 20260
// begin result := [ chassis , engine , control , weapon ] ;
20227: LD_ADDR_VAR 0 6
20231: PUSH
20232: LD_VAR 0 2
20236: PUSH
20237: LD_VAR 0 3
20241: PUSH
20242: LD_VAR 0 4
20246: PUSH
20247: LD_VAR 0 5
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: ST_TO_ADDR
// exit ;
20258: GO 20555
// end ; if not chassis in _chassis then
20260: LD_VAR 0 2
20264: PUSH
20265: LD_VAR 0 9
20269: IN
20270: NOT
20271: IFFALSE 20297
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20273: LD_ADDR_VAR 0 2
20277: PUSH
20278: LD_VAR 0 9
20282: PUSH
20283: LD_INT 1
20285: PPUSH
20286: LD_VAR 0 9
20290: PPUSH
20291: CALL_OW 12
20295: ARRAY
20296: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20297: LD_VAR 0 2
20301: PPUSH
20302: LD_VAR 0 3
20306: PPUSH
20307: CALL 20560 0 2
20311: NOT
20312: IFFALSE 20373
// repeat engine := _engine [ 1 ] ;
20314: LD_ADDR_VAR 0 3
20318: PUSH
20319: LD_VAR 0 11
20323: PUSH
20324: LD_INT 1
20326: ARRAY
20327: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20328: LD_ADDR_VAR 0 11
20332: PUSH
20333: LD_VAR 0 11
20337: PPUSH
20338: LD_INT 1
20340: PPUSH
20341: CALL_OW 3
20345: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20346: LD_VAR 0 2
20350: PPUSH
20351: LD_VAR 0 3
20355: PPUSH
20356: CALL 20560 0 2
20360: IFTRUE 20371
20362: PUSH
20363: LD_VAR 0 11
20367: PUSH
20368: EMPTY
20369: EQUAL
20370: OR
20371: IFFALSE 20314
// if not control in _control then
20373: LD_VAR 0 4
20377: PUSH
20378: LD_VAR 0 12
20382: IN
20383: NOT
20384: IFFALSE 20410
// control := _control [ rand ( 1 , _control ) ] ;
20386: LD_ADDR_VAR 0 4
20390: PUSH
20391: LD_VAR 0 12
20395: PUSH
20396: LD_INT 1
20398: PPUSH
20399: LD_VAR 0 12
20403: PPUSH
20404: CALL_OW 12
20408: ARRAY
20409: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20410: LD_VAR 0 2
20414: PPUSH
20415: LD_VAR 0 5
20419: PPUSH
20420: CALL 20782 0 2
20424: NOT
20425: IFFALSE 20486
// repeat weapon := _weapon [ 1 ] ;
20427: LD_ADDR_VAR 0 5
20431: PUSH
20432: LD_VAR 0 10
20436: PUSH
20437: LD_INT 1
20439: ARRAY
20440: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20441: LD_ADDR_VAR 0 10
20445: PUSH
20446: LD_VAR 0 10
20450: PPUSH
20451: LD_INT 1
20453: PPUSH
20454: CALL_OW 3
20458: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20459: LD_VAR 0 2
20463: PPUSH
20464: LD_VAR 0 5
20468: PPUSH
20469: CALL 20782 0 2
20473: IFTRUE 20484
20475: PUSH
20476: LD_VAR 0 10
20480: PUSH
20481: EMPTY
20482: EQUAL
20483: OR
20484: IFFALSE 20427
// result := [ ] ;
20486: LD_ADDR_VAR 0 6
20490: PUSH
20491: EMPTY
20492: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20493: LD_VAR 0 1
20497: PPUSH
20498: LD_VAR 0 2
20502: PPUSH
20503: LD_VAR 0 3
20507: PPUSH
20508: LD_VAR 0 4
20512: PPUSH
20513: LD_VAR 0 5
20517: PPUSH
20518: CALL_OW 448
20522: IFFALSE 20555
// result := [ chassis , engine , control , weapon ] ;
20524: LD_ADDR_VAR 0 6
20528: PUSH
20529: LD_VAR 0 2
20533: PUSH
20534: LD_VAR 0 3
20538: PUSH
20539: LD_VAR 0 4
20543: PUSH
20544: LD_VAR 0 5
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: ST_TO_ADDR
// end ;
20555: LD_VAR 0 6
20559: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20560: LD_INT 0
20562: PPUSH
// if not chassis or not engine then
20563: LD_VAR 0 1
20567: NOT
20568: IFTRUE 20577
20570: PUSH
20571: LD_VAR 0 2
20575: NOT
20576: OR
20577: IFFALSE 20581
// exit ;
20579: GO 20777
// case engine of engine_solar :
20581: LD_VAR 0 2
20585: PUSH
20586: LD_INT 2
20588: DOUBLE
20589: EQUAL
20590: IFTRUE 20594
20592: GO 20632
20594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20595: LD_ADDR_VAR 0 3
20599: PUSH
20600: LD_INT 11
20602: PUSH
20603: LD_INT 12
20605: PUSH
20606: LD_INT 13
20608: PUSH
20609: LD_INT 14
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 3
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: ST_TO_ADDR
20630: GO 20761
20632: LD_INT 1
20634: DOUBLE
20635: EQUAL
20636: IFTRUE 20640
20638: GO 20702
20640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20641: LD_ADDR_VAR 0 3
20645: PUSH
20646: LD_INT 11
20648: PUSH
20649: LD_INT 12
20651: PUSH
20652: LD_INT 13
20654: PUSH
20655: LD_INT 14
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 3
20666: PUSH
20667: LD_INT 4
20669: PUSH
20670: LD_INT 5
20672: PUSH
20673: LD_INT 21
20675: PUSH
20676: LD_INT 23
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_INT 24
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: ST_TO_ADDR
20700: GO 20761
20702: LD_INT 3
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20760
20710: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_INT 13
20718: PUSH
20719: LD_INT 14
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 3
20727: PUSH
20728: LD_INT 4
20730: PUSH
20731: LD_INT 5
20733: PUSH
20734: LD_INT 21
20736: PUSH
20737: LD_INT 22
20739: PUSH
20740: LD_INT 23
20742: PUSH
20743: LD_INT 24
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: ST_TO_ADDR
20758: GO 20761
20760: POP
// result := ( chassis in result ) ;
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: LD_VAR 0 1
20770: PUSH
20771: LD_VAR 0 3
20775: IN
20776: ST_TO_ADDR
// end ;
20777: LD_VAR 0 3
20781: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20782: LD_INT 0
20784: PPUSH
// if not chassis or not weapon then
20785: LD_VAR 0 1
20789: NOT
20790: IFTRUE 20799
20792: PUSH
20793: LD_VAR 0 2
20797: NOT
20798: OR
20799: IFFALSE 20803
// exit ;
20801: GO 21897
// case weapon of us_machine_gun :
20803: LD_VAR 0 2
20807: PUSH
20808: LD_INT 2
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20846
20816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20817: LD_ADDR_VAR 0 3
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 3
20830: PUSH
20831: LD_INT 4
20833: PUSH
20834: LD_INT 5
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: ST_TO_ADDR
20844: GO 21881
20846: LD_INT 3
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20884
20854: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: LD_INT 4
20871: PUSH
20872: LD_INT 5
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: ST_TO_ADDR
20882: GO 21881
20884: LD_INT 11
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20922
20892: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20893: LD_ADDR_VAR 0 3
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: LD_INT 3
20906: PUSH
20907: LD_INT 4
20909: PUSH
20910: LD_INT 5
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: ST_TO_ADDR
20920: GO 21881
20922: LD_INT 4
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20956
20930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: LD_INT 3
20941: PUSH
20942: LD_INT 4
20944: PUSH
20945: LD_INT 5
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: ST_TO_ADDR
20954: GO 21881
20956: LD_INT 5
20958: DOUBLE
20959: EQUAL
20960: IFTRUE 20964
20962: GO 20990
20964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20965: LD_ADDR_VAR 0 3
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 3
20975: PUSH
20976: LD_INT 4
20978: PUSH
20979: LD_INT 5
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: ST_TO_ADDR
20988: GO 21881
20990: LD_INT 9
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21024
20998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20999: LD_ADDR_VAR 0 3
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 3
21009: PUSH
21010: LD_INT 4
21012: PUSH
21013: LD_INT 5
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: ST_TO_ADDR
21022: GO 21881
21024: LD_INT 7
21026: DOUBLE
21027: EQUAL
21028: IFTRUE 21032
21030: GO 21058
21032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21033: LD_ADDR_VAR 0 3
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 3
21043: PUSH
21044: LD_INT 4
21046: PUSH
21047: LD_INT 5
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: ST_TO_ADDR
21056: GO 21881
21058: LD_INT 12
21060: DOUBLE
21061: EQUAL
21062: IFTRUE 21066
21064: GO 21092
21066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: LD_INT 3
21077: PUSH
21078: LD_INT 4
21080: PUSH
21081: LD_INT 5
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: ST_TO_ADDR
21090: GO 21881
21092: LD_INT 13
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21126
21100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: LD_INT 3
21111: PUSH
21112: LD_INT 4
21114: PUSH
21115: LD_INT 5
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: ST_TO_ADDR
21124: GO 21881
21126: LD_INT 14
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21152
21134: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: LD_INT 4
21142: PUSH
21143: LD_INT 5
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: ST_TO_ADDR
21150: GO 21881
21152: LD_INT 6
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21178
21160: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21161: LD_ADDR_VAR 0 3
21165: PUSH
21166: LD_INT 4
21168: PUSH
21169: LD_INT 5
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 21881
21178: LD_INT 10
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21204
21186: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: LD_INT 4
21194: PUSH
21195: LD_INT 5
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: ST_TO_ADDR
21202: GO 21881
21204: LD_INT 22
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21238
21212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21213: LD_ADDR_VAR 0 3
21217: PUSH
21218: LD_INT 11
21220: PUSH
21221: LD_INT 12
21223: PUSH
21224: LD_INT 13
21226: PUSH
21227: LD_INT 14
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: ST_TO_ADDR
21236: GO 21881
21238: LD_INT 23
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21272
21246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21247: LD_ADDR_VAR 0 3
21251: PUSH
21252: LD_INT 11
21254: PUSH
21255: LD_INT 12
21257: PUSH
21258: LD_INT 13
21260: PUSH
21261: LD_INT 14
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: ST_TO_ADDR
21270: GO 21881
21272: LD_INT 24
21274: DOUBLE
21275: EQUAL
21276: IFTRUE 21280
21278: GO 21306
21280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21281: LD_ADDR_VAR 0 3
21285: PUSH
21286: LD_INT 11
21288: PUSH
21289: LD_INT 12
21291: PUSH
21292: LD_INT 13
21294: PUSH
21295: LD_INT 14
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: ST_TO_ADDR
21304: GO 21881
21306: LD_INT 30
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21340
21314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21315: LD_ADDR_VAR 0 3
21319: PUSH
21320: LD_INT 11
21322: PUSH
21323: LD_INT 12
21325: PUSH
21326: LD_INT 13
21328: PUSH
21329: LD_INT 14
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: ST_TO_ADDR
21338: GO 21881
21340: LD_INT 25
21342: DOUBLE
21343: EQUAL
21344: IFTRUE 21348
21346: GO 21366
21348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21349: LD_ADDR_VAR 0 3
21353: PUSH
21354: LD_INT 13
21356: PUSH
21357: LD_INT 14
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: ST_TO_ADDR
21364: GO 21881
21366: LD_INT 27
21368: DOUBLE
21369: EQUAL
21370: IFTRUE 21374
21372: GO 21392
21374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21375: LD_ADDR_VAR 0 3
21379: PUSH
21380: LD_INT 13
21382: PUSH
21383: LD_INT 14
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: ST_TO_ADDR
21390: GO 21881
21392: LD_INT 92
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 21426
21400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21401: LD_ADDR_VAR 0 3
21405: PUSH
21406: LD_INT 11
21408: PUSH
21409: LD_INT 12
21411: PUSH
21412: LD_INT 13
21414: PUSH
21415: LD_INT 14
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: ST_TO_ADDR
21424: GO 21881
21426: LD_INT 28
21428: DOUBLE
21429: EQUAL
21430: IFTRUE 21434
21432: GO 21452
21434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21435: LD_ADDR_VAR 0 3
21439: PUSH
21440: LD_INT 13
21442: PUSH
21443: LD_INT 14
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: ST_TO_ADDR
21450: GO 21881
21452: LD_INT 29
21454: DOUBLE
21455: EQUAL
21456: IFTRUE 21460
21458: GO 21478
21460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_INT 13
21468: PUSH
21469: LD_INT 14
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: ST_TO_ADDR
21476: GO 21881
21478: LD_INT 31
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 21504
21486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_INT 13
21494: PUSH
21495: LD_INT 14
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 21881
21504: LD_INT 26
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21530
21512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21513: LD_ADDR_VAR 0 3
21517: PUSH
21518: LD_INT 13
21520: PUSH
21521: LD_INT 14
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: ST_TO_ADDR
21528: GO 21881
21530: LD_INT 42
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21564
21538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21539: LD_ADDR_VAR 0 3
21543: PUSH
21544: LD_INT 21
21546: PUSH
21547: LD_INT 22
21549: PUSH
21550: LD_INT 23
21552: PUSH
21553: LD_INT 24
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: ST_TO_ADDR
21562: GO 21881
21564: LD_INT 43
21566: DOUBLE
21567: EQUAL
21568: IFTRUE 21572
21570: GO 21598
21572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21573: LD_ADDR_VAR 0 3
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 23
21586: PUSH
21587: LD_INT 24
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: ST_TO_ADDR
21596: GO 21881
21598: LD_INT 44
21600: DOUBLE
21601: EQUAL
21602: IFTRUE 21606
21604: GO 21632
21606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21607: LD_ADDR_VAR 0 3
21611: PUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 24
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: ST_TO_ADDR
21630: GO 21881
21632: LD_INT 45
21634: DOUBLE
21635: EQUAL
21636: IFTRUE 21640
21638: GO 21666
21640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21641: LD_ADDR_VAR 0 3
21645: PUSH
21646: LD_INT 21
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_INT 23
21654: PUSH
21655: LD_INT 24
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: ST_TO_ADDR
21664: GO 21881
21666: LD_INT 49
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 21700
21674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21675: LD_ADDR_VAR 0 3
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 24
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
21698: GO 21881
21700: LD_INT 51
21702: DOUBLE
21703: EQUAL
21704: IFTRUE 21708
21706: GO 21734
21708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21709: LD_ADDR_VAR 0 3
21713: PUSH
21714: LD_INT 21
21716: PUSH
21717: LD_INT 22
21719: PUSH
21720: LD_INT 23
21722: PUSH
21723: LD_INT 24
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: ST_TO_ADDR
21732: GO 21881
21734: LD_INT 52
21736: DOUBLE
21737: EQUAL
21738: IFTRUE 21742
21740: GO 21768
21742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21743: LD_ADDR_VAR 0 3
21747: PUSH
21748: LD_INT 21
21750: PUSH
21751: LD_INT 22
21753: PUSH
21754: LD_INT 23
21756: PUSH
21757: LD_INT 24
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: ST_TO_ADDR
21766: GO 21881
21768: LD_INT 53
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21794
21776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_INT 23
21784: PUSH
21785: LD_INT 24
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: ST_TO_ADDR
21792: GO 21881
21794: LD_INT 46
21796: DOUBLE
21797: EQUAL
21798: IFTRUE 21802
21800: GO 21820
21802: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21803: LD_ADDR_VAR 0 3
21807: PUSH
21808: LD_INT 23
21810: PUSH
21811: LD_INT 24
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: ST_TO_ADDR
21818: GO 21881
21820: LD_INT 47
21822: DOUBLE
21823: EQUAL
21824: IFTRUE 21828
21826: GO 21846
21828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
21829: LD_ADDR_VAR 0 3
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: LD_INT 24
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: ST_TO_ADDR
21844: GO 21881
21846: LD_INT 98
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21854
21852: GO 21880
21854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21855: LD_ADDR_VAR 0 3
21859: PUSH
21860: LD_INT 21
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_INT 23
21868: PUSH
21869: LD_INT 24
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: ST_TO_ADDR
21878: GO 21881
21880: POP
// result := ( chassis in result ) ;
21881: LD_ADDR_VAR 0 3
21885: PUSH
21886: LD_VAR 0 1
21890: PUSH
21891: LD_VAR 0 3
21895: IN
21896: ST_TO_ADDR
// end ;
21897: LD_VAR 0 3
21901: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21902: LD_INT 0
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
// result := array ;
21911: LD_ADDR_VAR 0 5
21915: PUSH
21916: LD_VAR 0 1
21920: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21921: LD_VAR 0 1
21925: NOT
21926: IFTRUE 21935
21928: PUSH
21929: LD_VAR 0 2
21933: NOT
21934: OR
21935: IFTRUE 21944
21937: PUSH
21938: LD_VAR 0 3
21942: NOT
21943: OR
21944: IFTRUE 21958
21946: PUSH
21947: LD_VAR 0 2
21951: PUSH
21952: LD_VAR 0 1
21956: GREATER
21957: OR
21958: IFTRUE 21972
21960: PUSH
21961: LD_VAR 0 3
21965: PUSH
21966: LD_VAR 0 1
21970: GREATER
21971: OR
21972: IFFALSE 21976
// exit ;
21974: GO 22272
// if direction then
21976: LD_VAR 0 4
21980: IFFALSE 22044
// begin d := 1 ;
21982: LD_ADDR_VAR 0 9
21986: PUSH
21987: LD_INT 1
21989: ST_TO_ADDR
// if i_from > i_to then
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 3
21999: GREATER
22000: IFFALSE 22026
// length := ( array - i_from ) + i_to else
22002: LD_ADDR_VAR 0 11
22006: PUSH
22007: LD_VAR 0 1
22011: PUSH
22012: LD_VAR 0 2
22016: MINUS
22017: PUSH
22018: LD_VAR 0 3
22022: PLUS
22023: ST_TO_ADDR
22024: GO 22042
// length := i_to - i_from ;
22026: LD_ADDR_VAR 0 11
22030: PUSH
22031: LD_VAR 0 3
22035: PUSH
22036: LD_VAR 0 2
22040: MINUS
22041: ST_TO_ADDR
// end else
22042: GO 22105
// begin d := - 1 ;
22044: LD_ADDR_VAR 0 9
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: ST_TO_ADDR
// if i_from > i_to then
22053: LD_VAR 0 2
22057: PUSH
22058: LD_VAR 0 3
22062: GREATER
22063: IFFALSE 22083
// length := i_from - i_to else
22065: LD_ADDR_VAR 0 11
22069: PUSH
22070: LD_VAR 0 2
22074: PUSH
22075: LD_VAR 0 3
22079: MINUS
22080: ST_TO_ADDR
22081: GO 22105
// length := ( array - i_to ) + i_from ;
22083: LD_ADDR_VAR 0 11
22087: PUSH
22088: LD_VAR 0 1
22092: PUSH
22093: LD_VAR 0 3
22097: MINUS
22098: PUSH
22099: LD_VAR 0 2
22103: PLUS
22104: ST_TO_ADDR
// end ; if not length then
22105: LD_VAR 0 11
22109: NOT
22110: IFFALSE 22114
// exit ;
22112: GO 22272
// tmp := array ;
22114: LD_ADDR_VAR 0 10
22118: PUSH
22119: LD_VAR 0 1
22123: ST_TO_ADDR
// for i = 1 to length do
22124: LD_ADDR_VAR 0 6
22128: PUSH
22129: DOUBLE
22130: LD_INT 1
22132: DEC
22133: ST_TO_ADDR
22134: LD_VAR 0 11
22138: PUSH
22139: FOR_TO
22140: IFFALSE 22260
// begin for j = 1 to array do
22142: LD_ADDR_VAR 0 7
22146: PUSH
22147: DOUBLE
22148: LD_INT 1
22150: DEC
22151: ST_TO_ADDR
22152: LD_VAR 0 1
22156: PUSH
22157: FOR_TO
22158: IFFALSE 22246
// begin k := j + d ;
22160: LD_ADDR_VAR 0 8
22164: PUSH
22165: LD_VAR 0 7
22169: PUSH
22170: LD_VAR 0 9
22174: PLUS
22175: ST_TO_ADDR
// if k > array then
22176: LD_VAR 0 8
22180: PUSH
22181: LD_VAR 0 1
22185: GREATER
22186: IFFALSE 22196
// k := 1 ;
22188: LD_ADDR_VAR 0 8
22192: PUSH
22193: LD_INT 1
22195: ST_TO_ADDR
// if not k then
22196: LD_VAR 0 8
22200: NOT
22201: IFFALSE 22213
// k := array ;
22203: LD_ADDR_VAR 0 8
22207: PUSH
22208: LD_VAR 0 1
22212: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22213: LD_ADDR_VAR 0 10
22217: PUSH
22218: LD_VAR 0 10
22222: PPUSH
22223: LD_VAR 0 8
22227: PPUSH
22228: LD_VAR 0 1
22232: PUSH
22233: LD_VAR 0 7
22237: ARRAY
22238: PPUSH
22239: CALL_OW 1
22243: ST_TO_ADDR
// end ;
22244: GO 22157
22246: POP
22247: POP
// array := tmp ;
22248: LD_ADDR_VAR 0 1
22252: PUSH
22253: LD_VAR 0 10
22257: ST_TO_ADDR
// end ;
22258: GO 22139
22260: POP
22261: POP
// result := array ;
22262: LD_ADDR_VAR 0 5
22266: PUSH
22267: LD_VAR 0 1
22271: ST_TO_ADDR
// end ;
22272: LD_VAR 0 5
22276: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
// result := 0 ;
22281: LD_ADDR_VAR 0 3
22285: PUSH
22286: LD_INT 0
22288: ST_TO_ADDR
// if not array or not value in array then
22289: LD_VAR 0 1
22293: NOT
22294: IFTRUE 22309
22296: PUSH
22297: LD_VAR 0 2
22301: PUSH
22302: LD_VAR 0 1
22306: IN
22307: NOT
22308: OR
22309: IFFALSE 22313
// exit ;
22311: GO 22367
// for i = 1 to array do
22313: LD_ADDR_VAR 0 4
22317: PUSH
22318: DOUBLE
22319: LD_INT 1
22321: DEC
22322: ST_TO_ADDR
22323: LD_VAR 0 1
22327: PUSH
22328: FOR_TO
22329: IFFALSE 22365
// if value = array [ i ] then
22331: LD_VAR 0 2
22335: PUSH
22336: LD_VAR 0 1
22340: PUSH
22341: LD_VAR 0 4
22345: ARRAY
22346: EQUAL
22347: IFFALSE 22363
// begin result := i ;
22349: LD_ADDR_VAR 0 3
22353: PUSH
22354: LD_VAR 0 4
22358: ST_TO_ADDR
// exit ;
22359: POP
22360: POP
22361: GO 22367
// end ;
22363: GO 22328
22365: POP
22366: POP
// end ;
22367: LD_VAR 0 3
22371: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22372: LD_INT 0
22374: PPUSH
// vc_chassis := chassis ;
22375: LD_ADDR_OWVAR 37
22379: PUSH
22380: LD_VAR 0 1
22384: ST_TO_ADDR
// vc_engine := engine ;
22385: LD_ADDR_OWVAR 39
22389: PUSH
22390: LD_VAR 0 2
22394: ST_TO_ADDR
// vc_control := control ;
22395: LD_ADDR_OWVAR 38
22399: PUSH
22400: LD_VAR 0 3
22404: ST_TO_ADDR
// vc_weapon := weapon ;
22405: LD_ADDR_OWVAR 40
22409: PUSH
22410: LD_VAR 0 4
22414: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22415: LD_ADDR_OWVAR 41
22419: PUSH
22420: LD_VAR 0 5
22424: ST_TO_ADDR
// end ;
22425: LD_VAR 0 6
22429: RET
// export function WantPlant ( unit ) ; var task ; begin
22430: LD_INT 0
22432: PPUSH
22433: PPUSH
// result := false ;
22434: LD_ADDR_VAR 0 2
22438: PUSH
22439: LD_INT 0
22441: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22442: LD_ADDR_VAR 0 3
22446: PUSH
22447: LD_VAR 0 1
22451: PPUSH
22452: CALL_OW 437
22456: ST_TO_ADDR
// if task then
22457: LD_VAR 0 3
22461: IFFALSE 22489
// if task [ 1 ] [ 1 ] = p then
22463: LD_VAR 0 3
22467: PUSH
22468: LD_INT 1
22470: ARRAY
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PUSH
22476: LD_STRING p
22478: EQUAL
22479: IFFALSE 22489
// result := true ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 1
22488: ST_TO_ADDR
// end ;
22489: LD_VAR 0 2
22493: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22494: LD_INT 0
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
// if pos < 1 then
22500: LD_VAR 0 2
22504: PUSH
22505: LD_INT 1
22507: LESS
22508: IFFALSE 22512
// exit ;
22510: GO 22815
// if pos = 1 then
22512: LD_VAR 0 2
22516: PUSH
22517: LD_INT 1
22519: EQUAL
22520: IFFALSE 22553
// result := Replace ( arr , pos [ 1 ] , value ) else
22522: LD_ADDR_VAR 0 4
22526: PUSH
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_VAR 0 2
22536: PUSH
22537: LD_INT 1
22539: ARRAY
22540: PPUSH
22541: LD_VAR 0 3
22545: PPUSH
22546: CALL_OW 1
22550: ST_TO_ADDR
22551: GO 22815
// begin tmp := arr ;
22553: LD_ADDR_VAR 0 6
22557: PUSH
22558: LD_VAR 0 1
22562: ST_TO_ADDR
// s_arr := [ tmp ] ;
22563: LD_ADDR_VAR 0 7
22567: PUSH
22568: LD_VAR 0 6
22572: PUSH
22573: EMPTY
22574: LIST
22575: ST_TO_ADDR
// for i = 1 to pos - 1 do
22576: LD_ADDR_VAR 0 5
22580: PUSH
22581: DOUBLE
22582: LD_INT 1
22584: DEC
22585: ST_TO_ADDR
22586: LD_VAR 0 2
22590: PUSH
22591: LD_INT 1
22593: MINUS
22594: PUSH
22595: FOR_TO
22596: IFFALSE 22641
// begin tmp := tmp [ pos [ i ] ] ;
22598: LD_ADDR_VAR 0 6
22602: PUSH
22603: LD_VAR 0 6
22607: PUSH
22608: LD_VAR 0 2
22612: PUSH
22613: LD_VAR 0 5
22617: ARRAY
22618: ARRAY
22619: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22620: LD_ADDR_VAR 0 7
22624: PUSH
22625: LD_VAR 0 7
22629: PUSH
22630: LD_VAR 0 6
22634: PUSH
22635: EMPTY
22636: LIST
22637: ADD
22638: ST_TO_ADDR
// end ;
22639: GO 22595
22641: POP
22642: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22643: LD_ADDR_VAR 0 6
22647: PUSH
22648: LD_VAR 0 6
22652: PPUSH
22653: LD_VAR 0 2
22657: PUSH
22658: LD_VAR 0 2
22662: ARRAY
22663: PPUSH
22664: LD_VAR 0 3
22668: PPUSH
22669: CALL_OW 1
22673: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22674: LD_ADDR_VAR 0 7
22678: PUSH
22679: LD_VAR 0 7
22683: PPUSH
22684: LD_VAR 0 7
22688: PPUSH
22689: LD_VAR 0 6
22693: PPUSH
22694: CALL_OW 1
22698: ST_TO_ADDR
// for i = s_arr downto 2 do
22699: LD_ADDR_VAR 0 5
22703: PUSH
22704: DOUBLE
22705: LD_VAR 0 7
22709: INC
22710: ST_TO_ADDR
22711: LD_INT 2
22713: PUSH
22714: FOR_DOWNTO
22715: IFFALSE 22799
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22717: LD_ADDR_VAR 0 6
22721: PUSH
22722: LD_VAR 0 7
22726: PUSH
22727: LD_VAR 0 5
22731: PUSH
22732: LD_INT 1
22734: MINUS
22735: ARRAY
22736: PPUSH
22737: LD_VAR 0 2
22741: PUSH
22742: LD_VAR 0 5
22746: PUSH
22747: LD_INT 1
22749: MINUS
22750: ARRAY
22751: PPUSH
22752: LD_VAR 0 7
22756: PUSH
22757: LD_VAR 0 5
22761: ARRAY
22762: PPUSH
22763: CALL_OW 1
22767: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22768: LD_ADDR_VAR 0 7
22772: PUSH
22773: LD_VAR 0 7
22777: PPUSH
22778: LD_VAR 0 5
22782: PUSH
22783: LD_INT 1
22785: MINUS
22786: PPUSH
22787: LD_VAR 0 6
22791: PPUSH
22792: CALL_OW 1
22796: ST_TO_ADDR
// end ;
22797: GO 22714
22799: POP
22800: POP
// result := s_arr [ 1 ] ;
22801: LD_ADDR_VAR 0 4
22805: PUSH
22806: LD_VAR 0 7
22810: PUSH
22811: LD_INT 1
22813: ARRAY
22814: ST_TO_ADDR
// end ; end ;
22815: LD_VAR 0 4
22819: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22820: LD_INT 0
22822: PPUSH
22823: PPUSH
// if not list then
22824: LD_VAR 0 1
22828: NOT
22829: IFFALSE 22833
// exit ;
22831: GO 22924
// i := list [ pos1 ] ;
22833: LD_ADDR_VAR 0 5
22837: PUSH
22838: LD_VAR 0 1
22842: PUSH
22843: LD_VAR 0 2
22847: ARRAY
22848: ST_TO_ADDR
// if not i then
22849: LD_VAR 0 5
22853: NOT
22854: IFFALSE 22858
// exit ;
22856: GO 22924
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22858: LD_ADDR_VAR 0 1
22862: PUSH
22863: LD_VAR 0 1
22867: PPUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_VAR 0 1
22877: PUSH
22878: LD_VAR 0 3
22882: ARRAY
22883: PPUSH
22884: CALL_OW 1
22888: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22889: LD_ADDR_VAR 0 1
22893: PUSH
22894: LD_VAR 0 1
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_VAR 0 5
22908: PPUSH
22909: CALL_OW 1
22913: ST_TO_ADDR
// result := list ;
22914: LD_ADDR_VAR 0 4
22918: PUSH
22919: LD_VAR 0 1
22923: ST_TO_ADDR
// end ;
22924: LD_VAR 0 4
22928: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22929: LD_INT 0
22931: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22932: LD_ADDR_VAR 0 5
22936: PUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: CALL_OW 250
22946: PPUSH
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 251
22956: PPUSH
22957: LD_VAR 0 2
22961: PPUSH
22962: LD_VAR 0 3
22966: PPUSH
22967: LD_VAR 0 4
22971: PPUSH
22972: CALL 23354 0 5
22976: ST_TO_ADDR
// end ;
22977: LD_VAR 0 5
22981: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22982: LD_INT 0
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
// if not list or not unit then
22988: LD_VAR 0 2
22992: NOT
22993: IFTRUE 23002
22995: PUSH
22996: LD_VAR 0 1
23000: NOT
23001: OR
23002: IFFALSE 23006
// exit ;
23004: GO 23349
// result := [ ] ;
23006: LD_ADDR_VAR 0 5
23010: PUSH
23011: EMPTY
23012: ST_TO_ADDR
// for i in list do
23013: LD_ADDR_VAR 0 6
23017: PUSH
23018: LD_VAR 0 2
23022: PUSH
23023: FOR_IN
23024: IFFALSE 23242
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23026: LD_ADDR_VAR 0 8
23030: PUSH
23031: LD_VAR 0 1
23035: PPUSH
23036: LD_VAR 0 6
23040: PUSH
23041: LD_INT 1
23043: ARRAY
23044: PPUSH
23045: LD_VAR 0 6
23049: PUSH
23050: LD_INT 2
23052: ARRAY
23053: PPUSH
23054: CALL_OW 297
23058: ST_TO_ADDR
// if not Count ( result ) then
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL 19576 0 1
23068: NOT
23069: IFFALSE 23102
// begin result := Join ( result , [ i , tmp ] ) ;
23071: LD_ADDR_VAR 0 5
23075: PUSH
23076: LD_VAR 0 5
23080: PPUSH
23081: LD_VAR 0 6
23085: PUSH
23086: LD_VAR 0 8
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PPUSH
23095: CALL 55552 0 2
23099: ST_TO_ADDR
// continue ;
23100: GO 23023
// end ; if result [ result ] [ 2 ] <= tmp then
23102: LD_VAR 0 5
23106: PUSH
23107: LD_VAR 0 5
23111: ARRAY
23112: PUSH
23113: LD_INT 2
23115: ARRAY
23116: PUSH
23117: LD_VAR 0 8
23121: LESSEQUAL
23122: IFFALSE 23155
// result := Join ( result , [ i , tmp ] ) else
23124: LD_ADDR_VAR 0 5
23128: PUSH
23129: LD_VAR 0 5
23133: PPUSH
23134: LD_VAR 0 6
23138: PUSH
23139: LD_VAR 0 8
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PPUSH
23148: CALL 55552 0 2
23152: ST_TO_ADDR
23153: GO 23240
// begin for j := 1 to Count ( result ) do
23155: LD_ADDR_VAR 0 7
23159: PUSH
23160: DOUBLE
23161: LD_INT 1
23163: DEC
23164: ST_TO_ADDR
23165: LD_VAR 0 5
23169: PPUSH
23170: CALL 19576 0 1
23174: PUSH
23175: FOR_TO
23176: IFFALSE 23238
// begin if tmp < result [ j ] [ 2 ] then
23178: LD_VAR 0 8
23182: PUSH
23183: LD_VAR 0 5
23187: PUSH
23188: LD_VAR 0 7
23192: ARRAY
23193: PUSH
23194: LD_INT 2
23196: ARRAY
23197: LESS
23198: IFFALSE 23236
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23200: LD_ADDR_VAR 0 5
23204: PUSH
23205: LD_VAR 0 5
23209: PPUSH
23210: LD_VAR 0 7
23214: PPUSH
23215: LD_VAR 0 6
23219: PUSH
23220: LD_VAR 0 8
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PPUSH
23229: CALL_OW 2
23233: ST_TO_ADDR
// break ;
23234: GO 23238
// end ; end ;
23236: GO 23175
23238: POP
23239: POP
// end ; end ;
23240: GO 23023
23242: POP
23243: POP
// if result and not asc then
23244: LD_VAR 0 5
23248: IFFALSE 23257
23250: PUSH
23251: LD_VAR 0 3
23255: NOT
23256: AND
23257: IFFALSE 23274
// result := ReverseArray ( result ) ;
23259: LD_ADDR_VAR 0 5
23263: PUSH
23264: LD_VAR 0 5
23268: PPUSH
23269: CALL 50632 0 1
23273: ST_TO_ADDR
// tmp := [ ] ;
23274: LD_ADDR_VAR 0 8
23278: PUSH
23279: EMPTY
23280: ST_TO_ADDR
// if mode then
23281: LD_VAR 0 4
23285: IFFALSE 23349
// begin for i := 1 to result do
23287: LD_ADDR_VAR 0 6
23291: PUSH
23292: DOUBLE
23293: LD_INT 1
23295: DEC
23296: ST_TO_ADDR
23297: LD_VAR 0 5
23301: PUSH
23302: FOR_TO
23303: IFFALSE 23337
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23305: LD_ADDR_VAR 0 8
23309: PUSH
23310: LD_VAR 0 8
23314: PPUSH
23315: LD_VAR 0 5
23319: PUSH
23320: LD_VAR 0 6
23324: ARRAY
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PPUSH
23330: CALL 55552 0 2
23334: ST_TO_ADDR
23335: GO 23302
23337: POP
23338: POP
// result := tmp ;
23339: LD_ADDR_VAR 0 5
23343: PUSH
23344: LD_VAR 0 8
23348: ST_TO_ADDR
// end ; end ;
23349: LD_VAR 0 5
23353: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23354: LD_INT 0
23356: PPUSH
23357: PPUSH
23358: PPUSH
23359: PPUSH
// if not list then
23360: LD_VAR 0 3
23364: NOT
23365: IFFALSE 23369
// exit ;
23367: GO 23759
// result := [ ] ;
23369: LD_ADDR_VAR 0 6
23373: PUSH
23374: EMPTY
23375: ST_TO_ADDR
// for i in list do
23376: LD_ADDR_VAR 0 7
23380: PUSH
23381: LD_VAR 0 3
23385: PUSH
23386: FOR_IN
23387: IFFALSE 23589
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23389: LD_ADDR_VAR 0 9
23393: PUSH
23394: LD_VAR 0 7
23398: PPUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: LD_VAR 0 2
23408: PPUSH
23409: CALL_OW 297
23413: ST_TO_ADDR
// if not result then
23414: LD_VAR 0 6
23418: NOT
23419: IFFALSE 23445
// result := [ [ i , tmp ] ] else
23421: LD_ADDR_VAR 0 6
23425: PUSH
23426: LD_VAR 0 7
23430: PUSH
23431: LD_VAR 0 9
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: ST_TO_ADDR
23443: GO 23587
// begin if result [ result ] [ 2 ] <= tmp then
23445: LD_VAR 0 6
23449: PUSH
23450: LD_VAR 0 6
23454: ARRAY
23455: PUSH
23456: LD_INT 2
23458: ARRAY
23459: PUSH
23460: LD_VAR 0 9
23464: LESSEQUAL
23465: IFFALSE 23507
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23467: LD_ADDR_VAR 0 6
23471: PUSH
23472: LD_VAR 0 6
23476: PPUSH
23477: LD_VAR 0 6
23481: PUSH
23482: LD_INT 1
23484: PLUS
23485: PPUSH
23486: LD_VAR 0 7
23490: PUSH
23491: LD_VAR 0 9
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PPUSH
23500: CALL_OW 2
23504: ST_TO_ADDR
23505: GO 23587
// for j := 1 to result do
23507: LD_ADDR_VAR 0 8
23511: PUSH
23512: DOUBLE
23513: LD_INT 1
23515: DEC
23516: ST_TO_ADDR
23517: LD_VAR 0 6
23521: PUSH
23522: FOR_TO
23523: IFFALSE 23585
// begin if tmp < result [ j ] [ 2 ] then
23525: LD_VAR 0 9
23529: PUSH
23530: LD_VAR 0 6
23534: PUSH
23535: LD_VAR 0 8
23539: ARRAY
23540: PUSH
23541: LD_INT 2
23543: ARRAY
23544: LESS
23545: IFFALSE 23583
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23547: LD_ADDR_VAR 0 6
23551: PUSH
23552: LD_VAR 0 6
23556: PPUSH
23557: LD_VAR 0 8
23561: PPUSH
23562: LD_VAR 0 7
23566: PUSH
23567: LD_VAR 0 9
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PPUSH
23576: CALL_OW 2
23580: ST_TO_ADDR
// break ;
23581: GO 23585
// end ; end ;
23583: GO 23522
23585: POP
23586: POP
// end ; end ;
23587: GO 23386
23589: POP
23590: POP
// if result and not asc then
23591: LD_VAR 0 6
23595: IFFALSE 23604
23597: PUSH
23598: LD_VAR 0 4
23602: NOT
23603: AND
23604: IFFALSE 23679
// begin tmp := result ;
23606: LD_ADDR_VAR 0 9
23610: PUSH
23611: LD_VAR 0 6
23615: ST_TO_ADDR
// for i = tmp downto 1 do
23616: LD_ADDR_VAR 0 7
23620: PUSH
23621: DOUBLE
23622: LD_VAR 0 9
23626: INC
23627: ST_TO_ADDR
23628: LD_INT 1
23630: PUSH
23631: FOR_DOWNTO
23632: IFFALSE 23677
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23634: LD_ADDR_VAR 0 6
23638: PUSH
23639: LD_VAR 0 6
23643: PPUSH
23644: LD_VAR 0 9
23648: PUSH
23649: LD_VAR 0 7
23653: MINUS
23654: PUSH
23655: LD_INT 1
23657: PLUS
23658: PPUSH
23659: LD_VAR 0 9
23663: PUSH
23664: LD_VAR 0 7
23668: ARRAY
23669: PPUSH
23670: CALL_OW 1
23674: ST_TO_ADDR
23675: GO 23631
23677: POP
23678: POP
// end ; tmp := [ ] ;
23679: LD_ADDR_VAR 0 9
23683: PUSH
23684: EMPTY
23685: ST_TO_ADDR
// if mode then
23686: LD_VAR 0 5
23690: IFFALSE 23759
// begin for i = 1 to result do
23692: LD_ADDR_VAR 0 7
23696: PUSH
23697: DOUBLE
23698: LD_INT 1
23700: DEC
23701: ST_TO_ADDR
23702: LD_VAR 0 6
23706: PUSH
23707: FOR_TO
23708: IFFALSE 23747
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23710: LD_ADDR_VAR 0 9
23714: PUSH
23715: LD_VAR 0 9
23719: PPUSH
23720: LD_VAR 0 7
23724: PPUSH
23725: LD_VAR 0 6
23729: PUSH
23730: LD_VAR 0 7
23734: ARRAY
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: PPUSH
23740: CALL_OW 1
23744: ST_TO_ADDR
23745: GO 23707
23747: POP
23748: POP
// result := tmp ;
23749: LD_ADDR_VAR 0 6
23753: PUSH
23754: LD_VAR 0 9
23758: ST_TO_ADDR
// end ; end ;
23759: LD_VAR 0 6
23763: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23764: LD_INT 0
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
23771: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23772: LD_ADDR_VAR 0 5
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: ST_TO_ADDR
// if not x or not y then
23794: LD_VAR 0 2
23798: NOT
23799: IFTRUE 23808
23801: PUSH
23802: LD_VAR 0 3
23806: NOT
23807: OR
23808: IFFALSE 23812
// exit ;
23810: GO 25468
// if not range then
23812: LD_VAR 0 4
23816: NOT
23817: IFFALSE 23827
// range := 10 ;
23819: LD_ADDR_VAR 0 4
23823: PUSH
23824: LD_INT 10
23826: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23827: LD_ADDR_VAR 0 8
23831: PUSH
23832: LD_INT 81
23834: PUSH
23835: LD_VAR 0 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 92
23846: PUSH
23847: LD_VAR 0 2
23851: PUSH
23852: LD_VAR 0 3
23856: PUSH
23857: LD_VAR 0 4
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 3
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 3
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: ST_TO_ADDR
// if not tmp then
23895: LD_VAR 0 8
23899: NOT
23900: IFFALSE 23904
// exit ;
23902: GO 25468
// for i in tmp do
23904: LD_ADDR_VAR 0 6
23908: PUSH
23909: LD_VAR 0 8
23913: PUSH
23914: FOR_IN
23915: IFFALSE 25443
// begin points := [ 0 , 0 , 0 ] ;
23917: LD_ADDR_VAR 0 9
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: ST_TO_ADDR
// bpoints := 1 ;
23936: LD_ADDR_VAR 0 10
23940: PUSH
23941: LD_INT 1
23943: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23944: LD_VAR 0 6
23948: PPUSH
23949: CALL_OW 247
23953: PUSH
23954: LD_INT 1
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23962
23960: GO 24544
23962: POP
// begin if GetClass ( i ) = 1 then
23963: LD_VAR 0 6
23967: PPUSH
23968: CALL_OW 257
23972: PUSH
23973: LD_INT 1
23975: EQUAL
23976: IFFALSE 23997
// points := [ 10 , 5 , 3 ] ;
23978: LD_ADDR_VAR 0 9
23982: PUSH
23983: LD_INT 10
23985: PUSH
23986: LD_INT 5
23988: PUSH
23989: LD_INT 3
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23997: LD_VAR 0 6
24001: PPUSH
24002: CALL_OW 257
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 3
24012: PUSH
24013: LD_INT 4
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: IN
24021: IFFALSE 24042
// points := [ 3 , 2 , 1 ] ;
24023: LD_ADDR_VAR 0 9
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24042: LD_VAR 0 6
24046: PPUSH
24047: CALL_OW 257
24051: PUSH
24052: LD_INT 5
24054: EQUAL
24055: IFFALSE 24076
// points := [ 130 , 5 , 2 ] ;
24057: LD_ADDR_VAR 0 9
24061: PUSH
24062: LD_INT 130
24064: PUSH
24065: LD_INT 5
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24076: LD_VAR 0 6
24080: PPUSH
24081: CALL_OW 257
24085: PUSH
24086: LD_INT 8
24088: EQUAL
24089: IFFALSE 24110
// points := [ 35 , 35 , 30 ] ;
24091: LD_ADDR_VAR 0 9
24095: PUSH
24096: LD_INT 35
24098: PUSH
24099: LD_INT 35
24101: PUSH
24102: LD_INT 30
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24110: LD_VAR 0 6
24114: PPUSH
24115: CALL_OW 257
24119: PUSH
24120: LD_INT 9
24122: EQUAL
24123: IFFALSE 24144
// points := [ 20 , 55 , 40 ] ;
24125: LD_ADDR_VAR 0 9
24129: PUSH
24130: LD_INT 20
24132: PUSH
24133: LD_INT 55
24135: PUSH
24136: LD_INT 40
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24144: LD_VAR 0 6
24148: PPUSH
24149: CALL_OW 257
24153: PUSH
24154: LD_INT 12
24156: PUSH
24157: LD_INT 16
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: IN
24164: IFFALSE 24185
// points := [ 5 , 3 , 2 ] ;
24166: LD_ADDR_VAR 0 9
24170: PUSH
24171: LD_INT 5
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: LIST
24184: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24185: LD_VAR 0 6
24189: PPUSH
24190: CALL_OW 257
24194: PUSH
24195: LD_INT 17
24197: EQUAL
24198: IFFALSE 24219
// points := [ 100 , 50 , 75 ] ;
24200: LD_ADDR_VAR 0 9
24204: PUSH
24205: LD_INT 100
24207: PUSH
24208: LD_INT 50
24210: PUSH
24211: LD_INT 75
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24219: LD_VAR 0 6
24223: PPUSH
24224: CALL_OW 257
24228: PUSH
24229: LD_INT 15
24231: EQUAL
24232: IFFALSE 24253
// points := [ 10 , 5 , 3 ] ;
24234: LD_ADDR_VAR 0 9
24238: PUSH
24239: LD_INT 10
24241: PUSH
24242: LD_INT 5
24244: PUSH
24245: LD_INT 3
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24253: LD_VAR 0 6
24257: PPUSH
24258: CALL_OW 257
24262: PUSH
24263: LD_INT 14
24265: EQUAL
24266: IFFALSE 24287
// points := [ 10 , 0 , 0 ] ;
24268: LD_ADDR_VAR 0 9
24272: PUSH
24273: LD_INT 10
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24287: LD_VAR 0 6
24291: PPUSH
24292: CALL_OW 257
24296: PUSH
24297: LD_INT 11
24299: EQUAL
24300: IFFALSE 24321
// points := [ 30 , 10 , 5 ] ;
24302: LD_ADDR_VAR 0 9
24306: PUSH
24307: LD_INT 30
24309: PUSH
24310: LD_INT 10
24312: PUSH
24313: LD_INT 5
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_INT 5
24328: PPUSH
24329: CALL_OW 321
24333: PUSH
24334: LD_INT 2
24336: EQUAL
24337: IFFALSE 24354
// bpoints := bpoints * 1.8 ;
24339: LD_ADDR_VAR 0 10
24343: PUSH
24344: LD_VAR 0 10
24348: PUSH
24349: LD_REAL  1.80000000000000E+0000
24352: MUL
24353: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24354: LD_VAR 0 6
24358: PPUSH
24359: CALL_OW 257
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 2
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: LD_INT 4
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: IN
24382: IFFALSE 24402
24384: PUSH
24385: LD_VAR 0 1
24389: PPUSH
24390: LD_INT 51
24392: PPUSH
24393: CALL_OW 321
24397: PUSH
24398: LD_INT 2
24400: EQUAL
24401: AND
24402: IFFALSE 24419
// bpoints := bpoints * 1.2 ;
24404: LD_ADDR_VAR 0 10
24408: PUSH
24409: LD_VAR 0 10
24413: PUSH
24414: LD_REAL  1.20000000000000E+0000
24417: MUL
24418: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24419: LD_VAR 0 6
24423: PPUSH
24424: CALL_OW 257
24428: PUSH
24429: LD_INT 5
24431: PUSH
24432: LD_INT 7
24434: PUSH
24435: LD_INT 9
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: IN
24443: IFFALSE 24463
24445: PUSH
24446: LD_VAR 0 1
24450: PPUSH
24451: LD_INT 52
24453: PPUSH
24454: CALL_OW 321
24458: PUSH
24459: LD_INT 2
24461: EQUAL
24462: AND
24463: IFFALSE 24480
// bpoints := bpoints * 1.5 ;
24465: LD_ADDR_VAR 0 10
24469: PUSH
24470: LD_VAR 0 10
24474: PUSH
24475: LD_REAL  1.50000000000000E+0000
24478: MUL
24479: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24480: LD_VAR 0 1
24484: PPUSH
24485: LD_INT 66
24487: PPUSH
24488: CALL_OW 321
24492: PUSH
24493: LD_INT 2
24495: EQUAL
24496: IFFALSE 24513
// bpoints := bpoints * 1.1 ;
24498: LD_ADDR_VAR 0 10
24502: PUSH
24503: LD_VAR 0 10
24507: PUSH
24508: LD_REAL  1.10000000000000E+0000
24511: MUL
24512: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24513: LD_ADDR_VAR 0 10
24517: PUSH
24518: LD_VAR 0 10
24522: PUSH
24523: LD_VAR 0 6
24527: PPUSH
24528: LD_INT 1
24530: PPUSH
24531: CALL_OW 259
24535: PUSH
24536: LD_REAL  1.15000000000000E+0000
24539: MUL
24540: MUL
24541: ST_TO_ADDR
// end ; unit_vehicle :
24542: GO 25372
24544: LD_INT 2
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 25360
24552: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24553: LD_VAR 0 6
24557: PPUSH
24558: CALL_OW 264
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 42
24568: PUSH
24569: LD_INT 24
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: IN
24577: IFFALSE 24598
// points := [ 25 , 5 , 3 ] ;
24579: LD_ADDR_VAR 0 9
24583: PUSH
24584: LD_INT 25
24586: PUSH
24587: LD_INT 5
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: LIST
24597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24598: LD_VAR 0 6
24602: PPUSH
24603: CALL_OW 264
24607: PUSH
24608: LD_INT 4
24610: PUSH
24611: LD_INT 43
24613: PUSH
24614: LD_INT 25
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: LIST
24621: IN
24622: IFFALSE 24643
// points := [ 40 , 15 , 5 ] ;
24624: LD_ADDR_VAR 0 9
24628: PUSH
24629: LD_INT 40
24631: PUSH
24632: LD_INT 15
24634: PUSH
24635: LD_INT 5
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24643: LD_VAR 0 6
24647: PPUSH
24648: CALL_OW 264
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: LD_INT 23
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: IN
24663: IFFALSE 24684
// points := [ 7 , 25 , 8 ] ;
24665: LD_ADDR_VAR 0 9
24669: PUSH
24670: LD_INT 7
24672: PUSH
24673: LD_INT 25
24675: PUSH
24676: LD_INT 8
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24684: LD_VAR 0 6
24688: PPUSH
24689: CALL_OW 264
24693: PUSH
24694: LD_INT 5
24696: PUSH
24697: LD_INT 27
24699: PUSH
24700: LD_INT 44
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: IN
24708: IFFALSE 24729
// points := [ 14 , 50 , 16 ] ;
24710: LD_ADDR_VAR 0 9
24714: PUSH
24715: LD_INT 14
24717: PUSH
24718: LD_INT 50
24720: PUSH
24721: LD_INT 16
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24729: LD_VAR 0 6
24733: PPUSH
24734: CALL_OW 264
24738: PUSH
24739: LD_INT 6
24741: PUSH
24742: LD_INT 46
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: IN
24749: IFFALSE 24770
// points := [ 32 , 120 , 70 ] ;
24751: LD_ADDR_VAR 0 9
24755: PUSH
24756: LD_INT 32
24758: PUSH
24759: LD_INT 120
24761: PUSH
24762: LD_INT 70
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24770: LD_VAR 0 6
24774: PPUSH
24775: CALL_OW 264
24779: PUSH
24780: LD_INT 7
24782: PUSH
24783: LD_INT 28
24785: PUSH
24786: LD_INT 45
24788: PUSH
24789: LD_INT 92
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: IN
24798: IFFALSE 24819
// points := [ 35 , 20 , 45 ] ;
24800: LD_ADDR_VAR 0 9
24804: PUSH
24805: LD_INT 35
24807: PUSH
24808: LD_INT 20
24810: PUSH
24811: LD_INT 45
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24819: LD_VAR 0 6
24823: PPUSH
24824: CALL_OW 264
24828: PUSH
24829: LD_INT 47
24831: PUSH
24832: EMPTY
24833: LIST
24834: IN
24835: IFFALSE 24856
// points := [ 67 , 45 , 75 ] ;
24837: LD_ADDR_VAR 0 9
24841: PUSH
24842: LD_INT 67
24844: PUSH
24845: LD_INT 45
24847: PUSH
24848: LD_INT 75
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24856: LD_VAR 0 6
24860: PPUSH
24861: CALL_OW 264
24865: PUSH
24866: LD_INT 26
24868: PUSH
24869: EMPTY
24870: LIST
24871: IN
24872: IFFALSE 24893
// points := [ 120 , 30 , 80 ] ;
24874: LD_ADDR_VAR 0 9
24878: PUSH
24879: LD_INT 120
24881: PUSH
24882: LD_INT 30
24884: PUSH
24885: LD_INT 80
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24893: LD_VAR 0 6
24897: PPUSH
24898: CALL_OW 264
24902: PUSH
24903: LD_INT 22
24905: PUSH
24906: EMPTY
24907: LIST
24908: IN
24909: IFFALSE 24930
// points := [ 40 , 1 , 1 ] ;
24911: LD_ADDR_VAR 0 9
24915: PUSH
24916: LD_INT 40
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24930: LD_VAR 0 6
24934: PPUSH
24935: CALL_OW 264
24939: PUSH
24940: LD_INT 29
24942: PUSH
24943: EMPTY
24944: LIST
24945: IN
24946: IFFALSE 24967
// points := [ 70 , 200 , 400 ] ;
24948: LD_ADDR_VAR 0 9
24952: PUSH
24953: LD_INT 70
24955: PUSH
24956: LD_INT 200
24958: PUSH
24959: LD_INT 400
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24967: LD_VAR 0 6
24971: PPUSH
24972: CALL_OW 264
24976: PUSH
24977: LD_INT 14
24979: PUSH
24980: LD_INT 53
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: IN
24987: IFFALSE 25008
// points := [ 40 , 10 , 20 ] ;
24989: LD_ADDR_VAR 0 9
24993: PUSH
24994: LD_INT 40
24996: PUSH
24997: LD_INT 10
24999: PUSH
25000: LD_INT 20
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25008: LD_VAR 0 6
25012: PPUSH
25013: CALL_OW 264
25017: PUSH
25018: LD_INT 9
25020: PUSH
25021: EMPTY
25022: LIST
25023: IN
25024: IFFALSE 25045
// points := [ 5 , 70 , 20 ] ;
25026: LD_ADDR_VAR 0 9
25030: PUSH
25031: LD_INT 5
25033: PUSH
25034: LD_INT 70
25036: PUSH
25037: LD_INT 20
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25045: LD_VAR 0 6
25049: PPUSH
25050: CALL_OW 264
25054: PUSH
25055: LD_INT 10
25057: PUSH
25058: EMPTY
25059: LIST
25060: IN
25061: IFFALSE 25082
// points := [ 35 , 110 , 70 ] ;
25063: LD_ADDR_VAR 0 9
25067: PUSH
25068: LD_INT 35
25070: PUSH
25071: LD_INT 110
25073: PUSH
25074: LD_INT 70
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25082: LD_VAR 0 6
25086: PPUSH
25087: CALL_OW 265
25091: PUSH
25092: LD_INT 25
25094: EQUAL
25095: IFFALSE 25116
// points := [ 80 , 65 , 100 ] ;
25097: LD_ADDR_VAR 0 9
25101: PUSH
25102: LD_INT 80
25104: PUSH
25105: LD_INT 65
25107: PUSH
25108: LD_INT 100
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25116: LD_VAR 0 6
25120: PPUSH
25121: CALL_OW 263
25125: PUSH
25126: LD_INT 1
25128: EQUAL
25129: IFFALSE 25164
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25131: LD_ADDR_VAR 0 10
25135: PUSH
25136: LD_VAR 0 10
25140: PUSH
25141: LD_VAR 0 6
25145: PPUSH
25146: CALL_OW 311
25150: PPUSH
25151: LD_INT 3
25153: PPUSH
25154: CALL_OW 259
25158: PUSH
25159: LD_INT 4
25161: MUL
25162: MUL
25163: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25164: LD_VAR 0 6
25168: PPUSH
25169: CALL_OW 263
25173: PUSH
25174: LD_INT 2
25176: EQUAL
25177: IFFALSE 25228
// begin j := IsControledBy ( i ) ;
25179: LD_ADDR_VAR 0 7
25183: PUSH
25184: LD_VAR 0 6
25188: PPUSH
25189: CALL_OW 312
25193: ST_TO_ADDR
// if j then
25194: LD_VAR 0 7
25198: IFFALSE 25228
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25200: LD_ADDR_VAR 0 10
25204: PUSH
25205: LD_VAR 0 10
25209: PUSH
25210: LD_VAR 0 7
25214: PPUSH
25215: LD_INT 3
25217: PPUSH
25218: CALL_OW 259
25222: PUSH
25223: LD_INT 3
25225: MUL
25226: MUL
25227: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25228: LD_VAR 0 6
25232: PPUSH
25233: CALL_OW 264
25237: PUSH
25238: LD_INT 5
25240: PUSH
25241: LD_INT 6
25243: PUSH
25244: LD_INT 46
25246: PUSH
25247: LD_INT 44
25249: PUSH
25250: LD_INT 47
25252: PUSH
25253: LD_INT 45
25255: PUSH
25256: LD_INT 28
25258: PUSH
25259: LD_INT 7
25261: PUSH
25262: LD_INT 27
25264: PUSH
25265: LD_INT 29
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: IN
25280: IFFALSE 25300
25282: PUSH
25283: LD_VAR 0 1
25287: PPUSH
25288: LD_INT 52
25290: PPUSH
25291: CALL_OW 321
25295: PUSH
25296: LD_INT 2
25298: EQUAL
25299: AND
25300: IFFALSE 25317
// bpoints := bpoints * 1.2 ;
25302: LD_ADDR_VAR 0 10
25306: PUSH
25307: LD_VAR 0 10
25311: PUSH
25312: LD_REAL  1.20000000000000E+0000
25315: MUL
25316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25317: LD_VAR 0 6
25321: PPUSH
25322: CALL_OW 264
25326: PUSH
25327: LD_INT 6
25329: PUSH
25330: LD_INT 46
25332: PUSH
25333: LD_INT 47
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: LIST
25340: IN
25341: IFFALSE 25358
// bpoints := bpoints * 1.2 ;
25343: LD_ADDR_VAR 0 10
25347: PUSH
25348: LD_VAR 0 10
25352: PUSH
25353: LD_REAL  1.20000000000000E+0000
25356: MUL
25357: ST_TO_ADDR
// end ; unit_building :
25358: GO 25372
25360: LD_INT 3
25362: DOUBLE
25363: EQUAL
25364: IFTRUE 25368
25366: GO 25371
25368: POP
// ; end ;
25369: GO 25372
25371: POP
// for j = 1 to 3 do
25372: LD_ADDR_VAR 0 7
25376: PUSH
25377: DOUBLE
25378: LD_INT 1
25380: DEC
25381: ST_TO_ADDR
25382: LD_INT 3
25384: PUSH
25385: FOR_TO
25386: IFFALSE 25439
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25388: LD_ADDR_VAR 0 5
25392: PUSH
25393: LD_VAR 0 5
25397: PPUSH
25398: LD_VAR 0 7
25402: PPUSH
25403: LD_VAR 0 5
25407: PUSH
25408: LD_VAR 0 7
25412: ARRAY
25413: PUSH
25414: LD_VAR 0 9
25418: PUSH
25419: LD_VAR 0 7
25423: ARRAY
25424: PUSH
25425: LD_VAR 0 10
25429: MUL
25430: PLUS
25431: PPUSH
25432: CALL_OW 1
25436: ST_TO_ADDR
25437: GO 25385
25439: POP
25440: POP
// end ;
25441: GO 23914
25443: POP
25444: POP
// result := Replace ( result , 4 , tmp ) ;
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: LD_VAR 0 5
25454: PPUSH
25455: LD_INT 4
25457: PPUSH
25458: LD_VAR 0 8
25462: PPUSH
25463: CALL_OW 1
25467: ST_TO_ADDR
// end ;
25468: LD_VAR 0 5
25472: RET
// export function DangerAtRange ( unit , range ) ; begin
25473: LD_INT 0
25475: PPUSH
// if not unit then
25476: LD_VAR 0 1
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25530
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25485: LD_ADDR_VAR 0 3
25489: PUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 255
25499: PPUSH
25500: LD_VAR 0 1
25504: PPUSH
25505: CALL_OW 250
25509: PPUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 251
25519: PPUSH
25520: LD_VAR 0 2
25524: PPUSH
25525: CALL 23764 0 4
25529: ST_TO_ADDR
// end ;
25530: LD_VAR 0 3
25534: RET
// export function DangerInArea ( side , area ) ; begin
25535: LD_INT 0
25537: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_VAR 0 2
25547: PPUSH
25548: LD_INT 81
25550: PUSH
25551: LD_VAR 0 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PPUSH
25560: CALL_OW 70
25564: ST_TO_ADDR
// end ;
25565: LD_VAR 0 3
25569: RET
// export function IsExtension ( b ) ; begin
25570: LD_INT 0
25572: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25573: LD_ADDR_VAR 0 2
25577: PUSH
25578: LD_VAR 0 1
25582: PUSH
25583: LD_INT 23
25585: PUSH
25586: LD_INT 20
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_INT 17
25594: PUSH
25595: LD_INT 24
25597: PUSH
25598: LD_INT 21
25600: PUSH
25601: LD_INT 19
25603: PUSH
25604: LD_INT 16
25606: PUSH
25607: LD_INT 25
25609: PUSH
25610: LD_INT 18
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: IN
25625: ST_TO_ADDR
// end ;
25626: LD_VAR 0 2
25630: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25631: LD_INT 0
25633: PPUSH
25634: PPUSH
25635: PPUSH
// result := [ ] ;
25636: LD_ADDR_VAR 0 4
25640: PUSH
25641: EMPTY
25642: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25643: LD_ADDR_VAR 0 5
25647: PUSH
25648: LD_VAR 0 2
25652: PPUSH
25653: LD_INT 21
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PPUSH
25663: CALL_OW 70
25667: ST_TO_ADDR
// if not tmp then
25668: LD_VAR 0 5
25672: NOT
25673: IFFALSE 25677
// exit ;
25675: GO 25741
// if checkLink then
25677: LD_VAR 0 3
25681: IFFALSE 25731
// begin for i in tmp do
25683: LD_ADDR_VAR 0 6
25687: PUSH
25688: LD_VAR 0 5
25692: PUSH
25693: FOR_IN
25694: IFFALSE 25729
// if GetBase ( i ) <> base then
25696: LD_VAR 0 6
25700: PPUSH
25701: CALL_OW 274
25705: PUSH
25706: LD_VAR 0 1
25710: NONEQUAL
25711: IFFALSE 25727
// ComLinkToBase ( base , i ) ;
25713: LD_VAR 0 1
25717: PPUSH
25718: LD_VAR 0 6
25722: PPUSH
25723: CALL_OW 169
25727: GO 25693
25729: POP
25730: POP
// end ; result := tmp ;
25731: LD_ADDR_VAR 0 4
25735: PUSH
25736: LD_VAR 0 5
25740: ST_TO_ADDR
// end ;
25741: LD_VAR 0 4
25745: RET
// export function ComComplete ( units , b ) ; var i ; begin
25746: LD_INT 0
25748: PPUSH
25749: PPUSH
// if not units then
25750: LD_VAR 0 1
25754: NOT
25755: IFFALSE 25759
// exit ;
25757: GO 25849
// for i in units do
25759: LD_ADDR_VAR 0 4
25763: PUSH
25764: LD_VAR 0 1
25768: PUSH
25769: FOR_IN
25770: IFFALSE 25847
// if BuildingStatus ( b ) = bs_build then
25772: LD_VAR 0 2
25776: PPUSH
25777: CALL_OW 461
25781: PUSH
25782: LD_INT 1
25784: EQUAL
25785: IFFALSE 25845
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25787: LD_VAR 0 4
25791: PPUSH
25792: LD_STRING h
25794: PUSH
25795: LD_VAR 0 2
25799: PPUSH
25800: CALL_OW 250
25804: PUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL_OW 251
25814: PUSH
25815: LD_VAR 0 2
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: PPUSH
25841: CALL_OW 446
25845: GO 25769
25847: POP
25848: POP
// end ;
25849: LD_VAR 0 3
25853: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25862: LD_VAR 0 1
25866: NOT
25867: IFTRUE 25884
25869: PUSH
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 263
25879: PUSH
25880: LD_INT 2
25882: NONEQUAL
25883: OR
25884: IFFALSE 25888
// exit ;
25886: GO 26204
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25888: LD_ADDR_VAR 0 6
25892: PUSH
25893: LD_INT 22
25895: PUSH
25896: LD_VAR 0 1
25900: PPUSH
25901: CALL_OW 255
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: LD_INT 30
25915: PUSH
25916: LD_INT 36
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 34
25925: PUSH
25926: LD_INT 31
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 69
25946: ST_TO_ADDR
// if not tmp then
25947: LD_VAR 0 6
25951: NOT
25952: IFFALSE 25956
// exit ;
25954: GO 26204
// result := [ ] ;
25956: LD_ADDR_VAR 0 2
25960: PUSH
25961: EMPTY
25962: ST_TO_ADDR
// for i in tmp do
25963: LD_ADDR_VAR 0 3
25967: PUSH
25968: LD_VAR 0 6
25972: PUSH
25973: FOR_IN
25974: IFFALSE 26045
// begin t := UnitsInside ( i ) ;
25976: LD_ADDR_VAR 0 4
25980: PUSH
25981: LD_VAR 0 3
25985: PPUSH
25986: CALL_OW 313
25990: ST_TO_ADDR
// if t then
25991: LD_VAR 0 4
25995: IFFALSE 26043
// for j in t do
25997: LD_ADDR_VAR 0 7
26001: PUSH
26002: LD_VAR 0 4
26006: PUSH
26007: FOR_IN
26008: IFFALSE 26041
// result := Replace ( result , result + 1 , j ) ;
26010: LD_ADDR_VAR 0 2
26014: PUSH
26015: LD_VAR 0 2
26019: PPUSH
26020: LD_VAR 0 2
26024: PUSH
26025: LD_INT 1
26027: PLUS
26028: PPUSH
26029: LD_VAR 0 7
26033: PPUSH
26034: CALL_OW 1
26038: ST_TO_ADDR
26039: GO 26007
26041: POP
26042: POP
// end ;
26043: GO 25973
26045: POP
26046: POP
// if not result then
26047: LD_VAR 0 2
26051: NOT
26052: IFFALSE 26056
// exit ;
26054: GO 26204
// mech := result [ 1 ] ;
26056: LD_ADDR_VAR 0 5
26060: PUSH
26061: LD_VAR 0 2
26065: PUSH
26066: LD_INT 1
26068: ARRAY
26069: ST_TO_ADDR
// if result > 1 then
26070: LD_VAR 0 2
26074: PUSH
26075: LD_INT 1
26077: GREATER
26078: IFFALSE 26190
// begin for i = 2 to result do
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: DOUBLE
26086: LD_INT 2
26088: DEC
26089: ST_TO_ADDR
26090: LD_VAR 0 2
26094: PUSH
26095: FOR_TO
26096: IFFALSE 26188
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26098: LD_ADDR_VAR 0 4
26102: PUSH
26103: LD_VAR 0 2
26107: PUSH
26108: LD_VAR 0 3
26112: ARRAY
26113: PPUSH
26114: LD_INT 3
26116: PPUSH
26117: CALL_OW 259
26121: PUSH
26122: LD_VAR 0 2
26126: PUSH
26127: LD_VAR 0 3
26131: ARRAY
26132: PPUSH
26133: CALL_OW 432
26137: MINUS
26138: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26139: LD_VAR 0 4
26143: PUSH
26144: LD_VAR 0 5
26148: PPUSH
26149: LD_INT 3
26151: PPUSH
26152: CALL_OW 259
26156: PUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: CALL_OW 432
26166: MINUS
26167: GREATEREQUAL
26168: IFFALSE 26186
// mech := result [ i ] ;
26170: LD_ADDR_VAR 0 5
26174: PUSH
26175: LD_VAR 0 2
26179: PUSH
26180: LD_VAR 0 3
26184: ARRAY
26185: ST_TO_ADDR
// end ;
26186: GO 26095
26188: POP
26189: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26190: LD_VAR 0 1
26194: PPUSH
26195: LD_VAR 0 5
26199: PPUSH
26200: CALL_OW 135
// end ;
26204: LD_VAR 0 2
26208: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26209: LD_INT 0
26211: PPUSH
26212: PPUSH
26213: PPUSH
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
// result := [ ] ;
26224: LD_ADDR_VAR 0 7
26228: PUSH
26229: EMPTY
26230: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 266
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: IN
26251: NOT
26252: IFFALSE 26256
// exit ;
26254: GO 27896
// if name then
26256: LD_VAR 0 3
26260: IFFALSE 26276
// SetBName ( base_dep , name ) ;
26262: LD_VAR 0 1
26266: PPUSH
26267: LD_VAR 0 3
26271: PPUSH
26272: CALL_OW 500
// base := GetBase ( base_dep ) ;
26276: LD_ADDR_VAR 0 15
26280: PUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 274
26290: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26291: LD_ADDR_VAR 0 16
26295: PUSH
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 255
26305: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26306: LD_ADDR_VAR 0 17
26310: PUSH
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 248
26320: ST_TO_ADDR
// if sources then
26321: LD_VAR 0 5
26325: IFFALSE 26372
// for i = 1 to 3 do
26327: LD_ADDR_VAR 0 8
26331: PUSH
26332: DOUBLE
26333: LD_INT 1
26335: DEC
26336: ST_TO_ADDR
26337: LD_INT 3
26339: PUSH
26340: FOR_TO
26341: IFFALSE 26370
// AddResourceType ( base , i , sources [ i ] ) ;
26343: LD_VAR 0 15
26347: PPUSH
26348: LD_VAR 0 8
26352: PPUSH
26353: LD_VAR 0 5
26357: PUSH
26358: LD_VAR 0 8
26362: ARRAY
26363: PPUSH
26364: CALL_OW 276
26368: GO 26340
26370: POP
26371: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26372: LD_ADDR_VAR 0 18
26376: PUSH
26377: LD_VAR 0 15
26381: PPUSH
26382: LD_VAR 0 2
26386: PPUSH
26387: LD_INT 1
26389: PPUSH
26390: CALL 25631 0 3
26394: ST_TO_ADDR
// InitHc ;
26395: CALL_OW 19
// InitUc ;
26399: CALL_OW 18
// uc_side := side ;
26403: LD_ADDR_OWVAR 20
26407: PUSH
26408: LD_VAR 0 16
26412: ST_TO_ADDR
// uc_nation := nation ;
26413: LD_ADDR_OWVAR 21
26417: PUSH
26418: LD_VAR 0 17
26422: ST_TO_ADDR
// if buildings then
26423: LD_VAR 0 18
26427: IFFALSE 27755
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26429: LD_ADDR_VAR 0 19
26433: PUSH
26434: LD_VAR 0 18
26438: PPUSH
26439: LD_INT 2
26441: PUSH
26442: LD_INT 30
26444: PUSH
26445: LD_INT 29
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 30
26454: PUSH
26455: LD_INT 30
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 72
26471: ST_TO_ADDR
// if tmp then
26472: LD_VAR 0 19
26476: IFFALSE 26524
// for i in tmp do
26478: LD_ADDR_VAR 0 8
26482: PUSH
26483: LD_VAR 0 19
26487: PUSH
26488: FOR_IN
26489: IFFALSE 26522
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26491: LD_VAR 0 8
26495: PPUSH
26496: CALL_OW 250
26500: PPUSH
26501: LD_VAR 0 8
26505: PPUSH
26506: CALL_OW 251
26510: PPUSH
26511: LD_VAR 0 16
26515: PPUSH
26516: CALL_OW 441
26520: GO 26488
26522: POP
26523: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26524: LD_VAR 0 18
26528: PPUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 30
26534: PUSH
26535: LD_INT 32
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 30
26544: PUSH
26545: LD_INT 33
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: PPUSH
26557: CALL_OW 72
26561: IFFALSE 26649
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26563: LD_ADDR_VAR 0 8
26567: PUSH
26568: LD_VAR 0 18
26572: PPUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 30
26578: PUSH
26579: LD_INT 32
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 30
26588: PUSH
26589: LD_INT 33
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 72
26605: PUSH
26606: FOR_IN
26607: IFFALSE 26647
// begin if not GetBWeapon ( i ) then
26609: LD_VAR 0 8
26613: PPUSH
26614: CALL_OW 269
26618: NOT
26619: IFFALSE 26645
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26621: LD_VAR 0 8
26625: PPUSH
26626: LD_VAR 0 8
26630: PPUSH
26631: LD_VAR 0 2
26635: PPUSH
26636: CALL 27901 0 2
26640: PPUSH
26641: CALL_OW 431
// end ;
26645: GO 26606
26647: POP
26648: POP
// end ; for i = 1 to personel do
26649: LD_ADDR_VAR 0 8
26653: PUSH
26654: DOUBLE
26655: LD_INT 1
26657: DEC
26658: ST_TO_ADDR
26659: LD_VAR 0 6
26663: PUSH
26664: FOR_TO
26665: IFFALSE 27735
// begin if i > 4 then
26667: LD_VAR 0 8
26671: PUSH
26672: LD_INT 4
26674: GREATER
26675: IFFALSE 26679
// break ;
26677: GO 27735
// case i of 1 :
26679: LD_VAR 0 8
26683: PUSH
26684: LD_INT 1
26686: DOUBLE
26687: EQUAL
26688: IFTRUE 26692
26690: GO 26772
26692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26693: LD_ADDR_VAR 0 12
26697: PUSH
26698: LD_VAR 0 18
26702: PPUSH
26703: LD_INT 22
26705: PUSH
26706: LD_VAR 0 16
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 58
26717: PUSH
26718: EMPTY
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 30
26726: PUSH
26727: LD_INT 32
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 30
26736: PUSH
26737: LD_INT 4
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 30
26746: PUSH
26747: LD_INT 5
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 72
26769: ST_TO_ADDR
26770: GO 26994
26772: LD_INT 2
26774: DOUBLE
26775: EQUAL
26776: IFTRUE 26780
26778: GO 26842
26780: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26781: LD_ADDR_VAR 0 12
26785: PUSH
26786: LD_VAR 0 18
26790: PPUSH
26791: LD_INT 22
26793: PUSH
26794: LD_VAR 0 16
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 30
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 30
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 72
26839: ST_TO_ADDR
26840: GO 26994
26842: LD_INT 3
26844: DOUBLE
26845: EQUAL
26846: IFTRUE 26850
26848: GO 26912
26850: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26851: LD_ADDR_VAR 0 12
26855: PUSH
26856: LD_VAR 0 18
26860: PPUSH
26861: LD_INT 22
26863: PUSH
26864: LD_VAR 0 16
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 30
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 30
26888: PUSH
26889: LD_INT 3
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PPUSH
26905: CALL_OW 72
26909: ST_TO_ADDR
26910: GO 26994
26912: LD_INT 4
26914: DOUBLE
26915: EQUAL
26916: IFTRUE 26920
26918: GO 26993
26920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26921: LD_ADDR_VAR 0 12
26925: PUSH
26926: LD_VAR 0 18
26930: PPUSH
26931: LD_INT 22
26933: PUSH
26934: LD_VAR 0 16
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 30
26948: PUSH
26949: LD_INT 6
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 30
26958: PUSH
26959: LD_INT 7
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 30
26968: PUSH
26969: LD_INT 8
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 72
26990: ST_TO_ADDR
26991: GO 26994
26993: POP
// if i = 1 then
26994: LD_VAR 0 8
26998: PUSH
26999: LD_INT 1
27001: EQUAL
27002: IFFALSE 27113
// begin tmp := [ ] ;
27004: LD_ADDR_VAR 0 19
27008: PUSH
27009: EMPTY
27010: ST_TO_ADDR
// for j in f do
27011: LD_ADDR_VAR 0 9
27015: PUSH
27016: LD_VAR 0 12
27020: PUSH
27021: FOR_IN
27022: IFFALSE 27095
// if GetBType ( j ) = b_bunker then
27024: LD_VAR 0 9
27028: PPUSH
27029: CALL_OW 266
27033: PUSH
27034: LD_INT 32
27036: EQUAL
27037: IFFALSE 27064
// tmp := Insert ( tmp , 1 , j ) else
27039: LD_ADDR_VAR 0 19
27043: PUSH
27044: LD_VAR 0 19
27048: PPUSH
27049: LD_INT 1
27051: PPUSH
27052: LD_VAR 0 9
27056: PPUSH
27057: CALL_OW 2
27061: ST_TO_ADDR
27062: GO 27093
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27064: LD_ADDR_VAR 0 19
27068: PUSH
27069: LD_VAR 0 19
27073: PPUSH
27074: LD_VAR 0 19
27078: PUSH
27079: LD_INT 1
27081: PLUS
27082: PPUSH
27083: LD_VAR 0 9
27087: PPUSH
27088: CALL_OW 2
27092: ST_TO_ADDR
27093: GO 27021
27095: POP
27096: POP
// if tmp then
27097: LD_VAR 0 19
27101: IFFALSE 27113
// f := tmp ;
27103: LD_ADDR_VAR 0 12
27107: PUSH
27108: LD_VAR 0 19
27112: ST_TO_ADDR
// end ; x := personel [ i ] ;
27113: LD_ADDR_VAR 0 13
27117: PUSH
27118: LD_VAR 0 6
27122: PUSH
27123: LD_VAR 0 8
27127: ARRAY
27128: ST_TO_ADDR
// if x = - 1 then
27129: LD_VAR 0 13
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: EQUAL
27138: IFFALSE 27349
// begin for j in f do
27140: LD_ADDR_VAR 0 9
27144: PUSH
27145: LD_VAR 0 12
27149: PUSH
27150: FOR_IN
27151: IFFALSE 27345
// repeat InitHc ;
27153: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27157: LD_VAR 0 9
27161: PPUSH
27162: CALL_OW 266
27166: PUSH
27167: LD_INT 5
27169: EQUAL
27170: IFFALSE 27240
// begin if UnitsInside ( j ) < 3 then
27172: LD_VAR 0 9
27176: PPUSH
27177: CALL_OW 313
27181: PUSH
27182: LD_INT 3
27184: LESS
27185: IFFALSE 27221
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27187: LD_INT 0
27189: PPUSH
27190: LD_INT 5
27192: PUSH
27193: LD_INT 8
27195: PUSH
27196: LD_INT 9
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: PUSH
27204: LD_VAR 0 17
27208: ARRAY
27209: PPUSH
27210: LD_VAR 0 4
27214: PPUSH
27215: CALL_OW 380
27219: GO 27238
// PrepareHuman ( false , i , skill ) ;
27221: LD_INT 0
27223: PPUSH
27224: LD_VAR 0 8
27228: PPUSH
27229: LD_VAR 0 4
27233: PPUSH
27234: CALL_OW 380
// end else
27238: GO 27257
// PrepareHuman ( false , i , skill ) ;
27240: LD_INT 0
27242: PPUSH
27243: LD_VAR 0 8
27247: PPUSH
27248: LD_VAR 0 4
27252: PPUSH
27253: CALL_OW 380
// un := CreateHuman ;
27257: LD_ADDR_VAR 0 14
27261: PUSH
27262: CALL_OW 44
27266: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27267: LD_ADDR_VAR 0 7
27271: PUSH
27272: LD_VAR 0 7
27276: PPUSH
27277: LD_INT 1
27279: PPUSH
27280: LD_VAR 0 14
27284: PPUSH
27285: CALL_OW 2
27289: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27290: LD_VAR 0 14
27294: PPUSH
27295: LD_VAR 0 9
27299: PPUSH
27300: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27304: LD_VAR 0 9
27308: PPUSH
27309: CALL_OW 313
27313: PUSH
27314: LD_INT 6
27316: EQUAL
27317: IFTRUE 27341
27319: PUSH
27320: LD_VAR 0 9
27324: PPUSH
27325: CALL_OW 266
27329: PUSH
27330: LD_INT 32
27332: PUSH
27333: LD_INT 31
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: IN
27340: OR
27341: IFFALSE 27153
27343: GO 27150
27345: POP
27346: POP
// end else
27347: GO 27733
// for j = 1 to x do
27349: LD_ADDR_VAR 0 9
27353: PUSH
27354: DOUBLE
27355: LD_INT 1
27357: DEC
27358: ST_TO_ADDR
27359: LD_VAR 0 13
27363: PUSH
27364: FOR_TO
27365: IFFALSE 27731
// begin InitHc ;
27367: CALL_OW 19
// if not f then
27371: LD_VAR 0 12
27375: NOT
27376: IFFALSE 27465
// begin PrepareHuman ( false , i , skill ) ;
27378: LD_INT 0
27380: PPUSH
27381: LD_VAR 0 8
27385: PPUSH
27386: LD_VAR 0 4
27390: PPUSH
27391: CALL_OW 380
// un := CreateHuman ;
27395: LD_ADDR_VAR 0 14
27399: PUSH
27400: CALL_OW 44
27404: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27405: LD_ADDR_VAR 0 7
27409: PUSH
27410: LD_VAR 0 7
27414: PPUSH
27415: LD_INT 1
27417: PPUSH
27418: LD_VAR 0 14
27422: PPUSH
27423: CALL_OW 2
27427: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27428: LD_VAR 0 14
27432: PPUSH
27433: LD_VAR 0 1
27437: PPUSH
27438: CALL_OW 250
27442: PPUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 251
27452: PPUSH
27453: LD_INT 10
27455: PPUSH
27456: LD_INT 0
27458: PPUSH
27459: CALL_OW 50
// continue ;
27463: GO 27364
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27465: LD_VAR 0 12
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: CALL_OW 313
27478: IFFALSE 27506
27480: PUSH
27481: LD_VAR 0 12
27485: PUSH
27486: LD_INT 1
27488: ARRAY
27489: PPUSH
27490: CALL_OW 266
27494: PUSH
27495: LD_INT 32
27497: PUSH
27498: LD_INT 31
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: IN
27505: AND
27506: IFTRUE 27527
27508: PUSH
27509: LD_VAR 0 12
27513: PUSH
27514: LD_INT 1
27516: ARRAY
27517: PPUSH
27518: CALL_OW 313
27522: PUSH
27523: LD_INT 6
27525: EQUAL
27526: OR
27527: IFFALSE 27547
// f := Delete ( f , 1 ) ;
27529: LD_ADDR_VAR 0 12
27533: PUSH
27534: LD_VAR 0 12
27538: PPUSH
27539: LD_INT 1
27541: PPUSH
27542: CALL_OW 3
27546: ST_TO_ADDR
// if not f then
27547: LD_VAR 0 12
27551: NOT
27552: IFFALSE 27570
// begin x := x + 2 ;
27554: LD_ADDR_VAR 0 13
27558: PUSH
27559: LD_VAR 0 13
27563: PUSH
27564: LD_INT 2
27566: PLUS
27567: ST_TO_ADDR
// continue ;
27568: GO 27364
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27570: LD_VAR 0 12
27574: PUSH
27575: LD_INT 1
27577: ARRAY
27578: PPUSH
27579: CALL_OW 266
27583: PUSH
27584: LD_INT 5
27586: EQUAL
27587: IFFALSE 27661
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27589: LD_VAR 0 12
27593: PUSH
27594: LD_INT 1
27596: ARRAY
27597: PPUSH
27598: CALL_OW 313
27602: PUSH
27603: LD_INT 3
27605: LESS
27606: IFFALSE 27642
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27608: LD_INT 0
27610: PPUSH
27611: LD_INT 5
27613: PUSH
27614: LD_INT 8
27616: PUSH
27617: LD_INT 9
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: PUSH
27625: LD_VAR 0 17
27629: ARRAY
27630: PPUSH
27631: LD_VAR 0 4
27635: PPUSH
27636: CALL_OW 380
27640: GO 27659
// PrepareHuman ( false , i , skill ) ;
27642: LD_INT 0
27644: PPUSH
27645: LD_VAR 0 8
27649: PPUSH
27650: LD_VAR 0 4
27654: PPUSH
27655: CALL_OW 380
// end else
27659: GO 27678
// PrepareHuman ( false , i , skill ) ;
27661: LD_INT 0
27663: PPUSH
27664: LD_VAR 0 8
27668: PPUSH
27669: LD_VAR 0 4
27673: PPUSH
27674: CALL_OW 380
// un := CreateHuman ;
27678: LD_ADDR_VAR 0 14
27682: PUSH
27683: CALL_OW 44
27687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27688: LD_ADDR_VAR 0 7
27692: PUSH
27693: LD_VAR 0 7
27697: PPUSH
27698: LD_INT 1
27700: PPUSH
27701: LD_VAR 0 14
27705: PPUSH
27706: CALL_OW 2
27710: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27711: LD_VAR 0 14
27715: PPUSH
27716: LD_VAR 0 12
27720: PUSH
27721: LD_INT 1
27723: ARRAY
27724: PPUSH
27725: CALL_OW 52
// end ;
27729: GO 27364
27731: POP
27732: POP
// end ;
27733: GO 26664
27735: POP
27736: POP
// result := result ^ buildings ;
27737: LD_ADDR_VAR 0 7
27741: PUSH
27742: LD_VAR 0 7
27746: PUSH
27747: LD_VAR 0 18
27751: ADD
27752: ST_TO_ADDR
// end else
27753: GO 27896
// begin for i = 1 to personel do
27755: LD_ADDR_VAR 0 8
27759: PUSH
27760: DOUBLE
27761: LD_INT 1
27763: DEC
27764: ST_TO_ADDR
27765: LD_VAR 0 6
27769: PUSH
27770: FOR_TO
27771: IFFALSE 27894
// begin if i > 4 then
27773: LD_VAR 0 8
27777: PUSH
27778: LD_INT 4
27780: GREATER
27781: IFFALSE 27785
// break ;
27783: GO 27894
// x := personel [ i ] ;
27785: LD_ADDR_VAR 0 13
27789: PUSH
27790: LD_VAR 0 6
27794: PUSH
27795: LD_VAR 0 8
27799: ARRAY
27800: ST_TO_ADDR
// if x = - 1 then
27801: LD_VAR 0 13
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: EQUAL
27810: IFFALSE 27814
// continue ;
27812: GO 27770
// PrepareHuman ( false , i , skill ) ;
27814: LD_INT 0
27816: PPUSH
27817: LD_VAR 0 8
27821: PPUSH
27822: LD_VAR 0 4
27826: PPUSH
27827: CALL_OW 380
// un := CreateHuman ;
27831: LD_ADDR_VAR 0 14
27835: PUSH
27836: CALL_OW 44
27840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27841: LD_VAR 0 14
27845: PPUSH
27846: LD_VAR 0 1
27850: PPUSH
27851: CALL_OW 250
27855: PPUSH
27856: LD_VAR 0 1
27860: PPUSH
27861: CALL_OW 251
27865: PPUSH
27866: LD_INT 10
27868: PPUSH
27869: LD_INT 0
27871: PPUSH
27872: CALL_OW 50
// result := result ^ un ;
27876: LD_ADDR_VAR 0 7
27880: PUSH
27881: LD_VAR 0 7
27885: PUSH
27886: LD_VAR 0 14
27890: ADD
27891: ST_TO_ADDR
// end ;
27892: GO 27770
27894: POP
27895: POP
// end ; end ;
27896: LD_VAR 0 7
27900: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27901: LD_INT 0
27903: PPUSH
27904: PPUSH
27905: PPUSH
27906: PPUSH
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
27917: PPUSH
27918: PPUSH
// result := false ;
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_INT 0
27926: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27927: LD_VAR 0 1
27931: NOT
27932: IFTRUE 27957
27934: PUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: CALL_OW 266
27944: PUSH
27945: LD_INT 32
27947: PUSH
27948: LD_INT 33
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: IN
27955: NOT
27956: OR
27957: IFFALSE 27961
// exit ;
27959: GO 29096
// nat := GetNation ( tower ) ;
27961: LD_ADDR_VAR 0 12
27965: PUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: CALL_OW 248
27975: ST_TO_ADDR
// side := GetSide ( tower ) ;
27976: LD_ADDR_VAR 0 16
27980: PUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL_OW 255
27990: ST_TO_ADDR
// x := GetX ( tower ) ;
27991: LD_ADDR_VAR 0 10
27995: PUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL_OW 250
28005: ST_TO_ADDR
// y := GetY ( tower ) ;
28006: LD_ADDR_VAR 0 11
28010: PUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL_OW 251
28020: ST_TO_ADDR
// if not x or not y then
28021: LD_VAR 0 10
28025: NOT
28026: IFTRUE 28035
28028: PUSH
28029: LD_VAR 0 11
28033: NOT
28034: OR
28035: IFFALSE 28039
// exit ;
28037: GO 29096
// weapon := 0 ;
28039: LD_ADDR_VAR 0 18
28043: PUSH
28044: LD_INT 0
28046: ST_TO_ADDR
// fac_list := [ ] ;
28047: LD_ADDR_VAR 0 17
28051: PUSH
28052: EMPTY
28053: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28054: LD_ADDR_VAR 0 6
28058: PUSH
28059: LD_VAR 0 1
28063: PPUSH
28064: CALL_OW 274
28068: PPUSH
28069: LD_VAR 0 2
28073: PPUSH
28074: LD_INT 0
28076: PPUSH
28077: CALL 25631 0 3
28081: PPUSH
28082: LD_INT 30
28084: PUSH
28085: LD_INT 3
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 72
28096: ST_TO_ADDR
// if not factories then
28097: LD_VAR 0 6
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 29096
// for i in factories do
28106: LD_ADDR_VAR 0 8
28110: PUSH
28111: LD_VAR 0 6
28115: PUSH
28116: FOR_IN
28117: IFFALSE 28142
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28119: LD_ADDR_VAR 0 17
28123: PUSH
28124: LD_VAR 0 17
28128: PUSH
28129: LD_VAR 0 8
28133: PPUSH
28134: CALL_OW 478
28138: UNION
28139: ST_TO_ADDR
28140: GO 28116
28142: POP
28143: POP
// if not fac_list then
28144: LD_VAR 0 17
28148: NOT
28149: IFFALSE 28153
// exit ;
28151: GO 29096
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28153: LD_ADDR_VAR 0 5
28157: PUSH
28158: LD_INT 4
28160: PUSH
28161: LD_INT 5
28163: PUSH
28164: LD_INT 9
28166: PUSH
28167: LD_INT 10
28169: PUSH
28170: LD_INT 6
28172: PUSH
28173: LD_INT 7
28175: PUSH
28176: LD_INT 11
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 27
28190: PUSH
28191: LD_INT 28
28193: PUSH
28194: LD_INT 26
28196: PUSH
28197: LD_INT 30
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 43
28208: PUSH
28209: LD_INT 44
28211: PUSH
28212: LD_INT 46
28214: PUSH
28215: LD_INT 45
28217: PUSH
28218: LD_INT 47
28220: PUSH
28221: LD_INT 49
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: PUSH
28237: LD_VAR 0 12
28241: ARRAY
28242: ST_TO_ADDR
// list := list isect fac_list ;
28243: LD_ADDR_VAR 0 5
28247: PUSH
28248: LD_VAR 0 5
28252: PUSH
28253: LD_VAR 0 17
28257: ISECT
28258: ST_TO_ADDR
// if not list then
28259: LD_VAR 0 5
28263: NOT
28264: IFFALSE 28268
// exit ;
28266: GO 29096
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28268: LD_VAR 0 12
28272: PUSH
28273: LD_INT 3
28275: EQUAL
28276: IFFALSE 28288
28278: PUSH
28279: LD_INT 49
28281: PUSH
28282: LD_VAR 0 5
28286: IN
28287: AND
28288: IFFALSE 28308
28290: PUSH
28291: LD_INT 31
28293: PPUSH
28294: LD_VAR 0 16
28298: PPUSH
28299: CALL_OW 321
28303: PUSH
28304: LD_INT 2
28306: EQUAL
28307: AND
28308: IFFALSE 28368
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28310: LD_INT 22
28312: PUSH
28313: LD_VAR 0 16
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 35
28324: PUSH
28325: LD_INT 49
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 91
28334: PUSH
28335: LD_VAR 0 1
28339: PUSH
28340: LD_INT 10
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: PPUSH
28353: CALL_OW 69
28357: NOT
28358: IFFALSE 28368
// weapon := ru_time_lapser ;
28360: LD_ADDR_VAR 0 18
28364: PUSH
28365: LD_INT 49
28367: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28368: LD_VAR 0 12
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: IN
28383: IFFALSE 28407
28385: PUSH
28386: LD_INT 11
28388: PUSH
28389: LD_VAR 0 5
28393: IN
28394: IFTRUE 28406
28396: PUSH
28397: LD_INT 30
28399: PUSH
28400: LD_VAR 0 5
28404: IN
28405: OR
28406: AND
28407: IFFALSE 28427
28409: PUSH
28410: LD_INT 6
28412: PPUSH
28413: LD_VAR 0 16
28417: PPUSH
28418: CALL_OW 321
28422: PUSH
28423: LD_INT 2
28425: EQUAL
28426: AND
28427: IFFALSE 28594
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28429: LD_INT 22
28431: PUSH
28432: LD_VAR 0 16
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 35
28446: PUSH
28447: LD_INT 11
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 35
28456: PUSH
28457: LD_INT 30
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 91
28471: PUSH
28472: LD_VAR 0 1
28476: PUSH
28477: LD_INT 18
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: NOT
28495: IFFALSE 28571
28497: PUSH
28498: LD_INT 22
28500: PUSH
28501: LD_VAR 0 16
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: LD_INT 30
28515: PUSH
28516: LD_INT 32
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 30
28525: PUSH
28526: LD_INT 33
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 91
28540: PUSH
28541: LD_VAR 0 1
28545: PUSH
28546: LD_INT 12
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: PUSH
28567: LD_INT 2
28569: GREATER
28570: AND
28571: IFFALSE 28594
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28573: LD_ADDR_VAR 0 18
28577: PUSH
28578: LD_INT 11
28580: PUSH
28581: LD_INT 30
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_VAR 0 12
28592: ARRAY
28593: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28594: LD_VAR 0 18
28598: NOT
28599: IFFALSE 28619
28601: PUSH
28602: LD_INT 40
28604: PPUSH
28605: LD_VAR 0 16
28609: PPUSH
28610: CALL_OW 321
28614: PUSH
28615: LD_INT 2
28617: EQUAL
28618: AND
28619: IFFALSE 28655
28621: PUSH
28622: LD_INT 7
28624: PUSH
28625: LD_VAR 0 5
28629: IN
28630: IFTRUE 28642
28632: PUSH
28633: LD_INT 28
28635: PUSH
28636: LD_VAR 0 5
28640: IN
28641: OR
28642: IFTRUE 28654
28644: PUSH
28645: LD_INT 45
28647: PUSH
28648: LD_VAR 0 5
28652: IN
28653: OR
28654: AND
28655: IFFALSE 28909
// begin hex := GetHexInfo ( x , y ) ;
28657: LD_ADDR_VAR 0 4
28661: PUSH
28662: LD_VAR 0 10
28666: PPUSH
28667: LD_VAR 0 11
28671: PPUSH
28672: CALL_OW 546
28676: ST_TO_ADDR
// if hex [ 1 ] then
28677: LD_VAR 0 4
28681: PUSH
28682: LD_INT 1
28684: ARRAY
28685: IFFALSE 28689
// exit ;
28687: GO 29096
// height := hex [ 2 ] ;
28689: LD_ADDR_VAR 0 15
28693: PUSH
28694: LD_VAR 0 4
28698: PUSH
28699: LD_INT 2
28701: ARRAY
28702: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28703: LD_ADDR_VAR 0 14
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: LD_INT 5
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// for i in tmp do
28726: LD_ADDR_VAR 0 8
28730: PUSH
28731: LD_VAR 0 14
28735: PUSH
28736: FOR_IN
28737: IFFALSE 28907
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28739: LD_ADDR_VAR 0 9
28743: PUSH
28744: LD_VAR 0 10
28748: PPUSH
28749: LD_VAR 0 8
28753: PPUSH
28754: LD_INT 5
28756: PPUSH
28757: CALL_OW 272
28761: PUSH
28762: LD_VAR 0 11
28766: PPUSH
28767: LD_VAR 0 8
28771: PPUSH
28772: LD_INT 5
28774: PPUSH
28775: CALL_OW 273
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28784: LD_VAR 0 9
28788: PUSH
28789: LD_INT 1
28791: ARRAY
28792: PPUSH
28793: LD_VAR 0 9
28797: PUSH
28798: LD_INT 2
28800: ARRAY
28801: PPUSH
28802: CALL_OW 488
28806: IFFALSE 28905
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28808: LD_ADDR_VAR 0 4
28812: PUSH
28813: LD_VAR 0 9
28817: PUSH
28818: LD_INT 1
28820: ARRAY
28821: PPUSH
28822: LD_VAR 0 9
28826: PUSH
28827: LD_INT 2
28829: ARRAY
28830: PPUSH
28831: CALL_OW 546
28835: ST_TO_ADDR
// if hex [ 1 ] then
28836: LD_VAR 0 4
28840: PUSH
28841: LD_INT 1
28843: ARRAY
28844: IFFALSE 28848
// continue ;
28846: GO 28736
// h := hex [ 2 ] ;
28848: LD_ADDR_VAR 0 13
28852: PUSH
28853: LD_VAR 0 4
28857: PUSH
28858: LD_INT 2
28860: ARRAY
28861: ST_TO_ADDR
// if h + 7 < height then
28862: LD_VAR 0 13
28866: PUSH
28867: LD_INT 7
28869: PLUS
28870: PUSH
28871: LD_VAR 0 15
28875: LESS
28876: IFFALSE 28905
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28878: LD_ADDR_VAR 0 18
28882: PUSH
28883: LD_INT 7
28885: PUSH
28886: LD_INT 28
28888: PUSH
28889: LD_INT 45
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PUSH
28897: LD_VAR 0 12
28901: ARRAY
28902: ST_TO_ADDR
// break ;
28903: GO 28907
// end ; end ; end ;
28905: GO 28736
28907: POP
28908: POP
// end ; if not weapon then
28909: LD_VAR 0 18
28913: NOT
28914: IFFALSE 28974
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28916: LD_ADDR_VAR 0 5
28920: PUSH
28921: LD_VAR 0 5
28925: PUSH
28926: LD_INT 11
28928: PUSH
28929: LD_INT 30
28931: PUSH
28932: LD_INT 49
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: DIFF
28940: ST_TO_ADDR
// if not list then
28941: LD_VAR 0 5
28945: NOT
28946: IFFALSE 28950
// exit ;
28948: GO 29096
// weapon := list [ rand ( 1 , list ) ] ;
28950: LD_ADDR_VAR 0 18
28954: PUSH
28955: LD_VAR 0 5
28959: PUSH
28960: LD_INT 1
28962: PPUSH
28963: LD_VAR 0 5
28967: PPUSH
28968: CALL_OW 12
28972: ARRAY
28973: ST_TO_ADDR
// end ; if weapon then
28974: LD_VAR 0 18
28978: IFFALSE 29096
// begin tmp := CostOfWeapon ( weapon ) ;
28980: LD_ADDR_VAR 0 14
28984: PUSH
28985: LD_VAR 0 18
28989: PPUSH
28990: CALL_OW 451
28994: ST_TO_ADDR
// j := GetBase ( tower ) ;
28995: LD_ADDR_VAR 0 9
28999: PUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: CALL_OW 274
29009: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29010: LD_VAR 0 9
29014: PPUSH
29015: LD_INT 1
29017: PPUSH
29018: CALL_OW 275
29022: PUSH
29023: LD_VAR 0 14
29027: PUSH
29028: LD_INT 1
29030: ARRAY
29031: GREATEREQUAL
29032: IFFALSE 29058
29034: PUSH
29035: LD_VAR 0 9
29039: PPUSH
29040: LD_INT 2
29042: PPUSH
29043: CALL_OW 275
29047: PUSH
29048: LD_VAR 0 14
29052: PUSH
29053: LD_INT 2
29055: ARRAY
29056: GREATEREQUAL
29057: AND
29058: IFFALSE 29084
29060: PUSH
29061: LD_VAR 0 9
29065: PPUSH
29066: LD_INT 3
29068: PPUSH
29069: CALL_OW 275
29073: PUSH
29074: LD_VAR 0 14
29078: PUSH
29079: LD_INT 3
29081: ARRAY
29082: GREATEREQUAL
29083: AND
29084: IFFALSE 29096
// result := weapon ;
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_VAR 0 18
29095: ST_TO_ADDR
// end ; end ;
29096: LD_VAR 0 3
29100: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
// result := true ;
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_INT 1
29112: ST_TO_ADDR
// if array1 = array2 then
29113: LD_VAR 0 1
29117: PUSH
29118: LD_VAR 0 2
29122: EQUAL
29123: IFFALSE 29183
// begin for i = 1 to array1 do
29125: LD_ADDR_VAR 0 4
29129: PUSH
29130: DOUBLE
29131: LD_INT 1
29133: DEC
29134: ST_TO_ADDR
29135: LD_VAR 0 1
29139: PUSH
29140: FOR_TO
29141: IFFALSE 29179
// if array1 [ i ] <> array2 [ i ] then
29143: LD_VAR 0 1
29147: PUSH
29148: LD_VAR 0 4
29152: ARRAY
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_VAR 0 4
29163: ARRAY
29164: NONEQUAL
29165: IFFALSE 29177
// begin result := false ;
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_INT 0
29174: ST_TO_ADDR
// break ;
29175: GO 29179
// end ;
29177: GO 29140
29179: POP
29180: POP
// end else
29181: GO 29191
// result := false ;
29183: LD_ADDR_VAR 0 3
29187: PUSH
29188: LD_INT 0
29190: ST_TO_ADDR
// end ;
29191: LD_VAR 0 3
29195: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29196: LD_INT 0
29198: PPUSH
29199: PPUSH
// if not array1 or not array2 then
29200: LD_VAR 0 1
29204: NOT
29205: IFTRUE 29214
29207: PUSH
29208: LD_VAR 0 2
29212: NOT
29213: OR
29214: IFFALSE 29218
// exit ;
29216: GO 29282
// result := true ;
29218: LD_ADDR_VAR 0 3
29222: PUSH
29223: LD_INT 1
29225: ST_TO_ADDR
// for i = 1 to array1 do
29226: LD_ADDR_VAR 0 4
29230: PUSH
29231: DOUBLE
29232: LD_INT 1
29234: DEC
29235: ST_TO_ADDR
29236: LD_VAR 0 1
29240: PUSH
29241: FOR_TO
29242: IFFALSE 29280
// if array1 [ i ] <> array2 [ i ] then
29244: LD_VAR 0 1
29248: PUSH
29249: LD_VAR 0 4
29253: ARRAY
29254: PUSH
29255: LD_VAR 0 2
29259: PUSH
29260: LD_VAR 0 4
29264: ARRAY
29265: NONEQUAL
29266: IFFALSE 29278
// begin result := false ;
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 0
29275: ST_TO_ADDR
// break ;
29276: GO 29280
// end ;
29278: GO 29241
29280: POP
29281: POP
// end ;
29282: LD_VAR 0 3
29286: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29287: LD_INT 0
29289: PPUSH
29290: PPUSH
29291: PPUSH
// pom := GetBase ( fac ) ;
29292: LD_ADDR_VAR 0 5
29296: PUSH
29297: LD_VAR 0 1
29301: PPUSH
29302: CALL_OW 274
29306: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29307: LD_ADDR_VAR 0 4
29311: PUSH
29312: LD_VAR 0 2
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: PPUSH
29321: LD_VAR 0 2
29325: PUSH
29326: LD_INT 2
29328: ARRAY
29329: PPUSH
29330: LD_VAR 0 2
29334: PUSH
29335: LD_INT 3
29337: ARRAY
29338: PPUSH
29339: LD_VAR 0 2
29343: PUSH
29344: LD_INT 4
29346: ARRAY
29347: PPUSH
29348: CALL_OW 449
29352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29353: LD_ADDR_VAR 0 3
29357: PUSH
29358: LD_VAR 0 5
29362: PPUSH
29363: LD_INT 1
29365: PPUSH
29366: CALL_OW 275
29370: PUSH
29371: LD_VAR 0 4
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: GREATEREQUAL
29380: IFFALSE 29406
29382: PUSH
29383: LD_VAR 0 5
29387: PPUSH
29388: LD_INT 2
29390: PPUSH
29391: CALL_OW 275
29395: PUSH
29396: LD_VAR 0 4
29400: PUSH
29401: LD_INT 2
29403: ARRAY
29404: GREATEREQUAL
29405: AND
29406: IFFALSE 29432
29408: PUSH
29409: LD_VAR 0 5
29413: PPUSH
29414: LD_INT 3
29416: PPUSH
29417: CALL_OW 275
29421: PUSH
29422: LD_VAR 0 4
29426: PUSH
29427: LD_INT 3
29429: ARRAY
29430: GREATEREQUAL
29431: AND
29432: ST_TO_ADDR
// end ;
29433: LD_VAR 0 3
29437: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29438: LD_INT 0
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
// pom := GetBase ( building ) ;
29444: LD_ADDR_VAR 0 3
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: CALL_OW 274
29458: ST_TO_ADDR
// if not pom then
29459: LD_VAR 0 3
29463: NOT
29464: IFFALSE 29468
// exit ;
29466: GO 29642
// btype := GetBType ( building ) ;
29468: LD_ADDR_VAR 0 5
29472: PUSH
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 266
29482: ST_TO_ADDR
// if btype = b_armoury then
29483: LD_VAR 0 5
29487: PUSH
29488: LD_INT 4
29490: EQUAL
29491: IFFALSE 29501
// btype := b_barracks ;
29493: LD_ADDR_VAR 0 5
29497: PUSH
29498: LD_INT 5
29500: ST_TO_ADDR
// if btype = b_depot then
29501: LD_VAR 0 5
29505: PUSH
29506: LD_INT 0
29508: EQUAL
29509: IFFALSE 29519
// btype := b_warehouse ;
29511: LD_ADDR_VAR 0 5
29515: PUSH
29516: LD_INT 1
29518: ST_TO_ADDR
// if btype = b_workshop then
29519: LD_VAR 0 5
29523: PUSH
29524: LD_INT 2
29526: EQUAL
29527: IFFALSE 29537
// btype := b_factory ;
29529: LD_ADDR_VAR 0 5
29533: PUSH
29534: LD_INT 3
29536: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29537: LD_ADDR_VAR 0 4
29541: PUSH
29542: LD_VAR 0 5
29546: PPUSH
29547: LD_VAR 0 1
29551: PPUSH
29552: CALL_OW 248
29556: PPUSH
29557: CALL_OW 450
29561: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29562: LD_ADDR_VAR 0 2
29566: PUSH
29567: LD_VAR 0 3
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: CALL_OW 275
29579: PUSH
29580: LD_VAR 0 4
29584: PUSH
29585: LD_INT 1
29587: ARRAY
29588: GREATEREQUAL
29589: IFFALSE 29615
29591: PUSH
29592: LD_VAR 0 3
29596: PPUSH
29597: LD_INT 2
29599: PPUSH
29600: CALL_OW 275
29604: PUSH
29605: LD_VAR 0 4
29609: PUSH
29610: LD_INT 2
29612: ARRAY
29613: GREATEREQUAL
29614: AND
29615: IFFALSE 29641
29617: PUSH
29618: LD_VAR 0 3
29622: PPUSH
29623: LD_INT 3
29625: PPUSH
29626: CALL_OW 275
29630: PUSH
29631: LD_VAR 0 4
29635: PUSH
29636: LD_INT 3
29638: ARRAY
29639: GREATEREQUAL
29640: AND
29641: ST_TO_ADDR
// end ;
29642: LD_VAR 0 2
29646: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29647: LD_INT 0
29649: PPUSH
29650: PPUSH
29651: PPUSH
// pom := GetBase ( building ) ;
29652: LD_ADDR_VAR 0 4
29656: PUSH
29657: LD_VAR 0 1
29661: PPUSH
29662: CALL_OW 274
29666: ST_TO_ADDR
// if not pom then
29667: LD_VAR 0 4
29671: NOT
29672: IFFALSE 29676
// exit ;
29674: GO 29781
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29676: LD_ADDR_VAR 0 5
29680: PUSH
29681: LD_VAR 0 2
29685: PPUSH
29686: LD_VAR 0 1
29690: PPUSH
29691: CALL_OW 248
29695: PPUSH
29696: CALL_OW 450
29700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29701: LD_ADDR_VAR 0 3
29705: PUSH
29706: LD_VAR 0 4
29710: PPUSH
29711: LD_INT 1
29713: PPUSH
29714: CALL_OW 275
29718: PUSH
29719: LD_VAR 0 5
29723: PUSH
29724: LD_INT 1
29726: ARRAY
29727: GREATEREQUAL
29728: IFFALSE 29754
29730: PUSH
29731: LD_VAR 0 4
29735: PPUSH
29736: LD_INT 2
29738: PPUSH
29739: CALL_OW 275
29743: PUSH
29744: LD_VAR 0 5
29748: PUSH
29749: LD_INT 2
29751: ARRAY
29752: GREATEREQUAL
29753: AND
29754: IFFALSE 29780
29756: PUSH
29757: LD_VAR 0 4
29761: PPUSH
29762: LD_INT 3
29764: PPUSH
29765: CALL_OW 275
29769: PUSH
29770: LD_VAR 0 5
29774: PUSH
29775: LD_INT 3
29777: ARRAY
29778: GREATEREQUAL
29779: AND
29780: ST_TO_ADDR
// end ;
29781: LD_VAR 0 3
29785: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29786: LD_INT 0
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
// result := false ;
29799: LD_ADDR_VAR 0 8
29803: PUSH
29804: LD_INT 0
29806: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29807: LD_VAR 0 5
29811: NOT
29812: IFTRUE 29821
29814: PUSH
29815: LD_VAR 0 1
29819: NOT
29820: OR
29821: IFTRUE 29830
29823: PUSH
29824: LD_VAR 0 2
29828: NOT
29829: OR
29830: IFTRUE 29839
29832: PUSH
29833: LD_VAR 0 3
29837: NOT
29838: OR
29839: IFFALSE 29843
// exit ;
29841: GO 30669
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29843: LD_ADDR_VAR 0 14
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: LD_VAR 0 2
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: LD_VAR 0 4
29867: PPUSH
29868: LD_VAR 0 5
29872: PUSH
29873: LD_INT 1
29875: ARRAY
29876: PPUSH
29877: CALL_OW 248
29881: PPUSH
29882: LD_INT 0
29884: PPUSH
29885: CALL 31950 0 6
29889: ST_TO_ADDR
// if not hexes then
29890: LD_VAR 0 14
29894: NOT
29895: IFFALSE 29899
// exit ;
29897: GO 30669
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29899: LD_ADDR_VAR 0 17
29903: PUSH
29904: LD_VAR 0 5
29908: PPUSH
29909: LD_INT 22
29911: PUSH
29912: LD_VAR 0 13
29916: PPUSH
29917: CALL_OW 255
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 30
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 30
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PPUSH
29958: CALL_OW 72
29962: ST_TO_ADDR
// for i = 1 to hexes do
29963: LD_ADDR_VAR 0 9
29967: PUSH
29968: DOUBLE
29969: LD_INT 1
29971: DEC
29972: ST_TO_ADDR
29973: LD_VAR 0 14
29977: PUSH
29978: FOR_TO
29979: IFFALSE 30667
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29981: LD_ADDR_VAR 0 13
29985: PUSH
29986: LD_VAR 0 14
29990: PUSH
29991: LD_VAR 0 9
29995: ARRAY
29996: PUSH
29997: LD_INT 1
29999: ARRAY
30000: PPUSH
30001: LD_VAR 0 14
30005: PUSH
30006: LD_VAR 0 9
30010: ARRAY
30011: PUSH
30012: LD_INT 2
30014: ARRAY
30015: PPUSH
30016: CALL_OW 428
30020: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30021: LD_VAR 0 14
30025: PUSH
30026: LD_VAR 0 9
30030: ARRAY
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: LD_VAR 0 14
30040: PUSH
30041: LD_VAR 0 9
30045: ARRAY
30046: PUSH
30047: LD_INT 2
30049: ARRAY
30050: PPUSH
30051: CALL_OW 351
30055: IFTRUE 30094
30057: PUSH
30058: LD_VAR 0 14
30062: PUSH
30063: LD_VAR 0 9
30067: ARRAY
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: LD_VAR 0 14
30077: PUSH
30078: LD_VAR 0 9
30082: ARRAY
30083: PUSH
30084: LD_INT 2
30086: ARRAY
30087: PPUSH
30088: CALL_OW 488
30092: NOT
30093: OR
30094: IFTRUE 30111
30096: PUSH
30097: LD_VAR 0 13
30101: PPUSH
30102: CALL_OW 247
30106: PUSH
30107: LD_INT 3
30109: EQUAL
30110: OR
30111: IFFALSE 30117
// exit ;
30113: POP
30114: POP
30115: GO 30669
// if not tmp then
30117: LD_VAR 0 13
30121: NOT
30122: IFFALSE 30126
// continue ;
30124: GO 29978
// result := true ;
30126: LD_ADDR_VAR 0 8
30130: PUSH
30131: LD_INT 1
30133: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30134: LD_VAR 0 6
30138: IFFALSE 30155
30140: PUSH
30141: LD_VAR 0 13
30145: PPUSH
30146: CALL_OW 247
30150: PUSH
30151: LD_INT 2
30153: EQUAL
30154: AND
30155: IFFALSE 30172
30157: PUSH
30158: LD_VAR 0 13
30162: PPUSH
30163: CALL_OW 263
30167: PUSH
30168: LD_INT 1
30170: EQUAL
30171: AND
30172: IFFALSE 30336
// begin if IsDrivenBy ( tmp ) then
30174: LD_VAR 0 13
30178: PPUSH
30179: CALL_OW 311
30183: IFFALSE 30187
// continue ;
30185: GO 29978
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30187: LD_VAR 0 6
30191: PPUSH
30192: LD_INT 3
30194: PUSH
30195: LD_INT 60
30197: PUSH
30198: EMPTY
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: LD_INT 55
30210: PUSH
30211: EMPTY
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PPUSH
30222: CALL_OW 72
30226: IFFALSE 30334
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30228: LD_ADDR_VAR 0 18
30232: PUSH
30233: LD_VAR 0 6
30237: PPUSH
30238: LD_INT 3
30240: PUSH
30241: LD_INT 60
30243: PUSH
30244: EMPTY
30245: LIST
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: LD_INT 55
30256: PUSH
30257: EMPTY
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PPUSH
30268: CALL_OW 72
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: ST_TO_ADDR
// if IsInUnit ( driver ) then
30277: LD_VAR 0 18
30281: PPUSH
30282: CALL_OW 310
30286: IFFALSE 30297
// ComExit ( driver ) ;
30288: LD_VAR 0 18
30292: PPUSH
30293: CALL 55950 0 1
// AddComEnterUnit ( driver , tmp ) ;
30297: LD_VAR 0 18
30301: PPUSH
30302: LD_VAR 0 13
30306: PPUSH
30307: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30311: LD_VAR 0 18
30315: PPUSH
30316: LD_VAR 0 7
30320: PPUSH
30321: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30325: LD_VAR 0 18
30329: PPUSH
30330: CALL_OW 181
// end ; continue ;
30334: GO 29978
// end ; if not cleaners or not tmp in cleaners then
30336: LD_VAR 0 6
30340: NOT
30341: IFTRUE 30356
30343: PUSH
30344: LD_VAR 0 13
30348: PUSH
30349: LD_VAR 0 6
30353: IN
30354: NOT
30355: OR
30356: IFFALSE 30665
// begin if dep then
30358: LD_VAR 0 17
30362: IFFALSE 30498
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30364: LD_ADDR_VAR 0 16
30368: PUSH
30369: LD_VAR 0 17
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: PPUSH
30378: CALL_OW 250
30382: PPUSH
30383: LD_VAR 0 17
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PPUSH
30392: CALL_OW 254
30396: PPUSH
30397: LD_INT 5
30399: PPUSH
30400: CALL_OW 272
30404: PUSH
30405: LD_VAR 0 17
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 251
30418: PPUSH
30419: LD_VAR 0 17
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PPUSH
30428: CALL_OW 254
30432: PPUSH
30433: LD_INT 5
30435: PPUSH
30436: CALL_OW 273
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30445: LD_VAR 0 16
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PPUSH
30454: LD_VAR 0 16
30458: PUSH
30459: LD_INT 2
30461: ARRAY
30462: PPUSH
30463: CALL_OW 488
30467: IFFALSE 30498
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30469: LD_VAR 0 13
30473: PPUSH
30474: LD_VAR 0 16
30478: PUSH
30479: LD_INT 1
30481: ARRAY
30482: PPUSH
30483: LD_VAR 0 16
30487: PUSH
30488: LD_INT 2
30490: ARRAY
30491: PPUSH
30492: CALL_OW 111
// continue ;
30496: GO 29978
// end ; end ; r := GetDir ( tmp ) ;
30498: LD_ADDR_VAR 0 15
30502: PUSH
30503: LD_VAR 0 13
30507: PPUSH
30508: CALL_OW 254
30512: ST_TO_ADDR
// if r = 5 then
30513: LD_VAR 0 15
30517: PUSH
30518: LD_INT 5
30520: EQUAL
30521: IFFALSE 30531
// r := 0 ;
30523: LD_ADDR_VAR 0 15
30527: PUSH
30528: LD_INT 0
30530: ST_TO_ADDR
// for j = r to 5 do
30531: LD_ADDR_VAR 0 10
30535: PUSH
30536: DOUBLE
30537: LD_VAR 0 15
30541: DEC
30542: ST_TO_ADDR
30543: LD_INT 5
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30663
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30549: LD_ADDR_VAR 0 11
30553: PUSH
30554: LD_VAR 0 13
30558: PPUSH
30559: CALL_OW 250
30563: PPUSH
30564: LD_VAR 0 10
30568: PPUSH
30569: LD_INT 2
30571: PPUSH
30572: CALL_OW 272
30576: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30577: LD_ADDR_VAR 0 12
30581: PUSH
30582: LD_VAR 0 13
30586: PPUSH
30587: CALL_OW 251
30591: PPUSH
30592: LD_VAR 0 10
30596: PPUSH
30597: LD_INT 2
30599: PPUSH
30600: CALL_OW 273
30604: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30605: LD_VAR 0 11
30609: PPUSH
30610: LD_VAR 0 12
30614: PPUSH
30615: CALL_OW 488
30619: IFFALSE 30638
30621: PUSH
30622: LD_VAR 0 11
30626: PPUSH
30627: LD_VAR 0 12
30631: PPUSH
30632: CALL_OW 428
30636: NOT
30637: AND
30638: IFFALSE 30661
// begin ComMoveXY ( tmp , _x , _y ) ;
30640: LD_VAR 0 13
30644: PPUSH
30645: LD_VAR 0 11
30649: PPUSH
30650: LD_VAR 0 12
30654: PPUSH
30655: CALL_OW 111
// break ;
30659: GO 30663
// end ; end ;
30661: GO 30546
30663: POP
30664: POP
// end ; end ;
30665: GO 29978
30667: POP
30668: POP
// end ;
30669: LD_VAR 0 8
30673: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30674: LD_INT 0
30676: PPUSH
// result := true ;
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: LD_INT 1
30684: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30685: LD_VAR 0 2
30689: PUSH
30690: LD_INT 24
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30704
30696: LD_INT 33
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30729
30704: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_INT 32
30712: PPUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 321
30722: PUSH
30723: LD_INT 2
30725: EQUAL
30726: ST_TO_ADDR
30727: GO 31045
30729: LD_INT 20
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30762
30737: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_INT 6
30745: PPUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 321
30755: PUSH
30756: LD_INT 2
30758: EQUAL
30759: ST_TO_ADDR
30760: GO 31045
30762: LD_INT 22
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30776
30768: LD_INT 36
30770: DOUBLE
30771: EQUAL
30772: IFTRUE 30776
30774: GO 30801
30776: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30777: LD_ADDR_VAR 0 3
30781: PUSH
30782: LD_INT 15
30784: PPUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 321
30794: PUSH
30795: LD_INT 2
30797: EQUAL
30798: ST_TO_ADDR
30799: GO 31045
30801: LD_INT 30
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30834
30809: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 20
30817: PPUSH
30818: LD_VAR 0 1
30822: PPUSH
30823: CALL_OW 321
30827: PUSH
30828: LD_INT 2
30830: EQUAL
30831: ST_TO_ADDR
30832: GO 31045
30834: LD_INT 28
30836: DOUBLE
30837: EQUAL
30838: IFTRUE 30848
30840: LD_INT 21
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30873
30848: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_INT 21
30856: PPUSH
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL_OW 321
30866: PUSH
30867: LD_INT 2
30869: EQUAL
30870: ST_TO_ADDR
30871: GO 31045
30873: LD_INT 16
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30906
30881: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_INT 84
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 321
30899: PUSH
30900: LD_INT 2
30902: EQUAL
30903: ST_TO_ADDR
30904: GO 31045
30906: LD_INT 19
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30920
30912: LD_INT 23
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30945
30920: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_INT 83
30928: PPUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 321
30938: PUSH
30939: LD_INT 2
30941: EQUAL
30942: ST_TO_ADDR
30943: GO 31045
30945: LD_INT 17
30947: DOUBLE
30948: EQUAL
30949: IFTRUE 30953
30951: GO 30978
30953: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30954: LD_ADDR_VAR 0 3
30958: PUSH
30959: LD_INT 39
30961: PPUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 321
30971: PUSH
30972: LD_INT 2
30974: EQUAL
30975: ST_TO_ADDR
30976: GO 31045
30978: LD_INT 18
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31011
30986: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 40
30994: PPUSH
30995: LD_VAR 0 1
30999: PPUSH
31000: CALL_OW 321
31004: PUSH
31005: LD_INT 2
31007: EQUAL
31008: ST_TO_ADDR
31009: GO 31045
31011: LD_INT 27
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31044
31019: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31020: LD_ADDR_VAR 0 3
31024: PUSH
31025: LD_INT 35
31027: PPUSH
31028: LD_VAR 0 1
31032: PPUSH
31033: CALL_OW 321
31037: PUSH
31038: LD_INT 2
31040: EQUAL
31041: ST_TO_ADDR
31042: GO 31045
31044: POP
// end ;
31045: LD_VAR 0 3
31049: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31050: LD_INT 0
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
// result := false ;
31063: LD_ADDR_VAR 0 6
31067: PUSH
31068: LD_INT 0
31070: ST_TO_ADDR
// if btype = b_depot then
31071: LD_VAR 0 2
31075: PUSH
31076: LD_INT 0
31078: EQUAL
31079: IFFALSE 31091
// begin result := true ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: LD_INT 1
31088: ST_TO_ADDR
// exit ;
31089: GO 31945
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31091: LD_VAR 0 1
31095: NOT
31096: IFTRUE 31121
31098: PUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 266
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: IN
31119: NOT
31120: OR
31121: IFTRUE 31130
31123: PUSH
31124: LD_VAR 0 2
31128: NOT
31129: OR
31130: IFTRUE 31166
31132: PUSH
31133: LD_VAR 0 5
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: LD_INT 4
31152: PUSH
31153: LD_INT 5
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: IN
31164: NOT
31165: OR
31166: IFTRUE 31185
31168: PUSH
31169: LD_VAR 0 3
31173: PPUSH
31174: LD_VAR 0 4
31178: PPUSH
31179: CALL_OW 488
31183: NOT
31184: OR
31185: IFFALSE 31189
// exit ;
31187: GO 31945
// side := GetSide ( depot ) ;
31189: LD_ADDR_VAR 0 9
31193: PUSH
31194: LD_VAR 0 1
31198: PPUSH
31199: CALL_OW 255
31203: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31204: LD_VAR 0 9
31208: PPUSH
31209: LD_VAR 0 2
31213: PPUSH
31214: CALL 30674 0 2
31218: NOT
31219: IFFALSE 31223
// exit ;
31221: GO 31945
// pom := GetBase ( depot ) ;
31223: LD_ADDR_VAR 0 10
31227: PUSH
31228: LD_VAR 0 1
31232: PPUSH
31233: CALL_OW 274
31237: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31238: LD_ADDR_VAR 0 11
31242: PUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: LD_VAR 0 1
31252: PPUSH
31253: CALL_OW 248
31257: PPUSH
31258: CALL_OW 450
31262: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31263: LD_VAR 0 10
31267: PPUSH
31268: LD_INT 1
31270: PPUSH
31271: CALL_OW 275
31275: PUSH
31276: LD_VAR 0 11
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: GREATEREQUAL
31285: IFFALSE 31311
31287: PUSH
31288: LD_VAR 0 10
31292: PPUSH
31293: LD_INT 2
31295: PPUSH
31296: CALL_OW 275
31300: PUSH
31301: LD_VAR 0 11
31305: PUSH
31306: LD_INT 2
31308: ARRAY
31309: GREATEREQUAL
31310: AND
31311: IFFALSE 31337
31313: PUSH
31314: LD_VAR 0 10
31318: PPUSH
31319: LD_INT 3
31321: PPUSH
31322: CALL_OW 275
31326: PUSH
31327: LD_VAR 0 11
31331: PUSH
31332: LD_INT 3
31334: ARRAY
31335: GREATEREQUAL
31336: AND
31337: NOT
31338: IFFALSE 31342
// exit ;
31340: GO 31945
// if GetBType ( depot ) = b_depot then
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 266
31351: PUSH
31352: LD_INT 0
31354: EQUAL
31355: IFFALSE 31367
// dist := 28 else
31357: LD_ADDR_VAR 0 14
31361: PUSH
31362: LD_INT 28
31364: ST_TO_ADDR
31365: GO 31375
// dist := 36 ;
31367: LD_ADDR_VAR 0 14
31371: PUSH
31372: LD_INT 36
31374: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31375: LD_VAR 0 1
31379: PPUSH
31380: LD_VAR 0 3
31384: PPUSH
31385: LD_VAR 0 4
31389: PPUSH
31390: CALL_OW 297
31394: PUSH
31395: LD_VAR 0 14
31399: GREATER
31400: IFFALSE 31404
// exit ;
31402: GO 31945
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31404: LD_ADDR_VAR 0 12
31408: PUSH
31409: LD_VAR 0 2
31413: PPUSH
31414: LD_VAR 0 3
31418: PPUSH
31419: LD_VAR 0 4
31423: PPUSH
31424: LD_VAR 0 5
31428: PPUSH
31429: LD_VAR 0 1
31433: PPUSH
31434: CALL_OW 248
31438: PPUSH
31439: LD_INT 0
31441: PPUSH
31442: CALL 31950 0 6
31446: ST_TO_ADDR
// if not hexes then
31447: LD_VAR 0 12
31451: NOT
31452: IFFALSE 31456
// exit ;
31454: GO 31945
// hex := GetHexInfo ( x , y ) ;
31456: LD_ADDR_VAR 0 15
31460: PUSH
31461: LD_VAR 0 3
31465: PPUSH
31466: LD_VAR 0 4
31470: PPUSH
31471: CALL_OW 546
31475: ST_TO_ADDR
// if hex [ 1 ] then
31476: LD_VAR 0 15
31480: PUSH
31481: LD_INT 1
31483: ARRAY
31484: IFFALSE 31488
// exit ;
31486: GO 31945
// height := hex [ 2 ] ;
31488: LD_ADDR_VAR 0 13
31492: PUSH
31493: LD_VAR 0 15
31497: PUSH
31498: LD_INT 2
31500: ARRAY
31501: ST_TO_ADDR
// for i = 1 to hexes do
31502: LD_ADDR_VAR 0 7
31506: PUSH
31507: DOUBLE
31508: LD_INT 1
31510: DEC
31511: ST_TO_ADDR
31512: LD_VAR 0 12
31516: PUSH
31517: FOR_TO
31518: IFFALSE 31862
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31520: LD_VAR 0 12
31524: PUSH
31525: LD_VAR 0 7
31529: ARRAY
31530: PUSH
31531: LD_INT 1
31533: ARRAY
31534: PPUSH
31535: LD_VAR 0 12
31539: PUSH
31540: LD_VAR 0 7
31544: ARRAY
31545: PUSH
31546: LD_INT 2
31548: ARRAY
31549: PPUSH
31550: CALL_OW 488
31554: NOT
31555: IFTRUE 31597
31557: PUSH
31558: LD_VAR 0 12
31562: PUSH
31563: LD_VAR 0 7
31567: ARRAY
31568: PUSH
31569: LD_INT 1
31571: ARRAY
31572: PPUSH
31573: LD_VAR 0 12
31577: PUSH
31578: LD_VAR 0 7
31582: ARRAY
31583: PUSH
31584: LD_INT 2
31586: ARRAY
31587: PPUSH
31588: CALL_OW 428
31592: PUSH
31593: LD_INT 0
31595: GREATER
31596: OR
31597: IFTRUE 31635
31599: PUSH
31600: LD_VAR 0 12
31604: PUSH
31605: LD_VAR 0 7
31609: ARRAY
31610: PUSH
31611: LD_INT 1
31613: ARRAY
31614: PPUSH
31615: LD_VAR 0 12
31619: PUSH
31620: LD_VAR 0 7
31624: ARRAY
31625: PUSH
31626: LD_INT 2
31628: ARRAY
31629: PPUSH
31630: CALL_OW 351
31634: OR
31635: IFFALSE 31641
// exit ;
31637: POP
31638: POP
31639: GO 31945
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31641: LD_ADDR_VAR 0 8
31645: PUSH
31646: LD_VAR 0 12
31650: PUSH
31651: LD_VAR 0 7
31655: ARRAY
31656: PUSH
31657: LD_INT 1
31659: ARRAY
31660: PPUSH
31661: LD_VAR 0 12
31665: PUSH
31666: LD_VAR 0 7
31670: ARRAY
31671: PUSH
31672: LD_INT 2
31674: ARRAY
31675: PPUSH
31676: CALL_OW 546
31680: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31681: LD_VAR 0 8
31685: PUSH
31686: LD_INT 1
31688: ARRAY
31689: IFTRUE 31711
31691: PUSH
31692: LD_VAR 0 8
31696: PUSH
31697: LD_INT 2
31699: ARRAY
31700: PUSH
31701: LD_VAR 0 13
31705: PUSH
31706: LD_INT 2
31708: PLUS
31709: GREATER
31710: OR
31711: IFTRUE 31733
31713: PUSH
31714: LD_VAR 0 8
31718: PUSH
31719: LD_INT 2
31721: ARRAY
31722: PUSH
31723: LD_VAR 0 13
31727: PUSH
31728: LD_INT 2
31730: MINUS
31731: LESS
31732: OR
31733: IFTRUE 31801
31735: PUSH
31736: LD_VAR 0 8
31740: PUSH
31741: LD_INT 3
31743: ARRAY
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 8
31750: PUSH
31751: LD_INT 9
31753: PUSH
31754: LD_INT 10
31756: PUSH
31757: LD_INT 11
31759: PUSH
31760: LD_INT 12
31762: PUSH
31763: LD_INT 13
31765: PUSH
31766: LD_INT 16
31768: PUSH
31769: LD_INT 17
31771: PUSH
31772: LD_INT 18
31774: PUSH
31775: LD_INT 19
31777: PUSH
31778: LD_INT 20
31780: PUSH
31781: LD_INT 21
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: IN
31799: NOT
31800: OR
31801: IFTRUE 31814
31803: PUSH
31804: LD_VAR 0 8
31808: PUSH
31809: LD_INT 5
31811: ARRAY
31812: NOT
31813: OR
31814: IFTRUE 31854
31816: PUSH
31817: LD_VAR 0 8
31821: PUSH
31822: LD_INT 6
31824: ARRAY
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 7
31834: PUSH
31835: LD_INT 9
31837: PUSH
31838: LD_INT 10
31840: PUSH
31841: LD_INT 11
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: IN
31852: NOT
31853: OR
31854: IFFALSE 31860
// exit ;
31856: POP
31857: POP
31858: GO 31945
// end ;
31860: GO 31517
31862: POP
31863: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31864: LD_VAR 0 9
31868: PPUSH
31869: LD_VAR 0 3
31873: PPUSH
31874: LD_VAR 0 4
31878: PPUSH
31879: LD_INT 20
31881: PPUSH
31882: CALL 23764 0 4
31886: PUSH
31887: LD_INT 4
31889: ARRAY
31890: IFFALSE 31894
// exit ;
31892: GO 31945
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31894: LD_VAR 0 2
31898: PUSH
31899: LD_INT 29
31901: PUSH
31902: LD_INT 30
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: IN
31909: IFFALSE 31933
31911: PUSH
31912: LD_VAR 0 3
31916: PPUSH
31917: LD_VAR 0 4
31921: PPUSH
31922: LD_VAR 0 9
31926: PPUSH
31927: CALL_OW 440
31931: NOT
31932: AND
31933: IFFALSE 31937
// exit ;
31935: GO 31945
// result := true ;
31937: LD_ADDR_VAR 0 6
31941: PUSH
31942: LD_INT 1
31944: ST_TO_ADDR
// end ;
31945: LD_VAR 0 6
31949: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
31974: PPUSH
31975: PPUSH
31976: PPUSH
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
// result = [ ] ;
32010: LD_ADDR_VAR 0 7
32014: PUSH
32015: EMPTY
32016: ST_TO_ADDR
// temp_list = [ ] ;
32017: LD_ADDR_VAR 0 9
32021: PUSH
32022: EMPTY
32023: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32024: LD_VAR 0 4
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: LD_INT 5
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: IN
32055: NOT
32056: IFTRUE 32099
32058: PUSH
32059: LD_VAR 0 1
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: IN
32074: IFFALSE 32098
32076: PUSH
32077: LD_VAR 0 5
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 3
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: IN
32096: NOT
32097: AND
32098: OR
32099: IFFALSE 32103
// exit ;
32101: GO 50502
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32103: LD_VAR 0 1
32107: PUSH
32108: LD_INT 6
32110: PUSH
32111: LD_INT 7
32113: PUSH
32114: LD_INT 8
32116: PUSH
32117: LD_INT 13
32119: PUSH
32120: LD_INT 12
32122: PUSH
32123: LD_INT 15
32125: PUSH
32126: LD_INT 11
32128: PUSH
32129: LD_INT 14
32131: PUSH
32132: LD_INT 10
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: IN
32146: IFFALSE 32156
// btype = b_lab ;
32148: LD_ADDR_VAR 0 1
32152: PUSH
32153: LD_INT 6
32155: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32156: LD_VAR 0 6
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: IN
32175: NOT
32176: IFTRUE 32244
32178: PUSH
32179: LD_VAR 0 1
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: LD_INT 6
32198: PUSH
32199: LD_INT 36
32201: PUSH
32202: LD_INT 4
32204: PUSH
32205: LD_INT 5
32207: PUSH
32208: LD_INT 31
32210: PUSH
32211: LD_INT 32
32213: PUSH
32214: LD_INT 33
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: IN
32230: NOT
32231: IFFALSE 32243
32233: PUSH
32234: LD_VAR 0 6
32238: PUSH
32239: LD_INT 1
32241: EQUAL
32242: AND
32243: OR
32244: IFTRUE 32276
32246: PUSH
32247: LD_VAR 0 1
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: IN
32262: NOT
32263: IFFALSE 32275
32265: PUSH
32266: LD_VAR 0 6
32270: PUSH
32271: LD_INT 2
32273: EQUAL
32274: AND
32275: OR
32276: IFFALSE 32286
// mode = 0 ;
32278: LD_ADDR_VAR 0 6
32282: PUSH
32283: LD_INT 0
32285: ST_TO_ADDR
// case mode of 0 :
32286: LD_VAR 0 6
32290: PUSH
32291: LD_INT 0
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 43752
32299: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32300: LD_ADDR_VAR 0 11
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 2
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32493: LD_ADDR_VAR 0 12
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: NEG
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: NEG
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32689: LD_ADDR_VAR 0 13
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 2
32824: NEG
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: LD_INT 3
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 3
32848: NEG
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 3
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32888: LD_ADDR_VAR 0 14
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 2
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 3
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 3
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33084: LD_ADDR_VAR 0 15
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33277: LD_ADDR_VAR 0 16
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: LD_INT 3
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33470: LD_ADDR_VAR 0 17
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 2
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: NEG
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33700: LD_ADDR_VAR 0 18
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: LD_INT 2
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 2
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33930: LD_ADDR_VAR 0 19
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34160: LD_ADDR_VAR 0 20
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: NEG
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34390: LD_ADDR_VAR 0 21
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: LD_INT 2
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 2
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: NEG
34590: PUSH
34591: LD_INT 2
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34620: LD_ADDR_VAR 0 22
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34850: LD_ADDR_VAR 0 23
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 2
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 3
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35130: LD_ADDR_VAR 0 24
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 2
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 2
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: LD_INT 1
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: NEG
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35406: LD_ADDR_VAR 0 25
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 2
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 3
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35680: LD_ADDR_VAR 0 26
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 2
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: NEG
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 2
35867: NEG
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: LD_INT 2
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 3
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35956: LD_ADDR_VAR 0 27
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: LD_INT 2
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: NEG
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 3
36189: NEG
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 3
36201: NEG
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36236: LD_ADDR_VAR 0 28
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 3
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 3
36471: NEG
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 3
36483: NEG
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36518: LD_ADDR_VAR 0 29
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: LD_INT 3
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 3
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 3
36762: NEG
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36797: LD_ADDR_VAR 0 30
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 3
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 3
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 3
37040: NEG
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37075: LD_ADDR_VAR 0 31
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: LD_INT 2
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 3
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 3
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 3
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 3
37318: NEG
37319: PUSH
37320: LD_INT 2
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37353: LD_ADDR_VAR 0 32
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 3
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 3
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 2
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37631: LD_ADDR_VAR 0 33
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: LD_INT 3
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 3
37875: NEG
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37910: LD_ADDR_VAR 0 34
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: LD_INT 3
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 2
38144: NEG
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 3
38155: NEG
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38190: LD_ADDR_VAR 0 35
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38302: LD_ADDR_VAR 0 36
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38414: LD_ADDR_VAR 0 37
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38526: LD_ADDR_VAR 0 38
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38638: LD_ADDR_VAR 0 39
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38750: LD_ADDR_VAR 0 40
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38862: LD_ADDR_VAR 0 41
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: LD_INT 3
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 3
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: LD_INT 3
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 3
39147: NEG
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39212: LD_ADDR_VAR 0 42
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: LD_INT 2
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 3
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 3
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 3
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 3
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 3
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: LD_INT 3
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39562: LD_ADDR_VAR 0 43
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 3
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 3
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 3
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 3
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39910: LD_ADDR_VAR 0 44
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 3
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 3
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 3
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: NEG
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: NEG
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40260: LD_ADDR_VAR 0 45
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: LD_INT 3
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 3
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 3
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 3
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: NEG
40570: PUSH
40571: LD_INT 3
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40610: LD_ADDR_VAR 0 46
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 3
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 3
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 3
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 3
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 3
40906: NEG
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 3
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40958: LD_ADDR_VAR 0 47
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41109: LD_ADDR_VAR 0 48
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41256: LD_ADDR_VAR 0 49
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41400: LD_ADDR_VAR 0 50
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41544: LD_ADDR_VAR 0 51
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41691: LD_ADDR_VAR 0 52
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: LD_INT 2
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41842: LD_ADDR_VAR 0 53
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42072: LD_ADDR_VAR 0 54
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 2
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 2
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42302: LD_ADDR_VAR 0 55
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42532: LD_ADDR_VAR 0 56
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42762: LD_ADDR_VAR 0 57
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42992: LD_ADDR_VAR 0 58
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43222: LD_ADDR_VAR 0 59
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43310: LD_ADDR_VAR 0 60
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43398: LD_ADDR_VAR 0 61
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43486: LD_ADDR_VAR 0 62
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43574: LD_ADDR_VAR 0 63
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43662: LD_ADDR_VAR 0 64
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// end ; 1 :
43750: GO 49647
43752: LD_INT 1
43754: DOUBLE
43755: EQUAL
43756: IFTRUE 43760
43758: GO 46383
43760: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43761: LD_ADDR_VAR 0 11
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43805: LD_ADDR_VAR 0 12
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43846: LD_ADDR_VAR 0 13
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43886: LD_ADDR_VAR 0 14
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43927: LD_ADDR_VAR 0 15
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43971: LD_ADDR_VAR 0 16
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 3
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44017: LD_ADDR_VAR 0 17
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 3
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 3
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44061: LD_ADDR_VAR 0 18
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44102: LD_ADDR_VAR 0 19
44106: PUSH
44107: LD_INT 3
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44142: LD_ADDR_VAR 0 20
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44183: LD_ADDR_VAR 0 21
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44227: LD_ADDR_VAR 0 22
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: LD_INT 3
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 3
44258: NEG
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44273: LD_ADDR_VAR 0 23
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 3
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 4
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 3
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44317: LD_ADDR_VAR 0 24
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 4
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44358: LD_ADDR_VAR 0 25
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 4
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 4
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44398: LD_ADDR_VAR 0 26
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 4
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44439: LD_ADDR_VAR 0 27
44443: PUSH
44444: LD_INT 3
44446: NEG
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 4
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44483: LD_ADDR_VAR 0 28
44487: PUSH
44488: LD_INT 3
44490: NEG
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: LD_INT 4
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 4
44514: NEG
44515: PUSH
44516: LD_INT 3
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44529: LD_ADDR_VAR 0 29
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 3
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 3
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 4
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 4
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 3
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 5
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 5
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 4
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 6
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 6
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 5
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44684: LD_ADDR_VAR 0 30
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 3
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 4
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 5
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 5
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 5
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 6
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 6
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44827: LD_ADDR_VAR 0 31
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 4
44864: PUSH
44865: LD_INT 3
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: LD_INT 4
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: LD_INT 4
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 5
44894: PUSH
44895: LD_INT 4
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 5
44904: PUSH
44905: LD_INT 5
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 6
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 6
44934: PUSH
44935: LD_INT 6
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: LD_INT 6
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44966: LD_ADDR_VAR 0 32
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 4
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 4
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 5
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 5
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 4
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 6
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 6
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 5
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45109: LD_ADDR_VAR 0 33
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 3
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 4
45161: NEG
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 4
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 4
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 5
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 5
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 5
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 6
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 6
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45264: LD_ADDR_VAR 0 34
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: LD_INT 3
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 3
45283: NEG
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: NEG
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: LD_INT 4
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 4
45319: NEG
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 4
45331: NEG
45332: PUSH
45333: LD_INT 4
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 4
45343: NEG
45344: PUSH
45345: LD_INT 5
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 5
45355: NEG
45356: PUSH
45357: LD_INT 4
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 5
45367: NEG
45368: PUSH
45369: LD_INT 5
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 5
45379: NEG
45380: PUSH
45381: LD_INT 6
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 6
45391: NEG
45392: PUSH
45393: LD_INT 5
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 6
45403: NEG
45404: PUSH
45405: LD_INT 6
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45427: LD_ADDR_VAR 0 41
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45471: LD_ADDR_VAR 0 42
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45512: LD_ADDR_VAR 0 43
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 3
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45552: LD_ADDR_VAR 0 44
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45593: LD_ADDR_VAR 0 45
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45637: LD_ADDR_VAR 0 46
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45683: LD_ADDR_VAR 0 47
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45716: LD_ADDR_VAR 0 48
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45747: LD_ADDR_VAR 0 49
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45776: LD_ADDR_VAR 0 50
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45805: LD_ADDR_VAR 0 51
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45836: LD_ADDR_VAR 0 52
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45869: LD_ADDR_VAR 0 53
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45913: LD_ADDR_VAR 0 54
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45954: LD_ADDR_VAR 0 55
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45994: LD_ADDR_VAR 0 56
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: LIST
46034: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46035: LD_ADDR_VAR 0 57
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46079: LD_ADDR_VAR 0 58
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46125: LD_ADDR_VAR 0 59
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46169: LD_ADDR_VAR 0 60
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46210: LD_ADDR_VAR 0 61
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46250: LD_ADDR_VAR 0 62
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46291: LD_ADDR_VAR 0 63
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46335: LD_ADDR_VAR 0 64
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: ST_TO_ADDR
// end ; 2 :
46381: GO 49647
46383: LD_INT 2
46385: DOUBLE
46386: EQUAL
46387: IFTRUE 46391
46389: GO 49646
46391: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46392: LD_ADDR_VAR 0 29
46396: PUSH
46397: LD_INT 4
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 5
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 5
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 4
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 5
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 4
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 4
46522: PUSH
46523: LD_INT 4
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: PUSH
46533: LD_INT 4
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 3
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 4
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 4
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 4
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 4
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 5
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 4
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 5
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: NEG
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 4
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 4
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 4
46777: NEG
46778: PUSH
46779: LD_INT 4
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 4
46789: NEG
46790: PUSH
46791: LD_INT 5
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: NEG
46802: PUSH
46803: LD_INT 4
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: NEG
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 5
46837: NEG
46838: PUSH
46839: LD_INT 4
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 5
46849: NEG
46850: PUSH
46851: LD_INT 5
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: LD_INT 5
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 5
46873: NEG
46874: PUSH
46875: LD_INT 3
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46930: LD_ADDR_VAR 0 30
46934: PUSH
46935: LD_INT 4
46937: PUSH
46938: LD_INT 4
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 4
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 5
46957: PUSH
46958: LD_INT 4
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 5
46967: PUSH
46968: LD_INT 5
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 4
46977: PUSH
46978: LD_INT 5
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 4
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 5
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: LD_INT 5
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 4
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 4
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 4
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 4
47120: NEG
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 4
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 5
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 5
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 5
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 4
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: NEG
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 4
47282: NEG
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 4
47294: NEG
47295: PUSH
47296: LD_INT 4
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 4
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 4
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 4
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 5
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 4
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 5
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 5
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47477: LD_ADDR_VAR 0 31
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 4
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 5
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 5
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 3
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 4
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 4
47656: NEG
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 4
47679: NEG
47680: PUSH
47681: LD_INT 4
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 4
47691: NEG
47692: PUSH
47693: LD_INT 5
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: NEG
47704: PUSH
47705: LD_INT 4
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: LD_INT 3
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 4
47727: NEG
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 5
47739: NEG
47740: PUSH
47741: LD_INT 4
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 5
47751: NEG
47752: PUSH
47753: LD_INT 5
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: LD_INT 5
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 5
47775: NEG
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 4
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 4
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 4
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 4
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 4
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 5
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 5
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 4
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 5
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48027: LD_ADDR_VAR 0 32
48031: PUSH
48032: LD_INT 4
48034: NEG
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 4
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 4
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 5
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 5
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 5
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: LD_INT 3
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: NEG
48149: PUSH
48150: LD_INT 4
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: NEG
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 4
48196: NEG
48197: PUSH
48198: LD_INT 3
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 4
48208: NEG
48209: PUSH
48210: LD_INT 4
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: LD_INT 4
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 4
48232: NEG
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 4
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 5
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 4
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 5
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 5
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 4
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: LD_INT 4
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 4
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 5
48459: PUSH
48460: LD_INT 4
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 5
48469: PUSH
48470: LD_INT 5
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 4
48479: PUSH
48480: LD_INT 5
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: LD_INT 4
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 3
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 5
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 5
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48574: LD_ADDR_VAR 0 33
48578: PUSH
48579: LD_INT 4
48581: NEG
48582: PUSH
48583: LD_INT 4
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: LD_INT 5
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 4
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 4
48629: NEG
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 5
48641: NEG
48642: PUSH
48643: LD_INT 4
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 5
48653: NEG
48654: PUSH
48655: LD_INT 5
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: LD_INT 5
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 5
48677: NEG
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 3
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 4
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 4
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 4
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 4
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 4
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 5
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 5
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 4
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 5
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 3
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 4
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 4
48914: PUSH
48915: LD_INT 4
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 4
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 4
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 4
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 4
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 4
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 5
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 5
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 5
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49112: LD_ADDR_VAR 0 34
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 4
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 5
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 4
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 4
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 5
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 3
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 5
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 4
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 4
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 4
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 4
49314: PUSH
49315: LD_INT 4
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 4
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 5
49334: PUSH
49335: LD_INT 4
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 5
49344: PUSH
49345: LD_INT 5
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 4
49354: PUSH
49355: LD_INT 5
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: LD_INT 4
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 5
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: LD_INT 5
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 3
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 3
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 4
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 4
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 4
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 4
49497: NEG
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 4
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 4
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 5
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 5
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 5
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: ST_TO_ADDR
// end ; end ;
49644: GO 49647
49646: POP
// case btype of b_depot , b_warehouse :
49647: LD_VAR 0 1
49651: PUSH
49652: LD_INT 0
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49666
49658: LD_INT 1
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49666
49664: GO 49867
49666: POP
// case nation of nation_american :
49667: LD_VAR 0 5
49671: PUSH
49672: LD_INT 1
49674: DOUBLE
49675: EQUAL
49676: IFTRUE 49680
49678: GO 49736
49680: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49681: LD_ADDR_VAR 0 9
49685: PUSH
49686: LD_VAR 0 11
49690: PUSH
49691: LD_VAR 0 12
49695: PUSH
49696: LD_VAR 0 13
49700: PUSH
49701: LD_VAR 0 14
49705: PUSH
49706: LD_VAR 0 15
49710: PUSH
49711: LD_VAR 0 16
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: PUSH
49724: LD_VAR 0 4
49728: PUSH
49729: LD_INT 1
49731: PLUS
49732: ARRAY
49733: ST_TO_ADDR
49734: GO 49865
49736: LD_INT 2
49738: DOUBLE
49739: EQUAL
49740: IFTRUE 49744
49742: GO 49800
49744: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49745: LD_ADDR_VAR 0 9
49749: PUSH
49750: LD_VAR 0 17
49754: PUSH
49755: LD_VAR 0 18
49759: PUSH
49760: LD_VAR 0 19
49764: PUSH
49765: LD_VAR 0 20
49769: PUSH
49770: LD_VAR 0 21
49774: PUSH
49775: LD_VAR 0 22
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: PUSH
49788: LD_VAR 0 4
49792: PUSH
49793: LD_INT 1
49795: PLUS
49796: ARRAY
49797: ST_TO_ADDR
49798: GO 49865
49800: LD_INT 3
49802: DOUBLE
49803: EQUAL
49804: IFTRUE 49808
49806: GO 49864
49808: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49809: LD_ADDR_VAR 0 9
49813: PUSH
49814: LD_VAR 0 23
49818: PUSH
49819: LD_VAR 0 24
49823: PUSH
49824: LD_VAR 0 25
49828: PUSH
49829: LD_VAR 0 26
49833: PUSH
49834: LD_VAR 0 27
49838: PUSH
49839: LD_VAR 0 28
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: PUSH
49852: LD_VAR 0 4
49856: PUSH
49857: LD_INT 1
49859: PLUS
49860: ARRAY
49861: ST_TO_ADDR
49862: GO 49865
49864: POP
49865: GO 50420
49867: LD_INT 2
49869: DOUBLE
49870: EQUAL
49871: IFTRUE 49881
49873: LD_INT 3
49875: DOUBLE
49876: EQUAL
49877: IFTRUE 49881
49879: GO 49937
49881: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49882: LD_ADDR_VAR 0 9
49886: PUSH
49887: LD_VAR 0 29
49891: PUSH
49892: LD_VAR 0 30
49896: PUSH
49897: LD_VAR 0 31
49901: PUSH
49902: LD_VAR 0 32
49906: PUSH
49907: LD_VAR 0 33
49911: PUSH
49912: LD_VAR 0 34
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: PUSH
49925: LD_VAR 0 4
49929: PUSH
49930: LD_INT 1
49932: PLUS
49933: ARRAY
49934: ST_TO_ADDR
49935: GO 50420
49937: LD_INT 16
49939: DOUBLE
49940: EQUAL
49941: IFTRUE 49999
49943: LD_INT 17
49945: DOUBLE
49946: EQUAL
49947: IFTRUE 49999
49949: LD_INT 18
49951: DOUBLE
49952: EQUAL
49953: IFTRUE 49999
49955: LD_INT 19
49957: DOUBLE
49958: EQUAL
49959: IFTRUE 49999
49961: LD_INT 22
49963: DOUBLE
49964: EQUAL
49965: IFTRUE 49999
49967: LD_INT 20
49969: DOUBLE
49970: EQUAL
49971: IFTRUE 49999
49973: LD_INT 21
49975: DOUBLE
49976: EQUAL
49977: IFTRUE 49999
49979: LD_INT 23
49981: DOUBLE
49982: EQUAL
49983: IFTRUE 49999
49985: LD_INT 24
49987: DOUBLE
49988: EQUAL
49989: IFTRUE 49999
49991: LD_INT 25
49993: DOUBLE
49994: EQUAL
49995: IFTRUE 49999
49997: GO 50055
49999: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50000: LD_ADDR_VAR 0 9
50004: PUSH
50005: LD_VAR 0 35
50009: PUSH
50010: LD_VAR 0 36
50014: PUSH
50015: LD_VAR 0 37
50019: PUSH
50020: LD_VAR 0 38
50024: PUSH
50025: LD_VAR 0 39
50029: PUSH
50030: LD_VAR 0 40
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: PUSH
50043: LD_VAR 0 4
50047: PUSH
50048: LD_INT 1
50050: PLUS
50051: ARRAY
50052: ST_TO_ADDR
50053: GO 50420
50055: LD_INT 6
50057: DOUBLE
50058: EQUAL
50059: IFTRUE 50111
50061: LD_INT 7
50063: DOUBLE
50064: EQUAL
50065: IFTRUE 50111
50067: LD_INT 8
50069: DOUBLE
50070: EQUAL
50071: IFTRUE 50111
50073: LD_INT 13
50075: DOUBLE
50076: EQUAL
50077: IFTRUE 50111
50079: LD_INT 12
50081: DOUBLE
50082: EQUAL
50083: IFTRUE 50111
50085: LD_INT 15
50087: DOUBLE
50088: EQUAL
50089: IFTRUE 50111
50091: LD_INT 11
50093: DOUBLE
50094: EQUAL
50095: IFTRUE 50111
50097: LD_INT 14
50099: DOUBLE
50100: EQUAL
50101: IFTRUE 50111
50103: LD_INT 10
50105: DOUBLE
50106: EQUAL
50107: IFTRUE 50111
50109: GO 50167
50111: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50112: LD_ADDR_VAR 0 9
50116: PUSH
50117: LD_VAR 0 41
50121: PUSH
50122: LD_VAR 0 42
50126: PUSH
50127: LD_VAR 0 43
50131: PUSH
50132: LD_VAR 0 44
50136: PUSH
50137: LD_VAR 0 45
50141: PUSH
50142: LD_VAR 0 46
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: PUSH
50155: LD_VAR 0 4
50159: PUSH
50160: LD_INT 1
50162: PLUS
50163: ARRAY
50164: ST_TO_ADDR
50165: GO 50420
50167: LD_INT 36
50169: DOUBLE
50170: EQUAL
50171: IFTRUE 50175
50173: GO 50231
50175: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50176: LD_ADDR_VAR 0 9
50180: PUSH
50181: LD_VAR 0 47
50185: PUSH
50186: LD_VAR 0 48
50190: PUSH
50191: LD_VAR 0 49
50195: PUSH
50196: LD_VAR 0 50
50200: PUSH
50201: LD_VAR 0 51
50205: PUSH
50206: LD_VAR 0 52
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: PUSH
50219: LD_VAR 0 4
50223: PUSH
50224: LD_INT 1
50226: PLUS
50227: ARRAY
50228: ST_TO_ADDR
50229: GO 50420
50231: LD_INT 4
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50257
50237: LD_INT 5
50239: DOUBLE
50240: EQUAL
50241: IFTRUE 50257
50243: LD_INT 34
50245: DOUBLE
50246: EQUAL
50247: IFTRUE 50257
50249: LD_INT 37
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50257
50255: GO 50313
50257: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50258: LD_ADDR_VAR 0 9
50262: PUSH
50263: LD_VAR 0 53
50267: PUSH
50268: LD_VAR 0 54
50272: PUSH
50273: LD_VAR 0 55
50277: PUSH
50278: LD_VAR 0 56
50282: PUSH
50283: LD_VAR 0 57
50287: PUSH
50288: LD_VAR 0 58
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: PUSH
50301: LD_VAR 0 4
50305: PUSH
50306: LD_INT 1
50308: PLUS
50309: ARRAY
50310: ST_TO_ADDR
50311: GO 50420
50313: LD_INT 31
50315: DOUBLE
50316: EQUAL
50317: IFTRUE 50363
50319: LD_INT 32
50321: DOUBLE
50322: EQUAL
50323: IFTRUE 50363
50325: LD_INT 33
50327: DOUBLE
50328: EQUAL
50329: IFTRUE 50363
50331: LD_INT 27
50333: DOUBLE
50334: EQUAL
50335: IFTRUE 50363
50337: LD_INT 26
50339: DOUBLE
50340: EQUAL
50341: IFTRUE 50363
50343: LD_INT 28
50345: DOUBLE
50346: EQUAL
50347: IFTRUE 50363
50349: LD_INT 29
50351: DOUBLE
50352: EQUAL
50353: IFTRUE 50363
50355: LD_INT 30
50357: DOUBLE
50358: EQUAL
50359: IFTRUE 50363
50361: GO 50419
50363: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50364: LD_ADDR_VAR 0 9
50368: PUSH
50369: LD_VAR 0 59
50373: PUSH
50374: LD_VAR 0 60
50378: PUSH
50379: LD_VAR 0 61
50383: PUSH
50384: LD_VAR 0 62
50388: PUSH
50389: LD_VAR 0 63
50393: PUSH
50394: LD_VAR 0 64
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: PUSH
50407: LD_VAR 0 4
50411: PUSH
50412: LD_INT 1
50414: PLUS
50415: ARRAY
50416: ST_TO_ADDR
50417: GO 50420
50419: POP
// temp_list2 = [ ] ;
50420: LD_ADDR_VAR 0 10
50424: PUSH
50425: EMPTY
50426: ST_TO_ADDR
// for i in temp_list do
50427: LD_ADDR_VAR 0 8
50431: PUSH
50432: LD_VAR 0 9
50436: PUSH
50437: FOR_IN
50438: IFFALSE 50490
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50440: LD_ADDR_VAR 0 10
50444: PUSH
50445: LD_VAR 0 10
50449: PUSH
50450: LD_VAR 0 8
50454: PUSH
50455: LD_INT 1
50457: ARRAY
50458: PUSH
50459: LD_VAR 0 2
50463: PLUS
50464: PUSH
50465: LD_VAR 0 8
50469: PUSH
50470: LD_INT 2
50472: ARRAY
50473: PUSH
50474: LD_VAR 0 3
50478: PLUS
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: EMPTY
50485: LIST
50486: ADD
50487: ST_TO_ADDR
50488: GO 50437
50490: POP
50491: POP
// result = temp_list2 ;
50492: LD_ADDR_VAR 0 7
50496: PUSH
50497: LD_VAR 0 10
50501: ST_TO_ADDR
// end ;
50502: LD_VAR 0 7
50506: RET
// export function EnemyInRange ( unit , dist ) ; begin
50507: LD_INT 0
50509: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50510: LD_ADDR_VAR 0 3
50514: PUSH
50515: LD_VAR 0 1
50519: PPUSH
50520: CALL_OW 255
50524: PPUSH
50525: LD_VAR 0 1
50529: PPUSH
50530: CALL_OW 250
50534: PPUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 251
50544: PPUSH
50545: LD_VAR 0 2
50549: PPUSH
50550: CALL 23764 0 4
50554: PUSH
50555: LD_INT 4
50557: ARRAY
50558: ST_TO_ADDR
// end ;
50559: LD_VAR 0 3
50563: RET
// export function PlayerSeeMe ( unit ) ; begin
50564: LD_INT 0
50566: PPUSH
// result := See ( your_side , unit ) ;
50567: LD_ADDR_VAR 0 2
50571: PUSH
50572: LD_OWVAR 2
50576: PPUSH
50577: LD_VAR 0 1
50581: PPUSH
50582: CALL_OW 292
50586: ST_TO_ADDR
// end ;
50587: LD_VAR 0 2
50591: RET
// export function ReverseDir ( unit ) ; begin
50592: LD_INT 0
50594: PPUSH
// if not unit then
50595: LD_VAR 0 1
50599: NOT
50600: IFFALSE 50604
// exit ;
50602: GO 50627
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50604: LD_ADDR_VAR 0 2
50608: PUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: CALL_OW 254
50618: PUSH
50619: LD_INT 3
50621: PLUS
50622: PUSH
50623: LD_INT 6
50625: MOD
50626: ST_TO_ADDR
// end ;
50627: LD_VAR 0 2
50631: RET
// export function ReverseArray ( array ) ; var i ; begin
50632: LD_INT 0
50634: PPUSH
50635: PPUSH
// if not array then
50636: LD_VAR 0 1
50640: NOT
50641: IFFALSE 50645
// exit ;
50643: GO 50700
// result := [ ] ;
50645: LD_ADDR_VAR 0 2
50649: PUSH
50650: EMPTY
50651: ST_TO_ADDR
// for i := array downto 1 do
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: DOUBLE
50658: LD_VAR 0 1
50662: INC
50663: ST_TO_ADDR
50664: LD_INT 1
50666: PUSH
50667: FOR_DOWNTO
50668: IFFALSE 50698
// result := Join ( result , array [ i ] ) ;
50670: LD_ADDR_VAR 0 2
50674: PUSH
50675: LD_VAR 0 2
50679: PPUSH
50680: LD_VAR 0 1
50684: PUSH
50685: LD_VAR 0 3
50689: ARRAY
50690: PPUSH
50691: CALL 55552 0 2
50695: ST_TO_ADDR
50696: GO 50667
50698: POP
50699: POP
// end ;
50700: LD_VAR 0 2
50704: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50705: LD_INT 0
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
// if not unit or not hexes then
50713: LD_VAR 0 1
50717: NOT
50718: IFTRUE 50727
50720: PUSH
50721: LD_VAR 0 2
50725: NOT
50726: OR
50727: IFFALSE 50731
// exit ;
50729: GO 50854
// dist := 9999 ;
50731: LD_ADDR_VAR 0 5
50735: PUSH
50736: LD_INT 9999
50738: ST_TO_ADDR
// for i = 1 to hexes do
50739: LD_ADDR_VAR 0 4
50743: PUSH
50744: DOUBLE
50745: LD_INT 1
50747: DEC
50748: ST_TO_ADDR
50749: LD_VAR 0 2
50753: PUSH
50754: FOR_TO
50755: IFFALSE 50842
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50757: LD_ADDR_VAR 0 6
50761: PUSH
50762: LD_VAR 0 1
50766: PPUSH
50767: LD_VAR 0 2
50771: PUSH
50772: LD_VAR 0 4
50776: ARRAY
50777: PUSH
50778: LD_INT 1
50780: ARRAY
50781: PPUSH
50782: LD_VAR 0 2
50786: PUSH
50787: LD_VAR 0 4
50791: ARRAY
50792: PUSH
50793: LD_INT 2
50795: ARRAY
50796: PPUSH
50797: CALL_OW 297
50801: ST_TO_ADDR
// if tdist < dist then
50802: LD_VAR 0 6
50806: PUSH
50807: LD_VAR 0 5
50811: LESS
50812: IFFALSE 50840
// begin hex := hexes [ i ] ;
50814: LD_ADDR_VAR 0 8
50818: PUSH
50819: LD_VAR 0 2
50823: PUSH
50824: LD_VAR 0 4
50828: ARRAY
50829: ST_TO_ADDR
// dist := tdist ;
50830: LD_ADDR_VAR 0 5
50834: PUSH
50835: LD_VAR 0 6
50839: ST_TO_ADDR
// end ; end ;
50840: GO 50754
50842: POP
50843: POP
// result := hex ;
50844: LD_ADDR_VAR 0 3
50848: PUSH
50849: LD_VAR 0 8
50853: ST_TO_ADDR
// end ;
50854: LD_VAR 0 3
50858: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50859: LD_INT 0
50861: PPUSH
50862: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50863: LD_VAR 0 1
50867: NOT
50868: IFTRUE 50907
50870: PUSH
50871: LD_VAR 0 1
50875: PUSH
50876: LD_INT 21
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 23
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PPUSH
50900: CALL_OW 69
50904: IN
50905: NOT
50906: OR
50907: IFFALSE 50911
// exit ;
50909: GO 50958
// for i = 1 to 3 do
50911: LD_ADDR_VAR 0 3
50915: PUSH
50916: DOUBLE
50917: LD_INT 1
50919: DEC
50920: ST_TO_ADDR
50921: LD_INT 3
50923: PUSH
50924: FOR_TO
50925: IFFALSE 50956
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50927: LD_VAR 0 1
50931: PPUSH
50932: CALL_OW 250
50936: PPUSH
50937: LD_VAR 0 1
50941: PPUSH
50942: CALL_OW 251
50946: PPUSH
50947: LD_INT 1
50949: PPUSH
50950: CALL_OW 453
50954: GO 50924
50956: POP
50957: POP
// end ;
50958: LD_VAR 0 2
50962: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50963: LD_INT 0
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
// if not unit or not enemy_unit then
50971: LD_VAR 0 1
50975: NOT
50976: IFTRUE 50985
50978: PUSH
50979: LD_VAR 0 2
50983: NOT
50984: OR
50985: IFFALSE 50989
// exit ;
50987: GO 51470
// if GetLives ( i ) < 250 then
50989: LD_VAR 0 4
50993: PPUSH
50994: CALL_OW 256
50998: PUSH
50999: LD_INT 250
51001: LESS
51002: IFFALSE 51015
// begin ComAutodestruct ( i ) ;
51004: LD_VAR 0 4
51008: PPUSH
51009: CALL 50859 0 1
// exit ;
51013: GO 51470
// end ; x := GetX ( enemy_unit ) ;
51015: LD_ADDR_VAR 0 7
51019: PUSH
51020: LD_VAR 0 2
51024: PPUSH
51025: CALL_OW 250
51029: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51030: LD_ADDR_VAR 0 8
51034: PUSH
51035: LD_VAR 0 2
51039: PPUSH
51040: CALL_OW 251
51044: ST_TO_ADDR
// if not x or not y then
51045: LD_VAR 0 7
51049: NOT
51050: IFTRUE 51059
51052: PUSH
51053: LD_VAR 0 8
51057: NOT
51058: OR
51059: IFFALSE 51063
// exit ;
51061: GO 51470
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51063: LD_ADDR_VAR 0 6
51067: PUSH
51068: LD_VAR 0 7
51072: PPUSH
51073: LD_INT 0
51075: PPUSH
51076: LD_INT 4
51078: PPUSH
51079: CALL_OW 272
51083: PUSH
51084: LD_VAR 0 8
51088: PPUSH
51089: LD_INT 0
51091: PPUSH
51092: LD_INT 4
51094: PPUSH
51095: CALL_OW 273
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_VAR 0 7
51108: PPUSH
51109: LD_INT 1
51111: PPUSH
51112: LD_INT 4
51114: PPUSH
51115: CALL_OW 272
51119: PUSH
51120: LD_VAR 0 8
51124: PPUSH
51125: LD_INT 1
51127: PPUSH
51128: LD_INT 4
51130: PPUSH
51131: CALL_OW 273
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_VAR 0 7
51144: PPUSH
51145: LD_INT 2
51147: PPUSH
51148: LD_INT 4
51150: PPUSH
51151: CALL_OW 272
51155: PUSH
51156: LD_VAR 0 8
51160: PPUSH
51161: LD_INT 2
51163: PPUSH
51164: LD_INT 4
51166: PPUSH
51167: CALL_OW 273
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_VAR 0 7
51180: PPUSH
51181: LD_INT 3
51183: PPUSH
51184: LD_INT 4
51186: PPUSH
51187: CALL_OW 272
51191: PUSH
51192: LD_VAR 0 8
51196: PPUSH
51197: LD_INT 3
51199: PPUSH
51200: LD_INT 4
51202: PPUSH
51203: CALL_OW 273
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_VAR 0 7
51216: PPUSH
51217: LD_INT 4
51219: PPUSH
51220: LD_INT 4
51222: PPUSH
51223: CALL_OW 272
51227: PUSH
51228: LD_VAR 0 8
51232: PPUSH
51233: LD_INT 4
51235: PPUSH
51236: LD_INT 4
51238: PPUSH
51239: CALL_OW 273
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_VAR 0 7
51252: PPUSH
51253: LD_INT 5
51255: PPUSH
51256: LD_INT 4
51258: PPUSH
51259: CALL_OW 272
51263: PUSH
51264: LD_VAR 0 8
51268: PPUSH
51269: LD_INT 5
51271: PPUSH
51272: LD_INT 4
51274: PPUSH
51275: CALL_OW 273
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// for i = tmp downto 1 do
51292: LD_ADDR_VAR 0 4
51296: PUSH
51297: DOUBLE
51298: LD_VAR 0 6
51302: INC
51303: ST_TO_ADDR
51304: LD_INT 1
51306: PUSH
51307: FOR_DOWNTO
51308: IFFALSE 51411
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51310: LD_VAR 0 6
51314: PUSH
51315: LD_VAR 0 4
51319: ARRAY
51320: PUSH
51321: LD_INT 1
51323: ARRAY
51324: PPUSH
51325: LD_VAR 0 6
51329: PUSH
51330: LD_VAR 0 4
51334: ARRAY
51335: PUSH
51336: LD_INT 2
51338: ARRAY
51339: PPUSH
51340: CALL_OW 488
51344: NOT
51345: IFTRUE 51387
51347: PUSH
51348: LD_VAR 0 6
51352: PUSH
51353: LD_VAR 0 4
51357: ARRAY
51358: PUSH
51359: LD_INT 1
51361: ARRAY
51362: PPUSH
51363: LD_VAR 0 6
51367: PUSH
51368: LD_VAR 0 4
51372: ARRAY
51373: PUSH
51374: LD_INT 2
51376: ARRAY
51377: PPUSH
51378: CALL_OW 428
51382: PUSH
51383: LD_INT 0
51385: NONEQUAL
51386: OR
51387: IFFALSE 51409
// tmp := Delete ( tmp , i ) ;
51389: LD_ADDR_VAR 0 6
51393: PUSH
51394: LD_VAR 0 6
51398: PPUSH
51399: LD_VAR 0 4
51403: PPUSH
51404: CALL_OW 3
51408: ST_TO_ADDR
51409: GO 51307
51411: POP
51412: POP
// j := GetClosestHex ( unit , tmp ) ;
51413: LD_ADDR_VAR 0 5
51417: PUSH
51418: LD_VAR 0 1
51422: PPUSH
51423: LD_VAR 0 6
51427: PPUSH
51428: CALL 50705 0 2
51432: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51433: LD_VAR 0 1
51437: PPUSH
51438: LD_VAR 0 5
51442: PUSH
51443: LD_INT 1
51445: ARRAY
51446: PPUSH
51447: LD_VAR 0 5
51451: PUSH
51452: LD_INT 2
51454: ARRAY
51455: PPUSH
51456: CALL_OW 111
// result := j ;
51460: LD_ADDR_VAR 0 3
51464: PUSH
51465: LD_VAR 0 5
51469: ST_TO_ADDR
// end ;
51470: LD_VAR 0 3
51474: RET
// export function PrepareApemanSoldier ( ) ; begin
51475: LD_INT 0
51477: PPUSH
// uc_nation := 0 ;
51478: LD_ADDR_OWVAR 21
51482: PUSH
51483: LD_INT 0
51485: ST_TO_ADDR
// hc_sex := sex_male ;
51486: LD_ADDR_OWVAR 27
51490: PUSH
51491: LD_INT 1
51493: ST_TO_ADDR
// hc_name :=  ;
51494: LD_ADDR_OWVAR 26
51498: PUSH
51499: LD_STRING 
51501: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51502: LD_ADDR_OWVAR 28
51506: PUSH
51507: LD_INT 15
51509: ST_TO_ADDR
// hc_gallery :=  ;
51510: LD_ADDR_OWVAR 33
51514: PUSH
51515: LD_STRING 
51517: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51518: LD_ADDR_OWVAR 31
51522: PUSH
51523: LD_INT 0
51525: PPUSH
51526: LD_INT 3
51528: PPUSH
51529: CALL_OW 12
51533: PUSH
51534: LD_INT 0
51536: PPUSH
51537: LD_INT 3
51539: PPUSH
51540: CALL_OW 12
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51557: LD_ADDR_OWVAR 29
51561: PUSH
51562: LD_INT 10
51564: PUSH
51565: LD_INT 12
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: ST_TO_ADDR
// end ;
51572: LD_VAR 0 1
51576: RET
// export function PrepareApemanEngineer ( ) ; begin
51577: LD_INT 0
51579: PPUSH
// uc_nation := 0 ;
51580: LD_ADDR_OWVAR 21
51584: PUSH
51585: LD_INT 0
51587: ST_TO_ADDR
// hc_sex := sex_male ;
51588: LD_ADDR_OWVAR 27
51592: PUSH
51593: LD_INT 1
51595: ST_TO_ADDR
// hc_name :=  ;
51596: LD_ADDR_OWVAR 26
51600: PUSH
51601: LD_STRING 
51603: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51604: LD_ADDR_OWVAR 28
51608: PUSH
51609: LD_INT 16
51611: ST_TO_ADDR
// hc_gallery :=  ;
51612: LD_ADDR_OWVAR 33
51616: PUSH
51617: LD_STRING 
51619: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51620: LD_ADDR_OWVAR 31
51624: PUSH
51625: LD_INT 0
51627: PPUSH
51628: LD_INT 3
51630: PPUSH
51631: CALL_OW 12
51635: PUSH
51636: LD_INT 0
51638: PPUSH
51639: LD_INT 3
51641: PPUSH
51642: CALL_OW 12
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51659: LD_ADDR_OWVAR 29
51663: PUSH
51664: LD_INT 10
51666: PUSH
51667: LD_INT 12
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: ST_TO_ADDR
// end ;
51674: LD_VAR 0 1
51678: RET
// export function PrepareApeman ( agressivity ) ; begin
51679: LD_INT 0
51681: PPUSH
// uc_side := 0 ;
51682: LD_ADDR_OWVAR 20
51686: PUSH
51687: LD_INT 0
51689: ST_TO_ADDR
// uc_nation := 0 ;
51690: LD_ADDR_OWVAR 21
51694: PUSH
51695: LD_INT 0
51697: ST_TO_ADDR
// hc_sex := sex_male ;
51698: LD_ADDR_OWVAR 27
51702: PUSH
51703: LD_INT 1
51705: ST_TO_ADDR
// hc_class := class_apeman ;
51706: LD_ADDR_OWVAR 28
51710: PUSH
51711: LD_INT 12
51713: ST_TO_ADDR
// hc_gallery :=  ;
51714: LD_ADDR_OWVAR 33
51718: PUSH
51719: LD_STRING 
51721: ST_TO_ADDR
// hc_name :=  ;
51722: LD_ADDR_OWVAR 26
51726: PUSH
51727: LD_STRING 
51729: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51730: LD_ADDR_OWVAR 29
51734: PUSH
51735: LD_INT 10
51737: PUSH
51738: LD_INT 12
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: ST_TO_ADDR
// if agressivity = 0 then
51745: LD_VAR 0 1
51749: PUSH
51750: LD_INT 0
51752: EQUAL
51753: IFFALSE 51765
// hc_agressivity := 0 else
51755: LD_ADDR_OWVAR 35
51759: PUSH
51760: LD_INT 0
51762: ST_TO_ADDR
51763: GO 51786
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51765: LD_ADDR_OWVAR 35
51769: PUSH
51770: LD_VAR 0 1
51774: NEG
51775: PPUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 12
51785: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51786: LD_ADDR_OWVAR 31
51790: PUSH
51791: LD_INT 0
51793: PPUSH
51794: LD_INT 3
51796: PPUSH
51797: CALL_OW 12
51801: PUSH
51802: LD_INT 0
51804: PPUSH
51805: LD_INT 3
51807: PPUSH
51808: CALL_OW 12
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: ST_TO_ADDR
// end ;
51825: LD_VAR 0 2
51829: RET
// export function PrepareTiger ( agressivity ) ; begin
51830: LD_INT 0
51832: PPUSH
// uc_side := 0 ;
51833: LD_ADDR_OWVAR 20
51837: PUSH
51838: LD_INT 0
51840: ST_TO_ADDR
// uc_nation := 0 ;
51841: LD_ADDR_OWVAR 21
51845: PUSH
51846: LD_INT 0
51848: ST_TO_ADDR
// InitHc ;
51849: CALL_OW 19
// hc_class := class_tiger ;
51853: LD_ADDR_OWVAR 28
51857: PUSH
51858: LD_INT 14
51860: ST_TO_ADDR
// hc_gallery :=  ;
51861: LD_ADDR_OWVAR 33
51865: PUSH
51866: LD_STRING 
51868: ST_TO_ADDR
// hc_name :=  ;
51869: LD_ADDR_OWVAR 26
51873: PUSH
51874: LD_STRING 
51876: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51877: LD_ADDR_OWVAR 35
51881: PUSH
51882: LD_VAR 0 1
51886: NEG
51887: PPUSH
51888: LD_VAR 0 1
51892: PPUSH
51893: CALL_OW 12
51897: ST_TO_ADDR
// end ;
51898: LD_VAR 0 2
51902: RET
// export function PrepareEnchidna ( ) ; begin
51903: LD_INT 0
51905: PPUSH
// uc_side := 0 ;
51906: LD_ADDR_OWVAR 20
51910: PUSH
51911: LD_INT 0
51913: ST_TO_ADDR
// uc_nation := 0 ;
51914: LD_ADDR_OWVAR 21
51918: PUSH
51919: LD_INT 0
51921: ST_TO_ADDR
// InitHc ;
51922: CALL_OW 19
// hc_class := class_baggie ;
51926: LD_ADDR_OWVAR 28
51930: PUSH
51931: LD_INT 13
51933: ST_TO_ADDR
// hc_gallery :=  ;
51934: LD_ADDR_OWVAR 33
51938: PUSH
51939: LD_STRING 
51941: ST_TO_ADDR
// hc_name :=  ;
51942: LD_ADDR_OWVAR 26
51946: PUSH
51947: LD_STRING 
51949: ST_TO_ADDR
// end ;
51950: LD_VAR 0 1
51954: RET
// export function PrepareFrog ( ) ; begin
51955: LD_INT 0
51957: PPUSH
// uc_side := 0 ;
51958: LD_ADDR_OWVAR 20
51962: PUSH
51963: LD_INT 0
51965: ST_TO_ADDR
// uc_nation := 0 ;
51966: LD_ADDR_OWVAR 21
51970: PUSH
51971: LD_INT 0
51973: ST_TO_ADDR
// InitHc ;
51974: CALL_OW 19
// hc_class := class_frog ;
51978: LD_ADDR_OWVAR 28
51982: PUSH
51983: LD_INT 19
51985: ST_TO_ADDR
// hc_gallery :=  ;
51986: LD_ADDR_OWVAR 33
51990: PUSH
51991: LD_STRING 
51993: ST_TO_ADDR
// hc_name :=  ;
51994: LD_ADDR_OWVAR 26
51998: PUSH
51999: LD_STRING 
52001: ST_TO_ADDR
// end ;
52002: LD_VAR 0 1
52006: RET
// export function PrepareFish ( ) ; begin
52007: LD_INT 0
52009: PPUSH
// uc_side := 0 ;
52010: LD_ADDR_OWVAR 20
52014: PUSH
52015: LD_INT 0
52017: ST_TO_ADDR
// uc_nation := 0 ;
52018: LD_ADDR_OWVAR 21
52022: PUSH
52023: LD_INT 0
52025: ST_TO_ADDR
// InitHc ;
52026: CALL_OW 19
// hc_class := class_fish ;
52030: LD_ADDR_OWVAR 28
52034: PUSH
52035: LD_INT 20
52037: ST_TO_ADDR
// hc_gallery :=  ;
52038: LD_ADDR_OWVAR 33
52042: PUSH
52043: LD_STRING 
52045: ST_TO_ADDR
// hc_name :=  ;
52046: LD_ADDR_OWVAR 26
52050: PUSH
52051: LD_STRING 
52053: ST_TO_ADDR
// end ;
52054: LD_VAR 0 1
52058: RET
// export function PrepareBird ( ) ; begin
52059: LD_INT 0
52061: PPUSH
// uc_side := 0 ;
52062: LD_ADDR_OWVAR 20
52066: PUSH
52067: LD_INT 0
52069: ST_TO_ADDR
// uc_nation := 0 ;
52070: LD_ADDR_OWVAR 21
52074: PUSH
52075: LD_INT 0
52077: ST_TO_ADDR
// InitHc ;
52078: CALL_OW 19
// hc_class := class_phororhacos ;
52082: LD_ADDR_OWVAR 28
52086: PUSH
52087: LD_INT 18
52089: ST_TO_ADDR
// hc_gallery :=  ;
52090: LD_ADDR_OWVAR 33
52094: PUSH
52095: LD_STRING 
52097: ST_TO_ADDR
// hc_name :=  ;
52098: LD_ADDR_OWVAR 26
52102: PUSH
52103: LD_STRING 
52105: ST_TO_ADDR
// end ;
52106: LD_VAR 0 1
52110: RET
// export function PrepareHorse ( ) ; begin
52111: LD_INT 0
52113: PPUSH
// uc_side := 0 ;
52114: LD_ADDR_OWVAR 20
52118: PUSH
52119: LD_INT 0
52121: ST_TO_ADDR
// uc_nation := 0 ;
52122: LD_ADDR_OWVAR 21
52126: PUSH
52127: LD_INT 0
52129: ST_TO_ADDR
// InitHc ;
52130: CALL_OW 19
// hc_class := class_horse ;
52134: LD_ADDR_OWVAR 28
52138: PUSH
52139: LD_INT 21
52141: ST_TO_ADDR
// hc_gallery :=  ;
52142: LD_ADDR_OWVAR 33
52146: PUSH
52147: LD_STRING 
52149: ST_TO_ADDR
// hc_name :=  ;
52150: LD_ADDR_OWVAR 26
52154: PUSH
52155: LD_STRING 
52157: ST_TO_ADDR
// end ;
52158: LD_VAR 0 1
52162: RET
// export function PrepareMastodont ( ) ; begin
52163: LD_INT 0
52165: PPUSH
// uc_side := 0 ;
52166: LD_ADDR_OWVAR 20
52170: PUSH
52171: LD_INT 0
52173: ST_TO_ADDR
// uc_nation := 0 ;
52174: LD_ADDR_OWVAR 21
52178: PUSH
52179: LD_INT 0
52181: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52182: LD_ADDR_OWVAR 37
52186: PUSH
52187: LD_INT 31
52189: ST_TO_ADDR
// vc_control := control_rider ;
52190: LD_ADDR_OWVAR 38
52194: PUSH
52195: LD_INT 4
52197: ST_TO_ADDR
// end ;
52198: LD_VAR 0 1
52202: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52203: LD_INT 0
52205: PPUSH
52206: PPUSH
52207: PPUSH
// uc_side = 0 ;
52208: LD_ADDR_OWVAR 20
52212: PUSH
52213: LD_INT 0
52215: ST_TO_ADDR
// uc_nation = 0 ;
52216: LD_ADDR_OWVAR 21
52220: PUSH
52221: LD_INT 0
52223: ST_TO_ADDR
// InitHc_All ( ) ;
52224: CALL_OW 584
// InitVc ;
52228: CALL_OW 20
// if mastodonts then
52232: LD_VAR 0 6
52236: IFFALSE 52303
// for i = 1 to mastodonts do
52238: LD_ADDR_VAR 0 11
52242: PUSH
52243: DOUBLE
52244: LD_INT 1
52246: DEC
52247: ST_TO_ADDR
52248: LD_VAR 0 6
52252: PUSH
52253: FOR_TO
52254: IFFALSE 52301
// begin vc_chassis := 31 ;
52256: LD_ADDR_OWVAR 37
52260: PUSH
52261: LD_INT 31
52263: ST_TO_ADDR
// vc_control := control_rider ;
52264: LD_ADDR_OWVAR 38
52268: PUSH
52269: LD_INT 4
52271: ST_TO_ADDR
// animal := CreateVehicle ;
52272: LD_ADDR_VAR 0 12
52276: PUSH
52277: CALL_OW 45
52281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52282: LD_VAR 0 12
52286: PPUSH
52287: LD_VAR 0 8
52291: PPUSH
52292: LD_INT 0
52294: PPUSH
52295: CALL 54445 0 3
// end ;
52299: GO 52253
52301: POP
52302: POP
// if horses then
52303: LD_VAR 0 5
52307: IFFALSE 52374
// for i = 1 to horses do
52309: LD_ADDR_VAR 0 11
52313: PUSH
52314: DOUBLE
52315: LD_INT 1
52317: DEC
52318: ST_TO_ADDR
52319: LD_VAR 0 5
52323: PUSH
52324: FOR_TO
52325: IFFALSE 52372
// begin hc_class := 21 ;
52327: LD_ADDR_OWVAR 28
52331: PUSH
52332: LD_INT 21
52334: ST_TO_ADDR
// hc_gallery :=  ;
52335: LD_ADDR_OWVAR 33
52339: PUSH
52340: LD_STRING 
52342: ST_TO_ADDR
// animal := CreateHuman ;
52343: LD_ADDR_VAR 0 12
52347: PUSH
52348: CALL_OW 44
52352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52353: LD_VAR 0 12
52357: PPUSH
52358: LD_VAR 0 8
52362: PPUSH
52363: LD_INT 0
52365: PPUSH
52366: CALL 54445 0 3
// end ;
52370: GO 52324
52372: POP
52373: POP
// if birds then
52374: LD_VAR 0 1
52378: IFFALSE 52445
// for i = 1 to birds do
52380: LD_ADDR_VAR 0 11
52384: PUSH
52385: DOUBLE
52386: LD_INT 1
52388: DEC
52389: ST_TO_ADDR
52390: LD_VAR 0 1
52394: PUSH
52395: FOR_TO
52396: IFFALSE 52443
// begin hc_class := 18 ;
52398: LD_ADDR_OWVAR 28
52402: PUSH
52403: LD_INT 18
52405: ST_TO_ADDR
// hc_gallery =  ;
52406: LD_ADDR_OWVAR 33
52410: PUSH
52411: LD_STRING 
52413: ST_TO_ADDR
// animal := CreateHuman ;
52414: LD_ADDR_VAR 0 12
52418: PUSH
52419: CALL_OW 44
52423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52424: LD_VAR 0 12
52428: PPUSH
52429: LD_VAR 0 8
52433: PPUSH
52434: LD_INT 0
52436: PPUSH
52437: CALL 54445 0 3
// end ;
52441: GO 52395
52443: POP
52444: POP
// if tigers then
52445: LD_VAR 0 2
52449: IFFALSE 52533
// for i = 1 to tigers do
52451: LD_ADDR_VAR 0 11
52455: PUSH
52456: DOUBLE
52457: LD_INT 1
52459: DEC
52460: ST_TO_ADDR
52461: LD_VAR 0 2
52465: PUSH
52466: FOR_TO
52467: IFFALSE 52531
// begin hc_class = class_tiger ;
52469: LD_ADDR_OWVAR 28
52473: PUSH
52474: LD_INT 14
52476: ST_TO_ADDR
// hc_gallery =  ;
52477: LD_ADDR_OWVAR 33
52481: PUSH
52482: LD_STRING 
52484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52485: LD_ADDR_OWVAR 35
52489: PUSH
52490: LD_INT 7
52492: NEG
52493: PPUSH
52494: LD_INT 7
52496: PPUSH
52497: CALL_OW 12
52501: ST_TO_ADDR
// animal := CreateHuman ;
52502: LD_ADDR_VAR 0 12
52506: PUSH
52507: CALL_OW 44
52511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52512: LD_VAR 0 12
52516: PPUSH
52517: LD_VAR 0 8
52521: PPUSH
52522: LD_INT 0
52524: PPUSH
52525: CALL 54445 0 3
// end ;
52529: GO 52466
52531: POP
52532: POP
// if apemans then
52533: LD_VAR 0 3
52537: IFFALSE 52660
// for i = 1 to apemans do
52539: LD_ADDR_VAR 0 11
52543: PUSH
52544: DOUBLE
52545: LD_INT 1
52547: DEC
52548: ST_TO_ADDR
52549: LD_VAR 0 3
52553: PUSH
52554: FOR_TO
52555: IFFALSE 52658
// begin hc_class = class_apeman ;
52557: LD_ADDR_OWVAR 28
52561: PUSH
52562: LD_INT 12
52564: ST_TO_ADDR
// hc_gallery =  ;
52565: LD_ADDR_OWVAR 33
52569: PUSH
52570: LD_STRING 
52572: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52573: LD_ADDR_OWVAR 35
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PPUSH
52582: LD_INT 2
52584: PPUSH
52585: CALL_OW 12
52589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52590: LD_ADDR_OWVAR 31
52594: PUSH
52595: LD_INT 1
52597: PPUSH
52598: LD_INT 3
52600: PPUSH
52601: CALL_OW 12
52605: PUSH
52606: LD_INT 1
52608: PPUSH
52609: LD_INT 3
52611: PPUSH
52612: CALL_OW 12
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// animal := CreateHuman ;
52629: LD_ADDR_VAR 0 12
52633: PUSH
52634: CALL_OW 44
52638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52639: LD_VAR 0 12
52643: PPUSH
52644: LD_VAR 0 8
52648: PPUSH
52649: LD_INT 0
52651: PPUSH
52652: CALL 54445 0 3
// end ;
52656: GO 52554
52658: POP
52659: POP
// if enchidnas then
52660: LD_VAR 0 4
52664: IFFALSE 52731
// for i = 1 to enchidnas do
52666: LD_ADDR_VAR 0 11
52670: PUSH
52671: DOUBLE
52672: LD_INT 1
52674: DEC
52675: ST_TO_ADDR
52676: LD_VAR 0 4
52680: PUSH
52681: FOR_TO
52682: IFFALSE 52729
// begin hc_class = 13 ;
52684: LD_ADDR_OWVAR 28
52688: PUSH
52689: LD_INT 13
52691: ST_TO_ADDR
// hc_gallery =  ;
52692: LD_ADDR_OWVAR 33
52696: PUSH
52697: LD_STRING 
52699: ST_TO_ADDR
// animal := CreateHuman ;
52700: LD_ADDR_VAR 0 12
52704: PUSH
52705: CALL_OW 44
52709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52710: LD_VAR 0 12
52714: PPUSH
52715: LD_VAR 0 8
52719: PPUSH
52720: LD_INT 0
52722: PPUSH
52723: CALL 54445 0 3
// end ;
52727: GO 52681
52729: POP
52730: POP
// if fishes then
52731: LD_VAR 0 7
52735: IFFALSE 52802
// for i = 1 to fishes do
52737: LD_ADDR_VAR 0 11
52741: PUSH
52742: DOUBLE
52743: LD_INT 1
52745: DEC
52746: ST_TO_ADDR
52747: LD_VAR 0 7
52751: PUSH
52752: FOR_TO
52753: IFFALSE 52800
// begin hc_class = 20 ;
52755: LD_ADDR_OWVAR 28
52759: PUSH
52760: LD_INT 20
52762: ST_TO_ADDR
// hc_gallery =  ;
52763: LD_ADDR_OWVAR 33
52767: PUSH
52768: LD_STRING 
52770: ST_TO_ADDR
// animal := CreateHuman ;
52771: LD_ADDR_VAR 0 12
52775: PUSH
52776: CALL_OW 44
52780: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52781: LD_VAR 0 12
52785: PPUSH
52786: LD_VAR 0 9
52790: PPUSH
52791: LD_INT 0
52793: PPUSH
52794: CALL 54445 0 3
// end ;
52798: GO 52752
52800: POP
52801: POP
// end ;
52802: LD_VAR 0 10
52806: RET
// export function WantHeal ( sci , unit ) ; begin
52807: LD_INT 0
52809: PPUSH
// if GetTaskList ( sci ) > 0 then
52810: LD_VAR 0 1
52814: PPUSH
52815: CALL_OW 437
52819: PUSH
52820: LD_INT 0
52822: GREATER
52823: IFFALSE 52895
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52825: LD_VAR 0 1
52829: PPUSH
52830: CALL_OW 437
52834: PUSH
52835: LD_INT 1
52837: ARRAY
52838: PUSH
52839: LD_INT 1
52841: ARRAY
52842: PUSH
52843: LD_STRING l
52845: EQUAL
52846: IFFALSE 52873
52848: PUSH
52849: LD_VAR 0 1
52853: PPUSH
52854: CALL_OW 437
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PUSH
52863: LD_INT 4
52865: ARRAY
52866: PUSH
52867: LD_VAR 0 2
52871: EQUAL
52872: AND
52873: IFFALSE 52885
// result := true else
52875: LD_ADDR_VAR 0 3
52879: PUSH
52880: LD_INT 1
52882: ST_TO_ADDR
52883: GO 52893
// result := false ;
52885: LD_ADDR_VAR 0 3
52889: PUSH
52890: LD_INT 0
52892: ST_TO_ADDR
// end else
52893: GO 52903
// result := false ;
52895: LD_ADDR_VAR 0 3
52899: PUSH
52900: LD_INT 0
52902: ST_TO_ADDR
// end ;
52903: LD_VAR 0 3
52907: RET
// export function HealTarget ( sci ) ; begin
52908: LD_INT 0
52910: PPUSH
// if not sci then
52911: LD_VAR 0 1
52915: NOT
52916: IFFALSE 52920
// exit ;
52918: GO 52985
// result := 0 ;
52920: LD_ADDR_VAR 0 2
52924: PUSH
52925: LD_INT 0
52927: ST_TO_ADDR
// if GetTaskList ( sci ) then
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 437
52937: IFFALSE 52985
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52939: LD_VAR 0 1
52943: PPUSH
52944: CALL_OW 437
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PUSH
52957: LD_STRING l
52959: EQUAL
52960: IFFALSE 52985
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52962: LD_ADDR_VAR 0 2
52966: PUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: CALL_OW 437
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: PUSH
52981: LD_INT 4
52983: ARRAY
52984: ST_TO_ADDR
// end ;
52985: LD_VAR 0 2
52989: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52990: LD_INT 0
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
// if not base_units then
52996: LD_VAR 0 1
53000: NOT
53001: IFFALSE 53005
// exit ;
53003: GO 53092
// result := false ;
53005: LD_ADDR_VAR 0 2
53009: PUSH
53010: LD_INT 0
53012: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53013: LD_ADDR_VAR 0 5
53017: PUSH
53018: LD_VAR 0 1
53022: PPUSH
53023: LD_INT 21
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PPUSH
53033: CALL_OW 72
53037: ST_TO_ADDR
// if not tmp then
53038: LD_VAR 0 5
53042: NOT
53043: IFFALSE 53047
// exit ;
53045: GO 53092
// for i in tmp do
53047: LD_ADDR_VAR 0 3
53051: PUSH
53052: LD_VAR 0 5
53056: PUSH
53057: FOR_IN
53058: IFFALSE 53090
// begin result := EnemyInRange ( i , 22 ) ;
53060: LD_ADDR_VAR 0 2
53064: PUSH
53065: LD_VAR 0 3
53069: PPUSH
53070: LD_INT 22
53072: PPUSH
53073: CALL 50507 0 2
53077: ST_TO_ADDR
// if result then
53078: LD_VAR 0 2
53082: IFFALSE 53088
// exit ;
53084: POP
53085: POP
53086: GO 53092
// end ;
53088: GO 53057
53090: POP
53091: POP
// end ;
53092: LD_VAR 0 2
53096: RET
// export function FilterByTag ( units , tag ) ; begin
53097: LD_INT 0
53099: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53100: LD_ADDR_VAR 0 3
53104: PUSH
53105: LD_VAR 0 1
53109: PPUSH
53110: LD_INT 120
53112: PUSH
53113: LD_VAR 0 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PPUSH
53122: CALL_OW 72
53126: ST_TO_ADDR
// end ;
53127: LD_VAR 0 3
53131: RET
// export function IsDriver ( un ) ; begin
53132: LD_INT 0
53134: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53135: LD_ADDR_VAR 0 2
53139: PUSH
53140: LD_VAR 0 1
53144: PUSH
53145: LD_INT 55
53147: PUSH
53148: EMPTY
53149: LIST
53150: PPUSH
53151: CALL_OW 69
53155: IN
53156: ST_TO_ADDR
// end ;
53157: LD_VAR 0 2
53161: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53162: LD_INT 0
53164: PPUSH
53165: PPUSH
// list := [ ] ;
53166: LD_ADDR_VAR 0 5
53170: PUSH
53171: EMPTY
53172: ST_TO_ADDR
// case d of 0 :
53173: LD_VAR 0 3
53177: PUSH
53178: LD_INT 0
53180: DOUBLE
53181: EQUAL
53182: IFTRUE 53186
53184: GO 53319
53186: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53187: LD_ADDR_VAR 0 5
53191: PUSH
53192: LD_VAR 0 1
53196: PUSH
53197: LD_INT 4
53199: MINUS
53200: PUSH
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 4
53208: MINUS
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: PUSH
53218: LD_VAR 0 1
53222: PUSH
53223: LD_INT 3
53225: MINUS
53226: PUSH
53227: LD_VAR 0 2
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: PUSH
53240: LD_VAR 0 1
53244: PUSH
53245: LD_INT 4
53247: PLUS
53248: PUSH
53249: LD_VAR 0 2
53253: PUSH
53254: LD_INT 4
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: LD_VAR 0 1
53266: PUSH
53267: LD_INT 3
53269: PLUS
53270: PUSH
53271: LD_VAR 0 2
53275: PUSH
53276: LD_INT 3
53278: PLUS
53279: PUSH
53280: LD_INT 5
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: PUSH
53288: LD_VAR 0 1
53292: PUSH
53293: LD_VAR 0 2
53297: PUSH
53298: LD_INT 4
53300: PLUS
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// end ; 1 :
53317: GO 54017
53319: LD_INT 1
53321: DOUBLE
53322: EQUAL
53323: IFTRUE 53327
53325: GO 53460
53327: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53328: LD_ADDR_VAR 0 5
53332: PUSH
53333: LD_VAR 0 1
53337: PUSH
53338: LD_VAR 0 2
53342: PUSH
53343: LD_INT 4
53345: MINUS
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: PUSH
53355: LD_VAR 0 1
53359: PUSH
53360: LD_INT 3
53362: MINUS
53363: PUSH
53364: LD_VAR 0 2
53368: PUSH
53369: LD_INT 3
53371: MINUS
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: LIST
53380: PUSH
53381: LD_VAR 0 1
53385: PUSH
53386: LD_INT 4
53388: MINUS
53389: PUSH
53390: LD_VAR 0 2
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: LD_VAR 0 1
53407: PUSH
53408: LD_VAR 0 2
53412: PUSH
53413: LD_INT 3
53415: PLUS
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: PUSH
53425: LD_VAR 0 1
53429: PUSH
53430: LD_INT 4
53432: PLUS
53433: PUSH
53434: LD_VAR 0 2
53438: PUSH
53439: LD_INT 4
53441: PLUS
53442: PUSH
53443: LD_INT 5
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// end ; 2 :
53458: GO 54017
53460: LD_INT 2
53462: DOUBLE
53463: EQUAL
53464: IFTRUE 53468
53466: GO 53597
53468: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53469: LD_ADDR_VAR 0 5
53473: PUSH
53474: LD_VAR 0 1
53478: PUSH
53479: LD_VAR 0 2
53483: PUSH
53484: LD_INT 3
53486: MINUS
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: PUSH
53496: LD_VAR 0 1
53500: PUSH
53501: LD_INT 4
53503: PLUS
53504: PUSH
53505: LD_VAR 0 2
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: LD_VAR 0 1
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_INT 4
53530: PLUS
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: LD_VAR 0 1
53544: PUSH
53545: LD_INT 3
53547: MINUS
53548: PUSH
53549: LD_VAR 0 2
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: LIST
53561: PUSH
53562: LD_VAR 0 1
53566: PUSH
53567: LD_INT 4
53569: MINUS
53570: PUSH
53571: LD_VAR 0 2
53575: PUSH
53576: LD_INT 4
53578: MINUS
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// end ; 3 :
53595: GO 54017
53597: LD_INT 3
53599: DOUBLE
53600: EQUAL
53601: IFTRUE 53605
53603: GO 53738
53605: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53606: LD_ADDR_VAR 0 5
53610: PUSH
53611: LD_VAR 0 1
53615: PUSH
53616: LD_INT 3
53618: PLUS
53619: PUSH
53620: LD_VAR 0 2
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: LD_VAR 0 1
53637: PUSH
53638: LD_INT 4
53640: PLUS
53641: PUSH
53642: LD_VAR 0 2
53646: PUSH
53647: LD_INT 4
53649: PLUS
53650: PUSH
53651: LD_INT 5
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: PUSH
53659: LD_VAR 0 1
53663: PUSH
53664: LD_INT 4
53666: MINUS
53667: PUSH
53668: LD_VAR 0 2
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: LD_VAR 0 1
53685: PUSH
53686: LD_VAR 0 2
53690: PUSH
53691: LD_INT 4
53693: MINUS
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: PUSH
53703: LD_VAR 0 1
53707: PUSH
53708: LD_INT 3
53710: MINUS
53711: PUSH
53712: LD_VAR 0 2
53716: PUSH
53717: LD_INT 3
53719: MINUS
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// end ; 4 :
53736: GO 54017
53738: LD_INT 4
53740: DOUBLE
53741: EQUAL
53742: IFTRUE 53746
53744: GO 53879
53746: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53747: LD_ADDR_VAR 0 5
53751: PUSH
53752: LD_VAR 0 1
53756: PUSH
53757: LD_VAR 0 2
53761: PUSH
53762: LD_INT 4
53764: PLUS
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_VAR 0 1
53778: PUSH
53779: LD_INT 3
53781: PLUS
53782: PUSH
53783: LD_VAR 0 2
53787: PUSH
53788: LD_INT 3
53790: PLUS
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: PUSH
53800: LD_VAR 0 1
53804: PUSH
53805: LD_INT 4
53807: PLUS
53808: PUSH
53809: LD_VAR 0 2
53813: PUSH
53814: LD_INT 4
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: PUSH
53822: LD_VAR 0 1
53826: PUSH
53827: LD_VAR 0 2
53831: PUSH
53832: LD_INT 3
53834: MINUS
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: PUSH
53844: LD_VAR 0 1
53848: PUSH
53849: LD_INT 4
53851: MINUS
53852: PUSH
53853: LD_VAR 0 2
53857: PUSH
53858: LD_INT 4
53860: MINUS
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// end ; 5 :
53877: GO 54017
53879: LD_INT 5
53881: DOUBLE
53882: EQUAL
53883: IFTRUE 53887
53885: GO 54016
53887: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53888: LD_ADDR_VAR 0 5
53892: PUSH
53893: LD_VAR 0 1
53897: PUSH
53898: LD_INT 4
53900: MINUS
53901: PUSH
53902: LD_VAR 0 2
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: PUSH
53915: LD_VAR 0 1
53919: PUSH
53920: LD_VAR 0 2
53924: PUSH
53925: LD_INT 4
53927: MINUS
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: PUSH
53937: LD_VAR 0 1
53941: PUSH
53942: LD_INT 4
53944: PLUS
53945: PUSH
53946: LD_VAR 0 2
53950: PUSH
53951: LD_INT 4
53953: PLUS
53954: PUSH
53955: LD_INT 5
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: PUSH
53963: LD_VAR 0 1
53967: PUSH
53968: LD_INT 3
53970: PLUS
53971: PUSH
53972: LD_VAR 0 2
53976: PUSH
53977: LD_INT 4
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: PUSH
53985: LD_VAR 0 1
53989: PUSH
53990: LD_VAR 0 2
53994: PUSH
53995: LD_INT 3
53997: PLUS
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: ST_TO_ADDR
// end ; end ;
54014: GO 54017
54016: POP
// result := list ;
54017: LD_ADDR_VAR 0 4
54021: PUSH
54022: LD_VAR 0 5
54026: ST_TO_ADDR
// end ;
54027: LD_VAR 0 4
54031: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54032: LD_INT 0
54034: PPUSH
54035: PPUSH
54036: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54037: LD_VAR 0 1
54041: NOT
54042: IFTRUE 54070
54044: PUSH
54045: LD_VAR 0 2
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: LD_INT 4
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: IN
54068: NOT
54069: OR
54070: IFFALSE 54074
// exit ;
54072: GO 54157
// tmp := [ ] ;
54074: LD_ADDR_VAR 0 5
54078: PUSH
54079: EMPTY
54080: ST_TO_ADDR
// for i in units do
54081: LD_ADDR_VAR 0 4
54085: PUSH
54086: LD_VAR 0 1
54090: PUSH
54091: FOR_IN
54092: IFFALSE 54126
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54094: LD_ADDR_VAR 0 5
54098: PUSH
54099: LD_VAR 0 5
54103: PPUSH
54104: LD_VAR 0 4
54108: PPUSH
54109: LD_VAR 0 2
54113: PPUSH
54114: CALL_OW 259
54118: PPUSH
54119: CALL 55552 0 2
54123: ST_TO_ADDR
54124: GO 54091
54126: POP
54127: POP
// if not tmp then
54128: LD_VAR 0 5
54132: NOT
54133: IFFALSE 54137
// exit ;
54135: GO 54157
// result := SortListByListDesc ( units , tmp ) ;
54137: LD_ADDR_VAR 0 3
54141: PUSH
54142: LD_VAR 0 1
54146: PPUSH
54147: LD_VAR 0 5
54151: PPUSH
54152: CALL_OW 77
54156: ST_TO_ADDR
// end ;
54157: LD_VAR 0 3
54161: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54162: LD_INT 0
54164: PPUSH
54165: PPUSH
54166: PPUSH
// result := false ;
54167: LD_ADDR_VAR 0 3
54171: PUSH
54172: LD_INT 0
54174: ST_TO_ADDR
// if not building then
54175: LD_VAR 0 2
54179: NOT
54180: IFFALSE 54184
// exit ;
54182: GO 54328
// x := GetX ( building ) ;
54184: LD_ADDR_VAR 0 4
54188: PUSH
54189: LD_VAR 0 2
54193: PPUSH
54194: CALL_OW 250
54198: ST_TO_ADDR
// y := GetY ( building ) ;
54199: LD_ADDR_VAR 0 5
54203: PUSH
54204: LD_VAR 0 2
54208: PPUSH
54209: CALL_OW 251
54213: ST_TO_ADDR
// if not x or not y then
54214: LD_VAR 0 4
54218: NOT
54219: IFTRUE 54228
54221: PUSH
54222: LD_VAR 0 5
54226: NOT
54227: OR
54228: IFFALSE 54232
// exit ;
54230: GO 54328
// if GetTaskList ( unit ) then
54232: LD_VAR 0 1
54236: PPUSH
54237: CALL_OW 437
54241: IFFALSE 54328
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54243: LD_STRING e
54245: PUSH
54246: LD_VAR 0 1
54250: PPUSH
54251: CALL_OW 437
54255: PUSH
54256: LD_INT 1
54258: ARRAY
54259: PUSH
54260: LD_INT 1
54262: ARRAY
54263: EQUAL
54264: IFFALSE 54291
54266: PUSH
54267: LD_VAR 0 4
54271: PUSH
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 437
54281: PUSH
54282: LD_INT 1
54284: ARRAY
54285: PUSH
54286: LD_INT 2
54288: ARRAY
54289: EQUAL
54290: AND
54291: IFFALSE 54318
54293: PUSH
54294: LD_VAR 0 5
54298: PUSH
54299: LD_VAR 0 1
54303: PPUSH
54304: CALL_OW 437
54308: PUSH
54309: LD_INT 1
54311: ARRAY
54312: PUSH
54313: LD_INT 3
54315: ARRAY
54316: EQUAL
54317: AND
54318: IFFALSE 54328
// result := true end ;
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_INT 1
54327: ST_TO_ADDR
// end ;
54328: LD_VAR 0 3
54332: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54333: LD_INT 0
54335: PPUSH
// result := false ;
54336: LD_ADDR_VAR 0 4
54340: PUSH
54341: LD_INT 0
54343: ST_TO_ADDR
// if GetTaskList ( unit ) then
54344: LD_VAR 0 1
54348: PPUSH
54349: CALL_OW 437
54353: IFFALSE 54440
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54355: LD_STRING M
54357: PUSH
54358: LD_VAR 0 1
54362: PPUSH
54363: CALL_OW 437
54367: PUSH
54368: LD_INT 1
54370: ARRAY
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: EQUAL
54376: IFFALSE 54403
54378: PUSH
54379: LD_VAR 0 2
54383: PUSH
54384: LD_VAR 0 1
54388: PPUSH
54389: CALL_OW 437
54393: PUSH
54394: LD_INT 1
54396: ARRAY
54397: PUSH
54398: LD_INT 2
54400: ARRAY
54401: EQUAL
54402: AND
54403: IFFALSE 54430
54405: PUSH
54406: LD_VAR 0 3
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 437
54420: PUSH
54421: LD_INT 1
54423: ARRAY
54424: PUSH
54425: LD_INT 3
54427: ARRAY
54428: EQUAL
54429: AND
54430: IFFALSE 54440
// result := true ;
54432: LD_ADDR_VAR 0 4
54436: PUSH
54437: LD_INT 1
54439: ST_TO_ADDR
// end ; end ;
54440: LD_VAR 0 4
54444: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54445: LD_INT 0
54447: PPUSH
54448: PPUSH
54449: PPUSH
54450: PPUSH
// if not unit or not area then
54451: LD_VAR 0 1
54455: NOT
54456: IFTRUE 54465
54458: PUSH
54459: LD_VAR 0 2
54463: NOT
54464: OR
54465: IFFALSE 54469
// exit ;
54467: GO 54645
// tmp := AreaToList ( area , i ) ;
54469: LD_ADDR_VAR 0 6
54473: PUSH
54474: LD_VAR 0 2
54478: PPUSH
54479: LD_VAR 0 5
54483: PPUSH
54484: CALL_OW 517
54488: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54489: LD_ADDR_VAR 0 5
54493: PUSH
54494: DOUBLE
54495: LD_INT 1
54497: DEC
54498: ST_TO_ADDR
54499: LD_VAR 0 6
54503: PUSH
54504: LD_INT 1
54506: ARRAY
54507: PUSH
54508: FOR_TO
54509: IFFALSE 54643
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54511: LD_ADDR_VAR 0 7
54515: PUSH
54516: LD_VAR 0 6
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PUSH
54525: LD_VAR 0 5
54529: ARRAY
54530: PUSH
54531: LD_VAR 0 6
54535: PUSH
54536: LD_INT 2
54538: ARRAY
54539: PUSH
54540: LD_VAR 0 5
54544: ARRAY
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54550: LD_INT 92
54552: PUSH
54553: LD_VAR 0 7
54557: PUSH
54558: LD_INT 1
54560: ARRAY
54561: PUSH
54562: LD_VAR 0 7
54566: PUSH
54567: LD_INT 2
54569: ARRAY
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: PPUSH
54580: CALL_OW 69
54584: PUSH
54585: LD_INT 0
54587: EQUAL
54588: IFFALSE 54641
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54590: LD_VAR 0 1
54594: PPUSH
54595: LD_VAR 0 7
54599: PUSH
54600: LD_INT 1
54602: ARRAY
54603: PPUSH
54604: LD_VAR 0 7
54608: PUSH
54609: LD_INT 2
54611: ARRAY
54612: PPUSH
54613: LD_VAR 0 3
54617: PPUSH
54618: CALL_OW 48
// result := IsPlaced ( unit ) ;
54622: LD_ADDR_VAR 0 4
54626: PUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 305
54636: ST_TO_ADDR
// exit ;
54637: POP
54638: POP
54639: GO 54645
// end ; end ;
54641: GO 54508
54643: POP
54644: POP
// end ;
54645: LD_VAR 0 4
54649: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54650: LD_INT 0
54652: PPUSH
54653: PPUSH
54654: PPUSH
// if not side or side > 8 then
54655: LD_VAR 0 1
54659: NOT
54660: IFTRUE 54672
54662: PUSH
54663: LD_VAR 0 1
54667: PUSH
54668: LD_INT 8
54670: GREATER
54671: OR
54672: IFFALSE 54676
// exit ;
54674: GO 54863
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54676: LD_ADDR_VAR 0 4
54680: PUSH
54681: LD_INT 22
54683: PUSH
54684: LD_VAR 0 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 21
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PPUSH
54707: CALL_OW 69
54711: ST_TO_ADDR
// if not tmp then
54712: LD_VAR 0 4
54716: NOT
54717: IFFALSE 54721
// exit ;
54719: GO 54863
// enable_addtolog := true ;
54721: LD_ADDR_OWVAR 81
54725: PUSH
54726: LD_INT 1
54728: ST_TO_ADDR
// AddToLog ( [ ) ;
54729: LD_STRING [
54731: PPUSH
54732: CALL_OW 561
// for i in tmp do
54736: LD_ADDR_VAR 0 3
54740: PUSH
54741: LD_VAR 0 4
54745: PUSH
54746: FOR_IN
54747: IFFALSE 54854
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54749: LD_STRING [
54751: PUSH
54752: LD_VAR 0 3
54756: PPUSH
54757: CALL_OW 266
54761: STR
54762: PUSH
54763: LD_STRING , 
54765: STR
54766: PUSH
54767: LD_VAR 0 3
54771: PPUSH
54772: CALL_OW 250
54776: STR
54777: PUSH
54778: LD_STRING , 
54780: STR
54781: PUSH
54782: LD_VAR 0 3
54786: PPUSH
54787: CALL_OW 251
54791: STR
54792: PUSH
54793: LD_STRING , 
54795: STR
54796: PUSH
54797: LD_VAR 0 3
54801: PPUSH
54802: CALL_OW 254
54806: STR
54807: PUSH
54808: LD_STRING , 
54810: STR
54811: PUSH
54812: LD_VAR 0 3
54816: PPUSH
54817: LD_INT 1
54819: PPUSH
54820: CALL_OW 268
54824: STR
54825: PUSH
54826: LD_STRING , 
54828: STR
54829: PUSH
54830: LD_VAR 0 3
54834: PPUSH
54835: LD_INT 2
54837: PPUSH
54838: CALL_OW 268
54842: STR
54843: PUSH
54844: LD_STRING ],
54846: STR
54847: PPUSH
54848: CALL_OW 561
// end ;
54852: GO 54746
54854: POP
54855: POP
// AddToLog ( ]; ) ;
54856: LD_STRING ];
54858: PPUSH
54859: CALL_OW 561
// end ;
54863: LD_VAR 0 2
54867: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54868: LD_INT 0
54870: PPUSH
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
// if not area or not rate or not max then
54875: LD_VAR 0 1
54879: NOT
54880: IFTRUE 54889
54882: PUSH
54883: LD_VAR 0 2
54887: NOT
54888: OR
54889: IFTRUE 54898
54891: PUSH
54892: LD_VAR 0 4
54896: NOT
54897: OR
54898: IFFALSE 54902
// exit ;
54900: GO 55091
// while 1 do
54902: LD_INT 1
54904: IFFALSE 55091
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54906: LD_ADDR_VAR 0 9
54910: PUSH
54911: LD_VAR 0 1
54915: PPUSH
54916: LD_INT 1
54918: PPUSH
54919: CALL_OW 287
54923: PUSH
54924: LD_INT 10
54926: MUL
54927: ST_TO_ADDR
// r := rate / 10 ;
54928: LD_ADDR_VAR 0 7
54932: PUSH
54933: LD_VAR 0 2
54937: PUSH
54938: LD_INT 10
54940: DIVREAL
54941: ST_TO_ADDR
// time := 1 1$00 ;
54942: LD_ADDR_VAR 0 8
54946: PUSH
54947: LD_INT 2100
54949: ST_TO_ADDR
// if amount < min then
54950: LD_VAR 0 9
54954: PUSH
54955: LD_VAR 0 3
54959: LESS
54960: IFFALSE 54978
// r := r * 2 else
54962: LD_ADDR_VAR 0 7
54966: PUSH
54967: LD_VAR 0 7
54971: PUSH
54972: LD_INT 2
54974: MUL
54975: ST_TO_ADDR
54976: GO 55004
// if amount > max then
54978: LD_VAR 0 9
54982: PUSH
54983: LD_VAR 0 4
54987: GREATER
54988: IFFALSE 55004
// r := r / 2 ;
54990: LD_ADDR_VAR 0 7
54994: PUSH
54995: LD_VAR 0 7
54999: PUSH
55000: LD_INT 2
55002: DIVREAL
55003: ST_TO_ADDR
// time := time / r ;
55004: LD_ADDR_VAR 0 8
55008: PUSH
55009: LD_VAR 0 8
55013: PUSH
55014: LD_VAR 0 7
55018: DIVREAL
55019: ST_TO_ADDR
// if time < 0 then
55020: LD_VAR 0 8
55024: PUSH
55025: LD_INT 0
55027: LESS
55028: IFFALSE 55045
// time := time * - 1 ;
55030: LD_ADDR_VAR 0 8
55034: PUSH
55035: LD_VAR 0 8
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: MUL
55044: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55045: LD_VAR 0 8
55049: PUSH
55050: LD_INT 35
55052: PPUSH
55053: LD_INT 875
55055: PPUSH
55056: CALL_OW 12
55060: PLUS
55061: PPUSH
55062: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55066: LD_INT 1
55068: PPUSH
55069: LD_INT 5
55071: PPUSH
55072: CALL_OW 12
55076: PPUSH
55077: LD_VAR 0 1
55081: PPUSH
55082: LD_INT 1
55084: PPUSH
55085: CALL_OW 55
// end ;
55089: GO 54902
// end ;
55091: LD_VAR 0 5
55095: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55096: LD_INT 0
55098: PPUSH
55099: PPUSH
55100: PPUSH
55101: PPUSH
55102: PPUSH
55103: PPUSH
55104: PPUSH
55105: PPUSH
// if not turrets or not factories then
55106: LD_VAR 0 1
55110: NOT
55111: IFTRUE 55120
55113: PUSH
55114: LD_VAR 0 2
55118: NOT
55119: OR
55120: IFFALSE 55124
// exit ;
55122: GO 55431
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55124: LD_ADDR_VAR 0 10
55128: PUSH
55129: LD_INT 5
55131: PUSH
55132: LD_INT 6
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 4
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: LD_INT 5
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 24
55166: PUSH
55167: LD_INT 25
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 23
55176: PUSH
55177: LD_INT 27
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 42
55190: PUSH
55191: LD_INT 43
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 44
55200: PUSH
55201: LD_INT 46
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 45
55210: PUSH
55211: LD_INT 47
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// result := [ ] ;
55228: LD_ADDR_VAR 0 3
55232: PUSH
55233: EMPTY
55234: ST_TO_ADDR
// for i in turrets do
55235: LD_ADDR_VAR 0 4
55239: PUSH
55240: LD_VAR 0 1
55244: PUSH
55245: FOR_IN
55246: IFFALSE 55429
// begin nat := GetNation ( i ) ;
55248: LD_ADDR_VAR 0 7
55252: PUSH
55253: LD_VAR 0 4
55257: PPUSH
55258: CALL_OW 248
55262: ST_TO_ADDR
// weapon := 0 ;
55263: LD_ADDR_VAR 0 8
55267: PUSH
55268: LD_INT 0
55270: ST_TO_ADDR
// if not nat then
55271: LD_VAR 0 7
55275: NOT
55276: IFFALSE 55280
// continue ;
55278: GO 55245
// for j in list [ nat ] do
55280: LD_ADDR_VAR 0 5
55284: PUSH
55285: LD_VAR 0 10
55289: PUSH
55290: LD_VAR 0 7
55294: ARRAY
55295: PUSH
55296: FOR_IN
55297: IFFALSE 55338
// if GetBWeapon ( i ) = j [ 1 ] then
55299: LD_VAR 0 4
55303: PPUSH
55304: CALL_OW 269
55308: PUSH
55309: LD_VAR 0 5
55313: PUSH
55314: LD_INT 1
55316: ARRAY
55317: EQUAL
55318: IFFALSE 55336
// begin weapon := j [ 2 ] ;
55320: LD_ADDR_VAR 0 8
55324: PUSH
55325: LD_VAR 0 5
55329: PUSH
55330: LD_INT 2
55332: ARRAY
55333: ST_TO_ADDR
// break ;
55334: GO 55338
// end ;
55336: GO 55296
55338: POP
55339: POP
// if not weapon then
55340: LD_VAR 0 8
55344: NOT
55345: IFFALSE 55349
// continue ;
55347: GO 55245
// for k in factories do
55349: LD_ADDR_VAR 0 6
55353: PUSH
55354: LD_VAR 0 2
55358: PUSH
55359: FOR_IN
55360: IFFALSE 55425
// begin weapons := AvailableWeaponList ( k ) ;
55362: LD_ADDR_VAR 0 9
55366: PUSH
55367: LD_VAR 0 6
55371: PPUSH
55372: CALL_OW 478
55376: ST_TO_ADDR
// if not weapons then
55377: LD_VAR 0 9
55381: NOT
55382: IFFALSE 55386
// continue ;
55384: GO 55359
// if weapon in weapons then
55386: LD_VAR 0 8
55390: PUSH
55391: LD_VAR 0 9
55395: IN
55396: IFFALSE 55423
// begin result := [ i , weapon ] ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: LD_VAR 0 4
55407: PUSH
55408: LD_VAR 0 8
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// exit ;
55417: POP
55418: POP
55419: POP
55420: POP
55421: GO 55431
// end ; end ;
55423: GO 55359
55425: POP
55426: POP
// end ;
55427: GO 55245
55429: POP
55430: POP
// end ;
55431: LD_VAR 0 3
55435: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55436: LD_INT 0
55438: PPUSH
// if not side or side > 8 then
55439: LD_VAR 0 3
55443: NOT
55444: IFTRUE 55456
55446: PUSH
55447: LD_VAR 0 3
55451: PUSH
55452: LD_INT 8
55454: GREATER
55455: OR
55456: IFFALSE 55460
// exit ;
55458: GO 55519
// if not range then
55460: LD_VAR 0 4
55464: NOT
55465: IFFALSE 55476
// range := - 12 ;
55467: LD_ADDR_VAR 0 4
55471: PUSH
55472: LD_INT 12
55474: NEG
55475: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55476: LD_VAR 0 1
55480: PPUSH
55481: LD_VAR 0 2
55485: PPUSH
55486: LD_VAR 0 3
55490: PPUSH
55491: LD_VAR 0 4
55495: PPUSH
55496: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55500: LD_VAR 0 1
55504: PPUSH
55505: LD_VAR 0 2
55509: PPUSH
55510: LD_VAR 0 3
55514: PPUSH
55515: CALL_OW 331
// end ;
55519: LD_VAR 0 5
55523: RET
// export function Video ( mode ) ; begin
55524: LD_INT 0
55526: PPUSH
// ingame_video = mode ;
55527: LD_ADDR_OWVAR 52
55531: PUSH
55532: LD_VAR 0 1
55536: ST_TO_ADDR
// interface_hidden = mode ;
55537: LD_ADDR_OWVAR 54
55541: PUSH
55542: LD_VAR 0 1
55546: ST_TO_ADDR
// end ;
55547: LD_VAR 0 2
55551: RET
// export function Join ( array , element ) ; begin
55552: LD_INT 0
55554: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55555: LD_ADDR_VAR 0 3
55559: PUSH
55560: LD_VAR 0 1
55564: PPUSH
55565: LD_VAR 0 1
55569: PUSH
55570: LD_INT 1
55572: PLUS
55573: PPUSH
55574: LD_VAR 0 2
55578: PPUSH
55579: CALL_OW 1
55583: ST_TO_ADDR
// end ;
55584: LD_VAR 0 3
55588: RET
// export function JoinUnion ( array , element ) ; begin
55589: LD_INT 0
55591: PPUSH
// result := array union element ;
55592: LD_ADDR_VAR 0 3
55596: PUSH
55597: LD_VAR 0 1
55601: PUSH
55602: LD_VAR 0 2
55606: UNION
55607: ST_TO_ADDR
// end ;
55608: LD_VAR 0 3
55612: RET
// export function GetBehemoths ( side ) ; begin
55613: LD_INT 0
55615: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55616: LD_ADDR_VAR 0 2
55620: PUSH
55621: LD_INT 22
55623: PUSH
55624: LD_VAR 0 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 31
55635: PUSH
55636: LD_INT 25
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PPUSH
55647: CALL_OW 69
55651: ST_TO_ADDR
// end ;
55652: LD_VAR 0 2
55656: RET
// export function Shuffle ( array ) ; var i , index ; begin
55657: LD_INT 0
55659: PPUSH
55660: PPUSH
55661: PPUSH
// result := [ ] ;
55662: LD_ADDR_VAR 0 2
55666: PUSH
55667: EMPTY
55668: ST_TO_ADDR
// if not array then
55669: LD_VAR 0 1
55673: NOT
55674: IFFALSE 55678
// exit ;
55676: GO 55777
// Randomize ;
55678: CALL_OW 10
// for i = array downto 1 do
55682: LD_ADDR_VAR 0 3
55686: PUSH
55687: DOUBLE
55688: LD_VAR 0 1
55692: INC
55693: ST_TO_ADDR
55694: LD_INT 1
55696: PUSH
55697: FOR_DOWNTO
55698: IFFALSE 55775
// begin index := rand ( 1 , array ) ;
55700: LD_ADDR_VAR 0 4
55704: PUSH
55705: LD_INT 1
55707: PPUSH
55708: LD_VAR 0 1
55712: PPUSH
55713: CALL_OW 12
55717: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55718: LD_ADDR_VAR 0 2
55722: PUSH
55723: LD_VAR 0 2
55727: PPUSH
55728: LD_VAR 0 2
55732: PUSH
55733: LD_INT 1
55735: PLUS
55736: PPUSH
55737: LD_VAR 0 1
55741: PUSH
55742: LD_VAR 0 4
55746: ARRAY
55747: PPUSH
55748: CALL_OW 2
55752: ST_TO_ADDR
// array := Delete ( array , index ) ;
55753: LD_ADDR_VAR 0 1
55757: PUSH
55758: LD_VAR 0 1
55762: PPUSH
55763: LD_VAR 0 4
55767: PPUSH
55768: CALL_OW 3
55772: ST_TO_ADDR
// end ;
55773: GO 55697
55775: POP
55776: POP
// end ;
55777: LD_VAR 0 2
55781: RET
// export function GetBaseMaterials ( base ) ; begin
55782: LD_INT 0
55784: PPUSH
// result := [ 0 , 0 , 0 ] ;
55785: LD_ADDR_VAR 0 2
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// if not base then
55804: LD_VAR 0 1
55808: NOT
55809: IFFALSE 55813
// exit ;
55811: GO 55862
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55813: LD_ADDR_VAR 0 2
55817: PUSH
55818: LD_VAR 0 1
55822: PPUSH
55823: LD_INT 1
55825: PPUSH
55826: CALL_OW 275
55830: PUSH
55831: LD_VAR 0 1
55835: PPUSH
55836: LD_INT 2
55838: PPUSH
55839: CALL_OW 275
55843: PUSH
55844: LD_VAR 0 1
55848: PPUSH
55849: LD_INT 3
55851: PPUSH
55852: CALL_OW 275
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: ST_TO_ADDR
// end ;
55862: LD_VAR 0 2
55866: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55867: LD_INT 0
55869: PPUSH
55870: PPUSH
// result := array ;
55871: LD_ADDR_VAR 0 3
55875: PUSH
55876: LD_VAR 0 1
55880: ST_TO_ADDR
// if size >= result then
55881: LD_VAR 0 2
55885: PUSH
55886: LD_VAR 0 3
55890: GREATEREQUAL
55891: IFFALSE 55895
// exit ;
55893: GO 55945
// if size then
55895: LD_VAR 0 2
55899: IFFALSE 55945
// for i := array downto size do
55901: LD_ADDR_VAR 0 4
55905: PUSH
55906: DOUBLE
55907: LD_VAR 0 1
55911: INC
55912: ST_TO_ADDR
55913: LD_VAR 0 2
55917: PUSH
55918: FOR_DOWNTO
55919: IFFALSE 55943
// result := Delete ( result , result ) ;
55921: LD_ADDR_VAR 0 3
55925: PUSH
55926: LD_VAR 0 3
55930: PPUSH
55931: LD_VAR 0 3
55935: PPUSH
55936: CALL_OW 3
55940: ST_TO_ADDR
55941: GO 55918
55943: POP
55944: POP
// end ;
55945: LD_VAR 0 3
55949: RET
// export function ComExit ( unit ) ; var tmp ; begin
55950: LD_INT 0
55952: PPUSH
55953: PPUSH
// if not IsInUnit ( unit ) then
55954: LD_VAR 0 1
55958: PPUSH
55959: CALL_OW 310
55963: NOT
55964: IFFALSE 55968
// exit ;
55966: GO 56028
// tmp := IsInUnit ( unit ) ;
55968: LD_ADDR_VAR 0 3
55972: PUSH
55973: LD_VAR 0 1
55977: PPUSH
55978: CALL_OW 310
55982: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55983: LD_VAR 0 3
55987: PPUSH
55988: CALL_OW 247
55992: PUSH
55993: LD_INT 2
55995: EQUAL
55996: IFFALSE 56009
// ComExitVehicle ( unit ) else
55998: LD_VAR 0 1
56002: PPUSH
56003: CALL_OW 121
56007: GO 56018
// ComExitBuilding ( unit ) ;
56009: LD_VAR 0 1
56013: PPUSH
56014: CALL_OW 122
// result := tmp ;
56018: LD_ADDR_VAR 0 2
56022: PUSH
56023: LD_VAR 0 3
56027: ST_TO_ADDR
// end ;
56028: LD_VAR 0 2
56032: RET
// export function ComExitAll ( units ) ; var i ; begin
56033: LD_INT 0
56035: PPUSH
56036: PPUSH
// if not units then
56037: LD_VAR 0 1
56041: NOT
56042: IFFALSE 56046
// exit ;
56044: GO 56072
// for i in units do
56046: LD_ADDR_VAR 0 3
56050: PUSH
56051: LD_VAR 0 1
56055: PUSH
56056: FOR_IN
56057: IFFALSE 56070
// ComExit ( i ) ;
56059: LD_VAR 0 3
56063: PPUSH
56064: CALL 55950 0 1
56068: GO 56056
56070: POP
56071: POP
// end ;
56072: LD_VAR 0 2
56076: RET
// export function ResetHc ; begin
56077: LD_INT 0
56079: PPUSH
// InitHc ;
56080: CALL_OW 19
// hc_importance := 0 ;
56084: LD_ADDR_OWVAR 32
56088: PUSH
56089: LD_INT 0
56091: ST_TO_ADDR
// end ;
56092: LD_VAR 0 1
56096: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56097: LD_INT 0
56099: PPUSH
56100: PPUSH
56101: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56102: LD_ADDR_VAR 0 6
56106: PUSH
56107: LD_VAR 0 1
56111: PUSH
56112: LD_VAR 0 3
56116: PLUS
56117: PUSH
56118: LD_INT 2
56120: DIV
56121: ST_TO_ADDR
// if _x < 0 then
56122: LD_VAR 0 6
56126: PUSH
56127: LD_INT 0
56129: LESS
56130: IFFALSE 56147
// _x := _x * - 1 ;
56132: LD_ADDR_VAR 0 6
56136: PUSH
56137: LD_VAR 0 6
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: MUL
56146: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56147: LD_ADDR_VAR 0 7
56151: PUSH
56152: LD_VAR 0 2
56156: PUSH
56157: LD_VAR 0 4
56161: PLUS
56162: PUSH
56163: LD_INT 2
56165: DIV
56166: ST_TO_ADDR
// if _y < 0 then
56167: LD_VAR 0 7
56171: PUSH
56172: LD_INT 0
56174: LESS
56175: IFFALSE 56192
// _y := _y * - 1 ;
56177: LD_ADDR_VAR 0 7
56181: PUSH
56182: LD_VAR 0 7
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: MUL
56191: ST_TO_ADDR
// result := [ _x , _y ] ;
56192: LD_ADDR_VAR 0 5
56196: PUSH
56197: LD_VAR 0 6
56201: PUSH
56202: LD_VAR 0 7
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// end ;
56211: LD_VAR 0 5
56215: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56216: LD_INT 0
56218: PPUSH
56219: PPUSH
56220: PPUSH
56221: PPUSH
// task := GetTaskList ( unit ) ;
56222: LD_ADDR_VAR 0 7
56226: PUSH
56227: LD_VAR 0 1
56231: PPUSH
56232: CALL_OW 437
56236: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56237: LD_VAR 0 7
56241: NOT
56242: IFFALSE 56261
56244: PUSH
56245: LD_VAR 0 1
56249: PPUSH
56250: LD_VAR 0 2
56254: PPUSH
56255: CALL_OW 308
56259: NOT
56260: AND
56261: IFFALSE 56265
// exit ;
56263: GO 56383
// if IsInArea ( unit , area ) then
56265: LD_VAR 0 1
56269: PPUSH
56270: LD_VAR 0 2
56274: PPUSH
56275: CALL_OW 308
56279: IFFALSE 56297
// begin ComMoveToArea ( unit , goAway ) ;
56281: LD_VAR 0 1
56285: PPUSH
56286: LD_VAR 0 3
56290: PPUSH
56291: CALL_OW 113
// exit ;
56295: GO 56383
// end ; if task [ 1 ] [ 1 ] <> M then
56297: LD_VAR 0 7
56301: PUSH
56302: LD_INT 1
56304: ARRAY
56305: PUSH
56306: LD_INT 1
56308: ARRAY
56309: PUSH
56310: LD_STRING M
56312: NONEQUAL
56313: IFFALSE 56317
// exit ;
56315: GO 56383
// x := task [ 1 ] [ 2 ] ;
56317: LD_ADDR_VAR 0 5
56321: PUSH
56322: LD_VAR 0 7
56326: PUSH
56327: LD_INT 1
56329: ARRAY
56330: PUSH
56331: LD_INT 2
56333: ARRAY
56334: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56335: LD_ADDR_VAR 0 6
56339: PUSH
56340: LD_VAR 0 7
56344: PUSH
56345: LD_INT 1
56347: ARRAY
56348: PUSH
56349: LD_INT 3
56351: ARRAY
56352: ST_TO_ADDR
// if InArea ( x , y , area ) then
56353: LD_VAR 0 5
56357: PPUSH
56358: LD_VAR 0 6
56362: PPUSH
56363: LD_VAR 0 2
56367: PPUSH
56368: CALL_OW 309
56372: IFFALSE 56383
// ComStop ( unit ) ;
56374: LD_VAR 0 1
56378: PPUSH
56379: CALL_OW 141
// end ;
56383: LD_VAR 0 4
56387: RET
// export function Abs ( value ) ; begin
56388: LD_INT 0
56390: PPUSH
// result := value ;
56391: LD_ADDR_VAR 0 2
56395: PUSH
56396: LD_VAR 0 1
56400: ST_TO_ADDR
// if value < 0 then
56401: LD_VAR 0 1
56405: PUSH
56406: LD_INT 0
56408: LESS
56409: IFFALSE 56426
// result := value * - 1 ;
56411: LD_ADDR_VAR 0 2
56415: PUSH
56416: LD_VAR 0 1
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: MUL
56425: ST_TO_ADDR
// end ;
56426: LD_VAR 0 2
56430: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56431: LD_INT 0
56433: PPUSH
56434: PPUSH
56435: PPUSH
56436: PPUSH
56437: PPUSH
56438: PPUSH
56439: PPUSH
56440: PPUSH
// if not unit or not building then
56441: LD_VAR 0 1
56445: NOT
56446: IFTRUE 56455
56448: PUSH
56449: LD_VAR 0 2
56453: NOT
56454: OR
56455: IFFALSE 56459
// exit ;
56457: GO 56687
// x := GetX ( building ) ;
56459: LD_ADDR_VAR 0 4
56463: PUSH
56464: LD_VAR 0 2
56468: PPUSH
56469: CALL_OW 250
56473: ST_TO_ADDR
// y := GetY ( building ) ;
56474: LD_ADDR_VAR 0 6
56478: PUSH
56479: LD_VAR 0 2
56483: PPUSH
56484: CALL_OW 251
56488: ST_TO_ADDR
// d := GetDir ( building ) ;
56489: LD_ADDR_VAR 0 8
56493: PUSH
56494: LD_VAR 0 2
56498: PPUSH
56499: CALL_OW 254
56503: ST_TO_ADDR
// r := 4 ;
56504: LD_ADDR_VAR 0 9
56508: PUSH
56509: LD_INT 4
56511: ST_TO_ADDR
// for i := 1 to 5 do
56512: LD_ADDR_VAR 0 10
56516: PUSH
56517: DOUBLE
56518: LD_INT 1
56520: DEC
56521: ST_TO_ADDR
56522: LD_INT 5
56524: PUSH
56525: FOR_TO
56526: IFFALSE 56685
// begin _x := ShiftX ( x , d , r + i ) ;
56528: LD_ADDR_VAR 0 5
56532: PUSH
56533: LD_VAR 0 4
56537: PPUSH
56538: LD_VAR 0 8
56542: PPUSH
56543: LD_VAR 0 9
56547: PUSH
56548: LD_VAR 0 10
56552: PLUS
56553: PPUSH
56554: CALL_OW 272
56558: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56559: LD_ADDR_VAR 0 7
56563: PUSH
56564: LD_VAR 0 6
56568: PPUSH
56569: LD_VAR 0 8
56573: PPUSH
56574: LD_VAR 0 9
56578: PUSH
56579: LD_VAR 0 10
56583: PLUS
56584: PPUSH
56585: CALL_OW 273
56589: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56590: LD_VAR 0 5
56594: PPUSH
56595: LD_VAR 0 7
56599: PPUSH
56600: CALL_OW 488
56604: IFFALSE 56639
56606: PUSH
56607: LD_VAR 0 5
56611: PPUSH
56612: LD_VAR 0 7
56616: PPUSH
56617: CALL_OW 428
56621: PPUSH
56622: CALL_OW 247
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: IN
56637: NOT
56638: AND
56639: IFFALSE 56683
// begin ComMoveXY ( unit , _x , _y ) ;
56641: LD_VAR 0 1
56645: PPUSH
56646: LD_VAR 0 5
56650: PPUSH
56651: LD_VAR 0 7
56655: PPUSH
56656: CALL_OW 111
// result := [ _x , _y ] ;
56660: LD_ADDR_VAR 0 3
56664: PUSH
56665: LD_VAR 0 5
56669: PUSH
56670: LD_VAR 0 7
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// exit ;
56679: POP
56680: POP
56681: GO 56687
// end ; end ;
56683: GO 56525
56685: POP
56686: POP
// end ;
56687: LD_VAR 0 3
56691: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56692: LD_INT 0
56694: PPUSH
56695: PPUSH
56696: PPUSH
// result := 0 ;
56697: LD_ADDR_VAR 0 3
56701: PUSH
56702: LD_INT 0
56704: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56705: LD_VAR 0 1
56709: PUSH
56710: LD_INT 0
56712: LESS
56713: IFTRUE 56725
56715: PUSH
56716: LD_VAR 0 1
56720: PUSH
56721: LD_INT 8
56723: GREATER
56724: OR
56725: IFTRUE 56737
56727: PUSH
56728: LD_VAR 0 2
56732: PUSH
56733: LD_INT 0
56735: LESS
56736: OR
56737: IFTRUE 56749
56739: PUSH
56740: LD_VAR 0 2
56744: PUSH
56745: LD_INT 8
56747: GREATER
56748: OR
56749: IFFALSE 56753
// exit ;
56751: GO 56828
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56753: LD_ADDR_VAR 0 4
56757: PUSH
56758: LD_INT 22
56760: PUSH
56761: LD_VAR 0 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PPUSH
56770: CALL_OW 69
56774: PUSH
56775: FOR_IN
56776: IFFALSE 56826
// begin un := UnitShoot ( i ) ;
56778: LD_ADDR_VAR 0 5
56782: PUSH
56783: LD_VAR 0 4
56787: PPUSH
56788: CALL_OW 504
56792: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56793: LD_VAR 0 5
56797: PPUSH
56798: CALL_OW 255
56802: PUSH
56803: LD_VAR 0 1
56807: EQUAL
56808: IFFALSE 56824
// begin result := un ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_VAR 0 5
56819: ST_TO_ADDR
// exit ;
56820: POP
56821: POP
56822: GO 56828
// end ; end ;
56824: GO 56775
56826: POP
56827: POP
// end ;
56828: LD_VAR 0 3
56832: RET
// export function GetCargoBay ( units ) ; begin
56833: LD_INT 0
56835: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56836: LD_ADDR_VAR 0 2
56840: PUSH
56841: LD_VAR 0 1
56845: PPUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 34
56851: PUSH
56852: LD_INT 12
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 34
56861: PUSH
56862: LD_INT 51
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 34
56871: PUSH
56872: LD_INT 32
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 34
56881: PUSH
56882: LD_INT 89
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: PPUSH
56896: CALL_OW 72
56900: ST_TO_ADDR
// end ;
56901: LD_VAR 0 2
56905: RET
// export function Negate ( value ) ; begin
56906: LD_INT 0
56908: PPUSH
// result := not value ;
56909: LD_ADDR_VAR 0 2
56913: PUSH
56914: LD_VAR 0 1
56918: NOT
56919: ST_TO_ADDR
// end ;
56920: LD_VAR 0 2
56924: RET
// export function Inc ( value ) ; begin
56925: LD_INT 0
56927: PPUSH
// result := value + 1 ;
56928: LD_ADDR_VAR 0 2
56932: PUSH
56933: LD_VAR 0 1
56937: PUSH
56938: LD_INT 1
56940: PLUS
56941: ST_TO_ADDR
// end ;
56942: LD_VAR 0 2
56946: RET
// export function Dec ( value ) ; begin
56947: LD_INT 0
56949: PPUSH
// result := value - 1 ;
56950: LD_ADDR_VAR 0 2
56954: PUSH
56955: LD_VAR 0 1
56959: PUSH
56960: LD_INT 1
56962: MINUS
56963: ST_TO_ADDR
// end ;
56964: LD_VAR 0 2
56968: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56969: LD_INT 0
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56979: LD_VAR 0 1
56983: PPUSH
56984: LD_VAR 0 2
56988: PPUSH
56989: CALL_OW 488
56993: NOT
56994: IFTRUE 57013
56996: PUSH
56997: LD_VAR 0 3
57001: PPUSH
57002: LD_VAR 0 4
57006: PPUSH
57007: CALL_OW 488
57011: NOT
57012: OR
57013: IFFALSE 57026
// begin result := - 1 ;
57015: LD_ADDR_VAR 0 5
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: ST_TO_ADDR
// exit ;
57024: GO 57261
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57026: LD_ADDR_VAR 0 12
57030: PUSH
57031: LD_VAR 0 1
57035: PPUSH
57036: LD_VAR 0 2
57040: PPUSH
57041: LD_VAR 0 3
57045: PPUSH
57046: LD_VAR 0 4
57050: PPUSH
57051: CALL 56097 0 4
57055: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57056: LD_ADDR_VAR 0 11
57060: PUSH
57061: LD_VAR 0 1
57065: PPUSH
57066: LD_VAR 0 2
57070: PPUSH
57071: LD_VAR 0 12
57075: PUSH
57076: LD_INT 1
57078: ARRAY
57079: PPUSH
57080: LD_VAR 0 12
57084: PUSH
57085: LD_INT 2
57087: ARRAY
57088: PPUSH
57089: CALL_OW 298
57093: ST_TO_ADDR
// distance := 9999 ;
57094: LD_ADDR_VAR 0 10
57098: PUSH
57099: LD_INT 9999
57101: ST_TO_ADDR
// for i := 0 to 5 do
57102: LD_ADDR_VAR 0 6
57106: PUSH
57107: DOUBLE
57108: LD_INT 0
57110: DEC
57111: ST_TO_ADDR
57112: LD_INT 5
57114: PUSH
57115: FOR_TO
57116: IFFALSE 57259
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57118: LD_ADDR_VAR 0 7
57122: PUSH
57123: LD_VAR 0 1
57127: PPUSH
57128: LD_VAR 0 6
57132: PPUSH
57133: LD_VAR 0 11
57137: PPUSH
57138: CALL_OW 272
57142: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57143: LD_ADDR_VAR 0 8
57147: PUSH
57148: LD_VAR 0 2
57152: PPUSH
57153: LD_VAR 0 6
57157: PPUSH
57158: LD_VAR 0 11
57162: PPUSH
57163: CALL_OW 273
57167: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57168: LD_VAR 0 7
57172: PPUSH
57173: LD_VAR 0 8
57177: PPUSH
57178: CALL_OW 488
57182: NOT
57183: IFFALSE 57187
// continue ;
57185: GO 57115
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57187: LD_ADDR_VAR 0 9
57191: PUSH
57192: LD_VAR 0 12
57196: PUSH
57197: LD_INT 1
57199: ARRAY
57200: PPUSH
57201: LD_VAR 0 12
57205: PUSH
57206: LD_INT 2
57208: ARRAY
57209: PPUSH
57210: LD_VAR 0 7
57214: PPUSH
57215: LD_VAR 0 8
57219: PPUSH
57220: CALL_OW 298
57224: ST_TO_ADDR
// if tmp < distance then
57225: LD_VAR 0 9
57229: PUSH
57230: LD_VAR 0 10
57234: LESS
57235: IFFALSE 57257
// begin result := i ;
57237: LD_ADDR_VAR 0 5
57241: PUSH
57242: LD_VAR 0 6
57246: ST_TO_ADDR
// distance := tmp ;
57247: LD_ADDR_VAR 0 10
57251: PUSH
57252: LD_VAR 0 9
57256: ST_TO_ADDR
// end ; end ;
57257: GO 57115
57259: POP
57260: POP
// end ;
57261: LD_VAR 0 5
57265: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57266: LD_INT 0
57268: PPUSH
57269: PPUSH
// if not driver or not IsInUnit ( driver ) then
57270: LD_VAR 0 1
57274: NOT
57275: IFTRUE 57289
57277: PUSH
57278: LD_VAR 0 1
57282: PPUSH
57283: CALL_OW 310
57287: NOT
57288: OR
57289: IFFALSE 57293
// exit ;
57291: GO 57383
// vehicle := IsInUnit ( driver ) ;
57293: LD_ADDR_VAR 0 3
57297: PUSH
57298: LD_VAR 0 1
57302: PPUSH
57303: CALL_OW 310
57307: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57308: LD_VAR 0 1
57312: PPUSH
57313: LD_STRING \
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: PUSH
57343: LD_STRING E
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_VAR 0 3
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PPUSH
57379: CALL_OW 446
// end ;
57383: LD_VAR 0 2
57387: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57388: LD_INT 0
57390: PPUSH
57391: PPUSH
// if not driver or not IsInUnit ( driver ) then
57392: LD_VAR 0 1
57396: NOT
57397: IFTRUE 57411
57399: PUSH
57400: LD_VAR 0 1
57404: PPUSH
57405: CALL_OW 310
57409: NOT
57410: OR
57411: IFFALSE 57415
// exit ;
57413: GO 57505
// vehicle := IsInUnit ( driver ) ;
57415: LD_ADDR_VAR 0 3
57419: PUSH
57420: LD_VAR 0 1
57424: PPUSH
57425: CALL_OW 310
57429: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57430: LD_VAR 0 1
57434: PPUSH
57435: LD_STRING \
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: PUSH
57465: LD_STRING E
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_VAR 0 3
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PPUSH
57501: CALL_OW 447
// end ;
57505: LD_VAR 0 2
57509: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57510: LD_INT 0
57512: PPUSH
57513: PPUSH
57514: PPUSH
// tmp := [ ] ;
57515: LD_ADDR_VAR 0 5
57519: PUSH
57520: EMPTY
57521: ST_TO_ADDR
// for i in units do
57522: LD_ADDR_VAR 0 4
57526: PUSH
57527: LD_VAR 0 1
57531: PUSH
57532: FOR_IN
57533: IFFALSE 57571
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57535: LD_ADDR_VAR 0 5
57539: PUSH
57540: LD_VAR 0 5
57544: PPUSH
57545: LD_VAR 0 5
57549: PUSH
57550: LD_INT 1
57552: PLUS
57553: PPUSH
57554: LD_VAR 0 4
57558: PPUSH
57559: CALL_OW 256
57563: PPUSH
57564: CALL_OW 2
57568: ST_TO_ADDR
57569: GO 57532
57571: POP
57572: POP
// if not tmp then
57573: LD_VAR 0 5
57577: NOT
57578: IFFALSE 57582
// exit ;
57580: GO 57630
// if asc then
57582: LD_VAR 0 2
57586: IFFALSE 57610
// result := SortListByListAsc ( units , tmp ) else
57588: LD_ADDR_VAR 0 3
57592: PUSH
57593: LD_VAR 0 1
57597: PPUSH
57598: LD_VAR 0 5
57602: PPUSH
57603: CALL_OW 76
57607: ST_TO_ADDR
57608: GO 57630
// result := SortListByListDesc ( units , tmp ) ;
57610: LD_ADDR_VAR 0 3
57614: PUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: LD_VAR 0 5
57624: PPUSH
57625: CALL_OW 77
57629: ST_TO_ADDR
// end ;
57630: LD_VAR 0 3
57634: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57635: LD_INT 0
57637: PPUSH
57638: PPUSH
// task := GetTaskList ( mech ) ;
57639: LD_ADDR_VAR 0 4
57643: PUSH
57644: LD_VAR 0 1
57648: PPUSH
57649: CALL_OW 437
57653: ST_TO_ADDR
// if not task then
57654: LD_VAR 0 4
57658: NOT
57659: IFFALSE 57663
// exit ;
57661: GO 57707
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57663: LD_ADDR_VAR 0 3
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: PUSH
57677: LD_INT 1
57679: ARRAY
57680: PUSH
57681: LD_STRING r
57683: EQUAL
57684: IFFALSE 57706
57686: PUSH
57687: LD_VAR 0 4
57691: PUSH
57692: LD_INT 1
57694: ARRAY
57695: PUSH
57696: LD_INT 4
57698: ARRAY
57699: PUSH
57700: LD_VAR 0 2
57704: EQUAL
57705: AND
57706: ST_TO_ADDR
// end ;
57707: LD_VAR 0 3
57711: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57712: LD_INT 0
57714: PPUSH
// SetDir ( unit , d ) ;
57715: LD_VAR 0 1
57719: PPUSH
57720: LD_VAR 0 4
57724: PPUSH
57725: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57729: LD_ADDR_VAR 0 6
57733: PUSH
57734: LD_VAR 0 1
57738: PPUSH
57739: LD_VAR 0 2
57743: PPUSH
57744: LD_VAR 0 3
57748: PPUSH
57749: LD_VAR 0 5
57753: PPUSH
57754: CALL_OW 48
57758: ST_TO_ADDR
// end ;
57759: LD_VAR 0 6
57763: RET
// export function ToNaturalNumber ( number ) ; begin
57764: LD_INT 0
57766: PPUSH
// result := number div 1 ;
57767: LD_ADDR_VAR 0 2
57771: PUSH
57772: LD_VAR 0 1
57776: PUSH
57777: LD_INT 1
57779: DIV
57780: ST_TO_ADDR
// if number < 0 then
57781: LD_VAR 0 1
57785: PUSH
57786: LD_INT 0
57788: LESS
57789: IFFALSE 57799
// result := 0 ;
57791: LD_ADDR_VAR 0 2
57795: PUSH
57796: LD_INT 0
57798: ST_TO_ADDR
// end ;
57799: LD_VAR 0 2
57803: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57804: LD_INT 0
57806: PPUSH
57807: PPUSH
57808: PPUSH
// if not buildings then
57809: LD_VAR 0 1
57813: NOT
57814: IFFALSE 57818
// exit ;
57816: GO 57933
// tmp := [ ] ;
57818: LD_ADDR_VAR 0 5
57822: PUSH
57823: EMPTY
57824: ST_TO_ADDR
// for b in buildings do
57825: LD_ADDR_VAR 0 4
57829: PUSH
57830: LD_VAR 0 1
57834: PUSH
57835: FOR_IN
57836: IFFALSE 57874
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57838: LD_ADDR_VAR 0 5
57842: PUSH
57843: LD_VAR 0 5
57847: PPUSH
57848: LD_VAR 0 5
57852: PUSH
57853: LD_INT 1
57855: PLUS
57856: PPUSH
57857: LD_VAR 0 4
57861: PPUSH
57862: CALL_OW 266
57866: PPUSH
57867: CALL_OW 1
57871: ST_TO_ADDR
57872: GO 57835
57874: POP
57875: POP
// if not tmp then
57876: LD_VAR 0 5
57880: NOT
57881: IFFALSE 57885
// exit ;
57883: GO 57933
// if asc then
57885: LD_VAR 0 2
57889: IFFALSE 57913
// result := SortListByListAsc ( buildings , tmp ) else
57891: LD_ADDR_VAR 0 3
57895: PUSH
57896: LD_VAR 0 1
57900: PPUSH
57901: LD_VAR 0 5
57905: PPUSH
57906: CALL_OW 76
57910: ST_TO_ADDR
57911: GO 57933
// result := SortListByListDesc ( buildings , tmp ) ;
57913: LD_ADDR_VAR 0 3
57917: PUSH
57918: LD_VAR 0 1
57922: PPUSH
57923: LD_VAR 0 5
57927: PPUSH
57928: CALL_OW 77
57932: ST_TO_ADDR
// end ;
57933: LD_VAR 0 3
57937: RET
// export function SortByClass ( units , class ) ; var un ; begin
57938: LD_INT 0
57940: PPUSH
57941: PPUSH
// if not units or not class then
57942: LD_VAR 0 1
57946: NOT
57947: IFTRUE 57956
57949: PUSH
57950: LD_VAR 0 2
57954: NOT
57955: OR
57956: IFFALSE 57960
// exit ;
57958: GO 58055
// result := [ ] ;
57960: LD_ADDR_VAR 0 3
57964: PUSH
57965: EMPTY
57966: ST_TO_ADDR
// for un in units do
57967: LD_ADDR_VAR 0 4
57971: PUSH
57972: LD_VAR 0 1
57976: PUSH
57977: FOR_IN
57978: IFFALSE 58053
// if GetClass ( un ) = class then
57980: LD_VAR 0 4
57984: PPUSH
57985: CALL_OW 257
57989: PUSH
57990: LD_VAR 0 2
57994: EQUAL
57995: IFFALSE 58022
// result := Insert ( result , 1 , un ) else
57997: LD_ADDR_VAR 0 3
58001: PUSH
58002: LD_VAR 0 3
58006: PPUSH
58007: LD_INT 1
58009: PPUSH
58010: LD_VAR 0 4
58014: PPUSH
58015: CALL_OW 2
58019: ST_TO_ADDR
58020: GO 58051
// result := Replace ( result , result + 1 , un ) ;
58022: LD_ADDR_VAR 0 3
58026: PUSH
58027: LD_VAR 0 3
58031: PPUSH
58032: LD_VAR 0 3
58036: PUSH
58037: LD_INT 1
58039: PLUS
58040: PPUSH
58041: LD_VAR 0 4
58045: PPUSH
58046: CALL_OW 1
58050: ST_TO_ADDR
58051: GO 57977
58053: POP
58054: POP
// end ;
58055: LD_VAR 0 3
58059: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58060: LD_INT 0
58062: PPUSH
58063: PPUSH
58064: PPUSH
58065: PPUSH
58066: PPUSH
58067: PPUSH
58068: PPUSH
// result := [ ] ;
58069: LD_ADDR_VAR 0 4
58073: PUSH
58074: EMPTY
58075: ST_TO_ADDR
// if x - r < 0 then
58076: LD_VAR 0 1
58080: PUSH
58081: LD_VAR 0 3
58085: MINUS
58086: PUSH
58087: LD_INT 0
58089: LESS
58090: IFFALSE 58102
// min_x := 0 else
58092: LD_ADDR_VAR 0 8
58096: PUSH
58097: LD_INT 0
58099: ST_TO_ADDR
58100: GO 58118
// min_x := x - r ;
58102: LD_ADDR_VAR 0 8
58106: PUSH
58107: LD_VAR 0 1
58111: PUSH
58112: LD_VAR 0 3
58116: MINUS
58117: ST_TO_ADDR
// if y - r < 0 then
58118: LD_VAR 0 2
58122: PUSH
58123: LD_VAR 0 3
58127: MINUS
58128: PUSH
58129: LD_INT 0
58131: LESS
58132: IFFALSE 58144
// min_y := 0 else
58134: LD_ADDR_VAR 0 7
58138: PUSH
58139: LD_INT 0
58141: ST_TO_ADDR
58142: GO 58160
// min_y := y - r ;
58144: LD_ADDR_VAR 0 7
58148: PUSH
58149: LD_VAR 0 2
58153: PUSH
58154: LD_VAR 0 3
58158: MINUS
58159: ST_TO_ADDR
// max_x := x + r ;
58160: LD_ADDR_VAR 0 9
58164: PUSH
58165: LD_VAR 0 1
58169: PUSH
58170: LD_VAR 0 3
58174: PLUS
58175: ST_TO_ADDR
// max_y := y + r ;
58176: LD_ADDR_VAR 0 10
58180: PUSH
58181: LD_VAR 0 2
58185: PUSH
58186: LD_VAR 0 3
58190: PLUS
58191: ST_TO_ADDR
// for _x = min_x to max_x do
58192: LD_ADDR_VAR 0 5
58196: PUSH
58197: DOUBLE
58198: LD_VAR 0 8
58202: DEC
58203: ST_TO_ADDR
58204: LD_VAR 0 9
58208: PUSH
58209: FOR_TO
58210: IFFALSE 58311
// for _y = min_y to max_y do
58212: LD_ADDR_VAR 0 6
58216: PUSH
58217: DOUBLE
58218: LD_VAR 0 7
58222: DEC
58223: ST_TO_ADDR
58224: LD_VAR 0 10
58228: PUSH
58229: FOR_TO
58230: IFFALSE 58307
// begin if not ValidHex ( _x , _y ) then
58232: LD_VAR 0 5
58236: PPUSH
58237: LD_VAR 0 6
58241: PPUSH
58242: CALL_OW 488
58246: NOT
58247: IFFALSE 58251
// continue ;
58249: GO 58229
// if GetResourceTypeXY ( _x , _y ) then
58251: LD_VAR 0 5
58255: PPUSH
58256: LD_VAR 0 6
58260: PPUSH
58261: CALL_OW 283
58265: IFFALSE 58305
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58267: LD_ADDR_VAR 0 4
58271: PUSH
58272: LD_VAR 0 4
58276: PPUSH
58277: LD_VAR 0 4
58281: PUSH
58282: LD_INT 1
58284: PLUS
58285: PPUSH
58286: LD_VAR 0 5
58290: PUSH
58291: LD_VAR 0 6
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PPUSH
58300: CALL_OW 1
58304: ST_TO_ADDR
// end ;
58305: GO 58229
58307: POP
58308: POP
58309: GO 58209
58311: POP
58312: POP
// end ;
58313: LD_VAR 0 4
58317: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58318: LD_INT 0
58320: PPUSH
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
58326: PPUSH
58327: PPUSH
// if not units then
58328: LD_VAR 0 1
58332: NOT
58333: IFFALSE 58337
// exit ;
58335: GO 58869
// result := UnitFilter ( units , [ f_ok ] ) ;
58337: LD_ADDR_VAR 0 3
58341: PUSH
58342: LD_VAR 0 1
58346: PPUSH
58347: LD_INT 50
58349: PUSH
58350: EMPTY
58351: LIST
58352: PPUSH
58353: CALL_OW 72
58357: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58358: LD_ADDR_VAR 0 8
58362: PUSH
58363: LD_VAR 0 1
58367: PUSH
58368: LD_INT 1
58370: ARRAY
58371: PPUSH
58372: CALL_OW 255
58376: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58377: LD_ADDR_VAR 0 10
58381: PUSH
58382: LD_INT 29
58384: PUSH
58385: LD_INT 91
58387: PUSH
58388: LD_INT 49
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// if not result then
58396: LD_VAR 0 3
58400: NOT
58401: IFFALSE 58405
// exit ;
58403: GO 58869
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58405: LD_ADDR_VAR 0 5
58409: PUSH
58410: LD_INT 81
58412: PUSH
58413: LD_VAR 0 8
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PPUSH
58422: CALL_OW 69
58426: ST_TO_ADDR
// for i in result do
58427: LD_ADDR_VAR 0 4
58431: PUSH
58432: LD_VAR 0 3
58436: PUSH
58437: FOR_IN
58438: IFFALSE 58867
// begin tag := GetTag ( i ) + 1 ;
58440: LD_ADDR_VAR 0 9
58444: PUSH
58445: LD_VAR 0 4
58449: PPUSH
58450: CALL_OW 110
58454: PUSH
58455: LD_INT 1
58457: PLUS
58458: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58459: LD_ADDR_VAR 0 7
58463: PUSH
58464: LD_VAR 0 4
58468: PPUSH
58469: CALL_OW 250
58473: PPUSH
58474: LD_VAR 0 4
58478: PPUSH
58479: CALL_OW 251
58483: PPUSH
58484: LD_INT 4
58486: PPUSH
58487: CALL 58060 0 3
58491: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58492: LD_VAR 0 4
58496: PPUSH
58497: CALL_OW 247
58501: PUSH
58502: LD_INT 2
58504: EQUAL
58505: IFFALSE 58517
58507: PUSH
58508: LD_VAR 0 7
58512: PUSH
58513: LD_INT 2
58515: GREATER
58516: AND
58517: IFFALSE 58537
58519: PUSH
58520: LD_VAR 0 4
58524: PPUSH
58525: CALL_OW 264
58529: PUSH
58530: LD_VAR 0 10
58534: IN
58535: NOT
58536: AND
58537: IFFALSE 58576
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58539: LD_VAR 0 4
58543: PPUSH
58544: LD_VAR 0 7
58548: PUSH
58549: LD_INT 1
58551: ARRAY
58552: PUSH
58553: LD_INT 1
58555: ARRAY
58556: PPUSH
58557: LD_VAR 0 7
58561: PUSH
58562: LD_INT 1
58564: ARRAY
58565: PUSH
58566: LD_INT 2
58568: ARRAY
58569: PPUSH
58570: CALL_OW 116
58574: GO 58865
// if path > tag then
58576: LD_VAR 0 2
58580: PUSH
58581: LD_VAR 0 9
58585: GREATER
58586: IFFALSE 58794
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58588: LD_ADDR_VAR 0 6
58592: PUSH
58593: LD_VAR 0 5
58597: PPUSH
58598: LD_INT 91
58600: PUSH
58601: LD_VAR 0 4
58605: PUSH
58606: LD_INT 8
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: PPUSH
58614: CALL_OW 72
58618: ST_TO_ADDR
// if nearEnemy then
58619: LD_VAR 0 6
58623: IFFALSE 58692
// begin if GetWeapon ( i ) = ru_time_lapser then
58625: LD_VAR 0 4
58629: PPUSH
58630: CALL_OW 264
58634: PUSH
58635: LD_INT 49
58637: EQUAL
58638: IFFALSE 58666
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58640: LD_VAR 0 4
58644: PPUSH
58645: LD_VAR 0 6
58649: PPUSH
58650: LD_VAR 0 4
58654: PPUSH
58655: CALL_OW 74
58659: PPUSH
58660: CALL_OW 112
58664: GO 58690
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58666: LD_VAR 0 4
58670: PPUSH
58671: LD_VAR 0 6
58675: PPUSH
58676: LD_VAR 0 4
58680: PPUSH
58681: CALL_OW 74
58685: PPUSH
58686: CALL 59950 0 2
// end else
58690: GO 58792
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58692: LD_VAR 0 4
58696: PPUSH
58697: LD_VAR 0 2
58701: PUSH
58702: LD_VAR 0 9
58706: ARRAY
58707: PUSH
58708: LD_INT 1
58710: ARRAY
58711: PPUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_VAR 0 9
58721: ARRAY
58722: PUSH
58723: LD_INT 2
58725: ARRAY
58726: PPUSH
58727: CALL_OW 297
58731: PUSH
58732: LD_INT 6
58734: GREATER
58735: IFFALSE 58778
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58737: LD_VAR 0 4
58741: PPUSH
58742: LD_VAR 0 2
58746: PUSH
58747: LD_VAR 0 9
58751: ARRAY
58752: PUSH
58753: LD_INT 1
58755: ARRAY
58756: PPUSH
58757: LD_VAR 0 2
58761: PUSH
58762: LD_VAR 0 9
58766: ARRAY
58767: PUSH
58768: LD_INT 2
58770: ARRAY
58771: PPUSH
58772: CALL_OW 114
58776: GO 58792
// SetTag ( i , tag ) ;
58778: LD_VAR 0 4
58782: PPUSH
58783: LD_VAR 0 9
58787: PPUSH
58788: CALL_OW 109
// end else
58792: GO 58865
// if enemy then
58794: LD_VAR 0 5
58798: IFFALSE 58865
// begin if GetWeapon ( i ) = ru_time_lapser then
58800: LD_VAR 0 4
58804: PPUSH
58805: CALL_OW 264
58809: PUSH
58810: LD_INT 49
58812: EQUAL
58813: IFFALSE 58841
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58815: LD_VAR 0 4
58819: PPUSH
58820: LD_VAR 0 5
58824: PPUSH
58825: LD_VAR 0 4
58829: PPUSH
58830: CALL_OW 74
58834: PPUSH
58835: CALL_OW 112
58839: GO 58865
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58841: LD_VAR 0 4
58845: PPUSH
58846: LD_VAR 0 5
58850: PPUSH
58851: LD_VAR 0 4
58855: PPUSH
58856: CALL_OW 74
58860: PPUSH
58861: CALL 59950 0 2
// end ; end ;
58865: GO 58437
58867: POP
58868: POP
// end ;
58869: LD_VAR 0 3
58873: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
58878: PPUSH
// if not unit or IsInUnit ( unit ) then
58879: LD_VAR 0 1
58883: NOT
58884: IFTRUE 58897
58886: PUSH
58887: LD_VAR 0 1
58891: PPUSH
58892: CALL_OW 310
58896: OR
58897: IFFALSE 58901
// exit ;
58899: GO 58992
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58901: LD_ADDR_VAR 0 4
58905: PUSH
58906: LD_VAR 0 1
58910: PPUSH
58911: CALL_OW 250
58915: PPUSH
58916: LD_VAR 0 2
58920: PPUSH
58921: LD_INT 1
58923: PPUSH
58924: CALL_OW 272
58928: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58929: LD_ADDR_VAR 0 5
58933: PUSH
58934: LD_VAR 0 1
58938: PPUSH
58939: CALL_OW 251
58943: PPUSH
58944: LD_VAR 0 2
58948: PPUSH
58949: LD_INT 1
58951: PPUSH
58952: CALL_OW 273
58956: ST_TO_ADDR
// if ValidHex ( x , y ) then
58957: LD_VAR 0 4
58961: PPUSH
58962: LD_VAR 0 5
58966: PPUSH
58967: CALL_OW 488
58971: IFFALSE 58992
// ComTurnXY ( unit , x , y ) ;
58973: LD_VAR 0 1
58977: PPUSH
58978: LD_VAR 0 4
58982: PPUSH
58983: LD_VAR 0 5
58987: PPUSH
58988: CALL_OW 118
// end ;
58992: LD_VAR 0 3
58996: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58997: LD_INT 0
58999: PPUSH
59000: PPUSH
// result := false ;
59001: LD_ADDR_VAR 0 3
59005: PUSH
59006: LD_INT 0
59008: ST_TO_ADDR
// if not units then
59009: LD_VAR 0 2
59013: NOT
59014: IFFALSE 59018
// exit ;
59016: GO 59063
// for i in units do
59018: LD_ADDR_VAR 0 4
59022: PUSH
59023: LD_VAR 0 2
59027: PUSH
59028: FOR_IN
59029: IFFALSE 59061
// if See ( side , i ) then
59031: LD_VAR 0 1
59035: PPUSH
59036: LD_VAR 0 4
59040: PPUSH
59041: CALL_OW 292
59045: IFFALSE 59059
// begin result := true ;
59047: LD_ADDR_VAR 0 3
59051: PUSH
59052: LD_INT 1
59054: ST_TO_ADDR
// exit ;
59055: POP
59056: POP
59057: GO 59063
// end ;
59059: GO 59028
59061: POP
59062: POP
// end ;
59063: LD_VAR 0 3
59067: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59068: LD_INT 0
59070: PPUSH
59071: PPUSH
59072: PPUSH
59073: PPUSH
// if not unit or not points then
59074: LD_VAR 0 1
59078: NOT
59079: IFTRUE 59088
59081: PUSH
59082: LD_VAR 0 2
59086: NOT
59087: OR
59088: IFFALSE 59092
// exit ;
59090: GO 59182
// dist := 99999 ;
59092: LD_ADDR_VAR 0 5
59096: PUSH
59097: LD_INT 99999
59099: ST_TO_ADDR
// for i in points do
59100: LD_ADDR_VAR 0 4
59104: PUSH
59105: LD_VAR 0 2
59109: PUSH
59110: FOR_IN
59111: IFFALSE 59180
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59113: LD_ADDR_VAR 0 6
59117: PUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: LD_VAR 0 4
59127: PUSH
59128: LD_INT 1
59130: ARRAY
59131: PPUSH
59132: LD_VAR 0 4
59136: PUSH
59137: LD_INT 2
59139: ARRAY
59140: PPUSH
59141: CALL_OW 297
59145: ST_TO_ADDR
// if tmpDist < dist then
59146: LD_VAR 0 6
59150: PUSH
59151: LD_VAR 0 5
59155: LESS
59156: IFFALSE 59178
// begin result := i ;
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_VAR 0 4
59167: ST_TO_ADDR
// dist := tmpDist ;
59168: LD_ADDR_VAR 0 5
59172: PUSH
59173: LD_VAR 0 6
59177: ST_TO_ADDR
// end ; end ;
59178: GO 59110
59180: POP
59181: POP
// end ;
59182: LD_VAR 0 3
59186: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59187: LD_INT 0
59189: PPUSH
// uc_side := side ;
59190: LD_ADDR_OWVAR 20
59194: PUSH
59195: LD_VAR 0 1
59199: ST_TO_ADDR
// uc_nation := 3 ;
59200: LD_ADDR_OWVAR 21
59204: PUSH
59205: LD_INT 3
59207: ST_TO_ADDR
// vc_chassis := 25 ;
59208: LD_ADDR_OWVAR 37
59212: PUSH
59213: LD_INT 25
59215: ST_TO_ADDR
// vc_engine := engine_siberite ;
59216: LD_ADDR_OWVAR 39
59220: PUSH
59221: LD_INT 3
59223: ST_TO_ADDR
// vc_control := control_computer ;
59224: LD_ADDR_OWVAR 38
59228: PUSH
59229: LD_INT 3
59231: ST_TO_ADDR
// vc_weapon := 59 ;
59232: LD_ADDR_OWVAR 40
59236: PUSH
59237: LD_INT 59
59239: ST_TO_ADDR
// result := CreateVehicle ;
59240: LD_ADDR_VAR 0 5
59244: PUSH
59245: CALL_OW 45
59249: ST_TO_ADDR
// SetDir ( result , d ) ;
59250: LD_VAR 0 5
59254: PPUSH
59255: LD_VAR 0 4
59259: PPUSH
59260: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59264: LD_VAR 0 5
59268: PPUSH
59269: LD_VAR 0 2
59273: PPUSH
59274: LD_VAR 0 3
59278: PPUSH
59279: LD_INT 0
59281: PPUSH
59282: CALL_OW 48
// end ;
59286: LD_VAR 0 5
59290: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59291: LD_INT 0
59293: PPUSH
59294: PPUSH
59295: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59296: LD_ADDR_VAR 0 2
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59319: LD_VAR 0 1
59323: NOT
59324: IFTRUE 59357
59326: PUSH
59327: LD_VAR 0 1
59331: PPUSH
59332: CALL_OW 264
59336: PUSH
59337: LD_INT 12
59339: PUSH
59340: LD_INT 51
59342: PUSH
59343: LD_INT 32
59345: PUSH
59346: LD_INT 89
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: IN
59355: NOT
59356: OR
59357: IFFALSE 59361
// exit ;
59359: GO 59459
// for i := 1 to 3 do
59361: LD_ADDR_VAR 0 3
59365: PUSH
59366: DOUBLE
59367: LD_INT 1
59369: DEC
59370: ST_TO_ADDR
59371: LD_INT 3
59373: PUSH
59374: FOR_TO
59375: IFFALSE 59457
// begin tmp := GetCargo ( cargo , i ) ;
59377: LD_ADDR_VAR 0 4
59381: PUSH
59382: LD_VAR 0 1
59386: PPUSH
59387: LD_VAR 0 3
59391: PPUSH
59392: CALL_OW 289
59396: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59397: LD_ADDR_VAR 0 2
59401: PUSH
59402: LD_VAR 0 2
59406: PPUSH
59407: LD_VAR 0 3
59411: PPUSH
59412: LD_VAR 0 4
59416: PPUSH
59417: CALL_OW 1
59421: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: LD_VAR 0 2
59431: PPUSH
59432: LD_INT 4
59434: PPUSH
59435: LD_VAR 0 2
59439: PUSH
59440: LD_INT 4
59442: ARRAY
59443: PUSH
59444: LD_VAR 0 4
59448: PLUS
59449: PPUSH
59450: CALL_OW 1
59454: ST_TO_ADDR
// end ;
59455: GO 59374
59457: POP
59458: POP
// end ;
59459: LD_VAR 0 2
59463: RET
// export function Length ( array ) ; begin
59464: LD_INT 0
59466: PPUSH
// result := array + 0 ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: LD_VAR 0 1
59476: PUSH
59477: LD_INT 0
59479: PLUS
59480: ST_TO_ADDR
// end ;
59481: LD_VAR 0 2
59485: RET
// export function PrepareArray ( array ) ; begin
59486: LD_INT 0
59488: PPUSH
// result := array diff 0 ;
59489: LD_ADDR_VAR 0 2
59493: PUSH
59494: LD_VAR 0 1
59498: PUSH
59499: LD_INT 0
59501: DIFF
59502: ST_TO_ADDR
// if not result [ 1 ] then
59503: LD_VAR 0 2
59507: PUSH
59508: LD_INT 1
59510: ARRAY
59511: NOT
59512: IFFALSE 59532
// result := Delete ( result , 1 ) ;
59514: LD_ADDR_VAR 0 2
59518: PUSH
59519: LD_VAR 0 2
59523: PPUSH
59524: LD_INT 1
59526: PPUSH
59527: CALL_OW 3
59531: ST_TO_ADDR
// end ;
59532: LD_VAR 0 2
59536: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59537: LD_INT 0
59539: PPUSH
59540: PPUSH
59541: PPUSH
59542: PPUSH
// sibRocketRange := 25 ;
59543: LD_ADDR_VAR 0 6
59547: PUSH
59548: LD_INT 25
59550: ST_TO_ADDR
// result := false ;
59551: LD_ADDR_VAR 0 4
59555: PUSH
59556: LD_INT 0
59558: ST_TO_ADDR
// for i := 0 to 5 do
59559: LD_ADDR_VAR 0 5
59563: PUSH
59564: DOUBLE
59565: LD_INT 0
59567: DEC
59568: ST_TO_ADDR
59569: LD_INT 5
59571: PUSH
59572: FOR_TO
59573: IFFALSE 59640
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59575: LD_VAR 0 1
59579: PPUSH
59580: LD_VAR 0 5
59584: PPUSH
59585: LD_VAR 0 6
59589: PPUSH
59590: CALL_OW 272
59594: PPUSH
59595: LD_VAR 0 2
59599: PPUSH
59600: LD_VAR 0 5
59604: PPUSH
59605: LD_VAR 0 6
59609: PPUSH
59610: CALL_OW 273
59614: PPUSH
59615: LD_VAR 0 3
59619: PPUSH
59620: CALL_OW 309
59624: IFFALSE 59638
// begin result := true ;
59626: LD_ADDR_VAR 0 4
59630: PUSH
59631: LD_INT 1
59633: ST_TO_ADDR
// exit ;
59634: POP
59635: POP
59636: GO 59642
// end ;
59638: GO 59572
59640: POP
59641: POP
// end ;
59642: LD_VAR 0 4
59646: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59647: LD_INT 0
59649: PPUSH
59650: PPUSH
59651: PPUSH
// if btype = b_depot then
59652: LD_VAR 0 2
59656: PUSH
59657: LD_INT 0
59659: EQUAL
59660: IFFALSE 59672
// begin result := true ;
59662: LD_ADDR_VAR 0 3
59666: PUSH
59667: LD_INT 1
59669: ST_TO_ADDR
// exit ;
59670: GO 59792
// end ; pom := GetBase ( depot ) ;
59672: LD_ADDR_VAR 0 4
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL_OW 274
59686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59687: LD_ADDR_VAR 0 5
59691: PUSH
59692: LD_VAR 0 2
59696: PPUSH
59697: LD_VAR 0 1
59701: PPUSH
59702: CALL_OW 248
59706: PPUSH
59707: CALL_OW 450
59711: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59712: LD_ADDR_VAR 0 3
59716: PUSH
59717: LD_VAR 0 4
59721: PPUSH
59722: LD_INT 1
59724: PPUSH
59725: CALL_OW 275
59729: PUSH
59730: LD_VAR 0 5
59734: PUSH
59735: LD_INT 1
59737: ARRAY
59738: GREATEREQUAL
59739: IFFALSE 59765
59741: PUSH
59742: LD_VAR 0 4
59746: PPUSH
59747: LD_INT 2
59749: PPUSH
59750: CALL_OW 275
59754: PUSH
59755: LD_VAR 0 5
59759: PUSH
59760: LD_INT 2
59762: ARRAY
59763: GREATEREQUAL
59764: AND
59765: IFFALSE 59791
59767: PUSH
59768: LD_VAR 0 4
59772: PPUSH
59773: LD_INT 3
59775: PPUSH
59776: CALL_OW 275
59780: PUSH
59781: LD_VAR 0 5
59785: PUSH
59786: LD_INT 3
59788: ARRAY
59789: GREATEREQUAL
59790: AND
59791: ST_TO_ADDR
// end ;
59792: LD_VAR 0 3
59796: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59797: LD_INT 0
59799: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59800: LD_VAR 0 1
59804: PPUSH
59805: LD_VAR 0 2
59809: PPUSH
59810: LD_INT 0
59812: PPUSH
59813: LD_INT 0
59815: PPUSH
59816: LD_INT 1
59818: PPUSH
59819: LD_INT 0
59821: PPUSH
59822: CALL_OW 587
// end ;
59826: LD_VAR 0 3
59830: RET
// export function CenterOnNow ( unit ) ; begin
59831: LD_INT 0
59833: PPUSH
// result := IsInUnit ( unit ) ;
59834: LD_ADDR_VAR 0 2
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: CALL_OW 310
59848: ST_TO_ADDR
// if not result then
59849: LD_VAR 0 2
59853: NOT
59854: IFFALSE 59866
// result := unit ;
59856: LD_ADDR_VAR 0 2
59860: PUSH
59861: LD_VAR 0 1
59865: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59866: LD_VAR 0 1
59870: PPUSH
59871: CALL_OW 87
// end ;
59875: LD_VAR 0 2
59879: RET
// export function ComMoveHex ( unit , hex ) ; begin
59880: LD_INT 0
59882: PPUSH
// if not hex then
59883: LD_VAR 0 2
59887: NOT
59888: IFFALSE 59892
// exit ;
59890: GO 59945
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59892: LD_VAR 0 2
59896: PUSH
59897: LD_INT 1
59899: ARRAY
59900: PPUSH
59901: LD_VAR 0 2
59905: PUSH
59906: LD_INT 2
59908: ARRAY
59909: PPUSH
59910: CALL_OW 428
59914: IFFALSE 59918
// exit ;
59916: GO 59945
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59918: LD_VAR 0 1
59922: PPUSH
59923: LD_VAR 0 2
59927: PUSH
59928: LD_INT 1
59930: ARRAY
59931: PPUSH
59932: LD_VAR 0 2
59936: PUSH
59937: LD_INT 2
59939: ARRAY
59940: PPUSH
59941: CALL_OW 111
// end ;
59945: LD_VAR 0 3
59949: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59950: LD_INT 0
59952: PPUSH
59953: PPUSH
59954: PPUSH
// if not unit or not enemy then
59955: LD_VAR 0 1
59959: NOT
59960: IFTRUE 59969
59962: PUSH
59963: LD_VAR 0 2
59967: NOT
59968: OR
59969: IFFALSE 59973
// exit ;
59971: GO 60099
// x := GetX ( enemy ) ;
59973: LD_ADDR_VAR 0 4
59977: PUSH
59978: LD_VAR 0 2
59982: PPUSH
59983: CALL_OW 250
59987: ST_TO_ADDR
// y := GetY ( enemy ) ;
59988: LD_ADDR_VAR 0 5
59992: PUSH
59993: LD_VAR 0 2
59997: PPUSH
59998: CALL_OW 251
60002: ST_TO_ADDR
// if ValidHex ( x , y ) then
60003: LD_VAR 0 4
60007: PPUSH
60008: LD_VAR 0 5
60012: PPUSH
60013: CALL_OW 488
60017: IFFALSE 60099
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60019: LD_VAR 0 2
60023: PPUSH
60024: CALL_OW 247
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: IN
60039: IFTRUE 60062
60041: PUSH
60042: LD_VAR 0 1
60046: PPUSH
60047: CALL_OW 255
60051: PPUSH
60052: LD_VAR 0 2
60056: PPUSH
60057: CALL_OW 292
60061: OR
60062: IFFALSE 60080
// ComAttackUnit ( unit , enemy ) else
60064: LD_VAR 0 1
60068: PPUSH
60069: LD_VAR 0 2
60073: PPUSH
60074: CALL_OW 115
60078: GO 60099
// ComAgressiveMove ( unit , x , y ) ;
60080: LD_VAR 0 1
60084: PPUSH
60085: LD_VAR 0 4
60089: PPUSH
60090: LD_VAR 0 5
60094: PPUSH
60095: CALL_OW 114
// end ;
60099: LD_VAR 0 3
60103: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60104: LD_INT 0
60106: PPUSH
60107: PPUSH
60108: PPUSH
// list := AreaToList ( area , 0 ) ;
60109: LD_ADDR_VAR 0 5
60113: PUSH
60114: LD_VAR 0 1
60118: PPUSH
60119: LD_INT 0
60121: PPUSH
60122: CALL_OW 517
60126: ST_TO_ADDR
// if not list then
60127: LD_VAR 0 5
60131: NOT
60132: IFFALSE 60136
// exit ;
60134: GO 60266
// if all then
60136: LD_VAR 0 2
60140: IFFALSE 60228
// begin for i := 1 to list [ 1 ] do
60142: LD_ADDR_VAR 0 4
60146: PUSH
60147: DOUBLE
60148: LD_INT 1
60150: DEC
60151: ST_TO_ADDR
60152: LD_VAR 0 5
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PUSH
60161: FOR_TO
60162: IFFALSE 60224
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60164: LD_ADDR_VAR 0 3
60168: PUSH
60169: LD_VAR 0 3
60173: PPUSH
60174: LD_VAR 0 3
60178: PUSH
60179: LD_INT 1
60181: PLUS
60182: PPUSH
60183: LD_VAR 0 5
60187: PUSH
60188: LD_INT 1
60190: ARRAY
60191: PUSH
60192: LD_VAR 0 4
60196: ARRAY
60197: PUSH
60198: LD_VAR 0 5
60202: PUSH
60203: LD_INT 2
60205: ARRAY
60206: PUSH
60207: LD_VAR 0 4
60211: ARRAY
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PPUSH
60217: CALL_OW 1
60221: ST_TO_ADDR
60222: GO 60161
60224: POP
60225: POP
// exit ;
60226: GO 60266
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60228: LD_ADDR_VAR 0 3
60232: PUSH
60233: LD_VAR 0 5
60237: PUSH
60238: LD_INT 1
60240: ARRAY
60241: PUSH
60242: LD_INT 1
60244: ARRAY
60245: PUSH
60246: LD_VAR 0 5
60250: PUSH
60251: LD_INT 2
60253: ARRAY
60254: PUSH
60255: LD_INT 1
60257: ARRAY
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: EMPTY
60264: LIST
60265: ST_TO_ADDR
// end ;
60266: LD_VAR 0 3
60270: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60271: LD_INT 0
60273: PPUSH
60274: PPUSH
// list := AreaToList ( area , 0 ) ;
60275: LD_ADDR_VAR 0 4
60279: PUSH
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_INT 0
60287: PPUSH
60288: CALL_OW 517
60292: ST_TO_ADDR
// if not list then
60293: LD_VAR 0 4
60297: NOT
60298: IFFALSE 60302
// exit ;
60300: GO 60343
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60302: LD_ADDR_VAR 0 3
60306: PUSH
60307: LD_VAR 0 4
60311: PUSH
60312: LD_INT 1
60314: ARRAY
60315: PUSH
60316: LD_INT 1
60318: ARRAY
60319: PUSH
60320: LD_VAR 0 4
60324: PUSH
60325: LD_INT 2
60327: ARRAY
60328: PUSH
60329: LD_INT 1
60331: ARRAY
60332: PUSH
60333: LD_VAR 0 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// end ;
60343: LD_VAR 0 3
60347: RET
// export function First ( array ) ; begin
60348: LD_INT 0
60350: PPUSH
// if not array then
60351: LD_VAR 0 1
60355: NOT
60356: IFFALSE 60360
// exit ;
60358: GO 60374
// result := array [ 1 ] ;
60360: LD_ADDR_VAR 0 2
60364: PUSH
60365: LD_VAR 0 1
60369: PUSH
60370: LD_INT 1
60372: ARRAY
60373: ST_TO_ADDR
// end ;
60374: LD_VAR 0 2
60378: RET
// export function Last ( array ) ; begin
60379: LD_INT 0
60381: PPUSH
// if not array then
60382: LD_VAR 0 1
60386: NOT
60387: IFFALSE 60391
// exit ;
60389: GO 60407
// result := array [ array ] ;
60391: LD_ADDR_VAR 0 2
60395: PUSH
60396: LD_VAR 0 1
60400: PUSH
60401: LD_VAR 0 1
60405: ARRAY
60406: ST_TO_ADDR
// end ;
60407: LD_VAR 0 2
60411: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60412: LD_INT 0
60414: PPUSH
60415: PPUSH
// result := [ ] ;
60416: LD_ADDR_VAR 0 5
60420: PUSH
60421: EMPTY
60422: ST_TO_ADDR
// if not array then
60423: LD_VAR 0 1
60427: NOT
60428: IFFALSE 60432
// exit ;
60430: GO 60544
// for i := 1 to array do
60432: LD_ADDR_VAR 0 6
60436: PUSH
60437: DOUBLE
60438: LD_INT 1
60440: DEC
60441: ST_TO_ADDR
60442: LD_VAR 0 1
60446: PUSH
60447: FOR_TO
60448: IFFALSE 60542
// if array [ i ] [ index ] = value then
60450: LD_VAR 0 1
60454: PUSH
60455: LD_VAR 0 6
60459: ARRAY
60460: PUSH
60461: LD_VAR 0 2
60465: ARRAY
60466: PUSH
60467: LD_VAR 0 3
60471: EQUAL
60472: IFFALSE 60540
// begin if indexColumn then
60474: LD_VAR 0 4
60478: IFFALSE 60514
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60480: LD_ADDR_VAR 0 5
60484: PUSH
60485: LD_VAR 0 5
60489: PPUSH
60490: LD_VAR 0 1
60494: PUSH
60495: LD_VAR 0 6
60499: ARRAY
60500: PUSH
60501: LD_VAR 0 4
60505: ARRAY
60506: PPUSH
60507: CALL 55552 0 2
60511: ST_TO_ADDR
60512: GO 60540
// result := Join ( result , array [ i ] ) ;
60514: LD_ADDR_VAR 0 5
60518: PUSH
60519: LD_VAR 0 5
60523: PPUSH
60524: LD_VAR 0 1
60528: PUSH
60529: LD_VAR 0 6
60533: ARRAY
60534: PPUSH
60535: CALL 55552 0 2
60539: ST_TO_ADDR
// end ;
60540: GO 60447
60542: POP
60543: POP
// end ;
60544: LD_VAR 0 5
60548: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60549: LD_INT 0
60551: PPUSH
// if not vehicles or not parkingPoint then
60552: LD_VAR 0 1
60556: NOT
60557: IFTRUE 60566
60559: PUSH
60560: LD_VAR 0 2
60564: NOT
60565: OR
60566: IFFALSE 60570
// exit ;
60568: GO 60668
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60570: LD_ADDR_VAR 0 1
60574: PUSH
60575: LD_VAR 0 1
60579: PPUSH
60580: LD_INT 50
60582: PUSH
60583: EMPTY
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: LD_INT 92
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: LD_INT 1
60599: ARRAY
60600: PUSH
60601: LD_VAR 0 2
60605: PUSH
60606: LD_INT 2
60608: ARRAY
60609: PUSH
60610: LD_INT 8
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PPUSH
60627: CALL_OW 72
60631: ST_TO_ADDR
// if not vehicles then
60632: LD_VAR 0 1
60636: NOT
60637: IFFALSE 60641
// exit ;
60639: GO 60668
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60641: LD_VAR 0 1
60645: PPUSH
60646: LD_VAR 0 2
60650: PUSH
60651: LD_INT 1
60653: ARRAY
60654: PPUSH
60655: LD_VAR 0 2
60659: PUSH
60660: LD_INT 2
60662: ARRAY
60663: PPUSH
60664: CALL_OW 111
// end ;
60668: LD_VAR 0 3
60672: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60673: LD_INT 0
60675: PPUSH
60676: PPUSH
60677: PPUSH
// if not side or not area then
60678: LD_VAR 0 1
60682: NOT
60683: IFTRUE 60692
60685: PUSH
60686: LD_VAR 0 2
60690: NOT
60691: OR
60692: IFFALSE 60696
// exit ;
60694: GO 60815
// tmp := AreaToList ( area , 0 ) ;
60696: LD_ADDR_VAR 0 5
60700: PUSH
60701: LD_VAR 0 2
60705: PPUSH
60706: LD_INT 0
60708: PPUSH
60709: CALL_OW 517
60713: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60714: LD_ADDR_VAR 0 4
60718: PUSH
60719: DOUBLE
60720: LD_INT 1
60722: DEC
60723: ST_TO_ADDR
60724: LD_VAR 0 5
60728: PUSH
60729: LD_INT 1
60731: ARRAY
60732: PUSH
60733: FOR_TO
60734: IFFALSE 60813
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60736: LD_VAR 0 5
60740: PUSH
60741: LD_INT 1
60743: ARRAY
60744: PUSH
60745: LD_VAR 0 4
60749: ARRAY
60750: PPUSH
60751: LD_VAR 0 5
60755: PUSH
60756: LD_INT 2
60758: ARRAY
60759: PUSH
60760: LD_VAR 0 4
60764: ARRAY
60765: PPUSH
60766: CALL_OW 351
60770: IFFALSE 60811
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60772: LD_VAR 0 5
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: PUSH
60781: LD_VAR 0 4
60785: ARRAY
60786: PPUSH
60787: LD_VAR 0 5
60791: PUSH
60792: LD_INT 2
60794: ARRAY
60795: PUSH
60796: LD_VAR 0 4
60800: ARRAY
60801: PPUSH
60802: LD_VAR 0 1
60806: PPUSH
60807: CALL_OW 244
// end ;
60811: GO 60733
60813: POP
60814: POP
// end ;
60815: LD_VAR 0 3
60819: RET
// export function UniqueArray ( array ) ; var i ; begin
60820: LD_INT 0
60822: PPUSH
60823: PPUSH
// result := [ ] ;
60824: LD_ADDR_VAR 0 2
60828: PUSH
60829: EMPTY
60830: ST_TO_ADDR
// if not array then
60831: LD_VAR 0 1
60835: NOT
60836: IFFALSE 60840
// exit ;
60838: GO 60901
// for i := 1 to array do
60840: LD_ADDR_VAR 0 3
60844: PUSH
60845: DOUBLE
60846: LD_INT 1
60848: DEC
60849: ST_TO_ADDR
60850: LD_VAR 0 1
60854: PUSH
60855: FOR_TO
60856: IFFALSE 60899
// if not array [ i ] in result then
60858: LD_VAR 0 1
60862: PUSH
60863: LD_VAR 0 3
60867: ARRAY
60868: PUSH
60869: LD_VAR 0 2
60873: IN
60874: NOT
60875: IFFALSE 60897
// result := Join ( result , i ) ;
60877: LD_ADDR_VAR 0 2
60881: PUSH
60882: LD_VAR 0 2
60886: PPUSH
60887: LD_VAR 0 3
60891: PPUSH
60892: CALL 55552 0 2
60896: ST_TO_ADDR
60897: GO 60855
60899: POP
60900: POP
// end ; end_of_file
60901: LD_VAR 0 2
60905: RET
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
60906: LD_INT 0
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
// if GetType ( un ) = unit_vehicle then
60917: LD_VAR 0 1
60921: PPUSH
60922: CALL_OW 247
60926: PUSH
60927: LD_INT 2
60929: EQUAL
60930: IFFALSE 60934
// exit ;
60932: GO 61707
// side := GetSide ( un ) ;
60934: LD_ADDR_VAR 0 9
60938: PUSH
60939: LD_VAR 0 1
60943: PPUSH
60944: CALL_OW 255
60948: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
60949: LD_EXP 2
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: LD_INT 8
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: IN
60964: IFFALSE 61058
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
60966: LD_VAR 0 1
60970: PPUSH
60971: CALL_OW 266
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: IN
60986: IFFALSE 61058
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_INT 22
60995: PUSH
60996: LD_VAR 0 9
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 21
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 33
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PPUSH
61037: CALL_OW 69
61041: PUSH
61042: FOR_IN
61043: IFFALSE 61056
// KillUnit ( i ) ;
61045: LD_VAR 0 3
61049: PPUSH
61050: CALL_OW 66
61054: GO 61042
61056: POP
61057: POP
// end ; if mpGameType = GameTypeSurvivalH then
61058: LD_EXP 2
61062: PUSH
61063: LD_INT 8
61065: EQUAL
61066: IFFALSE 61150
// if un in mpCommanders then
61068: LD_VAR 0 1
61072: PUSH
61073: LD_EXP 40
61077: IN
61078: IFFALSE 61150
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
61080: LD_ADDR_VAR 0 3
61084: PUSH
61085: LD_INT 22
61087: PUSH
61088: LD_VAR 0 9
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 21
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 33
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PPUSH
61129: CALL_OW 69
61133: PUSH
61134: FOR_IN
61135: IFFALSE 61148
// KillUnit ( i ) ;
61137: LD_VAR 0 3
61141: PPUSH
61142: CALL_OW 66
61146: GO 61134
61148: POP
61149: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
61150: LD_VAR 0 1
61154: PPUSH
61155: CALL_OW 257
61159: PUSH
61160: LD_INT 12
61162: PUSH
61163: LD_INT 17
61165: PUSH
61166: LD_INT 15
61168: PUSH
61169: LD_INT 16
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: IN
61178: IFTRUE 61195
61180: PUSH
61181: LD_VAR 0 1
61185: PPUSH
61186: CALL_OW 263
61190: PUSH
61191: LD_INT 5
61193: EQUAL
61194: OR
61195: IFFALSE 61432
// begin tag := 0 ;
61197: LD_ADDR_VAR 0 5
61201: PUSH
61202: LD_INT 0
61204: ST_TO_ADDR
// for i := 1 to 8 do
61205: LD_ADDR_VAR 0 3
61209: PUSH
61210: DOUBLE
61211: LD_INT 1
61213: DEC
61214: ST_TO_ADDR
61215: LD_INT 8
61217: PUSH
61218: FOR_TO
61219: IFFALSE 61253
// if un in mpApePosIndex [ i ] then
61221: LD_VAR 0 1
61225: PUSH
61226: LD_EXP 31
61230: PUSH
61231: LD_VAR 0 3
61235: ARRAY
61236: IN
61237: IFFALSE 61251
// begin tag := i ;
61239: LD_ADDR_VAR 0 5
61243: PUSH
61244: LD_VAR 0 3
61248: ST_TO_ADDR
// break ;
61249: GO 61253
// end ;
61251: GO 61218
61253: POP
61254: POP
// if not tag then
61255: LD_VAR 0 5
61259: NOT
61260: IFFALSE 61264
// exit ;
61262: GO 61707
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
61264: LD_ADDR_VAR 0 7
61268: PUSH
61269: LD_EXP 30
61273: PUSH
61274: LD_EXP 6
61278: PUSH
61279: LD_VAR 0 5
61283: ARRAY
61284: ARRAY
61285: ST_TO_ADDR
// if not area then
61286: LD_VAR 0 7
61290: NOT
61291: IFFALSE 61295
// exit ;
61293: GO 61707
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
61295: LD_INT 14700
61297: PUSH
61298: LD_VAR 0 1
61302: PUSH
61303: LD_INT 5
61305: MOD
61306: PUSH
61307: LD_INT 1
61309: PLUS
61310: PUSH
61311: LD_INT 700
61313: MUL
61314: PLUS
61315: PPUSH
61316: CALL_OW 67
// repeat wait ( 10 ) ;
61320: LD_INT 10
61322: PPUSH
61323: CALL_OW 67
// until not mpBlockRespThread ;
61327: LD_EXP 46
61331: NOT
61332: IFFALSE 61320
// mpBlockRespThread := true ;
61334: LD_ADDR_EXP 46
61338: PUSH
61339: LD_INT 1
61341: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
61342: LD_INT 0
61344: PPUSH
61345: CALL 51679 0 1
// ape := CreateHuman ;
61349: LD_ADDR_VAR 0 4
61353: PUSH
61354: CALL_OW 44
61358: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
61359: LD_ADDR_EXP 31
61363: PUSH
61364: LD_EXP 31
61368: PPUSH
61369: LD_VAR 0 5
61373: PPUSH
61374: LD_EXP 31
61378: PUSH
61379: LD_VAR 0 5
61383: ARRAY
61384: PPUSH
61385: LD_VAR 0 4
61389: PPUSH
61390: CALL 55552 0 2
61394: PPUSH
61395: CALL_OW 1
61399: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
61400: LD_VAR 0 4
61404: PPUSH
61405: LD_VAR 0 7
61409: PPUSH
61410: LD_INT 0
61412: PPUSH
61413: CALL_OW 49
// wait ( 10 ) ;
61417: LD_INT 10
61419: PPUSH
61420: CALL_OW 67
// mpBlockRespThread := false ;
61424: LD_ADDR_EXP 46
61428: PUSH
61429: LD_INT 0
61431: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
61432: LD_VAR 0 1
61436: PPUSH
61437: CALL_OW 247
61441: PUSH
61442: LD_INT 1
61444: EQUAL
61445: IFFALSE 61462
61447: PUSH
61448: LD_VAR 0 1
61452: PPUSH
61453: CALL_OW 248
61457: PUSH
61458: LD_INT 0
61460: GREATER
61461: AND
61462: IFFALSE 61707
// begin if not mpRespawn then
61464: LD_EXP 32
61468: NOT
61469: IFFALSE 61473
// exit ;
61471: GO 61707
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
61473: LD_VAR 0 9
61477: PPUSH
61478: CALL_OW 108
61482: NOT
61483: IFFALSE 61502
61485: PUSH
61486: LD_EXP 2
61490: PPUSH
61491: LD_VAR 0 9
61495: PPUSH
61496: CALL 6778 0 2
61500: NOT
61501: AND
61502: IFFALSE 61506
// exit ;
61504: GO 61707
// side := GetSide ( un ) ;
61506: LD_ADDR_VAR 0 9
61510: PUSH
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 255
61520: ST_TO_ADDR
// nation := GetNation ( un ) ;
61521: LD_ADDR_VAR 0 8
61525: PUSH
61526: LD_VAR 0 1
61530: PPUSH
61531: CALL_OW 248
61535: ST_TO_ADDR
// class := GetClass ( un ) ;
61536: LD_ADDR_VAR 0 6
61540: PUSH
61541: LD_VAR 0 1
61545: PPUSH
61546: CALL_OW 257
61550: ST_TO_ADDR
// if class > 4 then
61551: LD_VAR 0 6
61555: PUSH
61556: LD_INT 4
61558: GREATER
61559: IFFALSE 61569
// class := 1 ;
61561: LD_ADDR_VAR 0 6
61565: PUSH
61566: LD_INT 1
61568: ST_TO_ADDR
// repeat wait ( 10 ) ;
61569: LD_INT 10
61571: PPUSH
61572: CALL_OW 67
// until not mpBlockRespThread ;
61576: LD_EXP 46
61580: NOT
61581: IFFALSE 61569
// mpBlockRespThread := true ;
61583: LD_ADDR_EXP 46
61587: PUSH
61588: LD_INT 1
61590: ST_TO_ADDR
// uc_side := side ;
61591: LD_ADDR_OWVAR 20
61595: PUSH
61596: LD_VAR 0 9
61600: ST_TO_ADDR
// uc_nation := nation ;
61601: LD_ADDR_OWVAR 21
61605: PUSH
61606: LD_VAR 0 8
61610: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
61611: LD_INT 0
61613: PPUSH
61614: LD_VAR 0 6
61618: PPUSH
61619: LD_INT 2
61621: PPUSH
61622: CALL_OW 380
// un := CreateHuman ;
61626: LD_ADDR_VAR 0 1
61630: PUSH
61631: CALL_OW 44
61635: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
61636: LD_ADDR_EXP 39
61640: PUSH
61641: LD_EXP 39
61645: PPUSH
61646: LD_VAR 0 9
61650: PPUSH
61651: LD_EXP 39
61655: PUSH
61656: LD_VAR 0 9
61660: ARRAY
61661: PPUSH
61662: LD_EXP 39
61666: PUSH
61667: LD_VAR 0 9
61671: ARRAY
61672: PUSH
61673: LD_INT 1
61675: PLUS
61676: PPUSH
61677: LD_VAR 0 1
61681: PPUSH
61682: CALL_OW 1
61686: PPUSH
61687: CALL_OW 1
61691: ST_TO_ADDR
// wait ( 10 ) ;
61692: LD_INT 10
61694: PPUSH
61695: CALL_OW 67
// mpBlockRespThread := false ;
61699: LD_ADDR_EXP 46
61703: PUSH
61704: LD_INT 0
61706: ST_TO_ADDR
// end ; end ;
61707: LD_VAR 0 2
61711: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
61712: LD_INT 0
61714: PPUSH
61715: PPUSH
61716: PPUSH
61717: PPUSH
61718: PPUSH
// tag := 0 ;
61719: LD_ADDR_VAR 0 5
61723: PUSH
61724: LD_INT 0
61726: ST_TO_ADDR
// for i := 1 to 8 do
61727: LD_ADDR_VAR 0 4
61731: PUSH
61732: DOUBLE
61733: LD_INT 1
61735: DEC
61736: ST_TO_ADDR
61737: LD_INT 8
61739: PUSH
61740: FOR_TO
61741: IFFALSE 61775
// if un in mpApePosIndex [ i ] then
61743: LD_VAR 0 2
61747: PUSH
61748: LD_EXP 31
61752: PUSH
61753: LD_VAR 0 4
61757: ARRAY
61758: IN
61759: IFFALSE 61773
// begin tag := i ;
61761: LD_ADDR_VAR 0 5
61765: PUSH
61766: LD_VAR 0 4
61770: ST_TO_ADDR
// break ;
61771: GO 61775
// end ;
61773: GO 61740
61775: POP
61776: POP
// if not tag then
61777: LD_VAR 0 5
61781: NOT
61782: IFFALSE 61786
// exit ;
61784: GO 61954
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
61786: LD_ADDR_VAR 0 6
61790: PUSH
61791: LD_EXP 30
61795: PUSH
61796: LD_EXP 6
61800: PUSH
61801: LD_VAR 0 5
61805: ARRAY
61806: ARRAY
61807: ST_TO_ADDR
// if not area then
61808: LD_VAR 0 6
61812: NOT
61813: IFFALSE 61817
// exit ;
61815: GO 61954
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
61817: LD_INT 14700
61819: PUSH
61820: LD_VAR 0 2
61824: PUSH
61825: LD_INT 5
61827: MOD
61828: PUSH
61829: LD_INT 1
61831: PLUS
61832: PUSH
61833: LD_INT 700
61835: MUL
61836: PLUS
61837: PPUSH
61838: CALL_OW 67
// repeat wait ( 10 ) ;
61842: LD_INT 10
61844: PPUSH
61845: CALL_OW 67
// until not mpBlockRespThread ;
61849: LD_EXP 46
61853: NOT
61854: IFFALSE 61842
// mpBlockRespThread := true ;
61856: LD_ADDR_EXP 46
61860: PUSH
61861: LD_INT 1
61863: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
61864: LD_INT 0
61866: PPUSH
61867: CALL 51679 0 1
// ape := CreateHuman ;
61871: LD_ADDR_VAR 0 7
61875: PUSH
61876: CALL_OW 44
61880: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
61881: LD_ADDR_EXP 31
61885: PUSH
61886: LD_EXP 31
61890: PPUSH
61891: LD_VAR 0 5
61895: PPUSH
61896: LD_EXP 31
61900: PUSH
61901: LD_VAR 0 5
61905: ARRAY
61906: PPUSH
61907: LD_VAR 0 7
61911: PPUSH
61912: CALL 55552 0 2
61916: PPUSH
61917: CALL_OW 1
61921: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
61922: LD_VAR 0 7
61926: PPUSH
61927: LD_VAR 0 6
61931: PPUSH
61932: LD_INT 0
61934: PPUSH
61935: CALL_OW 49
// wait ( 10 ) ;
61939: LD_INT 10
61941: PPUSH
61942: CALL_OW 67
// mpBlockRespThread := false ;
61946: LD_ADDR_EXP 46
61950: PUSH
61951: LD_INT 0
61953: ST_TO_ADDR
// end ;
61954: LD_VAR 0 3
61958: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
61959: LD_INT 0
61961: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
61962: LD_VAR 0 1
61966: PPUSH
61967: CALL_OW 266
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: IN
61982: IFFALSE 62007
// SetBName ( building , @ & GetSide ( building ) ) ;
61984: LD_VAR 0 1
61988: PPUSH
61989: LD_STRING @
61991: PUSH
61992: LD_VAR 0 1
61996: PPUSH
61997: CALL_OW 255
62001: STR
62002: PPUSH
62003: CALL_OW 500
// end ;
62007: LD_VAR 0 2
62011: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
62012: LD_INT 0
62014: PPUSH
62015: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
62016: LD_EXP 2
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 8
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: IN
62031: IFFALSE 62055
62033: PUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 266
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: IN
62054: AND
62055: IFFALSE 62134
// begin SetSide ( building , oldSide ) ;
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 2
62066: PPUSH
62067: CALL_OW 235
// KillUnit ( building ) ;
62071: LD_VAR 0 1
62075: PPUSH
62076: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
62080: LD_ADDR_VAR 0 5
62084: PUSH
62085: LD_INT 22
62087: PUSH
62088: LD_VAR 0 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 21
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PPUSH
62111: CALL_OW 69
62115: PUSH
62116: FOR_IN
62117: IFFALSE 62130
// KillUnit ( i ) ;
62119: LD_VAR 0 5
62123: PPUSH
62124: CALL_OW 66
62128: GO 62116
62130: POP
62131: POP
// exit ;
62132: GO 62179
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
62134: LD_VAR 0 1
62138: PPUSH
62139: CALL_OW 266
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: IN
62154: IFFALSE 62179
// SetBName ( building , @ & GetSide ( building ) ) ;
62156: LD_VAR 0 1
62160: PPUSH
62161: LD_STRING @
62163: PUSH
62164: LD_VAR 0 1
62168: PPUSH
62169: CALL_OW 255
62173: STR
62174: PPUSH
62175: CALL_OW 500
// end ;
62179: LD_VAR 0 4
62183: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
62184: LD_INT 0
62186: PPUSH
62187: PPUSH
62188: PPUSH
// if mpGameType <> GameTypeFamine then
62189: LD_EXP 2
62193: PUSH
62194: LD_INT 5
62196: NONEQUAL
62197: IFFALSE 62201
// exit ;
62199: GO 62435
// for i := 1 to mpGlobalOilDeposits do
62201: LD_ADDR_VAR 0 6
62205: PUSH
62206: DOUBLE
62207: LD_INT 1
62209: DEC
62210: ST_TO_ADDR
62211: LD_EXP 41
62215: PUSH
62216: FOR_TO
62217: IFFALSE 62433
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
62219: LD_EXP 41
62223: PUSH
62224: LD_VAR 0 6
62228: ARRAY
62229: PUSH
62230: LD_INT 1
62232: ARRAY
62233: PPUSH
62234: LD_EXP 41
62238: PUSH
62239: LD_VAR 0 6
62243: ARRAY
62244: PUSH
62245: LD_INT 2
62247: ARRAY
62248: PPUSH
62249: CALL_OW 428
62253: PUSH
62254: LD_VAR 0 1
62258: EQUAL
62259: IFFALSE 62431
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
62261: LD_ADDR_VAR 0 7
62265: PUSH
62266: LD_EXP 41
62270: PUSH
62271: LD_VAR 0 6
62275: ARRAY
62276: PUSH
62277: LD_INT 3
62279: ARRAY
62280: ST_TO_ADDR
// value := value - amount ;
62281: LD_ADDR_VAR 0 7
62285: PUSH
62286: LD_VAR 0 7
62290: PUSH
62291: LD_VAR 0 4
62295: MINUS
62296: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
62297: LD_ADDR_EXP 41
62301: PUSH
62302: LD_EXP 41
62306: PPUSH
62307: LD_VAR 0 6
62311: PPUSH
62312: LD_EXP 41
62316: PUSH
62317: LD_VAR 0 6
62321: ARRAY
62322: PPUSH
62323: LD_INT 3
62325: PPUSH
62326: LD_VAR 0 7
62330: PPUSH
62331: CALL_OW 1
62335: PPUSH
62336: CALL_OW 1
62340: ST_TO_ADDR
// if side in [ your_side , 9 ] then
62341: LD_VAR 0 2
62345: PUSH
62346: LD_OWVAR 2
62350: PUSH
62351: LD_INT 9
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: IN
62358: IFFALSE 62374
// SetUnitDisplayNumber ( building , value ) ;
62360: LD_VAR 0 1
62364: PPUSH
62365: LD_VAR 0 7
62369: PPUSH
62370: CALL_OW 505
// if value <= 0 then
62374: LD_VAR 0 7
62378: PUSH
62379: LD_INT 0
62381: LESSEQUAL
62382: IFFALSE 62431
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
62384: LD_EXP 41
62388: PUSH
62389: LD_VAR 0 6
62393: ARRAY
62394: PUSH
62395: LD_INT 1
62397: ARRAY
62398: PPUSH
62399: LD_EXP 41
62403: PUSH
62404: LD_VAR 0 6
62408: ARRAY
62409: PUSH
62410: LD_INT 2
62412: ARRAY
62413: PPUSH
62414: CALL_OW 63
// KillUnit ( building ) ;
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 66
// exit ;
62427: POP
62428: POP
62429: GO 62435
// end ; end ; end ;
62431: GO 62216
62433: POP
62434: POP
// end ;
62435: LD_VAR 0 5
62439: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
62440: LD_INT 0
62442: PPUSH
62443: PPUSH
62444: PPUSH
// if mpGameType <> GameTypeFamine then
62445: LD_EXP 2
62449: PUSH
62450: LD_INT 5
62452: NONEQUAL
62453: IFFALSE 62457
// exit ;
62455: GO 62691
// for i := 1 to mpGlobalSibDeposits do
62457: LD_ADDR_VAR 0 6
62461: PUSH
62462: DOUBLE
62463: LD_INT 1
62465: DEC
62466: ST_TO_ADDR
62467: LD_EXP 42
62471: PUSH
62472: FOR_TO
62473: IFFALSE 62689
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
62475: LD_EXP 42
62479: PUSH
62480: LD_VAR 0 6
62484: ARRAY
62485: PUSH
62486: LD_INT 1
62488: ARRAY
62489: PPUSH
62490: LD_EXP 42
62494: PUSH
62495: LD_VAR 0 6
62499: ARRAY
62500: PUSH
62501: LD_INT 2
62503: ARRAY
62504: PPUSH
62505: CALL_OW 428
62509: PUSH
62510: LD_VAR 0 1
62514: EQUAL
62515: IFFALSE 62687
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
62517: LD_ADDR_VAR 0 7
62521: PUSH
62522: LD_EXP 42
62526: PUSH
62527: LD_VAR 0 6
62531: ARRAY
62532: PUSH
62533: LD_INT 3
62535: ARRAY
62536: ST_TO_ADDR
// value := value - amount ;
62537: LD_ADDR_VAR 0 7
62541: PUSH
62542: LD_VAR 0 7
62546: PUSH
62547: LD_VAR 0 4
62551: MINUS
62552: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
62553: LD_ADDR_EXP 42
62557: PUSH
62558: LD_EXP 42
62562: PPUSH
62563: LD_VAR 0 6
62567: PPUSH
62568: LD_EXP 42
62572: PUSH
62573: LD_VAR 0 6
62577: ARRAY
62578: PPUSH
62579: LD_INT 3
62581: PPUSH
62582: LD_VAR 0 7
62586: PPUSH
62587: CALL_OW 1
62591: PPUSH
62592: CALL_OW 1
62596: ST_TO_ADDR
// if side in [ your_side , 9 ] then
62597: LD_VAR 0 2
62601: PUSH
62602: LD_OWVAR 2
62606: PUSH
62607: LD_INT 9
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: IN
62614: IFFALSE 62630
// SetUnitDisplayNumber ( building , value ) ;
62616: LD_VAR 0 1
62620: PPUSH
62621: LD_VAR 0 7
62625: PPUSH
62626: CALL_OW 505
// if value <= 0 then
62630: LD_VAR 0 7
62634: PUSH
62635: LD_INT 0
62637: LESSEQUAL
62638: IFFALSE 62687
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
62640: LD_EXP 42
62644: PUSH
62645: LD_VAR 0 6
62649: ARRAY
62650: PUSH
62651: LD_INT 1
62653: ARRAY
62654: PPUSH
62655: LD_EXP 42
62659: PUSH
62660: LD_VAR 0 6
62664: ARRAY
62665: PUSH
62666: LD_INT 2
62668: ARRAY
62669: PPUSH
62670: CALL_OW 63
// KillUnit ( building ) ;
62674: LD_VAR 0 1
62678: PPUSH
62679: CALL_OW 66
// exit ;
62683: POP
62684: POP
62685: GO 62691
// end ; end ; end ;
62687: GO 62472
62689: POP
62690: POP
// end ;
62691: LD_VAR 0 5
62695: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
62696: LD_INT 0
62698: PPUSH
62699: PPUSH
// side := GetSide ( factory ) ;
62700: LD_ADDR_VAR 0 7
62704: PUSH
62705: LD_VAR 0 1
62709: PPUSH
62710: CALL_OW 255
62714: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
62715: LD_VAR 0 5
62719: PUSH
62720: LD_INT 81
62722: EQUAL
62723: IFFALSE 62761
62725: PUSH
62726: LD_INT 22
62728: PUSH
62729: LD_VAR 0 7
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 34
62740: PUSH
62741: LD_INT 81
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PPUSH
62752: CALL_OW 69
62756: PUSH
62757: LD_INT 0
62759: GREATER
62760: AND
62761: IFFALSE 62794
// begin ComCancel ( factory ) ;
62763: LD_VAR 0 1
62767: PPUSH
62768: CALL_OW 127
// if side = your_side then
62772: LD_VAR 0 7
62776: PUSH
62777: LD_OWVAR 2
62781: EQUAL
62782: IFFALSE 62794
// HintSpec ( VehLimit , 2 ) ;
62784: LD_STRING VehLimit
62786: PPUSH
62787: LD_INT 2
62789: PPUSH
62790: CALL_OW 338
// end ; end ;
62794: LD_VAR 0 6
62798: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
62799: LD_INT 0
62801: PPUSH
62802: PPUSH
62803: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 264
62813: PUSH
62814: LD_INT 81
62816: EQUAL
62817: IFFALSE 62834
62819: PUSH
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL_OW 263
62829: PUSH
62830: LD_INT 1
62832: EQUAL
62833: AND
62834: IFFALSE 63114
// begin for i := 1 to Count ( minersList ) do
62836: LD_ADDR_VAR 0 6
62840: PUSH
62841: DOUBLE
62842: LD_INT 1
62844: DEC
62845: ST_TO_ADDR
62846: LD_EXP 56
62850: PPUSH
62851: CALL 19576 0 1
62855: PUSH
62856: FOR_TO
62857: IFFALSE 62975
// begin if minersList [ i ] = oldId then
62859: LD_EXP 56
62863: PUSH
62864: LD_VAR 0 6
62868: ARRAY
62869: PUSH
62870: LD_VAR 0 2
62874: EQUAL
62875: IFFALSE 62973
// begin for j := 1 to minerMinesList [ i ] do
62877: LD_ADDR_VAR 0 7
62881: PUSH
62882: DOUBLE
62883: LD_INT 1
62885: DEC
62886: ST_TO_ADDR
62887: LD_EXP 57
62891: PUSH
62892: LD_VAR 0 6
62896: ARRAY
62897: PUSH
62898: FOR_TO
62899: IFFALSE 62949
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62901: LD_EXP 57
62905: PUSH
62906: LD_VAR 0 6
62910: ARRAY
62911: PUSH
62912: LD_VAR 0 7
62916: ARRAY
62917: PUSH
62918: LD_INT 1
62920: ARRAY
62921: PPUSH
62922: LD_EXP 57
62926: PUSH
62927: LD_VAR 0 6
62931: ARRAY
62932: PUSH
62933: LD_VAR 0 7
62937: ARRAY
62938: PUSH
62939: LD_INT 2
62941: ARRAY
62942: PPUSH
62943: CALL_OW 612
62947: GO 62898
62949: POP
62950: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
62951: LD_ADDR_EXP 57
62955: PUSH
62956: LD_EXP 57
62960: PPUSH
62961: LD_VAR 0 6
62965: PPUSH
62966: CALL_OW 3
62970: ST_TO_ADDR
// break ;
62971: GO 62975
// end ; end ;
62973: GO 62856
62975: POP
62976: POP
// minersList := minersList diff oldId ;
62977: LD_ADDR_EXP 56
62981: PUSH
62982: LD_EXP 56
62986: PUSH
62987: LD_VAR 0 2
62991: DIFF
62992: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
62993: LD_INT 22
62995: PUSH
62996: LD_VAR 0 4
63000: PPUSH
63001: CALL_OW 255
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 34
63012: PUSH
63013: LD_INT 81
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PPUSH
63024: CALL_OW 69
63028: PUSH
63029: LD_INT 1
63031: GREATER
63032: IFFALSE 63059
// begin ComExit ( unit ) ;
63034: LD_VAR 0 4
63038: PPUSH
63039: CALL 55950 0 1
// SetSide ( newId , oldSide ) ;
63043: LD_VAR 0 1
63047: PPUSH
63048: LD_VAR 0 3
63052: PPUSH
63053: CALL_OW 235
// exit ;
63057: GO 63114
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
63059: LD_ADDR_EXP 56
63063: PUSH
63064: LD_EXP 56
63068: PPUSH
63069: LD_EXP 56
63073: PUSH
63074: LD_INT 1
63076: PLUS
63077: PPUSH
63078: LD_VAR 0 1
63082: PPUSH
63083: CALL_OW 1
63087: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63088: LD_ADDR_EXP 57
63092: PUSH
63093: LD_EXP 57
63097: PPUSH
63098: LD_EXP 57
63102: PUSH
63103: LD_INT 1
63105: PLUS
63106: PPUSH
63107: EMPTY
63108: PPUSH
63109: CALL_OW 1
63113: ST_TO_ADDR
// end ; end ; end_of_file
63114: LD_VAR 0 5
63118: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
63119: LD_EXP 38
63123: IFFALSE 63464
63125: GO 63127
63127: DISABLE
63128: LD_INT 0
63130: PPUSH
63131: PPUSH
63132: PPUSH
// begin mpKingPoints := [ ] ;
63133: LD_ADDR_EXP 63
63137: PUSH
63138: EMPTY
63139: ST_TO_ADDR
// if mpTeamGame then
63140: LD_EXP 10
63144: IFFALSE 63198
// begin for i := 1 to Count ( mpTeams ) do
63146: LD_ADDR_VAR 0 1
63150: PUSH
63151: DOUBLE
63152: LD_INT 1
63154: DEC
63155: ST_TO_ADDR
63156: LD_EXP 9
63160: PPUSH
63161: CALL 19576 0 1
63165: PUSH
63166: FOR_TO
63167: IFFALSE 63194
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
63169: LD_ADDR_EXP 63
63173: PUSH
63174: LD_EXP 63
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: LD_INT 0
63186: PPUSH
63187: CALL_OW 1
63191: ST_TO_ADDR
63192: GO 63166
63194: POP
63195: POP
// end else
63196: GO 63241
// begin for i := 1 to 8 do
63198: LD_ADDR_VAR 0 1
63202: PUSH
63203: DOUBLE
63204: LD_INT 1
63206: DEC
63207: ST_TO_ADDR
63208: LD_INT 8
63210: PUSH
63211: FOR_TO
63212: IFFALSE 63239
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
63214: LD_ADDR_EXP 63
63218: PUSH
63219: LD_EXP 63
63223: PPUSH
63224: LD_VAR 0 1
63228: PPUSH
63229: LD_INT 0
63231: PPUSH
63232: CALL_OW 1
63236: ST_TO_ADDR
63237: GO 63211
63239: POP
63240: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: LD_EXP 1
63250: PPUSH
63251: LD_INT 0
63253: PPUSH
63254: CALL_OW 517
63258: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63259: LD_ADDR_VAR 0 1
63263: PUSH
63264: DOUBLE
63265: LD_INT 1
63267: DEC
63268: ST_TO_ADDR
63269: LD_VAR 0 3
63273: PUSH
63274: LD_INT 1
63276: ARRAY
63277: PUSH
63278: FOR_TO
63279: IFFALSE 63346
// for j := 1 to 8 do
63281: LD_ADDR_VAR 0 2
63285: PUSH
63286: DOUBLE
63287: LD_INT 1
63289: DEC
63290: ST_TO_ADDR
63291: LD_INT 8
63293: PUSH
63294: FOR_TO
63295: IFFALSE 63342
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
63297: LD_VAR 0 3
63301: PUSH
63302: LD_INT 1
63304: ARRAY
63305: PUSH
63306: LD_VAR 0 1
63310: ARRAY
63311: PPUSH
63312: LD_VAR 0 3
63316: PUSH
63317: LD_INT 2
63319: ARRAY
63320: PUSH
63321: LD_VAR 0 1
63325: ARRAY
63326: PPUSH
63327: LD_VAR 0 2
63331: PPUSH
63332: LD_INT 12
63334: NEG
63335: PPUSH
63336: CALL_OW 330
63340: GO 63294
63342: POP
63343: POP
63344: GO 63278
63346: POP
63347: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
63348: LD_EXP 33
63352: PPUSH
63353: LD_INT 1
63355: PPUSH
63356: CALL_OW 424
// UpdateCounter ;
63360: CALL 63970 0 0
// repeat wait ( 0 0$1 ) ;
63364: LD_INT 35
63366: PPUSH
63367: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63371: LD_ADDR_VAR 0 3
63375: PUSH
63376: LD_EXP 33
63380: PPUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 57
63386: PUSH
63387: EMPTY
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 50
63396: PUSH
63397: EMPTY
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 30
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 30
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: PPUSH
63433: CALL_OW 70
63437: ST_TO_ADDR
// if not tmp then
63438: LD_VAR 0 3
63442: NOT
63443: IFFALSE 63447
// continue ;
63445: GO 63364
// AddPoints ( tmp ) ;
63447: LD_VAR 0 3
63451: PPUSH
63452: CALL 63648 0 1
// UpdateCounter ;
63456: CALL 63970 0 0
// until false ;
63460: LD_INT 0
63462: IFFALSE 63364
// end ;
63464: PPOPN 3
63466: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
63467: LD_EXP 38
63471: IFFALSE 63479
63473: PUSH
63474: LD_EXP 36
63478: AND
63479: IFFALSE 63645
63481: GO 63483
63483: DISABLE
63484: LD_INT 0
63486: PPUSH
63487: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
63488: LD_ADDR_VAR 0 2
63492: PUSH
63493: LD_EXP 1
63497: PPUSH
63498: LD_INT 0
63500: PPUSH
63501: CALL_OW 517
63505: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63506: LD_ADDR_VAR 0 1
63510: PUSH
63511: DOUBLE
63512: LD_INT 1
63514: DEC
63515: ST_TO_ADDR
63516: LD_VAR 0 2
63520: PUSH
63521: LD_INT 1
63523: ARRAY
63524: PUSH
63525: FOR_TO
63526: IFFALSE 63567
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
63528: LD_VAR 0 2
63532: PUSH
63533: LD_INT 1
63535: ARRAY
63536: PUSH
63537: LD_VAR 0 1
63541: ARRAY
63542: PPUSH
63543: LD_VAR 0 2
63547: PUSH
63548: LD_INT 2
63550: ARRAY
63551: PUSH
63552: LD_VAR 0 1
63556: ARRAY
63557: PPUSH
63558: LD_INT 125
63560: PPUSH
63561: CALL_OW 495
63565: GO 63525
63567: POP
63568: POP
// repeat wait ( mpEmissions ) ;
63569: LD_EXP 36
63573: PPUSH
63574: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
63578: LD_ADDR_VAR 0 1
63582: PUSH
63583: DOUBLE
63584: LD_INT 1
63586: DEC
63587: ST_TO_ADDR
63588: LD_VAR 0 2
63592: PUSH
63593: LD_INT 1
63595: ARRAY
63596: PUSH
63597: FOR_TO
63598: IFFALSE 63639
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
63600: LD_VAR 0 2
63604: PUSH
63605: LD_INT 1
63607: ARRAY
63608: PUSH
63609: LD_VAR 0 1
63613: ARRAY
63614: PPUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_INT 2
63622: ARRAY
63623: PUSH
63624: LD_VAR 0 1
63628: ARRAY
63629: PPUSH
63630: LD_INT 15
63632: PPUSH
63633: CALL_OW 495
63637: GO 63597
63639: POP
63640: POP
// until false ;
63641: LD_INT 0
63643: IFFALSE 63569
// end ;
63645: PPOPN 2
63647: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
63648: LD_INT 0
63650: PPUSH
63651: PPUSH
63652: PPUSH
63653: PPUSH
63654: PPUSH
// if mpTeamGame then
63655: LD_EXP 10
63659: IFFALSE 63856
// begin first := depots [ 1 ] ;
63661: LD_ADDR_VAR 0 4
63665: PUSH
63666: LD_VAR 0 1
63670: PUSH
63671: LD_INT 1
63673: ARRAY
63674: ST_TO_ADDR
// side := GetSide ( first ) ;
63675: LD_ADDR_VAR 0 6
63679: PUSH
63680: LD_VAR 0 4
63684: PPUSH
63685: CALL_OW 255
63689: ST_TO_ADDR
// for i := 1 to mpTeams do
63690: LD_ADDR_VAR 0 3
63694: PUSH
63695: DOUBLE
63696: LD_INT 1
63698: DEC
63699: ST_TO_ADDR
63700: LD_EXP 9
63704: PUSH
63705: FOR_TO
63706: IFFALSE 63740
// if side in mpTeams [ i ] then
63708: LD_VAR 0 6
63712: PUSH
63713: LD_EXP 9
63717: PUSH
63718: LD_VAR 0 3
63722: ARRAY
63723: IN
63724: IFFALSE 63738
// begin team := i ;
63726: LD_ADDR_VAR 0 5
63730: PUSH
63731: LD_VAR 0 3
63735: ST_TO_ADDR
// break ;
63736: GO 63740
// end ;
63738: GO 63705
63740: POP
63741: POP
// if not team then
63742: LD_VAR 0 5
63746: NOT
63747: IFFALSE 63751
// exit ;
63749: GO 63965
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
63751: LD_EXP 33
63755: PPUSH
63756: LD_INT 81
63758: PUSH
63759: LD_VAR 0 6
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PPUSH
63768: CALL_OW 70
63772: IFFALSE 63776
// exit ;
63774: GO 63965
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
63776: LD_ADDR_EXP 63
63780: PUSH
63781: LD_EXP 63
63785: PPUSH
63786: LD_VAR 0 5
63790: PPUSH
63791: LD_EXP 63
63795: PUSH
63796: LD_VAR 0 5
63800: ARRAY
63801: PUSH
63802: LD_INT 1
63804: PLUS
63805: PPUSH
63806: CALL_OW 1
63810: ST_TO_ADDR
// for i in mpTeams [ team ] do
63811: LD_ADDR_VAR 0 3
63815: PUSH
63816: LD_EXP 9
63820: PUSH
63821: LD_VAR 0 5
63825: ARRAY
63826: PUSH
63827: FOR_IN
63828: IFFALSE 63852
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
63830: LD_VAR 0 3
63834: PPUSH
63835: LD_EXP 63
63839: PUSH
63840: LD_VAR 0 5
63844: ARRAY
63845: PPUSH
63846: CALL_OW 506
63850: GO 63827
63852: POP
63853: POP
// end else
63854: GO 63965
// begin first := depots [ 1 ] ;
63856: LD_ADDR_VAR 0 4
63860: PUSH
63861: LD_VAR 0 1
63865: PUSH
63866: LD_INT 1
63868: ARRAY
63869: ST_TO_ADDR
// side := GetSide ( first ) ;
63870: LD_ADDR_VAR 0 6
63874: PUSH
63875: LD_VAR 0 4
63879: PPUSH
63880: CALL_OW 255
63884: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
63885: LD_EXP 33
63889: PPUSH
63890: LD_INT 81
63892: PUSH
63893: LD_VAR 0 6
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PPUSH
63902: CALL_OW 70
63906: IFFALSE 63910
// exit ;
63908: GO 63965
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
63910: LD_ADDR_EXP 63
63914: PUSH
63915: LD_EXP 63
63919: PPUSH
63920: LD_VAR 0 6
63924: PPUSH
63925: LD_EXP 63
63929: PUSH
63930: LD_VAR 0 6
63934: ARRAY
63935: PUSH
63936: LD_INT 1
63938: PLUS
63939: PPUSH
63940: CALL_OW 1
63944: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
63945: LD_VAR 0 6
63949: PPUSH
63950: LD_EXP 63
63954: PUSH
63955: LD_VAR 0 6
63959: ARRAY
63960: PPUSH
63961: CALL_OW 506
// end ; end ;
63965: LD_VAR 0 2
63969: RET
// function UpdateCounter ; var i ; begin
63970: LD_INT 0
63972: PPUSH
63973: PPUSH
// result := [ ] ;
63974: LD_ADDR_VAR 0 1
63978: PUSH
63979: EMPTY
63980: ST_TO_ADDR
// if mpTeamGame then
63981: LD_EXP 10
63985: IFFALSE 64052
// begin for i := 1 to mpTeams do
63987: LD_ADDR_VAR 0 2
63991: PUSH
63992: DOUBLE
63993: LD_INT 1
63995: DEC
63996: ST_TO_ADDR
63997: LD_EXP 9
64001: PUSH
64002: FOR_TO
64003: IFFALSE 64048
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
64005: LD_ADDR_VAR 0 1
64009: PUSH
64010: LD_VAR 0 1
64014: PUSH
64015: LD_STRING #KingoftheHill-Team
64017: PUSH
64018: LD_VAR 0 2
64022: PUSH
64023: LD_EXP 63
64027: PUSH
64028: LD_VAR 0 2
64032: ARRAY
64033: PUSH
64034: LD_EXP 34
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: ADD
64045: ST_TO_ADDR
64046: GO 64002
64048: POP
64049: POP
// end else
64050: GO 64125
// begin for i := 1 to 8 do
64052: LD_ADDR_VAR 0 2
64056: PUSH
64057: DOUBLE
64058: LD_INT 1
64060: DEC
64061: ST_TO_ADDR
64062: LD_INT 8
64064: PUSH
64065: FOR_TO
64066: IFFALSE 64123
// if mpSidePositions [ i ] then
64068: LD_EXP 6
64072: PUSH
64073: LD_VAR 0 2
64077: ARRAY
64078: IFFALSE 64121
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
64080: LD_ADDR_VAR 0 1
64084: PUSH
64085: LD_VAR 0 1
64089: PUSH
64090: LD_STRING #KingoftheHill-Player
64092: PUSH
64093: LD_VAR 0 2
64097: PUSH
64098: LD_EXP 63
64102: PUSH
64103: LD_VAR 0 2
64107: ARRAY
64108: PUSH
64109: LD_EXP 34
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: ADD
64120: ST_TO_ADDR
64121: GO 64065
64123: POP
64124: POP
// end ; mpDisplayStrings := result ;
64125: LD_ADDR_EXP 37
64129: PUSH
64130: LD_VAR 0 1
64134: ST_TO_ADDR
// end ;
64135: LD_VAR 0 1
64139: RET
// export function HowMuchPointsKing ( side ) ; begin
64140: LD_INT 0
64142: PPUSH
// result := HowMuchPoints ( side ) ;
64143: LD_ADDR_VAR 0 2
64147: PUSH
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL 64163 0 1
64157: ST_TO_ADDR
// end ;
64158: LD_VAR 0 2
64162: RET
// function HowMuchPoints ( side ) ; var i ; begin
64163: LD_INT 0
64165: PPUSH
64166: PPUSH
// if mpTeamGame then
64167: LD_EXP 10
64171: IFFALSE 64240
// begin for i := 1 to Count ( mpTeams ) do
64173: LD_ADDR_VAR 0 3
64177: PUSH
64178: DOUBLE
64179: LD_INT 1
64181: DEC
64182: ST_TO_ADDR
64183: LD_EXP 9
64187: PPUSH
64188: CALL 19576 0 1
64192: PUSH
64193: FOR_TO
64194: IFFALSE 64236
// begin if side in mpTeams [ i ] then
64196: LD_VAR 0 1
64200: PUSH
64201: LD_EXP 9
64205: PUSH
64206: LD_VAR 0 3
64210: ARRAY
64211: IN
64212: IFFALSE 64234
// begin result := mpKingPoints [ i ] ;
64214: LD_ADDR_VAR 0 2
64218: PUSH
64219: LD_EXP 63
64223: PUSH
64224: LD_VAR 0 3
64228: ARRAY
64229: ST_TO_ADDR
// exit ;
64230: POP
64231: POP
64232: GO 64256
// end ; end ;
64234: GO 64193
64236: POP
64237: POP
// end else
64238: GO 64256
// result := mpKingPoints [ side ] ;
64240: LD_ADDR_VAR 0 2
64244: PUSH
64245: LD_EXP 63
64249: PUSH
64250: LD_VAR 0 1
64254: ARRAY
64255: ST_TO_ADDR
// end ;
64256: LD_VAR 0 2
64260: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
64261: LD_EXP 38
64265: IFFALSE 64273
64267: PUSH
64268: CALL 64685 0 0
64272: AND
64273: IFFALSE 64281
64275: PUSH
64276: LD_OWVAR 4
64280: AND
64281: IFFALSE 64534
64283: GO 64285
64285: DISABLE
64286: LD_INT 0
64288: PPUSH
64289: PPUSH
// begin canWin := false ;
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: LD_INT 0
64297: ST_TO_ADDR
// if not HasPower ( your_side ) then
64298: LD_OWVAR 2
64302: PPUSH
64303: CALL 64727 0 1
64307: NOT
64308: IFFALSE 64319
// begin Multiplayer_Loose_Message ;
64310: CALL_OW 521
// enable ( mpLose ) ;
64314: LD_INT 102
64316: ENABLE_MARKED
// end else
64317: GO 64534
// begin if not EnemiesInGame then
64319: CALL 64537 0 0
64323: NOT
64324: IFFALSE 64331
// begin enable ( mpWin ) ;
64326: LD_INT 101
64328: ENABLE_MARKED
// exit ;
64329: GO 64534
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
64331: LD_ADDR_VAR 0 2
64335: PUSH
64336: LD_OWVAR 2
64340: PPUSH
64341: CALL 64163 0 1
64345: PUSH
64346: LD_EXP 34
64350: GREATEREQUAL
64351: IFFALSE 64364
64353: PUSH
64354: LD_OWVAR 2
64358: PPUSH
64359: CALL 64727 0 1
64363: AND
64364: ST_TO_ADDR
// for i := 1 to 8 do
64365: LD_ADDR_VAR 0 1
64369: PUSH
64370: DOUBLE
64371: LD_INT 1
64373: DEC
64374: ST_TO_ADDR
64375: LD_INT 8
64377: PUSH
64378: FOR_TO
64379: IFFALSE 64520
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64381: LD_EXP 6
64385: PUSH
64386: LD_VAR 0 1
64390: ARRAY
64391: IFFALSE 64404
64393: PUSH
64394: LD_VAR 0 1
64398: PPUSH
64399: CALL_OW 108
64403: AND
64404: IFFALSE 64418
64406: PUSH
64407: LD_VAR 0 1
64411: PUSH
64412: LD_OWVAR 2
64416: NONEQUAL
64417: AND
64418: IFFALSE 64518
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64420: LD_EXP 7
64424: PUSH
64425: LD_VAR 0 1
64429: ARRAY
64430: NOT
64431: IFTRUE 64479
64433: PUSH
64434: LD_EXP 7
64438: PUSH
64439: LD_VAR 0 1
64443: ARRAY
64444: PUSH
64445: LD_EXP 7
64449: PUSH
64450: LD_OWVAR 2
64454: ARRAY
64455: NONEQUAL
64456: IFFALSE 64478
64458: PUSH
64459: LD_OWVAR 2
64463: PPUSH
64464: LD_VAR 0 1
64468: PPUSH
64469: CALL_OW 81
64473: PUSH
64474: LD_INT 1
64476: NONEQUAL
64477: AND
64478: OR
64479: IFFALSE 64518
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
64481: LD_VAR 0 1
64485: PPUSH
64486: CALL 64163 0 1
64490: PUSH
64491: LD_EXP 34
64495: GREATEREQUAL
64496: IFFALSE 64509
64498: PUSH
64499: LD_VAR 0 1
64503: PPUSH
64504: CALL 64727 0 1
64508: AND
64509: IFFALSE 64518
// begin enable ( mpLose ) ;
64511: LD_INT 102
64513: ENABLE_MARKED
// exit ;
64514: POP
64515: POP
64516: GO 64534
// end ;
64518: GO 64378
64520: POP
64521: POP
// if canWin then
64522: LD_VAR 0 2
64526: IFFALSE 64533
// enable ( mpWin ) else
64528: LD_INT 101
64530: ENABLE_MARKED
64531: GO 64534
// enable ;
64533: ENABLE
// end ; end ;
64534: PPOPN 2
64536: END
// function EnemiesInGame ; var i ; begin
64537: LD_INT 0
64539: PPUSH
64540: PPUSH
// result := false ;
64541: LD_ADDR_VAR 0 1
64545: PUSH
64546: LD_INT 0
64548: ST_TO_ADDR
// for i := 1 to 8 do
64549: LD_ADDR_VAR 0 2
64553: PUSH
64554: DOUBLE
64555: LD_INT 1
64557: DEC
64558: ST_TO_ADDR
64559: LD_INT 8
64561: PUSH
64562: FOR_TO
64563: IFFALSE 64678
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
64565: LD_VAR 0 2
64569: PUSH
64570: LD_OWVAR 2
64574: NONEQUAL
64575: IFFALSE 64588
64577: PUSH
64578: LD_VAR 0 2
64582: PPUSH
64583: CALL 64727 0 1
64587: AND
64588: IFFALSE 64601
64590: PUSH
64591: LD_VAR 0 2
64595: PPUSH
64596: CALL_OW 108
64600: AND
64601: IFFALSE 64676
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64603: LD_EXP 7
64607: PUSH
64608: LD_VAR 0 2
64612: ARRAY
64613: NOT
64614: IFTRUE 64662
64616: PUSH
64617: LD_EXP 7
64621: PUSH
64622: LD_VAR 0 2
64626: ARRAY
64627: PUSH
64628: LD_EXP 7
64632: PUSH
64633: LD_OWVAR 2
64637: ARRAY
64638: NONEQUAL
64639: IFFALSE 64661
64641: PUSH
64642: LD_OWVAR 2
64646: PPUSH
64647: LD_VAR 0 2
64651: PPUSH
64652: CALL_OW 81
64656: PUSH
64657: LD_INT 1
64659: NONEQUAL
64660: AND
64661: OR
64662: IFFALSE 64676
// begin result := true ;
64664: LD_ADDR_VAR 0 1
64668: PUSH
64669: LD_INT 1
64671: ST_TO_ADDR
// exit ;
64672: POP
64673: POP
64674: GO 64680
// end ;
64676: GO 64562
64678: POP
64679: POP
// end ;
64680: LD_VAR 0 1
64684: RET
// function CanWinLoose ; begin
64685: LD_INT 0
64687: PPUSH
// result := true ;
64688: LD_ADDR_VAR 0 1
64692: PUSH
64693: LD_INT 1
64695: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
64696: CALL_OW 531
64700: IFFALSE 64712
64702: PUSH
64703: CALL_OW 519
64707: PUSH
64708: LD_INT 1
64710: GREATER
64711: AND
64712: IFFALSE 64722
// result := false ;
64714: LD_ADDR_VAR 0 1
64718: PUSH
64719: LD_INT 0
64721: ST_TO_ADDR
// end ;
64722: LD_VAR 0 1
64726: RET
// function HasPower ( i ) ; begin
64727: LD_INT 0
64729: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
64730: LD_ADDR_VAR 0 2
64734: PUSH
64735: LD_INT 22
64737: PUSH
64738: LD_VAR 0 1
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: LD_INT 21
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 33
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 33
64772: PUSH
64773: LD_INT 5
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PPUSH
64790: CALL_OW 69
64794: ST_TO_ADDR
// end ;
64795: LD_VAR 0 2
64799: RET
