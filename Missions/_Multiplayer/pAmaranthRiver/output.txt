// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2405 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2828 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 3
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 4
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 5
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 2
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 6
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 7
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 8
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 9
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 10
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 28
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 18
 835: PUSH
 836: LD_INT 4
 838: PUSH
 839: LD_INT 5
 841: PUSH
 842: LD_INT 6
 844: PUSH
 845: LD_INT 7
 847: PUSH
 848: LD_INT 8
 850: PUSH
 851: LD_INT 9
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 17
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 18
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 5
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 23
 913: PUSH
 914: LD_EXP 5
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_EXP 5
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 14
 941: PUSH
 942: LD_EXP 5
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 26
 955: PUSH
 956: LD_EXP 5
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 5
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 5
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 9
1008: ARRAY
1009: IFFALSE 1141
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1011: LD_ADDR_EXP 35
1015: PUSH
1016: LD_INT 1
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: LD_INT 2
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 1
1036: PUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 1
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 12
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 24
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 12
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 23
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 42
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 21
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 42
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_EXP 5
1150: PUSH
1151: LD_INT 11
1153: ARRAY
1154: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1155: LD_ADDR_EXP 21
1159: PUSH
1160: LD_EXP 5
1164: PUSH
1165: LD_INT 12
1167: ARRAY
1168: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1169: LD_ADDR_EXP 25
1173: PUSH
1174: LD_EXP 5
1178: PUSH
1179: LD_INT 13
1181: ARRAY
1182: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1183: LD_ADDR_EXP 32
1187: PUSH
1188: LD_EXP 5
1192: PUSH
1193: LD_INT 14
1195: ARRAY
1196: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 5
1206: PUSH
1207: LD_INT 15
1209: ARRAY
1210: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1211: LD_ADDR_EXP 27
1215: PUSH
1216: LD_EXP 5
1220: PUSH
1221: LD_INT 18
1223: ARRAY
1224: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1225: LD_ADDR_EXP 19
1229: PUSH
1230: LD_EXP 5
1234: PUSH
1235: LD_INT 21
1237: ARRAY
1238: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1239: LD_ADDR_EXP 30
1243: PUSH
1244: LD_INT 10
1246: PUSH
1247: LD_INT 11
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: LD_INT 13
1255: PUSH
1256: LD_INT 14
1258: PUSH
1259: LD_INT 15
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) ] ;
1270: LD_ADDR_VAR 0 8
1274: PUSH
1275: LD_INT 16
1277: PPUSH
1278: LD_INT 3
1280: PPUSH
1281: CALL 60278 0 2
1285: PUSH
1286: LD_INT 17
1288: PPUSH
1289: LD_INT 2
1291: PPUSH
1292: CALL 60278 0 2
1296: PUSH
1297: LD_INT 18
1299: PPUSH
1300: LD_INT 2
1302: PPUSH
1303: CALL 60278 0 2
1307: PUSH
1308: LD_INT 19
1310: PPUSH
1311: LD_INT 5
1313: PPUSH
1314: CALL 60278 0 2
1318: PUSH
1319: LD_INT 20
1321: PPUSH
1322: LD_INT 5
1324: PPUSH
1325: CALL 60278 0 2
1329: PUSH
1330: LD_INT 21
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL 60278 0 2
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_VAR 0 8
1363: PPUSH
1364: CALL 19583 0 1
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1474
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1372: LD_ADDR_EXP 20
1376: PUSH
1377: LD_EXP 20
1381: PPUSH
1382: LD_VAR 0 3
1386: PPUSH
1387: LD_VAR 0 8
1391: PUSH
1392: LD_VAR 0 3
1396: ARRAY
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PPUSH
1402: LD_VAR 0 8
1406: PUSH
1407: LD_VAR 0 3
1411: ARRAY
1412: PUSH
1413: LD_INT 3
1415: ARRAY
1416: PPUSH
1417: LD_INT 10
1419: PPUSH
1420: CALL_OW 272
1424: PUSH
1425: LD_VAR 0 8
1429: PUSH
1430: LD_VAR 0 3
1434: ARRAY
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_VAR 0 8
1444: PUSH
1445: LD_VAR 0 3
1449: ARRAY
1450: PUSH
1451: LD_INT 3
1453: ARRAY
1454: PPUSH
1455: LD_INT 10
1457: PPUSH
1458: CALL_OW 273
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 1
1471: ST_TO_ADDR
1472: GO 1369
1474: POP
1475: POP
// if hasOil then
1476: LD_VAR 0 5
1480: IFFALSE 1591
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_EXP 5
1491: PUSH
1492: LD_INT 6
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: EQUAL
1499: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1500: LD_ADDR_EXP 11
1504: PUSH
1505: LD_INT 22
1507: PPUSH
1508: LD_VAR 0 4
1512: PPUSH
1513: CALL 60111 0 2
1517: PUSH
1518: LD_INT 24
1520: PPUSH
1521: LD_VAR 0 4
1525: PPUSH
1526: CALL 60111 0 2
1530: PUSH
1531: LD_INT 26
1533: PPUSH
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL 60111 0 2
1543: PUSH
1544: LD_INT 28
1546: PPUSH
1547: LD_VAR 0 4
1551: PPUSH
1552: CALL 60111 0 2
1556: PUSH
1557: LD_INT 30
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 60111 0 2
1569: PUSH
1570: LD_INT 32
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 60111 0 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: ST_TO_ADDR
// end ; if hasSib then
1591: LD_VAR 0 6
1595: IFFALSE 1706
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1597: LD_ADDR_VAR 0 4
1601: PUSH
1602: LD_EXP 5
1606: PUSH
1607: LD_INT 7
1609: ARRAY
1610: PUSH
1611: LD_INT 2
1613: EQUAL
1614: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1615: LD_ADDR_EXP 12
1619: PUSH
1620: LD_INT 23
1622: PPUSH
1623: LD_VAR 0 4
1627: PPUSH
1628: CALL 60111 0 2
1632: PUSH
1633: LD_INT 25
1635: PPUSH
1636: LD_VAR 0 4
1640: PPUSH
1641: CALL 60111 0 2
1645: PUSH
1646: LD_INT 27
1648: PPUSH
1649: LD_VAR 0 4
1653: PPUSH
1654: CALL 60111 0 2
1658: PUSH
1659: LD_INT 29
1661: PPUSH
1662: LD_VAR 0 4
1666: PPUSH
1667: CALL 60111 0 2
1671: PUSH
1672: LD_INT 31
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 60111 0 2
1684: PUSH
1685: LD_INT 33
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 60111 0 2
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1706: LD_VAR 0 7
1710: PUSH
1711: LD_INT 1
1713: GREATEREQUAL
1714: IFFALSE 1726
// mpDepots := startPos ;
1716: LD_ADDR_EXP 13
1720: PUSH
1721: LD_VAR 0 8
1725: ST_TO_ADDR
// end ;
1726: LD_VAR 0 2
1730: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1731: GO 1733
1733: DISABLE
1734: LD_INT 0
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
1740: PPUSH
1741: PPUSH
1742: PPUSH
1743: PPUSH
// begin if not mpShipments then
1744: LD_EXP 26
1748: NOT
1749: IFFALSE 1753
// exit ;
1751: GO 2242
// case mpShipments of 1 :
1753: LD_EXP 26
1757: PUSH
1758: LD_INT 1
1760: DOUBLE
1761: EQUAL
1762: IFTRUE 1766
1764: GO 1801
1766: POP
// begin time := 0 0$30 ;
1767: LD_ADDR_VAR 0 4
1771: PUSH
1772: LD_INT 1050
1774: ST_TO_ADDR
// normalTime := 0 0$30 ;
1775: LD_ADDR_VAR 0 6
1779: PUSH
1780: LD_INT 1050
1782: ST_TO_ADDR
// maxTime := 1 1$20 ;
1783: LD_ADDR_VAR 0 8
1787: PUSH
1788: LD_INT 2800
1790: ST_TO_ADDR
// delayTime := 0 0$5 ;
1791: LD_ADDR_VAR 0 7
1795: PUSH
1796: LD_INT 175
1798: ST_TO_ADDR
// end ; 2 :
1799: GO 1931
1801: LD_INT 2
1803: DOUBLE
1804: EQUAL
1805: IFTRUE 1809
1807: GO 1844
1809: POP
// begin time := 0 0$25 ;
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: LD_INT 875
1817: ST_TO_ADDR
// normalTime := 0 0$25 ;
1818: LD_ADDR_VAR 0 6
1822: PUSH
1823: LD_INT 875
1825: ST_TO_ADDR
// maxTime := 1 1$10 ;
1826: LD_ADDR_VAR 0 8
1830: PUSH
1831: LD_INT 2450
1833: ST_TO_ADDR
// delayTime := 0 0$4 ;
1834: LD_ADDR_VAR 0 7
1838: PUSH
1839: LD_INT 140
1841: ST_TO_ADDR
// end ; 3 :
1842: GO 1931
1844: LD_INT 3
1846: DOUBLE
1847: EQUAL
1848: IFTRUE 1852
1850: GO 1887
1852: POP
// begin time := 0 0$20 ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: LD_INT 700
1860: ST_TO_ADDR
// normalTime := 0 0$20 ;
1861: LD_ADDR_VAR 0 6
1865: PUSH
1866: LD_INT 700
1868: ST_TO_ADDR
// maxTime := 1 1$00 ;
1869: LD_ADDR_VAR 0 8
1873: PUSH
1874: LD_INT 2100
1876: ST_TO_ADDR
// delayTime := 0 0$3 ;
1877: LD_ADDR_VAR 0 7
1881: PUSH
1882: LD_INT 105
1884: ST_TO_ADDR
// end ; 4 :
1885: GO 1931
1887: LD_INT 4
1889: DOUBLE
1890: EQUAL
1891: IFTRUE 1895
1893: GO 1930
1895: POP
// begin time := 0 0$15 ;
1896: LD_ADDR_VAR 0 4
1900: PUSH
1901: LD_INT 525
1903: ST_TO_ADDR
// normalTime := 0 0$15 ;
1904: LD_ADDR_VAR 0 6
1908: PUSH
1909: LD_INT 525
1911: ST_TO_ADDR
// maxTime := 0 0$55 ;
1912: LD_ADDR_VAR 0 8
1916: PUSH
1917: LD_INT 1925
1919: ST_TO_ADDR
// delayTime := 0 0$2 ;
1920: LD_ADDR_VAR 0 7
1924: PUSH
1925: LD_INT 70
1927: ST_TO_ADDR
// end ; end ;
1928: GO 1931
1930: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: LD_INT 4
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: LD_INT 6
1944: PUSH
1945: LD_INT 7
1947: PUSH
1948: LD_INT 8
1950: PUSH
1951: LD_INT 9
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: ST_TO_ADDR
// areas := [ eastIsleArea , westIsleArea ] ;
1962: LD_ADDR_VAR 0 5
1966: PUSH
1967: LD_INT 1
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// for i := 1 to 8 do
1977: LD_ADDR_VAR 0 1
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 8
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2038
// begin if not mpSidePositions [ i ] then
1993: LD_EXP 6
1997: PUSH
1998: LD_VAR 0 1
2002: ARRAY
2003: NOT
2004: IFFALSE 2008
// continue ;
2006: GO 1990
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2008: LD_ADDR_VAR 0 5
2012: PUSH
2013: LD_VAR 0 5
2017: PUSH
2018: LD_VAR 0 3
2022: PUSH
2023: LD_EXP 6
2027: PUSH
2028: LD_VAR 0 1
2032: ARRAY
2033: ARRAY
2034: ADD
2035: ST_TO_ADDR
// end ;
2036: GO 1990
2038: POP
2039: POP
// x := 1 ;
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// repeat wait ( time ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: CALL_OW 67
// x := Inc ( x ) ;
2057: LD_ADDR_VAR 0 2
2061: PUSH
2062: LD_VAR 0 2
2066: PPUSH
2067: CALL 56932 0 1
2071: ST_TO_ADDR
// if x > 5 then
2072: LD_VAR 0 2
2076: PUSH
2077: LD_INT 5
2079: GREATER
2080: IFFALSE 2090
// x := 1 ;
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_INT 1
2089: ST_TO_ADDR
// for i in areas do
2090: LD_ADDR_VAR 0 1
2094: PUSH
2095: LD_VAR 0 5
2099: PUSH
2100: FOR_IN
2101: IFFALSE 2140
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2103: LD_VAR 0 1
2107: PPUSH
2108: LD_INT 1
2110: PPUSH
2111: CALL_OW 287
2115: PUSH
2116: LD_INT 20
2118: LESS
2119: IFFALSE 2138
// begin CreateCratesArea ( x , i , true ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_VAR 0 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 55
// end ; end ;
2138: GO 2100
2140: POP
2141: POP
// if GetResourceArea ( nearRiverArea , mat_cans ) < 400 then
2142: LD_INT 3
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 287
2152: PUSH
2153: LD_INT 400
2155: LESS
2156: IFFALSE 2200
// for i := 1 to Count ( areas ) do
2158: LD_ADDR_VAR 0 1
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_VAR 0 5
2172: PPUSH
2173: CALL 19583 0 1
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2198
// CreateCratesArea ( x , nearRiverArea , true ) ;
2181: LD_VAR 0 2
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: CALL_OW 55
2196: GO 2178
2198: POP
2199: POP
// time := time + delayTime ;
2200: LD_ADDR_VAR 0 4
2204: PUSH
2205: LD_VAR 0 4
2209: PUSH
2210: LD_VAR 0 7
2214: PLUS
2215: ST_TO_ADDR
// if time > maxTime then
2216: LD_VAR 0 4
2220: PUSH
2221: LD_VAR 0 8
2225: GREATER
2226: IFFALSE 2238
// time := normalTime ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_VAR 0 6
2237: ST_TO_ADDR
// until false ;
2238: LD_INT 0
2240: IFFALSE 2048
// end ; end_of_file
2242: PPOPN 8
2244: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2245: LD_VAR 0 1
2249: PPUSH
2250: CALL 9331 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: CALL 60913 0 1
// end ;
2263: PPOPN 1
2265: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL 9348 0 1
// end ;
2275: PPOPN 1
2277: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL 61966 0 1
2287: PPOPN 1
2289: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2290: LD_VAR 0 1
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL 9389 0 2
2304: PPOPN 2
2306: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2307: LD_VAR 0 1
2311: PPUSH
2312: LD_VAR 0 2
2316: PPUSH
2317: CALL 61719 0 2
2321: PPOPN 2
2323: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2324: LD_VAR 0 1
2328: PPUSH
2329: LD_VAR 0 2
2333: PPUSH
2334: LD_VAR 0 3
2338: PPUSH
2339: CALL 62019 0 3
2343: PPOPN 3
2345: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2346: LD_VAR 0 1
2350: PPUSH
2351: LD_VAR 0 2
2355: PPUSH
2356: LD_VAR 0 3
2360: PPUSH
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_VAR 0 5
2370: PPUSH
2371: CALL 62703 0 5
2375: PPOPN 5
2377: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_VAR 0 2
2387: PPUSH
2388: LD_VAR 0 3
2392: PPUSH
2393: LD_VAR 0 4
2397: PPUSH
2398: CALL 62806 0 4
2402: PPOPN 4
2404: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
// disable ( mpActive ) ;
2409: LD_INT 100
2411: DISABLE_MARKED
// disable ( mpWin ) ;
2412: LD_INT 101
2414: DISABLE_MARKED
// disable ( mpLose ) ;
2415: LD_INT 102
2417: DISABLE_MARKED
// mpGameType := 0 ;
2418: LD_ADDR_EXP 2
2422: PUSH
2423: LD_INT 0
2425: ST_TO_ADDR
// mpGameSettings := [ ] ;
2426: LD_ADDR_EXP 5
2430: PUSH
2431: EMPTY
2432: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2433: LD_ADDR_EXP 3
2437: PUSH
2438: EMPTY
2439: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2440: LD_ADDR_EXP 4
2444: PUSH
2445: EMPTY
2446: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2447: LD_ADDR_EXP 28
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2462: LD_ADDR_EXP 11
2466: PUSH
2467: EMPTY
2468: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2469: LD_ADDR_EXP 12
2473: PUSH
2474: EMPTY
2475: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2476: LD_ADDR_EXP 41
2480: PUSH
2481: EMPTY
2482: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2483: LD_ADDR_EXP 42
2487: PUSH
2488: EMPTY
2489: ST_TO_ADDR
// mpDepots := [ ] ;
2490: LD_ADDR_EXP 13
2494: PUSH
2495: EMPTY
2496: ST_TO_ADDR
// mpBuildings := [ ] ;
2497: LD_ADDR_EXP 16
2501: PUSH
2502: EMPTY
2503: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2504: LD_ADDR_EXP 17
2508: PUSH
2509: EMPTY
2510: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2511: LD_ADDR_EXP 18
2515: PUSH
2516: EMPTY
2517: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2518: LD_ADDR_EXP 19
2522: PUSH
2523: EMPTY
2524: ST_TO_ADDR
// mpStartingResources := [ ] ;
2525: LD_ADDR_EXP 14
2529: PUSH
2530: EMPTY
2531: ST_TO_ADDR
// mpStartPos := [ ] ;
2532: LD_ADDR_EXP 20
2536: PUSH
2537: EMPTY
2538: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2539: LD_ADDR_EXP 21
2543: PUSH
2544: LD_INT 1
2546: NEG
2547: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2548: LD_ADDR_EXP 22
2552: PUSH
2553: EMPTY
2554: ST_TO_ADDR
// mpApemans := [ ] ;
2555: LD_ADDR_EXP 29
2559: PUSH
2560: EMPTY
2561: ST_TO_ADDR
// mpApemansArea := [ ] ;
2562: LD_ADDR_EXP 30
2566: PUSH
2567: EMPTY
2568: ST_TO_ADDR
// mpRespawn := [ ] ;
2569: LD_ADDR_EXP 32
2573: PUSH
2574: EMPTY
2575: ST_TO_ADDR
// mpKingArea := 0 ;
2576: LD_ADDR_EXP 33
2580: PUSH
2581: LD_INT 0
2583: ST_TO_ADDR
// mpPoints := [ ] ;
2584: LD_ADDR_EXP 34
2588: PUSH
2589: EMPTY
2590: ST_TO_ADDR
// mpVehicles := 0 ;
2591: LD_ADDR_EXP 35
2595: PUSH
2596: LD_INT 0
2598: ST_TO_ADDR
// mpShipments := 0 ;
2599: LD_ADDR_EXP 26
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2607: LD_ADDR_EXP 39
2611: PUSH
2612: EMPTY
2613: PUSH
2614: EMPTY
2615: PUSH
2616: EMPTY
2617: PUSH
2618: EMPTY
2619: PUSH
2620: EMPTY
2621: PUSH
2622: EMPTY
2623: PUSH
2624: EMPTY
2625: PUSH
2626: EMPTY
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: EMPTY
2644: PUSH
2645: EMPTY
2646: PUSH
2647: EMPTY
2648: PUSH
2649: EMPTY
2650: PUSH
2651: EMPTY
2652: PUSH
2653: EMPTY
2654: PUSH
2655: EMPTY
2656: PUSH
2657: EMPTY
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2669: LD_ADDR_EXP 40
2673: PUSH
2674: LD_INT 0
2676: PUSH
2677: LD_INT 0
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: LD_INT 0
2685: PUSH
2686: LD_INT 0
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: LD_INT 0
2694: PUSH
2695: LD_INT 0
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ST_TO_ADDR
// mpEmissions := 0 ;
2708: LD_ADDR_EXP 36
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// mpTeleports := 0 ;
2716: LD_ADDR_EXP 43
2720: PUSH
2721: LD_INT 0
2723: ST_TO_ADDR
// mpArtifacts := 0 ;
2724: LD_ADDR_EXP 44
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2732: LD_ADDR_EXP 45
2736: PUSH
2737: LD_INT 0
2739: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2740: LD_ADDR_EXP 24
2744: PUSH
2745: LD_INT 3
2747: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2748: LD_ADDR_EXP 23
2752: PUSH
2753: LD_INT 15
2755: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2756: LD_ADDR_EXP 37
2760: PUSH
2761: LD_INT 0
2763: ST_TO_ADDR
// mpGameActive := false ;
2764: LD_ADDR_EXP 38
2768: PUSH
2769: LD_INT 0
2771: ST_TO_ADDR
// mpBlockRespThread := false ;
2772: LD_ADDR_EXP 46
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// for i := 1 to 32 do
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: DOUBLE
2786: LD_INT 1
2788: DEC
2789: ST_TO_ADDR
2790: LD_INT 32
2792: PUSH
2793: FOR_TO
2794: IFFALSE 2821
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2796: LD_ADDR_EXP 5
2800: PUSH
2801: LD_EXP 5
2805: PPUSH
2806: LD_VAR 0 2
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 1
2818: ST_TO_ADDR
2819: GO 2793
2821: POP
2822: POP
// end ;
2823: LD_VAR 0 1
2827: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2828: LD_INT 0
2830: PPUSH
2831: PPUSH
2832: PPUSH
2833: PPUSH
2834: PPUSH
2835: PPUSH
2836: PPUSH
2837: PPUSH
2838: PPUSH
2839: PPUSH
2840: PPUSH
2841: PPUSH
2842: PPUSH
2843: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
2844: LD_ADDR_VAR 0 14
2848: PUSH
2849: LD_INT 1
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 3
2857: PUSH
2858: LD_INT 5
2860: PUSH
2861: LD_INT 6
2863: PUSH
2864: LD_INT 7
2866: PUSH
2867: LD_INT 8
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: ST_TO_ADDR
// for i in gameTypes do
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_VAR 0 14
2888: PUSH
2889: FOR_IN
2890: IFFALSE 2899
// disable ( i ) ;
2892: LD_VAR 0 2
2896: DISABLE_MARKED
2897: GO 2889
2899: POP
2900: POP
// if Multiplayer then
2901: LD_OWVAR 4
2905: IFFALSE 3089
// begin mpGameType := mp_game_type ;
2907: LD_ADDR_EXP 2
2911: PUSH
2912: LD_OWVAR 6
2916: ST_TO_ADDR
// your_side := mp_player_side ;
2917: LD_ADDR_OWVAR 2
2921: PUSH
2922: LD_OWVAR 7
2926: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2927: LD_ADDR_EXP 6
2931: PUSH
2932: LD_OWVAR 17
2936: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2937: LD_ADDR_EXP 7
2941: PUSH
2942: LD_OWVAR 15
2946: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2947: LD_ADDR_EXP 8
2951: PUSH
2952: LD_OWVAR 16
2956: ST_TO_ADDR
// mpTeams := mp_teams ;
2957: LD_ADDR_EXP 9
2961: PUSH
2962: LD_OWVAR 12
2966: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2967: LD_ADDR_VAR 0 2
2971: PUSH
2972: DOUBLE
2973: LD_INT 1
2975: DEC
2976: ST_TO_ADDR
2977: LD_EXP 3
2981: PPUSH
2982: CALL 19583 0 1
2986: PUSH
2987: FOR_TO
2988: IFFALSE 3064
// begin setting := mpGameSettingsKeys [ i ] ;
2990: LD_ADDR_VAR 0 12
2994: PUSH
2995: LD_EXP 3
2999: PUSH
3000: LD_VAR 0 2
3004: ARRAY
3005: ST_TO_ADDR
// if setting then
3006: LD_VAR 0 12
3010: IFFALSE 3062
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3012: LD_ADDR_EXP 5
3016: PUSH
3017: LD_EXP 5
3021: PPUSH
3022: LD_VAR 0 2
3026: PPUSH
3027: LD_EXP 4
3031: PUSH
3032: LD_VAR 0 2
3036: ARRAY
3037: PUSH
3038: LD_VAR 0 2
3042: PUSH
3043: LD_INT 1
3045: MINUS
3046: PPUSH
3047: CALL_OW 426
3051: PUSH
3052: LD_INT 1
3054: PLUS
3055: ARRAY
3056: PPUSH
3057: CALL_OW 1
3061: ST_TO_ADDR
// end ;
3062: GO 2987
3064: POP
3065: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3066: LD_ADDR_EXP 10
3070: PUSH
3071: LD_EXP 7
3075: PUSH
3076: LD_INT 0
3078: PUSH
3079: EMPTY
3080: LIST
3081: DIFF
3082: PUSH
3083: LD_INT 1
3085: GREATER
3086: ST_TO_ADDR
// end else
3087: GO 3089
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3089: LD_EXP 2
3093: PPUSH
3094: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3098: LD_EXP 17
3102: PPUSH
3103: CALL 19583 0 1
3107: IFFALSE 3138
// begin for i in mpMarkedAreas do
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_EXP 17
3118: PUSH
3119: FOR_IN
3120: IFFALSE 3136
// SetAreaMapShow ( i , 0 ) ;
3122: LD_VAR 0 2
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 424
3134: GO 3119
3136: POP
3137: POP
// end ; for i := 1 to 8 do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_INT 8
3150: PUSH
3151: FOR_TO
3152: IFFALSE 4611
// begin if not mpSidePositions [ i ] then
3154: LD_EXP 6
3158: PUSH
3159: LD_VAR 0 2
3163: ARRAY
3164: NOT
3165: IFFALSE 3169
// continue ;
3167: GO 3151
// side := i ;
3169: LD_ADDR_VAR 0 7
3173: PUSH
3174: LD_VAR 0 2
3178: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3179: LD_ADDR_VAR 0 9
3183: PUSH
3184: LD_EXP 8
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3195: LD_ADDR_VAR 0 8
3199: PUSH
3200: LD_EXP 6
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3211: LD_EXP 11
3215: PPUSH
3216: CALL 19583 0 1
3220: IFFALSE 3297
// begin for j in mpOilDeposits [ pos ] do
3222: LD_ADDR_VAR 0 3
3226: PUSH
3227: LD_EXP 11
3231: PUSH
3232: LD_VAR 0 8
3236: ARRAY
3237: PUSH
3238: FOR_IN
3239: IFFALSE 3295
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3241: LD_VAR 0 3
3245: PUSH
3246: LD_INT 1
3248: ARRAY
3249: PPUSH
3250: LD_VAR 0 3
3254: PUSH
3255: LD_INT 2
3257: ARRAY
3258: PPUSH
3259: LD_INT 2
3261: PPUSH
3262: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3266: LD_VAR 0 3
3270: PUSH
3271: LD_INT 1
3273: ARRAY
3274: PPUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 2
3282: ARRAY
3283: PPUSH
3284: LD_VAR 0 7
3288: PPUSH
3289: CALL_OW 441
// end ;
3293: GO 3238
3295: POP
3296: POP
// end ; if Count ( mpSibDeposits ) then
3297: LD_EXP 12
3301: PPUSH
3302: CALL 19583 0 1
3306: IFFALSE 3383
// begin for j in mpSibDeposits [ pos ] do
3308: LD_ADDR_VAR 0 3
3312: PUSH
3313: LD_EXP 12
3317: PUSH
3318: LD_VAR 0 8
3322: ARRAY
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3381
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: LD_INT 3
3347: PPUSH
3348: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3352: LD_VAR 0 3
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: PPUSH
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 2
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 7
3374: PPUSH
3375: CALL_OW 441
// end ;
3379: GO 3324
3381: POP
3382: POP
// end ; InitBc ;
3383: CALL_OW 21
// InitUc ;
3387: CALL_OW 18
// uc_side := side ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_VAR 0 7
3400: ST_TO_ADDR
// uc_nation := nation ;
3401: LD_ADDR_OWVAR 21
3405: PUSH
3406: LD_VAR 0 9
3410: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3411: LD_EXP 21
3415: PUSH
3416: LD_INT 1
3418: NEG
3419: GREATER
3420: IFFALSE 3579
// begin x := mpStartPos [ pos ] [ 1 ] ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_EXP 20
3431: PUSH
3432: LD_VAR 0 8
3436: ARRAY
3437: PUSH
3438: LD_INT 1
3440: ARRAY
3441: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3442: LD_ADDR_VAR 0 6
3446: PUSH
3447: LD_EXP 20
3451: PUSH
3452: LD_VAR 0 8
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3462: LD_VAR 0 5
3466: PPUSH
3467: LD_VAR 0 6
3471: PPUSH
3472: LD_INT 12
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3482: LD_ADDR_EXP 22
3486: PUSH
3487: LD_EXP 22
3491: PPUSH
3492: LD_VAR 0 7
3496: PPUSH
3497: LD_VAR 0 7
3501: PPUSH
3502: LD_VAR 0 5
3506: PPUSH
3507: LD_VAR 0 6
3511: PPUSH
3512: LD_INT 1
3514: PUSH
3515: LD_INT 100
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: LD_INT 2
3524: PUSH
3525: LD_INT 70
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PUSH
3532: LD_INT 3
3534: PUSH
3535: LD_INT 40
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 10
3544: PUSH
3545: LD_INT 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 20
3554: PUSH
3555: LD_INT 100
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 418
3573: PPUSH
3574: CALL_OW 1
3578: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3579: LD_EXP 13
3583: PPUSH
3584: CALL 19583 0 1
3588: IFFALSE 3787
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
3590: LD_EXP 2
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: LD_INT 8
3600: PUSH
3601: LD_INT 6
3603: PUSH
3604: LD_INT 7
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: IN
3613: IFFALSE 3633
// begin bc_level := 10 ;
3615: LD_ADDR_OWVAR 43
3619: PUSH
3620: LD_INT 10
3622: ST_TO_ADDR
// bc_type := b_warehouse ;
3623: LD_ADDR_OWVAR 42
3627: PUSH
3628: LD_INT 1
3630: ST_TO_ADDR
// end else
3631: GO 3649
// begin bc_level := 0 ;
3633: LD_ADDR_OWVAR 43
3637: PUSH
3638: LD_INT 0
3640: ST_TO_ADDR
// bc_type := b_depot ;
3641: LD_ADDR_OWVAR 42
3645: PUSH
3646: LD_INT 0
3648: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_EXP 13
3658: PUSH
3659: LD_VAR 0 8
3663: ARRAY
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: LD_EXP 13
3673: PUSH
3674: LD_VAR 0 8
3678: ARRAY
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: LD_EXP 13
3688: PUSH
3689: LD_VAR 0 8
3693: ARRAY
3694: PUSH
3695: LD_INT 3
3697: ARRAY
3698: PPUSH
3699: CALL_OW 47
3703: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3704: LD_VAR 0 4
3708: PPUSH
3709: LD_STRING @
3711: PUSH
3712: LD_VAR 0 7
3716: STR
3717: PPUSH
3718: CALL_OW 500
// if Count ( mpStartingResources ) then
3722: LD_EXP 14
3726: PPUSH
3727: CALL 19583 0 1
3731: IFFALSE 3785
// begin for j := 1 to mpStartingResources do
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: DOUBLE
3739: LD_INT 1
3741: DEC
3742: ST_TO_ADDR
3743: LD_EXP 14
3747: PUSH
3748: FOR_TO
3749: IFFALSE 3783
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3751: LD_VAR 0 4
3755: PPUSH
3756: CALL_OW 274
3760: PPUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_EXP 14
3770: PUSH
3771: LD_VAR 0 3
3775: ARRAY
3776: PPUSH
3777: CALL_OW 277
3781: GO 3748
3783: POP
3784: POP
// end ; end else
3785: GO 3994
// if Count ( mpStartingResources ) then
3787: LD_EXP 14
3791: PPUSH
3792: CALL 19583 0 1
3796: IFFALSE 3994
// begin x := mpStartPos [ pos ] [ 1 ] ;
3798: LD_ADDR_VAR 0 5
3802: PUSH
3803: LD_EXP 20
3807: PUSH
3808: LD_VAR 0 8
3812: ARRAY
3813: PUSH
3814: LD_INT 1
3816: ARRAY
3817: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3818: LD_ADDR_VAR 0 6
3822: PUSH
3823: LD_EXP 20
3827: PUSH
3828: LD_VAR 0 8
3832: ARRAY
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3838: LD_ADDR_VAR 0 3
3842: PUSH
3843: DOUBLE
3844: LD_INT 1
3846: DEC
3847: ST_TO_ADDR
3848: LD_EXP 14
3852: PUSH
3853: FOR_TO
3854: IFFALSE 3992
// begin resources := mpStartingResources [ j ] ;
3856: LD_ADDR_VAR 0 13
3860: PUSH
3861: LD_EXP 14
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: ST_TO_ADDR
// if resources = 0 then
3872: LD_VAR 0 13
3876: PUSH
3877: LD_INT 0
3879: EQUAL
3880: IFFALSE 3884
// continue ;
3882: GO 3853
// repeat if resources >= 50 then
3884: LD_VAR 0 13
3888: PUSH
3889: LD_INT 50
3891: GREATEREQUAL
3892: IFFALSE 3938
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: LD_INT 5
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_VAR 0 6
3911: PPUSH
3912: LD_INT 6
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 60
// resources := resources - 50 ;
3922: LD_ADDR_VAR 0 13
3926: PUSH
3927: LD_VAR 0 13
3931: PUSH
3932: LD_INT 50
3934: MINUS
3935: ST_TO_ADDR
// end else
3936: GO 3980
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3938: LD_VAR 0 3
3942: PPUSH
3943: LD_VAR 0 13
3947: PUSH
3948: LD_INT 10
3950: DIV
3951: PPUSH
3952: LD_VAR 0 5
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: LD_INT 6
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 60
// resources := 0 ;
3972: LD_ADDR_VAR 0 13
3976: PUSH
3977: LD_INT 0
3979: ST_TO_ADDR
// end ; until resources <= 0 ;
3980: LD_VAR 0 13
3984: PUSH
3985: LD_INT 0
3987: LESSEQUAL
3988: IFFALSE 3884
// end ;
3990: GO 3853
3992: POP
3993: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
3994: LD_EXP 16
3998: PPUSH
3999: CALL 19583 0 1
4003: IFFALSE 4023
4005: PUSH
4006: LD_EXP 2
4010: PUSH
4011: LD_INT 2
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: IN
4021: NOT
4022: AND
4023: IFFALSE 4101
// begin for j in mpBuildings [ pos ] do
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_EXP 16
4034: PUSH
4035: LD_VAR 0 8
4039: ARRAY
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4099
// begin bc_level := 0 ;
4044: LD_ADDR_OWVAR 43
4048: PUSH
4049: LD_INT 0
4051: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4052: LD_ADDR_OWVAR 42
4056: PUSH
4057: LD_VAR 0 3
4061: PUSH
4062: LD_INT 1
4064: ARRAY
4065: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4066: LD_VAR 0 3
4070: PUSH
4071: LD_INT 2
4073: ARRAY
4074: PPUSH
4075: LD_VAR 0 3
4079: PUSH
4080: LD_INT 3
4082: ARRAY
4083: PPUSH
4084: LD_VAR 0 3
4088: PUSH
4089: LD_INT 4
4091: ARRAY
4092: PPUSH
4093: CALL_OW 47
// end ;
4097: GO 4041
4099: POP
4100: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4101: LD_EXP 25
4105: IFFALSE 4125
4107: PUSH
4108: LD_INT 20
4110: PPUSH
4111: LD_VAR 0 7
4115: PPUSH
4116: CALL_OW 321
4120: PUSH
4121: LD_INT 1
4123: EQUAL
4124: AND
4125: IFFALSE 4142
// SetTech ( tech_SibDet , side , state_researched ) ;
4127: LD_INT 20
4129: PPUSH
4130: LD_VAR 0 7
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: CALL_OW 322
// if not mpArtifacts then
4142: LD_EXP 44
4146: NOT
4147: IFFALSE 4164
// SetTech ( tech_artifact , side , state_disabled ) ;
4149: LD_INT 24
4151: PPUSH
4152: LD_VAR 0 7
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 322
// if mpSibBomb = 1 then
4164: LD_EXP 27
4168: PUSH
4169: LD_INT 1
4171: EQUAL
4172: IFFALSE 4191
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4174: LD_INT 25
4176: PPUSH
4177: LD_VAR 0 7
4181: PPUSH
4182: LD_INT 1
4184: PPUSH
4185: CALL_OW 322
// end else
4189: GO 4206
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4191: LD_INT 25
4193: PPUSH
4194: LD_VAR 0 7
4198: PPUSH
4199: LD_INT 0
4201: PPUSH
4202: CALL_OW 322
// end ; if mpVehicles then
4206: LD_EXP 35
4210: IFFALSE 4309
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: LD_VAR 0 7
4221: PPUSH
4222: LD_VAR 0 9
4226: PPUSH
4227: LD_EXP 35
4231: PPUSH
4232: CALL 5568 0 3
4236: PUSH
4237: FOR_IN
4238: IFFALSE 4307
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 5
4250: PPUSH
4251: CALL_OW 12
4255: PPUSH
4256: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4260: LD_VAR 0 3
4264: PPUSH
4265: LD_EXP 20
4269: PUSH
4270: LD_VAR 0 8
4274: ARRAY
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: PPUSH
4280: LD_EXP 20
4284: PUSH
4285: LD_VAR 0 8
4289: ARRAY
4290: PUSH
4291: LD_INT 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 12
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 50
// end ;
4305: GO 4237
4307: POP
4308: POP
// end ; uc_nation := nation ;
4309: LD_ADDR_OWVAR 21
4313: PUSH
4314: LD_VAR 0 9
4318: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4319: LD_EXP 2
4323: PUSH
4324: LD_INT 6
4326: PUSH
4327: LD_INT 7
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: IN
4334: IFFALSE 4359
4336: PUSH
4337: LD_EXP 6
4341: PUSH
4342: LD_VAR 0 2
4346: ARRAY
4347: PUSH
4348: LD_INT 1
4350: PUSH
4351: LD_INT 2
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: IN
4358: AND
4359: IFFALSE 4407
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4361: LD_ADDR_VAR 0 11
4365: PUSH
4366: LD_VAR 0 7
4370: PPUSH
4371: LD_VAR 0 9
4375: PPUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 23
4385: PUSH
4386: LD_INT 2
4388: DIV
4389: PLUS
4390: PPUSH
4391: LD_EXP 24
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: PPUSH
4400: CALL 5023 0 4
4404: ST_TO_ADDR
4405: GO 4437
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4407: LD_ADDR_VAR 0 11
4411: PUSH
4412: LD_VAR 0 7
4416: PPUSH
4417: LD_VAR 0 9
4421: PPUSH
4422: LD_EXP 23
4426: PPUSH
4427: LD_EXP 24
4431: PPUSH
4432: CALL 5023 0 4
4436: ST_TO_ADDR
// for j in team do
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: LD_VAR 0 11
4446: PUSH
4447: FOR_IN
4448: IFFALSE 4497
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4450: LD_VAR 0 3
4454: PPUSH
4455: LD_EXP 20
4459: PUSH
4460: LD_VAR 0 8
4464: ARRAY
4465: PUSH
4466: LD_INT 1
4468: ARRAY
4469: PPUSH
4470: LD_EXP 20
4474: PUSH
4475: LD_VAR 0 8
4479: ARRAY
4480: PUSH
4481: LD_INT 2
4483: ARRAY
4484: PPUSH
4485: LD_INT 12
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 50
4495: GO 4447
4497: POP
4498: POP
// if mpApemans then
4499: LD_EXP 29
4503: IFFALSE 4609
// begin for j := 1 to mpApemans do
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_EXP 29
4519: PUSH
4520: FOR_TO
4521: IFFALSE 4607
// begin PrepareApeman ( - 5 ) ;
4523: LD_INT 5
4525: NEG
4526: PPUSH
4527: CALL 51686 0 1
// ape := CreateHuman ;
4531: LD_ADDR_VAR 0 10
4535: PUSH
4536: CALL_OW 44
4540: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4541: LD_ADDR_EXP 31
4545: PUSH
4546: LD_EXP 31
4550: PPUSH
4551: LD_VAR 0 8
4555: PPUSH
4556: LD_EXP 31
4560: PUSH
4561: LD_VAR 0 8
4565: ARRAY
4566: PPUSH
4567: LD_VAR 0 10
4571: PPUSH
4572: CALL 55559 0 2
4576: PPUSH
4577: CALL_OW 1
4581: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4582: LD_VAR 0 10
4586: PPUSH
4587: LD_EXP 30
4591: PUSH
4592: LD_VAR 0 8
4596: ARRAY
4597: PPUSH
4598: LD_INT 0
4600: PPUSH
4601: CALL_OW 49
// end ;
4605: GO 4520
4607: POP
4608: POP
// end ; end ;
4609: GO 3151
4611: POP
4612: POP
// if not mpTeamGame then
4613: LD_EXP 10
4617: NOT
4618: IFFALSE 4716
// begin for i := 1 to 8 do
4620: LD_ADDR_VAR 0 2
4624: PUSH
4625: DOUBLE
4626: LD_INT 1
4628: DEC
4629: ST_TO_ADDR
4630: LD_INT 8
4632: PUSH
4633: FOR_TO
4634: IFFALSE 4712
// for j := 1 to 8 do
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: DOUBLE
4642: LD_INT 1
4644: DEC
4645: ST_TO_ADDR
4646: LD_INT 8
4648: PUSH
4649: FOR_TO
4650: IFFALSE 4708
// if i <> j then
4652: LD_VAR 0 2
4656: PUSH
4657: LD_VAR 0 3
4661: NONEQUAL
4662: IFFALSE 4686
// SetAttitude ( i , j , att_neutral , true ) else
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 0
4676: PPUSH
4677: LD_INT 1
4679: PPUSH
4680: CALL_OW 80
4684: GO 4706
// SetAttitude ( i , j , att_friend , true ) ;
4686: LD_VAR 0 2
4690: PPUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: LD_INT 1
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 80
4706: GO 4649
4708: POP
4709: POP
4710: GO 4633
4712: POP
4713: POP
// end else
4714: GO 4891
// begin if mpSharedVision then
4716: LD_EXP 15
4720: IFFALSE 4785
// begin for i in mpTeams do
4722: LD_ADDR_VAR 0 2
4726: PUSH
4727: LD_EXP 9
4731: PUSH
4732: FOR_IN
4733: IFFALSE 4783
// for j := 2 to i do
4735: LD_ADDR_VAR 0 3
4739: PUSH
4740: DOUBLE
4741: LD_INT 2
4743: DEC
4744: ST_TO_ADDR
4745: LD_VAR 0 2
4749: PUSH
4750: FOR_TO
4751: IFFALSE 4779
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4753: LD_VAR 0 2
4757: PUSH
4758: LD_VAR 0 3
4762: ARRAY
4763: PPUSH
4764: LD_VAR 0 2
4768: PUSH
4769: LD_INT 1
4771: ARRAY
4772: PPUSH
4773: CALL_OW 343
4777: GO 4750
4779: POP
4780: POP
4781: GO 4732
4783: POP
4784: POP
// end ; for i := 1 to 8 do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: DOUBLE
4791: LD_INT 1
4793: DEC
4794: ST_TO_ADDR
4795: LD_INT 8
4797: PUSH
4798: FOR_TO
4799: IFFALSE 4889
// for j := 1 to 8 do
4801: LD_ADDR_VAR 0 3
4805: PUSH
4806: DOUBLE
4807: LD_INT 1
4809: DEC
4810: ST_TO_ADDR
4811: LD_INT 8
4813: PUSH
4814: FOR_TO
4815: IFFALSE 4885
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4817: LD_EXP 7
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: PUSH
4828: LD_EXP 7
4832: PUSH
4833: LD_VAR 0 3
4837: ARRAY
4838: EQUAL
4839: IFFALSE 4863
// SetAttitude ( i , j , att_friend , true ) else
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_VAR 0 3
4850: PPUSH
4851: LD_INT 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 80
4861: GO 4883
// SetAttitude ( i , j , att_enemy , true ) ;
4863: LD_VAR 0 2
4867: PPUSH
4868: LD_VAR 0 3
4872: PPUSH
4873: LD_INT 2
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 80
4883: GO 4814
4885: POP
4886: POP
4887: GO 4798
4889: POP
4890: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4891: LD_ADDR_OWVAR 71
4895: PUSH
4896: LD_EXP 8
4900: PUSH
4901: LD_OWVAR 2
4905: ARRAY
4906: ST_TO_ADDR
// if IAmSpec then
4907: CALL_OW 531
4911: IFFALSE 4952
// begin FogOff ( true ) ;
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4920: LD_EXP 28
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PUSH
4929: LD_INT 2
4931: DIV
4932: PPUSH
4933: LD_EXP 28
4937: PUSH
4938: LD_INT 2
4940: ARRAY
4941: PUSH
4942: LD_INT 2
4944: DIV
4945: PPUSH
4946: CALL_OW 86
// end else
4950: GO 4998
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4952: LD_EXP 20
4956: PUSH
4957: LD_EXP 6
4961: PUSH
4962: LD_OWVAR 2
4966: ARRAY
4967: ARRAY
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: PPUSH
4973: LD_EXP 20
4977: PUSH
4978: LD_EXP 6
4982: PUSH
4983: LD_OWVAR 2
4987: ARRAY
4988: ARRAY
4989: PUSH
4990: LD_INT 2
4992: ARRAY
4993: PPUSH
4994: CALL_OW 86
// end ; BeginBuildUp ;
4998: CALL 6101 0 0
// enable ( mpActive ) ;
5002: LD_INT 100
5004: ENABLE_MARKED
// enable ( mpGameType ) ;
5005: LD_EXP 2
5009: ENABLE_MARKED
// mpGameActive := true ;
5010: LD_ADDR_EXP 38
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// end ;
5018: LD_VAR 0 1
5022: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5023: LD_INT 0
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
// result := [ ] ;
5030: LD_ADDR_VAR 0 5
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// class := class_soldier ;
5037: LD_ADDR_VAR 0 8
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// uc_side := side ;
5045: LD_ADDR_OWVAR 20
5049: PUSH
5050: LD_VAR 0 1
5054: ST_TO_ADDR
// uc_nation := nation ;
5055: LD_ADDR_OWVAR 21
5059: PUSH
5060: LD_VAR 0 2
5064: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5065: LD_ADDR_OWVAR 26
5069: PUSH
5070: LD_OWVAR 19
5074: PUSH
5075: LD_VAR 0 1
5079: ARRAY
5080: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5081: LD_INT 1
5083: PPUSH
5084: LD_INT 2
5086: PPUSH
5087: CALL_OW 12
5091: PPUSH
5092: LD_VAR 0 8
5096: PPUSH
5097: LD_VAR 0 4
5101: PUSH
5102: LD_INT 2
5104: PLUS
5105: PPUSH
5106: CALL_OW 380
// hc_importance := 105 ;
5110: LD_ADDR_OWVAR 32
5114: PUSH
5115: LD_INT 105
5117: ST_TO_ADDR
// if Multiplayer then
5118: LD_OWVAR 4
5122: IFFALSE 5162
// begin hc_gallery := MULTIAVATARS ;
5124: LD_ADDR_OWVAR 33
5128: PUSH
5129: LD_STRING MULTIAVATARS
5131: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5132: LD_ADDR_OWVAR 34
5136: PUSH
5137: LD_VAR 0 1
5141: PPUSH
5142: CALL_OW 525
5146: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5147: LD_ADDR_OWVAR 27
5151: PUSH
5152: LD_VAR 0 1
5156: PPUSH
5157: CALL_OW 526
5161: ST_TO_ADDR
// end ; commander := CreateHuman ;
5162: LD_ADDR_VAR 0 9
5166: PUSH
5167: CALL_OW 44
5171: ST_TO_ADDR
// result := Join ( result , commander ) ;
5172: LD_ADDR_VAR 0 5
5176: PUSH
5177: LD_VAR 0 5
5181: PPUSH
5182: LD_VAR 0 9
5186: PPUSH
5187: CALL 55559 0 2
5191: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5192: LD_ADDR_EXP 40
5196: PUSH
5197: LD_EXP 40
5201: PPUSH
5202: LD_VAR 0 1
5206: PPUSH
5207: LD_VAR 0 9
5211: PPUSH
5212: CALL_OW 1
5216: ST_TO_ADDR
// if mpTeamPreset then
5217: LD_LOC 1
5221: IFFALSE 5317
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5223: LD_LOC 1
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PPUSH
5232: LD_VAR 0 5
5236: PUSH
5237: LD_VAR 0 5
5241: ARRAY
5242: PPUSH
5243: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5247: LD_VAR 0 5
5251: PUSH
5252: LD_VAR 0 5
5256: ARRAY
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_LOC 1
5265: PUSH
5266: LD_INT 1
5268: ARRAY
5269: PPUSH
5270: LD_INT 1
5272: PPUSH
5273: CALL_OW 260
5277: PPUSH
5278: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5282: LD_VAR 0 5
5286: PUSH
5287: LD_VAR 0 5
5291: ARRAY
5292: PPUSH
5293: LD_INT 2
5295: PPUSH
5296: LD_LOC 1
5300: PUSH
5301: LD_INT 1
5303: ARRAY
5304: PPUSH
5305: LD_INT 2
5307: PPUSH
5308: CALL_OW 260
5312: PPUSH
5313: CALL_OW 239
// end ; InitHc_All ( ) ;
5317: CALL_OW 584
// class := 2 ;
5321: LD_ADDR_VAR 0 8
5325: PUSH
5326: LD_INT 2
5328: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5329: LD_ADDR_VAR 0 6
5333: PUSH
5334: DOUBLE
5335: LD_INT 1
5337: DEC
5338: ST_TO_ADDR
5339: LD_VAR 0 3
5343: PUSH
5344: LD_INT 1
5346: MINUS
5347: PUSH
5348: FOR_TO
5349: IFFALSE 5544
// begin PrepareHuman ( false , class , skill ) ;
5351: LD_INT 0
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: LD_VAR 0 4
5363: PPUSH
5364: CALL_OW 380
// un := CreateHuman ;
5368: LD_ADDR_VAR 0 7
5372: PUSH
5373: CALL_OW 44
5377: ST_TO_ADDR
// result := Join ( result , un ) ;
5378: LD_ADDR_VAR 0 5
5382: PUSH
5383: LD_VAR 0 5
5387: PPUSH
5388: LD_VAR 0 7
5392: PPUSH
5393: CALL 55559 0 2
5397: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5398: LD_LOC 1
5402: PPUSH
5403: CALL 19583 0 1
5407: PUSH
5408: LD_VAR 0 3
5412: GREATEREQUAL
5413: IFFALSE 5509
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5415: LD_LOC 1
5419: PUSH
5420: LD_VAR 0 6
5424: PUSH
5425: LD_INT 1
5427: PLUS
5428: ARRAY
5429: PPUSH
5430: LD_VAR 0 7
5434: PPUSH
5435: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5439: LD_VAR 0 7
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_LOC 1
5451: PUSH
5452: LD_VAR 0 6
5456: PUSH
5457: LD_INT 1
5459: PLUS
5460: ARRAY
5461: PPUSH
5462: LD_INT 1
5464: PPUSH
5465: CALL_OW 260
5469: PPUSH
5470: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5474: LD_VAR 0 7
5478: PPUSH
5479: LD_INT 2
5481: PPUSH
5482: LD_LOC 1
5486: PUSH
5487: LD_VAR 0 6
5491: PUSH
5492: LD_INT 1
5494: PLUS
5495: ARRAY
5496: PPUSH
5497: LD_INT 2
5499: PPUSH
5500: CALL_OW 260
5504: PPUSH
5505: CALL_OW 239
// end ; class := Inc ( class ) ;
5509: LD_ADDR_VAR 0 8
5513: PUSH
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL 56932 0 1
5523: ST_TO_ADDR
// if class = 5 then
5524: LD_VAR 0 8
5528: PUSH
5529: LD_INT 5
5531: EQUAL
5532: IFFALSE 5542
// class := 1 ;
5534: LD_ADDR_VAR 0 8
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// end ;
5542: GO 5348
5544: POP
5545: POP
// if not mpTeamPreset then
5546: LD_LOC 1
5550: NOT
5551: IFFALSE 5563
// mpTeamPreset := result ;
5553: LD_ADDR_LOC 1
5557: PUSH
5558: LD_VAR 0 5
5562: ST_TO_ADDR
// end ;
5563: LD_VAR 0 5
5567: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5568: LD_INT 0
5570: PPUSH
5571: PPUSH
// result := [ ] ;
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: EMPTY
5578: ST_TO_ADDR
// if not vehicles then
5579: LD_VAR 0 3
5583: NOT
5584: IFFALSE 5588
// exit ;
5586: GO 5802
// for i := 1 to vehicles [ nation ] do
5588: LD_ADDR_VAR 0 5
5592: PUSH
5593: DOUBLE
5594: LD_INT 1
5596: DEC
5597: ST_TO_ADDR
5598: LD_VAR 0 3
5602: PUSH
5603: LD_VAR 0 2
5607: ARRAY
5608: PUSH
5609: FOR_TO
5610: IFFALSE 5800
// begin uc_side := side ;
5612: LD_ADDR_OWVAR 20
5616: PUSH
5617: LD_VAR 0 1
5621: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5622: LD_VAR 0 3
5626: PUSH
5627: LD_VAR 0 2
5631: ARRAY
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL 19583 0 1
5643: PUSH
5644: LD_INT 4
5646: GREATER
5647: IFFALSE 5677
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5649: LD_ADDR_OWVAR 21
5653: PUSH
5654: LD_VAR 0 3
5658: PUSH
5659: LD_VAR 0 2
5663: ARRAY
5664: PUSH
5665: LD_VAR 0 5
5669: ARRAY
5670: PUSH
5671: LD_INT 5
5673: ARRAY
5674: ST_TO_ADDR
5675: GO 5687
// uc_nation := nation ;
5677: LD_ADDR_OWVAR 21
5681: PUSH
5682: LD_VAR 0 2
5686: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5687: LD_VAR 0 3
5691: PUSH
5692: LD_VAR 0 2
5696: ARRAY
5697: PUSH
5698: LD_VAR 0 5
5702: ARRAY
5703: PUSH
5704: LD_INT 1
5706: ARRAY
5707: PPUSH
5708: LD_VAR 0 3
5712: PUSH
5713: LD_VAR 0 2
5717: ARRAY
5718: PUSH
5719: LD_VAR 0 5
5723: ARRAY
5724: PUSH
5725: LD_INT 2
5727: ARRAY
5728: PPUSH
5729: LD_VAR 0 3
5733: PUSH
5734: LD_VAR 0 2
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 5
5744: ARRAY
5745: PUSH
5746: LD_INT 3
5748: ARRAY
5749: PPUSH
5750: LD_VAR 0 3
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 5
5765: ARRAY
5766: PUSH
5767: LD_INT 4
5769: ARRAY
5770: PPUSH
5771: LD_INT 80
5773: PPUSH
5774: CALL 22379 0 5
// result := Join ( result , CreateVehicle ) ;
5778: LD_ADDR_VAR 0 4
5782: PUSH
5783: LD_VAR 0 4
5787: PPUSH
5788: CALL_OW 45
5792: PPUSH
5793: CALL 55559 0 2
5797: ST_TO_ADDR
// end ;
5798: GO 5609
5800: POP
5801: POP
// end ;
5802: LD_VAR 0 4
5806: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
// for i in mpBattleFlags do
5811: LD_ADDR_VAR 0 3
5815: PUSH
5816: LD_EXP 22
5820: PUSH
5821: FOR_IN
5822: IFFALSE 5899
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5824: LD_VAR 0 3
5828: PPUSH
5829: LD_INT 1
5831: PUSH
5832: LD_VAR 0 1
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 2
5843: PUSH
5844: LD_VAR 0 1
5848: PUSH
5849: LD_REAL  7.00000000000000E-0001
5852: MUL
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 3
5860: PUSH
5861: LD_VAR 0 1
5865: PUSH
5866: LD_REAL  4.00000000000000E-0001
5869: MUL
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 20
5877: PUSH
5878: LD_VAR 0 1
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL_OW 423
5897: GO 5821
5899: POP
5900: POP
// end ;
5901: LD_VAR 0 2
5905: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5906: LD_INT 100
5908: IFFALSE 6003
5910: GO 5912
5912: DISABLE
5913: LD_INT 0
5915: PPUSH
5916: PPUSH
// begin if mpBattleFlag <= 0 then
5917: LD_EXP 21
5921: PUSH
5922: LD_INT 0
5924: LESSEQUAL
5925: IFFALSE 5929
// exit ;
5927: GO 6003
// strength := 100 ;
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_INT 100
5936: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5937: LD_EXP 21
5941: PPUSH
5942: CALL_OW 67
// strength := Dec ( strength ) ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL 56954 0 1
5960: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: CALL 5807 0 1
// until not strength ;
5970: LD_VAR 0 2
5974: NOT
5975: IFFALSE 5937
// for i in mpBattleFlags do
5977: LD_ADDR_VAR 0 1
5981: PUSH
5982: LD_EXP 22
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6001
// KillBattleFlag ( i ) ;
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 419
5999: GO 5987
6001: POP
6002: POP
// end ;
6003: PPOPN 2
6005: END
// every 0 0$1 marked mpActive do var side , tmp ;
6006: GO 6008
6008: DISABLE
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
// begin if mpSibBomb <= 1 then
6013: LD_EXP 27
6017: PUSH
6018: LD_INT 1
6020: LESSEQUAL
6021: IFFALSE 6025
// exit ;
6023: GO 6098
// tmp := mpSibBomb ;
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_EXP 27
6034: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6035: LD_INT 35
6037: PPUSH
6038: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6042: LD_ADDR_VAR 0 2
6046: PUSH
6047: LD_VAR 0 2
6051: PUSH
6052: LD_INT 35
6054: MINUS
6055: ST_TO_ADDR
// until not tmp ;
6056: LD_VAR 0 2
6060: NOT
6061: IFFALSE 6035
// for side := 1 to 8 do
6063: LD_ADDR_VAR 0 1
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_INT 8
6075: PUSH
6076: FOR_TO
6077: IFFALSE 6096
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6079: LD_INT 25
6081: PPUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: LD_INT 1
6089: PPUSH
6090: CALL_OW 322
6094: GO 6076
6096: POP
6097: POP
// end ;
6098: PPOPN 2
6100: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
6105: PPUSH
// mpBuildUpTimeDelay := 0 ;
6106: LD_ADDR_EXP 47
6110: PUSH
6111: LD_INT 0
6113: ST_TO_ADDR
// if not mpBuildUpTime then
6114: LD_EXP 19
6118: NOT
6119: IFFALSE 6123
// exit ;
6121: GO 6312
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6123: LD_ADDR_EXP 47
6127: PUSH
6128: LD_INT 8400
6130: PUSH
6131: LD_INT 2100
6133: PUSH
6134: LD_EXP 19
6138: MUL
6139: PLUS
6140: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6141: LD_ADDR_EXP 48
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// for i := 1 to 8 do
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: DOUBLE
6155: LD_INT 1
6157: DEC
6158: ST_TO_ADDR
6159: LD_INT 8
6161: PUSH
6162: FOR_TO
6163: IFFALSE 6310
// if mpSidePositions [ i ] then
6165: LD_EXP 6
6169: PUSH
6170: LD_VAR 0 2
6174: ARRAY
6175: IFFALSE 6308
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6177: LD_EXP 18
6181: PUSH
6182: LD_EXP 6
6186: PUSH
6187: LD_VAR 0 2
6191: ARRAY
6192: ARRAY
6193: PPUSH
6194: LD_INT 5
6196: PPUSH
6197: CALL_OW 424
// for j := 1 to 8 do
6201: LD_ADDR_VAR 0 3
6205: PUSH
6206: DOUBLE
6207: LD_INT 1
6209: DEC
6210: ST_TO_ADDR
6211: LD_INT 8
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6306
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6217: LD_EXP 6
6221: PUSH
6222: LD_VAR 0 3
6226: ARRAY
6227: IFFALSE 6276
6229: PUSH
6230: LD_EXP 7
6234: PUSH
6235: LD_VAR 0 2
6239: ARRAY
6240: PUSH
6241: LD_EXP 7
6245: PUSH
6246: LD_VAR 0 3
6250: ARRAY
6251: NONEQUAL
6252: IFTRUE 6275
6254: PUSH
6255: LD_EXP 10
6259: NOT
6260: IFFALSE 6274
6262: PUSH
6263: LD_VAR 0 2
6267: PUSH
6268: LD_VAR 0 3
6272: NONEQUAL
6273: AND
6274: OR
6275: AND
6276: IFFALSE 6304
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6278: LD_VAR 0 3
6282: PPUSH
6283: LD_EXP 18
6287: PUSH
6288: LD_EXP 6
6292: PUSH
6293: LD_VAR 0 2
6297: ARRAY
6298: ARRAY
6299: PPUSH
6300: CALL_OW 333
6304: GO 6214
6306: POP
6307: POP
// end ;
6308: GO 6162
6310: POP
6311: POP
// end ;
6312: LD_VAR 0 1
6316: RET
// function EndBuildUp ; var i , j ; begin
6317: LD_INT 0
6319: PPUSH
6320: PPUSH
6321: PPUSH
// mpBuildUpTimeActive := false ;
6322: LD_ADDR_EXP 48
6326: PUSH
6327: LD_INT 0
6329: ST_TO_ADDR
// for i := 1 to 8 do
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_INT 8
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6491
// if mpSidePositions [ i ] then
6346: LD_EXP 6
6350: PUSH
6351: LD_VAR 0 2
6355: ARRAY
6356: IFFALSE 6489
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6358: LD_EXP 18
6362: PUSH
6363: LD_EXP 6
6367: PUSH
6368: LD_VAR 0 2
6372: ARRAY
6373: ARRAY
6374: PPUSH
6375: LD_INT 0
6377: PPUSH
6378: CALL_OW 424
// for j := 1 to 8 do
6382: LD_ADDR_VAR 0 3
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_INT 8
6394: PUSH
6395: FOR_TO
6396: IFFALSE 6487
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6398: LD_EXP 6
6402: PUSH
6403: LD_VAR 0 3
6407: ARRAY
6408: IFFALSE 6457
6410: PUSH
6411: LD_EXP 7
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: PUSH
6422: LD_EXP 7
6426: PUSH
6427: LD_VAR 0 3
6431: ARRAY
6432: NONEQUAL
6433: IFTRUE 6456
6435: PUSH
6436: LD_EXP 10
6440: NOT
6441: IFFALSE 6455
6443: PUSH
6444: LD_VAR 0 2
6448: PUSH
6449: LD_VAR 0 3
6453: NONEQUAL
6454: AND
6455: OR
6456: AND
6457: IFFALSE 6485
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6459: LD_VAR 0 3
6463: PPUSH
6464: LD_EXP 18
6468: PUSH
6469: LD_EXP 6
6473: PUSH
6474: LD_VAR 0 2
6478: ARRAY
6479: ARRAY
6480: PPUSH
6481: CALL_OW 334
6485: GO 6395
6487: POP
6488: POP
// end ;
6489: GO 6343
6491: POP
6492: POP
// end ;
6493: LD_VAR 0 1
6497: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6498: LD_EXP 48
6502: IFFALSE 6681
6504: GO 6506
6506: DISABLE
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
// begin for i := 1 to 8 do
6511: LD_ADDR_VAR 0 1
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_INT 8
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6678
// if mpSidePositions [ i ] then
6527: LD_EXP 6
6531: PUSH
6532: LD_VAR 0 1
6536: ARRAY
6537: IFFALSE 6676
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6539: LD_ADDR_VAR 0 2
6543: PUSH
6544: LD_EXP 18
6548: PUSH
6549: LD_EXP 6
6553: PUSH
6554: LD_VAR 0 1
6558: ARRAY
6559: ARRAY
6560: PPUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 21
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 21
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_OWVAR 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PPUSH
6605: CALL_OW 70
6609: PUSH
6610: FOR_IN
6611: IFFALSE 6674
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6613: LD_EXP 7
6617: PUSH
6618: LD_VAR 0 1
6622: ARRAY
6623: PUSH
6624: LD_EXP 7
6628: PUSH
6629: LD_OWVAR 2
6633: ARRAY
6634: NONEQUAL
6635: IFTRUE 6658
6637: PUSH
6638: LD_EXP 10
6642: NOT
6643: IFFALSE 6657
6645: PUSH
6646: LD_VAR 0 1
6650: PUSH
6651: LD_OWVAR 2
6655: NONEQUAL
6656: AND
6657: OR
6658: IFFALSE 6672
// ComMoveToArea ( un , BuildUpEscape ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_INT 34
6667: PPUSH
6668: CALL_OW 113
6672: GO 6610
6674: POP
6675: POP
6676: GO 6524
6678: POP
6679: POP
// enable ;
6680: ENABLE
// end ;
6681: PPOPN 2
6683: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6684: LD_EXP 19
6688: IFFALSE 6738
6690: GO 6692
6692: DISABLE
6693: LD_INT 0
6695: PPUSH
// begin tmp := mpBuildUpTime ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 19
6705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6706: LD_INT 35
6708: PPUSH
6709: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_VAR 0 1
6722: PUSH
6723: LD_INT 35
6725: MINUS
6726: ST_TO_ADDR
// until not tmp ;
6727: LD_VAR 0 1
6731: NOT
6732: IFFALSE 6706
// EndBuildUp ;
6734: CALL 6317 0 0
// end ;
6738: PPOPN 1
6740: END
// every 0 0$1 trigger mpActive marked mpWin do
6741: LD_INT 100
6743: IFFALSE 6777
6745: GO 6747
6747: DISABLE
// begin if IAmServer then
6748: CALL_OW 518
6752: IFFALSE 6761
// wait ( 0 0$3 ) ;
6754: LD_INT 105
6756: PPUSH
6757: CALL_OW 67
// if Multiplayer then
6761: LD_OWVAR 4
6765: IFFALSE 6773
// YouWinInMultiplayer else
6767: CALL_OW 106
6771: GO 6777
// YouWin ;
6773: CALL_OW 103
// end ;
6777: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6778: LD_INT 0
6780: PPUSH
// result := false ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_INT 0
6788: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6789: LD_VAR 0 1
6793: PUSH
6794: LD_INT 1
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6820
6800: LD_INT 5
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6820
6806: LD_INT 6
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6820
6812: LD_INT 7
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6893
6820: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_VAR 0 2
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 33
6853: PUSH
6854: LD_INT 3
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 33
6863: PUSH
6864: LD_INT 5
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PPUSH
6886: CALL 19583 0 1
6890: ST_TO_ADDR
// end ; GameTypeSurvival :
6891: GO 7289
6893: LD_INT 2
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 7031
6901: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_VAR 0 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 30
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 30
6934: PUSH
6935: LD_INT 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 69
6955: PPUSH
6956: CALL 19583 0 1
6960: IFFALSE 7028
6962: PUSH
6963: LD_INT 22
6965: PUSH
6966: LD_VAR 0 2
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 21
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 33
6990: PUSH
6991: LD_INT 3
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 33
7000: PUSH
7001: LD_INT 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PPUSH
7018: CALL_OW 69
7022: PPUSH
7023: CALL 19583 0 1
7027: AND
7028: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7029: GO 7289
7031: LD_INT 8
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7188
7039: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: LD_EXP 40
7049: PUSH
7050: LD_VAR 0 2
7054: ARRAY
7055: PPUSH
7056: CALL_OW 300
7060: IFFALSE 7117
7062: PUSH
7063: LD_INT 22
7065: PUSH
7066: LD_VAR 0 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 2
7077: PUSH
7078: LD_INT 30
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 30
7090: PUSH
7091: LD_INT 1
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 69
7111: PPUSH
7112: CALL 19583 0 1
7116: AND
7117: IFFALSE 7185
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_VAR 0 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 21
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 33
7147: PUSH
7148: LD_INT 3
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 33
7157: PUSH
7158: LD_INT 5
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 69
7179: PPUSH
7180: CALL 19583 0 1
7184: AND
7185: ST_TO_ADDR
// end ; GameTypeKing :
7186: GO 7289
7188: LD_INT 3
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7288
7196: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 22
7204: PUSH
7205: LD_VAR 0 2
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 2
7216: PUSH
7217: LD_INT 21
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 33
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 33
7239: PUSH
7240: LD_INT 5
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PPUSH
7262: CALL 19583 0 1
7266: IFFALSE 7285
7268: PUSH
7269: LD_VAR 0 2
7273: PPUSH
7274: CALL 64147 0 1
7278: PUSH
7279: LD_EXP 34
7283: LESS
7284: AND
7285: ST_TO_ADDR
// end ; end ;
7286: GO 7289
7288: POP
// end ;
7289: LD_VAR 0 3
7293: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7294: LD_INT 100
7296: IFFALSE 7526
7298: GO 7300
7300: DISABLE
7301: LD_INT 0
7303: PPUSH
7304: PPUSH
// begin if Multiplayer then
7305: LD_OWVAR 4
7309: IFFALSE 7317
// SetPlayerSpectator ( ) else
7311: CALL_OW 572
7315: GO 7326
// FogOff ( your_side ) ;
7317: LD_OWVAR 2
7321: PPUSH
7322: CALL_OW 344
// repeat gameIsOn := false ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// for i := 1 to 8 do
7334: LD_ADDR_VAR 0 2
7338: PUSH
7339: DOUBLE
7340: LD_INT 1
7342: DEC
7343: ST_TO_ADDR
7344: LD_INT 8
7346: PUSH
7347: FOR_TO
7348: IFFALSE 7478
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7350: LD_EXP 6
7354: PUSH
7355: LD_VAR 0 2
7359: ARRAY
7360: IFFALSE 7373
7362: PUSH
7363: LD_VAR 0 2
7367: PPUSH
7368: CALL_OW 108
7372: AND
7373: IFFALSE 7387
7375: PUSH
7376: LD_VAR 0 2
7380: PUSH
7381: LD_OWVAR 2
7385: NONEQUAL
7386: AND
7387: IFFALSE 7476
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7389: LD_EXP 7
7393: PUSH
7394: LD_VAR 0 2
7398: ARRAY
7399: NOT
7400: IFTRUE 7448
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_VAR 0 2
7412: ARRAY
7413: PUSH
7414: LD_EXP 7
7418: PUSH
7419: LD_OWVAR 2
7423: ARRAY
7424: NONEQUAL
7425: IFFALSE 7447
7427: PUSH
7428: LD_OWVAR 2
7432: PPUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: CALL_OW 81
7442: PUSH
7443: LD_INT 1
7445: NONEQUAL
7446: AND
7447: OR
7448: IFFALSE 7476
// if HasPowerByGameType ( mpGameType , i ) then
7450: LD_EXP 2
7454: PPUSH
7455: LD_VAR 0 2
7459: PPUSH
7460: CALL 6778 0 2
7464: IFFALSE 7476
// begin gameIsOn := true ;
7466: LD_ADDR_VAR 0 1
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// break ;
7474: GO 7478
// end ;
7476: GO 7347
7478: POP
7479: POP
// wait ( 100 ) ;
7480: LD_INT 100
7482: PPUSH
7483: CALL_OW 67
// until not gameIsOn ;
7487: LD_VAR 0 1
7491: NOT
7492: IFFALSE 7326
// if IAmServer then
7494: CALL_OW 518
7498: IFFALSE 7507
// wait ( 0 0$3 ) ;
7500: LD_INT 105
7502: PPUSH
7503: CALL_OW 67
// if Multiplayer then
7507: LD_OWVAR 4
7511: IFFALSE 7519
// YouLostInMultiplayer else
7513: CALL_OW 107
7517: GO 7526
// YouLost (  ) ;
7519: LD_STRING 
7521: PPUSH
7522: CALL_OW 104
// end ;
7526: PPOPN 2
7528: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7529: LD_EXP 32
7533: IFFALSE 7917
7535: GO 7537
7537: DISABLE
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7545: LD_ADDR_VAR 0 5
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: LD_INT 4
7561: PUSH
7562: LD_INT 5
7564: PUSH
7565: LD_INT 6
7567: PUSH
7568: LD_INT 7
7570: PUSH
7571: LD_INT 8
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7584: LD_INT 350
7586: PPUSH
7587: CALL_OW 67
// for i := 1 to 8 do
7591: LD_ADDR_VAR 0 1
7595: PUSH
7596: DOUBLE
7597: LD_INT 1
7599: DEC
7600: ST_TO_ADDR
7601: LD_INT 8
7603: PUSH
7604: FOR_TO
7605: IFFALSE 7887
// begin j := sides [ i ] ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_VAR 0 5
7616: PUSH
7617: LD_VAR 0 1
7621: ARRAY
7622: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7623: LD_EXP 39
7627: PUSH
7628: LD_VAR 0 2
7632: ARRAY
7633: PPUSH
7634: CALL 19583 0 1
7638: IFFALSE 7651
7640: PUSH
7641: LD_VAR 0 2
7645: PPUSH
7646: CALL_OW 108
7650: AND
7651: IFFALSE 7669
7653: PUSH
7654: LD_EXP 2
7658: PPUSH
7659: LD_VAR 0 2
7663: PPUSH
7664: CALL 6778 0 2
7668: AND
7669: IFFALSE 7885
// begin wait ( mpRespawn div 2 ) ;
7671: LD_EXP 32
7675: PUSH
7676: LD_INT 2
7678: DIV
7679: PPUSH
7680: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7684: LD_ADDR_VAR 0 3
7688: PUSH
7689: LD_INT 22
7691: PUSH
7692: LD_VAR 0 2
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 50
7703: PUSH
7704: EMPTY
7705: LIST
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 30
7712: PUSH
7713: LD_INT 0
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 30
7722: PUSH
7723: LD_INT 1
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL_OW 69
7744: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7745: LD_VAR 0 3
7749: NOT
7750: IFTRUE 7764
7752: PUSH
7753: LD_VAR 0 2
7757: PPUSH
7758: CALL_OW 108
7762: NOT
7763: OR
7764: IFTRUE 7783
7766: PUSH
7767: LD_EXP 2
7771: PPUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL 6778 0 2
7781: NOT
7782: OR
7783: IFFALSE 7787
// continue ;
7785: GO 7604
// spawn := tmp [ 1 ] ;
7787: LD_ADDR_VAR 0 4
7791: PUSH
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 1
7799: ARRAY
7800: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7801: LD_EXP 39
7805: PUSH
7806: LD_VAR 0 2
7810: ARRAY
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: PPUSH
7816: LD_VAR 0 4
7820: PPUSH
7821: CALL_OW 250
7825: PPUSH
7826: LD_VAR 0 4
7830: PPUSH
7831: CALL_OW 251
7835: PPUSH
7836: LD_INT 32
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7846: LD_ADDR_EXP 39
7850: PUSH
7851: LD_EXP 39
7855: PPUSH
7856: LD_VAR 0 2
7860: PPUSH
7861: LD_EXP 39
7865: PUSH
7866: LD_VAR 0 2
7870: ARRAY
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 3
7879: PPUSH
7880: CALL_OW 1
7884: ST_TO_ADDR
// end ; end ;
7885: GO 7604
7887: POP
7888: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7889: LD_ADDR_VAR 0 5
7893: PUSH
7894: LD_VAR 0 5
7898: PPUSH
7899: LD_INT 1
7901: PPUSH
7902: LD_INT 8
7904: PPUSH
7905: LD_INT 1
7907: PPUSH
7908: CALL 21909 0 4
7912: ST_TO_ADDR
// until false ;
7913: LD_INT 0
7915: IFFALSE 7584
// end ;
7917: PPOPN 5
7919: END
// every 0 0$1 marked mpActive do
7920: GO 7922
7922: DISABLE
// begin enable ;
7923: ENABLE
// if not mpDisplayStrings then
7924: LD_EXP 37
7928: NOT
7929: IFFALSE 7940
// begin display_strings := [ ] ;
7931: LD_ADDR_OWVAR 47
7935: PUSH
7936: EMPTY
7937: ST_TO_ADDR
// exit ;
7938: GO 7950
// end ; display_strings := mpDisplayStrings ;
7940: LD_ADDR_OWVAR 47
7944: PUSH
7945: LD_EXP 37
7949: ST_TO_ADDR
// end ; end_of_file
7950: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
7951: LD_EXP 38
7955: IFFALSE 7963
7957: PUSH
7958: CALL 8173 0 0
7962: AND
7963: IFFALSE 7971
7965: PUSH
7966: LD_OWVAR 4
7970: AND
7971: IFFALSE 8170
7973: GO 7975
7975: DISABLE
7976: LD_INT 0
7978: PPUSH
7979: PPUSH
// begin canWin := false ;
7980: LD_ADDR_VAR 0 2
7984: PUSH
7985: LD_INT 0
7987: ST_TO_ADDR
// if not HasPower ( your_side ) then
7988: LD_OWVAR 2
7992: PPUSH
7993: CALL 8215 0 1
7997: NOT
7998: IFFALSE 8009
// begin Multiplayer_Loose_Message ;
8000: CALL_OW 521
// enable ( mpLose ) ;
8004: LD_INT 102
8006: ENABLE_MARKED
// end else
8007: GO 8170
// begin canWin := true ;
8009: LD_ADDR_VAR 0 2
8013: PUSH
8014: LD_INT 1
8016: ST_TO_ADDR
// for i := 1 to 8 do
8017: LD_ADDR_VAR 0 1
8021: PUSH
8022: DOUBLE
8023: LD_INT 1
8025: DEC
8026: ST_TO_ADDR
8027: LD_INT 8
8029: PUSH
8030: FOR_TO
8031: IFFALSE 8156
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8033: LD_EXP 6
8037: PUSH
8038: LD_VAR 0 1
8042: ARRAY
8043: IFFALSE 8056
8045: PUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 108
8055: AND
8056: IFFALSE 8070
8058: PUSH
8059: LD_VAR 0 1
8063: PUSH
8064: LD_OWVAR 2
8068: NONEQUAL
8069: AND
8070: IFFALSE 8154
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8072: LD_EXP 7
8076: PUSH
8077: LD_VAR 0 1
8081: ARRAY
8082: NOT
8083: IFTRUE 8131
8085: PUSH
8086: LD_EXP 7
8090: PUSH
8091: LD_VAR 0 1
8095: ARRAY
8096: PUSH
8097: LD_EXP 7
8101: PUSH
8102: LD_OWVAR 2
8106: ARRAY
8107: NONEQUAL
8108: IFFALSE 8130
8110: PUSH
8111: LD_OWVAR 2
8115: PPUSH
8116: LD_VAR 0 1
8120: PPUSH
8121: CALL_OW 81
8125: PUSH
8126: LD_INT 1
8128: NONEQUAL
8129: AND
8130: OR
8131: IFFALSE 8154
// if HasPower ( i ) then
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL 8215 0 1
8142: IFFALSE 8154
// begin canWin := false ;
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// break ;
8152: GO 8156
// end ;
8154: GO 8030
8156: POP
8157: POP
// if canWin then
8158: LD_VAR 0 2
8162: IFFALSE 8169
// enable ( mpWin ) else
8164: LD_INT 101
8166: ENABLE_MARKED
8167: GO 8170
// enable ;
8169: ENABLE
// end ; end ;
8170: PPOPN 2
8172: END
// function CanWinLoose ; begin
8173: LD_INT 0
8175: PPUSH
// result := true ;
8176: LD_ADDR_VAR 0 1
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8184: CALL_OW 531
8188: IFFALSE 8200
8190: PUSH
8191: CALL_OW 519
8195: PUSH
8196: LD_INT 1
8198: GREATER
8199: AND
8200: IFFALSE 8210
// result := false ;
8202: LD_ADDR_VAR 0 1
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// end ;
8210: LD_VAR 0 1
8214: RET
// function HasPower ( i ) ; begin
8215: LD_INT 0
8217: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8218: LD_ADDR_VAR 0 2
8222: PUSH
8223: LD_INT 22
8225: PUSH
8226: LD_VAR 0 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 2
8237: PUSH
8238: LD_INT 21
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 33
8250: PUSH
8251: LD_INT 3
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 33
8260: PUSH
8261: LD_INT 5
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// end ; end_of_file
8283: LD_VAR 0 2
8287: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8288: LD_EXP 38
8292: IFFALSE 8335
8294: GO 8296
8296: DISABLE
8297: LD_INT 0
8299: PPUSH
// begin for i := 1 to 8 do
8300: LD_ADDR_VAR 0 1
8304: PUSH
8305: DOUBLE
8306: LD_INT 1
8308: DEC
8309: ST_TO_ADDR
8310: LD_INT 8
8312: PUSH
8313: FOR_TO
8314: IFFALSE 8333
// SetRestrict ( b_depot , i , state_disabled ) ;
8316: LD_INT 0
8318: PPUSH
8319: LD_VAR 0 1
8323: PPUSH
8324: LD_INT 0
8326: PPUSH
8327: CALL_OW 324
8331: GO 8313
8333: POP
8334: POP
// end ;
8335: PPOPN 1
8337: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8338: LD_EXP 38
8342: IFFALSE 8350
8344: PUSH
8345: CALL 8560 0 0
8349: AND
8350: IFFALSE 8358
8352: PUSH
8353: LD_OWVAR 4
8357: AND
8358: IFFALSE 8557
8360: GO 8362
8362: DISABLE
8363: LD_INT 0
8365: PPUSH
8366: PPUSH
// begin canWin := false ;
8367: LD_ADDR_VAR 0 2
8371: PUSH
8372: LD_INT 0
8374: ST_TO_ADDR
// if not HasPower ( your_side ) then
8375: LD_OWVAR 2
8379: PPUSH
8380: CALL 8602 0 1
8384: NOT
8385: IFFALSE 8396
// begin Multiplayer_Loose_Message ;
8387: CALL_OW 521
// enable ( mpLose ) ;
8391: LD_INT 102
8393: ENABLE_MARKED
// end else
8394: GO 8557
// begin canWin := true ;
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// for i := 1 to 8 do
8404: LD_ADDR_VAR 0 1
8408: PUSH
8409: DOUBLE
8410: LD_INT 1
8412: DEC
8413: ST_TO_ADDR
8414: LD_INT 8
8416: PUSH
8417: FOR_TO
8418: IFFALSE 8543
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8420: LD_EXP 6
8424: PUSH
8425: LD_VAR 0 1
8429: ARRAY
8430: IFFALSE 8443
8432: PUSH
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL_OW 108
8442: AND
8443: IFFALSE 8457
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: LD_OWVAR 2
8455: NONEQUAL
8456: AND
8457: IFFALSE 8541
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8459: LD_EXP 7
8463: PUSH
8464: LD_VAR 0 1
8468: ARRAY
8469: NOT
8470: IFTRUE 8518
8472: PUSH
8473: LD_EXP 7
8477: PUSH
8478: LD_VAR 0 1
8482: ARRAY
8483: PUSH
8484: LD_EXP 7
8488: PUSH
8489: LD_OWVAR 2
8493: ARRAY
8494: NONEQUAL
8495: IFFALSE 8517
8497: PUSH
8498: LD_OWVAR 2
8502: PPUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 81
8512: PUSH
8513: LD_INT 1
8515: NONEQUAL
8516: AND
8517: OR
8518: IFFALSE 8541
// if HasPower ( i ) then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL 8602 0 1
8529: IFFALSE 8541
// begin canWin := false ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// break ;
8539: GO 8543
// end ;
8541: GO 8417
8543: POP
8544: POP
// if canWin then
8545: LD_VAR 0 2
8549: IFFALSE 8556
// enable ( mpWin ) else
8551: LD_INT 101
8553: ENABLE_MARKED
8554: GO 8557
// enable ;
8556: ENABLE
// end ; end ;
8557: PPOPN 2
8559: END
// function CanWinLoose ; begin
8560: LD_INT 0
8562: PPUSH
// result := true ;
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: LD_INT 1
8570: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8571: CALL_OW 531
8575: IFFALSE 8587
8577: PUSH
8578: CALL_OW 519
8582: PUSH
8583: LD_INT 1
8585: GREATER
8586: AND
8587: IFFALSE 8597
// result := false ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_INT 0
8596: ST_TO_ADDR
// end ;
8597: LD_VAR 0 1
8601: RET
// function HasPower ( i ) ; begin
8602: LD_INT 0
8604: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8605: LD_INT 22
8607: PUSH
8608: LD_VAR 0 1
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 2
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 0
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 30
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PPUSH
8649: CALL_OW 69
8653: NOT
8654: IFFALSE 8658
// exit ;
8656: GO 8723
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8658: LD_ADDR_VAR 0 2
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_VAR 0 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 21
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 33
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 33
8700: PUSH
8701: LD_INT 5
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PPUSH
8718: CALL_OW 69
8722: ST_TO_ADDR
// end ; end_of_file
8723: LD_VAR 0 2
8727: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
8728: LD_EXP 38
8732: IFFALSE 8775
8734: GO 8736
8736: DISABLE
8737: LD_INT 0
8739: PPUSH
// begin for i := 1 to 8 do
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_INT 8
8752: PUSH
8753: FOR_TO
8754: IFFALSE 8773
// SetRestrict ( b_depot , i , state_disabled ) ;
8756: LD_INT 0
8758: PPUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_INT 0
8766: PPUSH
8767: CALL_OW 324
8771: GO 8753
8773: POP
8774: POP
// end ;
8775: PPOPN 1
8777: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
8778: LD_EXP 38
8782: IFFALSE 8790
8784: PUSH
8785: CALL 9000 0 0
8789: AND
8790: IFFALSE 8798
8792: PUSH
8793: LD_OWVAR 4
8797: AND
8798: IFFALSE 8997
8800: GO 8802
8802: DISABLE
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
// begin canWin := false ;
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// if not HasPower ( your_side ) then
8815: LD_OWVAR 2
8819: PPUSH
8820: CALL 9042 0 1
8824: NOT
8825: IFFALSE 8836
// begin Multiplayer_Loose_Message ;
8827: CALL_OW 521
// enable ( mpLose ) ;
8831: LD_INT 102
8833: ENABLE_MARKED
// end else
8834: GO 8997
// begin canWin := true ;
8836: LD_ADDR_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: ST_TO_ADDR
// for i := 1 to 8 do
8844: LD_ADDR_VAR 0 1
8848: PUSH
8849: DOUBLE
8850: LD_INT 1
8852: DEC
8853: ST_TO_ADDR
8854: LD_INT 8
8856: PUSH
8857: FOR_TO
8858: IFFALSE 8983
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8860: LD_EXP 6
8864: PUSH
8865: LD_VAR 0 1
8869: ARRAY
8870: IFFALSE 8883
8872: PUSH
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 108
8882: AND
8883: IFFALSE 8897
8885: PUSH
8886: LD_VAR 0 1
8890: PUSH
8891: LD_OWVAR 2
8895: NONEQUAL
8896: AND
8897: IFFALSE 8981
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8899: LD_EXP 7
8903: PUSH
8904: LD_VAR 0 1
8908: ARRAY
8909: NOT
8910: IFTRUE 8958
8912: PUSH
8913: LD_EXP 7
8917: PUSH
8918: LD_VAR 0 1
8922: ARRAY
8923: PUSH
8924: LD_EXP 7
8928: PUSH
8929: LD_OWVAR 2
8933: ARRAY
8934: NONEQUAL
8935: IFFALSE 8957
8937: PUSH
8938: LD_OWVAR 2
8942: PPUSH
8943: LD_VAR 0 1
8947: PPUSH
8948: CALL_OW 81
8952: PUSH
8953: LD_INT 1
8955: NONEQUAL
8956: AND
8957: OR
8958: IFFALSE 8981
// if HasPower ( i ) then
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL 9042 0 1
8969: IFFALSE 8981
// begin canWin := false ;
8971: LD_ADDR_VAR 0 2
8975: PUSH
8976: LD_INT 0
8978: ST_TO_ADDR
// break ;
8979: GO 8983
// end ;
8981: GO 8857
8983: POP
8984: POP
// if canWin then
8985: LD_VAR 0 2
8989: IFFALSE 8996
// enable ( mpWin ) else
8991: LD_INT 101
8993: ENABLE_MARKED
8994: GO 8997
// enable ;
8996: ENABLE
// end ; end ;
8997: PPOPN 2
8999: END
// function CanWinLoose ; begin
9000: LD_INT 0
9002: PPUSH
// result := true ;
9003: LD_ADDR_VAR 0 1
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9011: CALL_OW 531
9015: IFFALSE 9027
9017: PUSH
9018: CALL_OW 519
9022: PUSH
9023: LD_INT 1
9025: GREATER
9026: AND
9027: IFFALSE 9037
// result := false ;
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_INT 0
9036: ST_TO_ADDR
// end ;
9037: LD_VAR 0 1
9041: RET
// function HasPower ( i ) ; begin
9042: LD_INT 0
9044: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9045: LD_INT 22
9047: PUSH
9048: LD_VAR 0 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 2
9059: PUSH
9060: LD_INT 30
9062: PUSH
9063: LD_INT 0
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 30
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: NOT
9094: IFFALSE 9098
// exit ;
9096: GO 9163
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: LD_INT 22
9105: PUSH
9106: LD_VAR 0 1
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 2
9117: PUSH
9118: LD_INT 21
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 33
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 33
9140: PUSH
9141: LD_INT 5
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 69
9162: ST_TO_ADDR
// end ; end_of_file
9163: LD_VAR 0 2
9167: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
9168: LD_VAR 0 1
9172: PUSH
9173: LD_INT 200
9175: DOUBLE
9176: GREATEREQUAL
9177: IFFALSE 9185
9179: LD_INT 299
9181: DOUBLE
9182: LESSEQUAL
9183: IFTRUE 9187
9185: GO 9219
9187: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
9188: LD_VAR 0 1
9192: PPUSH
9193: LD_VAR 0 2
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: LD_VAR 0 4
9207: PPUSH
9208: LD_VAR 0 5
9212: PPUSH
9213: CALL 10081 0 5
9217: GO 9296
9219: LD_INT 300
9221: DOUBLE
9222: GREATEREQUAL
9223: IFFALSE 9231
9225: LD_INT 399
9227: DOUBLE
9228: LESSEQUAL
9229: IFTRUE 9233
9231: GO 9295
9233: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
9234: LD_VAR 0 1
9238: PPUSH
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_VAR 0 3
9248: PPUSH
9249: LD_VAR 0 4
9253: PPUSH
9254: LD_VAR 0 5
9258: PPUSH
9259: LD_VAR 0 6
9263: PPUSH
9264: LD_VAR 0 7
9268: PPUSH
9269: LD_VAR 0 8
9273: PPUSH
9274: LD_VAR 0 9
9278: PPUSH
9279: LD_VAR 0 10
9283: PPUSH
9284: LD_VAR 0 11
9288: PPUSH
9289: CALL 16509 0 11
9293: GO 9296
9295: POP
// end ;
9296: PPOPN 11
9298: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
9299: LD_VAR 0 1
9303: PPUSH
9304: LD_VAR 0 2
9308: PPUSH
9309: LD_VAR 0 3
9313: PPUSH
9314: LD_VAR 0 4
9318: PPUSH
9319: LD_VAR 0 5
9323: PPUSH
9324: CALL 9381 0 5
// end ; end_of_file
9328: PPOPN 5
9330: END
// export function SOS_UnitDestroyed ( un ) ; begin
9331: LD_INT 0
9333: PPUSH
// ComRadiation ( un ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL 10501 0 1
// end ;
9343: LD_VAR 0 2
9347: RET
// export function SOS_UnitKamikazed ( un ) ; begin
9348: LD_INT 0
9350: PPUSH
// ComRadiation ( un ) ;
9351: LD_VAR 0 1
9355: PPUSH
9356: CALL 10501 0 1
// end ;
9360: LD_VAR 0 2
9364: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9365: LD_INT 0
9367: PPUSH
// end ;
9368: LD_VAR 0 4
9372: RET
// export function SOS_Command ( cmd ) ; begin
9373: LD_INT 0
9375: PPUSH
// end ;
9376: LD_VAR 0 2
9380: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9381: LD_INT 0
9383: PPUSH
// end ;
9384: LD_VAR 0 6
9388: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
9395: PPUSH
// if not vehicle or not factory then
9396: LD_VAR 0 1
9400: NOT
9401: IFTRUE 9410
9403: PUSH
9404: LD_VAR 0 2
9408: NOT
9409: OR
9410: IFFALSE 9414
// exit ;
9412: GO 10076
// weapon := GetWeapon ( vehicle ) ;
9414: LD_ADDR_VAR 0 7
9418: PUSH
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL_OW 264
9428: ST_TO_ADDR
// if weapon = ar_miner then
9429: LD_VAR 0 7
9433: PUSH
9434: LD_INT 81
9436: EQUAL
9437: IFFALSE 9494
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
9439: LD_ADDR_EXP 56
9443: PUSH
9444: LD_EXP 56
9448: PPUSH
9449: LD_EXP 56
9453: PUSH
9454: LD_INT 1
9456: PLUS
9457: PPUSH
9458: LD_VAR 0 1
9462: PPUSH
9463: CALL_OW 1
9467: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9468: LD_ADDR_EXP 57
9472: PUSH
9473: LD_EXP 57
9477: PPUSH
9478: LD_EXP 57
9482: PUSH
9483: LD_INT 1
9485: PLUS
9486: PPUSH
9487: EMPTY
9488: PPUSH
9489: CALL_OW 1
9493: ST_TO_ADDR
// end ; if not factoryWaypoints then
9494: LD_EXP 59
9498: NOT
9499: IFFALSE 9503
// exit ;
9501: GO 10076
// for i := 1 to Count ( factoryWaypoints ) do
9503: LD_ADDR_VAR 0 4
9507: PUSH
9508: DOUBLE
9509: LD_INT 1
9511: DEC
9512: ST_TO_ADDR
9513: LD_EXP 59
9517: PPUSH
9518: CALL 19583 0 1
9522: PUSH
9523: FOR_TO
9524: IFFALSE 10074
// if factoryWaypoints [ i ] [ 2 ] = factory then
9526: LD_EXP 59
9530: PUSH
9531: LD_VAR 0 4
9535: ARRAY
9536: PUSH
9537: LD_INT 2
9539: ARRAY
9540: PUSH
9541: LD_VAR 0 2
9545: EQUAL
9546: IFFALSE 10072
// begin if GetControl ( vehicle ) = control_manual then
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 263
9557: PUSH
9558: LD_INT 1
9560: EQUAL
9561: IFFALSE 9925
// begin driver := IsDrivenBy ( vehicle ) ;
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: LD_VAR 0 1
9572: PPUSH
9573: CALL_OW 311
9577: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
9578: LD_VAR 0 5
9582: PUSH
9583: LD_EXP 60
9587: IN
9588: IFTRUE 9602
9590: PUSH
9591: LD_VAR 0 1
9595: PUSH
9596: LD_EXP 60
9600: IN
9601: OR
9602: IFFALSE 9608
// exit ;
9604: POP
9605: POP
9606: GO 10076
// if not HasTask ( driver ) then
9608: LD_VAR 0 5
9612: PPUSH
9613: CALL_OW 314
9617: NOT
9618: IFFALSE 9923
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
9620: LD_ADDR_EXP 60
9624: PUSH
9625: LD_EXP 60
9629: PPUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: CALL 55559 0 2
9639: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
9640: LD_ADDR_EXP 60
9644: PUSH
9645: LD_EXP 60
9649: PPUSH
9650: LD_VAR 0 1
9654: PPUSH
9655: CALL 55559 0 2
9659: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9660: LD_ADDR_VAR 0 6
9664: PUSH
9665: LD_EXP 59
9669: PUSH
9670: LD_VAR 0 4
9674: ARRAY
9675: PUSH
9676: LD_INT 3
9678: ARRAY
9679: PPUSH
9680: LD_EXP 59
9684: PUSH
9685: LD_VAR 0 4
9689: ARRAY
9690: PUSH
9691: LD_INT 4
9693: ARRAY
9694: PPUSH
9695: CALL_OW 428
9699: ST_TO_ADDR
// if hex then
9700: LD_VAR 0 6
9704: IFFALSE 9722
// ComMoveUnit ( driver , hex ) else
9706: LD_VAR 0 5
9710: PPUSH
9711: LD_VAR 0 6
9715: PPUSH
9716: CALL_OW 112
9720: GO 9806
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
9722: LD_VAR 0 1
9726: PPUSH
9727: LD_EXP 59
9731: PUSH
9732: LD_VAR 0 4
9736: ARRAY
9737: PUSH
9738: LD_INT 3
9740: ARRAY
9741: PPUSH
9742: LD_EXP 59
9746: PUSH
9747: LD_VAR 0 4
9751: ARRAY
9752: PUSH
9753: LD_INT 4
9755: ARRAY
9756: PPUSH
9757: CALL_OW 297
9761: PUSH
9762: LD_INT 0
9764: GREATER
9765: IFFALSE 9806
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9767: LD_VAR 0 5
9771: PPUSH
9772: LD_EXP 59
9776: PUSH
9777: LD_VAR 0 4
9781: ARRAY
9782: PUSH
9783: LD_INT 3
9785: ARRAY
9786: PPUSH
9787: LD_EXP 59
9791: PUSH
9792: LD_VAR 0 4
9796: ARRAY
9797: PUSH
9798: LD_INT 4
9800: ARRAY
9801: PPUSH
9802: CALL_OW 111
// AddComExitVehicle ( driver ) ;
9806: LD_VAR 0 5
9810: PPUSH
9811: CALL_OW 181
// if Multiplayer then
9815: LD_OWVAR 4
9819: IFFALSE 9868
// begin repeat wait ( 10 ) ;
9821: LD_INT 10
9823: PPUSH
9824: CALL_OW 67
// until not IsInUnit ( driver ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: CALL_OW 310
9837: NOT
9838: IFFALSE 9821
// if not HasTask ( driver ) then
9840: LD_VAR 0 5
9844: PPUSH
9845: CALL_OW 314
9849: NOT
9850: IFFALSE 9866
// ComEnterUnit ( driver , factory ) ;
9852: LD_VAR 0 5
9856: PPUSH
9857: LD_VAR 0 2
9861: PPUSH
9862: CALL_OW 120
// end else
9866: GO 9882
// AddComEnterUnit ( driver , factory ) ;
9868: LD_VAR 0 5
9872: PPUSH
9873: LD_VAR 0 2
9877: PPUSH
9878: CALL_OW 180
// wait ( 0 0$1 ) ;
9882: LD_INT 35
9884: PPUSH
9885: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
9889: LD_ADDR_EXP 60
9893: PUSH
9894: LD_EXP 60
9898: PUSH
9899: LD_VAR 0 5
9903: DIFF
9904: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
9905: LD_ADDR_EXP 60
9909: PUSH
9910: LD_EXP 60
9914: PUSH
9915: LD_VAR 0 1
9919: DIFF
9920: ST_TO_ADDR
// break ;
9921: GO 10074
// end ; end else
9923: GO 10072
// if GetControl ( vehicle ) = control_remote then
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL_OW 263
9934: PUSH
9935: LD_INT 2
9937: EQUAL
9938: IFFALSE 10024
// begin wait ( 0 0$2 ) ;
9940: LD_INT 70
9942: PPUSH
9943: CALL_OW 67
// repeat wait ( 10 ) ;
9947: LD_INT 10
9949: PPUSH
9950: CALL_OW 67
// Connect ( vehicle ) ;
9954: LD_VAR 0 1
9958: PPUSH
9959: CALL 25861 0 1
// until IsControledBy ( vehicle ) ;
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 312
9972: IFFALSE 9947
// wait ( 10 ) ;
9974: LD_INT 10
9976: PPUSH
9977: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9981: LD_VAR 0 1
9985: PPUSH
9986: LD_EXP 59
9990: PUSH
9991: LD_VAR 0 4
9995: ARRAY
9996: PUSH
9997: LD_INT 3
9999: ARRAY
10000: PPUSH
10001: LD_EXP 59
10005: PUSH
10006: LD_VAR 0 4
10010: ARRAY
10011: PUSH
10012: LD_INT 4
10014: ARRAY
10015: PPUSH
10016: CALL_OW 111
// break ;
10020: GO 10074
// end else
10022: GO 10072
// begin wait ( 0 0$3 ) ;
10024: LD_INT 105
10026: PPUSH
10027: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: LD_EXP 59
10040: PUSH
10041: LD_VAR 0 4
10045: ARRAY
10046: PUSH
10047: LD_INT 3
10049: ARRAY
10050: PPUSH
10051: LD_EXP 59
10055: PUSH
10056: LD_VAR 0 4
10060: ARRAY
10061: PUSH
10062: LD_INT 4
10064: ARRAY
10065: PPUSH
10066: CALL_OW 111
// break ;
10070: GO 10074
// end ; end ;
10072: GO 9523
10074: POP
10075: POP
// end ;
10076: LD_VAR 0 3
10080: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10081: LD_INT 0
10083: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10084: LD_VAR 0 1
10088: PUSH
10089: LD_INT 250
10091: EQUAL
10092: IFFALSE 10109
10094: PUSH
10095: LD_VAR 0 2
10099: PPUSH
10100: CALL_OW 264
10104: PUSH
10105: LD_INT 81
10107: EQUAL
10108: AND
10109: IFFALSE 10130
// MinerPlaceMine ( unit , x , y ) ;
10111: LD_VAR 0 2
10115: PPUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: LD_VAR 0 5
10125: PPUSH
10126: CALL 13476 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10130: LD_VAR 0 1
10134: PUSH
10135: LD_INT 251
10137: EQUAL
10138: IFFALSE 10155
10140: PUSH
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 264
10150: PUSH
10151: LD_INT 81
10153: EQUAL
10154: AND
10155: IFFALSE 10176
// MinerDetonateMine ( unit , x , y ) ;
10157: LD_VAR 0 2
10161: PPUSH
10162: LD_VAR 0 4
10166: PPUSH
10167: LD_VAR 0 5
10171: PPUSH
10172: CALL 13883 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10176: LD_VAR 0 1
10180: PUSH
10181: LD_INT 252
10183: EQUAL
10184: IFFALSE 10201
10186: PUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: CALL_OW 264
10196: PUSH
10197: LD_INT 81
10199: EQUAL
10200: AND
10201: IFFALSE 10222
// MinerCreateMinefield ( unit , x , y ) ;
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: LD_VAR 0 5
10217: PPUSH
10218: CALL 14115 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10222: LD_VAR 0 1
10226: PUSH
10227: LD_INT 253
10229: EQUAL
10230: IFFALSE 10247
10232: PUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 257
10242: PUSH
10243: LD_INT 5
10245: EQUAL
10246: AND
10247: IFFALSE 10268
// ComBinocular ( unit , x , y ) ;
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_VAR 0 4
10258: PPUSH
10259: LD_VAR 0 5
10263: PPUSH
10264: CALL 14490 0 3
// if selectedUnit then
10268: LD_VAR 0 3
10272: IFFALSE 10332
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10274: LD_VAR 0 1
10278: PUSH
10279: LD_INT 254
10281: EQUAL
10282: IFFALSE 10299
10284: PUSH
10285: LD_VAR 0 2
10289: PPUSH
10290: CALL_OW 264
10294: PUSH
10295: LD_INT 99
10297: EQUAL
10298: AND
10299: IFFALSE 10316
10301: PUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 263
10311: PUSH
10312: LD_INT 3
10314: EQUAL
10315: AND
10316: IFFALSE 10332
// HackDestroyVehicle ( unit , selectedUnit ) ;
10318: LD_VAR 0 2
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: CALL 12666 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10332: LD_VAR 0 1
10336: PUSH
10337: LD_INT 255
10339: EQUAL
10340: IFFALSE 10364
10342: PUSH
10343: LD_VAR 0 2
10347: PPUSH
10348: CALL_OW 264
10352: PUSH
10353: LD_INT 14
10355: PUSH
10356: LD_INT 53
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: IN
10363: AND
10364: IFFALSE 10382
10366: PUSH
10367: LD_VAR 0 4
10371: PPUSH
10372: LD_VAR 0 5
10376: PPUSH
10377: CALL_OW 488
10381: AND
10382: IFFALSE 10406
// CutTreeXYR ( unit , x , y , 12 ) ;
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 4
10393: PPUSH
10394: LD_VAR 0 5
10398: PPUSH
10399: LD_INT 12
10401: PPUSH
10402: CALL 10597 0 4
// if cmd = 256 then
10406: LD_VAR 0 1
10410: PUSH
10411: LD_INT 256
10413: EQUAL
10414: IFFALSE 10435
// SetFactoryWaypoint ( unit , x , y ) ;
10416: LD_VAR 0 2
10420: PPUSH
10421: LD_VAR 0 4
10425: PPUSH
10426: LD_VAR 0 5
10430: PPUSH
10431: CALL 16517 0 3
// if cmd = 257 then
10435: LD_VAR 0 1
10439: PUSH
10440: LD_INT 257
10442: EQUAL
10443: IFFALSE 10464
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10445: LD_VAR 0 2
10449: PPUSH
10450: LD_VAR 0 4
10454: PPUSH
10455: LD_VAR 0 5
10459: PPUSH
10460: CALL 17013 0 3
// if cmd = 258 then
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 258
10471: EQUAL
10472: IFFALSE 10496
// BurnTreeXYR ( unit , x , y , 8 ) ;
10474: LD_VAR 0 2
10478: PPUSH
10479: LD_VAR 0 4
10483: PPUSH
10484: LD_VAR 0 5
10488: PPUSH
10489: LD_INT 8
10491: PPUSH
10492: CALL 11019 0 4
// end ;
10496: LD_VAR 0 6
10500: RET
// export function ComRadiation ( un ) ; var eff ; begin
10501: LD_INT 0
10503: PPUSH
10504: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 264
10514: PUSH
10515: LD_INT 91
10517: NONEQUAL
10518: IFFALSE 10522
// exit ;
10520: GO 10592
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10522: LD_INT 68
10524: PPUSH
10525: LD_VAR 0 1
10529: PPUSH
10530: CALL_OW 255
10534: PPUSH
10535: CALL_OW 321
10539: PUSH
10540: LD_INT 2
10542: EQUAL
10543: IFFALSE 10555
// eff := 50 else
10545: LD_ADDR_VAR 0 3
10549: PUSH
10550: LD_INT 50
10552: ST_TO_ADDR
10553: GO 10563
// eff := 25 ;
10555: LD_ADDR_VAR 0 3
10559: PUSH
10560: LD_INT 25
10562: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10563: LD_VAR 0 1
10567: PPUSH
10568: CALL_OW 250
10572: PPUSH
10573: LD_VAR 0 1
10577: PPUSH
10578: CALL_OW 251
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: CALL_OW 495
// end ;
10592: LD_VAR 0 2
10596: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10597: LD_INT 0
10599: PPUSH
10600: PPUSH
10601: PPUSH
10602: PPUSH
10603: PPUSH
10604: PPUSH
10605: PPUSH
10606: PPUSH
10607: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
10608: LD_VAR 0 1
10612: PPUSH
10613: CALL_OW 302
10617: NOT
10618: IFTRUE 10637
10620: PUSH
10621: LD_VAR 0 2
10625: PPUSH
10626: LD_VAR 0 3
10630: PPUSH
10631: CALL_OW 488
10635: NOT
10636: OR
10637: IFTRUE 10646
10639: PUSH
10640: LD_VAR 0 4
10644: NOT
10645: OR
10646: IFFALSE 10650
// exit ;
10648: GO 11014
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 437
10659: PPUSH
10660: CALL 19583 0 1
10664: PUSH
10665: LD_INT 10
10667: GREATER
10668: IFFALSE 10672
// exit ;
10670: GO 11014
// list := [ ] ;
10672: LD_ADDR_VAR 0 13
10676: PUSH
10677: EMPTY
10678: ST_TO_ADDR
// if x - r < 0 then
10679: LD_VAR 0 2
10683: PUSH
10684: LD_VAR 0 4
10688: MINUS
10689: PUSH
10690: LD_INT 0
10692: LESS
10693: IFFALSE 10705
// min_x := 0 else
10695: LD_ADDR_VAR 0 7
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
10703: GO 10721
// min_x := x - r ;
10705: LD_ADDR_VAR 0 7
10709: PUSH
10710: LD_VAR 0 2
10714: PUSH
10715: LD_VAR 0 4
10719: MINUS
10720: ST_TO_ADDR
// if y - r < 0 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_VAR 0 4
10730: MINUS
10731: PUSH
10732: LD_INT 0
10734: LESS
10735: IFFALSE 10747
// min_y := 0 else
10737: LD_ADDR_VAR 0 8
10741: PUSH
10742: LD_INT 0
10744: ST_TO_ADDR
10745: GO 10763
// min_y := y - r ;
10747: LD_ADDR_VAR 0 8
10751: PUSH
10752: LD_VAR 0 3
10756: PUSH
10757: LD_VAR 0 4
10761: MINUS
10762: ST_TO_ADDR
// max_x := x + r ;
10763: LD_ADDR_VAR 0 9
10767: PUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_VAR 0 4
10777: PLUS
10778: ST_TO_ADDR
// max_y := y + r ;
10779: LD_ADDR_VAR 0 10
10783: PUSH
10784: LD_VAR 0 3
10788: PUSH
10789: LD_VAR 0 4
10793: PLUS
10794: ST_TO_ADDR
// for _x = min_x to max_x do
10795: LD_ADDR_VAR 0 11
10799: PUSH
10800: DOUBLE
10801: LD_VAR 0 7
10805: DEC
10806: ST_TO_ADDR
10807: LD_VAR 0 9
10811: PUSH
10812: FOR_TO
10813: IFFALSE 10932
// for _y = min_y to max_y do
10815: LD_ADDR_VAR 0 12
10819: PUSH
10820: DOUBLE
10821: LD_VAR 0 8
10825: DEC
10826: ST_TO_ADDR
10827: LD_VAR 0 10
10831: PUSH
10832: FOR_TO
10833: IFFALSE 10928
// begin if not ValidHex ( _x , _y ) then
10835: LD_VAR 0 11
10839: PPUSH
10840: LD_VAR 0 12
10844: PPUSH
10845: CALL_OW 488
10849: NOT
10850: IFFALSE 10854
// continue ;
10852: GO 10832
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10854: LD_VAR 0 11
10858: PPUSH
10859: LD_VAR 0 12
10863: PPUSH
10864: CALL_OW 351
10868: IFFALSE 10886
10870: PUSH
10871: LD_VAR 0 11
10875: PPUSH
10876: LD_VAR 0 12
10880: PPUSH
10881: CALL_OW 554
10885: AND
10886: IFFALSE 10926
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10888: LD_ADDR_VAR 0 13
10892: PUSH
10893: LD_VAR 0 13
10897: PPUSH
10898: LD_VAR 0 13
10902: PUSH
10903: LD_INT 1
10905: PLUS
10906: PPUSH
10907: LD_VAR 0 11
10911: PUSH
10912: LD_VAR 0 12
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 2
10925: ST_TO_ADDR
// end ;
10926: GO 10832
10928: POP
10929: POP
10930: GO 10812
10932: POP
10933: POP
// if not list then
10934: LD_VAR 0 13
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 11014
// for i in list do
10943: LD_ADDR_VAR 0 6
10947: PUSH
10948: LD_VAR 0 13
10952: PUSH
10953: FOR_IN
10954: IFFALSE 11012
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10956: LD_VAR 0 1
10960: PPUSH
10961: LD_STRING M
10963: PUSH
10964: LD_VAR 0 6
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PUSH
10973: LD_VAR 0 6
10977: PUSH
10978: LD_INT 2
10980: ARRAY
10981: PUSH
10982: LD_INT 0
10984: PUSH
10985: LD_INT 0
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 0
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: PPUSH
11006: CALL_OW 447
11010: GO 10953
11012: POP
11013: POP
// end ;
11014: LD_VAR 0 5
11018: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
11023: PPUSH
11024: PPUSH
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL_OW 302
11040: NOT
11041: IFTRUE 11060
11043: PUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: CALL_OW 488
11058: NOT
11059: OR
11060: IFTRUE 11069
11062: PUSH
11063: LD_VAR 0 4
11067: NOT
11068: OR
11069: IFFALSE 11073
// exit ;
11071: GO 11612
// if Count ( GetTaskList ( flame ) ) > 10 then
11073: LD_VAR 0 1
11077: PPUSH
11078: CALL_OW 437
11082: PPUSH
11083: CALL 19583 0 1
11087: PUSH
11088: LD_INT 10
11090: GREATER
11091: IFFALSE 11095
// exit ;
11093: GO 11612
// list := [ ] ;
11095: LD_ADDR_VAR 0 13
11099: PUSH
11100: EMPTY
11101: ST_TO_ADDR
// if x - r < 0 then
11102: LD_VAR 0 2
11106: PUSH
11107: LD_VAR 0 4
11111: MINUS
11112: PUSH
11113: LD_INT 0
11115: LESS
11116: IFFALSE 11128
// min_x := 0 else
11118: LD_ADDR_VAR 0 7
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
11126: GO 11144
// min_x := x - r ;
11128: LD_ADDR_VAR 0 7
11132: PUSH
11133: LD_VAR 0 2
11137: PUSH
11138: LD_VAR 0 4
11142: MINUS
11143: ST_TO_ADDR
// if y - r < 0 then
11144: LD_VAR 0 3
11148: PUSH
11149: LD_VAR 0 4
11153: MINUS
11154: PUSH
11155: LD_INT 0
11157: LESS
11158: IFFALSE 11170
// min_y := 0 else
11160: LD_ADDR_VAR 0 8
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
11168: GO 11186
// min_y := y - r ;
11170: LD_ADDR_VAR 0 8
11174: PUSH
11175: LD_VAR 0 3
11179: PUSH
11180: LD_VAR 0 4
11184: MINUS
11185: ST_TO_ADDR
// max_x := x + r ;
11186: LD_ADDR_VAR 0 9
11190: PUSH
11191: LD_VAR 0 2
11195: PUSH
11196: LD_VAR 0 4
11200: PLUS
11201: ST_TO_ADDR
// max_y := y + r ;
11202: LD_ADDR_VAR 0 10
11206: PUSH
11207: LD_VAR 0 3
11211: PUSH
11212: LD_VAR 0 4
11216: PLUS
11217: ST_TO_ADDR
// for _x = min_x to max_x do
11218: LD_ADDR_VAR 0 11
11222: PUSH
11223: DOUBLE
11224: LD_VAR 0 7
11228: DEC
11229: ST_TO_ADDR
11230: LD_VAR 0 9
11234: PUSH
11235: FOR_TO
11236: IFFALSE 11355
// for _y = min_y to max_y do
11238: LD_ADDR_VAR 0 12
11242: PUSH
11243: DOUBLE
11244: LD_VAR 0 8
11248: DEC
11249: ST_TO_ADDR
11250: LD_VAR 0 10
11254: PUSH
11255: FOR_TO
11256: IFFALSE 11351
// begin if not ValidHex ( _x , _y ) then
11258: LD_VAR 0 11
11262: PPUSH
11263: LD_VAR 0 12
11267: PPUSH
11268: CALL_OW 488
11272: NOT
11273: IFFALSE 11277
// continue ;
11275: GO 11255
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11277: LD_VAR 0 11
11281: PPUSH
11282: LD_VAR 0 12
11286: PPUSH
11287: CALL_OW 351
11291: IFFALSE 11309
11293: PUSH
11294: LD_VAR 0 11
11298: PPUSH
11299: LD_VAR 0 12
11303: PPUSH
11304: CALL_OW 554
11308: AND
11309: IFFALSE 11349
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11311: LD_ADDR_VAR 0 13
11315: PUSH
11316: LD_VAR 0 13
11320: PPUSH
11321: LD_VAR 0 13
11325: PUSH
11326: LD_INT 1
11328: PLUS
11329: PPUSH
11330: LD_VAR 0 11
11334: PUSH
11335: LD_VAR 0 12
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 2
11348: ST_TO_ADDR
// end ;
11349: GO 11255
11351: POP
11352: POP
11353: GO 11235
11355: POP
11356: POP
// if not list then
11357: LD_VAR 0 13
11361: NOT
11362: IFFALSE 11366
// exit ;
11364: GO 11612
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
11366: LD_ADDR_VAR 0 13
11370: PUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: LD_VAR 0 13
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL 22989 0 4
11391: ST_TO_ADDR
// ComStop ( flame ) ;
11392: LD_VAR 0 1
11396: PPUSH
11397: CALL_OW 141
// for i in list do
11401: LD_ADDR_VAR 0 6
11405: PUSH
11406: LD_VAR 0 13
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11443
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_VAR 0 6
11423: PUSH
11424: LD_INT 1
11426: ARRAY
11427: PPUSH
11428: LD_VAR 0 6
11432: PUSH
11433: LD_INT 2
11435: ARRAY
11436: PPUSH
11437: CALL_OW 176
11441: GO 11411
11443: POP
11444: POP
// repeat wait ( 0 0$1 ) ;
11445: LD_INT 35
11447: PPUSH
11448: CALL_OW 67
// task := GetTaskList ( flame ) ;
11452: LD_ADDR_VAR 0 14
11456: PUSH
11457: LD_VAR 0 1
11461: PPUSH
11462: CALL_OW 437
11466: ST_TO_ADDR
// if not task then
11467: LD_VAR 0 14
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 11612
// if task [ 1 ] [ 1 ] <> | then
11476: LD_VAR 0 14
11480: PUSH
11481: LD_INT 1
11483: ARRAY
11484: PUSH
11485: LD_INT 1
11487: ARRAY
11488: PUSH
11489: LD_STRING |
11491: NONEQUAL
11492: IFFALSE 11496
// exit ;
11494: GO 11612
// _x := task [ 1 ] [ 2 ] ;
11496: LD_ADDR_VAR 0 11
11500: PUSH
11501: LD_VAR 0 14
11505: PUSH
11506: LD_INT 1
11508: ARRAY
11509: PUSH
11510: LD_INT 2
11512: ARRAY
11513: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
11514: LD_ADDR_VAR 0 12
11518: PUSH
11519: LD_VAR 0 14
11523: PUSH
11524: LD_INT 1
11526: ARRAY
11527: PUSH
11528: LD_INT 3
11530: ARRAY
11531: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
11532: LD_VAR 0 11
11536: PPUSH
11537: LD_VAR 0 12
11541: PPUSH
11542: CALL_OW 351
11546: NOT
11547: IFTRUE 11566
11549: PUSH
11550: LD_VAR 0 11
11554: PPUSH
11555: LD_VAR 0 12
11559: PPUSH
11560: CALL_OW 554
11564: NOT
11565: OR
11566: IFFALSE 11600
// begin task := Delete ( task , 1 ) ;
11568: LD_ADDR_VAR 0 14
11572: PUSH
11573: LD_VAR 0 14
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 3
11585: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_VAR 0 14
11595: PPUSH
11596: CALL_OW 446
// end ; until not HasTask ( flame ) ;
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 314
11609: NOT
11610: IFFALSE 11445
// end ;
11612: LD_VAR 0 5
11616: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11617: LD_EXP 49
11621: NOT
11622: IFFALSE 11672
11624: GO 11626
11626: DISABLE
// begin initHack := true ;
11627: LD_ADDR_EXP 49
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// hackTanks := [ ] ;
11635: LD_ADDR_EXP 50
11639: PUSH
11640: EMPTY
11641: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11642: LD_ADDR_EXP 51
11646: PUSH
11647: EMPTY
11648: ST_TO_ADDR
// hackLimit := 3 ;
11649: LD_ADDR_EXP 52
11653: PUSH
11654: LD_INT 3
11656: ST_TO_ADDR
// hackDist := 12 ;
11657: LD_ADDR_EXP 53
11661: PUSH
11662: LD_INT 12
11664: ST_TO_ADDR
// hackCounter := [ ] ;
11665: LD_ADDR_EXP 54
11669: PUSH
11670: EMPTY
11671: ST_TO_ADDR
// end ;
11672: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11673: LD_EXP 49
11677: IFFALSE 11695
11679: PUSH
11680: LD_INT 34
11682: PUSH
11683: LD_INT 99
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: AND
11695: IFFALSE 11948
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
// begin enable ;
11704: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 34
11712: PUSH
11713: LD_INT 99
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: PUSH
11725: FOR_IN
11726: IFFALSE 11946
// begin if not i in hackTanks then
11728: LD_VAR 0 1
11732: PUSH
11733: LD_EXP 50
11737: IN
11738: NOT
11739: IFFALSE 11822
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11741: LD_ADDR_EXP 50
11745: PUSH
11746: LD_EXP 50
11750: PPUSH
11751: LD_EXP 50
11755: PUSH
11756: LD_INT 1
11758: PLUS
11759: PPUSH
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 1
11769: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11770: LD_ADDR_EXP 51
11774: PUSH
11775: LD_EXP 51
11779: PPUSH
11780: LD_EXP 51
11784: PUSH
11785: LD_INT 1
11787: PLUS
11788: PPUSH
11789: EMPTY
11790: PPUSH
11791: CALL_OW 1
11795: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11796: LD_ADDR_EXP 54
11800: PUSH
11801: LD_EXP 54
11805: PPUSH
11806: LD_EXP 54
11810: PUSH
11811: LD_INT 1
11813: PLUS
11814: PPUSH
11815: EMPTY
11816: PPUSH
11817: CALL_OW 1
11821: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 302
11831: NOT
11832: IFFALSE 11845
// begin HackUnlinkAll ( i ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL 11951 0 1
// continue ;
11843: GO 11725
// end ; HackCheckCapturedStatus ( i ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL 12396 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_INT 81
11861: PUSH
11862: LD_VAR 0 1
11866: PPUSH
11867: CALL_OW 255
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 33
11878: PUSH
11879: LD_INT 3
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 91
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 53
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 50
11906: PUSH
11907: EMPTY
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL_OW 69
11920: ST_TO_ADDR
// if not tmp then
11921: LD_VAR 0 2
11925: NOT
11926: IFFALSE 11930
// continue ;
11928: GO 11725
// HackLink ( i , tmp ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: LD_VAR 0 2
11939: PPUSH
11940: CALL 12087 0 2
// end ;
11944: GO 11725
11946: POP
11947: POP
// end ;
11948: PPOPN 2
11950: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11951: LD_INT 0
11953: PPUSH
11954: PPUSH
11955: PPUSH
// if not hack in hackTanks then
11956: LD_VAR 0 1
11960: PUSH
11961: LD_EXP 50
11965: IN
11966: NOT
11967: IFFALSE 11971
// exit ;
11969: GO 12082
// index := GetElementIndex ( hackTanks , hack ) ;
11971: LD_ADDR_VAR 0 4
11975: PUSH
11976: LD_EXP 50
11980: PPUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL 22284 0 2
11990: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11991: LD_EXP 51
11995: PUSH
11996: LD_VAR 0 4
12000: ARRAY
12001: IFFALSE 12082
// begin for i in hackTanksCaptured [ index ] do
12003: LD_ADDR_VAR 0 3
12007: PUSH
12008: LD_EXP 51
12012: PUSH
12013: LD_VAR 0 4
12017: ARRAY
12018: PUSH
12019: FOR_IN
12020: IFFALSE 12046
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 2
12038: ARRAY
12039: PPUSH
12040: CALL_OW 235
12044: GO 12019
12046: POP
12047: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12048: LD_ADDR_EXP 51
12052: PUSH
12053: LD_EXP 51
12057: PPUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: EMPTY
12064: PPUSH
12065: CALL_OW 1
12069: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 0
12077: PPUSH
12078: CALL_OW 505
// end ; end ;
12082: LD_VAR 0 2
12086: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
12091: PPUSH
// if not hack in hackTanks or not vehicles then
12092: LD_VAR 0 1
12096: PUSH
12097: LD_EXP 50
12101: IN
12102: NOT
12103: IFTRUE 12112
12105: PUSH
12106: LD_VAR 0 2
12110: NOT
12111: OR
12112: IFFALSE 12116
// exit ;
12114: GO 12391
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12116: LD_ADDR_VAR 0 2
12120: PUSH
12121: LD_VAR 0 1
12125: PPUSH
12126: LD_VAR 0 2
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL 22936 0 4
12141: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12142: LD_ADDR_VAR 0 5
12146: PUSH
12147: LD_EXP 50
12151: PPUSH
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL 22284 0 2
12161: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12162: LD_EXP 51
12166: PUSH
12167: LD_VAR 0 5
12171: ARRAY
12172: PUSH
12173: LD_EXP 52
12177: LESS
12178: IFFALSE 12367
// begin for i := 1 to vehicles do
12180: LD_ADDR_VAR 0 4
12184: PUSH
12185: DOUBLE
12186: LD_INT 1
12188: DEC
12189: ST_TO_ADDR
12190: LD_VAR 0 2
12194: PUSH
12195: FOR_TO
12196: IFFALSE 12365
// begin if hackTanksCaptured [ index ] = hackLimit then
12198: LD_EXP 51
12202: PUSH
12203: LD_VAR 0 5
12207: ARRAY
12208: PUSH
12209: LD_EXP 52
12213: EQUAL
12214: IFFALSE 12218
// break ;
12216: GO 12365
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12218: LD_ADDR_EXP 54
12222: PUSH
12223: LD_EXP 54
12227: PPUSH
12228: LD_VAR 0 5
12232: PPUSH
12233: LD_EXP 54
12237: PUSH
12238: LD_VAR 0 5
12242: ARRAY
12243: PUSH
12244: LD_INT 1
12246: PLUS
12247: PPUSH
12248: CALL_OW 1
12252: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12253: LD_ADDR_EXP 51
12257: PUSH
12258: LD_EXP 51
12262: PPUSH
12263: LD_VAR 0 5
12267: PUSH
12268: LD_EXP 51
12272: PUSH
12273: LD_VAR 0 5
12277: ARRAY
12278: PUSH
12279: LD_INT 1
12281: PLUS
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: LD_VAR 0 2
12291: PUSH
12292: LD_VAR 0 4
12296: ARRAY
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: LD_VAR 0 4
12307: ARRAY
12308: PPUSH
12309: CALL_OW 255
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PPUSH
12318: CALL 22501 0 3
12322: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12323: LD_VAR 0 2
12327: PUSH
12328: LD_VAR 0 4
12332: ARRAY
12333: PPUSH
12334: LD_VAR 0 1
12338: PPUSH
12339: CALL_OW 255
12343: PPUSH
12344: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12348: LD_VAR 0 2
12352: PUSH
12353: LD_VAR 0 4
12357: ARRAY
12358: PPUSH
12359: CALL_OW 141
// end ;
12363: GO 12195
12365: POP
12366: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12367: LD_VAR 0 1
12371: PPUSH
12372: LD_EXP 51
12376: PUSH
12377: LD_VAR 0 5
12381: ARRAY
12382: PUSH
12383: LD_INT 0
12385: PLUS
12386: PPUSH
12387: CALL_OW 505
// end ;
12391: LD_VAR 0 3
12395: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
// if not hack in hackTanks then
12402: LD_VAR 0 1
12406: PUSH
12407: LD_EXP 50
12411: IN
12412: NOT
12413: IFFALSE 12417
// exit ;
12415: GO 12661
// index := GetElementIndex ( hackTanks , hack ) ;
12417: LD_ADDR_VAR 0 4
12421: PUSH
12422: LD_EXP 50
12426: PPUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL 22284 0 2
12436: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12437: LD_ADDR_VAR 0 3
12441: PUSH
12442: DOUBLE
12443: LD_EXP 51
12447: PUSH
12448: LD_VAR 0 4
12452: ARRAY
12453: INC
12454: ST_TO_ADDR
12455: LD_INT 1
12457: PUSH
12458: FOR_DOWNTO
12459: IFFALSE 12635
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12461: LD_ADDR_VAR 0 5
12465: PUSH
12466: LD_EXP 51
12470: PUSH
12471: LD_VAR 0 4
12475: ARRAY
12476: PUSH
12477: LD_VAR 0 3
12481: ARRAY
12482: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12483: LD_VAR 0 5
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: PPUSH
12492: CALL_OW 302
12496: NOT
12497: IFTRUE 12525
12499: PUSH
12500: LD_VAR 0 5
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 255
12513: PUSH
12514: LD_VAR 0 1
12518: PPUSH
12519: CALL_OW 255
12523: NONEQUAL
12524: OR
12525: IFFALSE 12633
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12527: LD_VAR 0 5
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: CALL_OW 305
12540: IFFALSE 12568
12542: PUSH
12543: LD_VAR 0 5
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: CALL_OW 255
12556: PUSH
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 255
12566: EQUAL
12567: AND
12568: IFFALSE 12592
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12570: LD_VAR 0 5
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PPUSH
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 2
12586: ARRAY
12587: PPUSH
12588: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12592: LD_ADDR_EXP 51
12596: PUSH
12597: LD_EXP 51
12601: PPUSH
12602: LD_VAR 0 4
12606: PPUSH
12607: LD_EXP 51
12611: PUSH
12612: LD_VAR 0 4
12616: ARRAY
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: CALL_OW 3
12627: PPUSH
12628: CALL_OW 1
12632: ST_TO_ADDR
// end ; end ;
12633: GO 12458
12635: POP
12636: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12637: LD_VAR 0 1
12641: PPUSH
12642: LD_EXP 51
12646: PUSH
12647: LD_VAR 0 4
12651: ARRAY
12652: PUSH
12653: LD_INT 0
12655: PLUS
12656: PPUSH
12657: CALL_OW 505
// end ;
12661: LD_VAR 0 2
12665: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12666: LD_INT 0
12668: PPUSH
12669: PPUSH
12670: PPUSH
12671: PPUSH
// if not hack in hackTanks then
12672: LD_VAR 0 1
12676: PUSH
12677: LD_EXP 50
12681: IN
12682: NOT
12683: IFFALSE 12687
// exit ;
12685: GO 12772
// index := GetElementIndex ( hackTanks , hack ) ;
12687: LD_ADDR_VAR 0 5
12691: PUSH
12692: LD_EXP 50
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL 22284 0 2
12706: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12707: LD_ADDR_VAR 0 4
12711: PUSH
12712: DOUBLE
12713: LD_INT 1
12715: DEC
12716: ST_TO_ADDR
12717: LD_EXP 51
12721: PUSH
12722: LD_VAR 0 5
12726: ARRAY
12727: PUSH
12728: FOR_TO
12729: IFFALSE 12770
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12731: LD_EXP 51
12735: PUSH
12736: LD_VAR 0 5
12740: ARRAY
12741: PUSH
12742: LD_VAR 0 4
12746: ARRAY
12747: PUSH
12748: LD_INT 1
12750: ARRAY
12751: PUSH
12752: LD_VAR 0 2
12756: EQUAL
12757: IFFALSE 12768
// KillUnit ( vehicle ) ;
12759: LD_VAR 0 2
12763: PPUSH
12764: CALL_OW 66
12768: GO 12728
12770: POP
12771: POP
// end ;
12772: LD_VAR 0 3
12776: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
12777: LD_EXP 55
12781: NOT
12782: IFFALSE 12915
12784: GO 12786
12786: DISABLE
12787: LD_INT 0
12789: PPUSH
// begin initMiner := true ;
12790: LD_ADDR_EXP 55
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// minersList := [ ] ;
12798: LD_ADDR_EXP 56
12802: PUSH
12803: EMPTY
12804: ST_TO_ADDR
// minerMinesList := [ ] ;
12805: LD_ADDR_EXP 57
12809: PUSH
12810: EMPTY
12811: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
12812: LD_ADDR_EXP 58
12816: PUSH
12817: LD_INT 10
12819: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_INT 34
12827: PUSH
12828: LD_INT 81
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: PUSH
12840: FOR_IN
12841: IFFALSE 12913
// begin if not i in minersList then
12843: LD_VAR 0 1
12847: PUSH
12848: LD_EXP 56
12852: IN
12853: NOT
12854: IFFALSE 12911
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12856: LD_ADDR_EXP 56
12860: PUSH
12861: LD_EXP 56
12865: PPUSH
12866: LD_EXP 56
12870: PUSH
12871: LD_INT 1
12873: PLUS
12874: PPUSH
12875: LD_VAR 0 1
12879: PPUSH
12880: CALL_OW 1
12884: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12885: LD_ADDR_EXP 57
12889: PUSH
12890: LD_EXP 57
12894: PPUSH
12895: LD_EXP 57
12899: PUSH
12900: LD_INT 1
12902: PLUS
12903: PPUSH
12904: EMPTY
12905: PPUSH
12906: CALL_OW 1
12910: ST_TO_ADDR
// end end ;
12911: GO 12840
12913: POP
12914: POP
// end ;
12915: PPOPN 1
12917: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
12918: LD_EXP 55
12922: IFFALSE 12953
12924: PUSH
12925: LD_EXP 57
12929: PPUSH
12930: CALL 19583 0 1
12934: IFTRUE 12952
12936: PUSH
12937: LD_INT 34
12939: PUSH
12940: LD_INT 81
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: OR
12952: AND
12953: IFFALSE 13473
12955: GO 12957
12957: DISABLE
12958: LD_INT 0
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
// begin enable ;
12964: ENABLE
// for i := minerMinesList downto 1 do
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: DOUBLE
12971: LD_EXP 57
12975: INC
12976: ST_TO_ADDR
12977: LD_INT 1
12979: PUSH
12980: FOR_DOWNTO
12981: IFFALSE 13471
// begin side := GetSide ( minersList [ i ] ) ;
12983: LD_ADDR_VAR 0 3
12987: PUSH
12988: LD_EXP 56
12992: PUSH
12993: LD_VAR 0 1
12997: ARRAY
12998: PPUSH
12999: CALL_OW 255
13003: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
13004: LD_EXP 56
13008: PUSH
13009: LD_VAR 0 1
13013: ARRAY
13014: PPUSH
13015: CALL_OW 300
13019: IFFALSE 13040
13021: PUSH
13022: LD_VAR 0 3
13026: PUSH
13027: LD_OWVAR 2
13031: PUSH
13032: LD_INT 9
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: IN
13039: AND
13040: IFFALSE 13073
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
13042: LD_EXP 56
13046: PUSH
13047: LD_VAR 0 1
13051: ARRAY
13052: PPUSH
13053: LD_EXP 57
13057: PUSH
13058: LD_VAR 0 1
13062: ARRAY
13063: PPUSH
13064: CALL 19583 0 1
13068: PPUSH
13069: CALL_OW 505
// if not minerMinesList [ i ] then
13073: LD_EXP 57
13077: PUSH
13078: LD_VAR 0 1
13082: ARRAY
13083: NOT
13084: IFFALSE 13088
// continue ;
13086: GO 12980
// for j := minerMinesList [ i ] downto 1 do
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: DOUBLE
13094: LD_EXP 57
13098: PUSH
13099: LD_VAR 0 1
13103: ARRAY
13104: INC
13105: ST_TO_ADDR
13106: LD_INT 1
13108: PUSH
13109: FOR_DOWNTO
13110: IFFALSE 13467
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
13112: LD_EXP 56
13116: PUSH
13117: LD_VAR 0 1
13121: ARRAY
13122: PPUSH
13123: CALL_OW 301
13127: IFTRUE 13147
13129: PUSH
13130: LD_EXP 56
13134: PUSH
13135: LD_VAR 0 1
13139: ARRAY
13140: PPUSH
13141: CALL_OW 305
13145: NOT
13146: OR
13147: IFFALSE 13238
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13149: LD_EXP 57
13153: PUSH
13154: LD_VAR 0 1
13158: ARRAY
13159: PUSH
13160: LD_VAR 0 2
13164: ARRAY
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PPUSH
13170: LD_EXP 57
13174: PUSH
13175: LD_VAR 0 1
13179: ARRAY
13180: PUSH
13181: LD_VAR 0 2
13185: ARRAY
13186: PUSH
13187: LD_INT 2
13189: ARRAY
13190: PPUSH
13191: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13195: LD_ADDR_EXP 57
13199: PUSH
13200: LD_EXP 57
13204: PPUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: LD_EXP 57
13214: PUSH
13215: LD_VAR 0 1
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 2
13225: PPUSH
13226: CALL_OW 3
13230: PPUSH
13231: CALL_OW 1
13235: ST_TO_ADDR
// continue ;
13236: GO 13109
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13238: LD_ADDR_VAR 0 4
13242: PUSH
13243: LD_EXP 57
13247: PUSH
13248: LD_VAR 0 1
13252: ARRAY
13253: PUSH
13254: LD_VAR 0 2
13258: ARRAY
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_EXP 57
13268: PUSH
13269: LD_VAR 0 1
13273: ARRAY
13274: PUSH
13275: LD_VAR 0 2
13279: ARRAY
13280: PUSH
13281: LD_INT 2
13283: ARRAY
13284: PPUSH
13285: CALL_OW 428
13289: ST_TO_ADDR
// if not tmp then
13290: LD_VAR 0 4
13294: NOT
13295: IFFALSE 13299
// continue ;
13297: GO 13109
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13299: LD_VAR 0 4
13303: PUSH
13304: LD_INT 81
13306: PUSH
13307: LD_VAR 0 3
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: IN
13321: IFFALSE 13371
13323: PUSH
13324: LD_EXP 57
13328: PUSH
13329: LD_VAR 0 1
13333: ARRAY
13334: PUSH
13335: LD_VAR 0 2
13339: ARRAY
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_EXP 57
13349: PUSH
13350: LD_VAR 0 1
13354: ARRAY
13355: PUSH
13356: LD_VAR 0 2
13360: ARRAY
13361: PUSH
13362: LD_INT 2
13364: ARRAY
13365: PPUSH
13366: CALL_OW 458
13370: AND
13371: IFFALSE 13465
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13373: LD_EXP 57
13377: PUSH
13378: LD_VAR 0 1
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 2
13388: ARRAY
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: LD_EXP 57
13398: PUSH
13399: LD_VAR 0 1
13403: ARRAY
13404: PUSH
13405: LD_VAR 0 2
13409: ARRAY
13410: PUSH
13411: LD_INT 2
13413: ARRAY
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13424: LD_ADDR_EXP 57
13428: PUSH
13429: LD_EXP 57
13433: PPUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_EXP 57
13443: PUSH
13444: LD_VAR 0 1
13448: ARRAY
13449: PPUSH
13450: LD_VAR 0 2
13454: PPUSH
13455: CALL_OW 3
13459: PPUSH
13460: CALL_OW 1
13464: ST_TO_ADDR
// end ; end ;
13465: GO 13109
13467: POP
13468: POP
// end ;
13469: GO 12980
13471: POP
13472: POP
// end ;
13473: PPOPN 4
13475: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
13476: LD_INT 0
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
// result := false ;
13482: LD_ADDR_VAR 0 4
13486: PUSH
13487: LD_INT 0
13489: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 264
13499: PUSH
13500: LD_INT 81
13502: EQUAL
13503: NOT
13504: IFFALSE 13508
// exit ;
13506: GO 13878
// side := GetSide ( unit ) ;
13508: LD_ADDR_VAR 0 6
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 255
13522: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
13523: LD_ADDR_VAR 0 5
13527: PUSH
13528: LD_EXP 56
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL 22284 0 2
13542: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13543: LD_EXP 57
13547: PUSH
13548: LD_VAR 0 5
13552: ARRAY
13553: PUSH
13554: LD_EXP 58
13558: GREATEREQUAL
13559: IFFALSE 13563
// exit ;
13561: GO 13878
// ComMoveXY ( unit , x , y ) ;
13563: LD_VAR 0 1
13567: PPUSH
13568: LD_VAR 0 2
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL 54340 0 3
13608: NOT
13609: IFFALSE 13622
13611: PUSH
13612: LD_VAR 0 1
13616: PPUSH
13617: CALL_OW 314
13621: AND
13622: IFFALSE 13626
// exit ;
13624: GO 13878
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 428
13640: PUSH
13641: LD_VAR 0 1
13645: EQUAL
13646: IFFALSE 13660
13648: PUSH
13649: LD_VAR 0 1
13653: PPUSH
13654: CALL_OW 314
13658: NOT
13659: AND
13660: IFFALSE 13582
// if MineAtPos ( x , y ) then
13662: LD_VAR 0 2
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: CALL_OW 458
13676: IFFALSE 13680
// exit ;
13678: GO 13878
// if your_side = side then
13680: LD_OWVAR 2
13684: PUSH
13685: LD_VAR 0 6
13689: EQUAL
13690: IFFALSE 13709
// PlaySoundXY ( x , y , PlantMine ) ;
13692: LD_VAR 0 2
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_STRING PlantMine
13704: PPUSH
13705: CALL_OW 366
// repeat wait ( 1 ) ;
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
13716: LD_VAR 0 2
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_VAR 0 6
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL_OW 454
13738: IFFALSE 13709
// if MineAtPos ( x , y ) then
13740: LD_VAR 0 2
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: CALL_OW 458
13754: IFFALSE 13870
// begin for i in minerMinesList [ index ] do
13756: LD_ADDR_VAR 0 7
13760: PUSH
13761: LD_EXP 57
13765: PUSH
13766: LD_VAR 0 5
13770: ARRAY
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13815
// if i [ 1 ] = x and i [ 2 ] = y then
13775: LD_VAR 0 7
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PUSH
13784: LD_VAR 0 2
13788: EQUAL
13789: IFFALSE 13807
13791: PUSH
13792: LD_VAR 0 7
13796: PUSH
13797: LD_INT 2
13799: ARRAY
13800: PUSH
13801: LD_VAR 0 3
13805: EQUAL
13806: AND
13807: IFFALSE 13813
// exit ;
13809: POP
13810: POP
13811: GO 13878
13813: GO 13772
13815: POP
13816: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13817: LD_ADDR_EXP 57
13821: PUSH
13822: LD_EXP 57
13826: PPUSH
13827: LD_VAR 0 5
13831: PUSH
13832: LD_EXP 57
13836: PUSH
13837: LD_VAR 0 5
13841: ARRAY
13842: PUSH
13843: LD_INT 1
13845: PLUS
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PPUSH
13851: LD_VAR 0 2
13855: PUSH
13856: LD_VAR 0 3
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL 22501 0 3
13869: ST_TO_ADDR
// end ; result := true ;
13870: LD_ADDR_VAR 0 4
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
// end ;
13878: LD_VAR 0 4
13882: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13883: LD_INT 0
13885: PPUSH
13886: PPUSH
13887: PPUSH
// if not unit in minersList then
13888: LD_VAR 0 1
13892: PUSH
13893: LD_EXP 56
13897: IN
13898: NOT
13899: IFFALSE 13903
// exit ;
13901: GO 14110
// index := GetElementIndex ( minersList , unit ) ;
13903: LD_ADDR_VAR 0 6
13907: PUSH
13908: LD_EXP 56
13912: PPUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL 22284 0 2
13922: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13923: LD_ADDR_VAR 0 5
13927: PUSH
13928: DOUBLE
13929: LD_EXP 57
13933: PUSH
13934: LD_VAR 0 6
13938: ARRAY
13939: INC
13940: ST_TO_ADDR
13941: LD_INT 1
13943: PUSH
13944: FOR_DOWNTO
13945: IFFALSE 14108
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13947: LD_EXP 57
13951: PUSH
13952: LD_VAR 0 6
13956: ARRAY
13957: PUSH
13958: LD_VAR 0 5
13962: ARRAY
13963: PUSH
13964: LD_INT 1
13966: ARRAY
13967: PPUSH
13968: LD_EXP 57
13972: PUSH
13973: LD_VAR 0 6
13977: ARRAY
13978: PUSH
13979: LD_VAR 0 5
13983: ARRAY
13984: PUSH
13985: LD_INT 2
13987: ARRAY
13988: PPUSH
13989: LD_VAR 0 2
13993: PPUSH
13994: LD_VAR 0 3
13998: PPUSH
13999: CALL_OW 298
14003: PUSH
14004: LD_INT 6
14006: LESS
14007: IFFALSE 14106
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14009: LD_EXP 57
14013: PUSH
14014: LD_VAR 0 6
14018: ARRAY
14019: PUSH
14020: LD_VAR 0 5
14024: ARRAY
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: LD_EXP 57
14034: PUSH
14035: LD_VAR 0 6
14039: ARRAY
14040: PUSH
14041: LD_VAR 0 5
14045: ARRAY
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: PPUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 255
14060: PPUSH
14061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14065: LD_ADDR_EXP 57
14069: PUSH
14070: LD_EXP 57
14074: PPUSH
14075: LD_VAR 0 6
14079: PPUSH
14080: LD_EXP 57
14084: PUSH
14085: LD_VAR 0 6
14089: ARRAY
14090: PPUSH
14091: LD_VAR 0 5
14095: PPUSH
14096: CALL_OW 3
14100: PPUSH
14101: CALL_OW 1
14105: ST_TO_ADDR
// end ; end ;
14106: GO 13944
14108: POP
14109: POP
// end ;
14110: LD_VAR 0 4
14114: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
14123: PPUSH
14124: PPUSH
14125: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 264
14135: PUSH
14136: LD_INT 81
14138: EQUAL
14139: NOT
14140: IFTRUE 14155
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: LD_EXP 56
14152: IN
14153: NOT
14154: OR
14155: IFFALSE 14159
// exit ;
14157: GO 14485
// index := GetElementIndex ( minersList , unit ) ;
14159: LD_ADDR_VAR 0 6
14163: PUSH
14164: LD_EXP 56
14168: PPUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL 22284 0 2
14178: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14179: LD_ADDR_VAR 0 8
14183: PUSH
14184: LD_EXP 58
14188: PUSH
14189: LD_EXP 57
14193: PUSH
14194: LD_VAR 0 6
14198: ARRAY
14199: MINUS
14200: ST_TO_ADDR
// if not minesFreeAmount then
14201: LD_VAR 0 8
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14485
// tmp := [ ] ;
14210: LD_ADDR_VAR 0 7
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14217: LD_ADDR_VAR 0 5
14221: PUSH
14222: DOUBLE
14223: LD_INT 1
14225: DEC
14226: ST_TO_ADDR
14227: LD_VAR 0 8
14231: PUSH
14232: FOR_TO
14233: IFFALSE 14432
// begin _d := rand ( 0 , 5 ) ;
14235: LD_ADDR_VAR 0 11
14239: PUSH
14240: LD_INT 0
14242: PPUSH
14243: LD_INT 5
14245: PPUSH
14246: CALL_OW 12
14250: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14251: LD_ADDR_VAR 0 12
14255: PUSH
14256: LD_INT 2
14258: PPUSH
14259: LD_INT 6
14261: PPUSH
14262: CALL_OW 12
14266: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14267: LD_ADDR_VAR 0 9
14271: PUSH
14272: LD_VAR 0 2
14276: PPUSH
14277: LD_VAR 0 11
14281: PPUSH
14282: LD_VAR 0 12
14286: PPUSH
14287: CALL_OW 272
14291: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14292: LD_ADDR_VAR 0 10
14296: PUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_VAR 0 11
14306: PPUSH
14307: LD_VAR 0 12
14311: PPUSH
14312: CALL_OW 273
14316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14317: LD_VAR 0 9
14321: PPUSH
14322: LD_VAR 0 10
14326: PPUSH
14327: CALL_OW 488
14331: IFFALSE 14355
14333: PUSH
14334: LD_VAR 0 9
14338: PUSH
14339: LD_VAR 0 10
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_VAR 0 7
14352: IN
14353: NOT
14354: AND
14355: IFFALSE 14374
14357: PUSH
14358: LD_VAR 0 9
14362: PPUSH
14363: LD_VAR 0 10
14367: PPUSH
14368: CALL_OW 458
14372: NOT
14373: AND
14374: IFFALSE 14416
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14376: LD_ADDR_VAR 0 7
14380: PUSH
14381: LD_VAR 0 7
14385: PPUSH
14386: LD_VAR 0 7
14390: PUSH
14391: LD_INT 1
14393: PLUS
14394: PPUSH
14395: LD_VAR 0 9
14399: PUSH
14400: LD_VAR 0 10
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PPUSH
14409: CALL_OW 1
14413: ST_TO_ADDR
14414: GO 14430
// i := i - 1 ;
14416: LD_ADDR_VAR 0 5
14420: PUSH
14421: LD_VAR 0 5
14425: PUSH
14426: LD_INT 1
14428: MINUS
14429: ST_TO_ADDR
// end ;
14430: GO 14232
14432: POP
14433: POP
// for i in tmp do
14434: LD_ADDR_VAR 0 5
14438: PUSH
14439: LD_VAR 0 7
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14483
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14447: LD_VAR 0 1
14451: PPUSH
14452: LD_VAR 0 5
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: LD_VAR 0 5
14465: PUSH
14466: LD_INT 2
14468: ARRAY
14469: PPUSH
14470: CALL 13476 0 3
14474: NOT
14475: IFFALSE 14481
// exit ;
14477: POP
14478: POP
14479: GO 14485
14481: GO 14444
14483: POP
14484: POP
// end ;
14485: LD_VAR 0 4
14489: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
14490: LD_INT 0
14492: PPUSH
14493: PPUSH
14494: PPUSH
14495: PPUSH
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// if GetClass ( unit ) <> class_sniper then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 257
14510: PUSH
14511: LD_INT 5
14513: NONEQUAL
14514: IFFALSE 14518
// exit ;
14516: GO 14988
// dist := 8 ;
14518: LD_ADDR_VAR 0 5
14522: PUSH
14523: LD_INT 8
14525: ST_TO_ADDR
// viewRange := 12 ;
14526: LD_ADDR_VAR 0 8
14530: PUSH
14531: LD_INT 12
14533: ST_TO_ADDR
// side := GetSide ( unit ) ;
14534: LD_ADDR_VAR 0 6
14538: PUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 255
14548: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14549: LD_INT 61
14551: PPUSH
14552: LD_VAR 0 6
14556: PPUSH
14557: CALL_OW 321
14561: PUSH
14562: LD_INT 2
14564: EQUAL
14565: IFFALSE 14575
// viewRange := 16 ;
14567: LD_ADDR_VAR 0 8
14571: PUSH
14572: LD_INT 16
14574: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14575: LD_VAR 0 1
14579: PPUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: CALL_OW 297
14594: PUSH
14595: LD_VAR 0 5
14599: GREATER
14600: IFFALSE 14679
// begin ComMoveXY ( unit , x , y ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14621: LD_INT 35
14623: PPUSH
14624: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14628: LD_VAR 0 1
14632: PPUSH
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 3
14642: PPUSH
14643: CALL 54340 0 3
14647: NOT
14648: IFFALSE 14652
// exit ;
14650: GO 14988
// until GetDistUnitXY ( unit , x , y ) < dist ;
14652: LD_VAR 0 1
14656: PPUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 297
14671: PUSH
14672: LD_VAR 0 5
14676: LESS
14677: IFFALSE 14621
// end ; ComTurnXY ( unit , x , y ) ;
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_VAR 0 2
14688: PPUSH
14689: LD_VAR 0 3
14693: PPUSH
14694: CALL_OW 118
// repeat if Multiplayer then
14698: LD_OWVAR 4
14702: IFFALSE 14713
// wait ( 35 ) else
14704: LD_INT 35
14706: PPUSH
14707: CALL_OW 67
14711: GO 14720
// wait ( 5 ) ;
14713: LD_INT 5
14715: PPUSH
14716: CALL_OW 67
// _d := GetDir ( unit ) ;
14720: LD_ADDR_VAR 0 11
14724: PUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 254
14734: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
14735: LD_ADDR_VAR 0 7
14739: PUSH
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 250
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 251
14759: PPUSH
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 3
14769: PPUSH
14770: CALL 56976 0 4
14774: ST_TO_ADDR
// until dir = _d ;
14775: LD_VAR 0 7
14779: PUSH
14780: LD_VAR 0 11
14784: EQUAL
14785: IFFALSE 14698
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
14787: LD_ADDR_VAR 0 9
14791: PUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 250
14801: PPUSH
14802: LD_VAR 0 7
14806: PPUSH
14807: LD_VAR 0 5
14811: PPUSH
14812: CALL_OW 272
14816: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
14817: LD_ADDR_VAR 0 10
14821: PUSH
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 251
14831: PPUSH
14832: LD_VAR 0 7
14836: PPUSH
14837: LD_VAR 0 5
14841: PPUSH
14842: CALL_OW 273
14846: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14847: LD_VAR 0 9
14851: PPUSH
14852: LD_VAR 0 10
14856: PPUSH
14857: CALL_OW 488
14861: NOT
14862: IFFALSE 14866
// exit ;
14864: GO 14988
// ComAnimCustom ( unit , 1 ) ;
14866: LD_VAR 0 1
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 592
// p := 0 ;
14878: LD_ADDR_VAR 0 12
14882: PUSH
14883: LD_INT 0
14885: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14886: LD_VAR 0 9
14890: PPUSH
14891: LD_VAR 0 10
14895: PPUSH
14896: LD_VAR 0 6
14900: PPUSH
14901: LD_VAR 0 8
14905: PPUSH
14906: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
14910: LD_INT 35
14912: PPUSH
14913: CALL_OW 67
// p := Inc ( p ) ;
14917: LD_ADDR_VAR 0 12
14921: PUSH
14922: LD_VAR 0 12
14926: PPUSH
14927: CALL 56932 0 1
14931: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
14932: LD_VAR 0 12
14936: PUSH
14937: LD_INT 3
14939: EQUAL
14940: IFTRUE 14954
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 302
14952: NOT
14953: OR
14954: IFTRUE 14967
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 301
14966: OR
14967: IFFALSE 14910
// RemoveSeeing ( _x , _y , side ) ;
14969: LD_VAR 0 9
14973: PPUSH
14974: LD_VAR 0 10
14978: PPUSH
14979: LD_VAR 0 6
14983: PPUSH
14984: CALL_OW 331
// end ;
14988: LD_VAR 0 4
14992: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
14993: LD_INT 0
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
// if not unit then
15006: LD_VAR 0 1
15010: NOT
15011: IFFALSE 15015
// exit ;
15013: GO 15286
// side := GetSide ( unit ) ;
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 255
15029: ST_TO_ADDR
// x := GetX ( unit ) ;
15030: LD_ADDR_VAR 0 5
15034: PUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 250
15044: ST_TO_ADDR
// y := GetY ( unit ) ;
15045: LD_ADDR_VAR 0 6
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 251
15059: ST_TO_ADDR
// r := 8 ;
15060: LD_ADDR_VAR 0 4
15064: PUSH
15065: LD_INT 8
15067: ST_TO_ADDR
// if x - r < 0 then
15068: LD_VAR 0 5
15072: PUSH
15073: LD_VAR 0 4
15077: MINUS
15078: PUSH
15079: LD_INT 0
15081: LESS
15082: IFFALSE 15094
// min_x := 0 else
15084: LD_ADDR_VAR 0 7
15088: PUSH
15089: LD_INT 0
15091: ST_TO_ADDR
15092: GO 15110
// min_x := x - r ;
15094: LD_ADDR_VAR 0 7
15098: PUSH
15099: LD_VAR 0 5
15103: PUSH
15104: LD_VAR 0 4
15108: MINUS
15109: ST_TO_ADDR
// if y - r < 0 then
15110: LD_VAR 0 6
15114: PUSH
15115: LD_VAR 0 4
15119: MINUS
15120: PUSH
15121: LD_INT 0
15123: LESS
15124: IFFALSE 15136
// min_y := 0 else
15126: LD_ADDR_VAR 0 8
15130: PUSH
15131: LD_INT 0
15133: ST_TO_ADDR
15134: GO 15152
// min_y := y - r ;
15136: LD_ADDR_VAR 0 8
15140: PUSH
15141: LD_VAR 0 6
15145: PUSH
15146: LD_VAR 0 4
15150: MINUS
15151: ST_TO_ADDR
// max_x := x + r ;
15152: LD_ADDR_VAR 0 9
15156: PUSH
15157: LD_VAR 0 5
15161: PUSH
15162: LD_VAR 0 4
15166: PLUS
15167: ST_TO_ADDR
// max_y := y + r ;
15168: LD_ADDR_VAR 0 10
15172: PUSH
15173: LD_VAR 0 6
15177: PUSH
15178: LD_VAR 0 4
15182: PLUS
15183: ST_TO_ADDR
// for _x = min_x to max_x do
15184: LD_ADDR_VAR 0 11
15188: PUSH
15189: DOUBLE
15190: LD_VAR 0 7
15194: DEC
15195: ST_TO_ADDR
15196: LD_VAR 0 9
15200: PUSH
15201: FOR_TO
15202: IFFALSE 15284
// for _y = min_y to max_y do
15204: LD_ADDR_VAR 0 12
15208: PUSH
15209: DOUBLE
15210: LD_VAR 0 8
15214: DEC
15215: ST_TO_ADDR
15216: LD_VAR 0 10
15220: PUSH
15221: FOR_TO
15222: IFFALSE 15280
// begin if not ValidHex ( _x , _y ) then
15224: LD_VAR 0 11
15228: PPUSH
15229: LD_VAR 0 12
15233: PPUSH
15234: CALL_OW 488
15238: NOT
15239: IFFALSE 15243
// continue ;
15241: GO 15221
// if MineAtPos ( _x , _y ) then
15243: LD_VAR 0 11
15247: PPUSH
15248: LD_VAR 0 12
15252: PPUSH
15253: CALL_OW 458
15257: IFFALSE 15278
// ViewMineAtPos ( _x , _y , side ) ;
15259: LD_VAR 0 11
15263: PPUSH
15264: LD_VAR 0 12
15268: PPUSH
15269: LD_VAR 0 3
15273: PPUSH
15274: CALL_OW 457
// end ;
15278: GO 15221
15280: POP
15281: POP
15282: GO 15201
15284: POP
15285: POP
// end ;
15286: LD_VAR 0 2
15290: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
15291: LD_INT 0
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
// if not units then
15300: LD_VAR 0 1
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 15773
// scaners := [ ] ;
15309: LD_ADDR_VAR 0 6
15313: PUSH
15314: EMPTY
15315: ST_TO_ADDR
// for i in units do
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_VAR 0 1
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15484
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
15329: LD_VAR 0 3
15333: PPUSH
15334: CALL_OW 264
15338: PUSH
15339: LD_INT 11
15341: NONEQUAL
15342: IFTRUE 15356
15344: PUSH
15345: LD_VAR 0 3
15349: PPUSH
15350: CALL_OW 302
15354: NOT
15355: OR
15356: IFTRUE 15373
15358: PUSH
15359: LD_VAR 0 3
15363: PPUSH
15364: CALL_OW 110
15368: PUSH
15369: LD_INT 502
15371: EQUAL
15372: OR
15373: IFFALSE 15377
// continue ;
15375: GO 15326
// ComStop ( i ) ;
15377: LD_VAR 0 3
15381: PPUSH
15382: CALL_OW 141
// x := GetX ( i ) ;
15386: LD_ADDR_VAR 0 4
15390: PUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: CALL_OW 250
15400: ST_TO_ADDR
// y := GetY ( i ) ;
15401: LD_ADDR_VAR 0 5
15405: PUSH
15406: LD_VAR 0 3
15410: PPUSH
15411: CALL_OW 251
15415: ST_TO_ADDR
// if GetSide ( i ) = your_side then
15416: LD_VAR 0 3
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_OWVAR 2
15430: EQUAL
15431: IFFALSE 15450
// PlaySoundXY ( x , y , mineDetector ) ;
15433: LD_VAR 0 4
15437: PPUSH
15438: LD_VAR 0 5
15442: PPUSH
15443: LD_STRING mineDetector
15445: PPUSH
15446: CALL_OW 366
// scaners := Join ( scaners , i ) ;
15450: LD_ADDR_VAR 0 6
15454: PUSH
15455: LD_VAR 0 6
15459: PPUSH
15460: LD_VAR 0 3
15464: PPUSH
15465: CALL 55559 0 2
15469: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
15470: LD_VAR 0 3
15474: PPUSH
15475: LD_INT 502
15477: PPUSH
15478: CALL_OW 109
// end ;
15482: GO 15326
15484: POP
15485: POP
// if not scaners then
15486: LD_VAR 0 6
15490: NOT
15491: IFFALSE 15495
// exit ;
15493: GO 15773
// wait ( 3 ) ;
15495: LD_INT 3
15497: PPUSH
15498: CALL_OW 67
// timer := 6 ;
15502: LD_ADDR_VAR 0 7
15506: PUSH
15507: LD_INT 6
15509: ST_TO_ADDR
// repeat for i in scaners do
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_VAR 0 6
15519: PUSH
15520: FOR_IN
15521: IFFALSE 15671
// begin side := GetSide ( i ) ;
15523: LD_ADDR_VAR 0 8
15527: PUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: CALL_OW 255
15537: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
15538: LD_VAR 0 3
15542: PPUSH
15543: CALL_OW 302
15547: NOT
15548: IFTRUE 15561
15550: PUSH
15551: LD_VAR 0 3
15555: PPUSH
15556: CALL_OW 314
15560: OR
15561: IFTRUE 15592
15563: PUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: CALL_OW 263
15573: PUSH
15574: LD_INT 1
15576: EQUAL
15577: IFFALSE 15591
15579: PUSH
15580: LD_VAR 0 3
15584: PPUSH
15585: CALL_OW 311
15589: NOT
15590: AND
15591: OR
15592: IFFALSE 15636
// begin SetUnitDisplayNumber ( i , 0 ) ;
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 505
// SetTag ( i , 0 ) ;
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_INT 0
15613: PPUSH
15614: CALL_OW 109
// scaners := scaners diff i ;
15618: LD_ADDR_VAR 0 6
15622: PUSH
15623: LD_VAR 0 6
15627: PUSH
15628: LD_VAR 0 3
15632: DIFF
15633: ST_TO_ADDR
// continue ;
15634: GO 15520
// end ; if side in [ your_side , 9 ] then
15636: LD_VAR 0 8
15640: PUSH
15641: LD_OWVAR 2
15645: PUSH
15646: LD_INT 9
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: IN
15653: IFFALSE 15669
// SetUnitDisplayNumber ( i , timer ) ;
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_VAR 0 7
15664: PPUSH
15665: CALL_OW 505
// end ;
15669: GO 15520
15671: POP
15672: POP
// if not scaners then
15673: LD_VAR 0 6
15677: NOT
15678: IFFALSE 15682
// exit ;
15680: GO 15773
// timer := Dec ( timer ) ;
15682: LD_ADDR_VAR 0 7
15686: PUSH
15687: LD_VAR 0 7
15691: PPUSH
15692: CALL 56954 0 1
15696: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15697: LD_INT 35
15699: PPUSH
15700: CALL_OW 67
// until timer = 0 ;
15704: LD_VAR 0 7
15708: PUSH
15709: LD_INT 0
15711: EQUAL
15712: IFFALSE 15510
// if not scaners then
15714: LD_VAR 0 6
15718: NOT
15719: IFFALSE 15723
// exit ;
15721: GO 15773
// for i in scaners do
15723: LD_ADDR_VAR 0 3
15727: PUSH
15728: LD_VAR 0 6
15732: PUSH
15733: FOR_IN
15734: IFFALSE 15771
// begin SetUnitDisplayNumber ( i , 0 ) ;
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL_OW 505
// SetTag ( i , 0 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 0
15755: PPUSH
15756: CALL_OW 109
// RevealDetectorMine ( i ) ;
15760: LD_VAR 0 3
15764: PPUSH
15765: CALL 14993 0 1
// end ;
15769: GO 15733
15771: POP
15772: POP
// end ;
15773: LD_VAR 0 2
15777: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
15778: LD_INT 0
15780: PPUSH
// if p1 = mine_detector_mode then
15781: LD_VAR 0 2
15785: PUSH
15786: LD_INT 103
15788: EQUAL
15789: IFFALSE 15800
// DetectMine ( units ) ;
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL 15291 0 1
// end ; end_of_file
15800: LD_VAR 0 7
15804: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
15805: PPOPN 6
15807: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
15808: LD_INT 0
15810: PPUSH
// begin if not units then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15854
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
15820: LD_VAR 0 1
15824: PPUSH
15825: LD_VAR 0 2
15829: PPUSH
15830: LD_VAR 0 3
15834: PPUSH
15835: LD_VAR 0 4
15839: PPUSH
15840: LD_VAR 0 5
15844: PPUSH
15845: LD_VAR 0 6
15849: PPUSH
15850: CALL 15778 0 6
// end ;
15854: PPOPN 7
15856: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
15857: LD_EXP 2
15861: PUSH
15862: LD_INT 4
15864: EQUAL
15865: IFFALSE 15901
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15867: LD_STRING setGameDifficulty(
15869: PUSH
15870: LD_OWVAR 67
15874: STR
15875: PUSH
15876: LD_STRING )
15878: STR
15879: PPUSH
15880: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15884: LD_STRING displayDifficulty(
15886: PUSH
15887: LD_OWVAR 67
15891: STR
15892: PUSH
15893: LD_STRING )
15895: STR
15896: PPUSH
15897: CALL_OW 559
// end ; SOS_MapStart ( ) ;
15901: CALL 15930 0 0
// end ; end_of_file
15905: PPOPN 1
15907: END
// every 0 0$1 do
15908: GO 15910
15910: DISABLE
// begin enable ;
15911: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15912: LD_STRING updateTimer(
15914: PUSH
15915: LD_OWVAR 1
15919: STR
15920: PUSH
15921: LD_STRING );
15923: STR
15924: PPUSH
15925: CALL_OW 559
// end ;
15929: END
// export function SOS_MapStart ( ) ; begin
15930: LD_INT 0
15932: PPUSH
// UpdateFactoryWaypoints ( ) ;
15933: CALL 16871 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15937: CALL 17123 0 0
// ParseMultiDataToLua ( ) ;
15941: CALL 17270 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
15945: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
15947: PPUSH
15948: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
15952: LD_STRING setSpecLogoNumber(
15954: PUSH
15955: LD_INT 2
15957: STR
15958: PUSH
15959: LD_STRING ,
15961: STR
15962: PUSH
15963: LD_INT 1
15965: STR
15966: PUSH
15967: LD_STRING )
15969: STR
15970: PPUSH
15971: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
15975: LD_STRING setSpecLogoNumber(
15977: PUSH
15978: LD_INT 3
15980: STR
15981: PUSH
15982: LD_STRING ,
15984: STR
15985: PUSH
15986: LD_INT 2
15988: STR
15989: PUSH
15990: LD_STRING )
15992: STR
15993: PPUSH
15994: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
15998: LD_STRING setSpecLogoNumber(
16000: PUSH
16001: LD_INT 4
16003: STR
16004: PUSH
16005: LD_STRING ,
16007: STR
16008: PUSH
16009: LD_INT 3
16011: STR
16012: PUSH
16013: LD_STRING )
16015: STR
16016: PPUSH
16017: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
16021: LD_STRING setSpecLogoNumber(
16023: PUSH
16024: LD_INT 5
16026: STR
16027: PUSH
16028: LD_STRING ,
16030: STR
16031: PUSH
16032: LD_INT 4
16034: STR
16035: PUSH
16036: LD_STRING )
16038: STR
16039: PPUSH
16040: CALL_OW 559
// end ;
16044: LD_VAR 0 1
16048: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16049: LD_INT 0
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
// for i := 1 to 8 do
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: DOUBLE
16066: LD_INT 1
16068: DEC
16069: ST_TO_ADDR
16070: LD_INT 8
16072: PUSH
16073: FOR_TO
16074: IFFALSE 16459
// begin if mpSidePositions [ i ] then
16076: LD_EXP 6
16080: PUSH
16081: LD_VAR 0 2
16085: ARRAY
16086: IFFALSE 16457
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
16088: LD_ADDR_VAR 0 7
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_VAR 0 2
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PPUSH
16119: CALL_OW 69
16123: PPUSH
16124: CALL 19583 0 1
16128: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16129: LD_ADDR_VAR 0 9
16133: PUSH
16134: LD_INT 22
16136: PUSH
16137: LD_VAR 0 2
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: LD_INT 30
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 30
16161: PUSH
16162: LD_INT 1
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 69
16182: ST_TO_ADDR
// crates := 0 ;
16183: LD_ADDR_VAR 0 4
16187: PUSH
16188: LD_INT 0
16190: ST_TO_ADDR
// oil := 0 ;
16191: LD_ADDR_VAR 0 5
16195: PUSH
16196: LD_INT 0
16198: ST_TO_ADDR
// sib := 0 ;
16199: LD_ADDR_VAR 0 6
16203: PUSH
16204: LD_INT 0
16206: ST_TO_ADDR
// if bases then
16207: LD_VAR 0 9
16211: IFFALSE 16317
// begin for j in bases do
16213: LD_ADDR_VAR 0 3
16217: PUSH
16218: LD_VAR 0 9
16222: PUSH
16223: FOR_IN
16224: IFFALSE 16315
// begin base := GetBase ( j ) ;
16226: LD_ADDR_VAR 0 8
16230: PUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: CALL_OW 274
16240: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16241: LD_ADDR_VAR 0 4
16245: PUSH
16246: LD_VAR 0 4
16250: PUSH
16251: LD_VAR 0 8
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 275
16263: PLUS
16264: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16265: LD_ADDR_VAR 0 5
16269: PUSH
16270: LD_VAR 0 5
16274: PUSH
16275: LD_VAR 0 8
16279: PPUSH
16280: LD_INT 2
16282: PPUSH
16283: CALL_OW 275
16287: PLUS
16288: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16289: LD_ADDR_VAR 0 6
16293: PUSH
16294: LD_VAR 0 6
16298: PUSH
16299: LD_VAR 0 8
16303: PPUSH
16304: LD_INT 3
16306: PPUSH
16307: CALL_OW 275
16311: PLUS
16312: ST_TO_ADDR
// end ;
16313: GO 16223
16315: POP
16316: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16317: LD_STRING setSpecText(
16319: PUSH
16320: LD_VAR 0 2
16324: STR
16325: PUSH
16326: LD_STRING ,
16328: STR
16329: PUSH
16330: LD_INT 2
16332: STR
16333: PUSH
16334: LD_STRING ,
16336: STR
16337: PUSH
16338: LD_VAR 0 4
16342: STR
16343: PUSH
16344: LD_STRING )
16346: STR
16347: PPUSH
16348: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16352: LD_STRING setSpecText(
16354: PUSH
16355: LD_VAR 0 2
16359: STR
16360: PUSH
16361: LD_STRING ,
16363: STR
16364: PUSH
16365: LD_INT 3
16367: STR
16368: PUSH
16369: LD_STRING ,
16371: STR
16372: PUSH
16373: LD_VAR 0 5
16377: STR
16378: PUSH
16379: LD_STRING )
16381: STR
16382: PPUSH
16383: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16387: LD_STRING setSpecText(
16389: PUSH
16390: LD_VAR 0 2
16394: STR
16395: PUSH
16396: LD_STRING ,
16398: STR
16399: PUSH
16400: LD_INT 4
16402: STR
16403: PUSH
16404: LD_STRING ,
16406: STR
16407: PUSH
16408: LD_VAR 0 6
16412: STR
16413: PUSH
16414: LD_STRING )
16416: STR
16417: PPUSH
16418: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16422: LD_STRING setSpecText(
16424: PUSH
16425: LD_VAR 0 2
16429: STR
16430: PUSH
16431: LD_STRING ,
16433: STR
16434: PUSH
16435: LD_INT 5
16437: STR
16438: PUSH
16439: LD_STRING ,
16441: STR
16442: PUSH
16443: LD_VAR 0 7
16447: STR
16448: PUSH
16449: LD_STRING )
16451: STR
16452: PPUSH
16453: CALL_OW 559
// end ; end ;
16457: GO 16073
16459: POP
16460: POP
// end ;
16461: LD_VAR 0 1
16465: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16466: LD_INT 2
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 30
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: IFFALSE 16508
16500: GO 16502
16502: DISABLE
// begin enable ;
16503: ENABLE
// UpdateSpectatorBar ;
16504: CALL 16049 0 0
// end ;
16508: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16509: LD_INT 0
16511: PPUSH
// end ;
16512: LD_VAR 0 12
16516: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16521: LD_VAR 0 1
16525: NOT
16526: IFTRUE 16545
16528: PUSH
16529: LD_VAR 0 2
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: CALL_OW 488
16543: NOT
16544: OR
16545: IFTRUE 16580
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 266
16557: PUSH
16558: LD_INT 3
16560: NONEQUAL
16561: IFFALSE 16579
16563: PUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 247
16573: PUSH
16574: LD_INT 1
16576: EQUAL
16577: NOT
16578: AND
16579: OR
16580: IFFALSE 16584
// exit ;
16582: GO 16866
// if GetType ( factory ) = unit_human then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 247
16593: PUSH
16594: LD_INT 1
16596: EQUAL
16597: IFFALSE 16614
// factory := IsInUnit ( factory ) ;
16599: LD_ADDR_VAR 0 1
16603: PUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 310
16613: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: PUSH
16624: LD_INT 3
16626: NONEQUAL
16627: IFFALSE 16631
// exit ;
16629: GO 16866
// for i := 1 to Count ( factoryWaypoints ) do
16631: LD_ADDR_VAR 0 5
16635: PUSH
16636: DOUBLE
16637: LD_INT 1
16639: DEC
16640: ST_TO_ADDR
16641: LD_EXP 59
16645: PPUSH
16646: CALL 19583 0 1
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16814
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16654: LD_VAR 0 2
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: CALL_OW 428
16668: PUSH
16669: LD_EXP 59
16673: PUSH
16674: LD_VAR 0 5
16678: ARRAY
16679: PUSH
16680: LD_INT 2
16682: ARRAY
16683: EQUAL
16684: IFFALSE 16716
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16686: LD_ADDR_EXP 59
16690: PUSH
16691: LD_EXP 59
16695: PPUSH
16696: LD_VAR 0 5
16700: PPUSH
16701: CALL_OW 3
16705: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16706: CALL 16871 0 0
// exit ;
16710: POP
16711: POP
16712: GO 16866
// end else
16714: GO 16812
// if factory = factoryWaypoints [ i ] [ 2 ] then
16716: LD_VAR 0 1
16720: PUSH
16721: LD_EXP 59
16725: PUSH
16726: LD_VAR 0 5
16730: ARRAY
16731: PUSH
16732: LD_INT 2
16734: ARRAY
16735: EQUAL
16736: IFFALSE 16812
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16738: LD_ADDR_EXP 59
16742: PUSH
16743: LD_EXP 59
16747: PPUSH
16748: LD_VAR 0 5
16752: PPUSH
16753: CALL_OW 3
16757: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16758: LD_ADDR_EXP 59
16762: PUSH
16763: LD_EXP 59
16767: PPUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 255
16777: PUSH
16778: LD_VAR 0 1
16782: PUSH
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 3
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL 55559 0 2
16803: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16804: CALL 16871 0 0
// exit ;
16808: POP
16809: POP
16810: GO 16866
// end ; end ;
16812: GO 16651
16814: POP
16815: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16816: LD_ADDR_EXP 59
16820: PUSH
16821: LD_EXP 59
16825: PPUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 255
16835: PUSH
16836: LD_VAR 0 1
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: LD_VAR 0 3
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PPUSH
16857: CALL 55559 0 2
16861: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16862: CALL 16871 0 0
// end ;
16866: LD_VAR 0 4
16870: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16871: LD_INT 0
16873: PPUSH
16874: PPUSH
16875: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16876: LD_STRING resetFactoryWaypoint();
16878: PPUSH
16879: CALL_OW 559
// if factoryWaypoints then
16883: LD_EXP 59
16887: IFFALSE 17008
// begin list := factoryWaypoints ;
16889: LD_ADDR_VAR 0 3
16893: PUSH
16894: LD_EXP 59
16898: ST_TO_ADDR
// for i := 1 to list do
16899: LD_ADDR_VAR 0 2
16903: PUSH
16904: DOUBLE
16905: LD_INT 1
16907: DEC
16908: ST_TO_ADDR
16909: LD_VAR 0 3
16913: PUSH
16914: FOR_TO
16915: IFFALSE 17006
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16917: LD_STRING setFactoryWaypointXY(
16919: PUSH
16920: LD_VAR 0 3
16924: PUSH
16925: LD_VAR 0 2
16929: ARRAY
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: STR
16935: PUSH
16936: LD_STRING ,
16938: STR
16939: PUSH
16940: LD_VAR 0 3
16944: PUSH
16945: LD_VAR 0 2
16949: ARRAY
16950: PUSH
16951: LD_INT 2
16953: ARRAY
16954: STR
16955: PUSH
16956: LD_STRING ,
16958: STR
16959: PUSH
16960: LD_VAR 0 3
16964: PUSH
16965: LD_VAR 0 2
16969: ARRAY
16970: PUSH
16971: LD_INT 3
16973: ARRAY
16974: STR
16975: PUSH
16976: LD_STRING ,
16978: STR
16979: PUSH
16980: LD_VAR 0 3
16984: PUSH
16985: LD_VAR 0 2
16989: ARRAY
16990: PUSH
16991: LD_INT 4
16993: ARRAY
16994: STR
16995: PUSH
16996: LD_STRING )
16998: STR
16999: PPUSH
17000: CALL_OW 559
17004: GO 16914
17006: POP
17007: POP
// end ; end ;
17008: LD_VAR 0 1
17012: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
17013: LD_INT 0
17015: PPUSH
// if HexInfo ( x , y ) = warehouse then
17016: LD_VAR 0 2
17020: PPUSH
17021: LD_VAR 0 3
17025: PPUSH
17026: CALL_OW 428
17030: PUSH
17031: LD_VAR 0 1
17035: EQUAL
17036: IFFALSE 17063
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17038: LD_ADDR_EXP 61
17042: PUSH
17043: LD_EXP 61
17047: PPUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: LD_INT 0
17055: PPUSH
17056: CALL_OW 1
17060: ST_TO_ADDR
17061: GO 17114
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17063: LD_ADDR_EXP 61
17067: PUSH
17068: LD_EXP 61
17072: PPUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 255
17087: PUSH
17088: LD_VAR 0 1
17092: PUSH
17093: LD_VAR 0 2
17097: PUSH
17098: LD_VAR 0 3
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: PPUSH
17109: CALL_OW 1
17113: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17114: CALL 17123 0 0
// end ;
17118: LD_VAR 0 4
17122: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17123: LD_INT 0
17125: PPUSH
17126: PPUSH
17127: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17128: LD_STRING resetWarehouseGatheringPoints();
17130: PPUSH
17131: CALL_OW 559
// if warehouseGatheringPoints then
17135: LD_EXP 61
17139: IFFALSE 17265
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_EXP 61
17150: PPUSH
17151: CALL 59493 0 1
17155: ST_TO_ADDR
// for i := 1 to list do
17156: LD_ADDR_VAR 0 2
17160: PUSH
17161: DOUBLE
17162: LD_INT 1
17164: DEC
17165: ST_TO_ADDR
17166: LD_VAR 0 3
17170: PUSH
17171: FOR_TO
17172: IFFALSE 17263
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17174: LD_STRING setWarehouseGatheringPointXY(
17176: PUSH
17177: LD_VAR 0 3
17181: PUSH
17182: LD_VAR 0 2
17186: ARRAY
17187: PUSH
17188: LD_INT 1
17190: ARRAY
17191: STR
17192: PUSH
17193: LD_STRING ,
17195: STR
17196: PUSH
17197: LD_VAR 0 3
17201: PUSH
17202: LD_VAR 0 2
17206: ARRAY
17207: PUSH
17208: LD_INT 2
17210: ARRAY
17211: STR
17212: PUSH
17213: LD_STRING ,
17215: STR
17216: PUSH
17217: LD_VAR 0 3
17221: PUSH
17222: LD_VAR 0 2
17226: ARRAY
17227: PUSH
17228: LD_INT 3
17230: ARRAY
17231: STR
17232: PUSH
17233: LD_STRING ,
17235: STR
17236: PUSH
17237: LD_VAR 0 3
17241: PUSH
17242: LD_VAR 0 2
17246: ARRAY
17247: PUSH
17248: LD_INT 4
17250: ARRAY
17251: STR
17252: PUSH
17253: LD_STRING )
17255: STR
17256: PPUSH
17257: CALL_OW 559
17261: GO 17171
17263: POP
17264: POP
// end ; end ;
17265: LD_VAR 0 1
17269: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
17270: LD_INT 0
17272: PPUSH
17273: PPUSH
// if not mpSidePositions then
17274: LD_EXP 6
17278: NOT
17279: IFFALSE 17283
// exit ;
17281: GO 17354
// result :=  ;
17283: LD_ADDR_VAR 0 1
17287: PUSH
17288: LD_STRING 
17290: ST_TO_ADDR
// for i := 1 to 8 do
17291: LD_ADDR_VAR 0 2
17295: PUSH
17296: DOUBLE
17297: LD_INT 1
17299: DEC
17300: ST_TO_ADDR
17301: LD_INT 8
17303: PUSH
17304: FOR_TO
17305: IFFALSE 17335
// begin result := result & mpSidePositions [ i ] & ; ;
17307: LD_ADDR_VAR 0 1
17311: PUSH
17312: LD_VAR 0 1
17316: PUSH
17317: LD_EXP 6
17321: PUSH
17322: LD_VAR 0 2
17326: ARRAY
17327: STR
17328: PUSH
17329: LD_STRING ;
17331: STR
17332: ST_TO_ADDR
// end ;
17333: GO 17304
17335: POP
17336: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
17337: LD_STRING setMultiplayerRealPosition("
17339: PUSH
17340: LD_VAR 0 1
17344: STR
17345: PUSH
17346: LD_STRING ");
17348: STR
17349: PPUSH
17350: CALL_OW 559
// end ; end_of_file end_of_file
17354: LD_VAR 0 1
17358: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17359: LD_INT 0
17361: PPUSH
17362: PPUSH
// if exist_mode then
17363: LD_VAR 0 2
17367: IFFALSE 17413
// begin unit := CreateCharacter ( prefix & ident ) ;
17369: LD_ADDR_VAR 0 5
17373: PUSH
17374: LD_VAR 0 3
17378: PUSH
17379: LD_VAR 0 1
17383: STR
17384: PPUSH
17385: CALL_OW 34
17389: ST_TO_ADDR
// if unit then
17390: LD_VAR 0 5
17394: IFFALSE 17411
// DeleteCharacters ( prefix & ident ) ;
17396: LD_VAR 0 3
17400: PUSH
17401: LD_VAR 0 1
17405: STR
17406: PPUSH
17407: CALL_OW 40
// end else
17411: GO 17428
// unit := NewCharacter ( ident ) ;
17413: LD_ADDR_VAR 0 5
17417: PUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 25
17427: ST_TO_ADDR
// result := unit ;
17428: LD_ADDR_VAR 0 4
17432: PUSH
17433: LD_VAR 0 5
17437: ST_TO_ADDR
// end ;
17438: LD_VAR 0 4
17442: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17443: LD_INT 0
17445: PPUSH
17446: PPUSH
// if exist_mode then
17447: LD_VAR 0 2
17451: IFFALSE 17476
// unit := CreateCharacter ( prefix & ident ) else
17453: LD_ADDR_VAR 0 5
17457: PUSH
17458: LD_VAR 0 3
17462: PUSH
17463: LD_VAR 0 1
17467: STR
17468: PPUSH
17469: CALL_OW 34
17473: ST_TO_ADDR
17474: GO 17491
// unit := NewCharacter ( ident ) ;
17476: LD_ADDR_VAR 0 5
17480: PUSH
17481: LD_VAR 0 1
17485: PPUSH
17486: CALL_OW 25
17490: ST_TO_ADDR
// result := unit ;
17491: LD_ADDR_VAR 0 4
17495: PUSH
17496: LD_VAR 0 5
17500: ST_TO_ADDR
// end ;
17501: LD_VAR 0 4
17505: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// if not side or not nation then
17510: LD_VAR 0 1
17514: NOT
17515: IFTRUE 17524
17517: PUSH
17518: LD_VAR 0 2
17522: NOT
17523: OR
17524: IFFALSE 17528
// exit ;
17526: GO 18322
// case nation of nation_american :
17528: LD_VAR 0 2
17532: PUSH
17533: LD_INT 1
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17763
17541: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17542: LD_ADDR_VAR 0 4
17546: PUSH
17547: LD_INT 35
17549: PUSH
17550: LD_INT 45
17552: PUSH
17553: LD_INT 46
17555: PUSH
17556: LD_INT 47
17558: PUSH
17559: LD_INT 82
17561: PUSH
17562: LD_INT 83
17564: PUSH
17565: LD_INT 84
17567: PUSH
17568: LD_INT 85
17570: PUSH
17571: LD_INT 86
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 6
17582: PUSH
17583: LD_INT 15
17585: PUSH
17586: LD_INT 16
17588: PUSH
17589: LD_INT 7
17591: PUSH
17592: LD_INT 12
17594: PUSH
17595: LD_INT 13
17597: PUSH
17598: LD_INT 10
17600: PUSH
17601: LD_INT 14
17603: PUSH
17604: LD_INT 20
17606: PUSH
17607: LD_INT 21
17609: PUSH
17610: LD_INT 22
17612: PUSH
17613: LD_INT 25
17615: PUSH
17616: LD_INT 32
17618: PUSH
17619: LD_INT 27
17621: PUSH
17622: LD_INT 36
17624: PUSH
17625: LD_INT 69
17627: PUSH
17628: LD_INT 39
17630: PUSH
17631: LD_INT 34
17633: PUSH
17634: LD_INT 40
17636: PUSH
17637: LD_INT 48
17639: PUSH
17640: LD_INT 49
17642: PUSH
17643: LD_INT 50
17645: PUSH
17646: LD_INT 51
17648: PUSH
17649: LD_INT 52
17651: PUSH
17652: LD_INT 53
17654: PUSH
17655: LD_INT 54
17657: PUSH
17658: LD_INT 55
17660: PUSH
17661: LD_INT 56
17663: PUSH
17664: LD_INT 57
17666: PUSH
17667: LD_INT 58
17669: PUSH
17670: LD_INT 59
17672: PUSH
17673: LD_INT 60
17675: PUSH
17676: LD_INT 61
17678: PUSH
17679: LD_INT 62
17681: PUSH
17682: LD_INT 80
17684: PUSH
17685: LD_INT 82
17687: PUSH
17688: LD_INT 83
17690: PUSH
17691: LD_INT 84
17693: PUSH
17694: LD_INT 85
17696: PUSH
17697: LD_INT 86
17699: PUSH
17700: LD_INT 90
17702: PUSH
17703: LD_INT 93
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: ST_TO_ADDR
17761: GO 18244
17763: LD_INT 2
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 18005
17771: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
17772: LD_ADDR_VAR 0 4
17776: PUSH
17777: LD_INT 35
17779: PUSH
17780: LD_INT 45
17782: PUSH
17783: LD_INT 46
17785: PUSH
17786: LD_INT 47
17788: PUSH
17789: LD_INT 82
17791: PUSH
17792: LD_INT 83
17794: PUSH
17795: LD_INT 84
17797: PUSH
17798: LD_INT 85
17800: PUSH
17801: LD_INT 87
17803: PUSH
17804: LD_INT 70
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 11
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: LD_INT 4
17818: PUSH
17819: LD_INT 5
17821: PUSH
17822: LD_INT 6
17824: PUSH
17825: LD_INT 15
17827: PUSH
17828: LD_INT 18
17830: PUSH
17831: LD_INT 7
17833: PUSH
17834: LD_INT 17
17836: PUSH
17837: LD_INT 8
17839: PUSH
17840: LD_INT 20
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 22
17848: PUSH
17849: LD_INT 72
17851: PUSH
17852: LD_INT 26
17854: PUSH
17855: LD_INT 69
17857: PUSH
17858: LD_INT 39
17860: PUSH
17861: LD_INT 40
17863: PUSH
17864: LD_INT 41
17866: PUSH
17867: LD_INT 42
17869: PUSH
17870: LD_INT 43
17872: PUSH
17873: LD_INT 48
17875: PUSH
17876: LD_INT 49
17878: PUSH
17879: LD_INT 50
17881: PUSH
17882: LD_INT 51
17884: PUSH
17885: LD_INT 52
17887: PUSH
17888: LD_INT 53
17890: PUSH
17891: LD_INT 54
17893: PUSH
17894: LD_INT 55
17896: PUSH
17897: LD_INT 56
17899: PUSH
17900: LD_INT 60
17902: PUSH
17903: LD_INT 61
17905: PUSH
17906: LD_INT 62
17908: PUSH
17909: LD_INT 66
17911: PUSH
17912: LD_INT 67
17914: PUSH
17915: LD_INT 68
17917: PUSH
17918: LD_INT 81
17920: PUSH
17921: LD_INT 82
17923: PUSH
17924: LD_INT 83
17926: PUSH
17927: LD_INT 84
17929: PUSH
17930: LD_INT 85
17932: PUSH
17933: LD_INT 87
17935: PUSH
17936: LD_INT 88
17938: PUSH
17939: LD_INT 92
17941: PUSH
17942: LD_INT 94
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: ST_TO_ADDR
18003: GO 18244
18005: LD_INT 3
18007: DOUBLE
18008: EQUAL
18009: IFTRUE 18013
18011: GO 18243
18013: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
18014: LD_ADDR_VAR 0 4
18018: PUSH
18019: LD_INT 46
18021: PUSH
18022: LD_INT 47
18024: PUSH
18025: LD_INT 1
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 82
18033: PUSH
18034: LD_INT 83
18036: PUSH
18037: LD_INT 84
18039: PUSH
18040: LD_INT 85
18042: PUSH
18043: LD_INT 86
18045: PUSH
18046: LD_INT 11
18048: PUSH
18049: LD_INT 9
18051: PUSH
18052: LD_INT 20
18054: PUSH
18055: LD_INT 19
18057: PUSH
18058: LD_INT 21
18060: PUSH
18061: LD_INT 24
18063: PUSH
18064: LD_INT 22
18066: PUSH
18067: LD_INT 25
18069: PUSH
18070: LD_INT 28
18072: PUSH
18073: LD_INT 29
18075: PUSH
18076: LD_INT 30
18078: PUSH
18079: LD_INT 31
18081: PUSH
18082: LD_INT 37
18084: PUSH
18085: LD_INT 38
18087: PUSH
18088: LD_INT 32
18090: PUSH
18091: LD_INT 27
18093: PUSH
18094: LD_INT 33
18096: PUSH
18097: LD_INT 69
18099: PUSH
18100: LD_INT 39
18102: PUSH
18103: LD_INT 34
18105: PUSH
18106: LD_INT 40
18108: PUSH
18109: LD_INT 71
18111: PUSH
18112: LD_INT 23
18114: PUSH
18115: LD_INT 44
18117: PUSH
18118: LD_INT 48
18120: PUSH
18121: LD_INT 49
18123: PUSH
18124: LD_INT 50
18126: PUSH
18127: LD_INT 51
18129: PUSH
18130: LD_INT 52
18132: PUSH
18133: LD_INT 53
18135: PUSH
18136: LD_INT 54
18138: PUSH
18139: LD_INT 55
18141: PUSH
18142: LD_INT 56
18144: PUSH
18145: LD_INT 57
18147: PUSH
18148: LD_INT 58
18150: PUSH
18151: LD_INT 59
18153: PUSH
18154: LD_INT 63
18156: PUSH
18157: LD_INT 64
18159: PUSH
18160: LD_INT 65
18162: PUSH
18163: LD_INT 82
18165: PUSH
18166: LD_INT 83
18168: PUSH
18169: LD_INT 84
18171: PUSH
18172: LD_INT 85
18174: PUSH
18175: LD_INT 86
18177: PUSH
18178: LD_INT 89
18180: PUSH
18181: LD_INT 91
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: ST_TO_ADDR
18241: GO 18244
18243: POP
// if state > - 1 and state < 3 then
18244: LD_VAR 0 3
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: GREATER
18253: IFFALSE 18265
18255: PUSH
18256: LD_VAR 0 3
18260: PUSH
18261: LD_INT 3
18263: LESS
18264: AND
18265: IFFALSE 18322
// for i in result do
18267: LD_ADDR_VAR 0 5
18271: PUSH
18272: LD_VAR 0 4
18276: PUSH
18277: FOR_IN
18278: IFFALSE 18320
// if GetTech ( i , side ) <> state then
18280: LD_VAR 0 5
18284: PPUSH
18285: LD_VAR 0 1
18289: PPUSH
18290: CALL_OW 321
18294: PUSH
18295: LD_VAR 0 3
18299: NONEQUAL
18300: IFFALSE 18318
// result := result diff i ;
18302: LD_ADDR_VAR 0 4
18306: PUSH
18307: LD_VAR 0 4
18311: PUSH
18312: LD_VAR 0 5
18316: DIFF
18317: ST_TO_ADDR
18318: GO 18277
18320: POP
18321: POP
// end ;
18322: LD_VAR 0 4
18326: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18327: LD_INT 0
18329: PPUSH
18330: PPUSH
18331: PPUSH
// result := true ;
18332: LD_ADDR_VAR 0 3
18336: PUSH
18337: LD_INT 1
18339: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18340: LD_ADDR_VAR 0 5
18344: PUSH
18345: LD_VAR 0 2
18349: PPUSH
18350: CALL_OW 480
18354: ST_TO_ADDR
// if not tmp then
18355: LD_VAR 0 5
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18413
// for i in tmp do
18364: LD_ADDR_VAR 0 4
18368: PUSH
18369: LD_VAR 0 5
18373: PUSH
18374: FOR_IN
18375: IFFALSE 18411
// if GetTech ( i , side ) <> state_researched then
18377: LD_VAR 0 4
18381: PPUSH
18382: LD_VAR 0 1
18386: PPUSH
18387: CALL_OW 321
18391: PUSH
18392: LD_INT 2
18394: NONEQUAL
18395: IFFALSE 18409
// begin result := false ;
18397: LD_ADDR_VAR 0 3
18401: PUSH
18402: LD_INT 0
18404: ST_TO_ADDR
// exit ;
18405: POP
18406: POP
18407: GO 18413
// end ;
18409: GO 18374
18411: POP
18412: POP
// end ;
18413: LD_VAR 0 3
18417: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18418: LD_INT 0
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
18426: PPUSH
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18433: LD_VAR 0 1
18437: NOT
18438: IFTRUE 18455
18440: PUSH
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 257
18450: PUSH
18451: LD_INT 9
18453: NONEQUAL
18454: OR
18455: IFFALSE 18459
// exit ;
18457: GO 19038
// side := GetSide ( unit ) ;
18459: LD_ADDR_VAR 0 9
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 255
18473: ST_TO_ADDR
// tech_space := tech_spacanom ;
18474: LD_ADDR_VAR 0 12
18478: PUSH
18479: LD_INT 29
18481: ST_TO_ADDR
// tech_time := tech_taurad ;
18482: LD_ADDR_VAR 0 13
18486: PUSH
18487: LD_INT 28
18489: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18490: LD_ADDR_VAR 0 11
18494: PUSH
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 310
18504: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18505: LD_VAR 0 11
18509: PPUSH
18510: CALL_OW 247
18514: PUSH
18515: LD_INT 2
18517: EQUAL
18518: IFFALSE 18522
// exit ;
18520: GO 19038
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18522: LD_ADDR_VAR 0 8
18526: PUSH
18527: LD_INT 81
18529: PUSH
18530: LD_VAR 0 9
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: LD_INT 21
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: ST_TO_ADDR
// if not tmp then
18565: LD_VAR 0 8
18569: NOT
18570: IFFALSE 18574
// exit ;
18572: GO 19038
// if in_unit then
18574: LD_VAR 0 11
18578: IFFALSE 18602
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18580: LD_ADDR_VAR 0 10
18584: PUSH
18585: LD_VAR 0 8
18589: PPUSH
18590: LD_VAR 0 11
18594: PPUSH
18595: CALL_OW 74
18599: ST_TO_ADDR
18600: GO 18622
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18602: LD_ADDR_VAR 0 10
18606: PUSH
18607: LD_VAR 0 8
18611: PPUSH
18612: LD_VAR 0 1
18616: PPUSH
18617: CALL_OW 74
18621: ST_TO_ADDR
// if not enemy then
18622: LD_VAR 0 10
18626: NOT
18627: IFFALSE 18631
// exit ;
18629: GO 19038
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18631: LD_VAR 0 11
18635: IFFALSE 18657
18637: PUSH
18638: LD_VAR 0 11
18642: PPUSH
18643: LD_VAR 0 10
18647: PPUSH
18648: CALL_OW 296
18652: PUSH
18653: LD_INT 13
18655: GREATER
18656: AND
18657: IFTRUE 18679
18659: PUSH
18660: LD_VAR 0 1
18664: PPUSH
18665: LD_VAR 0 10
18669: PPUSH
18670: CALL_OW 296
18674: PUSH
18675: LD_INT 12
18677: GREATER
18678: OR
18679: IFFALSE 18683
// exit ;
18681: GO 19038
// missile := [ 1 ] ;
18683: LD_ADDR_VAR 0 14
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18694: LD_VAR 0 9
18698: PPUSH
18699: LD_VAR 0 12
18703: PPUSH
18704: CALL_OW 325
18708: IFFALSE 18737
// missile := Replace ( missile , missile + 1 , 2 ) ;
18710: LD_ADDR_VAR 0 14
18714: PUSH
18715: LD_VAR 0 14
18719: PPUSH
18720: LD_VAR 0 14
18724: PUSH
18725: LD_INT 1
18727: PLUS
18728: PPUSH
18729: LD_INT 2
18731: PPUSH
18732: CALL_OW 1
18736: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18737: LD_VAR 0 9
18741: PPUSH
18742: LD_VAR 0 13
18746: PPUSH
18747: CALL_OW 325
18751: IFFALSE 18775
18753: PUSH
18754: LD_VAR 0 10
18758: PPUSH
18759: CALL_OW 255
18763: PPUSH
18764: LD_VAR 0 13
18768: PPUSH
18769: CALL_OW 325
18773: NOT
18774: AND
18775: IFFALSE 18804
// missile := Replace ( missile , missile + 1 , 3 ) ;
18777: LD_ADDR_VAR 0 14
18781: PUSH
18782: LD_VAR 0 14
18786: PPUSH
18787: LD_VAR 0 14
18791: PUSH
18792: LD_INT 1
18794: PLUS
18795: PPUSH
18796: LD_INT 3
18798: PPUSH
18799: CALL_OW 1
18803: ST_TO_ADDR
// if missile < 2 then
18804: LD_VAR 0 14
18808: PUSH
18809: LD_INT 2
18811: LESS
18812: IFFALSE 18816
// exit ;
18814: GO 19038
// x := GetX ( enemy ) ;
18816: LD_ADDR_VAR 0 4
18820: PUSH
18821: LD_VAR 0 10
18825: PPUSH
18826: CALL_OW 250
18830: ST_TO_ADDR
// y := GetY ( enemy ) ;
18831: LD_ADDR_VAR 0 5
18835: PUSH
18836: LD_VAR 0 10
18840: PPUSH
18841: CALL_OW 251
18845: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18846: LD_ADDR_VAR 0 6
18850: PUSH
18851: LD_VAR 0 4
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PPUSH
18860: LD_INT 1
18862: PPUSH
18863: CALL_OW 12
18867: PLUS
18868: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18869: LD_ADDR_VAR 0 7
18873: PUSH
18874: LD_VAR 0 5
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 12
18890: PLUS
18891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18892: LD_VAR 0 6
18896: PPUSH
18897: LD_VAR 0 7
18901: PPUSH
18902: CALL_OW 488
18906: NOT
18907: IFFALSE 18929
// begin _x := x ;
18909: LD_ADDR_VAR 0 6
18913: PUSH
18914: LD_VAR 0 4
18918: ST_TO_ADDR
// _y := y ;
18919: LD_ADDR_VAR 0 7
18923: PUSH
18924: LD_VAR 0 5
18928: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18929: LD_ADDR_VAR 0 3
18933: PUSH
18934: LD_INT 1
18936: PPUSH
18937: LD_VAR 0 14
18941: PPUSH
18942: CALL_OW 12
18946: ST_TO_ADDR
// case i of 1 :
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 1
18954: DOUBLE
18955: EQUAL
18956: IFTRUE 18960
18958: GO 18977
18960: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18961: LD_VAR 0 1
18965: PPUSH
18966: LD_VAR 0 10
18970: PPUSH
18971: CALL_OW 115
18975: GO 19038
18977: LD_INT 2
18979: DOUBLE
18980: EQUAL
18981: IFTRUE 18985
18983: GO 19007
18985: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18986: LD_VAR 0 1
18990: PPUSH
18991: LD_VAR 0 6
18995: PPUSH
18996: LD_VAR 0 7
19000: PPUSH
19001: CALL_OW 153
19005: GO 19038
19007: LD_INT 3
19009: DOUBLE
19010: EQUAL
19011: IFTRUE 19015
19013: GO 19037
19015: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19016: LD_VAR 0 1
19020: PPUSH
19021: LD_VAR 0 6
19025: PPUSH
19026: LD_VAR 0 7
19030: PPUSH
19031: CALL_OW 154
19035: GO 19038
19037: POP
// end ;
19038: LD_VAR 0 2
19042: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19043: LD_INT 0
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
// if not unit or not building then
19051: LD_VAR 0 1
19055: NOT
19056: IFTRUE 19065
19058: PUSH
19059: LD_VAR 0 2
19063: NOT
19064: OR
19065: IFFALSE 19069
// exit ;
19067: GO 19227
// x := GetX ( building ) ;
19069: LD_ADDR_VAR 0 5
19073: PUSH
19074: LD_VAR 0 2
19078: PPUSH
19079: CALL_OW 250
19083: ST_TO_ADDR
// y := GetY ( building ) ;
19084: LD_ADDR_VAR 0 6
19088: PUSH
19089: LD_VAR 0 2
19093: PPUSH
19094: CALL_OW 251
19098: ST_TO_ADDR
// for i := 0 to 5 do
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: DOUBLE
19105: LD_INT 0
19107: DEC
19108: ST_TO_ADDR
19109: LD_INT 5
19111: PUSH
19112: FOR_TO
19113: IFFALSE 19225
// begin _x := ShiftX ( x , i , 3 ) ;
19115: LD_ADDR_VAR 0 7
19119: PUSH
19120: LD_VAR 0 5
19124: PPUSH
19125: LD_VAR 0 4
19129: PPUSH
19130: LD_INT 3
19132: PPUSH
19133: CALL_OW 272
19137: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19138: LD_ADDR_VAR 0 8
19142: PUSH
19143: LD_VAR 0 6
19147: PPUSH
19148: LD_VAR 0 4
19152: PPUSH
19153: LD_INT 3
19155: PPUSH
19156: CALL_OW 273
19160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19161: LD_VAR 0 7
19165: PPUSH
19166: LD_VAR 0 8
19170: PPUSH
19171: CALL_OW 488
19175: NOT
19176: IFFALSE 19180
// continue ;
19178: GO 19112
// if HexInfo ( _x , _y ) = 0 then
19180: LD_VAR 0 7
19184: PPUSH
19185: LD_VAR 0 8
19189: PPUSH
19190: CALL_OW 428
19194: PUSH
19195: LD_INT 0
19197: EQUAL
19198: IFFALSE 19223
// begin ComMoveXY ( unit , _x , _y ) ;
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_VAR 0 7
19209: PPUSH
19210: LD_VAR 0 8
19214: PPUSH
19215: CALL_OW 111
// exit ;
19219: POP
19220: POP
19221: GO 19227
// end ; end ;
19223: GO 19112
19225: POP
19226: POP
// end ;
19227: LD_VAR 0 3
19231: RET
// export function ScanBase ( side , base_area ) ; begin
19232: LD_INT 0
19234: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19235: LD_ADDR_VAR 0 3
19239: PUSH
19240: LD_VAR 0 2
19244: PPUSH
19245: LD_INT 81
19247: PUSH
19248: LD_VAR 0 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 70
19261: ST_TO_ADDR
// end ;
19262: LD_VAR 0 3
19266: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
19272: PPUSH
// result := false ;
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: LD_INT 0
19280: ST_TO_ADDR
// side := GetSide ( unit ) ;
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL_OW 255
19295: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 248
19310: ST_TO_ADDR
// case nat of 1 :
19311: LD_VAR 0 4
19315: PUSH
19316: LD_INT 1
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19335
19324: POP
// tech := tech_lassight ; 2 :
19325: LD_ADDR_VAR 0 5
19329: PUSH
19330: LD_INT 12
19332: ST_TO_ADDR
19333: GO 19374
19335: LD_INT 2
19337: DOUBLE
19338: EQUAL
19339: IFTRUE 19343
19341: GO 19354
19343: POP
// tech := tech_mortar ; 3 :
19344: LD_ADDR_VAR 0 5
19348: PUSH
19349: LD_INT 41
19351: ST_TO_ADDR
19352: GO 19374
19354: LD_INT 3
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19373
19362: POP
// tech := tech_bazooka ; end ;
19363: LD_ADDR_VAR 0 5
19367: PUSH
19368: LD_INT 44
19370: ST_TO_ADDR
19371: GO 19374
19373: POP
// if Researched ( side , tech ) then
19374: LD_VAR 0 3
19378: PPUSH
19379: LD_VAR 0 5
19383: PPUSH
19384: CALL_OW 325
19388: IFFALSE 19415
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19390: LD_ADDR_VAR 0 2
19394: PUSH
19395: LD_INT 5
19397: PUSH
19398: LD_INT 8
19400: PUSH
19401: LD_INT 9
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: PUSH
19409: LD_VAR 0 4
19413: ARRAY
19414: ST_TO_ADDR
// end ;
19415: LD_VAR 0 2
19419: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19420: LD_INT 0
19422: PPUSH
19423: PPUSH
19424: PPUSH
// if not mines then
19425: LD_VAR 0 2
19429: NOT
19430: IFFALSE 19434
// exit ;
19432: GO 19578
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19434: LD_ADDR_VAR 0 5
19438: PUSH
19439: LD_INT 81
19441: PUSH
19442: LD_VAR 0 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 3
19453: PUSH
19454: LD_INT 21
19456: PUSH
19457: LD_INT 3
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: CALL_OW 69
19476: ST_TO_ADDR
// for i in mines do
19477: LD_ADDR_VAR 0 4
19481: PUSH
19482: LD_VAR 0 2
19486: PUSH
19487: FOR_IN
19488: IFFALSE 19576
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19490: LD_VAR 0 4
19494: PUSH
19495: LD_INT 1
19497: ARRAY
19498: PPUSH
19499: LD_VAR 0 4
19503: PUSH
19504: LD_INT 2
19506: ARRAY
19507: PPUSH
19508: CALL_OW 458
19512: NOT
19513: IFFALSE 19517
// continue ;
19515: GO 19487
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19517: LD_VAR 0 4
19521: PUSH
19522: LD_INT 1
19524: ARRAY
19525: PPUSH
19526: LD_VAR 0 4
19530: PUSH
19531: LD_INT 2
19533: ARRAY
19534: PPUSH
19535: CALL_OW 428
19539: PUSH
19540: LD_VAR 0 5
19544: IN
19545: IFFALSE 19574
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19547: LD_VAR 0 4
19551: PUSH
19552: LD_INT 1
19554: ARRAY
19555: PPUSH
19556: LD_VAR 0 4
19560: PUSH
19561: LD_INT 2
19563: ARRAY
19564: PPUSH
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 456
// end ;
19574: GO 19487
19576: POP
19577: POP
// end ;
19578: LD_VAR 0 3
19582: RET
// export function Count ( array ) ; begin
19583: LD_INT 0
19585: PPUSH
// result := array + 0 ;
19586: LD_ADDR_VAR 0 2
19590: PUSH
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 0
19598: PLUS
19599: ST_TO_ADDR
// end ;
19600: LD_VAR 0 2
19604: RET
// export function IsEmpty ( building ) ; begin
19605: LD_INT 0
19607: PPUSH
// if not building then
19608: LD_VAR 0 1
19612: NOT
19613: IFFALSE 19617
// exit ;
19615: GO 19660
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19617: LD_ADDR_VAR 0 2
19621: PUSH
19622: LD_VAR 0 1
19626: PUSH
19627: LD_INT 22
19629: PUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 255
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 58
19646: PUSH
19647: EMPTY
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PPUSH
19654: CALL_OW 69
19658: IN
19659: ST_TO_ADDR
// end ;
19660: LD_VAR 0 2
19664: RET
// export function IsNotFull ( building ) ; var places ; begin
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
// if not building then
19669: LD_VAR 0 1
19673: NOT
19674: IFFALSE 19678
// exit ;
19676: GO 19706
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_VAR 0 1
19687: PPUSH
19688: LD_INT 3
19690: PUSH
19691: LD_INT 62
19693: PUSH
19694: EMPTY
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 72
19705: ST_TO_ADDR
// end ;
19706: LD_VAR 0 2
19710: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
// tmp := [ ] ;
19717: LD_ADDR_VAR 0 3
19721: PUSH
19722: EMPTY
19723: ST_TO_ADDR
// list := [ ] ;
19724: LD_ADDR_VAR 0 5
19728: PUSH
19729: EMPTY
19730: ST_TO_ADDR
// for i = 16 to 25 do
19731: LD_ADDR_VAR 0 4
19735: PUSH
19736: DOUBLE
19737: LD_INT 16
19739: DEC
19740: ST_TO_ADDR
19741: LD_INT 25
19743: PUSH
19744: FOR_TO
19745: IFFALSE 19818
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19747: LD_ADDR_VAR 0 3
19751: PUSH
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 22
19759: PUSH
19760: LD_VAR 0 1
19764: PPUSH
19765: CALL_OW 255
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 91
19776: PUSH
19777: LD_VAR 0 1
19781: PUSH
19782: LD_INT 6
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 30
19792: PUSH
19793: LD_VAR 0 4
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: PPUSH
19810: CALL_OW 69
19814: ADD
19815: ST_TO_ADDR
19816: GO 19744
19818: POP
19819: POP
// for i = 1 to tmp do
19820: LD_ADDR_VAR 0 4
19824: PUSH
19825: DOUBLE
19826: LD_INT 1
19828: DEC
19829: ST_TO_ADDR
19830: LD_VAR 0 3
19834: PUSH
19835: FOR_TO
19836: IFFALSE 19924
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19838: LD_ADDR_VAR 0 5
19842: PUSH
19843: LD_VAR 0 5
19847: PUSH
19848: LD_VAR 0 3
19852: PUSH
19853: LD_VAR 0 4
19857: ARRAY
19858: PPUSH
19859: CALL_OW 266
19863: PUSH
19864: LD_VAR 0 3
19868: PUSH
19869: LD_VAR 0 4
19873: ARRAY
19874: PPUSH
19875: CALL_OW 250
19879: PUSH
19880: LD_VAR 0 3
19884: PUSH
19885: LD_VAR 0 4
19889: ARRAY
19890: PPUSH
19891: CALL_OW 251
19895: PUSH
19896: LD_VAR 0 3
19900: PUSH
19901: LD_VAR 0 4
19905: ARRAY
19906: PPUSH
19907: CALL_OW 254
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: ADD
19921: ST_TO_ADDR
19922: GO 19835
19924: POP
19925: POP
// result := list ;
19926: LD_ADDR_VAR 0 2
19930: PUSH
19931: LD_VAR 0 5
19935: ST_TO_ADDR
// end ;
19936: LD_VAR 0 2
19940: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
19947: PPUSH
19948: PPUSH
19949: PPUSH
// if not factory then
19950: LD_VAR 0 1
19954: NOT
19955: IFFALSE 19959
// exit ;
19957: GO 20562
// if control = control_apeman then
19959: LD_VAR 0 4
19963: PUSH
19964: LD_INT 5
19966: EQUAL
19967: IFFALSE 20076
// begin tmp := UnitsInside ( factory ) ;
19969: LD_ADDR_VAR 0 8
19973: PUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 313
19983: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19984: LD_VAR 0 8
19988: PPUSH
19989: LD_INT 25
19991: PUSH
19992: LD_INT 12
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PPUSH
19999: CALL_OW 72
20003: NOT
20004: IFFALSE 20014
// control := control_manual ;
20006: LD_ADDR_VAR 0 4
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20014: LD_ADDR_VAR 0 8
20018: PUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL 19711 0 1
20028: ST_TO_ADDR
// if tmp then
20029: LD_VAR 0 8
20033: IFFALSE 20076
// begin for i in tmp do
20035: LD_ADDR_VAR 0 7
20039: PUSH
20040: LD_VAR 0 8
20044: PUSH
20045: FOR_IN
20046: IFFALSE 20074
// if i [ 1 ] = b_ext_radio then
20048: LD_VAR 0 7
20052: PUSH
20053: LD_INT 1
20055: ARRAY
20056: PUSH
20057: LD_INT 22
20059: EQUAL
20060: IFFALSE 20072
// begin control := control_remote ;
20062: LD_ADDR_VAR 0 4
20066: PUSH
20067: LD_INT 2
20069: ST_TO_ADDR
// break ;
20070: GO 20074
// end ;
20072: GO 20045
20074: POP
20075: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20076: LD_VAR 0 1
20080: PPUSH
20081: LD_VAR 0 2
20085: PPUSH
20086: LD_VAR 0 3
20090: PPUSH
20091: LD_VAR 0 4
20095: PPUSH
20096: LD_VAR 0 5
20100: PPUSH
20101: CALL_OW 448
20105: IFFALSE 20140
// begin result := [ chassis , engine , control , weapon ] ;
20107: LD_ADDR_VAR 0 6
20111: PUSH
20112: LD_VAR 0 2
20116: PUSH
20117: LD_VAR 0 3
20121: PUSH
20122: LD_VAR 0 4
20126: PUSH
20127: LD_VAR 0 5
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: ST_TO_ADDR
// exit ;
20138: GO 20562
// end ; _chassis := AvailableChassisList ( factory ) ;
20140: LD_ADDR_VAR 0 9
20144: PUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 475
20154: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20155: LD_ADDR_VAR 0 11
20159: PUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 476
20169: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20170: LD_ADDR_VAR 0 12
20174: PUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 477
20184: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20185: LD_ADDR_VAR 0 10
20189: PUSH
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 478
20199: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20200: LD_VAR 0 9
20204: NOT
20205: IFTRUE 20214
20207: PUSH
20208: LD_VAR 0 11
20212: NOT
20213: OR
20214: IFTRUE 20223
20216: PUSH
20217: LD_VAR 0 12
20221: NOT
20222: OR
20223: IFTRUE 20232
20225: PUSH
20226: LD_VAR 0 10
20230: NOT
20231: OR
20232: IFFALSE 20267
// begin result := [ chassis , engine , control , weapon ] ;
20234: LD_ADDR_VAR 0 6
20238: PUSH
20239: LD_VAR 0 2
20243: PUSH
20244: LD_VAR 0 3
20248: PUSH
20249: LD_VAR 0 4
20253: PUSH
20254: LD_VAR 0 5
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: ST_TO_ADDR
// exit ;
20265: GO 20562
// end ; if not chassis in _chassis then
20267: LD_VAR 0 2
20271: PUSH
20272: LD_VAR 0 9
20276: IN
20277: NOT
20278: IFFALSE 20304
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20280: LD_ADDR_VAR 0 2
20284: PUSH
20285: LD_VAR 0 9
20289: PUSH
20290: LD_INT 1
20292: PPUSH
20293: LD_VAR 0 9
20297: PPUSH
20298: CALL_OW 12
20302: ARRAY
20303: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20304: LD_VAR 0 2
20308: PPUSH
20309: LD_VAR 0 3
20313: PPUSH
20314: CALL 20567 0 2
20318: NOT
20319: IFFALSE 20380
// repeat engine := _engine [ 1 ] ;
20321: LD_ADDR_VAR 0 3
20325: PUSH
20326: LD_VAR 0 11
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20335: LD_ADDR_VAR 0 11
20339: PUSH
20340: LD_VAR 0 11
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 3
20352: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20353: LD_VAR 0 2
20357: PPUSH
20358: LD_VAR 0 3
20362: PPUSH
20363: CALL 20567 0 2
20367: IFTRUE 20378
20369: PUSH
20370: LD_VAR 0 11
20374: PUSH
20375: EMPTY
20376: EQUAL
20377: OR
20378: IFFALSE 20321
// if not control in _control then
20380: LD_VAR 0 4
20384: PUSH
20385: LD_VAR 0 12
20389: IN
20390: NOT
20391: IFFALSE 20417
// control := _control [ rand ( 1 , _control ) ] ;
20393: LD_ADDR_VAR 0 4
20397: PUSH
20398: LD_VAR 0 12
20402: PUSH
20403: LD_INT 1
20405: PPUSH
20406: LD_VAR 0 12
20410: PPUSH
20411: CALL_OW 12
20415: ARRAY
20416: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20417: LD_VAR 0 2
20421: PPUSH
20422: LD_VAR 0 5
20426: PPUSH
20427: CALL 20789 0 2
20431: NOT
20432: IFFALSE 20493
// repeat weapon := _weapon [ 1 ] ;
20434: LD_ADDR_VAR 0 5
20438: PUSH
20439: LD_VAR 0 10
20443: PUSH
20444: LD_INT 1
20446: ARRAY
20447: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20448: LD_ADDR_VAR 0 10
20452: PUSH
20453: LD_VAR 0 10
20457: PPUSH
20458: LD_INT 1
20460: PPUSH
20461: CALL_OW 3
20465: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20466: LD_VAR 0 2
20470: PPUSH
20471: LD_VAR 0 5
20475: PPUSH
20476: CALL 20789 0 2
20480: IFTRUE 20491
20482: PUSH
20483: LD_VAR 0 10
20487: PUSH
20488: EMPTY
20489: EQUAL
20490: OR
20491: IFFALSE 20434
// result := [ ] ;
20493: LD_ADDR_VAR 0 6
20497: PUSH
20498: EMPTY
20499: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20500: LD_VAR 0 1
20504: PPUSH
20505: LD_VAR 0 2
20509: PPUSH
20510: LD_VAR 0 3
20514: PPUSH
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_VAR 0 5
20524: PPUSH
20525: CALL_OW 448
20529: IFFALSE 20562
// result := [ chassis , engine , control , weapon ] ;
20531: LD_ADDR_VAR 0 6
20535: PUSH
20536: LD_VAR 0 2
20540: PUSH
20541: LD_VAR 0 3
20545: PUSH
20546: LD_VAR 0 4
20550: PUSH
20551: LD_VAR 0 5
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// end ;
20562: LD_VAR 0 6
20566: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20567: LD_INT 0
20569: PPUSH
// if not chassis or not engine then
20570: LD_VAR 0 1
20574: NOT
20575: IFTRUE 20584
20577: PUSH
20578: LD_VAR 0 2
20582: NOT
20583: OR
20584: IFFALSE 20588
// exit ;
20586: GO 20784
// case engine of engine_solar :
20588: LD_VAR 0 2
20592: PUSH
20593: LD_INT 2
20595: DOUBLE
20596: EQUAL
20597: IFTRUE 20601
20599: GO 20639
20601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20602: LD_ADDR_VAR 0 3
20606: PUSH
20607: LD_INT 11
20609: PUSH
20610: LD_INT 12
20612: PUSH
20613: LD_INT 13
20615: PUSH
20616: LD_INT 14
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: LD_INT 3
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: ST_TO_ADDR
20637: GO 20768
20639: LD_INT 1
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20709
20647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20648: LD_ADDR_VAR 0 3
20652: PUSH
20653: LD_INT 11
20655: PUSH
20656: LD_INT 12
20658: PUSH
20659: LD_INT 13
20661: PUSH
20662: LD_INT 14
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 3
20673: PUSH
20674: LD_INT 4
20676: PUSH
20677: LD_INT 5
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 23
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_INT 24
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: ST_TO_ADDR
20707: GO 20768
20709: LD_INT 3
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20767
20717: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20718: LD_ADDR_VAR 0 3
20722: PUSH
20723: LD_INT 13
20725: PUSH
20726: LD_INT 14
20728: PUSH
20729: LD_INT 2
20731: PUSH
20732: LD_INT 3
20734: PUSH
20735: LD_INT 4
20737: PUSH
20738: LD_INT 5
20740: PUSH
20741: LD_INT 21
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_INT 23
20749: PUSH
20750: LD_INT 24
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: ST_TO_ADDR
20765: GO 20768
20767: POP
// result := ( chassis in result ) ;
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_VAR 0 1
20777: PUSH
20778: LD_VAR 0 3
20782: IN
20783: ST_TO_ADDR
// end ;
20784: LD_VAR 0 3
20788: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20789: LD_INT 0
20791: PPUSH
// if not chassis or not weapon then
20792: LD_VAR 0 1
20796: NOT
20797: IFTRUE 20806
20799: PUSH
20800: LD_VAR 0 2
20804: NOT
20805: OR
20806: IFFALSE 20810
// exit ;
20808: GO 21904
// case weapon of us_machine_gun :
20810: LD_VAR 0 2
20814: PUSH
20815: LD_INT 2
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20853
20823: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20824: LD_ADDR_VAR 0 3
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 3
20837: PUSH
20838: LD_INT 4
20840: PUSH
20841: LD_INT 5
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: ST_TO_ADDR
20851: GO 21888
20853: LD_INT 3
20855: DOUBLE
20856: EQUAL
20857: IFTRUE 20861
20859: GO 20891
20861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20862: LD_ADDR_VAR 0 3
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 4
20878: PUSH
20879: LD_INT 5
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: ST_TO_ADDR
20889: GO 21888
20891: LD_INT 11
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 20929
20899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20900: LD_ADDR_VAR 0 3
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 4
20916: PUSH
20917: LD_INT 5
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: ST_TO_ADDR
20927: GO 21888
20929: LD_INT 4
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20963
20937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 3
20948: PUSH
20949: LD_INT 4
20951: PUSH
20952: LD_INT 5
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: ST_TO_ADDR
20961: GO 21888
20963: LD_INT 5
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20997
20971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20972: LD_ADDR_VAR 0 3
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: LD_INT 3
20982: PUSH
20983: LD_INT 4
20985: PUSH
20986: LD_INT 5
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: ST_TO_ADDR
20995: GO 21888
20997: LD_INT 9
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21031
21005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 3
21016: PUSH
21017: LD_INT 4
21019: PUSH
21020: LD_INT 5
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: ST_TO_ADDR
21029: GO 21888
21031: LD_INT 7
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21065
21039: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21040: LD_ADDR_VAR 0 3
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 4
21053: PUSH
21054: LD_INT 5
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
21063: GO 21888
21065: LD_INT 12
21067: DOUBLE
21068: EQUAL
21069: IFTRUE 21073
21071: GO 21099
21073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21074: LD_ADDR_VAR 0 3
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: LD_INT 3
21084: PUSH
21085: LD_INT 4
21087: PUSH
21088: LD_INT 5
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: ST_TO_ADDR
21097: GO 21888
21099: LD_INT 13
21101: DOUBLE
21102: EQUAL
21103: IFTRUE 21107
21105: GO 21133
21107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21108: LD_ADDR_VAR 0 3
21112: PUSH
21113: LD_INT 2
21115: PUSH
21116: LD_INT 3
21118: PUSH
21119: LD_INT 4
21121: PUSH
21122: LD_INT 5
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: ST_TO_ADDR
21131: GO 21888
21133: LD_INT 14
21135: DOUBLE
21136: EQUAL
21137: IFTRUE 21141
21139: GO 21159
21141: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: LD_INT 4
21149: PUSH
21150: LD_INT 5
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: ST_TO_ADDR
21157: GO 21888
21159: LD_INT 6
21161: DOUBLE
21162: EQUAL
21163: IFTRUE 21167
21165: GO 21185
21167: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: LD_INT 4
21175: PUSH
21176: LD_INT 5
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: ST_TO_ADDR
21183: GO 21888
21185: LD_INT 10
21187: DOUBLE
21188: EQUAL
21189: IFTRUE 21193
21191: GO 21211
21193: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: LD_INT 4
21201: PUSH
21202: LD_INT 5
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: ST_TO_ADDR
21209: GO 21888
21211: LD_INT 22
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21245
21219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_INT 11
21227: PUSH
21228: LD_INT 12
21230: PUSH
21231: LD_INT 13
21233: PUSH
21234: LD_INT 14
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: ST_TO_ADDR
21243: GO 21888
21245: LD_INT 23
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21279
21253: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: LD_INT 11
21261: PUSH
21262: LD_INT 12
21264: PUSH
21265: LD_INT 13
21267: PUSH
21268: LD_INT 14
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21888
21279: LD_INT 24
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21313
21287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 11
21295: PUSH
21296: LD_INT 12
21298: PUSH
21299: LD_INT 13
21301: PUSH
21302: LD_INT 14
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: ST_TO_ADDR
21311: GO 21888
21313: LD_INT 30
21315: DOUBLE
21316: EQUAL
21317: IFTRUE 21321
21319: GO 21347
21321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 11
21329: PUSH
21330: LD_INT 12
21332: PUSH
21333: LD_INT 13
21335: PUSH
21336: LD_INT 14
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: ST_TO_ADDR
21345: GO 21888
21347: LD_INT 25
21349: DOUBLE
21350: EQUAL
21351: IFTRUE 21355
21353: GO 21373
21355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21356: LD_ADDR_VAR 0 3
21360: PUSH
21361: LD_INT 13
21363: PUSH
21364: LD_INT 14
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: ST_TO_ADDR
21371: GO 21888
21373: LD_INT 27
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21399
21381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21382: LD_ADDR_VAR 0 3
21386: PUSH
21387: LD_INT 13
21389: PUSH
21390: LD_INT 14
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: ST_TO_ADDR
21397: GO 21888
21399: LD_INT 92
21401: DOUBLE
21402: EQUAL
21403: IFTRUE 21407
21405: GO 21433
21407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21408: LD_ADDR_VAR 0 3
21412: PUSH
21413: LD_INT 11
21415: PUSH
21416: LD_INT 12
21418: PUSH
21419: LD_INT 13
21421: PUSH
21422: LD_INT 14
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: ST_TO_ADDR
21431: GO 21888
21433: LD_INT 28
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21459
21441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_INT 13
21449: PUSH
21450: LD_INT 14
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: ST_TO_ADDR
21457: GO 21888
21459: LD_INT 29
21461: DOUBLE
21462: EQUAL
21463: IFTRUE 21467
21465: GO 21485
21467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_INT 13
21475: PUSH
21476: LD_INT 14
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: ST_TO_ADDR
21483: GO 21888
21485: LD_INT 31
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21511
21493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21494: LD_ADDR_VAR 0 3
21498: PUSH
21499: LD_INT 13
21501: PUSH
21502: LD_INT 14
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: ST_TO_ADDR
21509: GO 21888
21511: LD_INT 26
21513: DOUBLE
21514: EQUAL
21515: IFTRUE 21519
21517: GO 21537
21519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21520: LD_ADDR_VAR 0 3
21524: PUSH
21525: LD_INT 13
21527: PUSH
21528: LD_INT 14
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: ST_TO_ADDR
21535: GO 21888
21537: LD_INT 42
21539: DOUBLE
21540: EQUAL
21541: IFTRUE 21545
21543: GO 21571
21545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21546: LD_ADDR_VAR 0 3
21550: PUSH
21551: LD_INT 21
21553: PUSH
21554: LD_INT 22
21556: PUSH
21557: LD_INT 23
21559: PUSH
21560: LD_INT 24
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: ST_TO_ADDR
21569: GO 21888
21571: LD_INT 43
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21605
21579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21580: LD_ADDR_VAR 0 3
21584: PUSH
21585: LD_INT 21
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_INT 23
21593: PUSH
21594: LD_INT 24
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: ST_TO_ADDR
21603: GO 21888
21605: LD_INT 44
21607: DOUBLE
21608: EQUAL
21609: IFTRUE 21613
21611: GO 21639
21613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21614: LD_ADDR_VAR 0 3
21618: PUSH
21619: LD_INT 21
21621: PUSH
21622: LD_INT 22
21624: PUSH
21625: LD_INT 23
21627: PUSH
21628: LD_INT 24
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
21637: GO 21888
21639: LD_INT 45
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21673
21647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21648: LD_ADDR_VAR 0 3
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_INT 23
21661: PUSH
21662: LD_INT 24
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: ST_TO_ADDR
21671: GO 21888
21673: LD_INT 49
21675: DOUBLE
21676: EQUAL
21677: IFTRUE 21681
21679: GO 21707
21681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21682: LD_ADDR_VAR 0 3
21686: PUSH
21687: LD_INT 21
21689: PUSH
21690: LD_INT 22
21692: PUSH
21693: LD_INT 23
21695: PUSH
21696: LD_INT 24
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
21705: GO 21888
21707: LD_INT 51
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21741
21715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21716: LD_ADDR_VAR 0 3
21720: PUSH
21721: LD_INT 21
21723: PUSH
21724: LD_INT 22
21726: PUSH
21727: LD_INT 23
21729: PUSH
21730: LD_INT 24
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: ST_TO_ADDR
21739: GO 21888
21741: LD_INT 52
21743: DOUBLE
21744: EQUAL
21745: IFTRUE 21749
21747: GO 21775
21749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21750: LD_ADDR_VAR 0 3
21754: PUSH
21755: LD_INT 21
21757: PUSH
21758: LD_INT 22
21760: PUSH
21761: LD_INT 23
21763: PUSH
21764: LD_INT 24
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: ST_TO_ADDR
21773: GO 21888
21775: LD_INT 53
21777: DOUBLE
21778: EQUAL
21779: IFTRUE 21783
21781: GO 21801
21783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21784: LD_ADDR_VAR 0 3
21788: PUSH
21789: LD_INT 23
21791: PUSH
21792: LD_INT 24
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: ST_TO_ADDR
21799: GO 21888
21801: LD_INT 46
21803: DOUBLE
21804: EQUAL
21805: IFTRUE 21809
21807: GO 21827
21809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21810: LD_ADDR_VAR 0 3
21814: PUSH
21815: LD_INT 23
21817: PUSH
21818: LD_INT 24
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: ST_TO_ADDR
21825: GO 21888
21827: LD_INT 47
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 21853
21835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
21836: LD_ADDR_VAR 0 3
21840: PUSH
21841: LD_INT 23
21843: PUSH
21844: LD_INT 24
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: ST_TO_ADDR
21851: GO 21888
21853: LD_INT 98
21855: DOUBLE
21856: EQUAL
21857: IFTRUE 21861
21859: GO 21887
21861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21862: LD_ADDR_VAR 0 3
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 22
21872: PUSH
21873: LD_INT 23
21875: PUSH
21876: LD_INT 24
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: ST_TO_ADDR
21885: GO 21888
21887: POP
// result := ( chassis in result ) ;
21888: LD_ADDR_VAR 0 3
21892: PUSH
21893: LD_VAR 0 1
21897: PUSH
21898: LD_VAR 0 3
21902: IN
21903: ST_TO_ADDR
// end ;
21904: LD_VAR 0 3
21908: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
// result := array ;
21918: LD_ADDR_VAR 0 5
21922: PUSH
21923: LD_VAR 0 1
21927: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21928: LD_VAR 0 1
21932: NOT
21933: IFTRUE 21942
21935: PUSH
21936: LD_VAR 0 2
21940: NOT
21941: OR
21942: IFTRUE 21951
21944: PUSH
21945: LD_VAR 0 3
21949: NOT
21950: OR
21951: IFTRUE 21965
21953: PUSH
21954: LD_VAR 0 2
21958: PUSH
21959: LD_VAR 0 1
21963: GREATER
21964: OR
21965: IFTRUE 21979
21967: PUSH
21968: LD_VAR 0 3
21972: PUSH
21973: LD_VAR 0 1
21977: GREATER
21978: OR
21979: IFFALSE 21983
// exit ;
21981: GO 22279
// if direction then
21983: LD_VAR 0 4
21987: IFFALSE 22051
// begin d := 1 ;
21989: LD_ADDR_VAR 0 9
21993: PUSH
21994: LD_INT 1
21996: ST_TO_ADDR
// if i_from > i_to then
21997: LD_VAR 0 2
22001: PUSH
22002: LD_VAR 0 3
22006: GREATER
22007: IFFALSE 22033
// length := ( array - i_from ) + i_to else
22009: LD_ADDR_VAR 0 11
22013: PUSH
22014: LD_VAR 0 1
22018: PUSH
22019: LD_VAR 0 2
22023: MINUS
22024: PUSH
22025: LD_VAR 0 3
22029: PLUS
22030: ST_TO_ADDR
22031: GO 22049
// length := i_to - i_from ;
22033: LD_ADDR_VAR 0 11
22037: PUSH
22038: LD_VAR 0 3
22042: PUSH
22043: LD_VAR 0 2
22047: MINUS
22048: ST_TO_ADDR
// end else
22049: GO 22112
// begin d := - 1 ;
22051: LD_ADDR_VAR 0 9
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: ST_TO_ADDR
// if i_from > i_to then
22060: LD_VAR 0 2
22064: PUSH
22065: LD_VAR 0 3
22069: GREATER
22070: IFFALSE 22090
// length := i_from - i_to else
22072: LD_ADDR_VAR 0 11
22076: PUSH
22077: LD_VAR 0 2
22081: PUSH
22082: LD_VAR 0 3
22086: MINUS
22087: ST_TO_ADDR
22088: GO 22112
// length := ( array - i_to ) + i_from ;
22090: LD_ADDR_VAR 0 11
22094: PUSH
22095: LD_VAR 0 1
22099: PUSH
22100: LD_VAR 0 3
22104: MINUS
22105: PUSH
22106: LD_VAR 0 2
22110: PLUS
22111: ST_TO_ADDR
// end ; if not length then
22112: LD_VAR 0 11
22116: NOT
22117: IFFALSE 22121
// exit ;
22119: GO 22279
// tmp := array ;
22121: LD_ADDR_VAR 0 10
22125: PUSH
22126: LD_VAR 0 1
22130: ST_TO_ADDR
// for i = 1 to length do
22131: LD_ADDR_VAR 0 6
22135: PUSH
22136: DOUBLE
22137: LD_INT 1
22139: DEC
22140: ST_TO_ADDR
22141: LD_VAR 0 11
22145: PUSH
22146: FOR_TO
22147: IFFALSE 22267
// begin for j = 1 to array do
22149: LD_ADDR_VAR 0 7
22153: PUSH
22154: DOUBLE
22155: LD_INT 1
22157: DEC
22158: ST_TO_ADDR
22159: LD_VAR 0 1
22163: PUSH
22164: FOR_TO
22165: IFFALSE 22253
// begin k := j + d ;
22167: LD_ADDR_VAR 0 8
22171: PUSH
22172: LD_VAR 0 7
22176: PUSH
22177: LD_VAR 0 9
22181: PLUS
22182: ST_TO_ADDR
// if k > array then
22183: LD_VAR 0 8
22187: PUSH
22188: LD_VAR 0 1
22192: GREATER
22193: IFFALSE 22203
// k := 1 ;
22195: LD_ADDR_VAR 0 8
22199: PUSH
22200: LD_INT 1
22202: ST_TO_ADDR
// if not k then
22203: LD_VAR 0 8
22207: NOT
22208: IFFALSE 22220
// k := array ;
22210: LD_ADDR_VAR 0 8
22214: PUSH
22215: LD_VAR 0 1
22219: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22220: LD_ADDR_VAR 0 10
22224: PUSH
22225: LD_VAR 0 10
22229: PPUSH
22230: LD_VAR 0 8
22234: PPUSH
22235: LD_VAR 0 1
22239: PUSH
22240: LD_VAR 0 7
22244: ARRAY
22245: PPUSH
22246: CALL_OW 1
22250: ST_TO_ADDR
// end ;
22251: GO 22164
22253: POP
22254: POP
// array := tmp ;
22255: LD_ADDR_VAR 0 1
22259: PUSH
22260: LD_VAR 0 10
22264: ST_TO_ADDR
// end ;
22265: GO 22146
22267: POP
22268: POP
// result := array ;
22269: LD_ADDR_VAR 0 5
22273: PUSH
22274: LD_VAR 0 1
22278: ST_TO_ADDR
// end ;
22279: LD_VAR 0 5
22283: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22284: LD_INT 0
22286: PPUSH
22287: PPUSH
// result := 0 ;
22288: LD_ADDR_VAR 0 3
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// if not array or not value in array then
22296: LD_VAR 0 1
22300: NOT
22301: IFTRUE 22316
22303: PUSH
22304: LD_VAR 0 2
22308: PUSH
22309: LD_VAR 0 1
22313: IN
22314: NOT
22315: OR
22316: IFFALSE 22320
// exit ;
22318: GO 22374
// for i = 1 to array do
22320: LD_ADDR_VAR 0 4
22324: PUSH
22325: DOUBLE
22326: LD_INT 1
22328: DEC
22329: ST_TO_ADDR
22330: LD_VAR 0 1
22334: PUSH
22335: FOR_TO
22336: IFFALSE 22372
// if value = array [ i ] then
22338: LD_VAR 0 2
22342: PUSH
22343: LD_VAR 0 1
22347: PUSH
22348: LD_VAR 0 4
22352: ARRAY
22353: EQUAL
22354: IFFALSE 22370
// begin result := i ;
22356: LD_ADDR_VAR 0 3
22360: PUSH
22361: LD_VAR 0 4
22365: ST_TO_ADDR
// exit ;
22366: POP
22367: POP
22368: GO 22374
// end ;
22370: GO 22335
22372: POP
22373: POP
// end ;
22374: LD_VAR 0 3
22378: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22379: LD_INT 0
22381: PPUSH
// vc_chassis := chassis ;
22382: LD_ADDR_OWVAR 37
22386: PUSH
22387: LD_VAR 0 1
22391: ST_TO_ADDR
// vc_engine := engine ;
22392: LD_ADDR_OWVAR 39
22396: PUSH
22397: LD_VAR 0 2
22401: ST_TO_ADDR
// vc_control := control ;
22402: LD_ADDR_OWVAR 38
22406: PUSH
22407: LD_VAR 0 3
22411: ST_TO_ADDR
// vc_weapon := weapon ;
22412: LD_ADDR_OWVAR 40
22416: PUSH
22417: LD_VAR 0 4
22421: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22422: LD_ADDR_OWVAR 41
22426: PUSH
22427: LD_VAR 0 5
22431: ST_TO_ADDR
// end ;
22432: LD_VAR 0 6
22436: RET
// export function WantPlant ( unit ) ; var task ; begin
22437: LD_INT 0
22439: PPUSH
22440: PPUSH
// result := false ;
22441: LD_ADDR_VAR 0 2
22445: PUSH
22446: LD_INT 0
22448: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_VAR 0 1
22458: PPUSH
22459: CALL_OW 437
22463: ST_TO_ADDR
// if task then
22464: LD_VAR 0 3
22468: IFFALSE 22496
// if task [ 1 ] [ 1 ] = p then
22470: LD_VAR 0 3
22474: PUSH
22475: LD_INT 1
22477: ARRAY
22478: PUSH
22479: LD_INT 1
22481: ARRAY
22482: PUSH
22483: LD_STRING p
22485: EQUAL
22486: IFFALSE 22496
// result := true ;
22488: LD_ADDR_VAR 0 2
22492: PUSH
22493: LD_INT 1
22495: ST_TO_ADDR
// end ;
22496: LD_VAR 0 2
22500: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22501: LD_INT 0
22503: PPUSH
22504: PPUSH
22505: PPUSH
22506: PPUSH
// if pos < 1 then
22507: LD_VAR 0 2
22511: PUSH
22512: LD_INT 1
22514: LESS
22515: IFFALSE 22519
// exit ;
22517: GO 22822
// if pos = 1 then
22519: LD_VAR 0 2
22523: PUSH
22524: LD_INT 1
22526: EQUAL
22527: IFFALSE 22560
// result := Replace ( arr , pos [ 1 ] , value ) else
22529: LD_ADDR_VAR 0 4
22533: PUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: LD_VAR 0 3
22552: PPUSH
22553: CALL_OW 1
22557: ST_TO_ADDR
22558: GO 22822
// begin tmp := arr ;
22560: LD_ADDR_VAR 0 6
22564: PUSH
22565: LD_VAR 0 1
22569: ST_TO_ADDR
// s_arr := [ tmp ] ;
22570: LD_ADDR_VAR 0 7
22574: PUSH
22575: LD_VAR 0 6
22579: PUSH
22580: EMPTY
22581: LIST
22582: ST_TO_ADDR
// for i = 1 to pos - 1 do
22583: LD_ADDR_VAR 0 5
22587: PUSH
22588: DOUBLE
22589: LD_INT 1
22591: DEC
22592: ST_TO_ADDR
22593: LD_VAR 0 2
22597: PUSH
22598: LD_INT 1
22600: MINUS
22601: PUSH
22602: FOR_TO
22603: IFFALSE 22648
// begin tmp := tmp [ pos [ i ] ] ;
22605: LD_ADDR_VAR 0 6
22609: PUSH
22610: LD_VAR 0 6
22614: PUSH
22615: LD_VAR 0 2
22619: PUSH
22620: LD_VAR 0 5
22624: ARRAY
22625: ARRAY
22626: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22627: LD_ADDR_VAR 0 7
22631: PUSH
22632: LD_VAR 0 7
22636: PUSH
22637: LD_VAR 0 6
22641: PUSH
22642: EMPTY
22643: LIST
22644: ADD
22645: ST_TO_ADDR
// end ;
22646: GO 22602
22648: POP
22649: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22650: LD_ADDR_VAR 0 6
22654: PUSH
22655: LD_VAR 0 6
22659: PPUSH
22660: LD_VAR 0 2
22664: PUSH
22665: LD_VAR 0 2
22669: ARRAY
22670: PPUSH
22671: LD_VAR 0 3
22675: PPUSH
22676: CALL_OW 1
22680: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 7
22690: PPUSH
22691: LD_VAR 0 7
22695: PPUSH
22696: LD_VAR 0 6
22700: PPUSH
22701: CALL_OW 1
22705: ST_TO_ADDR
// for i = s_arr downto 2 do
22706: LD_ADDR_VAR 0 5
22710: PUSH
22711: DOUBLE
22712: LD_VAR 0 7
22716: INC
22717: ST_TO_ADDR
22718: LD_INT 2
22720: PUSH
22721: FOR_DOWNTO
22722: IFFALSE 22806
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22724: LD_ADDR_VAR 0 6
22728: PUSH
22729: LD_VAR 0 7
22733: PUSH
22734: LD_VAR 0 5
22738: PUSH
22739: LD_INT 1
22741: MINUS
22742: ARRAY
22743: PPUSH
22744: LD_VAR 0 2
22748: PUSH
22749: LD_VAR 0 5
22753: PUSH
22754: LD_INT 1
22756: MINUS
22757: ARRAY
22758: PPUSH
22759: LD_VAR 0 7
22763: PUSH
22764: LD_VAR 0 5
22768: ARRAY
22769: PPUSH
22770: CALL_OW 1
22774: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22775: LD_ADDR_VAR 0 7
22779: PUSH
22780: LD_VAR 0 7
22784: PPUSH
22785: LD_VAR 0 5
22789: PUSH
22790: LD_INT 1
22792: MINUS
22793: PPUSH
22794: LD_VAR 0 6
22798: PPUSH
22799: CALL_OW 1
22803: ST_TO_ADDR
// end ;
22804: GO 22721
22806: POP
22807: POP
// result := s_arr [ 1 ] ;
22808: LD_ADDR_VAR 0 4
22812: PUSH
22813: LD_VAR 0 7
22817: PUSH
22818: LD_INT 1
22820: ARRAY
22821: ST_TO_ADDR
// end ; end ;
22822: LD_VAR 0 4
22826: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22827: LD_INT 0
22829: PPUSH
22830: PPUSH
// if not list then
22831: LD_VAR 0 1
22835: NOT
22836: IFFALSE 22840
// exit ;
22838: GO 22931
// i := list [ pos1 ] ;
22840: LD_ADDR_VAR 0 5
22844: PUSH
22845: LD_VAR 0 1
22849: PUSH
22850: LD_VAR 0 2
22854: ARRAY
22855: ST_TO_ADDR
// if not i then
22856: LD_VAR 0 5
22860: NOT
22861: IFFALSE 22865
// exit ;
22863: GO 22931
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22865: LD_ADDR_VAR 0 1
22869: PUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: LD_VAR 0 2
22879: PPUSH
22880: LD_VAR 0 1
22884: PUSH
22885: LD_VAR 0 3
22889: ARRAY
22890: PPUSH
22891: CALL_OW 1
22895: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22896: LD_ADDR_VAR 0 1
22900: PUSH
22901: LD_VAR 0 1
22905: PPUSH
22906: LD_VAR 0 3
22910: PPUSH
22911: LD_VAR 0 5
22915: PPUSH
22916: CALL_OW 1
22920: ST_TO_ADDR
// result := list ;
22921: LD_ADDR_VAR 0 4
22925: PUSH
22926: LD_VAR 0 1
22930: ST_TO_ADDR
// end ;
22931: LD_VAR 0 4
22935: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22936: LD_INT 0
22938: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22939: LD_ADDR_VAR 0 5
22943: PUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: CALL_OW 250
22953: PPUSH
22954: LD_VAR 0 1
22958: PPUSH
22959: CALL_OW 251
22963: PPUSH
22964: LD_VAR 0 2
22968: PPUSH
22969: LD_VAR 0 3
22973: PPUSH
22974: LD_VAR 0 4
22978: PPUSH
22979: CALL 23361 0 5
22983: ST_TO_ADDR
// end ;
22984: LD_VAR 0 5
22988: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22989: LD_INT 0
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
// if not list or not unit then
22995: LD_VAR 0 2
22999: NOT
23000: IFTRUE 23009
23002: PUSH
23003: LD_VAR 0 1
23007: NOT
23008: OR
23009: IFFALSE 23013
// exit ;
23011: GO 23356
// result := [ ] ;
23013: LD_ADDR_VAR 0 5
23017: PUSH
23018: EMPTY
23019: ST_TO_ADDR
// for i in list do
23020: LD_ADDR_VAR 0 6
23024: PUSH
23025: LD_VAR 0 2
23029: PUSH
23030: FOR_IN
23031: IFFALSE 23249
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23033: LD_ADDR_VAR 0 8
23037: PUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: LD_VAR 0 6
23047: PUSH
23048: LD_INT 1
23050: ARRAY
23051: PPUSH
23052: LD_VAR 0 6
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PPUSH
23061: CALL_OW 297
23065: ST_TO_ADDR
// if not Count ( result ) then
23066: LD_VAR 0 5
23070: PPUSH
23071: CALL 19583 0 1
23075: NOT
23076: IFFALSE 23109
// begin result := Join ( result , [ i , tmp ] ) ;
23078: LD_ADDR_VAR 0 5
23082: PUSH
23083: LD_VAR 0 5
23087: PPUSH
23088: LD_VAR 0 6
23092: PUSH
23093: LD_VAR 0 8
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PPUSH
23102: CALL 55559 0 2
23106: ST_TO_ADDR
// continue ;
23107: GO 23030
// end ; if result [ result ] [ 2 ] <= tmp then
23109: LD_VAR 0 5
23113: PUSH
23114: LD_VAR 0 5
23118: ARRAY
23119: PUSH
23120: LD_INT 2
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 8
23128: LESSEQUAL
23129: IFFALSE 23162
// result := Join ( result , [ i , tmp ] ) else
23131: LD_ADDR_VAR 0 5
23135: PUSH
23136: LD_VAR 0 5
23140: PPUSH
23141: LD_VAR 0 6
23145: PUSH
23146: LD_VAR 0 8
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PPUSH
23155: CALL 55559 0 2
23159: ST_TO_ADDR
23160: GO 23247
// begin for j := 1 to Count ( result ) do
23162: LD_ADDR_VAR 0 7
23166: PUSH
23167: DOUBLE
23168: LD_INT 1
23170: DEC
23171: ST_TO_ADDR
23172: LD_VAR 0 5
23176: PPUSH
23177: CALL 19583 0 1
23181: PUSH
23182: FOR_TO
23183: IFFALSE 23245
// begin if tmp < result [ j ] [ 2 ] then
23185: LD_VAR 0 8
23189: PUSH
23190: LD_VAR 0 5
23194: PUSH
23195: LD_VAR 0 7
23199: ARRAY
23200: PUSH
23201: LD_INT 2
23203: ARRAY
23204: LESS
23205: IFFALSE 23243
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23207: LD_ADDR_VAR 0 5
23211: PUSH
23212: LD_VAR 0 5
23216: PPUSH
23217: LD_VAR 0 7
23221: PPUSH
23222: LD_VAR 0 6
23226: PUSH
23227: LD_VAR 0 8
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PPUSH
23236: CALL_OW 2
23240: ST_TO_ADDR
// break ;
23241: GO 23245
// end ; end ;
23243: GO 23182
23245: POP
23246: POP
// end ; end ;
23247: GO 23030
23249: POP
23250: POP
// if result and not asc then
23251: LD_VAR 0 5
23255: IFFALSE 23264
23257: PUSH
23258: LD_VAR 0 3
23262: NOT
23263: AND
23264: IFFALSE 23281
// result := ReverseArray ( result ) ;
23266: LD_ADDR_VAR 0 5
23270: PUSH
23271: LD_VAR 0 5
23275: PPUSH
23276: CALL 50639 0 1
23280: ST_TO_ADDR
// tmp := [ ] ;
23281: LD_ADDR_VAR 0 8
23285: PUSH
23286: EMPTY
23287: ST_TO_ADDR
// if mode then
23288: LD_VAR 0 4
23292: IFFALSE 23356
// begin for i := 1 to result do
23294: LD_ADDR_VAR 0 6
23298: PUSH
23299: DOUBLE
23300: LD_INT 1
23302: DEC
23303: ST_TO_ADDR
23304: LD_VAR 0 5
23308: PUSH
23309: FOR_TO
23310: IFFALSE 23344
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23312: LD_ADDR_VAR 0 8
23316: PUSH
23317: LD_VAR 0 8
23321: PPUSH
23322: LD_VAR 0 5
23326: PUSH
23327: LD_VAR 0 6
23331: ARRAY
23332: PUSH
23333: LD_INT 1
23335: ARRAY
23336: PPUSH
23337: CALL 55559 0 2
23341: ST_TO_ADDR
23342: GO 23309
23344: POP
23345: POP
// result := tmp ;
23346: LD_ADDR_VAR 0 5
23350: PUSH
23351: LD_VAR 0 8
23355: ST_TO_ADDR
// end ; end ;
23356: LD_VAR 0 5
23360: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
// if not list then
23367: LD_VAR 0 3
23371: NOT
23372: IFFALSE 23376
// exit ;
23374: GO 23766
// result := [ ] ;
23376: LD_ADDR_VAR 0 6
23380: PUSH
23381: EMPTY
23382: ST_TO_ADDR
// for i in list do
23383: LD_ADDR_VAR 0 7
23387: PUSH
23388: LD_VAR 0 3
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23596
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23396: LD_ADDR_VAR 0 9
23400: PUSH
23401: LD_VAR 0 7
23405: PPUSH
23406: LD_VAR 0 1
23410: PPUSH
23411: LD_VAR 0 2
23415: PPUSH
23416: CALL_OW 297
23420: ST_TO_ADDR
// if not result then
23421: LD_VAR 0 6
23425: NOT
23426: IFFALSE 23452
// result := [ [ i , tmp ] ] else
23428: LD_ADDR_VAR 0 6
23432: PUSH
23433: LD_VAR 0 7
23437: PUSH
23438: LD_VAR 0 9
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: EMPTY
23448: LIST
23449: ST_TO_ADDR
23450: GO 23594
// begin if result [ result ] [ 2 ] <= tmp then
23452: LD_VAR 0 6
23456: PUSH
23457: LD_VAR 0 6
23461: ARRAY
23462: PUSH
23463: LD_INT 2
23465: ARRAY
23466: PUSH
23467: LD_VAR 0 9
23471: LESSEQUAL
23472: IFFALSE 23514
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23474: LD_ADDR_VAR 0 6
23478: PUSH
23479: LD_VAR 0 6
23483: PPUSH
23484: LD_VAR 0 6
23488: PUSH
23489: LD_INT 1
23491: PLUS
23492: PPUSH
23493: LD_VAR 0 7
23497: PUSH
23498: LD_VAR 0 9
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PPUSH
23507: CALL_OW 2
23511: ST_TO_ADDR
23512: GO 23594
// for j := 1 to result do
23514: LD_ADDR_VAR 0 8
23518: PUSH
23519: DOUBLE
23520: LD_INT 1
23522: DEC
23523: ST_TO_ADDR
23524: LD_VAR 0 6
23528: PUSH
23529: FOR_TO
23530: IFFALSE 23592
// begin if tmp < result [ j ] [ 2 ] then
23532: LD_VAR 0 9
23536: PUSH
23537: LD_VAR 0 6
23541: PUSH
23542: LD_VAR 0 8
23546: ARRAY
23547: PUSH
23548: LD_INT 2
23550: ARRAY
23551: LESS
23552: IFFALSE 23590
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23554: LD_ADDR_VAR 0 6
23558: PUSH
23559: LD_VAR 0 6
23563: PPUSH
23564: LD_VAR 0 8
23568: PPUSH
23569: LD_VAR 0 7
23573: PUSH
23574: LD_VAR 0 9
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PPUSH
23583: CALL_OW 2
23587: ST_TO_ADDR
// break ;
23588: GO 23592
// end ; end ;
23590: GO 23529
23592: POP
23593: POP
// end ; end ;
23594: GO 23393
23596: POP
23597: POP
// if result and not asc then
23598: LD_VAR 0 6
23602: IFFALSE 23611
23604: PUSH
23605: LD_VAR 0 4
23609: NOT
23610: AND
23611: IFFALSE 23686
// begin tmp := result ;
23613: LD_ADDR_VAR 0 9
23617: PUSH
23618: LD_VAR 0 6
23622: ST_TO_ADDR
// for i = tmp downto 1 do
23623: LD_ADDR_VAR 0 7
23627: PUSH
23628: DOUBLE
23629: LD_VAR 0 9
23633: INC
23634: ST_TO_ADDR
23635: LD_INT 1
23637: PUSH
23638: FOR_DOWNTO
23639: IFFALSE 23684
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23641: LD_ADDR_VAR 0 6
23645: PUSH
23646: LD_VAR 0 6
23650: PPUSH
23651: LD_VAR 0 9
23655: PUSH
23656: LD_VAR 0 7
23660: MINUS
23661: PUSH
23662: LD_INT 1
23664: PLUS
23665: PPUSH
23666: LD_VAR 0 9
23670: PUSH
23671: LD_VAR 0 7
23675: ARRAY
23676: PPUSH
23677: CALL_OW 1
23681: ST_TO_ADDR
23682: GO 23638
23684: POP
23685: POP
// end ; tmp := [ ] ;
23686: LD_ADDR_VAR 0 9
23690: PUSH
23691: EMPTY
23692: ST_TO_ADDR
// if mode then
23693: LD_VAR 0 5
23697: IFFALSE 23766
// begin for i = 1 to result do
23699: LD_ADDR_VAR 0 7
23703: PUSH
23704: DOUBLE
23705: LD_INT 1
23707: DEC
23708: ST_TO_ADDR
23709: LD_VAR 0 6
23713: PUSH
23714: FOR_TO
23715: IFFALSE 23754
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23717: LD_ADDR_VAR 0 9
23721: PUSH
23722: LD_VAR 0 9
23726: PPUSH
23727: LD_VAR 0 7
23731: PPUSH
23732: LD_VAR 0 6
23736: PUSH
23737: LD_VAR 0 7
23741: ARRAY
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: PPUSH
23747: CALL_OW 1
23751: ST_TO_ADDR
23752: GO 23714
23754: POP
23755: POP
// result := tmp ;
23756: LD_ADDR_VAR 0 6
23760: PUSH
23761: LD_VAR 0 9
23765: ST_TO_ADDR
// end ; end ;
23766: LD_VAR 0 6
23770: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23771: LD_INT 0
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23779: LD_ADDR_VAR 0 5
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: ST_TO_ADDR
// if not x or not y then
23801: LD_VAR 0 2
23805: NOT
23806: IFTRUE 23815
23808: PUSH
23809: LD_VAR 0 3
23813: NOT
23814: OR
23815: IFFALSE 23819
// exit ;
23817: GO 25475
// if not range then
23819: LD_VAR 0 4
23823: NOT
23824: IFFALSE 23834
// range := 10 ;
23826: LD_ADDR_VAR 0 4
23830: PUSH
23831: LD_INT 10
23833: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23834: LD_ADDR_VAR 0 8
23838: PUSH
23839: LD_INT 81
23841: PUSH
23842: LD_VAR 0 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 92
23853: PUSH
23854: LD_VAR 0 2
23858: PUSH
23859: LD_VAR 0 3
23863: PUSH
23864: LD_VAR 0 4
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: LD_INT 21
23880: PUSH
23881: LD_INT 3
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PPUSH
23897: CALL_OW 69
23901: ST_TO_ADDR
// if not tmp then
23902: LD_VAR 0 8
23906: NOT
23907: IFFALSE 23911
// exit ;
23909: GO 25475
// for i in tmp do
23911: LD_ADDR_VAR 0 6
23915: PUSH
23916: LD_VAR 0 8
23920: PUSH
23921: FOR_IN
23922: IFFALSE 25450
// begin points := [ 0 , 0 , 0 ] ;
23924: LD_ADDR_VAR 0 9
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: ST_TO_ADDR
// bpoints := 1 ;
23943: LD_ADDR_VAR 0 10
23947: PUSH
23948: LD_INT 1
23950: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23951: LD_VAR 0 6
23955: PPUSH
23956: CALL_OW 247
23960: PUSH
23961: LD_INT 1
23963: DOUBLE
23964: EQUAL
23965: IFTRUE 23969
23967: GO 24551
23969: POP
// begin if GetClass ( i ) = 1 then
23970: LD_VAR 0 6
23974: PPUSH
23975: CALL_OW 257
23979: PUSH
23980: LD_INT 1
23982: EQUAL
23983: IFFALSE 24004
// points := [ 10 , 5 , 3 ] ;
23985: LD_ADDR_VAR 0 9
23989: PUSH
23990: LD_INT 10
23992: PUSH
23993: LD_INT 5
23995: PUSH
23996: LD_INT 3
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24004: LD_VAR 0 6
24008: PPUSH
24009: CALL_OW 257
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: LD_INT 4
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: IN
24028: IFFALSE 24049
// points := [ 3 , 2 , 1 ] ;
24030: LD_ADDR_VAR 0 9
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24049: LD_VAR 0 6
24053: PPUSH
24054: CALL_OW 257
24058: PUSH
24059: LD_INT 5
24061: EQUAL
24062: IFFALSE 24083
// points := [ 130 , 5 , 2 ] ;
24064: LD_ADDR_VAR 0 9
24068: PUSH
24069: LD_INT 130
24071: PUSH
24072: LD_INT 5
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24083: LD_VAR 0 6
24087: PPUSH
24088: CALL_OW 257
24092: PUSH
24093: LD_INT 8
24095: EQUAL
24096: IFFALSE 24117
// points := [ 35 , 35 , 30 ] ;
24098: LD_ADDR_VAR 0 9
24102: PUSH
24103: LD_INT 35
24105: PUSH
24106: LD_INT 35
24108: PUSH
24109: LD_INT 30
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24117: LD_VAR 0 6
24121: PPUSH
24122: CALL_OW 257
24126: PUSH
24127: LD_INT 9
24129: EQUAL
24130: IFFALSE 24151
// points := [ 20 , 55 , 40 ] ;
24132: LD_ADDR_VAR 0 9
24136: PUSH
24137: LD_INT 20
24139: PUSH
24140: LD_INT 55
24142: PUSH
24143: LD_INT 40
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24151: LD_VAR 0 6
24155: PPUSH
24156: CALL_OW 257
24160: PUSH
24161: LD_INT 12
24163: PUSH
24164: LD_INT 16
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: IN
24171: IFFALSE 24192
// points := [ 5 , 3 , 2 ] ;
24173: LD_ADDR_VAR 0 9
24177: PUSH
24178: LD_INT 5
24180: PUSH
24181: LD_INT 3
24183: PUSH
24184: LD_INT 2
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24192: LD_VAR 0 6
24196: PPUSH
24197: CALL_OW 257
24201: PUSH
24202: LD_INT 17
24204: EQUAL
24205: IFFALSE 24226
// points := [ 100 , 50 , 75 ] ;
24207: LD_ADDR_VAR 0 9
24211: PUSH
24212: LD_INT 100
24214: PUSH
24215: LD_INT 50
24217: PUSH
24218: LD_INT 75
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24226: LD_VAR 0 6
24230: PPUSH
24231: CALL_OW 257
24235: PUSH
24236: LD_INT 15
24238: EQUAL
24239: IFFALSE 24260
// points := [ 10 , 5 , 3 ] ;
24241: LD_ADDR_VAR 0 9
24245: PUSH
24246: LD_INT 10
24248: PUSH
24249: LD_INT 5
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24260: LD_VAR 0 6
24264: PPUSH
24265: CALL_OW 257
24269: PUSH
24270: LD_INT 14
24272: EQUAL
24273: IFFALSE 24294
// points := [ 10 , 0 , 0 ] ;
24275: LD_ADDR_VAR 0 9
24279: PUSH
24280: LD_INT 10
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24294: LD_VAR 0 6
24298: PPUSH
24299: CALL_OW 257
24303: PUSH
24304: LD_INT 11
24306: EQUAL
24307: IFFALSE 24328
// points := [ 30 , 10 , 5 ] ;
24309: LD_ADDR_VAR 0 9
24313: PUSH
24314: LD_INT 30
24316: PUSH
24317: LD_INT 10
24319: PUSH
24320: LD_INT 5
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24328: LD_VAR 0 1
24332: PPUSH
24333: LD_INT 5
24335: PPUSH
24336: CALL_OW 321
24340: PUSH
24341: LD_INT 2
24343: EQUAL
24344: IFFALSE 24361
// bpoints := bpoints * 1.8 ;
24346: LD_ADDR_VAR 0 10
24350: PUSH
24351: LD_VAR 0 10
24355: PUSH
24356: LD_REAL  1.80000000000000E+0000
24359: MUL
24360: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24361: LD_VAR 0 6
24365: PPUSH
24366: CALL_OW 257
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 3
24379: PUSH
24380: LD_INT 4
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: IN
24389: IFFALSE 24409
24391: PUSH
24392: LD_VAR 0 1
24396: PPUSH
24397: LD_INT 51
24399: PPUSH
24400: CALL_OW 321
24404: PUSH
24405: LD_INT 2
24407: EQUAL
24408: AND
24409: IFFALSE 24426
// bpoints := bpoints * 1.2 ;
24411: LD_ADDR_VAR 0 10
24415: PUSH
24416: LD_VAR 0 10
24420: PUSH
24421: LD_REAL  1.20000000000000E+0000
24424: MUL
24425: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24426: LD_VAR 0 6
24430: PPUSH
24431: CALL_OW 257
24435: PUSH
24436: LD_INT 5
24438: PUSH
24439: LD_INT 7
24441: PUSH
24442: LD_INT 9
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: IN
24450: IFFALSE 24470
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: LD_INT 52
24460: PPUSH
24461: CALL_OW 321
24465: PUSH
24466: LD_INT 2
24468: EQUAL
24469: AND
24470: IFFALSE 24487
// bpoints := bpoints * 1.5 ;
24472: LD_ADDR_VAR 0 10
24476: PUSH
24477: LD_VAR 0 10
24481: PUSH
24482: LD_REAL  1.50000000000000E+0000
24485: MUL
24486: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24487: LD_VAR 0 1
24491: PPUSH
24492: LD_INT 66
24494: PPUSH
24495: CALL_OW 321
24499: PUSH
24500: LD_INT 2
24502: EQUAL
24503: IFFALSE 24520
// bpoints := bpoints * 1.1 ;
24505: LD_ADDR_VAR 0 10
24509: PUSH
24510: LD_VAR 0 10
24514: PUSH
24515: LD_REAL  1.10000000000000E+0000
24518: MUL
24519: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24520: LD_ADDR_VAR 0 10
24524: PUSH
24525: LD_VAR 0 10
24529: PUSH
24530: LD_VAR 0 6
24534: PPUSH
24535: LD_INT 1
24537: PPUSH
24538: CALL_OW 259
24542: PUSH
24543: LD_REAL  1.15000000000000E+0000
24546: MUL
24547: MUL
24548: ST_TO_ADDR
// end ; unit_vehicle :
24549: GO 25379
24551: LD_INT 2
24553: DOUBLE
24554: EQUAL
24555: IFTRUE 24559
24557: GO 25367
24559: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24560: LD_VAR 0 6
24564: PPUSH
24565: CALL_OW 264
24569: PUSH
24570: LD_INT 2
24572: PUSH
24573: LD_INT 42
24575: PUSH
24576: LD_INT 24
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: LIST
24583: IN
24584: IFFALSE 24605
// points := [ 25 , 5 , 3 ] ;
24586: LD_ADDR_VAR 0 9
24590: PUSH
24591: LD_INT 25
24593: PUSH
24594: LD_INT 5
24596: PUSH
24597: LD_INT 3
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24605: LD_VAR 0 6
24609: PPUSH
24610: CALL_OW 264
24614: PUSH
24615: LD_INT 4
24617: PUSH
24618: LD_INT 43
24620: PUSH
24621: LD_INT 25
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: IN
24629: IFFALSE 24650
// points := [ 40 , 15 , 5 ] ;
24631: LD_ADDR_VAR 0 9
24635: PUSH
24636: LD_INT 40
24638: PUSH
24639: LD_INT 15
24641: PUSH
24642: LD_INT 5
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24650: LD_VAR 0 6
24654: PPUSH
24655: CALL_OW 264
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: IN
24670: IFFALSE 24691
// points := [ 7 , 25 , 8 ] ;
24672: LD_ADDR_VAR 0 9
24676: PUSH
24677: LD_INT 7
24679: PUSH
24680: LD_INT 25
24682: PUSH
24683: LD_INT 8
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24691: LD_VAR 0 6
24695: PPUSH
24696: CALL_OW 264
24700: PUSH
24701: LD_INT 5
24703: PUSH
24704: LD_INT 27
24706: PUSH
24707: LD_INT 44
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: IN
24715: IFFALSE 24736
// points := [ 14 , 50 , 16 ] ;
24717: LD_ADDR_VAR 0 9
24721: PUSH
24722: LD_INT 14
24724: PUSH
24725: LD_INT 50
24727: PUSH
24728: LD_INT 16
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24736: LD_VAR 0 6
24740: PPUSH
24741: CALL_OW 264
24745: PUSH
24746: LD_INT 6
24748: PUSH
24749: LD_INT 46
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: IN
24756: IFFALSE 24777
// points := [ 32 , 120 , 70 ] ;
24758: LD_ADDR_VAR 0 9
24762: PUSH
24763: LD_INT 32
24765: PUSH
24766: LD_INT 120
24768: PUSH
24769: LD_INT 70
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24777: LD_VAR 0 6
24781: PPUSH
24782: CALL_OW 264
24786: PUSH
24787: LD_INT 7
24789: PUSH
24790: LD_INT 28
24792: PUSH
24793: LD_INT 45
24795: PUSH
24796: LD_INT 92
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: IN
24805: IFFALSE 24826
// points := [ 35 , 20 , 45 ] ;
24807: LD_ADDR_VAR 0 9
24811: PUSH
24812: LD_INT 35
24814: PUSH
24815: LD_INT 20
24817: PUSH
24818: LD_INT 45
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24826: LD_VAR 0 6
24830: PPUSH
24831: CALL_OW 264
24835: PUSH
24836: LD_INT 47
24838: PUSH
24839: EMPTY
24840: LIST
24841: IN
24842: IFFALSE 24863
// points := [ 67 , 45 , 75 ] ;
24844: LD_ADDR_VAR 0 9
24848: PUSH
24849: LD_INT 67
24851: PUSH
24852: LD_INT 45
24854: PUSH
24855: LD_INT 75
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24863: LD_VAR 0 6
24867: PPUSH
24868: CALL_OW 264
24872: PUSH
24873: LD_INT 26
24875: PUSH
24876: EMPTY
24877: LIST
24878: IN
24879: IFFALSE 24900
// points := [ 120 , 30 , 80 ] ;
24881: LD_ADDR_VAR 0 9
24885: PUSH
24886: LD_INT 120
24888: PUSH
24889: LD_INT 30
24891: PUSH
24892: LD_INT 80
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: LIST
24899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24900: LD_VAR 0 6
24904: PPUSH
24905: CALL_OW 264
24909: PUSH
24910: LD_INT 22
24912: PUSH
24913: EMPTY
24914: LIST
24915: IN
24916: IFFALSE 24937
// points := [ 40 , 1 , 1 ] ;
24918: LD_ADDR_VAR 0 9
24922: PUSH
24923: LD_INT 40
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24937: LD_VAR 0 6
24941: PPUSH
24942: CALL_OW 264
24946: PUSH
24947: LD_INT 29
24949: PUSH
24950: EMPTY
24951: LIST
24952: IN
24953: IFFALSE 24974
// points := [ 70 , 200 , 400 ] ;
24955: LD_ADDR_VAR 0 9
24959: PUSH
24960: LD_INT 70
24962: PUSH
24963: LD_INT 200
24965: PUSH
24966: LD_INT 400
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24974: LD_VAR 0 6
24978: PPUSH
24979: CALL_OW 264
24983: PUSH
24984: LD_INT 14
24986: PUSH
24987: LD_INT 53
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: IN
24994: IFFALSE 25015
// points := [ 40 , 10 , 20 ] ;
24996: LD_ADDR_VAR 0 9
25000: PUSH
25001: LD_INT 40
25003: PUSH
25004: LD_INT 10
25006: PUSH
25007: LD_INT 20
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25015: LD_VAR 0 6
25019: PPUSH
25020: CALL_OW 264
25024: PUSH
25025: LD_INT 9
25027: PUSH
25028: EMPTY
25029: LIST
25030: IN
25031: IFFALSE 25052
// points := [ 5 , 70 , 20 ] ;
25033: LD_ADDR_VAR 0 9
25037: PUSH
25038: LD_INT 5
25040: PUSH
25041: LD_INT 70
25043: PUSH
25044: LD_INT 20
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25052: LD_VAR 0 6
25056: PPUSH
25057: CALL_OW 264
25061: PUSH
25062: LD_INT 10
25064: PUSH
25065: EMPTY
25066: LIST
25067: IN
25068: IFFALSE 25089
// points := [ 35 , 110 , 70 ] ;
25070: LD_ADDR_VAR 0 9
25074: PUSH
25075: LD_INT 35
25077: PUSH
25078: LD_INT 110
25080: PUSH
25081: LD_INT 70
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25089: LD_VAR 0 6
25093: PPUSH
25094: CALL_OW 265
25098: PUSH
25099: LD_INT 25
25101: EQUAL
25102: IFFALSE 25123
// points := [ 80 , 65 , 100 ] ;
25104: LD_ADDR_VAR 0 9
25108: PUSH
25109: LD_INT 80
25111: PUSH
25112: LD_INT 65
25114: PUSH
25115: LD_INT 100
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25123: LD_VAR 0 6
25127: PPUSH
25128: CALL_OW 263
25132: PUSH
25133: LD_INT 1
25135: EQUAL
25136: IFFALSE 25171
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25138: LD_ADDR_VAR 0 10
25142: PUSH
25143: LD_VAR 0 10
25147: PUSH
25148: LD_VAR 0 6
25152: PPUSH
25153: CALL_OW 311
25157: PPUSH
25158: LD_INT 3
25160: PPUSH
25161: CALL_OW 259
25165: PUSH
25166: LD_INT 4
25168: MUL
25169: MUL
25170: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25171: LD_VAR 0 6
25175: PPUSH
25176: CALL_OW 263
25180: PUSH
25181: LD_INT 2
25183: EQUAL
25184: IFFALSE 25235
// begin j := IsControledBy ( i ) ;
25186: LD_ADDR_VAR 0 7
25190: PUSH
25191: LD_VAR 0 6
25195: PPUSH
25196: CALL_OW 312
25200: ST_TO_ADDR
// if j then
25201: LD_VAR 0 7
25205: IFFALSE 25235
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25207: LD_ADDR_VAR 0 10
25211: PUSH
25212: LD_VAR 0 10
25216: PUSH
25217: LD_VAR 0 7
25221: PPUSH
25222: LD_INT 3
25224: PPUSH
25225: CALL_OW 259
25229: PUSH
25230: LD_INT 3
25232: MUL
25233: MUL
25234: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25235: LD_VAR 0 6
25239: PPUSH
25240: CALL_OW 264
25244: PUSH
25245: LD_INT 5
25247: PUSH
25248: LD_INT 6
25250: PUSH
25251: LD_INT 46
25253: PUSH
25254: LD_INT 44
25256: PUSH
25257: LD_INT 47
25259: PUSH
25260: LD_INT 45
25262: PUSH
25263: LD_INT 28
25265: PUSH
25266: LD_INT 7
25268: PUSH
25269: LD_INT 27
25271: PUSH
25272: LD_INT 29
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: IN
25287: IFFALSE 25307
25289: PUSH
25290: LD_VAR 0 1
25294: PPUSH
25295: LD_INT 52
25297: PPUSH
25298: CALL_OW 321
25302: PUSH
25303: LD_INT 2
25305: EQUAL
25306: AND
25307: IFFALSE 25324
// bpoints := bpoints * 1.2 ;
25309: LD_ADDR_VAR 0 10
25313: PUSH
25314: LD_VAR 0 10
25318: PUSH
25319: LD_REAL  1.20000000000000E+0000
25322: MUL
25323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25324: LD_VAR 0 6
25328: PPUSH
25329: CALL_OW 264
25333: PUSH
25334: LD_INT 6
25336: PUSH
25337: LD_INT 46
25339: PUSH
25340: LD_INT 47
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: LIST
25347: IN
25348: IFFALSE 25365
// bpoints := bpoints * 1.2 ;
25350: LD_ADDR_VAR 0 10
25354: PUSH
25355: LD_VAR 0 10
25359: PUSH
25360: LD_REAL  1.20000000000000E+0000
25363: MUL
25364: ST_TO_ADDR
// end ; unit_building :
25365: GO 25379
25367: LD_INT 3
25369: DOUBLE
25370: EQUAL
25371: IFTRUE 25375
25373: GO 25378
25375: POP
// ; end ;
25376: GO 25379
25378: POP
// for j = 1 to 3 do
25379: LD_ADDR_VAR 0 7
25383: PUSH
25384: DOUBLE
25385: LD_INT 1
25387: DEC
25388: ST_TO_ADDR
25389: LD_INT 3
25391: PUSH
25392: FOR_TO
25393: IFFALSE 25446
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25395: LD_ADDR_VAR 0 5
25399: PUSH
25400: LD_VAR 0 5
25404: PPUSH
25405: LD_VAR 0 7
25409: PPUSH
25410: LD_VAR 0 5
25414: PUSH
25415: LD_VAR 0 7
25419: ARRAY
25420: PUSH
25421: LD_VAR 0 9
25425: PUSH
25426: LD_VAR 0 7
25430: ARRAY
25431: PUSH
25432: LD_VAR 0 10
25436: MUL
25437: PLUS
25438: PPUSH
25439: CALL_OW 1
25443: ST_TO_ADDR
25444: GO 25392
25446: POP
25447: POP
// end ;
25448: GO 23921
25450: POP
25451: POP
// result := Replace ( result , 4 , tmp ) ;
25452: LD_ADDR_VAR 0 5
25456: PUSH
25457: LD_VAR 0 5
25461: PPUSH
25462: LD_INT 4
25464: PPUSH
25465: LD_VAR 0 8
25469: PPUSH
25470: CALL_OW 1
25474: ST_TO_ADDR
// end ;
25475: LD_VAR 0 5
25479: RET
// export function DangerAtRange ( unit , range ) ; begin
25480: LD_INT 0
25482: PPUSH
// if not unit then
25483: LD_VAR 0 1
25487: NOT
25488: IFFALSE 25492
// exit ;
25490: GO 25537
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_VAR 0 1
25501: PPUSH
25502: CALL_OW 255
25506: PPUSH
25507: LD_VAR 0 1
25511: PPUSH
25512: CALL_OW 250
25516: PPUSH
25517: LD_VAR 0 1
25521: PPUSH
25522: CALL_OW 251
25526: PPUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: CALL 23771 0 4
25536: ST_TO_ADDR
// end ;
25537: LD_VAR 0 3
25541: RET
// export function DangerInArea ( side , area ) ; begin
25542: LD_INT 0
25544: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25545: LD_ADDR_VAR 0 3
25549: PUSH
25550: LD_VAR 0 2
25554: PPUSH
25555: LD_INT 81
25557: PUSH
25558: LD_VAR 0 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 70
25571: ST_TO_ADDR
// end ;
25572: LD_VAR 0 3
25576: RET
// export function IsExtension ( b ) ; begin
25577: LD_INT 0
25579: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25580: LD_ADDR_VAR 0 2
25584: PUSH
25585: LD_VAR 0 1
25589: PUSH
25590: LD_INT 23
25592: PUSH
25593: LD_INT 20
25595: PUSH
25596: LD_INT 22
25598: PUSH
25599: LD_INT 17
25601: PUSH
25602: LD_INT 24
25604: PUSH
25605: LD_INT 21
25607: PUSH
25608: LD_INT 19
25610: PUSH
25611: LD_INT 16
25613: PUSH
25614: LD_INT 25
25616: PUSH
25617: LD_INT 18
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: IN
25632: ST_TO_ADDR
// end ;
25633: LD_VAR 0 2
25637: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25638: LD_INT 0
25640: PPUSH
25641: PPUSH
25642: PPUSH
// result := [ ] ;
25643: LD_ADDR_VAR 0 4
25647: PUSH
25648: EMPTY
25649: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25650: LD_ADDR_VAR 0 5
25654: PUSH
25655: LD_VAR 0 2
25659: PPUSH
25660: LD_INT 21
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PPUSH
25670: CALL_OW 70
25674: ST_TO_ADDR
// if not tmp then
25675: LD_VAR 0 5
25679: NOT
25680: IFFALSE 25684
// exit ;
25682: GO 25748
// if checkLink then
25684: LD_VAR 0 3
25688: IFFALSE 25738
// begin for i in tmp do
25690: LD_ADDR_VAR 0 6
25694: PUSH
25695: LD_VAR 0 5
25699: PUSH
25700: FOR_IN
25701: IFFALSE 25736
// if GetBase ( i ) <> base then
25703: LD_VAR 0 6
25707: PPUSH
25708: CALL_OW 274
25712: PUSH
25713: LD_VAR 0 1
25717: NONEQUAL
25718: IFFALSE 25734
// ComLinkToBase ( base , i ) ;
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_VAR 0 6
25729: PPUSH
25730: CALL_OW 169
25734: GO 25700
25736: POP
25737: POP
// end ; result := tmp ;
25738: LD_ADDR_VAR 0 4
25742: PUSH
25743: LD_VAR 0 5
25747: ST_TO_ADDR
// end ;
25748: LD_VAR 0 4
25752: RET
// export function ComComplete ( units , b ) ; var i ; begin
25753: LD_INT 0
25755: PPUSH
25756: PPUSH
// if not units then
25757: LD_VAR 0 1
25761: NOT
25762: IFFALSE 25766
// exit ;
25764: GO 25856
// for i in units do
25766: LD_ADDR_VAR 0 4
25770: PUSH
25771: LD_VAR 0 1
25775: PUSH
25776: FOR_IN
25777: IFFALSE 25854
// if BuildingStatus ( b ) = bs_build then
25779: LD_VAR 0 2
25783: PPUSH
25784: CALL_OW 461
25788: PUSH
25789: LD_INT 1
25791: EQUAL
25792: IFFALSE 25852
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25794: LD_VAR 0 4
25798: PPUSH
25799: LD_STRING h
25801: PUSH
25802: LD_VAR 0 2
25806: PPUSH
25807: CALL_OW 250
25811: PUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 251
25821: PUSH
25822: LD_VAR 0 2
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: PPUSH
25848: CALL_OW 446
25852: GO 25776
25854: POP
25855: POP
// end ;
25856: LD_VAR 0 3
25860: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
25868: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25869: LD_VAR 0 1
25873: NOT
25874: IFTRUE 25891
25876: PUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 263
25886: PUSH
25887: LD_INT 2
25889: NONEQUAL
25890: OR
25891: IFFALSE 25895
// exit ;
25893: GO 26211
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25895: LD_ADDR_VAR 0 6
25899: PUSH
25900: LD_INT 22
25902: PUSH
25903: LD_VAR 0 1
25907: PPUSH
25908: CALL_OW 255
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 2
25919: PUSH
25920: LD_INT 30
25922: PUSH
25923: LD_INT 36
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 34
25932: PUSH
25933: LD_INT 31
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 6
25958: NOT
25959: IFFALSE 25963
// exit ;
25961: GO 26211
// result := [ ] ;
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: EMPTY
25969: ST_TO_ADDR
// for i in tmp do
25970: LD_ADDR_VAR 0 3
25974: PUSH
25975: LD_VAR 0 6
25979: PUSH
25980: FOR_IN
25981: IFFALSE 26052
// begin t := UnitsInside ( i ) ;
25983: LD_ADDR_VAR 0 4
25987: PUSH
25988: LD_VAR 0 3
25992: PPUSH
25993: CALL_OW 313
25997: ST_TO_ADDR
// if t then
25998: LD_VAR 0 4
26002: IFFALSE 26050
// for j in t do
26004: LD_ADDR_VAR 0 7
26008: PUSH
26009: LD_VAR 0 4
26013: PUSH
26014: FOR_IN
26015: IFFALSE 26048
// result := Replace ( result , result + 1 , j ) ;
26017: LD_ADDR_VAR 0 2
26021: PUSH
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_VAR 0 2
26031: PUSH
26032: LD_INT 1
26034: PLUS
26035: PPUSH
26036: LD_VAR 0 7
26040: PPUSH
26041: CALL_OW 1
26045: ST_TO_ADDR
26046: GO 26014
26048: POP
26049: POP
// end ;
26050: GO 25980
26052: POP
26053: POP
// if not result then
26054: LD_VAR 0 2
26058: NOT
26059: IFFALSE 26063
// exit ;
26061: GO 26211
// mech := result [ 1 ] ;
26063: LD_ADDR_VAR 0 5
26067: PUSH
26068: LD_VAR 0 2
26072: PUSH
26073: LD_INT 1
26075: ARRAY
26076: ST_TO_ADDR
// if result > 1 then
26077: LD_VAR 0 2
26081: PUSH
26082: LD_INT 1
26084: GREATER
26085: IFFALSE 26197
// begin for i = 2 to result do
26087: LD_ADDR_VAR 0 3
26091: PUSH
26092: DOUBLE
26093: LD_INT 2
26095: DEC
26096: ST_TO_ADDR
26097: LD_VAR 0 2
26101: PUSH
26102: FOR_TO
26103: IFFALSE 26195
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26105: LD_ADDR_VAR 0 4
26109: PUSH
26110: LD_VAR 0 2
26114: PUSH
26115: LD_VAR 0 3
26119: ARRAY
26120: PPUSH
26121: LD_INT 3
26123: PPUSH
26124: CALL_OW 259
26128: PUSH
26129: LD_VAR 0 2
26133: PUSH
26134: LD_VAR 0 3
26138: ARRAY
26139: PPUSH
26140: CALL_OW 432
26144: MINUS
26145: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26146: LD_VAR 0 4
26150: PUSH
26151: LD_VAR 0 5
26155: PPUSH
26156: LD_INT 3
26158: PPUSH
26159: CALL_OW 259
26163: PUSH
26164: LD_VAR 0 5
26168: PPUSH
26169: CALL_OW 432
26173: MINUS
26174: GREATEREQUAL
26175: IFFALSE 26193
// mech := result [ i ] ;
26177: LD_ADDR_VAR 0 5
26181: PUSH
26182: LD_VAR 0 2
26186: PUSH
26187: LD_VAR 0 3
26191: ARRAY
26192: ST_TO_ADDR
// end ;
26193: GO 26102
26195: POP
26196: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26197: LD_VAR 0 1
26201: PPUSH
26202: LD_VAR 0 5
26206: PPUSH
26207: CALL_OW 135
// end ;
26211: LD_VAR 0 2
26215: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26216: LD_INT 0
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
// result := [ ] ;
26231: LD_ADDR_VAR 0 7
26235: PUSH
26236: EMPTY
26237: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26238: LD_VAR 0 1
26242: PPUSH
26243: CALL_OW 266
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: IN
26258: NOT
26259: IFFALSE 26263
// exit ;
26261: GO 27903
// if name then
26263: LD_VAR 0 3
26267: IFFALSE 26283
// SetBName ( base_dep , name ) ;
26269: LD_VAR 0 1
26273: PPUSH
26274: LD_VAR 0 3
26278: PPUSH
26279: CALL_OW 500
// base := GetBase ( base_dep ) ;
26283: LD_ADDR_VAR 0 15
26287: PUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 274
26297: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26298: LD_ADDR_VAR 0 16
26302: PUSH
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL_OW 255
26312: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26313: LD_ADDR_VAR 0 17
26317: PUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 248
26327: ST_TO_ADDR
// if sources then
26328: LD_VAR 0 5
26332: IFFALSE 26379
// for i = 1 to 3 do
26334: LD_ADDR_VAR 0 8
26338: PUSH
26339: DOUBLE
26340: LD_INT 1
26342: DEC
26343: ST_TO_ADDR
26344: LD_INT 3
26346: PUSH
26347: FOR_TO
26348: IFFALSE 26377
// AddResourceType ( base , i , sources [ i ] ) ;
26350: LD_VAR 0 15
26354: PPUSH
26355: LD_VAR 0 8
26359: PPUSH
26360: LD_VAR 0 5
26364: PUSH
26365: LD_VAR 0 8
26369: ARRAY
26370: PPUSH
26371: CALL_OW 276
26375: GO 26347
26377: POP
26378: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26379: LD_ADDR_VAR 0 18
26383: PUSH
26384: LD_VAR 0 15
26388: PPUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: CALL 25638 0 3
26401: ST_TO_ADDR
// InitHc ;
26402: CALL_OW 19
// InitUc ;
26406: CALL_OW 18
// uc_side := side ;
26410: LD_ADDR_OWVAR 20
26414: PUSH
26415: LD_VAR 0 16
26419: ST_TO_ADDR
// uc_nation := nation ;
26420: LD_ADDR_OWVAR 21
26424: PUSH
26425: LD_VAR 0 17
26429: ST_TO_ADDR
// if buildings then
26430: LD_VAR 0 18
26434: IFFALSE 27762
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26436: LD_ADDR_VAR 0 19
26440: PUSH
26441: LD_VAR 0 18
26445: PPUSH
26446: LD_INT 2
26448: PUSH
26449: LD_INT 30
26451: PUSH
26452: LD_INT 29
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 30
26461: PUSH
26462: LD_INT 30
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: PPUSH
26474: CALL_OW 72
26478: ST_TO_ADDR
// if tmp then
26479: LD_VAR 0 19
26483: IFFALSE 26531
// for i in tmp do
26485: LD_ADDR_VAR 0 8
26489: PUSH
26490: LD_VAR 0 19
26494: PUSH
26495: FOR_IN
26496: IFFALSE 26529
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26498: LD_VAR 0 8
26502: PPUSH
26503: CALL_OW 250
26507: PPUSH
26508: LD_VAR 0 8
26512: PPUSH
26513: CALL_OW 251
26517: PPUSH
26518: LD_VAR 0 16
26522: PPUSH
26523: CALL_OW 441
26527: GO 26495
26529: POP
26530: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26531: LD_VAR 0 18
26535: PPUSH
26536: LD_INT 2
26538: PUSH
26539: LD_INT 30
26541: PUSH
26542: LD_INT 32
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 30
26551: PUSH
26552: LD_INT 33
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: PPUSH
26564: CALL_OW 72
26568: IFFALSE 26656
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26570: LD_ADDR_VAR 0 8
26574: PUSH
26575: LD_VAR 0 18
26579: PPUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 30
26585: PUSH
26586: LD_INT 32
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 30
26595: PUSH
26596: LD_INT 33
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: PPUSH
26608: CALL_OW 72
26612: PUSH
26613: FOR_IN
26614: IFFALSE 26654
// begin if not GetBWeapon ( i ) then
26616: LD_VAR 0 8
26620: PPUSH
26621: CALL_OW 269
26625: NOT
26626: IFFALSE 26652
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26628: LD_VAR 0 8
26632: PPUSH
26633: LD_VAR 0 8
26637: PPUSH
26638: LD_VAR 0 2
26642: PPUSH
26643: CALL 27908 0 2
26647: PPUSH
26648: CALL_OW 431
// end ;
26652: GO 26613
26654: POP
26655: POP
// end ; for i = 1 to personel do
26656: LD_ADDR_VAR 0 8
26660: PUSH
26661: DOUBLE
26662: LD_INT 1
26664: DEC
26665: ST_TO_ADDR
26666: LD_VAR 0 6
26670: PUSH
26671: FOR_TO
26672: IFFALSE 27742
// begin if i > 4 then
26674: LD_VAR 0 8
26678: PUSH
26679: LD_INT 4
26681: GREATER
26682: IFFALSE 26686
// break ;
26684: GO 27742
// case i of 1 :
26686: LD_VAR 0 8
26690: PUSH
26691: LD_INT 1
26693: DOUBLE
26694: EQUAL
26695: IFTRUE 26699
26697: GO 26779
26699: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26700: LD_ADDR_VAR 0 12
26704: PUSH
26705: LD_VAR 0 18
26709: PPUSH
26710: LD_INT 22
26712: PUSH
26713: LD_VAR 0 16
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 58
26724: PUSH
26725: EMPTY
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 30
26733: PUSH
26734: LD_INT 32
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: LD_INT 4
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 30
26753: PUSH
26754: LD_INT 5
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: PPUSH
26772: CALL_OW 72
26776: ST_TO_ADDR
26777: GO 27001
26779: LD_INT 2
26781: DOUBLE
26782: EQUAL
26783: IFTRUE 26787
26785: GO 26849
26787: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26788: LD_ADDR_VAR 0 12
26792: PUSH
26793: LD_VAR 0 18
26797: PPUSH
26798: LD_INT 22
26800: PUSH
26801: LD_VAR 0 16
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 2
26812: PUSH
26813: LD_INT 30
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 30
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PPUSH
26842: CALL_OW 72
26846: ST_TO_ADDR
26847: GO 27001
26849: LD_INT 3
26851: DOUBLE
26852: EQUAL
26853: IFTRUE 26857
26855: GO 26919
26857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26858: LD_ADDR_VAR 0 12
26862: PUSH
26863: LD_VAR 0 18
26867: PPUSH
26868: LD_INT 22
26870: PUSH
26871: LD_VAR 0 16
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: LD_INT 30
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 30
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 72
26916: ST_TO_ADDR
26917: GO 27001
26919: LD_INT 4
26921: DOUBLE
26922: EQUAL
26923: IFTRUE 26927
26925: GO 27000
26927: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26928: LD_ADDR_VAR 0 12
26932: PUSH
26933: LD_VAR 0 18
26937: PPUSH
26938: LD_INT 22
26940: PUSH
26941: LD_VAR 0 16
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: LD_INT 30
26955: PUSH
26956: LD_INT 6
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 30
26965: PUSH
26966: LD_INT 7
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 30
26975: PUSH
26976: LD_INT 8
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 72
26997: ST_TO_ADDR
26998: GO 27001
27000: POP
// if i = 1 then
27001: LD_VAR 0 8
27005: PUSH
27006: LD_INT 1
27008: EQUAL
27009: IFFALSE 27120
// begin tmp := [ ] ;
27011: LD_ADDR_VAR 0 19
27015: PUSH
27016: EMPTY
27017: ST_TO_ADDR
// for j in f do
27018: LD_ADDR_VAR 0 9
27022: PUSH
27023: LD_VAR 0 12
27027: PUSH
27028: FOR_IN
27029: IFFALSE 27102
// if GetBType ( j ) = b_bunker then
27031: LD_VAR 0 9
27035: PPUSH
27036: CALL_OW 266
27040: PUSH
27041: LD_INT 32
27043: EQUAL
27044: IFFALSE 27071
// tmp := Insert ( tmp , 1 , j ) else
27046: LD_ADDR_VAR 0 19
27050: PUSH
27051: LD_VAR 0 19
27055: PPUSH
27056: LD_INT 1
27058: PPUSH
27059: LD_VAR 0 9
27063: PPUSH
27064: CALL_OW 2
27068: ST_TO_ADDR
27069: GO 27100
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27071: LD_ADDR_VAR 0 19
27075: PUSH
27076: LD_VAR 0 19
27080: PPUSH
27081: LD_VAR 0 19
27085: PUSH
27086: LD_INT 1
27088: PLUS
27089: PPUSH
27090: LD_VAR 0 9
27094: PPUSH
27095: CALL_OW 2
27099: ST_TO_ADDR
27100: GO 27028
27102: POP
27103: POP
// if tmp then
27104: LD_VAR 0 19
27108: IFFALSE 27120
// f := tmp ;
27110: LD_ADDR_VAR 0 12
27114: PUSH
27115: LD_VAR 0 19
27119: ST_TO_ADDR
// end ; x := personel [ i ] ;
27120: LD_ADDR_VAR 0 13
27124: PUSH
27125: LD_VAR 0 6
27129: PUSH
27130: LD_VAR 0 8
27134: ARRAY
27135: ST_TO_ADDR
// if x = - 1 then
27136: LD_VAR 0 13
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: EQUAL
27145: IFFALSE 27356
// begin for j in f do
27147: LD_ADDR_VAR 0 9
27151: PUSH
27152: LD_VAR 0 12
27156: PUSH
27157: FOR_IN
27158: IFFALSE 27352
// repeat InitHc ;
27160: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27164: LD_VAR 0 9
27168: PPUSH
27169: CALL_OW 266
27173: PUSH
27174: LD_INT 5
27176: EQUAL
27177: IFFALSE 27247
// begin if UnitsInside ( j ) < 3 then
27179: LD_VAR 0 9
27183: PPUSH
27184: CALL_OW 313
27188: PUSH
27189: LD_INT 3
27191: LESS
27192: IFFALSE 27228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27194: LD_INT 0
27196: PPUSH
27197: LD_INT 5
27199: PUSH
27200: LD_INT 8
27202: PUSH
27203: LD_INT 9
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: LD_VAR 0 17
27215: ARRAY
27216: PPUSH
27217: LD_VAR 0 4
27221: PPUSH
27222: CALL_OW 380
27226: GO 27245
// PrepareHuman ( false , i , skill ) ;
27228: LD_INT 0
27230: PPUSH
27231: LD_VAR 0 8
27235: PPUSH
27236: LD_VAR 0 4
27240: PPUSH
27241: CALL_OW 380
// end else
27245: GO 27264
// PrepareHuman ( false , i , skill ) ;
27247: LD_INT 0
27249: PPUSH
27250: LD_VAR 0 8
27254: PPUSH
27255: LD_VAR 0 4
27259: PPUSH
27260: CALL_OW 380
// un := CreateHuman ;
27264: LD_ADDR_VAR 0 14
27268: PUSH
27269: CALL_OW 44
27273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27274: LD_ADDR_VAR 0 7
27278: PUSH
27279: LD_VAR 0 7
27283: PPUSH
27284: LD_INT 1
27286: PPUSH
27287: LD_VAR 0 14
27291: PPUSH
27292: CALL_OW 2
27296: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27297: LD_VAR 0 14
27301: PPUSH
27302: LD_VAR 0 9
27306: PPUSH
27307: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27311: LD_VAR 0 9
27315: PPUSH
27316: CALL_OW 313
27320: PUSH
27321: LD_INT 6
27323: EQUAL
27324: IFTRUE 27348
27326: PUSH
27327: LD_VAR 0 9
27331: PPUSH
27332: CALL_OW 266
27336: PUSH
27337: LD_INT 32
27339: PUSH
27340: LD_INT 31
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: IN
27347: OR
27348: IFFALSE 27160
27350: GO 27157
27352: POP
27353: POP
// end else
27354: GO 27740
// for j = 1 to x do
27356: LD_ADDR_VAR 0 9
27360: PUSH
27361: DOUBLE
27362: LD_INT 1
27364: DEC
27365: ST_TO_ADDR
27366: LD_VAR 0 13
27370: PUSH
27371: FOR_TO
27372: IFFALSE 27738
// begin InitHc ;
27374: CALL_OW 19
// if not f then
27378: LD_VAR 0 12
27382: NOT
27383: IFFALSE 27472
// begin PrepareHuman ( false , i , skill ) ;
27385: LD_INT 0
27387: PPUSH
27388: LD_VAR 0 8
27392: PPUSH
27393: LD_VAR 0 4
27397: PPUSH
27398: CALL_OW 380
// un := CreateHuman ;
27402: LD_ADDR_VAR 0 14
27406: PUSH
27407: CALL_OW 44
27411: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27412: LD_ADDR_VAR 0 7
27416: PUSH
27417: LD_VAR 0 7
27421: PPUSH
27422: LD_INT 1
27424: PPUSH
27425: LD_VAR 0 14
27429: PPUSH
27430: CALL_OW 2
27434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27435: LD_VAR 0 14
27439: PPUSH
27440: LD_VAR 0 1
27444: PPUSH
27445: CALL_OW 250
27449: PPUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL_OW 251
27459: PPUSH
27460: LD_INT 10
27462: PPUSH
27463: LD_INT 0
27465: PPUSH
27466: CALL_OW 50
// continue ;
27470: GO 27371
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27472: LD_VAR 0 12
27476: PUSH
27477: LD_INT 1
27479: ARRAY
27480: PPUSH
27481: CALL_OW 313
27485: IFFALSE 27513
27487: PUSH
27488: LD_VAR 0 12
27492: PUSH
27493: LD_INT 1
27495: ARRAY
27496: PPUSH
27497: CALL_OW 266
27501: PUSH
27502: LD_INT 32
27504: PUSH
27505: LD_INT 31
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: IN
27512: AND
27513: IFTRUE 27534
27515: PUSH
27516: LD_VAR 0 12
27520: PUSH
27521: LD_INT 1
27523: ARRAY
27524: PPUSH
27525: CALL_OW 313
27529: PUSH
27530: LD_INT 6
27532: EQUAL
27533: OR
27534: IFFALSE 27554
// f := Delete ( f , 1 ) ;
27536: LD_ADDR_VAR 0 12
27540: PUSH
27541: LD_VAR 0 12
27545: PPUSH
27546: LD_INT 1
27548: PPUSH
27549: CALL_OW 3
27553: ST_TO_ADDR
// if not f then
27554: LD_VAR 0 12
27558: NOT
27559: IFFALSE 27577
// begin x := x + 2 ;
27561: LD_ADDR_VAR 0 13
27565: PUSH
27566: LD_VAR 0 13
27570: PUSH
27571: LD_INT 2
27573: PLUS
27574: ST_TO_ADDR
// continue ;
27575: GO 27371
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27577: LD_VAR 0 12
27581: PUSH
27582: LD_INT 1
27584: ARRAY
27585: PPUSH
27586: CALL_OW 266
27590: PUSH
27591: LD_INT 5
27593: EQUAL
27594: IFFALSE 27668
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27596: LD_VAR 0 12
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: PPUSH
27605: CALL_OW 313
27609: PUSH
27610: LD_INT 3
27612: LESS
27613: IFFALSE 27649
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27615: LD_INT 0
27617: PPUSH
27618: LD_INT 5
27620: PUSH
27621: LD_INT 8
27623: PUSH
27624: LD_INT 9
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: PUSH
27632: LD_VAR 0 17
27636: ARRAY
27637: PPUSH
27638: LD_VAR 0 4
27642: PPUSH
27643: CALL_OW 380
27647: GO 27666
// PrepareHuman ( false , i , skill ) ;
27649: LD_INT 0
27651: PPUSH
27652: LD_VAR 0 8
27656: PPUSH
27657: LD_VAR 0 4
27661: PPUSH
27662: CALL_OW 380
// end else
27666: GO 27685
// PrepareHuman ( false , i , skill ) ;
27668: LD_INT 0
27670: PPUSH
27671: LD_VAR 0 8
27675: PPUSH
27676: LD_VAR 0 4
27680: PPUSH
27681: CALL_OW 380
// un := CreateHuman ;
27685: LD_ADDR_VAR 0 14
27689: PUSH
27690: CALL_OW 44
27694: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27695: LD_ADDR_VAR 0 7
27699: PUSH
27700: LD_VAR 0 7
27704: PPUSH
27705: LD_INT 1
27707: PPUSH
27708: LD_VAR 0 14
27712: PPUSH
27713: CALL_OW 2
27717: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27718: LD_VAR 0 14
27722: PPUSH
27723: LD_VAR 0 12
27727: PUSH
27728: LD_INT 1
27730: ARRAY
27731: PPUSH
27732: CALL_OW 52
// end ;
27736: GO 27371
27738: POP
27739: POP
// end ;
27740: GO 26671
27742: POP
27743: POP
// result := result ^ buildings ;
27744: LD_ADDR_VAR 0 7
27748: PUSH
27749: LD_VAR 0 7
27753: PUSH
27754: LD_VAR 0 18
27758: ADD
27759: ST_TO_ADDR
// end else
27760: GO 27903
// begin for i = 1 to personel do
27762: LD_ADDR_VAR 0 8
27766: PUSH
27767: DOUBLE
27768: LD_INT 1
27770: DEC
27771: ST_TO_ADDR
27772: LD_VAR 0 6
27776: PUSH
27777: FOR_TO
27778: IFFALSE 27901
// begin if i > 4 then
27780: LD_VAR 0 8
27784: PUSH
27785: LD_INT 4
27787: GREATER
27788: IFFALSE 27792
// break ;
27790: GO 27901
// x := personel [ i ] ;
27792: LD_ADDR_VAR 0 13
27796: PUSH
27797: LD_VAR 0 6
27801: PUSH
27802: LD_VAR 0 8
27806: ARRAY
27807: ST_TO_ADDR
// if x = - 1 then
27808: LD_VAR 0 13
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: EQUAL
27817: IFFALSE 27821
// continue ;
27819: GO 27777
// PrepareHuman ( false , i , skill ) ;
27821: LD_INT 0
27823: PPUSH
27824: LD_VAR 0 8
27828: PPUSH
27829: LD_VAR 0 4
27833: PPUSH
27834: CALL_OW 380
// un := CreateHuman ;
27838: LD_ADDR_VAR 0 14
27842: PUSH
27843: CALL_OW 44
27847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27848: LD_VAR 0 14
27852: PPUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: CALL_OW 250
27862: PPUSH
27863: LD_VAR 0 1
27867: PPUSH
27868: CALL_OW 251
27872: PPUSH
27873: LD_INT 10
27875: PPUSH
27876: LD_INT 0
27878: PPUSH
27879: CALL_OW 50
// result := result ^ un ;
27883: LD_ADDR_VAR 0 7
27887: PUSH
27888: LD_VAR 0 7
27892: PUSH
27893: LD_VAR 0 14
27897: ADD
27898: ST_TO_ADDR
// end ;
27899: GO 27777
27901: POP
27902: POP
// end ; end ;
27903: LD_VAR 0 7
27907: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27908: LD_INT 0
27910: PPUSH
27911: PPUSH
27912: PPUSH
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
// result := false ;
27926: LD_ADDR_VAR 0 3
27930: PUSH
27931: LD_INT 0
27933: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27934: LD_VAR 0 1
27938: NOT
27939: IFTRUE 27964
27941: PUSH
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 266
27951: PUSH
27952: LD_INT 32
27954: PUSH
27955: LD_INT 33
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: IN
27962: NOT
27963: OR
27964: IFFALSE 27968
// exit ;
27966: GO 29103
// nat := GetNation ( tower ) ;
27968: LD_ADDR_VAR 0 12
27972: PUSH
27973: LD_VAR 0 1
27977: PPUSH
27978: CALL_OW 248
27982: ST_TO_ADDR
// side := GetSide ( tower ) ;
27983: LD_ADDR_VAR 0 16
27987: PUSH
27988: LD_VAR 0 1
27992: PPUSH
27993: CALL_OW 255
27997: ST_TO_ADDR
// x := GetX ( tower ) ;
27998: LD_ADDR_VAR 0 10
28002: PUSH
28003: LD_VAR 0 1
28007: PPUSH
28008: CALL_OW 250
28012: ST_TO_ADDR
// y := GetY ( tower ) ;
28013: LD_ADDR_VAR 0 11
28017: PUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL_OW 251
28027: ST_TO_ADDR
// if not x or not y then
28028: LD_VAR 0 10
28032: NOT
28033: IFTRUE 28042
28035: PUSH
28036: LD_VAR 0 11
28040: NOT
28041: OR
28042: IFFALSE 28046
// exit ;
28044: GO 29103
// weapon := 0 ;
28046: LD_ADDR_VAR 0 18
28050: PUSH
28051: LD_INT 0
28053: ST_TO_ADDR
// fac_list := [ ] ;
28054: LD_ADDR_VAR 0 17
28058: PUSH
28059: EMPTY
28060: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28061: LD_ADDR_VAR 0 6
28065: PUSH
28066: LD_VAR 0 1
28070: PPUSH
28071: CALL_OW 274
28075: PPUSH
28076: LD_VAR 0 2
28080: PPUSH
28081: LD_INT 0
28083: PPUSH
28084: CALL 25638 0 3
28088: PPUSH
28089: LD_INT 30
28091: PUSH
28092: LD_INT 3
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 72
28103: ST_TO_ADDR
// if not factories then
28104: LD_VAR 0 6
28108: NOT
28109: IFFALSE 28113
// exit ;
28111: GO 29103
// for i in factories do
28113: LD_ADDR_VAR 0 8
28117: PUSH
28118: LD_VAR 0 6
28122: PUSH
28123: FOR_IN
28124: IFFALSE 28149
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28126: LD_ADDR_VAR 0 17
28130: PUSH
28131: LD_VAR 0 17
28135: PUSH
28136: LD_VAR 0 8
28140: PPUSH
28141: CALL_OW 478
28145: UNION
28146: ST_TO_ADDR
28147: GO 28123
28149: POP
28150: POP
// if not fac_list then
28151: LD_VAR 0 17
28155: NOT
28156: IFFALSE 28160
// exit ;
28158: GO 29103
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28160: LD_ADDR_VAR 0 5
28164: PUSH
28165: LD_INT 4
28167: PUSH
28168: LD_INT 5
28170: PUSH
28171: LD_INT 9
28173: PUSH
28174: LD_INT 10
28176: PUSH
28177: LD_INT 6
28179: PUSH
28180: LD_INT 7
28182: PUSH
28183: LD_INT 11
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 27
28197: PUSH
28198: LD_INT 28
28200: PUSH
28201: LD_INT 26
28203: PUSH
28204: LD_INT 30
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 43
28215: PUSH
28216: LD_INT 44
28218: PUSH
28219: LD_INT 46
28221: PUSH
28222: LD_INT 45
28224: PUSH
28225: LD_INT 47
28227: PUSH
28228: LD_INT 49
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: PUSH
28244: LD_VAR 0 12
28248: ARRAY
28249: ST_TO_ADDR
// list := list isect fac_list ;
28250: LD_ADDR_VAR 0 5
28254: PUSH
28255: LD_VAR 0 5
28259: PUSH
28260: LD_VAR 0 17
28264: ISECT
28265: ST_TO_ADDR
// if not list then
28266: LD_VAR 0 5
28270: NOT
28271: IFFALSE 28275
// exit ;
28273: GO 29103
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28275: LD_VAR 0 12
28279: PUSH
28280: LD_INT 3
28282: EQUAL
28283: IFFALSE 28295
28285: PUSH
28286: LD_INT 49
28288: PUSH
28289: LD_VAR 0 5
28293: IN
28294: AND
28295: IFFALSE 28315
28297: PUSH
28298: LD_INT 31
28300: PPUSH
28301: LD_VAR 0 16
28305: PPUSH
28306: CALL_OW 321
28310: PUSH
28311: LD_INT 2
28313: EQUAL
28314: AND
28315: IFFALSE 28375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28317: LD_INT 22
28319: PUSH
28320: LD_VAR 0 16
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 35
28331: PUSH
28332: LD_INT 49
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 91
28341: PUSH
28342: LD_VAR 0 1
28346: PUSH
28347: LD_INT 10
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: PPUSH
28360: CALL_OW 69
28364: NOT
28365: IFFALSE 28375
// weapon := ru_time_lapser ;
28367: LD_ADDR_VAR 0 18
28371: PUSH
28372: LD_INT 49
28374: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28375: LD_VAR 0 12
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: IN
28390: IFFALSE 28414
28392: PUSH
28393: LD_INT 11
28395: PUSH
28396: LD_VAR 0 5
28400: IN
28401: IFTRUE 28413
28403: PUSH
28404: LD_INT 30
28406: PUSH
28407: LD_VAR 0 5
28411: IN
28412: OR
28413: AND
28414: IFFALSE 28434
28416: PUSH
28417: LD_INT 6
28419: PPUSH
28420: LD_VAR 0 16
28424: PPUSH
28425: CALL_OW 321
28429: PUSH
28430: LD_INT 2
28432: EQUAL
28433: AND
28434: IFFALSE 28601
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28436: LD_INT 22
28438: PUSH
28439: LD_VAR 0 16
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 35
28453: PUSH
28454: LD_INT 11
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 35
28463: PUSH
28464: LD_INT 30
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 91
28478: PUSH
28479: LD_VAR 0 1
28483: PUSH
28484: LD_INT 18
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: PPUSH
28497: CALL_OW 69
28501: NOT
28502: IFFALSE 28578
28504: PUSH
28505: LD_INT 22
28507: PUSH
28508: LD_VAR 0 16
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: LD_INT 30
28522: PUSH
28523: LD_INT 32
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 30
28532: PUSH
28533: LD_INT 33
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 91
28547: PUSH
28548: LD_VAR 0 1
28552: PUSH
28553: LD_INT 12
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: PPUSH
28569: CALL_OW 69
28573: PUSH
28574: LD_INT 2
28576: GREATER
28577: AND
28578: IFFALSE 28601
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28580: LD_ADDR_VAR 0 18
28584: PUSH
28585: LD_INT 11
28587: PUSH
28588: LD_INT 30
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_VAR 0 12
28599: ARRAY
28600: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28601: LD_VAR 0 18
28605: NOT
28606: IFFALSE 28626
28608: PUSH
28609: LD_INT 40
28611: PPUSH
28612: LD_VAR 0 16
28616: PPUSH
28617: CALL_OW 321
28621: PUSH
28622: LD_INT 2
28624: EQUAL
28625: AND
28626: IFFALSE 28662
28628: PUSH
28629: LD_INT 7
28631: PUSH
28632: LD_VAR 0 5
28636: IN
28637: IFTRUE 28649
28639: PUSH
28640: LD_INT 28
28642: PUSH
28643: LD_VAR 0 5
28647: IN
28648: OR
28649: IFTRUE 28661
28651: PUSH
28652: LD_INT 45
28654: PUSH
28655: LD_VAR 0 5
28659: IN
28660: OR
28661: AND
28662: IFFALSE 28916
// begin hex := GetHexInfo ( x , y ) ;
28664: LD_ADDR_VAR 0 4
28668: PUSH
28669: LD_VAR 0 10
28673: PPUSH
28674: LD_VAR 0 11
28678: PPUSH
28679: CALL_OW 546
28683: ST_TO_ADDR
// if hex [ 1 ] then
28684: LD_VAR 0 4
28688: PUSH
28689: LD_INT 1
28691: ARRAY
28692: IFFALSE 28696
// exit ;
28694: GO 29103
// height := hex [ 2 ] ;
28696: LD_ADDR_VAR 0 15
28700: PUSH
28701: LD_VAR 0 4
28705: PUSH
28706: LD_INT 2
28708: ARRAY
28709: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28710: LD_ADDR_VAR 0 14
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: LD_INT 5
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: ST_TO_ADDR
// for i in tmp do
28733: LD_ADDR_VAR 0 8
28737: PUSH
28738: LD_VAR 0 14
28742: PUSH
28743: FOR_IN
28744: IFFALSE 28914
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28746: LD_ADDR_VAR 0 9
28750: PUSH
28751: LD_VAR 0 10
28755: PPUSH
28756: LD_VAR 0 8
28760: PPUSH
28761: LD_INT 5
28763: PPUSH
28764: CALL_OW 272
28768: PUSH
28769: LD_VAR 0 11
28773: PPUSH
28774: LD_VAR 0 8
28778: PPUSH
28779: LD_INT 5
28781: PPUSH
28782: CALL_OW 273
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28791: LD_VAR 0 9
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: PPUSH
28800: LD_VAR 0 9
28804: PUSH
28805: LD_INT 2
28807: ARRAY
28808: PPUSH
28809: CALL_OW 488
28813: IFFALSE 28912
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28815: LD_ADDR_VAR 0 4
28819: PUSH
28820: LD_VAR 0 9
28824: PUSH
28825: LD_INT 1
28827: ARRAY
28828: PPUSH
28829: LD_VAR 0 9
28833: PUSH
28834: LD_INT 2
28836: ARRAY
28837: PPUSH
28838: CALL_OW 546
28842: ST_TO_ADDR
// if hex [ 1 ] then
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 1
28850: ARRAY
28851: IFFALSE 28855
// continue ;
28853: GO 28743
// h := hex [ 2 ] ;
28855: LD_ADDR_VAR 0 13
28859: PUSH
28860: LD_VAR 0 4
28864: PUSH
28865: LD_INT 2
28867: ARRAY
28868: ST_TO_ADDR
// if h + 7 < height then
28869: LD_VAR 0 13
28873: PUSH
28874: LD_INT 7
28876: PLUS
28877: PUSH
28878: LD_VAR 0 15
28882: LESS
28883: IFFALSE 28912
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28885: LD_ADDR_VAR 0 18
28889: PUSH
28890: LD_INT 7
28892: PUSH
28893: LD_INT 28
28895: PUSH
28896: LD_INT 45
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: PUSH
28904: LD_VAR 0 12
28908: ARRAY
28909: ST_TO_ADDR
// break ;
28910: GO 28914
// end ; end ; end ;
28912: GO 28743
28914: POP
28915: POP
// end ; if not weapon then
28916: LD_VAR 0 18
28920: NOT
28921: IFFALSE 28981
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28923: LD_ADDR_VAR 0 5
28927: PUSH
28928: LD_VAR 0 5
28932: PUSH
28933: LD_INT 11
28935: PUSH
28936: LD_INT 30
28938: PUSH
28939: LD_INT 49
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: DIFF
28947: ST_TO_ADDR
// if not list then
28948: LD_VAR 0 5
28952: NOT
28953: IFFALSE 28957
// exit ;
28955: GO 29103
// weapon := list [ rand ( 1 , list ) ] ;
28957: LD_ADDR_VAR 0 18
28961: PUSH
28962: LD_VAR 0 5
28966: PUSH
28967: LD_INT 1
28969: PPUSH
28970: LD_VAR 0 5
28974: PPUSH
28975: CALL_OW 12
28979: ARRAY
28980: ST_TO_ADDR
// end ; if weapon then
28981: LD_VAR 0 18
28985: IFFALSE 29103
// begin tmp := CostOfWeapon ( weapon ) ;
28987: LD_ADDR_VAR 0 14
28991: PUSH
28992: LD_VAR 0 18
28996: PPUSH
28997: CALL_OW 451
29001: ST_TO_ADDR
// j := GetBase ( tower ) ;
29002: LD_ADDR_VAR 0 9
29006: PUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL_OW 274
29016: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29017: LD_VAR 0 9
29021: PPUSH
29022: LD_INT 1
29024: PPUSH
29025: CALL_OW 275
29029: PUSH
29030: LD_VAR 0 14
29034: PUSH
29035: LD_INT 1
29037: ARRAY
29038: GREATEREQUAL
29039: IFFALSE 29065
29041: PUSH
29042: LD_VAR 0 9
29046: PPUSH
29047: LD_INT 2
29049: PPUSH
29050: CALL_OW 275
29054: PUSH
29055: LD_VAR 0 14
29059: PUSH
29060: LD_INT 2
29062: ARRAY
29063: GREATEREQUAL
29064: AND
29065: IFFALSE 29091
29067: PUSH
29068: LD_VAR 0 9
29072: PPUSH
29073: LD_INT 3
29075: PPUSH
29076: CALL_OW 275
29080: PUSH
29081: LD_VAR 0 14
29085: PUSH
29086: LD_INT 3
29088: ARRAY
29089: GREATEREQUAL
29090: AND
29091: IFFALSE 29103
// result := weapon ;
29093: LD_ADDR_VAR 0 3
29097: PUSH
29098: LD_VAR 0 18
29102: ST_TO_ADDR
// end ; end ;
29103: LD_VAR 0 3
29107: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29108: LD_INT 0
29110: PPUSH
29111: PPUSH
// result := true ;
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_INT 1
29119: ST_TO_ADDR
// if array1 = array2 then
29120: LD_VAR 0 1
29124: PUSH
29125: LD_VAR 0 2
29129: EQUAL
29130: IFFALSE 29190
// begin for i = 1 to array1 do
29132: LD_ADDR_VAR 0 4
29136: PUSH
29137: DOUBLE
29138: LD_INT 1
29140: DEC
29141: ST_TO_ADDR
29142: LD_VAR 0 1
29146: PUSH
29147: FOR_TO
29148: IFFALSE 29186
// if array1 [ i ] <> array2 [ i ] then
29150: LD_VAR 0 1
29154: PUSH
29155: LD_VAR 0 4
29159: ARRAY
29160: PUSH
29161: LD_VAR 0 2
29165: PUSH
29166: LD_VAR 0 4
29170: ARRAY
29171: NONEQUAL
29172: IFFALSE 29184
// begin result := false ;
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 0
29181: ST_TO_ADDR
// break ;
29182: GO 29186
// end ;
29184: GO 29147
29186: POP
29187: POP
// end else
29188: GO 29198
// result := false ;
29190: LD_ADDR_VAR 0 3
29194: PUSH
29195: LD_INT 0
29197: ST_TO_ADDR
// end ;
29198: LD_VAR 0 3
29202: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
// if not array1 or not array2 then
29207: LD_VAR 0 1
29211: NOT
29212: IFTRUE 29221
29214: PUSH
29215: LD_VAR 0 2
29219: NOT
29220: OR
29221: IFFALSE 29225
// exit ;
29223: GO 29289
// result := true ;
29225: LD_ADDR_VAR 0 3
29229: PUSH
29230: LD_INT 1
29232: ST_TO_ADDR
// for i = 1 to array1 do
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: DOUBLE
29239: LD_INT 1
29241: DEC
29242: ST_TO_ADDR
29243: LD_VAR 0 1
29247: PUSH
29248: FOR_TO
29249: IFFALSE 29287
// if array1 [ i ] <> array2 [ i ] then
29251: LD_VAR 0 1
29255: PUSH
29256: LD_VAR 0 4
29260: ARRAY
29261: PUSH
29262: LD_VAR 0 2
29266: PUSH
29267: LD_VAR 0 4
29271: ARRAY
29272: NONEQUAL
29273: IFFALSE 29285
// begin result := false ;
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: LD_INT 0
29282: ST_TO_ADDR
// break ;
29283: GO 29287
// end ;
29285: GO 29248
29287: POP
29288: POP
// end ;
29289: LD_VAR 0 3
29293: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29294: LD_INT 0
29296: PPUSH
29297: PPUSH
29298: PPUSH
// pom := GetBase ( fac ) ;
29299: LD_ADDR_VAR 0 5
29303: PUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 274
29313: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29314: LD_ADDR_VAR 0 4
29318: PUSH
29319: LD_VAR 0 2
29323: PUSH
29324: LD_INT 1
29326: ARRAY
29327: PPUSH
29328: LD_VAR 0 2
29332: PUSH
29333: LD_INT 2
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 2
29341: PUSH
29342: LD_INT 3
29344: ARRAY
29345: PPUSH
29346: LD_VAR 0 2
29350: PUSH
29351: LD_INT 4
29353: ARRAY
29354: PPUSH
29355: CALL_OW 449
29359: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: LD_VAR 0 5
29369: PPUSH
29370: LD_INT 1
29372: PPUSH
29373: CALL_OW 275
29377: PUSH
29378: LD_VAR 0 4
29382: PUSH
29383: LD_INT 1
29385: ARRAY
29386: GREATEREQUAL
29387: IFFALSE 29413
29389: PUSH
29390: LD_VAR 0 5
29394: PPUSH
29395: LD_INT 2
29397: PPUSH
29398: CALL_OW 275
29402: PUSH
29403: LD_VAR 0 4
29407: PUSH
29408: LD_INT 2
29410: ARRAY
29411: GREATEREQUAL
29412: AND
29413: IFFALSE 29439
29415: PUSH
29416: LD_VAR 0 5
29420: PPUSH
29421: LD_INT 3
29423: PPUSH
29424: CALL_OW 275
29428: PUSH
29429: LD_VAR 0 4
29433: PUSH
29434: LD_INT 3
29436: ARRAY
29437: GREATEREQUAL
29438: AND
29439: ST_TO_ADDR
// end ;
29440: LD_VAR 0 3
29444: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29445: LD_INT 0
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
// pom := GetBase ( building ) ;
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 274
29465: ST_TO_ADDR
// if not pom then
29466: LD_VAR 0 3
29470: NOT
29471: IFFALSE 29475
// exit ;
29473: GO 29649
// btype := GetBType ( building ) ;
29475: LD_ADDR_VAR 0 5
29479: PUSH
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL_OW 266
29489: ST_TO_ADDR
// if btype = b_armoury then
29490: LD_VAR 0 5
29494: PUSH
29495: LD_INT 4
29497: EQUAL
29498: IFFALSE 29508
// btype := b_barracks ;
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_INT 5
29507: ST_TO_ADDR
// if btype = b_depot then
29508: LD_VAR 0 5
29512: PUSH
29513: LD_INT 0
29515: EQUAL
29516: IFFALSE 29526
// btype := b_warehouse ;
29518: LD_ADDR_VAR 0 5
29522: PUSH
29523: LD_INT 1
29525: ST_TO_ADDR
// if btype = b_workshop then
29526: LD_VAR 0 5
29530: PUSH
29531: LD_INT 2
29533: EQUAL
29534: IFFALSE 29544
// btype := b_factory ;
29536: LD_ADDR_VAR 0 5
29540: PUSH
29541: LD_INT 3
29543: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29544: LD_ADDR_VAR 0 4
29548: PUSH
29549: LD_VAR 0 5
29553: PPUSH
29554: LD_VAR 0 1
29558: PPUSH
29559: CALL_OW 248
29563: PPUSH
29564: CALL_OW 450
29568: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29569: LD_ADDR_VAR 0 2
29573: PUSH
29574: LD_VAR 0 3
29578: PPUSH
29579: LD_INT 1
29581: PPUSH
29582: CALL_OW 275
29586: PUSH
29587: LD_VAR 0 4
29591: PUSH
29592: LD_INT 1
29594: ARRAY
29595: GREATEREQUAL
29596: IFFALSE 29622
29598: PUSH
29599: LD_VAR 0 3
29603: PPUSH
29604: LD_INT 2
29606: PPUSH
29607: CALL_OW 275
29611: PUSH
29612: LD_VAR 0 4
29616: PUSH
29617: LD_INT 2
29619: ARRAY
29620: GREATEREQUAL
29621: AND
29622: IFFALSE 29648
29624: PUSH
29625: LD_VAR 0 3
29629: PPUSH
29630: LD_INT 3
29632: PPUSH
29633: CALL_OW 275
29637: PUSH
29638: LD_VAR 0 4
29642: PUSH
29643: LD_INT 3
29645: ARRAY
29646: GREATEREQUAL
29647: AND
29648: ST_TO_ADDR
// end ;
29649: LD_VAR 0 2
29653: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
29658: PPUSH
// pom := GetBase ( building ) ;
29659: LD_ADDR_VAR 0 4
29663: PUSH
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 274
29673: ST_TO_ADDR
// if not pom then
29674: LD_VAR 0 4
29678: NOT
29679: IFFALSE 29683
// exit ;
29681: GO 29788
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29683: LD_ADDR_VAR 0 5
29687: PUSH
29688: LD_VAR 0 2
29692: PPUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 248
29702: PPUSH
29703: CALL_OW 450
29707: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: LD_VAR 0 4
29717: PPUSH
29718: LD_INT 1
29720: PPUSH
29721: CALL_OW 275
29725: PUSH
29726: LD_VAR 0 5
29730: PUSH
29731: LD_INT 1
29733: ARRAY
29734: GREATEREQUAL
29735: IFFALSE 29761
29737: PUSH
29738: LD_VAR 0 4
29742: PPUSH
29743: LD_INT 2
29745: PPUSH
29746: CALL_OW 275
29750: PUSH
29751: LD_VAR 0 5
29755: PUSH
29756: LD_INT 2
29758: ARRAY
29759: GREATEREQUAL
29760: AND
29761: IFFALSE 29787
29763: PUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: LD_INT 3
29771: PPUSH
29772: CALL_OW 275
29776: PUSH
29777: LD_VAR 0 5
29781: PUSH
29782: LD_INT 3
29784: ARRAY
29785: GREATEREQUAL
29786: AND
29787: ST_TO_ADDR
// end ;
29788: LD_VAR 0 3
29792: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
// result := false ;
29806: LD_ADDR_VAR 0 8
29810: PUSH
29811: LD_INT 0
29813: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29814: LD_VAR 0 5
29818: NOT
29819: IFTRUE 29828
29821: PUSH
29822: LD_VAR 0 1
29826: NOT
29827: OR
29828: IFTRUE 29837
29830: PUSH
29831: LD_VAR 0 2
29835: NOT
29836: OR
29837: IFTRUE 29846
29839: PUSH
29840: LD_VAR 0 3
29844: NOT
29845: OR
29846: IFFALSE 29850
// exit ;
29848: GO 30676
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29850: LD_ADDR_VAR 0 14
29854: PUSH
29855: LD_VAR 0 1
29859: PPUSH
29860: LD_VAR 0 2
29864: PPUSH
29865: LD_VAR 0 3
29869: PPUSH
29870: LD_VAR 0 4
29874: PPUSH
29875: LD_VAR 0 5
29879: PUSH
29880: LD_INT 1
29882: ARRAY
29883: PPUSH
29884: CALL_OW 248
29888: PPUSH
29889: LD_INT 0
29891: PPUSH
29892: CALL 31957 0 6
29896: ST_TO_ADDR
// if not hexes then
29897: LD_VAR 0 14
29901: NOT
29902: IFFALSE 29906
// exit ;
29904: GO 30676
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29906: LD_ADDR_VAR 0 17
29910: PUSH
29911: LD_VAR 0 5
29915: PPUSH
29916: LD_INT 22
29918: PUSH
29919: LD_VAR 0 13
29923: PPUSH
29924: CALL_OW 255
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: LD_INT 30
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PPUSH
29965: CALL_OW 72
29969: ST_TO_ADDR
// for i = 1 to hexes do
29970: LD_ADDR_VAR 0 9
29974: PUSH
29975: DOUBLE
29976: LD_INT 1
29978: DEC
29979: ST_TO_ADDR
29980: LD_VAR 0 14
29984: PUSH
29985: FOR_TO
29986: IFFALSE 30674
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29988: LD_ADDR_VAR 0 13
29992: PUSH
29993: LD_VAR 0 14
29997: PUSH
29998: LD_VAR 0 9
30002: ARRAY
30003: PUSH
30004: LD_INT 1
30006: ARRAY
30007: PPUSH
30008: LD_VAR 0 14
30012: PUSH
30013: LD_VAR 0 9
30017: ARRAY
30018: PUSH
30019: LD_INT 2
30021: ARRAY
30022: PPUSH
30023: CALL_OW 428
30027: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30028: LD_VAR 0 14
30032: PUSH
30033: LD_VAR 0 9
30037: ARRAY
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: PPUSH
30043: LD_VAR 0 14
30047: PUSH
30048: LD_VAR 0 9
30052: ARRAY
30053: PUSH
30054: LD_INT 2
30056: ARRAY
30057: PPUSH
30058: CALL_OW 351
30062: IFTRUE 30101
30064: PUSH
30065: LD_VAR 0 14
30069: PUSH
30070: LD_VAR 0 9
30074: ARRAY
30075: PUSH
30076: LD_INT 1
30078: ARRAY
30079: PPUSH
30080: LD_VAR 0 14
30084: PUSH
30085: LD_VAR 0 9
30089: ARRAY
30090: PUSH
30091: LD_INT 2
30093: ARRAY
30094: PPUSH
30095: CALL_OW 488
30099: NOT
30100: OR
30101: IFTRUE 30118
30103: PUSH
30104: LD_VAR 0 13
30108: PPUSH
30109: CALL_OW 247
30113: PUSH
30114: LD_INT 3
30116: EQUAL
30117: OR
30118: IFFALSE 30124
// exit ;
30120: POP
30121: POP
30122: GO 30676
// if not tmp then
30124: LD_VAR 0 13
30128: NOT
30129: IFFALSE 30133
// continue ;
30131: GO 29985
// result := true ;
30133: LD_ADDR_VAR 0 8
30137: PUSH
30138: LD_INT 1
30140: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30141: LD_VAR 0 6
30145: IFFALSE 30162
30147: PUSH
30148: LD_VAR 0 13
30152: PPUSH
30153: CALL_OW 247
30157: PUSH
30158: LD_INT 2
30160: EQUAL
30161: AND
30162: IFFALSE 30179
30164: PUSH
30165: LD_VAR 0 13
30169: PPUSH
30170: CALL_OW 263
30174: PUSH
30175: LD_INT 1
30177: EQUAL
30178: AND
30179: IFFALSE 30343
// begin if IsDrivenBy ( tmp ) then
30181: LD_VAR 0 13
30185: PPUSH
30186: CALL_OW 311
30190: IFFALSE 30194
// continue ;
30192: GO 29985
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30194: LD_VAR 0 6
30198: PPUSH
30199: LD_INT 3
30201: PUSH
30202: LD_INT 60
30204: PUSH
30205: EMPTY
30206: LIST
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: LD_INT 55
30217: PUSH
30218: EMPTY
30219: LIST
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PPUSH
30229: CALL_OW 72
30233: IFFALSE 30341
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30235: LD_ADDR_VAR 0 18
30239: PUSH
30240: LD_VAR 0 6
30244: PPUSH
30245: LD_INT 3
30247: PUSH
30248: LD_INT 60
30250: PUSH
30251: EMPTY
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: LD_INT 55
30263: PUSH
30264: EMPTY
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PPUSH
30275: CALL_OW 72
30279: PUSH
30280: LD_INT 1
30282: ARRAY
30283: ST_TO_ADDR
// if IsInUnit ( driver ) then
30284: LD_VAR 0 18
30288: PPUSH
30289: CALL_OW 310
30293: IFFALSE 30304
// ComExit ( driver ) ;
30295: LD_VAR 0 18
30299: PPUSH
30300: CALL 55957 0 1
// AddComEnterUnit ( driver , tmp ) ;
30304: LD_VAR 0 18
30308: PPUSH
30309: LD_VAR 0 13
30313: PPUSH
30314: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30318: LD_VAR 0 18
30322: PPUSH
30323: LD_VAR 0 7
30327: PPUSH
30328: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30332: LD_VAR 0 18
30336: PPUSH
30337: CALL_OW 181
// end ; continue ;
30341: GO 29985
// end ; if not cleaners or not tmp in cleaners then
30343: LD_VAR 0 6
30347: NOT
30348: IFTRUE 30363
30350: PUSH
30351: LD_VAR 0 13
30355: PUSH
30356: LD_VAR 0 6
30360: IN
30361: NOT
30362: OR
30363: IFFALSE 30672
// begin if dep then
30365: LD_VAR 0 17
30369: IFFALSE 30505
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30371: LD_ADDR_VAR 0 16
30375: PUSH
30376: LD_VAR 0 17
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PPUSH
30385: CALL_OW 250
30389: PPUSH
30390: LD_VAR 0 17
30394: PUSH
30395: LD_INT 1
30397: ARRAY
30398: PPUSH
30399: CALL_OW 254
30403: PPUSH
30404: LD_INT 5
30406: PPUSH
30407: CALL_OW 272
30411: PUSH
30412: LD_VAR 0 17
30416: PUSH
30417: LD_INT 1
30419: ARRAY
30420: PPUSH
30421: CALL_OW 251
30425: PPUSH
30426: LD_VAR 0 17
30430: PUSH
30431: LD_INT 1
30433: ARRAY
30434: PPUSH
30435: CALL_OW 254
30439: PPUSH
30440: LD_INT 5
30442: PPUSH
30443: CALL_OW 273
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30452: LD_VAR 0 16
30456: PUSH
30457: LD_INT 1
30459: ARRAY
30460: PPUSH
30461: LD_VAR 0 16
30465: PUSH
30466: LD_INT 2
30468: ARRAY
30469: PPUSH
30470: CALL_OW 488
30474: IFFALSE 30505
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30476: LD_VAR 0 13
30480: PPUSH
30481: LD_VAR 0 16
30485: PUSH
30486: LD_INT 1
30488: ARRAY
30489: PPUSH
30490: LD_VAR 0 16
30494: PUSH
30495: LD_INT 2
30497: ARRAY
30498: PPUSH
30499: CALL_OW 111
// continue ;
30503: GO 29985
// end ; end ; r := GetDir ( tmp ) ;
30505: LD_ADDR_VAR 0 15
30509: PUSH
30510: LD_VAR 0 13
30514: PPUSH
30515: CALL_OW 254
30519: ST_TO_ADDR
// if r = 5 then
30520: LD_VAR 0 15
30524: PUSH
30525: LD_INT 5
30527: EQUAL
30528: IFFALSE 30538
// r := 0 ;
30530: LD_ADDR_VAR 0 15
30534: PUSH
30535: LD_INT 0
30537: ST_TO_ADDR
// for j = r to 5 do
30538: LD_ADDR_VAR 0 10
30542: PUSH
30543: DOUBLE
30544: LD_VAR 0 15
30548: DEC
30549: ST_TO_ADDR
30550: LD_INT 5
30552: PUSH
30553: FOR_TO
30554: IFFALSE 30670
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30556: LD_ADDR_VAR 0 11
30560: PUSH
30561: LD_VAR 0 13
30565: PPUSH
30566: CALL_OW 250
30570: PPUSH
30571: LD_VAR 0 10
30575: PPUSH
30576: LD_INT 2
30578: PPUSH
30579: CALL_OW 272
30583: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30584: LD_ADDR_VAR 0 12
30588: PUSH
30589: LD_VAR 0 13
30593: PPUSH
30594: CALL_OW 251
30598: PPUSH
30599: LD_VAR 0 10
30603: PPUSH
30604: LD_INT 2
30606: PPUSH
30607: CALL_OW 273
30611: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30612: LD_VAR 0 11
30616: PPUSH
30617: LD_VAR 0 12
30621: PPUSH
30622: CALL_OW 488
30626: IFFALSE 30645
30628: PUSH
30629: LD_VAR 0 11
30633: PPUSH
30634: LD_VAR 0 12
30638: PPUSH
30639: CALL_OW 428
30643: NOT
30644: AND
30645: IFFALSE 30668
// begin ComMoveXY ( tmp , _x , _y ) ;
30647: LD_VAR 0 13
30651: PPUSH
30652: LD_VAR 0 11
30656: PPUSH
30657: LD_VAR 0 12
30661: PPUSH
30662: CALL_OW 111
// break ;
30666: GO 30670
// end ; end ;
30668: GO 30553
30670: POP
30671: POP
// end ; end ;
30672: GO 29985
30674: POP
30675: POP
// end ;
30676: LD_VAR 0 8
30680: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30681: LD_INT 0
30683: PPUSH
// result := true ;
30684: LD_ADDR_VAR 0 3
30688: PUSH
30689: LD_INT 1
30691: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30692: LD_VAR 0 2
30696: PUSH
30697: LD_INT 24
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30711
30703: LD_INT 33
30705: DOUBLE
30706: EQUAL
30707: IFTRUE 30711
30709: GO 30736
30711: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: LD_INT 32
30719: PPUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 321
30729: PUSH
30730: LD_INT 2
30732: EQUAL
30733: ST_TO_ADDR
30734: GO 31052
30736: LD_INT 20
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30769
30744: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30745: LD_ADDR_VAR 0 3
30749: PUSH
30750: LD_INT 6
30752: PPUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 321
30762: PUSH
30763: LD_INT 2
30765: EQUAL
30766: ST_TO_ADDR
30767: GO 31052
30769: LD_INT 22
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30783
30775: LD_INT 36
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30783
30781: GO 30808
30783: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30784: LD_ADDR_VAR 0 3
30788: PUSH
30789: LD_INT 15
30791: PPUSH
30792: LD_VAR 0 1
30796: PPUSH
30797: CALL_OW 321
30801: PUSH
30802: LD_INT 2
30804: EQUAL
30805: ST_TO_ADDR
30806: GO 31052
30808: LD_INT 30
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30841
30816: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30817: LD_ADDR_VAR 0 3
30821: PUSH
30822: LD_INT 20
30824: PPUSH
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 321
30834: PUSH
30835: LD_INT 2
30837: EQUAL
30838: ST_TO_ADDR
30839: GO 31052
30841: LD_INT 28
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30855
30847: LD_INT 21
30849: DOUBLE
30850: EQUAL
30851: IFTRUE 30855
30853: GO 30880
30855: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_INT 21
30863: PPUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 321
30873: PUSH
30874: LD_INT 2
30876: EQUAL
30877: ST_TO_ADDR
30878: GO 31052
30880: LD_INT 16
30882: DOUBLE
30883: EQUAL
30884: IFTRUE 30888
30886: GO 30913
30888: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30889: LD_ADDR_VAR 0 3
30893: PUSH
30894: LD_INT 84
30896: PPUSH
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 321
30906: PUSH
30907: LD_INT 2
30909: EQUAL
30910: ST_TO_ADDR
30911: GO 31052
30913: LD_INT 19
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30927
30919: LD_INT 23
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30927
30925: GO 30952
30927: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: LD_INT 83
30935: PPUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 321
30945: PUSH
30946: LD_INT 2
30948: EQUAL
30949: ST_TO_ADDR
30950: GO 31052
30952: LD_INT 17
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30985
30960: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 39
30968: PPUSH
30969: LD_VAR 0 1
30973: PPUSH
30974: CALL_OW 321
30978: PUSH
30979: LD_INT 2
30981: EQUAL
30982: ST_TO_ADDR
30983: GO 31052
30985: LD_INT 18
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31018
30993: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: LD_INT 40
31001: PPUSH
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 321
31011: PUSH
31012: LD_INT 2
31014: EQUAL
31015: ST_TO_ADDR
31016: GO 31052
31018: LD_INT 27
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31026
31024: GO 31051
31026: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31027: LD_ADDR_VAR 0 3
31031: PUSH
31032: LD_INT 35
31034: PPUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 321
31044: PUSH
31045: LD_INT 2
31047: EQUAL
31048: ST_TO_ADDR
31049: GO 31052
31051: POP
// end ;
31052: LD_VAR 0 3
31056: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31057: LD_INT 0
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
// result := false ;
31070: LD_ADDR_VAR 0 6
31074: PUSH
31075: LD_INT 0
31077: ST_TO_ADDR
// if btype = b_depot then
31078: LD_VAR 0 2
31082: PUSH
31083: LD_INT 0
31085: EQUAL
31086: IFFALSE 31098
// begin result := true ;
31088: LD_ADDR_VAR 0 6
31092: PUSH
31093: LD_INT 1
31095: ST_TO_ADDR
// exit ;
31096: GO 31952
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31098: LD_VAR 0 1
31102: NOT
31103: IFTRUE 31128
31105: PUSH
31106: LD_VAR 0 1
31110: PPUSH
31111: CALL_OW 266
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: IN
31126: NOT
31127: OR
31128: IFTRUE 31137
31130: PUSH
31131: LD_VAR 0 2
31135: NOT
31136: OR
31137: IFTRUE 31173
31139: PUSH
31140: LD_VAR 0 5
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 4
31159: PUSH
31160: LD_INT 5
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: IN
31171: NOT
31172: OR
31173: IFTRUE 31192
31175: PUSH
31176: LD_VAR 0 3
31180: PPUSH
31181: LD_VAR 0 4
31185: PPUSH
31186: CALL_OW 488
31190: NOT
31191: OR
31192: IFFALSE 31196
// exit ;
31194: GO 31952
// side := GetSide ( depot ) ;
31196: LD_ADDR_VAR 0 9
31200: PUSH
31201: LD_VAR 0 1
31205: PPUSH
31206: CALL_OW 255
31210: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31211: LD_VAR 0 9
31215: PPUSH
31216: LD_VAR 0 2
31220: PPUSH
31221: CALL 30681 0 2
31225: NOT
31226: IFFALSE 31230
// exit ;
31228: GO 31952
// pom := GetBase ( depot ) ;
31230: LD_ADDR_VAR 0 10
31234: PUSH
31235: LD_VAR 0 1
31239: PPUSH
31240: CALL_OW 274
31244: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31245: LD_ADDR_VAR 0 11
31249: PUSH
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 248
31264: PPUSH
31265: CALL_OW 450
31269: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31270: LD_VAR 0 10
31274: PPUSH
31275: LD_INT 1
31277: PPUSH
31278: CALL_OW 275
31282: PUSH
31283: LD_VAR 0 11
31287: PUSH
31288: LD_INT 1
31290: ARRAY
31291: GREATEREQUAL
31292: IFFALSE 31318
31294: PUSH
31295: LD_VAR 0 10
31299: PPUSH
31300: LD_INT 2
31302: PPUSH
31303: CALL_OW 275
31307: PUSH
31308: LD_VAR 0 11
31312: PUSH
31313: LD_INT 2
31315: ARRAY
31316: GREATEREQUAL
31317: AND
31318: IFFALSE 31344
31320: PUSH
31321: LD_VAR 0 10
31325: PPUSH
31326: LD_INT 3
31328: PPUSH
31329: CALL_OW 275
31333: PUSH
31334: LD_VAR 0 11
31338: PUSH
31339: LD_INT 3
31341: ARRAY
31342: GREATEREQUAL
31343: AND
31344: NOT
31345: IFFALSE 31349
// exit ;
31347: GO 31952
// if GetBType ( depot ) = b_depot then
31349: LD_VAR 0 1
31353: PPUSH
31354: CALL_OW 266
31358: PUSH
31359: LD_INT 0
31361: EQUAL
31362: IFFALSE 31374
// dist := 28 else
31364: LD_ADDR_VAR 0 14
31368: PUSH
31369: LD_INT 28
31371: ST_TO_ADDR
31372: GO 31382
// dist := 36 ;
31374: LD_ADDR_VAR 0 14
31378: PUSH
31379: LD_INT 36
31381: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31382: LD_VAR 0 1
31386: PPUSH
31387: LD_VAR 0 3
31391: PPUSH
31392: LD_VAR 0 4
31396: PPUSH
31397: CALL_OW 297
31401: PUSH
31402: LD_VAR 0 14
31406: GREATER
31407: IFFALSE 31411
// exit ;
31409: GO 31952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31411: LD_ADDR_VAR 0 12
31415: PUSH
31416: LD_VAR 0 2
31420: PPUSH
31421: LD_VAR 0 3
31425: PPUSH
31426: LD_VAR 0 4
31430: PPUSH
31431: LD_VAR 0 5
31435: PPUSH
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL_OW 248
31445: PPUSH
31446: LD_INT 0
31448: PPUSH
31449: CALL 31957 0 6
31453: ST_TO_ADDR
// if not hexes then
31454: LD_VAR 0 12
31458: NOT
31459: IFFALSE 31463
// exit ;
31461: GO 31952
// hex := GetHexInfo ( x , y ) ;
31463: LD_ADDR_VAR 0 15
31467: PUSH
31468: LD_VAR 0 3
31472: PPUSH
31473: LD_VAR 0 4
31477: PPUSH
31478: CALL_OW 546
31482: ST_TO_ADDR
// if hex [ 1 ] then
31483: LD_VAR 0 15
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: IFFALSE 31495
// exit ;
31493: GO 31952
// height := hex [ 2 ] ;
31495: LD_ADDR_VAR 0 13
31499: PUSH
31500: LD_VAR 0 15
31504: PUSH
31505: LD_INT 2
31507: ARRAY
31508: ST_TO_ADDR
// for i = 1 to hexes do
31509: LD_ADDR_VAR 0 7
31513: PUSH
31514: DOUBLE
31515: LD_INT 1
31517: DEC
31518: ST_TO_ADDR
31519: LD_VAR 0 12
31523: PUSH
31524: FOR_TO
31525: IFFALSE 31869
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31527: LD_VAR 0 12
31531: PUSH
31532: LD_VAR 0 7
31536: ARRAY
31537: PUSH
31538: LD_INT 1
31540: ARRAY
31541: PPUSH
31542: LD_VAR 0 12
31546: PUSH
31547: LD_VAR 0 7
31551: ARRAY
31552: PUSH
31553: LD_INT 2
31555: ARRAY
31556: PPUSH
31557: CALL_OW 488
31561: NOT
31562: IFTRUE 31604
31564: PUSH
31565: LD_VAR 0 12
31569: PUSH
31570: LD_VAR 0 7
31574: ARRAY
31575: PUSH
31576: LD_INT 1
31578: ARRAY
31579: PPUSH
31580: LD_VAR 0 12
31584: PUSH
31585: LD_VAR 0 7
31589: ARRAY
31590: PUSH
31591: LD_INT 2
31593: ARRAY
31594: PPUSH
31595: CALL_OW 428
31599: PUSH
31600: LD_INT 0
31602: GREATER
31603: OR
31604: IFTRUE 31642
31606: PUSH
31607: LD_VAR 0 12
31611: PUSH
31612: LD_VAR 0 7
31616: ARRAY
31617: PUSH
31618: LD_INT 1
31620: ARRAY
31621: PPUSH
31622: LD_VAR 0 12
31626: PUSH
31627: LD_VAR 0 7
31631: ARRAY
31632: PUSH
31633: LD_INT 2
31635: ARRAY
31636: PPUSH
31637: CALL_OW 351
31641: OR
31642: IFFALSE 31648
// exit ;
31644: POP
31645: POP
31646: GO 31952
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31648: LD_ADDR_VAR 0 8
31652: PUSH
31653: LD_VAR 0 12
31657: PUSH
31658: LD_VAR 0 7
31662: ARRAY
31663: PUSH
31664: LD_INT 1
31666: ARRAY
31667: PPUSH
31668: LD_VAR 0 12
31672: PUSH
31673: LD_VAR 0 7
31677: ARRAY
31678: PUSH
31679: LD_INT 2
31681: ARRAY
31682: PPUSH
31683: CALL_OW 546
31687: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31688: LD_VAR 0 8
31692: PUSH
31693: LD_INT 1
31695: ARRAY
31696: IFTRUE 31718
31698: PUSH
31699: LD_VAR 0 8
31703: PUSH
31704: LD_INT 2
31706: ARRAY
31707: PUSH
31708: LD_VAR 0 13
31712: PUSH
31713: LD_INT 2
31715: PLUS
31716: GREATER
31717: OR
31718: IFTRUE 31740
31720: PUSH
31721: LD_VAR 0 8
31725: PUSH
31726: LD_INT 2
31728: ARRAY
31729: PUSH
31730: LD_VAR 0 13
31734: PUSH
31735: LD_INT 2
31737: MINUS
31738: LESS
31739: OR
31740: IFTRUE 31808
31742: PUSH
31743: LD_VAR 0 8
31747: PUSH
31748: LD_INT 3
31750: ARRAY
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 8
31757: PUSH
31758: LD_INT 9
31760: PUSH
31761: LD_INT 10
31763: PUSH
31764: LD_INT 11
31766: PUSH
31767: LD_INT 12
31769: PUSH
31770: LD_INT 13
31772: PUSH
31773: LD_INT 16
31775: PUSH
31776: LD_INT 17
31778: PUSH
31779: LD_INT 18
31781: PUSH
31782: LD_INT 19
31784: PUSH
31785: LD_INT 20
31787: PUSH
31788: LD_INT 21
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: IN
31806: NOT
31807: OR
31808: IFTRUE 31821
31810: PUSH
31811: LD_VAR 0 8
31815: PUSH
31816: LD_INT 5
31818: ARRAY
31819: NOT
31820: OR
31821: IFTRUE 31861
31823: PUSH
31824: LD_VAR 0 8
31828: PUSH
31829: LD_INT 6
31831: ARRAY
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: LD_INT 2
31838: PUSH
31839: LD_INT 7
31841: PUSH
31842: LD_INT 9
31844: PUSH
31845: LD_INT 10
31847: PUSH
31848: LD_INT 11
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: IN
31859: NOT
31860: OR
31861: IFFALSE 31867
// exit ;
31863: POP
31864: POP
31865: GO 31952
// end ;
31867: GO 31524
31869: POP
31870: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31871: LD_VAR 0 9
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: LD_VAR 0 4
31885: PPUSH
31886: LD_INT 20
31888: PPUSH
31889: CALL 23771 0 4
31893: PUSH
31894: LD_INT 4
31896: ARRAY
31897: IFFALSE 31901
// exit ;
31899: GO 31952
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 29
31908: PUSH
31909: LD_INT 30
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: IN
31916: IFFALSE 31940
31918: PUSH
31919: LD_VAR 0 3
31923: PPUSH
31924: LD_VAR 0 4
31928: PPUSH
31929: LD_VAR 0 9
31933: PPUSH
31934: CALL_OW 440
31938: NOT
31939: AND
31940: IFFALSE 31944
// exit ;
31942: GO 31952
// result := true ;
31944: LD_ADDR_VAR 0 6
31948: PUSH
31949: LD_INT 1
31951: ST_TO_ADDR
// end ;
31952: LD_VAR 0 6
31956: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31957: LD_INT 0
31959: PPUSH
31960: PPUSH
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
31974: PPUSH
31975: PPUSH
31976: PPUSH
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
32010: PPUSH
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
// result = [ ] ;
32017: LD_ADDR_VAR 0 7
32021: PUSH
32022: EMPTY
32023: ST_TO_ADDR
// temp_list = [ ] ;
32024: LD_ADDR_VAR 0 9
32028: PUSH
32029: EMPTY
32030: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32031: LD_VAR 0 4
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 4
32050: PUSH
32051: LD_INT 5
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: IN
32062: NOT
32063: IFTRUE 32106
32065: PUSH
32066: LD_VAR 0 1
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: IN
32081: IFFALSE 32105
32083: PUSH
32084: LD_VAR 0 5
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: IN
32103: NOT
32104: AND
32105: OR
32106: IFFALSE 32110
// exit ;
32108: GO 50509
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32110: LD_VAR 0 1
32114: PUSH
32115: LD_INT 6
32117: PUSH
32118: LD_INT 7
32120: PUSH
32121: LD_INT 8
32123: PUSH
32124: LD_INT 13
32126: PUSH
32127: LD_INT 12
32129: PUSH
32130: LD_INT 15
32132: PUSH
32133: LD_INT 11
32135: PUSH
32136: LD_INT 14
32138: PUSH
32139: LD_INT 10
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: IN
32153: IFFALSE 32163
// btype = b_lab ;
32155: LD_ADDR_VAR 0 1
32159: PUSH
32160: LD_INT 6
32162: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32163: LD_VAR 0 6
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: IN
32182: NOT
32183: IFTRUE 32251
32185: PUSH
32186: LD_VAR 0 1
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: LD_INT 6
32205: PUSH
32206: LD_INT 36
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: LD_INT 5
32214: PUSH
32215: LD_INT 31
32217: PUSH
32218: LD_INT 32
32220: PUSH
32221: LD_INT 33
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: IN
32237: NOT
32238: IFFALSE 32250
32240: PUSH
32241: LD_VAR 0 6
32245: PUSH
32246: LD_INT 1
32248: EQUAL
32249: AND
32250: OR
32251: IFTRUE 32283
32253: PUSH
32254: LD_VAR 0 1
32258: PUSH
32259: LD_INT 2
32261: PUSH
32262: LD_INT 3
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: IN
32269: NOT
32270: IFFALSE 32282
32272: PUSH
32273: LD_VAR 0 6
32277: PUSH
32278: LD_INT 2
32280: EQUAL
32281: AND
32282: OR
32283: IFFALSE 32293
// mode = 0 ;
32285: LD_ADDR_VAR 0 6
32289: PUSH
32290: LD_INT 0
32292: ST_TO_ADDR
// case mode of 0 :
32293: LD_VAR 0 6
32297: PUSH
32298: LD_INT 0
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 43759
32306: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32307: LD_ADDR_VAR 0 11
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 1
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 2
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 3
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32500: LD_ADDR_VAR 0 12
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: LD_INT 1
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: NEG
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32696: LD_ADDR_VAR 0 13
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 3
32855: NEG
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 3
32867: NEG
32868: PUSH
32869: LD_INT 3
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32895: LD_ADDR_VAR 0 14
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 2
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: LD_INT 3
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33091: LD_ADDR_VAR 0 15
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 3
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33284: LD_ADDR_VAR 0 16
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 2
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 3
33441: PUSH
33442: LD_INT 3
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33477: LD_ADDR_VAR 0 17
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: LD_INT 2
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33707: LD_ADDR_VAR 0 18
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 2
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33937: LD_ADDR_VAR 0 19
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34167: LD_ADDR_VAR 0 20
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 2
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34397: LD_ADDR_VAR 0 21
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: NEG
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: LD_INT 2
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34627: LD_ADDR_VAR 0 22
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34857: LD_ADDR_VAR 0 23
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35137: LD_ADDR_VAR 0 24
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: LD_INT 2
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 3
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35413: LD_ADDR_VAR 0 25
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35687: LD_ADDR_VAR 0 26
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35963: LD_ADDR_VAR 0 27
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: NEG
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36243: LD_ADDR_VAR 0 28
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: NEG
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: NEG
36455: PUSH
36456: LD_INT 3
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 3
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: NEG
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 3
36490: NEG
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36525: LD_ADDR_VAR 0 29
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: LD_INT 3
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: NEG
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 3
36769: NEG
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36804: LD_ADDR_VAR 0 30
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: NEG
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 3
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: LD_INT 2
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: NEG
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37082: LD_ADDR_VAR 0 31
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: NEG
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 3
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 3
37325: NEG
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37360: LD_ADDR_VAR 0 32
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 3
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 2
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 3
37603: NEG
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37638: LD_ADDR_VAR 0 33
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 3
37882: NEG
37883: PUSH
37884: LD_INT 2
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37917: LD_ADDR_VAR 0 34
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 3
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 3
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38197: LD_ADDR_VAR 0 35
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38309: LD_ADDR_VAR 0 36
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38421: LD_ADDR_VAR 0 37
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38533: LD_ADDR_VAR 0 38
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38645: LD_ADDR_VAR 0 39
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38757: LD_ADDR_VAR 0 40
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38869: LD_ADDR_VAR 0 41
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 3
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 3
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 3
39166: NEG
39167: PUSH
39168: LD_INT 2
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 3
39178: NEG
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39219: LD_ADDR_VAR 0 42
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 3
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 3
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: NEG
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 3
39528: NEG
39529: PUSH
39530: LD_INT 3
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39569: LD_ADDR_VAR 0 43
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 3
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 3
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 3
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 3
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 3
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39917: LD_ADDR_VAR 0 44
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 3
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: NEG
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: NEG
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40267: LD_ADDR_VAR 0 45
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: LD_INT 3
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 3
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 3
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 3
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 3
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: NEG
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40617: LD_ADDR_VAR 0 46
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 3
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 3
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 3
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 3
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 3
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 3
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40965: LD_ADDR_VAR 0 47
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41116: LD_ADDR_VAR 0 48
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41263: LD_ADDR_VAR 0 49
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41407: LD_ADDR_VAR 0 50
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41551: LD_ADDR_VAR 0 51
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41698: LD_ADDR_VAR 0 52
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41849: LD_ADDR_VAR 0 53
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42079: LD_ADDR_VAR 0 54
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42309: LD_ADDR_VAR 0 55
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42539: LD_ADDR_VAR 0 56
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42769: LD_ADDR_VAR 0 57
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42999: LD_ADDR_VAR 0 58
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43229: LD_ADDR_VAR 0 59
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43317: LD_ADDR_VAR 0 60
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43405: LD_ADDR_VAR 0 61
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43493: LD_ADDR_VAR 0 62
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43581: LD_ADDR_VAR 0 63
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43669: LD_ADDR_VAR 0 64
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: ST_TO_ADDR
// end ; 1 :
43757: GO 49654
43759: LD_INT 1
43761: DOUBLE
43762: EQUAL
43763: IFTRUE 43767
43765: GO 46390
43767: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43768: LD_ADDR_VAR 0 11
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 3
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 3
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43812: LD_ADDR_VAR 0 12
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43853: LD_ADDR_VAR 0 13
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43893: LD_ADDR_VAR 0 14
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43934: LD_ADDR_VAR 0 15
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 3
43963: NEG
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43978: LD_ADDR_VAR 0 16
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: LD_INT 3
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 3
43997: NEG
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: LD_INT 3
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44024: LD_ADDR_VAR 0 17
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 3
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44068: LD_ADDR_VAR 0 18
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44109: LD_ADDR_VAR 0 19
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 3
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: LD_INT 3
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44149: LD_ADDR_VAR 0 20
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44190: LD_ADDR_VAR 0 21
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: NEG
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44234: LD_ADDR_VAR 0 22
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44280: LD_ADDR_VAR 0 23
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: LD_INT 3
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 4
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 3
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44324: LD_ADDR_VAR 0 24
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 4
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44365: LD_ADDR_VAR 0 25
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 4
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: LD_INT 4
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44405: LD_ADDR_VAR 0 26
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44446: LD_ADDR_VAR 0 27
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 4
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44490: LD_ADDR_VAR 0 28
44494: PUSH
44495: LD_INT 3
44497: NEG
44498: PUSH
44499: LD_INT 3
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 3
44509: NEG
44510: PUSH
44511: LD_INT 4
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 4
44521: NEG
44522: PUSH
44523: LD_INT 3
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44536: LD_ADDR_VAR 0 29
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 3
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 4
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 4
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 3
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 5
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 5
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 4
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 6
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 6
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 5
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44691: LD_ADDR_VAR 0 30
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 4
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 4
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 5
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 5
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 5
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 6
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 6
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44834: LD_ADDR_VAR 0 31
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 4
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 4
44881: PUSH
44882: LD_INT 4
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: LD_INT 4
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 5
44901: PUSH
44902: LD_INT 4
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 5
44911: PUSH
44912: LD_INT 5
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 4
44921: PUSH
44922: LD_INT 5
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 6
44931: PUSH
44932: LD_INT 5
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 6
44941: PUSH
44942: LD_INT 6
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 5
44951: PUSH
44952: LD_INT 6
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44973: LD_ADDR_VAR 0 32
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 4
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 5
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 5
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 4
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 6
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 6
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 5
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45116: LD_ADDR_VAR 0 33
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 4
45168: NEG
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 4
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 4
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 5
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 5
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 5
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 6
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 6
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45271: LD_ADDR_VAR 0 34
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 3
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 3
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 3
45314: NEG
45315: PUSH
45316: LD_INT 4
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 4
45326: NEG
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 4
45338: NEG
45339: PUSH
45340: LD_INT 4
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 4
45350: NEG
45351: PUSH
45352: LD_INT 5
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 5
45362: NEG
45363: PUSH
45364: LD_INT 4
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 5
45374: NEG
45375: PUSH
45376: LD_INT 5
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 5
45386: NEG
45387: PUSH
45388: LD_INT 6
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 6
45398: NEG
45399: PUSH
45400: LD_INT 5
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 6
45410: NEG
45411: PUSH
45412: LD_INT 6
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45434: LD_ADDR_VAR 0 41
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45478: LD_ADDR_VAR 0 42
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45519: LD_ADDR_VAR 0 43
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45559: LD_ADDR_VAR 0 44
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45600: LD_ADDR_VAR 0 45
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45644: LD_ADDR_VAR 0 46
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 3
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45690: LD_ADDR_VAR 0 47
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 3
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45723: LD_ADDR_VAR 0 48
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45754: LD_ADDR_VAR 0 49
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45783: LD_ADDR_VAR 0 50
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 3
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45812: LD_ADDR_VAR 0 51
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45843: LD_ADDR_VAR 0 52
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45876: LD_ADDR_VAR 0 53
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 3
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45920: LD_ADDR_VAR 0 54
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 3
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45961: LD_ADDR_VAR 0 55
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46001: LD_ADDR_VAR 0 56
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 57
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46086: LD_ADDR_VAR 0 58
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46132: LD_ADDR_VAR 0 59
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46176: LD_ADDR_VAR 0 60
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46217: LD_ADDR_VAR 0 61
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46257: LD_ADDR_VAR 0 62
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46298: LD_ADDR_VAR 0 63
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46342: LD_ADDR_VAR 0 64
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// end ; 2 :
46388: GO 49654
46390: LD_INT 2
46392: DOUBLE
46393: EQUAL
46394: IFTRUE 46398
46396: GO 49653
46398: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46399: LD_ADDR_VAR 0 29
46403: PUSH
46404: LD_INT 4
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 4
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 5
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 5
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 4
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 3
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 3
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 5
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 4
46519: PUSH
46520: LD_INT 3
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 4
46529: PUSH
46530: LD_INT 4
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: LD_INT 4
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 4
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 4
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 4
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 4
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 5
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 4
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 5
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 4
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 4
46784: NEG
46785: PUSH
46786: LD_INT 4
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 4
46796: NEG
46797: PUSH
46798: LD_INT 5
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: LD_INT 4
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: NEG
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 4
46832: NEG
46833: PUSH
46834: LD_INT 3
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 5
46844: NEG
46845: PUSH
46846: LD_INT 4
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 5
46856: NEG
46857: PUSH
46858: LD_INT 5
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: NEG
46869: PUSH
46870: LD_INT 5
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 5
46880: NEG
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46937: LD_ADDR_VAR 0 30
46941: PUSH
46942: LD_INT 4
46944: PUSH
46945: LD_INT 4
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 4
46954: PUSH
46955: LD_INT 3
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 5
46964: PUSH
46965: LD_INT 4
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 5
46974: PUSH
46975: LD_INT 5
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 4
46984: PUSH
46985: LD_INT 5
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 5
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 5
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 4
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 4
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 4
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 4
47127: NEG
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 4
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 4
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 5
47183: NEG
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 5
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 5
47206: NEG
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: LD_INT 4
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 3
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 4
47289: NEG
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 4
47301: NEG
47302: PUSH
47303: LD_INT 4
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 4
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 4
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 5
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 4
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 4
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 5
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 3
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 5
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47484: LD_ADDR_VAR 0 31
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 4
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 5
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 5
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 4
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 4
47640: NEG
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 4
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 4
47663: NEG
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 4
47686: NEG
47687: PUSH
47688: LD_INT 4
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 4
47698: NEG
47699: PUSH
47700: LD_INT 5
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: LD_INT 4
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 4
47734: NEG
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 5
47746: NEG
47747: PUSH
47748: LD_INT 4
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 5
47758: NEG
47759: PUSH
47760: LD_INT 5
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: NEG
47771: PUSH
47772: LD_INT 5
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 5
47782: NEG
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 4
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 3
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 3
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 4
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 4
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 4
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 5
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 5
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 4
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 5
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48034: LD_ADDR_VAR 0 32
48038: PUSH
48039: LD_INT 4
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 4
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 4
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 5
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 5
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: LD_INT 4
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 4
48203: NEG
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 4
48215: NEG
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 4
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 4
48239: NEG
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 4
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 5
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 4
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 4
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 5
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: LD_INT 5
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 4
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 4
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 3
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 4
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 4
48446: PUSH
48447: LD_INT 4
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 5
48466: PUSH
48467: LD_INT 4
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: LD_INT 5
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 4
48486: PUSH
48487: LD_INT 5
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 4
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 3
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 5
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 5
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48581: LD_ADDR_VAR 0 33
48585: PUSH
48586: LD_INT 4
48588: NEG
48589: PUSH
48590: LD_INT 4
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 4
48600: NEG
48601: PUSH
48602: LD_INT 5
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 3
48612: NEG
48613: PUSH
48614: LD_INT 4
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 3
48624: NEG
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 4
48636: NEG
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 5
48648: NEG
48649: PUSH
48650: LD_INT 4
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 5
48660: NEG
48661: PUSH
48662: LD_INT 5
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: LD_INT 5
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 5
48684: NEG
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 3
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 4
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 3
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 4
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 4
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 4
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 4
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 5
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 5
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 4
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 5
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 4
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: LD_INT 4
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 4
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 4
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 4
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 4
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 5
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 5
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 3
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 5
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49119: LD_ADDR_VAR 0 34
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 4
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 5
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 4
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 3
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 4
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 5
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 3
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 5
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 3
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 4
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 4
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 4
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 4
49321: PUSH
49322: LD_INT 4
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 4
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 5
49341: PUSH
49342: LD_INT 4
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 5
49351: PUSH
49352: LD_INT 5
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: LD_INT 5
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: LD_INT 4
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 5
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: LD_INT 5
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 3
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 4
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 4
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 3
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 4
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 4
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 4
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 4
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 5
49560: NEG
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 5
49571: NEG
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 5
49583: NEG
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// end ; end ;
49651: GO 49654
49653: POP
// case btype of b_depot , b_warehouse :
49654: LD_VAR 0 1
49658: PUSH
49659: LD_INT 0
49661: DOUBLE
49662: EQUAL
49663: IFTRUE 49673
49665: LD_INT 1
49667: DOUBLE
49668: EQUAL
49669: IFTRUE 49673
49671: GO 49874
49673: POP
// case nation of nation_american :
49674: LD_VAR 0 5
49678: PUSH
49679: LD_INT 1
49681: DOUBLE
49682: EQUAL
49683: IFTRUE 49687
49685: GO 49743
49687: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49688: LD_ADDR_VAR 0 9
49692: PUSH
49693: LD_VAR 0 11
49697: PUSH
49698: LD_VAR 0 12
49702: PUSH
49703: LD_VAR 0 13
49707: PUSH
49708: LD_VAR 0 14
49712: PUSH
49713: LD_VAR 0 15
49717: PUSH
49718: LD_VAR 0 16
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: PUSH
49731: LD_VAR 0 4
49735: PUSH
49736: LD_INT 1
49738: PLUS
49739: ARRAY
49740: ST_TO_ADDR
49741: GO 49872
49743: LD_INT 2
49745: DOUBLE
49746: EQUAL
49747: IFTRUE 49751
49749: GO 49807
49751: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49752: LD_ADDR_VAR 0 9
49756: PUSH
49757: LD_VAR 0 17
49761: PUSH
49762: LD_VAR 0 18
49766: PUSH
49767: LD_VAR 0 19
49771: PUSH
49772: LD_VAR 0 20
49776: PUSH
49777: LD_VAR 0 21
49781: PUSH
49782: LD_VAR 0 22
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: LD_VAR 0 4
49799: PUSH
49800: LD_INT 1
49802: PLUS
49803: ARRAY
49804: ST_TO_ADDR
49805: GO 49872
49807: LD_INT 3
49809: DOUBLE
49810: EQUAL
49811: IFTRUE 49815
49813: GO 49871
49815: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49816: LD_ADDR_VAR 0 9
49820: PUSH
49821: LD_VAR 0 23
49825: PUSH
49826: LD_VAR 0 24
49830: PUSH
49831: LD_VAR 0 25
49835: PUSH
49836: LD_VAR 0 26
49840: PUSH
49841: LD_VAR 0 27
49845: PUSH
49846: LD_VAR 0 28
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: PUSH
49859: LD_VAR 0 4
49863: PUSH
49864: LD_INT 1
49866: PLUS
49867: ARRAY
49868: ST_TO_ADDR
49869: GO 49872
49871: POP
49872: GO 50427
49874: LD_INT 2
49876: DOUBLE
49877: EQUAL
49878: IFTRUE 49888
49880: LD_INT 3
49882: DOUBLE
49883: EQUAL
49884: IFTRUE 49888
49886: GO 49944
49888: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49889: LD_ADDR_VAR 0 9
49893: PUSH
49894: LD_VAR 0 29
49898: PUSH
49899: LD_VAR 0 30
49903: PUSH
49904: LD_VAR 0 31
49908: PUSH
49909: LD_VAR 0 32
49913: PUSH
49914: LD_VAR 0 33
49918: PUSH
49919: LD_VAR 0 34
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: PUSH
49932: LD_VAR 0 4
49936: PUSH
49937: LD_INT 1
49939: PLUS
49940: ARRAY
49941: ST_TO_ADDR
49942: GO 50427
49944: LD_INT 16
49946: DOUBLE
49947: EQUAL
49948: IFTRUE 50006
49950: LD_INT 17
49952: DOUBLE
49953: EQUAL
49954: IFTRUE 50006
49956: LD_INT 18
49958: DOUBLE
49959: EQUAL
49960: IFTRUE 50006
49962: LD_INT 19
49964: DOUBLE
49965: EQUAL
49966: IFTRUE 50006
49968: LD_INT 22
49970: DOUBLE
49971: EQUAL
49972: IFTRUE 50006
49974: LD_INT 20
49976: DOUBLE
49977: EQUAL
49978: IFTRUE 50006
49980: LD_INT 21
49982: DOUBLE
49983: EQUAL
49984: IFTRUE 50006
49986: LD_INT 23
49988: DOUBLE
49989: EQUAL
49990: IFTRUE 50006
49992: LD_INT 24
49994: DOUBLE
49995: EQUAL
49996: IFTRUE 50006
49998: LD_INT 25
50000: DOUBLE
50001: EQUAL
50002: IFTRUE 50006
50004: GO 50062
50006: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50007: LD_ADDR_VAR 0 9
50011: PUSH
50012: LD_VAR 0 35
50016: PUSH
50017: LD_VAR 0 36
50021: PUSH
50022: LD_VAR 0 37
50026: PUSH
50027: LD_VAR 0 38
50031: PUSH
50032: LD_VAR 0 39
50036: PUSH
50037: LD_VAR 0 40
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: PUSH
50050: LD_VAR 0 4
50054: PUSH
50055: LD_INT 1
50057: PLUS
50058: ARRAY
50059: ST_TO_ADDR
50060: GO 50427
50062: LD_INT 6
50064: DOUBLE
50065: EQUAL
50066: IFTRUE 50118
50068: LD_INT 7
50070: DOUBLE
50071: EQUAL
50072: IFTRUE 50118
50074: LD_INT 8
50076: DOUBLE
50077: EQUAL
50078: IFTRUE 50118
50080: LD_INT 13
50082: DOUBLE
50083: EQUAL
50084: IFTRUE 50118
50086: LD_INT 12
50088: DOUBLE
50089: EQUAL
50090: IFTRUE 50118
50092: LD_INT 15
50094: DOUBLE
50095: EQUAL
50096: IFTRUE 50118
50098: LD_INT 11
50100: DOUBLE
50101: EQUAL
50102: IFTRUE 50118
50104: LD_INT 14
50106: DOUBLE
50107: EQUAL
50108: IFTRUE 50118
50110: LD_INT 10
50112: DOUBLE
50113: EQUAL
50114: IFTRUE 50118
50116: GO 50174
50118: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50119: LD_ADDR_VAR 0 9
50123: PUSH
50124: LD_VAR 0 41
50128: PUSH
50129: LD_VAR 0 42
50133: PUSH
50134: LD_VAR 0 43
50138: PUSH
50139: LD_VAR 0 44
50143: PUSH
50144: LD_VAR 0 45
50148: PUSH
50149: LD_VAR 0 46
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: PUSH
50162: LD_VAR 0 4
50166: PUSH
50167: LD_INT 1
50169: PLUS
50170: ARRAY
50171: ST_TO_ADDR
50172: GO 50427
50174: LD_INT 36
50176: DOUBLE
50177: EQUAL
50178: IFTRUE 50182
50180: GO 50238
50182: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50183: LD_ADDR_VAR 0 9
50187: PUSH
50188: LD_VAR 0 47
50192: PUSH
50193: LD_VAR 0 48
50197: PUSH
50198: LD_VAR 0 49
50202: PUSH
50203: LD_VAR 0 50
50207: PUSH
50208: LD_VAR 0 51
50212: PUSH
50213: LD_VAR 0 52
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: PUSH
50226: LD_VAR 0 4
50230: PUSH
50231: LD_INT 1
50233: PLUS
50234: ARRAY
50235: ST_TO_ADDR
50236: GO 50427
50238: LD_INT 4
50240: DOUBLE
50241: EQUAL
50242: IFTRUE 50264
50244: LD_INT 5
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50264
50250: LD_INT 34
50252: DOUBLE
50253: EQUAL
50254: IFTRUE 50264
50256: LD_INT 37
50258: DOUBLE
50259: EQUAL
50260: IFTRUE 50264
50262: GO 50320
50264: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50265: LD_ADDR_VAR 0 9
50269: PUSH
50270: LD_VAR 0 53
50274: PUSH
50275: LD_VAR 0 54
50279: PUSH
50280: LD_VAR 0 55
50284: PUSH
50285: LD_VAR 0 56
50289: PUSH
50290: LD_VAR 0 57
50294: PUSH
50295: LD_VAR 0 58
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: PUSH
50308: LD_VAR 0 4
50312: PUSH
50313: LD_INT 1
50315: PLUS
50316: ARRAY
50317: ST_TO_ADDR
50318: GO 50427
50320: LD_INT 31
50322: DOUBLE
50323: EQUAL
50324: IFTRUE 50370
50326: LD_INT 32
50328: DOUBLE
50329: EQUAL
50330: IFTRUE 50370
50332: LD_INT 33
50334: DOUBLE
50335: EQUAL
50336: IFTRUE 50370
50338: LD_INT 27
50340: DOUBLE
50341: EQUAL
50342: IFTRUE 50370
50344: LD_INT 26
50346: DOUBLE
50347: EQUAL
50348: IFTRUE 50370
50350: LD_INT 28
50352: DOUBLE
50353: EQUAL
50354: IFTRUE 50370
50356: LD_INT 29
50358: DOUBLE
50359: EQUAL
50360: IFTRUE 50370
50362: LD_INT 30
50364: DOUBLE
50365: EQUAL
50366: IFTRUE 50370
50368: GO 50426
50370: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50371: LD_ADDR_VAR 0 9
50375: PUSH
50376: LD_VAR 0 59
50380: PUSH
50381: LD_VAR 0 60
50385: PUSH
50386: LD_VAR 0 61
50390: PUSH
50391: LD_VAR 0 62
50395: PUSH
50396: LD_VAR 0 63
50400: PUSH
50401: LD_VAR 0 64
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: PUSH
50414: LD_VAR 0 4
50418: PUSH
50419: LD_INT 1
50421: PLUS
50422: ARRAY
50423: ST_TO_ADDR
50424: GO 50427
50426: POP
// temp_list2 = [ ] ;
50427: LD_ADDR_VAR 0 10
50431: PUSH
50432: EMPTY
50433: ST_TO_ADDR
// for i in temp_list do
50434: LD_ADDR_VAR 0 8
50438: PUSH
50439: LD_VAR 0 9
50443: PUSH
50444: FOR_IN
50445: IFFALSE 50497
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50447: LD_ADDR_VAR 0 10
50451: PUSH
50452: LD_VAR 0 10
50456: PUSH
50457: LD_VAR 0 8
50461: PUSH
50462: LD_INT 1
50464: ARRAY
50465: PUSH
50466: LD_VAR 0 2
50470: PLUS
50471: PUSH
50472: LD_VAR 0 8
50476: PUSH
50477: LD_INT 2
50479: ARRAY
50480: PUSH
50481: LD_VAR 0 3
50485: PLUS
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: ADD
50494: ST_TO_ADDR
50495: GO 50444
50497: POP
50498: POP
// result = temp_list2 ;
50499: LD_ADDR_VAR 0 7
50503: PUSH
50504: LD_VAR 0 10
50508: ST_TO_ADDR
// end ;
50509: LD_VAR 0 7
50513: RET
// export function EnemyInRange ( unit , dist ) ; begin
50514: LD_INT 0
50516: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50517: LD_ADDR_VAR 0 3
50521: PUSH
50522: LD_VAR 0 1
50526: PPUSH
50527: CALL_OW 255
50531: PPUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL_OW 250
50541: PPUSH
50542: LD_VAR 0 1
50546: PPUSH
50547: CALL_OW 251
50551: PPUSH
50552: LD_VAR 0 2
50556: PPUSH
50557: CALL 23771 0 4
50561: PUSH
50562: LD_INT 4
50564: ARRAY
50565: ST_TO_ADDR
// end ;
50566: LD_VAR 0 3
50570: RET
// export function PlayerSeeMe ( unit ) ; begin
50571: LD_INT 0
50573: PPUSH
// result := See ( your_side , unit ) ;
50574: LD_ADDR_VAR 0 2
50578: PUSH
50579: LD_OWVAR 2
50583: PPUSH
50584: LD_VAR 0 1
50588: PPUSH
50589: CALL_OW 292
50593: ST_TO_ADDR
// end ;
50594: LD_VAR 0 2
50598: RET
// export function ReverseDir ( unit ) ; begin
50599: LD_INT 0
50601: PPUSH
// if not unit then
50602: LD_VAR 0 1
50606: NOT
50607: IFFALSE 50611
// exit ;
50609: GO 50634
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50611: LD_ADDR_VAR 0 2
50615: PUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 254
50625: PUSH
50626: LD_INT 3
50628: PLUS
50629: PUSH
50630: LD_INT 6
50632: MOD
50633: ST_TO_ADDR
// end ;
50634: LD_VAR 0 2
50638: RET
// export function ReverseArray ( array ) ; var i ; begin
50639: LD_INT 0
50641: PPUSH
50642: PPUSH
// if not array then
50643: LD_VAR 0 1
50647: NOT
50648: IFFALSE 50652
// exit ;
50650: GO 50707
// result := [ ] ;
50652: LD_ADDR_VAR 0 2
50656: PUSH
50657: EMPTY
50658: ST_TO_ADDR
// for i := array downto 1 do
50659: LD_ADDR_VAR 0 3
50663: PUSH
50664: DOUBLE
50665: LD_VAR 0 1
50669: INC
50670: ST_TO_ADDR
50671: LD_INT 1
50673: PUSH
50674: FOR_DOWNTO
50675: IFFALSE 50705
// result := Join ( result , array [ i ] ) ;
50677: LD_ADDR_VAR 0 2
50681: PUSH
50682: LD_VAR 0 2
50686: PPUSH
50687: LD_VAR 0 1
50691: PUSH
50692: LD_VAR 0 3
50696: ARRAY
50697: PPUSH
50698: CALL 55559 0 2
50702: ST_TO_ADDR
50703: GO 50674
50705: POP
50706: POP
// end ;
50707: LD_VAR 0 2
50711: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50712: LD_INT 0
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
// if not unit or not hexes then
50720: LD_VAR 0 1
50724: NOT
50725: IFTRUE 50734
50727: PUSH
50728: LD_VAR 0 2
50732: NOT
50733: OR
50734: IFFALSE 50738
// exit ;
50736: GO 50861
// dist := 9999 ;
50738: LD_ADDR_VAR 0 5
50742: PUSH
50743: LD_INT 9999
50745: ST_TO_ADDR
// for i = 1 to hexes do
50746: LD_ADDR_VAR 0 4
50750: PUSH
50751: DOUBLE
50752: LD_INT 1
50754: DEC
50755: ST_TO_ADDR
50756: LD_VAR 0 2
50760: PUSH
50761: FOR_TO
50762: IFFALSE 50849
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50764: LD_ADDR_VAR 0 6
50768: PUSH
50769: LD_VAR 0 1
50773: PPUSH
50774: LD_VAR 0 2
50778: PUSH
50779: LD_VAR 0 4
50783: ARRAY
50784: PUSH
50785: LD_INT 1
50787: ARRAY
50788: PPUSH
50789: LD_VAR 0 2
50793: PUSH
50794: LD_VAR 0 4
50798: ARRAY
50799: PUSH
50800: LD_INT 2
50802: ARRAY
50803: PPUSH
50804: CALL_OW 297
50808: ST_TO_ADDR
// if tdist < dist then
50809: LD_VAR 0 6
50813: PUSH
50814: LD_VAR 0 5
50818: LESS
50819: IFFALSE 50847
// begin hex := hexes [ i ] ;
50821: LD_ADDR_VAR 0 8
50825: PUSH
50826: LD_VAR 0 2
50830: PUSH
50831: LD_VAR 0 4
50835: ARRAY
50836: ST_TO_ADDR
// dist := tdist ;
50837: LD_ADDR_VAR 0 5
50841: PUSH
50842: LD_VAR 0 6
50846: ST_TO_ADDR
// end ; end ;
50847: GO 50761
50849: POP
50850: POP
// result := hex ;
50851: LD_ADDR_VAR 0 3
50855: PUSH
50856: LD_VAR 0 8
50860: ST_TO_ADDR
// end ;
50861: LD_VAR 0 3
50865: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50866: LD_INT 0
50868: PPUSH
50869: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50870: LD_VAR 0 1
50874: NOT
50875: IFTRUE 50914
50877: PUSH
50878: LD_VAR 0 1
50882: PUSH
50883: LD_INT 21
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 23
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PPUSH
50907: CALL_OW 69
50911: IN
50912: NOT
50913: OR
50914: IFFALSE 50918
// exit ;
50916: GO 50965
// for i = 1 to 3 do
50918: LD_ADDR_VAR 0 3
50922: PUSH
50923: DOUBLE
50924: LD_INT 1
50926: DEC
50927: ST_TO_ADDR
50928: LD_INT 3
50930: PUSH
50931: FOR_TO
50932: IFFALSE 50963
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50934: LD_VAR 0 1
50938: PPUSH
50939: CALL_OW 250
50943: PPUSH
50944: LD_VAR 0 1
50948: PPUSH
50949: CALL_OW 251
50953: PPUSH
50954: LD_INT 1
50956: PPUSH
50957: CALL_OW 453
50961: GO 50931
50963: POP
50964: POP
// end ;
50965: LD_VAR 0 2
50969: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50970: LD_INT 0
50972: PPUSH
50973: PPUSH
50974: PPUSH
50975: PPUSH
50976: PPUSH
50977: PPUSH
// if not unit or not enemy_unit then
50978: LD_VAR 0 1
50982: NOT
50983: IFTRUE 50992
50985: PUSH
50986: LD_VAR 0 2
50990: NOT
50991: OR
50992: IFFALSE 50996
// exit ;
50994: GO 51477
// if GetLives ( i ) < 250 then
50996: LD_VAR 0 4
51000: PPUSH
51001: CALL_OW 256
51005: PUSH
51006: LD_INT 250
51008: LESS
51009: IFFALSE 51022
// begin ComAutodestruct ( i ) ;
51011: LD_VAR 0 4
51015: PPUSH
51016: CALL 50866 0 1
// exit ;
51020: GO 51477
// end ; x := GetX ( enemy_unit ) ;
51022: LD_ADDR_VAR 0 7
51026: PUSH
51027: LD_VAR 0 2
51031: PPUSH
51032: CALL_OW 250
51036: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51037: LD_ADDR_VAR 0 8
51041: PUSH
51042: LD_VAR 0 2
51046: PPUSH
51047: CALL_OW 251
51051: ST_TO_ADDR
// if not x or not y then
51052: LD_VAR 0 7
51056: NOT
51057: IFTRUE 51066
51059: PUSH
51060: LD_VAR 0 8
51064: NOT
51065: OR
51066: IFFALSE 51070
// exit ;
51068: GO 51477
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51070: LD_ADDR_VAR 0 6
51074: PUSH
51075: LD_VAR 0 7
51079: PPUSH
51080: LD_INT 0
51082: PPUSH
51083: LD_INT 4
51085: PPUSH
51086: CALL_OW 272
51090: PUSH
51091: LD_VAR 0 8
51095: PPUSH
51096: LD_INT 0
51098: PPUSH
51099: LD_INT 4
51101: PPUSH
51102: CALL_OW 273
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_VAR 0 7
51115: PPUSH
51116: LD_INT 1
51118: PPUSH
51119: LD_INT 4
51121: PPUSH
51122: CALL_OW 272
51126: PUSH
51127: LD_VAR 0 8
51131: PPUSH
51132: LD_INT 1
51134: PPUSH
51135: LD_INT 4
51137: PPUSH
51138: CALL_OW 273
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_VAR 0 7
51151: PPUSH
51152: LD_INT 2
51154: PPUSH
51155: LD_INT 4
51157: PPUSH
51158: CALL_OW 272
51162: PUSH
51163: LD_VAR 0 8
51167: PPUSH
51168: LD_INT 2
51170: PPUSH
51171: LD_INT 4
51173: PPUSH
51174: CALL_OW 273
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_VAR 0 7
51187: PPUSH
51188: LD_INT 3
51190: PPUSH
51191: LD_INT 4
51193: PPUSH
51194: CALL_OW 272
51198: PUSH
51199: LD_VAR 0 8
51203: PPUSH
51204: LD_INT 3
51206: PPUSH
51207: LD_INT 4
51209: PPUSH
51210: CALL_OW 273
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_VAR 0 7
51223: PPUSH
51224: LD_INT 4
51226: PPUSH
51227: LD_INT 4
51229: PPUSH
51230: CALL_OW 272
51234: PUSH
51235: LD_VAR 0 8
51239: PPUSH
51240: LD_INT 4
51242: PPUSH
51243: LD_INT 4
51245: PPUSH
51246: CALL_OW 273
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_VAR 0 7
51259: PPUSH
51260: LD_INT 5
51262: PPUSH
51263: LD_INT 4
51265: PPUSH
51266: CALL_OW 272
51270: PUSH
51271: LD_VAR 0 8
51275: PPUSH
51276: LD_INT 5
51278: PPUSH
51279: LD_INT 4
51281: PPUSH
51282: CALL_OW 273
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: ST_TO_ADDR
// for i = tmp downto 1 do
51299: LD_ADDR_VAR 0 4
51303: PUSH
51304: DOUBLE
51305: LD_VAR 0 6
51309: INC
51310: ST_TO_ADDR
51311: LD_INT 1
51313: PUSH
51314: FOR_DOWNTO
51315: IFFALSE 51418
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51317: LD_VAR 0 6
51321: PUSH
51322: LD_VAR 0 4
51326: ARRAY
51327: PUSH
51328: LD_INT 1
51330: ARRAY
51331: PPUSH
51332: LD_VAR 0 6
51336: PUSH
51337: LD_VAR 0 4
51341: ARRAY
51342: PUSH
51343: LD_INT 2
51345: ARRAY
51346: PPUSH
51347: CALL_OW 488
51351: NOT
51352: IFTRUE 51394
51354: PUSH
51355: LD_VAR 0 6
51359: PUSH
51360: LD_VAR 0 4
51364: ARRAY
51365: PUSH
51366: LD_INT 1
51368: ARRAY
51369: PPUSH
51370: LD_VAR 0 6
51374: PUSH
51375: LD_VAR 0 4
51379: ARRAY
51380: PUSH
51381: LD_INT 2
51383: ARRAY
51384: PPUSH
51385: CALL_OW 428
51389: PUSH
51390: LD_INT 0
51392: NONEQUAL
51393: OR
51394: IFFALSE 51416
// tmp := Delete ( tmp , i ) ;
51396: LD_ADDR_VAR 0 6
51400: PUSH
51401: LD_VAR 0 6
51405: PPUSH
51406: LD_VAR 0 4
51410: PPUSH
51411: CALL_OW 3
51415: ST_TO_ADDR
51416: GO 51314
51418: POP
51419: POP
// j := GetClosestHex ( unit , tmp ) ;
51420: LD_ADDR_VAR 0 5
51424: PUSH
51425: LD_VAR 0 1
51429: PPUSH
51430: LD_VAR 0 6
51434: PPUSH
51435: CALL 50712 0 2
51439: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51440: LD_VAR 0 1
51444: PPUSH
51445: LD_VAR 0 5
51449: PUSH
51450: LD_INT 1
51452: ARRAY
51453: PPUSH
51454: LD_VAR 0 5
51458: PUSH
51459: LD_INT 2
51461: ARRAY
51462: PPUSH
51463: CALL_OW 111
// result := j ;
51467: LD_ADDR_VAR 0 3
51471: PUSH
51472: LD_VAR 0 5
51476: ST_TO_ADDR
// end ;
51477: LD_VAR 0 3
51481: RET
// export function PrepareApemanSoldier ( ) ; begin
51482: LD_INT 0
51484: PPUSH
// uc_nation := 0 ;
51485: LD_ADDR_OWVAR 21
51489: PUSH
51490: LD_INT 0
51492: ST_TO_ADDR
// hc_sex := sex_male ;
51493: LD_ADDR_OWVAR 27
51497: PUSH
51498: LD_INT 1
51500: ST_TO_ADDR
// hc_name :=  ;
51501: LD_ADDR_OWVAR 26
51505: PUSH
51506: LD_STRING 
51508: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51509: LD_ADDR_OWVAR 28
51513: PUSH
51514: LD_INT 15
51516: ST_TO_ADDR
// hc_gallery :=  ;
51517: LD_ADDR_OWVAR 33
51521: PUSH
51522: LD_STRING 
51524: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51525: LD_ADDR_OWVAR 31
51529: PUSH
51530: LD_INT 0
51532: PPUSH
51533: LD_INT 3
51535: PPUSH
51536: CALL_OW 12
51540: PUSH
51541: LD_INT 0
51543: PPUSH
51544: LD_INT 3
51546: PPUSH
51547: CALL_OW 12
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51564: LD_ADDR_OWVAR 29
51568: PUSH
51569: LD_INT 10
51571: PUSH
51572: LD_INT 12
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: ST_TO_ADDR
// end ;
51579: LD_VAR 0 1
51583: RET
// export function PrepareApemanEngineer ( ) ; begin
51584: LD_INT 0
51586: PPUSH
// uc_nation := 0 ;
51587: LD_ADDR_OWVAR 21
51591: PUSH
51592: LD_INT 0
51594: ST_TO_ADDR
// hc_sex := sex_male ;
51595: LD_ADDR_OWVAR 27
51599: PUSH
51600: LD_INT 1
51602: ST_TO_ADDR
// hc_name :=  ;
51603: LD_ADDR_OWVAR 26
51607: PUSH
51608: LD_STRING 
51610: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51611: LD_ADDR_OWVAR 28
51615: PUSH
51616: LD_INT 16
51618: ST_TO_ADDR
// hc_gallery :=  ;
51619: LD_ADDR_OWVAR 33
51623: PUSH
51624: LD_STRING 
51626: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51627: LD_ADDR_OWVAR 31
51631: PUSH
51632: LD_INT 0
51634: PPUSH
51635: LD_INT 3
51637: PPUSH
51638: CALL_OW 12
51642: PUSH
51643: LD_INT 0
51645: PPUSH
51646: LD_INT 3
51648: PPUSH
51649: CALL_OW 12
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51666: LD_ADDR_OWVAR 29
51670: PUSH
51671: LD_INT 10
51673: PUSH
51674: LD_INT 12
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// end ;
51681: LD_VAR 0 1
51685: RET
// export function PrepareApeman ( agressivity ) ; begin
51686: LD_INT 0
51688: PPUSH
// uc_side := 0 ;
51689: LD_ADDR_OWVAR 20
51693: PUSH
51694: LD_INT 0
51696: ST_TO_ADDR
// uc_nation := 0 ;
51697: LD_ADDR_OWVAR 21
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// hc_sex := sex_male ;
51705: LD_ADDR_OWVAR 27
51709: PUSH
51710: LD_INT 1
51712: ST_TO_ADDR
// hc_class := class_apeman ;
51713: LD_ADDR_OWVAR 28
51717: PUSH
51718: LD_INT 12
51720: ST_TO_ADDR
// hc_gallery :=  ;
51721: LD_ADDR_OWVAR 33
51725: PUSH
51726: LD_STRING 
51728: ST_TO_ADDR
// hc_name :=  ;
51729: LD_ADDR_OWVAR 26
51733: PUSH
51734: LD_STRING 
51736: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51737: LD_ADDR_OWVAR 29
51741: PUSH
51742: LD_INT 10
51744: PUSH
51745: LD_INT 12
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// if agressivity = 0 then
51752: LD_VAR 0 1
51756: PUSH
51757: LD_INT 0
51759: EQUAL
51760: IFFALSE 51772
// hc_agressivity := 0 else
51762: LD_ADDR_OWVAR 35
51766: PUSH
51767: LD_INT 0
51769: ST_TO_ADDR
51770: GO 51793
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51772: LD_ADDR_OWVAR 35
51776: PUSH
51777: LD_VAR 0 1
51781: NEG
51782: PPUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: CALL_OW 12
51792: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51793: LD_ADDR_OWVAR 31
51797: PUSH
51798: LD_INT 0
51800: PPUSH
51801: LD_INT 3
51803: PPUSH
51804: CALL_OW 12
51808: PUSH
51809: LD_INT 0
51811: PPUSH
51812: LD_INT 3
51814: PPUSH
51815: CALL_OW 12
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// end ;
51832: LD_VAR 0 2
51836: RET
// export function PrepareTiger ( agressivity ) ; begin
51837: LD_INT 0
51839: PPUSH
// uc_side := 0 ;
51840: LD_ADDR_OWVAR 20
51844: PUSH
51845: LD_INT 0
51847: ST_TO_ADDR
// uc_nation := 0 ;
51848: LD_ADDR_OWVAR 21
51852: PUSH
51853: LD_INT 0
51855: ST_TO_ADDR
// InitHc ;
51856: CALL_OW 19
// hc_class := class_tiger ;
51860: LD_ADDR_OWVAR 28
51864: PUSH
51865: LD_INT 14
51867: ST_TO_ADDR
// hc_gallery :=  ;
51868: LD_ADDR_OWVAR 33
51872: PUSH
51873: LD_STRING 
51875: ST_TO_ADDR
// hc_name :=  ;
51876: LD_ADDR_OWVAR 26
51880: PUSH
51881: LD_STRING 
51883: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51884: LD_ADDR_OWVAR 35
51888: PUSH
51889: LD_VAR 0 1
51893: NEG
51894: PPUSH
51895: LD_VAR 0 1
51899: PPUSH
51900: CALL_OW 12
51904: ST_TO_ADDR
// end ;
51905: LD_VAR 0 2
51909: RET
// export function PrepareEnchidna ( ) ; begin
51910: LD_INT 0
51912: PPUSH
// uc_side := 0 ;
51913: LD_ADDR_OWVAR 20
51917: PUSH
51918: LD_INT 0
51920: ST_TO_ADDR
// uc_nation := 0 ;
51921: LD_ADDR_OWVAR 21
51925: PUSH
51926: LD_INT 0
51928: ST_TO_ADDR
// InitHc ;
51929: CALL_OW 19
// hc_class := class_baggie ;
51933: LD_ADDR_OWVAR 28
51937: PUSH
51938: LD_INT 13
51940: ST_TO_ADDR
// hc_gallery :=  ;
51941: LD_ADDR_OWVAR 33
51945: PUSH
51946: LD_STRING 
51948: ST_TO_ADDR
// hc_name :=  ;
51949: LD_ADDR_OWVAR 26
51953: PUSH
51954: LD_STRING 
51956: ST_TO_ADDR
// end ;
51957: LD_VAR 0 1
51961: RET
// export function PrepareFrog ( ) ; begin
51962: LD_INT 0
51964: PPUSH
// uc_side := 0 ;
51965: LD_ADDR_OWVAR 20
51969: PUSH
51970: LD_INT 0
51972: ST_TO_ADDR
// uc_nation := 0 ;
51973: LD_ADDR_OWVAR 21
51977: PUSH
51978: LD_INT 0
51980: ST_TO_ADDR
// InitHc ;
51981: CALL_OW 19
// hc_class := class_frog ;
51985: LD_ADDR_OWVAR 28
51989: PUSH
51990: LD_INT 19
51992: ST_TO_ADDR
// hc_gallery :=  ;
51993: LD_ADDR_OWVAR 33
51997: PUSH
51998: LD_STRING 
52000: ST_TO_ADDR
// hc_name :=  ;
52001: LD_ADDR_OWVAR 26
52005: PUSH
52006: LD_STRING 
52008: ST_TO_ADDR
// end ;
52009: LD_VAR 0 1
52013: RET
// export function PrepareFish ( ) ; begin
52014: LD_INT 0
52016: PPUSH
// uc_side := 0 ;
52017: LD_ADDR_OWVAR 20
52021: PUSH
52022: LD_INT 0
52024: ST_TO_ADDR
// uc_nation := 0 ;
52025: LD_ADDR_OWVAR 21
52029: PUSH
52030: LD_INT 0
52032: ST_TO_ADDR
// InitHc ;
52033: CALL_OW 19
// hc_class := class_fish ;
52037: LD_ADDR_OWVAR 28
52041: PUSH
52042: LD_INT 20
52044: ST_TO_ADDR
// hc_gallery :=  ;
52045: LD_ADDR_OWVAR 33
52049: PUSH
52050: LD_STRING 
52052: ST_TO_ADDR
// hc_name :=  ;
52053: LD_ADDR_OWVAR 26
52057: PUSH
52058: LD_STRING 
52060: ST_TO_ADDR
// end ;
52061: LD_VAR 0 1
52065: RET
// export function PrepareBird ( ) ; begin
52066: LD_INT 0
52068: PPUSH
// uc_side := 0 ;
52069: LD_ADDR_OWVAR 20
52073: PUSH
52074: LD_INT 0
52076: ST_TO_ADDR
// uc_nation := 0 ;
52077: LD_ADDR_OWVAR 21
52081: PUSH
52082: LD_INT 0
52084: ST_TO_ADDR
// InitHc ;
52085: CALL_OW 19
// hc_class := class_phororhacos ;
52089: LD_ADDR_OWVAR 28
52093: PUSH
52094: LD_INT 18
52096: ST_TO_ADDR
// hc_gallery :=  ;
52097: LD_ADDR_OWVAR 33
52101: PUSH
52102: LD_STRING 
52104: ST_TO_ADDR
// hc_name :=  ;
52105: LD_ADDR_OWVAR 26
52109: PUSH
52110: LD_STRING 
52112: ST_TO_ADDR
// end ;
52113: LD_VAR 0 1
52117: RET
// export function PrepareHorse ( ) ; begin
52118: LD_INT 0
52120: PPUSH
// uc_side := 0 ;
52121: LD_ADDR_OWVAR 20
52125: PUSH
52126: LD_INT 0
52128: ST_TO_ADDR
// uc_nation := 0 ;
52129: LD_ADDR_OWVAR 21
52133: PUSH
52134: LD_INT 0
52136: ST_TO_ADDR
// InitHc ;
52137: CALL_OW 19
// hc_class := class_horse ;
52141: LD_ADDR_OWVAR 28
52145: PUSH
52146: LD_INT 21
52148: ST_TO_ADDR
// hc_gallery :=  ;
52149: LD_ADDR_OWVAR 33
52153: PUSH
52154: LD_STRING 
52156: ST_TO_ADDR
// hc_name :=  ;
52157: LD_ADDR_OWVAR 26
52161: PUSH
52162: LD_STRING 
52164: ST_TO_ADDR
// end ;
52165: LD_VAR 0 1
52169: RET
// export function PrepareMastodont ( ) ; begin
52170: LD_INT 0
52172: PPUSH
// uc_side := 0 ;
52173: LD_ADDR_OWVAR 20
52177: PUSH
52178: LD_INT 0
52180: ST_TO_ADDR
// uc_nation := 0 ;
52181: LD_ADDR_OWVAR 21
52185: PUSH
52186: LD_INT 0
52188: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52189: LD_ADDR_OWVAR 37
52193: PUSH
52194: LD_INT 31
52196: ST_TO_ADDR
// vc_control := control_rider ;
52197: LD_ADDR_OWVAR 38
52201: PUSH
52202: LD_INT 4
52204: ST_TO_ADDR
// end ;
52205: LD_VAR 0 1
52209: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52210: LD_INT 0
52212: PPUSH
52213: PPUSH
52214: PPUSH
// uc_side = 0 ;
52215: LD_ADDR_OWVAR 20
52219: PUSH
52220: LD_INT 0
52222: ST_TO_ADDR
// uc_nation = 0 ;
52223: LD_ADDR_OWVAR 21
52227: PUSH
52228: LD_INT 0
52230: ST_TO_ADDR
// InitHc_All ( ) ;
52231: CALL_OW 584
// InitVc ;
52235: CALL_OW 20
// if mastodonts then
52239: LD_VAR 0 6
52243: IFFALSE 52310
// for i = 1 to mastodonts do
52245: LD_ADDR_VAR 0 11
52249: PUSH
52250: DOUBLE
52251: LD_INT 1
52253: DEC
52254: ST_TO_ADDR
52255: LD_VAR 0 6
52259: PUSH
52260: FOR_TO
52261: IFFALSE 52308
// begin vc_chassis := 31 ;
52263: LD_ADDR_OWVAR 37
52267: PUSH
52268: LD_INT 31
52270: ST_TO_ADDR
// vc_control := control_rider ;
52271: LD_ADDR_OWVAR 38
52275: PUSH
52276: LD_INT 4
52278: ST_TO_ADDR
// animal := CreateVehicle ;
52279: LD_ADDR_VAR 0 12
52283: PUSH
52284: CALL_OW 45
52288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52289: LD_VAR 0 12
52293: PPUSH
52294: LD_VAR 0 8
52298: PPUSH
52299: LD_INT 0
52301: PPUSH
52302: CALL 54452 0 3
// end ;
52306: GO 52260
52308: POP
52309: POP
// if horses then
52310: LD_VAR 0 5
52314: IFFALSE 52381
// for i = 1 to horses do
52316: LD_ADDR_VAR 0 11
52320: PUSH
52321: DOUBLE
52322: LD_INT 1
52324: DEC
52325: ST_TO_ADDR
52326: LD_VAR 0 5
52330: PUSH
52331: FOR_TO
52332: IFFALSE 52379
// begin hc_class := 21 ;
52334: LD_ADDR_OWVAR 28
52338: PUSH
52339: LD_INT 21
52341: ST_TO_ADDR
// hc_gallery :=  ;
52342: LD_ADDR_OWVAR 33
52346: PUSH
52347: LD_STRING 
52349: ST_TO_ADDR
// animal := CreateHuman ;
52350: LD_ADDR_VAR 0 12
52354: PUSH
52355: CALL_OW 44
52359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52360: LD_VAR 0 12
52364: PPUSH
52365: LD_VAR 0 8
52369: PPUSH
52370: LD_INT 0
52372: PPUSH
52373: CALL 54452 0 3
// end ;
52377: GO 52331
52379: POP
52380: POP
// if birds then
52381: LD_VAR 0 1
52385: IFFALSE 52452
// for i = 1 to birds do
52387: LD_ADDR_VAR 0 11
52391: PUSH
52392: DOUBLE
52393: LD_INT 1
52395: DEC
52396: ST_TO_ADDR
52397: LD_VAR 0 1
52401: PUSH
52402: FOR_TO
52403: IFFALSE 52450
// begin hc_class := 18 ;
52405: LD_ADDR_OWVAR 28
52409: PUSH
52410: LD_INT 18
52412: ST_TO_ADDR
// hc_gallery =  ;
52413: LD_ADDR_OWVAR 33
52417: PUSH
52418: LD_STRING 
52420: ST_TO_ADDR
// animal := CreateHuman ;
52421: LD_ADDR_VAR 0 12
52425: PUSH
52426: CALL_OW 44
52430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52431: LD_VAR 0 12
52435: PPUSH
52436: LD_VAR 0 8
52440: PPUSH
52441: LD_INT 0
52443: PPUSH
52444: CALL 54452 0 3
// end ;
52448: GO 52402
52450: POP
52451: POP
// if tigers then
52452: LD_VAR 0 2
52456: IFFALSE 52540
// for i = 1 to tigers do
52458: LD_ADDR_VAR 0 11
52462: PUSH
52463: DOUBLE
52464: LD_INT 1
52466: DEC
52467: ST_TO_ADDR
52468: LD_VAR 0 2
52472: PUSH
52473: FOR_TO
52474: IFFALSE 52538
// begin hc_class = class_tiger ;
52476: LD_ADDR_OWVAR 28
52480: PUSH
52481: LD_INT 14
52483: ST_TO_ADDR
// hc_gallery =  ;
52484: LD_ADDR_OWVAR 33
52488: PUSH
52489: LD_STRING 
52491: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52492: LD_ADDR_OWVAR 35
52496: PUSH
52497: LD_INT 7
52499: NEG
52500: PPUSH
52501: LD_INT 7
52503: PPUSH
52504: CALL_OW 12
52508: ST_TO_ADDR
// animal := CreateHuman ;
52509: LD_ADDR_VAR 0 12
52513: PUSH
52514: CALL_OW 44
52518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52519: LD_VAR 0 12
52523: PPUSH
52524: LD_VAR 0 8
52528: PPUSH
52529: LD_INT 0
52531: PPUSH
52532: CALL 54452 0 3
// end ;
52536: GO 52473
52538: POP
52539: POP
// if apemans then
52540: LD_VAR 0 3
52544: IFFALSE 52667
// for i = 1 to apemans do
52546: LD_ADDR_VAR 0 11
52550: PUSH
52551: DOUBLE
52552: LD_INT 1
52554: DEC
52555: ST_TO_ADDR
52556: LD_VAR 0 3
52560: PUSH
52561: FOR_TO
52562: IFFALSE 52665
// begin hc_class = class_apeman ;
52564: LD_ADDR_OWVAR 28
52568: PUSH
52569: LD_INT 12
52571: ST_TO_ADDR
// hc_gallery =  ;
52572: LD_ADDR_OWVAR 33
52576: PUSH
52577: LD_STRING 
52579: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52580: LD_ADDR_OWVAR 35
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PPUSH
52589: LD_INT 2
52591: PPUSH
52592: CALL_OW 12
52596: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52597: LD_ADDR_OWVAR 31
52601: PUSH
52602: LD_INT 1
52604: PPUSH
52605: LD_INT 3
52607: PPUSH
52608: CALL_OW 12
52612: PUSH
52613: LD_INT 1
52615: PPUSH
52616: LD_INT 3
52618: PPUSH
52619: CALL_OW 12
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// animal := CreateHuman ;
52636: LD_ADDR_VAR 0 12
52640: PUSH
52641: CALL_OW 44
52645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52646: LD_VAR 0 12
52650: PPUSH
52651: LD_VAR 0 8
52655: PPUSH
52656: LD_INT 0
52658: PPUSH
52659: CALL 54452 0 3
// end ;
52663: GO 52561
52665: POP
52666: POP
// if enchidnas then
52667: LD_VAR 0 4
52671: IFFALSE 52738
// for i = 1 to enchidnas do
52673: LD_ADDR_VAR 0 11
52677: PUSH
52678: DOUBLE
52679: LD_INT 1
52681: DEC
52682: ST_TO_ADDR
52683: LD_VAR 0 4
52687: PUSH
52688: FOR_TO
52689: IFFALSE 52736
// begin hc_class = 13 ;
52691: LD_ADDR_OWVAR 28
52695: PUSH
52696: LD_INT 13
52698: ST_TO_ADDR
// hc_gallery =  ;
52699: LD_ADDR_OWVAR 33
52703: PUSH
52704: LD_STRING 
52706: ST_TO_ADDR
// animal := CreateHuman ;
52707: LD_ADDR_VAR 0 12
52711: PUSH
52712: CALL_OW 44
52716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52717: LD_VAR 0 12
52721: PPUSH
52722: LD_VAR 0 8
52726: PPUSH
52727: LD_INT 0
52729: PPUSH
52730: CALL 54452 0 3
// end ;
52734: GO 52688
52736: POP
52737: POP
// if fishes then
52738: LD_VAR 0 7
52742: IFFALSE 52809
// for i = 1 to fishes do
52744: LD_ADDR_VAR 0 11
52748: PUSH
52749: DOUBLE
52750: LD_INT 1
52752: DEC
52753: ST_TO_ADDR
52754: LD_VAR 0 7
52758: PUSH
52759: FOR_TO
52760: IFFALSE 52807
// begin hc_class = 20 ;
52762: LD_ADDR_OWVAR 28
52766: PUSH
52767: LD_INT 20
52769: ST_TO_ADDR
// hc_gallery =  ;
52770: LD_ADDR_OWVAR 33
52774: PUSH
52775: LD_STRING 
52777: ST_TO_ADDR
// animal := CreateHuman ;
52778: LD_ADDR_VAR 0 12
52782: PUSH
52783: CALL_OW 44
52787: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52788: LD_VAR 0 12
52792: PPUSH
52793: LD_VAR 0 9
52797: PPUSH
52798: LD_INT 0
52800: PPUSH
52801: CALL 54452 0 3
// end ;
52805: GO 52759
52807: POP
52808: POP
// end ;
52809: LD_VAR 0 10
52813: RET
// export function WantHeal ( sci , unit ) ; begin
52814: LD_INT 0
52816: PPUSH
// if GetTaskList ( sci ) > 0 then
52817: LD_VAR 0 1
52821: PPUSH
52822: CALL_OW 437
52826: PUSH
52827: LD_INT 0
52829: GREATER
52830: IFFALSE 52902
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52832: LD_VAR 0 1
52836: PPUSH
52837: CALL_OW 437
52841: PUSH
52842: LD_INT 1
52844: ARRAY
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PUSH
52850: LD_STRING l
52852: EQUAL
52853: IFFALSE 52880
52855: PUSH
52856: LD_VAR 0 1
52860: PPUSH
52861: CALL_OW 437
52865: PUSH
52866: LD_INT 1
52868: ARRAY
52869: PUSH
52870: LD_INT 4
52872: ARRAY
52873: PUSH
52874: LD_VAR 0 2
52878: EQUAL
52879: AND
52880: IFFALSE 52892
// result := true else
52882: LD_ADDR_VAR 0 3
52886: PUSH
52887: LD_INT 1
52889: ST_TO_ADDR
52890: GO 52900
// result := false ;
52892: LD_ADDR_VAR 0 3
52896: PUSH
52897: LD_INT 0
52899: ST_TO_ADDR
// end else
52900: GO 52910
// result := false ;
52902: LD_ADDR_VAR 0 3
52906: PUSH
52907: LD_INT 0
52909: ST_TO_ADDR
// end ;
52910: LD_VAR 0 3
52914: RET
// export function HealTarget ( sci ) ; begin
52915: LD_INT 0
52917: PPUSH
// if not sci then
52918: LD_VAR 0 1
52922: NOT
52923: IFFALSE 52927
// exit ;
52925: GO 52992
// result := 0 ;
52927: LD_ADDR_VAR 0 2
52931: PUSH
52932: LD_INT 0
52934: ST_TO_ADDR
// if GetTaskList ( sci ) then
52935: LD_VAR 0 1
52939: PPUSH
52940: CALL_OW 437
52944: IFFALSE 52992
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52946: LD_VAR 0 1
52950: PPUSH
52951: CALL_OW 437
52955: PUSH
52956: LD_INT 1
52958: ARRAY
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PUSH
52964: LD_STRING l
52966: EQUAL
52967: IFFALSE 52992
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52969: LD_ADDR_VAR 0 2
52973: PUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 437
52983: PUSH
52984: LD_INT 1
52986: ARRAY
52987: PUSH
52988: LD_INT 4
52990: ARRAY
52991: ST_TO_ADDR
// end ;
52992: LD_VAR 0 2
52996: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52997: LD_INT 0
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
// if not base_units then
53003: LD_VAR 0 1
53007: NOT
53008: IFFALSE 53012
// exit ;
53010: GO 53099
// result := false ;
53012: LD_ADDR_VAR 0 2
53016: PUSH
53017: LD_INT 0
53019: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53020: LD_ADDR_VAR 0 5
53024: PUSH
53025: LD_VAR 0 1
53029: PPUSH
53030: LD_INT 21
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PPUSH
53040: CALL_OW 72
53044: ST_TO_ADDR
// if not tmp then
53045: LD_VAR 0 5
53049: NOT
53050: IFFALSE 53054
// exit ;
53052: GO 53099
// for i in tmp do
53054: LD_ADDR_VAR 0 3
53058: PUSH
53059: LD_VAR 0 5
53063: PUSH
53064: FOR_IN
53065: IFFALSE 53097
// begin result := EnemyInRange ( i , 22 ) ;
53067: LD_ADDR_VAR 0 2
53071: PUSH
53072: LD_VAR 0 3
53076: PPUSH
53077: LD_INT 22
53079: PPUSH
53080: CALL 50514 0 2
53084: ST_TO_ADDR
// if result then
53085: LD_VAR 0 2
53089: IFFALSE 53095
// exit ;
53091: POP
53092: POP
53093: GO 53099
// end ;
53095: GO 53064
53097: POP
53098: POP
// end ;
53099: LD_VAR 0 2
53103: RET
// export function FilterByTag ( units , tag ) ; begin
53104: LD_INT 0
53106: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53107: LD_ADDR_VAR 0 3
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: LD_INT 120
53119: PUSH
53120: LD_VAR 0 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PPUSH
53129: CALL_OW 72
53133: ST_TO_ADDR
// end ;
53134: LD_VAR 0 3
53138: RET
// export function IsDriver ( un ) ; begin
53139: LD_INT 0
53141: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53142: LD_ADDR_VAR 0 2
53146: PUSH
53147: LD_VAR 0 1
53151: PUSH
53152: LD_INT 55
53154: PUSH
53155: EMPTY
53156: LIST
53157: PPUSH
53158: CALL_OW 69
53162: IN
53163: ST_TO_ADDR
// end ;
53164: LD_VAR 0 2
53168: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53169: LD_INT 0
53171: PPUSH
53172: PPUSH
// list := [ ] ;
53173: LD_ADDR_VAR 0 5
53177: PUSH
53178: EMPTY
53179: ST_TO_ADDR
// case d of 0 :
53180: LD_VAR 0 3
53184: PUSH
53185: LD_INT 0
53187: DOUBLE
53188: EQUAL
53189: IFTRUE 53193
53191: GO 53326
53193: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53194: LD_ADDR_VAR 0 5
53198: PUSH
53199: LD_VAR 0 1
53203: PUSH
53204: LD_INT 4
53206: MINUS
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 4
53215: MINUS
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: PUSH
53225: LD_VAR 0 1
53229: PUSH
53230: LD_INT 3
53232: MINUS
53233: PUSH
53234: LD_VAR 0 2
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: PUSH
53247: LD_VAR 0 1
53251: PUSH
53252: LD_INT 4
53254: PLUS
53255: PUSH
53256: LD_VAR 0 2
53260: PUSH
53261: LD_INT 4
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: PUSH
53269: LD_VAR 0 1
53273: PUSH
53274: LD_INT 3
53276: PLUS
53277: PUSH
53278: LD_VAR 0 2
53282: PUSH
53283: LD_INT 3
53285: PLUS
53286: PUSH
53287: LD_INT 5
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: PUSH
53295: LD_VAR 0 1
53299: PUSH
53300: LD_VAR 0 2
53304: PUSH
53305: LD_INT 4
53307: PLUS
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: ST_TO_ADDR
// end ; 1 :
53324: GO 54024
53326: LD_INT 1
53328: DOUBLE
53329: EQUAL
53330: IFTRUE 53334
53332: GO 53467
53334: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53335: LD_ADDR_VAR 0 5
53339: PUSH
53340: LD_VAR 0 1
53344: PUSH
53345: LD_VAR 0 2
53349: PUSH
53350: LD_INT 4
53352: MINUS
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: PUSH
53362: LD_VAR 0 1
53366: PUSH
53367: LD_INT 3
53369: MINUS
53370: PUSH
53371: LD_VAR 0 2
53375: PUSH
53376: LD_INT 3
53378: MINUS
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: PUSH
53388: LD_VAR 0 1
53392: PUSH
53393: LD_INT 4
53395: MINUS
53396: PUSH
53397: LD_VAR 0 2
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: PUSH
53410: LD_VAR 0 1
53414: PUSH
53415: LD_VAR 0 2
53419: PUSH
53420: LD_INT 3
53422: PLUS
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: PUSH
53432: LD_VAR 0 1
53436: PUSH
53437: LD_INT 4
53439: PLUS
53440: PUSH
53441: LD_VAR 0 2
53445: PUSH
53446: LD_INT 4
53448: PLUS
53449: PUSH
53450: LD_INT 5
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: ST_TO_ADDR
// end ; 2 :
53465: GO 54024
53467: LD_INT 2
53469: DOUBLE
53470: EQUAL
53471: IFTRUE 53475
53473: GO 53604
53475: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53476: LD_ADDR_VAR 0 5
53480: PUSH
53481: LD_VAR 0 1
53485: PUSH
53486: LD_VAR 0 2
53490: PUSH
53491: LD_INT 3
53493: MINUS
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: PUSH
53503: LD_VAR 0 1
53507: PUSH
53508: LD_INT 4
53510: PLUS
53511: PUSH
53512: LD_VAR 0 2
53516: PUSH
53517: LD_INT 4
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: PUSH
53525: LD_VAR 0 1
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 4
53537: PLUS
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: PUSH
53547: LD_VAR 0 1
53551: PUSH
53552: LD_INT 3
53554: MINUS
53555: PUSH
53556: LD_VAR 0 2
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: PUSH
53569: LD_VAR 0 1
53573: PUSH
53574: LD_INT 4
53576: MINUS
53577: PUSH
53578: LD_VAR 0 2
53582: PUSH
53583: LD_INT 4
53585: MINUS
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// end ; 3 :
53602: GO 54024
53604: LD_INT 3
53606: DOUBLE
53607: EQUAL
53608: IFTRUE 53612
53610: GO 53745
53612: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53613: LD_ADDR_VAR 0 5
53617: PUSH
53618: LD_VAR 0 1
53622: PUSH
53623: LD_INT 3
53625: PLUS
53626: PUSH
53627: LD_VAR 0 2
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: PUSH
53640: LD_VAR 0 1
53644: PUSH
53645: LD_INT 4
53647: PLUS
53648: PUSH
53649: LD_VAR 0 2
53653: PUSH
53654: LD_INT 4
53656: PLUS
53657: PUSH
53658: LD_INT 5
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: PUSH
53666: LD_VAR 0 1
53670: PUSH
53671: LD_INT 4
53673: MINUS
53674: PUSH
53675: LD_VAR 0 2
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: PUSH
53688: LD_VAR 0 1
53692: PUSH
53693: LD_VAR 0 2
53697: PUSH
53698: LD_INT 4
53700: MINUS
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: PUSH
53710: LD_VAR 0 1
53714: PUSH
53715: LD_INT 3
53717: MINUS
53718: PUSH
53719: LD_VAR 0 2
53723: PUSH
53724: LD_INT 3
53726: MINUS
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// end ; 4 :
53743: GO 54024
53745: LD_INT 4
53747: DOUBLE
53748: EQUAL
53749: IFTRUE 53753
53751: GO 53886
53753: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53754: LD_ADDR_VAR 0 5
53758: PUSH
53759: LD_VAR 0 1
53763: PUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_INT 4
53771: PLUS
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 3
53788: PLUS
53789: PUSH
53790: LD_VAR 0 2
53794: PUSH
53795: LD_INT 3
53797: PLUS
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: PUSH
53807: LD_VAR 0 1
53811: PUSH
53812: LD_INT 4
53814: PLUS
53815: PUSH
53816: LD_VAR 0 2
53820: PUSH
53821: LD_INT 4
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: PUSH
53829: LD_VAR 0 1
53833: PUSH
53834: LD_VAR 0 2
53838: PUSH
53839: LD_INT 3
53841: MINUS
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: PUSH
53851: LD_VAR 0 1
53855: PUSH
53856: LD_INT 4
53858: MINUS
53859: PUSH
53860: LD_VAR 0 2
53864: PUSH
53865: LD_INT 4
53867: MINUS
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// end ; 5 :
53884: GO 54024
53886: LD_INT 5
53888: DOUBLE
53889: EQUAL
53890: IFTRUE 53894
53892: GO 54023
53894: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53895: LD_ADDR_VAR 0 5
53899: PUSH
53900: LD_VAR 0 1
53904: PUSH
53905: LD_INT 4
53907: MINUS
53908: PUSH
53909: LD_VAR 0 2
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: LIST
53921: PUSH
53922: LD_VAR 0 1
53926: PUSH
53927: LD_VAR 0 2
53931: PUSH
53932: LD_INT 4
53934: MINUS
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: PUSH
53944: LD_VAR 0 1
53948: PUSH
53949: LD_INT 4
53951: PLUS
53952: PUSH
53953: LD_VAR 0 2
53957: PUSH
53958: LD_INT 4
53960: PLUS
53961: PUSH
53962: LD_INT 5
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: PUSH
53970: LD_VAR 0 1
53974: PUSH
53975: LD_INT 3
53977: PLUS
53978: PUSH
53979: LD_VAR 0 2
53983: PUSH
53984: LD_INT 4
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: PUSH
53992: LD_VAR 0 1
53996: PUSH
53997: LD_VAR 0 2
54001: PUSH
54002: LD_INT 3
54004: PLUS
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// end ; end ;
54021: GO 54024
54023: POP
// result := list ;
54024: LD_ADDR_VAR 0 4
54028: PUSH
54029: LD_VAR 0 5
54033: ST_TO_ADDR
// end ;
54034: LD_VAR 0 4
54038: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54039: LD_INT 0
54041: PPUSH
54042: PPUSH
54043: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54044: LD_VAR 0 1
54048: NOT
54049: IFTRUE 54077
54051: PUSH
54052: LD_VAR 0 2
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 4
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: IN
54075: NOT
54076: OR
54077: IFFALSE 54081
// exit ;
54079: GO 54164
// tmp := [ ] ;
54081: LD_ADDR_VAR 0 5
54085: PUSH
54086: EMPTY
54087: ST_TO_ADDR
// for i in units do
54088: LD_ADDR_VAR 0 4
54092: PUSH
54093: LD_VAR 0 1
54097: PUSH
54098: FOR_IN
54099: IFFALSE 54133
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54101: LD_ADDR_VAR 0 5
54105: PUSH
54106: LD_VAR 0 5
54110: PPUSH
54111: LD_VAR 0 4
54115: PPUSH
54116: LD_VAR 0 2
54120: PPUSH
54121: CALL_OW 259
54125: PPUSH
54126: CALL 55559 0 2
54130: ST_TO_ADDR
54131: GO 54098
54133: POP
54134: POP
// if not tmp then
54135: LD_VAR 0 5
54139: NOT
54140: IFFALSE 54144
// exit ;
54142: GO 54164
// result := SortListByListDesc ( units , tmp ) ;
54144: LD_ADDR_VAR 0 3
54148: PUSH
54149: LD_VAR 0 1
54153: PPUSH
54154: LD_VAR 0 5
54158: PPUSH
54159: CALL_OW 77
54163: ST_TO_ADDR
// end ;
54164: LD_VAR 0 3
54168: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54169: LD_INT 0
54171: PPUSH
54172: PPUSH
54173: PPUSH
// result := false ;
54174: LD_ADDR_VAR 0 3
54178: PUSH
54179: LD_INT 0
54181: ST_TO_ADDR
// if not building then
54182: LD_VAR 0 2
54186: NOT
54187: IFFALSE 54191
// exit ;
54189: GO 54335
// x := GetX ( building ) ;
54191: LD_ADDR_VAR 0 4
54195: PUSH
54196: LD_VAR 0 2
54200: PPUSH
54201: CALL_OW 250
54205: ST_TO_ADDR
// y := GetY ( building ) ;
54206: LD_ADDR_VAR 0 5
54210: PUSH
54211: LD_VAR 0 2
54215: PPUSH
54216: CALL_OW 251
54220: ST_TO_ADDR
// if not x or not y then
54221: LD_VAR 0 4
54225: NOT
54226: IFTRUE 54235
54228: PUSH
54229: LD_VAR 0 5
54233: NOT
54234: OR
54235: IFFALSE 54239
// exit ;
54237: GO 54335
// if GetTaskList ( unit ) then
54239: LD_VAR 0 1
54243: PPUSH
54244: CALL_OW 437
54248: IFFALSE 54335
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54250: LD_STRING e
54252: PUSH
54253: LD_VAR 0 1
54257: PPUSH
54258: CALL_OW 437
54262: PUSH
54263: LD_INT 1
54265: ARRAY
54266: PUSH
54267: LD_INT 1
54269: ARRAY
54270: EQUAL
54271: IFFALSE 54298
54273: PUSH
54274: LD_VAR 0 4
54278: PUSH
54279: LD_VAR 0 1
54283: PPUSH
54284: CALL_OW 437
54288: PUSH
54289: LD_INT 1
54291: ARRAY
54292: PUSH
54293: LD_INT 2
54295: ARRAY
54296: EQUAL
54297: AND
54298: IFFALSE 54325
54300: PUSH
54301: LD_VAR 0 5
54305: PUSH
54306: LD_VAR 0 1
54310: PPUSH
54311: CALL_OW 437
54315: PUSH
54316: LD_INT 1
54318: ARRAY
54319: PUSH
54320: LD_INT 3
54322: ARRAY
54323: EQUAL
54324: AND
54325: IFFALSE 54335
// result := true end ;
54327: LD_ADDR_VAR 0 3
54331: PUSH
54332: LD_INT 1
54334: ST_TO_ADDR
// end ;
54335: LD_VAR 0 3
54339: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54340: LD_INT 0
54342: PPUSH
// result := false ;
54343: LD_ADDR_VAR 0 4
54347: PUSH
54348: LD_INT 0
54350: ST_TO_ADDR
// if GetTaskList ( unit ) then
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 437
54360: IFFALSE 54447
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54362: LD_STRING M
54364: PUSH
54365: LD_VAR 0 1
54369: PPUSH
54370: CALL_OW 437
54374: PUSH
54375: LD_INT 1
54377: ARRAY
54378: PUSH
54379: LD_INT 1
54381: ARRAY
54382: EQUAL
54383: IFFALSE 54410
54385: PUSH
54386: LD_VAR 0 2
54390: PUSH
54391: LD_VAR 0 1
54395: PPUSH
54396: CALL_OW 437
54400: PUSH
54401: LD_INT 1
54403: ARRAY
54404: PUSH
54405: LD_INT 2
54407: ARRAY
54408: EQUAL
54409: AND
54410: IFFALSE 54437
54412: PUSH
54413: LD_VAR 0 3
54417: PUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 437
54427: PUSH
54428: LD_INT 1
54430: ARRAY
54431: PUSH
54432: LD_INT 3
54434: ARRAY
54435: EQUAL
54436: AND
54437: IFFALSE 54447
// result := true ;
54439: LD_ADDR_VAR 0 4
54443: PUSH
54444: LD_INT 1
54446: ST_TO_ADDR
// end ; end ;
54447: LD_VAR 0 4
54451: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54452: LD_INT 0
54454: PPUSH
54455: PPUSH
54456: PPUSH
54457: PPUSH
// if not unit or not area then
54458: LD_VAR 0 1
54462: NOT
54463: IFTRUE 54472
54465: PUSH
54466: LD_VAR 0 2
54470: NOT
54471: OR
54472: IFFALSE 54476
// exit ;
54474: GO 54652
// tmp := AreaToList ( area , i ) ;
54476: LD_ADDR_VAR 0 6
54480: PUSH
54481: LD_VAR 0 2
54485: PPUSH
54486: LD_VAR 0 5
54490: PPUSH
54491: CALL_OW 517
54495: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54496: LD_ADDR_VAR 0 5
54500: PUSH
54501: DOUBLE
54502: LD_INT 1
54504: DEC
54505: ST_TO_ADDR
54506: LD_VAR 0 6
54510: PUSH
54511: LD_INT 1
54513: ARRAY
54514: PUSH
54515: FOR_TO
54516: IFFALSE 54650
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54518: LD_ADDR_VAR 0 7
54522: PUSH
54523: LD_VAR 0 6
54527: PUSH
54528: LD_INT 1
54530: ARRAY
54531: PUSH
54532: LD_VAR 0 5
54536: ARRAY
54537: PUSH
54538: LD_VAR 0 6
54542: PUSH
54543: LD_INT 2
54545: ARRAY
54546: PUSH
54547: LD_VAR 0 5
54551: ARRAY
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54557: LD_INT 92
54559: PUSH
54560: LD_VAR 0 7
54564: PUSH
54565: LD_INT 1
54567: ARRAY
54568: PUSH
54569: LD_VAR 0 7
54573: PUSH
54574: LD_INT 2
54576: ARRAY
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: PPUSH
54587: CALL_OW 69
54591: PUSH
54592: LD_INT 0
54594: EQUAL
54595: IFFALSE 54648
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54597: LD_VAR 0 1
54601: PPUSH
54602: LD_VAR 0 7
54606: PUSH
54607: LD_INT 1
54609: ARRAY
54610: PPUSH
54611: LD_VAR 0 7
54615: PUSH
54616: LD_INT 2
54618: ARRAY
54619: PPUSH
54620: LD_VAR 0 3
54624: PPUSH
54625: CALL_OW 48
// result := IsPlaced ( unit ) ;
54629: LD_ADDR_VAR 0 4
54633: PUSH
54634: LD_VAR 0 1
54638: PPUSH
54639: CALL_OW 305
54643: ST_TO_ADDR
// exit ;
54644: POP
54645: POP
54646: GO 54652
// end ; end ;
54648: GO 54515
54650: POP
54651: POP
// end ;
54652: LD_VAR 0 4
54656: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54657: LD_INT 0
54659: PPUSH
54660: PPUSH
54661: PPUSH
// if not side or side > 8 then
54662: LD_VAR 0 1
54666: NOT
54667: IFTRUE 54679
54669: PUSH
54670: LD_VAR 0 1
54674: PUSH
54675: LD_INT 8
54677: GREATER
54678: OR
54679: IFFALSE 54683
// exit ;
54681: GO 54870
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54683: LD_ADDR_VAR 0 4
54687: PUSH
54688: LD_INT 22
54690: PUSH
54691: LD_VAR 0 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 21
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PPUSH
54714: CALL_OW 69
54718: ST_TO_ADDR
// if not tmp then
54719: LD_VAR 0 4
54723: NOT
54724: IFFALSE 54728
// exit ;
54726: GO 54870
// enable_addtolog := true ;
54728: LD_ADDR_OWVAR 81
54732: PUSH
54733: LD_INT 1
54735: ST_TO_ADDR
// AddToLog ( [ ) ;
54736: LD_STRING [
54738: PPUSH
54739: CALL_OW 561
// for i in tmp do
54743: LD_ADDR_VAR 0 3
54747: PUSH
54748: LD_VAR 0 4
54752: PUSH
54753: FOR_IN
54754: IFFALSE 54861
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54756: LD_STRING [
54758: PUSH
54759: LD_VAR 0 3
54763: PPUSH
54764: CALL_OW 266
54768: STR
54769: PUSH
54770: LD_STRING , 
54772: STR
54773: PUSH
54774: LD_VAR 0 3
54778: PPUSH
54779: CALL_OW 250
54783: STR
54784: PUSH
54785: LD_STRING , 
54787: STR
54788: PUSH
54789: LD_VAR 0 3
54793: PPUSH
54794: CALL_OW 251
54798: STR
54799: PUSH
54800: LD_STRING , 
54802: STR
54803: PUSH
54804: LD_VAR 0 3
54808: PPUSH
54809: CALL_OW 254
54813: STR
54814: PUSH
54815: LD_STRING , 
54817: STR
54818: PUSH
54819: LD_VAR 0 3
54823: PPUSH
54824: LD_INT 1
54826: PPUSH
54827: CALL_OW 268
54831: STR
54832: PUSH
54833: LD_STRING , 
54835: STR
54836: PUSH
54837: LD_VAR 0 3
54841: PPUSH
54842: LD_INT 2
54844: PPUSH
54845: CALL_OW 268
54849: STR
54850: PUSH
54851: LD_STRING ],
54853: STR
54854: PPUSH
54855: CALL_OW 561
// end ;
54859: GO 54753
54861: POP
54862: POP
// AddToLog ( ]; ) ;
54863: LD_STRING ];
54865: PPUSH
54866: CALL_OW 561
// end ;
54870: LD_VAR 0 2
54874: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54875: LD_INT 0
54877: PPUSH
54878: PPUSH
54879: PPUSH
54880: PPUSH
54881: PPUSH
// if not area or not rate or not max then
54882: LD_VAR 0 1
54886: NOT
54887: IFTRUE 54896
54889: PUSH
54890: LD_VAR 0 2
54894: NOT
54895: OR
54896: IFTRUE 54905
54898: PUSH
54899: LD_VAR 0 4
54903: NOT
54904: OR
54905: IFFALSE 54909
// exit ;
54907: GO 55098
// while 1 do
54909: LD_INT 1
54911: IFFALSE 55098
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54913: LD_ADDR_VAR 0 9
54917: PUSH
54918: LD_VAR 0 1
54922: PPUSH
54923: LD_INT 1
54925: PPUSH
54926: CALL_OW 287
54930: PUSH
54931: LD_INT 10
54933: MUL
54934: ST_TO_ADDR
// r := rate / 10 ;
54935: LD_ADDR_VAR 0 7
54939: PUSH
54940: LD_VAR 0 2
54944: PUSH
54945: LD_INT 10
54947: DIVREAL
54948: ST_TO_ADDR
// time := 1 1$00 ;
54949: LD_ADDR_VAR 0 8
54953: PUSH
54954: LD_INT 2100
54956: ST_TO_ADDR
// if amount < min then
54957: LD_VAR 0 9
54961: PUSH
54962: LD_VAR 0 3
54966: LESS
54967: IFFALSE 54985
// r := r * 2 else
54969: LD_ADDR_VAR 0 7
54973: PUSH
54974: LD_VAR 0 7
54978: PUSH
54979: LD_INT 2
54981: MUL
54982: ST_TO_ADDR
54983: GO 55011
// if amount > max then
54985: LD_VAR 0 9
54989: PUSH
54990: LD_VAR 0 4
54994: GREATER
54995: IFFALSE 55011
// r := r / 2 ;
54997: LD_ADDR_VAR 0 7
55001: PUSH
55002: LD_VAR 0 7
55006: PUSH
55007: LD_INT 2
55009: DIVREAL
55010: ST_TO_ADDR
// time := time / r ;
55011: LD_ADDR_VAR 0 8
55015: PUSH
55016: LD_VAR 0 8
55020: PUSH
55021: LD_VAR 0 7
55025: DIVREAL
55026: ST_TO_ADDR
// if time < 0 then
55027: LD_VAR 0 8
55031: PUSH
55032: LD_INT 0
55034: LESS
55035: IFFALSE 55052
// time := time * - 1 ;
55037: LD_ADDR_VAR 0 8
55041: PUSH
55042: LD_VAR 0 8
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: MUL
55051: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55052: LD_VAR 0 8
55056: PUSH
55057: LD_INT 35
55059: PPUSH
55060: LD_INT 875
55062: PPUSH
55063: CALL_OW 12
55067: PLUS
55068: PPUSH
55069: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55073: LD_INT 1
55075: PPUSH
55076: LD_INT 5
55078: PPUSH
55079: CALL_OW 12
55083: PPUSH
55084: LD_VAR 0 1
55088: PPUSH
55089: LD_INT 1
55091: PPUSH
55092: CALL_OW 55
// end ;
55096: GO 54909
// end ;
55098: LD_VAR 0 5
55102: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55103: LD_INT 0
55105: PPUSH
55106: PPUSH
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
// if not turrets or not factories then
55113: LD_VAR 0 1
55117: NOT
55118: IFTRUE 55127
55120: PUSH
55121: LD_VAR 0 2
55125: NOT
55126: OR
55127: IFFALSE 55131
// exit ;
55129: GO 55438
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55131: LD_ADDR_VAR 0 10
55135: PUSH
55136: LD_INT 5
55138: PUSH
55139: LD_INT 6
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: LD_INT 4
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: LD_INT 5
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 24
55173: PUSH
55174: LD_INT 25
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 23
55183: PUSH
55184: LD_INT 27
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 42
55197: PUSH
55198: LD_INT 43
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 44
55207: PUSH
55208: LD_INT 46
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 45
55217: PUSH
55218: LD_INT 47
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// result := [ ] ;
55235: LD_ADDR_VAR 0 3
55239: PUSH
55240: EMPTY
55241: ST_TO_ADDR
// for i in turrets do
55242: LD_ADDR_VAR 0 4
55246: PUSH
55247: LD_VAR 0 1
55251: PUSH
55252: FOR_IN
55253: IFFALSE 55436
// begin nat := GetNation ( i ) ;
55255: LD_ADDR_VAR 0 7
55259: PUSH
55260: LD_VAR 0 4
55264: PPUSH
55265: CALL_OW 248
55269: ST_TO_ADDR
// weapon := 0 ;
55270: LD_ADDR_VAR 0 8
55274: PUSH
55275: LD_INT 0
55277: ST_TO_ADDR
// if not nat then
55278: LD_VAR 0 7
55282: NOT
55283: IFFALSE 55287
// continue ;
55285: GO 55252
// for j in list [ nat ] do
55287: LD_ADDR_VAR 0 5
55291: PUSH
55292: LD_VAR 0 10
55296: PUSH
55297: LD_VAR 0 7
55301: ARRAY
55302: PUSH
55303: FOR_IN
55304: IFFALSE 55345
// if GetBWeapon ( i ) = j [ 1 ] then
55306: LD_VAR 0 4
55310: PPUSH
55311: CALL_OW 269
55315: PUSH
55316: LD_VAR 0 5
55320: PUSH
55321: LD_INT 1
55323: ARRAY
55324: EQUAL
55325: IFFALSE 55343
// begin weapon := j [ 2 ] ;
55327: LD_ADDR_VAR 0 8
55331: PUSH
55332: LD_VAR 0 5
55336: PUSH
55337: LD_INT 2
55339: ARRAY
55340: ST_TO_ADDR
// break ;
55341: GO 55345
// end ;
55343: GO 55303
55345: POP
55346: POP
// if not weapon then
55347: LD_VAR 0 8
55351: NOT
55352: IFFALSE 55356
// continue ;
55354: GO 55252
// for k in factories do
55356: LD_ADDR_VAR 0 6
55360: PUSH
55361: LD_VAR 0 2
55365: PUSH
55366: FOR_IN
55367: IFFALSE 55432
// begin weapons := AvailableWeaponList ( k ) ;
55369: LD_ADDR_VAR 0 9
55373: PUSH
55374: LD_VAR 0 6
55378: PPUSH
55379: CALL_OW 478
55383: ST_TO_ADDR
// if not weapons then
55384: LD_VAR 0 9
55388: NOT
55389: IFFALSE 55393
// continue ;
55391: GO 55366
// if weapon in weapons then
55393: LD_VAR 0 8
55397: PUSH
55398: LD_VAR 0 9
55402: IN
55403: IFFALSE 55430
// begin result := [ i , weapon ] ;
55405: LD_ADDR_VAR 0 3
55409: PUSH
55410: LD_VAR 0 4
55414: PUSH
55415: LD_VAR 0 8
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// exit ;
55424: POP
55425: POP
55426: POP
55427: POP
55428: GO 55438
// end ; end ;
55430: GO 55366
55432: POP
55433: POP
// end ;
55434: GO 55252
55436: POP
55437: POP
// end ;
55438: LD_VAR 0 3
55442: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55443: LD_INT 0
55445: PPUSH
// if not side or side > 8 then
55446: LD_VAR 0 3
55450: NOT
55451: IFTRUE 55463
55453: PUSH
55454: LD_VAR 0 3
55458: PUSH
55459: LD_INT 8
55461: GREATER
55462: OR
55463: IFFALSE 55467
// exit ;
55465: GO 55526
// if not range then
55467: LD_VAR 0 4
55471: NOT
55472: IFFALSE 55483
// range := - 12 ;
55474: LD_ADDR_VAR 0 4
55478: PUSH
55479: LD_INT 12
55481: NEG
55482: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55483: LD_VAR 0 1
55487: PPUSH
55488: LD_VAR 0 2
55492: PPUSH
55493: LD_VAR 0 3
55497: PPUSH
55498: LD_VAR 0 4
55502: PPUSH
55503: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55507: LD_VAR 0 1
55511: PPUSH
55512: LD_VAR 0 2
55516: PPUSH
55517: LD_VAR 0 3
55521: PPUSH
55522: CALL_OW 331
// end ;
55526: LD_VAR 0 5
55530: RET
// export function Video ( mode ) ; begin
55531: LD_INT 0
55533: PPUSH
// ingame_video = mode ;
55534: LD_ADDR_OWVAR 52
55538: PUSH
55539: LD_VAR 0 1
55543: ST_TO_ADDR
// interface_hidden = mode ;
55544: LD_ADDR_OWVAR 54
55548: PUSH
55549: LD_VAR 0 1
55553: ST_TO_ADDR
// end ;
55554: LD_VAR 0 2
55558: RET
// export function Join ( array , element ) ; begin
55559: LD_INT 0
55561: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55562: LD_ADDR_VAR 0 3
55566: PUSH
55567: LD_VAR 0 1
55571: PPUSH
55572: LD_VAR 0 1
55576: PUSH
55577: LD_INT 1
55579: PLUS
55580: PPUSH
55581: LD_VAR 0 2
55585: PPUSH
55586: CALL_OW 1
55590: ST_TO_ADDR
// end ;
55591: LD_VAR 0 3
55595: RET
// export function JoinUnion ( array , element ) ; begin
55596: LD_INT 0
55598: PPUSH
// result := array union element ;
55599: LD_ADDR_VAR 0 3
55603: PUSH
55604: LD_VAR 0 1
55608: PUSH
55609: LD_VAR 0 2
55613: UNION
55614: ST_TO_ADDR
// end ;
55615: LD_VAR 0 3
55619: RET
// export function GetBehemoths ( side ) ; begin
55620: LD_INT 0
55622: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55623: LD_ADDR_VAR 0 2
55627: PUSH
55628: LD_INT 22
55630: PUSH
55631: LD_VAR 0 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 31
55642: PUSH
55643: LD_INT 25
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PPUSH
55654: CALL_OW 69
55658: ST_TO_ADDR
// end ;
55659: LD_VAR 0 2
55663: RET
// export function Shuffle ( array ) ; var i , index ; begin
55664: LD_INT 0
55666: PPUSH
55667: PPUSH
55668: PPUSH
// result := [ ] ;
55669: LD_ADDR_VAR 0 2
55673: PUSH
55674: EMPTY
55675: ST_TO_ADDR
// if not array then
55676: LD_VAR 0 1
55680: NOT
55681: IFFALSE 55685
// exit ;
55683: GO 55784
// Randomize ;
55685: CALL_OW 10
// for i = array downto 1 do
55689: LD_ADDR_VAR 0 3
55693: PUSH
55694: DOUBLE
55695: LD_VAR 0 1
55699: INC
55700: ST_TO_ADDR
55701: LD_INT 1
55703: PUSH
55704: FOR_DOWNTO
55705: IFFALSE 55782
// begin index := rand ( 1 , array ) ;
55707: LD_ADDR_VAR 0 4
55711: PUSH
55712: LD_INT 1
55714: PPUSH
55715: LD_VAR 0 1
55719: PPUSH
55720: CALL_OW 12
55724: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55725: LD_ADDR_VAR 0 2
55729: PUSH
55730: LD_VAR 0 2
55734: PPUSH
55735: LD_VAR 0 2
55739: PUSH
55740: LD_INT 1
55742: PLUS
55743: PPUSH
55744: LD_VAR 0 1
55748: PUSH
55749: LD_VAR 0 4
55753: ARRAY
55754: PPUSH
55755: CALL_OW 2
55759: ST_TO_ADDR
// array := Delete ( array , index ) ;
55760: LD_ADDR_VAR 0 1
55764: PUSH
55765: LD_VAR 0 1
55769: PPUSH
55770: LD_VAR 0 4
55774: PPUSH
55775: CALL_OW 3
55779: ST_TO_ADDR
// end ;
55780: GO 55704
55782: POP
55783: POP
// end ;
55784: LD_VAR 0 2
55788: RET
// export function GetBaseMaterials ( base ) ; begin
55789: LD_INT 0
55791: PPUSH
// result := [ 0 , 0 , 0 ] ;
55792: LD_ADDR_VAR 0 2
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// if not base then
55811: LD_VAR 0 1
55815: NOT
55816: IFFALSE 55820
// exit ;
55818: GO 55869
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55820: LD_ADDR_VAR 0 2
55824: PUSH
55825: LD_VAR 0 1
55829: PPUSH
55830: LD_INT 1
55832: PPUSH
55833: CALL_OW 275
55837: PUSH
55838: LD_VAR 0 1
55842: PPUSH
55843: LD_INT 2
55845: PPUSH
55846: CALL_OW 275
55850: PUSH
55851: LD_VAR 0 1
55855: PPUSH
55856: LD_INT 3
55858: PPUSH
55859: CALL_OW 275
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: ST_TO_ADDR
// end ;
55869: LD_VAR 0 2
55873: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55874: LD_INT 0
55876: PPUSH
55877: PPUSH
// result := array ;
55878: LD_ADDR_VAR 0 3
55882: PUSH
55883: LD_VAR 0 1
55887: ST_TO_ADDR
// if size >= result then
55888: LD_VAR 0 2
55892: PUSH
55893: LD_VAR 0 3
55897: GREATEREQUAL
55898: IFFALSE 55902
// exit ;
55900: GO 55952
// if size then
55902: LD_VAR 0 2
55906: IFFALSE 55952
// for i := array downto size do
55908: LD_ADDR_VAR 0 4
55912: PUSH
55913: DOUBLE
55914: LD_VAR 0 1
55918: INC
55919: ST_TO_ADDR
55920: LD_VAR 0 2
55924: PUSH
55925: FOR_DOWNTO
55926: IFFALSE 55950
// result := Delete ( result , result ) ;
55928: LD_ADDR_VAR 0 3
55932: PUSH
55933: LD_VAR 0 3
55937: PPUSH
55938: LD_VAR 0 3
55942: PPUSH
55943: CALL_OW 3
55947: ST_TO_ADDR
55948: GO 55925
55950: POP
55951: POP
// end ;
55952: LD_VAR 0 3
55956: RET
// export function ComExit ( unit ) ; var tmp ; begin
55957: LD_INT 0
55959: PPUSH
55960: PPUSH
// if not IsInUnit ( unit ) then
55961: LD_VAR 0 1
55965: PPUSH
55966: CALL_OW 310
55970: NOT
55971: IFFALSE 55975
// exit ;
55973: GO 56035
// tmp := IsInUnit ( unit ) ;
55975: LD_ADDR_VAR 0 3
55979: PUSH
55980: LD_VAR 0 1
55984: PPUSH
55985: CALL_OW 310
55989: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55990: LD_VAR 0 3
55994: PPUSH
55995: CALL_OW 247
55999: PUSH
56000: LD_INT 2
56002: EQUAL
56003: IFFALSE 56016
// ComExitVehicle ( unit ) else
56005: LD_VAR 0 1
56009: PPUSH
56010: CALL_OW 121
56014: GO 56025
// ComExitBuilding ( unit ) ;
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL_OW 122
// result := tmp ;
56025: LD_ADDR_VAR 0 2
56029: PUSH
56030: LD_VAR 0 3
56034: ST_TO_ADDR
// end ;
56035: LD_VAR 0 2
56039: RET
// export function ComExitAll ( units ) ; var i ; begin
56040: LD_INT 0
56042: PPUSH
56043: PPUSH
// if not units then
56044: LD_VAR 0 1
56048: NOT
56049: IFFALSE 56053
// exit ;
56051: GO 56079
// for i in units do
56053: LD_ADDR_VAR 0 3
56057: PUSH
56058: LD_VAR 0 1
56062: PUSH
56063: FOR_IN
56064: IFFALSE 56077
// ComExit ( i ) ;
56066: LD_VAR 0 3
56070: PPUSH
56071: CALL 55957 0 1
56075: GO 56063
56077: POP
56078: POP
// end ;
56079: LD_VAR 0 2
56083: RET
// export function ResetHc ; begin
56084: LD_INT 0
56086: PPUSH
// InitHc ;
56087: CALL_OW 19
// hc_importance := 0 ;
56091: LD_ADDR_OWVAR 32
56095: PUSH
56096: LD_INT 0
56098: ST_TO_ADDR
// end ;
56099: LD_VAR 0 1
56103: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56104: LD_INT 0
56106: PPUSH
56107: PPUSH
56108: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56109: LD_ADDR_VAR 0 6
56113: PUSH
56114: LD_VAR 0 1
56118: PUSH
56119: LD_VAR 0 3
56123: PLUS
56124: PUSH
56125: LD_INT 2
56127: DIV
56128: ST_TO_ADDR
// if _x < 0 then
56129: LD_VAR 0 6
56133: PUSH
56134: LD_INT 0
56136: LESS
56137: IFFALSE 56154
// _x := _x * - 1 ;
56139: LD_ADDR_VAR 0 6
56143: PUSH
56144: LD_VAR 0 6
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: MUL
56153: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56154: LD_ADDR_VAR 0 7
56158: PUSH
56159: LD_VAR 0 2
56163: PUSH
56164: LD_VAR 0 4
56168: PLUS
56169: PUSH
56170: LD_INT 2
56172: DIV
56173: ST_TO_ADDR
// if _y < 0 then
56174: LD_VAR 0 7
56178: PUSH
56179: LD_INT 0
56181: LESS
56182: IFFALSE 56199
// _y := _y * - 1 ;
56184: LD_ADDR_VAR 0 7
56188: PUSH
56189: LD_VAR 0 7
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: MUL
56198: ST_TO_ADDR
// result := [ _x , _y ] ;
56199: LD_ADDR_VAR 0 5
56203: PUSH
56204: LD_VAR 0 6
56208: PUSH
56209: LD_VAR 0 7
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// end ;
56218: LD_VAR 0 5
56222: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56223: LD_INT 0
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
// task := GetTaskList ( unit ) ;
56229: LD_ADDR_VAR 0 7
56233: PUSH
56234: LD_VAR 0 1
56238: PPUSH
56239: CALL_OW 437
56243: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56244: LD_VAR 0 7
56248: NOT
56249: IFFALSE 56268
56251: PUSH
56252: LD_VAR 0 1
56256: PPUSH
56257: LD_VAR 0 2
56261: PPUSH
56262: CALL_OW 308
56266: NOT
56267: AND
56268: IFFALSE 56272
// exit ;
56270: GO 56390
// if IsInArea ( unit , area ) then
56272: LD_VAR 0 1
56276: PPUSH
56277: LD_VAR 0 2
56281: PPUSH
56282: CALL_OW 308
56286: IFFALSE 56304
// begin ComMoveToArea ( unit , goAway ) ;
56288: LD_VAR 0 1
56292: PPUSH
56293: LD_VAR 0 3
56297: PPUSH
56298: CALL_OW 113
// exit ;
56302: GO 56390
// end ; if task [ 1 ] [ 1 ] <> M then
56304: LD_VAR 0 7
56308: PUSH
56309: LD_INT 1
56311: ARRAY
56312: PUSH
56313: LD_INT 1
56315: ARRAY
56316: PUSH
56317: LD_STRING M
56319: NONEQUAL
56320: IFFALSE 56324
// exit ;
56322: GO 56390
// x := task [ 1 ] [ 2 ] ;
56324: LD_ADDR_VAR 0 5
56328: PUSH
56329: LD_VAR 0 7
56333: PUSH
56334: LD_INT 1
56336: ARRAY
56337: PUSH
56338: LD_INT 2
56340: ARRAY
56341: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56342: LD_ADDR_VAR 0 6
56346: PUSH
56347: LD_VAR 0 7
56351: PUSH
56352: LD_INT 1
56354: ARRAY
56355: PUSH
56356: LD_INT 3
56358: ARRAY
56359: ST_TO_ADDR
// if InArea ( x , y , area ) then
56360: LD_VAR 0 5
56364: PPUSH
56365: LD_VAR 0 6
56369: PPUSH
56370: LD_VAR 0 2
56374: PPUSH
56375: CALL_OW 309
56379: IFFALSE 56390
// ComStop ( unit ) ;
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 141
// end ;
56390: LD_VAR 0 4
56394: RET
// export function Abs ( value ) ; begin
56395: LD_INT 0
56397: PPUSH
// result := value ;
56398: LD_ADDR_VAR 0 2
56402: PUSH
56403: LD_VAR 0 1
56407: ST_TO_ADDR
// if value < 0 then
56408: LD_VAR 0 1
56412: PUSH
56413: LD_INT 0
56415: LESS
56416: IFFALSE 56433
// result := value * - 1 ;
56418: LD_ADDR_VAR 0 2
56422: PUSH
56423: LD_VAR 0 1
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: MUL
56432: ST_TO_ADDR
// end ;
56433: LD_VAR 0 2
56437: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56438: LD_INT 0
56440: PPUSH
56441: PPUSH
56442: PPUSH
56443: PPUSH
56444: PPUSH
56445: PPUSH
56446: PPUSH
56447: PPUSH
// if not unit or not building then
56448: LD_VAR 0 1
56452: NOT
56453: IFTRUE 56462
56455: PUSH
56456: LD_VAR 0 2
56460: NOT
56461: OR
56462: IFFALSE 56466
// exit ;
56464: GO 56694
// x := GetX ( building ) ;
56466: LD_ADDR_VAR 0 4
56470: PUSH
56471: LD_VAR 0 2
56475: PPUSH
56476: CALL_OW 250
56480: ST_TO_ADDR
// y := GetY ( building ) ;
56481: LD_ADDR_VAR 0 6
56485: PUSH
56486: LD_VAR 0 2
56490: PPUSH
56491: CALL_OW 251
56495: ST_TO_ADDR
// d := GetDir ( building ) ;
56496: LD_ADDR_VAR 0 8
56500: PUSH
56501: LD_VAR 0 2
56505: PPUSH
56506: CALL_OW 254
56510: ST_TO_ADDR
// r := 4 ;
56511: LD_ADDR_VAR 0 9
56515: PUSH
56516: LD_INT 4
56518: ST_TO_ADDR
// for i := 1 to 5 do
56519: LD_ADDR_VAR 0 10
56523: PUSH
56524: DOUBLE
56525: LD_INT 1
56527: DEC
56528: ST_TO_ADDR
56529: LD_INT 5
56531: PUSH
56532: FOR_TO
56533: IFFALSE 56692
// begin _x := ShiftX ( x , d , r + i ) ;
56535: LD_ADDR_VAR 0 5
56539: PUSH
56540: LD_VAR 0 4
56544: PPUSH
56545: LD_VAR 0 8
56549: PPUSH
56550: LD_VAR 0 9
56554: PUSH
56555: LD_VAR 0 10
56559: PLUS
56560: PPUSH
56561: CALL_OW 272
56565: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56566: LD_ADDR_VAR 0 7
56570: PUSH
56571: LD_VAR 0 6
56575: PPUSH
56576: LD_VAR 0 8
56580: PPUSH
56581: LD_VAR 0 9
56585: PUSH
56586: LD_VAR 0 10
56590: PLUS
56591: PPUSH
56592: CALL_OW 273
56596: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56597: LD_VAR 0 5
56601: PPUSH
56602: LD_VAR 0 7
56606: PPUSH
56607: CALL_OW 488
56611: IFFALSE 56646
56613: PUSH
56614: LD_VAR 0 5
56618: PPUSH
56619: LD_VAR 0 7
56623: PPUSH
56624: CALL_OW 428
56628: PPUSH
56629: CALL_OW 247
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: IN
56644: NOT
56645: AND
56646: IFFALSE 56690
// begin ComMoveXY ( unit , _x , _y ) ;
56648: LD_VAR 0 1
56652: PPUSH
56653: LD_VAR 0 5
56657: PPUSH
56658: LD_VAR 0 7
56662: PPUSH
56663: CALL_OW 111
// result := [ _x , _y ] ;
56667: LD_ADDR_VAR 0 3
56671: PUSH
56672: LD_VAR 0 5
56676: PUSH
56677: LD_VAR 0 7
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// exit ;
56686: POP
56687: POP
56688: GO 56694
// end ; end ;
56690: GO 56532
56692: POP
56693: POP
// end ;
56694: LD_VAR 0 3
56698: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56699: LD_INT 0
56701: PPUSH
56702: PPUSH
56703: PPUSH
// result := 0 ;
56704: LD_ADDR_VAR 0 3
56708: PUSH
56709: LD_INT 0
56711: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56712: LD_VAR 0 1
56716: PUSH
56717: LD_INT 0
56719: LESS
56720: IFTRUE 56732
56722: PUSH
56723: LD_VAR 0 1
56727: PUSH
56728: LD_INT 8
56730: GREATER
56731: OR
56732: IFTRUE 56744
56734: PUSH
56735: LD_VAR 0 2
56739: PUSH
56740: LD_INT 0
56742: LESS
56743: OR
56744: IFTRUE 56756
56746: PUSH
56747: LD_VAR 0 2
56751: PUSH
56752: LD_INT 8
56754: GREATER
56755: OR
56756: IFFALSE 56760
// exit ;
56758: GO 56835
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56760: LD_ADDR_VAR 0 4
56764: PUSH
56765: LD_INT 22
56767: PUSH
56768: LD_VAR 0 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PPUSH
56777: CALL_OW 69
56781: PUSH
56782: FOR_IN
56783: IFFALSE 56833
// begin un := UnitShoot ( i ) ;
56785: LD_ADDR_VAR 0 5
56789: PUSH
56790: LD_VAR 0 4
56794: PPUSH
56795: CALL_OW 504
56799: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56800: LD_VAR 0 5
56804: PPUSH
56805: CALL_OW 255
56809: PUSH
56810: LD_VAR 0 1
56814: EQUAL
56815: IFFALSE 56831
// begin result := un ;
56817: LD_ADDR_VAR 0 3
56821: PUSH
56822: LD_VAR 0 5
56826: ST_TO_ADDR
// exit ;
56827: POP
56828: POP
56829: GO 56835
// end ; end ;
56831: GO 56782
56833: POP
56834: POP
// end ;
56835: LD_VAR 0 3
56839: RET
// export function GetCargoBay ( units ) ; begin
56840: LD_INT 0
56842: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56843: LD_ADDR_VAR 0 2
56847: PUSH
56848: LD_VAR 0 1
56852: PPUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 34
56858: PUSH
56859: LD_INT 12
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 34
56868: PUSH
56869: LD_INT 51
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 34
56878: PUSH
56879: LD_INT 32
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 34
56888: PUSH
56889: LD_INT 89
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: PPUSH
56903: CALL_OW 72
56907: ST_TO_ADDR
// end ;
56908: LD_VAR 0 2
56912: RET
// export function Negate ( value ) ; begin
56913: LD_INT 0
56915: PPUSH
// result := not value ;
56916: LD_ADDR_VAR 0 2
56920: PUSH
56921: LD_VAR 0 1
56925: NOT
56926: ST_TO_ADDR
// end ;
56927: LD_VAR 0 2
56931: RET
// export function Inc ( value ) ; begin
56932: LD_INT 0
56934: PPUSH
// result := value + 1 ;
56935: LD_ADDR_VAR 0 2
56939: PUSH
56940: LD_VAR 0 1
56944: PUSH
56945: LD_INT 1
56947: PLUS
56948: ST_TO_ADDR
// end ;
56949: LD_VAR 0 2
56953: RET
// export function Dec ( value ) ; begin
56954: LD_INT 0
56956: PPUSH
// result := value - 1 ;
56957: LD_ADDR_VAR 0 2
56961: PUSH
56962: LD_VAR 0 1
56966: PUSH
56967: LD_INT 1
56969: MINUS
56970: ST_TO_ADDR
// end ;
56971: LD_VAR 0 2
56975: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56976: LD_INT 0
56978: PPUSH
56979: PPUSH
56980: PPUSH
56981: PPUSH
56982: PPUSH
56983: PPUSH
56984: PPUSH
56985: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56986: LD_VAR 0 1
56990: PPUSH
56991: LD_VAR 0 2
56995: PPUSH
56996: CALL_OW 488
57000: NOT
57001: IFTRUE 57020
57003: PUSH
57004: LD_VAR 0 3
57008: PPUSH
57009: LD_VAR 0 4
57013: PPUSH
57014: CALL_OW 488
57018: NOT
57019: OR
57020: IFFALSE 57033
// begin result := - 1 ;
57022: LD_ADDR_VAR 0 5
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: ST_TO_ADDR
// exit ;
57031: GO 57268
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57033: LD_ADDR_VAR 0 12
57037: PUSH
57038: LD_VAR 0 1
57042: PPUSH
57043: LD_VAR 0 2
57047: PPUSH
57048: LD_VAR 0 3
57052: PPUSH
57053: LD_VAR 0 4
57057: PPUSH
57058: CALL 56104 0 4
57062: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57063: LD_ADDR_VAR 0 11
57067: PUSH
57068: LD_VAR 0 1
57072: PPUSH
57073: LD_VAR 0 2
57077: PPUSH
57078: LD_VAR 0 12
57082: PUSH
57083: LD_INT 1
57085: ARRAY
57086: PPUSH
57087: LD_VAR 0 12
57091: PUSH
57092: LD_INT 2
57094: ARRAY
57095: PPUSH
57096: CALL_OW 298
57100: ST_TO_ADDR
// distance := 9999 ;
57101: LD_ADDR_VAR 0 10
57105: PUSH
57106: LD_INT 9999
57108: ST_TO_ADDR
// for i := 0 to 5 do
57109: LD_ADDR_VAR 0 6
57113: PUSH
57114: DOUBLE
57115: LD_INT 0
57117: DEC
57118: ST_TO_ADDR
57119: LD_INT 5
57121: PUSH
57122: FOR_TO
57123: IFFALSE 57266
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57125: LD_ADDR_VAR 0 7
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: LD_VAR 0 6
57139: PPUSH
57140: LD_VAR 0 11
57144: PPUSH
57145: CALL_OW 272
57149: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57150: LD_ADDR_VAR 0 8
57154: PUSH
57155: LD_VAR 0 2
57159: PPUSH
57160: LD_VAR 0 6
57164: PPUSH
57165: LD_VAR 0 11
57169: PPUSH
57170: CALL_OW 273
57174: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57175: LD_VAR 0 7
57179: PPUSH
57180: LD_VAR 0 8
57184: PPUSH
57185: CALL_OW 488
57189: NOT
57190: IFFALSE 57194
// continue ;
57192: GO 57122
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57194: LD_ADDR_VAR 0 9
57198: PUSH
57199: LD_VAR 0 12
57203: PUSH
57204: LD_INT 1
57206: ARRAY
57207: PPUSH
57208: LD_VAR 0 12
57212: PUSH
57213: LD_INT 2
57215: ARRAY
57216: PPUSH
57217: LD_VAR 0 7
57221: PPUSH
57222: LD_VAR 0 8
57226: PPUSH
57227: CALL_OW 298
57231: ST_TO_ADDR
// if tmp < distance then
57232: LD_VAR 0 9
57236: PUSH
57237: LD_VAR 0 10
57241: LESS
57242: IFFALSE 57264
// begin result := i ;
57244: LD_ADDR_VAR 0 5
57248: PUSH
57249: LD_VAR 0 6
57253: ST_TO_ADDR
// distance := tmp ;
57254: LD_ADDR_VAR 0 10
57258: PUSH
57259: LD_VAR 0 9
57263: ST_TO_ADDR
// end ; end ;
57264: GO 57122
57266: POP
57267: POP
// end ;
57268: LD_VAR 0 5
57272: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57273: LD_INT 0
57275: PPUSH
57276: PPUSH
// if not driver or not IsInUnit ( driver ) then
57277: LD_VAR 0 1
57281: NOT
57282: IFTRUE 57296
57284: PUSH
57285: LD_VAR 0 1
57289: PPUSH
57290: CALL_OW 310
57294: NOT
57295: OR
57296: IFFALSE 57300
// exit ;
57298: GO 57390
// vehicle := IsInUnit ( driver ) ;
57300: LD_ADDR_VAR 0 3
57304: PUSH
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 310
57314: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57315: LD_VAR 0 1
57319: PPUSH
57320: LD_STRING \
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: PUSH
57350: LD_STRING E
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_VAR 0 3
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PPUSH
57386: CALL_OW 446
// end ;
57390: LD_VAR 0 2
57394: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57395: LD_INT 0
57397: PPUSH
57398: PPUSH
// if not driver or not IsInUnit ( driver ) then
57399: LD_VAR 0 1
57403: NOT
57404: IFTRUE 57418
57406: PUSH
57407: LD_VAR 0 1
57411: PPUSH
57412: CALL_OW 310
57416: NOT
57417: OR
57418: IFFALSE 57422
// exit ;
57420: GO 57512
// vehicle := IsInUnit ( driver ) ;
57422: LD_ADDR_VAR 0 3
57426: PUSH
57427: LD_VAR 0 1
57431: PPUSH
57432: CALL_OW 310
57436: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57437: LD_VAR 0 1
57441: PPUSH
57442: LD_STRING \
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: PUSH
57472: LD_STRING E
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_VAR 0 3
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PPUSH
57508: CALL_OW 447
// end ;
57512: LD_VAR 0 2
57516: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57517: LD_INT 0
57519: PPUSH
57520: PPUSH
57521: PPUSH
// tmp := [ ] ;
57522: LD_ADDR_VAR 0 5
57526: PUSH
57527: EMPTY
57528: ST_TO_ADDR
// for i in units do
57529: LD_ADDR_VAR 0 4
57533: PUSH
57534: LD_VAR 0 1
57538: PUSH
57539: FOR_IN
57540: IFFALSE 57578
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: LD_VAR 0 5
57551: PPUSH
57552: LD_VAR 0 5
57556: PUSH
57557: LD_INT 1
57559: PLUS
57560: PPUSH
57561: LD_VAR 0 4
57565: PPUSH
57566: CALL_OW 256
57570: PPUSH
57571: CALL_OW 2
57575: ST_TO_ADDR
57576: GO 57539
57578: POP
57579: POP
// if not tmp then
57580: LD_VAR 0 5
57584: NOT
57585: IFFALSE 57589
// exit ;
57587: GO 57637
// if asc then
57589: LD_VAR 0 2
57593: IFFALSE 57617
// result := SortListByListAsc ( units , tmp ) else
57595: LD_ADDR_VAR 0 3
57599: PUSH
57600: LD_VAR 0 1
57604: PPUSH
57605: LD_VAR 0 5
57609: PPUSH
57610: CALL_OW 76
57614: ST_TO_ADDR
57615: GO 57637
// result := SortListByListDesc ( units , tmp ) ;
57617: LD_ADDR_VAR 0 3
57621: PUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: LD_VAR 0 5
57631: PPUSH
57632: CALL_OW 77
57636: ST_TO_ADDR
// end ;
57637: LD_VAR 0 3
57641: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57642: LD_INT 0
57644: PPUSH
57645: PPUSH
// task := GetTaskList ( mech ) ;
57646: LD_ADDR_VAR 0 4
57650: PUSH
57651: LD_VAR 0 1
57655: PPUSH
57656: CALL_OW 437
57660: ST_TO_ADDR
// if not task then
57661: LD_VAR 0 4
57665: NOT
57666: IFFALSE 57670
// exit ;
57668: GO 57714
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57670: LD_ADDR_VAR 0 3
57674: PUSH
57675: LD_VAR 0 4
57679: PUSH
57680: LD_INT 1
57682: ARRAY
57683: PUSH
57684: LD_INT 1
57686: ARRAY
57687: PUSH
57688: LD_STRING r
57690: EQUAL
57691: IFFALSE 57713
57693: PUSH
57694: LD_VAR 0 4
57698: PUSH
57699: LD_INT 1
57701: ARRAY
57702: PUSH
57703: LD_INT 4
57705: ARRAY
57706: PUSH
57707: LD_VAR 0 2
57711: EQUAL
57712: AND
57713: ST_TO_ADDR
// end ;
57714: LD_VAR 0 3
57718: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57719: LD_INT 0
57721: PPUSH
// SetDir ( unit , d ) ;
57722: LD_VAR 0 1
57726: PPUSH
57727: LD_VAR 0 4
57731: PPUSH
57732: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57736: LD_ADDR_VAR 0 6
57740: PUSH
57741: LD_VAR 0 1
57745: PPUSH
57746: LD_VAR 0 2
57750: PPUSH
57751: LD_VAR 0 3
57755: PPUSH
57756: LD_VAR 0 5
57760: PPUSH
57761: CALL_OW 48
57765: ST_TO_ADDR
// end ;
57766: LD_VAR 0 6
57770: RET
// export function ToNaturalNumber ( number ) ; begin
57771: LD_INT 0
57773: PPUSH
// result := number div 1 ;
57774: LD_ADDR_VAR 0 2
57778: PUSH
57779: LD_VAR 0 1
57783: PUSH
57784: LD_INT 1
57786: DIV
57787: ST_TO_ADDR
// if number < 0 then
57788: LD_VAR 0 1
57792: PUSH
57793: LD_INT 0
57795: LESS
57796: IFFALSE 57806
// result := 0 ;
57798: LD_ADDR_VAR 0 2
57802: PUSH
57803: LD_INT 0
57805: ST_TO_ADDR
// end ;
57806: LD_VAR 0 2
57810: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57811: LD_INT 0
57813: PPUSH
57814: PPUSH
57815: PPUSH
// if not buildings then
57816: LD_VAR 0 1
57820: NOT
57821: IFFALSE 57825
// exit ;
57823: GO 57940
// tmp := [ ] ;
57825: LD_ADDR_VAR 0 5
57829: PUSH
57830: EMPTY
57831: ST_TO_ADDR
// for b in buildings do
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: LD_VAR 0 1
57841: PUSH
57842: FOR_IN
57843: IFFALSE 57881
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57845: LD_ADDR_VAR 0 5
57849: PUSH
57850: LD_VAR 0 5
57854: PPUSH
57855: LD_VAR 0 5
57859: PUSH
57860: LD_INT 1
57862: PLUS
57863: PPUSH
57864: LD_VAR 0 4
57868: PPUSH
57869: CALL_OW 266
57873: PPUSH
57874: CALL_OW 1
57878: ST_TO_ADDR
57879: GO 57842
57881: POP
57882: POP
// if not tmp then
57883: LD_VAR 0 5
57887: NOT
57888: IFFALSE 57892
// exit ;
57890: GO 57940
// if asc then
57892: LD_VAR 0 2
57896: IFFALSE 57920
// result := SortListByListAsc ( buildings , tmp ) else
57898: LD_ADDR_VAR 0 3
57902: PUSH
57903: LD_VAR 0 1
57907: PPUSH
57908: LD_VAR 0 5
57912: PPUSH
57913: CALL_OW 76
57917: ST_TO_ADDR
57918: GO 57940
// result := SortListByListDesc ( buildings , tmp ) ;
57920: LD_ADDR_VAR 0 3
57924: PUSH
57925: LD_VAR 0 1
57929: PPUSH
57930: LD_VAR 0 5
57934: PPUSH
57935: CALL_OW 77
57939: ST_TO_ADDR
// end ;
57940: LD_VAR 0 3
57944: RET
// export function SortByClass ( units , class ) ; var un ; begin
57945: LD_INT 0
57947: PPUSH
57948: PPUSH
// if not units or not class then
57949: LD_VAR 0 1
57953: NOT
57954: IFTRUE 57963
57956: PUSH
57957: LD_VAR 0 2
57961: NOT
57962: OR
57963: IFFALSE 57967
// exit ;
57965: GO 58062
// result := [ ] ;
57967: LD_ADDR_VAR 0 3
57971: PUSH
57972: EMPTY
57973: ST_TO_ADDR
// for un in units do
57974: LD_ADDR_VAR 0 4
57978: PUSH
57979: LD_VAR 0 1
57983: PUSH
57984: FOR_IN
57985: IFFALSE 58060
// if GetClass ( un ) = class then
57987: LD_VAR 0 4
57991: PPUSH
57992: CALL_OW 257
57996: PUSH
57997: LD_VAR 0 2
58001: EQUAL
58002: IFFALSE 58029
// result := Insert ( result , 1 , un ) else
58004: LD_ADDR_VAR 0 3
58008: PUSH
58009: LD_VAR 0 3
58013: PPUSH
58014: LD_INT 1
58016: PPUSH
58017: LD_VAR 0 4
58021: PPUSH
58022: CALL_OW 2
58026: ST_TO_ADDR
58027: GO 58058
// result := Replace ( result , result + 1 , un ) ;
58029: LD_ADDR_VAR 0 3
58033: PUSH
58034: LD_VAR 0 3
58038: PPUSH
58039: LD_VAR 0 3
58043: PUSH
58044: LD_INT 1
58046: PLUS
58047: PPUSH
58048: LD_VAR 0 4
58052: PPUSH
58053: CALL_OW 1
58057: ST_TO_ADDR
58058: GO 57984
58060: POP
58061: POP
// end ;
58062: LD_VAR 0 3
58066: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58067: LD_INT 0
58069: PPUSH
58070: PPUSH
58071: PPUSH
58072: PPUSH
58073: PPUSH
58074: PPUSH
58075: PPUSH
// result := [ ] ;
58076: LD_ADDR_VAR 0 4
58080: PUSH
58081: EMPTY
58082: ST_TO_ADDR
// if x - r < 0 then
58083: LD_VAR 0 1
58087: PUSH
58088: LD_VAR 0 3
58092: MINUS
58093: PUSH
58094: LD_INT 0
58096: LESS
58097: IFFALSE 58109
// min_x := 0 else
58099: LD_ADDR_VAR 0 8
58103: PUSH
58104: LD_INT 0
58106: ST_TO_ADDR
58107: GO 58125
// min_x := x - r ;
58109: LD_ADDR_VAR 0 8
58113: PUSH
58114: LD_VAR 0 1
58118: PUSH
58119: LD_VAR 0 3
58123: MINUS
58124: ST_TO_ADDR
// if y - r < 0 then
58125: LD_VAR 0 2
58129: PUSH
58130: LD_VAR 0 3
58134: MINUS
58135: PUSH
58136: LD_INT 0
58138: LESS
58139: IFFALSE 58151
// min_y := 0 else
58141: LD_ADDR_VAR 0 7
58145: PUSH
58146: LD_INT 0
58148: ST_TO_ADDR
58149: GO 58167
// min_y := y - r ;
58151: LD_ADDR_VAR 0 7
58155: PUSH
58156: LD_VAR 0 2
58160: PUSH
58161: LD_VAR 0 3
58165: MINUS
58166: ST_TO_ADDR
// max_x := x + r ;
58167: LD_ADDR_VAR 0 9
58171: PUSH
58172: LD_VAR 0 1
58176: PUSH
58177: LD_VAR 0 3
58181: PLUS
58182: ST_TO_ADDR
// max_y := y + r ;
58183: LD_ADDR_VAR 0 10
58187: PUSH
58188: LD_VAR 0 2
58192: PUSH
58193: LD_VAR 0 3
58197: PLUS
58198: ST_TO_ADDR
// for _x = min_x to max_x do
58199: LD_ADDR_VAR 0 5
58203: PUSH
58204: DOUBLE
58205: LD_VAR 0 8
58209: DEC
58210: ST_TO_ADDR
58211: LD_VAR 0 9
58215: PUSH
58216: FOR_TO
58217: IFFALSE 58318
// for _y = min_y to max_y do
58219: LD_ADDR_VAR 0 6
58223: PUSH
58224: DOUBLE
58225: LD_VAR 0 7
58229: DEC
58230: ST_TO_ADDR
58231: LD_VAR 0 10
58235: PUSH
58236: FOR_TO
58237: IFFALSE 58314
// begin if not ValidHex ( _x , _y ) then
58239: LD_VAR 0 5
58243: PPUSH
58244: LD_VAR 0 6
58248: PPUSH
58249: CALL_OW 488
58253: NOT
58254: IFFALSE 58258
// continue ;
58256: GO 58236
// if GetResourceTypeXY ( _x , _y ) then
58258: LD_VAR 0 5
58262: PPUSH
58263: LD_VAR 0 6
58267: PPUSH
58268: CALL_OW 283
58272: IFFALSE 58312
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58274: LD_ADDR_VAR 0 4
58278: PUSH
58279: LD_VAR 0 4
58283: PPUSH
58284: LD_VAR 0 4
58288: PUSH
58289: LD_INT 1
58291: PLUS
58292: PPUSH
58293: LD_VAR 0 5
58297: PUSH
58298: LD_VAR 0 6
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PPUSH
58307: CALL_OW 1
58311: ST_TO_ADDR
// end ;
58312: GO 58236
58314: POP
58315: POP
58316: GO 58216
58318: POP
58319: POP
// end ;
58320: LD_VAR 0 4
58324: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
// if not units then
58335: LD_VAR 0 1
58339: NOT
58340: IFFALSE 58344
// exit ;
58342: GO 58876
// result := UnitFilter ( units , [ f_ok ] ) ;
58344: LD_ADDR_VAR 0 3
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: LD_INT 50
58356: PUSH
58357: EMPTY
58358: LIST
58359: PPUSH
58360: CALL_OW 72
58364: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58365: LD_ADDR_VAR 0 8
58369: PUSH
58370: LD_VAR 0 1
58374: PUSH
58375: LD_INT 1
58377: ARRAY
58378: PPUSH
58379: CALL_OW 255
58383: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58384: LD_ADDR_VAR 0 10
58388: PUSH
58389: LD_INT 29
58391: PUSH
58392: LD_INT 91
58394: PUSH
58395: LD_INT 49
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// if not result then
58403: LD_VAR 0 3
58407: NOT
58408: IFFALSE 58412
// exit ;
58410: GO 58876
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58412: LD_ADDR_VAR 0 5
58416: PUSH
58417: LD_INT 81
58419: PUSH
58420: LD_VAR 0 8
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PPUSH
58429: CALL_OW 69
58433: ST_TO_ADDR
// for i in result do
58434: LD_ADDR_VAR 0 4
58438: PUSH
58439: LD_VAR 0 3
58443: PUSH
58444: FOR_IN
58445: IFFALSE 58874
// begin tag := GetTag ( i ) + 1 ;
58447: LD_ADDR_VAR 0 9
58451: PUSH
58452: LD_VAR 0 4
58456: PPUSH
58457: CALL_OW 110
58461: PUSH
58462: LD_INT 1
58464: PLUS
58465: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58466: LD_ADDR_VAR 0 7
58470: PUSH
58471: LD_VAR 0 4
58475: PPUSH
58476: CALL_OW 250
58480: PPUSH
58481: LD_VAR 0 4
58485: PPUSH
58486: CALL_OW 251
58490: PPUSH
58491: LD_INT 4
58493: PPUSH
58494: CALL 58067 0 3
58498: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58499: LD_VAR 0 4
58503: PPUSH
58504: CALL_OW 247
58508: PUSH
58509: LD_INT 2
58511: EQUAL
58512: IFFALSE 58524
58514: PUSH
58515: LD_VAR 0 7
58519: PUSH
58520: LD_INT 2
58522: GREATER
58523: AND
58524: IFFALSE 58544
58526: PUSH
58527: LD_VAR 0 4
58531: PPUSH
58532: CALL_OW 264
58536: PUSH
58537: LD_VAR 0 10
58541: IN
58542: NOT
58543: AND
58544: IFFALSE 58583
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58546: LD_VAR 0 4
58550: PPUSH
58551: LD_VAR 0 7
58555: PUSH
58556: LD_INT 1
58558: ARRAY
58559: PUSH
58560: LD_INT 1
58562: ARRAY
58563: PPUSH
58564: LD_VAR 0 7
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PUSH
58573: LD_INT 2
58575: ARRAY
58576: PPUSH
58577: CALL_OW 116
58581: GO 58872
// if path > tag then
58583: LD_VAR 0 2
58587: PUSH
58588: LD_VAR 0 9
58592: GREATER
58593: IFFALSE 58801
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58595: LD_ADDR_VAR 0 6
58599: PUSH
58600: LD_VAR 0 5
58604: PPUSH
58605: LD_INT 91
58607: PUSH
58608: LD_VAR 0 4
58612: PUSH
58613: LD_INT 8
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: PPUSH
58621: CALL_OW 72
58625: ST_TO_ADDR
// if nearEnemy then
58626: LD_VAR 0 6
58630: IFFALSE 58699
// begin if GetWeapon ( i ) = ru_time_lapser then
58632: LD_VAR 0 4
58636: PPUSH
58637: CALL_OW 264
58641: PUSH
58642: LD_INT 49
58644: EQUAL
58645: IFFALSE 58673
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58647: LD_VAR 0 4
58651: PPUSH
58652: LD_VAR 0 6
58656: PPUSH
58657: LD_VAR 0 4
58661: PPUSH
58662: CALL_OW 74
58666: PPUSH
58667: CALL_OW 112
58671: GO 58697
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58673: LD_VAR 0 4
58677: PPUSH
58678: LD_VAR 0 6
58682: PPUSH
58683: LD_VAR 0 4
58687: PPUSH
58688: CALL_OW 74
58692: PPUSH
58693: CALL 59957 0 2
// end else
58697: GO 58799
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58699: LD_VAR 0 4
58703: PPUSH
58704: LD_VAR 0 2
58708: PUSH
58709: LD_VAR 0 9
58713: ARRAY
58714: PUSH
58715: LD_INT 1
58717: ARRAY
58718: PPUSH
58719: LD_VAR 0 2
58723: PUSH
58724: LD_VAR 0 9
58728: ARRAY
58729: PUSH
58730: LD_INT 2
58732: ARRAY
58733: PPUSH
58734: CALL_OW 297
58738: PUSH
58739: LD_INT 6
58741: GREATER
58742: IFFALSE 58785
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58744: LD_VAR 0 4
58748: PPUSH
58749: LD_VAR 0 2
58753: PUSH
58754: LD_VAR 0 9
58758: ARRAY
58759: PUSH
58760: LD_INT 1
58762: ARRAY
58763: PPUSH
58764: LD_VAR 0 2
58768: PUSH
58769: LD_VAR 0 9
58773: ARRAY
58774: PUSH
58775: LD_INT 2
58777: ARRAY
58778: PPUSH
58779: CALL_OW 114
58783: GO 58799
// SetTag ( i , tag ) ;
58785: LD_VAR 0 4
58789: PPUSH
58790: LD_VAR 0 9
58794: PPUSH
58795: CALL_OW 109
// end else
58799: GO 58872
// if enemy then
58801: LD_VAR 0 5
58805: IFFALSE 58872
// begin if GetWeapon ( i ) = ru_time_lapser then
58807: LD_VAR 0 4
58811: PPUSH
58812: CALL_OW 264
58816: PUSH
58817: LD_INT 49
58819: EQUAL
58820: IFFALSE 58848
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58822: LD_VAR 0 4
58826: PPUSH
58827: LD_VAR 0 5
58831: PPUSH
58832: LD_VAR 0 4
58836: PPUSH
58837: CALL_OW 74
58841: PPUSH
58842: CALL_OW 112
58846: GO 58872
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58848: LD_VAR 0 4
58852: PPUSH
58853: LD_VAR 0 5
58857: PPUSH
58858: LD_VAR 0 4
58862: PPUSH
58863: CALL_OW 74
58867: PPUSH
58868: CALL 59957 0 2
// end ; end ;
58872: GO 58444
58874: POP
58875: POP
// end ;
58876: LD_VAR 0 3
58880: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58881: LD_INT 0
58883: PPUSH
58884: PPUSH
58885: PPUSH
// if not unit or IsInUnit ( unit ) then
58886: LD_VAR 0 1
58890: NOT
58891: IFTRUE 58904
58893: PUSH
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL_OW 310
58903: OR
58904: IFFALSE 58908
// exit ;
58906: GO 58999
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58908: LD_ADDR_VAR 0 4
58912: PUSH
58913: LD_VAR 0 1
58917: PPUSH
58918: CALL_OW 250
58922: PPUSH
58923: LD_VAR 0 2
58927: PPUSH
58928: LD_INT 1
58930: PPUSH
58931: CALL_OW 272
58935: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58936: LD_ADDR_VAR 0 5
58940: PUSH
58941: LD_VAR 0 1
58945: PPUSH
58946: CALL_OW 251
58950: PPUSH
58951: LD_VAR 0 2
58955: PPUSH
58956: LD_INT 1
58958: PPUSH
58959: CALL_OW 273
58963: ST_TO_ADDR
// if ValidHex ( x , y ) then
58964: LD_VAR 0 4
58968: PPUSH
58969: LD_VAR 0 5
58973: PPUSH
58974: CALL_OW 488
58978: IFFALSE 58999
// ComTurnXY ( unit , x , y ) ;
58980: LD_VAR 0 1
58984: PPUSH
58985: LD_VAR 0 4
58989: PPUSH
58990: LD_VAR 0 5
58994: PPUSH
58995: CALL_OW 118
// end ;
58999: LD_VAR 0 3
59003: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59004: LD_INT 0
59006: PPUSH
59007: PPUSH
// result := false ;
59008: LD_ADDR_VAR 0 3
59012: PUSH
59013: LD_INT 0
59015: ST_TO_ADDR
// if not units then
59016: LD_VAR 0 2
59020: NOT
59021: IFFALSE 59025
// exit ;
59023: GO 59070
// for i in units do
59025: LD_ADDR_VAR 0 4
59029: PUSH
59030: LD_VAR 0 2
59034: PUSH
59035: FOR_IN
59036: IFFALSE 59068
// if See ( side , i ) then
59038: LD_VAR 0 1
59042: PPUSH
59043: LD_VAR 0 4
59047: PPUSH
59048: CALL_OW 292
59052: IFFALSE 59066
// begin result := true ;
59054: LD_ADDR_VAR 0 3
59058: PUSH
59059: LD_INT 1
59061: ST_TO_ADDR
// exit ;
59062: POP
59063: POP
59064: GO 59070
// end ;
59066: GO 59035
59068: POP
59069: POP
// end ;
59070: LD_VAR 0 3
59074: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59075: LD_INT 0
59077: PPUSH
59078: PPUSH
59079: PPUSH
59080: PPUSH
// if not unit or not points then
59081: LD_VAR 0 1
59085: NOT
59086: IFTRUE 59095
59088: PUSH
59089: LD_VAR 0 2
59093: NOT
59094: OR
59095: IFFALSE 59099
// exit ;
59097: GO 59189
// dist := 99999 ;
59099: LD_ADDR_VAR 0 5
59103: PUSH
59104: LD_INT 99999
59106: ST_TO_ADDR
// for i in points do
59107: LD_ADDR_VAR 0 4
59111: PUSH
59112: LD_VAR 0 2
59116: PUSH
59117: FOR_IN
59118: IFFALSE 59187
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59120: LD_ADDR_VAR 0 6
59124: PUSH
59125: LD_VAR 0 1
59129: PPUSH
59130: LD_VAR 0 4
59134: PUSH
59135: LD_INT 1
59137: ARRAY
59138: PPUSH
59139: LD_VAR 0 4
59143: PUSH
59144: LD_INT 2
59146: ARRAY
59147: PPUSH
59148: CALL_OW 297
59152: ST_TO_ADDR
// if tmpDist < dist then
59153: LD_VAR 0 6
59157: PUSH
59158: LD_VAR 0 5
59162: LESS
59163: IFFALSE 59185
// begin result := i ;
59165: LD_ADDR_VAR 0 3
59169: PUSH
59170: LD_VAR 0 4
59174: ST_TO_ADDR
// dist := tmpDist ;
59175: LD_ADDR_VAR 0 5
59179: PUSH
59180: LD_VAR 0 6
59184: ST_TO_ADDR
// end ; end ;
59185: GO 59117
59187: POP
59188: POP
// end ;
59189: LD_VAR 0 3
59193: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59194: LD_INT 0
59196: PPUSH
// uc_side := side ;
59197: LD_ADDR_OWVAR 20
59201: PUSH
59202: LD_VAR 0 1
59206: ST_TO_ADDR
// uc_nation := 3 ;
59207: LD_ADDR_OWVAR 21
59211: PUSH
59212: LD_INT 3
59214: ST_TO_ADDR
// vc_chassis := 25 ;
59215: LD_ADDR_OWVAR 37
59219: PUSH
59220: LD_INT 25
59222: ST_TO_ADDR
// vc_engine := engine_siberite ;
59223: LD_ADDR_OWVAR 39
59227: PUSH
59228: LD_INT 3
59230: ST_TO_ADDR
// vc_control := control_computer ;
59231: LD_ADDR_OWVAR 38
59235: PUSH
59236: LD_INT 3
59238: ST_TO_ADDR
// vc_weapon := 59 ;
59239: LD_ADDR_OWVAR 40
59243: PUSH
59244: LD_INT 59
59246: ST_TO_ADDR
// result := CreateVehicle ;
59247: LD_ADDR_VAR 0 5
59251: PUSH
59252: CALL_OW 45
59256: ST_TO_ADDR
// SetDir ( result , d ) ;
59257: LD_VAR 0 5
59261: PPUSH
59262: LD_VAR 0 4
59266: PPUSH
59267: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59271: LD_VAR 0 5
59275: PPUSH
59276: LD_VAR 0 2
59280: PPUSH
59281: LD_VAR 0 3
59285: PPUSH
59286: LD_INT 0
59288: PPUSH
59289: CALL_OW 48
// end ;
59293: LD_VAR 0 5
59297: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59298: LD_INT 0
59300: PPUSH
59301: PPUSH
59302: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59303: LD_ADDR_VAR 0 2
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59326: LD_VAR 0 1
59330: NOT
59331: IFTRUE 59364
59333: PUSH
59334: LD_VAR 0 1
59338: PPUSH
59339: CALL_OW 264
59343: PUSH
59344: LD_INT 12
59346: PUSH
59347: LD_INT 51
59349: PUSH
59350: LD_INT 32
59352: PUSH
59353: LD_INT 89
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: IN
59362: NOT
59363: OR
59364: IFFALSE 59368
// exit ;
59366: GO 59466
// for i := 1 to 3 do
59368: LD_ADDR_VAR 0 3
59372: PUSH
59373: DOUBLE
59374: LD_INT 1
59376: DEC
59377: ST_TO_ADDR
59378: LD_INT 3
59380: PUSH
59381: FOR_TO
59382: IFFALSE 59464
// begin tmp := GetCargo ( cargo , i ) ;
59384: LD_ADDR_VAR 0 4
59388: PUSH
59389: LD_VAR 0 1
59393: PPUSH
59394: LD_VAR 0 3
59398: PPUSH
59399: CALL_OW 289
59403: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59404: LD_ADDR_VAR 0 2
59408: PUSH
59409: LD_VAR 0 2
59413: PPUSH
59414: LD_VAR 0 3
59418: PPUSH
59419: LD_VAR 0 4
59423: PPUSH
59424: CALL_OW 1
59428: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59429: LD_ADDR_VAR 0 2
59433: PUSH
59434: LD_VAR 0 2
59438: PPUSH
59439: LD_INT 4
59441: PPUSH
59442: LD_VAR 0 2
59446: PUSH
59447: LD_INT 4
59449: ARRAY
59450: PUSH
59451: LD_VAR 0 4
59455: PLUS
59456: PPUSH
59457: CALL_OW 1
59461: ST_TO_ADDR
// end ;
59462: GO 59381
59464: POP
59465: POP
// end ;
59466: LD_VAR 0 2
59470: RET
// export function Length ( array ) ; begin
59471: LD_INT 0
59473: PPUSH
// result := array + 0 ;
59474: LD_ADDR_VAR 0 2
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 0
59486: PLUS
59487: ST_TO_ADDR
// end ;
59488: LD_VAR 0 2
59492: RET
// export function PrepareArray ( array ) ; begin
59493: LD_INT 0
59495: PPUSH
// result := array diff 0 ;
59496: LD_ADDR_VAR 0 2
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: LD_INT 0
59508: DIFF
59509: ST_TO_ADDR
// if not result [ 1 ] then
59510: LD_VAR 0 2
59514: PUSH
59515: LD_INT 1
59517: ARRAY
59518: NOT
59519: IFFALSE 59539
// result := Delete ( result , 1 ) ;
59521: LD_ADDR_VAR 0 2
59525: PUSH
59526: LD_VAR 0 2
59530: PPUSH
59531: LD_INT 1
59533: PPUSH
59534: CALL_OW 3
59538: ST_TO_ADDR
// end ;
59539: LD_VAR 0 2
59543: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59544: LD_INT 0
59546: PPUSH
59547: PPUSH
59548: PPUSH
59549: PPUSH
// sibRocketRange := 25 ;
59550: LD_ADDR_VAR 0 6
59554: PUSH
59555: LD_INT 25
59557: ST_TO_ADDR
// result := false ;
59558: LD_ADDR_VAR 0 4
59562: PUSH
59563: LD_INT 0
59565: ST_TO_ADDR
// for i := 0 to 5 do
59566: LD_ADDR_VAR 0 5
59570: PUSH
59571: DOUBLE
59572: LD_INT 0
59574: DEC
59575: ST_TO_ADDR
59576: LD_INT 5
59578: PUSH
59579: FOR_TO
59580: IFFALSE 59647
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59582: LD_VAR 0 1
59586: PPUSH
59587: LD_VAR 0 5
59591: PPUSH
59592: LD_VAR 0 6
59596: PPUSH
59597: CALL_OW 272
59601: PPUSH
59602: LD_VAR 0 2
59606: PPUSH
59607: LD_VAR 0 5
59611: PPUSH
59612: LD_VAR 0 6
59616: PPUSH
59617: CALL_OW 273
59621: PPUSH
59622: LD_VAR 0 3
59626: PPUSH
59627: CALL_OW 309
59631: IFFALSE 59645
// begin result := true ;
59633: LD_ADDR_VAR 0 4
59637: PUSH
59638: LD_INT 1
59640: ST_TO_ADDR
// exit ;
59641: POP
59642: POP
59643: GO 59649
// end ;
59645: GO 59579
59647: POP
59648: POP
// end ;
59649: LD_VAR 0 4
59653: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59654: LD_INT 0
59656: PPUSH
59657: PPUSH
59658: PPUSH
// if btype = b_depot then
59659: LD_VAR 0 2
59663: PUSH
59664: LD_INT 0
59666: EQUAL
59667: IFFALSE 59679
// begin result := true ;
59669: LD_ADDR_VAR 0 3
59673: PUSH
59674: LD_INT 1
59676: ST_TO_ADDR
// exit ;
59677: GO 59799
// end ; pom := GetBase ( depot ) ;
59679: LD_ADDR_VAR 0 4
59683: PUSH
59684: LD_VAR 0 1
59688: PPUSH
59689: CALL_OW 274
59693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59694: LD_ADDR_VAR 0 5
59698: PUSH
59699: LD_VAR 0 2
59703: PPUSH
59704: LD_VAR 0 1
59708: PPUSH
59709: CALL_OW 248
59713: PPUSH
59714: CALL_OW 450
59718: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59719: LD_ADDR_VAR 0 3
59723: PUSH
59724: LD_VAR 0 4
59728: PPUSH
59729: LD_INT 1
59731: PPUSH
59732: CALL_OW 275
59736: PUSH
59737: LD_VAR 0 5
59741: PUSH
59742: LD_INT 1
59744: ARRAY
59745: GREATEREQUAL
59746: IFFALSE 59772
59748: PUSH
59749: LD_VAR 0 4
59753: PPUSH
59754: LD_INT 2
59756: PPUSH
59757: CALL_OW 275
59761: PUSH
59762: LD_VAR 0 5
59766: PUSH
59767: LD_INT 2
59769: ARRAY
59770: GREATEREQUAL
59771: AND
59772: IFFALSE 59798
59774: PUSH
59775: LD_VAR 0 4
59779: PPUSH
59780: LD_INT 3
59782: PPUSH
59783: CALL_OW 275
59787: PUSH
59788: LD_VAR 0 5
59792: PUSH
59793: LD_INT 3
59795: ARRAY
59796: GREATEREQUAL
59797: AND
59798: ST_TO_ADDR
// end ;
59799: LD_VAR 0 3
59803: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59804: LD_INT 0
59806: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59807: LD_VAR 0 1
59811: PPUSH
59812: LD_VAR 0 2
59816: PPUSH
59817: LD_INT 0
59819: PPUSH
59820: LD_INT 0
59822: PPUSH
59823: LD_INT 1
59825: PPUSH
59826: LD_INT 0
59828: PPUSH
59829: CALL_OW 587
// end ;
59833: LD_VAR 0 3
59837: RET
// export function CenterOnNow ( unit ) ; begin
59838: LD_INT 0
59840: PPUSH
// result := IsInUnit ( unit ) ;
59841: LD_ADDR_VAR 0 2
59845: PUSH
59846: LD_VAR 0 1
59850: PPUSH
59851: CALL_OW 310
59855: ST_TO_ADDR
// if not result then
59856: LD_VAR 0 2
59860: NOT
59861: IFFALSE 59873
// result := unit ;
59863: LD_ADDR_VAR 0 2
59867: PUSH
59868: LD_VAR 0 1
59872: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59873: LD_VAR 0 1
59877: PPUSH
59878: CALL_OW 87
// end ;
59882: LD_VAR 0 2
59886: RET
// export function ComMoveHex ( unit , hex ) ; begin
59887: LD_INT 0
59889: PPUSH
// if not hex then
59890: LD_VAR 0 2
59894: NOT
59895: IFFALSE 59899
// exit ;
59897: GO 59952
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59899: LD_VAR 0 2
59903: PUSH
59904: LD_INT 1
59906: ARRAY
59907: PPUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 2
59915: ARRAY
59916: PPUSH
59917: CALL_OW 428
59921: IFFALSE 59925
// exit ;
59923: GO 59952
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59925: LD_VAR 0 1
59929: PPUSH
59930: LD_VAR 0 2
59934: PUSH
59935: LD_INT 1
59937: ARRAY
59938: PPUSH
59939: LD_VAR 0 2
59943: PUSH
59944: LD_INT 2
59946: ARRAY
59947: PPUSH
59948: CALL_OW 111
// end ;
59952: LD_VAR 0 3
59956: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59957: LD_INT 0
59959: PPUSH
59960: PPUSH
59961: PPUSH
// if not unit or not enemy then
59962: LD_VAR 0 1
59966: NOT
59967: IFTRUE 59976
59969: PUSH
59970: LD_VAR 0 2
59974: NOT
59975: OR
59976: IFFALSE 59980
// exit ;
59978: GO 60106
// x := GetX ( enemy ) ;
59980: LD_ADDR_VAR 0 4
59984: PUSH
59985: LD_VAR 0 2
59989: PPUSH
59990: CALL_OW 250
59994: ST_TO_ADDR
// y := GetY ( enemy ) ;
59995: LD_ADDR_VAR 0 5
59999: PUSH
60000: LD_VAR 0 2
60004: PPUSH
60005: CALL_OW 251
60009: ST_TO_ADDR
// if ValidHex ( x , y ) then
60010: LD_VAR 0 4
60014: PPUSH
60015: LD_VAR 0 5
60019: PPUSH
60020: CALL_OW 488
60024: IFFALSE 60106
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60026: LD_VAR 0 2
60030: PPUSH
60031: CALL_OW 247
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: IN
60046: IFTRUE 60069
60048: PUSH
60049: LD_VAR 0 1
60053: PPUSH
60054: CALL_OW 255
60058: PPUSH
60059: LD_VAR 0 2
60063: PPUSH
60064: CALL_OW 292
60068: OR
60069: IFFALSE 60087
// ComAttackUnit ( unit , enemy ) else
60071: LD_VAR 0 1
60075: PPUSH
60076: LD_VAR 0 2
60080: PPUSH
60081: CALL_OW 115
60085: GO 60106
// ComAgressiveMove ( unit , x , y ) ;
60087: LD_VAR 0 1
60091: PPUSH
60092: LD_VAR 0 4
60096: PPUSH
60097: LD_VAR 0 5
60101: PPUSH
60102: CALL_OW 114
// end ;
60106: LD_VAR 0 3
60110: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60111: LD_INT 0
60113: PPUSH
60114: PPUSH
60115: PPUSH
// list := AreaToList ( area , 0 ) ;
60116: LD_ADDR_VAR 0 5
60120: PUSH
60121: LD_VAR 0 1
60125: PPUSH
60126: LD_INT 0
60128: PPUSH
60129: CALL_OW 517
60133: ST_TO_ADDR
// if not list then
60134: LD_VAR 0 5
60138: NOT
60139: IFFALSE 60143
// exit ;
60141: GO 60273
// if all then
60143: LD_VAR 0 2
60147: IFFALSE 60235
// begin for i := 1 to list [ 1 ] do
60149: LD_ADDR_VAR 0 4
60153: PUSH
60154: DOUBLE
60155: LD_INT 1
60157: DEC
60158: ST_TO_ADDR
60159: LD_VAR 0 5
60163: PUSH
60164: LD_INT 1
60166: ARRAY
60167: PUSH
60168: FOR_TO
60169: IFFALSE 60231
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60171: LD_ADDR_VAR 0 3
60175: PUSH
60176: LD_VAR 0 3
60180: PPUSH
60181: LD_VAR 0 3
60185: PUSH
60186: LD_INT 1
60188: PLUS
60189: PPUSH
60190: LD_VAR 0 5
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: PUSH
60199: LD_VAR 0 4
60203: ARRAY
60204: PUSH
60205: LD_VAR 0 5
60209: PUSH
60210: LD_INT 2
60212: ARRAY
60213: PUSH
60214: LD_VAR 0 4
60218: ARRAY
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PPUSH
60224: CALL_OW 1
60228: ST_TO_ADDR
60229: GO 60168
60231: POP
60232: POP
// exit ;
60233: GO 60273
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60235: LD_ADDR_VAR 0 3
60239: PUSH
60240: LD_VAR 0 5
60244: PUSH
60245: LD_INT 1
60247: ARRAY
60248: PUSH
60249: LD_INT 1
60251: ARRAY
60252: PUSH
60253: LD_VAR 0 5
60257: PUSH
60258: LD_INT 2
60260: ARRAY
60261: PUSH
60262: LD_INT 1
60264: ARRAY
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: EMPTY
60271: LIST
60272: ST_TO_ADDR
// end ;
60273: LD_VAR 0 3
60277: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60278: LD_INT 0
60280: PPUSH
60281: PPUSH
// list := AreaToList ( area , 0 ) ;
60282: LD_ADDR_VAR 0 4
60286: PUSH
60287: LD_VAR 0 1
60291: PPUSH
60292: LD_INT 0
60294: PPUSH
60295: CALL_OW 517
60299: ST_TO_ADDR
// if not list then
60300: LD_VAR 0 4
60304: NOT
60305: IFFALSE 60309
// exit ;
60307: GO 60350
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60309: LD_ADDR_VAR 0 3
60313: PUSH
60314: LD_VAR 0 4
60318: PUSH
60319: LD_INT 1
60321: ARRAY
60322: PUSH
60323: LD_INT 1
60325: ARRAY
60326: PUSH
60327: LD_VAR 0 4
60331: PUSH
60332: LD_INT 2
60334: ARRAY
60335: PUSH
60336: LD_INT 1
60338: ARRAY
60339: PUSH
60340: LD_VAR 0 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: ST_TO_ADDR
// end ;
60350: LD_VAR 0 3
60354: RET
// export function First ( array ) ; begin
60355: LD_INT 0
60357: PPUSH
// if not array then
60358: LD_VAR 0 1
60362: NOT
60363: IFFALSE 60367
// exit ;
60365: GO 60381
// result := array [ 1 ] ;
60367: LD_ADDR_VAR 0 2
60371: PUSH
60372: LD_VAR 0 1
60376: PUSH
60377: LD_INT 1
60379: ARRAY
60380: ST_TO_ADDR
// end ;
60381: LD_VAR 0 2
60385: RET
// export function Last ( array ) ; begin
60386: LD_INT 0
60388: PPUSH
// if not array then
60389: LD_VAR 0 1
60393: NOT
60394: IFFALSE 60398
// exit ;
60396: GO 60414
// result := array [ array ] ;
60398: LD_ADDR_VAR 0 2
60402: PUSH
60403: LD_VAR 0 1
60407: PUSH
60408: LD_VAR 0 1
60412: ARRAY
60413: ST_TO_ADDR
// end ;
60414: LD_VAR 0 2
60418: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60419: LD_INT 0
60421: PPUSH
60422: PPUSH
// result := [ ] ;
60423: LD_ADDR_VAR 0 5
60427: PUSH
60428: EMPTY
60429: ST_TO_ADDR
// if not array then
60430: LD_VAR 0 1
60434: NOT
60435: IFFALSE 60439
// exit ;
60437: GO 60551
// for i := 1 to array do
60439: LD_ADDR_VAR 0 6
60443: PUSH
60444: DOUBLE
60445: LD_INT 1
60447: DEC
60448: ST_TO_ADDR
60449: LD_VAR 0 1
60453: PUSH
60454: FOR_TO
60455: IFFALSE 60549
// if array [ i ] [ index ] = value then
60457: LD_VAR 0 1
60461: PUSH
60462: LD_VAR 0 6
60466: ARRAY
60467: PUSH
60468: LD_VAR 0 2
60472: ARRAY
60473: PUSH
60474: LD_VAR 0 3
60478: EQUAL
60479: IFFALSE 60547
// begin if indexColumn then
60481: LD_VAR 0 4
60485: IFFALSE 60521
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60487: LD_ADDR_VAR 0 5
60491: PUSH
60492: LD_VAR 0 5
60496: PPUSH
60497: LD_VAR 0 1
60501: PUSH
60502: LD_VAR 0 6
60506: ARRAY
60507: PUSH
60508: LD_VAR 0 4
60512: ARRAY
60513: PPUSH
60514: CALL 55559 0 2
60518: ST_TO_ADDR
60519: GO 60547
// result := Join ( result , array [ i ] ) ;
60521: LD_ADDR_VAR 0 5
60525: PUSH
60526: LD_VAR 0 5
60530: PPUSH
60531: LD_VAR 0 1
60535: PUSH
60536: LD_VAR 0 6
60540: ARRAY
60541: PPUSH
60542: CALL 55559 0 2
60546: ST_TO_ADDR
// end ;
60547: GO 60454
60549: POP
60550: POP
// end ;
60551: LD_VAR 0 5
60555: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60556: LD_INT 0
60558: PPUSH
// if not vehicles or not parkingPoint then
60559: LD_VAR 0 1
60563: NOT
60564: IFTRUE 60573
60566: PUSH
60567: LD_VAR 0 2
60571: NOT
60572: OR
60573: IFFALSE 60577
// exit ;
60575: GO 60675
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60577: LD_ADDR_VAR 0 1
60581: PUSH
60582: LD_VAR 0 1
60586: PPUSH
60587: LD_INT 50
60589: PUSH
60590: EMPTY
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: PUSH
60596: LD_INT 92
60598: PUSH
60599: LD_VAR 0 2
60603: PUSH
60604: LD_INT 1
60606: ARRAY
60607: PUSH
60608: LD_VAR 0 2
60612: PUSH
60613: LD_INT 2
60615: ARRAY
60616: PUSH
60617: LD_INT 8
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PPUSH
60634: CALL_OW 72
60638: ST_TO_ADDR
// if not vehicles then
60639: LD_VAR 0 1
60643: NOT
60644: IFFALSE 60648
// exit ;
60646: GO 60675
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60648: LD_VAR 0 1
60652: PPUSH
60653: LD_VAR 0 2
60657: PUSH
60658: LD_INT 1
60660: ARRAY
60661: PPUSH
60662: LD_VAR 0 2
60666: PUSH
60667: LD_INT 2
60669: ARRAY
60670: PPUSH
60671: CALL_OW 111
// end ;
60675: LD_VAR 0 3
60679: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60680: LD_INT 0
60682: PPUSH
60683: PPUSH
60684: PPUSH
// if not side or not area then
60685: LD_VAR 0 1
60689: NOT
60690: IFTRUE 60699
60692: PUSH
60693: LD_VAR 0 2
60697: NOT
60698: OR
60699: IFFALSE 60703
// exit ;
60701: GO 60822
// tmp := AreaToList ( area , 0 ) ;
60703: LD_ADDR_VAR 0 5
60707: PUSH
60708: LD_VAR 0 2
60712: PPUSH
60713: LD_INT 0
60715: PPUSH
60716: CALL_OW 517
60720: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60721: LD_ADDR_VAR 0 4
60725: PUSH
60726: DOUBLE
60727: LD_INT 1
60729: DEC
60730: ST_TO_ADDR
60731: LD_VAR 0 5
60735: PUSH
60736: LD_INT 1
60738: ARRAY
60739: PUSH
60740: FOR_TO
60741: IFFALSE 60820
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60743: LD_VAR 0 5
60747: PUSH
60748: LD_INT 1
60750: ARRAY
60751: PUSH
60752: LD_VAR 0 4
60756: ARRAY
60757: PPUSH
60758: LD_VAR 0 5
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: PUSH
60767: LD_VAR 0 4
60771: ARRAY
60772: PPUSH
60773: CALL_OW 351
60777: IFFALSE 60818
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60779: LD_VAR 0 5
60783: PUSH
60784: LD_INT 1
60786: ARRAY
60787: PUSH
60788: LD_VAR 0 4
60792: ARRAY
60793: PPUSH
60794: LD_VAR 0 5
60798: PUSH
60799: LD_INT 2
60801: ARRAY
60802: PUSH
60803: LD_VAR 0 4
60807: ARRAY
60808: PPUSH
60809: LD_VAR 0 1
60813: PPUSH
60814: CALL_OW 244
// end ;
60818: GO 60740
60820: POP
60821: POP
// end ;
60822: LD_VAR 0 3
60826: RET
// export function UniqueArray ( array ) ; var i ; begin
60827: LD_INT 0
60829: PPUSH
60830: PPUSH
// result := [ ] ;
60831: LD_ADDR_VAR 0 2
60835: PUSH
60836: EMPTY
60837: ST_TO_ADDR
// if not array then
60838: LD_VAR 0 1
60842: NOT
60843: IFFALSE 60847
// exit ;
60845: GO 60908
// for i := 1 to array do
60847: LD_ADDR_VAR 0 3
60851: PUSH
60852: DOUBLE
60853: LD_INT 1
60855: DEC
60856: ST_TO_ADDR
60857: LD_VAR 0 1
60861: PUSH
60862: FOR_TO
60863: IFFALSE 60906
// if not array [ i ] in result then
60865: LD_VAR 0 1
60869: PUSH
60870: LD_VAR 0 3
60874: ARRAY
60875: PUSH
60876: LD_VAR 0 2
60880: IN
60881: NOT
60882: IFFALSE 60904
// result := Join ( result , i ) ;
60884: LD_ADDR_VAR 0 2
60888: PUSH
60889: LD_VAR 0 2
60893: PPUSH
60894: LD_VAR 0 3
60898: PPUSH
60899: CALL 55559 0 2
60903: ST_TO_ADDR
60904: GO 60862
60906: POP
60907: POP
// end ; end_of_file
60908: LD_VAR 0 2
60912: RET
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
60913: LD_INT 0
60915: PPUSH
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
// if GetType ( un ) = unit_vehicle then
60924: LD_VAR 0 1
60928: PPUSH
60929: CALL_OW 247
60933: PUSH
60934: LD_INT 2
60936: EQUAL
60937: IFFALSE 60941
// exit ;
60939: GO 61714
// side := GetSide ( un ) ;
60941: LD_ADDR_VAR 0 9
60945: PUSH
60946: LD_VAR 0 1
60950: PPUSH
60951: CALL_OW 255
60955: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
60956: LD_EXP 2
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 8
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: IN
60971: IFFALSE 61065
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
60973: LD_VAR 0 1
60977: PPUSH
60978: CALL_OW 266
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: IN
60993: IFFALSE 61065
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
60995: LD_ADDR_VAR 0 3
60999: PUSH
61000: LD_INT 22
61002: PUSH
61003: LD_VAR 0 9
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 21
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 33
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PPUSH
61044: CALL_OW 69
61048: PUSH
61049: FOR_IN
61050: IFFALSE 61063
// KillUnit ( i ) ;
61052: LD_VAR 0 3
61056: PPUSH
61057: CALL_OW 66
61061: GO 61049
61063: POP
61064: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
61065: LD_EXP 2
61069: PUSH
61070: LD_INT 8
61072: EQUAL
61073: IFFALSE 61157
// if un in mpCommanders then
61075: LD_VAR 0 1
61079: PUSH
61080: LD_EXP 40
61084: IN
61085: IFFALSE 61157
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
61087: LD_ADDR_VAR 0 3
61091: PUSH
61092: LD_INT 22
61094: PUSH
61095: LD_VAR 0 9
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 21
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 33
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PPUSH
61136: CALL_OW 69
61140: PUSH
61141: FOR_IN
61142: IFFALSE 61155
// KillUnit ( i ) ;
61144: LD_VAR 0 3
61148: PPUSH
61149: CALL_OW 66
61153: GO 61141
61155: POP
61156: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
61157: LD_VAR 0 1
61161: PPUSH
61162: CALL_OW 257
61166: PUSH
61167: LD_INT 12
61169: PUSH
61170: LD_INT 17
61172: PUSH
61173: LD_INT 15
61175: PUSH
61176: LD_INT 16
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: IN
61185: IFTRUE 61202
61187: PUSH
61188: LD_VAR 0 1
61192: PPUSH
61193: CALL_OW 263
61197: PUSH
61198: LD_INT 5
61200: EQUAL
61201: OR
61202: IFFALSE 61439
// begin tag := 0 ;
61204: LD_ADDR_VAR 0 5
61208: PUSH
61209: LD_INT 0
61211: ST_TO_ADDR
// for i := 1 to 8 do
61212: LD_ADDR_VAR 0 3
61216: PUSH
61217: DOUBLE
61218: LD_INT 1
61220: DEC
61221: ST_TO_ADDR
61222: LD_INT 8
61224: PUSH
61225: FOR_TO
61226: IFFALSE 61260
// if un in mpApePosIndex [ i ] then
61228: LD_VAR 0 1
61232: PUSH
61233: LD_EXP 31
61237: PUSH
61238: LD_VAR 0 3
61242: ARRAY
61243: IN
61244: IFFALSE 61258
// begin tag := i ;
61246: LD_ADDR_VAR 0 5
61250: PUSH
61251: LD_VAR 0 3
61255: ST_TO_ADDR
// break ;
61256: GO 61260
// end ;
61258: GO 61225
61260: POP
61261: POP
// if not tag then
61262: LD_VAR 0 5
61266: NOT
61267: IFFALSE 61271
// exit ;
61269: GO 61714
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
61271: LD_ADDR_VAR 0 7
61275: PUSH
61276: LD_EXP 30
61280: PUSH
61281: LD_EXP 6
61285: PUSH
61286: LD_VAR 0 5
61290: ARRAY
61291: ARRAY
61292: ST_TO_ADDR
// if not area then
61293: LD_VAR 0 7
61297: NOT
61298: IFFALSE 61302
// exit ;
61300: GO 61714
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
61302: LD_INT 14700
61304: PUSH
61305: LD_VAR 0 1
61309: PUSH
61310: LD_INT 5
61312: MOD
61313: PUSH
61314: LD_INT 1
61316: PLUS
61317: PUSH
61318: LD_INT 700
61320: MUL
61321: PLUS
61322: PPUSH
61323: CALL_OW 67
// repeat wait ( 10 ) ;
61327: LD_INT 10
61329: PPUSH
61330: CALL_OW 67
// until not mpBlockRespThread ;
61334: LD_EXP 46
61338: NOT
61339: IFFALSE 61327
// mpBlockRespThread := true ;
61341: LD_ADDR_EXP 46
61345: PUSH
61346: LD_INT 1
61348: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
61349: LD_INT 0
61351: PPUSH
61352: CALL 51686 0 1
// ape := CreateHuman ;
61356: LD_ADDR_VAR 0 4
61360: PUSH
61361: CALL_OW 44
61365: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
61366: LD_ADDR_EXP 31
61370: PUSH
61371: LD_EXP 31
61375: PPUSH
61376: LD_VAR 0 5
61380: PPUSH
61381: LD_EXP 31
61385: PUSH
61386: LD_VAR 0 5
61390: ARRAY
61391: PPUSH
61392: LD_VAR 0 4
61396: PPUSH
61397: CALL 55559 0 2
61401: PPUSH
61402: CALL_OW 1
61406: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
61407: LD_VAR 0 4
61411: PPUSH
61412: LD_VAR 0 7
61416: PPUSH
61417: LD_INT 0
61419: PPUSH
61420: CALL_OW 49
// wait ( 10 ) ;
61424: LD_INT 10
61426: PPUSH
61427: CALL_OW 67
// mpBlockRespThread := false ;
61431: LD_ADDR_EXP 46
61435: PUSH
61436: LD_INT 0
61438: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
61439: LD_VAR 0 1
61443: PPUSH
61444: CALL_OW 247
61448: PUSH
61449: LD_INT 1
61451: EQUAL
61452: IFFALSE 61469
61454: PUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: CALL_OW 248
61464: PUSH
61465: LD_INT 0
61467: GREATER
61468: AND
61469: IFFALSE 61714
// begin if not mpRespawn then
61471: LD_EXP 32
61475: NOT
61476: IFFALSE 61480
// exit ;
61478: GO 61714
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
61480: LD_VAR 0 9
61484: PPUSH
61485: CALL_OW 108
61489: NOT
61490: IFFALSE 61509
61492: PUSH
61493: LD_EXP 2
61497: PPUSH
61498: LD_VAR 0 9
61502: PPUSH
61503: CALL 6778 0 2
61507: NOT
61508: AND
61509: IFFALSE 61513
// exit ;
61511: GO 61714
// side := GetSide ( un ) ;
61513: LD_ADDR_VAR 0 9
61517: PUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: CALL_OW 255
61527: ST_TO_ADDR
// nation := GetNation ( un ) ;
61528: LD_ADDR_VAR 0 8
61532: PUSH
61533: LD_VAR 0 1
61537: PPUSH
61538: CALL_OW 248
61542: ST_TO_ADDR
// class := GetClass ( un ) ;
61543: LD_ADDR_VAR 0 6
61547: PUSH
61548: LD_VAR 0 1
61552: PPUSH
61553: CALL_OW 257
61557: ST_TO_ADDR
// if class > 4 then
61558: LD_VAR 0 6
61562: PUSH
61563: LD_INT 4
61565: GREATER
61566: IFFALSE 61576
// class := 1 ;
61568: LD_ADDR_VAR 0 6
61572: PUSH
61573: LD_INT 1
61575: ST_TO_ADDR
// repeat wait ( 10 ) ;
61576: LD_INT 10
61578: PPUSH
61579: CALL_OW 67
// until not mpBlockRespThread ;
61583: LD_EXP 46
61587: NOT
61588: IFFALSE 61576
// mpBlockRespThread := true ;
61590: LD_ADDR_EXP 46
61594: PUSH
61595: LD_INT 1
61597: ST_TO_ADDR
// uc_side := side ;
61598: LD_ADDR_OWVAR 20
61602: PUSH
61603: LD_VAR 0 9
61607: ST_TO_ADDR
// uc_nation := nation ;
61608: LD_ADDR_OWVAR 21
61612: PUSH
61613: LD_VAR 0 8
61617: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
61618: LD_INT 0
61620: PPUSH
61621: LD_VAR 0 6
61625: PPUSH
61626: LD_INT 2
61628: PPUSH
61629: CALL_OW 380
// un := CreateHuman ;
61633: LD_ADDR_VAR 0 1
61637: PUSH
61638: CALL_OW 44
61642: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
61643: LD_ADDR_EXP 39
61647: PUSH
61648: LD_EXP 39
61652: PPUSH
61653: LD_VAR 0 9
61657: PPUSH
61658: LD_EXP 39
61662: PUSH
61663: LD_VAR 0 9
61667: ARRAY
61668: PPUSH
61669: LD_EXP 39
61673: PUSH
61674: LD_VAR 0 9
61678: ARRAY
61679: PUSH
61680: LD_INT 1
61682: PLUS
61683: PPUSH
61684: LD_VAR 0 1
61688: PPUSH
61689: CALL_OW 1
61693: PPUSH
61694: CALL_OW 1
61698: ST_TO_ADDR
// wait ( 10 ) ;
61699: LD_INT 10
61701: PPUSH
61702: CALL_OW 67
// mpBlockRespThread := false ;
61706: LD_ADDR_EXP 46
61710: PUSH
61711: LD_INT 0
61713: ST_TO_ADDR
// end ; end ;
61714: LD_VAR 0 2
61718: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
61719: LD_INT 0
61721: PPUSH
61722: PPUSH
61723: PPUSH
61724: PPUSH
61725: PPUSH
// tag := 0 ;
61726: LD_ADDR_VAR 0 5
61730: PUSH
61731: LD_INT 0
61733: ST_TO_ADDR
// for i := 1 to 8 do
61734: LD_ADDR_VAR 0 4
61738: PUSH
61739: DOUBLE
61740: LD_INT 1
61742: DEC
61743: ST_TO_ADDR
61744: LD_INT 8
61746: PUSH
61747: FOR_TO
61748: IFFALSE 61782
// if un in mpApePosIndex [ i ] then
61750: LD_VAR 0 2
61754: PUSH
61755: LD_EXP 31
61759: PUSH
61760: LD_VAR 0 4
61764: ARRAY
61765: IN
61766: IFFALSE 61780
// begin tag := i ;
61768: LD_ADDR_VAR 0 5
61772: PUSH
61773: LD_VAR 0 4
61777: ST_TO_ADDR
// break ;
61778: GO 61782
// end ;
61780: GO 61747
61782: POP
61783: POP
// if not tag then
61784: LD_VAR 0 5
61788: NOT
61789: IFFALSE 61793
// exit ;
61791: GO 61961
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
61793: LD_ADDR_VAR 0 6
61797: PUSH
61798: LD_EXP 30
61802: PUSH
61803: LD_EXP 6
61807: PUSH
61808: LD_VAR 0 5
61812: ARRAY
61813: ARRAY
61814: ST_TO_ADDR
// if not area then
61815: LD_VAR 0 6
61819: NOT
61820: IFFALSE 61824
// exit ;
61822: GO 61961
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
61824: LD_INT 14700
61826: PUSH
61827: LD_VAR 0 2
61831: PUSH
61832: LD_INT 5
61834: MOD
61835: PUSH
61836: LD_INT 1
61838: PLUS
61839: PUSH
61840: LD_INT 700
61842: MUL
61843: PLUS
61844: PPUSH
61845: CALL_OW 67
// repeat wait ( 10 ) ;
61849: LD_INT 10
61851: PPUSH
61852: CALL_OW 67
// until not mpBlockRespThread ;
61856: LD_EXP 46
61860: NOT
61861: IFFALSE 61849
// mpBlockRespThread := true ;
61863: LD_ADDR_EXP 46
61867: PUSH
61868: LD_INT 1
61870: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
61871: LD_INT 0
61873: PPUSH
61874: CALL 51686 0 1
// ape := CreateHuman ;
61878: LD_ADDR_VAR 0 7
61882: PUSH
61883: CALL_OW 44
61887: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
61888: LD_ADDR_EXP 31
61892: PUSH
61893: LD_EXP 31
61897: PPUSH
61898: LD_VAR 0 5
61902: PPUSH
61903: LD_EXP 31
61907: PUSH
61908: LD_VAR 0 5
61912: ARRAY
61913: PPUSH
61914: LD_VAR 0 7
61918: PPUSH
61919: CALL 55559 0 2
61923: PPUSH
61924: CALL_OW 1
61928: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
61929: LD_VAR 0 7
61933: PPUSH
61934: LD_VAR 0 6
61938: PPUSH
61939: LD_INT 0
61941: PPUSH
61942: CALL_OW 49
// wait ( 10 ) ;
61946: LD_INT 10
61948: PPUSH
61949: CALL_OW 67
// mpBlockRespThread := false ;
61953: LD_ADDR_EXP 46
61957: PUSH
61958: LD_INT 0
61960: ST_TO_ADDR
// end ;
61961: LD_VAR 0 3
61965: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
61966: LD_INT 0
61968: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 266
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: IN
61989: IFFALSE 62014
// SetBName ( building , @ & GetSide ( building ) ) ;
61991: LD_VAR 0 1
61995: PPUSH
61996: LD_STRING @
61998: PUSH
61999: LD_VAR 0 1
62003: PPUSH
62004: CALL_OW 255
62008: STR
62009: PPUSH
62010: CALL_OW 500
// end ;
62014: LD_VAR 0 2
62018: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
62019: LD_INT 0
62021: PPUSH
62022: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
62023: LD_EXP 2
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: LD_INT 8
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: IN
62038: IFFALSE 62062
62040: PUSH
62041: LD_VAR 0 1
62045: PPUSH
62046: CALL_OW 266
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: IN
62061: AND
62062: IFFALSE 62141
// begin SetSide ( building , oldSide ) ;
62064: LD_VAR 0 1
62068: PPUSH
62069: LD_VAR 0 2
62073: PPUSH
62074: CALL_OW 235
// KillUnit ( building ) ;
62078: LD_VAR 0 1
62082: PPUSH
62083: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
62087: LD_ADDR_VAR 0 5
62091: PUSH
62092: LD_INT 22
62094: PUSH
62095: LD_VAR 0 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 21
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PPUSH
62118: CALL_OW 69
62122: PUSH
62123: FOR_IN
62124: IFFALSE 62137
// KillUnit ( i ) ;
62126: LD_VAR 0 5
62130: PPUSH
62131: CALL_OW 66
62135: GO 62123
62137: POP
62138: POP
// exit ;
62139: GO 62186
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
62141: LD_VAR 0 1
62145: PPUSH
62146: CALL_OW 266
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: IN
62161: IFFALSE 62186
// SetBName ( building , @ & GetSide ( building ) ) ;
62163: LD_VAR 0 1
62167: PPUSH
62168: LD_STRING @
62170: PUSH
62171: LD_VAR 0 1
62175: PPUSH
62176: CALL_OW 255
62180: STR
62181: PPUSH
62182: CALL_OW 500
// end ;
62186: LD_VAR 0 4
62190: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
62191: LD_INT 0
62193: PPUSH
62194: PPUSH
62195: PPUSH
// if mpGameType <> GameTypeFamine then
62196: LD_EXP 2
62200: PUSH
62201: LD_INT 5
62203: NONEQUAL
62204: IFFALSE 62208
// exit ;
62206: GO 62442
// for i := 1 to mpGlobalOilDeposits do
62208: LD_ADDR_VAR 0 6
62212: PUSH
62213: DOUBLE
62214: LD_INT 1
62216: DEC
62217: ST_TO_ADDR
62218: LD_EXP 41
62222: PUSH
62223: FOR_TO
62224: IFFALSE 62440
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
62226: LD_EXP 41
62230: PUSH
62231: LD_VAR 0 6
62235: ARRAY
62236: PUSH
62237: LD_INT 1
62239: ARRAY
62240: PPUSH
62241: LD_EXP 41
62245: PUSH
62246: LD_VAR 0 6
62250: ARRAY
62251: PUSH
62252: LD_INT 2
62254: ARRAY
62255: PPUSH
62256: CALL_OW 428
62260: PUSH
62261: LD_VAR 0 1
62265: EQUAL
62266: IFFALSE 62438
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
62268: LD_ADDR_VAR 0 7
62272: PUSH
62273: LD_EXP 41
62277: PUSH
62278: LD_VAR 0 6
62282: ARRAY
62283: PUSH
62284: LD_INT 3
62286: ARRAY
62287: ST_TO_ADDR
// value := value - amount ;
62288: LD_ADDR_VAR 0 7
62292: PUSH
62293: LD_VAR 0 7
62297: PUSH
62298: LD_VAR 0 4
62302: MINUS
62303: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
62304: LD_ADDR_EXP 41
62308: PUSH
62309: LD_EXP 41
62313: PPUSH
62314: LD_VAR 0 6
62318: PPUSH
62319: LD_EXP 41
62323: PUSH
62324: LD_VAR 0 6
62328: ARRAY
62329: PPUSH
62330: LD_INT 3
62332: PPUSH
62333: LD_VAR 0 7
62337: PPUSH
62338: CALL_OW 1
62342: PPUSH
62343: CALL_OW 1
62347: ST_TO_ADDR
// if side in [ your_side , 9 ] then
62348: LD_VAR 0 2
62352: PUSH
62353: LD_OWVAR 2
62357: PUSH
62358: LD_INT 9
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: IN
62365: IFFALSE 62381
// SetUnitDisplayNumber ( building , value ) ;
62367: LD_VAR 0 1
62371: PPUSH
62372: LD_VAR 0 7
62376: PPUSH
62377: CALL_OW 505
// if value <= 0 then
62381: LD_VAR 0 7
62385: PUSH
62386: LD_INT 0
62388: LESSEQUAL
62389: IFFALSE 62438
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
62391: LD_EXP 41
62395: PUSH
62396: LD_VAR 0 6
62400: ARRAY
62401: PUSH
62402: LD_INT 1
62404: ARRAY
62405: PPUSH
62406: LD_EXP 41
62410: PUSH
62411: LD_VAR 0 6
62415: ARRAY
62416: PUSH
62417: LD_INT 2
62419: ARRAY
62420: PPUSH
62421: CALL_OW 63
// KillUnit ( building ) ;
62425: LD_VAR 0 1
62429: PPUSH
62430: CALL_OW 66
// exit ;
62434: POP
62435: POP
62436: GO 62442
// end ; end ; end ;
62438: GO 62223
62440: POP
62441: POP
// end ;
62442: LD_VAR 0 5
62446: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
62447: LD_INT 0
62449: PPUSH
62450: PPUSH
62451: PPUSH
// if mpGameType <> GameTypeFamine then
62452: LD_EXP 2
62456: PUSH
62457: LD_INT 5
62459: NONEQUAL
62460: IFFALSE 62464
// exit ;
62462: GO 62698
// for i := 1 to mpGlobalSibDeposits do
62464: LD_ADDR_VAR 0 6
62468: PUSH
62469: DOUBLE
62470: LD_INT 1
62472: DEC
62473: ST_TO_ADDR
62474: LD_EXP 42
62478: PUSH
62479: FOR_TO
62480: IFFALSE 62696
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
62482: LD_EXP 42
62486: PUSH
62487: LD_VAR 0 6
62491: ARRAY
62492: PUSH
62493: LD_INT 1
62495: ARRAY
62496: PPUSH
62497: LD_EXP 42
62501: PUSH
62502: LD_VAR 0 6
62506: ARRAY
62507: PUSH
62508: LD_INT 2
62510: ARRAY
62511: PPUSH
62512: CALL_OW 428
62516: PUSH
62517: LD_VAR 0 1
62521: EQUAL
62522: IFFALSE 62694
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
62524: LD_ADDR_VAR 0 7
62528: PUSH
62529: LD_EXP 42
62533: PUSH
62534: LD_VAR 0 6
62538: ARRAY
62539: PUSH
62540: LD_INT 3
62542: ARRAY
62543: ST_TO_ADDR
// value := value - amount ;
62544: LD_ADDR_VAR 0 7
62548: PUSH
62549: LD_VAR 0 7
62553: PUSH
62554: LD_VAR 0 4
62558: MINUS
62559: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
62560: LD_ADDR_EXP 42
62564: PUSH
62565: LD_EXP 42
62569: PPUSH
62570: LD_VAR 0 6
62574: PPUSH
62575: LD_EXP 42
62579: PUSH
62580: LD_VAR 0 6
62584: ARRAY
62585: PPUSH
62586: LD_INT 3
62588: PPUSH
62589: LD_VAR 0 7
62593: PPUSH
62594: CALL_OW 1
62598: PPUSH
62599: CALL_OW 1
62603: ST_TO_ADDR
// if side in [ your_side , 9 ] then
62604: LD_VAR 0 2
62608: PUSH
62609: LD_OWVAR 2
62613: PUSH
62614: LD_INT 9
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: IN
62621: IFFALSE 62637
// SetUnitDisplayNumber ( building , value ) ;
62623: LD_VAR 0 1
62627: PPUSH
62628: LD_VAR 0 7
62632: PPUSH
62633: CALL_OW 505
// if value <= 0 then
62637: LD_VAR 0 7
62641: PUSH
62642: LD_INT 0
62644: LESSEQUAL
62645: IFFALSE 62694
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
62647: LD_EXP 42
62651: PUSH
62652: LD_VAR 0 6
62656: ARRAY
62657: PUSH
62658: LD_INT 1
62660: ARRAY
62661: PPUSH
62662: LD_EXP 42
62666: PUSH
62667: LD_VAR 0 6
62671: ARRAY
62672: PUSH
62673: LD_INT 2
62675: ARRAY
62676: PPUSH
62677: CALL_OW 63
// KillUnit ( building ) ;
62681: LD_VAR 0 1
62685: PPUSH
62686: CALL_OW 66
// exit ;
62690: POP
62691: POP
62692: GO 62698
// end ; end ; end ;
62694: GO 62479
62696: POP
62697: POP
// end ;
62698: LD_VAR 0 5
62702: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
62703: LD_INT 0
62705: PPUSH
62706: PPUSH
// side := GetSide ( factory ) ;
62707: LD_ADDR_VAR 0 7
62711: PUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: CALL_OW 255
62721: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
62722: LD_VAR 0 5
62726: PUSH
62727: LD_INT 81
62729: EQUAL
62730: IFFALSE 62768
62732: PUSH
62733: LD_INT 22
62735: PUSH
62736: LD_VAR 0 7
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 34
62747: PUSH
62748: LD_INT 81
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PPUSH
62759: CALL_OW 69
62763: PUSH
62764: LD_INT 0
62766: GREATER
62767: AND
62768: IFFALSE 62801
// begin ComCancel ( factory ) ;
62770: LD_VAR 0 1
62774: PPUSH
62775: CALL_OW 127
// if side = your_side then
62779: LD_VAR 0 7
62783: PUSH
62784: LD_OWVAR 2
62788: EQUAL
62789: IFFALSE 62801
// HintSpec ( VehLimit , 2 ) ;
62791: LD_STRING VehLimit
62793: PPUSH
62794: LD_INT 2
62796: PPUSH
62797: CALL_OW 338
// end ; end ;
62801: LD_VAR 0 6
62805: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
62806: LD_INT 0
62808: PPUSH
62809: PPUSH
62810: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
62811: LD_VAR 0 1
62815: PPUSH
62816: CALL_OW 264
62820: PUSH
62821: LD_INT 81
62823: EQUAL
62824: IFFALSE 62841
62826: PUSH
62827: LD_VAR 0 1
62831: PPUSH
62832: CALL_OW 263
62836: PUSH
62837: LD_INT 1
62839: EQUAL
62840: AND
62841: IFFALSE 63121
// begin for i := 1 to Count ( minersList ) do
62843: LD_ADDR_VAR 0 6
62847: PUSH
62848: DOUBLE
62849: LD_INT 1
62851: DEC
62852: ST_TO_ADDR
62853: LD_EXP 56
62857: PPUSH
62858: CALL 19583 0 1
62862: PUSH
62863: FOR_TO
62864: IFFALSE 62982
// begin if minersList [ i ] = oldId then
62866: LD_EXP 56
62870: PUSH
62871: LD_VAR 0 6
62875: ARRAY
62876: PUSH
62877: LD_VAR 0 2
62881: EQUAL
62882: IFFALSE 62980
// begin for j := 1 to minerMinesList [ i ] do
62884: LD_ADDR_VAR 0 7
62888: PUSH
62889: DOUBLE
62890: LD_INT 1
62892: DEC
62893: ST_TO_ADDR
62894: LD_EXP 57
62898: PUSH
62899: LD_VAR 0 6
62903: ARRAY
62904: PUSH
62905: FOR_TO
62906: IFFALSE 62956
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62908: LD_EXP 57
62912: PUSH
62913: LD_VAR 0 6
62917: ARRAY
62918: PUSH
62919: LD_VAR 0 7
62923: ARRAY
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: PPUSH
62929: LD_EXP 57
62933: PUSH
62934: LD_VAR 0 6
62938: ARRAY
62939: PUSH
62940: LD_VAR 0 7
62944: ARRAY
62945: PUSH
62946: LD_INT 2
62948: ARRAY
62949: PPUSH
62950: CALL_OW 612
62954: GO 62905
62956: POP
62957: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
62958: LD_ADDR_EXP 57
62962: PUSH
62963: LD_EXP 57
62967: PPUSH
62968: LD_VAR 0 6
62972: PPUSH
62973: CALL_OW 3
62977: ST_TO_ADDR
// break ;
62978: GO 62982
// end ; end ;
62980: GO 62863
62982: POP
62983: POP
// minersList := minersList diff oldId ;
62984: LD_ADDR_EXP 56
62988: PUSH
62989: LD_EXP 56
62993: PUSH
62994: LD_VAR 0 2
62998: DIFF
62999: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
63000: LD_INT 22
63002: PUSH
63003: LD_VAR 0 4
63007: PPUSH
63008: CALL_OW 255
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 34
63019: PUSH
63020: LD_INT 81
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PPUSH
63031: CALL_OW 69
63035: PUSH
63036: LD_INT 1
63038: GREATER
63039: IFFALSE 63066
// begin ComExit ( unit ) ;
63041: LD_VAR 0 4
63045: PPUSH
63046: CALL 55957 0 1
// SetSide ( newId , oldSide ) ;
63050: LD_VAR 0 1
63054: PPUSH
63055: LD_VAR 0 3
63059: PPUSH
63060: CALL_OW 235
// exit ;
63064: GO 63121
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
63066: LD_ADDR_EXP 56
63070: PUSH
63071: LD_EXP 56
63075: PPUSH
63076: LD_EXP 56
63080: PUSH
63081: LD_INT 1
63083: PLUS
63084: PPUSH
63085: LD_VAR 0 1
63089: PPUSH
63090: CALL_OW 1
63094: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63095: LD_ADDR_EXP 57
63099: PUSH
63100: LD_EXP 57
63104: PPUSH
63105: LD_EXP 57
63109: PUSH
63110: LD_INT 1
63112: PLUS
63113: PPUSH
63114: EMPTY
63115: PPUSH
63116: CALL_OW 1
63120: ST_TO_ADDR
// end ; end ; end_of_file
63121: LD_VAR 0 5
63125: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
63126: LD_EXP 38
63130: IFFALSE 63471
63132: GO 63134
63134: DISABLE
63135: LD_INT 0
63137: PPUSH
63138: PPUSH
63139: PPUSH
// begin mpKingPoints := [ ] ;
63140: LD_ADDR_EXP 63
63144: PUSH
63145: EMPTY
63146: ST_TO_ADDR
// if mpTeamGame then
63147: LD_EXP 10
63151: IFFALSE 63205
// begin for i := 1 to Count ( mpTeams ) do
63153: LD_ADDR_VAR 0 1
63157: PUSH
63158: DOUBLE
63159: LD_INT 1
63161: DEC
63162: ST_TO_ADDR
63163: LD_EXP 9
63167: PPUSH
63168: CALL 19583 0 1
63172: PUSH
63173: FOR_TO
63174: IFFALSE 63201
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
63176: LD_ADDR_EXP 63
63180: PUSH
63181: LD_EXP 63
63185: PPUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_INT 0
63193: PPUSH
63194: CALL_OW 1
63198: ST_TO_ADDR
63199: GO 63173
63201: POP
63202: POP
// end else
63203: GO 63248
// begin for i := 1 to 8 do
63205: LD_ADDR_VAR 0 1
63209: PUSH
63210: DOUBLE
63211: LD_INT 1
63213: DEC
63214: ST_TO_ADDR
63215: LD_INT 8
63217: PUSH
63218: FOR_TO
63219: IFFALSE 63246
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
63221: LD_ADDR_EXP 63
63225: PUSH
63226: LD_EXP 63
63230: PPUSH
63231: LD_VAR 0 1
63235: PPUSH
63236: LD_INT 0
63238: PPUSH
63239: CALL_OW 1
63243: ST_TO_ADDR
63244: GO 63218
63246: POP
63247: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
63248: LD_ADDR_VAR 0 3
63252: PUSH
63253: LD_EXP 1
63257: PPUSH
63258: LD_INT 0
63260: PPUSH
63261: CALL_OW 517
63265: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63266: LD_ADDR_VAR 0 1
63270: PUSH
63271: DOUBLE
63272: LD_INT 1
63274: DEC
63275: ST_TO_ADDR
63276: LD_VAR 0 3
63280: PUSH
63281: LD_INT 1
63283: ARRAY
63284: PUSH
63285: FOR_TO
63286: IFFALSE 63353
// for j := 1 to 8 do
63288: LD_ADDR_VAR 0 2
63292: PUSH
63293: DOUBLE
63294: LD_INT 1
63296: DEC
63297: ST_TO_ADDR
63298: LD_INT 8
63300: PUSH
63301: FOR_TO
63302: IFFALSE 63349
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
63304: LD_VAR 0 3
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: PUSH
63313: LD_VAR 0 1
63317: ARRAY
63318: PPUSH
63319: LD_VAR 0 3
63323: PUSH
63324: LD_INT 2
63326: ARRAY
63327: PUSH
63328: LD_VAR 0 1
63332: ARRAY
63333: PPUSH
63334: LD_VAR 0 2
63338: PPUSH
63339: LD_INT 12
63341: NEG
63342: PPUSH
63343: CALL_OW 330
63347: GO 63301
63349: POP
63350: POP
63351: GO 63285
63353: POP
63354: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
63355: LD_EXP 33
63359: PPUSH
63360: LD_INT 1
63362: PPUSH
63363: CALL_OW 424
// UpdateCounter ;
63367: CALL 63977 0 0
// repeat wait ( 0 0$1 ) ;
63371: LD_INT 35
63373: PPUSH
63374: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63378: LD_ADDR_VAR 0 3
63382: PUSH
63383: LD_EXP 33
63387: PPUSH
63388: LD_INT 3
63390: PUSH
63391: LD_INT 57
63393: PUSH
63394: EMPTY
63395: LIST
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 50
63403: PUSH
63404: EMPTY
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 30
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 30
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: LIST
63439: PPUSH
63440: CALL_OW 70
63444: ST_TO_ADDR
// if not tmp then
63445: LD_VAR 0 3
63449: NOT
63450: IFFALSE 63454
// continue ;
63452: GO 63371
// AddPoints ( tmp ) ;
63454: LD_VAR 0 3
63458: PPUSH
63459: CALL 63655 0 1
// UpdateCounter ;
63463: CALL 63977 0 0
// until false ;
63467: LD_INT 0
63469: IFFALSE 63371
// end ;
63471: PPOPN 3
63473: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
63474: LD_EXP 38
63478: IFFALSE 63486
63480: PUSH
63481: LD_EXP 36
63485: AND
63486: IFFALSE 63652
63488: GO 63490
63490: DISABLE
63491: LD_INT 0
63493: PPUSH
63494: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
63495: LD_ADDR_VAR 0 2
63499: PUSH
63500: LD_EXP 1
63504: PPUSH
63505: LD_INT 0
63507: PPUSH
63508: CALL_OW 517
63512: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63513: LD_ADDR_VAR 0 1
63517: PUSH
63518: DOUBLE
63519: LD_INT 1
63521: DEC
63522: ST_TO_ADDR
63523: LD_VAR 0 2
63527: PUSH
63528: LD_INT 1
63530: ARRAY
63531: PUSH
63532: FOR_TO
63533: IFFALSE 63574
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
63535: LD_VAR 0 2
63539: PUSH
63540: LD_INT 1
63542: ARRAY
63543: PUSH
63544: LD_VAR 0 1
63548: ARRAY
63549: PPUSH
63550: LD_VAR 0 2
63554: PUSH
63555: LD_INT 2
63557: ARRAY
63558: PUSH
63559: LD_VAR 0 1
63563: ARRAY
63564: PPUSH
63565: LD_INT 125
63567: PPUSH
63568: CALL_OW 495
63572: GO 63532
63574: POP
63575: POP
// repeat wait ( mpEmissions ) ;
63576: LD_EXP 36
63580: PPUSH
63581: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
63585: LD_ADDR_VAR 0 1
63589: PUSH
63590: DOUBLE
63591: LD_INT 1
63593: DEC
63594: ST_TO_ADDR
63595: LD_VAR 0 2
63599: PUSH
63600: LD_INT 1
63602: ARRAY
63603: PUSH
63604: FOR_TO
63605: IFFALSE 63646
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
63607: LD_VAR 0 2
63611: PUSH
63612: LD_INT 1
63614: ARRAY
63615: PUSH
63616: LD_VAR 0 1
63620: ARRAY
63621: PPUSH
63622: LD_VAR 0 2
63626: PUSH
63627: LD_INT 2
63629: ARRAY
63630: PUSH
63631: LD_VAR 0 1
63635: ARRAY
63636: PPUSH
63637: LD_INT 15
63639: PPUSH
63640: CALL_OW 495
63644: GO 63604
63646: POP
63647: POP
// until false ;
63648: LD_INT 0
63650: IFFALSE 63576
// end ;
63652: PPOPN 2
63654: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
63655: LD_INT 0
63657: PPUSH
63658: PPUSH
63659: PPUSH
63660: PPUSH
63661: PPUSH
// if mpTeamGame then
63662: LD_EXP 10
63666: IFFALSE 63863
// begin first := depots [ 1 ] ;
63668: LD_ADDR_VAR 0 4
63672: PUSH
63673: LD_VAR 0 1
63677: PUSH
63678: LD_INT 1
63680: ARRAY
63681: ST_TO_ADDR
// side := GetSide ( first ) ;
63682: LD_ADDR_VAR 0 6
63686: PUSH
63687: LD_VAR 0 4
63691: PPUSH
63692: CALL_OW 255
63696: ST_TO_ADDR
// for i := 1 to mpTeams do
63697: LD_ADDR_VAR 0 3
63701: PUSH
63702: DOUBLE
63703: LD_INT 1
63705: DEC
63706: ST_TO_ADDR
63707: LD_EXP 9
63711: PUSH
63712: FOR_TO
63713: IFFALSE 63747
// if side in mpTeams [ i ] then
63715: LD_VAR 0 6
63719: PUSH
63720: LD_EXP 9
63724: PUSH
63725: LD_VAR 0 3
63729: ARRAY
63730: IN
63731: IFFALSE 63745
// begin team := i ;
63733: LD_ADDR_VAR 0 5
63737: PUSH
63738: LD_VAR 0 3
63742: ST_TO_ADDR
// break ;
63743: GO 63747
// end ;
63745: GO 63712
63747: POP
63748: POP
// if not team then
63749: LD_VAR 0 5
63753: NOT
63754: IFFALSE 63758
// exit ;
63756: GO 63972
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
63758: LD_EXP 33
63762: PPUSH
63763: LD_INT 81
63765: PUSH
63766: LD_VAR 0 6
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PPUSH
63775: CALL_OW 70
63779: IFFALSE 63783
// exit ;
63781: GO 63972
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
63783: LD_ADDR_EXP 63
63787: PUSH
63788: LD_EXP 63
63792: PPUSH
63793: LD_VAR 0 5
63797: PPUSH
63798: LD_EXP 63
63802: PUSH
63803: LD_VAR 0 5
63807: ARRAY
63808: PUSH
63809: LD_INT 1
63811: PLUS
63812: PPUSH
63813: CALL_OW 1
63817: ST_TO_ADDR
// for i in mpTeams [ team ] do
63818: LD_ADDR_VAR 0 3
63822: PUSH
63823: LD_EXP 9
63827: PUSH
63828: LD_VAR 0 5
63832: ARRAY
63833: PUSH
63834: FOR_IN
63835: IFFALSE 63859
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
63837: LD_VAR 0 3
63841: PPUSH
63842: LD_EXP 63
63846: PUSH
63847: LD_VAR 0 5
63851: ARRAY
63852: PPUSH
63853: CALL_OW 506
63857: GO 63834
63859: POP
63860: POP
// end else
63861: GO 63972
// begin first := depots [ 1 ] ;
63863: LD_ADDR_VAR 0 4
63867: PUSH
63868: LD_VAR 0 1
63872: PUSH
63873: LD_INT 1
63875: ARRAY
63876: ST_TO_ADDR
// side := GetSide ( first ) ;
63877: LD_ADDR_VAR 0 6
63881: PUSH
63882: LD_VAR 0 4
63886: PPUSH
63887: CALL_OW 255
63891: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
63892: LD_EXP 33
63896: PPUSH
63897: LD_INT 81
63899: PUSH
63900: LD_VAR 0 6
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PPUSH
63909: CALL_OW 70
63913: IFFALSE 63917
// exit ;
63915: GO 63972
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
63917: LD_ADDR_EXP 63
63921: PUSH
63922: LD_EXP 63
63926: PPUSH
63927: LD_VAR 0 6
63931: PPUSH
63932: LD_EXP 63
63936: PUSH
63937: LD_VAR 0 6
63941: ARRAY
63942: PUSH
63943: LD_INT 1
63945: PLUS
63946: PPUSH
63947: CALL_OW 1
63951: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
63952: LD_VAR 0 6
63956: PPUSH
63957: LD_EXP 63
63961: PUSH
63962: LD_VAR 0 6
63966: ARRAY
63967: PPUSH
63968: CALL_OW 506
// end ; end ;
63972: LD_VAR 0 2
63976: RET
// function UpdateCounter ; var i ; begin
63977: LD_INT 0
63979: PPUSH
63980: PPUSH
// result := [ ] ;
63981: LD_ADDR_VAR 0 1
63985: PUSH
63986: EMPTY
63987: ST_TO_ADDR
// if mpTeamGame then
63988: LD_EXP 10
63992: IFFALSE 64059
// begin for i := 1 to mpTeams do
63994: LD_ADDR_VAR 0 2
63998: PUSH
63999: DOUBLE
64000: LD_INT 1
64002: DEC
64003: ST_TO_ADDR
64004: LD_EXP 9
64008: PUSH
64009: FOR_TO
64010: IFFALSE 64055
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
64012: LD_ADDR_VAR 0 1
64016: PUSH
64017: LD_VAR 0 1
64021: PUSH
64022: LD_STRING #KingoftheHill-Team
64024: PUSH
64025: LD_VAR 0 2
64029: PUSH
64030: LD_EXP 63
64034: PUSH
64035: LD_VAR 0 2
64039: ARRAY
64040: PUSH
64041: LD_EXP 34
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: ADD
64052: ST_TO_ADDR
64053: GO 64009
64055: POP
64056: POP
// end else
64057: GO 64132
// begin for i := 1 to 8 do
64059: LD_ADDR_VAR 0 2
64063: PUSH
64064: DOUBLE
64065: LD_INT 1
64067: DEC
64068: ST_TO_ADDR
64069: LD_INT 8
64071: PUSH
64072: FOR_TO
64073: IFFALSE 64130
// if mpSidePositions [ i ] then
64075: LD_EXP 6
64079: PUSH
64080: LD_VAR 0 2
64084: ARRAY
64085: IFFALSE 64128
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
64087: LD_ADDR_VAR 0 1
64091: PUSH
64092: LD_VAR 0 1
64096: PUSH
64097: LD_STRING #KingoftheHill-Player
64099: PUSH
64100: LD_VAR 0 2
64104: PUSH
64105: LD_EXP 63
64109: PUSH
64110: LD_VAR 0 2
64114: ARRAY
64115: PUSH
64116: LD_EXP 34
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: ADD
64127: ST_TO_ADDR
64128: GO 64072
64130: POP
64131: POP
// end ; mpDisplayStrings := result ;
64132: LD_ADDR_EXP 37
64136: PUSH
64137: LD_VAR 0 1
64141: ST_TO_ADDR
// end ;
64142: LD_VAR 0 1
64146: RET
// export function HowMuchPointsKing ( side ) ; begin
64147: LD_INT 0
64149: PPUSH
// result := HowMuchPoints ( side ) ;
64150: LD_ADDR_VAR 0 2
64154: PUSH
64155: LD_VAR 0 1
64159: PPUSH
64160: CALL 64170 0 1
64164: ST_TO_ADDR
// end ;
64165: LD_VAR 0 2
64169: RET
// function HowMuchPoints ( side ) ; var i ; begin
64170: LD_INT 0
64172: PPUSH
64173: PPUSH
// if mpTeamGame then
64174: LD_EXP 10
64178: IFFALSE 64247
// begin for i := 1 to Count ( mpTeams ) do
64180: LD_ADDR_VAR 0 3
64184: PUSH
64185: DOUBLE
64186: LD_INT 1
64188: DEC
64189: ST_TO_ADDR
64190: LD_EXP 9
64194: PPUSH
64195: CALL 19583 0 1
64199: PUSH
64200: FOR_TO
64201: IFFALSE 64243
// begin if side in mpTeams [ i ] then
64203: LD_VAR 0 1
64207: PUSH
64208: LD_EXP 9
64212: PUSH
64213: LD_VAR 0 3
64217: ARRAY
64218: IN
64219: IFFALSE 64241
// begin result := mpKingPoints [ i ] ;
64221: LD_ADDR_VAR 0 2
64225: PUSH
64226: LD_EXP 63
64230: PUSH
64231: LD_VAR 0 3
64235: ARRAY
64236: ST_TO_ADDR
// exit ;
64237: POP
64238: POP
64239: GO 64263
// end ; end ;
64241: GO 64200
64243: POP
64244: POP
// end else
64245: GO 64263
// result := mpKingPoints [ side ] ;
64247: LD_ADDR_VAR 0 2
64251: PUSH
64252: LD_EXP 63
64256: PUSH
64257: LD_VAR 0 1
64261: ARRAY
64262: ST_TO_ADDR
// end ;
64263: LD_VAR 0 2
64267: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
64268: LD_EXP 38
64272: IFFALSE 64280
64274: PUSH
64275: CALL 64692 0 0
64279: AND
64280: IFFALSE 64288
64282: PUSH
64283: LD_OWVAR 4
64287: AND
64288: IFFALSE 64541
64290: GO 64292
64292: DISABLE
64293: LD_INT 0
64295: PPUSH
64296: PPUSH
// begin canWin := false ;
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: LD_INT 0
64304: ST_TO_ADDR
// if not HasPower ( your_side ) then
64305: LD_OWVAR 2
64309: PPUSH
64310: CALL 64734 0 1
64314: NOT
64315: IFFALSE 64326
// begin Multiplayer_Loose_Message ;
64317: CALL_OW 521
// enable ( mpLose ) ;
64321: LD_INT 102
64323: ENABLE_MARKED
// end else
64324: GO 64541
// begin if not EnemiesInGame then
64326: CALL 64544 0 0
64330: NOT
64331: IFFALSE 64338
// begin enable ( mpWin ) ;
64333: LD_INT 101
64335: ENABLE_MARKED
// exit ;
64336: GO 64541
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
64338: LD_ADDR_VAR 0 2
64342: PUSH
64343: LD_OWVAR 2
64347: PPUSH
64348: CALL 64170 0 1
64352: PUSH
64353: LD_EXP 34
64357: GREATEREQUAL
64358: IFFALSE 64371
64360: PUSH
64361: LD_OWVAR 2
64365: PPUSH
64366: CALL 64734 0 1
64370: AND
64371: ST_TO_ADDR
// for i := 1 to 8 do
64372: LD_ADDR_VAR 0 1
64376: PUSH
64377: DOUBLE
64378: LD_INT 1
64380: DEC
64381: ST_TO_ADDR
64382: LD_INT 8
64384: PUSH
64385: FOR_TO
64386: IFFALSE 64527
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64388: LD_EXP 6
64392: PUSH
64393: LD_VAR 0 1
64397: ARRAY
64398: IFFALSE 64411
64400: PUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL_OW 108
64410: AND
64411: IFFALSE 64425
64413: PUSH
64414: LD_VAR 0 1
64418: PUSH
64419: LD_OWVAR 2
64423: NONEQUAL
64424: AND
64425: IFFALSE 64525
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64427: LD_EXP 7
64431: PUSH
64432: LD_VAR 0 1
64436: ARRAY
64437: NOT
64438: IFTRUE 64486
64440: PUSH
64441: LD_EXP 7
64445: PUSH
64446: LD_VAR 0 1
64450: ARRAY
64451: PUSH
64452: LD_EXP 7
64456: PUSH
64457: LD_OWVAR 2
64461: ARRAY
64462: NONEQUAL
64463: IFFALSE 64485
64465: PUSH
64466: LD_OWVAR 2
64470: PPUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 81
64480: PUSH
64481: LD_INT 1
64483: NONEQUAL
64484: AND
64485: OR
64486: IFFALSE 64525
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
64488: LD_VAR 0 1
64492: PPUSH
64493: CALL 64170 0 1
64497: PUSH
64498: LD_EXP 34
64502: GREATEREQUAL
64503: IFFALSE 64516
64505: PUSH
64506: LD_VAR 0 1
64510: PPUSH
64511: CALL 64734 0 1
64515: AND
64516: IFFALSE 64525
// begin enable ( mpLose ) ;
64518: LD_INT 102
64520: ENABLE_MARKED
// exit ;
64521: POP
64522: POP
64523: GO 64541
// end ;
64525: GO 64385
64527: POP
64528: POP
// if canWin then
64529: LD_VAR 0 2
64533: IFFALSE 64540
// enable ( mpWin ) else
64535: LD_INT 101
64537: ENABLE_MARKED
64538: GO 64541
// enable ;
64540: ENABLE
// end ; end ;
64541: PPOPN 2
64543: END
// function EnemiesInGame ; var i ; begin
64544: LD_INT 0
64546: PPUSH
64547: PPUSH
// result := false ;
64548: LD_ADDR_VAR 0 1
64552: PUSH
64553: LD_INT 0
64555: ST_TO_ADDR
// for i := 1 to 8 do
64556: LD_ADDR_VAR 0 2
64560: PUSH
64561: DOUBLE
64562: LD_INT 1
64564: DEC
64565: ST_TO_ADDR
64566: LD_INT 8
64568: PUSH
64569: FOR_TO
64570: IFFALSE 64685
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
64572: LD_VAR 0 2
64576: PUSH
64577: LD_OWVAR 2
64581: NONEQUAL
64582: IFFALSE 64595
64584: PUSH
64585: LD_VAR 0 2
64589: PPUSH
64590: CALL 64734 0 1
64594: AND
64595: IFFALSE 64608
64597: PUSH
64598: LD_VAR 0 2
64602: PPUSH
64603: CALL_OW 108
64607: AND
64608: IFFALSE 64683
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64610: LD_EXP 7
64614: PUSH
64615: LD_VAR 0 2
64619: ARRAY
64620: NOT
64621: IFTRUE 64669
64623: PUSH
64624: LD_EXP 7
64628: PUSH
64629: LD_VAR 0 2
64633: ARRAY
64634: PUSH
64635: LD_EXP 7
64639: PUSH
64640: LD_OWVAR 2
64644: ARRAY
64645: NONEQUAL
64646: IFFALSE 64668
64648: PUSH
64649: LD_OWVAR 2
64653: PPUSH
64654: LD_VAR 0 2
64658: PPUSH
64659: CALL_OW 81
64663: PUSH
64664: LD_INT 1
64666: NONEQUAL
64667: AND
64668: OR
64669: IFFALSE 64683
// begin result := true ;
64671: LD_ADDR_VAR 0 1
64675: PUSH
64676: LD_INT 1
64678: ST_TO_ADDR
// exit ;
64679: POP
64680: POP
64681: GO 64687
// end ;
64683: GO 64569
64685: POP
64686: POP
// end ;
64687: LD_VAR 0 1
64691: RET
// function CanWinLoose ; begin
64692: LD_INT 0
64694: PPUSH
// result := true ;
64695: LD_ADDR_VAR 0 1
64699: PUSH
64700: LD_INT 1
64702: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
64703: CALL_OW 531
64707: IFFALSE 64719
64709: PUSH
64710: CALL_OW 519
64714: PUSH
64715: LD_INT 1
64717: GREATER
64718: AND
64719: IFFALSE 64729
// result := false ;
64721: LD_ADDR_VAR 0 1
64725: PUSH
64726: LD_INT 0
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 1
64733: RET
// function HasPower ( i ) ; begin
64734: LD_INT 0
64736: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
64737: LD_ADDR_VAR 0 2
64741: PUSH
64742: LD_INT 22
64744: PUSH
64745: LD_VAR 0 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: LD_INT 21
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 33
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 33
64779: PUSH
64780: LD_INT 5
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PPUSH
64797: CALL_OW 69
64801: ST_TO_ADDR
// end ;
64802: LD_VAR 0 2
64806: RET
