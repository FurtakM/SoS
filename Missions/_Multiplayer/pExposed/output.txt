// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45811 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46157 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := false ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUp1 , buildUp2 , buildUp3 , buildUp4 , buildUp5 , buildUp6 , buildUp7 , buildUp8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 17
 891: PUSH
 892: LD_INT 18
 894: PUSH
 895: LD_INT 19
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingHillArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 64
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 , ApeArea7 , ApeArea8 ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 3 ) , GetBuildingFromArea ( depotArea8 , 2 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 40
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45266 0 2
1411: PUSH
1412: LD_INT 43
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 45266 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45266 0 2
1433: PUSH
1434: LD_INT 49
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL 45266 0 2
1444: PUSH
1445: LD_INT 52
1447: PPUSH
1448: LD_INT 4
1450: PPUSH
1451: CALL 45266 0 2
1455: PUSH
1456: LD_INT 55
1458: PPUSH
1459: LD_INT 4
1461: PPUSH
1462: CALL 45266 0 2
1466: PUSH
1467: LD_INT 58
1469: PPUSH
1470: LD_INT 3
1472: PPUSH
1473: CALL 45266 0 2
1477: PUSH
1478: LD_INT 61
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: CALL 45266 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5112 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 24
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 45099 0 2
1667: PUSH
1668: LD_INT 26
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 45099 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 45099 0 2
1693: PUSH
1694: LD_INT 30
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 45099 0 2
1706: PUSH
1707: LD_INT 32
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 45099 0 2
1719: PUSH
1720: LD_INT 34
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 45099 0 2
1732: PUSH
1733: LD_INT 36
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 45099 0 2
1745: PUSH
1746: LD_INT 38
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 45099 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 25
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 45099 0 2
1810: PUSH
1811: LD_INT 27
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 45099 0 2
1823: PUSH
1824: LD_INT 29
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 45099 0 2
1836: PUSH
1837: LD_INT 31
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 45099 0 2
1849: PUSH
1850: LD_INT 33
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 45099 0 2
1862: PUSH
1863: LD_INT 35
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 45099 0 2
1875: PUSH
1876: LD_INT 37
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 45099 0 2
1888: PUSH
1889: LD_INT 39
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 45099 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunkerArea11 , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea12 , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea21 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea22 , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea31 , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea32 , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea41 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea42 , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea51 , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea52 , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea61 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea62 , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea71 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea72 , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea81 , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea82 , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 0 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 41
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45266 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 42
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45266 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 65
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45266 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 44
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 45266 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 45
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 45266 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 66
2032: PPUSH
2033: LD_INT 4
2035: PPUSH
2036: CALL 45266 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 47
2052: PPUSH
2053: LD_INT 3
2055: PPUSH
2056: CALL 45266 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 48
2067: PPUSH
2068: LD_INT 4
2070: PPUSH
2071: CALL 45266 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 67
2082: PPUSH
2083: LD_INT 3
2085: PPUSH
2086: CALL 45266 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 50
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45266 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 51
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45266 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 68
2132: PPUSH
2133: LD_INT 4
2135: PPUSH
2136: CALL 45266 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 53
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 45266 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 54
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL 45266 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 69
2182: PPUSH
2183: LD_INT 3
2185: PPUSH
2186: CALL 45266 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 56
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 45266 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 57
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: CALL 45266 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 70
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL 45266 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 59
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45266 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 60
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL 45266 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 71
2282: PPUSH
2283: LD_INT 1
2285: PPUSH
2286: CALL 45266 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 62
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 45266 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 63
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL 45266 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 72
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: CALL 45266 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 17
2569: PUSH
2570: LD_INT 18
2572: PUSH
2573: LD_INT 19
2575: PUSH
2576: LD_INT 20
2578: PUSH
2579: LD_INT 21
2581: PUSH
2582: LD_INT 22
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUp1 , buildUp2 , buildUp3 , buildUp4 , buildUp5 , buildUp6 , buildUp7 , buildUp8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 42082 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 54104 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 50749 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 54121 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 51414 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 54162 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 51467 0 3
2923: PPOPN 3
2925: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// if exist_mode then
2930: LD_VAR 0 2
2934: IFFALSE 2980
// begin unit := CreateCharacter ( prefix & ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 1
2950: STR
2951: PPUSH
2952: CALL_OW 34
2956: ST_TO_ADDR
// if unit then
2957: LD_VAR 0 5
2961: IFFALSE 2978
// DeleteCharacters ( prefix & ident ) ;
2963: LD_VAR 0 3
2967: PUSH
2968: LD_VAR 0 1
2972: STR
2973: PPUSH
2974: CALL_OW 40
// end else
2978: GO 2995
// unit := NewCharacter ( ident ) ;
2980: LD_ADDR_VAR 0 5
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: CALL_OW 25
2994: ST_TO_ADDR
// result := unit ;
2995: LD_ADDR_VAR 0 4
2999: PUSH
3000: LD_VAR 0 5
3004: ST_TO_ADDR
// end ;
3005: LD_VAR 0 4
3009: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3010: LD_INT 0
3012: PPUSH
3013: PPUSH
// if exist_mode then
3014: LD_VAR 0 2
3018: IFFALSE 3043
// unit := CreateCharacter ( prefix & ident ) else
3020: LD_ADDR_VAR 0 5
3024: PUSH
3025: LD_VAR 0 3
3029: PUSH
3030: LD_VAR 0 1
3034: STR
3035: PPUSH
3036: CALL_OW 34
3040: ST_TO_ADDR
3041: GO 3058
// unit := NewCharacter ( ident ) ;
3043: LD_ADDR_VAR 0 5
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 25
3057: ST_TO_ADDR
// result := unit ;
3058: LD_ADDR_VAR 0 4
3062: PUSH
3063: LD_VAR 0 5
3067: ST_TO_ADDR
// end ;
3068: LD_VAR 0 4
3072: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3073: LD_INT 0
3075: PPUSH
3076: PPUSH
// if not side or not nation then
3077: LD_VAR 0 1
3081: NOT
3082: PUSH
3083: LD_VAR 0 2
3087: NOT
3088: OR
3089: IFFALSE 3093
// exit ;
3091: GO 3861
// case nation of nation_american :
3093: LD_VAR 0 2
3097: PUSH
3098: LD_INT 1
3100: DOUBLE
3101: EQUAL
3102: IFTRUE 3106
3104: GO 3320
3106: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3107: LD_ADDR_VAR 0 4
3111: PUSH
3112: LD_INT 35
3114: PUSH
3115: LD_INT 45
3117: PUSH
3118: LD_INT 46
3120: PUSH
3121: LD_INT 47
3123: PUSH
3124: LD_INT 82
3126: PUSH
3127: LD_INT 83
3129: PUSH
3130: LD_INT 84
3132: PUSH
3133: LD_INT 85
3135: PUSH
3136: LD_INT 86
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: LD_INT 2
3144: PUSH
3145: LD_INT 6
3147: PUSH
3148: LD_INT 15
3150: PUSH
3151: LD_INT 16
3153: PUSH
3154: LD_INT 7
3156: PUSH
3157: LD_INT 12
3159: PUSH
3160: LD_INT 13
3162: PUSH
3163: LD_INT 10
3165: PUSH
3166: LD_INT 14
3168: PUSH
3169: LD_INT 20
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 22
3177: PUSH
3178: LD_INT 25
3180: PUSH
3181: LD_INT 32
3183: PUSH
3184: LD_INT 27
3186: PUSH
3187: LD_INT 36
3189: PUSH
3190: LD_INT 69
3192: PUSH
3193: LD_INT 39
3195: PUSH
3196: LD_INT 34
3198: PUSH
3199: LD_INT 40
3201: PUSH
3202: LD_INT 48
3204: PUSH
3205: LD_INT 49
3207: PUSH
3208: LD_INT 50
3210: PUSH
3211: LD_INT 51
3213: PUSH
3214: LD_INT 52
3216: PUSH
3217: LD_INT 53
3219: PUSH
3220: LD_INT 54
3222: PUSH
3223: LD_INT 55
3225: PUSH
3226: LD_INT 56
3228: PUSH
3229: LD_INT 57
3231: PUSH
3232: LD_INT 58
3234: PUSH
3235: LD_INT 59
3237: PUSH
3238: LD_INT 60
3240: PUSH
3241: LD_INT 61
3243: PUSH
3244: LD_INT 62
3246: PUSH
3247: LD_INT 80
3249: PUSH
3250: LD_INT 82
3252: PUSH
3253: LD_INT 83
3255: PUSH
3256: LD_INT 84
3258: PUSH
3259: LD_INT 85
3261: PUSH
3262: LD_INT 86
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: ST_TO_ADDR
3318: GO 3785
3320: LD_INT 2
3322: DOUBLE
3323: EQUAL
3324: IFTRUE 3328
3326: GO 3554
3328: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3329: LD_ADDR_VAR 0 4
3333: PUSH
3334: LD_INT 35
3336: PUSH
3337: LD_INT 45
3339: PUSH
3340: LD_INT 46
3342: PUSH
3343: LD_INT 47
3345: PUSH
3346: LD_INT 82
3348: PUSH
3349: LD_INT 83
3351: PUSH
3352: LD_INT 84
3354: PUSH
3355: LD_INT 85
3357: PUSH
3358: LD_INT 87
3360: PUSH
3361: LD_INT 70
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: LD_INT 11
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: LD_INT 4
3375: PUSH
3376: LD_INT 5
3378: PUSH
3379: LD_INT 6
3381: PUSH
3382: LD_INT 15
3384: PUSH
3385: LD_INT 18
3387: PUSH
3388: LD_INT 7
3390: PUSH
3391: LD_INT 17
3393: PUSH
3394: LD_INT 8
3396: PUSH
3397: LD_INT 20
3399: PUSH
3400: LD_INT 21
3402: PUSH
3403: LD_INT 22
3405: PUSH
3406: LD_INT 72
3408: PUSH
3409: LD_INT 26
3411: PUSH
3412: LD_INT 69
3414: PUSH
3415: LD_INT 39
3417: PUSH
3418: LD_INT 40
3420: PUSH
3421: LD_INT 41
3423: PUSH
3424: LD_INT 42
3426: PUSH
3427: LD_INT 43
3429: PUSH
3430: LD_INT 48
3432: PUSH
3433: LD_INT 49
3435: PUSH
3436: LD_INT 50
3438: PUSH
3439: LD_INT 51
3441: PUSH
3442: LD_INT 52
3444: PUSH
3445: LD_INT 53
3447: PUSH
3448: LD_INT 54
3450: PUSH
3451: LD_INT 55
3453: PUSH
3454: LD_INT 56
3456: PUSH
3457: LD_INT 60
3459: PUSH
3460: LD_INT 61
3462: PUSH
3463: LD_INT 62
3465: PUSH
3466: LD_INT 66
3468: PUSH
3469: LD_INT 67
3471: PUSH
3472: LD_INT 68
3474: PUSH
3475: LD_INT 81
3477: PUSH
3478: LD_INT 82
3480: PUSH
3481: LD_INT 83
3483: PUSH
3484: LD_INT 84
3486: PUSH
3487: LD_INT 85
3489: PUSH
3490: LD_INT 87
3492: PUSH
3493: LD_INT 88
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: ST_TO_ADDR
3552: GO 3785
3554: LD_INT 3
3556: DOUBLE
3557: EQUAL
3558: IFTRUE 3562
3560: GO 3784
3562: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3563: LD_ADDR_VAR 0 4
3567: PUSH
3568: LD_INT 46
3570: PUSH
3571: LD_INT 47
3573: PUSH
3574: LD_INT 1
3576: PUSH
3577: LD_INT 2
3579: PUSH
3580: LD_INT 82
3582: PUSH
3583: LD_INT 83
3585: PUSH
3586: LD_INT 84
3588: PUSH
3589: LD_INT 85
3591: PUSH
3592: LD_INT 86
3594: PUSH
3595: LD_INT 11
3597: PUSH
3598: LD_INT 9
3600: PUSH
3601: LD_INT 20
3603: PUSH
3604: LD_INT 19
3606: PUSH
3607: LD_INT 21
3609: PUSH
3610: LD_INT 24
3612: PUSH
3613: LD_INT 22
3615: PUSH
3616: LD_INT 25
3618: PUSH
3619: LD_INT 28
3621: PUSH
3622: LD_INT 29
3624: PUSH
3625: LD_INT 30
3627: PUSH
3628: LD_INT 31
3630: PUSH
3631: LD_INT 37
3633: PUSH
3634: LD_INT 38
3636: PUSH
3637: LD_INT 32
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: LD_INT 33
3645: PUSH
3646: LD_INT 69
3648: PUSH
3649: LD_INT 39
3651: PUSH
3652: LD_INT 34
3654: PUSH
3655: LD_INT 40
3657: PUSH
3658: LD_INT 71
3660: PUSH
3661: LD_INT 23
3663: PUSH
3664: LD_INT 44
3666: PUSH
3667: LD_INT 48
3669: PUSH
3670: LD_INT 49
3672: PUSH
3673: LD_INT 50
3675: PUSH
3676: LD_INT 51
3678: PUSH
3679: LD_INT 52
3681: PUSH
3682: LD_INT 53
3684: PUSH
3685: LD_INT 54
3687: PUSH
3688: LD_INT 55
3690: PUSH
3691: LD_INT 56
3693: PUSH
3694: LD_INT 57
3696: PUSH
3697: LD_INT 58
3699: PUSH
3700: LD_INT 59
3702: PUSH
3703: LD_INT 63
3705: PUSH
3706: LD_INT 64
3708: PUSH
3709: LD_INT 65
3711: PUSH
3712: LD_INT 82
3714: PUSH
3715: LD_INT 83
3717: PUSH
3718: LD_INT 84
3720: PUSH
3721: LD_INT 85
3723: PUSH
3724: LD_INT 86
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: ST_TO_ADDR
3782: GO 3785
3784: POP
// if state > - 1 and state < 3 then
3785: LD_VAR 0 3
3789: PUSH
3790: LD_INT 1
3792: NEG
3793: GREATER
3794: PUSH
3795: LD_VAR 0 3
3799: PUSH
3800: LD_INT 3
3802: LESS
3803: AND
3804: IFFALSE 3861
// for i in result do
3806: LD_ADDR_VAR 0 5
3810: PUSH
3811: LD_VAR 0 4
3815: PUSH
3816: FOR_IN
3817: IFFALSE 3859
// if GetTech ( i , side ) <> state then
3819: LD_VAR 0 5
3823: PPUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 321
3833: PUSH
3834: LD_VAR 0 3
3838: NONEQUAL
3839: IFFALSE 3857
// result := result diff i ;
3841: LD_ADDR_VAR 0 4
3845: PUSH
3846: LD_VAR 0 4
3850: PUSH
3851: LD_VAR 0 5
3855: DIFF
3856: ST_TO_ADDR
3857: GO 3816
3859: POP
3860: POP
// end ;
3861: LD_VAR 0 4
3865: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3866: LD_INT 0
3868: PPUSH
3869: PPUSH
3870: PPUSH
// result := true ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_INT 1
3878: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3879: LD_ADDR_VAR 0 5
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 480
3893: ST_TO_ADDR
// if not tmp then
3894: LD_VAR 0 5
3898: NOT
3899: IFFALSE 3903
// exit ;
3901: GO 3952
// for i in tmp do
3903: LD_ADDR_VAR 0 4
3907: PUSH
3908: LD_VAR 0 5
3912: PUSH
3913: FOR_IN
3914: IFFALSE 3950
// if GetTech ( i , side ) <> state_researched then
3916: LD_VAR 0 4
3920: PPUSH
3921: LD_VAR 0 1
3925: PPUSH
3926: CALL_OW 321
3930: PUSH
3931: LD_INT 2
3933: NONEQUAL
3934: IFFALSE 3948
// begin result := false ;
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_INT 0
3943: ST_TO_ADDR
// exit ;
3944: POP
3945: POP
3946: GO 3952
// end ;
3948: GO 3913
3950: POP
3951: POP
// end ;
3952: LD_VAR 0 3
3956: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
3961: PPUSH
3962: PPUSH
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
3967: PPUSH
3968: PPUSH
3969: PPUSH
3970: PPUSH
3971: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3972: LD_VAR 0 1
3976: NOT
3977: PUSH
3978: LD_VAR 0 1
3982: PPUSH
3983: CALL_OW 257
3987: PUSH
3988: LD_INT 9
3990: NONEQUAL
3991: OR
3992: IFFALSE 3996
// exit ;
3994: GO 4569
// side := GetSide ( unit ) ;
3996: LD_ADDR_VAR 0 9
4000: PUSH
4001: LD_VAR 0 1
4005: PPUSH
4006: CALL_OW 255
4010: ST_TO_ADDR
// tech_space := tech_spacanom ;
4011: LD_ADDR_VAR 0 12
4015: PUSH
4016: LD_INT 29
4018: ST_TO_ADDR
// tech_time := tech_taurad ;
4019: LD_ADDR_VAR 0 13
4023: PUSH
4024: LD_INT 28
4026: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4027: LD_ADDR_VAR 0 11
4031: PUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 310
4041: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4042: LD_VAR 0 11
4046: PPUSH
4047: CALL_OW 247
4051: PUSH
4052: LD_INT 2
4054: EQUAL
4055: IFFALSE 4059
// exit ;
4057: GO 4569
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4059: LD_ADDR_VAR 0 8
4063: PUSH
4064: LD_INT 81
4066: PUSH
4067: LD_VAR 0 9
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 3
4078: PUSH
4079: LD_INT 21
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: ST_TO_ADDR
// if not tmp then
4102: LD_VAR 0 8
4106: NOT
4107: IFFALSE 4111
// exit ;
4109: GO 4569
// if in_unit then
4111: LD_VAR 0 11
4115: IFFALSE 4139
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4117: LD_ADDR_VAR 0 10
4121: PUSH
4122: LD_VAR 0 8
4126: PPUSH
4127: LD_VAR 0 11
4131: PPUSH
4132: CALL_OW 74
4136: ST_TO_ADDR
4137: GO 4159
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4139: LD_ADDR_VAR 0 10
4143: PUSH
4144: LD_VAR 0 8
4148: PPUSH
4149: LD_VAR 0 1
4153: PPUSH
4154: CALL_OW 74
4158: ST_TO_ADDR
// if not enemy then
4159: LD_VAR 0 10
4163: NOT
4164: IFFALSE 4168
// exit ;
4166: GO 4569
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4168: LD_VAR 0 11
4172: PUSH
4173: LD_VAR 0 11
4177: PPUSH
4178: LD_VAR 0 10
4182: PPUSH
4183: CALL_OW 296
4187: PUSH
4188: LD_INT 13
4190: GREATER
4191: AND
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: LD_VAR 0 10
4202: PPUSH
4203: CALL_OW 296
4207: PUSH
4208: LD_INT 12
4210: GREATER
4211: OR
4212: IFFALSE 4216
// exit ;
4214: GO 4569
// missile := [ 1 ] ;
4216: LD_ADDR_VAR 0 14
4220: PUSH
4221: LD_INT 1
4223: PUSH
4224: EMPTY
4225: LIST
4226: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4227: LD_VAR 0 9
4231: PPUSH
4232: LD_VAR 0 12
4236: PPUSH
4237: CALL_OW 325
4241: IFFALSE 4270
// missile := Replace ( missile , missile + 1 , 2 ) ;
4243: LD_ADDR_VAR 0 14
4247: PUSH
4248: LD_VAR 0 14
4252: PPUSH
4253: LD_VAR 0 14
4257: PUSH
4258: LD_INT 1
4260: PLUS
4261: PPUSH
4262: LD_INT 2
4264: PPUSH
4265: CALL_OW 1
4269: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4270: LD_VAR 0 9
4274: PPUSH
4275: LD_VAR 0 13
4279: PPUSH
4280: CALL_OW 325
4284: PUSH
4285: LD_VAR 0 10
4289: PPUSH
4290: CALL_OW 255
4294: PPUSH
4295: LD_VAR 0 13
4299: PPUSH
4300: CALL_OW 325
4304: NOT
4305: AND
4306: IFFALSE 4335
// missile := Replace ( missile , missile + 1 , 3 ) ;
4308: LD_ADDR_VAR 0 14
4312: PUSH
4313: LD_VAR 0 14
4317: PPUSH
4318: LD_VAR 0 14
4322: PUSH
4323: LD_INT 1
4325: PLUS
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 1
4334: ST_TO_ADDR
// if missile < 2 then
4335: LD_VAR 0 14
4339: PUSH
4340: LD_INT 2
4342: LESS
4343: IFFALSE 4347
// exit ;
4345: GO 4569
// x := GetX ( enemy ) ;
4347: LD_ADDR_VAR 0 4
4351: PUSH
4352: LD_VAR 0 10
4356: PPUSH
4357: CALL_OW 250
4361: ST_TO_ADDR
// y := GetY ( enemy ) ;
4362: LD_ADDR_VAR 0 5
4366: PUSH
4367: LD_VAR 0 10
4371: PPUSH
4372: CALL_OW 251
4376: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4377: LD_ADDR_VAR 0 6
4381: PUSH
4382: LD_VAR 0 4
4386: PUSH
4387: LD_INT 1
4389: NEG
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL_OW 12
4398: PLUS
4399: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4400: LD_ADDR_VAR 0 7
4404: PUSH
4405: LD_VAR 0 5
4409: PUSH
4410: LD_INT 1
4412: NEG
4413: PPUSH
4414: LD_INT 1
4416: PPUSH
4417: CALL_OW 12
4421: PLUS
4422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4423: LD_VAR 0 6
4427: PPUSH
4428: LD_VAR 0 7
4432: PPUSH
4433: CALL_OW 488
4437: NOT
4438: IFFALSE 4460
// begin _x := x ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_VAR 0 4
4449: ST_TO_ADDR
// _y := y ;
4450: LD_ADDR_VAR 0 7
4454: PUSH
4455: LD_VAR 0 5
4459: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4460: LD_ADDR_VAR 0 3
4464: PUSH
4465: LD_INT 1
4467: PPUSH
4468: LD_VAR 0 14
4472: PPUSH
4473: CALL_OW 12
4477: ST_TO_ADDR
// case i of 1 :
4478: LD_VAR 0 3
4482: PUSH
4483: LD_INT 1
4485: DOUBLE
4486: EQUAL
4487: IFTRUE 4491
4489: GO 4508
4491: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_VAR 0 10
4501: PPUSH
4502: CALL_OW 115
4506: GO 4569
4508: LD_INT 2
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4538
4516: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4517: LD_VAR 0 1
4521: PPUSH
4522: LD_VAR 0 6
4526: PPUSH
4527: LD_VAR 0 7
4531: PPUSH
4532: CALL_OW 153
4536: GO 4569
4538: LD_INT 3
4540: DOUBLE
4541: EQUAL
4542: IFTRUE 4546
4544: GO 4568
4546: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4547: LD_VAR 0 1
4551: PPUSH
4552: LD_VAR 0 6
4556: PPUSH
4557: LD_VAR 0 7
4561: PPUSH
4562: CALL_OW 154
4566: GO 4569
4568: POP
// end ;
4569: LD_VAR 0 2
4573: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4574: LD_INT 0
4576: PPUSH
4577: PPUSH
4578: PPUSH
4579: PPUSH
4580: PPUSH
4581: PPUSH
// if not unit or not building then
4582: LD_VAR 0 1
4586: NOT
4587: PUSH
4588: LD_VAR 0 2
4592: NOT
4593: OR
4594: IFFALSE 4598
// exit ;
4596: GO 4756
// x := GetX ( building ) ;
4598: LD_ADDR_VAR 0 5
4602: PUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: CALL_OW 250
4612: ST_TO_ADDR
// y := GetY ( building ) ;
4613: LD_ADDR_VAR 0 6
4617: PUSH
4618: LD_VAR 0 2
4622: PPUSH
4623: CALL_OW 251
4627: ST_TO_ADDR
// for i = 0 to 5 do
4628: LD_ADDR_VAR 0 4
4632: PUSH
4633: DOUBLE
4634: LD_INT 0
4636: DEC
4637: ST_TO_ADDR
4638: LD_INT 5
4640: PUSH
4641: FOR_TO
4642: IFFALSE 4754
// begin _x := ShiftX ( x , i , 3 ) ;
4644: LD_ADDR_VAR 0 7
4648: PUSH
4649: LD_VAR 0 5
4653: PPUSH
4654: LD_VAR 0 4
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 272
4666: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4667: LD_ADDR_VAR 0 8
4671: PUSH
4672: LD_VAR 0 6
4676: PPUSH
4677: LD_VAR 0 4
4681: PPUSH
4682: LD_INT 3
4684: PPUSH
4685: CALL_OW 273
4689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4690: LD_VAR 0 7
4694: PPUSH
4695: LD_VAR 0 8
4699: PPUSH
4700: CALL_OW 488
4704: NOT
4705: IFFALSE 4709
// continue ;
4707: GO 4641
// if HexInfo ( _x , _y ) = 0 then
4709: LD_VAR 0 7
4713: PPUSH
4714: LD_VAR 0 8
4718: PPUSH
4719: CALL_OW 428
4723: PUSH
4724: LD_INT 0
4726: EQUAL
4727: IFFALSE 4752
// begin ComMoveXY ( unit , _x , _y ) ;
4729: LD_VAR 0 1
4733: PPUSH
4734: LD_VAR 0 7
4738: PPUSH
4739: LD_VAR 0 8
4743: PPUSH
4744: CALL_OW 111
// exit ;
4748: POP
4749: POP
4750: GO 4756
// end ; end ;
4752: GO 4641
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 3
4760: RET
// export function ScanBase ( side , base_area ) ; begin
4761: LD_INT 0
4763: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4764: LD_ADDR_VAR 0 3
4768: PUSH
4769: LD_VAR 0 2
4773: PPUSH
4774: LD_INT 81
4776: PUSH
4777: LD_VAR 0 1
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PPUSH
4786: CALL_OW 70
4790: ST_TO_ADDR
// end ;
4791: LD_VAR 0 3
4795: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4796: LD_INT 0
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
// result := false ;
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: LD_INT 0
4809: ST_TO_ADDR
// side := GetSide ( unit ) ;
4810: LD_ADDR_VAR 0 3
4814: PUSH
4815: LD_VAR 0 1
4819: PPUSH
4820: CALL_OW 255
4824: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4825: LD_ADDR_VAR 0 4
4829: PUSH
4830: LD_VAR 0 1
4834: PPUSH
4835: CALL_OW 248
4839: ST_TO_ADDR
// case nat of 1 :
4840: LD_VAR 0 4
4844: PUSH
4845: LD_INT 1
4847: DOUBLE
4848: EQUAL
4849: IFTRUE 4853
4851: GO 4864
4853: POP
// tech := tech_lassight ; 2 :
4854: LD_ADDR_VAR 0 5
4858: PUSH
4859: LD_INT 12
4861: ST_TO_ADDR
4862: GO 4903
4864: LD_INT 2
4866: DOUBLE
4867: EQUAL
4868: IFTRUE 4872
4870: GO 4883
4872: POP
// tech := tech_mortar ; 3 :
4873: LD_ADDR_VAR 0 5
4877: PUSH
4878: LD_INT 41
4880: ST_TO_ADDR
4881: GO 4903
4883: LD_INT 3
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 4902
4891: POP
// tech := tech_bazooka ; end ;
4892: LD_ADDR_VAR 0 5
4896: PUSH
4897: LD_INT 44
4899: ST_TO_ADDR
4900: GO 4903
4902: POP
// if Researched ( side , tech ) then
4903: LD_VAR 0 3
4907: PPUSH
4908: LD_VAR 0 5
4912: PPUSH
4913: CALL_OW 325
4917: IFFALSE 4944
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: LD_INT 5
4926: PUSH
4927: LD_INT 8
4929: PUSH
4930: LD_INT 9
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_VAR 0 4
4942: ARRAY
4943: ST_TO_ADDR
// end ;
4944: LD_VAR 0 2
4948: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4949: LD_INT 0
4951: PPUSH
4952: PPUSH
4953: PPUSH
// if not mines then
4954: LD_VAR 0 2
4958: NOT
4959: IFFALSE 4963
// exit ;
4961: GO 5107
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4963: LD_ADDR_VAR 0 5
4967: PUSH
4968: LD_INT 81
4970: PUSH
4971: LD_VAR 0 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_INT 3
4982: PUSH
4983: LD_INT 21
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: ST_TO_ADDR
// for i in mines do
5006: LD_ADDR_VAR 0 4
5010: PUSH
5011: LD_VAR 0 2
5015: PUSH
5016: FOR_IN
5017: IFFALSE 5105
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5019: LD_VAR 0 4
5023: PUSH
5024: LD_INT 1
5026: ARRAY
5027: PPUSH
5028: LD_VAR 0 4
5032: PUSH
5033: LD_INT 2
5035: ARRAY
5036: PPUSH
5037: CALL_OW 458
5041: NOT
5042: IFFALSE 5046
// continue ;
5044: GO 5016
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5046: LD_VAR 0 4
5050: PUSH
5051: LD_INT 1
5053: ARRAY
5054: PPUSH
5055: LD_VAR 0 4
5059: PUSH
5060: LD_INT 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 428
5068: PUSH
5069: LD_VAR 0 5
5073: IN
5074: IFFALSE 5103
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5076: LD_VAR 0 4
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 4
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 456
// end ;
5103: GO 5016
5105: POP
5106: POP
// end ;
5107: LD_VAR 0 3
5111: RET
// export function Count ( array ) ; begin
5112: LD_INT 0
5114: PPUSH
// result := array + 0 ;
5115: LD_ADDR_VAR 0 2
5119: PUSH
5120: LD_VAR 0 1
5124: PUSH
5125: LD_INT 0
5127: PLUS
5128: ST_TO_ADDR
// end ;
5129: LD_VAR 0 2
5133: RET
// export function IsEmpty ( building ) ; begin
5134: LD_INT 0
5136: PPUSH
// if not building then
5137: LD_VAR 0 1
5141: NOT
5142: IFFALSE 5146
// exit ;
5144: GO 5189
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5146: LD_ADDR_VAR 0 2
5150: PUSH
5151: LD_VAR 0 1
5155: PUSH
5156: LD_INT 22
5158: PUSH
5159: LD_VAR 0 1
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 58
5175: PUSH
5176: EMPTY
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PPUSH
5183: CALL_OW 69
5187: IN
5188: ST_TO_ADDR
// end ;
5189: LD_VAR 0 2
5193: RET
// export function IsNotFull ( building ) ; var places ; begin
5194: LD_INT 0
5196: PPUSH
5197: PPUSH
// if not building then
5198: LD_VAR 0 1
5202: NOT
5203: IFFALSE 5207
// exit ;
5205: GO 5235
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: LD_VAR 0 1
5216: PPUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 62
5222: PUSH
5223: EMPTY
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PPUSH
5230: CALL_OW 72
5234: ST_TO_ADDR
// end ;
5235: LD_VAR 0 2
5239: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5240: LD_INT 0
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
// tmp := [ ] ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: EMPTY
5252: ST_TO_ADDR
// list := [ ] ;
5253: LD_ADDR_VAR 0 5
5257: PUSH
5258: EMPTY
5259: ST_TO_ADDR
// for i = 16 to 25 do
5260: LD_ADDR_VAR 0 4
5264: PUSH
5265: DOUBLE
5266: LD_INT 16
5268: DEC
5269: ST_TO_ADDR
5270: LD_INT 25
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5347
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: LD_VAR 0 3
5285: PUSH
5286: LD_INT 22
5288: PUSH
5289: LD_VAR 0 1
5293: PPUSH
5294: CALL_OW 255
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 91
5305: PUSH
5306: LD_VAR 0 1
5310: PUSH
5311: LD_INT 6
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 30
5321: PUSH
5322: LD_VAR 0 4
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: EMPTY
5337: LIST
5338: PPUSH
5339: CALL_OW 69
5343: ADD
5344: ST_TO_ADDR
5345: GO 5273
5347: POP
5348: POP
// for i = 1 to tmp do
5349: LD_ADDR_VAR 0 4
5353: PUSH
5354: DOUBLE
5355: LD_INT 1
5357: DEC
5358: ST_TO_ADDR
5359: LD_VAR 0 3
5363: PUSH
5364: FOR_TO
5365: IFFALSE 5453
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: LD_VAR 0 5
5376: PUSH
5377: LD_VAR 0 3
5381: PUSH
5382: LD_VAR 0 4
5386: ARRAY
5387: PPUSH
5388: CALL_OW 266
5392: PUSH
5393: LD_VAR 0 3
5397: PUSH
5398: LD_VAR 0 4
5402: ARRAY
5403: PPUSH
5404: CALL_OW 250
5408: PUSH
5409: LD_VAR 0 3
5413: PUSH
5414: LD_VAR 0 4
5418: ARRAY
5419: PPUSH
5420: CALL_OW 251
5424: PUSH
5425: LD_VAR 0 3
5429: PUSH
5430: LD_VAR 0 4
5434: ARRAY
5435: PPUSH
5436: CALL_OW 254
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: ADD
5450: ST_TO_ADDR
5451: GO 5364
5453: POP
5454: POP
// result := list ;
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: LD_VAR 0 5
5464: ST_TO_ADDR
// end ;
5465: LD_VAR 0 2
5469: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5470: LD_INT 0
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
5476: PPUSH
5477: PPUSH
5478: PPUSH
// if not factory then
5479: LD_VAR 0 1
5483: NOT
5484: IFFALSE 5488
// exit ;
5486: GO 6081
// if control = control_apeman then
5488: LD_VAR 0 4
5492: PUSH
5493: LD_INT 5
5495: EQUAL
5496: IFFALSE 5605
// begin tmp := UnitsInside ( factory ) ;
5498: LD_ADDR_VAR 0 8
5502: PUSH
5503: LD_VAR 0 1
5507: PPUSH
5508: CALL_OW 313
5512: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5513: LD_VAR 0 8
5517: PPUSH
5518: LD_INT 25
5520: PUSH
5521: LD_INT 12
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PPUSH
5528: CALL_OW 72
5532: NOT
5533: IFFALSE 5543
// control := control_manual ;
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5543: LD_ADDR_VAR 0 8
5547: PUSH
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL 5240 0 1
5557: ST_TO_ADDR
// if tmp then
5558: LD_VAR 0 8
5562: IFFALSE 5605
// begin for i in tmp do
5564: LD_ADDR_VAR 0 7
5568: PUSH
5569: LD_VAR 0 8
5573: PUSH
5574: FOR_IN
5575: IFFALSE 5603
// if i [ 1 ] = b_ext_radio then
5577: LD_VAR 0 7
5581: PUSH
5582: LD_INT 1
5584: ARRAY
5585: PUSH
5586: LD_INT 22
5588: EQUAL
5589: IFFALSE 5601
// begin control := control_remote ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: LD_INT 2
5598: ST_TO_ADDR
// break ;
5599: GO 5603
// end ;
5601: GO 5574
5603: POP
5604: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5605: LD_VAR 0 1
5609: PPUSH
5610: LD_VAR 0 2
5614: PPUSH
5615: LD_VAR 0 3
5619: PPUSH
5620: LD_VAR 0 4
5624: PPUSH
5625: LD_VAR 0 5
5629: PPUSH
5630: CALL_OW 448
5634: IFFALSE 5669
// begin result := [ chassis , engine , control , weapon ] ;
5636: LD_ADDR_VAR 0 6
5640: PUSH
5641: LD_VAR 0 2
5645: PUSH
5646: LD_VAR 0 3
5650: PUSH
5651: LD_VAR 0 4
5655: PUSH
5656: LD_VAR 0 5
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
// exit ;
5667: GO 6081
// end ; _chassis := AvailableChassisList ( factory ) ;
5669: LD_ADDR_VAR 0 9
5673: PUSH
5674: LD_VAR 0 1
5678: PPUSH
5679: CALL_OW 475
5683: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5684: LD_ADDR_VAR 0 11
5688: PUSH
5689: LD_VAR 0 1
5693: PPUSH
5694: CALL_OW 476
5698: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5699: LD_ADDR_VAR 0 12
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 477
5713: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5714: LD_ADDR_VAR 0 10
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 478
5728: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5729: LD_VAR 0 9
5733: NOT
5734: PUSH
5735: LD_VAR 0 11
5739: NOT
5740: OR
5741: PUSH
5742: LD_VAR 0 12
5746: NOT
5747: OR
5748: PUSH
5749: LD_VAR 0 10
5753: NOT
5754: OR
5755: IFFALSE 5790
// begin result := [ chassis , engine , control , weapon ] ;
5757: LD_ADDR_VAR 0 6
5761: PUSH
5762: LD_VAR 0 2
5766: PUSH
5767: LD_VAR 0 3
5771: PUSH
5772: LD_VAR 0 4
5776: PUSH
5777: LD_VAR 0 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: ST_TO_ADDR
// exit ;
5788: GO 6081
// end ; if not chassis in _chassis then
5790: LD_VAR 0 2
5794: PUSH
5795: LD_VAR 0 9
5799: IN
5800: NOT
5801: IFFALSE 5827
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: LD_VAR 0 9
5812: PUSH
5813: LD_INT 1
5815: PPUSH
5816: LD_VAR 0 9
5820: PPUSH
5821: CALL_OW 12
5825: ARRAY
5826: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5827: LD_VAR 0 2
5831: PPUSH
5832: LD_VAR 0 3
5836: PPUSH
5837: CALL 6086 0 2
5841: NOT
5842: IFFALSE 5901
// repeat engine := _engine [ 1 ] ;
5844: LD_ADDR_VAR 0 3
5848: PUSH
5849: LD_VAR 0 11
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5858: LD_ADDR_VAR 0 11
5862: PUSH
5863: LD_VAR 0 11
5867: PPUSH
5868: LD_INT 1
5870: PPUSH
5871: CALL_OW 3
5875: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5876: LD_VAR 0 2
5880: PPUSH
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL 6086 0 2
5890: PUSH
5891: LD_VAR 0 11
5895: PUSH
5896: EMPTY
5897: EQUAL
5898: OR
5899: IFFALSE 5844
// if not control in _control then
5901: LD_VAR 0 4
5905: PUSH
5906: LD_VAR 0 12
5910: IN
5911: NOT
5912: IFFALSE 5938
// control := _control [ rand ( 1 , _control ) ] ;
5914: LD_ADDR_VAR 0 4
5918: PUSH
5919: LD_VAR 0 12
5923: PUSH
5924: LD_INT 1
5926: PPUSH
5927: LD_VAR 0 12
5931: PPUSH
5932: CALL_OW 12
5936: ARRAY
5937: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5938: LD_VAR 0 2
5942: PPUSH
5943: LD_VAR 0 5
5947: PPUSH
5948: CALL 6306 0 2
5952: NOT
5953: IFFALSE 6012
// repeat weapon := _weapon [ 1 ] ;
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: LD_VAR 0 10
5964: PUSH
5965: LD_INT 1
5967: ARRAY
5968: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5969: LD_ADDR_VAR 0 10
5973: PUSH
5974: LD_VAR 0 10
5978: PPUSH
5979: LD_INT 1
5981: PPUSH
5982: CALL_OW 3
5986: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5987: LD_VAR 0 2
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL 6306 0 2
6001: PUSH
6002: LD_VAR 0 10
6006: PUSH
6007: EMPTY
6008: EQUAL
6009: OR
6010: IFFALSE 5955
// result := [ ] ;
6012: LD_ADDR_VAR 0 6
6016: PUSH
6017: EMPTY
6018: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6019: LD_VAR 0 1
6023: PPUSH
6024: LD_VAR 0 2
6028: PPUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: LD_VAR 0 5
6043: PPUSH
6044: CALL_OW 448
6048: IFFALSE 6081
// result := [ chassis , engine , control , weapon ] ;
6050: LD_ADDR_VAR 0 6
6054: PUSH
6055: LD_VAR 0 2
6059: PUSH
6060: LD_VAR 0 3
6064: PUSH
6065: LD_VAR 0 4
6069: PUSH
6070: LD_VAR 0 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: ST_TO_ADDR
// end ;
6081: LD_VAR 0 6
6085: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6086: LD_INT 0
6088: PPUSH
// if not chassis or not engine then
6089: LD_VAR 0 1
6093: NOT
6094: PUSH
6095: LD_VAR 0 2
6099: NOT
6100: OR
6101: IFFALSE 6105
// exit ;
6103: GO 6301
// case engine of engine_solar :
6105: LD_VAR 0 2
6109: PUSH
6110: LD_INT 2
6112: DOUBLE
6113: EQUAL
6114: IFTRUE 6118
6116: GO 6156
6118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_INT 11
6126: PUSH
6127: LD_INT 12
6129: PUSH
6130: LD_INT 13
6132: PUSH
6133: LD_INT 14
6135: PUSH
6136: LD_INT 1
6138: PUSH
6139: LD_INT 2
6141: PUSH
6142: LD_INT 3
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
6154: GO 6285
6156: LD_INT 1
6158: DOUBLE
6159: EQUAL
6160: IFTRUE 6164
6162: GO 6226
6164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6165: LD_ADDR_VAR 0 3
6169: PUSH
6170: LD_INT 11
6172: PUSH
6173: LD_INT 12
6175: PUSH
6176: LD_INT 13
6178: PUSH
6179: LD_INT 14
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: LD_INT 5
6196: PUSH
6197: LD_INT 21
6199: PUSH
6200: LD_INT 23
6202: PUSH
6203: LD_INT 22
6205: PUSH
6206: LD_INT 24
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: ST_TO_ADDR
6224: GO 6285
6226: LD_INT 3
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6234
6232: GO 6284
6234: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6235: LD_ADDR_VAR 0 3
6239: PUSH
6240: LD_INT 13
6242: PUSH
6243: LD_INT 14
6245: PUSH
6246: LD_INT 2
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 4
6254: PUSH
6255: LD_INT 5
6257: PUSH
6258: LD_INT 21
6260: PUSH
6261: LD_INT 22
6263: PUSH
6264: LD_INT 23
6266: PUSH
6267: LD_INT 24
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: ST_TO_ADDR
6282: GO 6285
6284: POP
// result := ( chassis in result ) ;
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_VAR 0 1
6294: PUSH
6295: LD_VAR 0 3
6299: IN
6300: ST_TO_ADDR
// end ;
6301: LD_VAR 0 3
6305: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6306: LD_INT 0
6308: PPUSH
// if not chassis or not weapon then
6309: LD_VAR 0 1
6313: NOT
6314: PUSH
6315: LD_VAR 0 2
6319: NOT
6320: OR
6321: IFFALSE 6325
// exit ;
6323: GO 7385
// case weapon of us_machine_gun :
6325: LD_VAR 0 2
6329: PUSH
6330: LD_INT 2
6332: DOUBLE
6333: EQUAL
6334: IFTRUE 6338
6336: GO 6368
6338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6339: LD_ADDR_VAR 0 3
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: LD_INT 3
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 5
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: ST_TO_ADDR
6366: GO 7369
6368: LD_INT 3
6370: DOUBLE
6371: EQUAL
6372: IFTRUE 6376
6374: GO 6406
6376: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6377: LD_ADDR_VAR 0 3
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_INT 4
6393: PUSH
6394: LD_INT 5
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: ST_TO_ADDR
6404: GO 7369
6406: LD_INT 11
6408: DOUBLE
6409: EQUAL
6410: IFTRUE 6414
6412: GO 6444
6414: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6415: LD_ADDR_VAR 0 3
6419: PUSH
6420: LD_INT 1
6422: PUSH
6423: LD_INT 2
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 4
6431: PUSH
6432: LD_INT 5
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: ST_TO_ADDR
6442: GO 7369
6444: LD_INT 4
6446: DOUBLE
6447: EQUAL
6448: IFTRUE 6452
6450: GO 6478
6452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6453: LD_ADDR_VAR 0 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 4
6466: PUSH
6467: LD_INT 5
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
6476: GO 7369
6478: LD_INT 5
6480: DOUBLE
6481: EQUAL
6482: IFTRUE 6486
6484: GO 6512
6486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6487: LD_ADDR_VAR 0 3
6491: PUSH
6492: LD_INT 2
6494: PUSH
6495: LD_INT 3
6497: PUSH
6498: LD_INT 4
6500: PUSH
6501: LD_INT 5
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: ST_TO_ADDR
6510: GO 7369
6512: LD_INT 9
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6546
6520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 2
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 4
6534: PUSH
6535: LD_INT 5
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 7369
6546: LD_INT 7
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6580
6554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 3
6565: PUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 5
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: ST_TO_ADDR
6578: GO 7369
6580: LD_INT 12
6582: DOUBLE
6583: EQUAL
6584: IFTRUE 6588
6586: GO 6614
6588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: LD_INT 3
6599: PUSH
6600: LD_INT 4
6602: PUSH
6603: LD_INT 5
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: ST_TO_ADDR
6612: GO 7369
6614: LD_INT 13
6616: DOUBLE
6617: EQUAL
6618: IFTRUE 6622
6620: GO 6648
6622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6623: LD_ADDR_VAR 0 3
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 4
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: ST_TO_ADDR
6646: GO 7369
6648: LD_INT 14
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6656
6654: GO 6674
6656: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: ST_TO_ADDR
6672: GO 7369
6674: LD_INT 6
6676: DOUBLE
6677: EQUAL
6678: IFTRUE 6682
6680: GO 6700
6682: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6683: LD_ADDR_VAR 0 3
6687: PUSH
6688: LD_INT 4
6690: PUSH
6691: LD_INT 5
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: ST_TO_ADDR
6698: GO 7369
6700: LD_INT 10
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6708
6706: GO 6726
6708: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: LD_INT 4
6716: PUSH
6717: LD_INT 5
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: ST_TO_ADDR
6724: GO 7369
6726: LD_INT 22
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6760
6734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_INT 11
6742: PUSH
6743: LD_INT 12
6745: PUSH
6746: LD_INT 13
6748: PUSH
6749: LD_INT 14
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7369
6760: LD_INT 23
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6794
6768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 11
6776: PUSH
6777: LD_INT 12
6779: PUSH
6780: LD_INT 13
6782: PUSH
6783: LD_INT 14
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: ST_TO_ADDR
6792: GO 7369
6794: LD_INT 24
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6802
6800: GO 6828
6802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_INT 11
6810: PUSH
6811: LD_INT 12
6813: PUSH
6814: LD_INT 13
6816: PUSH
6817: LD_INT 14
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: ST_TO_ADDR
6826: GO 7369
6828: LD_INT 30
6830: DOUBLE
6831: EQUAL
6832: IFTRUE 6836
6834: GO 6862
6836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6837: LD_ADDR_VAR 0 3
6841: PUSH
6842: LD_INT 11
6844: PUSH
6845: LD_INT 12
6847: PUSH
6848: LD_INT 13
6850: PUSH
6851: LD_INT 14
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: ST_TO_ADDR
6860: GO 7369
6862: LD_INT 25
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6888
6870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_INT 13
6878: PUSH
6879: LD_INT 14
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 7369
6888: LD_INT 27
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 6914
6896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6897: LD_ADDR_VAR 0 3
6901: PUSH
6902: LD_INT 13
6904: PUSH
6905: LD_INT 14
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7369
6914: LD_INT 92
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6948
6922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 11
6930: PUSH
6931: LD_INT 12
6933: PUSH
6934: LD_INT 13
6936: PUSH
6937: LD_INT 14
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7369
6948: LD_INT 28
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 6974
6956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 13
6964: PUSH
6965: LD_INT 14
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: ST_TO_ADDR
6972: GO 7369
6974: LD_INT 29
6976: DOUBLE
6977: EQUAL
6978: IFTRUE 6982
6980: GO 7000
6982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6983: LD_ADDR_VAR 0 3
6987: PUSH
6988: LD_INT 13
6990: PUSH
6991: LD_INT 14
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: ST_TO_ADDR
6998: GO 7369
7000: LD_INT 31
7002: DOUBLE
7003: EQUAL
7004: IFTRUE 7008
7006: GO 7026
7008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_INT 13
7016: PUSH
7017: LD_INT 14
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: ST_TO_ADDR
7024: GO 7369
7026: LD_INT 26
7028: DOUBLE
7029: EQUAL
7030: IFTRUE 7034
7032: GO 7052
7034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_INT 13
7042: PUSH
7043: LD_INT 14
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 7369
7052: LD_INT 42
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7086
7060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: LD_INT 24
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: ST_TO_ADDR
7084: GO 7369
7086: LD_INT 43
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7120
7094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
7118: GO 7369
7120: LD_INT 44
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7154
7128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 23
7142: PUSH
7143: LD_INT 24
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: ST_TO_ADDR
7152: GO 7369
7154: LD_INT 45
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7188
7162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 23
7176: PUSH
7177: LD_INT 24
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 7369
7188: LD_INT 49
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7222
7196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 21
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: LD_INT 24
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 7369
7222: LD_INT 51
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7256
7230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: LD_INT 21
7238: PUSH
7239: LD_INT 22
7241: PUSH
7242: LD_INT 23
7244: PUSH
7245: LD_INT 24
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: ST_TO_ADDR
7254: GO 7369
7256: LD_INT 52
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7290
7264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7265: LD_ADDR_VAR 0 3
7269: PUSH
7270: LD_INT 21
7272: PUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 23
7278: PUSH
7279: LD_INT 24
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: ST_TO_ADDR
7288: GO 7369
7290: LD_INT 53
7292: DOUBLE
7293: EQUAL
7294: IFTRUE 7298
7296: GO 7316
7298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_INT 23
7306: PUSH
7307: LD_INT 24
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 7369
7316: LD_INT 46
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7342
7324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 23
7332: PUSH
7333: LD_INT 24
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
7340: GO 7369
7342: LD_INT 47
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7350
7348: GO 7368
7350: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: LD_INT 23
7358: PUSH
7359: LD_INT 24
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: ST_TO_ADDR
7366: GO 7369
7368: POP
// result := ( chassis in result ) ;
7369: LD_ADDR_VAR 0 3
7373: PUSH
7374: LD_VAR 0 1
7378: PUSH
7379: LD_VAR 0 3
7383: IN
7384: ST_TO_ADDR
// end ;
7385: LD_VAR 0 3
7389: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7390: LD_INT 0
7392: PPUSH
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
// result := array ;
7399: LD_ADDR_VAR 0 5
7403: PUSH
7404: LD_VAR 0 1
7408: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7409: LD_VAR 0 1
7413: NOT
7414: PUSH
7415: LD_VAR 0 2
7419: NOT
7420: OR
7421: PUSH
7422: LD_VAR 0 3
7426: NOT
7427: OR
7428: PUSH
7429: LD_VAR 0 2
7433: PUSH
7434: LD_VAR 0 1
7438: GREATER
7439: OR
7440: PUSH
7441: LD_VAR 0 3
7445: PUSH
7446: LD_VAR 0 1
7450: GREATER
7451: OR
7452: IFFALSE 7456
// exit ;
7454: GO 7752
// if direction then
7456: LD_VAR 0 4
7460: IFFALSE 7524
// begin d := 1 ;
7462: LD_ADDR_VAR 0 9
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// if i_from > i_to then
7470: LD_VAR 0 2
7474: PUSH
7475: LD_VAR 0 3
7479: GREATER
7480: IFFALSE 7506
// length := ( array - i_from ) + i_to else
7482: LD_ADDR_VAR 0 11
7486: PUSH
7487: LD_VAR 0 1
7491: PUSH
7492: LD_VAR 0 2
7496: MINUS
7497: PUSH
7498: LD_VAR 0 3
7502: PLUS
7503: ST_TO_ADDR
7504: GO 7522
// length := i_to - i_from ;
7506: LD_ADDR_VAR 0 11
7510: PUSH
7511: LD_VAR 0 3
7515: PUSH
7516: LD_VAR 0 2
7520: MINUS
7521: ST_TO_ADDR
// end else
7522: GO 7585
// begin d := - 1 ;
7524: LD_ADDR_VAR 0 9
7528: PUSH
7529: LD_INT 1
7531: NEG
7532: ST_TO_ADDR
// if i_from > i_to then
7533: LD_VAR 0 2
7537: PUSH
7538: LD_VAR 0 3
7542: GREATER
7543: IFFALSE 7563
// length := i_from - i_to else
7545: LD_ADDR_VAR 0 11
7549: PUSH
7550: LD_VAR 0 2
7554: PUSH
7555: LD_VAR 0 3
7559: MINUS
7560: ST_TO_ADDR
7561: GO 7585
// length := ( array - i_to ) + i_from ;
7563: LD_ADDR_VAR 0 11
7567: PUSH
7568: LD_VAR 0 1
7572: PUSH
7573: LD_VAR 0 3
7577: MINUS
7578: PUSH
7579: LD_VAR 0 2
7583: PLUS
7584: ST_TO_ADDR
// end ; if not length then
7585: LD_VAR 0 11
7589: NOT
7590: IFFALSE 7594
// exit ;
7592: GO 7752
// tmp := array ;
7594: LD_ADDR_VAR 0 10
7598: PUSH
7599: LD_VAR 0 1
7603: ST_TO_ADDR
// for i = 1 to length do
7604: LD_ADDR_VAR 0 6
7608: PUSH
7609: DOUBLE
7610: LD_INT 1
7612: DEC
7613: ST_TO_ADDR
7614: LD_VAR 0 11
7618: PUSH
7619: FOR_TO
7620: IFFALSE 7740
// begin for j = 1 to array do
7622: LD_ADDR_VAR 0 7
7626: PUSH
7627: DOUBLE
7628: LD_INT 1
7630: DEC
7631: ST_TO_ADDR
7632: LD_VAR 0 1
7636: PUSH
7637: FOR_TO
7638: IFFALSE 7726
// begin k := j + d ;
7640: LD_ADDR_VAR 0 8
7644: PUSH
7645: LD_VAR 0 7
7649: PUSH
7650: LD_VAR 0 9
7654: PLUS
7655: ST_TO_ADDR
// if k > array then
7656: LD_VAR 0 8
7660: PUSH
7661: LD_VAR 0 1
7665: GREATER
7666: IFFALSE 7676
// k := 1 ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if not k then
7676: LD_VAR 0 8
7680: NOT
7681: IFFALSE 7693
// k := array ;
7683: LD_ADDR_VAR 0 8
7687: PUSH
7688: LD_VAR 0 1
7692: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7693: LD_ADDR_VAR 0 10
7697: PUSH
7698: LD_VAR 0 10
7702: PPUSH
7703: LD_VAR 0 8
7707: PPUSH
7708: LD_VAR 0 1
7712: PUSH
7713: LD_VAR 0 7
7717: ARRAY
7718: PPUSH
7719: CALL_OW 1
7723: ST_TO_ADDR
// end ;
7724: GO 7637
7726: POP
7727: POP
// array := tmp ;
7728: LD_ADDR_VAR 0 1
7732: PUSH
7733: LD_VAR 0 10
7737: ST_TO_ADDR
// end ;
7738: GO 7619
7740: POP
7741: POP
// result := array ;
7742: LD_ADDR_VAR 0 5
7746: PUSH
7747: LD_VAR 0 1
7751: ST_TO_ADDR
// end ;
7752: LD_VAR 0 5
7756: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7757: LD_INT 0
7759: PPUSH
7760: PPUSH
// result := 0 ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_INT 0
7768: ST_TO_ADDR
// if not array or not value in array then
7769: LD_VAR 0 1
7773: NOT
7774: PUSH
7775: LD_VAR 0 2
7779: PUSH
7780: LD_VAR 0 1
7784: IN
7785: NOT
7786: OR
7787: IFFALSE 7791
// exit ;
7789: GO 7845
// for i = 1 to array do
7791: LD_ADDR_VAR 0 4
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 1
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7843
// if value = array [ i ] then
7809: LD_VAR 0 2
7813: PUSH
7814: LD_VAR 0 1
7818: PUSH
7819: LD_VAR 0 4
7823: ARRAY
7824: EQUAL
7825: IFFALSE 7841
// begin result := i ;
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: LD_VAR 0 4
7836: ST_TO_ADDR
// exit ;
7837: POP
7838: POP
7839: GO 7845
// end ;
7841: GO 7806
7843: POP
7844: POP
// end ;
7845: LD_VAR 0 3
7849: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7850: LD_INT 0
7852: PPUSH
// vc_chassis := chassis ;
7853: LD_ADDR_OWVAR 37
7857: PUSH
7858: LD_VAR 0 1
7862: ST_TO_ADDR
// vc_engine := engine ;
7863: LD_ADDR_OWVAR 39
7867: PUSH
7868: LD_VAR 0 2
7872: ST_TO_ADDR
// vc_control := control ;
7873: LD_ADDR_OWVAR 38
7877: PUSH
7878: LD_VAR 0 3
7882: ST_TO_ADDR
// vc_weapon := weapon ;
7883: LD_ADDR_OWVAR 40
7887: PUSH
7888: LD_VAR 0 4
7892: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7893: LD_ADDR_OWVAR 41
7897: PUSH
7898: LD_VAR 0 5
7902: ST_TO_ADDR
// end ;
7903: LD_VAR 0 6
7907: RET
// export function WantPlant ( unit ) ; var task ; begin
7908: LD_INT 0
7910: PPUSH
7911: PPUSH
// result := false ;
7912: LD_ADDR_VAR 0 2
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: CALL_OW 437
7934: ST_TO_ADDR
// if task then
7935: LD_VAR 0 3
7939: IFFALSE 7967
// if task [ 1 ] [ 1 ] = p then
7941: LD_VAR 0 3
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: PUSH
7954: LD_STRING p
7956: EQUAL
7957: IFFALSE 7967
// result := true ;
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// end ;
7967: LD_VAR 0 2
7971: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7972: LD_INT 0
7974: PPUSH
7975: PPUSH
7976: PPUSH
7977: PPUSH
// if pos < 1 then
7978: LD_VAR 0 2
7982: PUSH
7983: LD_INT 1
7985: LESS
7986: IFFALSE 7990
// exit ;
7988: GO 8293
// if pos = 1 then
7990: LD_VAR 0 2
7994: PUSH
7995: LD_INT 1
7997: EQUAL
7998: IFFALSE 8031
// result := Replace ( arr , pos [ 1 ] , value ) else
8000: LD_ADDR_VAR 0 4
8004: PUSH
8005: LD_VAR 0 1
8009: PPUSH
8010: LD_VAR 0 2
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 3
8023: PPUSH
8024: CALL_OW 1
8028: ST_TO_ADDR
8029: GO 8293
// begin tmp := arr ;
8031: LD_ADDR_VAR 0 6
8035: PUSH
8036: LD_VAR 0 1
8040: ST_TO_ADDR
// s_arr := [ tmp ] ;
8041: LD_ADDR_VAR 0 7
8045: PUSH
8046: LD_VAR 0 6
8050: PUSH
8051: EMPTY
8052: LIST
8053: ST_TO_ADDR
// for i = 1 to pos - 1 do
8054: LD_ADDR_VAR 0 5
8058: PUSH
8059: DOUBLE
8060: LD_INT 1
8062: DEC
8063: ST_TO_ADDR
8064: LD_VAR 0 2
8068: PUSH
8069: LD_INT 1
8071: MINUS
8072: PUSH
8073: FOR_TO
8074: IFFALSE 8119
// begin tmp := tmp [ pos [ i ] ] ;
8076: LD_ADDR_VAR 0 6
8080: PUSH
8081: LD_VAR 0 6
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_VAR 0 5
8095: ARRAY
8096: ARRAY
8097: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8098: LD_ADDR_VAR 0 7
8102: PUSH
8103: LD_VAR 0 7
8107: PUSH
8108: LD_VAR 0 6
8112: PUSH
8113: EMPTY
8114: LIST
8115: ADD
8116: ST_TO_ADDR
// end ;
8117: GO 8073
8119: POP
8120: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8121: LD_ADDR_VAR 0 6
8125: PUSH
8126: LD_VAR 0 6
8130: PPUSH
8131: LD_VAR 0 2
8135: PUSH
8136: LD_VAR 0 2
8140: ARRAY
8141: PPUSH
8142: LD_VAR 0 3
8146: PPUSH
8147: CALL_OW 1
8151: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8152: LD_ADDR_VAR 0 7
8156: PUSH
8157: LD_VAR 0 7
8161: PPUSH
8162: LD_VAR 0 7
8166: PPUSH
8167: LD_VAR 0 6
8171: PPUSH
8172: CALL_OW 1
8176: ST_TO_ADDR
// for i = s_arr downto 2 do
8177: LD_ADDR_VAR 0 5
8181: PUSH
8182: DOUBLE
8183: LD_VAR 0 7
8187: INC
8188: ST_TO_ADDR
8189: LD_INT 2
8191: PUSH
8192: FOR_DOWNTO
8193: IFFALSE 8277
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8195: LD_ADDR_VAR 0 6
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: LD_VAR 0 5
8209: PUSH
8210: LD_INT 1
8212: MINUS
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 2
8219: PUSH
8220: LD_VAR 0 5
8224: PUSH
8225: LD_INT 1
8227: MINUS
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 7
8234: PUSH
8235: LD_VAR 0 5
8239: ARRAY
8240: PPUSH
8241: CALL_OW 1
8245: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8246: LD_ADDR_VAR 0 7
8250: PUSH
8251: LD_VAR 0 7
8255: PPUSH
8256: LD_VAR 0 5
8260: PUSH
8261: LD_INT 1
8263: MINUS
8264: PPUSH
8265: LD_VAR 0 6
8269: PPUSH
8270: CALL_OW 1
8274: ST_TO_ADDR
// end ;
8275: GO 8192
8277: POP
8278: POP
// result := s_arr [ 1 ] ;
8279: LD_ADDR_VAR 0 4
8283: PUSH
8284: LD_VAR 0 7
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: ST_TO_ADDR
// end ; end ;
8293: LD_VAR 0 4
8297: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8298: LD_INT 0
8300: PPUSH
8301: PPUSH
// if not list then
8302: LD_VAR 0 1
8306: NOT
8307: IFFALSE 8311
// exit ;
8309: GO 8402
// i := list [ pos1 ] ;
8311: LD_ADDR_VAR 0 5
8315: PUSH
8316: LD_VAR 0 1
8320: PUSH
8321: LD_VAR 0 2
8325: ARRAY
8326: ST_TO_ADDR
// if not i then
8327: LD_VAR 0 5
8331: NOT
8332: IFFALSE 8336
// exit ;
8334: GO 8402
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8336: LD_ADDR_VAR 0 1
8340: PUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: LD_VAR 0 2
8350: PPUSH
8351: LD_VAR 0 1
8355: PUSH
8356: LD_VAR 0 3
8360: ARRAY
8361: PPUSH
8362: CALL_OW 1
8366: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8367: LD_ADDR_VAR 0 1
8371: PUSH
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 3
8381: PPUSH
8382: LD_VAR 0 5
8386: PPUSH
8387: CALL_OW 1
8391: ST_TO_ADDR
// result := list ;
8392: LD_ADDR_VAR 0 4
8396: PUSH
8397: LD_VAR 0 1
8401: ST_TO_ADDR
// end ;
8402: LD_VAR 0 4
8406: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8407: LD_INT 0
8409: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8410: LD_ADDR_VAR 0 5
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 250
8424: PPUSH
8425: LD_VAR 0 1
8429: PPUSH
8430: CALL_OW 251
8434: PPUSH
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_VAR 0 3
8444: PPUSH
8445: LD_VAR 0 4
8449: PPUSH
8450: CALL 8828 0 5
8454: ST_TO_ADDR
// end ;
8455: LD_VAR 0 5
8459: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8460: LD_INT 0
8462: PPUSH
8463: PPUSH
8464: PPUSH
8465: PPUSH
// if not list or not unit then
8466: LD_VAR 0 2
8470: NOT
8471: PUSH
8472: LD_VAR 0 1
8476: NOT
8477: OR
8478: IFFALSE 8482
// exit ;
8480: GO 8823
// result := [ ] ;
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: EMPTY
8488: ST_TO_ADDR
// for i in list do
8489: LD_ADDR_VAR 0 6
8493: PUSH
8494: LD_VAR 0 2
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8718
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8502: LD_ADDR_VAR 0 8
8506: PUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: LD_VAR 0 6
8516: PUSH
8517: LD_INT 1
8519: ARRAY
8520: PPUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 2
8528: ARRAY
8529: PPUSH
8530: CALL_OW 297
8534: ST_TO_ADDR
// if not Count ( result ) then
8535: LD_VAR 0 5
8539: PPUSH
8540: CALL 5112 0 1
8544: NOT
8545: IFFALSE 8578
// begin result := Join ( result , [ i , tmp ] ) ;
8547: LD_ADDR_VAR 0 5
8551: PUSH
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_VAR 0 6
8561: PUSH
8562: LD_VAR 0 8
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL 40721 0 2
8575: ST_TO_ADDR
// continue ;
8576: GO 8499
// end ; if result [ result ] [ 2 ] <= tmp then
8578: LD_VAR 0 5
8582: PUSH
8583: LD_VAR 0 5
8587: ARRAY
8588: PUSH
8589: LD_INT 2
8591: ARRAY
8592: PUSH
8593: LD_VAR 0 8
8597: LESSEQUAL
8598: IFFALSE 8631
// result := Join ( result , [ i , tmp ] ) else
8600: LD_ADDR_VAR 0 5
8604: PUSH
8605: LD_VAR 0 5
8609: PPUSH
8610: LD_VAR 0 6
8614: PUSH
8615: LD_VAR 0 8
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PPUSH
8624: CALL 40721 0 2
8628: ST_TO_ADDR
8629: GO 8716
// begin for j := 1 to Count ( result ) do
8631: LD_ADDR_VAR 0 7
8635: PUSH
8636: DOUBLE
8637: LD_INT 1
8639: DEC
8640: ST_TO_ADDR
8641: LD_VAR 0 5
8645: PPUSH
8646: CALL 5112 0 1
8650: PUSH
8651: FOR_TO
8652: IFFALSE 8714
// begin if tmp < result [ j ] [ 2 ] then
8654: LD_VAR 0 8
8658: PUSH
8659: LD_VAR 0 5
8663: PUSH
8664: LD_VAR 0 7
8668: ARRAY
8669: PUSH
8670: LD_INT 2
8672: ARRAY
8673: LESS
8674: IFFALSE 8712
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8676: LD_ADDR_VAR 0 5
8680: PUSH
8681: LD_VAR 0 5
8685: PPUSH
8686: LD_VAR 0 7
8690: PPUSH
8691: LD_VAR 0 6
8695: PUSH
8696: LD_VAR 0 8
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 2
8709: ST_TO_ADDR
// break ;
8710: GO 8714
// end ; end ;
8712: GO 8651
8714: POP
8715: POP
// end ; end ;
8716: GO 8499
8718: POP
8719: POP
// if result and not asc then
8720: LD_VAR 0 5
8724: PUSH
8725: LD_VAR 0 3
8729: NOT
8730: AND
8731: IFFALSE 8748
// result := ReverseArray ( result ) ;
8733: LD_ADDR_VAR 0 5
8737: PUSH
8738: LD_VAR 0 5
8742: PPUSH
8743: CALL 35988 0 1
8747: ST_TO_ADDR
// tmp := [ ] ;
8748: LD_ADDR_VAR 0 8
8752: PUSH
8753: EMPTY
8754: ST_TO_ADDR
// if mode then
8755: LD_VAR 0 4
8759: IFFALSE 8823
// begin for i := 1 to result do
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: DOUBLE
8767: LD_INT 1
8769: DEC
8770: ST_TO_ADDR
8771: LD_VAR 0 5
8775: PUSH
8776: FOR_TO
8777: IFFALSE 8811
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8779: LD_ADDR_VAR 0 8
8783: PUSH
8784: LD_VAR 0 8
8788: PPUSH
8789: LD_VAR 0 5
8793: PUSH
8794: LD_VAR 0 6
8798: ARRAY
8799: PUSH
8800: LD_INT 1
8802: ARRAY
8803: PPUSH
8804: CALL 40721 0 2
8808: ST_TO_ADDR
8809: GO 8776
8811: POP
8812: POP
// result := tmp ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 8
8822: ST_TO_ADDR
// end ; end ;
8823: LD_VAR 0 5
8827: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
8832: PPUSH
8833: PPUSH
// if not list then
8834: LD_VAR 0 3
8838: NOT
8839: IFFALSE 8843
// exit ;
8841: GO 9231
// result := [ ] ;
8843: LD_ADDR_VAR 0 6
8847: PUSH
8848: EMPTY
8849: ST_TO_ADDR
// for i in list do
8850: LD_ADDR_VAR 0 7
8854: PUSH
8855: LD_VAR 0 3
8859: PUSH
8860: FOR_IN
8861: IFFALSE 9063
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8863: LD_ADDR_VAR 0 9
8867: PUSH
8868: LD_VAR 0 7
8872: PPUSH
8873: LD_VAR 0 1
8877: PPUSH
8878: LD_VAR 0 2
8882: PPUSH
8883: CALL_OW 297
8887: ST_TO_ADDR
// if not result then
8888: LD_VAR 0 6
8892: NOT
8893: IFFALSE 8919
// result := [ [ i , tmp ] ] else
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: LD_VAR 0 9
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: ST_TO_ADDR
8917: GO 9061
// begin if result [ result ] [ 2 ] <= tmp then
8919: LD_VAR 0 6
8923: PUSH
8924: LD_VAR 0 6
8928: ARRAY
8929: PUSH
8930: LD_INT 2
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 9
8938: LESSEQUAL
8939: IFFALSE 8981
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8941: LD_ADDR_VAR 0 6
8945: PUSH
8946: LD_VAR 0 6
8950: PPUSH
8951: LD_VAR 0 6
8955: PUSH
8956: LD_INT 1
8958: PLUS
8959: PPUSH
8960: LD_VAR 0 7
8964: PUSH
8965: LD_VAR 0 9
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PPUSH
8974: CALL_OW 2
8978: ST_TO_ADDR
8979: GO 9061
// for j := 1 to result do
8981: LD_ADDR_VAR 0 8
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_VAR 0 6
8995: PUSH
8996: FOR_TO
8997: IFFALSE 9059
// begin if tmp < result [ j ] [ 2 ] then
8999: LD_VAR 0 9
9003: PUSH
9004: LD_VAR 0 6
9008: PUSH
9009: LD_VAR 0 8
9013: ARRAY
9014: PUSH
9015: LD_INT 2
9017: ARRAY
9018: LESS
9019: IFFALSE 9057
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9021: LD_ADDR_VAR 0 6
9025: PUSH
9026: LD_VAR 0 6
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: LD_VAR 0 7
9040: PUSH
9041: LD_VAR 0 9
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 2
9054: ST_TO_ADDR
// break ;
9055: GO 9059
// end ; end ;
9057: GO 8996
9059: POP
9060: POP
// end ; end ;
9061: GO 8860
9063: POP
9064: POP
// if result and not asc then
9065: LD_VAR 0 6
9069: PUSH
9070: LD_VAR 0 4
9074: NOT
9075: AND
9076: IFFALSE 9151
// begin tmp := result ;
9078: LD_ADDR_VAR 0 9
9082: PUSH
9083: LD_VAR 0 6
9087: ST_TO_ADDR
// for i = tmp downto 1 do
9088: LD_ADDR_VAR 0 7
9092: PUSH
9093: DOUBLE
9094: LD_VAR 0 9
9098: INC
9099: ST_TO_ADDR
9100: LD_INT 1
9102: PUSH
9103: FOR_DOWNTO
9104: IFFALSE 9149
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9106: LD_ADDR_VAR 0 6
9110: PUSH
9111: LD_VAR 0 6
9115: PPUSH
9116: LD_VAR 0 9
9120: PUSH
9121: LD_VAR 0 7
9125: MINUS
9126: PUSH
9127: LD_INT 1
9129: PLUS
9130: PPUSH
9131: LD_VAR 0 9
9135: PUSH
9136: LD_VAR 0 7
9140: ARRAY
9141: PPUSH
9142: CALL_OW 1
9146: ST_TO_ADDR
9147: GO 9103
9149: POP
9150: POP
// end ; tmp := [ ] ;
9151: LD_ADDR_VAR 0 9
9155: PUSH
9156: EMPTY
9157: ST_TO_ADDR
// if mode then
9158: LD_VAR 0 5
9162: IFFALSE 9231
// begin for i = 1 to result do
9164: LD_ADDR_VAR 0 7
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_VAR 0 6
9178: PUSH
9179: FOR_TO
9180: IFFALSE 9219
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9182: LD_ADDR_VAR 0 9
9186: PUSH
9187: LD_VAR 0 9
9191: PPUSH
9192: LD_VAR 0 7
9196: PPUSH
9197: LD_VAR 0 6
9201: PUSH
9202: LD_VAR 0 7
9206: ARRAY
9207: PUSH
9208: LD_INT 1
9210: ARRAY
9211: PPUSH
9212: CALL_OW 1
9216: ST_TO_ADDR
9217: GO 9179
9219: POP
9220: POP
// result := tmp ;
9221: LD_ADDR_VAR 0 6
9225: PUSH
9226: LD_VAR 0 9
9230: ST_TO_ADDR
// end ; end ;
9231: LD_VAR 0 6
9235: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9244: LD_ADDR_VAR 0 5
9248: PUSH
9249: LD_INT 0
9251: PUSH
9252: LD_INT 0
9254: PUSH
9255: LD_INT 0
9257: PUSH
9258: EMPTY
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: ST_TO_ADDR
// if not x or not y then
9266: LD_VAR 0 2
9270: NOT
9271: PUSH
9272: LD_VAR 0 3
9276: NOT
9277: OR
9278: IFFALSE 9282
// exit ;
9280: GO 10932
// if not range then
9282: LD_VAR 0 4
9286: NOT
9287: IFFALSE 9297
// range := 10 ;
9289: LD_ADDR_VAR 0 4
9293: PUSH
9294: LD_INT 10
9296: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9297: LD_ADDR_VAR 0 8
9301: PUSH
9302: LD_INT 81
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 92
9316: PUSH
9317: LD_VAR 0 2
9321: PUSH
9322: LD_VAR 0 3
9326: PUSH
9327: LD_VAR 0 4
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 21
9343: PUSH
9344: LD_INT 3
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: ST_TO_ADDR
// if not tmp then
9365: LD_VAR 0 8
9369: NOT
9370: IFFALSE 9374
// exit ;
9372: GO 10932
// for i in tmp do
9374: LD_ADDR_VAR 0 6
9378: PUSH
9379: LD_VAR 0 8
9383: PUSH
9384: FOR_IN
9385: IFFALSE 10907
// begin points := [ 0 , 0 , 0 ] ;
9387: LD_ADDR_VAR 0 9
9391: PUSH
9392: LD_INT 0
9394: PUSH
9395: LD_INT 0
9397: PUSH
9398: LD_INT 0
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: ST_TO_ADDR
// bpoints := 1 ;
9406: LD_ADDR_VAR 0 10
9410: PUSH
9411: LD_INT 1
9413: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9414: LD_VAR 0 6
9418: PPUSH
9419: CALL_OW 247
9423: PUSH
9424: LD_INT 1
9426: DOUBLE
9427: EQUAL
9428: IFTRUE 9432
9430: GO 10010
9432: POP
// begin if GetClass ( i ) = 1 then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 257
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: IFFALSE 9467
// points := [ 10 , 5 , 3 ] ;
9448: LD_ADDR_VAR 0 9
9452: PUSH
9453: LD_INT 10
9455: PUSH
9456: LD_INT 5
9458: PUSH
9459: LD_INT 3
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9467: LD_VAR 0 6
9471: PPUSH
9472: CALL_OW 257
9476: PUSH
9477: LD_INT 2
9479: PUSH
9480: LD_INT 3
9482: PUSH
9483: LD_INT 4
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: IN
9491: IFFALSE 9512
// points := [ 3 , 2 , 1 ] ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_INT 3
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9512: LD_VAR 0 6
9516: PPUSH
9517: CALL_OW 257
9521: PUSH
9522: LD_INT 5
9524: EQUAL
9525: IFFALSE 9546
// points := [ 130 , 5 , 2 ] ;
9527: LD_ADDR_VAR 0 9
9531: PUSH
9532: LD_INT 130
9534: PUSH
9535: LD_INT 5
9537: PUSH
9538: LD_INT 2
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 257
9555: PUSH
9556: LD_INT 8
9558: EQUAL
9559: IFFALSE 9580
// points := [ 35 , 35 , 30 ] ;
9561: LD_ADDR_VAR 0 9
9565: PUSH
9566: LD_INT 35
9568: PUSH
9569: LD_INT 35
9571: PUSH
9572: LD_INT 30
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9580: LD_VAR 0 6
9584: PPUSH
9585: CALL_OW 257
9589: PUSH
9590: LD_INT 9
9592: EQUAL
9593: IFFALSE 9614
// points := [ 20 , 55 , 40 ] ;
9595: LD_ADDR_VAR 0 9
9599: PUSH
9600: LD_INT 20
9602: PUSH
9603: LD_INT 55
9605: PUSH
9606: LD_INT 40
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9614: LD_VAR 0 6
9618: PPUSH
9619: CALL_OW 257
9623: PUSH
9624: LD_INT 12
9626: PUSH
9627: LD_INT 16
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: IN
9634: IFFALSE 9655
// points := [ 5 , 3 , 2 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 5
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 2
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 17
9667: EQUAL
9668: IFFALSE 9689
// points := [ 100 , 50 , 75 ] ;
9670: LD_ADDR_VAR 0 9
9674: PUSH
9675: LD_INT 100
9677: PUSH
9678: LD_INT 50
9680: PUSH
9681: LD_INT 75
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 257
9698: PUSH
9699: LD_INT 15
9701: EQUAL
9702: IFFALSE 9723
// points := [ 10 , 5 , 3 ] ;
9704: LD_ADDR_VAR 0 9
9708: PUSH
9709: LD_INT 10
9711: PUSH
9712: LD_INT 5
9714: PUSH
9715: LD_INT 3
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9723: LD_VAR 0 6
9727: PPUSH
9728: CALL_OW 257
9732: PUSH
9733: LD_INT 14
9735: EQUAL
9736: IFFALSE 9757
// points := [ 10 , 0 , 0 ] ;
9738: LD_ADDR_VAR 0 9
9742: PUSH
9743: LD_INT 10
9745: PUSH
9746: LD_INT 0
9748: PUSH
9749: LD_INT 0
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9757: LD_VAR 0 6
9761: PPUSH
9762: CALL_OW 257
9766: PUSH
9767: LD_INT 11
9769: EQUAL
9770: IFFALSE 9791
// points := [ 30 , 10 , 5 ] ;
9772: LD_ADDR_VAR 0 9
9776: PUSH
9777: LD_INT 30
9779: PUSH
9780: LD_INT 10
9782: PUSH
9783: LD_INT 5
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9791: LD_VAR 0 1
9795: PPUSH
9796: LD_INT 5
9798: PPUSH
9799: CALL_OW 321
9803: PUSH
9804: LD_INT 2
9806: EQUAL
9807: IFFALSE 9824
// bpoints := bpoints * 1.8 ;
9809: LD_ADDR_VAR 0 10
9813: PUSH
9814: LD_VAR 0 10
9818: PUSH
9819: LD_REAL  1.80000000000000E+0000
9822: MUL
9823: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9824: LD_VAR 0 6
9828: PPUSH
9829: CALL_OW 257
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: LD_INT 4
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: IN
9852: PUSH
9853: LD_VAR 0 1
9857: PPUSH
9858: LD_INT 51
9860: PPUSH
9861: CALL_OW 321
9865: PUSH
9866: LD_INT 2
9868: EQUAL
9869: AND
9870: IFFALSE 9887
// bpoints := bpoints * 1.2 ;
9872: LD_ADDR_VAR 0 10
9876: PUSH
9877: LD_VAR 0 10
9881: PUSH
9882: LD_REAL  1.20000000000000E+0000
9885: MUL
9886: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9887: LD_VAR 0 6
9891: PPUSH
9892: CALL_OW 257
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: LD_INT 7
9902: PUSH
9903: LD_INT 9
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: IN
9911: PUSH
9912: LD_VAR 0 1
9916: PPUSH
9917: LD_INT 52
9919: PPUSH
9920: CALL_OW 321
9924: PUSH
9925: LD_INT 2
9927: EQUAL
9928: AND
9929: IFFALSE 9946
// bpoints := bpoints * 1.5 ;
9931: LD_ADDR_VAR 0 10
9935: PUSH
9936: LD_VAR 0 10
9940: PUSH
9941: LD_REAL  1.50000000000000E+0000
9944: MUL
9945: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9946: LD_VAR 0 1
9950: PPUSH
9951: LD_INT 66
9953: PPUSH
9954: CALL_OW 321
9958: PUSH
9959: LD_INT 2
9961: EQUAL
9962: IFFALSE 9979
// bpoints := bpoints * 1.1 ;
9964: LD_ADDR_VAR 0 10
9968: PUSH
9969: LD_VAR 0 10
9973: PUSH
9974: LD_REAL  1.10000000000000E+0000
9977: MUL
9978: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9979: LD_ADDR_VAR 0 10
9983: PUSH
9984: LD_VAR 0 10
9988: PUSH
9989: LD_VAR 0 6
9993: PPUSH
9994: LD_INT 1
9996: PPUSH
9997: CALL_OW 259
10001: PUSH
10002: LD_REAL  1.15000000000000E+0000
10005: MUL
10006: MUL
10007: ST_TO_ADDR
// end ; unit_vehicle :
10008: GO 10836
10010: LD_INT 2
10012: DOUBLE
10013: EQUAL
10014: IFTRUE 10018
10016: GO 10824
10018: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10019: LD_VAR 0 6
10023: PPUSH
10024: CALL_OW 264
10028: PUSH
10029: LD_INT 2
10031: PUSH
10032: LD_INT 42
10034: PUSH
10035: LD_INT 24
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: IN
10043: IFFALSE 10064
// points := [ 25 , 5 , 3 ] ;
10045: LD_ADDR_VAR 0 9
10049: PUSH
10050: LD_INT 25
10052: PUSH
10053: LD_INT 5
10055: PUSH
10056: LD_INT 3
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10064: LD_VAR 0 6
10068: PPUSH
10069: CALL_OW 264
10073: PUSH
10074: LD_INT 4
10076: PUSH
10077: LD_INT 43
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: IN
10088: IFFALSE 10109
// points := [ 40 , 15 , 5 ] ;
10090: LD_ADDR_VAR 0 9
10094: PUSH
10095: LD_INT 40
10097: PUSH
10098: LD_INT 15
10100: PUSH
10101: LD_INT 5
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10109: LD_VAR 0 6
10113: PPUSH
10114: CALL_OW 264
10118: PUSH
10119: LD_INT 3
10121: PUSH
10122: LD_INT 23
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: IN
10129: IFFALSE 10150
// points := [ 7 , 25 , 8 ] ;
10131: LD_ADDR_VAR 0 9
10135: PUSH
10136: LD_INT 7
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 8
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL_OW 264
10159: PUSH
10160: LD_INT 5
10162: PUSH
10163: LD_INT 27
10165: PUSH
10166: LD_INT 44
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: IN
10174: IFFALSE 10195
// points := [ 14 , 50 , 16 ] ;
10176: LD_ADDR_VAR 0 9
10180: PUSH
10181: LD_INT 14
10183: PUSH
10184: LD_INT 50
10186: PUSH
10187: LD_INT 16
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10195: LD_VAR 0 6
10199: PPUSH
10200: CALL_OW 264
10204: PUSH
10205: LD_INT 6
10207: PUSH
10208: LD_INT 46
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: IN
10215: IFFALSE 10236
// points := [ 32 , 120 , 70 ] ;
10217: LD_ADDR_VAR 0 9
10221: PUSH
10222: LD_INT 32
10224: PUSH
10225: LD_INT 120
10227: PUSH
10228: LD_INT 70
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 264
10245: PUSH
10246: LD_INT 7
10248: PUSH
10249: LD_INT 28
10251: PUSH
10252: LD_INT 45
10254: PUSH
10255: LD_INT 92
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: IN
10264: IFFALSE 10285
// points := [ 35 , 20 , 45 ] ;
10266: LD_ADDR_VAR 0 9
10270: PUSH
10271: LD_INT 35
10273: PUSH
10274: LD_INT 20
10276: PUSH
10277: LD_INT 45
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10285: LD_VAR 0 6
10289: PPUSH
10290: CALL_OW 264
10294: PUSH
10295: LD_INT 47
10297: PUSH
10298: EMPTY
10299: LIST
10300: IN
10301: IFFALSE 10322
// points := [ 67 , 45 , 75 ] ;
10303: LD_ADDR_VAR 0 9
10307: PUSH
10308: LD_INT 67
10310: PUSH
10311: LD_INT 45
10313: PUSH
10314: LD_INT 75
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10322: LD_VAR 0 6
10326: PPUSH
10327: CALL_OW 264
10331: PUSH
10332: LD_INT 26
10334: PUSH
10335: EMPTY
10336: LIST
10337: IN
10338: IFFALSE 10359
// points := [ 120 , 30 , 80 ] ;
10340: LD_ADDR_VAR 0 9
10344: PUSH
10345: LD_INT 120
10347: PUSH
10348: LD_INT 30
10350: PUSH
10351: LD_INT 80
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10359: LD_VAR 0 6
10363: PPUSH
10364: CALL_OW 264
10368: PUSH
10369: LD_INT 22
10371: PUSH
10372: EMPTY
10373: LIST
10374: IN
10375: IFFALSE 10396
// points := [ 40 , 1 , 1 ] ;
10377: LD_ADDR_VAR 0 9
10381: PUSH
10382: LD_INT 40
10384: PUSH
10385: LD_INT 1
10387: PUSH
10388: LD_INT 1
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10396: LD_VAR 0 6
10400: PPUSH
10401: CALL_OW 264
10405: PUSH
10406: LD_INT 29
10408: PUSH
10409: EMPTY
10410: LIST
10411: IN
10412: IFFALSE 10433
// points := [ 70 , 200 , 400 ] ;
10414: LD_ADDR_VAR 0 9
10418: PUSH
10419: LD_INT 70
10421: PUSH
10422: LD_INT 200
10424: PUSH
10425: LD_INT 400
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10433: LD_VAR 0 6
10437: PPUSH
10438: CALL_OW 264
10442: PUSH
10443: LD_INT 14
10445: PUSH
10446: LD_INT 53
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: IN
10453: IFFALSE 10474
// points := [ 40 , 10 , 20 ] ;
10455: LD_ADDR_VAR 0 9
10459: PUSH
10460: LD_INT 40
10462: PUSH
10463: LD_INT 10
10465: PUSH
10466: LD_INT 20
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10474: LD_VAR 0 6
10478: PPUSH
10479: CALL_OW 264
10483: PUSH
10484: LD_INT 9
10486: PUSH
10487: EMPTY
10488: LIST
10489: IN
10490: IFFALSE 10511
// points := [ 5 , 70 , 20 ] ;
10492: LD_ADDR_VAR 0 9
10496: PUSH
10497: LD_INT 5
10499: PUSH
10500: LD_INT 70
10502: PUSH
10503: LD_INT 20
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10511: LD_VAR 0 6
10515: PPUSH
10516: CALL_OW 264
10520: PUSH
10521: LD_INT 10
10523: PUSH
10524: EMPTY
10525: LIST
10526: IN
10527: IFFALSE 10548
// points := [ 35 , 110 , 70 ] ;
10529: LD_ADDR_VAR 0 9
10533: PUSH
10534: LD_INT 35
10536: PUSH
10537: LD_INT 110
10539: PUSH
10540: LD_INT 70
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10548: LD_VAR 0 6
10552: PPUSH
10553: CALL_OW 265
10557: PUSH
10558: LD_INT 25
10560: EQUAL
10561: IFFALSE 10582
// points := [ 80 , 65 , 100 ] ;
10563: LD_ADDR_VAR 0 9
10567: PUSH
10568: LD_INT 80
10570: PUSH
10571: LD_INT 65
10573: PUSH
10574: LD_INT 100
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10582: LD_VAR 0 6
10586: PPUSH
10587: CALL_OW 263
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10630
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10597: LD_ADDR_VAR 0 10
10601: PUSH
10602: LD_VAR 0 10
10606: PUSH
10607: LD_VAR 0 6
10611: PPUSH
10612: CALL_OW 311
10616: PPUSH
10617: LD_INT 3
10619: PPUSH
10620: CALL_OW 259
10624: PUSH
10625: LD_INT 4
10627: MUL
10628: MUL
10629: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10630: LD_VAR 0 6
10634: PPUSH
10635: CALL_OW 263
10639: PUSH
10640: LD_INT 2
10642: EQUAL
10643: IFFALSE 10694
// begin j := IsControledBy ( i ) ;
10645: LD_ADDR_VAR 0 7
10649: PUSH
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 312
10659: ST_TO_ADDR
// if j then
10660: LD_VAR 0 7
10664: IFFALSE 10694
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10666: LD_ADDR_VAR 0 10
10670: PUSH
10671: LD_VAR 0 10
10675: PUSH
10676: LD_VAR 0 7
10680: PPUSH
10681: LD_INT 3
10683: PPUSH
10684: CALL_OW 259
10688: PUSH
10689: LD_INT 3
10691: MUL
10692: MUL
10693: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10694: LD_VAR 0 6
10698: PPUSH
10699: CALL_OW 264
10703: PUSH
10704: LD_INT 5
10706: PUSH
10707: LD_INT 6
10709: PUSH
10710: LD_INT 46
10712: PUSH
10713: LD_INT 44
10715: PUSH
10716: LD_INT 47
10718: PUSH
10719: LD_INT 45
10721: PUSH
10722: LD_INT 28
10724: PUSH
10725: LD_INT 7
10727: PUSH
10728: LD_INT 27
10730: PUSH
10731: LD_INT 29
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: IN
10746: PUSH
10747: LD_VAR 0 1
10751: PPUSH
10752: LD_INT 52
10754: PPUSH
10755: CALL_OW 321
10759: PUSH
10760: LD_INT 2
10762: EQUAL
10763: AND
10764: IFFALSE 10781
// bpoints := bpoints * 1.2 ;
10766: LD_ADDR_VAR 0 10
10770: PUSH
10771: LD_VAR 0 10
10775: PUSH
10776: LD_REAL  1.20000000000000E+0000
10779: MUL
10780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10781: LD_VAR 0 6
10785: PPUSH
10786: CALL_OW 264
10790: PUSH
10791: LD_INT 6
10793: PUSH
10794: LD_INT 46
10796: PUSH
10797: LD_INT 47
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: IN
10805: IFFALSE 10822
// bpoints := bpoints * 1.2 ;
10807: LD_ADDR_VAR 0 10
10811: PUSH
10812: LD_VAR 0 10
10816: PUSH
10817: LD_REAL  1.20000000000000E+0000
10820: MUL
10821: ST_TO_ADDR
// end ; unit_building :
10822: GO 10836
10824: LD_INT 3
10826: DOUBLE
10827: EQUAL
10828: IFTRUE 10832
10830: GO 10835
10832: POP
// ; end ;
10833: GO 10836
10835: POP
// for j = 1 to 3 do
10836: LD_ADDR_VAR 0 7
10840: PUSH
10841: DOUBLE
10842: LD_INT 1
10844: DEC
10845: ST_TO_ADDR
10846: LD_INT 3
10848: PUSH
10849: FOR_TO
10850: IFFALSE 10903
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10852: LD_ADDR_VAR 0 5
10856: PUSH
10857: LD_VAR 0 5
10861: PPUSH
10862: LD_VAR 0 7
10866: PPUSH
10867: LD_VAR 0 5
10871: PUSH
10872: LD_VAR 0 7
10876: ARRAY
10877: PUSH
10878: LD_VAR 0 9
10882: PUSH
10883: LD_VAR 0 7
10887: ARRAY
10888: PUSH
10889: LD_VAR 0 10
10893: MUL
10894: PLUS
10895: PPUSH
10896: CALL_OW 1
10900: ST_TO_ADDR
10901: GO 10849
10903: POP
10904: POP
// end ;
10905: GO 9384
10907: POP
10908: POP
// result := Replace ( result , 4 , tmp ) ;
10909: LD_ADDR_VAR 0 5
10913: PUSH
10914: LD_VAR 0 5
10918: PPUSH
10919: LD_INT 4
10921: PPUSH
10922: LD_VAR 0 8
10926: PPUSH
10927: CALL_OW 1
10931: ST_TO_ADDR
// end ;
10932: LD_VAR 0 5
10936: RET
// export function DangerAtRange ( unit , range ) ; begin
10937: LD_INT 0
10939: PPUSH
// if not unit then
10940: LD_VAR 0 1
10944: NOT
10945: IFFALSE 10949
// exit ;
10947: GO 10994
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_VAR 0 1
10958: PPUSH
10959: CALL_OW 255
10963: PPUSH
10964: LD_VAR 0 1
10968: PPUSH
10969: CALL_OW 250
10973: PPUSH
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL_OW 251
10983: PPUSH
10984: LD_VAR 0 2
10988: PPUSH
10989: CALL 9236 0 4
10993: ST_TO_ADDR
// end ;
10994: LD_VAR 0 3
10998: RET
// export function DangerInArea ( side , area ) ; begin
10999: LD_INT 0
11001: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11002: LD_ADDR_VAR 0 3
11006: PUSH
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_INT 81
11014: PUSH
11015: LD_VAR 0 1
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 70
11028: ST_TO_ADDR
// end ;
11029: LD_VAR 0 3
11033: RET
// export function IsExtension ( b ) ; begin
11034: LD_INT 0
11036: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11037: LD_ADDR_VAR 0 2
11041: PUSH
11042: LD_VAR 0 1
11046: PUSH
11047: LD_INT 23
11049: PUSH
11050: LD_INT 20
11052: PUSH
11053: LD_INT 22
11055: PUSH
11056: LD_INT 17
11058: PUSH
11059: LD_INT 24
11061: PUSH
11062: LD_INT 21
11064: PUSH
11065: LD_INT 19
11067: PUSH
11068: LD_INT 16
11070: PUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 18
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: IN
11089: ST_TO_ADDR
// end ;
11090: LD_VAR 0 2
11094: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11095: LD_INT 0
11097: PPUSH
11098: PPUSH
11099: PPUSH
// result := [ ] ;
11100: LD_ADDR_VAR 0 4
11104: PUSH
11105: EMPTY
11106: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_VAR 0 2
11116: PPUSH
11117: LD_INT 21
11119: PUSH
11120: LD_INT 3
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 70
11131: ST_TO_ADDR
// if not tmp then
11132: LD_VAR 0 5
11136: NOT
11137: IFFALSE 11141
// exit ;
11139: GO 11205
// if checkLink then
11141: LD_VAR 0 3
11145: IFFALSE 11195
// begin for i in tmp do
11147: LD_ADDR_VAR 0 6
11151: PUSH
11152: LD_VAR 0 5
11156: PUSH
11157: FOR_IN
11158: IFFALSE 11193
// if GetBase ( i ) <> base then
11160: LD_VAR 0 6
11164: PPUSH
11165: CALL_OW 274
11169: PUSH
11170: LD_VAR 0 1
11174: NONEQUAL
11175: IFFALSE 11191
// ComLinkToBase ( base , i ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: LD_VAR 0 6
11186: PPUSH
11187: CALL_OW 169
11191: GO 11157
11193: POP
11194: POP
// end ; result := tmp ;
11195: LD_ADDR_VAR 0 4
11199: PUSH
11200: LD_VAR 0 5
11204: ST_TO_ADDR
// end ;
11205: LD_VAR 0 4
11209: RET
// export function ComComplete ( units , b ) ; var i ; begin
11210: LD_INT 0
11212: PPUSH
11213: PPUSH
// if not units then
11214: LD_VAR 0 1
11218: NOT
11219: IFFALSE 11223
// exit ;
11221: GO 11313
// for i in units do
11223: LD_ADDR_VAR 0 4
11227: PUSH
11228: LD_VAR 0 1
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11311
// if BuildingStatus ( b ) = bs_build then
11236: LD_VAR 0 2
11240: PPUSH
11241: CALL_OW 461
11245: PUSH
11246: LD_INT 1
11248: EQUAL
11249: IFFALSE 11309
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11251: LD_VAR 0 4
11255: PPUSH
11256: LD_STRING h
11258: PUSH
11259: LD_VAR 0 2
11263: PPUSH
11264: CALL_OW 250
11268: PUSH
11269: LD_VAR 0 2
11273: PPUSH
11274: CALL_OW 251
11278: PUSH
11279: LD_VAR 0 2
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: LD_INT 0
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: PPUSH
11305: CALL_OW 446
11309: GO 11233
11311: POP
11312: POP
// end ;
11313: LD_VAR 0 3
11317: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11318: LD_INT 0
11320: PPUSH
11321: PPUSH
11322: PPUSH
11323: PPUSH
11324: PPUSH
11325: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11326: LD_VAR 0 1
11330: NOT
11331: PUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 263
11341: PUSH
11342: LD_INT 2
11344: NONEQUAL
11345: OR
11346: IFFALSE 11350
// exit ;
11348: GO 11666
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11350: LD_ADDR_VAR 0 6
11354: PUSH
11355: LD_INT 22
11357: PUSH
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 255
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 30
11377: PUSH
11378: LD_INT 36
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 34
11387: PUSH
11388: LD_INT 31
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PPUSH
11404: CALL_OW 69
11408: ST_TO_ADDR
// if not tmp then
11409: LD_VAR 0 6
11413: NOT
11414: IFFALSE 11418
// exit ;
11416: GO 11666
// result := [ ] ;
11418: LD_ADDR_VAR 0 2
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// for i in tmp do
11425: LD_ADDR_VAR 0 3
11429: PUSH
11430: LD_VAR 0 6
11434: PUSH
11435: FOR_IN
11436: IFFALSE 11507
// begin t := UnitsInside ( i ) ;
11438: LD_ADDR_VAR 0 4
11442: PUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: CALL_OW 313
11452: ST_TO_ADDR
// if t then
11453: LD_VAR 0 4
11457: IFFALSE 11505
// for j in t do
11459: LD_ADDR_VAR 0 7
11463: PUSH
11464: LD_VAR 0 4
11468: PUSH
11469: FOR_IN
11470: IFFALSE 11503
// result := Replace ( result , result + 1 , j ) ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: LD_VAR 0 2
11481: PPUSH
11482: LD_VAR 0 2
11486: PUSH
11487: LD_INT 1
11489: PLUS
11490: PPUSH
11491: LD_VAR 0 7
11495: PPUSH
11496: CALL_OW 1
11500: ST_TO_ADDR
11501: GO 11469
11503: POP
11504: POP
// end ;
11505: GO 11435
11507: POP
11508: POP
// if not result then
11509: LD_VAR 0 2
11513: NOT
11514: IFFALSE 11518
// exit ;
11516: GO 11666
// mech := result [ 1 ] ;
11518: LD_ADDR_VAR 0 5
11522: PUSH
11523: LD_VAR 0 2
11527: PUSH
11528: LD_INT 1
11530: ARRAY
11531: ST_TO_ADDR
// if result > 1 then
11532: LD_VAR 0 2
11536: PUSH
11537: LD_INT 1
11539: GREATER
11540: IFFALSE 11652
// begin for i = 2 to result do
11542: LD_ADDR_VAR 0 3
11546: PUSH
11547: DOUBLE
11548: LD_INT 2
11550: DEC
11551: ST_TO_ADDR
11552: LD_VAR 0 2
11556: PUSH
11557: FOR_TO
11558: IFFALSE 11650
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11560: LD_ADDR_VAR 0 4
11564: PUSH
11565: LD_VAR 0 2
11569: PUSH
11570: LD_VAR 0 3
11574: ARRAY
11575: PPUSH
11576: LD_INT 3
11578: PPUSH
11579: CALL_OW 259
11583: PUSH
11584: LD_VAR 0 2
11588: PUSH
11589: LD_VAR 0 3
11593: ARRAY
11594: PPUSH
11595: CALL_OW 432
11599: MINUS
11600: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11601: LD_VAR 0 4
11605: PUSH
11606: LD_VAR 0 5
11610: PPUSH
11611: LD_INT 3
11613: PPUSH
11614: CALL_OW 259
11618: PUSH
11619: LD_VAR 0 5
11623: PPUSH
11624: CALL_OW 432
11628: MINUS
11629: GREATEREQUAL
11630: IFFALSE 11648
// mech := result [ i ] ;
11632: LD_ADDR_VAR 0 5
11636: PUSH
11637: LD_VAR 0 2
11641: PUSH
11642: LD_VAR 0 3
11646: ARRAY
11647: ST_TO_ADDR
// end ;
11648: GO 11557
11650: POP
11651: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 5
11661: PPUSH
11662: CALL_OW 135
// end ;
11666: LD_VAR 0 2
11670: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
11675: PPUSH
11676: PPUSH
11677: PPUSH
11678: PPUSH
11679: PPUSH
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
11684: PPUSH
11685: PPUSH
// result := [ ] ;
11686: LD_ADDR_VAR 0 7
11690: PUSH
11691: EMPTY
11692: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11693: LD_VAR 0 1
11697: PPUSH
11698: CALL_OW 266
11702: PUSH
11703: LD_INT 0
11705: PUSH
11706: LD_INT 1
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: IN
11713: NOT
11714: IFFALSE 11718
// exit ;
11716: GO 13352
// if name then
11718: LD_VAR 0 3
11722: IFFALSE 11738
// SetBName ( base_dep , name ) ;
11724: LD_VAR 0 1
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: CALL_OW 500
// base := GetBase ( base_dep ) ;
11738: LD_ADDR_VAR 0 15
11742: PUSH
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 274
11752: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11753: LD_ADDR_VAR 0 16
11757: PUSH
11758: LD_VAR 0 1
11762: PPUSH
11763: CALL_OW 255
11767: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11768: LD_ADDR_VAR 0 17
11772: PUSH
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 248
11782: ST_TO_ADDR
// if sources then
11783: LD_VAR 0 5
11787: IFFALSE 11834
// for i = 1 to 3 do
11789: LD_ADDR_VAR 0 8
11793: PUSH
11794: DOUBLE
11795: LD_INT 1
11797: DEC
11798: ST_TO_ADDR
11799: LD_INT 3
11801: PUSH
11802: FOR_TO
11803: IFFALSE 11832
// AddResourceType ( base , i , sources [ i ] ) ;
11805: LD_VAR 0 15
11809: PPUSH
11810: LD_VAR 0 8
11814: PPUSH
11815: LD_VAR 0 5
11819: PUSH
11820: LD_VAR 0 8
11824: ARRAY
11825: PPUSH
11826: CALL_OW 276
11830: GO 11802
11832: POP
11833: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11834: LD_ADDR_VAR 0 18
11838: PUSH
11839: LD_VAR 0 15
11843: PPUSH
11844: LD_VAR 0 2
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL 11095 0 3
11856: ST_TO_ADDR
// InitHc ;
11857: CALL_OW 19
// InitUc ;
11861: CALL_OW 18
// uc_side := side ;
11865: LD_ADDR_OWVAR 20
11869: PUSH
11870: LD_VAR 0 16
11874: ST_TO_ADDR
// uc_nation := nation ;
11875: LD_ADDR_OWVAR 21
11879: PUSH
11880: LD_VAR 0 17
11884: ST_TO_ADDR
// if buildings then
11885: LD_VAR 0 18
11889: IFFALSE 13211
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11891: LD_ADDR_VAR 0 19
11895: PUSH
11896: LD_VAR 0 18
11900: PPUSH
11901: LD_INT 2
11903: PUSH
11904: LD_INT 30
11906: PUSH
11907: LD_INT 29
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 30
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 72
11933: ST_TO_ADDR
// if tmp then
11934: LD_VAR 0 19
11938: IFFALSE 11986
// for i in tmp do
11940: LD_ADDR_VAR 0 8
11944: PUSH
11945: LD_VAR 0 19
11949: PUSH
11950: FOR_IN
11951: IFFALSE 11984
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11953: LD_VAR 0 8
11957: PPUSH
11958: CALL_OW 250
11962: PPUSH
11963: LD_VAR 0 8
11967: PPUSH
11968: CALL_OW 251
11972: PPUSH
11973: LD_VAR 0 16
11977: PPUSH
11978: CALL_OW 441
11982: GO 11950
11984: POP
11985: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11986: LD_VAR 0 18
11990: PPUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 32
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 33
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 72
12023: IFFALSE 12111
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12025: LD_ADDR_VAR 0 8
12029: PUSH
12030: LD_VAR 0 18
12034: PPUSH
12035: LD_INT 2
12037: PUSH
12038: LD_INT 30
12040: PUSH
12041: LD_INT 32
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 33
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 72
12067: PUSH
12068: FOR_IN
12069: IFFALSE 12109
// begin if not GetBWeapon ( i ) then
12071: LD_VAR 0 8
12075: PPUSH
12076: CALL_OW 269
12080: NOT
12081: IFFALSE 12107
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12083: LD_VAR 0 8
12087: PPUSH
12088: LD_VAR 0 8
12092: PPUSH
12093: LD_VAR 0 2
12097: PPUSH
12098: CALL 13357 0 2
12102: PPUSH
12103: CALL_OW 431
// end ;
12107: GO 12068
12109: POP
12110: POP
// end ; for i = 1 to personel do
12111: LD_ADDR_VAR 0 8
12115: PUSH
12116: DOUBLE
12117: LD_INT 1
12119: DEC
12120: ST_TO_ADDR
12121: LD_VAR 0 6
12125: PUSH
12126: FOR_TO
12127: IFFALSE 13191
// begin if i > 4 then
12129: LD_VAR 0 8
12133: PUSH
12134: LD_INT 4
12136: GREATER
12137: IFFALSE 12141
// break ;
12139: GO 13191
// case i of 1 :
12141: LD_VAR 0 8
12145: PUSH
12146: LD_INT 1
12148: DOUBLE
12149: EQUAL
12150: IFTRUE 12154
12152: GO 12234
12154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12155: LD_ADDR_VAR 0 12
12159: PUSH
12160: LD_VAR 0 18
12164: PPUSH
12165: LD_INT 22
12167: PUSH
12168: LD_VAR 0 16
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 58
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: LD_INT 32
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 30
12198: PUSH
12199: LD_INT 4
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 5
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 72
12231: ST_TO_ADDR
12232: GO 12456
12234: LD_INT 2
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12304
12242: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12243: LD_ADDR_VAR 0 12
12247: PUSH
12248: LD_VAR 0 18
12252: PPUSH
12253: LD_INT 22
12255: PUSH
12256: LD_VAR 0 16
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: LD_INT 30
12270: PUSH
12271: LD_INT 0
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 30
12280: PUSH
12281: LD_INT 1
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 72
12301: ST_TO_ADDR
12302: GO 12456
12304: LD_INT 3
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12374
12312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12313: LD_ADDR_VAR 0 12
12317: PUSH
12318: LD_VAR 0 18
12322: PPUSH
12323: LD_INT 22
12325: PUSH
12326: LD_VAR 0 16
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 2
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 30
12350: PUSH
12351: LD_INT 3
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 72
12371: ST_TO_ADDR
12372: GO 12456
12374: LD_INT 4
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12455
12382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12383: LD_ADDR_VAR 0 12
12387: PUSH
12388: LD_VAR 0 18
12392: PPUSH
12393: LD_INT 22
12395: PUSH
12396: LD_VAR 0 16
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 6
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 7
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 8
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: ST_TO_ADDR
12453: GO 12456
12455: POP
// if i = 1 then
12456: LD_VAR 0 8
12460: PUSH
12461: LD_INT 1
12463: EQUAL
12464: IFFALSE 12575
// begin tmp := [ ] ;
12466: LD_ADDR_VAR 0 19
12470: PUSH
12471: EMPTY
12472: ST_TO_ADDR
// for j in f do
12473: LD_ADDR_VAR 0 9
12477: PUSH
12478: LD_VAR 0 12
12482: PUSH
12483: FOR_IN
12484: IFFALSE 12557
// if GetBType ( j ) = b_bunker then
12486: LD_VAR 0 9
12490: PPUSH
12491: CALL_OW 266
12495: PUSH
12496: LD_INT 32
12498: EQUAL
12499: IFFALSE 12526
// tmp := Insert ( tmp , 1 , j ) else
12501: LD_ADDR_VAR 0 19
12505: PUSH
12506: LD_VAR 0 19
12510: PPUSH
12511: LD_INT 1
12513: PPUSH
12514: LD_VAR 0 9
12518: PPUSH
12519: CALL_OW 2
12523: ST_TO_ADDR
12524: GO 12555
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12526: LD_ADDR_VAR 0 19
12530: PUSH
12531: LD_VAR 0 19
12535: PPUSH
12536: LD_VAR 0 19
12540: PUSH
12541: LD_INT 1
12543: PLUS
12544: PPUSH
12545: LD_VAR 0 9
12549: PPUSH
12550: CALL_OW 2
12554: ST_TO_ADDR
12555: GO 12483
12557: POP
12558: POP
// if tmp then
12559: LD_VAR 0 19
12563: IFFALSE 12575
// f := tmp ;
12565: LD_ADDR_VAR 0 12
12569: PUSH
12570: LD_VAR 0 19
12574: ST_TO_ADDR
// end ; x := personel [ i ] ;
12575: LD_ADDR_VAR 0 13
12579: PUSH
12580: LD_VAR 0 6
12584: PUSH
12585: LD_VAR 0 8
12589: ARRAY
12590: ST_TO_ADDR
// if x = - 1 then
12591: LD_VAR 0 13
12595: PUSH
12596: LD_INT 1
12598: NEG
12599: EQUAL
12600: IFFALSE 12809
// begin for j in f do
12602: LD_ADDR_VAR 0 9
12606: PUSH
12607: LD_VAR 0 12
12611: PUSH
12612: FOR_IN
12613: IFFALSE 12805
// repeat InitHc ;
12615: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12619: LD_VAR 0 9
12623: PPUSH
12624: CALL_OW 266
12628: PUSH
12629: LD_INT 5
12631: EQUAL
12632: IFFALSE 12702
// begin if UnitsInside ( j ) < 3 then
12634: LD_VAR 0 9
12638: PPUSH
12639: CALL_OW 313
12643: PUSH
12644: LD_INT 3
12646: LESS
12647: IFFALSE 12683
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12649: LD_INT 0
12651: PPUSH
12652: LD_INT 5
12654: PUSH
12655: LD_INT 8
12657: PUSH
12658: LD_INT 9
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PUSH
12666: LD_VAR 0 17
12670: ARRAY
12671: PPUSH
12672: LD_VAR 0 4
12676: PPUSH
12677: CALL_OW 380
12681: GO 12700
// PrepareHuman ( false , i , skill ) ;
12683: LD_INT 0
12685: PPUSH
12686: LD_VAR 0 8
12690: PPUSH
12691: LD_VAR 0 4
12695: PPUSH
12696: CALL_OW 380
// end else
12700: GO 12719
// PrepareHuman ( false , i , skill ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_VAR 0 8
12709: PPUSH
12710: LD_VAR 0 4
12714: PPUSH
12715: CALL_OW 380
// un := CreateHuman ;
12719: LD_ADDR_VAR 0 14
12723: PUSH
12724: CALL_OW 44
12728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12729: LD_ADDR_VAR 0 7
12733: PUSH
12734: LD_VAR 0 7
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: LD_VAR 0 14
12746: PPUSH
12747: CALL_OW 2
12751: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12752: LD_VAR 0 14
12756: PPUSH
12757: LD_VAR 0 9
12761: PPUSH
12762: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12766: LD_VAR 0 9
12770: PPUSH
12771: CALL_OW 313
12775: PUSH
12776: LD_INT 6
12778: EQUAL
12779: PUSH
12780: LD_VAR 0 9
12784: PPUSH
12785: CALL_OW 266
12789: PUSH
12790: LD_INT 32
12792: PUSH
12793: LD_INT 31
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: IN
12800: OR
12801: IFFALSE 12615
12803: GO 12612
12805: POP
12806: POP
// end else
12807: GO 13189
// for j = 1 to x do
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: DOUBLE
12815: LD_INT 1
12817: DEC
12818: ST_TO_ADDR
12819: LD_VAR 0 13
12823: PUSH
12824: FOR_TO
12825: IFFALSE 13187
// begin InitHc ;
12827: CALL_OW 19
// if not f then
12831: LD_VAR 0 12
12835: NOT
12836: IFFALSE 12925
// begin PrepareHuman ( false , i , skill ) ;
12838: LD_INT 0
12840: PPUSH
12841: LD_VAR 0 8
12845: PPUSH
12846: LD_VAR 0 4
12850: PPUSH
12851: CALL_OW 380
// un := CreateHuman ;
12855: LD_ADDR_VAR 0 14
12859: PUSH
12860: CALL_OW 44
12864: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12865: LD_ADDR_VAR 0 7
12869: PUSH
12870: LD_VAR 0 7
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: LD_VAR 0 14
12882: PPUSH
12883: CALL_OW 2
12887: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12888: LD_VAR 0 14
12892: PPUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 250
12902: PPUSH
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 251
12912: PPUSH
12913: LD_INT 10
12915: PPUSH
12916: LD_INT 0
12918: PPUSH
12919: CALL_OW 50
// continue ;
12923: GO 12824
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12925: LD_VAR 0 12
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: CALL_OW 313
12938: PUSH
12939: LD_VAR 0 12
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: CALL_OW 266
12952: PUSH
12953: LD_INT 32
12955: PUSH
12956: LD_INT 31
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: IN
12963: AND
12964: PUSH
12965: LD_VAR 0 12
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: CALL_OW 313
12978: PUSH
12979: LD_INT 6
12981: EQUAL
12982: OR
12983: IFFALSE 13003
// f := Delete ( f , 1 ) ;
12985: LD_ADDR_VAR 0 12
12989: PUSH
12990: LD_VAR 0 12
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 3
13002: ST_TO_ADDR
// if not f then
13003: LD_VAR 0 12
13007: NOT
13008: IFFALSE 13026
// begin x := x + 2 ;
13010: LD_ADDR_VAR 0 13
13014: PUSH
13015: LD_VAR 0 13
13019: PUSH
13020: LD_INT 2
13022: PLUS
13023: ST_TO_ADDR
// continue ;
13024: GO 12824
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13026: LD_VAR 0 12
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PPUSH
13035: CALL_OW 266
13039: PUSH
13040: LD_INT 5
13042: EQUAL
13043: IFFALSE 13117
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13045: LD_VAR 0 12
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PPUSH
13054: CALL_OW 313
13058: PUSH
13059: LD_INT 3
13061: LESS
13062: IFFALSE 13098
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13064: LD_INT 0
13066: PPUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 9
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: LD_VAR 0 17
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 4
13091: PPUSH
13092: CALL_OW 380
13096: GO 13115
// PrepareHuman ( false , i , skill ) ;
13098: LD_INT 0
13100: PPUSH
13101: LD_VAR 0 8
13105: PPUSH
13106: LD_VAR 0 4
13110: PPUSH
13111: CALL_OW 380
// end else
13115: GO 13134
// PrepareHuman ( false , i , skill ) ;
13117: LD_INT 0
13119: PPUSH
13120: LD_VAR 0 8
13124: PPUSH
13125: LD_VAR 0 4
13129: PPUSH
13130: CALL_OW 380
// un := CreateHuman ;
13134: LD_ADDR_VAR 0 14
13138: PUSH
13139: CALL_OW 44
13143: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13144: LD_ADDR_VAR 0 7
13148: PUSH
13149: LD_VAR 0 7
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: LD_VAR 0 14
13161: PPUSH
13162: CALL_OW 2
13166: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13167: LD_VAR 0 14
13171: PPUSH
13172: LD_VAR 0 12
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: PPUSH
13181: CALL_OW 52
// end ;
13185: GO 12824
13187: POP
13188: POP
// end ;
13189: GO 12126
13191: POP
13192: POP
// result := result ^ buildings ;
13193: LD_ADDR_VAR 0 7
13197: PUSH
13198: LD_VAR 0 7
13202: PUSH
13203: LD_VAR 0 18
13207: ADD
13208: ST_TO_ADDR
// end else
13209: GO 13352
// begin for i = 1 to personel do
13211: LD_ADDR_VAR 0 8
13215: PUSH
13216: DOUBLE
13217: LD_INT 1
13219: DEC
13220: ST_TO_ADDR
13221: LD_VAR 0 6
13225: PUSH
13226: FOR_TO
13227: IFFALSE 13350
// begin if i > 4 then
13229: LD_VAR 0 8
13233: PUSH
13234: LD_INT 4
13236: GREATER
13237: IFFALSE 13241
// break ;
13239: GO 13350
// x := personel [ i ] ;
13241: LD_ADDR_VAR 0 13
13245: PUSH
13246: LD_VAR 0 6
13250: PUSH
13251: LD_VAR 0 8
13255: ARRAY
13256: ST_TO_ADDR
// if x = - 1 then
13257: LD_VAR 0 13
13261: PUSH
13262: LD_INT 1
13264: NEG
13265: EQUAL
13266: IFFALSE 13270
// continue ;
13268: GO 13226
// PrepareHuman ( false , i , skill ) ;
13270: LD_INT 0
13272: PPUSH
13273: LD_VAR 0 8
13277: PPUSH
13278: LD_VAR 0 4
13282: PPUSH
13283: CALL_OW 380
// un := CreateHuman ;
13287: LD_ADDR_VAR 0 14
13291: PUSH
13292: CALL_OW 44
13296: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13297: LD_VAR 0 14
13301: PPUSH
13302: LD_VAR 0 1
13306: PPUSH
13307: CALL_OW 250
13311: PPUSH
13312: LD_VAR 0 1
13316: PPUSH
13317: CALL_OW 251
13321: PPUSH
13322: LD_INT 10
13324: PPUSH
13325: LD_INT 0
13327: PPUSH
13328: CALL_OW 50
// result := result ^ un ;
13332: LD_ADDR_VAR 0 7
13336: PUSH
13337: LD_VAR 0 7
13341: PUSH
13342: LD_VAR 0 14
13346: ADD
13347: ST_TO_ADDR
// end ;
13348: GO 13226
13350: POP
13351: POP
// end ; end ;
13352: LD_VAR 0 7
13356: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13357: LD_INT 0
13359: PPUSH
13360: PPUSH
13361: PPUSH
13362: PPUSH
13363: PPUSH
13364: PPUSH
13365: PPUSH
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
// result := false ;
13375: LD_ADDR_VAR 0 3
13379: PUSH
13380: LD_INT 0
13382: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13383: LD_VAR 0 1
13387: NOT
13388: PUSH
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 266
13398: PUSH
13399: LD_INT 32
13401: PUSH
13402: LD_INT 33
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: IN
13409: NOT
13410: OR
13411: IFFALSE 13415
// exit ;
13413: GO 14524
// nat := GetNation ( tower ) ;
13415: LD_ADDR_VAR 0 12
13419: PUSH
13420: LD_VAR 0 1
13424: PPUSH
13425: CALL_OW 248
13429: ST_TO_ADDR
// side := GetSide ( tower ) ;
13430: LD_ADDR_VAR 0 16
13434: PUSH
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 255
13444: ST_TO_ADDR
// x := GetX ( tower ) ;
13445: LD_ADDR_VAR 0 10
13449: PUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 250
13459: ST_TO_ADDR
// y := GetY ( tower ) ;
13460: LD_ADDR_VAR 0 11
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 251
13474: ST_TO_ADDR
// if not x or not y then
13475: LD_VAR 0 10
13479: NOT
13480: PUSH
13481: LD_VAR 0 11
13485: NOT
13486: OR
13487: IFFALSE 13491
// exit ;
13489: GO 14524
// weapon := 0 ;
13491: LD_ADDR_VAR 0 18
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// fac_list := [ ] ;
13499: LD_ADDR_VAR 0 17
13503: PUSH
13504: EMPTY
13505: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13506: LD_ADDR_VAR 0 6
13510: PUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 274
13520: PPUSH
13521: LD_VAR 0 2
13525: PPUSH
13526: LD_INT 0
13528: PPUSH
13529: CALL 11095 0 3
13533: PPUSH
13534: LD_INT 30
13536: PUSH
13537: LD_INT 3
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PPUSH
13544: CALL_OW 72
13548: ST_TO_ADDR
// if not factories then
13549: LD_VAR 0 6
13553: NOT
13554: IFFALSE 13558
// exit ;
13556: GO 14524
// for i in factories do
13558: LD_ADDR_VAR 0 8
13562: PUSH
13563: LD_VAR 0 6
13567: PUSH
13568: FOR_IN
13569: IFFALSE 13594
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13571: LD_ADDR_VAR 0 17
13575: PUSH
13576: LD_VAR 0 17
13580: PUSH
13581: LD_VAR 0 8
13585: PPUSH
13586: CALL_OW 478
13590: UNION
13591: ST_TO_ADDR
13592: GO 13568
13594: POP
13595: POP
// if not fac_list then
13596: LD_VAR 0 17
13600: NOT
13601: IFFALSE 13605
// exit ;
13603: GO 14524
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13605: LD_ADDR_VAR 0 5
13609: PUSH
13610: LD_INT 4
13612: PUSH
13613: LD_INT 5
13615: PUSH
13616: LD_INT 9
13618: PUSH
13619: LD_INT 10
13621: PUSH
13622: LD_INT 6
13624: PUSH
13625: LD_INT 7
13627: PUSH
13628: LD_INT 11
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 27
13642: PUSH
13643: LD_INT 28
13645: PUSH
13646: LD_INT 26
13648: PUSH
13649: LD_INT 30
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 43
13660: PUSH
13661: LD_INT 44
13663: PUSH
13664: LD_INT 46
13666: PUSH
13667: LD_INT 45
13669: PUSH
13670: LD_INT 47
13672: PUSH
13673: LD_INT 49
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: LD_VAR 0 12
13693: ARRAY
13694: ST_TO_ADDR
// list := list isect fac_list ;
13695: LD_ADDR_VAR 0 5
13699: PUSH
13700: LD_VAR 0 5
13704: PUSH
13705: LD_VAR 0 17
13709: ISECT
13710: ST_TO_ADDR
// if not list then
13711: LD_VAR 0 5
13715: NOT
13716: IFFALSE 13720
// exit ;
13718: GO 14524
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13720: LD_VAR 0 12
13724: PUSH
13725: LD_INT 3
13727: EQUAL
13728: PUSH
13729: LD_INT 49
13731: PUSH
13732: LD_VAR 0 5
13736: IN
13737: AND
13738: PUSH
13739: LD_INT 31
13741: PPUSH
13742: LD_VAR 0 16
13746: PPUSH
13747: CALL_OW 321
13751: PUSH
13752: LD_INT 2
13754: EQUAL
13755: AND
13756: IFFALSE 13816
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13758: LD_INT 22
13760: PUSH
13761: LD_VAR 0 16
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 35
13772: PUSH
13773: LD_INT 49
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 91
13782: PUSH
13783: LD_VAR 0 1
13787: PUSH
13788: LD_INT 10
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: NOT
13806: IFFALSE 13816
// weapon := ru_time_lapser ;
13808: LD_ADDR_VAR 0 18
13812: PUSH
13813: LD_INT 49
13815: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13816: LD_VAR 0 12
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: IN
13831: PUSH
13832: LD_INT 11
13834: PUSH
13835: LD_VAR 0 5
13839: IN
13840: PUSH
13841: LD_INT 30
13843: PUSH
13844: LD_VAR 0 5
13848: IN
13849: OR
13850: AND
13851: PUSH
13852: LD_INT 6
13854: PPUSH
13855: LD_VAR 0 16
13859: PPUSH
13860: CALL_OW 321
13864: PUSH
13865: LD_INT 2
13867: EQUAL
13868: AND
13869: IFFALSE 14034
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13871: LD_INT 22
13873: PUSH
13874: LD_VAR 0 16
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 2
13885: PUSH
13886: LD_INT 35
13888: PUSH
13889: LD_INT 11
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 35
13898: PUSH
13899: LD_INT 30
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 91
13913: PUSH
13914: LD_VAR 0 1
13918: PUSH
13919: LD_INT 18
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: NOT
13937: PUSH
13938: LD_INT 22
13940: PUSH
13941: LD_VAR 0 16
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: LD_INT 2
13952: PUSH
13953: LD_INT 30
13955: PUSH
13956: LD_INT 32
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 30
13965: PUSH
13966: LD_INT 33
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 91
13980: PUSH
13981: LD_VAR 0 1
13985: PUSH
13986: LD_INT 12
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: PPUSH
14002: CALL_OW 69
14006: PUSH
14007: LD_INT 2
14009: GREATER
14010: AND
14011: IFFALSE 14034
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14013: LD_ADDR_VAR 0 18
14017: PUSH
14018: LD_INT 11
14020: PUSH
14021: LD_INT 30
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_VAR 0 12
14032: ARRAY
14033: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14034: LD_VAR 0 18
14038: NOT
14039: PUSH
14040: LD_INT 40
14042: PPUSH
14043: LD_VAR 0 16
14047: PPUSH
14048: CALL_OW 321
14052: PUSH
14053: LD_INT 2
14055: EQUAL
14056: AND
14057: PUSH
14058: LD_INT 7
14060: PUSH
14061: LD_VAR 0 5
14065: IN
14066: PUSH
14067: LD_INT 28
14069: PUSH
14070: LD_VAR 0 5
14074: IN
14075: OR
14076: PUSH
14077: LD_INT 45
14079: PUSH
14080: LD_VAR 0 5
14084: IN
14085: OR
14086: AND
14087: IFFALSE 14341
// begin hex := GetHexInfo ( x , y ) ;
14089: LD_ADDR_VAR 0 4
14093: PUSH
14094: LD_VAR 0 10
14098: PPUSH
14099: LD_VAR 0 11
14103: PPUSH
14104: CALL_OW 546
14108: ST_TO_ADDR
// if hex [ 1 ] then
14109: LD_VAR 0 4
14113: PUSH
14114: LD_INT 1
14116: ARRAY
14117: IFFALSE 14121
// exit ;
14119: GO 14524
// height := hex [ 2 ] ;
14121: LD_ADDR_VAR 0 15
14125: PUSH
14126: LD_VAR 0 4
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14135: LD_ADDR_VAR 0 14
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: LD_INT 3
14148: PUSH
14149: LD_INT 5
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: ST_TO_ADDR
// for i in tmp do
14158: LD_ADDR_VAR 0 8
14162: PUSH
14163: LD_VAR 0 14
14167: PUSH
14168: FOR_IN
14169: IFFALSE 14339
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14171: LD_ADDR_VAR 0 9
14175: PUSH
14176: LD_VAR 0 10
14180: PPUSH
14181: LD_VAR 0 8
14185: PPUSH
14186: LD_INT 5
14188: PPUSH
14189: CALL_OW 272
14193: PUSH
14194: LD_VAR 0 11
14198: PPUSH
14199: LD_VAR 0 8
14203: PPUSH
14204: LD_INT 5
14206: PPUSH
14207: CALL_OW 273
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14216: LD_VAR 0 9
14220: PUSH
14221: LD_INT 1
14223: ARRAY
14224: PPUSH
14225: LD_VAR 0 9
14229: PUSH
14230: LD_INT 2
14232: ARRAY
14233: PPUSH
14234: CALL_OW 488
14238: IFFALSE 14337
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14240: LD_ADDR_VAR 0 4
14244: PUSH
14245: LD_VAR 0 9
14249: PUSH
14250: LD_INT 1
14252: ARRAY
14253: PPUSH
14254: LD_VAR 0 9
14258: PUSH
14259: LD_INT 2
14261: ARRAY
14262: PPUSH
14263: CALL_OW 546
14267: ST_TO_ADDR
// if hex [ 1 ] then
14268: LD_VAR 0 4
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: IFFALSE 14280
// continue ;
14278: GO 14168
// h := hex [ 2 ] ;
14280: LD_ADDR_VAR 0 13
14284: PUSH
14285: LD_VAR 0 4
14289: PUSH
14290: LD_INT 2
14292: ARRAY
14293: ST_TO_ADDR
// if h + 7 < height then
14294: LD_VAR 0 13
14298: PUSH
14299: LD_INT 7
14301: PLUS
14302: PUSH
14303: LD_VAR 0 15
14307: LESS
14308: IFFALSE 14337
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14310: LD_ADDR_VAR 0 18
14314: PUSH
14315: LD_INT 7
14317: PUSH
14318: LD_INT 28
14320: PUSH
14321: LD_INT 45
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_VAR 0 12
14333: ARRAY
14334: ST_TO_ADDR
// break ;
14335: GO 14339
// end ; end ; end ;
14337: GO 14168
14339: POP
14340: POP
// end ; if not weapon then
14341: LD_VAR 0 18
14345: NOT
14346: IFFALSE 14406
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14348: LD_ADDR_VAR 0 5
14352: PUSH
14353: LD_VAR 0 5
14357: PUSH
14358: LD_INT 11
14360: PUSH
14361: LD_INT 30
14363: PUSH
14364: LD_INT 49
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: DIFF
14372: ST_TO_ADDR
// if not list then
14373: LD_VAR 0 5
14377: NOT
14378: IFFALSE 14382
// exit ;
14380: GO 14524
// weapon := list [ rand ( 1 , list ) ] ;
14382: LD_ADDR_VAR 0 18
14386: PUSH
14387: LD_VAR 0 5
14391: PUSH
14392: LD_INT 1
14394: PPUSH
14395: LD_VAR 0 5
14399: PPUSH
14400: CALL_OW 12
14404: ARRAY
14405: ST_TO_ADDR
// end ; if weapon then
14406: LD_VAR 0 18
14410: IFFALSE 14524
// begin tmp := CostOfWeapon ( weapon ) ;
14412: LD_ADDR_VAR 0 14
14416: PUSH
14417: LD_VAR 0 18
14421: PPUSH
14422: CALL_OW 451
14426: ST_TO_ADDR
// j := GetBase ( tower ) ;
14427: LD_ADDR_VAR 0 9
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 274
14441: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14442: LD_VAR 0 9
14446: PPUSH
14447: LD_INT 1
14449: PPUSH
14450: CALL_OW 275
14454: PUSH
14455: LD_VAR 0 14
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: GREATEREQUAL
14464: PUSH
14465: LD_VAR 0 9
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 275
14477: PUSH
14478: LD_VAR 0 14
14482: PUSH
14483: LD_INT 2
14485: ARRAY
14486: GREATEREQUAL
14487: AND
14488: PUSH
14489: LD_VAR 0 9
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 275
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 3
14509: ARRAY
14510: GREATEREQUAL
14511: AND
14512: IFFALSE 14524
// result := weapon ;
14514: LD_ADDR_VAR 0 3
14518: PUSH
14519: LD_VAR 0 18
14523: ST_TO_ADDR
// end ; end ;
14524: LD_VAR 0 3
14528: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
// result := true ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 1
14540: ST_TO_ADDR
// if array1 = array2 then
14541: LD_VAR 0 1
14545: PUSH
14546: LD_VAR 0 2
14550: EQUAL
14551: IFFALSE 14611
// begin for i = 1 to array1 do
14553: LD_ADDR_VAR 0 4
14557: PUSH
14558: DOUBLE
14559: LD_INT 1
14561: DEC
14562: ST_TO_ADDR
14563: LD_VAR 0 1
14567: PUSH
14568: FOR_TO
14569: IFFALSE 14607
// if array1 [ i ] <> array2 [ i ] then
14571: LD_VAR 0 1
14575: PUSH
14576: LD_VAR 0 4
14580: ARRAY
14581: PUSH
14582: LD_VAR 0 2
14586: PUSH
14587: LD_VAR 0 4
14591: ARRAY
14592: NONEQUAL
14593: IFFALSE 14605
// begin result := false ;
14595: LD_ADDR_VAR 0 3
14599: PUSH
14600: LD_INT 0
14602: ST_TO_ADDR
// break ;
14603: GO 14607
// end ;
14605: GO 14568
14607: POP
14608: POP
// end else
14609: GO 14619
// result := false ;
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_INT 0
14618: ST_TO_ADDR
// end ;
14619: LD_VAR 0 3
14623: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14624: LD_INT 0
14626: PPUSH
14627: PPUSH
// if not array1 or not array2 then
14628: LD_VAR 0 1
14632: NOT
14633: PUSH
14634: LD_VAR 0 2
14638: NOT
14639: OR
14640: IFFALSE 14644
// exit ;
14642: GO 14708
// result := true ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_INT 1
14651: ST_TO_ADDR
// for i = 1 to array1 do
14652: LD_ADDR_VAR 0 4
14656: PUSH
14657: DOUBLE
14658: LD_INT 1
14660: DEC
14661: ST_TO_ADDR
14662: LD_VAR 0 1
14666: PUSH
14667: FOR_TO
14668: IFFALSE 14706
// if array1 [ i ] <> array2 [ i ] then
14670: LD_VAR 0 1
14674: PUSH
14675: LD_VAR 0 4
14679: ARRAY
14680: PUSH
14681: LD_VAR 0 2
14685: PUSH
14686: LD_VAR 0 4
14690: ARRAY
14691: NONEQUAL
14692: IFFALSE 14704
// begin result := false ;
14694: LD_ADDR_VAR 0 3
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// break ;
14702: GO 14706
// end ;
14704: GO 14667
14706: POP
14707: POP
// end ;
14708: LD_VAR 0 3
14712: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14713: LD_INT 0
14715: PPUSH
14716: PPUSH
14717: PPUSH
// pom := GetBase ( fac ) ;
14718: LD_ADDR_VAR 0 5
14722: PUSH
14723: LD_VAR 0 1
14727: PPUSH
14728: CALL_OW 274
14732: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14733: LD_ADDR_VAR 0 4
14737: PUSH
14738: LD_VAR 0 2
14742: PUSH
14743: LD_INT 1
14745: ARRAY
14746: PPUSH
14747: LD_VAR 0 2
14751: PUSH
14752: LD_INT 2
14754: ARRAY
14755: PPUSH
14756: LD_VAR 0 2
14760: PUSH
14761: LD_INT 3
14763: ARRAY
14764: PPUSH
14765: LD_VAR 0 2
14769: PUSH
14770: LD_INT 4
14772: ARRAY
14773: PPUSH
14774: CALL_OW 449
14778: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_VAR 0 5
14788: PPUSH
14789: LD_INT 1
14791: PPUSH
14792: CALL_OW 275
14796: PUSH
14797: LD_VAR 0 4
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: GREATEREQUAL
14806: PUSH
14807: LD_VAR 0 5
14811: PPUSH
14812: LD_INT 2
14814: PPUSH
14815: CALL_OW 275
14819: PUSH
14820: LD_VAR 0 4
14824: PUSH
14825: LD_INT 2
14827: ARRAY
14828: GREATEREQUAL
14829: AND
14830: PUSH
14831: LD_VAR 0 5
14835: PPUSH
14836: LD_INT 3
14838: PPUSH
14839: CALL_OW 275
14843: PUSH
14844: LD_VAR 0 4
14848: PUSH
14849: LD_INT 3
14851: ARRAY
14852: GREATEREQUAL
14853: AND
14854: ST_TO_ADDR
// end ;
14855: LD_VAR 0 3
14859: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14860: LD_INT 0
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
// pom := GetBase ( building ) ;
14866: LD_ADDR_VAR 0 3
14870: PUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 274
14880: ST_TO_ADDR
// if not pom then
14881: LD_VAR 0 3
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 15060
// btype := GetBType ( building ) ;
14890: LD_ADDR_VAR 0 5
14894: PUSH
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 266
14904: ST_TO_ADDR
// if btype = b_armoury then
14905: LD_VAR 0 5
14909: PUSH
14910: LD_INT 4
14912: EQUAL
14913: IFFALSE 14923
// btype := b_barracks ;
14915: LD_ADDR_VAR 0 5
14919: PUSH
14920: LD_INT 5
14922: ST_TO_ADDR
// if btype = b_depot then
14923: LD_VAR 0 5
14927: PUSH
14928: LD_INT 0
14930: EQUAL
14931: IFFALSE 14941
// btype := b_warehouse ;
14933: LD_ADDR_VAR 0 5
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// if btype = b_workshop then
14941: LD_VAR 0 5
14945: PUSH
14946: LD_INT 2
14948: EQUAL
14949: IFFALSE 14959
// btype := b_factory ;
14951: LD_ADDR_VAR 0 5
14955: PUSH
14956: LD_INT 3
14958: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: LD_VAR 0 5
14968: PPUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: CALL_OW 248
14978: PPUSH
14979: CALL_OW 450
14983: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: CALL_OW 275
15001: PUSH
15002: LD_VAR 0 4
15006: PUSH
15007: LD_INT 1
15009: ARRAY
15010: GREATEREQUAL
15011: PUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_INT 2
15019: PPUSH
15020: CALL_OW 275
15024: PUSH
15025: LD_VAR 0 4
15029: PUSH
15030: LD_INT 2
15032: ARRAY
15033: GREATEREQUAL
15034: AND
15035: PUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: LD_INT 3
15043: PPUSH
15044: CALL_OW 275
15048: PUSH
15049: LD_VAR 0 4
15053: PUSH
15054: LD_INT 3
15056: ARRAY
15057: GREATEREQUAL
15058: AND
15059: ST_TO_ADDR
// end ;
15060: LD_VAR 0 2
15064: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15065: LD_INT 0
15067: PPUSH
15068: PPUSH
15069: PPUSH
// pom := GetBase ( building ) ;
15070: LD_ADDR_VAR 0 4
15074: PUSH
15075: LD_VAR 0 1
15079: PPUSH
15080: CALL_OW 274
15084: ST_TO_ADDR
// if not pom then
15085: LD_VAR 0 4
15089: NOT
15090: IFFALSE 15094
// exit ;
15092: GO 15195
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15094: LD_ADDR_VAR 0 5
15098: PUSH
15099: LD_VAR 0 2
15103: PPUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: CALL_OW 248
15113: PPUSH
15114: CALL_OW 450
15118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15119: LD_ADDR_VAR 0 3
15123: PUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 275
15136: PUSH
15137: LD_VAR 0 5
15141: PUSH
15142: LD_INT 1
15144: ARRAY
15145: GREATEREQUAL
15146: PUSH
15147: LD_VAR 0 4
15151: PPUSH
15152: LD_INT 2
15154: PPUSH
15155: CALL_OW 275
15159: PUSH
15160: LD_VAR 0 5
15164: PUSH
15165: LD_INT 2
15167: ARRAY
15168: GREATEREQUAL
15169: AND
15170: PUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: CALL_OW 275
15183: PUSH
15184: LD_VAR 0 5
15188: PUSH
15189: LD_INT 3
15191: ARRAY
15192: GREATEREQUAL
15193: AND
15194: ST_TO_ADDR
// end ;
15195: LD_VAR 0 3
15199: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
15206: PPUSH
15207: PPUSH
15208: PPUSH
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
// result := false ;
15213: LD_ADDR_VAR 0 8
15217: PUSH
15218: LD_INT 0
15220: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15221: LD_VAR 0 5
15225: NOT
15226: PUSH
15227: LD_VAR 0 1
15231: NOT
15232: OR
15233: PUSH
15234: LD_VAR 0 2
15238: NOT
15239: OR
15240: PUSH
15241: LD_VAR 0 3
15245: NOT
15246: OR
15247: IFFALSE 15251
// exit ;
15249: GO 16065
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15251: LD_ADDR_VAR 0 14
15255: PUSH
15256: LD_VAR 0 1
15260: PPUSH
15261: LD_VAR 0 2
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_VAR 0 4
15275: PPUSH
15276: LD_VAR 0 5
15280: PUSH
15281: LD_INT 1
15283: ARRAY
15284: PPUSH
15285: CALL_OW 248
15289: PPUSH
15290: LD_INT 0
15292: PPUSH
15293: CALL 17318 0 6
15297: ST_TO_ADDR
// if not hexes then
15298: LD_VAR 0 14
15302: NOT
15303: IFFALSE 15307
// exit ;
15305: GO 16065
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15307: LD_ADDR_VAR 0 17
15311: PUSH
15312: LD_VAR 0 5
15316: PPUSH
15317: LD_INT 22
15319: PUSH
15320: LD_VAR 0 13
15324: PPUSH
15325: CALL_OW 255
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 0
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 30
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PPUSH
15366: CALL_OW 72
15370: ST_TO_ADDR
// for i = 1 to hexes do
15371: LD_ADDR_VAR 0 9
15375: PUSH
15376: DOUBLE
15377: LD_INT 1
15379: DEC
15380: ST_TO_ADDR
15381: LD_VAR 0 14
15385: PUSH
15386: FOR_TO
15387: IFFALSE 16063
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15389: LD_ADDR_VAR 0 13
15393: PUSH
15394: LD_VAR 0 14
15398: PUSH
15399: LD_VAR 0 9
15403: ARRAY
15404: PUSH
15405: LD_INT 1
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 14
15413: PUSH
15414: LD_VAR 0 9
15418: ARRAY
15419: PUSH
15420: LD_INT 2
15422: ARRAY
15423: PPUSH
15424: CALL_OW 428
15428: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15429: LD_VAR 0 14
15433: PUSH
15434: LD_VAR 0 9
15438: ARRAY
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: PPUSH
15444: LD_VAR 0 14
15448: PUSH
15449: LD_VAR 0 9
15453: ARRAY
15454: PUSH
15455: LD_INT 2
15457: ARRAY
15458: PPUSH
15459: CALL_OW 351
15463: PUSH
15464: LD_VAR 0 14
15468: PUSH
15469: LD_VAR 0 9
15473: ARRAY
15474: PUSH
15475: LD_INT 1
15477: ARRAY
15478: PPUSH
15479: LD_VAR 0 14
15483: PUSH
15484: LD_VAR 0 9
15488: ARRAY
15489: PUSH
15490: LD_INT 2
15492: ARRAY
15493: PPUSH
15494: CALL_OW 488
15498: NOT
15499: OR
15500: PUSH
15501: LD_VAR 0 13
15505: PPUSH
15506: CALL_OW 247
15510: PUSH
15511: LD_INT 3
15513: EQUAL
15514: OR
15515: IFFALSE 15521
// exit ;
15517: POP
15518: POP
15519: GO 16065
// if not tmp then
15521: LD_VAR 0 13
15525: NOT
15526: IFFALSE 15530
// continue ;
15528: GO 15386
// result := true ;
15530: LD_ADDR_VAR 0 8
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15538: LD_VAR 0 6
15542: PUSH
15543: LD_VAR 0 13
15547: PPUSH
15548: CALL_OW 247
15552: PUSH
15553: LD_INT 2
15555: EQUAL
15556: AND
15557: PUSH
15558: LD_VAR 0 13
15562: PPUSH
15563: CALL_OW 263
15567: PUSH
15568: LD_INT 1
15570: EQUAL
15571: AND
15572: IFFALSE 15736
// begin if IsDrivenBy ( tmp ) then
15574: LD_VAR 0 13
15578: PPUSH
15579: CALL_OW 311
15583: IFFALSE 15587
// continue ;
15585: GO 15386
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15587: LD_VAR 0 6
15591: PPUSH
15592: LD_INT 3
15594: PUSH
15595: LD_INT 60
15597: PUSH
15598: EMPTY
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 3
15607: PUSH
15608: LD_INT 55
15610: PUSH
15611: EMPTY
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 72
15626: IFFALSE 15734
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15628: LD_ADDR_VAR 0 18
15632: PUSH
15633: LD_VAR 0 6
15637: PPUSH
15638: LD_INT 3
15640: PUSH
15641: LD_INT 60
15643: PUSH
15644: EMPTY
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 3
15653: PUSH
15654: LD_INT 55
15656: PUSH
15657: EMPTY
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 72
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: ST_TO_ADDR
// if IsInUnit ( driver ) then
15677: LD_VAR 0 18
15681: PPUSH
15682: CALL_OW 310
15686: IFFALSE 15697
// ComExit ( driver ) ;
15688: LD_VAR 0 18
15692: PPUSH
15693: CALL 41119 0 1
// AddComEnterUnit ( driver , tmp ) ;
15697: LD_VAR 0 18
15701: PPUSH
15702: LD_VAR 0 13
15706: PPUSH
15707: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15711: LD_VAR 0 18
15715: PPUSH
15716: LD_VAR 0 7
15720: PPUSH
15721: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15725: LD_VAR 0 18
15729: PPUSH
15730: CALL_OW 181
// end ; continue ;
15734: GO 15386
// end ; if not cleaners or not tmp in cleaners then
15736: LD_VAR 0 6
15740: NOT
15741: PUSH
15742: LD_VAR 0 13
15746: PUSH
15747: LD_VAR 0 6
15751: IN
15752: NOT
15753: OR
15754: IFFALSE 16061
// begin if dep then
15756: LD_VAR 0 17
15760: IFFALSE 15896
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15762: LD_ADDR_VAR 0 16
15766: PUSH
15767: LD_VAR 0 17
15771: PUSH
15772: LD_INT 1
15774: ARRAY
15775: PPUSH
15776: CALL_OW 250
15780: PPUSH
15781: LD_VAR 0 17
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: CALL_OW 254
15794: PPUSH
15795: LD_INT 5
15797: PPUSH
15798: CALL_OW 272
15802: PUSH
15803: LD_VAR 0 17
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: CALL_OW 251
15816: PPUSH
15817: LD_VAR 0 17
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: PPUSH
15826: CALL_OW 254
15830: PPUSH
15831: LD_INT 5
15833: PPUSH
15834: CALL_OW 273
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15843: LD_VAR 0 16
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 16
15856: PUSH
15857: LD_INT 2
15859: ARRAY
15860: PPUSH
15861: CALL_OW 488
15865: IFFALSE 15896
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15867: LD_VAR 0 13
15871: PPUSH
15872: LD_VAR 0 16
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: PPUSH
15881: LD_VAR 0 16
15885: PUSH
15886: LD_INT 2
15888: ARRAY
15889: PPUSH
15890: CALL_OW 111
// continue ;
15894: GO 15386
// end ; end ; r := GetDir ( tmp ) ;
15896: LD_ADDR_VAR 0 15
15900: PUSH
15901: LD_VAR 0 13
15905: PPUSH
15906: CALL_OW 254
15910: ST_TO_ADDR
// if r = 5 then
15911: LD_VAR 0 15
15915: PUSH
15916: LD_INT 5
15918: EQUAL
15919: IFFALSE 15929
// r := 0 ;
15921: LD_ADDR_VAR 0 15
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// for j = r to 5 do
15929: LD_ADDR_VAR 0 10
15933: PUSH
15934: DOUBLE
15935: LD_VAR 0 15
15939: DEC
15940: ST_TO_ADDR
15941: LD_INT 5
15943: PUSH
15944: FOR_TO
15945: IFFALSE 16059
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15947: LD_ADDR_VAR 0 11
15951: PUSH
15952: LD_VAR 0 13
15956: PPUSH
15957: CALL_OW 250
15961: PPUSH
15962: LD_VAR 0 10
15966: PPUSH
15967: LD_INT 2
15969: PPUSH
15970: CALL_OW 272
15974: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15975: LD_ADDR_VAR 0 12
15979: PUSH
15980: LD_VAR 0 13
15984: PPUSH
15985: CALL_OW 251
15989: PPUSH
15990: LD_VAR 0 10
15994: PPUSH
15995: LD_INT 2
15997: PPUSH
15998: CALL_OW 273
16002: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16003: LD_VAR 0 11
16007: PPUSH
16008: LD_VAR 0 12
16012: PPUSH
16013: CALL_OW 488
16017: PUSH
16018: LD_VAR 0 11
16022: PPUSH
16023: LD_VAR 0 12
16027: PPUSH
16028: CALL_OW 428
16032: NOT
16033: AND
16034: IFFALSE 16057
// begin ComMoveXY ( tmp , _x , _y ) ;
16036: LD_VAR 0 13
16040: PPUSH
16041: LD_VAR 0 11
16045: PPUSH
16046: LD_VAR 0 12
16050: PPUSH
16051: CALL_OW 111
// break ;
16055: GO 16059
// end ; end ;
16057: GO 15944
16059: POP
16060: POP
// end ; end ;
16061: GO 15386
16063: POP
16064: POP
// end ;
16065: LD_VAR 0 8
16069: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16070: LD_INT 0
16072: PPUSH
// result := true ;
16073: LD_ADDR_VAR 0 3
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16081: LD_VAR 0 2
16085: PUSH
16086: LD_INT 24
16088: DOUBLE
16089: EQUAL
16090: IFTRUE 16100
16092: LD_INT 33
16094: DOUBLE
16095: EQUAL
16096: IFTRUE 16100
16098: GO 16125
16100: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16101: LD_ADDR_VAR 0 3
16105: PUSH
16106: LD_INT 32
16108: PPUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 321
16118: PUSH
16119: LD_INT 2
16121: EQUAL
16122: ST_TO_ADDR
16123: GO 16441
16125: LD_INT 20
16127: DOUBLE
16128: EQUAL
16129: IFTRUE 16133
16131: GO 16158
16133: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16134: LD_ADDR_VAR 0 3
16138: PUSH
16139: LD_INT 6
16141: PPUSH
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 321
16151: PUSH
16152: LD_INT 2
16154: EQUAL
16155: ST_TO_ADDR
16156: GO 16441
16158: LD_INT 22
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16172
16164: LD_INT 36
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16197
16172: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 15
16180: PPUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 321
16190: PUSH
16191: LD_INT 2
16193: EQUAL
16194: ST_TO_ADDR
16195: GO 16441
16197: LD_INT 30
16199: DOUBLE
16200: EQUAL
16201: IFTRUE 16205
16203: GO 16230
16205: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16206: LD_ADDR_VAR 0 3
16210: PUSH
16211: LD_INT 20
16213: PPUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 321
16223: PUSH
16224: LD_INT 2
16226: EQUAL
16227: ST_TO_ADDR
16228: GO 16441
16230: LD_INT 28
16232: DOUBLE
16233: EQUAL
16234: IFTRUE 16244
16236: LD_INT 21
16238: DOUBLE
16239: EQUAL
16240: IFTRUE 16244
16242: GO 16269
16244: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16245: LD_ADDR_VAR 0 3
16249: PUSH
16250: LD_INT 21
16252: PPUSH
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 321
16262: PUSH
16263: LD_INT 2
16265: EQUAL
16266: ST_TO_ADDR
16267: GO 16441
16269: LD_INT 16
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16302
16277: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_INT 84
16285: PPUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 321
16295: PUSH
16296: LD_INT 2
16298: EQUAL
16299: ST_TO_ADDR
16300: GO 16441
16302: LD_INT 19
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16316
16308: LD_INT 23
16310: DOUBLE
16311: EQUAL
16312: IFTRUE 16316
16314: GO 16341
16316: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_INT 83
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 321
16334: PUSH
16335: LD_INT 2
16337: EQUAL
16338: ST_TO_ADDR
16339: GO 16441
16341: LD_INT 17
16343: DOUBLE
16344: EQUAL
16345: IFTRUE 16349
16347: GO 16374
16349: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16350: LD_ADDR_VAR 0 3
16354: PUSH
16355: LD_INT 39
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 321
16367: PUSH
16368: LD_INT 2
16370: EQUAL
16371: ST_TO_ADDR
16372: GO 16441
16374: LD_INT 18
16376: DOUBLE
16377: EQUAL
16378: IFTRUE 16382
16380: GO 16407
16382: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16383: LD_ADDR_VAR 0 3
16387: PUSH
16388: LD_INT 40
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 321
16400: PUSH
16401: LD_INT 2
16403: EQUAL
16404: ST_TO_ADDR
16405: GO 16441
16407: LD_INT 27
16409: DOUBLE
16410: EQUAL
16411: IFTRUE 16415
16413: GO 16440
16415: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_INT 35
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 321
16433: PUSH
16434: LD_INT 2
16436: EQUAL
16437: ST_TO_ADDR
16438: GO 16441
16440: POP
// end ;
16441: LD_VAR 0 3
16445: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
// result := false ;
16459: LD_ADDR_VAR 0 6
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// if btype = b_depot then
16467: LD_VAR 0 2
16471: PUSH
16472: LD_INT 0
16474: EQUAL
16475: IFFALSE 16487
// begin result := true ;
16477: LD_ADDR_VAR 0 6
16481: PUSH
16482: LD_INT 1
16484: ST_TO_ADDR
// exit ;
16485: GO 17313
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16487: LD_VAR 0 1
16491: NOT
16492: PUSH
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 266
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: IN
16513: NOT
16514: OR
16515: PUSH
16516: LD_VAR 0 2
16520: NOT
16521: OR
16522: PUSH
16523: LD_VAR 0 5
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: LD_INT 1
16533: PUSH
16534: LD_INT 2
16536: PUSH
16537: LD_INT 3
16539: PUSH
16540: LD_INT 4
16542: PUSH
16543: LD_INT 5
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: IN
16554: NOT
16555: OR
16556: PUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 4
16566: PPUSH
16567: CALL_OW 488
16571: NOT
16572: OR
16573: IFFALSE 16577
// exit ;
16575: GO 17313
// side := GetSide ( depot ) ;
16577: LD_ADDR_VAR 0 9
16581: PUSH
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 255
16591: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16592: LD_VAR 0 9
16596: PPUSH
16597: LD_VAR 0 2
16601: PPUSH
16602: CALL 16070 0 2
16606: NOT
16607: IFFALSE 16611
// exit ;
16609: GO 17313
// pom := GetBase ( depot ) ;
16611: LD_ADDR_VAR 0 10
16615: PUSH
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 274
16625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16626: LD_ADDR_VAR 0 11
16630: PUSH
16631: LD_VAR 0 2
16635: PPUSH
16636: LD_VAR 0 1
16640: PPUSH
16641: CALL_OW 248
16645: PPUSH
16646: CALL_OW 450
16650: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16651: LD_VAR 0 10
16655: PPUSH
16656: LD_INT 1
16658: PPUSH
16659: CALL_OW 275
16663: PUSH
16664: LD_VAR 0 11
16668: PUSH
16669: LD_INT 1
16671: ARRAY
16672: GREATEREQUAL
16673: PUSH
16674: LD_VAR 0 10
16678: PPUSH
16679: LD_INT 2
16681: PPUSH
16682: CALL_OW 275
16686: PUSH
16687: LD_VAR 0 11
16691: PUSH
16692: LD_INT 2
16694: ARRAY
16695: GREATEREQUAL
16696: AND
16697: PUSH
16698: LD_VAR 0 10
16702: PPUSH
16703: LD_INT 3
16705: PPUSH
16706: CALL_OW 275
16710: PUSH
16711: LD_VAR 0 11
16715: PUSH
16716: LD_INT 3
16718: ARRAY
16719: GREATEREQUAL
16720: AND
16721: NOT
16722: IFFALSE 16726
// exit ;
16724: GO 17313
// if GetBType ( depot ) = b_depot then
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 266
16735: PUSH
16736: LD_INT 0
16738: EQUAL
16739: IFFALSE 16751
// dist := 28 else
16741: LD_ADDR_VAR 0 14
16745: PUSH
16746: LD_INT 28
16748: ST_TO_ADDR
16749: GO 16759
// dist := 36 ;
16751: LD_ADDR_VAR 0 14
16755: PUSH
16756: LD_INT 36
16758: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16759: LD_VAR 0 1
16763: PPUSH
16764: LD_VAR 0 3
16768: PPUSH
16769: LD_VAR 0 4
16773: PPUSH
16774: CALL_OW 297
16778: PUSH
16779: LD_VAR 0 14
16783: GREATER
16784: IFFALSE 16788
// exit ;
16786: GO 17313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16788: LD_ADDR_VAR 0 12
16792: PUSH
16793: LD_VAR 0 2
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_VAR 0 4
16807: PPUSH
16808: LD_VAR 0 5
16812: PPUSH
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL_OW 248
16822: PPUSH
16823: LD_INT 0
16825: PPUSH
16826: CALL 17318 0 6
16830: ST_TO_ADDR
// if not hexes then
16831: LD_VAR 0 12
16835: NOT
16836: IFFALSE 16840
// exit ;
16838: GO 17313
// hex := GetHexInfo ( x , y ) ;
16840: LD_ADDR_VAR 0 15
16844: PUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_VAR 0 4
16854: PPUSH
16855: CALL_OW 546
16859: ST_TO_ADDR
// if hex [ 1 ] then
16860: LD_VAR 0 15
16864: PUSH
16865: LD_INT 1
16867: ARRAY
16868: IFFALSE 16872
// exit ;
16870: GO 17313
// height := hex [ 2 ] ;
16872: LD_ADDR_VAR 0 13
16876: PUSH
16877: LD_VAR 0 15
16881: PUSH
16882: LD_INT 2
16884: ARRAY
16885: ST_TO_ADDR
// for i = 1 to hexes do
16886: LD_ADDR_VAR 0 7
16890: PUSH
16891: DOUBLE
16892: LD_INT 1
16894: DEC
16895: ST_TO_ADDR
16896: LD_VAR 0 12
16900: PUSH
16901: FOR_TO
16902: IFFALSE 17232
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16904: LD_VAR 0 12
16908: PUSH
16909: LD_VAR 0 7
16913: ARRAY
16914: PUSH
16915: LD_INT 1
16917: ARRAY
16918: PPUSH
16919: LD_VAR 0 12
16923: PUSH
16924: LD_VAR 0 7
16928: ARRAY
16929: PUSH
16930: LD_INT 2
16932: ARRAY
16933: PPUSH
16934: CALL_OW 488
16938: NOT
16939: PUSH
16940: LD_VAR 0 12
16944: PUSH
16945: LD_VAR 0 7
16949: ARRAY
16950: PUSH
16951: LD_INT 1
16953: ARRAY
16954: PPUSH
16955: LD_VAR 0 12
16959: PUSH
16960: LD_VAR 0 7
16964: ARRAY
16965: PUSH
16966: LD_INT 2
16968: ARRAY
16969: PPUSH
16970: CALL_OW 428
16974: PUSH
16975: LD_INT 0
16977: GREATER
16978: OR
16979: PUSH
16980: LD_VAR 0 12
16984: PUSH
16985: LD_VAR 0 7
16989: ARRAY
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: LD_VAR 0 12
16999: PUSH
17000: LD_VAR 0 7
17004: ARRAY
17005: PUSH
17006: LD_INT 2
17008: ARRAY
17009: PPUSH
17010: CALL_OW 351
17014: OR
17015: IFFALSE 17021
// exit ;
17017: POP
17018: POP
17019: GO 17313
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17021: LD_ADDR_VAR 0 8
17025: PUSH
17026: LD_VAR 0 12
17030: PUSH
17031: LD_VAR 0 7
17035: ARRAY
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: LD_VAR 0 12
17045: PUSH
17046: LD_VAR 0 7
17050: ARRAY
17051: PUSH
17052: LD_INT 2
17054: ARRAY
17055: PPUSH
17056: CALL_OW 546
17060: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17061: LD_VAR 0 8
17065: PUSH
17066: LD_INT 1
17068: ARRAY
17069: PUSH
17070: LD_VAR 0 8
17074: PUSH
17075: LD_INT 2
17077: ARRAY
17078: PUSH
17079: LD_VAR 0 13
17083: PUSH
17084: LD_INT 2
17086: PLUS
17087: GREATER
17088: OR
17089: PUSH
17090: LD_VAR 0 8
17094: PUSH
17095: LD_INT 2
17097: ARRAY
17098: PUSH
17099: LD_VAR 0 13
17103: PUSH
17104: LD_INT 2
17106: MINUS
17107: LESS
17108: OR
17109: PUSH
17110: LD_VAR 0 8
17114: PUSH
17115: LD_INT 3
17117: ARRAY
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 8
17124: PUSH
17125: LD_INT 9
17127: PUSH
17128: LD_INT 10
17130: PUSH
17131: LD_INT 11
17133: PUSH
17134: LD_INT 12
17136: PUSH
17137: LD_INT 13
17139: PUSH
17140: LD_INT 16
17142: PUSH
17143: LD_INT 17
17145: PUSH
17146: LD_INT 18
17148: PUSH
17149: LD_INT 19
17151: PUSH
17152: LD_INT 20
17154: PUSH
17155: LD_INT 21
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: IN
17173: NOT
17174: OR
17175: PUSH
17176: LD_VAR 0 8
17180: PUSH
17181: LD_INT 5
17183: ARRAY
17184: NOT
17185: OR
17186: PUSH
17187: LD_VAR 0 8
17191: PUSH
17192: LD_INT 6
17194: ARRAY
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 7
17204: PUSH
17205: LD_INT 9
17207: PUSH
17208: LD_INT 10
17210: PUSH
17211: LD_INT 11
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: IN
17222: NOT
17223: OR
17224: IFFALSE 17230
// exit ;
17226: POP
17227: POP
17228: GO 17313
// end ;
17230: GO 16901
17232: POP
17233: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17234: LD_VAR 0 9
17238: PPUSH
17239: LD_VAR 0 3
17243: PPUSH
17244: LD_VAR 0 4
17248: PPUSH
17249: LD_INT 20
17251: PPUSH
17252: CALL 9236 0 4
17256: PUSH
17257: LD_INT 4
17259: ARRAY
17260: IFFALSE 17264
// exit ;
17262: GO 17313
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17264: LD_VAR 0 2
17268: PUSH
17269: LD_INT 29
17271: PUSH
17272: LD_INT 30
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: IN
17279: PUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_VAR 0 4
17289: PPUSH
17290: LD_VAR 0 9
17294: PPUSH
17295: CALL_OW 440
17299: NOT
17300: AND
17301: IFFALSE 17305
// exit ;
17303: GO 17313
// result := true ;
17305: LD_ADDR_VAR 0 6
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// end ;
17313: LD_VAR 0 6
17317: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17318: LD_INT 0
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
17333: PPUSH
17334: PPUSH
17335: PPUSH
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
// result = [ ] ;
17378: LD_ADDR_VAR 0 7
17382: PUSH
17383: EMPTY
17384: ST_TO_ADDR
// temp_list = [ ] ;
17385: LD_ADDR_VAR 0 9
17389: PUSH
17390: EMPTY
17391: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17392: LD_VAR 0 4
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 4
17411: PUSH
17412: LD_INT 5
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: IN
17423: NOT
17424: PUSH
17425: LD_VAR 0 1
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: IN
17440: PUSH
17441: LD_VAR 0 5
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: IN
17460: NOT
17461: AND
17462: OR
17463: IFFALSE 17467
// exit ;
17465: GO 35858
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17467: LD_VAR 0 1
17471: PUSH
17472: LD_INT 6
17474: PUSH
17475: LD_INT 7
17477: PUSH
17478: LD_INT 8
17480: PUSH
17481: LD_INT 13
17483: PUSH
17484: LD_INT 12
17486: PUSH
17487: LD_INT 15
17489: PUSH
17490: LD_INT 11
17492: PUSH
17493: LD_INT 14
17495: PUSH
17496: LD_INT 10
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: IN
17510: IFFALSE 17520
// btype = b_lab ;
17512: LD_ADDR_VAR 0 1
17516: PUSH
17517: LD_INT 6
17519: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17520: LD_VAR 0 6
17524: PUSH
17525: LD_INT 0
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: IN
17539: NOT
17540: PUSH
17541: LD_VAR 0 1
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 3
17557: PUSH
17558: LD_INT 6
17560: PUSH
17561: LD_INT 36
17563: PUSH
17564: LD_INT 4
17566: PUSH
17567: LD_INT 5
17569: PUSH
17570: LD_INT 31
17572: PUSH
17573: LD_INT 32
17575: PUSH
17576: LD_INT 33
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: IN
17592: NOT
17593: PUSH
17594: LD_VAR 0 6
17598: PUSH
17599: LD_INT 1
17601: EQUAL
17602: AND
17603: OR
17604: PUSH
17605: LD_VAR 0 1
17609: PUSH
17610: LD_INT 2
17612: PUSH
17613: LD_INT 3
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: IN
17620: NOT
17621: PUSH
17622: LD_VAR 0 6
17626: PUSH
17627: LD_INT 2
17629: EQUAL
17630: AND
17631: OR
17632: IFFALSE 17642
// mode = 0 ;
17634: LD_ADDR_VAR 0 6
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// case mode of 0 :
17642: LD_VAR 0 6
17646: PUSH
17647: LD_INT 0
17649: DOUBLE
17650: EQUAL
17651: IFTRUE 17655
17653: GO 29108
17655: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17656: LD_ADDR_VAR 0 11
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 0
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: LD_INT 1
17676: NEG
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: LD_INT 1
17729: NEG
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 1
17737: NEG
17738: PUSH
17739: LD_INT 2
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: LD_INT 2
17752: NEG
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: PUSH
17772: LD_INT 2
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: NEG
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17849: LD_ADDR_VAR 0 12
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: LD_INT 1
17869: NEG
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: LD_INT 1
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 1
17918: NEG
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 1
17933: NEG
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: NEG
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: LD_INT 0
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: NEG
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 3
18006: NEG
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 3
18017: NEG
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18045: LD_ADDR_VAR 0 13
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: NEG
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: NEG
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: NEG
18181: PUSH
18182: LD_INT 2
18184: NEG
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 2
18192: NEG
18193: PUSH
18194: LD_INT 3
18196: NEG
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 3
18204: NEG
18205: PUSH
18206: LD_INT 2
18208: NEG
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 3
18216: NEG
18217: PUSH
18218: LD_INT 3
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18244: LD_ADDR_VAR 0 14
18248: PUSH
18249: LD_INT 0
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: LD_INT 1
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: LD_INT 0
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 1
18313: NEG
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: LD_INT 2
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: LD_INT 2
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: LD_INT 3
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 3
18405: NEG
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: LD_INT 2
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18440: LD_ADDR_VAR 0 15
18444: PUSH
18445: LD_INT 0
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: LD_INT 1
18460: NEG
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: NEG
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: LD_INT 1
18524: NEG
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 2
18563: NEG
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: LD_INT 1
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 3
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18633: LD_ADDR_VAR 0 16
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 0
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: NEG
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: NEG
18715: PUSH
18716: LD_INT 2
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: NEG
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: NEG
18769: PUSH
18770: LD_INT 2
18772: NEG
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 3
18790: PUSH
18791: LD_INT 3
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18826: LD_ADDR_VAR 0 17
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: LD_INT 1
18846: NEG
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: LD_INT 2
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 2
18922: NEG
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 2
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: NEG
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 2
19013: NEG
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: NEG
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19056: LD_ADDR_VAR 0 18
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 0
19073: PUSH
19074: LD_INT 1
19076: NEG
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 0
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: LD_INT 1
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 2
19152: NEG
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: NEG
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: NEG
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: NEG
19256: PUSH
19257: LD_INT 2
19259: NEG
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19286: LD_ADDR_VAR 0 19
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 0
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 2
19462: NEG
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: LD_INT 2
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19516: LD_ADDR_VAR 0 20
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: LD_INT 1
19536: NEG
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: LD_INT 2
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: LD_INT 2
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 1
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 1
19681: NEG
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: NEG
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: LD_INT 1
19707: NEG
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: LD_INT 2
19719: NEG
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19746: LD_ADDR_VAR 0 21
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: LD_INT 0
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 2
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 0
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 2
19922: NEG
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: LD_INT 2
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19976: LD_ADDR_VAR 0 22
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 0
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: NEG
20164: PUSH
20165: LD_INT 1
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20206: LD_ADDR_VAR 0 23
20210: PUSH
20211: LD_INT 0
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 0
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: LD_INT 1
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 2
20382: NEG
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: NEG
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: LD_INT 2
20409: NEG
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: NEG
20418: PUSH
20419: LD_INT 3
20421: NEG
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: LD_INT 3
20433: NEG
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20486: LD_ADDR_VAR 0 24
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 2
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: NEG
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 2
20662: NEG
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 2
20673: NEG
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: NEG
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: LD_INT 2
20700: NEG
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 3
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20762: LD_ADDR_VAR 0 25
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 2
20847: NEG
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 2
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: NEG
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: LD_INT 2
20965: NEG
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 3
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: LD_INT 3
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: LD_INT 3
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21036: LD_ADDR_VAR 0 26
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 1
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 2
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: NEG
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 2
21223: NEG
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: NEG
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: LD_INT 3
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21312: LD_ADDR_VAR 0 27
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: LD_INT 2
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 2
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 2
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: NEG
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: NEG
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: LD_INT 2
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: NEG
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 3
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 3
21557: NEG
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21592: LD_ADDR_VAR 0 28
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: LD_INT 0
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: LD_INT 1
21612: NEG
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 1
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 2
21688: NEG
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 2
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: LD_INT 2
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 0
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: NEG
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 2
21803: NEG
21804: PUSH
21805: LD_INT 3
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: LD_INT 3
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 3
21827: NEG
21828: PUSH
21829: LD_INT 1
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 3
21839: NEG
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21874: LD_ADDR_VAR 0 29
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 0
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 1
21932: NEG
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: LD_INT 2
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: LD_INT 2
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 2
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 2
22040: NEG
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: NEG
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 2
22064: NEG
22065: PUSH
22066: LD_INT 3
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 3
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 3
22118: NEG
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22153: LD_ADDR_VAR 0 30
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 2
22249: NEG
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 2
22319: NEG
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: NEG
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 3
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 3
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 2
22385: NEG
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 3
22396: NEG
22397: PUSH
22398: LD_INT 1
22400: NEG
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22431: LD_ADDR_VAR 0 31
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: NEG
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: NEG
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 2
22620: NEG
22621: PUSH
22622: LD_INT 3
22624: NEG
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 3
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 3
22674: NEG
22675: PUSH
22676: LD_INT 2
22678: NEG
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22709: LD_ADDR_VAR 0 32
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 1
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 2
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: NEG
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: LD_INT 3
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: NEG
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 3
22952: NEG
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22987: LD_ADDR_VAR 0 33
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: NEG
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 2
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: NEG
23178: PUSH
23179: LD_INT 3
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 3
23231: NEG
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23266: LD_ADDR_VAR 0 34
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: NEG
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: NEG
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: LD_INT 3
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: LD_INT 2
23472: NEG
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 3
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: NEG
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 3
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23546: LD_ADDR_VAR 0 35
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23658: LD_ADDR_VAR 0 36
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23770: LD_ADDR_VAR 0 37
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: LD_INT 1
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 1
23828: NEG
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23882: LD_ADDR_VAR 0 38
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 2
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23994: LD_ADDR_VAR 0 39
23998: PUSH
23999: LD_INT 0
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: LD_INT 2
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24106: LD_ADDR_VAR 0 40
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24218: LD_ADDR_VAR 0 41
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: LD_INT 1
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: LD_INT 2
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: NEG
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 2
24373: NEG
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: NEG
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 2
24396: NEG
24397: PUSH
24398: LD_INT 2
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: NEG
24409: PUSH
24410: LD_INT 3
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 3
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 3
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 3
24461: PUSH
24462: LD_INT 3
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 3
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 3
24492: NEG
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 3
24503: NEG
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 3
24515: NEG
24516: PUSH
24517: LD_INT 2
24519: NEG
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 3
24527: NEG
24528: PUSH
24529: LD_INT 3
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24568: LD_ADDR_VAR 0 42
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 2
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: NEG
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: NEG
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 2
24758: NEG
24759: PUSH
24760: LD_INT 3
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 3
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 0
24782: PUSH
24783: LD_INT 3
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: PUSH
24805: LD_INT 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 3
24865: NEG
24866: PUSH
24867: LD_INT 2
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 3
24877: NEG
24878: PUSH
24879: LD_INT 3
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24918: LD_ADDR_VAR 0 43
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: LD_INT 2
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 2
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 2
25084: NEG
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: NEG
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 3
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 3
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 3
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 3
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 3
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 3
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 3
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25266: LD_ADDR_VAR 0 44
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: LD_INT 2
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: LD_INT 2
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 2
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 3
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 3
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 3
25509: PUSH
25510: LD_INT 3
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 3
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: NEG
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 3
25540: NEG
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 3
25551: NEG
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 3
25563: NEG
25564: PUSH
25565: LD_INT 2
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 3
25575: NEG
25576: PUSH
25577: LD_INT 3
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25616: LD_ADDR_VAR 0 45
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 2
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: LD_INT 3
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: LD_INT 3
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: LD_INT 3
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 3
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 3
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 3
25913: NEG
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 3
25925: NEG
25926: PUSH
25927: LD_INT 3
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25966: LD_ADDR_VAR 0 46
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 3
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 3
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 3
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 3
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: LD_INT 3
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 3
26262: NEG
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 3
26273: NEG
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26314: LD_ADDR_VAR 0 47
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26465: LD_ADDR_VAR 0 48
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26612: LD_ADDR_VAR 0 49
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26756: LD_ADDR_VAR 0 50
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26900: LD_ADDR_VAR 0 51
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 2
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 2
27012: NEG
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27047: LD_ADDR_VAR 0 52
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27198: LD_ADDR_VAR 0 53
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: NEG
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27428: LD_ADDR_VAR 0 54
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: NEG
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27658: LD_ADDR_VAR 0 55
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 2
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 2
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27888: LD_ADDR_VAR 0 56
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 2
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 2
28064: NEG
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: NEG
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: LD_INT 2
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28118: LD_ADDR_VAR 0 57
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 2
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 2
28294: NEG
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: LD_INT 1
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: LD_INT 2
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28348: LD_ADDR_VAR 0 58
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: LD_INT 2
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: LD_INT 2
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28578: LD_ADDR_VAR 0 59
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28666: LD_ADDR_VAR 0 60
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28754: LD_ADDR_VAR 0 61
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28842: LD_ADDR_VAR 0 62
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28930: LD_ADDR_VAR 0 63
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29018: LD_ADDR_VAR 0 64
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// end ; 1 :
29106: GO 35003
29108: LD_INT 1
29110: DOUBLE
29111: EQUAL
29112: IFTRUE 29116
29114: GO 31739
29116: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29117: LD_ADDR_VAR 0 11
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: LD_INT 3
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 3
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29161: LD_ADDR_VAR 0 12
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 3
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29202: LD_ADDR_VAR 0 13
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 3
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 3
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29242: LD_ADDR_VAR 0 14
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: LD_INT 3
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29283: LD_ADDR_VAR 0 15
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 3
29301: NEG
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29327: LD_ADDR_VAR 0 16
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 3
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29373: LD_ADDR_VAR 0 17
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 3
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: LD_INT 2
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29417: LD_ADDR_VAR 0 18
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 3
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29458: LD_ADDR_VAR 0 19
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 3
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29498: LD_ADDR_VAR 0 20
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 3
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: LD_INT 3
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29539: LD_ADDR_VAR 0 21
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 3
29557: NEG
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: NEG
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29583: LD_ADDR_VAR 0 22
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: LD_INT 3
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 3
29602: NEG
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 3
29614: NEG
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29629: LD_ADDR_VAR 0 23
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: LD_INT 4
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29673: LD_ADDR_VAR 0 24
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 4
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29714: LD_ADDR_VAR 0 25
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 4
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: LD_INT 4
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29754: LD_ADDR_VAR 0 26
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 3
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 4
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29795: LD_ADDR_VAR 0 27
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 4
29824: NEG
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29839: LD_ADDR_VAR 0 28
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: LD_INT 3
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: LD_INT 4
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 4
29870: NEG
29871: PUSH
29872: LD_INT 3
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29885: LD_ADDR_VAR 0 29
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 3
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 3
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 2
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 4
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 4
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 3
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 5
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 5
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 4
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 6
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 6
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 5
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30040: LD_ADDR_VAR 0 30
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 4
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 5
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 5
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 5
30140: PUSH
30141: LD_INT 1
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 6
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 6
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30183: LD_ADDR_VAR 0 31
30187: PUSH
30188: LD_INT 3
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 4
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 4
30230: PUSH
30231: LD_INT 4
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 3
30240: PUSH
30241: LD_INT 4
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 5
30250: PUSH
30251: LD_INT 4
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 5
30260: PUSH
30261: LD_INT 5
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 4
30270: PUSH
30271: LD_INT 5
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 6
30280: PUSH
30281: LD_INT 5
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 6
30290: PUSH
30291: LD_INT 6
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 5
30300: PUSH
30301: LD_INT 6
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30322: LD_ADDR_VAR 0 32
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 4
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 4
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: NEG
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 5
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: LD_INT 6
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 6
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30465: LD_ADDR_VAR 0 33
30469: PUSH
30470: LD_INT 2
30472: NEG
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 4
30528: NEG
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 5
30551: NEG
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 5
30562: NEG
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 5
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 6
30585: NEG
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 6
30596: NEG
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30620: LD_ADDR_VAR 0 34
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: LD_INT 3
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: LD_INT 3
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: LD_INT 4
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 4
30675: NEG
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 4
30687: NEG
30688: PUSH
30689: LD_INT 4
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 4
30699: NEG
30700: PUSH
30701: LD_INT 5
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 5
30711: NEG
30712: PUSH
30713: LD_INT 4
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 5
30723: NEG
30724: PUSH
30725: LD_INT 5
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 5
30735: NEG
30736: PUSH
30737: LD_INT 6
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 6
30747: NEG
30748: PUSH
30749: LD_INT 5
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 6
30759: NEG
30760: PUSH
30761: LD_INT 6
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30783: LD_ADDR_VAR 0 41
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: LD_INT 3
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30827: LD_ADDR_VAR 0 42
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 3
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30868: LD_ADDR_VAR 0 43
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 3
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30908: LD_ADDR_VAR 0 44
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30949: LD_ADDR_VAR 0 45
30953: PUSH
30954: LD_INT 2
30956: NEG
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: NEG
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30993: LD_ADDR_VAR 0 46
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31039: LD_ADDR_VAR 0 47
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 3
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31072: LD_ADDR_VAR 0 48
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31103: LD_ADDR_VAR 0 49
31107: PUSH
31108: LD_INT 3
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31132: LD_ADDR_VAR 0 50
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: LD_INT 3
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 3
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31161: LD_ADDR_VAR 0 51
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31192: LD_ADDR_VAR 0 52
31196: PUSH
31197: LD_INT 3
31199: NEG
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 3
31211: NEG
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31225: LD_ADDR_VAR 0 53
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 3
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31269: LD_ADDR_VAR 0 54
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31310: LD_ADDR_VAR 0 55
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 3
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31350: LD_ADDR_VAR 0 56
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31391: LD_ADDR_VAR 0 57
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: NEG
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31435: LD_ADDR_VAR 0 58
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 3
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: LD_INT 3
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31481: LD_ADDR_VAR 0 59
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31525: LD_ADDR_VAR 0 60
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31566: LD_ADDR_VAR 0 61
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31606: LD_ADDR_VAR 0 62
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31647: LD_ADDR_VAR 0 63
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31691: LD_ADDR_VAR 0 64
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: ST_TO_ADDR
// end ; 2 :
31737: GO 35003
31739: LD_INT 2
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 35002
31747: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31748: LD_ADDR_VAR 0 29
31752: PUSH
31753: LD_INT 4
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 4
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 5
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 5
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 4
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 3
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 4
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 4
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: LD_INT 4
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: LD_INT 4
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 5
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: LD_INT 4
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 5
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 3
32031: NEG
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 3
32042: NEG
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 4
32087: NEG
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 4
32098: NEG
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 4
32110: NEG
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 4
32133: NEG
32134: PUSH
32135: LD_INT 4
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 4
32145: NEG
32146: PUSH
32147: LD_INT 5
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 3
32157: NEG
32158: PUSH
32159: LD_INT 4
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 3
32169: NEG
32170: PUSH
32171: LD_INT 3
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 4
32181: NEG
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 5
32193: NEG
32194: PUSH
32195: LD_INT 4
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 5
32205: NEG
32206: PUSH
32207: LD_INT 5
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 3
32217: NEG
32218: PUSH
32219: LD_INT 5
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 5
32229: NEG
32230: PUSH
32231: LD_INT 3
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32286: LD_ADDR_VAR 0 30
32290: PUSH
32291: LD_INT 4
32293: PUSH
32294: LD_INT 4
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 4
32303: PUSH
32304: LD_INT 3
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 5
32313: PUSH
32314: LD_INT 4
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 5
32323: PUSH
32324: LD_INT 5
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 4
32333: PUSH
32334: LD_INT 5
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: LD_INT 4
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 3
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 5
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: LD_INT 5
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 3
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 4
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 4
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 4
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 4
32476: NEG
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 4
32487: NEG
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 4
32521: NEG
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 5
32532: NEG
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 5
32543: NEG
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 5
32555: NEG
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: NEG
32579: PUSH
32580: LD_INT 3
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 3
32590: NEG
32591: PUSH
32592: LD_INT 4
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 3
32626: NEG
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 4
32638: NEG
32639: PUSH
32640: LD_INT 3
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 4
32650: NEG
32651: PUSH
32652: LD_INT 4
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: LD_INT 4
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 4
32674: NEG
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 4
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: LD_INT 5
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: LD_INT 4
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 3
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: LD_INT 4
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 5
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 3
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: LD_INT 5
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32833: LD_ADDR_VAR 0 31
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 5
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 4
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: LD_INT 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 3
32933: NEG
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 3
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 4
32989: NEG
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 4
33000: NEG
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 4
33035: NEG
33036: PUSH
33037: LD_INT 4
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 4
33047: NEG
33048: PUSH
33049: LD_INT 5
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 3
33059: NEG
33060: PUSH
33061: LD_INT 4
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 3
33071: NEG
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 4
33083: NEG
33084: PUSH
33085: LD_INT 3
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 5
33095: NEG
33096: PUSH
33097: LD_INT 4
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 5
33107: NEG
33108: PUSH
33109: LD_INT 5
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 3
33119: NEG
33120: PUSH
33121: LD_INT 5
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 5
33131: NEG
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 3
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: LD_INT 4
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 3
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 2
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: LD_INT 3
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 4
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: LD_INT 4
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 4
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 5
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 5
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 4
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 5
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33383: LD_ADDR_VAR 0 32
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 5
33457: NEG
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 5
33469: NEG
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: NEG
33505: PUSH
33506: LD_INT 4
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: LD_INT 3
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: NEG
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 4
33552: NEG
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 4
33564: NEG
33565: PUSH
33566: LD_INT 4
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: LD_INT 4
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 4
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 4
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 5
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 4
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 3
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 4
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 5
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 5
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 3
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 4
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 4
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 4
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 4
33805: PUSH
33806: LD_INT 3
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 5
33815: PUSH
33816: LD_INT 4
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 5
33825: PUSH
33826: LD_INT 5
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: LD_INT 5
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: PUSH
33846: LD_INT 4
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: PUSH
33876: LD_INT 5
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33930: LD_ADDR_VAR 0 33
33934: PUSH
33935: LD_INT 4
33937: NEG
33938: PUSH
33939: LD_INT 4
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 4
33949: NEG
33950: PUSH
33951: LD_INT 5
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: LD_INT 4
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 3
33973: NEG
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 4
33985: NEG
33986: PUSH
33987: LD_INT 3
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 5
33997: NEG
33998: PUSH
33999: LD_INT 4
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 5
34009: NEG
34010: PUSH
34011: LD_INT 5
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 3
34021: NEG
34022: PUSH
34023: LD_INT 5
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 5
34033: NEG
34034: PUSH
34035: LD_INT 3
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 4
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 3
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 3
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: LD_INT 4
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: LD_INT 4
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 4
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 4
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 5
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 5
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 4
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: LD_INT 2
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 5
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 4
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 4
34270: PUSH
34271: LD_INT 4
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: LD_INT 4
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 3
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 4
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 4
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 3
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: LD_INT 4
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 5
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: LD_INT 5
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: PUSH
34382: LD_INT 4
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 5
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34468: LD_ADDR_VAR 0 34
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 4
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 5
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 4
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 3
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 3
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: LD_INT 4
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: LD_INT 5
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 3
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: LD_INT 5
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 4
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 4
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 3
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 4
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 4
34670: PUSH
34671: LD_INT 4
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 4
34680: PUSH
34681: LD_INT 3
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 5
34690: PUSH
34691: LD_INT 4
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: LD_INT 5
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 4
34710: PUSH
34711: LD_INT 5
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: LD_INT 3
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 5
34740: PUSH
34741: LD_INT 3
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: LD_INT 5
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 4
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 4
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: LD_INT 4
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 4
34853: NEG
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 4
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 3
34876: NEG
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 4
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 5
34909: NEG
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 5
34920: NEG
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 5
34932: NEG
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// end ; end ;
35000: GO 35003
35002: POP
// case btype of b_depot , b_warehouse :
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 0
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35022
35014: LD_INT 1
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35223
35022: POP
// case nation of nation_american :
35023: LD_VAR 0 5
35027: PUSH
35028: LD_INT 1
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35092
35036: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_VAR 0 11
35046: PUSH
35047: LD_VAR 0 12
35051: PUSH
35052: LD_VAR 0 13
35056: PUSH
35057: LD_VAR 0 14
35061: PUSH
35062: LD_VAR 0 15
35066: PUSH
35067: LD_VAR 0 16
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: PUSH
35080: LD_VAR 0 4
35084: PUSH
35085: LD_INT 1
35087: PLUS
35088: ARRAY
35089: ST_TO_ADDR
35090: GO 35221
35092: LD_INT 2
35094: DOUBLE
35095: EQUAL
35096: IFTRUE 35100
35098: GO 35156
35100: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35101: LD_ADDR_VAR 0 9
35105: PUSH
35106: LD_VAR 0 17
35110: PUSH
35111: LD_VAR 0 18
35115: PUSH
35116: LD_VAR 0 19
35120: PUSH
35121: LD_VAR 0 20
35125: PUSH
35126: LD_VAR 0 21
35130: PUSH
35131: LD_VAR 0 22
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: PUSH
35144: LD_VAR 0 4
35148: PUSH
35149: LD_INT 1
35151: PLUS
35152: ARRAY
35153: ST_TO_ADDR
35154: GO 35221
35156: LD_INT 3
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35164
35162: GO 35220
35164: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35165: LD_ADDR_VAR 0 9
35169: PUSH
35170: LD_VAR 0 23
35174: PUSH
35175: LD_VAR 0 24
35179: PUSH
35180: LD_VAR 0 25
35184: PUSH
35185: LD_VAR 0 26
35189: PUSH
35190: LD_VAR 0 27
35194: PUSH
35195: LD_VAR 0 28
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: LD_VAR 0 4
35212: PUSH
35213: LD_INT 1
35215: PLUS
35216: ARRAY
35217: ST_TO_ADDR
35218: GO 35221
35220: POP
35221: GO 35776
35223: LD_INT 2
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35237
35229: LD_INT 3
35231: DOUBLE
35232: EQUAL
35233: IFTRUE 35237
35235: GO 35293
35237: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35238: LD_ADDR_VAR 0 9
35242: PUSH
35243: LD_VAR 0 29
35247: PUSH
35248: LD_VAR 0 30
35252: PUSH
35253: LD_VAR 0 31
35257: PUSH
35258: LD_VAR 0 32
35262: PUSH
35263: LD_VAR 0 33
35267: PUSH
35268: LD_VAR 0 34
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: LD_VAR 0 4
35285: PUSH
35286: LD_INT 1
35288: PLUS
35289: ARRAY
35290: ST_TO_ADDR
35291: GO 35776
35293: LD_INT 16
35295: DOUBLE
35296: EQUAL
35297: IFTRUE 35355
35299: LD_INT 17
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35355
35305: LD_INT 18
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35355
35311: LD_INT 19
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35355
35317: LD_INT 22
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35355
35323: LD_INT 20
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35355
35329: LD_INT 21
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35355
35335: LD_INT 23
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35355
35341: LD_INT 24
35343: DOUBLE
35344: EQUAL
35345: IFTRUE 35355
35347: LD_INT 25
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35411
35355: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35356: LD_ADDR_VAR 0 9
35360: PUSH
35361: LD_VAR 0 35
35365: PUSH
35366: LD_VAR 0 36
35370: PUSH
35371: LD_VAR 0 37
35375: PUSH
35376: LD_VAR 0 38
35380: PUSH
35381: LD_VAR 0 39
35385: PUSH
35386: LD_VAR 0 40
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: PUSH
35399: LD_VAR 0 4
35403: PUSH
35404: LD_INT 1
35406: PLUS
35407: ARRAY
35408: ST_TO_ADDR
35409: GO 35776
35411: LD_INT 6
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35467
35417: LD_INT 7
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35467
35423: LD_INT 8
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35467
35429: LD_INT 13
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35467
35435: LD_INT 12
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35467
35441: LD_INT 15
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35467
35447: LD_INT 11
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35467
35453: LD_INT 14
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35467
35459: LD_INT 10
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35467
35465: GO 35523
35467: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35468: LD_ADDR_VAR 0 9
35472: PUSH
35473: LD_VAR 0 41
35477: PUSH
35478: LD_VAR 0 42
35482: PUSH
35483: LD_VAR 0 43
35487: PUSH
35488: LD_VAR 0 44
35492: PUSH
35493: LD_VAR 0 45
35497: PUSH
35498: LD_VAR 0 46
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: PUSH
35511: LD_VAR 0 4
35515: PUSH
35516: LD_INT 1
35518: PLUS
35519: ARRAY
35520: ST_TO_ADDR
35521: GO 35776
35523: LD_INT 36
35525: DOUBLE
35526: EQUAL
35527: IFTRUE 35531
35529: GO 35587
35531: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 47
35541: PUSH
35542: LD_VAR 0 48
35546: PUSH
35547: LD_VAR 0 49
35551: PUSH
35552: LD_VAR 0 50
35556: PUSH
35557: LD_VAR 0 51
35561: PUSH
35562: LD_VAR 0 52
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: PUSH
35575: LD_VAR 0 4
35579: PUSH
35580: LD_INT 1
35582: PLUS
35583: ARRAY
35584: ST_TO_ADDR
35585: GO 35776
35587: LD_INT 4
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35613
35593: LD_INT 5
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35613
35599: LD_INT 34
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35613
35605: LD_INT 37
35607: DOUBLE
35608: EQUAL
35609: IFTRUE 35613
35611: GO 35669
35613: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35614: LD_ADDR_VAR 0 9
35618: PUSH
35619: LD_VAR 0 53
35623: PUSH
35624: LD_VAR 0 54
35628: PUSH
35629: LD_VAR 0 55
35633: PUSH
35634: LD_VAR 0 56
35638: PUSH
35639: LD_VAR 0 57
35643: PUSH
35644: LD_VAR 0 58
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: PUSH
35657: LD_VAR 0 4
35661: PUSH
35662: LD_INT 1
35664: PLUS
35665: ARRAY
35666: ST_TO_ADDR
35667: GO 35776
35669: LD_INT 31
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35719
35675: LD_INT 32
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35719
35681: LD_INT 33
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35719
35687: LD_INT 27
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35719
35693: LD_INT 26
35695: DOUBLE
35696: EQUAL
35697: IFTRUE 35719
35699: LD_INT 28
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35719
35705: LD_INT 29
35707: DOUBLE
35708: EQUAL
35709: IFTRUE 35719
35711: LD_INT 30
35713: DOUBLE
35714: EQUAL
35715: IFTRUE 35719
35717: GO 35775
35719: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35720: LD_ADDR_VAR 0 9
35724: PUSH
35725: LD_VAR 0 59
35729: PUSH
35730: LD_VAR 0 60
35734: PUSH
35735: LD_VAR 0 61
35739: PUSH
35740: LD_VAR 0 62
35744: PUSH
35745: LD_VAR 0 63
35749: PUSH
35750: LD_VAR 0 64
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: PUSH
35763: LD_VAR 0 4
35767: PUSH
35768: LD_INT 1
35770: PLUS
35771: ARRAY
35772: ST_TO_ADDR
35773: GO 35776
35775: POP
// temp_list2 = [ ] ;
35776: LD_ADDR_VAR 0 10
35780: PUSH
35781: EMPTY
35782: ST_TO_ADDR
// for i in temp_list do
35783: LD_ADDR_VAR 0 8
35787: PUSH
35788: LD_VAR 0 9
35792: PUSH
35793: FOR_IN
35794: IFFALSE 35846
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35796: LD_ADDR_VAR 0 10
35800: PUSH
35801: LD_VAR 0 10
35805: PUSH
35806: LD_VAR 0 8
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PUSH
35815: LD_VAR 0 2
35819: PLUS
35820: PUSH
35821: LD_VAR 0 8
35825: PUSH
35826: LD_INT 2
35828: ARRAY
35829: PUSH
35830: LD_VAR 0 3
35834: PLUS
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: ADD
35843: ST_TO_ADDR
35844: GO 35793
35846: POP
35847: POP
// result = temp_list2 ;
35848: LD_ADDR_VAR 0 7
35852: PUSH
35853: LD_VAR 0 10
35857: ST_TO_ADDR
// end ;
35858: LD_VAR 0 7
35862: RET
// export function EnemyInRange ( unit , dist ) ; begin
35863: LD_INT 0
35865: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 255
35880: PPUSH
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 250
35890: PPUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL_OW 251
35900: PPUSH
35901: LD_VAR 0 2
35905: PPUSH
35906: CALL 9236 0 4
35910: PUSH
35911: LD_INT 4
35913: ARRAY
35914: ST_TO_ADDR
// end ;
35915: LD_VAR 0 3
35919: RET
// export function PlayerSeeMe ( unit ) ; begin
35920: LD_INT 0
35922: PPUSH
// result := See ( your_side , unit ) ;
35923: LD_ADDR_VAR 0 2
35927: PUSH
35928: LD_OWVAR 2
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 292
35942: ST_TO_ADDR
// end ;
35943: LD_VAR 0 2
35947: RET
// export function ReverseDir ( unit ) ; begin
35948: LD_INT 0
35950: PPUSH
// if not unit then
35951: LD_VAR 0 1
35955: NOT
35956: IFFALSE 35960
// exit ;
35958: GO 35983
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35960: LD_ADDR_VAR 0 2
35964: PUSH
35965: LD_VAR 0 1
35969: PPUSH
35970: CALL_OW 254
35974: PUSH
35975: LD_INT 3
35977: PLUS
35978: PUSH
35979: LD_INT 6
35981: MOD
35982: ST_TO_ADDR
// end ;
35983: LD_VAR 0 2
35987: RET
// export function ReverseArray ( array ) ; var i ; begin
35988: LD_INT 0
35990: PPUSH
35991: PPUSH
// if not array then
35992: LD_VAR 0 1
35996: NOT
35997: IFFALSE 36001
// exit ;
35999: GO 36056
// result := [ ] ;
36001: LD_ADDR_VAR 0 2
36005: PUSH
36006: EMPTY
36007: ST_TO_ADDR
// for i := array downto 1 do
36008: LD_ADDR_VAR 0 3
36012: PUSH
36013: DOUBLE
36014: LD_VAR 0 1
36018: INC
36019: ST_TO_ADDR
36020: LD_INT 1
36022: PUSH
36023: FOR_DOWNTO
36024: IFFALSE 36054
// result := Join ( result , array [ i ] ) ;
36026: LD_ADDR_VAR 0 2
36030: PUSH
36031: LD_VAR 0 2
36035: PPUSH
36036: LD_VAR 0 1
36040: PUSH
36041: LD_VAR 0 3
36045: ARRAY
36046: PPUSH
36047: CALL 40721 0 2
36051: ST_TO_ADDR
36052: GO 36023
36054: POP
36055: POP
// end ;
36056: LD_VAR 0 2
36060: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36061: LD_INT 0
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
// if not unit or not hexes then
36069: LD_VAR 0 1
36073: NOT
36074: PUSH
36075: LD_VAR 0 2
36079: NOT
36080: OR
36081: IFFALSE 36085
// exit ;
36083: GO 36208
// dist := 9999 ;
36085: LD_ADDR_VAR 0 5
36089: PUSH
36090: LD_INT 9999
36092: ST_TO_ADDR
// for i = 1 to hexes do
36093: LD_ADDR_VAR 0 4
36097: PUSH
36098: DOUBLE
36099: LD_INT 1
36101: DEC
36102: ST_TO_ADDR
36103: LD_VAR 0 2
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36196
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36111: LD_ADDR_VAR 0 6
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_VAR 0 2
36125: PUSH
36126: LD_VAR 0 4
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PPUSH
36136: LD_VAR 0 2
36140: PUSH
36141: LD_VAR 0 4
36145: ARRAY
36146: PUSH
36147: LD_INT 2
36149: ARRAY
36150: PPUSH
36151: CALL_OW 297
36155: ST_TO_ADDR
// if tdist < dist then
36156: LD_VAR 0 6
36160: PUSH
36161: LD_VAR 0 5
36165: LESS
36166: IFFALSE 36194
// begin hex := hexes [ i ] ;
36168: LD_ADDR_VAR 0 8
36172: PUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_VAR 0 4
36182: ARRAY
36183: ST_TO_ADDR
// dist := tdist ;
36184: LD_ADDR_VAR 0 5
36188: PUSH
36189: LD_VAR 0 6
36193: ST_TO_ADDR
// end ; end ;
36194: GO 36108
36196: POP
36197: POP
// result := hex ;
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: LD_VAR 0 8
36207: ST_TO_ADDR
// end ;
36208: LD_VAR 0 3
36212: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36213: LD_INT 0
36215: PPUSH
36216: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36217: LD_VAR 0 1
36221: NOT
36222: PUSH
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 21
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 23
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PPUSH
36252: CALL_OW 69
36256: IN
36257: NOT
36258: OR
36259: IFFALSE 36263
// exit ;
36261: GO 36310
// for i = 1 to 3 do
36263: LD_ADDR_VAR 0 3
36267: PUSH
36268: DOUBLE
36269: LD_INT 1
36271: DEC
36272: ST_TO_ADDR
36273: LD_INT 3
36275: PUSH
36276: FOR_TO
36277: IFFALSE 36308
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 250
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 251
36298: PPUSH
36299: LD_INT 1
36301: PPUSH
36302: CALL_OW 453
36306: GO 36276
36308: POP
36309: POP
// end ;
36310: LD_VAR 0 2
36314: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36315: LD_INT 0
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
// if not unit or not enemy_unit then
36323: LD_VAR 0 1
36327: NOT
36328: PUSH
36329: LD_VAR 0 2
36333: NOT
36334: OR
36335: IFFALSE 36339
// exit ;
36337: GO 36806
// if GetLives ( i ) < 250 then
36339: LD_VAR 0 4
36343: PPUSH
36344: CALL_OW 256
36348: PUSH
36349: LD_INT 250
36351: LESS
36352: IFFALSE 36365
// begin ComAutodestruct ( i ) ;
36354: LD_VAR 0 4
36358: PPUSH
36359: CALL 36213 0 1
// exit ;
36363: GO 36806
// end ; x := GetX ( enemy_unit ) ;
36365: LD_ADDR_VAR 0 7
36369: PUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: CALL_OW 250
36379: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36380: LD_ADDR_VAR 0 8
36384: PUSH
36385: LD_VAR 0 2
36389: PPUSH
36390: CALL_OW 251
36394: ST_TO_ADDR
// if not x or not y then
36395: LD_VAR 0 7
36399: NOT
36400: PUSH
36401: LD_VAR 0 8
36405: NOT
36406: OR
36407: IFFALSE 36411
// exit ;
36409: GO 36806
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36411: LD_ADDR_VAR 0 6
36415: PUSH
36416: LD_VAR 0 7
36420: PPUSH
36421: LD_INT 0
36423: PPUSH
36424: LD_INT 4
36426: PPUSH
36427: CALL_OW 272
36431: PUSH
36432: LD_VAR 0 8
36436: PPUSH
36437: LD_INT 0
36439: PPUSH
36440: LD_INT 4
36442: PPUSH
36443: CALL_OW 273
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_VAR 0 7
36456: PPUSH
36457: LD_INT 1
36459: PPUSH
36460: LD_INT 4
36462: PPUSH
36463: CALL_OW 272
36467: PUSH
36468: LD_VAR 0 8
36472: PPUSH
36473: LD_INT 1
36475: PPUSH
36476: LD_INT 4
36478: PPUSH
36479: CALL_OW 273
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_VAR 0 7
36492: PPUSH
36493: LD_INT 2
36495: PPUSH
36496: LD_INT 4
36498: PPUSH
36499: CALL_OW 272
36503: PUSH
36504: LD_VAR 0 8
36508: PPUSH
36509: LD_INT 2
36511: PPUSH
36512: LD_INT 4
36514: PPUSH
36515: CALL_OW 273
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_VAR 0 7
36528: PPUSH
36529: LD_INT 3
36531: PPUSH
36532: LD_INT 4
36534: PPUSH
36535: CALL_OW 272
36539: PUSH
36540: LD_VAR 0 8
36544: PPUSH
36545: LD_INT 3
36547: PPUSH
36548: LD_INT 4
36550: PPUSH
36551: CALL_OW 273
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_VAR 0 7
36564: PPUSH
36565: LD_INT 4
36567: PPUSH
36568: LD_INT 4
36570: PPUSH
36571: CALL_OW 272
36575: PUSH
36576: LD_VAR 0 8
36580: PPUSH
36581: LD_INT 4
36583: PPUSH
36584: LD_INT 4
36586: PPUSH
36587: CALL_OW 273
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_VAR 0 7
36600: PPUSH
36601: LD_INT 5
36603: PPUSH
36604: LD_INT 4
36606: PPUSH
36607: CALL_OW 272
36611: PUSH
36612: LD_VAR 0 8
36616: PPUSH
36617: LD_INT 5
36619: PPUSH
36620: LD_INT 4
36622: PPUSH
36623: CALL_OW 273
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: ST_TO_ADDR
// for i = tmp downto 1 do
36640: LD_ADDR_VAR 0 4
36644: PUSH
36645: DOUBLE
36646: LD_VAR 0 6
36650: INC
36651: ST_TO_ADDR
36652: LD_INT 1
36654: PUSH
36655: FOR_DOWNTO
36656: IFFALSE 36757
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36658: LD_VAR 0 6
36662: PUSH
36663: LD_VAR 0 4
36667: ARRAY
36668: PUSH
36669: LD_INT 1
36671: ARRAY
36672: PPUSH
36673: LD_VAR 0 6
36677: PUSH
36678: LD_VAR 0 4
36682: ARRAY
36683: PUSH
36684: LD_INT 2
36686: ARRAY
36687: PPUSH
36688: CALL_OW 488
36692: NOT
36693: PUSH
36694: LD_VAR 0 6
36698: PUSH
36699: LD_VAR 0 4
36703: ARRAY
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PPUSH
36709: LD_VAR 0 6
36713: PUSH
36714: LD_VAR 0 4
36718: ARRAY
36719: PUSH
36720: LD_INT 2
36722: ARRAY
36723: PPUSH
36724: CALL_OW 428
36728: PUSH
36729: LD_INT 0
36731: NONEQUAL
36732: OR
36733: IFFALSE 36755
// tmp := Delete ( tmp , i ) ;
36735: LD_ADDR_VAR 0 6
36739: PUSH
36740: LD_VAR 0 6
36744: PPUSH
36745: LD_VAR 0 4
36749: PPUSH
36750: CALL_OW 3
36754: ST_TO_ADDR
36755: GO 36655
36757: POP
36758: POP
// j := GetClosestHex ( unit , tmp ) ;
36759: LD_ADDR_VAR 0 5
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: LD_VAR 0 6
36773: PPUSH
36774: CALL 36061 0 2
36778: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36779: LD_VAR 0 1
36783: PPUSH
36784: LD_VAR 0 5
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: PPUSH
36793: LD_VAR 0 5
36797: PUSH
36798: LD_INT 2
36800: ARRAY
36801: PPUSH
36802: CALL_OW 111
// end ;
36806: LD_VAR 0 3
36810: RET
// export function PrepareApemanSoldier ( ) ; begin
36811: LD_INT 0
36813: PPUSH
// uc_nation := 0 ;
36814: LD_ADDR_OWVAR 21
36818: PUSH
36819: LD_INT 0
36821: ST_TO_ADDR
// hc_sex := sex_male ;
36822: LD_ADDR_OWVAR 27
36826: PUSH
36827: LD_INT 1
36829: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36830: LD_ADDR_OWVAR 28
36834: PUSH
36835: LD_INT 15
36837: ST_TO_ADDR
// hc_gallery :=  ;
36838: LD_ADDR_OWVAR 33
36842: PUSH
36843: LD_STRING 
36845: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36846: LD_ADDR_OWVAR 31
36850: PUSH
36851: LD_INT 0
36853: PPUSH
36854: LD_INT 3
36856: PPUSH
36857: CALL_OW 12
36861: PUSH
36862: LD_INT 0
36864: PPUSH
36865: LD_INT 3
36867: PPUSH
36868: CALL_OW 12
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
// end ;
36885: LD_VAR 0 1
36889: RET
// export function PrepareApemanEngineer ( ) ; begin
36890: LD_INT 0
36892: PPUSH
// uc_nation := 0 ;
36893: LD_ADDR_OWVAR 21
36897: PUSH
36898: LD_INT 0
36900: ST_TO_ADDR
// hc_sex := sex_male ;
36901: LD_ADDR_OWVAR 27
36905: PUSH
36906: LD_INT 1
36908: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36909: LD_ADDR_OWVAR 28
36913: PUSH
36914: LD_INT 16
36916: ST_TO_ADDR
// hc_gallery :=  ;
36917: LD_ADDR_OWVAR 33
36921: PUSH
36922: LD_STRING 
36924: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36925: LD_ADDR_OWVAR 31
36929: PUSH
36930: LD_INT 0
36932: PPUSH
36933: LD_INT 3
36935: PPUSH
36936: CALL_OW 12
36940: PUSH
36941: LD_INT 0
36943: PPUSH
36944: LD_INT 3
36946: PPUSH
36947: CALL_OW 12
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// end ;
36964: LD_VAR 0 1
36968: RET
// export function PrepareApeman ( agressivity ) ; begin
36969: LD_INT 0
36971: PPUSH
// uc_side := 0 ;
36972: LD_ADDR_OWVAR 20
36976: PUSH
36977: LD_INT 0
36979: ST_TO_ADDR
// uc_nation := 0 ;
36980: LD_ADDR_OWVAR 21
36984: PUSH
36985: LD_INT 0
36987: ST_TO_ADDR
// hc_sex := sex_male ;
36988: LD_ADDR_OWVAR 27
36992: PUSH
36993: LD_INT 1
36995: ST_TO_ADDR
// hc_class := class_apeman ;
36996: LD_ADDR_OWVAR 28
37000: PUSH
37001: LD_INT 12
37003: ST_TO_ADDR
// hc_gallery :=  ;
37004: LD_ADDR_OWVAR 33
37008: PUSH
37009: LD_STRING 
37011: ST_TO_ADDR
// if agressivity = 0 then
37012: LD_VAR 0 1
37016: PUSH
37017: LD_INT 0
37019: EQUAL
37020: IFFALSE 37032
// hc_agressivity := 0 else
37022: LD_ADDR_OWVAR 35
37026: PUSH
37027: LD_INT 0
37029: ST_TO_ADDR
37030: GO 37053
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37032: LD_ADDR_OWVAR 35
37036: PUSH
37037: LD_VAR 0 1
37041: NEG
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 12
37052: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37053: LD_ADDR_OWVAR 31
37057: PUSH
37058: LD_INT 0
37060: PPUSH
37061: LD_INT 3
37063: PPUSH
37064: CALL_OW 12
37068: PUSH
37069: LD_INT 0
37071: PPUSH
37072: LD_INT 3
37074: PPUSH
37075: CALL_OW 12
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: ST_TO_ADDR
// end ;
37092: LD_VAR 0 2
37096: RET
// export function PrepareTiger ( agressivity ) ; begin
37097: LD_INT 0
37099: PPUSH
// uc_side := 0 ;
37100: LD_ADDR_OWVAR 20
37104: PUSH
37105: LD_INT 0
37107: ST_TO_ADDR
// uc_nation := 0 ;
37108: LD_ADDR_OWVAR 21
37112: PUSH
37113: LD_INT 0
37115: ST_TO_ADDR
// hc_class := class_tiger ;
37116: LD_ADDR_OWVAR 28
37120: PUSH
37121: LD_INT 14
37123: ST_TO_ADDR
// hc_gallery :=  ;
37124: LD_ADDR_OWVAR 33
37128: PUSH
37129: LD_STRING 
37131: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37132: LD_ADDR_OWVAR 35
37136: PUSH
37137: LD_VAR 0 1
37141: NEG
37142: PPUSH
37143: LD_VAR 0 1
37147: PPUSH
37148: CALL_OW 12
37152: ST_TO_ADDR
// end ;
37153: LD_VAR 0 2
37157: RET
// export function PrepareEnchidna ( ) ; begin
37158: LD_INT 0
37160: PPUSH
// uc_side := 0 ;
37161: LD_ADDR_OWVAR 20
37165: PUSH
37166: LD_INT 0
37168: ST_TO_ADDR
// uc_nation := 0 ;
37169: LD_ADDR_OWVAR 21
37173: PUSH
37174: LD_INT 0
37176: ST_TO_ADDR
// hc_class := class_baggie ;
37177: LD_ADDR_OWVAR 28
37181: PUSH
37182: LD_INT 13
37184: ST_TO_ADDR
// hc_gallery :=  ;
37185: LD_ADDR_OWVAR 33
37189: PUSH
37190: LD_STRING 
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 1
37197: RET
// export function PrepareFrog ( ) ; begin
37198: LD_INT 0
37200: PPUSH
// uc_side := 0 ;
37201: LD_ADDR_OWVAR 20
37205: PUSH
37206: LD_INT 0
37208: ST_TO_ADDR
// uc_nation := 0 ;
37209: LD_ADDR_OWVAR 21
37213: PUSH
37214: LD_INT 0
37216: ST_TO_ADDR
// hc_class := class_frog ;
37217: LD_ADDR_OWVAR 28
37221: PUSH
37222: LD_INT 19
37224: ST_TO_ADDR
// hc_gallery :=  ;
37225: LD_ADDR_OWVAR 33
37229: PUSH
37230: LD_STRING 
37232: ST_TO_ADDR
// end ;
37233: LD_VAR 0 1
37237: RET
// export function PrepareFish ( ) ; begin
37238: LD_INT 0
37240: PPUSH
// uc_side := 0 ;
37241: LD_ADDR_OWVAR 20
37245: PUSH
37246: LD_INT 0
37248: ST_TO_ADDR
// uc_nation := 0 ;
37249: LD_ADDR_OWVAR 21
37253: PUSH
37254: LD_INT 0
37256: ST_TO_ADDR
// hc_class := class_fish ;
37257: LD_ADDR_OWVAR 28
37261: PUSH
37262: LD_INT 20
37264: ST_TO_ADDR
// hc_gallery :=  ;
37265: LD_ADDR_OWVAR 33
37269: PUSH
37270: LD_STRING 
37272: ST_TO_ADDR
// end ;
37273: LD_VAR 0 1
37277: RET
// export function PrepareBird ( ) ; begin
37278: LD_INT 0
37280: PPUSH
// uc_side := 0 ;
37281: LD_ADDR_OWVAR 20
37285: PUSH
37286: LD_INT 0
37288: ST_TO_ADDR
// uc_nation := 0 ;
37289: LD_ADDR_OWVAR 21
37293: PUSH
37294: LD_INT 0
37296: ST_TO_ADDR
// hc_class := class_phororhacos ;
37297: LD_ADDR_OWVAR 28
37301: PUSH
37302: LD_INT 18
37304: ST_TO_ADDR
// hc_gallery :=  ;
37305: LD_ADDR_OWVAR 33
37309: PUSH
37310: LD_STRING 
37312: ST_TO_ADDR
// end ;
37313: LD_VAR 0 1
37317: RET
// export function PrepareHorse ( ) ; begin
37318: LD_INT 0
37320: PPUSH
// uc_side := 0 ;
37321: LD_ADDR_OWVAR 20
37325: PUSH
37326: LD_INT 0
37328: ST_TO_ADDR
// uc_nation := 0 ;
37329: LD_ADDR_OWVAR 21
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
// hc_class := class_horse ;
37337: LD_ADDR_OWVAR 28
37341: PUSH
37342: LD_INT 21
37344: ST_TO_ADDR
// hc_gallery :=  ;
37345: LD_ADDR_OWVAR 33
37349: PUSH
37350: LD_STRING 
37352: ST_TO_ADDR
// end ;
37353: LD_VAR 0 1
37357: RET
// export function PrepareMastodont ( ) ; begin
37358: LD_INT 0
37360: PPUSH
// uc_side := 0 ;
37361: LD_ADDR_OWVAR 20
37365: PUSH
37366: LD_INT 0
37368: ST_TO_ADDR
// uc_nation := 0 ;
37369: LD_ADDR_OWVAR 21
37373: PUSH
37374: LD_INT 0
37376: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37377: LD_ADDR_OWVAR 37
37381: PUSH
37382: LD_INT 31
37384: ST_TO_ADDR
// vc_control := control_rider ;
37385: LD_ADDR_OWVAR 38
37389: PUSH
37390: LD_INT 4
37392: ST_TO_ADDR
// end ;
37393: LD_VAR 0 1
37397: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37398: LD_INT 0
37400: PPUSH
37401: PPUSH
37402: PPUSH
// uc_side = 0 ;
37403: LD_ADDR_OWVAR 20
37407: PUSH
37408: LD_INT 0
37410: ST_TO_ADDR
// uc_nation = 0 ;
37411: LD_ADDR_OWVAR 21
37415: PUSH
37416: LD_INT 0
37418: ST_TO_ADDR
// InitHc_All ( ) ;
37419: CALL_OW 584
// InitVc ;
37423: CALL_OW 20
// if mastodonts then
37427: LD_VAR 0 6
37431: IFFALSE 37498
// for i = 1 to mastodonts do
37433: LD_ADDR_VAR 0 11
37437: PUSH
37438: DOUBLE
37439: LD_INT 1
37441: DEC
37442: ST_TO_ADDR
37443: LD_VAR 0 6
37447: PUSH
37448: FOR_TO
37449: IFFALSE 37496
// begin vc_chassis := 31 ;
37451: LD_ADDR_OWVAR 37
37455: PUSH
37456: LD_INT 31
37458: ST_TO_ADDR
// vc_control := control_rider ;
37459: LD_ADDR_OWVAR 38
37463: PUSH
37464: LD_INT 4
37466: ST_TO_ADDR
// animal := CreateVehicle ;
37467: LD_ADDR_VAR 0 12
37471: PUSH
37472: CALL_OW 45
37476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37477: LD_VAR 0 12
37481: PPUSH
37482: LD_VAR 0 8
37486: PPUSH
37487: LD_INT 0
37489: PPUSH
37490: CALL 39626 0 3
// end ;
37494: GO 37448
37496: POP
37497: POP
// if horses then
37498: LD_VAR 0 5
37502: IFFALSE 37569
// for i = 1 to horses do
37504: LD_ADDR_VAR 0 11
37508: PUSH
37509: DOUBLE
37510: LD_INT 1
37512: DEC
37513: ST_TO_ADDR
37514: LD_VAR 0 5
37518: PUSH
37519: FOR_TO
37520: IFFALSE 37567
// begin hc_class := 21 ;
37522: LD_ADDR_OWVAR 28
37526: PUSH
37527: LD_INT 21
37529: ST_TO_ADDR
// hc_gallery :=  ;
37530: LD_ADDR_OWVAR 33
37534: PUSH
37535: LD_STRING 
37537: ST_TO_ADDR
// animal := CreateHuman ;
37538: LD_ADDR_VAR 0 12
37542: PUSH
37543: CALL_OW 44
37547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37548: LD_VAR 0 12
37552: PPUSH
37553: LD_VAR 0 8
37557: PPUSH
37558: LD_INT 0
37560: PPUSH
37561: CALL 39626 0 3
// end ;
37565: GO 37519
37567: POP
37568: POP
// if birds then
37569: LD_VAR 0 1
37573: IFFALSE 37640
// for i = 1 to birds do
37575: LD_ADDR_VAR 0 11
37579: PUSH
37580: DOUBLE
37581: LD_INT 1
37583: DEC
37584: ST_TO_ADDR
37585: LD_VAR 0 1
37589: PUSH
37590: FOR_TO
37591: IFFALSE 37638
// begin hc_class := 18 ;
37593: LD_ADDR_OWVAR 28
37597: PUSH
37598: LD_INT 18
37600: ST_TO_ADDR
// hc_gallery =  ;
37601: LD_ADDR_OWVAR 33
37605: PUSH
37606: LD_STRING 
37608: ST_TO_ADDR
// animal := CreateHuman ;
37609: LD_ADDR_VAR 0 12
37613: PUSH
37614: CALL_OW 44
37618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37619: LD_VAR 0 12
37623: PPUSH
37624: LD_VAR 0 8
37628: PPUSH
37629: LD_INT 0
37631: PPUSH
37632: CALL 39626 0 3
// end ;
37636: GO 37590
37638: POP
37639: POP
// if tigers then
37640: LD_VAR 0 2
37644: IFFALSE 37728
// for i = 1 to tigers do
37646: LD_ADDR_VAR 0 11
37650: PUSH
37651: DOUBLE
37652: LD_INT 1
37654: DEC
37655: ST_TO_ADDR
37656: LD_VAR 0 2
37660: PUSH
37661: FOR_TO
37662: IFFALSE 37726
// begin hc_class = class_tiger ;
37664: LD_ADDR_OWVAR 28
37668: PUSH
37669: LD_INT 14
37671: ST_TO_ADDR
// hc_gallery =  ;
37672: LD_ADDR_OWVAR 33
37676: PUSH
37677: LD_STRING 
37679: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37680: LD_ADDR_OWVAR 35
37684: PUSH
37685: LD_INT 7
37687: NEG
37688: PPUSH
37689: LD_INT 7
37691: PPUSH
37692: CALL_OW 12
37696: ST_TO_ADDR
// animal := CreateHuman ;
37697: LD_ADDR_VAR 0 12
37701: PUSH
37702: CALL_OW 44
37706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37707: LD_VAR 0 12
37711: PPUSH
37712: LD_VAR 0 8
37716: PPUSH
37717: LD_INT 0
37719: PPUSH
37720: CALL 39626 0 3
// end ;
37724: GO 37661
37726: POP
37727: POP
// if apemans then
37728: LD_VAR 0 3
37732: IFFALSE 37855
// for i = 1 to apemans do
37734: LD_ADDR_VAR 0 11
37738: PUSH
37739: DOUBLE
37740: LD_INT 1
37742: DEC
37743: ST_TO_ADDR
37744: LD_VAR 0 3
37748: PUSH
37749: FOR_TO
37750: IFFALSE 37853
// begin hc_class = class_apeman ;
37752: LD_ADDR_OWVAR 28
37756: PUSH
37757: LD_INT 12
37759: ST_TO_ADDR
// hc_gallery =  ;
37760: LD_ADDR_OWVAR 33
37764: PUSH
37765: LD_STRING 
37767: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37768: LD_ADDR_OWVAR 35
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PPUSH
37777: LD_INT 2
37779: PPUSH
37780: CALL_OW 12
37784: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37785: LD_ADDR_OWVAR 31
37789: PUSH
37790: LD_INT 1
37792: PPUSH
37793: LD_INT 3
37795: PPUSH
37796: CALL_OW 12
37800: PUSH
37801: LD_INT 1
37803: PPUSH
37804: LD_INT 3
37806: PPUSH
37807: CALL_OW 12
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// animal := CreateHuman ;
37824: LD_ADDR_VAR 0 12
37828: PUSH
37829: CALL_OW 44
37833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37834: LD_VAR 0 12
37838: PPUSH
37839: LD_VAR 0 8
37843: PPUSH
37844: LD_INT 0
37846: PPUSH
37847: CALL 39626 0 3
// end ;
37851: GO 37749
37853: POP
37854: POP
// if enchidnas then
37855: LD_VAR 0 4
37859: IFFALSE 37926
// for i = 1 to enchidnas do
37861: LD_ADDR_VAR 0 11
37865: PUSH
37866: DOUBLE
37867: LD_INT 1
37869: DEC
37870: ST_TO_ADDR
37871: LD_VAR 0 4
37875: PUSH
37876: FOR_TO
37877: IFFALSE 37924
// begin hc_class = 13 ;
37879: LD_ADDR_OWVAR 28
37883: PUSH
37884: LD_INT 13
37886: ST_TO_ADDR
// hc_gallery =  ;
37887: LD_ADDR_OWVAR 33
37891: PUSH
37892: LD_STRING 
37894: ST_TO_ADDR
// animal := CreateHuman ;
37895: LD_ADDR_VAR 0 12
37899: PUSH
37900: CALL_OW 44
37904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37905: LD_VAR 0 12
37909: PPUSH
37910: LD_VAR 0 8
37914: PPUSH
37915: LD_INT 0
37917: PPUSH
37918: CALL 39626 0 3
// end ;
37922: GO 37876
37924: POP
37925: POP
// if fishes then
37926: LD_VAR 0 7
37930: IFFALSE 37997
// for i = 1 to fishes do
37932: LD_ADDR_VAR 0 11
37936: PUSH
37937: DOUBLE
37938: LD_INT 1
37940: DEC
37941: ST_TO_ADDR
37942: LD_VAR 0 7
37946: PUSH
37947: FOR_TO
37948: IFFALSE 37995
// begin hc_class = 20 ;
37950: LD_ADDR_OWVAR 28
37954: PUSH
37955: LD_INT 20
37957: ST_TO_ADDR
// hc_gallery =  ;
37958: LD_ADDR_OWVAR 33
37962: PUSH
37963: LD_STRING 
37965: ST_TO_ADDR
// animal := CreateHuman ;
37966: LD_ADDR_VAR 0 12
37970: PUSH
37971: CALL_OW 44
37975: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37976: LD_VAR 0 12
37980: PPUSH
37981: LD_VAR 0 9
37985: PPUSH
37986: LD_INT 0
37988: PPUSH
37989: CALL 39626 0 3
// end ;
37993: GO 37947
37995: POP
37996: POP
// end ;
37997: LD_VAR 0 10
38001: RET
// export function WantHeal ( sci , unit ) ; begin
38002: LD_INT 0
38004: PPUSH
// if GetTaskList ( sci ) > 0 then
38005: LD_VAR 0 1
38009: PPUSH
38010: CALL_OW 437
38014: PUSH
38015: LD_INT 0
38017: GREATER
38018: IFFALSE 38088
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38020: LD_VAR 0 1
38024: PPUSH
38025: CALL_OW 437
38029: PUSH
38030: LD_INT 1
38032: ARRAY
38033: PUSH
38034: LD_INT 1
38036: ARRAY
38037: PUSH
38038: LD_STRING l
38040: EQUAL
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 437
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PUSH
38056: LD_INT 4
38058: ARRAY
38059: PUSH
38060: LD_VAR 0 2
38064: EQUAL
38065: AND
38066: IFFALSE 38078
// result := true else
38068: LD_ADDR_VAR 0 3
38072: PUSH
38073: LD_INT 1
38075: ST_TO_ADDR
38076: GO 38086
// result := false ;
38078: LD_ADDR_VAR 0 3
38082: PUSH
38083: LD_INT 0
38085: ST_TO_ADDR
// end else
38086: GO 38096
// result := false ;
38088: LD_ADDR_VAR 0 3
38092: PUSH
38093: LD_INT 0
38095: ST_TO_ADDR
// end ;
38096: LD_VAR 0 3
38100: RET
// export function HealTarget ( sci ) ; begin
38101: LD_INT 0
38103: PPUSH
// if not sci then
38104: LD_VAR 0 1
38108: NOT
38109: IFFALSE 38113
// exit ;
38111: GO 38178
// result := 0 ;
38113: LD_ADDR_VAR 0 2
38117: PUSH
38118: LD_INT 0
38120: ST_TO_ADDR
// if GetTaskList ( sci ) then
38121: LD_VAR 0 1
38125: PPUSH
38126: CALL_OW 437
38130: IFFALSE 38178
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 437
38141: PUSH
38142: LD_INT 1
38144: ARRAY
38145: PUSH
38146: LD_INT 1
38148: ARRAY
38149: PUSH
38150: LD_STRING l
38152: EQUAL
38153: IFFALSE 38178
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38155: LD_ADDR_VAR 0 2
38159: PUSH
38160: LD_VAR 0 1
38164: PPUSH
38165: CALL_OW 437
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PUSH
38174: LD_INT 4
38176: ARRAY
38177: ST_TO_ADDR
// end ;
38178: LD_VAR 0 2
38182: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38183: LD_INT 0
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
// if not base_units then
38189: LD_VAR 0 1
38193: NOT
38194: IFFALSE 38198
// exit ;
38196: GO 38285
// result := false ;
38198: LD_ADDR_VAR 0 2
38202: PUSH
38203: LD_INT 0
38205: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38206: LD_ADDR_VAR 0 5
38210: PUSH
38211: LD_VAR 0 1
38215: PPUSH
38216: LD_INT 21
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PPUSH
38226: CALL_OW 72
38230: ST_TO_ADDR
// if not tmp then
38231: LD_VAR 0 5
38235: NOT
38236: IFFALSE 38240
// exit ;
38238: GO 38285
// for i in tmp do
38240: LD_ADDR_VAR 0 3
38244: PUSH
38245: LD_VAR 0 5
38249: PUSH
38250: FOR_IN
38251: IFFALSE 38283
// begin result := EnemyInRange ( i , 22 ) ;
38253: LD_ADDR_VAR 0 2
38257: PUSH
38258: LD_VAR 0 3
38262: PPUSH
38263: LD_INT 22
38265: PPUSH
38266: CALL 35863 0 2
38270: ST_TO_ADDR
// if result then
38271: LD_VAR 0 2
38275: IFFALSE 38281
// exit ;
38277: POP
38278: POP
38279: GO 38285
// end ;
38281: GO 38250
38283: POP
38284: POP
// end ;
38285: LD_VAR 0 2
38289: RET
// export function FilterByTag ( units , tag ) ; begin
38290: LD_INT 0
38292: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38293: LD_ADDR_VAR 0 3
38297: PUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: LD_INT 120
38305: PUSH
38306: LD_VAR 0 2
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PPUSH
38315: CALL_OW 72
38319: ST_TO_ADDR
// end ;
38320: LD_VAR 0 3
38324: RET
// export function IsDriver ( un ) ; begin
38325: LD_INT 0
38327: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38328: LD_ADDR_VAR 0 2
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: LD_INT 55
38340: PUSH
38341: EMPTY
38342: LIST
38343: PPUSH
38344: CALL_OW 69
38348: IN
38349: ST_TO_ADDR
// end ;
38350: LD_VAR 0 2
38354: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38355: LD_INT 0
38357: PPUSH
38358: PPUSH
// list := [ ] ;
38359: LD_ADDR_VAR 0 5
38363: PUSH
38364: EMPTY
38365: ST_TO_ADDR
// case d of 0 :
38366: LD_VAR 0 3
38370: PUSH
38371: LD_INT 0
38373: DOUBLE
38374: EQUAL
38375: IFTRUE 38379
38377: GO 38512
38379: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38380: LD_ADDR_VAR 0 5
38384: PUSH
38385: LD_VAR 0 1
38389: PUSH
38390: LD_INT 4
38392: MINUS
38393: PUSH
38394: LD_VAR 0 2
38398: PUSH
38399: LD_INT 4
38401: MINUS
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: PUSH
38411: LD_VAR 0 1
38415: PUSH
38416: LD_INT 3
38418: MINUS
38419: PUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: PUSH
38433: LD_VAR 0 1
38437: PUSH
38438: LD_INT 4
38440: PLUS
38441: PUSH
38442: LD_VAR 0 2
38446: PUSH
38447: LD_INT 4
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: PUSH
38455: LD_VAR 0 1
38459: PUSH
38460: LD_INT 3
38462: PLUS
38463: PUSH
38464: LD_VAR 0 2
38468: PUSH
38469: LD_INT 3
38471: PLUS
38472: PUSH
38473: LD_INT 5
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: PUSH
38481: LD_VAR 0 1
38485: PUSH
38486: LD_VAR 0 2
38490: PUSH
38491: LD_INT 4
38493: PLUS
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// end ; 1 :
38510: GO 39210
38512: LD_INT 1
38514: DOUBLE
38515: EQUAL
38516: IFTRUE 38520
38518: GO 38653
38520: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38521: LD_ADDR_VAR 0 5
38525: PUSH
38526: LD_VAR 0 1
38530: PUSH
38531: LD_VAR 0 2
38535: PUSH
38536: LD_INT 4
38538: MINUS
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: LD_VAR 0 1
38552: PUSH
38553: LD_INT 3
38555: MINUS
38556: PUSH
38557: LD_VAR 0 2
38561: PUSH
38562: LD_INT 3
38564: MINUS
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: PUSH
38574: LD_VAR 0 1
38578: PUSH
38579: LD_INT 4
38581: MINUS
38582: PUSH
38583: LD_VAR 0 2
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PUSH
38596: LD_VAR 0 1
38600: PUSH
38601: LD_VAR 0 2
38605: PUSH
38606: LD_INT 3
38608: PLUS
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: LD_INT 4
38625: PLUS
38626: PUSH
38627: LD_VAR 0 2
38631: PUSH
38632: LD_INT 4
38634: PLUS
38635: PUSH
38636: LD_INT 5
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: ST_TO_ADDR
// end ; 2 :
38651: GO 39210
38653: LD_INT 2
38655: DOUBLE
38656: EQUAL
38657: IFTRUE 38661
38659: GO 38790
38661: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38662: LD_ADDR_VAR 0 5
38666: PUSH
38667: LD_VAR 0 1
38671: PUSH
38672: LD_VAR 0 2
38676: PUSH
38677: LD_INT 3
38679: MINUS
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: PUSH
38689: LD_VAR 0 1
38693: PUSH
38694: LD_INT 4
38696: PLUS
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: LD_INT 4
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: PUSH
38711: LD_VAR 0 1
38715: PUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_INT 4
38723: PLUS
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: LD_VAR 0 1
38737: PUSH
38738: LD_INT 3
38740: MINUS
38741: PUSH
38742: LD_VAR 0 2
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: LD_INT 4
38762: MINUS
38763: PUSH
38764: LD_VAR 0 2
38768: PUSH
38769: LD_INT 4
38771: MINUS
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// end ; 3 :
38788: GO 39210
38790: LD_INT 3
38792: DOUBLE
38793: EQUAL
38794: IFTRUE 38798
38796: GO 38931
38798: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38799: LD_ADDR_VAR 0 5
38803: PUSH
38804: LD_VAR 0 1
38808: PUSH
38809: LD_INT 3
38811: PLUS
38812: PUSH
38813: LD_VAR 0 2
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: PUSH
38826: LD_VAR 0 1
38830: PUSH
38831: LD_INT 4
38833: PLUS
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 4
38842: PLUS
38843: PUSH
38844: LD_INT 5
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 4
38859: MINUS
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PUSH
38874: LD_VAR 0 1
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_INT 4
38886: MINUS
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_INT 3
38903: MINUS
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_INT 3
38912: MINUS
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: ST_TO_ADDR
// end ; 4 :
38929: GO 39210
38931: LD_INT 4
38933: DOUBLE
38934: EQUAL
38935: IFTRUE 38939
38937: GO 39072
38939: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38940: LD_ADDR_VAR 0 5
38944: PUSH
38945: LD_VAR 0 1
38949: PUSH
38950: LD_VAR 0 2
38954: PUSH
38955: LD_INT 4
38957: PLUS
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: LD_VAR 0 1
38971: PUSH
38972: LD_INT 3
38974: PLUS
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 3
38983: PLUS
38984: PUSH
38985: LD_INT 5
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: PUSH
38993: LD_VAR 0 1
38997: PUSH
38998: LD_INT 4
39000: PLUS
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 3
39027: MINUS
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: PUSH
39037: LD_VAR 0 1
39041: PUSH
39042: LD_INT 4
39044: MINUS
39045: PUSH
39046: LD_VAR 0 2
39050: PUSH
39051: LD_INT 4
39053: MINUS
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: ST_TO_ADDR
// end ; 5 :
39070: GO 39210
39072: LD_INT 5
39074: DOUBLE
39075: EQUAL
39076: IFTRUE 39080
39078: GO 39209
39080: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39081: LD_ADDR_VAR 0 5
39085: PUSH
39086: LD_VAR 0 1
39090: PUSH
39091: LD_INT 4
39093: MINUS
39094: PUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: PUSH
39108: LD_VAR 0 1
39112: PUSH
39113: LD_VAR 0 2
39117: PUSH
39118: LD_INT 4
39120: MINUS
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: PUSH
39130: LD_VAR 0 1
39134: PUSH
39135: LD_INT 4
39137: PLUS
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_INT 4
39146: PLUS
39147: PUSH
39148: LD_INT 5
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: LD_VAR 0 1
39160: PUSH
39161: LD_INT 3
39163: PLUS
39164: PUSH
39165: LD_VAR 0 2
39169: PUSH
39170: LD_INT 4
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: PUSH
39178: LD_VAR 0 1
39182: PUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 3
39190: PLUS
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// end ; end ;
39207: GO 39210
39209: POP
// result := list ;
39210: LD_ADDR_VAR 0 4
39214: PUSH
39215: LD_VAR 0 5
39219: ST_TO_ADDR
// end ;
39220: LD_VAR 0 4
39224: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39225: LD_INT 0
39227: PPUSH
39228: PPUSH
39229: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39230: LD_VAR 0 1
39234: NOT
39235: PUSH
39236: LD_VAR 0 2
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 4
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: IN
39259: NOT
39260: OR
39261: IFFALSE 39265
// exit ;
39263: GO 39348
// tmp := [ ] ;
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: EMPTY
39271: ST_TO_ADDR
// for i in units do
39272: LD_ADDR_VAR 0 4
39276: PUSH
39277: LD_VAR 0 1
39281: PUSH
39282: FOR_IN
39283: IFFALSE 39317
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39285: LD_ADDR_VAR 0 5
39289: PUSH
39290: LD_VAR 0 5
39294: PPUSH
39295: LD_VAR 0 4
39299: PPUSH
39300: LD_VAR 0 2
39304: PPUSH
39305: CALL_OW 259
39309: PPUSH
39310: CALL 40721 0 2
39314: ST_TO_ADDR
39315: GO 39282
39317: POP
39318: POP
// if not tmp then
39319: LD_VAR 0 5
39323: NOT
39324: IFFALSE 39328
// exit ;
39326: GO 39348
// result := SortListByListDesc ( units , tmp ) ;
39328: LD_ADDR_VAR 0 3
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 5
39342: PPUSH
39343: CALL_OW 77
39347: ST_TO_ADDR
// end ;
39348: LD_VAR 0 3
39352: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39353: LD_INT 0
39355: PPUSH
39356: PPUSH
39357: PPUSH
// result := false ;
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_INT 0
39365: ST_TO_ADDR
// if not building then
39366: LD_VAR 0 2
39370: NOT
39371: IFFALSE 39375
// exit ;
39373: GO 39513
// x := GetX ( building ) ;
39375: LD_ADDR_VAR 0 4
39379: PUSH
39380: LD_VAR 0 2
39384: PPUSH
39385: CALL_OW 250
39389: ST_TO_ADDR
// y := GetY ( building ) ;
39390: LD_ADDR_VAR 0 5
39394: PUSH
39395: LD_VAR 0 2
39399: PPUSH
39400: CALL_OW 251
39404: ST_TO_ADDR
// if not x or not y then
39405: LD_VAR 0 4
39409: NOT
39410: PUSH
39411: LD_VAR 0 5
39415: NOT
39416: OR
39417: IFFALSE 39421
// exit ;
39419: GO 39513
// if GetTaskList ( unit ) then
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 437
39430: IFFALSE 39513
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39432: LD_STRING e
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 437
39444: PUSH
39445: LD_INT 1
39447: ARRAY
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: EQUAL
39453: PUSH
39454: LD_VAR 0 4
39458: PUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 437
39468: PUSH
39469: LD_INT 1
39471: ARRAY
39472: PUSH
39473: LD_INT 2
39475: ARRAY
39476: EQUAL
39477: AND
39478: PUSH
39479: LD_VAR 0 5
39483: PUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL_OW 437
39493: PUSH
39494: LD_INT 1
39496: ARRAY
39497: PUSH
39498: LD_INT 3
39500: ARRAY
39501: EQUAL
39502: AND
39503: IFFALSE 39513
// result := true end ;
39505: LD_ADDR_VAR 0 3
39509: PUSH
39510: LD_INT 1
39512: ST_TO_ADDR
// end ;
39513: LD_VAR 0 3
39517: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39518: LD_INT 0
39520: PPUSH
// result := false ;
39521: LD_ADDR_VAR 0 4
39525: PUSH
39526: LD_INT 0
39528: ST_TO_ADDR
// if GetTaskList ( unit ) then
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 437
39538: IFFALSE 39621
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39540: LD_STRING M
39542: PUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 437
39552: PUSH
39553: LD_INT 1
39555: ARRAY
39556: PUSH
39557: LD_INT 1
39559: ARRAY
39560: EQUAL
39561: PUSH
39562: LD_VAR 0 2
39566: PUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 437
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PUSH
39581: LD_INT 2
39583: ARRAY
39584: EQUAL
39585: AND
39586: PUSH
39587: LD_VAR 0 3
39591: PUSH
39592: LD_VAR 0 1
39596: PPUSH
39597: CALL_OW 437
39601: PUSH
39602: LD_INT 1
39604: ARRAY
39605: PUSH
39606: LD_INT 3
39608: ARRAY
39609: EQUAL
39610: AND
39611: IFFALSE 39621
// result := true ;
39613: LD_ADDR_VAR 0 4
39617: PUSH
39618: LD_INT 1
39620: ST_TO_ADDR
// end ; end ;
39621: LD_VAR 0 4
39625: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39626: LD_INT 0
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
// if not unit or not area then
39632: LD_VAR 0 1
39636: NOT
39637: PUSH
39638: LD_VAR 0 2
39642: NOT
39643: OR
39644: IFFALSE 39648
// exit ;
39646: GO 39824
// tmp := AreaToList ( area , i ) ;
39648: LD_ADDR_VAR 0 6
39652: PUSH
39653: LD_VAR 0 2
39657: PPUSH
39658: LD_VAR 0 5
39662: PPUSH
39663: CALL_OW 517
39667: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39668: LD_ADDR_VAR 0 5
39672: PUSH
39673: DOUBLE
39674: LD_INT 1
39676: DEC
39677: ST_TO_ADDR
39678: LD_VAR 0 6
39682: PUSH
39683: LD_INT 1
39685: ARRAY
39686: PUSH
39687: FOR_TO
39688: IFFALSE 39822
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39690: LD_ADDR_VAR 0 7
39694: PUSH
39695: LD_VAR 0 6
39699: PUSH
39700: LD_INT 1
39702: ARRAY
39703: PUSH
39704: LD_VAR 0 5
39708: ARRAY
39709: PUSH
39710: LD_VAR 0 6
39714: PUSH
39715: LD_INT 2
39717: ARRAY
39718: PUSH
39719: LD_VAR 0 5
39723: ARRAY
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39729: LD_INT 92
39731: PUSH
39732: LD_VAR 0 7
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PUSH
39741: LD_VAR 0 7
39745: PUSH
39746: LD_INT 2
39748: ARRAY
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: PPUSH
39759: CALL_OW 69
39763: PUSH
39764: LD_INT 0
39766: EQUAL
39767: IFFALSE 39820
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39769: LD_VAR 0 1
39773: PPUSH
39774: LD_VAR 0 7
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: LD_VAR 0 7
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: CALL_OW 48
// result := IsPlaced ( unit ) ;
39801: LD_ADDR_VAR 0 4
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 305
39815: ST_TO_ADDR
// exit ;
39816: POP
39817: POP
39818: GO 39824
// end ; end ;
39820: GO 39687
39822: POP
39823: POP
// end ;
39824: LD_VAR 0 4
39828: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39829: LD_INT 0
39831: PPUSH
39832: PPUSH
39833: PPUSH
// if not side or side > 8 then
39834: LD_VAR 0 1
39838: NOT
39839: PUSH
39840: LD_VAR 0 1
39844: PUSH
39845: LD_INT 8
39847: GREATER
39848: OR
39849: IFFALSE 39853
// exit ;
39851: GO 40040
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39853: LD_ADDR_VAR 0 4
39857: PUSH
39858: LD_INT 22
39860: PUSH
39861: LD_VAR 0 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 21
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PPUSH
39884: CALL_OW 69
39888: ST_TO_ADDR
// if not tmp then
39889: LD_VAR 0 4
39893: NOT
39894: IFFALSE 39898
// exit ;
39896: GO 40040
// enable_addtolog := true ;
39898: LD_ADDR_OWVAR 81
39902: PUSH
39903: LD_INT 1
39905: ST_TO_ADDR
// AddToLog ( [ ) ;
39906: LD_STRING [
39908: PPUSH
39909: CALL_OW 561
// for i in tmp do
39913: LD_ADDR_VAR 0 3
39917: PUSH
39918: LD_VAR 0 4
39922: PUSH
39923: FOR_IN
39924: IFFALSE 40031
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39926: LD_STRING [
39928: PUSH
39929: LD_VAR 0 3
39933: PPUSH
39934: CALL_OW 266
39938: STR
39939: PUSH
39940: LD_STRING , 
39942: STR
39943: PUSH
39944: LD_VAR 0 3
39948: PPUSH
39949: CALL_OW 250
39953: STR
39954: PUSH
39955: LD_STRING , 
39957: STR
39958: PUSH
39959: LD_VAR 0 3
39963: PPUSH
39964: CALL_OW 251
39968: STR
39969: PUSH
39970: LD_STRING , 
39972: STR
39973: PUSH
39974: LD_VAR 0 3
39978: PPUSH
39979: CALL_OW 254
39983: STR
39984: PUSH
39985: LD_STRING , 
39987: STR
39988: PUSH
39989: LD_VAR 0 3
39993: PPUSH
39994: LD_INT 1
39996: PPUSH
39997: CALL_OW 268
40001: STR
40002: PUSH
40003: LD_STRING , 
40005: STR
40006: PUSH
40007: LD_VAR 0 3
40011: PPUSH
40012: LD_INT 2
40014: PPUSH
40015: CALL_OW 268
40019: STR
40020: PUSH
40021: LD_STRING ],
40023: STR
40024: PPUSH
40025: CALL_OW 561
// end ;
40029: GO 39923
40031: POP
40032: POP
// AddToLog ( ]; ) ;
40033: LD_STRING ];
40035: PPUSH
40036: CALL_OW 561
// end ;
40040: LD_VAR 0 2
40044: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
// if not area or not rate or not max then
40052: LD_VAR 0 1
40056: NOT
40057: PUSH
40058: LD_VAR 0 2
40062: NOT
40063: OR
40064: PUSH
40065: LD_VAR 0 4
40069: NOT
40070: OR
40071: IFFALSE 40075
// exit ;
40073: GO 40264
// while 1 do
40075: LD_INT 1
40077: IFFALSE 40264
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40079: LD_ADDR_VAR 0 9
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_INT 1
40091: PPUSH
40092: CALL_OW 287
40096: PUSH
40097: LD_INT 10
40099: MUL
40100: ST_TO_ADDR
// r := rate / 10 ;
40101: LD_ADDR_VAR 0 7
40105: PUSH
40106: LD_VAR 0 2
40110: PUSH
40111: LD_INT 10
40113: DIVREAL
40114: ST_TO_ADDR
// time := 1 1$00 ;
40115: LD_ADDR_VAR 0 8
40119: PUSH
40120: LD_INT 2100
40122: ST_TO_ADDR
// if amount < min then
40123: LD_VAR 0 9
40127: PUSH
40128: LD_VAR 0 3
40132: LESS
40133: IFFALSE 40151
// r := r * 2 else
40135: LD_ADDR_VAR 0 7
40139: PUSH
40140: LD_VAR 0 7
40144: PUSH
40145: LD_INT 2
40147: MUL
40148: ST_TO_ADDR
40149: GO 40177
// if amount > max then
40151: LD_VAR 0 9
40155: PUSH
40156: LD_VAR 0 4
40160: GREATER
40161: IFFALSE 40177
// r := r / 2 ;
40163: LD_ADDR_VAR 0 7
40167: PUSH
40168: LD_VAR 0 7
40172: PUSH
40173: LD_INT 2
40175: DIVREAL
40176: ST_TO_ADDR
// time := time / r ;
40177: LD_ADDR_VAR 0 8
40181: PUSH
40182: LD_VAR 0 8
40186: PUSH
40187: LD_VAR 0 7
40191: DIVREAL
40192: ST_TO_ADDR
// if time < 0 then
40193: LD_VAR 0 8
40197: PUSH
40198: LD_INT 0
40200: LESS
40201: IFFALSE 40218
// time := time * - 1 ;
40203: LD_ADDR_VAR 0 8
40207: PUSH
40208: LD_VAR 0 8
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: MUL
40217: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40218: LD_VAR 0 8
40222: PUSH
40223: LD_INT 35
40225: PPUSH
40226: LD_INT 875
40228: PPUSH
40229: CALL_OW 12
40233: PLUS
40234: PPUSH
40235: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40239: LD_INT 1
40241: PPUSH
40242: LD_INT 5
40244: PPUSH
40245: CALL_OW 12
40249: PPUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: LD_INT 1
40257: PPUSH
40258: CALL_OW 55
// end ;
40262: GO 40075
// end ;
40264: LD_VAR 0 5
40268: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
40277: PPUSH
40278: PPUSH
// if not turrets or not factories then
40279: LD_VAR 0 1
40283: NOT
40284: PUSH
40285: LD_VAR 0 2
40289: NOT
40290: OR
40291: IFFALSE 40295
// exit ;
40293: GO 40602
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40295: LD_ADDR_VAR 0 10
40299: PUSH
40300: LD_INT 5
40302: PUSH
40303: LD_INT 6
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 4
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 24
40337: PUSH
40338: LD_INT 25
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 23
40347: PUSH
40348: LD_INT 27
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 42
40361: PUSH
40362: LD_INT 43
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 44
40371: PUSH
40372: LD_INT 46
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 45
40381: PUSH
40382: LD_INT 47
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// result := [ ] ;
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: EMPTY
40405: ST_TO_ADDR
// for i in turrets do
40406: LD_ADDR_VAR 0 4
40410: PUSH
40411: LD_VAR 0 1
40415: PUSH
40416: FOR_IN
40417: IFFALSE 40600
// begin nat := GetNation ( i ) ;
40419: LD_ADDR_VAR 0 7
40423: PUSH
40424: LD_VAR 0 4
40428: PPUSH
40429: CALL_OW 248
40433: ST_TO_ADDR
// weapon := 0 ;
40434: LD_ADDR_VAR 0 8
40438: PUSH
40439: LD_INT 0
40441: ST_TO_ADDR
// if not nat then
40442: LD_VAR 0 7
40446: NOT
40447: IFFALSE 40451
// continue ;
40449: GO 40416
// for j in list [ nat ] do
40451: LD_ADDR_VAR 0 5
40455: PUSH
40456: LD_VAR 0 10
40460: PUSH
40461: LD_VAR 0 7
40465: ARRAY
40466: PUSH
40467: FOR_IN
40468: IFFALSE 40509
// if GetBWeapon ( i ) = j [ 1 ] then
40470: LD_VAR 0 4
40474: PPUSH
40475: CALL_OW 269
40479: PUSH
40480: LD_VAR 0 5
40484: PUSH
40485: LD_INT 1
40487: ARRAY
40488: EQUAL
40489: IFFALSE 40507
// begin weapon := j [ 2 ] ;
40491: LD_ADDR_VAR 0 8
40495: PUSH
40496: LD_VAR 0 5
40500: PUSH
40501: LD_INT 2
40503: ARRAY
40504: ST_TO_ADDR
// break ;
40505: GO 40509
// end ;
40507: GO 40467
40509: POP
40510: POP
// if not weapon then
40511: LD_VAR 0 8
40515: NOT
40516: IFFALSE 40520
// continue ;
40518: GO 40416
// for k in factories do
40520: LD_ADDR_VAR 0 6
40524: PUSH
40525: LD_VAR 0 2
40529: PUSH
40530: FOR_IN
40531: IFFALSE 40596
// begin weapons := AvailableWeaponList ( k ) ;
40533: LD_ADDR_VAR 0 9
40537: PUSH
40538: LD_VAR 0 6
40542: PPUSH
40543: CALL_OW 478
40547: ST_TO_ADDR
// if not weapons then
40548: LD_VAR 0 9
40552: NOT
40553: IFFALSE 40557
// continue ;
40555: GO 40530
// if weapon in weapons then
40557: LD_VAR 0 8
40561: PUSH
40562: LD_VAR 0 9
40566: IN
40567: IFFALSE 40594
// begin result := [ i , weapon ] ;
40569: LD_ADDR_VAR 0 3
40573: PUSH
40574: LD_VAR 0 4
40578: PUSH
40579: LD_VAR 0 8
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: ST_TO_ADDR
// exit ;
40588: POP
40589: POP
40590: POP
40591: POP
40592: GO 40602
// end ; end ;
40594: GO 40530
40596: POP
40597: POP
// end ;
40598: GO 40416
40600: POP
40601: POP
// end ;
40602: LD_VAR 0 3
40606: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40607: LD_INT 0
40609: PPUSH
// if not side or side > 8 then
40610: LD_VAR 0 3
40614: NOT
40615: PUSH
40616: LD_VAR 0 3
40620: PUSH
40621: LD_INT 8
40623: GREATER
40624: OR
40625: IFFALSE 40629
// exit ;
40627: GO 40688
// if not range then
40629: LD_VAR 0 4
40633: NOT
40634: IFFALSE 40645
// range := - 12 ;
40636: LD_ADDR_VAR 0 4
40640: PUSH
40641: LD_INT 12
40643: NEG
40644: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40645: LD_VAR 0 1
40649: PPUSH
40650: LD_VAR 0 2
40654: PPUSH
40655: LD_VAR 0 3
40659: PPUSH
40660: LD_VAR 0 4
40664: PPUSH
40665: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40669: LD_VAR 0 1
40673: PPUSH
40674: LD_VAR 0 2
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: CALL_OW 331
// end ;
40688: LD_VAR 0 5
40692: RET
// export function Video ( mode ) ; begin
40693: LD_INT 0
40695: PPUSH
// ingame_video = mode ;
40696: LD_ADDR_OWVAR 52
40700: PUSH
40701: LD_VAR 0 1
40705: ST_TO_ADDR
// interface_hidden = mode ;
40706: LD_ADDR_OWVAR 54
40710: PUSH
40711: LD_VAR 0 1
40715: ST_TO_ADDR
// end ;
40716: LD_VAR 0 2
40720: RET
// export function Join ( array , element ) ; begin
40721: LD_INT 0
40723: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: LD_VAR 0 1
40738: PUSH
40739: LD_INT 1
40741: PLUS
40742: PPUSH
40743: LD_VAR 0 2
40747: PPUSH
40748: CALL_OW 1
40752: ST_TO_ADDR
// end ;
40753: LD_VAR 0 3
40757: RET
// export function JoinUnion ( array , element ) ; begin
40758: LD_INT 0
40760: PPUSH
// result := array union element ;
40761: LD_ADDR_VAR 0 3
40765: PUSH
40766: LD_VAR 0 1
40770: PUSH
40771: LD_VAR 0 2
40775: UNION
40776: ST_TO_ADDR
// end ;
40777: LD_VAR 0 3
40781: RET
// export function GetBehemoths ( side ) ; begin
40782: LD_INT 0
40784: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40785: LD_ADDR_VAR 0 2
40789: PUSH
40790: LD_INT 22
40792: PUSH
40793: LD_VAR 0 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 31
40804: PUSH
40805: LD_INT 25
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PPUSH
40816: CALL_OW 69
40820: ST_TO_ADDR
// end ;
40821: LD_VAR 0 2
40825: RET
// export function Shuffle ( array ) ; var i , index ; begin
40826: LD_INT 0
40828: PPUSH
40829: PPUSH
40830: PPUSH
// result := [ ] ;
40831: LD_ADDR_VAR 0 2
40835: PUSH
40836: EMPTY
40837: ST_TO_ADDR
// if not array then
40838: LD_VAR 0 1
40842: NOT
40843: IFFALSE 40847
// exit ;
40845: GO 40946
// Randomize ;
40847: CALL_OW 10
// for i = array downto 1 do
40851: LD_ADDR_VAR 0 3
40855: PUSH
40856: DOUBLE
40857: LD_VAR 0 1
40861: INC
40862: ST_TO_ADDR
40863: LD_INT 1
40865: PUSH
40866: FOR_DOWNTO
40867: IFFALSE 40944
// begin index := rand ( 1 , array ) ;
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: LD_INT 1
40876: PPUSH
40877: LD_VAR 0 1
40881: PPUSH
40882: CALL_OW 12
40886: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40887: LD_ADDR_VAR 0 2
40891: PUSH
40892: LD_VAR 0 2
40896: PPUSH
40897: LD_VAR 0 2
40901: PUSH
40902: LD_INT 1
40904: PLUS
40905: PPUSH
40906: LD_VAR 0 1
40910: PUSH
40911: LD_VAR 0 4
40915: ARRAY
40916: PPUSH
40917: CALL_OW 2
40921: ST_TO_ADDR
// array := Delete ( array , index ) ;
40922: LD_ADDR_VAR 0 1
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: LD_VAR 0 4
40936: PPUSH
40937: CALL_OW 3
40941: ST_TO_ADDR
// end ;
40942: GO 40866
40944: POP
40945: POP
// end ;
40946: LD_VAR 0 2
40950: RET
// export function GetBaseMaterials ( base ) ; begin
40951: LD_INT 0
40953: PPUSH
// result := [ 0 , 0 , 0 ] ;
40954: LD_ADDR_VAR 0 2
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: ST_TO_ADDR
// if not base then
40973: LD_VAR 0 1
40977: NOT
40978: IFFALSE 40982
// exit ;
40980: GO 41031
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40982: LD_ADDR_VAR 0 2
40986: PUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: LD_INT 1
40994: PPUSH
40995: CALL_OW 275
40999: PUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: LD_INT 2
41007: PPUSH
41008: CALL_OW 275
41012: PUSH
41013: LD_VAR 0 1
41017: PPUSH
41018: LD_INT 3
41020: PPUSH
41021: CALL_OW 275
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// end ;
41031: LD_VAR 0 2
41035: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41036: LD_INT 0
41038: PPUSH
41039: PPUSH
// result := array ;
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_VAR 0 1
41049: ST_TO_ADDR
// if size >= result then
41050: LD_VAR 0 2
41054: PUSH
41055: LD_VAR 0 3
41059: GREATEREQUAL
41060: IFFALSE 41064
// exit ;
41062: GO 41114
// if size then
41064: LD_VAR 0 2
41068: IFFALSE 41114
// for i := array downto size do
41070: LD_ADDR_VAR 0 4
41074: PUSH
41075: DOUBLE
41076: LD_VAR 0 1
41080: INC
41081: ST_TO_ADDR
41082: LD_VAR 0 2
41086: PUSH
41087: FOR_DOWNTO
41088: IFFALSE 41112
// result := Delete ( result , result ) ;
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_VAR 0 3
41099: PPUSH
41100: LD_VAR 0 3
41104: PPUSH
41105: CALL_OW 3
41109: ST_TO_ADDR
41110: GO 41087
41112: POP
41113: POP
// end ;
41114: LD_VAR 0 3
41118: RET
// export function ComExit ( unit ) ; var tmp ; begin
41119: LD_INT 0
41121: PPUSH
41122: PPUSH
// if not IsInUnit ( unit ) then
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 310
41132: NOT
41133: IFFALSE 41137
// exit ;
41135: GO 41197
// tmp := IsInUnit ( unit ) ;
41137: LD_ADDR_VAR 0 3
41141: PUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 310
41151: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41152: LD_VAR 0 3
41156: PPUSH
41157: CALL_OW 247
41161: PUSH
41162: LD_INT 2
41164: EQUAL
41165: IFFALSE 41178
// ComExitVehicle ( unit ) else
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 121
41176: GO 41187
// ComExitBuilding ( unit ) ;
41178: LD_VAR 0 1
41182: PPUSH
41183: CALL_OW 122
// result := tmp ;
41187: LD_ADDR_VAR 0 2
41191: PUSH
41192: LD_VAR 0 3
41196: ST_TO_ADDR
// end ;
41197: LD_VAR 0 2
41201: RET
// export function ComExitAll ( units ) ; var i ; begin
41202: LD_INT 0
41204: PPUSH
41205: PPUSH
// if not units then
41206: LD_VAR 0 1
41210: NOT
41211: IFFALSE 41215
// exit ;
41213: GO 41241
// for i in units do
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_VAR 0 1
41224: PUSH
41225: FOR_IN
41226: IFFALSE 41239
// ComExit ( i ) ;
41228: LD_VAR 0 3
41232: PPUSH
41233: CALL 41119 0 1
41237: GO 41225
41239: POP
41240: POP
// end ;
41241: LD_VAR 0 2
41245: RET
// export function ResetHc ; begin
41246: LD_INT 0
41248: PPUSH
// InitHc ;
41249: CALL_OW 19
// hc_importance := 0 ;
41253: LD_ADDR_OWVAR 32
41257: PUSH
41258: LD_INT 0
41260: ST_TO_ADDR
// end ;
41261: LD_VAR 0 1
41265: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41266: LD_INT 0
41268: PPUSH
41269: PPUSH
41270: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41271: LD_ADDR_VAR 0 6
41275: PUSH
41276: LD_VAR 0 1
41280: PUSH
41281: LD_VAR 0 3
41285: PLUS
41286: PUSH
41287: LD_INT 2
41289: DIV
41290: ST_TO_ADDR
// if _x < 0 then
41291: LD_VAR 0 6
41295: PUSH
41296: LD_INT 0
41298: LESS
41299: IFFALSE 41316
// _x := _x * - 1 ;
41301: LD_ADDR_VAR 0 6
41305: PUSH
41306: LD_VAR 0 6
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: MUL
41315: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41316: LD_ADDR_VAR 0 7
41320: PUSH
41321: LD_VAR 0 2
41325: PUSH
41326: LD_VAR 0 4
41330: PLUS
41331: PUSH
41332: LD_INT 2
41334: DIV
41335: ST_TO_ADDR
// if _y < 0 then
41336: LD_VAR 0 7
41340: PUSH
41341: LD_INT 0
41343: LESS
41344: IFFALSE 41361
// _y := _y * - 1 ;
41346: LD_ADDR_VAR 0 7
41350: PUSH
41351: LD_VAR 0 7
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: MUL
41360: ST_TO_ADDR
// result := [ _x , _y ] ;
41361: LD_ADDR_VAR 0 5
41365: PUSH
41366: LD_VAR 0 6
41370: PUSH
41371: LD_VAR 0 7
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// end ;
41380: LD_VAR 0 5
41384: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41385: LD_INT 0
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
// task := GetTaskList ( unit ) ;
41391: LD_ADDR_VAR 0 7
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 437
41405: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41406: LD_VAR 0 7
41410: NOT
41411: PUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_VAR 0 2
41421: PPUSH
41422: CALL_OW 308
41426: NOT
41427: AND
41428: IFFALSE 41432
// exit ;
41430: GO 41550
// if IsInArea ( unit , area ) then
41432: LD_VAR 0 1
41436: PPUSH
41437: LD_VAR 0 2
41441: PPUSH
41442: CALL_OW 308
41446: IFFALSE 41464
// begin ComMoveToArea ( unit , goAway ) ;
41448: LD_VAR 0 1
41452: PPUSH
41453: LD_VAR 0 3
41457: PPUSH
41458: CALL_OW 113
// exit ;
41462: GO 41550
// end ; if task [ 1 ] [ 1 ] <> M then
41464: LD_VAR 0 7
41468: PUSH
41469: LD_INT 1
41471: ARRAY
41472: PUSH
41473: LD_INT 1
41475: ARRAY
41476: PUSH
41477: LD_STRING M
41479: NONEQUAL
41480: IFFALSE 41484
// exit ;
41482: GO 41550
// x := task [ 1 ] [ 2 ] ;
41484: LD_ADDR_VAR 0 5
41488: PUSH
41489: LD_VAR 0 7
41493: PUSH
41494: LD_INT 1
41496: ARRAY
41497: PUSH
41498: LD_INT 2
41500: ARRAY
41501: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41502: LD_ADDR_VAR 0 6
41506: PUSH
41507: LD_VAR 0 7
41511: PUSH
41512: LD_INT 1
41514: ARRAY
41515: PUSH
41516: LD_INT 3
41518: ARRAY
41519: ST_TO_ADDR
// if InArea ( x , y , area ) then
41520: LD_VAR 0 5
41524: PPUSH
41525: LD_VAR 0 6
41529: PPUSH
41530: LD_VAR 0 2
41534: PPUSH
41535: CALL_OW 309
41539: IFFALSE 41550
// ComStop ( unit ) ;
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 141
// end ;
41550: LD_VAR 0 4
41554: RET
// export function Abs ( value ) ; begin
41555: LD_INT 0
41557: PPUSH
// result := value ;
41558: LD_ADDR_VAR 0 2
41562: PUSH
41563: LD_VAR 0 1
41567: ST_TO_ADDR
// if value < 0 then
41568: LD_VAR 0 1
41572: PUSH
41573: LD_INT 0
41575: LESS
41576: IFFALSE 41593
// result := value * - 1 ;
41578: LD_ADDR_VAR 0 2
41582: PUSH
41583: LD_VAR 0 1
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: MUL
41592: ST_TO_ADDR
// end ;
41593: LD_VAR 0 2
41597: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41598: LD_INT 0
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
// if not unit or not building then
41608: LD_VAR 0 1
41612: NOT
41613: PUSH
41614: LD_VAR 0 2
41618: NOT
41619: OR
41620: IFFALSE 41624
// exit ;
41622: GO 41850
// x := GetX ( building ) ;
41624: LD_ADDR_VAR 0 4
41628: PUSH
41629: LD_VAR 0 2
41633: PPUSH
41634: CALL_OW 250
41638: ST_TO_ADDR
// y := GetY ( building ) ;
41639: LD_ADDR_VAR 0 6
41643: PUSH
41644: LD_VAR 0 2
41648: PPUSH
41649: CALL_OW 251
41653: ST_TO_ADDR
// d := GetDir ( building ) ;
41654: LD_ADDR_VAR 0 8
41658: PUSH
41659: LD_VAR 0 2
41663: PPUSH
41664: CALL_OW 254
41668: ST_TO_ADDR
// r := 4 ;
41669: LD_ADDR_VAR 0 9
41673: PUSH
41674: LD_INT 4
41676: ST_TO_ADDR
// for i := 1 to 5 do
41677: LD_ADDR_VAR 0 10
41681: PUSH
41682: DOUBLE
41683: LD_INT 1
41685: DEC
41686: ST_TO_ADDR
41687: LD_INT 5
41689: PUSH
41690: FOR_TO
41691: IFFALSE 41848
// begin _x := ShiftX ( x , d , r + i ) ;
41693: LD_ADDR_VAR 0 5
41697: PUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: LD_VAR 0 8
41707: PPUSH
41708: LD_VAR 0 9
41712: PUSH
41713: LD_VAR 0 10
41717: PLUS
41718: PPUSH
41719: CALL_OW 272
41723: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41724: LD_ADDR_VAR 0 7
41728: PUSH
41729: LD_VAR 0 6
41733: PPUSH
41734: LD_VAR 0 8
41738: PPUSH
41739: LD_VAR 0 9
41743: PUSH
41744: LD_VAR 0 10
41748: PLUS
41749: PPUSH
41750: CALL_OW 273
41754: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41755: LD_VAR 0 5
41759: PPUSH
41760: LD_VAR 0 7
41764: PPUSH
41765: CALL_OW 488
41769: PUSH
41770: LD_VAR 0 5
41774: PPUSH
41775: LD_VAR 0 7
41779: PPUSH
41780: CALL_OW 428
41784: PPUSH
41785: CALL_OW 247
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: IN
41800: NOT
41801: AND
41802: IFFALSE 41846
// begin ComMoveXY ( unit , _x , _y ) ;
41804: LD_VAR 0 1
41808: PPUSH
41809: LD_VAR 0 5
41813: PPUSH
41814: LD_VAR 0 7
41818: PPUSH
41819: CALL_OW 111
// result := [ _x , _y ] ;
41823: LD_ADDR_VAR 0 3
41827: PUSH
41828: LD_VAR 0 5
41832: PUSH
41833: LD_VAR 0 7
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// exit ;
41842: POP
41843: POP
41844: GO 41850
// end ; end ;
41846: GO 41690
41848: POP
41849: POP
// end ;
41850: LD_VAR 0 3
41854: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41855: LD_INT 0
41857: PPUSH
41858: PPUSH
41859: PPUSH
// result := 0 ;
41860: LD_ADDR_VAR 0 3
41864: PUSH
41865: LD_INT 0
41867: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41868: LD_VAR 0 1
41872: PUSH
41873: LD_INT 0
41875: LESS
41876: PUSH
41877: LD_VAR 0 1
41881: PUSH
41882: LD_INT 8
41884: GREATER
41885: OR
41886: PUSH
41887: LD_VAR 0 2
41891: PUSH
41892: LD_INT 0
41894: LESS
41895: OR
41896: PUSH
41897: LD_VAR 0 2
41901: PUSH
41902: LD_INT 8
41904: GREATER
41905: OR
41906: IFFALSE 41910
// exit ;
41908: GO 41985
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41910: LD_ADDR_VAR 0 4
41914: PUSH
41915: LD_INT 22
41917: PUSH
41918: LD_VAR 0 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PPUSH
41927: CALL_OW 69
41931: PUSH
41932: FOR_IN
41933: IFFALSE 41983
// begin un := UnitShoot ( i ) ;
41935: LD_ADDR_VAR 0 5
41939: PUSH
41940: LD_VAR 0 4
41944: PPUSH
41945: CALL_OW 504
41949: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41950: LD_VAR 0 5
41954: PPUSH
41955: CALL_OW 255
41959: PUSH
41960: LD_VAR 0 1
41964: EQUAL
41965: IFFALSE 41981
// begin result := un ;
41967: LD_ADDR_VAR 0 3
41971: PUSH
41972: LD_VAR 0 5
41976: ST_TO_ADDR
// exit ;
41977: POP
41978: POP
41979: GO 41985
// end ; end ;
41981: GO 41932
41983: POP
41984: POP
// end ;
41985: LD_VAR 0 3
41989: RET
// export function GetCargoBay ( units ) ; begin
41990: LD_INT 0
41992: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41993: LD_ADDR_VAR 0 2
41997: PUSH
41998: LD_VAR 0 1
42002: PPUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 34
42008: PUSH
42009: LD_INT 12
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 34
42018: PUSH
42019: LD_INT 51
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 34
42028: PUSH
42029: LD_INT 32
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 34
42038: PUSH
42039: LD_INT 89
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: PPUSH
42053: CALL_OW 72
42057: ST_TO_ADDR
// end ;
42058: LD_VAR 0 2
42062: RET
// export function Negate ( value ) ; begin
42063: LD_INT 0
42065: PPUSH
// result := not value ;
42066: LD_ADDR_VAR 0 2
42070: PUSH
42071: LD_VAR 0 1
42075: NOT
42076: ST_TO_ADDR
// end ;
42077: LD_VAR 0 2
42081: RET
// export function Inc ( value ) ; begin
42082: LD_INT 0
42084: PPUSH
// result := value + 1 ;
42085: LD_ADDR_VAR 0 2
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: LD_INT 1
42097: PLUS
42098: ST_TO_ADDR
// end ;
42099: LD_VAR 0 2
42103: RET
// export function Dec ( value ) ; begin
42104: LD_INT 0
42106: PPUSH
// result := value - 1 ;
42107: LD_ADDR_VAR 0 2
42111: PUSH
42112: LD_VAR 0 1
42116: PUSH
42117: LD_INT 1
42119: MINUS
42120: ST_TO_ADDR
// end ;
42121: LD_VAR 0 2
42125: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42126: LD_INT 0
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42136: LD_VAR 0 1
42140: PPUSH
42141: LD_VAR 0 2
42145: PPUSH
42146: CALL_OW 488
42150: NOT
42151: PUSH
42152: LD_VAR 0 3
42156: PPUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: CALL_OW 488
42166: NOT
42167: OR
42168: IFFALSE 42181
// begin result := - 1 ;
42170: LD_ADDR_VAR 0 5
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: ST_TO_ADDR
// exit ;
42179: GO 42416
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42181: LD_ADDR_VAR 0 12
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: LD_VAR 0 2
42195: PPUSH
42196: LD_VAR 0 3
42200: PPUSH
42201: LD_VAR 0 4
42205: PPUSH
42206: CALL 41266 0 4
42210: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42211: LD_ADDR_VAR 0 11
42215: PUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: LD_VAR 0 2
42225: PPUSH
42226: LD_VAR 0 12
42230: PUSH
42231: LD_INT 1
42233: ARRAY
42234: PPUSH
42235: LD_VAR 0 12
42239: PUSH
42240: LD_INT 2
42242: ARRAY
42243: PPUSH
42244: CALL_OW 298
42248: ST_TO_ADDR
// distance := 9999 ;
42249: LD_ADDR_VAR 0 10
42253: PUSH
42254: LD_INT 9999
42256: ST_TO_ADDR
// for i := 0 to 5 do
42257: LD_ADDR_VAR 0 6
42261: PUSH
42262: DOUBLE
42263: LD_INT 0
42265: DEC
42266: ST_TO_ADDR
42267: LD_INT 5
42269: PUSH
42270: FOR_TO
42271: IFFALSE 42414
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42273: LD_ADDR_VAR 0 7
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: LD_VAR 0 6
42287: PPUSH
42288: LD_VAR 0 11
42292: PPUSH
42293: CALL_OW 272
42297: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42298: LD_ADDR_VAR 0 8
42302: PUSH
42303: LD_VAR 0 2
42307: PPUSH
42308: LD_VAR 0 6
42312: PPUSH
42313: LD_VAR 0 11
42317: PPUSH
42318: CALL_OW 273
42322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42323: LD_VAR 0 7
42327: PPUSH
42328: LD_VAR 0 8
42332: PPUSH
42333: CALL_OW 488
42337: NOT
42338: IFFALSE 42342
// continue ;
42340: GO 42270
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42342: LD_ADDR_VAR 0 9
42346: PUSH
42347: LD_VAR 0 12
42351: PUSH
42352: LD_INT 1
42354: ARRAY
42355: PPUSH
42356: LD_VAR 0 12
42360: PUSH
42361: LD_INT 2
42363: ARRAY
42364: PPUSH
42365: LD_VAR 0 7
42369: PPUSH
42370: LD_VAR 0 8
42374: PPUSH
42375: CALL_OW 298
42379: ST_TO_ADDR
// if tmp < distance then
42380: LD_VAR 0 9
42384: PUSH
42385: LD_VAR 0 10
42389: LESS
42390: IFFALSE 42412
// begin result := i ;
42392: LD_ADDR_VAR 0 5
42396: PUSH
42397: LD_VAR 0 6
42401: ST_TO_ADDR
// distance := tmp ;
42402: LD_ADDR_VAR 0 10
42406: PUSH
42407: LD_VAR 0 9
42411: ST_TO_ADDR
// end ; end ;
42412: GO 42270
42414: POP
42415: POP
// end ;
42416: LD_VAR 0 5
42420: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42421: LD_INT 0
42423: PPUSH
42424: PPUSH
// if not driver or not IsInUnit ( driver ) then
42425: LD_VAR 0 1
42429: NOT
42430: PUSH
42431: LD_VAR 0 1
42435: PPUSH
42436: CALL_OW 310
42440: NOT
42441: OR
42442: IFFALSE 42446
// exit ;
42444: GO 42536
// vehicle := IsInUnit ( driver ) ;
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_VAR 0 1
42455: PPUSH
42456: CALL_OW 310
42460: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42461: LD_VAR 0 1
42465: PPUSH
42466: LD_STRING \
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: PUSH
42496: LD_STRING E
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_VAR 0 3
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PPUSH
42532: CALL_OW 446
// end ;
42536: LD_VAR 0 2
42540: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42541: LD_INT 0
42543: PPUSH
42544: PPUSH
// if not driver or not IsInUnit ( driver ) then
42545: LD_VAR 0 1
42549: NOT
42550: PUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 310
42560: NOT
42561: OR
42562: IFFALSE 42566
// exit ;
42564: GO 42656
// vehicle := IsInUnit ( driver ) ;
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_VAR 0 1
42575: PPUSH
42576: CALL_OW 310
42580: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42581: LD_VAR 0 1
42585: PPUSH
42586: LD_STRING \
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: PUSH
42616: LD_STRING E
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_VAR 0 3
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PPUSH
42652: CALL_OW 447
// end ;
42656: LD_VAR 0 2
42660: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42661: LD_INT 0
42663: PPUSH
42664: PPUSH
42665: PPUSH
// tmp := [ ] ;
42666: LD_ADDR_VAR 0 5
42670: PUSH
42671: EMPTY
42672: ST_TO_ADDR
// for i in units do
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: LD_VAR 0 1
42682: PUSH
42683: FOR_IN
42684: IFFALSE 42722
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42686: LD_ADDR_VAR 0 5
42690: PUSH
42691: LD_VAR 0 5
42695: PPUSH
42696: LD_VAR 0 5
42700: PUSH
42701: LD_INT 1
42703: PLUS
42704: PPUSH
42705: LD_VAR 0 4
42709: PPUSH
42710: CALL_OW 256
42714: PPUSH
42715: CALL_OW 2
42719: ST_TO_ADDR
42720: GO 42683
42722: POP
42723: POP
// if not tmp then
42724: LD_VAR 0 5
42728: NOT
42729: IFFALSE 42733
// exit ;
42731: GO 42781
// if asc then
42733: LD_VAR 0 2
42737: IFFALSE 42761
// result := SortListByListAsc ( units , tmp ) else
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 1
42748: PPUSH
42749: LD_VAR 0 5
42753: PPUSH
42754: CALL_OW 76
42758: ST_TO_ADDR
42759: GO 42781
// result := SortListByListDesc ( units , tmp ) ;
42761: LD_ADDR_VAR 0 3
42765: PUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: LD_VAR 0 5
42775: PPUSH
42776: CALL_OW 77
42780: ST_TO_ADDR
// end ;
42781: LD_VAR 0 3
42785: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42786: LD_INT 0
42788: PPUSH
42789: PPUSH
// task := GetTaskList ( mech ) ;
42790: LD_ADDR_VAR 0 4
42794: PUSH
42795: LD_VAR 0 1
42799: PPUSH
42800: CALL_OW 437
42804: ST_TO_ADDR
// if not task then
42805: LD_VAR 0 4
42809: NOT
42810: IFFALSE 42814
// exit ;
42812: GO 42856
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42814: LD_ADDR_VAR 0 3
42818: PUSH
42819: LD_VAR 0 4
42823: PUSH
42824: LD_INT 1
42826: ARRAY
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: PUSH
42832: LD_STRING r
42834: EQUAL
42835: PUSH
42836: LD_VAR 0 4
42840: PUSH
42841: LD_INT 1
42843: ARRAY
42844: PUSH
42845: LD_INT 4
42847: ARRAY
42848: PUSH
42849: LD_VAR 0 2
42853: EQUAL
42854: AND
42855: ST_TO_ADDR
// end ;
42856: LD_VAR 0 3
42860: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42861: LD_INT 0
42863: PPUSH
// SetDir ( unit , d ) ;
42864: LD_VAR 0 1
42868: PPUSH
42869: LD_VAR 0 4
42873: PPUSH
42874: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42878: LD_ADDR_VAR 0 6
42882: PUSH
42883: LD_VAR 0 1
42887: PPUSH
42888: LD_VAR 0 2
42892: PPUSH
42893: LD_VAR 0 3
42897: PPUSH
42898: LD_VAR 0 5
42902: PPUSH
42903: CALL_OW 48
42907: ST_TO_ADDR
// end ;
42908: LD_VAR 0 6
42912: RET
// export function ToNaturalNumber ( number ) ; begin
42913: LD_INT 0
42915: PPUSH
// result := number div 1 ;
42916: LD_ADDR_VAR 0 2
42920: PUSH
42921: LD_VAR 0 1
42925: PUSH
42926: LD_INT 1
42928: DIV
42929: ST_TO_ADDR
// if number < 0 then
42930: LD_VAR 0 1
42934: PUSH
42935: LD_INT 0
42937: LESS
42938: IFFALSE 42948
// result := 0 ;
42940: LD_ADDR_VAR 0 2
42944: PUSH
42945: LD_INT 0
42947: ST_TO_ADDR
// end ;
42948: LD_VAR 0 2
42952: RET
// export function SortByClass ( units , class ) ; var un ; begin
42953: LD_INT 0
42955: PPUSH
42956: PPUSH
// if not units or not class then
42957: LD_VAR 0 1
42961: NOT
42962: PUSH
42963: LD_VAR 0 2
42967: NOT
42968: OR
42969: IFFALSE 42973
// exit ;
42971: GO 43068
// result := [ ] ;
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: EMPTY
42979: ST_TO_ADDR
// for un in units do
42980: LD_ADDR_VAR 0 4
42984: PUSH
42985: LD_VAR 0 1
42989: PUSH
42990: FOR_IN
42991: IFFALSE 43066
// if GetClass ( un ) = class then
42993: LD_VAR 0 4
42997: PPUSH
42998: CALL_OW 257
43002: PUSH
43003: LD_VAR 0 2
43007: EQUAL
43008: IFFALSE 43035
// result := Insert ( result , 1 , un ) else
43010: LD_ADDR_VAR 0 3
43014: PUSH
43015: LD_VAR 0 3
43019: PPUSH
43020: LD_INT 1
43022: PPUSH
43023: LD_VAR 0 4
43027: PPUSH
43028: CALL_OW 2
43032: ST_TO_ADDR
43033: GO 43064
// result := Replace ( result , result + 1 , un ) ;
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_VAR 0 3
43044: PPUSH
43045: LD_VAR 0 3
43049: PUSH
43050: LD_INT 1
43052: PLUS
43053: PPUSH
43054: LD_VAR 0 4
43058: PPUSH
43059: CALL_OW 1
43063: ST_TO_ADDR
43064: GO 42990
43066: POP
43067: POP
// end ;
43068: LD_VAR 0 3
43072: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43073: LD_INT 0
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
// result := [ ] ;
43082: LD_ADDR_VAR 0 4
43086: PUSH
43087: EMPTY
43088: ST_TO_ADDR
// if x - r < 0 then
43089: LD_VAR 0 1
43093: PUSH
43094: LD_VAR 0 3
43098: MINUS
43099: PUSH
43100: LD_INT 0
43102: LESS
43103: IFFALSE 43115
// min_x := 0 else
43105: LD_ADDR_VAR 0 8
43109: PUSH
43110: LD_INT 0
43112: ST_TO_ADDR
43113: GO 43131
// min_x := x - r ;
43115: LD_ADDR_VAR 0 8
43119: PUSH
43120: LD_VAR 0 1
43124: PUSH
43125: LD_VAR 0 3
43129: MINUS
43130: ST_TO_ADDR
// if y - r < 0 then
43131: LD_VAR 0 2
43135: PUSH
43136: LD_VAR 0 3
43140: MINUS
43141: PUSH
43142: LD_INT 0
43144: LESS
43145: IFFALSE 43157
// min_y := 0 else
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: LD_INT 0
43154: ST_TO_ADDR
43155: GO 43173
// min_y := y - r ;
43157: LD_ADDR_VAR 0 7
43161: PUSH
43162: LD_VAR 0 2
43166: PUSH
43167: LD_VAR 0 3
43171: MINUS
43172: ST_TO_ADDR
// max_x := x + r ;
43173: LD_ADDR_VAR 0 9
43177: PUSH
43178: LD_VAR 0 1
43182: PUSH
43183: LD_VAR 0 3
43187: PLUS
43188: ST_TO_ADDR
// max_y := y + r ;
43189: LD_ADDR_VAR 0 10
43193: PUSH
43194: LD_VAR 0 2
43198: PUSH
43199: LD_VAR 0 3
43203: PLUS
43204: ST_TO_ADDR
// for _x = min_x to max_x do
43205: LD_ADDR_VAR 0 5
43209: PUSH
43210: DOUBLE
43211: LD_VAR 0 8
43215: DEC
43216: ST_TO_ADDR
43217: LD_VAR 0 9
43221: PUSH
43222: FOR_TO
43223: IFFALSE 43324
// for _y = min_y to max_y do
43225: LD_ADDR_VAR 0 6
43229: PUSH
43230: DOUBLE
43231: LD_VAR 0 7
43235: DEC
43236: ST_TO_ADDR
43237: LD_VAR 0 10
43241: PUSH
43242: FOR_TO
43243: IFFALSE 43320
// begin if not ValidHex ( _x , _y ) then
43245: LD_VAR 0 5
43249: PPUSH
43250: LD_VAR 0 6
43254: PPUSH
43255: CALL_OW 488
43259: NOT
43260: IFFALSE 43264
// continue ;
43262: GO 43242
// if GetResourceTypeXY ( _x , _y ) then
43264: LD_VAR 0 5
43268: PPUSH
43269: LD_VAR 0 6
43273: PPUSH
43274: CALL_OW 283
43278: IFFALSE 43318
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43280: LD_ADDR_VAR 0 4
43284: PUSH
43285: LD_VAR 0 4
43289: PPUSH
43290: LD_VAR 0 4
43294: PUSH
43295: LD_INT 1
43297: PLUS
43298: PPUSH
43299: LD_VAR 0 5
43303: PUSH
43304: LD_VAR 0 6
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PPUSH
43313: CALL_OW 1
43317: ST_TO_ADDR
// end ;
43318: GO 43242
43320: POP
43321: POP
43322: GO 43222
43324: POP
43325: POP
// end ;
43326: LD_VAR 0 4
43330: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43331: LD_INT 0
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
// if not units then
43341: LD_VAR 0 1
43345: NOT
43346: IFFALSE 43350
// exit ;
43348: GO 43878
// result := UnitFilter ( units , [ f_ok ] ) ;
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_VAR 0 1
43359: PPUSH
43360: LD_INT 50
43362: PUSH
43363: EMPTY
43364: LIST
43365: PPUSH
43366: CALL_OW 72
43370: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43371: LD_ADDR_VAR 0 8
43375: PUSH
43376: LD_VAR 0 1
43380: PUSH
43381: LD_INT 1
43383: ARRAY
43384: PPUSH
43385: CALL_OW 255
43389: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43390: LD_ADDR_VAR 0 10
43394: PUSH
43395: LD_INT 29
43397: PUSH
43398: LD_INT 91
43400: PUSH
43401: LD_INT 49
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// if not result then
43409: LD_VAR 0 3
43413: NOT
43414: IFFALSE 43418
// exit ;
43416: GO 43878
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43418: LD_ADDR_VAR 0 5
43422: PUSH
43423: LD_INT 81
43425: PUSH
43426: LD_VAR 0 8
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PPUSH
43435: CALL_OW 69
43439: ST_TO_ADDR
// for i in result do
43440: LD_ADDR_VAR 0 4
43444: PUSH
43445: LD_VAR 0 3
43449: PUSH
43450: FOR_IN
43451: IFFALSE 43876
// begin tag := GetTag ( i ) + 1 ;
43453: LD_ADDR_VAR 0 9
43457: PUSH
43458: LD_VAR 0 4
43462: PPUSH
43463: CALL_OW 110
43467: PUSH
43468: LD_INT 1
43470: PLUS
43471: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43472: LD_ADDR_VAR 0 7
43476: PUSH
43477: LD_VAR 0 4
43481: PPUSH
43482: CALL_OW 250
43486: PPUSH
43487: LD_VAR 0 4
43491: PPUSH
43492: CALL_OW 251
43496: PPUSH
43497: LD_INT 4
43499: PPUSH
43500: CALL 43073 0 3
43504: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43505: LD_VAR 0 4
43509: PPUSH
43510: CALL_OW 247
43514: PUSH
43515: LD_INT 2
43517: EQUAL
43518: PUSH
43519: LD_VAR 0 7
43523: PUSH
43524: LD_INT 2
43526: GREATER
43527: AND
43528: PUSH
43529: LD_VAR 0 4
43533: PPUSH
43534: CALL_OW 264
43538: PUSH
43539: LD_VAR 0 10
43543: IN
43544: NOT
43545: AND
43546: IFFALSE 43585
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43548: LD_VAR 0 4
43552: PPUSH
43553: LD_VAR 0 7
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: PPUSH
43566: LD_VAR 0 7
43570: PUSH
43571: LD_INT 1
43573: ARRAY
43574: PUSH
43575: LD_INT 2
43577: ARRAY
43578: PPUSH
43579: CALL_OW 116
43583: GO 43874
// if path > tag then
43585: LD_VAR 0 2
43589: PUSH
43590: LD_VAR 0 9
43594: GREATER
43595: IFFALSE 43803
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43597: LD_ADDR_VAR 0 6
43601: PUSH
43602: LD_VAR 0 5
43606: PPUSH
43607: LD_INT 91
43609: PUSH
43610: LD_VAR 0 4
43614: PUSH
43615: LD_INT 8
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: PPUSH
43623: CALL_OW 72
43627: ST_TO_ADDR
// if nearEnemy then
43628: LD_VAR 0 6
43632: IFFALSE 43701
// begin if GetWeapon ( i ) = ru_time_lapser then
43634: LD_VAR 0 4
43638: PPUSH
43639: CALL_OW 264
43643: PUSH
43644: LD_INT 49
43646: EQUAL
43647: IFFALSE 43675
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43649: LD_VAR 0 4
43653: PPUSH
43654: LD_VAR 0 6
43658: PPUSH
43659: LD_VAR 0 4
43663: PPUSH
43664: CALL_OW 74
43668: PPUSH
43669: CALL_OW 112
43673: GO 43699
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43675: LD_VAR 0 4
43679: PPUSH
43680: LD_VAR 0 6
43684: PPUSH
43685: LD_VAR 0 4
43689: PPUSH
43690: CALL_OW 74
43694: PPUSH
43695: CALL 44949 0 2
// end else
43699: GO 43801
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43701: LD_VAR 0 4
43705: PPUSH
43706: LD_VAR 0 2
43710: PUSH
43711: LD_VAR 0 9
43715: ARRAY
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: PPUSH
43721: LD_VAR 0 2
43725: PUSH
43726: LD_VAR 0 9
43730: ARRAY
43731: PUSH
43732: LD_INT 2
43734: ARRAY
43735: PPUSH
43736: CALL_OW 297
43740: PUSH
43741: LD_INT 6
43743: GREATER
43744: IFFALSE 43787
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43746: LD_VAR 0 4
43750: PPUSH
43751: LD_VAR 0 2
43755: PUSH
43756: LD_VAR 0 9
43760: ARRAY
43761: PUSH
43762: LD_INT 1
43764: ARRAY
43765: PPUSH
43766: LD_VAR 0 2
43770: PUSH
43771: LD_VAR 0 9
43775: ARRAY
43776: PUSH
43777: LD_INT 2
43779: ARRAY
43780: PPUSH
43781: CALL_OW 114
43785: GO 43801
// SetTag ( i , tag ) ;
43787: LD_VAR 0 4
43791: PPUSH
43792: LD_VAR 0 9
43796: PPUSH
43797: CALL_OW 109
// end else
43801: GO 43874
// if enemy then
43803: LD_VAR 0 5
43807: IFFALSE 43874
// begin if GetWeapon ( i ) = ru_time_lapser then
43809: LD_VAR 0 4
43813: PPUSH
43814: CALL_OW 264
43818: PUSH
43819: LD_INT 49
43821: EQUAL
43822: IFFALSE 43850
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43824: LD_VAR 0 4
43828: PPUSH
43829: LD_VAR 0 5
43833: PPUSH
43834: LD_VAR 0 4
43838: PPUSH
43839: CALL_OW 74
43843: PPUSH
43844: CALL_OW 112
43848: GO 43874
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43850: LD_VAR 0 4
43854: PPUSH
43855: LD_VAR 0 5
43859: PPUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: CALL_OW 74
43869: PPUSH
43870: CALL 44949 0 2
// end ; end ;
43874: GO 43450
43876: POP
43877: POP
// end ;
43878: LD_VAR 0 3
43882: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43883: LD_INT 0
43885: PPUSH
43886: PPUSH
43887: PPUSH
// if not unit or IsInUnit ( unit ) then
43888: LD_VAR 0 1
43892: NOT
43893: PUSH
43894: LD_VAR 0 1
43898: PPUSH
43899: CALL_OW 310
43903: OR
43904: IFFALSE 43908
// exit ;
43906: GO 43999
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43908: LD_ADDR_VAR 0 4
43912: PUSH
43913: LD_VAR 0 1
43917: PPUSH
43918: CALL_OW 250
43922: PPUSH
43923: LD_VAR 0 2
43927: PPUSH
43928: LD_INT 1
43930: PPUSH
43931: CALL_OW 272
43935: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43936: LD_ADDR_VAR 0 5
43940: PUSH
43941: LD_VAR 0 1
43945: PPUSH
43946: CALL_OW 251
43950: PPUSH
43951: LD_VAR 0 2
43955: PPUSH
43956: LD_INT 1
43958: PPUSH
43959: CALL_OW 273
43963: ST_TO_ADDR
// if ValidHex ( x , y ) then
43964: LD_VAR 0 4
43968: PPUSH
43969: LD_VAR 0 5
43973: PPUSH
43974: CALL_OW 488
43978: IFFALSE 43999
// ComTurnXY ( unit , x , y ) ;
43980: LD_VAR 0 1
43984: PPUSH
43985: LD_VAR 0 4
43989: PPUSH
43990: LD_VAR 0 5
43994: PPUSH
43995: CALL_OW 118
// end ;
43999: LD_VAR 0 3
44003: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44004: LD_INT 0
44006: PPUSH
44007: PPUSH
// result := false ;
44008: LD_ADDR_VAR 0 3
44012: PUSH
44013: LD_INT 0
44015: ST_TO_ADDR
// if not units then
44016: LD_VAR 0 2
44020: NOT
44021: IFFALSE 44025
// exit ;
44023: GO 44070
// for i in units do
44025: LD_ADDR_VAR 0 4
44029: PUSH
44030: LD_VAR 0 2
44034: PUSH
44035: FOR_IN
44036: IFFALSE 44068
// if See ( side , i ) then
44038: LD_VAR 0 1
44042: PPUSH
44043: LD_VAR 0 4
44047: PPUSH
44048: CALL_OW 292
44052: IFFALSE 44066
// begin result := true ;
44054: LD_ADDR_VAR 0 3
44058: PUSH
44059: LD_INT 1
44061: ST_TO_ADDR
// exit ;
44062: POP
44063: POP
44064: GO 44070
// end ;
44066: GO 44035
44068: POP
44069: POP
// end ;
44070: LD_VAR 0 3
44074: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44075: LD_INT 0
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
// if not unit or not points then
44081: LD_VAR 0 1
44085: NOT
44086: PUSH
44087: LD_VAR 0 2
44091: NOT
44092: OR
44093: IFFALSE 44097
// exit ;
44095: GO 44187
// dist := 99999 ;
44097: LD_ADDR_VAR 0 5
44101: PUSH
44102: LD_INT 99999
44104: ST_TO_ADDR
// for i in points do
44105: LD_ADDR_VAR 0 4
44109: PUSH
44110: LD_VAR 0 2
44114: PUSH
44115: FOR_IN
44116: IFFALSE 44185
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44118: LD_ADDR_VAR 0 6
44122: PUSH
44123: LD_VAR 0 1
44127: PPUSH
44128: LD_VAR 0 4
44132: PUSH
44133: LD_INT 1
44135: ARRAY
44136: PPUSH
44137: LD_VAR 0 4
44141: PUSH
44142: LD_INT 2
44144: ARRAY
44145: PPUSH
44146: CALL_OW 297
44150: ST_TO_ADDR
// if tmpDist < dist then
44151: LD_VAR 0 6
44155: PUSH
44156: LD_VAR 0 5
44160: LESS
44161: IFFALSE 44183
// begin result := i ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_VAR 0 4
44172: ST_TO_ADDR
// dist := tmpDist ;
44173: LD_ADDR_VAR 0 5
44177: PUSH
44178: LD_VAR 0 6
44182: ST_TO_ADDR
// end ; end ;
44183: GO 44115
44185: POP
44186: POP
// end ;
44187: LD_VAR 0 3
44191: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44192: LD_INT 0
44194: PPUSH
// uc_side := side ;
44195: LD_ADDR_OWVAR 20
44199: PUSH
44200: LD_VAR 0 1
44204: ST_TO_ADDR
// uc_nation := 3 ;
44205: LD_ADDR_OWVAR 21
44209: PUSH
44210: LD_INT 3
44212: ST_TO_ADDR
// vc_chassis := 25 ;
44213: LD_ADDR_OWVAR 37
44217: PUSH
44218: LD_INT 25
44220: ST_TO_ADDR
// vc_engine := engine_siberite ;
44221: LD_ADDR_OWVAR 39
44225: PUSH
44226: LD_INT 3
44228: ST_TO_ADDR
// vc_control := control_computer ;
44229: LD_ADDR_OWVAR 38
44233: PUSH
44234: LD_INT 3
44236: ST_TO_ADDR
// vc_weapon := 59 ;
44237: LD_ADDR_OWVAR 40
44241: PUSH
44242: LD_INT 59
44244: ST_TO_ADDR
// result := CreateVehicle ;
44245: LD_ADDR_VAR 0 5
44249: PUSH
44250: CALL_OW 45
44254: ST_TO_ADDR
// SetDir ( result , d ) ;
44255: LD_VAR 0 5
44259: PPUSH
44260: LD_VAR 0 4
44264: PPUSH
44265: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44269: LD_VAR 0 5
44273: PPUSH
44274: LD_VAR 0 2
44278: PPUSH
44279: LD_VAR 0 3
44283: PPUSH
44284: LD_INT 0
44286: PPUSH
44287: CALL_OW 48
// end ;
44291: LD_VAR 0 5
44295: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44296: LD_INT 0
44298: PPUSH
44299: PPUSH
44300: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44301: LD_ADDR_VAR 0 2
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44324: LD_VAR 0 1
44328: NOT
44329: PUSH
44330: LD_VAR 0 1
44334: PPUSH
44335: CALL_OW 264
44339: PUSH
44340: LD_INT 12
44342: PUSH
44343: LD_INT 51
44345: PUSH
44346: LD_INT 32
44348: PUSH
44349: LD_INT 89
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: IN
44358: NOT
44359: OR
44360: IFFALSE 44364
// exit ;
44362: GO 44462
// for i := 1 to 3 do
44364: LD_ADDR_VAR 0 3
44368: PUSH
44369: DOUBLE
44370: LD_INT 1
44372: DEC
44373: ST_TO_ADDR
44374: LD_INT 3
44376: PUSH
44377: FOR_TO
44378: IFFALSE 44460
// begin tmp := GetCargo ( cargo , i ) ;
44380: LD_ADDR_VAR 0 4
44384: PUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: LD_VAR 0 3
44394: PPUSH
44395: CALL_OW 289
44399: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44400: LD_ADDR_VAR 0 2
44404: PUSH
44405: LD_VAR 0 2
44409: PPUSH
44410: LD_VAR 0 3
44414: PPUSH
44415: LD_VAR 0 4
44419: PPUSH
44420: CALL_OW 1
44424: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44425: LD_ADDR_VAR 0 2
44429: PUSH
44430: LD_VAR 0 2
44434: PPUSH
44435: LD_INT 4
44437: PPUSH
44438: LD_VAR 0 2
44442: PUSH
44443: LD_INT 4
44445: ARRAY
44446: PUSH
44447: LD_VAR 0 4
44451: PLUS
44452: PPUSH
44453: CALL_OW 1
44457: ST_TO_ADDR
// end ;
44458: GO 44377
44460: POP
44461: POP
// end ;
44462: LD_VAR 0 2
44466: RET
// export function Length ( array ) ; begin
44467: LD_INT 0
44469: PPUSH
// result := array + 0 ;
44470: LD_ADDR_VAR 0 2
44474: PUSH
44475: LD_VAR 0 1
44479: PUSH
44480: LD_INT 0
44482: PLUS
44483: ST_TO_ADDR
// end ;
44484: LD_VAR 0 2
44488: RET
// export function PrepareArray ( array ) ; begin
44489: LD_INT 0
44491: PPUSH
// result := array diff 0 ;
44492: LD_ADDR_VAR 0 2
44496: PUSH
44497: LD_VAR 0 1
44501: PUSH
44502: LD_INT 0
44504: DIFF
44505: ST_TO_ADDR
// if not result [ 1 ] then
44506: LD_VAR 0 2
44510: PUSH
44511: LD_INT 1
44513: ARRAY
44514: NOT
44515: IFFALSE 44535
// result := Delete ( result , 1 ) ;
44517: LD_ADDR_VAR 0 2
44521: PUSH
44522: LD_VAR 0 2
44526: PPUSH
44527: LD_INT 1
44529: PPUSH
44530: CALL_OW 3
44534: ST_TO_ADDR
// end ;
44535: LD_VAR 0 2
44539: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
// sibRocketRange := 25 ;
44546: LD_ADDR_VAR 0 6
44550: PUSH
44551: LD_INT 25
44553: ST_TO_ADDR
// result := false ;
44554: LD_ADDR_VAR 0 4
44558: PUSH
44559: LD_INT 0
44561: ST_TO_ADDR
// for i := 0 to 5 do
44562: LD_ADDR_VAR 0 5
44566: PUSH
44567: DOUBLE
44568: LD_INT 0
44570: DEC
44571: ST_TO_ADDR
44572: LD_INT 5
44574: PUSH
44575: FOR_TO
44576: IFFALSE 44643
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44578: LD_VAR 0 1
44582: PPUSH
44583: LD_VAR 0 5
44587: PPUSH
44588: LD_VAR 0 6
44592: PPUSH
44593: CALL_OW 272
44597: PPUSH
44598: LD_VAR 0 2
44602: PPUSH
44603: LD_VAR 0 5
44607: PPUSH
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 273
44617: PPUSH
44618: LD_VAR 0 3
44622: PPUSH
44623: CALL_OW 309
44627: IFFALSE 44641
// begin result := true ;
44629: LD_ADDR_VAR 0 4
44633: PUSH
44634: LD_INT 1
44636: ST_TO_ADDR
// exit ;
44637: POP
44638: POP
44639: GO 44645
// end ;
44641: GO 44575
44643: POP
44644: POP
// end ;
44645: LD_VAR 0 4
44649: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44650: LD_INT 0
44652: PPUSH
44653: PPUSH
44654: PPUSH
// if btype = b_depot then
44655: LD_VAR 0 2
44659: PUSH
44660: LD_INT 0
44662: EQUAL
44663: IFFALSE 44675
// begin result := true ;
44665: LD_ADDR_VAR 0 3
44669: PUSH
44670: LD_INT 1
44672: ST_TO_ADDR
// exit ;
44673: GO 44791
// end ; pom := GetBase ( depot ) ;
44675: LD_ADDR_VAR 0 4
44679: PUSH
44680: LD_VAR 0 1
44684: PPUSH
44685: CALL_OW 274
44689: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44690: LD_ADDR_VAR 0 5
44694: PUSH
44695: LD_VAR 0 2
44699: PPUSH
44700: LD_VAR 0 1
44704: PPUSH
44705: CALL_OW 248
44709: PPUSH
44710: CALL_OW 450
44714: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44715: LD_ADDR_VAR 0 3
44719: PUSH
44720: LD_VAR 0 4
44724: PPUSH
44725: LD_INT 1
44727: PPUSH
44728: CALL_OW 275
44732: PUSH
44733: LD_VAR 0 5
44737: PUSH
44738: LD_INT 1
44740: ARRAY
44741: GREATEREQUAL
44742: PUSH
44743: LD_VAR 0 4
44747: PPUSH
44748: LD_INT 2
44750: PPUSH
44751: CALL_OW 275
44755: PUSH
44756: LD_VAR 0 5
44760: PUSH
44761: LD_INT 2
44763: ARRAY
44764: GREATEREQUAL
44765: AND
44766: PUSH
44767: LD_VAR 0 4
44771: PPUSH
44772: LD_INT 3
44774: PPUSH
44775: CALL_OW 275
44779: PUSH
44780: LD_VAR 0 5
44784: PUSH
44785: LD_INT 3
44787: ARRAY
44788: GREATEREQUAL
44789: AND
44790: ST_TO_ADDR
// end ;
44791: LD_VAR 0 3
44795: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44796: LD_INT 0
44798: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44799: LD_VAR 0 1
44803: PPUSH
44804: LD_VAR 0 2
44808: PPUSH
44809: LD_INT 0
44811: PPUSH
44812: LD_INT 0
44814: PPUSH
44815: LD_INT 1
44817: PPUSH
44818: LD_INT 0
44820: PPUSH
44821: CALL_OW 587
// end ;
44825: LD_VAR 0 3
44829: RET
// export function CenterOnNow ( unit ) ; begin
44830: LD_INT 0
44832: PPUSH
// result := IsInUnit ( unit ) ;
44833: LD_ADDR_VAR 0 2
44837: PUSH
44838: LD_VAR 0 1
44842: PPUSH
44843: CALL_OW 310
44847: ST_TO_ADDR
// if not result then
44848: LD_VAR 0 2
44852: NOT
44853: IFFALSE 44865
// result := unit ;
44855: LD_ADDR_VAR 0 2
44859: PUSH
44860: LD_VAR 0 1
44864: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44865: LD_VAR 0 1
44869: PPUSH
44870: CALL_OW 87
// end ;
44874: LD_VAR 0 2
44878: RET
// export function ComMoveHex ( unit , hex ) ; begin
44879: LD_INT 0
44881: PPUSH
// if not hex then
44882: LD_VAR 0 2
44886: NOT
44887: IFFALSE 44891
// exit ;
44889: GO 44944
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44891: LD_VAR 0 2
44895: PUSH
44896: LD_INT 1
44898: ARRAY
44899: PPUSH
44900: LD_VAR 0 2
44904: PUSH
44905: LD_INT 2
44907: ARRAY
44908: PPUSH
44909: CALL_OW 428
44913: IFFALSE 44917
// exit ;
44915: GO 44944
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44917: LD_VAR 0 1
44921: PPUSH
44922: LD_VAR 0 2
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: PPUSH
44931: LD_VAR 0 2
44935: PUSH
44936: LD_INT 2
44938: ARRAY
44939: PPUSH
44940: CALL_OW 111
// end ;
44944: LD_VAR 0 3
44948: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44949: LD_INT 0
44951: PPUSH
44952: PPUSH
44953: PPUSH
// if not unit or not enemy then
44954: LD_VAR 0 1
44958: NOT
44959: PUSH
44960: LD_VAR 0 2
44964: NOT
44965: OR
44966: IFFALSE 44970
// exit ;
44968: GO 45094
// x := GetX ( enemy ) ;
44970: LD_ADDR_VAR 0 4
44974: PUSH
44975: LD_VAR 0 2
44979: PPUSH
44980: CALL_OW 250
44984: ST_TO_ADDR
// y := GetY ( enemy ) ;
44985: LD_ADDR_VAR 0 5
44989: PUSH
44990: LD_VAR 0 2
44994: PPUSH
44995: CALL_OW 251
44999: ST_TO_ADDR
// if ValidHex ( x , y ) then
45000: LD_VAR 0 4
45004: PPUSH
45005: LD_VAR 0 5
45009: PPUSH
45010: CALL_OW 488
45014: IFFALSE 45094
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45016: LD_VAR 0 2
45020: PPUSH
45021: CALL_OW 247
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: IN
45036: PUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 255
45046: PPUSH
45047: LD_VAR 0 2
45051: PPUSH
45052: CALL_OW 292
45056: OR
45057: IFFALSE 45075
// ComAttackUnit ( unit , enemy ) else
45059: LD_VAR 0 1
45063: PPUSH
45064: LD_VAR 0 2
45068: PPUSH
45069: CALL_OW 115
45073: GO 45094
// ComAgressiveMove ( unit , x , y ) ;
45075: LD_VAR 0 1
45079: PPUSH
45080: LD_VAR 0 4
45084: PPUSH
45085: LD_VAR 0 5
45089: PPUSH
45090: CALL_OW 114
// end ;
45094: LD_VAR 0 3
45098: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45099: LD_INT 0
45101: PPUSH
45102: PPUSH
45103: PPUSH
// list := AreaToList ( area , 0 ) ;
45104: LD_ADDR_VAR 0 5
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: LD_INT 0
45116: PPUSH
45117: CALL_OW 517
45121: ST_TO_ADDR
// if not list then
45122: LD_VAR 0 5
45126: NOT
45127: IFFALSE 45131
// exit ;
45129: GO 45261
// if all then
45131: LD_VAR 0 2
45135: IFFALSE 45223
// begin for i := 1 to list [ 1 ] do
45137: LD_ADDR_VAR 0 4
45141: PUSH
45142: DOUBLE
45143: LD_INT 1
45145: DEC
45146: ST_TO_ADDR
45147: LD_VAR 0 5
45151: PUSH
45152: LD_INT 1
45154: ARRAY
45155: PUSH
45156: FOR_TO
45157: IFFALSE 45219
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_VAR 0 3
45168: PPUSH
45169: LD_VAR 0 3
45173: PUSH
45174: LD_INT 1
45176: PLUS
45177: PPUSH
45178: LD_VAR 0 5
45182: PUSH
45183: LD_INT 1
45185: ARRAY
45186: PUSH
45187: LD_VAR 0 4
45191: ARRAY
45192: PUSH
45193: LD_VAR 0 5
45197: PUSH
45198: LD_INT 2
45200: ARRAY
45201: PUSH
45202: LD_VAR 0 4
45206: ARRAY
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PPUSH
45212: CALL_OW 1
45216: ST_TO_ADDR
45217: GO 45156
45219: POP
45220: POP
// exit ;
45221: GO 45261
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45223: LD_ADDR_VAR 0 3
45227: PUSH
45228: LD_VAR 0 5
45232: PUSH
45233: LD_INT 1
45235: ARRAY
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PUSH
45241: LD_VAR 0 5
45245: PUSH
45246: LD_INT 2
45248: ARRAY
45249: PUSH
45250: LD_INT 1
45252: ARRAY
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: ST_TO_ADDR
// end ;
45261: LD_VAR 0 3
45265: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45266: LD_INT 0
45268: PPUSH
45269: PPUSH
// list := AreaToList ( area , 0 ) ;
45270: LD_ADDR_VAR 0 4
45274: PUSH
45275: LD_VAR 0 1
45279: PPUSH
45280: LD_INT 0
45282: PPUSH
45283: CALL_OW 517
45287: ST_TO_ADDR
// if not list then
45288: LD_VAR 0 4
45292: NOT
45293: IFFALSE 45297
// exit ;
45295: GO 45338
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45297: LD_ADDR_VAR 0 3
45301: PUSH
45302: LD_VAR 0 4
45306: PUSH
45307: LD_INT 1
45309: ARRAY
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PUSH
45315: LD_VAR 0 4
45319: PUSH
45320: LD_INT 2
45322: ARRAY
45323: PUSH
45324: LD_INT 1
45326: ARRAY
45327: PUSH
45328: LD_VAR 0 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: ST_TO_ADDR
// end ;
45338: LD_VAR 0 3
45342: RET
// export function First ( array ) ; begin
45343: LD_INT 0
45345: PPUSH
// if not array then
45346: LD_VAR 0 1
45350: NOT
45351: IFFALSE 45355
// exit ;
45353: GO 45369
// result := array [ 1 ] ;
45355: LD_ADDR_VAR 0 2
45359: PUSH
45360: LD_VAR 0 1
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: ST_TO_ADDR
// end ;
45369: LD_VAR 0 2
45373: RET
// export function Last ( array ) ; begin
45374: LD_INT 0
45376: PPUSH
// if not array then
45377: LD_VAR 0 1
45381: NOT
45382: IFFALSE 45386
// exit ;
45384: GO 45402
// result := array [ array ] ;
45386: LD_ADDR_VAR 0 2
45390: PUSH
45391: LD_VAR 0 1
45395: PUSH
45396: LD_VAR 0 1
45400: ARRAY
45401: ST_TO_ADDR
// end ;
45402: LD_VAR 0 2
45406: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45407: LD_INT 0
45409: PPUSH
45410: PPUSH
// result := [ ] ;
45411: LD_ADDR_VAR 0 5
45415: PUSH
45416: EMPTY
45417: ST_TO_ADDR
// if not array then
45418: LD_VAR 0 1
45422: NOT
45423: IFFALSE 45427
// exit ;
45425: GO 45539
// for i := 1 to array do
45427: LD_ADDR_VAR 0 6
45431: PUSH
45432: DOUBLE
45433: LD_INT 1
45435: DEC
45436: ST_TO_ADDR
45437: LD_VAR 0 1
45441: PUSH
45442: FOR_TO
45443: IFFALSE 45537
// if array [ i ] [ index ] = value then
45445: LD_VAR 0 1
45449: PUSH
45450: LD_VAR 0 6
45454: ARRAY
45455: PUSH
45456: LD_VAR 0 2
45460: ARRAY
45461: PUSH
45462: LD_VAR 0 3
45466: EQUAL
45467: IFFALSE 45535
// begin if indexColumn then
45469: LD_VAR 0 4
45473: IFFALSE 45509
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45475: LD_ADDR_VAR 0 5
45479: PUSH
45480: LD_VAR 0 5
45484: PPUSH
45485: LD_VAR 0 1
45489: PUSH
45490: LD_VAR 0 6
45494: ARRAY
45495: PUSH
45496: LD_VAR 0 4
45500: ARRAY
45501: PPUSH
45502: CALL 40721 0 2
45506: ST_TO_ADDR
45507: GO 45535
// result := Join ( result , array [ i ] ) ;
45509: LD_ADDR_VAR 0 5
45513: PUSH
45514: LD_VAR 0 5
45518: PPUSH
45519: LD_VAR 0 1
45523: PUSH
45524: LD_VAR 0 6
45528: ARRAY
45529: PPUSH
45530: CALL 40721 0 2
45534: ST_TO_ADDR
// end ;
45535: GO 45442
45537: POP
45538: POP
// end ;
45539: LD_VAR 0 5
45543: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45544: LD_INT 0
45546: PPUSH
// if not vehicles or not parkingPoint then
45547: LD_VAR 0 1
45551: NOT
45552: PUSH
45553: LD_VAR 0 2
45557: NOT
45558: OR
45559: IFFALSE 45563
// exit ;
45561: GO 45661
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45563: LD_ADDR_VAR 0 1
45567: PUSH
45568: LD_VAR 0 1
45572: PPUSH
45573: LD_INT 50
45575: PUSH
45576: EMPTY
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: PUSH
45582: LD_INT 92
45584: PUSH
45585: LD_VAR 0 2
45589: PUSH
45590: LD_INT 1
45592: ARRAY
45593: PUSH
45594: LD_VAR 0 2
45598: PUSH
45599: LD_INT 2
45601: ARRAY
45602: PUSH
45603: LD_INT 8
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PPUSH
45620: CALL_OW 72
45624: ST_TO_ADDR
// if not vehicles then
45625: LD_VAR 0 1
45629: NOT
45630: IFFALSE 45634
// exit ;
45632: GO 45661
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45634: LD_VAR 0 1
45638: PPUSH
45639: LD_VAR 0 2
45643: PUSH
45644: LD_INT 1
45646: ARRAY
45647: PPUSH
45648: LD_VAR 0 2
45652: PUSH
45653: LD_INT 2
45655: ARRAY
45656: PPUSH
45657: CALL_OW 111
// end ;
45661: LD_VAR 0 3
45665: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45666: LD_INT 0
45668: PPUSH
45669: PPUSH
45670: PPUSH
// if not side or not area then
45671: LD_VAR 0 1
45675: NOT
45676: PUSH
45677: LD_VAR 0 2
45681: NOT
45682: OR
45683: IFFALSE 45687
// exit ;
45685: GO 45806
// tmp := AreaToList ( area , 0 ) ;
45687: LD_ADDR_VAR 0 5
45691: PUSH
45692: LD_VAR 0 2
45696: PPUSH
45697: LD_INT 0
45699: PPUSH
45700: CALL_OW 517
45704: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45705: LD_ADDR_VAR 0 4
45709: PUSH
45710: DOUBLE
45711: LD_INT 1
45713: DEC
45714: ST_TO_ADDR
45715: LD_VAR 0 5
45719: PUSH
45720: LD_INT 1
45722: ARRAY
45723: PUSH
45724: FOR_TO
45725: IFFALSE 45804
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45727: LD_VAR 0 5
45731: PUSH
45732: LD_INT 1
45734: ARRAY
45735: PUSH
45736: LD_VAR 0 4
45740: ARRAY
45741: PPUSH
45742: LD_VAR 0 5
45746: PUSH
45747: LD_INT 2
45749: ARRAY
45750: PUSH
45751: LD_VAR 0 4
45755: ARRAY
45756: PPUSH
45757: CALL_OW 351
45761: IFFALSE 45802
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45763: LD_VAR 0 5
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PUSH
45772: LD_VAR 0 4
45776: ARRAY
45777: PPUSH
45778: LD_VAR 0 5
45782: PUSH
45783: LD_INT 2
45785: ARRAY
45786: PUSH
45787: LD_VAR 0 4
45791: ARRAY
45792: PPUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: CALL_OW 244
// end ;
45802: GO 45724
45804: POP
45805: POP
// end ; end_of_file
45806: LD_VAR 0 3
45810: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45811: LD_INT 0
45813: PPUSH
45814: PPUSH
// disable ( mpActive ) ;
45815: LD_INT 100
45817: DISABLE_MARKED
// disable ( mpWin ) ;
45818: LD_INT 101
45820: DISABLE_MARKED
// disable ( mpLose ) ;
45821: LD_INT 102
45823: DISABLE_MARKED
// mpGameType := 0 ;
45824: LD_ADDR_EXP 1
45828: PUSH
45829: LD_INT 0
45831: ST_TO_ADDR
// mpGameSettings := [ ] ;
45832: LD_ADDR_EXP 4
45836: PUSH
45837: EMPTY
45838: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45839: LD_ADDR_EXP 2
45843: PUSH
45844: EMPTY
45845: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45846: LD_ADDR_EXP 3
45850: PUSH
45851: EMPTY
45852: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45853: LD_ADDR_EXP 27
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45868: LD_ADDR_EXP 10
45872: PUSH
45873: EMPTY
45874: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45875: LD_ADDR_EXP 11
45879: PUSH
45880: EMPTY
45881: ST_TO_ADDR
// mpDepots := [ ] ;
45882: LD_ADDR_EXP 12
45886: PUSH
45887: EMPTY
45888: ST_TO_ADDR
// mpBuildings := [ ] ;
45889: LD_ADDR_EXP 15
45893: PUSH
45894: EMPTY
45895: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45896: LD_ADDR_EXP 16
45900: PUSH
45901: EMPTY
45902: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45903: LD_ADDR_EXP 17
45907: PUSH
45908: EMPTY
45909: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45910: LD_ADDR_EXP 18
45914: PUSH
45915: EMPTY
45916: ST_TO_ADDR
// mpStartingResources := [ ] ;
45917: LD_ADDR_EXP 13
45921: PUSH
45922: EMPTY
45923: ST_TO_ADDR
// mpStartPos := [ ] ;
45924: LD_ADDR_EXP 19
45928: PUSH
45929: EMPTY
45930: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45931: LD_ADDR_EXP 20
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45940: LD_ADDR_EXP 21
45944: PUSH
45945: EMPTY
45946: ST_TO_ADDR
// mpApemans := [ ] ;
45947: LD_ADDR_EXP 28
45951: PUSH
45952: EMPTY
45953: ST_TO_ADDR
// mpApemansArea := [ ] ;
45954: LD_ADDR_EXP 29
45958: PUSH
45959: EMPTY
45960: ST_TO_ADDR
// mpRespawn := [ ] ;
45961: LD_ADDR_EXP 31
45965: PUSH
45966: EMPTY
45967: ST_TO_ADDR
// mpKingArea := 0 ;
45968: LD_ADDR_EXP 32
45972: PUSH
45973: LD_INT 0
45975: ST_TO_ADDR
// mpPoints := [ ] ;
45976: LD_ADDR_EXP 33
45980: PUSH
45981: EMPTY
45982: ST_TO_ADDR
// mpVehicles := 0 ;
45983: LD_ADDR_EXP 34
45987: PUSH
45988: LD_INT 0
45990: ST_TO_ADDR
// mpShipments := 0 ;
45991: LD_ADDR_EXP 25
45995: PUSH
45996: LD_INT 0
45998: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45999: LD_ADDR_EXP 38
46003: PUSH
46004: EMPTY
46005: PUSH
46006: EMPTY
46007: PUSH
46008: EMPTY
46009: PUSH
46010: EMPTY
46011: PUSH
46012: EMPTY
46013: PUSH
46014: EMPTY
46015: PUSH
46016: EMPTY
46017: PUSH
46018: EMPTY
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46030: LD_ADDR_EXP 30
46034: PUSH
46035: EMPTY
46036: PUSH
46037: EMPTY
46038: PUSH
46039: EMPTY
46040: PUSH
46041: EMPTY
46042: PUSH
46043: EMPTY
46044: PUSH
46045: EMPTY
46046: PUSH
46047: EMPTY
46048: PUSH
46049: EMPTY
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: ST_TO_ADDR
// mpEmissions := 0 ;
46061: LD_ADDR_EXP 35
46065: PUSH
46066: LD_INT 0
46068: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46069: LD_ADDR_EXP 23
46073: PUSH
46074: LD_INT 3
46076: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46077: LD_ADDR_EXP 22
46081: PUSH
46082: LD_INT 15
46084: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46085: LD_ADDR_EXP 36
46089: PUSH
46090: LD_INT 0
46092: ST_TO_ADDR
// mpGameActive := false ;
46093: LD_ADDR_EXP 37
46097: PUSH
46098: LD_INT 0
46100: ST_TO_ADDR
// mpBlockRespThread := false ;
46101: LD_ADDR_EXP 39
46105: PUSH
46106: LD_INT 0
46108: ST_TO_ADDR
// for i := 1 to 32 do
46109: LD_ADDR_VAR 0 2
46113: PUSH
46114: DOUBLE
46115: LD_INT 1
46117: DEC
46118: ST_TO_ADDR
46119: LD_INT 32
46121: PUSH
46122: FOR_TO
46123: IFFALSE 46150
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46125: LD_ADDR_EXP 4
46129: PUSH
46130: LD_EXP 4
46134: PPUSH
46135: LD_VAR 0 2
46139: PPUSH
46140: LD_INT 0
46142: PPUSH
46143: CALL_OW 1
46147: ST_TO_ADDR
46148: GO 46122
46150: POP
46151: POP
// end ;
46152: LD_VAR 0 1
46156: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46157: LD_INT 0
46159: PPUSH
46160: PPUSH
46161: PPUSH
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
46167: PPUSH
46168: PPUSH
46169: PPUSH
46170: PPUSH
46171: PPUSH
46172: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46173: LD_ADDR_VAR 0 14
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// for i in gameTypes do
46192: LD_ADDR_VAR 0 2
46196: PUSH
46197: LD_VAR 0 14
46201: PUSH
46202: FOR_IN
46203: IFFALSE 46212
// disable ( i ) ;
46205: LD_VAR 0 2
46209: DISABLE_MARKED
46210: GO 46202
46212: POP
46213: POP
// if Multiplayer then
46214: LD_OWVAR 4
46218: IFFALSE 46402
// begin mpGameType := mp_game_type ;
46220: LD_ADDR_EXP 1
46224: PUSH
46225: LD_OWVAR 6
46229: ST_TO_ADDR
// your_side := mp_player_side ;
46230: LD_ADDR_OWVAR 2
46234: PUSH
46235: LD_OWVAR 7
46239: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46240: LD_ADDR_EXP 5
46244: PUSH
46245: LD_OWVAR 17
46249: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46250: LD_ADDR_EXP 6
46254: PUSH
46255: LD_OWVAR 15
46259: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46260: LD_ADDR_EXP 7
46264: PUSH
46265: LD_OWVAR 16
46269: ST_TO_ADDR
// mpTeams := mp_teams ;
46270: LD_ADDR_EXP 8
46274: PUSH
46275: LD_OWVAR 12
46279: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46280: LD_ADDR_VAR 0 2
46284: PUSH
46285: DOUBLE
46286: LD_INT 1
46288: DEC
46289: ST_TO_ADDR
46290: LD_EXP 2
46294: PPUSH
46295: CALL 5112 0 1
46299: PUSH
46300: FOR_TO
46301: IFFALSE 46377
// begin setting := mpGameSettingsKeys [ i ] ;
46303: LD_ADDR_VAR 0 12
46307: PUSH
46308: LD_EXP 2
46312: PUSH
46313: LD_VAR 0 2
46317: ARRAY
46318: ST_TO_ADDR
// if setting then
46319: LD_VAR 0 12
46323: IFFALSE 46375
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46325: LD_ADDR_EXP 4
46329: PUSH
46330: LD_EXP 4
46334: PPUSH
46335: LD_VAR 0 2
46339: PPUSH
46340: LD_EXP 3
46344: PUSH
46345: LD_VAR 0 2
46349: ARRAY
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_INT 1
46358: MINUS
46359: PPUSH
46360: CALL_OW 426
46364: PUSH
46365: LD_INT 1
46367: PLUS
46368: ARRAY
46369: PPUSH
46370: CALL_OW 1
46374: ST_TO_ADDR
// end ;
46375: GO 46300
46377: POP
46378: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46379: LD_ADDR_EXP 9
46383: PUSH
46384: LD_EXP 6
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: DIFF
46395: PUSH
46396: LD_INT 1
46398: GREATER
46399: ST_TO_ADDR
// end else
46400: GO 46402
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46402: LD_EXP 1
46406: PPUSH
46407: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46411: LD_EXP 16
46415: PPUSH
46416: CALL 5112 0 1
46420: IFFALSE 46451
// begin for i in mpMarkedAreas do
46422: LD_ADDR_VAR 0 2
46426: PUSH
46427: LD_EXP 16
46431: PUSH
46432: FOR_IN
46433: IFFALSE 46449
// SetAreaMapShow ( i , 0 ) ;
46435: LD_VAR 0 2
46439: PPUSH
46440: LD_INT 0
46442: PPUSH
46443: CALL_OW 424
46447: GO 46432
46449: POP
46450: POP
// end ; for i := 1 to 8 do
46451: LD_ADDR_VAR 0 2
46455: PUSH
46456: DOUBLE
46457: LD_INT 1
46459: DEC
46460: ST_TO_ADDR
46461: LD_INT 8
46463: PUSH
46464: FOR_TO
46465: IFFALSE 47722
// begin if not mpSidePositions [ i ] then
46467: LD_EXP 5
46471: PUSH
46472: LD_VAR 0 2
46476: ARRAY
46477: NOT
46478: IFFALSE 46482
// continue ;
46480: GO 46464
// side := i ;
46482: LD_ADDR_VAR 0 7
46486: PUSH
46487: LD_VAR 0 2
46491: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46492: LD_ADDR_VAR 0 9
46496: PUSH
46497: LD_EXP 7
46501: PUSH
46502: LD_VAR 0 2
46506: ARRAY
46507: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46508: LD_ADDR_VAR 0 8
46512: PUSH
46513: LD_EXP 5
46517: PUSH
46518: LD_VAR 0 2
46522: ARRAY
46523: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46524: LD_EXP 10
46528: PPUSH
46529: CALL 5112 0 1
46533: IFFALSE 46610
// begin for j in mpOilDeposits [ pos ] do
46535: LD_ADDR_VAR 0 3
46539: PUSH
46540: LD_EXP 10
46544: PUSH
46545: LD_VAR 0 8
46549: ARRAY
46550: PUSH
46551: FOR_IN
46552: IFFALSE 46608
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46554: LD_VAR 0 3
46558: PUSH
46559: LD_INT 1
46561: ARRAY
46562: PPUSH
46563: LD_VAR 0 3
46567: PUSH
46568: LD_INT 2
46570: ARRAY
46571: PPUSH
46572: LD_INT 2
46574: PPUSH
46575: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46579: LD_VAR 0 3
46583: PUSH
46584: LD_INT 1
46586: ARRAY
46587: PPUSH
46588: LD_VAR 0 3
46592: PUSH
46593: LD_INT 2
46595: ARRAY
46596: PPUSH
46597: LD_VAR 0 7
46601: PPUSH
46602: CALL_OW 441
// end ;
46606: GO 46551
46608: POP
46609: POP
// end ; if Count ( mpSibDeposits ) then
46610: LD_EXP 11
46614: PPUSH
46615: CALL 5112 0 1
46619: IFFALSE 46696
// begin for j in mpSibDeposits [ pos ] do
46621: LD_ADDR_VAR 0 3
46625: PUSH
46626: LD_EXP 11
46630: PUSH
46631: LD_VAR 0 8
46635: ARRAY
46636: PUSH
46637: FOR_IN
46638: IFFALSE 46694
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46640: LD_VAR 0 3
46644: PUSH
46645: LD_INT 1
46647: ARRAY
46648: PPUSH
46649: LD_VAR 0 3
46653: PUSH
46654: LD_INT 2
46656: ARRAY
46657: PPUSH
46658: LD_INT 3
46660: PPUSH
46661: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46665: LD_VAR 0 3
46669: PUSH
46670: LD_INT 1
46672: ARRAY
46673: PPUSH
46674: LD_VAR 0 3
46678: PUSH
46679: LD_INT 2
46681: ARRAY
46682: PPUSH
46683: LD_VAR 0 7
46687: PPUSH
46688: CALL_OW 441
// end ;
46692: GO 46637
46694: POP
46695: POP
// end ; InitBc ;
46696: CALL_OW 21
// InitUc ;
46700: CALL_OW 18
// uc_side := side ;
46704: LD_ADDR_OWVAR 20
46708: PUSH
46709: LD_VAR 0 7
46713: ST_TO_ADDR
// uc_nation := nation ;
46714: LD_ADDR_OWVAR 21
46718: PUSH
46719: LD_VAR 0 9
46723: ST_TO_ADDR
// if Count ( mpDepots ) then
46724: LD_EXP 12
46728: PPUSH
46729: CALL 5112 0 1
46733: IFFALSE 46917
// begin if mpGameType = GameTypeSurvival then
46735: LD_EXP 1
46739: PUSH
46740: LD_INT 2
46742: EQUAL
46743: IFFALSE 46763
// begin bc_level := 10 ;
46745: LD_ADDR_OWVAR 43
46749: PUSH
46750: LD_INT 10
46752: ST_TO_ADDR
// bc_type := b_warehouse ;
46753: LD_ADDR_OWVAR 42
46757: PUSH
46758: LD_INT 1
46760: ST_TO_ADDR
// end else
46761: GO 46779
// begin bc_level := 0 ;
46763: LD_ADDR_OWVAR 43
46767: PUSH
46768: LD_INT 0
46770: ST_TO_ADDR
// bc_type := b_depot ;
46771: LD_ADDR_OWVAR 42
46775: PUSH
46776: LD_INT 0
46778: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46779: LD_ADDR_VAR 0 4
46783: PUSH
46784: LD_EXP 12
46788: PUSH
46789: LD_VAR 0 8
46793: ARRAY
46794: PUSH
46795: LD_INT 1
46797: ARRAY
46798: PPUSH
46799: LD_EXP 12
46803: PUSH
46804: LD_VAR 0 8
46808: ARRAY
46809: PUSH
46810: LD_INT 2
46812: ARRAY
46813: PPUSH
46814: LD_EXP 12
46818: PUSH
46819: LD_VAR 0 8
46823: ARRAY
46824: PUSH
46825: LD_INT 3
46827: ARRAY
46828: PPUSH
46829: CALL_OW 47
46833: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46834: LD_VAR 0 4
46838: PPUSH
46839: LD_STRING @
46841: PUSH
46842: LD_VAR 0 7
46846: STR
46847: PPUSH
46848: CALL_OW 500
// if Count ( mpStartingResources ) then
46852: LD_EXP 13
46856: PPUSH
46857: CALL 5112 0 1
46861: IFFALSE 46915
// begin for j := 1 to mpStartingResources do
46863: LD_ADDR_VAR 0 3
46867: PUSH
46868: DOUBLE
46869: LD_INT 1
46871: DEC
46872: ST_TO_ADDR
46873: LD_EXP 13
46877: PUSH
46878: FOR_TO
46879: IFFALSE 46913
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46881: LD_VAR 0 4
46885: PPUSH
46886: CALL_OW 274
46890: PPUSH
46891: LD_VAR 0 3
46895: PPUSH
46896: LD_EXP 13
46900: PUSH
46901: LD_VAR 0 3
46905: ARRAY
46906: PPUSH
46907: CALL_OW 277
46911: GO 46878
46913: POP
46914: POP
// end ; end else
46915: GO 47064
// if Count ( mpStartingResources ) then
46917: LD_EXP 13
46921: PPUSH
46922: CALL 5112 0 1
46926: IFFALSE 47064
// begin for j := 1 to mpStartingResources do
46928: LD_ADDR_VAR 0 3
46932: PUSH
46933: DOUBLE
46934: LD_INT 1
46936: DEC
46937: ST_TO_ADDR
46938: LD_EXP 13
46942: PUSH
46943: FOR_TO
46944: IFFALSE 47062
// begin resources := mpStartingResources [ j ] ;
46946: LD_ADDR_VAR 0 13
46950: PUSH
46951: LD_EXP 13
46955: PUSH
46956: LD_VAR 0 3
46960: ARRAY
46961: ST_TO_ADDR
// repeat if resources >= 50 then
46962: LD_VAR 0 13
46966: PUSH
46967: LD_INT 50
46969: GREATEREQUAL
46970: IFFALSE 47016
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46972: LD_VAR 0 3
46976: PPUSH
46977: LD_INT 5
46979: PPUSH
46980: LD_VAR 0 5
46984: PPUSH
46985: LD_VAR 0 6
46989: PPUSH
46990: LD_INT 4
46992: PPUSH
46993: LD_INT 0
46995: PPUSH
46996: CALL_OW 60
// resources := resources - 50 ;
47000: LD_ADDR_VAR 0 13
47004: PUSH
47005: LD_VAR 0 13
47009: PUSH
47010: LD_INT 50
47012: MINUS
47013: ST_TO_ADDR
// end else
47014: GO 47050
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
47016: LD_VAR 0 3
47020: PPUSH
47021: LD_VAR 0 13
47025: PUSH
47026: LD_INT 10
47028: DIV
47029: PPUSH
47030: LD_VAR 0 5
47034: PPUSH
47035: LD_VAR 0 6
47039: PPUSH
47040: LD_INT 4
47042: PPUSH
47043: LD_INT 0
47045: PPUSH
47046: CALL_OW 60
// until resources <= 0 ;
47050: LD_VAR 0 13
47054: PUSH
47055: LD_INT 0
47057: LESSEQUAL
47058: IFFALSE 46962
// end ;
47060: GO 46943
47062: POP
47063: POP
// end ; if Count ( mpBuildings ) then
47064: LD_EXP 15
47068: PPUSH
47069: CALL 5112 0 1
47073: IFFALSE 47151
// begin for j in mpBuildings [ pos ] do
47075: LD_ADDR_VAR 0 3
47079: PUSH
47080: LD_EXP 15
47084: PUSH
47085: LD_VAR 0 8
47089: ARRAY
47090: PUSH
47091: FOR_IN
47092: IFFALSE 47149
// begin bc_level := 0 ;
47094: LD_ADDR_OWVAR 43
47098: PUSH
47099: LD_INT 0
47101: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47102: LD_ADDR_OWVAR 42
47106: PUSH
47107: LD_VAR 0 3
47111: PUSH
47112: LD_INT 1
47114: ARRAY
47115: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47116: LD_VAR 0 3
47120: PUSH
47121: LD_INT 2
47123: ARRAY
47124: PPUSH
47125: LD_VAR 0 3
47129: PUSH
47130: LD_INT 3
47132: ARRAY
47133: PPUSH
47134: LD_VAR 0 3
47138: PUSH
47139: LD_INT 4
47141: ARRAY
47142: PPUSH
47143: CALL_OW 47
// end ;
47147: GO 47091
47149: POP
47150: POP
// end ; if mpBattleFlag > - 1 then
47151: LD_EXP 20
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: GREATER
47160: IFFALSE 47319
// begin x := mpStartPos [ pos ] [ 1 ] ;
47162: LD_ADDR_VAR 0 5
47166: PUSH
47167: LD_EXP 19
47171: PUSH
47172: LD_VAR 0 8
47176: ARRAY
47177: PUSH
47178: LD_INT 1
47180: ARRAY
47181: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47182: LD_ADDR_VAR 0 6
47186: PUSH
47187: LD_EXP 19
47191: PUSH
47192: LD_VAR 0 8
47196: ARRAY
47197: PUSH
47198: LD_INT 2
47200: ARRAY
47201: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47202: LD_VAR 0 5
47206: PPUSH
47207: LD_VAR 0 6
47211: PPUSH
47212: LD_INT 12
47214: PPUSH
47215: LD_INT 2
47217: PPUSH
47218: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47222: LD_ADDR_EXP 21
47226: PUSH
47227: LD_EXP 21
47231: PPUSH
47232: LD_VAR 0 7
47236: PPUSH
47237: LD_VAR 0 7
47241: PPUSH
47242: LD_VAR 0 5
47246: PPUSH
47247: LD_VAR 0 6
47251: PPUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 100
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 70
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: LD_INT 40
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 10
47284: PUSH
47285: LD_INT 25
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 20
47294: PUSH
47295: LD_INT 100
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: PPUSH
47309: CALL_OW 418
47313: PPUSH
47314: CALL_OW 1
47318: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47319: LD_EXP 24
47323: PUSH
47324: LD_INT 20
47326: PPUSH
47327: LD_VAR 0 7
47331: PPUSH
47332: CALL_OW 321
47336: PUSH
47337: LD_INT 1
47339: EQUAL
47340: AND
47341: IFFALSE 47358
// SetTech ( tech_SibDet , side , state_researched ) ;
47343: LD_INT 20
47345: PPUSH
47346: LD_VAR 0 7
47350: PPUSH
47351: LD_INT 2
47353: PPUSH
47354: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47358: LD_INT 24
47360: PPUSH
47361: LD_VAR 0 7
47365: PPUSH
47366: LD_INT 0
47368: PPUSH
47369: CALL_OW 322
// if mpSibBomb = 1 then
47373: LD_EXP 26
47377: PUSH
47378: LD_INT 1
47380: EQUAL
47381: IFFALSE 47400
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47383: LD_INT 25
47385: PPUSH
47386: LD_VAR 0 7
47390: PPUSH
47391: LD_INT 1
47393: PPUSH
47394: CALL_OW 322
// end else
47398: GO 47415
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47400: LD_INT 25
47402: PPUSH
47403: LD_VAR 0 7
47407: PPUSH
47408: LD_INT 0
47410: PPUSH
47411: CALL_OW 322
// end ; if mpVehicles then
47415: LD_EXP 34
47419: IFFALSE 47518
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47421: LD_ADDR_VAR 0 3
47425: PUSH
47426: LD_VAR 0 7
47430: PPUSH
47431: LD_VAR 0 9
47435: PPUSH
47436: LD_EXP 34
47440: PPUSH
47441: CALL 48632 0 3
47445: PUSH
47446: FOR_IN
47447: IFFALSE 47516
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47449: LD_VAR 0 3
47453: PPUSH
47454: LD_INT 0
47456: PPUSH
47457: LD_INT 5
47459: PPUSH
47460: CALL_OW 12
47464: PPUSH
47465: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47469: LD_VAR 0 3
47473: PPUSH
47474: LD_EXP 19
47478: PUSH
47479: LD_VAR 0 8
47483: ARRAY
47484: PUSH
47485: LD_INT 1
47487: ARRAY
47488: PPUSH
47489: LD_EXP 19
47493: PUSH
47494: LD_VAR 0 8
47498: ARRAY
47499: PUSH
47500: LD_INT 2
47502: ARRAY
47503: PPUSH
47504: LD_INT 12
47506: PPUSH
47507: LD_INT 0
47509: PPUSH
47510: CALL_OW 50
// end ;
47514: GO 47446
47516: POP
47517: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47518: LD_ADDR_VAR 0 11
47522: PUSH
47523: LD_VAR 0 7
47527: PPUSH
47528: LD_VAR 0 9
47532: PPUSH
47533: LD_EXP 22
47537: PPUSH
47538: LD_EXP 23
47542: PPUSH
47543: CALL 48134 0 4
47547: ST_TO_ADDR
// for j in team do
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: LD_VAR 0 11
47557: PUSH
47558: FOR_IN
47559: IFFALSE 47608
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47561: LD_VAR 0 3
47565: PPUSH
47566: LD_EXP 19
47570: PUSH
47571: LD_VAR 0 8
47575: ARRAY
47576: PUSH
47577: LD_INT 1
47579: ARRAY
47580: PPUSH
47581: LD_EXP 19
47585: PUSH
47586: LD_VAR 0 8
47590: ARRAY
47591: PUSH
47592: LD_INT 2
47594: ARRAY
47595: PPUSH
47596: LD_INT 12
47598: PPUSH
47599: LD_INT 0
47601: PPUSH
47602: CALL_OW 50
47606: GO 47558
47608: POP
47609: POP
// if mpApemans then
47610: LD_EXP 28
47614: IFFALSE 47720
// begin for j := 1 to mpApemans do
47616: LD_ADDR_VAR 0 3
47620: PUSH
47621: DOUBLE
47622: LD_INT 1
47624: DEC
47625: ST_TO_ADDR
47626: LD_EXP 28
47630: PUSH
47631: FOR_TO
47632: IFFALSE 47718
// begin PrepareApeman ( - 5 ) ;
47634: LD_INT 5
47636: NEG
47637: PPUSH
47638: CALL 36969 0 1
// ape := CreateHuman ;
47642: LD_ADDR_VAR 0 10
47646: PUSH
47647: CALL_OW 44
47651: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
47652: LD_ADDR_EXP 30
47656: PUSH
47657: LD_EXP 30
47661: PPUSH
47662: LD_VAR 0 8
47666: PPUSH
47667: LD_EXP 30
47671: PUSH
47672: LD_VAR 0 8
47676: ARRAY
47677: PPUSH
47678: LD_VAR 0 10
47682: PPUSH
47683: CALL 40721 0 2
47687: PPUSH
47688: CALL_OW 1
47692: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47693: LD_VAR 0 10
47697: PPUSH
47698: LD_EXP 29
47702: PUSH
47703: LD_VAR 0 8
47707: ARRAY
47708: PPUSH
47709: LD_INT 0
47711: PPUSH
47712: CALL_OW 49
// end ;
47716: GO 47631
47718: POP
47719: POP
// end ; end ;
47720: GO 46464
47722: POP
47723: POP
// if not mpTeamGame then
47724: LD_EXP 9
47728: NOT
47729: IFFALSE 47827
// begin for i := 1 to 8 do
47731: LD_ADDR_VAR 0 2
47735: PUSH
47736: DOUBLE
47737: LD_INT 1
47739: DEC
47740: ST_TO_ADDR
47741: LD_INT 8
47743: PUSH
47744: FOR_TO
47745: IFFALSE 47823
// for j := 1 to 8 do
47747: LD_ADDR_VAR 0 3
47751: PUSH
47752: DOUBLE
47753: LD_INT 1
47755: DEC
47756: ST_TO_ADDR
47757: LD_INT 8
47759: PUSH
47760: FOR_TO
47761: IFFALSE 47819
// if i <> j then
47763: LD_VAR 0 2
47767: PUSH
47768: LD_VAR 0 3
47772: NONEQUAL
47773: IFFALSE 47797
// SetAttitude ( i , j , att_neutral , true ) else
47775: LD_VAR 0 2
47779: PPUSH
47780: LD_VAR 0 3
47784: PPUSH
47785: LD_INT 0
47787: PPUSH
47788: LD_INT 1
47790: PPUSH
47791: CALL_OW 80
47795: GO 47817
// SetAttitude ( i , j , att_friend , true ) ;
47797: LD_VAR 0 2
47801: PPUSH
47802: LD_VAR 0 3
47806: PPUSH
47807: LD_INT 1
47809: PPUSH
47810: LD_INT 1
47812: PPUSH
47813: CALL_OW 80
47817: GO 47760
47819: POP
47820: POP
47821: GO 47744
47823: POP
47824: POP
// end else
47825: GO 48002
// begin if mpSharedVision then
47827: LD_EXP 14
47831: IFFALSE 47896
// begin for i in mpTeams do
47833: LD_ADDR_VAR 0 2
47837: PUSH
47838: LD_EXP 8
47842: PUSH
47843: FOR_IN
47844: IFFALSE 47894
// for j := 2 to i do
47846: LD_ADDR_VAR 0 3
47850: PUSH
47851: DOUBLE
47852: LD_INT 2
47854: DEC
47855: ST_TO_ADDR
47856: LD_VAR 0 2
47860: PUSH
47861: FOR_TO
47862: IFFALSE 47890
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47864: LD_VAR 0 2
47868: PUSH
47869: LD_VAR 0 3
47873: ARRAY
47874: PPUSH
47875: LD_VAR 0 2
47879: PUSH
47880: LD_INT 1
47882: ARRAY
47883: PPUSH
47884: CALL_OW 343
47888: GO 47861
47890: POP
47891: POP
47892: GO 47843
47894: POP
47895: POP
// end ; for i := 1 to 8 do
47896: LD_ADDR_VAR 0 2
47900: PUSH
47901: DOUBLE
47902: LD_INT 1
47904: DEC
47905: ST_TO_ADDR
47906: LD_INT 8
47908: PUSH
47909: FOR_TO
47910: IFFALSE 48000
// for j := 1 to 8 do
47912: LD_ADDR_VAR 0 3
47916: PUSH
47917: DOUBLE
47918: LD_INT 1
47920: DEC
47921: ST_TO_ADDR
47922: LD_INT 8
47924: PUSH
47925: FOR_TO
47926: IFFALSE 47996
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47928: LD_EXP 6
47932: PUSH
47933: LD_VAR 0 2
47937: ARRAY
47938: PUSH
47939: LD_EXP 6
47943: PUSH
47944: LD_VAR 0 3
47948: ARRAY
47949: EQUAL
47950: IFFALSE 47974
// SetAttitude ( i , j , att_friend , true ) else
47952: LD_VAR 0 2
47956: PPUSH
47957: LD_VAR 0 3
47961: PPUSH
47962: LD_INT 1
47964: PPUSH
47965: LD_INT 1
47967: PPUSH
47968: CALL_OW 80
47972: GO 47994
// SetAttitude ( i , j , att_enemy , true ) ;
47974: LD_VAR 0 2
47978: PPUSH
47979: LD_VAR 0 3
47983: PPUSH
47984: LD_INT 2
47986: PPUSH
47987: LD_INT 1
47989: PPUSH
47990: CALL_OW 80
47994: GO 47925
47996: POP
47997: POP
47998: GO 47909
48000: POP
48001: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48002: LD_ADDR_OWVAR 71
48006: PUSH
48007: LD_EXP 7
48011: PUSH
48012: LD_OWVAR 2
48016: ARRAY
48017: ST_TO_ADDR
// if IAmSpec then
48018: CALL_OW 531
48022: IFFALSE 48063
// begin FogOff ( true ) ;
48024: LD_INT 1
48026: PPUSH
48027: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48031: LD_EXP 27
48035: PUSH
48036: LD_INT 1
48038: ARRAY
48039: PUSH
48040: LD_INT 2
48042: DIV
48043: PPUSH
48044: LD_EXP 27
48048: PUSH
48049: LD_INT 2
48051: ARRAY
48052: PUSH
48053: LD_INT 2
48055: DIV
48056: PPUSH
48057: CALL_OW 86
// end else
48061: GO 48109
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48063: LD_EXP 19
48067: PUSH
48068: LD_EXP 5
48072: PUSH
48073: LD_OWVAR 2
48077: ARRAY
48078: ARRAY
48079: PUSH
48080: LD_INT 1
48082: ARRAY
48083: PPUSH
48084: LD_EXP 19
48088: PUSH
48089: LD_EXP 5
48093: PUSH
48094: LD_OWVAR 2
48098: ARRAY
48099: ARRAY
48100: PUSH
48101: LD_INT 2
48103: ARRAY
48104: PPUSH
48105: CALL_OW 86
// end ; BeginBuildUp ;
48109: CALL 49110 0 0
// enable ( mpActive ) ;
48113: LD_INT 100
48115: ENABLE_MARKED
// enable ( mpGameType ) ;
48116: LD_EXP 1
48120: ENABLE_MARKED
// mpGameActive := true ;
48121: LD_ADDR_EXP 37
48125: PUSH
48126: LD_INT 1
48128: ST_TO_ADDR
// end ;
48129: LD_VAR 0 1
48133: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48134: LD_INT 0
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
// result := [ ] ;
48140: LD_ADDR_VAR 0 5
48144: PUSH
48145: EMPTY
48146: ST_TO_ADDR
// class := class_soldier ;
48147: LD_ADDR_VAR 0 8
48151: PUSH
48152: LD_INT 1
48154: ST_TO_ADDR
// uc_side := side ;
48155: LD_ADDR_OWVAR 20
48159: PUSH
48160: LD_VAR 0 1
48164: ST_TO_ADDR
// uc_nation := nation ;
48165: LD_ADDR_OWVAR 21
48169: PUSH
48170: LD_VAR 0 2
48174: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48175: LD_ADDR_OWVAR 26
48179: PUSH
48180: LD_OWVAR 19
48184: PUSH
48185: LD_VAR 0 1
48189: ARRAY
48190: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48191: LD_INT 1
48193: PPUSH
48194: LD_INT 2
48196: PPUSH
48197: CALL_OW 12
48201: PPUSH
48202: LD_VAR 0 8
48206: PPUSH
48207: LD_VAR 0 4
48211: PUSH
48212: LD_INT 2
48214: PLUS
48215: PPUSH
48216: CALL_OW 380
// hc_importance := 105 ;
48220: LD_ADDR_OWVAR 32
48224: PUSH
48225: LD_INT 105
48227: ST_TO_ADDR
// if Multiplayer then
48228: LD_OWVAR 4
48232: IFFALSE 48272
// begin hc_gallery := MULTIAVATARS ;
48234: LD_ADDR_OWVAR 33
48238: PUSH
48239: LD_STRING MULTIAVATARS
48241: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48242: LD_ADDR_OWVAR 34
48246: PUSH
48247: LD_VAR 0 1
48251: PPUSH
48252: CALL_OW 525
48256: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48257: LD_ADDR_OWVAR 27
48261: PUSH
48262: LD_VAR 0 1
48266: PPUSH
48267: CALL_OW 526
48271: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48272: LD_ADDR_VAR 0 5
48276: PUSH
48277: LD_VAR 0 5
48281: PPUSH
48282: CALL_OW 44
48286: PPUSH
48287: CALL 40721 0 2
48291: ST_TO_ADDR
// if mpTeamPreset then
48292: LD_LOC 1
48296: IFFALSE 48392
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48298: LD_LOC 1
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PPUSH
48307: LD_VAR 0 5
48311: PUSH
48312: LD_VAR 0 5
48316: ARRAY
48317: PPUSH
48318: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48322: LD_VAR 0 5
48326: PUSH
48327: LD_VAR 0 5
48331: ARRAY
48332: PPUSH
48333: LD_INT 1
48335: PPUSH
48336: LD_LOC 1
48340: PUSH
48341: LD_INT 1
48343: ARRAY
48344: PPUSH
48345: LD_INT 1
48347: PPUSH
48348: CALL_OW 260
48352: PPUSH
48353: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48357: LD_VAR 0 5
48361: PUSH
48362: LD_VAR 0 5
48366: ARRAY
48367: PPUSH
48368: LD_INT 2
48370: PPUSH
48371: LD_LOC 1
48375: PUSH
48376: LD_INT 1
48378: ARRAY
48379: PPUSH
48380: LD_INT 2
48382: PPUSH
48383: CALL_OW 260
48387: PPUSH
48388: CALL_OW 239
// end ; InitHc_All ( ) ;
48392: CALL_OW 584
// class := 2 ;
48396: LD_ADDR_VAR 0 8
48400: PUSH
48401: LD_INT 2
48403: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48404: LD_ADDR_VAR 0 6
48408: PUSH
48409: DOUBLE
48410: LD_INT 1
48412: DEC
48413: ST_TO_ADDR
48414: LD_VAR 0 3
48418: PUSH
48419: LD_INT 1
48421: MINUS
48422: PUSH
48423: FOR_TO
48424: IFFALSE 48608
// begin PrepareHuman ( false , class , skill ) ;
48426: LD_INT 0
48428: PPUSH
48429: LD_VAR 0 8
48433: PPUSH
48434: LD_VAR 0 4
48438: PPUSH
48439: CALL_OW 380
// un := CreateHuman ;
48443: LD_ADDR_VAR 0 7
48447: PUSH
48448: CALL_OW 44
48452: ST_TO_ADDR
// result := Join ( result , un ) ;
48453: LD_ADDR_VAR 0 5
48457: PUSH
48458: LD_VAR 0 5
48462: PPUSH
48463: LD_VAR 0 7
48467: PPUSH
48468: CALL 40721 0 2
48472: ST_TO_ADDR
// if mpTeamPreset then
48473: LD_LOC 1
48477: IFFALSE 48573
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48479: LD_LOC 1
48483: PUSH
48484: LD_VAR 0 6
48488: PUSH
48489: LD_INT 1
48491: PLUS
48492: ARRAY
48493: PPUSH
48494: LD_VAR 0 7
48498: PPUSH
48499: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48503: LD_VAR 0 7
48507: PPUSH
48508: LD_INT 1
48510: PPUSH
48511: LD_LOC 1
48515: PUSH
48516: LD_VAR 0 6
48520: PUSH
48521: LD_INT 1
48523: PLUS
48524: ARRAY
48525: PPUSH
48526: LD_INT 1
48528: PPUSH
48529: CALL_OW 260
48533: PPUSH
48534: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48538: LD_VAR 0 7
48542: PPUSH
48543: LD_INT 2
48545: PPUSH
48546: LD_LOC 1
48550: PUSH
48551: LD_VAR 0 6
48555: PUSH
48556: LD_INT 1
48558: PLUS
48559: ARRAY
48560: PPUSH
48561: LD_INT 2
48563: PPUSH
48564: CALL_OW 260
48568: PPUSH
48569: CALL_OW 239
// end ; class := Inc ( class ) ;
48573: LD_ADDR_VAR 0 8
48577: PUSH
48578: LD_VAR 0 8
48582: PPUSH
48583: CALL 42082 0 1
48587: ST_TO_ADDR
// if class = 5 then
48588: LD_VAR 0 8
48592: PUSH
48593: LD_INT 5
48595: EQUAL
48596: IFFALSE 48606
// class := 1 ;
48598: LD_ADDR_VAR 0 8
48602: PUSH
48603: LD_INT 1
48605: ST_TO_ADDR
// end ;
48606: GO 48423
48608: POP
48609: POP
// if not mpTeamPreset then
48610: LD_LOC 1
48614: NOT
48615: IFFALSE 48627
// mpTeamPreset := result ;
48617: LD_ADDR_LOC 1
48621: PUSH
48622: LD_VAR 0 5
48626: ST_TO_ADDR
// end ;
48627: LD_VAR 0 5
48631: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48632: LD_INT 0
48634: PPUSH
48635: PPUSH
// result := [ ] ;
48636: LD_ADDR_VAR 0 4
48640: PUSH
48641: EMPTY
48642: ST_TO_ADDR
// if not vehicles then
48643: LD_VAR 0 3
48647: NOT
48648: IFFALSE 48652
// exit ;
48650: GO 48811
// for i := 1 to vehicles [ nation ] do
48652: LD_ADDR_VAR 0 5
48656: PUSH
48657: DOUBLE
48658: LD_INT 1
48660: DEC
48661: ST_TO_ADDR
48662: LD_VAR 0 3
48666: PUSH
48667: LD_VAR 0 2
48671: ARRAY
48672: PUSH
48673: FOR_TO
48674: IFFALSE 48809
// begin uc_side := side ;
48676: LD_ADDR_OWVAR 20
48680: PUSH
48681: LD_VAR 0 1
48685: ST_TO_ADDR
// uc_nation := nation ;
48686: LD_ADDR_OWVAR 21
48690: PUSH
48691: LD_VAR 0 2
48695: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48696: LD_VAR 0 3
48700: PUSH
48701: LD_VAR 0 2
48705: ARRAY
48706: PUSH
48707: LD_VAR 0 5
48711: ARRAY
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PPUSH
48717: LD_VAR 0 3
48721: PUSH
48722: LD_VAR 0 2
48726: ARRAY
48727: PUSH
48728: LD_VAR 0 5
48732: ARRAY
48733: PUSH
48734: LD_INT 2
48736: ARRAY
48737: PPUSH
48738: LD_VAR 0 3
48742: PUSH
48743: LD_VAR 0 2
48747: ARRAY
48748: PUSH
48749: LD_VAR 0 5
48753: ARRAY
48754: PUSH
48755: LD_INT 3
48757: ARRAY
48758: PPUSH
48759: LD_VAR 0 3
48763: PUSH
48764: LD_VAR 0 2
48768: ARRAY
48769: PUSH
48770: LD_VAR 0 5
48774: ARRAY
48775: PUSH
48776: LD_INT 4
48778: ARRAY
48779: PPUSH
48780: LD_INT 80
48782: PPUSH
48783: CALL 7850 0 5
// result := Join ( result , CreateVehicle ) ;
48787: LD_ADDR_VAR 0 4
48791: PUSH
48792: LD_VAR 0 4
48796: PPUSH
48797: CALL_OW 45
48801: PPUSH
48802: CALL 40721 0 2
48806: ST_TO_ADDR
// end ;
48807: GO 48673
48809: POP
48810: POP
// end ;
48811: LD_VAR 0 4
48815: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48816: LD_INT 0
48818: PPUSH
48819: PPUSH
// for i in mpBattleFlags do
48820: LD_ADDR_VAR 0 3
48824: PUSH
48825: LD_EXP 21
48829: PUSH
48830: FOR_IN
48831: IFFALSE 48908
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48833: LD_VAR 0 3
48837: PPUSH
48838: LD_INT 1
48840: PUSH
48841: LD_VAR 0 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_VAR 0 1
48857: PUSH
48858: LD_REAL  7.00000000000000E-0001
48861: MUL
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 3
48869: PUSH
48870: LD_VAR 0 1
48874: PUSH
48875: LD_REAL  4.00000000000000E-0001
48878: MUL
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 20
48886: PUSH
48887: LD_VAR 0 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: PPUSH
48902: CALL_OW 423
48906: GO 48830
48908: POP
48909: POP
// end ;
48910: LD_VAR 0 2
48914: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48915: LD_INT 100
48917: IFFALSE 49012
48919: GO 48921
48921: DISABLE
48922: LD_INT 0
48924: PPUSH
48925: PPUSH
// begin if mpBattleFlag <= 0 then
48926: LD_EXP 20
48930: PUSH
48931: LD_INT 0
48933: LESSEQUAL
48934: IFFALSE 48938
// exit ;
48936: GO 49012
// strength := 100 ;
48938: LD_ADDR_VAR 0 2
48942: PUSH
48943: LD_INT 100
48945: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48946: LD_EXP 20
48950: PPUSH
48951: CALL_OW 67
// strength := Dec ( strength ) ;
48955: LD_ADDR_VAR 0 2
48959: PUSH
48960: LD_VAR 0 2
48964: PPUSH
48965: CALL 42104 0 1
48969: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48970: LD_VAR 0 2
48974: PPUSH
48975: CALL 48816 0 1
// until not strength ;
48979: LD_VAR 0 2
48983: NOT
48984: IFFALSE 48946
// for i in mpBattleFlags do
48986: LD_ADDR_VAR 0 1
48990: PUSH
48991: LD_EXP 21
48995: PUSH
48996: FOR_IN
48997: IFFALSE 49010
// KillBattleFlag ( i ) ;
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 419
49008: GO 48996
49010: POP
49011: POP
// end ;
49012: PPOPN 2
49014: END
// every 0 0$1 marked mpActive do var side , tmp ;
49015: GO 49017
49017: DISABLE
49018: LD_INT 0
49020: PPUSH
49021: PPUSH
// begin if mpSibBomb <= 1 then
49022: LD_EXP 26
49026: PUSH
49027: LD_INT 1
49029: LESSEQUAL
49030: IFFALSE 49034
// exit ;
49032: GO 49107
// tmp := mpSibBomb ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_EXP 26
49043: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49044: LD_INT 35
49046: PPUSH
49047: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49051: LD_ADDR_VAR 0 2
49055: PUSH
49056: LD_VAR 0 2
49060: PUSH
49061: LD_INT 35
49063: MINUS
49064: ST_TO_ADDR
// until not tmp ;
49065: LD_VAR 0 2
49069: NOT
49070: IFFALSE 49044
// for side := 1 to 8 do
49072: LD_ADDR_VAR 0 1
49076: PUSH
49077: DOUBLE
49078: LD_INT 1
49080: DEC
49081: ST_TO_ADDR
49082: LD_INT 8
49084: PUSH
49085: FOR_TO
49086: IFFALSE 49105
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49088: LD_INT 25
49090: PPUSH
49091: LD_VAR 0 1
49095: PPUSH
49096: LD_INT 1
49098: PPUSH
49099: CALL_OW 322
49103: GO 49085
49105: POP
49106: POP
// end ;
49107: PPOPN 2
49109: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49110: LD_INT 0
49112: PPUSH
49113: PPUSH
49114: PPUSH
// mpBuildUpTimeDelay := 0 ;
49115: LD_ADDR_EXP 40
49119: PUSH
49120: LD_INT 0
49122: ST_TO_ADDR
// if not mpBuildUpTime then
49123: LD_EXP 18
49127: NOT
49128: IFFALSE 49132
// exit ;
49130: GO 49315
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49132: LD_ADDR_EXP 40
49136: PUSH
49137: LD_INT 8400
49139: PUSH
49140: LD_INT 2100
49142: PUSH
49143: LD_EXP 18
49147: MUL
49148: PLUS
49149: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49150: LD_ADDR_EXP 41
49154: PUSH
49155: LD_INT 1
49157: ST_TO_ADDR
// for i := 1 to 8 do
49158: LD_ADDR_VAR 0 2
49162: PUSH
49163: DOUBLE
49164: LD_INT 1
49166: DEC
49167: ST_TO_ADDR
49168: LD_INT 8
49170: PUSH
49171: FOR_TO
49172: IFFALSE 49313
// if mpSidePositions [ i ] then
49174: LD_EXP 5
49178: PUSH
49179: LD_VAR 0 2
49183: ARRAY
49184: IFFALSE 49311
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49186: LD_EXP 17
49190: PUSH
49191: LD_EXP 5
49195: PUSH
49196: LD_VAR 0 2
49200: ARRAY
49201: ARRAY
49202: PPUSH
49203: LD_INT 5
49205: PPUSH
49206: CALL_OW 424
// for j := 1 to 8 do
49210: LD_ADDR_VAR 0 3
49214: PUSH
49215: DOUBLE
49216: LD_INT 1
49218: DEC
49219: ST_TO_ADDR
49220: LD_INT 8
49222: PUSH
49223: FOR_TO
49224: IFFALSE 49309
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49226: LD_EXP 5
49230: PUSH
49231: LD_VAR 0 3
49235: ARRAY
49236: PUSH
49237: LD_EXP 6
49241: PUSH
49242: LD_VAR 0 2
49246: ARRAY
49247: PUSH
49248: LD_EXP 6
49252: PUSH
49253: LD_VAR 0 3
49257: ARRAY
49258: NONEQUAL
49259: PUSH
49260: LD_EXP 9
49264: NOT
49265: PUSH
49266: LD_VAR 0 2
49270: PUSH
49271: LD_VAR 0 3
49275: NONEQUAL
49276: AND
49277: OR
49278: AND
49279: IFFALSE 49307
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49281: LD_VAR 0 3
49285: PPUSH
49286: LD_EXP 17
49290: PUSH
49291: LD_EXP 5
49295: PUSH
49296: LD_VAR 0 2
49300: ARRAY
49301: ARRAY
49302: PPUSH
49303: CALL_OW 333
49307: GO 49223
49309: POP
49310: POP
// end ;
49311: GO 49171
49313: POP
49314: POP
// end ;
49315: LD_VAR 0 1
49319: RET
// function EndBuildUp ; var i , j ; begin
49320: LD_INT 0
49322: PPUSH
49323: PPUSH
49324: PPUSH
// mpBuildUpTimeActive := false ;
49325: LD_ADDR_EXP 41
49329: PUSH
49330: LD_INT 0
49332: ST_TO_ADDR
// for i := 1 to 8 do
49333: LD_ADDR_VAR 0 2
49337: PUSH
49338: DOUBLE
49339: LD_INT 1
49341: DEC
49342: ST_TO_ADDR
49343: LD_INT 8
49345: PUSH
49346: FOR_TO
49347: IFFALSE 49488
// if mpSidePositions [ i ] then
49349: LD_EXP 5
49353: PUSH
49354: LD_VAR 0 2
49358: ARRAY
49359: IFFALSE 49486
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49361: LD_EXP 17
49365: PUSH
49366: LD_EXP 5
49370: PUSH
49371: LD_VAR 0 2
49375: ARRAY
49376: ARRAY
49377: PPUSH
49378: LD_INT 0
49380: PPUSH
49381: CALL_OW 424
// for j := 1 to 8 do
49385: LD_ADDR_VAR 0 3
49389: PUSH
49390: DOUBLE
49391: LD_INT 1
49393: DEC
49394: ST_TO_ADDR
49395: LD_INT 8
49397: PUSH
49398: FOR_TO
49399: IFFALSE 49484
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49401: LD_EXP 5
49405: PUSH
49406: LD_VAR 0 3
49410: ARRAY
49411: PUSH
49412: LD_EXP 6
49416: PUSH
49417: LD_VAR 0 2
49421: ARRAY
49422: PUSH
49423: LD_EXP 6
49427: PUSH
49428: LD_VAR 0 3
49432: ARRAY
49433: NONEQUAL
49434: PUSH
49435: LD_EXP 9
49439: NOT
49440: PUSH
49441: LD_VAR 0 2
49445: PUSH
49446: LD_VAR 0 3
49450: NONEQUAL
49451: AND
49452: OR
49453: AND
49454: IFFALSE 49482
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49456: LD_VAR 0 3
49460: PPUSH
49461: LD_EXP 17
49465: PUSH
49466: LD_EXP 5
49470: PUSH
49471: LD_VAR 0 2
49475: ARRAY
49476: ARRAY
49477: PPUSH
49478: CALL_OW 334
49482: GO 49398
49484: POP
49485: POP
// end ;
49486: GO 49346
49488: POP
49489: POP
// end ;
49490: LD_VAR 0 1
49494: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49495: LD_EXP 41
49499: IFFALSE 49674
49501: GO 49503
49503: DISABLE
49504: LD_INT 0
49506: PPUSH
49507: PPUSH
// begin for i := 1 to 8 do
49508: LD_ADDR_VAR 0 1
49512: PUSH
49513: DOUBLE
49514: LD_INT 1
49516: DEC
49517: ST_TO_ADDR
49518: LD_INT 8
49520: PUSH
49521: FOR_TO
49522: IFFALSE 49671
// if mpSidePositions [ i ] then
49524: LD_EXP 5
49528: PUSH
49529: LD_VAR 0 1
49533: ARRAY
49534: IFFALSE 49669
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49536: LD_ADDR_VAR 0 2
49540: PUSH
49541: LD_EXP 17
49545: PUSH
49546: LD_EXP 5
49550: PUSH
49551: LD_VAR 0 1
49555: ARRAY
49556: ARRAY
49557: PPUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 21
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 21
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 22
49588: PUSH
49589: LD_OWVAR 2
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PPUSH
49602: CALL_OW 70
49606: PUSH
49607: FOR_IN
49608: IFFALSE 49667
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49610: LD_EXP 6
49614: PUSH
49615: LD_VAR 0 1
49619: ARRAY
49620: PUSH
49621: LD_EXP 6
49625: PUSH
49626: LD_OWVAR 2
49630: ARRAY
49631: NONEQUAL
49632: PUSH
49633: LD_EXP 9
49637: NOT
49638: PUSH
49639: LD_VAR 0 1
49643: PUSH
49644: LD_OWVAR 2
49648: NONEQUAL
49649: AND
49650: OR
49651: IFFALSE 49665
// ComMoveToArea ( un , BuildUpEscape ) ;
49653: LD_VAR 0 2
49657: PPUSH
49658: LD_INT 23
49660: PPUSH
49661: CALL_OW 113
49665: GO 49607
49667: POP
49668: POP
49669: GO 49521
49671: POP
49672: POP
// enable ;
49673: ENABLE
// end ;
49674: PPOPN 2
49676: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49677: LD_EXP 18
49681: IFFALSE 49731
49683: GO 49685
49685: DISABLE
49686: LD_INT 0
49688: PPUSH
// begin tmp := mpBuildUpTime ;
49689: LD_ADDR_VAR 0 1
49693: PUSH
49694: LD_EXP 18
49698: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49699: LD_INT 35
49701: PPUSH
49702: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49706: LD_ADDR_VAR 0 1
49710: PUSH
49711: LD_VAR 0 1
49715: PUSH
49716: LD_INT 35
49718: MINUS
49719: ST_TO_ADDR
// until not tmp ;
49720: LD_VAR 0 1
49724: NOT
49725: IFFALSE 49699
// EndBuildUp ;
49727: CALL 49320 0 0
// end ;
49731: PPOPN 1
49733: END
// every 0 0$1 trigger mpActive marked mpWin do
49734: LD_INT 100
49736: IFFALSE 49770
49738: GO 49740
49740: DISABLE
// begin if IAmServer then
49741: CALL_OW 518
49745: IFFALSE 49754
// wait ( 0 0$3 ) ;
49747: LD_INT 105
49749: PPUSH
49750: CALL_OW 67
// if Multiplayer then
49754: LD_OWVAR 4
49758: IFFALSE 49766
// YouWinInMultiplayer else
49760: CALL_OW 106
49764: GO 49770
// YouWin ;
49766: CALL_OW 103
// end ;
49770: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49771: LD_INT 0
49773: PPUSH
// result := false ;
49774: LD_ADDR_VAR 0 3
49778: PUSH
49779: LD_INT 0
49781: ST_TO_ADDR
// case gameType of GameTypeNormal :
49782: LD_VAR 0 1
49786: PUSH
49787: LD_INT 1
49789: DOUBLE
49790: EQUAL
49791: IFTRUE 49795
49793: GO 49868
49795: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49796: LD_ADDR_VAR 0 3
49800: PUSH
49801: LD_INT 22
49803: PUSH
49804: LD_VAR 0 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 21
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 33
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 33
49838: PUSH
49839: LD_INT 5
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PPUSH
49856: CALL_OW 69
49860: PPUSH
49861: CALL 5112 0 1
49865: ST_TO_ADDR
// end ; GameTypeSurvival :
49866: GO 50103
49868: LD_INT 2
49870: DOUBLE
49871: EQUAL
49872: IFTRUE 49876
49874: GO 50004
49876: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49877: LD_ADDR_VAR 0 3
49881: PUSH
49882: LD_INT 22
49884: PUSH
49885: LD_VAR 0 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 30
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 30
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PPUSH
49926: CALL_OW 69
49930: PPUSH
49931: CALL 5112 0 1
49935: PUSH
49936: LD_INT 22
49938: PUSH
49939: LD_VAR 0 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 21
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 33
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 33
49973: PUSH
49974: LD_INT 5
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PPUSH
49991: CALL_OW 69
49995: PPUSH
49996: CALL 5112 0 1
50000: AND
50001: ST_TO_ADDR
// end ; GameTypeKing :
50002: GO 50103
50004: LD_INT 3
50006: DOUBLE
50007: EQUAL
50008: IFTRUE 50012
50010: GO 50102
50012: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50013: LD_ADDR_VAR 0 3
50017: PUSH
50018: LD_INT 22
50020: PUSH
50021: LD_VAR 0 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 21
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 33
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 33
50055: PUSH
50056: LD_INT 5
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PPUSH
50073: CALL_OW 69
50077: PPUSH
50078: CALL 5112 0 1
50082: PUSH
50083: LD_VAR 0 2
50087: PPUSH
50088: CALL 53380 0 1
50092: PUSH
50093: LD_EXP 33
50097: LESS
50098: AND
50099: ST_TO_ADDR
// end ; end ;
50100: GO 50103
50102: POP
// end ;
50103: LD_VAR 0 3
50107: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50108: LD_INT 100
50110: IFFALSE 50332
50112: GO 50114
50114: DISABLE
50115: LD_INT 0
50117: PPUSH
50118: PPUSH
// begin if Multiplayer then
50119: LD_OWVAR 4
50123: IFFALSE 50131
// SetPlayerSpectator ( ) else
50125: CALL_OW 572
50129: GO 50140
// FogOff ( your_side ) ;
50131: LD_OWVAR 2
50135: PPUSH
50136: CALL_OW 344
// repeat gameIsOn := false ;
50140: LD_ADDR_VAR 0 1
50144: PUSH
50145: LD_INT 0
50147: ST_TO_ADDR
// for i := 1 to 8 do
50148: LD_ADDR_VAR 0 2
50152: PUSH
50153: DOUBLE
50154: LD_INT 1
50156: DEC
50157: ST_TO_ADDR
50158: LD_INT 8
50160: PUSH
50161: FOR_TO
50162: IFFALSE 50284
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50164: LD_EXP 5
50168: PUSH
50169: LD_VAR 0 2
50173: ARRAY
50174: PUSH
50175: LD_VAR 0 2
50179: PPUSH
50180: CALL_OW 108
50184: AND
50185: PUSH
50186: LD_VAR 0 2
50190: PUSH
50191: LD_OWVAR 2
50195: NONEQUAL
50196: AND
50197: IFFALSE 50282
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50199: LD_EXP 6
50203: PUSH
50204: LD_VAR 0 2
50208: ARRAY
50209: NOT
50210: PUSH
50211: LD_EXP 6
50215: PUSH
50216: LD_VAR 0 2
50220: ARRAY
50221: PUSH
50222: LD_EXP 6
50226: PUSH
50227: LD_OWVAR 2
50231: ARRAY
50232: NONEQUAL
50233: PUSH
50234: LD_OWVAR 2
50238: PPUSH
50239: LD_VAR 0 2
50243: PPUSH
50244: CALL_OW 81
50248: PUSH
50249: LD_INT 1
50251: NONEQUAL
50252: AND
50253: OR
50254: IFFALSE 50282
// if HasPowerByGameType ( mpGameType , i ) then
50256: LD_EXP 1
50260: PPUSH
50261: LD_VAR 0 2
50265: PPUSH
50266: CALL 49771 0 2
50270: IFFALSE 50282
// begin gameIsOn := true ;
50272: LD_ADDR_VAR 0 1
50276: PUSH
50277: LD_INT 1
50279: ST_TO_ADDR
// break ;
50280: GO 50284
// end ;
50282: GO 50161
50284: POP
50285: POP
// wait ( 100 ) ;
50286: LD_INT 100
50288: PPUSH
50289: CALL_OW 67
// until not gameIsOn ;
50293: LD_VAR 0 1
50297: NOT
50298: IFFALSE 50140
// if IAmServer then
50300: CALL_OW 518
50304: IFFALSE 50313
// wait ( 0 0$3 ) ;
50306: LD_INT 105
50308: PPUSH
50309: CALL_OW 67
// if Multiplayer then
50313: LD_OWVAR 4
50317: IFFALSE 50325
// YouLostInMultiplayer else
50319: CALL_OW 107
50323: GO 50332
// YouLost (  ) ;
50325: LD_STRING 
50327: PPUSH
50328: CALL_OW 104
// end ;
50332: PPOPN 2
50334: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50335: LD_EXP 31
50339: IFFALSE 50715
50341: GO 50343
50343: DISABLE
50344: LD_INT 0
50346: PPUSH
50347: PPUSH
50348: PPUSH
50349: PPUSH
50350: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50351: LD_ADDR_VAR 0 5
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: LD_INT 4
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: LD_INT 6
50373: PUSH
50374: LD_INT 7
50376: PUSH
50377: LD_INT 8
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50390: LD_INT 350
50392: PPUSH
50393: CALL_OW 67
// for i := 1 to 8 do
50397: LD_ADDR_VAR 0 1
50401: PUSH
50402: DOUBLE
50403: LD_INT 1
50405: DEC
50406: ST_TO_ADDR
50407: LD_INT 8
50409: PUSH
50410: FOR_TO
50411: IFFALSE 50685
// begin j := sides [ i ] ;
50413: LD_ADDR_VAR 0 2
50417: PUSH
50418: LD_VAR 0 5
50422: PUSH
50423: LD_VAR 0 1
50427: ARRAY
50428: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50429: LD_EXP 38
50433: PUSH
50434: LD_VAR 0 2
50438: ARRAY
50439: PPUSH
50440: CALL 5112 0 1
50444: PUSH
50445: LD_VAR 0 2
50449: PPUSH
50450: CALL_OW 108
50454: AND
50455: PUSH
50456: LD_EXP 1
50460: PPUSH
50461: LD_VAR 0 2
50465: PPUSH
50466: CALL 49771 0 2
50470: AND
50471: IFFALSE 50683
// begin wait ( mpRespawn div 3 ) ;
50473: LD_EXP 31
50477: PUSH
50478: LD_INT 3
50480: DIV
50481: PPUSH
50482: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50486: LD_ADDR_VAR 0 3
50490: PUSH
50491: LD_INT 22
50493: PUSH
50494: LD_VAR 0 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 50
50505: PUSH
50506: EMPTY
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 30
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 30
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: LIST
50541: PPUSH
50542: CALL_OW 69
50546: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
50547: LD_VAR 0 3
50551: NOT
50552: PUSH
50553: LD_VAR 0 2
50557: PPUSH
50558: CALL_OW 108
50562: NOT
50563: OR
50564: PUSH
50565: LD_EXP 1
50569: PPUSH
50570: LD_VAR 0 2
50574: PPUSH
50575: CALL 49771 0 2
50579: NOT
50580: OR
50581: IFFALSE 50585
// continue ;
50583: GO 50410
// spawn := tmp [ 1 ] ;
50585: LD_ADDR_VAR 0 4
50589: PUSH
50590: LD_VAR 0 3
50594: PUSH
50595: LD_INT 1
50597: ARRAY
50598: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50599: LD_EXP 38
50603: PUSH
50604: LD_VAR 0 2
50608: ARRAY
50609: PUSH
50610: LD_INT 1
50612: ARRAY
50613: PPUSH
50614: LD_VAR 0 4
50618: PPUSH
50619: CALL_OW 250
50623: PPUSH
50624: LD_VAR 0 4
50628: PPUSH
50629: CALL_OW 251
50633: PPUSH
50634: LD_INT 32
50636: PPUSH
50637: LD_INT 1
50639: PPUSH
50640: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50644: LD_ADDR_EXP 38
50648: PUSH
50649: LD_EXP 38
50653: PPUSH
50654: LD_VAR 0 2
50658: PPUSH
50659: LD_EXP 38
50663: PUSH
50664: LD_VAR 0 2
50668: ARRAY
50669: PPUSH
50670: LD_INT 1
50672: PPUSH
50673: CALL_OW 3
50677: PPUSH
50678: CALL_OW 1
50682: ST_TO_ADDR
// end ; end ;
50683: GO 50410
50685: POP
50686: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50687: LD_ADDR_VAR 0 5
50691: PUSH
50692: LD_VAR 0 5
50696: PPUSH
50697: LD_INT 1
50699: PPUSH
50700: LD_INT 8
50702: PPUSH
50703: LD_INT 1
50705: PPUSH
50706: CALL 7390 0 4
50710: ST_TO_ADDR
// until false ;
50711: LD_INT 0
50713: IFFALSE 50390
// end ;
50715: PPOPN 5
50717: END
// every 0 0$1 marked mpActive do
50718: GO 50720
50720: DISABLE
// begin enable ;
50721: ENABLE
// if not mpDisplayStrings then
50722: LD_EXP 36
50726: NOT
50727: IFFALSE 50738
// begin display_strings := [ ] ;
50729: LD_ADDR_OWVAR 47
50733: PUSH
50734: EMPTY
50735: ST_TO_ADDR
// exit ;
50736: GO 50748
// end ; display_strings := mpDisplayStrings ;
50738: LD_ADDR_OWVAR 47
50742: PUSH
50743: LD_EXP 36
50747: ST_TO_ADDR
// end ; end_of_file
50748: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50749: LD_INT 0
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
// if GetType ( un ) = unit_vehicle then
50760: LD_VAR 0 1
50764: PPUSH
50765: CALL_OW 247
50769: PUSH
50770: LD_INT 2
50772: EQUAL
50773: IFFALSE 50777
// exit ;
50775: GO 51409
// side := GetSide ( un ) ;
50777: LD_ADDR_VAR 0 9
50781: PUSH
50782: LD_VAR 0 1
50786: PPUSH
50787: CALL_OW 255
50791: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50792: LD_EXP 1
50796: PUSH
50797: LD_INT 2
50799: EQUAL
50800: IFFALSE 50876
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
50802: LD_VAR 0 1
50806: PPUSH
50807: CALL_OW 266
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: IN
50822: IFFALSE 50876
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50824: LD_ADDR_VAR 0 3
50828: PUSH
50829: LD_INT 22
50831: PUSH
50832: LD_VAR 0 9
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 21
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PPUSH
50855: CALL_OW 69
50859: PUSH
50860: FOR_IN
50861: IFFALSE 50874
// KillUnit ( i ) ;
50863: LD_VAR 0 3
50867: PPUSH
50868: CALL_OW 66
50872: GO 50860
50874: POP
50875: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50876: LD_VAR 0 1
50880: PPUSH
50881: CALL_OW 257
50885: PUSH
50886: LD_INT 12
50888: PUSH
50889: LD_INT 17
50891: PUSH
50892: LD_INT 15
50894: PUSH
50895: LD_INT 16
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: IN
50904: PUSH
50905: LD_VAR 0 1
50909: PPUSH
50910: CALL_OW 263
50914: PUSH
50915: LD_INT 5
50917: EQUAL
50918: OR
50919: IFFALSE 51138
// begin tag := 0 ;
50921: LD_ADDR_VAR 0 5
50925: PUSH
50926: LD_INT 0
50928: ST_TO_ADDR
// for i := 1 to 8 do
50929: LD_ADDR_VAR 0 3
50933: PUSH
50934: DOUBLE
50935: LD_INT 1
50937: DEC
50938: ST_TO_ADDR
50939: LD_INT 8
50941: PUSH
50942: FOR_TO
50943: IFFALSE 50977
// if un in mpApePosIndex [ i ] then
50945: LD_VAR 0 1
50949: PUSH
50950: LD_EXP 30
50954: PUSH
50955: LD_VAR 0 3
50959: ARRAY
50960: IN
50961: IFFALSE 50975
// begin tag := i ;
50963: LD_ADDR_VAR 0 5
50967: PUSH
50968: LD_VAR 0 3
50972: ST_TO_ADDR
// break ;
50973: GO 50977
// end ;
50975: GO 50942
50977: POP
50978: POP
// if not tag then
50979: LD_VAR 0 5
50983: NOT
50984: IFFALSE 50988
// exit ;
50986: GO 51409
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50988: LD_ADDR_VAR 0 7
50992: PUSH
50993: LD_EXP 29
50997: PUSH
50998: LD_EXP 5
51002: PUSH
51003: LD_VAR 0 5
51007: ARRAY
51008: ARRAY
51009: ST_TO_ADDR
// if not area then
51010: LD_VAR 0 7
51014: NOT
51015: IFFALSE 51019
// exit ;
51017: GO 51409
// wait ( 4 4$00 ) ;
51019: LD_INT 8400
51021: PPUSH
51022: CALL_OW 67
// repeat wait ( 10 ) ;
51026: LD_INT 10
51028: PPUSH
51029: CALL_OW 67
// until not mpBlockRespThread ;
51033: LD_EXP 39
51037: NOT
51038: IFFALSE 51026
// mpBlockRespThread := true ;
51040: LD_ADDR_EXP 39
51044: PUSH
51045: LD_INT 1
51047: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51048: LD_INT 0
51050: PPUSH
51051: CALL 36969 0 1
// ape := CreateHuman ;
51055: LD_ADDR_VAR 0 4
51059: PUSH
51060: CALL_OW 44
51064: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51065: LD_ADDR_EXP 30
51069: PUSH
51070: LD_EXP 30
51074: PPUSH
51075: LD_VAR 0 5
51079: PPUSH
51080: LD_EXP 30
51084: PUSH
51085: LD_VAR 0 5
51089: ARRAY
51090: PPUSH
51091: LD_VAR 0 4
51095: PPUSH
51096: CALL 40721 0 2
51100: PPUSH
51101: CALL_OW 1
51105: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51106: LD_VAR 0 4
51110: PPUSH
51111: LD_VAR 0 7
51115: PPUSH
51116: LD_INT 0
51118: PPUSH
51119: CALL_OW 49
// wait ( 10 ) ;
51123: LD_INT 10
51125: PPUSH
51126: CALL_OW 67
// mpBlockRespThread := false ;
51130: LD_ADDR_EXP 39
51134: PUSH
51135: LD_INT 0
51137: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51138: LD_VAR 0 1
51142: PPUSH
51143: CALL_OW 247
51147: PUSH
51148: LD_INT 1
51150: EQUAL
51151: PUSH
51152: LD_VAR 0 1
51156: PPUSH
51157: CALL_OW 248
51161: PUSH
51162: LD_INT 0
51164: GREATER
51165: AND
51166: IFFALSE 51409
// begin if not mpRespawn then
51168: LD_EXP 31
51172: NOT
51173: IFFALSE 51177
// exit ;
51175: GO 51409
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51177: LD_VAR 0 9
51181: PPUSH
51182: CALL_OW 108
51186: NOT
51187: PUSH
51188: LD_EXP 1
51192: PPUSH
51193: LD_VAR 0 9
51197: PPUSH
51198: CALL 49771 0 2
51202: NOT
51203: AND
51204: IFFALSE 51208
// exit ;
51206: GO 51409
// side := GetSide ( un ) ;
51208: LD_ADDR_VAR 0 9
51212: PUSH
51213: LD_VAR 0 1
51217: PPUSH
51218: CALL_OW 255
51222: ST_TO_ADDR
// nation := GetNation ( un ) ;
51223: LD_ADDR_VAR 0 8
51227: PUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL_OW 248
51237: ST_TO_ADDR
// class := GetClass ( un ) ;
51238: LD_ADDR_VAR 0 6
51242: PUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 257
51252: ST_TO_ADDR
// if class > 4 then
51253: LD_VAR 0 6
51257: PUSH
51258: LD_INT 4
51260: GREATER
51261: IFFALSE 51271
// class := 1 ;
51263: LD_ADDR_VAR 0 6
51267: PUSH
51268: LD_INT 1
51270: ST_TO_ADDR
// repeat wait ( 10 ) ;
51271: LD_INT 10
51273: PPUSH
51274: CALL_OW 67
// until not mpBlockRespThread ;
51278: LD_EXP 39
51282: NOT
51283: IFFALSE 51271
// mpBlockRespThread := true ;
51285: LD_ADDR_EXP 39
51289: PUSH
51290: LD_INT 1
51292: ST_TO_ADDR
// uc_side := side ;
51293: LD_ADDR_OWVAR 20
51297: PUSH
51298: LD_VAR 0 9
51302: ST_TO_ADDR
// uc_nation := nation ;
51303: LD_ADDR_OWVAR 21
51307: PUSH
51308: LD_VAR 0 8
51312: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51313: LD_INT 0
51315: PPUSH
51316: LD_VAR 0 6
51320: PPUSH
51321: LD_INT 2
51323: PPUSH
51324: CALL_OW 380
// un := CreateHuman ;
51328: LD_ADDR_VAR 0 1
51332: PUSH
51333: CALL_OW 44
51337: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51338: LD_ADDR_EXP 38
51342: PUSH
51343: LD_EXP 38
51347: PPUSH
51348: LD_VAR 0 9
51352: PPUSH
51353: LD_EXP 38
51357: PUSH
51358: LD_VAR 0 9
51362: ARRAY
51363: PPUSH
51364: LD_EXP 38
51368: PUSH
51369: LD_VAR 0 9
51373: ARRAY
51374: PUSH
51375: LD_INT 1
51377: PLUS
51378: PPUSH
51379: LD_VAR 0 1
51383: PPUSH
51384: CALL_OW 1
51388: PPUSH
51389: CALL_OW 1
51393: ST_TO_ADDR
// wait ( 10 ) ;
51394: LD_INT 10
51396: PPUSH
51397: CALL_OW 67
// mpBlockRespThread := false ;
51401: LD_ADDR_EXP 39
51405: PUSH
51406: LD_INT 0
51408: ST_TO_ADDR
// end ; end ;
51409: LD_VAR 0 2
51413: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51414: LD_INT 0
51416: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51417: LD_VAR 0 1
51421: PPUSH
51422: CALL_OW 266
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: IN
51437: IFFALSE 51462
// SetBName ( building , @ & GetSide ( building ) ) ;
51439: LD_VAR 0 1
51443: PPUSH
51444: LD_STRING @
51446: PUSH
51447: LD_VAR 0 1
51451: PPUSH
51452: CALL_OW 255
51456: STR
51457: PPUSH
51458: CALL_OW 500
// end ;
51462: LD_VAR 0 2
51466: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51467: LD_INT 0
51469: PPUSH
51470: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51471: LD_EXP 1
51475: PUSH
51476: LD_INT 2
51478: EQUAL
51479: PUSH
51480: LD_VAR 0 1
51484: PPUSH
51485: CALL_OW 266
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: IN
51500: AND
51501: IFFALSE 51566
// begin KillUnit ( building ) ;
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51512: LD_ADDR_VAR 0 5
51516: PUSH
51517: LD_INT 22
51519: PUSH
51520: LD_VAR 0 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 21
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PPUSH
51543: CALL_OW 69
51547: PUSH
51548: FOR_IN
51549: IFFALSE 51562
// KillUnit ( i ) ;
51551: LD_VAR 0 5
51555: PPUSH
51556: CALL_OW 66
51560: GO 51548
51562: POP
51563: POP
// exit ;
51564: GO 51611
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51566: LD_VAR 0 1
51570: PPUSH
51571: CALL_OW 266
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: IN
51586: IFFALSE 51611
// SetBName ( building , @ & GetSide ( building ) ) ;
51588: LD_VAR 0 1
51592: PPUSH
51593: LD_STRING @
51595: PUSH
51596: LD_VAR 0 1
51600: PPUSH
51601: CALL_OW 255
51605: STR
51606: PPUSH
51607: CALL_OW 500
// end ; end_of_file
51611: LD_VAR 0 4
51615: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51616: LD_EXP 37
51620: PUSH
51621: CALL 51826 0 0
51625: AND
51626: PUSH
51627: LD_OWVAR 4
51631: AND
51632: IFFALSE 51823
51634: GO 51636
51636: DISABLE
51637: LD_INT 0
51639: PPUSH
51640: PPUSH
// begin canWin := false ;
51641: LD_ADDR_VAR 0 2
51645: PUSH
51646: LD_INT 0
51648: ST_TO_ADDR
// if not HasPower ( your_side ) then
51649: LD_OWVAR 2
51653: PPUSH
51654: CALL 51866 0 1
51658: NOT
51659: IFFALSE 51670
// begin Multiplayer_Loose_Message ;
51661: CALL_OW 521
// enable ( mpLose ) ;
51665: LD_INT 102
51667: ENABLE_MARKED
// end else
51668: GO 51823
// begin canWin := true ;
51670: LD_ADDR_VAR 0 2
51674: PUSH
51675: LD_INT 1
51677: ST_TO_ADDR
// for i := 1 to 8 do
51678: LD_ADDR_VAR 0 1
51682: PUSH
51683: DOUBLE
51684: LD_INT 1
51686: DEC
51687: ST_TO_ADDR
51688: LD_INT 8
51690: PUSH
51691: FOR_TO
51692: IFFALSE 51809
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51694: LD_EXP 5
51698: PUSH
51699: LD_VAR 0 1
51703: ARRAY
51704: PUSH
51705: LD_VAR 0 1
51709: PPUSH
51710: CALL_OW 108
51714: AND
51715: PUSH
51716: LD_VAR 0 1
51720: PUSH
51721: LD_OWVAR 2
51725: NONEQUAL
51726: AND
51727: IFFALSE 51807
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51729: LD_EXP 6
51733: PUSH
51734: LD_VAR 0 1
51738: ARRAY
51739: NOT
51740: PUSH
51741: LD_EXP 6
51745: PUSH
51746: LD_VAR 0 1
51750: ARRAY
51751: PUSH
51752: LD_EXP 6
51756: PUSH
51757: LD_OWVAR 2
51761: ARRAY
51762: NONEQUAL
51763: PUSH
51764: LD_OWVAR 2
51768: PPUSH
51769: LD_VAR 0 1
51773: PPUSH
51774: CALL_OW 81
51778: PUSH
51779: LD_INT 1
51781: NONEQUAL
51782: AND
51783: OR
51784: IFFALSE 51807
// if HasPower ( i ) then
51786: LD_VAR 0 1
51790: PPUSH
51791: CALL 51866 0 1
51795: IFFALSE 51807
// begin canWin := false ;
51797: LD_ADDR_VAR 0 2
51801: PUSH
51802: LD_INT 0
51804: ST_TO_ADDR
// break ;
51805: GO 51809
// end ;
51807: GO 51691
51809: POP
51810: POP
// if canWin then
51811: LD_VAR 0 2
51815: IFFALSE 51822
// enable ( mpWin ) else
51817: LD_INT 101
51819: ENABLE_MARKED
51820: GO 51823
// enable ;
51822: ENABLE
// end ; end ;
51823: PPOPN 2
51825: END
// function CanWinLoose ; begin
51826: LD_INT 0
51828: PPUSH
// result := true ;
51829: LD_ADDR_VAR 0 1
51833: PUSH
51834: LD_INT 1
51836: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51837: CALL_OW 531
51841: PUSH
51842: CALL_OW 519
51846: PUSH
51847: LD_INT 1
51849: GREATER
51850: AND
51851: IFFALSE 51861
// result := false ;
51853: LD_ADDR_VAR 0 1
51857: PUSH
51858: LD_INT 0
51860: ST_TO_ADDR
// end ;
51861: LD_VAR 0 1
51865: RET
// function HasPower ( i ) ; begin
51866: LD_INT 0
51868: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51869: LD_ADDR_VAR 0 2
51873: PUSH
51874: LD_INT 22
51876: PUSH
51877: LD_VAR 0 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 21
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 33
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 33
51911: PUSH
51912: LD_INT 5
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PPUSH
51929: CALL_OW 69
51933: ST_TO_ADDR
// end ; end_of_file
51934: LD_VAR 0 2
51938: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51939: LD_EXP 37
51943: IFFALSE 51986
51945: GO 51947
51947: DISABLE
51948: LD_INT 0
51950: PPUSH
// begin for i := 1 to 8 do
51951: LD_ADDR_VAR 0 1
51955: PUSH
51956: DOUBLE
51957: LD_INT 1
51959: DEC
51960: ST_TO_ADDR
51961: LD_INT 8
51963: PUSH
51964: FOR_TO
51965: IFFALSE 51984
// SetRestrict ( b_depot , i , state_disabled ) ;
51967: LD_INT 0
51969: PPUSH
51970: LD_VAR 0 1
51974: PPUSH
51975: LD_INT 0
51977: PPUSH
51978: CALL_OW 324
51982: GO 51964
51984: POP
51985: POP
// end ;
51986: PPOPN 1
51988: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51989: LD_EXP 37
51993: PUSH
51994: CALL 52199 0 0
51998: AND
51999: PUSH
52000: LD_OWVAR 4
52004: AND
52005: IFFALSE 52196
52007: GO 52009
52009: DISABLE
52010: LD_INT 0
52012: PPUSH
52013: PPUSH
// begin canWin := false ;
52014: LD_ADDR_VAR 0 2
52018: PUSH
52019: LD_INT 0
52021: ST_TO_ADDR
// if not HasPower ( your_side ) then
52022: LD_OWVAR 2
52026: PPUSH
52027: CALL 52239 0 1
52031: NOT
52032: IFFALSE 52043
// begin Multiplayer_Loose_Message ;
52034: CALL_OW 521
// enable ( mpLose ) ;
52038: LD_INT 102
52040: ENABLE_MARKED
// end else
52041: GO 52196
// begin canWin := true ;
52043: LD_ADDR_VAR 0 2
52047: PUSH
52048: LD_INT 1
52050: ST_TO_ADDR
// for i := 1 to 8 do
52051: LD_ADDR_VAR 0 1
52055: PUSH
52056: DOUBLE
52057: LD_INT 1
52059: DEC
52060: ST_TO_ADDR
52061: LD_INT 8
52063: PUSH
52064: FOR_TO
52065: IFFALSE 52182
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52067: LD_EXP 5
52071: PUSH
52072: LD_VAR 0 1
52076: ARRAY
52077: PUSH
52078: LD_VAR 0 1
52082: PPUSH
52083: CALL_OW 108
52087: AND
52088: PUSH
52089: LD_VAR 0 1
52093: PUSH
52094: LD_OWVAR 2
52098: NONEQUAL
52099: AND
52100: IFFALSE 52180
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52102: LD_EXP 6
52106: PUSH
52107: LD_VAR 0 1
52111: ARRAY
52112: NOT
52113: PUSH
52114: LD_EXP 6
52118: PUSH
52119: LD_VAR 0 1
52123: ARRAY
52124: PUSH
52125: LD_EXP 6
52129: PUSH
52130: LD_OWVAR 2
52134: ARRAY
52135: NONEQUAL
52136: PUSH
52137: LD_OWVAR 2
52141: PPUSH
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 81
52151: PUSH
52152: LD_INT 1
52154: NONEQUAL
52155: AND
52156: OR
52157: IFFALSE 52180
// if HasPower ( i ) then
52159: LD_VAR 0 1
52163: PPUSH
52164: CALL 52239 0 1
52168: IFFALSE 52180
// begin canWin := false ;
52170: LD_ADDR_VAR 0 2
52174: PUSH
52175: LD_INT 0
52177: ST_TO_ADDR
// break ;
52178: GO 52182
// end ;
52180: GO 52064
52182: POP
52183: POP
// if canWin then
52184: LD_VAR 0 2
52188: IFFALSE 52195
// enable ( mpWin ) else
52190: LD_INT 101
52192: ENABLE_MARKED
52193: GO 52196
// enable ;
52195: ENABLE
// end ; end ;
52196: PPOPN 2
52198: END
// function CanWinLoose ; begin
52199: LD_INT 0
52201: PPUSH
// result := true ;
52202: LD_ADDR_VAR 0 1
52206: PUSH
52207: LD_INT 1
52209: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52210: CALL_OW 531
52214: PUSH
52215: CALL_OW 519
52219: PUSH
52220: LD_INT 1
52222: GREATER
52223: AND
52224: IFFALSE 52234
// result := false ;
52226: LD_ADDR_VAR 0 1
52230: PUSH
52231: LD_INT 0
52233: ST_TO_ADDR
// end ;
52234: LD_VAR 0 1
52238: RET
// function HasPower ( i ) ; begin
52239: LD_INT 0
52241: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52242: LD_INT 22
52244: PUSH
52245: LD_VAR 0 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 30
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 30
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PPUSH
52286: CALL_OW 69
52290: NOT
52291: IFFALSE 52295
// exit ;
52293: GO 52360
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52295: LD_ADDR_VAR 0 2
52299: PUSH
52300: LD_INT 22
52302: PUSH
52303: LD_VAR 0 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 21
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 33
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 33
52337: PUSH
52338: LD_INT 5
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PPUSH
52355: CALL_OW 69
52359: ST_TO_ADDR
// end ; end_of_file
52360: LD_VAR 0 2
52364: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52365: LD_EXP 37
52369: IFFALSE 52708
52371: GO 52373
52373: DISABLE
52374: LD_INT 0
52376: PPUSH
52377: PPUSH
52378: PPUSH
// begin mpKingPoints := [ ] ;
52379: LD_ADDR_EXP 42
52383: PUSH
52384: EMPTY
52385: ST_TO_ADDR
// if mpTeamGame then
52386: LD_EXP 9
52390: IFFALSE 52444
// begin for i := 1 to Count ( mpTeams ) do
52392: LD_ADDR_VAR 0 1
52396: PUSH
52397: DOUBLE
52398: LD_INT 1
52400: DEC
52401: ST_TO_ADDR
52402: LD_EXP 8
52406: PPUSH
52407: CALL 5112 0 1
52411: PUSH
52412: FOR_TO
52413: IFFALSE 52440
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52415: LD_ADDR_EXP 42
52419: PUSH
52420: LD_EXP 42
52424: PPUSH
52425: LD_VAR 0 1
52429: PPUSH
52430: LD_INT 0
52432: PPUSH
52433: CALL_OW 1
52437: ST_TO_ADDR
52438: GO 52412
52440: POP
52441: POP
// end else
52442: GO 52487
// begin for i := 1 to 8 do
52444: LD_ADDR_VAR 0 1
52448: PUSH
52449: DOUBLE
52450: LD_INT 1
52452: DEC
52453: ST_TO_ADDR
52454: LD_INT 8
52456: PUSH
52457: FOR_TO
52458: IFFALSE 52485
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52460: LD_ADDR_EXP 42
52464: PUSH
52465: LD_EXP 42
52469: PPUSH
52470: LD_VAR 0 1
52474: PPUSH
52475: LD_INT 0
52477: PPUSH
52478: CALL_OW 1
52482: ST_TO_ADDR
52483: GO 52457
52485: POP
52486: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52487: LD_ADDR_VAR 0 3
52491: PUSH
52492: LD_INT 73
52494: PPUSH
52495: LD_INT 0
52497: PPUSH
52498: CALL_OW 517
52502: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52503: LD_ADDR_VAR 0 1
52507: PUSH
52508: DOUBLE
52509: LD_INT 1
52511: DEC
52512: ST_TO_ADDR
52513: LD_VAR 0 3
52517: PUSH
52518: LD_INT 1
52520: ARRAY
52521: PUSH
52522: FOR_TO
52523: IFFALSE 52590
// for j := 1 to 8 do
52525: LD_ADDR_VAR 0 2
52529: PUSH
52530: DOUBLE
52531: LD_INT 1
52533: DEC
52534: ST_TO_ADDR
52535: LD_INT 8
52537: PUSH
52538: FOR_TO
52539: IFFALSE 52586
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52541: LD_VAR 0 3
52545: PUSH
52546: LD_INT 1
52548: ARRAY
52549: PUSH
52550: LD_VAR 0 1
52554: ARRAY
52555: PPUSH
52556: LD_VAR 0 3
52560: PUSH
52561: LD_INT 2
52563: ARRAY
52564: PUSH
52565: LD_VAR 0 1
52569: ARRAY
52570: PPUSH
52571: LD_VAR 0 2
52575: PPUSH
52576: LD_INT 12
52578: NEG
52579: PPUSH
52580: CALL_OW 330
52584: GO 52538
52586: POP
52587: POP
52588: GO 52522
52590: POP
52591: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52592: LD_EXP 32
52596: PPUSH
52597: LD_INT 1
52599: PPUSH
52600: CALL_OW 424
// UpdateCounter ;
52604: CALL 53210 0 0
// repeat wait ( 0 0$1 ) ;
52608: LD_INT 35
52610: PPUSH
52611: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52615: LD_ADDR_VAR 0 3
52619: PUSH
52620: LD_EXP 32
52624: PPUSH
52625: LD_INT 3
52627: PUSH
52628: LD_INT 57
52630: PUSH
52631: EMPTY
52632: LIST
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 50
52640: PUSH
52641: EMPTY
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 30
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 30
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: PPUSH
52677: CALL_OW 70
52681: ST_TO_ADDR
// if not tmp then
52682: LD_VAR 0 3
52686: NOT
52687: IFFALSE 52691
// continue ;
52689: GO 52608
// AddPoints ( tmp ) ;
52691: LD_VAR 0 3
52695: PPUSH
52696: CALL 52888 0 1
// UpdateCounter ;
52700: CALL 53210 0 0
// until false ;
52704: LD_INT 0
52706: IFFALSE 52608
// end ;
52708: PPOPN 3
52710: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52711: LD_EXP 37
52715: PUSH
52716: LD_EXP 35
52720: AND
52721: IFFALSE 52885
52723: GO 52725
52725: DISABLE
52726: LD_INT 0
52728: PPUSH
52729: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52730: LD_ADDR_VAR 0 2
52734: PUSH
52735: LD_INT 73
52737: PPUSH
52738: LD_INT 0
52740: PPUSH
52741: CALL_OW 517
52745: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52746: LD_ADDR_VAR 0 1
52750: PUSH
52751: DOUBLE
52752: LD_INT 1
52754: DEC
52755: ST_TO_ADDR
52756: LD_VAR 0 2
52760: PUSH
52761: LD_INT 1
52763: ARRAY
52764: PUSH
52765: FOR_TO
52766: IFFALSE 52807
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52768: LD_VAR 0 2
52772: PUSH
52773: LD_INT 1
52775: ARRAY
52776: PUSH
52777: LD_VAR 0 1
52781: ARRAY
52782: PPUSH
52783: LD_VAR 0 2
52787: PUSH
52788: LD_INT 2
52790: ARRAY
52791: PUSH
52792: LD_VAR 0 1
52796: ARRAY
52797: PPUSH
52798: LD_INT 125
52800: PPUSH
52801: CALL_OW 495
52805: GO 52765
52807: POP
52808: POP
// repeat wait ( mpEmissions ) ;
52809: LD_EXP 35
52813: PPUSH
52814: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52818: LD_ADDR_VAR 0 1
52822: PUSH
52823: DOUBLE
52824: LD_INT 1
52826: DEC
52827: ST_TO_ADDR
52828: LD_VAR 0 2
52832: PUSH
52833: LD_INT 1
52835: ARRAY
52836: PUSH
52837: FOR_TO
52838: IFFALSE 52879
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52840: LD_VAR 0 2
52844: PUSH
52845: LD_INT 1
52847: ARRAY
52848: PUSH
52849: LD_VAR 0 1
52853: ARRAY
52854: PPUSH
52855: LD_VAR 0 2
52859: PUSH
52860: LD_INT 2
52862: ARRAY
52863: PUSH
52864: LD_VAR 0 1
52868: ARRAY
52869: PPUSH
52870: LD_INT 15
52872: PPUSH
52873: CALL_OW 495
52877: GO 52837
52879: POP
52880: POP
// until false ;
52881: LD_INT 0
52883: IFFALSE 52809
// end ;
52885: PPOPN 2
52887: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52888: LD_INT 0
52890: PPUSH
52891: PPUSH
52892: PPUSH
52893: PPUSH
52894: PPUSH
// if mpTeamGame then
52895: LD_EXP 9
52899: IFFALSE 53096
// begin first := depots [ 1 ] ;
52901: LD_ADDR_VAR 0 4
52905: PUSH
52906: LD_VAR 0 1
52910: PUSH
52911: LD_INT 1
52913: ARRAY
52914: ST_TO_ADDR
// side := GetSide ( first ) ;
52915: LD_ADDR_VAR 0 6
52919: PUSH
52920: LD_VAR 0 4
52924: PPUSH
52925: CALL_OW 255
52929: ST_TO_ADDR
// for i := 1 to mpTeams do
52930: LD_ADDR_VAR 0 3
52934: PUSH
52935: DOUBLE
52936: LD_INT 1
52938: DEC
52939: ST_TO_ADDR
52940: LD_EXP 8
52944: PUSH
52945: FOR_TO
52946: IFFALSE 52980
// if side in mpTeams [ i ] then
52948: LD_VAR 0 6
52952: PUSH
52953: LD_EXP 8
52957: PUSH
52958: LD_VAR 0 3
52962: ARRAY
52963: IN
52964: IFFALSE 52978
// begin team := i ;
52966: LD_ADDR_VAR 0 5
52970: PUSH
52971: LD_VAR 0 3
52975: ST_TO_ADDR
// break ;
52976: GO 52980
// end ;
52978: GO 52945
52980: POP
52981: POP
// if not team then
52982: LD_VAR 0 5
52986: NOT
52987: IFFALSE 52991
// exit ;
52989: GO 53205
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52991: LD_EXP 32
52995: PPUSH
52996: LD_INT 81
52998: PUSH
52999: LD_VAR 0 6
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PPUSH
53008: CALL_OW 70
53012: IFFALSE 53016
// exit ;
53014: GO 53205
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
53016: LD_ADDR_EXP 42
53020: PUSH
53021: LD_EXP 42
53025: PPUSH
53026: LD_VAR 0 5
53030: PPUSH
53031: LD_EXP 42
53035: PUSH
53036: LD_VAR 0 5
53040: ARRAY
53041: PUSH
53042: LD_INT 1
53044: PLUS
53045: PPUSH
53046: CALL_OW 1
53050: ST_TO_ADDR
// for i in mpTeams [ team ] do
53051: LD_ADDR_VAR 0 3
53055: PUSH
53056: LD_EXP 8
53060: PUSH
53061: LD_VAR 0 5
53065: ARRAY
53066: PUSH
53067: FOR_IN
53068: IFFALSE 53092
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
53070: LD_VAR 0 3
53074: PPUSH
53075: LD_EXP 42
53079: PUSH
53080: LD_VAR 0 5
53084: ARRAY
53085: PPUSH
53086: CALL_OW 506
53090: GO 53067
53092: POP
53093: POP
// end else
53094: GO 53205
// begin first := depots [ 1 ] ;
53096: LD_ADDR_VAR 0 4
53100: PUSH
53101: LD_VAR 0 1
53105: PUSH
53106: LD_INT 1
53108: ARRAY
53109: ST_TO_ADDR
// side := GetSide ( first ) ;
53110: LD_ADDR_VAR 0 6
53114: PUSH
53115: LD_VAR 0 4
53119: PPUSH
53120: CALL_OW 255
53124: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
53125: LD_EXP 32
53129: PPUSH
53130: LD_INT 81
53132: PUSH
53133: LD_VAR 0 6
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PPUSH
53142: CALL_OW 70
53146: IFFALSE 53150
// exit ;
53148: GO 53205
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
53150: LD_ADDR_EXP 42
53154: PUSH
53155: LD_EXP 42
53159: PPUSH
53160: LD_VAR 0 6
53164: PPUSH
53165: LD_EXP 42
53169: PUSH
53170: LD_VAR 0 6
53174: ARRAY
53175: PUSH
53176: LD_INT 1
53178: PLUS
53179: PPUSH
53180: CALL_OW 1
53184: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
53185: LD_VAR 0 6
53189: PPUSH
53190: LD_EXP 42
53194: PUSH
53195: LD_VAR 0 6
53199: ARRAY
53200: PPUSH
53201: CALL_OW 506
// end ; end ;
53205: LD_VAR 0 2
53209: RET
// function UpdateCounter ; var i ; begin
53210: LD_INT 0
53212: PPUSH
53213: PPUSH
// result := [ ] ;
53214: LD_ADDR_VAR 0 1
53218: PUSH
53219: EMPTY
53220: ST_TO_ADDR
// if mpTeamGame then
53221: LD_EXP 9
53225: IFFALSE 53292
// begin for i := 1 to mpTeams do
53227: LD_ADDR_VAR 0 2
53231: PUSH
53232: DOUBLE
53233: LD_INT 1
53235: DEC
53236: ST_TO_ADDR
53237: LD_EXP 8
53241: PUSH
53242: FOR_TO
53243: IFFALSE 53288
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53245: LD_ADDR_VAR 0 1
53249: PUSH
53250: LD_VAR 0 1
53254: PUSH
53255: LD_STRING #KingoftheHill-Team
53257: PUSH
53258: LD_VAR 0 2
53262: PUSH
53263: LD_EXP 42
53267: PUSH
53268: LD_VAR 0 2
53272: ARRAY
53273: PUSH
53274: LD_EXP 33
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: ADD
53285: ST_TO_ADDR
53286: GO 53242
53288: POP
53289: POP
// end else
53290: GO 53365
// begin for i := 1 to 8 do
53292: LD_ADDR_VAR 0 2
53296: PUSH
53297: DOUBLE
53298: LD_INT 1
53300: DEC
53301: ST_TO_ADDR
53302: LD_INT 8
53304: PUSH
53305: FOR_TO
53306: IFFALSE 53363
// if mpSidePositions [ i ] then
53308: LD_EXP 5
53312: PUSH
53313: LD_VAR 0 2
53317: ARRAY
53318: IFFALSE 53361
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53320: LD_ADDR_VAR 0 1
53324: PUSH
53325: LD_VAR 0 1
53329: PUSH
53330: LD_STRING #KingoftheHill-Player
53332: PUSH
53333: LD_VAR 0 2
53337: PUSH
53338: LD_EXP 42
53342: PUSH
53343: LD_VAR 0 2
53347: ARRAY
53348: PUSH
53349: LD_EXP 33
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: ADD
53360: ST_TO_ADDR
53361: GO 53305
53363: POP
53364: POP
// end ; mpDisplayStrings := result ;
53365: LD_ADDR_EXP 36
53369: PUSH
53370: LD_VAR 0 1
53374: ST_TO_ADDR
// end ;
53375: LD_VAR 0 1
53379: RET
// export function HowMuchPointsKing ( side ) ; begin
53380: LD_INT 0
53382: PPUSH
// result := HowMuchPoints ( side ) ;
53383: LD_ADDR_VAR 0 2
53387: PUSH
53388: LD_VAR 0 1
53392: PPUSH
53393: CALL 53403 0 1
53397: ST_TO_ADDR
// end ;
53398: LD_VAR 0 2
53402: RET
// function HowMuchPoints ( side ) ; var i ; begin
53403: LD_INT 0
53405: PPUSH
53406: PPUSH
// if mpTeamGame then
53407: LD_EXP 9
53411: IFFALSE 53480
// begin for i := 1 to Count ( mpTeams ) do
53413: LD_ADDR_VAR 0 3
53417: PUSH
53418: DOUBLE
53419: LD_INT 1
53421: DEC
53422: ST_TO_ADDR
53423: LD_EXP 8
53427: PPUSH
53428: CALL 5112 0 1
53432: PUSH
53433: FOR_TO
53434: IFFALSE 53476
// begin if side in mpTeams [ i ] then
53436: LD_VAR 0 1
53440: PUSH
53441: LD_EXP 8
53445: PUSH
53446: LD_VAR 0 3
53450: ARRAY
53451: IN
53452: IFFALSE 53474
// begin result := mpKingPoints [ i ] ;
53454: LD_ADDR_VAR 0 2
53458: PUSH
53459: LD_EXP 42
53463: PUSH
53464: LD_VAR 0 3
53468: ARRAY
53469: ST_TO_ADDR
// exit ;
53470: POP
53471: POP
53472: GO 53496
// end ; end ;
53474: GO 53433
53476: POP
53477: POP
// end else
53478: GO 53496
// result := mpKingPoints [ side ] ;
53480: LD_ADDR_VAR 0 2
53484: PUSH
53485: LD_EXP 42
53489: PUSH
53490: LD_VAR 0 1
53494: ARRAY
53495: ST_TO_ADDR
// end ;
53496: LD_VAR 0 2
53500: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53501: LD_EXP 37
53505: PUSH
53506: CALL 53828 0 0
53510: AND
53511: PUSH
53512: LD_OWVAR 4
53516: AND
53517: IFFALSE 53753
53519: GO 53521
53521: DISABLE
53522: LD_INT 0
53524: PPUSH
53525: PPUSH
// begin canWin := false ;
53526: LD_ADDR_VAR 0 2
53530: PUSH
53531: LD_INT 0
53533: ST_TO_ADDR
// if not HasPower ( your_side ) then
53534: LD_OWVAR 2
53538: PPUSH
53539: CALL 53868 0 1
53543: NOT
53544: IFFALSE 53555
// begin Multiplayer_Loose_Message ;
53546: CALL_OW 521
// enable ( mpLose ) ;
53550: LD_INT 102
53552: ENABLE_MARKED
// end else
53553: GO 53753
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53555: LD_ADDR_VAR 0 2
53559: PUSH
53560: LD_OWVAR 2
53564: PPUSH
53565: CALL 53403 0 1
53569: PUSH
53570: LD_EXP 33
53574: GREATEREQUAL
53575: PUSH
53576: LD_OWVAR 2
53580: PPUSH
53581: CALL 53868 0 1
53585: AND
53586: PUSH
53587: CALL 53756 0 0
53591: NOT
53592: OR
53593: ST_TO_ADDR
// for i := 1 to 8 do
53594: LD_ADDR_VAR 0 1
53598: PUSH
53599: DOUBLE
53600: LD_INT 1
53602: DEC
53603: ST_TO_ADDR
53604: LD_INT 8
53606: PUSH
53607: FOR_TO
53608: IFFALSE 53739
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53610: LD_EXP 5
53614: PUSH
53615: LD_VAR 0 1
53619: ARRAY
53620: PUSH
53621: LD_VAR 0 1
53625: PPUSH
53626: CALL_OW 108
53630: AND
53631: PUSH
53632: LD_VAR 0 1
53636: PUSH
53637: LD_OWVAR 2
53641: NONEQUAL
53642: AND
53643: IFFALSE 53737
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53645: LD_EXP 6
53649: PUSH
53650: LD_VAR 0 1
53654: ARRAY
53655: NOT
53656: PUSH
53657: LD_EXP 6
53661: PUSH
53662: LD_VAR 0 1
53666: ARRAY
53667: PUSH
53668: LD_EXP 6
53672: PUSH
53673: LD_OWVAR 2
53677: ARRAY
53678: NONEQUAL
53679: PUSH
53680: LD_OWVAR 2
53684: PPUSH
53685: LD_VAR 0 1
53689: PPUSH
53690: CALL_OW 81
53694: PUSH
53695: LD_INT 1
53697: NONEQUAL
53698: AND
53699: OR
53700: IFFALSE 53737
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53702: LD_VAR 0 1
53706: PPUSH
53707: CALL 53403 0 1
53711: PUSH
53712: LD_EXP 33
53716: GREATEREQUAL
53717: PUSH
53718: LD_VAR 0 1
53722: PPUSH
53723: CALL 53868 0 1
53727: AND
53728: IFFALSE 53737
// begin enable ( mpLose ) ;
53730: LD_INT 102
53732: ENABLE_MARKED
// exit ;
53733: POP
53734: POP
53735: GO 53753
// end ;
53737: GO 53607
53739: POP
53740: POP
// if canWin then
53741: LD_VAR 0 2
53745: IFFALSE 53752
// enable ( mpWin ) else
53747: LD_INT 101
53749: ENABLE_MARKED
53750: GO 53753
// enable ;
53752: ENABLE
// end ; end ;
53753: PPOPN 2
53755: END
// function EnemiesInGame ; var i ; begin
53756: LD_INT 0
53758: PPUSH
53759: PPUSH
// result := false ;
53760: LD_ADDR_VAR 0 1
53764: PUSH
53765: LD_INT 0
53767: ST_TO_ADDR
// for i := 1 to 8 do
53768: LD_ADDR_VAR 0 2
53772: PUSH
53773: DOUBLE
53774: LD_INT 1
53776: DEC
53777: ST_TO_ADDR
53778: LD_INT 8
53780: PUSH
53781: FOR_TO
53782: IFFALSE 53821
// if i <> your_side and HasPower ( i ) then
53784: LD_VAR 0 2
53788: PUSH
53789: LD_OWVAR 2
53793: NONEQUAL
53794: PUSH
53795: LD_VAR 0 2
53799: PPUSH
53800: CALL 53868 0 1
53804: AND
53805: IFFALSE 53819
// begin result := true ;
53807: LD_ADDR_VAR 0 1
53811: PUSH
53812: LD_INT 1
53814: ST_TO_ADDR
// exit ;
53815: POP
53816: POP
53817: GO 53823
// end ;
53819: GO 53781
53821: POP
53822: POP
// end ;
53823: LD_VAR 0 1
53827: RET
// function CanWinLoose ; begin
53828: LD_INT 0
53830: PPUSH
// result := true ;
53831: LD_ADDR_VAR 0 1
53835: PUSH
53836: LD_INT 1
53838: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53839: CALL_OW 531
53843: PUSH
53844: CALL_OW 519
53848: PUSH
53849: LD_INT 1
53851: GREATER
53852: AND
53853: IFFALSE 53863
// result := false ;
53855: LD_ADDR_VAR 0 1
53859: PUSH
53860: LD_INT 0
53862: ST_TO_ADDR
// end ;
53863: LD_VAR 0 1
53867: RET
// function HasPower ( i ) ; begin
53868: LD_INT 0
53870: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53871: LD_ADDR_VAR 0 2
53875: PUSH
53876: LD_INT 22
53878: PUSH
53879: LD_VAR 0 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 21
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 33
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 33
53913: PUSH
53914: LD_INT 5
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PPUSH
53931: CALL_OW 69
53935: ST_TO_ADDR
// end ; end_of_file end_of_file
53936: LD_VAR 0 2
53940: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53941: LD_VAR 0 1
53945: PUSH
53946: LD_INT 200
53948: DOUBLE
53949: GREATEREQUAL
53950: IFFALSE 53958
53952: LD_INT 299
53954: DOUBLE
53955: LESSEQUAL
53956: IFTRUE 53960
53958: GO 53992
53960: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53961: LD_VAR 0 1
53965: PPUSH
53966: LD_VAR 0 2
53970: PPUSH
53971: LD_VAR 0 3
53975: PPUSH
53976: LD_VAR 0 4
53980: PPUSH
53981: LD_VAR 0 5
53985: PPUSH
53986: CALL 54769 0 5
53990: GO 54069
53992: LD_INT 300
53994: DOUBLE
53995: GREATEREQUAL
53996: IFFALSE 54004
53998: LD_INT 399
54000: DOUBLE
54001: LESSEQUAL
54002: IFTRUE 54006
54004: GO 54068
54006: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54007: LD_VAR 0 1
54011: PPUSH
54012: LD_VAR 0 2
54016: PPUSH
54017: LD_VAR 0 3
54021: PPUSH
54022: LD_VAR 0 4
54026: PPUSH
54027: LD_VAR 0 5
54031: PPUSH
54032: LD_VAR 0 6
54036: PPUSH
54037: LD_VAR 0 7
54041: PPUSH
54042: LD_VAR 0 8
54046: PPUSH
54047: LD_VAR 0 9
54051: PPUSH
54052: LD_VAR 0 10
54056: PPUSH
54057: LD_VAR 0 11
54061: PPUSH
54062: CALL 60116 0 11
54066: GO 54069
54068: POP
// end ;
54069: PPOPN 11
54071: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54072: LD_VAR 0 1
54076: PPUSH
54077: LD_VAR 0 2
54081: PPUSH
54082: LD_VAR 0 3
54086: PPUSH
54087: LD_VAR 0 4
54091: PPUSH
54092: LD_VAR 0 5
54096: PPUSH
54097: CALL 54154 0 5
// end ; end_of_file
54101: PPOPN 5
54103: END
// export function SOS_UnitDestroyed ( un ) ; begin
54104: LD_INT 0
54106: PPUSH
// ComRadiation ( un ) ;
54107: LD_VAR 0 1
54111: PPUSH
54112: CALL 55173 0 1
// end ;
54116: LD_VAR 0 2
54120: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54121: LD_INT 0
54123: PPUSH
// ComRadiation ( un ) ;
54124: LD_VAR 0 1
54128: PPUSH
54129: CALL 55173 0 1
// end ;
54133: LD_VAR 0 2
54137: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54138: LD_INT 0
54140: PPUSH
// end ;
54141: LD_VAR 0 4
54145: RET
// export function SOS_Command ( cmd ) ; begin
54146: LD_INT 0
54148: PPUSH
// end ;
54149: LD_VAR 0 2
54153: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54154: LD_INT 0
54156: PPUSH
// end ;
54157: LD_VAR 0 6
54161: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
54162: LD_INT 0
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
// if not vehicle or not factory then
54168: LD_VAR 0 1
54172: NOT
54173: PUSH
54174: LD_VAR 0 2
54178: NOT
54179: OR
54180: IFFALSE 54184
// exit ;
54182: GO 54764
// if not factoryWaypoints then
54184: LD_EXP 53
54188: NOT
54189: IFFALSE 54193
// exit ;
54191: GO 54764
// for i := 1 to Count ( factoryWaypoints ) do
54193: LD_ADDR_VAR 0 4
54197: PUSH
54198: DOUBLE
54199: LD_INT 1
54201: DEC
54202: ST_TO_ADDR
54203: LD_EXP 53
54207: PPUSH
54208: CALL 5112 0 1
54212: PUSH
54213: FOR_TO
54214: IFFALSE 54762
// if factoryWaypoints [ i ] [ 2 ] = factory then
54216: LD_EXP 53
54220: PUSH
54221: LD_VAR 0 4
54225: ARRAY
54226: PUSH
54227: LD_INT 2
54229: ARRAY
54230: PUSH
54231: LD_VAR 0 2
54235: EQUAL
54236: IFFALSE 54760
// begin if GetControl ( vehicle ) = control_manual then
54238: LD_VAR 0 1
54242: PPUSH
54243: CALL_OW 263
54247: PUSH
54248: LD_INT 1
54250: EQUAL
54251: IFFALSE 54613
// begin driver := IsDrivenBy ( vehicle ) ;
54253: LD_ADDR_VAR 0 5
54257: PUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: CALL_OW 311
54267: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54268: LD_VAR 0 5
54272: PUSH
54273: LD_EXP 54
54277: IN
54278: PUSH
54279: LD_VAR 0 1
54283: PUSH
54284: LD_EXP 54
54288: IN
54289: OR
54290: IFFALSE 54296
// exit ;
54292: POP
54293: POP
54294: GO 54764
// if not HasTask ( driver ) then
54296: LD_VAR 0 5
54300: PPUSH
54301: CALL_OW 314
54305: NOT
54306: IFFALSE 54611
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54308: LD_ADDR_EXP 54
54312: PUSH
54313: LD_EXP 54
54317: PPUSH
54318: LD_VAR 0 5
54322: PPUSH
54323: CALL 40721 0 2
54327: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54328: LD_ADDR_EXP 54
54332: PUSH
54333: LD_EXP 54
54337: PPUSH
54338: LD_VAR 0 1
54342: PPUSH
54343: CALL 40721 0 2
54347: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54348: LD_ADDR_VAR 0 6
54352: PUSH
54353: LD_EXP 53
54357: PUSH
54358: LD_VAR 0 4
54362: ARRAY
54363: PUSH
54364: LD_INT 3
54366: ARRAY
54367: PPUSH
54368: LD_EXP 53
54372: PUSH
54373: LD_VAR 0 4
54377: ARRAY
54378: PUSH
54379: LD_INT 4
54381: ARRAY
54382: PPUSH
54383: CALL_OW 428
54387: ST_TO_ADDR
// if hex then
54388: LD_VAR 0 6
54392: IFFALSE 54410
// ComMoveUnit ( driver , hex ) else
54394: LD_VAR 0 5
54398: PPUSH
54399: LD_VAR 0 6
54403: PPUSH
54404: CALL_OW 112
54408: GO 54494
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54410: LD_VAR 0 1
54414: PPUSH
54415: LD_EXP 53
54419: PUSH
54420: LD_VAR 0 4
54424: ARRAY
54425: PUSH
54426: LD_INT 3
54428: ARRAY
54429: PPUSH
54430: LD_EXP 53
54434: PUSH
54435: LD_VAR 0 4
54439: ARRAY
54440: PUSH
54441: LD_INT 4
54443: ARRAY
54444: PPUSH
54445: CALL_OW 297
54449: PUSH
54450: LD_INT 0
54452: GREATER
54453: IFFALSE 54494
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54455: LD_VAR 0 5
54459: PPUSH
54460: LD_EXP 53
54464: PUSH
54465: LD_VAR 0 4
54469: ARRAY
54470: PUSH
54471: LD_INT 3
54473: ARRAY
54474: PPUSH
54475: LD_EXP 53
54479: PUSH
54480: LD_VAR 0 4
54484: ARRAY
54485: PUSH
54486: LD_INT 4
54488: ARRAY
54489: PPUSH
54490: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54494: LD_VAR 0 5
54498: PPUSH
54499: CALL_OW 181
// if Multiplayer then
54503: LD_OWVAR 4
54507: IFFALSE 54556
// begin repeat wait ( 10 ) ;
54509: LD_INT 10
54511: PPUSH
54512: CALL_OW 67
// until not IsInUnit ( driver ) ;
54516: LD_VAR 0 5
54520: PPUSH
54521: CALL_OW 310
54525: NOT
54526: IFFALSE 54509
// if not HasTask ( driver ) then
54528: LD_VAR 0 5
54532: PPUSH
54533: CALL_OW 314
54537: NOT
54538: IFFALSE 54554
// ComEnterUnit ( driver , factory ) ;
54540: LD_VAR 0 5
54544: PPUSH
54545: LD_VAR 0 2
54549: PPUSH
54550: CALL_OW 120
// end else
54554: GO 54570
// AddComEnterUnit ( driver , factory ) ;
54556: LD_VAR 0 5
54560: PPUSH
54561: LD_VAR 0 2
54565: PPUSH
54566: CALL_OW 180
// wait ( 0 0$1 ) ;
54570: LD_INT 35
54572: PPUSH
54573: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54577: LD_ADDR_EXP 54
54581: PUSH
54582: LD_EXP 54
54586: PUSH
54587: LD_VAR 0 5
54591: DIFF
54592: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54593: LD_ADDR_EXP 54
54597: PUSH
54598: LD_EXP 54
54602: PUSH
54603: LD_VAR 0 1
54607: DIFF
54608: ST_TO_ADDR
// break ;
54609: GO 54762
// end ; end else
54611: GO 54760
// if GetControl ( vehicle ) = control_remote then
54613: LD_VAR 0 1
54617: PPUSH
54618: CALL_OW 263
54622: PUSH
54623: LD_INT 2
54625: EQUAL
54626: IFFALSE 54712
// begin wait ( 0 0$2 ) ;
54628: LD_INT 70
54630: PPUSH
54631: CALL_OW 67
// repeat wait ( 10 ) ;
54635: LD_INT 10
54637: PPUSH
54638: CALL_OW 67
// Connect ( vehicle ) ;
54642: LD_VAR 0 1
54646: PPUSH
54647: CALL 11318 0 1
// until IsControledBy ( vehicle ) ;
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL_OW 312
54660: IFFALSE 54635
// wait ( 10 ) ;
54662: LD_INT 10
54664: PPUSH
54665: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54669: LD_VAR 0 1
54673: PPUSH
54674: LD_EXP 53
54678: PUSH
54679: LD_VAR 0 4
54683: ARRAY
54684: PUSH
54685: LD_INT 3
54687: ARRAY
54688: PPUSH
54689: LD_EXP 53
54693: PUSH
54694: LD_VAR 0 4
54698: ARRAY
54699: PUSH
54700: LD_INT 4
54702: ARRAY
54703: PPUSH
54704: CALL_OW 111
// break ;
54708: GO 54762
// end else
54710: GO 54760
// begin wait ( 0 0$3 ) ;
54712: LD_INT 105
54714: PPUSH
54715: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54719: LD_VAR 0 1
54723: PPUSH
54724: LD_EXP 53
54728: PUSH
54729: LD_VAR 0 4
54733: ARRAY
54734: PUSH
54735: LD_INT 3
54737: ARRAY
54738: PPUSH
54739: LD_EXP 53
54743: PUSH
54744: LD_VAR 0 4
54748: ARRAY
54749: PUSH
54750: LD_INT 4
54752: ARRAY
54753: PPUSH
54754: CALL_OW 111
// break ;
54758: GO 54762
// end ; end ;
54760: GO 54213
54762: POP
54763: POP
// end ;
54764: LD_VAR 0 3
54768: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54769: LD_INT 0
54771: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54772: LD_VAR 0 1
54776: PUSH
54777: LD_INT 250
54779: EQUAL
54780: PUSH
54781: LD_VAR 0 2
54785: PPUSH
54786: CALL_OW 264
54790: PUSH
54791: LD_INT 81
54793: EQUAL
54794: AND
54795: IFFALSE 54816
// MinerPlaceMine ( unit , x , y ) ;
54797: LD_VAR 0 2
54801: PPUSH
54802: LD_VAR 0 4
54806: PPUSH
54807: LD_VAR 0 5
54811: PPUSH
54812: CALL 57908 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54816: LD_VAR 0 1
54820: PUSH
54821: LD_INT 251
54823: EQUAL
54824: PUSH
54825: LD_VAR 0 2
54829: PPUSH
54830: CALL_OW 264
54834: PUSH
54835: LD_INT 81
54837: EQUAL
54838: AND
54839: IFFALSE 54860
// MinerDetonateMine ( unit , x , y ) ;
54841: LD_VAR 0 2
54845: PPUSH
54846: LD_VAR 0 4
54850: PPUSH
54851: LD_VAR 0 5
54855: PPUSH
54856: CALL 58183 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54860: LD_VAR 0 1
54864: PUSH
54865: LD_INT 252
54867: EQUAL
54868: PUSH
54869: LD_VAR 0 2
54873: PPUSH
54874: CALL_OW 264
54878: PUSH
54879: LD_INT 81
54881: EQUAL
54882: AND
54883: IFFALSE 54904
// MinerCreateMinefield ( unit , x , y ) ;
54885: LD_VAR 0 2
54889: PPUSH
54890: LD_VAR 0 4
54894: PPUSH
54895: LD_VAR 0 5
54899: PPUSH
54900: CALL 58600 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54904: LD_VAR 0 1
54908: PUSH
54909: LD_INT 253
54911: EQUAL
54912: PUSH
54913: LD_VAR 0 2
54917: PPUSH
54918: CALL_OW 257
54922: PUSH
54923: LD_INT 5
54925: EQUAL
54926: AND
54927: IFFALSE 54948
// ComBinocular ( unit , x , y ) ;
54929: LD_VAR 0 2
54933: PPUSH
54934: LD_VAR 0 4
54938: PPUSH
54939: LD_VAR 0 5
54943: PPUSH
54944: CALL 58969 0 3
// if selectedUnit then
54948: LD_VAR 0 3
54952: IFFALSE 55008
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54954: LD_VAR 0 1
54958: PUSH
54959: LD_INT 254
54961: EQUAL
54962: PUSH
54963: LD_VAR 0 2
54967: PPUSH
54968: CALL_OW 264
54972: PUSH
54973: LD_INT 99
54975: EQUAL
54976: AND
54977: PUSH
54978: LD_VAR 0 3
54982: PPUSH
54983: CALL_OW 263
54987: PUSH
54988: LD_INT 3
54990: EQUAL
54991: AND
54992: IFFALSE 55008
// HackDestroyVehicle ( unit , selectedUnit ) ;
54994: LD_VAR 0 2
54998: PPUSH
54999: LD_VAR 0 3
55003: PPUSH
55004: CALL 57272 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55008: LD_VAR 0 1
55012: PUSH
55013: LD_INT 255
55015: EQUAL
55016: PUSH
55017: LD_VAR 0 2
55021: PPUSH
55022: CALL_OW 264
55026: PUSH
55027: LD_INT 14
55029: PUSH
55030: LD_INT 53
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: IN
55037: AND
55038: PUSH
55039: LD_VAR 0 4
55043: PPUSH
55044: LD_VAR 0 5
55048: PPUSH
55049: CALL_OW 488
55053: AND
55054: IFFALSE 55078
// CutTreeXYR ( unit , x , y , 12 ) ;
55056: LD_VAR 0 2
55060: PPUSH
55061: LD_VAR 0 4
55065: PPUSH
55066: LD_VAR 0 5
55070: PPUSH
55071: LD_INT 12
55073: PPUSH
55074: CALL 55269 0 4
// if cmd = 256 then
55078: LD_VAR 0 1
55082: PUSH
55083: LD_INT 256
55085: EQUAL
55086: IFFALSE 55107
// SetFactoryWaypoint ( unit , x , y ) ;
55088: LD_VAR 0 2
55092: PPUSH
55093: LD_VAR 0 4
55097: PPUSH
55098: LD_VAR 0 5
55102: PPUSH
55103: CALL 60124 0 3
// if cmd = 257 then
55107: LD_VAR 0 1
55111: PUSH
55112: LD_INT 257
55114: EQUAL
55115: IFFALSE 55136
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55117: LD_VAR 0 2
55121: PPUSH
55122: LD_VAR 0 4
55126: PPUSH
55127: LD_VAR 0 5
55131: PPUSH
55132: CALL 60614 0 3
// if cmd = 258 then
55136: LD_VAR 0 1
55140: PUSH
55141: LD_INT 258
55143: EQUAL
55144: IFFALSE 55168
// BurnTreeXYR ( unit , x , y , 8 ) ;
55146: LD_VAR 0 2
55150: PPUSH
55151: LD_VAR 0 4
55155: PPUSH
55156: LD_VAR 0 5
55160: PPUSH
55161: LD_INT 8
55163: PPUSH
55164: CALL 55663 0 4
// end ;
55168: LD_VAR 0 6
55172: RET
// export function ComRadiation ( un ) ; var eff ; begin
55173: LD_INT 0
55175: PPUSH
55176: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55177: LD_VAR 0 1
55181: PPUSH
55182: CALL_OW 264
55186: PUSH
55187: LD_INT 91
55189: NONEQUAL
55190: IFFALSE 55194
// exit ;
55192: GO 55264
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55194: LD_INT 68
55196: PPUSH
55197: LD_VAR 0 1
55201: PPUSH
55202: CALL_OW 255
55206: PPUSH
55207: CALL_OW 321
55211: PUSH
55212: LD_INT 2
55214: EQUAL
55215: IFFALSE 55227
// eff := 50 else
55217: LD_ADDR_VAR 0 3
55221: PUSH
55222: LD_INT 50
55224: ST_TO_ADDR
55225: GO 55235
// eff := 25 ;
55227: LD_ADDR_VAR 0 3
55231: PUSH
55232: LD_INT 25
55234: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55235: LD_VAR 0 1
55239: PPUSH
55240: CALL_OW 250
55244: PPUSH
55245: LD_VAR 0 1
55249: PPUSH
55250: CALL_OW 251
55254: PPUSH
55255: LD_VAR 0 3
55259: PPUSH
55260: CALL_OW 495
// end ;
55264: LD_VAR 0 2
55268: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55269: LD_INT 0
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 302
55289: NOT
55290: PUSH
55291: LD_VAR 0 2
55295: PPUSH
55296: LD_VAR 0 3
55300: PPUSH
55301: CALL_OW 488
55305: NOT
55306: OR
55307: PUSH
55308: LD_VAR 0 4
55312: NOT
55313: OR
55314: IFFALSE 55318
// exit ;
55316: GO 55658
// list := [ ] ;
55318: LD_ADDR_VAR 0 13
55322: PUSH
55323: EMPTY
55324: ST_TO_ADDR
// if x - r < 0 then
55325: LD_VAR 0 2
55329: PUSH
55330: LD_VAR 0 4
55334: MINUS
55335: PUSH
55336: LD_INT 0
55338: LESS
55339: IFFALSE 55351
// min_x := 0 else
55341: LD_ADDR_VAR 0 7
55345: PUSH
55346: LD_INT 0
55348: ST_TO_ADDR
55349: GO 55367
// min_x := x - r ;
55351: LD_ADDR_VAR 0 7
55355: PUSH
55356: LD_VAR 0 2
55360: PUSH
55361: LD_VAR 0 4
55365: MINUS
55366: ST_TO_ADDR
// if y - r < 0 then
55367: LD_VAR 0 3
55371: PUSH
55372: LD_VAR 0 4
55376: MINUS
55377: PUSH
55378: LD_INT 0
55380: LESS
55381: IFFALSE 55393
// min_y := 0 else
55383: LD_ADDR_VAR 0 8
55387: PUSH
55388: LD_INT 0
55390: ST_TO_ADDR
55391: GO 55409
// min_y := y - r ;
55393: LD_ADDR_VAR 0 8
55397: PUSH
55398: LD_VAR 0 3
55402: PUSH
55403: LD_VAR 0 4
55407: MINUS
55408: ST_TO_ADDR
// max_x := x + r ;
55409: LD_ADDR_VAR 0 9
55413: PUSH
55414: LD_VAR 0 2
55418: PUSH
55419: LD_VAR 0 4
55423: PLUS
55424: ST_TO_ADDR
// max_y := y + r ;
55425: LD_ADDR_VAR 0 10
55429: PUSH
55430: LD_VAR 0 3
55434: PUSH
55435: LD_VAR 0 4
55439: PLUS
55440: ST_TO_ADDR
// for _x = min_x to max_x do
55441: LD_ADDR_VAR 0 11
55445: PUSH
55446: DOUBLE
55447: LD_VAR 0 7
55451: DEC
55452: ST_TO_ADDR
55453: LD_VAR 0 9
55457: PUSH
55458: FOR_TO
55459: IFFALSE 55576
// for _y = min_y to max_y do
55461: LD_ADDR_VAR 0 12
55465: PUSH
55466: DOUBLE
55467: LD_VAR 0 8
55471: DEC
55472: ST_TO_ADDR
55473: LD_VAR 0 10
55477: PUSH
55478: FOR_TO
55479: IFFALSE 55572
// begin if not ValidHex ( _x , _y ) then
55481: LD_VAR 0 11
55485: PPUSH
55486: LD_VAR 0 12
55490: PPUSH
55491: CALL_OW 488
55495: NOT
55496: IFFALSE 55500
// continue ;
55498: GO 55478
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55500: LD_VAR 0 11
55504: PPUSH
55505: LD_VAR 0 12
55509: PPUSH
55510: CALL_OW 351
55514: PUSH
55515: LD_VAR 0 11
55519: PPUSH
55520: LD_VAR 0 12
55524: PPUSH
55525: CALL_OW 554
55529: AND
55530: IFFALSE 55570
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55532: LD_ADDR_VAR 0 13
55536: PUSH
55537: LD_VAR 0 13
55541: PPUSH
55542: LD_VAR 0 13
55546: PUSH
55547: LD_INT 1
55549: PLUS
55550: PPUSH
55551: LD_VAR 0 11
55555: PUSH
55556: LD_VAR 0 12
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PPUSH
55565: CALL_OW 2
55569: ST_TO_ADDR
// end ;
55570: GO 55478
55572: POP
55573: POP
55574: GO 55458
55576: POP
55577: POP
// if not list then
55578: LD_VAR 0 13
55582: NOT
55583: IFFALSE 55587
// exit ;
55585: GO 55658
// for i in list do
55587: LD_ADDR_VAR 0 6
55591: PUSH
55592: LD_VAR 0 13
55596: PUSH
55597: FOR_IN
55598: IFFALSE 55656
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55600: LD_VAR 0 1
55604: PPUSH
55605: LD_STRING M
55607: PUSH
55608: LD_VAR 0 6
55612: PUSH
55613: LD_INT 1
55615: ARRAY
55616: PUSH
55617: LD_VAR 0 6
55621: PUSH
55622: LD_INT 2
55624: ARRAY
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: PPUSH
55650: CALL_OW 447
55654: GO 55597
55656: POP
55657: POP
// end ;
55658: LD_VAR 0 5
55662: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55663: LD_INT 0
55665: PPUSH
55666: PPUSH
55667: PPUSH
55668: PPUSH
55669: PPUSH
55670: PPUSH
55671: PPUSH
55672: PPUSH
55673: PPUSH
55674: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55675: LD_VAR 0 1
55679: PPUSH
55680: CALL_OW 302
55684: NOT
55685: PUSH
55686: LD_VAR 0 2
55690: PPUSH
55691: LD_VAR 0 3
55695: PPUSH
55696: CALL_OW 488
55700: NOT
55701: OR
55702: PUSH
55703: LD_VAR 0 4
55707: NOT
55708: OR
55709: IFFALSE 55713
// exit ;
55711: GO 56226
// list := [ ] ;
55713: LD_ADDR_VAR 0 13
55717: PUSH
55718: EMPTY
55719: ST_TO_ADDR
// if x - r < 0 then
55720: LD_VAR 0 2
55724: PUSH
55725: LD_VAR 0 4
55729: MINUS
55730: PUSH
55731: LD_INT 0
55733: LESS
55734: IFFALSE 55746
// min_x := 0 else
55736: LD_ADDR_VAR 0 7
55740: PUSH
55741: LD_INT 0
55743: ST_TO_ADDR
55744: GO 55762
// min_x := x - r ;
55746: LD_ADDR_VAR 0 7
55750: PUSH
55751: LD_VAR 0 2
55755: PUSH
55756: LD_VAR 0 4
55760: MINUS
55761: ST_TO_ADDR
// if y - r < 0 then
55762: LD_VAR 0 3
55766: PUSH
55767: LD_VAR 0 4
55771: MINUS
55772: PUSH
55773: LD_INT 0
55775: LESS
55776: IFFALSE 55788
// min_y := 0 else
55778: LD_ADDR_VAR 0 8
55782: PUSH
55783: LD_INT 0
55785: ST_TO_ADDR
55786: GO 55804
// min_y := y - r ;
55788: LD_ADDR_VAR 0 8
55792: PUSH
55793: LD_VAR 0 3
55797: PUSH
55798: LD_VAR 0 4
55802: MINUS
55803: ST_TO_ADDR
// max_x := x + r ;
55804: LD_ADDR_VAR 0 9
55808: PUSH
55809: LD_VAR 0 2
55813: PUSH
55814: LD_VAR 0 4
55818: PLUS
55819: ST_TO_ADDR
// max_y := y + r ;
55820: LD_ADDR_VAR 0 10
55824: PUSH
55825: LD_VAR 0 3
55829: PUSH
55830: LD_VAR 0 4
55834: PLUS
55835: ST_TO_ADDR
// for _x = min_x to max_x do
55836: LD_ADDR_VAR 0 11
55840: PUSH
55841: DOUBLE
55842: LD_VAR 0 7
55846: DEC
55847: ST_TO_ADDR
55848: LD_VAR 0 9
55852: PUSH
55853: FOR_TO
55854: IFFALSE 55971
// for _y = min_y to max_y do
55856: LD_ADDR_VAR 0 12
55860: PUSH
55861: DOUBLE
55862: LD_VAR 0 8
55866: DEC
55867: ST_TO_ADDR
55868: LD_VAR 0 10
55872: PUSH
55873: FOR_TO
55874: IFFALSE 55967
// begin if not ValidHex ( _x , _y ) then
55876: LD_VAR 0 11
55880: PPUSH
55881: LD_VAR 0 12
55885: PPUSH
55886: CALL_OW 488
55890: NOT
55891: IFFALSE 55895
// continue ;
55893: GO 55873
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55895: LD_VAR 0 11
55899: PPUSH
55900: LD_VAR 0 12
55904: PPUSH
55905: CALL_OW 351
55909: PUSH
55910: LD_VAR 0 11
55914: PPUSH
55915: LD_VAR 0 12
55919: PPUSH
55920: CALL_OW 554
55924: AND
55925: IFFALSE 55965
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55927: LD_ADDR_VAR 0 13
55931: PUSH
55932: LD_VAR 0 13
55936: PPUSH
55937: LD_VAR 0 13
55941: PUSH
55942: LD_INT 1
55944: PLUS
55945: PPUSH
55946: LD_VAR 0 11
55950: PUSH
55951: LD_VAR 0 12
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PPUSH
55960: CALL_OW 2
55964: ST_TO_ADDR
// end ;
55965: GO 55873
55967: POP
55968: POP
55969: GO 55853
55971: POP
55972: POP
// if not list then
55973: LD_VAR 0 13
55977: NOT
55978: IFFALSE 55982
// exit ;
55980: GO 56226
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55982: LD_ADDR_VAR 0 13
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: LD_VAR 0 13
55996: PPUSH
55997: LD_INT 1
55999: PPUSH
56000: LD_INT 1
56002: PPUSH
56003: CALL 8460 0 4
56007: ST_TO_ADDR
// ComStop ( flame ) ;
56008: LD_VAR 0 1
56012: PPUSH
56013: CALL_OW 141
// for i in list do
56017: LD_ADDR_VAR 0 6
56021: PUSH
56022: LD_VAR 0 13
56026: PUSH
56027: FOR_IN
56028: IFFALSE 56059
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56030: LD_VAR 0 1
56034: PPUSH
56035: LD_VAR 0 6
56039: PUSH
56040: LD_INT 1
56042: ARRAY
56043: PPUSH
56044: LD_VAR 0 6
56048: PUSH
56049: LD_INT 2
56051: ARRAY
56052: PPUSH
56053: CALL_OW 176
56057: GO 56027
56059: POP
56060: POP
// repeat wait ( 0 0$1 ) ;
56061: LD_INT 35
56063: PPUSH
56064: CALL_OW 67
// task := GetTaskList ( flame ) ;
56068: LD_ADDR_VAR 0 14
56072: PUSH
56073: LD_VAR 0 1
56077: PPUSH
56078: CALL_OW 437
56082: ST_TO_ADDR
// if not task then
56083: LD_VAR 0 14
56087: NOT
56088: IFFALSE 56092
// exit ;
56090: GO 56226
// if task [ 1 ] [ 1 ] <> | then
56092: LD_VAR 0 14
56096: PUSH
56097: LD_INT 1
56099: ARRAY
56100: PUSH
56101: LD_INT 1
56103: ARRAY
56104: PUSH
56105: LD_STRING |
56107: NONEQUAL
56108: IFFALSE 56112
// exit ;
56110: GO 56226
// _x := task [ 1 ] [ 2 ] ;
56112: LD_ADDR_VAR 0 11
56116: PUSH
56117: LD_VAR 0 14
56121: PUSH
56122: LD_INT 1
56124: ARRAY
56125: PUSH
56126: LD_INT 2
56128: ARRAY
56129: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56130: LD_ADDR_VAR 0 12
56134: PUSH
56135: LD_VAR 0 14
56139: PUSH
56140: LD_INT 1
56142: ARRAY
56143: PUSH
56144: LD_INT 3
56146: ARRAY
56147: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56148: LD_VAR 0 11
56152: PPUSH
56153: LD_VAR 0 12
56157: PPUSH
56158: CALL_OW 351
56162: NOT
56163: PUSH
56164: LD_VAR 0 11
56168: PPUSH
56169: LD_VAR 0 12
56173: PPUSH
56174: CALL_OW 554
56178: NOT
56179: OR
56180: IFFALSE 56214
// begin task := Delete ( task , 1 ) ;
56182: LD_ADDR_VAR 0 14
56186: PUSH
56187: LD_VAR 0 14
56191: PPUSH
56192: LD_INT 1
56194: PPUSH
56195: CALL_OW 3
56199: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56200: LD_VAR 0 1
56204: PPUSH
56205: LD_VAR 0 14
56209: PPUSH
56210: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56214: LD_VAR 0 1
56218: PPUSH
56219: CALL_OW 314
56223: NOT
56224: IFFALSE 56061
// end ;
56226: LD_VAR 0 5
56230: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56231: LD_EXP 43
56235: NOT
56236: IFFALSE 56286
56238: GO 56240
56240: DISABLE
// begin initHack := true ;
56241: LD_ADDR_EXP 43
56245: PUSH
56246: LD_INT 1
56248: ST_TO_ADDR
// hackTanks := [ ] ;
56249: LD_ADDR_EXP 44
56253: PUSH
56254: EMPTY
56255: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56256: LD_ADDR_EXP 45
56260: PUSH
56261: EMPTY
56262: ST_TO_ADDR
// hackLimit := 3 ;
56263: LD_ADDR_EXP 46
56267: PUSH
56268: LD_INT 3
56270: ST_TO_ADDR
// hackDist := 12 ;
56271: LD_ADDR_EXP 47
56275: PUSH
56276: LD_INT 12
56278: ST_TO_ADDR
// hackCounter := [ ] ;
56279: LD_ADDR_EXP 48
56283: PUSH
56284: EMPTY
56285: ST_TO_ADDR
// end ;
56286: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56287: LD_EXP 43
56291: PUSH
56292: LD_INT 34
56294: PUSH
56295: LD_INT 99
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PPUSH
56302: CALL_OW 69
56306: AND
56307: IFFALSE 56560
56309: GO 56311
56311: DISABLE
56312: LD_INT 0
56314: PPUSH
56315: PPUSH
// begin enable ;
56316: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56317: LD_ADDR_VAR 0 1
56321: PUSH
56322: LD_INT 34
56324: PUSH
56325: LD_INT 99
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PPUSH
56332: CALL_OW 69
56336: PUSH
56337: FOR_IN
56338: IFFALSE 56558
// begin if not i in hackTanks then
56340: LD_VAR 0 1
56344: PUSH
56345: LD_EXP 44
56349: IN
56350: NOT
56351: IFFALSE 56434
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56353: LD_ADDR_EXP 44
56357: PUSH
56358: LD_EXP 44
56362: PPUSH
56363: LD_EXP 44
56367: PUSH
56368: LD_INT 1
56370: PLUS
56371: PPUSH
56372: LD_VAR 0 1
56376: PPUSH
56377: CALL_OW 1
56381: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56382: LD_ADDR_EXP 45
56386: PUSH
56387: LD_EXP 45
56391: PPUSH
56392: LD_EXP 45
56396: PUSH
56397: LD_INT 1
56399: PLUS
56400: PPUSH
56401: EMPTY
56402: PPUSH
56403: CALL_OW 1
56407: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56408: LD_ADDR_EXP 48
56412: PUSH
56413: LD_EXP 48
56417: PPUSH
56418: LD_EXP 48
56422: PUSH
56423: LD_INT 1
56425: PLUS
56426: PPUSH
56427: EMPTY
56428: PPUSH
56429: CALL_OW 1
56433: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56434: LD_VAR 0 1
56438: PPUSH
56439: CALL_OW 302
56443: NOT
56444: IFFALSE 56457
// begin HackUnlinkAll ( i ) ;
56446: LD_VAR 0 1
56450: PPUSH
56451: CALL 56563 0 1
// continue ;
56455: GO 56337
// end ; HackCheckCapturedStatus ( i ) ;
56457: LD_VAR 0 1
56461: PPUSH
56462: CALL 57006 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56466: LD_ADDR_VAR 0 2
56470: PUSH
56471: LD_INT 81
56473: PUSH
56474: LD_VAR 0 1
56478: PPUSH
56479: CALL_OW 255
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 33
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 91
56500: PUSH
56501: LD_VAR 0 1
56505: PUSH
56506: LD_EXP 47
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 50
56518: PUSH
56519: EMPTY
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: PPUSH
56528: CALL_OW 69
56532: ST_TO_ADDR
// if not tmp then
56533: LD_VAR 0 2
56537: NOT
56538: IFFALSE 56542
// continue ;
56540: GO 56337
// HackLink ( i , tmp ) ;
56542: LD_VAR 0 1
56546: PPUSH
56547: LD_VAR 0 2
56551: PPUSH
56552: CALL 56699 0 2
// end ;
56556: GO 56337
56558: POP
56559: POP
// end ;
56560: PPOPN 2
56562: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56563: LD_INT 0
56565: PPUSH
56566: PPUSH
56567: PPUSH
// if not hack in hackTanks then
56568: LD_VAR 0 1
56572: PUSH
56573: LD_EXP 44
56577: IN
56578: NOT
56579: IFFALSE 56583
// exit ;
56581: GO 56694
// index := GetElementIndex ( hackTanks , hack ) ;
56583: LD_ADDR_VAR 0 4
56587: PUSH
56588: LD_EXP 44
56592: PPUSH
56593: LD_VAR 0 1
56597: PPUSH
56598: CALL 7757 0 2
56602: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56603: LD_EXP 45
56607: PUSH
56608: LD_VAR 0 4
56612: ARRAY
56613: IFFALSE 56694
// begin for i in hackTanksCaptured [ index ] do
56615: LD_ADDR_VAR 0 3
56619: PUSH
56620: LD_EXP 45
56624: PUSH
56625: LD_VAR 0 4
56629: ARRAY
56630: PUSH
56631: FOR_IN
56632: IFFALSE 56658
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56634: LD_VAR 0 3
56638: PUSH
56639: LD_INT 1
56641: ARRAY
56642: PPUSH
56643: LD_VAR 0 3
56647: PUSH
56648: LD_INT 2
56650: ARRAY
56651: PPUSH
56652: CALL_OW 235
56656: GO 56631
56658: POP
56659: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56660: LD_ADDR_EXP 45
56664: PUSH
56665: LD_EXP 45
56669: PPUSH
56670: LD_VAR 0 4
56674: PPUSH
56675: EMPTY
56676: PPUSH
56677: CALL_OW 1
56681: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56682: LD_VAR 0 1
56686: PPUSH
56687: LD_INT 0
56689: PPUSH
56690: CALL_OW 505
// end ; end ;
56694: LD_VAR 0 2
56698: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56699: LD_INT 0
56701: PPUSH
56702: PPUSH
56703: PPUSH
// if not hack in hackTanks or not vehicles then
56704: LD_VAR 0 1
56708: PUSH
56709: LD_EXP 44
56713: IN
56714: NOT
56715: PUSH
56716: LD_VAR 0 2
56720: NOT
56721: OR
56722: IFFALSE 56726
// exit ;
56724: GO 57001
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56726: LD_ADDR_VAR 0 2
56730: PUSH
56731: LD_VAR 0 1
56735: PPUSH
56736: LD_VAR 0 2
56740: PPUSH
56741: LD_INT 1
56743: PPUSH
56744: LD_INT 1
56746: PPUSH
56747: CALL 8407 0 4
56751: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56752: LD_ADDR_VAR 0 5
56756: PUSH
56757: LD_EXP 44
56761: PPUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL 7757 0 2
56771: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56772: LD_EXP 45
56776: PUSH
56777: LD_VAR 0 5
56781: ARRAY
56782: PUSH
56783: LD_EXP 46
56787: LESS
56788: IFFALSE 56977
// begin for i := 1 to vehicles do
56790: LD_ADDR_VAR 0 4
56794: PUSH
56795: DOUBLE
56796: LD_INT 1
56798: DEC
56799: ST_TO_ADDR
56800: LD_VAR 0 2
56804: PUSH
56805: FOR_TO
56806: IFFALSE 56975
// begin if hackTanksCaptured [ index ] = hackLimit then
56808: LD_EXP 45
56812: PUSH
56813: LD_VAR 0 5
56817: ARRAY
56818: PUSH
56819: LD_EXP 46
56823: EQUAL
56824: IFFALSE 56828
// break ;
56826: GO 56975
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56828: LD_ADDR_EXP 48
56832: PUSH
56833: LD_EXP 48
56837: PPUSH
56838: LD_VAR 0 5
56842: PPUSH
56843: LD_EXP 48
56847: PUSH
56848: LD_VAR 0 5
56852: ARRAY
56853: PUSH
56854: LD_INT 1
56856: PLUS
56857: PPUSH
56858: CALL_OW 1
56862: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56863: LD_ADDR_EXP 45
56867: PUSH
56868: LD_EXP 45
56872: PPUSH
56873: LD_VAR 0 5
56877: PUSH
56878: LD_EXP 45
56882: PUSH
56883: LD_VAR 0 5
56887: ARRAY
56888: PUSH
56889: LD_INT 1
56891: PLUS
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PPUSH
56897: LD_VAR 0 2
56901: PUSH
56902: LD_VAR 0 4
56906: ARRAY
56907: PUSH
56908: LD_VAR 0 2
56912: PUSH
56913: LD_VAR 0 4
56917: ARRAY
56918: PPUSH
56919: CALL_OW 255
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PPUSH
56928: CALL 7972 0 3
56932: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56933: LD_VAR 0 2
56937: PUSH
56938: LD_VAR 0 4
56942: ARRAY
56943: PPUSH
56944: LD_VAR 0 1
56948: PPUSH
56949: CALL_OW 255
56953: PPUSH
56954: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56958: LD_VAR 0 2
56962: PUSH
56963: LD_VAR 0 4
56967: ARRAY
56968: PPUSH
56969: CALL_OW 141
// end ;
56973: GO 56805
56975: POP
56976: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56977: LD_VAR 0 1
56981: PPUSH
56982: LD_EXP 45
56986: PUSH
56987: LD_VAR 0 5
56991: ARRAY
56992: PUSH
56993: LD_INT 0
56995: PLUS
56996: PPUSH
56997: CALL_OW 505
// end ;
57001: LD_VAR 0 3
57005: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57006: LD_INT 0
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
// if not hack in hackTanks then
57012: LD_VAR 0 1
57016: PUSH
57017: LD_EXP 44
57021: IN
57022: NOT
57023: IFFALSE 57027
// exit ;
57025: GO 57267
// index := GetElementIndex ( hackTanks , hack ) ;
57027: LD_ADDR_VAR 0 4
57031: PUSH
57032: LD_EXP 44
57036: PPUSH
57037: LD_VAR 0 1
57041: PPUSH
57042: CALL 7757 0 2
57046: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57047: LD_ADDR_VAR 0 3
57051: PUSH
57052: DOUBLE
57053: LD_EXP 45
57057: PUSH
57058: LD_VAR 0 4
57062: ARRAY
57063: INC
57064: ST_TO_ADDR
57065: LD_INT 1
57067: PUSH
57068: FOR_DOWNTO
57069: IFFALSE 57241
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57071: LD_ADDR_VAR 0 5
57075: PUSH
57076: LD_EXP 45
57080: PUSH
57081: LD_VAR 0 4
57085: ARRAY
57086: PUSH
57087: LD_VAR 0 3
57091: ARRAY
57092: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57093: LD_VAR 0 5
57097: PUSH
57098: LD_INT 1
57100: ARRAY
57101: PPUSH
57102: CALL_OW 302
57106: NOT
57107: PUSH
57108: LD_VAR 0 5
57112: PUSH
57113: LD_INT 1
57115: ARRAY
57116: PPUSH
57117: CALL_OW 255
57121: PUSH
57122: LD_VAR 0 1
57126: PPUSH
57127: CALL_OW 255
57131: NONEQUAL
57132: OR
57133: IFFALSE 57239
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57135: LD_VAR 0 5
57139: PUSH
57140: LD_INT 1
57142: ARRAY
57143: PPUSH
57144: CALL_OW 305
57148: PUSH
57149: LD_VAR 0 5
57153: PUSH
57154: LD_INT 1
57156: ARRAY
57157: PPUSH
57158: CALL_OW 255
57162: PUSH
57163: LD_VAR 0 1
57167: PPUSH
57168: CALL_OW 255
57172: EQUAL
57173: AND
57174: IFFALSE 57198
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57176: LD_VAR 0 5
57180: PUSH
57181: LD_INT 1
57183: ARRAY
57184: PPUSH
57185: LD_VAR 0 5
57189: PUSH
57190: LD_INT 2
57192: ARRAY
57193: PPUSH
57194: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57198: LD_ADDR_EXP 45
57202: PUSH
57203: LD_EXP 45
57207: PPUSH
57208: LD_VAR 0 4
57212: PPUSH
57213: LD_EXP 45
57217: PUSH
57218: LD_VAR 0 4
57222: ARRAY
57223: PPUSH
57224: LD_VAR 0 3
57228: PPUSH
57229: CALL_OW 3
57233: PPUSH
57234: CALL_OW 1
57238: ST_TO_ADDR
// end ; end ;
57239: GO 57068
57241: POP
57242: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57243: LD_VAR 0 1
57247: PPUSH
57248: LD_EXP 45
57252: PUSH
57253: LD_VAR 0 4
57257: ARRAY
57258: PUSH
57259: LD_INT 0
57261: PLUS
57262: PPUSH
57263: CALL_OW 505
// end ;
57267: LD_VAR 0 2
57271: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57272: LD_INT 0
57274: PPUSH
57275: PPUSH
57276: PPUSH
57277: PPUSH
// if not hack in hackTanks then
57278: LD_VAR 0 1
57282: PUSH
57283: LD_EXP 44
57287: IN
57288: NOT
57289: IFFALSE 57293
// exit ;
57291: GO 57378
// index := GetElementIndex ( hackTanks , hack ) ;
57293: LD_ADDR_VAR 0 5
57297: PUSH
57298: LD_EXP 44
57302: PPUSH
57303: LD_VAR 0 1
57307: PPUSH
57308: CALL 7757 0 2
57312: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57313: LD_ADDR_VAR 0 4
57317: PUSH
57318: DOUBLE
57319: LD_INT 1
57321: DEC
57322: ST_TO_ADDR
57323: LD_EXP 45
57327: PUSH
57328: LD_VAR 0 5
57332: ARRAY
57333: PUSH
57334: FOR_TO
57335: IFFALSE 57376
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57337: LD_EXP 45
57341: PUSH
57342: LD_VAR 0 5
57346: ARRAY
57347: PUSH
57348: LD_VAR 0 4
57352: ARRAY
57353: PUSH
57354: LD_INT 1
57356: ARRAY
57357: PUSH
57358: LD_VAR 0 2
57362: EQUAL
57363: IFFALSE 57374
// KillUnit ( vehicle ) ;
57365: LD_VAR 0 2
57369: PPUSH
57370: CALL_OW 66
57374: GO 57334
57376: POP
57377: POP
// end ;
57378: LD_VAR 0 3
57382: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57383: LD_EXP 49
57387: NOT
57388: IFFALSE 57423
57390: GO 57392
57392: DISABLE
// begin initMiner := true ;
57393: LD_ADDR_EXP 49
57397: PUSH
57398: LD_INT 1
57400: ST_TO_ADDR
// minersList := [ ] ;
57401: LD_ADDR_EXP 50
57405: PUSH
57406: EMPTY
57407: ST_TO_ADDR
// minerMinesList := [ ] ;
57408: LD_ADDR_EXP 51
57412: PUSH
57413: EMPTY
57414: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57415: LD_ADDR_EXP 52
57419: PUSH
57420: LD_INT 5
57422: ST_TO_ADDR
// end ;
57423: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57424: LD_EXP 49
57428: PUSH
57429: LD_INT 34
57431: PUSH
57432: LD_INT 81
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PPUSH
57439: CALL_OW 69
57443: AND
57444: IFFALSE 57905
57446: GO 57448
57448: DISABLE
57449: LD_INT 0
57451: PPUSH
57452: PPUSH
57453: PPUSH
57454: PPUSH
// begin enable ;
57455: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57456: LD_ADDR_VAR 0 1
57460: PUSH
57461: LD_INT 34
57463: PUSH
57464: LD_INT 81
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PPUSH
57471: CALL_OW 69
57475: PUSH
57476: FOR_IN
57477: IFFALSE 57549
// begin if not i in minersList then
57479: LD_VAR 0 1
57483: PUSH
57484: LD_EXP 50
57488: IN
57489: NOT
57490: IFFALSE 57547
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57492: LD_ADDR_EXP 50
57496: PUSH
57497: LD_EXP 50
57501: PPUSH
57502: LD_EXP 50
57506: PUSH
57507: LD_INT 1
57509: PLUS
57510: PPUSH
57511: LD_VAR 0 1
57515: PPUSH
57516: CALL_OW 1
57520: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57521: LD_ADDR_EXP 51
57525: PUSH
57526: LD_EXP 51
57530: PPUSH
57531: LD_EXP 51
57535: PUSH
57536: LD_INT 1
57538: PLUS
57539: PPUSH
57540: EMPTY
57541: PPUSH
57542: CALL_OW 1
57546: ST_TO_ADDR
// end end ;
57547: GO 57476
57549: POP
57550: POP
// for i := minerMinesList downto 1 do
57551: LD_ADDR_VAR 0 1
57555: PUSH
57556: DOUBLE
57557: LD_EXP 51
57561: INC
57562: ST_TO_ADDR
57563: LD_INT 1
57565: PUSH
57566: FOR_DOWNTO
57567: IFFALSE 57903
// begin if IsLive ( minersList [ i ] ) then
57569: LD_EXP 50
57573: PUSH
57574: LD_VAR 0 1
57578: ARRAY
57579: PPUSH
57580: CALL_OW 300
57584: IFFALSE 57612
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57586: LD_EXP 50
57590: PUSH
57591: LD_VAR 0 1
57595: ARRAY
57596: PPUSH
57597: LD_EXP 51
57601: PUSH
57602: LD_VAR 0 1
57606: ARRAY
57607: PPUSH
57608: CALL_OW 505
// if not minerMinesList [ i ] then
57612: LD_EXP 51
57616: PUSH
57617: LD_VAR 0 1
57621: ARRAY
57622: NOT
57623: IFFALSE 57627
// continue ;
57625: GO 57566
// for j := minerMinesList [ i ] downto 1 do
57627: LD_ADDR_VAR 0 2
57631: PUSH
57632: DOUBLE
57633: LD_EXP 51
57637: PUSH
57638: LD_VAR 0 1
57642: ARRAY
57643: INC
57644: ST_TO_ADDR
57645: LD_INT 1
57647: PUSH
57648: FOR_DOWNTO
57649: IFFALSE 57899
// begin side := GetSide ( minersList [ i ] ) ;
57651: LD_ADDR_VAR 0 3
57655: PUSH
57656: LD_EXP 50
57660: PUSH
57661: LD_VAR 0 1
57665: ARRAY
57666: PPUSH
57667: CALL_OW 255
57671: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57672: LD_ADDR_VAR 0 4
57676: PUSH
57677: LD_EXP 51
57681: PUSH
57682: LD_VAR 0 1
57686: ARRAY
57687: PUSH
57688: LD_VAR 0 2
57692: ARRAY
57693: PUSH
57694: LD_INT 1
57696: ARRAY
57697: PPUSH
57698: LD_EXP 51
57702: PUSH
57703: LD_VAR 0 1
57707: ARRAY
57708: PUSH
57709: LD_VAR 0 2
57713: ARRAY
57714: PUSH
57715: LD_INT 2
57717: ARRAY
57718: PPUSH
57719: CALL_OW 428
57723: ST_TO_ADDR
// if not tmp then
57724: LD_VAR 0 4
57728: NOT
57729: IFFALSE 57733
// continue ;
57731: GO 57648
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57733: LD_VAR 0 4
57737: PUSH
57738: LD_INT 81
57740: PUSH
57741: LD_VAR 0 3
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PPUSH
57750: CALL_OW 69
57754: IN
57755: PUSH
57756: LD_EXP 51
57760: PUSH
57761: LD_VAR 0 1
57765: ARRAY
57766: PUSH
57767: LD_VAR 0 2
57771: ARRAY
57772: PUSH
57773: LD_INT 1
57775: ARRAY
57776: PPUSH
57777: LD_EXP 51
57781: PUSH
57782: LD_VAR 0 1
57786: ARRAY
57787: PUSH
57788: LD_VAR 0 2
57792: ARRAY
57793: PUSH
57794: LD_INT 2
57796: ARRAY
57797: PPUSH
57798: CALL_OW 458
57802: AND
57803: IFFALSE 57897
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57805: LD_EXP 51
57809: PUSH
57810: LD_VAR 0 1
57814: ARRAY
57815: PUSH
57816: LD_VAR 0 2
57820: ARRAY
57821: PUSH
57822: LD_INT 1
57824: ARRAY
57825: PPUSH
57826: LD_EXP 51
57830: PUSH
57831: LD_VAR 0 1
57835: ARRAY
57836: PUSH
57837: LD_VAR 0 2
57841: ARRAY
57842: PUSH
57843: LD_INT 2
57845: ARRAY
57846: PPUSH
57847: LD_VAR 0 3
57851: PPUSH
57852: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57856: LD_ADDR_EXP 51
57860: PUSH
57861: LD_EXP 51
57865: PPUSH
57866: LD_VAR 0 1
57870: PPUSH
57871: LD_EXP 51
57875: PUSH
57876: LD_VAR 0 1
57880: ARRAY
57881: PPUSH
57882: LD_VAR 0 2
57886: PPUSH
57887: CALL_OW 3
57891: PPUSH
57892: CALL_OW 1
57896: ST_TO_ADDR
// end ; end ;
57897: GO 57648
57899: POP
57900: POP
// end ;
57901: GO 57566
57903: POP
57904: POP
// end ;
57905: PPOPN 4
57907: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57908: LD_INT 0
57910: PPUSH
57911: PPUSH
// result := false ;
57912: LD_ADDR_VAR 0 4
57916: PUSH
57917: LD_INT 0
57919: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57920: LD_VAR 0 1
57924: PPUSH
57925: CALL_OW 264
57929: PUSH
57930: LD_INT 81
57932: EQUAL
57933: NOT
57934: IFFALSE 57938
// exit ;
57936: GO 58178
// index := GetElementIndex ( minersList , unit ) ;
57938: LD_ADDR_VAR 0 5
57942: PUSH
57943: LD_EXP 50
57947: PPUSH
57948: LD_VAR 0 1
57952: PPUSH
57953: CALL 7757 0 2
57957: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57958: LD_EXP 51
57962: PUSH
57963: LD_VAR 0 5
57967: ARRAY
57968: PUSH
57969: LD_EXP 52
57973: GREATEREQUAL
57974: IFFALSE 57978
// exit ;
57976: GO 58178
// ComMoveXY ( unit , x , y ) ;
57978: LD_VAR 0 1
57982: PPUSH
57983: LD_VAR 0 2
57987: PPUSH
57988: LD_VAR 0 3
57992: PPUSH
57993: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57997: LD_INT 35
57999: PPUSH
58000: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58004: LD_VAR 0 1
58008: PPUSH
58009: LD_VAR 0 2
58013: PPUSH
58014: LD_VAR 0 3
58018: PPUSH
58019: CALL 39518 0 3
58023: NOT
58024: PUSH
58025: LD_VAR 0 1
58029: PPUSH
58030: CALL_OW 314
58034: AND
58035: IFFALSE 58039
// exit ;
58037: GO 58178
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58039: LD_VAR 0 2
58043: PPUSH
58044: LD_VAR 0 3
58048: PPUSH
58049: CALL_OW 428
58053: PUSH
58054: LD_VAR 0 1
58058: EQUAL
58059: PUSH
58060: LD_VAR 0 1
58064: PPUSH
58065: CALL_OW 314
58069: NOT
58070: AND
58071: IFFALSE 57997
// PlaySoundXY ( x , y , PlantMine ) ;
58073: LD_VAR 0 2
58077: PPUSH
58078: LD_VAR 0 3
58082: PPUSH
58083: LD_STRING PlantMine
58085: PPUSH
58086: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58090: LD_VAR 0 2
58094: PPUSH
58095: LD_VAR 0 3
58099: PPUSH
58100: LD_VAR 0 1
58104: PPUSH
58105: CALL_OW 255
58109: PPUSH
58110: LD_INT 0
58112: PPUSH
58113: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58117: LD_ADDR_EXP 51
58121: PUSH
58122: LD_EXP 51
58126: PPUSH
58127: LD_VAR 0 5
58131: PUSH
58132: LD_EXP 51
58136: PUSH
58137: LD_VAR 0 5
58141: ARRAY
58142: PUSH
58143: LD_INT 1
58145: PLUS
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PPUSH
58151: LD_VAR 0 2
58155: PUSH
58156: LD_VAR 0 3
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PPUSH
58165: CALL 7972 0 3
58169: ST_TO_ADDR
// result := true ;
58170: LD_ADDR_VAR 0 4
58174: PUSH
58175: LD_INT 1
58177: ST_TO_ADDR
// end ;
58178: LD_VAR 0 4
58182: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58183: LD_INT 0
58185: PPUSH
58186: PPUSH
58187: PPUSH
// if not unit in minersList then
58188: LD_VAR 0 1
58192: PUSH
58193: LD_EXP 50
58197: IN
58198: NOT
58199: IFFALSE 58203
// exit ;
58201: GO 58595
// index := GetElementIndex ( minersList , unit ) ;
58203: LD_ADDR_VAR 0 6
58207: PUSH
58208: LD_EXP 50
58212: PPUSH
58213: LD_VAR 0 1
58217: PPUSH
58218: CALL 7757 0 2
58222: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58223: LD_ADDR_VAR 0 5
58227: PUSH
58228: DOUBLE
58229: LD_EXP 51
58233: PUSH
58234: LD_VAR 0 6
58238: ARRAY
58239: INC
58240: ST_TO_ADDR
58241: LD_INT 1
58243: PUSH
58244: FOR_DOWNTO
58245: IFFALSE 58406
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58247: LD_EXP 51
58251: PUSH
58252: LD_VAR 0 6
58256: ARRAY
58257: PUSH
58258: LD_VAR 0 5
58262: ARRAY
58263: PUSH
58264: LD_INT 1
58266: ARRAY
58267: PUSH
58268: LD_VAR 0 2
58272: EQUAL
58273: PUSH
58274: LD_EXP 51
58278: PUSH
58279: LD_VAR 0 6
58283: ARRAY
58284: PUSH
58285: LD_VAR 0 5
58289: ARRAY
58290: PUSH
58291: LD_INT 2
58293: ARRAY
58294: PUSH
58295: LD_VAR 0 3
58299: EQUAL
58300: AND
58301: IFFALSE 58404
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58303: LD_EXP 51
58307: PUSH
58308: LD_VAR 0 6
58312: ARRAY
58313: PUSH
58314: LD_VAR 0 5
58318: ARRAY
58319: PUSH
58320: LD_INT 1
58322: ARRAY
58323: PPUSH
58324: LD_EXP 51
58328: PUSH
58329: LD_VAR 0 6
58333: ARRAY
58334: PUSH
58335: LD_VAR 0 5
58339: ARRAY
58340: PUSH
58341: LD_INT 2
58343: ARRAY
58344: PPUSH
58345: LD_VAR 0 1
58349: PPUSH
58350: CALL_OW 255
58354: PPUSH
58355: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58359: LD_ADDR_EXP 51
58363: PUSH
58364: LD_EXP 51
58368: PPUSH
58369: LD_VAR 0 6
58373: PPUSH
58374: LD_EXP 51
58378: PUSH
58379: LD_VAR 0 6
58383: ARRAY
58384: PPUSH
58385: LD_VAR 0 5
58389: PPUSH
58390: CALL_OW 3
58394: PPUSH
58395: CALL_OW 1
58399: ST_TO_ADDR
// exit ;
58400: POP
58401: POP
58402: GO 58595
// end ; end ;
58404: GO 58244
58406: POP
58407: POP
// for i := minerMinesList [ index ] downto 1 do
58408: LD_ADDR_VAR 0 5
58412: PUSH
58413: DOUBLE
58414: LD_EXP 51
58418: PUSH
58419: LD_VAR 0 6
58423: ARRAY
58424: INC
58425: ST_TO_ADDR
58426: LD_INT 1
58428: PUSH
58429: FOR_DOWNTO
58430: IFFALSE 58593
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58432: LD_EXP 51
58436: PUSH
58437: LD_VAR 0 6
58441: ARRAY
58442: PUSH
58443: LD_VAR 0 5
58447: ARRAY
58448: PUSH
58449: LD_INT 1
58451: ARRAY
58452: PPUSH
58453: LD_EXP 51
58457: PUSH
58458: LD_VAR 0 6
58462: ARRAY
58463: PUSH
58464: LD_VAR 0 5
58468: ARRAY
58469: PUSH
58470: LD_INT 2
58472: ARRAY
58473: PPUSH
58474: LD_VAR 0 2
58478: PPUSH
58479: LD_VAR 0 3
58483: PPUSH
58484: CALL_OW 298
58488: PUSH
58489: LD_INT 6
58491: LESS
58492: IFFALSE 58591
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58494: LD_EXP 51
58498: PUSH
58499: LD_VAR 0 6
58503: ARRAY
58504: PUSH
58505: LD_VAR 0 5
58509: ARRAY
58510: PUSH
58511: LD_INT 1
58513: ARRAY
58514: PPUSH
58515: LD_EXP 51
58519: PUSH
58520: LD_VAR 0 6
58524: ARRAY
58525: PUSH
58526: LD_VAR 0 5
58530: ARRAY
58531: PUSH
58532: LD_INT 2
58534: ARRAY
58535: PPUSH
58536: LD_VAR 0 1
58540: PPUSH
58541: CALL_OW 255
58545: PPUSH
58546: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58550: LD_ADDR_EXP 51
58554: PUSH
58555: LD_EXP 51
58559: PPUSH
58560: LD_VAR 0 6
58564: PPUSH
58565: LD_EXP 51
58569: PUSH
58570: LD_VAR 0 6
58574: ARRAY
58575: PPUSH
58576: LD_VAR 0 5
58580: PPUSH
58581: CALL_OW 3
58585: PPUSH
58586: CALL_OW 1
58590: ST_TO_ADDR
// end ; end ;
58591: GO 58429
58593: POP
58594: POP
// end ;
58595: LD_VAR 0 4
58599: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58600: LD_INT 0
58602: PPUSH
58603: PPUSH
58604: PPUSH
58605: PPUSH
58606: PPUSH
58607: PPUSH
58608: PPUSH
58609: PPUSH
58610: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58611: LD_VAR 0 1
58615: PPUSH
58616: CALL_OW 264
58620: PUSH
58621: LD_INT 81
58623: EQUAL
58624: NOT
58625: PUSH
58626: LD_VAR 0 1
58630: PUSH
58631: LD_EXP 50
58635: IN
58636: NOT
58637: OR
58638: IFFALSE 58642
// exit ;
58640: GO 58964
// index := GetElementIndex ( minersList , unit ) ;
58642: LD_ADDR_VAR 0 6
58646: PUSH
58647: LD_EXP 50
58651: PPUSH
58652: LD_VAR 0 1
58656: PPUSH
58657: CALL 7757 0 2
58661: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58662: LD_ADDR_VAR 0 8
58666: PUSH
58667: LD_EXP 52
58671: PUSH
58672: LD_EXP 51
58676: PUSH
58677: LD_VAR 0 6
58681: ARRAY
58682: MINUS
58683: ST_TO_ADDR
// if not minesFreeAmount then
58684: LD_VAR 0 8
58688: NOT
58689: IFFALSE 58693
// exit ;
58691: GO 58964
// tmp := [ ] ;
58693: LD_ADDR_VAR 0 7
58697: PUSH
58698: EMPTY
58699: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58700: LD_ADDR_VAR 0 5
58704: PUSH
58705: DOUBLE
58706: LD_INT 1
58708: DEC
58709: ST_TO_ADDR
58710: LD_VAR 0 8
58714: PUSH
58715: FOR_TO
58716: IFFALSE 58911
// begin _d := rand ( 0 , 5 ) ;
58718: LD_ADDR_VAR 0 11
58722: PUSH
58723: LD_INT 0
58725: PPUSH
58726: LD_INT 5
58728: PPUSH
58729: CALL_OW 12
58733: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58734: LD_ADDR_VAR 0 12
58738: PUSH
58739: LD_INT 2
58741: PPUSH
58742: LD_INT 6
58744: PPUSH
58745: CALL_OW 12
58749: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58750: LD_ADDR_VAR 0 9
58754: PUSH
58755: LD_VAR 0 2
58759: PPUSH
58760: LD_VAR 0 11
58764: PPUSH
58765: LD_VAR 0 12
58769: PPUSH
58770: CALL_OW 272
58774: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58775: LD_ADDR_VAR 0 10
58779: PUSH
58780: LD_VAR 0 3
58784: PPUSH
58785: LD_VAR 0 11
58789: PPUSH
58790: LD_VAR 0 12
58794: PPUSH
58795: CALL_OW 273
58799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58800: LD_VAR 0 9
58804: PPUSH
58805: LD_VAR 0 10
58809: PPUSH
58810: CALL_OW 488
58814: PUSH
58815: LD_VAR 0 9
58819: PUSH
58820: LD_VAR 0 10
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 7
58833: IN
58834: NOT
58835: AND
58836: PUSH
58837: LD_VAR 0 9
58841: PPUSH
58842: LD_VAR 0 10
58846: PPUSH
58847: CALL_OW 458
58851: NOT
58852: AND
58853: IFFALSE 58895
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58855: LD_ADDR_VAR 0 7
58859: PUSH
58860: LD_VAR 0 7
58864: PPUSH
58865: LD_VAR 0 7
58869: PUSH
58870: LD_INT 1
58872: PLUS
58873: PPUSH
58874: LD_VAR 0 9
58878: PUSH
58879: LD_VAR 0 10
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PPUSH
58888: CALL_OW 1
58892: ST_TO_ADDR
58893: GO 58909
// i := i - 1 ;
58895: LD_ADDR_VAR 0 5
58899: PUSH
58900: LD_VAR 0 5
58904: PUSH
58905: LD_INT 1
58907: MINUS
58908: ST_TO_ADDR
// end ;
58909: GO 58715
58911: POP
58912: POP
// for i in tmp do
58913: LD_ADDR_VAR 0 5
58917: PUSH
58918: LD_VAR 0 7
58922: PUSH
58923: FOR_IN
58924: IFFALSE 58962
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58926: LD_VAR 0 1
58930: PPUSH
58931: LD_VAR 0 5
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PPUSH
58940: LD_VAR 0 5
58944: PUSH
58945: LD_INT 2
58947: ARRAY
58948: PPUSH
58949: CALL 57908 0 3
58953: NOT
58954: IFFALSE 58960
// exit ;
58956: POP
58957: POP
58958: GO 58964
58960: GO 58923
58962: POP
58963: POP
// end ;
58964: LD_VAR 0 4
58968: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58969: LD_INT 0
58971: PPUSH
58972: PPUSH
58973: PPUSH
58974: PPUSH
58975: PPUSH
58976: PPUSH
58977: PPUSH
58978: PPUSH
58979: PPUSH
// if GetClass ( unit ) <> class_sniper then
58980: LD_VAR 0 1
58984: PPUSH
58985: CALL_OW 257
58989: PUSH
58990: LD_INT 5
58992: NONEQUAL
58993: IFFALSE 58997
// exit ;
58995: GO 59463
// dist := 8 ;
58997: LD_ADDR_VAR 0 5
59001: PUSH
59002: LD_INT 8
59004: ST_TO_ADDR
// viewRange := 12 ;
59005: LD_ADDR_VAR 0 8
59009: PUSH
59010: LD_INT 12
59012: ST_TO_ADDR
// side := GetSide ( unit ) ;
59013: LD_ADDR_VAR 0 6
59017: PUSH
59018: LD_VAR 0 1
59022: PPUSH
59023: CALL_OW 255
59027: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59028: LD_INT 61
59030: PPUSH
59031: LD_VAR 0 6
59035: PPUSH
59036: CALL_OW 321
59040: PUSH
59041: LD_INT 2
59043: EQUAL
59044: IFFALSE 59054
// viewRange := 16 ;
59046: LD_ADDR_VAR 0 8
59050: PUSH
59051: LD_INT 16
59053: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59054: LD_VAR 0 1
59058: PPUSH
59059: LD_VAR 0 2
59063: PPUSH
59064: LD_VAR 0 3
59068: PPUSH
59069: CALL_OW 297
59073: PUSH
59074: LD_VAR 0 5
59078: GREATER
59079: IFFALSE 59158
// begin ComMoveXY ( unit , x , y ) ;
59081: LD_VAR 0 1
59085: PPUSH
59086: LD_VAR 0 2
59090: PPUSH
59091: LD_VAR 0 3
59095: PPUSH
59096: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59100: LD_INT 35
59102: PPUSH
59103: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59107: LD_VAR 0 1
59111: PPUSH
59112: LD_VAR 0 2
59116: PPUSH
59117: LD_VAR 0 3
59121: PPUSH
59122: CALL 39518 0 3
59126: NOT
59127: IFFALSE 59131
// exit ;
59129: GO 59463
// until GetDistUnitXY ( unit , x , y ) < dist ;
59131: LD_VAR 0 1
59135: PPUSH
59136: LD_VAR 0 2
59140: PPUSH
59141: LD_VAR 0 3
59145: PPUSH
59146: CALL_OW 297
59150: PUSH
59151: LD_VAR 0 5
59155: LESS
59156: IFFALSE 59100
// end ; ComTurnXY ( unit , x , y ) ;
59158: LD_VAR 0 1
59162: PPUSH
59163: LD_VAR 0 2
59167: PPUSH
59168: LD_VAR 0 3
59172: PPUSH
59173: CALL_OW 118
// repeat if Multiplayer then
59177: LD_OWVAR 4
59181: IFFALSE 59192
// wait ( 35 ) else
59183: LD_INT 35
59185: PPUSH
59186: CALL_OW 67
59190: GO 59199
// wait ( 5 ) ;
59192: LD_INT 5
59194: PPUSH
59195: CALL_OW 67
// _d := GetDir ( unit ) ;
59199: LD_ADDR_VAR 0 11
59203: PUSH
59204: LD_VAR 0 1
59208: PPUSH
59209: CALL_OW 254
59213: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59214: LD_ADDR_VAR 0 7
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 250
59228: PPUSH
59229: LD_VAR 0 1
59233: PPUSH
59234: CALL_OW 251
59238: PPUSH
59239: LD_VAR 0 2
59243: PPUSH
59244: LD_VAR 0 3
59248: PPUSH
59249: CALL 42126 0 4
59253: ST_TO_ADDR
// until dir = _d ;
59254: LD_VAR 0 7
59258: PUSH
59259: LD_VAR 0 11
59263: EQUAL
59264: IFFALSE 59177
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59266: LD_ADDR_VAR 0 9
59270: PUSH
59271: LD_VAR 0 1
59275: PPUSH
59276: CALL_OW 250
59280: PPUSH
59281: LD_VAR 0 7
59285: PPUSH
59286: LD_VAR 0 5
59290: PPUSH
59291: CALL_OW 272
59295: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59296: LD_ADDR_VAR 0 10
59300: PUSH
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 251
59310: PPUSH
59311: LD_VAR 0 7
59315: PPUSH
59316: LD_VAR 0 5
59320: PPUSH
59321: CALL_OW 273
59325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59326: LD_VAR 0 9
59330: PPUSH
59331: LD_VAR 0 10
59335: PPUSH
59336: CALL_OW 488
59340: NOT
59341: IFFALSE 59345
// exit ;
59343: GO 59463
// ComAnimCustom ( unit , 1 ) ;
59345: LD_VAR 0 1
59349: PPUSH
59350: LD_INT 1
59352: PPUSH
59353: CALL_OW 592
// p := 0 ;
59357: LD_ADDR_VAR 0 12
59361: PUSH
59362: LD_INT 0
59364: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59365: LD_VAR 0 9
59369: PPUSH
59370: LD_VAR 0 10
59374: PPUSH
59375: LD_VAR 0 6
59379: PPUSH
59380: LD_VAR 0 8
59384: PPUSH
59385: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59389: LD_INT 35
59391: PPUSH
59392: CALL_OW 67
// p := Inc ( p ) ;
59396: LD_ADDR_VAR 0 12
59400: PUSH
59401: LD_VAR 0 12
59405: PPUSH
59406: CALL 42082 0 1
59410: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59411: LD_VAR 0 12
59415: PUSH
59416: LD_INT 3
59418: EQUAL
59419: PUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: CALL_OW 302
59429: NOT
59430: OR
59431: PUSH
59432: LD_VAR 0 1
59436: PPUSH
59437: CALL_OW 301
59441: OR
59442: IFFALSE 59389
// RemoveSeeing ( _x , _y , side ) ;
59444: LD_VAR 0 9
59448: PPUSH
59449: LD_VAR 0 10
59453: PPUSH
59454: LD_VAR 0 6
59458: PPUSH
59459: CALL_OW 331
// end ; end_of_file
59463: LD_VAR 0 4
59467: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59468: PPOPN 6
59470: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59471: LD_EXP 1
59475: PUSH
59476: LD_INT 4
59478: EQUAL
59479: IFFALSE 59515
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59481: LD_STRING setGameDifficulty(
59483: PUSH
59484: LD_OWVAR 67
59488: STR
59489: PUSH
59490: LD_STRING )
59492: STR
59493: PPUSH
59494: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59498: LD_STRING displayDifficulty(
59500: PUSH
59501: LD_OWVAR 67
59505: STR
59506: PUSH
59507: LD_STRING )
59509: STR
59510: PPUSH
59511: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59515: CALL 59544 0 0
// end ; end_of_file
59519: PPOPN 1
59521: END
// every 0 0$1 do
59522: GO 59524
59524: DISABLE
// begin enable ;
59525: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59526: LD_STRING updateTimer(
59528: PUSH
59529: LD_OWVAR 1
59533: STR
59534: PUSH
59535: LD_STRING );
59537: STR
59538: PPUSH
59539: CALL_OW 559
// end ;
59543: END
// export function SOS_MapStart ( ) ; begin
59544: LD_INT 0
59546: PPUSH
// UpdateFactoryWaypoints ( ) ;
59547: CALL 60472 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59551: CALL 60724 0 0
// ParseMultiDataToLua ( ) ;
59555: CALL 60871 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59559: LD_STRING setSpecLogoNumber(
59561: PUSH
59562: LD_INT 2
59564: STR
59565: PUSH
59566: LD_STRING ,
59568: STR
59569: PUSH
59570: LD_INT 1
59572: STR
59573: PUSH
59574: LD_STRING )
59576: STR
59577: PPUSH
59578: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59582: LD_STRING setSpecLogoNumber(
59584: PUSH
59585: LD_INT 3
59587: STR
59588: PUSH
59589: LD_STRING ,
59591: STR
59592: PUSH
59593: LD_INT 2
59595: STR
59596: PUSH
59597: LD_STRING )
59599: STR
59600: PPUSH
59601: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59605: LD_STRING setSpecLogoNumber(
59607: PUSH
59608: LD_INT 4
59610: STR
59611: PUSH
59612: LD_STRING ,
59614: STR
59615: PUSH
59616: LD_INT 3
59618: STR
59619: PUSH
59620: LD_STRING )
59622: STR
59623: PPUSH
59624: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59628: LD_STRING setSpecLogoNumber(
59630: PUSH
59631: LD_INT 5
59633: STR
59634: PUSH
59635: LD_STRING ,
59637: STR
59638: PUSH
59639: LD_INT 4
59641: STR
59642: PUSH
59643: LD_STRING )
59645: STR
59646: PPUSH
59647: CALL_OW 559
// end ;
59651: LD_VAR 0 1
59655: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59656: LD_INT 0
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
59665: PPUSH
59666: PPUSH
// for i := 1 to 8 do
59667: LD_ADDR_VAR 0 2
59671: PUSH
59672: DOUBLE
59673: LD_INT 1
59675: DEC
59676: ST_TO_ADDR
59677: LD_INT 8
59679: PUSH
59680: FOR_TO
59681: IFFALSE 60066
// begin if mpSidePositions [ i ] then
59683: LD_EXP 5
59687: PUSH
59688: LD_VAR 0 2
59692: ARRAY
59693: IFFALSE 60064
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59695: LD_ADDR_VAR 0 7
59699: PUSH
59700: LD_INT 22
59702: PUSH
59703: LD_VAR 0 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 21
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PPUSH
59726: CALL_OW 69
59730: PPUSH
59731: CALL 5112 0 1
59735: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59736: LD_ADDR_VAR 0 9
59740: PUSH
59741: LD_INT 22
59743: PUSH
59744: LD_VAR 0 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 30
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 30
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PPUSH
59785: CALL_OW 69
59789: ST_TO_ADDR
// crates := 0 ;
59790: LD_ADDR_VAR 0 4
59794: PUSH
59795: LD_INT 0
59797: ST_TO_ADDR
// oil := 0 ;
59798: LD_ADDR_VAR 0 5
59802: PUSH
59803: LD_INT 0
59805: ST_TO_ADDR
// sib := 0 ;
59806: LD_ADDR_VAR 0 6
59810: PUSH
59811: LD_INT 0
59813: ST_TO_ADDR
// if bases then
59814: LD_VAR 0 9
59818: IFFALSE 59924
// begin for j in bases do
59820: LD_ADDR_VAR 0 3
59824: PUSH
59825: LD_VAR 0 9
59829: PUSH
59830: FOR_IN
59831: IFFALSE 59922
// begin base := GetBase ( j ) ;
59833: LD_ADDR_VAR 0 8
59837: PUSH
59838: LD_VAR 0 3
59842: PPUSH
59843: CALL_OW 274
59847: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59848: LD_ADDR_VAR 0 4
59852: PUSH
59853: LD_VAR 0 4
59857: PUSH
59858: LD_VAR 0 8
59862: PPUSH
59863: LD_INT 1
59865: PPUSH
59866: CALL_OW 275
59870: PLUS
59871: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59872: LD_ADDR_VAR 0 5
59876: PUSH
59877: LD_VAR 0 5
59881: PUSH
59882: LD_VAR 0 8
59886: PPUSH
59887: LD_INT 2
59889: PPUSH
59890: CALL_OW 275
59894: PLUS
59895: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59896: LD_ADDR_VAR 0 6
59900: PUSH
59901: LD_VAR 0 6
59905: PUSH
59906: LD_VAR 0 8
59910: PPUSH
59911: LD_INT 3
59913: PPUSH
59914: CALL_OW 275
59918: PLUS
59919: ST_TO_ADDR
// end ;
59920: GO 59830
59922: POP
59923: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59924: LD_STRING setSpecText(
59926: PUSH
59927: LD_VAR 0 2
59931: STR
59932: PUSH
59933: LD_STRING ,
59935: STR
59936: PUSH
59937: LD_INT 2
59939: STR
59940: PUSH
59941: LD_STRING ,
59943: STR
59944: PUSH
59945: LD_VAR 0 4
59949: STR
59950: PUSH
59951: LD_STRING )
59953: STR
59954: PPUSH
59955: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
59959: LD_STRING setSpecText(
59961: PUSH
59962: LD_VAR 0 2
59966: STR
59967: PUSH
59968: LD_STRING ,
59970: STR
59971: PUSH
59972: LD_INT 3
59974: STR
59975: PUSH
59976: LD_STRING ,
59978: STR
59979: PUSH
59980: LD_VAR 0 5
59984: STR
59985: PUSH
59986: LD_STRING )
59988: STR
59989: PPUSH
59990: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
59994: LD_STRING setSpecText(
59996: PUSH
59997: LD_VAR 0 2
60001: STR
60002: PUSH
60003: LD_STRING ,
60005: STR
60006: PUSH
60007: LD_INT 4
60009: STR
60010: PUSH
60011: LD_STRING ,
60013: STR
60014: PUSH
60015: LD_VAR 0 6
60019: STR
60020: PUSH
60021: LD_STRING )
60023: STR
60024: PPUSH
60025: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60029: LD_STRING setSpecText(
60031: PUSH
60032: LD_VAR 0 2
60036: STR
60037: PUSH
60038: LD_STRING ,
60040: STR
60041: PUSH
60042: LD_INT 5
60044: STR
60045: PUSH
60046: LD_STRING ,
60048: STR
60049: PUSH
60050: LD_VAR 0 7
60054: STR
60055: PUSH
60056: LD_STRING )
60058: STR
60059: PPUSH
60060: CALL_OW 559
// end ; end ;
60064: GO 59680
60066: POP
60067: POP
// end ;
60068: LD_VAR 0 1
60072: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60073: LD_INT 2
60075: PUSH
60076: LD_INT 30
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 30
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: LIST
60100: PPUSH
60101: CALL_OW 69
60105: IFFALSE 60115
60107: GO 60109
60109: DISABLE
// begin enable ;
60110: ENABLE
// UpdateSpectatorBar ;
60111: CALL 59656 0 0
// end ;
60115: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60116: LD_INT 0
60118: PPUSH
// end ;
60119: LD_VAR 0 12
60123: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60124: LD_INT 0
60126: PPUSH
60127: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60128: LD_VAR 0 1
60132: NOT
60133: PUSH
60134: LD_VAR 0 2
60138: PPUSH
60139: LD_VAR 0 3
60143: PPUSH
60144: CALL_OW 488
60148: NOT
60149: OR
60150: PUSH
60151: LD_VAR 0 1
60155: PPUSH
60156: CALL_OW 266
60160: PUSH
60161: LD_INT 3
60163: NONEQUAL
60164: PUSH
60165: LD_VAR 0 1
60169: PPUSH
60170: CALL_OW 247
60174: PUSH
60175: LD_INT 1
60177: EQUAL
60178: NOT
60179: AND
60180: OR
60181: IFFALSE 60185
// exit ;
60183: GO 60467
// if GetType ( factory ) = unit_human then
60185: LD_VAR 0 1
60189: PPUSH
60190: CALL_OW 247
60194: PUSH
60195: LD_INT 1
60197: EQUAL
60198: IFFALSE 60215
// factory := IsInUnit ( factory ) ;
60200: LD_ADDR_VAR 0 1
60204: PUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 310
60214: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60215: LD_VAR 0 1
60219: PPUSH
60220: CALL_OW 266
60224: PUSH
60225: LD_INT 3
60227: NONEQUAL
60228: IFFALSE 60232
// exit ;
60230: GO 60467
// for i := 1 to Count ( factoryWaypoints ) do
60232: LD_ADDR_VAR 0 5
60236: PUSH
60237: DOUBLE
60238: LD_INT 1
60240: DEC
60241: ST_TO_ADDR
60242: LD_EXP 53
60246: PPUSH
60247: CALL 5112 0 1
60251: PUSH
60252: FOR_TO
60253: IFFALSE 60415
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60255: LD_VAR 0 2
60259: PPUSH
60260: LD_VAR 0 3
60264: PPUSH
60265: CALL_OW 428
60269: PUSH
60270: LD_EXP 53
60274: PUSH
60275: LD_VAR 0 5
60279: ARRAY
60280: PUSH
60281: LD_INT 2
60283: ARRAY
60284: EQUAL
60285: IFFALSE 60317
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60287: LD_ADDR_EXP 53
60291: PUSH
60292: LD_EXP 53
60296: PPUSH
60297: LD_VAR 0 5
60301: PPUSH
60302: CALL_OW 3
60306: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60307: CALL 60472 0 0
// exit ;
60311: POP
60312: POP
60313: GO 60467
// end else
60315: GO 60413
// if factory = factoryWaypoints [ i ] [ 2 ] then
60317: LD_VAR 0 1
60321: PUSH
60322: LD_EXP 53
60326: PUSH
60327: LD_VAR 0 5
60331: ARRAY
60332: PUSH
60333: LD_INT 2
60335: ARRAY
60336: EQUAL
60337: IFFALSE 60413
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60339: LD_ADDR_EXP 53
60343: PUSH
60344: LD_EXP 53
60348: PPUSH
60349: LD_VAR 0 5
60353: PPUSH
60354: CALL_OW 3
60358: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60359: LD_ADDR_EXP 53
60363: PUSH
60364: LD_EXP 53
60368: PPUSH
60369: LD_VAR 0 1
60373: PPUSH
60374: CALL_OW 255
60378: PUSH
60379: LD_VAR 0 1
60383: PUSH
60384: LD_VAR 0 2
60388: PUSH
60389: LD_VAR 0 3
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: PPUSH
60400: CALL 40721 0 2
60404: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60405: CALL 60472 0 0
// exit ;
60409: POP
60410: POP
60411: GO 60467
// end ; end ;
60413: GO 60252
60415: POP
60416: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60417: LD_ADDR_EXP 53
60421: PUSH
60422: LD_EXP 53
60426: PPUSH
60427: LD_VAR 0 1
60431: PPUSH
60432: CALL_OW 255
60436: PUSH
60437: LD_VAR 0 1
60441: PUSH
60442: LD_VAR 0 2
60446: PUSH
60447: LD_VAR 0 3
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: PPUSH
60458: CALL 40721 0 2
60462: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60463: CALL 60472 0 0
// end ;
60467: LD_VAR 0 4
60471: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60472: LD_INT 0
60474: PPUSH
60475: PPUSH
60476: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60477: LD_STRING resetFactoryWaypoint();
60479: PPUSH
60480: CALL_OW 559
// if factoryWaypoints then
60484: LD_EXP 53
60488: IFFALSE 60609
// begin list := factoryWaypoints ;
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: LD_EXP 53
60499: ST_TO_ADDR
// for i := 1 to list do
60500: LD_ADDR_VAR 0 2
60504: PUSH
60505: DOUBLE
60506: LD_INT 1
60508: DEC
60509: ST_TO_ADDR
60510: LD_VAR 0 3
60514: PUSH
60515: FOR_TO
60516: IFFALSE 60607
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60518: LD_STRING setFactoryWaypointXY(
60520: PUSH
60521: LD_VAR 0 3
60525: PUSH
60526: LD_VAR 0 2
60530: ARRAY
60531: PUSH
60532: LD_INT 1
60534: ARRAY
60535: STR
60536: PUSH
60537: LD_STRING ,
60539: STR
60540: PUSH
60541: LD_VAR 0 3
60545: PUSH
60546: LD_VAR 0 2
60550: ARRAY
60551: PUSH
60552: LD_INT 2
60554: ARRAY
60555: STR
60556: PUSH
60557: LD_STRING ,
60559: STR
60560: PUSH
60561: LD_VAR 0 3
60565: PUSH
60566: LD_VAR 0 2
60570: ARRAY
60571: PUSH
60572: LD_INT 3
60574: ARRAY
60575: STR
60576: PUSH
60577: LD_STRING ,
60579: STR
60580: PUSH
60581: LD_VAR 0 3
60585: PUSH
60586: LD_VAR 0 2
60590: ARRAY
60591: PUSH
60592: LD_INT 4
60594: ARRAY
60595: STR
60596: PUSH
60597: LD_STRING )
60599: STR
60600: PPUSH
60601: CALL_OW 559
60605: GO 60515
60607: POP
60608: POP
// end ; end ;
60609: LD_VAR 0 1
60613: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60614: LD_INT 0
60616: PPUSH
// if HexInfo ( x , y ) = warehouse then
60617: LD_VAR 0 2
60621: PPUSH
60622: LD_VAR 0 3
60626: PPUSH
60627: CALL_OW 428
60631: PUSH
60632: LD_VAR 0 1
60636: EQUAL
60637: IFFALSE 60664
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60639: LD_ADDR_EXP 55
60643: PUSH
60644: LD_EXP 55
60648: PPUSH
60649: LD_VAR 0 1
60653: PPUSH
60654: LD_INT 0
60656: PPUSH
60657: CALL_OW 1
60661: ST_TO_ADDR
60662: GO 60715
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60664: LD_ADDR_EXP 55
60668: PUSH
60669: LD_EXP 55
60673: PPUSH
60674: LD_VAR 0 1
60678: PPUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 255
60688: PUSH
60689: LD_VAR 0 1
60693: PUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_VAR 0 3
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: PPUSH
60710: CALL_OW 1
60714: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60715: CALL 60724 0 0
// end ;
60719: LD_VAR 0 4
60723: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60724: LD_INT 0
60726: PPUSH
60727: PPUSH
60728: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60729: LD_STRING resetWarehouseGatheringPoints();
60731: PPUSH
60732: CALL_OW 559
// if warehouseGatheringPoints then
60736: LD_EXP 55
60740: IFFALSE 60866
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60742: LD_ADDR_VAR 0 3
60746: PUSH
60747: LD_EXP 55
60751: PPUSH
60752: CALL 44489 0 1
60756: ST_TO_ADDR
// for i := 1 to list do
60757: LD_ADDR_VAR 0 2
60761: PUSH
60762: DOUBLE
60763: LD_INT 1
60765: DEC
60766: ST_TO_ADDR
60767: LD_VAR 0 3
60771: PUSH
60772: FOR_TO
60773: IFFALSE 60864
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60775: LD_STRING setWarehouseGatheringPointXY(
60777: PUSH
60778: LD_VAR 0 3
60782: PUSH
60783: LD_VAR 0 2
60787: ARRAY
60788: PUSH
60789: LD_INT 1
60791: ARRAY
60792: STR
60793: PUSH
60794: LD_STRING ,
60796: STR
60797: PUSH
60798: LD_VAR 0 3
60802: PUSH
60803: LD_VAR 0 2
60807: ARRAY
60808: PUSH
60809: LD_INT 2
60811: ARRAY
60812: STR
60813: PUSH
60814: LD_STRING ,
60816: STR
60817: PUSH
60818: LD_VAR 0 3
60822: PUSH
60823: LD_VAR 0 2
60827: ARRAY
60828: PUSH
60829: LD_INT 3
60831: ARRAY
60832: STR
60833: PUSH
60834: LD_STRING ,
60836: STR
60837: PUSH
60838: LD_VAR 0 3
60842: PUSH
60843: LD_VAR 0 2
60847: ARRAY
60848: PUSH
60849: LD_INT 4
60851: ARRAY
60852: STR
60853: PUSH
60854: LD_STRING )
60856: STR
60857: PPUSH
60858: CALL_OW 559
60862: GO 60772
60864: POP
60865: POP
// end ; end ;
60866: LD_VAR 0 1
60870: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60871: LD_INT 0
60873: PPUSH
60874: PPUSH
// if not mpSidePositions then
60875: LD_EXP 5
60879: NOT
60880: IFFALSE 60884
// exit ;
60882: GO 60955
// result :=  ;
60884: LD_ADDR_VAR 0 1
60888: PUSH
60889: LD_STRING 
60891: ST_TO_ADDR
// for i := 1 to 8 do
60892: LD_ADDR_VAR 0 2
60896: PUSH
60897: DOUBLE
60898: LD_INT 1
60900: DEC
60901: ST_TO_ADDR
60902: LD_INT 8
60904: PUSH
60905: FOR_TO
60906: IFFALSE 60936
// begin result := result & mpSidePositions [ i ] & ; ;
60908: LD_ADDR_VAR 0 1
60912: PUSH
60913: LD_VAR 0 1
60917: PUSH
60918: LD_EXP 5
60922: PUSH
60923: LD_VAR 0 2
60927: ARRAY
60928: STR
60929: PUSH
60930: LD_STRING ;
60932: STR
60933: ST_TO_ADDR
// end ;
60934: GO 60905
60936: POP
60937: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60938: LD_STRING setMultiplayerRealPosition("
60940: PUSH
60941: LD_VAR 0 1
60945: STR
60946: PUSH
60947: LD_STRING ");
60949: STR
60950: PPUSH
60951: CALL_OW 559
// end ;
60955: LD_VAR 0 1
60959: RET
